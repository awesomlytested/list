{"repo":"appsmithorg/appsmith","url":"https://github.com/appsmithorg/appsmith","branch":"release","configs":[{"package":"appsmith","lang":"js","dir":"app/client/cypress","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"should test that settings page is accessible to super user","suites":["Admin settings page"],"updatePoint":{"line":29,"column":64,"index":729},"line":29,"code":"  it(\"should test that settings page is accessible to super user\", () => {\n    cy.LogOut();\n    cy.LoginFromAPI(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.visit(\"/applications\");\n    cy.get(\".t--profile-menu-icon\").should(\"be.visible\");\n    cy.get(\".t--profile-menu-icon\").click();\n    cy.get(\".t--admin-settings-menu\").should(\"be.visible\");\n    cy.get(\".t--admin-settings-menu\").click();\n    cy.url().should(\"contain\", \"/settings/general\");\n    cy.wait(\"@getEnvVariables\");\n    cy.LogOut();\n  });","file":"integration/Smoke_TestSuite_Fat/ClientSideTests/AdminSettings/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should test that settings page is not accessible to normal users","suites":["Admin settings page"],"updatePoint":{"line":41,"column":70,"index":1248},"line":41,"code":"  it(\"should test that settings page is not accessible to normal users\", () => {\n    cy.wait(2000);\n    cy.LoginFromAPI(Cypress.env(\"TESTUSERNAME1\"), Cypress.env(\"TESTPASSWORD1\"));\n    cy.visit(\"/applications\");\n    cy.get(\".t--profile-menu-icon\").should(\"be.visible\");\n    cy.get(\".t--profile-menu-icon\").click();\n    cy.get(\".t--admin-settings-menu\").should(\"not.exist\");\n    cy.visit(\"/settings/general\"); // non super users are redirected to home page\n\n    cy.url().should(\"contain\", \"/applications\");\n    cy.LogOut();\n  });","file":"integration/Smoke_TestSuite_Fat/ClientSideTests/AdminSettings/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should test that settings page is redirected to default tab","suites":["Admin settings page"],"updatePoint":{"line":53,"column":65,"index":1772},"line":53,"code":"  it(\"should test that settings page is redirected to default tab\", () => {\n    cy.LoginFromAPI(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.visit(\"/applications\");\n    cy.wait(3000);\n    cy.visit(\"/settings\");\n    cy.url().should(\"contain\", \"/settings/general\");\n  });","file":"integration/Smoke_TestSuite_Fat/ClientSideTests/AdminSettings/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should test that settings page tab redirects","suites":["Admin settings page"],"updatePoint":{"line":60,"column":50,"index":2040},"line":60,"code":"  it(\"should test that settings page tab redirects\", () => {\n    cy.visit(\"/applications\");\n    cy.wait(3000);\n    cy.get(\".t--profile-menu-icon\").click();\n    cy.get(\".t--admin-settings-menu\").click();\n    cy.get(adminsSettings.generalTab).click();\n    cy.url().should(\"contain\", \"/settings/general\");\n    cy.get(adminsSettings.advancedTab).click();\n    cy.url().should(\"contain\", \"/settings/advanced\");\n    cy.get(adminsSettings.authenticationTab).click();\n    cy.url().should(\"contain\", \"/settings/authentication\");\n    cy.get(adminsSettings.emailTab).click();\n    cy.url().should(\"contain\", \"/settings/email\");\n    cy.get(adminsSettings.googleMapsTab).click();\n    cy.url().should(\"contain\", \"/settings/google-maps\");\n    cy.get(adminsSettings.versionTab).click();\n    cy.url().should(\"contain\", \"/settings/version\");\n  });","file":"integration/Smoke_TestSuite_Fat/ClientSideTests/AdminSettings/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should test that authentication page redirects","suites":["Admin settings page"],"updatePoint":{"line":78,"column":52,"index":2870},"line":78,"code":"  it(\"should test that authentication page redirects\", () => {\n    cy.visit(\"/settings/general\");\n    cy.get(adminsSettings.authenticationTab).click();\n    cy.url().should(\"contain\", \"/settings/authentication\");\n    cy.get(adminsSettings.googleButton).click();\n    cy.url().should(\"contain\", \"/settings/authentication/google-auth\");\n    cy.get(adminsSettings.authenticationTab).click();\n    cy.url().should(\"contain\", \"/settings/authentication\");\n    cy.get(adminsSettings.githubButton).click();\n    cy.url().should(\"contain\", \"/settings/authentication/github-auth\");\n    cy.get(adminsSettings.authenticationTab).click();\n    cy.url().should(\"contain\", \"/settings/authentication\");\n    cy.get(adminsSettings.formloginButton).click();\n    cy.url().should(\"contain\", \"/settings/authentication/form-login\");\n  });","file":"integration/Smoke_TestSuite_Fat/ClientSideTests/AdminSettings/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should test that configure link redirects to google signup setup doc","suites":["Admin settings page"],"updatePoint":{"line":93,"column":74,"index":3703},"line":93,"code":"  it(\"should test that configure link redirects to google signup setup doc\", () => {\n    cy.visit(\"/settings/general\");\n    cy.get(adminsSettings.authenticationTab).click();\n    cy.url().should(\"contain\", \"/settings/authentication\");\n    cy.get(adminsSettings.googleButton).click();\n    cy.url().should(\"contain\", \"/settings/authentication/google-auth\");\n    cy.get(adminsSettings.readMoreLink).within(() => {\n      cy.get(\"a\").should(\"have.attr\", \"target\", \"_blank\").invoke(\"removeAttr\", \"target\").click();\n      cy.url().should(\"contain\", GOOGLE_SIGNUP_SETUP_DOC);\n    });\n  });","file":"integration/Smoke_TestSuite_Fat/ClientSideTests/AdminSettings/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should test that configure link redirects to github signup setup doc","suites":["Admin settings page"],"updatePoint":{"line":104,"column":74,"index":4284},"line":104,"code":"  it(\"should test that configure link redirects to github signup setup doc\", () => {\n    cy.visit(\"/settings/general\");\n    cy.get(adminsSettings.authenticationTab).click();\n    cy.url().should(\"contain\", \"/settings/authentication\");\n    cy.get(adminsSettings.githubButton).click();\n    cy.url().should(\"contain\", \"/settings/authentication/github-auth\");\n    cy.get(adminsSettings.readMoreLink).within(() => {\n      cy.get(\"a\").should(\"have.attr\", \"target\", \"_blank\").invoke(\"removeAttr\", \"target\").click();\n      cy.url().should(\"contain\", GITHUB_SIGNUP_SETUP_DOC);\n    });\n  });","file":"integration/Smoke_TestSuite_Fat/ClientSideTests/AdminSettings/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should test save and clear buttons disabled state","suites":["Admin settings page"],"updatePoint":{"line":115,"column":55,"index":4846},"line":115,"code":"  it(\"should test save and clear buttons disabled state\", () => {\n    cy.visit(\"/settings/general\");\n\n    const assertVisibilityAndDisabledState = () => {\n      cy.get(adminsSettings.saveButton).should(\"be.visible\");\n      cy.get(adminsSettings.saveButton).should(\"be.disabled\");\n      cy.get(adminsSettings.resetButton).should(\"be.visible\");\n      cy.get(adminsSettings.resetButton).should(\"be.disabled\");\n    };\n\n    assertVisibilityAndDisabledState();\n    cy.get(adminsSettings.instanceName).should(\"be.visible\");\n    cy.get(adminsSettings.instanceName).clear().type(\"AppsmithInstance\");\n    cy.get(adminsSettings.saveButton).should(\"be.visible\");\n    cy.get(adminsSettings.saveButton).should(\"not.be.disabled\");\n    cy.get(adminsSettings.resetButton).should(\"be.visible\");\n    cy.get(adminsSettings.resetButton).should(\"not.be.disabled\");\n    cy.get(adminsSettings.resetButton).click();\n    assertVisibilityAndDisabledState();\n  });","file":"integration/Smoke_TestSuite_Fat/ClientSideTests/AdminSettings/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should test saving a setting value","suites":["Admin settings page"],"updatePoint":{"line":135,"column":40,"index":5768},"line":135,"code":"  it(\"should test saving a setting value\", () => {\n    cy.visit(\"/settings/general\");\n    cy.get(adminsSettings.restartNotice).should(\"not.exist\");\n    cy.get(adminsSettings.instanceName).should(\"be.visible\");\n    let instanceName;\n    cy.generateUUID().then(uuid => {\n      instanceName = uuid;\n      cy.get(adminsSettings.instanceName).clear().type(uuid);\n    });\n    cy.get(adminsSettings.saveButton).should(\"be.visible\");\n    cy.get(adminsSettings.saveButton).should(\"not.be.disabled\");\n    cy.intercept(\"POST\", \"/api/v1/admin/restart\", {\n      body: {\n        responseMeta: {\n          status: 200,\n          success: true\n        },\n        data: true\n      }\n    });\n    cy.get(adminsSettings.saveButton).click();\n    cy.wait(\"@postEnvVariables\").then(interception => {\n      expect(interception.request.body.APPSMITH_INSTANCE_NAME).to.equal(instanceName);\n    });\n    cy.get(adminsSettings.restartNotice).should(\"be.visible\");\n    cy.wait(3000);\n    cy.get(adminsSettings.restartNotice).should(\"not.exist\");\n    cy.wait(3000);\n  });","file":"integration/Smoke_TestSuite_Fat/ClientSideTests/AdminSettings/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should test saving settings value from different tabs","suites":["Admin settings page"],"updatePoint":{"line":164,"column":59,"index":6828},"line":164,"code":"  it(\"should test saving settings value from different tabs\", () => {\n    cy.visit(\"/settings/general\");\n    cy.get(adminsSettings.restartNotice).should(\"not.exist\");\n    cy.get(adminsSettings.instanceName).should(\"be.visible\");\n    let instanceName;\n    cy.generateUUID().then(uuid => {\n      instanceName = uuid;\n      cy.get(adminsSettings.instanceName).clear().type(uuid);\n    });\n    cy.get(adminsSettings.saveButton).should(\"be.visible\");\n    cy.get(adminsSettings.saveButton).should(\"not.be.disabled\");\n    cy.get(adminsSettings.emailTab).click();\n    cy.get(adminsSettings.saveButton).should(\"be.visible\");\n    cy.get(adminsSettings.saveButton).should(\"not.be.disabled\");\n    cy.get(adminsSettings.fromAddress).should(\"be.visible\");\n    let fromAddress;\n    cy.generateUUID().then(uuid => {\n      fromAddress = uuid;\n      cy.get(adminsSettings.fromAddress).clear().type(`${uuid}@appsmith.com`);\n    });\n    cy.intercept(\"POST\", \"/api/v1/admin/restart\", {\n      body: {\n        responseMeta: {\n          status: 200,\n          success: true\n        },\n        data: true\n      }\n    });\n    cy.get(adminsSettings.saveButton).click();\n    cy.wait(\"@postEnvVariables\").then(interception => {\n      expect(interception.request.body.APPSMITH_INSTANCE_NAME).to.equal(instanceName);\n      expect(interception.request.body.APPSMITH_MAIL_FROM).to.equal(`${fromAddress}@appsmith.com`);\n    });\n    cy.get(adminsSettings.restartNotice).should(\"be.visible\");\n    cy.wait(3000);\n    cy.get(adminsSettings.restartNotice).should(\"not.exist\");\n    cy.wait(3000);\n  });","file":"integration/Smoke_TestSuite_Fat/ClientSideTests/AdminSettings/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Go to admin settings and disable Form Signup","suites":["Form Login test functionality"],"updatePoint":{"line":7,"column":53,"index":312},"line":7,"code":"  it(\"1. Go to admin settings and disable Form Signup\", function () {\n    cy.LogOut();\n    cy.LoginFromAPI(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.visit(\"/applications\");\n    cy.openAuthentication();\n    cy.get(adminSettings.formloginButton).should(\"be.visible\").should(\"contain\", \"EDIT\");\n    cy.get(adminSettings.formloginButton).click();\n    cy.wait(2000); // disable form signup\n\n    cy.get(adminSettings.formSignupDisabled).get(\"input\").should(\"have.value\", \"true\");\n    cy.get(adminSettings.formSignupDisabled).click({\n      force: true\n    });\n    cy.wait(2000); // assert server is restarting\n\n    cy.get(adminSettings.saveButton).should(\"be.visible\");\n    cy.get(adminSettings.saveButton).should(\"not.be.disabled\");\n    cy.get(adminSettings.saveButton).click();\n    cy.get(adminSettings.restartNotice).should(\"be.visible\"); // adding wait for server to restart\n\n    cy.wait(120000);\n    cy.waitUntil(() => cy.get(homePage.profileMenu).should(\"be.visible\"));\n    cy.get(homePage.profileMenu).click();\n    cy.get(homePage.signOutIcon).click();\n    cy.wait(500); // validating form signup is disabled\n\n    cy.get(\".t--sign-up\").click({\n      force: true\n    });\n    cy.generateUUID().then(uid => {\n      cy.get(\"[type='email']\").type(uid + \"@appsmith.com\");\n      cy.get(\"[type='password']\").type(uid);\n      cy.get(\"[type='submit']\").click({\n        force: true\n      });\n      cy.get(\".form-message-container\").should(\"contain\", \"Signup is restricted on this instance of Appsmith\"); // restore setting\n\n      cy.LoginFromAPI(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n      cy.visit(\"/applications\");\n      cy.get(\".t--profile-menu-icon\").click();\n      cy.get(\".t--admin-settings-menu\").click();\n      cy.get(adminSettings.authenticationTab).click();\n      cy.get(adminSettings.formloginButton).click();\n      cy.wait(2000);\n      cy.get(adminSettings.formSignupDisabled).click({\n        force: true\n      });\n      cy.wait(2000);\n      cy.get(adminSettings.saveButton).click();\n      cy.get(adminSettings.restartNotice).should(\"be.visible\");\n      cy.wait(120000);\n      cy.waitUntil(() => cy.get(homePage.profileMenu).should(\"be.visible\"));\n      cy.get(homePage.profileMenu).click();\n      cy.get(homePage.signOutIcon).click();\n    });\n    cy.wait(500); // validating form signup is disabled\n\n    cy.get(\".t--sign-up\").click({\n      force: true\n    });\n    cy.generateUUID().then(uid => {\n      cy.get(\"[type='email']\").type(uid + \"@appsmith.com\");\n      cy.get(\"[type='password']\").type(uid);\n      cy.get(\"[type='submit']\").click({\n        force: true\n      });\n      cy.get(\".form-message-container\").should(\"not.exist\");\n    });\n  });","file":"integration/Smoke_TestSuite_Fat/ClientSideTests/FormLogin/EnableFormLogin_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Go to admin settings and disable Form Login","suites":["Form Login test functionality"],"updatePoint":{"line":76,"column":52,"index":2988},"line":76,"code":"  it(\"2. Go to admin settings and disable Form Login\", function () {\n    cy.LogOut();\n    cy.LoginFromAPI(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.visit(\"/applications\");\n    cy.openAuthentication();\n    cy.get(adminSettings.formloginButton).should(\"be.visible\").should(\"contain\", \"EDIT\"); // enable github login\n\n    cy.get(adminSettings.githubButton).click();\n    cy.wait(2000); // fill github form\n\n    cy.fillGithubForm();\n    cy.wait(120000);\n    cy.waitUntil(() => cy.get(homePage.profileMenu).should(\"be.visible\"));\n    cy.wait(5000);\n    cy.reload();\n    cy.get(adminSettings.authenticationTab).click();\n    cy.get(adminSettings.formloginButton).click();\n    cy.wait(2000); // disable form signup\n\n    cy.get(adminSettings.formLoginDisabled).get(\"input\").should(\"have.value\", \"true\");\n    cy.get(adminSettings.formLoginDisabled).click({\n      force: true\n    });\n    cy.wait(2000); // assert server is restarting\n\n    cy.get(adminSettings.saveButton).should(\"be.visible\");\n    cy.get(adminSettings.saveButton).should(\"not.be.disabled\");\n    cy.get(adminSettings.saveButton).click();\n    cy.get(adminSettings.restartNotice).should(\"be.visible\"); // adding wait for server to restart\n\n    cy.wait(120000);\n    cy.waitUntil(() => cy.get(homePage.profileMenu).should(\"be.visible\"));\n    cy.get(homePage.profileMenu).click();\n    cy.get(homePage.signOutIcon).click();\n    cy.wait(500);\n    cy.reload();\n    cy.wait(5000); // validating form signup is disabled\n\n    cy.get(\"form\").should(\"not.exist\");\n    cy.get(\".t--sign-up\").should(\"not.exist\"); // cy.wait(30000); // restart nginx docker\n\n    cy.LoginFromAPI(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.visit(\"/applications\");\n    cy.openAuthentication(); // enable form login\n\n    cy.get(adminSettings.formloginButton).should(\"be.visible\").should(\"contain\", \"ENABLE\");\n    cy.get(adminSettings.formloginButton).click();\n    cy.get(adminSettings.formLoginDisabled).click({\n      force: true\n    });\n    cy.wait(2000); // assert server is restarting\n\n    cy.get(adminSettings.saveButton).should(\"be.visible\");\n    cy.get(adminSettings.saveButton).should(\"not.be.disabled\");\n    cy.get(adminSettings.saveButton).click();\n    cy.get(adminSettings.restartNotice).should(\"be.visible\"); // adding wait for server to restart\n\n    cy.wait(120000);\n    cy.waitUntil(() => cy.get(homePage.profileMenu).should(\"be.visible\"));\n    cy.reload(); // disable github\n\n    cy.get(adminSettings.authenticationTab).click();\n    cy.get(adminSettings.githubButton).click();\n    cy.wait(2000);\n    cy.get(adminSettings.disconnectBtn).click().should(\"contain\", \"Are you sure?\");\n    cy.get(adminSettings.disconnectBtn).click();\n    cy.wait(120000);\n    cy.waitUntil(() => cy.get(homePage.profileMenu).should(\"be.visible\"));\n    cy.reload();\n    cy.get(homePage.profileMenu).click();\n    cy.get(homePage.signOutIcon).click();\n    cy.wait(500);\n    cy.get(adminSettings.loginWithGithub).should(\"not.exist\");\n    cy.get(\"form\").should(\"exist\");\n    cy.get(\".t--sign-up\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite_Fat/ClientSideTests/FormLogin/EnableFormLogin_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Go to admin settings and enable Github with not all mandatory fields filled","suites":["SSO with Github test functionality"],"updatePoint":{"line":7,"column":84,"index":348},"line":7,"code":"  it(\"1. Go to admin settings and enable Github with not all mandatory fields filled\", function () {\n    cy.LogOut();\n    cy.LoginFromAPI(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.visit(\"/applications\");\n    cy.get(\".t--profile-menu-icon\").should(\"be.visible\");\n    cy.get(\".t--profile-menu-icon\").click();\n    cy.get(\".t--admin-settings-menu\").should(\"be.visible\");\n    cy.get(\".t--admin-settings-menu\").click();\n    cy.url().should(\"contain\", \"/settings/general\"); // click authentication tab\n\n    cy.get(adminSettings.authenticationTab).click();\n    cy.url().should(\"contain\", \"/settings/authentication\");\n    cy.get(adminSettings.githubButton).should(\"be.visible\").should(\"contain\", \"ENABLE\");\n    cy.get(adminSettings.githubButton).click();\n    cy.wait(2000); // fill github form\n\n    cy.fillGithubFormPartly();\n    cy.get(commonlocators.toastBody).should(\"be.visible\");\n    cy.get(commonlocators.toastBody).should(\"contain\", \"Mandatory fields cannot be empty\");\n  });","file":"integration/Smoke_TestSuite_Fat/ClientSideTests/Github/EnableGithub_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Go to admin settings and enable Github","suites":["SSO with Github test functionality"],"updatePoint":{"line":27,"column":47,"index":1301},"line":27,"code":"  it(\"2. Go to admin settings and enable Github\", function () {\n    cy.LogOut();\n    cy.LoginFromAPI(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.visit(\"/applications\");\n    cy.get(\".t--profile-menu-icon\").should(\"be.visible\");\n    cy.get(\".t--profile-menu-icon\").click();\n    cy.get(\".t--admin-settings-menu\").should(\"be.visible\");\n    cy.get(\".t--admin-settings-menu\").click();\n    cy.url().should(\"contain\", \"/settings/general\"); // click authentication tab\n\n    cy.get(adminSettings.authenticationTab).click();\n    cy.url().should(\"contain\", \"/settings/authentication\");\n    cy.get(adminSettings.githubButton).should(\"be.visible\").should(\"contain\", \"ENABLE\");\n    cy.get(adminSettings.githubButton).click();\n    cy.wait(2000); // fill github form\n\n    cy.fillGithubForm();\n    cy.wait(2000); // assert server is restarting\n\n    cy.get(adminSettings.restartNotice).should(\"be.visible\"); // adding wait for server to restart\n\n    cy.wait(120000);\n    cy.waitUntil(() => cy.get(homePage.profileMenu).should(\"be.visible\"));\n    cy.get(homePage.profileMenu).click();\n    cy.get(homePage.signOutIcon).click();\n    cy.wait(500); // validating sso with github is enabled\n\n    cy.get(adminSettings.loginWithGithub).should(\"have.text\", \"continue with Github\");\n  });","file":"integration/Smoke_TestSuite_Fat/ClientSideTests/Github/EnableGithub_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Go to admin settings and disable Github","suites":["SSO with Github test functionality"],"updatePoint":{"line":56,"column":48,"index":2576},"line":56,"code":"  it(\"3. Go to admin settings and disable Github\", function () {\n    cy.LogOut();\n    cy.LoginFromAPI(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.visit(\"/applications\");\n    cy.get(\".t--profile-menu-icon\").should(\"be.visible\");\n    cy.get(\".t--profile-menu-icon\").click();\n    cy.get(\".t--admin-settings-menu\").should(\"be.visible\");\n    cy.get(\".t--admin-settings-menu\").click();\n    cy.url().should(\"contain\", \"/settings/general\"); // click authentication tab\n\n    cy.get(adminSettings.authenticationTab).click();\n    cy.url().should(\"contain\", \"/settings/authentication\");\n    cy.get(adminSettings.githubButton).should(\"be.visible\").should(\"contain\", \"EDIT\");\n    cy.get(adminSettings.githubButton).click();\n    cy.wait(2000);\n    cy.get(adminSettings.disconnectBtn).should(\"be.visible\").should(\"contain\", \"Disconnect\");\n    cy.get(adminSettings.disconnectBtn).click().should(\"contain\", \"Are you sure?\");\n    cy.get(adminSettings.disconnectBtn).click(); // assert server is restarting\n\n    cy.get(adminSettings.restartNotice).should(\"be.visible\"); // adding wait for server to restart\n\n    cy.wait(120000);\n    cy.waitUntil(() => cy.get(homePage.profileMenu).should(\"be.visible\"));\n    cy.get(homePage.profileMenu).click();\n    cy.get(homePage.signOutIcon).click();\n    cy.wait(500); // validating sso with github is disabled\n\n    cy.get(adminSettings.loginWithGithub).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite_Fat/ClientSideTests/Github/EnableGithub_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Go to admin settings and enable Google with not all mandatory fields filled","suites":["SSO with Google test functionality"],"updatePoint":{"line":7,"column":84,"index":348},"line":7,"code":"  it(\"1. Go to admin settings and enable Google with not all mandatory fields filled\", function () {\n    cy.LogOut();\n    cy.LoginFromAPI(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.visit(\"/applications\");\n    cy.get(\".t--profile-menu-icon\").should(\"be.visible\");\n    cy.get(\".t--profile-menu-icon\").click();\n    cy.get(\".t--admin-settings-menu\").should(\"be.visible\");\n    cy.get(\".t--admin-settings-menu\").click();\n    cy.url().should(\"contain\", \"/settings/general\"); // click authentication tab\n\n    cy.get(adminSettings.authenticationTab).click();\n    cy.url().should(\"contain\", \"/settings/authentication\");\n    cy.get(adminSettings.googleButton).should(\"be.visible\").should(\"contain\", \"ENABLE\");\n    cy.get(adminSettings.googleButton).click();\n    cy.wait(2000); // fill google form\n\n    cy.fillGoogleFormPartly();\n    cy.get(commonlocators.toastBody).should(\"be.visible\");\n    cy.get(commonlocators.toastBody).should(\"contain\", \"Mandatory fields cannot be empty\");\n  });","file":"integration/Smoke_TestSuite_Fat/ClientSideTests/Google/EnableGoogle_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Go to admin settings and enable Google","suites":["SSO with Google test functionality"],"updatePoint":{"line":27,"column":47,"index":1301},"line":27,"code":"  it(\"2. Go to admin settings and enable Google\", function () {\n    cy.LogOut();\n    cy.LoginFromAPI(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.visit(\"/applications\");\n    cy.get(\".t--profile-menu-icon\").should(\"be.visible\");\n    cy.get(\".t--profile-menu-icon\").click();\n    cy.get(\".t--admin-settings-menu\").should(\"be.visible\");\n    cy.get(\".t--admin-settings-menu\").click();\n    cy.url().should(\"contain\", \"/settings/general\"); // click authentication tab\n\n    cy.get(adminSettings.authenticationTab).click();\n    cy.url().should(\"contain\", \"/settings/authentication\");\n    cy.get(adminSettings.googleButton).should(\"be.visible\").should(\"contain\", \"ENABLE\");\n    cy.get(adminSettings.googleButton).click();\n    cy.wait(2000); // fill google form\n\n    cy.fillGoogleForm();\n    cy.wait(2000); // assert server is restarting\n\n    cy.get(adminSettings.restartNotice).should(\"be.visible\"); // adding wait for server to restart\n\n    cy.wait(120000);\n    cy.waitUntil(() => cy.get(homePage.profileMenu).should(\"be.visible\"));\n    cy.get(homePage.profileMenu).click();\n    cy.get(homePage.signOutIcon).click();\n    cy.wait(500); // validating sso with google is enabled\n\n    cy.get(adminSettings.loginWithGoogle).should(\"have.text\", \"continue with Google\");\n  });","file":"integration/Smoke_TestSuite_Fat/ClientSideTests/Google/EnableGoogle_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Go to admin settings and disable Google","suites":["SSO with Google test functionality"],"updatePoint":{"line":56,"column":48,"index":2576},"line":56,"code":"  it(\"3. Go to admin settings and disable Google\", function () {\n    cy.LogOut();\n    cy.LoginFromAPI(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.visit(\"/applications\");\n    cy.get(\".t--profile-menu-icon\").should(\"be.visible\");\n    cy.get(\".t--profile-menu-icon\").click();\n    cy.get(\".t--admin-settings-menu\").should(\"be.visible\");\n    cy.get(\".t--admin-settings-menu\").click();\n    cy.url().should(\"contain\", \"/settings/general\"); // click authentication tab\n\n    cy.get(adminSettings.authenticationTab).click();\n    cy.url().should(\"contain\", \"/settings/authentication\");\n    cy.get(adminSettings.googleButton).should(\"be.visible\").should(\"contain\", \"EDIT\");\n    cy.get(adminSettings.googleButton).click();\n    cy.wait(2000);\n    cy.get(adminSettings.disconnectBtn).should(\"be.visible\").should(\"contain\", \"Disconnect\");\n    cy.get(adminSettings.disconnectBtn).click().should(\"contain\", \"Are you sure?\");\n    cy.get(adminSettings.disconnectBtn).click(); // assert server is restarting\n\n    cy.get(adminSettings.restartNotice).should(\"be.visible\"); // adding wait for server to restart\n\n    cy.wait(120000);\n    cy.waitUntil(() => cy.get(homePage.profileMenu).should(\"be.visible\"));\n    cy.get(homePage.profileMenu).click();\n    cy.get(homePage.signOutIcon).click();\n    cy.wait(500); // validating sso with google is disabled\n\n    cy.get(adminSettings.loginWithGoogle).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite_Fat/ClientSideTests/Google/EnableGoogle_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1.Create Get echo Api call","suites":["Content Management System App"],"updatePoint":{"line":18,"column":32,"index":521},"line":18,"code":"  it(\"1.Create Get echo Api call\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"get_data\"); // creating get request using echo\n\n    cy.enterDatasourceAndPath(\"https://mock-api.appsmith.com/echo\", \"/get\");\n    cy.get(apiwidget.headerKey).type(\"info\");\n    cy.xpath(\"//span[text()='Key']\").click(); // entering the data in header\n\n    cy.get(apiwidget.headerValue).type('[{\"due\":\"2021-11-23\",\"assignee\":\"Dan.Wyman@hotmail.com\",\"title\":\"Recusan\",\"description\":\"Ut quisquam eum beatae facere eos aliquam laborum ea.\",\"id\":\"1\"},{\"due\":\"2021-11-23\",\"assignee\":\"Dashawn_Maggio30@gmail.com\",\"title\":\"Dignissimos eaque\",\"description\":\"Consequatur corrupti et possimus en.\",\"id\":\"2\"},{\"due\":\"2021-11-24\",\"assignee\":\"Curt50@gmail.com\",\"title\":\"Voluptas explicabo\",\"description\":\"Quia ratione optio et maiores.\",\"id\":\"3\"},{\"due\":\"2021-11-23\",\"assignee\":\"Shanna63@hotmail.com\",\"title\":\"Aut omnis.\",\"description\":\"Neque rerum numquam veniam voluptatum id. Aut daut.\",\"id\":\"4\"}]', {\n      parseSpecialCharSequences: false\n    });\n    cy.SaveAndRunAPI();\n    cy.ResponseStatusCheck(\"200\");\n  });","file":"integration/Smoke_TestSuite/Application/EchoApiCMS_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Create Post echo Api call","suites":["Content Management System App"],"updatePoint":{"line":32,"column":34,"index":1620},"line":32,"code":"  it(\"2. Create Post echo Api call\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"send_mail\");\n    cy.get(apiEditor.ApiVerb).click();\n    cy.xpath(appPage.selectPost).click(); // creating post request using echo\n\n    cy.enterDatasourceAndPath(\"https://mock-api.appsmith.com/echo\", \"/post\");\n    cy.contains(apiEditor.bodyTab).click({\n      force: true\n    });\n    cy.xpath(apiwidget.postbody).click({\n      force: true\n    }).clear(); // binding the data with widgets in body tab\n\n    cy.xpath(apiwidget.postbody).click({\n      force: true\n    }).focus().type('{\"to\":\"{{to_input.text}}\",\"subject\":\"{{subject.text}}\",\"content\":\"{{content.text}}\"}', {\n      parseSpecialCharSequences: false\n    }).type(\"{del}{del}{del}\");\n    cy.SaveAndRunAPI();\n    cy.ResponseStatusCheck(\"201\");\n  });","file":"integration/Smoke_TestSuite/Application/EchoApiCMS_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Create Delete echo Api call","suites":["Content Management System App"],"updatePoint":{"line":54,"column":36,"index":2425},"line":54,"code":"  it(\"3. Create Delete echo Api call\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"delete_proposal\");\n    cy.get(apiEditor.ApiVerb).click();\n    cy.xpath(appPage.selectDelete).click(); // creating delete request using echo\n\n    cy.enterDatasourceAndPath(\"https://mock-api.appsmith.com/echo\", \"/delete\");\n    cy.contains(apiEditor.bodyTab).click({\n      force: true\n    }); // binding the data with widgets in body tab\n\n    cy.xpath(apiwidget.postbody).click({\n      force: true\n    }).focus().type('{\"title\":\"{{title.text}}\",\"due\":\"{{due.text}}\",\"assignee\":\"{{assignee.text}}\"}', {\n      parseSpecialCharSequences: false\n    }).type(\"{del}{del}{del}\");\n    cy.SaveAndRunAPI(); //cy.ResponseStatusCheck(\"200\");\n  });","file":"integration/Smoke_TestSuite/Application/EchoApiCMS_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Send mail and verify post request body","suites":["Content Management System App"],"updatePoint":{"line":72,"column":47,"index":3170},"line":72,"code":"  it(\"4. Send mail and verify post request body\", function () {\n    // navigating to canvas\n    cy.xpath(appPage.pagebutton).click();\n    cy.get(appPage.submitButton).should(\"be.visible\");\n    cy.xpath(\"//span[text()='3']\").click({\n      force: true\n    });\n    cy.get(appPage.mailButton).closest(\"div\").click(); // verifying the mail to send and asserting post call's response\n\n    cy.xpath(appPage.sendMailText).should(\"be.visible\");\n    cy.xpath(\"//input[@value='Curt50@gmail.com']\").should(\"be.visible\");\n    cy.xpath(appPage.subjectField).type(\"Test\");\n    cy.xpath(appPage.contentField).last().type(\"Task completed\", {\n      force: true\n    });\n    cy.get(appPage.confirmButton).closest(\"div\").click({\n      force: true\n    });\n    cy.get(appPage.closeButton).closest(\"div\").click({\n      force: true\n    });\n    cy.xpath(appPage.pagebutton).click({\n      force: true\n    }); //cy.xpath(appPage.datasourcesbutton).click({ force: true });\n\n    cy.xpath(appPage.postApi).click({\n      force: true\n    });\n    cy.ResponseCheck(\"Test\"); // cy.ResponseCheck(\"Task completed\");\n\n    cy.ResponseCheck(\"Curt50@gmail.com\");\n  });","file":"integration/Smoke_TestSuite/Application/EchoApiCMS_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Delete proposal and verify delete request body","suites":["Content Management System App"],"updatePoint":{"line":104,"column":55,"index":4305},"line":104,"code":"  it(\"5. Delete proposal and verify delete request body\", function () {\n    // navigating back to canvas\n    cy.xpath(appPage.pagebutton).click({\n      force: true\n    });\n    cy.get(appPage.submitButton).closest(\"div\").should(\"be.visible\");\n    cy.xpath(\"//span[text()='Dan.Wyman@hotmail.com']\").click({\n      force: true\n    }); // deleting the proposal and asserting delete call's response\n\n    cy.xpath(appPage.deleteButton).click({\n      force: true\n    });\n    cy.xpath(appPage.deleteTaskText).should(\"be.visible\");\n    cy.get(appPage.confirmButton).closest(\"div\").click({\n      force: true\n    });\n    cy.xpath(appPage.pagebutton).click({\n      force: true\n    }); //cy.xpath(appPage.datasourcesbutton).click({ force: true });\n\n    cy.xpath(appPage.deleteApi).click({\n      force: true\n    });\n    cy.ResponseCheck(\"Dan.Wyman@hotmail.com\");\n    cy.ResponseCheck(\"Recusan\");\n  });","file":"integration/Smoke_TestSuite/Application/EchoApiCMS_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Import application from json and validate data on pageload","suites":["Import, Export and Fork application and validate data binding"],"updatePoint":{"line":10,"column":64,"index":363},"line":10,"code":"  it(\"Import application from json and validate data on pageload\", function () {\n    // import application\n    cy.get(homePage.homeIcon).click();\n    cy.get(homePage.optionsIcon).first().click();\n    cy.get(homePage.workspaceImportAppOption).click({\n      force: true\n    });\n    cy.get(homePage.workspaceImportAppModal).should(\"be.visible\");\n    cy.xpath(homePage.uploadLogo).attachFile(\"forkedApp.json\");\n    cy.get(homePage.importAppProgressWrapper).should(\"be.visible\");\n    cy.wait(\"@importNewApplication\").then(interception => {\n      cy.wait(100); // should check reconnect modal openning\n\n      const {\n        isPartialImport\n      } = interception.response.body.data;\n\n      if (isPartialImport) {\n        // should reconnect button\n        cy.get(reconnectDatasourceModal.Modal).should(\"be.visible\");\n        cy.get(reconnectDatasourceModal.SkipToAppBtn).click({\n          force: true\n        });\n        cy.wait(2000);\n      } else {\n        cy.get(homePage.toastMessage).should(\"contain\", \"Application imported successfully\");\n      }\n\n      const uuid = () => Cypress._.random(0, 1e4);\n\n      const name = uuid();\n      appName = `app${name}`;\n      cy.get(homePage.applicationName).click({\n        force: true\n      });\n      cy.get(`${homePage.applicationEditMenu} li:first-child a`).click({\n        force: true\n      });\n      cy.wait(2000);\n      cy.get(homePage.applicationName).clear().type(appName);\n      cy.get(\"body\").click(0, 0);\n      cy.wait(\"@updateApplication\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n      cy.wait(2000);\n      cy.wrap(appName).as(\"appname\");\n      cy.wait(3000); // validating data binding for the imported application\n\n      cy.xpath(\"//input[@value='Submit']\").should(\"be.visible\");\n      cy.xpath(\"//span[text()='schema_name']\").should(\"be.visible\");\n      cy.xpath(\"//span[text()='id']\").should(\"be.visible\");\n      cy.xpath(\"//span[text()='title']\").should(\"be.visible\");\n      cy.xpath(\"//span[text()='due']\").should(\"be.visible\");\n    });\n  });","file":"integration/Smoke_TestSuite/Application/ImportExportForkApplication_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Fork application and validate data binding for the widgets","suites":["Import, Export and Fork application and validate data binding"],"updatePoint":{"line":63,"column":64,"index":2397},"line":63,"code":"  it(\"Fork application and validate data binding for the widgets\", function () {\n    // fork application\n    cy.get(homePage.homeIcon).click();\n    cy.get(homePage.searchInput).type(`${appName}`);\n    cy.wait(3000);\n    cy.get(homePage.applicationCard).first().trigger(\"mouseover\");\n    cy.get(homePage.appMoreIcon).first().click({\n      force: true\n    });\n    cy.get(homePage.forkAppFromMenu).click({\n      force: true\n    });\n    cy.get(homePage.forkAppWorkspaceButton).click({\n      force: true\n    });\n    cy.wait(4000); // validating data binding for the forked application\n\n    cy.xpath(\"//input[@value='Submit']\").should(\"be.visible\");\n    cy.xpath(\"//span[text()='schema_name']\").should(\"be.visible\");\n    cy.xpath(\"//span[text()='id']\").should(\"be.visible\");\n    cy.xpath(\"//span[text()='title']\").should(\"be.visible\");\n    cy.xpath(\"//span[text()='due']\").should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/Application/ImportExportForkApplication_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Export and import application and validate data binding for the widgets","suites":["Import, Export and Fork application and validate data binding"],"updatePoint":{"line":86,"column":77,"index":3305},"line":86,"code":"  it(\"Export and import application and validate data binding for the widgets\", function () {\n    cy.NavigateToHome();\n    cy.get(homePage.searchInput).clear().type(`${appName}`);\n    cy.wait(2000);\n    cy.get(homePage.applicationCard).first().trigger(\"mouseover\");\n    cy.get(homePage.appMoreIcon).first().click({\n      force: true\n    }); // export application\n\n    cy.get(homePage.exportAppFromMenu).click({\n      force: true\n    });\n    cy.get(homePage.searchInput).clear();\n    cy.get(`a[id=t--export-app-link]`).then(anchor => {\n      const url = anchor.prop(\"href\");\n      cy.request(url).then(({\n        body,\n        headers\n      }) => {\n        expect(headers).to.have.property(\"content-type\", \"application/json\");\n        expect(headers).to.have.property(\"content-disposition\", `attachment; filename*=UTF-8''${appName}.json`);\n        cy.writeFile(\"cypress/fixtures/exportedApp.json\", body, \"utf-8\");\n        cy.generateUUID().then(uid => {\n          workspaceId = uid;\n          localStorage.setItem(\"WorkspaceName\", workspaceId);\n          cy.createWorkspace();\n          cy.wait(\"@createWorkspace\").then(createWorkspaceInterception => {\n            newWorkspaceName = createWorkspaceInterception.response.body.data.name;\n            cy.renameWorkspace(newWorkspaceName, workspaceId);\n            cy.get(homePage.workspaceImportAppOption).click({\n              force: true\n            });\n            cy.get(homePage.workspaceImportAppModal).should(\"be.visible\"); // cy.get(\".t--import-json-card input\").attachFile(\"exportedApp.json\");\n\n            cy.xpath(homePage.uploadLogo).attachFile(\"exportedApp.json\"); // import exported application in new workspace\n            // cy.get(homePage.workspaceImportAppButton).click({ force: true });\n\n            cy.wait(\"@importNewApplication\").then(interception => {\n              const {\n                isPartialImport\n              } = interception.response.body.data;\n\n              if (isPartialImport) {\n                // should reconnect button\n                cy.get(reconnectDatasourceModal.Modal).should(\"be.visible\");\n                cy.get(reconnectDatasourceModal.SkipToAppBtn).click({\n                  force: true\n                });\n                cy.wait(2000);\n              } else {\n                cy.get(homePage.toastMessage).should(\"contain\", \"Application imported successfully\");\n              }\n\n              const importedApp = interception.response.body.data.application;\n              const appSlug = importedApp.slug;\n              cy.wait(\"@getPagesForCreateApp\").then(interception => {\n                const pages = interception.response.body.data.pages;\n                let defaultPage = pages.find(eachPage => !!eachPage.isDefault); // validating data binding for imported application\n\n                cy.xpath(\"//input[@value='Submit']\").should(\"be.visible\");\n                cy.xpath(\"//span[text()='schema_name']\").should(\"be.visible\"); // cy.xpath(\"//span[text()='information_schema']\").should(\n                //   \"be.visible\",\n                // );\n\n                cy.xpath(\"//span[text()='id']\").should(\"be.visible\");\n                cy.xpath(\"//span[text()='title']\").should(\"be.visible\");\n                cy.xpath(\"//span[text()='due']\").should(\"be.visible\");\n                cy.url().should(\"include\", `/${appSlug}/${defaultPage.slug}-${defaultPage.id}/edit`);\n              });\n            });\n          });\n        });\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/Application/ImportExportForkApplication_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create MongoDB datasource and add Insert, Find, Update and Delete queries","suites":["Shopping cart App"],"updatePoint":{"line":20,"column":82,"index":608},"line":20,"code":"  it(\"1. Create MongoDB datasource and add Insert, Find, Update and Delete queries\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.MongoDB).click();\n    cy.fillMongoDatasourceForm();\n    cy.testSaveDatasource();\n    cy.get(\"@createDatasource\").then(httpResponse => {\n      datasourceName = httpResponse.response.body.data.name;\n    });\n    cy.NavigateToQueryEditor();\n    cy.NavigateToActiveTab(); // GetProduct query to fetch all products\n\n    cy.get(queryLocators.createQuery).last().click();\n    cy.get(queryLocators.queryNameField).type(\"GetProduct\");\n    cy.get(\".CodeEditorTarget\").first().type(\"Productnames\");\n    cy.assertPageSave();\n    cy.get(appPage.dropdownChevronLeft).click(); // EditProducts query to update the cart\n\n    cy.get(queryLocators.createQuery).last().click();\n    cy.get(queryLocators.queryNameField).type(\"EditProducts\"); // Clicking outside to trigger the save\n\n    cy.get(\"body\").click(0, 0);\n    cy.TargetDropdownAndSelectOption(formControls.commandDropdown, \"Update Document(s)\");\n    cy.get(\".CodeEditorTarget\").first().type(\"Productnames\");\n    cy.get(\".CodeEditorTarget\").eq(1).type('{\"title\": \"{{Table1.selectedRow.title}}\"}', {\n      parseSpecialCharSequences: false\n    });\n    cy.get(\".CodeEditorTarget\").eq(2).type(`{\"title\" : \"{{title.text}}\",\n      \"description\" :\"{{description.text}}\",\n      \"price\" : {{price.text}},\n      \"quantity\":{{quantity.text}}`, {\n      parseSpecialCharSequences: false\n    });\n    cy.assertPageSave();\n    cy.get(appPage.dropdownChevronLeft).click(); // Add product query\n\n    cy.get(queryLocators.createQuery).last().click();\n    cy.wait(5000);\n    cy.get(queryLocators.queryNameField).type(\"AddProduct\"); // Clicking outside to trigger the save\n\n    cy.get(\"body\").click(0, 0);\n    cy.TargetDropdownAndSelectOption(formControls.commandDropdown, \"Insert Document(s)\"); // cy.get(\"[data-cy='actionConfiguration.formData.command.data']\").click();\n    // cy.get(\".t--dropdown-option\")\n    //   .eq(1)\n    //   .click();\n\n    cy.get(\".CodeEditorTarget\").first().type(\"Productnames\", {\n      parseSpecialCharSequences: false\n    });\n    cy.get(\".CodeEditorTarget\").eq(1).type(`[{\"title\" : \"{{Title.text}}\",\n        \"description\": \"{{Description.text}}\",\n        \"price\" : {{Price.text}},\n        \"quantity\" : {{Quantity.text}}`, {\n      parseSpecialCharSequences: false\n    });\n    cy.assertPageSave();\n    cy.get(appPage.dropdownChevronLeft).click(); // delete product\n\n    cy.get(queryLocators.createQuery).last().click();\n    cy.wait(5000);\n    cy.get(queryLocators.queryNameField).type(\"DeleteProduct\"); // Clicking outside to trigger the save\n\n    cy.get(\"body\").click(0, 0);\n    cy.TargetDropdownAndSelectOption(formControls.commandDropdown, \"Delete Document(s)\"); // cy.get(\"[data-cy='actionConfiguration.formData.command.data']\").click();\n    // cy.get(\".t--dropdown-option\")\n    //   .eq(3)\n    //   .click();\n\n    cy.get(\".CodeEditorTarget\").first().type(\"Productnames\", {\n      parseSpecialCharSequences: false\n    });\n    cy.get(\".CodeEditorTarget\").eq(1).type('{\"title\":\"{{Table1.selectedRow.title}}\"}', {\n      parseSpecialCharSequences: false\n    });\n    cy.assertPageSave();\n    cy.get(appPage.dropdownChevronLeft).click();\n    cy.get(appPage.dropdownChevronLeft).click();\n  });","file":"integration/Smoke_TestSuite/Application/MongoDBShoppingCart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Perform CRUD operations and validate data","suites":["Shopping cart App"],"updatePoint":{"line":97,"column":50,"index":3866},"line":97,"code":"  it(\"2. Perform CRUD operations and validate data\", function () {\n    // Adding the books to the Add cart form\n    cy.xpath(appPage.bookname).type(\"Atomic habits\");\n    cy.xpath(appPage.bookgenre).type(\"Self help\");\n    cy.xpath(appPage.bookprice).type(200);\n    cy.xpath(appPage.bookquantity).type(2);\n    cy.get(\"span:contains('Submit')\").closest(\"div\").eq(1).click();\n    cy.assertPageSave();\n    cy.wait(8000);\n    cy.xpath(appPage.bookname).click().type(\"A man called ove\");\n    cy.xpath(appPage.bookgenre).click().type(\"Fiction\");\n    cy.xpath(appPage.bookprice).click().type(100);\n    cy.xpath(appPage.bookquantity).click().type(1);\n    cy.get(\"span:contains('Submit')\").closest(\"div\").eq(1).click();\n    cy.assertPageSave();\n    cy.wait(\"@postExecute\"); // Deleting the book from the cart\n\n    cy.get(\".tableWrap\").children().within(() => {\n      cy.get(\"span:contains('Delete')\").closest(\"div\").eq(1).click();\n      cy.wait(\"@postExecute\");\n      cy.wait(5000); // validating that the book is deleted\n\n      cy.get(\"span:contains('Delete')\").parent(\"button\").should(\"have.length\", 1);\n    }); // Updating the book quantity from edit cart\n\n    cy.xpath(appPage.editbookquantity).clear().type(\"3\");\n    cy.get(\"span:contains('Submit')\").closest(\"div\").eq(0).click();\n    cy.assertPageSave();\n    cy.wait(5000); // validating updated value in the cart\n\n    cy.get(\".selected-row\").children().eq(3).should(\"have.text\", \"3\");\n  });","file":"integration/Smoke_TestSuite/Application/MongoDBShoppingCart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Add dsl and authenticate datasource","suites":["PgAdmin Clone App"],"updatePoint":{"line":24,"column":41,"index":657},"line":24,"code":"  it(\"Add dsl and authenticate datasource\", function () {\n    // authenticating datasource\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.PostgreSQL).click();\n    cy.getPluginFormsAndCreateDatasource();\n    cy.fillPostgresDatasourceForm();\n    cy.testSaveDatasource();\n    cy.get(\"@createDatasource\").then(httpResponse => {\n      datasourceName = httpResponse.response.body.data.name;\n    });\n  });","file":"integration/Smoke_TestSuite/Application/PgAdmin_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Create queries","suites":["PgAdmin Clone App"],"updatePoint":{"line":35,"column":20,"index":1047},"line":35,"code":"  it(\"Create queries\", function () {\n    cy.NavigateToQueryEditor(); // clicking on new query to write a query\n\n    cy.contains(\".t--datasource-name\", datasourceName).find(queryLocators.createQuery).click();\n    cy.get(queryLocators.queryNameField).type(\"get_schema\"); // switching off Use Prepared Statement toggle\n\n    cy.get(queryLocators.switch).last().click({\n      force: true\n    });\n    cy.get(queryLocators.templateMenu).click();\n    cy.get(queryLocators.query).click({\n      force: true\n    }); // writing query to get the schema\n\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"SELECT schema_name FROM information_schema.schemata;\", {\n      force: true,\n      parseSpecialCharSequences: false\n    });\n    cy.WaitAutoSave();\n    cy.runQuery(); // clicking on chevron icon to go back to the datasources page\n\n    cy.get(appPage.dropdownChevronLeft).click(); // clicking on new query to write a query\n\n    cy.contains(\".t--datasource-name\", datasourceName).find(queryLocators.createQuery).click();\n    cy.get(queryLocators.queryNameField).type(\"get_tables\");\n    cy.get(queryLocators.templateMenu).click(); // writing query to get all the tables\n\n    cy.get(\".CodeMirror textarea\").first().focus().type('select * from pg_catalog.pg_tables where schemaname = {{schema_select.selectedOptionValue || \"public\"}} ;', {\n      force: true,\n      parseSpecialCharSequences: false\n    });\n    cy.WaitAutoSave();\n    cy.runQuery(); // clicking on chevron icon to go back to the datasources page\n\n    cy.get(appPage.dropdownChevronLeft).click(); // clicking on new query to write a query\n\n    cy.contains(\".t--datasource-name\", datasourceName).find(queryLocators.createQuery).click();\n    cy.get(queryLocators.queryNameField).type(\"get_columns\");\n    cy.get(queryLocators.templateMenu).click(); // creating query to get the columns of the table\n\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"SELECT column_name, data_type, table_name, ordinal_position, is_nullable FROM information_schema.COLUMNS\", {\n      force: true,\n      parseSpecialCharSequences: false\n    });\n    cy.WaitAutoSave();\n    cy.runQuery(); // clicking on chevron icon to go back to the datasources page\n\n    cy.get(appPage.dropdownChevronLeft).click(); // clicking on new query to write a query\n\n    cy.contains(\".t--datasource-name\", datasourceName).find(queryLocators.createQuery).click();\n    cy.get(queryLocators.queryNameField).type(\"create_table\"); // switching off Use Prepared Statement toggle\n\n    cy.get(queryLocators.switch).last().click({\n      force: true\n    });\n    cy.get(queryLocators.templateMenu).click(); // writing query to create new table\n\n    cy.get(\".CodeMirror textarea\").first().focus().type('CREATE TABLE {{schema_select.selectedOptionValue}}.{{nt_name.text.replaceAll(\" \",\"_\")}}({{appsmith.store.nt_col.map((c)=>c.name.replaceAll(\" \",\"_\") + \" \" + c.dtype + (c.nnull ? \" NOT NULL \" :  \"\") + (c.pkey ? \" PRIMARY KEY \" : \"\")).join(\" , \")}})', {\n      force: true,\n      parseSpecialCharSequences: false\n    });\n    cy.WaitAutoSave();\n    cy.runQuery(); // clicking on chevron icon to go back to the datasources page\n\n    cy.get(appPage.dropdownChevronLeft).click(); // clicking on new query to write a query\n\n    cy.contains(\".t--datasource-name\", datasourceName).find(queryLocators.createQuery).click();\n    cy.get(queryLocators.queryNameField).type(\"drop_table\");\n    cy.get(queryLocators.templateMenu).click(); // switching off Use Prepared Statement toggle\n\n    cy.get(queryLocators.switch).last().click({\n      force: true\n    }); // creating query to delete the table\n\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"DROP TABLE {{schema_select.selectedOptionValue}}.{{List1.selectedItem.tablename}};\", {\n      force: true,\n      parseSpecialCharSequences: false\n    });\n    cy.WaitAutoSave();\n    cy.runQuery(); // clicking on chevron icon to go back to the datasources page\n\n    cy.get(appPage.dropdownChevronLeft).click();\n  });","file":"integration/Smoke_TestSuite/Application/PgAdmin_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Add new table","suites":["PgAdmin Clone App"],"updatePoint":{"line":118,"column":19,"index":5004},"line":118,"code":"  it(\"Add new table\", function () {\n    const uuid = () => Cypress._.random(0, 1e6);\n\n    const id = uuid();\n    const Table = `table${id}`; // clicking on chevron to go back to the application page\n\n    cy.get(appPage.dropdownChevronLeft).click(); // adding new table\n\n    cy.xpath(appPage.addNewtable).click();\n    cy.xpath(appPage.addTablename).clear().type(Table); // adding column to the table\n\n    cy.xpath(appPage.addColumn).click();\n    cy.xpath(appPage.columnNamefield).should(\"be.visible\");\n    cy.xpath(appPage.datatypefield).should(\"be.visible\");\n    cy.xpath(appPage.addTablename).type(\"id\");\n    cy.get(appPage.dropdownChevronDown).last().click();\n    cy.xpath(appPage.selectDatatype).click(); // switching on the Primary Key toggle\n\n    cy.get(widgetsPage.switchWidgetInactive).first().click(); // switching on the Not Null toggle\n\n    cy.get(widgetsPage.switchWidgetInactive).last().click();\n    cy.xpath(appPage.submitButton).click();\n    cy.xpath(appPage.addColumn).should(\"be.visible\");\n    cy.xpath(appPage.submitButton).click({\n      force: true\n    });\n    cy.xpath(appPage.closeButton).click();\n  });","file":"integration/Smoke_TestSuite/Application/PgAdmin_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"View and Delete table","suites":["PgAdmin Clone App"],"updatePoint":{"line":146,"column":27,"index":6136},"line":146,"code":"  it(\"View and Delete table\", function () {\n    cy.xpath(appPage.addNewtable).should(\"be.visible\"); // viewing the table's columns by clicking on view button\n\n    cy.xpath(appPage.viewButton).first().click({\n      force: true\n    }); // deleting the table through modal\n\n    cy.xpath(appPage.deleteButton).last().click({\n      force: true\n    });\n    cy.xpath(appPage.confirmButton).click();\n    cy.xpath(appPage.closeButton).click();\n  });","file":"integration/Smoke_TestSuite/Application/PgAdmin_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Testing promises with resetWidget, storeValue action and API call","suites":["JSEditor tests"],"updatePoint":{"line":24,"column":71,"index":778},"line":24,"code":"  it(\"Testing promises with resetWidget, storeValue action and API call\", () => {\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"TC1api\");\n    cy.enterDatasourceAndPath(\"https://mock-api.appsmith.com/\", \"users\");\n    cy.SaveAndRunAPI();\n    jsEditor.CreateJSObject(`export default {\n        myFun1: async () => { //comment\n          await this.clearStore()\t\t//clear store value before running the case\n          return resetWidget('Switch1')\n            .then(() => {\n              resetWidget('Select1')\n              resetWidget('Table1')\n              return this.myFun2() \t\t//return a toast message\n                .then(() => {\n                  storeValue('selected', Select1.selectedOptionValue)\n                  showAlert(appsmith.store.selected) }) }) \t\t//return a second toast message\n            .catch(() =>  {\n              resetWidget('RadioGroup1')\n              showAlert(\"Couldn't execute all the success call steps, hence now in the fail part\") })\n        },\n        myFun2: () => {\n          return TC1api.run()\n            .then (() => {return showAlert(\"Success running API query\")})\n            .catch (() => {return showAlert(\"Couldn't run API query\")})\n        },\n        clearStore: async () => { //function to clear store values\n          Object.keys(appsmith.store).forEach((eachKey) => {\n            storeValue(eachKey, 'undefined')\t\n            //return showAlert(eachKey)\n           })\n        }\n      }`, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true\n    });\n    cy.CheckAndUnfoldEntityItem(\"PAGES\");\n    cy.get(`.t--entity-name:contains(\"Page1\")`).click();\n    cy.wait(2000); // verify text in the text widget\n\n    cy.get(\".t--draggable-textwidget span\").eq(2).invoke(\"text\").then(text => {\n      expect(text).to.equal(\"Step 4: Value is Green and will default to undefined\");\n    }); // toggle off the switch\n\n    cy.get(\".t--switch-widget-active .bp3-control-indicator\").click({\n      force: true\n    });\n    cy.get(homePage.toastMessage).should(\"contain\", \"Switch widget has changed\"); // select an option from select widget\n\n    cy.get(\".bp3-button.select-button\").click({\n      force: true\n    });\n    cy.get(\".menu-item-text\").eq(2).click({\n      force: true\n    });\n    cy.wait(2000); // verify text in the text widget\n\n    cy.get(\".t--draggable-textwidget span\").eq(2).invoke(\"text\").then(text => {\n      expect(text).to.equal(\"Step 4: Value is Red and will default to undefined\");\n    }); // move to page  2 on table widget\n\n    cy.get(commonlocators.tableNextPage).click();\n    cy.get(\".t--table-widget-page-input\").within(() => {\n      cy.get(\"input.bp3-input\").should(\"have.value\", \"2\");\n    });\n    cy.wait(3000); // hit audio play button and trigger actions\n\n    /* cy.openPropertyPane(\"audiowidget\");\n    cy.get(widgetsPage.autoPlay).click({ force: true });\n    cy.wait(\"@postExecute\").should(\n      \"have.nested.property\",\n      \"response.body.responseMeta.status\",\n      200,\n    );\n    cy.wait(1000)\n     // verify text is visible\n     cy.get(\".t--draggable-textwidget span\")\n     .eq(2)\n     .invoke(\"text\")\n     .then((text) => {\n       expect(text).to.equal(\"Step 4: Value is Green and will default to Green\");\n     });\n     cy.get(commonlocators.tableNextPage).click()\n     cy.get('.t--table-widget-page-input').within(()=>{\n       cy.get('input.bp3-input').should('have.value', '1')\n     })\n    cy.get(homePage.toastMessage).should(\n      \"contain\",\n      \"Success running API query\",\n      \"GREEN\",\n    ); */\n  });","file":"integration/Smoke_TestSuite/Application/PromisesApp_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Testing dynamic widgets display using consecutive storeValue calls","suites":["JSEditor tests"],"line":117,"code":"  it.skip(\"Testing dynamic widgets display using consecutive storeValue calls\", () => {","file":"integration/Smoke_TestSuite/Application/PromisesApp_spec.js","skipped":true,"dir":"app/client/cypress"},{"name":"Import application from json with one postgres and success modal","suites":["Reconnect Datasource Modal validation while importing application"],"updatePoint":{"line":10,"column":70,"index":373},"line":10,"code":"  it(\"Import application from json with one postgres and success modal\", function () {\n    cy.NavigateToHome(); // import application\n\n    cy.generateUUID().then(uid => {\n      workspaceId = uid;\n      localStorage.setItem(\"WorkspaceName\", workspaceId);\n      cy.createWorkspace();\n      cy.wait(\"@createWorkspace\").then(createWorkspaceInterception => {\n        newWorkspaceName = createWorkspaceInterception.response.body.data.name;\n        cy.renameWorkspace(newWorkspaceName, workspaceId);\n        cy.get(homePage.workspaceImportAppOption).click({\n          force: true\n        });\n        cy.get(homePage.workspaceImportAppModal).should(\"be.visible\");\n        cy.xpath(homePage.uploadLogo).attachFile(\"one_postgres.json\");\n        cy.wait(\"@importNewApplication\").then(interception => {\n          cy.wait(100); // should check reconnect modal openning\n\n          const {\n            isPartialImport\n          } = interception.response.body.data;\n\n          if (isPartialImport) {\n            // should reconnect modal\n            cy.get(reconnectDatasourceModal.Modal).should(\"be.visible\");\n            cy.get(\".t--ds-list .t--ds-list-title\").should(\"be.visible\");\n            cy.get(\".t--ds-list .t--ds-list-title\").should(\"have.text\", \"Untitled Datasource\"); // not configured yet\n\n            cy.get(\".t--ds-list .cs-icon\").invoke(\"attr\", \"name\").should(\"eq\", \"info\"); // check db type\n\n            cy.get(\".t--ds-list\").contains(\"PostgreSQL\"); // check the postgres form config with default value\n\n            cy.get(\"[data-cy='section-Connection']\").should(\"be.visible\");\n            cy.get(\"[data-cy='section-Authentication']\").should(\"be.visible\");\n            cy.get(\"[data-cy='section-SSL (optional)']\").should(\"be.visible\");\n            cy.get(\"[data-cy='datasourceConfiguration.connection.mode']\").should(\"contain\", \"Read / Write\");\n            cy.get(\"[data-cy='section-SSL (optional)']\").click({\n              force: true\n            }); // should expand ssl pan\n\n            cy.get(\"[data-cy='datasourceConfiguration.connection.ssl.authType']\").should(\"contain\", \"Default\");\n            cy.ReconnectDatasource(\"Untitled Datasource\");\n            cy.wait(1000);\n            cy.fillPostgresDatasourceForm();\n            cy.testSaveDatasource();\n            cy.wait(2000); // cy.get(reconnectDatasourceModal.SkipToAppBtn).click({\n            //   force: true,\n            // });\n            // cy.wait(2000);\n          } else {\n            cy.get(homePage.toastMessage).should(\"contain\", \"Application imported successfully\");\n          } // check datasource configured success modal\n\n\n          cy.get(\".t--import-app-success-modal\").should(\"be.visible\");\n          cy.get(\".t--import-app-success-modal\").should(\"contain\", \"All your datasources are configuered and ready to use.\");\n          cy.get(\".t--import-success-modal-got-it\").click({\n            force: true\n          });\n          cy.get(\".t--import-app-success-modal\").should(\"not.exist\");\n\n          const uuid = () => Cypress._.random(0, 1e4);\n\n          const name = uuid();\n          appName = `app${name}`;\n          cy.get(homePage.applicationName).click({\n            force: true\n          });\n          cy.get(`${homePage.applicationEditMenu} li:first-child a`).click({\n            force: true\n          });\n          cy.wait(2000);\n          cy.get(homePage.applicationName) // .clear()\n          .type(appName);\n        });\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/Application/ReconnectDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test_Add users api and execute api","suites":["Test Create Api and Bind to Button widget"],"updatePoint":{"line":13,"column":40,"index":438},"line":13,"code":"  it(\"Test_Add users api and execute api\", function () {\n    cy.createAndFillApi(this.data.userApi, \"/random\");\n    cy.RunAPI();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ActionExecution/Error_handling_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Call the api without error handling","suites":["Test Create Api and Bind to Button widget"],"updatePoint":{"line":17,"column":41,"index":574},"line":17,"code":"  it(\"Call the api without error handling\", () => {\n    cy.SearchEntityandOpen(\"Button1\");\n    cy.get(widgetsPage.toggleOnClick).invoke(\"attr\", \"class\").then(classes => {\n      if (classes.includes(\"is-active\")) {\n        cy.get(widgetsPage.toggleOnClick).click();\n      }\n    });\n    cy.get(widgetsPage.toggleOnClick).click();\n    cy.get(\".t--property-control-onclick\").then($el => {\n      cy.updateCodeInput($el, \"{{Api1.run()}}\");\n    });\n    cy.PublishtheApp();\n    cy.wait(3000);\n    cy.get(\"span:contains('Submit')\").closest(\"div\").click();\n    cy.wait(\"@postExecute\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(commonlocators.toastAction).should(\"have.length\", 1).should(\"contain.text\", \"failed to execute\");\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ActionExecution/Error_handling_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Call the api with error handling","suites":["Test Create Api and Bind to Button widget"],"updatePoint":{"line":37,"column":38,"index":1406},"line":37,"code":"  it(\"Call the api with error handling\", () => {\n    cy.SearchEntityandOpen(\"Button1\");\n    cy.get(\".t--property-control-onclick\").then($el => {\n      cy.updateCodeInput($el, \"{{Api1.run(() => {}, () => {})}}\");\n    });\n    cy.PublishtheApp();\n    cy.wait(3000);\n    cy.get(\"span:contains('Submit')\").closest(\"div\").click();\n    cy.wait(\"@postExecute\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(commonlocators.toastAction).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ActionExecution/Error_handling_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test_Add users api and execute api","suites":["Test Create Api and Bind to Button widget"],"updatePoint":{"line":13,"column":40,"index":438},"line":13,"code":"  it(\"Test_Add users api and execute api\", function () {\n    cy.createAndFillApi(this.data.userApi, \"/users\");\n    cy.RunAPI();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ActionExecution/setInterval_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"selects set interval function","suites":["Test Create Api and Bind to Button widget"],"updatePoint":{"line":17,"column":35,"index":567},"line":17,"code":"  it(\"selects set interval function\", () => {\n    cy.SearchEntityandOpen(\"Button1\");\n    cy.get(widgetsPage.buttonOnClick).last().click({\n      force: true\n    });\n    cy.get(commonlocators.chooseAction).children().contains(\"Set interval\").click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ActionExecution/setInterval_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Fill setInterval action creator and test code generated","suites":["Test Create Api and Bind to Button widget"],"updatePoint":{"line":24,"column":61,"index":848},"line":24,"code":"  it(\"Fill setInterval action creator and test code generated\", () => {\n    cy.get(widgetsPage.toggleOnClick).invoke(\"attr\", \"class\").then(classes => {\n      if (classes.includes(\"is-active\")) {\n        cy.get(widgetsPage.toggleOnClick).click();\n      }\n    });\n    cy.get(\"label\").contains(\"Callback function\").parent().then($el => {\n      cy.updateCodeInput($el, \"{{() => { Api1.run() }}}\");\n    });\n    cy.get(\"label\").contains(\"Id\").parent().then($el => {\n      cy.updateCodeInput($el, \"myInterval\");\n    });\n    cy.get(widgetsPage.toggleOnClick).click();\n    cy.get(\".t--property-control-onclick\").find(\".CodeMirror-code\").invoke(\"text\").should(\"equal\", \"{{setInterval(() => { Api1.run() }, 5000,'myInterval')}}\");\n    cy.get(widgetsPage.toggleOnClick).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ActionExecution/setInterval_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"works in the published version","suites":["Test Create Api and Bind to Button widget"],"updatePoint":{"line":40,"column":36,"index":1596},"line":40,"code":"  it(\"works in the published version\", () => {\n    cy.PublishtheApp();\n    cy.wait(3000);\n    cy.get(\"span:contains('Submit')\").closest(\"div\").click();\n    cy.wait(\"@postExecute\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.wait(3000);\n    cy.wait(\"@postExecute\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ActionExecution/setInterval_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"selects clear interval function","suites":["Test Create Api and Bind to Button widget"],"updatePoint":{"line":51,"column":37,"index":2049},"line":51,"code":"  it(\"selects clear interval function\", () => {\n    cy.SearchEntityandOpen(\"Button1\");\n    cy.get(widgetsPage.buttonOnClick).last().click({\n      force: true\n    });\n    cy.get(commonlocators.chooseAction).children().contains(\"Clear interval\").click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ActionExecution/setInterval_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Fill clearInterval action creator and test code generated","suites":["Test Create Api and Bind to Button widget"],"updatePoint":{"line":58,"column":63,"index":2334},"line":58,"code":"  it(\"Fill clearInterval action creator and test code generated\", () => {\n    cy.get(\"label\").contains(\"Id\").parent().then($el => {\n      cy.updateCodeInput($el, \"myInterval\");\n    });\n    cy.get(widgetsPage.toggleOnClick).click();\n    cy.get(\".t--property-control-onclick\").find(\".CodeMirror-code\").invoke(\"text\").should(\"equal\", \"{{clearInterval('myInterval')}}\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ActionExecution/setInterval_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"opens autocomplete for bindings","suites":["Dynamic input autocomplete"],"updatePoint":{"line":13,"column":37,"index":403},"line":13,"code":"  it(\"opens autocomplete for bindings\", () => {\n    cy.openPropertyPane(\"buttonwidget\");\n    cy.get(dynamicInputLocators.input).first().click({\n      force: true\n    }).type(\"{uparrow}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{ctrl}{shift}{downarrow}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{backspace}\", {\n      parseSpecialCharSequences: true\n    }).then(() => {\n      cy.get(dynamicInputLocators.input).first().click({\n        force: true\n      }).type(\"{{\", {\n        parseSpecialCharSequences: true\n      }); // Tests if autocomplete will open\n\n      cy.get(dynamicInputLocators.hints).should(\"exist\"); // Tests if data tree entities are sorted\n\n      cy.get(`${dynamicInputLocators.hints} li`).eq(1).should(\"have.text\", \"input.text\"); // Tests if \"No suggestions\" message will pop if you type any garbage\n\n      cy.get(dynamicInputLocators.input).first().click({\n        force: true\n      }).type(\"{uparrow}\", {\n        parseSpecialCharSequences: true\n      }).type(\"{ctrl}{shift}{downarrow}\", {\n        parseSpecialCharSequences: true\n      }).type(\"{{ garbage\", {\n        parseSpecialCharSequences: true\n      }).then(() => {\n        cy.get(\".CodeMirror-Tern-tooltip\").should(\"have.text\", \"No suggestions\");\n      });\n    });\n    cy.evaluateErrorMessage(\"ReferenceError: garbage is not defined\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/autocomplete_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"opens current value popup","suites":["Dynamic input autocomplete"],"updatePoint":{"line":48,"column":31,"index":1737},"line":48,"code":"  it(\"opens current value popup\", () => {\n    // Test on api pane\n    cy.NavigateToAPI_Panel();\n    cy.get(apiwidget.createapi).click({\n      force: true\n    });\n    cy.wait(\"@createNewApi\");\n    cy.get(apiwidget.headerValue).within(() => {\n      cy.get(\"textarea\").click({\n        force: true\n      });\n    });\n    cy.assertEvaluatedValuePopup(\"string\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/autocomplete_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test_Add users api and execute api","suites":["Test Create Api and Bind to List widget"],"updatePoint":{"line":13,"column":40,"index":415},"line":13,"code":"  it(\"Test_Add users api and execute api\", function () {\n    cy.createAndFillApi(this.data.userApi, \"/users\");\n    cy.RunAPI();\n    cy.get(apiPage.responseBody).contains(\"name\").siblings(\"span\").invoke(\"text\").then(text => {\n      valueToTest = `${text.match(/\"(.*)\"/)[0].split('\"').join(\"\")}`;\n      cy.log(valueToTest);\n      apiData = valueToTest;\n      cy.log(\"val1:\" + valueToTest);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_API_with_List_Widget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test_Validate the Api data is updated on List widget","suites":["Test Create Api and Bind to List widget"],"updatePoint":{"line":23,"column":58,"index":835},"line":23,"code":"  it(\"Test_Validate the Api data is updated on List widget\", function () {\n    cy.SearchEntityandOpen(\"List1\");\n    cy.testJsontext(\"items\", \"{{Api1.data.users}}\");\n    cy.get(\".t--draggable-textwidget span\").should(\"have.length\", 8);\n    cy.get(\".t--draggable-textwidget span\").first().invoke(\"text\").then(text => {\n      expect(text).to.equal(valueToTest);\n    });\n    cy.PublishtheApp();\n    cy.waitUntil(() => cy.get(\".t--widget-textwidget span\").should(\"be.visible\"), {\n      errorMsg: \"Pubish app page is not loaded evn after 20 secs\",\n      timeout: 20000,\n      interval: 1000\n    }).then(() => cy.wait(500));\n    cy.get(\".t--widget-textwidget span\").should(\"have.length\", 8);\n    cy.get(\".t--widget-textwidget span\").first().invoke(\"text\").then(text => {\n      expect(text).to.equal(valueToTest);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_API_with_List_Widget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test_Validate the list widget ","suites":["Test Create Api and Bind to List widget"],"updatePoint":{"line":41,"column":36,"index":1633},"line":41,"code":"  it(\"Test_Validate the list widget \", function () {\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n    cy.SearchEntityandOpen(\"List1\");\n    cy.testJsontext(\"itemspacing\\\\(px\\\\)\", \"50\");\n    cy.get(\".t--draggable-textwidget span\").should(\"have.length\", 6);\n    cy.get(\".t--draggable-textwidget span\").first().invoke(\"text\").then(text => {\n      expect(text).to.equal(valueToTest);\n    });\n    cy.PublishtheApp();\n    cy.waitUntil(() => cy.get(\".t--widget-textwidget span\").should(\"be.visible\"), {\n      errorMsg: \"Pubish app page is not loaded evn after 20 secs\",\n      timeout: 20000,\n      interval: 1000\n    }).then(() => cy.wait(500));\n    cy.get(\".t--widget-textwidget span\").should(\"have.length\", 6);\n    cy.get(\".t--widget-textwidget span\").first().invoke(\"text\").then(text => {\n      expect(text).to.equal(valueToTest);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_API_with_List_Widget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Add an API by binding a button in its header","suites":["Bind a button and Api usecase"],"updatePoint":{"line":18,"column":50,"index":586},"line":18,"code":"  it(\"Add an API by binding a button in its header\", function () {\n    cy.createAndFillApi(this.data.userApi, \"/users\");\n    cy.get(apiwidget.headerKey).first().click({\n      force: true\n    }).type(\"key\", {\n      parseSpecialCharSequences: true\n    });\n    cy.get(apiwidget.headerValue).first().click({\n      force: true\n    }).type(\"{{Button1.text\", {\n      parseSpecialCharSequences: true\n    });\n    cy.RunAPI();\n    cy.get(apiPage.responseBody).contains(\"name\").siblings(\"span\").invoke(\"text\").then(text => {\n      valueToTest = `${text.match(/\"(.*)\"/)[0].split('\"').join(\"\")}`;\n      cy.log(valueToTest);\n      apiData = valueToTest;\n      cy.log(\"val1:\" + valueToTest);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_Button_with_API_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Button-Name updation","suites":["Bind a button and Api usecase"],"updatePoint":{"line":38,"column":26,"index":1253},"line":38,"code":"  it(\"Button-Name updation\", function () {\n    cy.SearchEntityandOpen(\"Button1\"); //changing the Button Name\n\n    cy.widgetText(testdata.buttonName, widgetsPage.buttonWidget, widgetsPage.buttonWidget + \" \" + commonlocators.widgetNameTag);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_Button_with_API_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"API datasource binding with button name validation","suites":["Bind a button and Api usecase"],"updatePoint":{"line":43,"column":56,"index":1528},"line":43,"code":"  it(\"API datasource binding with button name validation\", function () {\n    cy.CheckAndUnfoldEntityItem(\"QUERIES/JS\");\n    cy.SearchEntityandOpen(\"Api1\");\n    cy.get(apiwidget.headerValue).first().invoke(\"text\").then(text => {\n      const someText = text;\n      expect(someText).to.contains(testdata.buttonName);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_Button_with_API_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Test_Add users api, execute it and go to sniping mode.","suites":["Test Create Api and Bind to Table widget V2"],"updatePoint":{"line":7,"column":63,"index":245},"line":7,"code":"  it(\"1. Test_Add users api, execute it and go to sniping mode.\", function () {\n    cy.createAndFillApi(this.data.userApi, \"/users\");\n    cy.RunAPI();\n    cy.get(\".t--select-in-canvas\").click();\n    cy.get(\".t--sniping-mode-banner\").should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_dataToTableV2WithSnipingMode_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Click on table name controller to bind the data and exit sniping mode","suites":["Test Create Api and Bind to Table widget V2"],"updatePoint":{"line":13,"column":78,"index":521},"line":13,"code":"  it(\"2. Click on table name controller to bind the data and exit sniping mode\", function () {\n    cy.get(\".t--draggable-tablewidgetv2\").trigger(\"mouseover\");\n    cy.get(\".t--settings-sniping-control\").click();\n    cy.get(\".t--property-control-tabledata .CodeMirror\").contains(\"{{Api1.data}}\");\n    cy.get(\".t--sniping-mode-banner\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_dataToTableV2WithSnipingMode_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test_Add users api, execute it and go to sniping mode.","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":7,"column":60,"index":237},"line":7,"code":"  it(\"Test_Add users api, execute it and go to sniping mode.\", function () {\n    cy.createAndFillApi(this.data.userApi, \"/users\");\n    cy.RunAPI();\n    cy.get(\".t--select-in-canvas\").click();\n    cy.get(\".t--sniping-mode-banner\").should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_dataToTableWithSnipingMode_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Click on table name controller to bind the data and exit sniping mode","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":13,"column":75,"index":510},"line":13,"code":"  it(\"Click on table name controller to bind the data and exit sniping mode\", function () {\n    cy.get(\".t--draggable-tablewidget\").trigger(\"mouseover\");\n    cy.get(\".t--settings-sniping-control\").click();\n    cy.get(\".t--property-control-tabledata .CodeMirror\").contains(\"{{Api1.data}}\");\n    cy.get(\".t--sniping-mode-banner\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_dataToTableWithSnipingMode_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"DatePicker-Text, Validate selectedDate functionality","suites":["Binding the Datepicker and Text Widget"],"updatePoint":{"line":17,"column":58,"index":547},"line":17,"code":"  it(\"DatePicker-Text, Validate selectedDate functionality\", function () {\n    /**\n     * Bind DatePicker1 to Text for \"selectedDate\"\n     */\n    cy.openPropertyPane(\"textwidget\");\n    cy.testJsontext(\"text\", \"{{DatePicker1.selectedDate}}\");\n    /**\n     * Set the Calender for today's date in DatePicker1\n     */\n\n    cy.openPropertyPane(\"datepickerwidget\");\n    cy.get(formWidgetsPage.defaultDate).click();\n    cy.ClearDateFooter();\n    cy.SetDateToToday();\n    cy.getDate(1, \"YYYY-MM-DD\").then(date => {\n      cy.log(\"retured date\" + date);\n      nextDay = date;\n      cy.wait(\"@updateLayout\");\n      cy.wait(\"@updateLayout\");\n      cy.PublishtheApp();\n      /**\n       * Change the date in DatePicker1 in Publish mode and validate the same in Text Widget\n       */\n\n      cy.get(publishPage.datepickerWidget + commonlocators.inputField).eq(0).click();\n      cy.ClearDateFooter();\n      cy.setDate(1, \"ddd MMM DD YYYY\");\n      cy.get(commonlocators.labelTextStyle).should(\"contain\", nextDay);\n    });\n    cy.get(commonlocators.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_DatePicker_Text_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"DatePicker1-text: Change the date in DatePicker1 and Validate the same in text widget","suites":["Binding the Datepicker and Text Widget"],"updatePoint":{"line":48,"column":91,"index":1639},"line":48,"code":"  it(\"DatePicker1-text: Change the date in DatePicker1 and Validate the same in text widget\", function () {\n    cy.openPropertyPane(\"textwidget\");\n    /**\n     * Bind the datepicker1 to text widget\n     */\n\n    cy.testJsontext(\"text\", \"{{DatePicker1.defaultDate}}\");\n    /**\n     * Fetching the date on DatePicker2\n     */\n\n    cy.get(formWidgetsPage.datepickerWidget + \" .bp3-input\").eq(1).invoke(\"val\").then(val => {\n      dateDp2 = val;\n      cy.log(dateDp2);\n    });\n    /**\n     * Changing date on datepicker1 to current date +1\n     */\n\n    cy.openPropertyPane(\"datepickerwidget\");\n    cy.get(formWidgetsPage.defaultDate).click();\n    cy.ClearDateFooter();\n    cy.setDate(1, \"ddd MMM DD YYYY\");\n    cy.get(commonlocators.onDateSelectedField).click();\n    /**\n     *Validate the date in text widget\n     */\n\n    cy.getDate(1, \"YYYY-MM-DD\").then(date => {\n      cy.log(\"retured date\" + date);\n      nextDay = date;\n      cy.get(commonlocators.labelTextStyle).should(\"contain\", nextDay);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_DatePicker_Text_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate the Date is not changed in DatePicker2","suites":["Binding the Datepicker and Text Widget"],"updatePoint":{"line":82,"column":53,"index":2606},"line":82,"code":"  it(\"Validate the Date is not changed in DatePicker2\", function () {\n    cy.log(\"dateDp2:\" + dateDp2);\n    cy.get(formWidgetsPage.datepickerWidget + commonlocators.inputField).eq(1).should(\"have.value\", dateDp2);\n    cy.PublishtheApp();\n    cy.get(commonlocators.labelTextStyle).should(\"contain\", nextDay);\n    cy.get(publishPage.datepickerWidget + commonlocators.inputField).eq(1).should(\"have.value\", dateDp2);\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_DatePicker_Text_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"DatePicker-Text, Validate Multiple Binding","suites":["Binding the Datepicker and Text Widget"],"updatePoint":{"line":92,"column":48,"index":3092},"line":92,"code":"  it(\"DatePicker-Text, Validate Multiple Binding\", function () {\n    /**\n     * Bind the DatePicker1 and DatePicker2 along with hard coded text to Text widget\n     */\n    cy.openPropertyPane(\"textwidget\");\n    cy.testJsontext(\"text\", \"{{DatePicker1.isDisabled}} DatePicker {{DatePicker2.isDisabled}}\");\n    cy.get(commonlocators.labelTextStyle).should(\"contain.text\", \"DatePicker\");\n    cy.PublishtheApp();\n    cy.get(commonlocators.labelTextStyle).should(\"contain.text\", \"DatePicker\");\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_DatePicker_Text_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checks if on deselection of date triggers the onDateSelected action or not.","suites":["Binding the Datepicker and Text Widget"],"updatePoint":{"line":105,"column":81,"index":3689},"line":105,"code":"  it(\"Checks if on deselection of date triggers the onDateSelected action or not.\", function () {\n    /**\n     * bind datepicker to show a message \"Hello\" on date selected\n     */\n    cy.openPropertyPane(\"datepickerwidget\");\n    cy.get(commonlocators.onDateSelectedField).click();\n    cy.get(commonlocators.singleSelectMenuItem).contains(\"Show message\").click({\n      force: true\n    });\n    cy.getAlert(commonlocators.optionchangetextDatePicker);\n    /**\n     * checking if on selecting the date triggers the message\n     */\n\n    cy.get(formWidgetsPage.datepickerWidget).first().click();\n    cy.ClearDateFooter();\n    cy.SetDateToToday();\n    cy.get(commonlocators.toastmsg).contains(\"hello\");\n    /**\n     * checking if on deselecting the date triggers the message or not.\n     * It should not trigger any message on deselection\n     */\n\n    cy.get(formWidgetsPage.datepickerWidget).first().click();\n    cy.get(formWidgetsPage.datepickerFooter).contains(\"Clear\").click();\n    cy.get(commonlocators.toastmsg).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_DatePicker_Text_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Input widget test with default value from table widget","suites":["Binding the Table and input Widget"],"updatePoint":{"line":11,"column":63,"index":376},"line":11,"code":"  it(\"1. Input widget test with default value from table widget\", function () {\n    cy.SearchEntityandOpen(\"Input1\");\n    cy.testJsontext(\"defaulttext\", testdata.defaultInputWidget + \"}}\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_InputWidget_Table_Sorting_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Validation of data displayed in input widgets based on sorting","suites":["Binding the Table and input Widget"],"updatePoint":{"line":16,"column":71,"index":683},"line":16,"code":"  it(\"2. Validation of data displayed in input widgets based on sorting\", function () {\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.testJsontext(\"defaultselectedrow\", \"0\");\n    cy.get(\".draggable-header\").contains(\"id\").click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.readTabledataPublish(\"0\", \"0\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"6788734\");\n      cy.log(\"the value is\" + tabValue);\n      cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", tabValue);\n    });\n    cy.get(\".draggable-header\").contains(\"id\").click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.readTabledataPublish(\"0\", \"0\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"2381224\");\n      cy.log(\"the value is\" + tabValue);\n      cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", tabValue);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_InputWidget_Table_Sorting_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Validation of column id displayed in input widgets based on sorted column","suites":["Binding the Table and input Widget"],"updatePoint":{"line":40,"column":82,"index":1664},"line":40,"code":"  it(\"3. Validation of column id displayed in input widgets based on sorted column\", function () {\n    cy.SearchEntityandOpen(\"Input1\");\n    cy.testJsontext(\"defaulttext\", testdata.sortedColumn + \"}}\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", \"id\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_InputWidget_Table_Sorting_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Input widget test with default value from table widget","suites":["Binding the Table and input Widget"],"updatePoint":{"line":11,"column":63,"index":378},"line":11,"code":"  it(\"1. Input widget test with default value from table widget\", function () {\n    cy.SearchEntityandOpen(\"Input1\");\n    cy.testJsontext(\"defaulttext\", testdata.defaultInputWidget + \"}}\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_InputWidget_TableV2_Sorting_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. validation of data displayed in input widgets based on sorting","suites":["Binding the Table and input Widget"],"updatePoint":{"line":16,"column":71,"index":685},"line":16,"code":"  it(\"2. validation of data displayed in input widgets based on sorting\", function () {\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.testJsontext(\"defaultselectedrow\", \"0\");\n    cy.get(\".draggable-header\").contains(\"id\").click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.readTableV2dataPublish(\"0\", \"0\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"6788734\");\n      cy.log(\"the value is\" + tabValue);\n      cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", tabValue);\n    });\n    cy.get(\".draggable-header\").contains(\"id\").click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.readTableV2dataPublish(\"0\", \"0\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"2381224\");\n      cy.log(\"the value is\" + tabValue);\n      cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", tabValue);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_InputWidget_TableV2_Sorting_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. validation of column id displayed in input widgets based on sorted column","suites":["Binding the Table and input Widget"],"updatePoint":{"line":40,"column":82,"index":1670},"line":40,"code":"  it(\"3. validation of column id displayed in input widgets based on sorted column\", function () {\n    cy.SearchEntityandOpen(\"Input1\");\n    cy.testJsontext(\"defaulttext\", testdata.sortedColumn + \"}}\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", \"id\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_InputWidget_TableV2_Sorting_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create a query and populate response by choosing addWidget and validate in Table Widget & Bug 7413","suites":["Addwidget from Query and bind with other widgets"],"updatePoint":{"line":17,"column":107,"index":614},"line":17,"code":"  it(\"1. Create a query and populate response by choosing addWidget and validate in Table Widget & Bug 7413\", () => {\n    cy.addDsl(dsl);\n    cy.createPostgresDatasource();\n    cy.get(\"@createDatasource\").then(httpResponse => {\n      datasourceName = httpResponse.response.body.data.name;\n      cy.NavigateToActiveDSQueryPane(datasourceName);\n      cy.get(queryLocators.templateMenu).click();\n      cy.get(\".CodeMirror textarea\").first().focus().type(\"SELECT * FROM configs LIMIT 10;\"); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n      cy.wait(500); // Mock the response for this test\n\n      cy.intercept(\"/api/v1/actions/execute\", {\n        fixture: \"addWidgetTable-mock\"\n      });\n      cy.onlyQueryRun();\n      cy.get(queryEditor.suggestedTableWidget).click();\n      cy.createJSObject(\"return Query1.data;\");\n      cy.CheckAndUnfoldEntityItem(\"WIDGETS\");\n      cy.get(\".t--entity-name\").contains(\"Table1\").click({\n        force: true\n      });\n      cy.testJsontext(\"tabledata\", \"{{JSObject1.myFun1()}}\");\n      cy.isSelectRow(1);\n      cy.readTableV2dataPublish(\"1\", \"0\").then(tabData => {\n        let tabValue = tabData;\n        cy.log(\"the value is\" + tabValue);\n        expect(tabValue).to.be.equal(\"5\");\n      });\n      cy.get(homePage.shareApp).click();\n      cy.enablePublicAccess();\n      cy.wait(3000);\n      cy.PublishtheApp();\n      cy.wait(3000);\n      cy.url().then(url => {\n        currentUrl = url;\n        cy.log(\"Published url is: \" + currentUrl);\n        cy.get(publish.backToEditor).first().click();\n        cy.wait(2000);\n        cy.visit(currentUrl);\n        cy.wait(\"@getPagesForViewApp\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n        cy.wait(3000);\n        cy.waitUntil(() => cy.get('.tbody .td[data-rowindex=\"' + 1 + '\"][data-colindex=\"' + 0 + '\"]', {\n          timeout: 40000\n        }).eq(0).should(\"be.visible\"), {\n          errorMsg: \"Table not visible in Public view page\",\n          timeout: 20000,\n          interval: 1000\n        }).then(() => cy.wait(500));\n        cy.isSelectRow(1);\n        cy.readTableV2dataPublish(\"1\", \"0\").then(tabData => {\n          let tabValue = tabData;\n          cy.log(\"Value in public viewing: \" + tabValue);\n          expect(tabValue).to.be.equal(\"5\");\n          cy.log(\"Verified that JSObject is visible for Public viewing\");\n        }); // cy.tablefirstdataRow().then((tabValue) => {\n        //   expect(tabValue).to.be.equal(\"5\");\n        //   //expect(tabValue).to.have.lengthOf(0); // verification while JS Object was still Beta!\n        //   //cy.log(\"Verified that JSObject is not visible for Public viewing\");\n        // });\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_JSObject_Postgress_Table_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. DragDrop Widget ","suites":[" widget test for validating reset action"],"updatePoint":{"line":26,"column":51,"index":986},"line":26,"code":"    it(`1. DragDrop Widget ${testConfig.widgetName}`, function () {\n      cy.get(explorer.addWidget).click();\n      cy.dragAndDropToCanvas(widgetSelector, {\n        x: 300,\n        y: 200\n      });\n      cy.get(getWidgetSelector(widgetSelector)).should(\"exist\");\n    });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_MultiSelect_Button_Text_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Bind Button on click  and Text widget content","suites":[" widget test for validating reset action"],"updatePoint":{"line":34,"column":56,"index":1262},"line":34,"code":"    it(\"2. Bind Button on click  and Text widget content\", function () {\n      cy.openPropertyPane(WIDGET.BUTTON_WIDGET);\n      cy.get(PROPERTY_SELECTOR.onClick).find(\".t--js-toggle\").click();\n      cy.updateCodeInput(PROPERTY_SELECTOR.onClick, `{{resetWidget(\"${testConfig.widgetPrefixName}\",true).then(() => showAlert(\"success\"))}}`); // Bind to stored value above\n\n      cy.openPropertyPane(WIDGET.TEXT);\n      cy.updateCodeInput(PROPERTY_SELECTOR.text, testConfig.textBindingValue);\n      cy.closePropertyPane();\n      cy.get(\".rc-select-selector\").click({\n        force: true\n      });\n      cy.wait(1000);\n      cy.get('.rc-select-item-option:contains(\"Blue\")').click({\n        force: true\n      });\n      cy.wait(1000);\n      cy.get(\".t--text-widget-container\").each((item, index, list) => {\n        cy.wrap(item).should(\"contain.text\", \"BLUE\");\n      });\n      const inputs = testConfig.testCases;\n      cy.get(getWidgetSelector(WIDGET.BUTTON_WIDGET)).scrollIntoView().click({\n        force: true\n      });\n      cy.wait(\"@updateLayout\");\n      cy.get(\".t--widget-buttonwidget:contains('Submit')\").scrollIntoView().click({\n        force: true\n      });\n      cy.wait(4000);\n    });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_MultiSelect_Button_Text_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Publish the app and validate reset action","suites":[" widget test for validating reset action"],"updatePoint":{"line":63,"column":52,"index":2448},"line":63,"code":"    it(\"3. Publish the app and validate reset action\", function () {\n      cy.PublishtheApp();\n      cy.get(\".rc-select-selection-overflow\").click({\n        force: true\n      });\n      cy.get(\".rc-select-item-option:contains('Blue')\").click({\n        force: true\n      });\n      cy.wait(1000);\n      cy.get(\"button:contains('Submit')\").click({\n        force: true\n      });\n      cy.wait(1000);\n      cy.get(\".t--text-widget-container\").each((item, index, list) => {\n        cy.wrap(item).should(\"not.contain.text\", \"BLUE\");\n      });\n      cy.get(\".t--toast-action span\").contains(\"success\");\n    });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_MultiSelect_Button_Text_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Create an API and Execute the API and bind with Table","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":13,"column":59,"index":453},"line":13,"code":"  it(\"Create an API and Execute the API and bind with Table\", function () {\n    cy.createAndFillApi(this.data.paginationUrl, this.data.paginationParam);\n    cy.RunAPI();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_Table_Widget_API_Derived_Column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate Table with API data and then add a column","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":17,"column":56,"index":626},"line":17,"code":"  it(\"Validate Table with API data and then add a column\", function () {\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.testJsontext(\"tabledata\", \"{{Api1.data.users}}\");\n    cy.CheckWidgetProperties(commonlocators.serverSidePaginationCheckbox);\n    cy.SearchEntityandOpen(\"Text1\");\n    cy.testJsontext(\"text\", \"{{Table1.selectedRow.url}}\");\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.readTabledata(\"0\", \"0\").then(tabData => {\n      const tableData = tabData;\n      localStorage.setItem(\"tableDataPage1\", tableData);\n    });\n    cy.ValidateTableData(\"1\");\n    cy.addColumn(\"CustomColumn\");\n    cy.editColumn(\"customColumn1\");\n    cy.editColName(\"UpdatedColName\");\n    cy.readTabledataPublish(\"0\", \"5\").then(tabData => {\n      const tabValue = tabData;\n      cy.updateComputedValue(testdata.currentRowEmail);\n      cy.readTabledataPublish(\"0\", \"9\").then(tabData => {\n        expect(tabData).to.be.equal(tabValue);\n        cy.log(\"computed value of plain text \" + tabData);\n      });\n    });\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_Table_Widget_API_Derived_Column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check Image alignment is working as expected","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":42,"column":50,"index":1643},"line":42,"code":"  it(\"Check Image alignment is working as expected\", function () {\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.editColumn(\"avatar\");\n    cy.changeColumnType(\"Image\");\n    cy.closePropertyPane();\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.get(widgetsPage.centerAlign).first().click({\n      force: true\n    });\n    cy.closePropertyPane();\n    cy.get(`.t--widget-tablewidget .tbody .image-cell`).first().should(\"have.css\", \"background-position\", \"50% 50%\");\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.get(widgetsPage.rightAlign).first().click({\n      force: true\n    });\n    cy.closePropertyPane();\n    cy.get(`.t--widget-tablewidget .tbody .image-cell`).first().should(\"have.css\", \"background-position\", \"100% 50%\");\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.get(widgetsPage.leftAlign).first().click({\n      force: true\n    });\n    cy.closePropertyPane();\n    cy.get(`.t--widget-tablewidget .tbody .image-cell`).first().should(\"have.css\", \"background-position\", \"0% 50%\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_Table_Widget_API_Derived_Column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Update table json data and check the derived column values after update","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":66,"column":77,"index":2655},"line":66,"code":"  it(\"Update table json data and check the derived column values after update\", function () {\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.tableColumnDataValidation(\"id\");\n    cy.tableColumnDataValidation(\"name\");\n    cy.tableColumnDataValidation(\"status\");\n    cy.tableColumnDataValidation(\"gender\");\n    cy.tableColumnDataValidation(\"avatar\");\n    cy.tableColumnDataValidation(\"email\");\n    cy.tableColumnDataValidation(\"address\");\n    cy.tableColumnDataValidation(\"createdAt\");\n    cy.tableColumnDataValidation(\"updatedAt\");\n    cy.tableColumnDataValidation(\"customColumn1\");\n    cy.testJsontext(\"tabledata\", JSON.stringify(this.data.TableInputUpdate));\n    cy.wait(\"@updateLayout\");\n    cy.tableColumnDataValidation(\"id\");\n    cy.tableColumnDataValidation(\"email\");\n    cy.tableColumnDataValidation(\"userName\");\n    cy.tableColumnDataValidation(\"productName\");\n    cy.tableColumnDataValidation(\"orderAmount\");\n    cy.tableColumnDataValidation(\"customColumn1\");\n    cy.hideColumn(\"email\");\n    cy.hideColumn(\"userName\");\n    cy.hideColumn(\"productName\");\n    cy.hideColumn(\"orderAmount\");\n    cy.get(\".draggable-header:contains('UpdatedColName')\").should(\"be.visible\");\n    cy.readTabledataPublish(\"1\", \"2\").then(tabData => {\n      const tabValue = tabData;\n      cy.readTabledataPublish(\"1\", \"2\").then(tabData => {\n        cy.log(\"computed value of plain text \" + tabData);\n        expect(tabData).to.be.equal(tabValue);\n      });\n      cy.closePropertyPane();\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_Table_Widget_API_Derived_Column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Create an API and Execute the API and bind with Table","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":9,"column":59,"index":321},"line":9,"code":"  it(\"Create an API and Execute the API and bind with Table\", function () {\n    cy.createAndFillApi(this.data.paginationUrl, this.data.paginationParam);\n    cy.RunAPI();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_Table_Widget_API_Pagination_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate Table with API data and then add a column","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":13,"column":56,"index":494},"line":13,"code":"  it(\"Validate Table with API data and then add a column\", function () {\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.testJsontext(\"tabledata\", \"{{Api1.data.users}}\");\n    cy.CheckWidgetProperties(commonlocators.serverSidePaginationCheckbox);\n    cy.get(`.t--widget-tablewidget .page-item`).first().should(\"contain\", \"1\");\n    cy.get(`.t--widget-tablewidget .t--table-widget-next-page`).first().click();\n    cy.wait(2000);\n    cy.get(`.t--widget-tablewidget .page-item`).first().should(\"contain\", \"2\");\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_Table_Widget_API_Pagination_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Test_Add users api and execute api","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":11,"column":43,"index":366},"line":11,"code":"  it(\"1. Test_Add users api and execute api\", function () {\n    cy.createAndFillApi(this.data.userApi, \"/users\");\n    cy.RunAPI();\n    cy.get(apiPage.responseBody).contains(\"name\").siblings(\"span\").invoke(\"text\").then(text => {\n      const value = text.match(/\"(.*)\"/)[0];\n      cy.log(value);\n      apiData = value;\n      cy.log(\"val1:\" + value);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_tableApi_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Test_Validate the Api data is updated on Table widget","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":21,"column":62,"index":747},"line":21,"code":"  it(\"2. Test_Validate the Api data is updated on Table widget\", function () {\n    cy.SearchEntityandOpen(\"Table1\"); //cy.openPropertyPane(\"tablewidget\");\n\n    cy.testJsontext(\"tabledata\", \"{{ Api1.data.users }}\");\n    /**\n     * readTabledata--> is to read the table contents\n     * @param --> \"row num\" and \"col num\"\n     */\n\n    cy.readTabledata(\"0\", \"1\").then(tabData => {\n      expect(apiData).to.eq(`\\\"${tabData}\\\"`);\n    });\n    cy.PublishtheApp();\n    cy.readTabledataPublish(\"0\", \"1\").then(tabData => {\n      expect(apiData).to.eq(`\\\"${tabData}\\\"`);\n    });\n    cy.get(commonlocators.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_tableApi_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Validate onSearchTextChanged function is called when configured for search text","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":39,"column":88,"index":1395},"line":39,"code":"  it(\"3. Validate onSearchTextChanged function is called when configured for search text\", function () {\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.togglebarDisable(\".t--property-control-enableclientsidesearch input[type='checkbox']\");\n    cy.get(\".t--widget-tablewidget .t--search-input\").first().type(\"Currey\");\n    cy.wait(5000);\n    cy.readTabledataPublish(\"0\", \"1\").then(tabData => {\n      expect(apiData).to.eq(`\\\"${tabData}\\\"`);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_tableApi_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test_Add Paginate with Table Page No and Execute the Api","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":12,"column":62,"index":456},"line":12,"code":"  it(\"Test_Add Paginate with Table Page No and Execute the Api\", function () {\n    cy.wait(30000);\n    /**Create an Api1 of Paginate with Table Page No */\n\n    cy.createAndFillApi(this.data.paginationUrl, \"users?page={{Table1.pageNo}}&pageSize={{Table1.pageSize}}\");\n    cy.RunAPI();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_TableTextPagination_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table-Text, Validate Server Side Pagination of Paginate with Table Page No","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":19,"column":80,"index":764},"line":19,"code":"  it(\"Table-Text, Validate Server Side Pagination of Paginate with Table Page No\", function () {\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.EnableAllCodeEditors();\n    /**Bind Api1 with Table widget */\n\n    cy.testJsontext(\"tabledata\", \"{{Api1.data.users}}\");\n    cy.CheckWidgetProperties(commonlocators.serverSidePaginationCheckbox);\n    /**Bind Table with Textwidget with selected row */\n\n    cy.SearchEntityandOpen(\"Text1\");\n    cy.testJsontext(\"text\", \"{{Table1.selectedRow.avatar}}\");\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.readTabledata(\"0\", \"0\").then(tabData => {\n      const tableData = tabData;\n      localStorage.setItem(\"tableDataPage1\", tableData);\n    });\n    /**Validate Table data on current page(page1) */\n\n    cy.ValidateTableData(\"1\"); //cy.get(commonlocators.tableNextPage).click({ force: true });\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    //cy.wait(5000);\n\n    /*\n    cy.wait(\"@postExecute\").should(\n      \"have.nested.property\",\n      \"response.body.responseMeta.status\",\n      200,\n    );\n    cy.validateToastMessage(\"done\");\n    /**Validate Table data on next page(page2) */\n    //cy.ValidateTableData(\"11\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_TableTextPagination_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table-Text, Validate Publish Mode on Server Side Pagination of Paginate with Table Page No","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":51,"column":96,"index":1951},"line":51,"code":"  it(\"Table-Text, Validate Publish Mode on Server Side Pagination of Paginate with Table Page No\", function () {\n    cy.PublishtheApp();\n    cy.wait(500); // Make sure onPageLoad action has run before validating the data\n\n    cy.wait(\"@postExecute\");\n    cy.wait(2000);\n    cy.ValidatePublishTableData(\"1\");\n    cy.get(commonlocators.tableNextPage).click({\n      force: true\n    }); // Make sure net page action is run\n\n    cy.wait(\"@postExecute\");\n    cy.validateToastMessage(\"done\");\n    cy.ValidatePublishTableData(\"11\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_TableTextPagination_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table-Text, Validate Server Side Pagination of Paginate with Total Records Count","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":66,"column":86,"index":2472},"line":66,"code":"  it(\"Table-Text, Validate Server Side Pagination of Paginate with Total Records Count\", function () {\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n    cy.wait(30000);\n    cy.CheckAndUnfoldEntityItem(\"WIDGETS\");\n    cy.get(\".t--entity-name\").contains(\"Table1\").click({\n      force: true\n    });\n    cy.testJsontext(\"totalrecordcount\", 20);\n    cy.PublishtheApp();\n    cy.wait(500);\n    cy.wait(\"@postExecute\");\n    cy.wait(500);\n    cy.get(\".show-page-items\").should(\"contain\", \"20 Records\");\n    cy.get(\".page-item\").next().should(\"contain\", \"of 2\");\n    cy.get(\".t--table-widget-next-page\").should(\"not.have.attr\", \"disabled\");\n    cy.ValidateTableData(\"1\");\n    cy.get(commonlocators.tableNextPage).click({\n      force: true\n    });\n    cy.wait(\"@postExecute\");\n    cy.wait(500);\n    cy.get(\".t--table-widget-next-page\").should(\"have.attr\", \"disabled\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_TableTextPagination_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test_Add Paginate with Response URL and Execute the Api","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":91,"column":61,"index":3336},"line":91,"code":"  it(\"Test_Add Paginate with Response URL and Execute the Api\", function () {\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n    cy.wait(30000);\n    /** Create Api2 of Paginate with Response URL*/\n\n    cy.createAndFillApi(this.data.paginationUrl, \"users\");\n    cy.RunAPI();\n    cy.NavigateToPaginationTab();\n    cy.get(apiPage.apiPaginationNextText).type(\"{{Api2.data.next}}\", {\n      parseSpecialCharSequences: false\n    });\n    cy.get(apiPage.apiPaginationPrevText).type(\"{{Api2.data.previous}}\", {\n      parseSpecialCharSequences: false\n    });\n    cy.WaitAutoSave();\n    cy.CheckAndUnfoldEntityItem(\"WIDGETS\"); //cy.get(\".t--entity-name:contains(Text1)\").click({ force: true });\n    //cy.openPropertyPane(\"textwidget\");\n\n    /** Bind the Table widget with Text widget*/\n    //cy.testJsontext(\"text\", \"{{Table1.selectedRow.avatar}}\");\n\n    cy.get(\".t--entity-name:contains(Table1)\").click({\n      force: true\n    });\n    cy.testJsontext(\"tabledata\", \"{{Api2.data.users}}\");\n    cy.callApi(\"Api2\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_TableTextPagination_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table-Text, Validate Server Side Pagination of Paginate with Response URL","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":120,"column":79,"index":4385},"line":120,"code":"  it(\"Table-Text, Validate Server Side Pagination of Paginate with Response URL\", function () {\n    /**Validate Response data with Table data in Text Widget */\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.ValidatePaginateResponseUrlData(apiPage.apiPaginationPrevTest);\n    cy.PublishtheApp();\n    cy.ValidatePaginationInputData();\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n    cy.wait(30000);\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.ValidatePaginateResponseUrlData(apiPage.apiPaginationNextTest);\n    cy.wait(5000);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_TableTextPagination_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create an API and Execute the API and bind with TableV2","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":13,"column":64,"index":460},"line":13,"code":"  it(\"1. Create an API and Execute the API and bind with TableV2\", function () {\n    cy.createAndFillApi(this.data.paginationUrl, this.data.paginationParam);\n    cy.RunAPI();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_TableV2_Widget_API_Derived_Column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Validate TableV2 with API data and then add a column","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":17,"column":61,"index":638},"line":17,"code":"  it(\"2. Validate TableV2 with API data and then add a column\", function () {\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.testJsontext(\"tabledata\", \"{{Api1.data.users}}\");\n    cy.CheckWidgetProperties(commonlocators.serverSidePaginationCheckbox);\n    cy.SearchEntityandOpen(\"Text1\");\n    cy.testJsontext(\"text\", \"{{Table1.selectedRow.url}}\");\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.readTableV2data(\"0\", \"0\").then(tabData => {\n      const tableData = tabData;\n      localStorage.setItem(\"tableDataPage1\", tableData);\n    });\n    cy.ValidateTableV2Data(\"1\");\n    cy.addColumnV2(\"CustomColumn\");\n    cy.editColumn(\"customColumn1\");\n    cy.editColName(\"UpdatedColName\");\n    cy.readTableV2dataPublish(\"0\", \"5\").then(tabData => {\n      const tabValue = tabData;\n      cy.updateComputedValueV2(testdata.currentRowEmail);\n      cy.readTableV2dataPublish(\"0\", \"9\").then(tabData => {\n        expect(tabData).to.be.equal(tabValue);\n        cy.log(\"computed value of plain text \" + tabData);\n      });\n    });\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_TableV2_Widget_API_Derived_Column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Check Image alignment is working as expected","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":42,"column":53,"index":1670},"line":42,"code":"  it(\"3. Check Image alignment is working as expected\", function () {\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.editColumn(\"avatar\");\n    cy.changeColumnType(\"Image\");\n    cy.closePropertyPane();\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.get(widgetsPage.centerAlign).first().click({\n      force: true\n    });\n    cy.closePropertyPane();\n    cy.get(`.t--widget-tablewidgetv2 .tbody .image-cell`).first().should(\"have.css\", \"background-position\", \"50% 50%\");\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.get(widgetsPage.rightAlign).first().click({\n      force: true\n    });\n    cy.closePropertyPane();\n    cy.get(`.t--widget-tablewidgetv2 .tbody .image-cell`).first().should(\"have.css\", \"background-position\", \"100% 50%\");\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.get(widgetsPage.leftAlign).first().click({\n      force: true\n    });\n    cy.closePropertyPane();\n    cy.get(`.t--widget-tablewidgetv2 .tbody .image-cell`).first().should(\"have.css\", \"background-position\", \"0% 50%\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_TableV2_Widget_API_Derived_Column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Update table json data and check the derived column values after update","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":66,"column":80,"index":2691},"line":66,"code":"  it(\"4. Update table json data and check the derived column values after update\", function () {\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.tableV2ColumnDataValidation(\"id\");\n    cy.tableV2ColumnDataValidation(\"name\");\n    cy.tableV2ColumnDataValidation(\"status\");\n    cy.tableV2ColumnDataValidation(\"gender\");\n    cy.tableV2ColumnDataValidation(\"avatar\");\n    cy.tableV2ColumnDataValidation(\"email\");\n    cy.tableV2ColumnDataValidation(\"address\");\n    cy.tableV2ColumnDataValidation(\"createdAt\");\n    cy.tableV2ColumnDataValidation(\"updatedAt\");\n    cy.tableV2ColumnDataValidation(\"customColumn1\");\n    cy.testJsontext(\"tabledata\", JSON.stringify(this.data.TableInputUpdate));\n    cy.wait(\"@updateLayout\");\n    cy.tableV2ColumnDataValidation(\"id\");\n    cy.tableV2ColumnDataValidation(\"email\");\n    cy.tableV2ColumnDataValidation(\"userName\");\n    cy.tableV2ColumnDataValidation(\"productName\");\n    cy.tableV2ColumnDataValidation(\"orderAmount\");\n    cy.tableV2ColumnDataValidation(\"customColumn1\");\n    cy.hideColumn(\"email\");\n    cy.hideColumn(\"userName\");\n    cy.hideColumn(\"productName\");\n    cy.hideColumn(\"orderAmount\");\n    cy.get(\".draggable-header:contains('UpdatedColName')\").should(\"be.visible\");\n    cy.readTableV2dataPublish(\"1\", \"2\").then(tabData => {\n      const tabValue = tabData;\n      cy.readTableV2dataPublish(\"1\", \"2\").then(tabData => {\n        cy.log(\"computed value of plain text \" + tabData);\n        expect(tabData).to.be.equal(tabValue);\n      });\n      cy.closePropertyPane();\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_TableV2_Widget_API_Derived_Column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create an API and Execute the API and bind with Table","suites":["Test Create Api and Bind to Table widget V2"],"updatePoint":{"line":9,"column":62,"index":329},"line":9,"code":"  it(\"1. Create an API and Execute the API and bind with Table\", function () {\n    cy.createAndFillApi(this.data.paginationUrl, this.data.paginationParam);\n    cy.RunAPI();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_TableV2_Widget_API_Pagination_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Validate Table V2 with API data and then add a column","suites":["Test Create Api and Bind to Table widget V2"],"updatePoint":{"line":13,"column":62,"index":508},"line":13,"code":"  it(\"2. Validate Table V2 with API data and then add a column\", function () {\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.testJsontext(\"tabledata\", \"{{Api1.data.users}}\");\n    cy.CheckWidgetProperties(commonlocators.serverSidePaginationCheckbox);\n    cy.get(`.t--widget-tablewidgetv2 .page-item`).first().should(\"contain\", \"1\");\n    cy.get(`.t--widget-tablewidgetv2 .t--table-widget-next-page`).first().click();\n    cy.wait(2000);\n    cy.get(`.t--widget-tablewidgetv2 .page-item`).first().should(\"contain\", \"2\");\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_TableV2_Widget_API_Pagination_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Test_Add users api and execute api","suites":["Test Create Api and Bind to Table widget V2"],"updatePoint":{"line":11,"column":43,"index":371},"line":11,"code":"  it(\"1. Test_Add users api and execute api\", function () {\n    cy.createAndFillApi(this.data.userApi, \"/users\");\n    cy.RunAPI();\n    cy.get(apiPage.responseBody).contains(\"name\").siblings(\"span\").invoke(\"text\").then(text => {\n      const value = text.match(/\"(.*)\"/)[0];\n      cy.log(value);\n      apiData = value;\n      cy.log(\"val1:\" + value);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_tableV2Api_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Test_Validate the Api data is updated on Table widget","suites":["Test Create Api and Bind to Table widget V2"],"updatePoint":{"line":21,"column":62,"index":752},"line":21,"code":"  it(\"2. Test_Validate the Api data is updated on Table widget\", function () {\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.testJsontext(\"tabledata\", \"{{ Api1.data.users }}\");\n    /**\n     * readTabledata--> is to read the table contents\n     * @param --> \"row num\" and \"col num\"\n     */\n\n    cy.readTableV2data(\"0\", \"1\").then(tabData => {\n      expect(apiData).to.eq(`\\\"${tabData}\\\"`);\n    });\n    cy.PublishtheApp();\n    cy.readTableV2dataPublish(\"0\", \"1\").then(tabData => {\n      expect(apiData).to.eq(`\\\"${tabData}\\\"`);\n    });\n    cy.get(commonlocators.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_tableV2Api_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Validate onSearchTextChanged function is called when configured for search text","suites":["Test Create Api and Bind to Table widget V2"],"updatePoint":{"line":39,"column":88,"index":1407},"line":39,"code":"  it(\"3. Validate onSearchTextChanged function is called when configured for search text\", function () {\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.togglebarDisable(\".t--property-control-enableclientsidesearch input[type='checkbox']\");\n    cy.get(\".t--widget-tablewidgetv2 .t--search-input\").first().type(\"Currey\");\n    cy.wait(5000);\n    cy.readTableV2dataPublish(\"0\", \"1\").then(tabData => {\n      expect(apiData).to.eq(`\\\"${tabData}\\\"`);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_tableV2Api_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Test_Add Paginate with Table Page No and Execute the Api","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":12,"column":65,"index":461},"line":12,"code":"  it(\"1. Test_Add Paginate with Table Page No and Execute the Api\", function () {\n    cy.wait(30000);\n    /**Create an Api1 of Paginate with Table Page No */\n\n    cy.createAndFillApi(this.data.paginationUrl, \"users?page={{Table1.pageNo}}&pageSize={{Table1.pageSize}}\");\n    cy.RunAPI();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_TableV2TextPagination_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Table-Text, Validate Server Side Pagination of Paginate with Table v2 Page No","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":19,"column":86,"index":775},"line":19,"code":"  it(\"2. Table-Text, Validate Server Side Pagination of Paginate with Table v2 Page No\", function () {\n    cy.SearchEntityandOpen(\"Table1\");\n    /**Bind Api1 with Table widget */\n\n    cy.testJsontext(\"tabledata\", \"{{Api1.data.users}}\");\n    cy.CheckWidgetProperties(commonlocators.serverSidePaginationCheckbox);\n    /**Bind Table with Textwidget with selected row */\n\n    cy.SearchEntityandOpen(\"Text1\");\n    cy.testJsontext(\"text\", \"{{Table1.selectedRow.avatar}}\");\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.readTableV2data(\"0\", \"0\").then(tabData => {\n      const tableData = tabData;\n      localStorage.setItem(\"tableDataPage1\", tableData);\n    });\n    /**Validate Table data on current page(page1) */\n\n    cy.ValidateTableV2Data(\"1\"); //cy.get(commonlocators.tableNextPage).click({ force: true });\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    //cy.wait(5000);\n\n    /*\n    cy.wait(\"@postExecute\").should(\n      \"have.nested.property\",\n      \"response.body.responseMeta.status\",\n      200,\n    );\n    cy.validateToastMessage(\"done\");\n    /**Validate Table data on next page(page2) */\n    //cy.ValidateTableData(\"11\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_TableV2TextPagination_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Table-Text, Validate Publish Mode on Server Side Pagination of Paginate with Table v2 Page No","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":50,"column":102,"index":1941},"line":50,"code":"  it(\"3. Table-Text, Validate Publish Mode on Server Side Pagination of Paginate with Table v2 Page No\", function () {\n    cy.PublishtheApp();\n    cy.wait(500); // Make sure onPageLoad action has run before validating the data\n\n    cy.wait(\"@postExecute\");\n    cy.wait(2000);\n    cy.ValidatePublishTableV2Data(\"1\");\n    cy.get(commonlocators.tableNextPage).click({\n      force: true\n    }); // Make sure net page action is run\n\n    cy.wait(\"@postExecute\");\n    cy.validateToastMessage(\"done\");\n    cy.ValidatePublishTableV2Data(\"11\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_TableV2TextPagination_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Table-Text, Validate Server Side Pagination of Paginate with Total v2 Records Count","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":65,"column":92,"index":2472},"line":65,"code":"  it(\"4. Table-Text, Validate Server Side Pagination of Paginate with Total v2 Records Count\", function () {\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n    cy.wait(30000);\n    cy.CheckAndUnfoldEntityItem(\"WIDGETS\");\n    cy.get(\".t--entity-name\").contains(\"Table1\").click({\n      force: true\n    });\n    cy.testJsontext(\"totalrecordcount\", 20);\n    cy.PublishtheApp();\n    cy.wait(500);\n    cy.wait(\"@postExecute\");\n    cy.wait(500);\n    cy.get(\".show-page-items\").should(\"contain\", \"20 Records\");\n    cy.get(\".page-item\").next().should(\"contain\", \"of 2\");\n    cy.get(\".t--table-widget-next-page\").should(\"not.have.attr\", \"disabled\");\n    cy.ValidateTableV2Data(\"1\");\n    cy.get(commonlocators.tableNextPage).click({\n      force: true\n    });\n    cy.wait(\"@postExecute\");\n    cy.wait(500);\n    cy.get(\".t--table-widget-next-page\").should(\"have.attr\", \"disabled\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_TableV2TextPagination_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Test_Add Paginate with Response URL and Execute the Api","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":90,"column":64,"index":3341},"line":90,"code":"  it(\"5. Test_Add Paginate with Response URL and Execute the Api\", function () {\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n    cy.wait(30000);\n    /** Create Api2 of Paginate with Response URL*/\n\n    cy.createAndFillApi(this.data.paginationUrl, \"users\");\n    cy.RunAPI();\n    cy.NavigateToPaginationTab();\n    cy.get(apiPage.apiPaginationNextText).type(\"{{Api2.data.next}}\", {\n      parseSpecialCharSequences: false\n    });\n    cy.get(apiPage.apiPaginationPrevText).type(\"{{Api2.data.previous}}\", {\n      parseSpecialCharSequences: false\n    });\n    cy.WaitAutoSave();\n    cy.CheckAndUnfoldEntityItem(\"WIDGETS\"); //cy.get(\".t--entity-name:contains(Text1)\").click({ force: true });\n    //cy.openPropertyPane(\"textwidget\");\n\n    /** Bind the Table widget with Text widget*/\n    //cy.testJsontext(\"text\", \"{{Table1.selectedRow.avatar}}\");\n\n    cy.get(\".t--entity-name:contains(Table1)\").click({\n      force: true\n    });\n    cy.testJsontext(\"tabledata\", \"{{Api2.data.users}}\");\n    cy.callApi(\"Api2\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_TableV2TextPagination_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Table-Text, Validate Server Side Pagination of Paginate with Response URL","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":119,"column":82,"index":4393},"line":119,"code":"  it(\"6. Table-Text, Validate Server Side Pagination of Paginate with Response URL\", function () {\n    /**Validate Response data with Table data in Text Widget */\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.ValidatePaginateResponseUrlDataV2(apiPage.apiPaginationPrevTest);\n    cy.PublishtheApp();\n    cy.ValidatePaginationInputDataV2();\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n    cy.wait(30000);\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.ValidatePaginateResponseUrlDataV2(apiPage.apiPaginationNextTest);\n    cy.wait(5000);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_TableV2TextPagination_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Input widget test with default value from table widget v2","suites":["Binding the table widget and input Widget"],"updatePoint":{"line":16,"column":66,"index":566},"line":16,"code":"  it(\"1. Input widget test with default value from table widget v2\", function () {\n    cy.SearchEntityandOpen(\"Input1\");\n    cy.testJsontext(\"defaulttext\", testdata.defaultInputWidget + \"}}\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_TableV2Widget_selectedRow_Input_widget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. validation of data displayed in input widgets based on selected row","suites":["Binding the table widget and input Widget"],"updatePoint":{"line":21,"column":76,"index":878},"line":21,"code":"  it(\"2. validation of data displayed in input widgets based on selected row\", function () {\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.testJsontext(\"defaultselectedrow\", \"2\");\n    cy.readTableV2dataPublish(\"2\", \"0\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"6788734\");\n      cy.log(\"the value is\" + tabValue);\n      cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", tabValue);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_TableV2Widget_selectedRow_Input_widget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Input widget test with default value from table widget","suites":["Binding the table widget and input Widget"],"updatePoint":{"line":16,"column":60,"index":558},"line":16,"code":"  it(\"Input widget test with default value from table widget\", function () {\n    cy.SearchEntityandOpen(\"Input1\");\n    cy.testJsontext(\"defaulttext\", testdata.defaultInputWidget + \"}}\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_TableWidget_selectedRow_Input_widget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"validation of data displayed in input widgets based on selected row","suites":["Binding the table widget and input Widget"],"updatePoint":{"line":21,"column":73,"index":867},"line":21,"code":"  it(\"validation of data displayed in input widgets based on selected row\", function () {\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.testJsontext(\"defaultselectedrow\", \"2\");\n    cy.readTabledataPublish(\"2\", \"0\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"6788734\");\n      cy.log(\"the value is\" + tabValue);\n      cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", tabValue);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_TableWidget_selectedRow_Input_widget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Input widget test with default value from tab widget","suites":["Binding the input Widget with tab Widget"],"updatePoint":{"line":11,"column":58,"index":371},"line":11,"code":"  it(\"Input widget test with default value from tab widget\", function () {\n    cy.SearchEntityandOpen(\"Input1\");\n    cy.testJsontext(\"defaulttext\", testdata.tabBinding + \"}}\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_TabWidget_Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"validation of data displayed in input widgets based on tab selected","suites":["Binding the input Widget with tab Widget"],"updatePoint":{"line":16,"column":73,"index":672},"line":16,"code":"  it(\"validation of data displayed in input widgets based on tab selected\", function () {\n    cy.PublishtheApp();\n    cy.get(publish.tabWidget).contains(\"Tab 2\").click().wait(1000).should(\"have.class\", \"is-selected\");\n    cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", \"Tab 2\");\n    cy.get(publish.tabWidget).contains(\"Tab 1\").click().wait(1000).should(\"have.class\", \"is-selected\");\n    cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", \"Tab 1\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_TabWidget_Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Will load an api on load","suites":["Binding the API with pageOnLoad and input Widgets"],"updatePoint":{"line":15,"column":33,"index":499},"line":15,"code":"  it(\"1. Will load an api on load\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"PageLoadApi\");\n    cy.enterDatasourceAndPath(testdata.baseUrl, testdata.methods);\n    cy.WaitAutoSave();\n    cy.get(apiwidget.settings).click({\n      force: true\n    });\n    cy.get(apiwidget.onPageLoad).click({\n      force: true\n    });\n    cy.wait(\"@setExecuteOnLoad\");\n    cy.reload();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/BindApi_withPageload_Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Input widget updated with deafult data","suites":["Binding the API with pageOnLoad and input Widgets"],"updatePoint":{"line":29,"column":47,"index":905},"line":29,"code":"  it(\"2. Input widget updated with deafult data\", function () {\n    cy.selectEntityByName(\"WIDGETS\");\n    cy.selectEntityByName(\"Input1\");\n    cy.get(widgetsPage.defaultInput).type(\"3\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", \"3\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/BindApi_withPageload_Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Binding second input widget with API on PageLoad data and default data from input1 widget ","suites":["Binding the API with pageOnLoad and input Widgets"],"updatePoint":{"line":36,"column":99,"index":1357},"line":36,"code":"  it(\"3. Binding second input widget with API on PageLoad data and default data from input1 widget \", function () {\n    cy.selectEntityByName(\"Input3\");\n    cy.get(widgetsPage.defaultInput).type(testdata.pageloadBinding, {\n      parseSpecialCharSequences: false\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.PublishtheApp();\n    cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", \"3\");\n    cy.get(publish.inputWidget + \" \" + \"input\").last().invoke(\"attr\", \"value\").should(\"contain\", \"23\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/BindApi_withPageload_Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Validate the Button binding with Text Widget with Recaptcha token with empty key","suites":["Binding the Button widget with Text widget using Recpatcha v3"],"updatePoint":{"line":9,"column":89,"index":356},"line":9,"code":"  it(\"1. Validate the Button binding with Text Widget with Recaptcha token with empty key\", function () {\n    cy.get(\"button\").contains(\"Submit\").should(\"be.visible\").click({\n      force: true\n    });\n    cy.SearchEntityandOpen(\"Text1\");\n    cy.get(\".t--draggable-textwidget .bp3-ui-text\").should(\"be.visible\");\n    cy.get(\".t--draggable-textwidget .bp3-ui-text\").should(\"have.value\", \"\");\n    cy.SearchEntityandOpen(\"Button1\");\n    cy.get(\".t--property-control-googlerecaptchaversion .bp3-popover-target\").last().should(\"be.visible\").click({\n      force: true\n    });\n    cy.get(\".t--dropdown-option:contains('reCAPTCHA v2')\").click({\n      force: true\n    });\n    cy.get(\"button\").contains(\"Submit\").should(\"be.visible\").click({\n      force: true\n    });\n    cy.SearchEntityandOpen(\"Text1\");\n    cy.get(\".t--draggable-textwidget .bp3-ui-text\").should(\"be.visible\");\n    cy.get(\".t--draggable-textwidget .bp3-ui-text\").should(\"have.value\", \"\");\n  }); //This test to be enabled once the product bug is fixed","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/BindButton_Text_WithRecaptcha_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate the Button binding with Text Widget with Recaptcha Token with invalid key before using valid key","suites":["Binding the Button widget with Text widget using Recpatcha v3"],"line":31,"code":"  it.skip(\"Validate the Button binding with Text Widget with Recaptcha Token with invalid key before using valid key\", function () {","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/BindButton_Text_WithRecaptcha_spec.js","skipped":true,"dir":"app/client/cypress"},{"name":"2. Validate the Button binding with Text Widget with Recaptcha Token with v2Key","suites":["Binding the Button widget with Text widget using Recpatcha v3"],"updatePoint":{"line":59,"column":85,"index":2443},"line":59,"code":"  it(\"2. Validate the Button binding with Text Widget with Recaptcha Token with v2Key\", function () {\n    cy.get(\"button\").contains(\"Submit\").should(\"be.visible\").click({\n      force: true\n    });\n    cy.testCodeMirrorLast(testdata.v2Key);\n    cy.SearchEntityandOpen(\"Text1\");\n    cy.get(\".t--draggable-textwidget span\").last().invoke(\"text\").then(x => {\n      cy.log(x);\n      expect(x).to.be.empty;\n    });\n    cy.SearchEntityandOpen(\"Button1\");\n    cy.get(\".t--property-control-googlerecaptchaversion .bp3-popover-target\").last().should(\"be.visible\").click({\n      force: true\n    });\n    cy.get(\".t--dropdown-option:contains('reCAPTCHA v2')\").click({\n      force: true\n    });\n    cy.get(\"button\").contains(\"Submit\").should(\"be.visible\").click({\n      force: true\n    });\n    cy.SearchEntityandOpen(\"Text1\");\n    cy.wait(3000);\n    cy.get(\".t--draggable-textwidget span\").last().invoke(\"text\").then(x => {\n      cy.log(x);\n      expect(x).not.to.be.empty;\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/BindButton_Text_WithRecaptcha_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Validate the Button binding with Text Widget with Recaptcha Token with v3Key","suites":["Binding the Button widget with Text widget using Recpatcha v3"],"updatePoint":{"line":86,"column":85,"index":3417},"line":86,"code":"  it(\"3. Validate the Button binding with Text Widget with Recaptcha Token with v3Key\", function () {\n    cy.get(\"button\").contains(\"Submit\").should(\"be.visible\").click({\n      force: true\n    });\n    cy.testCodeMirrorLast(testdata.v3Key);\n    cy.SearchEntityandOpen(\"Text1\");\n    cy.get(\".t--draggable-textwidget span\").last().invoke(\"text\").then(x => {\n      cy.log(x);\n      expect(x).not.to.be.empty;\n    });\n    cy.SearchEntityandOpen(\"Button1\");\n    cy.get(\".t--property-control-googlerecaptchaversion .bp3-popover-target\").last().should(\"be.visible\").click({\n      force: true\n    });\n    cy.get(\".t--dropdown-option:contains('reCAPTCHA v2')\").click({\n      force: true\n    });\n    cy.get(\"button\").contains(\"Submit\").should(\"be.visible\").click({\n      force: true\n    });\n    cy.SearchEntityandOpen(\"Text1\");\n    cy.wait(3000);\n    cy.get(\".t--draggable-textwidget span\").last().invoke(\"text\").then(x => {\n      cy.log(x);\n      expect(x).not.to.be.empty;\n    });\n  }); //This test to be enabled once the product bug is fixed","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/BindButton_Text_WithRecaptcha_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate the Button binding with Text Widget with Recaptcha Token with invalid key","suites":["Binding the Button widget with Text widget using Recpatcha v3"],"line":114,"code":"  it.skip(\"Validate the Button binding with Text Widget with Recaptcha Token with invalid key\", function () {","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/BindButton_Text_WithRecaptcha_spec.js","skipped":true,"dir":"app/client/cypress"},{"name":"Input widget test with default value from table widget","suites":["Binding the Table and input Widget"],"updatePoint":{"line":15,"column":60,"index":517},"line":15,"code":"  it(\"Input widget test with default value from table widget\", function () {\n    cy.SearchEntityandOpen(\"Input1\");\n    cy.testJsontext(\"defaulttext\", testdata.defaultInputWidget + \"}}\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Binding_Table_Widget_DefaultSearch_Input_widget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"validation of data displayed in input widgets based on search value set","suites":["Binding the Table and input Widget"],"updatePoint":{"line":20,"column":77,"index":830},"line":20,"code":"  it(\"validation of data displayed in input widgets based on search value set\", function () {\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.testJsontext(\"defaultsearchtext\", \"2736212\");\n    cy.wait(\"@updateLayout\").isSelectRow(0);\n    cy.readTabledataPublish(\"0\", \"0\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"2736212\");\n      cy.log(\"the value is\" + tabValue);\n      cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", tabValue);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Binding_Table_Widget_DefaultSearch_Input_widget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Input widget test with default value from table widget","suites":["Binding the Table and input Widget"],"updatePoint":{"line":15,"column":63,"index":522},"line":15,"code":"  it(\"1. Input widget test with default value from table widget\", function () {\n    cy.SearchEntityandOpen(\"Input1\");\n    cy.testJsontext(\"defaulttext\", testdata.defaultInputWidget + \"}}\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Binding_TableV2_Widget_DefaultSearch_Input_widget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. validation of data displayed in input widgets based on search value set","suites":["Binding the Table and input Widget"],"updatePoint":{"line":20,"column":80,"index":838},"line":20,"code":"  it(\"2. validation of data displayed in input widgets based on search value set\", function () {\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.testJsontext(\"defaultsearchtext\", \"2736212\");\n    cy.wait(\"@updateLayout\").isSelectRow(0);\n    cy.readTableV2dataPublish(\"0\", \"0\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"2736212\");\n      cy.log(\"the value is\" + tabValue);\n      cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", tabValue);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Binding_TableV2_Widget_DefaultSearch_Input_widget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Button widgets widget on click info message valdiation ","suites":["Widget Grouping"],"updatePoint":{"line":11,"column":61,"index":368},"line":11,"code":"  it(\"Button widgets widget on click info message valdiation \", function () {\n    cy.get(\".t--buttongroup-widget button\").contains(\"Add\").click({\n      force: true\n    });\n    cy.get(\".t--buttongroup-widget button\").contains(\"More\").click({\n      force: true\n    });\n    cy.get(commonlocators.toastmsg).contains(\"test alert\");\n    cy.PublishtheApp();\n    cy.get(\".t--buttongroup-widget button\").contains(\"Add\").click({\n      force: true\n    });\n    cy.get(\".t--buttongroup-widget button\").contains(\"More\").click({\n      force: true\n    });\n    cy.get(commonlocators.toastmsg).contains(\"test alert\");\n    cy.goToEditFromPublish();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/ButtonGroup_binding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Button widget with action navigate to page","suites":["Binding the button Widgets and validating NavigateTo Page functionality"],"updatePoint":{"line":15,"column":48,"index":534},"line":15,"code":"  it(\"Button widget with action navigate to page\", function () {\n    cy.openPropertyPane(\"buttonwidget\");\n    cy.get(widgetsPage.actionSelect).click();\n    cy.get(commonlocators.chooseAction).children().contains(\"Navigate to\").click();\n    cy.enterNavigatePageName(testdata.externalPage); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(300);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/ButtonWidgets_NavigateTo_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Button click should take the control to page link validation","suites":["Binding the button Widgets and validating NavigateTo Page functionality"],"updatePoint":{"line":23,"column":66,"index":925},"line":23,"code":"  it(\"Button click should take the control to page link validation\", function () {\n    cy.PublishtheApp();\n    cy.wait(2000);\n    cy.get(publish.buttonWidget).click(); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500);\n    cy.get(publish.buttonWidget).should(\"not.exist\");\n    cy.go(\"back\");\n    cy.get(publish.backToEditor).click();\n    cy.wait(\"@getPage\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/ButtonWidgets_NavigateTo_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Text-Chart Binding Functionality View","suites":["Text-Chart Binding Functionality"],"updatePoint":{"line":15,"column":43,"index":495},"line":15,"code":"  it(\"Text-Chart Binding Functionality View\", function () {\n    cy.openPropertyPane(\"textwidget\");\n    cy.testJsontext(\"text\", JSON.stringify(this.data.chartInputValidate));\n    cy.get(commonlocators.TextInside).should(\"have.text\", JSON.stringify(this.data.chartInputValidate));\n    cy.closePropertyPane();\n    cy.openPropertyPane(\"chartwidget\");\n    cy.get(viewWidgetsPage.chartType).last().click({\n      force: true\n    });\n    cy.get(\".t--dropdown-option\").children().contains(\"Column Chart\").click();\n    cy.get(\" .t--property-control-charttype .bp3-popover-target\").last().should(\"have.text\", \"Column Chart\");\n    cy.testJsontext(\"chart-series-data-control\", \"{{Text1.text}}\");\n    cy.closePropertyPane();\n    const labels = [this.data.Chartval[0], this.data.Chartval[1], this.data.Chartval[2]];\n    [0, 1, 2].forEach(k => {\n      cy.get(viewWidgetsPage.rectangleChart).eq(k).trigger(\"mousemove\", {\n        force: true\n      });\n      cy.get(viewWidgetsPage.Chartlabel).eq(k).should(\"have.text\", labels[k]);\n    });\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/ChartText_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Text-Chart Binding Functionality Publish","suites":["Text-Chart Binding Functionality"],"updatePoint":{"line":37,"column":46,"index":1549},"line":37,"code":"  it(\"Text-Chart Binding Functionality Publish\", function () {\n    cy.get(publish.chartCanvasVal).should(\"be.visible\");\n    cy.get(publish.chartWidget).should(\"have.css\", \"opacity\", \"1\");\n    const labels = [this.data.Chartval[0], this.data.Chartval[1], this.data.Chartval[2]];\n    [0, 1, 2].forEach(k => {\n      cy.get(publish.rectChart).eq(k).trigger(\"mousemove\", {\n        force: true\n      });\n      cy.get(publish.chartLab).eq(k).should(\"have.text\", labels[k]);\n    });\n    cy.get(commonlocators.TextInside).should(\"have.text\", JSON.stringify(this.data.chartInputValidate));\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/ChartText_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checks if delete will remove bindings","suites":["Binding the multiple widgets and validating default data"],"updatePoint":{"line":9,"column":43,"index":302},"line":9,"code":"  it(\"Checks if delete will remove bindings\", function () {\n    cy.get(widgetsPage.textWidget).first().click({\n      force: true\n    });\n    cy.get(\"body\").type(\"{del}\", {\n      force: true\n    });\n    cy.get(widgetsPage.textWidget).first().should(\"not.have.text\", \"Label\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Entity_delete_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Input widget test with default value from table widget","suites":["Binding the multiple Widgets and validating NavigateTo Page"],"updatePoint":{"line":20,"column":63,"index":705},"line":20,"code":"  it(\"1. Input widget test with default value from table widget\", function () {\n    cy.openPropertyPane(\"inputwidgetv2\");\n    cy.get(widgetsPage.defaultInput).type(testdata.defaultInputWidget);\n    cy.get(widgetsPage.inputOnTextChange).first().click({\n      force: true\n    });\n    cy.get(commonlocators.chooseAction).children().contains(\"Navigate to\").click();\n    cy.enterNavigatePageName(pageid);\n    cy.assertPageSave();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/InputWidgets_NavigateTo_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Create MyPage and valdiate if its successfully created","suites":["Binding the multiple Widgets and validating NavigateTo Page"],"updatePoint":{"line":30,"column":63,"index":1136},"line":30,"code":"  it(\"2. Create MyPage and valdiate if its successfully created\", function () {\n    cy.Createpage(pageid);\n    cy.addDsl(dsl2); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(3000);\n    cy.CheckAndUnfoldEntityItem(\"PAGES\");\n    cy.get(`.t--entity-name:contains(\"${pageid}\")`).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/InputWidgets_NavigateTo_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Validate NavigateTo Page functionality ","suites":["Binding the multiple Widgets and validating NavigateTo Page"],"updatePoint":{"line":38,"column":48,"index":1450},"line":38,"code":"  it(\"3. Validate NavigateTo Page functionality \", function () {\n    cy.get(`.t--entity-name:contains(\"Page1\")`).should(\"be.visible\").click({\n      force: true\n    });\n    cy.wait(4000);\n    cy.isSelectRow(1);\n    cy.readTabledataPublish(\"1\", \"0\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"2736212\");\n      cy.wait(2000);\n      cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", tabValue);\n      cy.get(widgetsPage.chartWidget).should(\"not.exist\");\n      cy.get(publish.inputGrp).first().type(\"123\").wait(2000);\n      cy.waitUntil(() => cy.get(widgetsPage.chartWidget).should(\"be.visible\"), {\n        errorMsg: \"Execute call did not complete evn after 20 secs\",\n        timeout: 20000,\n        interval: 1000\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/InputWidgets_NavigateTo_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Dropdown widget test with invalid binding value","suites":["Binding the multiple widgets and validating default data"],"updatePoint":{"line":19,"column":53,"index":668},"line":19,"code":"  it(\"Dropdown widget test with invalid binding value\", function () {\n    cy.openPropertyPane(\"selectwidget\");\n    cy.testJsontext(\"options\", JSON.stringify(testdata.defaultdataBinding));\n    cy.evaluateErrorMessage(testdata.dropdownErrorMsg);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Invalid_binding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table widget test with invalid binding value","suites":["Binding the multiple widgets and validating default data"],"updatePoint":{"line":24,"column":50,"index":915},"line":24,"code":"  it(\"Table widget test with invalid binding value\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.testJsontext(\"tabledata\", JSON.stringify(testdata.defaultdataBinding));\n    cy.evaluateErrorMessage(testdata.tableWidgetErrorMsg);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Invalid_binding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"switches the toggle to Button widget","suites":["JS Toggle tests"],"updatePoint":{"line":7,"column":42,"index":187},"line":7,"code":"  it(\"switches the toggle to Button widget\", () => {\n    cy.openPropertyPane(\"buttonwidget\");\n    cy.get(\".t--property-control-visible\").find(\".t--js-toggle\").click();\n    cy.get(\".t--property-control-visible\").find(\".t--js-toggle\").should(\"have.class\", \"is-active\");\n    cy.EnableAllCodeEditors();\n    cy.testJsontext(\"visible\", \"false\"); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.get(\".t--property-control-visible\").find(\".t--js-toggle\").click();\n    cy.get(\".t--property-control-visible\").find(\".t--js-toggle\").should(\"not.have.class\", \"is-active\");\n    cy.get(\".t--property-control-visible\").find(\"input\").should(\"not.have.attr\", \"checked\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/JS_Toggle_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table Widget Functionality with multiple page","suites":["Table Widget with Input Widget and Navigate to functionality validation"],"updatePoint":{"line":22,"column":51,"index":774},"line":22,"code":"  it(\"Table Widget Functionality with multiple page\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.widgetText(\"Table1\", widgetsPage.tableWidget, commonlocators.tableInner);\n    cy.testJsontext(\"tabledata\", JSON.stringify(testdata.TablePagination));\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/NavigateToFeatureValidation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Create MyPage and valdiate if its successfully created","suites":["Table Widget with Input Widget and Navigate to functionality validation"],"updatePoint":{"line":27,"column":60,"index":1054},"line":27,"code":"  it(\"Create MyPage and valdiate if its successfully created\", function () {\n    cy.Createpage(pageid);\n    cy.addDsl(dsl2); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500);\n    cy.CheckAndUnfoldEntityItem(\"PAGES\");\n    cy.get(`.t--entity-name:contains(\"${pageid}\")`).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/NavigateToFeatureValidation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate NavigateTo Page functionality ","suites":["Table Widget with Input Widget and Navigate to functionality validation"],"updatePoint":{"line":35,"column":45,"index":1364},"line":35,"code":"  it(\"Validate NavigateTo Page functionality \", function () {\n    cy.get(`.t--entity-name:contains(\"Page1\")`).should(\"be.visible\").click({\n      force: true\n    });\n    cy.wait(4000);\n    cy.PublishtheApp();\n    cy.readTabledataPublish(\"1\", \"0\").then(tabDataP => {\n      const tabValueP = tabDataP;\n      cy.log(tabValueP);\n      cy.isSelectRow(1);\n      cy.get(\"input\").should(\"be.visible\");\n      cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", tabValueP);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/NavigateToFeatureValidation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Show binding prompt when there are no bindings in the editor","suites":["Binding prompt"],"updatePoint":{"line":11,"column":66,"index":351},"line":11,"code":"  it(\"Show binding prompt when there are no bindings in the editor\", () => {\n    cy.openPropertyPane(\"inputwidgetv2\");\n    cy.testJsontext(\"defaulttext\", \" \");\n    cy.get(dynamicInput.bindingPrompt).should(\"be.visible\");\n    cy.get(widgetsPage.defaultInput).type(\"{{\");\n    cy.get(dynamicInput.bindingPrompt).should(\"not.be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/No_Binding_Prompt_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Update table data and assert","suites":["Text-Table Binding Functionality"],"updatePoint":{"line":31,"column":34,"index":723},"line":31,"code":"  it(\"Update table data and assert\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.get(widgetLocators.tabedataField).then($el => {\n      cy.updateCodeInput($el, updateData);\n      cy.readTabledata(\"1\", \"0\").then(cellData => {\n        cy.wrap(cellData).should(\"equal\", \"Product2\");\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/SmartSubstitutionWidgets_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Update chart data and assert","suites":["Text-Table Binding Functionality"],"updatePoint":{"line":40,"column":34,"index":1043},"line":40,"code":"  it(\"Update chart data and assert\", function () {\n    cy.openPropertyPane(\"chartwidget\");\n    cy.get(\".t--property-control-chart-series-data-control\").then($el => {\n      cy.updateCodeInput($el, updateData);\n      cy.get(viewWidgetsPage.chartWidget).find(\"svg\").find(\"text\").should(\"contain.text\", \"Product2\");\n      cy.get(viewWidgetsPage.chartWidget).find(\"svg\").find(\"rect\").should(\"have.length.greaterThan\", 0);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/SmartSubstitutionWidgets_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Publish and assert","suites":["Text-Table Binding Functionality"],"updatePoint":{"line":48,"column":24,"index":1464},"line":48,"code":"  it(\"Publish and assert\", function () {\n    cy.PublishtheApp();\n    cy.readTabledata(\"1\", \"0\").then(cellData => {\n      cy.wrap(cellData).should(\"equal\", \"Product2\");\n    });\n    cy.get(publish.chartWidget).find(\"svg\").find(\"text\").should(\"contain.text\", \"Product2\");\n    cy.get(publish.chartWidget).find(\"svg\").find(\"rect\").should(\"have.length.greaterThan\", 0);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/SmartSubstitutionWidgets_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate onSearchTextChanged function is called when configured for search text","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":7,"column":85,"index":265},"line":7,"code":"  it(\"Validate onSearchTextChanged function is called when configured for search text\", function () {\n    cy.wait(5000); // input text in search bar\n\n    cy.get(\".t--widget-tablewidget .t--search-input input\").first().type(\"2\");\n    cy.wait(5000); // Verify it filtered the table\n\n    cy.readTabledataPublish(\"0\", \"0\").then(tabData => {\n      expect(tabData).to.eq(\"#2\");\n    }); // Input onsearchtextchanged control\n\n    cy.get(\".t--property-control-onsearchtextchanged .t--js-toggle\").first().click();\n    cy.testJsontext(\"onsearchtextchanged\", \"{{showAlert('12')}}\"); // Verify ClientSideSearch toggle is visible\n\n    cy.get(\".t--property-control-enableclientsidesearch\").should(\"exist\"); // Verify filter still works\n\n    cy.readTabledataPublish(\"0\", \"0\").then(tabData => {\n      expect(tabData).to.eq(\"#2\");\n    }); // Disable Client Search\n\n    cy.togglebarDisable(\".t--property-control-enableclientsidesearch input[type='checkbox']\");\n    cy.wait(1000); //wait & then read the table value\n    // Verify Client Search doesnt work\n\n    cy.readTabledataPublish(\"0\", \"0\").then(tabData => {\n      expect(tabData).to.eq(\"#1\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Table_ClientSide_Search_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table widget toggle test for text alignment","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":18,"column":49,"index":622},"line":18,"code":"  it(\"Table widget toggle test for text alignment\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.editColumn(\"id\");\n    cy.get(widgetsPage.toggleTextAlign).first().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.toggleJsAndUpdate(\"tabledata\", testdata.bindingAlign);\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"justify-content\", \"flex-start\");\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"justify-content\", \"flex-end\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Table_Property_ToggleJs_With_Binding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table widget change text size and validate","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":30,"column":48,"index":1131},"line":30,"code":"  it(\"Table widget change text size and validate\", function () {\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"font-size\", \"14px\");\n    cy.openPropertyPane(\"tablewidget\");\n    cy.get(\".t--property-pane-back-btn\").click({\n      force: true\n    });\n    cy.editColumn(\"id\");\n    cy.get(widgetsPage.toggleTextAlign).first().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.get(widgetsPage.textSize).last().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.selectTxtSize(\"XL\");\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"font-size\", \"30px\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Table_Property_ToggleJs_With_Binding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table widget toggle test for text size","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":50,"column":44,"index":1808},"line":50,"code":"  it(\"Table widget toggle test for text size\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.get(\".t--property-pane-back-btn\").click({\n      force: true\n    });\n    cy.editColumn(\"id\");\n    cy.get(widgetsPage.toggleTextSize).first().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.toggleJsAndUpdate(\"tabledata\", testdata.bindingSize);\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"font-size\", \"14px\");\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"font-size\", \"24px\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Table_Property_ToggleJs_With_Binding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table widget toggle test for vertical Alignment","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":65,"column":53,"index":2373},"line":65,"code":"  it(\"Table widget toggle test for vertical Alignment\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.get(\".t--property-pane-back-btn\").click({\n      force: true\n    });\n    cy.editColumn(\"id\");\n    cy.get(widgetsPage.toggleTextSize).first().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.get(widgetsPage.toggleVerticalAlig).first().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.toggleJsAndUpdate(\"tabledata\", testdata.bindingVerticalAlig);\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"align-items\", \"flex-start\");\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"align-items\", \"flex-end\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Table_Property_ToggleJs_With_Binding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table widget toggle test for style Alignment","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":85,"column":50,"index":3121},"line":85,"code":"  it(\"Table widget toggle test for style Alignment\", function () {\n    cy.get(\".t--property-pane-back-btn\").click({\n      force: true\n    });\n    cy.openPropertyPane(\"tablewidget\");\n    cy.editColumn(\"id\");\n    cy.get(widgetsPage.toggleVerticalAlig).first().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.get(widgetsPage.toggleTextStyle).first().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.toggleJsAndUpdateWithIndex(\"tabledata\", testdata.bindingStyle, 3);\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"font-style\", \"normal\");\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"font-style\", \"italic\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Table_Property_ToggleJs_With_Binding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table widget toggle test for text color","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":105,"column":45,"index":3862},"line":105,"code":"  it(\"Table widget toggle test for text color\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.get(\".t--property-pane-back-btn\").click({\n      force: true\n    });\n    cy.editColumn(\"id\");\n    cy.get(widgetsPage.toggleVerticalAlig).first().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.get(widgetsPage.toggleJsColor).first().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.toggleJsAndUpdateWithIndex(\"tabledata\", testdata.bindingTextColor, 5);\n    cy.wait(\"@updateLayout\");\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"color\", \"rgb(0, 128, 0)\");\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"color\", \"rgb(255, 0, 0)\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Table_Property_ToggleJs_With_Binding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table widget toggle test for background color","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":126,"column":51,"index":4647},"line":126,"code":"  it(\"Table widget toggle test for background color\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.get(\".t--property-pane-back-btn\").click({\n      force: true\n    });\n    cy.editColumn(\"id\");\n    cy.get(widgetsPage.toggleJsColor).first().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.get(widgetsPage.toggleJsBcgColor).first().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.toggleJsAndUpdateWithIndex(\"tabledata\", testdata.bindingTextColor, 6);\n    cy.wait(\"@updateLayout\");\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"background\", \"rgb(0, 128, 0) none repeat scroll 0% 0% / auto padding-box border-box\");\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"background\", \"rgb(255, 0, 0) none repeat scroll 0% 0% / auto padding-box border-box\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Table_Property_ToggleJs_With_Binding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"check the cell styles before and after sorting","suites":["Table Widget condtional formatting to remain consistent"],"updatePoint":{"line":8,"column":52,"index":307},"line":8,"code":"  it(\"check the cell styles before and after sorting\", function () {\n    cy.openPropertyPane(\"tablewidget\"); //Check Font weight, font style, and text color before sorting\n\n    cy.readTabledataValidateCSS(\"0\", \"1\", \"font-weight\", \"700\");\n    cy.readTabledataValidateCSS(\"0\", \"1\", \"font-style\", \"normal\");\n    cy.readTabledataValidateCSS(\"0\", \"1\", \"color\", \"rgb(0, 0, 255)\");\n    cy.readTabledataValidateCSS(\"1\", \"1\", \"font-weight\", \"400\");\n    cy.readTabledataValidateCSS(\"1\", \"1\", \"font-style\", \"italic\");\n    cy.readTabledataValidateCSS(\"1\", \"1\", \"color\", \"rgb(255, 0, 0)\");\n    cy.get(\".draggable-header\").contains(\"id\").click({\n      force: true\n    }); //Check Font weight, font style, and text color after sorting\n\n    cy.readTabledataValidateCSS(\"3\", \"1\", \"font-weight\", \"700\");\n    cy.readTabledataValidateCSS(\"3\", \"1\", \"font-style\", \"normal\");\n    cy.readTabledataValidateCSS(\"3\", \"1\", \"color\", \"rgb(0, 0, 255)\");\n    cy.readTabledataValidateCSS(\"2\", \"1\", \"font-weight\", \"400\");\n    cy.readTabledataValidateCSS(\"2\", \"1\", \"font-style\", \"italic\");\n    cy.readTabledataValidateCSS(\"2\", \"1\", \"color\", \"rgb(255, 0, 0)\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Table_Widget__CondtionalFormatting_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Validate onSearchTextChanged function is called when configured for search text","suites":["Test Create Api and Bind to Table widget V2"],"updatePoint":{"line":7,"column":88,"index":273},"line":7,"code":"  it(\"1. Validate onSearchTextChanged function is called when configured for search text\", function () {\n    cy.wait(5000); // input text in search bar\n\n    cy.get(\".t--widget-tablewidgetv2 .t--search-input input\").first().type(\"2\");\n    cy.wait(5000); // Verify it filtered the table\n\n    cy.readTableV2dataPublish(\"0\", \"0\").then(tabData => {\n      expect(tabData).to.eq(\"#2\");\n    }); // Input onsearchtextchanged control\n\n    cy.get(\".t--property-control-onsearchtextchanged .t--js-toggle\").first().click();\n    cy.testJsontext(\"onsearchtextchanged\", \"{{showAlert('12')}}\"); // Verify ClientSideSearch toggle is visible\n\n    cy.get(\".t--property-control-enableclientsidesearch\").should(\"exist\"); // Verify filter still works\n\n    cy.readTableV2dataPublish(\"0\", \"0\").then(tabData => {\n      expect(tabData).to.eq(\"#2\");\n    }); // Disable Client Search\n\n    cy.togglebarDisable(\".t--property-control-enableclientsidesearch input[type='checkbox']\");\n    cy.wait(1000); //wait & then read the table value\n    // Verify Client Search doesnt work\n\n    cy.readTableV2dataPublish(\"0\", \"0\").then(tabData => {\n      expect(tabData).to.eq(\"#1\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/TableV2_ClientSide_Search_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Table widget V2 toggle test for text alignment","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":12,"column":55,"index":423},"line":12,"code":"  it(\"1. Table widget V2 toggle test for text alignment\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.editColumn(\"id\");\n    cy.get(widgetsPage.toggleTextAlign).first().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.toggleJsAndUpdate(\"tabledata\", testdata.bindingAlign);\n    cy.readTableV2dataValidateCSS(\"0\", \"0\", \"justify-content\", \"flex-start\");\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"justify-content\", \"flex-end\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/TableV2_Property_ToggleJs_With_Binding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Table widget V2 change text size and validate","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":24,"column":54,"index":944},"line":24,"code":"  it(\"2. Table widget V2 change text size and validate\", function () {\n    cy.readTableV2dataValidateCSS(\"0\", \"0\", \"font-size\", \"14px\");\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.get(\".t--property-pane-back-btn\").click({\n      force: true\n    });\n    cy.editColumn(\"id\");\n    cy.get(widgetsPage.toggleTextAlign).first().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.get(widgetsPage.textSize).last().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.selectTxtSize(\"XL\");\n    cy.readTableV2dataValidateCSS(\"0\", \"0\", \"font-size\", \"30px\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/TableV2_Property_ToggleJs_With_Binding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Table widget toggle test for text size","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":44,"column":47,"index":1630},"line":44,"code":"  it(\"3. Table widget toggle test for text size\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.get(\".t--property-pane-back-btn\").click({\n      force: true\n    });\n    cy.editColumn(\"id\");\n    cy.get(widgetsPage.toggleTextSize).first().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.toggleJsAndUpdate(\"tabledata\", testdata.bindingNewSize);\n    cy.readTableV2dataValidateCSS(\"0\", \"0\", \"font-size\", \"14px\");\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"font-size\", \"24px\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/TableV2_Property_ToggleJs_With_Binding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Table widget toggle test for vertical Alignment","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":59,"column":56,"index":2207},"line":59,"code":"  it(\"4. Table widget toggle test for vertical Alignment\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.get(\".t--property-pane-back-btn\").click({\n      force: true\n    });\n    cy.editColumn(\"id\");\n    cy.get(widgetsPage.toggleTextSize).first().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.get(widgetsPage.toggleVerticalAlig).first().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.toggleJsAndUpdateWithIndex(\"tabledata\", testdata.bindingVerticalAlig, 3);\n    cy.readTableV2dataValidateCSS(\"0\", \"0\", \"align-items\", \"flex-start\");\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"align-items\", \"flex-end\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/TableV2_Property_ToggleJs_With_Binding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Table widget V2 toggle test for style Alignment","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":79,"column":56,"index":2979},"line":79,"code":"  it(\"5. Table widget V2 toggle test for style Alignment\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.get(\".t--property-pane-back-btn\").click({\n      force: true\n    });\n    cy.editColumn(\"id\");\n    cy.get(widgetsPage.toggleVerticalAlig).first().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.get(widgetsPage.toggleTextStyle).first().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.toggleJsAndUpdateWithIndex(\"tabledata\", testdata.bindingStyle, 3);\n    cy.readTableV2dataValidateCSS(\"0\", \"0\", \"font-style\", \"normal\");\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"font-style\", \"italic\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/TableV2_Property_ToggleJs_With_Binding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Table widget toggle test for text color","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":99,"column":48,"index":3729},"line":99,"code":"  it(\"6. Table widget toggle test for text color\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.get(\".t--property-pane-back-btn\").click({\n      force: true\n    });\n    cy.editColumn(\"id\");\n    cy.get(widgetsPage.toggleVerticalAlig).first().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.get(widgetsPage.toggleJsColor).first().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.toggleJsAndUpdate(\"tabledata\", testdata.bindingTextColor);\n    cy.wait(\"@updateLayout\");\n    cy.readTableV2dataValidateCSS(\"0\", \"0\", \"color\", \"rgb(0, 128, 0)\");\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"color\", \"rgb(255, 0, 0)\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/TableV2_Property_ToggleJs_With_Binding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Table widget toggle test for background color","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":120,"column":54,"index":4511},"line":120,"code":"  it(\"7. Table widget toggle test for background color\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.get(\".t--property-pane-back-btn\").click({\n      force: true\n    });\n    cy.editColumn(\"id\");\n    cy.get(widgetsPage.toggleJsColor).first().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.get(widgetsPage.toggleJsBcgColor).first().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.toggleJsAndUpdate(\"tabledata\", testdata.bindingTextColor);\n    cy.wait(\"@updateLayout\");\n    cy.readTableV2dataValidateCSS(\"0\", \"0\", \"background\", \"rgb(0, 128, 0) none repeat scroll 0% 0% / auto padding-box border-box\");\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"background\", \"rgb(255, 0, 0) none repeat scroll 0% 0% / auto padding-box border-box\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/TableV2_Property_ToggleJs_With_Binding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. check the cell styles before and after sorting","suites":["Table Widget V2 condtional formatting to remain consistent"],"updatePoint":{"line":8,"column":55,"index":315},"line":8,"code":"  it(\"1. check the cell styles before and after sorting\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\"); //Check Font weight, font style, and text color before sorting\n\n    cy.readTableV2dataValidateCSS(\"0\", \"1\", \"font-weight\", \"700\");\n    cy.readTableV2dataValidateCSS(\"0\", \"1\", \"font-style\", \"normal\");\n    cy.readTableV2dataValidateCSS(\"0\", \"1\", \"color\", \"rgb(0, 0, 255)\");\n    cy.readTableV2dataValidateCSS(\"1\", \"1\", \"font-weight\", \"400\");\n    cy.readTableV2dataValidateCSS(\"1\", \"1\", \"font-style\", \"italic\");\n    cy.readTableV2dataValidateCSS(\"1\", \"1\", \"color\", \"rgb(255, 0, 0)\");\n    cy.get(\".draggable-header\").contains(\"id\").click({\n      force: true\n    }); //Check Font weight, font style, and text color after sorting\n\n    cy.readTableV2dataValidateCSS(\"3\", \"1\", \"font-weight\", \"700\");\n    cy.readTableV2dataValidateCSS(\"3\", \"1\", \"font-style\", \"normal\");\n    cy.readTableV2dataValidateCSS(\"3\", \"1\", \"color\", \"rgb(0, 0, 255)\");\n    cy.readTableV2dataValidateCSS(\"2\", \"1\", \"font-weight\", \"400\");\n    cy.readTableV2dataValidateCSS(\"2\", \"1\", \"font-style\", \"italic\");\n    cy.readTableV2dataValidateCSS(\"2\", \"1\", \"color\", \"rgb(255, 0, 0)\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/TableV2_Widget__CondtionalFormatting_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Table Widget V2 Functionality with multiple page","suites":["Table Widget V2 and Navigate to functionality validation"],"updatePoint":{"line":16,"column":57,"index":555},"line":16,"code":"  it(\"1. Table Widget V2 Functionality with multiple page\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.widgetText(\"Table1\", widgetsPage.tableWidgetV2, commonlocators.tableV2Inner);\n    cy.testJsontext(\"tabledata\", JSON.stringify(testdata.TablePagination));\n    cy.get(widgetsPage.tableOnRowSelect).click();\n    cy.get(commonlocators.chooseAction).children().contains(\"Navigate to\").click();\n    cy.enterNavigatePageName(pageid);\n    cy.assertPageSave();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/TableV2Widgets_NavigateTo_Validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Create MyPage and valdiate if its successfully created","suites":["Table Widget V2 and Navigate to functionality validation"],"updatePoint":{"line":25,"column":63,"index":1041},"line":25,"code":"  it(\"2. Create MyPage and valdiate if its successfully created\", function () {\n    cy.Createpage(pageid);\n    cy.addDsl(dsl2); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500);\n    cy.CheckAndUnfoldEntityItem(\"PAGES\");\n    cy.get(`.t--entity-name:contains(\"${pageid}\")`).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/TableV2Widgets_NavigateTo_Validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Validate NavigateTo Page functionality ","suites":["Table Widget V2 and Navigate to functionality validation"],"updatePoint":{"line":33,"column":48,"index":1354},"line":33,"code":"  it(\"3. Validate NavigateTo Page functionality \", function () {\n    cy.get(`.t--entity-name:contains(\"Page1\")`).should(\"be.visible\").click({\n      force: true\n    });\n    cy.wait(2000);\n    cy.PublishtheApp();\n    cy.get(widgetsPage.chartWidget).should(\"not.exist\");\n    cy.isSelectRow(1);\n    cy.get(widgetsPage.chartWidget).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/TableV2Widgets_NavigateTo_Validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table Widget Functionality with multiple page","suites":["Table Widget and Navigate to functionality validation"],"updatePoint":{"line":16,"column":51,"index":544},"line":16,"code":"  it(\"Table Widget Functionality with multiple page\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.widgetText(\"Table1\", widgetsPage.tableWidget, commonlocators.tableInner);\n    cy.testJsontext(\"tabledata\", JSON.stringify(testdata.TablePagination));\n    cy.get(widgetsPage.tableOnRowSelect).click();\n    cy.get(commonlocators.chooseAction).children().contains(\"Navigate to\").click();\n    cy.enterNavigatePageName(pageid);\n    cy.assertPageSave();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/TableWidgets_NavigateTo_Validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Create MyPage and valdiate if its successfully created","suites":["Table Widget and Navigate to functionality validation"],"updatePoint":{"line":25,"column":60,"index":1021},"line":25,"code":"  it(\"Create MyPage and valdiate if its successfully created\", function () {\n    cy.Createpage(pageid);\n    cy.addDsl(dsl2); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500);\n    cy.CheckAndUnfoldEntityItem(\"PAGES\");\n    cy.get(`.t--entity-name:contains(\"${pageid}\")`).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/TableWidgets_NavigateTo_Validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate NavigateTo Page functionality ","suites":["Table Widget and Navigate to functionality validation"],"updatePoint":{"line":33,"column":45,"index":1331},"line":33,"code":"  it(\"Validate NavigateTo Page functionality \", function () {\n    cy.get(`.t--entity-name:contains(\"Page1\")`).should(\"be.visible\").click({\n      force: true\n    });\n    cy.wait(2000);\n    cy.PublishtheApp();\n    cy.get(widgetsPage.chartWidget).should(\"not.exist\");\n    cy.isSelectRow(1);\n    cy.get(widgetsPage.chartWidget).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/TableWidgets_NavigateTo_Validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Text-Table Binding Functionality For Id","suites":["Text-Table Binding Functionality"],"updatePoint":{"line":18,"column":45,"index":576},"line":18,"code":"  it(\"Text-Table Binding Functionality For Id\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    /**\n     * @param(Index)  Provide index value to select the row.\n     */\n\n    cy.isSelectRow(1);\n    cy.openPropertyPane(\"textwidget\");\n    cy.testJsontext(\"text\", \"{{Table1.selectedRow.id}}\");\n    /**\n     * @param{Row Index} Provide the row index\n     * @param(Column Index) Provide column index\n     */\n\n    cy.readTabledata(\"1\", \"0\").then(tabData => {\n      const tabValue = tabData;\n      cy.get(commonlocators.TextInside).should(\"have.text\", tabValue);\n      cy.get(commonlocators.evaluatedTypeTitle).first().find(\"span\").click();\n      cy.EvaluateDataType(\"string\");\n      cy.validateEvaluatedValue(tabValue);\n      cy.PublishtheApp();\n      cy.isSelectRow(1);\n      cy.readTabledataPublish(\"1\", \"0\").then(tabDataP => {\n        const tabValueP = tabDataP;\n        cy.get(commonlocators.TextInside).should(\"have.text\", tabValueP);\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/TextTable_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Text-Table Binding Functionality For Email","suites":["Text-Table Binding Functionality"],"updatePoint":{"line":46,"column":48,"index":1546},"line":46,"code":"  it(\"Text-Table Binding Functionality For Email\", function () {\n    cy.get(publish.backToEditor).click();\n    cy.isSelectRow(2);\n    cy.openPropertyPane(\"textwidget\");\n    cy.testJsontext(\"text\", \"{{Table1.selectedRow.email}}\");\n    /**\n     * @param{Row Index} Provide the row index\n     * @param(Column Index) Provide column index\n     */\n\n    cy.readTabledata(\"2\", \"1\").then(tabData => {\n      const tabValue = tabData;\n      cy.get(commonlocators.TextInside).should(\"have.text\", tabValue);\n      cy.get(commonlocators.evaluatedTypeTitle).first().find(\"span\").click();\n      cy.EvaluateDataType(\"string\");\n      cy.validateEvaluatedValue(tabValue);\n      cy.PublishtheApp();\n      cy.isSelectRow(2);\n      cy.readTabledataPublish(\"2\", \"1\").then(tabDataP => {\n        const tabValueP = tabDataP;\n        cy.get(commonlocators.TextInside).should(\"have.text\", tabValueP);\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/TextTable_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Text-Table Binding Functionality For Total Length","suites":["Text-Table Binding Functionality"],"updatePoint":{"line":70,"column":55,"index":2450},"line":70,"code":"  it(\"Text-Table Binding Functionality For Total Length\", function () {\n    cy.get(publish.backToEditor).click();\n    cy.openPropertyPane(\"textwidget\");\n    cy.testJsontext(\"text\", \"{{Table1.pageSize}}\");\n    cy.get(commonlocators.TableRow).find(\".tr\").then(listing => {\n      const listingCount = listing.length.toString();\n      cy.get(commonlocators.TextInside).contains(listingCount);\n      cy.get(commonlocators.evaluatedTypeTitle).first().find(\"span\").click();\n      cy.EvaluateDataType(\"string\");\n      cy.validateEvaluatedValue(listingCount);\n      cy.PublishtheApp();\n      cy.get(publish.tableLength).find(\".tr\").then(listing => {\n        const listingCountP = listing.length.toString();\n        cy.get(commonlocators.TextInside).contains(listingCountP);\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/TextTable_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table Widget Functionality To Verify Default Row Selection is working","suites":["Text-Table Binding Functionality"],"updatePoint":{"line":87,"column":75,"index":3259},"line":87,"code":"  it(\"Table Widget Functionality To Verify Default Row Selection is working\", function () {\n    cy.get(publish.backToEditor).click();\n    cy.openPropertyPane(\"tablewidget\");\n    cy.testJsontext(\"defaultselectedrow\", \"2\");\n    cy.wait(\"@updateLayout\");\n    cy.get(commonlocators.TableRow).find(\".tr.selected-row\").then(listing => {\n      const listingCount = listing.length;\n      expect(listingCount).to.be.equal(1);\n    });\n    cy.openPropertyPane(\"textwidget\");\n    cy.testJsontext(\"text\", \"{{Table1.selectedRow.email}}\");\n    cy.PublishtheApp();\n    cy.readTabledataPublish(\"2\", \"1\").then(tabDataP => {\n      const tabValueP = tabDataP;\n      cy.get(commonlocators.TextInside).should(\"have.text\", tabValueP);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/TextTable_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Text-Table Binding Functionality For Username","suites":["Text-Table Binding Functionality"],"updatePoint":{"line":104,"column":51,"index":3961},"line":104,"code":"  it(\"Text-Table Binding Functionality For Username\", function () {\n    cy.get(publish.backToEditor).click();\n    /**\n     * @param(Index)  Provide index value to select the row.\n     */\n\n    cy.isSelectRow(1);\n    cy.openPropertyPane(\"textwidget\");\n    cy.testJsontext(\"text\", JSON.stringify(this.data.textfun));\n    /**\n     * @param{Row Index} Provide the row index\n     * @param(Column Index) Provide column index\n     */\n\n    cy.readTabledata(\"1\", \"2\").then(tabData => {\n      const tabValue = `\\\"${tabData}\\\"`;\n      cy.get(commonlocators.TextInside).contains(tabValue);\n      cy.get(commonlocators.evaluatedTypeTitle).first().find(\"span\").click();\n      cy.EvaluateDataType(\"string\");\n      cy.validateEvaluatedValue(tabValue);\n      cy.PublishtheApp();\n      cy.isSelectRow(1);\n      cy.readTabledataPublish(\"1\", \"2\").then(tabDataP => {\n        const tabValueP = `\\\"${tabDataP}\\\"`;\n        cy.get(commonlocators.TextInside).contains(tabValueP);\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/TextTable_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Text-Table Binding Functionality For Id","suites":["Text-Table v2 Binding Functionality"],"updatePoint":{"line":16,"column":48,"index":525},"line":16,"code":"  it(\"1. Text-Table Binding Functionality For Id\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    /**\n     * @param(Index)  Provide index value to select the row.\n     */\n\n    cy.isSelectRow(1);\n    cy.openPropertyPane(\"textwidget\");\n    cy.testJsontext(\"text\", \"{{Table1.selectedRow.id}}\");\n    /**\n     * @param{Row Index} Provide the row index\n     * @param(Column Index) Provide column index\n     */\n\n    cy.readTableV2data(\"1\", \"0\").then(tabData => {\n      const tabValue = tabData;\n      cy.get(commonlocators.TextInside).should(\"have.text\", tabValue);\n      cy.get(commonlocators.evaluatedTypeTitle).first().find(\"span\").click();\n      cy.EvaluateDataType(\"string\");\n      cy.validateEvaluatedValue(tabValue);\n      cy.PublishtheApp();\n      cy.isSelectRow(1);\n      cy.readTableV2dataPublish(\"1\", \"0\").then(tabDataP => {\n        const tabValueP = tabDataP;\n        cy.get(commonlocators.TextInside).should(\"have.text\", tabValueP);\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/TextTableV2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Text-Table Binding Functionality For Email","suites":["Text-Table v2 Binding Functionality"],"updatePoint":{"line":44,"column":51,"index":1504},"line":44,"code":"  it(\"2. Text-Table Binding Functionality For Email\", function () {\n    cy.get(publish.backToEditor).click();\n    cy.isSelectRow(2);\n    cy.openPropertyPane(\"textwidget\");\n    cy.testJsontext(\"text\", \"{{Table1.selectedRow.email}}\");\n    /**\n     * @param{Row Index} Provide the row index\n     * @param(Column Index) Provide column index\n     */\n\n    cy.readTableV2data(\"2\", \"1\").then(tabData => {\n      const tabValue = tabData;\n      cy.get(commonlocators.TextInside).should(\"have.text\", tabValue);\n      cy.get(commonlocators.evaluatedTypeTitle).first().find(\"span\").click();\n      cy.EvaluateDataType(\"string\");\n      cy.validateEvaluatedValue(tabValue);\n      cy.PublishtheApp();\n      cy.isSelectRow(2);\n      cy.readTableV2dataPublish(\"2\", \"1\").then(tabDataP => {\n        const tabValueP = tabDataP;\n        cy.get(commonlocators.TextInside).should(\"have.text\", tabValueP);\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/TextTableV2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Text-Table Binding Functionality For Total Length","suites":["Text-Table v2 Binding Functionality"],"updatePoint":{"line":68,"column":58,"index":2415},"line":68,"code":"  it(\"3. Text-Table Binding Functionality For Total Length\", function () {\n    cy.get(publish.backToEditor).click();\n    cy.openPropertyPane(\"textwidget\");\n    cy.testJsontext(\"text\", \"{{Table1.pageSize}}\");\n    cy.get(commonlocators.TableV2Row).find(\".tr\").then(listing => {\n      const listingCount = listing.length.toString();\n      cy.get(commonlocators.TextInside).contains(listingCount);\n      cy.get(commonlocators.evaluatedTypeTitle).first().find(\"span\").click();\n      cy.EvaluateDataType(\"string\");\n      cy.validateEvaluatedValue(listingCount);\n      cy.PublishtheApp();\n      cy.get(publish.tableV2Length).find(\".tr\").then(listing => {\n        const listingCountP = listing.length.toString();\n        cy.get(commonlocators.TextInside).contains(listingCountP);\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/TextTableV2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Table Widget Functionality To Verify Default Row Selection is working","suites":["Text-Table v2 Binding Functionality"],"updatePoint":{"line":85,"column":78,"index":3231},"line":85,"code":"  it(\"4. Table Widget Functionality To Verify Default Row Selection is working\", function () {\n    cy.get(publish.backToEditor).click();\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.testJsontext(\"defaultselectedrow\", \"2\");\n    cy.wait(\"@updateLayout\");\n    cy.get(commonlocators.TableV2Row).find(\".tr.selected-row\").then(listing => {\n      const listingCount = listing.length;\n      expect(listingCount).to.be.equal(1);\n    });\n    cy.openPropertyPane(\"textwidget\");\n    cy.testJsontext(\"text\", \"{{Table1.selectedRow.email}}\");\n    cy.PublishtheApp();\n    cy.readTableV2dataPublish(\"2\", \"1\").then(tabDataP => {\n      const tabValueP = tabDataP;\n      cy.get(commonlocators.TextInside).should(\"have.text\", tabValueP);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/TextTableV2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Text-Table Binding Functionality For Username","suites":["Text-Table v2 Binding Functionality"],"updatePoint":{"line":102,"column":54,"index":3942},"line":102,"code":"  it(\"5. Text-Table Binding Functionality For Username\", function () {\n    cy.get(publish.backToEditor).click();\n    /**\n     * @param(Index)  Provide index value to select the row.\n     */\n\n    cy.isSelectRow(1);\n    cy.openPropertyPane(\"textwidget\");\n    cy.testJsontext(\"text\", JSON.stringify(this.data.textfun));\n    /**\n     * @param{Row Index} Provide the row index\n     * @param(Column Index) Provide column index\n     */\n\n    cy.readTableV2data(\"1\", \"2\").then(tabData => {\n      const tabValue = `\\\"${tabData}\\\"`;\n      cy.get(commonlocators.TextInside).contains(tabValue);\n      cy.get(commonlocators.evaluatedTypeTitle).first().find(\"span\").click();\n      cy.EvaluateDataType(\"string\");\n      cy.validateEvaluatedValue(tabValue);\n      cy.PublishtheApp();\n      cy.isSelectRow(1);\n      cy.readTableV2dataPublish(\"1\", \"2\").then(tabDataP => {\n        const tabValueP = `\\\"${tabDataP}\\\"`;\n        cy.get(commonlocators.TextInside).contains(tabValueP);\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/TextTableV2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create a postgres datasource","suites":["Binding the multiple widgets and validating default data"],"updatePoint":{"line":21,"column":37,"index":659},"line":21,"code":"  it(\"1. Create a postgres datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.PostgreSQL).click();\n    cy.getPluginFormsAndCreateDatasource();\n    cy.fillPostgresDatasourceForm();\n    cy.testSaveDatasource();\n    cy.get(\"@createDatasource\").then(httpResponse => {\n      datasourceName = httpResponse.response.body.data.name;\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Widget_loading_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Create and runs query","suites":["Binding the multiple widgets and validating default data"],"updatePoint":{"line":31,"column":30,"index":1026},"line":31,"code":"  it(\"2. Create and runs query\", () => {\n    cy.NavigateToActiveDSQueryPane(datasourceName);\n    cy.get(queryLocators.templateMenu).click();\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"select * from users limit 10\");\n    cy.EvaluateCurrentValue(\"select * from users limit 10\");\n    cy.runQuery();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Widget_loading_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Button widget test with on action query run","suites":["Binding the multiple widgets and validating default data"],"updatePoint":{"line":38,"column":52,"index":1364},"line":38,"code":"  it(\"3. Button widget test with on action query run\", function () {\n    cy.SearchEntityandOpen(\"Button1\");\n    cy.executeDbQuery(\"Query1\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Widget_loading_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Input widget test with default value update with query data","suites":["Binding the multiple widgets and validating default data"],"updatePoint":{"line":43,"column":68,"index":1630},"line":43,"code":"  it(\"4. Input widget test with default value update with query data\", function () {\n    cy.SearchEntityandOpen(\"Input1\");\n    cy.get(widgetsPage.defaultInput).type(testdata.defaultInputQuery);\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Widget_loading_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Publish App and validate loading functionalty","suites":["Binding the multiple widgets and validating default data"],"updatePoint":{"line":48,"column":54,"index":1919},"line":48,"code":"  it(\"5. Publish App and validate loading functionalty\", function () {\n    cy.PublishtheApp(); //eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(2000);\n    cy.get(widgetsPage.widgetBtn).first().click({\n      force: true\n    });\n    cy.wait(\"@postExecute\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", \"7\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Widget_loading_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Input widget test with default value from table widget","suites":["Binding the multiple widgets and validating default data"],"updatePoint":{"line":19,"column":60,"index":673},"line":19,"code":"  it(\"Input widget test with default value from table widget\", function () {\n    cy.openPropertyPane(\"inputwidgetv2\");\n    cy.testJsontext(\"defaulttext\", testdata.defaultInputWidget + \"}}\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  }); //To be enabled once the single select multi select issues are resolved","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Widgets_Default_data_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Dropdown widget test with default value from table widget","suites":["Binding the multiple widgets and validating default data"],"updatePoint":{"line":25,"column":63,"index":1049},"line":25,"code":"  it(\"Dropdown widget test with default value from table widget\", function () {\n    cy.openPropertyPane(\"selectwidget\");\n    cy.testJsontext(\"options\", JSON.stringify(testdata.deafultDropDownWidget));\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Widgets_Default_data_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"validation of default data displayed in all widgets based on row selected","suites":["Binding the multiple widgets and validating default data"],"updatePoint":{"line":30,"column":79,"index":1375},"line":30,"code":"  it(\"validation of default data displayed in all widgets based on row selected\", function () {\n    cy.isSelectRow(1);\n    cy.readTabledataPublish(\"1\", \"0\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"2736212\");\n      cy.log(\"the value is\" + tabValue);\n      cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", tabValue);\n    });\n    cy.readTabledataPublish(\"1\", \"1\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"lindsay.ferguson@reqres.in\");\n      cy.log(\"the value is\" + tabValue);\n      cy.get(widgetsPage.defaultSingleSelectValue).first().invoke(\"text\").then(text => {\n        const someText = text;\n        expect(someText).to.equal(tabValue);\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Widgets_Default_data_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Cyclic depedancy error message validation","suites":["Binding the multiple input Widget"],"updatePoint":{"line":18,"column":50,"index":589},"line":18,"code":"  it(\"1. Cyclic depedancy error message validation\", function () {\n    cy.openPropertyPane(\"inputwidgetv2\");\n    cy.testJsontext(\"defaulttext\", testdata.defaultMoustacheData + \"}}\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(commonlocators.toastmsg).contains(\"Cyclic dependency\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Widgets_Dependancy_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Binding input widget1 and validating","suites":["Binding the multiple input Widget"],"updatePoint":{"line":24,"column":45,"index":943},"line":24,"code":"  it(\"2. Binding input widget1 and validating\", function () {\n    cy.openPropertyPane(\"inputwidgetv2\");\n    cy.testJsontext(\"defaulttext\", testdata.defaultdata);\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", testdata.defaultdata);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Widgets_Dependancy_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Binding second input widget with first input widget and validating","suites":["Binding the multiple input Widget"],"updatePoint":{"line":30,"column":75,"index":1365},"line":30,"code":"  it(\"3. Binding second input widget with first input widget and validating\", function () {\n    cy.selectEntityByName(\"Input2\");\n    cy.testJsontext(\"defaulttext\", testdata.defaultMoustacheData + \"}}\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.xpath(testdata.input2).invoke(\"attr\", \"value\").should(\"contain\", testdata.defaultdata);\n    cy.PublishtheApp();\n    cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", testdata.defaultdata);\n    cy.xpath(testdata.input2).invoke(\"attr\", \"value\").should(\"contain\", testdata.defaultdata);\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Widgets_Dependancy_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Binding third input widget with first input widget and validating","suites":["Binding the multiple input Widget"],"updatePoint":{"line":40,"column":74,"index":2053},"line":40,"code":"  it(\"4. Binding third input widget with first input widget and validating\", function () {\n    cy.CheckAndUnfoldWidgets();\n    cy.selectEntityByName(\"Input3\");\n    cy.testJsontext(\"defaulttext\", testdata.defaultMoustacheData + \"}}\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.PublishtheApp();\n    cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", testdata.defaultdata);\n    cy.xpath(testdata.input2).invoke(\"attr\", \"value\").should(\"contain\", testdata.defaultdata);\n    cy.get(publish.inputWidget + \" \" + \"input\").last().invoke(\"attr\", \"value\").should(\"contain\", testdata.defaultdata);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Widgets_Dependancy_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Input widget test with default value from table widget","suites":["Binding the multiple input Widget"],"updatePoint":{"line":11,"column":63,"index":375},"line":11,"code":"  it(\"1. Input widget test with default value from table widget\", function () {\n    cy.SearchEntityandOpen(\"Input1\");\n    cy.testJsontext(\"defaulttext\", testdata.defaultInputWidget + \"}}\");\n    cy.wait(2000);\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Widgets_form_input_table_default_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Validation of data displayed in all widgets based on row selected","suites":["Binding the multiple input Widget"],"updatePoint":{"line":17,"column":74,"index":704},"line":17,"code":"  it(\"2. Validation of data displayed in all widgets based on row selected\", function () {\n    cy.isSelectRow(1);\n    cy.readTabledataPublish(\"1\", \"0\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"2736212\");\n      cy.log(\"the value is\" + tabValue);\n      cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", tabValue); //       cy.get(publish.inputWidget + \" \" + \"input\")\n      //         .last()\n      //         .invoke(\"attr\", \"value\")\n      //         .should(\"contain\", tabValue);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Widgets_form_input_table_default_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Input widget test with default value from table widget v2","suites":["Binding the multiple input Widget"],"updatePoint":{"line":11,"column":66,"index":380},"line":11,"code":"  it(\"1. Input widget test with default value from table widget v2\", function () {\n    cy.SearchEntityandOpen(\"Input1\");\n    cy.testJsontext(\"defaulttext\", testdata.defaultInputWidget + \"}}\");\n    cy.wait(2000);\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Widgets_form_input_tableV2_default_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Validation of data displayed in all widgets based on row selected","suites":["Binding the multiple input Widget"],"updatePoint":{"line":17,"column":74,"index":709},"line":17,"code":"  it(\"2. Validation of data displayed in all widgets based on row selected\", function () {\n    cy.isSelectRow(1);\n    cy.readTableV2dataPublish(\"1\", \"0\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"2736212\");\n      cy.log(\"the value is\" + tabValue);\n      cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", tabValue);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Widgets_form_input_tableV2_default_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"publish widget and validate the data displayed in text widget from xmlParser function","suites":["xml2json text"],"updatePoint":{"line":9,"column":91,"index":310},"line":9,"code":"  it(\"publish widget and validate the data displayed in text widget from xmlParser function\", function () {\n    cy.PublishtheApp();\n    cy.get(publish.textWidget).first().should(\"have.text\", `{  \"note\": {    \"to\": \"Tove\",    \"from\": \"Jani\",    \"heading\": \"Reminder\",    \"body\": \"Don't forget me this weekend!\"  }}`);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/xmlParser_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Creates a new Mongo datasource","suites":["Verify setting tab form controls not to have tooltip and tooltip (underline) styles"],"updatePoint":{"line":11,"column":39,"index":478},"line":11,"code":"  it(\"1. Creates a new Mongo datasource\", function () {\n    dataSources.CreateDataSource(\"Mongo\");\n    cy.get(\"@dsName\").then($dsName => {\n      datasourceName = $dsName;\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/BugTests/Bug14987_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. We make sure the label in the settings tab does not have any underline styles","suites":["Verify setting tab form controls not to have tooltip and tooltip (underline) styles"],"updatePoint":{"line":17,"column":86,"index":710},"line":17,"code":"  it(\"2. We make sure the label in the settings tab does not have any underline styles\", function () {\n    cy.NavigateToActiveDSQueryPane(datasourceName);\n    cy.get(queryLocators.querySettingsTab).click();\n    cy.get(\".label-icon-wrapper\").contains(\"Run query on page load\").parent().then($el => {\n      cy.window().then(win => {\n        cy.log($el, win);\n        const after = win.getComputedStyle($el[0], \"::after\");\n        cy.log($el, win, after);\n        const afterBorderBottom = after.getPropertyValue(\"borderBottom\"); //   we expect the border bottom of the element to be an empty string as opposed to \"1px dashed\"\n\n        expect(afterBorderBottom).to.equal(\"\");\n      });\n    });\n    cy.get(\".label-icon-wrapper\").contains(\"Request confirmation before running query\").parent().then($el => {\n      cy.window().then(win => {\n        cy.log($el, win);\n        const after = win.getComputedStyle($el[0], \"::after\");\n        cy.log($el, win, after);\n        const afterBorderBottom = after.getPropertyValue(\"borderBottom\"); //   we expect the border bottom of the element to be an empty string as opposed to \"1px dashed\"\n\n        expect(afterBorderBottom).to.equal(\"\");\n      });\n    });\n    agHelper.ActionContextMenuWithInPane(\"Delete\");\n    dataSources.DeleteDatasouceFromActiveTab(datasourceName, 200);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/BugTests/Bug14987_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Preserves parenthesis in user's code","suites":["Correctly parses JS Function"],"updatePoint":{"line":23,"column":45,"index":892},"line":23,"code":"  it(\"1. Preserves parenthesis in user's code\", () => {\n    const JS_OBJECT_BODY = `export default{\n        labels: {\n            filterText: \"Expected result\"\n        },\n            testFun: (searchText)=>{\n                const filterText = searchText ?? (this.labels?.filterText + \"s\" || '');\n  \treturn filterText;\n            }\n        }\n        `;\n    jsEditor.CreateJSObject(JS_OBJECT_BODY, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true\n    }); // confirm there is no parse error\n\n    jsEditor.AssertParseError(false, false); // Wait for parsing to be complete\n\n    agHelper.Sleep(2000); // run\n\n    agHelper.GetNClick(jsEditor._runButton); // confirm there is no function execution error\n\n    jsEditor.AssertParseError(false, false);\n    cy.contains(\"Expected results\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/BugTests/Bug15283_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"2. TC 1970 - Outputs expected result","suites":["Correctly parses JS Function"],"updatePoint":{"line":50,"column":42,"index":1746},"line":50,"code":"  it(\"2. TC 1970 - Outputs expected result\", () => {\n    const getJSObjectBody = expression => `export default{\n     myFun1: ()=>{\n      const result = ${expression};\n      return result;\n     }\n    } \n    `;\n\n    const expression1 = `null ?? (TreeSelect1.selectedOptionLabel || undefined)`;\n    const expression2 = `null ?? (TreeSelect1.selectedOptionLabel && undefined)`;\n    const expression3 = `!null ?? (!TreeSelect1.selectedOptionLabel || !undefined)`;\n    const expression4 = `null ?? (TreeSelect1.selectedOptionLabel.unknown || undefined)`;\n    const expression5 = `null ?? (null || TreeSelect1.selectedOptionLabel + \" hi\")`;\n    const expression6 = `null ?? (TreeSelect1.selectedOptionLabel || \"hi\")`;\n    const expression7 = `null ?? (!TreeSelect1.selectedOptionLabel + \" that\" || \"hi\")`;\n    const expression8 = `null ?? (TreeSelect1.selectedOptionLabel && \"hi\")`;\n    const expression9 = `null ?? (TreeSelect1.selectedOptionLabel && undefined)`;\n    const expression10 = `null ?? (!TreeSelect1.selectedOptionLabel && \"hi\")`;\n    const expression11 = `(null || !TreeSelect1.selectedOptionLabel) ?? TreeSelect1.selectedOptionLabel.unknown`;\n    const expression12 = `(null && !TreeSelect1.selectedOptionLabel) ?? \"hi\"`;\n    const expression13 = `(true || \"universe\") ?? \"hi\"`;\n    const expression14 = `null ?? TreeSelect1.selectedOptionLabel || undefined`;\n    const expression15 = `null ?? TreeSelect1.selectedOptionLabel && undefined`;\n    const expression16 = `!null ?? !TreeSelect1.selectedOptionLabel || !undefined`;\n    const expression17 = `null ?? TreeSelect1.selectedOptionLabel || undefined`;\n    assertLintErrorAndOutput(getJSObjectBody(expression1), false, \"B\");\n    assertLintErrorAndOutput(getJSObjectBody(expression2), false, \"B\");\n    assertLintErrorAndOutput(getJSObjectBody(expression3), false, \"true\");\n    assertLintErrorAndOutput(getJSObjectBody(expression4), false, \"undefined\");\n    assertLintErrorAndOutput(getJSObjectBody(expression5), false, \"B hi\");\n    assertLintErrorAndOutput(getJSObjectBody(expression6), false, \"hi\");\n    assertLintErrorAndOutput(getJSObjectBody(expression7), false, \"false that\");\n    assertLintErrorAndOutput(getJSObjectBody(expression8), false, \"hi\");\n    assertLintErrorAndOutput(getJSObjectBody(expression9), false, \"hi\");\n    assertLintErrorAndOutput(getJSObjectBody(expression10), false, \"hi\");\n    assertLintErrorAndOutput(getJSObjectBody(expression11), false, \"false\");\n    assertLintErrorAndOutput(getJSObjectBody(expression12), false, \"hi\");\n    assertLintErrorAndOutput(getJSObjectBody(expression13), false, \"true\");\n    assertLintErrorAndOutput(getJSObjectBody(expression14), true, undefined);\n    assertLintErrorAndOutput(getJSObjectBody(expression15), true, undefined);\n    assertLintErrorAndOutput(getJSObjectBody(expression16), true, undefined);\n    assertLintErrorAndOutput(getJSObjectBody(expression17), true, undefined);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/BugTests/Bug15283_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"Bug 9334: The Select widget value is sent as null when user switches between the pages","suites":["Generate New CRUD Page Inside from entity explorer"],"updatePoint":{"line":14,"column":92,"index":713},"line":14,"code":"  it(\"Bug 9334: The Select widget value is sent as null when user switches between the pages\", () => {\n    cy.NavigateToHome();\n    cy.get(homePage.createNew).first().click({\n      force: true\n    });\n    cy.wait(\"@createNewApplication\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.PostgreSQL).click({\n      force: true\n    });\n    cy.fillPostgresDatasourceForm();\n    cy.generateUUID().then(UUID => {\n      datasourceName = `PostgresSQL NewPage ${UUID}`;\n      cy.renameDatasource(datasourceName);\n      cy.wrap(datasourceName).as(\"dSName\");\n    });\n    cy.testSaveDatasource(); //Create Dummy Page2 :\n\n    cy.get(pages.AddPage).first().click();\n    cy.wait(\"@createPage\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201); //Create CRUD page-Page3\n\n    cy.get(pages.AddPage).first().click();\n    cy.wait(\"@createPage\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.get(\"@dSName\").then(dbName => {\n      cy.get(generatePage.generateCRUDPageActionCard).click();\n      cy.get(generatePage.selectDatasourceDropdown).click();\n      cy.get(generatePage.datasourceDropdownOption).contains(dbName).click();\n    });\n    cy.wait(\"@getDatasourceStructure\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(generatePage.selectTableDropdown).click();\n    cy.get(generatePage.dropdownOption).first().click(); //  skip optional search column selection.\n\n    cy.get(generatePage.generatePageFormSubmitBtn).click();\n    cy.wait(\"@replaceLayoutWithCRUDPage\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.wait(\"@getActions\");\n    cy.wait(\"@postExecute\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(\"span:contains('GOT IT')\").click(); //Create CRUD page-Page4\n\n    cy.get(pages.AddPage).first().click();\n    cy.wait(\"@createPage\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.get(\"@dSName\").then(dbName => {\n      cy.get(generatePage.generateCRUDPageActionCard).click();\n      cy.get(generatePage.selectDatasourceDropdown).click();\n      cy.get(generatePage.datasourceDropdownOption).contains(dbName).click();\n    });\n    cy.wait(\"@getDatasourceStructure\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(generatePage.selectTableDropdown).click();\n    cy.get(generatePage.dropdownOption).first().click(); //  skip optional search column selection.\n\n    cy.get(generatePage.generatePageFormSubmitBtn).click();\n    cy.wait(\"@replaceLayoutWithCRUDPage\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.wait(\"@getActions\");\n    cy.wait(\"@postExecute\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(\"span:contains('GOT IT')\").click(); //Navigating between CRUD (Page3) & EmptyPage (Page2):\n\n    cy.selectEntityByName(\"Page2\");\n    cy.wait(2000);\n    cy.selectEntityByName(\"Page3\");\n    cy.VerifyErrorMsgAbsence('The action \"SelectQuery\" has failed.'); //Navigating between CRUD (Page3) & CRUD (Page4):\n\n    cy.selectEntityByName(\"Page4\");\n    cy.wait(2000);\n    cy.selectEntityByName(\"Page3\"); //Back to 3\n\n    cy.VerifyErrorMsgAbsence('The action \"SelectQuery\" has failed.');\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/BugTests/Bug9334_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should test that settings page is accessible to super user","suites":["Admin settings page"],"updatePoint":{"line":43,"column":64,"index":1203},"line":43,"code":"  it(\"should test that settings page is accessible to super user\", () => {\n    cy.LogOut();\n    cy.LoginFromAPI(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.visit(routes.APPLICATIONS);\n    cy.get(\".t--profile-menu-icon\").should(\"be.visible\");\n    cy.get(\".t--profile-menu-icon\").click();\n    cy.get(\".t--admin-settings-menu\").should(\"be.visible\");\n    cy.get(\".t--admin-settings-menu\").click();\n    cy.url().should(\"contain\", routes.GENERAL);\n    cy.wait(\"@getEnvVariables\");\n    cy.LogOut();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should test that settings page is not accessible to normal users","suites":["Admin settings page"],"updatePoint":{"line":55,"column":70,"index":1721},"line":55,"code":"  it(\"should test that settings page is not accessible to normal users\", () => {\n    cy.wait(2000);\n    cy.LoginFromAPI(Cypress.env(\"TESTUSERNAME1\"), Cypress.env(\"TESTPASSWORD1\"));\n    cy.visit(routes.APPLICATIONS);\n    cy.get(\".t--profile-menu-icon\").should(\"be.visible\");\n    cy.get(\".t--profile-menu-icon\").click();\n    cy.get(\".t--admin-settings-menu\").should(\"not.exist\");\n    cy.visit(routes.GENERAL); // non super users are redirected to home page\n\n    cy.url().should(\"contain\", routes.APPLICATIONS);\n    cy.LogOut();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should test that page header is visible","suites":["Admin settings page"],"updatePoint":{"line":67,"column":45,"index":2228},"line":67,"code":"  it(\"should test that page header is visible\", () => {\n    cy.visit(routes.GENERAL);\n    cy.get(adminsSettings.appsmithHeader).should(\"be.visible\");\n    cy.visit(routes.GOOGLE_MAPS);\n    cy.get(adminsSettings.appsmithHeader).should(\"be.visible\");\n    cy.visit(routes.GOOGLEAUTH);\n    cy.get(adminsSettings.appsmithHeader).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should test that clicking on logo should redirect to applications page","suites":["Admin settings page"],"updatePoint":{"line":75,"column":76,"index":2610},"line":75,"code":"  it(\"should test that clicking on logo should redirect to applications page\", () => {\n    cy.visit(routes.GENERAL);\n    cy.get(adminsSettings.appsmithHeader).should(\"be.visible\");\n    cy.get(adminsSettings.appsmithLogo).should(\"be.visible\");\n    cy.get(adminsSettings.appsmithLogo).click();\n    cy.url().should(\"contain\", routes.APPLICATIONS);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should test that settings page is redirected to default tab","suites":["Admin settings page"],"updatePoint":{"line":82,"column":65,"index":2950},"line":82,"code":"  it(\"should test that settings page is redirected to default tab\", () => {\n    cy.LoginFromAPI(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.visit(routes.APPLICATIONS);\n    cy.wait(3000);\n    cy.visit(routes.SETTINGS);\n    cy.url().should(\"contain\", routes.GENERAL);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should test that settings page tab redirects","suites":["Admin settings page"],"updatePoint":{"line":89,"column":50,"index":3221},"line":89,"code":"  it(\"should test that settings page tab redirects\", () => {\n    cy.visit(routes.APPLICATIONS);\n    cy.wait(3000);\n    cy.get(\".t--profile-menu-icon\").click();\n    cy.get(\".t--admin-settings-menu\").click();\n    cy.get(adminsSettings.generalTab).click();\n    cy.url().should(\"contain\", routes.GENERAL);\n    cy.get(adminsSettings.advancedTab).click();\n    cy.url().should(\"contain\", routes.ADVANCED);\n    cy.get(adminsSettings.authenticationTab).click();\n    cy.url().should(\"contain\", routes.AUTHENTICATION);\n    cy.get(adminsSettings.emailTab).click();\n    cy.url().should(\"contain\", routes.EMAIL);\n    cy.get(adminsSettings.googleMapsTab).click();\n    cy.url().should(\"contain\", routes.GOOGLE_MAPS);\n    cy.get(adminsSettings.versionTab).click();\n    cy.url().should(\"contain\", routes.VERSION);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should test save and clear buttons disabled state","suites":["Admin settings page"],"updatePoint":{"line":107,"column":55,"index":4028},"line":107,"code":"  it(\"should test save and clear buttons disabled state\", () => {\n    cy.visit(routes.GENERAL);\n\n    const assertVisibilityAndDisabledState = () => {\n      cy.get(adminsSettings.saveButton).should(\"be.visible\");\n      cy.get(adminsSettings.saveButton).should(\"be.disabled\");\n      cy.get(adminsSettings.resetButton).should(\"be.visible\");\n      cy.get(adminsSettings.resetButton).should(\"be.disabled\");\n    };\n\n    assertVisibilityAndDisabledState();\n    cy.get(adminsSettings.instanceName).should(\"be.visible\");\n    cy.get(adminsSettings.instanceName).clear().type(\"AppsmithInstance\");\n    cy.get(adminsSettings.saveButton).should(\"be.visible\");\n    cy.get(adminsSettings.saveButton).should(\"not.be.disabled\");\n    cy.get(adminsSettings.resetButton).should(\"be.visible\");\n    cy.get(adminsSettings.resetButton).should(\"not.be.disabled\");\n    cy.get(adminsSettings.resetButton).click();\n    assertVisibilityAndDisabledState();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should test saving a setting value","suites":["Admin settings page"],"updatePoint":{"line":127,"column":40,"index":4945},"line":127,"code":"  it(\"should test saving a setting value\", () => {\n    cy.visit(routes.GENERAL);\n    cy.get(adminsSettings.restartNotice).should(\"not.exist\");\n    cy.get(adminsSettings.instanceName).should(\"be.visible\");\n    let instanceName;\n    cy.generateUUID().then(uuid => {\n      instanceName = uuid;\n      cy.get(adminsSettings.instanceName).clear().type(uuid);\n    });\n    cy.get(adminsSettings.saveButton).should(\"be.visible\");\n    cy.get(adminsSettings.saveButton).should(\"not.be.disabled\");\n    cy.intercept(\"POST\", \"/api/v1/admin/restart\", {\n      body: {\n        responseMeta: {\n          status: 200,\n          success: true\n        },\n        data: true\n      }\n    });\n    cy.get(adminsSettings.saveButton).click();\n    cy.wait(\"@postEnvVariables\").then(interception => {\n      expect(interception.request.body.APPSMITH_INSTANCE_NAME).to.equal(instanceName);\n    });\n    cy.get(adminsSettings.restartNotice).should(\"be.visible\");\n    cy.wait(3000);\n    cy.get(adminsSettings.restartNotice).should(\"not.exist\");\n    cy.wait(3000);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should test saving settings value from different tabs","suites":["Admin settings page"],"updatePoint":{"line":156,"column":59,"index":6000},"line":156,"code":"  it(\"should test saving settings value from different tabs\", () => {\n    cy.visit(routes.GENERAL);\n    cy.get(adminsSettings.restartNotice).should(\"not.exist\");\n    cy.get(adminsSettings.instanceName).should(\"be.visible\");\n    let instanceName;\n    cy.generateUUID().then(uuid => {\n      instanceName = uuid;\n      cy.get(adminsSettings.instanceName).clear().type(uuid);\n    });\n    cy.get(adminsSettings.saveButton).should(\"be.visible\");\n    cy.get(adminsSettings.saveButton).should(\"not.be.disabled\");\n    cy.get(adminsSettings.emailTab).click();\n    cy.get(adminsSettings.saveButton).should(\"be.visible\");\n    cy.get(adminsSettings.saveButton).should(\"not.be.disabled\");\n    cy.get(adminsSettings.fromAddress).should(\"be.visible\");\n    let fromAddress;\n    cy.generateUUID().then(uuid => {\n      fromAddress = uuid;\n      cy.get(adminsSettings.fromAddress).clear().type(`${uuid}@appsmith.com`);\n    });\n    cy.intercept(\"POST\", \"/api/v1/admin/restart\", {\n      body: {\n        responseMeta: {\n          status: 200,\n          success: true\n        },\n        data: true\n      }\n    });\n    cy.get(adminsSettings.saveButton).click();\n    cy.wait(\"@postEnvVariables\").then(interception => {\n      expect(interception.request.body.APPSMITH_INSTANCE_NAME).to.equal(instanceName);\n      expect(interception.request.body.APPSMITH_MAIL_FROM).to.equal(`${fromAddress}@appsmith.com`);\n    });\n    cy.get(adminsSettings.restartNotice).should(\"be.visible\");\n    cy.wait(3000);\n    cy.get(adminsSettings.restartNotice).should(\"not.exist\");\n    cy.wait(3000);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should test that instance name and admin emails exist on general tab","suites":["Admin settings page"],"updatePoint":{"line":195,"column":74,"index":7572},"line":195,"code":"  it(\"should test that instance name and admin emails exist on general tab\", () => {\n    cy.visit(routes.GENERAL);\n    cy.get(adminsSettings.instanceName).should(\"be.visible\");\n    cy.get(adminsSettings.adminEmails).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should test that configure link redirects to google maps setup doc","suites":["Admin settings page"],"updatePoint":{"line":200,"column":72,"index":7814},"line":200,"code":"  it(\"should test that configure link redirects to google maps setup doc\", () => {\n    cy.visit(routes.GOOGLE_MAPS);\n    cy.get(adminsSettings.readMoreLink).within(() => {\n      cy.get(\"a\").should(\"have.attr\", \"target\", \"_blank\").invoke(\"removeAttr\", \"target\").click();\n      cy.url().should(\"contain\", GOOGLE_MAPS_SETUP_DOC);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should test that authentication page redirects","suites":["Admin settings page"],"updatePoint":{"line":207,"column":52,"index":8135},"line":207,"code":"  it(\"should test that authentication page redirects\", () => {\n    cy.visit(routes.GENERAL);\n    cy.get(adminsSettings.authenticationTab).click();\n    cy.url().should(\"contain\", routes.AUTHENTICATION);\n    cy.get(adminsSettings.googleButton).click();\n    cy.url().should(\"contain\", routes.GOOGLEAUTH);\n    cy.get(adminsSettings.authenticationTab).click();\n    cy.url().should(\"contain\", routes.AUTHENTICATION);\n    cy.get(adminsSettings.githubButton).click();\n    cy.url().should(\"contain\", routes.GITHUBAUTH);\n    cy.get(adminsSettings.authenticationTab).click();\n    cy.url().should(\"contain\", routes.AUTHENTICATION);\n    cy.get(adminsSettings.formloginButton).click();\n    cy.url().should(\"contain\", routes.FORMLOGIN);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should test that configure link redirects to google signup setup doc","suites":["Admin settings page"],"updatePoint":{"line":222,"column":74,"index":8885},"line":222,"code":"  it(\"should test that configure link redirects to google signup setup doc\", () => {\n    cy.visit(routes.GENERAL);\n    cy.get(adminsSettings.authenticationTab).click();\n    cy.url().should(\"contain\", routes.AUTHENTICATION);\n    cy.get(adminsSettings.googleButton).click();\n    cy.url().should(\"contain\", routes.GOOGLEAUTH);\n    cy.get(adminsSettings.readMoreLink).within(() => {\n      cy.get(\"a\").should(\"have.attr\", \"target\", \"_blank\").invoke(\"removeAttr\", \"target\").click();\n      cy.url().should(\"contain\", GOOGLE_SIGNUP_SETUP_DOC);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should test that configure link redirects to github signup setup doc","suites":["Admin settings page"],"updatePoint":{"line":233,"column":74,"index":9435},"line":233,"code":"  it(\"should test that configure link redirects to github signup setup doc\", () => {\n    cy.visit(routes.GENERAL);\n    cy.get(adminsSettings.authenticationTab).click();\n    cy.url().should(\"contain\", routes.AUTHENTICATION);\n    cy.get(adminsSettings.githubButton).click();\n    cy.url().should(\"contain\", routes.GITHUBAUTH);\n    cy.get(adminsSettings.readMoreLink).within(() => {\n      cy.get(\"a\").should(\"have.attr\", \"target\", \"_blank\").invoke(\"removeAttr\", \"target\").click();\n      cy.url().should(\"contain\", GITHUB_SIGNUP_SETUP_DOC);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should test that read more on version opens up release notes","suites":["Admin settings page"],"updatePoint":{"line":244,"column":66,"index":9977},"line":244,"code":"  it(\"should test that read more on version opens up release notes\", () => {\n    cy.visit(routes.GENERAL);\n    cy.get(adminsSettings.versionTab).click();\n    cy.url().should(\"contain\", routes.VERSION);\n    cy.get(adminsSettings.readMoreLink).within(() => {\n      cy.get(\"a\").click();\n    });\n    cy.wait(2000);\n    cy.get(\".bp3-dialog-container\").should(\"be.visible\");\n    cy.get(\".bp3-dialog-header .bp3-heading\").should(\"be.visible\");\n    cy.get(\".bp3-dialog-header .bp3-heading\").should(\"contain\", \"Product Updates\");\n    cy.get(\".bp3-dialog-close-button\").should(\"be.visible\");\n    cy.get(\"[data-cy='t--product-updates-close-btn']\").should(\"be.visible\");\n    cy.get(\"[data-cy='t--product-updates-ok-btn']\").should(\"be.visible\");\n    cy.get(\".bp3-dialog-close-button\").click();\n    cy.wait(2000);\n    cy.get(\".bp3-dialog-container\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Empty Message validation for Widgets/API/Queries","suites":["Entity explorer API pane related testcases"],"updatePoint":{"line":12,"column":54,"index":537},"line":12,"code":"  it(\"Empty Message validation for Widgets/API/Queries\", function () {\n    homePage.NavigateToHome();\n    homePage.CreateNewWorkspace(\"EmptyMsgCheck\");\n    homePage.CreateAppInWorkspace(\"EmptyMsgCheck\");\n    ee.ExpandCollapseEntity(\"WIDGETS\");\n    agHelper.AssertElementVisible(locator._visibleTextSpan(\"No widget to display\"));\n    agHelper.AssertElementVisible(locator._visibleTextDiv(\"NEW WIDGET\"));\n    ee.ExpandCollapseEntity(\"QUERIES/JS\");\n    agHelper.AssertElementVisible(locator._visibleTextSpan(\"No query/JS to display\"));\n    agHelper.AssertElementVisible(locator._visibleTextDiv(\"NEW QUERY/JS\"));\n    ee.ExpandCollapseEntity(\"DATASOURCES\");\n    agHelper.AssertElementVisible(locator._visibleTextSpan(\"No datasource to display\"));\n    agHelper.AssertElementVisible(locator._visibleTextDiv(\"NEW DATASOURCE\"));\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Entity_Explorer_API_Pane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Move to page / edit API name /properties validation","suites":["Entity explorer API pane related testcases"],"updatePoint":{"line":26,"column":57,"index":1366},"line":26,"code":"  it(\"Move to page / edit API name /properties validation\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"FirstAPI\");\n    cy.log(\"Creation of FirstAPI Action successful\");\n    cy.enterDatasourceAndPath(testdata.baseUrl, testdata.methods);\n    cy.SaveAndRunAPI();\n    cy.validateRequest(\"FirstAPI\", testdata.baseUrl, testdata.methods, testdata.Get);\n    cy.ResponseStatusCheck(testdata.successStatusCode);\n    cy.CheckAndUnfoldEntityItem(\"QUERIES/JS\");\n    ee.ActionContextMenuByEntityName(\"FirstAPI\", \"Show Bindings\");\n    cy.get(apiwidget.propertyList).then(function ($lis) {\n      expect($lis).to.have.length(5);\n      expect($lis.eq(0)).to.contain(\"{{FirstAPI.isLoading}}\");\n      expect($lis.eq(1)).to.contain(\"{{FirstAPI.data}}\");\n      expect($lis.eq(2)).to.contain(\"{{FirstAPI.responseMeta}}\");\n      expect($lis.eq(3)).to.contain(\"{{FirstAPI.run()}}\");\n      expect($lis.eq(4)).to.contain(\"{{FirstAPI.clear()}}\");\n    });\n    cy.get(apiwidget.actionlist).contains(testdata.Get).should(\"be.visible\");\n    cy.Createpage(pageid);\n    cy.get(\".t--entity-name\").contains(\"Page1\").click();\n    ee.ActionContextMenuByEntityName(\"FirstAPI\", \"Edit Name\");\n    cy.EditApiNameFromExplorer(\"SecondAPI\");\n    cy.xpath(apiwidget.popover).last().should(\"be.hidden\").invoke(\"show\").click({\n      force: true\n    });\n    ee.ActionContextMenuByEntityName(\"SecondAPI\", \"Move to page\", pageid);\n    cy.get(\".t--entity-name\").contains(\"SecondAPI\").should(\"exist\");\n    /*To be enabled once the bug is fixed\n    cy.get(apiwidget.propertyList).then(function($lis) {\n      expect($lis).to.have.length(3);\n      expect($lis.eq(0)).to.contain('{{SecondAPI.isLoading}}');\n      expect($lis.eq(1)).to.contain('{{SecondAPI.data}}');\n      expect($lis.eq(2)).to.contain('{{SecondAPI.run()}}');\n    });*/\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Entity_Explorer_API_Pane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create a query with dataSource in explorer, Create new Page","suites":["Entity explorer tests related to copy query"],"updatePoint":{"line":21,"column":68,"index":727},"line":21,"code":"  it(\"1. Create a query with dataSource in explorer, Create new Page\", function () {\n    cy.Createpage(pageid);\n    cy.get(\".t--entity-name\").contains(\"Page1\").click({\n      force: true\n    });\n    cy.wait(2000);\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.PostgreSQL).click();\n    cy.getPluginFormsAndCreateDatasource();\n    cy.fillPostgresDatasourceForm();\n    cy.testSaveDatasource();\n    cy.get(\"@createDatasource\").then(httpResponse => {\n      datasourceName = httpResponse.response.body.data.name;\n      cy.CheckAndUnfoldEntityItem(\"DATASOURCES\");\n      cy.NavigateToActiveDSQueryPane(datasourceName);\n    });\n    cy.get(\"@getPluginForm\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(queryLocators.templateMenu).click();\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"select * from users\");\n    cy.EvaluateCurrentValue(\"select * from users\");\n    cy.get(\".t--action-name-edit-field\").click({\n      force: true\n    });\n    cy.get(\"@createDatasource\").then(httpResponse => {\n      datasourceName = httpResponse.response.body.data.name;\n      cy.CheckAndUnfoldEntityItem(\"QUERIES/JS\");\n      ee.ActionContextMenuByEntityName(\"Query1\", \"Show Bindings\");\n      cy.get(apiwidget.propertyList).then(function ($lis) {\n        expect($lis).to.have.length(5);\n        expect($lis.eq(0)).to.contain(\"{{Query1.isLoading}}\");\n        expect($lis.eq(1)).to.contain(\"{{Query1.data}}\");\n        expect($lis.eq(2)).to.contain(\"{{Query1.responseMeta}}\");\n        expect($lis.eq(3)).to.contain(\"{{Query1.run()}}\");\n        expect($lis.eq(4)).to.contain(\"{{Query1.clear()}}\");\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Entity_Explorer_CopyQuery_RenameDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Copy query in explorer to new page & verify Bindings are copied too","suites":["Entity explorer tests related to copy query"],"updatePoint":{"line":58,"column":76,"index":2387},"line":58,"code":"  it(\"2. Copy query in explorer to new page & verify Bindings are copied too\", function () {\n    cy.get(\".t--entity-name\").contains(\"Page1\").click({\n      force: true\n    });\n    ee.ActionContextMenuByEntityName(\"Query1\", \"Copy to page\", pageid);\n    cy.CheckAndUnfoldEntityItem(\"QUERIES/JS\");\n    cy.get(\".t--entity-name\").contains(\"Query1\").click({\n      force: true\n    });\n    cy.runQuery();\n    ee.ActionContextMenuByEntityName(\"Query1\", \"Show Bindings\");\n    cy.get(apiwidget.propertyList).then(function ($lis) {\n      expect($lis.eq(0)).to.contain(\"{{Query1.isLoading}}\");\n      expect($lis.eq(1)).to.contain(\"{{Query1.data}}\");\n      expect($lis.eq(2)).to.contain(\"{{Query1.responseMeta}}\");\n      expect($lis.eq(3)).to.contain(\"{{Query1.run()}}\");\n      expect($lis.eq(4)).to.contain(\"{{Query1.clear()}}\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Entity_Explorer_CopyQuery_RenameDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Rename datasource in explorer, Delete query and try to Delete datasource","suites":["Entity explorer tests related to copy query"],"updatePoint":{"line":77,"column":81,"index":3222},"line":77,"code":"  it(\"3. Rename datasource in explorer, Delete query and try to Delete datasource\", function () {\n    cy.get(\".t--entity-name\").contains(\"Page1\").click({\n      force: true\n    });\n    cy.wait(2000);\n    cy.generateUUID().then(uid => {\n      updatedName = uid;\n      cy.log(\"complete uid :\" + updatedName);\n      updatedName = uid.replace(/-/g, \"_\").slice(1, 15);\n      cy.log(\"sliced id :\" + updatedName);\n      cy.CheckAndUnfoldEntityItem(\"QUERIES/JS\");\n      cy.EditEntityNameByDoubleClick(datasourceName, updatedName);\n      cy.wait(1000);\n      ee.ActionContextMenuByEntityName(updatedName, \"Delete\", \"Are you sure?\");\n      cy.wait(1000); //This is check to make sure if a datasource is active 409\n\n      cy.wait(\"@deleteDatasource\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 409);\n    });\n    cy.get(\".t--entity-name\").contains(\"Query1\").click();\n    ee.ActionContextMenuByEntityName(\"Query1\", \"Delete\", \"Are you sure?\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Entity_Explorer_CopyQuery_RenameDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Entity explorer datasource structure","suites":["Entity explorer datasource structure"],"updatePoint":{"line":23,"column":45,"index":856},"line":23,"code":"  it(\"1. Entity explorer datasource structure\", function () {\n    cy.NavigateToActiveDSQueryPane(datasourceName);\n    cy.wait(\"@createNewApi\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.get(apiwidget.apiTxt).clear().type(\"MyQuery\", {\n      force: true\n    }).should(\"have.value\", \"MyQuery\").blur();\n    cy.WaitAutoSave();\n    cy.CheckAndUnfoldEntityItem(\"DATASOURCES\");\n    cy.get(\".t--entity-name\").contains(datasourceName).click({\n      force: true\n    });\n    cy.wait(\"@getDatasourceStructure\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200); // cy.get(explorer.datasourceStructure)\n    //   .first()\n    //   .find(explorer.collapse)\n    //   .click();\n    // cy.get(explorer.datasourceColumn)\n    //   .first()\n    //   .click();\n    // cy.get(\".bp3-popover-content\").should(\"be.visible\");\n\n    cy.get(explorer.templateMenuIcon).first().click({\n      force: true\n    });\n    cy.get(\".t--structure-template-menu-popover\").last().contains(\"SELECT\").click({\n      force: true\n    });\n    cy.wait(\"@createNewApi\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.deleteQueryUsingContext();\n    cy.CheckAndUnfoldEntityItem(\"QUERIES/JS\");\n    cy.GlobalSearchEntity(\"MyQuery\");\n    cy.get(`.t--entity-name:contains(MyQuery)`).scrollIntoView().click();\n    cy.deleteQueryUsingContext();\n    cy.get(commonlocators.entityExplorersearch).clear({\n      force: true\n    });\n    cy.deleteDatasource(datasourceName);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Entity_Explorer_Datasource_Structure_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Refresh datasource structure","suites":["Entity explorer datasource structure"],"updatePoint":{"line":60,"column":37,"index":2357},"line":60,"code":"  it(\"2. Refresh datasource structure\", function () {\n    cy.NavigateToActiveDSQueryPane(datasourceName);\n    cy.get(queryLocators.templateMenu).click({\n      force: true\n    }); //cy.GlobalSearchEntity(datasourceName);\n    // cy.get(`.t--entity.datasource:contains(${datasourceName})`)\n    //   .find(explorer.collapse)\n    //   .as(\"datasourceEntityCollapse\");\n    // cy.wait(\"@getDatasourceStructure\").should(\n    //   \"have.nested.property\",\n    //   \"response.body.responseMeta.status\",\n    //   200,\n    // );\n    //cy.get(commonlocators.entityExplorersearch).clear({ force: true });\n\n    const tableName = Math.random().toString(36).replace(/[^a-z]+/g, \"\");\n    cy.typeValueNValidate(`CREATE TABLE public.${tableName} ( ID int );`);\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.request.requestParams.Query.value).to.contain(tableName);\n    }); //cy.wait(8000)\n    // cy.GlobalSearchEntity(datasourceName);\n    // cy.get(\"@datasourceEntityCollapse\")\n    //   .first()\n    //   .click();\n    // cy.xpath(explorer.datsourceEntityPopover)\n    //   .last()\n    //   .click({ force: true });\n\n    ee.ExpandCollapseEntity(\"DATASOURCES\");\n    cy.actionContextMenuByEntityName(datasourceName, \"Refresh\");\n    cy.wait(\"@getDatasourceStructure\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200); // Expand datasource\n    // cy.get(`.t--entity.datasource:contains(${datasourceName})`)\n    //   .find(explorer.collapse)\n    //   .first()\n    //   .click();\n\n    cy.xpath(\"//div[text()='public.\" + tableName + \"']\").should(\"exist\"); // cy.get(explorer.refreshStructure).click({ force: true });\n    // TODO (Akash): Check for new table name to be visible in UI as well\n    // cy.get(explorer.datasourceStructure)\n    //   .contains(`public.${tableName}`)\n    //   .should(\"be.visible\");\n\n    cy.typeValueNValidate(`DROP TABLE public.${tableName}`);\n    cy.runQuery();\n    ee.ExpandCollapseEntity(\"DATASOURCES\");\n    cy.actionContextMenuByEntityName(datasourceName, \"Refresh\");\n    cy.wait(\"@getDatasourceStructure\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.xpath(\"//div[text()='public.\" + tableName + \"']\").should(\"not.exist\");\n    cy.deleteQueryUsingContext();\n    cy.deleteDatasource(datasourceName);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Entity_Explorer_Datasource_Structure_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Drag and drop form widget and validate","suites":["Entity explorer Drag and Drop widgets testcases"],"updatePoint":{"line":17,"column":44,"index":650},"line":17,"code":"  it(\"Drag and drop form widget and validate\", function () {\n    cy.log(\"Login Successful\");\n    cy.reload(); // To remove the rename tooltip\n\n    cy.get(explorer.addWidget).click({\n      force: true\n    });\n    cy.get(commonlocators.entityExplorersearch).should(\"be.visible\");\n    cy.get(commonlocators.entityExplorersearch).clear().type(\"form\");\n    cy.dragAndDropToCanvas(\"formwidget\", {\n      x: 300,\n      y: 80\n    });\n    cy.get(formWidgetsPage.formD).click();\n    /**\n     * @param{Text} Random Text\n     * @param{FormWidget}Mouseover\n     * @param{FormPre Css} Assertion\n     */\n\n    cy.widgetText(\"FormTest\", formWidgetsPage.formWidget, formWidgetsPage.formInner);\n    /**\n     * @param{Text} Random Colour\n     */\n\n    cy.selectColor(\"backgroundcolor\");\n    cy.get(formWidgetsPage.formD).should(\"have.css\", \"background-color\").and(\"eq\", \"rgb(126, 34, 206)\");\n    /**\n     * @param{toggleButton Css} Assert to be checked\n     */\n\n    cy.togglebar(commonlocators.scrollView);\n    cy.get(formWidgetsPage.formD).scrollTo(\"bottom\").should(\"be.visible\");\n    cy.get(explorer.explorerSwitchId).click();\n    cy.PublishtheApp();\n    cy.get(publish.backToEditor).first().click();\n    cy.CheckAndUnfoldEntityItem(\"WIDGETS\");\n    cy.get(`.t--entity-name:contains(FormTest)`).trigger(\"mouseover\");\n    cy.hoverAndClickParticularIndex(1);\n    cy.selectAction(\"Show Bindings\");\n    cy.get(apiwidget.propertyList).then(function ($lis) {\n      expect($lis).to.have.length(3);\n      expect($lis.eq(0)).to.contain(\"{{FormTest.isVisible}}\");\n      expect($lis.eq(1)).to.contain(\"{{FormTest.data}}\");\n      expect($lis.eq(2)).to.contain(\"{{FormTest.hasChanges}}\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Entity_Explorer_DragAndDropWidget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Rename API with table widget name validation test","suites":["Tab widget test"],"updatePoint":{"line":22,"column":55,"index":710},"line":22,"code":"  it(\"Rename API with table widget name validation test\", function () {\n    cy.log(\"Login Successful\");\n    cy.NavigateToAPI_Panel();\n    cy.log(\"Navigation to API Panel screen successful\");\n    cy.CreateApiAndValidateUniqueEntityName(apiName);\n    cy.get(apiwidget.apiTxt).clear().type(tableName, {\n      force: true\n    }).should(\"have.value\", tableName);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Entity_Explorer_Entity_Naming_conflict_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Rename Table widget with api name validation test","suites":["Tab widget test"],"updatePoint":{"line":31,"column":55,"index":1074},"line":31,"code":"  it(\"Rename Table widget with api name validation test\", function () {\n    cy.GlobalSearchEntity(\"Table1\");\n    cy.CheckAndUnfoldEntityItem(\"QUERIES/JS\");\n    cy.RenameEntity(apiName);\n    cy.validateMessage(apiName);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Entity_Explorer_Entity_Naming_conflict_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Expects actions on the same page cannot have identical names","suites":["Api Naming conflict on a page test"],"updatePoint":{"line":8,"column":69,"index":379},"line":8,"code":"  it(\"1. Expects actions on the same page cannot have identical names\", function () {\n    cy.log(\"Login Successful\"); // create an API\n\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(firstApiName); // create another API\n\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(secondApiName);\n    ee.ExpandCollapseEntity(\"QUERIES/JS\", true); // try to rename one of the APIs with an existing API name\n\n    cy.get(`.t--entity-item:contains(${secondApiName})`).within(() => {\n      cy.get(\".t--context-menu\").click({\n        force: true\n      });\n    });\n    cy.selectAction(\"Edit Name\"); //cy.RenameEntity(tabname);\n\n    cy.get(explorer.editEntity).last().type(firstApiName, {\n      force: true\n    }); //cy.RenameEntity(firstApiName);\n\n    cy.validateMessage(firstApiName);\n    cy.ClearSearch();\n    cy.get(`.t--entity-item:contains(${secondApiName})`).within(() => {\n      cy.get(\".t--context-menu\").click({\n        force: true\n      });\n    });\n    cy.deleteActionAndConfirm();\n    cy.get(`.t--entity-item:contains(${firstApiName})`).within(() => {\n      cy.get(\".t--context-menu\").click({\n        force: true\n      });\n    });\n    cy.deleteActionAndConfirm();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Entity_Explorer_Entity_Renaming_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. It expects actions on different pages can have identical names","suites":["Api Naming conflict on different pages test"],"updatePoint":{"line":46,"column":71,"index":1615},"line":46,"code":"  it(\"2. It expects actions on different pages can have identical names\", function () {\n    cy.log(\"Login Successful\"); // create a new API\n\n    cy.CreateAPI(firstApiName);\n    ee.ExpandCollapseEntity(\"QUERIES/JS\", true); // create a new page and an API on that page\n\n    cy.Createpage(\"Page2\");\n    cy.CreateAPI(firstApiName);\n    ee.ExpandCollapseEntity(\"QUERIES/JS\", true);\n    cy.get(\".t--entity-name\").contains(firstApiName).should(\"exist\");\n    cy.get(`.t--entity-item:contains(${firstApiName})`).within(() => {\n      cy.get(\".t--context-menu\").click({\n        force: true\n      });\n    });\n    cy.deleteActionAndConfirm();\n    cy.get(`.t--entity-item:contains(Page2)`).within(() => {\n      cy.get(\".t--context-menu\").click({\n        force: true\n      });\n    });\n    cy.deleteActionAndConfirm();\n    cy.get(`.t--entity-item:contains(${firstApiName})`).within(() => {\n      cy.get(\".t--context-menu\").click({\n        force: true\n      });\n    });\n    cy.deleteActionAndConfirm();\n    cy.wait(1000);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Entity_Explorer_Entity_Renaming_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Expects JS objects and actions to not have identical names on the same page.","suites":["Entity Naming conflict test"],"updatePoint":{"line":78,"column":85,"index":2698},"line":78,"code":"  it(\"3. Expects JS objects and actions to not have identical names on the same page.\", function () {\n    cy.log(\"Login Successful\");\n    ee.ExpandCollapseEntity(\"QUERIES/JS\", true); // create JS object and name it\n\n    cy.createJSObject('return \"Hello World\";');\n    cy.get(`.t--entity-item:contains('JSObject1')`).within(() => {\n      cy.get(\".t--context-menu\").click({\n        force: true\n      });\n    });\n    cy.selectAction(\"Edit Name\");\n    cy.get(explorer.editEntity).last().type(firstApiName, {\n      force: true\n    }).type(\"{enter}\");\n    cy.wait(2000); //for the changed JS name to reflect\n\n    cy.CreateAPI(secondApiName);\n    cy.get(`.t--entity-item:contains(${secondApiName})`).within(() => {\n      cy.get(\".t--context-menu\").click({\n        force: true\n      });\n    });\n    cy.selectAction(\"Edit Name\");\n    cy.get(explorer.editEntity).last().type(firstApiName, {\n      force: true\n    });\n    cy.VerifyPopOverMessage(firstApiName + \" is already being used.\", true);\n    cy.get(\"body\").click(0, 0);\n    cy.wait(2000);\n    cy.get(`.t--entity-item:contains(${firstApiName})`).within(() => {\n      cy.get(\".t--context-menu\").click({\n        force: true\n      });\n    });\n    cy.deleteActionAndConfirm();\n    cy.get(`.t--entity-item:contains(${secondApiName})`).within(() => {\n      cy.get(\".t--context-menu\").click({\n        force: true\n      });\n    });\n    cy.deleteActionAndConfirm();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Entity_Explorer_Entity_Renaming_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Expect tooltip on long names only","suites":["Entity Explorer showing tooltips on long names"],"updatePoint":{"line":9,"column":39,"index":416},"line":9,"code":"  it(\"Expect tooltip on long names only\", function () {\n    // create an API with a short name\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(shortName);\n    ee.ExpandCollapseEntity(\"QUERIES/JS\", true); // assert that a tooltip does not show up during hover\n\n    cy.get(`.t--entity-item:contains(${shortName})`).realHover();\n    cy.get(\".bp3-tooltip > .bp3-popover-content\").should(\"not.exist\"); // reset the hover\n\n    cy.get(\"body\").realHover({\n      position: \"topLeft\"\n    }); // create another API with a long name\n\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(longName); // assert that a tooltip does show up during hover\n\n    cy.get(`.t--entity-item:contains(${longName})`).realHover();\n    cy.get(\".bp3-tooltip > .bp3-popover-content\").should(\"have.text\", longName); // reset the hover\n\n    cy.get(\"body\").realHover({\n      position: \"topLeft\"\n    }); // rename it and ensure the tooltip does not show again\n\n    cy.get(`.t--entity-item:contains(${longName})`).within(() => {\n      cy.get(\".t--context-menu\").click({\n        force: true\n      });\n    });\n    cy.selectAction(\"Edit Name\");\n    cy.get(explorer.editEntity).last().type(alternateName, {\n      force: true\n    }).blur();\n    cy.wait(\"@saveAction\");\n    cy.get(`.t--entity-item:contains(${alternateName})`).realHover();\n    cy.get(\".bp3-tooltip > .bp3-popover-content\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Entity_Explorer_Long_Name_Tooltip_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Add a widget to default page and verify the properties","suites":["Entity explorer tests related to widgets and validation"],"updatePoint":{"line":19,"column":60,"index":719},"line":19,"code":"  it(\"Add a widget to default page and verify the properties\", function () {\n    cy.addDsl(dsl);\n    cy.OpenBindings(\"Text1\");\n    cy.get(explorer.property).last().click({\n      force: true\n    });\n    cy.get(apiwidget.propertyList).then(function ($lis) {\n      expect($lis).to.have.length(2);\n      expect($lis.eq(0)).to.contain(\"{{Text1.isVisible}}\");\n      expect($lis.eq(1)).to.contain(\"{{Text1.text}}\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Entity_Explorer_Multiple_Widgets_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Create another page and add another widget and verify properties","suites":["Entity explorer tests related to widgets and validation"],"updatePoint":{"line":31,"column":70,"index":1152},"line":31,"code":"  it(\"Create another page and add another widget and verify properties\", function () {\n    cy.Createpage(pageid);\n    cy.addDsl(tdsl);\n    cy.openPropertyPane(\"tablewidget\");\n    cy.widgetText(\"Table1\", widgetsPage.tableWidget, commonlocators.tableInner);\n    cy.GlobalSearchEntity(\"Table1\");\n    cy.OpenBindings(\"Table1\");\n    cy.get(explorer.property).last().click({\n      force: true\n    });\n    cy.get(apiwidget.propertyList).then(function ($lis) {\n      expect($lis).to.have.length(13);\n      expect($lis.eq(0)).to.contain(\"{{Table1.selectedRow}}\");\n      expect($lis.eq(1)).to.contain(\"{{Table1.selectedRows}}\");\n      expect($lis.eq(2)).to.contain(\"{{Table1.selectedRowIndices}}\");\n      expect($lis.eq(3)).to.contain(\"{{Table1.triggeredRow}}\");\n      expect($lis.eq(4)).to.contain(\"{{Table1.selectedRowIndex}}\");\n      expect($lis.eq(5)).to.contain(\"{{Table1.tableData}}\");\n      expect($lis.eq(6)).to.contain(\"{{Table1.filteredTableData}}\");\n      expect($lis.eq(7)).to.contain(\"{{Table1.pageNo}}\");\n      expect($lis.eq(8)).to.contain(\"{{Table1.pageSize}}\");\n      expect($lis.eq(9)).to.contain(\"{{Table1.isVisible}}\");\n      expect($lis.eq(10)).to.contain(\"{{Table1.searchText}}\");\n      expect($lis.eq(11)).to.contain(\"{{Table1.totalRecordsCount}}\");\n      expect($lis.eq(12)).to.contain(\"{{Table1.sortOrder}}\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Entity_Explorer_Multiple_Widgets_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Toggle between widgets in different pages using search functionality","suites":["Entity explorer tests related to widgets and validation"],"updatePoint":{"line":58,"column":74,"index":2495},"line":58,"code":"  it(\"Toggle between widgets in different pages using search functionality\", function () {\n    cy.CheckAndUnfoldEntityItem(\"PAGES\");\n    cy.get(\".t--entity-name\").contains(\"Page1\").click({\n      force: true\n    });\n    cy.wait(2000);\n    cy.SearchEntityandOpen(\"Text1\");\n    cy.OpenBindings(\"Text1\");\n    cy.get(explorer.property).last().click({\n      force: true\n    });\n    cy.get(apiwidget.propertyList).then(function ($lis) {\n      expect($lis).to.have.length(2);\n      expect($lis.eq(0)).to.contain(\"{{Text1.isVisible}}\");\n      expect($lis.eq(1)).to.contain(\"{{Text1.text}}\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Entity_Explorer_Multiple_Widgets_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"checks entity explorer visibility on unpin","suites":["Entity explorer tests related to pinning and unpinning"],"updatePoint":{"line":7,"column":48,"index":245},"line":7,"code":"  it(\"checks entity explorer visibility on unpin\", function () {\n    cy.wait(5000);\n    cy.get(\".t--entity-explorer\").should(\"be.visible\");\n    cy.get(\".t--pin-entity-explorer\").click();\n    cy.wait(5000);\n    cy.get(\"[data-testid=widgets-editor]\").click({\n      force: true\n    });\n    cy.wait(3000);\n    cy.get(\".t--entity-explorer\").should(\"not.be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Entity_Explorer_Pin_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"checks entity explorer visibility on pin","suites":["Entity explorer tests related to pinning and unpinning"],"updatePoint":{"line":18,"column":46,"index":611},"line":18,"code":"  it(\"checks entity explorer visibility on pin\", function () {\n    cy.get(\".t--pin-entity-explorer\").click();\n    cy.get(\".t--entity-explorer\").should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Entity_Explorer_Pin_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create a page/moveQuery/rename/delete in explorer","suites":["Entity explorer tests related to query and datasource"],"updatePoint":{"line":23,"column":58,"index":775},"line":23,"code":"  it(\"1. Create a page/moveQuery/rename/delete in explorer\", function () {\n    cy.Createpage(pageid);\n    cy.wait(2000);\n    cy.get(\".t--entity-name\").contains(\"Page1\").click({\n      force: true\n    });\n    cy.wait(2000);\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.PostgreSQL).click();\n    cy.getPluginFormsAndCreateDatasource();\n    cy.fillPostgresDatasourceForm(); // checking that conflicting names are not allowed\n\n    cy.get(\".t--edit-datasource-name\").click();\n    cy.get(\".t--edit-datasource-name input\").clear().type(\"download\", {\n      force: true\n    }).blur();\n    cy.get(\".Toastify\").should(\"contain\", \"Invalid name\"); // checking a valid name\n\n    cy.get(\".t--edit-datasource-name\").click();\n    cy.get(\".t--edit-datasource-name input\").clear().type(datasourceName, {\n      force: true\n    }).should(\"have.value\", datasourceName).blur();\n    cy.testSaveDatasource();\n    cy.NavigateToActiveDSQueryPane(datasourceName);\n    /* eslint-disable */\n\n    cy.wait(2000);\n    cy.NavigateToQueryEditor();\n    cy.CheckAndUnfoldEntityItem(\"DATASOURCES\");\n    cy.contains(\".t--entity-name\", datasourceName).click();\n    cy.get(\".t--edit-datasource-name\").click();\n    cy.get(\".t--edit-datasource-name input\").clear().type(`${datasourceName}new`, {\n      force: true\n    }).blur();\n    cy.contains(commonlocators.entityName, `${datasourceName}new`); // reverting the name\n\n    cy.get(\".t--edit-datasource-name\").click();\n    cy.get(\".t--edit-datasource-name input\").clear().type(`${datasourceName}`, {\n      force: true\n    }).blur(); // going  to the query create page\n\n    cy.CheckAndUnfoldEntityItem(\"QUERIES/JS\");\n    cy.contains(commonlocators.entityName, \"Query1\").click();\n    cy.wait(\"@getPluginForm\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200); // cy.get(queryLocators.templateMenu).click();\n\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"select * from users\");\n    cy.EvaluateCurrentValue(\"select * from users\");\n    cy.get(\".t--action-name-edit-field\").click({\n      force: true\n    });\n    ee.ActionContextMenuByEntityName(\"Query1\", \"Show Bindings\");\n    cy.get(apiwidget.propertyList).then(function ($lis) {\n      expect($lis).to.have.length(5);\n      expect($lis.eq(0)).to.contain(\"{{Query1.isLoading}}\");\n      expect($lis.eq(1)).to.contain(\"{{Query1.data}}\");\n      expect($lis.eq(2)).to.contain(\"{{Query1.responseMeta}}\");\n      expect($lis.eq(3)).to.contain(\"{{Query1.run()}}\");\n      expect($lis.eq(4)).to.contain(\"{{Query1.clear()}}\");\n    });\n    ee.ActionContextMenuByEntityName(\"Query1\", \"Edit Name\");\n    cy.EditApiNameFromExplorer(\"MyQuery\");\n    ee.ActionContextMenuByEntityName(\"MyQuery\", \"Move to page\", pageid);\n    cy.get(\".t--entity-name\").contains(\"MyQuery\").click();\n    cy.wait(2000);\n    cy.runQuery(); //cy.deleteQuery();\n\n    cy.deleteQueryUsingContext();\n    cy.get(commonlocators.entityExplorersearch).clear({\n      force: true\n    });\n    cy.wait(500);\n    cy.NavigateToQueryEditor();\n    cy.get(pages.integrationActiveTab).should(\"be.visible\").click({\n      force: true\n    });\n    cy.contains(\".t--datasource-name\", datasourceName).click();\n    cy.get(\".t--delete-datasource\").click();\n    cy.get(\".t--delete-datasource\").contains(\"Are you sure?\").click();\n    cy.wait(\"@deleteDatasource\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Entity_Explorer_Query_Datasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Tab Widget Functionality To rename Tabs from entity explorer","suites":["Tab widget test"],"updatePoint":{"line":21,"column":66,"index":687},"line":21,"code":"  it(\"Tab Widget Functionality To rename Tabs from entity explorer\", function () {\n    cy.GlobalSearchEntity(\"Tab1\");\n    cy.hoverAndClickParticularIndex(2);\n    cy.selectAction(\"Edit Name\"); //cy.RenameEntity(tabname);\n\n    cy.get(explorer.editEntity).last().type(tabname, {\n      force: true\n    }); //cy.RenameEntity(tabname);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Entity_Explorer_Tab_rename_Delete_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Tab name validation in properties and widget ","suites":["Tab widget test"],"updatePoint":{"line":30,"column":51,"index":1008},"line":30,"code":"  it(\"Tab name validation in properties and widget \", function () {\n    cy.openPropertyPane(\"tabswidget\");\n    cy.closePropertyPane();\n    cy.get(Layoutpage.tabWidget).contains(tabname).click({\n      force: true\n    }).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Entity_Explorer_Tab_rename_Delete_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Tab Widget Functionality To delete Tabs from entity explorer","suites":["Tab widget test"],"updatePoint":{"line":37,"column":66,"index":1270},"line":37,"code":"  it(\"Tab Widget Functionality To delete Tabs from entity explorer\", function () {\n    cy.GlobalSearchEntity(\"Tab2\");\n    cy.hoverAndClickParticularIndex(3);\n    cy.selectAction(\"Edit Name\"); //cy.RenameEntity(tabname);\n\n    cy.get(explorer.editEntity).last().type(tabname, {\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(3000);\n    cy.validateMessage(tabname);\n    cy.deleteEntityWithoutConfirmation();\n    cy.get(commonlocators.entityExplorersearch).clear({\n      force: true\n    }).type(\"Tab2\", {\n      force: true\n    });\n    cy.get(commonlocators.entitySearchResult.concat(\"Tab2\").concat(\"')\")).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Entity_Explorer_Tab_rename_Delete_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Drag and drop form widget and validate copy widget via toast message","suites":["Test Suite to validate copy/delete/undo functionalites"],"updatePoint":{"line":15,"column":74,"index":581},"line":15,"code":"  it(\"Drag and drop form widget and validate copy widget via toast message\", function () {\n    cy.openPropertyPane(\"formwidget\");\n    cy.widgetText(\"FormTest\", formWidgetsPage.formWidget, formWidgetsPage.formInner);\n    cy.get(commonlocators.copyWidget).click(); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500);\n    cy.get(commonlocators.toastBody).first().contains(\"Copied\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Entity_Explorer_Widgets_Copy_Delete_Undo_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Delete Widget from sidebar and Undo action validation","suites":["Test Suite to validate copy/delete/undo functionalites"],"updatePoint":{"line":23,"column":59,"index":978},"line":23,"code":"  it(\"Delete Widget from sidebar and Undo action validation\", function () {\n    cy.GlobalSearchEntity(\"WIDGETS\");\n    cy.get(\".t--entity-name\").contains(\"FormTest\").trigger(\"mouseover\");\n    cy.hoverAndClickParticularIndex(1);\n    cy.selectAction(\"Show Bindings\");\n    cy.get(apiwidget.propertyList).then(function ($lis) {\n      expect($lis).to.have.length(3);\n      expect($lis.eq(0)).to.contain(\"{{FormTest.isVisible}}\");\n      expect($lis.eq(1)).to.contain(\"{{FormTest.data}}\");\n      expect($lis.eq(2)).to.contain(\"{{FormTest.hasChanges}}\");\n    });\n    cy.get(\".t--entity-name\").contains(\"FormTest\").trigger(\"mouseover\");\n    cy.hoverAndClickParticularIndex(1);\n    cy.selectAction(\"Delete\"); //cy.DeleteWidgetFromSideBar();\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500);\n    cy.get(apiwidget.propertyList).should(\"not.exist\");\n    /*\n    To be enabled once widget delete click works\n    cy.get('.t--delete-widget')\n      .trigger(\"mouseover\")\n      .click({ force: true });\n      */\n\n    cy.get(\"body\").type(`{${modifierKey}}z`);\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500);\n    cy.get(\".t--entity-name\").contains(\"FormTest\").trigger(\"mouseover\");\n    cy.hoverAndClickParticularIndex(1);\n    cy.selectAction(\"Show Bindings\");\n    cy.get(apiwidget.propertyList).then(function ($lis) {\n      expect($lis).to.have.length(3);\n      expect($lis.eq(0)).to.contain(\"{{FormTest.isVisible}}\");\n      expect($lis.eq(1)).to.contain(\"{{FormTest.data}}\");\n      expect($lis.eq(2)).to.contain(\"{{FormTest.hasChanges}}\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Entity_Explorer_Widgets_Copy_Delete_Undo_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Drag and drop form widget and validate copy widget via toast message","suites":["Test Suite to validate copy/delete/undo functionalites"],"updatePoint":{"line":16,"column":74,"index":626},"line":16,"code":"  it(\"Drag and drop form widget and validate copy widget via toast message\", function () {\n    const modifierKey = Cypress.platform === \"darwin\" ? \"meta\" : \"ctrl\";\n    cy.openPropertyPane(\"formwidget\");\n    cy.widgetText(\"FormTest\", formWidgetsPage.formWidget, formWidgetsPage.formInner);\n    cy.get(\"body\").click();\n    cy.get(\"body\").type(`{${modifierKey}}c`); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500);\n    cy.get(commonlocators.toastBody).first().contains(\"Copied\").click();\n    cy.get(\"body\").type(`{${modifierKey}}v`, {\n      force: true\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(\"body\").type(\"{del}\", {\n      force: true\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(\"body\").type(`{${modifierKey}}z`);\n    ee.ExpandCollapseEntity(\"WIDGETS\");\n    ee.ExpandCollapseEntity(\"FormTest\");\n    ee.ActionContextMenuByEntityName(\"FormTestCopy\", \"Show Bindings\");\n    cy.get(apiwidget.propertyList).then(function ($lis) {\n      expect($lis).to.have.length(3);\n      expect($lis.eq(0)).to.contain(\"{{FormTestCopy.isVisible}}\");\n      expect($lis.eq(1)).to.contain(\"{{FormTestCopy.data}}\");\n      expect($lis.eq(2)).to.contain(\"{{FormTestCopy.hasChanges}}\");\n      cy.contains(\"FormTestCopy\");\n      cy.get($lis.eq(1)).contains(\"{{FormTestCopy.data}}\").click({\n        force: true\n      });\n      cy.get(\".bp3-input\").first().click({\n        force: true\n      });\n      cy.get(\".bp3-input\").first().type(`{${modifierKey}}v`, {\n        force: true\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Entity_Explorer_Widgets_Copy_Paste_Delete_Undo_Keyboard_Event_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Widget edit/delete/copy to clipboard validation","suites":["Entity explorer tests related to widgets and validation"],"updatePoint":{"line":11,"column":53,"index":399},"line":11,"code":"  it(\"Widget edit/delete/copy to clipboard validation\", function () {\n    cy.CheckAndUnfoldEntityItem(\"WIDGETS\");\n    cy.selectEntityByName(\"Container4\");\n    cy.get(\".t--entity-collapse-toggle\").eq(4).click({\n      force: true\n    });\n    cy.get(\".t--entity-name\").contains(\"Text1\").trigger(\"mouseover\");\n    cy.hoverAndClickParticularIndex(4);\n    cy.selectAction(\"Show Bindings\");\n    cy.get(apiwidget.propertyList).then(function ($lis) {\n      expect($lis).to.have.length(2);\n      expect($lis.eq(0)).to.contain(\"{{Text1.isVisible}}\");\n      expect($lis.eq(1)).to.contain(\"{{Text1.text}}\");\n    });\n    cy.get(\".t--entity-name\").contains(\"Text1\").trigger(\"mouseover\");\n    cy.hoverAndClickParticularIndex(4);\n    cy.selectAction(\"Edit Name\");\n    cy.EditApiNameFromExplorer(\"TextUpdated\");\n    cy.get(\".t--entity-name\").contains(\"TextUpdated\").trigger(\"mouseover\");\n    cy.hoverAndClickParticularIndex(4);\n    cy.selectAction(\"Show Bindings\");\n    cy.get(apiwidget.propertyList).then(function ($lis) {\n      expect($lis).to.have.length(2);\n      expect($lis.eq(0)).to.contain(\"{{TextUpdated.isVisible}}\");\n      expect($lis.eq(1)).to.contain(\"{{TextUpdated.text}}\");\n    });\n    cy.DeleteWidgetFromSideBar();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Entity_Explorer_Widgets_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Hide page test ","suites":["Hide / Show page test functionality"],"updatePoint":{"line":8,"column":21,"index":271},"line":8,"code":"  it(\"Hide page test \", function () {\n    cy.Createpage(pageOne);\n    cy.Createpage(pageTwo);\n    cy.get(\".t--entity-name\").contains(\"Page1\").click({\n      force: true\n    });\n    cy.get(`.t--entity-item:contains('MyPage2')`).within(() => {\n      cy.get(\".t--context-menu\").click({\n        force: true\n      });\n    });\n    cy.get(pages.hidePage).click({\n      force: true\n    });\n    cy.ClearSearch();\n    cy.PublishtheApp();\n    cy.get(\".t--page-switch-tab\").should(\"have.length\", 2);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Hide_Page_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Show page test ","suites":["Hide / Show page test functionality"],"updatePoint":{"line":26,"column":21,"index":764},"line":26,"code":"  it(\"Show page test \", function () {\n    cy.get(publish.backToEditor).click();\n    cy.get(`.t--entity-name:contains('MyPage2')`).trigger(\"mouseover\");\n    cy.hoverAndClick();\n    cy.get(pages.showPage).click({\n      force: true\n    });\n    cy.ClearSearch();\n    cy.PublishtheApp();\n    cy.get(\".t--page-switch-tab\").should(\"have.length\", 3);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Hide_Page_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Clone page","suites":["Pages"],"updatePoint":{"line":10,"column":16,"index":350},"line":10,"code":"  it(\"Clone page\", function () {\n    cy.wait(20000);\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(apiName);\n    cy.get(\".t--entity-name:contains(Page1)\").trigger(\"mouseover\").click({\n      force: true\n    });\n    cy.xpath(apiwidget.popover).first().should(\"be.hidden\").invoke(\"show\").click({\n      force: true\n    });\n    cy.get(pages.clonePage).click({\n      force: true\n    });\n    cy.wait(\"@clonePage\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201); // to check if apis are cloned\n\n    cy.get(\".t--entity-name:contains(Page1)\").its(\"length\").should(\"be.gt\", 1);\n    cy.get(\".t--entity-name:contains(Page1 Copy)\").click({\n      force: true\n    });\n    cy.get(\".t--entity-name:contains(Page1 Copy)\").its(\"length\").should(\"eq\", 1);\n    cy.get(explorerLocators.addQuery).last().click();\n    cy.CheckAndUnfoldEntityItem(\"QUERIES/JS\");\n    cy.get(`.t--entity-name:contains(${apiName})`).should(\"have.length\", 1);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Pages_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Creates a page with long name and checks if it shows tooltip on hover","suites":["Pages"],"updatePoint":{"line":34,"column":75,"index":1354},"line":34,"code":"  it(\"Creates a page with long name and checks if it shows tooltip on hover\", () => {\n    cy.get(\"body\").click(0, 0);\n    cy.Createpage(veryLongPageName);\n    cy.PublishtheApp();\n    cy.get(`.t--page-switch-tab:contains(${veryLongPageName})`).trigger(\"mouseover\");\n    cy.get(\".bp3-popover-content\").should($x => {\n      expect($x).contain(veryLongPageName);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Pages_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checks if 404 is showing correct route","suites":["Pages"],"updatePoint":{"line":43,"column":44,"index":1696},"line":43,"code":"  it(\"Checks if 404 is showing correct route\", () => {\n    cy.visit(\"/route-that-does-not-exist\");\n    cy.get(\".bold-text\").should($x => {\n      expect($x).contain(\"Page not found\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Pages_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Update a user's name","suites":["Update a user's name"],"updatePoint":{"line":4,"column":29,"index":147},"line":4,"code":"  it(\"1. Update a user's name\", function () {\n    cy.get(homePage.profileMenu).click();\n    cy.get(\".t--edit-profile\").click({\n      force: true\n    });\n    cy.generateUUID().then(uid => {\n      username = uid;\n      cy.get(\"[data-cy=t--display-name]\").clear();\n      cy.get(\"[data-cy=t--display-name]\").click().type(username); // Waiting as the input onchange has a debounce\n      // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n      cy.wait(2000);\n      cy.get(\".t--back\").click();\n      cy.reload();\n      cy.get(homePage.profileMenu).click();\n      cy.get(\".t--user-name\").contains(username);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/UpdateUsersName_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Validate email address and Reset pwd","suites":["Update a user's name"],"updatePoint":{"line":22,"column":45,"index":787},"line":22,"code":"  it(\"2. Validate email address and Reset pwd\", function () {\n    cy.intercept(\"POST\", \"/api/v1/users/forgotPassword\", {\n      fixture: \"resetPassword.json\"\n    }).as(\"resetPwd\");\n    cy.get(\".t--edit-profile\").click({\n      force: true\n    }); // Waiting as the input onchange has a debounce\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(2000);\n    cy.get(\".react-tabs .cs-text\").last().invoke(\"text\").then(text => {\n      const someText = text;\n      expect(someText).to.equal(Cypress.env(\"USERNAME\"));\n    });\n    cy.get(\".react-tabs a\").last().contains(\"Reset Password\").click();\n    cy.wait(\"@resetPwd\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/UpdateUsersName_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create an app with Query1 and JSObject1, connect it to git","suites":["Git discard changes:"],"updatePoint":{"line":18,"column":67,"index":648},"line":18,"code":"  it(\"1. Create an app with Query1 and JSObject1, connect it to git\", () => {\n    // Create new postgres datasource\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.PostgreSQL).click();\n    cy.getPluginFormsAndCreateDatasource();\n    cy.fillPostgresDatasourceForm();\n    cy.testSaveDatasource();\n    cy.get(\"@createDatasource\").then(httpResponse => {\n      datasourceName = httpResponse.response.body.data.name;\n      cy.get(datasource.datasourceCard).contains(datasourceName).scrollIntoView().should(\"be.visible\").closest(datasource.datasourceCard).within(() => {\n        cy.get(datasource.createQuery).click();\n      });\n    }); // Create new postgres query\n\n    cy.get(queryLocators.queryNameField).type(`${query1}`);\n    cy.get(queryLocators.switch).last().click({\n      force: true\n    });\n    cy.get(queryLocators.templateMenu).click();\n    cy.get(queryLocators.query).click({\n      force: true\n    });\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"SELECT * FROM users ORDER BY id LIMIT 10;\", {\n      force: true,\n      parseSpecialCharSequences: false\n    });\n    cy.WaitAutoSave();\n    cy.runQuery();\n    cy.CheckAndUnfoldEntityItem(\"PAGES\");\n    cy.wait(1000);\n    cy.get(\".t--entity-item:contains(Page1)\").first().click();\n    cy.wait(\"@getPage\"); // bind input widget to postgres query on page1\n\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"inputwidgetv2\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(\".t--widget-inputwidgetv2\").should(\"exist\");\n    cy.EnableAllCodeEditors();\n    cy.get(dynamicInputLocators.input).eq(1).click({\n      force: true\n    }).type(`{{${query1}.data[0].name}}`, {\n      parseSpecialCharSequences: false\n    });\n    cy.wait(2000);\n    cy.CheckAndUnfoldEntityItem(\"PAGES\");\n    cy.Createpage(page2);\n    cy.wait(1000);\n    cy.get(`.t--entity-item:contains(${page2})`).first().click();\n    cy.wait(\"@getPage\");\n    cy.createJSObject('return \"Success\";');\n    cy.get(explorer.addWidget).click(); // bind input widget to JSObject response on page2\n\n    cy.dragAndDropToCanvas(\"inputwidgetv2\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(\".t--widget-inputwidgetv2\").should(\"exist\");\n    cy.EnableAllCodeEditors();\n    cy.get(dynamicInputLocators.input).eq(1).click({\n      force: true\n    }).type(\"{{JSObject1.myFun1()}}\", {\n      parseSpecialCharSequences: false\n    });\n    cy.get(\"#switcher--explorer\").click({\n      force: true\n    }); // connect app to git\n\n    cy.generateUUID().then(uid => {\n      repoName = uid;\n      cy.createTestGithubRepo(repoName);\n      cy.connectToGitRepo(repoName);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitDiscardChange/DiscardChanges_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Add new datasource query, discard changes, verify query is deleted","suites":["Git discard changes:"],"updatePoint":{"line":93,"column":75,"index":3254},"line":93,"code":"  it(\"2. Add new datasource query, discard changes, verify query is deleted\", () => {\n    cy.get(`.t--entity-item:contains(\"Page1\")`).first().click();\n    cy.wait(\"@getPage\"); // create new postgres query\n\n    cy.NavigateToQueryEditor();\n    cy.NavigateToActiveTab();\n    cy.get(datasource.datasourceCard).contains(datasourceName).scrollIntoView().should(\"be.visible\").closest(datasource.datasourceCard).within(() => {\n      cy.get(datasource.createQuery).click();\n    });\n    cy.get(queryLocators.queryNameField).type(`${query2}`);\n    cy.get(queryLocators.switch).last().click({\n      force: true\n    });\n    cy.get(queryLocators.templateMenu).click();\n    cy.get(queryLocators.query).click({\n      force: true\n    });\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"SELECT * FROM users;\", {\n      force: true,\n      parseSpecialCharSequences: false\n    });\n    cy.WaitAutoSave();\n    cy.runQuery(); // navoigate to Page1\n\n    cy.get(`.t--entity-item:contains(Page1)`).first().click();\n    cy.wait(\"@getPage\"); // discard changes\n\n    cy.gitDiscardChanges();\n    cy.wait(5000);\n    cy.CheckAndUnfoldEntityItem(\"QUERIES/JS\"); // verify query2 is not present\n\n    cy.get(`.t--entity-name:contains(${query2})`).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitDiscardChange/DiscardChanges_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Add new JSObject , discard changes verify JSObject is deleted","suites":["Git discard changes:"],"updatePoint":{"line":126,"column":70,"index":4495},"line":126,"code":"  it(\"3. Add new JSObject , discard changes verify JSObject is deleted\", () => {\n    cy.createJSObject('return \"Success\";');\n    cy.CheckAndUnfoldEntityItem(\"QUERIES/JS\"); // verify jsObject is not duplicated\n\n    cy.get(`.t--entity-name:contains(${jsObject})`).should(\"have.length\", 1);\n    cy.gitDiscardChanges();\n    cy.wait(5000);\n    cy.CheckAndUnfoldEntityItem(\"QUERIES/JS\"); // verify jsObject2 is deleted after discarding changes\n\n    cy.get(`.t--entity-name:contains(${jsObject})`).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitDiscardChange/DiscardChanges_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Delete page2 and trigger discard flow, page2 should be available again","suites":["Git discard changes:"],"updatePoint":{"line":137,"column":79,"index":5022},"line":137,"code":"  it(\"4. Delete page2 and trigger discard flow, page2 should be available again\", () => {\n    cy.Deletepage(page2); // verify page is deleted\n\n    cy.CheckAndUnfoldEntityItem(\"PAGES\");\n    cy.get(`.t--entity-name:contains(${page2})`).should(\"not.exist\");\n    cy.wait(2000);\n    cy.gitDiscardChanges();\n    cy.wait(5000); // verify page2 is recovered back\n\n    cy.get(`.t--entity-name:contains(${page2})`).should(\"be.visible\");\n    cy.get(`.t--entity-item:contains(${page2})`).first().click();\n    cy.wait(\"@getPage\"); // verify data binding on page2\n\n    cy.get(\".bp3-input\").should(\"have.value\", \"Success\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitDiscardChange/DiscardChanges_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Delete Query1 and trigger discard flow, Query1 will be recovered","suites":["Git discard changes:"],"updatePoint":{"line":152,"column":73,"index":5631},"line":152,"code":"  it(\"5. Delete Query1 and trigger discard flow, Query1 will be recovered\", () => {\n    // navigate to Page1\n    cy.CheckAndUnfoldEntityItem(\"PAGES\");\n    cy.get(`.t--entity-item:contains(\"Page1\")`).first().click();\n    cy.wait(\"@getPage\"); // delete query1\n\n    cy.deleteQueryOrJS(query1); // verify Query1 is deleted\n\n    cy.get(`.t--entity-name:contains(${query1})`).should(\"not.exist\"); // discard changes\n\n    cy.gitDiscardChanges();\n    cy.wait(5000); //verify query1 is recovered\n\n    cy.get(`.t--entity-name:contains(${query1})`).should(\"be.visible\");\n    cy.get(\".bp3-input\").should(\"have.value\", \"Test user 7\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitDiscardChange/DiscardChanges_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Delete JSObject1 and trigger discard flow, JSObject1 should be active again","suites":["Git discard changes:"],"updatePoint":{"line":168,"column":84,"index":6270},"line":168,"code":"  it(\"6. Delete JSObject1 and trigger discard flow, JSObject1 should be active again\", () => {\n    // navigate to page2\n    cy.CheckAndUnfoldEntityItem(\"PAGES\");\n    cy.get(`.t--entity-item:contains(${page2})`).first().click();\n    cy.wait(\"@getPage\");\n    cy.wait(3000);\n    /* create and save jsObject */\n    // cy.createJSObject('return \"Success\";');\n    // delete jsObject1\n\n    cy.CheckAndUnfoldEntityItem(\"QUERIES/JS\");\n    cy.get(`.t--entity-item:contains(${jsObject})`).within(() => {\n      cy.get(\".t--context-menu\").click({\n        force: true\n      });\n    });\n    cy.selectAction(\"Delete\");\n    cy.selectAction(\"Are you sure?\");\n    cy.get(`.t--entity-name:contains(${jsObject})`).should(\"not.exist\"); // discard changes\n\n    cy.gitDiscardChanges();\n    cy.wait(5000);\n    cy.CheckAndUnfoldEntityItem(\"PAGES\");\n    cy.get(`.t--entity-item:contains(${page2})`).first().click();\n    cy.wait(\"@getPage\");\n    cy.wait(3000); //verify JSObject is recovered\n\n    cy.get(`.t--entity-name:contains(${jsObject})`).should(\"exist\");\n    cy.get(\".bp3-input\").should(\"have.value\", \"Success\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitDiscardChange/DiscardChanges_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Add new page i.e page3, go to page2 & discard changes, verify page3 is removed","suites":["Git discard changes:"],"updatePoint":{"line":198,"column":87,"index":7371},"line":198,"code":"  it(\"7. Add new page i.e page3, go to page2 & discard changes, verify page3 is removed\", () => {\n    // create new page page3 and move to page1\n    cy.Createpage(page3);\n    cy.get(`.t--entity-item:contains(${page2})`).first().click(); // discard changes\n\n    cy.gitDiscardChanges();\n    cy.wait(5000); // verify page3 is removed\n\n    cy.CheckAndUnfoldEntityItem(\"PAGES\");\n    cy.get(`.t--entity-name:contains(\"${page3}\")`).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitDiscardChange/DiscardChanges_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. Add new page i.e page3, discard changes should not throw error: \"resource not found\"","suites":["Git discard changes:"],"updatePoint":{"line":209,"column":93,"index":7829},"line":209,"code":"  it(`8. Add new page i.e page3, discard changes should not throw error: \"resource not found\"`, () => {\n    cy.Createpage(page3);\n    cy.gitDiscardChanges();\n    cy.wait(5000);\n    cy.get(`.t--entity-name:contains(\"${page3}\")`).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitDiscardChange/DiscardChanges_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Import an app from JSON with Postgres, MySQL, Mongo db","suites":["Git import flow"],"updatePoint":{"line":29,"column":60,"index":1074},"line":29,"code":"  it(\"Import an app from JSON with Postgres, MySQL, Mongo db\", () => {\n    cy.NavigateToHome();\n    cy.get(homePage.optionsIcon).first().click();\n    cy.get(homePage.workspaceImportAppOption).click({\n      force: true\n    });\n    cy.get(homePage.workspaceImportAppModal).should(\"be.visible\");\n    cy.wait(1000);\n    cy.xpath(homePage.uploadLogo).attachFile(\"gitImport.json\");\n    cy.wait(4000);\n    cy.wait(\"@importNewApplication\").then(interception => {\n      cy.log(interception.response.body.data);\n      cy.wait(1000); // should check reconnect modal opening\n\n      cy.get(reconnectDatasourceModal.Modal).should(\"be.visible\");\n      cy.ReconnectDatasource(\"TEDPostgres\");\n      cy.wait(1000);\n      cy.fillPostgresDatasourceForm();\n      cy.get(datasourceEditor.sectionAuthentication).click();\n      cy.testSaveDatasource();\n      cy.wait(1000);\n      cy.ReconnectDatasource(\"TEDMySQL\");\n      cy.wait(500);\n      cy.fillMySQLDatasourceForm();\n      cy.get(datasourceEditor.sectionAuthentication).click();\n      cy.testSaveDatasource();\n      cy.wait(1000);\n      cy.ReconnectDatasource(\"TEDMongo\");\n      cy.wait(1000);\n      cy.fillMongoDatasourceForm();\n      cy.get(datasourceEditor.sectionAuthentication).click();\n      cy.testSaveDatasource();\n      cy.wait(2000);\n      /*cy.get(homePage.toastMessage).should(\n        \"contain\",\n        \"Application imported successfully\",\n      ); */\n\n      cy.get(reconnectDatasourceModal.ImportSuccessModal).should(\"be.visible\");\n      cy.get(reconnectDatasourceModal.ImportSuccessModalCloseBtn).click({\n        force: true\n      });\n      cy.wait(1000);\n      cy.generateUUID().then(uid => {\n        repoName = uid;\n        cy.createTestGithubRepo(repoName);\n        cy.connectToGitRepo(repoName);\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitImport/GitImport_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Import an app from Git and reconnect Postgres, MySQL and Mongo db ","suites":["Git import flow"],"updatePoint":{"line":79,"column":72,"index":2857},"line":79,"code":"  it(\"Import an app from Git and reconnect Postgres, MySQL and Mongo db \", () => {\n    cy.NavigateToHome();\n    cy.createWorkspace();\n    cy.wait(\"@createWorkspace\").then(interception => {\n      const newWorkspaceName = interception.response.body.data.name;\n      cy.CreateAppForWorkspace(newWorkspaceName, \"gitImport\");\n    });\n    cy.get(homePage.homeIcon).click();\n    cy.get(homePage.optionsIcon).first().click();\n    cy.get(homePage.workspaceImportAppOption).click({\n      force: true\n    });\n    cy.get(\".t--import-json-card\").next().click();\n    cy.importAppFromGit(repoName);\n    cy.wait(100);\n    cy.get(reconnectDatasourceModal.Modal).should(\"be.visible\");\n    cy.ReconnectDatasource(\"TEDPostgres\");\n    cy.wait(500);\n    cy.fillPostgresDatasourceForm();\n    cy.get(datasourceEditor.sectionAuthentication).click();\n    cy.testSaveDatasource();\n    cy.wait(500);\n    cy.ReconnectDatasource(\"TEDMySQL\");\n    cy.wait(500);\n    cy.fillMySQLDatasourceForm();\n    cy.get(datasourceEditor.sectionAuthentication).click();\n    cy.testSaveDatasource();\n    cy.wait(500);\n    cy.ReconnectDatasource(\"TEDMongo\");\n    cy.wait(500);\n    cy.fillMongoDatasourceForm();\n    cy.get(datasourceEditor.sectionAuthentication).click();\n    cy.testSaveDatasource();\n    cy.wait(2000);\n    cy.get(reconnectDatasourceModal.ImportSuccessModal).should(\"be.visible\");\n    cy.get(reconnectDatasourceModal.ImportSuccessModalCloseBtn).click({\n      force: true\n    });\n    cy.wait(1000);\n    /* cy.get(homePage.toastMessage).should(\n      \"contain\",\n     \"Application imported successfully\",\n    ); */\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitImport/GitImport_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Verfiy imported app should have all the data binding visible in deploy and edit mode","suites":["Git import flow"],"updatePoint":{"line":123,"column":90,"index":4461},"line":123,"code":"  it(\"Verfiy imported app should have all the data binding visible in deploy and edit mode\", () => {\n    // verify postgres data binded to table\n    cy.get(\".tbody\").first().should(\"contain.text\", \"Test user 7\"); //verify MySQL data binded to table\n\n    cy.get(\".tbody\").last().should(\"contain.text\", \"New Config\"); // verify api response binded to input widget\n\n    cy.xpath(\"//input[@value='this is a test']\").should(\"be.visible\"); // verify js object binded to input widget\n\n    cy.xpath(\"//input[@value='Success']\").should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitImport/GitImport_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Create a new branch, clone page and validate data on that branch in deploy and edit mode","suites":["Git import flow"],"line":133,"code":"  it.skip(\"Create a new branch, clone page and validate data on that branch in deploy and edit mode\", () => {","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitImport/GitImport_spec.js","skipped":true,"dir":"app/client/cypress"},{"name":"Switch to master and verify data in edit and deploy mode","suites":["Git import flow"],"line":187,"code":"  it.skip(\"Switch to master and verify data in edit and deploy mode\", () => {","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitImport/GitImport_spec.js","skipped":true,"dir":"app/client/cypress"},{"name":"Add widget to master, merge then checkout to child branch and verify data","suites":["Git import flow"],"line":205,"code":"  it.skip(\"Add widget to master, merge then checkout to child branch and verify data\", () => {","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitImport/GitImport_spec.js","skipped":true,"dir":"app/client/cypress"},{"name":"Bug #12749 Git Import - Empty Repo NullPointerException","suites":["Git import empty repository"],"updatePoint":{"line":7,"column":61,"index":392},"line":7,"code":"  it(\"Bug #12749 Git Import - Empty Repo NullPointerException\", () => {\n    cy.get(homePage.homeIcon).click();\n    cy.get(homePage.optionsIcon).first().click();\n    cy.get(homePage.workspaceImportAppOption).click({\n      force: true\n    });\n    cy.get(\".t--import-json-card\").next().click();\n    cy.generateUUID().then(uid => {\n      repoName = uid;\n      cy.createTestGithubRepo(repoName);\n      cy.importAppFromGit(repoName, true, failureMessage);\n    });\n    cy.get(gitSyncLocators.closeGitSyncModal).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitImport/ImportEmptyRepo_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"has branch specific comments","suites":["Git sync:"],"updatePoint":{"line":14,"column":34,"index":448},"line":14,"code":"  it(\"has branch specific comments\", function () {\n    // signing up with a new user for a predictable behaviour,so that even if the comments spec\n    // is run along with this spec the onboarding is always triggered\n    cy.generateUUID().then(uid => {\n      cy.Signup(`${uid}@appsmith.com`, uid);\n    });\n    cy.NavigateToHome();\n    cy.createWorkspace();\n    cy.wait(\"@createWorkspace\").then(interception => {\n      const newWorkspaceName = interception.response.body.data.name;\n      cy.CreateAppForWorkspace(newWorkspaceName, newWorkspaceName);\n    });\n    cy.connectToGitRepo(repoName);\n    cy.skipCommentsOnboarding(); // wait for comment mode to be set\n\n    cy.wait(1000);\n    cy.createGitBranch(\"ChildBranch\"); // Add a comment on the child branch\n\n    cy.get(commonLocators.canvas).click(50, 50);\n    cy.typeIntoDraftEditor(commentsLocators.mentionsInput, newCommentText1);\n    cy.get(commentsLocators.mentionsInput).type(\"{enter}\");\n    cy.switchGitBranch(\"master\");\n    cy.get(newCommentText1).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitSync/Comments_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"validates repo URL","suites":["Git sync modal: connect tab"],"updatePoint":{"line":34,"column":24,"index":1131},"line":34,"code":"  it(\"validates repo URL\", function () {\n    // open gitSync modal\n    cy.get(homePage.deployPopupOptionTrigger).click({\n      force: true\n    });\n    cy.get(homePage.connectToGitBtn).click({\n      force: true\n    });\n    cy.get(gitSyncLocators.gitRepoInput).type(`{selectAll}${httpsRepoURL}`);\n    cy.contains(Cypress.env(\"MESSAGES\").PASTE_SSH_URL_INFO());\n    cy.get(gitSyncLocators.generateDeployKeyBtn).should(\"not.exist\");\n    cy.get(gitSyncLocators.gitRepoInput).type(`{selectAll}${invalidURL}`);\n    cy.contains(Cypress.env(\"MESSAGES\").PASTE_SSH_URL_INFO());\n    cy.get(gitSyncLocators.generateDeployKeyBtn).should(\"not.exist\"); // generate key button should be disappeared if empty repo\n\n    cy.get(gitSyncLocators.gitRepoInput).type(`{selectAll}${\"\"}`);\n    cy.get(gitSyncLocators.generateDeployKeyBtn).should(\"not.exist\");\n    cy.get(gitSyncLocators.gitRepoInput).type(`{selectAll}git@github.com:${owner}/${repoName}.git`);\n    cy.contains(Cypress.env(\"MESSAGES\").PASTE_SSH_URL_INFO()).should(\"not.exist\");\n    cy.get(gitSyncLocators.generateDeployKeyBtn).should(\"not.be.disabled\");\n    cy.intercept(\"POST\", \"/api/v1/applications/ssh-keypair/*\").as(\"generateKey\"); // Stubbing window.open\n\n    cy.window().then(window => {\n      windowOpenSpy = cy.stub(window, \"open\").callsFake(url => {\n        expect(url.startsWith(\"https://docs.appsmith.com/\")).to.be.true;\n        windowOpenSpy.restore();\n      });\n    });\n    cy.get(gitSyncLocators.learnMoreSshUrl).click();\n    cy.get(gitSyncLocators.generateDeployKeyBtn).click();\n    cy.wait(\"@generateKey\").then(result => {\n      generatedKey = result.response.body.data.publicKey;\n    }); // generate key learn more\n\n    cy.window().then(window => {\n      windowOpenSpy = cy.stub(window, \"open\").callsFake(url => {\n        expect(url.startsWith(\"https://docs.github.com/en/developers/overview/managing-deploy-keys\")).to.be.true;\n        windowOpenSpy.restore();\n      });\n    });\n    cy.xpath(gitSyncLocators.learnMoreDeployKey).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitSync/Connection_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"validates copy key","suites":["Git sync modal: connect tab"],"updatePoint":{"line":78,"column":24,"index":3155},"line":78,"code":"  it(\"validates copy key\", function () {\n    cy.window().then(win => {\n      cy.stub(win, \"prompt\").returns(win.prompt).as(\"copyToClipboardPrompt\");\n    });\n    cy.get(gitSyncLocators.copySshKey).click();\n    cy.get(\"@copyToClipboardPrompt\").should(\"be.called\");\n    cy.get(\"@copyToClipboardPrompt\").should(prompt => {\n      expect(prompt.args[0][1]).to.equal(generatedKey);\n      generatedKey = generatedKey.slice(0, generatedKey.length - 1);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitSync/Connection_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"validates repo url input after key generation","suites":["Git sync modal: connect tab"],"updatePoint":{"line":89,"column":51,"index":3640},"line":89,"code":"  it(\"validates repo url input after key generation\", function () {\n    cy.get(gitSyncLocators.gitRepoInput).type(`{selectAll}${httpsRepoURL}`);\n    cy.contains(Cypress.env(\"MESSAGES\").PASTE_SSH_URL_INFO());\n    cy.get(gitSyncLocators.connectSubmitBtn).should(\"be.disabled\");\n    cy.get(gitSyncLocators.gitRepoInput).type(`{selectAll}${invalidURL}`);\n    cy.contains(Cypress.env(\"MESSAGES\").PASTE_SSH_URL_INFO());\n    cy.get(gitSyncLocators.connectSubmitBtn).should(\"be.disabled\");\n    cy.get(gitSyncLocators.gitRepoInput).type(`{selectAll}git@github.com:${owner}/${repoName}.git`);\n    cy.contains(Cypress.env(\"MESSAGES\").PASTE_SSH_URL_INFO()).should(\"not.exist\");\n    cy.get(gitSyncLocators.connectSubmitBtn).should(\"not.be.disabled\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitSync/Connection_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"validates git user config","suites":["Git sync modal: connect tab"],"updatePoint":{"line":100,"column":31,"index":4364},"line":100,"code":"  it(\"validates git user config\", function () {\n    cy.get(gitSyncLocators.useGlobalGitConfig).click(); // name empty invalid\n\n    cy.get(gitSyncLocators.gitConfigNameInput).clear();\n    cy.get(gitSyncLocators.gitConfigEmailInput).clear();\n    cy.get(gitSyncLocators.connectSubmitBtn).click();\n    cy.contains(Cypress.env(\"MESSAGES\").AUTHOR_NAME_CANNOT_BE_EMPTY());\n    cy.contains(Cypress.env(\"MESSAGES\").FORM_VALIDATION_INVALID_EMAIL());\n    cy.get(gitSyncLocators.gitConfigNameInput).type(`{selectAll}${owner}`);\n    cy.get(gitSyncLocators.gitConfigEmailInput).clear();\n    cy.get(gitSyncLocators.connectSubmitBtn).click();\n    cy.contains(Cypress.env(\"MESSAGES\").FORM_VALIDATION_INVALID_EMAIL());\n    cy.get(gitSyncLocators.gitConfigEmailInput).type(`{selectAll}${Cypress.env(\"USERNAME\")}`);\n    cy.get(gitSyncLocators.gitConfigNameInput).clear();\n    cy.get(gitSyncLocators.connectSubmitBtn).click();\n    cy.contains(Cypress.env(\"MESSAGES\").AUTHOR_NAME_CANNOT_BE_EMPTY()); // validate email\n\n    cy.get(gitSyncLocators.gitConfigNameInput).type(`{selectAll}${owner}`);\n    cy.get(gitSyncLocators.gitConfigEmailInput).type(`{selectAll}${invalidEmail}`);\n    cy.get(gitSyncLocators.connectSubmitBtn).click();\n    cy.contains(Cypress.env(\"MESSAGES\").FORM_VALIDATION_INVALID_EMAIL());\n    cy.get(gitSyncLocators.gitConfigEmailInput).type(`{selectAll}${invalidEmailWithAmp}`);\n    cy.get(gitSyncLocators.connectSubmitBtn).click();\n    cy.contains(Cypress.env(\"MESSAGES\").FORM_VALIDATION_INVALID_EMAIL());\n    cy.get(gitSyncLocators.gitConfigEmailInput).type(`{selectAll}${Cypress.env(\"USERNAME\")}`);\n    cy.get(gitSyncLocators.connectSubmitBtn).click();\n    cy.contains(Cypress.env(\"MESSAGES\").AUTHOR_NAME_CANNOT_BE_EMPTY()).should(\"not.exist\");\n    cy.contains(Cypress.env(\"MESSAGES\").FORM_VALIDATION_INVALID_EMAIL()).should(\"not.exist\"); // check git global config\n\n    cy.get(gitSyncLocators.useGlobalGitConfig).click();\n    cy.get(gitSyncLocators.gitConfigNameInput).should(\"be.disabled\");\n    cy.get(gitSyncLocators.gitConfigEmailInput).should(\"be.disabled\");\n    cy.window().its(\"store\").invoke(\"getState\").then(state => {\n      const {\n        authorEmail,\n        authorName\n      } = state.ui.gitSync.globalGitConfig;\n      cy.get(gitSyncLocators.gitConfigNameInput).should(\"have.value\", authorName);\n      cy.get(gitSyncLocators.gitConfigEmailInput).should(\"have.value\", authorEmail);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitSync/Connection_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"validates submit errors","suites":["Git sync modal: connect tab"],"updatePoint":{"line":141,"column":29,"index":6770},"line":141,"code":"  it(\"validates submit errors\", function () {\n    cy.get(gitSyncLocators.useGlobalGitConfig).click();\n    cy.get(gitSyncLocators.gitConfigNameInput).scrollIntoView().type(`{selectAll}${owner}`);\n    cy.get(gitSyncLocators.gitConfigEmailInput).type(`{selectAll}${Cypress.env(\"USERNAME\")}`);\n    cy.wait(200);\n    cy.get(gitSyncLocators.gitConnectionContainer).scrollTo(\"top\").should(\"be.visible\");\n    cy.get(gitSyncLocators.gitRepoInput).click({\n      force: true\n    }).type(`{selectAll}${invalidURLDetectedOnTheBackend}`);\n    cy.get(gitSyncLocators.connectSubmitBtn).scrollIntoView();\n    cy.get(gitSyncLocators.connectSubmitBtn).should(\"be.visible\");\n    cy.get(gitSyncLocators.gitRepoInput).scrollIntoView().type(`{selectAll}git@github.com:${owner}-test/${repoName}.git`, {\n      force: true\n    });\n    cy.get(gitSyncLocators.connectSubmitBtn).scrollIntoView().click();\n    cy.get(gitSyncLocators.connetStatusbar).should(\"exist\");\n    cy.wait(\"@connectGitRepo\").then(interception => {\n      const status = interception.response.body.responseMeta.status;\n      expect(status).to.be.gte(400); // todo check for error msg based on the context\n    });\n    cy.get(gitSyncLocators.gitRepoInput).scrollIntoView().type(`{selectAll}git@github.com:${owner}/${repoName}.git`, {\n      force: true\n    });\n    cy.request({\n      method: \"POST\",\n      url: `${GITHUB_API_BASE}/repos/${Cypress.env(\"TEST_GITHUB_USER_NAME\")}/${repoName}/keys`,\n      headers: {\n        Authorization: `token ${Cypress.env(\"GITHUB_PERSONAL_ACCESS_TOKEN\")}`\n      },\n      body: {\n        title: \"key0\",\n        key: generatedKey,\n        read_only: true\n      }\n    });\n    cy.get(gitSyncLocators.connectSubmitBtn).scrollIntoView().click();\n    cy.get(gitSyncLocators.connetStatusbar).should(\"exist\");\n    cy.wait(\"@connectGitRepo\").then(interception => {\n      const status = interception.response.body.responseMeta.status;\n      expect(status).to.be.gte(400); // todo check for error msg based on the context\n    }); // read document clicking test\n\n    cy.get(gitSyncLocators.gitConnectErrorLearnMore).should(\"exist\");\n    cy.window().then(window => {\n      windowOpenSpy = cy.stub(window, \"open\").callsFake(url => {\n        // todo: check if we can improve this\n        expect(!!url).to.be.true;\n        windowOpenSpy.restore();\n      });\n    });\n    cy.get(gitSyncLocators.gitConnectErrorLearnMore).click();\n    cy.get(gitSyncLocators.closeGitSyncModal).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitSync/Connection_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Connect app to git, create new branch and delete it","suites":["Delete branch flow"],"updatePoint":{"line":6,"column":60,"index":258},"line":6,"code":"  it(\"1. Connect app to git, create new branch and delete it\", () => {\n    // create git repo and connect app to git\n    cy.generateUUID().then(uid => {\n      repoName = uid;\n      cy.createTestGithubRepo(repoName);\n      cy.connectToGitRepo(repoName);\n      cy.generateUUID().then(uid => {\n        branchName = uid;\n        cy.createGitBranch(branchName);\n        cy.wait(1000); // verify can not delete the checked out branch\n\n        cy.get(gitSyncLocators.branchButton).click();\n        cy.get(gitSyncLocators.branchListItem).eq(1).trigger(\"mouseenter\").within(() => {\n          cy.get(gitSyncLocators.gitBranchContextMenu).click();\n          cy.get(gitSyncLocators.gitBranchDelete).click();\n        });\n        cy.get(homePage.toastMessage).should(\"contain\", `Cannot delete checked out branch. Please check out other branch before deleting ${branchName}.`);\n        cy.get(gitSyncLocators.closeBranchList).click(); // switch to master and delete new branch created\n\n        cy.switchGitBranch(\"master\");\n        cy.wait(2000);\n        cy.get(gitSyncLocators.branchButton).click();\n        cy.get(gitSyncLocators.branchListItem).eq(1).trigger(\"mouseenter\").within(() => {\n          cy.get(gitSyncLocators.gitBranchContextMenu).click();\n          cy.get(gitSyncLocators.gitBranchDelete).click();\n        });\n        cy.wait(\"@deleteBranch\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n        cy.get(gitSyncLocators.closeBranchList).click(); // verify remote branch is there for the deleted local branch\n\n        cy.wait(2000);\n        cy.switchGitBranch(`origin/${branchName}`);\n        cy.wait(2000);\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitSync/DeleteBranch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Create child branch, merge data from child branch, delete child branch verify the data should reflect in master ","suites":["Delete branch flow"],"updatePoint":{"line":41,"column":121,"index":1979},"line":41,"code":"  it(\"2. Create child branch, merge data from child branch, delete child branch verify the data should reflect in master \", () => {\n    cy.switchGitBranch(\"master\");\n    cy.generateUUID().then(uid => {\n      branchName = uid;\n      cy.createGitBranch(branchName);\n      cy.wait(1000);\n      cy.get(\"#switcher--widgets\").click();\n      cy.dragAndDropToCanvas(\"checkboxwidget\", {\n        x: 100,\n        y: 200\n      });\n      cy.get(\".t--draggable-checkboxwidget\").should(\"exist\");\n      cy.wait(2000);\n      cy.commitAndPush();\n      cy.merge(\"master\");\n      cy.get(\".t--close-git-sync-modal\").click();\n      cy.switchGitBranch(\"master\");\n      cy.wait(2000);\n      cy.get(gitSyncLocators.branchButton).click();\n      cy.get(gitSyncLocators.branchListItem).eq(1).trigger(\"mouseenter\").within(() => {\n        cy.get(gitSyncLocators.gitBranchContextMenu).click();\n        cy.get(gitSyncLocators.gitBranchDelete).click();\n      });\n      cy.wait(\"@deleteBranch\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n      cy.get(gitSyncLocators.closeBranchList).click();\n      cy.get(\".t--draggable-checkboxwidget\").should(\"be.visible\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitSync/DeleteBranch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Create new branch, commit data in that branch , delete the branch, verify data should not reflect in master ","suites":["Delete branch flow"],"updatePoint":{"line":69,"column":117,"index":3146},"line":69,"code":"  it(\"3. Create new branch, commit data in that branch , delete the branch, verify data should not reflect in master \", () => {\n    cy.generateUUID().then(uid => {\n      branchName = uid;\n      cy.createGitBranch(branchName);\n      cy.wait(1000);\n      cy.get(\"#switcher--widgets\").click();\n      cy.dragAndDropToCanvas(\"chartwidget\", {\n        x: 210,\n        y: 300\n      });\n      cy.get(\".t--widget-chartwidget\").should(\"exist\");\n      cy.wait(2000);\n      cy.commitAndPush();\n      cy.wait(1000);\n      cy.switchGitBranch(\"master\");\n      cy.wait(3000);\n      cy.get(gitSyncLocators.branchButton).click();\n      cy.get(gitSyncLocators.branchListItem).eq(1).trigger(\"mouseenter\").within(() => {\n        cy.wait(1000);\n        cy.get(gitSyncLocators.gitBranchContextMenu).click();\n        cy.wait(1000);\n        cy.get(gitSyncLocators.gitBranchDelete).click();\n      });\n      cy.wait(\"@deleteBranch\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n      cy.get(\".--widget-chartwidget\").should(\"not.exist\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitSync/DeleteBranch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate commit comment inputbox and last deployed preview","suites":["Git sync modal: deploy tab"],"updatePoint":{"line":21,"column":64,"index":766},"line":21,"code":"  it(\"Validate commit comment inputbox and last deployed preview\", function () {\n    // last deployed preview\n    // The deploy preview Link should be displayed only after the first commit done\n    cy.get(gitSyncLocators.bottomBarCommitButton).click(); // cy.get(gitSyncLocators.deployPreview).should(\"not.exist\");\n    // comment text input should not empty\n\n    cy.get(gitSyncLocators.commitCommentInput).invoke(\"val\").should(\"not.be.empty\"); // cy.get(gitSyncLocators.commitCommentInput).clear();\n\n    cy.get(gitSyncLocators.commitButton).should(\"be.disabled\");\n    /*  cy.get(gitSyncLocators.commitCommentInput).type(\"Initial Commit\");\n     cy.get(gitSyncLocators.commitButton).click();\n    // check for commit success\n    cy.wait(\"@commit\").should(\n      \"have.nested.property\",\n      \"response.body.responseMeta.status\",\n      201,\n    ); */\n    // last deployed preview\n    // it should be updated with the each commit and push\n    // cy.get(gitSyncLocators.deployPreview).should(\"exist\");\n    //cy.get(gitSyncLocators.deployPreview).contains(\"ago\");\n\n    cy.get(gitSyncLocators.closeGitSyncModal).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitSync/Deploy_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"post connection app name deploy menu","suites":["Git sync modal: deploy tab"],"updatePoint":{"line":45,"column":42,"index":1863},"line":45,"code":"  it(\"post connection app name deploy menu\", function () {\n    cy.get(homePage.applicationName).click();\n    cy.get(commonLocators.appNameDeployMenu).click();\n    cy.get(commonLocators.appNameDeployMenuPublish).click();\n    cy.get(gitSyncLocators.gitSyncModal);\n    cy.get(gitSyncLocators.gitSyncModalDeployTab).should(\"have.class\", \"react-tabs__tab--selected\");\n    cy.window().then(window => {\n      cy.stub(window, \"open\").callsFake(url => {\n        expect(url.indexOf(\"branch=master\")).to.be.at.least(0);\n        expect(!!url).to.be.true;\n      });\n    });\n    cy.get(gitSyncLocators.closeGitSyncModal).click();\n    cy.get(homePage.applicationName).click();\n    cy.get(commonLocators.appNameDeployMenu).click();\n    cy.get(commonLocators.appNameDeployMenuCurrentVersion).click();\n    cy.get(homePage.applicationName).click();\n    cy.get(commonLocators.appNameDeployMenu).click();\n    cy.get(commonLocators.appNameDeployMenuConnectToGit).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitSync/Deploy_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should be opened with proper components","suites":["Git disconnect modal:"],"updatePoint":{"line":17,"column":45,"index":579},"line":17,"code":"  it(\"should be opened with proper components\", function () {\n    cy.connectToGitRepo(repoName, false);\n    cy.get(gitSyncLocators.bottomBarCommitButton).click();\n    cy.get(\"[data-cy=t--tab-GIT_CONNECTION]\").click(); // after clicked disconnect on connection modal,\n    // it should be closed and disconnect modal should be opened\n\n    cy.get(gitSyncLocators.disconnectIcon).click();\n    cy.get(gitSyncLocators.gitSyncModal).should(\"not.exist\");\n    cy.get(gitSyncLocators.disconnectGitModal).should(\"exist\");\n    cy.get(gitSyncLocators.disconnectGitModal).contains(Cypress.env(\"MESSAGES\").NONE_REVERSIBLE_MESSAGE()); // Stubbing window.open\n\n    cy.window().then(window => {\n      windowOpenSpy = cy.stub(window, \"open\").callsFake(url => {\n        expect(url.startsWith(\"https://docs.appsmith.com/\")).to.be.true;\n        windowOpenSpy.restore();\n      });\n    });\n    cy.get(gitSyncLocators.disconnectLearnMoreLink).click();\n    cy.window().its(\"store\").invoke(\"getState\").then(state => {\n      const {\n        name\n      } = state.ui.gitSync.disconnectingGitApp;\n      cy.get(gitSyncLocators.disconnectGitModal).contains(Cypress.env(\"MESSAGES\").GIT_REVOKE_ACCESS(name));\n      cy.get(gitSyncLocators.disconnectGitModal).contains(Cypress.env(\"MESSAGES\").GIT_TYPE_REPO_NAME_FOR_REVOKING_ACCESS(name));\n    }); // disconnect button should be disabled\n\n    cy.get(gitSyncLocators.disconnectButton).should(\"be.disabled\");\n    cy.get(gitSyncLocators.closeDisconnectModal).click();\n    cy.wait(2000);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitSync/DisconnectGit_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should have disconnect repo button","suites":["Git disconnect modal:"],"updatePoint":{"line":47,"column":40,"index":2077},"line":47,"code":"  it(\"should have disconnect repo button\", function () {\n    cy.wait(4000);\n    cy.get(gitSyncLocators.bottomBarCommitButton).click();\n    cy.get(\"[data-cy=t--tab-GIT_CONNECTION]\").click(); // after clicked disconnect on connection modal,\n    // it should be closed and disconnect modal should be opened\n\n    cy.get(gitSyncLocators.disconnectIcon).click();\n    cy.get(gitSyncLocators.disconnectButton).should(\"be.disabled\");\n    cy.get(gitSyncLocators.disconnectAppNameInput).type(`{selectAll}${repoName}`);\n    cy.get(gitSyncLocators.disconnectButton).should(\"be.disabled\");\n    cy.window().its(\"store\").invoke(\"getState\").then(state => {\n      const {\n        name\n      } = state.ui.gitSync.disconnectingGitApp;\n      cy.get(gitSyncLocators.disconnectAppNameInput).type(`{selectAll}${name}`);\n      cy.get(gitSyncLocators.disconnectButton).should(\"be.enabled\");\n    }); // disconnecting validation\n\n    cy.route(\"POST\", \"api/v1/git/disconnect/app/*\").as(\"disconnect\");\n    cy.get(gitSyncLocators.disconnectButton).click(); //cy.get(gitSyncLocators.disconnectButton).should(\"be.disabled\");\n\n    cy.wait(\"@disconnect\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200); // validation store after disconnected\n\n    cy.window().its(\"store\").invoke(\"getState\").then(state => {\n      const {\n        id,\n        name\n      } = state.ui.gitSync.disconnectingGitApp;\n      expect(name).to.eq(\"\");\n      expect(id).to.eq(\"\");\n    });\n    cy.get(gitSyncLocators.disconnectGitModal).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitSync/DisconnectGit_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"shows remote is ahead warning and conflict error during commit and push","suites":["Git sync:"],"updatePoint":{"line":43,"column":77,"index":1685},"line":43,"code":"  it(\"shows remote is ahead warning and conflict error during commit and push\", function () {\n    cy.createGitBranch(tempBranch);\n    cy.get(explorerLocators.widgetSwitchId).click();\n    cy.wait(2000); // wait for transition\n\n    cy.dragAndDropToCanvas(\"buttonwidget\", {\n      x: 300,\n      y: 300\n    });\n    cy.createGitBranch(tempBranch0);\n    cy.widgetText(buttonNameTemp0Branch, widgetsPage.buttonWidget, commonlocators.buttonInner);\n    cy.commitAndPush();\n    cy.mergeViaGithubApi({\n      repo: repoName,\n      base: tempBranch,\n      head: tempBranch0\n    });\n    cy.switchGitBranch(tempBranch);\n    cy.widgetText(buttonNameMainBranch, widgetsPage.buttonWidget, commonlocators.buttonInner);\n    cy.get(homePage.publishButton).click();\n    cy.get(gitSyncLocators.commitCommentInput).type(\"Initial Commit\");\n    cy.get(gitSyncLocators.commitButton).click();\n    cy.wait(\"@commit\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 400);\n    cy.contains(Cypress.env(\"MESSAGES\").GIT_UPSTREAM_CHANGES());\n    cy.get(gitSyncLocators.pullButton).click();\n    cy.contains(Cypress.env(\"MESSAGES\").GIT_CONFLICTING_INFO());\n    cy.get(gitSyncLocators.closeGitSyncModal).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitSync/Git_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"detect conflicts when merging head to base branch","suites":["Git sync:"],"updatePoint":{"line":71,"column":55,"index":2863},"line":71,"code":"  it(\"detect conflicts when merging head to base branch\", function () {\n    cy.switchGitBranch(mainBranch);\n    cy.get(explorerLocators.widgetSwitchId).click();\n    cy.wait(2000); // wait for transition\n\n    cy.dragAndDropToCanvas(\"buttonwidget\", {\n      x: 300,\n      y: 300\n    });\n    cy.createGitBranch(tempBranch1);\n    cy.widgetText(buttonNameTempBranch1, widgetsPage.buttonWidget, commonlocators.buttonInner);\n    cy.commitAndPush();\n    cy.switchGitBranch(mainBranch);\n    cy.widgetText(buttonNameMainBranchEdited, widgetsPage.buttonWidget, commonlocators.buttonInner);\n    cy.commitAndPush();\n    cy.switchGitBranch(tempBranch1);\n    cy.get(gitSyncLocators.bottomBarMergeButton).click();\n    cy.wait(5000); // wait for git status call to finish\n\n    cy.get(gitSyncLocators.mergeBranchDropdownDestination).click();\n    cy.get(commonlocators.dropdownmenu).contains(mainBranch).click(); // assert conflicting status\n\n    cy.contains(\"Please resolve the conflicts manually\");\n    cy.get(gitSyncLocators.closeGitSyncModal).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitSync/Git_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"supports merging head to base branch","suites":["Git sync:"],"updatePoint":{"line":96,"column":42,"index":3892},"line":96,"code":"  it(\"supports merging head to base branch\", function () {\n    cy.switchGitBranch(mainBranch);\n    cy.createGitBranch(tempBranch2);\n    cy.get(explorerLocators.explorerSwitchId).click({\n      force: true\n    });\n    cy.CheckAndUnfoldEntityItem(\"PAGES\");\n    cy.Createpage(\"NewPage\");\n    cy.commitAndPush();\n    cy.merge(mainBranch);\n    cy.get(gitSyncLocators.closeGitSyncModal).click();\n    cy.wait(8000);\n    cy.switchGitBranch(mainBranch);\n    cy.wait(4000); // wait for switch branch\n\n    cy.contains(\"NewPage\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitSync/Git_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"enables pulling remote changes from bottom bar","suites":["Git sync:"],"updatePoint":{"line":113,"column":52,"index":4426},"line":113,"code":"  it(\"enables pulling remote changes from bottom bar\", function () {\n    cy.createGitBranch(tempBranch3);\n    cy.get(explorerLocators.widgetSwitchId).click();\n    cy.wait(2000); // wait for transition\n\n    cy.dragAndDropToCanvas(\"inputwidgetv2\", {\n      x: 300,\n      y: 300\n    });\n    cy.wait(\"@updateLayout\");\n    cy.commitAndPush();\n    cy.mergeViaGithubApi({\n      repo: repoName,\n      base: mainBranch,\n      head: tempBranch3\n    });\n    cy.switchGitBranch(mainBranch);\n    cy.get(gitSyncLocators.gitPullCount);\n    cy.intercept(\"GET\", \"/api/v1/git/pull/app/*\").as(\"gitPull\");\n    cy.get(gitSyncLocators.bottomBarPullButton).click();\n    cy.wait(\"@gitPull\");\n    cy.get(\".bp3-spinner\").should(\"exist\");\n    cy.get(\".bp3-spinner\").should(\"not.exist\");\n    cy.get(widgetsPage.inputWidget);\n    cy.switchGitBranch(tempBranch3);\n    cy.widgetText(inputNameTempBranch3, widgetsPage.inputWidget, commonlocators.inputWidgetInner);\n    cy.commitAndPush();\n    cy.mergeViaGithubApi({\n      repo: repoName,\n      base: mainBranch,\n      head: tempBranch3\n    });\n    cy.switchGitBranch(mainBranch);\n    cy.widgetText(inputNameTempBranch31, widgetsPage.inputWidget, commonlocators.inputWidgetInner);\n    cy.commitAndPush(true); // reset git status\n\n    cy.get(gitSyncLocators.bottomBarMergeButton).click();\n    cy.get(gitSyncLocators.closeGitSyncModal).click();\n    cy.get(gitSyncLocators.gitPullCount);\n    cy.get(gitSyncLocators.bottomBarPullButton).click();\n    cy.contains(Cypress.env(\"MESSAGES\").GIT_CONFLICTING_INFO());\n    cy.xpath(\"//span[@name='close-modal']\").click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitSync/Git_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"clicking '+' icon on bottom bar should open deploy popup","suites":["Git sync:"],"updatePoint":{"line":158,"column":62,"index":6043},"line":158,"code":"  it(\"clicking '+' icon on bottom bar should open deploy popup\", function () {\n    cy.get(gitSyncLocators.bottomBarCommitButton).click({\n      force: true\n    });\n    cy.get(gitSyncLocators.gitSyncModal).should(\"exist\");\n    cy.get(\"[data-cy=t--tab-DEPLOY]\").should(\"exist\");\n    cy.get(\"[data-cy=t--tab-DEPLOY]\").invoke(\"attr\", \"aria-selected\").should(\"eq\", \"true\");\n    cy.get(gitSyncLocators.closeGitSyncModal).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitSync/Git_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"checks clean url updates across branches","suites":["Git sync:"],"updatePoint":{"line":169,"column":46,"index":6481},"line":169,"code":"  it(\"checks clean url updates across branches\", () => {\n    cy.Deletepage(\"NewPage\");\n    cy.wait(1000);\n    let legacyPathname = \"\";\n    let newPathname = \"\";\n    cy.intercept(\"GET\", \"/api/v1/pages?*mode=EDIT\", req => {\n      req.continue();\n    }).as(\"appAndPages\");\n    cy.reload(); //cy.pause();\n\n    cy.wait(\"@appAndPages\").then(intercept2 => {\n      const {\n        application,\n        pages\n      } = intercept2.response.body.data;\n      const defaultPage = pages.find(p => p.isDefault);\n      legacyPathname = `/applications/${application.id}/pages/${defaultPage.id}`;\n      newPathname = `/app/${application.slug}/${defaultPage.slug}-${defaultPage.id}`;\n    });\n    cy.location().should(location => {\n      expect(location.pathname).includes(newPathname);\n    });\n    cy.request(\"PUT\", `/api/v1/applications/${applicationId}`, {\n      applicationVersion: 1\n    });\n    cy.createGitBranch(cleanUrlBranch);\n    cy.location().should(location => {\n      expect(location.pathname).includes(legacyPathname);\n    });\n    cy.switchGitBranch(mainBranch);\n    cy.get(\".t--upgrade\").click({\n      force: true\n    });\n    cy.get(\".t--upgrade-confirm\").click({\n      force: true\n    });\n    cy.location().should(location => {\n      expect(location.pathname).includes(newPathname);\n    });\n    cy.createGitBranch(cleanUrlBranch);\n    cy.location().should(location => {\n      expect(location.pathname).includes(legacyPathname);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitSync/Git_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Bug:10773 When user delete a resource form the child branch and merge it back to parent branch, still the deleted resource will show up in the newly created branch","suites":["Git sync Bug #10773"],"updatePoint":{"line":34,"column":169,"index":1347},"line":34,"code":"  it(\"Bug:10773 When user delete a resource form the child branch and merge it back to parent branch, still the deleted resource will show up in the newly created branch\", () => {\n    // adding a new page \"ChildPage\" to master\n    cy.Createpage(pagename);\n    cy.get(\".t--entity-name:contains('Page1')\").click();\n    cy.commitAndPush();\n    cy.wait(2000);\n    cy.createGitBranch(tempBranch);\n    cy.CheckAndUnfoldEntityItem(\"PAGES\"); // verify tempBranch should contain this page\n\n    cy.get(`.t--entity-name:contains(\"${pagename}\")`).should(\"be.visible\");\n    cy.get(`.t--entity-name:contains(\"${pagename}\")`).click(); // delete page from tempBranch and merge to master\n\n    cy.Deletepage(pagename);\n    cy.get(homePage.publishButton).click();\n    cy.get(gitSyncLocators.commitCommentInput).type(\"Initial Commit\");\n    cy.get(gitSyncLocators.commitButton).click();\n    cy.wait(8000);\n    cy.get(gitSyncLocators.closeGitSyncModal).click();\n    cy.merge(mainBranch);\n    cy.get(gitSyncLocators.closeGitSyncModal).click(); // verify ChildPage is not on master\n\n    cy.switchGitBranch(mainBranch);\n    cy.CheckAndUnfoldEntityItem(\"PAGES\");\n    cy.get(`.t--entity-name:contains(\"${pagename}\")`).should(\"not.exist\"); // create another branch and verify deleted page doesn't exist on it\n\n    cy.createGitBranch(tempBranch0);\n    cy.CheckAndUnfoldEntityItem(\"PAGES\");\n    cy.get(`.t--entity-name:contains(\"${pagename}\")`).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitSync/GitBugs_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Connect app to git, clone the Page ,verify JSobject duplication should not happen and validate data binding in deploy mode and edit mode","suites":["Git Bug: Fix clone page issue where JSObject are not showing up in destination page when application is connected to git"],"updatePoint":{"line":65,"column":142,"index":2913},"line":65,"code":"  it(\"Connect app to git, clone the Page ,verify JSobject duplication should not happen and validate data binding in deploy mode and edit mode\", () => {\n    cy.NavigateToHome();\n    cy.createWorkspace();\n    cy.wait(\"@createWorkspace\").then(interception => {\n      const newWorkspaceName = interception.response.body.data.name;\n      cy.CreateAppForWorkspace(newWorkspaceName, newWorkspaceName);\n      cy.addDsl(dsl);\n    }); // connect app to git\n\n    cy.generateUUID().then(uid => {\n      repoName = uid;\n      cy.createTestGithubRepo(repoName);\n      cy.connectToGitRepo(repoName);\n    });\n    ee.ExpandCollapseEntity(\"QUERIES/JS\", true); // create JS object and validate its data on Page1\n\n    cy.createJSObject('return \"Success\";');\n    cy.get(`.t--entity-name:contains(\"Page1\")`).should(\"be.visible\").click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.xpath(\"//input[@class='bp3-input' and @value='Success']\").should(\"be.visible\"); // clone the page1 and validate data binding\n\n    cy.get(\".t--entity-name:contains(Page1)\").trigger(\"mouseover\").click({\n      force: true\n    });\n    cy.xpath(apiwidget.popover).first().should(\"be.hidden\").invoke(\"show\").click({\n      force: true\n    });\n    cy.get(pages.clonePage).click({\n      force: true\n    });\n    cy.wait(\"@clonePage\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.CheckAndUnfoldEntityItem(\"QUERIES/JS\"); // verify jsObject is not duplicated\n\n    cy.get(`.t--entity-name:contains(${jsObject})`).should(\"have.length\", 1);\n    cy.xpath(\"//input[@class='bp3-input' and @value='Success']\").should(\"be.visible\"); // deploy the app and validate data binding\n\n    cy.get(homePage.publishButton).click();\n    cy.get(gitSyncLocators.commitCommentInput).type(\"Initial Commit\");\n    cy.get(gitSyncLocators.commitButton).click();\n    cy.wait(8000);\n    cy.get(gitSyncLocators.closeGitSyncModal).click();\n    cy.latestDeployPreview();\n    cy.wait(2000);\n    cy.xpath(\"//input[@class='bp3-input' and @value='Success']\").should(\"be.visible\"); // switch to Page1 and validate data binding\n\n    cy.get(\".t--page-switch-tab\").contains(\"Page1\").click({\n      force: true\n    });\n    cy.xpath(\"//input[@class='bp3-input' and @value='Success']\").should(\"be.visible\");\n    cy.get(commonlocators.backToEditor).click();\n    cy.wait(1000);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitSync/GitBugs_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Bug:12724 Js objects are merged to single page when user creates a new branch","suites":["Git Bug: Fix clone page issue where JSObject are not showing up in destination page when application is connected to git"],"updatePoint":{"line":119,"column":83,"index":5182},"line":119,"code":"  it(\"Bug:12724 Js objects are merged to single page when user creates a new branch\", () => {\n    // create a new branch, clone page and validate jsObject data binding\n    cy.createGitBranch(tempBranch);\n    cy.wait(2000);\n    cy.CheckAndUnfoldEntityItem(\"PAGES\");\n    cy.get(\".t--entity-name:contains(Page1)\").last().trigger(\"mouseover\").click({\n      force: true\n    });\n    cy.CheckAndUnfoldEntityItem(\"QUERIES/JS\"); // verify jsObject is not duplicated\n\n    cy.get(`.t--entity-name:contains(${jsObject})`).should(\"have.length\", 1);\n    cy.xpath(\"//input[@class='bp3-input' and @value='Success']\").should(\"be.visible\");\n    cy.get(\".t--entity-name:contains(Page1)\").first().trigger(\"mouseover\").click({\n      force: true\n    });\n    cy.xpath(apiwidget.popover).first().should(\"be.hidden\").invoke(\"show\").click({\n      force: true\n    });\n    cy.get(pages.clonePage).click({\n      force: true\n    });\n    cy.wait(\"@clonePage\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitSync/GitBugs_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Create an app with JSObject, connect it to git and verify its data in edit and deploy mode","suites":["Git synced app with JSObject"],"updatePoint":{"line":147,"column":96,"index":6324},"line":147,"code":"  it(\"Create an app with JSObject, connect it to git and verify its data in edit and deploy mode\", function () {\n    cy.NavigateToHome();\n    cy.createWorkspace();\n    cy.wait(\"@createWorkspace\").then(interception => {\n      const newWorkspaceName = interception.response.body.data.name;\n      cy.CreateAppForWorkspace(newWorkspaceName, newWorkspaceName);\n      cy.addDsl(dsl);\n    });\n    ee.ExpandCollapseEntity(\"QUERIES/JS\", true); // create JS object and validate its data on Page1\n\n    cy.createJSObject('return \"Success\";');\n    cy.get(`.t--entity-name:contains(\"Page1\")`).should(\"be.visible\").click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.xpath(\"//input[@class='bp3-input' and @value='Success']\").should(\"be.visible\"); // clone the page1 and validate data binding\n\n    cy.get(\".t--entity-name:contains(Page1)\").trigger(\"mouseover\").click({\n      force: true\n    });\n    cy.xpath(apiwidget.popover).first().should(\"be.hidden\").invoke(\"show\").click({\n      force: true\n    });\n    cy.get(pages.clonePage).click({\n      force: true\n    });\n    cy.wait(\"@clonePage\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201); // connect app to git and deploy\n\n    cy.generateUUID().then(uid => {\n      repoName = uid;\n      cy.createTestGithubRepo(repoName);\n      cy.connectToGitRepo(repoName);\n      cy.wait(3000);\n      cy.window().its(\"store\").invoke(\"getState\").then(state => {\n        const commitInputDisabled = state.ui.gitSync.gitStatus?.isClean || state.ui.gitSync.isCommitting;\n\n        if (!commitInputDisabled) {\n          cy.commitAndPush();\n        } // check last deploy preview\n\n\n        if (state.ui.applications.currentApplication?.lastDeployedAt) {\n          cy.latestDeployPreview();\n          cy.wait(1000);\n          cy.xpath(\"//input[@class='bp3-input' and @value='Success']\").should(\"be.visible\"); // switch to Page1 and validate data binding\n\n          cy.get(\".t--page-switch-tab\").contains(\"Page1\").click({\n            force: true\n          });\n          cy.xpath(\"//input[@class='bp3-input' and @value='Success']\").should(\"be.visible\");\n          cy.get(commonlocators.backToEditor).click();\n        } else if (state.ui.gitSync.isGitSyncModalOpen) {\n          cy.get(gitSyncLocators.closeGitSyncModal).click({\n            force: true\n          });\n        } // verify jsObject data binding on Page 1\n\n\n        cy.CheckAndUnfoldEntityItem(\"QUERIES/JS\");\n        cy.get(`.t--entity-name:contains(${jsObject})`).should(\"have.length\", 1);\n        cy.xpath(\"//input[@class='bp3-input' and @value='Success']\").should(\"be.visible\"); // switch to Page1 copy and verify jsObject data binding\n\n        cy.CheckAndUnfoldEntityItem(\"PAGES\");\n        cy.get(\".t--entity-name:contains(Page1)\").last().trigger(\"mouseover\").click({\n          force: true\n        });\n        cy.CheckAndUnfoldEntityItem(\"QUERIES/JS\"); // verify jsObject is not duplicated\n\n        cy.get(`.t--entity-name:contains(${jsObject})`).should(\"have.length\", 1);\n        cy.xpath(\"//input[@class='bp3-input' and @value='Success']\").should(\"be.visible\");\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitSync/GitBugs_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Bug:13385 : Unable to see application in home page after the git connect flow is aborted in middle","suites":["Git sync Bug #13385"],"updatePoint":{"line":225,"column":104,"index":9540},"line":225,"code":"  it(\"Bug:13385 : Unable to see application in home page after the git connect flow is aborted in middle\", () => {\n    cy.NavigateToHome();\n    cy.createWorkspace();\n    cy.wait(\"@createWorkspace\").then(interception => {\n      const newWorkspaceName = interception.response.body.data.name;\n      cy.CreateAppForWorkspace(newWorkspaceName, `${newWorkspaceName}app`);\n      cy.generateUUID().then(uid => {\n        const owner = Cypress.env(\"TEST_GITHUB_USER_NAME\");\n        repoName = uid;\n        cy.createTestGithubRepo(repoName); // open gitSync modal\n\n        cy.get(homePage.deployPopupOptionTrigger).click();\n        cy.get(homePage.connectToGitBtn).click({\n          force: true\n        });\n        cy.intercept({\n          url: \"api/v1/git/connect/*\",\n          hostname: window.location.host\n        }, req => {\n          req.headers[\"origin\"] = \"Cypress\";\n        });\n        cy.intercept(\"POST\", \"/api/v1/applications/ssh-keypair/*\").as(`generateKey-${repoName}`);\n        cy.get(gitSyncLocators.gitRepoInput).type(`git@github.com:${owner}/${repoName}.git`); // abort git flow after generating key\n\n        cy.get(gitSyncLocators.closeGitSyncModal).click();\n      }); // verify app is visible and open\n\n      cy.NavigateToHome();\n      cy.reload();\n      cy.wait(3000);\n      cy.SearchApp(`${newWorkspaceName}app`);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitSync/GitBugs_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Generate postgreSQL crud page , connect to git, clone the page, rename page with special character in it","suites":["Git sync apps"],"updatePoint":{"line":36,"column":113,"index":1579},"line":36,"code":"  it(\"1. Generate postgreSQL crud page , connect to git, clone the page, rename page with special character in it\", () => {\n    cy.NavigateToHome();\n    cy.get(homePage.createNew).first().click({\n      force: true\n    });\n    cy.wait(\"@createNewApplication\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201); // create New App and  generate Postgres CRUD page\n\n    cy.get(generatePage.generateCRUDPageActionCard).click();\n    cy.get(generatePage.selectDatasourceDropdown).click();\n    cy.contains(\"Connect New Datasource\").click();\n    cy.get(datasource.PostgreSQL).click();\n    cy.fillPostgresDatasourceForm();\n    cy.generateUUID().then(UUID => {\n      datasourceName = `${UUID}`;\n      cy.renameDatasource(datasourceName);\n    });\n    cy.get(\".t--save-datasource\").click();\n    cy.wait(\"@saveDatasource\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.wait(\"@getDatasourceStructure\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(generatePage.selectTableDropdown).click();\n    cy.get(generatePage.dropdownOption).contains(\"public.configs\").click(); //  skip optional search column selection.\n\n    cy.get(generatePage.generatePageFormSubmitBtn).click();\n    cy.wait(\"@replaceLayoutWithCRUDPage\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.wait(\"@getActions\");\n    cy.wait(\"@postExecute\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(\"span:contains('GOT IT')\").click(); // connect app to git\n\n    cy.generateUUID().then(uid => {\n      repoName = uid;\n      cy.createTestGithubRepo(repoName);\n      cy.connectToGitRepo(repoName);\n    });\n    cy.wait(3000); // rename page to crud_page\n\n    cy.renameEntity(\"Page1\", pageName);\n    cy.get(`.t--entity-name:contains(${pageName})`).trigger(\"mouseover\").click({\n      force: true\n    }); // create a clone of page\n\n    cy.get(`.t--entity-item:contains(${pageName})`).within(() => {\n      cy.get(\".t--context-menu\").click({\n        force: true\n      });\n    });\n    cy.selectAction(\"Clone\");\n    cy.wait(\"@clonePage\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitSync/GitSyncedApps_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Create api queries from api pane and cURL import , bind it to widget and clone page from page settings","suites":["Git sync apps"],"updatePoint":{"line":84,"column":111,"index":3794},"line":84,"code":"  it(\"2. Create api queries from api pane and cURL import , bind it to widget and clone page from page settings\", () => {\n    cy.Createpage(newPage);\n    cy.get(`.t--entity-item:contains(${newPage})`).click();\n    cy.wait(1000); // create a get api call\n\n    cy.NavigateToAPI_Panel();\n    cy.wait(2000);\n    cy.CreateAPI(\"get_data\"); // creating get request using echo\n\n    cy.get(apiwidget.resourceUrl).first().click({\n      force: true\n    }).type(\"https://mock-api.appsmith.com/echo/get\", {\n      parseSpecialCharSequences: false\n    }); //.type(\"{esc}}\");\n\n    cy.wait(5000);\n    cy.get(apiwidget.headerKey).type(\"info\");\n    cy.xpath(\"//span[text()='Key']\").click(); // entering the data in header\n\n    cy.get(apiwidget.headerValue).type(\"This is a test\", {\n      parseSpecialCharSequences: false\n    });\n    cy.wait(2000);\n    cy.SaveAndRunAPI();\n    cy.ResponseStatusCheck(\"200\");\n    cy.get(\".bp3-icon-chevron-left\").click(); // curl import\n\n    cy.get(pages.integrationCreateNew).should(\"be.visible\").click({\n      force: true\n    });\n    cy.get(ApiEditor.curlImage).click({\n      force: true\n    });\n    cy.get(\"textarea\").type('curl -d \\'{\"name\":\"morpheus\",\"job\":\"leader\"}\\' -H Content-Type:application/json -X POST https://mock-api.appsmith.com/echo/post', {\n      force: true,\n      parseSpecialCharSequences: false\n    });\n    cy.importCurl();\n    cy.RunAPI();\n    cy.ResponseStatusCheck(\"201 CREATED\");\n    cy.get(\"@curlImport\").then(response => {\n      cy.expect(response.response.body.responseMeta.success).to.eq(true);\n      cy.get(apiwidget.ApiName).invoke(\"text\").then(text => {\n        const someText = text;\n        expect(someText).to.equal(response.response.body.data.name);\n      });\n    });\n    cy.get(explorer.addWidget).click(); // bind input widgets to the api calls responses\n\n    cy.dragAndDropToCanvas(\"inputwidgetv2\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(\".t--widget-inputwidgetv2\").should(\"exist\");\n    cy.EnableAllCodeEditors();\n    cy.get(dynamicInputLocators.input).eq(1).click({\n      force: true\n    }).type(\"{{Api1.data.body.name}}\", {\n      parseSpecialCharSequences: false\n    });\n    cy.dragAndDropToCanvas(\"inputwidgetv2\", {\n      x: 300,\n      y: 500\n    });\n    cy.get(\".t--widget-inputwidgetv2\").should(\"exist\");\n    cy.EnableAllCodeEditors();\n    cy.get(dynamicInputLocators.input).eq(1).click({\n      force: true\n    }).type(\"{{get_data.data.headers.info}}\", {\n      parseSpecialCharSequences: false\n    });\n    cy.wait(2000); // clone the page from page settings\n\n    cy.xpath(\"//span[contains(@class,'entity-right-icon')]\").click({\n      force: true\n    });\n    cy.xpath(\"(//button[@type='button'])\").eq(9).click();\n    cy.wait(\"@clonePage\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.get(`.t--entity-item:contains(${newPage} Copy)`).click();\n    cy.wait(\"@getPage\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitSync/GitSyncedApps_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Commit and push changes, validate data binding on all pages in edit and deploy mode on master","suites":["Git sync apps"],"updatePoint":{"line":165,"column":102,"index":6659},"line":165,"code":"  it(\"3. Commit and push changes, validate data binding on all pages in edit and deploy mode on master\", () => {\n    // verfiy data binding on all pages in edit mode\n    cy.get(\".t--draggable-inputwidgetv2\").first().find(\".bp3-input\").should(\"have.value\", \"morpheus\");\n    cy.get(\".t--draggable-inputwidgetv2\").last().find(\".bp3-input\").should(\"have.value\", \"This is a test\");\n    cy.get(`.t--entity-item:contains(${newPage})`).first().click();\n    cy.wait(\"@getPage\");\n    cy.get(\".t--draggable-inputwidgetv2\").first().find(\".bp3-input\").should(\"have.value\", \"morpheus\");\n    cy.get(\".t--draggable-inputwidgetv2\").last().find(\".bp3-input\").should(\"have.value\", \"This is a test\");\n    cy.get(`.t--entity-item:contains(${pageName} Copy)`).click();\n    cy.wait(\"@getPage\");\n    cy.readTabledataPublish(\"0\", \"1\").then(cellData => {\n      expect(cellData).to.be.equal(\"New Config\");\n    });\n    cy.get(`.t--entity-item:contains(${pageName})`).first().click();\n    cy.wait(\"@getPage\");\n    cy.readTabledataPublish(\"0\", \"1\").then(cellData => {\n      expect(cellData).to.be.equal(\"New Config\");\n    }); // commit and push the changes\n\n    cy.commitAndPush();\n    cy.wait(2000); // verify data binding on all pages in deploy mode\n\n    cy.latestDeployPreview();\n    cy.readTabledataPublish(\"0\", \"1\").then(cellData => {\n      expect(cellData).to.be.equal(\"New Config\");\n    });\n    cy.get(\".t--page-switch-tab\").contains(`${pageName} Copy`).click({\n      force: true\n    });\n    cy.readTabledataPublish(\"0\", \"1\").then(cellData => {\n      expect(cellData).to.be.equal(\"New Config\");\n    });\n    cy.get(\".t--page-switch-tab\").contains(`${newPage}`).click({\n      force: true\n    });\n    cy.get(\".bp3-input\").first().should(\"have.value\", \"morpheus\");\n    cy.get(\".bp3-input\").eq(1).should(\"have.value\", \"This is a test\");\n    cy.get(\".t--page-switch-tab\").contains(`${newPage} Copy`).click({\n      force: true\n    });\n    cy.get(\".bp3-input\").first().should(\"have.value\", \"morpheus\");\n    cy.get(\".bp3-input\").eq(1).should(\"have.value\", \"This is a test\");\n    cy.get(commonlocators.backToEditor).click();\n    cy.wait(2000);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitSync/GitSyncedApps_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Create a new branch tempBranch, add jsObject and datasource query, move them to new page i.e. Child_Page and bind to widgets","suites":["Git sync apps"],"updatePoint":{"line":210,"column":133,"index":8807},"line":210,"code":"  it(\"4. Create a new branch tempBranch, add jsObject and datasource query, move them to new page i.e. Child_Page and bind to widgets\", () => {\n    cy.createGitBranch(tempBranch);\n    cy.wait(1000); // create jsObject and rename it\n\n    cy.createJSObject('return \"Success\";');\n    cy.wait(2000); // create postgres select query\n    //cy.CheckAndUnfoldEntityItem(\"DATASOURCES\");\n\n    cy.NavigateToQueryEditor();\n    cy.NavigateToActiveTab();\n    cy.get(datasource.datasourceCard).contains(datasourceName).scrollIntoView().should(\"be.visible\").closest(datasource.datasourceCard).within(() => {\n      cy.get(datasource.createQuery).click();\n    });\n    cy.get(queryLocators.queryNameField).type(\"get_users\");\n    cy.get(queryLocators.switch).last().click({\n      force: true\n    });\n    cy.get(queryLocators.templateMenu).click();\n    cy.get(queryLocators.query).click({\n      force: true\n    }); // writing query to get the schema\n\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"SELECT * FROM users ORDER BY id LIMIT 10;\", {\n      force: true,\n      parseSpecialCharSequences: false\n    });\n    cy.WaitAutoSave();\n    cy.runQuery(); // create a new page\n\n    cy.CheckAndUnfoldEntityItem(\"PAGES\");\n    cy.Createpage(\"Child_Page\");\n    cy.wait(1000);\n    cy.get(`.t--entity-name:contains(${newPage} Copy)`).trigger(\"mouseover\").click({\n      force: true\n    }); // move jsObject and postgres query to new page\n\n    cy.CheckAndUnfoldEntityItem(\"QUERIES/JS\");\n    ee.ActionContextMenuByEntityName(\"get_users\", \"Move to page\", \"Child_Page\");\n    cy.wait(2000);\n    cy.get(`.t--entity-name:contains(${newPage} Copy)`).trigger(\"mouseover\").click({\n      force: true\n    });\n    ee.ActionContextMenuByEntityName(\"JSObject1\", \"Move to page\", \"Child_Page\");\n    cy.wait(2000);\n    cy.get(explorer.addWidget).click(); // bind input widgets to the jsObject and query response\n\n    cy.dragAndDropToCanvas(\"inputwidgetv2\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(\".t--widget-inputwidgetv2\").should(\"exist\");\n    cy.EnableAllCodeEditors();\n    cy.get(dynamicInputLocators.input).eq(1).click({\n      force: true\n    }).type(\"{{JSObject1.myFun1()}}\", {\n      parseSpecialCharSequences: false\n    });\n    cy.dragAndDropToCanvas(\"inputwidgetv2\", {\n      x: 300,\n      y: 500\n    });\n    cy.get(\".t--widget-inputwidgetv2\").should(\"exist\");\n    cy.EnableAllCodeEditors();\n    cy.get(dynamicInputLocators.input).eq(1).click({\n      force: true\n    }).type(\"{{get_users.data[0].name}}\", {\n      parseSpecialCharSequences: false\n    });\n    cy.wait(2000);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitSync/GitSyncedApps_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Commit and push changes, validate data binding on all pages in edit and deploy mode on tempBranch","suites":["Git sync apps"],"updatePoint":{"line":280,"column":106,"index":11334},"line":280,"code":"  it(\"5. Commit and push changes, validate data binding on all pages in edit and deploy mode on tempBranch\", () => {\n    // commit and push changes\n    cy.get(homePage.publishButton).click();\n    cy.get(gitSyncLocators.commitCommentInput).type(\"Initial Commit\");\n    cy.get(gitSyncLocators.commitButton).click();\n    cy.wait(8000);\n    cy.get(gitSyncLocators.closeGitSyncModal).click(); // verfiy data binding on all pages in deploy mode\n\n    cy.latestDeployPreview();\n    cy.get(\".bp3-input\").first().should(\"have.value\", \"Success\");\n    cy.get(\".bp3-input\").eq(1).should(\"have.value\", \"Test user 7\");\n    cy.get(\".t--page-switch-tab\").contains(`${pageName}`).click({\n      force: true\n    });\n    cy.readTabledataPublish(\"0\", \"1\").then(cellData => {\n      expect(cellData).to.be.equal(\"New Config\");\n    });\n    cy.get(\".t--page-switch-tab\").contains(`${pageName} Copy`).click({\n      force: true\n    });\n    cy.readTabledataPublish(\"0\", \"1\").then(cellData => {\n      expect(cellData).to.be.equal(\"New Config\");\n    });\n    cy.get(\".t--page-switch-tab\").contains(`${newPage}`).click({\n      force: true\n    });\n    cy.get(\".bp3-input\").first().should(\"have.value\", \"morpheus\");\n    cy.get(\".bp3-input\").eq(1).should(\"have.value\", \"This is a test\");\n    cy.get(\".t--page-switch-tab\").contains(`${newPage} Copy`).click({\n      force: true\n    });\n    cy.get(\".bp3-input\").first().should(\"have.value\", \"morpheus\");\n    cy.get(\".bp3-input\").eq(1).should(\"have.value\", \"This is a test\");\n    cy.get(commonlocators.backToEditor).click();\n    cy.wait(2000); // verfiy data binding on all pages in edit mode\n\n    /* cy.get(\".t--draggable-inputwidgetv2\").first().find(\".bp3-input\").should(\"have.value\", \"morpheus\");\n     cy.get(\".t--draggable-inputwidgetv2\")\n      .last()\n      .find(\".bp3-input\")\n      .should(\"have.value\", \"This is a test\");\n    cy.get(`.t--entity-item:contains(Child_Page)`)\n      .first()\n      .click();\n    cy.wait(\"@getPage\");\n    cy.reload();\n    cy.wait(3000);\n    cy.get(\".bp3-input\")\n      .first()\n      .should(\"have.value\", \"Success\");\n    cy.get(\".bp3-input\")\n      .eq(1)\n      .should(\"have.value\", \"Test user 7\");\n    cy.get(`.t--entity-item:contains(${newPage})`)\n      .first()\n      .click();\n    cy.wait(\"@getPage\");\n    cy.get(\".t--draggable-inputwidgetv2\").first().find(\".bp3-input\").should(\"have.value\", \"morpheus\");\n     cy.get(\".t--draggable-inputwidgetv2\")\n      .last()\n      .find(\".bp3-input\")\n      .should(\"have.value\", \"This is a test\");\n     cy.get(`.t--entity-item:contains(${pageName} Copy)`).click();\n    cy.wait(\"@getPage\");\n    cy.readTabledataPublish(\"0\", \"1\").then((cellData) => {\n      expect(cellData).to.be.equal(\"New Config\");\n    });\n    cy.get(`.t--entity-item:contains(${pageName})`)\n      .first()\n      .click();\n    cy.wait(\"@getPage\");\n    cy.readTabledataPublish(\"0\", \"1\").then((cellData) => {\n      expect(cellData).to.be.equal(\"New Config\");\n    }); */\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitSync/GitSyncedApps_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Switch to master and verify no uncommitted changes should be shown on master","suites":["Git sync apps"],"updatePoint":{"line":355,"column":85,"index":14240},"line":355,"code":"  it(\"6. Switch to master and verify no uncommitted changes should be shown on master\", () => {\n    cy.switchGitBranch(\"master\");\n    cy.wait(2000); // verify commit input box is disabled\n\n    cy.get(homePage.publishButton).click();\n    cy.get(\".t--commit-comment-input\").should(\"be.disabled\").and(\"have.text\", \"No changes to commit\");\n    cy.get(gitSyncLocators.closeGitSyncModal).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitSync/GitSyncedApps_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Switch to tempBranch , Clone the Child_Page, change it's visiblity to hidden and deploy, merge to master","suites":["Git sync apps"],"updatePoint":{"line":363,"column":113,"index":14665},"line":363,"code":"  it(\"7. Switch to tempBranch , Clone the Child_Page, change it's visiblity to hidden and deploy, merge to master\", () => {\n    cy.switchGitBranch(tempBranch);\n    cy.wait(2000); //  clone the Child_Page\n\n    cy.CheckAndUnfoldEntityItem(\"PAGES\");\n    cy.get(`.t--entity-item:contains(Child_Page)`).within(() => {\n      cy.get(\".t--context-menu\").click({\n        force: true\n      });\n    });\n    cy.selectAction(\"Clone\");\n    cy.wait(\"@clonePage\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201); // change cloned page visiblity to hidden\n\n    cy.CheckAndUnfoldEntityItem(\"PAGES\");\n    cy.get(`.t--entity-item:contains(Child_Page Copy)`).within(() => {\n      cy.get(\".t--context-menu\").click({\n        force: true\n      });\n    });\n    cy.selectAction(\"Hide\");\n    cy.get(`.t--entity-item:contains(Child_Page)`).first().click();\n    cy.wait(\"@getPage\");\n    cy.get(homePage.publishButton).click();\n    cy.get(gitSyncLocators.commitCommentInput).type(\"Initial Commit\");\n    cy.get(gitSyncLocators.commitButton).click();\n    cy.wait(8000);\n    cy.get(gitSyncLocators.closeGitSyncModal).click();\n    cy.wait(2000);\n    cy.merge(mainBranch);\n    cy.get(gitSyncLocators.closeGitSyncModal).click();\n    cy.wait(2000);\n    cy.latestDeployPreview(); // verify page is hidden on deploy mode\n\n    cy.get(\".t--page-switch-tab\").should(\"not.contain\", \"Child_Page Copy\");\n    cy.get(commonlocators.backToEditor).click();\n    cy.wait(2000);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitSync/GitSyncedApps_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. Verify Page visiblity on master in edit and deploy mode","suites":["Git sync apps"],"updatePoint":{"line":400,"column":64,"index":16074},"line":400,"code":"  it(\"8. Verify Page visiblity on master in edit and deploy mode\", () => {\n    cy.switchGitBranch(mainBranch);\n    cy.wait(2000);\n    cy.latestDeployPreview();\n    cy.get(\".t--page-switch-tab\").should(\"not.contain\", \"Child_Page Copy\");\n    cy.get(commonlocators.backToEditor).click();\n    cy.wait(2000);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitSync/GitSyncedApps_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"9. Create new branch, delete a page and merge back to master, verify page is deleted on master","suites":["Git sync apps"],"updatePoint":{"line":408,"column":100,"index":16420},"line":408,"code":"  it(\"9. Create new branch, delete a page and merge back to master, verify page is deleted on master\", () => {\n    cy.createGitBranch(tempBranch1); // delete page from page settings\n\n    cy.Deletepage(\"Child_Page Copy\");\n    cy.get(homePage.publishButton).click();\n    cy.get(gitSyncLocators.commitCommentInput).type(\"Initial Commit\");\n    cy.get(gitSyncLocators.commitButton).click();\n    cy.wait(8000);\n    cy.get(gitSyncLocators.closeGitSyncModal).click();\n    cy.wait(2000);\n    cy.merge(mainBranch);\n    cy.get(gitSyncLocators.closeGitSyncModal).click(); // verify Child_Page is not on master\n\n    cy.switchGitBranch(mainBranch);\n    cy.CheckAndUnfoldEntityItem(\"PAGES\");\n    cy.get(`.t--entity-name:contains(\"Child_Page Copy\")`).should(\"not.exist\"); // create another branch and verify deleted page doesn't exist on it\n\n    cy.createGitBranch(tempBranch0);\n    cy.CheckAndUnfoldEntityItem(\"PAGES\");\n    cy.get(`.t--entity-name:contains(\"Child_Page Copy\")`).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitSync/GitSyncedApps_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"10. Import app from git and verify page order should not change","suites":["Git sync apps"],"updatePoint":{"line":429,"column":69,"index":17379},"line":429,"code":"  it(\"10. Import app from git and verify page order should not change\", () => {\n    cy.get(homePage.homeIcon).click();\n    cy.get(homePage.optionsIcon).first().click();\n    cy.get(homePage.workspaceImportAppOption).click({\n      force: true\n    });\n    cy.get(\".t--import-json-card\").next().click(); // import application from git\n\n    cy.importAppFromGit(repoName);\n    cy.wait(2000); // verify page order remains same as in orignal app\n\n    cy.CheckAndUnfoldEntityItem(\"PAGES\");\n    cy.get(\".t--entity-item\").eq(1).contains(\"crudpage_1\");\n    cy.get(\".t--entity-item\").eq(2).contains(\"crudpage_1 Copy\");\n    cy.get(\".t--entity-item\").eq(3).contains(\"ApiCalls_1\");\n    cy.get(\".t--entity-item\").eq(4).contains(\"ApiCalls_1 Copy\");\n    cy.get(\".t--entity-item\").eq(5).contains(\"Child_Page\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitSync/GitSyncedApps_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Verify the functionality of the default dropdown under merge tab","suites":["Git sync modal: merge tab"],"updatePoint":{"line":20,"column":70,"index":763},"line":20,"code":"  it(\"Verify the functionality of the default dropdown under merge tab\", function () {\n    cy.get(commonLocators.canvas).click({\n      force: true\n    });\n    cy.createGitBranch(childBranchKey);\n    cy.get(gitSyncLocators.bottomBarMergeButton).click();\n    cy.get(gitSyncLocators.gitSyncModal).should(\"exist\");\n    cy.get(\"[data-cy=t--tab-MERGE]\").should(\"exist\");\n    cy.get(\"[data-cy=t--tab-MERGE]\").invoke(\"attr\", \"aria-selected\").should(\"eq\", \"true\");\n    cy.get(gitSyncLocators.mergeButton).should(\"be.disabled\");\n    cy.get(gitSyncLocators.mergeBranchDropdownDestination).click();\n    cy.get(commonLocators.dropdownmenu).contains(mainBranch).click();\n    cy.wait(2000);\n    cy.get(gitSyncLocators.mergeButton).should(\"be.enabled\");\n    cy.get(gitSyncLocators.closeGitSyncModal).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitSync/Merge_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"deploy menu at the application dropdown menu","suites":["Pre git connection spec:"],"updatePoint":{"line":7,"column":50,"index":311},"line":7,"code":"  it(\"deploy menu at the application dropdown menu\", () => {\n    // create new app\n    cy.NavigateToHome();\n    cy.createWorkspace();\n    cy.wait(\"@createWorkspace\").then(interception => {\n      const newWorkspaceName = interception.response.body.data.name;\n      cy.CreateAppForWorkspace(newWorkspaceName, newWorkspaceName);\n    });\n    cy.intercept(\"POST\", \"/api/v1/applications/publish/*\").as(\"publishApp\");\n    cy.window().then(window => {\n      cy.stub(window, \"open\").callsFake(url => {\n        expect(!!url).to.be.true;\n      });\n    });\n    cy.get(homePage.applicationName).click();\n    cy.get(commonLocators.appNameDeployMenu).click();\n    cy.get(commonLocators.appNameDeployMenuPublish).click();\n    cy.wait(\"@publishApp\");\n    cy.get(homePage.applicationName).click();\n    cy.get(commonLocators.appNameDeployMenu).click();\n    cy.get(commonLocators.appNameDeployMenuCurrentVersion).click();\n    cy.get(homePage.applicationName).click();\n    cy.get(commonLocators.appNameDeployMenu).click();\n    cy.get(commonLocators.appNameDeployMenuConnectToGit).click();\n    cy.get(gitSyncLocators.gitSyncModal);\n    cy.contains(\"Git Connection\").parent().should(\"have.class\", \"react-tabs__tab--selected\");\n    cy.get(gitSyncLocators.closeGitSyncModal).click();\n    cy.get(gitSyncLocators.connectGitBottomBar).click();\n    cy.get(gitSyncLocators.gitSyncModal);\n    cy.contains(\"Git Connection\").parent().should(\"have.class\", \"react-tabs__tab--selected\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitSync/PreconnectionAppNameDeployMenu_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Verify SSH key regeneration flow ","suites":["Git regenerate SSH key flow"],"updatePoint":{"line":4,"column":42,"index":184},"line":4,"code":"  it(\"1. Verify SSH key regeneration flow \", () => {\n    cy.generateUUID().then(uid => {\n      repoName = uid;\n      cy.createTestGithubRepo(repoName);\n      cy.connectToGitRepo(repoName);\n      cy.regenerateSSHKey(repoName);\n      cy.get(\"body\").click(0, 0);\n      cy.wait(2000);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitSync/RegenerateSSHKey_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Verify error meesage is displayed when ssh key is not added to github","suites":["Git regenerate SSH key flow"],"updatePoint":{"line":14,"column":78,"index":515},"line":14,"code":"  it(\"2. Verify error meesage is displayed when ssh key is not added to github\", () => {\n    cy.wait(2000);\n    cy.get(gitSyncLocators.bottomBarCommitButton).click();\n    cy.get(\"[data-cy=t--tab-GIT_CONNECTION]\").click();\n    cy.wait(2000);\n    cy.get(gitSyncLocators.SSHKeycontextmenu).click();\n    cy.get(gitSyncLocators.regenerateSSHKeyECDSA).click();\n    cy.contains(Cypress.env(\"MESSAGES\").REGENERATE_KEY_CONFIRM_MESSAGE());\n    cy.xpath(gitSyncLocators.confirmButton).click();\n    cy.reload();\n    cy.wait(2000);\n    cy.validateToastMessage(Cypress.env(\"MESSAGES\").ERROR_GIT_AUTH_FAIL());\n    cy.wait(\"@gitStatus\");\n    cy.wait(\"@gitStatus\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 400);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitSync/RegenerateSSHKey_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Verify RSA SSH key regeneration flow ","suites":["Git regenerate SSH key flow"],"updatePoint":{"line":29,"column":46,"index":1211},"line":29,"code":"  it(\"3. Verify RSA SSH key regeneration flow \", () => {\n    cy.regenerateSSHKey(repoName, true, \"RSA\");\n    cy.get(\"body\").click(0, 0);\n    cy.wait(2000);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitSync/RegenerateSSHKey_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"modal should be opened with proper components","suites":["Repo Limit Exceeded Error Modal"],"updatePoint":{"line":16,"column":51,"index":560},"line":16,"code":"  it(\"modal should be opened with proper components\", function () {\n    cy.createAppAndConnectGit(repoName1, false);\n    cy.createAppAndConnectGit(repoName2, false);\n    cy.createAppAndConnectGit(repoName3, false);\n    cy.createAppAndConnectGit(repoName4, false, true);\n    cy.get(gitSyncLocators.repoLimitExceededErrorModal).should(\"exist\"); // title and info text checking\n\n    cy.get(gitSyncLocators.repoLimitExceededErrorModal).contains(Cypress.env(\"MESSAGES\").REPOSITORY_LIMIT_REACHED());\n    cy.get(gitSyncLocators.repoLimitExceededErrorModal).contains(Cypress.env(\"MESSAGES\").REPOSITORY_LIMIT_REACHED_INFO());\n    cy.get(gitSyncLocators.repoLimitExceededErrorModal).contains(Cypress.env(\"MESSAGES\").CONTACT_SUPPORT_TO_UPGRADE());\n    cy.get(gitSyncLocators.contactSalesButton).should(\"exist\");\n    cy.get(gitSyncLocators.repoLimitExceededErrorModal).contains(Cypress.env(\"MESSAGES\").DISCONNECT_CAUSE_APPLICATION_BREAK()); // learn more link checking\n\n    cy.window().then(window => {\n      windowOpenSpy = cy.stub(window, \"open\").callsFake(url => {\n        expect(url.startsWith(\"https://docs.appsmith.com/\")).to.be.true;\n        windowOpenSpy.restore();\n      });\n    });\n    cy.get(gitSyncLocators.learnMoreOnRepoLimitModal).click();\n    cy.get(gitSyncLocators.connectedApplication).should(\"have.length\", 3);\n    cy.get(gitSyncLocators.diconnectLink).first().click();\n    cy.get(gitSyncLocators.repoLimitExceededErrorModal).should(\"not.exist\");\n    cy.get(gitSyncLocators.disconnectGitModal).should(\"exist\");\n    cy.get(gitSyncLocators.closeRevokeModal).click();\n    cy.get(gitSyncLocators.repoLimitExceededErrorModal).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitSync/RepoLimitExceededErrorModal_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. create branch input","suites":["Git sync:"],"updatePoint":{"line":25,"column":28,"index":1007},"line":25,"code":"  it(\"1. create branch input\", function () {\n    cy.get(commonLocators.canvas).click({\n      force: true\n    });\n    cy.get(gitSyncLocators.branchButton).click(); // validate of the branch name\n\n    const hypenBranchName = \"hypen-branch-name\";\n    cy.get(gitSyncLocators.branchSearchInput).type(`{selectall}${hypenBranchName}`);\n    cy.get(gitSyncLocators.branchSearchInput).should(\"have.value\", \"hypen-branch-name\");\n    const specialBranchName = \"special&branch-name~@#$%^&*()_+={}[]><,.\";\n    cy.get(gitSyncLocators.branchSearchInput).type(`{selectall}${specialBranchName}`);\n    cy.get(gitSyncLocators.branchSearchInput).should(\"have.value\", \"special_branch-name_____________________\");\n    cy.wait(200);\n    cy.get(gitSyncLocators.closeBranchList).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitSync/SwitchBranches_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. creates a new branch","suites":["Git sync:"],"updatePoint":{"line":40,"column":29,"index":1776},"line":40,"code":"  it(\"2. creates a new branch\", function () {\n    cy.get(commonLocators.canvas).click({\n      force: true\n    });\n    cy.createGitBranch(parentBranchKey);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitSync/SwitchBranches_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. creates branch specific resources","suites":["Git sync:"],"updatePoint":{"line":46,"column":42,"index":1950},"line":46,"code":"  it(\"3. creates branch specific resources\", function () {\n    cy.Createpage(\"ParentPage1\");\n    cy.get(pages.addEntityAPI).last().should(\"be.visible\").click({\n      force: true\n    });\n    cy.get(pages.integrationCreateNew).should(\"be.visible\").click({\n      force: true\n    });\n    cy.CreateAPI(\"ParentApi1\");\n    cy.NavigateToJSEditor();\n    cy.wait(\"@createNewJSCollection\");\n    cy.get(jsActions.name).click({\n      force: true\n    });\n    cy.get(jsActions.nameInput).type(\"{selectall}ParentJsAction1\", {\n      force: true\n    }).should(\"have.value\", \"ParentJsAction1\").blur();\n    cy.wait(\"@renameJsAction\"); // Added because api name edit takes some time to\n    // reflect in api sidebar after the call passes.\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(2000);\n    cy.createGitBranch(childBranchKey);\n    cy.Createpage(\"ChildPage1\");\n    cy.get(pages.addEntityAPI).last().should(\"be.visible\").click({\n      force: true\n    });\n    cy.get(pages.integrationCreateNew).should(\"be.visible\").click({\n      force: true\n    });\n    cy.CreateAPI(\"ChildApi1\");\n    cy.NavigateToJSEditor();\n    cy.wait(\"@createNewJSCollection\");\n    cy.get(jsActions.name).click({\n      force: true\n    });\n    cy.get(jsActions.nameInput).type(\"{selectall}ChildJsAction1\", {\n      force: true\n    }).should(\"have.value\", \"ChildJsAction1\").blur();\n    cy.wait(\"@renameJsAction\"); // Added because api name edit takes some time to\n    // reflect in api sidebar after the call passes.\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(2000);\n    cy.GlobalSearchEntity(\"ParentPage1\");\n    cy.contains(\"ParentPage1\").click();\n    cy.get(commonLocators.canvas);\n    cy.switchGitBranch(parentBranchKey);\n    cy.get(`.t--entity-name:contains(\"ChildPage1\")`).should(\"not.exist\");\n    cy.get(`.t--entity-name:contains(\"ChildApi1\")`).should(\"not.exist\");\n    cy.get(`.t--entity-name:contains(\"ChildJsAction1\")`).should(\"not.exist\");\n  }); // rename entities","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitSync/SwitchBranches_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. makes branch specific resource updates","suites":["Git sync:"],"updatePoint":{"line":99,"column":47,"index":3943},"line":99,"code":"  it(\"4. makes branch specific resource updates\", function () {\n    cy.switchGitBranch(childBranchKey);\n    cy.CheckAndUnfoldEntityItem(\"QUERIES/JS\");\n    cy.CheckAndUnfoldEntityItem(\"PAGES\");\n    cy.GlobalSearchEntity(\"ParentPage1\");\n    cy.RenameEntity(\"ParentPageRenamed\", true);\n    cy.GlobalSearchEntity(\"ParentApi1\");\n    cy.RenameEntity(\"ParentApiRenamed\"); // cy.GlobalSearchEntity(\"ChildJsAction1\");\n    // cy.RenameEntity(\"ParentJsActionRenamed\");\n\n    cy.switchGitBranch(parentBranchKey);\n    cy.GlobalSearchEntity(\"ParentPageRenamed\", true);\n    cy.get(`.t--entity-name:contains(\"ParentPageRenamed\")`).should(\"not.exist\");\n    cy.GlobalSearchEntity(\"ParentApiRenamed\", true);\n    cy.get(`.t--entity-name:contains(\"ParentApiRenamed\")`).should(\"not.exist\"); // cy.get(`.t--entity-name:contains(\"ParentJsActionRenamed\")`).should(\n    //   \"not.exist\",\n    // );\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitSync/SwitchBranches_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. enables switching branch from the URL","suites":["Git sync:"],"updatePoint":{"line":117,"column":46,"index":4819},"line":117,"code":"  it(\"5. enables switching branch from the URL\", () => {\n    cy.url().then(url => {\n      cy.GlobalSearchEntity(\"ParentPage1\");\n      cy.contains(\"ParentPage1\").click();\n      cy.contains(\"ParentPage1\").click(); // to unfurl\n\n      cy.get(explorer.addWidget).click();\n      cy.dragAndDropToCanvas(\"tablewidgetv2\", {\n        x: 200,\n        y: 200\n      });\n      cy.get(\".t--widget-tablewidgetv2\").should(\"exist\");\n      cy.commitAndPush();\n      const urlObject = new URL(url);\n      urlObject.searchParams.set(branchQueryKey, childBranchKey);\n      cy.visit(urlObject.toString());\n      cy.get(\".bp3-spinner\").should(\"exist\");\n      cy.get(\".bp3-spinner\").should(\"not.exist\");\n      cy.get(\".t--widget-tablewidgetv2\").should(\"not.exist\");\n      cy.commitAndPush();\n      cy.get(homePage.deployPopupOptionTrigger).click();\n      cy.get(homePage.currentDeployedPreviewBtn).invoke(\"removeAttr\", \"target\").click();\n      cy.wait(\"@getPagesForViewApp\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n      cy.get(\".t--widget-tablewidgetv2\").should(\"not.exist\");\n      cy.url().then(url => {\n        const urlObject = new URL(url);\n        urlObject.searchParams.set(branchQueryKey, parentBranchKey);\n        cy.visit(urlObject.toString());\n        cy.wait(\"@getPagesForViewApp\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n        cy.get(\".t--widget-tablewidgetv2\").should(\"exist\");\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitSync/SwitchBranches_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. test sync and prune branches","suites":["Git sync:"],"updatePoint":{"line":150,"column":37,"index":6271},"line":150,"code":"  it(\"6. test sync and prune branches\", () => {\n    // uncomment once prune branch flow is complete\n    const tempBranch = \"featureA\";\n    const tempBranchRenamed = \"newFeatureA\";\n    cy.goToEditFromPublish();\n    cy.createGitBranch(tempBranch);\n    cy.createGitBranch(`${tempBranch}-1`);\n    cy.renameBranchViaGithubApi(repoName, tempBranch, tempBranchRenamed);\n    cy.get(gitSyncLocators.branchButton).click();\n    cy.get(gitSyncLocators.branchSearchInput).type(`{selectall}${tempBranch}`);\n    const tempBranchRegex = new RegExp(`^${tempBranch}$`);\n    const tempBranchRenamedRegex = new RegExp(`^${tempBranchRenamed}$`);\n    const remoteTempBranchRenamedRegex = new RegExp(`^origin/${tempBranchRenamed}$`);\n    cy.get(gitSyncLocators.branchListItem).contains(tempBranchRegex);\n    cy.get(gitSyncLocators.syncBranches).click();\n    cy.get(gitSyncLocators.branchListItem).contains(tempBranchRegex).should(\"exist\");\n    cy.get(gitSyncLocators.branchListItem).contains(remoteTempBranchRenamedRegex).should(\"exist\");\n    cy.get(gitSyncLocators.closeBranchList).click();\n    cy.switchGitBranch(`origin/${tempBranchRenamed}`);\n    cy.switchGitBranch(`origin/${tempBranchRenamed}`, true);\n    cy.wait(4000); // wait for switch branch\n    // assert error toast\n\n    cy.contains(`origin/${tempBranchRenamed} already exists`);\n    cy.get(gitSyncLocators.closeBranchList).click();\n  }); // Validate the error faced when user switches between the branches","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitSync/SwitchBranches_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. error faced when user switches branch with new page","suites":["Git sync:"],"updatePoint":{"line":177,"column":60,"index":7742},"line":177,"code":"  it(\"7. error faced when user switches branch with new page\", function () {\n    cy.generateUUID().then(uuid => {\n      cy.createGitBranch(childBranchKey);\n      cy.CheckAndUnfoldEntityItem(\"PAGES\");\n      cy.Createpage(uuid);\n      cy.get(gitSyncLocators.branchButton).click({\n        force: true\n      });\n      cy.get(gitSyncLocators.branchSearchInput).type(\"{selectall}master\");\n      cy.wait(400);\n      cy.get(gitSyncLocators.branchListItem).contains(\"master\").click();\n      cy.wait(4000);\n      cy.contains(\"Page not found\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitSync/SwitchBranches_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. branch list search","suites":["Git sync:"],"updatePoint":{"line":192,"column":27,"index":8257},"line":192,"code":"  it(\"8. branch list search\", function () {\n    cy.go(\"back\");\n    cy.reload();\n    cy.get(\".bp3-spinner\").should(\"not.exist\");\n    cy.get(commonLocators.canvas).click({\n      force: true\n    });\n    cy.generateUUID().then(uuid1 => {\n      cy.generateUUID().then(uuid2 => {\n        const parentBranchKey = `${uuid1}branch`;\n        const childBranchKey = `${uuid2}branch`;\n        cy.createGitBranch(parentBranchKey);\n        cy.createGitBranch(childBranchKey);\n        cy.get(gitSyncLocators.branchButton).click();\n        cy.get(gitSyncLocators.branchSearchInput).type(`{selectall}${parentBranchKey.slice(0, 3)}`);\n        cy.get(gitSyncLocators.branchListItem).contains(parentBranchKey);\n        cy.get(gitSyncLocators.branchSearchInput).type(`{selectall}${childBranchKey.slice(0, 3)}`);\n        cy.get(gitSyncLocators.branchListItem).contains(childBranchKey);\n        cy.get(gitSyncLocators.branchSearchInput).type(`{selectall}${branchQueryKey}`);\n        cy.get(gitSyncLocators.branchListItem).contains(childBranchKey);\n        cy.get(gitSyncLocators.branchListItem).contains(parentBranchKey);\n        cy.get(gitSyncLocators.branchSearchInput).type(`{selectall}abcde`);\n        cy.get(gitSyncLocators.branchListItem).should(\"not.exist\");\n        cy.get(gitSyncLocators.branchSearchInput).clear();\n        cy.get(gitSyncLocators.branchListItem).contains(childBranchKey);\n        cy.get(gitSyncLocators.branchListItem).contains(parentBranchKey);\n        cy.get(gitSyncLocators.closeBranchList).click();\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitSync/SwitchBranches_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Bug #13860 Theming is not getting applied on view mode when the app is connected to Git","suites":["Git with Theming:"],"updatePoint":{"line":27,"column":93,"index":1014},"line":27,"code":"  it(\"Bug #13860 Theming is not getting applied on view mode when the app is connected to Git\", function () {\n    // apply theme on master branch and deploy\n    cy.get(commonlocators.changeThemeBtn).click({\n      force: true\n    });\n    cy.get(commonlocators.themeCard).eq(1).click({\n      force: true\n    }); // check for alert\n\n    cy.get(`${commonlocators.themeCard}`).eq(1).siblings(\"div\").first().invoke(\"text\").then(text => {\n      cy.get(commonlocators.toastmsg).contains(`Theme ${text} Applied`);\n    }); // drag a widget and assert theme is applied\n\n    cy.dragAndDropToCanvas(\"buttonwidget\", {\n      x: 300,\n      y: 700\n    }); //cy.get('.t--draggable-buttonwidget').closest(\"div\").should('have.css' , 'background-color', backgroudColorChildBranch)\n\n    cy.xpath(\"(//button[@type='button'])\").should(\"have.css\", \"background-color\", backgroudColorMaster);\n    cy.commitAndPush();\n    cy.wait(2000);\n    cy.createGitBranch(tempBranch);\n    cy.wait(1000);\n    cy.get(\"body\").click(300, 300); // change theme on tempBranch\n\n    cy.get(commonlocators.changeThemeBtn).click({\n      force: true\n    }); // select a theme\n\n    cy.get(commonlocators.themeCard).last().click({\n      force: true\n    }); // check for alert\n\n    cy.get(`${commonlocators.themeCard}`).last().siblings(\"div\").first().invoke(\"text\").then(text => {\n      cy.get(commonlocators.toastmsg).contains(`Theme ${text} Applied`);\n    });\n    cy.xpath(\"(//button[@type='button'])\").should(\"have.css\", \"background-color\", backgroudColorChildBranch);\n    cy.commitAndPush(); //assert theme is applied in view mode\n\n    cy.latestDeployPreview();\n    cy.get(\".bp3-button:contains('Submit')\").should(\"have.css\", \"background-color\", backgroudColorChildBranch);\n    cy.get(commonlocators.backToEditor).click();\n    cy.wait(2000);\n  }); // commenting test until bug is closed","file":"integration/Smoke_TestSuite/ClientSideTests/Git/GitWithTheming/GitWithTheming_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. TC 1927 - Shows correct lint error when Api is deleted or created","suites":["Linting"],"updatePoint":{"line":53,"column":74,"index":1978},"line":53,"code":"  it(\"1. TC 1927 - Shows correct lint error when Api is deleted or created\", () => {\n    ee.SelectEntityByName(\"Button1\", \"WIDGETS\");\n    jsEditor.EnterJSContext(\"onClick\", `{{function(){\n        try{\n          Api1.run()\n          showAlert(\"${successMessage}\")\n        }catch(e){\n          showAlert(\"${errorMessage}\")\n        }\n      }()}}`, true, true);\n    propPane.UpdatePropertyFieldValue(\"Tooltip\", \"{{Api1.name}}\");\n    clickButtonAndAssertLintError(true); // create Api1\n\n    apiPage.CreateAndFillApi(\"https://jsonplaceholder.typicode.com/\", \"\", \"GET\");\n    clickButtonAndAssertLintError(false); // Delete Api and assert that lint error shows\n\n    ee.ExpandCollapseEntity(\"QUERIES/JS\");\n    ee.ActionContextMenuByEntityName(\"Api1\", \"Delete\", \"Are you sure?\");\n    clickButtonAndAssertLintError(true); // Re-create Api1\n\n    apiPage.CreateAndFillApi(\"https://jsonplaceholder.typicode.com/\", \"\", \"GET\");\n    clickButtonAndAssertLintError(false);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Linting/BasicLint_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"2. TC 1927 Cont'd - Doesn't show lint errors when Api is renamed","suites":["Linting"],"updatePoint":{"line":76,"column":70,"index":2934},"line":76,"code":"  it(\"2. TC 1927 Cont'd - Doesn't show lint errors when Api is renamed\", () => {\n    ee.SelectEntityByName(\"Api1\", \"QUERIES/JS\");\n    agHelper.RenameWithInPane(\"Api2\");\n    clickButtonAndAssertLintError(false);\n    ee.SelectEntityByName(\"Api2\", \"QUERIES/JS\");\n    agHelper.RenameWithInPane(\"Api1\");\n    clickButtonAndAssertLintError(false);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Linting/BasicLint_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"3. TC 1929 - Shows correct lint error when JSObject is deleted or created","suites":["Linting"],"updatePoint":{"line":84,"column":79,"index":3290},"line":84,"code":"  it(\"3. TC 1929 - Shows correct lint error when JSObject is deleted or created\", () => {\n    ee.SelectEntityByName(\"Button1\", \"WIDGETS\");\n    jsEditor.EnterJSContext(\"onClick\", `{{function(){\n        try{\n          JSObject1.myFun1()\n        }catch(e){\n          showAlert(\"${errorMessage}\")\n        }\n      }()}}`, true, true);\n    propPane.UpdatePropertyFieldValue(\"Tooltip\", `{{JSObject1.myVar1}}`);\n    clickButtonAndAssertLintError(true);\n    jsEditor.CreateJSObject(`export default {\n        myVar1: \"name\",\n        myVar2: \"test\",\n        myFun1: () => {\n          showAlert(\"${successMessage}\")\n        },\n        myFun2: async () => {\n            //use async-await or promises\n        }\n    }`, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true\n    });\n    clickButtonAndAssertLintError(false);\n    ee.ExpandCollapseEntity(\"QUERIES/JS\");\n    ee.ActionContextMenuByEntityName(\"JSObject1\", \"Delete\", \"Are you sure?\");\n    ee.SelectEntityByName(\"Button1\", \"WIDGETS\");\n    clickButtonAndAssertLintError(true); // Re-create JSObject, lint error should be gone\n\n    jsEditor.CreateJSObject(`export default {\n        myVar1: \"name\",\n        myVar2: \"test\",\n        myFun1: () => {\n          showAlert(\"${successMessage}\")\n        },\n        myFun2: async () => {\n            //use async-await or promises\n        }\n    }`, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true\n    });\n    clickButtonAndAssertLintError(false);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Linting/BasicLint_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"4. TC 1929 Cont'd -Doesn't show lint error when JSObject is renamed","suites":["Linting"],"updatePoint":{"line":133,"column":73,"index":4822},"line":133,"code":"  it(\"4. TC 1929 Cont'd -Doesn't show lint error when JSObject is renamed\", () => {\n    ee.ExpandCollapseEntity(\"QUERIES/JS\");\n    ee.SelectEntityByName(\"JSObject1\", \"QUERIES/JS\");\n    jsEditor.RenameJSObjFromPane(\"JSObject2\");\n    clickButtonAndAssertLintError(false, true);\n    ee.ExpandCollapseEntity(\"QUERIES/JS\");\n    ee.SelectEntityByName(\"JSObject2\", \"QUERIES/JS\");\n    jsEditor.RenameJSObjFromPane(\"JSObject1\");\n    clickButtonAndAssertLintError(false, true);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Linting/BasicLint_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"5. TC 1928 - Shows correct lint error with Query is created or Deleted","suites":["Linting"],"updatePoint":{"line":143,"column":76,"index":5299},"line":143,"code":"  it(\"5. TC 1928 - Shows correct lint error with Query is created or Deleted\", () => {\n    ee.SelectEntityByName(\"Button1\", \"WIDGETS\");\n    jsEditor.EnterJSContext(\"onClick\", `{{function(){\n      try{\n        Query1.run()\n        showAlert(\"${successMessage}\")\n      }catch(e){\n        showAlert(\"${errorMessage}\")\n      }\n    }()}}`, true, true);\n    propPane.UpdatePropertyFieldValue(\"Tooltip\", `{{Query1.name}}`);\n    clickButtonAndAssertLintError(true);\n    createMySQLDatasourceQuery(); // Assert Absence of lint error\n\n    clickButtonAndAssertLintError(false); // Delete\n\n    ee.ExpandCollapseEntity(\"QUERIES/JS\");\n    ee.ActionContextMenuByEntityName(\"Query1\", \"Delete\", \"Are you sure?\");\n    clickButtonAndAssertLintError(true); // Recreate Query\n\n    createMySQLDatasourceQuery(); // Assert Absence of lint error\n\n    clickButtonAndAssertLintError(false);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Linting/BasicLint_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"6. TC 1928 Cont'd - Shows correct lint error when Query is renamed","suites":["Linting"],"updatePoint":{"line":167,"column":72,"index":6166},"line":167,"code":"  it(\"6. TC 1928 Cont'd - Shows correct lint error when Query is renamed\", () => {\n    ee.SelectEntityByName(\"Query1\", \"QUERIES/JS\");\n    agHelper.RenameWithInPane(\"Query2\"); // Assert Absence of lint error\n\n    clickButtonAndAssertLintError(false);\n    ee.SelectEntityByName(\"Query2\", \"QUERIES/JS\");\n    agHelper.RenameWithInPane(\"Query1\"); // Assert Absence of lint error\n\n    clickButtonAndAssertLintError(false);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Linting/BasicLint_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"7. TC 1930 - Shows correct lint error with multiple entities in triggerfield","suites":["Linting"],"updatePoint":{"line":177,"column":82,"index":6599},"line":177,"code":"  it(\"7. TC 1930 - Shows correct lint error with multiple entities in triggerfield\", () => {\n    ee.SelectEntityByName(\"Button1\", \"WIDGETS\");\n    jsEditor.EnterJSContext(\"onClick\", `{{function(){\n        try{\n          Api1.run(); JSObject1.myFun1(); JSObject1.myFun2(); Query1.run()\n          showAlert(\"${successMessage}\")\n        }catch(e){\n          showAlert(\"${errorMessage}\")\n        }\n      }()}}`, true, true);\n    propPane.UpdatePropertyFieldValue(\"Tooltip\", `{{Api1.name + JSObject1.myVar1 + Query1.name}}`);\n    clickButtonAndAssertLintError(false); // Delete all\n\n    ee.ExpandCollapseEntity(\"QUERIES/JS\");\n    ee.ActionContextMenuByEntityName(\"JSObject1\", \"Delete\", \"Are you sure?\");\n    ee.ActionContextMenuByEntityName(\"Api1\", \"Delete\", \"Are you sure?\");\n    ee.ActionContextMenuByEntityName(\"Query1\", \"Delete\", \"Are you sure?\");\n    clickButtonAndAssertLintError(true); // ReCreate all\n\n    jsEditor.CreateJSObject(`export default {\n          myVar1: \"name\",\n          myVar2: \"test\",\n          myFun1: () => {\n            showAlert(\"${successMessage}\")\n          },\n          myFun2: async () => {\n              //use async-await or promises\n          }\n      }`, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true\n    });\n    apiPage.CreateAndFillApi(\"https://jsonplaceholder.typicode.com/\", \"Api1\", \"GET\");\n    createMySQLDatasourceQuery();\n    clickButtonAndAssertLintError(false);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Linting/BasicLint_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Doesn't show lint warnings in debugger but shows on Hover only","suites":["Lint error reporting"],"updatePoint":{"line":15,"column":71,"index":669},"line":15,"code":"  it(\"1. Doesn't show lint warnings in debugger but shows on Hover only\", () => {\n    const JS_OBJECT_WITH_LINT_WARNING = `export default {\n          myVar1: [],\n          myVar2: {},\n          myFun1: () => {\n              //write code here\n              const name = \"Automation\"\n          },\n          myFun2: async () => {\n              //use async-await or promises\n          }\n      }`;\n    jsEditor.CreateJSObject(JS_OBJECT_WITH_LINT_WARNING, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true\n    });\n    MouseHoverNVerify(\"name\", \"'name' is defined but never used.\", false);\n    agHelper.Escape();\n    agHelper.GetNClick(locator._errorTab);\n    agHelper.AssertContains(\"'name' is defined but never used.\", \"not.exist\");\n    agHelper.RefreshPage();\n    agHelper.GetNClick(locator._errorTab);\n    agHelper.AssertContains(\"'name' is defined but never used.\", \"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Linting/ErrorReporting_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"2. TC. 1939 - Shows correct error when await keyword is used in sync functions","suites":["Lint error reporting"],"updatePoint":{"line":41,"column":84,"index":1619},"line":41,"code":"  it(\"2. TC. 1939 - Shows correct error when await keyword is used in sync functions\", () => {\n    const JS_OBJECT_WITH_WRONG_AWAIT_KEYWORD = `export default {\n        myVar1: [],\n        myVar2: {},\n        myFun1: () => {\n            //write code here\n            await Promise.all([])\n        }\n    }`; // Test in PropertyPane\n\n    ee.ExpandCollapseEntity(\"QUERIES/JS\");\n    ee.SelectEntityByName(\"Button1\", \"WIDGETS\");\n    jsEditor.EnterJSContext(\"onClick\", `{{\n        () => {\n        await showAlert('test')\n    }}}`, true, true);\n    MouseHoverNVerify(\"await\", \"'await' expressions are only allowed within async functions. Did you mean to mark this function as 'async'?\");\n    agHelper.AssertContains(\"'await' is not defined\", \"not.exist\"); // Test in JS Object\n\n    jsEditor.CreateJSObject(JS_OBJECT_WITH_WRONG_AWAIT_KEYWORD, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true\n    });\n    MouseHoverNVerify(\"await\", \"'await' expressions are only allowed within async functions. Did you mean to mark this function as 'async'?\");\n    agHelper.AssertContains(\"'await' is not defined\", \"not.exist\"); // Test in Api\n\n    apiPage.CreateApi();\n    apiPage.EnterParams(\"test\", `{{function(){\n        await Promise.all([])\n    }()}}`);\n    MouseHoverNVerify(\"await\", \"'await' expressions are only allowed within async functions. Did you mean to mark this function as 'async'?\");\n    agHelper.AssertContains(\"'await' is not defined\", \"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Linting/ErrorReporting_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"3. TC. 1940 - Shows correct error when no comma is used to separate object properties + Bug 8659","suites":["Lint error reporting"],"updatePoint":{"line":76,"column":102,"index":3141},"line":76,"code":"  it(\"3. TC. 1940 - Shows correct error when no comma is used to separate object properties + Bug 8659\", () => {\n    const JS_OBJECT_WITHOUT_COMMA_SEPARATOR = `export default {\n        myVar1: [],\n        myVar2: {}\n        myFun1: () => {\n        }\n    }`; // Test in PropertyPane\n\n    ee.ExpandCollapseEntity(\"QUERIES/JS\");\n    ee.SelectEntityByName(\"Button1\", \"WIDGETS\");\n    jsEditor.EnterJSContext(\"onClick\", `{{ {\n          myVar2: {}\n          myFun1: () => {\n          }\n        }}}`, true, true);\n    MouseHoverNVerify(\"myFun1\", \"Expected '}' to match '{' from line 1 and instead saw 'myFun1'\"); // Test in JS Object\n\n    jsEditor.CreateJSObject(JS_OBJECT_WITHOUT_COMMA_SEPARATOR, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true\n    });\n    MouseHoverNVerify(\"myFun1\", \"Expected '}' to match '{' from line 1 and instead saw 'myFun1'\"); // Test in Api\n\n    apiPage.CreateApi();\n    apiPage.EnterParams(\"test\", `{{ {\n        myVar2: {}\n        myFun1: () => {\n        }\n      }}}`);\n    MouseHoverNVerify(\"myFun1\", \"Expected '}' to match '{' from line 1 and instead saw 'myFun1'\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Linting/ErrorReporting_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"4. TC. 1940 - Shows correct error when semicolon used instead of comma to separate object properties","suites":["Lint error reporting"],"updatePoint":{"line":109,"column":106,"index":4295},"line":109,"code":"  it(\"4. TC. 1940 - Shows correct error when semicolon used instead of comma to separate object properties\", () => {\n    const JS_OBJECT_WITH_SEMICOLON_SEPARATOR = `export default {\n      func1: () => {\n        showAlert('this')\n      };\n      func2: () => {\n      }\n    }`; // Test in PropertyPane\n\n    ee.ExpandCollapseEntity(\"QUERIES/JS\");\n    ee.SelectEntityByName(\"Button1\", \"WIDGETS\");\n    jsEditor.EnterJSContext(\"onClick\", `{{ {\n          myVar2: {};\n          myFun1: () => {\n          }\n        }}}`, true, true);\n    MouseHoverNVerify(\";\", \"Expected '}' to match '{' from line 1 and instead saw ';'\"); // Test in JS Object\n\n    jsEditor.CreateJSObject(JS_OBJECT_WITH_SEMICOLON_SEPARATOR, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true\n    });\n    MouseHoverNVerify(\";\", \"Expected '}' to match '{' from line 1 and instead saw ';'\"); // Test in Api\n\n    apiPage.CreateApi();\n    apiPage.EnterParams(\"test\", `{{ {\n        myVar2: {};\n        myFun1: () => {\n        }\n      }}}`);\n    MouseHoverNVerify(\";\", \"Expected '}' to match '{' from line 1 and instead saw ';'\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Linting/ErrorReporting_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"5. TC. 1938 - Shows correct lint error when currentItem/currentRow is used in field + Bug 15099","suites":["Lint error reporting"],"updatePoint":{"line":143,"column":101,"index":5430},"line":143,"code":"  it(\"5. TC. 1938 - Shows correct lint error when currentItem/currentRow is used in field + Bug 15099\", () => {\n    const JSOBJECT_WITH_INVALID_IDENTIFIER = `export default {\n        myFun1: () => {\n            //write code here\n       console.log(currentItem, currentRow)\n        },\n        myFun2: async () => {\n            //use async-await or promises\n        }\n    }\n    `; // Test in PropertyPane\n\n    ee.ExpandCollapseEntity(\"QUERIES/JS\");\n    ee.SelectEntityByName(\"Button1\", \"WIDGETS\");\n    propPane.UpdatePropertyFieldValue(\"Tooltip\", \"{{currentItem}}\");\n    propPane.UpdatePropertyFieldValue(\"Label\", \"{{currentRow}}\");\n    propPane.UpdatePropertyFieldValue(\"onClick\", \"\");\n    agHelper.AssertElementLength(locator._lintErrorElement, 2); //Test in Table for no error when using {{currentRow}}\n\n    ee.SelectEntityByName(\"Table1\", \"WIDGETS\");\n    agHelper.GetNClick(table._columnSettings(\"step\"));\n    agHelper.AssertElementAbsence(locator._lintErrorElement);\n    propPane.UpdatePropertyFieldValue(\"Computed Value\", \"{{currentRow}}\");\n    agHelper.AssertElementAbsence(locator._lintErrorElement); // Test in JSObject for lint error\n\n    jsEditor.CreateJSObject(JSOBJECT_WITH_INVALID_IDENTIFIER, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true\n    });\n    agHelper.AssertElementLength(locator._lintErrorElement, 2); // test in Api\n\n    apiPage.CreateApi();\n    apiPage.EnterParams(\"test\", `{{function(){\n        currentItem\n        currentRow\n    }()}}`);\n    agHelper.AssertElementLength(locator._lintErrorElement, 2);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Linting/ErrorReporting_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"6. Bug 15156 - Doesn't show error for 'unneccessary semi-colon'","suites":["Lint error reporting"],"updatePoint":{"line":183,"column":69,"index":6988},"line":183,"code":"  it(\"6. Bug 15156 - Doesn't show error for 'unneccessary semi-colon'\", () => {\n    const JSOBJECT_WITH_UNNECCESARY_SEMICOLON = `export default {\n        myFun1: () => {\n            //write code here\n            if (1) {\n                return true;\n            };\n        }\n    }\n    `; // Test in PropertyPane\n\n    ee.SelectEntityByName(\"Button1\", \"QUERIES/JS\");\n    propPane.UpdatePropertyFieldValue(\"Tooltip\", \"\");\n    propPane.UpdatePropertyFieldValue(\"Label\", \"\");\n    propPane.UpdatePropertyFieldValue(\"onClick\", `{{\n        function example(a) {\n            if (1) {\n                return true;\n            };\n        };\n        }}`);\n    agHelper.AssertElementAbsence(locator._lintErrorElement); // Test in JS Object\n\n    ee.SelectEntityByName(\"JSObject1\", \"QUERIES/JS\");\n    jsEditor.EditJSObj(JSOBJECT_WITH_UNNECCESARY_SEMICOLON);\n    agHelper.AssertElementAbsence(locator._lintErrorElement); // Test in API\n\n    apiPage.CreateApi();\n    apiPage.EnterParams(\"test\", `{{function(){\n        if (1) {\n            return true;\n        };\n    }()}}`);\n    agHelper.AssertElementAbsence(locator._lintErrorElement);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Linting/ErrorReporting_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"Creating new app after discontinuing guided tour should not start the same","suites":["Creating new app after discontinuing guided tour should not start the same"],"updatePoint":{"line":10,"column":80,"index":477},"line":10,"code":"  it(\"Creating new app after discontinuing guided tour should not start the same\", function () {\n    // Start guided tour\n    cy.get(commonlocators.homeIcon).click({\n      force: true\n    });\n    cy.get(guidedTourLocators.welcomeTour).click();\n    cy.get(guidedTourLocators.startBuilding).should(\"be.visible\"); // Go back to applications page\n\n    cy.get(commonlocators.homeIcon).click({\n      force: true\n    });\n    cy.get(homePage.createNewAppButton).first().click(); // Check if explorer is visible, explorer is collapsed initialy in guided tour\n\n    cy.get(explorerLocators.entityExplorer).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Onboarding/CreateNewApp_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"onboarding flow - should check page entitiy selection in explorer","suites":["FirstTimeUserOnboarding"],"updatePoint":{"line":11,"column":71,"index":361},"line":11,"code":"  it(\"onboarding flow - should check page entitiy selection in explorer\", function () {\n    cy.get(OnboardingLocator.introModalBuild).click();\n    cy.get(\".t--entity-name:contains(Page1)\").trigger(\"mouseover\").click({\n      force: true\n    });\n    cy.get(OnboardingLocator.dropTarget).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Onboarding/FirstTimeUserOnboarding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"onboarding flow - should check check the redirection post signup","suites":["FirstTimeUserOnboarding"],"updatePoint":{"line":18,"column":70,"index":673},"line":18,"code":"  it(\"onboarding flow - should check check the redirection post signup\", function () {\n    cy.get(OnboardingLocator.introModal).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Onboarding/FirstTimeUserOnboarding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"onboarding flow - should check function of introduction modal build button","suites":["FirstTimeUserOnboarding"],"updatePoint":{"line":21,"column":80,"index":839},"line":21,"code":"  it(\"onboarding flow - should check function of introduction modal build button\", function () {\n    cy.get(OnboardingLocator.introModal).should(\"be.visible\");\n    cy.get(OnboardingLocator.introModalBuild).click();\n    cy.get(OnboardingLocator.introModal).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Onboarding/FirstTimeUserOnboarding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"onboarding flow - should check function of introduction modal guided tour button","suites":["FirstTimeUserOnboarding"],"updatePoint":{"line":26,"column":86,"index":1128},"line":26,"code":"  it(\"onboarding flow - should check function of introduction modal guided tour button\", function () {\n    cy.get(OnboardingLocator.introModalWelcomeTourBtn).should(\"be.visible\");\n    cy.get(OnboardingLocator.introModalWelcomeTourBtn).click();\n    cy.get(OnboardingLocator.welcomeTourBtn).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Onboarding/FirstTimeUserOnboarding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"onboarding flow - should check the checklist page actions","suites":["FirstTimeUserOnboarding"],"updatePoint":{"line":31,"column":63,"index":1422},"line":31,"code":"  it(\"onboarding flow - should check the checklist page actions\", function () {\n    cy.get(OnboardingLocator.introModalBuild).click();\n    cy.get(OnboardingLocator.statusbar).click();\n    cy.get(OnboardingLocator.checklistStatus).should(\"be.visible\");\n    cy.get(OnboardingLocator.checklistStatus).should(\"contain\", \"0 of 5\");\n    cy.get(OnboardingLocator.checklistBack).click();\n    cy.get(OnboardingLocator.statusbar).click();\n    cy.get(OnboardingLocator.checklistDatasourceBtn).should(\"not.be.disabled\");\n    cy.get(OnboardingLocator.checklistDatasourceBtn).click();\n    cy.get(OnboardingLocator.datasourcePage).should(\"be.visible\");\n    cy.get(OnboardingLocator.datasourceMock).first().click();\n    cy.wait(1000);\n    cy.get(OnboardingLocator.statusbar).click();\n    cy.get(OnboardingLocator.checklistStatus).should(\"contain\", \"1 of 5\");\n    cy.get(OnboardingLocator.checklistDatasourceBtn).should(\"not.exist\");\n    cy.get(OnboardingLocator.checklistActionBtn).should(\"be.visible\");\n    cy.get(OnboardingLocator.checklistActionBtn).click();\n    cy.get(OnboardingLocator.createQuery).should(\"be.visible\");\n    cy.get(OnboardingLocator.createQuery).click();\n    cy.wait(1000);\n    cy.get(OnboardingLocator.statusbar).click();\n    cy.get(OnboardingLocator.checklistStatus).should(\"contain\", \"2 of 5\");\n    cy.get(OnboardingLocator.checklistActionBtn).should(\"not.exist\");\n    cy.get(OnboardingLocator.checklistWidgetBtn).should(\"be.visible\");\n    cy.get(OnboardingLocator.checklistWidgetBtn).click();\n    cy.get(OnboardingLocator.widgetSidebar).should(\"be.visible\");\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 400,\n      y: 400\n    });\n    cy.get(OnboardingLocator.statusbar).click();\n    cy.get(OnboardingLocator.checklistStatus).should(\"contain\", \"3 of 5\");\n    cy.get(OnboardingLocator.checklistWidgetBtn).should(\"not.exist\");\n    cy.get(OnboardingLocator.checklistConnectionBtn).should(\"be.visible\");\n    cy.get(OnboardingLocator.checklistConnectionBtn).click();\n    cy.get(OnboardingLocator.snipingBanner).should(\"be.visible\");\n    cy.get(OnboardingLocator.snipingTextWidget).first().trigger(\"mouseover\", {\n      force: true\n    }).wait(500);\n    cy.get(OnboardingLocator.widgetName).should(\"be.visible\");\n    cy.get(OnboardingLocator.widgetName).click();\n    cy.get(OnboardingLocator.statusbar).click();\n    cy.get(OnboardingLocator.checklistStatus).should(\"contain\", \"4 of 5\");\n    cy.get(OnboardingLocator.checklistConnectionBtn).should(\"not.exist\");\n    let open;\n    cy.window().then(window => {\n      open = window.open;\n      window.open = _.noop;\n    });\n    cy.get(OnboardingLocator.checklistDeployBtn).should(\"be.visible\");\n    cy.get(OnboardingLocator.checklistDeployBtn).click();\n    cy.get(OnboardingLocator.checklistStatus).should(\"contain\", \"5 of 5\");\n    cy.get(OnboardingLocator.checklistDeployBtn).should(\"not.exist\");\n    cy.window().then(window => {\n      window.open = open;\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Onboarding/FirstTimeUserOnboarding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"onboarding flow - should check the tasks page actions","suites":["FirstTimeUserOnboarding"],"updatePoint":{"line":88,"column":59,"index":4344},"line":88,"code":"  it(\"onboarding flow - should check the tasks page actions\", function () {\n    cy.get(OnboardingLocator.introModalBuild).click();\n    cy.get(OnboardingLocator.taskDatasourceBtn).should(\"be.visible\");\n    cy.get(OnboardingLocator.taskDatasourceHeader).contains(Cypress.env(\"MESSAGES\").ONBOARDING_TASK_DATASOURCE_HEADER());\n    cy.get(OnboardingLocator.taskDatasourceBtn).click();\n    cy.get(OnboardingLocator.datasourcePage).should(\"be.visible\");\n    cy.get(OnboardingLocator.datasourceMock).first().click();\n    cy.wait(1000);\n    cy.get(OnboardingLocator.datasourceBackBtn).click();\n    cy.get(OnboardingLocator.taskDatasourceBtn).should(\"not.exist\");\n    cy.get(OnboardingLocator.taskActionBtn).should(\"be.visible\");\n    cy.get(OnboardingLocator.taskDatasourceHeader).contains(Cypress.env(\"MESSAGES\").ONBOARDING_TASK_QUERY_HEADER());\n    cy.get(OnboardingLocator.taskActionBtn).click();\n    cy.get(OnboardingLocator.datasourcePage).should(\"be.visible\");\n    cy.get(OnboardingLocator.createQuery).first().click();\n    cy.wait(1000);\n    cy.get(OnboardingLocator.statusbar).click();\n    cy.get(OnboardingLocator.checklistBack).click();\n    cy.get(OnboardingLocator.taskActionBtn).should(\"not.exist\");\n    cy.get(OnboardingLocator.taskWidgetBtn).should(\"be.visible\");\n    cy.get(OnboardingLocator.taskDatasourceHeader).contains(Cypress.env(\"MESSAGES\").ONBOARDING_TASK_WIDGET_HEADER());\n    cy.get(OnboardingLocator.taskWidgetBtn).click();\n    cy.get(OnboardingLocator.widgetSidebar).should(\"be.visible\");\n    cy.get(OnboardingLocator.dropTarget).should(\"be.visible\");\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 400,\n      y: 400\n    });\n    cy.get(OnboardingLocator.textWidgetName).should(\"be.visible\");\n    cy.get(OnboardingLocator.taskWidgetBtn).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Onboarding/FirstTimeUserOnboarding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"onboarding flow - should check the tasks page datasource action alternate widget action","suites":["FirstTimeUserOnboarding"],"updatePoint":{"line":119,"column":93,"index":6162},"line":119,"code":"  it(\"onboarding flow - should check the tasks page datasource action alternate widget action\", function () {\n    cy.get(OnboardingLocator.introModalBuild).click();\n    cy.get(OnboardingLocator.taskDatasourceBtn).should(\"be.visible\");\n    cy.get(OnboardingLocator.taskDatasourceAltBtn).click();\n    cy.get(OnboardingLocator.widgetSidebar).should(\"be.visible\");\n    cy.get(OnboardingLocator.dropTarget).should(\"be.visible\");\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 400,\n      y: 400\n    });\n    cy.get(OnboardingLocator.textWidgetName).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Onboarding/FirstTimeUserOnboarding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"onboarding flow - should check the tasks page query action alternate widget action","suites":["FirstTimeUserOnboarding"],"updatePoint":{"line":131,"column":88,"index":6732},"line":131,"code":"  it(\"onboarding flow - should check the tasks page query action alternate widget action\", function () {\n    cy.get(OnboardingLocator.introModalBuild).click();\n    cy.get(OnboardingLocator.taskDatasourceBtn).should(\"be.visible\");\n    cy.get(OnboardingLocator.taskDatasourceBtn).click();\n    cy.get(OnboardingLocator.datasourcePage).should(\"be.visible\");\n    cy.get(OnboardingLocator.datasourceMock).first().click();\n    cy.wait(1000);\n    cy.get(OnboardingLocator.datasourceBackBtn).click();\n    cy.get(OnboardingLocator.taskActionBtn).should(\"be.visible\");\n    cy.get(OnboardingLocator.taskActionAltBtn).click();\n    cy.get(OnboardingLocator.widgetSidebar).should(\"be.visible\");\n    cy.get(OnboardingLocator.dropTarget).should(\"be.visible\");\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 400,\n      y: 400\n    });\n    cy.get(OnboardingLocator.textWidgetName).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Onboarding/FirstTimeUserOnboarding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"onboarding flow - should check directly opening widget pane","suites":["FirstTimeUserOnboarding"],"updatePoint":{"line":149,"column":65,"index":7603},"line":149,"code":"  it(\"onboarding flow - should check directly opening widget pane\", function () {\n    cy.get(OnboardingLocator.introModalBuild).click();\n    cy.get(OnboardingLocator.taskDatasourceBtn).should(\"be.visible\");\n    cy.get(OnboardingLocator.widgetPaneTrigger).click();\n    cy.get(OnboardingLocator.widgetSidebar).should(\"be.visible\");\n    cy.get(OnboardingLocator.dropTarget).should(\"be.visible\");\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 400,\n      y: 400\n    });\n    cy.get(OnboardingLocator.textWidgetName).should(\"be.visible\").wait(800);\n    cy.reload();\n    cy.wait(\"@getPage\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(OnboardingLocator.statusbar).should(\"be.visible\");\n    cy.get(OnboardingLocator.textWidgetName).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Onboarding/FirstTimeUserOnboarding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Guided tour should work when started from the editor","suites":["Guided Tour"],"updatePoint":{"line":10,"column":58,"index":422},"line":10,"code":"  it(\"Guided tour should work when started from the editor\", function () {\n    cy.generateUUID().then(uid => {\n      cy.Signup(`${uid}@appsmith.com`, uid);\n    });\n    cy.get(onboardingLocators.introModalWelcomeTourBtn).should(\"be.visible\");\n    cy.get(onboardingLocators.introModalWelcomeTourBtn).click();\n    cy.get(onboardingLocators.welcomeTourBtn).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Onboarding/GuidedTour_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Guided Tour","suites":["Guided Tour"],"updatePoint":{"line":18,"column":17,"index":762},"line":18,"code":"  it(\"Guided Tour\", function () {\n    // Start guided tour\n    cy.get(commonlocators.homeIcon).click({\n      force: true\n    });\n    cy.get(guidedTourLocators.welcomeTour).click();\n    cy.get(guidedTourLocators.startBuilding).click();\n    cy.get(explorerLocators.entityExplorer).should(\"not.be.visible\"); // Step 1: Run query\n\n    cy.runQuery();\n    cy.get(guidedTourLocators.successButton).click(); // Step 2: Select table widget\n\n    cy.SearchEntityandOpen(\"CustomersTable\"); // Step 3: Add binding to the tableData property\n\n    cy.testJsontext(\"tabledata\", \"{{getCustomers.data}}\");\n    cy.get(guidedTourLocators.successButton).click();\n    cy.get(guidedTourLocators.infoButton).click(); // Renaming widgets\n\n    cy.wait(\"@updateWidgetName\"); // Step 4: Add binding to the defaulText property of NameInput\n\n    cy.get(guidedTourLocators.hintButton).click();\n    cy.testJsontext(\"defaulttext\", \"{{CustomersTable.selectedRow.name}}\");\n    cy.get(guidedTourLocators.successButton).click(); // Step 5: Add binding to the rest of the widgets in the container\n\n    cy.get(commonlocators.editWidgetName).contains(\"EmailInput\");\n    cy.testJsontext(\"defaulttext\", \"{{CustomersTable.selectedRow.email}}\");\n    cy.get(\".t--entity-name\").contains(\"CountryInput\").click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.get(commonlocators.editWidgetName).contains(\"CountryInput\");\n    cy.testJsontext(\"defaulttext\", \"{{CustomersTable.selectedRow.country}}\");\n    cy.get(\".t--entity-name\").contains(\"DisplayImage\").click({\n      force: true\n    });\n    cy.get(guidedTourLocators.successButton).click(); // Step 6: Drag and drop a widget\n\n    cy.dragAndDropToCanvas(\"buttonwidget\", {\n      x: 700,\n      y: 400\n    });\n    cy.get(guidedTourLocators.successButton).click();\n    cy.get(guidedTourLocators.infoButton).click(); // Step 7: Execute a query onClick\n\n    cy.executeDbQuery(\"updateCustomerInfo\"); // Step 8: Execute getCustomers onSuccess\n\n    cy.get(`.t--property-control-onclick [data-guided-tour-iid='onSuccess'] ${commonlocators.dropdownSelectButton}`).click({\n      force: true\n    }).get(\"ul.bp3-menu\").children().contains(\"Execute a query\").click({\n      force: true\n    }).get(\"ul.bp3-menu\").children().contains(\"getCustomers\").click({\n      force: true\n    });\n    cy.get(guidedTourLocators.successButton).click(); // Step 9: Deploy\n\n    cy.PublishtheApp();\n    cy.wait(\"@getWorkspace\");\n    cy.get(guidedTourLocators.rating).should(\"be.visible\");\n    cy.get(guidedTourLocators.rating).eq(4).click();\n    cy.get(guidedTourLocators.startBuilding).should(\"be.visible\");\n    cy.get(guidedTourLocators.startBuilding).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Onboarding/GuidedTour_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Skipping comments tour also skips bot comments","suites":["Comments"],"updatePoint":{"line":38,"column":52,"index":1228},"line":38,"code":"  it(\"Skipping comments tour also skips bot comments\", function () {\n    cy.generateUUID().then(uid => {\n      cy.Signup(`${uid}@appsmithtest.com`, uid);\n    });\n    cy.wait(1000);\n    cy.NavigateToHome();\n    cy.generateUUID().then(uid => {\n      appName = uid;\n      workspaceName = uid;\n      cy.createWorkspace();\n      cy.wait(\"@createWorkspace\").then(interception => {\n        const newWorkspaceName = interception.response.body.data.name;\n        cy.renameWorkspace(newWorkspaceName, workspaceName);\n      });\n      cy.CreateAppForWorkspace(workspaceName, appName);\n      cy.addDsl(dsl);\n    });\n    cy.skipCommentsOnboarding(); // wait for comment mode to be set\n\n    cy.wait(1000);\n    cy.get(commonLocators.canvas).click(50, 50);\n    cy.typeIntoDraftEditor(commentsLocators.mentionsInput, newCommentText1);\n    cy.get(commentsLocators.mentionsInput).type(\"{enter}\"); // when user adds first comment, following command will count for the headers of the comment card\n    // in case of \"Skip Tour\" this has to be 2.\n\n    cy.get(\"[data-cy=comments-card-header]\").its(\"length\").should(\"eq\", 2);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/AddComments_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Completing comments tour adds bot comment in first thread","suites":["Comments"],"updatePoint":{"line":65,"column":63,"index":2345},"line":65,"code":"  it(\"Completing comments tour adds bot comment in first thread\", function () {\n    cy.generateUUID().then(uid => {\n      cy.Signup(`${uid}@appsmithtest.com`, uid);\n    });\n    cy.NavigateToHome();\n    cy.generateUUID().then(uid => {\n      appName = uid;\n      workspaceName = uid;\n      cy.createWorkspace();\n      cy.wait(\"@createWorkspace\").then(interception => {\n        const newWorkspaceName = interception.response.body.data.name;\n        cy.renameWorkspace(newWorkspaceName, workspaceName);\n      });\n      cy.CreateAppForWorkspace(workspaceName, appName);\n      cy.addDsl(dsl);\n    });\n    cy.get(commonLocators.canvas);\n    cy.get(commentsLocators.switchToCommentModeBtn).click({\n      force: true\n    });\n    cy.contains(\"NEXT\").click({\n      force: true\n    });\n    cy.contains(\"NEXT\").click({\n      force: true\n    });\n    cy.get(\"input[name='displayName']\").type(\"Touring User\");\n    cy.get(\"button[type='submit']\").click(); // wait for comment mode to be set\n\n    cy.wait(1000);\n    cy.get(commentsLocators.switchToCommentModeBtn).click({\n      force: true\n    });\n    cy.get(commonLocators.canvas).click(50, 50);\n    cy.typeIntoDraftEditor(commentsLocators.mentionsInput, newCommentText1);\n    cy.get(commentsLocators.mentionsInput).type(\"{enter}\");\n    cy.get(\"[data-cy=comments-card-header]\").its(\"length\").should(\"eq\", 3);\n    cy.contains(\"Appsmith Bot\").should(\"be.visible\");\n  }); // create another comment since the first one is a private bot thread","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/AddComments_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"another comment can be created after dismissing the first one","suites":["Comments"],"updatePoint":{"line":105,"column":67,"index":3822},"line":105,"code":"  it(\"another comment can be created after dismissing the first one\", () => {\n    cy.get(commonLocators.canvas).click(60, 10); // wait for transition to be completed\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(300);\n    cy.typeIntoDraftEditor(commentsLocators.mentionsInput, newCommentText1);\n    cy.get(commentsLocators.mentionsInput).type(\"{enter}\");\n    cy.wait(\"@createNewThread\").then(response => {\n      commentThreadId = response.response.body.data.id;\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/AddComments_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Can invite new collaborators, with substring emails","suites":["Comments"],"updatePoint":{"line":116,"column":57,"index":4318},"line":116,"code":"  it(\"Can invite new collaborators, with substring emails\", () => {\n    cy.get(commentsLocators.cancelCommentButton).click({\n      force: true\n    });\n    cy.get(homePage.shareApp).click({\n      force: true\n    });\n    cy.shareApp(\"cypresstest@appsmith.com\", homePage.viewerRole);\n    cy.get(commonLocators.canvas).click(30, 30);\n    cy.wait(300);\n    cy.get(commentsLocators.mentionsInput).type(\"@test@appsmith.com\", {\n      delay: 100\n    });\n    cy.wait(1000);\n    cy.contains(\"Invite a new user\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/AddComments_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"unread indicator is visible for another app user when a new comment is added","suites":["Comments"],"updatePoint":{"line":132,"column":82,"index":4867},"line":132,"code":"  it(\"unread indicator is visible for another app user when a new comment is added\", () => {\n    // share app with TESTUSERNAME2\n    cy.get(homePage.shareApp).click({\n      force: true\n    });\n    cy.shareApp(Cypress.env(\"TESTUSERNAME1\"), homePage.adminRole);\n    cy.LogintoApp(Cypress.env(\"TESTUSERNAME1\"), Cypress.env(\"TESTPASSWORD1\")); // launch the editor\n\n    cy.get(homePage.searchInput).type(appName); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(2000);\n    cy.get(homePage.applicationCard).first().trigger(\"mouseover\");\n    cy.get(homePage.appEditIcon).first().click({\n      force: true\n    });\n    cy.get(\"#loading\").should(\"not.exist\"); // unread indicator should be visible since a new comment was added\n\n    cy.get(commentsLocators.toggleCommentModeOnUnread).should(\"exist\");\n    cy.get(commentsLocators.toggleCommentModeOn).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/AddComments_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"is visible for the other app users in edit mode","suites":["Comments"],"updatePoint":{"line":152,"column":53,"index":5729},"line":152,"code":"  it(\"is visible for the other app users in edit mode\", () => {\n    cy.get(commentsLocators.switchToCommentModeBtn).click({\n      force: true\n    }); // this is needed, as on CI we create new users\n\n    cy.contains(\"SKIP\").click({\n      force: true\n    });\n    cy.get(\"input[name='displayName']\").type(\"Skip User\");\n    cy.get(\"button[type='submit']\").click();\n    cy.get(`${commentsLocators.inlineCommentThreadPin}${commentThreadId}`).click({\n      force: true\n    });\n    cy.contains(newCommentText1);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/AddComments_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"unread indicator should be hidden once all comment threads are marked as read","suites":["Comments"],"updatePoint":{"line":167,"column":83,"index":6269},"line":167,"code":"  it(\"unread indicator should be hidden once all comment threads are marked as read\", () => {\n    // thread should be marked as read by clicking before, unread indicator should not be visible\n    cy.get(commentsLocators.toggleCommentModeOnUnread).should(\"not.exist\");\n    cy.get(commentsLocators.toggleCommentModeOn).should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/AddComments_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"is visible in the published mode","suites":["Comments"],"updatePoint":{"line":172,"column":38,"index":6564},"line":172,"code":"  it(\"is visible in the published mode\", () => {\n    cy.PublishtheApp(); // wait for the published page to load\n\n    cy.get(commonLocators.viewerPage);\n    cy.get(commentsLocators.switchToCommentModeBtn).click({\n      force: true\n    });\n    cy.get(`${commentsLocators.inlineCommentThreadPin}${commentThreadId}`).click({\n      force: true\n    });\n    cy.contains(newCommentText1);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/AddComments_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Should check analytics is not initialised when enableTelemtry is false","suites":["Checks for analytics initialization"],"updatePoint":{"line":4,"column":76,"index":201},"line":4,"code":"  it(\"Should check analytics is not initialised when enableTelemtry is false\", function () {\n    cy.visit(\"/applications\");\n    cy.reload();\n    cy.wait(3000);\n    cy.wait(\"@getMe\").wait(\"@getMe\").should(\"have.nested.property\", \"response.body.data.enableTelemetry\", false);\n    cy.window().then(window => {\n      expect(window.analytics).to.be.equal(undefined);\n    });\n    let interceptFlag = false;\n    cy.intercept(\"POST\", \"https://api.segment.io/**\", req => {\n      interceptFlag = true;\n      req.continue();\n    });\n    cy.generateUUID().then(id => {\n      appId = id;\n      cy.CreateAppInFirstListedWorkspace(id);\n      localStorage.setItem(\"AppName\", appId);\n    });\n    cy.wait(3000);\n    cy.window().then(() => {\n      cy.wrap(interceptFlag).should(\"eq\", false);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/Analytics_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Should check smartlook is not initialised when enableTelemtry is false","suites":["Checks for analytics initialization"],"updatePoint":{"line":27,"column":76,"index":988},"line":27,"code":"  it(\"Should check smartlook is not initialised when enableTelemtry is false\", function () {\n    cy.visit(\"/applications\");\n    cy.reload();\n    cy.wait(3000);\n    cy.wait(\"@getMe\");\n    cy.window().then(window => {\n      expect(window.smartlook).to.be.equal(undefined);\n    });\n    let interceptFlag = false;\n    cy.intercept(\"POST\", \"https://**.smartlook.**\", req => {\n      interceptFlag = true;\n      req.continue();\n    });\n    cy.generateUUID().then(id => {\n      appId = id;\n      cy.CreateAppInFirstListedWorkspace(id);\n      localStorage.setItem(\"AppName\", appId);\n    });\n    cy.wait(3000);\n    cy.window().then(() => {\n      cy.wrap(interceptFlag).should(\"eq\", false);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/Analytics_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Should check Sentry is not initialised when enableTelemtry is false","suites":["Checks for analytics initialization"],"updatePoint":{"line":50,"column":73,"index":1679},"line":50,"code":"  it(\"Should check Sentry is not initialised when enableTelemtry is false\", function () {\n    cy.visit(\"/applications\");\n    cy.reload();\n    cy.wait(3000);\n    cy.wait(\"@getMe\");\n    cy.window().then(window => {\n      expect(window.Sentry).to.be.equal(undefined);\n    });\n    let interceptFlag = false;\n    cy.intercept(\"POST\", \"https://**.sentry.io/**\", req => {\n      interceptFlag = true;\n      req.continue();\n    });\n    cy.generateUUID().then(id => {\n      appId = id;\n      cy.CreateAppInFirstListedWorkspace(id);\n      localStorage.setItem(\"AppName\", appId);\n    });\n    cy.wait(3000);\n    cy.window().then(() => {\n      cy.wrap(interceptFlag).should(\"eq\", false);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/Analytics_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checks URL redirection from legacy URLs to slug URLs","suites":["Slug URLs"],"updatePoint":{"line":8,"column":58,"index":261},"line":8,"code":"  it(\"Checks URL redirection from legacy URLs to slug URLs\", () => {\n    applicationId = localStorage.getItem(\"applicationId\");\n    cy.location(\"pathname\").then(pathname => {\n      const pageId = pathname.split(\"/\")[3]?.split(\"-\").pop();\n      cy.visit(`/applications/${applicationId}/pages/${pageId}/edit`).then(() => {\n        cy.wait(10000);\n        cy.location(\"pathname\").then(pathname => {\n          const pageId = pathname.split(\"/\")[3]?.split(\"-\").pop();\n          const appName = localStorage.getItem(\"AppName\");\n          expect(pathname).to.be.equal(`/app/${appName}/page1-${pageId}/edit`);\n        });\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/ApplicationURL_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checks if application slug updates on the URL when application name changes","suites":["Slug URLs"],"updatePoint":{"line":22,"column":81,"index":922},"line":22,"code":"  it(\"Checks if application slug updates on the URL when application name changes\", () => {\n    cy.generateUUID().then(appName => {\n      applicationName = appName;\n      cy.AppSetupForRename();\n      cy.get(homePage.applicationName).type(`${appName}` + \"{enter}\");\n      cy.wait(\"@updateApplication\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n      cy.location(\"pathname\").then(pathname => {\n        const pageId = pathname.split(\"/\")[3]?.split(\"-\").pop();\n        expect(pathname).to.be.equal(`/app/${appName}/page1-${pageId}/edit`);\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/ApplicationURL_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checks if page slug updates on the URL when page name changes","suites":["Slug URLs"],"updatePoint":{"line":34,"column":67,"index":1500},"line":34,"code":"  it(\"Checks if page slug updates on the URL when page name changes\", () => {\n    cy.GlobalSearchEntity(\"Page1\"); // cy.RenameEntity(\"Page renamed\");\n\n    cy.get(`.t--entity-item:contains(Page1)`).within(() => {\n      cy.get(\".t--context-menu\").click({\n        force: true\n      });\n    });\n    cy.selectAction(\"Edit Name\");\n    cy.get(explorer.editEntity).last().type(\"Page renamed\", {\n      force: true\n    });\n    cy.get(\"body\").click(0, 0);\n    cy.wait(\"@updatePage\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.location(\"pathname\").then(pathname => {\n      const pageId = pathname.split(\"/\")[3]?.split(\"-\").pop();\n      expect(pathname).to.be.equal(`/app/${applicationName}/page-renamed-${pageId}/edit`);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/ApplicationURL_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check the url of old applications, upgrades version and compares appsmith.URL values","suites":["Slug URLs"],"updatePoint":{"line":53,"column":90,"index":2284},"line":53,"code":"  it(\"Check the url of old applications, upgrades version and compares appsmith.URL values\", () => {\n    cy.request(\"PUT\", `/api/v1/applications/${applicationId}`, {\n      applicationVersion: 1\n    }).then(response => {\n      const application = response.body.data;\n      expect(application.applicationVersion).to.equal(1);\n      cy.NavigateToHome();\n      cy.reload();\n      cy.SearchApp(applicationName);\n      cy.wait(\"@getPagesForCreateApp\").then(intercept => {\n        const {\n          application,\n          pages\n        } = intercept.response.body.data;\n        const defaultPage = pages.find(p => p.isDefault);\n        cy.location().should(loc => {\n          expect(loc.pathname).includes(`/applications/${application.id}/pages/${defaultPage.id}`);\n        });\n        cy.Createpage(\"NewPage\");\n        cy.get(\"@currentPageId\").then(currentPageId => {\n          cy.location().should(loc => {\n            expect(loc.pathname).includes(`/applications/${application.id}/pages/${currentPageId}`);\n          });\n          cy.get(explorer.addWidget).click();\n          cy.dragAndDropToCanvas(\"textwidget\", {\n            x: 300,\n            y: 700\n          });\n          cy.get(\".t--widget-textwidget\").should(\"exist\");\n          cy.updateCodeInput(\".t--property-control-text\", `{{appsmith.URL.pathname}}`);\n          cy.get(\".t--draggable-textwidget .bp3-ui-text\").should(\"contain.text\", `/applications/${application.id}/pages/${currentPageId}/edit`);\n          cy.get(\".t--upgrade\").click({\n            force: true\n          });\n          cy.get(\".t--upgrade-confirm\").click({\n            force: true\n          });\n          cy.wait(\"@getPagesForCreateApp\").then(intercept => {\n            const {\n              application,\n              pages\n            } = intercept.response.body.data;\n            const currentPage = pages.find(p => p.id === currentPageId);\n            cy.location().should(loc => {\n              expect(loc.pathname).includes(`/app/${application.slug}/${currentPage.slug}-${currentPage.id}`);\n            });\n            cy.get(\".t--draggable-textwidget .bp3-ui-text\").should(\"contain.text\", `/app/${application.slug}/${currentPage.slug}-${currentPage.id}/edit`);\n            cy.visit(`/${application.slug}/${currentPage.slug}-${currentPage.id}/edit`);\n            cy.location().should(loc => {\n              expect(loc.pathname).includes(`/app/${application.slug}/${currentPage.slug}-${currentPage.id}/edit`);\n            });\n          });\n        });\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/ApplicationURL_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checks redirect url","suites":["Slug URLs"],"updatePoint":{"line":109,"column":25,"index":4726},"line":109,"code":"  it(\"Checks redirect url\", () => {\n    cy.url().then(url => {\n      cy.LogOut();\n      cy.visit(url + \"?embed=true&a=b\");\n      cy.location().should(loc => {\n        expect(loc.search).to.eq(`?redirectUrl=${encodeURIComponent(url + \"?embed=true&a=b\")}`);\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/ApplicationURL_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check whether the duplicate application has the same dsl as the original","suites":["Duplicate application"],"updatePoint":{"line":15,"column":78,"index":484},"line":15,"code":"  it(\"Check whether the duplicate application has the same dsl as the original\", function () {\n    const appname = localStorage.getItem(\"AppName\");\n    cy.SearchEntityandOpen(\"Input1\");\n    cy.intercept(\"PUT\", \"/api/v1/layouts/*/pages/*\").as(\"inputUpdate\");\n    cy.testJsontext(\"defaulttext\", \"A\");\n    cy.wait(\"@inputUpdate\").then(response => {\n      parentApplicationDsl = response.response.body.data.dsl;\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(2000);\n    cy.NavigateToHome();\n    cy.get(homePage.searchInput).type(appname); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(2000);\n    cy.get(homePage.applicationCard).first().trigger(\"mouseover\");\n    cy.get(homePage.appMoreIcon).first().click({\n      force: true\n    });\n    cy.get(homePage.duplicateApp).click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(\"@cloneApp\").then(httpResponse => {\n      const application = httpResponse.response.body.data;\n      cy.wait(4000);\n      cy.wait(\"@getPage\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n      cy.get(\"@getPage\").then(httpResponse => {\n        const page = httpResponse.response.body.data;\n        duplicateApplicationDsl = httpResponse.response.body.data.layouts[0].dsl;\n        cy.log(JSON.stringify(duplicateApplicationDsl));\n        cy.log(JSON.stringify(parentApplicationDsl));\n        expect(JSON.stringify(duplicateApplicationDsl)).to.deep.equal(JSON.stringify(parentApplicationDsl));\n        cy.url().should(\"include\", `/${application.slug}/${page.slug}-${page.id}`);\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/DuplicateApplication_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Dynamic Layout - Change Layout","suites":["Dynamic Layout Functionality"],"updatePoint":{"line":16,"column":36,"index":565},"line":16,"code":"  it(\"Dynamic Layout - Change Layout\", function () {\n    cy.get(commonlocators.layoutControls).eq(4).click();\n    cy.get(commonlocators.canvas).invoke(\"width\").should(\"be.eq\", 450);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/DynamicLayout_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Dynamic Layout - New Page should have selected Layout","suites":["Dynamic Layout Functionality"],"updatePoint":{"line":20,"column":59,"index":776},"line":20,"code":"  it(\"Dynamic Layout - New Page should have selected Layout\", function () {\n    cy.get(pages.AddPage).first().click();\n    cy.skipGenerateCRUDPage();\n    cy.get(commonlocators.canvas).invoke(\"width\").should(\"be.eq\", 450);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/DynamicLayout_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check if exporting app flow works as expected","suites":["Export application as a JSON file"],"updatePoint":{"line":16,"column":51,"index":445},"line":16,"code":"  it(\"Check if exporting app flow works as expected\", function () {\n    cy.get(commonlocators.homeIcon).click({\n      force: true\n    });\n    appname = localStorage.getItem(\"AppName\");\n    cy.get(homePage.searchInput).type(appname); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(2000);\n    cy.get(homePage.applicationCard).first().trigger(\"mouseover\");\n    cy.get(homePage.appMoreIcon).first().click({\n      force: true\n    });\n    cy.get(homePage.exportAppFromMenu).click({\n      force: true\n    });\n    cy.get(homePage.toastMessage).should(\"contain\", \"Successfully exported\"); // fetching the exported app file manually to be verified.\n\n    cy.get(`a[id=t--export-app-link]`).then(anchor => {\n      const url = anchor.prop(\"href\");\n      cy.request(url).then(({\n        headers\n      }) => {\n        expect(headers).to.have.property(\"content-type\", \"application/json\");\n        expect(headers).to.have.property(\"content-disposition\", `attachment; filename*=UTF-8''${appname}.json`);\n      });\n    });\n    cy.LogOut();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/ExportApplication_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"User with admin access,should be able to export the app","suites":["Export application as a JSON file"],"updatePoint":{"line":44,"column":61,"index":1507},"line":44,"code":"  it(\"User with admin access,should be able to export the app\", function () {\n    cy.LogintoApp(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.generateUUID().then(uid => {\n      workspaceId = uid;\n      appid = uid;\n      localStorage.setItem(\"WorkspaceName\", workspaceId);\n      cy.createWorkspace();\n      cy.wait(\"@createWorkspace\").then(interception => {\n        newWorkspaceName = interception.response.body.data.name;\n        cy.renameWorkspace(newWorkspaceName, workspaceId);\n      });\n      cy.CreateAppForWorkspace(workspaceId, appid);\n      cy.wait(\"@getPagesForCreateApp\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n      cy.get(\"h2\").contains(\"Drag and drop a widget here\");\n      cy.get(homePage.shareApp).click({\n        force: true\n      });\n      cy.shareApp(Cypress.env(\"TESTUSERNAME1\"), homePage.adminRole);\n      cy.LogOut();\n      cy.LogintoApp(Cypress.env(\"TESTUSERNAME1\"), Cypress.env(\"TESTPASSWORD1\"));\n      cy.wait(2000);\n      cy.log({\n        appid\n      });\n      cy.get(homePage.searchInput).type(appid); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n      cy.wait(2000);\n      cy.get(homePage.applicationCard).first().trigger(\"mouseover\");\n      cy.get(homePage.appMoreIcon).first().click({\n        force: true\n      });\n      cy.get(homePage.exportAppFromMenu).should(\"be.visible\");\n      cy.get(\"body\").click(50, 40);\n      cy.get(homePage.applicationCard).first().trigger(\"mouseover\");\n      cy.get(homePage.appEditIcon).first().click({\n        force: true\n      });\n      cy.get(homePage.applicationName).click({\n        force: true\n      });\n      cy.contains(\"Export Application\").should(\"be.visible\");\n    });\n    cy.LogOut();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/ExportApplication_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"User with developer access,should not be able to export the app","suites":["Export application as a JSON file"],"updatePoint":{"line":88,"column":69,"index":3241},"line":88,"code":"  it(\"User with developer access,should not be able to export the app\", function () {\n    cy.LogintoApp(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.generateUUID().then(uid => {\n      workspaceId = uid;\n      appid = uid;\n      localStorage.setItem(\"WorkspaceName\", workspaceId);\n      cy.createWorkspace();\n      cy.wait(\"@createWorkspace\").then(interception => {\n        newWorkspaceName = interception.response.body.data.name;\n        cy.renameWorkspace(newWorkspaceName, workspaceId);\n      });\n      cy.CreateAppForWorkspace(workspaceId, appid);\n      cy.wait(\"@getPagesForCreateApp\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n      cy.get(\"h2\").contains(\"Drag and drop a widget here\");\n      cy.get(homePage.shareApp).click({\n        force: true\n      });\n      cy.shareApp(Cypress.env(\"TESTUSERNAME1\"), homePage.developerRole);\n      cy.LogOut();\n      cy.LogintoApp(Cypress.env(\"TESTUSERNAME1\"), Cypress.env(\"TESTPASSWORD1\"));\n      cy.wait(2000);\n      cy.log({\n        appid\n      });\n      cy.get(homePage.searchInput).type(appid); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n      cy.wait(2000);\n      cy.get(homePage.applicationCard).first().trigger(\"mouseover\");\n      cy.get(homePage.appMoreIcon).first().click({\n        force: true\n      });\n      cy.get(homePage.exportAppFromMenu).should(\"not.exist\");\n      cy.get(\"body\").click(50, 40);\n      cy.get(homePage.applicationCard).first().trigger(\"mouseover\");\n      cy.get(homePage.appEditIcon).first().click({\n        force: true\n      });\n      cy.get(homePage.applicationName).click({\n        force: true\n      });\n      cy.contains(\"Export Application\").should(\"not.exist\");\n    });\n    cy.LogOut();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/ExportApplication_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"User with viewer access,should not be able to export the app","suites":["Export application as a JSON file"],"updatePoint":{"line":132,"column":66,"index":4974},"line":132,"code":"  it(\"User with viewer access,should not be able to export the app\", function () {\n    cy.LogintoApp(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.generateUUID().then(uid => {\n      workspaceId = uid;\n      appid = uid;\n      localStorage.setItem(\"WorkspaceName\", workspaceId);\n      cy.createWorkspace();\n      cy.wait(\"@createWorkspace\").then(interception => {\n        newWorkspaceName = interception.response.body.data.name;\n        cy.renameWorkspace(newWorkspaceName, workspaceId);\n      });\n      cy.CreateAppForWorkspace(workspaceId, appid);\n      cy.wait(\"@getPagesForCreateApp\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n      cy.get(\"h2\").contains(\"Drag and drop a widget here\");\n      cy.get(homePage.shareApp).click({\n        force: true\n      });\n      cy.shareApp(Cypress.env(\"TESTUSERNAME1\"), homePage.viewerRole);\n      cy.LogOut();\n      cy.LogintoApp(Cypress.env(\"TESTUSERNAME1\"), Cypress.env(\"TESTPASSWORD1\"));\n      cy.wait(2000);\n      cy.log({\n        appid\n      });\n      cy.get(homePage.searchInput).type(appid); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n      cy.wait(2000);\n      cy.get(homePage.applicationCard).first().trigger(\"mouseover\");\n      cy.get(homePage.appEditIcon).should(\"not.exist\");\n    });\n    cy.LogOut();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/ExportApplication_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Fork a template to an workspace","suites":["Fork a template to an workspace"],"updatePoint":{"line":6,"column":37,"index":249},"line":6,"code":"  it(\"Fork a template to an workspace\", () => {\n    cy.NavigateToHome();\n    cy.get(templateLocators.templatesTab).click();\n    cy.get(templateLocators.templateForkButton).first().click();\n    cy.get(templateLocators.dialogForkButton).click();\n    cy.get(commonlocators.canvas).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/Fork_Template_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check if the forked application has the same dsl as the original","suites":["Fork application across workspaces"],"updatePoint":{"line":15,"column":70,"index":654},"line":15,"code":"  it(\"Check if the forked application has the same dsl as the original\", function () {\n    const appname = localStorage.getItem(\"AppName\");\n    cy.SearchEntityandOpen(\"Input1\");\n    cy.intercept(\"PUT\", \"/api/v1/layouts/*/pages/*\").as(\"inputUpdate\");\n    cy.testJsontext(\"defaulttext\", \"A\");\n    cy.wait(\"@inputUpdate\").then(response => {\n      parentApplicationDsl = response.response.body.data.dsl;\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(2000);\n    cy.NavigateToHome();\n    cy.get(homePage.searchInput).type(appname); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(2000);\n    cy.get(homePage.applicationCard).first().trigger(\"mouseover\");\n    cy.get(homePage.appMoreIcon).first().click({\n      force: true\n    });\n    cy.get(homePage.forkAppFromMenu).click({\n      force: true\n    });\n    cy.get(homePage.forkAppWorkspaceButton).click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(4000);\n    cy.wait(\"@postForkAppWorkspace\").then(httpResponse => {\n      expect(httpResponse.status).to.equal(200);\n    }); // check that forked application has same dsl\n\n    cy.get(\"@getPage\").then(httpResponse => {\n      const data = httpResponse.response.body.data;\n      forkedApplicationDsl = data.layouts[0].dsl;\n      cy.log(JSON.stringify(forkedApplicationDsl));\n      cy.log(JSON.stringify(parentApplicationDsl));\n      expect(JSON.stringify(forkedApplicationDsl)).to.contain(JSON.stringify(parentApplicationDsl));\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/ForkApplication_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Non signed user should be able to fork a public forkable app","suites":["Fork application across workspaces"],"updatePoint":{"line":53,"column":66,"index":2190},"line":53,"code":"  it(\"Non signed user should be able to fork a public forkable app\", function () {\n    cy.NavigateToHome();\n    cy.get(homePage.homeIcon).click();\n    cy.get(homePage.optionsIcon).first().click();\n    cy.get(homePage.workspaceImportAppOption).click({\n      force: true\n    });\n    cy.get(homePage.workspaceImportAppModal).should(\"be.visible\");\n    cy.xpath(homePage.uploadLogo).attachFile(\"forkNonSignedInUser.json\");\n    cy.wait(\"@importNewApplication\").then(interception => {\n      const {\n        isPartialImport\n      } = interception.response.body.data;\n\n      if (isPartialImport) {\n        cy.get(reconnectDatasourceModal.SkipToAppBtn).click({\n          force: true\n        });\n        cy.wait(2000);\n      }\n\n      cy.PublishtheApp();\n      cy.get(\"button:contains('Share')\").first().click({\n        force: true\n      });\n      cy.enablePublicAccess();\n      cy.url().then(url => {\n        forkableAppUrl = url;\n        cy.get(homePage.profileMenu).click();\n        cy.get(homePage.signOutIcon).click();\n        cy.visit(forkableAppUrl);\n        cy.wait(8000);\n        cy.get(applicationLocators.forkButton).first().click({\n          force: true\n        });\n        cy.get(loginPageLocators.signupLink).click();\n        cy.generateUUID().then(uid => {\n          cy.get(signupPageLocators.username).type(`${uid}@appsmith.com`);\n          cy.get(signupPageLocators.password).type(uid);\n          cy.get(signupPageLocators.submitBtn).click();\n          cy.wait(10000);\n          cy.get(applicationLocators.forkButton).first().click({\n            force: true\n          });\n          cy.get(homePage.forkAppWorkspaceButton).should(\"be.visible\");\n        });\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/ForkApplication_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Clicking on filter should show the filter menu","suites":["GlobalSearch"],"updatePoint":{"line":21,"column":52,"index":719},"line":21,"code":"  it(\"Clicking on filter should show the filter menu\", () => {\n    cy.get(commonlocators.globalSearchTrigger).click({\n      force: true\n    });\n    cy.contains(globalSearchLocators.docHint, \"Snippets\").click();\n    cy.get(globalSearchLocators.filterButton).click();\n    cy.contains(\"Reset Filter\").should(\"be.visible\");\n    cy.get(\"body\").type(\"{esc}\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/GlobalSearch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. showsAndHidesUsingKeyboardShortcuts","suites":["GlobalSearch"],"updatePoint":{"line":30,"column":44,"index":1071},"line":30,"code":"  it(\"1. showsAndHidesUsingKeyboardShortcuts\", () => {\n    // wait for the page to load\n    cy.get(commonlocators.canvas);\n    const isMac = Cypress.platform === \"darwin\";\n\n    if (isMac) {\n      cy.get(\"body\").type(\"{cmd}{k}\");\n      cy.get(commonlocators.globalSearchModal);\n      cy.get(\"body\").type(\"{esc}\");\n      cy.get(commonlocators.globalSearchModal).should(\"not.exist\");\n    } else {\n      cy.get(\"body\").type(\"{ctrl}{k}\");\n      cy.get(commonlocators.globalSearchModal);\n      cy.get(\"body\").type(\"{esc}\");\n      cy.get(commonlocators.globalSearchModal).should(\"not.exist\");\n    }\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/GlobalSearch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. selectsWidget","suites":["GlobalSearch"],"updatePoint":{"line":47,"column":22,"index":1647},"line":47,"code":"  it(\"2. selectsWidget\", () => {\n    const table = dsl.dsl.children[2];\n    cy.get(commonlocators.globalSearchTrigger).click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.get(commonlocators.globalSearchInput).type(table.widgetName);\n    cy.get(\"body\").type(\"{enter}\");\n    cy.window().its(\"store\").invoke(\"getState\").then(state => {\n      const {\n        lastSelectedWidget\n      } = state.ui.widgetDragResize;\n      expect(lastSelectedWidget).to.be.equal(table.widgetId);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/GlobalSearch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. navigatesToApi","suites":["GlobalSearch"],"updatePoint":{"line":63,"column":23,"index":2203},"line":63,"code":"  it(\"3. navigatesToApi\", () => {\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"SomeApi\");\n    cy.get(commonlocators.globalSearchTrigger).click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.get(commonlocators.globalSearchInput).type(\"Page1\");\n    cy.get(\"body\").type(\"{enter}\");\n    cy.get(commonlocators.globalSearchTrigger).click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.get(commonlocators.globalSearchInput).type(\"SomeApi\");\n    cy.get(\"body\").type(\"{enter}\");\n    cy.window().its(\"store\").invoke(\"getState\").then(state => {\n      const {\n        actions\n      } = state.entities;\n      const expectedAction = actions.find(actions => actions.config.name === \"SomeApi\");\n      cy.location().should(loc => {\n        expect(loc.pathname).includes(expectedAction.config.id);\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/GlobalSearch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. navigatesToDatasourceHavingAQuery","suites":["GlobalSearch"],"updatePoint":{"line":90,"column":42,"index":3163},"line":90,"code":"  it(\"4. navigatesToDatasourceHavingAQuery\", () => {\n    cy.createPostgresDatasource();\n    cy.get(\"@createDatasource\").then(httpResponse => {\n      const expectedDatasource = httpResponse.response.body.data;\n      cy.NavigateToActiveDSQueryPane(expectedDatasource.name);\n      cy.get(commonlocators.globalSearchTrigger).click({\n        force: true\n      }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n      cy.wait(1000); // modal open transition should be deterministic\n\n      cy.get(commonlocators.globalSearchInput).type(\"Page1\");\n      cy.get(\"body\").type(\"{enter}\");\n      cy.get(commonlocators.globalSearchTrigger).click({\n        force: true\n      }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n      cy.wait(1000); // modal open transition should be deterministic\n\n      cy.get(commonlocators.globalSearchInput).type(expectedDatasource.name);\n      cy.get(\"body\").type(\"{enter}\");\n      cy.location().should(loc => {\n        expect(loc.pathname).includes(expectedDatasource.id);\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/GlobalSearch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. navigatesToPage","suites":["GlobalSearch"],"updatePoint":{"line":116,"column":24,"index":4191},"line":116,"code":"  it(\"5. navigatesToPage\", () => {\n    cy.Createpage(\"NewPage\");\n    cy.get(commonlocators.globalSearchTrigger).click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.get(commonlocators.globalSearchInput).type(\"Page1\");\n    cy.get(\"body\").type(\"{enter}\");\n    cy.window().its(\"store\").invoke(\"getState\").then(state => {\n      const {\n        pages\n      } = state.entities.pageList;\n      const expectedPage = pages.find(page => page.pageName === \"Page1\");\n      cy.location().should(loc => {\n        expect(loc.pathname).includes(expectedPage.pageId);\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/GlobalSearch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Shortcuts should get triggered when the modal is open","suites":["GlobalSearch"],"updatePoint":{"line":135,"column":62,"index":4871},"line":135,"code":"  it(\"6. Shortcuts should get triggered when the modal is open\", () => {\n    cy.get(commonlocators.globalSearchTrigger).click({\n      force: true\n    });\n    const isMac = Cypress.platform === \"darwin\";\n\n    if (isMac) {\n      cy.get(\"body\").type(\"{cmd}{p}\");\n      cy.get(globalSearchLocators.category).should(\"be.visible\");\n      cy.get(\"body\").type(\"{esc}\");\n      cy.get(commonlocators.globalSearchModal).should(\"not.exist\");\n    } else {\n      cy.get(\"body\").type(\"{ctrl}{p}\");\n      cy.get(globalSearchLocators.category).should(\"be.visible\");\n      cy.get(\"body\").type(\"{esc}\");\n      cy.get(commonlocators.globalSearchModal).should(\"not.exist\");\n    }\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/GlobalSearch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Api actions should have API as prefix","suites":["GlobalSearch"],"updatePoint":{"line":153,"column":46,"index":5520},"line":153,"code":"  it(\"7. Api actions should have API as prefix\", () => {\n    cy.get(globalSearchLocators.createNew).click({\n      force: true\n    });\n    cy.get(globalSearchLocators.blankDatasource).click({\n      force: true\n    });\n    cy.get(datasourceHomeLocators.createAuthApiDatasource).click();\n    cy.wait(\"@createDatasource\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.get(datasourceLocators.datasourceTitleLocator).click();\n    cy.get(`${datasourceLocators.datasourceTitleLocator} input`).clear().type(\"omnibarApiDatasource\", {\n      force: true\n    }).blur();\n    cy.get(globalSearchLocators.createNew).click({\n      force: true\n    });\n    cy.contains(globalSearchLocators.fileOperation, \"omnibarApiDatasource\").click();\n    cy.wait(\"@createNewApi\");\n    cy.get(datasourceHomeLocators.apiTxt).invoke(\"val\").then(title => expect(title).includes(\"Api\"));\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/GlobalSearch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. navigatesToGoogleSheetsQuery does not break again: Bug 15012","suites":["GlobalSearch"],"updatePoint":{"line":173,"column":69,"index":6435},"line":173,"code":"  it(\"8. navigatesToGoogleSheetsQuery does not break again: Bug 15012\", () => {\n    cy.createGoogleSheetsDatasource();\n    cy.renameDatasource(\"XYZ\");\n    cy.wait(4000);\n    cy.get(appPage.dropdownChevronLeft).click();\n    cy.get(commonlocators.globalSearchTrigger).click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000); // modal open transition should be deterministic\n\n    cy.get(commonlocators.globalSearchInput).type(\"XYZ\");\n    cy.get(\"body\").type(\"{enter}\");\n    cy.get(\".t--save-datasource\").contains(\"Save and Authorize\").should(\"be.visible\");\n    cy.deleteDatasource(\"XYZ\"); // this should be called at the end of the last test case in this spec file.\n\n    cy.NavigateToHome();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/GlobalSearch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check whether depedencies and references are shown correctly","suites":["Inspect Entity"],"updatePoint":{"line":7,"column":66,"index":224},"line":7,"code":"  it(\"Check whether depedencies and references are shown correctly\", function () {\n    cy.openPropertyPane(\"inputwidgetv2\");\n    cy.testJsontext(\"defaulttext\", \"{{Button1.text}}\");\n    cy.get(\".t--debugger\").click();\n    cy.contains(\".react-tabs__tab\", \"Inspect entity\").click();\n    cy.contains(\".t--dependencies-item\", \"Button1\").click();\n    cy.contains(\".t--dependencies-item\", \"Input1\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/Inspect_Element_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Modifying widget properties should log the same","suites":["Debugger logs"],"updatePoint":{"line":11,"column":53,"index":348},"line":11,"code":"  it(\"Modifying widget properties should log the same\", function () {\n    cy.wait(5000);\n    cy.get(\"button\").contains(\"Submit\").click({\n      force: true\n    });\n    cy.openPropertyPane(\"buttonwidget\");\n    cy.testJsontext(\"label\", \"Test\");\n    cy.get(\".t--debugger\").click();\n    cy.get(\".t--debugger-log-state\").contains(\"Test\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/Logs_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Reset debugger state","suites":["Debugger logs"],"updatePoint":{"line":21,"column":26,"index":660},"line":21,"code":"  it(\"Reset debugger state\", function () {\n    cy.get(\".t--property-control-visible\").find(\".t--js-toggle\").click();\n    cy.testJsontext(\"visible\", \"Test\");\n    cy.get(commonlocators.homeIcon).click({\n      force: true\n    });\n    cy.generateUUID().then(id => {\n      cy.CreateAppInFirstListedWorkspace(id);\n      cy.get(debuggerLocators.errorCount).should(\"not.exist\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/Logs_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Api headers need to be shown as headers in logs","suites":["Debugger logs"],"updatePoint":{"line":32,"column":53,"index":1072},"line":32,"code":"  it(\"Api headers need to be shown as headers in logs\", function () {// TODO\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/Logs_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Api body needs to be shown as JSON when possible","suites":["Debugger logs"],"updatePoint":{"line":34,"column":54,"index":1156},"line":34,"code":"  it(\"Api body needs to be shown as JSON when possible\", function () {// TODO\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/Logs_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Bug #15104 The Data is not displayed in Omnibar after clicking on learn more link from property pane","suites":["Omnibar functionality test cases"],"updatePoint":{"line":15,"column":109,"index":593},"line":15,"code":"  it(\"1. Bug #15104 The Data is not displayed in Omnibar after clicking on learn more link from property pane\", function () {\n    cy.dragAndDropToCanvas(\"audiowidget\", {\n      x: 300,\n      y: 500\n    });\n    cy.xpath('//span[text()=\"Learn more\"]').click();\n    cy.get(omnibar.openDocumentationLink).should(\"be.visible\");\n    cy.get(\"body\").click(0, 0);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/Omnibar_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2.Verify omnibar is present across all pages and validate its fields","suites":["Omnibar functionality test cases"],"updatePoint":{"line":24,"column":74,"index":918},"line":24,"code":"  it(\"2.Verify omnibar is present across all pages and validate its fields\", function () {\n    cy.get(omnibar.globalSearch).trigger(\"mouseover\").should(\"have.css\", \"background-color\", \"rgb(240, 240, 240)\");\n    cy.get(omnibar.globalSearch).click({\n      force: true\n    }); // verifying all sections are present in omnibar\n\n    cy.get(omnibar.categoryTitle).eq(0).should(\"have.text\", \"Navigate\").next().should(\"have.text\", \"Navigate to any page, widget or file across this project.\");\n    cy.get(omnibar.categoryTitle).eq(1).should(\"have.text\", \"Create New\").next().should(\"have.text\", \"Create a new Query, API or JS Object\");\n    cy.get(omnibar.categoryTitle).eq(2).should(\"have.text\", \"Use Snippets\").next().should(\"have.text\", \"Search and insert code snippets to perform complex actions quickly.\");\n    cy.get(omnibar.categoryTitle).eq(3).should(\"have.text\", \"Search Documentation\").next().should(\"have.text\", \"Find answers through Appsmith documentation.\");\n    cy.get(\"body\").type(\"{esc}\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/Omnibar_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Verify when user clicks on a debugging error, related documentation should open in omnibar","suites":["Omnibar functionality test cases"],"updatePoint":{"line":36,"column":99,"index":1945},"line":36,"code":"  it(\"3. Verify when user clicks on a debugging error, related documentation should open in omnibar\", function () {\n    // click on debugger icon\n    cy.get(commonlocators.debugger).should(\"be.visible\").click({\n      force: true\n    });\n    cy.get(commonlocators.errorTab).should(\"be.visible\").click({\n      force: true\n    });\n    cy.wait(500); // click on open documention from error tab\n\n    cy.get(commonlocators.debuggerContextMenu).click({\n      multiple: true\n    });\n    cy.xpath(commonlocators.openDocumentationfromErrorTab).first().click({\n      force: true\n    }); // verify omnibar is opened with relevant documentation\n\n    cy.wait(500);\n    cy.get(omnibar.globalSearchInput).should(\"have.value\", \"This value does not evaluate to type string\");\n    cy.get(omnibar.globalSearchClose).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/Omnibar_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Verify Create New section and its data, also create a new api, new js object and new cURL import from omnibar ","suites":["Omnibar functionality test cases"],"updatePoint":{"line":57,"column":119,"index":2776},"line":57,"code":"  it(\"4. Verify Create New section and its data, also create a new api, new js object and new cURL import from omnibar \", function () {\n    cy.intercept(\"POST\", \"/api/v1/actions\").as(\"createNewApi\");\n    cy.intercept(\"POST\", \"/api/v1/collections/actions\").as(\"createNewJSCollection\");\n    cy.get(omnibar.categoryTitle).eq(1).click(); // create new api, js object and cURL import from omnibar\n\n    cy.get(omnibar.createNew).eq(0).should(\"have.text\", \"New Blank API\");\n    cy.get(omnibar.createNew).eq(1).should(\"have.text\", \"New JS Object\");\n    cy.get(omnibar.createNew).eq(2).should(\"have.text\", \"New cURL Import\");\n    cy.get(omnibar.createNew).eq(0).click();\n    cy.wait(1000);\n    cy.wait(\"@createNewApi\");\n    cy.renameWithInPane(apiName);\n    cy.get(omnibar.globalSearch).click({\n      force: true\n    });\n    cy.get(omnibar.categoryTitle).eq(1).click();\n    cy.get(omnibar.createNew).eq(1).click();\n    cy.wait(1000);\n    cy.wait(\"@createNewJSCollection\");\n    cy.wait(1000);\n    cy.get(\".t--js-action-name-edit-field\").type(jsObjectName).wait(1000);\n    agHelper.WaitUntilToastDisappear(\"created successfully\");\n    cy.get(omnibar.globalSearch).click({\n      force: true\n    });\n    cy.get(omnibar.categoryTitle).eq(1).click();\n    cy.wait(1000);\n    cy.get(omnibar.createNew).eq(2).click();\n    cy.wait(1000);\n    cy.url().should(\"include\", \"curl-import?\");\n    cy.get('p:contains(\"Import from CURL\")').should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/Omnibar_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. On an invalid search, discord link should be displayed and on clicking that link, should open discord in new tab","suites":["Omnibar functionality test cases"],"updatePoint":{"line":89,"column":121,"index":4218},"line":89,"code":"  it(\"5. On an invalid search, discord link should be displayed and on clicking that link, should open discord in new tab\", function () {\n    // typing a random string in search bar\n    cy.get(omnibar.globalSearch).click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.get(omnibar.globalSearchInput).type(\"vnjkv\");\n    cy.wait(2000);\n    cy.get(omnibar.globalSearchInput).should(\"have.value\", \"vnjkv\"); // discord link should be visible\n\n    cy.get(omnibar.discordLink).should(\"be.visible\");\n    cy.window().then(win => {\n      cy.stub(win, \"open\", url => {\n        win.location.href = \"https://discord.com/invite/rBTTVJp\";\n      }).as(\"discordLink\");\n    }); // clicking on discord link should open discord\n\n    cy.get(omnibar.discordLink).click();\n    cy.get(\"@discordLink\").should(\"be.called\");\n    cy.wait(500);\n    cy.go(-1);\n    cy.wait(2000);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/Omnibar_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Verify Navigate section shows recently opened widgets and datasources","suites":["Omnibar functionality test cases"],"updatePoint":{"line":112,"column":78,"index":5037},"line":112,"code":"  it(\"6. Verify Navigate section shows recently opened widgets and datasources\", function () {\n    cy.get(\".bp3-icon-chevron-left\").click({\n      force: true\n    });\n    cy.openPropertyPane(\"buttonwidget\");\n    cy.get(omnibar.globalSearch).click({\n      force: true\n    });\n    cy.get(omnibar.categoryTitle).eq(0).click(); // verify recently opened items with their subtext i.e page name\n\n    cy.xpath(omnibar.recentlyopenItem).eq(0).should(\"have.text\", \"Button1\").next().should(\"have.text\", \"Page1\");\n    cy.xpath(omnibar.recentlyopenItem).eq(2).should(\"have.text\", \"Omnibar2\").next().should(\"have.text\", \"Page1\");\n    cy.xpath(omnibar.recentlyopenItem).eq(3).should(\"have.text\", \"Omnibar1\").next().should(\"have.text\", \"Page1\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/Omnibar_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Verify documentation should open in new tab, on clicking open documentation","suites":["Omnibar functionality test cases"],"updatePoint":{"line":126,"column":84,"index":5779},"line":126,"code":"  it(\"7. Verify documentation should open in new tab, on clicking open documentation\", function () {\n    //cy.get(omnibar.category).click()\n    cy.get(omnibar.globalSearch).click({\n      force: true\n    });\n    cy.get(omnibar.categoryTitle).eq(3).click({\n      force: true\n    });\n    cy.get(omnibar.openDocumentationLink).invoke(\"removeAttr\", \"target\").click().wait(2000);\n    cy.url().should(\"eq\", \"https://docs.appsmith.com/core-concepts/connecting-to-data-sources\"); // => true\n\n    cy.go(-1);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/Omnibar_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check debugger logs state when there are onPageLoad actions","suites":["Check debugger logs state when there are onPageLoad actions"],"updatePoint":{"line":13,"column":65,"index":474},"line":13,"code":"  it(\"Check debugger logs state when there are onPageLoad actions\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.testJsontext(\"tabledata\", \"{{TestApi.data.users}}\");\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"TestApi\");\n    cy.enterDatasourceAndPath(testdata.baseUrl, testdata.methods);\n    cy.SaveAndRunAPI();\n    cy.get(explorer.addWidget).click();\n    cy.reload(); // Wait for the debugger icon to be visible\n\n    cy.get(\".t--debugger\").should(\"be.visible\"); //cy.get(debuggerLocators.errorCount).should(\"not.exist\");\n\n    cy.wait(\"@postExecute\");\n    cy.contains(debuggerLocators.errorCount, 1);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/PageOnLoad_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"checks entity explorer and property pane visiblity","suites":["Preview mode functionality"],"updatePoint":{"line":11,"column":56,"index":371},"line":11,"code":"  it(\"checks entity explorer and property pane visiblity\", function () {\n    cy.get(\".t--switch-preview-mode-toggle\").click(); // in preview mode, entity explorer and property pane are not visible\n\n    cy.get(\".t--entity-explorer\").should(\"not.be.visible\");\n    cy.get(\".t--property-pane-sidebar\").should(\"not.be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/PreviewMode_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"checks if widgets can be selected or not","suites":["Preview mode functionality"],"updatePoint":{"line":17,"column":46,"index":691},"line":17,"code":"  it(\"checks if widgets can be selected or not\", function () {\n    // in preview mode, entity explorer and property pane are not visible\n    const selector = `.t--draggable-buttonwidget`;\n    cy.wait(500);\n    cy.get(selector).first().trigger(\"mouseover\", {\n      force: true\n    }).wait(500);\n    cy.get(`${selector}:first-of-type .t--widget-propertypane-toggle > .t--widget-name`).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/PreviewMode_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"check invisible widget should not show in proview mode and should show in edit mode","suites":["Preview mode functionality"],"updatePoint":{"line":26,"column":89,"index":1144},"line":26,"code":"  it(\"check invisible widget should not show in proview mode and should show in edit mode\", function () {\n    cy.get(\".t--switch-comment-mode-off\").click();\n    cy.openPropertyPane(\"buttonwidget\");\n    cy.UncheckWidgetProperties(commonlocators.visibleCheckbox); // button should not show in preview mode\n\n    cy.get(\".t--switch-preview-mode-toggle\").click();\n    cy.get(`${publishPage.buttonWidget} button`).should(\"not.exist\"); // Text widget should show\n\n    cy.get(`${publishPage.textWidget} .bp3-ui-text`).should(\"exist\"); // button should show in edit mode\n\n    cy.get(\".t--switch-comment-mode-off\").click();\n    cy.get(`${publishPage.buttonWidget} button`).should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/PreviewMode_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check if we should show the product updates button and it opens the updates modal","suites":["Check for product updates button and modal"],"updatePoint":{"line":4,"column":87,"index":234},"line":4,"code":"  it(\"Check if we should show the product updates button and it opens the updates modal\", function () {\n    cy.get(commonlocators.homeIcon).click({\n      force: true\n    }); //eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(2000);\n    cy.window().its(\"store\").invoke(\"getState\").then(state => {\n      const {\n        newReleasesCount,\n        releaseItems\n      } = state.ui.releases;\n\n      if (Array.isArray(releaseItems) && releaseItems.length > 0) {\n        cy.get(\"[data-cy=t--product-updates-btn]\").contains(\"What's New?\").click({\n          force: true\n        }); //eslint-disable-next-line cypress/no-unnecessary-waiting\n\n        cy.wait(500); // modal transition\n\n        cy.get(\".bp3-dialog-container\").contains(\"Product Updates\");\n        cy.get(\"[data-cy=t--product-updates-close-btn]\").click({\n          force: true\n        }); //eslint-disable-next-line cypress/no-unnecessary-waiting\n\n        cy.wait(500); // modal transition\n\n        cy.get(\".bp3-dialog-container\").should(\"not.exist\");\n      } else {\n        cy.get(\"[data-cy=t--product-updates-btn]\").should(\"not.exist\");\n      }\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/ProductUpdates_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Should redirect away from auth pages if already logged in","suites":["Check for redirects associated with auth pages"],"updatePoint":{"line":2,"column":63,"index":137},"line":2,"code":"  it(\"Should redirect away from auth pages if already logged in\", function () {\n    const loginPageRoute = \"/user/login\";\n    cy.visit(loginPageRoute); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(2000);\n    cy.location(\"pathname\").should(\"not.equal\", loginPageRoute);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/Redirects_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checks undo/redo in datasource forms","suites":["Undo/Redo functionality"],"updatePoint":{"line":16,"column":42,"index":643},"line":16,"code":"  it(\"Checks undo/redo in datasource forms\", () => {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.PostgreSQL).click();\n    cy.generateUUID().then(uid => {\n      postgresDatasourceName = uid;\n      cy.get(\".t--edit-datasource-name\").click();\n      cy.get(\".t--edit-datasource-name input\").clear().type(postgresDatasourceName, {\n        force: true\n      }).should(\"have.value\", postgresDatasourceName).blur();\n    });\n    cy.get(datasourceEditor.sectionAuthentication).click();\n    cy.get(datasourceEditor.username).type(datasourceFormData[\"postgres-username\"]);\n    cy.get(datasourceEditor.password).type(datasourceFormData[\"postgres-password\"]);\n    cy.get(datasourceEditor.sectionAuthentication).trigger(\"click\").wait(1000);\n    cy.get(\"body\").type(`{${modifierKey}}z`);\n    cy.get(`${datasourceEditor.sectionAuthentication} .bp3-icon-chevron-up`).should(\"exist\");\n    cy.get(\".t--application-name\").click({\n      force: true\n    });\n    cy.get(\"li:contains(Edit)\").eq(1).trigger(\"mouseover\");\n    cy.get(\"li:contains(Undo)\").click({\n      multiple: true\n    });\n    cy.get(datasourceEditor.username).should(\"be.empty\");\n    cy.get(datasourceEditor.saveBtn).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/Replay_Editor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checks undo/redo for Api pane","suites":["Undo/Redo functionality"],"updatePoint":{"line":44,"column":35,"index":1850},"line":44,"code":"  it(\"Checks undo/redo for Api pane\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.log(\"Navigation to API Panel screen successful\");\n    cy.CreateAPI(\"FirstAPI\");\n    cy.get(`${apiwidget.resourceUrl} .CodeMirror-placeholder`).should(\"have.text\", \"https://mock-api.appsmith.com/users\");\n    cy.enterDatasourceAndPath(testdata.baseUrl, testdata.methods);\n    cy.get(`${apiwidget.headerKey}`).type(\"Authorization\");\n    cy.get(\"body\").click(0, 0);\n    cy.get(apiwidget.settings).click({\n      force: true\n    }); //cy.get(apiwidget.onPageLoad).click({ force: true });\n\n    cy.get(\"body\").click(0, 0);\n    cy.get(\"body\").type(`{${modifierKey}}z`); // cy.wait(2000);\n    // cy.get(\"body\").type(`{${modifierKey}}z`);\n\n    cy.wait(2000);\n    cy.get(apiwidget.headers).should(\"have.class\", \"react-tabs__tab--selected\");\n    cy.get(\"body\").type(`{${modifierKey}}z`);\n    cy.get(`${apiwidget.resourceUrl} .CodeMirror-placeholder`).should(\"have.text\", \"https://mock-api.appsmith.com/users\");\n    cy.get(`${apiwidget.headerKey} .CodeMirror-placeholder`).should(\"have.text\", \"Key 1\");\n    cy.get(\"body\").type(`{${modifierKey}}{shift}z`);\n    cy.get(\"body\").type(`{${modifierKey}}{shift}z`);\n    cy.get(`${apiwidget.headerKey} .cm-m-null`).should(\"have.text\", \"Authorization\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/Replay_Editor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checks undo/redo in query editor","suites":["Undo/Redo functionality"],"updatePoint":{"line":69,"column":38,"index":3129},"line":69,"code":"  it(\"Checks undo/redo in query editor\", () => {\n    cy.NavigateToActiveDSQueryPane(postgresDatasourceName);\n    cy.get(queryLocators.templateMenu).click();\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"{{FirstAPI}}\", {\n      force: true,\n      parseSpecialCharSequences: false\n    });\n    cy.get(\"body\").click(0, 0); // verifying Relationships is visible on dynamic binding\n\n    cy.get(\".icon-text\").eq(1).within(() => {\n      cy.get(\".connection-type\").should(\"have.text\", \"Incoming entities\");\n    });\n    cy.get(\".icon-text\").eq(1).next().children().within(() => {\n      cy.get(\".connection\").should(\"have.text\", \"FirstAPI\");\n    });\n    cy.get(\".icon-text\").last().within(() => {\n      cy.get(\".connection-type\").should(\"have.text\", \"Outgoing entities\");\n    });\n    cy.get(\"body\").type(`{${modifierKey}}z`);\n    cy.get(\".CodeMirror-code\").should(\"not.have.text\", \"{{FirstAPI}}\");\n    cy.get(\"body\").click(0, 0);\n    cy.get(\"body\").type(`{${modifierKey}}{shift}z`);\n    cy.get(\".CodeMirror-code\").should(\"have.text\", \"{{FirstAPI}}\"); // undo/redo through app menu\n\n    cy.get(\".t--application-name\").click({\n      force: true\n    });\n    cy.get(\"li:contains(Edit)\").eq(1).trigger(\"mouseover\");\n    cy.get(\"li:contains(Undo)\").click({\n      multiple: true\n    });\n    cy.get(\".CodeMirror-code\").should(\"not.have.text\", \"{{FirstAPI}}\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/Replay_Editor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checks undo/redo in JS Objects","suites":["Undo/Redo functionality"],"updatePoint":{"line":102,"column":36,"index":4484},"line":102,"code":"  it(\"Checks undo/redo in JS Objects\", () => {\n    cy.NavigateToJSEditor();\n    cy.wait(1000);\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"{downarrow}{downarrow}{downarrow}  \").type(\"testJSFunction:()=>{},\");\n    cy.get(\"body\").type(`{${modifierKey}}z{${modifierKey}}z{${modifierKey}}z`); // verifying testJSFunction is not visible on page after undo\n\n    cy.contains(\"testJSFunction\").should(\"not.exist\");\n    cy.get(\"body\").type(`{${modifierKey}}{shift}z{${modifierKey}}{shift}z{${modifierKey}}{shift}z`); // verifying testJSFunction is visible on page after redo\n\n    cy.contains(\"testJSFunction\").should(\"exist\"); // performing undo from app menu\n\n    cy.get(\".t--application-name\").click({\n      force: true\n    });\n    cy.get(\"li:contains(Edit)\").eq(1).trigger(\"mouseover\");\n    cy.get(\"li:contains(Undo)\").click({\n      multiple: true\n    }); // cy.get(\".function-name\").should(\"not.contain.text\", \"test\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/Replay_Editor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checks undo/redo for Authenticated APIs","suites":["Undo/Redo functionality"],"updatePoint":{"line":121,"column":45,"index":5426},"line":121,"code":"  it(\"Checks undo/redo for Authenticated APIs\", () => {\n    cy.NavigateToAPI_Panel();\n    cy.get(apiwidget.createAuthApiDatasource).click({\n      force: true\n    });\n    cy.wait(2000);\n    cy.get(\"input[name='url']\").type(testdata.baseUrl);\n    cy.get(\"input[name='headers[0].key']\").type(testdata.headerKey);\n    cy.get(\"body\").click(0, 0);\n    cy.get(\"body\").type(`{${modifierKey}}z`);\n    cy.get(\"body\").type(`{${modifierKey}}z`);\n    cy.get(\"input[name='url']\").should(\"have.value\", \"\");\n    cy.get(\"input[name='headers[0].key']\").should(\"have.value\", \"\");\n    cy.get(\"body\").type(`{${modifierKey}}{shift}z`);\n    cy.get(\"body\").type(`{${modifierKey}}{shift}z`);\n    cy.get(\"input[name='url']\").should(\"have.value\", \"https://mock-api.appsmith.com/\");\n    cy.get(\"input[name='headers[0].key']\").should(\"have.value\", \"Content-Type\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/Replay_Editor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"checks undo/redo for new widgets","suites":["Undo/Redo functionality"],"updatePoint":{"line":18,"column":38,"index":633},"line":18,"code":"  it(\"checks undo/redo for new widgets\", function () {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"checkboxwidget\", {\n      x: 200,\n      y: 200\n    });\n    cy.get(\"body\").click();\n    cy.get(widgetsPage.checkboxWidget).should(\"exist\");\n    cy.get(\"body\").type(`{${modifierKey}}z`);\n    cy.wait(100);\n    cy.get(widgetsPage.checkboxWidget).should(\"not.exist\");\n    cy.get(\"body\").type(`{${modifierKey}}{shift}z`);\n    cy.wait(100);\n    cy.get(widgetsPage.checkboxWidget).should(\"exist\");\n  }); // it(\"checks moving of widgets\", function() {","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/Replay_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"checks undo/redo for toggle control in property pane","suites":["Undo/Redo functionality"],"updatePoint":{"line":67,"column":58,"index":2702},"line":67,"code":"  it(\"checks undo/redo for toggle control in property pane\", function () {\n    cy.openPropertyPane(\"checkboxwidget\");\n    cy.CheckWidgetProperties(commonlocators.disableCheckbox);\n    cy.get(\"body\").type(`{${modifierKey}}z`);\n    cy.wait(100);\n    cy.get(`${widgetsPage.disable} label`).should(\"not.have.class\", \"checked\");\n    cy.get(widgetLocators.checkboxWidget + \" \" + \"input\").should(\"not.be.disabled\");\n    cy.get(\"body\").type(`{${modifierKey}}{shift}z`);\n    cy.wait(100);\n    cy.get(`${widgetsPage.disable} label`).should(\"have.class\", \"checked\");\n    cy.get(widgetLocators.checkboxWidget + \" \" + \"input\").should(\"be.disabled\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/Replay_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"checks undo/redo for input control in property pane","suites":["Undo/Redo functionality"],"updatePoint":{"line":79,"column":57,"index":3344},"line":79,"code":"  it(\"checks undo/redo for input control in property pane\", function () {\n    cy.get(widgetsPage.inputLabelControl).type(\"1\");\n    cy.get(widgetsPage.inputLabelControl).contains(\"Label1\");\n    cy.get(\"body\").type(`{${modifierKey}}z`);\n    cy.wait(100);\n    cy.get(widgetsPage.inputLabelControl).contains(\"Label\");\n    cy.get(`${publish.checkboxWidget} label`).should(\"have.text\", \"Label\");\n    cy.get(\"body\").type(`{${modifierKey}}{shift}z`);\n    cy.wait(100);\n    cy.get(widgetsPage.inputLabelControl).contains(\"Label1\");\n    cy.get(`${publish.checkboxWidget} label`).should(\"have.text\", \"Label1\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/Replay_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"checks undo/redo for deletion of widgets","suites":["Undo/Redo functionality"],"updatePoint":{"line":91,"column":46,"index":3939},"line":91,"code":"  it(\"checks undo/redo for deletion of widgets\", function () {\n    cy.deleteWidget(widgetsPage.checkboxWidget);\n    cy.get(widgetsPage.checkboxWidget).should(\"not.exist\");\n    cy.get(\"body\").type(`{${modifierKey}}z`);\n    cy.wait(100);\n    cy.get(widgetsPage.checkboxWidget).should(\"exist\"); // cy.get(\"body\").type(`{${modifierKey}}{shift}z`);\n    // cy.wait(100);\n    // cy.get(widgetsPage.checkboxWidget).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/Replay_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"checks if property Pane is open on undo/redo property changes","suites":["Undo/Redo functionality"],"updatePoint":{"line":100,"column":67,"index":4394},"line":100,"code":"  it(\"checks if property Pane is open on undo/redo property changes\", function () {\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 400,\n      y: 400\n    });\n    cy.wait(100);\n    cy.get(widgetsPage.inputTextControl).type(\"1\");\n    cy.closePropertyPane();\n    cy.get(\"body\").type(`{${modifierKey}}z`);\n    cy.wait(100);\n    cy.get(widgetsPage.propertypaneText).should(\"exist\");\n    cy.get(widgetsPage.inputTextControl).contains(\"Label\");\n    cy.closePropertyPane();\n    cy.get(\"body\").type(`{${modifierKey}}{shift}z`);\n    cy.wait(100);\n    cy.get(widgetsPage.propertypaneText).should(\"exist\");\n    cy.get(widgetsPage.inputTextControl).contains(\"Label1\");\n    cy.deleteWidget(widgetsPage.textWidget);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/Replay_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"checks if toast is shown while undo/redo widget deletion or creation only the first time","suites":["Undo/Redo functionality"],"updatePoint":{"line":119,"column":94,"index":5132},"line":119,"code":"  it(\"checks if toast is shown while undo/redo widget deletion or creation only the first time\", function () {\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 400,\n      y: 400\n    });\n    localStorage.removeItem(\"undoToastShown\");\n    localStorage.removeItem(\"redoToastShown\");\n    cy.get(\"body\").type(`{${modifierKey}}z`);\n    cy.get(commonlocators.toastmsg).eq(0).contains(\"is removed\");\n    cy.get(commonlocators.toastmsg).eq(1).contains(\"REDO\");\n    cy.get(commonlocators.toastBody).first().click();\n    cy.wait(100);\n    cy.get(\"body\").type(`{${modifierKey}}{shift}z`);\n    cy.get(commonlocators.toastmsg).eq(0).contains(\"is added back\");\n    cy.get(commonlocators.toastmsg).eq(1).contains(\"UNDO\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/Replay_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"checks undo/redo for color picker","suites":["Undo/Redo functionality"],"updatePoint":{"line":135,"column":39,"index":5792},"line":135,"code":"  it(\"checks undo/redo for color picker\", function () {\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 100,\n      y: 100\n    });\n    cy.selectColor(\"textcolor\");\n    cy.get(\"body\").click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500);\n    cy.wait(\"@updateLayout\");\n    cy.readTextDataValidateCSS(\"color\", \"rgb(126, 34, 206)\");\n    cy.get(\"body\").type(`{${modifierKey}}z`);\n    cy.get(widgetsPage.textColor).first().invoke(\"attr\", \"value\").should(\"contain\", \"#231F20\");\n    cy.get(\"body\").type(`{${modifierKey}}{shift}z`);\n    cy.get(widgetsPage.textColor).first().invoke(\"attr\", \"value\").should(\"contain\", \"#7e22ce\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/Replay_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"checks undo/redo for option control for radio button","suites":["Undo/Redo functionality"],"updatePoint":{"line":153,"column":58,"index":6498},"line":153,"code":"  it(\"checks undo/redo for option control for radio button\", function () {\n    cy.dragAndDropToCanvas(\"radiogroupwidget\", {\n      x: 200,\n      y: 600\n    });\n    cy.get(widgetsPage.RadioInput).first().type(\"1\");\n    cy.get(widgetsPage.RadioInput).first().blur(); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(200);\n    cy.get(\"body\").type(`{${modifierKey}}z`);\n    cy.get(widgetsPage.RadioInput).first().invoke(\"attr\", \"value\").should(\"contain\", \"Yes\");\n    cy.get(\"body\").type(`{${modifierKey}}{shift}z`);\n    cy.get(widgetsPage.RadioInput).first().invoke(\"attr\", \"value\").should(\"contain\", \"Yes1\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/Replay_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Deleting bottom widget should resize canvas","suites":["Canvas Resize"],"updatePoint":{"line":9,"column":49,"index":277},"line":9,"code":"  it(\"Deleting bottom widget should resize canvas\", function () {\n    const InitHeight = \"2960px\";\n    cy.get(commonlocators.dropTarget).should(\"have.css\", \"height\", InitHeight);\n    cy.openPropertyPane(\"textwidget\");\n    cy.intercept(\"PUT\", \"/api/v1/layouts/*/pages/*\").as(\"deleteUpdate\");\n    cy.get(commonlocators.deleteWidget).click();\n    cy.wait(\"@deleteUpdate\").then(response => {\n      const dsl = response.response.body.data.dsl;\n      cy.get(commonlocators.dropTarget).should(\"have.css\", \"height\", `${dsl.bottomRow}px`);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/Resize_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Trigger errors need to be shown in the errors tab","suites":["Trigger errors in the debugger"],"updatePoint":{"line":9,"column":55,"index":297},"line":9,"code":"  it(\"Trigger errors need to be shown in the errors tab\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.testJsontext(\"tabledata\", `[{\"name\": 1}, {\"name\": 2}]`);\n    cy.get(\".t--property-control-onrowselected\").find(\".t--js-toggle\").click();\n    cy.EnableAllCodeEditors();\n    cy.testJsontext(\"onrowselected\", \"{{console.logs('test')}}\"); // Click on a row of the table widget\n\n    cy.isSelectRow(1);\n    cy.wait(5000);\n    cy.contains(debuggerLocators.errorCount, 2); // Fix code\n\n    cy.testJsontext(\"onrowselected\", \"{{console.log('test')}}\");\n    cy.isSelectRow(1);\n    cy.contains(debuggerLocators.errorCount, 1);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/TriggerErrors_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Should not create duplicate versions of widget on drop from explorer","suites":["Unique react keys"],"updatePoint":{"line":16,"column":74,"index":773},"line":16,"code":"  it(\"Should not create duplicate versions of widget on drop from explorer\", function () {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"chartwidget\", {\n      x: 200,\n      y: 200\n    });\n    cy.dragAndDropToCanvas(\"selectwidget\", {\n      x: 200,\n      y: 600\n    });\n    cy.dragAndDropToCanvas(\"selectwidget\", {\n      x: 200,\n      y: 700\n    });\n    cy.openPropertyPane(\"chartwidget\");\n    cy.deleteWidget(widgetsPage.chartWidget);\n    cy.get(widgetsPage.selectwidget).should(\"have.length\", 2);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/Unique_key_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Should not create duplicate versions of widget on widget copy","suites":["Unique react keys"],"updatePoint":{"line":34,"column":67,"index":1291},"line":34,"code":"  it(\"Should not create duplicate versions of widget on widget copy\", function () {\n    const modifierKey = Cypress.platform === \"darwin\" ? \"meta\" : \"ctrl\";\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"chartwidget\", {\n      x: 200,\n      y: 200\n    });\n    cy.dragAndDropToCanvas(\"selectwidget\", {\n      x: 200,\n      y: 600\n    }); //copy and paste\n\n    cy.openPropertyPane(\"selectwidget\");\n    cy.get(\"body\").type(`{${modifierKey}}c`); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500);\n    cy.get(\"body\").click();\n    cy.get(\"body\").type(`{${modifierKey}}v`, {\n      force: true\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(widgetsPage.selectwidget).should(\"have.length\", 2);\n    cy.openPropertyPane(\"chartwidget\");\n    cy.deleteWidget(widgetsPage.chartWidget);\n    cy.get(widgetsPage.selectwidget).should(\"have.length\", 2);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/Unique_key_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"User can access unsubscribe page","suites":["Unsubscribe comment email test spec"],"updatePoint":{"line":3,"column":38,"index":135},"line":3,"code":"  it(\"User can access unsubscribe page\", function () {\n    cy.visit(\"/unsubscribe/discussion/123456\");\n    cy.contains(\"Unsubscribe\");\n    cy.get(\"button\").contains(\"Unsubscribe me\").click();\n    cy.contains(\"successfully unsubscribed\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/UnsubscribeEmail_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Open the application menu and update name and then check whether update is reflected in the application card","suites":["Update Application"],"updatePoint":{"line":11,"column":114,"index":670},"line":11,"code":"  it(\"Open the application menu and update name and then check whether update is reflected in the application card\", () => {\n    cy.get(commonlocators.homeIcon).click({\n      force: true\n    });\n    appname = localStorage.getItem(\"AppName\");\n    cy.get(homePage.searchInput).clear();\n    cy.get(homePage.searchInput).type(appname); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(2000);\n    cy.get(homePage.applicationCard).first().trigger(\"mouseover\");\n    cy.get(homePage.appMoreIcon).first().click({\n      force: true\n    });\n    cy.get(homePage.applicationName).type(`${appname} updated` + \"{enter}\");\n    cy.wait(\"@updateApplication\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(homePage.applicationCardName).should(\"contain\", appname);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/UpdateApplication_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Open the application menu and update icon and then check whether update is reflected in the application card","suites":["Update Application"],"updatePoint":{"line":28,"column":114,"index":1483},"line":28,"code":"  it(\"Open the application menu and update icon and then check whether update is reflected in the application card\", () => {\n    cy.get(homePage.applicationIconSelector).first().click();\n    cy.wait(\"@updateApplication\").then(xhr => {\n      iconname = xhr.response.body.data.icon;\n    }).should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(homePage.applicationCard).first().within(() => {\n      cy.get(\"a\").invoke(\"attr\", \"name\").should(\"equal\", iconname);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/UpdateApplication_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check for errors in updating application name","suites":["Update Application"],"updatePoint":{"line":37,"column":51,"index":1924},"line":37,"code":"  it(\"Check for errors in updating application name\", () => {\n    cy.get(commonlocators.homeIcon).click({\n      force: true\n    });\n    cy.get(homePage.searchInput).clear();\n    cy.get(homePage.searchInput).type(appname); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(2000);\n    cy.get(homePage.applicationCard).first().trigger(\"mouseover\");\n    cy.get(homePage.appEditIcon).first().click({\n      force: true\n    });\n    cy.get(\"#loading\").should(\"not.exist\"); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(2000);\n    cy.AppSetupForRename();\n    cy.get(homePage.applicationName).type(\"  \");\n    cy.get(homePage.toastMessage).should(\"contain\", \"Application name can't be empty\");\n    cy.AppSetupForRename();\n    cy.get(homePage.applicationName).type(\"  \" + \"{enter}\");\n    cy.wait(\"@updateApplication\").should(\"have.nested.property\", \"response.body.data.name\", `${appname} updated`);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/UpdateApplication_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Updates the name of first application to very long name and checks whether update is reflected in the application card with a popover","suites":["Update Application"],"updatePoint":{"line":59,"column":139,"index":2953},"line":59,"code":"  it(\"Updates the name of first application to very long name and checks whether update is reflected in the application card with a popover\", () => {\n    cy.get(commonlocators.homeIcon).click({\n      force: true\n    });\n    cy.get(homePage.searchInput).clear(); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(2000);\n    cy.get(homePage.applicationCard).first().trigger(\"mouseover\");\n    cy.get(homePage.appMoreIcon).first().click({\n      force: true\n    });\n    cy.get(homePage.applicationName).type(veryLongAppName + \"{enter}\");\n    cy.get(homePage.appsContainer).click({\n      force: true\n    });\n    cy.wait(\"@updateApplication\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(2000);\n    cy.get(homePage.searchInput).type(veryLongAppName); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(2000);\n    cy.get(homePage.applicationCard).first().find(homePage.applicationCardName).trigger(\"mouseover\");\n    cy.get(\".bp3-popover-target.bp3-popover-open\").should(\"have.length\", 1);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/UpdateApplication_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"on click of apps on header, it should take to application home page","suites":["Preview mode functionality"],"updatePoint":{"line":8,"column":73,"index":276},"line":8,"code":"  it(\"on click of apps on header, it should take to application home page\", function () {\n    cy.PublishtheApp();\n    cy.get(\".t--back-to-home\").click();\n    cy.url().should(\"eq\", BASE_URL + \"applications\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/ViewMode_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check widget error state","suites":["Widget error state"],"updatePoint":{"line":14,"column":30,"index":471},"line":14,"code":"  it(\"Check widget error state\", function () {\n    cy.openPropertyPane(\"buttonwidget\");\n    cy.get(\".t--property-control-visible\").find(\".t--js-toggle\").click();\n    cy.EnableAllCodeEditors();\n    cy.testJsontext(\"visible\", \"Test\");\n    cy.contains(\".t--widget-error-count\", 1);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/Widget_Error_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check if the current value is shown in the debugger","suites":["Widget error state"],"updatePoint":{"line":21,"column":57,"index":783},"line":21,"code":"  it(\"Check if the current value is shown in the debugger\", function () {\n    cy.get(debuggerLocators.debuggerIcon).click();\n    cy.contains(\".react-tabs__tab\", \"Errors\").click();\n    cy.get(debuggerLocators.debuggerLogState).contains(\"Test\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/Widget_Error_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Switch to error tab when clicked on the debug button","suites":["Widget error state"],"updatePoint":{"line":26,"column":58,"index":1034},"line":26,"code":"  it(\"Switch to error tab when clicked on the debug button\", function () {\n    cy.get(\"[data-cy=t--tab-LOGS_TAB]\").click();\n    cy.get(\".t--property-control-onclick\").find(\".t--js-toggle\").click();\n    cy.EnableAllCodeEditors();\n    cy.testJsontext(\"onclick\", \"{{testApi.run()}}\");\n    cy.get(widgetLocators.buttonWidget).click();\n    cy.get(\".t--toast-debug-button\").click();\n    cy.contains(\".react-tabs__tab--selected\", \"Errors\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/Widget_Error_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"All errors should be expanded by default","suites":["Widget error state"],"updatePoint":{"line":35,"column":46,"index":1462},"line":35,"code":"  it(\"All errors should be expanded by default\", function () {\n    cy.get(debuggerLocators.errorMessage).should(\"be.visible\").should(\"have.length\", 2);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/Widget_Error_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Recent errors are shown at the top of the list","suites":["Widget error state"],"updatePoint":{"line":38,"column":52,"index":1626},"line":38,"code":"  it(\"Recent errors are shown at the top of the list\", function () {\n    cy.testJsontext(\"label\", \"{{[]}}\");\n    cy.get(debuggerLocators.debuggerLogState).first().contains(\"text\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/Widget_Error_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Clicking on a message should open the search menu","suites":["Widget error state"],"updatePoint":{"line":42,"column":55,"index":1816},"line":42,"code":"  it(\"Clicking on a message should open the search menu\", function () {\n    cy.get(debuggerLocators.errorMessage).first().click();\n    cy.get(debuggerLocators.menuItem).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/Widget_Error_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Undoing widget deletion should show errors if present","suites":["Widget error state"],"updatePoint":{"line":46,"column":59,"index":2017},"line":46,"code":"  it(\"Undoing widget deletion should show errors if present\", function () {\n    cy.deleteWidget();\n    cy.get(debuggerLocators.errorMessage).should(\"not.exist\");\n    cy.get(\"body\").type(`{${modifierKey}}z`);\n    cy.get(debuggerLocators.errorMessage).should(\"be.visible\").should(\"have.length\", 2);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OtherUIFeatures/Widget_Error_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check if the connection shows an error state when a connection has an error","suites":["Property pane connections error state"],"updatePoint":{"line":7,"column":81,"index":253},"line":7,"code":"  it(\"Check if the connection shows an error state when a connection has an error\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.testJsontext(\"tabledata\", \"{{error}}\");\n    cy.openPropertyPane(\"textwidget\");\n    cy.testJsontext(\"text\", \"{{Table1.searchText}}\"); // Find class which indicates an error\n\n    cy.get(\".t--connection-error\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/PropertyPane/PropertyPane_Connections_Error_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check if CTA is shown when there is no action","suites":["Property pane CTA to add an action"],"updatePoint":{"line":7,"column":51,"index":220},"line":7,"code":"  it(\"Check if CTA is shown when there is no action\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.get(\".t--propertypane-connect-cta\").scrollIntoView().should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/PropertyPane/PropertyPaneCTA_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check if CTA does not exist when there is an action","suites":["Property pane CTA to add an action"],"updatePoint":{"line":11,"column":57,"index":422},"line":11,"code":"  it(\"Check if CTA does not exist when there is an action\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"FirstAPI\");\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.get(\".t--propertypane-connect-cta\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/PropertyPane/PropertyPaneCTA_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Ensure text is visible for js enabled field when a section is collapsed by default","suites":["Property pane js enabled field"],"updatePoint":{"line":12,"column":88,"index":383},"line":12,"code":"  it(\"Ensure text is visible for js enabled field when a section is collapsed by default\", function () {\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.get(\".t--property-pane-section-collapse-submitbuttonstyles\").click();\n    cy.get(\".t--property-control-buttonvariant\").find(\".t--js-toggle\").first().click();\n    cy.get(\".t--property-control-buttonvariant\").find(\".t--js-toggle\").first().should(\"have.class\", \"is-active\");\n    cy.get(\".t--property-control-buttonvariant .CodeMirror-code\").type(\"PRIMARY\");\n    cy.get(\".t--property-control-buttonvariant\").find(\".CodeMirror-code\").invoke(\"text\").should(\"equal\", \"PRIMARY\");\n    cy.closePropertyPane();\n    cy.wait(1000);\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.get(\".t--property-pane-section-collapse-submitbuttonstyles\").click();\n    cy.get(\".t--property-control-buttonvariant\").find(\".CodeMirror-code\").invoke(\"text\").should(\"equal\", \"PRIMARY\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/PropertyPane/PropertyPaneJsEnabledVisible_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Checks if theme can be changed to one of the existing themes","suites":["App Theming funtionality"],"updatePoint":{"line":24,"column":69,"index":1081},"line":24,"code":"  it(\"1. Checks if theme can be changed to one of the existing themes\", function () {\n    cy.get(commonlocators.changeThemeBtn).click({\n      force: true\n    }); // select a theme\n\n    cy.get(commonlocators.themeCard).last().click({\n      force: true\n    }); // check for alert\n\n    cy.get(`${commonlocators.themeCard}`).last().siblings(\"div\").first().invoke(\"text\").then(text => {\n      cy.get(commonlocators.toastmsg).contains(`Theme ${text} Applied`);\n    }); // check if color of canvas is same as theme bg color\n\n    cy.get(`${commonlocators.themeCard} > main`).last().invoke(\"css\", \"background-color\").then(backgroudColor => {\n      cy.get(commonlocators.canvas).should(\"have.css\", \"background-color\", backgroudColor);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ThemingTests/Basic_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Checks if theme can be edited","suites":["App Theming funtionality"],"updatePoint":{"line":41,"column":38,"index":1789},"line":41,"code":"  it(\"2. Checks if theme can be edited\", function () {\n    cy.get(commonlocators.selectThemeBackBtn).click({\n      force: true\n    }); // drop a button widget and click on body\n\n    cy.get(explorer.widgetSwitchId).click();\n    cy.dragAndDropToCanvas(\"buttonwidget\", {\n      x: 200,\n      y: 200\n    }); //iconbuttonwidget\n\n    cy.assertPageSave();\n    cy.get(\"canvas\").first(0).trigger(\"click\", {\n      force: true\n    }); //Click the back button //Commenting below since expanded by default\n    //cy.get(commonlocators.selectThemeBackBtn).click({ force: true });\n    //Click the border radius toggle\n    // cy.contains(\"Border\")\n    //   .click({ force: true })\n    //   .wait(500);\n    // change app border radius\n\n    cy.get(commonlocators.themeAppBorderRadiusBtn).eq(1).click({\n      force: true\n    }); // check if border radius is changed on button\n\n    cy.get(`${commonlocators.themeAppBorderRadiusBtn} > div`).eq(1).invoke(\"css\", \"border-top-left-radius\").then(borderRadius => {\n      cy.get(widgetsPage.widgetBtn).should(\"have.css\", \"border-radius\", borderRadius); // publish the app\n      // cy.PublishtheApp();\n\n      cy.get(widgetsPage.widgetBtn).should(\"have.css\", \"border-radius\", borderRadius);\n    }); //Change the color://Commenting below since expanded by default\n    //cy.contains(\"Color\").click({ force: true });\n    //Change the primary color:\n\n    cy.get(widgetsPage.colorPickerV2Popover).click({\n      force: true\n    }).click();\n    cy.get(widgetsPage.colorPickerV2Color).eq(-3).then($elem => {\n      cy.get($elem).click({\n        force: true\n      });\n      cy.get(widgetsPage.widgetBtn).should(\"have.css\", \"background-color\", $elem.css(\"background-color\"));\n    }); //Change the background color:\n\n    cy.get(\".border-2\").last().click({\n      force: true\n    });\n    cy.wait(500);\n    cy.get(widgetsPage.colorPickerV2Popover).click({\n      force: true\n    }).click();\n    cy.get(widgetsPage.colorPickerV2Color).first().then($elem => {\n      cy.get($elem).click({\n        force: true\n      });\n      cy.get(commonlocators.canvas).should(\"have.css\", \"background-color\", $elem.css(\"background-color\"));\n    }); //Change the shadow //Commenting below since expanded by default\n    //cy.contains(\"Shadow\").click({ force: true });\n\n    cy.contains(\"App Box Shadow\").siblings(\"div\").children(\"span\").last().then($elem => {\n      cy.get($elem).click({\n        force: true\n      });\n      cy.get(widgetsPage.widgetBtn).should(\"have.css\", \"box-shadow\", $elem.css(\"box-shadow\"));\n    }); //Change the font //Commenting below since expanded by default\n    //cy.contains(\"Font\").click({ force: true });\n\n    cy.get(\"span[name='expand-more']\").then($elem => {\n      cy.get($elem).click({\n        force: true\n      });\n      cy.wait(250);\n      cy.get(\".ads-dropdown-options-wrapper div\").children().eq(2).then($childElem => {\n        cy.get($childElem).click({\n          force: true\n        });\n        cy.get(widgetsPage.widgetBtn).should(\"have.css\", \"font-family\", $childElem.children().last().text());\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ThemingTests/Basic_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Checks if the theme can be saved","suites":["App Theming funtionality"],"updatePoint":{"line":122,"column":41,"index":4833},"line":122,"code":"  it(\"3. Checks if the theme can be saved\", () => {\n    //Click on dropDown elipses\n    cy.contains(\"Theme Properties\").closest(\"div\").siblings().first().find(\"button\").click({\n      force: true\n    }); // .then(($elem) => {\n    //   cy.get(`${$elem} button`).click({ force: true });\n    // })\n\n    cy.wait(300); //Click on save theme dropdown option\n\n    cy.contains(\"Save theme\").click({\n      force: true\n    });\n    cy.wait(200); //Type the name of the theme:\n\n    cy.get(\"input[placeholder='My theme']\").type(\"testtheme\"); //Click on save theme button\n\n    cy.get(\"a[type='submit']\").click({\n      force: true\n    });\n    cy.wait(200);\n    cy.get(commonlocators.toastMsg).contains(\"Theme testtheme Saved\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ThemingTests/Basic_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Verify Save Theme after changing all properties & widgets conform to the selected theme","suites":["App Theming funtionality"],"updatePoint":{"line":145,"column":96,"index":5606},"line":145,"code":"  it(\"4. Verify Save Theme after changing all properties & widgets conform to the selected theme\", () => {\n    cy.get(explorer.widgetSwitchId).click();\n    cy.dragAndDropToCanvas(\"iconbuttonwidget\", {\n      x: 200,\n      y: 300\n    });\n    cy.assertPageSave();\n    cy.get(\"canvas\").first(0).trigger(\"click\", {\n      force: true\n    }); //#region Change Font & verify widgets:\n    // cy.contains(\"Font\")\n    //   .click({ force: true })\n    //   .wait(200);//Commenting below since expanded by default\n\n    cy.get(\"span[name='expand-more']\").then($elem => {\n      cy.get($elem).click({\n        force: true\n      });\n      cy.wait(250);\n      cy.get(\".ads-dropdown-options-wrapper div\").children().eq(4).then($childElem => {\n        cy.get($childElem).click({\n          force: true\n        });\n        cy.get(widgetsPage.iconWidgetBtn).should(\"have.css\", \"font-family\", $childElem.children().last().text());\n        cy.get(widgetsPage.widgetBtn).should(\"have.css\", \"font-family\", $childElem.children().last().text());\n      });\n    }); //#endregion\n    //#region Change Color & verify widgets:\n    //Change the primary color:\n    // cy.contains(\"Color\")\n    //   .click({ force: true })\n    //   .wait(200);\n\n    cy.get(widgetsPage.colorPickerV2Popover).click({\n      force: true\n    }).click();\n    cy.get(widgetsPage.colorPickerV2Color).eq(-15).then($elem => {\n      cy.get($elem).click({\n        force: true\n      });\n      cy.get(widgetsPage.iconWidgetBtn).should(\"have.css\", \"background-color\", $elem.css(\"background-color\"));\n      cy.get(widgetsPage.widgetBtn).should(\"have.css\", \"background-color\", $elem.css(\"background-color\"));\n    }); //Change the background color:\n\n    cy.get(\".border-2\").last().click({\n      force: true\n    });\n    cy.wait(500);\n    cy.get(widgetsPage.colorPickerV2Popover).click({\n      force: true\n    }).click();\n    cy.get(widgetsPage.colorPickerV2Color).eq(23).then($elem => {\n      cy.get($elem).click({\n        force: true\n      });\n      cy.get(commonlocators.canvas).should(\"have.css\", \"background-color\", $elem.css(\"background-color\"));\n    }); //#endregion\n    //#region Change Border radius & verify widgets\n    // cy.contains(\"Border\")\n    //   .click({ force: true })\n    //   .wait(200);\n\n    cy.get(commonlocators.themeAppBorderRadiusBtn).eq(2).click({\n      force: true\n    });\n    cy.get(`${commonlocators.themeAppBorderRadiusBtn} > div`).eq(2).invoke(\"css\", \"border-top-left-radius\").then(borderRadius => {\n      cy.get(widgetsPage.iconWidgetBtn).should(\"have.css\", \"border-radius\", borderRadius);\n      cy.get(widgetsPage.widgetBtn).should(\"have.css\", \"border-radius\", borderRadius);\n    }); //#endregion\n    //#region Change the shadow & verify widgets\n    //cy.contains(\"Shadow\").click({ force: true });\n\n    cy.contains(\"App Box Shadow\").siblings(\"div\").children(\"span\").first().then($elem => {\n      cy.get($elem).click({\n        force: true\n      });\n      cy.get(widgetsPage.iconWidgetBtn).should(\"have.css\", \"box-shadow\", $elem.css(\"box-shadow\"));\n      cy.get(widgetsPage.widgetBtn).should(\"have.css\", \"box-shadow\", $elem.css(\"box-shadow\"));\n    }); //#endregion\n    //#region Click on dropDown elipses\n\n    cy.contains(\"Theme Properties\").closest(\"div\").siblings().first().find(\"button\").click({\n      force: true\n    });\n    cy.wait(300); //#endregion\n    //Click on save theme dropdown option & close it\n\n    cy.contains(\"Save theme\").click({\n      force: true\n    });\n    cy.wait(200);\n    cy.xpath(\"//*[text()='Save Theme']/following-sibling::button\").click(); //Click on save theme dropdown option & cancel it\n\n    cy.contains(\"Theme Properties\").closest(\"div\").siblings().first().find(\"button\").click({\n      force: true\n    });\n    cy.wait(300);\n    cy.contains(\"Save theme\").click({\n      force: true\n    });\n    cy.wait(200);\n    cy.xpath(\"//span[text()='Cancel']/parent::a\").click(); //Click on save theme dropdown option, give duplicte name & save it\n\n    cy.contains(\"Theme Properties\").closest(\"div\").siblings().first().find(\"button\").click({\n      force: true\n    });\n    cy.wait(300);\n    cy.contains(\"Save theme\").click({\n      force: true\n    });\n    cy.wait(200); //Type the name of the theme:\n\n    cy.get(\"input[placeholder='My theme']\").type(\"testtheme\");\n    cy.contains(\"Name must be unique\");\n    cy.get(\"input[placeholder='My theme']\").clear().type(\"VioletYellowTheme\"); //Click on save theme button\n\n    cy.xpath(\"//span[text()='Save theme']/parent::a\").click({\n      force: true\n    });\n    cy.wait(200);\n    cy.get(commonlocators.toastMsg).contains(\"Theme VioletYellowTheme Saved\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ThemingTests/Basic_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Verify Themes exists under respective section when ChangeTheme button is cicked in properties with Apply Theme & Trash as applicable","suites":["App Theming funtionality"],"updatePoint":{"line":267,"column":141,"index":10227},"line":267,"code":"  it(\"5. Verify Themes exists under respective section when ChangeTheme button is cicked in properties with Apply Theme & Trash as applicable\", () => {\n    //Click on change theme:\n    cy.get(commonlocators.changeThemeBtn).click({\n      force: true\n    });\n    cy.xpath(applyTheme(\"Your Themes\", \"testtheme\")).click({\n      force: true\n    }).wait(1000); //Changing to testtheme\n\n    cy.contains(\"Applied Theme\").click().parent().siblings().find(\".t--theme-card > main > main\").invoke(\"css\", \"background-color\").then(backgroudColor => {\n      expect(backgroudColor).to.eq(\"rgb(131, 24, 67)\");\n    }); //Check if the saved theme is present under 'Yours Themes' section with Trash button\n\n    cy.xpath(applyTheme(\"Your Themes\", \"testtheme\")).should(\"exist\");\n    cy.xpath(themesDeletebtn(\"Your Themes\", \"testtheme\")).should(\"exist\");\n    cy.xpath(applyTheme(\"Your Themes\", \"VioletYellowTheme\")).should(\"exist\");\n    cy.xpath(themesDeletebtn(\"Your Themes\", \"VioletYellowTheme\")).should(\"exist\");\n    cy.xpath(applyTheme(\"Featured Themes\", \"Earth\")).should(\"exist\");\n    cy.xpath(themesDeletebtn(\"Featured Themes\", \"Earth\")).should(\"not.exist\");\n    cy.xpath(applyTheme(\"Featured Themes\", \"Sunrise\")).should(\"exist\");\n    cy.xpath(themesDeletebtn(\"Featured Themes\", \"Sunrise\")).should(\"not.exist\");\n    cy.xpath(applyTheme(\"Featured Themes\", \"Pacific\")).should(\"exist\");\n    cy.xpath(themesDeletebtn(\"Featured Themes\", \"Pacific\")).should(\"not.exist\");\n    cy.xpath(applyTheme(\"Featured Themes\", \"Pampas\")).should(\"exist\");\n    cy.xpath(themesDeletebtn(\"Featured Themes\", \"Pampas\")).should(\"not.exist\"); // cy.contains(\"Featured Themes\")\n    //   .siblings()\n    //   .find(\".t--theme-card\")\n    //   .siblings()\n    //   .should(\"contain.text\", \"Rounded\").siblings()\n    //   .contains('Apply Theme');\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ThemingTests/Basic_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Verify the custom theme can be deleted","suites":["App Theming funtionality"],"updatePoint":{"line":298,"column":47,"index":11937},"line":298,"code":"  it(\"6. Verify the custom theme can be deleted\", () => {\n    //Check if the saved theme is present under 'Yours Themes' section\n    // cy.contains(\"Your Themes\")\n    //   .siblings()\n    //   .find(\".t--theme-card\")\n    //   .parent()\n    //   .find(\"button\").eq(0)\n    //   .click({ force: true });\n    //   cy.wait(200);\n    cy.xpath(themesDeletebtn(\"Your Themes\", \"testtheme\")).click().wait(200);\n    cy.contains(\"Do you really want to delete this theme? This process cannot be undone.\"); //Click on Delete theme trash icon & close it\n\n    cy.xpath(\"//*[text()='Are you sure?']/following-sibling::button\").click();\n    cy.get(commonlocators.toastMsg).should(\"not.exist\"); //Click on Delete theme trash icon & cancel it\n\n    cy.xpath(themesDeletebtn(\"Your Themes\", \"testtheme\")).click().wait(200);\n    cy.xpath(\"//span[text()='Cancel']/parent::a\").click();\n    cy.get(commonlocators.toastMsg).should(\"not.exist\"); //Click on Delete theme trash icon & delete it\n\n    cy.xpath(themesDeletebtn(\"Your Themes\", \"testtheme\")).click().wait(200);\n    cy.contains(\"Delete\").click({\n      force: true\n    }); //check for delete alert\n\n    cy.wait(500);\n    cy.get(commonlocators.toastMsg).contains(\"Theme testtheme Deleted\");\n    cy.xpath(applyTheme(\"Your Themes\", \"testtheme\")).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ThemingTests/Basic_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Verify user able to change between saved theme & already existing Featured themes","suites":["App Theming funtionality"],"updatePoint":{"line":326,"column":90,"index":13279},"line":326,"code":"  it(\"7. Verify user able to change between saved theme & already existing Featured themes\", () => {\n    //#region Pampas\n    cy.xpath(applyTheme(\"Featured Themes\", \"Pampas\")).click({\n      force: true\n    }).wait(1000); //Changing to one of featured themes\n\n    cy.contains(\"Applied Theme\").click().parent().siblings().find(\".t--theme-card > main > section > div > main\").eq(0).invoke(\"css\", \"background-color\").then(backgroudColor => {\n      expect(backgroudColor).to.eq(\"rgb(5, 150, 105)\");\n    });\n    cy.contains(\"Applied Theme\").click().parent().siblings().find(\".t--theme-card > main > section > div > main\").eq(1).invoke(\"css\", \"background-color\").then(backgroudColor => {\n      expect(backgroudColor).to.eq(\"rgb(236, 253, 245)\");\n    }); //#endregion\n    //#region Classic\n\n    cy.xpath(applyTheme(\"Featured Themes\", \"Classic\")).click({\n      force: true\n    }).wait(1000); //Changing to one of featured themes\n\n    cy.contains(\"Applied Theme\").click().parent().siblings().find(\".t--theme-card > main > section > div > main\").eq(0).invoke(\"css\", \"background-color\").then(backgroudColor => {\n      expect(backgroudColor).to.eq(\"rgb(22, 163, 74)\");\n    });\n    cy.contains(\"Applied Theme\").click().parent().siblings().find(\".t--theme-card > main > section > div > main\").eq(1).invoke(\"css\", \"background-color\").then(backgroudColor => {\n      expect(backgroudColor).to.eq(\"rgb(246, 246, 246)\");\n    }); //#endregion\n    //#region Modern\n\n    cy.xpath(applyTheme(\"Featured Themes\", \"Modern\")).click({\n      force: true\n    }).wait(1000); //Changing to one of featured themes\n\n    cy.contains(\"Applied Theme\").click().parent().siblings().find(\".t--theme-card > main > section > div > main\").eq(0).invoke(\"css\", \"background-color\").then(backgroudColor => {\n      expect(backgroudColor).to.eq(\"rgb(85, 61, 233)\");\n    });\n    cy.contains(\"Applied Theme\").click().parent().siblings().find(\".t--theme-card > main > section > div > main\").eq(1).invoke(\"css\", \"background-color\").then(backgroudColor => {\n      expect(backgroudColor).to.eq(\"rgb(246, 246, 246)\");\n    }); //#endregion\n    //#region Sunrise\n\n    cy.xpath(applyTheme(\"Featured Themes\", \"Sunrise\")).click({\n      force: true\n    }).wait(1000); //Changing to one of featured themes\n\n    cy.contains(\"Applied Theme\").click().parent().siblings().find(\".t--theme-card > main > section > div > main\").eq(0).invoke(\"css\", \"background-color\").then(backgroudColor => {\n      expect(backgroudColor).to.eq(\"rgb(239, 68, 68)\");\n    });\n    cy.contains(\"Applied Theme\").click().parent().siblings().find(\".t--theme-card > main > section > div > main\").eq(1).invoke(\"css\", \"background-color\").then(backgroudColor => {\n      expect(backgroudColor).to.eq(\"rgb(255, 241, 242)\");\n    }); //#endregion\n    //#region Water Lily\n\n    cy.xpath(applyTheme(\"Featured Themes\", \"Water Lily\")).click({\n      force: true\n    }).wait(1000); //Changing to one of featured themes\n\n    cy.contains(\"Applied Theme\").click().parent().siblings().find(\".t--theme-card > main > section > div > main\").eq(0).invoke(\"css\", \"background-color\").then(backgroudColor => {\n      expect(backgroudColor).to.eq(\"rgb(219, 39, 119)\");\n    });\n    cy.contains(\"Applied Theme\").click().parent().siblings().find(\".t--theme-card > main > section > div > main\").eq(1).invoke(\"css\", \"background-color\").then(backgroudColor => {\n      expect(backgroudColor).to.eq(\"rgb(253, 242, 248)\");\n    }); //#endregion\n    //#region Pacific\n\n    cy.xpath(applyTheme(\"Featured Themes\", \"Pacific\")).click({\n      force: true\n    }).wait(1000); //Changing to one of featured themes\n\n    cy.contains(\"Applied Theme\").click().parent().siblings().find(\".t--theme-card > main > section > div > main\").eq(0).invoke(\"css\", \"background-color\").then(backgroudColor => {\n      expect(backgroudColor).to.eq(\"rgb(8, 145, 178)\");\n    });\n    cy.contains(\"Applied Theme\").click().parent().siblings().find(\".t--theme-card > main > section > div > main\").eq(1).invoke(\"css\", \"background-color\").then(backgroudColor => {\n      expect(backgroudColor).to.eq(\"rgb(236, 254, 255)\");\n    }); //#endregion\n    //#region Earth\n\n    cy.xpath(applyTheme(\"Featured Themes\", \"Earth\")).click({\n      force: true\n    }).wait(1000); //Changing to one of featured themes\n\n    cy.contains(\"Applied Theme\").click().parent().siblings().find(\".t--theme-card > main > section > div > main\").eq(0).invoke(\"css\", \"background-color\").then(backgroudColor => {\n      expect(backgroudColor).to.eq(\"rgb(59, 130, 246)\");\n    });\n    cy.contains(\"Applied Theme\").click().parent().siblings().find(\".t--theme-card > main > section > div > main\").eq(1).invoke(\"css\", \"background-color\").then(backgroudColor => {\n      expect(backgroudColor).to.eq(\"rgb(239, 246, 255)\");\n    }); //#endregion\n    //#region Moon\n\n    cy.xpath(applyTheme(\"Featured Themes\", \"Moon\")).click({\n      force: true\n    }).wait(1000); //Changing to one of featured themes\n\n    cy.contains(\"Applied Theme\").click().parent().siblings().find(\".t--theme-card > main > section > div > main\").eq(0).invoke(\"css\", \"background-color\").then(backgroudColor => {\n      expect(backgroudColor).to.eq(\"rgb(100, 116, 139)\");\n    });\n    cy.contains(\"Applied Theme\").click().parent().siblings().find(\".t--theme-card > main > section > div > main\").eq(1).invoke(\"css\", \"background-color\").then(backgroudColor => {\n      expect(backgroudColor).to.eq(\"rgb(248, 250, 252)\");\n    }); //#endregion\n    //#region VioletYellowTheme\n\n    cy.xpath(applyTheme(\"Your Themes\", \"VioletYellowTheme\")).click({\n      force: true\n    }).wait(1000); //Changing to created test theme\n\n    cy.contains(\"Applied Theme\").click().parent().siblings().find(\".t--theme-card > main > section > div > main\").eq(0).invoke(\"css\", \"background-color\").then(backgroudColor => {\n      expect(backgroudColor).to.eq(\"rgb(126, 34, 206)\");\n    });\n    cy.contains(\"Applied Theme\").click().parent().siblings().find(\".t--theme-card > main > section > div > main\").eq(1).invoke(\"css\", \"background-color\").then(backgroudColor => {\n      expect(backgroudColor).to.eq(\"rgb(253, 224, 71)\");\n    }); //#endregion\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ThemingTests/Basic_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. Verify widgets conform to the selected theme in Publish mode","suites":["App Theming funtionality"],"updatePoint":{"line":435,"column":69,"index":19330},"line":435,"code":"  it(\"8. Verify widgets conform to the selected theme in Publish mode\", () => {\n    cy.PublishtheApp(); //cy.wait(4000); //for theme to settle\n\n    cy.get(\"body\").should(\"have.css\", \"font-family\", \"Montserrat\"); //Font\n\n    cy.xpath(\"//div[@id='root']//section/parent::div\").should(\"have.css\", \"background-color\", \"rgb(253, 224, 71)\"); //Background Color\n\n    cy.get(widgetsPage.widgetBtn).should(\"have.css\", \"background-color\", \"rgb(126, 34, 206)\"); //Widget Color\n\n    cy.get(publish.iconWidgetBtn).should(\"have.css\", \"background-color\", \"rgb(126, 34, 206)\"); //Widget Color\n\n    cy.get(widgetsPage.widgetBtn).should(\"have.css\", \"border-radius\", \"24px\"); //Border Radius\n\n    cy.get(publish.iconWidgetBtn).should(\"have.css\", \"border-radius\", \"24px\"); //Border Radius\n\n    cy.get(widgetsPage.widgetBtn).should(\"have.css\", \"box-shadow\", \"none\"); //Shadow\n\n    cy.get(publish.iconWidgetBtn).should(\"have.css\", \"box-shadow\", \"none\"); //Shadow\n    //Verify Share button\n\n    cy.contains(\"Share\").should(\"have.css\", \"border-top-color\", \"rgb(126, 34, 206)\"); //Color\n\n    cy.contains(\"Share\").closest(\"div\").should(\"have.css\", \"font-family\", \"Montserrat\"); //Font\n    //Verify Edit App button\n\n    cy.contains(\"Edit App\").should(\"have.css\", \"background-color\", \"rgb(126, 34, 206)\"); //Color\n\n    cy.contains(\"Edit App\").closest(\"div\").should(\"have.css\", \"font-family\", \"Montserrat\"); //Font\n\n    cy.get(publish.backToEditor).click({\n      force: true\n    }).wait(3000);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ThemingTests/Basic_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"9. Verify Adding new Individual widgets & it can change Color, Border radius, Shadow & can revert [Color/Border Radius] to already selected theme","suites":["App Theming funtionality"],"updatePoint":{"line":468,"column":151,"index":20883},"line":468,"code":"  it(\"9. Verify Adding new Individual widgets & it can change Color, Border radius, Shadow & can revert [Color/Border Radius] to already selected theme\", () => {\n    cy.get(explorer.widgetSwitchId).click();\n    cy.dragAndDropToCanvas(\"buttonwidget\", {\n      x: 200,\n      y: 400\n    }); //another button widget\n\n    cy.assertPageSave(); //Change Color & verify\n\n    cy.get(widgetsPage.colorPickerV2Popover).click({\n      force: true\n    }).click();\n    cy.get(widgetsPage.colorPickerV2Color).eq(35).then($elem => {\n      cy.get($elem).click({\n        force: true\n      });\n      cy.get(widgetsPage.widgetBtn).eq(1).should(\"have.css\", \"background-color\", $elem.css(\"background-color\") //rgb(134, 239, 172)\n      ); //new widget with its own color\n\n      cy.get(widgetsPage.widgetBtn).eq(0).should(\"have.css\", \"background-color\", \"rgb(126, 34, 206)\"); //old widgets still conforming to theme color\n\n      cy.get(widgetsPage.iconWidgetBtn).should(\"have.css\", \"background-color\", \"rgb(126, 34, 206)\");\n    }); //Change Border & verify\n\n    cy.get(\".t--button-tab-0px\").click();\n    cy.get(\".t--button-tab-0px\").eq(0).invoke(\"css\", \"border-top-left-radius\").then(borderRadius => {\n      cy.get(widgetsPage.widgetBtn).eq(1).should(\"have.css\", \"border-radius\", borderRadius //0px\n      );\n      cy.get(widgetsPage.iconWidgetBtn).should(\"have.css\", \"border-radius\", \"24px\");\n      cy.get(widgetsPage.widgetBtn).eq(0).should(\"have.css\", \"border-radius\", \"24px\");\n    }); //Change Shadow & verify\n\n    cy.get(\".t--button-tab-0.10px\").click();\n    cy.get(\".t--button-tab-0.10px div\").eq(0).invoke(\"css\", \"box-shadow\").then(boxshadow => {\n      cy.get(widgetsPage.widgetBtn).eq(1).should(\"have.css\", \"box-shadow\", boxshadow //rgba(0, 0, 0, 0.1) 0px 10px 15px -3px, rgba(0, 0, 0, 0.05) 0px 4px 6px -2px\n      );\n      cy.get(widgetsPage.iconWidgetBtn).should(\"have.css\", \"box-shadow\", \"none\");\n      cy.get(widgetsPage.widgetBtn).eq(0).should(\"have.css\", \"box-shadow\", \"none\");\n    });\n    cy.assertPageSave();\n    cy.PublishtheApp(); //Verify Background color\n\n    cy.get(widgetsPage.widgetBtn).eq(1).should(\"have.css\", \"background-color\", \"rgb(134, 239, 172)\" //rgb(134, 239, 172)\n    ); //new widget with its own color\n    ////old widgets still conforming to theme color\n\n    cy.get(widgetsPage.widgetBtn).eq(0).should(\"have.css\", \"background-color\", \"rgb(126, 34, 206)\");\n    cy.get(publish.iconWidgetBtn).should(\"have.css\", \"background-color\", \"rgb(126, 34, 206)\"); //Verify Border radius\n\n    cy.get(widgetsPage.widgetBtn).eq(1).should(\"have.css\", \"border-radius\", \"0px\");\n    cy.get(publish.iconWidgetBtn).should(\"have.css\", \"border-radius\", \"24px\");\n    cy.get(widgetsPage.widgetBtn).eq(0).should(\"have.css\", \"border-radius\", \"24px\"); //Verify Box shadow\n\n    cy.get(widgetsPage.widgetBtn).eq(1).should(\"have.css\", \"box-shadow\", \"rgba(0, 0, 0, 0.1) 0px 10px 15px -3px, rgba(0, 0, 0, 0.05) 0px 4px 6px -2px\");\n    cy.get(publish.iconWidgetBtn).should(\"have.css\", \"box-shadow\", \"none\");\n    cy.get(widgetsPage.widgetBtn).eq(0).should(\"have.css\", \"box-shadow\", \"none\");\n    cy.get(publish.backToEditor).click({\n      force: true\n    }).wait(1000); //Resetting back to theme\n\n    ee.NavigateToSwitcher(\"explorer\");\n    ee.ExpandCollapseEntity(\"WIDGETS\"); //to expand widgets\n\n    ee.SelectEntityByName(\"Button2\");\n    cy.get(\".t--property-control-buttoncolor .reset-button\").then($elem => {\n      $elem[0].removeAttribute(\"display: none\");\n      $elem[0].click();\n    });\n    cy.get(widgetsPage.widgetBtn).eq(1).should(\"have.css\", \"background-color\", \"rgb(126, 34, 206)\"); //verify widget reverted to theme color\n\n    cy.get(\".t--property-control-borderradius .reset-button\").then($elem => {\n      $elem[0].removeAttribute(\"display: none\");\n      $elem[0].click();\n    });\n    cy.get(widgetsPage.widgetBtn).eq(1).should(\"have.css\", \"border-radius\", \"24px\"); //the new widget with reverted styles also conforming to theme\n\n    cy.PublishtheApp();\n    cy.wait(2000); //for theme to settle\n\n    cy.get(\"body\").should(\"have.css\", \"font-family\", \"Montserrat\"); //Font\n\n    cy.xpath(\"//div[@id='root']//section/parent::div\").should(\"have.css\", \"background-color\", \"rgb(253, 224, 71)\"); //Background Color\n\n    cy.get(widgetsPage.widgetBtn).eq(0).should(\"have.css\", \"background-color\", \"rgb(126, 34, 206)\"); //Widget Color\n\n    cy.get(widgetsPage.widgetBtn).eq(1).should(\"have.css\", \"background-color\", \"rgb(126, 34, 206)\"); //Widget Color\n\n    cy.get(publish.iconWidgetBtn).should(\"have.css\", \"background-color\", \"rgb(126, 34, 206)\"); //Widget Color\n\n    cy.get(widgetsPage.widgetBtn).eq(0).should(\"have.css\", \"border-radius\", \"24px\"); //Border Radius\n\n    cy.get(widgetsPage.widgetBtn).eq(1).should(\"have.css\", \"border-radius\", \"24px\"); //Border Radius\n\n    cy.get(publish.iconWidgetBtn).should(\"have.css\", \"border-radius\", \"24px\"); //Border Radius\n\n    cy.get(widgetsPage.widgetBtn).eq(0).should(\"have.css\", \"box-shadow\", \"none\"); //Shadow\n\n    cy.get(widgetsPage.widgetBtn).eq(1).should(\"have.css\", \"box-shadow\", \"rgba(0, 0, 0, 0.1) 0px 10px 15px -3px, rgba(0, 0, 0, 0.05) 0px 4px 6px -2px\"); //Since Shadow revert option does not exixts\n\n    cy.get(publish.iconWidgetBtn).should(\"have.css\", \"box-shadow\", \"none\"); //Shadow\n    //Verify Share button\n\n    cy.contains(\"Share\").should(\"have.css\", \"border-top-color\", \"rgb(126, 34, 206)\"); //Color\n\n    cy.contains(\"Share\").closest(\"div\").should(\"have.css\", \"font-family\", \"Montserrat\"); //Font\n    //Verify Edit App button\n\n    cy.contains(\"Edit App\").should(\"have.css\", \"background-color\", \"rgb(126, 34, 206)\"); //Color\n\n    cy.contains(\"Edit App\").closest(\"div\").should(\"have.css\", \"font-family\", \"Montserrat\"); //Font\n\n    cy.get(publish.backToEditor).click({\n      force: true\n    }).wait(2000);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ThemingTests/Basic_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"10. Verify Chainging theme should not affect Individual widgets with changed Color, Border radius, Shadow & can revert to newly selected theme","suites":["App Theming funtionality"],"updatePoint":{"line":583,"column":148,"index":26622},"line":583,"code":"  it(\"10. Verify Chainging theme should not affect Individual widgets with changed Color, Border radius, Shadow & can revert to newly selected theme\", () => {\n    cy.get(\"canvas\").first(0).trigger(\"click\", {\n      force: true\n    });\n    cy.get(commonlocators.changeThemeBtn).click({\n      force: true\n    }); //Changing to one of featured themes & then changing individual widget properties\n\n    cy.xpath(applyTheme(\"Featured Themes\", \"Sunrise\")).click({\n      force: true\n    }).wait(2000); //Change individual widget properties for Button1\n\n    ee.NavigateToSwitcher(\"explorer\");\n    ee.ExpandCollapseEntity(\"WIDGETS\"); //to expand widgets\n\n    ee.SelectEntityByName(\"Button1\"); //Change Color & verify\n\n    cy.get(widgetsPage.colorPickerV2Popover).click({\n      force: true\n    }).click();\n    cy.get(widgetsPage.colorPickerV2Color).eq(17).then($elem => {\n      cy.get($elem).click({\n        force: true\n      });\n      cy.get(widgetsPage.widgetBtn).eq(0).should(\"have.css\", \"background-color\", $elem.css(\"background-color\")); //new widget with its own color\n\n      cy.get(widgetsPage.widgetBtn).eq(1).should(\"have.css\", \"background-color\", \"rgb(239, 68, 68)\"); //old widgets still conforming to theme color\n\n      cy.get(widgetsPage.iconWidgetBtn).should(\"have.css\", \"background-color\", \"rgb(239, 68, 68)\");\n    }); //Change Border & verify\n\n    cy.get(\".t--button-tab-0\\\\.375rem\").click().wait(500);\n    cy.get(\".t--button-tab-0\\\\.375rem div\").eq(0).invoke(\"css\", \"border-top-left-radius\").then(borderRadius => {\n      cy.get(widgetsPage.widgetBtn).eq(0).should(\"have.css\", \"border-radius\", borderRadius //6px\n      );\n      cy.get(widgetsPage.iconWidgetBtn).should(\"have.css\", \"border-radius\", \"24px\");\n      cy.get(widgetsPage.widgetBtn).eq(1).should(\"have.css\", \"border-radius\", \"24px\");\n    }); //Change Shadow & verify\n\n    cy.get(\".t--button-tab-0.1px\").click().wait(500);\n    cy.get(\".t--button-tab-0.1px div\").invoke(\"css\", \"box-shadow\").then(boxshadow => {\n      cy.get(widgetsPage.widgetBtn).eq(0).should(\"have.css\", \"box-shadow\", boxshadow //rgba(0, 0, 0, 0.1) 0px 1px 3px 0px, rgba(0, 0, 0, 0.06) 0px 1px 2px 0px\n      );\n      cy.get(widgetsPage.iconWidgetBtn).should(\"have.css\", \"box-shadow\", \"none\");\n      cy.get(widgetsPage.widgetBtn).eq(1).should(\"have.css\", \"box-shadow\", //same value as previous box shadow selection\n      //since revertion is not possible for box shadow - hence this widget maintains the same value\n      \"rgba(0, 0, 0, 0.1) 0px 10px 15px -3px, rgba(0, 0, 0, 0.05) 0px 4px 6px -2px\");\n    });\n    cy.assertPageSave(); //Add deploy mode verification here also!\n\n    cy.PublishtheApp(); //Verify Background color\n\n    cy.get(widgetsPage.widgetBtn).eq(0).should(\"have.css\", \"background-color\", \"rgb(252, 165, 165)\"); //new widget with its own color\n    ////old widgets still conforming to theme color\n\n    cy.get(widgetsPage.widgetBtn).eq(1).should(\"have.css\", \"background-color\", \"rgb(239, 68, 68)\");\n    cy.get(publish.iconWidgetBtn).should(\"have.css\", \"background-color\", \"rgb(239, 68, 68)\"); //Verify Border radius\n\n    cy.get(widgetsPage.widgetBtn).eq(0).should(\"have.css\", \"border-radius\", \"6px\");\n    cy.get(publish.iconWidgetBtn).should(\"have.css\", \"border-radius\", \"24px\");\n    cy.get(widgetsPage.widgetBtn).eq(1).should(\"have.css\", \"border-radius\", \"24px\"); //Verify Box shadow\n\n    cy.get(widgetsPage.widgetBtn).eq(0).should(\"have.css\", \"box-shadow\", \"rgba(0, 0, 0, 0.1) 0px 1px 3px 0px, rgba(0, 0, 0, 0.06) 0px 1px 2px 0px\");\n    cy.get(publish.iconWidgetBtn).should(\"have.css\", \"box-shadow\", \"none\");\n    cy.get(widgetsPage.widgetBtn).eq(1).should(\"have.css\", \"box-shadow\", \"rgba(0, 0, 0, 0.1) 0px 10px 15px -3px, rgba(0, 0, 0, 0.05) 0px 4px 6px -2px\");\n    cy.get(publish.backToEditor).click({\n      force: true\n    }).wait(1000); //Resetting back to theme\n\n    ee.NavigateToSwitcher(\"explorer\");\n    ee.ExpandCollapseEntity(\"WIDGETS\"); //to expand widgets\n\n    ee.SelectEntityByName(\"Button1\");\n    cy.get(\".t--property-control-buttoncolor .reset-button\").then($elem => {\n      $elem[0].removeAttribute(\"display: none\");\n      $elem[0].click();\n    });\n    cy.get(widgetsPage.widgetBtn).eq(0).should(\"have.css\", \"background-color\", \"rgb(239, 68, 68)\"); //verify widget reverted to theme color\n\n    cy.get(\".t--property-control-borderradius .reset-button\").then($elem => {\n      $elem[0].removeAttribute(\"display: none\");\n      $elem[0].click();\n    });\n    cy.get(widgetsPage.widgetBtn).eq(0).should(\"have.css\", \"border-radius\", \"24px\"); //the new widget with reverted styles also conforming to theme\n\n    cy.PublishtheApp();\n    cy.wait(2000); //for theme to settle\n\n    cy.get(\"body\").should(\"have.css\", \"font-family\", \"Rubik\"); //Font for Rounded theme\n\n    cy.xpath(\"//div[@id='root']//section/parent::div\").should(\"have.css\", \"background-color\", \"rgb(255, 241, 242)\"); //Background Color of canvas\n\n    cy.get(widgetsPage.widgetBtn).eq(0).should(\"have.css\", \"background-color\", \"rgb(239, 68, 68)\"); //Widget Color\n\n    cy.get(widgetsPage.widgetBtn).eq(1).should(\"have.css\", \"background-color\", \"rgb(239, 68, 68)\"); //Widget Color\n\n    cy.get(publish.iconWidgetBtn).should(\"have.css\", \"background-color\", \"rgb(239, 68, 68)\"); //Widget Color\n\n    cy.get(widgetsPage.widgetBtn).eq(0).should(\"have.css\", \"border-radius\", \"24px\"); //Border Radius\n\n    cy.get(widgetsPage.widgetBtn).eq(1).should(\"have.css\", \"border-radius\", \"24px\"); //Border Radius\n\n    cy.get(publish.iconWidgetBtn).should(\"have.css\", \"border-radius\", \"24px\"); //Border Radius\n\n    cy.get(widgetsPage.widgetBtn).eq(0).should(\"have.css\", \"box-shadow\", \"rgba(0, 0, 0, 0.1) 0px 1px 3px 0px, rgba(0, 0, 0, 0.06) 0px 1px 2px 0px\"); //Shadow\n\n    cy.get(widgetsPage.widgetBtn).eq(1).should(\"have.css\", \"box-shadow\", \"rgba(0, 0, 0, 0.1) 0px 10px 15px -3px, rgba(0, 0, 0, 0.05) 0px 4px 6px -2px\"); //Since Shadow revert option does not exixts\n\n    cy.get(publish.iconWidgetBtn).should(\"have.css\", \"box-shadow\", \"none\"); //Shadow\n    //Verify Share button\n\n    cy.contains(\"Share\").should(\"have.css\", \"border-top-color\", \"rgb(239, 68, 68)\"); //Color\n\n    cy.contains(\"Share\").closest(\"div\").should(\"have.css\", \"font-family\", \"Rubik\"); //Font\n    //Verify Edit App button\n\n    cy.contains(\"Edit App\").should(\"have.css\", \"background-color\", \"rgb(239, 68, 68)\"); //Color\n\n    cy.contains(\"Edit App\").closest(\"div\").should(\"have.css\", \"font-family\", \"Rubik\"); //Font\n\n    cy.get(publish.backToEditor).click({\n      force: true\n    }).wait(1000);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ThemingTests/Basic_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Drag and drop form widget and validate Default color/font/shadow/border and list of font validation","suites":["Theme validation for default data"],"updatePoint":{"line":20,"column":105,"index":786},"line":20,"code":"  it(\"Drag and drop form widget and validate Default color/font/shadow/border and list of font validation\", function () {\n    cy.log(\"Login Successful\");\n    cy.reload(); // To remove the rename tooltip\n\n    cy.get(explorer.addWidget).click();\n    cy.get(commonlocators.entityExplorersearch).should(\"be.visible\");\n    cy.get(commonlocators.entityExplorersearch).clear().type(\"form\");\n    cy.dragAndDropToCanvas(\"formwidget\", {\n      x: 300,\n      y: 80\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.wait(3000);\n    cy.get(themelocator.canvas).click({\n      force: true\n    });\n    cy.wait(2000); //Border validation\n    //cy.contains(\"Border\").click({ force: true });\n\n    cy.get(themelocator.border).should(\"have.length\", \"3\");\n    cy.borderMouseover(0, \"none\");\n    cy.borderMouseover(1, \"M\");\n    cy.borderMouseover(2, \"L\");\n    cy.contains(\"Border\").click({\n      force: true\n    }); //Shadow validation\n    //cy.contains(\"Shadow\").click({ force: true });\n\n    cy.wait(2000);\n    cy.shadowMouseover(0, \"none\");\n    cy.shadowMouseover(1, \"S\");\n    cy.shadowMouseover(2, \"M\");\n    cy.shadowMouseover(3, \"L\");\n    cy.contains(\"Shadow\").click({\n      force: true\n    }); //Font\n    //cy.contains(\"Font\").click({ force: true });\n\n    cy.get(\"span[name='expand-more']\").then($elem => {\n      cy.get($elem).click({\n        force: true\n      });\n      cy.wait(250);\n      cy.get(themelocator.fontsSelected).eq(0).should(\"have.text\", \"Nunito Sans\");\n    });\n    cy.contains(\"Font\").click({\n      force: true\n    }); //Color\n    //cy.contains(\"Color\").click({ force: true });\n\n    cy.wait(2000);\n    cy.colorMouseover(0, \"Primary Color\");\n    cy.validateColor(0, \"#553DE9\");\n    cy.colorMouseover(1, \"Background Color\");\n    cy.validateColor(1, \"#F6F6F6\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ThemingTests/Theme_Default_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate Default Theme change across application","suites":["Theme validation for default data"],"updatePoint":{"line":76,"column":54,"index":2564},"line":76,"code":"  it(\"Validate Default Theme change across application\", function () {\n    cy.get(formWidgetsPage.formD).click();\n    cy.widgetText(\"FormTest\", formWidgetsPage.formWidget, formWidgetsPage.formInner);\n    cy.get(widgetsPage.backgroundcolorPickerNew).first().click({\n      force: true\n    });\n    cy.get(\"[style='background-color: rgb(21, 128, 61);']\").last().click();\n    cy.wait(2000);\n    cy.get(formWidgetsPage.formD).should(\"have.css\", \"background-color\").and(\"eq\", \"rgb(21, 128, 61)\");\n    cy.get(\"#canvas-selection-0\").click({\n      force: true\n    }); //Change the Theme\n\n    cy.get(commonlocators.changeThemeBtn).click({\n      force: true\n    });\n    cy.get(\".cursor-pointer:contains('Applied Theme')\").click({\n      force: true\n    });\n    cy.get(\".t--theme-card main > main\").first().invoke(\"css\", \"background-color\").then(CurrentBackgroudColor => {\n      cy.get(\".bp3-button:contains('Submit')\").last().invoke(\"css\", \"background-color\").then(selectedBackgroudColor => {\n        expect(CurrentBackgroudColor).to.equal(selectedBackgroudColor);\n        themeBackgroudColor = CurrentBackgroudColor;\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ThemingTests/Theme_Default_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Publish the App and validate Default Theme across the app","suites":["Theme validation for default data"],"updatePoint":{"line":102,"column":63,"index":3702},"line":102,"code":"  it(\"Publish the App and validate Default Theme across the app\", function () {\n    cy.PublishtheApp();\n    cy.get(\".bp3-button:contains('Submit')\").invoke(\"css\", \"background-color\").then(CurrentBackgroudColor => {\n      cy.get(\".bp3-button:contains('Edit App')\").invoke(\"css\", \"background-color\").then(selectedBackgroudColor => {\n        expect(CurrentBackgroudColor).to.equal(selectedBackgroudColor);\n        expect(CurrentBackgroudColor).to.equal(themeBackgroudColor);\n        expect(selectedBackgroudColor).to.equal(themeBackgroudColor);\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ThemingTests/Theme_Default_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Drag and drop form widget and validate Default font and list of font validation","suites":["Theme validation usecases"],"updatePoint":{"line":20,"column":85,"index":758},"line":20,"code":"  it(\"Drag and drop form widget and validate Default font and list of font validation\", function () {\n    cy.log(\"Login Successful\");\n    cy.reload(); // To remove the rename tooltip\n\n    cy.get(explorer.addWidget).click();\n    cy.get(commonlocators.entityExplorersearch).should(\"be.visible\");\n    cy.get(commonlocators.entityExplorersearch).clear().type(\"form\");\n    cy.dragAndDropToCanvas(\"formwidget\", {\n      x: 300,\n      y: 80\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.wait(3000);\n    cy.get(themelocator.canvas).click({\n      force: true\n    });\n    cy.wait(2000); //Border validation\n    //cy.contains(\"Border\").click({ force: true });\n\n    cy.get(themelocator.border).should(\"have.length\", \"3\");\n    cy.borderMouseover(0, \"none\");\n    cy.borderMouseover(1, \"M\");\n    cy.borderMouseover(2, \"L\");\n    cy.get(themelocator.border).eq(2).click({\n      force: true\n    });\n    cy.wait(\"@updateTheme\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.wait(5000);\n    cy.contains(\"Border\").click({\n      force: true\n    }); //Shadow validation\n    //cy.contains(\"Shadow\").click({ force: true });\n\n    cy.shadowMouseover(0, \"none\");\n    cy.shadowMouseover(1, \"S\");\n    cy.shadowMouseover(2, \"M\");\n    cy.shadowMouseover(3, \"L\");\n    cy.xpath(themelocator.shadow).eq(3).click({\n      force: true\n    });\n    cy.wait(\"@updateTheme\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.wait(5000);\n    cy.contains(\"Shadow\").click({\n      force: true\n    }); //Font\n\n    cy.get(\"span[name='expand-more']\").then($elem => {\n      cy.get($elem).click({\n        force: true\n      });\n      cy.wait(250);\n      cy.fixture(\"fontData\").then(function (testdata) {\n        this.testdata = testdata;\n      });\n      cy.get(themelocator.fontsSelected).eq(0).should(\"have.text\", \"Nunito Sans\");\n      cy.get(\".ads-dropdown-options-wrapper div\").children().eq(2).then($childElem => {\n        cy.get($childElem).click({\n          force: true\n        });\n        cy.get(\".t--draggable-buttonwidget button :contains('Sub')\").should(\"have.css\", \"font-family\", $childElem.children().last().text());\n        themeFont = $childElem.children().last().text();\n      });\n    });\n    cy.contains(\"Font\").click({\n      force: true\n    }); //Color\n    //cy.contains(\"Color\").click({ force: true });\n\n    cy.wait(2000);\n    cy.colorMouseover(0, \"Primary Color\");\n    cy.validateColor(0, \"#553DE9\");\n    cy.colorMouseover(1, \"Background Color\");\n    cy.validateColor(1, \"#F6F6F6\");\n    cy.get(themelocator.inputColor).click({\n      force: true\n    });\n    cy.chooseColor(0, themelocator.greenColor);\n    cy.get(themelocator.inputColor).should(\"have.value\", \"#15803d\");\n    cy.get(themelocator.inputColor).clear({\n      force: true\n    });\n    cy.wait(2000);\n    cy.get(themelocator.inputColor).type(\"red\");\n    cy.get(themelocator.inputColor).should(\"have.value\", \"red\");\n    cy.wait(2000);\n    cy.get(themelocator.inputColor).eq(0).click({\n      force: true\n    });\n    cy.get(themelocator.inputColor).click({\n      force: true\n    });\n    cy.get('[data-testid=\"color-picker\"]').first().click({\n      force: true\n    });\n    cy.get(\"[style='background-color: rgb(21, 128, 61);']\").last().click();\n    cy.wait(2000);\n    cy.get(themelocator.inputColor).should(\"have.value\", \"#15803d\");\n    cy.get(themelocator.inputColor).clear({\n      force: true\n    });\n    cy.wait(2000);\n    cy.get(themelocator.inputColor).click().type(\"Black\");\n    cy.get(themelocator.inputColor).should(\"have.value\", \"Black\");\n    cy.wait(2000);\n    cy.contains(\"Color\").click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ThemingTests/Theme_FormWidget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Publish the App and validate Font across the app","suites":["Theme validation usecases"],"updatePoint":{"line":128,"column":54,"index":4417},"line":128,"code":"  it(\"Publish the App and validate Font across the app\", function () {\n    cy.PublishtheApp();\n    cy.get(\".bp3-button:contains('Sub')\").should(\"have.css\", \"font-family\", themeFont);\n    cy.get(\".bp3-button:contains('Edit App')\").should(\"have.css\", \"font-family\", themeFont);\n    cy.get(\".bp3-button:contains('Share')\").should(\"have.css\", \"font-family\", themeFont);\n    cy.get(\".bp3-button:contains('Reset')\").should(\"have.css\", \"font-family\", themeFont);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ThemingTests/Theme_FormWidget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate Default Theme change across application","suites":["Theme validation usecases"],"updatePoint":{"line":135,"column":54,"index":4879},"line":135,"code":"  it(\"Validate Default Theme change across application\", function () {\n    cy.goToEditFromPublish();\n    cy.get(formWidgetsPage.formD).click();\n    cy.widgetText(\"FormTest\", formWidgetsPage.formWidget, formWidgetsPage.formInner);\n    cy.get(widgetsPage.backgroundcolorPickerNew).first().click({\n      force: true\n    });\n    cy.get(\"[style='background-color: rgb(21, 128, 61);']\").last().click();\n    cy.wait(2000);\n    cy.get(formWidgetsPage.formD).should(\"have.css\", \"background-color\").and(\"eq\", \"rgb(21, 128, 61)\");\n    cy.get(\"#canvas-selection-0\").click({\n      force: true\n    }); //Change the Theme\n\n    cy.get(commonlocators.changeThemeBtn).click({\n      force: true\n    });\n    cy.get(themelocator.currentTheme).click({\n      force: true\n    });\n    cy.get(\".t--theme-card main > main\").first().invoke(\"css\", \"background-color\").then(CurrentBackgroudColor => {\n      cy.get(\".bp3-button:contains('Sub')\").last().invoke(\"css\", \"background-color\").then(selectedBackgroudColor => {\n        expect(CurrentBackgroudColor).to.equal(selectedBackgroudColor);\n        themeBackgroudColor = CurrentBackgroudColor;\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ThemingTests/Theme_FormWidget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Publish the App and validate Default Theme across the app","suites":["Theme validation usecases"],"updatePoint":{"line":162,"column":63,"index":6026},"line":162,"code":"  it(\"Publish the App and validate Default Theme across the app\", function () {\n    cy.PublishtheApp();\n    /* Bug Form backgroud colour reset in Publish mode\n        cy.get(formWidgetsPage.formD)\n          .should(\"have.css\", \"background-color\")\n          .and(\"eq\", \"rgb(21, 128, 61)\");\n          */\n\n    cy.get(\".bp3-button:contains('Sub')\").invoke(\"css\", \"background-color\").then(CurrentBackgroudColor => {\n      cy.get(\".bp3-button:contains('Edit App')\").invoke(\"css\", \"background-color\").then(selectedBackgroudColor => {\n        expect(CurrentBackgroudColor).to.equal(selectedBackgroudColor);\n        expect(CurrentBackgroudColor).to.equal(themeBackgroudColor);\n        expect(selectedBackgroudColor).to.equal(themeBackgroudColor);\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ThemingTests/Theme_FormWidget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate Theme change across application","suites":["Theme validation usecases"],"updatePoint":{"line":178,"column":46,"index":6771},"line":178,"code":"  it(\"Validate Theme change across application\", function () {\n    cy.goToEditFromPublish();\n    cy.get(formWidgetsPage.formD).click();\n    cy.widgetText(\"FormTest\", formWidgetsPage.formWidget, formWidgetsPage.formInner);\n    cy.get(widgetsPage.backgroundcolorPickerNew).first().click({\n      force: true\n    });\n    cy.get(\"[style='background-color: rgb(21, 128, 61);']\").last().click();\n    cy.wait(2000);\n    cy.get(formWidgetsPage.formD).should(\"have.css\", \"background-color\").and(\"eq\", \"rgb(21, 128, 61)\");\n    cy.get(\"#canvas-selection-0\").click({\n      force: true\n    }); //Change the Theme\n\n    cy.get(commonlocators.changeThemeBtn).click({\n      force: true\n    }); // select a theme\n\n    cy.get(commonlocators.themeCard).last().click({\n      force: true\n    }); // check for alert\n\n    cy.get(`${commonlocators.themeCard}`).last().siblings(\"div\").first().invoke(\"text\").then(text => {\n      cy.get(commonlocators.toastmsg).contains(`Theme ${text} Applied`);\n    });\n    cy.get(`${commonlocators.themeCard} > main`).last().invoke(\"css\", \"background-color\").then(backgroudColor => {\n      cy.get(commonlocators.canvas).should(\"have.css\", \"background-color\", backgroudColor);\n    });\n    cy.get(themelocator.currentTheme).click({\n      force: true\n    });\n    cy.get(\".t--theme-card > main\").first().invoke(\"css\", \"background-color\").then(backgroudColor => {\n      cy.get(commonlocators.canvas).should(\"have.css\", \"background-color\", backgroudColor);\n    });\n    cy.get(\".t--theme-card main > main\").first().invoke(\"css\", \"background-color\").then(CurrentBackgroudColor => {\n      cy.get(\".t--theme-card main > main\").last().invoke(\"css\", \"background-color\").then(selectedBackgroudColor => {\n        expect(CurrentBackgroudColor).to.equal(selectedBackgroudColor);\n        themeBackgroudColor = CurrentBackgroudColor;\n      });\n    });\n    cy.get(formWidgetsPage.formD).click();\n    cy.widgetText(\"FormTest\", formWidgetsPage.formWidget, formWidgetsPage.formInner);\n    cy.get(widgetsPage.backgroundcolorPickerNew).first().click({\n      force: true\n    });\n    cy.get(\"[style='background-color: rgb(255, 193, 61);']\").last().click();\n    cy.wait(2000);\n    cy.get(formWidgetsPage.formD).should(\"have.css\", \"background-color\").and(\"eq\", \"rgb(255, 193, 61)\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ThemingTests/Theme_FormWidget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Publish the App and validate Theme across the app","suites":["Theme validation usecases"],"updatePoint":{"line":227,"column":55,"index":9049},"line":227,"code":"  it(\"Publish the App and validate Theme across the app\", function () {\n    cy.PublishtheApp(); //Bug Form backgroud colour reset in Publish mode\n\n    /*\n        cy.get(formWidgetsPage.formD)\n            .should(\"have.css\", \"background-color\")\n            .and(\"eq\", \"rgb(255, 193, 61)\");\n            */\n\n    cy.get(\".bp3-button:contains('Sub')\").invoke(\"css\", \"background-color\").then(CurrentBackgroudColor => {\n      cy.get(\".bp3-button:contains('Edit App')\").invoke(\"css\", \"background-color\").then(selectedBackgroudColor => {\n        expect(CurrentBackgroudColor).to.equal(selectedBackgroudColor);\n        expect(CurrentBackgroudColor).to.equal(themeBackgroudColor);\n        expect(selectedBackgroudColor).to.equal(themeBackgroudColor);\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ThemingTests/Theme_FormWidget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Drag and drop multi-select widget and validate Default font and list of font validation + Bug 15007","suites":["Theme validation usecase for multi-select widget"],"updatePoint":{"line":11,"column":105,"index":462},"line":11,"code":"  it(\"Drag and drop multi-select widget and validate Default font and list of font validation + Bug 15007\", function () {\n    cy.log(\"Login Successful\");\n    cy.reload(); // To remove the rename tooltip\n\n    cy.get(explorer.addWidget).click();\n    cy.get(commonlocators.entityExplorersearch).should(\"be.visible\");\n    cy.get(commonlocators.entityExplorersearch).clear().wait(200).click().type(\"multiselect\");\n    cy.dragAndDropToCanvas(\"multiselectwidgetv2\", {\n      x: 300,\n      y: 80\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.wait(3000);\n    cy.get(themelocator.canvas).click({\n      force: true\n    });\n    cy.wait(2000); //Border validation\n    //cy.contains(\"Border\").click({ force: true });\n\n    cy.get(themelocator.border).should(\"have.length\", \"3\");\n    cy.borderMouseover(0, \"none\");\n    cy.borderMouseover(1, \"M\");\n    cy.borderMouseover(2, \"L\");\n    cy.get(themelocator.border).eq(1).click({\n      force: true\n    });\n    cy.wait(\"@updateTheme\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.wait(3000);\n    cy.contains(\"Border\").click({\n      force: true\n    }); //Shadow validation\n    //cy.contains(\"Shadow\").click({ force: true });\n\n    cy.wait(2000);\n    cy.shadowMouseover(0, \"none\");\n    cy.shadowMouseover(1, \"S\");\n    cy.shadowMouseover(2, \"M\");\n    cy.shadowMouseover(3, \"L\");\n    cy.xpath(themelocator.shadow).eq(3).click({\n      force: true\n    });\n    cy.wait(\"@updateTheme\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.wait(5000);\n    cy.contains(\"Shadow\").click({\n      force: true\n    }); //Font\n\n    cy.get(\"span[name='expand-more']\").then($elem => {\n      cy.get($elem).click({\n        force: true\n      });\n      cy.wait(250);\n      cy.fixture(\"fontData\").then(function (testdata) {\n        this.testdata = testdata;\n      });\n      cy.get(themelocator.fontsSelected).eq(0).should(\"have.text\", \"Nunito Sans\");\n      cy.get(\".ads-dropdown-options-wrapper div\").children().eq(2).then($childElem => {\n        cy.get($childElem).click({\n          force: true\n        });\n        cy.get(\".t--draggable-multiselectwidgetv2:contains('more')\").should(\"have.css\", \"font-family\", $childElem.children().last().text());\n        themeFont = $childElem.children().last().text();\n      });\n    }); //cy.contains(\"Font\").click({ force: true });\n    //Color\n\n    cy.wait(3000);\n    cy.get(themelocator.inputColor).clear().wait(200).click().type(\"purple\");\n    cy.get(themelocator.inputColor).should(\"have.value\", \"purple\");\n    cy.get(themelocator.color).eq(1).click({\n      force: true\n    });\n    cy.wait(2000);\n    cy.get(themelocator.inputColor).clear().wait(200).click().type(\"brown\");\n    cy.get(themelocator.inputColor).should(\"have.value\", \"brown\");\n    cy.wait(2000);\n    cy.contains(\"Color\").click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ThemingTests/Theme_MultiSelectWidget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Publish the App and validate Font across the app + Bug 15007","suites":["Theme validation usecase for multi-select widget"],"line":91,"code":"  it.skip(\"Publish the App and validate Font across the app + Bug 15007\", function () {","file":"integration/Smoke_TestSuite/ClientSideTests/ThemingTests/Theme_MultiSelectWidget_spec.js","skipped":true,"dir":"app/client/cypress"},{"name":"Validate Default Theme change across application","suites":["Theme validation usecase for multi-select widget"],"updatePoint":{"line":100,"column":54,"index":3941},"line":100,"code":"  it(\"Validate Default Theme change across application\", function () {\n    cy.get(\"#canvas-selection-0\").click({\n      force: true\n    }); //Change the Theme\n\n    cy.get(commonlocators.changeThemeBtn).click({\n      force: true\n    });\n    cy.get(themelocator.currentTheme).click({\n      force: true\n    });\n    cy.get(\".t--theme-card main > main\").first().invoke(\"css\", \"background-color\").then(CurrentBackgroudColor => {\n      cy.get(\".t--draggable-multiselectwidgetv2:contains('more')\").last().invoke(\"css\", \"background-color\").then(selectedBackgroudColor => {\n        expect(\"rgba(0, 0, 0, 0)\").to.equal(selectedBackgroudColor);\n        themeBackgroudColor = CurrentBackgroudColor;\n        themeColour = selectedBackgroudColor;\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ThemingTests/Theme_MultiSelectWidget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Publish the App and validate Default Theme across the app","suites":["Theme validation usecase for multi-select widget"],"updatePoint":{"line":119,"column":63,"index":4705},"line":119,"code":"  it(\"Publish the App and validate Default Theme across the app\", function () {\n    cy.PublishtheApp();\n    cy.get(\".rc-select-selection-item > .rc-select-selection-item-content\").first().invoke(\"css\", \"background-color\").then(CurrentBackgroudColor => {\n      cy.get(\".bp3-button:contains('Edit App')\").invoke(\"css\", \"background-color\").then(selectedBackgroudColor => {\n        expect(CurrentBackgroudColor).to.equal(themeColour);\n        expect(selectedBackgroudColor).to.equal(themeBackgroudColor);\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ThemingTests/Theme_MultiSelectWidget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Drag and drop button widget, change value and check reset flow","suites":["Theme validation usecases"],"updatePoint":{"line":8,"column":68,"index":338},"line":8,"code":"  it(\"Drag and drop button widget, change value and check reset flow\", function () {\n    // drop button widget\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"buttonwidget\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(\".t--widget-buttonwidget\").should(\"exist\"); // open property pane\n\n    cy.openPropertyPane(\"buttonwidget\"); // change color to red\n\n    cy.get(widgetsPage.buttonColor).click({\n      force: true\n    }).clear().type(\"red\"); // click on canvas to see the theming pane\n\n    cy.get(\"#canvas-selection-0\").click({\n      force: true\n    }); // reset theme\n\n    cy.contains(\"Theme Properties\").closest(\"div\").siblings().first().find(\"button\").click({\n      force: true\n    });\n    cy.contains(\"Reset widget styles\").click({\n      force: true\n    });\n    cy.get(`${commonlocators.themeCard} > main > main`).first().invoke(\"css\", \"background-color\").then(backgroudColor => {\n      cy.get(widgetsPage.widgetBtn).should(\"have.css\", \"background-color\", backgroudColor);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ThemingTests/ThemeReset_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Layout validation for app page in edit mode","suites":["Visual regression tests"],"updatePoint":{"line":8,"column":49,"index":565},"line":8,"code":"  it(\"Layout validation for app page in edit mode\", () => {\n    cy.visit(\"/applications\");\n    cy.wait(3000);\n    cy.get(\".t--applications-container .createnew\").should(\"be.visible\");\n    cy.get(\".t--applications-container .createnew\").first().click();\n    cy.wait(3000); // taking screenshot of app home page in edit mode\n\n    cy.get(\"#root\").matchImageSnapshot(\"apppage\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/VisualTests/AppPageLayout_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Layout validation for Quick page wizard","suites":["Visual regression tests"],"updatePoint":{"line":17,"column":45,"index":942},"line":17,"code":"  it(\"Layout validation for Quick page wizard\", () => {\n    cy.get(\".t--GenerateCRUDPage\").click();\n    cy.wait(2000); // taking screenshot of generate crud page\n\n    cy.get(\"#root\").matchImageSnapshot(\"quickPageWizard\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/VisualTests/AppPageLayout_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Layout Validation for App builder Page","suites":["Visual regression tests"],"updatePoint":{"line":23,"column":44,"index":1169},"line":23,"code":"  it(\"Layout Validation for App builder Page\", () => {\n    cy.get(\".bp3-icon-chevron-left\").click();\n    cy.get(\".t--BuildFromScratch\").click();\n    cy.wait(2000); // taking screenshot of app builder page\n\n    cy.get(\"#root\").matchImageSnapshot(\"emptyAppBuilder\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/VisualTests/AppPageLayout_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Layout Validation for Empty deployed app","suites":["Visual regression tests"],"updatePoint":{"line":30,"column":46,"index":1442},"line":30,"code":"  it(\"Layout Validation for Empty deployed app\", () => {\n    cy.PublishtheApp();\n    cy.wait(3000); // taking screenshot of empty deployed app\n\n    cy.get(\"#root\").matchImageSnapshot(\"EmptyApp\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/VisualTests/AppPageLayout_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Layout Validation for profile page","suites":["Visual regression tests"],"updatePoint":{"line":36,"column":40,"index":1638},"line":36,"code":"  it(\"Layout Validation for profile page\", () => {\n    cy.get(\".t--profile-menu-icon\").click();\n    cy.get(\".t--edit-profile\").click();\n    cy.wait(2000); // taking screenshot of profile page\n\n    cy.get(\"#root\").matchImageSnapshot(\"Profile\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/VisualTests/AppPageLayout_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Layout validation for login page","suites":["Visual regression tests"],"updatePoint":{"line":43,"column":38,"index":1886},"line":43,"code":"  it(\"Layout validation for login page\", () => {\n    cy.get(homePage.profileMenu).click();\n    cy.get(homePage.signOutIcon).click();\n    cy.wait(500); // validating all the fields on login page\n\n    cy.get(homePage.headerAppSmithLogo).should(\"be.visible\");\n    cy.xpath(\"//h1\").should(\"have.text\", \"Sign in to your account\");\n    cy.get(\".bp3-label\").first().should(\"have.text\", \"Email \");\n    cy.get(\".bp3-label\").last().should(\"have.text\", \"Password \");\n    cy.xpath('//span[text()=\"sign in\"]').should(\"be.visible\");\n    cy.get(\".bp3-label\").first().click();\n    cy.matchImageSnapshot(\"loginpage\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/VisualTests/AppPageLayout_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Layout validation for datasource page","suites":["Visual tests for datasources"],"updatePoint":{"line":15,"column":43,"index":723},"line":15,"code":"  it(\"Layout validation for datasource page\", () => {\n    cy.NavigateToHome();\n    cy.createWorkspace();\n    cy.wait(\"@createWorkspace\").then(interception => {\n      const newWorkspaceName = interception.response.body.data.name;\n      cy.CreateAppForWorkspace(newWorkspaceName, newWorkspaceName);\n    });\n    cy.NavigateToDatasourceEditor();\n    cy.NavigateToActiveTab();\n    cy.get(\".t--integrationsHomePage\").matchImageSnapshot(\"emptydatasourcepage\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/VisualTests/DatasourcePageLayout_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. TC 1933 - jSEditor prettify verification on cloned application","suites":["JSEditor Indendation - Visual tests"],"updatePoint":{"line":14,"column":71,"index":758},"line":14,"code":"  it(\"6. TC 1933 - jSEditor prettify verification on cloned application\", () => {\n    const appname = localStorage.getItem(\"AppName\");\n    jsEditor.CreateJSObject(`export default {\nmyFun1: () => {\nconsole.log(\"hi\");\nconsole.log(\"hidchjvxz sd,bcjmsd\");\nlet sum = 0;\nfor (let i = 1; i<5; i++) {\nsum += i;\n}\nswitch (sum) {\ncase 1: console.log('hey ho');\nlet sum1 = 2;\nbreak;\ncase 2:\nconsole.log('hey ho');\nlet sum2 = 2;\nbreak;\ncase 3:\n console.log('hey ho');\n break;\n}\nfunction hi(a,b) {\nconsole.log(a,b);\n}\nhi(1,2);\n},\nmyFun2: async () => {\n//use async-await or promises\n}\n}`, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true\n    });\n    cy.get(\"[name='expand-more']\").eq(1).click({\n      force: true\n    });\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjBeforePrettify6\");\n    cy.get(\".t--more-action-menu\").first().click();\n    cy.contains(\"Prettify Code\").trigger(\"click\").wait(3000); //allowing time to prettify!\n\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjAfterPrettify6\"); // taking a snap after clicking inside the editor to make sure prettify has not reverted\n\n    cy.get(\"div.CodeMirror\").click();\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjAfterPrettify6\");\n    cy.wait(2000);\n    cy.NavigateToHome();\n    cy.wait(2000);\n    cy.get(homePage.searchInput).type(appname); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(2000);\n    cy.get(homePage.applicationCard).first().trigger(\"mouseover\");\n    cy.get(homePage.appMoreIcon).first().click({\n      force: true\n    });\n    cy.get(homePage.duplicateApp).click({\n      force: true\n    });\n    cy.CheckAndUnfoldEntityItem(\"QUERIES/JS\");\n    cy.SearchEntityandOpen(\"JSObject1\");\n    cy.wait(3000);\n    cy.get(\"[name='expand-more']\").eq(1).click({\n      force: true\n    });\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjAfterPrettify6\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/VisualTests/JSEditorIndent_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. TC 1933 - JSEditor prettify verification on cloned page","suites":["JSEditor Indendation - Visual tests"],"updatePoint":{"line":82,"column":64,"index":2661},"line":82,"code":"  it(\"7. TC 1933 - JSEditor prettify verification on cloned page\", () => {\n    jsEditor.CreateJSObject(`export default {\n  myFun1: () => {\n  console.log(\"hi\");\n  console.log(\"hidchjvxz sd,bcjmsd\");\n  let sum = 0;\n  for (let i = 1; i<5; i++) {\n  sum += i;\n  }\n  switch (sum) {\n  case 1: console.log('hey ho');\n  let sum1 = 2;\n  break;\n  case 2:\n  console.log('hey ho');\n  let sum2 = 2;\n  break;\n  case 3:\n   console.log('hey ho');\n   break;\n  }\n  function hi(a,b) {\n  console.log(a,b);\n  }\n  hi(1,2);\n  },\n  myFun2: async () => {\n  //use async-await or promises\n  }\n  }`, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true\n    });\n    cy.get(\"[name='expand-more']\").eq(1).click({\n      force: true\n    });\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjBeforePrettify7\");\n    cy.get(\".t--more-action-menu\").first().click();\n    cy.contains(\"Prettify Code\").trigger(\"click\").wait(3000); //allowing time to prettify!\n\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjAfterPrettify7\"); // taking a snap after clicking inside the editor to make sure prettify has not reverted\n\n    cy.get(\"div.CodeMirror\").click();\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjAfterPrettify7\");\n    ee.ClonePage(\"Page1\");\n    ee.SelectEntityByName(\"JSObject1\", \"QUERIES/JS\");\n    cy.wait(3000);\n    cy.get(\"[name='expand-more']\").eq(1).click({\n      force: true\n    });\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjAfterPrettify7\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/VisualTests/JSEditorIndent_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. TC 1864 : JSEditor validation for Prettify Code with lint errors, triggered by menu option","suites":["JSEditor Indendation - Visual tests"],"updatePoint":{"line":136,"column":99,"index":4195},"line":136,"code":"  it(\"1. TC 1864 : JSEditor validation for Prettify Code with lint errors, triggered by menu option\", () => {\n    jsEditor.CreateJSObject(`export default {\nmyVar1: [], myVar2: {},myFun1: () => {\nlet allFuncs = [\nGenderize.run({ country: 'India' }),\nRandomUser.run(),\nGetAnime.run({ name: 'Gintama' }),\nInspiringQuotes.run(),\nAgify.run({ person: 'Scripty' }),\nChristmas.run()\n]\nshowAlert(\"Running all api's\", \"warning\");\nreturn Promise.all(allFuncs).then(() => showAlert(\"Wonderful! all apis executed\", \"success\")).catch(() => showAlert(\"Please check your api's again\", \"error\")); },myFun2: async () => {\n//use async-await or promises}\n}`, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true\n    });\n    cy.get(\"[name='expand-more']\").eq(1).click({\n      force: true\n    });\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjBeforePrettify1\");\n    cy.get(\".t--more-action-menu\").first().click();\n    cy.contains(\"Prettify Code\").trigger(\"click\").wait(3000); //allowing time to prettify!\n\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjAfterPrettify1\"); // taking a snap after clicking inside the editor to make sure prettify has not reverted\n\n    cy.get(\"div.CodeMirror\").click();\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjAfterPrettify1\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/VisualTests/JSEditorIndent_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. TC 1916, 1917 : JSEditor validation for Prettify Code with no errors, triggered by menu option","suites":["JSEditor Indendation - Visual tests"],"updatePoint":{"line":168,"column":103,"index":5519},"line":168,"code":"  it(\"2. TC 1916, 1917 : JSEditor validation for Prettify Code with no errors, triggered by menu option\", () => {\n    jsEditor.CreateJSObject(`export default {\nmyFun1: () => {\nconsole.log(\"hi\");\nconsole.log(\"hidchjvxz sd,bcjmsd\");\nlet sum = 0;\nfor (let i = 1; i<5; i++) {\nsum += i;\n}\nswitch (sum) {\ncase 1: console.log('hey ho');\nlet sum1 = 2;\nbreak;\ncase 2:\nconsole.log('hey ho');\nlet sum2 = 2;\nbreak;\ncase 3:\n  console.log('hey ho');\n  break;\n}\nfunction hi(a,b) {\nconsole.log(a,b);\n}\nhi(1,2);\n},\nmyFun2: async () => {\n//use async-await or promises\n}\n}`, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true\n    });\n    cy.get(\"[name='expand-more']\").eq(1).click({\n      force: true\n    });\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjBeforePrettify2\");\n    cy.get(\".t--more-action-menu\").first().click();\n    cy.contains(\"Prettify Code\").trigger(\"click\").wait(3000); //allowing time to prettify!\n\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjAfterPrettify2\"); // taking a snap after clicking inside the editor to make sure prettify has not reverted\n\n    cy.get(\"div.CodeMirror\").click();\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjAfterPrettify2\"); // click run button and take a snap to make sure prettify did not revert\n\n    cy.contains(\"Run\").click({\n      force: true\n    }).wait(3000); // allow time to run\n\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjAfterPrettify2\"); // click dropdown to change function and make sure prettify has not reverted\n\n    cy.get(\"[name='expand-more']\").eq(0).click({\n      force: true\n    });\n    cy.contains(\"myFun2\").trigger(\"click\");\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjAfterPrettify2\");\n    agHelper.WaitUntilToastDisappear(\"ran successfully\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/VisualTests/JSEditorIndent_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. TC 1863 : JSEditor validation for Prettify Code with lint errors, triggered by keyboard shortcut","suites":["JSEditor Indendation - Visual tests"],"updatePoint":{"line":228,"column":105,"index":7321},"line":228,"code":"  it(\"3. TC 1863 : JSEditor validation for Prettify Code with lint errors, triggered by keyboard shortcut\", () => {\n    jsEditor.CreateJSObject(`export default {\nmyVar1: [],\nmyVar2: {},\nmyFun1: () => {\nlet allFuncs = [\nGenderize.run({ country: 'India' }),\nRandomUser.run(),\nGetAnime.run({ name: 'Gintama' }),\nInspiringQuotes.run(),\nAgify.run({ person: 'Scripty' }),\nChristmas.run()\n]\nshowAlert(\"Running all api's\", \"warning\");\nreturn Promise.all(allFuncs).then(() => showAlert(\"Wonderful! all apis executed\", \"success\")).catch(() => showAlert(\"Please check your api's again\", \"error\")); },\nmyFun2: async () => {\n//use async-await or promises}\n}`, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true\n    });\n    cy.get(\"[name='expand-more']\").eq(1).click({\n      force: true\n    });\n    cy.get(\"div.CodeMirror\").wait(1000).matchImageSnapshot(\"jsObjBeforePrettify3\");\n    cy.get(\"div.CodeMirror\").type(\"{shift+cmd+p}\");\n    cy.get(\"div.CodeMirror\").wait(1000).matchImageSnapshot(\"jsObjAfterPrettify3\"); // taking a snap after clicking inside the editor to make sure prettify has not reverted\n\n    cy.get(\"div.CodeMirror\").click().wait(1000);\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjAfterPrettify3\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/VisualTests/JSEditorIndent_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. TC 1863 : JSEditor validation for Prettify Code with no errors, triggered by keyboard shortcut","suites":["JSEditor Indendation - Visual tests"],"updatePoint":{"line":261,"column":103,"index":8588},"line":261,"code":"  it(\"4. TC 1863 : JSEditor validation for Prettify Code with no errors, triggered by keyboard shortcut\", () => {\n    jsEditor.CreateJSObject(`export default {\nmyVar1: [],\nmyVar2: {},\nmyFun1: () => {\nconsole.log(\"hi\");\nconsole.log(\"hidchjvxz sd,bcjmsd\");\nlet sum = 0;\nfor (let i = 1; i<5; i++) {\nsum += i;\n}\nswitch (sum) {\ncase 1: console.log('hey ho');\nlet sum1 = 2;\nbreak;\ncase 2:\nconsole.log('hey ho');\nlet sum2 = 2;\nbreak;\ncase 3:\n  console.log('hey ho');\n  break;\n}\nfunction hi(a,b) {\nconsole.log(a,b);\n}\nhi(1,2);\n},\nmyFun2: async () => {\n//use async-await or promises\n}\n}`, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true\n    });\n    cy.get(\"[name='expand-more']\").eq(1).click({\n      force: true\n    });\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjBeforePrettify4\");\n    cy.get(\"div.CodeMirror\").type(\"{shift+cmd+p}\").wait(1000);\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjAfterPrettify4\"); // taking a snap after clicking inside the editor to make sure prettify has not reverted\n\n    cy.get(\"div.CodeMirror\").click().wait(1000);\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjAfterPrettify4_1\"); // click run button and take a snap to make sure prettify did not revert\n\n    cy.contains(\"Run\").click({\n      force: true\n    }).wait(3000); // allow time to run\n\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjAfterPrettify4_1\"); // click dropdown to change function and make sure prettify has not reverted\n    // click dropdown to change function and make sure prettify has not reverted\n\n    cy.get(\"[name='expand-more']\").eq(0).click({\n      force: true\n    });\n    cy.contains(\"myFun2\").trigger(\"click\").wait(1000);\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjAfterPrettify4_1\");\n    agHelper.WaitUntilToastDisappear(\"ran successfully\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/VisualTests/JSEditorIndent_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. TC 1862 - JSEditor validation for goLineStartSmart with no errors, triggered by keyboard shortcut","suites":["JSEditor Indendation - Visual tests"],"updatePoint":{"line":322,"column":106,"index":10443},"line":322,"code":"  it(\"5. TC 1862 - JSEditor validation for goLineStartSmart with no errors, triggered by keyboard shortcut\", () => {\n    jsEditor.CreateJSObject(`const a = 1826;`, {\n      paste: false,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true\n    });\n    cy.get(\"[name='expand-more']\").eq(1).click({\n      force: true\n    });\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjBeforeGoLineStartSmart5\");\n    cy.get(\"div.CodeMirror\").type(\"{cmd+leftArrow}\");\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjAfterGoLineStartSmart5\");\n    cy.get(\"div.CodeMirror\").type(\"{cmd+leftArrow}\");\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjAfterGoLineStartSmart5\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/VisualTests/JSEditorIndent_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Verify SwitchGroup inline enable/disbale","suites":["Visual regression tests"],"updatePoint":{"line":6,"column":46,"index":389},"line":6,"code":"  it(\"Verify SwitchGroup inline enable/disbale\", () => {\n    cy.dragAndDropToCanvas(\"switchgroupwidget\", {\n      x: 300,\n      y: 300\n    });\n    cy.wait(1000); //Verify default check\n\n    cy.get(\".t--property-control-inline input\").should(\"be.checked\"); // taking screenshot of switch container\n\n    cy.get(\"[data-testid=switchgroup-container]\").matchImageSnapshot(\"inlineEnabled\"); //Unchecking & verify snap\n\n    cy.get(\".t--property-control-inline input\").uncheck({\n      force: true\n    }).wait(200).should(\"not.be.checked\");\n    cy.get(\"[data-testid=switchgroup-container]\").matchImageSnapshot(\"inlineDisabled\"); //Checking again & verify snap\n\n    cy.get(\".t--property-control-inline input\").check({\n      force: true\n    }).wait(200).should(\"be.checked\");\n    cy.get(\"[data-testid=switchgroup-container]\").matchImageSnapshot(\"inlineEnabled\"); //Unchecking again & verify snap\n\n    cy.get(\".t--property-control-inline input\").uncheck({\n      force: true\n    }).wait(200).should(\"not.be.checked\"); // taking screenshot of app home page in edit mode\n\n    cy.get(\"[data-testid=switchgroup-container]\").matchImageSnapshot(\"inlineDisabled\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/VisualTests/WidgetsLayout_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. DragDrop widget & Label/Text widgets","suites":[" widget test for storeValue save, Api Call params"],"updatePoint":{"line":94,"column":47,"index":2802},"line":94,"code":"    it(`1. DragDrop widget & Label/Text widgets`, () => {\n      if (index === 0) {\n        configureApi();\n        cy.get(explorer.addWidget).click();\n      }\n\n      cy.dragAndDropToCanvas(widgetSelector, {\n        x: 300,\n        y: 200\n      });\n      cy.get(getWidgetSelector(widgetSelector)).should(\"exist\");\n      cy.dragAndDropToCanvas(WIDGET.BUTTON_WIDGET, {\n        x: 300,\n        y: 400\n      });\n      cy.dragAndDropToCanvas(WIDGET.TEXT, {\n        x: 300,\n        y: 600\n      });\n    });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/AllInputWidgets_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. StoreValue should have complete input value","suites":[" widget test for storeValue save, Api Call params"],"updatePoint":{"line":114,"column":54,"index":3309},"line":114,"code":"    it(\"2. StoreValue should have complete input value\", () => {\n      // if default input widget type is changed from text to any other type then uncomment below code.\n      // if (widgetSelector === WIDGET.INPUT_WIDGET_V2) {\n      //   cy.openPropertyPane(widgetSelector);\n      //   cy.selectDropdownValue(\".t--property-control-datatype\", \"Text\");\n      //   cy.get(\".t--property-control-required label\")\n      //     .last()\n      //     .click({ force: true });\n      //   cy.closePropertyPane();\n      // }\n      // Set onClick action, storing value\n      cy.openPropertyPane(WIDGET.BUTTON_WIDGET);\n      cy.get(PROPERTY_SELECTOR.onClick).find(\".t--js-toggle\").click();\n      cy.updateCodeInput(PROPERTY_SELECTOR.onClick, `{{storeValue('textPayloadOnSubmit',${testConfig.widgetPrefixName}1.text)}}`); // Bind to stored value above\n\n      cy.openPropertyPane(WIDGET.TEXT);\n      cy.updateCodeInput(PROPERTY_SELECTOR.text, \"{{appsmith.store.textPayloadOnSubmit}}\");\n      cy.closePropertyPane();\n      const inputs = testConfig.testCases;\n      inputs.forEach(({\n        clearBeforeType,\n        expected,\n        input\n      }) => {\n        // Input text and hit enter key\n        if (clearBeforeType) {\n          cy.get(getWidgetInputSelector(widgetSelector)).clear().type(`${input}`);\n        } else {\n          cy.get(getWidgetInputSelector(widgetSelector)).type(`${input}`);\n        }\n\n        cy.get(getWidgetSelector(WIDGET.BUTTON_WIDGET)).click(); // Assert if the Text widget contains the whole value, test\n\n        cy.get(getWidgetSelector(WIDGET.TEXT)).should(\"have.text\", expected);\n      });\n    });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/AllInputWidgets_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Api params getting correct input values","suites":[" widget test for storeValue save, Api Call params"],"updatePoint":{"line":150,"column":50,"index":4922},"line":150,"code":"    it(\"3. Api params getting correct input values\", () => {\n      // Set onClick action, storing value\n      cy.openPropertyPane(WIDGET.BUTTON_WIDGET); // cy.get(PROPERTY_SELECTOR.onClick)\n      //   .find(\".t--js-toggle\")\n      //   .click();\n\n      cy.updateCodeInput(PROPERTY_SELECTOR.onClick, `{{FirstAPI.run({ value: ${testConfig.widgetPrefixName}1.text })}}`);\n      const inputs = testConfig.testCases;\n      inputs.forEach(({\n        clearBeforeType,\n        expected,\n        input\n      }) => {\n        // Input text and hit enter key\n        if (clearBeforeType) {\n          cy.get(getWidgetInputSelector(widgetSelector)).clear().type(`${input}`);\n        } else {\n          cy.get(getWidgetInputSelector(widgetSelector)).type(`${input}`);\n        }\n\n        cy.get(getWidgetSelector(WIDGET.BUTTON_WIDGET)).click(); // Assert if the Api request contains the expected value\n\n        cy.wait(\"@postExecute\").then(interception => {\n          expect(interception.response.body.data.request.headers.value).to.deep.equal([expected]);\n        });\n      });\n    });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/AllInputWidgets_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Delete all the widgets on canvas","suites":[" widget test for storeValue save, Api Call params"],"updatePoint":{"line":177,"column":43,"index":5985},"line":177,"code":"    it(\"4. Delete all the widgets on canvas\", () => {\n      cy.get(getWidgetSelector(WIDGET.BUTTON_WIDGET)).click();\n      cy.get(\"body\").type(`{del}`, {\n        force: true\n      });\n      cy.get(getWidgetSelector(WIDGET.TEXT)).click();\n      cy.get(\"body\").type(`{del}`, {\n        force: true\n      });\n      cy.get(getWidgetSelector(widgetSelector)).click();\n      cy.get(\"body\").type(`{del}`, {\n        force: true\n      });\n    });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/AllInputWidgets_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Audio Widget play functionality validation","suites":["Audio Widget Functionality"],"updatePoint":{"line":13,"column":48,"index":432},"line":13,"code":"  it(\"Audio Widget play functionality validation\", function () {\n    cy.openPropertyPane(\"audiowidget\");\n    cy.widgetText(\"Audio1\", widgetsPage.audioWidget, commonlocators.audioInner);\n    cy.get(commonlocators.onPlay).click();\n    cy.selectShowMsg();\n    cy.addSuccessMessage(\"Play success\");\n    cy.get(widgetsPage.autoPlay).click();\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Audio/audio_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Audio widget pause functionality validation","suites":["Audio Widget Functionality"],"updatePoint":{"line":22,"column":49,"index":879},"line":22,"code":"  it(\"Audio widget pause functionality validation\", function () {\n    cy.get(commonlocators.onPause).click();\n    cy.selectShowMsg();\n    cy.addSuccessMessage(\"Pause success\");\n    cy.get(widgetsPage.autoPlay).click();\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Audio/audio_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Update audio url and check play and pause functionality validation","suites":["Audio Widget Functionality"],"updatePoint":{"line":29,"column":72,"index":1230},"line":29,"code":"  it(\"Update audio url and check play and pause functionality validation\", function () {\n    cy.testCodeMirror(testdata.audioUrl);\n    cy.get(\".CodeMirror textarea\").first().blur();\n    cy.get(widgetsPage.autoPlay).click({\n      force: true\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(widgetsPage.autoPlay).click({\n      force: true\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Audio/audio_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Drag & drop AudioRecorder and Text widgets","suites":["AudioRecorder Widget"],"updatePoint":{"line":5,"column":48,"index":208},"line":5,"code":"  it(\"Drag & drop AudioRecorder and Text widgets\", () => {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(widgetName, {\n      x: 300,\n      y: 300\n    });\n    cy.get(`.t--widget-${widgetName}`).should(\"exist\");\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 300,\n      y: 500\n    });\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{AudioRecorder1.isDirty}}`);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Audio/AudioRecorder_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check isDirty meta property","suites":["AudioRecorder Widget"],"updatePoint":{"line":19,"column":33,"index":630},"line":19,"code":"  it(\"Check isDirty meta property\", () => {\n    // Check if isDirty is false for the first time\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\"); // Interact with UI\n\n    cy.get(`.t--widget-${widgetName} button`).first().click();\n    cy.get(`.t--widget-${widgetName} .status`).should(\"have.text\", \"Press to start recording\").should(\"exist\"); // Start recording and recorder for 3 seconds\n\n    cy.get(`.t--widget-${widgetName} button`).first().click();\n    cy.wait(3000); // Stop recording\n\n    cy.get(`.t--widget-${widgetName} button span.bp3-icon-symbol-square`).first().click(); // Check if isDirty is set to true\n\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"true\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Audio/AudioRecorder_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Button-Modal Validation","suites":["Button Widget Functionality"],"updatePoint":{"line":18,"column":32,"index":571},"line":18,"code":"  it(\"1. Button-Modal Validation\", function () {\n    //creating the Modal and verify Modal name\n    cy.createModal(this.data.ModalName);\n    cy.PublishtheApp();\n    cy.get(publishPage.buttonWidget).click();\n    cy.get(modalWidgetPage.modelTextField).should(\"have.text\", this.data.ModalName);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Button/Button_onClickAction_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Button-CallAnApi Validation","suites":["Button Widget Functionality"],"updatePoint":{"line":25,"column":36,"index":873},"line":25,"code":"  it(\"2. Button-CallAnApi Validation\", function () {\n    //creating an api and calling it from the onClickAction of the button widget.\n    // Creating the api\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"buttonApi\");\n    cy.log(\"Creation of buttonApi Action successful\");\n    cy.enterDatasourceAndPath(this.data.paginationUrl, \"users?page=4&size=3\");\n    cy.SaveAndRunAPI(); // Going to HomePage where the button widget is located and opeing it's property pane.\n\n    cy.get(widgetsPage.NavHomePage).click({\n      force: true\n    });\n    cy.reload();\n    cy.openPropertyPane(\"buttonwidget\"); // Adding the api in the onClickAction of the button widget.\n\n    cy.addAPIFromLightningMenu(\"buttonApi\"); // Filling the messages for success/failure in the onClickAction of the button widget.\n\n    cy.onClickActions(\"Success\", \"Error\", \"onclick\");\n    cy.PublishtheApp(); // Clicking the button to verify the success message\n\n    cy.get(publishPage.buttonWidget).click();\n    cy.get(widgetsPage.apiCallToast).should(\"have.text\", \"Success\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Button/Button_onClickAction_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Button-Call-Query Validation","suites":["Button Widget Functionality"],"updatePoint":{"line":48,"column":37,"index":1916},"line":48,"code":"  it(\"3. Button-Call-Query Validation\", function () {\n    //creating a query and calling it from the onClickAction of the button widget.\n    // Creating a mock query\n    // cy.CreateMockQuery(\"Query1\");\n    let postgresDatasourceName;\n    cy.startRoutesForDatasource();\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.PostgreSQL).click();\n    cy.generateUUID().then(uid => {\n      postgresDatasourceName = uid;\n      cy.get(\".t--edit-datasource-name\").click();\n      cy.get(\".t--edit-datasource-name input\").clear().type(postgresDatasourceName, {\n        force: true\n      }).should(\"have.value\", postgresDatasourceName).blur();\n      cy.wait(\"@saveDatasource\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n      cy.fillPostgresDatasourceForm();\n      cy.saveDatasource();\n      cy.NavigateToActiveDSQueryPane(postgresDatasourceName);\n    });\n    cy.CreateMockQuery(\"Query1\"); // Going to HomePage where the button widget is located and opeing it's property pane.\n\n    cy.get(widgetsPage.NavHomePage).click({\n      force: true\n    });\n    cy.reload();\n    cy.openPropertyPane(\"buttonwidget\"); // Adding the query in the onClickAction of the button widget.\n\n    cy.addQueryFromLightningMenu(\"Query1\"); // Filling the messages for success/failure in the onClickAction of the button widget.\n\n    cy.onClickActions(\"Success\", \"Error\", \"onclick\");\n    cy.PublishtheApp(); // Clicking the button to verify the success message\n\n    cy.get(publishPage.buttonWidget).click();\n    cy.get(widgetsPage.apiCallToast).should(\"have.text\", \"Success\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Button/Button_onClickAction_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Toggle JS - Button-CallAnApi Validation","suites":["Button Widget Functionality"],"updatePoint":{"line":83,"column":48,"index":3509},"line":83,"code":"  it(\"4. Toggle JS - Button-CallAnApi Validation\", function () {\n    //creating an api and calling it from the onClickAction of the button widget.\n    // calling the existing api\n    cy.get(widgetsPage.toggleOnClick).click({\n      force: true\n    });\n    cy.testJsontext(\"onclick\", \"{{buttonApi.run(() => showAlert('Success','success'), () => showAlert('Error','error'))}}\");\n    cy.PublishtheApp(); // Clicking the button to verify the success message\n\n    cy.get(publishPage.buttonWidget).click();\n    cy.get(widgetsPage.apiCallToast).should(\"have.text\", \"Success\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Button/Button_onClickAction_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Toggle JS - Button-Call-Query Validation","suites":["Button Widget Functionality"],"updatePoint":{"line":95,"column":49,"index":4085},"line":95,"code":"  it(\"5. Toggle JS - Button-Call-Query Validation\", function () {\n    //creating a query and calling it from the onClickAction of the button widget.\n    // Creating a mock query\n    cy.testJsontext(\"onclick\", \"{{Query1.run(() => showAlert('Success','success'), () => showAlert('Error','error'))}}\");\n    cy.PublishtheApp(); // Clicking the button to verify the success message\n\n    cy.get(publishPage.buttonWidget).click();\n    cy.get(widgetsPage.apiCallToast).should(\"have.text\", \"Success\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Button/Button_onClickAction_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Icon alignment should not change when changing the icon","suites":["Button Widget Functionality"],"updatePoint":{"line":17,"column":61,"index":591},"line":17,"code":"  it(\"Icon alignment should not change when changing the icon\", () => {\n    // Add an icon\n    cy.get(\".t--property-control-icon .bp3-icon-caret-down\").click({\n      force: true\n    });\n    cy.get(\".bp3-icon-add\").first().click({\n      force: true\n    }); // Assert if the icon exists\n\n    cy.get(`${widgetsPage.buttonWidget} .bp3-icon-add`).should(\"exist\"); // Change icon alignment to right\n\n    cy.get(`${iconAlignmentProperty} .t--button-tab-right`).last().click({\n      force: true\n    });\n    cy.wait(200); // Assert if the icon appears on the right hand side of the button text\n\n    cy.get(widgetsPage.buttonWidget).contains(\"Submit\").children(\"span\").should(\"have.length\", 2);\n    cy.get(`${widgetsPage.buttonWidget} span.bp3-button-text`).next().should(\"have.class\", \"bp3-icon-add\"); // Change the existing icon\n\n    cy.get(\".t--property-control-icon .bp3-icon-caret-down\").click({\n      force: true\n    });\n    cy.get(\".bp3-icon-airplane\").first().click({\n      force: true\n    }); // Assert if the icon changes\n    // Assert if the icon still exists on the right side of the text\n\n    cy.get(`${widgetsPage.buttonWidget} .bp3-icon-airplane`).should(\"exist\").prev().should(\"have.text\", \"Submit\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Button/Button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Button-Color Validation","suites":["Button Widget Functionality"],"updatePoint":{"line":46,"column":29,"index":1772},"line":46,"code":"  it(\"Button-Color Validation\", function () {\n    // Change button color\n    cy.changeButtonColor(\"rgb(255, 0, 0)\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Button/Button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Button default variant validation","suites":["Button Widget Functionality"],"updatePoint":{"line":50,"column":39,"index":1905},"line":50,"code":"  it(\"Button default variant validation\", function () {\n    // Checks whether the default variant is PRIMARY or not\n    cy.get(widgetsPage.widgetBtn).should(\"have.attr\", \"data-test-variant\", \"PRIMARY\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Button/Button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Button-Name validation","suites":["Button Widget Functionality"],"updatePoint":{"line":54,"column":28,"index":2103},"line":54,"code":"  it(\"Button-Name validation\", function () {\n    //changing the Button Name\n    cy.widgetText(this.data.ButtonName, widgetsPage.buttonWidget, widgetsPage.buttonWidget + \" \" + commonlocators.widgetNameTag); //Changing the text on the Button\n\n    cy.testJsontext(\"label\", this.data.ButtonLabel);\n    cy.get(commonlocators.evaluatedTypeTitle).first().find(\"span\").click();\n    cy.EvaluateDataType(\"string\");\n    cy.EvaluateCurrentValue(this.data.ButtonLabel);\n    cy.assertPageSave(); //Verify the Button name and label\n\n    cy.get(widgetsPage.buttonWidget).trigger(\"mouseover\");\n    cy.get(widgetsPage.buttonWidget + \" span.bp3-button-text\").should(\"have.text\", this.data.ButtonLabel);\n    cy.PublishtheApp();\n    cy.get(publishPage.buttonWidget + \" span.bp3-button-text\").should(\"have.text\", this.data.ButtonLabel);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Button/Button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Button-Disable Validation","suites":["Button Widget Functionality"],"updatePoint":{"line":69,"column":31,"index":2927},"line":69,"code":"  it(\"Button-Disable Validation\", function () {\n    //Check the disableed checkbox and Validate\n    cy.CheckWidgetProperties(commonlocators.disableCheckbox);\n    cy.validateDisableWidget(widgetsPage.buttonWidget, commonlocators.disabledField);\n    cy.PublishtheApp();\n    cy.validateDisableWidget(publishPage.buttonWidget, commonlocators.disabledField);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Button/Button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Button-Enable Validation","suites":["Button Widget Functionality"],"updatePoint":{"line":76,"column":30,"index":3286},"line":76,"code":"  it(\"Button-Enable Validation\", function () {\n    //Uncheck the disabled checkbox and validate\n    cy.UncheckWidgetProperties(commonlocators.disableCheckbox);\n    cy.validateEnableWidget(widgetsPage.buttonWidget, commonlocators.disabledField);\n    cy.PublishtheApp();\n    cy.validateEnableWidget(publishPage.buttonWidget, commonlocators.disabledField);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Button/Button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Toggle JS - Button-Disable Validation","suites":["Button Widget Functionality"],"updatePoint":{"line":83,"column":43,"index":3659},"line":83,"code":"  it(\"Toggle JS - Button-Disable Validation\", function () {\n    //Check the disabled checkbox by using JS widget and Validate\n    cy.get(widgetsPage.toggleDisable).click({\n      force: true\n    });\n    cy.testJsontext(\"disabled\", \"true\");\n    cy.validateDisableWidget(widgetsPage.buttonWidget, commonlocators.disabledField);\n    cy.PublishtheApp();\n    cy.validateDisableWidget(publishPage.buttonWidget, commonlocators.disabledField);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Button/Button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Toggle JS - Button-Enable Validation","suites":["Button Widget Functionality"],"updatePoint":{"line":93,"column":42,"index":4099},"line":93,"code":"  it(\"Toggle JS - Button-Enable Validation\", function () {\n    //Uncheck the disabled checkbox and validate\n    cy.testJsontext(\"disabled\", \"false\");\n    cy.validateEnableWidget(widgetsPage.buttonWidget, commonlocators.disabledField);\n    cy.PublishtheApp();\n    cy.validateEnableWidget(publishPage.buttonWidget, commonlocators.disabledField);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Button/Button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Button-Unckeck Visible field Validation","suites":["Button Widget Functionality"],"updatePoint":{"line":100,"column":45,"index":4452},"line":100,"code":"  it(\"Button-Unckeck Visible field Validation\", function () {\n    //Uncheck the disabled checkbox and validate\n    cy.UncheckWidgetProperties(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publishPage.buttonWidget).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Button/Button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Button-Check Visible field Validation","suites":["Button Widget Functionality"],"updatePoint":{"line":106,"column":43,"index":4713},"line":106,"code":"  it(\"Button-Check Visible field Validation\", function () {\n    //Check the disableed checkbox and Validate\n    cy.CheckWidgetProperties(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publishPage.buttonWidget).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Button/Button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Toggle JS - Button-Unckeck Visible field Validation","suites":["Button Widget Functionality"],"updatePoint":{"line":112,"column":57,"index":4986},"line":112,"code":"  it(\"Toggle JS - Button-Unckeck Visible field Validation\", function () {\n    //Uncheck the disabled checkbox using JS and validate\n    cy.get(widgetsPage.toggleVisible).click({\n      force: true\n    });\n    cy.EnableAllCodeEditors();\n    cy.testJsontext(\"visible\", \"false\");\n    cy.PublishtheApp();\n    cy.get(publishPage.buttonWidget).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Button/Button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Toggle JS - Button-Check Visible field Validation","suites":["Button Widget Functionality"],"updatePoint":{"line":122,"column":55,"index":5348},"line":122,"code":"  it(\"Toggle JS - Button-Check Visible field Validation\", function () {\n    //Check the disabled checkbox using JS and Validate\n    cy.EnableAllCodeEditors();\n    cy.testJsontext(\"visible\", \"true\");\n    cy.PublishtheApp();\n    cy.get(publishPage.buttonWidget).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Button/Button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Button-Check recaptcha type can be selected","suites":["Button Widget Functionality"],"updatePoint":{"line":129,"column":49,"index":5630},"line":129,"code":"  it(\"Button-Check recaptcha type can be selected\", function () {\n    cy.selectDropdownValue(commonlocators.recaptchaVersion, \"reCAPTCHA v2\");\n    cy.get(commonlocators.recaptchaVersion).last().should(\"have.text\", \"reCAPTCHA v2\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Button/Button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Button-Copy Verification","suites":["Button Widget Functionality"],"updatePoint":{"line":133,"column":30,"index":5848},"line":133,"code":"  it(\"Button-Copy Verification\", function () {\n    //Copy button and verify all properties\n    cy.copyWidget(\"buttonwidget\", widgetsPage.buttonWidget); // cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Button/Button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Button-Delete Verification","suites":["Button Widget Functionality"],"updatePoint":{"line":137,"column":32,"index":6031},"line":137,"code":"  it(\"Button-Delete Verification\", function () {\n    // Delete the button widget\n    cy.deleteWidget(widgetsPage.buttonWidget);\n    cy.PublishtheApp();\n    cy.get(widgetsPage.buttonWidget).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Button/Button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate show/hide tooltip feature on normal button","suites":["Button Widget Functionality - Validate tooltip visibility"],"updatePoint":{"line":13,"column":57,"index":476},"line":13,"code":"  it(\"Validate show/hide tooltip feature on normal button\", function () {\n    cy.openPropertyPane(\"buttonwidget\"); // Add tooltip\n\n    cy.testJsontext(\"tooltip\", \"Lorem Ipsum is simply dummy text of the printing and typesetting industry\"); // Hover in\n\n    cy.get(widgetsPage.buttonWidget).trigger(\"mouseover\"); // Check if a tooltip is displayed\n\n    cy.get(\".bp3-popover2-content\").should(\"have.text\", \"Lorem Ipsum is simply dummy text of the printing and typesetting industry\"); // Hover out\n\n    cy.get(widgetsPage.buttonWidget).trigger(\"mouseout\"); // Check if the tooltip is disappeared\n\n    cy.get(\".bp3-popover2-content\").contains(\"Lorem Ipsum is simply dummy text of the printing and typesetting industry\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Button/Button_tooltip_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate show/hide tooltip feature for a disabled button on deploy","suites":["Button Widget Functionality - Validate tooltip visibility"],"updatePoint":{"line":26,"column":72,"index":1234},"line":26,"code":"  it(\"Validate show/hide tooltip feature for a disabled button on deploy\", function () {\n    // Disable the button\n    cy.get(\".t--property-control-disabled .bp3-switch\").click({\n      force: true\n    });\n    cy.validateDisableWidget(widgetsPage.buttonWidget, commonlocators.disabledField); // Publish\n\n    cy.PublishtheApp(); // Hover in\n\n    cy.get(publish.buttonWidget).trigger(\"mouseover\"); // Check if a tooltip is displayed\n\n    cy.get(\".bp3-popover2-content\").should(\"have.text\", \"Lorem Ipsum is simply dummy text of the printing and typesetting industry\"); // Hover out\n\n    cy.get(publish.buttonWidget).trigger(\"mouseout\"); // Check if the tooltip is disappeared\n\n    cy.get(\".bp3-popover2-content\").contains(\"Lorem Ipsum is simply dummy text of the printing and typesetting industry\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Button/Button_tooltip_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"If target width is smaller than min-width, The menu button popover width should be set to minimum width","suites":["In a button group widget, menu button width"],"updatePoint":{"line":7,"column":109,"index":310},"line":7,"code":"  it(\"If target width is smaller than min-width, The menu button popover width should be set to minimum width\", () => {\n    const minWidth = 12 * 11.9375;\n    const widgetId = \"yxjq5sck7d\"; // Get the default menu button\n\n    cy.get(`.appsmith_widget_${widgetId} div.t--buttongroup-widget`).children().last().as(\"target\"); // Open popover\n\n    cy.get(\"@target\").click(); // Get the target width\n\n    cy.get(\"@target\").invoke(\"outerWidth\").then(targetWidth => {\n      expect(targetWidth).to.be.lessThan(minWidth); // Check if popover width is set to its target width\n\n      cy.get(`.bp3-popover2.button-group-${widgetId}`).should(\"have.css\", \"width\", `${minWidth}px`);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Button/ButtonGroup_MenuButton_Width_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"If target width is bigger than min width, The menu button popover width should always be the same as the target width","suites":["In a button group widget, menu button width"],"updatePoint":{"line":21,"column":123,"index":1006},"line":21,"code":"  it(\"If target width is bigger than min width, The menu button popover width should always be the same as the target width\", () => {\n    const minWidth = 12 * 11.9375;\n    const widgetId = \"t5l24fccio\";\n    const menuButtonId = \"groupButton3\"; // Get the default menu button\n\n    cy.get(`.appsmith_widget_${widgetId} div.t--buttongroup-widget`).children().last().as(\"target\"); // Open popover\n\n    cy.get(\"@target\").click(); // Get the target width\n\n    cy.get(\"@target\").invoke(\"outerWidth\").then(targetWidth => {\n      expect(targetWidth).to.be.greaterThan(minWidth); // Check if popover width is set to its target width\n\n      cy.get(`.bp3-popover2.button-group-${widgetId}`).should(\"have.css\", \"width\", `${targetWidth}px`);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Button/ButtonGroup_MenuButton_Width_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"After converting a simple button to a menu button, The menu button popover width should always be the same as the target width","suites":["In a button group widget, menu button width"],"updatePoint":{"line":36,"column":132,"index":1758},"line":36,"code":"  it(\"After converting a simple button to a menu button, The menu button popover width should always be the same as the target width\", () => {\n    const minWidth = 12 * 11.9375;\n    const widgetId = \"t5l24fccio\";\n    const menuButtonId = \"groupButton1\"; // Change the first button type to menu\n\n    cy.editColumn(menuButtonId);\n    cy.selectDropdownValue(\".t--property-control-buttontype\", \"Menu\");\n    cy.get(\".t--add-menu-item-btn\").click(); // Get the newly converted menu button\n\n    cy.get(`.appsmith_widget_${widgetId} div.t--buttongroup-widget`).children().first().as(\"target\"); // Open popover\n\n    cy.get(\"@target\").click(); // Get the target width\n\n    cy.get(\"@target\").invoke(\"outerWidth\").then(targetWidth => {\n      expect(targetWidth).to.be.greaterThan(minWidth); // Check if popover width is set to its target width\n\n      cy.get(`.bp3-popover2.button-group-${widgetId}`).should(\"have.css\", \"width\", `${targetWidth}px`);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Button/ButtonGroup_MenuButton_Width_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"If an existing menu button width changes, its popover width should always be the same as the changed target width","suites":["In a button group widget, menu button width"],"updatePoint":{"line":55,"column":119,"index":2696},"line":55,"code":"  it(\"If an existing menu button width changes, its popover width should always be the same as the changed target width\", () => {\n    const minWidth = 12 * 11.9375;\n    const widgetId = \"t5l24fccio\";\n    const menuButtonId = \"groupButton1\";\n    cy.get(\".t--property-pane-back-btn\").click(); // Change the first button text\n\n    cy.get(\".t--property-pane-section-buttons input\").first().type(\"increase width\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200); // Get the menu button with its width changed\n\n    cy.get(`.appsmith_widget_${widgetId} div.t--buttongroup-widget`).children().first().as(\"target\"); // Open popover\n\n    cy.get(\"@target\").click(); // Get the target width\n\n    cy.get(\"@target\").invoke(\"outerWidth\").then(targetWidth => {\n      expect(targetWidth).to.be.greaterThan(minWidth); // Check if popover width is set to its target width\n\n      cy.get(`.bp3-popover2.button-group-${widgetId}`).should(\"have.css\", \"width\", `${targetWidth}px`);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Button/ButtonGroup_MenuButton_Width_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"After changing the orientation to vertical , The menu button popover width should always be the same as the target width","suites":["In a button group widget, menu button width"],"updatePoint":{"line":74,"column":126,"index":3730},"line":74,"code":"  it(\"After changing the orientation to vertical , The menu button popover width should always be the same as the target width\", () => {\n    const widgetId = \"mr048y04aq\";\n    const menuButtonId = \"groupButton3\"; // Open property pane of ButtonGroup3\n\n    cy.get(`.appsmith_widget_${widgetId} div.t--buttongroup-widget`).children().first().click(); // Change its orientation to vetical\n\n    cy.selectDropdownValue(\".t--property-control-orientation\", \"Vertical\"); // Get the default menu button\n\n    cy.get(`.appsmith_widget_${widgetId} div.t--buttongroup-widget`).children().last().as(\"target\"); // Open popover\n\n    cy.get(\"@target\").click(); // Get the target width\n\n    cy.get(\"@target\").invoke(\"outerWidth\").then(targetWidth => {\n      // Check if popover width is set to its target width\n      cy.get(`.bp3-popover2.button-group-${widgetId}`).should(\"have.css\", \"width\", `${targetWidth}px`);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Button/ButtonGroup_MenuButton_Width_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Add new Button Group","suites":["Button Group Widget Functionality"],"updatePoint":{"line":8,"column":26,"index":358},"line":8,"code":"  it(\"Add new Button Group\", () => {\n    cy.wait(1000);\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"buttongroupwidget\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(\".t--buttongroup-widget\").should(\"exist\");\n    cy.get(\".t--buttongroup-widget\").children().should(\"have.length\", 3);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Button/ButtonGroup_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"ButtonGroup Widget Functionality on undo after delete","suites":["Button Group Widget Functionality"],"updatePoint":{"line":18,"column":59,"index":706},"line":18,"code":"  it(\"ButtonGroup Widget Functionality on undo after delete\", function () {\n    // Delete the first Button\n    cy.get(\".t--property-control- .t--delete-column-btn\").eq(0).click({\n      force: true\n    }); // Check if the Button got deleted\n\n    cy.get(\".t--buttongroup-widget\").children().should(\"have.length\", 2); // Check the first button\n\n    cy.get(firstButton).contains(\"Add\"); // Undo\n\n    cy.get(\"body\").type(\"{ctrl+z}\"); // Check if the button is back\n\n    cy.get(\".t--buttongroup-widget\").children().should(\"have.length\", 3); // Check the first button\n\n    cy.get(firstButton).contains(\"Favorite\"); // Navigate to the first button property pane\n\n    cy.get(\".t--property-control- .t--edit-column-btn\").eq(0).click({\n      force: true\n    });\n    cy.wait(1000); // check the title\n\n    cy.get(\".t--property-pane-title\").contains(\"Favorite\"); // navigate back\n\n    cy.get(\".t--property-pane-back-btn\").click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Button/ButtonGroup_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Verify buttons alignments","suites":["Button Group Widget Functionality"],"updatePoint":{"line":43,"column":31,"index":1602},"line":43,"code":"  it(\"Verify buttons alignments\", function () {\n    // check first button placement\n    cy.editColumn(\"groupButton1\"); // placement text\n\n    cy.get(\".t--property-control-placement .bp3-popover-target span[type='p1']\").should(\"have.text\", \"Center\"); // 1st btn\n\n    cy.get(firstButton).should(\"have.css\", \"justify-content\", \"center\");\n    cy.get(menuButton).should(\"have.css\", \"justify-content\", \"center\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Button/ButtonGroup_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Update Placement and Verify buttons alignments","suites":["Button Group Widget Functionality"],"updatePoint":{"line":52,"column":52,"index":2036},"line":52,"code":"  it(\"Update Placement and Verify buttons alignments\", function () {\n    // check first button placement\n    cy.selectDropdownValue(\".t--property-control-placement .bp3-popover-target\", \"Between\"); // 1st btn\n\n    cy.get(firstButton).should(\"have.css\", \"justify-content\", \"space-between\"); // update dropdown value\n\n    cy.selectDropdownValue(\".t--property-control-placement .bp3-popover-target\", \"Start\");\n    cy.get(firstButton).should(\"have.css\", \"justify-content\", \"start\"); // other button style stay same\n\n    cy.get(menuButton).should(\"have.css\", \"justify-content\", \"center\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Button/ButtonGroup_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Update icon alignment and Verify buttons alignments","suites":["Button Group Widget Functionality"],"updatePoint":{"line":63,"column":57,"index":2631},"line":63,"code":"  it(\"Update icon alignment and Verify buttons alignments\", function () {\n    // align right\n    cy.get(\".t--property-control-iconalignment .t--button-tab-left\").first().click();\n    cy.wait(200); // 1st btn\n\n    cy.get(firstButton).eq(0).should(\"have.css\", \"flex-direction\", \"row\"); // align left\n\n    cy.get(\".t--property-control-iconalignment .t--button-tab-right\").last().click();\n    cy.wait(200); // 1st btn\n\n    cy.get(firstButton).eq(0).should(\"have.css\", \"flex-direction\", \"row-reverse\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Button/ButtonGroup_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Linting Error validation on mouseover and errorlog tab","suites":["Linting warning validation with button widget"],"updatePoint":{"line":9,"column":60,"index":329},"line":9,"code":"  it(\"Linting Error validation on mouseover and errorlog tab\", function () {\n    cy.openPropertyPane(\"buttonwidget\");\n    /**\n     * @param{Text} Random Text\n     * @param{CheckboxWidget}Mouseover\n     * @param{CheckboxPre Css} Assertion\n     */\n    //Mouse hover to exact warning message\n\n    cy.get(commonlocators.labelSectionTxt).first().click({\n      force: true\n    }).wait(500); //lint mark validation\n\n    cy.get(commonlocators.lintError).first().should(\"be.visible\");\n    cy.get(commonlocators.lintError).last().should(\"be.visible\");\n    cy.get(commonlocators.lintError).first().trigger(\"mouseover\", {\n      force: true\n    }).wait(500); //lint warning message\n\n    cy.get(commonlocators.lintErrorMsg).should(\"be.visible\").contains(\"'Nodata' is not defined.\");\n    cy.get(commonlocators.lintError).last().trigger(\"mouseover\", {\n      force: true\n    }).wait(500); //lint warning message\n\n    cy.get(commonlocators.lintErrorMsg).should(\"be.visible\").contains(\"'lintError' is not defined.\");\n    cy.get(commonlocators.debugger).should(\"be.visible\").click({\n      force: true\n    });\n    cy.get(commonlocators.errorTab).should(\"be.visible\").click({\n      force: true\n    });\n    cy.get(commonlocators.debugErrorMsg).eq(0).contains(\"ReferenceError: Nodata is not defined\");\n    cy.get(commonlocators.debugErrorMsg).eq(2).contains(\"ReferenceError: lintError is not defined\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Button/ButtonLintErrorValidation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Fill the Chart Widget Properties.","suites":["Chart Widget Functionality"],"updatePoint":{"line":20,"column":39,"index":656},"line":20,"code":"  it(\"Fill the Chart Widget Properties.\", function () {\n    //changing the Chart Name\n\n    /**\n     * @param{Text} Random Text\n     * @param{ChartWidget}Mouseover\n     * @param{ChartPre Css} Assertion\n     */\n    cy.widgetText(\"Test\", viewWidgetsPage.chartWidget, commonlocators.containerInnerText);\n    cy.EnableAllCodeEditors(); //changing the Chart Title\n\n    /**\n     * @param{Text} Random Input Value\n     */\n\n    cy.testCodeMirror(this.data.chartIndata);\n    cy.get(viewWidgetsPage.chartInnerText).click().contains(\"App Sign Up\").should(\"have.text\", \"App Sign Up\"); //Entering the Chart data\n\n    cy.testJsontext(\"chart-series-data-control\", JSON.stringify(this.data.chartInput));\n    cy.get(\".t--propertypane\").click(\"right\"); // Asserting Chart Height\n\n    cy.get(viewWidgetsPage.chartWidget).should(\"be.visible\").and(chart => {\n      expect(chart.height()).to.be.greaterThan(200);\n    }); //Entring the label of x-axis\n\n    cy.get(viewWidgetsPage.xlabel).click({\n      force: true\n    }).type(this.data.command).type(this.data.plan); //Entring the label of y-axis\n\n    cy.get(viewWidgetsPage.ylabel).click({\n      force: true\n    }).type(this.data.command).click({\n      force: true\n    }).type(this.data.ylabel);\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Chart/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Pie Chart Widget Functionality","suites":["Chart Widget Functionality"],"updatePoint":{"line":56,"column":36,"index":1906},"line":56,"code":"  it(\"Pie Chart Widget Functionality\", function () {\n    //changing the Chart type\n    cy.UpdateChartType(\"Pie Chart\"); //Verifying X-axis labels\n\n    cy.get(viewWidgetsPage.chartWidget).should(\"have.css\", \"opacity\", \"1\");\n    const labels = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n    [0, 1, 2, 3, 4, 5, 6].forEach(k => {\n      cy.get(viewWidgetsPage.rectangleChart).last().trigger(\"mousemove\", {\n        force: true\n      });\n      cy.get(viewWidgetsPage.PieChartLabel).eq(k).should(\"have.text\", labels[k]);\n    });\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Chart/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Line Chart Widget Functionality","suites":["Chart Widget Functionality"],"updatePoint":{"line":70,"column":37,"index":2466},"line":70,"code":"  it(\"Line Chart Widget Functionality\", function () {\n    //changing the Chart type\n    cy.UpdateChartType(\"Line Chart\"); //Verifying X-axis labels\n\n    cy.get(viewWidgetsPage.chartWidget).should(\"have.css\", \"opacity\", \"1\");\n    const labels = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n    [0, 1, 2, 3, 4, 5, 6].forEach(k => {\n      cy.get(viewWidgetsPage.rectangleChart).last().trigger(\"mousemove\", {\n        force: true\n      });\n      cy.get(viewWidgetsPage.Chartlabel).eq(k).should(\"have.text\", labels[k]);\n    });\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Chart/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Bar Chart Widget Functionality","suites":["Chart Widget Functionality"],"updatePoint":{"line":84,"column":36,"index":3023},"line":84,"code":"  it(\"Bar Chart Widget Functionality\", function () {\n    //changing the Chart type\n    cy.UpdateChartType(\"Bar Chart\"); //Verifying X-axis labels\n\n    cy.get(viewWidgetsPage.chartWidget).should(\"have.css\", \"opacity\", \"1\");\n    const labels = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n    [0, 1, 2, 3, 4, 5, 6].forEach(k => {\n      cy.get(viewWidgetsPage.rectangleChart).eq(k).trigger(\"mousemove\", {\n        force: true\n      });\n      cy.get(viewWidgetsPage.Chartlabel).eq(k).should(\"have.text\", labels[k]);\n    });\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Chart/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Area Chart Widget Functionality","suites":["Chart Widget Functionality"],"updatePoint":{"line":98,"column":37,"index":3579},"line":98,"code":"  it(\"Area Chart Widget Functionality\", function () {\n    //changing the Chart type\n    cy.UpdateChartType(\"Area Chart\"); //Verifying X-axis labels\n\n    cy.get(viewWidgetsPage.chartWidget).should(\"have.css\", \"opacity\", \"1\");\n    const labels = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n    [0, 1, 2, 3, 4, 5, 6].forEach(k => {\n      cy.get(viewWidgetsPage.rectangleChart).last().trigger(\"mousemove\", {\n        force: true\n      });\n      cy.get(viewWidgetsPage.Chartlabel).eq(k).should(\"have.text\", labels[k]);\n    });\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Chart/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Column Chart Widget Functionality","suites":["Chart Widget Functionality"],"updatePoint":{"line":112,"column":39,"index":4139},"line":112,"code":"  it(\"Column Chart Widget Functionality\", function () {\n    //changing the Chart type\n    cy.UpdateChartType(\"Column Chart\"); //Verifying X-axis labels\n\n    cy.get(viewWidgetsPage.chartWidget).should(\"have.css\", \"opacity\", \"1\");\n    const labels = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n    [0, 1, 2, 3, 4, 5, 6].forEach(k => {\n      cy.get(viewWidgetsPage.rectangleChart).eq(k).trigger(\"mousemove\", {\n        force: true\n      });\n      cy.get(viewWidgetsPage.Chartlabel).eq(k).should(\"have.text\", labels[k]);\n    });\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Chart/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Toggle JS - Pie Chart Widget Functionality","suites":["Chart Widget Functionality"],"updatePoint":{"line":126,"column":48,"index":4709},"line":126,"code":"  it(\"Toggle JS - Pie Chart Widget Functionality\", function () {\n    //changing the Chart type\n    cy.get(widgetsPage.toggleChartType).click({\n      force: true\n    });\n    cy.testJsontext(\"charttype\", \"PIE_CHART\"); //Verifying X-axis labels\n\n    cy.get(viewWidgetsPage.chartWidget).should(\"have.css\", \"opacity\", \"1\");\n    const labels = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n    [0, 1, 2, 3, 4, 5, 6].forEach(k => {\n      cy.get(viewWidgetsPage.rectangleChart).last().trigger(\"mousemove\", {\n        force: true\n      });\n      cy.get(viewWidgetsPage.PieChartLabel).eq(k).should(\"have.text\", labels[k]);\n    });\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Chart/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Toggle JS - Line Chart Widget Functionality","suites":["Chart Widget Functionality"],"updatePoint":{"line":143,"column":49,"index":5365},"line":143,"code":"  it(\"Toggle JS - Line Chart Widget Functionality\", function () {\n    //changing the Chart type\n    cy.testJsontext(\"charttype\", \"LINE_CHART\"); //Verifying X-axis labels\n\n    cy.get(viewWidgetsPage.chartWidget).should(\"have.css\", \"opacity\", \"1\");\n    const labels = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n    [0, 1, 2, 3, 4, 5, 6].forEach(k => {\n      cy.get(viewWidgetsPage.rectangleChart).last().trigger(\"mousemove\", {\n        force: true\n      });\n      cy.get(viewWidgetsPage.Chartlabel).eq(k).should(\"have.text\", labels[k]);\n    });\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Chart/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Toggle JS - Bar Chart Widget Functionality","suites":["Chart Widget Functionality"],"updatePoint":{"line":157,"column":48,"index":5944},"line":157,"code":"  it(\"Toggle JS - Bar Chart Widget Functionality\", function () {\n    //changing the Chart type\n    cy.testJsontext(\"charttype\", \"BAR_CHART\"); //Verifying X-axis labels\n\n    cy.get(viewWidgetsPage.chartWidget).should(\"have.css\", \"opacity\", \"1\");\n    const labels = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n    [0, 1, 2, 3, 4, 5, 6].forEach(k => {\n      cy.get(viewWidgetsPage.rectangleChart).eq(k).trigger(\"mousemove\", {\n        force: true\n      });\n      cy.get(viewWidgetsPage.Chartlabel).eq(k).should(\"have.text\", labels[k]);\n    });\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Chart/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Toggle JS - Area Chart Widget Functionality","suites":["Chart Widget Functionality"],"updatePoint":{"line":171,"column":49,"index":6522},"line":171,"code":"  it(\"Toggle JS - Area Chart Widget Functionality\", function () {\n    //changing the Chart type\n    cy.testJsontext(\"charttype\", \"AREA_CHART\"); //Verifying X-axis labels\n\n    cy.get(viewWidgetsPage.chartWidget).should(\"have.css\", \"opacity\", \"1\");\n    const labels = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n    [0, 1, 2, 3, 4, 5, 6].forEach(k => {\n      cy.get(viewWidgetsPage.rectangleChart).last().trigger(\"mousemove\", {\n        force: true\n      });\n      cy.get(viewWidgetsPage.Chartlabel).eq(k).should(\"have.text\", labels[k]);\n    });\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Chart/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Toggle JS - Column Chart Widget Functionality","suites":["Chart Widget Functionality"],"updatePoint":{"line":185,"column":51,"index":7104},"line":185,"code":"  it(\"Toggle JS - Column Chart Widget Functionality\", function () {\n    //changing the Chart type\n    cy.testJsontext(\"charttype\", \"COLUMN_CHART\"); //Verifying X-axis labels\n\n    cy.get(viewWidgetsPage.chartWidget).should(\"have.css\", \"opacity\", \"1\");\n    const labels = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n    [0, 1, 2, 3, 4, 5, 6].forEach(k => {\n      cy.get(viewWidgetsPage.rectangleChart).eq(k).trigger(\"mousemove\", {\n        force: true\n      });\n      cy.get(viewWidgetsPage.Chartlabel).eq(k).should(\"have.text\", labels[k]);\n    });\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Chart/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Chart - Modal","suites":["Chart Widget Functionality"],"updatePoint":{"line":199,"column":19,"index":7655},"line":199,"code":"  it(\"Chart - Modal\", function () {\n    //creating the Modal and verify Modal name\n    cy.createModal(this.data.ModalName);\n    cy.PublishtheApp();\n    cy.get(widgetsPage.chartPlotGroup).children().first().click();\n    cy.get(modalWidgetPage.modelTextField).should(\"have.text\", this.data.ModalName);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Chart/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Chart-Unckeck Visible field Validation","suites":["Chart Widget Functionality"],"updatePoint":{"line":206,"column":44,"index":7986},"line":206,"code":"  it(\"Chart-Unckeck Visible field Validation\", function () {\n    // Making the widget invisible\n    cy.togglebarDisable(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.chartWidget).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Chart/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Chart-Check Visible field Validation","suites":["Chart Widget Functionality"],"updatePoint":{"line":212,"column":42,"index":8220},"line":212,"code":"  it(\"Chart-Check Visible field Validation\", function () {\n    // Making the widget visible\n    cy.togglebar(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.chartWidget).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Chart/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Toggle JS - Chart-Unckeck Visible field Validation","suites":["Chart Widget Functionality"],"updatePoint":{"line":218,"column":56,"index":8460},"line":218,"code":"  it(\"Toggle JS - Chart-Unckeck Visible field Validation\", function () {\n    //Uncheck the disabled checkbox using JS and validate\n    cy.get(widgetsPage.toggleVisible).click({\n      force: true\n    });\n    cy.testJsontext(\"visible\", \"false\");\n    cy.PublishtheApp();\n    cy.get(publish.chartWidget).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Chart/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Toggle JS - Chart-Check Visible field Validation","suites":["Chart Widget Functionality"],"updatePoint":{"line":227,"column":54,"index":8785},"line":227,"code":"  it(\"Toggle JS - Chart-Check Visible field Validation\", function () {\n    //Check the disabled checkbox using JS and Validate\n    cy.testJsontext(\"visible\", \"true\");\n    cy.PublishtheApp();\n    cy.get(publish.chartWidget).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Chart/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Chart Widget Functionality To Uncheck Horizontal Scroll Visible","suites":["Chart Widget Functionality"],"updatePoint":{"line":233,"column":69,"index":9051},"line":233,"code":"  it(\"Chart Widget Functionality To Uncheck Horizontal Scroll Visible\", function () {\n    cy.togglebarDisable(commonlocators.allowScroll);\n    cy.PublishtheApp();\n    cy.get(publish.horizontalTab).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Chart/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Chart Widget Functionality To Check Horizontal Scroll Visible","suites":["Chart Widget Functionality"],"updatePoint":{"line":238,"column":67,"index":9273},"line":238,"code":"  it(\"Chart Widget Functionality To Check Horizontal Scroll Visible\", function () {\n    cy.togglebar(commonlocators.allowScroll);\n    cy.PublishtheApp();\n    cy.get(publish.horizontalTab).eq(1).should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Chart/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test case while reloading and on submission","suites":["Chart Widget Skeleton Loading Functionality"],"updatePoint":{"line":11,"column":49,"index":388},"line":11,"code":"  it(\"Test case while reloading and on submission\", function () {\n    /**\n     * Use case:\n     * 1. Open Datasource editor\n     * 2. Click on sample(mock) user database.\n     * 3. Choose the first data source which consists of users keyword\n     * 4. Click on the \"New Query +\"\" button\n     * 5. Name the Query as \"Query1\"\n     * 6. Write the query as \"SELECT * FROM users ORDER BY id LIMIT 10;\"\n     * 7. Run the Query\n     * 8. Go to Widgets\n     * 9. Click on the Submit Button\n     * 10. Check if we get \"bp3-skeleton\" class\n     * 11. Reload the page\n     * 12. Do step 10.\n     * 13. Remove the datasource*\n     */\n    //Step1\n    cy.wait(2000);\n    cy.NavigateToDatasourceEditor(); //Step2\n\n    cy.get(datasource.mockUserDatabase).click(); //Step3 & 4\n\n    cy.get(`${datasource.datasourceCard}`).contains(\"Users\").get(`${datasource.createQuery}`).last().click({\n      force: true\n    }); //Step5.1: Click the editing field\n\n    cy.get(\".t--action-name-edit-field\").click({\n      force: true\n    }); //Step5.2: Click the editing field\n\n    cy.get(queryLocators.queryNameField).type(\"Query1\"); // switching off Use Prepared Statement toggle\n\n    cy.get(queryLocators.switch).last().click({\n      force: true\n    }); //Step 6.1: Click on Write query area\n\n    cy.get(queryLocators.templateMenu).click();\n    cy.get(queryLocators.query).click({\n      force: true\n    }); // Step6.2: writing query to get the schema\n\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"SELECT * FROM users ORDER BY id LIMIT 10;\", {\n      force: true,\n      parseSpecialCharSequences: false\n    });\n    cy.WaitAutoSave(); //Step7:\n\n    cy.runQuery(); //Step8:\n\n    cy.get('.t--entity-name:contains(\"Page1\")').click({\n      force: true\n    });\n    cy.wait(1000); //Step9:\n\n    cy.get(\".bp3-button-text\").first().click({\n      force: true\n    }); //Step10:\n\n    cy.get(\".t--widget-chartwidget div[class*='bp3-skeleton']\").should(\"exist\");\n    /* This section is flaky hence commenting out\n    //Step11:\n    cy.reload();\n     //Step12:\n    cy.wait(1000);\n    cy.get(\".t--widget-chartwidget div[class*='bp3-skeleton']\").should(\"exist\");\n     //Step13:\n    /*cy.openPropertyPane(\"chartwidget\");\n    cy.updateCodeInput(\".t--property-control-chart-series-data-control\", \"\");\n    cy.openPropertyPane(\"buttonwidget\");\n    cy.get(\".t--property-control-onclick .t--js-toggle\").click({ force: true });\n    cy.updateCodeInput(\".t--property-control-onclick\", \"\");\n     cy.get('.t--entity-name:contains(\"Query1\")').click({ force: true });\n    cy.get(\".t--more-action-menu\")\n      .first()\n      .click({ force: true });\n    cy.get(\".t--apiFormDeleteBtn\")\n      .first()\n      .click({ force: true });\n     cy.get('.t--entity-name:contains(\"Users\")')\n      .first()\n      .click({ force: true });\n    cy.get(\".datasources .t--entity-add-btn\")\n      .last()\n      .click();\n    cy.get(pages.integrationActiveTab).click({ force: true });\n    cy.get(\"span[name*='comment-context-menu']\")\n      .last()\n      .click({ force: true });\n    cy.wait(150);\n    cy.get(\".t--datasource-option-delete\").click({ force: true }); */\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Chart/Chart_Widget_Loading_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. change chart type to custom chart","suites":["Chart Widget Functionality around custom chart data"],"updatePoint":{"line":7,"column":42,"index":237},"line":7,"code":"  it(\"1. change chart type to custom chart\", function () {\n    cy.openPropertyPane(\"chartwidget\");\n    cy.UpdateChartType(\"Custom Chart\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Chart/Custom_Chart_Data_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. change chart value via input widget and validate","suites":["Chart Widget Functionality around custom chart data"],"updatePoint":{"line":11,"column":57,"index":397},"line":11,"code":"  it(\"2. change chart value via input widget and validate\", function () {\n    const value1 = 40;\n    enterAndTest(\"inputwidgetv2\", value1, value1);\n    cy.wait(400);\n    cy.get(\".t--draggable-chartwidget\").get(\"[class^=raphael-group-][class$=-tracker]\").trigger(\"mouseover\");\n    cy.wait(400);\n    cy.get(\".t--draggable-chartwidget .fc__tooltip.fusioncharts-div\").should(\"have.text\", `${value1} %`);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Chart/Custom_Chart_Data_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Fill the Chart Widget Properties.","suites":["Chart Widget Functionality around custom chart feature"],"updatePoint":{"line":18,"column":42,"index":609},"line":18,"code":"  it(\"1. Fill the Chart Widget Properties.\", function () {\n    //changing the Chart Name\n\n    /**\n     * @param{Text} Random Text\n     * @param{ChartWidget}Mouseover\n     * @param{ChartPre Css} Assertion\n     */\n    cy.widgetText(\"Test\", viewWidgetsPage.chartWidget, commonlocators.containerInnerText); //changing the Chart Title\n\n    /**\n     * @param{Text} Random Input Value\n     */\n\n    cy.testCodeMirror(this.data.chartIndata);\n    cy.get(viewWidgetsPage.chartInnerText).contains(\"App Sign Up\").should(\"have.text\", \"App Sign Up\"); //Entering the Chart data\n\n    cy.testJsontext(\"chart-series-data-control\", JSON.stringify(this.data.chartInput));\n    cy.get(\".t--propertypane\").click(\"right\"); // Asserting Chart Height\n\n    cy.get(viewWidgetsPage.chartWidget).should(\"be.visible\").and(chart => {\n      expect(chart.height()).to.be.greaterThan(200);\n    }); //Entring the label of x-axis\n\n    cy.get(viewWidgetsPage.xlabel).click({\n      force: true\n    }).type(this.data.command).type(this.data.plan); //Entring the label of y-axis\n\n    cy.get(viewWidgetsPage.ylabel).click({\n      force: true\n    }).type(this.data.command).click({\n      force: true\n    }).type(this.data.ylabel); //Close edit prop\n\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Chart/Custom_Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Custom Chart Widget Functionality","suites":["Chart Widget Functionality around custom chart feature"],"updatePoint":{"line":54,"column":42,"index":1845},"line":54,"code":"  it(\"2. Custom Chart Widget Functionality\", function () {\n    //changing the Chart type\n    //cy.get(widgetsPage.toggleChartType).click({ force: true });\n    cy.UpdateChartType(\"Custom Chart\");\n    cy.testJsontext(\"customfusionchart\", `{{${JSON.stringify(this.data.ChartCustomConfig)}}}`); //Verifying X-axis labels\n\n    cy.get(viewWidgetsPage.chartWidget).should(\"have.css\", \"opacity\", \"1\");\n    const labels = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\"];\n    [0, 1, 2, 3, 4, 5, 6].forEach(k => {\n      cy.get(viewWidgetsPage.rectangleChart).eq(k).trigger(\"mousemove\", {\n        force: true\n      });\n      cy.get(viewWidgetsPage.Chartlabel).eq(k).should(\"have.text\", labels[k]);\n    });\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Chart/Custom_Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Toggle JS - Custom Chart Widget Functionality","suites":["Chart Widget Functionality around custom chart feature"],"updatePoint":{"line":70,"column":54,"index":2583},"line":70,"code":"  it(\"3. Toggle JS - Custom Chart Widget Functionality\", function () {\n    cy.get(widgetsPage.toggleChartType).click({\n      force: true\n    }); //changing the Chart type\n\n    cy.testJsontext(\"charttype\", \"CUSTOM_FUSION_CHART\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(viewWidgetsPage.Chartlabel + \":first-child\", {\n      timeout: 10000\n    }).should(\"have.css\", \"opacity\", \"1\"); //Verifying X-axis labels\n\n    cy.get(viewWidgetsPage.chartWidget).should(\"have.css\", \"opacity\", \"1\");\n    const labels = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\"];\n    [0, 1, 2, 3, 4, 5, 6].forEach(k => {\n      cy.get(viewWidgetsPage.rectangleChart).eq(k).trigger(\"mousemove\", {\n        force: true\n      });\n      cy.get(viewWidgetsPage.Chartlabel).eq(k).should(\"have.text\", labels[k]);\n    }); //Close edit prop\n\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Chart/Custom_Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Chart-Copy Verification","suites":["Chart Widget Functionality around custom chart feature"],"updatePoint":{"line":92,"column":32,"index":3469},"line":92,"code":"  it(\"4. Chart-Copy Verification\", function () {\n    const modifierKey = Cypress.platform === \"darwin\" ? \"meta\" : \"ctrl\"; //Copy Chart and verify all properties\n\n    cy.wait(1000);\n    cy.copyWidget(\"chartwidget\", viewWidgetsPage.chartWidget);\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Chart/Custom_Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Chart-Delete Verification","suites":["Chart Widget Functionality around custom chart feature"],"updatePoint":{"line":99,"column":34,"index":3745},"line":99,"code":"  it(\"5. Chart-Delete Verification\", function () {\n    // Delete the Chart widget\n    cy.deleteWidget(viewWidgetsPage.chartWidget);\n    cy.PublishtheApp();\n    cy.get(viewWidgetsPage.chartWidget).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Chart/Custom_Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checkbox Widget Functionality","suites":["Checkbox Widget Functionality"],"updatePoint":{"line":15,"column":35,"index":505},"line":15,"code":"  it(\"Checkbox Widget Functionality\", function () {\n    cy.openPropertyPane(\"checkboxwidget\");\n    /**\n     * @param{Text} Random Text\n     * @param{CheckboxWidget}Mouseover\n     * @param{CheckboxPre Css} Assertion\n     */\n\n    cy.widgetText(\"checker\", formWidgetsPage.checkboxWidget, widgetsPage.checkboxInput);\n    /**\n     * @param{Text} Random Value\n     */\n\n    cy.testCodeMirror(this.data.checkbocInputName);\n    cy.get(widgetsPage.checkboxLabel).should(\"have.text\", \"value\");\n    /**\n     * @param{toggleButton Css} Assert to be checked\n     */\n\n    cy.togglebar(widgetsPage.defaultcheck);\n    /**\n     * @param{Show Alert} Css for InputChange\n     */\n\n    cy.getAlert(commonlocators.optionchangetextCheckbox);\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Checkbox/CheckBox_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checkbox Functionality To Check Label","suites":["Checkbox Widget Functionality"],"updatePoint":{"line":42,"column":43,"index":1261},"line":42,"code":"  it(\"Checkbox Functionality To Check Label\", function () {\n    cy.get(publish.checkboxWidget + \" \" + \"label\").should(\"have.text\", this.data.checkbocInputName);\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Checkbox/CheckBox_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checkbox Functionality To Check Disabled Widget","suites":["Checkbox Widget Functionality"],"updatePoint":{"line":46,"column":53,"index":1480},"line":46,"code":"  it(\"Checkbox Functionality To Check Disabled Widget\", function () {\n    cy.openPropertyPane(\"checkboxwidget\");\n    cy.togglebar(commonlocators.Disablejs + \" \" + \"input\");\n    cy.PublishtheApp();\n    cy.get(publish.checkboxWidget + \" \" + \"input\").should(\"be.disabled\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Checkbox/CheckBox_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checkbox Functionality To Check Enabled Widget","suites":["Checkbox Widget Functionality"],"updatePoint":{"line":53,"column":52,"index":1798},"line":53,"code":"  it(\"Checkbox Functionality To Check Enabled Widget\", function () {\n    cy.openPropertyPane(\"checkboxwidget\");\n    cy.togglebarDisable(commonlocators.Disablejs + \" \" + \"input\");\n    cy.PublishtheApp();\n    cy.get(publish.checkboxWidget + \" \" + \"input\").should(\"be.enabled\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Checkbox/CheckBox_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checkbox Functionality To Unchecked Visible Widget","suites":["Checkbox Widget Functionality"],"updatePoint":{"line":60,"column":56,"index":2126},"line":60,"code":"  it(\"Checkbox Functionality To Unchecked Visible Widget\", function () {\n    cy.openPropertyPane(\"checkboxwidget\");\n    cy.togglebarDisable(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.checkboxWidget + \" \" + \"input\").should(\"not.exist\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Checkbox/CheckBox_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checkbox Functionality To Check Visible Widget","suites":["Checkbox Widget Functionality"],"updatePoint":{"line":67,"column":52,"index":2439},"line":67,"code":"  it(\"Checkbox Functionality To Check Visible Widget\", function () {\n    cy.openPropertyPane(\"checkboxwidget\");\n    cy.togglebar(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.checkboxWidget + \" \" + \"input\").should(\"be.checked\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Checkbox/CheckBox_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check isDirty meta property","suites":["Checkbox Widget Functionality"],"updatePoint":{"line":74,"column":33,"index":2727},"line":74,"code":"  it(\"Check isDirty meta property\", function () {\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{checker.isDirty}}`); // Check if initial value of isDirty is false\n\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\"); // Interact with UI\n\n    cy.get(`${formWidgetsPage.checkboxWidget} label`).first().click(); // Check if isDirty is set to true\n\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"true\"); // Change defaultCheckedState property\n\n    cy.openPropertyPane(\"checkboxwidget\");\n    cy.get(\".t--property-control-defaultselected label\").last().click(); // Check if isDirty is reset to false\n\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Checkbox/CheckBox_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Add new widget","suites":["checkboxgroupwidget Widget Functionality"],"updatePoint":{"line":9,"column":20,"index":270},"line":9,"code":"  it(\"Add new widget\", () => {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"checkboxgroupwidget\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(\".t--widget-checkboxgroupwidget\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Checkbox/CheckboxGroup1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check that prefilled option is added and empty value is allowed in options","suites":["checkboxgroupwidget Widget Functionality"],"updatePoint":{"line":17,"column":87,"index":563},"line":17,"code":"  it(\"should check that prefilled option is added and empty value is allowed in options\", () => {\n    cy.openPropertyPane(\"checkboxgroupwidget\");\n    cy.get(\".t--property-control-options-add\").click({\n      force: true\n    });\n    cy.get(\".t--property-control-options\").find(\".t--js-toggle\").click({\n      force: true\n    });\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"Blue\",\n          \"value\": \"\"\n        },\n        {\n          \"label\": \"Green\",\n          \"value\": \"GREEN\"\n        },\n        {\n          \"label\": \"Red\",\n          \"value\": \"RED\"\n        }\n      ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Checkbox/CheckboxGroup1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check that more thatn empty value is not allowed in options","suites":["checkboxgroupwidget Widget Functionality"],"updatePoint":{"line":41,"column":72,"index":1255},"line":41,"code":"  it(\"should check that more thatn empty value is not allowed in options\", () => {\n    cy.openPropertyPane(\"checkboxgroupwidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"Blue\",\n          \"value\": \"\"\n        },\n        {\n          \"label\": \"Green\",\n          \"value\": \"\"\n        },\n        {\n          \"label\": \"Red\",\n          \"value\": \"RED\"\n        }\n      ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Checkbox/CheckboxGroup1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Checkbox Group Widget Functionality","suites":["Checkbox Group Widget Functionality"],"updatePoint":{"line":15,"column":44,"index":532},"line":15,"code":"  it(\"1. Checkbox Group Widget Functionality\", function () {\n    cy.openPropertyPane(\"checkboxgroupwidget\");\n    /**\n     * @param{Text} Random Text\n     * @param{RadioWidget}Mouseover\n     * @param{RadioPre Css} Assertion\n     */\n\n    cy.widgetText(\"checkboxgrouptest\", formWidgetsPage.checkboxGroupWidget, formWidgetsPage.checkboxGroupInput);\n    /**\n     * @param{IndexValue} Provide Input Index Value\n     * @param{Text} Index Text Value.\n     *\n     */\n\n    cy.radioInput(0, this.data.radio1);\n    cy.get(formWidgetsPage.labelCheckboxGroup).eq(1).should(\"have.text\", \"test1\");\n    cy.radioInput(1, \"1\");\n    cy.radioInput(2, this.data.radio2);\n    cy.get(formWidgetsPage.labelCheckboxGroup).eq(2).should(\"have.text\", this.data.radio2);\n    cy.radioInput(3, \"2\");\n    cy.get(formWidgetsPage.radioAddButton).click({\n      force: true\n    });\n    cy.radioInput(4, this.data.radio4);\n    cy.get(formWidgetsPage.deleteradiovalue).eq(2).click({\n      force: true\n    });\n    cy.wait(200);\n    cy.get(formWidgetsPage.labelCheckboxGroup).should(\"not.have.value\", \"test4\");\n    cy.get(formWidgetsPage.deleteradiovalue).eq(2).click({\n      force: true\n    });\n    cy.wait(200);\n    /**\n     * @param{Show Alert} Css for InputChange\n     */\n\n    cy.getAlert(commonlocators.optionchangeRadioselect);\n    cy.get(formWidgetsPage.radioOnSelectionChangeDropdown).get(commonlocators.dropdownSelectButton).click({\n      force: true\n    }).type(\"2\");\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Checkbox/CheckboxGroup2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Checkbox Group Functionality To Unchecked Visible Widget","suites":["Checkbox Group Widget Functionality"],"updatePoint":{"line":59,"column":65,"index":2020},"line":59,"code":"  it(\"2. Checkbox Group Functionality To Unchecked Visible Widget\", function () {\n    cy.get(publish.backToEditor).click();\n    cy.openPropertyPane(\"checkboxgroupwidget\");\n    cy.togglebarDisable(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.checkboxGroupWidget + \" \" + \"input\").should(\"not.exist\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Checkbox/CheckboxGroup2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Checkbox Group Functionality To Check Visible Widget","suites":["Checkbox Group Widget Functionality"],"updatePoint":{"line":67,"column":61,"index":2394},"line":67,"code":"  it(\"3. Checkbox Group Functionality To Check Visible Widget\", function () {\n    cy.openPropertyPane(\"checkboxgroupwidget\");\n    cy.togglebar(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.wait(500);\n    cy.get(publish.checkboxGroupWidget + \" \" + \"input\").eq(0).should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Checkbox/CheckboxGroup2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Checkbox Group Functionality To Button Text","suites":["Checkbox Group Widget Functionality"],"updatePoint":{"line":74,"column":52,"index":2688},"line":74,"code":"  it(\"4. Checkbox Group Functionality To Button Text\", function () {\n    cy.get(publish.checkboxGroupWidget + \" \" + \"label\").eq(2).should(\"have.text\", \"test2\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Checkbox/CheckboxGroup2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"handleSelectAllChange: unchecked","suites":["Checkbox Group Widget Functionality"],"updatePoint":{"line":78,"column":38,"index":2883},"line":78,"code":"  it(\"handleSelectAllChange: unchecked\", function () {\n    const selectAllSelector = formWidgetsPage.selectAllCheckboxControl;\n    const uncheckedOptionInputs = `${formWidgetsPage.checkboxGroupOptionInputs} input:not(:checked)`; // Deselect all\n\n    cy.get(selectAllSelector).click(); // Should get 2 unchecked option inputs\n\n    cy.get(uncheckedOptionInputs).should(\"have.length\", 2);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Checkbox/CheckboxGroup2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"handleSelectAllChange: checked","suites":["Checkbox Group Widget Functionality"],"updatePoint":{"line":86,"column":36,"index":3273},"line":86,"code":"  it(\"handleSelectAllChange: checked\", function () {\n    const selectAllSelector = formWidgetsPage.selectAllCheckboxControl;\n    const checkedOptionInputs = `${formWidgetsPage.checkboxGroupOptionInputs} input:checked`; // Select all\n\n    cy.get(selectAllSelector).click(); // Should get 2 checked option inputs\n\n    cy.get(checkedOptionInputs).should(\"have.length\", 2);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Checkbox/CheckboxGroup2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checkbox Group Functionality To alignment options","suites":["Checkbox Group Widget Functionality"],"updatePoint":{"line":94,"column":55,"index":3668},"line":94,"code":"  it(\"Checkbox Group Functionality To alignment options\", function () {\n    cy.openPropertyPane(\"checkboxgroupwidget\"); // check default value\n\n    cy.get(\".t--property-control-alignment\").should(\"exist\");\n    cy.get(\".t--property-control-alignment span[type='p1']\").should(\"have.text\", \"No selection.\");\n    cy.get(\".t--draggable-checkboxgroupwidget div[data-cy^='checkbox-group-container']\").should(\"have.css\", \"justify-content\", \"space-between\"); // change alignment\n\n    cy.get(\".t--property-control-alignment span[type='p1']\").click({\n      force: true\n    });\n    cy.wait(200);\n    cy.get(\".t--dropdown-option\").contains(\"Start\").click({\n      force: true\n    });\n    cy.wait(400);\n    cy.get(\".t--draggable-checkboxgroupwidget div[data-cy^='checkbox-group-container']\").should(\"have.css\", \"justify-content\", \"flex-start\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Checkbox/CheckboxGroup2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check isDirty meta property","suites":["Checkbox Group Widget Functionality"],"updatePoint":{"line":111,"column":33,"index":4482},"line":111,"code":"  it(\"Check isDirty meta property\", function () {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 300,\n      y: 500\n    });\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{checkboxgrouptest.isDirty}}`); // Change defaultSelectedValues\n\n    cy.openPropertyPane(\"checkboxgroupwidget\");\n    cy.updateCodeInput(\".t--property-control-defaultselectedvalues\", \"GREEN\"); // Check if isDirty is reset to false\n\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\"); // Interact with UI\n\n    cy.get(formWidgetsPage.labelCheckboxGroup).first().click(); // Check if isDirty is set to true\n\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"true\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Checkbox/CheckboxGroup2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Linting warning validation","suites":["Linting warning validation with Checkbox widget"],"updatePoint":{"line":9,"column":32,"index":295},"line":9,"code":"  it(\"Linting warning validation\", function () {\n    cy.openPropertyPane(\"checkboxwidget\");\n    /**\n     * @param{Text} Random Text\n     * @param{CheckboxWidget}Mouseover\n     * @param{CheckboxPre Css} Assertion\n     */\n    //Mouse hover to exact warning message\n\n    cy.get(commonlocators.labelSectionTxt).first().click({\n      force: true\n    }).wait(500); //lint mark validation\n\n    cy.get(commonlocators.lintError).first().should(\"be.visible\");\n    cy.get(commonlocators.lintError).last().should(\"be.visible\");\n    cy.get(commonlocators.lintError).last().trigger(\"mouseover\", {\n      force: true\n    }).wait(500); //lint warning message\n\n    cy.get(commonlocators.lintErrorMsg).should(\"be.visible\").contains(\"'iron_man' is not defined.\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Checkbox/CheckBoxLintErrorMultipleRowValidation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Linting warning validation","suites":["Linting warning validation with Checkbox widget"],"updatePoint":{"line":9,"column":32,"index":300},"line":9,"code":"  it(\"Linting warning validation\", function () {\n    cy.openPropertyPane(\"checkboxwidget\");\n    /**\n     * @param{Text} Random Text\n     * @param{CheckboxWidget}Mouseover\n     * @param{CheckboxPre Css} Assertion\n     */\n    //click on the text within the section\n\n    cy.get(commonlocators.labelSection).first().click({\n      force: true\n    }).wait(500); //lint mark validation\n\n    cy.get(commonlocators.lintError).first().should(\"be.visible\");\n    cy.get(commonlocators.lintError).last().should(\"be.visible\");\n    cy.get(commonlocators.lintError).last().trigger(\"mouseover\", {\n      force: true\n    }).wait(500); //lint warning message\n\n    cy.get(commonlocators.lintErrorMsg).should(\"be.visible\").contains(\"Missing semicolon.\");\n    cy.get(commonlocators.lintErrorMsg).should(\"be.visible\").contains(\"Expected an identifier and instead saw ')\");\n    cy.get(commonlocators.lintErrorMsg).should(\"be.visible\").contains(\"'function closure expressions' is only available in Mozilla JavaScript extensions (use moz option)\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Checkbox/CheckBoxMultipleLintError_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Container Widget Functionality","suites":["Container Widget Functionality"],"updatePoint":{"line":13,"column":36,"index":419},"line":13,"code":"  it(\"Container Widget Functionality\", function () {\n    cy.openPropertyPane(\"containerwidget\");\n    /**\n     * @param{Text} Random Text\n     * @param{ContainerWidget}Mouseover\n     * @param{ContainerPre Css} Assertion\n     */\n\n    cy.widgetText(\"job\", widgetsPage.containerWidget, commonlocators.containerInnerText);\n    /**\n     * @param{Text} Random Border Colour\n     */\n\n    cy.get(widgetsPage.borderColorPickerNew).first().click({\n      force: true\n    }).clear().type(widgetsPage.yellowColorHex);\n    cy.get(`div[data-testid='container-wrapper-${dsl.dsl.children[0].widgetId}']`).should(\"have.css\", \"border-color\").and(\"eq\", \"rgb(255, 193, 61)\");\n    /**\n     * @param{Text} Random Background Colour\n     */\n\n    cy.get(widgetsPage.backgroundcolorPickerNew).first().click({\n      force: true\n    }).clear().type(widgetsPage.greenColorHex);\n    cy.get(widgetsPage.containerD).should(\"have.css\", \"background\").and(\"eq\", \"rgb(3, 179, 101) none repeat scroll 0% 0% / auto padding-box border-box\");\n    /**\n     * @param{toggleButton Css} Assert to be checked\n     */\n\n    cy.togglebar(widgetsPage.Scrollbutton);\n    cy.get(widgetsPage.containerD).eq(0).scrollIntoView({\n      easing: \"linear\"\n    }).should(\"be.visible\");\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Container_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Container Widget Functionality To Verify The Colour","suites":["Container Widget Functionality"],"updatePoint":{"line":48,"column":57,"index":1695},"line":48,"code":"  it(\"Container Widget Functionality To Verify The Colour\", function () {\n    cy.get(widgetsPage.containerD).eq(0).should(\"have.css\", \"background\").and(\"eq\", \"rgb(3, 179, 101) none repeat scroll 0% 0% / auto padding-box border-box\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Container_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test border width and verity","suites":["Container Widget Functionality"],"updatePoint":{"line":51,"column":34,"index":1912},"line":51,"code":"  it(\"Test border width and verity\", function () {\n    cy.get(publish.backToEditor).click();\n    cy.openPropertyPane(\"containerwidget\");\n    cy.testJsontext(\"borderwidth\", \"10\");\n    cy.get(`div[data-testid='container-wrapper-${dsl.dsl.children[0].widgetId}']`).should(\"have.css\", \"border-width\").and(\"eq\", \"10px\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Container_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test border radius and verity","suites":["Container Widget Functionality"],"updatePoint":{"line":57,"column":35,"index":2235},"line":57,"code":"  it(\"Test border radius and verity\", function () {\n    // check if border radius is changed on button\n    cy.get(`.t--property-control-borderradius  button > div`).eq(0).click({\n      force: true\n    });\n    cy.get(`.t--property-control-borderradius  button > div`).eq(0).invoke(\"css\", \"border-top-left-radius\").then(borderRadius => {\n      cy.get(`div[data-testid='container-wrapper-${dsl.dsl.children[0].widgetId}']`).should(\"have.css\", \"border-radius\", borderRadius);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Container_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test Box shadow and verity","suites":["Container Widget Functionality"],"updatePoint":{"line":66,"column":32,"index":2718},"line":66,"code":"  it(\"Test Box shadow and verity\", function () {\n    cy.get(`.t--property-control-boxshadow  button > div`).eq(0).click({\n      force: true\n    });\n    cy.get(`.t--property-control-boxshadow  button > div`).eq(0).invoke(\"css\", \"box-shadow\").then(boxShadow => {\n      cy.get(`div[data-testid='container-wrapper-${dsl.dsl.children[0].widgetId}']`).should(\"have.css\", \"box-shadow\", boxShadow);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Container_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Add new dropdown widget","suites":["Currency widget - "],"updatePoint":{"line":13,"column":29,"index":425},"line":13,"code":"  it(\"Add new dropdown widget\", () => {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(widgetName, {\n      x: 300,\n      y: 300\n    });\n    cy.get(`.t--widget-${widgetName}`).should(\"exist\");\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 300,\n      y: 500\n    });\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{CurrencyInput1.text}}:{{CurrencyInput1.value}}:{{CurrencyInput1.isValid}}:{{typeof CurrencyInput1.text}}:{{typeof CurrencyInput1.value}}:{{CurrencyInput1.countryCode}}:{{CurrencyInput1.currencyCode}}`);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/CurrencyInput/CurrencyInput_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check for type of value and widget","suites":["Currency widget - "],"updatePoint":{"line":27,"column":47,"index":1036},"line":27,"code":"  it(\"should check for type of value and widget\", () => {\n    function enterAndTest(text, expected) {\n      cy.get(widgetInput).clear();\n      cy.wait(300);\n\n      if (text) {\n        cy.get(widgetInput).type(text);\n      }\n\n      cy.openPropertyPane(\"textwidget\");\n      cy.get(\".t--widget-textwidget\").should(\"contain\", expected);\n    }\n\n    [//[input, {{CurrencyInput1.text}}:{{CurrencyInput1.value}}:{{CurrencyInput1.isValid}}:{{typeof CurrencyInput1.text}}:{{typeof CurrencyInput1.value}}:{{CurrencyInput1.countryCode}}:{{CurrencyInput1.currencyCode}}]\n    [\"100\", \"100:100:true:string:number:AS:USD\"], [\"1000\", \"1,000:1000:true:string:number:AS:USD\"], [\"100.22\", \"10,022:10022:true:string:number:AS:USD\"], [\"1000.22\", \"100,022:100022:true:string:number:AS:USD\"]].forEach(d => {\n      enterAndTest(d[0], d[1]);\n    });\n    cy.openPropertyPane(widgetName);\n    cy.selectDropdownValue(\".t--property-control-decimals\", \"1\");\n    [//[input, {{CurrencyInput1.text}}:{{CurrencyInput1.value}}:{{CurrencyInput1.isValid}}:{{typeof CurrencyInput1.text}}:{{typeof CurrencyInput1.value}}:{{CurrencyInput1.countryCode}}:{{CurrencyInput1.currencyCode}}]\n    [\"100\", \"100:100:true:string:number:AS:USD\"], [\"1000\", \"1,000:1000:true:string:number:AS:USD\"], [\"100.22\", \"100.2:100.2:true:string:number:AS:USD\"], [\"1000.22\", \"1,000.2:1000.2:true:string:number:AS:USD\"]].forEach(d => {\n      enterAndTest(d[0], d[1]);\n    });\n    cy.openPropertyPane(widgetName);\n    cy.selectDropdownValue(\".t--property-control-decimals\", \"2\");\n    [//[input, {{CurrencyInput1.text}}:{{CurrencyInput1.value}}:{{CurrencyInput1.isValid}}:{{typeof CurrencyInput1.text}}:{{typeof CurrencyInput1.value}}:{{CurrencyInput1.countryCode}}:{{CurrencyInput1.currencyCode}}]\n    [\"100\", \"100:100:true:string:number:AS:USD\"], [\"1000\", \"1,000:1000:true:string:number:AS:USD\"], [\"100.22\", \"100.22:100.22:true:string:number:AS:USD\"], [\"1000.22\", \"1,000.22:1000.22:true:string:number:AS:USD\"]].forEach(d => {\n      enterAndTest(d[0], d[1]);\n    });\n    cy.get(\".currency-change-dropdown-trigger\").should(\"contain\", \"$\");\n    cy.openPropertyPane(widgetName);\n    cy.selectDropdownValue(\".t--property-control-currency\", \"INR - Indian Rupee\");\n    enterAndTest(\"100.22\", \"100.22:100.22:true:string:number:IN:INR\");\n    cy.get(\".currency-change-dropdown-trigger\").should(\"contain\", \"₹\");\n    cy.openPropertyPane(widgetName);\n    cy.get(\".t--property-control-allowcurrencychange label\").last().click({\n      force: true\n    });\n    cy.get(\".t--input-currency-change\").first().click();\n    cy.get(\".t--search-input input\").type(\"gbp\");\n    cy.wait(500);\n    cy.get(\".t--dropdown-option\").last().click();\n    enterAndTest(\"100.22\", \"100.22:100.22:true:string:number:GB:GBP\");\n    cy.get(\".t--input-currency-change\").should(\"contain\", \"£\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/CurrencyInput/CurrencyInput_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should accept 0 decimal option","suites":["Currency widget - "],"updatePoint":{"line":72,"column":36,"index":3815},"line":72,"code":"  it(\"should accept 0 decimal option\", () => {\n    cy.openPropertyPane(widgetName);\n    cy.selectDropdownValue(\".t--property-control-decimals\", \"0\");\n    cy.closePropertyPane();\n    cy.wait(500);\n    cy.openPropertyPane(widgetName);\n    cy.get(\".t--property-control-decimals .cs-text\").should(\"have.text\", \"0\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/CurrencyInput/CurrencyInput_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check that widget input resets on submit","suites":["Currency widget - "],"updatePoint":{"line":80,"column":53,"index":4150},"line":80,"code":"  it(\"should check that widget input resets on submit\", () => {\n    cy.openPropertyPane(widgetName);\n    cy.get(\".t--property-control-onsubmit .t--open-dropdown-Select-Action\").click();\n    cy.selectShowMsg();\n    cy.addSuccessMessage(\"Submitted!!\");\n    cy.get(widgetInput).clear();\n    cy.wait(300);\n    cy.get(widgetInput).type(\"10000{enter}\");\n    cy.wait(300);\n    cy.get(widgetInput).should(\"contain.value\", \"\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/CurrencyInput/CurrencyInput_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check that widget input doesn't round off values","suites":["Currency widget - "],"updatePoint":{"line":91,"column":61,"index":4583},"line":91,"code":"  it(\"should check that widget input doesn't round off values\", () => {\n    function enterAndTest(text, expected) {\n      cy.get(widgetInput).clear();\n      cy.wait(300);\n\n      if (text) {\n        cy.get(widgetInput).type(text);\n      }\n\n      cy.openPropertyPane(\"textwidget\");\n      cy.get(\".t--widget-textwidget\").should(\"contain\", expected);\n    }\n\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{CurrencyInput1.text}}:{{CurrencyInput1.value}}`);\n    cy.openPropertyPane(widgetName);\n    cy.selectDropdownValue(\".t--property-control-decimals\", \"0\");\n    [//[input, {{CurrencyInput1.text}}:{{CurrencyInput1.value}}]\n    [\"100\", \"100:100\"], [\"1000\", \"1,000:1000\"], [\"100.22\", \"10,022:10022\"], [\"1000.22\", \"100,022:100022\"], [\"1000.20\", \"100,020:100020\"], [\"1000.90\", \"100,090:100090\"]].forEach(d => {\n      enterAndTest(d[0], d[1]);\n    });\n    cy.openPropertyPane(widgetName);\n    cy.selectDropdownValue(\".t--property-control-decimals\", \"1\");\n    [//[input, {{CurrencyInput1.text}}:{{CurrencyInput1.value}}]\n    [\"100\", \"100:100\"], [\"1000\", \"1,000:1000\"], [\"100.22\", \"100.2:100.2\"], [\"1000.20\", \"1,000.2:1000.2\"], [\"1000.99\", \"1,000.9:1000.9\"], [\"1000.90\", \"1,000.9:1000.9\"]].forEach(d => {\n      enterAndTest(d[0], d[1]);\n    });\n    cy.openPropertyPane(widgetName);\n    cy.selectDropdownValue(\".t--property-control-decimals\", \"2\");\n    [//[input, {{CurrencyInput1.text}}:{{CurrencyInput1.value}}]\n    [\"100\", \"100:100\"], [\"1000\", \"1,000:1000\"], [\"100.2\", \"100.20:100.2\"], [\"1000.20\", \"1,000.20:1000.2\"], [\"1000.21\", \"1,000.21:1000.21\"], [\"1000.9\", \"1,000.90:1000.9\"], [\"1000.90\", \"1,000.90:1000.9\"], [\"1000.99\", \"1,000.99:1000.99\"]].forEach(d => {\n      enterAndTest(d[0], d[1]);\n    });\n    cy.get(widgetInput).clear();\n    cy.wait(300);\n    cy.get(widgetInput).type(\"1000.90\");\n    cy.openPropertyPane(\"textwidget\");\n    cy.get(widgetInput).should(\"contain.value\", \"1,000.90\");\n    cy.get(widgetInput).focus({\n      force: true\n    });\n    cy.get(widgetInput).should(\"contain.value\", \"1000.90\");\n    cy.openPropertyPane(\"textwidget\");\n    cy.get(widgetInput).should(\"contain.value\", \"1,000.90\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/CurrencyInput/CurrencyInput_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should test the formatting of defaultText","suites":["Currency widget - "],"updatePoint":{"line":136,"column":47,"index":6725},"line":136,"code":"  it(\"should test the formatting of defaultText\", () => {\n    function enterAndTest(input, expected) {\n      cy.updateCodeInput(\".t--property-control-defaulttext\", input);\n      cy.wait(500);\n      cy.get(widgetInput).should(\"contain.value\", expected);\n    }\n\n    cy.openPropertyPane(widgetName);\n    cy.selectDropdownValue(\".t--property-control-decimals\", \"0\");\n    [//[input, expected]\n    [\"100\", \"100\"], [\"1000\", \"1,000\"], [\"1000.1\", \"1,000\"], [\"1000.9\", \"1,001\"], [\"100.22\", \"100\"], [\"1000.20\", \"1,000\"], [\"1000.90\", \"1,001\"]].forEach(d => {\n      enterAndTest(d[0], d[1]);\n    });\n    cy.openPropertyPane(widgetName);\n    cy.selectDropdownValue(\".t--property-control-decimals\", \"1\");\n    [//[input, expected]\n    [\"100\", \"100\"], [\"1000\", \"1,000\"], [\"1000.1\", \"1,000.1\"], [\"1000.9\", \"1,000.9\"], [\"100.22\", \"100.2\"], [\"1000.20\", \"1,000.2\"], [\"1000.90\", \"1,000.9\"], [\"1000.79\", \"1,000.8\"], [\"1000.19\", \"1,000.2\"]].forEach(d => {\n      enterAndTest(d[0], d[1]);\n    });\n    cy.openPropertyPane(widgetName);\n    cy.selectDropdownValue(\".t--property-control-decimals\", \"2\");\n    [//[input, expected]\n    [\"100\", \"100\"], [\"1000\", \"1,000\"], [\"1000.1\", \"1,000.10\"], [\"1000.9\", \"1,000.90\"], [\"100.22\", \"100.22\"], [\"1000.20\", \"1,000.20\"], [\"1000.90\", \"1,000.90\"], [\"1000.79\", \"1,000.79\"], [\"1000.19\", \"1,000.19\"], [\"1000.191\", \"1,000.19\"], [\"1000.199\", \"1,000.20\"], [\"1000.911\", \"1,000.91\"], [\"1000.919\", \"1,000.92\"], [\"1000.999\", \"1,001\"]].forEach(d => {\n      enterAndTest(d[0], d[1]);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/CurrencyInput/CurrencyInput_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check isDirty meta property","suites":["Currency widget - "],"updatePoint":{"line":162,"column":33,"index":8208},"line":162,"code":"  it(\"Check isDirty meta property\", function () {\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{CurrencyInput1.isDirty}}`); // Init isDirty\n\n    cy.openPropertyPane(widgetName);\n    cy.updateCodeInput(\".t--property-control-defaulttext\", \"1\");\n    cy.closePropertyPane(); // Check if initial value of isDirty is false\n\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\"); // Interact with UI\n\n    cy.get(widgetInput).clear();\n    cy.wait(300); // Check if isDirty is set to true\n\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"true\"); // Change defaultText\n\n    cy.openPropertyPane(widgetName);\n    cy.updateCodeInput(\".t--property-control-defaulttext\", \"5\"); // Check if isDirty is reset to false\n\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/CurrencyInput/CurrencyInput_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Should check that widget input is not showing any errors on input","suites":["Currency widget - "],"updatePoint":{"line":182,"column":71,"index":9081},"line":182,"code":"  it(\"Should check that widget input is not showing any errors on input\", function () {\n    cy.get(widgetInput).type(\"123456789\");\n    cy.focused().then(() => {\n      cy.get(themelocators.popover).should(\"not.exist\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/CurrencyInput/CurrencyInput_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Should show empty dropdown for a typo","suites":["Currency input widget - "],"updatePoint":{"line":10,"column":46,"index":343},"line":10,"code":"  it(\"1. Should show empty dropdown for a typo\", () => {\n    cy.openPropertyPane(widgetName); // Turn on allowCurrencyChange\n\n    cy.get(\".t--property-control-allowcurrencychange label\").last().click({\n      force: true\n    }); // Click on the currency change option\n\n    cy.get(\".t--input-currency-change\").first().click(); // Search with a typo\n\n    cy.get(\".t--search-input input\").type(\"gdp\");\n    cy.wait(500); // Assert the options dropdown is still open\n\n    cy.get(\".t--search-input input\").should(\"be.visible\");\n    cy.PublishtheApp(); // Click on the currency change option\n\n    cy.get(\".t--input-currency-change\").first().click(); // Search with a typo\n\n    cy.get(\".t--search-input input\").type(\"gdp\");\n    cy.wait(500); // Assert the options dropdown is still open\n\n    cy.get(\".t--search-input input\").should(\"be.visible\"); // Back to the editor\n\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/CurrencyInput/CurrencyInputDynamicCurrencyCode_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. should check that widget can be used with dynamic default currency code","suites":["Currency input widget - "],"updatePoint":{"line":34,"column":80,"index":1286},"line":34,"code":"  it(\"2. should check that widget can be used with dynamic default currency code\", () => {\n    cy.openPropertyPane(widgetName);\n    cy.get(\".t--property-control-currency .CodeMirror-code\").should(\"contain\", \"{{appsmith.store.test}}\");\n    cy.get(\".t--input-currency-change\").first().click();\n    cy.get(\".t--search-input input\").type(\"gbp\");\n    cy.wait(500);\n    cy.get(\".t--dropdown-option\").last().click();\n    cy.get(\".t--property-control-currency .CodeMirror-code\").should(\"contain\", \"{{appsmith.store.test}}\");\n    cy.PublishtheApp();\n    cy.get(\".bp3-button.select-button\").click({\n      force: true\n    });\n    cy.get(\".menu-item-text\").first().click({\n      force: true\n    });\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"USD:AS:USD\");\n    cy.get(\".t--input-currency-change\").should(\"contain\", \"$\");\n    cy.get(\".bp3-button.select-button\").click({\n      force: true\n    });\n    cy.get(\".menu-item-text\").last().click({\n      force: true\n    });\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"INR:IN:INR\");\n    cy.get(\".t--input-currency-change\").should(\"contain\", \"₹\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/CurrencyInput/CurrencyInputDynamicCurrencyCode_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Datepicker default date validation with js binding","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":14,"column":56,"index":477},"line":14,"code":"  it(\"Datepicker default date validation with js binding\", function () {\n    cy.get(\".t--property-control-defaultdate .bp3-input\").clear();\n    cy.get(formWidgetsPage.toggleJsDefaultDate).click();\n    cy.testJsontext(\"defaultdate\", \"{{moment('14/02/2021', 'DD/MM/YYYY').format('DD/MM/YYYY')}}\");\n    cy.get(formWidgetsPage.toggleJsMinDate).click();\n    cy.testJsontext(\"mindate\", \"{{moment('12/02/2021', 'DD/MM/YYYY').format('DD/MM/YYYY')}}\");\n    cy.get(formWidgetsPage.toggleJsMaxDate).click();\n    cy.testJsontext(\"maxdate\", \"{{moment('17/02/2021', 'DD/MM/YYYY').format('DD/MM/YYYY')}}\");\n    cy.get(formWidgetsPage.datepickerWidget + \" .bp3-input\").should(\"contain.value\", \"14/02/2021\");\n    cy.PublishtheApp();\n    cy.get(publishPage.datepickerWidget + \" .bp3-input\").should(\"contain.value\", \"14/02/2021\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Datepicker/DatePicker_Toggle_js_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Switch Widget Functionality check with success message","suites":["Switch Widget within Form widget Functionality"],"updatePoint":{"line":15,"column":60,"index":513},"line":15,"code":"  it(\"Switch Widget Functionality check with success message\", function () {\n    cy.openPropertyPane(\"switchwidget\");\n    cy.widgetText(\"Toggler\", formWidgetsPage.switchWidget, widgetsPage.switchInput);\n    cy.testCodeMirror(this.data.switchInputName);\n    cy.get(widgetsPage.switchLabel).should(\"have.text\", \"Switch1\");\n    cy.togglebar(widgetsPage.defaultcheck);\n    cy.getAlert(commonlocators.optionchangetextSwitch);\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Datepicker/DatePicker_With_Switch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Date Widget with Reset widget being switch widget","suites":["Switch Widget within Form widget Functionality"],"updatePoint":{"line":24,"column":55,"index":963},"line":24,"code":"  it(\"Date Widget with Reset widget being switch widget\", function () {\n    cy.SearchEntityandOpen(\"DatePicker1\");\n    cy.get(formWidgetsPage.defaultDate).click();\n    cy.SetDateToToday();\n    cy.setDate(1, \"ddd MMM DD YYYY\");\n    const nextDay = dayjs().format(\"DD/MM/YYYY\");\n    cy.log(nextDay);\n    cy.get(widgetsPage.actionSelect).click({\n      force: true\n    });\n    cy.get(commonlocators.chooseAction).children().contains(\"Reset widget\").click();\n    cy.get(widgetsPage.selectWidget).click({\n      force: true\n    });\n    cy.get(commonlocators.chooseAction).children().contains(\"Toggler\").click();\n    cy.closePropertyPane();\n    cy.get(widgetsPage.switchWidget).click();\n    cy.get(widgetsPage.toastMsg).last().invoke(\"text\").then(text => {\n      const toasttext = text;\n      cy.log(toasttext);\n      expect(text.trim()).to.equal(toasttext.trim());\n    });\n    cy.get(widgetsPage.switchWidgetInactive).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Datepicker/DatePicker_With_Switch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"DatePicker-Date change and validate switch widget status","suites":["Switch Widget within Form widget Functionality"],"updatePoint":{"line":48,"column":62,"index":1909},"line":48,"code":"  it(\"DatePicker-Date change and validate switch widget status\", function () {\n    cy.get(widgetsPage.datepickerInput).click({\n      force: true\n    });\n    cy.SetDateToToday();\n    cy.get(widgetsPage.switchWidgetActive).should(\"be.visible\");\n    cy.get(\".t--toast-action span\").last().invoke(\"text\").then(text => {\n      const toasttext = text;\n      cy.log(toasttext);\n      expect(text.trim()).to.equal(toasttext.trim());\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Datepicker/DatePicker_With_Switch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Datepicker default date validation with js binding and default date","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":9,"column":76,"index":348},"line":9,"code":"  it(\"1. Datepicker default date validation with js binding and default date\", function () {\n    cy.openPropertyPane(\"datepickerwidget2\");\n    cy.get(\".t--property-control-defaultdate .bp3-input\").clear();\n    cy.get(formWidgetsPage.toggleJsDefaultDate).click();\n    cy.EnableAllCodeEditors();\n    cy.testJsontext(\"defaultdate\", \"{{ moment().add(-1,'days').toISOString() }}\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Datepicker/DatePicker1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Datepicker default time picker validation by Time precision","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":16,"column":68,"index":723},"line":16,"code":"  it(\"2. Datepicker default time picker validation by Time precision\", function () {\n    // default value in property pane\n    cy.openPropertyPane(\"datepickerwidget2\");\n    cy.get(\".t--property-control-timeprecision span[type='p1']\").should(\"have.text\", \"Minute\"); // default in date picker\n\n    cy.get(\".t--widget-datepickerwidget2 input\").click();\n    cy.wait(200); // datepicker is open\n\n    cy.get(\".bp3-popover .bp3-datepicker\").should(\"exist\"); // checking timepicker\n\n    cy.get(\".bp3-datepicker-timepicker-wrapper .bp3-timepicker-input-row\").children().should(\"have.length\", 3);\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Datepicker/DatePicker1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Hide Time picker from Datepicker","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":29,"column":41,"index":1317},"line":29,"code":"  it(\"3. Hide Time picker from Datepicker\", function () {\n    // default value in property pane\n    cy.openPropertyPane(\"datepickerwidget2\");\n    cy.get(\".t--property-control-timeprecision .bp3-popover-target\").last().click();\n    cy.get(\".t--dropdown-option\").children().contains(\"None\").click();\n    cy.wait(\"@updateLayout\"); // default in date picker\n\n    cy.get(\".t--widget-datepickerwidget2 input\").click();\n    cy.wait(200); // datepicker is open\n\n    cy.get(\".bp3-popover .bp3-datepicker\").should(\"exist\"); // checking timepicker not showing\n\n    cy.get(\".bp3-datepicker-timepicker-wrapper .bp3-timepicker-input-row\").should(\"not.exist\");\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Datepicker/DatePicker1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. set second field in time picker for Datepicker","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":44,"column":55,"index":2011},"line":44,"code":"  it(\"4. set second field in time picker for Datepicker\", function () {\n    // default value in property pane\n    cy.openPropertyPane(\"datepickerwidget2\");\n    cy.get(\".t--property-control-timeprecision .bp3-popover-target\").last().click();\n    cy.get(\".t--dropdown-option\").children().contains(\"Second\").click();\n    cy.wait(\"@updateLayout\"); // default in date picker\n\n    cy.get(\".t--widget-datepickerwidget2 input\").click();\n    cy.wait(200); // datepicker is open\n\n    cy.get(\".bp3-popover .bp3-datepicker\").should(\"exist\"); // checking timepicker\n\n    cy.get(\".bp3-datepicker-timepicker-wrapper .bp3-timepicker-input-row\").children().should(\"have.length\", 5);\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Datepicker/DatePicker1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Text widgets binding with datepicker","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":59,"column":45,"index":2701},"line":59,"code":"  it(\"5. Text widgets binding with datepicker\", function () {\n    cy.SearchEntityandOpen(\"Text1\");\n    cy.EnableAllCodeEditors();\n    cy.testJsontext(\"text\", \"{{DatePicker1.formattedDate}}\");\n    cy.closePropertyPane();\n    cy.SearchEntityandOpen(\"Text2\");\n    cy.EnableAllCodeEditors();\n    cy.testJsontext(\"text\", \"{{DatePicker1.selectedDate}}\");\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Datepicker/DatePicker1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Text widgets binding with datepicker","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":69,"column":45,"index":3084},"line":69,"code":"  it(\"6. Text widgets binding with datepicker\", function () {\n    cy.openPropertyPane(\"datepickerwidget2\");\n    cy.selectDateFormat(\"DD/MM/YYYY\");\n    cy.assertDateFormat();\n    cy.closePropertyPane();\n    cy.assertDateFormat();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Datepicker/DatePicker1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Datepicker default date validation with js binding and default date with moment object","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":76,"column":95,"index":3369},"line":76,"code":"  it(\"7. Datepicker default date validation with js binding and default date with moment object\", function () {\n    cy.openPropertyPane(\"datepickerwidget2\"); //cy.testJsontext(\"defaultdate\", \"\");\n\n    cy.clearPropertyValue(0);\n    cy.get(formWidgetsPage.toggleJsDefaultDate).click().wait(1000); //disable\n\n    cy.get(formWidgetsPage.toggleJsDefaultDate).click(); //enable\n\n    cy.EnableAllCodeEditors();\n    cy.testJsontext(\"defaultdate\", `{{moment(\"1/1/2012\")}}`);\n    cy.get(\".t--widget-datepickerwidget2 .bp3-input\").should(\"contain.value\", \"01/01/2012 00:00\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Datepicker/DatePicker1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. Datepicker clear date, validation with js binding and default date with moment object","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":88,"column":94,"index":3939},"line":88,"code":"  it(\"8. Datepicker clear date, validation with js binding and default date with moment object\", function () {\n    // clear data and check datepicker textbox is clear\n    cy.clearPropertyValue(0);\n    cy.get(\".t--widget-datepickerwidget2 .bp3-input\").should(\"contain.value\", \"\"); // add new date value and check datepicker textbox have value\n\n    cy.EnableAllCodeEditors();\n    cy.testJsontext(\"defaultdate\", `{{moment(\"1/1/2012\")}}`);\n    cy.get(\".t--widget-datepickerwidget2 .bp3-input\").should(\"contain.value\", \"01/01/2012 00:00\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Datepicker/DatePicker1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"9. Datepicker default date validation with js binding","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":97,"column":59,"index":4445},"line":97,"code":"  it(\"9. Datepicker default date validation with js binding\", function () {\n    cy.PublishtheApp(); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(10000);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Datepicker/DatePicker1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"DatePicker-Date Name validation","suites":["DatePicker Widget Functionality"],"updatePoint":{"line":18,"column":37,"index":548},"line":18,"code":"  it(\"DatePicker-Date Name validation\", function () {\n    // changing the date to today\n    cy.get(formWidgetsPage.defaultDate).click();\n    cy.SetDateToToday(); //changing the Button Name\n\n    cy.widgetText(this.data.Datepickername, formWidgetsPage.datepickerWidget, formWidgetsPage.datepickerWidget + \" \" + commonlocators.widgetNameTag); // change the date to next day\n\n    cy.get(formWidgetsPage.defaultDate).click();\n    /**\n     * setDate--> is a Command to select the date in the date picker\n     * @param1 --> its takes currentday+ <future day> eg: 1\n     * @param2 --> user date formate\n     */\n\n    cy.setDate(1, \"ddd MMM DD YYYY\");\n    const nextDay = dayjs().add(1, \"days\").format(\"DD/MM/YYYY\");\n    cy.log(nextDay);\n    cy.get(formWidgetsPage.datepickerWidget + \" .bp3-input\").should(\"contain.value\", nextDay);\n    cy.PublishtheApp();\n    cy.get(publishPage.datepickerWidget + \" .bp3-input\").should(\"contain.value\", nextDay);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Datepicker/DatePicker2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Datepicker-Clear date validation","suites":["DatePicker Widget Functionality"],"updatePoint":{"line":39,"column":38,"index":1493},"line":39,"code":"  it(\"Datepicker-Clear date validation\", function () {\n    const today = dayjs().add(0, \"days\").format(\"DD/MM/YYYY\");\n    cy.get(formWidgetsPage.defaultDate).click();\n    cy.ClearDate();\n    cy.PublishtheApp();\n    cy.get(publishPage.datepickerWidget + \" .bp3-input\").should(\"contain.value\", \"\");\n  }); // it(\"Datepicker min/max date validation\", function() {","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Datepicker/DatePicker2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"DatePicker-check Visible field  validation","suites":["DatePicker Widget Functionality"],"updatePoint":{"line":118,"column":48,"index":4247},"line":118,"code":"  it(\"DatePicker-check Visible field  validation\", function () {\n    // Check the visible checkbox\n    cy.UncheckWidgetProperties(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publishPage.datepickerWidget).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Datepicker/DatePicker2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"DatePicker-uncheck Visible field validation","suites":["DatePicker Widget Functionality"],"updatePoint":{"line":124,"column":49,"index":4503},"line":124,"code":"  it(\"DatePicker-uncheck Visible field validation\", function () {\n    // Check the visible checkbox\n    cy.CheckWidgetProperties(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publishPage.datepickerWidget).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Datepicker/DatePicker2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"DatePicker-Disable feild validation","suites":["DatePicker Widget Functionality"],"updatePoint":{"line":130,"column":41,"index":4750},"line":130,"code":"  it(\"DatePicker-Disable feild validation\", function () {\n    //Check the Disabled checkbox\n    cy.CheckWidgetProperties(commonlocators.disableCheckbox);\n    cy.validateDisableWidget(formWidgetsPage.datepickerWidget, commonlocators.disabledField);\n    cy.PublishtheApp();\n    cy.validateDisableWidget(publishPage.datepickerWidget, commonlocators.disabledField);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Datepicker/DatePicker2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"DatePicker-Enable feild validation","suites":["DatePicker Widget Functionality"],"updatePoint":{"line":137,"column":40,"index":5117},"line":137,"code":"  it(\"DatePicker-Enable feild validation\", function () {\n    //UnCheck the Disabled checkbox\n    cy.UncheckWidgetProperties(commonlocators.disableCheckbox);\n    cy.validateEnableWidget(formWidgetsPage.datepickerWidget, commonlocators.disabledField);\n    cy.PublishtheApp();\n    cy.validateEnableWidget(publishPage.datepickerWidget, commonlocators.disabledField);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Datepicker/DatePicker2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Datepicker default date validation with js binding","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":11,"column":56,"index":400},"line":11,"code":"  it(\"Datepicker default date validation with js binding\", function () {\n    cy.wait(7000);\n    cy.openPropertyPane(\"datepickerwidget2\");\n    cy.get(\".t--property-control-defaultdate .bp3-input\").clear();\n    cy.get(formWidgetsPage.toggleJsDefaultDate).click();\n    cy.testJsontext(\"defaultdate\", \"{{moment().toISOString()}}\");\n    cy.get(formWidgetsPage.toggleJsMinDate).click();\n    cy.testJsontext(\"mindate\", \"{{moment().subtract(10, 'days').toISOString()}}\");\n    cy.get(formWidgetsPage.toggleJsMaxDate).click();\n    cy.testJsontext(\"maxdate\", \"{{moment().add(10, 'days').toISOString()}}\");\n    /*\n      cy.get(formWidgetsPage.datepickerWidget + \" .bp3-input\").should(\n        \"contain.value\",\n        \"14/02/2021\",\n      );\n      cy.PublishtheApp();\n      cy.get(publishPage.datepickerWidget + \" .bp3-input\").should(\n        \"contain.value\",\n        \"14/02/2021\",\n      );\n      */\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Datepicker/DatePickerV2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Text widgets binding with datepicker","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":33,"column":42,"index":1279},"line":33,"code":"  it(\"Text widgets binding with datepicker\", function () {\n    cy.openPropertyPane(\"textwidget\");\n    cy.testJsontext(\"text\", \"{{DatePicker1.formattedDate}}\");\n    cy.closePropertyPane();\n    cy.SearchEntityandOpen(\"Text2\");\n    cy.EnableAllCodeEditors();\n    cy.testJsontext(\"text\", \"{{DatePicker1.selectedDate}}\");\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Datepicker/DatePickerV2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Text widgets binding with datepicker","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":42,"column":42,"index":1630},"line":42,"code":"  it(\"Text widgets binding with datepicker\", function () {\n    cy.openPropertyPane(\"datepickerwidget2\");\n    cy.selectDateFormat(\"YYYY-MM-DD\");\n    cy.assertDateFormat();\n    cy.selectDateFormat(\"YYYY-MM-DD HH:mm\");\n    cy.assertDateFormat();\n    cy.selectDateFormat(\"ISO 8601\");\n    cy.assertDateFormat();\n    cy.selectDateFormat(\"DD/MM/YYYY\");\n    cy.assertDateFormat();\n    cy.selectDateFormat(\"DD/MM/YYYY HH:mm\");\n    cy.closePropertyPane();\n    cy.assertDateFormat();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Datepicker/DatePickerV2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Datepicker default date validation message","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":56,"column":48,"index":2115},"line":56,"code":"  it(\"Datepicker default date validation message\", function () {\n    cy.openPropertyPane(\"datepickerwidget2\");\n    cy.testJsontext(\"defaultdate\", \"24-12-2021\");\n    cy.evaluateErrorMessage(\"Value does not match: ISO 8601 date string\");\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Datepicker/DatePickerV2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Datepicker should not change the display data unless user selects the date","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":67,"column":80,"index":2549},"line":67,"code":"  it(\"Datepicker should not change the display data unless user selects the date\", () => {\n    cy.openPropertyPane(\"datepickerwidget2\");\n    cy.testJsontext(\"defaultdate\", '{{moment(\"04/05/2021 05:25\", \"DD/MM/YYYY HH:mm\").toISOString()}}');\n    cy.get(formWidgetsPage.toggleJsMinDate).click();\n    cy.get(\".t--property-control-mindate .bp3-input\").clear();\n    cy.get(\".t--property-control-mindate .bp3-input\").type(\"2020-02-01\");\n    cy.selectDateFormat(\"D MMMM, YYYY\");\n    cy.get(\".t--widget-datepickerwidget2 .bp3-input\").should(\"contain.value\", \"4 May, 2021\");\n    cy.get(\".t--widget-datepickerwidget2 .bp3-input\").click({\n      force: true\n    });\n    cy.get(\".DayPicker-NavButton--next\").click({\n      force: true\n    });\n    cy.get(\".t--widget-datepickerwidget2 .bp3-input\").should(\"contain.value\", \"4 May, 2021\");\n    cy.get(formWidgetsPage.toggleJsMinDate).click();\n    cy.testJsontext(\"mindate\", \"{{moment().subtract(10, 'days').toISOString()}}\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Datepicker/DatePickerV2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Datepicker default date validation with strings","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":90,"column":53,"index":3619},"line":90,"code":"  it(\"Datepicker default date validation with strings\", function () {\n    cy.openPropertyPane(\"datepickerwidget2\");\n    cy.get(formWidgetsPage.toggleJsDefaultDate).click();\n    cy.get(\".t--property-control-defaultdate .bp3-input\").clear();\n    cy.get(\".t--property-control-defaultdate .bp3-input\").type(\"2020-02-01\");\n    cy.closePropertyPane();\n    cy.openPropertyPane(\"datepickerwidget2\");\n    cy.get(formWidgetsPage.toggleJsMinDate).click({\n      force: true\n    });\n    cy.get(\".t--property-control-mindate .bp3-input\").type(\"2020-01-01\");\n    cy.get(formWidgetsPage.toggleJsMaxDate).click({\n      force: true\n    });\n    cy.get(\".t--property-control-maxdate .bp3-input\").type(\"2020-02-10\");\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Datepicker/DatePickerV2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Datepicker input value changes to work with selected date formats","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":107,"column":71,"index":4367},"line":107,"code":"  it(\"Datepicker input value changes to work with selected date formats\", function () {\n    cy.openPropertyPane(\"datepickerwidget2\");\n    cy.get(\".t--property-control-mindate .bp3-input\").clear().type(\"2021-01-01\");\n    cy.closePropertyPane();\n    cy.openPropertyPane(\"datepickerwidget2\");\n    cy.get(\".t--property-control-maxdate .bp3-input\").clear().type(\"2021-10-10\");\n    cy.closePropertyPane();\n    cy.openPropertyPane(\"datepickerwidget2\");\n    cy.get(\".t--property-control-defaultdate .bp3-input\").clear();\n    cy.selectDateFormat(\"DD/MM/YYYY HH:mm\");\n    cy.get(formWidgetsPage.toggleJsDefaultDate).click();\n    cy.testJsontext(\"defaultdate\", '{{moment(\"04/05/2021 05:25\", \"DD/MM/YYYY HH:mm\").toISOString()}}');\n    cy.get(\".t--draggable-datepickerwidget2 .bp3-input\").clear({\n      force: true\n    }).type(\"04/05/2021 06:25\");\n    cy.selectDateFormat(\"LLL\");\n    cy.wait(\"@updateLayout\");\n    cy.get(\".t--draggable-textwidget .bp3-ui-text\").first().should(\"contain.text\", \"May 4, 2021 6:25 AM\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Datepicker/DatePickerV2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check isDirty meta property","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":131,"column":33,"index":5471},"line":131,"code":"  it(\"Check isDirty meta property\", function () {\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{DatePicker1.isDirty}}`); // Init isDirty\n\n    cy.openPropertyPane(\"datepickerwidget2\");\n    cy.testJsontextclear(\"defaultdate\");\n    cy.get(formWidgetsPage.toggleJsDefaultDate).click();\n    cy.get(\".t--property-control-defaultdate .bp3-input\").clear();\n    cy.get(formWidgetsPage.toggleJsDefaultDate).click();\n    cy.testJsontext(\"defaultdate\", '{{moment(\"04/05/2021 05:25\", \"DD/MM/YYYY HH:mm\").toISOString()}}');\n    cy.closePropertyPane(); // Check if initial value of isDirty is false\n\n    cy.get(\".t--widget-textwidget\").first().should(\"contain\", \"false\"); // Interact with UI\n\n    cy.get(\".t--draggable-datepickerwidget2 .bp3-input\").clear({\n      force: true\n    }).type(\"04/05/2021 06:25\");\n    cy.wait(\"@updateLayout\"); // Check if isDirty is set to true\n\n    cy.get(\".t--widget-textwidget\").first().should(\"contain\", \"true\"); // Change defaultDate\n\n    cy.openPropertyPane(\"datepickerwidget2\");\n    cy.testJsontext(\"defaultdate\", \"\");\n    cy.get(formWidgetsPage.toggleJsDefaultDate).click();\n    cy.get(\".t--property-control-defaultdate .bp3-input\").clear();\n    cy.get(formWidgetsPage.toggleJsDefaultDate).click();\n    cy.testJsontext(\"defaultdate\", '{{moment(\"07/05/2021 05:25\", \"DD/MM/YYYY HH:mm\").toISOString()}}'); // Check if isDirty is reset to false\n\n    cy.get(\".t--widget-textwidget\").first().should(\"contain\", \"false\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Datepicker/DatePickerV2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Datepicker default date validation with js binding","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":161,"column":56,"index":6984},"line":161,"code":"  it(\"Datepicker default date validation with js binding\", function () {\n    cy.PublishtheApp(); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(10000);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Datepicker/DatePickerV2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should have deprecation warning on all the deprecated widgets","suites":["Deprecation warning feature"],"updatePoint":{"line":7,"column":67,"index":234},"line":7,"code":"  it(\"should have deprecation warning on all the deprecated widgets\", function () {\n    cy.get(`#div-selection-0`).click({\n      force: true\n    });\n\n    for (const widgets of dsl.dsl.children) {\n      cy.get(`#div-selection-0`).click({\n        force: true\n      });\n      cy.get(`#${widgets.widgetId}`).click({\n        ctrlKey: true\n      });\n      cy.get(`div[data-testid='t--selected']`).should(\"have.length\", 1);\n      cy.get(`.t--deprecation-warning`).should(\"have.length\", 1);\n    }\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/deprecatedWidgets_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Should be able to drag disabled button","suites":["Disabled Widgets drag Functionality"],"updatePoint":{"line":9,"column":44,"index":293},"line":9,"code":"  it(\"Should be able to drag disabled button\", function () {\n    const selector = \".t--draggable-buttonwidget button\";\n    cy.wait(1000);\n    cy.get(selector).then(button => {\n      cy.wrap(button[0].getBoundingClientRect()).as(\"initialPosition\");\n    });\n    cy.get(selector).realHover().trigger(\"dragstart\", {\n      force: true\n    });\n    cy.get(explorer.dropHere).trigger(\"mousemove\", 200, 300, {\n      eventConstructor: \"MouseEvent\"\n    }).trigger(\"mouseup\", 200, 300, {\n      eventConstructor: \"MouseEvent\"\n    });\n    cy.get(selector).then(button => {\n      expect(\"initialPosition\").not.equal(button[0].getBoundingClientRect());\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Disabled_Widgets_drag_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Should be able to drag disabled menu button","suites":["Disabled Widgets drag Functionality"],"updatePoint":{"line":28,"column":49,"index":1052},"line":28,"code":"  it(\"Should be able to drag disabled menu button\", function () {\n    const selector = \".t--draggable-menubuttonwidget button\";\n    cy.wait(1000);\n    cy.get(selector).then(button => {\n      cy.wrap(button[0].getBoundingClientRect()).as(\"initialPosition\");\n    });\n    cy.get(selector).realHover().trigger(\"dragstart\", {\n      force: true\n    });\n    cy.get(explorer.dropHere).trigger(\"mousemove\", 600, 300, {\n      eventConstructor: \"MouseEvent\"\n    }).trigger(\"mouseup\", 600, 300, {\n      eventConstructor: \"MouseEvent\"\n    });\n    cy.get(selector).then(button => {\n      expect(\"initialPosition\").not.equal(button[0].getBoundingClientRect());\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Disabled_Widgets_drag_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Should be able to drag disabled icon button","suites":["Disabled Widgets drag Functionality"],"updatePoint":{"line":47,"column":49,"index":1815},"line":47,"code":"  it(\"Should be able to drag disabled icon button\", function () {\n    const selector = \".t--draggable-iconbuttonwidget button\";\n    cy.wait(1000);\n    cy.get(selector).then(button => {\n      cy.wrap(button[0].getBoundingClientRect()).as(\"initialPosition\");\n    });\n    cy.get(selector).realHover().trigger(\"dragstart\", {\n      force: true\n    });\n    cy.get(explorer.dropHere).trigger(\"mousemove\", 200, 200, {\n      eventConstructor: \"MouseEvent\"\n    }).trigger(\"mouseup\", 200, 200, {\n      eventConstructor: \"MouseEvent\"\n    });\n    cy.get(selector).then(button => {\n      expect(\"initialPosition\").not.equal(button[0].getBoundingClientRect());\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Disabled_Widgets_drag_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Dropdown-Modal Validation","suites":["Dropdown Widget Functionality"],"updatePoint":{"line":21,"column":34,"index":727},"line":21,"code":"  it(\"1. Dropdown-Modal Validation\", function () {\n    cy.CheckAndUnfoldWidgets();\n    cy.SearchEntityandOpen(\"Dropdown1\");\n    cy.EnableAllCodeEditors();\n    cy.testJsontext(\"options\", JSON.stringify(data.input)); //creating the Modal and verify Modal name\n\n    cy.createModal(\"Modal\", this.data.ModalName);\n    cy.PublishtheApp(); // Changing the option to verify the success message\n\n    cy.get(formWidgetsPage.selectWidget).find(widgetLocators.dropdownSingleSelect).click({\n      force: true\n    });\n    cy.get(commonlocators.singleSelectWidgetMenuItem).contains(\"Option 2\").click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.get(modalWidgetPage.modelTextField).should(\"have.text\", this.data.ModalName);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Dropdown/Dropdown_onOptionChange_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Dropdown-Call-Api Validation","suites":["Dropdown Widget Functionality"],"updatePoint":{"line":39,"column":37,"index":1453},"line":39,"code":"  it(\"2. Dropdown-Call-Api Validation\", function () {\n    //creating an api and calling it from the onOptionChangeAction of the Dropdown widget.\n    // Creating the api\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"dropdownApi\");\n    cy.log(\"Creation of buttonApi Action successful\");\n    cy.enterDatasourceAndPath(this.data.paginationUrl, \"users?page=4&size=3\");\n    cy.SaveAndRunAPI(); // Going to HomePage where the button widget is located and opeing it's property pane.\n\n    cy.get(formWidgetsPage.NavHomePage).click({\n      force: true\n    });\n    cy.reload();\n    cy.CheckAndUnfoldWidgets();\n    cy.SearchEntityandOpen(\"Dropdown1\"); // Adding the api in the onClickAction of the button widget.\n\n    cy.addAPIFromLightningMenu(\"dropdownApi\"); // Filling the messages for success/failure in the onClickAction of the button widget.\n\n    cy.onClickActions(\"Success\", \"Error\", \"onoptionchange\");\n    cy.PublishtheApp(); // Changing the option to verify the success message\n\n    cy.get(formWidgetsPage.selectWidget).find(widgetLocators.dropdownSingleSelect).click({\n      force: true\n    });\n    cy.get(commonlocators.singleSelectWidgetMenuItem).contains(\"Option 3\").click({\n      force: true\n    });\n    cy.get(formWidgetsPage.apiCallToast).should(\"have.text\", \"Success\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Dropdown/Dropdown_onOptionChange_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Dropdown-Call-Query Validation","suites":["Dropdown Widget Functionality"],"updatePoint":{"line":68,"column":39,"index":2738},"line":68,"code":"  it(\"3. Dropdown-Call-Query Validation\", function () {\n    //creating a query and calling it from the onOptionChangeAction of the Dropdown widget.\n    // Creating a mock query\n    // cy.CreateMockQuery(\"Query1\");\n    let postgresDatasourceName;\n    cy.startRoutesForDatasource();\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.PostgreSQL).click();\n    cy.generateUUID().then(uid => {\n      postgresDatasourceName = uid;\n      cy.get(\".t--edit-datasource-name\").click();\n      cy.get(\".t--edit-datasource-name input\").clear().type(postgresDatasourceName, {\n        force: true\n      }).should(\"have.value\", postgresDatasourceName).blur();\n      cy.wait(\"@saveDatasource\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n      cy.fillPostgresDatasourceForm();\n      cy.saveDatasource();\n      cy.NavigateToActiveDSQueryPane(postgresDatasourceName);\n    });\n    cy.CreateMockQuery(\"Query1\"); // Going to HomePage where the button widget is located and opeing it's property pane.\n\n    cy.get(formWidgetsPage.NavHomePage).click({\n      force: true\n    });\n    cy.reload();\n    cy.openPropertyPane(\"selectwidget\"); // Adding the query in the onClickAction of the button widget.\n\n    cy.addQueryFromLightningMenu(\"Query1\"); // Filling the messages for success/failure in the onClickAction of the button widget.\n\n    cy.onClickActions(\"Success\", \"Error\", \"onoptionchange\");\n    cy.PublishtheApp(); // Changing the option to verify the success message\n\n    cy.get(formWidgetsPage.selectWidget).find(widgetLocators.dropdownSingleSelect).click({\n      force: true\n    });\n    cy.get(commonlocators.singleSelectWidgetMenuItem).contains(\"Option 2\").click({\n      force: true\n    });\n    cy.get(formWidgetsPage.apiCallToast).should(\"have.text\", \"Success\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Dropdown/Dropdown_onOptionChange_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Toggle JS - Dropdown-Call-Query Validation","suites":["Dropdown Widget Functionality"],"updatePoint":{"line":108,"column":51,"index":4538},"line":108,"code":"  it(\"4. Toggle JS - Dropdown-Call-Query Validation\", function () {\n    //creating an api and calling it from the onOptionChangeAction of the button widget.\n    // calling the existing api\n    cy.SearchEntityandOpen(\"Dropdown1\");\n    cy.get(formWidgetsPage.toggleOnOptionChange).click({\n      force: true\n    });\n    cy.EnableAllCodeEditors();\n    cy.testJsontext(\"onoptionchange\", \"{{Query1.run(() => showAlert('Success','success'), () => showAlert('Error','error'))}}\");\n    cy.PublishtheApp(); // Changing the option to verify the success message\n\n    cy.get(formWidgetsPage.selectWidget).find(widgetLocators.dropdownSingleSelect).click({\n      force: true\n    });\n    cy.get(commonlocators.singleSelectWidgetMenuItem).contains(\"Option 2\").click({\n      force: true\n    });\n    cy.get(formWidgetsPage.apiCallToast).should(\"have.text\", \"Success\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Dropdown/Dropdown_onOptionChange_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Toggle JS - Dropdown-CallAnApi Validation","suites":["Dropdown Widget Functionality"],"updatePoint":{"line":127,"column":50,"index":5393},"line":127,"code":"  it(\"5. Toggle JS - Dropdown-CallAnApi Validation\", function () {\n    //creating an api and calling it from the onOptionChangeAction of the button widget.\n    // calling the existing api\n    cy.SearchEntityandOpen(\"Dropdown1\");\n    cy.testJsontext(\"onoptionchange\", \"{{dropdownApi.run(() => showAlert('Success','success'), () => showAlert('Error','error'))}}\");\n    cy.PublishtheApp(); // Changing the option to verify the success message\n\n    cy.get(formWidgetsPage.selectWidget).find(widgetLocators.dropdownSingleSelect).click({\n      force: true\n    });\n    cy.get(commonlocators.singleSelectWidgetMenuItem).contains(\"Option 1\").click({\n      force: true\n    });\n    cy.get(formWidgetsPage.apiCallToast).should(\"have.text\", \"Success\");\n    cy.get(publish.backToEditor).click();\n    cy.openPropertyPane(\"selectwidget\"); // Click on onOptionChange JS button\n\n    cy.get(formWidgetsPage.toggleOnOptionChange).click({\n      force: true\n    });\n    cy.get(commonlocators.dropdownSelectButton).eq(0).click();\n    cy.get(commonlocators.chooseAction).children().contains(\"No action\").click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Dropdown/Dropdown_onOptionChange_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Dropdown Widget Functionality to Verify On Option Change Action","suites":["Dropdown Widget Functionality"],"updatePoint":{"line":150,"column":72,"index":6510},"line":150,"code":"  it(\"6. Dropdown Widget Functionality to Verify On Option Change Action\", function () {\n    // Open property pane\n    cy.SearchEntityandOpen(\"Dropdown1\"); // Dropdown On Option Change\n\n    cy.addEvent(\"Option Changed\");\n    cy.PublishtheApp(); // Change the Option\n\n    cy.get(formWidgetsPage.selectWidget).find(widgetLocators.dropdownSingleSelect).click({\n      force: true\n    });\n    cy.get(commonlocators.singleSelectWidgetMenuItem).contains(\"Option 3\").click({\n      force: true\n    }); // Verify Option is changed\n\n    cy.validateToastMessage(\"Option Changed\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Dropdown/Dropdown_onOptionChange_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Add new dropdown widget","suites":["Dropdown Widget Functionality"],"updatePoint":{"line":15,"column":29,"index":503},"line":15,"code":"  it(\"Add new dropdown widget\", () => {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"selectwidget\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(\".t--widget-selectwidget\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Dropdown/Dropdown_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check that empty value is allowed in options","suites":["Dropdown Widget Functionality"],"updatePoint":{"line":23,"column":57,"index":752},"line":23,"code":"  it(\"should check that empty value is allowed in options\", () => {\n    cy.openPropertyPane(\"selectwidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"Blue\",\n          \"value\": \"\"\n        },\n        {\n          \"label\": \"Green\",\n          \"value\": \"GREEN\"\n        },\n        {\n          \"label\": \"Red\",\n          \"value\": \"RED\"\n        }\n      ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Dropdown/Dropdown_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check that more than one empty value is not allowed in options","suites":["Dropdown Widget Functionality"],"updatePoint":{"line":41,"column":75,"index":1260},"line":41,"code":"  it(\"should check that more than one empty value is not allowed in options\", () => {\n    cy.openPropertyPane(\"selectwidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"Blue\",\n          \"value\": \"\"\n        },\n        {\n          \"label\": \"Green\",\n          \"value\": \"\"\n        },\n        {\n          \"label\": \"Red\",\n          \"value\": \"RED\"\n        }\n      ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Dropdown/Dropdown_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check that Objects can be added to Select Widget default value","suites":["Dropdown Widget Functionality"],"updatePoint":{"line":59,"column":75,"index":1759},"line":59,"code":"  it(\"should check that Objects can be added to Select Widget default value\", () => {\n    cy.openPropertyPane(\"selectwidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[{\n          \"label\": \"Blue\",\n          \"value\": \"BLUE\"\n        },\n        {\n          \"label\": \"Green\",\n          \"value\": \"GREEN\"\n        },\n        {\n          \"label\": \"Red\",\n          \"value\": \"RED\"\n        }]`);\n    cy.updateCodeInput(\".t--property-control-defaultvalue\", \"BLUE\");\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"not.exist\");\n    cy.get(\".t--property-control-defaultvalue .t--codemirror-has-error\").should(\"not.exist\");\n    cy.get(formWidgetsPage.dropdownDefaultButton).should(\"contain\", \"Blue\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Dropdown/Dropdown_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check that special strings are parsed as string in default value","suites":["Dropdown Widget Functionality"],"updatePoint":{"line":78,"column":77,"index":2497},"line":78,"code":"  it(\"should check that special strings are parsed as string in default value\", () => {\n    cy.openPropertyPane(\"selectwidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[{\n          \"label\": \"Blue\",\n          \"value\": \"null\"\n        },\n        {\n          \"label\": \"Green\",\n          \"value\": 100\n        },\n        {\n          \"label\": \"Red\",\n          \"value\": \"120\"\n        }]`);\n    cy.updateCodeInput(\".t--property-control-defaultvalue\", \"null\");\n    cy.get(\".t--property-control-defaultvalue .t--codemirror-has-error\").should(\"not.exist\");\n    cy.get(formWidgetsPage.dropdownDefaultButton).should(\"contain\", \"Blue\");\n    cy.openPropertyPane(\"selectwidget\");\n    cy.updateCodeInput(\".t--property-control-defaultvalue\", \"120\");\n    cy.get(\".t--property-control-defaultvalue .t--codemirror-has-error\").should(\"not.exist\");\n    cy.get(formWidgetsPage.dropdownDefaultButton).should(\"contain\", \"Red\");\n    cy.openPropertyPane(\"selectwidget\");\n    cy.updateCodeInput(\".t--property-control-defaultvalue\", \"{{ 100 }}\");\n    cy.get(\".t--property-control-defaultvalue .t--codemirror-has-error\").should(\"not.exist\");\n    cy.get(formWidgetsPage.dropdownDefaultButton).should(\"contain\", \"Green\");\n    cy.openPropertyPane(\"selectwidget\");\n    cy.updateCodeInput(\".t--property-control-defaultvalue\", \"{{ null }}\");\n    cy.get(\".t--property-control-defaultvalue .t--codemirror-has-error\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Dropdown/Dropdown_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Dropdown Functionality To Check disabled Widget","suites":["Dropdown Widget Functionality"],"updatePoint":{"line":107,"column":53,"index":3890},"line":107,"code":"  it(\"Dropdown Functionality To Check disabled Widget\", function () {\n    cy.openPropertyPane(\"selectwidget\"); // Disable the visible JS\n\n    cy.togglebarDisable(commonlocators.visibleCheckbox);\n    cy.PublishtheApp(); // Verify the disabled visible JS\n\n    cy.get(publish.selectwidget + \" \" + \"input\").should(\"not.exist\");\n    cy.goToEditFromPublish();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Dropdown/Dropdown_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Dropdown Functionality To UnCheck disabled Widget","suites":["Dropdown Widget Functionality"],"updatePoint":{"line":116,"column":55,"index":4252},"line":116,"code":"  it(\"Dropdown Functionality To UnCheck disabled Widget\", function () {\n    cy.openPropertyPane(\"selectwidget\"); // Check the visible JS\n\n    cy.togglebar(commonlocators.visibleCheckbox);\n    cy.PublishtheApp(); // Verify the checked visible JS\n\n    cy.get(publish.selectwidget).should(\"exist\");\n    cy.goToEditFromPublish();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Dropdown/Dropdown_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"check if the dropdown value does not change on navigation","suites":["Dropdown Widget Check value does not reset on navigation"],"updatePoint":{"line":9,"column":63,"index":355},"line":9,"code":"  it(\"check if the dropdown value does not change on navigation\", function () {\n    //Change the value of drop down;\n    cy.wait(4000); //settling time for dsl into layout\n\n    cy.get(commonlocators.selectButton).first().click();\n    cy.selectWidgetOnClickOption(\"Red\");\n    cy.wait(200); //Navigate\n\n    cy.NavigateToAPI_Panel(); //Again navigate back to the widget\n\n    cy.SearchEntityandOpen(\"Select3\"); //Check for the select value again\n\n    cy.get(`.t--draggable-selectwidget .bp3-popover-target ${commonlocators.menuSelection}`).first().should(\"have.text\", \"Red\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Dropdown/DropDownWidget_value_reset_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check file upload of type jpeg","suites":["FilePicker Widget Functionality with different file types"],"updatePoint":{"line":9,"column":36,"index":312},"line":9,"code":"  it(\"Check file upload of type jpeg\", function () {\n    cy.SearchEntityandOpen(\"FilePicker1\");\n    const fixturePath = \"AAAFlowerVase.jpeg\";\n    cy.get(commonlocators.filepickerv2).click();\n    cy.get(commonlocators.filePickerInput).first().attachFile(fixturePath);\n    cy.get(commonlocators.filePickerUploadButton).click();\n    cy.get(commonlocators.dashboardItemName).contains(\"AAAFlowerVase.jpeg\"); //eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500);\n    cy.get(\"button\").contains(\"Upload 1 file\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Filepicker/FilePicker_with_fileTypes_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Replace an existing file type with another file type","suites":["FilePicker Widget Functionality with different file types"],"updatePoint":{"line":20,"column":58,"index":868},"line":20,"code":"  it(\"Replace an existing file type with another file type\", function () {\n    cy.get(commonlocators.filepickerv2).click();\n    cy.get(\"button.uppy-Dashboard-Item-action--remove\").click();\n    cy.get(\"button.uppy-Dashboard-browse\").should(\"be.visible\");\n    cy.get(commonlocators.filePickerInput).first().attachFile(\"appsmithlogo.png\");\n    cy.get(commonlocators.filePickerUploadButton).click();\n    cy.get(commonlocators.filepickerv2).click();\n    cy.get(commonlocators.dashboardItemName).contains(\"appsmithlogo.png\"); //eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(200);\n    cy.get(\"button\").contains(\"Upload 1 file\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Filepicker/FilePicker_with_fileTypes_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should test allowed values","suites":["FilePicker Widget Functionality"],"updatePoint":{"line":14,"column":32,"index":437},"line":14,"code":"  it(\"should test allowed values\", () => {\n    cy.openPropertyPane(\"filepickerwidgetv2\");\n    cy.get(\".t--property-control-allowedfiletypes .t--js-toggle\").click({\n      force: true\n    });\n    cy.testJsontext(\"allowedfiletypes\", `[\".csv\"]`);\n    cy.get(\".t--property-control-allowedfiletypes .t--codemirror-has-error\").should(\"not.exist\");\n    cy.testJsontext(\"allowedfiletypes\", \".csv\");\n    cy.get(\".t--property-control-allowedfiletypes .t--codemirror-has-error\").should(\"exist\");\n    cy.testJsontext(\"allowedfiletypes\", `[\".csv\", \".doc\"]`);\n    cy.get(\".t--property-control-allowedfiletypes .t--codemirror-has-error\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Filepicker/Filepicker1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Create API to be used in Filepicker","suites":["FilePicker Widget Functionality"],"updatePoint":{"line":9,"column":41,"index":292},"line":9,"code":"  it(\"Create API to be used in Filepicker\", function () {\n    cy.log(\"Login Successful\");\n    cy.NavigateToAPI_Panel();\n    cy.log(\"Navigation to API Panel screen successful\");\n    cy.CreateAPI(\"FirstAPI\");\n    cy.log(\"Creation of FirstAPI Action successful\");\n    cy.enterDatasourceAndPath(this.data.paginationUrl, this.data.paginationParam);\n    cy.SaveAndRunAPI();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Filepicker/FilePicker2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"FilePicker Widget Functionality","suites":["FilePicker Widget Functionality"],"updatePoint":{"line":18,"column":37,"index":662},"line":18,"code":"  it(\"FilePicker Widget Functionality\", function () {\n    cy.SearchEntityandOpen(\"FilePicker1\"); //eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000); //Checking the edit props for FilePicker and also the properties of FilePicker widget\n\n    cy.testCodeMirror(\"Upload Files\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Filepicker/FilePicker2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"It checks the loading state of filepicker on call the action","suites":["FilePicker Widget Functionality"],"updatePoint":{"line":25,"column":66,"index":998},"line":25,"code":"  it(\"It checks the loading state of filepicker on call the action\", function () {\n    cy.SearchEntityandOpen(\"FilePicker1\");\n    const fixturePath = \"testFile.mov\";\n    cy.addAPIFromLightningMenu(\"FirstAPI\");\n    cy.get(commonlocators.filePickerButton).click();\n    cy.get(commonlocators.filePickerInput).first().attachFile(fixturePath);\n    cy.get(commonlocators.filePickerUploadButton).click();\n    cy.get(\".bp3-spinner\").should(\"have.length\", 1); //eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500);\n    cy.get(\"button\").contains(\"1 files selected\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Filepicker/FilePicker2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"It checks the deletion of filepicker works as expected","suites":["FilePicker Widget Functionality"],"updatePoint":{"line":37,"column":60,"index":1577},"line":37,"code":"  it(\"It checks the deletion of filepicker works as expected\", function () {\n    cy.get(commonlocators.filePickerButton).click();\n    cy.get(commonlocators.filePickerInput).first().attachFile(\"testFile.mov\");\n    cy.get(commonlocators.filePickerUploadButton).click(); //eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500);\n    cy.get(\"button\").contains(\"1 files selected\");\n    cy.get(commonlocators.filePickerButton).click(); //eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(200);\n    cy.get(\"button.uppy-Dashboard-Item-action--remove\").click();\n    cy.get(\"button.uppy-Dashboard-browse\").click();\n    cy.get(commonlocators.filePickerInput).first().attachFile(\"testFile2.mov\");\n    cy.get(commonlocators.filePickerUploadButton).click(); //eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500);\n    cy.get(\"button\").contains(\"1 files selected\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Filepicker/FilePicker2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Drag & drop FilePicker/Text widgets","suites":["File picker widget v2"],"updatePoint":{"line":7,"column":44,"index":284},"line":7,"code":"  it(\"1. Drag & drop FilePicker/Text widgets\", () => {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(widgetName, {\n      x: 300,\n      y: 300\n    });\n    cy.get(`.t--widget-${widgetName}`).should(\"exist\");\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 300,\n      y: 500\n    });\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{FilePicker1.isDirty}}`);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Filepicker/FilePickerV2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check isDirty meta property","suites":["File picker widget v2"],"updatePoint":{"line":21,"column":33,"index":703},"line":21,"code":"  it(\"Check isDirty meta property\", function () {\n    // Check if initial value of isDirty is false\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\"); // Upload a new file\n\n    cy.get(`.t--widget-${widgetName}`).click();\n    cy.get(commonlocators.filePickerInput).first().attachFile(\"testFile.mov\");\n    cy.get(commonlocators.filePickerUploadButton).click(); //eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500); // Check if isDirty is set to true\n\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"true\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Filepicker/FilePickerV2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check if the uploaded data retains when shifting to query page","suites":["File picker widget v2"],"updatePoint":{"line":33,"column":68,"index":1292},"line":33,"code":"  it(\"Check if the uploaded data retains when shifting to query page\", () => {\n    cy.createAndFillApi(\"{{FilePicker1.files[0]}}\", \"\");\n    cy.get(\".t--more-action-menu\").first().click({\n      force: true\n    });\n    cy.get(explorer.widgetSwitchId).click();\n    cy.get(`.t--widget-${widgetName}`).should(\"contain\", \"1 files selected\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Filepicker/FilePickerV2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Elements inside upload modal should follow theme border radius","suites":["Checkbox Widget Functionality"],"updatePoint":{"line":11,"column":71,"index":410},"line":11,"code":"  it(\"1. Elements inside upload modal should follow theme border radius\", () => {\n    // Click on canvas to get global theme settings\n    cy.get(commonlocators.canvas).click({\n      force: true\n    });\n    cy.get(commonlocators.themeAppBorderRadiusBtn).last().click();\n    cy.get(commonlocators.filepickerv2).click(); // Check the border radius of the modal:\n\n    cy.get(\".uppy-Dashboard-inner\").should(\"have.css\", \"border-radius\", \"24px\");\n    cy.get(\".uppy-Dashboard-innerWrap\").should(\"have.css\", \"border-radius\", \"24px\");\n    cy.get(\".uppy-Dashboard-AddFiles\").should(\"have.css\", \"border-radius\", \"24px\"); // Check the border radius of close button top right\n\n    cy.get(\".uppy-Dashboard-close\").should(\"have.css\", \"border-radius\", \"24px\");\n    cy.get(commonlocators.filePickerInput).first().attachFile(\"testFile.mov\");\n    cy.get(\".uppy-StatusBar-actionBtn--upload\").should(\"have.css\", \"border-radius\", \"24px\"); // Check the border radius of the remove file icon\n\n    cy.get(\".uppy-Dashboard-Item-action--remove .uppy-c-icon\").should(\"have.css\", \"border-radius\", \"24px\");\n    cy.get(\".uppy-Dashboard-close\").click({\n      force: true\n    });\n    cy.wait(300); // Change the theme border radius to M and check if the remove file icon's border radius is 4px;\n\n    cy.get(commonlocators.canvas).click({\n      force: true\n    });\n    cy.get(commonlocators.themeAppBorderRadiusBtn).eq(1).click();\n    cy.get(commonlocators.filepickerv2).click(); // Again Check the border radius of the remove file icon\n\n    cy.get(\".uppy-Dashboard-Item-action--remove .uppy-c-icon\").should(\"have.css\", \"border-radius\", \"4px\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Filepicker/FilePickerV2_Widget_Reskinning_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Check colors inside the modal","suites":["Checkbox Widget Functionality"],"updatePoint":{"line":41,"column":38,"index":1994},"line":41,"code":"  it(\"2. Check colors inside the modal\", () => {\n    cy.get(\".uppy-Dashboard-close\").click({\n      force: true\n    });\n    cy.wait(300); // Change the global theme primary color\n\n    cy.get(commonlocators.canvas).click({\n      force: true\n    });\n    cy.wait(300);\n    cy.get(themeLocator.inputColor).click({\n      force: true\n    });\n    cy.get(\".t--colorpicker-v2-color\").eq(9).click({\n      force: true\n    }).then($elem => {\n      const primaryColor = $elem.css(\"background-color\");\n      cy.get(commonlocators.filepickerv2).click();\n      cy.get(\".uppy-StatusBar-actionBtn--upload\").should(\"have.css\", \"background-color\", primaryColor);\n      cy.get(\".uppy-DashboardContent-back\").should(\"have.css\", \"color\", primaryColor);\n      cy.get(\".uppy-DashboardContent-addMoreCaption\").should(\"have.css\", \"color\", primaryColor);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Filepicker/FilePickerV2_Widget_Reskinning_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Check the font-family inside the modal","suites":["Checkbox Widget Functionality"],"updatePoint":{"line":64,"column":47,"index":2843},"line":64,"code":"  it(\"3. Check the font-family inside the modal\", () => {\n    cy.get(\".uppy-Dashboard-close\").click({\n      force: true\n    });\n    cy.get(commonlocators.canvas).click({\n      force: true\n    });\n    cy.wait(300);\n    cy.get(themeLocator.fontsSelected).click({\n      force: true\n    });\n    cy.contains(\"Roboto\").click({\n      force: true\n    });\n    cy.get(commonlocators.filepickerv2).click();\n    cy.get(\".uppy-DashboardContent-back\").should(\"have.css\", \"font-family\", \"Roboto\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Filepicker/FilePickerV2_Widget_Reskinning_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checkbox Functionality To Check required toggle for form","suites":["Checkbox Widget Functionality"],"updatePoint":{"line":13,"column":62,"index":457},"line":13,"code":"  it(\"Checkbox Functionality To Check required toggle for form\", function () {\n    cy.openPropertyPane(\"checkboxwidget\");\n    cy.togglebar(commonlocators.requiredjs + \" \" + \"input\");\n    cy.PublishtheApp();\n    cy.get(publish.checkboxWidget).click();\n    cy.get(widgetsPage.formButtonWidget).contains(\"Submit\").should(\"have.class\", \"bp3-disabled\");\n    cy.get(publish.checkboxWidget).click();\n    cy.get(widgetsPage.formButtonWidget).contains(\"Submit\").should(\"not.have.attr\", \"disabled\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Form/Form_With_CheckBox_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checkbox Functionality To swap label alignment of checkbox","suites":["Checkbox Widget Functionality"],"updatePoint":{"line":23,"column":64,"index":997},"line":23,"code":"  it(\"Checkbox Functionality To swap label alignment of checkbox\", function () {\n    cy.openPropertyPane(\"checkboxwidget\");\n    cy.get(publish.checkboxWidget + \" \" + \".bp3-align-right\").should(\"not.exist\");\n    cy.get(publish.checkboxWidget + \" \" + \".bp3-align-left\").should(\"exist\"); // align right\n\n    cy.get(\".t--property-control-alignment .t--button-tab-RIGHT\").first().click();\n    cy.wait(200);\n    cy.PublishtheApp();\n    cy.get(publish.checkboxWidget + \" \" + \".bp3-align-right\").should(\"exist\");\n    cy.get(publish.checkboxWidget + \" \" + \".bp3-align-left\").should(\"not.exist\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Form/Form_With_CheckBox_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checkbox Functionality To swap label position of checkbox","suites":["Checkbox Widget Functionality"],"updatePoint":{"line":35,"column":63,"index":1631},"line":35,"code":"  it(\"Checkbox Functionality To swap label position of checkbox\", function () {\n    cy.openPropertyPane(\"checkboxwidget\");\n    cy.get(publish.checkboxWidget + \" \" + \".t--checkbox-widget-label\").should(\"have.css\", \"text-align\", \"right\");\n    cy.get(commonlocators.optionposition).last().click({\n      force: true\n    });\n    cy.wait(200);\n    cy.get(commonlocators.dropdownmenu).contains(\"Left\").click({\n      force: true\n    });\n    cy.wait(200);\n    cy.PublishtheApp();\n    cy.get(publish.checkboxWidget + \" \" + \".t--checkbox-widget-label\").should(\"have.css\", \"text-align\", \"left\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Form/Form_With_CheckBox_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checkbox Functionality To change label color of checkbox","suites":["Checkbox Widget Functionality"],"updatePoint":{"line":50,"column":62,"index":2262},"line":50,"code":"  it(\"Checkbox Functionality To change label color of checkbox\", function () {\n    cy.openPropertyPane(\"checkboxwidget\");\n    cy.get(\".t--property-control-textcolor .bp3-input\").type(\"red\");\n    cy.wait(200);\n    cy.PublishtheApp();\n    cy.get(publish.checkboxWidget + \" \" + \".t--checkbox-widget-label\").should(\"have.css\", \"color\", \"rgb(255, 0, 0)\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Form/Form_With_CheckBox_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checkbox Functionality To change label size of checkbox","suites":["Checkbox Widget Functionality"],"updatePoint":{"line":58,"column":61,"index":2660},"line":58,"code":"  it(\"Checkbox Functionality To change label size of checkbox\", function () {\n    cy.openPropertyPane(\"checkboxwidget\");\n    cy.get(widgetsPage.textSize).last().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.selectTxtSize(\"XL\");\n    cy.PublishtheApp();\n    cy.get(publish.checkboxWidget + \" \" + \".t--checkbox-widget-label\").should(\"have.css\", \"font-size\", \"30px\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Form/Form_With_CheckBox_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checkbox Functionality To change label style of checkbox","suites":["Checkbox Widget Functionality"],"updatePoint":{"line":70,"column":62,"index":3147},"line":70,"code":"  it(\"Checkbox Functionality To change label style of checkbox\", function () {\n    cy.openPropertyPane(\"checkboxwidget\");\n    cy.get(\".t--property-control-labelfontstyle .t--button-tab-BOLD\").click({\n      force: true\n    });\n    cy.PublishtheApp();\n    cy.get(publish.checkboxWidget + \" \" + \".t--checkbox-widget-label\").should(\"have.css\", \"font-weight\", \"700\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Form/Form_With_CheckBox_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"CheckboxGroupWidget, MultiSelectTreeWidget, MultiSelectWidgetV2, SelectWidget, SingleSelectTreeWidget, SwitchGroupWidget, PhoneInputWidget, InputWidgetV2 and CurrencyInputWidget should have value props of which values are not null or undefined to be included as a form data","suites":["Form data"],"updatePoint":{"line":7,"column":279,"index":425},"line":7,"code":"  it(\"CheckboxGroupWidget, MultiSelectTreeWidget, MultiSelectWidgetV2, SelectWidget, SingleSelectTreeWidget, SwitchGroupWidget, PhoneInputWidget, InputWidgetV2 and CurrencyInputWidget should have value props of which values are not null or undefined to be included as a form data\", function () {\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200); // Check form data\n\n    cy.get(\"[data-testid='container-wrapper-vannrar7rd'] span\").should(\"exist\").and($formData => {\n      expect($formData).to.contain(\"FormCheckboxGroupWidget\");\n      expect($formData).to.contain(\"FormMultiSelectTreeWidget\");\n      expect($formData).to.contain(\"FormMultiSelectWidgetV2\");\n      expect($formData).to.contain(\"FormSingleSelectTreeWidget\");\n      expect($formData).to.contain(\"FormSwitchGroupWidget\");\n      expect($formData).to.contain(\"FormSelectWidget\");\n      expect($formData).to.contain(\"FormPhoneInputWidget\");\n      expect($formData).to.contain(\"FormInputWidgetV2\");\n      expect($formData).to.contain(\"FormCurrencyInputWidget\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Form/FormData_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Resets the form","suites":["Form reset functionality"],"updatePoint":{"line":8,"column":21,"index":243},"line":8,"code":"  it(\"Resets the form\", () => {\n    // Select a row and verify\n    cy.get(\".tr\").eq(2).click().should(\"have.class\", \"selected-row\"); // Select three options\n\n    cy.get(widgets.multiSelectWidget).click({\n      force: true\n    });\n    cy.get(widgets.multiSelectWidget).type(\"Option\");\n    cy.dropdownMultiSelectDynamic(\"Option 1\");\n    cy.dropdownMultiSelectDynamic(\"Option 2\");\n    cy.dropdownMultiSelectDynamic(\"Option 3\"); // Verify input should include the name \"lindsay.ferguson@reqres.in\"\n\n    cy.get(widgets.inputWidget + \" \" + \"input\").invoke(\"attr\", \"value\").should(\"contain\", \"lindsay.ferguson@reqres.in\"); // Reset the form\n\n    cy.get(widgets.formButtonWidget).contains(\"Reset\").click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500); // verify table should not have selected row\n\n    cy.get(\".tr\").eq(2).should(\"not.have.class\", \"selected-row\"); // Verify dropdown does not have selected values\n\n    cy.get(`${widgets.selectWidget} .bp3-tag-input-values .bp3-tag`).should($span => {\n      expect($span).to.have.length(0);\n    }); // Verify input should not include \"lindsay.ferguson@reqres.in\"\n\n    cy.get(widgets.inputWidget + \" \" + \"input\").invoke(\"attr\", \"value\").should(\"not.contain\", \"lindsay.ferguson@reqres.in\"); // input widgets should not be in error state\n\n    cy.get(widgets.inputWidget + \" \" + \"input\").should(\"not.have.css\", \"border-color\", \"rgb(242, 43, 43)\");\n    cy.get(widgets.currencyInputWidget + \" \" + \"input\").should(\"not.have.css\", \"border-color\", \"rgb(242, 43, 43)\");\n    cy.get(widgets.phoneInputWidget + \" \" + \"input\").should(\"not.have.css\", \"border-color\", \"rgb(242, 43, 43)\"); // Earlier select widget used to remain in error state which wasn't an expected behavior after reset\n    // now even select widget will not show error after reset.\n\n    cy.get(`.rc-select-selector`).should(\"not.have.css\", \"border-color\", \"rgb(242, 43, 43)\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Form/FormReset_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check hasChanges meta property","suites":["Form Widget"],"updatePoint":{"line":7,"column":36,"index":184},"line":7,"code":"  it(\"Check hasChanges meta property\", () => {\n    // Check if isDirty is false for the first time\n    cy.contains(\".t--widget-textwidget\", \"false\").should(\"exist\"); // Interact with UI\n\n    cy.get(`.t--widget-checkboxwidget label`).first().click(); // Check if isDirty is set to true\n\n    cy.contains(\".t--widget-textwidget\", \"false\").should(\"not.exist\");\n    cy.contains(\".t--widget-textwidget\", \"true\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Form/FormWidget_Nested_HasChanges_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate Select and TreeSelect Widget","suites":["Form Widget Functionality"],"updatePoint":{"line":11,"column":43,"index":365},"line":11,"code":"  it(\"Validate Select and TreeSelect Widget\", function () {\n    cy.get(widgetsPage.formButtonWidget).contains(\"Submit\").should(\"have.attr\", \"disabled\");\n    cy.get(formWidgetsPage.treeSelectInput).last().click({\n      force: true\n    });\n    cy.get(formWidgetsPage.treeSelectFilterInput).click().type(\"Blue\");\n    cy.treeSelectDropdown(\"Blue\");\n    cy.get(formWidgetsPage.dropdownWidget).find(widgetsPage.dropdownSingleSelect).click({\n      force: true\n    });\n    cy.wait(2000);\n    cy.get(\".select-popover-wrapper\").contains(\"Blue\").click({\n      force: true\n    });\n    cy.wait(2000);\n    cy.get(widgetsPage.formButtonWidget).contains(\"Submit\").should(\"not.have.attr\", \"disabled\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Form/FormWidget_Select_TreeSelect_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Default Form text,  Reset and Close button Validation","suites":["Form Widget Functionality"],"updatePoint":{"line":17,"column":59,"index":598},"line":17,"code":"  it(\"Default Form text,  Reset and Close button Validation\", function () {\n    cy.get(widgetsPage.textWidget).should(\"be.visible\");\n    cy.get(widgetsPage.formButtonWidget).contains(\"Submit\").scrollIntoView().should(\"be.visible\");\n    cy.get(widgetsPage.formButtonWidget).contains(\"Reset\").scrollIntoView().should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Form/FormWidget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Add Multiple widgets in Form","suites":["Form Widget Functionality"],"updatePoint":{"line":22,"column":34,"index":909},"line":22,"code":"  it(\"Add Multiple widgets in Form\", function () {\n    cy.get(explorer.addWidget).click();\n    cy.get(commonlocators.entityExplorersearch).should(\"be.visible\");\n    cy.dragAndDropToWidget(\"multiselectwidgetv2\", \"formwidget\", {\n      x: 100,\n      y: 100\n    });\n    cy.wait(500);\n    cy.dragAndDropToWidget(\"inputwidgetv2\", \"formwidget\", {\n      x: 50,\n      y: 200\n    });\n    cy.wait(500);\n    cy.get(formWidgetsPage.multiselectwidgetv2).should(\"be.visible\");\n    cy.get(widgetsPage.inputWidget).should(\"be.visible\");\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Form/FormWidget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Form_Widget Minimize and maximize General Validation","suites":["Form Widget Functionality"],"updatePoint":{"line":39,"column":58,"index":1483},"line":39,"code":"  it(\"Form_Widget Minimize and maximize General Validation\", function () {\n    cy.openPropertyPane(\"formwidget\");\n    cy.get(commonlocators.generalChevran).click({\n      force: true\n    });\n    cy.get(commonlocators.generalSection).should(\"not.be.visible\");\n    cy.get(commonlocators.generalChevran).click({\n      force: true\n    });\n    cy.get(commonlocators.generalSection).should(\"be.visible\");\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Form/FormWidget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Rename Form widget from Entity Explorer","suites":["Form Widget Functionality"],"updatePoint":{"line":51,"column":45,"index":1898},"line":51,"code":"  it(\"Rename Form widget from Entity Explorer\", function () {\n    cy.GlobalSearchEntity(\"Form1\");\n    cy.RenameEntity(\"Form\");\n    cy.wait(1000);\n    cy.get(\".t--entity\").should(\"contain\", \"Form\");\n  }); //it(\"Form Widget Functionality\", function() {","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Form/FormWidget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Form Widget Functionality To Verify The Colour","suites":["Form Widget Functionality"],"updatePoint":{"line":93,"column":52,"index":3235},"line":93,"code":"  it(\"Form Widget Functionality To Verify The Colour\", function () {\n    cy.PublishtheApp();\n    cy.get(formWidgetsPage.formD).should(\"have.css\", \"background-color\").and(\"eq\", \"rgb(128, 128, 128)\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Form/FormWidget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Form Widget Functionality To Unchecked Visible Widget","suites":["Form Widget Functionality"],"updatePoint":{"line":97,"column":59,"index":3447},"line":97,"code":"  it(\"Form Widget Functionality To Unchecked Visible Widget\", function () {\n    cy.openPropertyPane(\"formwidget\"); // Uncheck the visble JS\n\n    cy.togglebarDisable(commonlocators.visibleCheckbox);\n    cy.PublishtheApp(); // Verify the unchecked visible JS\n\n    cy.get(publish.formWidget).should(\"not.exist\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Form/FormWidget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Form Widget Functionality To Check Visible Widget","suites":["Form Widget Functionality"],"updatePoint":{"line":106,"column":55,"index":3801},"line":106,"code":"  it(\"Form Widget Functionality To Check Visible Widget\", function () {\n    // Open property pone\n    cy.openPropertyPane(\"formwidget\"); // Check the visible JS\n\n    cy.togglebar(commonlocators.visibleCheckbox);\n    cy.PublishtheApp(); // Verify the Checked Visible JS\n\n    cy.get(publish.formWidget).should(\"be.visible\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Form/FormWidget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Toggle JS - Form-Unckeck Visible field Validation","suites":["Form Widget Functionality"],"updatePoint":{"line":116,"column":55,"index":4172},"line":116,"code":"  it(\"Toggle JS - Form-Unckeck Visible field Validation\", function () {\n    cy.openPropertyPane(\"formwidget\"); //Uncheck the disabled checkbox using JS and validate\n\n    cy.get(widgetsPage.toggleVisible).click({\n      force: true\n    });\n    cy.testJsontext(\"visible\", \"false\");\n    cy.PublishtheApp();\n    cy.get(publish.formWidget).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Form/FormWidget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Toggle JS - Form-Check Visible field Validation","suites":["Form Widget Functionality"],"updatePoint":{"line":126,"column":53,"index":4531},"line":126,"code":"  it(\"Toggle JS - Form-Check Visible field Validation\", function () {\n    cy.openPropertyPane(\"formwidget\"); //Check the disabled checkbox using JS and Validate\n\n    cy.testJsontext(\"visible\", \"true\");\n    cy.PublishtheApp();\n    cy.get(publish.formWidget).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Form/FormWidget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Form-Copy Verification","suites":["Form Widget Functionality"],"updatePoint":{"line":133,"column":28,"index":4791},"line":133,"code":"  it(\"Form-Copy Verification\", function () {\n    cy.openPropertyPane(\"formwidget\");\n    const modifierKey = Cypress.platform === \"darwin\" ? \"meta\" : \"ctrl\"; //Copy Form and verify all properties\n\n    cy.copyWidget(\"formwidget\", widgetsPage.formWidget);\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Form/FormWidget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"RichTextEditor required functionality","suites":["RichTextEditor Widget Functionality in Form"],"updatePoint":{"line":15,"column":43,"index":479},"line":15,"code":"  it(\"RichTextEditor required functionality\", function () {\n    //changing the Text Name\n    cy.widgetText(this.data.RichTextEditorName, formWidgetsPage.richTextEditorWidget, formWidgetsPage.richTextEditorWidget + \" \" + commonlocators.widgetNameTag); //Validate Html\n\n    cy.validateHTMLText(formWidgetsPage.richTextEditorWidget, \"h1\", \"Default\"); //   Make RTE Required\n\n    cy.CheckWidgetProperties(formWidgetsPage.requiredJs);\n    const widgetId = \"tcayiqdf7f\"; //   Clear the input\n\n    cy.testJsontext(\"defaulttext\", \"\");\n    cy.wait(500);\n    cy.get(formWidgetsPage.richTextEditorWidget + \" div[data-testid='rte-container'] > div\").should(\"have.css\", \"border\", \"1px solid rgb(242, 43, 43)\");\n    cy.get(\".t--draggable-formbuttonwidget button\").should(\"be.disabled\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Form/FormWidget_With_RichTextEditor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Switch Widget Functionality check with success message","suites":["Switch Widget within Form widget Functionality"],"updatePoint":{"line":13,"column":60,"index":473},"line":13,"code":"  it(\"Switch Widget Functionality check with success message\", function () {\n    //Open switch widget\n    cy.openPropertyPane(\"switchwidget\"); // Change name of switch widget\n\n    cy.widgetText(\"Toggler\", formWidgetsPage.switchWidget, widgetsPage.switchInput); // Change the widget label name\n\n    cy.testCodeMirror(this.data.switchInputName); // Verify widget label name is verified\n\n    cy.get(widgetsPage.switchLabel).should(\"have.text\", \"Switch1\"); // Check the toggler button\n\n    cy.togglebar(widgetsPage.defaultcheck); // Type in message field and verify\n\n    cy.getAlert(commonlocators.optionchangetextSwitch);\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Form/FormWithSwitch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Form reset button valdiation with switch widget","suites":["Switch Widget within Form widget Functionality"],"updatePoint":{"line":28,"column":53,"index":1119},"line":28,"code":"  it(\"Form reset button valdiation with switch widget\", function () {\n    // Open form button\n    cy.SearchEntityandOpen(\"FormButton2\"); // Click on reset widget action\n\n    cy.get(widgetsPage.actionSelect).click();\n    cy.get(commonlocators.chooseAction).children().contains(\"Reset widget\").click(); // click on toggler from actions\n\n    cy.get(widgetsPage.selectWidget).click({\n      force: true\n    });\n    cy.get(commonlocators.chooseAction).children().contains(\"Toggler\").click();\n    cy.closePropertyPane(); // Uncheck the switch\n\n    cy.get(widgetsPage.switchWidget).click(); // Verify the message\n\n    cy.get(widgetsPage.toastMsg).last().invoke(\"text\").then(text => {\n      const toasttext = text;\n      cy.log(toasttext);\n      expect(text.trim()).to.equal(toasttext.trim());\n    }); // Verify Unchecked switch is visible\n\n    cy.get(widgetsPage.switchWidgetInactive).should(\"be.visible\"); // Click on reset button\n\n    cy.get(\"Button:contains('Reset')\").click({\n      force: true\n    }); // Verify switch is on and visible\n\n    cy.get(widgetsPage.switchWidgetActive).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Form/FormWithSwitch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Tests Iframe post message props correctly exposed or not","suites":["Iframe Widget functionality"],"updatePoint":{"line":17,"column":62,"index":609},"line":17,"code":"  it(\"Tests Iframe post message props correctly exposed or not\", () => {\n    cy.wait(3000);\n    getIframeBody().find(\"button\").should(\"have.text\", \"Click me\").click();\n    cy.wait(1000);\n    cy.get(\".t--draggable-textwidget .bp3-ui-text span\").should(\"contain.text\", `{\"lastEventId\":\"\",\"origin\":\"https://dev.appsmith.com\",\"ports\":[]}`);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Iframe_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Image Widget Functionality Base64 validation","suites":["Image Widget Functionality with base64"],"updatePoint":{"line":9,"column":50,"index":306},"line":9,"code":"  it(\"Image Widget Functionality Base64 validation\", function () {\n    cy.openPropertyPane(\"imagewidget\");\n    /**\n     * Test for Base64 encoded image\n     */\n\n    cy.testJsontext(\"image\", this.data.base64image.withoutPrefix);\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.EvaluateCurrentValue(this.data.base64image.withPrefix);\n    cy.get(viewWidgetsPage.imageinner).invoke(\"attr\", \"src\").should(\"contain\", this.data.base64image.withPrefix);\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Image/Image_base64_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Image Widget Functionality","suites":["Image Widget Functionality"],"updatePoint":{"line":13,"column":32,"index":435},"line":13,"code":"  it(\"Image Widget Functionality\", function () {\n    cy.openPropertyPane(\"imagewidget\");\n    /**\n     * @param{Text} Random Text\n     * @param{ImageWidget}Mouseover\n     * @param{ImagePre Css} Assertion\n     */\n\n    cy.widgetText(\"img\", viewWidgetsPage.imageWidget, viewWidgetsPage.imagecontainer);\n    cy.testJsontext(\"defaultimage\", this.data.defaultimage);\n    cy.wait(1000);\n    /**\n     * @param{URL} ImageUrl\n     */\n\n    cy.testCodeMirror(this.data.NewImage);\n    cy.get(viewWidgetsPage.imageinner).invoke(\"attr\", \"src\").should(\"contain\", this.data.validateImage);\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Image/Image_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"No Zoom functionality check","suites":["Image Widget Functionality"],"updatePoint":{"line":32,"column":33,"index":1042},"line":32,"code":"  it(\"No Zoom functionality check\", function () {\n    cy.openPropertyPane(\"imagewidget\"); //Zoom validation\n\n    cy.changeZoomLevel(\"1x (No Zoom)\");\n    cy.get(commonlocators.imgWidget).invoke(\"attr\", \"style\").should(\"not.contain\", \"zoom-in\");\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Image/Image_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Image Widget Functionality To Validate Image","suites":["Image Widget Functionality"],"updatePoint":{"line":39,"column":50,"index":1333},"line":39,"code":"  it(\"Image Widget Functionality To Validate Image\", function () {\n    cy.get(publish.imageWidget + \" \" + \"img\").invoke(\"attr\", \"src\").should(\"contain\", this.data.NewImage);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Image/Image_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Image Widget Functionality To Unchecked Visible Widget","suites":["Image Widget Functionality"],"updatePoint":{"line":42,"column":60,"index":1523},"line":42,"code":"  it(\"Image Widget Functionality To Unchecked Visible Widget\", function () {\n    cy.get(publish.backToEditor).click();\n    cy.openPropertyPane(\"imagewidget\");\n    cy.togglebarDisable(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.imageWidget).should(\"not.exist\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Image/Image_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Image Widget Functionality To Check Visible Widget","suites":["Image Widget Functionality"],"updatePoint":{"line":50,"column":56,"index":1860},"line":50,"code":"  it(\"Image Widget Functionality To Check Visible Widget\", function () {\n    cy.openPropertyPane(\"imagewidget\");\n    cy.togglebar(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.imageWidget).should(\"be.visible\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Image/Image_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Image Widget Functionality To check download option and validate image link","suites":["Image Widget Functionality"],"updatePoint":{"line":57,"column":81,"index":2174},"line":57,"code":"  it(\"Image Widget Functionality To check download option and validate image link\", function () {\n    cy.openPropertyPane(\"imagewidget\");\n    cy.togglebar(\".t--property-control-enabledownload input[type='checkbox']\");\n    cy.get(publish.imageWidget).trigger(\"mouseover\");\n    cy.get(`${publish.imageWidget} a[data-cy=t--image-download]`).should(\"have.attr\", \"href\", this.data.NewImage);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Image/Image_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"In case of an image loading error, show off the error message","suites":["Image Widget Functionality"],"updatePoint":{"line":63,"column":67,"index":2553},"line":63,"code":"  it(\"In case of an image loading error, show off the error message\", () => {\n    cy.openPropertyPane(\"imagewidget\"); // Invalid image url\n\n    const invalidImageUrl = \"https://www.example.com/does-not-exist.jpg\";\n    cy.testCodeMirror(invalidImageUrl); // Show off error message\n\n    cy.get(`${viewWidgetsPage.imageWidget} div[data-testid=styledImage]`).should(\"not.exist\");\n    cy.get(`${viewWidgetsPage.imageWidget} [data-testid=\"error-container\"]`).contains(\"Unable to display the image\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Image/Image_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check default image src","suites":["Image Widget Validation Image Urls"],"updatePoint":{"line":9,"column":29,"index":283},"line":9,"code":"  it(\"Check default image src\", function () {\n    cy.openPropertyPane(\"imagewidget\");\n    cy.get(viewWidgetsPage.imageinner).invoke(\"attr\", \"src\").should(\"contain\", \"https://res.cloudinary.com/drako999/image/upload/v1589196259/default.png\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Image/Image_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Add new image and check image is showing instead of default image","suites":["Image Widget Validation Image Urls"],"updatePoint":{"line":13,"column":71,"index":573},"line":13,"code":"  it(\"Add new image and check image is showing instead of default image\", function () {\n    cy.testCodeMirror(this.data.NewImage);\n    cy.get(viewWidgetsPage.imageinner).invoke(\"attr\", \"src\").should(\"contain\", this.data.NewImage);\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Image/Image_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Remove both images and check empty screen","suites":["Image Widget Validation Image Urls"],"updatePoint":{"line":18,"column":47,"index":814},"line":18,"code":"  it(\"Remove both images and check empty screen\", function () {\n    cy.openPropertyPane(\"imagewidget\");\n    cy.clearPropertyValue(0);\n    cy.clearPropertyValue(1);\n    cy.get(`${viewWidgetsPage.imageWidget} div[data-testid=error-container]`).should(\"not.exist\");\n    cy.get(`${viewWidgetsPage.imageWidget} div[data-testid=styledImage]`).should(\"exist\");\n    cy.get(viewWidgetsPage.imageinner).invoke(\"attr\", \"src\").should(\"contain\", \"\");\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Image/Image_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Add new image and check image src","suites":["Image Widget Validation Image Urls"],"updatePoint":{"line":27,"column":39,"index":1278},"line":27,"code":"  it(\"Add new image and check image src\", function () {\n    cy.openPropertyPane(\"imagewidget\");\n    cy.clearPropertyValue(0);\n    cy.testCodeMirror(this.data.NewImage); // if imageError flag not reset properly, this test will fail.\n\n    cy.get(viewWidgetsPage.imageinner).invoke(\"attr\", \"src\").should(\"contain\", this.data.NewImage); // error container doesn't exist\n\n    cy.get(`${viewWidgetsPage.imageWidget} div[data-testid=error-container]`).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Image/Image_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Text Input maxChar shows error if defaultText longer","suites":["Input Widget Max Char Functionality"],"updatePoint":{"line":11,"column":58,"index":388},"line":11,"code":"  it(\"Text Input maxChar shows error if defaultText longer\", () => {\n    cy.get(widgetsPage.innertext).click();\n    cy.get(\".bp3-popover-content\").should($x => {\n      expect($x).contain(\"Default text length must be less than 5 characters\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Input/Input_MaxChar_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Text Input maxChar shows error if inputText longer than maxChar","suites":["Input Widget Max Char Functionality"],"updatePoint":{"line":17,"column":69,"index":655},"line":17,"code":"  it(\"Text Input maxChar shows error if inputText longer than maxChar\", () => {\n    cy.openPropertyPane(\"inputwidgetv2\");\n    cy.clearComputedValueFirst();\n    cy.testJsontext(\"defaulttext\", \"\");\n    cy.closePropertyPane(\"inputwidgetv2\");\n    cy.get(widgetsPage.innertext).click({\n      force: true\n    }).type(\"1234567\");\n    cy.openPropertyPane(\"inputwidgetv2\");\n    cy.updateComputedValue(3);\n    cy.closePropertyPane(\"inputwidgetv2\");\n    cy.get(widgetsPage.innertext).click();\n    cy.wait(1000);\n    cy.get(\".bp3-popover-content\").should($x => {\n      expect($x).contain(\"Input text length must be less than 3 characters\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Input/Input_MaxChar_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Number Input will not show error for maxChar validation","suites":["Input Widget Max Char Functionality"],"updatePoint":{"line":34,"column":61,"index":1290},"line":34,"code":"  it(\"Number Input will not show error for maxChar validation\", () => {\n    cy.openPropertyPane(\"inputwidgetv2\");\n    cy.selectDropdownValue(commonlocators.dataType, \"Number\");\n    cy.get(\".bp3-popover-content\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Input/Input_MaxChar_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Input Widget Functionality","suites":["Input Widget Functionality"],"updatePoint":{"line":31,"column":32,"index":1229},"line":31,"code":"  it(\"Input Widget Functionality\", function () {\n    cy.openPropertyPane(\"inputwidgetv2\");\n    /**\n     * @param{Text} Random Text\n     * @param{InputWidget}Mouseover\n     * @param{InputPre Css} Assertion\n     */\n\n    cy.widgetText(\"day\", widgetsPage.inputWidget, widgetsPage.inputval);\n    cy.get(widgetsPage.datatype).last().click({\n      force: true\n    }).children().contains(\"Text\").click({\n      force: true\n    });\n    cy.get(widgetsPage.innertext).click({\n      force: true\n    }).type(this.data.para);\n    cy.get(widgetsPage.inputWidget + \" \" + \"input\").invoke(\"attr\", \"value\").should(\"contain\", this.data.para); //cy.openPropertyPane(\"inputwidgetv2\");\n\n    cy.testJsontext(\"defaulttext\", this.data.defaultdata);\n    cy.get(widgetsPage.inputWidget + \" \" + \"input\").invoke(\"attr\", \"value\").should(\"contain\", this.data.defaultdata);\n    cy.testJsontext(\"placeholder\", this.data.placeholder);\n    /**\n     * @param{Widget} Widget InnerCss\n     */\n\n    cy.get(widgetsPage.innertext).invoke(\"attr\", \"placeholder\").should(\"contain\", this.data.placeholder);\n    cy.testJsontext(\"regex\", this.data.regex);\n    /**\n     * @param{Show Alert} Css for InputChange\n     */\n\n    cy.getAlert(commonlocators.optionchangetextInput, widgetsPage.inputOnTextChange);\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Input/Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Input Widget Functionality To Validate Default Text and Placeholder","suites":["Input Widget Functionality"],"updatePoint":{"line":66,"column":73,"index":2556},"line":66,"code":"  it(\"Input Widget Functionality To Validate Default Text and Placeholder\", function () {\n    cy.get(publish.inputWidget + \" \" + \"input\").invoke(\"attr\", \"value\").should(\"contain\", this.data.defaultdata);\n    cy.get(publish.inputWidget + \" \" + \"input\").invoke(\"attr\", \"placeholder\").should(\"contain\", this.data.placeholder);\n    cy.get(publish.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Input/Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"isSpellCheck: true","suites":["Input Widget Functionality"],"updatePoint":{"line":73,"column":24,"index":2904},"line":73,"code":"  it(\"isSpellCheck: true\", function () {\n    cy.openPropertyPane(\"inputwidgetv2\");\n    cy.togglebar(commonlocators.spellCheck + \" \" + \"input\");\n    cy.PublishtheApp();\n    cy.get(publish.inputWidget + \" \" + \"input\").invoke(\"attr\", \"spellcheck\").should(\"eq\", \"true\");\n    cy.get(publish.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Input/Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"isSpellCheck: false","suites":["Input Widget Functionality"],"updatePoint":{"line":82,"column":25,"index":3245},"line":82,"code":"  it(\"isSpellCheck: false\", function () {\n    cy.openPropertyPane(\"inputwidgetv2\");\n    cy.togglebarDisable(commonlocators.spellCheck + \" \" + \"input\");\n    cy.PublishtheApp();\n    cy.get(publish.inputWidget + \" \" + \"input\").invoke(\"attr\", \"spellcheck\").should(\"eq\", \"false\");\n    cy.get(publish.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Input/Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Input Widget Functionality To Check Disabled Widget","suites":["Input Widget Functionality"],"updatePoint":{"line":91,"column":57,"index":3626},"line":91,"code":"  it(\"Input Widget Functionality To Check Disabled Widget\", function () {\n    cy.openPropertyPane(\"inputwidgetv2\");\n    cy.togglebar(commonlocators.Disablejs + \" \" + \"input\");\n    cy.PublishtheApp();\n    cy.get(publish.inputWidget + \" \" + \"input\").should(\"be.disabled\");\n    cy.get(publish.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Input/Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Input Widget Functionality To Check Enabled Widget","suites":["Input Widget Functionality"],"updatePoint":{"line":100,"column":56,"index":3969},"line":100,"code":"  it(\"Input Widget Functionality To Check Enabled Widget\", function () {\n    cy.openPropertyPane(\"inputwidgetv2\");\n    cy.togglebarDisable(commonlocators.Disablejs + \" \" + \"input\");\n    cy.PublishtheApp();\n    cy.get(publish.inputWidget + \" \" + \"input\").should(\"be.enabled\");\n    cy.get(publish.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Input/Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Input Functionality To Unchecked Visible Widget","suites":["Input Widget Functionality"],"updatePoint":{"line":109,"column":53,"index":4315},"line":109,"code":"  it(\"Input Functionality To Unchecked Visible Widget\", function () {\n    cy.openPropertyPane(\"inputwidgetv2\");\n    cy.togglebarDisable(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.inputWidget + \" \" + \"input\").should(\"not.exist\");\n    cy.get(publish.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Input/Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Input Functionality To Check Visible Widget","suites":["Input Widget Functionality"],"updatePoint":{"line":118,"column":49,"index":4646},"line":118,"code":"  it(\"Input Functionality To Check Visible Widget\", function () {\n    cy.openPropertyPane(\"inputwidgetv2\");\n    cy.togglebar(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.inputWidget + \" \" + \"input\").should(\"be.visible\");\n    cy.get(publish.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Input/Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Input Functionality To check number input type with custom regex","suites":["Input Widget Functionality"],"updatePoint":{"line":127,"column":70,"index":4992},"line":127,"code":"  it(\"Input Functionality To check number input type with custom regex\", function () {\n    cy.openPropertyPane(\"inputwidgetv2\");\n    cy.get(commonlocators.dataType).last().click({\n      force: true\n    });\n    /*cy.get(\n      `${commonlocators.dataType} .single-select:contains(\"Number\")`,\n    ).click();*/\n\n    cy.get(\".t--dropdown-option\").children().contains(\"Number\").click({\n      force: true\n    });\n    cy.testJsontext(\"regex\", \"^s*(?=.*[1-9])d*(?:.d{1,2})?s*$\");\n    cy.get(widgetsPage.innertext).click().clear().type(\"1.255\");\n    cy.get(\".bp3-popover-content\").should($x => {\n      expect($x).contain(\"Invalid input\");\n    });\n    cy.get(widgetsPage.innertext).click({\n      force: true\n    }).clear();\n    cy.closePropertyPane(\"inputwidgetv2\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Input/Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Input label wrapper do not show if lable and tooltip is empty","suites":["Input Widget Functionality"],"updatePoint":{"line":149,"column":67,"index":5751},"line":149,"code":"  it(\"Input label wrapper do not show if lable and tooltip is empty\", () => {\n    cy.get(\"[data-cy='label-container']\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Input/Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Input label renders if label prop is not empty","suites":["Input Widget Functionality"],"updatePoint":{"line":152,"column":52,"index":5883},"line":152,"code":"  it(\"Input label renders if label prop is not empty\", () => {\n    cy.openPropertyPane(\"inputwidgetv2\"); // enter label in property pan\n\n    cy.get(widgetsPage.inputTextControl).type(\"Label1\"); // test if label shows up with correct text\n\n    cy.get(\".t--input-widget-label\").contains(\"Label1\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Input/Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Input tooltip renders if tooltip prop is not empty","suites":["Input Widget Functionality"],"updatePoint":{"line":159,"column":56,"index":6189},"line":159,"code":"  it(\"Input tooltip renders if tooltip prop is not empty\", () => {\n    cy.openPropertyPane(\"inputwidgetv2\"); // enter tooltip in property pan\n\n    cy.get(widgetsPage.inputTooltipControl).type(\"Helpfull text for input\"); // tooltip help icon shows\n\n    cy.get(\".t--input-widget-tooltip\").should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Input/Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Input icon shows on icon select","suites":["Input Widget Functionality"],"updatePoint":{"line":166,"column":37,"index":6485},"line":166,"code":"  it(\"Input icon shows on icon select\", () => {\n    cy.selectDropdownValue(commonlocators.dataType, \"Text\");\n    cy.get(\".t--property-control-icon .bp3-icon-caret-down\").click({\n      force: true\n    });\n    cy.get(\".bp3-icon-add\").first().click({\n      force: true\n    });\n    cy.get(\".bp3-input-group .bp3-icon-add\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Input/Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Input value of number type should reflect the default text value 0","suites":["Input Widget Functionality"],"updatePoint":{"line":176,"column":72,"index":6862},"line":176,"code":"  it(\"Input value of number type should reflect the default text value 0\", () => {\n    cy.selectDropdownValue(commonlocators.dataType, \"Number\");\n    /*cy.get(widgetsPage.defaultInput)\n      .click({ force: true })\n      .type(\"0\");*/\n\n    cy.testJsontext(\"defaulttext\", \"0\");\n    cy.closePropertyPane(\"inputwidgetv2\");\n    cy.get(widgetsPage.innertext).invoke(\"val\").then(text => {\n      expect(text).to.equal(\"0\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Input/Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Validate input widget resets OnSubmit","suites":["Input widget V2 - "],"updatePoint":{"line":9,"column":46,"index":300},"line":9,"code":"  it(\"1. Validate input widget resets OnSubmit\", () => {\n    cy.openPropertyPane(widgetName);\n    cy.get(\".t--property-control-onsubmit .t--open-dropdown-Select-Action\").click();\n    cy.selectShowMsg();\n    cy.addSuccessMessage(\"Submitted!!\");\n    cy.get(widgetInput).clear({\n      force: true\n    });\n    cy.wait(300);\n    cy.get(widgetInput).type(\"test{enter}\"); //Clicking enter submits the form here\n\n    cy.wait(300);\n    cy.get(widgetInput).should(\"contain.value\", \"\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Input/Inputv2_inside_List_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Validate DataType - TEXT can be entered into Input widget","suites":["Input widget V2 - "],"updatePoint":{"line":23,"column":66,"index":802},"line":23,"code":"  it(\"2. Validate DataType - TEXT can be entered into Input widget\", () => {\n    [{\n      input: \"test\",\n      expected: \"test:true:false\"\n    }, {\n      input: \"test123\",\n      expected: \"test123:true:false\"\n    }, {\n      input: \"123\",\n      expected: \"123:true:false\"\n    }, {\n      input: \"\",\n      expected: \":true:false\"\n    }, {\n      input: \"$100.22\",\n      expected: \"$100.22:true:false\"\n    }, {\n      input: \"test@appsmith.com\",\n      expected: \"test@appsmith.com:true:false\"\n    }].forEach(({\n      expected,\n      input\n    }) => enterAndTest(input, expected));\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Input/Inputv2_inside_List_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Validate DataType - NUMBER can be entered into Input widget","suites":["Input widget V2 - "],"updatePoint":{"line":47,"column":68,"index":1385},"line":47,"code":"  it(\"3. Validate DataType - NUMBER can be entered into Input widget\", () => {\n    cy.openPropertyPane(widgetName);\n    cy.selectDropdownValue(\".t--property-control-datatype\", \"Number\");\n    cy.get(\".t--property-control-required label\").last().click({\n      force: true\n    });\n    cy.selectDropdownValue(\".t--property-control-datatype\", \"Number\");\n    [{\n      input: \"invalid\",\n      expected: \"null:true:false\"\n    }, {\n      input: \"invalid123\",\n      expected: \"123:true:false\"\n    }, {\n      input: \"123\",\n      expected: \"123:true:false\"\n    }, {\n      input: \"-\",\n      expected: \"null:true:false\"\n    }, {\n      input: \"\",\n      expected: \"null:true:false\"\n    }, {\n      input: \"$100.22\",\n      expected: \"100.22:true:false\"\n    }, {\n      input: \"invalid@appsmith.com\",\n      expected: \"null:true:false\"\n    }, {\n      input: \"1.001\",\n      expected: \"1.001:true:false\"\n    }, {\n      input: \"1.1.\",\n      expected: \"null:true:false\"\n    }].forEach(({\n      expected,\n      input\n    }) => enterAndTest(input, expected));\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Input/Inputv2_inside_List_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Validate DataType - PASSWORD can be entered into Input widget","suites":["Input widget V2 - "],"updatePoint":{"line":86,"column":70,"index":2426},"line":86,"code":"  it(\"4. Validate DataType - PASSWORD can be entered into Input widget\", () => {\n    cy.openPropertyPane(widgetName);\n    cy.selectDropdownValue(\".t--property-control-datatype\", \"Password\");\n    [{\n      input: \"test\",\n      expected: \"test:true:false\"\n    }, {\n      input: \"test123\",\n      expected: \"test123:true:false\"\n    }, {\n      input: \"123\",\n      expected: \"123:true:false\"\n    }, {\n      input: \"-\",\n      expected: \"-:true:false\"\n    }, {\n      input: \"\",\n      expected: \":true:false\"\n    }, {\n      input: \"$100.22\",\n      expected: \"$100.22:true:false\"\n    }, {\n      input: \"test@appsmith.com\",\n      expected: \"test@appsmith.com:true:false\"\n    }].forEach(({\n      expected,\n      input\n    }) => enterAndTest(input, expected));\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Input/Inputv2_inside_List_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Validate DataType - EMAIL can be entered into Input widget","suites":["Input widget V2 - "],"updatePoint":{"line":115,"column":67,"index":3176},"line":115,"code":"  it(\"5. Validate DataType - EMAIL can be entered into Input widget\", () => {\n    cy.openPropertyPane(widgetName);\n    cy.selectDropdownValue(\".t--property-control-datatype\", \"Email\");\n    cy.get(\".t--property-control-required label\").last().click({\n      force: true\n    });\n    [{\n      input: \"test\",\n      expected: \"test:true:false\"\n    }, {\n      input: \"test123\",\n      expected: \"test123:true:false\"\n    }, {\n      input: \"123\",\n      expected: \"123:true:false\"\n    }, {\n      input: \"-\",\n      expected: \"-:true:false\"\n    }, {\n      input: \"\",\n      expected: \":true:false\"\n    }, {\n      input: \"$100.22\",\n      expected: \"$100.22:true:false\"\n    }, {\n      input: \"test@appsmith.com\",\n      expected: \"test@appsmith.com:true:false\"\n    }].forEach(({\n      expected,\n      input\n    }) => enterAndTest(input, expected));\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Input/Inputv2_inside_List_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. DragDrop Input & Label/Text widgets","suites":["Input widget V2 - "],"updatePoint":{"line":6,"column":44,"index":250},"line":6,"code":"  it(\"1. DragDrop Input & Label/Text widgets\", () => {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(widgetName, {\n      x: 300,\n      y: 300\n    });\n    cy.get(`.t--widget-${widgetName}`).should(\"exist\");\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 300,\n      y: 500\n    });\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{Input1.text}}:{{Input1.value}}:{{Input1.isValid}}`);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Input/Inputv2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Validate input widget resets OnSubmit","suites":["Input widget V2 - "],"updatePoint":{"line":20,"column":46,"index":710},"line":20,"code":"  it(\"2. Validate input widget resets OnSubmit\", () => {\n    cy.openPropertyPane(widgetName);\n    cy.get(\".t--property-control-onsubmit .t--open-dropdown-Select-Action\").click();\n    cy.selectShowMsg();\n    cy.addSuccessMessage(\"Submitted!!\", \".t--property-control-onsubmit\");\n    cy.get(widgetInput).clear();\n    cy.wait(300);\n    cy.get(widgetInput).type(\"test{enter}\"); //Clicking enter submits the form here\n\n    cy.wait(300);\n    cy.get(widgetInput).should(\"contain.value\", \"\");\n    cy.selectDropdownValue(\".t--property-control-datatype\", \"Number\");\n    cy.get(widgetInput).clear();\n    cy.get(widgetInput).type(\"1.0010{enter}\"); //Clicking enter submits the form here\n\n    cy.wait(300);\n    cy.get(widgetInput).should(\"contain.value\", \"\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Input/Inputv2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Validate DataType - TEXT can be entered into Input widget","suites":["Input widget V2 - "],"updatePoint":{"line":38,"column":66,"index":1482},"line":38,"code":"  it(\"3. Validate DataType - TEXT can be entered into Input widget\", () => {\n    cy.selectDropdownValue(\".t--property-control-datatype\", \"Text\");\n    [{\n      input: \"test\",\n      expected: \"test:test:true\"\n    }, {\n      input: \"test123\",\n      expected: \"test123:test123:true\"\n    }, {\n      input: \"123\",\n      expected: \"123:123:true\"\n    }, {\n      input: \"\",\n      expected: \"::true\"\n    }, {\n      input: \"$100.22\",\n      expected: \"$100.22:$100.22:true\"\n    }, {\n      input: \"test@appsmith.com\",\n      expected: \"test@appsmith.com:test@appsmith.com:true\"\n    }].forEach(({\n      expected,\n      input\n    }) => enterAndTest(input, expected));\n    cy.openPropertyPane(widgetName); //required: on\n\n    cy.get(\".t--property-control-required label\").last().click({\n      force: true\n    });\n    [{\n      input: \"test\",\n      expected: \"test:test:true\"\n    }, {\n      input: \"test123\",\n      expected: \"test123:test123:true\"\n    }, {\n      input: \"123\",\n      expected: \"123:123:true\"\n    }, {\n      input: \"-\",\n      expected: \"-:-:true\"\n    }, {\n      input: \"\",\n      expected: \"::false\"\n    }, {\n      input: \"$100.22\",\n      expected: \"$100.22:$100.22:true\"\n    }, {\n      input: \"test@appsmith.com\",\n      expected: \"test@appsmith.com:test@appsmith.com:true\"\n    }, {\n      input: \"\",\n      expected: \"::false\"\n    }].forEach(({\n      expected,\n      input\n    }) => enterAndTest(input, expected));\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Input/Inputv2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Validate DataType - NUMBER can be entered into Input widget","suites":["Input widget V2 - "],"updatePoint":{"line":96,"column":68,"index":2899},"line":96,"code":"  it(\"4. Validate DataType - NUMBER can be entered into Input widget\", () => {\n    cy.openPropertyPane(widgetName);\n    cy.selectDropdownValue(\".t--property-control-datatype\", \"Number\");\n    [{\n      input: \"invalid\",\n      expected: \"null:null:false\"\n    }, {\n      input: \"invalid123\",\n      expected: \"123:123:true\"\n    }, {\n      input: \"123\",\n      expected: \"123:123:true\"\n    }, {\n      input: \"-\",\n      expected: \"null:null:false\"\n    }, {\n      input: \"\",\n      expected: \"null:null:false\"\n    }, {\n      input: \"$100.22\",\n      expected: \"100.22:100.22:true\"\n    }, {\n      input: \"invalid@appsmith.com\",\n      expected: \"null:null:false\"\n    }, {\n      input: \"1.001\",\n      expected: \"1.001:1.001:true\"\n    }, {\n      input: \"1.1.\",\n      expected: \"null:null:false\"\n    }].forEach(({\n      expected,\n      input\n    }) => enterAndTest(input, expected)); //required: off\n\n    cy.get(\".t--property-control-required label\").last().click({\n      force: true\n    });\n    cy.selectDropdownValue(\".t--property-control-datatype\", \"Number\");\n    [{\n      input: \"invalid\",\n      expected: \"null:null:true\"\n    }, {\n      input: \"invalid123\",\n      expected: \"123:123:true\"\n    }, {\n      input: \"123\",\n      expected: \"123:123:true\"\n    }, {\n      input: \"-\",\n      expected: \"null:null:false\"\n    }, {\n      input: \"\",\n      expected: \"null:null:true\"\n    }, {\n      input: \"$100.22\",\n      expected: \"100.22:100.22:true\"\n    }, {\n      input: \"invalid@appsmith.com\",\n      expected: \"null:null:false\"\n    }, {\n      input: \"1.001\",\n      expected: \"1.001:1.001:true\"\n    }, {\n      input: \"1.1.\",\n      expected: \"null:null:false\"\n    }].forEach(({\n      expected,\n      input\n    }) => enterAndTest(input, expected));\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Input/Inputv2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Validate DataType - PASSWORD can be entered into Input widget","suites":["Input widget V2 - "],"updatePoint":{"line":167,"column":70,"index":4633},"line":167,"code":"  it(\"5. Validate DataType - PASSWORD can be entered into Input widget\", () => {\n    cy.openPropertyPane(widgetName);\n    cy.selectDropdownValue(\".t--property-control-datatype\", \"Password\");\n    [{\n      input: \"test\",\n      expected: \"test:test:true\"\n    }, {\n      input: \"test123\",\n      expected: \"test123:test123:true\"\n    }, {\n      input: \"123\",\n      expected: \"123:123:true\"\n    }, {\n      input: \"-\",\n      expected: \"-:-:true\"\n    }, {\n      input: \"\",\n      expected: \"::true\"\n    }, {\n      input: \"$100.22\",\n      expected: \"$100.22:$100.22:true\"\n    }, {\n      input: \"test@appsmith.com\",\n      expected: \"test@appsmith.com:test@appsmith.com:true\"\n    }].forEach(({\n      expected,\n      input\n    }) => enterAndTest(input, expected)); //required: on\n\n    cy.get(\".t--property-control-required label\").last().click({\n      force: true\n    });\n    [{\n      input: \"test\",\n      expected: \"test:test:true\"\n    }, {\n      input: \"test123\",\n      expected: \"test123:test123:true\"\n    }, {\n      input: \"123\",\n      expected: \"123:123:true\"\n    }, {\n      input: \"-\",\n      expected: \"-:-:true\"\n    }, {\n      input: \"\",\n      expected: \"::false\"\n    }, {\n      input: \"$100.22\",\n      expected: \"$100.22:$100.22:true\"\n    }, {\n      input: \"test@appsmith.com\",\n      expected: \"test@appsmith.com:test@appsmith.com:true\"\n    }].forEach(({\n      expected,\n      input\n    }) => enterAndTest(input, expected));\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Input/Inputv2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Validate DataType - EMAIL can be entered into Input widget","suites":["Input widget V2 - "],"updatePoint":{"line":225,"column":67,"index":6055},"line":225,"code":"  it(\"6. Validate DataType - EMAIL can be entered into Input widget\", () => {\n    cy.openPropertyPane(widgetName);\n    cy.selectDropdownValue(\".t--property-control-datatype\", \"Email\");\n    [{\n      input: \"test\",\n      expected: \"test:test:false\"\n    }, {\n      input: \"test123\",\n      expected: \"test123:test123:false\"\n    }, {\n      input: \"123\",\n      expected: \"123:123:false\"\n    }, {\n      input: \"-\",\n      expected: \"-:-:false\"\n    }, {\n      input: \"\",\n      expected: \"::false\"\n    }, {\n      input: \"$100.22\",\n      expected: \"$100.22:$100.22:false\"\n    }, {\n      input: \"test@appsmith.com\",\n      expected: \"test@appsmith.com:test@appsmith.com:true\"\n    }].forEach(({\n      expected,\n      input\n    }) => enterAndTest(input, expected)); //required: off\n\n    cy.get(\".t--property-control-required label\").last().click({\n      force: true\n    });\n    [{\n      input: \"test\",\n      expected: \"test:test:false\"\n    }, {\n      input: \"test123\",\n      expected: \"test123:test123:false\"\n    }, {\n      input: \"123\",\n      expected: \"123:123:false\"\n    }, {\n      input: \"-\",\n      expected: \"-:-:false\"\n    }, {\n      input: \"\",\n      expected: \"::true\"\n    }, {\n      input: \"$100.22\",\n      expected: \"$100.22:$100.22:false\"\n    }, {\n      input: \"test@appsmith.com\",\n      expected: \"test@appsmith.com:test@appsmith.com:true\"\n    }].forEach(({\n      expected,\n      input\n    }) => enterAndTest(input, expected));\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Input/Inputv2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Validating other properties - Input validity with #valid","suites":["Input widget V2 - "],"updatePoint":{"line":283,"column":65,"index":7483},"line":283,"code":"  it(\"7. Validating other properties - Input validity with #valid\", () => {\n    cy.openPropertyPane(widgetName);\n    [[\"{{1 === 2}}\", \"false\"], [\"\", \"true\"], [\"{{1 === 1}}\", \"true\"], [\"\", \"true\"]].forEach(([input, expected]) => {\n      cy.updateCodeInput(\".t--property-control-valid\", input);\n      cy.wait(500);\n      cy.validateEvaluatedValue(expected);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Input/Inputv2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. onSubmit should be triggered with the whole input value","suites":["Input widget V2 - "],"updatePoint":{"line":291,"column":64,"index":7852},"line":291,"code":"  it(\"8. onSubmit should be triggered with the whole input value\", () => {\n    cy.openPropertyPane(widgetName);\n    cy.selectDropdownValue(\".t--property-control-datatype\", \"Text\");\n    cy.get(\".t--property-control-required label\").last().click({\n      force: true\n    }); // Set onSubmit action, storing value\n\n    cy.get(\".t--property-control-onsubmit\").find(\".t--js-toggle\").click();\n    cy.updateCodeInput(\".t--property-control-onsubmit\", \"{{storeValue('textPayloadOnSubmit',Input1.text)}}\"); // Bind to stored value above\n\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", \"{{appsmith.store.textPayloadOnSubmit}}\");\n    cy.assertPageSave();\n    cy.closePropertyPane();\n    cy.get(widgetInput).clear();\n    cy.wait(300); // Input text and hit enter key\n\n    cy.get(widgetInput).type(\"test{enter}\"); // Assert if the Text widget contains the whole value, test\n\n    cy.get(\".t--widget-textwidget\").should(\"have.text\", \"test\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Input/Inputv2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"9. changing default text should change text","suites":["Input widget V2 - "],"updatePoint":{"line":312,"column":49,"index":8812},"line":312,"code":"  it(\"9. changing default text should change text\", () => {\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{Input1.text}}:{{Input1.value}}:{{Input1.isValid}}`);\n    cy.openPropertyPane(widgetName);\n    cy.updateCodeInput(\".t--property-control-defaulttext\", `test`); // wait for evaluations\n\n    cy.wait(300);\n    cy.get(`.t--widget-${widgetName} input`).should(\"contain.value\", \"test\");\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"test:test:true\");\n    cy.updateCodeInput(\".t--property-control-defaulttext\", `anotherText`); // wait for evaluations\n\n    cy.wait(300);\n    cy.get(`.t--widget-${widgetName} input`).should(\"contain.value\", \"anotherText\");\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"anotherText:anotherText:true\");\n    cy.selectDropdownValue(\".t--property-control-datatype\", \"Number\");\n    cy.updateCodeInput(\".t--property-control-defaulttext\", `{{1}}`); // wait for evaluations\n\n    cy.wait(300);\n    cy.get(`.t--widget-${widgetName} input`).should(\"contain.value\", \"1\");\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"1:1:true\");\n    cy.updateCodeInput(\".t--property-control-defaulttext\", `{{1.00010000}}`); // wait for evaluations\n\n    cy.wait(300);\n    cy.get(`.t--widget-${widgetName} input`).should(\"contain.value\", \"1.0001\");\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"1.0001:1.0001:true\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Input/Inputv2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check isDirty meta property","suites":["Input widget V2 - "],"updatePoint":{"line":338,"column":33,"index":10201},"line":338,"code":"  it(\"Check isDirty meta property\", function () {\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{Input1.isDirty}}`); // Init isDirty\n\n    cy.openPropertyPane(widgetName);\n    cy.selectDropdownValue(\".t--property-control-datatype\", \"Text\");\n    cy.updateCodeInput(\".t--property-control-defaulttext\", \"a\"); // Check if initial value of isDirty is false\n\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\"); // Interact with UI\n\n    cy.get(widgetInput).clear();\n    cy.wait(300);\n    cy.get(widgetInput).type(\"b\");\n    cy.wait(300); // Check if isDirty is set to true\n\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"true\"); // Change defaultText\n\n    cy.openPropertyPane(widgetName);\n    cy.updateCodeInput(\".t--property-control-defaulttext\", \"c\"); // Check if isDirty is reset to false\n\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Input/Inputv2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"can remove default items when default value changes from undefined to an array","suites":["JSON Form Widget Array Field"],"updatePoint":{"line":12,"column":84,"index":633},"line":12,"code":"  it(\"can remove default items when default value changes from undefined to an array\", () => {\n    cy.addDsl(jsonFormDslWithSchemaAndWithoutSourceData);\n    const sourceData = {\n      name: \"John\",\n      age: 30,\n      dob: \"10/12/1992\",\n      migrant: false,\n      address: {\n        street: \"Koramangala\",\n        city: \"Bangalore\"\n      },\n      education: [{\n        college: \"MIT\",\n        year: \"20/10/2014\"\n      }]\n    };\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.testJsontext(\"sourcedata\", JSON.stringify(sourceData));\n    cy.closePropertyPane();\n    cy.get(`${education} ${addButton}`).click({\n      force: true\n    });\n    cy.get(`${education}-item`).should(\"have.length\", 2);\n    cy.get(`${education}-item`).within(() => {\n      cy.get(`${education}-1--college input`).type(\"Dummy college\");\n      cy.get(`${education}-1--year input`).type(\"10/08/2010\");\n    });\n    cy.get(`${education}-item.t--item-0`).find(deleteButton).click({\n      force: true\n    });\n    cy.get(`${education}-item`).should(\"have.length\", 1);\n    cy.get(`${education}-item`).within(() => {\n      cy.get(`${education}-0--college input`).should(\"have.value\", \"Dummy college\");\n      cy.get(`${education}-0--year input`).should(\"have.value\", \"10/08/2010\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_ArrayField_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"can add more items to the field","suites":["JSON Form Widget Array Field"],"updatePoint":{"line":48,"column":37,"index":1847},"line":48,"code":"  it(\"can add more items to the field\", () => {\n    cy.addDsl(dslWithSchema);\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.get(`${education}-item`).should(\"have.length\", 1).within(() => {\n      cy.get(`${education}-0--college input`).should(\"have.value\", \"MIT\");\n      cy.get(`${education}-0--year input`).should(\"have.value\", \"20/10/2014\");\n    });\n    cy.get(`${education} ${addButton}`).click({\n      force: true\n    });\n    cy.get(`${education}-item`).should(\"have.length\", 2).within(() => {\n      cy.get(`${education}-0--college input`).should(\"have.value\", \"MIT\");\n      cy.get(`${education}-0--year input`).should(\"have.value\", \"20/10/2014\");\n      cy.get(`${education}-1--college input`).should(\"have.value\", \"\");\n      cy.get(`${education}-1--year input`).should(\"have.value\", \"\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_ArrayField_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"can remove items from the field","suites":["JSON Form Widget Array Field"],"updatePoint":{"line":65,"column":37,"index":2657},"line":65,"code":"  it(\"can remove items from the field\", () => {\n    cy.get(`${education} ${addButton}`).click({\n      force: true\n    });\n    cy.get(`${education}-item`).should(\"have.length\", 3);\n    cy.get(`${education}-item`).within(() => {\n      cy.get(`${education}-1--college input`).type(\"Dummy college\");\n      cy.get(`${education}-1--year input`).type(\"10/08/2010\");\n    });\n    cy.get(commonlocators.canvas).click({\n      force: true\n    });\n    cy.get(`${education}-item`).within(() => {\n      cy.get(`${education}-2--college input`).type(\"Dummy college 2\");\n      cy.get(`${education}-2--year input`).type(\"01/01/2020\");\n    });\n    cy.get(commonlocators.canvas).click({\n      force: true\n    });\n    cy.get(`${education}-item.t--item-1`).find(deleteButton).click({\n      force: true\n    });\n    cy.get(`${education}-item`).should(\"have.length\", 2);\n    cy.get(`${education}-item`).within(() => {\n      cy.get(`${education}-1--college input`).should(\"have.value\", \"Dummy college 2\");\n      cy.get(`${education}-1--year input`).should(\"have.value\", \"01/01/2020\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_ArrayField_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"can change the visibility of the field","suites":["JSON Form Widget Array Field"],"updatePoint":{"line":93,"column":44,"index":3736},"line":93,"code":"  it(\"can change the visibility of the field\", () => {\n    cy.get(education).should(\"exist\");\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.openFieldConfiguration(\"education\"); // Visible -> false\n\n    cy.togglebarDisable(\".t--property-control-visible input\");\n    cy.get(education).should(\"not.exist\"); // Visible -> true\n\n    cy.togglebar(\".t--property-control-visible input\");\n    cy.get(education).should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_ArrayField_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"disables all underlying field when array field is disabled","suites":["JSON Form Widget Array Field"],"updatePoint":{"line":104,"column":64,"index":4185},"line":104,"code":"  it(\"disables all underlying field when array field is disabled\", () => {\n    cy.closePropertyPane();\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.openFieldConfiguration(\"education\"); // Disable -> true\n\n    cy.togglebar(\".t--property-control-disabled input\");\n    cy.get(education).within(() => {\n      cy.get(`${education}-0--college input`).should(\"have.attr\", \"disabled\");\n      cy.get(`${education}-0--year input`).should(\"have.attr\", \"disabled\");\n    }); // Disable -> false\n\n    cy.togglebarDisable(\".t--property-control-disabled input\");\n    cy.get(education).should(\"exist\");\n    cy.get(education).within(() => {\n      cy.get(`${education}-0--college input`).should(\"not.have.attr\", \"disabled\");\n      cy.get(`${education}-0--year input`).should(\"not.have.attr\", \"disabled\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_ArrayField_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"disables add new and remove buttons when array field is disabled","suites":["JSON Form Widget Array Field"],"updatePoint":{"line":122,"column":70,"index":4996},"line":122,"code":"  it(\"disables add new and remove buttons when array field is disabled\", () => {\n    cy.closePropertyPane();\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.openFieldConfiguration(\"education\");\n    let initialNoOfItems = 0;\n    cy.get(`${education}-item`).then($items => {\n      initialNoOfItems = $items.length;\n    }); // Disable -> true\n\n    cy.togglebar(\".t--property-control-disabled input\");\n    cy.get(`${education} ${addButton}`).should(\"have.attr\", \"disabled\");\n    cy.get(`${education} ${addButton}`).should(\"have.attr\", \"disabled\"); // Click add button\n\n    cy.get(`${education} ${addButton}`).click({\n      force: true\n    });\n    cy.get(`${education}-item`).then($items => {\n      expect($items.length).equal(initialNoOfItems);\n    }); // Click remove button\n\n    cy.get(`${education} ${deleteButton}`).last().click({\n      force: true\n    });\n    cy.get(`${education}-item`).then($items => {\n      expect($items.length).equal(initialNoOfItems);\n    }); // Disable -> false\n\n    cy.togglebarDisable(\".t--property-control-disabled input\");\n    cy.get(addButton).should(\"not.have.attr\", \"disabled\");\n    cy.get(deleteButton).should(\"not.have.attr\", \"disabled\"); // Click add button\n\n    cy.get(`${education} ${addButton}`).click({\n      force: true\n    });\n    cy.get(`${education}-item`).then($items => {\n      expect($items.length).equal(initialNoOfItems + 1);\n    }); // Click remove button\n\n    cy.get(`${education} ${deleteButton}`).last().click({\n      force: true\n    });\n    cy.get(`${education}-item`).then($items => {\n      expect($items.length).equal(initialNoOfItems);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_ArrayField_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should not render field level default value if form level is present","suites":["JSON Form Widget Array Field"],"updatePoint":{"line":167,"column":74,"index":6608},"line":167,"code":"  it(\"should not render field level default value if form level is present\", () => {\n    const collegeFieldDefaultValue = \"College default value\";\n    cy.closePropertyPane();\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.openFieldConfiguration(\"education\").openFieldConfiguration(\"__array_item__\").openFieldConfiguration(\"college\"); // Modify default text of eductation -> college field\n\n    cy.testJsontext(\"defaultvalue\", collegeFieldDefaultValue);\n    cy.closePropertyPane();\n    cy.get(`${education}-item`).should(\"have.length\", 1).within(() => {\n      cy.get(`${education}-0--college input`).should(\"have.value\", \"MIT\");\n      cy.get(`${education}-0--year input`).should(\"have.value\", \"20/10/2014\");\n    }); // Add new item to education array\n\n    cy.get(`${education} ${addButton}`).click({\n      force: true\n    });\n    cy.get(`${education}-item`).should(\"have.length\", 2).within(() => {\n      cy.get(`${education}-0--college input`).should(\"have.value\", \"MIT\");\n      cy.get(`${education}-0--year input`).should(\"have.value\", \"20/10/2014\");\n      cy.get(`${education}-1--college input`).should(\"have.value\", collegeFieldDefaultValue);\n      cy.get(`${education}-1--year input`).should(\"have.value\", \"\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_ArrayField_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"phone input dropdown should update the selected value","suites":["JSON Form Widget Array Field"],"updatePoint":{"line":190,"column":59,"index":7823},"line":190,"code":"  it(\"phone input dropdown should update the selected value\", () => {\n    cy.closePropertyPane();\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.openFieldConfiguration(\"education\");\n    cy.openFieldConfiguration(\"__array_item__\"); // Add new custom field\n\n    cy.get(\".t--property-pane-section-general button\").contains(\"Add a new field\").click({\n      force: true\n    });\n    cy.openFieldConfiguration(\"customField1\");\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, /^Phone Number Input/); // Enable Allow Country Code Change\n\n    cy.togglebar(\".t--property-control-allowcountrycodechange input[type='checkbox']\"); // Change the label of the field to Phone Number\n\n    cy.testJsontext(\"label\", \"Phone Number\"); // Open country code dropdown and select +91\n\n    cy.get(\".t--input-country-code-change\").first().click();\n    cy.get(\".t--search-input input\").type(\"+91\");\n    cy.wait(500);\n    cy.get(\".t--dropdown-option\").last().click();\n    cy.get(\".t--input-country-code-change\").should(\"contain\", \"🇮🇳+91\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_ArrayField_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"currency input dropdown should update the selected value","suites":["JSON Form Widget Array Field"],"updatePoint":{"line":212,"column":62,"index":8860},"line":212,"code":"  it(\"currency input dropdown should update the selected value\", () => {\n    cy.closePropertyPane();\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.openFieldConfiguration(\"education\");\n    cy.openFieldConfiguration(\"__array_item__\"); // Add new custom field\n\n    cy.get(\".t--property-pane-section-general button\").contains(\"Add a new field\").click({\n      force: true\n    });\n    cy.openFieldConfiguration(\"customField1\");\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, /^Currency Input/); // Enable Allow Country Code Change\n\n    cy.togglebar(\".t--property-control-allowcurrencychange input[type='checkbox']\"); // Change the label of the field to Phone Number\n\n    cy.testJsontext(\"label\", \"Currency\"); // Open country code dropdown and select gbp\n\n    cy.get(\".t--input-currency-change\").first().click();\n    cy.get(\".t--search-input input\").type(\"gbp\");\n    cy.wait(500);\n    cy.get(\".t--dropdown-option\").first().click();\n    cy.get(\".t--input-currency-change\").should(\"contain\", \"£\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_ArrayField_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"generates fields with valid source data json","suites":["JSON Form Widget AutoGenerate Disabled"],"updatePoint":{"line":5,"column":50,"index":285},"line":5,"code":"  it(\"generates fields with valid source data json\", () => {\n    const formDsl = JSON.parse(JSON.stringify(jsonFormDslWithSchemaAndWithoutSourceData));\n    cy.addDsl(formDsl);\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.togglebarDisable(`.t--property-control-autogenerateform input`);\n    const sourceData = {\n      name: \"John\",\n      age: 30,\n      dob: \"10/12/1992\",\n      migrant: false,\n      gender: \"male\",\n      address: {\n        street: \"Koramangala\",\n        city: \"Bangalore\",\n        state: \"State\"\n      },\n      education: [{\n        college: \"MIT\",\n        year: \"20/10/2014\",\n        course: \"CS\"\n      }]\n    };\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.testJsontext(\"sourcedata\", JSON.stringify(sourceData));\n    cy.closePropertyPane(); // Fields that should exist\n\n    cy.get(`${fieldPrefix}-name label`).contains(\"Name\");\n    cy.get(`${fieldPrefix}-name input`).then(input => {\n      cy.wrap(input).should(\"have.value\", \"John\");\n      cy.wrap(input).invoke(\"attr\", \"type\").should(\"contain\", \"text\");\n    });\n    cy.get(`${fieldPrefix}-age label`).contains(\"Age\");\n    cy.get(`${fieldPrefix}-age input`).then(input => {\n      cy.wrap(input).should(\"have.value\", 30);\n      cy.wrap(input).invoke(\"attr\", \"type\").should(\"contain\", \"text\");\n    });\n    cy.get(`${fieldPrefix}-dob label`).contains(\"Dob\");\n    cy.get(`${fieldPrefix}-dob input`).then(input => {\n      cy.wrap(input).should(\"have.value\", \"10/12/1992\");\n      cy.wrap(input).invoke(\"attr\", \"type\").should(\"contain\", \"text\");\n    });\n    cy.get(`${fieldPrefix}-migrant label`).contains(\"Migrant\");\n    cy.get(`${fieldPrefix}-migrant .t--switch-widget-inactive`).should(\"exist\");\n    cy.get(`${fieldPrefix}-address`).find(\"label\").should(\"have.length\", 3);\n    cy.get(`${fieldPrefix}-address-street label`).contains(\"Street\");\n    cy.get(`${fieldPrefix}-address-street input`).then(input => {\n      cy.wrap(input).should(\"have.value\", \"Koramangala\");\n      cy.wrap(input).invoke(\"attr\", \"type\").should(\"contain\", \"text\");\n    });\n    cy.get(`${fieldPrefix}-address-city label`).contains(\"City\");\n    cy.get(`${fieldPrefix}-address-city input`).then(input => {\n      cy.wrap(input).should(\"have.value\", \"Bangalore\");\n      cy.wrap(input).invoke(\"attr\", \"type\").should(\"contain\", \"text\");\n    });\n    cy.get(`${fieldPrefix}-education label`).should(\"have.length\", 3);\n    cy.get(`${fieldPrefix}-education-0--college label`).contains(\"College\");\n    cy.get(`${fieldPrefix}-education-0--college input`).then(input => {\n      cy.wrap(input).should(\"have.value\", \"MIT\");\n      cy.wrap(input).invoke(\"attr\", \"type\").should(\"contain\", \"text\");\n    });\n    cy.get(`${fieldPrefix}-education-0--year label`).contains(\"Year\");\n    cy.get(`${fieldPrefix}-education-0--year input`).then(input => {\n      cy.wrap(input).should(\"have.value\", \"20/10/2014\");\n      cy.wrap(input).invoke(\"attr\", \"type\").should(\"contain\", \"text\");\n    });\n    cy.get(`${fieldPrefix}-education .t--jsonformfield-array-delete-btn .t--text`).should(\"have.text\", \"Delete\");\n    cy.get(`${fieldPrefix}-education .t--jsonformfield-array-add-btn .t--text`).should(\"have.text\", \"Add New\");\n    /**\n     * Fields that shouldn't exist\n     *  */\n\n    cy.get(`${fieldPrefix}-gender label`).should(\"not.exist\");\n    cy.get(`${fieldPrefix}-gender input`).should(\"not.exist\");\n    cy.get(`${fieldPrefix}-address-state label`).should(\"not.exist\");\n    cy.get(`${fieldPrefix}-address-state input`).should(\"not.exist\");\n    cy.get(`${fieldPrefix}-education-0--course label`).should(\"not.exist\");\n    cy.get(`${fieldPrefix}-education-0--course input`).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_AutoGenerateFormDisabled_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"modifies field when generate form button is pressed","suites":["JSON Form Widget AutoGenerate Disabled"],"updatePoint":{"line":83,"column":57,"index":3909},"line":83,"code":"  it(\"modifies field when generate form button is pressed\", () => {\n    const formDsl = JSON.parse(JSON.stringify(jsonFormDslWithSchemaAndWithoutSourceData));\n    cy.addDsl(formDsl);\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.togglebarDisable(`.t--property-control-autogenerateform input`);\n    const sourceData = {\n      name: \"John\",\n      age: 30,\n      dob: \"10/12/1992\",\n      migrant: false,\n      gender: \"male\",\n      address: {\n        street: \"Koramangala\",\n        city: \"Bangalore\",\n        state: \"Karnataka\"\n      },\n      education: [{\n        college: \"MIT\",\n        year: \"20/10/2014\",\n        course: \"CS\"\n      }]\n    };\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.testJsontext(\"sourcedata\", JSON.stringify(sourceData));\n    cy.wait(500);\n    cy.get(\".t--property-pane-section-general button\").contains(\"Generate Form\").click({\n      force: true\n    });\n    cy.closePropertyPane();\n    cy.get(`${fieldPrefix}-name label`).contains(\"Name\");\n    cy.get(`${fieldPrefix}-name input`).should(\"have.value\", \"John\");\n    cy.get(`${fieldPrefix}-age label`).contains(\"Age\");\n    cy.get(`${fieldPrefix}-age input`).should(\"have.value\", 30);\n    cy.get(`${fieldPrefix}-dob label`).contains(\"Dob\");\n    cy.get(`${fieldPrefix}-dob input`).should(\"have.value\", \"10/12/1992\");\n    cy.get(`${fieldPrefix}-migrant label`).contains(\"Migrant\");\n    cy.get(`${fieldPrefix}-migrant .t--switch-widget-inactive`).should(\"exist\");\n    cy.get(`${fieldPrefix}-address`).find(\"label\").should(\"have.length\", 4);\n    cy.get(`${fieldPrefix}-address-street label`).contains(\"Street\");\n    cy.get(`${fieldPrefix}-address-street input`).should(\"have.value\", \"Koramangala\");\n    cy.get(`${fieldPrefix}-address-city label`).contains(\"City\");\n    cy.get(`${fieldPrefix}-address-city input`).should(\"have.value\", \"Bangalore\");\n    cy.get(`${fieldPrefix}-address-state label`).contains(\"State\");\n    cy.get(`${fieldPrefix}-address-state input`).should(\"have.value\", \"Karnataka\");\n    cy.get(`${fieldPrefix}-education label`).should(\"have.length\", 4);\n    cy.get(`${fieldPrefix}-education-0--college label`).contains(\"College\");\n    cy.get(`${fieldPrefix}-education-0--college input`).should(\"have.value\", \"MIT\");\n    cy.get(`${fieldPrefix}-education-0--year label`).contains(\"Year\");\n    cy.get(`${fieldPrefix}-education-0--year input`).should(\"have.value\", \"20/10/2014\");\n    cy.get(`${fieldPrefix}-education-0--course label`).contains(\"Course\");\n    cy.get(`${fieldPrefix}-education-0--course input`).should(\"have.value\", \"CS\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_AutoGenerateFormDisabled_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"generates fields with valid source data json","suites":["JSON Form Widget AutoGenerate Enabled"],"updatePoint":{"line":7,"column":50,"index":376},"line":7,"code":"  it(\"generates fields with valid source data json\", () => {\n    cy.addDsl(dslWithoutSchema);\n    const sourceData = {\n      name: \"John\",\n      age: 30,\n      dob: \"10/12/1992\",\n      migrant: false,\n      address: {\n        street: \"Koramangala\",\n        city: \"Bangalore\"\n      },\n      education: [{\n        college: \"MIT\",\n        year: \"20/10/2014\"\n      }]\n    };\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.testJsontext(\"sourcedata\", JSON.stringify(sourceData));\n    cy.closePropertyPane();\n    cy.get(`${fieldPrefix}-name label`).contains(\"Name\");\n    cy.get(`${fieldPrefix}-name input`).then(input => {\n      cy.wrap(input).should(\"have.value\", \"John\");\n      cy.wrap(input).invoke(\"attr\", \"type\").should(\"contain\", \"text\");\n    });\n    cy.get(`${fieldPrefix}-age label`).contains(\"Age\");\n    cy.get(`${fieldPrefix}-age input`).then(input => {\n      cy.wrap(input).should(\"have.value\", 30);\n      cy.wrap(input).invoke(\"attr\", \"type\").should(\"contain\", \"text\");\n    });\n    cy.get(`${fieldPrefix}-dob label`).contains(\"Dob\");\n    cy.get(`${fieldPrefix}-dob input`).then(input => {\n      cy.wrap(input).should(\"have.value\", \"10/12/1992\");\n      cy.wrap(input).invoke(\"attr\", \"type\").should(\"contain\", \"text\");\n    });\n    cy.get(`${fieldPrefix}-migrant label`).contains(\"Migrant\");\n    cy.get(`${fieldPrefix}-migrant .t--switch-widget-inactive`).should(\"exist\");\n    cy.get(`${fieldPrefix}-address`).find(\"label\").should(\"have.length\", 3);\n    cy.get(`${fieldPrefix}-address-street label`).contains(\"Street\");\n    cy.get(`${fieldPrefix}-address-street input`).then(input => {\n      cy.wrap(input).should(\"have.value\", \"Koramangala\");\n      cy.wrap(input).invoke(\"attr\", \"type\").should(\"contain\", \"text\");\n    });\n    cy.get(`${fieldPrefix}-address-city label`).contains(\"City\");\n    cy.get(`${fieldPrefix}-address-city input`).then(input => {\n      cy.wrap(input).should(\"have.value\", \"Bangalore\");\n      cy.wrap(input).invoke(\"attr\", \"type\").should(\"contain\", \"text\");\n    });\n    cy.get(`${fieldPrefix}-education label`).should(\"have.length\", 3);\n    cy.get(`${fieldPrefix}-education-0--college label`).contains(\"College\");\n    cy.get(`${fieldPrefix}-education-0--college input`).then(input => {\n      cy.wrap(input).should(\"have.value\", \"MIT\");\n      cy.wrap(input).invoke(\"attr\", \"type\").should(\"contain\", \"text\");\n    });\n    cy.get(`${fieldPrefix}-education-0--year label`).contains(\"Year\");\n    cy.get(`${fieldPrefix}-education-0--year input`).then(input => {\n      cy.wrap(input).should(\"have.value\", \"20/10/2014\");\n      cy.wrap(input).invoke(\"attr\", \"type\").should(\"contain\", \"text\");\n    });\n    cy.get(`${fieldPrefix}-education .t--jsonformfield-array-delete-btn .t--text`).should(\"have.text\", \"Delete\");\n    cy.get(`${fieldPrefix}-education .t--jsonformfield-array-add-btn .t--text`).should(\"have.text\", \"Add New\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_AutoGenerateFormEnabled_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"modifies field when source data changes","suites":["JSON Form Widget AutoGenerate Enabled"],"updatePoint":{"line":68,"column":45,"index":3221},"line":68,"code":"  it(\"modifies field when source data changes\", () => {\n    cy.addDsl(jsonFormDslWithSchemaAndWithoutSourceData);\n    const modifiedSourceData = {\n      name: \"John\",\n      age: 30,\n      dob: \"10/12/1992\",\n      migrant: \"false\",\n      address: {\n        street: \"Koramangala\",\n        city: \"Bangalore\",\n        state: \"Karnataka\"\n      },\n      education: [{\n        college: \"MIT\",\n        year: \"20/10/2014\",\n        degree: \"Engg.\"\n      }]\n    };\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.testJsontext(\"sourcedata\", JSON.stringify(modifiedSourceData));\n    cy.closePropertyPane();\n    cy.get(`${fieldPrefix}-name label`).contains(\"Name\");\n    cy.get(`${fieldPrefix}-name input`).should(\"have.value\", \"John\");\n    cy.get(`${fieldPrefix}-age label`).contains(\"Age\");\n    cy.get(`${fieldPrefix}-age input`).should(\"have.value\", 30);\n    cy.get(`${fieldPrefix}-dob label`).contains(\"Dob\");\n    cy.get(`${fieldPrefix}-dob input`).should(\"have.value\", \"10/12/1992\");\n    cy.get(`${fieldPrefix}-migrant label`).contains(\"Migrant\");\n    cy.get(`${fieldPrefix}-migrant .t--switch-widget-inactive`).should(\"not.exist\");\n    cy.get(`${fieldPrefix}-migrant input`).should(\"exist\");\n    cy.get(`${fieldPrefix}-address`).find(\"label\").should(\"have.length\", 4);\n    cy.get(`${fieldPrefix}-address-street label`).contains(\"Street\");\n    cy.get(`${fieldPrefix}-address-street input`).should(\"have.value\", \"Koramangala\");\n    cy.get(`${fieldPrefix}-address-city label`).contains(\"City\");\n    cy.get(`${fieldPrefix}-address-city input`).should(\"have.value\", \"Bangalore\");\n    cy.get(`${fieldPrefix}-address-state label`).contains(\"State\");\n    cy.get(`${fieldPrefix}-address-state input`).should(\"have.value\", \"Karnataka\");\n    cy.get(`${fieldPrefix}-education label`).should(\"have.length\", 4);\n    cy.get(`${fieldPrefix}-education-0--college label`).contains(\"College\");\n    cy.get(`${fieldPrefix}-education-0--college input`).should(\"have.value\", \"MIT\");\n    cy.get(`${fieldPrefix}-education-0--year label`).contains(\"Year\");\n    cy.get(`${fieldPrefix}-education-0--year input`).should(\"have.value\", \"20/10/2014\");\n    cy.get(`${fieldPrefix}-education-0--degree label`).contains(\"Degree\");\n    cy.get(`${fieldPrefix}-education-0--degree input`).should(\"have.value\", \"Engg.\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_AutoGenerateFormEnabled_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate Drag and drop jsonform widget","suites":["JsonForm widget basis c usecases"],"updatePoint":{"line":10,"column":44,"index":404},"line":10,"code":"  it(\"Validate Drag and drop jsonform widget\", function () {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"jsonformwidget\", {\n      x: 200,\n      y: 200\n    });\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.get(widgetsPage.jsonFormWidget).should(\"have.length\", 1);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_Basic_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"json form widget validate default data","suites":["JsonForm widget basis c usecases"],"updatePoint":{"line":19,"column":44,"index":701},"line":19,"code":"  it(\"json form widget validate default data\", function () {\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.get(jsonform.jsformInput).should(\"have.value\", this.data.defaultSource.name);\n    cy.get(jsonform.jsformDOB).should(\"have.value\", this.data.defaultSource.date_of_birth);\n    cy.get(\".t--jsonformfield-employee_id input\").should(\"have.value\", this.data.defaultSource.employee_id);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_Basic_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"json form widget validate reset button function","suites":["JsonForm widget basis c usecases"],"updatePoint":{"line":25,"column":53,"index":1106},"line":25,"code":"  it(\"json form widget validate reset button function\", function () {\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.get(jsonform.jsformInput).clear({\n      force: true\n    });\n    cy.get(jsonform.jsformInput).type(\"TestReset\");\n    cy.get(jsonform.jsformEmpID).clear({\n      force: true\n    });\n    cy.get(jsonform.jsformEmpID).type(\"375\");\n    cy.get(jsonform.jsformInput).should(\"not.have.value\", this.data.defaultSource.name);\n    cy.get(jsonform.jsformEmpID).should(\"not.have.value\", this.data.defaultSource.employee_id);\n    cy.get(\"button:contains('Reset')\").click({\n      force: true\n    });\n    cy.get(jsonform.jsformInput).should(\"have.value\", this.data.defaultSource.name);\n    cy.get(jsonform.jsformEmpID).should(\"have.value\", this.data.defaultSource.employee_id);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_Basic_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate copy/paste/delete widget ","suites":["JsonForm widget basis c usecases"],"updatePoint":{"line":43,"column":40,"index":1879},"line":43,"code":"  it(\"Validate copy/paste/delete widget \", function () {\n    const modifierKey = Cypress.platform === \"darwin\" ? \"meta\" : \"ctrl\"; //copy and paste\n\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.get(\"body\").type(`{${modifierKey}}c`); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500);\n    cy.get(\"body\").click();\n    cy.get(\"body\").type(`{${modifierKey}}v`, {\n      force: true\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(widgetsPage.jsonFormWidget).should(\"have.length\", 2);\n    cy.deleteWidget(widgetsPage.jsonFormWidget);\n    cy.get(widgetsPage.jsonFormWidget).should(\"have.length\", 1);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_Basic_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"uses the custom field when the accessor matches","suites":["JSON Form Widget Custom Field"],"updatePoint":{"line":7,"column":53,"index":359},"line":7,"code":"  it(\"uses the custom field when the accessor matches\", () => {\n    const formDsl = JSON.parse(JSON.stringify(jsonFormDslWithSchemaAndWithoutSourceData));\n    cy.addDsl(formDsl);\n    cy.openPropertyPane(\"jsonformwidget\"); // Add new custom field\n\n    cy.get(\".t--property-pane-section-general button\").contains(\"Add a new field\").click({\n      force: true\n    });\n    cy.openFieldConfiguration(\"customField1\");\n    cy.testJsontext(\"propertyname\", \"gender\");\n    cy.testJsontext(\"label\", \"Gender\");\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, \"Select\");\n    cy.closePropertyPane();\n    const sourceData = {\n      name: \"John\",\n      age: 30,\n      dob: \"10/12/1992\",\n      migrant: false,\n      gender: \"male\",\n      address: {\n        street: \"Koramangala\",\n        city: \"Bangalore\",\n        state: \"Karnataka\"\n      },\n      education: [{\n        college: \"MIT\",\n        year: \"20/10/2014\",\n        course: \"CS\"\n      }]\n    };\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.testJsontext(\"sourcedata\", JSON.stringify(sourceData));\n    cy.wait(500);\n    cy.get(`${fieldPrefix}-name label`).contains(\"Name\");\n    cy.get(`${fieldPrefix}-name input`).should(\"have.value\", \"John\");\n    cy.get(`${fieldPrefix}-age label`).contains(\"Age\");\n    cy.get(`${fieldPrefix}-age input`).should(\"have.value\", 30);\n    cy.get(`${fieldPrefix}-dob label`).contains(\"Dob\");\n    cy.get(`${fieldPrefix}-dob input`).should(\"have.value\", \"10/12/1992\");\n    cy.get(`${fieldPrefix}-customField1 label`).contains(\"Gender\");\n    cy.get(`${fieldPrefix}-customField1 .bp3-popover-wrapper`).should(\"exist\");\n    cy.get(`${fieldPrefix}-migrant label`).contains(\"Migrant\");\n    cy.get(`${fieldPrefix}-migrant .t--switch-widget-inactive`).should(\"exist\");\n    cy.get(`${fieldPrefix}-address`).find(\"label\").should(\"have.length\", 4);\n    cy.get(`${fieldPrefix}-address-street label`).contains(\"Street\");\n    cy.get(`${fieldPrefix}-address-street input`).should(\"have.value\", \"Koramangala\");\n    cy.get(`${fieldPrefix}-address-city label`).contains(\"City\");\n    cy.get(`${fieldPrefix}-address-city input`).should(\"have.value\", \"Bangalore\");\n    cy.get(`${fieldPrefix}-address-state label`).contains(\"State\");\n    cy.get(`${fieldPrefix}-address-state input`).should(\"have.value\", \"Karnataka\");\n    cy.get(`${fieldPrefix}-education label`).should(\"have.length\", 4);\n    cy.get(`${fieldPrefix}-education-0--college label`).contains(\"College\");\n    cy.get(`${fieldPrefix}-education-0--college input`).should(\"have.value\", \"MIT\");\n    cy.get(`${fieldPrefix}-education-0--year label`).contains(\"Year\");\n    cy.get(`${fieldPrefix}-education-0--year input`).should(\"have.value\", \"20/10/2014\");\n    cy.get(`${fieldPrefix}-education-0--course label`).contains(\"Course\");\n    cy.get(`${fieldPrefix}-education-0--course input`).should(\"have.value\", \"CS\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_CustomField_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"modifies field type text to number","suites":["JSON Form Widget Field Change"],"updatePoint":{"line":10,"column":40,"index":351},"line":10,"code":"  it(\"modifies field type text to number\", () => {\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.get(`${fieldPrefix}-name`).find(\"button\").should(\"not.exist\");\n    cy.openFieldConfiguration(\"name\");\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, \"Number Input\");\n    cy.get(`${fieldPrefix}-name`).find(\"button\").should(\"have.length\", 2);\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, /^Text Input/);\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FieldChange_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"modifies field type text to checkbox","suites":["JSON Form Widget Field Change"],"updatePoint":{"line":19,"column":42,"index":820},"line":19,"code":"  it(\"modifies field type text to checkbox\", () => {\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.get(`${fieldPrefix}-name`).find(\"input\").invoke(\"attr\", \"type\").should(\"contain\", \"text\");\n    cy.openFieldConfiguration(\"name\");\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, \"Checkbox\");\n    cy.get(`${fieldPrefix}-name`).find(\"input\").invoke(\"attr\", \"type\").should(\"contain\", \"checkbox\");\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, /^Text Input/);\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FieldChange_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"modifies field type text to date","suites":["JSON Form Widget Field Change"],"updatePoint":{"line":28,"column":38,"index":1336},"line":28,"code":"  it(\"modifies field type text to date\", () => {\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.get(`${fieldPrefix}-name`).find(\"input\").click({\n      force: true\n    });\n    cy.get(\".bp3-popover.bp3-dateinput-popover\").should(\"not.exist\");\n    cy.openFieldConfiguration(\"name\");\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, \"Datepicker\");\n    cy.get(`${fieldPrefix}-name`).find(\"input\").click({\n      force: true\n    });\n    cy.get(\".bp3-popover.bp3-dateinput-popover\").should(\"exist\");\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, /^Text Input/);\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FieldChange_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"modifies field type text to switch","suites":["JSON Form Widget Field Change"],"updatePoint":{"line":43,"column":40,"index":1956},"line":43,"code":"  it(\"modifies field type text to switch\", () => {\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.get(`${fieldPrefix}-name`).find(\".bp3-control.bp3-switch\").should(\"not.exist\");\n    cy.openFieldConfiguration(\"name\");\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, \"Switch\");\n    cy.get(`${fieldPrefix}-name`).find(\".bp3-control.bp3-switch\").should(\"exist\");\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, /^Text Input/);\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FieldChange_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"modifies field type text to Select","suites":["JSON Form Widget Field Change"],"updatePoint":{"line":52,"column":40,"index":2442},"line":52,"code":"  it(\"modifies field type text to Select\", () => {\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.get(`${fieldPrefix}-name label`).click({\n      force: true\n    });\n    cy.get(\".bp3-select-popover.select-popover-wrapper\").should(\"not.exist\");\n    cy.openFieldConfiguration(\"name\");\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, /^Select/);\n    cy.get(`${fieldPrefix}-name label`).click({\n      force: true\n    });\n    cy.get(\".bp3-select-popover.select-popover-wrapper\").should(\"exist\");\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, /^Text Input/);\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FieldChange_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"modifies field type text to Multi-Select","suites":["JSON Form Widget Field Change"],"updatePoint":{"line":67,"column":46,"index":3065},"line":67,"code":"  it(\"modifies field type text to Multi-Select\", () => {\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.get(`${fieldPrefix}-name`).find(\".rc-select-multiple\").should(\"not.exist\");\n    cy.openFieldConfiguration(\"name\");\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, \"Multiselect\");\n    cy.get(`${fieldPrefix}-name`).find(\".rc-select-multiple\").should(\"exist\");\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, /^Text Input/);\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FieldChange_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"modifies field type text to Radio-Group","suites":["JSON Form Widget Field Change"],"updatePoint":{"line":76,"column":45,"index":3553},"line":76,"code":"  it(\"modifies field type text to Radio-Group\", () => {\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.get(`${fieldPrefix}-name`).find(\".bp3-control.bp3-radio\").should(\"not.exist\");\n    cy.openFieldConfiguration(\"name\");\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, \"Radio Group\");\n    cy.get(`${fieldPrefix}-name`).find(\".bp3-control.bp3-radio\").should(\"exist\").should(\"have.length\", 2);\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, /^Text Input/);\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FieldChange_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"modifies field type text to Array","suites":["JSON Form Widget Field Change"],"updatePoint":{"line":85,"column":39,"index":4066},"line":85,"code":"  it(\"modifies field type text to Array\", () => {\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.get(`${fieldPrefix}-name`).find(\".t--jsonformfield-array-add-btn\").should(\"not.exist\");\n    cy.openFieldConfiguration(\"name\");\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, \"Array\");\n    cy.get(`${fieldPrefix}-name`).find(\".t--jsonformfield-array-add-btn\").should(\"exist\");\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, /^Text Input/);\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FieldChange_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"modifies field type text to Object","suites":["JSON Form Widget Field Change"],"updatePoint":{"line":94,"column":40,"index":4567},"line":94,"code":"  it(\"modifies field type text to Object\", () => {\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.openFieldConfiguration(\"name\");\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, \"Object\");\n    cy.get(`${fieldPrefix}-name`).find(\"input\").should(\"not.exist\");\n    cy.get(commonlocators.jsonFormAddNewCustomFieldBtn).click({\n      force: true\n    });\n    cy.get(`${fieldPrefix}-name`).find(\"input\").should(\"exist\");\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, /^Text Input/);\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FieldChange_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"modifies field type Multi-Select to Array","suites":["JSON Form Widget Field Change"],"updatePoint":{"line":106,"column":47,"index":5114},"line":106,"code":"  it(\"modifies field type Multi-Select to Array\", () => {\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.get(`${fieldPrefix}-hobbies`).find(\".rc-select-multiple\").should(\"exist\");\n    cy.openFieldConfiguration(\"hobbies\");\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, \"Array\");\n    cy.get(`${fieldPrefix}-hobbies`).then(hobbies => {\n      cy.wrap(hobbies).find(\".t--jsonformfield-array-add-btn\").should(\"exist\");\n      cy.wrap(hobbies).find(\"input\").should(\"have.length\", 2);\n      cy.wrap(hobbies).find(\".t--jsonformfield-array-delete-btn\").should(\"have.length\", 2);\n    });\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, /^Text Input/);\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FieldChange_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"shows alert on optionChange","suites":["JSONForm Radio Group Field"],"updatePoint":{"line":22,"column":33,"index":800},"line":22,"code":"  it(\"shows alert on optionChange\", () => {\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.openFieldConfiguration(\"answer\"); // Enable JS mode for onSelectionChange\n\n    cy.get(onSelectionChangeJSBtn).click({\n      force: true\n    }); // Add onSelectionChange action\n\n    cy.testJsontext(\"onselectionchange\", \"{{showAlert('Selection change')}}\");\n    cy.get(`${fieldPrefix}-answer`).find(\"label\").contains(\"No\").click({\n      force: true\n    }); // Check for alert\n\n    cy.get(commonlocators.toastmsg).contains(\"Selection change\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FieldEvents_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"has valid default text","suites":["Text Field Property Control"],"updatePoint":{"line":15,"column":28,"index":495},"line":15,"code":"  it(\"has valid default text\", () => {\n    cy.openFieldConfiguration(\"name\");\n    cy.get(\".t--property-control-defaultvalue\").contains(\"{{sourceData.name}}\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"updated field with change in default text","suites":["Text Field Property Control"],"updatePoint":{"line":19,"column":47,"index":679},"line":19,"code":"  it(\"updated field with change in default text\", () => {\n    const defaultValue = \"New default text\";\n    cy.testJsontext(\"defaultvalue\", \"New default text\").wait(200);\n    cy.get(`${fieldPrefix}-name input`).should(\"have.value\", defaultValue);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"throws max character error when exceeds maxChar limit for default text","suites":["Text Field Property Control"],"updatePoint":{"line":24,"column":76,"index":960},"line":24,"code":"  it(\"throws max character error when exceeds maxChar limit for default text\", () => {\n    cy.testJsontext(\"maxchars\", 5);\n    cy.get(`${fieldPrefix}-name input`).click();\n    cy.get(\".bp3-popover-content\").should($x => {\n      expect($x).contain(\"Default text length must be less than 5 characters\");\n    });\n    cy.testJsontext(\"maxchars\", \"\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"throws max character error when exceeds maxChar limit for input text","suites":["Text Field Property Control"],"updatePoint":{"line":32,"column":74,"index":1311},"line":32,"code":"  it(\"throws max character error when exceeds maxChar limit for input text\", () => {\n    cy.testJsontext(\"defaultvalue\", \"\").wait(200);\n    cy.get(`${fieldPrefix}-name input`).clear().type(\"abcdefghi\");\n    cy.testJsontext(\"maxchars\", 5).wait(200);\n    cy.get(`${fieldPrefix}-name input`).click();\n    cy.get(\".bp3-popover-content\").should($x => {\n      expect($x).contain(\"Input text length must be less than 5 characters\");\n    });\n    cy.testJsontext(\"maxchars\", \"\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"sets placeholder","suites":["Text Field Property Control"],"updatePoint":{"line":42,"column":22,"index":1736},"line":42,"code":"  it(\"sets placeholder\", () => {\n    const placeholderText = \"First name\";\n    cy.testJsontext(\"placeholder\", placeholderText);\n    cy.get(`${fieldPrefix}-name input`).invoke(\"attr\", \"placeholder\").should(\"contain\", placeholderText);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"sets valid property with custom error message","suites":["Text Field Property Control"],"updatePoint":{"line":47,"column":51,"index":2005},"line":47,"code":"  it(\"sets valid property with custom error message\", () => {\n    cy.testJsontext(\"valid\", \"false\");\n    cy.get(`${fieldPrefix}-name input`).clear().type(\"abcd\");\n    cy.get(\".bp3-popover-content\").contains(\"Invalid input\");\n    cy.testJsontext(\"errormessage\", \"Custom error message\");\n    cy.get(`${fieldPrefix}-name input`).click({\n      force: true\n    });\n    cy.get(\".bp3-popover-content\").contains(\"Custom error message\"); // Reset the error message\n\n    cy.testJsontext(\"errormessage\", \"\"); // Reset valid\n\n    cy.testJsontext(\"valid\", \"\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"hides field when visible switched off","suites":["Text Field Property Control"],"updatePoint":{"line":61,"column":43,"index":2551},"line":61,"code":"  it(\"hides field when visible switched off\", () => {\n    cy.togglebarDisable(`.t--property-control-visible input`);\n    cy.get(`${fieldPrefix}-name`).should(\"not.exist\");\n    cy.wait(500);\n    cy.togglebar(`.t--property-control-visible input`);\n    cy.get(`${fieldPrefix}-name`).should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"disables field when disabled switched on","suites":["Text Field Property Control"],"updatePoint":{"line":68,"column":46,"index":2857},"line":68,"code":"  it(\"disables field when disabled switched on\", () => {\n    cy.togglebar(`.t--property-control-disabled input`);\n    cy.get(`${fieldPrefix}-name input`).each($el => {\n      cy.wrap($el).should(\"have.attr\", \"disabled\");\n    });\n    cy.togglebarDisable(`.t--property-control-disabled input`);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"throws error when REGEX does not match the input value","suites":["Text Field Property Control"],"updatePoint":{"line":75,"column":60,"index":3169},"line":75,"code":"  it(\"throws error when REGEX does not match the input value\", () => {\n    cy.testJsontext(\"regex\", \"^\\\\d+$\");\n    cy.get(`${fieldPrefix}-name input`).clear().type(\"abcd\");\n    cy.get(\".bp3-popover-content\").contains(\"Invalid input\");\n    cy.get(`${fieldPrefix}-name input`).clear().type(\"1234\");\n    cy.get(\".bp3-popover-content\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"has default property","suites":["Checkbox Field Property Control"],"updatePoint":{"line":94,"column":26,"index":3869},"line":94,"code":"  it(\"has default property\", () => {\n    cy.get(\".t--property-control-defaultselected\").contains(\"{{sourceData.check}}\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should update field checked state when default selected changed","suites":["Checkbox Field Property Control"],"updatePoint":{"line":97,"column":69,"index":4040},"line":97,"code":"  it(\"should update field checked state when default selected changed\", () => {\n    cy.testJsontext(\"defaultselected\", \"{{true}}\");\n    cy.get(`${fieldPrefix}-check input`).should(\"be.checked\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"hides field when visible switched off","suites":["Checkbox Field Property Control"],"updatePoint":{"line":101,"column":43,"index":4215},"line":101,"code":"  it(\"hides field when visible switched off\", () => {\n    cy.togglebarDisable(`.t--property-control-visible input`);\n    cy.get(`${fieldPrefix}-check`).should(\"not.exist\");\n    cy.wait(500);\n    cy.togglebar(`.t--property-control-visible input`);\n    cy.get(`${fieldPrefix}-check`).should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"disables field when disabled switched on","suites":["Checkbox Field Property Control"],"updatePoint":{"line":108,"column":46,"index":4523},"line":108,"code":"  it(\"disables field when disabled switched on\", () => {\n    cy.togglebar(`.t--property-control-disabled input`);\n    cy.get(`${fieldPrefix}-check input`).each($el => {\n      cy.wrap($el).should(\"have.attr\", \"disabled\");\n    });\n    cy.togglebarDisable(`.t--property-control-disabled input`);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"has default property","suites":["Switch Field Property Control"],"updatePoint":{"line":126,"column":26,"index":5102},"line":126,"code":"  it(\"has default property\", () => {\n    cy.get(\".t--property-control-defaultselected\").contains(\"{{sourceData.switch}}\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should update field checked state when default selected changed","suites":["Switch Field Property Control"],"updatePoint":{"line":129,"column":69,"index":5274},"line":129,"code":"  it(\"should update field checked state when default selected changed\", () => {\n    cy.testJsontext(\"defaultselected\", \"{{false}}\");\n    cy.get(`${fieldPrefix}-switch label.bp3-control.bp3-switch`).should(\"have.class\", \"t--switch-widget-inactive\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"hides field when visible switched off","suites":["Switch Field Property Control"],"updatePoint":{"line":133,"column":43,"index":5503},"line":133,"code":"  it(\"hides field when visible switched off\", () => {\n    cy.togglebarDisable(`.t--property-control-visible input`);\n    cy.get(`${fieldPrefix}-switch`).should(\"not.exist\");\n    cy.wait(500);\n    cy.togglebar(`.t--property-control-visible input`);\n    cy.get(`${fieldPrefix}-switch`).should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"disables field when disabled switched on","suites":["Switch Field Property Control"],"updatePoint":{"line":140,"column":46,"index":5813},"line":140,"code":"  it(\"disables field when disabled switched on\", () => {\n    cy.togglebar(`.t--property-control-disabled input`);\n    cy.get(`${fieldPrefix}-switch input`).each($el => {\n      cy.wrap($el).should(\"have.attr\", \"disabled\");\n    });\n    cy.togglebarDisable(`.t--property-control-disabled input`);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"has valid default value","suites":["Select Field Property Control"],"updatePoint":{"line":159,"column":29,"index":6474},"line":159,"code":"  it(\"has valid default value\", () => {\n    cy.get(\".t--property-control-defaultvalue\").contains(\"{{sourceData.state}}\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"makes select filterable","suites":["Select Field Property Control"],"updatePoint":{"line":162,"column":29,"index":6602},"line":162,"code":"  it(\"makes select filterable\", () => {\n    // click select field and filter input should not exist\n    cy.get(`${fieldPrefix}-state .bp3-control-group`).click({\n      force: true\n    });\n    cy.get(`.bp3-select-popover .bp3-input-group`).should(\"not.exist\"); // toggle filterable -> true in property pane\n\n    cy.togglebar(`.t--property-control-filterable input`); // click select field and filter input should exist\n\n    cy.get(`${fieldPrefix}-state .bp3-control-group`).click({\n      force: true\n    });\n    cy.get(`.bp3-select-popover .bp3-input-group`).should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"hides field when visible switched off","suites":["Select Field Property Control"],"updatePoint":{"line":176,"column":43,"index":7197},"line":176,"code":"  it(\"hides field when visible switched off\", () => {\n    cy.togglebarDisable(`.t--property-control-visible input`);\n    cy.get(`${fieldPrefix}-state`).should(\"not.exist\");\n    cy.wait(500);\n    cy.togglebar(`.t--property-control-visible input`);\n    cy.get(`${fieldPrefix}-state`).should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"disables field when disabled switched on","suites":["Select Field Property Control"],"updatePoint":{"line":183,"column":46,"index":7505},"line":183,"code":"  it(\"disables field when disabled switched on\", () => {\n    cy.togglebar(`.t--property-control-disabled input`);\n    cy.get(`${fieldPrefix}-state button.bp3-button`).should(\"have.class\", \"bp3-disabled\");\n    cy.togglebarDisable(`.t--property-control-disabled input`);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"has valid default value","suites":["Multi-Select Field Property Control"],"updatePoint":{"line":199,"column":29,"index":8069},"line":199,"code":"  it(\"has valid default value\", () => {\n    cy.get(\".t--property-control-defaultvalue\").contains(\"{{sourceData.hobbies}}\");\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"adds placeholder text","suites":["Multi-Select Field Property Control"],"updatePoint":{"line":203,"column":27,"index":8225},"line":203,"code":"  it(\"adds placeholder text\", () => {\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.openFieldConfiguration(\"hobbies\");\n    cy.testJsontext(\"placeholder\", \"Select placeholder\");\n    cy.wait(2000);\n    cy.get(`.rc-select-selection-placeholder`).contains(\"Select placeholder\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"hides field when visible switched off","suites":["Multi-Select Field Property Control"],"updatePoint":{"line":210,"column":43,"index":8526},"line":210,"code":"  it(\"hides field when visible switched off\", () => {\n    cy.togglebarDisable(`.t--property-control-visible input`);\n    cy.get(`${fieldPrefix}-hobbies`).should(\"not.exist\");\n    cy.wait(500);\n    cy.togglebar(`.t--property-control-visible input`);\n    cy.get(`${fieldPrefix}-hobbies`).should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"disables field when disabled switched on","suites":["Multi-Select Field Property Control"],"updatePoint":{"line":217,"column":46,"index":8838},"line":217,"code":"  it(\"disables field when disabled switched on\", () => {\n    cy.togglebar(`.t--property-control-disabled input`);\n    cy.get(`${fieldPrefix}-hobbies .rc-select-multiple`).should(\"have.class\", \"rc-select-disabled\");\n    cy.togglebarDisable(`.t--property-control-disabled input`);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"has valid default value","suites":["Radio group Field Property Control"],"updatePoint":{"line":234,"column":29,"index":9493},"line":234,"code":"  it(\"has valid default value\", () => {\n    cy.get(\".t--property-control-defaultselectedvalue\").contains(\"{{sourceData.radio}}\");\n    cy.get(`${fieldPrefix}-radio input`).should(\"have.value\", \"Y\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"hides field when visible switched off","suites":["Radio group Field Property Control"],"updatePoint":{"line":238,"column":43,"index":9711},"line":238,"code":"  it(\"hides field when visible switched off\", () => {\n    cy.togglebarDisable(`.t--property-control-visible input`);\n    cy.get(`${fieldPrefix}-radio`).should(\"not.exist\");\n    cy.wait(500);\n    cy.togglebar(`.t--property-control-visible input`);\n    cy.get(`${fieldPrefix}-radio`).should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"shows alert on filter text change","suites":["JSONForm Select field - filterText update action trigger "],"updatePoint":{"line":22,"column":39,"index":855},"line":22,"code":"  it(\"shows alert on filter text change\", () => {\n    const filterText = \"Test string\";\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.openFieldConfiguration(\"color\"); // Enable filterable\n\n    cy.togglebar(`.t--property-control-filterable input`); // Enable server side filtering\n\n    cy.togglebar(`.t--property-control-serversidefiltering input`); // Enable JS mode for onFilterUpdate\n\n    cy.get(onFilterUpdateJSBtn).click({\n      force: true\n    }); // Add onFilterUpdate action\n\n    cy.testJsontext(\"onfilterupdate\", \"{{showAlert('Filter update:' + fieldState?.color?.filterText)}}\"); // click select field and filter input should exist\n\n    cy.get(`${fieldPrefix}-color .bp3-control-group`).click({\n      force: true\n    });\n    cy.get(`.bp3-select-popover .bp3-input-group`).should(\"exist\"); // Type \"Test string\" in the filterable input.\n\n    cy.get(`.bp3-select-popover .bp3-input-group input`).type(filterText);\n    cy.get(commonlocators.toastmsg).contains(`Filter update:${filterText}`);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FilterText_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"shows alert on filter text change","suites":["JSONForm Multiselect field - filterText update action trigger "],"updatePoint":{"line":56,"column":39,"index":2196},"line":56,"code":"  it(\"shows alert on filter text change\", () => {\n    const filterText = \"Test string\";\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.openFieldConfiguration(\"colors\"); // Enable filterable\n\n    cy.togglebar(`.t--property-control-filterable input`); // Enable server side filtering\n\n    cy.togglebar(`.t--property-control-serversidefiltering input`); // Enable JS mode for onFilterUpdate\n\n    cy.get(onFilterUpdateJSBtn).click({\n      force: true\n    }); // Add onFilterUpdate action\n\n    cy.testJsontext(\"onfilterupdate\", \"{{showAlert('Filter update:' + fieldState?.colors?.filterText)}}\"); // Open multiselect field and filter input should exist\n\n    cy.get(`${fieldPrefix}-colors`).find(\".rc-select-selection-search-input\").first().focus({\n      force: true\n    }).type(\"{uparrow}\", {\n      force: true\n    });\n    cy.get(\".multi-select-dropdown input.bp3-input\").should(\"exist\"); // Type \"Test string\" in the filterable input.\n\n    cy.get(\".multi-select-dropdown input.bp3-input\").type(filterText);\n    cy.get(commonlocators.toastmsg).contains(`Filter update:${filterText}`);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FilterText_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. sticks to the bottom when fixed footer is true and content is less","suites":["JSONForm Footer spec"],"updatePoint":{"line":6,"column":75,"index":295},"line":6,"code":"  it(\"1. sticks to the bottom when fixed footer is true and content is less\", () => {\n    cy.addDsl(dslWithoutSchema); // add small source data\n\n    const sourceData = {\n      name: \"John\"\n    };\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.testJsontext(\"sourcedata\", JSON.stringify(sourceData)); // check if fixed footer enabled\n\n    cy.get(\".t--property-control-fixedfooter\").find(\"label.bp3-control\").should(\"have.class\", \"checked\"); // Check if there is a gap between body and footer\n\n    cy.get(\".t--jsonform-body\").then($body => {\n      cy.get(\".t--jsonform-footer\").then($footer => {\n        const gap = $footer.prop(\"offsetTop\") - $body.prop(\"scrollHeight\");\n        expect(gap).greaterThan(0);\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_Footer_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. sticks to the content when fixed footer is off","suites":["JSONForm Footer spec"],"updatePoint":{"line":24,"column":55,"index":1007},"line":24,"code":"  it(\"2. sticks to the content when fixed footer is off\", () => {\n    // Disable fixed footer\n    cy.togglebarDisable(\".t--property-control-fixedfooter input\"); // Check if there is a gap between body and footer\n\n    cy.get(\".t--jsonform-body\").then($body => {\n      cy.get(\".t--jsonform-footer\").then($footer => {\n        const gap = $footer.prop(\"offsetTop\") - $body.prop(\"scrollHeight\");\n        expect(gap).equals(0);\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_Footer_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. floats to the bottom when fixed footer is true and content overflows","suites":["JSONForm Footer spec"],"updatePoint":{"line":35,"column":77,"index":1475},"line":35,"code":"  it(\"3. floats to the bottom when fixed footer is true and content overflows\", () => {\n    cy.addDsl(dslWithSchema);\n    cy.addDsl(dslWithSchema);\n    cy.wait(3000); //for dsl to settle\n\n    cy.openPropertyPane(\"jsonformwidget\"); // check if fixed footer enabled\n\n    cy.get(\".t--property-control-fixedfooter\").find(\"label.bp3-control\").should(\"have.class\", \"checked\"); // Check if footer is floating\n\n    cy.get(\".t--draggable-jsonformwidget\").find(\"form\").then($form => {\n      cy.get(\".t--jsonform-footer\").then($footer => {\n        const gap = $footer.prop(\"offsetTop\") + $footer.prop(\"offsetHeight\") - $form.prop(\"offsetHeight\");\n        expect(gap).equals(0);\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_Footer_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. floats to the bottom when fixed footer is false and content overflows","suites":["JSONForm Footer spec"],"updatePoint":{"line":51,"column":78,"index":2167},"line":51,"code":"  it(\"4. floats to the bottom when fixed footer is false and content overflows\", () => {\n    // Disable fixed footer\n    cy.togglebarDisable(\".t--property-control-fixedfooter input\"); // Check if footer is floating\n\n    cy.get(\".t--draggable-jsonformwidget\").find(\"form\").then($form => {\n      cy.get(\".t--jsonform-footer\").then($footer => {\n        const gap = $footer.prop(\"offsetTop\") + $footer.prop(\"offsetHeight\") - $form.prop(\"scrollHeight\");\n        expect(gap).equals(0);\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_Footer_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"updates formData when field value changes","suites":["JSON Form Widget Form Bindings"],"updatePoint":{"line":12,"column":47,"index":453},"line":12,"code":"  it(\"updates formData when field value changes\", () => {\n    const expectedInitialFormData = {\n      age: 30,\n      dob: \"10/12/1992\",\n      migrant: false,\n      address: {\n        street: \"Koramangala\",\n        city: \"Bangalore\"\n      },\n      hobbies: [\"travelling\", \"swimming\"],\n      education: [{\n        college: \"MIT\",\n        year: \"20/10/2014\"\n      }],\n      name: \"John\"\n    };\n    const updatedFormData = {\n      age: 40,\n      dob: \"10/12/1992\",\n      migrant: false,\n      address: {\n        street: \"Indranagar\",\n        city: \"Bangalore\"\n      },\n      hobbies: [\"travelling\"],\n      education: [{\n        college: \"IIT\",\n        year: \"20/10/2014\"\n      }],\n      name: \"Test\"\n    }; // Bind formData to Text1 widget text property\n\n    cy.openPropertyPane(\"textwidget\");\n    cy.testJsontext(\"text\", \"{{JSON.stringify(JSONForm1.formData)}}\");\n    cy.closePropertyPane(); // Validate initial form data\n\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).then($el => {\n      const formData = JSON.parse($el.text());\n      cy.wrap(formData).should(\"deep.equal\", expectedInitialFormData);\n    }); // Modify form field values\n\n    cy.get(`${fieldPrefix}-name input`).clear({\n      force: true\n    }).type(updatedFormData.name);\n    cy.get(`${fieldPrefix}-age input`).clear({\n      force: true\n    }).clear({\n      force: true\n    }).type(updatedFormData.age);\n    cy.get(`${fieldPrefix}-address-street input`).clear({\n      force: true\n    }).type(updatedFormData.address.street);\n    cy.get(`${fieldPrefix}-hobbies .rc-select-selection-item`).contains(\"swimming\").siblings(\".rc-select-selection-item-remove\").click({\n      force: true\n    });\n    cy.get(`${fieldPrefix}-education-0--college input`).clear({\n      force: true\n    }).type(updatedFormData.education[0].college).wait(200);\n    cy.wait(1000); // Check if modified text updates formData\n\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).then($el => {\n      const formData = JSON.parse($el.text());\n      cy.wrap(formData).should(\"deep.equal\", updatedFormData);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FormBindings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"updates fieldState","suites":["JSON Form Widget Form Bindings"],"updatePoint":{"line":77,"column":24,"index":2486},"line":77,"code":"  it(\"updates fieldState\", () => {\n    const expectedInitialFieldState = {\n      name: {\n        isDisabled: false,\n        isVisible: true,\n        isRequired: false,\n        isValid: true\n      },\n      age: {\n        isDisabled: false,\n        isVisible: true,\n        isRequired: false,\n        isValid: true\n      },\n      dob: {\n        isDisabled: false,\n        isVisible: true,\n        isRequired: false,\n        isValid: true\n      },\n      migrant: {\n        isDisabled: false,\n        isVisible: true,\n        isRequired: false,\n        isValid: true,\n        isValid: true\n      },\n      address: {\n        street: {\n          isDisabled: false,\n          isVisible: true,\n          isRequired: false,\n          isValid: true\n        },\n        city: {\n          isDisabled: false,\n          isVisible: true,\n          isRequired: false,\n          isValid: true\n        }\n      },\n      education: [{\n        college: {\n          isDisabled: false,\n          isVisible: true,\n          isRequired: false,\n          isValid: true\n        },\n        year: {\n          isDisabled: false,\n          isVisible: true,\n          isRequired: false,\n          isValid: true\n        }\n      }],\n      hobbies: {\n        isDisabled: false,\n        isVisible: true,\n        isRequired: false,\n        isValid: true,\n        filterText: \"\"\n      }\n    };\n    const expectedUpdatedFieldState = {\n      name: {\n        isDisabled: false,\n        isVisible: true,\n        isRequired: true,\n        isValid: false\n      },\n      age: {\n        isDisabled: true,\n        isVisible: true,\n        isRequired: false,\n        isValid: true\n      },\n      dob: {\n        isDisabled: false,\n        isVisible: true,\n        isRequired: false,\n        isValid: true\n      },\n      migrant: {\n        isDisabled: false,\n        isVisible: false,\n        isRequired: false,\n        isValid: true\n      },\n      address: {\n        street: {\n          isDisabled: false,\n          isVisible: true,\n          isRequired: true,\n          isValid: false\n        },\n        city: {\n          isDisabled: false,\n          isVisible: true,\n          isRequired: false,\n          isValid: true\n        }\n      },\n      education: [{\n        college: {\n          isDisabled: false,\n          isVisible: true,\n          isRequired: true,\n          isValid: false\n        },\n        year: {\n          isDisabled: false,\n          isVisible: false,\n          isRequired: false,\n          isValid: true\n        }\n      }],\n      hobbies: {\n        isDisabled: false,\n        isVisible: true,\n        isRequired: false,\n        isValid: true,\n        filterText: \"\"\n      }\n    };\n    cy.openPropertyPane(\"textwidget\");\n    cy.get(\".t--property-control-text .CodeMirror textarea\").first().clear({\n      force: true\n    });\n    cy.testJsontext(\"text\", \"{{JSON.stringify(JSONForm1.fieldState)}}\");\n    cy.closePropertyPane();\n    cy.wait(3000);\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).then($el => {\n      const formData = JSON.parse($el.text());\n      cy.wrap(formData).should(\"deep.equal\", expectedInitialFieldState);\n    });\n    cy.openPropertyPane(\"jsonformwidget\"); // name.required -> true\n\n    cy.openFieldConfiguration(\"name\");\n    cy.togglebar(`${propertyControlPrefix}-required input`);\n    cy.get(backBtn).click({\n      force: true\n    }).wait(500); // age.disabled -> true\n\n    cy.openFieldConfiguration(\"age\");\n    cy.togglebar(`${propertyControlPrefix}-disabled input`);\n    cy.get(backBtn).click({\n      force: true\n    }).wait(500); // migrant.visible -> false\n\n    cy.openFieldConfiguration(\"migrant\");\n    cy.togglebarDisable(`${propertyControlPrefix}-visible input`);\n    cy.get(backBtn).click({\n      force: true\n    }).wait(500); // address.street.required -> true\n\n    cy.openFieldConfiguration(\"address\");\n    cy.openFieldConfiguration(\"street\");\n    cy.togglebar(`${propertyControlPrefix}-required input`);\n    cy.get(backBtn).click({\n      force: true\n    }).wait(500);\n    cy.get(backBtn).click({\n      force: true\n    }).wait(500); // education.college.required -> true\n    // education.year.visible -> false\n\n    cy.openFieldConfiguration(\"education\");\n    cy.openFieldConfiguration(\"__array_item__\");\n    cy.openFieldConfiguration(\"college\");\n    cy.togglebar(`${propertyControlPrefix}-required input`);\n    cy.get(backBtn).click({\n      force: true\n    }).wait(500);\n    cy.openFieldConfiguration(\"year\");\n    cy.togglebarDisable(`${propertyControlPrefix}-visible input`);\n    cy.get(backBtn).click({\n      force: true\n    }).wait(500);\n    cy.closePropertyPane();\n    cy.get(`${fieldPrefix}-name input`).clear({\n      force: true\n    });\n    cy.get(`${fieldPrefix}-address-street input`).clear({\n      force: true\n    });\n    cy.get(`${fieldPrefix}-address-city input`).clear({\n      force: true\n    });\n    cy.get(`${fieldPrefix}-education-0--college input`).clear({\n      force: true\n    }).wait(500);\n    cy.wait(3000);\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).then($el => {\n      const formState = JSON.parse($el.text());\n      cy.wrap(formState).should(\"deep.equal\", expectedUpdatedFieldState);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FormBindings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"change field accessor should reflect in fieldState","suites":["JSON Form Widget Form Bindings"],"updatePoint":{"line":274,"column":56,"index":7657},"line":274,"code":"  it(\"change field accessor should reflect in fieldState\", () => {\n    const expectedFieldStateChange = {\n      firstName: {\n        isDisabled: false,\n        isVisible: true,\n        isRequired: false,\n        isValid: true\n      },\n      age: {\n        isDisabled: false,\n        isVisible: true,\n        isRequired: false,\n        isValid: true\n      },\n      dob: {\n        isDisabled: false,\n        isVisible: true,\n        isRequired: false,\n        isValid: true\n      },\n      migrant: {\n        isDisabled: false,\n        isVisible: true,\n        isRequired: false,\n        isValid: true\n      },\n      address: {\n        street: {\n          isDisabled: false,\n          isVisible: true,\n          isRequired: false,\n          isValid: true\n        },\n        city: {\n          isDisabled: false,\n          isVisible: true,\n          isRequired: false,\n          isValid: true\n        }\n      },\n      education: [{\n        graduatingCollege: {\n          isDisabled: false,\n          isVisible: true,\n          isRequired: false,\n          isValid: true\n        },\n        year: {\n          isDisabled: false,\n          isVisible: true,\n          isRequired: false,\n          isValid: true\n        }\n      }],\n      hobbies: {\n        isDisabled: false,\n        isVisible: true,\n        isRequired: false,\n        isValid: true,\n        filterText: \"\"\n      }\n    };\n    cy.openPropertyPane(\"textwidget\");\n    cy.get(\".t--property-control-text .CodeMirror textarea\").first().clear({\n      force: true\n    });\n    cy.testJsontext(\"text\", \"{{JSON.stringify(JSONForm1.fieldState)}}\");\n    cy.openPropertyPane(\"jsonformwidget\"); // Change accessor name -> firstName\n\n    cy.openFieldConfiguration(\"name\");\n    cy.testJsontext(\"propertyname\", \"firstName\");\n    cy.wait(1000);\n    cy.get(backBtn).click({\n      force: true\n    }).wait(500); // Change accessor education -> college to education -> graduatingCollege\n\n    cy.openFieldConfiguration(\"education\");\n    cy.openFieldConfiguration(\"__array_item__\");\n    cy.openFieldConfiguration(\"college\");\n    cy.testJsontext(\"propertyname\", \"graduatingCollege\");\n    cy.wait(5000); // Verify if formState reflects accessor change\n\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).then($el => {\n      const formState = JSON.parse($el.text());\n      cy.wrap(formState).should(\"deep.equal\", expectedFieldStateChange);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FormBindings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"change field accessor should reflect in formData","suites":["JSON Form Widget Form Bindings"],"updatePoint":{"line":361,"column":54,"index":10039},"line":361,"code":"  it(\"change field accessor should reflect in formData\", () => {\n    const expectedFormDataChange = {\n      age: 30,\n      dob: \"10/12/1992\",\n      migrant: false,\n      address: {\n        street: \"Koramangala\",\n        city: \"Bangalore\"\n      },\n      hobbies: [\"travelling\", \"swimming\"],\n      education: [{\n        graduatingCollege: \"MIT\",\n        year: \"20/10/2014\"\n      }],\n      firstName: \"John\"\n    };\n    cy.openPropertyPane(\"jsonformwidget\"); // Change accessor name -> firstName\n\n    cy.openFieldConfiguration(\"name\");\n    cy.testJsontext(\"propertyname\", \"firstName\");\n    cy.wait(1000);\n    cy.get(backBtn).click({\n      force: true\n    }).wait(500); // Change accessor education -> college to education -> graduatingCollege\n\n    cy.openFieldConfiguration(\"education\");\n    cy.openFieldConfiguration(\"__array_item__\");\n    cy.openFieldConfiguration(\"college\");\n    cy.testJsontext(\"propertyname\", \"graduatingCollege\");\n    cy.wait(5000);\n    cy.openPropertyPane(\"textwidget\");\n    cy.testJsontext(\"text\", \"{{JSON.stringify(JSONForm1.formData)}}\");\n    cy.wait(1000); // Verify if formData reflects accessor change\n\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).then($el => {\n      const formData = JSON.parse($el.text());\n      cy.wrap(formData).should(\"deep.equal\", expectedFormDataChange);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FormBindings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should have all the fields under field configuration","suites":["JSON Form Widget Form Bindings"],"updatePoint":{"line":19,"column":58,"index":795},"line":19,"code":"  it(\"should have all the fields under field configuration\", () => {\n    cy.openPropertyPane(\"jsonformwidget\");\n    const fieldNames = [\"name\", \"age\", \"dob\", \"migrant\", \"address\", \"education\", \"hobbies\"];\n    fieldNames.forEach(fieldName => {\n      cy.get(`[data-rbd-draggable-id='${fieldName}']`).should(\"exist\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FormProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Field Configuration - adds new custom field","suites":["JSON Form Widget Form Bindings"],"updatePoint":{"line":26,"column":49,"index":1115},"line":26,"code":"  it(\"Field Configuration - adds new custom field\", () => {\n    cy.openPropertyPane(\"jsonformwidget\"); // Add new field\n\n    cy.get(commonlocators.jsonFormAddNewCustomFieldBtn).click({\n      force: true\n    }); // Check for the presence of newly added custom field\n\n    cy.get(`[data-rbd-draggable-id='customField1']`).should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FormProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Disabled Invalid Forms - disables the submit button when form has invalid field(s)","suites":["JSON Form Widget Form Bindings"],"updatePoint":{"line":35,"column":88,"index":1496},"line":35,"code":"  it(\"Disabled Invalid Forms - disables the submit button when form has invalid field(s)\", () => {\n    cy.get(\"button\").contains(\"Submit\").parent(\"button\").should(\"not.have.attr\", \"disabled\"); // make name field required\n\n    cy.openFieldConfiguration(\"name\");\n    cy.togglebar(`${propertyControlPrefix}-required input`);\n    cy.get(backBtn).click({\n      force: true\n    });\n    cy.get(`${fieldPrefix}-name input`).clear().wait(300);\n    cy.get(\"button\").contains(\"Submit\").parent(\"button\").should(\"have.attr\", \"disabled\");\n    cy.get(`${fieldPrefix}-name input`).type(\"JOHN\").wait(300);\n    cy.get(\"button\").contains(\"Submit\").parent(\"button\").should(\"not.have.attr\", \"disabled\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FormProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Should set isValid to false when form is invalid","suites":["JSON Form Widget Form Bindings"],"updatePoint":{"line":48,"column":54,"index":2151},"line":48,"code":"  it(\"Should set isValid to false when form is invalid\", () => {\n    cy.openPropertyPane(\"textwidget\");\n    cy.testJsontext(\"text\", \"{{JSONForm1.isValid}}\");\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).contains(\"true\");\n    cy.get(`${fieldPrefix}-name input`).clear().wait(300);\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).contains(\"false\");\n    cy.get(`${fieldPrefix}-name input`).type(\"JOHN\").wait(300);\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).contains(\"true\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FormProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"show show icon select when a collapsed section is opened","suites":["JSON Form Widget Form Bindings"],"updatePoint":{"line":57,"column":62,"index":2660},"line":57,"code":"  it(\"show show icon select when a collapsed section is opened\", () => {\n    cy.openPropertyPane(\"jsonformwidget\"); // Check Submit Button Styles hidden\n\n    cy.get(submitButtonStylesSection).should(\"not.be.visible\"); // .parent()\n    // .should(\"have.attr\", \"aria-hidden\", \"true\");\n    // Open Submit Button Section\n\n    cy.get(\".t--property-pane-section-collapse-submitbuttonstyles\").click({\n      force: true\n    }); // Click Icon property\n\n    cy.get(submitButtonStylesSection).contains(\"(none)\").parent().click({\n      force: true\n    }); // Check if icon selector opened\n\n    cy.get(\".bp3-select-popover .virtuoso-grid-item\").should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FormProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Should set isValid to false on first load when form is invalid","suites":["JSON Form Widget Form Bindings"],"updatePoint":{"line":74,"column":68,"index":3326},"line":74,"code":"  it(\"Should set isValid to false on first load when form is invalid\", () => {\n    cy.addDsl(dslWithoutSchema);\n    const schema = {\n      name: \"\"\n    };\n    cy.openPropertyPane(\"textwidget\");\n    cy.testJsontext(\"text\", \"{{JSONForm1.isValid}}\");\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.testJsontext(\"sourcedata\", JSON.stringify(schema)); // make name field required\n\n    cy.openFieldConfiguration(\"name\");\n    cy.togglebar(`${propertyControlPrefix}-required input`);\n    cy.PublishtheApp();\n    cy.get(\".t--widget-textwidget .bp3-ui-text\").contains(\"false\");\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FormProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Should set isValid to false on reset when form is invalid","suites":["JSON Form Widget Form Bindings"],"updatePoint":{"line":92,"column":63,"index":3969},"line":92,"code":"  it(\"Should set isValid to false on reset when form is invalid\", () => {\n    cy.addDsl(dslWithoutSchema);\n    const schema = {\n      name: \"\"\n    };\n    cy.openPropertyPane(\"textwidget\");\n    cy.testJsontext(\"text\", \"{{JSONForm1.isValid}}\");\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.testJsontext(\"sourcedata\", JSON.stringify(schema)); // make name field required\n\n    cy.openFieldConfiguration(\"name\");\n    cy.togglebar(`${propertyControlPrefix}-required input`);\n    cy.PublishtheApp();\n    cy.get(\".t--widget-textwidget .bp3-ui-text\").contains(\"false\"); // Click reset button\n\n    cy.get(\"button\").contains(\"Reset\").click({\n      force: true\n    });\n    cy.get(\".t--widget-textwidget .bp3-ui-text\").contains(\"false\"); // Type JOHN in name field\n\n    cy.get(`${fieldPrefix}-name input`).type(\"JOHN\");\n    cy.get(\".t--widget-textwidget .bp3-ui-text\").contains(\"true\"); // Click reset button\n\n    cy.get(\"button\").contains(\"Reset\").click({\n      force: true\n    });\n    cy.get(\".t--widget-textwidget .bp3-ui-text\").contains(\"false\");\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_FormProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"can hide Array Field","suites":["JSON Form Hidden fields"],"updatePoint":{"line":70,"column":26,"index":2667},"line":70,"code":"  it(\"can hide Array Field\", () => {\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.openFieldConfiguration(\"education\");\n    hideAndVerifyProperties(\"education\", [{\n      college: \"MIT\",\n      year: \"20/10/2014\"\n    }]);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_HiddenFields_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"can hide Array Field's inner fields","suites":["JSON Form Hidden fields"],"updatePoint":{"line":78,"column":41,"index":2912},"line":78,"code":"  it(\"can hide Array Field's inner fields\", () => {\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.openFieldConfiguration(\"education\");\n    cy.openFieldConfiguration(\"__array_item__\");\n    cy.openFieldConfiguration(\"college\");\n    hideAndVerifyProperties(\"education-0--college\", \"MIT\", formData => {\n      return formData.education[0].college;\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_HiddenFields_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"can hide Checkbox Field","suites":["JSON Form Hidden fields"],"updatePoint":{"line":87,"column":29,"index":3261},"line":87,"code":"  it(\"can hide Checkbox Field\", () => {\n    // Add new custom field\n    addCustomField(\"Checkbox\");\n    hideAndVerifyProperties(\"customField1\", true); // Remove custom field\n\n    removeCustomField();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_HiddenFields_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"can hide Currency Field","suites":["JSON Form Hidden fields"],"updatePoint":{"line":94,"column":29,"index":3467},"line":94,"code":"  it(\"can hide Currency Field\", () => {\n    const defaultValue = 1000; // Add new custom field\n\n    addCustomField(\"Currency Input\");\n    cy.testJsontext(\"defaultvalue\", defaultValue);\n    hideAndVerifyProperties(\"customField1\", defaultValue);\n    removeCustomField();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_HiddenFields_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"can hide Date Field","suites":["JSON Form Hidden fields"],"updatePoint":{"line":102,"column":25,"index":3738},"line":102,"code":"  it(\"can hide Date Field\", () => {\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.openFieldConfiguration(\"dob\");\n    hideAndVerifyProperties(\"dob\", \"10/12/1992\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_HiddenFields_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"can hide Input Field","suites":["JSON Form Hidden fields"],"updatePoint":{"line":107,"column":26,"index":3912},"line":107,"code":"  it(\"can hide Input Field\", () => {\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.openFieldConfiguration(\"name\");\n    hideAndVerifyProperties(\"name\", \"John\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_HiddenFields_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"can hide Multiselect Field","suites":["JSON Form Hidden fields"],"updatePoint":{"line":112,"column":32,"index":4088},"line":112,"code":"  it(\"can hide Multiselect Field\", () => {\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.openFieldConfiguration(\"hobbies\");\n    hideAndVerifyProperties(\"hobbies\", [\"travelling\", \"swimming\"]);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_HiddenFields_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"can hide Object Field","suites":["JSON Form Hidden fields"],"updatePoint":{"line":117,"column":27,"index":4285},"line":117,"code":"  it(\"can hide Object Field\", () => {\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.openFieldConfiguration(\"address\");\n    hideAndVerifyProperties(\"address\", {\n      street: \"Koramangala\",\n      city: \"Bangalore\"\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_HiddenFields_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"can hide Phone Number Input Field","suites":["JSON Form Hidden fields"],"updatePoint":{"line":125,"column":39,"index":4528},"line":125,"code":"  it(\"can hide Phone Number Input Field\", () => {\n    const defaultValue = \"1000\"; // Add new custom field\n\n    addCustomField(\"Phone Number Input\");\n    cy.testJsontext(\"defaultvalue\", defaultValue);\n    hideAndVerifyProperties(\"customField1\", defaultValue);\n    removeCustomField();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_HiddenFields_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"can hide Radio Group Field","suites":["JSON Form Hidden fields"],"updatePoint":{"line":133,"column":32,"index":4812},"line":133,"code":"  it(\"can hide Radio Group Field\", () => {\n    const defaultValue = \"Y\"; // Add new custom field\n\n    addCustomField(\"Phone Number Input\");\n    cy.testJsontext(\"defaultvalue\", defaultValue);\n    hideAndVerifyProperties(\"customField1\", defaultValue);\n    removeCustomField();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_HiddenFields_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"can hide Select Field","suites":["JSON Form Hidden fields"],"updatePoint":{"line":141,"column":27,"index":5088},"line":141,"code":"  it(\"can hide Select Field\", () => {\n    const defaultValue = \"BLUE\"; // Add new custom field\n\n    addCustomField(/^Select/);\n    cy.testJsontext(\"defaultvalue\", defaultValue);\n    hideAndVerifyProperties(\"customField1\", defaultValue);\n    removeCustomField();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_HiddenFields_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"can hide Switch Field","suites":["JSON Form Hidden fields"],"updatePoint":{"line":149,"column":27,"index":5356},"line":149,"code":"  it(\"can hide Switch Field\", () => {\n    // Add new custom field\n    addCustomField(\"Switch\");\n    hideAndVerifyProperties(\"customField1\", true);\n    removeCustomField();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_HiddenFields_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"hides fields on first load","suites":["JSON Form Hidden fields"],"updatePoint":{"line":155,"column":32,"index":5539},"line":155,"code":"  it(\"hides fields on first load\", () => {\n    cy.openPropertyPane(\"jsonformwidget\"); // hide education field\n\n    cy.openFieldConfiguration(\"education\");\n    cy.togglebarDisable(\".t--property-control-visible input\");\n    cy.get(backBtn).click({\n      force: true\n    }).wait(500); // hide name field\n\n    cy.openFieldConfiguration(\"name\");\n    cy.togglebarDisable(\".t--property-control-visible input\"); // publish the app\n\n    cy.PublishtheApp(); // Check if name is hidden\n\n    cy.get(`${fieldPrefix}-name`).should(\"not.exist\"); // Check if education is hidden\n\n    cy.get(`${fieldPrefix}-education`).should(\"not.exist\"); // check if name and education are not present in form data\n\n    cy.get(\".t--widget-textwidget .bp3-ui-text\").then($el => {\n      const formData = JSON.parse($el.text());\n      cy.wrap(formData.name).should(\"deep.equal\", undefined);\n      cy.wrap(formData.education).should(\"deep.equal\", undefined);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_HiddenFields_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate calendar on clicking date field","suites":["Verify syntax to create Datpicker field type"],"updatePoint":{"line":16,"column":46,"index":559},"line":16,"code":"  it(\"Validate calendar on clicking date field\", () => {\n    cy.xpath(jsonform.datepickerContainer).click({\n      force: true\n    });\n    cy.get(jsonform.calendarPopup).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_MultipleSourceData_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate calendar on clicking date field","suites":["Verify syntax to boolean type"],"updatePoint":{"line":32,"column":46,"index":1012},"line":32,"code":"  it(\"Validate calendar on clicking date field\", () => {\n    cy.get(jsonform.switchStatus).should(\"be.visible\");\n    cy.get(jsonform.switchStatus).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_MultipleSourceData_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate email input field in form","suites":["Verify syntax to create email type"],"updatePoint":{"line":48,"column":40,"index":1466},"line":48,"code":"  it(\"Validate email input field in form\", () => {\n    cy.xpath(jsonform.emailField).should(\"be.visible\");\n    cy.xpath(jsonform.emailField).should(\"have.value\", \"Value@mail.com\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_MultipleSourceData_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate email input field in form","suites":["Verify syntax for Text type"],"updatePoint":{"line":62,"column":40,"index":1910},"line":62,"code":"  it(\"Validate email input field in form\", () => {\n    cy.get(jsonform.keyInput).should(\"be.visible\");\n    cy.get(jsonform.keyInput).should(\"have.value\", \"value\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_MultipleSourceData_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Modify a field to be mandatory","suites":["Verify mandatory field check and also submit button active/inactive"],"updatePoint":{"line":78,"column":36,"index":2433},"line":78,"code":"  it(\"Modify a field to be mandatory\", () => {\n    cy.get(jsonform.settings).first().should(\"be.visible\").click({\n      force: true\n    });\n    cy.wait(3000);\n    cy.get(jsonform.mandatoryAsterisk).should(\"not.exist\");\n    cy.get(jsonform.mandatoryFieldControl).should(\"be.visible\").click({\n      force: true\n    });\n    cy.wait(5000);\n    cy.get(jsonform.mandatoryAsterisk).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_MultipleSourceData_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checks when mandatory field is blank","suites":["Verify mandatory field check and also submit button active/inactive"],"updatePoint":{"line":90,"column":42,"index":2842},"line":90,"code":"  it(\"Checks when mandatory field is blank\", () => {\n    cy.get(jsonform.jsformInput).clear({\n      force: true\n    });\n    cy.get(jsonform.msg).should(\"have.text\", \"This field is required\");\n    cy.get(jsonform.submit).should(\"be.disabled\");\n    cy.get(jsonform.jsformInput).type(\"test Mandatory\");\n    cy.get(jsonform.msg).should(\"not.exist\");\n    cy.get(jsonform.submit).should(\"be.enabled\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_MultipleSourceData_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Modify property name and check how the binding value changes","suites":["Verify property name change with json/text widget binding"],"updatePoint":{"line":106,"column":66,"index":3441},"line":106,"code":"  it(\"Modify property name and check how the binding value changes\", () => {\n    cy.get(jsonform.settings).first().should(\"be.visible\").click({\n      force: true\n    });\n    cy.wait(3000);\n    cy.get(jsonform.propertyName).find(\".CodeMirror\").first().type(\"NewProperty\");\n    cy.wait(500);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_MultipleSourceData_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"accepts numeric options value","suites":["JSONForm RadioGroup Field"],"updatePoint":{"line":35,"column":35,"index":1216},"line":35,"code":"  it(\"accepts numeric options value\", () => {\n    cy.openPropertyPane(\"jsonformwidget\");\n    const schema = {\n      binary: 1\n    };\n    const radioFieldInput = `${fieldPrefix}-binary`;\n    const options = [{\n      label: \"Zero\",\n      value: 0\n    }, {\n      label: \"One\",\n      value: 1\n    }]; // Apply schema and change the field type to radio group\n\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.testJsontext(\"sourcedata\", JSON.stringify(schema));\n    cy.openFieldConfiguration(\"binary\");\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, /^Radio Group$/);\n    clearOptionsProperty();\n    cy.testJsontext(\"options\", JSON.stringify(options));\n    cy.wait(2000); // Validate initial form data\n\n    cy.get(`.t--widget-textwidget .bp3-ui-text`).then($el => {\n      const formData = JSON.parse($el.text());\n      cy.wrap(formData).should(\"deep.equal\", {\n        binary: 1\n      });\n    }); // Select Zero Option\n\n    selectAndValidateOption(radioFieldInput, options[0], {\n      binary: 0\n    }); // Select One Option\n\n    selectAndValidateOption(radioFieldInput, options[1], {\n      binary: 1\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_RadioGroupField_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"accepts string options value","suites":["JSONForm RadioGroup Field"],"updatePoint":{"line":72,"column":34,"index":2337},"line":72,"code":"  it(\"accepts string options value\", () => {\n    cy.openPropertyPane(\"jsonformwidget\");\n    const schema = {\n      accept: \"N\"\n    };\n    const radioFieldInput = `${fieldPrefix}-accept`;\n    const options = [{\n      label: \"Yes\",\n      value: \"Y\"\n    }, {\n      label: \"No\",\n      value: \"N\"\n    }]; // Apply schema and change the field type to radio group\n\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.testJsontext(\"sourcedata\", JSON.stringify(schema));\n    cy.openFieldConfiguration(\"accept\");\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, /^Radio Group$/);\n    clearOptionsProperty();\n    cy.testJsontext(\"options\", JSON.stringify(options));\n    cy.wait(2000); // Validate initial form data\n\n    cy.get(`.t--widget-textwidget .bp3-ui-text`).then($el => {\n      const formData = JSON.parse($el.text());\n      cy.wrap(formData).should(\"deep.equal\", {\n        accept: \"N\"\n      });\n    }); // Select Y Option\n\n    selectAndValidateOption(radioFieldInput, options[0], {\n      accept: \"Y\"\n    }); // Select N Option\n\n    selectAndValidateOption(radioFieldInput, options[1], {\n      accept: \"N\"\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_RadioGroupField_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"updates formData when field value changes","suites":["JSON Form reset"],"updatePoint":{"line":8,"column":47,"index":268},"line":8,"code":"  it(\"updates formData when field value changes\", () => {\n    const initialFormData = {\n      age: 30,\n      dob: \"10/12/1992\",\n      migrant: false,\n      address: {\n        street: \"Koramangala\",\n        city: \"Bangalore\"\n      },\n      hobbies: [\"travelling\", \"swimming\"],\n      education: [{\n        college: \"MIT\",\n        year: \"20/10/2014\"\n      }],\n      name: \"John\"\n    };\n    const updatedFormData = {\n      age: 40,\n      dob: \"10/12/1992\",\n      migrant: false,\n      address: {\n        street: \"Indranagar\",\n        city: \"Bangalore\"\n      },\n      hobbies: [\"travelling\"],\n      education: [{\n        college: \"IIT\",\n        year: \"20/10/2014\"\n      }],\n      name: \"Test\"\n    }; // Verify current field values\n\n    cy.get(`${fieldPrefix}-name input`).should(\"have.value\", initialFormData.name);\n    cy.get(`${fieldPrefix}-age input`).should(\"have.value\", initialFormData.age);\n    cy.get(`${fieldPrefix}-dob input`).should(\"have.value\", initialFormData.dob);\n    cy.get(`${fieldPrefix}-address-street input`).should(\"have.value\", initialFormData.address.street);\n    cy.get(`${fieldPrefix}-address-city input`).should(\"have.value\", initialFormData.address.city);\n    cy.get(`${fieldPrefix}-education-0--college input`).should(\"have.value\", initialFormData.education[0].college);\n    cy.get(`${fieldPrefix}-education-0--year input`).should(\"have.value\", initialFormData.education[0].year); // Modify field values\n\n    cy.get(`${fieldPrefix}-name input`).clear({\n      force: true\n    }).type(updatedFormData.name);\n    cy.get(`${fieldPrefix}-age input`).clear({\n      force: true\n    }).clear({\n      force: true\n    }).type(updatedFormData.age);\n    cy.get(`${fieldPrefix}-address-street input`).clear({\n      force: true\n    }).type(updatedFormData.address.street);\n    cy.get(`${fieldPrefix}-hobbies .rc-select-selection-item`).contains(\"swimming\").siblings(\".rc-select-selection-item-remove\").click({\n      force: true\n    });\n    cy.get(`${fieldPrefix}-education-0--college input`).clear({\n      force: true\n    }).type(updatedFormData.education[0].college).wait(200); // Verify new field values\n\n    cy.get(`${fieldPrefix}-name input`).should(\"have.value\", updatedFormData.name);\n    cy.get(`${fieldPrefix}-age input`).should(\"have.value\", updatedFormData.age);\n    cy.get(`${fieldPrefix}-dob input`).should(\"have.value\", updatedFormData.dob);\n    cy.get(`${fieldPrefix}-address-street input`).should(\"have.value\", updatedFormData.address.street);\n    cy.get(`${fieldPrefix}-address-city input`).should(\"have.value\", updatedFormData.address.city);\n    cy.get(`${fieldPrefix}-education-0--college input`).should(\"have.value\", updatedFormData.education[0].college);\n    cy.get(`${fieldPrefix}-education-0--year input`).should(\"have.value\", updatedFormData.education[0].year); // Reset form\n\n    cy.get(\"button\").contains(\"Reset\").parent(\"button\").click({\n      force: true\n    }); // Verify initial field values\n\n    cy.get(`${fieldPrefix}-name input`).should(\"have.value\", initialFormData.name);\n    cy.get(`${fieldPrefix}-age input`).should(\"have.value\", initialFormData.age);\n    cy.get(`${fieldPrefix}-dob input`).should(\"have.value\", initialFormData.dob);\n    cy.get(`${fieldPrefix}-address-street input`).should(\"have.value\", initialFormData.address.street);\n    cy.get(`${fieldPrefix}-address-city input`).should(\"have.value\", initialFormData.address.city);\n    cy.get(`${fieldPrefix}-education-0--college input`).should(\"have.value\", initialFormData.education[0].college);\n    cy.get(`${fieldPrefix}-education-0--year input`).should(\"have.value\", initialFormData.education[0].year);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_Reset_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"generates fields with valid source data json","suites":["JSON Form Widget Unicode keys"],"updatePoint":{"line":10,"column":50,"index":472},"line":10,"code":"  it(\"generates fields with valid source data json\", () => {\n    cy.addDsl(dslWithoutSchema);\n    const sourceData = {\n      नाम: \"John\",\n      суроға: {\n        شارع: \"Koramangala\"\n      },\n      การศึกษา: [{\n        କଲେଜ: \"MIT\"\n      }]\n    };\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.testJsontext(\"sourcedata\", JSON.stringify(sourceData));\n    cy.closePropertyPane();\n    cy.get(`${fieldPrefix}-xn__l2bm1c label`).contains(\"नाम\");\n    cy.get(`${fieldPrefix}-xn__l2bm1c input`).then(input => {\n      cy.wrap(input).should(\"have.value\", \"John\");\n      cy.wrap(input).invoke(\"attr\", \"type\").should(\"contain\", \"text\");\n    });\n    cy.get(`${fieldPrefix}-xn__80a1afdk69b label`).should(\"have.length\", 2);\n    cy.get(`${fieldPrefix}-xn__80a1afdk69b-xn__mgbuhw label`).contains(\"شارع\");\n    cy.get(`${fieldPrefix}-xn__80a1afdk69b-xn__mgbuhw input`).then(input => {\n      cy.wrap(input).should(\"have.value\", \"Koramangala\");\n      cy.wrap(input).invoke(\"attr\", \"type\").should(\"contain\", \"text\");\n    });\n    cy.get(`${fieldPrefix}-xn__12ca5huag4ce3a label`).should(\"have.length\", 2);\n    cy.get(`${fieldPrefix}-xn__12ca5huag4ce3a-0--xn__ohco9d4d label`).contains(\"କଲେଜ\");\n    cy.get(`${fieldPrefix}-xn__12ca5huag4ce3a-0--xn__ohco9d4d input`).then(input => {\n      cy.wrap(input).should(\"have.value\", \"MIT\");\n      cy.wrap(input).invoke(\"attr\", \"type\").should(\"contain\", \"text\");\n    });\n    cy.get(`${fieldPrefix}-xn__12ca5huag4ce3a .t--jsonformfield-array-delete-btn .t--text`).should(\"have.text\", \"Delete\");\n    cy.get(`${fieldPrefix}-xn__12ca5huag4ce3a .t--jsonformfield-array-add-btn .t--text`).should(\"have.text\", \"Add New\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_UnicodeKeys_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"modifies field when source data changes","suites":["JSON Form Widget Unicode keys"],"updatePoint":{"line":44,"column":45,"index":2107},"line":44,"code":"  it(\"modifies field when source data changes\", () => {\n    cy.addDsl(jsonFormUnicodeDSLWithoutSourceData);\n    const modifiedSourceData = {\n      \"पहला नाम\": \"John\",\n      \"अंतिम नाम\": \"Doe\",\n      суроға: {\n        شارع: \"Koramangala\"\n      },\n      การศึกษา: [{\n        କଲେଜ: \"MIT\",\n        卒業の日: \"21/03/2010\"\n      }]\n    };\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.testJsontext(\"sourcedata\", JSON.stringify(modifiedSourceData));\n    cy.closePropertyPane();\n    cy.get(`${fieldPrefix}-xn____xvdesr5bxbc label`).contains(\"पहला नाम\");\n    cy.get(`${fieldPrefix}-xn____xvdesr5bxbc input`).then(input => {\n      cy.wrap(input).should(\"have.value\", \"John\");\n      cy.wrap(input).invoke(\"attr\", \"type\").should(\"contain\", \"text\");\n    });\n    cy.get(`${fieldPrefix}-xn____qtdi9jva8ac1kf label`).contains(\"अंतिम नाम\");\n    cy.get(`${fieldPrefix}-xn____qtdi9jva8ac1kf input`).then(input => {\n      cy.wrap(input).should(\"have.value\", \"Doe\");\n      cy.wrap(input).invoke(\"attr\", \"type\").should(\"contain\", \"text\");\n    });\n    cy.get(`${fieldPrefix}-xn__80a1afdk69b label`).should(\"have.length\", 2);\n    cy.get(`${fieldPrefix}-xn__80a1afdk69b-xn__mgbuhw label`).contains(\"شارع\");\n    cy.get(`${fieldPrefix}-xn__80a1afdk69b-xn__mgbuhw input`).then(input => {\n      cy.wrap(input).should(\"have.value\", \"Koramangala\");\n      cy.wrap(input).invoke(\"attr\", \"type\").should(\"contain\", \"text\");\n    });\n    cy.get(`${fieldPrefix}-xn__12ca5huag4ce3a label`).should(\"have.length\", 3);\n    cy.get(`${fieldPrefix}-xn__12ca5huag4ce3a-0--xn__ohco9d4d label`).contains(\"କଲେଜ\");\n    cy.get(`${fieldPrefix}-xn__12ca5huag4ce3a-0--xn__ohco9d4d input`).then(input => {\n      cy.wrap(input).should(\"have.value\", \"MIT\");\n      cy.wrap(input).invoke(\"attr\", \"type\").should(\"contain\", \"text\");\n    });\n    cy.get(`${fieldPrefix}-xn__12ca5huag4ce3a-0--xn__u9j436hvxmjkd label`).contains(\"卒業の日\");\n    cy.get(`${fieldPrefix}-xn__12ca5huag4ce3a-0--xn__u9j436hvxmjkd input`).then(input => {\n      cy.wrap(input).should(\"have.value\", \"21/03/2010\");\n      cy.wrap(input).invoke(\"attr\", \"type\").should(\"contain\", \"text\");\n    });\n    cy.get(`${fieldPrefix}-xn__12ca5huag4ce3a .t--jsonformfield-array-delete-btn .t--text`).should(\"have.text\", \"Delete\");\n    cy.get(`${fieldPrefix}-xn__12ca5huag4ce3a .t--jsonformfield-array-add-btn .t--text`).should(\"have.text\", \"Add New\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_UnicodeKeys_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"change in accessor updates formData","suites":["JSON Form Widget Unicode keys"],"updatePoint":{"line":90,"column":41,"index":4453},"line":90,"code":"  it(\"change in accessor updates formData\", () => {\n    cy.addDsl(jsonFormUnicodeDSLWithoutSourceData);\n    const sourceData = {\n      नाम: \"John\",\n      суроға: {\n        شارع: \"Koramangala\"\n      },\n      การศึกษา: [{\n        କଲେଜ: \"MIT\"\n      }]\n    };\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.testJsontext(\"sourcedata\", JSON.stringify(sourceData));\n    cy.closePropertyPane();\n    const expectedInitialFormData = sourceData;\n    const formDataBeforeArrayAccessorChange = {\n      \"नाम नाम\": \"John\",\n      суроға: {\n        \"شارع1 شارع\": \"Koramangala\"\n      },\n      การศึกษา: [{\n        କଲେଜ: \"MIT\"\n      }]\n    };\n    const formDataAfterArrayAccessorChange = {\n      \"नाम नाम\": \"John\",\n      суроға: {\n        \"شارع1 شارع\": \"Koramangala\"\n      },\n      การศึกษา: [{\n        \"ସ୍ନାତକ କଲେଜ\": \"MIT\"\n      }]\n    }; // Bind formData to Text1 widget text property\n\n    cy.openPropertyPane(\"textwidget\");\n    cy.testJsontext(\"text\", \"{{JSON.stringify(JSONForm1.formData)}}\");\n    cy.closePropertyPane(); // Validate initial form data\n\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).then($el => {\n      const formData = JSON.parse($el.text());\n      cy.wrap(formData).should(\"deep.equal\", expectedInitialFormData);\n    });\n    cy.openPropertyPane(\"jsonformwidget\"); // नाम field\n\n    cy.openFieldConfiguration(\"xn__l2bm1c\");\n    cy.testJsontext(\"propertyname\", \"नाम नाम\");\n    cy.get(backBtn).click({\n      force: true\n    }).wait(500); // open field суроға -> شارع\n\n    cy.openFieldConfiguration(\"xn__80a1afdk69b\");\n    cy.openFieldConfiguration(\"xn__mgbuhw\");\n    cy.testJsontext(\"propertyname\", \"شارع1 شارع\");\n    cy.get(backBtn).click({\n      force: true\n    }).wait(500);\n    cy.get(backBtn).click({\n      force: true\n    }).wait(500); // Validate initial form data\n\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).then($el => {\n      const formData = JSON.parse($el.text());\n      cy.wrap(formData).should(\"deep.equal\", formDataBeforeArrayAccessorChange);\n    }); // open field การศึกษา -> array item -> କଲେଜ\n\n    cy.openFieldConfiguration(\"xn__12ca5huag4ce3a\");\n    cy.openFieldConfiguration(\"__array_item__\");\n    cy.openFieldConfiguration(\"xn__ohco9d4d\");\n    cy.testJsontext(\"propertyname\", \"ସ୍ନାତକ କଲେଜ\");\n    cy.wait(5000); // Validate initial form data\n\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).then($el => {\n      const formData = JSON.parse($el.text());\n      cy.wrap(formData).should(\"deep.equal\", formDataAfterArrayAccessorChange);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONForm_UnicodeKeys_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should show the JSONForm with default values from Table widget","suites":["JSONForm in Modal"],"updatePoint":{"line":34,"column":68,"index":1331},"line":34,"code":"  it(\"should show the JSONForm with default values from Table widget\", () => {\n    const tableData = [{\n      step: \"#1\",\n      task: \"Drop a table\",\n      status: \"Done\",\n      action: \"\"\n    }, {\n      step: \"#2\",\n      task: \"Create a query fetch_users with the Mock DB\",\n      status: \"Pending\",\n      action: \"\"\n    }, {\n      step: \"#3\",\n      task: \"Bind the query using => fetch_users.data\",\n      status: \"New\",\n      action: \"\"\n    }];\n    cy.addDsl(jsonFormInModalDsl);\n    cy.PublishtheApp(); // Click action button of first row\n\n    cy.get(\".t--widget-tablewidget .tableWrap\").find(\"button\").first().click({\n      force: true\n    }); // Check the contents of the form\n\n    checkFormModalValues(tableData[0]); // Click action button of third row\n\n    cy.get(\".t--widget-tablewidget .tableWrap\").find(\"button\").last().click({\n      force: true\n    });\n    checkFormModalValues(tableData[2]);\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/JSONFormWidget/JSONFrom_Modal_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate text widget data based on changes in list widget Data1","suites":["Binding the list widget with text widget"],"updatePoint":{"line":14,"column":69,"index":598},"line":14,"code":"  it(\"Validate text widget data based on changes in list widget Data1\", function () {\n    cy.PublishtheApp();\n    cy.wait(2000);\n    cy.get(\".t--widget-textwidget span:contains('Vivek')\").should(\"have.length\", 1);\n    cy.get(\".t--widget-textwidget span:contains('Pawan')\").should(\"have.length\", 1);\n    cy.get(publish.backToEditor).click({\n      force: true\n    });\n    cy.get(\".t--text-widget-container:contains('Vivek')\").should(\"have.length\", 1);\n    cy.get(\".t--text-widget-container:contains('Vivek')\").should(\"have.length\", 1);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/List/List1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate text widget data based on changes in list widget Data2","suites":["Binding the list widget with text widget"],"updatePoint":{"line":25,"column":69,"index":1138},"line":25,"code":"  it(\"Validate text widget data based on changes in list widget Data2\", function () {\n    cy.SearchEntityandOpen(\"List1\");\n    jsEditor.EnterJSContext(\"Items\", '[[{ \"name\": \"pawan\"}, { \"name\": \"Vivek\" }], [{ \"name\": \"Ashok\"}, {\"name\": \"rahul\"}]]');\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.SearchEntityandOpen(\"Text3\");\n    cy.wait(1000);\n    jsEditor.EnterJSContext(\"Text\", '{{currentItem.map(item => item.name).join(\", \")}}');\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.PublishtheApp();\n    cy.wait(2000);\n    cy.get(\".t--widget-textwidget span:contains('pawan, Vivek')\").should(\"have.length\", 1);\n    cy.get(\".t--widget-textwidget span:contains('Ashok, rahul')\").should(\"have.length\", 1);\n    cy.get(publish.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/List/List1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate text widget data based on changes in list widget Data3","suites":["Binding the list widget with text widget"],"updatePoint":{"line":41,"column":69,"index":2039},"line":41,"code":"  it(\"Validate text widget data based on changes in list widget Data3\", function () {\n    cy.SearchEntityandOpen(\"List1\");\n    jsEditor.EnterJSContext(\"Items\", '[{ \"name\": \"pawan\"}, { \"name\": \"Vivek\" }]');\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.SearchEntityandOpen(\"Text3\");\n    cy.wait(1000);\n    jsEditor.EnterJSContext(\"Text\", \"{{currentItem.name}}\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.PublishtheApp();\n    cy.wait(2000);\n    cy.get(\".t--widget-textwidget span:contains('Vivek')\").should(\"have.length\", 2);\n    cy.get(\".t--widget-textwidget span:contains('pawan')\").should(\"have.length\", 2);\n    cy.get(publish.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/List/List1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate delete widget action from side bar","suites":["Binding the list widget with text widget"],"updatePoint":{"line":57,"column":49,"index":2834},"line":57,"code":"  it(\"Validate delete widget action from side bar\", function () {\n    cy.openPropertyPane(\"listwidget\");\n    cy.verifyUpdatedWidgetName(\"Test\");\n    cy.get(commonlocators.editWidgetName).click({\n      force: true\n    }).type(\"#$%1234\", {\n      delay: 300\n    }).type(\"{enter}\");\n    cy.get(\".t--widget-name\").contains(\"___1234\");\n    cy.verifyUpdatedWidgetName(\"12345\");\n    cy.get(\".t--delete-widget\").click({\n      force: true\n    });\n    cy.get(\".t--toast-action span\").eq(0).contains(\"12345 is removed\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/List/List1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should validate that restricted widgets cannot be added to List","suites":["List Widget Functionality"],"updatePoint":{"line":11,"column":69,"index":381},"line":11,"code":"  it(\"should validate that restricted widgets cannot be added to List\", () => {\n    cy.get(explorer.widgetSwitchId).click();\n    const allowed = [\"audiowidget\", \"buttongroupwidget\", \"buttonwidget\", \"chartwidget\", \"checkboxwidget\", \"checkboxgroupwidget\", \"dividerwidget\", \"iconbuttonwidget\", \"iframewidget\", \"imagewidget\", \"inputwidgetv2\", \"mapchartwidget\", \"mapwidget\", \"menubuttonwidget\", \"progresswidget\", \"statboxwidget\", \"switchwidget\", \"switchgroupwidget\", \"textwidget\", \"videowidget\"];\n    const disallowed = [\"containerwidget\", \"tablewidgetv2\", \"radiogroupwidget\", \"tabswidget\", \"richtexteditorwidget\", \"datepickerwidget2\", \"formwidget\", \"listwidget\", \"filepickerwidgetv2\", \"audiorecorderwidget\", \"documentviewerwidget\", \"multiselecttreewidget\", \"singleselecttreewidget\", \"camerawidget\", \"selectwidget\", \"multiselectwidgetv2\", \"phoneinputwidget\", \"currencyinputwidget\"];\n    allowed.forEach(widget => {\n      cy.dragAndDropToWidget(widget, \"listwidget\", {\n        x: 50,\n        y: 50\n      });\n      cy.assertPageSave();\n      cy.get(`.t--draggable-${widget}`).should(\"exist\");\n      cy.get(widgetsPage.removeWidget).click({\n        force: true\n      });\n      cy.wait(\"@updateLayout\");\n    });\n    disallowed.forEach(widget => {\n      cy.dragAndDropToWidget(widget, \"listwidget\", {\n        x: 50,\n        y: 50\n      });\n      cy.validateToastMessage(\"This widget cannot be used inside the list widget.\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/List/List2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate text widget data based on changes in list widget Data3","suites":["Binding the list widget with text widget"],"updatePoint":{"line":10,"column":69,"index":401},"line":10,"code":"  it(\"Validate text widget data based on changes in list widget Data3\", function () {\n    cy.PublishtheApp();\n    cy.wait(5000);\n    cy.get(\".t--widget-textwidget span:contains('Vivek')\").should(\"have.length\", 2);\n    cy.get(\".t--widget-textwidget span:contains('pawan')\").should(\"have.length\", 2);\n    cy.get(publish.backToEditor).click({\n      force: true\n    });\n    cy.get(\".t--text-widget-container:contains('Vivek')\").should(\"have.length\", 2);\n    cy.get(\".t--text-widget-container:contains('pawan')\").should(\"have.length\", 2);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/List/List3_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. List-Unckeck Visible field Validation","suites":["Container Widget Functionality"],"updatePoint":{"line":16,"column":46,"index":551},"line":16,"code":"  it(\"1. List-Unckeck Visible field Validation\", function () {\n    // Open Property pane\n    cy.CheckAndUnfoldEntityItem(\"WIDGETS\");\n    cy.selectEntityByName(\"List1\"); //Uncheck the disabled checkbox and validate\n\n    cy.UncheckWidgetProperties(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(widgetsPage.listWidget).should(\"not.exist\");\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/List/List4_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. List-Check Visible field Validation","suites":["Container Widget Functionality"],"updatePoint":{"line":28,"column":44,"index":985},"line":28,"code":"  it(\"2. List-Check Visible field Validation\", function () {\n    // Open Property pane\n    cy.CheckAndUnfoldEntityItem(\"WIDGETS\");\n    cy.selectEntityByName(\"List1\"); //Check the disableed checkbox and Validate\n\n    cy.CheckWidgetProperties(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(widgetsPage.listWidget).should(\"be.visible\");\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/List/List4_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Toggle JS - List-Unckeck Visible field Validation","suites":["Container Widget Functionality"],"updatePoint":{"line":40,"column":58,"index":1431},"line":40,"code":"  it(\"3. Toggle JS - List-Unckeck Visible field Validation\", function () {\n    // Open Property pane\n    cy.CheckAndUnfoldEntityItem(\"WIDGETS\");\n    cy.selectEntityByName(\"List1\"); //Uncheck the disabled checkbox using JS and validate\n\n    cy.get(widgetsPage.toggleVisible).click({\n      force: true\n    });\n    cy.testJsontext(\"visible\", \"false\");\n    cy.PublishtheApp();\n    cy.get(widgetsPage.listWidget).should(\"not.exist\");\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/List/List4_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Toggle JS - List-Check Visible field Validation","suites":["Container Widget Functionality"],"updatePoint":{"line":55,"column":56,"index":1935},"line":55,"code":"  it(\"4. Toggle JS - List-Check Visible field Validation\", function () {\n    // Open Property pane\n    cy.CheckAndUnfoldEntityItem(\"WIDGETS\");\n    cy.selectEntityByName(\"List1\"); //Check the disabled checkbox using JS and Validate\n\n    cy.testJsontext(\"visible\", \"true\");\n    cy.PublishtheApp();\n    cy.get(widgetsPage.listWidget).should(\"be.visible\");\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/List/List4_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. checks if list shows correct no. of items","suites":["Container Widget Functionality"],"updatePoint":{"line":67,"column":50,"index":2359},"line":67,"code":"  it(\"5. checks if list shows correct no. of items\", function () {\n    // Verify the length of list\n    cy.get(commonlocators.containerWidget).then(function ($lis) {\n      expect($lis).to.have.length(2);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/List/List4_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. checks currentItem binding","suites":["Container Widget Functionality"],"updatePoint":{"line":73,"column":35,"index":2562},"line":73,"code":"  it(\"6. checks currentItem binding\", function () {\n    // Open property pane\n    cy.CheckAndUnfoldEntityItem(\"WIDGETS\");\n    cy.CheckAndUnfoldEntityItem(\"List1\");\n    cy.CheckAndUnfoldEntityItem(\"Container1\");\n    cy.selectEntityByName(\"Text1\"); //cy.SearchEntityandOpen(\"Text1\");\n\n    cy.testJsontext(\"text\", `{{currentItem.first_name}}`);\n    cy.wait(1000);\n    cy.closePropertyPane(); // Verify Current Item Bindings\n\n    cy.get(commonlocators.TextInside).then(function ($lis) {\n      expect($lis.eq(0)).to.contain(items[0].first_name);\n      expect($lis.eq(1)).to.contain(items[1].first_name);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/List/List4_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. doesn't alter the no of items present when invalid item spacing is entered","suites":["Container Widget Functionality"],"updatePoint":{"line":89,"column":83,"index":3223},"line":89,"code":"  it(\"7. doesn't alter the no of items present when invalid item spacing is entered\", () => {\n    // Open Property pane\n    cy.CheckAndUnfoldEntityItem(\"WIDGETS\");\n    cy.selectEntityByName(\"List1\"); // Update an invalid value to item spacing\n\n    cy.testJsontext(\"itemspacing\\\\(\" + \"px\" + \"\\\\)\", \"-\");\n    cy.wait(2000); // Verify the length of list\n\n    cy.get(commonlocators.containerWidget).then(function ($lis) {\n      expect($lis).to.have.length(2);\n    }); // Clear item spacing\n\n    cy.testJsontext(\"itemspacing\\\\(\" + \"px\" + \"\\\\)\", \"\");\n    cy.wait(2000); // Close property pane\n\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/List/List4_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. checks button action","suites":["Container Widget Functionality"],"updatePoint":{"line":106,"column":29,"index":3791},"line":106,"code":"  it(\"8. checks button action\", function () {\n    // Open property pane\n    cy.CheckAndUnfoldEntityItem(\"WIDGETS\");\n    cy.CheckAndUnfoldEntityItem(\"List1\");\n    cy.CheckAndUnfoldEntityItem(\"Container1\");\n    cy.selectEntityByName(\"Button1\"); //cy.SearchEntityandOpen(\"Button1\");\n\n    cy.testJsontext(\"label\", `{{currentItem.last_name}}`);\n    cy.addAction(\"{{currentItem.last_name}}\");\n    cy.PublishtheApp(); // Verify Widget Button by clicking on it\n\n    cy.get(widgetsPage.widgetBtn).closest(\"div\").first().click({\n      force: true\n    }); // Verify the click on first button\n\n    cy.get(commonlocators.toastmsg).contains(items[0].last_name);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/List/List4_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"9. it checks onListItem click action","suites":["Container Widget Functionality"],"updatePoint":{"line":123,"column":42,"index":4458},"line":123,"code":"  it(\"9. it checks onListItem click action\", function () {\n    // Verify Clicking on list item shows message of first name\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    }); // Open property pane\n\n    cy.CheckAndUnfoldEntityItem(\"WIDGETS\");\n    cy.selectEntityByName(\"List1\"); // Verify Action type and Message of List Item\n    // Click on the onListItemClick action dropdown.\n\n    cy.get(commonlocators.dropdownSelectButton).last().click();\n    cy.get(commonlocators.chooseAction).children().contains(\"Show message\").click(); // Write binding inside the Message code textarea\n\n    cy.contains(\"Message\").siblings().last().find(\".CodeMirror textarea\").focus().type(\"{{currentItem.first_name}}\", {\n      force: true,\n      parseSpecialCharSequences: false\n    });\n    cy.PublishtheApp(); // Click on list first item\n\n    cy.get(\"div[type='LIST_WIDGET'] .t--widget-containerwidget:first-child\").click(); // Verify the click on first item\n\n    cy.get(commonlocators.toastmsg).contains(items[0].first_name);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/List/List4_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"10. it checks pagination","suites":["Container Widget Functionality"],"updatePoint":{"line":146,"column":30,"index":5476},"line":146,"code":"  it(\"10. it checks pagination\", function () {\n    // clicking on second pagination button\n    cy.get(`${commonlocators.paginationButton}-2`).click(); // now we are on the second page which shows first the 3rd item in the list\n\n    cy.get(commonlocators.TextInside).then(function ($lis) {\n      expect($lis.eq(0)).to.contain(items[2].first_name);\n      expect($lis.eq(1)).to.contain(items[3].first_name);\n    });\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/List/List4_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"11. ListWidget-Copy & Delete Verification","suites":["Container Widget Functionality"],"updatePoint":{"line":158,"column":47,"index":5983},"line":158,"code":"  it(\"11. ListWidget-Copy & Delete Verification\", function () {\n    const modifierKey = Cypress.platform === \"darwin\" ? \"meta\" : \"ctrl\"; //Copy Chart and verify all properties\n\n    cy.CheckAndUnfoldEntityItem(\"WIDGETS\");\n    cy.selectEntityByName(\"List1\");\n    cy.copyWidget(\"List1Copy\", commonlocators.containerWidget);\n    cy.deleteWidget();\n    cy.PublishtheApp(); // Verify the copied list widget is deleted\n\n    cy.get(commonlocators.containerWidget).should(\"have.length\", 2);\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/List/List4_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"12. List widget background colour and deploy ","suites":["Container Widget Functionality"],"updatePoint":{"line":172,"column":51,"index":6546},"line":172,"code":"  it(\"12. List widget background colour and deploy \", function () {\n    // Open Property pane\n    cy.CheckAndUnfoldEntityItem(\"WIDGETS\");\n    cy.selectEntityByName(\"List1\"); // Scroll down to Styles and Add background colour\n\n    cy.selectColor(\"backgroundcolor\");\n    cy.wait(1000);\n    cy.selectColor(\"itembackgroundcolor\"); // Click on Deploy and ensure it is deployed appropriately\n\n    cy.PublishtheApp(); // Ensure List Background Color\n\n    cy.get(widgetsPage.listWidget).should(\"have.css\", \"background-color\", \"rgb(126, 34, 206)\"); // Verify List Item Background Color\n\n    cy.get(widgetsPage.itemContainerWidget).should(\"have.css\", \"background-color\", \"rgb(126, 34, 206)\");\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/List/List4_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"13. Toggle JS - List widget background colour and deploy ","suites":["Container Widget Functionality"],"updatePoint":{"line":190,"column":63,"index":7318},"line":190,"code":"  it(\"13. Toggle JS - List widget background colour and deploy \", function () {\n    // Open Property pane\n    cy.CheckAndUnfoldEntityItem(\"WIDGETS\");\n    cy.selectEntityByName(\"List1\"); // Scroll down to Styles and Add background colour\n\n    cy.get(widgetsPage.backgroundColorToggleNew).click({\n      force: true\n    });\n    cy.testJsontext(\"backgroundcolor\", \"#FFC13D\");\n    cy.wait(1000);\n    cy.get(widgetsPage.itemBackgroundColorToggle).click({\n      force: true\n    });\n    cy.testJsontext(\"itembackgroundcolor\", \"#38AFF4\"); // Click on Deploy and ensure it is deployed appropriately\n\n    cy.PublishtheApp(); // Ensure List Background Color\n\n    cy.get(widgetsPage.listWidget).should(\"have.css\", \"background-color\", \"rgb(255, 193, 61)\"); // Verify List Item Background Color\n\n    cy.get(widgetsPage.itemContainerWidget).should(\"have.css\", \"background-color\", \"rgb(56, 175, 244)\");\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/List/List4_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"14. Add new item in the list widget array object","suites":["Container Widget Functionality"],"updatePoint":{"line":214,"column":54,"index":8272},"line":214,"code":"  it(\"14. Add new item in the list widget array object\", function () {\n    // Open Property pane\n    cy.CheckAndUnfoldEntityItem(\"WIDGETS\");\n    cy.selectEntityByName(\"List1\"); //Add the new item in the list\n\n    cy.testJsontext(\"items\", JSON.stringify(this.data.ListItems));\n    cy.wait(2000);\n    cy.PublishtheApp();\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/List/List4_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"15. Adding large item Spacing for item card","suites":["Container Widget Functionality"],"updatePoint":{"line":226,"column":49,"index":8663},"line":226,"code":"  it(\"15. Adding large item Spacing for item card\", function () {\n    // Open Property pane\n    cy.CheckAndUnfoldEntityItem(\"WIDGETS\");\n    cy.selectEntityByName(\"List1\"); // Scroll down to Styles and Add item spacing for item card\n\n    cy.testJsontext(\"itemspacing\\\\(\" + \"px\" + \"\\\\)\", 12);\n    cy.wait(2000); // Click on Deploy and ensure it is deployed appropriately\n\n    cy.PublishtheApp();\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/List/List4_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"16. Renaming the widget from Property pane and Entity explorer ","suites":["Container Widget Functionality"],"updatePoint":{"line":239,"column":69,"index":9154},"line":239,"code":"  it(\"16. Renaming the widget from Property pane and Entity explorer \", function () {\n    // Open Property pane\n    cy.CheckAndUnfoldEntityItem(\"WIDGETS\");\n    cy.selectEntityByName(\"List1\"); // Change the list widget name from property pane and Verify it\n\n    cy.widgetText(\"List2\", widgetsPage.listWidgetName, widgetsPage.listWidgetName + \" \" + commonlocators.listWidgetNameTag); // Change the list widget name from Entity Explorer\n\n    cy.renameEntity(\"List2\", \"List1\"); // Mouse over to list name\n\n    cy.SearchEntityandOpen(\"List1\");\n    cy.get(widgetsPage.listWidgetName).first().trigger(\"mouseover\", {\n      force: true\n    }); // Verify the list name is changed\n\n    cy.contains(widgetsPage.listWidgetName + \" \" + commonlocators.listWidgetNameTag, \"List1\");\n    cy.PublishtheApp();\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/List/List4_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate text widget data based on changes in list widget Data2","suites":["Binding the list widget with text widget"],"updatePoint":{"line":10,"column":69,"index":401},"line":10,"code":"  it(\"Validate text widget data based on changes in list widget Data2\", function () {\n    cy.PublishtheApp();\n    cy.wait(5000);\n    cy.get(\".t--widget-textwidget span:contains('pawan,Vivek')\").should(\"have.length\", 1);\n    cy.get(\".t--widget-textwidget span:contains('Ashok,rahul')\").should(\"have.length\", 1);\n    cy.get(publish.backToEditor).click({\n      force: true\n    });\n    cy.get(\".t--text-widget-container:contains('pawan,Vivek')\").should(\"have.length\", 1);\n    cy.get(\".t--text-widget-container:contains('Ashok,rahul')\").should(\"have.length\", 1);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/List/List5_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Close the opened filter pane of the table","suites":["Modal Widget Functionality"],"updatePoint":{"line":9,"column":47,"index":288},"line":9,"code":"  it(\"Close the opened filter pane of the table\", () => {\n    const buttonSelector = widgets.buttonWidget;\n    const tableFilterPaneSelector = widgets.tableFilterPaneToggle;\n    const tableFilterRowSelector = widgets.tableFilterRow;\n    const modalSelector = widgets.modalWidget; // Open the filter pane of table\n\n    cy.get(tableFilterPaneSelector).click(); // Should open the filter pane\n\n    cy.get(tableFilterRowSelector).should(\"exist\"); // Open the modal\n\n    cy.get(buttonSelector).click(); // Should pop up the modal\n\n    cy.get(modalSelector).should(\"exist\"); // Should close the open filter pane of the table\n\n    cy.get(tableFilterRowSelector).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Modal_On_Table_Filter_Pane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Add new Modal","suites":["Modal Widget Functionality"],"updatePoint":{"line":13,"column":22,"index":396},"line":13,"code":"  it(\"1. Add new Modal\", () => {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"modalwidget\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(\".t--modal-widget\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Modal_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Open Existing Modal from created Widgets list","suites":["Modal Widget Functionality"],"updatePoint":{"line":21,"column":54,"index":634},"line":21,"code":"  it(\"2. Open Existing Modal from created Widgets list\", () => {\n    cy.get(\".t--entity-name\").contains(\"WIDGETS\").click();\n    cy.get(\".t--entity-name:contains(Modal1)\").click();\n    cy.get(\".t--modal-widget\").should(\"exist\");\n    cy.CreateAPI(\"FirstAPI\");\n    cy.get(\".t--entity-name:contains(Modal1)\").click();\n    cy.get(\".t--modal-widget\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Modal_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Display toast on close action","suites":["Modal Widget Functionality"],"updatePoint":{"line":29,"column":38,"index":986},"line":29,"code":"  it(\"3. Display toast on close action\", () => {\n    cy.SearchEntityandOpen(\"Modal1\");\n    cy.get(\".t--property-control-onclose\").find(\".t--js-toggle\").click({\n      force: true\n    });\n    cy.testJsontext(\"onclose\", \"{{showAlert('test','success')}}\");\n    cy.wait(1000); //make sure evaluated value disappears\n\n    cy.get(widgets.modalCloseButton).click({\n      force: true\n    });\n    cy.get(commonlocators.toastmsg).contains(\"test\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Modal_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Should paste modal widgets with main container as parentId","suites":["Modal Widget Functionality"],"updatePoint":{"line":42,"column":67,"index":1458},"line":42,"code":"  it(\"4. Should paste modal widgets with main container as parentId\", () => {\n    const modifierKey = Cypress.platform === \"darwin\" ? \"meta\" : \"ctrl\";\n    cy.SearchEntityandOpen(\"Modal1\");\n    cy.wait(200);\n    cy.get(\"body\").type(`{${modifierKey}}c`);\n    cy.get(commonlocators.toastBody).first().contains(\"Copied\");\n    cy.wait(1000); //make sure evaluated value disappears\n\n    cy.get(widgets.modalCloseButton).click({\n      force: true\n    });\n    cy.get(\".t--modal-widget\").should(\"have.length\", 0);\n    cy.get(\"body\").type(`{${modifierKey}}v`);\n    cy.get('.bp3-collapse-body > [step=\"0\"]').eq(1).children().should(\"have.length\", 3); //make sure modalis open on paste\n\n    cy.get(\".t--modal-widget\").should(\"have.length\", 1);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Modal_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. should select modal when clicked on modal label","suites":["Modal Widget Functionality"],"updatePoint":{"line":59,"column":56,"index":2185},"line":59,"code":"  it(\"5. should select modal when clicked on modal label\", () => {\n    //open modal\n    cy.SearchEntityandOpen(\"Modal1\");\n    cy.get(\".t--modal-widget\").should(\"exist\"); //select text widget inside the modal\n\n    cy.get(\".t--modal-widget\").find(\".t--widget-textwidget\").click();\n    cy.get(\".t--modal-widget\").find(\".t--widget-textwidget div[data-testid='t--selected']\").should(\"have.length\", 1); //click on modal's widgetName Label\n\n    cy.get(\"div[data-testid='t--settings-controls-positioned-wrapper']:contains(Modal1)\").click({\n      ctrlKey: true\n    }); //verify the modal1 is selected\n\n    cy.get(\".t--property-pane-title\").should(\"contain\", \"Modal1\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Modal_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. It should paste modal widget on main Container even when copied in group and paste when a container is selected","suites":["Modal Widget Functionality"],"updatePoint":{"line":73,"column":120,"index":2915},"line":73,"code":"  it(\"6. It should paste modal widget on main Container even when copied in group and paste when a container is selected\", () => {\n    const modifierKey = Cypress.platform === \"darwin\" ? \"meta\" : \"ctrl\";\n    cy.get(explorer.addWidget).click(); //add an additional modal widget and a container widget\n\n    cy.dragAndDropToCanvas(\"modalwidget\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(widgets.modalCloseButton).click({\n      force: true\n    });\n    cy.dragAndDropToCanvas(\"containerwidget\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(\"#switcher--explorer\").click();\n    cy.get(\".t--entity-name\").contains(\"WIDGETS\").click(); //select all widgets and copy\n\n    cy.get(`#div-selection-0`).click({\n      force: true\n    });\n    cy.get(\"body\").type(`{${modifierKey}}a`);\n    cy.get(\"body\").type(`{${modifierKey}}c`); //select container widget\n\n    cy.get(`#div-selection-0`).click({\n      force: true\n    });\n    cy.get(`.t--widget-containerwidget`).click({\n      ctrlKey: true\n    }); //paste\n\n    cy.get(\"body\").type(`{${modifierKey}}v`); //verify that the two modal widget should have pasted on the main canvas\n\n    cy.get('.bp3-collapse-body > [step=\"0\"]').eq(1).children().should(\"have.length\", 6);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Modal_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Check isDirty meta property","suites":["MultiSelectTree Widget Functionality"],"updatePoint":{"line":15,"column":36,"index":522},"line":15,"code":"  it(\"1. Check isDirty meta property\", function () {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 300,\n      y: 500\n    });\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{MultiSelectTree1.isDirty}}`); // Change defaultValue\n\n    cy.openPropertyPane(\"multiselecttreewidget\");\n    cy.testJsontext(\"defaultvalue\", \"GREEN\\n\"); // Check if isDirty is set to false\n\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\"); // Interact with UI\n\n    cy.get(formWidgetsPage.treeSelectInput).first().click({\n      force: true\n    });\n    cy.treeMultiSelectDropdown(\"Red\"); // Check if isDirty is set to true\n\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"true\"); // Reset isDirty by changing defaultValue\n\n    cy.testJsontext(\"defaultvalue\", \"BLUE\\n\"); // Check if isDirty is set to false\n\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Multiselect/Multi_Select_Tree_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Selects value with enter in default value","suites":["MultiSelectTree Widget Functionality"],"updatePoint":{"line":40,"column":50,"index":1496},"line":40,"code":"  it(\"2. Selects value with enter in default value\", () => {\n    cy.openPropertyPane(\"multiselecttreewidget\");\n    cy.testJsontext(\"defaultvalue\", \"RED\\n\");\n    cy.get(formWidgetsPage.multiselecttreeWidget).find(\".rc-tree-select-selection-item-content\").first().should(\"have.text\", \"Red\"); // Clear the selected value\n\n    cy.get(formWidgetsPage.treeSelectInput).first().click({\n      force: true\n    });\n    cy.treeMultiSelectDropdown(\"Red\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Multiselect/Multi_Select_Tree_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Clears the search field when widget is closed","suites":["MultiSelectTree Widget Functionality"],"updatePoint":{"line":50,"column":54,"index":1950},"line":50,"code":"  it(\"3. Clears the search field when widget is closed\", () => {\n    // open the multi-tree select widget\n    // search for option Red in the search input\n    cy.get(formWidgetsPage.multiTreeSelectFilterInput).click().type(\"Green\"); // select the Green option\n\n    cy.treeMultiSelectDropdown(\"Green\"); // Assert the selected value is Green\n\n    cy.get(formWidgetsPage.multiselecttreeWidget).find(\".rc-tree-select-selection-item-content\").first().should(\"have.text\", \"Green\"); // Reopen the multi-tree select widget\n\n    cy.get(formWidgetsPage.treeSelectInput).first().click({\n      force: true\n    }); // Assert if the search input is empty now\n\n    cy.get(formWidgetsPage.multiTreeSelectFilterInput).invoke(\"val\").should(\"be.empty\");\n    cy.wait(100);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Multiselect/Multi_Select_Tree_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. To Validate Options","suites":["MultiSelectTree Widget Functionality"],"updatePoint":{"line":66,"column":28,"index":2683},"line":66,"code":"  it(\"4. To Validate Options\", function () {\n    cy.get(formWidgetsPage.treeSelectInput).first().click({\n      force: true\n    });\n    cy.get(formWidgetsPage.multiTreeSelectFilterInput).click().type(\"light\");\n    cy.treeMultiSelectDropdown(\"Light Blue\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Multiselect/Multi_Select_Tree_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. To Unchecked Visible Widget","suites":["MultiSelectTree Widget Functionality"],"updatePoint":{"line":73,"column":36,"index":2952},"line":73,"code":"  it(\"5. To Unchecked Visible Widget\", function () {\n    cy.togglebarDisable(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.multiselecttreewidget + \" \" + \".rc-tree-select-multiple\").should(\"not.exist\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Multiselect/Multi_Select_Tree_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. To Check Visible Widget","suites":["MultiSelectTree Widget Functionality"],"updatePoint":{"line":79,"column":32,"index":3228},"line":79,"code":"  it(\"6. To Check Visible Widget\", function () {\n    cy.openPropertyPane(\"multiselecttreewidget\");\n    cy.togglebar(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.multiselecttreewidget + \" \" + \".rc-tree-select-multiple\").should(\"be.visible\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Multiselect/Multi_Select_Tree_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Add new multiselect widget","suites":["MultiSelect Widget Functionality"],"updatePoint":{"line":14,"column":32,"index":398},"line":14,"code":"  it(\"Add new multiselect widget\", () => {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"multiselectwidgetv2\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(\".t--widget-multiselectwidgetv2\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Multiselect/MultiSelect1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check that empty value is allowed in options","suites":["MultiSelect Widget Functionality"],"updatePoint":{"line":22,"column":57,"index":661},"line":22,"code":"  it(\"should check that empty value is allowed in options\", () => {\n    cy.openPropertyPane(\"multiselectwidgetv2\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"Blue\",\n          \"value\": \"\"\n        },\n        {\n          \"label\": \"Green\",\n          \"value\": \"GREEN\"\n        },\n        {\n          \"label\": \"Red\",\n          \"value\": \"RED\"\n        }\n      ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Multiselect/MultiSelect1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check that more that one empty value is not allowed in options","suites":["MultiSelect Widget Functionality"],"updatePoint":{"line":40,"column":75,"index":1176},"line":40,"code":"  it(\"should check that more that one empty value is not allowed in options\", () => {\n    cy.openPropertyPane(\"multiselectwidgetv2\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"Blue\",\n          \"value\": \"\"\n        },\n        {\n          \"label\": \"Green\",\n          \"value\": \"\"\n        },\n        {\n          \"label\": \"Red\",\n          \"value\": \"RED\"\n        }\n      ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Multiselect/MultiSelect1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check that Objects can be added to multiselect Widget default value","suites":["MultiSelect Widget Functionality"],"updatePoint":{"line":58,"column":80,"index":1687},"line":58,"code":"  it(\"should check that Objects can be added to multiselect Widget default value\", () => {\n    cy.openPropertyPane(\"multiselectwidgetv2\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"Blue\",\n          \"value\": \"\"\n        },\n        {\n          \"label\": \"Green\",\n          \"value\": \"GREEN\"\n        },\n        {\n          \"label\": \"Red\",\n          \"value\": \"RED\"\n        }\n      ]`);\n    cy.updateCodeInput(\".t--property-control-defaultvalue\", `[\n        {\n          \"label\": \"Green\",\n          \"value\": \"GREEN\"\n        }\n      ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"not.exist\");\n    cy.get(\".t--property-control-defaultvalue .t--codemirror-has-error\").should(\"not.exist\");\n    cy.wait(100);\n    cy.get(formWidgetsPage.multiselectwidgetv2).find(\".rc-select-selection-item-content\").first().should(\"have.text\", \"Green\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Multiselect/MultiSelect1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should display the right label","suites":["MultiSelect Widget Functionality"],"updatePoint":{"line":85,"column":36,"index":2552},"line":85,"code":"  it(\"should display the right label\", () => {\n    cy.openPropertyPane(\"multiselectwidgetv2\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"Blue\",\n          \"value\": \"BLUE\"\n        },\n        {\n          \"label\": \"Green\",\n          \"value\": \"GREEN\"\n        },\n        {\n          \"label\": \"Red\",\n          \"value\": \"RED\"\n        }\n      ]`);\n    cy.updateCodeInput(\".t--property-control-defaultvalue\", `[\n      \"GREEN\",\n      \"RED\"\n    ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"not.exist\");\n    cy.get(\".t--property-control-defaultvalue .t--codemirror-has-error\").should(\"not.exist\");\n    cy.wait(100);\n    cy.get(formWidgetsPage.multiselectwidgetv2).find(\".rc-select-selection-item-content\").first().should(\"have.text\", \"Green\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Multiselect/MultiSelect1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Selects value with invalid default value","suites":["MultiSelect Widget Functionality"],"updatePoint":{"line":19,"column":49,"index":818},"line":19,"code":"  it(\"1. Selects value with invalid default value\", () => {\n    cy.openPropertyPane(\"multiselectwidgetv2\");\n    cy.testJsontext(\"options\", JSON.stringify(data.input));\n    cy.testJsontext(\"defaultvalue\", \"{{ undefined }}\");\n    cy.get(formWidgetsPage.multiselectwidgetv2).find(\".rc-select-selection-search-input\").first().focus({\n      force: true\n    }).type(\"{uparrow}\", {\n      force: true\n    });\n    cy.dropdownMultiSelectDynamic(\"Option 3\");\n    cy.wait(2000); //Validating option inside multiselect widget\n\n    cy.get(\".rc-select-selection-item-content\").first().should(\"have.text\", \"Option 3\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Multiselect/MultiSelect2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Selects value with enter in default value","suites":["MultiSelect Widget Functionality"],"updatePoint":{"line":33,"column":50,"index":1428},"line":33,"code":"  it(\"2. Selects value with enter in default value\", () => {\n    cy.testJsontext(\"defaultvalue\", '[\\n  {\\n    \"label\": \"Option 3\",\\n    \"value\": \"3\"\\n  }\\n]');\n    cy.get(formWidgetsPage.multiselectwidgetv2).find(\".rc-select-selection-item-content\").first().should(\"have.text\", \"Option 3\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Multiselect/MultiSelect2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Clears the search field when widget is closed and serverSideFiltering is off","suites":["MultiSelect Widget Functionality"],"updatePoint":{"line":37,"column":85,"index":1760},"line":37,"code":"  it(\"3. Clears the search field when widget is closed and serverSideFiltering is off\", () => {\n    // Turn on the filterable for the widget\n    cy.togglebar('.t--property-control-filterable input[type=\"checkbox\"]'); // open the widget\n\n    cy.get(formWidgetsPage.multiselectwidgetv2).find(\".rc-select-selection-search-input\").first().focus({\n      force: true\n    }).type(\"{uparrow}\", {\n      force: true\n    }); // Search for Option 2 in the search input\n\n    cy.get(\".rc-select-dropdown input[type='text']\").click().type(\"Option 2\"); // Select Option 2\n\n    cy.get(\".multi-select-dropdown\").contains(\"Option 2\").click({\n      force: true\n    }); // Assert Option 2 is selected\n\n    cy.get(\".rc-select-selection-item-content\").eq(1).should(\"have.text\", \"Option 2\"); // Close the widget\n\n    cy.openPropertyPane(\"multiselectwidgetv2\"); // Reopen the widget\n\n    cy.get(formWidgetsPage.multiselectwidgetv2).find(\".rc-select-selection-search-input\").first().focus({\n      force: true\n    }).type(\"{uparrow}\", {\n      force: true\n    }); // Assert if the search input is empty\n\n    cy.get(\".rc-select-dropdown input[type='text']\").invoke(\"val\").should(\"be.empty\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Multiselect/MultiSelect2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Does not clear the search field when widget is closed and serverSideFiltering is on","suites":["MultiSelect Widget Functionality"],"updatePoint":{"line":65,"column":92,"index":2936},"line":65,"code":"  it(\"4. Does not clear the search field when widget is closed and serverSideFiltering is on\", () => {\n    // Turn on server side filtering for the widget\n    cy.togglebar('.t--property-control-serversidefiltering input[type=\"checkbox\"]'); // open the widget\n\n    cy.get(formWidgetsPage.multiselectwidgetv2).find(\".rc-select-selection-search-input\").first().focus({\n      force: true\n    }).type(\"{uparrow}\", {\n      force: true\n    }); // Search for Option 2 in the search input\n\n    cy.get(\".rc-select-dropdown input[type='text']\").click().type(\"Option 2\"); // Click on Option 2\n\n    cy.get(\".multi-select-dropdown\").contains(\"Option 2\").click({\n      force: true\n    }); // Close the widget\n\n    cy.openPropertyPane(\"multiselectwidgetv2\"); // Reopen the widget\n\n    cy.get(formWidgetsPage.multiselectwidgetv2).find(\".rc-select-selection-search-input\").first().focus({\n      force: true\n    }).type(\"{uparrow}\", {\n      force: true\n    }); // Assert if the search input is not empty\n\n    cy.get(\".rc-select-dropdown input[type='text']\").invoke(\"val\").should(\"not.be.empty\"); // Turn off the filterable property for the widget\n\n    cy.togglebarDisable('.t--property-control-filterable input[type=\"checkbox\"]'); // Turn off server side filtering for the widget\n\n    cy.togglebarDisable('.t--property-control-serversidefiltering input[type=\"checkbox\"]');\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Multiselect/MultiSelect2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Dropdown Functionality To Validate Options","suites":["MultiSelect Widget Functionality"],"updatePoint":{"line":95,"column":51,"index":4255},"line":95,"code":"  it(\"5. Dropdown Functionality To Validate Options\", function () {\n    cy.get(\".rc-select-selector\").click({\n      force: true\n    });\n    cy.dropdownMultiSelectDynamic(\"Option 2\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Multiselect/MultiSelect2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Dropdown Functionality To Check Allow select all option","suites":["MultiSelect Widget Functionality"],"updatePoint":{"line":101,"column":64,"index":4457},"line":101,"code":"  it(\"6. Dropdown Functionality To Check Allow select all option\", function () {\n    // select all option is not enable\n    cy.get(formWidgetsPage.multiselectwidgetv2).find(\".rc-select-selection-item-content\").first().should(\"not.have.text\", \"Select all\"); // enable select all option from property pane\n\n    cy.openPropertyPane(\"multiselectwidgetv2\");\n    cy.togglebar(commonlocators.allowSelectAllCheckbox); // press select all option\n\n    cy.get(formWidgetsPage.multiselectwidgetv2).find(\".rc-select-selection-search-input\").first().focus({\n      force: true\n    }).type(\"{uparrow}\", {\n      force: true\n    });\n    cy.dropdownMultiSelectDynamic(\"Select all\");\n    cy.wait(3000); //Validating option inside multiselect widget\n\n    cy.get(\".rc-select-selection-item-content\").eq(0).should(\"have.text\", \"Option 1\");\n    cy.get(\".rc-select-selection-item-content\").eq(1).should(\"have.text\", \"Option 2\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Multiselect/MultiSelect2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Check isDirty meta property","suites":["MultiSelect Widget Functionality"],"updatePoint":{"line":119,"column":36,"index":5339},"line":119,"code":"  it(\"7. Check isDirty meta property\", function () {\n    cy.openPropertyPane(WIDGET.TEXT);\n    cy.updateCodeInput(PROPERTY_SELECTOR.text, `{{MultiSelect2.isDirty}}`); // Init isDirty by changing defaultOptionValue\n\n    cy.openPropertyPane(\"multiselectwidgetv2\");\n    cy.updateCodeInput(PROPERTY_SELECTOR.defaultValue, '[\\n  {\\n    \"label\": \"Option 1\",\\n    \"value\": \"1\"\\n  }\\n]');\n    cy.get(getWidgetSelector(WIDGET.TEXT)).eq(0).should(\"contain\", \"false\"); // Interact with UI\n\n    cy.get(\".rc-select-selector\").click({\n      force: true\n    });\n    cy.dropdownMultiSelectDynamic(\"Option 2\"); // Check if isDirty is set to true\n\n    cy.get(getWidgetSelector(WIDGET.TEXT)).eq(0).should(\"contain\", \"true\"); // Reset isDirty by changing defaultOptionValue\n\n    cy.updateCodeInput(PROPERTY_SELECTOR.defaultValue, '[\\n  {\\n    \"label\": \"Option 2\",\\n    \"value\": \"2\"\\n  }\\n]'); // Check if isDirty is set to false\n\n    cy.get(getWidgetSelector(WIDGET.TEXT)).eq(0).should(\"contain\", \"false\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Multiselect/MultiSelect2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. Verify MultiSelect resets to default value","suites":["MultiSelect Widget Functionality"],"updatePoint":{"line":201,"column":51,"index":7435},"line":201,"code":"  it(\"8. Verify MultiSelect resets to default value\", function () {\n    resetTestCases.forEach(testCase => {\n      const {\n        defaultValue,\n        options,\n        optionsToDeselect,\n        optionsToSelect\n      } = testCase;\n      cy.openPropertyPane(\"multiselectwidgetv2\"); // set options\n\n      jsEditor.EnterJSContext(\"Options\", JSON.stringify(options));\n      cy.get(\"body\").type(\"{esc}\"); // set default value\n\n      jsEditor.EnterJSContext(\"Default Value\", JSON.stringify(defaultValue, null, 2)); // select other options\n\n      agHelper.SelectFromMultiSelect(optionsToSelect);\n      agHelper.RemoveMultiSelectItems(optionsToDeselect); // reset multiselect\n\n      cy.get(`${getWidgetSelector(\"buttonwidget\")}:contains('Reset MultiSelect')`).click(); // verify value is equal to default value\n\n      const defaultValuesStringifiedArray = defaultValue.map(opt => opt?.value !== undefined ? opt.value : opt).toString();\n      cy.get(getWidgetSelector(\"textwidget\")).eq(1).should(\"have.text\", defaultValuesStringifiedArray);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Multiselect/MultiSelect2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"9. Verify MultiSelect deselection behavior","suites":["MultiSelect Widget Functionality"],"updatePoint":{"line":225,"column":48,"index":8480},"line":225,"code":"  it(\"9. Verify MultiSelect deselection behavior\", function () {\n    cy.openPropertyPane(\"multiselectwidgetv2\"); // set options\n\n    jsEditor.EnterJSContext(\"Options\", JSON.stringify([{\n      label: \"RED\",\n      value: \"RED\"\n    }]));\n    cy.get(\"body\").type(\"{esc}\");\n    jsEditor.EnterJSContext(\"Default Value\", '[\"RED\"]');\n    agHelper.RemoveMultiSelectItems([\"RED\"]); // verify value is equal to default value\n\n    cy.get(getWidgetSelector(\"textwidget\")).eq(1).should(\"have.text\", \"\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Multiselect/MultiSelect2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"10. Dropdown Functionality To Unchecked Visible Widget","suites":["MultiSelect Widget Functionality"],"updatePoint":{"line":238,"column":60,"index":8988},"line":238,"code":"  it(\"10. Dropdown Functionality To Unchecked Visible Widget\", function () {\n    cy.togglebarDisable(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.multiselectwidgetv2 + \" \" + \".rc-select-selector\").should(\"not.exist\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Multiselect/MultiSelect2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"11. Dropdown Functionality To Check Visible Widget","suites":["MultiSelect Widget Functionality"],"updatePoint":{"line":244,"column":56,"index":9281},"line":244,"code":"  it(\"11. Dropdown Functionality To Check Visible Widget\", function () {\n    cy.openPropertyPane(\"multiselectwidgetv2\");\n    cy.togglebar(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.multiselectwidgetv2 + \" \" + \".rc-select-selector\").should(\"be.visible\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Multiselect/MultiSelect2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Verify dropdown width of Select widgets and menu button","suites":["Dropdown Widget Functionality"],"updatePoint":{"line":11,"column":61,"index":381},"line":11,"code":"  it(\"Verify dropdown width of Select widgets and menu button\", function () {\n    // Select\n    cy.wait(450);\n    cy.get(formWidgetsPage.selectwidget).find(widgetLocators.dropdownSingleSelect).invoke(\"outerWidth\").then(val => {\n      cy.get(formWidgetsPage.selectwidget).find(widgetLocators.dropdownSingleSelect).click({\n        force: true\n      });\n      cy.get(\".select-popover-wrapper\").invoke(\"outerWidth\").should(\"eq\", val);\n    }); // Menu Button\n\n    cy.get(formWidgetsPage.menuButtonWidget).find(widgetLocators.menuButton).invoke(\"outerWidth\").then(width => {\n      expect(parseInt(width)).to.equal(147);\n    });\n    cy.get(formWidgetsPage.menuButtonWidget).find(widgetLocators.menuButton).click({\n      force: true\n    });\n    cy.get(\".menu-button-popover\").invoke(\"outerWidth\").then(width => {\n      expect(parseInt(width)).to.equal(147);\n    }); // MultiSelect\n\n    cy.get(formWidgetsPage.multiselectwidgetv2).find(\".rc-select-multiple\").invoke(\"width\").then(inputWidth => {\n      cy.get(formWidgetsPage.multiselectwidgetv2).find(\".rc-select-selection-search-input\").first().focus({\n        force: true\n      }).type(\"{uparrow}\", {\n        force: true\n      });\n      cy.get(\".multi-select-dropdown\").invoke(\"width\").then(dropdownWidth => {\n        expect(Math.floor(inputWidth)).to.equal(Math.floor(dropdownWidth));\n      });\n    }); //Multi tree Select\n\n    cy.get(formWidgetsPage.multiselecttreeWidget).find(\".rc-tree-select-multiple\").invoke(\"width\").then(val => {\n      cy.get(formWidgetsPage.multiselecttreeWidget).find(\".rc-tree-select-selection-search-input\").first().focus({\n        force: true\n      }).type(\"{uparrow}\", {\n        force: true\n      });\n      cy.get(\".tree-multiselect-dropdown\").invoke(\"outerWidth\").should(\"eq\", val);\n    }); // Tree Select\n\n    cy.get(formWidgetsPage.singleselecttreeWidget).find(\".rc-tree-select-single\").invoke(\"outerWidth\").then(val => {\n      cy.get(formWidgetsPage.singleselecttreeWidget).find(\".rc-tree-select-selection-search-input\").first().focus({\n        force: true\n      }).type(\"{uparrow}\", {\n        force: true\n      });\n      cy.get(\".single-tree-select-dropdown\").invoke(\"outerWidth\").should(\"eq\", val);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Multiselect/MultiSelect3_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Verify dropdown width of Select widgets with Label","suites":["Dropdown Widget Functionality"],"updatePoint":{"line":60,"column":56,"index":2569},"line":60,"code":"  it(\"Verify dropdown width of Select widgets with Label\", function () {\n    // Select\n    cy.openPropertyPane(\"selectwidget\");\n    cy.testJsontext(\"text\", \"Label\");\n    cy.get(formWidgetsPage.selectwidget).find(widgetLocators.dropdownSingleSelect).invoke(\"outerWidth\").then(val => {\n      cy.get(formWidgetsPage.selectwidget).find(widgetLocators.dropdownSingleSelect).click({\n        force: true\n      });\n      cy.get(\".select-popover-wrapper\").invoke(\"outerWidth\").should(\"eq\", val);\n    }); // MultiSelect\n\n    cy.openPropertyPane(\"multiselectwidgetv2\");\n    cy.testJsontext(\"text\", \"Label\");\n    cy.get(formWidgetsPage.multiselectwidgetv2).find(\".rc-select-multiple\").invoke(\"width\").then(val => {\n      cy.get(formWidgetsPage.multiselectwidgetv2).find(\".rc-select-selection-search-input\").first().focus({\n        force: true\n      }).type(\"{uparrow}\", {\n        force: true\n      });\n      cy.get(\".multi-select-dropdown\").invoke(\"width\").should(\"eq\", val);\n    }); //Multi tree Select\n\n    cy.openPropertyPane(\"multiselecttreewidget\");\n    cy.testJsontext(\"text\", \"Label\");\n    cy.get(formWidgetsPage.multiselecttreeWidget).find(\".rc-tree-select-multiple\").invoke(\"width\").then(val => {\n      cy.get(formWidgetsPage.multiselecttreeWidget).find(\".rc-tree-select-selection-search-input\").first().focus({\n        force: true\n      }).type(\"{uparrow}\", {\n        force: true\n      });\n      cy.get(\".tree-multiselect-dropdown\").invoke(\"outerWidth\").should(\"eq\", val);\n    }); // Tree Select\n\n    cy.openPropertyPane(\"singleselecttreewidget\");\n    cy.testJsontext(\"text\", \"Label\");\n    cy.get(formWidgetsPage.singleselecttreeWidget).find(\".rc-tree-select-single\").invoke(\"outerWidth\").then(val => {\n      cy.get(formWidgetsPage.singleselecttreeWidget).find(\".rc-tree-select-selection-search-input\").first().focus({\n        force: true\n      }).type(\"{uparrow}\", {\n        force: true\n      });\n      cy.get(\".single-tree-select-dropdown\").invoke(\"outerWidth\").should(\"eq\", val);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Multiselect/MultiSelect3_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Add new widget","suites":["Multi Tree Select Widget"],"updatePoint":{"line":9,"column":20,"index":254},"line":9,"code":"  it(\"Add new widget\", () => {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"multiselecttreewidget\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(\".t--widget-multiselecttreewidget\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Multiselect/MultiTreeSelect_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check that empty value is allowed in options","suites":["Multi Tree Select Widget"],"updatePoint":{"line":17,"column":57,"index":521},"line":17,"code":"  it(\"should check that empty value is allowed in options\", () => {\n    cy.openPropertyPane(\"multiselecttreewidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"Blue\",\n          \"value\": \"\",\n          \"children\": [\n            {\n              \"label\": \"Dark Blue\",\n              \"value\": \"DARK BLUE\"\n            },\n            {\n              \"label\": \"Light Blue\",\n              \"value\": \"LIGHT BLUE\"\n            }\n          ]\n        },\n        {\n          \"label\": \"Green\",\n          \"value\": \"GREEN\"\n        },\n        {\n          \"label\": \"Red\",\n          \"value\": \"RED\"\n        }\n      ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Multiselect/MultiTreeSelect_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check that more thatn empty value is not allowed in options","suites":["Multi Tree Select Widget"],"updatePoint":{"line":45,"column":72,"index":1273},"line":45,"code":"  it(\"should check that more thatn empty value is not allowed in options\", () => {\n    cy.openPropertyPane(\"multiselecttreewidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"Blue\",\n          \"value\": \"\",\n          \"children\": [\n            {\n              \"label\": \"Dark Blue\",\n              \"value\": \"DARK BLUE\"\n            },\n            {\n              \"label\": \"Light Blue\",\n              \"value\": \"LIGHT BLUE\"\n            }\n          ]\n        },\n        {\n          \"label\": \"Green\",\n          \"value\": \"\"\n        },\n        {\n          \"label\": \"Red\",\n          \"value\": \"RED\"\n        }\n      ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Multiselect/MultiTreeSelect_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Slash command and mustache autocomplete validation for button widget","suites":["Autocomplete using slash command and mustache tests"],"updatePoint":{"line":9,"column":74,"index":350},"line":9,"code":"  it(\"Slash command and mustache autocomplete validation for button widget\", function () {\n    cy.openPropertyPane(\"buttonwidget\");\n    cy.testCodeMirror(\"/\").then(() => {\n      cy.get(dynamicInputLocators.hints).should(\"exist\"); // validates all autocomplete commands on entering / in label field\n\n      cy.get(`${dynamicInputLocators.hints} li`).eq(1).should(\"have.text\", \"New Binding\");\n      cy.get(`${dynamicInputLocators.hints} li`).eq(2).should(\"have.text\", \"Insert Snippet\");\n      cy.get(`${dynamicInputLocators.hints} li`).last().should(\"have.text\", \"New Datasource\");\n    });\n    cy.EnableAllCodeEditors();\n    cy.get(dynamicInputLocators.input).first().click({\n      force: true\n    }).type(\"{uparrow}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{ctrl}{shift}{downarrow}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{backspace}\", {\n      parseSpecialCharSequences: true\n    }).then(() => {\n      // validates autocomplete binding on entering {{}} in label field\n      cy.get(dynamicInputLocators.input).first().type(\"{shift}{{}{shift}{{}\");\n      cy.get(`${dynamicInputLocators.hints} li`).eq(1).should(\"have.text\", \"Text1.text\");\n    }); // makes the onClick js toggle active\n\n    cy.get(\".t--property-control-onclick\").find(\".t--js-toggle\").click({\n      force: true\n    });\n    cy.EnableAllCodeEditors();\n    cy.get(\".CodeMirror textarea\").last().focus().type(\"/\").then(() => {\n      cy.get(dynamicInputLocators.hints).should(\"exist\"); // validates all autocomplete commands on entering / in onClick field\n\n      cy.get(`${dynamicInputLocators.hints} li`).eq(1).should(\"have.text\", \"New Binding\");\n      cy.get(`${dynamicInputLocators.hints} li`).eq(2).should(\"have.text\", \"Insert Snippet\");\n      cy.get(`${dynamicInputLocators.hints} li`).last().should(\"have.text\", \"New Datasource\");\n    });\n    cy.EnableAllCodeEditors();\n    cy.get(\".CodeMirror textarea\").last().focus().type(\"{ctrl}{shift}{downarrow}\").type(\"{backspace}\").type(\"{shift}{{}{shift}{{}\").then(() => {\n      cy.get(dynamicInputLocators.hints).should(\"exist\"); // validates all autocomplete functions on entering {{}} in onClick field\n\n      cy.get(`${dynamicInputLocators.hints} li`).eq(1).should(\"have.text\", \"storeValue()\");\n      cy.get(`${dynamicInputLocators.hints} li`).eq(2).should(\"have.text\", \"showModal()\");\n      cy.get(`${dynamicInputLocators.hints} li`).eq(3).should(\"have.text\", \"showAlert()\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Others/Autocomplete_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Slash command and mustache autocomplete validation for textbox widget","suites":["Autocomplete using slash command and mustache tests"],"updatePoint":{"line":53,"column":75,"index":2779},"line":53,"code":"  it(\"Slash command and mustache autocomplete validation for textbox widget\", function () {\n    cy.openPropertyPane(\"textwidget\");\n    cy.EnableAllCodeEditors();\n    cy.testCodeMirror(\"/\").then(() => {\n      cy.get(dynamicInputLocators.hints).should(\"exist\"); // validates all autocomplete commands on entering / in text field\n\n      cy.get(`${dynamicInputLocators.hints} li`).eq(1).should(\"have.text\", \"New Binding\");\n      cy.get(`${dynamicInputLocators.hints} li`).eq(2).should(\"have.text\", \"Insert Snippet\");\n      cy.get(`${dynamicInputLocators.hints} li`).last().should(\"have.text\", \"New Datasource\");\n    });\n    cy.get(dynamicInputLocators.input).first().click({\n      force: true\n    }).type(\"{uparrow}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{ctrl}{shift}{downarrow}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{backspace}\", {\n      parseSpecialCharSequences: true\n    }).then(() => {\n      cy.get(dynamicInputLocators.input).first().type(\"{shift}{{}{shift}{{}\"); // validates autocomplete binding on entering {{}} in text field\n\n      cy.get(`${dynamicInputLocators.hints} li`).eq(1).should(\"have.text\", \"Button1.recaptchaToken\");\n      cy.get(`${dynamicInputLocators.hints} li`).eq(2).should(\"have.text\", \"Button1.text\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Others/Autocomplete_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Bug 9003: Autocomplete not working for Appsmith specific JS APIs","suites":["Autocomplete using slash command and mustache tests"],"updatePoint":{"line":78,"column":70,"index":4048},"line":78,"code":"  it(\"Bug 9003: Autocomplete not working for Appsmith specific JS APIs\", function () {\n    cy.openPropertyPane(\"buttonwidget\");\n    cy.get(\".t--property-control-onclick\").find(\".t--js-toggle\").click({\n      force: true\n    });\n    cy.EnableAllCodeEditors();\n    cy.get(\".CodeMirror textarea\").last().focus().clear().type(\"{{re\").then(() => {\n      cy.get(dynamicInputLocators.hints).should(\"exist\"); // validates autocomplete suggestion for resetWidget() in onClick field\n\n      cy.get(`${dynamicInputLocators.hints} li`).eq(0).should(\"have.text\", \"resetWidget()\");\n    });\n    cy.EnableAllCodeEditors();\n    cy.get(\".CodeMirror textarea\").last().focus() // clearing the onClick field\n    .type(\"{ctrl}{shift}{uparrow}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{backspace}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{rightarrow}{rightarrow}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{ctrl}{shift}{uparrow}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{backspace}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{{s\").then(() => {\n      cy.get(dynamicInputLocators.hints).should(\"exist\"); // validates autocomplete function suggestions on entering '{{s' in onClick field\n\n      cy.get(`${dynamicInputLocators.hints} li`).should(\"contain.text\", \"storeValue()\").and(\"contain.text\", \"showModal()\").and(\"contain.text\", \"setInterval()\").and(\"contain.text\", \"showAlert()\");\n    });\n    cy.EnableAllCodeEditors();\n    cy.get(\".CodeMirror textarea\").last().focus() // clearing the onClick field\n    .type(\"{ctrl}{shift}{uparrow}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{backspace}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{rightarrow}{rightarrow}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{ctrl}{shift}{uparrow}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{backspace}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{{c\").then(() => {\n      cy.get(dynamicInputLocators.hints).should(\"exist\"); // validates autocomplete function suggestions on entering '{{c' in onClick field\n\n      cy.get(`${dynamicInputLocators.hints} li`).should(\"contain.text\", \"closeModal()\").and(\"contain.text\", \"copyToClipboard()\").and(\"contain.text\", \"clearInterval()\");\n    });\n    cy.EnableAllCodeEditors();\n    cy.get(\".CodeMirror textarea\").last().focus().type(\"{ctrl}{shift}{uparrow}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{backspace}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{rightarrow}{rightarrow}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{ctrl}{shift}{uparrow}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{backspace}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{{n\").then(() => {\n      cy.get(dynamicInputLocators.hints).should(\"exist\"); // validates autocomplete suggestions on entering '{{n' in onClick field\n\n      cy.get(`${dynamicInputLocators.hints} li`).should(\"contain.text\", \"navigateTo()\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Others/Autocomplete_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check isDirty, onImageSave","suites":["Camera Widget"],"updatePoint":{"line":15,"column":32,"index":376},"line":15,"code":"  it(\"Check isDirty, onImageSave\", () => {\n    const modalName = `modal`;\n    const mainControlSelector = \"//div[contains(@class, 't--widget-camerawidget')]//button\";\n    cy.createModal(modalName);\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", \"{{Camera1.isDirty}}\"); // Initial value of isDirty should be false\n\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\"); // Take photo\n\n    cy.xpath(mainControlSelector).eq(2).click(); //taking photo\n\n    cy.wait(2000); // Save photo\n\n    cy.xpath(mainControlSelector).eq(2).click(); //saving it\n    // Assert: should trigger onImageSave action - modal popup\n\n    cy.get(modalWidgetPage.modelTextField).should(\"have.text\", modalName); // Check if isDirty is set to true\n\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"true\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Others/Camera_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. [Bug]- 11415 - Open  Modal from button and test scroll","suites":["Modal Widget Functionality"],"updatePoint":{"line":10,"column":63,"index":315},"line":10,"code":"  it(\"1. [Bug]- 11415 - Open  Modal from button and test scroll\", () => {\n    cy.PublishtheApp();\n    cy.wait(1000);\n    cy.get(\"span:contains('Submit')\").closest(\"div\").click();\n    cy.get(\".t--modal-widget\").should(\"exist\");\n    cy.get(\"span:contains('Close')\").closest(\"div\").should(\"not.be.visible\");\n    cy.get(\".t--modal-widget\").scrollTo(\"bottom\").wait(1000);\n    cy.get(\"span:contains('Close')\").closest(\"div\").should(\"be.visible\");\n    cy.get(\".t--modal-widget\").scrollTo(\"top\");\n    cy.get(\"span:contains('Close')\").closest(\"div\").should(\"not.be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Others/Canvas_scrolling_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Add new Divider","suites":["Divider Widget Functionality"],"updatePoint":{"line":9,"column":21,"index":261},"line":9,"code":"  it(\"Add new Divider\", () => {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"dividerwidget\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(\".t--divider-widget\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Others/Divider_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Open Existing Divider from created Widgets list","suites":["Divider Widget Functionality"],"updatePoint":{"line":17,"column":53,"index":502},"line":17,"code":"  it(\"Open Existing Divider from created Widgets list\", () => {\n    cy.get(\"#switcher--explorer\").click({\n      force: true\n    });\n    cy.GlobalSearchEntity(\"WIDGETS\");\n    cy.get(\".t--entity-name:contains(Divider1)\").click();\n    cy.get(\".t--entity-name:contains(Divider2)\").click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Others/Divider_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. check default buttonVariant with isJSConvertible","suites":["Icon Button Widget Functionality"],"updatePoint":{"line":15,"column":57,"index":544},"line":15,"code":"  it(\"1. check default buttonVariant with isJSConvertible\", function () {\n    cy.openPropertyPane(\"iconbuttonwidget\");\n    cy.get(formWidgetsPage.toggleButtonVariant).click();\n    cy.get(widgetsPage.iconWidgetBtn).should(\"have.css\", \"background-color\", \"rgb(3, 179, 101)\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Others/IconButton_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. add space into buttonVariant and validate","suites":["Icon Button Widget Functionality"],"updatePoint":{"line":20,"column":50,"index":817},"line":20,"code":"  it(\"2. add space into buttonVariant and validate\", function () {\n    cy.get(\".t--property-control-buttonvariant .CodeMirror  textarea\").first().focus().type(\"{ctrl}{shift}{downarrow}\").then($cm => {\n      if ($cm.val() !== \"\") {\n        cy.get(\".t--property-control-buttonvariant .CodeMirror textarea\").first().clear({\n          force: true\n        });\n      }\n    });\n    cy.get(\".t--property-control-buttonvariant .CodeMirror-code\").type(\"PRIMARY   \");\n    cy.get(widgetsPage.iconWidgetBtn).should(\"have.css\", \"background-color\", \"rgb(3, 179, 101)\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Others/IconButton_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. show alert on button click","suites":["Icon Button Widget Functionality"],"updatePoint":{"line":31,"column":35,"index":1363},"line":31,"code":"  it(\"3. show alert on button click\", function () {\n    cy.get(\".t--property-control-onclick\").find(\".t--js-toggle\").click({\n      force: true\n    });\n    cy.testJsontext(\"onclick\", \"{{showAlert('Icon Button Clicked','success')}}\");\n    cy.get(widgetsPage.iconWidgetBtn).click({\n      force: true\n    });\n    cy.get(commonlocators.toastmsg).contains(\"Icon Button Clicked\");\n    cy.PublishtheApp();\n    cy.wait(2000);\n    cy.get(publishPage.iconWidgetBtn).click();\n    cy.get(commonlocators.toastmsg).contains(\"Icon Button Clicked\");\n    cy.goToEditFromPublish();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Others/IconButton_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. should not show alert onclick if button is disabled","suites":["Icon Button Widget Functionality"],"updatePoint":{"line":46,"column":60,"index":1957},"line":46,"code":"  it(\"4. should not show alert onclick if button is disabled\", function () {\n    cy.openPropertyPane(\"iconbuttonwidget\");\n    cy.CheckWidgetProperties(commonlocators.disableCheckbox);\n    cy.get(widgetsPage.iconWidgetBtn).click({\n      force: true\n    });\n    cy.get(commonlocators.toastmsg).should(\"not.exist\");\n    cy.PublishtheApp();\n    cy.get(publishPage.iconWidgetBtn).click({\n      force: true\n    });\n    cy.get(commonlocators.toastmsg).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Others/IconButton_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Change Title","suites":["Map Chart Widget Functionality"],"updatePoint":{"line":21,"column":18,"index":617},"line":21,"code":"  it(\"Change Title\", function () {\n    cy.testCodeMirror(this.data.chartIndata);\n    cy.get(viewWidgetsPage.chartInnerText).contains(\"App Sign Up\").should(\"have.text\", \"App Sign Up\");\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Others/MapChart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Show Labels: FALSE","suites":["Map Chart Widget Functionality"],"updatePoint":{"line":26,"column":24,"index":837},"line":26,"code":"  it(\"Show Labels: FALSE\", function () {\n    cy.togglebarDisable(commonLocators.mapChartShowLabels);\n    cy.get(viewWidgetsPage.mapChartEntityLabels).should(\"not.exist\");\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Others/MapChart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Show Labels: TRUE","suites":["Map Chart Widget Functionality"],"updatePoint":{"line":31,"column":23,"index":1037},"line":31,"code":"  it(\"Show Labels: TRUE\", function () {\n    cy.togglebar(commonLocators.mapChartShowLabels);\n    cy.get(viewWidgetsPage.mapChartEntityLabels).eq(1).should(\"exist\");\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Others/MapChart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Map type: World with Antarctica","suites":["Map Chart Widget Functionality"],"updatePoint":{"line":36,"column":37,"index":1246},"line":36,"code":"  it(\"Map type: World with Antarctica\", function () {\n    // Change the map type\n    cy.updateMapType(\"World with Antarctica\"); // Verify the number of entities\n\n    cy.get(viewWidgetsPage.mapChartEntityLabels).should(\"have.length\", 7);\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Others/MapChart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Map type: World","suites":["Map Chart Widget Functionality"],"updatePoint":{"line":43,"column":21,"index":1497},"line":43,"code":"  it(\"Map type: World\", function () {\n    // Change the map type\n    cy.updateMapType(\"World\"); // Verify the number of entities\n\n    cy.get(viewWidgetsPage.mapChartEntityLabels).should(\"have.length\", 6);\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Others/MapChart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Map type: Europe","suites":["Map Chart Widget Functionality"],"updatePoint":{"line":50,"column":22,"index":1733},"line":50,"code":"  it(\"Map type: Europe\", function () {\n    // Change the map type\n    cy.updateMapType(\"Europe\"); // Verify the number of entities\n\n    cy.get(viewWidgetsPage.mapChartEntityLabels).should(\"have.length\", 47);\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Others/MapChart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Map type: North America","suites":["Map Chart Widget Functionality"],"updatePoint":{"line":57,"column":29,"index":1978},"line":57,"code":"  it(\"Map type: North America\", function () {\n    // Change the map type\n    cy.updateMapType(\"North America\"); // Verify the number of entities\n\n    cy.get(viewWidgetsPage.mapChartEntityLabels).should(\"have.length\", 26);\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Others/MapChart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Map type: South America","suites":["Map Chart Widget Functionality"],"updatePoint":{"line":64,"column":29,"index":2230},"line":64,"code":"  it(\"Map type: South America\", function () {\n    // Change the map type\n    cy.updateMapType(\"South America\"); // Verify the number of entities\n\n    cy.get(viewWidgetsPage.mapChartEntityLabels).should(\"have.length\", 16);\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Others/MapChart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Map type: Asia","suites":["Map Chart Widget Functionality"],"updatePoint":{"line":71,"column":20,"index":2473},"line":71,"code":"  it(\"Map type: Asia\", function () {\n    // Change the map type\n    cy.updateMapType(\"Asia\"); // Verify the number of entities\n\n    cy.get(viewWidgetsPage.mapChartEntityLabels).should(\"have.length\", 49);\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Others/MapChart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Map type: Oceania","suites":["Map Chart Widget Functionality"],"updatePoint":{"line":78,"column":23,"index":2710},"line":78,"code":"  it(\"Map type: Oceania\", function () {\n    // Change the map type\n    cy.updateMapType(\"Oceania\"); // Verify the number of entities\n\n    cy.get(viewWidgetsPage.mapChartEntityLabels).should(\"have.length\", 15);\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Others/MapChart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Map type: Africa","suites":["Map Chart Widget Functionality"],"updatePoint":{"line":85,"column":22,"index":2949},"line":85,"code":"  it(\"Map type: Africa\", function () {\n    // Change the map type\n    cy.updateMapType(\"Africa\"); // Verify the number of entities\n\n    cy.get(viewWidgetsPage.mapChartEntityLabels).should(\"have.length\", 56);\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Others/MapChart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Action: onDataPointClick, Open modal","suites":["Map Chart Widget Functionality"],"updatePoint":{"line":92,"column":42,"index":3207},"line":92,"code":"  it(\"Action: onDataPointClick, Open modal\", function () {\n    // Create the Alert Modal and verify Modal name\n    cy.createModal(this.data.ModalName);\n    cy.PublishtheApp();\n    cy.get(widgetsPage.mapChartPlot).children().first().click({\n      force: true\n    });\n    cy.get(modalWidgetPage.modelTextField).should(\"have.text\", this.data.ModalName);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Others/MapChart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Action: onDataPointClick, Show message using selectedDataPoint","suites":["Map Chart Widget Functionality"],"updatePoint":{"line":101,"column":68,"index":3590},"line":101,"code":"  it(\"Action: onDataPointClick, Show message using selectedDataPoint\", function () {\n    const expectedEntityData = {\n      value: 2.04,\n      label: \"South America\",\n      shortLabel: \"SA\",\n      originalId: \"SA\",\n      id: \"sa\"\n    }; // Set the map type to default\n\n    cy.updateMapType(\"World\"); // Set action details for onDataPointClick\n\n    const boundMessage = `{{JSON.stringify(MapChart1.selectedDataPoint)}}`;\n    cy.addAction(boundMessage);\n    cy.get(commonLocators.chooseMsgType).last().click({\n      force: true\n    });\n    cy.get(commonLocators.chooseAction).children().contains(\"Success\").click(); // Click on the entity, South America\n\n    cy.get(widgetsPage.mapChartPlot).children().first().click({\n      force: true\n    }); // Assert\n\n    cy.validateToastMessage(JSON.stringify(expectedEntityData));\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Others/MapChart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Icon alignment should not change when changing the icon","suites":["Menu Button Widget Functionality"],"updatePoint":{"line":9,"column":64,"index":307},"line":9,"code":"  it(\"1. Icon alignment should not change when changing the icon\", () => {\n    cy.openPropertyPane(\"menubuttonwidget\"); // Add an icon\n\n    cy.get(\".t--property-control-icon .bp3-icon-caret-down\").click({\n      force: true\n    });\n    cy.get(\".bp3-icon-add\").first().click({\n      force: true\n    }); // Assert if the icon exists\n\n    cy.get(`${formWidgetsPage.menuButtonWidget} .bp3-icon-add`).should(\"exist\"); // Change its icon alignment to right\n\n    cy.get(\".t--property-control-iconalignment .t--button-tab-right\").last().click({\n      force: true\n    });\n    cy.wait(200); // Assert if the icon appears on the right side of the button text\n\n    cy.get(formWidgetsPage.menuButtonWidget).contains(\"Open Menu\").children(\"span\").should(\"have.length\", 2);\n    cy.get(`${formWidgetsPage.menuButtonWidget} span.bp3-button-text`).next().should(\"have.class\", \"bp3-icon-add\"); // Change the existing icon\n\n    cy.get(\".t--property-control-icon .bp3-icon-caret-down\").click({\n      force: true\n    });\n    cy.get(\".bp3-icon-airplane\").first().click({\n      force: true\n    }); // Assert if the icon changes\n    // Assert if the icon still exists on the right side of the text\n\n    cy.get(`${formWidgetsPage.menuButtonWidget} .bp3-icon-airplane`).should(\"exist\").prev().should(\"have.text\", \"Open Menu\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Others/MenuButton_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. MenuButton widget functionality on undo after delete","suites":["Menu Button Widget Functionality"],"updatePoint":{"line":39,"column":61,"index":1609},"line":39,"code":"  it(\"2. MenuButton widget functionality on undo after delete\", function () {\n    cy.openPropertyPane(\"menubuttonwidget\"); // Delete Second Menu Item\n\n    cy.get(\".t--property-control-menuitems .t--delete-column-btn\").eq(1).click({\n      force: true\n    }); // Click on the menu button\n\n    cy.get(`${formWidgetsPage.menuButtonWidget} button`).click({\n      force: true\n    });\n    cy.wait(500); // Check first menu item\n\n    cy.get(\".bp3-menu-item\").eq(0).contains(\"First Menu Item\"); // Check second menu item\n\n    cy.get(\".bp3-menu-item\").eq(1).contains(\"Third Menu Item\"); // Undo\n\n    cy.get(\"body\").type(\"{ctrl+z}\"); // Check first menu item\n\n    cy.get(\".bp3-menu-item\").eq(0).contains(\"First Menu Item\"); // Check second menu item\n\n    cy.get(\".bp3-menu-item\").eq(1).contains(\"Second Menu Item\"); // Check third menu item\n\n    cy.get(\".bp3-menu-item\").eq(2).contains(\"Third Menu Item\"); // Navigate to property pane of Second Menu Item\n\n    cy.get(\".t--property-control-menuitems .t--edit-column-btn\").eq(1).click({\n      force: true\n    });\n    cy.wait(1000); // Check the title\n\n    cy.get(\".t--property-pane-title\").contains(\"Second Menu Item\"); // Navigate Back\n\n    cy.get(\".t--property-pane-back-btn\").click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Others/MenuButton_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Add a new Progress widget and text widget","suites":["Progress Widget"],"updatePoint":{"line":4,"column":47,"index":166},"line":4,"code":"  it(\"Add a new Progress widget and text widget\", function () {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"progresswidget\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(\".t--widget-progresswidget\").should(\"exist\");\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 300,\n      y: 500\n    });\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", \"\");\n  }); // Linear progress","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Others/Progress_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Property: isIndeterminate, Toggle infinite loading","suites":["Progress Widget"],"updatePoint":{"line":19,"column":56,"index":618},"line":19,"code":"  it(\"Property: isIndeterminate, Toggle infinite loading\", function () {\n    cy.openPropertyPane(\"progresswidget\"); // enable infinite loading\n\n    cy.togglebar(\".t--property-control-infiniteloading input[type='checkbox']\"); // show indeterminate linear progress\n\n    cy.get(\"[data-cy='indeterminate-linear-progress']\").should(\"exist\").should(\"have.css\", \"animation\"); // disable infinite loading\n\n    cy.togglebarDisable(\".t--property-control-infiniteloading input[type='checkbox']\"); // show determinate linear progress\n\n    cy.get(\"[data-cy='50']\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Others/Progress_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Property: value, Change progress value","suites":["Progress Widget"],"updatePoint":{"line":30,"column":44,"index":1181},"line":30,"code":"  it(\"Property: value, Change progress value\", function () {\n    cy.updateCodeInput(\".t--property-control-progress\", \"60\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200); // pass 60\n\n    cy.get(\"[data-cy='60']\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Others/Progress_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Property: showResult, Toggle show result","suites":["Progress Widget"],"updatePoint":{"line":36,"column":46,"index":1474},"line":36,"code":"  it(\"Property: showResult, Toggle show result\", function () {\n    // enable show result\n    cy.togglebar(\".t--property-control-showresult input[type='checkbox']\"); // show label\n\n    cy.get(\"[data-cy='60']\").first().next().should(\"contain.text\", \"60\"); // disable show result\n\n    cy.togglebarDisable(\".t--property-control-showresult input[type='checkbox']\"); // does not show any label\n\n    cy.get(\"[data-cy='60']\").first().next().should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Others/Progress_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Property: steps, Change steps","suites":["Progress Widget"],"updatePoint":{"line":46,"column":35,"index":1923},"line":46,"code":"  it(\"Property: steps, Change steps\", function () {\n    cy.updateCodeInput(\".t--property-control-numberofsteps\", \"2\"); // show progress with steps\n\n    cy.get(\"[data-cy='step']\").should(\"have.length\", 2);\n    cy.updateCodeInput(\".t--property-control-numberofsteps\", \"1\"); // does not show progress with steps\n\n    cy.get(\"[data-cy='step']\").should(\"not.exist\");\n  }); // Circular progress","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Others/Progress_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Property: type, Change type to Circular","suites":["Progress Widget"],"updatePoint":{"line":55,"column":45,"index":2323},"line":55,"code":"  it(\"Property: type, Change type to Circular\", function () {\n    // Switch to circular mode\n    cy.selectDropdownValue(\".t--property-control-type\", \"Circular\");\n    cy.get(\"[data-cy='circular']\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Others/Progress_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Property: isIndeterminate, Toggle infinite loading","suites":["Progress Widget"],"updatePoint":{"line":60,"column":56,"index":2554},"line":60,"code":"  it(\"Property: isIndeterminate, Toggle infinite loading\", function () {\n    cy.openPropertyPane(\"progresswidget\"); // enable infinite loading\n\n    cy.togglebar(\".t--property-control-infiniteloading input[type='checkbox']\"); // show indeterminate linear progress\n\n    cy.get(\"[data-cy='circular']\").should(\"exist\").should(\"have.css\", \"animation\"); // disable infinite loading\n\n    cy.togglebarDisable(\".t--property-control-infiniteloading input[type='checkbox']\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Others/Progress_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Property: value, Change progress value","suites":["Progress Widget"],"updatePoint":{"line":70,"column":44,"index":3116},"line":70,"code":"  it(\"Property: value, Change progress value\", function () {\n    cy.updateCodeInput(\".t--property-control-progress\", \"50\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200); // The path element with 50 should exist\n\n    cy.get(\"[data-testvalue='50']\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Others/Progress_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Property: showResult, Toggle show result","suites":["Progress Widget"],"updatePoint":{"line":76,"column":46,"index":3446},"line":76,"code":"  it(\"Property: showResult, Toggle show result\", function () {\n    // enable show result\n    cy.togglebar(\".t--property-control-showresult input[type='checkbox']\"); // show label\n\n    cy.get(\"[data-cy='circular-label']\").should(\"contain.text\", \"50\"); // disable show result\n\n    cy.togglebarDisable(\".t--property-control-showresult input[type='checkbox']\"); // does not show any label\n\n    cy.get(\"[data-cy='circular-label']\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Others/Progress_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Property: steps, Change steps","suites":["Progress Widget"],"updatePoint":{"line":86,"column":35,"index":3889},"line":86,"code":"  it(\"Property: steps, Change steps\", function () {\n    cy.updateCodeInput(\".t--property-control-numberofsteps\", \"2\"); // show circular progress with steps\n\n    cy.get(\"[data-cy='separator']\").should(\"have.length\", 2);\n    cy.updateCodeInput(\".t--property-control-numberofsteps\", \"1\"); // does not show progress with steps\n\n    cy.get(\"[data-cy='separator']\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Others/Progress_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Property: counterClockwise,Change counterclockwise","suites":["Progress Widget"],"updatePoint":{"line":94,"column":56,"index":4297},"line":94,"code":"  it(\"Property: counterClockwise,Change counterclockwise\", function () {\n    // enable counterclockwise\n    cy.togglebar(\".t--property-control-counterclockwise input[type='checkbox']\"); // show the progress in a counterclockwise\n\n    cy.get(\"[data-testvalue='50']\").invoke(\"css\", \"stroke-dashoffset\").and(\"match\", /-/); // disable counterclockwise\n\n    cy.togglebarDisable(\".t--property-control-counterclockwise input[type='checkbox']\"); // show the progress in a clockwise\n\n    cy.get(\"[data-testvalue='50']\").invoke(\"css\", \"stroke-dashoffset\").should(\"not.match\", /-/);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Others/Progress_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"The binding property, progress should be exposed for an auto suggestion","suites":["Progress Widget"],"updatePoint":{"line":104,"column":77,"index":4896},"line":104,"code":"  it(\"The binding property, progress should be exposed for an auto suggestion\", function () {\n    cy.openPropertyPane(\"textwidget\");\n    cy.get(\".t--property-control-text .CodeMirror textarea\").type(\"{{Progress1.\", {\n      force: true\n    });\n    cy.get(\"ul.CodeMirror-hints\").contains(\"progress\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Others/Progress_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Open Existing Statbox from created Widgets list","suites":["Statbox Widget Functionality"],"updatePoint":{"line":13,"column":56,"index":433},"line":13,"code":"  it(\"1. Open Existing Statbox from created Widgets list\", () => {\n    cy.get(\".widgets\").first().click();\n    cy.get(\".t--entity .widget\").get(\".entity-context-menu\").last().click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Others/Statbox_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Open Existing Statbox, change background color and verify","suites":["Statbox Widget Functionality"],"updatePoint":{"line":19,"column":66,"index":658},"line":19,"code":"  it(\"2. Open Existing Statbox, change background color and verify\", () => {\n    cy.openPropertyPane(\"statboxwidget\"); // changing the background color of statbox and verying it\n\n    cy.get(\".t--property-pane-section-general\").then(() => {\n      cy.get(\".bp3-input-group\").first().clear().wait(400).type(\"#FFC13D\");\n      cy.get(\".bp3-input\").should(\"have.value\", \"#FFC13D\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Others/Statbox_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Verify Statbox icon button's onClick action and change the icon","suites":["Statbox Widget Functionality"],"updatePoint":{"line":27,"column":72,"index":1054},"line":27,"code":"  it(\"3. Verify Statbox icon button's onClick action and change the icon\", () => {\n    cy.openPropertyPane(\"iconbuttonwidget\");\n    cy.get(\".t--property-pane-section-general\").then(() => {\n      // changing the icon to arrow-up\n      cy.get(\".bp3-button-text\").first().click();\n      cy.get(\".bp3-icon-arrow-up\").click(); // opening modal from onClick action of icon button\n\n      cy.createModal(\"Modal\", \"Modal1\");\n    }); // verifying the changed icon\n\n    cy.get(\".bp3-icon-arrow-up\").should(\"be.visible\"); // verifying modal has been added\n\n    cy.get(\".t--draggable-iconbuttonwidget\").last().click();\n    cy.get(\"span:contains('Close')\").closest(\"div\").click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Others/Statbox_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Bind datasource to multiple components in statbox","suites":["Statbox Widget Functionality"],"updatePoint":{"line":42,"column":58,"index":1713},"line":42,"code":"  it(\"4. Bind datasource to multiple components in statbox\", () => {\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"MockApi\");\n    cy.enterDatasourceAndPath(data.paginationUrl, \"users?page=4&size=3\");\n    cy.SaveAndRunAPI(); // going to HomePage where the button widget is located and opening it's property pane.\n\n    cy.get(widgetsPage.NavHomePage).click({\n      force: true\n    });\n    cy.reload(); // binding datasource to text widget in statbox\n\n    cy.openPropertyPane(\"textwidget\");\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"{ctrl}{shift}{downarrow}\").type(\"{{MockApi.data.users[0].id}}\", {\n      parseSpecialCharSequences: false\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Others/Statbox_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Verify Statbox can be placed inside another widget","suites":["Statbox Widget Functionality"],"updatePoint":{"line":58,"column":59,"index":2380},"line":58,"code":"  it(\"5. Verify Statbox can be placed inside another widget\", () => {\n    cy.get(explorer.addWidget).click(); // placing statbox widget inside container widget\n\n    cy.dragAndDropToCanvas(\"containerwidget\", {\n      x: 500,\n      y: 300\n    });\n    cy.dragAndDropToWidget(\"statboxwidget\", \"containerwidget\", {\n      x: 100,\n      y: 100\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Others/Statbox_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Video Widget play functionality validation","suites":["Video Widget Functionality"],"updatePoint":{"line":17,"column":48,"index":571},"line":17,"code":"  it(\"Video Widget play functionality validation\", function () {\n    cy.openPropertyPane(\"videowidget\");\n    cy.widgetText(\"Video1\", widgetsPage.videoWidget, commonlocators.videoInner);\n    cy.get(commonlocators.onPlay).click();\n    cy.selectShowMsg();\n    cy.addSuccessMessage(\"Play success\");\n    cy.get(widgetsPage.autoPlay).click();\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    /*\n    cy.wait(4000);\n    cy.get(commonlocators.toastMsg).should(\"be.visible\");\n    cy.get(commonlocators.toastMsg).contains(\"Play success\");\n    */\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Others/Video_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Video widget pause functionality validation","suites":["Video Widget Functionality"],"updatePoint":{"line":31,"column":49,"index":1171},"line":31,"code":"  it(\"Video widget pause functionality validation\", function () {\n    cy.get(commonlocators.onPause).click();\n    cy.selectShowMsg();\n    cy.addSuccessMessage(\"Pause success\");\n    cy.get(widgetsPage.autoPlay).click();\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    /*\n    cy.wait(4000);\n    cy.get(commonlocators.toastMsg).should(\"be.visible\");\n    cy.get(commonlocators.toastMsg).contains(\"Pause success\");\n    */\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Others/Video_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Update video url and check play and pause functionality validation","suites":["Video Widget Functionality"],"updatePoint":{"line":43,"column":72,"index":1676},"line":43,"code":"  it(\"Update video url and check play and pause functionality validation\", function () {\n    cy.testCodeMirror(testdata.videoUrl);\n    cy.get(\".CodeMirror textarea\").first().blur();\n    cy.get(widgetsPage.autoPlay).click({\n      force: true\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    /*\n    cy.wait(4000);\n    cy.get(commonlocators.toastMsg).should(\"be.visible\");\n    cy.get(commonlocators.toastMsg).contains(\"Play success\");\n    */\n\n    cy.get(widgetsPage.autoPlay).click({\n      force: true\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    /*\n    cy.wait(4000);\n    cy.get(commonlocators.toastMsg).should(\"be.visible\");\n    cy.get(commonlocators.toastMsg).contains(\"Pause success\");\n    */\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Others/Video_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Add new dropdown widget","suites":["Phone input widget - "],"updatePoint":{"line":11,"column":32,"index":350},"line":11,"code":"  it(\"1. Add new dropdown widget\", () => {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(widgetName, {\n      x: 300,\n      y: 300\n    });\n    cy.get(`.t--widget-${widgetName}`).should(\"exist\");\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 300,\n      y: 500\n    });\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{PhoneInput1.text}}:{{PhoneInput1.countryCode}}:{{PhoneInput1.dialCode}}`);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/PhoneInput/Phone_input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Should check for the format and dialCode","suites":["Phone input widget - "],"updatePoint":{"line":25,"column":49,"index":835},"line":25,"code":"  it(\"2. Should check for the format and dialCode\", () => {\n    cy.get(`.t--widget-${widgetName} input`).clear();\n    cy.wait(500);\n    cy.get(`.t--widget-${widgetName} input`).type(\"9999999999\");\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"(999) 999-9999:US:+1\");\n    cy.openPropertyPane(widgetName);\n    cy.selectDropdownValue(\".t--property-control-defaultcountrycode\", \"Afghanistan (+93)\");\n    cy.get(`.t--widget-${widgetName} input`).clear();\n    cy.wait(500);\n    cy.get(`.t--widget-${widgetName} input`).type(\"1234567890\");\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"1234567890:AF:+93\");\n    cy.get(\".t--input-country-code-change\").should(\"contain\", \"🇦🇫+93\");\n    cy.get(\".t--property-control-allowcountrycodechange label\").last().click({\n      force: true\n    });\n    cy.get(\".t--input-country-code-change\").first().click();\n    cy.get(\".t--search-input input\").type(\"+91\");\n    cy.wait(500);\n    cy.get(\".t--dropdown-option\").last().click();\n    cy.get(`.t--widget-${widgetName} input`).clear();\n    cy.wait(500);\n    cy.get(`.t--widget-${widgetName} input`).type(\"9999999999\");\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"99999 99999:IN:+91\");\n    cy.get(\".t--input-country-code-change\").should(\"contain\", \"🇮🇳+91\");\n    cy.get(\".t--property-control-enableformatting label\").last().click({\n      force: true\n    });\n    cy.selectDropdownValue(\".t--property-control-defaultcountrycode\", \"United States / Canada (+1)\");\n    cy.get(`.t--widget-${widgetName} input`).clear();\n    cy.wait(500);\n    cy.get(`.t--widget-${widgetName} input`).type(\"9999999999\");\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"9999999999:US:+1\");\n    cy.openPropertyPane(widgetName);\n    cy.selectDropdownValue(\".t--property-control-defaultcountrycode\", \"India (+91)\");\n    cy.get(`.t--widget-${widgetName} input`).clear();\n    cy.wait(500);\n    cy.get(`.t--widget-${widgetName} input`).type(\"1234567890\");\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"1234567890:IN:+91\");\n    cy.get(\".t--input-country-code-change\").should(\"contain\", \"🇮🇳+91\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/PhoneInput/Phone_input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Should check that widget input resets on submit","suites":["Phone input widget - "],"updatePoint":{"line":65,"column":56,"index":2935},"line":65,"code":"  it(\"3. Should check that widget input resets on submit\", () => {\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{PhoneInput1.text}}:{{PhoneInput1.value}}`);\n    cy.openPropertyPane(widgetName);\n    cy.get(\".t--property-control-onsubmit .t--open-dropdown-Select-Action\").click();\n    cy.selectShowMsg();\n    cy.addSuccessMessage(\"Submitted!!\", \".t--property-control-onsubmit\");\n    cy.get(widgetInput).clear();\n    cy.wait(500);\n    cy.get(widgetInput).click().type(\"1234567890\");\n    cy.wait(500);\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"1234567890:1234567890\");\n    cy.get(widgetInput).type(\"{enter}\");\n    cy.wait(300);\n    cy.get(widgetInput).should(\"contain.value\", \"\");\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \":\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/PhoneInput/Phone_input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Check isDirty meta property","suites":["Phone input widget - "],"updatePoint":{"line":82,"column":36,"index":3719},"line":82,"code":"  it(\"4. Check isDirty meta property\", function () {\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{PhoneInput1.isDirty}}`); // Change defaultText\n\n    cy.openPropertyPane(widgetName);\n    cy.updateCodeInput(\".t--property-control-defaulttext\", \"1\");\n    cy.closePropertyPane(); // Check if isDirty is set to false\n\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\"); // Interact with UI\n\n    cy.get(widgetInput).clear();\n    cy.wait(300);\n    cy.get(widgetInput).type(\"2\");\n    cy.wait(300); // Check if isDirty is set to true\n\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"true\"); // Reset isDirty by changing defaultText\n\n    cy.openPropertyPane(widgetName);\n    cy.updateCodeInput(\".t--property-control-defaulttext\", \"3\"); // Check if isDirty is set to false\n\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/PhoneInput/Phone_input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Should show empty dropdown for a typo","suites":["Phone input widget - "],"updatePoint":{"line":10,"column":46,"index":334},"line":10,"code":"  it(\"1. Should show empty dropdown for a typo\", () => {\n    cy.openPropertyPane(widgetName); // Turn on allowCountryCodeChange\n\n    cy.get(\".t--property-control-allowcountrycodechange label\").last().click({\n      force: true\n    }); // Click on the country code change option\n\n    cy.get(\".t--input-country-code-change\").first().click(); // Search with a typo\n\n    cy.get(\".t--search-input input\").type(\"inpia\");\n    cy.wait(500); // Assert the options dropdown is still open\n\n    cy.get(\".t--search-input input\").should(\"be.visible\");\n    cy.PublishtheApp(); // Click on the country code change option\n\n    cy.get(\".t--input-country-code-change\").first().click(); // Search with a typo\n\n    cy.get(\".t--search-input input\").type(\"inpia\");\n    cy.wait(500); // Assert the options dropdown is still open\n\n    cy.get(\".t--search-input input\").should(\"be.visible\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/PhoneInput/PhoneInputDynamicValue_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. should check that widget can be used with dynamic default dial code","suites":["Phone input widget - "],"updatePoint":{"line":33,"column":76,"index":1276},"line":33,"code":"  it(\"2. should check that widget can be used with dynamic default dial code\", () => {\n    cy.openPropertyPane(widgetName);\n    cy.get(\".t--property-control-defaultcountrycode .CodeMirror-code\").should(\"contain\", \"{{appsmith.store.test}}\");\n    cy.get(\".t--input-country-code-change\").first().click();\n    cy.get(\".t--search-input input\").type(\"india\");\n    cy.wait(500);\n    cy.get(\".t--dropdown-option\").last().click();\n    cy.get(\".t--property-control-defaultcountrycode .CodeMirror-code\").should(\"contain\", \"{{appsmith.store.test}}\");\n    cy.PublishtheApp();\n    cy.get(\".bp3-button.select-button\").click({\n      force: true\n    });\n    cy.get(\".menu-item-text\").first().click({\n      force: true\n    });\n    cy.get(\".t--input-country-code-change\").should(\"contain\", \"+91\");\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"+91:IN:+91\");\n    cy.get(\".bp3-button.select-button\").click({\n      force: true\n    });\n    cy.get(\".menu-item-text\").last().click({\n      force: true\n    });\n    cy.get(\".t--input-country-code-change\").should(\"contain\", \"+93\");\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"+93:AF:+93\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/PhoneInput/PhoneInputDynamicValue_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Radio Widget Functionality","suites":["Radio Widget Functionality"],"updatePoint":{"line":13,"column":32,"index":429},"line":13,"code":"  it(\"Radio Widget Functionality\", function () {\n    cy.openPropertyPane(\"radiogroupwidget\");\n    /**\n     * @param{Text} Random Text\n     * @param{RadioWidget}Mouseover\n     * @param{RadioPre Css} Assertion\n     */\n\n    cy.widgetText(\"radiotest\", formWidgetsPage.radioWidget, formWidgetsPage.radioInput);\n    /**\n     * @param{IndexValue} Provide Input Index Value\n     * @param{Text} Index Text Value.\n     *\n     */\n\n    cy.radioInput(0, this.data.radio1);\n    cy.get(formWidgetsPage.labelradio).eq(0).should(\"have.text\", \"test1\");\n    cy.radioInput(1, \"1\");\n    cy.radioInput(2, this.data.radio2);\n    cy.get(formWidgetsPage.labelradio).eq(1).should(\"have.text\", this.data.radio2);\n    cy.radioInput(3, \"2\");\n    cy.get(formWidgetsPage.radioAddButton).click({\n      force: true\n    });\n    cy.radioInput(4, this.data.radio4);\n    cy.get(formWidgetsPage.deleteradiovalue).eq(2).click({\n      force: true\n    });\n    cy.get(formWidgetsPage.labelradio).should(\"not.have.value\", \"test4\");\n    /**\n     * @param{Show Alert} Css for InputChange\n     */\n\n    cy.getAlert(commonlocators.optionchangeRadioselect);\n    cy.get(formWidgetsPage.defaultSelect);\n    cy.get(formWidgetsPage.radioOnSelectionChangeDropdown).get(commonlocators.dropdownSelectButton).click({\n      force: true\n    }).type(\"2\");\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Radio/Radio_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Radio Functionality To Unchecked Visible Widget","suites":["Radio Widget Functionality"],"updatePoint":{"line":53,"column":53,"index":1776},"line":53,"code":"  it(\"Radio Functionality To Unchecked Visible Widget\", function () {\n    cy.get(publish.backToEditor).click();\n    cy.openPropertyPane(\"radiogroupwidget\");\n    cy.togglebarDisable(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.radioWidget + \" \" + \"input\").should(\"not.exist\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Radio/Radio_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Radio Functionality To Check Visible Widget","suites":["Radio Widget Functionality"],"updatePoint":{"line":61,"column":49,"index":2127},"line":61,"code":"  it(\"Radio Functionality To Check Visible Widget\", function () {\n    cy.openPropertyPane(\"radiogroupwidget\");\n    cy.togglebar(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.radioWidget + \" \" + \"input\").should(\"be.checked\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Radio/Radio_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Radio Functionality To Button Text","suites":["Radio Widget Functionality"],"updatePoint":{"line":67,"column":40,"index":2379},"line":67,"code":"  it(\"Radio Functionality To Button Text\", function () {\n    cy.get(publish.radioWidget + \" \" + \"label\").eq(1).should(\"have.text\", \"test2\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Radio/Radio_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Radio widget check selection with value property as integer","suites":["RadioGroup widget testing"],"updatePoint":{"line":18,"column":65,"index":621},"line":18,"code":"  it(\"Radio widget check selection with value property as integer\", function () {\n    cy.openPropertyPane(\"radiogroupwidget\"); //Check radio with value=1 is selected\n\n    checkSelectedRadioValue(formWidgetsPage.radioWidget, \"1\"); //Change the DSV to {{2}}\n\n    cy.updateCodeInput(\".t--property-control-defaultselectedvalue\", \"{{2}}\");\n    cy.wait(200); //Radio with value=2 is selected\n\n    checkSelectedRadioValue(formWidgetsPage.radioWidget, \"2\"); //Check option 1 and then check it's value:\n\n    cy.get(`${formWidgetsPage.radioWidget} input`).check(\"1\", {\n      force: true\n    });\n    checkSelectedRadioValue(formWidgetsPage.radioWidget, \"1\"); //Check option 2 and then check it's value:\n\n    cy.get(`${formWidgetsPage.radioWidget} input`).check(\"2\", {\n      force: true\n    });\n    checkSelectedRadioValue(formWidgetsPage.radioWidget, \"2\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Radio/RadioGroup_Int_Value_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Radio widget check selection with value property as string","suites":["RadioGroup widget testing"],"updatePoint":{"line":38,"column":64,"index":1472},"line":38,"code":"  it(\"Radio widget check selection with value property as string\", function () {\n    cy.openPropertyPane(\"radiogroupwidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"Yes\",\n          \"value\": \"1\"\n        },\n        {\n          \"label\": \"No\",\n          \"value\": \"2\"\n        }\n      ]`); //Change the DSV to 1.\n\n    cy.updateCodeInput(\".t--property-control-defaultselectedvalue\", \"1\"); //Check radio with value=1 is selected\n\n    checkSelectedRadioValue(formWidgetsPage.radioWidget, \"1\"); //Change the DSV to 2.\n\n    cy.updateCodeInput(\".t--property-control-defaultselectedvalue\", \"2\");\n    cy.wait(200); //Check radio with value=2 is selected\n\n    checkSelectedRadioValue(formWidgetsPage.radioWidget, \"2\"); //Check option 1 and then check it's value:\n\n    cy.get(`${formWidgetsPage.radioWidget} input`).check(\"1\", {\n      force: true\n    });\n    checkSelectedRadioValue(formWidgetsPage.radioWidget, \"1\"); //Check option 2 and then check it's value:\n\n    cy.get(`${formWidgetsPage.radioWidget} input`).check(\"2\", {\n      force: true\n    });\n    checkSelectedRadioValue(formWidgetsPage.radioWidget, \"2\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Radio/RadioGroup_Int_Value_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check the custom validations for the options property","suites":["RadioGroup widget testing"],"updatePoint":{"line":70,"column":59,"index":2622},"line":70,"code":"  it(\"Check the custom validations for the options property\", function () {\n    /**\n     * Test case defs, an error should be thrown when:\n     * 1. When datatypes are not same for value property\n     * 2. When duplicate values is given\n     * 3. When invalid value is given\n     */\n    //Base-line scenario\n    cy.openPropertyPane(\"radiogroupwidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"Yes\",\n          \"value\": 1\n        },\n        {\n          \"label\": \"No\",\n          \"value\": 2\n        }\n      ]`);\n    cy.updateCodeInput(\".t--property-control-defaultselectedvalue\", \"{{1}}\");\n    cy.wait(200);\n    const inputOutputValues = [{\n      //Case 1.0:When datatypes are not same for value property\n      input: `[\n          {\n            \"label\": \"Yes\",\n            \"value\": \"1\"\n          },\n          {\n            \"label\": \"No\",\n            \"value\": 2\n          }\n        ]`,\n      message: \"All value properties in options must have the same type\"\n    }, {\n      //Case 1.1:When datatypes are not same for value property\n      input: `[\n          {\n            \"label\": \"Yes\",\n            \"value\": \"\"\n          },\n          {\n            \"label\": \"No\",\n            \"value\": 2\n          }\n        ]`,\n      message: `All value properties in options must have the same type`\n    }, {\n      //Case 2:When duplicate values is given\n      input: `[\n          {\n            \"label\": \"Yes\",\n            \"value\": 2\n          },\n          {\n            \"label\": \"No\",\n            \"value\": 2\n          }\n        ]`,\n      message: \"path:value must be unique. Duplicate values found\"\n    }, {\n      //Case 3.0:When invalid value is given\n      input: `[\n          {\n            \"label\": \"Yes\",\n            \"value\":\n          },\n          {\n            \"label\": \"No\",\n            \"value\": 2\n          }\n        ]`,\n      message: `This value does not evaluate to type Array<{ \"label\": \"string\", \"value\": \"string\" | number }>`\n    }, {\n      //Case 3.1:When invalid value is given\n      input: `[\n          {\n            \"label\": \"Yes\",\n            \"value\": \"\n          },\n          {\n            \"label\": \"No\",\n            \"value\": 2\n          }\n        ]`,\n      message: `This value does not evaluate to type Array<{ \"label\": \"string\", \"value\": \"string\" | number }>`\n    }];\n    inputOutputValues.map(useCase => {\n      cy.updateCodeInput(\".t--property-control-options\", useCase.input);\n      cy.evaluateErrorMessage(useCase.message);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Radio/RadioGroup_Int_Value_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check the value is string or integer for the default value","suites":["RadioGroup widget testing"],"updatePoint":{"line":162,"column":64,"index":5120},"line":162,"code":"  it(\"Check the value is string or integer for the default value\", () => {\n    /**\n     * Test cases:\n     * 1. Object data type should be invalid\n     * 2. Boolean should be invalid\n     * 3. Integer should be valid\n     * 4. String should be valid\n     */\n    //Base-line scenario\n    cy.openPropertyPane(\"radiogroupwidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n         {\n           \"label\": \"Yes\",\n           \"value\": 1\n         },\n         {\n           \"label\": \"No\",\n           \"value\": 2\n         }\n       ]`);\n    cy.updateCodeInput(\".t--property-control-defaultselectedvalue\", \"{{1}}\");\n    cy.wait(200);\n    const inputOutputValues = [{\n      //Case 1.0: Object data type should be invalid\n      input: \"{{[]}}\",\n      message: \"This value does not evaluate to type: string or number\"\n    }, {\n      //Case 1.1: Object data type should be invalid\n      input: \"{{{}}}\",\n      message: `This value does not evaluate to type: string or number`\n    }, {\n      //Case 2: Boolean data type should be invalid\n      input: \"{{true}}\",\n      message: `This value does not evaluate to type: string or number`\n    }, {\n      //Case 3:Integer should be valid\n      input: \"{{1}}\",\n      message: \"\"\n    }, {\n      //Case 4:String should be valid\n      input: \"1\",\n      message: \"\"\n    }];\n    inputOutputValues.map(useCase => {\n      cy.updateCodeInput(\".t--property-control-defaultselectedvalue\", useCase.input);\n\n      if (useCase.message === \"\") {\n        cy.wait(200);\n        cy.get(\".t--evaluatedPopup-error\").should(\"not.exist\");\n      } else {\n        cy.evaluateErrorMessage(useCase.message);\n      }\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Radio/RadioGroup_Int_Value_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Add new widget","suites":["Radiogroup Widget Functionality"],"updatePoint":{"line":9,"column":20,"index":261},"line":9,"code":"  it(\"Add new widget\", () => {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"radiogroupwidget\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(\".t--widget-radiogroupwidget\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Radio/RadioGroup1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check that empty value is allowed in options","suites":["Radiogroup Widget Functionality"],"updatePoint":{"line":17,"column":57,"index":518},"line":17,"code":"  it(\"should check that empty value is allowed in options\", () => {\n    cy.openPropertyPane(\"radiogroupwidget\");\n    cy.get(\".t--property-control-options\").find(\".t--js-toggle\").click({\n      force: true\n    });\n    cy.updateCodeInput(\".t--property-control-options\", `[\n          {\n            \"label\": \"Yes\",\n            \"value\": \"Y\"\n          },\n          {\n            \"label\": \"No\",\n            \"value\": \"\"\n          }\n        ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Radio/RadioGroup1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check that more thatn empty value is not allowed in options","suites":["Radiogroup Widget Functionality"],"updatePoint":{"line":34,"column":72,"index":1064},"line":34,"code":"  it(\"should check that more thatn empty value is not allowed in options\", () => {\n    cy.openPropertyPane(\"radiogroupwidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n          {\n            \"label\": \"Yes\",\n            \"value\": \"\"\n          },\n          {\n            \"label\": \"No\",\n            \"value\": \"\"\n          }\n        ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Radio/RadioGroup1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Drag & drop Radio group & Text widgets","suites":["Radio Group Widget"],"updatePoint":{"line":5,"column":44,"index":199},"line":5,"code":"  it(\"Drag & drop Radio group & Text widgets\", () => {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(widgetName, {\n      x: 300,\n      y: 300\n    });\n    cy.get(`.t--widget-${widgetName}`).should(\"exist\");\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 300,\n      y: 500\n    });\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{RadioGroup1.isDirty}}`);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Radio/RadioGroup2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check isDirty meta property","suites":["Radio Group Widget"],"updatePoint":{"line":19,"column":33,"index":618},"line":19,"code":"  it(\"Check isDirty meta property\", function () {\n    // Check if initial value of isDirty is false\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\"); // Interact with UI\n\n    cy.get(\".t--widget-radiogroupwidget .bp3-radio\").last().click(); // Check if isDirty is set to true\n\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"true\"); // Change defaultOptionValue\n\n    cy.openPropertyPane(widgetName);\n    cy.updateCodeInput(\".t--property-control-defaultselectedvalue\", \"N\"); // Check if isDirty is reset to false\n\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Radio/RadioGroup2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"RichTextEditor-Edit Text area with HTML body functionality","suites":["RichTextEditor Widget Functionality"],"updatePoint":{"line":47,"column":64,"index":1396},"line":47,"code":"  it(\"RichTextEditor-Edit Text area with HTML body functionality\", function () {\n    //changing the Text Name\n    cy.widgetText(this.data.RichTextEditorName, formWidgetsPage.richTextEditorWidget, formWidgetsPage.richTextEditorWidget + \" \" + commonlocators.widgetNameTag); //Edit the text area with Html\n\n    cy.testJsontext(\"defaulttext\", this.data.HtmlText); //Validate Html\n\n    cy.validateHTMLText(formWidgetsPage.richTextEditorWidget, \"h1\", \"This is a Heading\");\n    cy.PublishtheApp();\n    cy.validateHTMLText(publishPage.richTextEditorWidget, \"h1\", \"This is a Heading\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/RTE/RichTextEditor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"RichTextEditor-Enable Validation","suites":["RichTextEditor Widget Functionality"],"updatePoint":{"line":57,"column":38,"index":1953},"line":57,"code":"  it(\"RichTextEditor-Enable Validation\", function () {\n    //Uncheck the Disabled checkbox\n    cy.UncheckWidgetProperties(formWidgetsPage.disableJs);\n    cy.validateEnableWidget(formWidgetsPage.richTextEditorWidget, commonlocators.disabledBtn);\n    cy.PublishtheApp();\n    cy.validateEnableWidget(publishPage.richTextEditorWidget, commonlocators.disabledBtn);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/RTE/RichTextEditor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"RichTextEditor-Disable Validation","suites":["RichTextEditor Widget Functionality"],"updatePoint":{"line":64,"column":39,"index":2320},"line":64,"code":"  it(\"RichTextEditor-Disable Validation\", function () {\n    //Check the Disabled checkbox\n    cy.CheckWidgetProperties(formWidgetsPage.disableJs);\n    cy.validateDisableWidget(formWidgetsPage.richTextEditorWidget, commonlocators.disabledBtn);\n    cy.PublishtheApp();\n    cy.validateDisableWidget(publishPage.richTextEditorWidget, commonlocators.disabledBtn);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/RTE/RichTextEditor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"RichTextEditor-check Visible field  validation","suites":["RichTextEditor Widget Functionality"],"updatePoint":{"line":71,"column":52,"index":2698},"line":71,"code":"  it(\"RichTextEditor-check Visible field  validation\", function () {\n    // Uncheck the visible checkbox\n    cy.UncheckWidgetProperties(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publishPage.richTextEditorWidget).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/RTE/RichTextEditor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"RichTextEditor-uncheck Visible field validation","suites":["RichTextEditor Widget Functionality"],"updatePoint":{"line":77,"column":53,"index":2964},"line":77,"code":"  it(\"RichTextEditor-uncheck Visible field validation\", function () {\n    // Check the visible checkbox\n    cy.CheckWidgetProperties(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publishPage.richTextEditorWidget).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/RTE/RichTextEditor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"RichTextEditor-check Hide toolbar field validation","suites":["RichTextEditor Widget Functionality"],"updatePoint":{"line":83,"column":56,"index":3230},"line":83,"code":"  it(\"RichTextEditor-check Hide toolbar field validation\", function () {\n    // Check the Hide toolbar checkbox\n    cy.CheckWidgetProperties(commonlocators.hideToolbarCheckbox);\n    cy.validateToolbarHidden(formWidgetsPage.richTextEditorWidget, commonlocators.rteToolbar);\n    cy.PublishtheApp();\n    cy.validateToolbarHidden(publishPage.richTextEditorWidget, commonlocators.rteToolbar);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/RTE/RichTextEditor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"RichTextEditor-uncheck Hide toolbar field validation","suites":["RichTextEditor Widget Functionality"],"updatePoint":{"line":90,"column":58,"index":3626},"line":90,"code":"  it(\"RichTextEditor-uncheck Hide toolbar field validation\", function () {\n    // Uncheck the Hide toolbar checkbox\n    cy.UncheckWidgetProperties(commonlocators.hideToolbarCheckbox);\n    cy.validateToolbarVisible(formWidgetsPage.richTextEditorWidget, commonlocators.rteToolbar);\n    cy.PublishtheApp();\n    cy.validateToolbarVisible(publishPage.richTextEditorWidget, commonlocators.rteToolbar);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/RTE/RichTextEditor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Reset RichTextEditor","suites":["RichTextEditor Widget Functionality"],"updatePoint":{"line":97,"column":26,"index":3996},"line":97,"code":"  it(\"Reset RichTextEditor\", function () {\n    // Enable the widget\n    cy.UncheckWidgetProperties(formWidgetsPage.disableJs);\n    cy.setTinyMceContent(\"rte-6h8j08u7ea\", \"<h1>content</h1>\");\n    cy.validateHTMLText(formWidgetsPage.richTextEditorWidget, \"h1\", \"content\");\n    cy.openPropertyPane(\"buttonwidget\");\n    cy.get(\".t--property-control-onclick\").find(\".t--js-toggle\").click({\n      force: true\n    });\n    cy.testJsontext(\"onclick\", '{{resetWidget(\"RichtextEditor\", true)}}');\n    cy.get(\".t--widget-buttonwidget .bp3-button\").click({\n      force: true\n    });\n    cy.wait(500);\n    cy.validateHTMLText(formWidgetsPage.richTextEditorWidget, \"h1\", \"This is a Heading\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/RTE/RichTextEditor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check isDirty meta property","suites":["RichTextEditor Widget Functionality"],"updatePoint":{"line":113,"column":33,"index":4687},"line":113,"code":"  it(\"Check isDirty meta property\", function () {\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{RichtextEditor.isDirty}}`);\n    cy.openPropertyPane(\"richtexteditorwidget\"); // Change defaultText\n\n    cy.testJsontext(\"defaulttext\", \"a\"); // Check if isDirty has been changed into false\n\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\"); // Interact with UI\n\n    cy.get(formWidgetsPage.richTextEditorWidget + \" iframe\").then($iframe => {\n      const $body = $iframe.contents().find(\"body\");\n      cy.get($body).type(\"abc\", {\n        force: true\n      });\n    }); // Check if isDirty is set to true\n\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"true\"); // Change defaultText\n\n    cy.openPropertyPane(\"richtexteditorwidget\");\n    cy.testJsontext(\"defaulttext\", \"b\"); // Check if isDirty is reset to false\n\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\");\n    /**\n     * Check the following scenario\n     * After reset, post entering default text, isDirty should remain false;\n     */\n\n    cy.get(\".t--widget-buttonwidget .bp3-button\").click({\n      force: true\n    });\n    cy.wait(500);\n    cy.openPropertyPane(\"richtexteditorwidget\");\n    cy.testJsontext(\"defaulttext\", \"c\");\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/RTE/RichTextEditor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check if the binding is getting removed from the text and the RTE widget","suites":["RichTextEditor Widget Functionality"],"updatePoint":{"line":148,"column":78,"index":6062},"line":148,"code":"  it(\"Check if the binding is getting removed from the text and the RTE widget\", function () {\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{RichtextEditor.text}}`); // Change defaultText of the RTE\n\n    cy.openPropertyPane(\"richtexteditorwidget\");\n    cy.testJsontext(\"defaulttext\", \"Test Content\"); //Check if the text widget has the defaultText of RTE\n\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"Test Content\"); //Clear the default text from RTE\n\n    cy.openPropertyPane(\"richtexteditorwidget\");\n    cy.testJsontext(\"defaulttext\", \"\"); //Check if text widget and RTE widget does not have any text in it.\n\n    cy.get(\".t--widget-richtexteditorwidget\").should(\"contain\", \"\");\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/RTE/RichTextEditor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check if text does not re-appear when cut, inside the RTE widget","suites":["RichTextEditor Widget Functionality"],"updatePoint":{"line":163,"column":70,"index":6856},"line":163,"code":"  it(\"Check if text does not re-appear when cut, inside the RTE widget\", function () {\n    cy.window().then(win => {\n      const tinyMceId = \"rte-6h8j08u7ea\";\n      const editor = win.tinymce.editors[tinyMceId]; //Set the content\n\n      editor.setContent(\"Test Content\"); //Check the content:\n\n      expect(editor.getContent({\n        format: \"text\"\n      })).to.be.equal(\"Test Content\"); //Set the content\n\n      editor.setContent(\"\"); //Check the content:\n\n      expect(editor.getContent({\n        format: \"text\"\n      })).to.be.equal(\"\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/RTE/RichTextEditor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check if the cursor position is at the end for the RTE widget","suites":["RichTextEditor Widget Functionality"],"updatePoint":{"line":181,"column":67,"index":7409},"line":181,"code":"  it(\"Check if the cursor position is at the end for the RTE widget\", function () {\n    const tinyMceId = \"rte-6h8j08u7ea\";\n    const testString = \"Test Content\";\n    const testStringLen = testString.length; // Check if the cursor is at the end when input Type is HTML\n\n    setRTEContent(testString);\n    testCursorPoistion(testStringLen, tinyMceId);\n    setRTEContent(\"{selectAll}\");\n    setRTEContent(\"{backspace}\"); // Changing the input type to markdown and again testing the cursor position\n\n    cy.openPropertyPane(\"richtexteditorwidget\");\n    cy.selectDropdownValue(\".t--property-control-inputtype .bp3-popover-target\", \"Markdown\");\n    setRTEContent(testString);\n    testCursorPoistion(testStringLen, tinyMceId);\n    cy.selectDropdownValue(\".t--property-control-inputtype .bp3-popover-target\", \"HTML\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/RTE/RichTextEditor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check if different font size texts are supported inside the RTE widget","suites":["RichTextEditor Widget Functionality"],"updatePoint":{"line":197,"column":76,"index":8235},"line":197,"code":"  it(\"Check if different font size texts are supported inside the RTE widget\", function () {\n    const tinyMceId = \"rte-6h8j08u7ea\";\n    const testString = \"Test Content\"; // Set the content inside RTE widget by typing\n\n    setRTEContent(`${testString} {enter} ${testString} 1`);\n    cy.get(\".tox-tbtn--bespoke\").click({\n      force: true\n    });\n    cy.contains(\"Heading 1\").click({\n      force: true\n    });\n    cy.window().then(win => {\n      const editor = win.tinymce.editors[tinyMceId]; // Get the current editor text\n\n      const getCurrentHtmlContent = editor.getContent(); // Check if the editor contains text of font sizes h1 and p;\n\n      expect(getCurrentHtmlContent).contains(\"<h1>\");\n      expect(getCurrentHtmlContent).contains(\"<p>\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/RTE/RichTextEditor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"RichTextEditor-required with empty content show error border for textarea","suites":["RichTextEditor Widget Validation"],"updatePoint":{"line":15,"column":79,"index":498},"line":15,"code":"  it(\"RichTextEditor-required with empty content show error border for textarea\", function () {\n    cy.setTinyMceContent(\"rte-6h8j08u7ea\", \"\");\n    cy.get(commonlocators.requiredCheckbox).click({\n      force: true\n    });\n    cy.wait(500); // check that input border is red\n\n    cy.get(formWidgetsPage.richTextEditorWidget + \" div[data-testid='rte-container'] > div\").should(\"have.css\", \"border\", \"1px solid rgb(242, 43, 43)\");\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/RTE/RichTextEditor_Validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Drag and drop Select/Text widgets","suites":["Select widget"],"updatePoint":{"line":10,"column":42,"index":384},"line":10,"code":"  it(\"1. Drag and drop Select/Text widgets\", () => {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"selectwidget\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(formWidgetsPage.selectWidget).should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Select/Select_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Check isDirty meta property","suites":["Select widget"],"updatePoint":{"line":18,"column":36,"index":615},"line":18,"code":"  it(\"2. Check isDirty meta property\", () => {\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 300,\n      y: 500\n    });\n    cy.updateCodeInput(\".t--property-control-text\", `{{Select1.isDirty}}`); // Check if initial value of isDirty is false\n\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\"); // Interact with UI\n\n    cy.get(formWidgetsPage.selectWidget).find(widgetLocators.dropdownSingleSelect).click({\n      force: true\n    });\n    cy.get(commonlocators.singleSelectWidgetMenuItem).contains(\"Blue\").click({\n      force: true\n    }); // Check if isDirty is set to true\n\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"true\"); // Change defaultOptionValue property\n\n    cy.updateCodeInput(\".t--property-control-defaultvalue\", \"RED\"); // Check if isDirty is reset to false\n\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Select/Select_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Clears the search field when widget is closed and serverSideFiltering is off","suites":["Select widget"],"updatePoint":{"line":40,"column":85,"index":1534},"line":40,"code":"  it(\"3. Clears the search field when widget is closed and serverSideFiltering is off\", () => {\n    // open the select widget\n    cy.get(formWidgetsPage.selectWidget).find(widgetLocators.dropdownSingleSelect).click({\n      force: true\n    }); // search for option Red in the search input\n\n    cy.get(commonlocators.selectInputSearch).type(\"Red\"); // Select the Red option from dropdown list\n\n    cy.get(commonlocators.singleSelectWidgetMenuItem).contains(\"Red\").click({\n      force: true\n    });\n    cy.wait(200); // Assert if the select widget has Red as the selected value\n\n    cy.get(formWidgetsPage.selectWidget).contains(\"Red\"); // Open the select widget again\n\n    cy.get(formWidgetsPage.selectWidget).find(widgetLocators.dropdownSingleSelect).click({\n      force: true\n    }); // Assert if the search input is empty now\n\n    cy.get(commonlocators.selectInputSearch).invoke(\"val\").should(\"be.empty\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Select/Select_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Does not clear the search field when widget is closed and serverSideFiltering is on","suites":["Select widget"],"updatePoint":{"line":61,"column":92,"index":2454},"line":61,"code":"  it(\"4. Does not clear the search field when widget is closed and serverSideFiltering is on\", () => {\n    // toggle the serversidefiltering option on\n    cy.togglebar('.t--property-control-serversidefiltering input[type=\"checkbox\"]'); // open the select widget\n\n    cy.get(formWidgetsPage.selectWidget).find(widgetLocators.dropdownSingleSelect).click({\n      force: true\n    }); // search for option Red in the search input\n\n    cy.get(commonlocators.selectInputSearch).type(\"Red\"); // Select the Red option from dropdown list\n\n    cy.get(commonlocators.singleSelectWidgetMenuItem).contains(\"Red\").click({\n      force: true\n    });\n    cy.wait(200); // Open the select widget again\n\n    cy.get(formWidgetsPage.selectWidget).find(widgetLocators.dropdownSingleSelect).click({\n      force: true\n    }); // Assert if the search input is not empty\n\n    cy.get(commonlocators.selectInputSearch).invoke(\"val\").should(\"not.be.empty\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Select/Select_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"To Check empty options for Multi Select Tree Widget","suites":["MultiSelect, Tree Select and Multi Tree Select Widget Empty Options Functionality"],"updatePoint":{"line":9,"column":57,"index":367},"line":9,"code":"  it(\"To Check empty options for Multi Select Tree Widget\", () => {\n    cy.get(formWidgetsPage.treeSelectInput).first().click({\n      force: true\n    });\n    cy.get(\".rc-tree-select-empty\").should(\"have.text\", \"No Results Found\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Select/Select_TreeSelect_MultiSelect_Empty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"To Check empty options for Single Select Tree Widget","suites":["MultiSelect, Tree Select and Multi Tree Select Widget Empty Options Functionality"],"updatePoint":{"line":15,"column":58,"index":605},"line":15,"code":"  it(\"To Check empty options for Single Select Tree Widget\", function () {\n    cy.get(formWidgetsPage.treeSelectInput).last().click({\n      force: true\n    }).get(\".single-tree-select-dropdown .rc-tree-select-empty\").should(\"have.text\", \"No Results Found\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Select/Select_TreeSelect_MultiSelect_Empty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"To Check empty options for Multi Select Widget","suites":["MultiSelect, Tree Select and Multi Tree Select Widget Empty Options Functionality"],"updatePoint":{"line":20,"column":52,"index":863},"line":20,"code":"  it(\"To Check empty options for Multi Select Widget\", () => {\n    cy.get(formWidgetsPage.mulitiselectInput).click({\n      force: true\n    });\n    cy.get(\".rc-select-item-empty\").should(\"have.text\", \"No Results Found\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Select/Select_TreeSelect_MultiSelect_Empty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Select Widget name update","suites":["Select Widget Functionality"],"updatePoint":{"line":14,"column":31,"index":477},"line":14,"code":"  it(\"Select Widget name update\", function () {\n    cy.openPropertyPane(\"selectwidget\");\n    cy.widgetText(\"Select1\", widgetsPage.selectwidget, commonlocators.selectInner);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Select/select_Widget_Bug_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check that virtualization works well","suites":["Select Widget Functionality"],"updatePoint":{"line":18,"column":49,"index":674},"line":18,"code":"  it(\"should check that virtualization works well\", () => {\n    cy.openPropertyPane(\"selectwidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"RANDOM\",\n          \"value\": \"RANDOM\"\n        },\n        {\n          \"label\": \"RANDOM1\",\n          \"value\": \"RANDOM1\"\n        },\n        {\n          \"label\": \"RANDOM2\",\n          \"value\": \"RANDOM2\"\n        },\n        {\n          \"label\": \"RANDOM3\",\n          \"value\": \"RANDOM3\"\n        },\n        {\n          \"label\": \"RANDOM4\",\n          \"value\": \"RANDOM4\"\n        },\n        {\n          \"label\": \"RANDOM5\",\n          \"value\": \"RANDOM5\"\n        }\n      ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"not.exist\"); // Changing the option to the last item\n\n    cy.get(formWidgetsPage.selectWidget).find(widgetsPage.dropdownSingleSelect).click({\n      force: true\n    });\n    cy.get(commonlocators.singleSelectWidgetMenuItem).contains(\"RANDOM5\").click({\n      force: true\n    });\n    cy.wait(500); // Verifying the top items still renders\n\n    cy.get(formWidgetsPage.selectWidget).find(widgetsPage.dropdownSingleSelect).click({\n      force: true\n    });\n    cy.get(commonlocators.singleSelectWidgetMenuItem).contains(\"RANDOM1\").click({\n      force: true\n    }); // Add a longer list of item\n\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"RANDOM\",\n          \"value\": \"RANDOM\"\n        },\n        {\n          \"label\": \"RANDOM1\",\n          \"value\": \"RANDOM1\"\n        },\n        {\n          \"label\": \"RANDOM2\",\n          \"value\": \"RANDOM2\"\n        },\n        {\n          \"label\": \"RANDOM3\",\n          \"value\": \"RANDOM3\"\n        },\n        {\n          \"label\": \"RANDOM4\",\n          \"value\": \"RANDOM4\"\n        },\n        {\n          \"label\": \"RANDOM5\",\n          \"value\": \"RANDOM5\"\n        },\n        {\n          \"label\": \"RANDOM6\",\n          \"value\": \"RANDOM6\"\n        },\n        {\n          \"label\": \"RANDOM7\",\n          \"value\": \"RANDOM7\"\n        },\n        {\n          \"label\": \"RANDOM8\",\n          \"value\": \"RANDOM8\"\n        },\n        {\n          \"label\": \"RANDOM9\",\n          \"value\": \"RANDOM9\"\n        },\n        {\n          \"label\": \"RANDOM10\",\n          \"value\": \"RANDOM10\"\n        },\n        {\n          \"label\": \"RANDOM11\",\n          \"value\": \"RANDOM11\"\n        }\n\n      ]`);\n    cy.get(formWidgetsPage.selectWidget).find(widgetsPage.dropdownSingleSelect).click({\n      force: true\n    });\n    cy.get(commonlocators.singleSelectWidgetMenuItem).contains(\"RANDOM1\").click({\n      force: true\n    });\n    cy.wait(500);\n    cy.get(formWidgetsPage.selectWidget).find(widgetsPage.dropdownSingleSelect).click({\n      force: true\n    });\n    cy.get(commonlocators.singleSelectWidgetMenuItem).contains(\"RANDOM11\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Select/select_Widget_Bug_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check that filtering works well","suites":["Select Widget Functionality"],"updatePoint":{"line":126,"column":44,"index":3467},"line":126,"code":"  it(\"should check that filtering works well\", () => {\n    cy.openPropertyPane(\"selectwidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"RANDOM\",\n          \"value\": \"RANDOM\"\n        },\n        {\n          \"label\": \"RANDOM1\",\n          \"value\": \"RANDOM1\"\n        },\n        {\n          \"label\": \"RANDOM2\",\n          \"value\": \"RANDOM2\"\n        },\n        {\n          \"label\": \"RANDOM3\",\n          \"value\": \"RANDOM3\"\n        },\n        {\n          \"label\": \"RANDOM4\",\n          \"value\": \"RANDOM4\"\n        },\n        {\n          \"label\": \"RANDOM5\",\n          \"value\": \"RANDOM5\"\n        }\n      ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"not.exist\"); // Filtering the option\n\n    cy.get(formWidgetsPage.selectWidget).find(widgetsPage.dropdownSingleSelect).click({\n      force: true\n    });\n    cy.get(commonlocators.selectInputSearch).type(\"RANDOM5\"); // confirm it only has a single child\n\n    cy.get(\".select-popover-wrapper .menu-virtual-list\").children().should(\"have.length\", 1);\n    cy.get(commonlocators.singleSelectWidgetMenuItem).contains(\"RANDOM5\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Select/select_Widget_Bug_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Disable the widget and check in publish mode","suites":["Select Widget Functionality"],"updatePoint":{"line":164,"column":50,"index":4619},"line":164,"code":"  it(\"Disable the widget and check in publish mode\", function () {\n    cy.get(widgetsPage.disable).scrollIntoView({\n      force: true\n    });\n    cy.get(widgetsPage.selectWidgetDisabled).click({\n      force: true\n    });\n    cy.get(\".bp3-disabled\").should(\"be.visible\");\n    cy.PublishtheApp();\n    cy.get(\".bp3-disabled\").should(\"be.visible\");\n    cy.goToEditFromPublish();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Select/select_Widget_Bug_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"enable the widget and check in publish mode","suites":["Select Widget Functionality"],"updatePoint":{"line":176,"column":49,"index":4999},"line":176,"code":"  it(\"enable the widget and check in publish mode\", function () {\n    cy.openPropertyPane(\"selectwidget\");\n    cy.get(\".bp3-disabled\").should(\"be.visible\");\n    cy.get(widgetsPage.disable).scrollIntoView({\n      force: true\n    });\n    cy.get(widgetsPage.selectWidgetDisabled).click({\n      force: true\n    });\n    cy.get(\".bp3-button\").should(\"be.visible\"); // Set default value as RANDOM11\n\n    cy.updateCodeInput(\".t--property-control-defaultvalue\", `{\n        \"label\": \"RANDOM5\",\n        \"value\": \"RANDOM5\"\n      }`);\n    cy.PublishtheApp();\n    cy.get(\".bp3-button.select-button\").eq(0).should(\"be.visible\").click({\n      force: true\n    });\n    cy.get(commonlocators.singleSelectActiveMenuItem).should(\"contain.text\", \"RANDOM5\");\n    cy.goToEditFromPublish();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Select/select_Widget_Bug_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Select Widget name update","suites":["Select Widget Functionality"],"updatePoint":{"line":12,"column":31,"index":401},"line":12,"code":"  it(\"Select Widget name update\", function () {\n    cy.openPropertyPane(\"selectwidget\");\n    cy.widgetText(\"Select1\", widgetsPage.selectwidget, commonlocators.selectInner);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Select/select_Widget_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Disable the widget and check in publish mode","suites":["Select Widget Functionality"],"updatePoint":{"line":16,"column":50,"index":599},"line":16,"code":"  it(\"Disable the widget and check in publish mode\", function () {\n    cy.get(widgetsPage.disable).scrollIntoView({\n      force: true\n    });\n    cy.get(widgetsPage.selectWidgetDisabled).click({\n      force: true\n    });\n    cy.get(\".bp3-disabled\").should(\"be.visible\");\n    cy.PublishtheApp();\n    cy.get(\".bp3-disabled\").should(\"be.visible\");\n    cy.goToEditFromPublish();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Select/select_Widget_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"enable the widget and check in publish mode","suites":["Select Widget Functionality"],"updatePoint":{"line":28,"column":49,"index":979},"line":28,"code":"  it(\"enable the widget and check in publish mode\", function () {\n    cy.openPropertyPane(\"selectwidget\");\n    cy.get(\".bp3-disabled\").should(\"be.visible\");\n    cy.get(widgetsPage.disable).scrollIntoView({\n      force: true\n    });\n    cy.get(widgetsPage.selectWidgetDisabled).click({\n      force: true\n    });\n    cy.get(\".t--widget-selectwidget .bp3-button\").should(\"be.visible\");\n    cy.PublishtheApp();\n    cy.get(\".t--widget-selectwidget .bp3-button\").should(\"be.visible\").click({\n      force: true\n    });\n    cy.get(commonlocators.singleSelectActiveMenuItem).should(\"contain.text\", \"Green\");\n    cy.goToEditFromPublish();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Select/select_Widget_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Check isDirty meta property","suites":["Single Select Widget Functionality"],"updatePoint":{"line":13,"column":36,"index":444},"line":13,"code":"  it(\"1. Check isDirty meta property\", function () {\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{SingleSelectTree1.isDirty}}`); // Change defaultText\n\n    cy.openPropertyPane(\"singleselecttreewidget\");\n    cy.updateCodeInput(\".t--property-control-defaultvalue\", \"GREEN\"); // Check if isDirty is reset to false\n\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\"); // Interact with UI\n\n    cy.get(formWidgetsPage.treeSelectInput).last().click({\n      force: true\n    });\n    cy.get(formWidgetsPage.treeSelectFilterInput).click().type(\"light\");\n    cy.treeSelectDropdown(\"Light Blue\"); // Check if isDirty is set to true\n\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"true\"); // Change defaultText\n\n    cy.openPropertyPane(\"singleselecttreewidget\");\n    cy.updateCodeInput(\".t--property-control-defaultvalue\", \"RED\"); // Check if isDirty is reset to false\n\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Select/Single_Select_Tree_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Selects value with enter in default value","suites":["Single Select Widget Functionality"],"updatePoint":{"line":35,"column":50,"index":1453},"line":35,"code":"  it(\"2. Selects value with enter in default value\", () => {\n    cy.openPropertyPane(\"singleselecttreewidget\");\n    cy.testJsontext(\"defaultvalue\", \"RED\\n\");\n    cy.get(formWidgetsPage.singleselecttreeWidget).find(\".rc-tree-select-selection-item\").first().should(\"have.text\", \"Red\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Select/Single_Select_Tree_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. To Validate Options","suites":["Single Select Widget Functionality"],"updatePoint":{"line":40,"column":28,"index":1721},"line":40,"code":"  it(\"3. To Validate Options\", function () {\n    cy.get(formWidgetsPage.treeSelectInput).last().click({\n      force: true\n    });\n    cy.get(formWidgetsPage.treeSelectFilterInput).click().type(\"light\");\n    cy.treeSelectDropdown(\"Light Blue\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Select/Single_Select_Tree_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Clears the search field when widget is closed","suites":["Single Select Widget Functionality"],"updatePoint":{"line":47,"column":54,"index":1997},"line":47,"code":"  it(\"4. Clears the search field when widget is closed\", () => {\n    // Open the widget\n    cy.get(formWidgetsPage.treeSelectInput).last().click({\n      force: true\n    }); // Search for Green option in the search input\n\n    cy.get(formWidgetsPage.treeSelectFilterInput).click().type(\"Green\"); // Select the Green Option\n\n    cy.treeSelectDropdown(\"Green\"); // Assert Green option is selected\n\n    cy.get(formWidgetsPage.singleselecttreeWidget).find(\".rc-tree-select-selection-item\").first().should(\"have.text\", \"Green\"); // Reopen the widget\n\n    cy.get(formWidgetsPage.treeSelectInput).last().click({\n      force: true\n    }); // Assert the search input is cleared\n\n    cy.get(formWidgetsPage.treeSelectFilterInput).invoke(\"val\").should(\"be.empty\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Select/Single_Select_Tree_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. To Unchecked Visible Widget","suites":["Single Select Widget Functionality"],"updatePoint":{"line":65,"column":36,"index":2737},"line":65,"code":"  it(\"5. To Unchecked Visible Widget\", function () {\n    cy.togglebarDisable(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.singleselecttreewidget + \" \" + \".rc-tree-select-single\").should(\"not.exist\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Select/Single_Select_Tree_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. To Check Visible Widget","suites":["Single Select Widget Functionality"],"updatePoint":{"line":71,"column":32,"index":3012},"line":71,"code":"  it(\"6. To Check Visible Widget\", function () {\n    cy.openPropertyPane(\"singleselecttreewidget\");\n    cy.togglebar(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.singleselecttreewidget + \" \" + \".rc-tree-select-single\").should(\"be.visible\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Select/Single_Select_Tree_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Add new widget","suites":["Tree Select Widget"],"updatePoint":{"line":11,"column":23,"index":329},"line":11,"code":"  it(\"1. Add new widget\", () => {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"singleselecttreewidget\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(\".t--widget-singleselecttreewidget\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Select/Tree_Select_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. toggle on allow clear selection and clear the input","suites":["Tree Select Widget"],"updatePoint":{"line":19,"column":60,"index":601},"line":19,"code":"  it(\"2. toggle on allow clear selection and clear the input\", () => {\n    cy.openPropertyPane(\"singleselecttreewidget\"); // toggle on allow clear selection\n\n    cy.togglebar(\".t--property-control-allowclearingvalue input[type='checkbox']\"); // assert if cancel icon exists on the widget input\n\n    cy.get(formWidgetsPage.singleselecttreeWidget).find(\".rc-tree-select-clear\").should(\"exist\"); // click on the cancel icon\n\n    cy.get(formWidgetsPage.singleselecttreeWidget).find(\".rc-tree-select-clear\").click({\n      force: true\n    }); // assert if the widget input value is now empty\n\n    cy.get(formWidgetsPage.singleselecttreeWidget).invoke(\"val\").should(\"be.empty\"); // click on the widget\n\n    cy.get(formWidgetsPage.treeSelectInput).last().click({\n      force: true\n    }); // select Green option\n\n    cy.treeSelectDropdown(\"Green\"); // again click on cancel icon in the widget\n\n    cy.get(formWidgetsPage.singleselecttreeWidget).find(\".rc-tree-select-clear\").click({\n      force: true\n    }); // assert if the widget input value is now empty\n\n    cy.get(formWidgetsPage.singleselecttreeWidget).invoke(\"val\").should(\"be.empty\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Select/Tree_Select_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. toggle of allow clear selection","suites":["Tree Select Widget"],"updatePoint":{"line":44,"column":40,"index":1723},"line":44,"code":"  it(\"3. toggle of allow clear selection\", () => {\n    cy.openPropertyPane(\"singleselecttreewidget\"); // toggle off allow clear selection\n\n    cy.togglebarDisable(\".t--property-control-allowclearingvalue input[type='checkbox']\"); // assert if cancel icon does not exists on the widget input\n\n    cy.get(formWidgetsPage.singleselecttreeWidget).find(\".rc-tree-select-clear\").should(\"not.exist\"); // click on the widget again\n\n    cy.get(formWidgetsPage.treeSelectInput).last().click({\n      force: true\n    }); // select Green option\n\n    cy.treeSelectDropdown(\"Green\"); // assert if the widget input value is Green\n\n    cy.get(formWidgetsPage.singleselecttreeWidget).find(\".rc-tree-select-selection-item\").first().should(\"have.text\", \"Green\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Select/Tree_Select_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. should check that empty value is allowed in options","suites":["Tree Select Widget"],"updatePoint":{"line":59,"column":60,"index":2492},"line":59,"code":"  it(\"4. should check that empty value is allowed in options\", () => {\n    cy.openPropertyPane(\"singleselecttreewidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"Blue\",\n          \"value\": \"\",\n          \"children\": [\n            {\n              \"label\": \"Dark Blue\",\n              \"value\": \"DARK BLUE\"\n            },\n            {\n              \"label\": \"Light Blue\",\n              \"value\": \"LIGHT BLUE\"\n            }\n          ]\n        },\n        {\n          \"label\": \"Green\",\n          \"value\": \"GREEN\"\n        },\n        {\n          \"label\": \"Red\",\n          \"value\": \"RED\"\n        }\n      ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Select/Tree_Select_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. should check that more than empty value is not allowed in options","suites":["Tree Select Widget"],"updatePoint":{"line":87,"column":74,"index":3247},"line":87,"code":"  it(\"5. should check that more than empty value is not allowed in options\", () => {\n    cy.openPropertyPane(\"singleselecttreewidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"Blue\",\n          \"value\": \"\",\n          \"children\": [\n            {\n              \"label\": \"Dark Blue\",\n              \"value\": \"DARK BLUE\"\n            },\n            {\n              \"label\": \"Light Blue\",\n              \"value\": \"LIGHT BLUE\"\n            }\n          ]\n        },\n        {\n          \"label\": \"Green\",\n          \"value\": \"\"\n        },\n        {\n          \"label\": \"Red\",\n          \"value\": \"RED\"\n        }\n      ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Select/Tree_Select_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Switch Widget Functionality","suites":["Switch Widget Functionality"],"updatePoint":{"line":15,"column":33,"index":501},"line":15,"code":"  it(\"Switch Widget Functionality\", function () {\n    cy.openPropertyPane(\"switchwidget\");\n    /**\n     * @param{Text} Random Text\n     * @param{SwitchWidget}Mouseover\n     * @param{SwitchPre Css} Assertion\n     */\n\n    cy.widgetText(\"Toggler\", formWidgetsPage.switchWidget, widgetsPage.switchInput);\n    /**\n     * @param{Text} Random Value\n     */\n\n    cy.testCodeMirror(this.data.switchInputName);\n    cy.get(widgetsPage.switchLabel).should(\"have.text\", \"Switch1\");\n    /**\n     * @param{toggleButton Css} Assert to be checked\n     */\n\n    cy.togglebar(widgetsPage.defaultcheck);\n    /**\n     * @param{Show Alert} Css for InputChange\n     */\n\n    cy.getAlert(commonlocators.optionchangetextSwitch);\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Switch/Switch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Switch Functionality To Switch Label","suites":["Switch Widget Functionality"],"updatePoint":{"line":42,"column":42,"index":1242},"line":42,"code":"  it(\"Switch Functionality To Switch Label\", function () {\n    cy.get(publish.switchwidget + \" \" + \"label\").should(\"have.text\", this.data.switchInputName);\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Switch/Switch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Switch Functionality To Check Disabled Widget","suites":["Switch Widget Functionality"],"updatePoint":{"line":46,"column":51,"index":1455},"line":46,"code":"  it(\"Switch Functionality To Check Disabled Widget\", function () {\n    cy.openPropertyPane(\"switchwidget\");\n    cy.togglebar(commonlocators.Disablejs + \" \" + \"input\");\n    cy.PublishtheApp();\n    cy.get(publish.switchwidget + \" \" + \"input\").should(\"be.disabled\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Switch/Switch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Switch Functionality To Check Enabled Widget","suites":["Switch Widget Functionality"],"updatePoint":{"line":53,"column":50,"index":1767},"line":53,"code":"  it(\"Switch Functionality To Check Enabled Widget\", function () {\n    cy.openPropertyPane(\"switchwidget\");\n    cy.togglebarDisable(commonlocators.Disablejs + \" \" + \"input\");\n    cy.PublishtheApp();\n    cy.get(publish.switchwidget + \" \" + \"input\").should(\"be.enabled\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Switch/Switch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Switch Functionality To Unchecked Visible Widget","suites":["Switch Widget Functionality"],"updatePoint":{"line":60,"column":54,"index":2089},"line":60,"code":"  it(\"Switch Functionality To Unchecked Visible Widget\", function () {\n    cy.openPropertyPane(\"switchwidget\");\n    cy.togglebarDisable(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.switchwidget + \" \" + \"input\").should(\"not.exist\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Switch/Switch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Switch Functionality To Check Visible Widget","suites":["Switch Widget Functionality"],"updatePoint":{"line":67,"column":50,"index":2396},"line":67,"code":"  it(\"Switch Functionality To Check Visible Widget\", function () {\n    cy.openPropertyPane(\"switchwidget\");\n    cy.togglebar(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.switchwidget + \" \" + \"input\").should(\"be.checked\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Switch/Switch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Switch Functionality To swap label alignment of switch","suites":["Switch Widget Functionality"],"updatePoint":{"line":74,"column":60,"index":2707},"line":74,"code":"  it(\"Switch Functionality To swap label alignment of switch\", function () {\n    cy.openPropertyPane(\"switchwidget\");\n    cy.get(publish.switchwidget + \" \" + \".bp3-align-right\").should(\"not.exist\");\n    cy.get(publish.switchwidget + \" \" + \".bp3-align-left\").should(\"exist\"); // align right\n\n    cy.get(\".t--property-control-alignment .t--button-tab-RIGHT\").first().click();\n    cy.wait(200);\n    cy.PublishtheApp();\n    cy.get(publish.switchwidget + \" \" + \".bp3-align-right\").should(\"exist\");\n    cy.get(publish.switchwidget + \" \" + \".bp3-align-left\").should(\"not.exist\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Switch/Switch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Switch Functionality To swap label position of switch","suites":["Switch Widget Functionality"],"updatePoint":{"line":86,"column":59,"index":3327},"line":86,"code":"  it(\"Switch Functionality To swap label position of switch\", function () {\n    cy.openPropertyPane(\"switchwidget\");\n    cy.get(publish.switchwidget + \" \" + \".t--switch-widget-label\").should(\"have.css\", \"text-align\", \"right\");\n    cy.get(commonlocators.optionposition).last().click({\n      force: true\n    });\n    cy.wait(200);\n    cy.get(commonlocators.dropdownmenu).contains(\"Left\").click({\n      force: true\n    });\n    cy.wait(200);\n    cy.PublishtheApp();\n    cy.get(publish.switchwidget + \" \" + \".t--switch-widget-label\").should(\"have.css\", \"text-align\", \"left\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Switch/Switch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Switch Functionality To change label color of switch","suites":["Switch Widget Functionality"],"updatePoint":{"line":101,"column":58,"index":3944},"line":101,"code":"  it(\"Switch Functionality To change label color of switch\", function () {\n    cy.openPropertyPane(\"switchwidget\");\n    cy.get(\".t--property-control-textcolor .bp3-input\").type(\"red\");\n    cy.wait(200);\n    cy.PublishtheApp();\n    cy.get(publish.switchwidget + \" \" + \".t--switch-widget-label\").should(\"have.css\", \"color\", \"rgb(255, 0, 0)\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Switch/Switch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Switch Functionality To change label size of switch","suites":["Switch Widget Functionality"],"updatePoint":{"line":109,"column":57,"index":4332},"line":109,"code":"  it(\"Switch Functionality To change label size of switch\", function () {\n    cy.openPropertyPane(\"switchwidget\");\n    cy.get(widgetsPage.textSize).last().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.selectTxtSize(\"XL\");\n    cy.PublishtheApp();\n    cy.get(publish.switchwidget + \" \" + \".t--switch-widget-label\").should(\"have.css\", \"font-size\", \"30px\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Switch/Switch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Switch Functionality To change label style of switch","suites":["Switch Widget Functionality"],"updatePoint":{"line":121,"column":58,"index":4809},"line":121,"code":"  it(\"Switch Functionality To change label style of switch\", function () {\n    cy.openPropertyPane(\"switchwidget\");\n    cy.get(\".t--property-control-labelfontstyle .t--button-tab-BOLD\").click({\n      force: true\n    });\n    cy.PublishtheApp();\n    cy.get(publish.switchwidget + \" \" + \".t--switch-widget-label\").should(\"have.css\", \"font-weight\", \"700\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Switch/Switch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check isDirty meta property","suites":["Switch Widget Functionality"],"updatePoint":{"line":130,"column":33,"index":5185},"line":130,"code":"  it(\"Check isDirty meta property\", function () {\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{Toggler.isDirty}}`); // Change defaultSwitchState property\n\n    cy.openPropertyPane(\"switchwidget\");\n    cy.get(\".t--property-control-defaultselected label\").last().click(); // Check if isDirty is reset to false\n\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\"); // Interact with UI\n\n    cy.get(`${formWidgetsPage.switchWidget} label`).first().click(); // Check if isDirty is set to true\n\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"true\"); // Change defaultSwitchState property\n\n    cy.openPropertyPane(\"switchwidget\");\n    cy.get(\".t--property-control-defaultselected label\").last().click(); // Check if isDirty is reset to false\n\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Switch/Switch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Add a new switch group widget with others","suites":["Switchgroup Widget Functionality"],"updatePoint":{"line":10,"column":50,"index":311},"line":10,"code":"  it(\"1. Add a new switch group widget with others\", () => {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"switchgroupwidget\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(\".t--widget-switchgroupwidget\").should(\"exist\");\n    cy.dragAndDropToCanvas(\"checkboxgroupwidget\", {\n      x: 300,\n      y: 500\n    });\n    cy.get(\".t--widget-checkboxgroupwidget\").should(\"exist\");\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 300,\n      y: 700\n    });\n    cy.get(\".t--widget-textwidget\").should(\"exist\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{SwitchGroup1.selectedValues[0]}}`);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Switch/Switchgroup1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Should check that empty value is allowed in options","suites":["Switchgroup Widget Functionality"],"updatePoint":{"line":29,"column":60,"index":944},"line":29,"code":"  it(\"2. Should check that empty value is allowed in options\", () => {\n    cy.openPropertyPane(\"switchgroupwidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"Blue\",\n          \"value\": \"\"\n        },\n        {\n          \"label\": \"Green\",\n          \"value\": \"GREEN\"\n        },\n        {\n          \"label\": \"Red\",\n          \"value\": \"RED\"\n        }\n      ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Switch/Switchgroup1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Should check that more thatn empty value is not allowed in options","suites":["Switchgroup Widget Functionality"],"updatePoint":{"line":47,"column":75,"index":1457},"line":47,"code":"  it(\"3. Should check that more thatn empty value is not allowed in options\", () => {\n    cy.openPropertyPane(\"switchgroupwidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"Blue\",\n          \"value\": \"\"\n        },\n        {\n          \"label\": \"Green\",\n          \"value\": \"\"\n        },\n        {\n          \"label\": \"Red\",\n          \"value\": \"RED\"\n        }\n      ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Switch/Switchgroup1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Setting selectedValues to undefined does not crash the app","suites":["Switchgroup Widget Functionality"],"updatePoint":{"line":65,"column":67,"index":1953},"line":65,"code":"  it(\"4. Setting selectedValues to undefined does not crash the app\", () => {\n    // Reset options for switch group\n    cy.openPropertyPane(\"switchgroupwidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"Blue\",\n          \"value\": \"BLUE\"\n        },\n        {\n          \"label\": \"Green\",\n          \"value\": \"GREEN\"\n        },\n        {\n          \"label\": \"Red\",\n          \"value\": \"RED\"\n        }\n      ]`); // throw a cyclic dependency error from checkbox group\n\n    cy.openPropertyPane(\"checkboxgroupwidget\");\n    cy.get(\".t--property-control-options input\").eq(1).click({\n      force: true\n    }).type(\"{{BLUE}}\", {\n      parseSpecialCharSequences: false\n    });\n    cy.wait(2000);\n    cy.get(\".t--property-control-options\").find(\".t--js-toggle\").trigger(\"click\").wait(3000); // verify absence of cyclic dependency error\n\n    cy.VerifyErrorMsgAbsence(\"Cyclic dependency found while evaluating\"); // check if a crash messsge is appeared\n\n    cy.get(\".t--widget-switchgroupwidget\").contains(\"Oops, Something went wrong.\").should(\"not.exist\");\n    cy.wait(1000); // Assert that evaluation is not disabled\n\n    cy.get(\".t--widget-textwidget\").should(\"contain\", `BLUE`);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Switch/Switchgroup1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Widget name changes","suites":["Switch Group Widget Functionality"],"updatePoint":{"line":21,"column":25,"index":646},"line":21,"code":"  it(\"Widget name changes\", function () {\n    /**\n     * @param{Text} Random Text\n     * @param{RadioWidget}Mouseover\n     * @param{RadioPre Css} Assertion\n     */\n    cy.widgetText(\"switchgrouptest\", formWidgetsPage.switchGroupWidget, formWidgetsPage.switchGroupInput);\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Switch/SwitchGroup2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Property: options","suites":["Switch Group Widget Functionality"],"updatePoint":{"line":30,"column":23,"index":949},"line":30,"code":"  it(\"Property: options\", function () {\n    // Add a new option\n    const optionToAdd = {\n      label: \"Yellow\",\n      value: \"YELLOW\"\n    };\n    cy.get(\".t--property-control-options .CodeMirror textarea\").first().focus({\n      force: true\n    }).type(\"{ctrl}{end}\", {\n      force: true\n    }).type(\"{ctrl}{uparrow}\", {\n      force: true\n    }).type(\"{end}\", {\n      force: true\n    }).type(\",{enter}\").type(JSON.stringify(optionToAdd), {\n      parseSpecialCharSequences: false\n    }); // Assert\n\n    cy.get(formWidgetsPage.labelSwitchGroup).should(\"have.length\", 4).eq(3).contains(\"Yellow\");\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Switch/SwitchGroup2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Property: defaultSelectedValues","suites":["Switch Group Widget Functionality"],"updatePoint":{"line":51,"column":37,"index":1590},"line":51,"code":"  it(\"Property: defaultSelectedValues\", function () {\n    // Add a new option\n    const valueToAdd = \"GREEN\";\n    cy.get(\".t--property-control-defaultselectedvalues .CodeMirror textarea\").first().focus({\n      force: true\n    }).type(\"{ctrl}{end}\", {\n      force: true\n    }).type(\"{ctrl}{uparrow}\", {\n      force: true\n    }).type(\"{end}\", {\n      force: true\n    }).type(\",{enter}\").type(`\"${valueToAdd}\"`); // Assert\n\n    cy.get(`${formWidgetsPage.labelSwitchGroup} input:checked`).should(\"have.length\", 2).eq(1).parent().contains(\"Green\");\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Switch/SwitchGroup2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Property: isVisible === FALSE","suites":["Switch Group Widget Functionality"],"updatePoint":{"line":67,"column":35,"index":2166},"line":67,"code":"  it(\"Property: isVisible === FALSE\", function () {\n    cy.togglebarDisable(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.switchGroupWidget + \" \" + \"input\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Switch/SwitchGroup2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Property: isVisible === TRUE","suites":["Switch Group Widget Functionality"],"updatePoint":{"line":72,"column":34,"index":2379},"line":72,"code":"  it(\"Property: isVisible === TRUE\", function () {\n    cy.togglebar(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.switchGroupWidget + \" \" + \"input\").eq(0).should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Switch/SwitchGroup2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Property: onSelectionChange","suites":["Switch Group Widget Functionality"],"updatePoint":{"line":77,"column":33,"index":2586},"line":77,"code":"  it(\"Property: onSelectionChange\", function () {\n    // create an alert modal and verify its name\n    cy.createModal(this.data.ModalName);\n    cy.PublishtheApp();\n    cy.get(publish.switchGroupWidget + \" \" + \"label.bp3-switch\").children().first().click({\n      force: true\n    });\n    cy.get(modalWidgetPage.modelTextField).should(\"have.text\", this.data.ModalName);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Switch/SwitchGroup2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check isDirty meta property","suites":["Switch Group Widget Functionality"],"updatePoint":{"line":86,"column":33,"index":2959},"line":86,"code":"  it(\"Check isDirty meta property\", function () {\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{switchgrouptest.isDirty}}`); // Change defaultSelectedValues\n\n    cy.openPropertyPane(\"switchgroupwidget\");\n    cy.updateCodeInput(\".t--property-control-defaultselectedvalues\", `[\\n\"BLUE\"\\n]`); // Check if isDirty is reset to false\n\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\");\n    cy.wait(200); // Switch group takes time to reflect default value changes\n    // Interact with UI\n\n    cy.get(formWidgetsPage.labelSwitchGroup).first().click(); // Check if isDirty is set to true\n\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"true\"); // Change defaultSelectedValues\n\n    cy.openPropertyPane(\"switchgroupwidget\");\n    cy.updateCodeInput(\".t--property-control-defaultselectedvalues\", `[\\n\"GREEN\"\\n]`); // Check if isDirty is reset to false\n\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Switch/SwitchGroup2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1.Reset the Tabs widget With the default value.","suites":["Tabs widget resetting"],"updatePoint":{"line":11,"column":53,"index":344},"line":11,"code":"  it(\"1.Reset the Tabs widget With the default value.\", function () {\n    cy.get(LayoutPage.tabWidget).contains(\"Tab 3\").click({\n      force: true\n    }).should(\"be.visible\");\n    cy.get(widgetsPage.buttonWidget).contains(\"Submit\").click({\n      force: true\n    });\n    cy.get(LayoutPage.tabWidget).contains(\"Tab 1\").should(\"not.have.class\", \"is-selected\");\n    cy.get(LayoutPage.tabWidget).contains(\"Tab 2\").should(\"have.class\", \"is-selected\");\n    cy.get(widgetsPage.textWidget).contains(\"Tab 2\");\n    cy.openPropertyPane(\"tabswidget\");\n    cy.get(\".t--property-control-defaulttab .CodeMirror .CodeMirror-code\").first().should(\"have.text\", \"Tab 2\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Tab_reset_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2.Reset the Tabs widget Without the default value.","suites":["Tabs widget resetting"],"updatePoint":{"line":24,"column":56,"index":1005},"line":24,"code":"  it(\"2.Reset the Tabs widget Without the default value.\", function () {\n    cy.testJsontext(\"defaulttab\", \"\");\n    cy.get(LayoutPage.tabWidget).contains(\"Tab 3\").click({\n      force: true\n    }).should(\"be.visible\");\n    cy.get(widgetsPage.buttonWidget).contains(\"Submit\").click({\n      force: true\n    });\n    cy.get(LayoutPage.tabWidget).contains(\"Tab 1\").should(\"have.class\", \"is-selected\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Tab_reset_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Tab Widget Functionality Test with Modal on change of selected tab","suites":["Tab widget test duplicate tab name validation"],"updatePoint":{"line":7,"column":72,"index":256},"line":7,"code":"  it(\"Tab Widget Functionality Test with Modal on change of selected tab\", function () {\n    cy.openPropertyPane(\"tabswidget\"); // added duplicate tab names\n\n    cy.tabPopertyUpdate(\"tab2\", \"TestUpdated\");\n    cy.tabPopertyUpdate(\"tab4\", \"TestUpdated\");\n    cy.get(\".t--has-duplicate-label-3\").should(\"exist\");\n    cy.get(\".t--has-duplicate-label-4\").should(\"not.exist\"); // detele column and re-validate duplicate column\n\n    cy.deleteColumn(\"tab2\");\n    cy.get(\".t--has-duplicate-label-3\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Tab/Tab_Duplicate_TabName_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Tab Widget Functionality Test with Modal on change of selected tab","suites":["Tab widget test"],"updatePoint":{"line":11,"column":72,"index":375},"line":11,"code":"  it(\"Tab Widget Functionality Test with Modal on change of selected tab\", function () {\n    cy.openPropertyPane(\"tabswidget\");\n    cy.widgetText(\"tab\", Layoutpage.tabWidget, Layoutpage.tabInput);\n    cy.AddActionWithModal();\n    cy.get(\".t--widget-buttonwidget:contains('Confirm')\").click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Tab/Tab_new_scenario_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Publih the app and validate the widgets displayed under each tab","suites":["Tab widget test"],"updatePoint":{"line":19,"column":70,"index":697},"line":19,"code":"  it(\"Publih the app and validate the widgets displayed under each tab\", function () {\n    cy.PublishtheApp();\n    cy.get(publish.buttonWidget).should(\"be.visible\");\n    cy.get(publish.textWidget).should(\"be.visible\");\n    cy.get(publish.datePickerNew).should(\"be.visible\");\n    cy.wait(3000);\n    cy.get(publish.tab).contains(\"Tab 2\").click({\n      force: true\n    });\n    cy.get(publish.checkboxWidget).should(\"be.visible\");\n    cy.get(publish.radioWidget).should(\"be.visible\");\n    cy.get(publish.buttonWidget).contains(\"Confirm\").click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Tab/Tab_new_scenario_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Tab Widget Functionality Test","suites":["Tab widget test"],"updatePoint":{"line":15,"column":35,"index":480},"line":15,"code":"  it(\"Tab Widget Functionality Test\", function () {\n    cy.openPropertyPane(\"tabswidget\");\n    /**\n     * @param{Text} Random Text\n     * @param{TabWidget}Mouseover\n     * @param{TabPre Css} Assertion\n     */\n\n    cy.widgetText(\"tab\", Layoutpage.tabWidget, Layoutpage.tabInput);\n    /**\n     * @param{IndexValue} Provide input Index Value\n     * @param{Text} Provide Index Text Value\n     */\n\n    cy.tabVerify(0, \"Aditya\");\n    cy.tabVerify(1, \"test\"); //Default  tab selection and validation\n\n    cy.testJsontext(\"defaulttab\", \"test\");\n    cy.get(Layoutpage.tabWidget).contains(\"test\").click({\n      force: true\n    }).should(\"be.visible\");\n    cy.get(Layoutpage.tabButton).click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.tabVerify(1, \"Day\");\n    cy.get(Layoutpage.tabDelete).eq(1).click({\n      force: true\n    });\n    cy.get(Layoutpage.tabWidget).contains(\"Day\").should(\"not.exist\"); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(300);\n    /**\n     * @param{toggleButton Css} Assert to be checked\n     */\n\n    cy.togglebar(widgetsPage.Scrollbutton);\n    cy.get(Layoutpage.tabContainer).scrollIntoView({\n      easing: \"linear\"\n    }).should(\"be.visible\");\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Tab/Tab_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Tab Widget Functionality To Select Tabs","suites":["Tab widget test"],"updatePoint":{"line":57,"column":45,"index":1757},"line":57,"code":"  it(\"Tab Widget Functionality To Select Tabs\", function () {\n    cy.get(publish.tabWidget).contains(this.data.tabName).click({\n      force: true\n    }).should(\"have.class\", \"is-selected\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Tab/Tab_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Tab Widget Functionality To Unchecked Visible Widget","suites":["Tab widget test"],"updatePoint":{"line":63,"column":58,"index":2008},"line":63,"code":"  it(\"Tab Widget Functionality To Unchecked Visible Widget\", function () {\n    cy.openPropertyPane(\"tabswidget\");\n    cy.togglebarDisable(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.tabWidget).should(\"not.exist\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Tab/Tab_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Tab Widget Functionality To Check Visible Widget","suites":["Tab widget test"],"updatePoint":{"line":70,"column":54,"index":2298},"line":70,"code":"  it(\"Tab Widget Functionality To Check Visible Widget\", function () {\n    cy.openPropertyPane(\"tabswidget\");\n    cy.togglebar(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.tabWidget).should(\"be.visible\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Tab/Tab_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Tab Widget Functionality To Check tab invisiblity","suites":["Tab widget test"],"updatePoint":{"line":77,"column":55,"index":2583},"line":77,"code":"  it(\"Tab Widget Functionality To Check tab invisiblity\", function () {\n    cy.openPropertyPane(\"tabswidget\");\n    cy.get(Layoutpage.tabEdit).eq(1).click({\n      force: true\n    });\n    cy.get(Layoutpage.tabVisibility).first().click({\n      force: true\n    });\n    cy.get(Layoutpage.tabWidget).contains(\"Tab 1\").should(\"not.exist\");\n    cy.PublishtheApp();\n    cy.get(publish.tabWidget).contains(\"Tab 1\").should(\"not.exist\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Tab/Tab_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Tab Widget Functionality To Check tab visibility","suites":["Tab widget test"],"updatePoint":{"line":90,"column":54,"index":3056},"line":90,"code":"  it(\"Tab Widget Functionality To Check tab visibility\", function () {\n    cy.openPropertyPane(\"tabswidget\");\n    cy.get(Layoutpage.tabEdit).eq(1).click({\n      force: true\n    });\n    cy.get(Layoutpage.tabVisibility).first().click({\n      force: true\n    });\n    cy.get(Layoutpage.tabWidget).contains(\"Tab 1\").should(\"be.visible\");\n    cy.PublishtheApp();\n    cy.get(publish.tabWidget).contains(\"Tab 1\").should(\"be.visible\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Tab/Tab_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Tabs widget should have navigation arrows if tabs don't fit","suites":["Tab widget test"],"updatePoint":{"line":129,"column":65,"index":4304},"line":129,"code":"  it(\"Tabs widget should have navigation arrows if tabs don't fit\", function () {\n    const rightNavButtonSelector = Layoutpage.tabWidget + \" .scroll-nav-right-button\";\n    const leftNavButtonSelector = Layoutpage.tabWidget + \" .scroll-nav-left-button\";\n    cy.openPropertyPane(\"tabswidget\"); // Add a new tab\n\n    cy.get(Layoutpage.tabButton).click({\n      force: true\n    });\n    cy.get(Layoutpage.tabButton).click({\n      force: true\n    });\n    cy.tabVerify(3, \"Tab3-for-testing-scroll-navigation-controls\"); // Should show off right navigation arrow\n\n    cy.get(leftNavButtonSelector).should(\"exist\"); // Click on the right navigation arrow\n\n    cy.get(leftNavButtonSelector).click({\n      force: true\n    }); // Should show off left navigation arrow\n\n    cy.get(rightNavButtonSelector).should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Tab/Tab_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Tab Widget Functionality To Check Default Tab selected After Selected Tab Delete","suites":["Tab widget test"],"updatePoint":{"line":150,"column":86,"index":5140},"line":150,"code":"  it(\"Tab Widget Functionality To Check Default Tab selected After Selected Tab Delete\", function () {\n    cy.testJsontext(\"defaulttab\", \"Tab 2\");\n    cy.tabVerify(3, \"Tab3-for-testing-scroll-navigation-controls\");\n    cy.get(Layoutpage.tabWidget).contains(\"Tab3-for-testing-scroll-navigation-controls\").should(\"have.class\", \"is-selected\");\n    cy.get(Layoutpage.tabDelete).eq(3).click({\n      force: true\n    });\n    cy.get(Layoutpage.tabWidget).contains(\"Tab 2\").should(\"have.class\", \"is-selected\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Tab/Tab_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Tab Widget Functionality To Check First Tab Selected After Selected Tab(Default one) Delete","suites":["Tab widget test"],"updatePoint":{"line":159,"column":97,"index":5659},"line":159,"code":"  it(\"Tab Widget Functionality To Check First Tab Selected After Selected Tab(Default one) Delete\", function () {\n    cy.get(Layoutpage.tabDelete).eq(2).click({\n      force: true\n    });\n    cy.get(Layoutpage.tabWidget).contains(\"Aditya\").should(\"have.class\", \"is-selected\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Tab/Tab_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table widget with with modal popup","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":14,"column":40,"index":472},"line":14,"code":"  it(\"Table widget with with modal popup\", function () {\n    cy.openPropertyPane(\"tablewidget\"); //update Table name with _\n\n    cy.widgetText(\"Table_1\", widgetsPage.tableWidget, commonlocators.tableInner);\n    cy.createModal(\"Modal\", this.data.ModalName);\n    cy.isSelectRow(1);\n    cy.get(\".bp3-overlay-backdrop\").click({\n      force: true\n    });\n    cy.isSelectRow(2);\n    cy.get(\".bp3-overlay-backdrop\").click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_Button_Icon_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table widget with button colour change validation","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":28,"column":55,"index":936},"line":28,"code":"  it(\"Table widget with button colour change validation\", function () {\n    cy.openPropertyPane(\"tablewidget\"); // Open column details of \"id\".\n\n    cy.editColumn(\"id\");\n    cy.get(widgetsPage.tableBtn).should(\"not.exist\"); // Changing column data type to \"Button\"\n\n    cy.changeColumnType(\"Button\"); // Changing the computed value (data) to \"orderAmount\"\n\n    cy.updateComputedValue(testdata.currentRowOrderAmt);\n    cy.changeColumnType(\"Button\");\n    cy.get(widgetsPage.buttonColor).click({\n      force: true\n    }).clear().type(color);\n    cy.get(widgetsPage.tableBtn).should(\"have.css\", \"background-color\", color);\n    cy.readTabledataPublish(\"2\", \"2\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Tobias Funke\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_Button_Icon_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table widget icon type and colour validation","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":47,"column":50,"index":1704},"line":47,"code":"  it(\"Table widget icon type and colour validation\", function () {\n    cy.openPropertyPane(\"tablewidget\"); // Open column details of \"id\".\n\n    cy.get(commonlocators.editPropBackButton).click({\n      force: true\n    });\n    cy.editColumn(\"id\"); // Change Column type to icon Button\n\n    cy.changeColumnType(\"Icon Button\"); // Select Icon from Icon Control\n\n    cy.get(\".t--property-control-icon .bp3-icon-caret-down\").click({\n      force: true\n    });\n    cy.get(\".bp3-icon-add\").first().click({\n      force: true\n    });\n    cy.get(\".t--widget-tablewidget .tbody .bp3-icon-add\").should(\"be.visible\");\n    cy.get(\".bp3-overlay-backdrop\").click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_Button_Icon_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table widget validation of a field without js ","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":68,"column":52,"index":2384},"line":68,"code":"  it(\"Table widget validation of a field without js \", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.editColumn(\"email\");\n    cy.clearPropertyValue(0); //toggle js for visiblity\n\n    cy.get(\".t--property-control-visible .t--js-toggle\").click({\n      force: true\n    });\n    cy.EnableAllCodeEditors();\n    cy.clearPropertyValue(1);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_Button_Icon_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table widget column reorder and reload function","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":79,"column":53,"index":2737},"line":79,"code":"  it(\"Table widget column reorder and reload function\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.get(commonlocators.editPropBackButton).click({\n      force: true\n    });\n    cy.hideColumn(\"email\");\n    cy.hideColumn(\"userName\");\n    cy.hideColumn(\"productName\");\n    cy.hideColumn(\"orderAmount\");\n    cy.readTabledataPublish(\"2\", \"2\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Tobias Funke\");\n      cy.reload();\n      cy.wait(3000);\n      cy.readTabledataPublish(\"2\", \"2\").then(tabDataNew => {\n        expect(tabDataNew).to.be.equal(\"Tobias Funke\");\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_Button_Icon_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Test to validate text color and text background","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":11,"column":56,"index":385},"line":11,"code":"  it(\"1. Test to validate text color and text background\", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidget\"); // Click on text color input field\n\n    cy.selectColor(\"textcolor\"); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500);\n    cy.wait(\"@updateLayout\"); // Verify the text color is green\n\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"color\", \"rgb(126, 34, 206)\"); // Change the text color and enter purple in input field\n\n    cy.get(widgetsPage.textColor).scrollIntoView().clear({\n      force: true\n    }).type(\"purple\", {\n      force: true\n    });\n    cy.wait(\"@updateLayout\"); // Verify the text color is purple\n\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"color\", \"rgb(128, 0, 128)\"); // Click on cell background color\n\n    cy.selectColor(\"cellbackgroundcolor\"); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500); // select the green color\n\n    cy.wait(\"@updateLayout\");\n    cy.assertPageSave();\n    cy.PublishtheApp();\n    cy.wait(4000); // Verify the cell background color is green\n\n    cy.readTabledataValidateCSS(\"1\", \"1\", \"background-color\", \"rgb(126, 34, 206)\");\n    cy.get(publish.backToEditor).click();\n    cy.openPropertyPane(\"tablewidget\"); // Change the cell background color and enter purple in input field\n\n    cy.get(`${widgetsPage.cellBackground} input`).clear({\n      force: true\n    }).type(\"purple\", {\n      force: true\n    });\n    cy.wait(\"@updateLayout\");\n    cy.assertPageSave();\n    cy.PublishtheApp();\n    cy.wait(4000); // Verify the cell background color is purple\n\n    cy.readTabledataValidateCSS(\"1\", \"1\", \"background-color\", \"rgb(128, 0, 128)\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_Color_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table Widget Functionality with Hidden and Resized Columns","suites":["Table Widget Functionality with Hidden and Resized Columns"],"updatePoint":{"line":8,"column":64,"index":322},"line":8,"code":"  it(\"Table Widget Functionality with Hidden and Resized Columns\", function () {\n    cy.PublishtheApp(); // Verify column header width should be equal to table width\n\n    cy.get(\".t--widget-tablewidget\").invoke(\"outerWidth\").then(tableWidth => {\n      cy.get(\".t--widget-tablewidget .thead .tr\").invoke(\"outerWidth\").then(columnHeaderWidth => {\n        expect(columnHeaderWidth).to.be.at.least(tableWidth);\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_Column_Resize_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Create an API and Execute the API and bind with Table","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":12,"column":59,"index":449},"line":12,"code":"  it(\"Create an API and Execute the API and bind with Table\", function () {\n    // Create and execute an API and bind with table\n    cy.createAndFillApi(this.data.paginationUrl, this.data.paginationParam);\n    cy.RunAPI();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_Derived_Column_Data_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate Table with API data and then add a column","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":17,"column":56,"index":675},"line":17,"code":"  it(\"Validate Table with API data and then add a column\", function () {\n    // Open property pane\n    cy.SearchEntityandOpen(\"Table1\"); // Clear Table data and enter Apil data into table data\n\n    cy.testJsontext(\"tabledata\", \"{{Api1.data.users}}\"); // Check Widget properties\n\n    cy.CheckWidgetProperties(commonlocators.serverSidePaginationCheckbox); // Open Text1 in propert pane\n\n    cy.SearchEntityandOpen(\"Text1\"); // Change the Text value to selected row url\n\n    cy.testJsontext(\"text\", \"{{Table1.selectedRow.url}}\"); // Open Table1 propert pane\n\n    cy.SearchEntityandOpen(\"Table1\"); // Compare table 1st index data with itself\n\n    cy.readTabledata(\"0\", \"0\").then(tabData => {\n      const tableData = tabData;\n      localStorage.setItem(\"tableDataPage1\", tableData);\n    }); // Verify 1st index data\n\n    cy.ValidateTableData(\"1\"); // add new column\n\n    cy.addColumn(\"CustomColumn\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_Derived_Column_Data_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table widget toggle test for background color","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":40,"column":51,"index":1572},"line":40,"code":"  it(\"Table widget toggle test for background color\", function () {\n    // Open id property pane\n    cy.editColumn(\"id\"); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000); // Click on cell background JS button\n\n    cy.get(widgetsPage.toggleJsBcgColor).first().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000); // Change the cell background color to green\n\n    cy.toggleJsAndUpdate(\"tabledata\", \"Green\"); // Go back to table property pane\n\n    cy.get(\".t--property-pane-back-btn\").click({\n      force: true\n    });\n    cy.wait(\"@updateLayout\"); // verify the cell background color\n\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"background-color\", \"rgb(0, 128, 0)\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_Derived_Column_Data_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Edit column name and validate test for computed value based on column type selected","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":61,"column":89,"index":2370},"line":61,"code":"  it(\"Edit column name and validate test for computed value based on column type selected\", function () {\n    // opoen customColumn1 property pane\n    cy.editColumn(\"customColumn1\"); // Enter Apil 1st user email data into customColumn1\n\n    cy.readTabledataPublish(\"1\", \"9\").then(tabData => {\n      const tabValue = tabData;\n      cy.updateComputedValue(\"{{Api1.data.users[0].email}}\");\n      cy.readTabledataPublish(\"1\", \"9\").then(tabData => {\n        expect(tabData).not.to.be.equal(tabValue);\n        cy.log(\"computed value of plain text \" + tabData);\n      });\n    });\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_Derived_Column_Data_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Update table json data and check the column names updated","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":75,"column":63,"index":2951},"line":75,"code":"  it(\"Update table json data and check the column names updated\", function () {\n    // Open table propert pane\n    cy.SearchEntityandOpen(\"Table1\"); // Change the table data\n\n    cy.testJsontext(\"tabledata\", JSON.stringify(this.data.TableInputUpdate));\n    cy.wait(\"@updateLayout\"); // verify columns are visible or not in the propert pane\n\n    cy.tableColumnDataValidation(\"id\");\n    cy.tableColumnDataValidation(\"email\");\n    cy.tableColumnDataValidation(\"userName\");\n    cy.tableColumnDataValidation(\"productName\");\n    cy.tableColumnDataValidation(\"orderAmount\");\n    cy.tableColumnDataValidation(\"customColumn1\"); // Hide the columns in property pane\n\n    cy.hideColumn(\"email\");\n    cy.hideColumn(\"userName\");\n    cy.hideColumn(\"productName\");\n    cy.hideColumn(\"orderAmount\"); // verify customColumn is visible in the table\n\n    cy.get(\".draggable-header:contains('CustomColumn')\").should(\"be.visible\");\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_Derived_Column_Data_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Validate cell background of columns","suites":["Table Widget empty row color validation"],"updatePoint":{"line":9,"column":44,"index":300},"line":9,"code":"  it(\"1. Validate cell background of columns\", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidget\"); // give general color to all table row\n\n    cy.selectColor(\"cellbackgroundcolor\", -17);\n    cy.editColumn(\"id\"); // Click on cell background color\n\n    cy.selectColor(\"cellbackground\", -27);\n    cy.wait(\"@updateLayout\");\n    cy.get(commonlocators.editPropBackButton).click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.editColumn(\"email\");\n    cy.selectColor(\"cellbackground\", -33);\n    cy.wait(\"@updateLayout\");\n    cy.get(commonlocators.editPropBackButton).click({\n      force: true\n    }); // Verify the cell background color of first column\n\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"background-color\", \"rgb(99, 102, 241)\"); // Verify the cell background color of second column\n\n    cy.readTabledataValidateCSS(\"1\", \"1\", \"background-color\", \"rgb(30, 58, 138)\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_EmptyRow_Color_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Validate empty row background","suites":["Table Widget empty row color validation"],"updatePoint":{"line":33,"column":38,"index":1202},"line":33,"code":"  it(\"2. Validate empty row background\", function () {\n    // first cell of first row should be transparent\n    cy.get(\".t--widget-tablewidget .tbody div[data-cy='empty-row-0-cell-0']\").should(\"have.css\", \"background-color\", \"rgb(99, 102, 241)\"); // second cell of first row should be transparent\n\n    cy.get(\".t--widget-tablewidget .tbody div[data-cy='empty-row-0-cell-1']\").should(\"have.css\", \"background-color\", \"rgb(30, 58, 138)\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_EmptyRow_Color_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table Widget Functionality","suites":["Table Widget Filtered Table Data in autocomplete"],"updatePoint":{"line":13,"column":32,"index":450},"line":13,"code":"  it(\"Table Widget Functionality\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.wait(\"@updateLayout\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_FilteredTableData_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table Widget Functionality To Filter and search data","suites":["Table Widget Filtered Table Data in autocomplete"],"updatePoint":{"line":17,"column":58,"index":601},"line":17,"code":"  it(\"Table Widget Functionality To Filter and search data\", function () {\n    cy.get(publish.searchInput).first().type(\"query\");\n    cy.get(publish.filterBtn).click();\n    cy.get(publish.attributeDropdown).click();\n    cy.get(publish.attributeValue).contains(\"task\").click();\n    cy.get(publish.conditionDropdown).click();\n    cy.get(publish.attributeValue).contains(\"contains\").click();\n    cy.get(publish.inputValue).type(\"bind\");\n    cy.wait(500);\n    cy.get(widgetsPage.filterApplyBtn).click({\n      force: true\n    });\n    cy.wait(500);\n    cy.get(\".t--close-filter-btn\").click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_FilteredTableData_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table Widget Functionality to validate filtered table data","suites":["Table Widget Filtered Table Data in autocomplete"],"updatePoint":{"line":34,"column":64,"index":1225},"line":34,"code":"  it(\"Table Widget Functionality to validate filtered table data\", function () {\n    cy.SearchEntityandOpen(\"Text1\");\n    cy.testJsontext(\"text\", \"{{Table1.filteredTableData[0].task}}\");\n    cy.readTabledata(\"0\", \"1\").then(tabData => {\n      const tableData = tabData;\n      cy.get(commonlocators.labelTextStyle).should(\"have.text\", tableData);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_FilteredTableData_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table Widget Functionality to validate filtered table data with actual table data","suites":["Table Widget Filtered Table Data in autocomplete"],"updatePoint":{"line":42,"column":87,"index":1607},"line":42,"code":"  it(\"Table Widget Functionality to validate filtered table data with actual table data\", function () {\n    cy.readTabledata(\"0\", \"1\").then(tabData => {\n      const tableData = JSON.parse(dsl.dsl.children[0].tableData);\n      cy.get(commonlocators.labelTextStyle).should(\"have.text\", tableData[2].task);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_FilteredTableData_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Test to validate table pagination is disabled","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":16,"column":54,"index":583},"line":16,"code":"  it(\"1. Test to validate table pagination is disabled\", function () {\n    // Verify pagination is disabled\n    cy.get(\".t--table-widget-prev-page\").should(\"have.attr\", \"disabled\");\n    cy.get(\".t--table-widget-next-page\").should(\"have.attr\", \"disabled\");\n    cy.get(\".t--table-widget-page-input input\").should(\"have.attr\", \"disabled\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Test to validate text allignment","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":22,"column":41,"index":913},"line":22,"code":"  it(\"2. Test to validate text allignment\", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidget\"); // Change the text align to center\n\n    cy.get(widgetsPage.centerAlign).first().click({\n      force: true\n    }); // Verify the center text alignment\n\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"justify-content\", \"center\"); // Change the text align to right\n\n    cy.get(widgetsPage.rightAlign).first().click({\n      force: true\n    }); // Verify the right text alignment\n\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"justify-content\", \"flex-end\"); // Change the text align to left\n\n    cy.get(widgetsPage.leftAlign).first().click({\n      force: true\n    }); // verify the left text alignment\n\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"justify-content\", \"flex-start\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Test to validate column heading allignment","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":44,"column":51,"index":1719},"line":44,"code":"  it(\"3. Test to validate column heading allignment\", function () {\n    // cy.openPropertyPane(\"tablewidget\");\n    // Change the text align to center\n    cy.get(widgetsPage.centerAlign).first().click({\n      force: true\n    }); // Verify the column headings are center aligned\n\n    cy.get(\".draggable-header\").first().should(\"have.css\", \"text-align\", \"center\"); // Change the text align to right\n\n    cy.get(widgetsPage.rightAlign).first().click({\n      force: true\n    }); // Verify the column headings are right aligned\n\n    cy.get(\".draggable-header\").first().should(\"have.css\", \"text-align\", \"right\"); // Change the text align to left\n\n    cy.get(widgetsPage.leftAlign).first().click({\n      force: true\n    }); // Verify the column headings are left aligned\n\n    cy.get(\".draggable-header\").first().should(\"have.css\", \"text-align\", \"left\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Test to validate text format","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":65,"column":37,"index":2557},"line":65,"code":"  it(\"4. Test to validate text format\", function () {\n    // Select the bold font style\n    cy.get(widgetsPage.bold).click({\n      force: true\n    }); // Varify the font style is bold\n\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"font-weight\", \"700\"); // Change the font style to italic\n\n    cy.get(widgetsPage.italics).click({\n      force: true\n    }); // Verify the font style is italic\n\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"font-style\", \"italic\"); // Change the font style to underline\n\n    cy.editColumn(\"id\");\n    cy.get(widgetsPage.underline).click({\n      force: true\n    }); // Verify the font style is underline\n\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"text-decoration-line\", \"underline\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Test to validate vertical allignment","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":86,"column":45,"index":3277},"line":86,"code":"  it(\"5. Test to validate vertical allignment\", function () {\n    cy.openPropertyPane(\"tablewidget\"); // Select the top vertical alignment\n\n    cy.get(widgetsPage.verticalTop).click({\n      force: true\n    }); // verify vertical alignment is top\n\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"align-items\", \"flex-start\"); // Change the vertical alignment to center\n\n    cy.get(widgetsPage.verticalCenter).last().click({\n      force: true\n    }); // Verify the vertical alignment is centered\n\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"align-items\", \"center\"); // Change the vertical alignment to bottom\n\n    cy.get(widgetsPage.verticalBottom).last().click({\n      force: true\n    }); // Verify the vertical alignment is bottom\n\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"align-items\", \"flex-end\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Table widget toggle test for text alignment","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":107,"column":52,"index":4085},"line":107,"code":"  it(\"6. Table widget toggle test for text alignment\", function () {\n    // Click on text align JS\n    cy.get(widgetsPage.toggleTextAlign).first().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000); // Change the text align value to right for michael and left for others\n\n    cy.toggleJsAndUpdate(\"tabledata\", testdata.bindingGenAlign); // Close propert pane\n    // Verify the text michael id is right aligned\n\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"justify-content\", \"flex-end\"); // Verify the 2nd id is left aligned\n\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"justify-content\", \"flex-start\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Table widget change text size and validate","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":122,"column":51,"index":4750},"line":122,"code":"  it(\"7. Table widget change text size and validate\", function () {\n    // Verify font size is 14px\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"font-size\", \"14px\"); // Click on text size JS\n\n    cy.get(widgetsPage.toggleTextAlign).first().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000); // Open txe size dropdown options\n\n    cy.get(widgetsPage.textSize).last().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000); // Select Heading 1 text size\n\n    cy.selectTxtSize(\"L\"); // Verify the font size is 24px\n\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"font-size\", \"20px\"); // close propert pane\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000); // Verify the font size is 24px\n\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"font-size\", \"20px\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. Test to validate open new tab icon shows when URL type data validate link text ","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":147,"column":88,"index":5689},"line":147,"code":"  it(\"8. Test to validate open new tab icon shows when URL type data validate link text \", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidget\"); // go back to 1st\n\n    cy.get(commonlocators.editPropBackButton).click({\n      force: true\n    }); // Open email property pane\n\n    cy.editColumn(\"email\"); // Change column type to url\n\n    cy.changeColumnType(\"URL\"); //Check all the occurance\n\n    cy.get(\".link-text\").should(\"have.length\", \"3\");\n    /*\n    cy.get(\n      `.t--widget-tablewidget .tbody .td[data-rowindex=1][data-colindex=1] .hidden-icon`,\n    )\n      .should(\"be.hidden\")\n      .invoke(\"show\");\n    cy.get(\n      `.t--widget-tablewidget .tbody .td[data-rowindex=1][data-colindex=1] .hidden-icon`,\n    ).should(\"be.visible\");\n    */\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"9. Edit column name and test for table header changes","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":171,"column":59,"index":6437},"line":171,"code":"  it(\"9. Edit column name and test for table header changes\", function () {\n    cy.get(commonlocators.editPropBackButton).click({\n      force: true\n    }); // Open email property pane\n\n    cy.editColumn(\"email\"); // CHange the Column email name to Email Address\n\n    cy.editColName(\"Email Address\"); // verify changed email name is visible\n\n    cy.get(\".draggable-header:contains('Email Address')\").should(\"be.visible\");\n    cy.get(commonlocators.editPropBackButton).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"10. Edit Row height and test table for changes","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":185,"column":52,"index":6937},"line":185,"code":"  it(\"10. Edit Row height and test table for changes\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.get(widgetsPage.rowHeight).last().click({\n      force: true\n    });\n    cy.get(\".t--dropdown-option\").contains(\"Short\").click({\n      force: true\n    });\n    cy.wait(2000);\n    cy.PublishtheApp();\n    cy.readTabledataValidateCSS(\"0\", \"1\", \"height\", \"19px\", true);\n    cy.get(publish.backToEditor).click();\n    cy.wait(2000);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test multi select column shows when enableMultirowselection is true","suites":["Table Widget row multi select validation"],"updatePoint":{"line":14,"column":73,"index":435},"line":14,"code":"  it(\"Test multi select column shows when enableMultirowselection is true\", function () {\n    cy.get(widgetsPage.buttonWidget).first().click();\n    cy.wait(1000);\n    cy.get(\".t--table-multiselect\").first().click();\n    cy.get(widgetsPage.buttonWidget).last().click();\n    cy.get(\".tbody .tr\").first().should(\"have.class\", \"selected-row\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_MultiRowSelect_dataUpdation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test multi select column shows when enable Multirowselection is true","suites":["Table Widget row multi select validation"],"updatePoint":{"line":11,"column":74,"index":401},"line":11,"code":"  it(\"Test multi select column shows when enable Multirowselection is true\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.get(widgetsPage.toggleEnableMultirowselection).first().click({\n      force: true\n    });\n    cy.closePropertyPane(\"tablewidget\");\n    cy.get(\".t--table-multiselect-header\").first().should(\"be.visible\");\n    cy.get(\".t--table-multiselect\").first().should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_MultiRowSelect_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test click on header cell selects all row","suites":["Table Widget row multi select validation"],"updatePoint":{"line":20,"column":47,"index":787},"line":20,"code":"  it(\"Test click on header cell selects all row\", function () {\n    // click on header check cell\n    cy.get(\".t--table-multiselect-header\").first().click({\n      force: true\n    }); // check if rows selected\n\n    cy.get(\".tr\").should(\"have.class\", \"selected-row\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_MultiRowSelect_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test click on single row cell changes header select cell state","suites":["Table Widget row multi select validation"],"updatePoint":{"line":28,"column":68,"index":1080},"line":28,"code":"  it(\"Test click on single row cell changes header select cell state\", function () {\n    // un select all rows\n    cy.get(\".t--table-multiselect-header\").first().click({\n      force: true\n    }); // click on first row select box\n\n    cy.get(\".t--table-multiselect\").first().click({\n      force: true\n    }); // check if header cell is in half check state\n\n    cy.get(\".t--table-multiselect-header-half-check-svg\").first().should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_MultiRowSelect_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test action configured on onRowSelected get triggered whenever a table row is selected","suites":["Table Widget row multi select validation"],"updatePoint":{"line":40,"column":92,"index":1554},"line":40,"code":"  it(\"Test action configured on onRowSelected get triggered whenever a table row is selected\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.onTableAction(0, \"onrowselected\", \"Row Selected\"); // un select first row\n\n    cy.get(\".t--table-multiselect\").first().click({\n      force: true\n    });\n    cy.get(commonlocators.toastmsg).should(\"not.exist\"); // click on first row select box\n\n    cy.get(\".t--table-multiselect\").first().click({\n      force: true\n    });\n    cy.get(commonlocators.toastmsg).contains(\"Row Selected\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_MultiRowSelect_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"It should deselected default Selected Row when the header cell is clicked","suites":["Table Widget row multi select validation"],"updatePoint":{"line":54,"column":79,"index":2087},"line":54,"code":"  it(\"It should deselected default Selected Row when the header cell is clicked\", () => {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.testJsontext(\"defaultselectedrow\", 0); // click on header check cell\n\n    cy.get(\".t--table-multiselect-header\").first().click({\n      force: true\n    }); // check if rows selected\n\n    cy.get(\".tr\").should(\"not.have.class\", \"selected-row\"); // click on header check cell\n\n    cy.get(\".t--table-multiselect-header\").first().click({\n      force: true\n    }); // check if rows is not selected\n\n    cy.get(\".tr\").should(\"have.class\", \"selected-row\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_MultiRowSelect_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check number key in table data convert table binding and header properly","suites":["Validate Table Widget Table Data"],"updatePoint":{"line":8,"column":78,"index":311},"line":8,"code":"  it(\"Check number key in table data convert table binding and header properly\", function () {\n    cy.openPropertyPane(\"tablewidget\"); // numeric table data\n\n    const tableData = [{\n      \"1\": \"abc\",\n      \"2\": \"bcd\",\n      \"3\": \"cde\",\n      Dec: \"mon\",\n      demo: \"3\",\n      demo_1: \"1\",\n      \"test one\": \"1\",\n      \"test 3 4 9\": \"4\",\n      rowIndex: \"0\"\n    }, {\n      \"1\": \"asd\",\n      \"2\": \"dfg\",\n      \"3\": \"jkl\",\n      Dec: \"mon2\",\n      demo: \"2\",\n      demo_1: \"1\",\n      \"test one\": \"2\",\n      \"test 3 4 9\": \"3\",\n      rowIndex: \"1\"\n    }]; // add data manually\n\n    cy.testJsontext(\"tabledata\", JSON.stringify(tableData));\n    cy.contains('[role=\"columnheader\"]', \"_1\").should(\"exist\");\n    cy.contains('[role=\"columnheader\"]', \"_2\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_Number_column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create an API and Execute the API and bind with Table","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":9,"column":62,"index":330},"line":9,"code":"  it(\"1. Create an API and Execute the API and bind with Table\", function () {\n    cy.createAndFillApi(this.data.paginationUrl, this.data.paginationParam);\n    cy.RunAPI();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_Property_JsonUpdate_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Validate Table with API data and then add a column","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":13,"column":59,"index":506},"line":13,"code":"  it(\"2. Validate Table with API data and then add a column\", function () {\n    // Open property pane\n    cy.SearchEntityandOpen(\"Table1\"); // Change the table data to Apil data users\n\n    cy.testJsontext(\"tabledata\", \"{{Api1.data.users}}\"); // Check server sided pagination\n\n    cy.CheckWidgetProperties(commonlocators.serverSidePaginationCheckbox); // Open property pane of Text1\n\n    cy.SearchEntityandOpen(\"Text1\"); // Change the text value to selected url\n\n    cy.testJsontext(\"text\", \"{{Table1.selectedRow.url}}\"); // Open property pane\n\n    cy.SearchEntityandOpen(\"Table1\"); // Copmre the table 1st index with itself\n\n    cy.readTabledata(\"0\", \"0\").then(tabData => {\n      const tableData = tabData;\n      localStorage.setItem(\"tableDataPage1\", tableData);\n    }); // Validate the table 1st index\n\n    cy.ValidateTableData(\"1\"); // Add new column\n\n    cy.addColumn(\"CustomColumn\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_Property_JsonUpdate_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Update table json data and check the column names updated and validate empty value","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":36,"column":91,"index":1433},"line":36,"code":"  it(\"3. Update table json data and check the column names updated and validate empty value\", function () {\n    // Open property pane\n    cy.SearchEntityandOpen(\"Table1\"); // Change the table data\n\n    cy.testJsontext(\"tabledata\", JSON.stringify(this.data.TableInputWithNull));\n    cy.wait(\"@updateLayout\"); // Verify the columns are visible in property pane\n\n    cy.tableColumnDataValidation(\"id\");\n    cy.tableColumnDataValidation(\"email\");\n    cy.tableColumnDataValidation(\"userName\");\n    cy.tableColumnDataValidation(\"productName\");\n    cy.tableColumnDataValidation(\"orderAmount\");\n    cy.tableColumnDataValidation(\"customColumn1\"); // Hide the columns in the table from property pane\n\n    cy.hideColumn(\"id\");\n    cy.hideColumn(\"email\");\n    cy.hideColumn(\"userName\");\n    cy.hideColumn(\"productName\"); // Verify CustomColumn is visible\n\n    cy.get(\".draggable-header:contains('CustomColumn')\").should(\"be.visible\"); // close property pane\n\n    cy.closePropertyPane(); // Validate the empty values\n\n    cy.readTabledataPublish(\"0\", \"0\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_Property_JsonUpdate_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Check Selected Row(s) Resets When Table Data Changes","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":64,"column":61,"index":2550},"line":64,"code":"  it(\"4. Check Selected Row(s) Resets When Table Data Changes\", function () {\n    // Select 1st row\n    cy.isSelectRow(1);\n    cy.openPropertyPane(\"tablewidget\"); // Empty first row\n\n    cy.testJsontext(\"tabledata\", \"[]\");\n    cy.wait(\"@updateLayout\");\n    const newTableData = [...this.data.TableInput];\n    newTableData[0].userName = \"\"; // Change table data from empty to some\n\n    cy.testJsontext(\"tabledata\", JSON.stringify(newTableData));\n    cy.wait(\"@updateLayout\");\n    const selectedRowsSelector = `.t--widget-tablewidget .tbody .tr.selected-row`; // Verify selected row resets on table data changes\n\n    cy.get(selectedRowsSelector).should($p => {\n      // should found 0 rows\n      expect($p).to.have.length(0);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_Property_JsonUpdate_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Verify table column type changes effect on menuButton and iconButton","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":9,"column":74,"index":350},"line":9,"code":"  it(\"Verify table column type changes effect on menuButton and iconButton\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.addColumn(\"CustomColumn\");\n    cy.editColumn(\"customColumn1\");\n    cy.changeColumnType(\"Menu Button\");\n    cy.wait(400);\n    cy.get(commonlocators.selectedIcon).should(\"have.text\", \"(none)\");\n    cy.getTableDataSelector(\"1\", \"5\").then(selector => {\n      cy.get(selector + \" button span.bp3-icon\").should(\"not.exist\");\n    });\n    cy.changeColumnType(\"Icon Button\");\n    cy.wait(400);\n    cy.get(commonlocators.selectedIcon).should(\"have.text\", \"add\");\n    cy.getTableDataSelector(\"1\", \"5\").then(selector => {\n      cy.get(selector + \" button span.bp3-icon\").should(\"exist\");\n      cy.get(selector + \" button span.bp3-icon\").should(\"have.attr\", \"icon\").and(\"equal\", \"add\");\n    });\n    cy.changeColumnType(\"Menu Button\");\n    cy.wait(500);\n    cy.get(commonlocators.selectedIcon).should(\"have.text\", \"(none)\");\n    cy.getTableDataSelector(\"1\", \"5\").then(selector => {\n      cy.get(selector + \" button span.bp3-icon\").should(\"not.exist\");\n    });\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_PropertyPane_IconName_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Verify On Row Selected Action","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":17,"column":38,"index":574},"line":17,"code":"  it(\"1. Verify On Row Selected Action\", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidget\"); // Select show message in the \"on selected row\" dropdown\n\n    cy.onTableAction(0, \"onrowselected\", \"Row is selected\");\n    cy.PublishtheApp(); // Select 1st row\n\n    cy.isSelectRow(2);\n    cy.wait(2000); // Verify Row is selected by showing the message\n\n    cy.get(commonlocators.toastmsg).contains(\"Row is selected\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Check On Page Change Action","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":30,"column":36,"index":1060},"line":30,"code":"  it(\"2. Check On Page Change Action\", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidget\"); // Select show message in the \"on selected row\" dropdown\n\n    cy.onTableAction(1, \"onpagechange\", \"Page Changed\");\n    cy.PublishtheApp();\n    cy.wait(2000); // Change the page\n\n    cy.get(widgetsPage.nextPageButton).click({\n      force: true\n    }); // Verify the page is changed\n\n    cy.get(commonlocators.toastmsg).contains(\"Page Changed\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Verify On Search Text Change Action","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":45,"column":44,"index":1579},"line":45,"code":"  it(\"3. Verify On Search Text Change Action\", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidget\"); // Show Message on Search text change Action\n\n    cy.onTableAction(3, \"onsearchtextchanged\", \"Search Text Changed\");\n    cy.PublishtheApp(); // Change the Search text\n\n    cy.get(widgetsPage.searchField).type(\"Hello\");\n    cy.wait(2000); // Verify the search text is changed\n\n    cy.get(commonlocators.toastmsg).contains(\"Search Text Changed\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Check open section and column data in property pane","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":58,"column":60,"index":2115},"line":58,"code":"  it(\"4. Check open section and column data in property pane\", function () {\n    cy.openPropertyPane(\"tablewidget\"); // Validate the columns are visible in the property pane\n\n    cy.tableColumnDataValidation(\"id\");\n    cy.tableColumnDataValidation(\"email\");\n    cy.tableColumnDataValidation(\"userName\");\n    cy.tableColumnDataValidation(\"productName\");\n    cy.tableColumnDataValidation(\"orderAmount\"); // Updating the column name ; \"id\" > \"TestUpdated\"\n\n    cy.tableColumnPopertyUpdate(\"id\", \"TestUpdated\"); // Add new column in the table with name \"CustomColumn\"\n\n    cy.addColumn(\"CustomColumn\");\n    cy.tableColumnDataValidation(\"customColumn1\"); //To be updated later\n    // Hide all other columns\n\n    cy.hideColumn(\"email\");\n    cy.hideColumn(\"userName\");\n    cy.hideColumn(\"productName\");\n    cy.hideColumn(\"orderAmount\"); // Verifying the newly added column\n\n    cy.get(\".draggable-header:contains('CustomColumn')\").should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Column Detail - Edit column name and validate test for computed value based on column type selected","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":80,"column":108,"index":3115},"line":80,"code":"  it(\"5. Column Detail - Edit column name and validate test for computed value based on column type selected\", function () {\n    cy.wait(1000);\n    cy.makeColumnVisible(\"email\");\n    cy.makeColumnVisible(\"userName\");\n    cy.makeColumnVisible(\"productName\");\n    cy.makeColumnVisible(\"orderAmount\");\n    cy.openPropertyPane(\"tablewidget\"); // Open column detail to be edited by draggable id\n\n    cy.editColumn(\"id\"); // Change the column name\n\n    cy.editColName(\"updatedId\"); // Reading single cell value of the table and verify it's value.\n\n    cy.readTabledataPublish(\"1\", \"1\").then(tabData => {\n      const tabValue = tabData;\n      cy.log(tabData);\n      expect(tabData).to.not.equal(\"2736212\"); // Changing the Computed value from \"id\" to \"Email\"\n\n      cy.updateComputedValue(testdata.currentRowEmail); // Reading single cell value of the table and verify it's value.\n\n      cy.readTabledataPublish(\"1\", \"0\").then(tabData2 => {\n        cy.log(tabData2);\n        expect(tabData2).to.be.equal(tabValue);\n        cy.log(\"computed value of plain text \" + tabData2);\n      });\n    }); // Changing Column data type from \"Plain text\" to \"Number\"\n\n    cy.changeColumnType(\"Number\");\n    cy.readTabledataPublish(\"1\", \"4\").then(tabData => {\n      cy.log(tabData);\n      expect(tabData).to.not.equal(\"lindsay.ferguson@reqres.in\"); // Email to \"orderAmount\"\n\n      cy.updateComputedValue(testdata.currentRowOrderAmt);\n      cy.readTabledataPublish(\"1\", \"0\").then(tabData2 => {\n        cy.log(tabData2);\n        expect(tabData2).to.be.equal(tabData);\n        cy.log(\"computed value of number is \" + tabData2);\n      });\n    }); // Changing Column data type from \"Number\" to \"Date\"\n\n    cy.changeColumnType(\"Date\"); // orderAmout to \"Moment Date\"\n\n    cy.updateComputedValue(testdata.momentDate);\n    cy.readTabledataPublish(\"1\", \"1\").then(tabData => {\n      expect(tabData).to.not.equal(\"9.99\");\n      cy.log(\"computed value of Date is \" + tabData);\n    }); // Changing Column data type from \"URL\" to \"Video\"\n\n    /* const videoVal = 'https://youtu.be/Sc-m3ceZyfk';\n    cy.changeColumnType(\"Video\");\n    // \"Moement \"date\" to \"Video\"\n    cy.updateComputedValue(videoVal);\n    // cy.testJson  text(\"computedvalue\", videoVal, )\n    // Verifying the href of the Video added.\n    cy.readTableLinkPublish(\"1\", \"1\").then((hrefVal) => {\n      expect(hrefVal).to.be.equal(videoVal);\n    });*/\n    // Changing Column data type from \"Date\" to \"Image\"\n\n    const imageVal = \"https://images.pexels.com/photos/736230/pexels-photo-736230.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500\";\n    cy.changeColumnType(\"Image\"); // \"Moement \"date\" to \"Image\"\n\n    cy.updateComputedValue(imageVal); // Verifying the href of the image added.\n\n    cy.readTableLinkPublish(\"1\", \"0\").then(hrefVal => {\n      expect(hrefVal).to.be.contains(imageVal);\n    }); // change column data type to \"icon button\"\n\n    cy.changeColumnType(\"Icon Button\");\n    cy.wait(400);\n    cy.get(commonlocators.selectedIcon).should(\"have.text\", \"add\");\n    cy.getTableDataSelector(\"0\", \"0\").then(selector => {\n      cy.get(selector + \" button.bp3-button [data-icon=add]\").should(\"exist\");\n    }); // Changing Column data type from \"Date\" to \"URl\"\n\n    cy.readTabledataPublish(\"1\", \"1\").then(actualEmail => {\n      cy.changeColumnType(\"URL\"); // \"Image\" to \"url\"\n\n      cy.updateComputedValue(testdata.currentRowEmail);\n      cy.readTabledataPublish(\"1\", \"0\").then(tabData2 => {\n        expect(tabData2).to.equal(\"lindsay.ferguson@reqres.in\").to.eq(actualEmail);\n        cy.log(\"computed value of URL is \" + tabData2);\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Test to validate text allignment","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":164,"column":41,"index":6628},"line":164,"code":"  it(\"6. Test to validate text allignment\", function () {\n    // Verifying Center Alignment\n    cy.get(widgetsPage.centerAlign).first().click({\n      force: true\n    });\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"justify-content\", \"center\", true); // Verifying Right Alignment\n\n    cy.get(widgetsPage.rightAlign).first().click({\n      force: true\n    });\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"justify-content\", \"flex-end\", true); // Verifying Left Alignment\n\n    cy.get(widgetsPage.leftAlign).first().click({\n      force: true\n    });\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"justify-content\", \"flex-start\", true);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Test to validate text format","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":181,"column":37,"index":7252},"line":181,"code":"  it(\"7. Test to validate text format\", function () {\n    // Validate Bold text\n    cy.get(widgetsPage.bold).click({\n      force: true\n    });\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"font-weight\", \"700\"); // Validate Italic text\n\n    cy.get(widgetsPage.italics).click({\n      force: true\n    });\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"font-style\", \"italic\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. Test to validate vertical allignment","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":193,"column":45,"index":7632},"line":193,"code":"  it(\"8. Test to validate vertical allignment\", function () {\n    // Validate vertical alignemnt of Cell text to TOP\n    cy.get(widgetsPage.verticalTop).click({\n      force: true\n    });\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"align-items\", \"flex-start\", true); // Validate vertical alignemnt of Cell text to Center\n\n    cy.get(widgetsPage.verticalCenter).last().click({\n      force: true\n    });\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"align-items\", \"center\", true); // Validate vertical alignemnt of Cell text to Bottom\n\n    cy.get(widgetsPage.verticalBottom).last().click({\n      force: true\n    });\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"align-items\", \"flex-end\", true);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test to validate text color and text background","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":210,"column":53,"index":8331},"line":210,"code":"  it(\"Test to validate text color and text background\", function () {\n    cy.openPropertyPane(\"tablewidget\"); // Changing text color to rgb(126, 34, 206) and validate\n\n    cy.selectColor(\"textcolor\"); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(5000);\n    cy.wait(\"@updateLayout\");\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"color\", \"rgb(126, 34, 206)\"); // Changing text color to PURPLE and validate using JS\n\n    cy.get(widgetsPage.toggleJsColor).click({\n      force: true\n    });\n    cy.wait(500);\n    cy.testCodeMirrorLast(\"purple\");\n    cy.wait(\"@updateLayout\");\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"color\", \"rgb(128, 0, 128)\"); // Changing Cell backgroud color to rgb(126, 34, 206) and validate\n\n    cy.selectColor(\"cellbackground\");\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"background\", \"rgb(126, 34, 206) none repeat scroll 0% 0% / auto padding-box border-box\", true); // Changing Cell backgroud color to PURPLE and validate using JS\n\n    cy.get(widgetsPage.toggleJsBcgColor).click();\n    cy.updateCodeInput(\".t--property-control-cellbackground\", \"purple\");\n    cy.wait(\"@updateLayout\");\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"background\", \"rgb(128, 0, 128) none repeat scroll 0% 0% / auto padding-box border-box\", true); // close property pane\n\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"12. Verify default search text","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":237,"column":36,"index":9642},"line":237,"code":"  it(\"12. Verify default search text\", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidget\"); // Chage deat search text value to \"data\"\n\n    cy.testJsontext(\"defaultsearchtext\", \"data\");\n    cy.PublishtheApp(); // Verify the deaullt search text\n\n    cy.get(widgetsPage.searchField).should(\"have.value\", \"data\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"13. Verify default selected row","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":247,"column":37,"index":10028},"line":247,"code":"  it(\"13. Verify default selected row\", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidget\");\n    cy.testJsontext(\"defaultsearchtext\", \"\"); // Change default selected row value to 1\n\n    cy.get(widgetsPage.defaultSelectedRowField).type(\"1\");\n    cy.wait(2000);\n    cy.PublishtheApp(); // Verify the default selected row\n\n    cy.get(widgetsPage.selectedRow).should(\"have.css\", \"background-color\", \"rgb(227, 223, 251)\");\n    cy.get(publish.backToEditor).click();\n  }); // it(\"14. Verify table column type button with button variant\", function() {","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table Widget Functionality","suites":["Table Widget Functionality"],"updatePoint":{"line":14,"column":32,"index":477},"line":14,"code":"  it(\"Table Widget Functionality\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    /**\n     * @param{Text} Random Text\n     * @param{ChartWidget}Mouseover\n     * @param{ChartPre Css} Assertion\n     */\n\n    cy.widgetText(\"Table1\", widgetsPage.tableWidget, commonlocators.tableInner);\n    cy.testJsontext(\"tabledata\", JSON.stringify(this.data.TableInput));\n    cy.wait(\"@updateLayout\"); //cy.get(widgetsPage.ColumnAction).click({ force: true });\n    // cy.get(widgetsPage.tableOnRowSelected)\n    //   .get(commonlocators.dropdownSelectButton)\n    //   .first()\n    //   .click({ force: true })\n    //   .get(commonlocators.dropdownmenu)\n    //   .children()\n    //   .contains(\"Navigate to\")\n    //   .click();\n    // cy.wait(\"@updateLayout\");\n    // cy.get(widgetsPage.tableOnRowSelected)\n    //   .get(commonlocators.dropdownSelectButton)\n    //   .first()\n    //   .find(\"> .bp3-button-text\")\n    //   .should(\"have.text\", \"{{navigateTo()}}\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table Widget Functionality To Verify The Data","suites":["Table Widget Functionality"],"updatePoint":{"line":40,"column":51,"index":1457},"line":40,"code":"  it(\"Table Widget Functionality To Verify The Data\", function () {\n    cy.readTabledataPublish(\"1\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Lindsay Ferguson\");\n      cy.log(\"the value is\" + tabValue);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table Widget Functionality To Show a Base64 Image","suites":["Table Widget Functionality"],"updatePoint":{"line":47,"column":55,"index":1728},"line":47,"code":"  it(\"Table Widget Functionality To Show a Base64 Image\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.editColumn(\"image\");\n    cy.changeColumnType(\"Image\");\n    cy.isSelectRow(1);\n    const index = 1;\n    const imageVal = this.data.TableInput[index].image;\n    cy.readTableLinkPublish(index, \"1\").then(hrefVal => {\n      expect(hrefVal).to.contain(imageVal);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table Widget Functionality To Check if Table is Sortable","suites":["Table Widget Functionality"],"updatePoint":{"line":58,"column":62,"index":2125},"line":58,"code":"  it(\"Table Widget Functionality To Check if Table is Sortable\", function () {\n    cy.get(commonlocators.editPropBackButton).click();\n    cy.openPropertyPane(\"tablewidget\"); // Confirm if isSortable is true\n\n    cy.get(commonlocators.isSortable).should(\"be.checked\"); // Publish App\n\n    cy.PublishtheApp(); // Confirm Current order\n\n    cy.readTabledataPublish(\"1\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Lindsay Ferguson\");\n    });\n    cy.readTabledataPublish(\"0\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Michael Lawson\");\n    }); // Sort Username Column\n\n    cy.contains('[role=\"columnheader\"]', \"userName\").first().click({\n      force: true\n    });\n    cy.wait(1000); // Confirm order after sort\n\n    cy.readTabledataPublish(\"1\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Ryan Holmes\");\n    });\n    cy.readTabledataPublish(\"0\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Tobias Funke\");\n    }); // Back to edit page\n\n    cy.get(publish.backToEditor).click({\n      force: true\n    });\n    cy.openPropertyPane(\"tablewidget\"); // Disable isSortable\n    // Confirm if isSortable is false\n\n    cy.togglebarDisable(commonlocators.isSortable); // Publish App\n\n    cy.PublishtheApp(); // Confirm Current order\n\n    cy.readTabledataPublish(\"1\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Lindsay Ferguson\");\n    });\n    cy.readTabledataPublish(\"0\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Michael Lawson\");\n    }); // Confirm Sort is disable on Username Column\n\n    cy.contains('[role=\"columnheader\"]', \"userName\").first().click({\n      force: true\n    });\n    cy.wait(1000); // Confirm order after sort\n\n    cy.readTabledataPublish(\"1\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).not.to.be.equal(\"Ryan Holmes\");\n    });\n    cy.readTabledataPublish(\"0\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).not.to.be.equal(\"Tobias Funke\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table Widget Data validation with Switch ON","suites":["Table Widget and Switch binding Functionality"],"updatePoint":{"line":16,"column":49,"index":588},"line":16,"code":"  it(\"Table Widget Data validation with Switch ON\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.readTabledataPublish(\"1\", \"1\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"30\");\n      cy.log(\"the value is\" + tabValue);\n    });\n    cy.get(\".t--switch-widget-active .bp3-control-indicator\").click({\n      force: true\n    });\n    cy.wait(5000);\n    cy.readTabledataPublish(\"1\", \"1\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"9\");\n      cy.log(\"the value is\" + tabValue);\n    });\n    cy.get(\".t--switch-widget-inactive .bp3-control-indicator\").click({\n      force: true\n    });\n    cy.wait(5000);\n    cy.readTabledataPublish(\"1\", \"1\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"30\");\n      cy.log(\"the value is\" + tabValue);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_Switch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Selected row and binding with Text widget","suites":["Table Widget and Switch binding Functionality"],"updatePoint":{"line":42,"column":47,"index":1466},"line":42,"code":"  it(\"Selected row and binding with Text widget\", function () {\n    cy.wait(5000);\n    cy.get(\".t--table-multiselect\").eq(1).click({\n      force: true\n    });\n    cy.get(\".t--draggable-textwidget .bp3-ui-text span\").should(\"contain.text\", \"30\");\n    cy.get(\".t--table-multiselect\").eq(0).click({\n      force: true\n    });\n    cy.get(\".t--draggable-textwidget .bp3-ui-text span\").should(\"contain.text\", \"29\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_Switch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Table Widget Functionality To Check with changing schema of tabledata","suites":["Table Widget"],"updatePoint":{"line":10,"column":78,"index":397},"line":10,"code":"  it(\"1. Table Widget Functionality To Check with changing schema of tabledata\", () => {\n    let jsContext = `{{Switch1.isSwitchedOn?[{name: \"joe\"}]:[{employee_name: \"john\"}];}}`;\n    cy.NavigateToHome();\n    cy.get(homePage.createNew).first().click({\n      force: true\n    });\n    cy.wait(\"@createNewApplication\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.addDsl(dsl);\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"switchwidget\", {\n      x: 200,\n      y: 500\n    });\n    cy.wait(1000);\n    cy.wait(\"@updateLayout\");\n    cy.openPropertyPane(\"tablewidget\");\n    cy.get(\".t--property-control-tabledata\").then($el => {\n      cy.updateCodeInput($el, jsContext);\n    });\n    cy.PublishtheApp();\n    cy.wait(30000);\n    cy.getTableDataSelector(\"0\", \"0\").then(element => {\n      cy.get(element).should(\"be.visible\");\n    });\n    cy.readTabledataPublish(\"0\", \"0\").then(value => {\n      expect(value).to.be.equal(\"joe\");\n    });\n    cy.get(\".t--switch-widget-active\").first().click();\n    cy.get(\".t--widget-tablewidget\").scrollIntoView();\n    cy.wait(1000);\n    cy.getTableDataSelector(\"0\", \"0\").then(element => {\n      cy.get(element).should(\"be.visible\");\n    });\n    cy.readTabledataPublish(\"0\", \"0\").then(value => {\n      expect(value).to.be.equal(\"john\");\n    });\n    cy.get(\".t--switch-widget-inactive\").first().click();\n    cy.wait(1000);\n    cy.get(\".t--widget-tablewidget\").scrollIntoView();\n    cy.getTableDataSelector(\"0\", \"0\").then(element => {\n      cy.get(element).should(\"be.visible\");\n    });\n    cy.readTabledataPublish(\"0\", \"0\").then(value => {\n      expect(value).to.be.equal(\"joe\");\n    });\n    cy.get(publish.backToEditor).click().wait(1000);\n    cy.wait(30000);\n    cy.CheckAndUnfoldEntityItem(\"WIDGETS\");\n    cy.actionContextMenuByEntityName(\"Switch1\");\n    cy.actionContextMenuByEntityName(\"Table1\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_tabledata_schema_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Table widget with Add button test and validation","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":13,"column":57,"index":457},"line":13,"code":"  it(\"1. Table widget with Add button test and validation\", function () {\n    cy.openPropertyPane(\"tablewidget\"); // Open column details of \"id\".\n\n    cy.editColumn(\"id\");\n    cy.get(widgetsPage.tableBtn).should(\"not.exist\"); // Changing column data type to \"Button\"\n\n    cy.changeColumnType(\"Button\"); // Changing the computed value (data) to \"orderAmount\"\n\n    cy.updateComputedValue(testdata.currentRowOrderAmt); // Selecting button action to show message\n\n    cy.get(widgetsPage.actionSelect).click();\n    cy.get(commonlocators.chooseAction).children().contains(\"Show message\").click();\n    cy.addSuccessMessage(\"Successful \".concat(testdata.currentRowEmail)); // Close Property pane\n\n    cy.get(commonlocators.editPropBackButton).click({\n      force: true\n    }); // Validating the button action by clicking\n\n    cy.get(widgetsPage.tableBtn).last().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(3000); // Validating the toast message\n\n    cy.get(widgetsPage.toastAction).should(\"be.visible\");\n    cy.get(widgetsPage.toastActionText).last().invoke(\"text\").then(text => {\n      expect(text).to.equal(\"Successful tobias.funke@reqres.in\");\n    }); // Open column details of \"id\".\n\n    cy.editColumn(\"id\");\n    cy.get(widgetsPage.toggleOnClick).click({\n      force: true\n    });\n    cy.get(\".t--property-control-onclick\").then($el => {\n      cy.updateCodeInput($el, \"{{showAlert('Successful' + currentRow.email).then(() => showAlert('second alert')) }}\");\n    });\n    cy.get(commonlocators.editPropBackButton).click({\n      force: true\n    }); // Validating the button action by clicking\n\n    cy.get(widgetsPage.tableBtn).last().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(3000);\n    cy.get(widgetsPage.toastActionText).last().invoke(\"text\").then(text => {\n      expect(text).to.equal(\"second alert\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_Widget_Add_button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Table Button color validation","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":62,"column":38,"index":2376},"line":62,"code":"  it(\"2. Table Button color validation\", function () {\n    cy.openPropertyPane(\"tablewidget\"); // Open column details of \"id\".\n\n    cy.editColumn(\"id\"); // Changing column data type to \"Button\"\n\n    /* cy.get(commonlocators.changeColType)\n      .last()\n      .click();\n    cy.get(\".t--dropdown-option\")\n      .children()\n      .contains(\"Plain Text\")\n      .click();\n    cy.changeColumnType(\"Button\"); */\n\n    const color1 = \"rgb(255, 0, 0)\";\n    cy.get(widgetsPage.buttonColor).click({\n      force: true\n    }).clear().type(color1, {\n      force: true\n    });\n    cy.get(widgetsPage.tableBtn).should(\"have.css\", \"background-color\", color1); // Changing the color again to reproduce issue #9526\n\n    const color2 = \"rgb(255, 255, 0)\";\n    cy.get(widgetsPage.buttonColor).click({\n      force: true\n    }).clear() // following wait is required to reproduce #9526\n    .wait(600).type(color2);\n    cy.get(widgetsPage.tableBtn).should(\"have.css\", \"background-color\", color2);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_Widget_Add_button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Table widget triggeredRow property should be accessible","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":91,"column":64,"index":3379},"line":91,"code":"  it(\"3. Table widget triggeredRow property should be accessible\", function () {\n    cy.get(commonlocators.TextInside).should(\"have.text\", \"Tobias Funke\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_Widget_Add_button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Table widget triggeredRow property should be same even after sorting the table","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":94,"column":87,"index":3564},"line":94,"code":"  it(\"4. Table widget triggeredRow property should be same even after sorting the table\", function () {\n    //sort table date on second column\n    cy.get(\".draggable-header \").first().click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.get(commonlocators.TextInside).should(\"have.text\", \"Tobias Funke\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_Widget_Add_button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Table widget add new icon button column","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":102,"column":48,"index":3843},"line":102,"code":"  it(\"5. Table widget add new icon button column\", function () {\n    cy.get(\".t--property-pane-back-btn\").click({\n      force: true\n    }); // hide id column\n\n    cy.makeColumnVisible(\"id\");\n    cy.wait(1000); // click on Add new Column.\n    //cy.get(\".t--property-pane-back-btn\").click({ force: true });\n\n    cy.get(\".t--add-column-btn\").click(); //Open New Custom Column\n\n    cy.editColumn(\"customColumn1\"); // Change Column type to icon Button\n\n    cy.changeColumnType(\"Icon Button\"); // Select Icon from Icon Control\n\n    cy.get(\".t--property-control-icon .bp3-icon-caret-down\").click({\n      force: true\n    });\n    cy.get(\".bp3-icon-add\").first().click({\n      force: true\n    });\n    cy.get(\".t--widget-tablewidget .tbody .bp3-icon-add\").should(\"exist\"); // disabled icon btn\n\n    cy.CheckWidgetProperties(commonlocators.disableCheckbox);\n    cy.getTableDataSelector(\"0\", \"4\").then(selector => {\n      cy.get(selector + \" button.bp3-disabled\").should(\"exist\");\n    });\n    cy.UncheckWidgetProperties(commonlocators.disableCheckbox); //Delete Column\n\n    cy.get(\".t--property-pane-back-btn\").click({\n      force: true\n    });\n    cy.deleteColumn(\"customColumn1\"); // Close Property pane\n\n    /*\n    cy.get(commonlocators.editPropCrossButton).click({\n      force: true,\n    });\n    */\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_Widget_Add_button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Table widget add new menu button column","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":142,"column":48,"index":5139},"line":142,"code":"  it(\"6. Table widget add new menu button column\", function () {\n    cy.openPropertyPane(\"tablewidget\"); // click on Add new Column.\n\n    cy.get(\".t--add-column-btn\").click(); //Open New Custom Column\n\n    cy.editColumn(\"customColumn1\"); // Change Column type to icon Button\n\n    cy.changeColumnType(\"Menu Button\"); //Changing the text on the Menu Button\n\n    cy.testJsontext(\"label\", \"Menu button\"); // Select Icon from Icon Control\n\n    cy.get(\".t--property-control-icon .bp3-icon-caret-down\").click({\n      force: true\n    });\n    cy.get(\".bp3-icon-airplane\").first().click({\n      force: true\n    }); // validate icon\n\n    cy.get(\".t--widget-tablewidget .tbody .bp3-icon-airplane\").should(\"exist\");\n    cy.get(\".editable-text-container\").eq(1).click(); // validate label\n\n    cy.contains(\"Menu button\").should(\"exist\");\n    const color1 = \"rgb(255, 255, 0)\";\n    cy.get(widgetsPage.menuColor).clear().click().type(color1);\n    cy.get(widgetsPage.tableBtn).should(\"have.css\", \"background-color\", color1); // Changing the color again to reproduce issue #9526\n\n    const color2 = \"rgb(255, 0, 0)\";\n    cy.get(widgetsPage.menuColor).clear().click() // following wait is required to reproduce #9526\n    .wait(500).type(color2);\n    cy.get(widgetsPage.tableBtn).should(\"have.css\", \"background-color\", color2); // Add a Menu item 1\n\n    cy.get(\".t--add-menu-item-btn\").click({\n      force: true\n    }); // Edit a Menu item\n\n    cy.get(\".t--property-pane-section-menuitems .t--edit-column-btn\").first().click({\n      force: true\n    }); // update menu item background color\n\n    cy.get(widgetsPage.backgroundcolorPickerNew).type(\"#03b365\", {\n      force: true\n    }).wait(500); //  Add action to the menu Item\n\n    cy.get(widgetsPage.actionSelect).click();\n    cy.get(commonlocators.chooseAction).children().contains(\"Show message\").click();\n    cy.addSuccessMessage(\"Successful \".concat(testdata.currentRowEmail)); // Go back to table property pane\n\n    cy.get(\".t--property-pane-back-btn\").click({\n      force: true\n    }); // Add a Menu item 2\n\n    cy.get(\".t--add-menu-item-btn\").click({\n      force: true\n    }); // Edit a Menu item\n\n    cy.get(\".t--property-pane-section-menuitems .t--edit-column-btn\").last().click({\n      force: true\n    }); // update menu item background color\n\n    cy.get(widgetsPage.backgroundcolorPickerNew).clear().type(\"#FFC13D\", {\n      force: true\n    }).wait(500); // Go back to table property pane\n\n    cy.get(\".t--property-pane-back-btn\").click({\n      force: true\n    }); // Add a Menu item 3\n\n    cy.get(\".t--add-menu-item-btn\").click({\n      force: true\n    }); // Edit a Menu item\n\n    cy.get(\".t--property-pane-section-menuitems .t--edit-column-btn\").last().click({\n      force: true\n    }); // update menu item background color\n\n    cy.get(widgetsPage.backgroundcolorPickerNew).clear().type(\"#3366FF\", {\n      force: true\n    }).wait(500); // Go back to table property pane\n\n    cy.get(\".t--property-pane-back-btn\").click({\n      force: true\n    }); // Close Property pane\n\n    cy.openPropertyPane(\"tablewidget\"); // Click on the Menu Button\n\n    cy.contains(\"Menu button\").click({\n      force: true\n    });\n    cy.wait(1000); //Commenting below verification until fixed to overide flakiness\n    // // verify menu items background color\n    // cy.get(\".bp3-menu-item\")\n    //   .eq(0)\n    //   .should(\"have.css\", \"background-color\", \"rgb(3, 179, 101)\");\n    // cy.get(\".bp3-menu-item\")\n    //   .eq(1)\n    //   .should(\"have.css\", \"background-color\", \"rgb(51, 102, 255)\"); //\"rgb(255, 193, 61)\");\n    // cy.get(\".bp3-menu-item\")\n    //   .eq(2)\n    //   .should(\"have.css\", \"background-color\", \"rgb(255, 255, 255)\");//\"rgb(51, 102, 255)\");\n    //cy.closePropertyPane();\n\n    cy.closePropertyPane(); // disable menu item 3\n    //cy.openPropertyPane(\"tablewidget\");\n    //cy.editColumn(\"customColumn1\");\n    // Edit a Menu item\n\n    cy.get(\".t--property-pane-section-menuitems .t--edit-column-btn\").last().click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.get(\".t--property-control-disabled label.bp3-switch.unchecked\").click({\n      force: true\n    }); //cy.closePropertyPane();\n    // Click on the Menu Button\n\n    cy.clickButton(\"Menu button\").wait(1000); // check Menu Item 3 is disable\n\n    cy.get(\".bp3-menu-item\").eq(2).should(\"have.css\", \"background-color\", \"rgb(250, 250, 250)\");\n    cy.get(\".bp3-menu-item\").eq(2).should(\"have.class\", \"bp3-disabled\"); // Click on the Menu Item\n\n    cy.get(\".bp3-menu-item\").eq(0).click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(3000); // Validating the toast message\n\n    cy.get(widgetsPage.toastAction).should(\"be.visible\");\n    cy.get(widgetsPage.toastActionText).last().invoke(\"text\").then(text => {\n      const someText = text;\n      expect(someText).to.equal(\"Successful tobias.funke@reqres.in\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_Widget_Add_button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Table widget test on button icon click, row should not get deselected","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":274,"column":78,"index":10034},"line":274,"code":"  it(\"7. Table widget test on button icon click, row should not get deselected\", () => {\n    cy.get(widgetsPage.tableIconBtn).last().click({\n      force: true\n    });\n    cy.get(commonlocators.TextInside).should(\"have.text\", \"Tobias Funke\"); //click icon button again\n\n    cy.get(widgetsPage.tableIconBtn).last().click({\n      force: true\n    });\n    cy.get(commonlocators.TextInside).should(\"have.text\", \"Tobias Funke\");\n    cy.get(\".t--property-pane-back-btn\").click({\n      force: true\n    });\n    cy.wait(500);\n    cy.get(\".t--property-pane-back-btn\").click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_Widget_Add_button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. Table widget test on button when transparent","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":292,"column":53,"index":10605},"line":292,"code":"  it(\"8. Table widget test on button when transparent\", () => {\n    cy.openPropertyPane(\"tablewidget\"); // Open column details of \"id\".\n\n    cy.editColumn(\"id\"); // Changing column \"Button\" color to transparent\n\n    cy.get(widgetsPage.buttonColor).click({\n      force: true\n    });\n    cy.wait(2000);\n    cy.get(widgetsPage.transparent).click({\n      force: true\n    });\n    cy.get(\".td[data-colindex=5][data-rowindex=0] .bp3-button\").should(\"have.css\", \"background-color\", \"rgba(0, 0, 0, 0)\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_Widget_Add_button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Copy paste table widget and valdiate application status","suites":["Test Suite to validate copy/paste table Widget"],"updatePoint":{"line":13,"column":61,"index":466},"line":13,"code":"  it(\"Copy paste table widget and valdiate application status\", function () {\n    const modifierKey = Cypress.platform === \"darwin\" ? \"meta\" : \"ctrl\";\n    cy.openPropertyPane(\"tablewidget\");\n    cy.widgetText(\"Table1\", widgetsPage.tableWidget, commonlocators.tableInner);\n    cy.get(\"body\").type(`{${modifierKey}}c`); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500);\n    cy.get(commonlocators.toastBody).first().contains(\"Copied\");\n    cy.get(\"body\").click();\n    cy.get(\"body\").type(`{${modifierKey}}v`, {\n      force: true\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(commonlocators.toastAction).should(\"be.visible\"); //Check after copying new table widget should not have any warnings\n\n    cy.get('.t--widget-propertypane-toggle [name=\"warning\"]').should(\"not.exist\");\n    cy.GlobalSearchEntity(\"Table1Copy\");\n    cy.get(\".widgets\").first().click();\n    cy.get(\".t--entity-name\").contains(\"Table1Copy\").trigger(\"mouseover\");\n    cy.hoverAndClickParticularIndex(1);\n    cy.selectAction(\"Show Bindings\");\n    cy.get(apiwidget.propertyList).then(function ($lis) {\n      expect($lis).to.have.length(13);\n      expect($lis.eq(0)).to.contain(\"{{Table1Copy.selectedRow}}\");\n      expect($lis.eq(1)).to.contain(\"{{Table1Copy.selectedRows}}\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_Widget_Copy_Paste_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Verify default table row Data","suites":["Table Widget property pane deafult feature validation"],"updatePoint":{"line":9,"column":35,"index":299},"line":9,"code":"  it(\"Verify default table row Data\", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidget\");\n    cy.wait(2000);\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.wait(2000);\n    cy.readTabledataFromSpecificIndex(\"2\", \"0\", 1).then(tabData => {\n      const tabValue = tabData;\n      cy.log(\"the table is\" + tabValue);\n      cy.get(\".bp3-ui-text span\").eq(0).should(\"have.text\", tabData);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_Widget_Default_Row_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test to add column","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":17,"column":24,"index":563},"line":17,"code":"  it(\"Test to add column\", function () {\n    cy.openPropertyPane(\"tablewidget\"); // Adding new column\n\n    cy.addColumn(\"CustomColumn\");\n    cy.tableColumnDataValidation(\"customColumn1\"); //To be updated later\n    // Hiding all other columns in the table from property pane\n\n    cy.hideColumn(\"email\");\n    cy.hideColumn(\"userName\");\n    cy.hideColumn(\"productName\");\n    cy.hideColumn(\"orderAmount\"); // Validating the newly added column\n\n    cy.get(\".draggable-header:contains('CustomColumn')\").should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_Widget_Derived_Column_Computed_value_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Edit column name and validate test for computed value","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":31,"column":59,"index":1123},"line":31,"code":"  it(\"Edit column name and validate test for computed value\", function () {\n    // Open column detail by draggable id of the column\n    cy.editColumn(\"customColumn1\"); // Validating single cell value\n\n    cy.readTabledataPublish(\"1\", \"2\").then(() => {\n      // Chaging the computed value to \"Emails\"\n      cy.updateComputedValue(testdata.currentRowWithIdOutside); // Validating single cell value\n\n      cy.readTabledataPublish(\"1\", \"1\").then(tabData => {\n        expect(tabData).to.be.equal(\"#lindsay.ferguson@reqres.in\");\n        cy.log(\"computed value of plain text \" + tabData);\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_Widget_Derived_Column_Computed_value_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table widget new menu button column should not deselect row","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":7,"column":65,"index":251},"line":7,"code":"  it(\"Table widget new menu button column should not deselect row\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.get(\".t--widget-textwidget\").should(\"have.text\", \"0\");\n    cy.contains(\"Open Menu\").click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.get(\".t--widget-textwidget\").should(\"have.text\", \"0\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/Table_Widget_Selected_row_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check if the selectedRowIndices does not contain 2d array","suites":["Table widget edge case scenario testing"],"updatePoint":{"line":9,"column":63,"index":320},"line":9,"code":"  it(\"Check if the selectedRowIndices does not contain 2d array\", function () {\n    cy.openPropertyPane(\"tablewidget\"); //Enable Multi row select\n\n    cy.get(widgetsPage.toggleEnableMultirowselection).first().click({\n      force: true\n    }); //Change the value of default selected row\n\n    cy.updateCodeInput(\".t--property-control-defaultselectedrow\", \"1\"); //Disable Multi row select\n\n    cy.get(widgetsPage.toggleEnableMultirowselection).first().click({\n      force: true\n    });\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.text\", \"[]\"); //Enable Multi row select\n\n    cy.get(widgetsPage.toggleEnableMultirowselection).first().click({\n      force: true\n    });\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.text\", \"[  1]\"); //Disable Multi row select\n\n    cy.get(widgetsPage.toggleEnableMultirowselection).first().click({\n      force: true\n    }); //Enable Multi row select\n\n    cy.get(widgetsPage.toggleEnableMultirowselection).first().click({\n      force: true\n    });\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.text\", \"[  1]\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/table_with_text_no_2dArray_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check if the selectedRowIndices does not contain -1","suites":["Table widget edge case scenario testing"],"updatePoint":{"line":11,"column":57,"index":394},"line":11,"code":"  it(\"Check if the selectedRowIndices does not contain -1\", function () {\n    cy.openPropertyPane(\"tablewidget\"); //Update the property default selected row to blank\n\n    cy.updateCodeInput(\".t--property-control-defaultselectedrow\", \"\"); //Check if the evaluated value is undefined\n\n    cy.get(commonlocators.evaluatedCurrentValue).first().should(\"be.visible\").should(\"have.text\", \"undefined\"); //Check the value present in the textfield which is selectedRowIndices is blank\n\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.text\", \"\"); //Enable the \"Enable Multi Row selection\"\n\n    cy.get(widgetsPage.toggleEnableMultirowselection).first().click({\n      force: true\n    }); //Check the value present in the textfield which is selectedRowIndices is []\n\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.text\", \"[]\"); //Select the 1st, 2nd and 3rd row\n\n    cy.isSelectRow(\"0\");\n    cy.isSelectRow(\"1\");\n    cy.isSelectRow(\"2\"); //Check the value present in the textfield which is selectedRowIndices is [0,1,2]\n\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.text\", \"[  0,  1,  2]\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV1/table_with_text_selRowIndices_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. should test that custom column has alias property","suites":["Custom column alias functionality"],"updatePoint":{"line":20,"column":58,"index":624},"line":20,"code":"  it(\"1. should test that custom column has alias property\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    propPane.UpdatePropertyFieldValue(\"Table Data\", JSON.stringify(data));\n    cy.wait(\"@updateLayout\");\n    cy.wait(1000);\n    cy.addColumnV2(\"customColumn1\");\n    cy.editColumn(\"customColumn1\");\n    cy.get(\".t--property-control-propertyname\").should(\"exist\");\n    cy.get(\".t--property-control-propertyname .CodeMirror-code\").invoke(\"text\").then(value => {\n      expect(value).to.equal(\"customColumn1\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/Custom_column_alias_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. should test that custom alias is used in the selectedRow","suites":["Custom column alias functionality"],"updatePoint":{"line":32,"column":65,"index":1161},"line":32,"code":"  it(\"2. should test that custom alias is used in the selectedRow\", () => {\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 200,\n      y: 100\n    });\n    cy.openPropertyPane(\"textwidget\");\n    propPane.UpdatePropertyFieldValue(\"Text\", \"{{Table1.selectedRow}}\");\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.editColumn(\"customColumn1\");\n    propPane.UpdatePropertyFieldValue(\"Property name\", \"columnAlias\");\n    cy.get(\".t--widget-textwidget .bp3-ui-text\").should(\"contain\", `{  \"普通话 [普通話] \": \"\",  \"français\": \"\",  \"español\": \"\",  \"日本語\": \"\",  \"हिन्दी\": \"\",  \"columnAlias\": \"\"}`);\n    cy.isSelectRow(0);\n    cy.get(\".t--widget-textwidget .bp3-ui-text\").should(\"contain\", `{  \"普通话 [普通話] \": \"mandarin\",  \"français\": \"french\",  \"español\": \"spanish\",  \"日本語\": \"japnese\",  \"हिन्दी\": \"hindi\",  \"columnAlias\": \"\"}`);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/Custom_column_alias_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. should test that custom alias is used in the triggeredRow","suites":["Custom column alias functionality"],"updatePoint":{"line":46,"column":66,"index":1983},"line":46,"code":"  it(\"3. should test that custom alias is used in the triggeredRow\", () => {\n    cy.openPropertyPane(\"textwidget\");\n    propPane.UpdatePropertyFieldValue(\"Text\", \"{{Table1.triggeredRow}}\");\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.get(widgetsPage.addColumn).scrollIntoView();\n    cy.get(widgetsPage.addColumn).click({\n      force: true\n    });\n    cy.wait(500);\n    cy.editColumn(\"customColumn2\");\n    cy.get(commonlocators.changeColType).last().click();\n    cy.get(\".t--dropdown-option\").children().contains(\"Button\").click();\n    cy.get(\".t--property-control-onclick .t--open-dropdown-Select-Action\").last().click();\n    cy.selectShowMsg();\n    cy.addSuccessMessage(\"clicked!!\", \".t--property-control-onsave\");\n    cy.wait(1000);\n    cy.get(\".t--widget-textwidget .bp3-ui-text\").should(\"contain\", `{  \"普通话 [普通話] \": \"\",  \"français\": \"\",  \"español\": \"\",  \"日本語\": \"\",  \"हिन्दी\": \"\",  \"columnAlias\": \"\",  \"customColumn2\": \"\"}`);\n    cy.get(`[data-colindex=\"6\"][data-rowindex=\"0\"] button`).trigger(\"click\", {\n      force: true\n    });\n    cy.get(\".t--widget-textwidget .bp3-ui-text\").should(\"contain\", `{  \"普通话 [普通話] \": \"mandarin\",  \"français\": \"french\",  \"español\": \"spanish\",  \"日本語\": \"japnese\",  \"हिन्दी\": \"hindi\",  \"columnAlias\": \"\",  \"customColumn2\": \"\"}`);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/Custom_column_alias_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Check if the selectedRowIndices does not contain 2d array","suites":["Table widget v2 edge case scenario testing"],"updatePoint":{"line":11,"column":66,"index":412},"line":11,"code":"  it(\"1. Check if the selectedRowIndices does not contain 2d array\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\"); //Enable Multi row select\n\n    cy.get(widgetsPage.toggleEnableMultirowselection).first().click({\n      force: true\n    }); //Change the value of default selected row\n\n    cy.updateCodeInput(\".t--property-control-defaultselectedrows\", \"[1]\"); //Disable Multi row select\n\n    cy.get(widgetsPage.toggleEnableMultirowselection).first().click({\n      force: true\n    });\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.text\", \"[]\"); //Enable Multi row select\n\n    cy.get(widgetsPage.toggleEnableMultirowselection).first().click({\n      force: true\n    });\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.text\", \"[  1]\"); //Disable Multi row select\n\n    cy.get(widgetsPage.toggleEnableMultirowselection).first().click({\n      force: true\n    }); //Enable Multi row select\n\n    cy.get(widgetsPage.toggleEnableMultirowselection).first().click({\n      force: true\n    });\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.text\", \"[  1]\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/Edge_case_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Check if the selectedRowIndices does not contain -1","suites":["Table widget v2 edge case scenario testing"],"updatePoint":{"line":39,"column":60,"index":1519},"line":39,"code":"  it(\"2. Check if the selectedRowIndices does not contain -1\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\"); //Update the property default selected row to blank\n\n    cy.updateCodeInput(\".t--property-control-defaultselectedrow\", \"\"); //Check if the evaluated value is undefined\n\n    cy.get(commonlocators.evaluatedCurrentValue).first().should(\"be.visible\").should(\"have.text\", \"-1\"); //Check the value present in the textfield which is selectedRowIndices is blank\n\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.text\", \"[]\"); //Enable the \"Enable Multi Row selection\"\n\n    cy.get(widgetsPage.toggleEnableMultirowselection).first().click({\n      force: true\n    }); //Check the value present in the textfield which is selectedRowIndices is []\n\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.text\", \"[]\"); //Select the 1st, 2nd and 3rd row\n\n    cy.isSelectRow(\"0\");\n    cy.isSelectRow(\"1\");\n    cy.isSelectRow(\"2\"); //Check the value present in the textfield which is selectedRowIndices is [0,1,2]\n\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.text\", \"[  0,  1,  2]\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/Edge_case_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. should check that edit check box is present in the columns list","suites":["Table widget inline editing functionality"],"updatePoint":{"line":11,"column":72,"index":409},"line":11,"code":"  it(\"1. should check that edit check box is present in the columns list\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    [\"step\", \"task\", \"status\", \"action\"].forEach(column => {\n      cy.get(`[data-rbd-draggable-id=\"${column}\"] .t--card-checkbox input[type=\"checkbox\"]`).should(\"exist\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. should check that editablity checkbox is preset top of the list","suites":["Table widget inline editing functionality"],"updatePoint":{"line":17,"column":72,"index":719},"line":17,"code":"  it(\"2. should check that editablity checkbox is preset top of the list\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.get(`.t--property-control-columns .t--uber-editable-checkbox`).should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. should check that turning on editablity turns on edit in all the editable column in the list","suites":["Table widget inline editing functionality"],"updatePoint":{"line":21,"column":101,"index":966},"line":21,"code":"  it(\"3. should check that turning on editablity turns on edit in all the editable column in the list\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n\n    function checkEditableCheckbox(expected) {\n      [\"step\", \"task\", \"status\"].forEach(column => {\n        cy.get(`[data-rbd-draggable-id=\"${column}\"] .t--card-checkbox.t--checked`).should(expected);\n      });\n    }\n\n    checkEditableCheckbox(\"not.exist\");\n    cy.get(`.t--property-control-columns .t--uber-editable-checkbox input+span`).click();\n    checkEditableCheckbox(\"exist\");\n    cy.get(`.t--property-control-columns .t--uber-editable-checkbox input+span`).click();\n    checkEditableCheckbox(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. should check that turning on editablity DOESN'T turn on edit in the non editable column in the list","suites":["Table widget inline editing functionality"],"updatePoint":{"line":36,"column":108,"index":1648},"line":36,"code":"  it(\"4. should check that turning on editablity DOESN'T turn on edit in the non editable column in the list\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.get('[data-rbd-draggable-id=\"action\"] .t--card-checkbox.t--checked').should(\"not.exist\");\n    cy.get(`.t--property-control-columns .t--uber-editable-checkbox input+span`).click();\n    cy.get('[data-rbd-draggable-id=\"action\"] .t--card-checkbox.t--checked').should(\"not.exist\");\n    cy.get(`.t--property-control-columns .t--uber-editable-checkbox input+span`).click();\n    cy.get('[data-rbd-draggable-id=\"action\"] .t--card-checkbox.t--checked').should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. should check that checkbox in the column list and checkbox inside the column settings ARE in sync","suites":["Table widget inline editing functionality"],"updatePoint":{"line":44,"column":106,"index":2284},"line":44,"code":"  it(\"5. should check that checkbox in the column list and checkbox inside the column settings ARE in sync\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.get('[data-rbd-draggable-id=\"step\"] .t--card-checkbox.t--checked').should(\"not.exist\");\n    cy.editColumn(\"step\");\n    cy.get(\".t--property-control-editable .bp3-switch.checked\").should(\"not.exist\");\n    cy.get(\".t--property-pane-back-btn\").click();\n    cy.get('[data-rbd-draggable-id=\"step\"] .t--card-checkbox input+span').click();\n    cy.get('[data-rbd-draggable-id=\"step\"] .t--card-checkbox.t--checked').should(\"exist\");\n    cy.editColumn(\"step\");\n    cy.get(\".t--property-control-editable .bp3-switch.checked\").should(\"exist\");\n    cy.get(\".t--property-pane-back-btn\").click();\n    cy.get('[data-rbd-draggable-id=\"step\"] .t--card-checkbox input+span').click();\n    cy.get('[data-rbd-draggable-id=\"step\"] .t--card-checkbox.t--checked').should(\"not.exist\");\n    cy.editColumn(\"step\");\n    cy.get(\".t--property-control-editable .bp3-switch.checked\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. should check that checkbox in the column list and checkbox inside the column settings ARE NOT in sync when there is js expression","suites":["Table widget inline editing functionality"],"updatePoint":{"line":60,"column":138,"index":3360},"line":60,"code":"  it(\"6. should check that checkbox in the column list and checkbox inside the column settings ARE NOT in sync when there is js expression\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.editColumn(\"step\");\n    cy.get(\".t--property-control-editable .t--js-toggle\").click();\n    cy.updateCodeInput(\".t--property-control-editable\", `{{true === true}}`);\n    cy.get(\".t--property-pane-back-btn\").click();\n    cy.makeColumnEditable(\"step\");\n    cy.editColumn(\"step\");\n    cy.get(\".t--property-control-editable .CodeMirror .CodeMirror-code\").should(\"contain\", \"{{true === true}}\");\n    cy.get(\".t--property-pane-back-btn\").click();\n    cy.makeColumnEditable(\"step\");\n    cy.editColumn(\"step\");\n    cy.get(\".t--property-control-editable .CodeMirror .CodeMirror-code\").should(\"contain\", \"{{true === true}}\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. should check that editable checkbox is disabled for columns that are not editable","suites":["Table widget inline editing functionality"],"updatePoint":{"line":74,"column":90,"index":4131},"line":74,"code":"  it(\"7. should check that editable checkbox is disabled for columns that are not editable\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    [{\n      columnType: \"URL\",\n      expected: \"be.disabled\"\n    }, {\n      columnType: \"Number\",\n      expected: \"not.be.disabled\"\n    }, {\n      columnType: \"Date\",\n      expected: \"be.disabled\"\n    }, {\n      columnType: \"Image\",\n      expected: \"be.disabled\"\n    }, {\n      columnType: \"Video\",\n      expected: \"be.disabled\"\n    }, {\n      columnType: \"Button\",\n      expected: \"be.disabled\"\n    }, {\n      columnType: \"Menu Button\",\n      expected: \"be.disabled\"\n    }, {\n      columnType: \"Icon Button\",\n      expected: \"be.disabled\"\n    }, {\n      columnType: \"Plain Text\",\n      expected: \"not.be.disabled\"\n    }].forEach(data => {\n      cy.editColumn(\"step\");\n      cy.get(commonlocators.changeColType).last().click();\n      cy.get(\".t--dropdown-option\").children().contains(data.columnType).click();\n      cy.wait(\"@updateLayout\");\n      cy.get(\".t--property-pane-back-btn\").click();\n      cy.get(`[data-rbd-draggable-id=\"step\"] .t--card-checkbox input`).should(data.expected);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. should check that editable property is only available for Plain text & number columns","suites":["Table widget inline editing functionality"],"updatePoint":{"line":112,"column":94,"index":5281},"line":112,"code":"  it(\"8. should check that editable property is only available for Plain text & number columns\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.editColumn(\"step\");\n    [{\n      columnType: \"URL\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Number\",\n      expected: \"exist\"\n    }, {\n      columnType: \"Date\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Image\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Video\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Button\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Menu Button\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Icon Button\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Plain Text\",\n      expected: \"exist\"\n    }].forEach(data => {\n      cy.get(commonlocators.changeColType).last().click();\n      cy.get(\".t--dropdown-option\").children().contains(data.columnType).click();\n      cy.wait(\"@updateLayout\");\n      cy.get(\".t--property-control-editable\").should(data.expected);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"9. should check that inline save option is shown only when a column is made editable","suites":["Table widget inline editing functionality"],"updatePoint":{"line":149,"column":90,"index":6314},"line":149,"code":"  it(\"9. should check that inline save option is shown only when a column is made editable\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.get(\".t--property-control-updatemode\").should(\"not.exist\");\n    cy.makeColumnEditable(\"step\");\n    cy.get(\".t--property-control-updatemode\").should(\"exist\");\n    cy.makeColumnEditable(\"step\");\n    cy.get(\".t--property-control-updatemode\").should(\"exist\");\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 300,\n      y: 600\n    });\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{Table1.inlineEditingSaveOption}}`);\n    cy.get(\".t--widget-textwidget .bp3-ui-text\").should(\"contain\", \"ROW_LEVEL\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"10. should check that save/discard column is added when a column is made editable and removed when made uneditable","suites":["Table widget inline editing functionality"],"updatePoint":{"line":164,"column":120,"index":7045},"line":164,"code":"  it(\"10. should check that save/discard column is added when a column is made editable and removed when made uneditable\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.makeColumnEditable(\"step\");\n    cy.get(\"[data-rbd-draggable-id='EditActions1']\").should(\"exist\");\n    cy.get(\"[data-rbd-draggable-id='EditActions1'] input[type='text']\").should(\"contain.value\", \"Save / Discard\");\n    cy.makeColumnEditable(\"step\");\n    cy.get(\"[data-rbd-draggable-id='EditActions1']\").should(\"not.exist\");\n    cy.get(`.t--property-control-columns .t--uber-editable-checkbox input+span`).click();\n    cy.get(\"[data-rbd-draggable-id='EditActions1']\").should(\"exist\");\n    cy.get(\"[data-rbd-draggable-id='EditActions1'] input[type='text']\").should(\"contain.value\", \"Save / Discard\");\n    cy.get(`.t--property-control-columns .t--uber-editable-checkbox input+span`).click();\n    cy.get(\"[data-rbd-draggable-id='EditActions1']\").should(\"not.exist\");\n    cy.editColumn(\"step\");\n    cy.get(\".t--property-control-editable .bp3-switch span\").click();\n    cy.get(\".t--property-pane-back-btn\").click();\n    cy.get(\"[data-rbd-draggable-id='EditActions1']\").should(\"exist\");\n    cy.get(\"[data-rbd-draggable-id='EditActions1'] input[type='text']\").should(\"contain.value\", \"Save / Discard\");\n    cy.editColumn(\"step\");\n    cy.get(\".t--property-control-editable .bp3-switch span\").click();\n    cy.get(\"[data-rbd-draggable-id='EditActions1']\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"11. should check that save/discard column is added/removed when inline save option is changed","suites":["Table widget inline editing functionality"],"updatePoint":{"line":185,"column":99,"index":8474},"line":185,"code":"  it(\"11. should check that save/discard column is added/removed when inline save option is changed\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.makeColumnEditable(\"step\");\n    cy.get(\"[data-rbd-draggable-id='EditActions1']\").should(\"exist\");\n    cy.get(\".t--property-control-updatemode .bp3-popover-target\").last().click();\n    cy.get(\".t--dropdown-option\").children().contains(\"Custom\").click();\n    cy.get(\"[data-rbd-draggable-id='EditActions1']\").should(\"not.exist\");\n    cy.makeColumnEditable(\"task\");\n    cy.get(\"[data-rbd-draggable-id='EditActions1']\").should(\"not.exist\");\n    cy.get(\".t--property-control-updatemode .bp3-popover-target\").last().click();\n    cy.get(\".t--dropdown-option\").children().contains(\"Row level\").click();\n    cy.get(\"[data-rbd-draggable-id='EditActions1']\").should(\"exist\");\n    cy.get(\".t--property-control-updatemode .bp3-popover-target\").last().click();\n    cy.get(\".t--dropdown-option\").children().contains(\"Custom\").click();\n    cy.get(\"[data-rbd-draggable-id='EditActions1']\").should(\"not.exist\");\n    cy.makeColumnEditable(\"step\");\n    cy.makeColumnEditable(\"task\");\n    cy.get(\".t--property-control-updatemode .bp3-popover-target\").last().click();\n    cy.get(\".t--dropdown-option\").children().contains(\"Row level\").click();\n    cy.get(\"[data-rbd-draggable-id='EditActions1']\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"12. should check that cell of an editable column is editable","suites":["Table widget inline editing functionality"],"updatePoint":{"line":206,"column":66,"index":9801},"line":206,"code":"  it(\"12. should check that cell of an editable column is editable\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.makeColumnEditable(\"step\"); // click the edit icon\n\n    cy.editTableCell(0, 0);\n    cy.get(\"[data-colindex=0][data-rowindex=0] .t--inlined-cell-editor input.bp3-input\").should(\"not.be.disabled\"); //double click the cell\n\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.get(`[data-colindex=0][data-rowindex=0] .t--inlined-cell-editor input.bp3-input`).should(\"not.exist\");\n    cy.get(`[data-colindex=0][data-rowindex=0] .t--table-text-cell`).trigger(\"dblclick\");\n    cy.get(`[data-colindex=0][data-rowindex=0] .t--inlined-cell-editor input.bp3-input`).should(\"exist\");\n    cy.get(\"[data-colindex=0][data-rowindex=0] .t--inlined-cell-editor input.bp3-input\").should(\"not.be.disabled\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"13. should check that changes can be discarded by clicking escape","suites":["Table widget inline editing functionality"],"updatePoint":{"line":219,"column":71,"index":10623},"line":219,"code":"  it(\"13. should check that changes can be discarded by clicking escape\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    let value;\n    cy.readTableV2data(0, 0).then(val => {\n      value = val;\n    });\n    cy.makeColumnEditable(\"step\");\n    cy.editTableCell(0, 0);\n    cy.enterTableCellValue(0, 0, \"newValue\");\n    cy.discardTableCellValue(0, 0);\n    cy.get(`[data-colindex=\"0\"][data-rowindex=\"0\"] .t--inlined-cell-editor input.bp3-input`).should(\"not.exist\");\n    cy.readTableV2data(0, 0).then(val => {\n      expect(val).to.equal(value);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"14. should check that changes can be saved by pressing enter or clicking outside","suites":["Table widget inline editing functionality"],"updatePoint":{"line":234,"column":86,"index":11198},"line":234,"code":"  it(\"14. should check that changes can be saved by pressing enter or clicking outside\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    let value;\n    cy.readTableV2data(0, 0).then(val => {\n      value = val;\n    });\n    cy.makeColumnEditable(\"step\");\n    cy.editTableCell(0, 0);\n    cy.enterTableCellValue(0, 0, \"newValue\");\n    cy.saveTableCellValue(0, 0);\n    cy.get(`[data-colindex=\"0\"][data-rowindex=\"0\"] .t--inlined-cell-editor input.bp3-input`).should(\"not.exist\");\n    cy.wait(1000);\n    cy.readTableV2data(0, 0).then(val => {\n      expect(val).to.not.equal(value);\n      value = val;\n    });\n    cy.editTableCell(0, 0);\n    cy.enterTableCellValue(0, 0, \"someOtherNewValue\");\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.get(`[data-colindex=\"0\"][data-rowindex=\"0\"] .t--inlined-cell-editor input.bp3-input`).should(\"not.exist\");\n    cy.wait(1000);\n    cy.readTableV2data(0, 0).then(val => {\n      expect(val).to.not.equal(value);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"15. should check that updatedRows and updatedRowIndices have correct values","suites":["Table widget inline editing functionality"],"updatePoint":{"line":259,"column":81,"index":12155},"line":259,"code":"  it(\"15. should check that updatedRows and updatedRowIndices have correct values\", () => {\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 300,\n      y: 500\n    });\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{Table1.updatedRows}}`);\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.makeColumnEditable(\"step\");\n    cy.editTableCell(0, 0);\n    cy.enterTableCellValue(0, 0, \"newValue\");\n    cy.saveTableCellValue(0, 0);\n    cy.get(\".t--widget-textwidget .bp3-ui-text\").should(\"contain\", `[  {    \"index\": 0,    \"updatedFields\": {      \"step\": \"newValue\"    },    \"allFields\": {      \"step\": \"newValue\",      \"task\": \"Drop a table\",      \"status\": \"✅\",      \"action\": \"\"    }  }]`);\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{Table1.updatedRowIndices}}`);\n    cy.get(\".t--widget-textwidget .bp3-ui-text\").should(\"contain\", \"[  0]\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"16. should check that onsubmit event is available for the columns that are editable","suites":["Table widget inline editing functionality"],"updatePoint":{"line":276,"column":89,"index":13104},"line":276,"code":"  it(\"16. should check that onsubmit event is available for the columns that are editable\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.editColumn(\"step\");\n    [{\n      columnType: \"URL\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Number\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Date\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Image\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Video\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Button\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Menu Button\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Icon Button\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Plain Text\",\n      expected: \"not.exist\"\n    }].forEach(data => {\n      cy.get(commonlocators.changeColType).last().click();\n      cy.get(\".t--dropdown-option\").children().contains(data.columnType).click();\n      cy.wait(\"@updateLayout\");\n      cy.wait(500);\n      cy.get(\".t--property-control-onsubmit\").should(data.expected);\n    });\n    cy.get(\".t--property-pane-back-btn\").click();\n    cy.makeColumnEditable(\"step\");\n    cy.editColumn(\"step\");\n    [{\n      columnType: \"URL\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Number\",\n      expected: \"exist\"\n    }, {\n      columnType: \"Date\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Image\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Video\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Button\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Menu Button\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Icon Button\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Plain Text\",\n      expected: \"exist\"\n    }].forEach(data => {\n      cy.get(commonlocators.changeColType).last().click();\n      cy.get(\".t--dropdown-option\").children().contains(data.columnType).click();\n      cy.wait(\"@updateLayout\");\n      cy.wait(500);\n      cy.get(\".t--property-control-onsubmit\").should(data.expected);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"17. should check that onsubmit event is triggered when changes are saved","suites":["Table widget inline editing functionality"],"updatePoint":{"line":351,"column":78,"index":15142},"line":351,"code":"  it(\"17. should check that onsubmit event is triggered when changes are saved\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.makeColumnEditable(\"step\");\n    cy.editColumn(\"step\");\n    cy.get(\".t--property-control-onsubmit .t--open-dropdown-Select-Action\").click();\n    cy.selectShowMsg();\n    cy.addSuccessMessage(\"Submitted!!\", \".t--property-control-onsubmit\");\n    cy.editTableCell(0, 0);\n    cy.enterTableCellValue(0, 0, \"NewValue\");\n    cy.saveTableCellValue(0, 0);\n    cy.get(widgetsPage.toastAction).should(\"be.visible\");\n    cy.get(widgetsPage.toastActionText).last().invoke(\"text\").then(text => {\n      expect(text).to.equal(\"Submitted!!\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"18. should check that onSubmit events has access to edit values through triggeredRow","suites":["Table widget inline editing functionality"],"updatePoint":{"line":366,"column":90,"index":15830},"line":366,"code":"  it(\"18. should check that onSubmit events has access to edit values through triggeredRow\", () => {\n    const value = \"newCellValue\";\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.makeColumnEditable(\"step\");\n    cy.editColumn(\"step\");\n    cy.get(\".t--property-control-onsubmit .t--open-dropdown-Select-Action\").click();\n    cy.selectShowMsg();\n    cy.addSuccessMessage(\"{{Table1.triggeredRow.step}}\", \".t--property-control-onsubmit\");\n    cy.editTableCell(0, 0);\n    cy.enterTableCellValue(0, 0, value);\n    cy.saveTableCellValue(0, 0);\n    cy.get(widgetsPage.toastAction).should(\"be.visible\");\n    cy.get(widgetsPage.toastActionText).last().invoke(\"text\").then(text => {\n      expect(text).to.equal(value);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"19. should check that onSave is working","suites":["Table widget inline editing functionality"],"updatePoint":{"line":382,"column":45,"index":16511},"line":382,"code":"  it(\"19. should check that onSave is working\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.makeColumnEditable(\"step\");\n    cy.editColumn(\"EditActions1\");\n    cy.get(\".t--property-pane-section-collapse-savebutton\").click();\n    cy.get(\".t--property-pane-section-collapse-discardbutton\").click();\n    cy.get(\".t--property-control-onsave .t--open-dropdown-Select-Action\").last().click();\n    cy.selectShowMsg();\n    cy.addSuccessMessage(\"Saved!!\", \".t--property-control-onsave\");\n    cy.editTableCell(0, 0);\n    cy.enterTableCellValue(0, 0, \"NewValue\");\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.saveTableRow(4, 0);\n    cy.get(widgetsPage.toastAction).should(\"be.visible\");\n    cy.get(widgetsPage.toastActionText).last().invoke(\"text\").then(text => {\n      expect(text).to.equal(\"Saved!!\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"20. should check that onSave events has access to edit values through triggeredRow","suites":["Table widget inline editing functionality"],"updatePoint":{"line":400,"column":88,"index":17377},"line":400,"code":"  it(\"20. should check that onSave events has access to edit values through triggeredRow\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.makeColumnEditable(\"step\");\n    cy.editColumn(\"EditActions1\");\n    cy.get(\".t--property-pane-section-collapse-savebutton\").click();\n    cy.get(\".t--property-pane-section-collapse-discardbutton\").click();\n    cy.get(\".t--property-control-onsave .t--open-dropdown-Select-Action\").last().click();\n    cy.selectShowMsg();\n    cy.addSuccessMessage(\"{{Table1.triggeredRow.step}}\", \".t--property-control-onsave\");\n    cy.editTableCell(0, 0);\n    cy.enterTableCellValue(0, 0, \"NewValue\");\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.saveTableRow(4, 0);\n    cy.get(widgetsPage.toastAction).should(\"be.visible\");\n    cy.get(widgetsPage.toastActionText).last().invoke(\"text\").then(text => {\n      expect(text).to.equal(\"NewValue\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"21. should check that onDiscard event is working","suites":["Table widget inline editing functionality"],"updatePoint":{"line":418,"column":54,"index":18231},"line":418,"code":"  it(\"21. should check that onDiscard event is working\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.makeColumnEditable(\"step\");\n    cy.editColumn(\"EditActions1\");\n    cy.get(\".t--property-pane-section-collapse-savebutton\").click();\n    cy.get(\".t--property-pane-section-collapse-discardbutton\").click();\n    cy.get(\".t--property-control-ondiscard .t--open-dropdown-Select-Action\").last().click();\n    cy.selectShowMsg();\n    cy.addSuccessMessage(\"discarded!!\", \".t--property-control-ondiscard\");\n    cy.editTableCell(0, 0);\n    cy.enterTableCellValue(0, 0, \"NewValue\");\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.discardTableRow(4, 0);\n    cy.get(widgetsPage.toastAction).should(\"be.visible\");\n    cy.get(widgetsPage.toastActionText).last().invoke(\"text\").then(text => {\n      expect(text).to.equal(\"discarded!!\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"22. should check that inline editing works with text wrapping disabled","suites":["Table widget inline editing functionality with Text wrapping functionality"],"updatePoint":{"line":441,"column":76,"index":19248},"line":441,"code":"  it(\"22. should check that inline editing works with text wrapping disabled\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.makeColumnEditable(\"step\");\n    cy.editTableCell(0, 0);\n    cy.get(\"[data-colindex=0][data-rowindex=0] .t--inlined-cell-editor input.bp3-input\").should(\"not.be.disabled\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"23. should check that inline editing works with text wrapping enabled","suites":["Table widget inline editing functionality with Text wrapping functionality"],"updatePoint":{"line":447,"column":75,"index":19561},"line":447,"code":"  it(\"23. should check that inline editing works with text wrapping enabled\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.makeColumnEditable(\"step\");\n    cy.editColumn(\"step\");\n    cy.get(\".t--property-control-cellwrapping .bp3-control-indicator\").first().click();\n    cy.editTableCell(0, 0);\n    cy.get(\"[data-colindex=0][data-rowindex=0] .t--inlined-cell-editor input.bp3-input\").should(\"not.be.disabled\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"24. should check that doesn't grow taller when text wrapping is disabled","suites":["Table widget inline editing functionality with Text wrapping functionality"],"updatePoint":{"line":455,"column":78,"index":19992},"line":455,"code":"  it(\"24. should check that doesn't grow taller when text wrapping is disabled\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.makeColumnEditable(\"step\");\n    cy.editTableCell(0, 0);\n    cy.get(\"[data-colindex='0'][data-rowindex='0'] .t--inlined-cell-editor\").should(\"have.css\", \"height\", \"40px\");\n    cy.enterTableCellValue(0, 0, \"this is a very long cell value\");\n    cy.get(\"[data-colindex='0'][data-rowindex='0'] .t--inlined-cell-editor\").should(\"have.css\", \"height\", \"40px\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"25. should check that grows taller when text wrapping is enabled","suites":["Table widget inline editing functionality with Text wrapping functionality"],"updatePoint":{"line":463,"column":70,"index":20482},"line":463,"code":"  it(\"25. should check that grows taller when text wrapping is enabled\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.makeColumnEditable(\"step\");\n    cy.editColumn(\"step\");\n    cy.get(\".t--property-control-cellwrapping .bp3-control-indicator\").first().click();\n    cy.editTableCell(0, 0);\n    cy.get(\"[data-colindex='0'][data-rowindex='0'] .t--inlined-cell-editor\").should(\"have.css\", \"height\", \"42px\");\n    cy.enterTableCellValue(0, 0, \"this is a very long cell value\");\n    cy.get(\"[data-colindex='0'][data-rowindex='0'] .t--inlined-cell-editor\").should(\"not.have.css\", \"height\", \"42px\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. should test that Non ASCII characters in the tableData are shown in the table column header","suites":["Non ASCII character functionality"],"updatePoint":{"line":18,"column":100,"index":596},"line":18,"code":"  it(\"1. should test that Non ASCII characters in the tableData are shown in the table column header\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    propPane.UpdatePropertyFieldValue(\"Table Data\", JSON.stringify(data));\n    cy.wait(\"@updateLayout\");\n    Object.keys(data[0]).forEach(column => {\n      cy.get(`.t--widget-tablewidgetv2 .thead .th[data-header=\"${column}\"]`).should(\"exist\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/non_ascii_column_name_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. should test that selectedRow also retains the non-ascii characters","suites":["Non ASCII character functionality"],"updatePoint":{"line":26,"column":75,"index":982},"line":26,"code":"  it(\"2. should test that selectedRow also retains the non-ascii characters\", () => {\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 200,\n      y: 100\n    });\n    cy.openPropertyPane(\"textwidget\");\n    propPane.UpdatePropertyFieldValue(\"Text\", \"{{Table1.selectedRow}}\");\n    cy.get(\".t--widget-textwidget .bp3-ui-text\").should(\"contain\", `{  \"普通话 [普通話] \": \"\",  \"français\": \"\",  \"español\": \"\",  \"日本語\": \"\",  \"हिन्दी\": \"\"}`);\n    cy.isSelectRow(0);\n    cy.get(\".t--widget-textwidget .bp3-ui-text\").should(\"contain\", `{  \"普通话 [普通話] \": \"mandarin\",  \"français\": \"french\",  \"español\": \"spanish\",  \"日本語\": \"japnese\",  \"हिन्दी\": \"hindi\"}`);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/non_ascii_column_name_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. should test that triggeredRow also retains the non-ascii characters","suites":["Non ASCII character functionality"],"updatePoint":{"line":37,"column":76,"index":1625},"line":37,"code":"  it(\"3. should test that triggeredRow also retains the non-ascii characters\", () => {\n    cy.openPropertyPane(\"textwidget\");\n    propPane.UpdatePropertyFieldValue(\"Text\", \"{{Table1.triggeredRow}}\");\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.addColumnV2(\"button\");\n    cy.editColumn(\"customColumn1\");\n    cy.get(commonlocators.changeColType).last().click();\n    cy.get(\".t--dropdown-option\").children().contains(\"Button\").click();\n    cy.get(\".t--property-control-onclick .t--open-dropdown-Select-Action\").last().click();\n    cy.selectShowMsg();\n    cy.addSuccessMessage(\"clicked!!\", \".t--property-control-onsave\");\n    cy.wait(1000);\n    cy.get(\".t--widget-textwidget .bp3-ui-text\").should(\"contain\", `{  \"普通话 [普通話] \": \"\",  \"français\": \"\",  \"español\": \"\",  \"日本語\": \"\",  \"हिन्दी\": \"\",  \"customColumn1\": \"\"}`);\n    cy.get(`[data-colindex=\"5\"][data-rowindex=\"0\"] button`).trigger(\"click\", {\n      force: true\n    });\n    cy.get(\".t--widget-textwidget .bp3-ui-text\").should(\"contain\", `{  \"普通话 [普通話] \": \"mandarin\",  \"français\": \"french\",  \"español\": \"spanish\",  \"日本語\": \"japnese\",  \"हिन्दी\": \"hindi\",  \"customColumn1\": \"\"}`);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/non_ascii_column_name_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Table widget V2 with with modal popup","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":14,"column":46,"index":483},"line":14,"code":"  it(\"1. Table widget V2 with with modal popup\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\"); //update Table name with _\n\n    cy.widgetText(\"Table_1\", widgetsPage.tableWidgetV2, commonlocators.tableV2Inner);\n    cy.createModal(\"Modal\", this.data.ModalName);\n    cy.isSelectRow(1);\n    cy.get(\".bp3-overlay-backdrop\").click({\n      force: true\n    });\n    cy.isSelectRow(2);\n    cy.get(\".bp3-overlay-backdrop\").click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_Button_Icon_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Table widget V2 with button colour change validation","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":28,"column":61,"index":959},"line":28,"code":"  it(\"2. Table widget V2 with button colour change validation\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\"); // Open column details of \"id\".\n\n    cy.editColumn(\"id\");\n    cy.get(widgetsPage.tableV2Btn).should(\"not.exist\"); // Changing column data type to \"Button\"\n\n    cy.changeColumnType(\"Button\"); // Changing the computed value (data) to \"orderAmount\"\n\n    cy.updateComputedValue(testdata.currentRowOrderAmt);\n    cy.changeColumnType(\"Button\");\n    cy.get(widgetsPage.buttonColor).click({\n      force: true\n    }).clear().type(color);\n    cy.get(widgetsPage.tableV2Btn).should(\"have.css\", \"background-color\", color);\n    cy.readTableV2dataPublish(\"2\", \"2\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Tobias Funke\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_Button_Icon_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Table widget icon type and colour validation","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":47,"column":53,"index":1738},"line":47,"code":"  it(\"3. Table widget icon type and colour validation\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\"); // Open column details of \"id\".\n\n    cy.get(commonlocators.editPropBackButton).click({\n      force: true\n    });\n    cy.editColumn(\"id\"); // Change Column type to icon Button\n\n    cy.changeColumnType(\"Icon Button\"); // Select Icon from Icon Control\n\n    cy.get(\".t--property-control-icon .bp3-icon-caret-down\").click({\n      force: true\n    });\n    cy.get(\".bp3-icon-add\").first().click({\n      force: true\n    });\n    cy.get(\".t--widget-tablewidgetv2 .tbody .bp3-icon-add\").should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_Button_Icon_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Table widget v2 column reorder and reload function","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":65,"column":59,"index":2359},"line":65,"code":"  it(\"4. Table widget v2 column reorder and reload function\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.get(commonlocators.editPropBackButton).click({\n      force: true\n    });\n    cy.hideColumn(\"email\");\n    cy.hideColumn(\"userName\");\n    cy.hideColumn(\"productName\");\n    cy.hideColumn(\"orderAmount\");\n    cy.readTableV2dataPublish(\"2\", \"2\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Tobias Funke\");\n      cy.reload();\n      cy.wait(3000);\n      cy.readTableV2dataPublish(\"2\", \"2\").then(tabDataNew => {\n        expect(tabDataNew).to.be.equal(\"Tobias Funke\");\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_Button_Icon_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Test to validate text color and text background","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":15,"column":56,"index":533},"line":15,"code":"  it(\"1. Test to validate text color and text background\", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidgetv2\"); // Click on text color input field\n\n    cy.selectColor(\"textcolor\"); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500);\n    cy.wait(\"@updateLayout\"); // Verify the text color is green\n\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"color\", \"rgb(126, 34, 206)\"); // Change the text color and enter purple in input field\n\n    cy.get(widgetsPage.textColor).scrollIntoView().clear({\n      force: true\n    }).type(\"purple\", {\n      force: true\n    });\n    cy.wait(\"@updateLayout\"); // Verify the text color is purple\n\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"color\", \"rgb(128, 0, 128)\"); // Click on cell background color\n\n    cy.selectColor(\"cellbackgroundcolor\"); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500); // select the green color\n\n    cy.wait(\"@updateLayout\");\n    cy.assertPageSave();\n    cy.PublishtheApp();\n    cy.wait(4000); // Verify the cell background color is green\n\n    cy.readTableV2dataValidateCSS(\"1\", \"1\", \"background-color\", \"rgb(126, 34, 206)\");\n    cy.get(publish.backToEditor).click();\n    cy.openPropertyPane(\"tablewidgetv2\"); // Change the cell background color and enter purple in input field\n\n    cy.get(`${widgetsPage.cellBackground} input`).clear({\n      force: true\n    }).type(\"purple\", {\n      force: true\n    });\n    cy.wait(\"@updateLayout\");\n    cy.assertPageSave();\n    cy.PublishtheApp();\n    cy.wait(4000); // Verify the cell background color is purple\n\n    cy.readTableV2dataValidateCSS(\"1\", \"1\", \"background-color\", \"rgb(128, 0, 128)\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_Color_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. check background of the edit action column","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":61,"column":51,"index":2251},"line":61,"code":"  it(\"2. check background of the edit action column\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.makeColumnEditable(\"id\");\n    cy.readTableV2dataValidateCSS(0, 5, \"background-color\", \"rgba(0, 0, 0, 0)\");\n    cy.get(\".t--property-control-cellbackgroundcolor\").find(\".t--js-toggle\").click();\n    propPane.UpdatePropertyFieldValue(\"Cell Background Color\", \"rgb(255, 0, 0)\");\n    cy.readTableV2dataValidateCSS(0, 5, \"background-color\", \"rgb(255, 0, 0)\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_Color_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Table Widget Functionality with Hidden and Resized Columns","suites":["Table Widget V2 Functionality with Hidden and Resized Columns"],"updatePoint":{"line":14,"column":67,"index":557},"line":14,"code":"  it(\"1. Table Widget Functionality with Hidden and Resized Columns\", function () {\n    cy.PublishtheApp(); // Verify column header width should be equal to table width\n\n    cy.get(\".t--widget-tablewidgetv2\").invoke(\"outerWidth\").then(tableWidth => {\n      cy.get(\".t--widget-tablewidgetv2 .thead .tr\").invoke(\"outerWidth\").then(columnHeaderWidth => {\n        expect(columnHeaderWidth).to.be.at.least(tableWidth);\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_Column_Resize_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create an API and Execute the API and bind with Table V2","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":12,"column":65,"index":457},"line":12,"code":"  it(\"1. Create an API and Execute the API and bind with Table V2\", function () {\n    // Create and execute an API and bind with table\n    cy.createAndFillApi(this.data.paginationUrl, this.data.paginationParam);\n    cy.RunAPI();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_Derived_Column_Data_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Validate Table V2 with API data and then add a column","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":17,"column":62,"index":689},"line":17,"code":"  it(\"2. Validate Table V2 with API data and then add a column\", function () {\n    // Open property pane\n    cy.SearchEntityandOpen(\"Table1\"); // Clear Table data and enter Apil data into table data\n\n    cy.testJsontext(\"tabledata\", \"{{Api1.data.users}}\"); // Check Widget properties\n\n    cy.CheckWidgetProperties(commonlocators.serverSidePaginationCheckbox); // Open Text1 in propert pane\n\n    cy.SearchEntityandOpen(\"Text1\"); // Change the Text value to selected row url\n\n    cy.testJsontext(\"text\", \"{{Table1.selectedRow.url}}\"); // Open Table1 propert pane\n\n    cy.SearchEntityandOpen(\"Table1\"); // Compare table 1st index data with itself\n\n    cy.readTableV2data(\"0\", \"0\").then(tabData => {\n      const tableData = tabData;\n      localStorage.setItem(\"tableDataPage1\", tableData);\n    }); // Verify 1st index data\n\n    cy.ValidateTableV2Data(\"1\"); // add new column\n\n    cy.addColumnV2(\"CustomColumn\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_Derived_Column_Data_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Table widget toggle test for background color","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":40,"column":54,"index":1595},"line":40,"code":"  it(\"3. Table widget toggle test for background color\", function () {\n    // Open id property pane\n    cy.editColumn(\"id\"); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000); // Click on cell background JS button\n\n    cy.get(widgetsPage.toggleJsBcgColor).first().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000); // Change the cell background color to green\n\n    cy.toggleJsAndUpdate(\"tabledata\", \"Green\"); // Go back to table property pane\n\n    cy.get(\".t--property-pane-back-btn\").click({\n      force: true\n    });\n    cy.wait(\"@updateLayout\"); // verify the cell background color\n\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"background-color\", \"rgb(0, 128, 0)\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_Derived_Column_Data_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Edit column name and validate test for computed value based on column type selected","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":61,"column":92,"index":2398},"line":61,"code":"  it(\"4. Edit column name and validate test for computed value based on column type selected\", function () {\n    // opoen customColumn1 property pane\n    cy.editColumn(\"customColumn1\"); // Enter Apil 1st user email data into customColumn1\n\n    cy.readTableV2dataPublish(\"1\", \"9\").then(tabData => {\n      const tabValue = tabData;\n      cy.updateComputedValueV2(\"{{Api1.data.users[0].email}}\");\n      cy.readTableV2dataPublish(\"1\", \"9\").then(tabData => {\n        expect(tabData).not.to.be.equal(tabValue);\n        cy.log(\"computed value of plain text \" + tabData);\n      });\n    });\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_Derived_Column_Data_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Update table json data and check the column names updated","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":75,"column":66,"index":2988},"line":75,"code":"  it(\"5. Update table json data and check the column names updated\", function () {\n    // Open table propert pane\n    cy.SearchEntityandOpen(\"Table1\"); // Change the table data\n\n    cy.testJsontext(\"tabledata\", JSON.stringify(this.data.TableInputUpdate));\n    cy.wait(\"@updateLayout\"); // verify columns are visible or not in the propert pane\n\n    cy.tableV2ColumnDataValidation(\"id\");\n    cy.tableV2ColumnDataValidation(\"email\");\n    cy.tableV2ColumnDataValidation(\"userName\");\n    cy.tableV2ColumnDataValidation(\"productName\");\n    cy.tableV2ColumnDataValidation(\"orderAmount\");\n    cy.tableV2ColumnDataValidation(\"customColumn1\"); // Hide the columns in property pane\n\n    cy.hideColumn(\"email\");\n    cy.hideColumn(\"userName\");\n    cy.hideColumn(\"productName\");\n    cy.hideColumn(\"orderAmount\"); // verify customColumn is visible in the table\n\n    cy.get(\".draggable-header:contains('CustomColumn')\").should(\"be.visible\");\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_Derived_Column_Data_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Table Widget V2 Functionality","suites":["Table Widget V2 Filtered Table Data in autocomplete"],"updatePoint":{"line":13,"column":38,"index":459},"line":13,"code":"  it(\"1. Table Widget V2 Functionality\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.wait(\"@updateLayout\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_FilteredTableData_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Table Widget V2 Functionality To Filter and search data","suites":["Table Widget V2 Filtered Table Data in autocomplete"],"updatePoint":{"line":17,"column":64,"index":618},"line":17,"code":"  it(\"2. Table Widget V2 Functionality To Filter and search data\", function () {\n    cy.get(publish.searchInput).first().type(\"query\");\n    cy.get(publish.filterBtn).click({\n      force: true\n    });\n    cy.get(publish.attributeDropdown).click({\n      force: true\n    });\n    cy.get(publish.attributeValue).contains(\"task\").click({\n      force: true\n    });\n    cy.get(publish.conditionDropdown).click({\n      force: true\n    });\n    cy.get(publish.attributeValue).contains(\"contains\").click({\n      force: true\n    });\n    cy.get(publish.tableFilterInputValue).type(\"bind\", {\n      force: true\n    });\n    cy.wait(500);\n    cy.get(widgetsPage.filterApplyBtn).click({\n      force: true\n    });\n    cy.wait(500);\n    cy.get(\".t--close-filter-btn\").click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_FilteredTableData_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Table Widget V2 Functionality to validate filtered table data","suites":["Table Widget V2 Filtered Table Data in autocomplete"],"updatePoint":{"line":46,"column":70,"index":1411},"line":46,"code":"  it(\"3. Table Widget V2 Functionality to validate filtered table data\", function () {\n    cy.SearchEntityandOpen(\"Text1\");\n    cy.testJsontext(\"text\", \"{{Table1.filteredTableData[0].task}}\");\n    cy.readTableV2data(\"0\", \"1\").then(tabData => {\n      const tableData = tabData;\n      cy.get(commonlocators.labelTextStyle).should(\"have.text\", tableData);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_FilteredTableData_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Table Widget V2 Functionality to validate filtered table data with actual table data","suites":["Table Widget V2 Filtered Table Data in autocomplete"],"updatePoint":{"line":54,"column":93,"index":1801},"line":54,"code":"  it(\"4. Table Widget V2 Functionality to validate filtered table data with actual table data\", function () {\n    cy.readTableV2data(\"0\", \"1\").then(tabData => {\n      const tableData = JSON.parse(dsl.dsl.children[0].tableData);\n      cy.get(commonlocators.labelTextStyle).should(\"have.text\", tableData[2].task);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_FilteredTableData_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Test to validate table pagination is disabled","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":16,"column":54,"index":585},"line":16,"code":"  it(\"1. Test to validate table pagination is disabled\", function () {\n    // Verify pagination is disabled\n    cy.get(\".t--table-widget-prev-page\").should(\"have.attr\", \"disabled\");\n    cy.get(\".t--table-widget-next-page\").should(\"have.attr\", \"disabled\");\n    cy.get(\".t--table-widget-page-input input\").should(\"have.attr\", \"disabled\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Test to validate text allignment","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":22,"column":41,"index":915},"line":22,"code":"  it(\"2. Test to validate text allignment\", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidgetv2\"); // Change the text align to center\n\n    cy.get(widgetsPage.centerAlign).first().click({\n      force: true\n    }); // Verify the center text alignment\n\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"justify-content\", \"center\"); // Change the text align to right\n\n    cy.get(widgetsPage.rightAlign).first().click({\n      force: true\n    }); // Verify the right text alignment\n\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"justify-content\", \"flex-end\"); // Change the text align to left\n\n    cy.get(widgetsPage.leftAlign).first().click({\n      force: true\n    }); // verify the left text alignment\n\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"justify-content\", \"flex-start\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Test to validate column heading allignment","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":44,"column":51,"index":1729},"line":44,"code":"  it(\"3. Test to validate column heading allignment\", function () {\n    // cy.openPropertyPane(\"tablewidget\");\n    // Change the text align to center\n    cy.get(widgetsPage.centerAlign).first().click({\n      force: true\n    }); // Verify the column headings are center aligned\n\n    cy.get(\".draggable-header > div\").first().should(\"have.css\", \"justify-content\", \"center\"); // Change the text align to right\n\n    cy.get(widgetsPage.rightAlign).first().click({\n      force: true\n    }); // Verify the column headings are right aligned\n\n    cy.get(\".draggable-header > div\").first().should(\"have.css\", \"justify-content\", \"flex-end\"); // Change the text align to left\n\n    cy.get(widgetsPage.leftAlign).first().click({\n      force: true\n    }); // Verify the column headings are left aligned\n\n    cy.get(\".draggable-header > div\").first().should(\"have.css\", \"justify-content\", \"flex-start\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Test to validate text format","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":65,"column":37,"index":2609},"line":65,"code":"  it(\"4. Test to validate text format\", function () {\n    // Select the bold font style\n    cy.get(widgetsPage.bold).click({\n      force: true\n    }); // Varify the font style is bold\n\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"font-weight\", \"700\"); // Change the font style to italic\n\n    cy.get(widgetsPage.italics).click({\n      force: true\n    }); // Verify the font style is italic\n\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"font-style\", \"italic\"); // Change the font style to underline\n\n    cy.editColumn(\"id\");\n    cy.get(widgetsPage.underline).click({\n      force: true\n    }); // Verify the font style is underline\n\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"text-decoration-line\", \"underline\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Test to validate vertical allignment","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":86,"column":45,"index":3335},"line":86,"code":"  it(\"5. Test to validate vertical allignment\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\"); // Select the top vertical alignment\n\n    cy.get(widgetsPage.verticalTop).click({\n      force: true\n    }); // verify vertical alignment is top\n\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"align-items\", \"flex-start\"); // Change the vertical alignment to center\n\n    cy.get(widgetsPage.verticalCenter).last().click({\n      force: true\n    }); // Verify the vertical alignment is centered\n\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"align-items\", \"center\"); // Change the vertical alignment to bottom\n\n    cy.get(widgetsPage.verticalBottom).last().click({\n      force: true\n    }); // Verify the vertical alignment is bottom\n\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"align-items\", \"flex-end\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Table widget V2 toggle test for text alignment","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":107,"column":55,"index":4154},"line":107,"code":"  it(\"6. Table widget V2 toggle test for text alignment\", function () {\n    // Click on text align JS\n    cy.get(widgetsPage.toggleTextAlign).first().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000); // Change the text align value to right for michael and left for others\n\n    cy.toggleJsAndUpdate(\"tabledata\", testdata.bindingGenAlign); // Close propert pane\n    // Verify the text michael id is right aligned\n\n    cy.readTableV2dataValidateCSS(\"0\", \"0\", \"justify-content\", \"flex-end\"); // Verify the 2nd id is left aligned\n\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"justify-content\", \"flex-start\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Table widget change text size and validate","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":122,"column":51,"index":4823},"line":122,"code":"  it(\"7. Table widget change text size and validate\", function () {\n    // Verify font size is 14px\n    cy.readTableV2dataValidateCSS(\"0\", \"0\", \"font-size\", \"14px\"); // Click on text size JS\n\n    cy.get(widgetsPage.toggleTextAlign).first().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000); // Open txe size dropdown options\n\n    cy.get(widgetsPage.textSize).last().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000); // Select Heading 1 text size\n\n    cy.selectTxtSize(\"L\"); // Verify the font size is 24px\n\n    cy.readTableV2dataValidateCSS(\"0\", \"0\", \"font-size\", \"20px\"); // close propert pane\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000); // Verify the font size is 24px\n\n    cy.readTableV2dataValidateCSS(\"0\", \"0\", \"font-size\", \"20px\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. Test to validate open new tab icon shows when URL type data validate link text ","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":147,"column":88,"index":5768},"line":147,"code":"  it(\"8. Test to validate open new tab icon shows when URL type data validate link text \", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidgetv2\"); // go back to 1st\n\n    cy.get(commonlocators.editPropBackButton).click({\n      force: true\n    }); // Open email property pane\n\n    cy.editColumn(\"email\"); // Change column type to url\n\n    cy.changeColumnType(\"URL\"); //Check all the occurance\n\n    cy.get(\".link-text\").should(\"have.length\", \"3\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"9. Edit column name and test for table header changes","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":161,"column":59,"index":6216},"line":161,"code":"  it(\"9. Edit column name and test for table header changes\", function () {\n    cy.get(commonlocators.editPropBackButton).click({\n      force: true\n    }); // Open email property pane\n\n    cy.editColumn(\"email\"); // CHange the Column email name to Email Address\n\n    cy.editColName(\"Email Address\"); // verify changed email name is visible\n\n    cy.get(\"[data-header='Email Address']\").should(\"be.visible\");\n    cy.get(commonlocators.editPropBackButton).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"10. Edit Row height and test table for changes","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":175,"column":52,"index":6702},"line":175,"code":"  it(\"10. Edit Row height and test table for changes\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.get(widgetsPage.rowHeight).last().click({\n      force: true\n    });\n    cy.get(\".t--dropdown-option\").contains(\"Short\").click({\n      force: true\n    });\n    cy.wait(2000);\n    cy.PublishtheApp();\n    cy.readTableV2dataValidateCSS(\"0\", \"1\", \"height\", \"29px\", true);\n    cy.get(publish.backToEditor).click();\n    cy.wait(2000);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Test multi select column shows when enableMultirowselection is true","suites":["Table Widget V2 row multi select validation"],"updatePoint":{"line":14,"column":76,"index":448},"line":14,"code":"  it(\"1. Test multi select column shows when enableMultirowselection is true\", function () {\n    cy.get(widgetsPage.buttonWidget).first().click();\n    cy.wait(1000);\n    cy.get(\".t--table-multiselect\").first().click();\n    cy.get(widgetsPage.buttonWidget).last().click();\n    cy.get(\".tbody .tr\").first().should(\"have.class\", \"selected-row\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_MultiRowSelect_dataUpdation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Test multi select column shows when enable Multirowselection is true","suites":["Table Widget V2 row multi select validation"],"updatePoint":{"line":11,"column":77,"index":409},"line":11,"code":"  it(\"1. Test multi select column shows when enable Multirowselection is true\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.get(widgetsPage.toggleEnableMultirowselection).first().click({\n      force: true\n    });\n    cy.closePropertyPane(\"tablewidgetv2\");\n    cy.get(\".t--table-multiselect-header\").first().should(\"be.visible\");\n    cy.get(\".t--table-multiselect\").first().should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_MultiRowSelect_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Test click on header cell selects all row","suites":["Table Widget V2 row multi select validation"],"updatePoint":{"line":20,"column":50,"index":802},"line":20,"code":"  it(\"2. Test click on header cell selects all row\", function () {\n    // click on header check cell\n    cy.get(\".t--table-multiselect-header\").first().click({\n      force: true\n    }); // check if rows selected\n\n    cy.get(\".tr\").should(\"have.class\", \"selected-row\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_MultiRowSelect_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Test click on single row cell changes header select cell state","suites":["Table Widget V2 row multi select validation"],"updatePoint":{"line":28,"column":71,"index":1098},"line":28,"code":"  it(\"3. Test click on single row cell changes header select cell state\", function () {\n    // un select all rows\n    cy.get(\".t--table-multiselect-header\").first().click({\n      force: true\n    }); // click on first row select box\n\n    cy.get(\".t--table-multiselect\").first().click({\n      force: true\n    }); // check if header cell is in half check state\n\n    cy.get(\".t--table-multiselect-header-half-check-svg\").first().should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_MultiRowSelect_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Test action configured on onRowSelected get triggered whenever a table row is selected","suites":["Table Widget V2 row multi select validation"],"updatePoint":{"line":40,"column":95,"index":1575},"line":40,"code":"  it(\"4. Test action configured on onRowSelected get triggered whenever a table row is selected\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.onTableAction(0, \"onrowselected\", \"Row Selected\"); // un select first row\n\n    cy.get(\".t--table-multiselect\").first().click({\n      force: true\n    });\n    cy.get(commonlocators.toastmsg).should(\"not.exist\"); // click on first row select box\n\n    cy.get(\".t--table-multiselect\").first().click({\n      force: true\n    });\n    cy.get(commonlocators.toastmsg).contains(\"Row Selected\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_MultiRowSelect_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. It should deselected default Selected Row when the header cell is clicked","suites":["Table Widget V2 row multi select validation"],"updatePoint":{"line":54,"column":82,"index":2113},"line":54,"code":"  it(\"5. It should deselected default Selected Row when the header cell is clicked\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.testJsontext(\"defaultselectedrows\", \"[0]\"); // click on header check cell\n\n    cy.get(\".t--table-multiselect-header\").first().click({\n      force: true\n    }); // check if rows selected\n\n    cy.get(\".tr\").should(\"not.have.class\", \"selected-row\"); // click on header check cell\n\n    cy.get(\".t--table-multiselect-header\").first().click({\n      force: true\n    }); // check if rows is not selected\n\n    cy.get(\".tr\").should(\"have.class\", \"selected-row\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_MultiRowSelect_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create an API and Execute the API and bind with Table V2","suites":["Test Create Api and Bind to Table widget V2"],"updatePoint":{"line":9,"column":65,"index":338},"line":9,"code":"  it(\"1. Create an API and Execute the API and bind with Table V2\", function () {\n    cy.createAndFillApi(this.data.paginationUrl, this.data.paginationParam);\n    cy.RunAPI();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_Property_JsonUpdate_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Validate Table with API data and then add a column","suites":["Test Create Api and Bind to Table widget V2"],"updatePoint":{"line":13,"column":59,"index":514},"line":13,"code":"  it(\"2. Validate Table with API data and then add a column\", function () {\n    // Open property pane\n    cy.SearchEntityandOpen(\"Table1\"); // Change the table data to Apil data users\n\n    cy.testJsontext(\"tabledata\", \"{{Api1.data.users}}\"); // Check server sided pagination\n\n    cy.CheckWidgetProperties(commonlocators.serverSidePaginationCheckbox); // Open property pane of Text1\n\n    cy.SearchEntityandOpen(\"Text1\"); // Change the text value to selected url\n\n    cy.testJsontext(\"text\", \"{{Table1.selectedRow.url}}\"); // Open property pane\n\n    cy.SearchEntityandOpen(\"Table1\"); // Copmre the table 1st index with itself\n\n    cy.readTableV2data(\"0\", \"0\").then(tabData => {\n      const tableData = tabData;\n      localStorage.setItem(\"tableDataPage1\", tableData);\n    }); // Validate the table 1st index\n\n    cy.ValidateTableV2Data(\"1\"); // Add new column\n\n    cy.addColumnV2(\"CustomColumn\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_Property_JsonUpdate_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Update table json data and check the column names updated and validate empty value","suites":["Test Create Api and Bind to Table widget V2"],"updatePoint":{"line":36,"column":91,"index":1447},"line":36,"code":"  it(\"3. Update table json data and check the column names updated and validate empty value\", function () {\n    // Open property pane\n    cy.SearchEntityandOpen(\"Table1\"); // Change the table data\n\n    cy.testJsontext(\"tabledata\", JSON.stringify(this.data.TableInputWithNull));\n    cy.wait(\"@updateLayout\"); // Verify the columns are visible in property pane\n\n    cy.tableV2ColumnDataValidation(\"id\");\n    cy.tableV2ColumnDataValidation(\"email\");\n    cy.tableV2ColumnDataValidation(\"userName\");\n    cy.tableV2ColumnDataValidation(\"productName\");\n    cy.tableV2ColumnDataValidation(\"orderAmount\");\n    cy.tableV2ColumnDataValidation(\"customColumn1\"); // Hide the columns in the table from property pane\n\n    cy.hideColumn(\"id\");\n    cy.hideColumn(\"email\");\n    cy.hideColumn(\"userName\");\n    cy.hideColumn(\"productName\"); // Verify CustomColumn is visible\n\n    cy.get(\".draggable-header:contains('CustomColumn')\").should(\"be.visible\"); // close property pane\n\n    cy.closePropertyPane(); // Validate the empty values\n\n    cy.readTableV2dataPublish(\"0\", \"0\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_Property_JsonUpdate_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Check Selected Row(s) Resets When Table Data Changes","suites":["Test Create Api and Bind to Table widget V2"],"updatePoint":{"line":64,"column":61,"index":2578},"line":64,"code":"  it(\"4. Check Selected Row(s) Resets When Table Data Changes\", function () {\n    // Select 1st row\n    cy.isSelectRow(1);\n    cy.openPropertyPane(\"tablewidgetv2\"); // Empty first row\n\n    cy.testJsontext(\"tabledata\", \"[]\");\n    cy.wait(\"@updateLayout\");\n    const newTableData = [...this.data.TableInput];\n    newTableData[0].userName = \"\"; // Change table data from empty to some\n\n    cy.testJsontext(\"tabledata\", JSON.stringify(newTableData));\n    cy.wait(\"@updateLayout\");\n    const selectedRowsSelector = `.t--widget-tablewidgetv2 .tbody .tr.selected-row`; // Verify selected row resets on table data changes\n\n    cy.get(selectedRowsSelector).should($p => {\n      // should found 0 rows\n      expect($p).to.have.length(0);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_Property_JsonUpdate_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Verify table column type changes effect on menuButton and iconButton","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":9,"column":77,"index":355},"line":9,"code":"  it(\"1. Verify table column type changes effect on menuButton and iconButton\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.addColumnV2(\"CustomColumn\");\n    cy.editColumn(\"customColumn1\");\n    cy.changeColumnType(\"Menu Button\");\n    cy.wait(400);\n    cy.get(commonlocators.selectedIcon).should(\"have.text\", \"(none)\");\n    cy.getTableV2DataSelector(\"1\", \"5\").then(selector => {\n      cy.get(selector + \" button span.bp3-icon\").should(\"not.exist\");\n    });\n    cy.changeColumnType(\"Icon Button\");\n    cy.wait(400);\n    cy.get(commonlocators.selectedIcon).should(\"have.text\", \"add\");\n    cy.getTableV2DataSelector(\"1\", \"5\").then(selector => {\n      cy.get(selector + \" button span.bp3-icon\").should(\"exist\");\n      cy.get(selector + \" button span.bp3-icon\").should(\"have.attr\", \"icon\").and(\"equal\", \"add\");\n    });\n    cy.changeColumnType(\"Menu Button\");\n    cy.wait(500);\n    cy.get(commonlocators.selectedIcon).should(\"have.text\", \"(none)\");\n    cy.getTableV2DataSelector(\"1\", \"5\").then(selector => {\n      cy.get(selector + \" button span.bp3-icon\").should(\"not.exist\");\n    });\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_PropertyPane_IconName_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Verify default array data","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":23,"column":34,"index":818},"line":23,"code":"  it(\"1. Verify default array data\", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidgetv2\"); // Open Widget side bar\n\n    cy.get(widgetsPage.addWidget).click(); // Drag and drop table widget\n\n    cy.dragAndDropToCanvas(\"tablewidgetv2\", {\n      x: 300,\n      y: 200\n    }); // close Widget side bar\n\n    cy.get(widgetsPage.explorerSwitchId).click({\n      force: true\n    });\n    cy.wait(2000);\n    cy.SearchEntityandOpen(\"Table2\"); // Verify default array data\n\n    cy.get(widgetsPage.tabedataField).should(\"not.be.empty\");\n    cy.deleteWidget(widgetsPage.tableWidgetV2);\n    cy.wait(2000);\n    cy.ClearSearch();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Verify empty columnName in data","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":45,"column":40,"index":1468},"line":45,"code":"  it(\"2. Verify empty columnName in data\", () => {\n    cy.get(widgetsPage.addWidget).click(); // Drag and drop table widget\n\n    cy.dragAndDropToCanvas(\"tablewidgetv2\", {\n      x: 300,\n      y: 200\n    }); // close Widget side bar\n\n    cy.get(widgetsPage.explorerSwitchId).click({\n      force: true\n    });\n    cy.get(widgetsPage.tabedataField).should(\"not.be.empty\");\n    cy.get(`${widgetsPage.tabedataField} .CodeMirror`).first().then(ins => {\n      const input = ins[0].CodeMirror;\n      input.focus();\n      cy.wait(100);\n      input.setValue(JSON.stringify(emptyTableColumnNameData));\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.wait(5000);\n    cy.get(\".t--widget-tablewidgetv2\").should(\"be.visible\");\n    cy.deleteWidget(widgetsPage.tableWidget);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Verify On Row Selected Action","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":68,"column":38,"index":2299},"line":68,"code":"  it(\"3. Verify On Row Selected Action\", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidgetv2\"); // Select show message in the \"on selected row\" dropdown\n\n    cy.onTableAction(0, \"onrowselected\", \"Row is selected\");\n    cy.PublishtheApp(); // Select 1st row\n\n    cy.isSelectRow(2);\n    cy.wait(2000); // Verify Row is selected by showing the message\n\n    cy.get(commonlocators.toastmsg).contains(\"Row is selected\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Check On Page Change Action","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":81,"column":36,"index":2787},"line":81,"code":"  it(\"4. Check On Page Change Action\", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidgetv2\"); // Select show message in the \"on selected row\" dropdown\n\n    cy.onTableAction(1, \"onpagechange\", \"Page Changed\");\n    cy.PublishtheApp();\n    cy.wait(2000); // Change the page\n\n    cy.get(widgetsPage.nextPageButton).click({\n      force: true\n    }); // Verify the page is changed\n\n    cy.get(commonlocators.toastmsg).contains(\"Page Changed\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Verify On Search Text Change Action","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":96,"column":44,"index":3308},"line":96,"code":"  it(\"5. Verify On Search Text Change Action\", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidgetv2\"); // Show Message on Search text change Action\n\n    cy.onTableAction(3, \"onsearchtextchanged\", \"Search Text Changed\");\n    cy.PublishtheApp(); // Change the Search text\n\n    cy.get(widgetsPage.searchField).type(\"Hello\");\n    cy.wait(2000); // Verify the search text is changed\n\n    cy.get(commonlocators.toastmsg).contains(\"Search Text Changed\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Check open section and column data in property pane","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":109,"column":60,"index":3846},"line":109,"code":"  it(\"6. Check open section and column data in property pane\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\"); // Validate the columns are visible in the property pane\n\n    cy.tableV2ColumnDataValidation(\"id\");\n    cy.tableV2ColumnDataValidation(\"email\");\n    cy.tableV2ColumnDataValidation(\"userName\");\n    cy.tableV2ColumnDataValidation(\"productName\");\n    cy.tableV2ColumnDataValidation(\"orderAmount\"); // Updating the column name ; \"id\" > \"TestUpdated\"\n\n    cy.tableV2ColumnPopertyUpdate(\"id\", \"TestUpdated\"); // Add new column in the table with name \"CustomColumn\"\n\n    cy.addColumnV2(\"CustomColumn\");\n    cy.tableV2ColumnDataValidation(\"customColumn1\"); //To be updated later\n    // Hide all other columns\n\n    cy.hideColumn(\"email\");\n    cy.hideColumn(\"userName\");\n    cy.hideColumn(\"productName\");\n    cy.hideColumn(\"orderAmount\"); // Verifying the newly added column\n\n    cy.get(\".draggable-header:contains('CustomColumn')\").should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Column Detail - Edit column name and validate test for computed value based on column type selected","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":131,"column":108,"index":4864},"line":131,"code":"  it(\"7. Column Detail - Edit column name and validate test for computed value based on column type selected\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.wait(1000);\n    cy.makeColumnVisible(\"email\");\n    cy.makeColumnVisible(\"userName\");\n    cy.makeColumnVisible(\"productName\");\n    cy.makeColumnVisible(\"orderAmount\");\n    cy.openPropertyPane(\"tablewidgetv2\"); // Open column detail to be edited by draggable id\n\n    cy.editColumn(\"id\"); // Change the column name\n\n    cy.editColName(\"updatedId\"); // Reading single cell value of the table and verify it's value.\n\n    cy.readTableV2dataPublish(\"1\", \"1\").then(tabData => {\n      const tabValue = tabData;\n      cy.log(tabData);\n      expect(tabData).to.not.equal(\"2736212\"); // Changing the Computed value from \"id\" to \"Email\"\n\n      propPane.UpdatePropertyFieldValue(\"Computed Value\", testdata.currentRowEmail);\n      cy.wait(500); // Reading single cell value of the table and verify it's value.\n\n      cy.readTableV2dataPublish(\"1\", \"0\").then(tabData2 => {\n        cy.log(tabData2);\n        expect(tabData2).to.be.equal(tabValue);\n        cy.log(\"computed value of plain text \" + tabData2);\n      });\n    }); // Changing Column data type from \"Plain text\" to \"Number\"\n\n    cy.changeColumnType(\"Number\");\n    cy.readTableV2dataPublish(\"1\", \"4\").then(tabData => {\n      cy.log(tabData);\n      expect(tabData).to.not.equal(\"lindsay.ferguson@reqres.in\"); // Email to \"orderAmount\"\n\n      propPane.UpdatePropertyFieldValue(\"Computed Value\", testdata.currentRowOrderAmt);\n      cy.wait(500);\n      cy.readTableV2dataPublish(\"1\", \"0\").then(tabData2 => {\n        cy.log(tabData2);\n        expect(tabData2).to.be.equal(tabData);\n        cy.log(\"computed value of number is \" + tabData2);\n      });\n    }); // Changing Column data type from \"Number\" to \"Date\"\n\n    cy.changeColumnType(\"Date\"); // orderAmout to \"Moment Date\"\n\n    propPane.UpdatePropertyFieldValue(\"Computed Value\", testdata.momentDate);\n    cy.wait(500);\n    cy.readTableV2dataPublish(\"1\", \"1\").then(tabData => {\n      expect(tabData).to.not.equal(\"9.99\");\n      cy.log(\"computed value of Date is \" + tabData);\n    }); // Changing Column data type from \"Date\" to \"Image\"\n\n    const imageVal = \"https://images.pexels.com/photos/736230/pexels-photo-736230.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500\";\n    cy.changeColumnType(\"Image\"); // \"Moement \"date\" to \"Image\"\n\n    propPane.UpdatePropertyFieldValue(\"Computed Value\", imageVal);\n    cy.wait(500); // Verifying the href of the image added.\n\n    cy.readTableV2LinkPublish(\"1\", \"0\").then(hrefVal => {\n      expect(hrefVal).to.be.contains(imageVal);\n    }); // Changing Column data type from \"Date\" to \"URl\"\n\n    cy.readTableV2dataPublish(\"1\", \"1\").then(actualEmail => {\n      cy.changeColumnType(\"URL\"); // \"Image\" to \"url\"\n\n      propPane.UpdatePropertyFieldValue(\"Computed Value\", testdata.currentRowEmail);\n      cy.wait(500);\n      cy.readTableV2dataPublish(\"1\", \"0\").then(tabData2 => {\n        expect(tabData2).to.equal(\"lindsay.ferguson@reqres.in\").to.eq(actualEmail);\n        cy.log(\"computed value of URL is \" + tabData2);\n      });\n    }); // change column data type to \"icon button\"\n\n    cy.changeColumnType(\"Icon Button\");\n    cy.wait(400);\n    cy.get(commonlocators.selectedIcon).should(\"have.text\", \"add\");\n    cy.getTableV2DataSelector(\"0\", \"0\").then(selector => {\n      cy.get(selector + \" button.bp3-button [data-icon=add]\").should(\"exist\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. Test to validate text allignment","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":210,"column":41,"index":8249},"line":210,"code":"  it(\"8. Test to validate text allignment\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.get(commonlocators.changeColType).last().click();\n    cy.get(\".t--dropdown-option\").children().contains(\"URL\").click();\n    cy.get(\".t--property-control-visible span.bp3-control-indicator\").click(); // Verifying Center Alignment\n\n    cy.get(widgetsPage.centerAlign).first().click({\n      force: true\n    });\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"justify-content\", \"center\", true); // Verifying Right Alignment\n\n    cy.get(widgetsPage.rightAlign).first().click({\n      force: true\n    });\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"justify-content\", \"flex-end\", true); // Verifying Left Alignment\n\n    cy.get(widgetsPage.leftAlign).first().click({\n      force: true\n    });\n    cy.readTableV2dataValidateCSS(\"0\", \"0\", \"justify-content\", \"flex-start\", true);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"9. Test to validate text format","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":231,"column":37,"index":9124},"line":231,"code":"  it(\"9. Test to validate text format\", function () {\n    // Validate Bold text\n    cy.get(widgetsPage.bold).click({\n      force: true\n    });\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"font-weight\", \"700\"); // Validate Italic text\n\n    cy.get(widgetsPage.italics).click({\n      force: true\n    });\n    cy.readTableV2dataValidateCSS(\"0\", \"0\", \"font-style\", \"italic\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"10. Test to validate vertical allignment","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":243,"column":46,"index":9509},"line":243,"code":"  it(\"10. Test to validate vertical allignment\", function () {\n    // Validate vertical alignemnt of Cell text to TOP\n    cy.get(widgetsPage.verticalTop).click({\n      force: true\n    });\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"align-items\", \"flex-start\", true); // Validate vertical alignemnt of Cell text to Center\n\n    cy.get(widgetsPage.verticalCenter).last().click({\n      force: true\n    });\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"align-items\", \"center\", true); // Validate vertical alignemnt of Cell text to Bottom\n\n    cy.get(widgetsPage.verticalBottom).last().click({\n      force: true\n    });\n    cy.readTableV2dataValidateCSS(\"0\", \"0\", \"align-items\", \"flex-end\", true);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test to validate text color and text background","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":260,"column":53,"index":10214},"line":260,"code":"  it(\"Test to validate text color and text background\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\"); // Changing text color to rgb(126, 34, 206) and validate\n\n    cy.selectColor(\"textcolor\"); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(5000);\n    cy.wait(\"@updateLayout\");\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"color\", \"rgb(126, 34, 206)\"); // Changing text color to PURPLE and validate using JS\n\n    cy.get(widgetsPage.toggleJsColor).click();\n    cy.testCodeMirrorLast(\"purple\");\n    cy.wait(\"@updateLayout\");\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"color\", \"rgb(128, 0, 128)\"); // Changing Cell backgroud color to rgb(126, 34, 206) and validate\n\n    cy.selectColor(\"cellbackground\");\n    cy.readTableV2dataValidateCSS(\"0\", \"0\", \"background\", \"rgb(126, 34, 206) none repeat scroll 0% 0% / auto padding-box border-box\", true); // Changing Cell backgroud color to PURPLE and validate using JS\n\n    cy.get(widgetsPage.toggleJsBcgColor).click();\n    cy.updateCodeInput(\".t--property-control-cellbackground\", \"purple\");\n    cy.wait(\"@updateLayout\");\n    cy.readTableV2dataValidateCSS(\"0\", \"0\", \"background\", \"rgb(128, 0, 128) none repeat scroll 0% 0% / auto padding-box border-box\", true); // close property pane\n\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"12. Verify default search text","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":284,"column":36,"index":11492},"line":284,"code":"  it(\"12. Verify default search text\", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidgetv2\"); // Chage deat search text value to \"data\"\n\n    cy.testJsontext(\"defaultsearchtext\", \"data\");\n    cy.PublishtheApp(); // Verify the deaullt search text\n\n    cy.get(widgetsPage.searchField).should(\"have.value\", \"data\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Table Widget V2 Functionality","suites":["Table Widget V2 Functionality"],"updatePoint":{"line":14,"column":38,"index":488},"line":14,"code":"  it(\"1. Table Widget V2 Functionality\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    /**\n     * @param{Text} Random Text\n     * @param{ChartWidget}Mouseover\n     * @param{ChartPre Css} Assertion\n     */\n\n    cy.widgetText(\"Table1\", widgetsPage.tableWidgetV2, commonlocators.tableV2Inner);\n    cy.testJsontext(\"tabledata\", JSON.stringify(this.data.TableInput));\n    cy.wait(\"@updateLayout\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Table Widget V2 Functionality To Verify The Data","suites":["Table Widget V2 Functionality"],"updatePoint":{"line":26,"column":57,"index":920},"line":26,"code":"  it(\"2. Table Widget V2 Functionality To Verify The Data\", function () {\n    cy.readTableV2dataPublish(\"1\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Lindsay Ferguson\");\n      cy.log(\"the value is\" + tabValue);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Table Widget V2 Functionality To Show a Base64 Image","suites":["Table Widget V2 Functionality"],"updatePoint":{"line":33,"column":61,"index":1199},"line":33,"code":"  it(\"3. Table Widget V2 Functionality To Show a Base64 Image\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.editColumn(\"image\");\n    cy.changeColumnType(\"Image\");\n    cy.isSelectRow(1);\n    const index = 1;\n    const imageVal = this.data.TableInput[index].image;\n    cy.readTableV2LinkPublish(index, \"1\").then(hrefVal => {\n      expect(hrefVal).to.contain(imageVal);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Table Widget V2 Functionality To Check if Table is Sortable","suites":["Table Widget V2 Functionality"],"updatePoint":{"line":44,"column":68,"index":1606},"line":44,"code":"  it(\"4. Table Widget V2 Functionality To Check if Table is Sortable\", function () {\n    cy.get(commonlocators.editPropBackButton).click();\n    cy.openPropertyPane(\"tablewidgetv2\"); // Confirm if isSortable is true\n\n    cy.get(commonlocators.isSortable).should(\"be.checked\"); // Publish App\n\n    cy.PublishtheApp(); // Confirm Current order\n\n    cy.readTableV2dataPublish(\"1\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Lindsay Ferguson\");\n    });\n    cy.readTableV2dataPublish(\"0\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Michael Lawson\");\n    }); // Sort Username Column\n\n    cy.contains('[role=\"columnheader\"]', \"userName\").first().click({\n      force: true\n    });\n    cy.wait(1000); // Confirm order after sort\n\n    cy.readTableV2dataPublish(\"1\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Ryan Holmes\");\n    });\n    cy.readTableV2dataPublish(\"0\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Tobias Funke\");\n    }); // Back to edit page\n\n    cy.get(publish.backToEditor).click({\n      force: true\n    });\n    cy.openPropertyPane(\"tablewidgetv2\"); // Disable isSortable\n    // Confirm if isSortable is false\n\n    cy.togglebarDisable(commonlocators.isSortable); // Publish App\n\n    cy.PublishtheApp(); // Confirm Current order\n\n    cy.readTableV2dataPublish(\"1\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Lindsay Ferguson\");\n    });\n    cy.readTableV2dataPublish(\"0\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Michael Lawson\");\n    }); // Confirm Sort is disable on Username Column\n\n    cy.contains('[role=\"columnheader\"]', \"userName\").first().click({\n      force: true\n    });\n    cy.wait(1000); // Confirm order after sort\n\n    cy.readTableV2dataPublish(\"1\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).not.to.be.equal(\"Ryan Holmes\");\n    });\n    cy.readTableV2dataPublish(\"0\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).not.to.be.equal(\"Tobias Funke\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Table Widget V2 Data validation with Switch ON","suites":["Table Widget V2 and Switch binding Functionality"],"updatePoint":{"line":8,"column":55,"index":296},"line":8,"code":"  it(\"1. Table Widget V2 Data validation with Switch ON\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.readTableV2dataPublish(\"1\", \"1\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"30\");\n      cy.log(\"the value is\" + tabValue);\n    });\n    cy.get(\".t--switch-widget-active .bp3-control-indicator\").click({\n      force: true\n    });\n    cy.wait(5000);\n    cy.readTableV2dataPublish(\"1\", \"1\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"9\");\n      cy.log(\"the value is\" + tabValue);\n    });\n    cy.get(\".t--switch-widget-inactive .bp3-control-indicator\").click({\n      force: true\n    });\n    cy.wait(5000);\n    cy.readTableV2dataPublish(\"1\", \"1\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"30\");\n      cy.log(\"the value is\" + tabValue);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_Switch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Selected row and binding with Text widget","suites":["Table Widget V2 and Switch binding Functionality"],"updatePoint":{"line":34,"column":50,"index":1185},"line":34,"code":"  it(\"2. Selected row and binding with Text widget\", function () {\n    cy.wait(5000);\n    cy.get(\".t--table-multiselect\").eq(1).click({\n      force: true\n    });\n    cy.get(\".t--draggable-textwidget .bp3-ui-text span\").should(\"contain.text\", \"30\");\n    cy.get(\".t--table-multiselect\").eq(0).click({\n      force: true\n    });\n    cy.get(\".t--draggable-textwidget .bp3-ui-text span\").should(\"contain.text\", \"29\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_Switch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Table Widget Functionality To Check with changing schema of tabledata","suites":["Table Widget"],"updatePoint":{"line":8,"column":78,"index":329},"line":8,"code":"  it(\"1. Table Widget Functionality To Check with changing schema of tabledata\", () => {\n    let jsContext = `{{Switch1.isSwitchedOn?[{name: \"joe\"}]:[{employee_name: \"john\"}];}}`;\n    cy.NavigateToHome();\n    cy.get(homePage.createNew).first().click({\n      force: true\n    });\n    cy.wait(\"@createNewApplication\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"switchwidget\", {\n      x: 200,\n      y: 200\n    });\n    cy.dragAndDropToCanvas(\"tablewidgetv2\", {\n      x: 200,\n      y: 300\n    });\n    cy.wait(1000);\n    cy.wait(\"@updateLayout\");\n    cy.get(\".t--property-control-tabledata\").then($el => {\n      cy.updateCodeInput($el, jsContext);\n    });\n    cy.PublishtheApp();\n    cy.wait(30000);\n    cy.getTableV2DataSelector(\"0\", \"0\").then(element => {\n      cy.get(element).should(\"be.visible\");\n    });\n    cy.readTableV2dataPublish(\"0\", \"0\").then(value => {\n      expect(value).to.be.equal(\"joe\");\n    });\n    cy.get(\".t--switch-widget-active\").first().click();\n    cy.wait(1000);\n    cy.getTableV2DataSelector(\"0\", \"0\").then(element => {\n      cy.get(element).should(\"be.visible\");\n    });\n    cy.readTableV2dataPublish(\"0\", \"0\").then(value => {\n      expect(value).to.be.equal(\"john\");\n    });\n    cy.get(\".t--switch-widget-inactive\").first().click();\n    cy.wait(1000);\n    cy.getTableV2DataSelector(\"0\", \"0\").then(element => {\n      cy.get(element).should(\"be.visible\");\n    });\n    cy.readTableV2dataPublish(\"0\", \"0\").then(value => {\n      expect(value).to.be.equal(\"joe\");\n    });\n    cy.get(publish.backToEditor).click().wait(1000);\n    cy.wait(30000);\n    cy.CheckAndUnfoldEntityItem(\"WIDGETS\");\n    cy.actionContextMenuByEntityName(\"Switch1\");\n    cy.actionContextMenuByEntityName(\"Table1\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_tabledata_schema_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Table widget V2 with Add button test and validation","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":13,"column":60,"index":465},"line":13,"code":"  it(\"1. Table widget V2 with Add button test and validation\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\"); // Open column details of \"id\".\n\n    cy.editColumn(\"id\");\n    cy.get(widgetsPage.tablV2Btn).should(\"not.exist\"); // Changing column data type to \"Button\"\n\n    cy.changeColumnType(\"Button\"); // Changing the computed value (data) to \"orderAmount\"\n\n    cy.updateComputedValue(testdata.currentRowOrderAmt); // Selecting button action to show message\n\n    cy.get(widgetsPage.actionSelect).click();\n    cy.get(commonlocators.chooseAction).children().contains(\"Show message\").click();\n    cy.addSuccessMessage(\"Successful \".concat(testdata.currentRowEmail)); // Close Property pane\n\n    cy.get(commonlocators.editPropBackButton).click({\n      force: true\n    }); // Validating the button action by clicking\n\n    cy.get(widgetsPage.tableV2Btn).last().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(3000); // Validating the toast message\n\n    cy.get(widgetsPage.toastAction).should(\"be.visible\");\n    cy.get(widgetsPage.toastActionText).last().invoke(\"text\").then(text => {\n      expect(text).to.equal(\"Successful tobias.funke@reqres.in\");\n    }); // Open column details of \"id\".\n\n    cy.editColumn(\"id\");\n    cy.get(widgetsPage.toggleOnClick).click({\n      force: true\n    });\n    cy.get(\".t--property-control-onclick\").then($el => {\n      cy.updateCodeInput($el, \"{{showAlert('Successful' + currentRow.email).then(() => showAlert('second alert')) }}\");\n    });\n    cy.get(commonlocators.editPropBackButton).click({\n      force: true\n    }); // Validating the button action by clicking\n\n    cy.get(widgetsPage.tableV2Btn).last().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(3000);\n    cy.get(widgetsPage.toastActionText).last().invoke(\"text\").then(text => {\n      expect(text).to.equal(\"second alert\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_Widget_Add_button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Table Button color validation","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":62,"column":38,"index":2391},"line":62,"code":"  it(\"2. Table Button color validation\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\"); // Open column details of \"id\".\n\n    cy.editColumn(\"id\");\n    const color1 = \"rgb(255, 0, 0)\";\n    cy.get(widgetsPage.buttonColor).click({\n      force: true\n    }).clear().type(color1);\n    cy.get(widgetsPage.tableV2Btn).should(\"have.css\", \"background-color\", color1); // Changing the color again to reproduce issue #9526\n\n    const color2 = \"rgb(255, 255, 0)\";\n    cy.get(widgetsPage.buttonColor).click({\n      force: true\n    }).clear() // following wait is required to reproduce #9526\n    .wait(600).type(color2);\n    cy.get(widgetsPage.tableV2Btn).should(\"have.css\", \"background-color\", color2);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_Widget_Add_button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Table widget triggeredRow property should be accessible","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":79,"column":64,"index":3120},"line":79,"code":"  it(\"3. Table widget triggeredRow property should be accessible\", function () {\n    cy.get(commonlocators.TextInside).should(\"have.text\", \"Tobias Funke\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_Widget_Add_button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Table widget triggeredRow property should be same even after sorting the table","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":82,"column":87,"index":3305},"line":82,"code":"  it(\"4. Table widget triggeredRow property should be same even after sorting the table\", function () {\n    //sort table date on second column\n    cy.get(\".draggable-header \").first().click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.get(commonlocators.TextInside).should(\"have.text\", \"Tobias Funke\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_Widget_Add_button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Table widget add new icon button column","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":90,"column":48,"index":3584},"line":90,"code":"  it(\"5. Table widget add new icon button column\", function () {\n    cy.get(\".t--property-pane-back-btn\").click({\n      force: true\n    }); // hide id column\n\n    cy.makeColumnVisible(\"id\");\n    cy.wait(1000); // click on Add new Column.\n    //cy.get(\".t--property-pane-back-btn\").click({ force: true });\n\n    cy.get(\".t--add-column-btn\").click(); //Open New Custom Column\n\n    cy.editColumn(\"customColumn1\"); // Change Column type to icon Button\n\n    cy.changeColumnType(\"Icon Button\"); // Select Icon from Icon Control\n\n    cy.get(\".t--property-control-icon .bp3-icon-caret-down\").click({\n      force: true\n    });\n    cy.get(\".bp3-icon-add\").first().click({\n      force: true\n    });\n    cy.get(\".t--widget-tablewidgetv2 .tbody .bp3-icon-add\").should(\"exist\"); // disabled icon btn\n\n    cy.CheckWidgetProperties(commonlocators.disableCheckbox);\n    cy.getTableV2DataSelector(\"0\", \"4\").then(selector => {\n      cy.get(selector + \" button.bp3-disabled\").should(\"exist\");\n    });\n    cy.UncheckWidgetProperties(commonlocators.disableCheckbox); //Delete Column\n\n    cy.get(\".t--property-pane-back-btn\").click({\n      force: true\n    });\n    cy.deleteColumn(\"customColumn1\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_Widget_Add_button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Table widget add new menu button column","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":124,"column":48,"index":4764},"line":124,"code":"  it(\"6. Table widget add new menu button column\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\"); // click on Add new Column.\n\n    cy.get(\".t--add-column-btn\").click(); //Open New Custom Column\n\n    cy.editColumn(\"customColumn1\"); // Change Column type to icon Button\n\n    cy.changeColumnType(\"Menu Button\"); //Changing the text on the Menu Button\n\n    cy.testJsontext(\"label\", \"Menu button\"); // Select Icon from Icon Control\n\n    cy.get(\".t--property-control-icon .bp3-icon-caret-down\").click({\n      force: true\n    });\n    cy.get(\".bp3-icon-add\").first().click({\n      force: true\n    }); // validate icon\n\n    cy.get(\".t--widget-tablewidgetv2 .tbody .bp3-icon-add\").should(\"exist\");\n    cy.get(\".editable-text-container\").eq(1).click(); // validate label\n\n    cy.contains(\"Menu button\").should(\"exist\"); // const color1 = \"rgb(255, 255, 0)\";\n    // cy.get(widgetsPage.menuColor)\n    //   .clear()\n    //   .click({ force: true })\n    //   .type(color1);\n    // cy.get(widgetsPage.tableV2Btn).should(\"have.css\", \"background-color\", color1);\n    // // Changing the color again to reproduce issue #9526\n    // const color2 = \"rgb(255, 0, 0)\";\n    // cy.get(widgetsPage.menuColor)\n    //   .clear()\n    //   .click({ force: true })\n    //   // following wait is required to reproduce #9526\n    //   .wait(5000)\n    //   .type(color2);\n    // cy.get(widgetsPage.tableV2Btn).should(\"have.css\", \"background-color\", color2);\n    // Add a Menu item 1\n\n    cy.get(\".t--add-menu-item-btn\").click({\n      force: true\n    }); // Edit a Menu item\n\n    cy.get(\".t--property-pane-section-menuitems .t--edit-column-btn\").first().click({\n      force: true\n    }); // update menu item background color\n\n    cy.get(widgetsPage.backgroundcolorPickerNew).type(\"#03b365\", {\n      force: true\n    }).wait(500); //  Add action to the menu Item\n\n    cy.get(widgetsPage.actionSelect).click();\n    cy.get(commonlocators.chooseAction).children().contains(\"Show message\").click();\n    cy.addSuccessMessage(\"Successful \".concat(testdata.currentRowEmail)); // Go back to table property pane\n\n    cy.get(\".t--property-pane-back-btn\").click({\n      force: true\n    }); // Add a Menu item 2\n\n    cy.get(\".t--add-menu-item-btn\").click({\n      force: true\n    }); // Edit a Menu item\n\n    cy.get(\".t--property-pane-section-menuitems .t--edit-column-btn\").last().click({\n      force: true\n    }); // update menu item background color\n\n    cy.get(widgetsPage.backgroundcolorPickerNew).clear().type(\"#FFC13D\", {\n      force: true\n    }).wait(500); // Go back to table property pane\n\n    cy.get(\".t--property-pane-back-btn\").click({\n      force: true\n    }); // Add a Menu item 3\n\n    cy.get(\".t--add-menu-item-btn\").click({\n      force: true\n    }); // Edit a Menu item\n\n    cy.get(\".t--property-pane-section-menuitems .t--edit-column-btn\").last().click({\n      force: true\n    }); // update menu item background color\n\n    cy.get(widgetsPage.backgroundcolorPickerNew).clear().type(\"#3366FF\", {\n      force: true\n    }).wait(500); // Go back to table property pane\n\n    cy.get(\".t--property-pane-back-btn\").click({\n      force: true\n    }); // Close Property pane\n\n    cy.openPropertyPane(\"tablewidgetv2\"); // Click on the Menu Button\n\n    cy.contains(\"Menu button\").click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.closePropertyPane(); // Edit a Menu item\n\n    cy.get(\".t--property-pane-section-menuitems .t--edit-column-btn\").last().click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.get(\".t--property-control-disabled label.bp3-switch.unchecked\").click({\n      force: true\n    }); //cy.closePropertyPane();\n    // Click on the Menu Button\n\n    cy.get(\".t--widget-tablewidgetv2 .bp3-button\").first().click({\n      force: true\n    }); // check Menu Item 3 is disable\n\n    cy.get(\".bp3-menu-item\").eq(2).should(\"have.css\", \"background-color\", \"rgb(250, 250, 250)\");\n    cy.get(\".bp3-menu-item\").eq(2).should(\"have.class\", \"bp3-disabled\"); // Click on the Menu Item\n\n    cy.get(\".bp3-menu-item\").eq(0).click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(3000); // Validating the toast message\n\n    cy.get(widgetsPage.toastAction).should(\"be.visible\");\n    cy.get(widgetsPage.toastActionText).last().invoke(\"text\").then(text => {\n      const someText = text;\n      expect(someText).to.equal(\"Successful tobias.funke@reqres.in\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_Widget_Add_button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Table widget test on button icon click, row should not get deselected","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":250,"column":78,"index":9183},"line":250,"code":"  it(\"7. Table widget test on button icon click, row should not get deselected\", () => {\n    cy.get(widgetsPage.tableV2IconBtn).last().click({\n      force: true\n    });\n    cy.get(commonlocators.TextInside).should(\"have.text\", \"Tobias Funke\"); //click icon button again\n\n    cy.get(widgetsPage.tableV2IconBtn).last().click({\n      force: true\n    });\n    cy.get(commonlocators.TextInside).should(\"have.text\", \"Tobias Funke\");\n    cy.get(\".t--property-pane-back-btn\").click({\n      force: true\n    });\n    cy.wait(500);\n    cy.get(\".t--property-pane-back-btn\").click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_Widget_Add_button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. Table widget test on button when transparent","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":268,"column":53,"index":9758},"line":268,"code":"  it(\"8. Table widget test on button when transparent\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\"); // Open column details of \"id\".\n\n    cy.editColumn(\"id\"); // Changing column \"Button\" color to transparent\n\n    cy.get(widgetsPage.buttonColor).click({\n      force: true\n    });\n    cy.wait(2000);\n    cy.get(widgetsPage.transparent).click({\n      force: true\n    });\n    cy.get(\".td[data-colindex=5][data-rowindex=0] .bp3-button\").should(\"have.css\", \"background-color\", \"rgba(0, 0, 0, 0)\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_Widget_Add_button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Copy paste table widget and valdiate application status","suites":["Test Suite to validate copy/paste table Widget V2"],"updatePoint":{"line":13,"column":64,"index":474},"line":13,"code":"  it(\"1. Copy paste table widget and valdiate application status\", function () {\n    const modifierKey = Cypress.platform === \"darwin\" ? \"meta\" : \"ctrl\";\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.widgetText(\"Table1\", widgetsPage.tableWidgetV2, commonlocators.tableV2Inner);\n    cy.get(\"body\").type(`{${modifierKey}}c`); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500);\n    cy.get(commonlocators.toastBody).first().contains(\"Copied\");\n    cy.get(\"body\").click();\n    cy.get(\"body\").type(`{${modifierKey}}v`, {\n      force: true\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(commonlocators.toastAction).should(\"be.visible\"); //Check after copying new table widget should not have any warnings\n\n    cy.get('.t--widget-propertypane-toggle [name=\"warning\"]').should(\"not.exist\");\n    cy.GlobalSearchEntity(\"Table1Copy\");\n    cy.get(\".widgets\").first().click();\n    cy.get(\".t--entity-name\").contains(\"Table1Copy\").trigger(\"mouseover\");\n    cy.hoverAndClickParticularIndex(1);\n    cy.selectAction(\"Show Bindings\");\n    cy.get(apiwidget.propertyList).then(function ($lis) {\n      expect($lis).to.have.length(16);\n      expect($lis.eq(0)).to.contain(\"{{Table1Copy.selectedRow}}\");\n      expect($lis.eq(1)).to.contain(\"{{Table1Copy.selectedRows}}\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_Widget_Copy_Paste_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Verify default table row Data","suites":["Table Widget V2 property pane deafult feature validation"],"updatePoint":{"line":9,"column":38,"index":307},"line":9,"code":"  it(\"1. Verify default table row Data\", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidgetv2\"); // Open Widget side bar\n\n    cy.get(widgetsPage.addWidget).click(); // Drag and drop table widget\n\n    cy.dragAndDropToCanvas(\"tablewidgetv2\", {\n      x: 200,\n      y: 100\n    }); // close Widget side bar\n\n    cy.get(widgetsPage.explorerSwitchId).click({\n      force: true\n    });\n    cy.wait(2000);\n    cy.SearchEntityandOpen(\"Table2\"); // Verify default array data\n\n    cy.wait(2000);\n    cy.readTableV2dataFromSpecificIndex(\"0\", \"0\", 0).then(tabData => {\n      const tabValue = tabData;\n      cy.log(\"the table is\" + tabValue);\n      cy.get(\".bp3-ui-text span\").eq(1).should(\"have.text\", tabData);\n    });\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.wait(2000);\n    cy.readTableV2dataFromSpecificIndex(\"2\", \"0\", 1).then(tabData => {\n      const tabValue = tabData;\n      cy.log(\"the table is\" + tabValue);\n      cy.get(\".bp3-ui-text span\").eq(0).should(\"have.text\", tabData);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_Widget_Default_Row_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Test to add column","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":9,"column":27,"index":282},"line":9,"code":"  it(\"1. Test to add column\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\"); // Adding new column\n\n    cy.addColumnV2(\"CustomColumn\");\n    cy.tableV2ColumnDataValidation(\"customColumn1\"); //To be updated later\n    // Hiding all other columns in the table from property pane\n\n    cy.hideColumn(\"email\");\n    cy.hideColumn(\"userName\");\n    cy.hideColumn(\"productName\");\n    cy.hideColumn(\"orderAmount\"); // Validating the newly added column\n\n    cy.get(\".draggable-header:contains('CustomColumn')\").should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_Widget_Derived_Column_Computed_value_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Edit column name and validate test for computed value","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":23,"column":62,"index":851},"line":23,"code":"  it(\"2. Edit column name and validate test for computed value\", function () {\n    // Open column detail by draggable id of the column\n    cy.editColumn(\"customColumn1\"); // Validating single cell value\n\n    cy.readTableV2dataPublish(\"1\", \"2\").then(() => {\n      // Chaging the computed value to \"Emails\"\n      cy.updateComputedValueV2(testdata.currentRowWithIdOutside); // Validating single cell value\n\n      cy.readTableV2dataPublish(\"1\", \"1\").then(tabData => {\n        expect(tabData).to.be.equal(\"#lindsay.ferguson@reqres.in\");\n        cy.log(\"computed value of plain text \" + tabData);\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_Widget_Derived_Column_Computed_value_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Table widget v2 new menu button column should not deselect row","suites":["Table Widget v2 property pane feature validation"],"updatePoint":{"line":7,"column":71,"index":262},"line":7,"code":"  it(\"1. Table widget v2 new menu button column should not deselect row\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.get(\".t--widget-textwidget\").should(\"have.text\", \"0\");\n    cy.contains(\"Open Menu\").click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.get(\".t--widget-textwidget\").should(\"have.text\", \"0\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/TableV2_Widget_Selected_row_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. should check that cell is not wrapped when cell wrapping is disabled","suites":["Table Widget text wrapping functionality"],"updatePoint":{"line":9,"column":77,"index":348},"line":9,"code":"  it(\"1. should check that cell is not wrapped when cell wrapping is disabled\", () => {\n    cy.getTableCellHeight(1, 0).then(height => {\n      expect(height).to.equal(\"28px\");\n    }); // Enable cell wrapping and check that height is more than 28px\n\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.editColumn(\"image\");\n    cy.get(\".t--property-control-cellwrapping .bp3-control-indicator\").first().click();\n    cy.getTableCellHeight(1, 0).then(height => {\n      expect(height).to.not.equal(\"28px\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/Text_wrapping_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. should check that other cells in the row is not wrapped when one of the cell is wrapped","suites":["Table Widget text wrapping functionality"],"updatePoint":{"line":21,"column":96,"index":880},"line":21,"code":"  it(\"2. should check that other cells in the row is not wrapped when one of the cell is wrapped\", () => {\n    cy.getTableCellHeight(2, 0).then(height => {\n      expect(height).to.equal(\"28px\");\n    });\n    cy.getTableCellHeight(3, 0).then(height => {\n      expect(height).to.equal(\"28px\");\n    }); // Enable cell wrapping and check that height is more than 28px\n\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.wait(2000);\n    cy.editColumn(\"email\");\n    cy.get(\".t--property-control-cellwrapping .bp3-control-indicator\").first().click();\n    cy.getTableCellHeight(2, 0).then(height => {\n      expect(height).to.not.equal(\"28px\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/Text_wrapping_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. should check that cell wrapping option is only available for plain text, number, date and URL","suites":["Table Widget text wrapping functionality"],"updatePoint":{"line":37,"column":102,"index":1533},"line":37,"code":"  it(\"3. should check that cell wrapping option is only available for plain text, number, date and URL\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.editColumn(\"email\");\n    [{\n      columnType: \"URL\",\n      expected: \"exist\"\n    }, {\n      columnType: \"Plain Text\",\n      expected: \"exist\"\n    }, {\n      columnType: \"Number\",\n      expected: \"exist\"\n    }, {\n      columnType: \"Date\",\n      expected: \"exist\"\n    }, {\n      columnType: \"Image\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Video\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Button\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Menu Button\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Icon Button\",\n      expected: \"not.exist\"\n    }].forEach((data, i) => {\n      cy.get(commonlocators.changeColType).last().click();\n      cy.get(\".t--dropdown-option\").children().contains(data.columnType).click();\n      cy.wait(\"@updateLayout\");\n      cy.get(\".t--property-control-cellwrapping\").should(data.expected);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/Text_wrapping_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. should check that plain text, number, date and URL column is getting wrapped when cell wrapping is enabled","suites":["Table Widget text wrapping functionality"],"updatePoint":{"line":74,"column":115,"index":2593},"line":74,"code":"  it(\"4. should check that plain text, number, date and URL column is getting wrapped when cell wrapping is enabled\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.editColumn(\"id\");\n    [\"URL\", \"Number\", \"Date\", \"Plain Text\"].forEach((data, i) => {\n      cy.get(commonlocators.changeColType).last().click();\n      cy.get(\".t--dropdown-option\").children().contains(data).click();\n      cy.wait(\"@updateLayout\");\n      cy.getTableCellHeight(0, 0).then(height => {\n        expect(height).to.equal(\"28px\");\n      });\n      cy.get(\".t--property-control-cellwrapping .bp3-control-indicator\").first().click();\n      cy.wait(1000);\n      cy.getTableCellHeight(0, 0).then(height => {\n        expect(height).to.not.equal(\"28px\");\n      });\n      cy.get(\".t--property-control-cellwrapping .bp3-control-indicator\").first().click();\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/Text_wrapping_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. should check that pageSize does not change when cell wrapping is enabled","suites":["Table Widget text wrapping functionality"],"updatePoint":{"line":92,"column":81,"index":3404},"line":92,"code":"  it(\"5. should check that pageSize does not change when cell wrapping is enabled\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.editColumn(\"image\");\n    let pageSizeBeforeWrapping;\n    cy.get(\".t--widget-textwidget .bp3-ui-text\").invoke(\"text\").then(value => {\n      pageSizeBeforeWrapping = value;\n    });\n    cy.get(\".t--property-control-cellwrapping .bp3-control-indicator\").first().click();\n    cy.wait(1000);\n    cy.get(\".t--widget-textwidget .bp3-ui-text\").invoke(\"text\").then(value => {\n      expect(pageSizeBeforeWrapping).to.equal(value);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/TableV2/Text_wrapping_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test to validate parsing link","suites":["Text Widget color/font/alignment Functionality"],"updatePoint":{"line":16,"column":35,"index":511},"line":16,"code":"  it(\"Test to validate parsing link\", function () {\n    // Add link to text widget\n    cy.testCodeMirror(\"https://app.appsmith.com\"); // check if it's parsed as link\n\n    cy.get(commonlocators.headingTextStyle);\n    cy.contains(\"a\", \"https://app.appsmith.com\").should(\"have.attr\", \"href\", \"https://app.appsmith.com\"); // disable parsing as link\n\n    cy.get(\".t--property-control-disablelink .bp3-switch\").click({\n      force: true\n    });\n    cy.wait(\"@updateLayout\"); // check if it's parsed as text\n\n    cy.contains(\"a\", \"https://app.appsmith.com\").should(\"not.exist\");\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Text/Text_new_feature_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Text-TextStyle Heading, Text Name Validation","suites":["Text Widget color/font/alignment Functionality"],"updatePoint":{"line":31,"column":50,"index":1132},"line":31,"code":"  it(\"Text-TextStyle Heading, Text Name Validation\", function () {\n    //changing the Text Name and verifying\n    cy.widgetText(this.data.TextName, widgetsPage.textWidget, widgetsPage.textWidget + \" \" + commonlocators.widgetNameTag); //Changing the text label\n\n    cy.testCodeMirror(this.data.TextLabelValueScrollable);\n    cy.ChangeTextStyle(this.data.TextHeading, commonlocators.headingTextStyle, this.data.TextLabelValueScrollable);\n    cy.wait(\"@updateLayout\");\n    cy.PublishtheApp();\n    cy.get(commonlocators.headingTextStyle).should(\"have.text\", this.data.TextLabelValueScrollable).should(\"have.css\", \"font-size\", \"16px\");\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Text/Text_new_feature_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test to validate text format","suites":["Text Widget color/font/alignment Functionality"],"updatePoint":{"line":44,"column":34,"index":1824},"line":44,"code":"  it(\"Test to validate text format\", function () {\n    //Changing the Text Style's and validating\n    cy.get(widgetsPage.italics).click({\n      force: true\n    });\n    cy.readTextDataValidateCSS(\"font-style\", \"italic\");\n    cy.get(widgetsPage.bold).click({\n      force: true\n    });\n    cy.readTextDataValidateCSS(\"font-weight\", \"400\");\n    cy.get(widgetsPage.bold).click({\n      force: true\n    });\n    cy.readTextDataValidateCSS(\"font-weight\", \"700\");\n    cy.get(widgetsPage.italics).click({\n      force: true\n    });\n    cy.readTextDataValidateCSS(\"font-style\", \"normal\");\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Text/Text_new_feature_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test to validate color changes in text and background","suites":["Text Widget color/font/alignment Functionality"],"updatePoint":{"line":64,"column":59,"index":2459},"line":64,"code":"  it(\"Test to validate color changes in text and background\", function () {\n    //Changing the Text Style's and validating\n    cy.get(widgetsPage.textColor).first().click({\n      force: true\n    });\n    cy.selectColor(\"textcolor\"); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500);\n    cy.wait(\"@updateLayout\");\n    cy.readTextDataValidateCSS(\"color\", \"rgb(126, 34, 206)\");\n    cy.get(widgetsPage.textColor).clear({\n      force: true\n    }).type(\"purple\", {\n      force: true\n    });\n    cy.wait(\"@updateLayout\");\n    cy.readTextDataValidateCSS(\"color\", \"rgb(128, 0, 128)\"); //Checks the cell background with color picker\n\n    cy.get(`${widgetsPage.cellBackground} input`).first().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500);\n    cy.selectColor(\"cellbackgroundcolor\"); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500);\n    cy.wait(\"@updateLayout\");\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.css\", \"background-color\", \"rgb(126, 34, 206)\"); //Toggle JS check with cell background:\n\n    cy.get(widgetsPage.cellBackgroundToggle).click({\n      force: true\n    });\n    cy.updateCodeInput(widgetsPage.cellBackground, \"purple\");\n    cy.wait(\"@updateLayout\");\n    cy.readTextDataValidateCSS(\"color\", \"rgb(128, 0, 128)\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Text/Text_new_feature_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test to validate text alignment","suites":["Text Widget color/font/alignment Functionality"],"updatePoint":{"line":100,"column":37,"index":3802},"line":100,"code":"  it(\"Test to validate text alignment\", function () {\n    cy.get(widgetsPage.centerAlign).first().click({\n      force: true\n    });\n    cy.readTextDataValidateCSS(\"text-align\", \"center\");\n    cy.get(widgetsPage.rightAlign).first().click({\n      force: true\n    });\n    cy.readTextDataValidateCSS(\"text-align\", \"right\");\n    cy.get(widgetsPage.leftAlign).first().click({\n      force: true\n    });\n    cy.readTextDataValidateCSS(\"text-align\", \"left\");\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Text/Text_new_feature_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test to validate enable scroll feature","suites":["Text Widget color/font/alignment Functionality"],"updatePoint":{"line":115,"column":44,"index":4293},"line":115,"code":"  it(\"Test to validate enable scroll feature\", function () {\n    cy.selectDropdownValue(commonlocators.textOverflowDropdown, \"Scroll contents\");\n    cy.get(commonlocators.textOverflowDropdown).last().should(\"have.text\", \"Scroll contents\");\n    cy.wait(\"@updateLayout\");\n    cy.get(commonlocators.headingTextStyle).trigger(\"mouseover\", {\n      force: true\n    });\n    cy.get(commonlocators.headingTextStyle).scrollIntoView({\n      duration: 2000\n    });\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Text/Text_new_feature_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test border width, color and verity","suites":["Text Widget color/font/alignment Functionality"],"updatePoint":{"line":127,"column":41,"index":4777},"line":127,"code":"  it(\"Test border width, color and verity\", function () {\n    cy.testJsontext(\"borderwidth\", \"10\");\n    cy.wait(\"@updateLayout\");\n    cy.get(`${widgetsPage.textWidget} .t--text-widget-container`).should(\"have.css\", \"border-width\", \"10px\");\n    cy.selectColor(\"bordercolor\");\n    cy.readTextDataValidateCSS(\"border-color\", \"rgb(228, 228, 231)\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Text/Text_new_feature_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Text-TextStyle Heading, Text Name Validation","suites":["Text Widget Functionality"],"updatePoint":{"line":16,"column":50,"index":514},"line":16,"code":"  it(\"Text-TextStyle Heading, Text Name Validation\", function () {\n    //changing the Text Name and verifying\n    cy.widgetText(this.data.TextName, widgetsPage.textWidget, widgetsPage.textWidget + \" \" + commonlocators.widgetNameTag); //Changing the text label\n\n    cy.testCodeMirror(this.data.TextLabelValue);\n    cy.ChangeTextStyle(this.data.TextHeading, commonlocators.headingTextStyle, this.data.TextLabelValue);\n    cy.wait(\"@updateLayout\");\n    cy.PublishtheApp();\n    cy.get(commonlocators.headingTextStyle).should(\"have.text\", this.data.TextLabelValue).should(\"have.css\", \"font-size\", \"16px\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Text/Text_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Text Email Parsing Validation","suites":["Text Widget Functionality"],"updatePoint":{"line":26,"column":35,"index":1106},"line":26,"code":"  it(\"Text Email Parsing Validation\", function () {\n    cy.testCodeMirror(\"ab.end@domain.com\");\n    cy.wait(\"@updateLayout\");\n    cy.PublishtheApp();\n    cy.get(commonlocators.headingTextStyle + \" a\").should(\"have.attr\", \"href\", \"mailto:ab.end@domain.com\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Text/Text_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Text-TextStyle Label Validation","suites":["Text Widget Functionality"],"updatePoint":{"line":32,"column":37,"index":1372},"line":32,"code":"  it(\"Text-TextStyle Label Validation\", function () {\n    cy.testCodeMirror(this.data.TextLabelValue); //Changing the Text Style's and validating\n\n    cy.ChangeTextStyle(this.data.TextLabel, commonlocators.labelTextStyle, this.data.TextLabelValue);\n    cy.PublishtheApp();\n    cy.get(commonlocators.labelTextStyle).should(\"have.text\", this.data.TextLabelValue).should(\"have.css\", \"font-size\", \"14px\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Text/Text_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Text-TextStyle Body Validation","suites":["Text Widget Functionality"],"updatePoint":{"line":39,"column":36,"index":1779},"line":39,"code":"  it(\"Text-TextStyle Body Validation\", function () {\n    cy.ChangeTextStyle(this.data.TextBody, commonlocators.bodyTextStyle, this.data.TextLabelValue);\n    cy.PublishtheApp();\n    cy.get(commonlocators.bodyTextStyle).should(\"have.text\", this.data.TextLabelValue).should(\"have.css\", \"font-size\", \"20px\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Text/Text_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Text widget depends on itself","suites":["Text Widget Functionality"],"updatePoint":{"line":44,"column":35,"index":2089},"line":44,"code":"  it(\"Text widget depends on itself\", function () {\n    cy.testJsontext(\"text\", `{{${this.data.TextName}}}`);\n    cy.get(commonlocators.toastBody).first().contains(\"Cyclic\");\n    cy.PublishtheApp();\n    cy.get(commonlocators.bodyTextStyle).should(\"have.text\", `{{${this.data.TextName}}}`);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Text/Text_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check default overflow property is No overflow","suites":["Text Widget Truncate Functionality"],"updatePoint":{"line":9,"column":52,"index":302},"line":9,"code":"  it(\"Check default overflow property is No overflow\", function () {\n    cy.openPropertyPane(\"textwidget\");\n    cy.get(commonlocators.textOverflowDropdown).last().should(\"have.text\", \"No overflow\");\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Text/Text_truncate_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate long text is not truncating in default","suites":["Text Widget Truncate Functionality"],"updatePoint":{"line":14,"column":53,"index":536},"line":14,"code":"  it(\"Validate long text is not truncating in default\", function () {\n    cy.get(`.appsmith_widget_${dsl.dsl.children[0].widgetId} .t--draggable-textwidget`).click({\n      force: true\n    });\n    cy.testJsontext(\"text\", \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\");\n    cy.get(`.appsmith_widget_${dsl.dsl.children[0].widgetId} .t--widget-textwidget-truncate`).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Text/Text_truncate_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Enable Truncate Text option and Validate","suites":["Text Widget Truncate Functionality"],"updatePoint":{"line":21,"column":46,"index":1449},"line":21,"code":"  it(\"Enable Truncate Text option and Validate\", function () {\n    cy.selectDropdownValue(commonlocators.textOverflowDropdown, \"Truncate text\");\n    cy.get(commonlocators.textOverflowDropdown).last().should(\"have.text\", \"Truncate text\");\n    cy.wait(\"@updateLayout\");\n    cy.get(`.appsmith_widget_${dsl.dsl.children[0].widgetId} .t--widget-textwidget-truncate`).should(\"exist\");\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Text/Text_truncate_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Open modal on click and Validate","suites":["Text Widget Truncate Functionality"],"updatePoint":{"line":28,"column":38,"index":1854},"line":28,"code":"  it(\"Open modal on click and Validate\", function () {\n    cy.get(`.appsmith_widget_${dsl.dsl.children[0].widgetId} .t--widget-textwidget-truncate`).click();\n    cy.get(\".t--widget-textwidget-truncate-modal\").should(\"exist\"); // close modal\n\n    cy.get(\".t--widget-textwidget-truncate-modal span[name='cross']\").click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Text/Text_truncate_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Add Long Text to large text box and validate","suites":["Text Widget Truncate Functionality"],"updatePoint":{"line":36,"column":50,"index":2218},"line":36,"code":"  it(\"Add Long Text to large text box and validate\", function () {\n    cy.get(`.appsmith_widget_${dsl.dsl.children[1].widgetId} .t--draggable-textwidget`).click({\n      force: true\n    });\n    cy.wait(200);\n    cy.testJsontext(\"text\", \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\");\n    cy.get(`.appsmith_widget_${dsl.dsl.children[1].widgetId} .t--widget-textwidget-truncate`).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Text/Text_truncate_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Change the cell background color","suites":["Text Widget Cell Background and Text Size Validation"],"updatePoint":{"line":11,"column":38,"index":379},"line":11,"code":"  it(\"Change the cell background color\", function () {\n    cy.openPropertyPane(\"textwidget\");\n    /**\n     * @param{Text} Random Text\n     * @param{CheckboxWidget}Mouseover\n     * @param{CheckboxPre Css} Assertion\n     */\n    //Check if the cell background is #03b365\n\n    cy.selectColor(\"cellbackgroundcolor\");\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.css\", \"background-color\", \"rgb(126, 34, 206)\"); //Toggle to JS mode\n\n    cy.get(widgetsPage.cellBackgroundToggle).click().wait(200); //Check if the typed color red is reflecting in the background color and in the evaluated value\n\n    cy.updateCodeInput(widgetsPage.cellBackground, \"red\");\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.css\", \"background-color\", \"rgb(255, 0, 0)\");\n    cy.EvaluateCurrentValue(\"red\"); //Check if the typed color #03b365 is reflecting in the background color and in the evaluated value\n\n    cy.updateCodeInput(widgetsPage.cellBackground, \"#03b365\");\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.css\", \"background-color\", \"rgb(3, 179, 101)\");\n    cy.EvaluateCurrentValue(\"#03b365\"); //Check if the typed color transparent is reflecting in the background color and in the evaluated value\n\n    cy.updateCodeInput(widgetsPage.cellBackground, \"\");\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.css\", \"background-color\", \"rgba(0, 0, 0, 0)\");\n    cy.get(commonlocators.evaluatedCurrentValue).first().should(\"not.be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Text/TextWidget_BgColor_TextSize_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Change the text sizes","suites":["Text Widget Cell Background and Text Size Validation"],"updatePoint":{"line":37,"column":27,"index":1862},"line":37,"code":"  it(\"Change the text sizes\", function () {\n    cy.openPropertyPane(\"textwidget\"); //Check the label text size with dropdown\n\n    cy.get(widgetsPage.textSize).last().click({\n      force: true\n    });\n    cy.wait(100);\n    cy.selectTextSize(\"S\");\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.css\", \"font-size\", \"14px\"); //Toggle JS mode\n\n    cy.get(widgetsPage.toggleTextSize).click().wait(200); //Check if the typed size HEADING2 is reflecting in the background color and in the evaluated value\n\n    cy.updateCodeInput(\".t--property-control-textsize\", \"18px\");\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.css\", \"font-size\", \"18px\"); //Check for if the text size changes to default size when set to blank in JS mode:\n\n    cy.updateCodeInput(\".t--property-control-textsize\", \"\");\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.css\", \"font-size\", \"16px\");\n    cy.get(commonlocators.evaluatedCurrentValue).first().should(\"not.be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Text/TextWidget_BgColor_TextSize_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Linting Error validation on mouseover and errorlog tab","suites":["Linting warning validation with text widget"],"updatePoint":{"line":9,"column":60,"index":325},"line":9,"code":"  it(\"Linting Error validation on mouseover and errorlog tab\", function () {\n    cy.openPropertyPane(\"textwidget\");\n    /**\n     * @param{Text} Random Text\n     * @param{CheckboxWidget}Mouseover\n     * @param{CheckboxPre Css} Assertion\n     */\n    //Mouse hover to exact warning message\n\n    cy.get(commonlocators.labelSectionTxt).first().click({\n      force: true\n    }).wait(500); //lint mark validation\n\n    cy.get(commonlocators.lintError).first().should(\"be.visible\");\n    cy.get(commonlocators.lintError).last().should(\"be.visible\");\n    cy.get(commonlocators.lintError).first().trigger(\"mouseover\", {\n      force: true\n    }).wait(500); //lint warning message\n\n    cy.get(commonlocators.lintErrorMsg).should(\"be.visible\").contains(\"'Nodata' is not defined.\");\n    cy.get(commonlocators.lintError).last().trigger(\"mouseover\", {\n      force: true\n    }).wait(500); //lint warning message\n\n    cy.get(commonlocators.lintErrorMsg).last().should(\"be.visible\").contains(\"'lintErrror' is not defined.\");\n    cy.get(commonlocators.debugger).should(\"be.visible\").click({\n      force: true\n    });\n    cy.get(commonlocators.errorTab).should(\"be.visible\").click({\n      force: true\n    });\n    cy.get(commonlocators.debugErrorMsg).eq(0).contains(\"ReferenceError: error is not defined\");\n    cy.get(commonlocators.debugErrorMsg).eq(1).contains(\"ReferenceError: lintErrror is not defined\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Text/TextWidget_LintErrorValidation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should reduce canvas height when a widget is deleted","suites":["reduce long canvas height on widget operation"],"updatePoint":{"line":7,"column":58,"index":237},"line":7,"code":"  it(\"should reduce canvas height when a widget is deleted\", () => {\n    //select a widget\n    cy.wait(2000);\n    cy.get(`#${dsl.dsl.children[1].widgetId}`).click({\n      ctrlKey: true\n    });\n    cy.get(`div[data-testid='t--selected']`).should(\"have.length\", 1);\n    cy.document().then(doc => {\n      const element = doc.querySelector(\"#div-selection-0\");\n      const initialHeight = element.getBoundingClientRect().height; //delete widget\n\n      cy.get(\"body\").type(`{del}`); //canvas height should be lesser now\n\n      cy.wait(1000).then(() => {\n        expect(element.getBoundingClientRect().height).to.be.lessThan(initialHeight);\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/WidgetCanvas_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"when non Layout widget is selected, it should place below the widget selected","suites":["Widget Copy paste"],"updatePoint":{"line":16,"column":83,"index":599},"line":16,"code":"  it(\"when non Layout widget is selected, it should place below the widget selected\", function () {\n    // Selection\n    cy.get(`#${dsl.dsl.children[1].widgetId}`).click({\n      ctrlKey: true\n    });\n    cy.get(`div[data-testid='t--selected']`).should(\"have.length\", 1); //copy\n\n    cy.get(\"body\").type(`{${modifierKey}}{c}`);\n    cy.get(commonLocators.toastmsg).contains(\"Copied\"); //paste\n\n    cy.get(\"body\").type(`{${modifierKey}}{v}`);\n    cy.get(widgetsPage.chartWidget).should(\"have.length\", 2); // verify the position\n\n    cy.get(widgetsPage.chartWidget).eq(0).then(element => {\n      const elementTop = parseFloat(element.css(\"top\"));\n      const elementHeight = parseFloat(element.css(\"height\"));\n      const pastedWidgetTop = (elementTop + elementHeight + 10).toString() + \"px\";\n      cy.get(widgetsPage.chartWidget).eq(1).invoke(\"attr\", \"style\").should(\"contain\", `left: ${element.css(\"left\")}`).should(\"contain\", `top: ${pastedWidgetTop}`);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/WidgetCopyPaste_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"when Layout widget is selected, it should place it inside the layout widget","suites":["Widget Copy paste"],"updatePoint":{"line":36,"column":81,"index":1564},"line":36,"code":"  it(\"when Layout widget is selected, it should place it inside the layout widget\", function () {\n    cy.get(`#div-selection-0`).click({\n      force: true\n    }); // Selection\n\n    cy.get(`#${dsl.dsl.children[0].widgetId}`).click({\n      ctrlKey: true\n    });\n    cy.get(`div[data-testid='t--selected']`).should(\"have.length\", 1); //paste\n\n    cy.get(\"body\").type(`{${modifierKey}}{v}`);\n    cy.get(`#${dsl.dsl.children[0].widgetId}`).find(widgetsPage.chartWidget).should(\"have.length\", 1);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/WidgetCopyPaste_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"when widget inside the layout widget is selected, then it should paste inside the layout widget below the selected widget","suites":["Widget Copy paste"],"updatePoint":{"line":49,"column":127,"index":2107},"line":49,"code":"  it(\"when widget inside the layout widget is selected, then it should paste inside the layout widget below the selected widget\", function () {\n    cy.get(`#div-selection-0`).click({\n      force: true\n    }); // Selection\n\n    cy.get(`#${dsl.dsl.children[0].widgetId}`).find(widgetsPage.chartWidget).click({\n      ctrlKey: true\n    });\n    cy.get(`div[data-testid='t--selected']`).should(\"have.length\", 1); //paste\n\n    cy.get(\"body\").type(`{${modifierKey}}{v}`);\n    cy.get(`#${dsl.dsl.children[0].widgetId}`).find(widgetsPage.chartWidget).should(\"have.length\", 2);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/WidgetCopyPaste_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"when modal is open, it should paste inside the modal","suites":["Widget Copy paste"],"updatePoint":{"line":62,"column":58,"index":2611},"line":62,"code":"  it(\"when modal is open, it should paste inside the modal\", () => {\n    //add modal widget\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"modalwidget\", {\n      x: 300,\n      y: 700\n    });\n    cy.get(\".t--modal-widget\").should(\"exist\"); //paste\n\n    cy.get(\"body\").type(`{${modifierKey}}{v}`);\n    cy.get(\".t--modal-widget\").find(widgetsPage.chartWidget).should(\"have.length\", 1);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/WidgetCopyPaste_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"when widget Inside a modal is selected, it should paste inside the modal","suites":["Widget Copy paste"],"updatePoint":{"line":74,"column":78,"index":3040},"line":74,"code":"  it(\"when widget Inside a modal is selected, it should paste inside the modal\", () => {\n    //verify modal and selected widget\n    cy.get(\".t--modal-widget\").should(\"exist\");\n    cy.get(\".t--modal-widget\").find(`div[data-testid='t--selected']`).should(\"have.length\", 1); //paste\n\n    cy.get(\"body\").type(`{${modifierKey}}{v}`);\n    cy.get(\".t--modal-widget\").find(widgetsPage.chartWidget).should(\"have.length\", 2);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/WidgetCopyPaste_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should not be able to paste list widget inside another list widget","suites":["Widget Copy paste"],"updatePoint":{"line":82,"column":72,"index":3456},"line":82,"code":"  it(\"should not be able to paste list widget inside another list widget\", function () {\n    //clean up\n    cy.get(`#div-selection-0`).click({\n      force: true\n    });\n    cy.get(\"body\").type(`{${modifierKey}}{a}`);\n    cy.get(\"body\").type(\"{del}\"); //add list widget\n\n    cy.dragAndDropToCanvas(\"listwidget\", {\n      x: 300,\n      y: 700\n    });\n    cy.get(`div[data-testid='t--selected']`).should(\"have.length\", 1); //copy\n\n    cy.get(\"body\").type(`{${modifierKey}}{c}`); //paste\n\n    cy.get(\"body\").type(`{${modifierKey}}{v}`);\n    cy.get(widgetsPage.listWidget).should(\"have.length\", 2);\n    cy.get(widgetsPage.listWidget).eq(0).find(widgetsPage.listWidget).should(\"have.length\", 0);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/WidgetCopyPaste_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should not be able to paste list widget inside another list widget, when widget inside the list widget are selected","suites":["Widget Copy paste"],"updatePoint":{"line":102,"column":121,"index":4200},"line":102,"code":"  it(\"should not be able to paste list widget inside another list widget, when widget inside the list widget are selected\", function () {\n    cy.get(`#div-selection-0`).click({\n      force: true\n    }); // Select widget inside the list widget\n\n    cy.get(widgetsPage.listWidget).eq(0).find(\".positioned-widget\").eq(0).click({\n      ctrlKey: true\n    }); //paste\n\n    cy.get(\"body\").type(`{${modifierKey}}{v}`);\n    cy.get(widgetsPage.listWidget).should(\"have.length\", 3);\n    cy.get(widgetsPage.listWidget).eq(0).find(widgetsPage.listWidget).should(\"have.length\", 0);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/WidgetCopyPaste_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should be able to paste widget on the initial generate Page","suites":["Widget Copy paste"],"updatePoint":{"line":115,"column":65,"index":4718},"line":115,"code":"  it(\"should be able to paste widget on the initial generate Page\", function () {\n    cy.Createpage(\"NewPage\", false); //verify that it is in generate page\n\n    cy.get(generatePage.buildFromScratchActionCard).should(\"have.length\", 1); //paste\n\n    cy.get(\"body\").type(`{${modifierKey}}{v}`); //verify a pasted list widget\n\n    cy.get(widgetsPage.listWidget).should(\"have.length\", 1);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/WidgetCopyPaste_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Select widgets using cmd + click and group using cmd + G","suites":["Widget Grouping"],"updatePoint":{"line":7,"column":62,"index":215},"line":7,"code":"  it(\"Select widgets using cmd + click and group using cmd + G\", function () {\n    // Selection\n    cy.get(`#${dsl.dsl.children[2].widgetId}`).click({\n      ctrlKey: true\n    });\n    cy.get(`#${dsl.dsl.children[3].widgetId}`).click({\n      ctrlKey: true\n    });\n    cy.get(`div[data-testid='t--selected']`).should(\"have.length\", 2);\n    cy.get(`.t--multi-selection-box`).should(\"have.length\", 1);\n    const isMac = Cypress.platform === \"darwin\"; // Grouping\n\n    if (isMac) {\n      cy.get(\"body\").type(\"{cmd}{g}\");\n    } else {\n      cy.get(\"body\").type(\"{ctrl}{g}\");\n    }\n\n    cy.wait(2000);\n    cy.get(`div[data-testid='t--selected']`).should(\"have.length\", 1).as(\"group\");\n    cy.get(\"body\").click();\n    cy.get(`@group`).find(`[data-testid=\"test-widget\"]`).should(\"have.length\", 2);\n    cy.get(`@group`).find(`.t--draggable-buttonwidget`);\n    cy.get(`@group`).find(`.t--draggable-imagewidget`); // verify the position so that the camera widget is still below the newly grouped container\n\n    cy.get(`.t--widget-containerwidget`).eq(1).then(element => {\n      const elementTop = parseFloat(element.css(\"top\"));\n      const elementHeight = parseFloat(element.css(\"height\"));\n      const containerBottom = (elementTop + elementHeight).toString() + \"px\";\n      cy.get(`.t--widget-camerawidget`).invoke(\"attr\", \"style\").should(\"contain\", `top: ${containerBottom}`);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/WidgetGrouping_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"CheckboxGroupWidget label properties: Text, Position, Alignment, Width","suites":["Label feature"],"updatePoint":{"line":7,"column":76,"index":247},"line":7,"code":"  it(\"CheckboxGroupWidget label properties: Text, Position, Alignment, Width\", () => {\n    const options = {\n      widgetName: \"checkboxgroupwidget\",\n      parentColumnSpace: 11.9375,\n      containerSelector: \"[data-testid='checkboxgroup-container']\",\n      isCompact: false,\n      labelText: \"Name\",\n      labelWidth: 4\n    };\n    cy.checkLabelForWidget(options);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Widgets_Labels_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"CurrencyInputWidget label properties: Text, Position, Alignment, Width","suites":["Label feature"],"updatePoint":{"line":18,"column":76,"index":618},"line":18,"code":"  it(\"CurrencyInputWidget label properties: Text, Position, Alignment, Width\", () => {\n    const options = {\n      widgetName: \"currencyinputwidget\",\n      parentColumnSpace: 11.9375,\n      containerSelector: \"[data-testid='input-container']\",\n      isCompact: true,\n      labelText: \"Name\",\n      labelWidth: 4\n    };\n    cy.checkLabelForWidget(options);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Widgets_Labels_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"DatePickerWidget2 label properties: Text, Position, Alignment, Width","suites":["Label feature"],"updatePoint":{"line":29,"column":74,"index":978},"line":29,"code":"  it(\"DatePickerWidget2 label properties: Text, Position, Alignment, Width\", () => {\n    const options = {\n      widgetName: \"datepickerwidget2\",\n      parentColumnSpace: 11.9375,\n      containerSelector: \"[data-testid='datepicker-container']\",\n      isCompact: true,\n      labelText: \"Name\",\n      labelWidth: 4\n    };\n    cy.checkLabelForWidget(options);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Widgets_Labels_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"InputWidgetV2 label properties: Text, Position, Alignment, Width","suites":["Label feature"],"updatePoint":{"line":40,"column":70,"index":1337},"line":40,"code":"  it(\"InputWidgetV2 label properties: Text, Position, Alignment, Width\", () => {\n    const options = {\n      widgetName: \"inputwidgetv2\",\n      parentColumnSpace: 11.9375,\n      containerSelector: \"[data-testid='input-container']\",\n      isCompact: true,\n      labelText: \"Name\",\n      labelWidth: 4\n    };\n    cy.checkLabelForWidget(options);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Widgets_Labels_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"MultiSelectTreeWidget label properties: Text, Position, Alignment, Width","suites":["Label feature"],"updatePoint":{"line":51,"column":78,"index":1695},"line":51,"code":"  it(\"MultiSelectTreeWidget label properties: Text, Position, Alignment, Width\", () => {\n    const options = {\n      widgetName: \"multiselecttreewidget\",\n      parentColumnSpace: 11.9375,\n      containerSelector: \"[data-testid='multitreeselect-container']\",\n      isCompact: true,\n      labelText: \"Name\",\n      labelWidth: 4\n    };\n    cy.checkLabelForWidget(options);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Widgets_Labels_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"MultiSelectWidgetV2 label properties: Text, Position, Alignment, Width","suites":["Label feature"],"updatePoint":{"line":62,"column":76,"index":2069},"line":62,"code":"  it(\"MultiSelectWidgetV2 label properties: Text, Position, Alignment, Width\", () => {\n    const options = {\n      widgetName: \"multiselectwidgetv2\",\n      parentColumnSpace: 11.9375,\n      containerSelector: \"[data-testid='multiselect-container']\",\n      isCompact: true,\n      labelText: \"Name\",\n      labelWidth: 4\n    };\n    cy.checkLabelForWidget(options);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Widgets_Labels_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"PhoneInputWidget label properties: Text, Position, Alignment, Width","suites":["Label feature"],"updatePoint":{"line":73,"column":73,"index":2434},"line":73,"code":"  it(\"PhoneInputWidget label properties: Text, Position, Alignment, Width\", () => {\n    const options = {\n      widgetName: \"phoneinputwidget\",\n      parentColumnSpace: 11.9375,\n      containerSelector: \"[data-testid='input-container']\",\n      isCompact: true,\n      labelText: \"Name\",\n      labelWidth: 4\n    };\n    cy.checkLabelForWidget(options);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Widgets_Labels_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"RadioGroupWidget label properties: Text, Position, Alignment, Width","suites":["Label feature"],"updatePoint":{"line":84,"column":73,"index":2790},"line":84,"code":"  it(\"RadioGroupWidget label properties: Text, Position, Alignment, Width\", () => {\n    const options = {\n      widgetName: \"radiogroupwidget\",\n      parentColumnSpace: 11.9375,\n      containerSelector: \"[data-testid='radiogroup-container']\",\n      isCompact: false,\n      labelText: \"Name\",\n      labelWidth: 4\n    };\n    cy.checkLabelForWidget(options);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Widgets_Labels_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"RichTextEditorWidget label properties: Text, Position, Alignment, Width","suites":["Label feature"],"updatePoint":{"line":95,"column":77,"index":3156},"line":95,"code":"  it(\"RichTextEditorWidget label properties: Text, Position, Alignment, Width\", () => {\n    const options = {\n      widgetName: \"richtexteditorwidget\",\n      parentColumnSpace: 11.9375,\n      containerSelector: \"[data-testid='rte-container']\",\n      isCompact: false,\n      labelText: \"Name\",\n      labelWidth: 4\n    };\n    cy.checkLabelForWidget(options);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Widgets_Labels_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"SelectWidget label properties: Text, Position, Alignment, Width","suites":["Label feature"],"updatePoint":{"line":106,"column":69,"index":3511},"line":106,"code":"  it(\"SelectWidget label properties: Text, Position, Alignment, Width\", () => {\n    const options = {\n      widgetName: \"selectwidget\",\n      parentColumnSpace: 11.9375,\n      containerSelector: \"[data-testid='select-container']\",\n      isCompact: true,\n      labelText: \"Name\",\n      labelWidth: 4\n    };\n    cy.checkLabelForWidget(options);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Widgets_Labels_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"SingleSelectTreeWidget label properties: Text, Position, Alignment, Width","suites":["Label feature"],"updatePoint":{"line":117,"column":79,"index":3870},"line":117,"code":"  it(\"SingleSelectTreeWidget label properties: Text, Position, Alignment, Width\", () => {\n    const options = {\n      widgetName: \"singleselecttreewidget\",\n      parentColumnSpace: 11.9375,\n      containerSelector: \"[data-testid='treeselect-container']\",\n      isCompact: true,\n      labelText: \"Name\",\n      labelWidth: 4\n    };\n    cy.checkLabelForWidget(options);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Widgets_Labels_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"SwitchGroupWidget label properties: Text, Position, Alignment, Width","suites":["Label feature"],"updatePoint":{"line":128,"column":74,"index":4238},"line":128,"code":"  it(\"SwitchGroupWidget label properties: Text, Position, Alignment, Width\", () => {\n    const options = {\n      widgetName: \"switchgroupwidget\",\n      parentColumnSpace: 11.9375,\n      containerSelector: \"[data-testid='switchgroup-container']\",\n      isCompact: false,\n      labelText: \"Name\",\n      labelWidth: 4\n    };\n    cy.checkLabelForWidget(options);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/Widgets_Labels_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Multi Select widgets using cmd + click","suites":["Widget Selection"],"updatePoint":{"line":7,"column":47,"index":201},"line":7,"code":"  it(\"1. Multi Select widgets using cmd + click\", function () {\n    cy.get(`#${dsl.dsl.children[0].widgetId}`).click({\n      ctrlKey: true\n    });\n    cy.get(`#${dsl.dsl.children[1].widgetId}`).click({\n      ctrlKey: true\n    });\n    cy.get(`div[data-testid='t--selected']`).should(\"have.length\", 2);\n    cy.get(`#${dsl.dsl.children[2].widgetId}`).click({\n      ctrlKey: true\n    });\n    cy.get(`div[data-testid='t--selected']`).should(\"have.length\", 3);\n    cy.get(`#${dsl.dsl.children[0].widgetId}`).click({\n      ctrlKey: true\n    });\n    cy.get(`div[data-testid='t--selected']`).should(\"have.length\", 2);\n    cy.get(`.t--multi-selection-box`).should(\"have.length\", 1);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/WidgetSelection_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Select widgets using cmd + click and open property pane by clicking on the widget from right side panel","suites":["Widget Selection"],"updatePoint":{"line":25,"column":112,"index":945},"line":25,"code":"  it(\"2. Select widgets using cmd + click and open property pane by clicking on the widget from right side panel\", function () {\n    // Selection\n    cy.get(`#${dsl.dsl.children[0].widgetId}`).click({\n      ctrlKey: true\n    });\n    cy.get(`#${dsl.dsl.children[2].widgetId}`).click({\n      ctrlKey: true\n    });\n    cy.get(`div[data-testid='t--selected']`).should(\"have.length\", 2);\n    cy.get(`.t--multi-selection-box`).should(\"have.length\", 1); //select on one of the widgets from the right side panel\n\n    cy.get(`.t-multi-widget-property-pane`).should(\"have.length\", 1);\n    cy.get(`#${dsl.dsl.children[2].widgetId}`).should(\"have.length\", 1);\n    cy.get(`#${dsl.dsl.children[2].widgetId}`).click({\n      force: true\n    }); //should open property pane\n\n    cy.get(`.t--property-pane-view`).should(\"have.length\", 1);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/WidgetSelection_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Should not select widgets if we hit CTRL + A on other Pages","suites":["Widget Selection"],"updatePoint":{"line":44,"column":68,"index":1728},"line":44,"code":"  it(\"3. Should not select widgets if we hit CTRL + A on other Pages\", function () {\n    // Switch to the Explorer Pane\n    cy.get(\"#switcher--explorer\").click(); // Click to create a New Data Source\n\n    cy.get(\".t--entity-add-btn\").eq(3).click(); // Hit CTRL +A\n\n    cy.get(\"body\").type(\"{ctrl}{a}\"); // Switch to the Canvas\n\n    cy.get(\"#switcher--widgets\").click(); // Widgets should not be selected\n\n    cy.get(\".t--multi-selection-box\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Widgets/WidgetSelection_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"create app within an workspace and delete and re-create another app with same name","suites":["Create workspace and a new app / delete and recreate app"],"updatePoint":{"line":6,"column":88,"index":262},"line":6,"code":"  it(\"create app within an workspace and delete and re-create another app with same name\", function () {\n    cy.NavigateToHome();\n    cy.generateUUID().then(uid => {\n      workspaceId = uid;\n      appid = uid;\n      localStorage.setItem(\"WorkspaceName\", workspaceId);\n      cy.createWorkspace();\n      cy.wait(\"@createWorkspace\").then(interception => {\n        newWorkspaceName = interception.response.body.data.name;\n        cy.renameWorkspace(newWorkspaceName, workspaceId);\n      });\n      cy.CreateAppForWorkspace(workspaceId, appid);\n      cy.DeleteAppByApi();\n      cy.NavigateToHome();\n      cy.CreateAppForWorkspace(workspaceId, appid);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Workspace/CreateAppWithSameNameInWorkspace_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"create app within a new workspace","suites":["Create app same name in different workspace"],"updatePoint":{"line":6,"column":39,"index":200},"line":6,"code":"  it(\"create app within a new workspace\", function () {\n    cy.NavigateToHome();\n    cy.generateUUID().then(uid => {\n      workspaceId = uid;\n      appid = uid;\n      localStorage.setItem(\"WorkspaceName\", workspaceId);\n      cy.createWorkspace(); // stub the response and\n      // find app name\n\n      cy.wait(\"@createWorkspace\").then(interception => {\n        newWorkspaceName = interception.response.body.data.name;\n        cy.renameWorkspace(newWorkspaceName, workspaceId);\n        cy.CreateAppForWorkspace(workspaceId, appid);\n        cy.NavigateToHome();\n        cy.LogOut();\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Workspace/CreateSameAppInDiffWorkspace_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"create app with same name in a different workspace","suites":["Create app same name in different workspace"],"updatePoint":{"line":24,"column":56,"index":822},"line":24,"code":"  it(\"create app with same name in a different workspace\", function () {\n    cy.LoginFromAPI(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.visit(\"/applications\");\n    cy.wait(\"@applications\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    const newWSName = workspaceId + \"1\";\n    cy.createWorkspace();\n    cy.wait(\"@createWorkspace\").then(interception => {\n      console.log(\"createWorkspace response: \", interception);\n      newWorkspaceName = interception.response.body.data.name;\n      cy.renameWorkspace(newWorkspaceName, newWSName);\n      cy.CreateAppForWorkspace(newWSName, appid);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Workspace/CreateSameAppInDiffWorkspace_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should delete the workspace","suites":["Delete workspace test spec"],"updatePoint":{"line":5,"column":33,"index":199},"line":5,"code":"  it(\"should delete the workspace\", function () {\n    cy.visit(\"/applications\");\n    cy.createWorkspace();\n    cy.wait(\"@createWorkspace\").then(interception => {\n      newWorkspaceName = interception.response.body.data.name;\n      cy.visit(\"/applications\");\n      cy.openWorkspaceOptionsPopup(newWorkspaceName);\n      cy.contains(\"Delete Workspace\").click();\n      cy.contains(\"Are you sure\").click();\n      cy.wait(\"@deleteWorkspaceApiCall\").then(httpResponse => {\n        expect(httpResponse.status).to.equal(200);\n      });\n      cy.get(newWorkspaceName).should(\"not.exist\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Workspace/DeleteWorkspace_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should show option to delete workspace for an admin user","suites":["Delete workspace test spec"],"updatePoint":{"line":20,"column":62,"index":821},"line":20,"code":"  it(\"should show option to delete workspace for an admin user\", function () {\n    cy.visit(\"/applications\");\n    cy.wait(2000);\n    cy.createWorkspace();\n    cy.wait(\"@createWorkspace\").then(interception => {\n      newWorkspaceName = interception.response.body.data.name;\n      cy.visit(\"/applications\");\n      cy.openWorkspaceOptionsPopup(newWorkspaceName);\n      cy.contains(\"Delete Workspace\");\n      cy.inviteUserForWorkspace(newWorkspaceName, Cypress.env(\"TESTUSERNAME1\"), homePage.viewerRole);\n      cy.LogOut();\n      cy.LogintoApp(Cypress.env(\"TESTUSERNAME1\"), Cypress.env(\"TESTPASSWORD1\"));\n      cy.visit(\"/applications\");\n      cy.openWorkspaceOptionsPopup(newWorkspaceName);\n      cy.get(homePage.workspaceNamePopoverContent).contains(\"Delete Workspace\").should(\"not.exist\");\n      cy.LogOut();\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Workspace/DeleteWorkspace_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"leave workspace menu is visible validation","suites":["Leave workspace test spec"],"updatePoint":{"line":6,"column":48,"index":235},"line":6,"code":"  it(\"leave workspace menu is visible validation\", function () {\n    cy.visit(\"/applications\");\n    cy.createWorkspace();\n    cy.wait(\"@createWorkspace\").then(interception => {\n      newWorkspaceName = interception.response.body.data.name;\n      newWorkspaceId = interception.response.body.data.name;\n      cy.visit(\"/applications\");\n      cy.openWorkspaceOptionsPopup(newWorkspaceName);\n      cy.contains(\"Leave Workspace\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Workspace/LeaveWorkspaceTest_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Only admin user can not leave workspace validation","suites":["Leave workspace test spec"],"updatePoint":{"line":17,"column":56,"index":683},"line":17,"code":"  it(\"Only admin user can not leave workspace validation\", function () {\n    cy.visit(\"/applications\");\n    cy.createWorkspace();\n    cy.wait(\"@createWorkspace\").then(interception => {\n      newWorkspaceName = interception.response.body.data.name;\n      newWorkspaceId = interception.response.body.data.name;\n      cy.visit(\"/applications\");\n      cy.openWorkspaceOptionsPopup(newWorkspaceName);\n      cy.contains(\"Leave Workspace\").click();\n      cy.contains(\"Are you sure\").click();\n      cy.wait(\"@leaveWorkspaceApiCall\").then(httpResponse => {\n        expect(httpResponse.status).to.equal(400);\n      });\n      cy.contains(newWorkspaceName);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Workspace/LeaveWorkspaceTest_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Non admin users can only access leave workspace popup menu validation","suites":["Leave workspace test spec"],"updatePoint":{"line":33,"column":75,"index":1362},"line":33,"code":"  it(\"Non admin users can only access leave workspace popup menu validation\", function () {\n    cy.visit(\"/applications\");\n    cy.createWorkspace();\n    cy.wait(\"@createWorkspace\").then(interception => {\n      newWorkspaceName = interception.response.body.data.name;\n      newWorkspaceId = interception.response.body.data.name;\n      cy.visit(\"/applications\");\n      cy.inviteUserForWorkspace(newWorkspaceName, Cypress.env(\"TESTUSERNAME1\"), homePage.viewerRole);\n      cy.LogOut();\n      cy.LogintoApp(Cypress.env(\"TESTUSERNAME1\"), Cypress.env(\"TESTPASSWORD1\"));\n      cy.visit(\"/applications\");\n      cy.openWorkspaceOptionsPopup(newWorkspaceName);\n      cy.get(homePage.workspaceNamePopoverContent).find(\"a\").should(\"have.length\", 1).first().contains(\"Leave Workspace\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Workspace/LeaveWorkspaceTest_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Login/create page/delete page/delete app from UI","suites":["Login from UI and check the functionality"],"updatePoint":{"line":7,"column":54,"index":249},"line":7,"code":"  it(\"Login/create page/delete page/delete app from UI\", function () {\n    const appname = localStorage.getItem(\"AppName\");\n    cy.LogintoApp(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.SearchApp(appname);\n    cy.get(\"#loading\").should(\"not.exist\");\n    cy.wait(30000);\n    cy.generateUUID().then(uid => {\n      pageid = uid;\n      cy.Createpage(pageid);\n      cy.get(`.t--entity-name`).contains(pageid).trigger(\"mouseover\");\n      cy.hoverAndClick();\n      cy.get(pages.deletePage).first().click({\n        force: true\n      });\n      cy.get(pages.deletePageConfirm).first().click({\n        force: true\n      });\n      cy.wait(2000);\n    });\n    cy.wait(\"@deletePage\");\n    cy.get(\"@deletePage\").should(\"have.property\", \"status\", 200);\n    cy.DeleteApp(appname);\n    cy.wait(\"@deleteApplication\");\n    cy.get(\"@deleteApplication\").should(\"have.property\", \"status\", 200);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Workspace/LoginFromUIApp_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Login/Logout click Appsmith logo should route to login page","suites":["Login from UI and check the functionality"],"updatePoint":{"line":32,"column":65,"index":1151},"line":32,"code":"  it(\"Login/Logout click Appsmith logo should route to login page\", function () {\n    cy.LogintoApp(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.get(homePage.profileMenu).click();\n    cy.get(homePage.signOutIcon).click(); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500);\n    cy.get(homePage.headerAppSmithLogo).click(); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500);\n    cy.url().should(\"include\", \"user/login\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Workspace/LoginFromUIApp_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create workspace and then share with a user from Application share option within application","suites":["Create new workspace and share with a user"],"updatePoint":{"line":11,"column":101,"index":408},"line":11,"code":"  it(\"1. Create workspace and then share with a user from Application share option within application\", function () {\n    cy.NavigateToHome();\n    cy.generateUUID().then(uid => {\n      workspaceId = uid;\n      appid = uid;\n      localStorage.setItem(\"WorkspaceName\", workspaceId);\n      cy.createWorkspace();\n      cy.wait(\"@createWorkspace\").then(interception => {\n        newWorkspaceName = interception.response.body.data.name;\n        cy.renameWorkspace(newWorkspaceName, workspaceId);\n      });\n      cy.CreateAppForWorkspace(workspaceId, appid);\n      cy.wait(\"@getPagesForCreateApp\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n      cy.get(\"h2\").contains(\"Drag and drop a widget here\");\n      cy.get(homePage.shareApp).click({\n        force: true\n      });\n      cy.shareApp(Cypress.env(\"TESTUSERNAME1\"), homePage.viewerRole);\n    });\n    cy.LogOut();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Workspace/ShareAppTests_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. login as Invited user and then validate viewer privilage","suites":["Create new workspace and share with a user"],"updatePoint":{"line":32,"column":65,"index":1268},"line":32,"code":"  it(\"2. login as Invited user and then validate viewer privilage\", function () {\n    cy.LogintoApp(Cypress.env(\"TESTUSERNAME1\"), Cypress.env(\"TESTPASSWORD1\"));\n    cy.get(homePage.searchInput).type(appid); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(2000);\n    cy.get(homePage.appsContainer).contains(workspaceId);\n    cy.xpath(homePage.ShareBtn).first().should(\"be.visible\");\n    cy.get(homePage.applicationCard).trigger(\"mouseover\");\n    cy.get(homePage.appEditIcon).should(\"not.exist\");\n    cy.launchApp(appid);\n    cy.LogOut();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Workspace/ShareAppTests_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Enable public access to Application","suites":["Create new workspace and share with a user"],"updatePoint":{"line":44,"column":44,"index":1814},"line":44,"code":"  it(\"3. Enable public access to Application\", function () {\n    cy.LoginFromAPI(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.visit(\"/applications\");\n    cy.wait(\"@applications\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.SearchApp(appid);\n    cy.wait(\"@getPagesForCreateApp\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(\"h2\").contains(\"Drag and drop a widget here\");\n    cy.get(homePage.shareApp).click();\n    cy.enablePublicAccess();\n    cy.PublishtheApp();\n    currentUrl = cy.url();\n    cy.url().then(url => {\n      currentUrl = url;\n      cy.log(currentUrl);\n    });\n    cy.get(publish.backToEditor).click();\n    cy.LogOut();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Workspace/ShareAppTests_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Open the app without login and validate public access of Application","suites":["Create new workspace and share with a user"],"updatePoint":{"line":62,"column":77,"index":2576},"line":62,"code":"  it(\"4. Open the app without login and validate public access of Application\", function () {\n    cy.visit(currentUrl);\n    cy.wait(\"@getPagesForViewApp\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.wait(3000);\n    cy.get(publish.pageInfo).invoke(\"text\").then(text => {\n      const someText = text;\n      expect(someText).to.equal(\"This page seems to be blank\");\n    }); // comment toggle should not exist for anonymous users\n\n    cy.get(\".t--comment-mode-switch-toggle\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Workspace/ShareAppTests_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. login as uninvited user and then validate public access of Application","suites":["Create new workspace and share with a user"],"updatePoint":{"line":73,"column":79,"index":3114},"line":73,"code":"  it(\"5. login as uninvited user and then validate public access of Application\", function () {\n    cy.LoginFromAPI(Cypress.env(\"TESTUSERNAME2\"), Cypress.env(\"TESTPASSWORD2\"));\n    cy.visit(currentUrl);\n    cy.wait(\"@getPagesForViewApp\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(publish.pageInfo).invoke(\"text\").then(text => {\n      const someText = text;\n      expect(someText).to.equal(\"This page seems to be blank\");\n    });\n    cy.LogOut();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Workspace/ShareAppTests_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"login as Owner and disable public access","suites":["Create new workspace and share with a user"],"updatePoint":{"line":83,"column":46,"index":3576},"line":83,"code":"  it(\"login as Owner and disable public access\", function () {\n    cy.LoginFromAPI(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.visit(\"/applications\");\n    cy.wait(\"@applications\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.SearchApp(appid);\n    cy.wait(\"@getPagesForCreateApp\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(\"h2\").contains(\"Drag and drop a widget here\");\n    cy.get(homePage.shareApp).click();\n    cy.enablePublicAccess();\n    cy.LogOut();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Workspace/ShareAppTests_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. login as uninvited user and then validate public access disable feature","suites":["Create new workspace and share with a user"],"updatePoint":{"line":94,"column":80,"index":4163},"line":94,"code":"  it(\"6. login as uninvited user and then validate public access disable feature\", function () {\n    cy.LoginFromAPI(Cypress.env(\"TESTUSERNAME2\"), Cypress.env(\"TESTPASSWORD2\"));\n    cy.visit(currentUrl);\n    cy.wait(\"@getPagesForViewApp\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 404);\n    cy.LogOut();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Workspace/ShareAppTests_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. visit the app as anonymous user and validate redirection to login page","suites":["Create new workspace and share with a user"],"updatePoint":{"line":100,"column":79,"index":4498},"line":100,"code":"  it(\"7. visit the app as anonymous user and validate redirection to login page\", function () {\n    cy.visit(currentUrl);\n    cy.wait(\"@getPagesForViewApp\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 404);\n    cy.contains(\"Sign in to your account\").should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Workspace/ShareAppTests_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. login as owner and delete App ","suites":["Create new workspace and share with a user"],"updatePoint":{"line":105,"column":39,"index":4760},"line":105,"code":"  it(\"8. login as owner and delete App \", function () {\n    cy.LoginFromAPI(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.visit(\"/applications\");\n    cy.wait(\"@applications\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.SearchApp(appid);\n    cy.get(\"#loading\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Workspace/ShareAppTests_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Open the workspace general settings and update workspace name. The update should reflect in the workspace. It should also reflect in the workspace names on the left side and the workspace dropdown.\t","suites":["Update Workspace"],"updatePoint":{"line":5,"column":204,"index":345},"line":5,"code":"  it(\"Open the workspace general settings and update workspace name. The update should reflect in the workspace. It should also reflect in the workspace names on the left side and the workspace dropdown.\t\", function () {\n    cy.NavigateToHome();\n    cy.generateUUID().then(uid => {\n      workspaceId = uid;\n      localStorage.setItem(\"WorkspaceName\", workspaceId);\n      cy.createWorkspace();\n      cy.wait(\"@createWorkspace\").then(interception => {\n        newWorkspaceName = interception.response.body.data.name;\n        cy.renameWorkspace(newWorkspaceName, workspaceId);\n        cy.get(homePage.workspaceSettingOption).click({\n          force: true\n        });\n      });\n    });\n    cy.generateUUID().then(uid => {\n      workspaceId = uid;\n      localStorage.setItem(\"WorkspaceName\", workspaceId);\n      cy.get(homePage.workspaceNameInput).click({\n        force: true\n      });\n      cy.get(homePage.workspaceNameInput).clear();\n      cy.get(homePage.workspaceNameInput).type(workspaceId); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n      cy.wait(2000);\n      cy.get(homePage.workspaceHeaderName).should(\"have.text\", workspaceId);\n    });\n    cy.NavigateToHome();\n    cy.get(homePage.leftPanelContainer).within(() => {\n      cy.get(\"span\").should(item => {\n        expect(item).to.contain.text(workspaceId);\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Workspace/UpdateWorkspaceTests_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Open the workspace general settings and update workspace email. The update should reflect in the workspace.","suites":["Update Workspace"],"updatePoint":{"line":38,"column":113,"index":1606},"line":38,"code":"  it(\"Open the workspace general settings and update workspace email. The update should reflect in the workspace.\", function () {\n    cy.createWorkspace();\n    cy.wait(\"@createWorkspace\").then(interception => {\n      newWorkspaceName = interception.response.body.data.name;\n      cy.renameWorkspace(newWorkspaceName, workspaceId);\n      cy.get(homePage.workspaceSettingOption).click({\n        force: true\n      });\n    });\n    cy.get(homePage.workspaceEmailInput).clear();\n    cy.get(homePage.workspaceEmailInput).type(Cypress.env(\"TESTUSERNAME2\"));\n    cy.wait(\"@updateWorkspace\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(homePage.workspaceEmailInput).should(\"have.value\", Cypress.env(\"TESTUSERNAME2\"));\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Workspace/UpdateWorkspaceTests_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Upload logo / delete logo and validate","suites":["Update Workspace"],"updatePoint":{"line":52,"column":44,"index":2292},"line":52,"code":"  it(\"Upload logo / delete logo and validate\", function () {\n    const fixturePath = \"appsmithlogo.png\";\n    cy.xpath(homePage.uploadLogo).attachFile(fixturePath);\n    cy.wait(\"@updateLogo\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.xpath(homePage.membersTab).click({\n      force: true\n    });\n    cy.xpath(homePage.generalTab).click({\n      force: true\n    });\n    cy.get(homePage.removeLogo).last().should(\"be.hidden\").invoke(\"show\").click({\n      force: true\n    });\n    cy.wait(\"@deleteLogo\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Workspace/UpdateWorkspaceTests_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Open the workspace general settings and update workspace website. The update should reflect in the workspace.","suites":["Update Workspace"],"updatePoint":{"line":67,"column":115,"index":2979},"line":67,"code":"  it(\"Open the workspace general settings and update workspace website. The update should reflect in the workspace.\", function () {\n    cy.get(homePage.workspaceWebsiteInput).clear();\n    cy.get(homePage.workspaceWebsiteInput).type(\"demowebsite\");\n    cy.wait(\"@updateWorkspace\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(homePage.workspaceWebsiteInput).should(\"have.value\", \"demowebsite\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Workspace/UpdateWorkspaceTests_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Can Import Application from json","suites":["Workspace Import Application"],"updatePoint":{"line":13,"column":38,"index":337},"line":13,"code":"  it(\"Can Import Application from json\", function () {\n    cy.NavigateToHome();\n    appname = localStorage.getItem(\"AppName\");\n    cy.get(homePage.searchInput).type(appname); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(2000);\n    cy.get(homePage.applicationCard).first().trigger(\"mouseover\");\n    cy.get(homePage.appMoreIcon).first().click({\n      force: true\n    });\n    cy.get(homePage.exportAppFromMenu).click({\n      force: true\n    });\n    cy.get(homePage.searchInput).clear();\n    cy.get(`a[id=t--export-app-link]`).then(anchor => {\n      const url = anchor.prop(\"href\");\n      cy.request(url).then(({\n        body,\n        headers\n      }) => {\n        expect(headers).to.have.property(\"content-type\", \"application/json\");\n        expect(headers).to.have.property(\"content-disposition\", `attachment; filename*=UTF-8''${appname}.json`);\n        cy.writeFile(\"cypress/fixtures/exported-app.json\", body, \"utf-8\");\n        cy.generateUUID().then(uid => {\n          workspaceId = uid;\n          localStorage.setItem(\"WorkspaceName\", workspaceId);\n          cy.createWorkspace();\n          cy.wait(\"@createWorkspace\").then(createWorkspaceInterception => {\n            newWorkspaceName = createWorkspaceInterception.response.body.data.name;\n            cy.renameWorkspace(newWorkspaceName, workspaceId);\n            cy.get(homePage.workspaceImportAppOption).click({\n              force: true\n            });\n            cy.get(homePage.workspaceImportAppModal).should(\"be.visible\");\n            cy.xpath(homePage.uploadLogo).attachFile(\"exported-app.json\");\n            cy.wait(\"@importNewApplication\").then(interception => {\n              const importedApp = interception.response.body.data.application;\n              const {\n                pages\n              } = importedApp;\n              const appSlug = importedApp.slug;\n              let defaultPage = pages.find(eachPage => eachPage.isDefault);\n              cy.get(homePage.toastMessage).should(\"contain\", \"Application imported successfully\");\n              cy.wait(\"@getPagesForCreateApp\").then(interception => {\n                const pages = interception.response.body.data.pages;\n                const pageSlug = pages.find(page => page.isDefault)?.slug ?? \"page\";\n                cy.url().should(\"include\", `/${appSlug}/${pageSlug}-${defaultPage.id}`);\n              });\n            });\n          });\n        });\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Workspace/WorkspaceImportApplication_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"create workspace with leading space validation","suites":["Workspace name validation spec"],"updatePoint":{"line":6,"column":52,"index":241},"line":6,"code":"  it(\"create workspace with leading space validation\", function () {\n    cy.NavigateToHome();\n    cy.createWorkspace();\n    cy.wait(\"@createWorkspace\").then(interception => {\n      newWorkspaceName = interception.response.body.data.name;\n      cy.NavigateToHome();\n      cy.get(\".t--applications-container\").contains(newWorkspaceName).closest(homePage.workspaceCompleteSection).find(homePage.workspaceNamePopover).find(homePage.optionsIcon).click({\n        force: true\n      });\n      cy.get(homePage.renameWorkspaceInput).should(\"be.visible\").type(\" \");\n      cy.get(\".error-message\").should(\"be.visible\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Workspace/Workspacename_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"creates workspace and checks that workspace name is editable","suites":["Workspace name validation spec"],"updatePoint":{"line":19,"column":66,"index":877},"line":19,"code":"  it(\"creates workspace and checks that workspace name is editable\", function () {\n    cy.createWorkspace();\n    cy.generateUUID().then(uid => {\n      workspaceId = \"kadjhfkjadsjkfakjdscajdsnckjadsnckadsjcnanakdjsnckjdscnakjdscnnadjkncakjdsnckjadsnckajsdfkjadshfkjsdhfjkasdhfkjasdhfjkasdhjfasdjkfhjhdsfjhdsfjhadasdfasdfadsasdf\" + uid; // create workspace with long name\n\n      cy.createWorkspace();\n      cy.wait(\"@createWorkspace\").then(interception => {\n        newWorkspaceName = interception.response.body.data.name;\n        cy.renameWorkspace(newWorkspaceName, workspaceId);\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Workspace/Workspacename_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"create workspace with special characters validation","suites":["Workspace name validation spec"],"updatePoint":{"line":31,"column":57,"index":1472},"line":31,"code":"  it(\"create workspace with special characters validation\", function () {\n    cy.createWorkspace();\n    cy.wait(\"@createWorkspace\").then(interception => {\n      newWorkspaceName = interception.response.body.data.name;\n      cy.renameWorkspace(newWorkspaceName, \"Test & Workspace\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Workspace/Workspacename_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"create workspace with long name should use ellipsis validation","suites":["Workspace Settings validation spec"],"updatePoint":{"line":6,"column":68,"index":261},"line":6,"code":"  it(\"create workspace with long name should use ellipsis validation\", function () {\n    cy.NavigateToHome();\n    cy.generateUUID().then(uid => {\n      workspaceId = \"kadjhfkjadsjkfakjdscajdsnckjadsnckadsjcnanakdjsnckjdscnakjdscnnadjkncakjdsnckjadsnckajsdfkjadshfkjsdhfjkasdhfkjasdhfjkasdhjfasdjkfhjhdsfjhdsfjhadasdfasdfadsasdf\" + uid;\n      localStorage.setItem(\"WorkspaceName\", workspaceId); // create workspace with long name\n\n      cy.createWorkspace(); // stub the response and\n      // find app name\n\n      cy.wait(\"@createWorkspace\").then(interception => {\n        newWorkspaceName = interception.response.body.data.name;\n        cy.renameWorkspace(newWorkspaceName, workspaceId);\n        cy.navigateToWorkspaceSettings(workspaceId); // checking parent's(<a></a>) since the child(<span>) inherits css from it\n\n        cy.get(homePage.workspaceHeaderName).parent().then(elem => {\n          assert.isBelow(elem[0].offsetWidth, elem[0].scrollWidth);\n        }).should(\"have.css\", \"text-overflow\", \"ellipsis\");\n      });\n    });\n    cy.LogOut();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Workspace/WorkspaceSettings_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"create workspace and check if user icons exists in that workspace on homepage","suites":["Check if workspace has user icons on homepage"],"updatePoint":{"line":6,"column":83,"index":287},"line":6,"code":"  it(\"create workspace and check if user icons exists in that workspace on homepage\", function () {\n    cy.NavigateToHome();\n    cy.generateUUID().then(uid => {\n      workspaceId = uid;\n      localStorage.setItem(\"WorkspaceName\", workspaceId);\n      cy.createWorkspace();\n      cy.wait(\"@createWorkspace\").then(interception => {\n        newWorkspaceName = interception.response.body.data.name;\n        cy.renameWorkspace(newWorkspaceName, workspaceId);\n        cy.get(homePage.workspaceList.concat(workspaceId).concat(\")\")).scrollIntoView().should(\"be.visible\").within(() => {\n          cy.get(homePage.shareUserIcons).first().should(\"be.visible\");\n        });\n      });\n    });\n    cy.LogOut();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Workspace/WorkspaceUserIconTest_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should test that settings page is redirected to default tab","suites":["Admin settings page"],"updatePoint":{"line":25,"column":65,"index":713},"line":25,"code":"  it(\"should test that settings page is redirected to default tab\", () => {\n    cy.LoginFromAPI(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.visit(\"/applications\");\n    cy.wait(3000);\n    cy.visit(\"/settings\");\n    cy.url().should(\"contain\", \"/settings/general\");\n  });","file":"integration/Smoke_TestSuite/EnterpriseTests/AdminSettings/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should test that authentication page shows upgrade button for SSO","suites":["Admin settings page"],"updatePoint":{"line":32,"column":71,"index":1002},"line":32,"code":"  it(\"should test that authentication page shows upgrade button for SSO\", () => {\n    cy.visit(\"/settings/general\");\n    cy.get(adminsSettings.authenticationTab).click();\n    cy.url().should(\"contain\", \"/settings/authentication\");\n\n    if (Cypress.env(\"Edition\") === 0) {\n      cy.get(EnterpriseAdminSettingsLocators.upgradeOidcButton).should(\"be.visible\").should(\"contain\", \"UPGRADE\");\n      cy.get(EnterpriseAdminSettingsLocators.upgradeSamlButton).should(\"be.visible\").should(\"contain\", \"UPGRADE\");\n    }\n  });","file":"integration/Smoke_TestSuite/EnterpriseTests/AdminSettings/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should test that Appsmith Watermark setting shows upgrade button","suites":["Admin settings page"],"updatePoint":{"line":42,"column":70,"index":1515},"line":42,"code":"  it(\"should test that Appsmith Watermark setting shows upgrade button\", () => {\n    cy.visit(\"/settings/general\"); // checking if the setting contains a word 'Upgrade\n\n    cy.get(EnterpriseAdminSettingsLocators.hideAppsmithWatermarkSetting).contains(\"Upgrade\");\n  });","file":"integration/Smoke_TestSuite/EnterpriseTests/AdminSettings/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"PUT Action test API fetaure","suites":["API Panel Test Functionality"],"updatePoint":{"line":19,"column":33,"index":651},"line":19,"code":"  it(\"PUT Action test API fetaure\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"FirstAPI\");\n    cy.SelectAction(testdata.putAction);\n    cy.EnterSourceDetailsWithbody(testdata.baseUrl, testdata.methodput, testdata.headerKey, testdata.headerValue);\n    cy.readFile(\"cypress/fixtures/putjson.txt\").then(json => {\n      cy.log(json);\n      cy.contains(ApiEditor.bodyTab).click({\n        force: true\n      });\n      cy.xpath(apiwidget.postbody).click({\n        force: true\n      }).focus().invoke(\"val\", json);\n      cy.WaitAutoSave();\n      cy.RunAPI();\n      cy.validateRequest(\"FirstAPI\", testdata.baseUrl, testdata.methodput, testdata.Put);\n    });\n    cy.ResponseStatusCheck(\"200 OK\");\n    cy.log(\"Response code check successful\");\n    cy.ResponseCheck(\"updatedAt\");\n    cy.log(\"Response data check successful\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ApiTests/API_All_Verb_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Post Action test API fetaure","suites":["API Panel Test Functionality"],"updatePoint":{"line":41,"column":34,"index":1490},"line":41,"code":"  it(\"Post Action test API fetaure\", function () {\n    cy.CreateAPI(\"FirstAPI\");\n    cy.log(\"Creation of FirstAPI Action successful\");\n    cy.SelectAction(testdata.postAction);\n    cy.EnterSourceDetailsWithbody(testdata.baseUrl, testdata.methodpost, testdata.headerKey, testdata.headerValue);\n    cy.readFile(\"cypress/fixtures/postjson.txt\").then(json => {\n      cy.log(json);\n      cy.contains(ApiEditor.bodyTab).click({\n        force: true\n      });\n      cy.xpath(apiwidget.postbody).click({\n        force: true\n      }).focus().invoke(\"val\", json);\n      cy.WaitAutoSave();\n      cy.RunAPI();\n      cy.validateRequest(\"FirstAPI\", testdata.baseUrl, testdata.methodpost, testdata.Post);\n    });\n    cy.ResponseStatusCheck(\"201 CREATED\");\n    cy.log(\"Response code check successful\");\n    cy.ResponseCheck(\"createdAt\");\n    cy.log(\"Response data check successful\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ApiTests/API_All_Verb_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"PATCH Action test API fetaure","suites":["API Panel Test Functionality"],"updatePoint":{"line":63,"column":35,"index":2364},"line":63,"code":"  it(\"PATCH Action test API fetaure\", function () {\n    cy.CreateAPI(\"FirstAPI\");\n    cy.log(\"Creation of FirstAPI Action successful\");\n    cy.SelectAction(testdata.patchAction);\n    cy.EnterSourceDetailsWithbody(testdata.baseUrl, testdata.methodpatch, testdata.headerKey, testdata.headerValue);\n    cy.readFile(\"cypress/fixtures/patchjson.txt\").then(json => {\n      cy.log(json);\n      cy.contains(ApiEditor.bodyTab).click({\n        force: true\n      });\n      cy.xpath(apiwidget.postbody).click({\n        force: true\n      }).focus().invoke(\"val\", json);\n      cy.WaitAutoSave();\n      cy.RunAPI();\n      cy.validateRequest(\"FirstAPI\", testdata.baseUrl, testdata.methodpatch, testdata.Patch);\n    });\n    cy.ResponseStatusCheck(\"200 OK\");\n    cy.log(\"Response code check successful\");\n    cy.ResponseCheck(\"updatedAt\");\n    cy.log(\"Response data check successful\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ApiTests/API_All_Verb_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Delete Action test API fetaure","suites":["API Panel Test Functionality"],"updatePoint":{"line":85,"column":36,"index":3239},"line":85,"code":"  it(\"Delete Action test API fetaure\", function () {\n    cy.CreateAPI(\"FirstAPI\");\n    cy.log(\"Creation of FirstAPI Action successful\");\n    cy.SelectAction(testdata.deleteAction);\n    cy.EnterSourceDetailsWithbody(testdata.baseUrl, testdata.methoddelete, testdata.headerKey, testdata.headerValue);\n    cy.WaitAutoSave();\n    cy.RunAPI();\n    cy.validateRequest(\"FirstAPI\", testdata.baseUrl, testdata.methoddelete, testdata.Delete);\n    cy.ResponseStatusCheck(\"200\");\n    cy.log(\"Response code check successful\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ApiTests/API_All_Verb_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test GET Action for mock API with header and pagination","suites":["API Panel Test Functionality"],"updatePoint":{"line":96,"column":61,"index":3784},"line":96,"code":"  it(\"Test GET Action for mock API with header and pagination\", function () {\n    const apiname = \"SecondAPI\";\n    cy.CreateAPI(apiname);\n    cy.log(\"Creation of API Action successful\");\n    cy.enterDatasourceAndPath(testdata.baseUrl, testdata.methods);\n    cy.WaitAutoSave();\n    cy.RunAPI();\n    cy.validateRequest(apiname, testdata.baseUrl, testdata.methods, testdata.Get);\n    cy.ResponseStatusCheck(testdata.successStatusCode);\n    cy.log(\"Response code check successful\");\n    cy.ResponseCheck(testdata.responsetext);\n    cy.log(\"Response data check successful\");\n    cy.switchToPaginationTab();\n    cy.selectPaginationType(apiwidget.paginationWithUrl);\n    cy.enterUrl(apiname, apiwidget.panigationNextUrl, testdata.nextUrl);\n    cy.clickTest(apiwidget.TestNextUrl);\n    cy.validateRequest(apiname, testdata.baseUrl, testdata.methods.concat(testdata.next), testdata.Get);\n    cy.ResponseStatusCheck(testdata.successStatusCode);\n    cy.log(\"Response code check successful\");\n    cy.ResponseCheck(\"Josh M Krantz\");\n    cy.log(\"Response data check successful\");\n    cy.switchToPaginationTab();\n    cy.enterUrl(apiname, apiwidget.panigationPrevUrl, testdata.prevUrl);\n    cy.clickTest(apiwidget.TestPreUrl);\n    cy.validateRequest(apiname, testdata.baseUrl, testdata.methods.concat(testdata.prev), testdata.Get);\n    cy.ResponseStatusCheck(testdata.successStatusCode);\n    cy.log(\"Response code check successful\");\n    cy.ResponseCheck(testdata.responsetext);\n    cy.log(\"Response data check successful\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ApiTests/API_All_Verb_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"API check with query params test API fetaure","suites":["API Panel Test Functionality"],"updatePoint":{"line":126,"column":50,"index":5288},"line":126,"code":"  it(\"API check with query params test API fetaure\", function () {\n    cy.CreateAPI(\"ThirdAPI\");\n    cy.log(\"Creation of API Action successful\");\n    cy.enterDatasourceAndPath(testdata.baseUrl, testdata.queryAndValue);\n    cy.WaitAutoSave();\n    cy.RunAPI();\n    cy.validateRequest(\"ThirdAPI\", testdata.baseUrl, testdata.queryAndValue, testdata.Get);\n    cy.ResponseStatusCheck(\"200 OK\");\n    cy.log(\"Response code check successful\");\n    cy.ResponseCheck(testdata.responsetext3);\n    cy.log(\"Response data check successful\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ApiTests/API_All_Verb_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"API check with Invalid Header","suites":["API Panel Test Functionality"],"updatePoint":{"line":138,"column":35,"index":5806},"line":138,"code":"  it(\"API check with Invalid Header\", function () {\n    cy.CreateAPI(\"FourthAPI\");\n    cy.log(\"Creation of API Action successful\");\n    cy.EnterSourceDetailsWithHeader(testdata.baseUrl, testdata.methods, testdata.headerKey, testdata.invalidValue);\n    cy.WaitAutoSave();\n    cy.RunAPI();\n    cy.validateRequest(\"FourthAPI\", testdata.baseUrl, testdata.methods, testdata.Get, true);\n    cy.ResponseStatusCheck(\"5000\");\n    cy.log(\"Response code check successful\");\n    cy.ResponseCheck(\"Invalid value for Content-Type\");\n    cy.log(\"Response data check successful\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ApiTests/API_All_Verb_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test API copy/Move/delete feature","suites":["API Panel Test Functionality "],"updatePoint":{"line":10,"column":39,"index":426},"line":10,"code":"  it(\"Test API copy/Move/delete feature\", function () {\n    cy.Createpage(\"SecondPage\");\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"FirstAPI\");\n    cy.enterDatasourceAndPath(testdata.baseUrl, \"{{ '/random' }}\");\n    cy.assertPageSave();\n    cy.get(\"body\").click(0, 0);\n    ee.ExpandCollapseEntity(\"QUERIES/JS\");\n    ee.ActionContextMenuByEntityName(\"FirstAPI\", \"Copy to page\", \"SecondPage\"); // click on learn how link\n\n    cy.get(\".t--learn-how-apis-link\").click(); // this should open in a global search modal\n\n    cy.get(commonlocators.globalSearchModal);\n    cy.get(\"body\").click(0, 0);\n    ee.ActionContextMenuByEntityName(\"FirstAPICopy\", \"Move to page\", \"Page1\");\n    cy.wait(2000);\n    cy.get(\".t--entity-name\").contains(\"FirstAPICopy\").click({\n      force: true\n    });\n    cy.get(apiwidget.resourceUrl).should(\"contain.text\", \"{{ '/random' }}\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ApiTests/API_ContextMenu_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test curl import flow for POST action with JSON body","suites":["Test curl import flow"],"updatePoint":{"line":7,"column":58,"index":297},"line":7,"code":"  it(\"Test curl import flow for POST action with JSON body\", function () {\n    localStorage.setItem(\"ApiPaneV2\", \"ApiPaneV2\");\n    cy.NavigateToApiEditor();\n    cy.get(pages.integrationCreateNew).should(\"be.visible\").click({\n      force: true\n    });\n    cy.get(ApiEditor.curlImage).click({\n      force: true\n    });\n    cy.get(\"textarea\").type('curl -d \\'{\"name\":\"morpheus\",\"job\":\"leader\"}\\' -H Content-Type:application/json -X POST https://mock-api.appsmith.com/echo/post', {\n      force: true,\n      parseSpecialCharSequences: false\n    });\n    cy.importCurl();\n    cy.RunAPI();\n    cy.ResponseStatusCheck(\"201 CREATED\");\n    cy.get(\"@curlImport\").then(response => {\n      cy.expect(response.response.body.responseMeta.success).to.eq(true);\n      cy.get(apiwidget.ApiName).invoke(\"text\").then(text => {\n        const someText = text;\n        expect(someText).to.equal(response.response.body.data.name);\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ApiTests/API_CurlPOSTImport_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test curl import flow for POST action with multipart form data","suites":["Test curl import flow"],"updatePoint":{"line":31,"column":68,"index":1237},"line":31,"code":"  it(\"Test curl import flow for POST action with multipart form data\", function () {\n    localStorage.setItem(\"ApiPaneV2\", \"ApiPaneV2\");\n    cy.NavigateToApiEditor();\n    cy.get(pages.integrationCreateNew).should(\"be.visible\").click({\n      force: true\n    });\n    cy.get(ApiEditor.curlImage).click({\n      force: true\n    });\n    cy.get(\"textarea\").type(\"curl --request POST http://httpbin.org/post -F 'randomKey=randomValue' --form 'randomKey2=\\\"randomValue2\\\"'\", {\n      force: true,\n      parseSpecialCharSequences: false\n    });\n    cy.importCurl();\n    cy.RunAPI();\n    cy.ResponseStatusCheck(\"200 OK\");\n    cy.log(\"Ran the API successfully\");\n    cy.get(\"@postExecute\").then(response => {\n      cy.log(response.response.body);\n      cy.expect(response.response.body.responseMeta.success).to.eq(true); // Asserting if the form key value are returned in the response\n\n      cy.expect(response.response.body.data.body.form.randomKey).to.eq(\"randomValue\"); // Asserting the content type header set in curl import is multipart/form-data\n\n      cy.expect(response.response.body.data.body.headers[\"Content-Type\"]).contains(\"multipart/form-data;boundary\");\n    });\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ApiTests/API_CurlPOSTImport_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check whether the default content-type changes on changing method types and remains unchanged on switching to GET","suites":["API Panel request body"],"updatePoint":{"line":8,"column":119,"index":424},"line":8,"code":"  it(\"Check whether the default content-type changes on changing method types and remains unchanged on switching to GET\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"FirstAPI\"); // Checking for default Body type to be NONE\n\n    cy.contains(apiEditor.bodyTab).click({\n      force: true\n    });\n    cy.get(apiEditor.bodyTypeSelected).should(\"have.text\", \"NONE\"); //Switch to headers tab\n\n    cy.contains(apiEditor.headersTab).click(); // Changing method type to POST\n\n    cy.get(apiEditor.ApiVerb).click();\n    cy.xpath(appPage.selectPost).click(); // Checking Header for POST Type\n\n    cy.get(`${apiwidget.headerKey} .CodeMirror .CodeMirror-code`).first().should(\"have.text\", \"content-type\");\n    cy.get(`${apiwidget.headerValue} .CodeMirror .CodeMirror-code`).first().should(\"have.text\", \"application/json\"); // Checking Body type to be JSON\n\n    cy.contains(apiEditor.bodyTab).click({\n      force: true\n    });\n    cy.get(apiEditor.bodyTypeSelected).should(\"have.text\", \"JSON\"); // Changing method type to GET\n\n    cy.get(apiEditor.ApiVerb).first().click();\n    cy.xpath(appPage.selectGet).first().click(); // Checking Header for GET Type\n\n    cy.contains(apiEditor.headersTab).click();\n    cy.get(`${apiwidget.headerKey} .CodeMirror .CodeMirror-code`).first().should(\"have.text\", \"content-type\");\n    cy.get(`${apiwidget.headerValue} .CodeMirror .CodeMirror-code`).first().should(\"have.text\", \"application/json\");\n    cy.DeleteAPI();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ApiTests/API_DefaultContentType_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Bug 14624 - Verifying the content-type none is not added","suites":["API Panel request body"],"updatePoint":{"line":38,"column":62,"index":1827},"line":38,"code":"  it(\"Bug 14624 - Verifying the content-type none is not added\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"FirstAPI\"); // Checking for default Body type to be NONE\n\n    cy.contains(apiEditor.bodyTab).click({\n      force: true\n    });\n    cy.get(apiEditor.bodyTypeSelected).should(\"have.text\", \"NONE\"); //Switch to headers tab\n\n    cy.contains(apiEditor.headersTab).click(); // Checking Header to not have content-type:none\n\n    cy.get(`${apiwidget.headerKey} .CodeMirror .CodeMirror-code`).first().should(\"not.have.text\", \"content-type\");\n    cy.get(`${apiwidget.headerValue} .CodeMirror .CodeMirror-code`).first().should(\"not.have.text\", \"none\");\n    cy.DeleteAPI();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ApiTests/API_DefaultContentType_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test Search API fetaure","suites":["API Panel Test Functionality"],"updatePoint":{"line":15,"column":29,"index":479},"line":15,"code":"  it(\"Test Search API fetaure\", function () {\n    cy.log(\"Login Successful\");\n    cy.NavigateToAPI_Panel();\n    cy.log(\"Navigation to API Panel screen successful\");\n    cy.CreateAPI(\"FirstAPI\");\n    cy.get(\".CodeMirror-placeholder\").first().should(\"have.text\", \"https://mock-api.appsmith.com/users\");\n    cy.log(\"Creation of FirstAPI Action successful\");\n    cy.enterDatasourceAndPath(testdata.baseUrl, testdata.methods);\n    cy.SaveAndRunAPI();\n    cy.validateRequest(\"FirstAPI\", testdata.baseUrl, testdata.methods, testdata.Get);\n    cy.ResponseStatusCheck(testdata.successStatusCode);\n    cy.CheckAndUnfoldEntityItem(\"QUERIES/JS\");\n    cy.get(\".t--entity-name:contains('FirstAPI')\").should(\"be.visible\");\n    cy.hoverAndClick();\n    cy.selectAction(\"Edit Name\"); //cy.RenameEntity(tabname);\n\n    cy.get(explorer.editEntity).last().type(\"SecondAPI\", {\n      force: true\n    });\n    cy.DeleteAPI();\n    cy.wait(2000);\n    cy.get(\".t--entity-name:contains('SecondAPI')\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ApiTests/API_Edit_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Should update loading state after cancellation of confirmation for run query","suites":["API Panel Test Functionality"],"updatePoint":{"line":38,"column":82,"index":1530},"line":38,"code":"  it(\"Should update loading state after cancellation of confirmation for run query\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.log(\"Navigation to API Panel screen successful\");\n    cy.CreateAPI(\"FirstAPI\");\n    cy.get(\".CodeMirror-placeholder\").first().should(\"have.text\", \"https://mock-api.appsmith.com/users\");\n    cy.log(\"Creation of FirstAPI Action successful\");\n    cy.enterDatasourceAndPath(testdata.baseUrl, testdata.methods);\n    cy.get(apiwidget.settings).click({\n      force: true\n    });\n    cy.get(apiwidget.confirmBeforeExecute).click({\n      force: true\n    });\n    cy.get(apiwidget.runQueryButton).click();\n    cy.get(\".bp3-dialog\").find(\"button\").contains(\"No\").click();\n    cy.get(apiwidget.runQueryButton).children().should(\"have.length\", 1);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ApiTests/API_Edit_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Should not crash on key delete","suites":["API Panel Test Functionality"],"updatePoint":{"line":55,"column":36,"index":2260},"line":55,"code":"  it(\"Should not crash on key delete\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"CrashTestAPI\");\n    cy.SelectAction(testdata.postAction);\n    cy.get(apiwidget.headerKey).first().click({\n      force: true\n    }).type(\"{uparrow}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{ctrl}{shift}{downarrow}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{backspace}\", {\n      parseSpecialCharSequences: true\n    }); // assert so that this fails\n\n    cy.get(apiwidget.headerKey).should(\"be.visible\");\n    cy.get(apiwidget.headerKey).should(\"have.value\", \"\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ApiTests/API_Edit_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Should correctly parse query params","suites":["API Panel Test Functionality"],"updatePoint":{"line":72,"column":41,"index":2858},"line":72,"code":"  it(\"Should correctly parse query params\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"APIWithQueryParams\");\n    cy.enterDatasourceAndPath(testdata.baseUrl, testdata.methodWithQueryParam);\n    cy.ValidateQueryParams({\n      key: \"q\",\n      value: \"mimeType='application/vnd.google-apps.spreadsheet'\"\n    });\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ApiTests/API_Edit_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Shows evaluated value pane when url field is focused","suites":["API Panel Test Functionality"],"updatePoint":{"line":81,"column":58,"index":3208},"line":81,"code":"  it(\"Shows evaluated value pane when url field is focused\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"TestAPI\");\n    cy.get(\".CodeMirror textarea\").first().click({\n      force: true\n    }).type(\"https://www.facebook.com/users/{{Button2.text}}?key=test&val={{Button2.text}}\", {\n      force: true,\n      parseSpecialCharSequences: false\n    }).wait(1000).type(\"{enter}\", {\n      parseSpecialCharSequences: true\n    });\n    cy.contains(\"https://www.facebook.com/users/Cancel?key=test&val=Cancel\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ApiTests/API_Edit_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Moustache test Functionality","suites":["Moustache test Functionality"],"updatePoint":{"line":16,"column":34,"index":518},"line":16,"code":"  it(\"Moustache test Functionality\", function () {\n    cy.openPropertyPane(\"textwidget\");\n    cy.widgetText(\"Api\", widgetsPage.textWidget, widgetsPage.textInputval);\n    cy.testCodeMirror(\"users\");\n    cy.NavigateToAPI_Panel();\n    cy.log(\"Navigation to API Panel screen successful\");\n    cy.CreateAPI(\"TestAPINew\");\n    cy.log(\"Creation of API Action successful\");\n    cy.enterDatasourceAndPath(testdata.baseUrl, testdata.moustacheMethod); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.RunAPI();\n    cy.ResponseStatusCheck(testdata.successStatusCode);\n    cy.log(\"Response code check successful\");\n    cy.ResponseCheck(\"janet.weaver@reqres.in\");\n    cy.log(\"Response data check successful\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ApiTests/API_Mustache_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check whether input exists when form-encoded is selected","suites":["API Panel request body"],"updatePoint":{"line":7,"column":62,"index":308},"line":7,"code":"  it(\"Check whether input exists when form-encoded is selected\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"FirstAPI\");\n    cy.SelectAction(testdata.postAction);\n    cy.contains(apiEditor.bodyTab).click();\n    cy.contains(testdata.apiFormDataBodyType).click();\n    cy.get(apiwidget.formEncoded).should(\"be.visible\");\n    cy.DeleteAPI();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ApiTests/API_RequestBody_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test Search API fetaure","suites":["API Panel Test Functionality "],"updatePoint":{"line":9,"column":29,"index":456},"line":9,"code":"  it(\"Test Search API fetaure\", function () {\n    cy.log(\"Login Successful\");\n    cy.NavigateToAPI_Panel();\n    cy.log(\"Navigation to API Panel screen successful\");\n    cy.CreateAPI(\"FirstAPI\");\n    cy.RunAPI();\n    cy.log(\"Creation of FirstAPI Action successful\");\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"SecondAPI\");\n    cy.RunAPI();\n    cy.CheckAndUnfoldEntityItem(\"QUERIES/JS\");\n    cy.log(\"Creation of SecondAPI Action successful\");\n    cy.get(\".t--entity-name\").contains(\"FirstAPI\");\n    cy.get(\".t--entity-name\").contains(\"SecondAPI\");\n    cy.DeleteAPIFromSideBar();\n    cy.DeleteAPIFromSideBar();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ApiTests/API_Search_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"if suggested widgets section alwas appears for all 3 modes","suites":["API Panel Test Functionality "],"updatePoint":{"line":26,"column":64,"index":1110},"line":26,"code":"  it(\"if suggested widgets section alwas appears for all 3 modes\", function () {\n    cy.log(\"Login Successful\");\n    cy.createAndFillApi(testUrl1, \"\");\n    cy.RunAPI();\n    cy.createAndFillApi(testUrl2, \"\");\n    cy.RunAPI();\n    cy.get(ApiEditor.jsonResponseTab).click();\n    cy.checkIfApiPaneIsVisible();\n    cy.get(ApiEditor.rawResponseTab).click();\n    cy.checkIfApiPaneIsVisible();\n    cy.get(ApiEditor.tableResponseTab).click();\n    cy.checkIfApiPaneIsVisible();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ApiTests/API_Search_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Bug 14242: Appsmith crash when create an API pointing to Github hosted json","suites":["API Panel Test Functionality "],"updatePoint":{"line":39,"column":81,"index":1601},"line":39,"code":"  it(\"Bug 14242: Appsmith crash when create an API pointing to Github hosted json\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.generateUUID().then(uid => {\n      APIName = uid;\n      cy.CreateAPI(APIName);\n    });\n    cy.enterDatasource(testUrl3);\n    cy.SaveAndRunAPI();\n    cy.ResponseStatusCheck(\"200\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ApiTests/API_Search_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1.Quick access command background color","suites":["Validate API Panel CSS Styles"],"updatePoint":{"line":20,"column":45,"index":756},"line":20,"code":"  it(\"1.Quick access command background color\", function () {\n    //Get the first key component (can be any of key value component)\n    //eq(1) is used because eq(0) is API serach bar.\n    cy.get(ApiEditor.codeEditorWrapper).eq(1).click(); //Check color and background-color of binding prompt\n\n    cy.get(DynamicInput.bindingPrompt).should(\"have.css\", \"color\", fontColorGray800).should(\"have.css\", \"background-color\", backgroundColorGray200);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ApiTests/API_Styles_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2.HTTP method dropdown hover and selected background should be gray","suites":["Validate API Panel CSS Styles"],"updatePoint":{"line":27,"column":73,"index":1233},"line":27,"code":"  it(\"2.HTTP method dropdown hover and selected background should be gray\", function () {\n    //Click on API http selector\n    cy.get(ApiEditor.ApiVerb).click(); //Default selection GET background-color check\n\n    cy.get(ApiEditor.httpDropDownOptions).first().should(\"have.css\", \"background-color\", backgroundColorGray200); //Last element (can be any child other than the default) background-color check\n    //On hover background-color should change.\n\n    cy.get(ApiEditor.httpDropDownOptions).last().should(\"have.css\", \"background-color\", backgroundColorwhite).realHover().should(\"have.css\", \"background-color\", backgroundColorGray200).click();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ApiTests/API_Styles_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3.Commands help button center align","suites":["Validate API Panel CSS Styles"],"updatePoint":{"line":36,"column":41,"index":1853},"line":36,"code":"  it(\"3.Commands help button center align\", function () {\n    //Get the first key component (can be any of key value component)\n    //eq(1) is used because eq(0) is API serach bar.\n    cy.get(ApiEditor.codeEditorWrapper).eq(1).realHover(); //Get the slash icon component and check background\n    //Check center alignment\n    //Get width and height (have use inner function because values are not accessible outside functional scope);\n    //Comapre transform matrix value (Cypress decodes all transform values into matrix)\n\n    cy.get(ApiEditor.slashCommandButton).first().should(\"have.css\", \"right\", \"0px\").invoke(\"outerWidth\").then(width => cy.get(ApiEditor.slashCommandButton).first().invoke(\"outerHeight\").then(height => cy.get(ApiEditor.slashCommandButton).first().should(\"have.css\", \"transform\", `matrix(1, 0, 0, 1, -${width / 2}, ${height / 2})`)));\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ApiTests/API_Styles_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4.Select Datasource dropdown binding prompt background color","suites":["Validate API Panel CSS Styles"],"updatePoint":{"line":46,"column":66,"index":2740},"line":46,"code":"  it(\"4.Select Datasource dropdown binding prompt background color\", function () {\n    cy.generateUUID().then(appName1 => {\n      cy.generateUUID().then(appName2 => {\n        //Create two datasource for testing binding prompt background-color\n        cy.createNewAuthApiDatasource(appName1);\n        cy.createNewAuthApiDatasource(appName2);\n        cy.get(commonLocators.entityName).contains(\"test_styles\").click(); //Click on API search editor\n\n        cy.get(ApiEditor.codeEditorWrapper).first().click(); //First hint for search background-color test\n\n        cy.get(ApiEditor.apiSearchHint).first().should(\"have.css\", \"background-color\", backgroundColorGray200); //Last element (can be any child other than the default) background-color check\n        //On hover background-color should change.\n\n        cy.get(ApiEditor.apiSearchHint).last().should(\"have.css\", \"background-color\", backgroundColorwhite).realHover().should(\"have.css\", \"background-color\", backgroundColorGray200); //Delete created test API\n\n        cy.DeleteAPI();\n        cy.wait(2000);\n        cy.get(commonLocators.entityName).contains(\"test_styles\").should(\"not.exist\"); //Delete two datasources\n\n        cy.deleteDatasource(appName1);\n        cy.deleteDatasource(appName2);\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ApiTests/API_Styles_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test api name unique error","suites":["Name uniqueness test"],"updatePoint":{"line":2,"column":32,"index":80},"line":2,"code":"  it(\"Test api name unique error\", () => {\n    cy.log(\"Login Successful\");\n    cy.NavigateToAPI_Panel();\n    cy.log(\"Navigation to API Panel screen successful\");\n    cy.CreateAPI(\"Uni\");\n    cy.log(\"Creation of UniqueName Action successful\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ApiTests/API_Unique_name_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate Unique Name","suites":["Name uniqueness test"],"updatePoint":{"line":9,"column":26,"index":323},"line":9,"code":"  it(\"Validate Unique Name\", () => {\n    cy.CreationOfUniqueAPIcheck(\"Uni\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ApiTests/API_Unique_name_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate download apiname check","suites":["Name uniqueness test"],"updatePoint":{"line":12,"column":37,"index":417},"line":12,"code":"  it(\"Validate download apiname check\", () => {\n    cy.CreationOfUniqueAPIcheck(\"download\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ApiTests/API_Unique_name_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate window object property apiname check","suites":["Name uniqueness test"],"updatePoint":{"line":15,"column":51,"index":530},"line":15,"code":"  it(\"Validate window object property apiname check\", () => {\n    cy.CreationOfUniqueAPIcheck(\"localStorage\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ApiTests/API_Unique_name_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate window object method apiname check","suites":["Name uniqueness test"],"updatePoint":{"line":18,"column":49,"index":645},"line":18,"code":"  it(\"Validate window object method apiname check\", () => {\n    cy.CreationOfUniqueAPIcheck(\"resizeTo\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ApiTests/API_Unique_name_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test curl import flow Run and Delete","suites":["Test curl import flow"],"updatePoint":{"line":9,"column":42,"index":362},"line":9,"code":"  it(\"Test curl import flow Run and Delete\", function () {\n    localStorage.setItem(\"ApiPaneV2\", \"ApiPaneV2\");\n    cy.NavigateToApiEditor();\n    cy.get(pages.integrationCreateNew).should(\"be.visible\").click({\n      force: true\n    });\n    cy.get(ApiEditor.curlImage).click({\n      force: true\n    });\n    cy.get(\"textarea\").type(\"curl -X GET https://mock-api.appsmith.com/users\");\n    cy.importCurl();\n    cy.get(\"@curlImport\").then(response => {\n      cy.expect(response.response.body.responseMeta.success).to.eq(true);\n      cy.get(apiwidget.ApiName).invoke(\"text\").then(text => {\n        const someText = text;\n        expect(someText).to.equal(response.response.body.data.name);\n      });\n    }); //cy.WaitAutoSave();\n\n    cy.RunAPI();\n    cy.ResponseStatusCheck(\"200 OK\");\n    cy.get(ApiEditor.formActionButtons).should(\"be.visible\");\n    cy.get(ApiEditor.ApiActionMenu).first().click();\n    cy.get(ApiEditor.ApiDeleteBtn).click();\n    cy.get(ApiEditor.ApiDeleteBtn).contains(\"Are you sure?\").click();\n    cy.wait(\"@deleteAction\");\n    cy.get(\"@deleteAction\").then(response => {\n      cy.expect(response.response.body.responseMeta.success).to.eq(true);\n    });\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ApiTests/CurlImportFlow_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Bug:15175 Creating new cURL import query from entity explorer crashes the app","suites":["Test curl import flow"],"updatePoint":{"line":39,"column":83,"index":1575},"line":39,"code":"  it(\"Bug:15175 Creating new cURL import query from entity explorer crashes the app\", function () {\n    cy.CheckAndUnfoldEntityItem(\"PAGES\");\n    cy.get(`.t--entity-name:contains(\"Page1\")`).should(\"be.visible\").click({\n      force: true\n    });\n    cy.get(globalSearchLocators.createNew).click();\n    cy.xpath(\"//span[text()='New cURL Import']\").click();\n    cy.get(\"textarea\").type('curl -d \\'{\"name\":\"morpheus\",\"job\":\"leader\"}\\' -H Content-Type:application/json -X POST https://mock-api.appsmith.com/echo/post', {\n      force: true,\n      parseSpecialCharSequences: false\n    });\n    cy.importCurl();\n    cy.RunAPI();\n    cy.ResponseStatusCheck(\"201 CREATED\");\n    cy.get(\"@curlImport\").then(response => {\n      cy.expect(response.response.body.responseMeta.success).to.eq(true);\n      cy.get(apiwidget.ApiName).invoke(\"text\").then(text => {\n        const someText = text;\n        expect(someText).to.equal(response.response.body.data.name);\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ApiTests/CurlImportFlow_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create, test, save then delete a Arango datasource","suites":["Arango datasource test cases"],"updatePoint":{"line":12,"column":59,"index":426},"line":12,"code":"  it(\"1. Create, test, save then delete a Arango datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.ArangoDB).click();\n    cy.getPluginFormsAndCreateDatasource();\n    cy.fillArangoDBDatasourceForm();\n    cy.generateUUID().then(UUID => {\n      datasourceName = `Arango MOCKDS ${UUID}`;\n      cy.renameDatasource(datasourceName);\n    });\n    cy.get(\"@createDatasource\").then(httpResponse => {\n      datasourceName = httpResponse.response.body.data.name;\n    });\n    cy.intercept(\"POST\", \"/api/v1/datasources/test\", {\n      fixture: \"testAction.json\"\n    }).as(\"testDatasource\");\n    cy.testSaveDatasource(false);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/ArangoDataSourceStub_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Create with trailing white spaces in host address and database name, test, save then delete a Arango datasource","suites":["Arango datasource test cases"],"updatePoint":{"line":29,"column":120,"index":1139},"line":29,"code":"  it(\"2. Create with trailing white spaces in host address and database name, test, save then delete a Arango datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.ArangoDB).click();\n    cy.getPluginFormsAndCreateDatasource();\n    cy.fillArangoDBDatasourceForm(true);\n    cy.get(\"@createDatasource\").then(httpResponse => {\n      datasourceName = httpResponse.response.body.data.name;\n    });\n    cy.intercept(\"POST\", \"/api/v1/datasources/test\", {\n      fixture: \"testAction.json\"\n    }).as(\"testDatasource\");\n    cy.testSaveDatasource(false);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/ArangoDataSourceStub_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Create a new query from the datasource editor","suites":["Arango datasource test cases"],"updatePoint":{"line":42,"column":54,"index":1654},"line":42,"code":"  it(\"3. Create a new query from the datasource editor\", function () {\n    // cy.get(datasource.createQuery).click();\n    cy.get(`${datasourceEditor.datasourceCard} ${datasource.createQuery}`).last().click();\n    cy.wait(\"@createNewApi\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.deleteQueryUsingContext();\n    cy.deleteDatasource(datasourceName);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/ArangoDataSourceStub_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Bug: 12045 - No Blank screen diplay after New Authentication API datasource creation","suites":["Authenticated API Datasource"],"updatePoint":{"line":11,"column":93,"index":508},"line":11,"code":"  it(\"1. Bug: 12045 - No Blank screen diplay after New Authentication API datasource creation\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.get(apiwidget.createAuthApiDatasource).click();\n    cy.wait(\"@createDatasource\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.renameDatasource(\"FakeAuthenticatedApi\");\n    cy.fillAuthenticatedAPIForm();\n    cy.saveDatasource();\n    cy.contains(URL);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/AuthenticatedApiDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Bug: 12045 - No Blank screen diplay after editing/opening existing Authentication API datasource","suites":["Authenticated API Datasource"],"updatePoint":{"line":20,"column":105,"index":959},"line":20,"code":"  it(\"2. Bug: 12045 - No Blank screen diplay after editing/opening existing Authentication API datasource\", function () {\n    cy.xpath(\"//span[text()='EDIT']/parent::a\").click();\n    cy.get(datasourceEditor.url).type(\"/users\");\n    cy.saveDatasource();\n    cy.contains(URL + \"/users\");\n    cy.deleteDatasource(\"FakeAuthenticatedApi\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/AuthenticatedApiDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Bug: 14181 -Make sure the datasource view mode page does not contain labels with no value.","suites":["Authenticated API Datasource"],"updatePoint":{"line":27,"column":99,"index":1294},"line":27,"code":"  it(\"3. Bug: 14181 -Make sure the datasource view mode page does not contain labels with no value.\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.get(apiwidget.createAuthApiDatasource).click();\n    cy.wait(\"@createDatasource\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.renameDatasource(\"FakeAuthenticatedApi\");\n    cy.fillAuthenticatedAPIForm();\n    cy.saveDatasource();\n    cy.contains(headers).should(\"not.exist\");\n    cy.contains(queryParams).should(\"not.exist\");\n    cy.deleteDatasource(\"FakeAuthenticatedApi\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/AuthenticatedApiDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Check whether the delete button has the right color","suites":["Datasource form related tests"],"updatePoint":{"line":9,"column":60,"index":364},"line":9,"code":"  it(\"1. Check whether the delete button has the right color\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"Testapi\");\n    cy.enterDatasourceAndPath(testdata.baseUrl, testdata.methods);\n    cy.get(\".t--store-as-datasource\").trigger(\"click\").wait(1000);\n    agHelper.ValidateToastMessage(\"datasource created\"); //verifying there is no error toast, Bug 14566\n\n    cy.get(\".t--add-field\").first().click();\n    cy.get(\".t--delete-field\").should(\"attr\", \"color\", \"#A3B3BF\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/DatasourceForm_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Check if save button is disabled","suites":["Datasource form related tests"],"updatePoint":{"line":19,"column":41,"index":838},"line":19,"code":"  it(\"2. Check if save button is disabled\", function () {\n    cy.get(\".t--save-datasource\").should(\"not.be.disabled\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/DatasourceForm_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Check if saved api as a datasource does not fail on cloning","suites":["Datasource form related tests"],"updatePoint":{"line":22,"column":68,"index":990},"line":22,"code":"  it(\"3. Check if saved api as a datasource does not fail on cloning\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.get(\".t--entity-name\").contains(\"Testapi\").trigger(\"mouseover\");\n    cy.hoverAndClickParticularIndex(1);\n    cy.get('.single-select:contains(\"Copy to page\")').click();\n    cy.get('.single-select:contains(\"Page1\")').click({\n      force: true\n    });\n    cy.validateToastMessage(\"Testapi action copied to page Page1 successfully\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/DatasourceForm_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create elastic search datasource","suites":["Elastic search datasource tests"],"updatePoint":{"line":12,"column":41,"index":405},"line":12,"code":"  it(\"1. Create elastic search datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.ElasticSearch).click();\n    cy.generateUUID().then(uid => {\n      elasticSearchName = uid;\n      cy.get(\".t--edit-datasource-name\").click();\n      cy.get(\".t--edit-datasource-name input\").clear().type(elasticSearchName, {\n        force: true\n      }).should(\"have.value\", elasticSearchName).blur();\n    });\n    cy.wait(\"@saveDatasource\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.fillElasticDatasourceForm(); //once we have test values for elastic search we can test and save the datasources.\n    // cy.testSaveDatasource();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/ElasticSearchDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create Google Sheets datasource","suites":["Google Sheets datasource test cases"],"updatePoint":{"line":7,"column":40,"index":241},"line":7,"code":"  it(\"1. Create Google Sheets datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.googleSheets).click();\n    cy.get(datasource.scopeString).click();\n    cy.get(datasource.GS_readFiles).should(\"exist\");\n    cy.get(datasource.GS_readAndEditFiles).should(\"exist\");\n    cy.get(datasource.GS_readEditCreateAndDeleteFiles).should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/GoogleSheetsDataSourceStub_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create Query from Mock Mongo DB & verify active queries count","suites":["Validate Mock Query Active Ds querying & count"],"updatePoint":{"line":6,"column":70,"index":346},"line":6,"code":"  it(\"1. Create Query from Mock Mongo DB & verify active queries count\", () => {\n    dataSources.NavigateToDSCreateNew();\n    agHelper.GetNClick(dataSources._mockDB(\"Movies\"));\n    dataSources.CreateQuery(\"Movies\");\n    dataSources.ValidateNSelectDropdown(\"Commands\", \"Find Document(s)\");\n    agHelper.EnterValue(\"movies\", {\n      propFieldName: \"\",\n      directInput: false,\n      inputFieldName: \"Collection\"\n    });\n    dataSources.RunQueryNVerifyResponseViews(10, false);\n    dataSources.NavigateToActiveTab();\n    agHelper.GetText(dataSources._queriesOnPageText(\"Movies\")).then($queryCount => expect($queryCount).to.eq(\"1 query on this page\"));\n    ee.CreateNewDsQuery(\"Movies\");\n    dataSources.ValidateNSelectDropdown(\"Commands\", \"Find Document(s)\");\n    agHelper.EnterValue(\"movies\", {\n      propFieldName: \"\",\n      directInput: false,\n      inputFieldName: \"Collection\"\n    });\n    dataSources.RunQueryNVerifyResponseViews(10, false);\n    dataSources.NavigateToActiveTab();\n    agHelper.GetText(dataSources._queriesOnPageText(\"Movies\")).then($queryCount => expect($queryCount).to.eq(\"2 queries on this page\"));\n    ee.ExpandCollapseEntity(\"QUERIES/JS\");\n    ee.ActionContextMenuByEntityName(\"Query1\", \"Delete\", \"Are you sure?\");\n    ee.ActionContextMenuByEntityName(\"Query2\", \"Delete\", \"Are you sure?\");\n    dataSources.NavigateToActiveTab();\n    agHelper.GetText(dataSources._queriesOnPageText(\"Movies\")).then($queryCount => expect($queryCount).to.eq(\"No query in this application is using this datasource\"));\n    dataSources.DeleteDatasouceFromActiveTab(\"Movies\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/MockDBs_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"2. Create Query from Mock Postgres DB & verify active queries count","suites":["Validate Mock Query Active Ds querying & count"],"updatePoint":{"line":36,"column":73,"index":1932},"line":36,"code":"  it(\"2. Create Query from Mock Postgres DB & verify active queries count\", () => {\n    dataSources.NavigateToDSCreateNew();\n    agHelper.GetNClick(dataSources._mockDB(\"Users\"));\n    dataSources.CreateQuery(\"Users\");\n    agHelper.GetNClick(dataSources._templateMenuOption('Select'));\n    dataSources.RunQueryNVerifyResponseViews(10);\n    dataSources.NavigateToActiveTab();\n    agHelper.GetText(dataSources._queriesOnPageText(\"Users\")).then($queryCount => expect($queryCount).to.eq(\"1 query on this page\"));\n    ee.CreateNewDsQuery(\"Users\");\n    agHelper.GetNClick(dataSources._templateMenuOption('Select'));\n    dataSources.RunQueryNVerifyResponseViews(10, false);\n    dataSources.NavigateToActiveTab();\n    agHelper.GetText(dataSources._queriesOnPageText(\"Users\")).then($queryCount => expect($queryCount).to.eq(\"2 queries on this page\"));\n    ee.ExpandCollapseEntity(\"QUERIES/JS\");\n    ee.ActionContextMenuByEntityName(\"Query1\", \"Delete\", \"Are you sure?\");\n    ee.ActionContextMenuByEntityName(\"Query2\", \"Delete\", \"Are you sure?\");\n    dataSources.NavigateToActiveTab();\n    agHelper.GetText(dataSources._queriesOnPageText(\"Users\")).then($queryCount => expect($queryCount).to.eq(\"No query in this application is using this datasource\"));\n    dataSources.DeleteDatasouceFromActiveTab(\"Users\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/MockDBs_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"Create, test, save then delete a mongo datasource","suites":["Create, test, save then delete a mongo datasource"],"updatePoint":{"line":7,"column":55,"index":270},"line":7,"code":"  it(\"Create, test, save then delete a mongo datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.MongoDB).click();\n    cy.getPluginFormsAndCreateDatasource();\n    cy.fillMongoDatasourceForm();\n    cy.testSaveDeleteDatasource();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/MongoDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Create with trailing white spaces in host address and database name, test, save then delete a mongo datasource","suites":["Create, test, save then delete a mongo datasource"],"updatePoint":{"line":14,"column":116,"index":599},"line":14,"code":"  it(\"Create with trailing white spaces in host address and database name, test, save then delete a mongo datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.MongoDB).click();\n    cy.getPluginFormsAndCreateDatasource();\n    cy.fillMongoDatasourceForm(true); //fills form with trailing white spaces\n\n    cy.testSaveDeleteDatasource();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/MongoDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Create, test, save then delete a mongo datasource","suites":["Create, test, save then delete a mongo datasource"],"updatePoint":{"line":9,"column":55,"index":364},"line":9,"code":"  it(\"Create, test, save then delete a mongo datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.MongoDB).click();\n    cy.getPluginFormsAndCreateDatasource();\n    cy.fillMongoDatasourceForm();\n    cy.intercept(\"POST\", \"/api/v1/datasources/test\", {\n      fixture: \"testAction.json\"\n    }).as(\"testDatasource\");\n    cy.intercept(\"PUT\", \"/api/v1/datasources/*\", {\n      fixture: \"saveAction.json\"\n    }).as(\"saveDatasource\");\n    cy.get(\".t--test-datasource\").click();\n    cy.wait(\"@testDatasource\");\n    cy.get(\".t--save-datasource\").click();\n    cy.wait(\"@saveDatasource\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    /*\n    cy.NavigateToQueryEditor();\n     cy.get(\"@createDatasource\").then((httpResponse) => {\n      datasourceName = \"Untitled Datasource\";\n       cy.contains(\".t--datasource-name\", datasourceName)\n        .first()\n        .find(queryLocators.createQuery)\n        .click();\n    });\n     cy.get(\"@getPluginForm\").should(\n      \"have.nested.property\",\n      \"response.body.responseMeta.status\",\n      200,\n    );\n    cy.xpath('//div[contains(text(),\"Form Input\")]').click({ force: true });\n    cy.xpath('//div[contains(text(),\"Raw Input\")]').click({ force: true });\n    cy.get(queryLocators.templateMenu).click();\n    cy.get(\".CodeMirror textarea\")\n      .first()\n      .focus()\n      .type(`{\"find\": \"listingsAndReviews\",\"limit\": 10}`, {\n        parseSpecialCharSequences: false,\n      });\n     cy.EvaluateCurrentValue(`{\"find\": \"listingsAndReviews\",\"limit\": 10}`);\n    cy.runAndDeleteQuery();\n    });\n    /*\n    it(\"Create, test, save then delete a firestore datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.Firestore).click();\n    cy.getPluginFormsAndCreateDatasource();\n    cy.firestoreDatasourceForm();\n    cy.intercept(\"POST\", \"/api/v1/datasources/test\", {\n      fixture: \"testAction.json\",\n    }).as(\"testDatasource\");\n    cy.intercept(\"PUT\", \"/api/v1/datasources/*\", {\n      fixture: \"saveAction.json\",\n    }).as(\"saveDatasource\");\n    cy.get(\".t--test-datasource\").click();\n    cy.wait(\"@testDatasource\");\n    cy.get(\".t--save-datasource\").click();\n    cy.wait(\"@saveDatasource\").should(\n      \"have.nested.property\",\n      \"response.body.responseMeta.status\",\n      200,\n    );\n    });\n    it(\"Create, test, save then delete a amazon datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.AmazonS3).click();\n    cy.getPluginFormsAndCreateDatasource();\n    cy.amazonDatasourceForm();\n    cy.intercept(\"POST\", \"/api/v1/datasources/test\", {\n      fixture: \"testAction.json\",\n    }).as(\"testDatasource\");\n    cy.intercept(\"PUT\", \"/api/v1/datasources/*\", {\n      fixture: \"saveAction.json\",\n    }).as(\"saveDatasource\");\n    cy.get(\".t--test-datasource\").click();\n    cy.wait(\"@testDatasource\");\n    cy.get(\".t--save-datasource\").click();\n    cy.wait(\"@saveDatasource\").should(\n      \"have.nested.property\",\n      \"response.body.responseMeta.status\",\n      200,\n    );\n    });\n    */\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/MongoDataSourceStub_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create, test, save then delete a MsSQL datasource","suites":["MsSQL datasource test cases"],"updatePoint":{"line":12,"column":58,"index":424},"line":12,"code":"  it(\"1. Create, test, save then delete a MsSQL datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.MsSQL).click();\n    cy.getPluginFormsAndCreateDatasource();\n    cy.fillMsSQLDatasourceForm();\n    cy.generateUUID().then(UUID => {\n      datasourceName = `MsSQL MOCKDS ${UUID}`;\n      cy.renameDatasource(datasourceName);\n    });\n    cy.get(\"@createDatasource\").then(httpResponse => {\n      datasourceName = httpResponse.response.body.data.name;\n    });\n    cy.intercept(\"POST\", \"/api/v1/datasources/test\", {\n      fixture: \"testAction.json\"\n    }).as(\"testDatasource\");\n    cy.testSaveDatasource(false);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/MsSQLDataSourceStub_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Create with trailing white spaces in host address and database name, test, save then delete a MsSQL datasource","suites":["MsSQL datasource test cases"],"updatePoint":{"line":29,"column":119,"index":1129},"line":29,"code":"  it(\"2. Create with trailing white spaces in host address and database name, test, save then delete a MsSQL datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.MsSQL).click();\n    cy.getPluginFormsAndCreateDatasource();\n    cy.fillMsSQLDatasourceForm(true);\n    cy.get(\"@createDatasource\").then(httpResponse => {\n      datasourceName = httpResponse.response.body.data.name;\n    });\n    cy.intercept(\"POST\", \"/api/v1/datasources/test\", {\n      fixture: \"testAction.json\"\n    }).as(\"testDatasource\");\n    cy.testSaveDatasource(false);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/MsSQLDataSourceStub_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Create a new query from the datasource editor","suites":["MsSQL datasource test cases"],"updatePoint":{"line":42,"column":54,"index":1638},"line":42,"code":"  it(\"3. Create a new query from the datasource editor\", function () {\n    // cy.get(datasource.createQuery).click();\n    cy.get(`${datasourceEditor.datasourceCard} ${datasource.createQuery}`).last().click();\n    cy.wait(\"@createNewApi\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.deleteQueryUsingContext();\n    cy.deleteDatasource(datasourceName);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/MsSQLDataSourceStub_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create, test, save then delete a MySQL datasource","suites":["MySQL datasource test cases"],"updatePoint":{"line":12,"column":58,"index":424},"line":12,"code":"  it(\"1. Create, test, save then delete a MySQL datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.MySQL).click();\n    cy.getPluginFormsAndCreateDatasource();\n    cy.fillMySQLDatasourceForm();\n    cy.get(\"@createDatasource\").then(httpResponse => {\n      datasourceName = httpResponse.response.body.data.name;\n    });\n    cy.testSaveDatasource();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/MySQL_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Create with trailing white spaces in host address and database name, test, save then delete a MySQL datasource","suites":["MySQL datasource test cases"],"updatePoint":{"line":22,"column":119,"index":872},"line":22,"code":"  it(\"2. Create with trailing white spaces in host address and database name, test, save then delete a MySQL datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.MySQL).click();\n    cy.getPluginFormsAndCreateDatasource();\n    cy.fillMySQLDatasourceForm(true);\n    cy.get(\"@createDatasource\").then(httpResponse => {\n      datasourceName = httpResponse.response.body.data.name;\n    });\n    cy.testSaveDatasource();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/MySQL_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Create a new query from the datasource editor","suites":["MySQL datasource test cases"],"updatePoint":{"line":32,"column":54,"index":1259},"line":32,"code":"  it(\"3. Create a new query from the datasource editor\", function () {\n    // cy.get(datasource.createQuery).click();\n    cy.get(`${datasourceEditor.datasourceCard} ${datasource.createQuery}`).last().click();\n    cy.wait(\"@createNewApi\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.deleteQueryUsingContext();\n    cy.deleteDatasource(datasourceName);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/MySQL_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create, test, save then delete a MySQL datasource","suites":["MySQL datasource test cases"],"updatePoint":{"line":12,"column":58,"index":424},"line":12,"code":"  it(\"1. Create, test, save then delete a MySQL datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.MySQL).click();\n    cy.getPluginFormsAndCreateDatasource();\n    cy.fillMySQLDatasourceForm();\n    cy.generateUUID().then(UUID => {\n      datasourceName = `MySQL MOCKDS ${UUID}`;\n      cy.renameDatasource(datasourceName);\n    });\n    cy.get(\"@createDatasource\").then(httpResponse => {\n      datasourceName = httpResponse.response.body.data.name;\n    });\n    cy.intercept(\"POST\", \"/api/v1/datasources/test\", {\n      fixture: \"testAction.json\"\n    }).as(\"testDatasource\");\n    cy.testSaveDatasource(false);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/MySQLDataSourceStub_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Create with trailing white spaces in host address and database name, test, save then delete a MySQL datasource","suites":["MySQL datasource test cases"],"updatePoint":{"line":29,"column":119,"index":1129},"line":29,"code":"  it(\"2. Create with trailing white spaces in host address and database name, test, save then delete a MySQL datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.MySQL).click();\n    cy.getPluginFormsAndCreateDatasource();\n    cy.fillMySQLDatasourceForm(true);\n    cy.get(\"@createDatasource\").then(httpResponse => {\n      datasourceName = httpResponse.response.body.data.name;\n    });\n    cy.intercept(\"POST\", \"/api/v1/datasources/test\", {\n      fixture: \"testAction.json\"\n    }).as(\"testDatasource\");\n    cy.testSaveDatasource(false);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/MySQLDataSourceStub_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Create a new query from the datasource editor","suites":["MySQL datasource test cases"],"updatePoint":{"line":42,"column":54,"index":1638},"line":42,"code":"  it(\"3. Create a new query from the datasource editor\", function () {\n    // cy.get(datasource.createQuery).click();\n    cy.get(`${datasourceEditor.datasourceCard} ${datasource.createQuery}`).last().click();\n    cy.wait(\"@createNewApi\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.deleteQueryUsingContext();\n    cy.deleteDatasource(datasourceName);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/MySQLDataSourceStub_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Verify after killing MySQL session, app should not crash","suites":["MySQL noise test"],"updatePoint":{"line":15,"column":62,"index":502},"line":15,"code":"  it(\"Verify after killing MySQL session, app should not crash\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasourceEditor.MySQL).click();\n    cy.generateUUID().then(uid => {\n      datasourceName = uid;\n      cy.get(\".t--edit-datasource-name\").click();\n      cy.get(\".t--edit-datasource-name input\").clear().type(datasourceName, {\n        force: true\n      }).should(\"have.value\", datasourceName).blur();\n      cy.getPluginFormsAndCreateDatasource();\n      cy.fillMySQLDatasourceForm();\n      cy.testSaveDatasource();\n      cy.NavigateToActiveDSQueryPane(datasourceName);\n    });\n    cy.get(queryLocators.queryNameField).type(\"NoiseTestQuery\");\n    cy.get(queryLocators.templateMenu).click(); // mySQL query to fetch data\n\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"SELECT * FROM users where role = 'Admin' ORDER BY id LIMIT 10\", {\n      force: true,\n      parseSpecialCharSequences: false\n    });\n    cy.WaitAutoSave();\n    cy.runQuery();\n    cy.NavigateToAPI_Panel();\n    cy.log(\"Navigation to API Panel screen successful\"); // API for killing mySQL session\n\n    cy.CreateAPI(\"killSession\");\n    cy.enterDatasourceAndPath(\"http://localhost:5001/\", \"v1/noise/killmysql\");\n    cy.SaveAndRunAPI();\n    cy.ResponseCheck(\"killed\");\n    cy.get('.t--entity-name:contains(\"Page1\")').click({\n      force: true\n    });\n    cy.wait(2000); // run kill query\n\n    cy.get(\".bp3-button-text:contains('Kill Session')\").should(\"be.visible\");\n    cy.get(\".bp3-button-text:contains('Kill Session')\").click({\n      force: true\n    }); // run refresh query\n\n    cy.get(\".bp3-button-text:contains('Refresh Query')\").click({\n      force: true\n    });\n    cy.wait(2000);\n    cy.get(commonlocators.toastmsg).contains(\"UncaughtPromiseRejection: NoiseTestQuery failed to execute\");\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.statusCode).to.eq(\"200 OK\");\n    });\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.statusCode).to.eq(\"200 OK\");\n    });\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.statusCode).to.eq(\"5004\");\n      expect(response.body.data.title).to.eq(\"Datasource configuration is invalid\");\n    });\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/MySQLNoiseTest_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create, test, save then delete a postgres datasource","suites":["Postgres datasource test cases"],"updatePoint":{"line":12,"column":61,"index":430},"line":12,"code":"  it(\"1. Create, test, save then delete a postgres datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.PostgreSQL).click();\n    cy.getPluginFormsAndCreateDatasource();\n    cy.fillPostgresDatasourceForm();\n    cy.get(\"@createDatasource\").then(httpResponse => {\n      datasourceName = httpResponse.response.body.data.name;\n    });\n    cy.testSaveDatasource();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/PostgresDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Create with trailing white spaces in host address and database name, test, save then delete a postgres datasource","suites":["Postgres datasource test cases"],"updatePoint":{"line":22,"column":122,"index":889},"line":22,"code":"  it(\"2. Create with trailing white spaces in host address and database name, test, save then delete a postgres datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.PostgreSQL).click();\n    cy.getPluginFormsAndCreateDatasource();\n    cy.fillPostgresDatasourceForm(true);\n    cy.get(\"@createDatasource\").then(httpResponse => {\n      datasourceName = httpResponse.response.body.data.name;\n    });\n    cy.testSaveDatasource();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/PostgresDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Create a new query from the datasource editor","suites":["Postgres datasource test cases"],"updatePoint":{"line":32,"column":54,"index":1284},"line":32,"code":"  it(\"3. Create a new query from the datasource editor\", function () {\n    // cy.get(datasource.createQuery).click();\n    cy.get(`${datasourceEditor.datasourceCard} ${datasource.createQuery}`).last().click();\n    cy.wait(\"@createNewApi\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.deleteQueryUsingContext();\n    cy.deleteDatasource(datasourceName);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/PostgresDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create, test, save then delete a Redshift datasource","suites":["Redshift datasource test cases"],"updatePoint":{"line":12,"column":61,"index":430},"line":12,"code":"  it(\"1. Create, test, save then delete a Redshift datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.Redshift).click();\n    cy.getPluginFormsAndCreateDatasource();\n    cy.fillRedshiftDatasourceForm();\n    cy.generateUUID().then(UUID => {\n      datasourceName = `Redshift MOCKDS ${UUID}`;\n      cy.renameDatasource(datasourceName);\n    });\n    cy.get(\"@createDatasource\").then(httpResponse => {\n      datasourceName = httpResponse.response.body.data.name;\n    });\n    cy.intercept(\"POST\", \"/api/v1/datasources/test\", {\n      fixture: \"testAction.json\"\n    }).as(\"testDatasource\");\n    cy.testSaveDatasource(false);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/RedshiftDataSourceStub_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Create with trailing white spaces in host address and database name, test, save then delete a Redshift datasource","suites":["Redshift datasource test cases"],"updatePoint":{"line":29,"column":122,"index":1147},"line":29,"code":"  it(\"2. Create with trailing white spaces in host address and database name, test, save then delete a Redshift datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.Redshift).click();\n    cy.getPluginFormsAndCreateDatasource();\n    cy.fillRedshiftDatasourceForm(true);\n    cy.get(\"@createDatasource\").then(httpResponse => {\n      datasourceName = httpResponse.response.body.data.name;\n    });\n    cy.intercept(\"POST\", \"/api/v1/datasources/test\", {\n      fixture: \"testAction.json\"\n    }).as(\"testDatasource\");\n    cy.testSaveDatasource(false);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/RedshiftDataSourceStub_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Create a new query from the datasource editor","suites":["Redshift datasource test cases"],"updatePoint":{"line":42,"column":54,"index":1662},"line":42,"code":"  it(\"3. Create a new query from the datasource editor\", function () {\n    // cy.get(datasource.createQuery).click();\n    cy.get(`${datasourceEditor.datasourceCard} ${datasource.createQuery}`).last().click();\n    cy.wait(\"@createNewApi\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.deleteQueryUsingContext();\n    cy.deleteDatasource(datasourceName);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/RedshiftDataSourceStub_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Create a rest datasource + Bug 14566","suites":["Create a rest datasource"],"updatePoint":{"line":9,"column":42,"index":341},"line":9,"code":"  it(\"Create a rest datasource + Bug 14566\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI();\n    cy.enterDatasourceAndPath(testdata.baseUrl, testdata.methods);\n    cy.assertPageSave();\n    cy.get(\".t--store-as-datasource\").trigger(\"click\").wait(1000);\n    agHelper.ValidateToastMessage(\"datasource created\"); //verifying there is no error toast, Bug 14566\n\n    cy.testSelfSignedCertificateSettingsInREST(false);\n    cy.saveDatasource();\n    cy.contains(\".datasource-highlight\", \"https://mock-api.appsmith.com\");\n    cy.SaveAndRunAPI();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/RestApiDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Create an API with app url and save as Datasource","suites":["Datasource form OAuth2 authorization code related tests"],"updatePoint":{"line":8,"column":55,"index":354},"line":8,"code":"  it(\"Create an API with app url and save as Datasource\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"TestOAuth\");\n    cy.get(apiwidget.resourceUrl).first().click({\n      force: true\n    }).type(testdata.appUrl);\n    cy.get(\".t--store-as-datasource\").click();\n    cy.wait(\"@createDatasource\").then(interception => {\n      cy.log(interception.response.body.data);\n    });\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/RestApiOAuth2AuthorizationCodeValidation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Add Oauth details to datasource and save","suites":["Datasource form OAuth2 authorization code related tests"],"updatePoint":{"line":19,"column":46,"index":740},"line":19,"code":"  it(\"Add Oauth details to datasource and save\", function () {\n    cy.get(datasource.saveBtn).should(\"not.be.disabled\");\n    cy.addOAuth2AuthorizationCodeDetails(testdata.accessTokenUrl, testdata.clientID, testdata.clientSecret, testdata.authorizationURL);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/RestApiOAuth2AuthorizationCodeValidation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"validate save and Authorise","suites":["Datasource form OAuth2 authorization code related tests"],"updatePoint":{"line":23,"column":33,"index":990},"line":23,"code":"  it(\"validate save and Authorise\", function () {\n    cy.get(datasource.saveAndAuthorize).click();\n    cy.contains(\"#login-submit\", \"Login\");\n    cy.url().should(\"include\", \"oauth.mocklab.io/oauth/authorize\");\n    cy.xpath('//input[@name=\"email\"]').type(\"Test@email.com\");\n    cy.xpath('//input[@name=\"email\"]').type(\"Test\");\n    cy.xpath(\"//input[@name='password']\").type(\"Test@123\");\n    cy.xpath(\"//input[@id='login-submit']\").click();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/RestApiOAuth2AuthorizationCodeValidation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Create an API with app url and save as Datasource","suites":["Datasource form OAuth2 client credentials related tests"],"updatePoint":{"line":8,"column":55,"index":354},"line":8,"code":"  it(\"Create an API with app url and save as Datasource\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"TestOAuth\");\n    cy.get(apiwidget.resourceUrl).first().click({\n      force: true\n    }).type(testdata.appUrl);\n    cy.get(\".t--store-as-datasource\").click();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/RestApiOAuth2ClientCredentialsValidation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Add Oauth details to datasource and save","suites":["Datasource form OAuth2 client credentials related tests"],"updatePoint":{"line":16,"column":46,"index":629},"line":16,"code":"  it(\"Add Oauth details to datasource and save\", function () {\n    cy.get(datasource.saveBtn).should(\"not.be.disabled\");\n    cy.addOAuth2ClientCredentialsDetails(testdata.accessTokenUrl, testdata.clientID, testdata.clientSecret, testdata.oauth2Scopes);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/RestApiOAuth2ClientCredentialsValidation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create and configure smtp datasource and query, binding widgets to query fields","suites":["SMTP datasource test cases using ted"],"updatePoint":{"line":18,"column":88,"index":592},"line":18,"code":"  it(\"1. Create and configure smtp datasource and query, binding widgets to query fields\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.SMTP).click();\n    cy.generateUUID().then(uid => {\n      SMTPDatasourceName = uid;\n      cy.get(\".t--edit-datasource-name\").click();\n      cy.get(\".t--edit-datasource-name input\").clear().type(SMTPDatasourceName, {\n        force: true\n      }).should(\"have.value\", SMTPDatasourceName).blur();\n      cy.getPluginFormsAndCreateDatasource();\n      cy.fillSMTPDatasourceForm();\n      cy.testSaveDatasource();\n      cy.NavigateToActiveDSQueryPane(SMTPDatasourceName);\n    }); // create new query and bind fields with widgets\n\n    cy.get(queryLocators.queryNameField).type(\"smtpquery\");\n    cy.get(queryLocators.queryFromEmail).first().type(\"{{From.text}}\", {\n      parseSpecialCharSequences: false\n    });\n    cy.get(queryLocators.queryFromEmail).eq(1).type(\"{{To.text}}\", {\n      parseSpecialCharSequences: false\n    });\n    cy.get(queryLocators.queryFromEmail).eq(4).type(\"{{Subject.text}}\", {\n      parseSpecialCharSequences: false\n    });\n    cy.get(queryLocators.queryFromEmail).eq(5).type(\"{{Body.text}}\", {\n      parseSpecialCharSequences: false\n    });\n    cy.get(queryLocators.queryFromEmail).eq(6).type(\"{{FilePicker.text}}\", {\n      parseSpecialCharSequences: false\n    });\n    cy.get(`.t--entity-name:contains(\"Page1\")`).should(\"be.visible\").click({\n      force: true\n    });\n    cy.wait(2000);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/SMTPDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. On canvas, passing wrong email address in widgets should give error","suites":["SMTP datasource test cases using ted"],"updatePoint":{"line":54,"column":76,"index":2052},"line":54,"code":"  it(\"2. On canvas, passing wrong email address in widgets should give error\", function () {\n    // verify an error is thrown when recipient address is not added\n    cy.xpath(\"//input[@class='bp3-input']\").eq(0).type(\"test@appsmith.com\");\n    cy.get(\"span.bp3-button-text:contains('Run query')\").closest(\"div\").click();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.statusCode).to.eq(\"5005\");\n      expect(response.body.data.body).to.contain(\"Couldn't find a valid recipient address. Please check your action configuration\");\n    }); // verify an error is thrown when sender address is not added\n\n    cy.xpath(\"//input[@class='bp3-input']\").eq(0).clear();\n    cy.xpath(\"//input[@class='bp3-input']\").eq(1).type(\"qwerty@appsmith.com\");\n    cy.get(\"span.bp3-button-text:contains('Run query')\").closest(\"div\").click();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.statusCode).to.eq(\"5005\");\n      expect(response.body.data.body).to.contain(\"Couldn't find a valid sender address. Please check your action configuration\");\n    });\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/SMTPDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Mock datasource card design","suites":["Validate Datasource Panel Styles"],"updatePoint":{"line":18,"column":36,"index":656},"line":18,"code":"  it(\"1. Mock datasource card design\", () => {\n    cy.get(pages.integrationCreateNew).click(); //Card container style\n\n    cy.datasourceCardContainerStyle(\".t--mock-datasource-list\"); //Datasource card\n\n    cy.datasourceCardStyle(\".t--mock-datasource\"); //Description\n\n    cy.mockDatasourceDescriptionStyle(\"[data-testid=mockdatasource-description]\"); //mock datasource image\n\n    cy.datasourceImageStyle(\"[data-testid=mock-datasource-image]\"); //header text\n\n    cy.datasourceContentWrapperStyle(\".t--datasource-name\"); //Icon wrapper\n\n    cy.datasourceIconWrapperStyle(\"[data-testid=mock-datasource-icon-wrapper]\"); //Name wrapper\n\n    cy.get(\"[data-testid=mock-datasource-name-wrapper]\").should(\"have.css\", \"display\", \"flex\").and(\"have.css\", \"flex-direction\", \"column\"); //Name\n\n    cy.datasourceNameStyle(\"[data-testid=mockdatasource-name]\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/Styles_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Database datasource card design","suites":["Validate Datasource Panel Styles"],"updatePoint":{"line":37,"column":40,"index":1513},"line":37,"code":"  it(\"2. Database datasource card design\", () => {\n    cy.get(pages.integrationCreateNew).click(); //Card container style\n\n    cy.datasourceCardContainerStyle(\"[data-testid=database-datasource-card-container]\"); //Datasource card\n\n    cy.datasourceCardStyle(\"[data-testid=database-datasource-card]\"); //mock datasource image\n\n    cy.datasourceImageStyle(\"[data-testid=database-datasource-image]\"); //header text\n\n    cy.datasourceContentWrapperStyle(\"[data-testid=database-datasource-content-wrapper]\"); //Icon wrapper\n\n    cy.datasourceIconWrapperStyle(\"[data-testid=database-datasource-content-wrapper] .dataSourceImageWrapper\"); //Name\n\n    cy.datasourceNameStyle(\"[data-testid=database-datasource-content-wrapper] .textBtn\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/Styles_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. New API datasource card design","suites":["Validate Datasource Panel Styles"],"updatePoint":{"line":52,"column":39,"index":2248},"line":52,"code":"  it(\"3. New API datasource card design\", () => {\n    cy.get(pages.integrationCreateNew).click(); //Card container style\n\n    cy.datasourceCardContainerStyle(\"[data-testid=newapi-datasource-card-container]\"); //Datasource card\n\n    cy.datasourceCardStyle(\".t--createBlankApiCard\"); //Datasource image\n\n    cy.datasourceImageStyle(\".content-icon\"); //Header text\n\n    cy.datasourceContentWrapperStyle(\"[data-testid=newapi-datasource-content-wrapper]\"); //Icon wrapper\n\n    cy.datasourceIconWrapperStyle(\".content-icon-wrapper\"); //Name\n\n    cy.datasourceNameStyle(\".t--createBlankApiCard .textBtn\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/Styles_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Datasource title font size","suites":["Validate Datasource Panel Styles"],"updatePoint":{"line":67,"column":35,"index":2849},"line":67,"code":"  it(\"4. Datasource title font size\", () => {\n    cy.get(\".t--integrationsHomePage\").should(\"have.css\", \"font-size\", \"20px\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/Styles_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Action button icon placement","suites":["Validate Datasource Panel Styles"],"updatePoint":{"line":70,"column":37,"index":2983},"line":70,"code":"  it(\"5. Action button icon placement\", () => {\n    //Navigate to Active tab\n    cy.get(pages.integrationActiveTab).click({\n      force: true\n    }); //Icon should be placed left to the text.\n\n    cy.get(\".t--create-query .t--left-icon\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/Styles_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Datasource Active card styles","suites":["Validate Datasource Panel Styles"],"updatePoint":{"line":78,"column":38,"index":3229},"line":78,"code":"  it(\"6. Datasource Active card styles\", () => {\n    //Active card wrapper\n    cy.get(\".t--datasource\").should(\"have.css\", \"padding\", \"15px\").and(\"have.css\", \"cursor\", \"pointer\").realHover().should(\"have.css\", \"background-color\", backgroundColorGray1);\n    cy.get(\"[data-testid=active-datasource-image]\").should(\"have.css\", \"height\", \"18px\").and(\"have.css\", \"max-width\", \"100%\");\n    cy.get(\"[data-testid=active-datasource-icon-wrapper]\").should(\"have.css\", \"background-color\", backgroundColorGray2).and(\"have.css\", \"width\", \"34px\").and(\"have.css\", \"height\", \"34px\").and(\"have.css\", \"border-radius\", \"50%\").and(\"have.css\", \"display\", \"flex\").and(\"have.css\", \"align-items\", \"center\"); //Name\n\n    cy.datasourceNameStyle(\"[data-testid=active-datasource-name]\"); //Queries\n\n    cy.get(\"[data-testid=active-datasource-queries]\").should(\"have.css\", \"display\", \"flex\").and(\"have.css\", \"margin\", \"4px 0px\"); //Buttons wrapper\n\n    cy.get(\".t--datasource-name .action-wrapper\").should(\"have.css\", \"gap\", \"10px\").and(\"have.css\", \"display\", \"flex\").and(\"have.css\", \"align-items\", \"center\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/Styles_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Collapse component styles","suites":["Validate Datasource Panel Styles"],"updatePoint":{"line":90,"column":34,"index":4312},"line":90,"code":"  it(\"7. Collapse component styles\", () => {\n    //Collapse wrapper\n    cy.get(\"[data-testid=datasource-collapse-wrapper]\").should(\"have.css\", \"color\", backgroundColorGray700).and(\"have.css\", \"display\", \"flex\").and(\"have.css\", \"gap\", \"8px\").and(\"have.css\", \"align-items\", \"center\"); //Collapse icon\n\n    cy.get(\"[data-testid=datasource-collapse-icon] svg\").invoke(\"attr\", \"data-icon\").should(\"eq\", \"arrow-right\");\n    cy.get(\"[data-testid=datasource-collapse-icon] svg\").invoke(\"attr\", \"fill\").should(\"eq\", \"#4B4848\");\n    cy.get(\"[data-testid=datasource-collapse-icon] svg\").invoke(\"attr\", \"width\").should(\"eq\", \"12\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/Styles_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Allows execution of js function when lint warnings(not errors) are present in code","suites":["JS Function Execution"],"updatePoint":{"line":56,"column":91,"index":1895},"line":56,"code":"  it(\"1. Allows execution of js function when lint warnings(not errors) are present in code\", function () {\n    jsEditor.CreateJSObject(`export default {\n  \tmyFun1: ()=>{\n  \t\tf;\n  \t\treturn \"yes\"\n  \t}\n  }`, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true\n    });\n    jsEditor.AssertParseError(false, false);\n    agHelper.ActionContextMenuWithInPane(\"Delete\", \"\", true);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/JsFunctionExecution/JSFunctionExecution_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"2. Prevents execution of js function when parse errors are present in code","suites":["JS Function Execution"],"updatePoint":{"line":71,"column":80,"index":2314},"line":71,"code":"  it(\"2. Prevents execution of js function when parse errors are present in code\", function () {\n    jsEditor.CreateJSObject(`export default {\n  \tmyFun1: ()=>>{\n  \t\treturn \"yes\"\n  \t}\n  }`, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true\n    });\n    jsEditor.AssertParseError(true, false);\n    agHelper.ActionContextMenuWithInPane(\"Delete\", \"\", true);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/JsFunctionExecution/JSFunctionExecution_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"3. Prioritizes parse errors that render JS Object invalid over function execution parse errors in debugger callouts","suites":["JS Function Execution"],"updatePoint":{"line":85,"column":121,"index":2767},"line":85,"code":"  it(\"3. Prioritizes parse errors that render JS Object invalid over function execution parse errors in debugger callouts\", function () {\n    const JSObjectWithFunctionExecutionParseErrors = `export default {\n      myFun1 :()=>{\n        return f\n      }\n    }`;\n    const JSObjectWithParseErrors = `export default {\n      myFun1:  (a ,b)=>>{\n      return \"yes\"\n      }\n    }`; // create jsObject with parse error (that doesn't render JS Object invalid)\n\n    jsEditor.CreateJSObject(JSObjectWithFunctionExecutionParseErrors, {\n      paste: true,\n      completeReplace: true,\n      toRun: true,\n      shouldCreateNewJSObj: true\n    }); // Assert presence of function execution parse error callout\n\n    jsEditor.AssertParseError(true, true); // Add parse error that renders JS Object invalid in code\n\n    jsEditor.CreateJSObject(JSObjectWithParseErrors, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: false\n    });\n    agHelper.Sleep(2000); // Giving more time for parsing to reduce flakiness!\n    // Assert presence of parse error callout (entire JS Object is invalid)\n\n    jsEditor.AssertParseError(true, false);\n    agHelper.ActionContextMenuWithInPane(\"Delete\", \"\", true);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/JsFunctionExecution/JSFunctionExecution_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"4. Shows lint error and toast modal when JS Object doesn't start with 'export default'","suites":["JS Function Execution"],"updatePoint":{"line":118,"column":92,"index":3969},"line":118,"code":"  it(\"4. Shows lint error and toast modal when JS Object doesn't start with 'export default'\", () => {\n    const invalidJSObjectStartToastMessage = \"Start object with export default\";\n    const jsComment = \"// This is a comment\";\n    const jsObjectStartLine = \"export default{\";\n    const jsObjectStartLineWithSpace = `export  default{`;\n    const jsObjectStartingWithAComment = `${jsComment}\n  ${jsObjectStartLine}\n        fun1:()=>true\n      }`;\n    const jsObjectStartingWithASpace = `${jsObjectStartLineWithSpace}\n        fun1:()=>true\n      }`;\n    const jsObjectStartingWithANewLine = `\n  ${jsObjectStartLine}\n        fun1:()=>true\n      }`;\n\n    const assertInvalidJSObjectStart = (jsCode, highlightedLintText) => {\n      // create jsObject that doesn't start with 'export default'\n      jsEditor.CreateJSObject(jsCode, {\n        paste: true,\n        completeReplace: true,\n        toRun: false,\n        shouldCreateNewJSObj: true\n      }); // Assert presence of toast message\n\n      agHelper.WaitUntilToastDisappear(invalidJSObjectStartToastMessage); // Assert presence of lint error at the start line\n\n      cy.get(locator._lintErrorElement).should(\"exist\").should(\"contain.text\", highlightedLintText);\n      agHelper.ActionContextMenuWithInPane(\"Delete\", \"\", true);\n    };\n\n    assertInvalidJSObjectStart(jsObjectStartingWithAComment, jsComment);\n    assertInvalidJSObjectStart(jsObjectStartingWithANewLine, jsObjectStartLine);\n    assertInvalidJSObjectStart(jsObjectStartingWithASpace, jsObjectStartLineWithSpace);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/JsFunctionExecution/JSFunctionExecution_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"5. Verify that js function execution errors are logged in debugger and removed when function is deleted","suites":["JS Function Execution"],"updatePoint":{"line":154,"column":109,"index":5518},"line":154,"code":"  it(\"5. Verify that js function execution errors are logged in debugger and removed when function is deleted\", () => {\n    const JS_OBJECT_WITH_PARSE_ERROR = `export default {\n      myVar1: [],\n      myVar2: {},\n      myFun1: () => {\n        //write code here\n        return Table1.unknown.name\n      }\n    }`;\n    const JS_OBJECT_WITHOUT_PARSE_ERROR = `export default {\n      myVar1: [],\n      myVar2: {},\n      myFun1: () => {\n        //write code here\n        return Table1.unknown\n      }\n    }`;\n    const JS_OBJECT_WITH_DELETED_FUNCTION = `export default {\n      myVar1: [],\n      myVar2: {}\n    }`; // Create js object\n\n    jsEditor.CreateJSObject(JS_OBJECT_WITH_PARSE_ERROR, {\n      paste: true,\n      completeReplace: true,\n      toRun: true,\n      shouldCreateNewJSObj: true\n    }); // Assert that there is a function execution parse error\n\n    jsEditor.AssertParseError(true, true); // click the debug icon\n\n    agHelper.GetNClick(jsEditor._debugCTA); // Assert that errors tab is not empty\n\n    cy.contains(\"No signs of trouble here!\").should(\"not.exist\"); // Assert presence of typeError\n\n    cy.contains(\"TypeError: Cannot read properties of undefined (reading 'name')\").should(\"exist\"); // Fix parse error and assert that debugger error is removed\n\n    jsEditor.EditJSObj(JS_OBJECT_WITHOUT_PARSE_ERROR);\n    agHelper.GetNClick(jsEditor._runButton);\n    jsEditor.AssertParseError(false, true);\n    agHelper.GetNClick(locator._errorTab);\n    cy.contains(\"TypeError: Cannot read properties of undefined (reading 'name')\").should(\"not.exist\"); // Switch back to response tab\n\n    agHelper.GetNClick(locator._responseTab); // Re-introduce parse errors\n\n    jsEditor.EditJSObj(JS_OBJECT_WITH_PARSE_ERROR);\n    agHelper.GetNClick(jsEditor._runButton);\n    agHelper.WaitUntilToastDisappear(\"ran successfully\"); //to not hinder with next toast msg in next case!\n    // Assert that there is a function execution parse error\n\n    jsEditor.AssertParseError(true, true); // Delete function\n\n    jsEditor.EditJSObj(JS_OBJECT_WITH_DELETED_FUNCTION); // Assert that parse error is removed from debugger when function is deleted\n\n    agHelper.GetNClick(locator._errorTab);\n    cy.contains(\"TypeError: Cannot read properties of undefined (reading 'name')\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/JsFunctionExecution/JSFunctionExecution_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"6. Supports the use of large JSON data (doesn't crash)","suites":["JS Function Execution"],"updatePoint":{"line":211,"column":60,"index":7751},"line":211,"code":"  it(\"6. Supports the use of large JSON data (doesn't crash)\", () => {\n    const jsObjectWithLargeJSONData = `export default{\n      largeData: ${JSON.stringify(largeJSONData)},\n      myfun1: ()=> this.largeData\n    }`;\n    const crashMessage = \"Oops! Something went wrong\"; // create jsObject with large json data and run\n\n    jsEditor.CreateJSObject(jsObjectWithLargeJSONData, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true\n    }); // wait for 3 secs and assert that App doesn't crash\n\n    cy.wait(3000);\n    cy.contains(crashMessage).should(\"not.exist\"); // Edit JSObject and run\n\n    jsEditor.CreateJSObject(\" \", {\n      paste: true,\n      completeReplace: false,\n      toRun: true,\n      shouldCreateNewJSObj: false\n    });\n    cy.get(\"@jsObjName\").then(jsObjName => {\n      ee.SelectEntityByName(\"Table1\", \"WIDGETS\");\n      propPane.UpdatePropertyFieldValue(\"Table Data\", `{{${jsObjName}.largeData}}`);\n    }); // Deploy App and test that table loads properly\n\n    deployMode.DeployApp();\n    table.WaitUntilTableLoad();\n    table.ReadTableRowColumnData(0, 1, 2000).then($cellData => {\n      expect($cellData).to.eq(\"1\"); //validating id column value - row 0\n\n      deployMode.NavigateBacktoEditor();\n    });\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/JsFunctionExecution/JSFunctionExecution_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"7. Doesn't cause cyclic dependency when function name is edited","suites":["JS Function Execution"],"updatePoint":{"line":247,"column":69,"index":9036},"line":247,"code":"  it(\"7. Doesn't cause cyclic dependency when function name is edited\", () => {\n    const syncJSCode = `export default {\n      myFun1 :()=>{\n        return \"yes\"\n      }\n    }`;\n    const syncJSCodeWithRenamedFunction1 = `export default {\n      myFun2 :()=>{\n        return \"yes\"\n      }\n    }`;\n    const syncJSCodeWithRenamedFunction2 = `export default {\n      myFun3 :()=>{\n        return \"yes\"\n      }\n    }`;\n    const asyncJSCode = `export default {\n      myFun1 :async ()=>{\n        return \"yes\"\n      }\n    }`;\n    const asyncJSCodeWithRenamedFunction1 = `export default {\n      myFun2 :async ()=>{\n        return \"yes\"\n      }\n    }`;\n    const asyncJSCodeWithRenamedFunction2 = `export default {\n      myFun3 :async ()=>{\n        return \"yes\"\n      }\n    }`;\n    jsEditor.CreateJSObject(syncJSCode, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true\n    }); // change sync function name and test that cyclic dependency is not created\n\n    jsEditor.EditJSObj(syncJSCodeWithRenamedFunction1);\n    agHelper.AssertElementAbsence(locator._toastMsg);\n    jsEditor.EditJSObj(syncJSCodeWithRenamedFunction2);\n    agHelper.AssertElementAbsence(locator._toastMsg);\n    jsEditor.CreateJSObject(asyncJSCode, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true\n    }); // change async function name and test that cyclic dependency is not created\n\n    jsEditor.EditJSObj(asyncJSCodeWithRenamedFunction1);\n    agHelper.AssertElementAbsence(locator._toastMsg);\n    jsEditor.EditJSObj(asyncJSCodeWithRenamedFunction2);\n    agHelper.AssertElementAbsence(locator._toastMsg);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/JsFunctionExecution/JSFunctionExecution_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"8. Maintains order of async functions in settings tab alphabetically at all times","suites":["JS Function Execution"],"updatePoint":{"line":301,"column":87,"index":10729},"line":301,"code":"  it(\"8. Maintains order of async functions in settings tab alphabetically at all times\", function () {\n    functionsLength = FUNCTIONS_SETTINGS_DEFAULT_DATA.length; // Number of functions set to run on page load and should also confirm before execute\n\n    onPageLoadAndConfirmExecuteFunctionsLength = FUNCTIONS_SETTINGS_DEFAULT_DATA.filter(func => func.onPageLoad && func.confirmBeforeExecute).length;\n\n    getJSObject = data => {\n      let JS_OBJECT_BODY = `export default`;\n\n      for (let i = 0; i < functionsLength; i++) {\n        const functionName = data[i].name;\n        JS_OBJECT_BODY += i === 0 ? `{\n              ${functionName}: async ()=>\"${functionName}\",` : i === functionsLength - 1 ? `\n            ${functionName}: async ()=>\"${functionName}\",\n          }` : `\n            ${functionName}: async ()=> \"${functionName}\",`;\n      }\n\n      return JS_OBJECT_BODY;\n    }; // Create js object\n\n\n    jsEditor.CreateJSObject(getJSObject(FUNCTIONS_SETTINGS_DEFAULT_DATA), {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true\n    });\n    cy.get(\"@jsObjName\").then(jsObjName => {\n      jsObj = jsObjName;\n    }); // Switch to settings tab\n\n    agHelper.GetNClick(jsEditor._settingsTab); // Add settings for each function (according to data)\n\n    Object.values(FUNCTIONS_SETTINGS_DEFAULT_DATA).forEach(functionSetting => {\n      jsEditor.EnableDisableAsyncFuncSettings(functionSetting.name, functionSetting.onPageLoad, functionSetting.confirmBeforeExecute);\n    }); // Switch to settings tab\n\n    agHelper.GetNClick(jsEditor._settingsTab); //After JSObj is created - check methods are in alphabetical order\n\n    assertAsyncFunctionsOrder(FUNCTIONS_SETTINGS_DEFAULT_DATA);\n    agHelper.RefreshPage(); // click \"Yes\" button for all onPageload && ConfirmExecute functions\n\n    for (let i = 0; i <= onPageLoadAndConfirmExecuteFunctionsLength - 1; i++) {\n      //agHelper.AssertElementPresence(jsEditor._dialog(\"Confirmation Dialog\")); // Not working in edit mode\n      agHelper.ClickButton(\"Yes\");\n      agHelper.Sleep();\n    } // Switch to settings tab and assert order\n\n\n    agHelper.GetNClick(jsEditor._settingsTab);\n    assertAsyncFunctionsOrder(FUNCTIONS_SETTINGS_DEFAULT_DATA);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/JsFunctionExecution/JSFunctionExecution_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"9. Verify Async methods have alphabetical order after cloning page and renaming it","suites":["JS Function Execution"],"updatePoint":{"line":353,"column":88,"index":12971},"line":353,"code":"  it(\"9. Verify Async methods have alphabetical order after cloning page and renaming it\", () => {\n    const FUNCTIONS_SETTINGS_RENAMED_DATA = [{\n      name: \"newGetId\",\n      onPageLoad: true,\n      confirmBeforeExecute: false\n    }, {\n      name: \"zip1\",\n      onPageLoad: true,\n      confirmBeforeExecute: true\n    }, {\n      name: \"base\",\n      onPageLoad: false,\n      confirmBeforeExecute: false\n    }, {\n      name: \"newAssert\",\n      onPageLoad: true,\n      confirmBeforeExecute: false\n    }, {\n      name: \"test\",\n      onPageLoad: true,\n      confirmBeforeExecute: true\n    }]; // clone page and assert order of functions\n\n    ee.ClonePage(); // click \"Yes\" button for all onPageload && ConfirmExecute functions\n\n    for (let i = 0; i <= onPageLoadAndConfirmExecuteFunctionsLength - 1; i++) {\n      //agHelper.AssertElementPresence(jsEditor._dialog(\"Confirmation Dialog\")); // Not working in edit mode\n      agHelper.ClickButton(\"Yes\");\n      agHelper.Sleep();\n    }\n\n    ee.SelectEntityByName(jsObj, \"QUERIES/JS\");\n    agHelper.GetNClick(jsEditor._settingsTab);\n    assertAsyncFunctionsOrder(FUNCTIONS_SETTINGS_DEFAULT_DATA); // rename functions and assert order\n\n    agHelper.GetNClick(jsEditor._codeTab);\n    jsEditor.EditJSObj(getJSObject(FUNCTIONS_SETTINGS_RENAMED_DATA));\n    cy.wait(3000);\n    agHelper.GetNClick(jsEditor._settingsTab);\n    assertAsyncFunctionsOrder(FUNCTIONS_SETTINGS_RENAMED_DATA);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/JsFunctionExecution/JSFunctionExecution_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"Will load an api on load","suites":["API Panel Test Functionality"],"updatePoint":{"line":11,"column":30,"index":337},"line":11,"code":"  it(\"Will load an api on load\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"PageLoadApi\");\n    cy.enterDatasourceAndPath(testdata.baseUrl, testdata.methods);\n    cy.WaitAutoSave();\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.testJsontext(\"tabledata\", \"{{PageLoadApi.data.data}}\");\n    cy.wait(\"@updateLayout\");\n    cy.get(commonlocators.toastMsg).contains(`[PageLoadApi] will be executed automatically on page load`);\n    cy.reload();\n    cy.wait(30000);\n    cy.wait(\"@postExecute\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/OnLoadTests/Action_PageOnLoad_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Shows which action failed on action fail.","suites":["API Panel Test Functionality"],"updatePoint":{"line":24,"column":47,"index":937},"line":24,"code":"  it(\"Shows which action failed on action fail.\", function () {\n    cy.wait(2000);\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"PageLoadApi2\");\n    cy.enterDatasourceAndPath(\"https://abc.com\", \"users\");\n    cy.WaitAutoSave();\n    cy.get(\"li:contains('Settings')\").click({\n      force: true\n    });\n    cy.get(\"[name=executeOnLoad]\").click({\n      force: true\n    });\n    cy.wait(\"@setExecuteOnLoad\");\n    cy.wait(3000);\n    cy.get(\".t--global-search-modal-trigger\").click({\n      force: true\n    });\n    cy.get(\".t--global-search-input\").type(\"Table1{enter}\", {\n      delay: 300\n    });\n    cy.wait(2000);\n    cy.testJsontext(\"tabledata\", \"{{PageLoadApi2.data.data}}\");\n    cy.wait(\"@updateLayout\");\n    cy.reload();\n    cy.get(commonlocators.toastMsg).contains(`The action \"PageLoadApi2\" has failed.`);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/OnLoadTests/Action_PageOnLoad_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Checks whether execute action is getting called on page load only once","suites":["Execute Action Functionality"],"updatePoint":{"line":15,"column":79,"index":653},"line":15,"code":"  it(\"1. Checks whether execute action is getting called on page load only once\", function () {\n    // Open deployed version\n    cy.get(\".t--draggable-textwidget\").should(\"be.visible\"); // cy.get(homePage.deployPopupOptionTrigger).click({ force: true });\n    // cy.get(homePage.currentDeployedPreviewBtn)\n    //   .invoke(\"removeAttr\", \"target\")\n    //   .click();\n\n    cy.PublishtheApp();\n    cy.get(\".t--widget-textwidget\").contains(\"User count :5\");\n    let completedIds = [];\n    cy.get(\"@postExecute.all\").then(respBody => {\n      const totalRequests = [...new Set(respBody.map(req => req.browserRequestId))];\n      completedIds = totalRequests;\n      return totalRequests;\n    }).should(\"have.length\", 2); //Count from Initial Import + Deployed Mode - Page 1 execute call - hence count 2\n\n    cy.wait(500);\n    cy.get(\".t--page-switch-tab\").contains(\"Page2\").click({\n      force: true\n    });\n    cy.get(\".t--widget-textwidget\").contains(\"User count :10\");\n    cy.get(\"@postExecute.all\").then(respBody => {\n      const totalRequests = [...new Set(respBody.map(req => req.browserRequestId))];\n      return totalRequests.filter(reqId => !completedIds.includes(reqId));\n    }).should(\"have.length\", 1); // Since Page 2 is switched - previous count is washed out, and this is only call\n\n    cy.get(\".t--page-switch-tab\").contains(\"Page1\").click({\n      force: true\n    });\n    cy.get(\".t--widget-textwidget\").contains(\"User count :5\");\n    cy.get(\"@postExecute.all\").then(respBody => {\n      const totalRequests = [...new Set(respBody.map(req => req.browserRequestId))];\n      return totalRequests.filter(reqId => !completedIds.includes(reqId));\n    }).should(\"have.length\", 2); // Since its within deployed page, switching to Page 1 , adds one more to previous count!\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/OnLoadTests/ExecuteAction_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Run create new user query","suites":["Test Postgres number of connections on page load + Bug 11572, Bug 11202"],"updatePoint":{"line":24,"column":34,"index":950},"line":24,"code":"  it(\"1. Run create new user query\", () => {\n    ee.CreateNewDsQuery(dsName_1);\n    agHelper.GetNClick(dataSources._templateMenu);\n    agHelper.RenameWithInPane(\"create_user\");\n    const userName = \"test_conn_user_\" + guid;\n    const userCreateQuery = `create user ` + userName + ` with password 'password'; grant select, insert, update, delete on all tables in schema public to ` + userName + `;`;\n    dataSources.EnterQuery(userCreateQuery);\n    dataSources.RunQuery();\n    dataSources.ReadQueryTableResponse(0).then($cellData => {\n      expect($cellData).to.eq(\"0\");\n    });\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/OnLoadTests/PostgresConnections_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"2. Create new datasource for user test_conn_user","suites":["Test Postgres number of connections on page load + Bug 11572, Bug 11202"],"updatePoint":{"line":36,"column":54,"index":1554},"line":36,"code":"  it(\"2. Create new datasource for user test_conn_user\", () => {\n    dataSources.NavigateToDSCreateNew();\n    dataSources.CreatePlugIn(\"PostgreSQL\");\n    agHelper.RenameWithInPane(\"Postgres_2_ \" + guid, false);\n    const userName = \"test_conn_user_\" + guid;\n    dataSources.FillPostgresDSForm(false, userName, \"password\");\n    dataSources.TestSaveDatasource();\n    cy.wrap(\"Postgres_2_ \" + guid).as(\"dsName_2\");\n    cy.get(\"@dsName_2\").then($dsName => {\n      dsName_2 = $dsName;\n    });\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/OnLoadTests/PostgresConnections_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"3. Create 10 queries","suites":["Test Postgres number of connections on page load + Bug 11572, Bug 11202"],"updatePoint":{"line":48,"column":26,"index":2020},"line":48,"code":"  it(\"3. Create 10 queries\", () => {\n    for (let i = 1; i <= 10; i++) {\n      dataSources.NavigateFromActiveDS(dsName_2, true);\n      agHelper.GetNClick(dataSources._templateMenu);\n      agHelper.RenameWithInPane(\"Query_\" + i);\n      const userCreateQuery = `select table_name from information_schema.tables where table_schema='public' and table_type='BASE TABLE';`;\n      dataSources.EnterQuery(userCreateQuery);\n    }\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/OnLoadTests/PostgresConnections_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"4. Bind queries to select widget","suites":["Test Postgres number of connections on page load + Bug 11572, Bug 11202"],"updatePoint":{"line":57,"column":38,"index":2459},"line":57,"code":"  it(\"4. Bind queries to select widget\", () => {\n    for (let i = 1; i <= 10; i++) {\n      ee.DragDropWidgetNVerify(\"selectwidget\", i * 50 + 50, i * 50 + 200);\n      propPane.UpdatePropertyFieldValue(\"Options\", \"{{Query_\" + i + \".data.map( (obj) =>{ return  {'label': obj.table_name, 'value': obj.table_name }})}}\");\n      propPane.UpdatePropertyFieldValue(\"Default Value\", \"{{Query_\" + i + \".data[\" + (i - 1) + \"].table_name}}\");\n      agHelper.ValidateNetworkStatus(\"@updateLayout\", 200);\n    }\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/OnLoadTests/PostgresConnections_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"5. Run query to drop any open connections before deploy and then deploy app","suites":["Test Postgres number of connections on page load + Bug 11572, Bug 11202"],"updatePoint":{"line":65,"column":81,"index":3005},"line":65,"code":"  it(\"5. Run query to drop any open connections before deploy and then deploy app\", () => {\n    dataSources.NavigateFromActiveDS(dsName_1, true);\n    agHelper.GetNClick(dataSources._templateMenu);\n    agHelper.RenameWithInPane(\"check_number_of_connections_1\");\n    const userName = \"test_conn_user_\" + guid;\n    const dropConnections = `select pg_terminate_backend(pg_stat_activity.pid) from pg_stat_activity where pg_stat_activity.usename = '` + userName + `'`;\n    dataSources.EnterQuery(dropConnections);\n    dataSources.RunQuery();\n    const checkNoOfConnQuery = `select count(*) from pg_stat_activity where usename='` + userName + `'`;\n    dataSources.EnterQuery(checkNoOfConnQuery);\n    dataSources.RunQuery();\n    dataSources.ReadQueryTableResponse(0).then($cellData => {\n      expect(Number($cellData)).to.eq(0);\n    });\n    deployMode.DeployApp();\n    agHelper.Sleep(10000);\n    deployMode.NavigateBacktoEditor();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/OnLoadTests/PostgresConnections_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"6. Run query to check number of open connections after deploy","suites":["Test Postgres number of connections on page load + Bug 11572, Bug 11202"],"updatePoint":{"line":83,"column":67,"index":3920},"line":83,"code":"  it(\"6. Run query to check number of open connections after deploy\", () => {\n    dataSources.NavigateFromActiveDS(dsName_2, true);\n    agHelper.GetNClick(dataSources._templateMenu);\n    agHelper.RenameWithInPane(\"check_number_of_connections_2\");\n    const checkNoOfConnQuery = `select count(*) from pg_stat_activity where usename='test_conn_user_` + guid + `'`;\n    dataSources.EnterQuery(checkNoOfConnQuery);\n    dataSources.RunQuery();\n    dataSources.ReadQueryTableResponse(0).then($cellData => {\n      expect(Number($cellData)).to.lte(5);\n    });\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/OnLoadTests/PostgresConnections_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"7. Drop the newly created user","suites":["Test Postgres number of connections on page load + Bug 11572, Bug 11202"],"updatePoint":{"line":94,"column":36,"index":4447},"line":94,"code":"  it(\"7. Drop the newly created user\", () => {\n    ee.CreateNewDsQuery(dsName_1);\n    agHelper.RenameWithInPane(\"drop_user\");\n    agHelper.GetNClick(dataSources._templateMenu);\n    const userName = \"test_conn_user_\" + guid;\n    const dropUser = `DROP OWNED BY ` + userName + `;\n      DROP USER ` + userName + `;`;\n    dataSources.EnterQuery(dropUser);\n    dataSources.RunQuery();\n    dataSources.ReadQueryTableResponse(0).then($cellData => {\n      expect($cellData).to.eq(\"0\");\n    });\n    agHelper.ActionContextMenuWithInPane(\"Delete\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/OnLoadTests/PostgresConnections_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"8. Verify Deletion of all created queries","suites":["Test Postgres number of connections on page load + Bug 11572, Bug 11202"],"updatePoint":{"line":108,"column":47,"index":5002},"line":108,"code":"  it(\"8. Verify Deletion of all created queries\", () => {\n    ee.ExpandCollapseEntity(\"QUERIES/JS\");\n    ee.ActionContextMenuByEntityName(\"create_user\", \"Delete\", \"Are you sure?\");\n    ee.ActionContextMenuByEntityName(\"check_number_of_connections_1\", \"Delete\", \"Are you sure?\");\n    ee.ActionContextMenuByEntityName(\"check_number_of_connections_2\", \"Delete\", \"Are you sure?\");\n\n    for (let i = 1; i <= 10; i++) {\n      ee.ActionContextMenuByEntityName(\"Query_\" + i, \"Delete\", \"Are you sure?\");\n    }\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/OnLoadTests/PostgresConnections_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"9. Verify Deletion of datasource","suites":["Test Postgres number of connections on page load + Bug 11572, Bug 11202"],"updatePoint":{"line":118,"column":38,"index":5500},"line":118,"code":"  it(\"9. Verify Deletion of datasource\", () => {\n    deployMode.DeployApp();\n    deployMode.NavigateBacktoEditor();\n    ee.ExpandCollapseEntity(\"QUERIES/JS\");\n    dataSources.DeleteDatasouceFromWinthinDS(dsName_1, 200);\n    dataSources.DeleteDatasouceFromWinthinDS(dsName_2, 200);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/OnLoadTests/PostgresConnections_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create a postgres datasource","suites":["API Panel Test Functionality"],"updatePoint":{"line":17,"column":37,"index":517},"line":17,"code":"  it(\"1. Create a postgres datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.PostgreSQL).click();\n    cy.getPluginFormsAndCreateDatasource();\n    cy.fillPostgresDatasourceForm();\n    cy.testSaveDatasource();\n    cy.get(\"@createDatasource\").then(httpResponse => {\n      datasourceName = httpResponse.response.body.data.name;\n    });\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Params/ExecutionParams_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Create and runs query","suites":["API Panel Test Functionality"],"updatePoint":{"line":27,"column":30,"index":884},"line":27,"code":"  it(\"2. Create and runs query\", () => {\n    cy.NavigateToActiveDSQueryPane(datasourceName);\n    cy.get(queryLocators.templateMenu).click();\n    cy.get(queryLocators.settings).click({\n      force: true\n    });\n    cy.get(queryLocators.switch).last().click({\n      force: true\n    });\n    cy.get(queryLocators.query).click({\n      force: true\n    });\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"select * from {{ this.params.tableName || 'users' }} limit 10\", {\n      force: true,\n      parseSpecialCharSequences: false\n    });\n    cy.WaitAutoSave();\n    cy.runQuery();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Params/ExecutionParams_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Will pass execution params","suites":["API Panel Test Functionality"],"updatePoint":{"line":46,"column":35,"index":1476},"line":46,"code":"  it(\"3. Will pass execution params\", function () {\n    cy.CheckAndUnfoldEntityItem(\"WIDGETS\"); // Bind the table\n\n    cy.get(\".t--entity-collapse-toggle\").eq(2).click({\n      force: true\n    });\n    cy.get(\".t--entity-name\").contains(\"Table1\").click({\n      force: true\n    });\n    cy.EnableAllCodeEditors();\n    cy.testJsontext(\"tabledata\", \"{{Query1.data}}\"); // Assert 'posts' data (default)\n\n    cy.readTabledataPublish(\"0\", \"1\").then(cellData => {\n      expect(cellData).to.be.equal(\"Test user 7\");\n    }); // Choose static button\n\n    cy.get(\".t--entity-name\").contains(\"StaticButton\").click({\n      force: true\n    }); // toggle js of onClick\n\n    cy.get(\".t--property-control-onclick\").find(\".t--js-toggle\").click({\n      force: true\n    }); // Bind with MultiApi with static value\n\n    cy.testJsontext(\"onclick\", \"{{Query1.run(undefined, undefined, { tableName: 'users' })}}\"); // Choose dynamic button\n\n    cy.get(\".t--entity-name\").contains(\"DynamicButton\").click({\n      force: true\n    });\n    cy.wait(2000); // toggle js of onClick\n\n    cy.get(\".t--property-control-onclick\").scrollIntoView();\n    cy.get(\".t--property-control-onclick\").find(\".t--js-toggle\").click({\n      force: true\n    }); // Bind with MultiApi with dynamicValue value\n\n    cy.testJsontext(\"onclick\", \"{{Query1.run(undefined, undefined, { tableName: EndpointInput.text })}}\"); // Publish the app\n\n    cy.PublishtheApp(); // Assert on load data in table\n\n    cy.readTabledataPublish(\"0\", \"1\").then(cellData => {\n      expect(cellData).to.be.equal(\"Test user 7\");\n    }); // Click Static button\n\n    cy.get(publishPage.buttonWidget).first().click(); //Wait for postExecute to finish\n\n    cy.wait(\"@postExecute\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(5000); // Assert statically bound \"users\" data\n\n    cy.readTabledataPublish(\"1\", \"1\").then(cellData => {\n      expect(cellData).to.be.equal(\"Test user 8\");\n    }); // Click dynamic button\n\n    cy.get(publishPage.buttonWidget).eq(1).click(); //Wait for postExecute to finish\n\n    cy.wait(\"@postExecute\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(5000); // Assert dynamically bound \"todos\" data\n\n    cy.readTabledataPublish(\"0\", \"1\").then(cellData => {\n      expect(cellData).to.be.equal(\"Test user 7\");\n    });\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Params/ExecutionParams_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Verify 'Add to widget [Widget Suggestion]' functionality - Postgress","suites":["Add widget - Postgress DataSource"],"updatePoint":{"line":14,"column":77,"index":523},"line":14,"code":"  it(\"1. Verify 'Add to widget [Widget Suggestion]' functionality - Postgress\", () => {\n    cy.NavigateToActiveDSQueryPane(datasourceName);\n    cy.get(queryLocators.templateMenu).click();\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"select * from configs\");\n    cy.WaitAutoSave();\n    cy.runQuery();\n    cy.get(queryEditor.suggestedTableWidget).click(); //cy.SearchEntityandOpen(\"Table1\");\n\n    cy.CheckAndUnfoldEntityItem(\"WIDGETS\");\n    cy.selectEntityByName(\"Table1\");\n    cy.isSelectRow(1);\n    cy.readTableV2dataPublish(\"1\", \"0\").then(tabData => {\n      cy.log(\"the value is \" + tabData);\n      expect(tabData).to.be.equal(\"5\");\n    });\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/QueryPane/AddWidget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create a PostgresDataSource","suites":["Addwidget from Query and bind with other widgets"],"updatePoint":{"line":21,"column":36,"index":647},"line":21,"code":"  it(\"1. Create a PostgresDataSource\", () => {\n    cy.createPostgresDatasource();\n    cy.get(\"@createDatasource\").then(httpResponse => {\n      datasourceName = httpResponse.response.body.data.name;\n    });\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/QueryPane/AddWidgetTableAndBind_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Create a query and populate response by choosing addWidget and validate in Table Widget","suites":["Addwidget from Query and bind with other widgets"],"updatePoint":{"line":27,"column":96,"index":919},"line":27,"code":"  it(\"2. Create a query and populate response by choosing addWidget and validate in Table Widget\", () => {\n    cy.NavigateToActiveDSQueryPane(datasourceName);\n    cy.get(queryLocators.templateMenu).click();\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"SELECT * FROM configs LIMIT 10;\"); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500); // Mock the response for this test\n\n    cy.intercept(\"/api/v1/actions/execute\", {\n      fixture: \"addWidgetTable-mock\"\n    });\n    cy.onlyQueryRun();\n    cy.xpath(queryEditor.queryResponse).first().invoke(\"text\").then(text => {\n      const tableRowTxt = text;\n      cy.get(queryEditor.suggestedTableWidget).click();\n      cy.SearchEntityandOpen(\"Table1\");\n      cy.isSelectRow(1);\n      cy.readTableV2dataPublish(\"1\", \"0\").then(tabData => {\n        const tabValue = tabData;\n        cy.log(\"the value is\" + tabValue);\n        expect(tabValue).to.be.equal(\"5\");\n        expect(tableRowTxt).to.equal(tabValue);\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/QueryPane/AddWidgetTableAndBind_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Input widget test with default value from table widget","suites":["Addwidget from Query and bind with other widgets"],"updatePoint":{"line":51,"column":63,"index":1896},"line":51,"code":"  it(\"3. Input widget test with default value from table widget\", () => {\n    cy.get(\".t--entity-name\").contains(\"WIDGETS\").click();\n    cy.SearchEntityandOpen(\"Input1\");\n    cy.get(widgetsPage.defaultInput).type(testdata.addInputWidgetBinding);\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/QueryPane/AddWidgetTableAndBind_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. validation of data displayed in input widget based on row data selected","suites":["Addwidget from Query and bind with other widgets"],"updatePoint":{"line":57,"column":80,"index":2268},"line":57,"code":"  it(\"4. validation of data displayed in input widget based on row data selected\", function () {\n    cy.isSelectRow(1);\n    cy.readTableV2dataPublish(\"1\", \"0\").then(tabData => {\n      const tabValue = tabData;\n      cy.log(\"the value is\" + tabValue);\n      expect(tabValue).to.be.equal(\"5\");\n      cy.isSelectRow(1);\n      cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", tabValue);\n    });\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/QueryPane/AddWidgetTableAndBind_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Input widget test with default value from table widget[Bug#4136]","suites":["Addwidget from Query and bind with other widgets"],"updatePoint":{"line":67,"column":73,"index":2703},"line":67,"code":"  it(\"5. Input widget test with default value from table widget[Bug#4136]\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.get(\".t--property-pane-title\").click({\n      force: true\n    });\n    cy.get(\".t--property-pane-title\").type(\"TableUpdated\", {\n      delay: 300\n    }).type(\"{enter}\");\n    cy.wait(\"@updateWidgetName\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/QueryPane/AddWidgetTableAndBind_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Confirm run action","suites":["Confirm run action"],"updatePoint":{"line":16,"column":27,"index":485},"line":16,"code":"  it(\"1. Confirm run action\", () => {\n    cy.NavigateToActiveDSQueryPane(datasourceName);\n    cy.get(queryLocators.templateMenu).click();\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"select * from configs\");\n    cy.get(\"li:contains('Settings')\").click({\n      force: true\n    });\n    cy.get(\"[data-cy=confirmBeforeExecute]\").find(\"span\").click();\n    cy.onlyQueryRun();\n    cy.get(\".bp3-dialog\").find(\"button\").contains(\"Yes\").click();\n    cy.wait(\"@postExecute\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.deleteQueryUsingContext();\n    cy.deleteDatasource(datasourceName);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/QueryPane/ConfirmRunAction_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create postgres datasource","suites":["Check datasource doc links"],"updatePoint":{"line":12,"column":35,"index":405},"line":12,"code":"  it(\"1. Create postgres datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.PostgreSQL).click();\n    cy.generateUUID().then(uid => {\n      postgresDatasourceName = uid;\n      cy.get(\".t--edit-datasource-name\").click();\n      cy.get(\".t--edit-datasource-name input\").clear().type(postgresDatasourceName, {\n        force: true\n      }).should(\"have.value\", postgresDatasourceName).blur();\n    });\n    cy.wait(\"@saveDatasource\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.fillPostgresDatasourceForm();\n    cy.testSaveDatasource();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/QueryPane/Datasourcedocs_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Check that documentation opens global modal","suites":["Check datasource doc links"],"updatePoint":{"line":26,"column":52,"index":1029},"line":26,"code":"  it(\"2. Check that documentation opens global modal\", function () {\n    cy.NavigateToActiveDSQueryPane(postgresDatasourceName);\n    cy.get(\".t--datasource-documentation-link\").click();\n    cy.get(commonlocators.globalSearchModal);\n    cy.get(\"body\").click(0, 0);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/QueryPane/Datasourcedocs_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Delete the query and datasources","suites":["Check datasource doc links"],"updatePoint":{"line":32,"column":41,"index":1288},"line":32,"code":"  it(\"3. Delete the query and datasources\", function () {\n    cy.deleteQueryUsingContext();\n    cy.deleteDatasource(postgresDatasourceName);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/QueryPane/Datasourcedocs_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create a empty datasource","suites":["Create a query with a empty datasource, run, save the query"],"updatePoint":{"line":10,"column":34,"index":352},"line":10,"code":"  it(\"1. Create a empty datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.PostgreSQL).click();\n    cy.testSaveDatasource(false);\n    cy.get(\"@createDatasource\").then(httpResponse => {\n      datasourceName = httpResponse.response.body.data.name;\n    });\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/QueryPane/EmptyDataSource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Create a query for empty/incorrect datasource and validate","suites":["Create a query with a empty datasource, run, save the query"],"updatePoint":{"line":18,"column":67,"index":680},"line":18,"code":"  it(\"2. Create a query for empty/incorrect datasource and validate\", () => {\n    cy.NavigateToActiveDSQueryPane(datasourceName);\n    cy.get(queryLocators.templateMenu).click();\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"select * from users limit 10\");\n    cy.EvaluateCurrentValue(\"select * from users limit 10\");\n    cy.runQuery(false);\n    cy.get(\".t--query-error\").contains(\"[Missing endpoint., Missing username for authentication., Missing password for authentication.]\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/QueryPane/EmptyDataSource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Creates a new Amazon S3 datasource","suites":["Validate CRUD queries for Amazon S3 along with UI flow verifications"],"updatePoint":{"line":28,"column":43,"index":929},"line":28,"code":"  it(\"1. Creates a new Amazon S3 datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.AmazonS3).click({\n      force: true\n    }).wait(1000);\n    cy.generateUUID().then(uid => {\n      datasourceName = `Amazon S3 CRUD ds ${uid}`;\n      cy.renameDatasource(datasourceName);\n      cy.wrap(datasourceName).as(\"dSName\");\n    });\n    cy.fillAmazonS3DatasourceForm();\n    cy.testSaveDatasource();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/QueryPane/S3_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Validate List Files in bucket (all existing files) command, run and then delete the query","suites":["Validate CRUD queries for Amazon S3 along with UI flow verifications"],"updatePoint":{"line":41,"column":98,"index":1412},"line":41,"code":"  it(\"2. Validate List Files in bucket (all existing files) command, run and then delete the query\", () => {\n    cy.NavigateToActiveDSQueryPane(datasourceName);\n    cy.ValidateAndSelectDropdownOption(formControls.commandDropdown, \"List files in bucket\");\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").should(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(false);\n      expect(response.body.data.body).to.contains(\"Mandatory parameter 'Bucket Name' is missing.\");\n    });\n    cy.typeValueNValidate(\"AutoTest\", formControls.s3BucketName);\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(false);\n      expect(response.body.data.body.split(\"(\")[0].trim()).to.be.oneOf([\"The specified bucket does not exist\", \"The specified bucket is not valid.\"]);\n    });\n    cy.typeValueNValidate(\"assets-test.appsmith.com\", formControls.s3BucketName);\n    cy.runAndDeleteQuery();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/QueryPane/S3_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Validate Create/List Files/Read files in bucket command for new file, Verify possible error msgs, run & delete the query","suites":["Validate CRUD queries for Amazon S3 along with UI flow verifications"],"updatePoint":{"line":62,"column":129,"index":2453},"line":62,"code":"  it(\"3. Validate Create/List Files/Read files in bucket command for new file, Verify possible error msgs, run & delete the query\", () => {\n    //Create File\n    cy.NavigateToActiveDSQueryPane(datasourceName);\n    cy.setQueryTimeout(30000);\n    cy.ValidateAndSelectDropdownOption(formControls.commandDropdown, \"List files in bucket\", \"Create a new file\");\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").should(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(false);\n      expect(response.body.data.body).to.contains(\"Mandatory parameter 'Bucket Name' is missing.\");\n    });\n    cy.typeValueNValidate(\"AutoTest\", formControls.s3BucketName);\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(false);\n      expect(response.body.data.body).to.contains(\"Required parameter 'File Path' is missing.\");\n    });\n    cy.typeValueNValidate(\"AutoFile\", formControls.s3FilePath);\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(false);\n      expect(response.body.data.body).to.eq(\"Unable to parse content. Expected to receive an object with `data` and `type`\");\n    });\n    cy.typeValueNValidate(\"Hi\", formControls.rawBody);\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(false);\n      expect(response.body.data.body).to.eq(\"Unable to parse content. Expected to receive an object with `data` and `type`\");\n    });\n    cy.typeValueNValidate('{\"data\": \"Hi, this is Automation script adding File!\"}', formControls.rawBody);\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(false);\n      expect(response.body.data.body).to.contains(\"File content is not base64 encoded.\");\n    });\n    cy.ValidateAndSelectDropdownOption(formControls.s3CreateFileDataType, \"Base64\", \"Text\");\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(false); //expect(['The specified bucket does not exist', 'The specified bucket is not valid.']).to.include(response.body.data.body)\n\n      expect(response.body.data.body.split(\"(\")[0].trim()).to.be.oneOf([\"The specified bucket does not exist\", \"The specified bucket is not valid.\"]);\n    });\n    cy.typeValueNValidate(\"assets-test.appsmith.com\", formControls.s3BucketName);\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(true);\n    }); //List file\n    //  cy.NavigateToActiveDSQueryPane(datasourceName);\n    //   cy.setQueryTimeout(30000);\n\n    cy.ValidateAndSelectDropdownOption(formControls.commandDropdown, \"Create a new file\", \"List files in bucket\"); // cy.onlyQueryRun();\n    // cy.wait(\"@postExecute\").should(({ response }) => {\n    //   expect(response.body.data.isExecutionSuccess).to.eq(false);\n    //   expect(response.body.data.body).to.contains(\n    //     \"Mandatory parameter 'Bucket Name' is missing.\",\n    //   );\n    // });\n    // cy.typeValueNValidate(\"assets-test.appsmith.com\", \"Bucket Name\");\n\n    cy.typeValueNValidate(\"Auto\", formControls.s3ListPrefix);\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(true);\n      expect(response.body.data.body[0].fileName).to.contains(\"Auto\");\n      expect(response.body.data.body[0].url).to.exist;\n    });\n    cy.typeValueNValidate(\"AutoFile\", formControls.s3ListPrefix);\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(true);\n      expect(response.body.data.body[0].fileName).to.contains(\"Auto\");\n      expect(response.body.data.body[0].url).to.exist;\n      expect(response.body.data.body[0].signedUrl).not.to.exist;\n    });\n    cy.ValidateAndSelectDropdownOption(formControls.s3ListSignedUrl, \"No\", \"Yes\");\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(true);\n      expect(response.body.data.body[0].fileName).to.contains(\"Auto\");\n      expect(response.body.data.body[0].signedUrl).to.exist;\n      expect(response.body.data.body[0].url).to.exist;\n    });\n    cy.ValidateAndSelectDropdownOption(formControls.s3ListUnSignedUrl, \"Yes\", \"No\");\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(true);\n      expect(response.body.data.body[0].fileName).to.contains(\"Auto\");\n      expect(response.body.data.body[0].signedUrl).to.exist;\n      expect(response.body.data.body[0].url).to.not.exist;\n    }); //cy.deleteQueryUsingContext(); //exeute actions & 200 response is verified in this method\n    //Read File\n    //cy.NavigateToActiveDSQueryPane(datasourceName);\n    //cy.setQueryTimeout(30000);\n\n    cy.ValidateAndSelectDropdownOption(formControls.commandDropdown, \"List files in bucket\", \"Read file\"); // cy.onlyQueryRun();\n    // cy.wait(\"@postExecute\").should(({ response }) => {\n    //   expect(response.body.data.isExecutionSuccess).to.eq(false);\n    //   expect(response.body.data.body).to.contains(\n    //     \"Mandatory parameter 'Bucket Name' is missing.\",\n    //   );\n    // });\n    // cy.typeValueNValidate(\"AutoTest\", \"Bucket Name\");\n    // cy.onlyQueryRun();\n    // cy.wait(\"@postExecute\").then(({ response }) => {\n    //   expect(response.body.data.isExecutionSuccess).to.eq(false);\n    //   expect(response.body.data.body).to.contains(\n    //     \"Required parameter 'File Path' is missing.\",\n    //   );\n    // });\n\n    cy.typeValueNValidate(\"Auto\", formControls.s3FilePath); // cy.onlyQueryRun();\n    // cy.wait(\"@postExecute\").then(({ response }) => {\n    //   expect(response.body.data.isExecutionSuccess).to.eq(false);\n    //   expect(response.body.data.body.split(\"(\")[0].trim()).to.be.oneOf([\n    //     \"The specified bucket does not exist\",\n    //     \"The specified bucket is not valid.\",\n    //   ]);\n    // });\n    // cy.typeValueNValidate(\"assets-test.appsmith.com\", \"Bucket Name\");\n\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(false);\n      expect(response.body.data.body).to.contain(\"The specified key does not exist.\");\n    });\n    cy.typeValueNValidate(\"Autofile\", formControls.s3FilePath);\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(false);\n      expect(response.body.data.body).to.contain(\"The specified key does not exist.\");\n    });\n    cy.typeValueNValidate(\"AutoFile\", formControls.s3FilePath); //Commenting below since below dropdown is removed from Read\n    //cy.validateNSelectDropdown(\"File Data Type\", \"Base64\", \"Text\");\n\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(true);\n      expect(response.body.data.body.fileData).to.not.eq(\"Hi, this is Automation script adding File!\");\n    });\n    cy.ValidateAndSelectDropdownOption(formControls.s3ReadFileDataType, \"Yes\", \"No\");\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(true);\n      expect(response.body.data.body.fileData).to.eq(\"Hi, this is Automation script adding File!\");\n    });\n    cy.deleteQueryUsingContext(); //exeute actions & 200 response is verified in this method\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/QueryPane/S3_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Validate Delete file command for new file & Validating List Files in bucket command after new file is deleted, Verify possible error msgs, run & delete the query","suites":["Validate CRUD queries for Amazon S3 along with UI flow verifications"],"updatePoint":{"line":238,"column":170,"index":10332},"line":238,"code":"  it(\"4. Validate Delete file command for new file & Validating List Files in bucket command after new file is deleted, Verify possible error msgs, run & delete the query\", () => {\n    cy.NavigateToActiveDSQueryPane(datasourceName); //cy.renameWithInPane(queryName);\n\n    cy.setQueryTimeout(30000);\n    cy.ValidateAndSelectDropdownOption(formControls.commandDropdown, \"List files in bucket\", \"Delete file\");\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").should(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(false);\n      expect(response.body.data.body).to.contains(\"Mandatory parameter 'Bucket Name' is missing.\");\n    });\n    cy.typeValueNValidate(\"AutoTest\", formControls.s3BucketName);\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(false);\n      expect(response.body.data.body).to.contains(\"Required parameter 'File Path' is missing.\");\n    });\n    cy.typeValueNValidate(\"Auto\", formControls.s3FilePath);\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(false);\n      expect(response.body.data.body.split(\"(\")[0].trim()).to.be.oneOf([\"The specified bucket does not exist\", \"The specified bucket is not valid.\"]);\n    });\n    cy.typeValueNValidate(\"assets-test.appsmith.com\", formControls.s3BucketName);\n    cy.typeValueNValidate(\"AutoFile\", formControls.s3FilePath);\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(true);\n      expect(response.body.data.body.status).to.eq(\"File deleted successfully\");\n    }); //cy.selectEntityByName(\"Query1\");\n    //cy.deleteQueryUsingContext(); //exeute actions & 200 response is verified in this method\n    //Validating List Files in bucket command after new file is deleted\n    //cy.NavigateToActiveDSQueryPane(datasourceName);\n\n    cy.ValidateAndSelectDropdownOption(formControls.commandDropdown, \"Delete file\", \"List files in bucket\"); //cy.typeValueNValidate(\"assets-test.appsmith.com\", \"Bucket Name\");\n\n    cy.typeValueNValidate(\"Auto\", formControls.s3ListPrefix);\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(true);\n      expect(response.body.data.body.length).to.eq(0); //checking that body is empty array\n    });\n    cy.deleteQueryUsingContext(); //exeute actions & 200 response is verified in this method\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/QueryPane/S3_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Create new file in bucket for UI Operations & Verify Search, Delete operations from NewPage UI created in S3 ds & Bug 8686, 8684","suites":["Validate CRUD queries for Amazon S3 along with UI flow verifications"],"updatePoint":{"line":291,"column":137,"index":12895},"line":291,"code":"  it(\"5. Create new file in bucket for UI Operations & Verify Search, Delete operations from NewPage UI created in S3 ds & Bug 8686, 8684\", function () {\n    //Creating new file in bucket\n    cy.NavigateToActiveDSQueryPane(datasourceName);\n    cy.ValidateAndSelectDropdownOption(formControls.commandDropdown, \"List files in bucket\", \"Create a new file\");\n    cy.typeValueNValidate(\"assets-test.appsmith.com\", formControls.s3BucketName);\n    cy.typeValueNValidate(\"CRUDNewPageFile\", formControls.s3FilePath);\n    cy.ValidateAndSelectDropdownOption(formControls.s3CreateFileDataType, \"Base64\", \"Text\");\n    cy.typeValueNValidate('{\"data\": \"Hi, this is Automation script adding file for S3 CRUD New Page validation!\"}', formControls.rawBody);\n    cy.setQueryTimeout(30000);\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(true);\n    });\n    cy.deleteQueryUsingContext(); //exeute actions & 200 response is verified in this method\n    // cy.wrap(Cypress.automation('remote:debugger:protocol', {\n    //   command: 'Browser.grantPermissions',\n    //   params: {\n    //     permissions: ['clipboardReadWrite', 'clipboardSanitizedWrite'],\n    //     // make the permission tighter by allowing the current origin only\n    //     // like \"http://localhost:56978\"\n    //     origin: window.location.origin,\n    //   },\n    // }))\n    //Generate page & other UI ops\n\n    cy.NavigateToDSGeneratePage(datasourceName);\n    cy.wait(3000); //Verifying List of Files from UI\n\n    cy.get(generatePage.selectTableDropdown).click();\n    cy.get(generatePage.dropdownOption).contains(\"assets-test.appsmith.com\").scrollIntoView().should(\"be.visible\").click();\n    cy.get(generatePage.generatePageFormSubmitBtn).click();\n    cy.wait(\"@replaceLayoutWithCRUDPage\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.wait(\"@getActions\");\n    cy.wait(\"@postExecute\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200); //This verifies the Select on the table, ie page is created fine\n\n    cy.VerifyErrorMsgAbsence(\"Cyclic dependency found while evaluating\"); //Verifies 8686\n\n    cy.ClickGotIt(); //Verifying Searching File from UI\n\n    cy.xpath(queryLocators.searchFilefield).type(\"CRUD\").wait(7000); //for search to finish\n\n    expect(cy.xpath(\"//div[@data-cy='overlay-comments-wrapper']//span[text()='CRUDNewPageFile']\")).to.exist;\n    cy.xpath(\"//div[@data-cy='overlay-comments-wrapper']//span[text()='CRUDNewPageFile']\").scrollIntoView(); //Verifying CopyFile URL icon from UI - Browser pop up appearing\n    // cy.xpath(queryLocators.copyURLicon).click()\n    // cy.window().its('navigator.clipboard').invoke('readText').should('contain', 'CRUDNewPageFile')\n    //Verifying DeleteFile icon from UI\n\n    cy.xpath(queryLocators.deleteFileicon).eq(0).click(); //Verifies 8684\n\n    cy.VerifyErrorMsgAbsence(\"Cyclic dependency found while evaluating\"); //Verifies 8686\n\n    expect(cy.xpath(\"//span[text()='Are you sure you want to delete the file?']\")).to.exist; //verify Delete File dialog appears\n\n    cy.clickButton(\"Confirm\").wait(1000); //wait for Delete operation to be successfull, //Verifies 8684\n\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(true);\n    });\n    cy.get(\"span:contains('CRUDNewPageFile')\").should(\"not.exist\"); //verify Deletion of file is success from UI also\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/QueryPane/S3_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Validate Deletion of the Newly Created Page","suites":["Validate CRUD queries for Amazon S3 along with UI flow verifications"],"updatePoint":{"line":355,"column":52,"index":16294},"line":355,"code":"  it(\"6. Validate Deletion of the Newly Created Page\", () => {\n    cy.NavigateToQueryEditor();\n    cy.NavigateToActiveTab();\n    cy.contains(\".t--datasource-name\", datasourceName).click();\n    cy.get(\".t--delete-datasource\").click();\n    cy.get(\".t--delete-datasource\").contains(\"Are you sure?\").click();\n    cy.wait(\"@deleteDatasource\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 409);\n    cy.actionContextMenuByEntityName(\"Assets-test.appsmith.com\", \"Delete\", \"Are you sure?\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/QueryPane/S3_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Bug 9069, 9201, 6975, 9922, 3836, 6492, 11833: Upload/Update query is failing in S3 crud pages","suites":["Validate CRUD queries for Amazon S3 along with UI flow verifications"],"updatePoint":{"line":364,"column":103,"index":16856},"line":364,"code":"  it(\"7. Bug 9069, 9201, 6975, 9922, 3836, 6492, 11833: Upload/Update query is failing in S3 crud pages\", function () {\n    cy.NavigateToDSGeneratePage(datasourceName);\n    cy.wait(3000); //Verifying List of Files from UI\n\n    cy.get(generatePage.selectTableDropdown).click();\n    cy.get(generatePage.dropdownOption).contains(\"assets-test.appsmith.com\").scrollIntoView().should(\"be.visible\").click();\n    cy.get(generatePage.generatePageFormSubmitBtn).click();\n    cy.wait(\"@replaceLayoutWithCRUDPage\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.wait(\"@getActions\");\n    cy.wait(\"@postExecute\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.VerifyErrorMsgAbsence(\"Cyclic dependency found while evaluating\"); //Verifies 8686\n\n    cy.ClickGotIt(); //Upload: 1\n\n    let fixturePath = \"AAAGlobeChristmas.jpeg\";\n    cy.wait(3000);\n    cy.clickButton(\"Select Files\"); //1 files selected\n\n    cy.get(generatePage.uploadFilesS3).attachFile(fixturePath);\n    cy.wait(2000);\n    cy.get(generatePage.uploadBtn).click();\n    cy.wait(1000);\n    cy.clickButton(\"Upload\");\n    cy.wait(1000);\n    cy.wait(\"@postExecute\").should(\"have.nested.property\", \"response.body.data.isExecutionSuccess\", true);\n    cy.get(commonlocators.toastAction).should(\"have.length\", 1).should(\"contain.text\", \"File Uploaded\"); //Verifies bug # 6975\n    //Verifying Searching File from UI\n\n    cy.xpath(queryLocators.searchFilefield).type(\"AAAGlobeChri\").wait(7000); //for search to finish\n\n    expect(cy.xpath(\"//div[@data-cy='overlay-comments-wrapper']//span[text()='\" + fixturePath + \"']\")).to.exist;\n    cy.xpath(\"//div[@data-cy='overlay-comments-wrapper']//span[text()='\" + fixturePath + \"']\").scrollIntoView(); //Verifying DeleteFile icon from UI\n\n    const deleteIconButtonXPATH = \"//button/span[@icon='trash']/ancestor::div[contains(@class,'t--widget-iconbuttonwidget')]/preceding-sibling::div[contains(@class, 't--widget-textwidget')]//span[text()='\" + fixturePath + \"']/ancestor::div[contains(@class, 't--widget-textwidget')]/following-sibling::div[contains(@class,'t--widget-iconbuttonwidget')]\";\n    cy.xpath(deleteIconButtonXPATH).should(\"exist\").last().scrollIntoView().click(); //Verifies 8684\n\n    cy.VerifyErrorMsgAbsence(\"Cyclic dependency found while evaluating\"); //Verifies 8686\n\n    expect(cy.xpath(\"//span[text()='Are you sure you want to delete the file?']\")).to.exist; //verify Delete File dialog appears\n\n    cy.clickButton(\"Confirm\").wait(1000); //wait for Delete operation to be successfull, //Verifies 8684\n\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(true);\n    });\n    cy.xpath(\"//div[@data-cy='overlay-comments-wrapper']//span[text()='\" + fixturePath + \"']\").should(\"not.exist\"); //verify Deletion of file is success from UI also\n    //Upload: 2 - Bug verification 9201\n\n    fixturePath = \"AAAFlowerVase.jpeg\";\n    cy.wait(3000);\n    cy.clickButton(\"Select Files\"); //1 files selected\n\n    cy.get(generatePage.uploadFilesS3).attachFile(fixturePath);\n    cy.wait(2000);\n    cy.get(generatePage.uploadBtn).click();\n    cy.wait(1000);\n    cy.clickButton(\"Upload\");\n    cy.wait(\"@postExecute\").should(\"have.nested.property\", \"response.body.data.isExecutionSuccess\", true);\n    cy.get(commonlocators.toastAction).should(\"have.length\", 1).should(\"contain.text\", \"File Uploaded\"); //Verifies bug # 6975\n    //Verifying Searching File from UI\n\n    cy.xpath(queryLocators.searchFilefield).clear().wait(500).type(\"AAAFlower\").wait(7000); //for search to finish\n\n    expect(cy.xpath(\"//div[@data-cy='overlay-comments-wrapper']//span[text()='\" + fixturePath + \"']\")).to.exist; //Verifies bug # 9922\n\n    cy.xpath(\"//div[@data-cy='overlay-comments-wrapper']//span[text()='\" + fixturePath + \"']\").scrollIntoView();\n    cy.wait(3000); //Verifying DeleteFile icon from UI\n\n    cy.xpath(\"//button/span[@icon='trash']/ancestor::div[contains(@class,'t--widget-iconbuttonwidget')]/preceding-sibling::div[contains(@class, 't--widget-textwidget')]//span[text()='\" + fixturePath + \"']/ancestor::div[contains(@class, 't--widget-textwidget')]/following-sibling::div[contains(@class,'t--widget-iconbuttonwidget')]\").should(\"exist\").last().scrollIntoView().click(); //Verifies 8684\n\n    cy.VerifyErrorMsgAbsence(\"Cyclic dependency found while evaluating\"); //Verifies 8686\n\n    expect(cy.xpath(\"//span[text()='Are you sure you want to delete the file?']\")).to.exist; //verify Delete File dialog appears\n\n    cy.clickButton(\"Confirm\").wait(3000); //wait for Delete operation to be successfull, //Verifies 8684\n\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(true);\n    });\n    cy.xpath(\"//div[@data-cy='overlay-comments-wrapper']//span[text()='\" + fixturePath + \"']\").should(\"not.exist\"); //verify Deletion of file is success from UI also\n    //Deleting the page:\n\n    cy.actionContextMenuByEntityName(\"Assets-test.appsmith.com\", \"Delete\", \"Are you sure?\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/QueryPane/S3_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. Verify 'Add to widget [Widget Suggestion]' functionality - S3","suites":["Validate CRUD queries for Amazon S3 along with UI flow verifications"],"updatePoint":{"line":452,"column":70,"index":21876},"line":452,"code":"  it(\"8. Verify 'Add to widget [Widget Suggestion]' functionality - S3\", () => {\n    cy.NavigateToActiveDSQueryPane(datasourceName);\n    cy.ValidateAndSelectDropdownOption(formControls.commandDropdown, \"List files in bucket\");\n    cy.typeValueNValidate(\"assets-test.appsmith.com\", formControls.s3BucketName);\n    cy.getEntityName().then(entity => {\n      cy.wrap(entity).as(\"entity\");\n    });\n    cy.runQuery();\n    cy.xpath(queryLocators.suggestedWidgetDropdown).click().wait(1000);\n    cy.get(\".t--draggable-selectwidget\").validateWidgetExists();\n    cy.get(\"@entity\").then(entityN => cy.selectEntityByName(entityN));\n    cy.get(queryLocators.suggestedTableWidget).click().wait(1000);\n    cy.get(commonlocators.TableV2Row).validateWidgetExists();\n    cy.get(\"@entity\").then(entityN => cy.selectEntityByName(entityN));\n    cy.xpath(queryLocators.suggestedWidgetText).click().wait(1000);\n    cy.get(commonlocators.textWidget).validateWidgetExists();\n    cy.get(\"@entity\").then(entityN => cy.selectEntityByName(entityN));\n    cy.deleteQueryUsingContext(); //exeute actions & 200 response is verified in this method\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/QueryPane/S3_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"9. Verify 'Connect Widget [snipping]' functionality - S3 ","suites":["Validate CRUD queries for Amazon S3 along with UI flow verifications"],"updatePoint":{"line":471,"column":63,"index":22989},"line":471,"code":"  it(\"9. Verify 'Connect Widget [snipping]' functionality - S3 \", () => {\n    cy.addDsl(dsl);\n    cy.NavigateToActiveDSQueryPane(datasourceName);\n    cy.getEntityName().then(entity => {\n      cy.wrap(entity).as(\"entity\");\n    });\n    cy.ValidateAndSelectDropdownOption(formControls.commandDropdown, \"List files in bucket\");\n    cy.typeValueNValidate(\"assets-test.appsmith.com\", formControls.s3BucketName);\n    cy.runQuery();\n    cy.clickButton(\"Select Widget\");\n    cy.xpath(queryLocators.snipeableTable).click().wait(1500); //wait for table to load!\n\n    cy.get(commonlocators.TableRow).validateWidgetExists();\n    cy.CheckAndUnfoldEntityItem(\"QUERIES/JS\");\n    cy.get(\"@entity\").then(entityN => {\n      cy.log(entityN);\n      cy.selectEntityByName(entityN);\n    });\n    cy.deleteQueryUsingContext(); //exeute actions & 200 response is verified in this method\n\n    cy.CheckAndUnfoldEntityItem(\"WIDGETS\");\n    cy.actionContextMenuByEntityName(\"Table1\");\n    cy.wait(3000); //waiting for deletion to complete! - else next case fails\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/QueryPane/S3_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"10. Deletes the datasource","suites":["Validate CRUD queries for Amazon S3 along with UI flow verifications"],"updatePoint":{"line":495,"column":32,"index":23996},"line":495,"code":"  it(\"10. Deletes the datasource\", () => {\n    cy.NavigateToQueryEditor();\n    cy.NavigateToActiveTab();\n    cy.contains(\".t--datasource-name\", datasourceName).click({\n      force: true\n    });\n    cy.get(\".t--delete-datasource\").click();\n    cy.get(\".t--delete-datasource\").contains(\"Are you sure?\").click(); // cy.wait(\"@deleteDatasource\").should(\n    //   \"have.nested.property\",\n    //   \"response.body.responseMeta.status\",\n    //   200,\n    // );\n\n    cy.wait(\"@deleteDatasource\").should(response => {\n      expect(response.status).to.be.oneOf([200, 409]);\n    });\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/QueryPane/S3_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create postgres datasource","suites":["Switch datasource"],"updatePoint":{"line":12,"column":35,"index":384},"line":12,"code":"  it(\"1. Create postgres datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.PostgreSQL).click();\n    cy.generateUUID().then(uid => {\n      postgresDatasourceName = uid;\n      cy.get(\".t--edit-datasource-name\").click();\n      cy.get(\".t--edit-datasource-name input\").clear().type(postgresDatasourceName, {\n        force: true\n      }).should(\"have.value\", postgresDatasourceName).blur();\n    });\n    cy.wait(\"@saveDatasource\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.fillPostgresDatasourceForm();\n    cy.testSaveDatasource();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/QueryPane/SwitchDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Create another postgres datasource","suites":["Switch datasource"],"updatePoint":{"line":26,"column":43,"index":999},"line":26,"code":"  it(\"2. Create another postgres datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.PostgreSQL).click();\n    cy.generateUUID().then(uid => {\n      postgresDatasourceNameSecond = uid;\n      cy.get(\".t--edit-datasource-name\").click();\n      cy.get(\".t--edit-datasource-name input\").clear().type(postgresDatasourceNameSecond, {\n        force: true\n      }).should(\"have.value\", postgresDatasourceNameSecond).blur();\n    });\n    cy.wait(\"@saveDatasource\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.fillPostgresDatasourceForm();\n    cy.testSaveDatasource();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/QueryPane/SwitchDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Create mongo datasource","suites":["Switch datasource"],"updatePoint":{"line":40,"column":32,"index":1621},"line":40,"code":"  it(\"3. Create mongo datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.MongoDB).click();\n    cy.generateUUID().then(uid => {\n      mongoDatasourceName = uid;\n      cy.get(\".t--edit-datasource-name\").click();\n      cy.get(\".t--edit-datasource-name input\").clear().type(mongoDatasourceName, {\n        force: true\n      }).should(\"have.value\", mongoDatasourceName).blur();\n    });\n    cy.wait(\"@saveDatasource\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.fillMongoDatasourceForm();\n    cy.testSaveDatasource();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/QueryPane/SwitchDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. By switching datasources execute a query with both the datasources","suites":["Switch datasource"],"updatePoint":{"line":54,"column":75,"index":2253},"line":54,"code":"  it(\"4. By switching datasources execute a query with both the datasources\", function () {\n    cy.NavigateToActiveDSQueryPane(postgresDatasourceName);\n    cy.get(queryLocators.templateMenu).click({\n      force: true\n    });\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"select * from public.users limit 10\");\n    cy.wait(3000);\n    cy.runQuery();\n    cy.wait(\"@saveAction\").should(\"have.nested.property\", \"response.body.data.isValid\", true);\n    cy.get(\".t--switch-datasource\").click();\n    cy.contains(\".t--datasource-option\", postgresDatasourceNameSecond).click().wait(1000);\n    cy.runQuery();\n    cy.wait(\"@saveAction\").should(\"have.nested.property\", \"response.body.data.isValid\", true);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/QueryPane/SwitchDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Confirm mongo datasource is not present in the switch datasources dropdown","suites":["Switch datasource"],"updatePoint":{"line":68,"column":83,"index":2971},"line":68,"code":"  it(\"5. Confirm mongo datasource is not present in the switch datasources dropdown\", function () {\n    cy.get(\".t--switch-datasource\").click();\n    cy.get(\".t--datasource-option\").should(\"not.have\", mongoDatasourceName);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/QueryPane/SwitchDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Delete the query and datasources","suites":["Switch datasource"],"updatePoint":{"line":72,"column":41,"index":3157},"line":72,"code":"  it(\"6. Delete the query and datasources\", function () {\n    cy.deleteQueryUsingContext();\n    cy.deleteDatasource(postgresDatasourceName);\n    cy.deleteDatasource(postgresDatasourceNameSecond);\n    cy.deleteDatasource(mongoDatasourceName);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/QueryPane/SwitchDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Map Widget Functionality","suites":["Map Widget Functionality"],"updatePoint":{"line":14,"column":32,"index":450},"line":14,"code":"    it(\"Map Widget Functionality\", function () {\n      cy.openPropertyPane(\"mapwidget\");\n      /**\n       * @param{Text} Random Text\n       * @param{MapWidget}Mouseover\n       * @param{MapPre Css} Assertion\n       */\n\n      cy.widgetText(\"Maptest\", viewWidgetsPage.mapWidget, viewWidgetsPage.mapInner);\n      cy.get(viewWidgetsPage.mapinitialloc).click({\n        force: true\n      }).clear().type(this.data.country).type(\"{enter}\");\n      cy.get(viewWidgetsPage.mapInput).click({\n        force: true\n      }).type(this.data.command).type(JSON.stringify(this.data.marker), {\n        parseSpecialCharSequences: false\n      });\n      cy.get(viewWidgetsPage.zoomLevel).eq(0).click({\n        force: true\n      });\n      cy.get(viewWidgetsPage.zoomLevel).eq(1).click({\n        force: true\n      });\n      cy.get(viewWidgetsPage.mapSearch).click({\n        force: true\n      }).clear().type(this.data.location2).type(\"{enter}\");\n    });","file":"manual_TestSuite/CommentedScriptFiles/Map_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Map-Enable Location,Map search and Create Marker Property Validation","suites":["Map Widget Functionality"],"updatePoint":{"line":41,"column":76,"index":1423},"line":41,"code":"    it(\"Map-Enable Location,Map search and Create Marker Property Validation\", function () {\n      /**\n       * Enable the Search Location checkbox and Validate the same in editor mode\n       */\n      cy.CheckWidgetProperties(commonlocators.enableSearchLocCheckbox);\n      cy.get(viewWidgetsPage.mapSearch).should(\"be.visible\");\n      cy.get(viewWidgetsPage.mapSearch).invoke(\"attr\", \"placeholder\").should(\"contain\", \"Enter location to search\");\n      /**\n       * Enable the Pick Location checkbox and Validate the same in editor mode\n       */\n\n      cy.CheckWidgetProperties(commonlocators.enablePickLocCheckbox);\n      cy.get(viewWidgetsPage.pickMyLocation).should(\"exist\");\n      /**\n       * Enable the Createnew Marker checkbox and Validate the same in editor mode\n       */\n\n      cy.CheckWidgetProperties(commonlocators.enableCreateMarkerCheckbox);\n      /**\n       * Validation will be added when create marker fun is working fine\n       */\n\n      cy.PublishtheApp();\n      /**\n       * Publish mode Validation\n       */\n\n      cy.get(publishPage.mapSearch).should(\"be.visible\");\n      cy.get(publishPage.mapSearch).invoke(\"attr\", \"placeholder\").should(\"contain\", \"Enter location to search\");\n      cy.get(publishPage.pickMyLocation).should(\"exist\");\n      cy.get(publishPage.backToEditor).click();\n    });","file":"manual_TestSuite/CommentedScriptFiles/Map_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Map-Disable Location, Mapsearch and Create Marker Property Validation","suites":["Map Widget Functionality"],"updatePoint":{"line":73,"column":77,"index":2741},"line":73,"code":"    it(\"Map-Disable Location, Mapsearch and Create Marker Property Validation\", function () {\n      cy.openPropertyPane(\"mapwidget\");\n      /**\n       * Disable the Search Location checkbox and Validate the same in editor mode\n       */\n\n      cy.UncheckWidgetProperties(commonlocators.enableSearchLocCheckbox);\n      cy.get(viewWidgetsPage.mapSearch).should(\"not.exist\");\n      /**\n       * Disable the Pick Location checkbox and Validate the same in editor mode\n       */\n\n      cy.UncheckWidgetProperties(commonlocators.enablePickLocCheckbox);\n      cy.get(viewWidgetsPage.pickMyLocation).should(\"not.exist\");\n      /**\n       * Disable the Createnew Marker checkbox and Validate the same in editor mode\n       */\n\n      cy.UncheckWidgetProperties(commonlocators.enableCreateMarkerCheckbox);\n      /**\n       * Validation will be added when create marker fun is working fine\n       */\n\n      cy.PublishtheApp();\n      /**\n       * Publish mode Validation\n       */\n\n      cy.get(publishPage.mapSearch).should(\"not.exist\");\n      cy.get(publishPage.pickMyLocation).should(\"not.exist\");\n      cy.get(publishPage.backToEditor).click();\n    });","file":"manual_TestSuite/CommentedScriptFiles/Map_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Map-Initial location should work","suites":["Map Widget Functionality"],"updatePoint":{"line":105,"column":40,"index":3848},"line":105,"code":"    it(\"Map-Initial location should work\", function () {\n      cy.openPropertyPane(\"mapwidget\");\n      cy.get(viewWidgetsPage.mapinitialloc).should(\"have.value\", this.data.country);\n      /**\n       * Clearing initial location used to reset it, this check makes sure it actually clears\n       */\n\n      cy.get(viewWidgetsPage.mapinitialloc).click({\n        force: true\n      }).clear().should(\"have.value\", \"\");\n    });","file":"manual_TestSuite/CommentedScriptFiles/Map_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Map-Check Visible field Validation","suites":["Map Widget Functionality"],"updatePoint":{"line":116,"column":42,"index":4270},"line":116,"code":"    it(\"Map-Check Visible field Validation\", function () {\n      //Check the disableed checkbox and Validate\n      cy.CheckWidgetProperties(commonlocators.visibleCheckbox);\n      cy.PublishtheApp();\n      cy.get(publishPage.mapWidget).should(\"be.visible\");\n      cy.get(publishPage.backToEditor).click();\n    });","file":"manual_TestSuite/CommentedScriptFiles/Map_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Map-Unckeck Visible field Validation","suites":["Map Widget Functionality"],"updatePoint":{"line":123,"column":44,"index":4585},"line":123,"code":"    it(\"Map-Unckeck Visible field Validation\", function () {\n      cy.openPropertyPane(\"mapwidget\"); //Uncheck the disabled checkbox and validate\n\n      cy.UncheckWidgetProperties(commonlocators.visibleCheckbox);\n      cy.PublishtheApp();\n      cy.get(publishPage.mapWidget).should(\"not.exist\");\n    });","file":"manual_TestSuite/CommentedScriptFiles/Map_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table Filter","suites":["Test for Table Filter "],"updatePoint":{"line":4,"column":18,"index":131},"line":4,"code":"  it(\"Table Filter\", function () {//Add a table\n    // click  on the column action item\n    // Click on Select a datatype\n    // Click on Filter option\n    // ensure to add filter\n  });","file":"manual_TestSuite/Table_Filter_Test_spec.js","skipped":false,"dir":"app/client/cypress"}]}