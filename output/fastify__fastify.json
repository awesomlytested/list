{"repo":"fastify/fastify","url":"https://github.com/fastify/fastify","branch":"main","configs":[{"package":"fastify","lang":"js","dir":"test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"default 404","suites":[],"updatePoint":{"line":32,"column":17,"index":522},"line":32,"code":"test('default 404', t => {\n  t.plan(5);\n  const test = t.test;\n  const fastify = Fastify();\n  fastify.get('/', function (req, reply) {\n    reply.send({\n      hello: 'world'\n    });\n  });\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    test('unsupported method', t => {\n      t.plan(3);\n      sget({\n        method: 'PUT',\n        url: getUrl(fastify),\n        body: {},\n        json: true\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 404);\n        t.equal(response.headers['content-type'], 'application/json; charset=utf-8');\n      });\n    }); // Return 404 instead of 405 see https://github.com/fastify/fastify/pull/862 for discussion\n\n    test('framework-unsupported method', t => {\n      t.plan(3);\n      sget({\n        method: 'PROPFIND',\n        url: getUrl(fastify),\n        body: {},\n        json: true\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 404);\n        t.equal(response.headers['content-type'], 'application/json; charset=utf-8');\n      });\n    });\n    test('unsupported route', t => {\n      t.plan(3);\n      sget({\n        method: 'GET',\n        url: getUrl(fastify) + '/notSupported',\n        body: {},\n        json: true\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 404);\n        t.equal(response.headers['content-type'], 'application/json; charset=utf-8');\n      });\n    });\n    test('using post method and multipart/formdata', t => {\n      t.plan(3);\n      const form = FormData();\n      form.append('test-field', 'just some field');\n      sget({\n        method: 'POST',\n        url: getUrl(fastify) + '/notSupported',\n        body: form,\n        json: false\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 404);\n        t.equal(response.headers['content-type'], 'application/json; charset=utf-8');\n      });\n    });\n  });\n});","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"unsupported method","suites":[],"updatePoint":{"line":46,"column":28,"index":826},"line":46,"code":"    test('unsupported method', t => {\n      t.plan(3);\n      sget({\n        method: 'PUT',\n        url: getUrl(fastify),\n        body: {},\n        json: true\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 404);\n        t.equal(response.headers['content-type'], 'application/json; charset=utf-8');\n      });\n    }); // Return 404 instead of 405 see https://github.com/fastify/fastify/pull/862 for discussion","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"framework-unsupported method","suites":[],"updatePoint":{"line":60,"column":38,"index":1292},"line":60,"code":"    test('framework-unsupported method', t => {\n      t.plan(3);\n      sget({\n        method: 'PROPFIND',\n        url: getUrl(fastify),\n        body: {},\n        json: true\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 404);\n        t.equal(response.headers['content-type'], 'application/json; charset=utf-8');\n      });\n    });","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"unsupported route","suites":[],"updatePoint":{"line":73,"column":27,"index":1659},"line":73,"code":"    test('unsupported route', t => {\n      t.plan(3);\n      sget({\n        method: 'GET',\n        url: getUrl(fastify) + '/notSupported',\n        body: {},\n        json: true\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 404);\n        t.equal(response.headers['content-type'], 'application/json; charset=utf-8');\n      });\n    });","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"using post method and multipart/formdata","suites":[],"updatePoint":{"line":86,"column":50,"index":2062},"line":86,"code":"    test('using post method and multipart/formdata', t => {\n      t.plan(3);\n      const form = FormData();\n      form.append('test-field', 'just some field');\n      sget({\n        method: 'POST',\n        url: getUrl(fastify) + '/notSupported',\n        body: form,\n        json: false\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 404);\n        t.equal(response.headers['content-type'], 'application/json; charset=utf-8');\n      });\n    });","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"customized 404","suites":[],"updatePoint":{"line":103,"column":20,"index":2532},"line":103,"code":"test('customized 404', t => {\n  t.plan(6);\n  const test = t.test;\n  const fastify = Fastify();\n  fastify.get('/', function (req, reply) {\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.get('/with-error', function (req, reply) {\n    reply.send(new errors.NotFound());\n  });\n  fastify.get('/with-error-custom-header', function (req, reply) {\n    const err = new errors.NotFound();\n    err.headers = {\n      'x-foo': 'bar'\n    };\n    reply.send(err);\n  });\n  fastify.setNotFoundHandler(function (req, reply) {\n    reply.code(404).send('this was not found');\n  });\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    test('unsupported method', t => {\n      t.plan(3);\n      sget({\n        method: 'PUT',\n        url: getUrl(fastify),\n        body: JSON.stringify({\n          hello: 'world'\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 404);\n        t.equal(body.toString(), 'this was not found');\n      });\n    });\n    test('framework-unsupported method', t => {\n      t.plan(3);\n      sget({\n        method: 'PROPFIND',\n        url: getUrl(fastify),\n        body: JSON.stringify({\n          hello: 'world'\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 404);\n        t.equal(body.toString(), 'this was not found');\n      });\n    });\n    test('unsupported route', t => {\n      t.plan(3);\n      sget({\n        method: 'GET',\n        url: getUrl(fastify) + '/notSupported'\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 404);\n        t.equal(body.toString(), 'this was not found');\n      });\n    });\n    test('with error object', t => {\n      t.plan(3);\n      sget({\n        method: 'GET',\n        url: getUrl(fastify) + '/with-error'\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 404);\n        t.same(JSON.parse(body), {\n          error: 'Not Found',\n          message: 'Not Found',\n          statusCode: 404\n        });\n      });\n    });\n    test('error object with headers property', t => {\n      t.plan(4);\n      sget({\n        method: 'GET',\n        url: getUrl(fastify) + '/with-error-custom-header'\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 404);\n        t.equal(response.headers['x-foo'], 'bar');\n        t.same(JSON.parse(body), {\n          error: 'Not Found',\n          message: 'Not Found',\n          statusCode: 404\n        });\n      });\n    });\n  });\n});","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"unsupported method","suites":[],"updatePoint":{"line":130,"column":28,"index":3222},"line":130,"code":"    test('unsupported method', t => {\n      t.plan(3);\n      sget({\n        method: 'PUT',\n        url: getUrl(fastify),\n        body: JSON.stringify({\n          hello: 'world'\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 404);\n        t.equal(body.toString(), 'this was not found');\n      });\n    });","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"framework-unsupported method","suites":[],"updatePoint":{"line":147,"column":38,"index":3670},"line":147,"code":"    test('framework-unsupported method', t => {\n      t.plan(3);\n      sget({\n        method: 'PROPFIND',\n        url: getUrl(fastify),\n        body: JSON.stringify({\n          hello: 'world'\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 404);\n        t.equal(body.toString(), 'this was not found');\n      });\n    });","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"unsupported route","suites":[],"updatePoint":{"line":164,"column":27,"index":4112},"line":164,"code":"    test('unsupported route', t => {\n      t.plan(3);\n      sget({\n        method: 'GET',\n        url: getUrl(fastify) + '/notSupported'\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 404);\n        t.equal(body.toString(), 'this was not found');\n      });\n    });","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"with error object","suites":[],"updatePoint":{"line":175,"column":27,"index":4424},"line":175,"code":"    test('with error object', t => {\n      t.plan(3);\n      sget({\n        method: 'GET',\n        url: getUrl(fastify) + '/with-error'\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 404);\n        t.same(JSON.parse(body), {\n          error: 'Not Found',\n          message: 'Not Found',\n          statusCode: 404\n        });\n      });\n    });","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"error object with headers property","suites":[],"updatePoint":{"line":190,"column":44,"index":4830},"line":190,"code":"    test('error object with headers property', t => {\n      t.plan(4);\n      sget({\n        method: 'GET',\n        url: getUrl(fastify) + '/with-error-custom-header'\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 404);\n        t.equal(response.headers['x-foo'], 'bar');\n        t.same(JSON.parse(body), {\n          error: 'Not Found',\n          message: 'Not Found',\n          statusCode: 404\n        });\n      });\n    });","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"custom header in notFound handler","suites":[],"updatePoint":{"line":208,"column":39,"index":5306},"line":208,"code":"test('custom header in notFound handler', t => {\n  t.plan(2);\n  const test = t.test;\n  const fastify = Fastify();\n  fastify.setNotFoundHandler(function (req, reply) {\n    reply.code(404).header('x-foo', 'bar').send('this was not found');\n  });\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    test('not found with custom header', t => {\n      t.plan(4);\n      sget({\n        method: 'GET',\n        url: getUrl(fastify) + '/notSupported'\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 404);\n        t.equal(response.headers['x-foo'], 'bar');\n        t.equal(body.toString(), 'this was not found');\n      });\n    });\n  });\n});","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"not found with custom header","suites":[],"updatePoint":{"line":220,"column":38,"index":5655},"line":220,"code":"    test('not found with custom header', t => {\n      t.plan(4);\n      sget({\n        method: 'GET',\n        url: getUrl(fastify) + '/notSupported'\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 404);\n        t.equal(response.headers['x-foo'], 'bar');\n        t.equal(body.toString(), 'this was not found');\n      });\n    });","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"setting a custom 404 handler multiple times is an error","suites":[],"updatePoint":{"line":234,"column":61,"index":6062},"line":234,"code":"test('setting a custom 404 handler multiple times is an error', t => {\n  t.plan(5);\n  t.test('at the root level', t => {\n    t.plan(2);\n    const fastify = Fastify();\n    fastify.setNotFoundHandler(() => {});\n\n    try {\n      fastify.setNotFoundHandler(() => {});\n      t.fail('setting multiple 404 handlers at the same prefix encapsulation level should throw');\n    } catch (err) {\n      t.type(err, Error);\n      t.equal(err.message, 'Not found handler already set for Fastify instance with prefix: \\'/\\'');\n    }\n  });\n  t.test('at the plugin level', t => {\n    t.plan(3);\n    const fastify = Fastify();\n    fastify.register((instance, options, done) => {\n      instance.setNotFoundHandler(() => {});\n\n      try {\n        instance.setNotFoundHandler(() => {});\n        t.fail('setting multiple 404 handlers at the same prefix encapsulation level should throw');\n      } catch (err) {\n        t.type(err, Error);\n        t.equal(err.message, 'Not found handler already set for Fastify instance with prefix: \\'/prefix\\'');\n      }\n\n      done();\n    }, {\n      prefix: '/prefix'\n    });\n    fastify.listen({\n      port: 0\n    }, err => {\n      t.error(err);\n      fastify.close();\n    });\n  });\n  t.test('at multiple levels', t => {\n    t.plan(3);\n    const fastify = Fastify();\n    fastify.register((instance, options, done) => {\n      try {\n        instance.setNotFoundHandler(() => {});\n        t.fail('setting multiple 404 handlers at the same prefix encapsulation level should throw');\n      } catch (err) {\n        t.type(err, Error);\n        t.equal(err.message, 'Not found handler already set for Fastify instance with prefix: \\'/\\'');\n      }\n\n      done();\n    });\n    fastify.setNotFoundHandler(() => {});\n    fastify.listen({\n      port: 0\n    }, err => {\n      t.error(err);\n      fastify.close();\n    });\n  });\n  t.test('at multiple levels / 2', t => {\n    t.plan(3);\n    const fastify = Fastify();\n    fastify.register((instance, options, done) => {\n      instance.setNotFoundHandler(() => {});\n      instance.register((instance2, options, done) => {\n        try {\n          instance2.setNotFoundHandler(() => {});\n          t.fail('setting multiple 404 handlers at the same prefix encapsulation level should throw');\n        } catch (err) {\n          t.type(err, Error);\n          t.equal(err.message, 'Not found handler already set for Fastify instance with prefix: \\'/prefix\\'');\n        }\n\n        done();\n      });\n      done();\n    }, {\n      prefix: '/prefix'\n    });\n    fastify.setNotFoundHandler(() => {});\n    fastify.listen({\n      port: 0\n    }, err => {\n      t.error(err);\n      fastify.close();\n    });\n  });\n  t.test('in separate plugins at the same level', t => {\n    t.plan(3);\n    const fastify = Fastify();\n    fastify.register((instance, options, done) => {\n      instance.register((instance2A, options, done) => {\n        instance2A.setNotFoundHandler(() => {});\n        done();\n      });\n      instance.register((instance2B, options, done) => {\n        try {\n          instance2B.setNotFoundHandler(() => {});\n          t.fail('setting multiple 404 handlers at the same prefix encapsulation level should throw');\n        } catch (err) {\n          t.type(err, Error);\n          t.equal(err.message, 'Not found handler already set for Fastify instance with prefix: \\'/prefix\\'');\n        }\n\n        done();\n      });\n      done();\n    }, {\n      prefix: '/prefix'\n    });\n    fastify.setNotFoundHandler(() => {});\n    fastify.listen({\n      port: 0\n    }, err => {\n      t.error(err);\n      fastify.close();\n    });\n  });\n});","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"encapsulated 404","suites":[],"updatePoint":{"line":356,"column":22,"index":9587},"line":356,"code":"test('encapsulated 404', t => {\n  t.plan(13);\n  const test = t.test;\n  const fastify = Fastify();\n  fastify.get('/', function (req, reply) {\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.setNotFoundHandler(function (req, reply) {\n    reply.code(404).send('this was not found');\n  });\n  fastify.register(function (f, opts, done) {\n    f.setNotFoundHandler(function (req, reply) {\n      reply.code(404).send('this was not found 2');\n    });\n    done();\n  }, {\n    prefix: '/test'\n  });\n  fastify.register(function (f, opts, done) {\n    f.setNotFoundHandler(function (req, reply) {\n      reply.code(404).send('this was not found 3');\n    });\n    done();\n  }, {\n    prefix: '/test2'\n  });\n  fastify.register(function (f, opts, done) {\n    f.setNotFoundHandler(function (request, reply) {\n      reply.code(404).send('this was not found 4');\n    });\n    done();\n  }, {\n    prefix: '/test3/'\n  });\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    test('root unsupported method', t => {\n      t.plan(3);\n      sget({\n        method: 'PUT',\n        url: getUrl(fastify),\n        body: JSON.stringify({\n          hello: 'world'\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 404);\n        t.equal(body.toString(), 'this was not found');\n      });\n    });\n    test('root framework-unsupported method', t => {\n      t.plan(3);\n      sget({\n        method: 'PROPFIND',\n        url: getUrl(fastify),\n        body: JSON.stringify({\n          hello: 'world'\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 404);\n        t.equal(body.toString(), 'this was not found');\n      });\n    });\n    test('root unsupported route', t => {\n      t.plan(3);\n      sget({\n        method: 'GET',\n        url: getUrl(fastify) + '/notSupported'\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 404);\n        t.equal(body.toString(), 'this was not found');\n      });\n    });\n    test('unsupported method', t => {\n      t.plan(3);\n      sget({\n        method: 'PUT',\n        url: getUrl(fastify) + '/test',\n        body: JSON.stringify({\n          hello: 'world'\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 404);\n        t.equal(body.toString(), 'this was not found 2');\n      });\n    });\n    test('framework-unsupported method', t => {\n      t.plan(3);\n      sget({\n        method: 'PROPFIND',\n        url: getUrl(fastify) + '/test',\n        body: JSON.stringify({\n          hello: 'world'\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 404);\n        t.equal(body.toString(), 'this was not found 2');\n      });\n    });\n    test('unsupported route', t => {\n      t.plan(3);\n      sget({\n        method: 'GET',\n        url: getUrl(fastify) + '/test/notSupported'\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 404);\n        t.equal(body.toString(), 'this was not found 2');\n      });\n    });\n    test('unsupported method 2', t => {\n      t.plan(3);\n      sget({\n        method: 'PUT',\n        url: getUrl(fastify) + '/test2',\n        body: JSON.stringify({\n          hello: 'world'\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 404);\n        t.equal(body.toString(), 'this was not found 3');\n      });\n    });\n    test('framework-unsupported method 2', t => {\n      t.plan(3);\n      sget({\n        method: 'PROPFIND',\n        url: getUrl(fastify) + '/test2',\n        body: JSON.stringify({\n          hello: 'world'\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 404);\n        t.equal(body.toString(), 'this was not found 3');\n      });\n    });\n    test('unsupported route 2', t => {\n      t.plan(3);\n      sget({\n        method: 'GET',\n        url: getUrl(fastify) + '/test2/notSupported'\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 404);\n        t.equal(body.toString(), 'this was not found 3');\n      });\n    });\n    test('unsupported method 3', t => {\n      t.plan(3);\n      sget({\n        method: 'PUT',\n        url: getUrl(fastify) + '/test3/',\n        body: JSON.stringify({\n          hello: 'world'\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 404);\n        t.equal(body.toString(), 'this was not found 4');\n      });\n    });\n    test('framework-unsupported method 3', t => {\n      t.plan(3);\n      sget({\n        method: 'PROPFIND',\n        url: getUrl(fastify) + '/test3/',\n        body: JSON.stringify({\n          hello: 'world'\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 404);\n        t.equal(body.toString(), 'this was not found 4');\n      });\n    });\n    test('unsupported route 3', t => {\n      t.plan(3);\n      sget({\n        method: 'GET',\n        url: getUrl(fastify) + '/test3/notSupported'\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 404);\n        t.equal(body.toString(), 'this was not found 4');\n      });\n    });\n  });\n});","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"root unsupported method","suites":[],"updatePoint":{"line":397,"column":33,"index":10611},"line":397,"code":"    test('root unsupported method', t => {\n      t.plan(3);\n      sget({\n        method: 'PUT',\n        url: getUrl(fastify),\n        body: JSON.stringify({\n          hello: 'world'\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 404);\n        t.equal(body.toString(), 'this was not found');\n      });\n    });","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"root framework-unsupported method","suites":[],"updatePoint":{"line":414,"column":43,"index":11064},"line":414,"code":"    test('root framework-unsupported method', t => {\n      t.plan(3);\n      sget({\n        method: 'PROPFIND',\n        url: getUrl(fastify),\n        body: JSON.stringify({\n          hello: 'world'\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 404);\n        t.equal(body.toString(), 'this was not found');\n      });\n    });","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"root unsupported route","suites":[],"updatePoint":{"line":431,"column":32,"index":11511},"line":431,"code":"    test('root unsupported route', t => {\n      t.plan(3);\n      sget({\n        method: 'GET',\n        url: getUrl(fastify) + '/notSupported'\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 404);\n        t.equal(body.toString(), 'this was not found');\n      });\n    });","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"unsupported method","suites":[],"updatePoint":{"line":442,"column":28,"index":11824},"line":442,"code":"    test('unsupported method', t => {\n      t.plan(3);\n      sget({\n        method: 'PUT',\n        url: getUrl(fastify) + '/test',\n        body: JSON.stringify({\n          hello: 'world'\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 404);\n        t.equal(body.toString(), 'this was not found 2');\n      });\n    });","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"framework-unsupported method","suites":[],"updatePoint":{"line":459,"column":38,"index":12284},"line":459,"code":"    test('framework-unsupported method', t => {\n      t.plan(3);\n      sget({\n        method: 'PROPFIND',\n        url: getUrl(fastify) + '/test',\n        body: JSON.stringify({\n          hello: 'world'\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 404);\n        t.equal(body.toString(), 'this was not found 2');\n      });\n    });","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"unsupported route","suites":[],"updatePoint":{"line":476,"column":27,"index":12738},"line":476,"code":"    test('unsupported route', t => {\n      t.plan(3);\n      sget({\n        method: 'GET',\n        url: getUrl(fastify) + '/test/notSupported'\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 404);\n        t.equal(body.toString(), 'this was not found 2');\n      });\n    });","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"unsupported method 2","suites":[],"updatePoint":{"line":487,"column":30,"index":13060},"line":487,"code":"    test('unsupported method 2', t => {\n      t.plan(3);\n      sget({\n        method: 'PUT',\n        url: getUrl(fastify) + '/test2',\n        body: JSON.stringify({\n          hello: 'world'\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 404);\n        t.equal(body.toString(), 'this was not found 3');\n      });\n    });","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"framework-unsupported method 2","suites":[],"updatePoint":{"line":504,"column":40,"index":13523},"line":504,"code":"    test('framework-unsupported method 2', t => {\n      t.plan(3);\n      sget({\n        method: 'PROPFIND',\n        url: getUrl(fastify) + '/test2',\n        body: JSON.stringify({\n          hello: 'world'\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 404);\n        t.equal(body.toString(), 'this was not found 3');\n      });\n    });","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"unsupported route 2","suites":[],"updatePoint":{"line":521,"column":29,"index":13980},"line":521,"code":"    test('unsupported route 2', t => {\n      t.plan(3);\n      sget({\n        method: 'GET',\n        url: getUrl(fastify) + '/test2/notSupported'\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 404);\n        t.equal(body.toString(), 'this was not found 3');\n      });\n    });","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"unsupported method 3","suites":[],"updatePoint":{"line":532,"column":30,"index":14303},"line":532,"code":"    test('unsupported method 3', t => {\n      t.plan(3);\n      sget({\n        method: 'PUT',\n        url: getUrl(fastify) + '/test3/',\n        body: JSON.stringify({\n          hello: 'world'\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 404);\n        t.equal(body.toString(), 'this was not found 4');\n      });\n    });","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"framework-unsupported method 3","suites":[],"updatePoint":{"line":549,"column":40,"index":14767},"line":549,"code":"    test('framework-unsupported method 3', t => {\n      t.plan(3);\n      sget({\n        method: 'PROPFIND',\n        url: getUrl(fastify) + '/test3/',\n        body: JSON.stringify({\n          hello: 'world'\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 404);\n        t.equal(body.toString(), 'this was not found 4');\n      });\n    });","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"unsupported route 3","suites":[],"updatePoint":{"line":566,"column":29,"index":15225},"line":566,"code":"    test('unsupported route 3', t => {\n      t.plan(3);\n      sget({\n        method: 'GET',\n        url: getUrl(fastify) + '/test3/notSupported'\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 404);\n        t.equal(body.toString(), 'this was not found 4');\n      });\n    });","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"custom 404 hook and handler context","suites":[],"updatePoint":{"line":579,"column":41,"index":15569},"line":579,"code":"test('custom 404 hook and handler context', t => {\n  t.plan(21);\n  const fastify = Fastify();\n  fastify.decorate('foo', 42);\n  fastify.addHook('onRequest', function (req, res, done) {\n    t.equal(this.foo, 42);\n    done();\n  });\n  fastify.addHook('preHandler', function (request, reply, done) {\n    t.equal(this.foo, 42);\n    done();\n  });\n  fastify.addHook('onSend', function (request, reply, payload, done) {\n    t.equal(this.foo, 42);\n    done();\n  });\n  fastify.addHook('onResponse', function (request, reply, done) {\n    t.equal(this.foo, 42);\n    done();\n  });\n  fastify.setNotFoundHandler(function (req, reply) {\n    t.equal(this.foo, 42);\n    reply.code(404).send('this was not found');\n  });\n  fastify.register(function (instance, opts, done) {\n    instance.decorate('bar', 84);\n    instance.addHook('onRequest', function (req, res, done) {\n      t.equal(this.bar, 84);\n      done();\n    });\n    instance.addHook('preHandler', function (request, reply, done) {\n      t.equal(this.bar, 84);\n      done();\n    });\n    instance.addHook('onSend', function (request, reply, payload, done) {\n      t.equal(this.bar, 84);\n      done();\n    });\n    instance.addHook('onResponse', function (request, reply, done) {\n      t.equal(this.bar, 84);\n      done();\n    });\n    instance.setNotFoundHandler(function (req, reply) {\n      t.equal(this.foo, 42);\n      t.equal(this.bar, 84);\n      reply.code(404).send('encapsulated was not found');\n    });\n    done();\n  }, {\n    prefix: '/encapsulated'\n  });\n  fastify.inject('/not-found', (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 404);\n    t.equal(res.payload, 'this was not found');\n  });\n  fastify.inject('/encapsulated/not-found', (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 404);\n    t.equal(res.payload, 'encapsulated was not found');\n  });\n});","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"encapsulated custom 404 without - prefix hook and handler context","suites":[],"updatePoint":{"line":641,"column":71,"index":17429},"line":641,"code":"test('encapsulated custom 404 without - prefix hook and handler context', t => {\n  t.plan(13);\n  const fastify = Fastify();\n  fastify.decorate('foo', 42);\n  fastify.register(function (instance, opts, done) {\n    instance.decorate('bar', 84);\n    instance.addHook('onRequest', function (req, res, done) {\n      t.equal(this.foo, 42);\n      t.equal(this.bar, 84);\n      done();\n    });\n    instance.addHook('preHandler', function (request, reply, done) {\n      t.equal(this.foo, 42);\n      t.equal(this.bar, 84);\n      done();\n    });\n    instance.addHook('onSend', function (request, reply, payload, done) {\n      t.equal(this.foo, 42);\n      t.equal(this.bar, 84);\n      done();\n    });\n    instance.addHook('onResponse', function (request, reply, done) {\n      t.equal(this.foo, 42);\n      t.equal(this.bar, 84);\n      done();\n    });\n    instance.setNotFoundHandler(function (request, reply) {\n      t.equal(this.foo, 42);\n      t.equal(this.bar, 84);\n      reply.code(404).send('custom not found');\n    });\n    done();\n  });\n  fastify.inject('/not-found', (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 404);\n    t.equal(res.payload, 'custom not found');\n  });\n});","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"run hooks on default 404","suites":[],"updatePoint":{"line":680,"column":30,"index":18571},"line":680,"code":"test('run hooks on default 404', t => {\n  t.plan(7);\n  const fastify = Fastify();\n  fastify.addHook('onRequest', function (req, res, done) {\n    t.pass('onRequest called');\n    done();\n  });\n  fastify.addHook('preHandler', function (request, reply, done) {\n    t.pass('preHandler called');\n    done();\n  });\n  fastify.addHook('onSend', function (request, reply, payload, done) {\n    t.pass('onSend called');\n    done();\n  });\n  fastify.addHook('onResponse', function (request, reply, done) {\n    t.pass('onResponse called');\n    done();\n  });\n  fastify.get('/', function (req, reply) {\n    reply.send({\n      hello: 'world'\n    });\n  });\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    sget({\n      method: 'PUT',\n      url: getUrl(fastify),\n      body: JSON.stringify({\n        hello: 'world'\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 404);\n    });\n  });\n});","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"run non-encapsulated plugin hooks on default 404","suites":[],"updatePoint":{"line":724,"column":54,"index":19642},"line":724,"code":"test('run non-encapsulated plugin hooks on default 404', t => {\n  t.plan(6);\n  const fastify = Fastify();\n  fastify.register(fp(function (instance, options, done) {\n    instance.addHook('onRequest', function (req, res, done) {\n      t.pass('onRequest called');\n      done();\n    });\n    instance.addHook('preHandler', function (request, reply, done) {\n      t.pass('preHandler called');\n      done();\n    });\n    instance.addHook('onSend', function (request, reply, payload, done) {\n      t.pass('onSend called');\n      done();\n    });\n    instance.addHook('onResponse', function (request, reply, done) {\n      t.pass('onResponse called');\n      done();\n    });\n    done();\n  }));\n  fastify.get('/', function (req, reply) {\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/',\n    payload: {\n      hello: 'world'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 404);\n  });\n});","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"run non-encapsulated plugin hooks on custom 404","suites":[],"updatePoint":{"line":762,"column":53,"index":20595},"line":762,"code":"test('run non-encapsulated plugin hooks on custom 404', t => {\n  t.plan(11);\n  const fastify = Fastify();\n  const plugin = fp((instance, opts, done) => {\n    instance.addHook('onRequest', function (req, res, done) {\n      t.pass('onRequest called');\n      done();\n    });\n    instance.addHook('preHandler', function (request, reply, done) {\n      t.pass('preHandler called');\n      done();\n    });\n    instance.addHook('onSend', function (request, reply, payload, done) {\n      t.pass('onSend called');\n      done();\n    });\n    instance.addHook('onResponse', function (request, reply, done) {\n      t.pass('onResponse called');\n      done();\n    });\n    done();\n  });\n  fastify.register(plugin);\n  fastify.get('/', function (req, reply) {\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.setNotFoundHandler(function (req, reply) {\n    reply.code(404).send('this was not found');\n  });\n  fastify.register(plugin); // Registering plugin after handler also works\n\n  fastify.inject({\n    url: '/not-found'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 404);\n    t.equal(res.payload, 'this was not found');\n  });\n});","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"run hook with encapsulated 404","suites":[],"updatePoint":{"line":803,"column":36,"index":21725},"line":803,"code":"test('run hook with encapsulated 404', t => {\n  t.plan(11);\n  const fastify = Fastify();\n  fastify.addHook('onRequest', function (req, res, done) {\n    t.pass('onRequest called');\n    done();\n  });\n  fastify.addHook('preHandler', function (request, reply, done) {\n    t.pass('preHandler called');\n    done();\n  });\n  fastify.addHook('onSend', function (request, reply, payload, done) {\n    t.pass('onSend called');\n    done();\n  });\n  fastify.addHook('onResponse', function (request, reply, done) {\n    t.pass('onResponse called');\n    done();\n  });\n  fastify.register(function (f, opts, done) {\n    f.setNotFoundHandler(function (req, reply) {\n      reply.code(404).send('this was not found 2');\n    });\n    f.addHook('onRequest', function (req, res, done) {\n      t.pass('onRequest 2 called');\n      done();\n    });\n    f.addHook('preHandler', function (request, reply, done) {\n      t.pass('preHandler 2 called');\n      done();\n    });\n    f.addHook('onSend', function (request, reply, payload, done) {\n      t.pass('onSend 2 called');\n      done();\n    });\n    f.addHook('onResponse', function (request, reply, done) {\n      t.pass('onResponse 2 called');\n      done();\n    });\n    done();\n  }, {\n    prefix: '/test'\n  });\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    sget({\n      method: 'PUT',\n      url: getUrl(fastify) + '/test',\n      body: JSON.stringify({\n        hello: 'world'\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 404);\n    });\n  });\n});","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"run hook with encapsulated 404 and framework-unsupported method","suites":[],"updatePoint":{"line":866,"column":69,"index":23404},"line":866,"code":"test('run hook with encapsulated 404 and framework-unsupported method', t => {\n  t.plan(11);\n  const fastify = Fastify();\n  fastify.addHook('onRequest', function (req, res, done) {\n    t.pass('onRequest called');\n    done();\n  });\n  fastify.addHook('preHandler', function (request, reply, done) {\n    t.pass('preHandler called');\n    done();\n  });\n  fastify.addHook('onSend', function (request, reply, payload, done) {\n    t.pass('onSend called');\n    done();\n  });\n  fastify.addHook('onResponse', function (request, reply, done) {\n    t.pass('onResponse called');\n    done();\n  });\n  fastify.register(function (f, opts, done) {\n    f.setNotFoundHandler(function (req, reply) {\n      reply.code(404).send('this was not found 2');\n    });\n    f.addHook('onRequest', function (req, res, done) {\n      t.pass('onRequest 2 called');\n      done();\n    });\n    f.addHook('preHandler', function (request, reply, done) {\n      t.pass('preHandler 2 called');\n      done();\n    });\n    f.addHook('onSend', function (request, reply, payload, done) {\n      t.pass('onSend 2 called');\n      done();\n    });\n    f.addHook('onResponse', function (request, reply, done) {\n      t.pass('onResponse 2 called');\n      done();\n    });\n    done();\n  }, {\n    prefix: '/test'\n  });\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    sget({\n      method: 'PROPFIND',\n      url: getUrl(fastify) + '/test',\n      body: JSON.stringify({\n        hello: 'world'\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 404);\n    });\n  });\n});","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"hooks check 404","suites":[],"updatePoint":{"line":929,"column":21,"index":25040},"line":929,"code":"test('hooks check 404', t => {\n  t.plan(13);\n  const fastify = Fastify();\n  fastify.get('/', function (req, reply) {\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.addHook('onSend', (req, reply, payload, done) => {\n    t.same(req.query, {\n      foo: 'asd'\n    });\n    t.ok('called', 'onSend');\n    done();\n  });\n  fastify.addHook('onRequest', (req, res, done) => {\n    t.ok('called', 'onRequest');\n    done();\n  });\n  fastify.addHook('onResponse', (request, reply, done) => {\n    t.ok('called', 'onResponse');\n    done();\n  });\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    sget({\n      method: 'PUT',\n      url: getUrl(fastify) + '?foo=asd',\n      body: JSON.stringify({\n        hello: 'world'\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 404);\n    });\n    sget({\n      method: 'GET',\n      url: getUrl(fastify) + '/notSupported?foo=asd'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 404);\n    });\n  });\n});","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"setNotFoundHandler should not suppress duplicated routes checking","suites":[],"updatePoint":{"line":979,"column":71,"index":26243},"line":979,"code":"test('setNotFoundHandler should not suppress duplicated routes checking', t => {\n  t.plan(1);\n  const fastify = Fastify();\n\n  try {\n    fastify.get('/', function (req, reply) {\n      reply.send({\n        hello: 'world'\n      });\n    });\n    fastify.get('/', function (req, reply) {\n      reply.send({\n        hello: 'world'\n      });\n    });\n    fastify.setNotFoundHandler(function (req, reply) {\n      reply.code(404).send('this was not found');\n    });\n    t.fail('setNotFoundHandler should not interfere duplicated route error');\n  } catch (error) {\n    t.ok(error);\n  }\n});","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"log debug for 404","suites":[],"updatePoint":{"line":1002,"column":23,"index":26773},"line":1002,"code":"test('log debug for 404', t => {\n  t.plan(1);\n\n  const Writable = require('stream').Writable;\n\n  const logStream = new Writable();\n  logStream.logs = [];\n\n  logStream._write = function (chunk, encoding, callback) {\n    this.logs.push(chunk.toString());\n    callback();\n  };\n\n  const fastify = Fastify({\n    logger: {\n      level: 'trace',\n      stream: logStream\n    }\n  });\n  fastify.get('/', function (req, reply) {\n    reply.send({\n      hello: 'world'\n    });\n  });\n  t.teardown(fastify.close.bind(fastify));\n  t.test('log debug', t => {\n    t.plan(7);\n    fastify.inject({\n      method: 'GET',\n      url: '/not-found'\n    }, (err, response) => {\n      t.error(err);\n      t.equal(response.statusCode, 404);\n      const INFO_LEVEL = 30;\n      t.equal(JSON.parse(logStream.logs[0]).msg, 'incoming request');\n      t.equal(JSON.parse(logStream.logs[1]).msg, 'Route GET:/not-found not found');\n      t.equal(JSON.parse(logStream.logs[1]).level, INFO_LEVEL);\n      t.equal(JSON.parse(logStream.logs[2]).msg, 'request completed');\n      t.equal(logStream.logs.length, 3);\n    });\n  });\n});","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"Unknown method","suites":[],"updatePoint":{"line":1044,"column":20,"index":27859},"line":1044,"code":"test('Unknown method', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.get('/', function (req, reply) {\n    reply.send({\n      hello: 'world'\n    });\n  });\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n\n    const handler = () => {}; // See https://github.com/fastify/light-my-request/pull/20\n\n\n    t.throws(() => fastify.inject({\n      method: 'UNKNWON_METHOD',\n      url: '/'\n    }, handler), Error);\n    sget({\n      method: 'UNKNWON_METHOD',\n      url: getUrl(fastify)\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 400);\n      t.strictSame(JSON.parse(body), {\n        error: 'Bad Request',\n        message: 'Client Error',\n        statusCode: 400\n      });\n    });\n  });\n});","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"recognizes errors from the http-errors module","suites":[],"updatePoint":{"line":1079,"column":51,"index":28682},"line":1079,"code":"test('recognizes errors from the http-errors module', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.get('/', function (req, reply) {\n    reply.send(new errors.NotFound());\n  });\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    fastify.inject({\n      method: 'GET',\n      url: '/'\n    }, (err, res) => {\n      t.error(err);\n      t.equal(res.statusCode, 404);\n      sget(getUrl(fastify), (err, response, body) => {\n        t.error(err);\n        const obj = JSON.parse(body.toString());\n        t.strictSame(obj, {\n          error: 'Not Found',\n          message: 'Not Found',\n          statusCode: 404\n        });\n      });\n    });\n  });\n});","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"the default 404 handler can be invoked inside a prefixed plugin","suites":[],"updatePoint":{"line":1108,"column":69,"index":29415},"line":1108,"code":"test('the default 404 handler can be invoked inside a prefixed plugin', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.register(function (instance, opts, done) {\n    instance.get('/path', function (request, reply) {\n      reply.send(new errors.NotFound());\n    });\n    done();\n  }, {\n    prefix: '/v1'\n  });\n  fastify.inject('/v1/path', (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 404);\n    t.strictSame(JSON.parse(res.payload), {\n      error: 'Not Found',\n      message: 'Not Found',\n      statusCode: 404\n    });\n  });\n});","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"an inherited custom 404 handler can be invoked inside a prefixed plugin","suites":[],"updatePoint":{"line":1129,"column":77,"index":29978},"line":1129,"code":"test('an inherited custom 404 handler can be invoked inside a prefixed plugin', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.setNotFoundHandler(function (request, reply) {\n    reply.code(404).send('custom handler');\n  });\n  fastify.register(function (instance, opts, done) {\n    instance.get('/path', function (request, reply) {\n      reply.send(new errors.NotFound());\n    });\n    done();\n  }, {\n    prefix: '/v1'\n  });\n  fastify.inject('/v1/path', (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 404);\n    t.same(JSON.parse(res.payload), {\n      error: 'Not Found',\n      message: 'Not Found',\n      statusCode: 404\n    });\n  });\n});","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"encapsulated custom 404 handler without a prefix is the handler for the entire 404 level","suites":[],"updatePoint":{"line":1153,"column":94,"index":30659},"line":1153,"code":"test('encapsulated custom 404 handler without a prefix is the handler for the entire 404 level', t => {\n  t.plan(6);\n  const fastify = Fastify();\n  fastify.register(function (instance, opts, done) {\n    instance.setNotFoundHandler(function (request, reply) {\n      reply.code(404).send('custom handler');\n    });\n    done();\n  });\n  fastify.register(function (instance, opts, done) {\n    instance.register(function (instance2, opts, done) {\n      instance2.setNotFoundHandler(function (request, reply) {\n        reply.code(404).send('custom handler 2');\n      });\n      done();\n    });\n    done();\n  }, {\n    prefix: 'prefixed'\n  });\n  fastify.inject('/not-found', (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 404);\n    t.equal(res.payload, 'custom handler');\n  });\n  fastify.inject('/prefixed/not-found', (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 404);\n    t.equal(res.payload, 'custom handler 2');\n  });\n});","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"cannot set notFoundHandler after binding","suites":[],"updatePoint":{"line":1184,"column":46,"index":31558},"line":1184,"code":"test('cannot set notFoundHandler after binding', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n\n    try {\n      fastify.setNotFoundHandler(() => {});\n      t.fail();\n    } catch (e) {\n      t.pass();\n    }\n  });\n});","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"404 inside onSend","suites":[],"updatePoint":{"line":1201,"column":23,"index":31860},"line":1201,"code":"test('404 inside onSend', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  let called = false;\n  fastify.get('/', function (req, reply) {\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.addHook('onSend', function (request, reply, payload, done) {\n    if (!called) {\n      called = true;\n      done(new errors.NotFound());\n    } else {\n      done();\n    }\n  });\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    sget({\n      method: 'GET',\n      url: getUrl(fastify)\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 404);\n    });\n  });\n}); // https://github.com/fastify/fastify/issues/868","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"onSend hooks run when an encapsulated route invokes the notFound handler","suites":[],"updatePoint":{"line":1233,"column":78,"index":32620},"line":1233,"code":"test('onSend hooks run when an encapsulated route invokes the notFound handler', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.register((instance, options, done) => {\n    instance.addHook('onSend', (request, reply, payload, done) => {\n      t.pass('onSend hook called');\n      done();\n    });\n    instance.get('/', (request, reply) => {\n      reply.send(new errors.NotFound());\n    });\n    done();\n  });\n  fastify.inject('/', (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 404);\n  });\n}); // https://github.com/fastify/fastify/issues/713","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"preHandler option for setNotFoundHandler","suites":[],"updatePoint":{"line":1252,"column":46,"index":33155},"line":1252,"code":"test('preHandler option for setNotFoundHandler', t => {\n  t.plan(10);\n  t.test('preHandler option', t => {\n    t.plan(2);\n    const fastify = Fastify();\n    fastify.setNotFoundHandler({\n      preHandler: (req, reply, done) => {\n        req.body.preHandler = true;\n        done();\n      }\n    }, function (req, reply) {\n      reply.code(404).send(req.body);\n    });\n    fastify.inject({\n      method: 'POST',\n      url: '/not-found',\n      payload: {\n        hello: 'world'\n      }\n    }, (err, res) => {\n      t.error(err);\n      const payload = JSON.parse(res.payload);\n      t.same(payload, {\n        preHandler: true,\n        hello: 'world'\n      });\n    });\n  }); // https://github.com/fastify/fastify/issues/2229\n\n  t.test('preHandler hook in setNotFoundHandler should be called when callNotFound', {\n    timeout: 40000\n  }, t => {\n    t.plan(3);\n    const fastify = Fastify();\n    fastify.setNotFoundHandler({\n      preHandler: (req, reply, done) => {\n        req.body.preHandler = true;\n        done();\n      }\n    }, function (req, reply) {\n      reply.code(404).send(req.body);\n    });\n    fastify.post('/', function (req, reply) {\n      t.equal(reply.callNotFound(), reply);\n    });\n    fastify.inject({\n      method: 'POST',\n      url: '/',\n      payload: {\n        hello: 'world'\n      }\n    }, (err, res) => {\n      t.error(err);\n      const payload = JSON.parse(res.payload);\n      t.same(payload, {\n        preHandler: true,\n        hello: 'world'\n      });\n    });\n  });\n  t.test('preHandler hook in setNotFoundHandler should accept an array of functions and be called when callNotFound', t => {\n    t.plan(2);\n    const fastify = Fastify();\n    fastify.setNotFoundHandler({\n      preHandler: [(req, reply, done) => {\n        req.body.preHandler1 = true;\n        done();\n      }, (req, reply, done) => {\n        req.body.preHandler2 = true;\n        done();\n      }]\n    }, function (req, reply) {\n      reply.code(404).send(req.body);\n    });\n    fastify.post('/', function (req, reply) {\n      reply.callNotFound();\n    });\n    fastify.inject({\n      method: 'POST',\n      url: '/',\n      payload: {\n        hello: 'world'\n      }\n    }, (err, res) => {\n      t.error(err);\n      const payload = JSON.parse(res.payload);\n      t.same(payload, {\n        preHandler1: true,\n        preHandler2: true,\n        hello: 'world'\n      });\n    });\n  });\n  t.test('preHandler option should be called after preHandler hook', t => {\n    t.plan(2);\n    const fastify = Fastify();\n    fastify.addHook('preHandler', (req, reply, done) => {\n      req.body.check = 'a';\n      done();\n    });\n    fastify.setNotFoundHandler({\n      preHandler: (req, reply, done) => {\n        req.body.check += 'b';\n        done();\n      }\n    }, (req, reply) => {\n      reply.send(req.body);\n    });\n    fastify.inject({\n      method: 'POST',\n      url: '/',\n      payload: {\n        hello: 'world'\n      }\n    }, (err, res) => {\n      t.error(err);\n      const payload = JSON.parse(res.payload);\n      t.same(payload, {\n        check: 'ab',\n        hello: 'world'\n      });\n    });\n  });\n  t.test('preHandler option should be unique per prefix', t => {\n    t.plan(4);\n    const fastify = Fastify();\n    fastify.setNotFoundHandler({\n      preHandler: (req, reply, done) => {\n        req.body.hello = 'earth';\n        done();\n      }\n    }, (req, reply) => {\n      reply.send(req.body);\n    });\n    fastify.register(function (i, o, n) {\n      i.setNotFoundHandler((req, reply) => {\n        reply.send(req.body);\n      });\n      n();\n    }, {\n      prefix: '/no'\n    });\n    fastify.inject({\n      method: 'POST',\n      url: '/not-found',\n      payload: {\n        hello: 'world'\n      }\n    }, (err, res) => {\n      t.error(err);\n      const payload = JSON.parse(res.payload);\n      t.same(payload, {\n        hello: 'earth'\n      });\n    });\n    fastify.inject({\n      method: 'POST',\n      url: '/no/not-found',\n      payload: {\n        hello: 'world'\n      }\n    }, (err, res) => {\n      t.error(err);\n      const payload = JSON.parse(res.payload);\n      t.same(payload, {\n        hello: 'world'\n      });\n    });\n  });\n  t.test('preHandler option should handle errors', t => {\n    t.plan(3);\n    const fastify = Fastify();\n    fastify.setNotFoundHandler({\n      preHandler: (req, reply, done) => {\n        done(new Error('kaboom'));\n      }\n    }, (req, reply) => {\n      reply.send(req.body);\n    });\n    fastify.inject({\n      method: 'POST',\n      url: '/not-found',\n      payload: {\n        hello: 'world'\n      }\n    }, (err, res) => {\n      t.error(err);\n      const payload = JSON.parse(res.payload);\n      t.equal(res.statusCode, 500);\n      t.same(payload, {\n        message: 'kaboom',\n        error: 'Internal Server Error',\n        statusCode: 500\n      });\n    });\n  });\n  t.test('preHandler option should handle errors with custom status code', t => {\n    t.plan(3);\n    const fastify = Fastify();\n    fastify.setNotFoundHandler({\n      preHandler: (req, reply, done) => {\n        reply.code(401);\n        done(new Error('go away'));\n      }\n    }, (req, reply) => {\n      reply.send(req.body);\n    });\n    fastify.inject({\n      method: 'POST',\n      url: '/not-found',\n      payload: {\n        hello: 'world'\n      }\n    }, (err, res) => {\n      t.error(err);\n      const payload = JSON.parse(res.payload);\n      t.equal(res.statusCode, 401);\n      t.same(payload, {\n        message: 'go away',\n        error: 'Unauthorized',\n        statusCode: 401\n      });\n    });\n  });\n  t.test('preHandler option could accept an array of functions', t => {\n    t.plan(2);\n    const fastify = Fastify();\n    fastify.setNotFoundHandler({\n      preHandler: [(req, reply, done) => {\n        req.body.preHandler = 'a';\n        done();\n      }, (req, reply, done) => {\n        req.body.preHandler += 'b';\n        done();\n      }]\n    }, (req, reply) => {\n      reply.send(req.body);\n    });\n    fastify.inject({\n      method: 'POST',\n      url: '/not-found',\n      payload: {\n        hello: 'world'\n      }\n    }, (err, res) => {\n      t.error(err);\n      const payload = JSON.parse(res.payload);\n      t.same(payload, {\n        preHandler: 'ab',\n        hello: 'world'\n      });\n    });\n  });\n  t.test('preHandler option does not interfere with preHandler', t => {\n    t.plan(4);\n    const fastify = Fastify();\n    fastify.addHook('preHandler', (req, reply, done) => {\n      req.body.check = 'a';\n      done();\n    });\n    fastify.setNotFoundHandler({\n      preHandler: (req, reply, done) => {\n        req.body.check += 'b';\n        done();\n      }\n    }, (req, reply) => {\n      reply.send(req.body);\n    });\n    fastify.register(function (i, o, n) {\n      i.setNotFoundHandler((req, reply) => {\n        reply.send(req.body);\n      });\n      n();\n    }, {\n      prefix: '/no'\n    });\n    fastify.inject({\n      method: 'post',\n      url: '/not-found',\n      payload: {\n        hello: 'world'\n      }\n    }, (err, res) => {\n      t.error(err);\n      const payload = JSON.parse(res.payload);\n      t.same(payload, {\n        check: 'ab',\n        hello: 'world'\n      });\n    });\n    fastify.inject({\n      method: 'post',\n      url: '/no/not-found',\n      payload: {\n        hello: 'world'\n      }\n    }, (err, res) => {\n      t.error(err);\n      const payload = JSON.parse(res.payload);\n      t.same(payload, {\n        check: 'a',\n        hello: 'world'\n      });\n    });\n  });\n  t.test('preHandler option should keep the context', t => {\n    t.plan(3);\n    const fastify = Fastify();\n    fastify.decorate('foo', 42);\n    fastify.setNotFoundHandler({\n      preHandler: function (req, reply, done) {\n        t.equal(this.foo, 42);\n        this.foo += 1;\n        req.body.foo = this.foo;\n        done();\n      }\n    }, (req, reply) => {\n      reply.send(req.body);\n    });\n    fastify.inject({\n      method: 'POST',\n      url: '/not-found',\n      payload: {\n        hello: 'world'\n      }\n    }, (err, res) => {\n      t.error(err);\n      const payload = JSON.parse(res.payload);\n      t.same(payload, {\n        foo: 43,\n        hello: 'world'\n      });\n    });\n  });\n});","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"reply.notFound invoked the notFound handler","suites":[],"updatePoint":{"line":1587,"column":49,"index":41210},"line":1587,"code":"test('reply.notFound invoked the notFound handler', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.setNotFoundHandler((req, reply) => {\n    reply.code(404).send(new Error('kaboom'));\n  });\n  fastify.get('/', function (req, reply) {\n    reply.callNotFound();\n  });\n  fastify.inject({\n    url: '/',\n    method: 'GET'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 404);\n    t.same(JSON.parse(res.payload), {\n      error: 'Not Found',\n      message: 'kaboom',\n      statusCode: 404\n    });\n  });\n});","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"The custom error handler should be invoked after the custom not found handler","suites":[],"updatePoint":{"line":1609,"column":83,"index":41773},"line":1609,"code":"test('The custom error handler should be invoked after the custom not found handler', t => {\n  t.plan(6);\n  const fastify = Fastify();\n  const order = [1, 2];\n  fastify.setErrorHandler((err, req, reply) => {\n    t.equal(order.shift(), 2);\n    t.type(err, Error);\n    reply.send(err);\n  });\n  fastify.setNotFoundHandler((req, reply) => {\n    t.equal(order.shift(), 1);\n    reply.code(404).send(new Error('kaboom'));\n  });\n  fastify.get('/', function (req, reply) {\n    reply.callNotFound();\n  });\n  fastify.inject({\n    url: '/',\n    method: 'GET'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 404);\n    t.same(JSON.parse(res.payload), {\n      error: 'Not Found',\n      message: 'kaboom',\n      statusCode: 404\n    });\n  });\n});","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"If the custom not found handler does not use an Error, the custom error handler should not be called","suites":[],"updatePoint":{"line":1638,"column":106,"index":42545},"line":1638,"code":"test('If the custom not found handler does not use an Error, the custom error handler should not be called', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.setErrorHandler((_err, req, reply) => {\n    t.fail('Should not be called');\n  });\n  fastify.setNotFoundHandler((req, reply) => {\n    reply.code(404).send('kaboom');\n  });\n  fastify.get('/', function (req, reply) {\n    reply.callNotFound();\n  });\n  fastify.inject({\n    url: '/',\n    method: 'GET'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 404);\n    t.equal(res.payload, 'kaboom');\n  });\n});","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"preValidation option","suites":[],"updatePoint":{"line":1659,"column":26,"index":43049},"line":1659,"code":"test('preValidation option', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.decorate('foo', true);\n  fastify.setNotFoundHandler({\n    preValidation: function (req, reply, done) {\n      t.ok(this.foo);\n      done();\n    }\n  }, function (req, reply) {\n    reply.code(404).send(req.body);\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/not-found',\n    payload: {\n      hello: 'world'\n    }\n  }, (err, res) => {\n    t.error(err);\n    const payload = JSON.parse(res.payload);\n    t.same(payload, {\n      hello: 'world'\n    });\n  });\n});","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"Should fail to invoke callNotFound inside a 404 handler","suites":[],"updatePoint":{"line":1713,"column":61,"index":44241},"line":1713,"code":"test('Should fail to invoke callNotFound inside a 404 handler', t => {\n  t.plan(5);\n  let fastify = null;\n  const logStream = split(JSON.parse);\n\n  try {\n    fastify = Fastify({\n      logger: {\n        stream: logStream,\n        level: 'warn'\n      }\n    });\n  } catch (e) {\n    t.fail();\n  }\n\n  fastify.setNotFoundHandler((req, reply) => {\n    reply.callNotFound();\n  });\n  fastify.get('/', function (req, reply) {\n    reply.callNotFound();\n  });\n  logStream.once('data', line => {\n    t.equal(line.msg, 'Trying to send a NotFound error inside a 404 handler. Sending basic 404 response.');\n    t.equal(line.level, 40);\n  });\n  fastify.inject({\n    url: '/',\n    method: 'GET'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 404);\n    t.equal(res.payload, '404 Not Found');\n  });\n});","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"400 in case of bad url (pre find-my-way v2.2.0 was a 404)","suites":[],"updatePoint":{"line":1748,"column":63,"index":45046},"line":1748,"code":"test('400 in case of bad url (pre find-my-way v2.2.0 was a 404)', t => {\n  t.test('Dynamic route', t => {\n    t.plan(3);\n    const fastify = Fastify();\n    fastify.get('/hello/:id', () => t.fail('we should not be here'));\n    fastify.inject({\n      url: '/hello/%world',\n      method: 'GET'\n    }, (err, response) => {\n      t.error(err);\n      t.equal(response.statusCode, 400);\n      t.same(JSON.parse(response.payload), {\n        error: 'Bad Request',\n        message: \"'/hello/%world' is not a valid url component\",\n        statusCode: 400\n      });\n    });\n  });\n  t.test('Wildcard', t => {\n    t.plan(3);\n    const fastify = Fastify();\n    fastify.get('*', () => t.fail('we should not be here'));\n    fastify.inject({\n      url: '/hello/%world',\n      method: 'GET'\n    }, (err, response) => {\n      t.error(err);\n      t.equal(response.statusCode, 400);\n      t.same(JSON.parse(response.payload), {\n        error: 'Bad Request',\n        message: \"'/hello/%world' is not a valid url component\",\n        statusCode: 400\n      });\n    });\n  });\n  t.test('No route registered', t => {\n    t.plan(3);\n    const fastify = Fastify();\n    fastify.inject({\n      url: '/%c0',\n      method: 'GET'\n    }, (err, response) => {\n      t.error(err);\n      t.equal(response.statusCode, 404);\n      t.same(JSON.parse(response.payload), {\n        error: 'Not Found',\n        message: 'Route GET:/%c0 not found',\n        statusCode: 404\n      });\n    });\n  });\n  t.test('Only / is registered', t => {\n    t.plan(3);\n    const fastify = Fastify();\n    fastify.get('/', () => t.fail('we should not be here'));\n    fastify.inject({\n      url: '/non-existing',\n      method: 'GET'\n    }, (err, response) => {\n      t.error(err);\n      t.equal(response.statusCode, 404);\n      t.same(JSON.parse(response.payload), {\n        error: 'Not Found',\n        message: 'Route GET:/non-existing not found',\n        statusCode: 404\n      });\n    });\n  });\n  t.test('customized 404', t => {\n    t.plan(3);\n    const fastify = Fastify({\n      logger: true\n    });\n    fastify.setNotFoundHandler(function (req, reply) {\n      reply.code(404).send('this was not found');\n    });\n    fastify.inject({\n      url: '/%c0',\n      method: 'GET'\n    }, (err, response) => {\n      t.error(err);\n      t.equal(response.statusCode, 404);\n      t.same(response.payload, 'this was not found');\n    });\n  });\n  t.end();\n});","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"setNotFoundHandler should be chaining fastify instance","suites":[],"updatePoint":{"line":1835,"column":60,"index":47423},"line":1835,"code":"test('setNotFoundHandler should be chaining fastify instance', t => {\n  t.test('Register route after setNotFoundHandler', t => {\n    t.plan(6);\n    const fastify = Fastify();\n    fastify.setNotFoundHandler(function (_req, reply) {\n      reply.code(404).send('this was not found');\n    }).get('/valid-route', function (_req, reply) {\n      reply.send('valid route');\n    });\n    fastify.inject({\n      url: '/invalid-route',\n      method: 'GET'\n    }, (err, response) => {\n      t.error(err);\n      t.equal(response.statusCode, 404);\n      t.equal(response.payload, 'this was not found');\n    });\n    fastify.inject({\n      url: '/valid-route',\n      method: 'GET'\n    }, (err, response) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.payload, 'valid route');\n    });\n  });\n  t.end();\n});","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"Send 404 when frameworkError calls reply.callNotFound","suites":[],"updatePoint":{"line":1863,"column":59,"index":48252},"line":1863,"code":"test('Send 404 when frameworkError calls reply.callNotFound', t => {\n  t.test('Dynamic route', t => {\n    t.plan(4);\n    const fastify = Fastify({\n      frameworkErrors: (error, req, reply) => {\n        t.equal(error.message, \"'/hello/%world' is not a valid url component\");\n        return reply.callNotFound();\n      }\n    });\n    fastify.get('/hello/:id', () => t.fail('we should not be here'));\n    fastify.inject({\n      url: '/hello/%world',\n      method: 'GET'\n    }, (err, response) => {\n      t.error(err);\n      t.equal(response.statusCode, 404);\n      t.equal(response.payload, '404 Not Found');\n    });\n  });\n  t.end();\n});","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"hooks are applied to not found handlers /1","suites":[],"updatePoint":{"line":1884,"column":48,"index":48876},"line":1884,"code":"test('hooks are applied to not found handlers /1', async ({\n  equal\n}) => {\n  const fastify = Fastify(); // adding await here is fundamental for this test\n\n  await fastify.register(async function (fastify) {});\n  fastify.setErrorHandler(function (_, request, reply) {\n    return reply.code(401).send({\n      error: 'Unauthorized'\n    });\n  });\n  fastify.addHook('preValidation', async function (request, reply) {\n    throw new Error('kaboom');\n  });\n  const {\n    statusCode\n  } = await fastify.inject('/');\n  equal(statusCode, 401);\n});","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"hooks are applied to not found handlers /2","suites":[],"updatePoint":{"line":1903,"column":48,"index":49414},"line":1903,"code":"test('hooks are applied to not found handlers /2', async ({\n  equal\n}) => {\n  const fastify = Fastify();\n\n  async function plugin(fastify) {\n    fastify.setErrorHandler(function (_, request, reply) {\n      return reply.code(401).send({\n        error: 'Unauthorized'\n      });\n    });\n  }\n\n  plugin[Symbol.for('skip-override')] = true;\n  fastify.register(plugin);\n  fastify.addHook('preValidation', async function (request, reply) {\n    throw new Error('kaboom');\n  });\n  const {\n    statusCode\n  } = await fastify.inject('/');\n  equal(statusCode, 401);\n});","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"hooks are applied to not found handlers /3","suites":[],"updatePoint":{"line":1926,"column":48,"index":49971},"line":1926,"code":"test('hooks are applied to not found handlers /3', async ({\n  equal,\n  fail\n}) => {\n  const fastify = Fastify();\n\n  async function plugin(fastify) {\n    fastify.setNotFoundHandler({\n      errorHandler\n    }, async () => {\n      fail('this should never be called');\n    });\n\n    function errorHandler(_, request, reply) {\n      return reply.code(401).send({\n        error: 'Unauthorized'\n      });\n    }\n  }\n\n  plugin[Symbol.for('skip-override')] = true;\n  fastify.register(plugin);\n  fastify.addHook('preValidation', async function (request, reply) {\n    throw new Error('kaboom');\n  });\n  const {\n    statusCode\n  } = await fastify.inject('/');\n  equal(statusCode, 401);\n});","file":"404s.test.js","skipped":false,"dir":"test"},{"name":"default 500","suites":[],"updatePoint":{"line":11,"column":17,"index":161},"line":11,"code":"test('default 500', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.get('/', function (req, reply) {\n    reply.send(new Error('kaboom'));\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 500);\n    t.equal(res.headers['content-type'], 'application/json; charset=utf-8');\n    t.same(JSON.parse(res.payload), {\n      error: 'Internal Server Error',\n      message: 'kaboom',\n      statusCode: 500\n    });\n  });\n});","file":"500s.test.js","skipped":false,"dir":"test"},{"name":"custom 500","suites":[],"updatePoint":{"line":31,"column":16,"index":657},"line":31,"code":"test('custom 500', t => {\n  t.plan(6);\n  const fastify = Fastify();\n  fastify.get('/', function (req, reply) {\n    reply.send(new Error('kaboom'));\n  });\n  fastify.setErrorHandler(function (err, request, reply) {\n    t.type(request, 'object');\n    t.type(request, fastify[symbols.kRequest].parent);\n    reply.code(500).type('text/plain').send('an error happened: ' + err.message);\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 500);\n    t.equal(res.headers['content-type'], 'text/plain');\n    t.same(res.payload.toString(), 'an error happened: kaboom');\n  });\n});","file":"500s.test.js","skipped":false,"dir":"test"},{"name":"encapsulated 500","suites":[],"updatePoint":{"line":52,"column":22,"index":1305},"line":52,"code":"test('encapsulated 500', t => {\n  t.plan(10);\n  const fastify = Fastify();\n  fastify.get('/', function (req, reply) {\n    reply.send(new Error('kaboom'));\n  });\n  fastify.register(function (f, opts, done) {\n    f.get('/', function (req, reply) {\n      reply.send(new Error('kaboom'));\n    });\n    f.setErrorHandler(function (err, request, reply) {\n      t.type(request, 'object');\n      t.type(request, fastify[symbols.kRequest].parent);\n      reply.code(500).type('text/plain').send('an error happened: ' + err.message);\n    });\n    done();\n  }, {\n    prefix: 'test'\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/test'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 500);\n    t.equal(res.headers['content-type'], 'text/plain');\n    t.same(res.payload.toString(), 'an error happened: kaboom');\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 500);\n    t.equal(res.headers['content-type'], 'application/json; charset=utf-8');\n    t.same(JSON.parse(res.payload), {\n      error: 'Internal Server Error',\n      message: 'kaboom',\n      statusCode: 500\n    });\n  });\n});","file":"500s.test.js","skipped":false,"dir":"test"},{"name":"custom 500 with hooks","suites":[],"updatePoint":{"line":94,"column":27,"index":2481},"line":94,"code":"test('custom 500 with hooks', t => {\n  t.plan(7);\n  const fastify = Fastify();\n  fastify.get('/', function (req, reply) {\n    reply.send(new Error('kaboom'));\n  });\n  fastify.setErrorHandler(function (err, request, reply) {\n    reply.code(500).type('text/plain').send('an error happened: ' + err.message);\n  });\n  fastify.addHook('onSend', (req, res, payload, done) => {\n    t.ok('called', 'onSend');\n    done();\n  });\n  fastify.addHook('onRequest', (req, res, done) => {\n    t.ok('called', 'onRequest');\n    done();\n  });\n  fastify.addHook('onResponse', (request, reply, done) => {\n    t.ok('called', 'onResponse');\n    done();\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 500);\n    t.equal(res.headers['content-type'], 'text/plain');\n    t.same(res.payload.toString(), 'an error happened: kaboom');\n  });\n});","file":"500s.test.js","skipped":false,"dir":"test"},{"name":"cannot set errorHandler after binding","suites":[],"updatePoint":{"line":125,"column":43,"index":3387},"line":125,"code":"test('cannot set errorHandler after binding', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n\n    try {\n      fastify.setErrorHandler(() => {});\n      t.fail();\n    } catch (e) {\n      t.pass();\n    }\n  });\n});","file":"500s.test.js","skipped":false,"dir":"test"},{"name":"allow unsafe regex","suites":[],"updatePoint":{"line":11,"column":24,"index":165},"line":11,"code":"test('allow unsafe regex', t => {\n  t.plan(4);\n  const fastify = Fastify({\n    allowUnsafeRegex: false\n  });\n  t.teardown(fastify.close.bind(fastify));\n  fastify.get('/:foo(^[0-9]*$)', (req, reply) => {\n    reply.send({\n      foo: req.params.foo\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/1234'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.same(JSON.parse(body), {\n        foo: '1234'\n      });\n    });\n  });\n});","file":"allowUnsafeRegex.test.js","skipped":false,"dir":"test"},{"name":"allow unsafe regex not match","suites":[],"updatePoint":{"line":38,"column":34,"index":779},"line":38,"code":"test('allow unsafe regex not match', t => {\n  t.plan(3);\n  const fastify = Fastify({\n    allowUnsafeRegex: false\n  });\n  t.teardown(fastify.close.bind(fastify));\n  fastify.get('/:foo(^[0-9]*$)', (req, reply) => {\n    reply.send({\n      foo: req.params.foo\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/a1234'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 404);\n    });\n  });\n});","file":"allowUnsafeRegex.test.js","skipped":false,"dir":"test"},{"name":"allow unsafe regex not safe","suites":[],"updatePoint":{"line":62,"column":33,"index":1330},"line":62,"code":"test('allow unsafe regex not safe', t => {\n  t.plan(1);\n  const fastify = Fastify({\n    allowUnsafeRegex: false\n  });\n  t.teardown(fastify.close.bind(fastify));\n  t.throws(() => {\n    fastify.get('/:foo(^([0-9]+){4}$)', (req, reply) => {\n      reply.send({\n        foo: req.params.foo\n      });\n    });\n  });\n});","file":"allowUnsafeRegex.test.js","skipped":false,"dir":"test"},{"name":"allow unsafe regex not safe by default","suites":[],"updatePoint":{"line":76,"column":44,"index":1654},"line":76,"code":"test('allow unsafe regex not safe by default', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  t.throws(() => {\n    fastify.get('/:foo(^([0-9]+){4}$)', (req, reply) => {\n      reply.send({\n        foo: req.params.foo\n      });\n    });\n  });\n});","file":"allowUnsafeRegex.test.js","skipped":false,"dir":"test"},{"name":"allow unsafe regex allow unsafe","suites":[],"updatePoint":{"line":88,"column":37,"index":1938},"line":88,"code":"test('allow unsafe regex allow unsafe', t => {\n  t.plan(5);\n  const fastify = Fastify({\n    allowUnsafeRegex: true\n  });\n  t.teardown(fastify.close.bind(fastify));\n  t.doesNotThrow(() => {\n    fastify.get('/:foo(^([0-9]+){4}$)', (req, reply) => {\n      reply.send({\n        foo: req.params.foo\n      });\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/1234'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.same(JSON.parse(body), {\n        foo: '1234'\n      });\n    });\n  });\n});","file":"allowUnsafeRegex.test.js","skipped":false,"dir":"test"},{"name":"async await","suites":[],"updatePoint":{"line":33,"column":17,"index":537},"line":33,"code":"test('async await', t => {\n  t.plan(11);\n  const fastify = Fastify();\n\n  try {\n    fastify.get('/', opts, async function awaitMyFunc(req, reply) {\n      await sleep(200);\n      return {\n        hello: 'world'\n      };\n    });\n    t.pass();\n  } catch (e) {\n    t.fail();\n  }\n\n  try {\n    fastify.get('/no-await', opts, async function (req, reply) {\n      return {\n        hello: 'world'\n      };\n    });\n    t.pass();\n  } catch (e) {\n    t.fail();\n  }\n\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/no-await'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n  });\n});","file":"async-await.test.js","skipped":false,"dir":"test"},{"name":"ignore the result of the promise if reply.send is called beforehand (undefined)","suites":[],"updatePoint":{"line":91,"column":85,"index":1864},"line":91,"code":"test('ignore the result of the promise if reply.send is called beforehand (undefined)', t => {\n  t.plan(4);\n  const server = Fastify();\n  const payload = {\n    hello: 'world'\n  };\n  server.get('/', async function awaitMyFunc(req, reply) {\n    await reply.send(payload);\n  });\n  t.teardown(server.close.bind(server));\n  server.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + server.server.address().port + '/'\n    }, (err, res, body) => {\n      t.error(err);\n      t.same(payload, JSON.parse(body));\n      t.equal(res.statusCode, 200);\n    });\n  });\n});","file":"async-await.test.js","skipped":false,"dir":"test"},{"name":"ignore the result of the promise if reply.send is called beforehand (object)","suites":[],"updatePoint":{"line":115,"column":82,"index":2484},"line":115,"code":"test('ignore the result of the promise if reply.send is called beforehand (object)', t => {\n  t.plan(4);\n  const server = Fastify();\n  const payload = {\n    hello: 'world2'\n  };\n  server.get('/', async function awaitMyFunc(req, reply) {\n    await reply.send(payload);\n    return {\n      hello: 'world'\n    };\n  });\n  t.teardown(server.close.bind(server));\n  server.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + server.server.address().port + '/'\n    }, (err, res, body) => {\n      t.error(err);\n      t.same(payload, JSON.parse(body));\n      t.equal(res.statusCode, 200);\n    });\n  });\n});","file":"async-await.test.js","skipped":false,"dir":"test"},{"name":"server logs an error if reply.send is called and a value is returned via async/await","suites":[],"updatePoint":{"line":142,"column":90,"index":3154},"line":142,"code":"test('server logs an error if reply.send is called and a value is returned via async/await', t => {\n  const lines = ['incoming request', 'request completed', 'Reply already sent'];\n  t.plan(lines.length + 2);\n  const splitStream = split(JSON.parse);\n  splitStream.on('data', line => {\n    t.equal(line.msg, lines.shift());\n  });\n  const logger = pino(splitStream);\n  const fastify = Fastify({\n    logger\n  });\n  fastify.get('/', async (req, reply) => {\n    await reply.send({\n      hello: 'world'\n    });\n    return {\n      hello: 'world2'\n    };\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    const payload = JSON.parse(res.payload);\n    t.same(payload, {\n      hello: 'world'\n    });\n  });\n});","file":"async-await.test.js","skipped":false,"dir":"test"},{"name":"ignore the result of the promise if reply.send is called beforehand (undefined)","suites":[],"updatePoint":{"line":172,"column":85,"index":3898},"line":172,"code":"test('ignore the result of the promise if reply.send is called beforehand (undefined)', t => {\n  t.plan(4);\n  const server = Fastify();\n  const payload = {\n    hello: 'world'\n  };\n  server.get('/', async function awaitMyFunc(req, reply) {\n    await reply.send(payload);\n  });\n  t.teardown(server.close.bind(server));\n  server.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + server.server.address().port + '/'\n    }, (err, res, body) => {\n      t.error(err);\n      t.same(payload, JSON.parse(body));\n      t.equal(res.statusCode, 200);\n    });\n  });\n});","file":"async-await.test.js","skipped":false,"dir":"test"},{"name":"ignore the result of the promise if reply.send is called beforehand (object)","suites":[],"updatePoint":{"line":196,"column":82,"index":4518},"line":196,"code":"test('ignore the result of the promise if reply.send is called beforehand (object)', t => {\n  t.plan(4);\n  const server = Fastify();\n  const payload = {\n    hello: 'world2'\n  };\n  server.get('/', async function awaitMyFunc(req, reply) {\n    await reply.send(payload);\n    return {\n      hello: 'world'\n    };\n  });\n  t.teardown(server.close.bind(server));\n  server.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + server.server.address().port + '/'\n    }, (err, res, body) => {\n      t.error(err);\n      t.same(payload, JSON.parse(body));\n      t.equal(res.statusCode, 200);\n    });\n  });\n});","file":"async-await.test.js","skipped":false,"dir":"test"},{"name":"await reply if we will be calling reply.send in the future","suites":[],"updatePoint":{"line":223,"column":64,"index":5162},"line":223,"code":"test('await reply if we will be calling reply.send in the future', t => {\n  const lines = ['incoming request', 'request completed'];\n  t.plan(lines.length + 2);\n  const splitStream = split(JSON.parse);\n  splitStream.on('data', line => {\n    t.equal(line.msg, lines.shift());\n  });\n  const server = Fastify({\n    logger: {\n      stream: splitStream\n    }\n  });\n  const payload = {\n    hello: 'world'\n  };\n  server.get('/', async function awaitMyFunc(req, reply) {\n    setImmediate(function () {\n      reply.send(payload);\n    });\n    await reply;\n  });\n  server.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    const payload = JSON.parse(res.payload);\n    t.same(payload, {\n      hello: 'world'\n    });\n  });\n});","file":"async-await.test.js","skipped":false,"dir":"test"},{"name":"await reply if we will be calling reply.send in the future (error case)","suites":[],"updatePoint":{"line":255,"column":77,"index":5922},"line":255,"code":"test('await reply if we will be calling reply.send in the future (error case)', t => {\n  const lines = ['incoming request', 'kaboom', 'request completed'];\n  t.plan(lines.length + 2);\n  const splitStream = split(JSON.parse);\n  splitStream.on('data', line => {\n    t.equal(line.msg, lines.shift());\n  });\n  const server = Fastify({\n    logger: {\n      stream: splitStream\n    }\n  });\n  server.get('/', async function awaitMyFunc(req, reply) {\n    setImmediate(function () {\n      reply.send(new Error('kaboom'));\n    });\n    await reply;\n  });\n  server.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 500);\n  });\n});","file":"async-await.test.js","skipped":false,"dir":"test"},{"name":"support reply decorators with await","suites":[],"updatePoint":{"line":281,"column":41,"index":6562},"line":281,"code":"test('support reply decorators with await', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  fastify.decorateReply('wow', function () {\n    setImmediate(() => {\n      this.send({\n        hello: 'world'\n      });\n    });\n    return this;\n  });\n  fastify.get('/', async (req, reply) => {\n    await sleep(1);\n    await reply.wow();\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    const payload = JSON.parse(res.payload);\n    t.same(payload, {\n      hello: 'world'\n    });\n  });\n});","file":"async-await.test.js","skipped":false,"dir":"test"},{"name":"inject async await","suites":[],"updatePoint":{"line":307,"column":24,"index":7078},"line":307,"code":"test('inject async await', async t => {\n  t.plan(1);\n  const fastify = Fastify();\n  fastify.get('/', (req, reply) => {\n    reply.send({\n      hello: 'world'\n    });\n  });\n\n  try {\n    const res = await fastify.inject({\n      method: 'GET',\n      url: '/'\n    });\n    t.same({\n      hello: 'world'\n    }, JSON.parse(res.payload));\n  } catch (err) {\n    t.fail(err);\n  }\n});","file":"async-await.test.js","skipped":false,"dir":"test"},{"name":"inject async await - when the server equal up","suites":[],"updatePoint":{"line":328,"column":51,"index":7478},"line":328,"code":"test('inject async await - when the server equal up', async t => {\n  t.plan(2);\n  const fastify = Fastify();\n  fastify.get('/', (req, reply) => {\n    reply.send({\n      hello: 'world'\n    });\n  });\n\n  try {\n    const res = await fastify.inject({\n      method: 'GET',\n      url: '/'\n    });\n    t.same({\n      hello: 'world'\n    }, JSON.parse(res.payload));\n  } catch (err) {\n    t.fail(err);\n  }\n\n  await sleep(200);\n\n  try {\n    const res2 = await fastify.inject({\n      method: 'GET',\n      url: '/'\n    });\n    t.same({\n      hello: 'world'\n    }, JSON.parse(res2.payload));\n  } catch (err) {\n    t.fail(err);\n  }\n});","file":"async-await.test.js","skipped":false,"dir":"test"},{"name":"async await plugin","suites":[],"updatePoint":{"line":363,"column":24,"index":8072},"line":363,"code":"test('async await plugin', async t => {\n  t.plan(1);\n  const fastify = Fastify();\n  fastify.register(async (fastify, opts) => {\n    fastify.get('/', (req, reply) => {\n      reply.send({\n        hello: 'world'\n      });\n    });\n    await sleep(200);\n  });\n\n  try {\n    const res = await fastify.inject({\n      method: 'GET',\n      url: '/'\n    });\n    t.same({\n      hello: 'world'\n    }, JSON.parse(res.payload));\n  } catch (err) {\n    t.fail(err);\n  }\n});","file":"async-await.test.js","skipped":false,"dir":"test"},{"name":"does not call reply.send() twice if 204 response equal already sent","suites":[],"updatePoint":{"line":387,"column":73,"index":8578},"line":387,"code":"test('does not call reply.send() twice if 204 response equal already sent', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  fastify.get('/', async (req, reply) => {\n    reply.code(204).send();\n\n    reply.send = () => {\n      throw new Error('reply.send() was called twice');\n    };\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 204);\n  });\n});","file":"async-await.test.js","skipped":false,"dir":"test"},{"name":"promise was fulfilled with undefined","suites":[],"updatePoint":{"line":405,"column":42,"index":8972},"line":405,"code":"test('promise was fulfilled with undefined', t => {\n  t.plan(4);\n  let fastify = null;\n  const stream = split(JSON.parse);\n\n  try {\n    fastify = Fastify({\n      logger: {\n        stream,\n        level: 'error'\n      }\n    });\n  } catch (e) {\n    t.fail();\n  }\n\n  t.teardown(fastify.close.bind(fastify));\n  fastify.get('/', async (req, reply) => {});\n  stream.once('data', line => {\n    t.fail('should not log an error');\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/'\n    }, (err, res, body) => {\n      t.error(err);\n      t.equal(res.body, undefined);\n      t.equal(res.statusCode, 200);\n    });\n  });\n});","file":"async-await.test.js","skipped":false,"dir":"test"},{"name":"promise was fulfilled with undefined using inject","suites":[],"updatePoint":{"line":443,"column":55,"index":9770},"line":443,"code":"test('promise was fulfilled with undefined using inject', async t => {\n  const stream = split(JSON.parse);\n  const fastify = Fastify({\n    logger: {\n      stream,\n      level: 'error'\n    }\n  });\n  fastify.get('/', async (req, reply) => {});\n  stream.once('data', line => {\n    t.fail('should not log an error');\n  });\n  const res = await fastify.inject('/');\n  t.equal(res.body, '');\n  t.equal(res.statusCode, 200);\n});","file":"async-await.test.js","skipped":false,"dir":"test"},{"name":"error is not logged because promise was fulfilled with undefined but response was sent before promise resolution","suites":[],"updatePoint":{"line":459,"column":118,"index":10254},"line":459,"code":"test('error is not logged because promise was fulfilled with undefined but response was sent before promise resolution', t => {\n  t.plan(4);\n  let fastify = null;\n  const stream = split(JSON.parse);\n  const payload = {\n    hello: 'world'\n  };\n\n  try {\n    fastify = Fastify({\n      logger: {\n        stream,\n        level: 'error'\n      }\n    });\n  } catch (e) {\n    t.fail();\n  }\n\n  t.teardown(fastify.close.bind(fastify));\n  fastify.get('/', async (req, reply) => {\n    reply.send(payload);\n  });\n  stream.once('data', line => {\n    t.fail('should not log an error');\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/'\n    }, (err, res, body) => {\n      t.error(err);\n      t.equal(res.statusCode, 200);\n      t.same(payload, JSON.parse(body));\n    });\n  });\n});","file":"async-await.test.js","skipped":false,"dir":"test"},{"name":"Thrown Error instance sets HTTP status code","suites":[],"updatePoint":{"line":502,"column":49,"index":11123},"line":502,"code":"test('Thrown Error instance sets HTTP status code', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  const err = new Error('winter is coming');\n  err.statusCode = 418;\n  fastify.get('/', async (req, reply) => {\n    throw err;\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 418);\n    t.same({\n      error: statusCodes['418'],\n      message: err.message,\n      statusCode: 418\n    }, JSON.parse(res.payload));\n  });\n});","file":"async-await.test.js","skipped":false,"dir":"test"},{"name":"customErrorHandler support","suites":[],"updatePoint":{"line":523,"column":32,"index":11607},"line":523,"code":"test('customErrorHandler support', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.get('/', async (req, reply) => {\n    const error = new Error('ouch');\n    error.statusCode = 400;\n    throw error;\n  });\n  fastify.setErrorHandler(async err => {\n    t.equal(err.message, 'ouch');\n    const error = new Error('kaboom');\n    error.statusCode = 401;\n    throw error;\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 401);\n    t.same({\n      error: statusCodes['401'],\n      message: 'kaboom',\n      statusCode: 401\n    }, JSON.parse(res.payload));\n  });\n});","file":"async-await.test.js","skipped":false,"dir":"test"},{"name":"customErrorHandler support without throwing","suites":[],"updatePoint":{"line":550,"column":49,"index":12264},"line":550,"code":"test('customErrorHandler support without throwing', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.get('/', async (req, reply) => {\n    const error = new Error('ouch');\n    error.statusCode = 400;\n    throw error;\n  });\n  fastify.setErrorHandler(async (err, req, reply) => {\n    t.equal(err.message, 'ouch');\n    await reply.code(401).send('kaboom');\n    reply.send = t.fail.bind(t, 'should not be called');\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 401);\n    t.same('kaboom', res.payload);\n  });\n}); // See https://github.com/fastify/fastify/issues/2653","file":"async-await.test.js","skipped":false,"dir":"test"},{"name":"customErrorHandler only called if reply not already sent","suites":[],"updatePoint":{"line":573,"column":62,"index":12927},"line":573,"code":"test('customErrorHandler only called if reply not already sent', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.get('/', async (req, reply) => {\n    await reply.send('success');\n    const error = new Error('ouch');\n    error.statusCode = 400;\n    throw error;\n  });\n  fastify.setErrorHandler(t.fail.bind(t, 'should not be called'));\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.same('success', res.payload);\n  });\n}); // See https://github.com/fastify/fastify/issues/3209","file":"async-await.test.js","skipped":false,"dir":"test"},{"name":"setNotFoundHandler should accept return value","suites":[],"updatePoint":{"line":593,"column":51,"index":13486},"line":593,"code":"test('setNotFoundHandler should accept return value', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.get('/', async () => ({\n    hello: 'world'\n  }));\n  fastify.setNotFoundHandler((req, reply) => {\n    reply.code(404);\n    return {\n      error: statusCodes['404'],\n      message: 'lost',\n      statusCode: 404\n    };\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/elsewhere'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 404);\n    t.same({\n      error: statusCodes['404'],\n      message: 'lost',\n      statusCode: 404\n    }, JSON.parse(res.payload));\n  });\n}); // See https://github.com/fastify/fastify/issues/3209","file":"async-await.test.js","skipped":false,"dir":"test"},{"name":"customErrorHandler should accept return value","suites":[],"updatePoint":{"line":621,"column":51,"index":14143},"line":621,"code":"test('customErrorHandler should accept return value', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.get('/', async (req, reply) => {\n    const error = new Error('ouch');\n    error.statusCode = 400;\n    throw error;\n  });\n  fastify.setErrorHandler((err, req, reply) => {\n    t.equal(err.message, 'ouch');\n    reply.code(401);\n    return {\n      error: statusCodes['401'],\n      message: 'kaboom',\n      statusCode: 401\n    };\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 401);\n    t.same({\n      error: statusCodes['401'],\n      message: 'kaboom',\n      statusCode: 401\n    }, JSON.parse(res.payload));\n  });\n});","file":"async-await.test.js","skipped":false,"dir":"test"},{"name":"await self","suites":[],"updatePoint":{"line":651,"column":16,"index":14812},"line":651,"code":"test('await self', async t => {\n  const app = Fastify();\n  t.equal(await app, app);\n});","file":"async-await.test.js","skipped":false,"dir":"test"},{"name":"bodyLimit","suites":[],"updatePoint":{"line":10,"column":15,"index":155},"line":10,"code":"test('bodyLimit', t => {\n  t.plan(5);\n\n  try {\n    Fastify({\n      bodyLimit: 1.3\n    });\n    t.fail('option must be an integer');\n  } catch (err) {\n    t.ok(err);\n  }\n\n  try {\n    Fastify({\n      bodyLimit: []\n    });\n    t.fail('option must be an integer');\n  } catch (err) {\n    t.ok(err);\n  }\n\n  const fastify = Fastify({\n    bodyLimit: 1\n  });\n  fastify.post('/', (request, reply) => {\n    reply.send({\n      error: 'handler should not be called'\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, function (err) {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'POST',\n      url: 'http://localhost:' + fastify.server.address().port,\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: [],\n      json: true\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 413);\n    });\n  });\n});","file":"bodyLimit.test.js","skipped":false,"dir":"test"},{"name":"check generated code syntax","suites":[],"updatePoint":{"line":19,"column":33,"index":305},"line":19,"code":"test('check generated code syntax', async t => {\n  t.plan(1); // standard is a esm, we import it like this\n\n  const {\n    default: standard\n  } = await import('standard');\n  const result = await standard.lintText(code); // if there are any invalid syntax\n  // fatal count will be greater than 0\n\n  t.equal(result[0].fatalErrorCount, 0);\n});","file":"build/error-serializer.test.js","skipped":false,"dir":"test"},{"name":"ensure the current error serializer is latest","suites":[],"updatePoint":{"line":31,"column":51,"index":711},"line":31,"code":"test('ensure the current error serializer is latest', {\n  skip: !isPrebublish\n}, async t => {\n  t.plan(1);\n  const current = await fs.promises.readFile(path.resolve('lib/error-serializer.js')); // line break should not be a problem depends on system\n\n  t.equal(unifyLineBreak(current), unifyLineBreak(code));\n});","file":"build/error-serializer.test.js","skipped":false,"dir":"test"},{"name":"should be the same as package.json","suites":[],"updatePoint":{"line":13,"column":40,"index":208},"line":13,"code":"test('should be the same as package.json', t => {\n  t.plan(1);\n  const json = JSON.parse(fs.readFileSync(path.join(__dirname, '..', '..', 'package.json')).toString('utf8'));\n  t.equal(fastify.version, json.version);\n});","file":"build/version.test.js","skipped":false,"dir":"test"},{"name":"Bundled package should work","suites":[],"updatePoint":{"line":11,"column":33,"index":206},"line":11,"code":"test('Bundled package should work', t => {\n  t.plan(4);\n  fastifySuccess.ready(err => {\n    t.error(err);\n    fastifySuccess.inject({\n      method: 'GET',\n      url: '/'\n    }, (error, res) => {\n      t.error(error);\n      t.equal(res.statusCode, 200);\n      t.same(res.json(), {\n        hello: 'world'\n      });\n    });\n  });\n});","file":"bundler/esbuild/bundler-test.js","skipped":false,"dir":"test"},{"name":"Bundled package should not work with bad plugin version","suites":[],"updatePoint":{"line":27,"column":61,"index":565},"line":27,"code":"test('Bundled package should not work with bad plugin version', t => {\n  t.plan(1);\n  fastifyFailPlugin.ready(err => {\n    t.match(err.message, /expected '9.x' fastify version/i);\n  });\n});","file":"bundler/esbuild/bundler-test.js","skipped":false,"dir":"test"},{"name":"Bundled package should work","suites":[],"updatePoint":{"line":11,"column":33,"index":206},"line":11,"code":"test('Bundled package should work', t => {\n  t.plan(4);\n  fastifySuccess.ready(err => {\n    t.error(err);\n    fastifySuccess.inject({\n      method: 'GET',\n      url: '/'\n    }, (error, res) => {\n      t.error(error);\n      t.equal(res.statusCode, 200);\n      t.same(res.json(), {\n        hello: 'world'\n      });\n    });\n  });\n});","file":"bundler/webpack/bundler-test.js","skipped":false,"dir":"test"},{"name":"Bundled package should not work with bad plugin version","suites":[],"updatePoint":{"line":27,"column":61,"index":565},"line":27,"code":"test('Bundled package should not work with bad plugin version', t => {\n  t.plan(1);\n  fastifyFailPlugin.ready(err => {\n    t.match(err.message, /expected '9.x' fastify version/i);\n  });\n});","file":"bundler/webpack/bundler-test.js","skipped":false,"dir":"test"},{"name":"case insensitive","suites":[],"updatePoint":{"line":11,"column":22,"index":163},"line":11,"code":"test('case insensitive', t => {\n  t.plan(4);\n  const fastify = Fastify({\n    caseSensitive: false\n  });\n  t.teardown(fastify.close.bind(fastify));\n  fastify.get('/foo', (req, reply) => {\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/FOO'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n  });\n});","file":"case-insensitive.test.js","skipped":false,"dir":"test"},{"name":"case insensitive inject","suites":[],"updatePoint":{"line":38,"column":29,"index":755},"line":38,"code":"test('case insensitive inject', t => {\n  t.plan(4);\n  const fastify = Fastify({\n    caseSensitive: false\n  });\n  t.teardown(fastify.close.bind(fastify));\n  fastify.get('/foo', (req, reply) => {\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    fastify.inject({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/FOO'\n    }, (err, response) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.same(JSON.parse(response.payload), {\n        hello: 'world'\n      });\n    });\n  });\n});","file":"case-insensitive.test.js","skipped":false,"dir":"test"},{"name":"case insensitive (parametric)","suites":[],"updatePoint":{"line":65,"column":35,"index":1369},"line":65,"code":"test('case insensitive (parametric)', t => {\n  t.plan(5);\n  const fastify = Fastify({\n    caseSensitive: false\n  });\n  t.teardown(fastify.close.bind(fastify));\n  fastify.get('/foo/:param', (req, reply) => {\n    t.equal(req.params.param, 'bAr');\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/FoO/bAr'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n  });\n});","file":"case-insensitive.test.js","skipped":false,"dir":"test"},{"name":"case insensitive (wildcard)","suites":[],"updatePoint":{"line":93,"column":33,"index":2014},"line":93,"code":"test('case insensitive (wildcard)', t => {\n  t.plan(5);\n  const fastify = Fastify({\n    caseSensitive: false\n  });\n  t.teardown(fastify.close.bind(fastify));\n  fastify.get('/foo/*', (req, reply) => {\n    t.equal(req.params['*'], 'bAr/baZ');\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/FoO/bAr/baZ'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n  });\n});","file":"case-insensitive.test.js","skipped":false,"dir":"test"},{"name":"chainable - get","suites":[],"updatePoint":{"line":25,"column":21,"index":337},"line":25,"code":"test('chainable - get', t => {\n  t.plan(1);\n  t.type(fastify.get('/', opts, noop), fastify);\n});","file":"chainable.test.js","skipped":false,"dir":"test"},{"name":"chainable - post","suites":[],"updatePoint":{"line":29,"column":22,"index":435},"line":29,"code":"test('chainable - post', t => {\n  t.plan(1);\n  t.type(fastify.post('/', opts, noop), fastify);\n});","file":"chainable.test.js","skipped":false,"dir":"test"},{"name":"chainable - route","suites":[],"updatePoint":{"line":33,"column":23,"index":535},"line":33,"code":"test('chainable - route', t => {\n  t.plan(1);\n  t.type(fastify.route({\n    method: 'GET',\n    url: '/other',\n    schema: opts.schema,\n    handler: noop\n  }), fastify);\n});","file":"chainable.test.js","skipped":false,"dir":"test"},{"name":"Should return 503 while closing - pipelining","suites":[],"updatePoint":{"line":13,"column":50,"index":188},"line":13,"code":"test('Should return 503 while closing - pipelining', t => {\n  const fastify = Fastify({\n    return503OnClosing: true,\n    forceCloseConnections: false\n  });\n  fastify.get('/', (req, reply) => {\n    fastify.close();\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, async err => {\n    t.error(err);\n    const instance = new Client('http://localhost:' + fastify.server.address().port, {\n      pipelining: 1\n    });\n    const codes = [200, 503];\n\n    for (const code of codes) {\n      instance.request({\n        path: '/',\n        method: 'GET'\n      }).then(data => {\n        t.equal(data.statusCode, code);\n      }).catch(e => {\n        t.fail(e);\n      });\n    }\n\n    instance.close(() => {\n      t.end('Done');\n    });\n  });\n});","file":"close-pipelining.test.js","skipped":false,"dir":"test"},{"name":"Should not return 503 while closing - pipelining - return503OnClosing","suites":[],"updatePoint":{"line":49,"column":75,"index":981},"line":49,"code":"test('Should not return 503 while closing - pipelining - return503OnClosing', t => {\n  const fastify = Fastify({\n    return503OnClosing: false,\n    forceCloseConnections: false\n  });\n  fastify.get('/', (req, reply) => {\n    fastify.close();\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    const instance = new Client('http://localhost:' + fastify.server.address().port, {\n      pipelining: 1\n    });\n    const codes = [200, 200];\n\n    for (const code of codes) {\n      instance.request({\n        path: '/',\n        method: 'GET'\n      }).then(data => {\n        t.equal(data.statusCode, code);\n      }).catch(e => {\n        t.fail(e);\n      });\n    }\n\n    instance.close(() => {\n      t.end('Done');\n    });\n  });\n});","file":"close-pipelining.test.js","skipped":false,"dir":"test"},{"name":"close callback","suites":[],"updatePoint":{"line":17,"column":20,"index":218},"line":17,"code":"test('close callback', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.addHook('onClose', onClose);\n\n  function onClose(instance, done) {\n    t.type(fastify, instance);\n    done();\n  }\n\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    fastify.close(err => {\n      t.error(err);\n      t.ok('close callback');\n    });\n  });\n});","file":"close.test.js","skipped":false,"dir":"test"},{"name":"inside register","suites":[],"updatePoint":{"line":37,"column":21,"index":574},"line":37,"code":"test('inside register', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.register(function (f, opts, done) {\n    f.addHook('onClose', onClose);\n\n    function onClose(instance, done) {\n      t.ok(instance.prototype === fastify.prototype);\n      t.equal(instance, f);\n      done();\n    }\n\n    done();\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    fastify.close(err => {\n      t.error(err);\n      t.ok('close callback');\n    });\n  });\n});","file":"close.test.js","skipped":false,"dir":"test"},{"name":"close order","suites":[],"updatePoint":{"line":61,"column":17,"index":1043},"line":61,"code":"test('close order', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  const order = [1, 2, 3];\n  fastify.register(function (f, opts, done) {\n    f.addHook('onClose', (instance, done) => {\n      t.equal(order.shift(), 1);\n      done();\n    });\n    done();\n  });\n  fastify.addHook('onClose', (instance, done) => {\n    t.equal(order.shift(), 2);\n    done();\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    fastify.close(err => {\n      t.error(err);\n      t.equal(order.shift(), 3);\n    });\n  });\n});","file":"close.test.js","skipped":false,"dir":"test"},{"name":"close order - async","suites":[],"updatePoint":{"line":86,"column":25,"index":1574},"line":86,"code":"test('close order - async', async t => {\n  t.plan(3);\n  const fastify = Fastify();\n  const order = [1, 2, 3];\n  fastify.register(function (f, opts, done) {\n    f.addHook('onClose', async instance => {\n      t.equal(order.shift(), 1);\n    });\n    done();\n  });\n  fastify.addHook('onClose', () => {\n    t.equal(order.shift(), 2);\n  });\n  await fastify.listen({\n    port: 0\n  });\n  await fastify.close();\n  t.equal(order.shift(), 3);\n});","file":"close.test.js","skipped":false,"dir":"test"},{"name":"should not throw an error if the server is not listening","suites":[],"updatePoint":{"line":105,"column":62,"index":2046},"line":105,"code":"test('should not throw an error if the server is not listening', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  fastify.addHook('onClose', onClose);\n\n  function onClose(instance, done) {\n    t.type(fastify, instance);\n    done();\n  }\n\n  fastify.close(err => {\n    t.error(err);\n  });\n});","file":"close.test.js","skipped":false,"dir":"test"},{"name":"onClose should keep the context","suites":[],"updatePoint":{"line":119,"column":37,"index":2313},"line":119,"code":"test('onClose should keep the context', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.register(plugin);\n\n  function plugin(instance, opts, done) {\n    instance.decorate('test', true);\n    instance.addHook('onClose', onClose);\n    t.ok(instance.prototype === fastify.prototype);\n\n    function onClose(i, done) {\n      t.ok(i.test);\n      t.equal(i, instance);\n      done();\n    }\n\n    done();\n  }\n\n  fastify.close(err => {\n    t.error(err);\n  });\n});","file":"close.test.js","skipped":false,"dir":"test"},{"name":"Should return error while closing (promise) - injection","suites":[],"updatePoint":{"line":142,"column":61,"index":2800},"line":142,"code":"test('Should return error while closing (promise) - injection', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.addHook('onClose', (instance, done) => {\n    done();\n  });\n  fastify.get('/', (req, reply) => {\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    fastify.close();\n    process.nextTick(() => {\n      fastify.inject({\n        method: 'GET',\n        url: '/'\n      }).catch(err => {\n        t.ok(err);\n        t.equal(err.message, 'Server is closed');\n      });\n    }, 100);\n  });\n});","file":"close.test.js","skipped":false,"dir":"test"},{"name":"Should return error while closing (callback) - injection","suites":[],"updatePoint":{"line":171,"column":62,"index":3435},"line":171,"code":"test('Should return error while closing (callback) - injection', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.addHook('onClose', (instance, done) => {\n    setTimeout(done, 150);\n  });\n  fastify.get('/', (req, reply) => {\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    fastify.close();\n    setTimeout(() => {\n      fastify.inject({\n        method: 'GET',\n        url: '/'\n      }, (err, res) => {\n        t.ok(err);\n        t.equal(err.message, 'Server is closed');\n      });\n    }, 100);\n  });\n});","file":"close.test.js","skipped":false,"dir":"test"},{"name":"Cannot be reopened the closed server without listen callback","suites":[],"updatePoint":{"line":268,"column":66,"index":5894},"line":268,"code":"test('Cannot be reopened the closed server without listen callback', async t => {\n  t.plan(2);\n  const fastify = Fastify();\n  await fastify.listen({\n    port: 0\n  });\n  await fastify.close();\n\n  try {\n    await fastify.listen({\n      port: 0\n    });\n  } catch (err) {\n    t.ok(err);\n    t.equal(err.code, 'FST_ERR_REOPENED_CLOSE_SERVER');\n  }\n});","file":"close.test.js","skipped":false,"dir":"test"},{"name":"Cannot be reopened the closed server has listen callback","suites":[],"updatePoint":{"line":285,"column":62,"index":6237},"line":285,"code":"test('Cannot be reopened the closed server has listen callback', async t => {\n  t.plan(2);\n  const fastify = Fastify();\n  await fastify.listen({\n    port: 0\n  });\n  await fastify.close();\n  await new Promise((resolve, reject) => {\n    fastify.listen({\n      port: 0\n    }, err => {\n      reject(err);\n    });\n  }).catch(err => {\n    t.equal(err.code, 'FST_ERR_REOPENED_CLOSE_SERVER');\n    t.ok(err);\n  });\n});","file":"close.test.js","skipped":false,"dir":"test"},{"name":"shutsdown while keep-alive connections are active (non-async, native)","suites":[],"updatePoint":{"line":305,"column":75,"index":6764},"line":305,"code":"test('shutsdown while keep-alive connections are active (non-async, native)', {\n  skip: noSupport\n}, t => {\n  t.plan(5);\n  const timeoutTime = 2 * 60 * 1000;\n  const fastify = Fastify({\n    forceCloseConnections: true\n  });\n  fastify.server.setTimeout(timeoutTime);\n  fastify.server.keepAliveTimeout = timeoutTime;\n  fastify.get('/', (req, reply) => {\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, (err, address) => {\n    t.error(err);\n    const client = new Client('http://localhost:' + fastify.server.address().port, {\n      keepAliveTimeout: 1 * 60 * 1000\n    });\n    client.request({\n      path: '/',\n      method: 'GET'\n    }, (err, response) => {\n      t.error(err);\n      t.equal(client.closed, false);\n      fastify.close(err => {\n        t.error(err); // Due to the nature of the way we reap these keep-alive connections,\n        // there hasn't been enough time before the server fully closed in order\n        // for the client to have seen the socket get destroyed. The mere fact\n        // that we have reached this callback is enough indication that the\n        // feature being tested works as designed.\n\n        t.equal(client.closed, false);\n      });\n    });\n  });\n});","file":"close.test.js","skipped":false,"dir":"test"},{"name":"shutsdown while keep-alive connections are active (non-async, idle, native)","suites":[],"updatePoint":{"line":345,"column":81,"index":7998},"line":345,"code":"test('shutsdown while keep-alive connections are active (non-async, idle, native)', {\n  skip: noSupport\n}, t => {\n  t.plan(5);\n  const timeoutTime = 2 * 60 * 1000;\n  const fastify = Fastify({\n    forceCloseConnections: 'idle'\n  });\n  fastify.server.setTimeout(timeoutTime);\n  fastify.server.keepAliveTimeout = timeoutTime;\n  fastify.get('/', (req, reply) => {\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, (err, address) => {\n    t.error(err);\n    const client = new Client('http://localhost:' + fastify.server.address().port, {\n      keepAliveTimeout: 1 * 60 * 1000\n    });\n    client.request({\n      path: '/',\n      method: 'GET'\n    }, (err, response) => {\n      t.error(err);\n      t.equal(client.closed, false);\n      fastify.close(err => {\n        t.error(err); // Due to the nature of the way we reap these keep-alive connections,\n        // there hasn't been enough time before the server fully closed in order\n        // for the client to have seen the socket get destroyed. The mere fact\n        // that we have reached this callback is enough indication that the\n        // feature being tested works as designed.\n\n        t.equal(client.closed, false);\n      });\n    });\n  });\n});","file":"close.test.js","skipped":false,"dir":"test"},{"name":"shutsdown while keep-alive connections are active (non-async, custom)","suites":[],"updatePoint":{"line":385,"column":75,"index":9228},"line":385,"code":"test('shutsdown while keep-alive connections are active (non-async, custom)', t => {\n  t.plan(5);\n  const timeoutTime = 2 * 60 * 1000;\n  const fastify = Fastify({\n    forceCloseConnections: true,\n\n    serverFactory(handler) {\n      const server = http.createServer(handler);\n      server.closeAllConnections = null;\n      return server;\n    }\n\n  });\n  fastify.server.setTimeout(timeoutTime);\n  fastify.server.keepAliveTimeout = timeoutTime;\n  fastify.get('/', (req, reply) => {\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, (err, address) => {\n    t.error(err);\n    const client = new Client('http://localhost:' + fastify.server.address().port, {\n      keepAliveTimeout: 1 * 60 * 1000\n    });\n    client.request({\n      path: '/',\n      method: 'GET'\n    }, (err, response) => {\n      t.error(err);\n      t.equal(client.closed, false);\n      fastify.close(err => {\n        t.error(err); // Due to the nature of the way we reap these keep-alive connections,\n        // there hasn't been enough time before the server fully closed in order\n        // for the client to have seen the socket get destroyed. The mere fact\n        // that we have reached this callback is enough indication that the\n        // feature being tested works as designed.\n\n        t.equal(client.closed, false);\n      });\n    });\n  });\n});","file":"close.test.js","skipped":false,"dir":"test"},{"name":"connectionTimeout","suites":[],"updatePoint":{"line":10,"column":23,"index":150},"line":10,"code":"test('connectionTimeout', t => {\n  t.plan(6);\n\n  try {\n    Fastify({\n      connectionTimeout: 1.3\n    });\n    t.fail('option must be an integer');\n  } catch (err) {\n    t.ok(err);\n  }\n\n  try {\n    Fastify({\n      connectionTimeout: []\n    });\n    t.fail('option must be an integer');\n  } catch (err) {\n    t.ok(err);\n  }\n\n  const httpServer = Fastify({\n    connectionTimeout: 1\n  }).server;\n  t.equal(httpServer.timeout, 1);\n  const httpsServer = Fastify({\n    connectionTimeout: 2,\n    https: {}\n  }).server;\n  t.equal(httpsServer.timeout, 2);\n  const http2Server = Fastify({\n    connectionTimeout: 3,\n    http2: true\n  }).server;\n  t.equal(http2Server.timeout, 3);\n\n  const serverFactory = (handler, _) => {\n    const server = http.createServer((req, res) => {\n      handler(req, res);\n    });\n    server.setTimeout(5);\n    return server;\n  };\n\n  const customServer = Fastify({\n    connectionTimeout: 4,\n    serverFactory\n  }).server;\n  t.equal(customServer.timeout, 5);\n});","file":"connectionTimeout.test.js","skipped":false,"dir":"test"},{"name":"Should register a host constrained route","suites":[],"updatePoint":{"line":9,"column":46,"index":151},"line":9,"code":"test('Should register a host constrained route', t => {\n  t.plan(7);\n  const fastify = Fastify();\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    constraints: {\n      host: 'fastify.io'\n    },\n    handler: (req, reply) => {\n      reply.send({\n        hello: 'world'\n      });\n    }\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/',\n    headers: {\n      host: 'fastify.io'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      hello: 'world'\n    });\n    t.equal(res.statusCode, 200);\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/',\n    headers: {\n      host: 'example.com'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 404);\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 404);\n  });\n});","file":"constrained-routes.test.js","skipped":false,"dir":"test"},{"name":"Should register the same route with host constraints","suites":[],"updatePoint":{"line":55,"column":58,"index":1014},"line":55,"code":"test('Should register the same route with host constraints', t => {\n  t.plan(8);\n  const fastify = Fastify();\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    constraints: {\n      host: 'fastify.io'\n    },\n    handler: (req, reply) => {\n      reply.send('fastify.io');\n    }\n  });\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    constraints: {\n      host: 'example.com'\n    },\n    handler: (req, reply) => {\n      reply.send('example.com');\n    }\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/',\n    headers: {\n      host: 'fastify.io'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.equal(res.payload, 'fastify.io');\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/',\n    headers: {\n      host: 'example.com'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.equal(res.payload, 'example.com');\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/',\n    headers: {\n      host: 'fancy.ca'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 404);\n  });\n});","file":"constrained-routes.test.js","skipped":false,"dir":"test"},{"name":"Should allow registering custom constrained routes","suites":[],"updatePoint":{"line":111,"column":56,"index":2093},"line":111,"code":"test('Should allow registering custom constrained routes', t => {\n  t.plan(8);\n  const constraint = {\n    name: 'secret',\n    storage: function () {\n      const secrets = {};\n      return {\n        get: secret => {\n          return secrets[secret] || null;\n        },\n        set: (secret, store) => {\n          secrets[secret] = store;\n        }\n      };\n    },\n    deriveConstraint: (req, ctx) => {\n      return req.headers['x-secret'];\n    },\n\n    validate() {\n      return true;\n    }\n\n  };\n  const fastify = Fastify({\n    constraints: {\n      secret: constraint\n    }\n  });\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    constraints: {\n      secret: 'alpha'\n    },\n    handler: (req, reply) => {\n      reply.send({\n        hello: 'from alpha'\n      });\n    }\n  });\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    constraints: {\n      secret: 'beta'\n    },\n    handler: (req, reply) => {\n      reply.send({\n        hello: 'from beta'\n      });\n    }\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/',\n    headers: {\n      'X-Secret': 'alpha'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      hello: 'from alpha'\n    });\n    t.equal(res.statusCode, 200);\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/',\n    headers: {\n      'X-Secret': 'beta'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      hello: 'from beta'\n    });\n    t.equal(res.statusCode, 200);\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/',\n    headers: {\n      'X-Secret': 'gamma'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 404);\n  });\n});","file":"constrained-routes.test.js","skipped":false,"dir":"test"},{"name":"Should allow registering custom constrained routes outside constructor","suites":[],"updatePoint":{"line":201,"column":76,"index":3768},"line":201,"code":"test('Should allow registering custom constrained routes outside constructor', t => {\n  t.plan(8);\n  const constraint = {\n    name: 'secret',\n    storage: function () {\n      const secrets = {};\n      return {\n        get: secret => {\n          return secrets[secret] || null;\n        },\n        set: (secret, store) => {\n          secrets[secret] = store;\n        }\n      };\n    },\n    deriveConstraint: (req, ctx) => {\n      return req.headers['x-secret'];\n    },\n\n    validate() {\n      return true;\n    }\n\n  };\n  const fastify = Fastify();\n  fastify.addConstraintStrategy(constraint);\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    constraints: {\n      secret: 'alpha'\n    },\n    handler: (req, reply) => {\n      reply.send({\n        hello: 'from alpha'\n      });\n    }\n  });\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    constraints: {\n      secret: 'beta'\n    },\n    handler: (req, reply) => {\n      reply.send({\n        hello: 'from beta'\n      });\n    }\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/',\n    headers: {\n      'X-Secret': 'alpha'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      hello: 'from alpha'\n    });\n    t.equal(res.statusCode, 200);\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/',\n    headers: {\n      'X-Secret': 'beta'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      hello: 'from beta'\n    });\n    t.equal(res.statusCode, 200);\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/',\n    headers: {\n      'X-Secret': 'gamma'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 404);\n  });\n});","file":"constrained-routes.test.js","skipped":false,"dir":"test"},{"name":"Add a constraint strategy after fastify instance was started","suites":[],"updatePoint":{"line":288,"column":66,"index":5423},"line":288,"code":"test('Add a constraint strategy after fastify instance was started', t => {\n  t.plan(4);\n  const constraint = {\n    name: 'secret',\n    storage: function () {\n      const secrets = {};\n      return {\n        get: secret => {\n          return secrets[secret] || null;\n        },\n        set: (secret, store) => {\n          secrets[secret] = store;\n        }\n      };\n    },\n    deriveConstraint: (req, ctx) => {\n      return req.headers['x-secret'];\n    },\n\n    validate() {\n      return true;\n    }\n\n  };\n  const fastify = Fastify();\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    handler: (req, reply) => {\n      reply.send('ok');\n    }\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.same(res.payload, 'ok');\n    t.equal(res.statusCode, 200);\n    t.throws(() => fastify.addConstraintStrategy(constraint), 'Cannot add constraint strategy when fastify instance is already started!');\n  });\n});","file":"constrained-routes.test.js","skipped":false,"dir":"test"},{"name":"Add a constraint strategy should throw an error if there already exist custom strategy with the same name","suites":[],"updatePoint":{"line":330,"column":111,"index":6424},"line":330,"code":"test('Add a constraint strategy should throw an error if there already exist custom strategy with the same name', t => {\n  t.plan(1);\n  const constraint = {\n    name: 'secret',\n    storage: function () {\n      const secrets = {};\n      return {\n        get: secret => {\n          return secrets[secret] || null;\n        },\n        set: (secret, store) => {\n          secrets[secret] = store;\n        }\n      };\n    },\n    deriveConstraint: (req, ctx) => {\n      return req.headers['x-secret'];\n    },\n\n    validate() {\n      return true;\n    }\n\n  };\n  const fastify = Fastify();\n  fastify.addConstraintStrategy(constraint);\n  t.throws(() => fastify.addConstraintStrategy(constraint), 'There already exists a custom constraint with the name secret.');\n});","file":"constrained-routes.test.js","skipped":false,"dir":"test"},{"name":"Add a constraint strategy shouldn't throw an error if default constraint with the same name isn't used","suites":[],"updatePoint":{"line":358,"column":110,"index":7178},"line":358,"code":"test('Add a constraint strategy shouldn\\'t throw an error if default constraint with the same name isn\\'t used', t => {\n  t.plan(1);\n  const constraint = {\n    name: 'version',\n    storage: function () {\n      const secrets = {};\n      return {\n        get: secret => {\n          return secrets[secret] || null;\n        },\n        set: (secret, store) => {\n          secrets[secret] = store;\n        }\n      };\n    },\n    deriveConstraint: (req, ctx) => {\n      return req.headers['x-secret'];\n    },\n\n    validate() {\n      return true;\n    }\n\n  };\n  const fastify = Fastify();\n  fastify.addConstraintStrategy(constraint);\n  t.pass();\n});","file":"constrained-routes.test.js","skipped":false,"dir":"test"},{"name":"Add a constraint strategy should throw an error if default constraint with the same name is used","suites":[],"updatePoint":{"line":386,"column":102,"index":7810},"line":386,"code":"test('Add a constraint strategy should throw an error if default constraint with the same name is used', t => {\n  t.plan(1);\n  const constraint = {\n    name: 'version',\n    storage: function () {\n      const secrets = {};\n      return {\n        get: secret => {\n          return secrets[secret] || null;\n        },\n        set: (secret, store) => {\n          secrets[secret] = store;\n        }\n      };\n    },\n    deriveConstraint: (req, ctx) => {\n      return req.headers['x-secret'];\n    },\n\n    validate() {\n      return true;\n    }\n\n  };\n  const fastify = Fastify();\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    constraints: {\n      version: '1.0.0'\n    },\n    handler: (req, reply) => {\n      reply.send('ok');\n    }\n  });\n  t.throws(() => fastify.addConstraintStrategy(constraint), 'There already exists a route with version constraint.');\n});","file":"constrained-routes.test.js","skipped":false,"dir":"test"},{"name":"The hasConstraintStrategy should return false for default constraints until they are used","suites":[],"updatePoint":{"line":423,"column":95,"index":8663},"line":423,"code":"test('The hasConstraintStrategy should return false for default constraints until they are used', t => {\n  t.plan(6);\n  const fastify = Fastify();\n  t.equal(fastify.hasConstraintStrategy('version'), false);\n  t.equal(fastify.hasConstraintStrategy('host'), false);\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    constraints: {\n      host: 'fastify.io'\n    },\n    handler: (req, reply) => {\n      reply.send({\n        hello: 'from any other domain'\n      });\n    }\n  });\n  t.equal(fastify.hasConstraintStrategy('version'), false);\n  t.equal(fastify.hasConstraintStrategy('host'), true);\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    constraints: {\n      version: '1.0.0'\n    },\n    handler: (req, reply) => {\n      reply.send({\n        hello: 'from any other domain'\n      });\n    }\n  });\n  t.equal(fastify.hasConstraintStrategy('version'), true);\n  t.equal(fastify.hasConstraintStrategy('host'), true);\n});","file":"constrained-routes.test.js","skipped":false,"dir":"test"},{"name":"The hasConstraintStrategy should return true if there already exist a custom constraint with the same name","suites":[],"updatePoint":{"line":457,"column":112,"index":9603},"line":457,"code":"test('The hasConstraintStrategy should return true if there already exist a custom constraint with the same name', t => {\n  t.plan(2);\n  const constraint = {\n    name: 'secret',\n    storage: function () {\n      const secrets = {};\n      return {\n        get: secret => {\n          return secrets[secret] || null;\n        },\n        set: (secret, store) => {\n          secrets[secret] = store;\n        }\n      };\n    },\n    deriveConstraint: (req, ctx) => {\n      return req.headers['x-secret'];\n    },\n\n    validate() {\n      return true;\n    }\n\n  };\n  const fastify = Fastify();\n  t.equal(fastify.hasConstraintStrategy('secret'), false);\n  fastify.addConstraintStrategy(constraint);\n  t.equal(fastify.hasConstraintStrategy('secret'), true);\n});","file":"constrained-routes.test.js","skipped":false,"dir":"test"},{"name":"Should allow registering an unconstrained route after a constrained route","suites":[],"updatePoint":{"line":486,"column":79,"index":10316},"line":486,"code":"test('Should allow registering an unconstrained route after a constrained route', t => {\n  t.plan(6);\n  const fastify = Fastify();\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    constraints: {\n      host: 'fastify.io'\n    },\n    handler: (req, reply) => {\n      reply.send({\n        hello: 'from fastify.io'\n      });\n    }\n  });\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    handler: (req, reply) => {\n      reply.send({\n        hello: 'from any other domain'\n      });\n    }\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/',\n    headers: {\n      host: 'fastify.io'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      hello: 'from fastify.io'\n    });\n    t.equal(res.statusCode, 200);\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/',\n    headers: {\n      host: 'example.com'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      hello: 'from any other domain'\n    });\n    t.equal(res.statusCode, 200);\n  });\n});","file":"constrained-routes.test.js","skipped":false,"dir":"test"},{"name":"Should allow registering constrained routes in a prefixed plugin","suites":[],"updatePoint":{"line":537,"column":70,"index":11326},"line":537,"code":"test('Should allow registering constrained routes in a prefixed plugin', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.register(async (scope, opts) => {\n    scope.route({\n      method: 'GET',\n      constraints: {\n        host: 'fastify.io'\n      },\n      path: '/route',\n      handler: (req, reply) => {\n        reply.send({\n          ok: true\n        });\n      }\n    });\n  }, {\n    prefix: '/prefix'\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/prefix/route',\n    headers: {\n      host: 'fastify.io'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      ok: true\n    });\n    t.equal(res.statusCode, 200);\n  });\n});","file":"constrained-routes.test.js","skipped":false,"dir":"test"},{"name":"Should allow registering a constrained GET route after a constrained HEAD route","suites":[],"updatePoint":{"line":570,"column":85,"index":12015},"line":570,"code":"test('Should allow registering a constrained GET route after a constrained HEAD route', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.route({\n    method: 'HEAD',\n    url: '/',\n    constraints: {\n      host: 'fastify.io'\n    },\n    handler: (req, reply) => {\n      reply.header('content-type', 'text/plain');\n      reply.send('custom HEAD response');\n    }\n  });\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    constraints: {\n      host: 'fastify.io'\n    },\n    handler: (req, reply) => {\n      reply.send({\n        hello: 'from any other domain'\n      });\n    }\n  });\n  fastify.inject({\n    method: 'HEAD',\n    url: '/',\n    headers: {\n      host: 'fastify.io'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.same(res.payload, 'custom HEAD response');\n    t.equal(res.statusCode, 200);\n  });\n});","file":"constrained-routes.test.js","skipped":false,"dir":"test"},{"name":"Should allow registering a constrained GET route after an unconstrained HEAD route","suites":[],"updatePoint":{"line":608,"column":88,"index":12837},"line":608,"code":"test('Should allow registering a constrained GET route after an unconstrained HEAD route', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.route({\n    method: 'HEAD',\n    url: '/',\n    handler: (req, reply) => {\n      reply.header('content-type', 'text/plain');\n      reply.send('custom HEAD response');\n    }\n  });\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    constraints: {\n      host: 'fastify.io'\n    },\n    handler: (req, reply) => {\n      reply.send({\n        hello: 'from any other domain'\n      });\n    }\n  });\n  fastify.inject({\n    method: 'HEAD',\n    url: '/',\n    headers: {\n      host: 'fastify.io'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.same(res.payload, 'custom HEAD response');\n    t.equal(res.statusCode, 200);\n  });\n});","file":"constrained-routes.test.js","skipped":false,"dir":"test"},{"name":"Will not try to re-createprefixed HEAD route if it already exists and exposeHeadRoutes is true for constrained routes","suites":[],"updatePoint":{"line":643,"column":123,"index":13643},"line":643,"code":"test('Will not try to re-createprefixed HEAD route if it already exists and exposeHeadRoutes is true for constrained routes', async t => {\n  t.plan(1);\n  const fastify = Fastify({\n    exposeHeadRoutes: true\n  });\n  fastify.register((scope, opts, next) => {\n    scope.route({\n      method: 'HEAD',\n      path: '/route',\n      constraints: {\n        host: 'fastify.io'\n      },\n      handler: (req, reply) => {\n        reply.header('content-type', 'text/plain');\n        reply.send('custom HEAD response');\n      }\n    });\n    scope.route({\n      method: 'GET',\n      path: '/route',\n      constraints: {\n        host: 'fastify.io'\n      },\n      handler: (req, reply) => {\n        reply.send({\n          ok: true\n        });\n      }\n    });\n    next();\n  }, {\n    prefix: '/prefix'\n  });\n  await fastify.ready();\n  t.ok(true);\n});","file":"constrained-routes.test.js","skipped":false,"dir":"test"},{"name":"allows separate constrained and unconstrained HEAD routes","suites":[],"updatePoint":{"line":679,"column":63,"index":14413},"line":679,"code":"test('allows separate constrained and unconstrained HEAD routes', async t => {\n  t.plan(1);\n  const fastify = Fastify({\n    exposeHeadRoutes: true\n  });\n  fastify.register((scope, opts, next) => {\n    scope.route({\n      method: 'HEAD',\n      path: '/route',\n      handler: (req, reply) => {\n        reply.header('content-type', 'text/plain');\n        reply.send('unconstrained HEAD response');\n      }\n    });\n    scope.route({\n      method: 'HEAD',\n      path: '/route',\n      constraints: {\n        host: 'fastify.io'\n      },\n      handler: (req, reply) => {\n        reply.header('content-type', 'text/plain');\n        reply.send('constrained HEAD response');\n      }\n    });\n    scope.route({\n      method: 'GET',\n      path: '/route',\n      constraints: {\n        host: 'fastify.io'\n      },\n      handler: (req, reply) => {\n        reply.send({\n          ok: true\n        });\n      }\n    });\n    next();\n  }, {\n    prefix: '/prefix'\n  });\n  await fastify.ready();\n  t.ok(true);\n});","file":"constrained-routes.test.js","skipped":false,"dir":"test"},{"name":"default 413 with bodyLimit option","suites":[],"updatePoint":{"line":9,"column":39,"index":136},"line":9,"code":"test('default 413 with bodyLimit option', t => {\n  t.plan(4);\n  const fastify = Fastify({\n    bodyLimit: 10\n  });\n  fastify.post('/', function (req, reply) {\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/',\n    body: {\n      text: '12345678901234567890123456789012345678901234567890'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 413);\n    t.equal(res.headers['content-type'], 'application/json; charset=utf-8');\n    t.same(JSON.parse(res.payload), {\n      error: 'Payload Too Large',\n      code: 'FST_ERR_CTP_BODY_TOO_LARGE',\n      message: 'Request body is too large',\n      statusCode: 413\n    });\n  });\n});","file":"content-length.test.js","skipped":false,"dir":"test"},{"name":"default 400 with wrong content-length","suites":[],"updatePoint":{"line":37,"column":43,"index":834},"line":37,"code":"test('default 400 with wrong content-length', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.post('/', function (req, reply) {\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/',\n    headers: {\n      'content-length': 20\n    },\n    body: {\n      text: '12345678901234567890123456789012345678901234567890'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 400);\n    t.equal(res.headers['content-type'], 'application/json; charset=utf-8');\n    t.same(JSON.parse(res.payload), {\n      error: 'Bad Request',\n      code: 'FST_ERR_CTP_INVALID_CONTENT_LENGTH',\n      message: 'Request body size did not match Content-Length',\n      statusCode: 400\n    });\n  });\n});","file":"content-length.test.js","skipped":false,"dir":"test"},{"name":"custom 413 with bodyLimit option","suites":[],"updatePoint":{"line":66,"column":38,"index":1576},"line":66,"code":"test('custom 413 with bodyLimit option', t => {\n  t.plan(4);\n  const fastify = Fastify({\n    bodyLimit: 10\n  });\n  fastify.post('/', function (req, reply) {\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.setErrorHandler(function (err, request, reply) {\n    reply.code(err.statusCode).type('application/json; charset=utf-8').send(err);\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/',\n    body: {\n      text: '12345678901234567890123456789012345678901234567890'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 413);\n    t.equal(res.headers['content-type'], 'application/json; charset=utf-8');\n    t.same(JSON.parse(res.payload), {\n      error: 'Payload Too Large',\n      code: 'FST_ERR_CTP_BODY_TOO_LARGE',\n      message: 'Request body is too large',\n      statusCode: 413\n    });\n  });\n});","file":"content-length.test.js","skipped":false,"dir":"test"},{"name":"custom 400 with wrong content-length","suites":[],"updatePoint":{"line":97,"column":42,"index":2420},"line":97,"code":"test('custom 400 with wrong content-length', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.post('/', function (req, reply) {\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.setErrorHandler(function (err, request, reply) {\n    reply.code(err.statusCode).type('application/json; charset=utf-8').send(err);\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/',\n    headers: {\n      'content-length': 20\n    },\n    body: {\n      text: '12345678901234567890123456789012345678901234567890'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 400);\n    t.equal(res.headers['content-type'], 'application/json; charset=utf-8');\n    t.same(JSON.parse(res.payload), {\n      error: 'Bad Request',\n      code: 'FST_ERR_CTP_INVALID_CONTENT_LENGTH',\n      message: 'Request body size did not match Content-Length',\n      statusCode: 400\n    });\n  });\n});","file":"content-length.test.js","skipped":false,"dir":"test"},{"name":"#2214 - wrong content-length","suites":[],"updatePoint":{"line":129,"column":34,"index":3305},"line":129,"code":"test('#2214 - wrong content-length', t => {\n  const fastify = Fastify();\n  fastify.get('/', async () => {\n    const error = new Error('MY_ERROR_MESSAGE');\n    error.headers = {\n      'content-length': 2\n    };\n    throw error;\n  });\n  fastify.inject({\n    method: 'GET',\n    path: '/'\n  }).then(response => {\n    t.equal(response.headers['content-length'], '' + response.rawPayload.length);\n    t.end();\n  });\n});","file":"content-length.test.js","skipped":false,"dir":"test"},{"name":"#2543 - wrong content-length with errorHandler","suites":[],"updatePoint":{"line":146,"column":52,"index":3737},"line":146,"code":"test('#2543 - wrong content-length with errorHandler', t => {\n  const fastify = Fastify();\n  fastify.setErrorHandler((_error, _request, reply) => {\n    reply.code(500).send({\n      message: 'longer than 2 bytes'\n    });\n  });\n  fastify.get('/', async () => {\n    const error = new Error('MY_ERROR_MESSAGE');\n    error.headers = {\n      'content-length': 2\n    };\n    throw error;\n  });\n  fastify.inject({\n    method: 'GET',\n    path: '/'\n  }).then(res => {\n    t.equal(res.statusCode, 500);\n    t.equal(res.headers['content-length'], '' + res.rawPayload.length);\n    t.same(JSON.parse(res.payload), {\n      message: 'longer than 2 bytes'\n    });\n    t.end();\n  });\n});","file":"content-length.test.js","skipped":false,"dir":"test"},{"name":"hasContentTypeParser","suites":[],"updatePoint":{"line":23,"column":26,"index":443},"line":23,"code":"test('hasContentTypeParser', t => {\n  test('should know about internal parsers', t => {\n    t.plan(4);\n    const fastify = Fastify();\n    fastify.ready(err => {\n      t.error(err);\n      t.ok(fastify.hasContentTypeParser('application/json'));\n      t.ok(fastify.hasContentTypeParser('text/plain'));\n      t.notOk(fastify.hasContentTypeParser('application/jsoff'));\n    });\n  });\n  test('should work with string and RegExp', t => {\n    t.plan(7);\n    const fastify = Fastify();\n    fastify.addContentTypeParser(/^image\\/.*/, first);\n    fastify.addContentTypeParser(/^application\\/.+\\+xml/, first);\n    fastify.addContentTypeParser('image/gif', first);\n    t.ok(fastify.hasContentTypeParser('application/json'));\n    t.ok(fastify.hasContentTypeParser(/^image\\/.*/));\n    t.ok(fastify.hasContentTypeParser(/^application\\/.+\\+xml/));\n    t.ok(fastify.hasContentTypeParser('image/gif'));\n    t.notOk(fastify.hasContentTypeParser(/^image\\/.+\\+xml/));\n    t.notOk(fastify.hasContentTypeParser('image/png'));\n    t.notOk(fastify.hasContentTypeParser('*'));\n  });\n  t.end();\n});","file":"content-parser.test.js","skipped":false,"dir":"test"},{"name":"should know about internal parsers","suites":[],"updatePoint":{"line":24,"column":42,"index":495},"line":24,"code":"  test('should know about internal parsers', t => {\n    t.plan(4);\n    const fastify = Fastify();\n    fastify.ready(err => {\n      t.error(err);\n      t.ok(fastify.hasContentTypeParser('application/json'));\n      t.ok(fastify.hasContentTypeParser('text/plain'));\n      t.notOk(fastify.hasContentTypeParser('application/jsoff'));\n    });\n  });","file":"content-parser.test.js","skipped":false,"dir":"test"},{"name":"should work with string and RegExp","suites":[],"updatePoint":{"line":34,"column":42,"index":838},"line":34,"code":"  test('should work with string and RegExp', t => {\n    t.plan(7);\n    const fastify = Fastify();\n    fastify.addContentTypeParser(/^image\\/.*/, first);\n    fastify.addContentTypeParser(/^application\\/.+\\+xml/, first);\n    fastify.addContentTypeParser('image/gif', first);\n    t.ok(fastify.hasContentTypeParser('application/json'));\n    t.ok(fastify.hasContentTypeParser(/^image\\/.*/));\n    t.ok(fastify.hasContentTypeParser(/^application\\/.+\\+xml/));\n    t.ok(fastify.hasContentTypeParser('image/gif'));\n    t.notOk(fastify.hasContentTypeParser(/^image\\/.+\\+xml/));\n    t.notOk(fastify.hasContentTypeParser('image/png'));\n    t.notOk(fastify.hasContentTypeParser('*'));\n  });","file":"content-parser.test.js","skipped":false,"dir":"test"},{"name":"getParser","suites":[],"updatePoint":{"line":50,"column":15,"index":1503},"line":50,"code":"test('getParser', t => {\n  test('should return matching parser', t => {\n    t.plan(3);\n    const fastify = Fastify();\n    fastify.addContentTypeParser(/^image\\/.*/, first);\n    fastify.addContentTypeParser(/^application\\/.+\\+xml/, second);\n    fastify.addContentTypeParser('text/html', third);\n    t.equal(fastify[keys.kContentTypeParser].getParser('application/t+xml').fn, second);\n    t.equal(fastify[keys.kContentTypeParser].getParser('image/png').fn, first);\n    t.equal(fastify[keys.kContentTypeParser].getParser('text/html').fn, third);\n  });\n  test('should return matching parser with caching', t => {\n    t.plan(6);\n    const fastify = Fastify();\n    fastify.addContentTypeParser('text/html', first);\n    t.equal(fastify[keys.kContentTypeParser].getParser('text/html').fn, first);\n    t.equal(fastify[keys.kContentTypeParser].cache.size, 0);\n    t.equal(fastify[keys.kContentTypeParser].getParser('text/html ').fn, first);\n    t.equal(fastify[keys.kContentTypeParser].cache.size, 1);\n    t.equal(fastify[keys.kContentTypeParser].getParser('text/html ').fn, first);\n    t.equal(fastify[keys.kContentTypeParser].cache.size, 1);\n  });\n  test('should prefer content type parser with string value', t => {\n    t.plan(2);\n    const fastify = Fastify();\n    fastify.addContentTypeParser(/^image\\/.*/, first);\n    fastify.addContentTypeParser('image/gif', second);\n    t.equal(fastify[keys.kContentTypeParser].getParser('image/gif').fn, second);\n    t.equal(fastify[keys.kContentTypeParser].getParser('image/png').fn, first);\n  });\n  test('should return parser that catches all if no other is set', t => {\n    t.plan(3);\n    const fastify = Fastify();\n    fastify.addContentTypeParser('*', first);\n    fastify.addContentTypeParser(/^text\\/.*/, second);\n    t.equal(fastify[keys.kContentTypeParser].getParser('image/gif').fn, first);\n    t.equal(fastify[keys.kContentTypeParser].getParser('text/html').fn, second);\n    t.equal(fastify[keys.kContentTypeParser].getParser('text').fn, first);\n  });\n  test('should return undefined if no matching parser exist', t => {\n    t.plan(2);\n    const fastify = Fastify();\n    fastify.addContentTypeParser(/^weirdType\\/.+/, first);\n    fastify.addContentTypeParser('application/javascript', first);\n    t.notOk(fastify[keys.kContentTypeParser].getParser('application/xml'));\n    t.notOk(fastify[keys.kContentTypeParser].getParser('weirdType/'));\n  });\n  t.end();\n});","file":"content-parser.test.js","skipped":false,"dir":"test"},{"name":"should return matching parser","suites":[],"updatePoint":{"line":51,"column":37,"index":1550},"line":51,"code":"  test('should return matching parser', t => {\n    t.plan(3);\n    const fastify = Fastify();\n    fastify.addContentTypeParser(/^image\\/.*/, first);\n    fastify.addContentTypeParser(/^application\\/.+\\+xml/, second);\n    fastify.addContentTypeParser('text/html', third);\n    t.equal(fastify[keys.kContentTypeParser].getParser('application/t+xml').fn, second);\n    t.equal(fastify[keys.kContentTypeParser].getParser('image/png').fn, first);\n    t.equal(fastify[keys.kContentTypeParser].getParser('text/html').fn, third);\n  });","file":"content-parser.test.js","skipped":false,"dir":"test"},{"name":"should return matching parser with caching","suites":[],"updatePoint":{"line":61,"column":50,"index":2087},"line":61,"code":"  test('should return matching parser with caching', t => {\n    t.plan(6);\n    const fastify = Fastify();\n    fastify.addContentTypeParser('text/html', first);\n    t.equal(fastify[keys.kContentTypeParser].getParser('text/html').fn, first);\n    t.equal(fastify[keys.kContentTypeParser].cache.size, 0);\n    t.equal(fastify[keys.kContentTypeParser].getParser('text/html ').fn, first);\n    t.equal(fastify[keys.kContentTypeParser].cache.size, 1);\n    t.equal(fastify[keys.kContentTypeParser].getParser('text/html ').fn, first);\n    t.equal(fastify[keys.kContentTypeParser].cache.size, 1);\n  });","file":"content-parser.test.js","skipped":false,"dir":"test"},{"name":"should prefer content type parser with string value","suites":[],"updatePoint":{"line":72,"column":59,"index":2687},"line":72,"code":"  test('should prefer content type parser with string value', t => {\n    t.plan(2);\n    const fastify = Fastify();\n    fastify.addContentTypeParser(/^image\\/.*/, first);\n    fastify.addContentTypeParser('image/gif', second);\n    t.equal(fastify[keys.kContentTypeParser].getParser('image/gif').fn, second);\n    t.equal(fastify[keys.kContentTypeParser].getParser('image/png').fn, first);\n  });","file":"content-parser.test.js","skipped":false,"dir":"test"},{"name":"should return parser that catches all if no other is set","suites":[],"updatePoint":{"line":80,"column":64,"index":3084},"line":80,"code":"  test('should return parser that catches all if no other is set', t => {\n    t.plan(3);\n    const fastify = Fastify();\n    fastify.addContentTypeParser('*', first);\n    fastify.addContentTypeParser(/^text\\/.*/, second);\n    t.equal(fastify[keys.kContentTypeParser].getParser('image/gif').fn, first);\n    t.equal(fastify[keys.kContentTypeParser].getParser('text/html').fn, second);\n    t.equal(fastify[keys.kContentTypeParser].getParser('text').fn, first);\n  });","file":"content-parser.test.js","skipped":false,"dir":"test"},{"name":"should return undefined if no matching parser exist","suites":[],"updatePoint":{"line":89,"column":59,"index":3542},"line":89,"code":"  test('should return undefined if no matching parser exist', t => {\n    t.plan(2);\n    const fastify = Fastify();\n    fastify.addContentTypeParser(/^weirdType\\/.+/, first);\n    fastify.addContentTypeParser('application/javascript', first);\n    t.notOk(fastify[keys.kContentTypeParser].getParser('application/xml'));\n    t.notOk(fastify[keys.kContentTypeParser].getParser('weirdType/'));\n  });","file":"content-parser.test.js","skipped":false,"dir":"test"},{"name":"existingParser","suites":[],"updatePoint":{"line":99,"column":20,"index":3912},"line":99,"code":"test('existingParser', t => {\n  test('returns always false for \"*\"', t => {\n    t.plan(2);\n    const fastify = Fastify();\n    fastify.addContentTypeParser(/^image\\/.*/, first);\n    fastify.addContentTypeParser(/^application\\/.+\\+xml/, first);\n    fastify.addContentTypeParser('text/html', first);\n    t.notOk(fastify[keys.kContentTypeParser].existingParser('*'));\n    fastify.addContentTypeParser('*', first);\n    t.notOk(fastify[keys.kContentTypeParser].existingParser('*'));\n  });\n  test('let you override the default parser once', t => {\n    t.plan(2);\n    const fastify = Fastify();\n    fastify.addContentTypeParser('application/json', first);\n    fastify.addContentTypeParser('text/plain', first);\n    t.throws(() => fastify.addContentTypeParser('application/json', first), FST_ERR_CTP_ALREADY_PRESENT, \"Content type parser 'application/json' already present\");\n    t.throws(() => fastify.addContentTypeParser('text/plain', first), FST_ERR_CTP_ALREADY_PRESENT, \"Content type parser 'text/plain' already present\");\n  });\n  const fastify = Fastify();\n  const contentTypeParser = fastify[keys.kContentTypeParser];\n  fastify.addContentTypeParser(/^image\\/.*/, first);\n  fastify.addContentTypeParser(/^application\\/.+\\+xml/, first);\n  fastify.addContentTypeParser('text/html', first);\n  t.ok(contentTypeParser.existingParser(/^image\\/.*/));\n  t.ok(contentTypeParser.existingParser('text/html'));\n  t.ok(contentTypeParser.existingParser(/^application\\/.+\\+xml/));\n  t.notOk(contentTypeParser.existingParser('application/json'));\n  t.notOk(contentTypeParser.existingParser('text/plain'));\n  t.notOk(contentTypeParser.existingParser('image/png'));\n  t.notOk(contentTypeParser.existingParser(/^application\\/.+\\+json/));\n  t.end();\n});","file":"content-parser.test.js","skipped":false,"dir":"test"},{"name":"returns always false for \"*\"","suites":[],"updatePoint":{"line":100,"column":36,"index":3958},"line":100,"code":"  test('returns always false for \"*\"', t => {\n    t.plan(2);\n    const fastify = Fastify();\n    fastify.addContentTypeParser(/^image\\/.*/, first);\n    fastify.addContentTypeParser(/^application\\/.+\\+xml/, first);\n    fastify.addContentTypeParser('text/html', first);\n    t.notOk(fastify[keys.kContentTypeParser].existingParser('*'));\n    fastify.addContentTypeParser('*', first);\n    t.notOk(fastify[keys.kContentTypeParser].existingParser('*'));\n  });","file":"content-parser.test.js","skipped":false,"dir":"test"},{"name":"let you override the default parser once","suites":[],"updatePoint":{"line":110,"column":48,"index":4423},"line":110,"code":"  test('let you override the default parser once', t => {\n    t.plan(2);\n    const fastify = Fastify();\n    fastify.addContentTypeParser('application/json', first);\n    fastify.addContentTypeParser('text/plain', first);\n    t.throws(() => fastify.addContentTypeParser('application/json', first), FST_ERR_CTP_ALREADY_PRESENT, \"Content type parser 'application/json' already present\");\n    t.throws(() => fastify.addContentTypeParser('text/plain', first), FST_ERR_CTP_ALREADY_PRESENT, \"Content type parser 'text/plain' already present\");\n  });","file":"content-parser.test.js","skipped":false,"dir":"test"},{"name":"add","suites":[],"updatePoint":{"line":132,"column":9,"index":5632},"line":132,"code":"test('add', t => {\n  test('should only accept string and RegExp', t => {\n    t.plan(4);\n    const fastify = Fastify();\n    const contentTypeParser = fastify[keys.kContentTypeParser];\n    t.error(contentTypeParser.add('test', {}, first));\n    t.error(contentTypeParser.add(/test/, {}, first));\n    t.throws(() => contentTypeParser.add({}, {}, first), FST_ERR_CTP_INVALID_TYPE, 'The content type should be a string or a RegExp');\n    t.throws(() => contentTypeParser.add(1, {}, first), FST_ERR_CTP_INVALID_TYPE, 'The content type should be a string or a RegExp');\n  });\n  test('should set \"*\" as parser that catches all', t => {\n    t.plan(1);\n    const fastify = Fastify();\n    const contentTypeParser = fastify[keys.kContentTypeParser];\n    contentTypeParser.add('*', {}, first);\n    t.equal(contentTypeParser.customParsers[''].fn, first);\n  });\n  t.end();\n});","file":"content-parser.test.js","skipped":false,"dir":"test"},{"name":"should only accept string and RegExp","suites":[],"updatePoint":{"line":133,"column":44,"index":5686},"line":133,"code":"  test('should only accept string and RegExp', t => {\n    t.plan(4);\n    const fastify = Fastify();\n    const contentTypeParser = fastify[keys.kContentTypeParser];\n    t.error(contentTypeParser.add('test', {}, first));\n    t.error(contentTypeParser.add(/test/, {}, first));\n    t.throws(() => contentTypeParser.add({}, {}, first), FST_ERR_CTP_INVALID_TYPE, 'The content type should be a string or a RegExp');\n    t.throws(() => contentTypeParser.add(1, {}, first), FST_ERR_CTP_INVALID_TYPE, 'The content type should be a string or a RegExp');\n  });","file":"content-parser.test.js","skipped":false,"dir":"test"},{"name":"should set \"*\" as parser that catches all","suites":[],"updatePoint":{"line":142,"column":49,"index":6240},"line":142,"code":"  test('should set \"*\" as parser that catches all', t => {\n    t.plan(1);\n    const fastify = Fastify();\n    const contentTypeParser = fastify[keys.kContentTypeParser];\n    contentTypeParser.add('*', {}, first);\n    t.equal(contentTypeParser.customParsers[''].fn, first);\n  });","file":"content-parser.test.js","skipped":false,"dir":"test"},{"name":"non-Error thrown from content parser is properly handled","suites":[],"updatePoint":{"line":151,"column":62,"index":6546},"line":151,"code":"test('non-Error thrown from content parser is properly handled', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  const throwable = 'test';\n  const payload = 'error';\n  fastify.addContentTypeParser('text/test', (request, payload, done) => {\n    done(throwable);\n  });\n  fastify.post('/', (req, reply) => {});\n  fastify.setErrorHandler((err, req, res) => {\n    t.equal(err, throwable);\n    res.send(payload);\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/',\n    headers: {\n      'Content-Type': 'text/test'\n    },\n    body: 'some text'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.payload, payload);\n  });\n});","file":"content-parser.test.js","skipped":false,"dir":"test"},{"name":"Error thrown 415 from content type is null and make post request to server","suites":[],"updatePoint":{"line":176,"column":80,"index":7195},"line":176,"code":"test('Error thrown 415 from content type is null and make post request to server', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  const errMsg = new FST_ERR_CTP_INVALID_MEDIA_TYPE(undefined).message;\n  fastify.post('/', (req, reply) => {});\n  fastify.inject({\n    method: 'POST',\n    url: '/',\n    body: 'some text'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 415);\n    t.equal(JSON.parse(res.body).message, errMsg);\n  });\n});","file":"content-parser.test.js","skipped":false,"dir":"test"},{"name":"remove","suites":[],"updatePoint":{"line":191,"column":12,"index":7581},"line":191,"code":"test('remove', t => {\n  test('should remove default parser', t => {\n    t.plan(2);\n    const fastify = Fastify();\n    const contentTypeParser = fastify[keys.kContentTypeParser];\n    contentTypeParser.remove('application/json');\n    t.notOk(contentTypeParser.customParsers['application/json']);\n    t.notOk(contentTypeParser.parserList.find(parser => parser === 'application/json'));\n  });\n  test('should remove RegExp parser', t => {\n    t.plan(2);\n    const fastify = Fastify();\n    fastify.addContentTypeParser(/^text\\/*/, first);\n    const contentTypeParser = fastify[keys.kContentTypeParser];\n    contentTypeParser.remove(/^text\\/*/);\n    t.notOk(contentTypeParser.customParsers[/^text\\/*/]);\n    t.notOk(contentTypeParser.parserRegExpList.find(parser => parser.toString() === /^text\\/*/.toString()));\n  });\n  test('should throw an error if content type is neither string nor RegExp', t => {\n    t.plan(1);\n    const fastify = Fastify();\n    t.throws(() => fastify[keys.kContentTypeParser].remove(12), FST_ERR_CTP_INVALID_TYPE);\n  });\n  test('should not throw error if content type does not exist', t => {\n    t.plan(1);\n    const fastify = Fastify();\n    t.doesNotThrow(() => fastify[keys.kContentTypeParser].remove('image/png'));\n  });\n  test('should not remove any content type parser if content type does not exist', t => {\n    t.plan(1);\n    const fastify = Fastify();\n    const contentTypeParser = fastify[keys.kContentTypeParser];\n    contentTypeParser.remove('image/png');\n    t.same(Object.keys(contentTypeParser.customParsers).length, 2);\n  });\n  t.end();\n});","file":"content-parser.test.js","skipped":false,"dir":"test"},{"name":"should remove default parser","suites":[],"updatePoint":{"line":192,"column":36,"index":7627},"line":192,"code":"  test('should remove default parser', t => {\n    t.plan(2);\n    const fastify = Fastify();\n    const contentTypeParser = fastify[keys.kContentTypeParser];\n    contentTypeParser.remove('application/json');\n    t.notOk(contentTypeParser.customParsers['application/json']);\n    t.notOk(contentTypeParser.parserList.find(parser => parser === 'application/json'));\n  });","file":"content-parser.test.js","skipped":false,"dir":"test"},{"name":"should remove RegExp parser","suites":[],"updatePoint":{"line":200,"column":35,"index":7993},"line":200,"code":"  test('should remove RegExp parser', t => {\n    t.plan(2);\n    const fastify = Fastify();\n    fastify.addContentTypeParser(/^text\\/*/, first);\n    const contentTypeParser = fastify[keys.kContentTypeParser];\n    contentTypeParser.remove(/^text\\/*/);\n    t.notOk(contentTypeParser.customParsers[/^text\\/*/]);\n    t.notOk(contentTypeParser.parserRegExpList.find(parser => parser.toString() === /^text\\/*/.toString()));\n  });","file":"content-parser.test.js","skipped":false,"dir":"test"},{"name":"should throw an error if content type is neither string nor RegExp","suites":[],"updatePoint":{"line":209,"column":74,"index":8455},"line":209,"code":"  test('should throw an error if content type is neither string nor RegExp', t => {\n    t.plan(1);\n    const fastify = Fastify();\n    t.throws(() => fastify[keys.kContentTypeParser].remove(12), FST_ERR_CTP_INVALID_TYPE);\n  });","file":"content-parser.test.js","skipped":false,"dir":"test"},{"name":"should not throw error if content type does not exist","suites":[],"updatePoint":{"line":214,"column":61,"index":8669},"line":214,"code":"  test('should not throw error if content type does not exist', t => {\n    t.plan(1);\n    const fastify = Fastify();\n    t.doesNotThrow(() => fastify[keys.kContentTypeParser].remove('image/png'));\n  });","file":"content-parser.test.js","skipped":false,"dir":"test"},{"name":"should not remove any content type parser if content type does not exist","suites":[],"updatePoint":{"line":219,"column":80,"index":8891},"line":219,"code":"  test('should not remove any content type parser if content type does not exist', t => {\n    t.plan(1);\n    const fastify = Fastify();\n    const contentTypeParser = fastify[keys.kContentTypeParser];\n    contentTypeParser.remove('image/png');\n    t.same(Object.keys(contentTypeParser.customParsers).length, 2);\n  });","file":"content-parser.test.js","skipped":false,"dir":"test"},{"name":"remove all should remove all existing parsers and reset cache","suites":[],"updatePoint":{"line":228,"column":67,"index":9210},"line":228,"code":"test('remove all should remove all existing parsers and reset cache', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.addContentTypeParser('application/xml', first);\n  fastify.addContentTypeParser(/^image\\/.*/, first);\n  const contentTypeParser = fastify[keys.kContentTypeParser];\n  contentTypeParser.getParser('application/xml'); // fill cache with one entry\n\n  contentTypeParser.removeAll();\n  t.same(contentTypeParser.cache.size, 0);\n  t.same(contentTypeParser.parserList.length, 0);\n  t.same(contentTypeParser.parserRegExpList.length, 0);\n  t.same(Object.keys(contentTypeParser.customParsers).length, 0);\n});","file":"content-parser.test.js","skipped":false,"dir":"test"},{"name":"config","suites":[],"updatePoint":{"line":25,"column":12,"index":329},"line":25,"code":"test('config', t => {\n  t.plan(9);\n  const fastify = Fastify();\n  fastify.get('/get', {\n    schema: schema.schema,\n    config: Object.assign({}, schema.config)\n  }, handler);\n  fastify.route({\n    method: 'GET',\n    url: '/route',\n    schema: schema.schema,\n    handler,\n    config: Object.assign({}, schema.config)\n  });\n  fastify.route({\n    method: 'GET',\n    url: '/no-config',\n    schema: schema.schema,\n    handler\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/get'\n  }, (err, response) => {\n    t.error(err);\n    t.equal(response.statusCode, 200);\n    t.same(JSON.parse(response.payload), Object.assign({\n      url: '/get',\n      method: 'GET'\n    }, schema.config));\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/route'\n  }, (err, response) => {\n    t.error(err);\n    t.equal(response.statusCode, 200);\n    t.same(JSON.parse(response.payload), Object.assign({\n      url: '/route',\n      method: 'GET'\n    }, schema.config));\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/no-config'\n  }, (err, response) => {\n    t.error(err);\n    t.equal(response.statusCode, 200);\n    t.same(JSON.parse(response.payload), {\n      url: '/no-config',\n      method: 'GET'\n    });\n  });\n});","file":"context-config.test.js","skipped":false,"dir":"test"},{"name":"config with exposeHeadRoutes","suites":[],"updatePoint":{"line":79,"column":34,"index":1557},"line":79,"code":"test('config with exposeHeadRoutes', t => {\n  t.plan(9);\n  const fastify = Fastify({\n    exposeHeadRoutes: true\n  });\n  fastify.get('/get', {\n    schema: schema.schema,\n    config: Object.assign({}, schema.config)\n  }, handler);\n  fastify.route({\n    method: 'GET',\n    url: '/route',\n    schema: schema.schema,\n    handler,\n    config: Object.assign({}, schema.config)\n  });\n  fastify.route({\n    method: 'GET',\n    url: '/no-config',\n    schema: schema.schema,\n    handler\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/get'\n  }, (err, response) => {\n    t.error(err);\n    t.equal(response.statusCode, 200);\n    t.same(JSON.parse(response.payload), Object.assign({\n      url: '/get',\n      method: 'GET'\n    }, schema.config));\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/route'\n  }, (err, response) => {\n    t.error(err);\n    t.equal(response.statusCode, 200);\n    t.same(JSON.parse(response.payload), Object.assign({\n      url: '/route',\n      method: 'GET'\n    }, schema.config));\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/no-config'\n  }, (err, response) => {\n    t.error(err);\n    t.equal(response.statusCode, 200);\n    t.same(JSON.parse(response.payload), {\n      url: '/no-config',\n      method: 'GET'\n    });\n  });\n});","file":"context-config.test.js","skipped":false,"dir":"test"},{"name":"config without exposeHeadRoutes","suites":[],"updatePoint":{"line":135,"column":37,"index":2820},"line":135,"code":"test('config without exposeHeadRoutes', t => {\n  t.plan(9);\n  const fastify = Fastify({\n    exposeHeadRoutes: false\n  });\n  fastify.get('/get', {\n    schema: schema.schema,\n    config: Object.assign({}, schema.config)\n  }, handler);\n  fastify.route({\n    method: 'GET',\n    url: '/route',\n    schema: schema.schema,\n    handler,\n    config: Object.assign({}, schema.config)\n  });\n  fastify.route({\n    method: 'GET',\n    url: '/no-config',\n    schema: schema.schema,\n    handler\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/get'\n  }, (err, response) => {\n    t.error(err);\n    t.equal(response.statusCode, 200);\n    t.same(JSON.parse(response.payload), Object.assign({\n      url: '/get',\n      method: 'GET'\n    }, schema.config));\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/route'\n  }, (err, response) => {\n    t.error(err);\n    t.equal(response.statusCode, 200);\n    t.same(JSON.parse(response.payload), Object.assign({\n      url: '/route',\n      method: 'GET'\n    }, schema.config));\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/no-config'\n  }, (err, response) => {\n    t.error(err);\n    t.equal(response.statusCode, 200);\n    t.same(JSON.parse(response.payload), {\n      url: '/no-config',\n      method: 'GET'\n    });\n  });\n});","file":"context-config.test.js","skipped":false,"dir":"test"},{"name":"can be created - copy","suites":[],"updatePoint":{"line":11,"column":27,"index":170},"line":11,"code":"test('can be created - copy', t => {\n  t.plan(1);\n\n  try {\n    fastify.route({\n      method: 'COPY',\n      url: '*',\n      handler: function (req, reply) {\n        reply.code(204).send();\n      }\n    });\n    t.pass();\n  } catch (e) {\n    t.fail();\n  }\n});","file":"copy.test.js","skipped":false,"dir":"test"},{"name":"request - copy","suites":[],"updatePoint":{"line":34,"column":22,"index":524},"line":34,"code":"  test('request - copy', t => {\n    t.plan(2);\n    sget({\n      url: `http://localhost:${fastify.server.address().port}/test.txt`,\n      method: 'COPY',\n      headers: {\n        Destination: '/test2.txt'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 204);\n    });\n  });","file":"copy.test.js","skipped":false,"dir":"test"},{"name":"Should support a custom http server","suites":[],"updatePoint":{"line":19,"column":41,"index":343},"line":19,"code":"test('Should support a custom http server', async t => {\n  const localAddresses = await dns.lookup('localhost', {\n    all: true\n  });\n  t.plan(localAddresses.length + 3);\n\n  const serverFactory = (handler, opts) => {\n    t.ok(opts.serverFactory, 'it is called twice for every HOST interface');\n    const server = http.createServer((req, res) => {\n      req.custom = true;\n      handler(req, res);\n    });\n    return server;\n  };\n\n  const fastify = Fastify({\n    serverFactory\n  });\n  t.teardown(fastify.close.bind(fastify));\n  fastify.get('/', (req, reply) => {\n    t.ok(req.raw.custom);\n    reply.send({\n      hello: 'world'\n    });\n  });\n  await fastify.listen({\n    port: 0\n  });\n  await new Promise((resolve, reject) => {\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port,\n      rejectUnauthorized: false\n    }, (err, response, body) => {\n      if (err) {\n        return reject(err);\n      }\n\n      t.equal(response.statusCode, 200);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n      resolve();\n    });\n  });\n});","file":"custom-http-server.test.js","skipped":false,"dir":"test"},{"name":"Should not allow forceCloseConnection=idle if the server does not support closeIdleConnections","suites":[],"updatePoint":{"line":65,"column":100,"index":1486},"line":65,"code":"test('Should not allow forceCloseConnection=idle if the server does not support closeIdleConnections', t => {\n  t.plan(1);\n  t.throws(() => {\n    Fastify({\n      forceCloseConnections: 'idle',\n\n      serverFactory(handler, opts) {\n        return {\n          on() {}\n\n        };\n      }\n\n    });\n  }, FST_ERR_FORCE_CLOSE_CONNECTIONS_IDLE_NOT_AVAILABLE, \"Cannot set forceCloseConnections to 'idle' as your HTTP server does not support closeIdleConnections method\");\n});","file":"custom-http-server.test.js","skipped":false,"dir":"test"},{"name":"contentTypeParser should add a custom async parser","suites":[],"updatePoint":{"line":12,"column":56,"index":244},"line":12,"code":"test('contentTypeParser should add a custom async parser', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.post('/', (req, reply) => {\n    reply.send(req.body);\n  });\n  fastify.options('/', (req, reply) => {\n    reply.send(req.body);\n  });\n  fastify.addContentTypeParser('application/jsoff', async function (req, payload) {\n    const res = await new Promise((resolve, reject) => resolve(payload));\n    return res;\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => fastify.close());\n    t.test('in POST', t => {\n      t.plan(3);\n      sget({\n        method: 'POST',\n        url: 'http://localhost:' + fastify.server.address().port,\n        body: '{\"hello\":\"world\"}',\n        headers: {\n          'Content-Type': 'application/jsoff'\n        }\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 200);\n        t.same(body.toString(), JSON.stringify({\n          hello: 'world'\n        }));\n      });\n    });\n    t.test('in OPTIONS', t => {\n      t.plan(3);\n      sget({\n        method: 'OPTIONS',\n        url: 'http://localhost:' + fastify.server.address().port,\n        body: '{\"hello\":\"world\"}',\n        headers: {\n          'Content-Type': 'application/jsoff'\n        }\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 200);\n        t.same(body.toString(), JSON.stringify({\n          hello: 'world'\n        }));\n      });\n    });\n  });\n});","file":"custom-parser-async.test.js","skipped":false,"dir":"test"},{"name":"contentTypeParser method should exist","suites":[],"updatePoint":{"line":49,"column":43,"index":854},"line":49,"code":"test('contentTypeParser method should exist', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  t.ok(fastify.addContentTypeParser);\n});","file":"custom-parser.test.js","skipped":false,"dir":"test"},{"name":"contentTypeParser should add a custom parser","suites":[],"updatePoint":{"line":54,"column":50,"index":998},"line":54,"code":"test('contentTypeParser should add a custom parser', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.post('/', (req, reply) => {\n    reply.send(req.body);\n  });\n  fastify.options('/', (req, reply) => {\n    reply.send(req.body);\n  });\n  fastify.addContentTypeParser('application/jsoff', function (req, payload, done) {\n    jsonParser(payload, function (err, body) {\n      done(err, body);\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => fastify.close());\n    t.test('in POST', t => {\n      t.plan(3);\n      sget({\n        method: 'POST',\n        url: getUrl(fastify),\n        body: '{\"hello\":\"world\"}',\n        headers: {\n          'Content-Type': 'application/jsoff'\n        }\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 200);\n        t.same(body.toString(), JSON.stringify({\n          hello: 'world'\n        }));\n      });\n    });\n    t.test('in OPTIONS', t => {\n      t.plan(3);\n      sget({\n        method: 'OPTIONS',\n        url: getUrl(fastify),\n        body: '{\"hello\":\"world\"}',\n        headers: {\n          'Content-Type': 'application/jsoff'\n        }\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 200);\n        t.same(body.toString(), JSON.stringify({\n          hello: 'world'\n        }));\n      });\n    });\n  });\n});","file":"custom-parser.test.js","skipped":false,"dir":"test"},{"name":"contentTypeParser should handle multiple custom parsers","suites":[],"updatePoint":{"line":109,"column":61,"index":2398},"line":109,"code":"test('contentTypeParser should handle multiple custom parsers', t => {\n  t.plan(7);\n  const fastify = Fastify();\n  fastify.post('/', (req, reply) => {\n    reply.send(req.body);\n  });\n  fastify.post('/hello', (req, reply) => {\n    reply.send(req.body);\n  });\n\n  function customParser(req, payload, done) {\n    jsonParser(payload, function (err, body) {\n      done(err, body);\n    });\n  }\n\n  fastify.addContentTypeParser('application/jsoff', customParser);\n  fastify.addContentTypeParser('application/ffosj', customParser);\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'POST',\n      url: getUrl(fastify),\n      body: '{\"hello\":\"world\"}',\n      headers: {\n        'Content-Type': 'application/jsoff'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.same(body.toString(), JSON.stringify({\n        hello: 'world'\n      }));\n    });\n    sget({\n      method: 'POST',\n      url: getUrl(fastify) + '/hello',\n      body: '{\"hello\":\"world\"}',\n      headers: {\n        'Content-Type': 'application/ffosj'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.same(body.toString(), JSON.stringify({\n        hello: 'world'\n      }));\n    });\n  });\n});","file":"custom-parser.test.js","skipped":false,"dir":"test"},{"name":"contentTypeParser should handle an array of custom contentTypes","suites":[],"updatePoint":{"line":164,"column":69,"index":3760},"line":164,"code":"test('contentTypeParser should handle an array of custom contentTypes', t => {\n  t.plan(7);\n  const fastify = Fastify();\n  fastify.post('/', (req, reply) => {\n    reply.send(req.body);\n  });\n  fastify.post('/hello', (req, reply) => {\n    reply.send(req.body);\n  });\n\n  function customParser(req, payload, done) {\n    jsonParser(payload, function (err, body) {\n      done(err, body);\n    });\n  }\n\n  fastify.addContentTypeParser(['application/jsoff', 'application/ffosj'], customParser);\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'POST',\n      url: getUrl(fastify),\n      body: '{\"hello\":\"world\"}',\n      headers: {\n        'Content-Type': 'application/jsoff'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.same(body.toString(), JSON.stringify({\n        hello: 'world'\n      }));\n    });\n    sget({\n      method: 'POST',\n      url: getUrl(fastify) + '/hello',\n      body: '{\"hello\":\"world\"}',\n      headers: {\n        'Content-Type': 'application/ffosj'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.same(body.toString(), JSON.stringify({\n        hello: 'world'\n      }));\n    });\n  });\n});","file":"custom-parser.test.js","skipped":false,"dir":"test"},{"name":"contentTypeParser should handle errors","suites":[],"updatePoint":{"line":218,"column":44,"index":5053},"line":218,"code":"test('contentTypeParser should handle errors', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.post('/', (req, reply) => {\n    reply.send(req.body);\n  });\n  fastify.addContentTypeParser('application/jsoff', function (req, payload, done) {\n    done(new Error('kaboom!'), {});\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    sget({\n      method: 'POST',\n      url: getUrl(fastify),\n      body: '{\"hello\":\"world\"}',\n      headers: {\n        'Content-Type': 'application/jsoff'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 500);\n      fastify.close();\n    });\n  });\n});","file":"custom-parser.test.js","skipped":false,"dir":"test"},{"name":"contentTypeParser should support encapsulation","suites":[],"updatePoint":{"line":245,"column":52,"index":5715},"line":245,"code":"test('contentTypeParser should support encapsulation', t => {\n  t.plan(6);\n  const fastify = Fastify();\n  fastify.register((instance, opts, done) => {\n    instance.addContentTypeParser('application/jsoff', () => {});\n    t.ok(instance.hasContentTypeParser('application/jsoff'));\n    instance.register((instance, opts, done) => {\n      instance.addContentTypeParser('application/ffosj', () => {});\n      t.ok(instance.hasContentTypeParser('application/jsoff'));\n      t.ok(instance.hasContentTypeParser('application/ffosj'));\n      done();\n    });\n    done();\n  });\n  fastify.ready(err => {\n    t.error(err);\n    t.notOk(fastify.hasContentTypeParser('application/jsoff'));\n    t.notOk(fastify.hasContentTypeParser('application/ffosj'));\n  });\n});","file":"custom-parser.test.js","skipped":false,"dir":"test"},{"name":"contentTypeParser should support encapsulation, second try","suites":[],"updatePoint":{"line":265,"column":64,"index":6473},"line":265,"code":"test('contentTypeParser should support encapsulation, second try', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.register((instance, opts, done) => {\n    instance.post('/', (req, reply) => {\n      reply.send(req.body);\n    });\n    instance.addContentTypeParser('application/jsoff', function (req, payload, done) {\n      jsonParser(payload, function (err, body) {\n        done(err, body);\n      });\n    });\n    done();\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    sget({\n      method: 'POST',\n      url: getUrl(fastify),\n      body: '{\"hello\":\"world\"}',\n      headers: {\n        'Content-Type': 'application/jsoff'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.same(body.toString(), JSON.stringify({\n        hello: 'world'\n      }));\n      fastify.close();\n    });\n  });\n});","file":"custom-parser.test.js","skipped":false,"dir":"test"},{"name":"contentTypeParser shouldn't support request with undefined \"Content-Type\"","suites":[],"updatePoint":{"line":300,"column":80,"index":7369},"line":300,"code":"test('contentTypeParser shouldn\\'t support request with undefined \"Content-Type\"', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.post('/', (req, reply) => {\n    reply.send(req.body);\n  });\n  fastify.addContentTypeParser('application/jsoff', function (req, payload, done) {\n    jsonParser(payload, function (err, body) {\n      done(err, body);\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    sget({\n      method: 'POST',\n      url: getUrl(fastify),\n      body: 'unknown content type!',\n      headers: {// 'Content-Type': undefined\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 415);\n      fastify.close();\n    });\n  });\n});","file":"custom-parser.test.js","skipped":false,"dir":"test"},{"name":"the content type should be a string or RegExp","suites":[],"updatePoint":{"line":328,"column":51,"index":8060},"line":328,"code":"test('the content type should be a string or RegExp', t => {\n  t.plan(2);\n  const fastify = Fastify();\n\n  try {\n    fastify.addContentTypeParser(null, () => {});\n    t.fail();\n  } catch (err) {\n    t.equal(err.code, 'FST_ERR_CTP_INVALID_TYPE');\n    t.equal(err.message, 'The content type should be a string or a RegExp');\n  }\n});","file":"custom-parser.test.js","skipped":false,"dir":"test"},{"name":"the content type cannot be an empty string","suites":[],"updatePoint":{"line":340,"column":48,"index":8387},"line":340,"code":"test('the content type cannot be an empty string', t => {\n  t.plan(2);\n  const fastify = Fastify();\n\n  try {\n    fastify.addContentTypeParser('', () => {});\n    t.fail();\n  } catch (err) {\n    t.equal(err.code, 'FST_ERR_CTP_EMPTY_TYPE');\n    t.equal(err.message, 'The content type cannot be an empty string');\n  }\n});","file":"custom-parser.test.js","skipped":false,"dir":"test"},{"name":"the content type handler should be a function","suites":[],"updatePoint":{"line":352,"column":51,"index":8708},"line":352,"code":"test('the content type handler should be a function', t => {\n  t.plan(2);\n  const fastify = Fastify();\n\n  try {\n    fastify.addContentTypeParser('aaa', null);\n    t.fail();\n  } catch (err) {\n    t.equal(err.code, 'FST_ERR_CTP_INVALID_HANDLER');\n    t.equal(err.message, 'The content type handler should be a function');\n  }\n});","file":"custom-parser.test.js","skipped":false,"dir":"test"},{"name":"catch all content type parser","suites":[],"updatePoint":{"line":364,"column":35,"index":9020},"line":364,"code":"test('catch all content type parser', t => {\n  t.plan(7);\n  const fastify = Fastify();\n  fastify.post('/', (req, reply) => {\n    reply.send(req.body);\n  });\n  fastify.addContentTypeParser('*', function (req, payload, done) {\n    let data = '';\n    payload.on('data', chunk => {\n      data += chunk;\n    });\n    payload.on('end', () => {\n      done(null, data);\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    sget({\n      method: 'POST',\n      url: getUrl(fastify),\n      body: 'hello',\n      headers: {\n        'Content-Type': 'application/jsoff'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.same(body.toString(), 'hello');\n      sget({\n        method: 'POST',\n        url: getUrl(fastify),\n        body: 'hello',\n        headers: {\n          'Content-Type': 'very-weird-content-type'\n        }\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 200);\n        t.same(body.toString(), 'hello');\n        fastify.close();\n      });\n    });\n  });\n});","file":"custom-parser.test.js","skipped":false,"dir":"test"},{"name":"catch all content type parser should not interfere with other conte type parsers","suites":[],"updatePoint":{"line":410,"column":86,"index":10162},"line":410,"code":"test('catch all content type parser should not interfere with other conte type parsers', t => {\n  t.plan(7);\n  const fastify = Fastify();\n  fastify.post('/', (req, reply) => {\n    reply.send(req.body);\n  });\n  fastify.addContentTypeParser('*', function (req, payload, done) {\n    let data = '';\n    payload.on('data', chunk => {\n      data += chunk;\n    });\n    payload.on('end', () => {\n      done(null, data);\n    });\n  });\n  fastify.addContentTypeParser('application/jsoff', function (req, payload, done) {\n    jsonParser(payload, function (err, body) {\n      done(err, body);\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    sget({\n      method: 'POST',\n      url: getUrl(fastify),\n      body: '{\"hello\":\"world\"}',\n      headers: {\n        'Content-Type': 'application/jsoff'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.same(body.toString(), JSON.stringify({\n        hello: 'world'\n      }));\n      sget({\n        method: 'POST',\n        url: getUrl(fastify),\n        body: 'hello',\n        headers: {\n          'Content-Type': 'very-weird-content-type'\n        }\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 200);\n        t.same(body.toString(), 'hello');\n        fastify.close();\n      });\n    });\n  });\n}); // Issue 492 https://github.com/fastify/fastify/issues/492","file":"custom-parser.test.js","skipped":false,"dir":"test"},{"name":"'*' catch undefined Content-Type requests","suites":[],"updatePoint":{"line":464,"column":49,"index":11548},"line":464,"code":"test('\\'*\\' catch undefined Content-Type requests', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  fastify.addContentTypeParser('*', function (req, payload, done) {\n    let data = '';\n    payload.on('data', chunk => {\n      data += chunk;\n    });\n    payload.on('end', () => {\n      done(null, data);\n    });\n  });\n  fastify.post('/', (req, res) => {\n    // Needed to avoid json stringify\n    res.type('text/plain').send(req.body);\n  });\n  fastify.listen({\n    port: 0\n  }, function (err) {\n    t.error(err);\n    const fileStream = fs.createReadStream(__filename);\n    sget({\n      method: 'POST',\n      url: getUrl(fastify) + '/',\n      body: fileStream\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(body + '', fs.readFileSync(__filename).toString());\n    });\n  });\n});","file":"custom-parser.test.js","skipped":false,"dir":"test"},{"name":"cannot add custom parser after binding","suites":[],"updatePoint":{"line":497,"column":44,"index":12424},"line":497,"code":"test('cannot add custom parser after binding', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  fastify.post('/', (req, res) => {\n    res.type('text/plain').send(req.body);\n  });\n  fastify.listen({\n    port: 0\n  }, function (err) {\n    t.error(err);\n\n    try {\n      fastify.addContentTypeParser('*', () => {});\n      t.fail();\n    } catch (e) {\n      t.pass();\n    }\n  });\n});","file":"custom-parser.test.js","skipped":false,"dir":"test"},{"name":"Can override the default json parser","suites":[],"updatePoint":{"line":517,"column":42,"index":12845},"line":517,"code":"test('Can override the default json parser', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.post('/', (req, reply) => {\n    reply.send(req.body);\n  });\n  fastify.addContentTypeParser('application/json', function (req, payload, done) {\n    t.ok('called');\n    jsonParser(payload, function (err, body) {\n      done(err, body);\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    sget({\n      method: 'POST',\n      url: getUrl(fastify),\n      body: '{\"hello\":\"world\"}',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(body.toString(), '{\"hello\":\"world\"}');\n      fastify.close();\n    });\n  });\n});","file":"custom-parser.test.js","skipped":false,"dir":"test"},{"name":"Can override the default plain text parser","suites":[],"updatePoint":{"line":548,"column":48,"index":13616},"line":548,"code":"test('Can override the default plain text parser', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.post('/', (req, reply) => {\n    reply.send(req.body);\n  });\n  fastify.addContentTypeParser('text/plain', function (req, payload, done) {\n    t.ok('called');\n    plainTextParser(payload, function (err, body) {\n      done(err, body);\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    sget({\n      method: 'POST',\n      url: getUrl(fastify),\n      body: 'hello world',\n      headers: {\n        'Content-Type': 'text/plain'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(body.toString(), 'hello world');\n      fastify.close();\n    });\n  });\n});","file":"custom-parser.test.js","skipped":false,"dir":"test"},{"name":"Can override the default json parser in a plugin","suites":[],"updatePoint":{"line":579,"column":54,"index":14374},"line":579,"code":"test('Can override the default json parser in a plugin', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.register((instance, opts, done) => {\n    instance.addContentTypeParser('application/json', function (req, payload, done) {\n      t.ok('called');\n      jsonParser(payload, function (err, body) {\n        done(err, body);\n      });\n    });\n    instance.post('/', (req, reply) => {\n      reply.send(req.body);\n    });\n    done();\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    sget({\n      method: 'POST',\n      url: getUrl(fastify),\n      body: '{\"hello\":\"world\"}',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(body.toString(), '{\"hello\":\"world\"}');\n      fastify.close();\n    });\n  });\n});","file":"custom-parser.test.js","skipped":false,"dir":"test"},{"name":"Can't override the json parser multiple times","suites":[],"updatePoint":{"line":613,"column":52,"index":15234},"line":613,"code":"test('Can\\'t override the json parser multiple times', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  fastify.addContentTypeParser('application/json', function (req, payload, done) {\n    jsonParser(payload, function (err, body) {\n      done(err, body);\n    });\n  });\n\n  try {\n    fastify.addContentTypeParser('application/json', function (req, payload, done) {\n      t.ok('called');\n      jsonParser(payload, function (err, body) {\n        done(err, body);\n      });\n    });\n  } catch (err) {\n    t.equal(err.code, 'FST_ERR_CTP_ALREADY_PRESENT');\n    t.equal(err.message, 'Content type parser \\'application/json\\' already present.');\n  }\n});","file":"custom-parser.test.js","skipped":false,"dir":"test"},{"name":"Can't override the plain text parser multiple times","suites":[],"updatePoint":{"line":634,"column":58,"index":15886},"line":634,"code":"test('Can\\'t override the plain text parser multiple times', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  fastify.addContentTypeParser('text/plain', function (req, payload, done) {\n    plainTextParser(payload, function (err, body) {\n      done(err, body);\n    });\n  });\n\n  try {\n    fastify.addContentTypeParser('text/plain', function (req, payload, done) {\n      t.ok('called');\n      plainTextParser(payload, function (err, body) {\n        done(err, body);\n      });\n    });\n  } catch (err) {\n    t.equal(err.code, 'FST_ERR_CTP_ALREADY_PRESENT');\n    t.equal(err.message, 'Content type parser \\'text/plain\\' already present.');\n  }\n});","file":"custom-parser.test.js","skipped":false,"dir":"test"},{"name":"Should get the body as string","suites":[],"updatePoint":{"line":655,"column":35,"index":16507},"line":655,"code":"test('Should get the body as string', t => {\n  t.plan(6);\n  const fastify = Fastify();\n  fastify.post('/', (req, reply) => {\n    reply.send(req.body);\n  });\n  fastify.addContentTypeParser('application/json', {\n    parseAs: 'string'\n  }, function (req, body, done) {\n    t.ok('called');\n    t.ok(typeof body === 'string');\n\n    try {\n      const json = JSON.parse(body);\n      done(null, json);\n    } catch (err) {\n      err.statusCode = 400;\n      done(err, undefined);\n    }\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    sget({\n      method: 'POST',\n      url: getUrl(fastify),\n      body: '{\"hello\":\"world\"}',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(body.toString(), '{\"hello\":\"world\"}');\n      fastify.close();\n    });\n  });\n});","file":"custom-parser.test.js","skipped":false,"dir":"test"},{"name":"Should return defined body with no custom parser defined and content type = 'text/plain'","suites":[],"updatePoint":{"line":694,"column":96,"index":17464},"line":694,"code":"test('Should return defined body with no custom parser defined and content type = \\'text/plain\\'', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.post('/', (req, reply) => {\n    reply.send(req.body);\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    sget({\n      method: 'POST',\n      url: getUrl(fastify),\n      body: 'hello world',\n      headers: {\n        'Content-Type': 'text/plain'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(body.toString(), 'hello world');\n      fastify.close();\n    });\n  });\n});","file":"custom-parser.test.js","skipped":false,"dir":"test"},{"name":"Should have typeof body object with no custom parser defined, no body defined and content type = 'text/plain'","suites":[],"updatePoint":{"line":719,"column":117,"index":18099},"line":719,"code":"test('Should have typeof body object with no custom parser defined, no body defined and content type = \\'text/plain\\'', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.post('/', (req, reply) => {\n    reply.send(req.body);\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    sget({\n      method: 'POST',\n      url: getUrl(fastify),\n      headers: {\n        'Content-Type': 'text/plain'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(typeof body, 'object');\n      fastify.close();\n    });\n  });\n});","file":"custom-parser.test.js","skipped":false,"dir":"test"},{"name":"Should have typeof body object with no custom parser defined, null body and content type = 'text/plain'","suites":[],"updatePoint":{"line":743,"column":111,"index":18692},"line":743,"code":"test('Should have typeof body object with no custom parser defined, null body and content type = \\'text/plain\\'', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.post('/', (req, reply) => {\n    reply.send(req.body);\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    sget({\n      method: 'POST',\n      url: getUrl(fastify),\n      body: null,\n      headers: {\n        'Content-Type': 'text/plain'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(typeof body, 'object');\n      fastify.close();\n    });\n  });\n});","file":"custom-parser.test.js","skipped":false,"dir":"test"},{"name":"Should have typeof body object with no custom parser defined, undefined body and content type = 'text/plain'","suites":[],"updatePoint":{"line":768,"column":116,"index":19308},"line":768,"code":"test('Should have typeof body object with no custom parser defined, undefined body and content type = \\'text/plain\\'', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.post('/', (req, reply) => {\n    reply.send(req.body);\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    sget({\n      method: 'POST',\n      url: getUrl(fastify),\n      body: undefined,\n      headers: {\n        'Content-Type': 'text/plain'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(typeof body, 'object');\n      fastify.close();\n    });\n  });\n});","file":"custom-parser.test.js","skipped":false,"dir":"test"},{"name":"Should get the body as string","suites":[],"updatePoint":{"line":793,"column":35,"index":19848},"line":793,"code":"test('Should get the body as string', t => {\n  t.plan(6);\n  const fastify = Fastify();\n  fastify.post('/', (req, reply) => {\n    reply.send(req.body);\n  });\n  fastify.addContentTypeParser('text/plain', {\n    parseAs: 'string'\n  }, function (req, body, done) {\n    t.ok('called');\n    t.ok(typeof body === 'string');\n\n    try {\n      const plainText = body;\n      done(null, plainText);\n    } catch (err) {\n      err.statusCode = 400;\n      done(err, undefined);\n    }\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    sget({\n      method: 'POST',\n      url: getUrl(fastify),\n      body: 'hello world',\n      headers: {\n        'Content-Type': 'text/plain'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(body.toString(), 'hello world');\n      fastify.close();\n    });\n  });\n});","file":"custom-parser.test.js","skipped":false,"dir":"test"},{"name":"Should get the body as buffer","suites":[],"updatePoint":{"line":832,"column":35,"index":20718},"line":832,"code":"test('Should get the body as buffer', t => {\n  t.plan(6);\n  const fastify = Fastify();\n  fastify.post('/', (req, reply) => {\n    reply.send(req.body);\n  });\n  fastify.addContentTypeParser('application/json', {\n    parseAs: 'buffer'\n  }, function (req, body, done) {\n    t.ok('called');\n    t.ok(body instanceof Buffer);\n\n    try {\n      const json = JSON.parse(body);\n      done(null, json);\n    } catch (err) {\n      err.statusCode = 400;\n      done(err, undefined);\n    }\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    sget({\n      method: 'POST',\n      url: getUrl(fastify),\n      body: '{\"hello\":\"world\"}',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(body.toString(), '{\"hello\":\"world\"}');\n      fastify.close();\n    });\n  });\n});","file":"custom-parser.test.js","skipped":false,"dir":"test"},{"name":"Should get the body as buffer","suites":[],"updatePoint":{"line":871,"column":35,"index":21612},"line":871,"code":"test('Should get the body as buffer', t => {\n  t.plan(6);\n  const fastify = Fastify();\n  fastify.post('/', (req, reply) => {\n    reply.send(req.body);\n  });\n  fastify.addContentTypeParser('text/plain', {\n    parseAs: 'buffer'\n  }, function (req, body, done) {\n    t.ok('called');\n    t.ok(body instanceof Buffer);\n\n    try {\n      const plainText = body;\n      done(null, plainText);\n    } catch (err) {\n      err.statusCode = 400;\n      done(err, undefined);\n    }\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    sget({\n      method: 'POST',\n      url: getUrl(fastify),\n      body: 'hello world',\n      headers: {\n        'Content-Type': 'text/plain'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(body.toString(), 'hello world');\n      fastify.close();\n    });\n  });\n});","file":"custom-parser.test.js","skipped":false,"dir":"test"},{"name":"Should parse empty bodies as a string","suites":[],"updatePoint":{"line":910,"column":43,"index":22488},"line":910,"code":"test('Should parse empty bodies as a string', t => {\n  t.plan(9);\n  const fastify = Fastify();\n  fastify.addContentTypeParser('text/plain', {\n    parseAs: 'string'\n  }, (req, body, done) => {\n    t.equal(body, '');\n    done(null, body);\n  });\n  fastify.route({\n    method: ['POST', 'DELETE'],\n    url: '/',\n\n    handler(request, reply) {\n      reply.send(request.body);\n    }\n\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'POST',\n      url: getUrl(fastify),\n      body: '',\n      headers: {\n        'Content-Type': 'text/plain'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(body.toString(), '');\n    });\n    sget({\n      method: 'DELETE',\n      url: getUrl(fastify),\n      body: '',\n      headers: {\n        'Content-Type': 'text/plain',\n        'Content-Length': '0'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(body.toString(), '');\n    });\n  });\n});","file":"custom-parser.test.js","skipped":false,"dir":"test"},{"name":"Should parse empty bodies as a buffer","suites":[],"updatePoint":{"line":962,"column":43,"index":23587},"line":962,"code":"test('Should parse empty bodies as a buffer', t => {\n  t.plan(6);\n  const fastify = Fastify();\n  fastify.post('/', (req, reply) => {\n    reply.send(req.body);\n  });\n  fastify.addContentTypeParser('text/plain', {\n    parseAs: 'buffer'\n  }, function (req, body, done) {\n    t.ok(body instanceof Buffer);\n    t.equal(body.length, 0);\n    done(null, body);\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    sget({\n      method: 'POST',\n      url: getUrl(fastify),\n      body: '',\n      headers: {\n        'Content-Type': 'text/plain'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(body.length, 0);\n      fastify.close();\n    });\n  });\n});","file":"custom-parser.test.js","skipped":false,"dir":"test"},{"name":"The charset should not interfere with the content type handling","suites":[],"updatePoint":{"line":994,"column":69,"index":24341},"line":994,"code":"test('The charset should not interfere with the content type handling', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.post('/', (req, reply) => {\n    reply.send(req.body);\n  });\n  fastify.addContentTypeParser('application/json', function (req, payload, done) {\n    t.ok('called');\n    jsonParser(payload, function (err, body) {\n      done(err, body);\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    sget({\n      method: 'POST',\n      url: getUrl(fastify),\n      body: '{\"hello\":\"world\"}',\n      headers: {\n        'Content-Type': 'application/json charset=utf-8'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(body.toString(), '{\"hello\":\"world\"}');\n      fastify.close();\n    });\n  });\n});","file":"custom-parser.test.js","skipped":false,"dir":"test"},{"name":"Wrong parseAs parameter","suites":[],"updatePoint":{"line":1025,"column":29,"index":25107},"line":1025,"code":"test('Wrong parseAs parameter', t => {\n  t.plan(2);\n  const fastify = Fastify();\n\n  try {\n    fastify.addContentTypeParser('application/json', {\n      parseAs: 'fireworks'\n    }, () => {});\n    t.fail('should throw');\n  } catch (err) {\n    t.equal(err.code, 'FST_ERR_CTP_INVALID_PARSE_TYPE');\n    t.equal(err.message, \"The body parser can only parse your data as 'string' or 'buffer', you asked 'fireworks' which is not supported.\");\n  }\n});","file":"custom-parser.test.js","skipped":false,"dir":"test"},{"name":"Should allow defining the bodyLimit per parser","suites":[],"updatePoint":{"line":1039,"column":52,"index":25572},"line":1039,"code":"test('Should allow defining the bodyLimit per parser', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  t.teardown(() => fastify.close());\n  fastify.post('/', (req, reply) => {\n    reply.send(req.body);\n  });\n  fastify.addContentTypeParser('x/foo', {\n    parseAs: 'string',\n    bodyLimit: 5\n  }, function (req, body, done) {\n    t.fail('should not be invoked');\n    done();\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    sget({\n      method: 'POST',\n      url: getUrl(fastify),\n      body: '1234567890',\n      headers: {\n        'Content-Type': 'x/foo'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.strictSame(JSON.parse(body.toString()), {\n        statusCode: 413,\n        code: 'FST_ERR_CTP_BODY_TOO_LARGE',\n        error: 'Payload Too Large',\n        message: 'Request body is too large'\n      });\n      fastify.close();\n    });\n  });\n});","file":"custom-parser.test.js","skipped":false,"dir":"test"},{"name":"route bodyLimit should take precedence over a custom parser bodyLimit","suites":[],"updatePoint":{"line":1076,"column":75,"index":26489},"line":1076,"code":"test('route bodyLimit should take precedence over a custom parser bodyLimit', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  t.teardown(() => fastify.close());\n  fastify.post('/', {\n    bodyLimit: 5\n  }, (request, reply) => {\n    reply.send(request.body);\n  });\n  fastify.addContentTypeParser('x/foo', {\n    parseAs: 'string',\n    bodyLimit: 100\n  }, function (req, body, done) {\n    t.fail('should not be invoked');\n    done();\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    sget({\n      method: 'POST',\n      url: getUrl(fastify),\n      body: '1234567890',\n      headers: {\n        'Content-Type': 'x/foo'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.strictSame(JSON.parse(body.toString()), {\n        statusCode: 413,\n        code: 'FST_ERR_CTP_BODY_TOO_LARGE',\n        error: 'Payload Too Large',\n        message: 'Request body is too large'\n      });\n      fastify.close();\n    });\n  });\n});","file":"custom-parser.test.js","skipped":false,"dir":"test"},{"name":"should be able to use default parser for extra content type","suites":[],"updatePoint":{"line":1115,"column":65,"index":27430},"line":1115,"code":"test('should be able to use default parser for extra content type', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  t.teardown(() => fastify.close());\n  fastify.post('/', (request, reply) => {\n    reply.send(request.body);\n  });\n  fastify.addContentTypeParser('text/json', {\n    parseAs: 'string'\n  }, fastify.getDefaultJsonParser('ignore', 'ignore'));\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    sget({\n      method: 'POST',\n      url: getUrl(fastify),\n      body: '{\"hello\":\"world\"}',\n      headers: {\n        'Content-Type': 'text/json'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.strictSame(JSON.parse(body.toString()), {\n        hello: 'world'\n      });\n      fastify.close();\n    });\n  });\n});","file":"custom-parser.test.js","skipped":false,"dir":"test"},{"name":"contentTypeParser should add a custom parser with RegExp value","suites":[],"updatePoint":{"line":1146,"column":68,"index":28226},"line":1146,"code":"test('contentTypeParser should add a custom parser with RegExp value', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.post('/', (req, reply) => {\n    reply.send(req.body);\n  });\n  fastify.options('/', (req, reply) => {\n    reply.send(req.body);\n  });\n  fastify.addContentTypeParser(/.*\\+json$/, function (req, payload, done) {\n    jsonParser(payload, function (err, body) {\n      done(err, body);\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => fastify.close());\n    t.test('in POST', t => {\n      t.plan(3);\n      sget({\n        method: 'POST',\n        url: getUrl(fastify),\n        body: '{\"hello\":\"world\"}',\n        headers: {\n          'Content-Type': 'application/vnd.test+json'\n        }\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 200);\n        t.same(body.toString(), JSON.stringify({\n          hello: 'world'\n        }));\n      });\n    });\n    t.test('in OPTIONS', t => {\n      t.plan(3);\n      sget({\n        method: 'OPTIONS',\n        url: getUrl(fastify),\n        body: '{\"hello\":\"world\"}',\n        headers: {\n          'Content-Type': 'weird-content-type+json'\n        }\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 200);\n        t.same(body.toString(), JSON.stringify({\n          hello: 'world'\n        }));\n      });\n    });\n  });\n});","file":"custom-parser.test.js","skipped":false,"dir":"test"},{"name":"contentTypeParser should add multiple custom parsers with RegExp values","suites":[],"updatePoint":{"line":1201,"column":77,"index":29648},"line":1201,"code":"test('contentTypeParser should add multiple custom parsers with RegExp values', async t => {\n  t.plan(6);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  fastify.post('/', (req, reply) => {\n    reply.send(req.body);\n  });\n  fastify.addContentTypeParser(/.*\\+json$/, function (req, payload, done) {\n    jsonParser(payload, function (err, body) {\n      done(err, body);\n    });\n  });\n  fastify.addContentTypeParser(/.*\\+xml$/, function (req, payload, done) {\n    done(null, 'xml');\n  });\n  fastify.addContentTypeParser(/.*\\+myExtension$/, function (req, payload, done) {\n    let data = '';\n    payload.on('data', chunk => {\n      data += chunk;\n    });\n    payload.on('end', () => {\n      done(null, data + 'myExtension');\n    });\n  });\n  await fastify.ready();\n  {\n    const response = await fastify.inject({\n      method: 'POST',\n      url: '/',\n      body: '{\"hello\":\"world\"}',\n      headers: {\n        'Content-Type': 'application/vnd.hello+json'\n      }\n    });\n    t.equal(response.statusCode, 200);\n    t.same(response.payload.toString(), '{\"hello\":\"world\"}');\n  }\n  {\n    const response = await fastify.inject({\n      method: 'POST',\n      url: '/',\n      body: '{\"hello\":\"world\"}',\n      headers: {\n        'Content-Type': 'application/test+xml'\n      }\n    });\n    t.equal(response.statusCode, 200);\n    t.same(response.payload.toString(), 'xml');\n  }\n  await fastify.inject({\n    method: 'POST',\n    path: '/',\n    payload: 'abcdefg',\n    headers: {\n      'Content-Type': 'application/+myExtension'\n    }\n  }).then(response => {\n    t.equal(response.statusCode, 200);\n    t.same(response.payload.toString(), 'abcdefgmyExtension');\n  }).catch(err => {\n    t.error(err);\n  });\n});","file":"custom-parser.test.js","skipped":false,"dir":"test"},{"name":"catch all content type parser should not interfere with content type parser","suites":[],"updatePoint":{"line":1264,"column":81,"index":31366},"line":1264,"code":"test('catch all content type parser should not interfere with content type parser', t => {\n  t.plan(10);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  fastify.post('/', (req, reply) => {\n    reply.send(req.body);\n  });\n  fastify.addContentTypeParser('*', function (req, payload, done) {\n    let data = '';\n    payload.on('data', chunk => {\n      data += chunk;\n    });\n    payload.on('end', () => {\n      done(null, data);\n    });\n  });\n  fastify.addContentTypeParser(/^application\\/.*/, function (req, payload, done) {\n    jsonParser(payload, function (err, body) {\n      done(err, body);\n    });\n  });\n  fastify.addContentTypeParser('text/html', function (req, payload, done) {\n    let data = '';\n    payload.on('data', chunk => {\n      data += chunk;\n    });\n    payload.on('end', () => {\n      done(null, data + 'html');\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    sget({\n      method: 'POST',\n      url: getUrl(fastify),\n      body: '{\"myKey\":\"myValue\"}',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.same(body.toString(), JSON.stringify({\n        myKey: 'myValue'\n      }));\n    });\n    sget({\n      method: 'POST',\n      url: getUrl(fastify),\n      body: 'body',\n      headers: {\n        'Content-Type': 'very-weird-content-type'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.same(body.toString(), 'body');\n    });\n    sget({\n      method: 'POST',\n      url: getUrl(fastify),\n      body: 'my text',\n      headers: {\n        'Content-Type': 'text/html'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.same(body.toString(), 'my texthtml');\n    });\n  });\n});","file":"custom-parser.test.js","skipped":false,"dir":"test"},{"name":"should prefer string content types over RegExp ones","suites":[],"updatePoint":{"line":1338,"column":57,"index":33224},"line":1338,"code":"test('should prefer string content types over RegExp ones', t => {\n  t.plan(7);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  fastify.post('/', (req, reply) => {\n    reply.send(req.body);\n  });\n  fastify.addContentTypeParser(/^application\\/.*/, function (req, payload, done) {\n    let data = '';\n    payload.on('data', chunk => {\n      data += chunk;\n    });\n    payload.on('end', () => {\n      done(null, data);\n    });\n  });\n  fastify.addContentTypeParser('application/json', function (req, payload, done) {\n    jsonParser(payload, function (err, body) {\n      done(err, body);\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    sget({\n      method: 'POST',\n      url: getUrl(fastify),\n      body: '{\"k1\":\"myValue\", \"k2\": \"myValue\"}',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.same(body.toString(), JSON.stringify({\n        k1: 'myValue',\n        k2: 'myValue'\n      }));\n    });\n    sget({\n      method: 'POST',\n      url: getUrl(fastify),\n      body: 'javascript',\n      headers: {\n        'Content-Type': 'application/javascript'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.same(body.toString(), 'javascript');\n    });\n  });\n});","file":"custom-parser.test.js","skipped":false,"dir":"test"},{"name":"removeContentTypeParser should support arrays of content types to remove","suites":[],"updatePoint":{"line":1392,"column":78,"index":34633},"line":1392,"code":"test('removeContentTypeParser should support arrays of content types to remove', t => {\n  t.plan(8);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  fastify.addContentTypeParser('application/xml', function (req, payload, done) {\n    payload.on('data', () => {});\n    payload.on('end', () => {\n      done(null, 'xml');\n    });\n  });\n  fastify.addContentTypeParser(/^image\\/.*/, function (req, payload, done) {\n    payload.on('data', () => {});\n    payload.on('end', () => {\n      done(null, 'image');\n    });\n  });\n  fastify.removeContentTypeParser([/^image\\/.*/, 'application/json']);\n  fastify.post('/', (req, reply) => {\n    reply.send(req.body);\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    sget({\n      method: 'POST',\n      url: getUrl(fastify),\n      body: '<?xml version=\"1.0\">',\n      headers: {\n        'Content-Type': 'application/xml'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.same(body.toString(), 'xml');\n    });\n    sget({\n      method: 'POST',\n      url: getUrl(fastify),\n      body: '',\n      headers: {\n        'Content-Type': 'image/png'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 415);\n    });\n    sget({\n      method: 'POST',\n      url: getUrl(fastify),\n      body: '{test: \"test\"}',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 415);\n    });\n  });\n});","file":"custom-parser.test.js","skipped":false,"dir":"test"},{"name":"removeContentTypeParser should support encapsulation","suites":[],"updatePoint":{"line":1452,"column":58,"index":36175},"line":1452,"code":"test('removeContentTypeParser should support encapsulation', t => {\n  t.plan(6);\n  const fastify = Fastify();\n  fastify.addContentTypeParser('application/xml', function (req, payload, done) {\n    payload.on('data', () => {});\n    payload.on('end', () => {\n      done(null, 'xml');\n    });\n  });\n  fastify.post('/', (req, reply) => {\n    reply.send(req.body);\n  });\n  fastify.register(function (instance, options, done) {\n    instance.removeContentTypeParser('application/xml');\n    instance.post('/encapsulated', (req, reply) => {\n      reply.send(req.body);\n    });\n    done();\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    sget({\n      method: 'POST',\n      url: getUrl(fastify) + '/encapsulated',\n      body: '<?xml version=\"1.0\">',\n      headers: {\n        'Content-Type': 'application/xml'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 415);\n    });\n    sget({\n      method: 'POST',\n      url: getUrl(fastify),\n      body: '<?xml version=\"1.0\">',\n      headers: {\n        'Content-Type': 'application/xml'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.same(body.toString(), 'xml');\n      fastify.close();\n    });\n  });\n});","file":"custom-parser.test.js","skipped":false,"dir":"test"},{"name":"removeAllContentTypeParsers should support encapsulation","suites":[],"updatePoint":{"line":1501,"column":62,"index":37450},"line":1501,"code":"test('removeAllContentTypeParsers should support encapsulation', t => {\n  t.plan(6);\n  const fastify = Fastify();\n  fastify.post('/', (req, reply) => {\n    reply.send(req.body);\n  });\n  fastify.register(function (instance, options, done) {\n    instance.removeAllContentTypeParsers();\n    instance.post('/encapsulated', (req, reply) => {\n      reply.send(req.body);\n    });\n    done();\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    sget({\n      method: 'POST',\n      url: getUrl(fastify) + '/encapsulated',\n      body: '{}',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 415);\n    });\n    sget({\n      method: 'POST',\n      url: getUrl(fastify),\n      body: '{\"test\":1}',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.same(JSON.parse(body.toString()).test, 1);\n      fastify.close();\n    });\n  });\n});","file":"custom-parser.test.js","skipped":false,"dir":"test"},{"name":"cannot remove all content type parsers after binding","suites":[],"updatePoint":{"line":1544,"column":58,"index":38510},"line":1544,"code":"test('cannot remove all content type parsers after binding', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen({\n    port: 0\n  }, function (err) {\n    t.error(err);\n    t.throws(() => fastify.removeAllContentTypeParsers());\n  });\n});","file":"custom-parser.test.js","skipped":false,"dir":"test"},{"name":"cannot remove content type parsers after binding","suites":[],"updatePoint":{"line":1555,"column":54,"index":38799},"line":1555,"code":"test('cannot remove content type parsers after binding', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen({\n    port: 0\n  }, function (err) {\n    t.error(err);\n    t.throws(() => fastify.removeContentTypeParser('application/json'));\n  });\n});","file":"custom-parser.test.js","skipped":false,"dir":"test"},{"name":"should be able to override the default json parser after removeAllContentTypeParsers","suites":[],"updatePoint":{"line":1566,"column":90,"index":39138},"line":1566,"code":"test('should be able to override the default json parser after removeAllContentTypeParsers', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.post('/', (req, reply) => {\n    reply.send(req.body);\n  });\n  fastify.removeAllContentTypeParsers();\n  fastify.addContentTypeParser('application/json', function (req, payload, done) {\n    t.ok('called');\n    jsonParser(payload, function (err, body) {\n      done(err, body);\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    sget({\n      method: 'POST',\n      url: getUrl(fastify),\n      body: '{\"hello\":\"world\"}',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.same(body.toString(), JSON.stringify({\n        hello: 'world'\n      }));\n      fastify.close();\n    });\n  });\n});","file":"custom-parser.test.js","skipped":false,"dir":"test"},{"name":"should be able to override the default plain text parser after removeAllContentTypeParsers","suites":[],"updatePoint":{"line":1600,"column":96,"index":40026},"line":1600,"code":"test('should be able to override the default plain text parser after removeAllContentTypeParsers', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.post('/', (req, reply) => {\n    reply.send(req.body);\n  });\n  fastify.removeAllContentTypeParsers();\n  fastify.addContentTypeParser('text/plain', function (req, payload, done) {\n    t.ok('called');\n    plainTextParser(payload, function (err, body) {\n      done(err, body);\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    sget({\n      method: 'POST',\n      url: getUrl(fastify),\n      body: 'hello world',\n      headers: {\n        'Content-Type': 'text/plain'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(body.toString(), 'hello world');\n      fastify.close();\n    });\n  });\n});","file":"custom-parser.test.js","skipped":false,"dir":"test"},{"name":"should be able to add a custom content type parser after removeAllContentTypeParsers","suites":[],"updatePoint":{"line":1632,"column":90,"index":40861},"line":1632,"code":"test('should be able to add a custom content type parser after removeAllContentTypeParsers', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.post('/', (req, reply) => {\n    reply.send(req.body);\n  });\n  fastify.removeAllContentTypeParsers();\n  fastify.addContentTypeParser('application/jsoff', function (req, payload, done) {\n    t.ok('called');\n    jsonParser(payload, function (err, body) {\n      done(err, body);\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    sget({\n      method: 'POST',\n      url: getUrl(fastify),\n      body: '{\"hello\":\"world\"}',\n      headers: {\n        'Content-Type': 'application/jsoff'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.same(body.toString(), JSON.stringify({\n        hello: 'world'\n      }));\n      fastify.close();\n    });\n  });\n});","file":"custom-parser.test.js","skipped":false,"dir":"test"},{"name":"Custom querystring parser","suites":[],"updatePoint":{"line":13,"column":31,"index":217},"line":13,"code":"test('Custom querystring parser', t => {\n  t.plan(9);\n  const fastify = Fastify({\n    querystringParser: function (str) {\n      t.equal(str, 'foo=bar&baz=faz');\n      return querystring.parse(str);\n    }\n  });\n  fastify.get('/', (req, reply) => {\n    t.same(req.query, {\n      foo: 'bar',\n      baz: 'faz'\n    });\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, (err, address) => {\n    t.error(err);\n    t.teardown(() => fastify.close());\n    sget({\n      method: 'GET',\n      url: `${address}?foo=bar&baz=faz`\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n    });\n    fastify.inject({\n      method: 'GET',\n      url: `${address}?foo=bar&baz=faz`\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n    });\n  });\n});","file":"custom-querystring-parser.test.js","skipped":false,"dir":"test"},{"name":"Custom querystring parser should be called also if there is nothing to parse","suites":[],"updatePoint":{"line":51,"column":82,"index":1117},"line":51,"code":"test('Custom querystring parser should be called also if there is nothing to parse', t => {\n  t.plan(9);\n  const fastify = Fastify({\n    querystringParser: function (str) {\n      t.equal(str, '');\n      return querystring.parse(str);\n    }\n  });\n  fastify.get('/', (req, reply) => {\n    t.same(req.query, {});\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, (err, address) => {\n    t.error(err);\n    t.teardown(() => fastify.close());\n    sget({\n      method: 'GET',\n      url: address\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n    });\n    fastify.inject({\n      method: 'GET',\n      url: address\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n    });\n  });\n});","file":"custom-querystring-parser.test.js","skipped":false,"dir":"test"},{"name":"Querystring without value","suites":[],"updatePoint":{"line":86,"column":31,"index":1869},"line":86,"code":"test('Querystring without value', t => {\n  t.plan(9);\n  const fastify = Fastify({\n    querystringParser: function (str) {\n      t.equal(str, 'foo');\n      return querystring.parse(str);\n    }\n  });\n  fastify.get('/', (req, reply) => {\n    t.same(req.query, {\n      foo: ''\n    });\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, (err, address) => {\n    t.error(err);\n    t.teardown(() => fastify.close());\n    sget({\n      method: 'GET',\n      url: `${address}?foo`\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n    });\n    fastify.inject({\n      method: 'GET',\n      url: `${address}?foo`\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n    });\n  });\n});","file":"custom-querystring-parser.test.js","skipped":false,"dir":"test"},{"name":"Custom querystring parser should be a function","suites":[],"updatePoint":{"line":123,"column":52,"index":2682},"line":123,"code":"test('Custom querystring parser should be a function', t => {\n  t.plan(1);\n\n  try {\n    Fastify({\n      querystringParser: 10\n    });\n    t.fail('Should throw');\n  } catch (err) {\n    t.equal(err.message, \"querystringParser option should be a function, instead got 'number'\");\n  }\n});","file":"custom-querystring-parser.test.js","skipped":false,"dir":"test"},{"name":"server methods should exist","suites":[],"updatePoint":{"line":18,"column":33,"index":341},"line":18,"code":"test('server methods should exist', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  t.ok(fastify.decorate);\n  t.ok(fastify.hasDecorator);\n});","file":"decorator.test.js","skipped":false,"dir":"test"},{"name":"should check if the given decoration already exist when null","suites":[],"updatePoint":{"line":24,"column":66,"index":519},"line":24,"code":"test('should check if the given decoration already exist when null', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  fastify.decorate('null', null);\n  fastify.ready(() => {\n    t.ok(fastify.hasDecorator('null'));\n  });\n});","file":"decorator.test.js","skipped":false,"dir":"test"},{"name":"server methods should be encapsulated via .register","suites":[],"updatePoint":{"line":32,"column":57,"index":736},"line":32,"code":"test('server methods should be encapsulated via .register', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  fastify.register((instance, opts, done) => {\n    instance.decorate('test', () => {});\n    t.ok(instance.test);\n    done();\n  });\n  fastify.ready(() => {\n    t.notOk(fastify.test);\n  });\n});","file":"decorator.test.js","skipped":false,"dir":"test"},{"name":"hasServerMethod should check if the given method already exist","suites":[],"updatePoint":{"line":44,"column":68,"index":1048},"line":44,"code":"test('hasServerMethod should check if the given method already exist', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  fastify.register((instance, opts, done) => {\n    instance.decorate('test', () => {});\n    t.ok(instance.hasDecorator('test'));\n    done();\n  });\n  fastify.ready(() => {\n    t.notOk(fastify.hasDecorator('test'));\n  });\n});","file":"decorator.test.js","skipped":false,"dir":"test"},{"name":"decorate should throw if a declared dependency is not present","suites":[],"updatePoint":{"line":56,"column":67,"index":1391},"line":56,"code":"test('decorate should throw if a declared dependency is not present', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.register((instance, opts, done) => {\n    try {\n      instance.decorate('test', () => {}, ['dependency']);\n      t.fail();\n    } catch (e) {\n      t.same(e.code, 'FST_ERR_DEC_MISSING_DEPENDENCY');\n      t.same(e.message, 'The decorator is missing dependency \\'dependency\\'.');\n    }\n\n    done();\n  });\n  fastify.ready(() => t.pass());\n});","file":"decorator.test.js","skipped":false,"dir":"test"},{"name":"decorate should throw if declared dependency is not array","suites":[],"updatePoint":{"line":72,"column":63,"index":1854},"line":72,"code":"test('decorate should throw if declared dependency is not array', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.register((instance, opts, done) => {\n    try {\n      instance.decorate('test', () => {}, {});\n      t.fail();\n    } catch (e) {\n      t.same(e.code, 'FST_ERR_DEC_DEPENDENCY_INVALID_TYPE');\n      t.same(e.message, 'The dependencies of decorator \\'test\\' must be of type Array.');\n    }\n\n    done();\n  });\n  fastify.ready(() => t.pass());\n}); // issue #777","file":"decorator.test.js","skipped":false,"dir":"test"},{"name":"should pass error for missing request decorator","suites":[],"updatePoint":{"line":89,"column":53,"index":2325},"line":89,"code":"test('should pass error for missing request decorator', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  const plugin = fp(function (instance, opts, done) {\n    done();\n  }, {\n    decorators: {\n      request: ['foo']\n    }\n  });\n  fastify.register(plugin).ready(err => {\n    t.type(err, Error);\n    t.match(err, /The decorator 'foo'/);\n  });\n});","file":"decorator.test.js","skipped":false,"dir":"test"},{"name":"decorateReply inside register","suites":[],"updatePoint":{"line":104,"column":35,"index":2655},"line":104,"code":"test('decorateReply inside register', t => {\n  t.plan(11);\n  const fastify = Fastify();\n  fastify.register((instance, opts, done) => {\n    instance.decorateReply('test', 'test');\n    instance.get('/yes', (req, reply) => {\n      t.ok(reply.test, 'test exists');\n      reply.send({\n        hello: 'world'\n      });\n    });\n    done();\n  });\n  fastify.get('/no', (req, reply) => {\n    t.notOk(reply.test);\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/yes'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/no'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n  });\n});","file":"decorator.test.js","skipped":false,"dir":"test"},{"name":"decorateReply as plugin (inside .after)","suites":[],"updatePoint":{"line":154,"column":45,"index":3930},"line":154,"code":"test('decorateReply as plugin (inside .after)', t => {\n  t.plan(11);\n  const fastify = Fastify();\n  fastify.register((instance, opts, done) => {\n    instance.register(fp((i, o, n) => {\n      instance.decorateReply('test', 'test');\n      n();\n    })).after(() => {\n      instance.get('/yes', (req, reply) => {\n        t.ok(reply.test);\n        reply.send({\n          hello: 'world'\n        });\n      });\n    });\n    done();\n  });\n  fastify.get('/no', (req, reply) => {\n    t.notOk(reply.test);\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/yes'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/no'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n  });\n});","file":"decorator.test.js","skipped":false,"dir":"test"},{"name":"decorateReply as plugin (outside .after)","suites":[],"updatePoint":{"line":208,"column":46,"index":5286},"line":208,"code":"test('decorateReply as plugin (outside .after)', t => {\n  t.plan(11);\n  const fastify = Fastify();\n  fastify.register((instance, opts, done) => {\n    instance.register(fp((i, o, n) => {\n      instance.decorateReply('test', 'test');\n      n();\n    }));\n    instance.get('/yes', (req, reply) => {\n      t.ok(reply.test);\n      reply.send({\n        hello: 'world'\n      });\n    });\n    done();\n  });\n  fastify.get('/no', (req, reply) => {\n    t.notOk(reply.test);\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/yes'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/no'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n  });\n});","file":"decorator.test.js","skipped":false,"dir":"test"},{"name":"decorateRequest inside register","suites":[],"updatePoint":{"line":261,"column":37,"index":6600},"line":261,"code":"test('decorateRequest inside register', t => {\n  t.plan(11);\n  const fastify = Fastify();\n  fastify.register((instance, opts, done) => {\n    instance.decorateRequest('test', 'test');\n    instance.get('/yes', (req, reply) => {\n      t.ok(req.test, 'test exists');\n      reply.send({\n        hello: 'world'\n      });\n    });\n    done();\n  });\n  fastify.get('/no', (req, reply) => {\n    t.notOk(req.test);\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/yes'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/no'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n  });\n});","file":"decorator.test.js","skipped":false,"dir":"test"},{"name":"decorateRequest as plugin (inside .after)","suites":[],"updatePoint":{"line":311,"column":47,"index":7875},"line":311,"code":"test('decorateRequest as plugin (inside .after)', t => {\n  t.plan(11);\n  const fastify = Fastify();\n  fastify.register((instance, opts, done) => {\n    instance.register(fp((i, o, n) => {\n      instance.decorateRequest('test', 'test');\n      n();\n    })).after(() => {\n      instance.get('/yes', (req, reply) => {\n        t.ok(req.test);\n        reply.send({\n          hello: 'world'\n        });\n      });\n    });\n    done();\n  });\n  fastify.get('/no', (req, reply) => {\n    t.notOk(req.test);\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/yes'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/no'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n  });\n});","file":"decorator.test.js","skipped":false,"dir":"test"},{"name":"decorateRequest as plugin (outside .after)","suites":[],"updatePoint":{"line":365,"column":48,"index":9231},"line":365,"code":"test('decorateRequest as plugin (outside .after)', t => {\n  t.plan(11);\n  const fastify = Fastify();\n  fastify.register((instance, opts, done) => {\n    instance.register(fp((i, o, n) => {\n      instance.decorateRequest('test', 'test');\n      n();\n    }));\n    instance.get('/yes', (req, reply) => {\n      t.ok(req.test);\n      reply.send({\n        hello: 'world'\n      });\n    });\n    done();\n  });\n  fastify.get('/no', (req, reply) => {\n    t.notOk(req.test);\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/yes'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/no'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n  });\n});","file":"decorator.test.js","skipped":false,"dir":"test"},{"name":"decorators should be instance separated","suites":[],"updatePoint":{"line":418,"column":45,"index":10551},"line":418,"code":"test('decorators should be instance separated', t => {\n  t.plan(1);\n  const fastify1 = Fastify();\n  const fastify2 = Fastify();\n  fastify1.decorate('test', 'foo');\n  fastify2.decorate('test', 'foo');\n  fastify1.decorateRequest('test', 'foo');\n  fastify2.decorateRequest('test', 'foo');\n  fastify1.decorateReply('test', 'foo');\n  fastify2.decorateReply('test', 'foo');\n  t.pass();\n});","file":"decorator.test.js","skipped":false,"dir":"test"},{"name":"hasRequestDecorator","suites":[],"updatePoint":{"line":430,"column":25,"index":10915},"line":430,"code":"test('hasRequestDecorator', t => {\n  const requestDecoratorName = 'my-decorator-name';\n  t.test('is a function', t => {\n    t.plan(1);\n    const fastify = Fastify();\n    t.ok(fastify.hasRequestDecorator);\n  });\n  t.test('should check if the given request decoration already exist', t => {\n    t.plan(2);\n    const fastify = Fastify();\n    t.notOk(fastify.hasRequestDecorator(requestDecoratorName));\n    fastify.decorateRequest(requestDecoratorName, 42);\n    t.ok(fastify.hasRequestDecorator(requestDecoratorName));\n  });\n  t.test('should check if the given request decoration already exist when null', t => {\n    t.plan(2);\n    const fastify = Fastify();\n    t.notOk(fastify.hasRequestDecorator(requestDecoratorName));\n    fastify.decorateRequest(requestDecoratorName, null);\n    t.ok(fastify.hasRequestDecorator(requestDecoratorName));\n  });\n  t.test('should be plugin encapsulable', t => {\n    t.plan(4);\n    const fastify = Fastify();\n    t.notOk(fastify.hasRequestDecorator(requestDecoratorName));\n    fastify.register(function (fastify2, opts, done) {\n      fastify2.decorateRequest(requestDecoratorName, 42);\n      t.ok(fastify2.hasRequestDecorator(requestDecoratorName));\n      done();\n    });\n    t.notOk(fastify.hasRequestDecorator(requestDecoratorName));\n    fastify.ready(function () {\n      t.notOk(fastify.hasRequestDecorator(requestDecoratorName));\n    });\n  });\n  t.test('should be inherited', t => {\n    t.plan(2);\n    const fastify = Fastify();\n    fastify.decorateRequest(requestDecoratorName, 42);\n    fastify.register(function (fastify2, opts, done) {\n      t.ok(fastify2.hasRequestDecorator(requestDecoratorName));\n      done();\n    });\n    fastify.ready(function () {\n      t.ok(fastify.hasRequestDecorator(requestDecoratorName));\n    });\n  });\n  t.end();\n});","file":"decorator.test.js","skipped":false,"dir":"test"},{"name":"hasReplyDecorator","suites":[],"updatePoint":{"line":479,"column":23,"index":12695},"line":479,"code":"test('hasReplyDecorator', t => {\n  const replyDecoratorName = 'my-decorator-name';\n  t.test('is a function', t => {\n    t.plan(1);\n    const fastify = Fastify();\n    t.ok(fastify.hasReplyDecorator);\n  });\n  t.test('should check if the given reply decoration already exist', t => {\n    t.plan(2);\n    const fastify = Fastify();\n    t.notOk(fastify.hasReplyDecorator(replyDecoratorName));\n    fastify.decorateReply(replyDecoratorName, 42);\n    t.ok(fastify.hasReplyDecorator(replyDecoratorName));\n  });\n  t.test('should check if the given reply decoration already exist when null', t => {\n    t.plan(2);\n    const fastify = Fastify();\n    t.notOk(fastify.hasReplyDecorator(replyDecoratorName));\n    fastify.decorateReply(replyDecoratorName, null);\n    t.ok(fastify.hasReplyDecorator(replyDecoratorName));\n  });\n  t.test('should be plugin encapsulable', t => {\n    t.plan(4);\n    const fastify = Fastify();\n    t.notOk(fastify.hasReplyDecorator(replyDecoratorName));\n    fastify.register(function (fastify2, opts, done) {\n      fastify2.decorateReply(replyDecoratorName, 42);\n      t.ok(fastify2.hasReplyDecorator(replyDecoratorName));\n      done();\n    });\n    t.notOk(fastify.hasReplyDecorator(replyDecoratorName));\n    fastify.ready(function () {\n      t.notOk(fastify.hasReplyDecorator(replyDecoratorName));\n    });\n  });\n  t.test('should be inherited', t => {\n    t.plan(2);\n    const fastify = Fastify();\n    fastify.decorateReply(replyDecoratorName, 42);\n    fastify.register(function (fastify2, opts, done) {\n      t.ok(fastify2.hasReplyDecorator(replyDecoratorName));\n      done();\n    });\n    fastify.ready(function () {\n      t.ok(fastify.hasReplyDecorator(replyDecoratorName));\n    });\n  });\n  t.end();\n});","file":"decorator.test.js","skipped":false,"dir":"test"},{"name":"should register properties via getter/setter objects","suites":[],"updatePoint":{"line":528,"column":58,"index":14446},"line":528,"code":"test('should register properties via getter/setter objects', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.register((instance, opts, done) => {\n    instance.decorate('test', {\n      getter() {\n        return 'a getter';\n      }\n\n    });\n    t.ok(instance.test);\n    t.ok(instance.test, 'a getter');\n    done();\n  });\n  fastify.ready(() => {\n    t.notOk(fastify.test);\n  });\n});","file":"decorator.test.js","skipped":false,"dir":"test"},{"name":"decorateRequest should work with getter/setter","suites":[],"updatePoint":{"line":546,"column":52,"index":14831},"line":546,"code":"test('decorateRequest should work with getter/setter', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.register((instance, opts, done) => {\n    instance.decorateRequest('test', {\n      getter() {\n        return 'a getter';\n      }\n\n    });\n    instance.get('/req-decorated-get-set', (req, res) => {\n      res.send({\n        test: req.test\n      });\n    });\n    done();\n  });\n  fastify.get('/not-decorated', (req, res) => {\n    t.notOk(req.test);\n    res.send();\n  });\n  fastify.ready(() => {\n    fastify.inject({\n      url: '/req-decorated-get-set'\n    }, (err, res) => {\n      t.error(err);\n      t.same(JSON.parse(res.payload), {\n        test: 'a getter'\n      });\n    });\n    fastify.inject({\n      url: '/not-decorated'\n    }, (err, res) => {\n      t.error(err);\n      t.pass();\n    });\n  });\n});","file":"decorator.test.js","skipped":false,"dir":"test"},{"name":"decorateReply should work with getter/setter","suites":[],"updatePoint":{"line":584,"column":50,"index":15641},"line":584,"code":"test('decorateReply should work with getter/setter', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.register((instance, opts, done) => {\n    instance.decorateReply('test', {\n      getter() {\n        return 'a getter';\n      }\n\n    });\n    instance.get('/res-decorated-get-set', (req, res) => {\n      res.send({\n        test: res.test\n      });\n    });\n    done();\n  });\n  fastify.get('/not-decorated', (req, res) => {\n    t.notOk(res.test);\n    res.send();\n  });\n  fastify.ready(() => {\n    fastify.inject({\n      url: '/res-decorated-get-set'\n    }, (err, res) => {\n      t.error(err);\n      t.same(JSON.parse(res.payload), {\n        test: 'a getter'\n      });\n    });\n    fastify.inject({\n      url: '/not-decorated'\n    }, (err, res) => {\n      t.error(err);\n      t.pass();\n    });\n  });\n});","file":"decorator.test.js","skipped":false,"dir":"test"},{"name":"should register empty values","suites":[],"updatePoint":{"line":622,"column":34,"index":16433},"line":622,"code":"test('should register empty values', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  fastify.register((instance, opts, done) => {\n    instance.decorate('test', null);\n    t.ok(Object.prototype.hasOwnProperty.call(instance, 'test'));\n    done();\n  });\n  fastify.ready(() => {\n    t.notOk(fastify.test);\n  });\n});","file":"decorator.test.js","skipped":false,"dir":"test"},{"name":"nested plugins can override things","suites":[],"updatePoint":{"line":634,"column":40,"index":16754},"line":634,"code":"test('nested plugins can override things', t => {\n  t.plan(6);\n  const fastify = Fastify();\n\n  const rootFunc = () => {};\n\n  fastify.decorate('test', rootFunc);\n  fastify.decorateRequest('test', rootFunc);\n  fastify.decorateReply('test', rootFunc);\n  fastify.register((instance, opts, done) => {\n    const func = () => {};\n\n    instance.decorate('test', func);\n    instance.decorateRequest('test', func);\n    instance.decorateReply('test', func);\n    t.equal(instance.test, func);\n    t.equal(instance[symbols.kRequest].prototype.test, func);\n    t.equal(instance[symbols.kReply].prototype.test, func);\n    done();\n  });\n  fastify.ready(() => {\n    t.equal(fastify.test, rootFunc);\n    t.equal(fastify[symbols.kRequest].prototype.test, rootFunc);\n    t.equal(fastify[symbols.kReply].prototype.test, rootFunc);\n  });\n});","file":"decorator.test.js","skipped":false,"dir":"test"},{"name":"a decorator should addSchema to all the encapsulated tree","suites":[],"updatePoint":{"line":660,"column":63,"index":17597},"line":660,"code":"test('a decorator should addSchema to all the encapsulated tree', t => {\n  t.plan(1);\n  const fastify = Fastify();\n\n  const decorator = function (instance, opts, done) {\n    instance.decorate('decoratorAddSchema', function (whereAddTheSchema) {\n      instance.addSchema({\n        $id: 'schema',\n        type: 'string'\n      });\n    });\n    done();\n  };\n\n  fastify.register(fp(decorator));\n  fastify.register(function (instance, opts, done) {\n    instance.register((subInstance, opts, done) => {\n      subInstance.decoratorAddSchema();\n      done();\n    });\n    done();\n  });\n  fastify.ready(t.error);\n});","file":"decorator.test.js","skipped":false,"dir":"test"},{"name":"after can access to a decorated instance and previous plugin decoration","suites":[],"updatePoint":{"line":684,"column":77,"index":18216},"line":684,"code":"test('after can access to a decorated instance and previous plugin decoration', t => {\n  t.plan(11);\n  const TEST_VALUE = {};\n  const OTHER_TEST_VALUE = {};\n  const NEW_TEST_VALUE = {};\n  const fastify = Fastify();\n  fastify.register(fp(function (instance, options, done) {\n    instance.decorate('test', TEST_VALUE);\n    done();\n  })).after(function (err, instance, done) {\n    t.error(err);\n    t.equal(instance.test, TEST_VALUE);\n    instance.decorate('test2', OTHER_TEST_VALUE);\n    done();\n  });\n  fastify.register(fp(function (instance, options, done) {\n    t.equal(instance.test, TEST_VALUE);\n    t.equal(instance.test2, OTHER_TEST_VALUE);\n    instance.decorate('test3', NEW_TEST_VALUE);\n    done();\n  })).after(function (err, instance, done) {\n    t.error(err);\n    t.equal(instance.test, TEST_VALUE);\n    t.equal(instance.test2, OTHER_TEST_VALUE);\n    t.equal(instance.test3, NEW_TEST_VALUE);\n    done();\n  });\n  fastify.get('/', function (req, res) {\n    t.equal(this.test, TEST_VALUE);\n    t.equal(this.test2, OTHER_TEST_VALUE);\n    res.send({});\n  });\n  fastify.inject('/').then(response => {\n    t.equal(response.statusCode, 200);\n  });\n});","file":"decorator.test.js","skipped":false,"dir":"test"},{"name":"decorate* should throw if called after ready","suites":[],"updatePoint":{"line":720,"column":50,"index":19342},"line":720,"code":"test('decorate* should throw if called after ready', async t => {\n  t.plan(6);\n  const fastify = Fastify();\n  fastify.get('/', (request, reply) => {\n    reply.send({\n      hello: 'world'\n    });\n  });\n  await fastify.listen({\n    port: 0\n  });\n\n  try {\n    fastify.decorate('test', true);\n    t.fail('should not decorate');\n  } catch (err) {\n    t.same(err.code, 'FST_ERR_DEC_AFTER_START');\n    t.same(err.message, \"The decorator 'test' has been added after start!\");\n  }\n\n  try {\n    fastify.decorateRequest('test', true);\n    t.fail('should not decorate');\n  } catch (e) {\n    t.same(e.code, 'FST_ERR_DEC_AFTER_START');\n    t.same(e.message, \"The decorator 'test' has been added after start!\");\n  }\n\n  try {\n    fastify.decorateReply('test', true);\n    t.fail('should not decorate');\n  } catch (e) {\n    t.same(e.code, 'FST_ERR_DEC_AFTER_START');\n    t.same(e.message, \"The decorator 'test' has been added after start!\");\n  }\n\n  await fastify.close();\n});","file":"decorator.test.js","skipped":false,"dir":"test"},{"name":"decorate* should emit warning if an array is passed","suites":[],"updatePoint":{"line":758,"column":57,"index":20307},"line":758,"code":"test('decorate* should emit warning if an array is passed', t => {\n  t.plan(2);\n\n  function onWarning(code, name) {\n    t.equal(name, 'test_array');\n    t.equal(code, 'FSTDEP006');\n  }\n\n  const warning = {\n    emit: onWarning\n  };\n  const decorate = proxyquire('../lib/decorate', {\n    './warnings': warning\n  });\n  const fastify = proxyquire('..', {\n    './lib/decorate.js': decorate\n  })();\n  fastify.decorateRequest('test_array', []);\n});","file":"decorator.test.js","skipped":false,"dir":"test"},{"name":"decorate* should emit warning if object type is passed","suites":[],"updatePoint":{"line":777,"column":60,"index":20752},"line":777,"code":"test('decorate* should emit warning if object type is passed', t => {\n  t.plan(2);\n\n  function onWarning(code, name) {\n    t.equal(name, 'test_object');\n    t.equal(code, 'FSTDEP006');\n  }\n\n  const warning = {\n    emit: onWarning\n  };\n  const decorate = proxyquire('../lib/decorate', {\n    './warnings': warning\n  });\n  const fastify = proxyquire('..', {\n    './lib/decorate.js': decorate\n  })();\n  fastify.decorateRequest('test_object', {\n    foo: 'bar'\n  });\n});","file":"decorator.test.js","skipped":false,"dir":"test"},{"name":"decorate* should not emit warning if object with getter/setter is passed","suites":[],"updatePoint":{"line":798,"column":78,"index":21235},"line":798,"code":"test('decorate* should not emit warning if object with getter/setter is passed', t => {\n  function onWarning(warning) {\n    t.fail('Should not call a warn');\n  }\n\n  const warning = {\n    emit: onWarning\n  };\n  const decorate = proxyquire('../lib/decorate', {\n    './warnings': warning\n  });\n  const fastify = proxyquire('..', {\n    './lib/decorate.js': decorate\n  })();\n  fastify.decorateRequest('test_getter_setter', {\n    setter(val) {\n      this._ = val;\n    },\n\n    getter() {\n      return 'a getter';\n    }\n\n  });\n  t.end('Done');\n});","file":"decorator.test.js","skipped":false,"dir":"test"},{"name":"decorate* should not emit warning if string,bool,numbers are passed","suites":[],"updatePoint":{"line":824,"column":73,"index":21770},"line":824,"code":"test('decorate* should not emit warning if string,bool,numbers are passed', t => {\n  function onWarning(warning) {\n    t.fail('Should not call a warn');\n  }\n\n  const warning = {\n    emit: onWarning\n  };\n  const decorate = proxyquire('../lib/decorate', {\n    './warnings': warning\n  });\n  const fastify = proxyquire('..', {\n    './lib/decorate.js': decorate\n  })();\n  fastify.decorateRequest('test_str', 'foo');\n  fastify.decorateRequest('test_bool', true);\n  fastify.decorateRequest('test_number', 42);\n  fastify.decorateRequest('test_null', null);\n  fastify.decorateRequest('test_undefined', undefined);\n  fastify.decorateReply('test_str', 'foo');\n  fastify.decorateReply('test_bool', true);\n  fastify.decorateReply('test_number', 42);\n  fastify.decorateReply('test_null', null);\n  fastify.decorateReply('test_undefined', undefined);\n  t.end('Done');\n});","file":"decorator.test.js","skipped":false,"dir":"test"},{"name":"Request/reply decorators should be able to access the server instance","suites":[],"updatePoint":{"line":850,"column":75,"index":22628},"line":850,"code":"test('Request/reply decorators should be able to access the server instance', async t => {\n  t.plan(6);\n\n  const server = require('..')({\n    logger: false\n  });\n\n  server.decorateRequest('assert', rootAssert);\n  server.decorateReply('assert', rootAssert);\n  server.get('/root-assert', async (req, rep) => {\n    req.assert();\n    rep.assert();\n    return 'done';\n  });\n  server.register(async instance => {\n    instance.decorateRequest('assert', nestedAssert);\n    instance.decorateReply('assert', nestedAssert);\n    instance.decorate('foo', 'bar');\n    instance.get('/nested-assert', async (req, rep) => {\n      req.assert();\n      rep.assert();\n      return 'done';\n    });\n  });\n  await server.inject({\n    method: 'GET',\n    url: '/root-assert'\n  });\n  await server.inject({\n    method: 'GET',\n    url: '/nested-assert'\n  }); // ----\n\n  function rootAssert() {\n    t.equal(this.server, server);\n  }\n\n  function nestedAssert() {\n    t.not(this.server, server);\n    t.equal(this.server.foo, 'bar');\n  }\n});","file":"decorator.test.js","skipped":false,"dir":"test"},{"name":"plugin required decorators","suites":[],"updatePoint":{"line":892,"column":32,"index":23594},"line":892,"code":"test('plugin required decorators', async t => {\n  const plugin1 = fp(async instance => {\n    instance.decorateRequest('someThing', null);\n    instance.addHook('onRequest', async (request, reply) => {\n      request.someThing = 'hello';\n    });\n  }, {\n    name: 'custom-plugin-one'\n  });\n  const plugin2 = fp(async () => {// nothing\n  }, {\n    name: 'custom-plugin-two',\n    dependencies: ['custom-plugin-one'],\n    decorators: {\n      request: ['someThing']\n    }\n  });\n  const app = Fastify();\n  app.register(plugin1);\n  app.register(plugin2);\n  await app.ready();\n});","file":"decorator.test.js","skipped":false,"dir":"test"},{"name":"decorateRequest/decorateReply empty string","suites":[],"updatePoint":{"line":914,"column":48,"index":24179},"line":914,"code":"test('decorateRequest/decorateReply empty string', t => {\n  t.plan(7);\n  const fastify = Fastify();\n  fastify.decorateRequest('test', '');\n  fastify.decorateReply('test2', '');\n  fastify.get('/yes', (req, reply) => {\n    t.equal(req.test, '');\n    t.equal(reply.test2, '');\n    reply.send({\n      hello: 'world'\n    });\n  });\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/yes'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n  });\n});","file":"decorator.test.js","skipped":false,"dir":"test"},{"name":"decorateRequest/decorateReply is undefined","suites":[],"updatePoint":{"line":947,"column":48,"index":25017},"line":947,"code":"test('decorateRequest/decorateReply is undefined', t => {\n  t.plan(7);\n  const fastify = Fastify();\n  fastify.decorateRequest('test', undefined);\n  fastify.decorateReply('test2', undefined);\n  fastify.get('/yes', (req, reply) => {\n    t.equal(req.test, undefined);\n    t.equal(reply.test2, undefined);\n    reply.send({\n      hello: 'world'\n    });\n  });\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/yes'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n  });\n});","file":"decorator.test.js","skipped":false,"dir":"test"},{"name":"decorateRequest/decorateReply is not set to a value","suites":[],"updatePoint":{"line":980,"column":57,"index":25892},"line":980,"code":"test('decorateRequest/decorateReply is not set to a value', t => {\n  t.plan(7);\n  const fastify = Fastify();\n  fastify.decorateRequest('test');\n  fastify.decorateReply('test2');\n  fastify.get('/yes', (req, reply) => {\n    t.equal(req.test, undefined);\n    t.equal(reply.test2, undefined);\n    reply.send({\n      hello: 'world'\n    });\n  });\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/yes'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n  });\n});","file":"decorator.test.js","skipped":false,"dir":"test"},{"name":"decorateRequest with dependencies","suites":[],"updatePoint":{"line":1013,"column":39,"index":26727},"line":1013,"code":"test('decorateRequest with dependencies', t => {\n  t.plan(2);\n  const app = Fastify();\n  const decorator1 = 'bar';\n  const decorator2 = 'foo';\n  app.decorate('decorator1', decorator1);\n  app.decorateRequest('decorator1', decorator1);\n\n  if (app.hasDecorator('decorator1') && app.hasRequestDecorator('decorator1')) {\n    t.doesNotThrow(() => app.decorateRequest('decorator2', decorator2, ['decorator1']));\n    t.ok(app.hasRequestDecorator('decorator2'));\n  }\n});","file":"decorator.test.js","skipped":false,"dir":"test"},{"name":"decorateRequest with dependencies (functions)","suites":[],"updatePoint":{"line":1026,"column":51,"index":27201},"line":1026,"code":"test('decorateRequest with dependencies (functions)', t => {\n  t.plan(2);\n  const app = Fastify();\n\n  const decorator1 = () => 'bar';\n\n  const decorator2 = () => 'foo';\n\n  app.decorate('decorator1', decorator1);\n  app.decorateRequest('decorator1', decorator1);\n\n  if (app.hasDecorator('decorator1') && app.hasRequestDecorator('decorator1')) {\n    t.doesNotThrow(() => app.decorateRequest('decorator2', decorator2, ['decorator1']));\n    t.ok(app.hasRequestDecorator('decorator2'));\n  }\n});","file":"decorator.test.js","skipped":false,"dir":"test"},{"name":"chain of decorators on Request","suites":[],"updatePoint":{"line":1042,"column":36,"index":27675},"line":1042,"code":"test('chain of decorators on Request', async t => {\n  const fastify = Fastify();\n  fastify.register(fp(async function (fastify) {\n    fastify.decorateRequest('foo', 'toto');\n    fastify.decorateRequest('bar', () => 'tata');\n  }, {\n    name: 'first'\n  }));\n  fastify.get('/foo', async function (request, reply) {\n    return request.foo;\n  });\n  fastify.get('/bar', function (request, reply) {\n    return request.bar();\n  });\n  fastify.register(async function second(fastify) {\n    fastify.get('/foo', async function (request, reply) {\n      return request.foo;\n    });\n    fastify.get('/bar', async function (request, reply) {\n      return request.bar();\n    });\n    fastify.register(async function fourth(fastify) {\n      fastify.get('/plugin3/foo', async function (request, reply) {\n        return request.foo;\n      });\n      fastify.get('/plugin3/bar', function (request, reply) {\n        return request.bar();\n      });\n    });\n    fastify.register(fp(async function (fastify) {\n      fastify.decorateRequest('fooB', 'toto');\n      fastify.decorateRequest('barB', () => 'tata');\n    }, {\n      name: 'third'\n    }));\n  }, {\n    prefix: '/plugin2',\n    name: 'plugin2'\n  });\n  await fastify.ready();\n  {\n    const response = await fastify.inject('/foo');\n    t.equal(response.body, 'toto');\n  }\n  {\n    const response = await fastify.inject('/bar');\n    t.equal(response.body, 'tata');\n  }\n  {\n    const response = await fastify.inject('/plugin2/foo');\n    t.equal(response.body, 'toto');\n  }\n  {\n    const response = await fastify.inject('/plugin2/bar');\n    t.equal(response.body, 'tata');\n  }\n  {\n    const response = await fastify.inject('/plugin2/plugin3/foo');\n    t.equal(response.body, 'toto');\n  }\n  {\n    const response = await fastify.inject('/plugin2/plugin3/bar');\n    t.equal(response.body, 'tata');\n  }\n});","file":"decorator.test.js","skipped":false,"dir":"test"},{"name":"chain of decorators on Reply","suites":[],"updatePoint":{"line":1107,"column":34,"index":29498},"line":1107,"code":"test('chain of decorators on Reply', async t => {\n  const fastify = Fastify();\n  fastify.register(fp(async function (fastify) {\n    fastify.decorateReply('foo', 'toto');\n    fastify.decorateReply('bar', () => 'tata');\n  }, {\n    name: 'first'\n  }));\n  fastify.get('/foo', async function (request, reply) {\n    return reply.foo;\n  });\n  fastify.get('/bar', function (request, reply) {\n    return reply.bar();\n  });\n  fastify.register(async function second(fastify) {\n    fastify.get('/foo', async function (request, reply) {\n      return reply.foo;\n    });\n    fastify.get('/bar', async function (request, reply) {\n      return reply.bar();\n    });\n    fastify.register(async function fourth(fastify) {\n      fastify.get('/plugin3/foo', async function (request, reply) {\n        return reply.foo;\n      });\n      fastify.get('/plugin3/bar', function (request, reply) {\n        return reply.bar();\n      });\n    });\n    fastify.register(fp(async function (fastify) {\n      fastify.decorateReply('fooB', 'toto');\n      fastify.decorateReply('barB', () => 'tata');\n    }, {\n      name: 'third'\n    }));\n  }, {\n    prefix: '/plugin2',\n    name: 'plugin2'\n  });\n  await fastify.ready();\n  {\n    const response = await fastify.inject('/foo');\n    t.equal(response.body, 'toto');\n  }\n  {\n    const response = await fastify.inject('/bar');\n    t.equal(response.body, 'tata');\n  }\n  {\n    const response = await fastify.inject('/plugin2/foo');\n    t.equal(response.body, 'toto');\n  }\n  {\n    const response = await fastify.inject('/plugin2/bar');\n    t.equal(response.body, 'tata');\n  }\n  {\n    const response = await fastify.inject('/plugin2/plugin3/foo');\n    t.equal(response.body, 'toto');\n  }\n  {\n    const response = await fastify.inject('/plugin2/plugin3/bar');\n    t.equal(response.body, 'tata');\n  }\n});","file":"decorator.test.js","skipped":false,"dir":"test"},{"name":"should fail if defaultRoute is not a function","suites":[],"updatePoint":{"line":9,"column":51,"index":148},"line":9,"code":"test('should fail if defaultRoute is not a function', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  const defaultRoute = {};\n  fastify.get('/', () => {});\n\n  try {\n    fastify.setDefaultRoute(defaultRoute);\n  } catch (error) {\n    t.equal(error.code, 'FST_ERR_DEFAULT_ROUTE_INVALID_TYPE');\n  }\n});","file":"default-route.test.js","skipped":false,"dir":"test"},{"name":"correctly sets, returns, and calls defaultRoute","suites":[],"updatePoint":{"line":21,"column":53,"index":453},"line":21,"code":"test('correctly sets, returns, and calls defaultRoute', t => {\n  t.plan(3);\n  const fastify = Fastify();\n\n  const defaultRoute = (req, res) => {\n    res.end('hello from defaultRoute');\n  };\n\n  fastify.setDefaultRoute(defaultRoute);\n  const returnedDefaultRoute = fastify.getDefaultRoute();\n  t.equal(returnedDefaultRoute, defaultRoute);\n  fastify.get('/', () => {});\n  fastify.inject({\n    method: 'GET',\n    url: '/random'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.body, 'hello from defaultRoute');\n  });\n});","file":"default-route.test.js","skipped":false,"dir":"test"},{"name":"shorthand - delete","suites":[],"updatePoint":{"line":86,"column":24,"index":1235},"line":86,"code":"test('shorthand - delete', t => {\n  t.plan(1);\n\n  try {\n    fastify.delete('/', schema, function (req, reply) {\n      reply.code(200).send({\n        hello: 'world'\n      });\n    });\n    t.pass();\n  } catch (e) {\n    t.fail();\n  }\n});","file":"delete.test.js","skipped":false,"dir":"test"},{"name":"shorthand - delete params","suites":[],"updatePoint":{"line":100,"column":31,"index":1476},"line":100,"code":"test('shorthand - delete params', t => {\n  t.plan(1);\n\n  try {\n    fastify.delete('/params/:foo/:test', paramsSchema, function (req, reply) {\n      reply.code(200).send(req.params);\n    });\n    t.pass();\n  } catch (e) {\n    t.fail();\n  }\n});","file":"delete.test.js","skipped":false,"dir":"test"},{"name":"shorthand - delete, querystring schema","suites":[],"updatePoint":{"line":112,"column":44,"index":1731},"line":112,"code":"test('shorthand - delete, querystring schema', t => {\n  t.plan(1);\n\n  try {\n    fastify.delete('/query', querySchema, function (req, reply) {\n      reply.send(req.query);\n    });\n    t.pass();\n  } catch (e) {\n    t.fail();\n  }\n});","file":"delete.test.js","skipped":false,"dir":"test"},{"name":"shorthand - get, headers schema","suites":[],"updatePoint":{"line":124,"column":37,"index":1955},"line":124,"code":"test('shorthand - get, headers schema', t => {\n  t.plan(1);\n\n  try {\n    fastify.delete('/headers', headersSchema, function (req, reply) {\n      reply.code(200).send(req.headers);\n    });\n    t.pass();\n  } catch (e) {\n    t.fail();\n  }\n});","file":"delete.test.js","skipped":false,"dir":"test"},{"name":"missing schema - delete","suites":[],"updatePoint":{"line":136,"column":29,"index":2187},"line":136,"code":"test('missing schema - delete', t => {\n  t.plan(1);\n\n  try {\n    fastify.delete('/missing', function (req, reply) {\n      reply.code(200).send({\n        hello: 'world'\n      });\n    });\n    t.pass();\n  } catch (e) {\n    t.fail();\n  }\n});","file":"delete.test.js","skipped":false,"dir":"test"},{"name":"body - delete","suites":[],"updatePoint":{"line":150,"column":19,"index":2415},"line":150,"code":"test('body - delete', t => {\n  t.plan(1);\n\n  try {\n    fastify.delete('/body', bodySchema, function (req, reply) {\n      reply.send(req.body);\n    });\n    t.pass();\n  } catch (e) {\n    t.fail();\n  }\n});","file":"delete.test.js","skipped":false,"dir":"test"},{"name":"shorthand - request delete","suites":[],"updatePoint":{"line":169,"column":34,"index":2736},"line":169,"code":"  test('shorthand - request delete', t => {\n    t.plan(4);\n    sget({\n      method: 'DELETE',\n      url: 'http://localhost:' + fastify.server.address().port\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n  });","file":"delete.test.js","skipped":false,"dir":"test"},{"name":"shorthand - request delete params schema","suites":[],"updatePoint":{"line":183,"column":48,"index":3151},"line":183,"code":"  test('shorthand - request delete params schema', t => {\n    t.plan(4);\n    sget({\n      method: 'DELETE',\n      url: 'http://localhost:' + fastify.server.address().port + '/params/world/123'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        foo: 'world',\n        test: 123\n      });\n    });\n  });","file":"delete.test.js","skipped":false,"dir":"test"},{"name":"shorthand - request delete params schema error","suites":[],"updatePoint":{"line":198,"column":54,"index":3611},"line":198,"code":"  test('shorthand - request delete params schema error', t => {\n    t.plan(3);\n    sget({\n      method: 'DELETE',\n      url: 'http://localhost:' + fastify.server.address().port + '/params/world/string'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 400);\n      t.same(JSON.parse(body), {\n        error: 'Bad Request',\n        message: 'params/test must be integer',\n        statusCode: 400\n      });\n    });\n  });","file":"delete.test.js","skipped":false,"dir":"test"},{"name":"shorthand - request delete headers schema","suites":[],"updatePoint":{"line":213,"column":49,"index":4062},"line":213,"code":"  test('shorthand - request delete headers schema', t => {\n    t.plan(4);\n    sget({\n      method: 'DELETE',\n      headers: {\n        'x-test': 1\n      },\n      url: 'http://localhost:' + fastify.server.address().port + '/headers'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.equal(JSON.parse(body)['x-test'], 1);\n    });\n  });","file":"delete.test.js","skipped":false,"dir":"test"},{"name":"shorthand - request delete headers schema error","suites":[],"updatePoint":{"line":228,"column":55,"index":4523},"line":228,"code":"  test('shorthand - request delete headers schema error', t => {\n    t.plan(3);\n    sget({\n      method: 'DELETE',\n      headers: {\n        'x-test': 'abc'\n      },\n      url: 'http://localhost:' + fastify.server.address().port + '/headers'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 400);\n      t.same(JSON.parse(body), {\n        error: 'Bad Request',\n        message: 'headers/x-test must be number',\n        statusCode: 400\n      });\n    });\n  });","file":"delete.test.js","skipped":false,"dir":"test"},{"name":"shorthand - request delete querystring schema","suites":[],"updatePoint":{"line":246,"column":53,"index":5018},"line":246,"code":"  test('shorthand - request delete querystring schema', t => {\n    t.plan(4);\n    sget({\n      method: 'DELETE',\n      url: 'http://localhost:' + fastify.server.address().port + '/query?hello=123'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 123\n      });\n    });\n  });","file":"delete.test.js","skipped":false,"dir":"test"},{"name":"shorthand - request delete querystring schema error","suites":[],"updatePoint":{"line":260,"column":59,"index":5461},"line":260,"code":"  test('shorthand - request delete querystring schema error', t => {\n    t.plan(3);\n    sget({\n      method: 'DELETE',\n      url: 'http://localhost:' + fastify.server.address().port + '/query?hello=world'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 400);\n      t.same(JSON.parse(body), {\n        error: 'Bad Request',\n        message: 'querystring/hello must be integer',\n        statusCode: 400\n      });\n    });\n  });","file":"delete.test.js","skipped":false,"dir":"test"},{"name":"shorthand - request delete missing schema","suites":[],"updatePoint":{"line":275,"column":49,"index":5916},"line":275,"code":"  test('shorthand - request delete missing schema', t => {\n    t.plan(4);\n    sget({\n      method: 'DELETE',\n      url: 'http://localhost:' + fastify.server.address().port + '/missing'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n  });","file":"delete.test.js","skipped":false,"dir":"test"},{"name":"shorthand - delete with body","suites":[],"updatePoint":{"line":289,"column":36,"index":6332},"line":289,"code":"  test('shorthand - delete with body', t => {\n    t.plan(3);\n    sget({\n      method: 'DELETE',\n      url: 'http://localhost:' + fastify.server.address().port + '/body',\n      body: {\n        hello: 'world'\n      },\n      json: true\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.same(body, {\n        hello: 'world'\n      });\n    });\n  });","file":"delete.test.js","skipped":false,"dir":"test"},{"name":"shorthand - delete with application/json Content-Type header and without body","suites":[],"updatePoint":{"line":308,"column":83,"index":6829},"line":308,"code":"test('shorthand - delete with application/json Content-Type header and without body', t => {\n  t.plan(4);\n\n  const fastify = require('..')();\n\n  fastify.delete('/', {}, (req, reply) => {\n    t.equal(req.body, undefined);\n    reply.send(req.body);\n  });\n  fastify.inject({\n    method: 'DELETE',\n    url: '/',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: null\n  }, (err, response) => {\n    t.error(err);\n    t.equal(response.statusCode, 200);\n    t.same(response.payload.toString(), '');\n  });\n});","file":"delete.test.js","skipped":false,"dir":"test"},{"name":"diagnostics_channel when present and subscribers","suites":[],"updatePoint":{"line":9,"column":54,"index":162},"line":9,"code":"test('diagnostics_channel when present and subscribers', t => {\n  t.plan(3);\n  let fastifyInHook;\n  const dc = {\n    channel(name) {\n      t.equal(name, 'fastify.initialization');\n      return {\n        hasSubscribers: true,\n\n        publish(event) {\n          t.ok(event.fastify);\n          fastifyInHook = event.fastify;\n        }\n\n      };\n    },\n\n    '@noCallThru': true\n  };\n  const fastify = proxyquire('../fastify', {\n    diagnostics_channel: dc\n  })();\n  t.equal(fastifyInHook, fastify);\n});","file":"diagnostics-channel.test.js","skipped":false,"dir":"test"},{"name":"diagnostics_channel when present and no subscribers","suites":[],"updatePoint":{"line":33,"column":57,"index":665},"line":33,"code":"test('diagnostics_channel when present and no subscribers', t => {\n  t.plan(1);\n  const dc = {\n    channel(name) {\n      t.equal(name, 'fastify.initialization');\n      return {\n        hasSubscribers: false,\n\n        publish() {\n          t.fail('publish should not be called');\n        }\n\n      };\n    },\n\n    '@noCallThru': true\n  };\n  proxyquire('../fastify', {\n    diagnostics_channel: dc\n  })();\n});","file":"diagnostics-channel.test.js","skipped":false,"dir":"test"},{"name":"diagnostics_channel when not present","suites":[],"updatePoint":{"line":54,"column":42,"index":1055},"line":54,"code":"test('diagnostics_channel when not present', t => {\n  t.plan(1);\n  t.doesNotThrow(() => {\n    proxyquire('../fastify', {\n      diagnostics_channel: null\n    })();\n  });\n});","file":"diagnostics-channel.test.js","skipped":false,"dir":"test"},{"name":"encapuslates an error handler","suites":[],"updatePoint":{"line":9,"column":35,"index":119},"line":9,"code":"test('encapuslates an error handler', async t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.register(async function (fastify) {\n    fastify.setErrorHandler(async function a(err) {\n      t.equal(err.message, 'kaboom');\n      throw new Error('caught');\n    });\n    fastify.get('/encapsulated', async () => {\n      throw new Error('kaboom');\n    });\n  });\n  fastify.setErrorHandler(async function b(err) {\n    t.equal(err.message, 'caught');\n    throw new Error('wrapped');\n  });\n  const res = await fastify.inject('/encapsulated');\n  t.equal(res.json().message, 'wrapped');\n});","file":"encapsulated-error-handler.test.js","skipped":false,"dir":"test"},{"name":"onError hook nested","suites":[],"updatePoint":{"line":28,"column":25,"index":696},"line":28,"code":"test('onError hook nested', async t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.register(async function (fastify) {\n    fastify.setErrorHandler(async function a(err) {\n      t.equal(err.message, 'kaboom');\n      throw new Error('caught');\n    });\n    fastify.get('/encapsulated', async () => {\n      throw new Error('kaboom');\n    });\n  });\n  fastify.setErrorHandler(async function b(err) {\n    t.equal(err.message, 'caught');\n    throw new Error('wrapped');\n  });\n  fastify.addHook('onError', async function (request, reply, err) {\n    t.equal(err.message, 'kaboom');\n  });\n  const res = await fastify.inject('/encapsulated');\n  t.equal(res.json().message, 'wrapped');\n});","file":"encapsulated-error-handler.test.js","skipped":false,"dir":"test"},{"name":"root fastify instance is an object","suites":[],"updatePoint":{"line":14,"column":40,"index":205},"line":14,"code":"test('root fastify instance is an object', t => {\n  t.plan(1);\n  t.type(Fastify(), 'object');\n});","file":"fastify-instance.test.js","skipped":false,"dir":"test"},{"name":"fastify instance should contains ajv options","suites":[],"updatePoint":{"line":18,"column":50,"index":313},"line":18,"code":"test('fastify instance should contains ajv options', t => {\n  t.plan(1);\n  const fastify = Fastify({\n    ajv: {\n      customOptions: {\n        nullable: false\n      }\n    }\n  });\n  t.same(fastify[kOptions].ajv, {\n    customOptions: {\n      nullable: false\n    },\n    plugins: []\n  });\n});","file":"fastify-instance.test.js","skipped":false,"dir":"test"},{"name":"fastify instance should contains ajv options.plugins nested arrays","suites":[],"updatePoint":{"line":34,"column":72,"index":624},"line":34,"code":"test('fastify instance should contains ajv options.plugins nested arrays', t => {\n  t.plan(1);\n  const fastify = Fastify({\n    ajv: {\n      customOptions: {\n        nullable: false\n      },\n      plugins: [[]]\n    }\n  });\n  t.same(fastify[kOptions].ajv, {\n    customOptions: {\n      nullable: false\n    },\n    plugins: [[]]\n  });\n});","file":"fastify-instance.test.js","skipped":false,"dir":"test"},{"name":"fastify instance get invalid ajv options","suites":[],"updatePoint":{"line":51,"column":46,"index":932},"line":51,"code":"test('fastify instance get invalid ajv options', t => {\n  t.plan(1);\n  t.throws(() => Fastify({\n    ajv: {\n      customOptions: 8\n    }\n  }));\n});","file":"fastify-instance.test.js","skipped":false,"dir":"test"},{"name":"fastify instance get invalid ajv options.plugins","suites":[],"updatePoint":{"line":59,"column":54,"index":1087},"line":59,"code":"test('fastify instance get invalid ajv options.plugins', t => {\n  t.plan(1);\n  t.throws(() => Fastify({\n    ajv: {\n      customOptions: {},\n      plugins: 8\n    }\n  }));\n});","file":"fastify-instance.test.js","skipped":false,"dir":"test"},{"name":"fastify instance should contain default errorHandler","suites":[],"updatePoint":{"line":68,"column":58,"index":1265},"line":68,"code":"test('fastify instance should contain default errorHandler', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  t.ok(fastify[kErrorHandler].func instanceof Function);\n  t.same(fastify.errorHandler, fastify[kErrorHandler].func);\n  t.same(Object.getOwnPropertyDescriptor(fastify, 'errorHandler').set, undefined);\n});","file":"fastify-instance.test.js","skipped":false,"dir":"test"},{"name":"errorHandler in plugin should be separate from the external one","suites":[],"updatePoint":{"line":75,"column":69,"index":1591},"line":75,"code":"test('errorHandler in plugin should be separate from the external one', async t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.register((instance, opts, done) => {\n    const inPluginErrHandler = (_, __, reply) => {\n      reply.send({\n        plugin: 'error-object'\n      });\n    };\n\n    instance.setErrorHandler(inPluginErrHandler);\n    t.notSame(instance.errorHandler, fastify.errorHandler);\n    t.equal(instance.errorHandler.name, 'bound inPluginErrHandler');\n    done();\n  });\n  await fastify.ready();\n  t.ok(fastify[kErrorHandler].func instanceof Function);\n  t.same(fastify.errorHandler, fastify[kErrorHandler].func);\n});","file":"fastify-instance.test.js","skipped":false,"dir":"test"},{"name":"use fluent-json-schema object","suites":[],"updatePoint":{"line":11,"column":35,"index":174},"line":11,"code":"test('use fluent-json-schema object', t => {\n  t.plan(15);\n  const fastify = Fastify();\n  fastify.post('/:id', {\n    handler: (req, reply) => {\n      reply.send({\n        name: 'a',\n        surname: 'b',\n        dateOfBirth: '01-01-2020'\n      });\n    },\n    schema: {\n      params: S.object().prop('id', S.integer().minimum(42)),\n      headers: S.object().prop('x-custom', S.string().format('email')),\n      query: S.object().prop('surname', S.string().required()),\n      body: S.object().prop('name', S.string().required()),\n      response: {\n        200: S.object().prop('name', S.string()).prop('surname', S.string())\n      }\n    }\n  }); // check params\n\n  fastify.inject({\n    method: 'POST',\n    url: '/1',\n    headers: {\n      'x-custom': 'me@me.me'\n    },\n    query: {\n      surname: 'bar'\n    },\n    payload: {\n      name: 'foo'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 400);\n    t.same(res.json(), {\n      statusCode: 400,\n      error: 'Bad Request',\n      message: 'params/id must be >= 42'\n    });\n  }); // check header\n\n  fastify.inject({\n    method: 'POST',\n    url: '/42',\n    headers: {\n      'x-custom': 'invalid'\n    },\n    query: {\n      surname: 'bar'\n    },\n    payload: {\n      name: 'foo'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 400);\n    t.same(res.json(), {\n      statusCode: 400,\n      error: 'Bad Request',\n      message: 'headers/x-custom must match format \"email\"'\n    });\n  }); // check query\n\n  fastify.inject({\n    method: 'POST',\n    url: '/42',\n    headers: {\n      'x-custom': 'me@me.me'\n    },\n    query: {},\n    payload: {\n      name: 'foo'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 400);\n    t.same(res.json(), {\n      statusCode: 400,\n      error: 'Bad Request',\n      message: 'querystring must have required property \\'surname\\''\n    });\n  }); // check body\n\n  fastify.inject({\n    method: 'POST',\n    url: '/42',\n    headers: {\n      'x-custom': 'me@me.me'\n    },\n    query: {\n      surname: 'bar'\n    },\n    payload: {\n      name: [1, 2, 3]\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 400);\n    t.same(res.json(), {\n      statusCode: 400,\n      error: 'Bad Request',\n      message: 'body/name must be string'\n    });\n  }); // check response\n\n  fastify.inject({\n    method: 'POST',\n    url: '/42',\n    headers: {\n      'x-custom': 'me@me.me'\n    },\n    query: {\n      surname: 'bar'\n    },\n    payload: {\n      name: 'foo'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.same(res.json(), {\n      name: 'a',\n      surname: 'b'\n    });\n  });\n});","file":"fluent-schema.test.js","skipped":false,"dir":"test"},{"name":"use complex fluent-json-schema object","suites":[],"updatePoint":{"line":140,"column":43,"index":2830},"line":140,"code":"test('use complex fluent-json-schema object', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  const addressSchema = S.object().id('#address').prop('line1').required().prop('line2').prop('country').required().prop('city').required().prop('zipcode').required();\n  const commonSchemas = S.object().id('https://fastify/demo').definition('addressSchema', addressSchema);\n  fastify.addSchema(commonSchemas);\n  const bodyJsonSchema = S.object().prop('residence', S.ref('https://fastify/demo#address')).required().prop('office', S.ref('https://fastify/demo#/definitions/addressSchema')).required();\n  fastify.post('/the/url', {\n    schema: {\n      body: bodyJsonSchema\n    }\n  }, () => {});\n  fastify.ready(err => t.error(err));\n});","file":"fluent-schema.test.js","skipped":false,"dir":"test"},{"name":"use fluent schema and plain JSON schema","suites":[],"updatePoint":{"line":154,"column":45,"index":3560},"line":154,"code":"test('use fluent schema and plain JSON schema', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  const addressSchema = S.object().id('#address').prop('line1').required().prop('line2').prop('country').required().prop('city').required().prop('zipcode').required();\n  const commonSchemas = S.object().id('https://fastify/demo').definition('addressSchema', addressSchema);\n  const sharedAddressSchema = {\n    $id: 'sharedAddress',\n    type: 'object',\n    required: ['line1', 'country', 'city', 'zipcode'],\n    properties: {\n      line1: {\n        type: 'string'\n      },\n      line2: {\n        type: 'string'\n      },\n      country: {\n        type: 'string'\n      },\n      city: {\n        type: 'string'\n      },\n      zipcode: {\n        type: 'string'\n      }\n    }\n  };\n  fastify.addSchema(commonSchemas);\n  fastify.addSchema(sharedAddressSchema);\n  const bodyJsonSchema = S.object().prop('residence', S.ref('https://fastify/demo#address')).required().prop('office', S.ref('https://fastify/demo#/definitions/addressSchema')).required();\n  fastify.post('/the/url', {\n    schema: {\n      body: bodyJsonSchema\n    }\n  }, () => {});\n  fastify.ready(err => t.error(err));\n});","file":"fluent-schema.test.js","skipped":false,"dir":"test"},{"name":"Should call valueOf internally","suites":[],"updatePoint":{"line":191,"column":36,"index":4722},"line":191,"code":"test('Should call valueOf internally', t => {\n  t.plan(1);\n  const fastify = new Fastify();\n  const addressSchema = S.object().id('#address').prop('line1').required().prop('line2').prop('country').required().prop('city').required().prop('zipcode').required();\n  const commonSchemas = S.object().id('https://fastify/demo').definition('addressSchema', addressSchema);\n  fastify.addSchema(commonSchemas);\n  fastify.route({\n    method: 'POST',\n    url: '/query',\n    handler: () => {},\n    schema: {\n      query: S.object().prop('hello', S.string()).required(),\n      body: S.object().prop('hello', S.string()).required(),\n      params: S.object().prop('hello', S.string()).required(),\n      headers: S.object().prop('hello', S.string()).required(),\n      response: {\n        200: S.object().prop('hello', S.string()).required(),\n        201: S.object().prop('hello', S.string()).required()\n      }\n    }\n  });\n  fastify.route({\n    method: 'POST',\n    url: '/querystring',\n    handler: () => {},\n    schema: {\n      querystring: S.object().prop('hello', S.string()).required(),\n      body: S.object().prop('hello', S.string()).required(),\n      params: S.object().prop('hello', S.string()).required(),\n      headers: S.object().prop('hello', S.string()).required(),\n      response: {\n        200: S.object().prop('hello', S.string()).required(),\n        201: S.object().prop('hello', S.string()).required()\n      }\n    }\n  });\n  fastify.ready(t.error);\n});","file":"fluent-schema.test.js","skipped":false,"dir":"test"},{"name":"Should accept a custom genReqId function","suites":[],"updatePoint":{"line":9,"column":46,"index":130},"line":9,"code":"test('Should accept a custom genReqId function', t => {\n  t.plan(4);\n  const fastify = Fastify({\n    genReqId: function (req) {\n      return 'a';\n    }\n  });\n  fastify.get('/', (req, reply) => {\n    t.ok(req.id);\n    reply.send({\n      id: req.id\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    fastify.inject({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port\n    }, (err, res) => {\n      t.error(err);\n      const payload = JSON.parse(res.payload);\n      t.equal(payload.id, 'a');\n      fastify.close();\n    });\n  });\n});","file":"genReqId.test.js","skipped":false,"dir":"test"},{"name":"shorthand - get","suites":[],"updatePoint":{"line":90,"column":21,"index":1275},"line":90,"code":"test('shorthand - get', t => {\n  t.plan(1);\n\n  try {\n    fastify.get('/', schema, function (req, reply) {\n      reply.code(200).send({\n        hello: 'world'\n      });\n    });\n    t.pass();\n  } catch (e) {\n    t.fail();\n  }\n});","file":"get.test.js","skipped":false,"dir":"test"},{"name":"shorthand - get (return null)","suites":[],"updatePoint":{"line":104,"column":35,"index":1517},"line":104,"code":"test('shorthand - get (return null)', t => {\n  t.plan(1);\n\n  try {\n    fastify.get('/null', nullSchema, function (req, reply) {\n      reply.code(200).send(null);\n    });\n    t.pass();\n  } catch (e) {\n    t.fail();\n  }\n});","file":"get.test.js","skipped":false,"dir":"test"},{"name":"shorthand - get params","suites":[],"updatePoint":{"line":116,"column":28,"index":1732},"line":116,"code":"test('shorthand - get params', t => {\n  t.plan(1);\n\n  try {\n    fastify.get('/params/:foo/:test', paramsSchema, function (req, reply) {\n      reply.code(200).send(req.params);\n    });\n    t.pass();\n  } catch (e) {\n    t.fail();\n  }\n});","file":"get.test.js","skipped":false,"dir":"test"},{"name":"shorthand - get, querystring schema","suites":[],"updatePoint":{"line":128,"column":41,"index":1981},"line":128,"code":"test('shorthand - get, querystring schema', t => {\n  t.plan(1);\n\n  try {\n    fastify.get('/query', querySchema, function (req, reply) {\n      reply.code(200).send(req.query);\n    });\n    t.pass();\n  } catch (e) {\n    t.fail();\n  }\n});","file":"get.test.js","skipped":false,"dir":"test"},{"name":"shorthand - get, headers schema","suites":[],"updatePoint":{"line":140,"column":37,"index":2212},"line":140,"code":"test('shorthand - get, headers schema', t => {\n  t.plan(1);\n\n  try {\n    fastify.get('/headers', headersSchema, function (req, reply) {\n      reply.code(200).send(req.headers);\n    });\n    t.pass();\n  } catch (e) {\n    t.fail();\n  }\n});","file":"get.test.js","skipped":false,"dir":"test"},{"name":"missing schema - get","suites":[],"updatePoint":{"line":152,"column":26,"index":2438},"line":152,"code":"test('missing schema - get', t => {\n  t.plan(1);\n\n  try {\n    fastify.get('/missing', function (req, reply) {\n      reply.code(200).send({\n        hello: 'world'\n      });\n    });\n    t.pass();\n  } catch (e) {\n    t.fail();\n  }\n});","file":"get.test.js","skipped":false,"dir":"test"},{"name":"custom serializer - get","suites":[],"updatePoint":{"line":166,"column":29,"index":2673},"line":166,"code":"test('custom serializer - get', t => {\n  t.plan(1);\n\n  function customSerializer(data) {\n    return JSON.stringify(data);\n  }\n\n  try {\n    fastify.get('/custom-serializer', numberSchema, function (req, reply) {\n      reply.code(200).serializer(customSerializer).send({\n        hello: 'world'\n      });\n    });\n    t.pass();\n  } catch (e) {\n    t.fail();\n  }\n});","file":"get.test.js","skipped":false,"dir":"test"},{"name":"empty response","suites":[],"updatePoint":{"line":184,"column":20,"index":3026},"line":184,"code":"test('empty response', t => {\n  t.plan(1);\n\n  try {\n    fastify.get('/empty', function (req, reply) {\n      reply.code(200).send();\n    });\n    t.pass();\n  } catch (e) {\n    t.fail();\n  }\n});","file":"get.test.js","skipped":false,"dir":"test"},{"name":"send a falsy boolean","suites":[],"updatePoint":{"line":196,"column":26,"index":3224},"line":196,"code":"test('send a falsy boolean', t => {\n  t.plan(1);\n\n  try {\n    fastify.get('/boolean', function (req, reply) {\n      reply.code(200).send(false);\n    });\n    t.pass();\n  } catch (e) {\n    t.fail();\n  }\n});","file":"get.test.js","skipped":false,"dir":"test"},{"name":"shorthand - request get","suites":[],"updatePoint":{"line":215,"column":31,"index":3537},"line":215,"code":"  test('shorthand - request get', t => {\n    t.plan(4);\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n  });","file":"get.test.js","skipped":false,"dir":"test"},{"name":"shorthand - request get params schema","suites":[],"updatePoint":{"line":229,"column":45,"index":3946},"line":229,"code":"  test('shorthand - request get params schema', t => {\n    t.plan(4);\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/params/world/123'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        foo: 'world',\n        test: 123\n      });\n    });\n  });","file":"get.test.js","skipped":false,"dir":"test"},{"name":"shorthand - request get params schema error","suites":[],"updatePoint":{"line":244,"column":51,"index":4400},"line":244,"code":"  test('shorthand - request get params schema error', t => {\n    t.plan(3);\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/params/world/string'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 400);\n      t.same(JSON.parse(body), {\n        error: 'Bad Request',\n        message: 'params/test must be integer',\n        statusCode: 400\n      });\n    });\n  });","file":"get.test.js","skipped":false,"dir":"test"},{"name":"shorthand - request get headers schema","suites":[],"updatePoint":{"line":259,"column":46,"index":4845},"line":259,"code":"  test('shorthand - request get headers schema', t => {\n    t.plan(4);\n    sget({\n      method: 'GET',\n      headers: {\n        'x-test': '1',\n        'Y-Test': '3'\n      },\n      json: true,\n      url: 'http://localhost:' + fastify.server.address().port + '/headers'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(body['x-test'], 1);\n      t.equal(body['y-test'], 3);\n    });\n  });","file":"get.test.js","skipped":false,"dir":"test"},{"name":"shorthand - request get headers schema error","suites":[],"updatePoint":{"line":276,"column":52,"index":5296},"line":276,"code":"  test('shorthand - request get headers schema error', t => {\n    t.plan(3);\n    sget({\n      method: 'GET',\n      headers: {\n        'x-test': 'abc'\n      },\n      url: 'http://localhost:' + fastify.server.address().port + '/headers'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 400);\n      t.same(JSON.parse(body), {\n        error: 'Bad Request',\n        message: 'headers/x-test must be number',\n        statusCode: 400\n      });\n    });\n  });","file":"get.test.js","skipped":false,"dir":"test"},{"name":"shorthand - request get querystring schema","suites":[],"updatePoint":{"line":294,"column":50,"index":5785},"line":294,"code":"  test('shorthand - request get querystring schema', t => {\n    t.plan(4);\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/query?hello=123'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 123\n      });\n    });\n  });","file":"get.test.js","skipped":false,"dir":"test"},{"name":"shorthand - request get querystring schema error","suites":[],"updatePoint":{"line":308,"column":56,"index":6222},"line":308,"code":"  test('shorthand - request get querystring schema error', t => {\n    t.plan(3);\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/query?hello=world'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 400);\n      t.same(JSON.parse(body), {\n        error: 'Bad Request',\n        message: 'querystring/hello must be integer',\n        statusCode: 400\n      });\n    });\n  });","file":"get.test.js","skipped":false,"dir":"test"},{"name":"shorthand - request get missing schema","suites":[],"updatePoint":{"line":323,"column":46,"index":6671},"line":323,"code":"  test('shorthand - request get missing schema', t => {\n    t.plan(4);\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/missing'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n  });","file":"get.test.js","skipped":false,"dir":"test"},{"name":"shorthand - custom serializer","suites":[],"updatePoint":{"line":337,"column":37,"index":7085},"line":337,"code":"  test('shorthand - custom serializer', t => {\n    t.plan(4);\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/custom-serializer'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n  });","file":"get.test.js","skipped":false,"dir":"test"},{"name":"shorthand - empty response","suites":[],"updatePoint":{"line":351,"column":34,"index":7506},"line":351,"code":"  test('shorthand - empty response', t => {\n    t.plan(4);\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/empty'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '0');\n      t.same(body.toString(), '');\n    });\n  });","file":"get.test.js","skipped":false,"dir":"test"},{"name":"shorthand - send a falsy boolean","suites":[],"updatePoint":{"line":363,"column":40,"index":7877},"line":363,"code":"  test('shorthand - send a falsy boolean', t => {\n    t.plan(3);\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/boolean'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.same(body.toString(), 'false');\n    });\n  });","file":"get.test.js","skipped":false,"dir":"test"},{"name":"shorthand - send null value","suites":[],"updatePoint":{"line":374,"column":35,"index":8194},"line":374,"code":"  test('shorthand - send null value', t => {\n    t.plan(3);\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/null'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.same(body.toString(), 'null');\n    });\n  });","file":"get.test.js","skipped":false,"dir":"test"},{"name":"handlers receive correct `this` context","suites":[],"updatePoint":{"line":11,"column":45,"index":185},"line":11,"code":"test('handlers receive correct `this` context', async t => {\n  t.plan(4); // simulate plugin that uses fastify-plugin\n\n  const plugin = function (instance, opts, done) {\n    instance.decorate('foo', 'foo');\n    done();\n  };\n\n  plugin[Symbol.for('skip-override')] = true;\n  const instance = fastify();\n  instance.register(plugin);\n  instance.get('/', function (req, reply) {\n    t.ok(this.foo);\n    t.equal(this.foo, 'foo');\n    reply.send();\n  });\n  await instance.inject('/');\n  t.ok(instance.foo);\n  t.equal(instance.foo, 'foo');\n});","file":"handler-context.test.js","skipped":false,"dir":"test"},{"name":"handlers have access to the internal context","suites":[],"updatePoint":{"line":31,"column":50,"index":726},"line":31,"code":"test('handlers have access to the internal context', async t => {\n  t.plan(5);\n  const instance = fastify();\n  instance.get('/', {\n    config: {\n      foo: 'bar'\n    }\n  }, function (req, reply) {\n    t.ok(reply[kRouteContext]);\n    t.ok(reply[kRouteContext].config);\n    t.type(reply[kRouteContext].config, Object);\n    t.ok(reply[kRouteContext].config.foo);\n    t.equal(reply[kRouteContext].config.foo, 'bar');\n    reply.send();\n  });\n  await instance.inject('/');\n});","file":"handler-context.test.js","skipped":false,"dir":"test"},{"name":"hasRoute","suites":[],"updatePoint":{"line":9,"column":14,"index":119},"line":9,"code":"test('hasRoute', t => {\n  t.plan(4);\n  const test = t.test;\n  const fastify = Fastify();\n  test('hasRoute - invalid options', t => {\n    t.plan(3);\n    t.equal(fastify.hasRoute({}), false);\n    t.equal(fastify.hasRoute({\n      method: 'GET'\n    }), false);\n    t.equal(fastify.hasRoute({\n      constraints: []\n    }), false);\n  });\n  test('hasRoute - primitive method', t => {\n    t.plan(2);\n    fastify.route({\n      method: 'GET',\n      url: '/',\n      handler: function (req, reply) {\n        reply.send({\n          hello: 'world'\n        });\n      }\n    });\n    t.equal(fastify.hasRoute({\n      method: 'GET',\n      url: '/'\n    }), true);\n    t.equal(fastify.hasRoute({\n      method: 'POST',\n      url: '/'\n    }), false);\n  });\n  test('hasRoute - with constraints', t => {\n    t.plan(2);\n    fastify.route({\n      method: 'GET',\n      url: '/',\n      constraints: {\n        version: '1.2.0'\n      },\n      handler: (req, reply) => {\n        reply.send({\n          hello: 'world'\n        });\n      }\n    });\n    t.equal(fastify.hasRoute({\n      method: 'GET',\n      url: '/',\n      constraints: {\n        version: '1.2.0'\n      }\n    }), true);\n    t.equal(fastify.hasRoute({\n      method: 'GET',\n      url: '/',\n      constraints: {\n        version: '1.3.0'\n      }\n    }), false);\n  });\n  test('hasRoute - parametric route regexp with constraints', t => {\n    t.plan(1); // parametric with regexp\n\n    fastify.get('/example/:file(^\\\\d+).png', function (request, reply) {});\n    t.equal(fastify.hasRoute({\n      method: 'GET',\n      url: '/example/12345.png'\n    }), true);\n  });\n});","file":"has-route.test.js","skipped":false,"dir":"test"},{"name":"hasRoute - invalid options","suites":[],"updatePoint":{"line":13,"column":34,"index":228},"line":13,"code":"  test('hasRoute - invalid options', t => {\n    t.plan(3);\n    t.equal(fastify.hasRoute({}), false);\n    t.equal(fastify.hasRoute({\n      method: 'GET'\n    }), false);\n    t.equal(fastify.hasRoute({\n      constraints: []\n    }), false);\n  });","file":"has-route.test.js","skipped":false,"dir":"test"},{"name":"hasRoute - primitive method","suites":[],"updatePoint":{"line":23,"column":35,"index":472},"line":23,"code":"  test('hasRoute - primitive method', t => {\n    t.plan(2);\n    fastify.route({\n      method: 'GET',\n      url: '/',\n      handler: function (req, reply) {\n        reply.send({\n          hello: 'world'\n        });\n      }\n    });\n    t.equal(fastify.hasRoute({\n      method: 'GET',\n      url: '/'\n    }), true);\n    t.equal(fastify.hasRoute({\n      method: 'POST',\n      url: '/'\n    }), false);\n  });","file":"has-route.test.js","skipped":false,"dir":"test"},{"name":"hasRoute - with constraints","suites":[],"updatePoint":{"line":43,"column":35,"index":874},"line":43,"code":"  test('hasRoute - with constraints', t => {\n    t.plan(2);\n    fastify.route({\n      method: 'GET',\n      url: '/',\n      constraints: {\n        version: '1.2.0'\n      },\n      handler: (req, reply) => {\n        reply.send({\n          hello: 'world'\n        });\n      }\n    });\n    t.equal(fastify.hasRoute({\n      method: 'GET',\n      url: '/',\n      constraints: {\n        version: '1.2.0'\n      }\n    }), true);\n    t.equal(fastify.hasRoute({\n      method: 'GET',\n      url: '/',\n      constraints: {\n        version: '1.3.0'\n      }\n    }), false);\n  });","file":"has-route.test.js","skipped":false,"dir":"test"},{"name":"hasRoute - parametric route regexp with constraints","suites":[],"updatePoint":{"line":72,"column":59,"index":1458},"line":72,"code":"  test('hasRoute - parametric route regexp with constraints', t => {\n    t.plan(1); // parametric with regexp\n\n    fastify.get('/example/:file(^\\\\d+).png', function (request, reply) {});\n    t.equal(fastify.hasRoute({\n      method: 'GET',\n      url: '/example/12345.png'\n    }), true);\n  });","file":"has-route.test.js","skipped":false,"dir":"test"},{"name":"shorthand - head","suites":[],"updatePoint":{"line":47,"column":22,"index":651},"line":47,"code":"test('shorthand - head', t => {\n  t.plan(1);\n\n  try {\n    fastify.head('/', schema, function (req, reply) {\n      reply.code(200).send(null);\n    });\n    t.pass();\n  } catch (e) {\n    t.fail();\n  }\n});","file":"head.test.js","skipped":false,"dir":"test"},{"name":"shorthand - head params","suites":[],"updatePoint":{"line":59,"column":29,"index":860},"line":59,"code":"test('shorthand - head params', t => {\n  t.plan(1);\n\n  try {\n    fastify.head('/params/:foo/:test', paramsSchema, function (req, reply) {\n      reply.send(null);\n    });\n    t.pass();\n  } catch (e) {\n    t.fail();\n  }\n});","file":"head.test.js","skipped":false,"dir":"test"},{"name":"shorthand - head, querystring schema","suites":[],"updatePoint":{"line":71,"column":42,"index":1095},"line":71,"code":"test('shorthand - head, querystring schema', t => {\n  t.plan(1);\n\n  try {\n    fastify.head('/query', querySchema, function (req, reply) {\n      reply.code(200).send(null);\n    });\n    t.pass();\n  } catch (e) {\n    t.fail();\n  }\n});","file":"head.test.js","skipped":false,"dir":"test"},{"name":"missing schema - head","suites":[],"updatePoint":{"line":83,"column":27,"index":1312},"line":83,"code":"test('missing schema - head', t => {\n  t.plan(1);\n\n  try {\n    fastify.head('/missing', function (req, reply) {\n      reply.code(200).send(null);\n    });\n    t.pass();\n  } catch (e) {\n    t.fail();\n  }\n});","file":"head.test.js","skipped":false,"dir":"test"},{"name":"shorthand - request head","suites":[],"updatePoint":{"line":102,"column":32,"index":1626},"line":102,"code":"  test('shorthand - request head', t => {\n    t.plan(2);\n    sget({\n      method: 'HEAD',\n      url: 'http://localhost:' + fastify.server.address().port\n    }, (err, response) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n    });\n  });","file":"head.test.js","skipped":false,"dir":"test"},{"name":"shorthand - request head params schema","suites":[],"updatePoint":{"line":112,"column":46,"index":1896},"line":112,"code":"  test('shorthand - request head params schema', t => {\n    t.plan(2);\n    sget({\n      method: 'HEAD',\n      url: 'http://localhost:' + fastify.server.address().port + '/params/world/123'\n    }, (err, response) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n    });\n  });","file":"head.test.js","skipped":false,"dir":"test"},{"name":"shorthand - request head params schema error","suites":[],"updatePoint":{"line":122,"column":52,"index":2194},"line":122,"code":"  test('shorthand - request head params schema error', t => {\n    t.plan(2);\n    sget({\n      method: 'HEAD',\n      url: 'http://localhost:' + fastify.server.address().port + '/params/world/string'\n    }, (err, response) => {\n      t.error(err);\n      t.equal(response.statusCode, 400);\n    });\n  });","file":"head.test.js","skipped":false,"dir":"test"},{"name":"shorthand - request head querystring schema","suites":[],"updatePoint":{"line":132,"column":51,"index":2494},"line":132,"code":"  test('shorthand - request head querystring schema', t => {\n    t.plan(2);\n    sget({\n      method: 'HEAD',\n      url: 'http://localhost:' + fastify.server.address().port + '/query?hello=123'\n    }, (err, response) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n    });\n  });","file":"head.test.js","skipped":false,"dir":"test"},{"name":"shorthand - request head querystring schema error","suites":[],"updatePoint":{"line":142,"column":57,"index":2796},"line":142,"code":"  test('shorthand - request head querystring schema error', t => {\n    t.plan(2);\n    sget({\n      method: 'HEAD',\n      url: 'http://localhost:' + fastify.server.address().port + '/query?hello=world'\n    }, (err, response) => {\n      t.error(err);\n      t.equal(response.statusCode, 400);\n    });\n  });","file":"head.test.js","skipped":false,"dir":"test"},{"name":"shorthand - request head missing schema","suites":[],"updatePoint":{"line":152,"column":47,"index":3090},"line":152,"code":"  test('shorthand - request head missing schema', t => {\n    t.plan(2);\n    sget({\n      method: 'HEAD',\n      url: 'http://localhost:' + fastify.server.address().port + '/missing'\n    }, (err, response) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n    });\n  });","file":"head.test.js","skipped":false,"dir":"test"},{"name":"async hooks","suites":[],"updatePoint":{"line":20,"column":17,"index":345},"line":20,"code":"test('async hooks', t => {\n  t.plan(21);\n  const fastify = Fastify({\n    exposeHeadRoutes: false\n  });\n  fastify.addHook('onRequest', async function (request, reply) {\n    await sleep(1);\n    request.test = 'the request is coming';\n    reply.test = 'the reply has come';\n\n    if (request.raw.method === 'DELETE') {\n      throw new Error('some error');\n    }\n  });\n  fastify.addHook('preHandler', async function (request, reply) {\n    await sleep(1);\n    t.equal(request.test, 'the request is coming');\n    t.equal(reply.test, 'the reply has come');\n\n    if (request.raw.method === 'HEAD') {\n      throw new Error('some error');\n    }\n  });\n  fastify.addHook('onSend', async function (request, reply, payload) {\n    await sleep(1);\n    t.ok('onSend called');\n  });\n  fastify.addHook('onResponse', async function (request, reply) {\n    await sleep(1);\n    t.ok('onResponse called');\n  });\n  fastify.get('/', function (request, reply) {\n    t.equal(request.test, 'the request is coming');\n    t.equal(reply.test, 'the reply has come');\n    reply.code(200).send({\n      hello: 'world'\n    });\n  });\n  fastify.head('/', function (req, reply) {\n    reply.code(200).send({\n      hello: 'world'\n    });\n  });\n  fastify.delete('/', function (req, reply) {\n    reply.code(200).send({\n      hello: 'world'\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n    sget({\n      method: 'HEAD',\n      url: 'http://localhost:' + fastify.server.address().port\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 500);\n    });\n    sget({\n      method: 'DELETE',\n      url: 'http://localhost:' + fastify.server.address().port\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 500);\n    });\n  });\n});","file":"hooks-async.test.js","skipped":false,"dir":"test"},{"name":"modify payload","suites":[],"updatePoint":{"line":102,"column":20,"index":2517},"line":102,"code":"test('modify payload', t => {\n  t.plan(10);\n  const fastify = Fastify();\n  const payload = {\n    hello: 'world'\n  };\n  const modifiedPayload = {\n    hello: 'modified'\n  };\n  const anotherPayload = '\"winter is coming\"';\n  fastify.addHook('onSend', async function (request, reply, thePayload) {\n    t.ok('onSend called');\n    t.same(JSON.parse(thePayload), payload);\n    return thePayload.replace('world', 'modified');\n  });\n  fastify.addHook('onSend', async function (request, reply, thePayload) {\n    t.ok('onSend called');\n    t.same(JSON.parse(thePayload), modifiedPayload);\n    return anotherPayload;\n  });\n  fastify.addHook('onSend', async function (request, reply, thePayload) {\n    t.ok('onSend called');\n    t.equal(thePayload, anotherPayload);\n  });\n  fastify.get('/', (req, reply) => {\n    reply.send(payload);\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.payload, anotherPayload);\n    t.equal(res.statusCode, 200);\n    t.equal(res.headers['content-length'], '18');\n  });\n});","file":"hooks-async.test.js","skipped":false,"dir":"test"},{"name":"onRequest hooks should be able to block a request","suites":[],"updatePoint":{"line":139,"column":55,"index":3604},"line":139,"code":"test('onRequest hooks should be able to block a request', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.addHook('onRequest', async (req, reply) => {\n    await reply.send('hello');\n  });\n  fastify.addHook('onRequest', async (req, reply) => {\n    t.fail('this should not be called');\n  });\n  fastify.addHook('preHandler', async (req, reply) => {\n    t.fail('this should not be called');\n  });\n  fastify.addHook('onSend', async (req, reply, payload) => {\n    t.ok('called');\n  });\n  fastify.addHook('onResponse', async (request, reply) => {\n    t.ok('called');\n  });\n  fastify.get('/', function (request, reply) {\n    t.fail('we should not be here');\n  });\n  fastify.inject({\n    url: '/',\n    method: 'GET'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.equal(res.payload, 'hello');\n  });\n});","file":"hooks-async.test.js","skipped":false,"dir":"test"},{"name":"preParsing hooks should be able to modify the payload","suites":[],"updatePoint":{"line":169,"column":59,"index":4444},"line":169,"code":"test('preParsing hooks should be able to modify the payload', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.addHook('preParsing', async (req, reply, payload) => {\n    const stream = new Readable();\n    stream.receivedEncodedLength = parseInt(req.headers['content-length'], 10);\n    stream.push(JSON.stringify({\n      hello: 'another world'\n    }));\n    stream.push(null);\n    return stream;\n  });\n  fastify.post('/', function (request, reply) {\n    reply.send(request.body);\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/',\n    payload: {\n      hello: 'world'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.same(JSON.parse(res.payload), {\n      hello: 'another world'\n    });\n  });\n});","file":"hooks-async.test.js","skipped":false,"dir":"test"},{"name":"preParsing hooks should handle errors","suites":[],"updatePoint":{"line":198,"column":43,"index":5175},"line":198,"code":"test('preParsing hooks should handle errors', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.addHook('preParsing', async (req, reply, payload) => {\n    const e = new Error('kaboom');\n    e.statusCode = 501;\n    throw e;\n  });\n  fastify.post('/', function (request, reply) {\n    reply.send(request.body);\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/',\n    payload: {\n      hello: 'world'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 501);\n    t.same(JSON.parse(res.payload), {\n      error: 'Not Implemented',\n      message: 'kaboom',\n      statusCode: 501\n    });\n  });\n});","file":"hooks-async.test.js","skipped":false,"dir":"test"},{"name":"preHandler hooks should be able to block a request","suites":[],"updatePoint":{"line":225,"column":56,"index":5813},"line":225,"code":"test('preHandler hooks should be able to block a request', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.addHook('preHandler', async (req, reply) => {\n    await reply.send('hello');\n  });\n  fastify.addHook('preHandler', async (req, reply) => {\n    t.fail('this should not be called');\n  });\n  fastify.addHook('onSend', async (req, reply, payload) => {\n    t.equal(payload, 'hello');\n  });\n  fastify.addHook('onResponse', async (request, reply) => {\n    t.ok('called');\n  });\n  fastify.get('/', function (request, reply) {\n    t.fail('we should not be here');\n  });\n  fastify.inject({\n    url: '/',\n    method: 'GET'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.equal(res.payload, 'hello');\n  });\n});","file":"hooks-async.test.js","skipped":false,"dir":"test"},{"name":"preValidation hooks should be able to block a request","suites":[],"updatePoint":{"line":252,"column":59,"index":6563},"line":252,"code":"test('preValidation hooks should be able to block a request', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.addHook('preValidation', async (req, reply) => {\n    await reply.send('hello');\n  });\n  fastify.addHook('preValidation', async (req, reply) => {\n    t.fail('this should not be called');\n  });\n  fastify.addHook('onSend', async (req, reply, payload) => {\n    t.equal(payload, 'hello');\n  });\n  fastify.addHook('onResponse', async (request, reply) => {\n    t.ok('called');\n  });\n  fastify.get('/', function (request, reply) {\n    t.fail('we should not be here');\n  });\n  fastify.inject({\n    url: '/',\n    method: 'GET'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.equal(res.payload, 'hello');\n  });\n});","file":"hooks-async.test.js","skipped":false,"dir":"test"},{"name":"preValidation hooks should be able to change request body before validation","suites":[],"updatePoint":{"line":279,"column":81,"index":7341},"line":279,"code":"test('preValidation hooks should be able to change request body before validation', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.addHook('preValidation', async (req, _reply) => {\n    const buff = Buffer.from(req.body.message, 'base64');\n    req.body = JSON.parse(buff.toString('utf-8'));\n  });\n  fastify.post('/', {\n    schema: {\n      body: {\n        type: 'object',\n        properties: {\n          foo: {\n            type: 'string'\n          },\n          bar: {\n            type: 'number'\n          }\n        },\n        required: ['foo', 'bar']\n      }\n    }\n  }, (req, reply) => {\n    t.pass();\n    reply.status(200).send('hello');\n  });\n  fastify.inject({\n    url: '/',\n    method: 'POST',\n    payload: {\n      message: Buffer.from(JSON.stringify({\n        foo: 'example',\n        bar: 1\n      })).toString('base64')\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.equal(res.payload, 'hello');\n  });\n});","file":"hooks-async.test.js","skipped":false,"dir":"test"},{"name":"preSerialization hooks should be able to modify the payload","suites":[],"updatePoint":{"line":320,"column":65,"index":8284},"line":320,"code":"test('preSerialization hooks should be able to modify the payload', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.addHook('preSerialization', async (req, reply, payload) => {\n    return {\n      hello: 'another world'\n    };\n  });\n  fastify.get('/', function (request, reply) {\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.inject({\n    url: '/',\n    method: 'GET'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.same(JSON.parse(res.payload), {\n      hello: 'another world'\n    });\n  });\n});","file":"hooks-async.test.js","skipped":false,"dir":"test"},{"name":"preSerialization hooks should handle errors","suites":[],"updatePoint":{"line":344,"column":49,"index":8819},"line":344,"code":"test('preSerialization hooks should handle errors', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.addHook('preSerialization', async (req, reply, payload) => {\n    throw new Error('kaboom');\n  });\n  fastify.get('/', function (request, reply) {\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.inject({\n    url: '/',\n    method: 'GET'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 500);\n    t.same(JSON.parse(res.payload), {\n      error: 'Internal Server Error',\n      message: 'kaboom',\n      statusCode: 500\n    });\n  });\n});","file":"hooks-async.test.js","skipped":false,"dir":"test"},{"name":"preValidation hooks should handle throwing null","suites":[],"updatePoint":{"line":368,"column":53,"index":9396},"line":368,"code":"test('preValidation hooks should handle throwing null', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.setErrorHandler(async (error, request, reply) => {\n    t.ok(error instanceof Error);\n    await reply.send(error);\n  });\n  fastify.addHook('preValidation', async () => {\n    // eslint-disable-next-line no-throw-literal\n    throw null;\n  });\n  fastify.get('/', function (request, reply) {\n    t.fail('the handler must not be called');\n  });\n  fastify.inject({\n    url: '/',\n    method: 'GET'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 500);\n    t.same(res.json(), {\n      error: 'Internal Server Error',\n      code: 'FST_ERR_SEND_UNDEFINED_ERR',\n      message: 'Undefined error has occurred',\n      statusCode: 500\n    });\n  });\n});","file":"hooks-async.test.js","skipped":false,"dir":"test"},{"name":"preValidation hooks should handle throwing a string","suites":[],"updatePoint":{"line":396,"column":57,"index":10170},"line":396,"code":"test('preValidation hooks should handle throwing a string', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.addHook('preValidation', async () => {\n    // eslint-disable-next-line no-throw-literal\n    throw 'this is an error';\n  });\n  fastify.get('/', function (request, reply) {\n    t.fail('the handler must not be called');\n  });\n  fastify.inject({\n    url: '/',\n    method: 'GET'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 500);\n    t.equal(res.payload, 'this is an error');\n  });\n});","file":"hooks-async.test.js","skipped":false,"dir":"test"},{"name":"onRequest hooks should be able to block a request (last hook)","suites":[],"updatePoint":{"line":415,"column":67,"index":10702},"line":415,"code":"test('onRequest hooks should be able to block a request (last hook)', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.addHook('onRequest', async (req, reply) => {\n    await reply.send('hello');\n  });\n  fastify.addHook('preHandler', async (req, reply) => {\n    t.fail('this should not be called');\n  });\n  fastify.addHook('onSend', async (req, reply, payload) => {\n    t.ok('called');\n  });\n  fastify.addHook('onResponse', async (request, reply) => {\n    t.ok('called');\n  });\n  fastify.get('/', function (request, reply) {\n    t.fail('we should not be here');\n  });\n  fastify.inject({\n    url: '/',\n    method: 'GET'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.equal(res.payload, 'hello');\n  });\n});","file":"hooks-async.test.js","skipped":false,"dir":"test"},{"name":"preHandler hooks should be able to block a request (last hook)","suites":[],"updatePoint":{"line":442,"column":68,"index":11449},"line":442,"code":"test('preHandler hooks should be able to block a request (last hook)', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.addHook('preHandler', async (req, reply) => {\n    await reply.send('hello');\n  });\n  fastify.addHook('onSend', async (req, reply, payload) => {\n    t.equal(payload, 'hello');\n  });\n  fastify.addHook('onResponse', async (request, reply) => {\n    t.ok('called');\n  });\n  fastify.get('/', function (request, reply) {\n    t.fail('we should not be here');\n  });\n  fastify.inject({\n    url: '/',\n    method: 'GET'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.equal(res.payload, 'hello');\n  });\n});","file":"hooks-async.test.js","skipped":false,"dir":"test"},{"name":"onRequest respond with a stream","suites":[],"updatePoint":{"line":466,"column":37,"index":12074},"line":466,"code":"test('onRequest respond with a stream', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.addHook('onRequest', async (req, reply) => {\n    return new Promise((resolve, reject) => {\n      const stream = fs.createReadStream(process.cwd() + '/test/stream.test.js', 'utf8'); // stream.pipe(res)\n      // res.once('finish', resolve)\n\n      reply.send(stream).then(() => {\n        reply.raw.once('finish', () => resolve());\n      });\n    });\n  });\n  fastify.addHook('onRequest', async (req, res) => {\n    t.fail('this should not be called');\n  });\n  fastify.addHook('preHandler', async (req, reply) => {\n    t.fail('this should not be called');\n  });\n  fastify.addHook('onSend', async (req, reply, payload) => {\n    t.ok('called');\n  });\n  fastify.addHook('onResponse', async (request, reply) => {\n    t.ok('called');\n  });\n  fastify.get('/', function (request, reply) {\n    t.fail('we should not be here');\n  });\n  fastify.inject({\n    url: '/',\n    method: 'GET'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n  });\n});","file":"hooks-async.test.js","skipped":false,"dir":"test"},{"name":"preHandler respond with a stream","suites":[],"updatePoint":{"line":502,"column":38,"index":13126},"line":502,"code":"test('preHandler respond with a stream', t => {\n  t.plan(7);\n  const fastify = Fastify();\n  fastify.addHook('onRequest', async (req, res) => {\n    t.ok('called');\n  }); // we are calling `reply.send` inside the `preHandler` hook with a stream,\n  // this triggers the `onSend` hook event if `preHandler` has not yet finished\n\n  const order = [1, 2];\n  fastify.addHook('preHandler', async (req, reply) => {\n    const stream = fs.createReadStream(process.cwd() + '/test/stream.test.js', 'utf8');\n    reply.raw.once('finish', () => {\n      t.equal(order.shift(), 2);\n    });\n    return reply.send(stream);\n  });\n  fastify.addHook('preHandler', async (req, reply) => {\n    t.fail('this should not be called');\n  });\n  fastify.addHook('onSend', async (req, reply, payload) => {\n    t.equal(order.shift(), 1);\n    t.equal(typeof payload.pipe, 'function');\n  });\n  fastify.addHook('onResponse', async (request, reply) => {\n    t.ok('called');\n  });\n  fastify.get('/', function (request, reply) {\n    t.fail('we should not be here');\n  });\n  fastify.inject({\n    url: '/',\n    method: 'GET'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n  });\n});","file":"hooks-async.test.js","skipped":false,"dir":"test"},{"name":"Should log a warning if is an async function with `done`","suites":[],"updatePoint":{"line":539,"column":62,"index":14315},"line":539,"code":"test('Should log a warning if is an async function with `done`', t => {\n  t.test('3 arguments', t => {\n    t.plan(1);\n    const fastify = Fastify();\n\n    try {\n      fastify.addHook('onRequest', async (req, reply, done) => {});\n    } catch (e) {\n      t.ok(e.message === 'Async function has too many arguments. Async hooks should not use the \\'done\\' argument.');\n    }\n  });\n  t.test('4 arguments', t => {\n    t.plan(3);\n    const fastify = Fastify();\n\n    try {\n      fastify.addHook('onSend', async (req, reply, payload, done) => {});\n    } catch (e) {\n      t.ok(e.message === 'Async function has too many arguments. Async hooks should not use the \\'done\\' argument.');\n    }\n\n    try {\n      fastify.addHook('preSerialization', async (req, reply, payload, done) => {});\n    } catch (e) {\n      t.ok(e.message === 'Async function has too many arguments. Async hooks should not use the \\'done\\' argument.');\n    }\n\n    try {\n      fastify.addHook('onError', async (req, reply, payload, done) => {});\n    } catch (e) {\n      t.ok(e.message === 'Async function has too many arguments. Async hooks should not use the \\'done\\' argument.');\n    }\n  });\n  t.end();\n});","file":"hooks-async.test.js","skipped":false,"dir":"test"},{"name":"early termination, onRequest async","suites":[],"updatePoint":{"line":574,"column":40,"index":15459},"line":574,"code":"test('early termination, onRequest async', async t => {\n  t.plan(2);\n  const app = Fastify();\n  app.addHook('onRequest', async (req, reply) => {\n    setImmediate(() => reply.send('hello world'));\n    return reply;\n  });\n  app.get('/', (req, reply) => {\n    t.fail('should not happen');\n  });\n  const res = await app.inject('/');\n  t.equal(res.statusCode, 200);\n  t.equal(res.body.toString(), 'hello world');\n});","file":"hooks-async.test.js","skipped":false,"dir":"test"},{"name":"The this should be the same of the encapsulation level","suites":[],"updatePoint":{"line":588,"column":60,"index":15891},"line":588,"code":"test('The this should be the same of the encapsulation level', async t => {\n  const fastify = Fastify();\n  fastify.addHook('onRequest', async function (req, reply) {\n    if (req.raw.url === '/nested') {\n      t.equal(this.foo, 'bar');\n    } else {\n      t.equal(this.foo, undefined);\n    }\n  });\n  fastify.register(plugin);\n  fastify.get('/', (req, reply) => reply.send('ok'));\n\n  async function plugin(fastify, opts) {\n    fastify.decorate('foo', 'bar');\n    fastify.get('/nested', (req, reply) => reply.send('ok'));\n  }\n\n  await fastify.inject({\n    method: 'GET',\n    path: '/'\n  });\n  await fastify.inject({\n    method: 'GET',\n    path: '/nested'\n  });\n  await fastify.inject({\n    method: 'GET',\n    path: '/'\n  });\n  await fastify.inject({\n    method: 'GET',\n    path: '/nested'\n  });\n});","file":"hooks-async.test.js","skipped":false,"dir":"test"},{"name":"preSerializationEnd should handle errors if the serialize method throws","suites":[],"updatePoint":{"line":622,"column":77,"index":16703},"line":622,"code":"test('preSerializationEnd should handle errors if the serialize method throws', t => {\n  t.test('works with sync preSerialization', t => {\n    t.plan(2);\n    const fastify = Fastify();\n    fastify.addHook('preSerialization', (request, reply, payload, done) => {\n      done(null, payload);\n    });\n    fastify.post('/', {\n      handler(req, reply) {\n        reply.send({\n          notOk: true\n        });\n      },\n\n      schema: {\n        response: {\n          200: {\n            required: ['ok'],\n            properties: {\n              ok: {\n                type: 'boolean'\n              }\n            }\n          }\n        }\n      }\n    });\n    fastify.inject({\n      method: 'POST',\n      url: '/'\n    }, (err, res) => {\n      t.error(err);\n      t.not(res.statusCode, 200);\n    });\n  });\n  t.test('works with async preSerialization', t => {\n    t.plan(2);\n    const fastify = Fastify();\n    fastify.addHook('preSerialization', async (request, reply, payload) => {\n      return payload;\n    });\n    fastify.post('/', {\n      handler(req, reply) {\n        reply.send({\n          notOk: true\n        });\n      },\n\n      schema: {\n        response: {\n          200: {\n            required: ['ok'],\n            properties: {\n              ok: {\n                type: 'boolean'\n              }\n            }\n          }\n        }\n      }\n    });\n    fastify.inject({\n      method: 'POST',\n      url: '/'\n    }, (err, res) => {\n      t.error(err);\n      t.not(res.statusCode, 200);\n    });\n  });\n  t.end();\n});","file":"hooks-async.test.js","skipped":false,"dir":"test"},{"name":"hooks","suites":[],"updatePoint":{"line":39,"column":11,"index":623},"line":39,"code":"test('hooks', t => {\n  t.plan(43);\n  const fastify = Fastify({\n    exposeHeadRoutes: false\n  });\n\n  try {\n    fastify.addHook('preHandler', function (request, reply, done) {\n      t.equal(request.test, 'the request is coming');\n      t.equal(reply.test, 'the reply has come');\n\n      if (request.raw.method === 'HEAD') {\n        done(new Error('some error'));\n      } else {\n        done();\n      }\n    });\n    t.pass();\n  } catch (e) {\n    t.fail();\n  }\n\n  try {\n    fastify.addHook('preParsing', function (request, reply, payload, done) {\n      request.preParsing = true;\n      t.equal(request.test, 'the request is coming');\n      t.equal(reply.test, 'the reply has come');\n      done();\n    });\n    t.pass();\n  } catch (e) {\n    t.fail();\n  }\n\n  try {\n    fastify.addHook('preParsing', function (request, reply, payload, done) {\n      request.preParsing = true;\n      t.equal(request.test, 'the request is coming');\n      t.equal(reply.test, 'the reply has come');\n      done();\n    });\n    t.pass();\n  } catch (e) {\n    t.fail();\n  }\n\n  try {\n    fastify.addHook('preValidation', function (request, reply, done) {\n      t.equal(request.preParsing, true);\n      t.equal(request.test, 'the request is coming');\n      t.equal(reply.test, 'the reply has come');\n      done();\n    });\n    t.pass();\n  } catch (e) {\n    t.fail();\n  }\n\n  try {\n    fastify.addHook('preSerialization', function (request, reply, payload, done) {\n      t.ok('preSerialization called');\n      done();\n    });\n    t.pass();\n  } catch (e) {\n    t.fail();\n  }\n\n  try {\n    fastify.addHook('onRequest', function (request, reply, done) {\n      request.test = 'the request is coming';\n      reply.test = 'the reply has come';\n\n      if (request.raw.method === 'DELETE') {\n        done(new Error('some error'));\n      } else {\n        done();\n      }\n    });\n    t.pass();\n  } catch (e) {\n    t.fail();\n  }\n\n  fastify.addHook('onResponse', function (request, reply, done) {\n    t.ok('onResponse called');\n    done();\n  });\n  fastify.addHook('onSend', function (req, reply, thePayload, done) {\n    t.ok('onSend called');\n    done();\n  });\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    handler: function (req, reply) {\n      t.equal(req.test, 'the request is coming');\n      t.equal(reply.test, 'the reply has come');\n      reply.code(200).send(payload);\n    },\n    onResponse: function (req, reply, done) {\n      t.ok('onResponse inside hook');\n    },\n    response: {\n      200: {\n        type: 'object'\n      }\n    }\n  });\n  fastify.head('/', function (req, reply) {\n    reply.code(200).send(payload);\n  });\n  fastify.delete('/', function (req, reply) {\n    reply.code(200).send(payload);\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n    sget({\n      method: 'HEAD',\n      url: 'http://localhost:' + fastify.server.address().port\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 500);\n    });\n    sget({\n      method: 'DELETE',\n      url: 'http://localhost:' + fastify.server.address().port\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 500);\n    });\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"onRequest hook should support encapsulation / 1","suites":[],"updatePoint":{"line":188,"column":53,"index":4199},"line":188,"code":"test('onRequest hook should support encapsulation / 1', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.register((instance, opts, done) => {\n    instance.addHook('onRequest', (req, reply, done) => {\n      t.equal(req.raw.url, '/plugin');\n      done();\n    });\n    instance.get('/plugin', (request, reply) => {\n      reply.send();\n    });\n    done();\n  });\n  fastify.get('/root', (request, reply) => {\n    reply.send();\n  });\n  fastify.inject('/root', (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n  });\n  fastify.inject('/plugin', (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"onRequest hook should support encapsulation / 2","suites":[],"updatePoint":{"line":213,"column":53,"index":4841},"line":213,"code":"test('onRequest hook should support encapsulation / 2', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  let pluginInstance;\n  fastify.addHook('onRequest', () => {});\n  fastify.register((instance, opts, done) => {\n    instance.addHook('onRequest', () => {});\n    pluginInstance = instance;\n    done();\n  });\n  fastify.ready(err => {\n    t.error(err);\n    t.equal(fastify[symbols.kHooks].onRequest.length, 1);\n    t.equal(pluginInstance[symbols.kHooks].onRequest.length, 2);\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"onRequest hook should support encapsulation / 3","suites":[],"updatePoint":{"line":229,"column":53,"index":5327},"line":229,"code":"test('onRequest hook should support encapsulation / 3', t => {\n  t.plan(20);\n  const fastify = Fastify();\n  fastify.decorate('hello', 'world');\n  fastify.addHook('onRequest', function (req, reply, done) {\n    t.ok(this.hello);\n    t.ok(this.hello2);\n    req.first = true;\n    done();\n  });\n  fastify.decorate('hello2', 'world');\n  fastify.get('/first', (req, reply) => {\n    t.ok(req.first);\n    t.notOk(req.second);\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.register((instance, opts, done) => {\n    instance.decorate('hello3', 'world');\n    instance.addHook('onRequest', function (req, reply, done) {\n      t.ok(this.hello);\n      t.ok(this.hello2);\n      t.ok(this.hello3);\n      req.second = true;\n      done();\n    });\n    instance.get('/second', (req, reply) => {\n      t.ok(req.first);\n      t.ok(req.second);\n      reply.send({\n        hello: 'world'\n      });\n    });\n    done();\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/first'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/second'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"preHandler hook should support encapsulation / 5","suites":[],"updatePoint":{"line":296,"column":54,"index":7058},"line":296,"code":"test('preHandler hook should support encapsulation / 5', t => {\n  t.plan(17);\n  const fastify = Fastify();\n  fastify.decorate('hello', 'world');\n  fastify.addHook('preHandler', function (req, res, done) {\n    t.ok(this.hello);\n    req.first = true;\n    done();\n  });\n  fastify.get('/first', (req, reply) => {\n    t.ok(req.first);\n    t.notOk(req.second);\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.register((instance, opts, done) => {\n    instance.decorate('hello2', 'world');\n    instance.addHook('preHandler', function (req, res, done) {\n      t.ok(this.hello);\n      t.ok(this.hello2);\n      req.second = true;\n      done();\n    });\n    instance.get('/second', (req, reply) => {\n      t.ok(req.first);\n      t.ok(req.second);\n      reply.send({\n        hello: 'world'\n      });\n    });\n    done();\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/first'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/second'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"onRoute hook should be called / 1","suites":[],"updatePoint":{"line":360,"column":39,"index":8685},"line":360,"code":"test('onRoute hook should be called / 1', t => {\n  t.plan(2);\n  const fastify = Fastify({\n    exposeHeadRoutes: false\n  });\n  fastify.register((instance, opts, done) => {\n    instance.addHook('onRoute', () => {\n      t.pass();\n    });\n    instance.get('/', opts, function (req, reply) {\n      reply.send();\n    });\n    done();\n  });\n  fastify.ready(err => {\n    t.error(err);\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"onRoute hook should be called / 2","suites":[],"updatePoint":{"line":378,"column":39,"index":9071},"line":378,"code":"test('onRoute hook should be called / 2', t => {\n  t.plan(5);\n  let firstHandler = 0;\n  let secondHandler = 0;\n  const fastify = Fastify({\n    exposeHeadRoutes: false\n  });\n  fastify.addHook('onRoute', route => {\n    t.pass();\n    firstHandler++;\n  });\n  fastify.register((instance, opts, done) => {\n    instance.addHook('onRoute', route => {\n      t.pass();\n      secondHandler++;\n    });\n    instance.get('/', opts, function (req, reply) {\n      reply.send();\n    });\n    done();\n  }).after(() => {\n    t.equal(firstHandler, 1);\n    t.equal(secondHandler, 1);\n  });\n  fastify.ready(err => {\n    t.error(err);\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"onRoute hook should be called / 3","suites":[],"updatePoint":{"line":406,"column":39,"index":9692},"line":406,"code":"test('onRoute hook should be called / 3', t => {\n  t.plan(5);\n  const fastify = Fastify({\n    exposeHeadRoutes: false\n  });\n\n  function handler(req, reply) {\n    reply.send();\n  }\n\n  fastify.addHook('onRoute', route => {\n    t.pass();\n  });\n  fastify.register((instance, opts, done) => {\n    instance.addHook('onRoute', route => {\n      t.pass();\n    });\n    instance.get('/a', handler);\n    done();\n  }).after((err, done) => {\n    t.error(err);\n    setTimeout(() => {\n      fastify.get('/b', handler);\n      done();\n    }, 10);\n  });\n  fastify.ready(err => {\n    t.error(err);\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"onRoute hook should be called (encapsulation support) / 4","suites":[],"updatePoint":{"line":436,"column":63,"index":10304},"line":436,"code":"test('onRoute hook should be called (encapsulation support) / 4', t => {\n  t.plan(4);\n  const fastify = Fastify({\n    exposeHeadRoutes: false\n  });\n  fastify.addHook('onRoute', () => {\n    t.pass();\n  });\n  fastify.register((instance, opts, done) => {\n    instance.addHook('onRoute', () => {\n      t.pass();\n    });\n    instance.get('/nested', opts, function (req, reply) {\n      reply.send();\n    });\n    done();\n  });\n  fastify.get('/', function (req, reply) {\n    reply.send();\n  });\n  fastify.ready(err => {\n    t.error(err);\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"onRoute hook should be called (encapsulation support) / 5","suites":[],"updatePoint":{"line":460,"column":63,"index":10844},"line":460,"code":"test('onRoute hook should be called (encapsulation support) / 5', t => {\n  t.plan(2);\n  const fastify = Fastify({\n    exposeHeadRoutes: false\n  });\n  fastify.get('/first', function (req, reply) {\n    reply.send();\n  });\n  fastify.register((instance, opts, done) => {\n    instance.addHook('onRoute', () => {\n      t.pass();\n    });\n    instance.get('/nested', opts, function (req, reply) {\n      reply.send();\n    });\n    done();\n  });\n  fastify.get('/second', function (req, reply) {\n    reply.send();\n  });\n  fastify.ready(err => {\n    t.error(err);\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"onRoute hook should be called (encapsulation support) / 6","suites":[],"updatePoint":{"line":484,"column":63,"index":11405},"line":484,"code":"test('onRoute hook should be called (encapsulation support) / 6', t => {\n  t.plan(1);\n  const fastify = Fastify({\n    exposeHeadRoutes: false\n  });\n  fastify.get('/first', function (req, reply) {\n    reply.send();\n  });\n  fastify.addHook('onRoute', () => {\n    t.fail('This should not be called');\n  });\n  fastify.ready(err => {\n    t.error(err);\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"onRoute should keep the context","suites":[],"updatePoint":{"line":499,"column":37,"index":11736},"line":499,"code":"test('onRoute should keep the context', t => {\n  t.plan(4);\n  const fastify = Fastify({\n    exposeHeadRoutes: false\n  });\n  fastify.register((instance, opts, done) => {\n    instance.decorate('test', true);\n    instance.addHook('onRoute', onRoute);\n    t.ok(instance.prototype === fastify.prototype);\n\n    function onRoute(route) {\n      t.ok(this.test);\n      t.equal(this, instance);\n    }\n\n    instance.get('/', opts, function (req, reply) {\n      reply.send();\n    });\n    done();\n  });\n  fastify.close(err => {\n    t.error(err);\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"onRoute hook should pass correct route","suites":[],"updatePoint":{"line":523,"column":44,"index":12286},"line":523,"code":"test('onRoute hook should pass correct route', t => {\n  t.plan(9);\n  const fastify = Fastify({\n    exposeHeadRoutes: false\n  });\n  fastify.addHook('onRoute', route => {\n    t.equal(route.method, 'GET');\n    t.equal(route.url, '/');\n    t.equal(route.path, '/');\n    t.equal(route.routePath, '/');\n  });\n  fastify.register((instance, opts, done) => {\n    instance.addHook('onRoute', route => {\n      t.equal(route.method, 'GET');\n      t.equal(route.url, '/');\n      t.equal(route.path, '/');\n      t.equal(route.routePath, '/');\n    });\n    instance.get('/', opts, function (req, reply) {\n      reply.send();\n    });\n    done();\n  });\n  fastify.ready(err => {\n    t.error(err);\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"onRoute hook should pass correct route with custom prefix","suites":[],"updatePoint":{"line":550,"column":63,"index":12993},"line":550,"code":"test('onRoute hook should pass correct route with custom prefix', t => {\n  t.plan(11);\n  const fastify = Fastify({\n    exposeHeadRoutes: false\n  });\n  fastify.addHook('onRoute', function (route) {\n    t.equal(route.method, 'GET');\n    t.equal(route.url, '/v1/foo');\n    t.equal(route.path, '/v1/foo');\n    t.equal(route.routePath, '/foo');\n    t.equal(route.prefix, '/v1');\n  });\n  fastify.register((instance, opts, done) => {\n    instance.addHook('onRoute', function (route) {\n      t.equal(route.method, 'GET');\n      t.equal(route.url, '/v1/foo');\n      t.equal(route.path, '/v1/foo');\n      t.equal(route.routePath, '/foo');\n      t.equal(route.prefix, '/v1');\n    });\n    instance.get('/foo', opts, function (req, reply) {\n      reply.send();\n    });\n    done();\n  }, {\n    prefix: '/v1'\n  });\n  fastify.ready(err => {\n    t.error(err);\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"onRoute hook should pass correct route with custom options","suites":[],"updatePoint":{"line":581,"column":64,"index":13846},"line":581,"code":"test('onRoute hook should pass correct route with custom options', t => {\n  t.plan(6);\n  const fastify = Fastify({\n    exposeHeadRoutes: false\n  });\n  fastify.register((instance, opts, done) => {\n    instance.addHook('onRoute', function (route) {\n      t.equal(route.method, 'GET');\n      t.equal(route.url, '/foo');\n      t.equal(route.logLevel, 'info');\n      t.equal(route.bodyLimit, 100);\n      t.type(route.logSerializers.test, 'function');\n    });\n    instance.get('/foo', {\n      logLevel: 'info',\n      bodyLimit: 100,\n      logSerializers: {\n        test: value => value\n      }\n    }, function (req, reply) {\n      reply.send();\n    });\n    done();\n  });\n  fastify.ready(err => {\n    t.error(err);\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"onRoute hook should receive any route option","suites":[],"updatePoint":{"line":609,"column":50,"index":14550},"line":609,"code":"test('onRoute hook should receive any route option', t => {\n  t.plan(5);\n  const fastify = Fastify({\n    exposeHeadRoutes: false\n  });\n  fastify.register((instance, opts, done) => {\n    instance.addHook('onRoute', function (route) {\n      t.equal(route.method, 'GET');\n      t.equal(route.url, '/foo');\n      t.equal(route.routePath, '/foo');\n      t.equal(route.auth, 'basic');\n    });\n    instance.get('/foo', {\n      auth: 'basic'\n    }, function (req, reply) {\n      reply.send();\n    });\n    done();\n  });\n  fastify.ready(err => {\n    t.error(err);\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"onRoute hook should preserve system route configuration","suites":[],"updatePoint":{"line":632,"column":61,"index":15125},"line":632,"code":"test('onRoute hook should preserve system route configuration', t => {\n  t.plan(5);\n  const fastify = Fastify({\n    exposeHeadRoutes: false\n  });\n  fastify.register((instance, opts, done) => {\n    instance.addHook('onRoute', function (route) {\n      t.equal(route.method, 'GET');\n      t.equal(route.url, '/foo');\n      t.equal(route.routePath, '/foo');\n      t.equal(route.handler.length, 2);\n    });\n    instance.get('/foo', {\n      url: '/bar',\n      method: 'POST'\n    }, function (req, reply) {\n      reply.send();\n    });\n    done();\n  });\n  fastify.ready(err => {\n    t.error(err);\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"onRoute hook should preserve handler function in options of shorthand route system configuration","suites":[],"updatePoint":{"line":656,"column":102,"index":15765},"line":656,"code":"test('onRoute hook should preserve handler function in options of shorthand route system configuration', t => {\n  t.plan(2);\n\n  const handler = (req, reply) => {};\n\n  const fastify = Fastify({\n    exposeHeadRoutes: false\n  });\n  fastify.register((instance, opts, done) => {\n    instance.addHook('onRoute', function (route) {\n      t.equal(route.handler, handler);\n    });\n    instance.get('/foo', {\n      handler\n    });\n    done();\n  });\n  fastify.ready(err => {\n    t.error(err);\n  });\n}); // issue ref https://github.com/fastify/fastify-compress/issues/140","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"onRoute hook should be called once when prefixTrailingSlash","suites":[],"updatePoint":{"line":678,"column":65,"index":16289},"line":678,"code":"test('onRoute hook should be called once when prefixTrailingSlash', t => {\n  t.plan(3);\n  let onRouteCalled = 0;\n  let routePatched = 0;\n  const fastify = Fastify({\n    ignoreTrailingSlash: false,\n    exposeHeadRoutes: false\n  }); // a plugin that patches route options, similar to fastify-compress\n\n  fastify.register(fp(function myPlugin(instance, opts, next) {\n    function patchTheRoute() {\n      routePatched++;\n    }\n\n    instance.addHook('onRoute', function (routeOptions) {\n      onRouteCalled++;\n      patchTheRoute(routeOptions);\n    });\n    next();\n  }));\n  fastify.register(function routes(instance, opts, next) {\n    instance.route({\n      method: 'GET',\n      url: '/',\n      prefixTrailingSlash: 'both',\n      handler: (req, reply) => {\n        reply.send({\n          hello: 'world'\n        });\n      }\n    });\n    next();\n  }, {\n    prefix: '/prefix'\n  });\n  fastify.ready(err => {\n    t.error(err);\n    t.equal(onRouteCalled, 1); // onRoute hook was called once\n\n    t.equal(routePatched, 1); // and plugin acted once and avoided redundaunt route patching\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"onRoute hook should able to change the route url","suites":[],"updatePoint":{"line":720,"column":54,"index":17361},"line":720,"code":"test('onRoute hook should able to change the route url', t => {\n  t.plan(5);\n  const fastify = Fastify({\n    exposeHeadRoutes: false\n  });\n  fastify.register((instance, opts, done) => {\n    instance.addHook('onRoute', route => {\n      t.equal(route.url, '/foo');\n      route.url = encodeURI(route.url);\n    });\n    instance.get('/foo', (request, reply) => {\n      reply.send('here /foo');\n    });\n    done();\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'GET',\n      url: getUrl(fastify) + encodeURI('/foo')\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(body.toString(), 'here /foo');\n    });\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"onRoute hook that throws should be caught","suites":[],"updatePoint":{"line":752,"column":47,"index":18123},"line":752,"code":"test('onRoute hook that throws should be caught', t => {\n  t.plan(1);\n  const fastify = Fastify({\n    exposeHeadRoutes: false\n  });\n  fastify.register((instance, opts, done) => {\n    instance.addHook('onRoute', () => {\n      throw new Error('snap');\n    });\n\n    try {\n      instance.get('/', opts, function (req, reply) {\n        reply.send();\n      });\n      t.fail('onRoute should throw sync if error');\n    } catch (error) {\n      t.ok(error);\n    }\n\n    done();\n  });\n  fastify.ready();\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"onRoute hook with many prefix","suites":[],"updatePoint":{"line":775,"column":35,"index":18607},"line":775,"code":"test('onRoute hook with many prefix', t => {\n  t.plan(3);\n  const fastify = Fastify({\n    exposeHeadRoutes: false\n  });\n\n  const handler = (req, reply) => {\n    reply.send({});\n  };\n\n  const onRouteChecks = [{\n    routePath: '/anotherPath',\n    prefix: '/two',\n    url: '/one/two/anotherPath'\n  }, {\n    routePath: '/aPath',\n    prefix: '/one',\n    url: '/one/aPath'\n  }];\n  fastify.register((instance, opts, done) => {\n    instance.addHook('onRoute', route => {\n      t.match(route, onRouteChecks.pop());\n    });\n    instance.route({\n      method: 'GET',\n      url: '/aPath',\n      handler\n    });\n    instance.register((instance, opts, done) => {\n      instance.route({\n        method: 'GET',\n        path: '/anotherPath',\n        handler\n      });\n      done();\n    }, {\n      prefix: '/two'\n    });\n    done();\n  }, {\n    prefix: '/one'\n  });\n  fastify.ready(err => {\n    t.error(err);\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"onRoute hook should not be called when it registered after route","suites":[],"updatePoint":{"line":821,"column":70,"index":19542},"line":821,"code":"test('onRoute hook should not be called when it registered after route', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.addHook('onRoute', () => {\n    t.pass();\n  });\n  fastify.get('/', function (req, reply) {\n    reply.send();\n  });\n  fastify.addHook('onRoute', () => {\n    t.fail('should not be called');\n  });\n  fastify.ready(err => {\n    t.error(err);\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"onResponse hook should log request error","suites":[],"updatePoint":{"line":837,"column":46,"index":19896},"line":837,"code":"test('onResponse hook should log request error', t => {\n  t.plan(4);\n  let fastify = null;\n  const logStream = split(JSON.parse);\n\n  try {\n    fastify = Fastify({\n      logger: {\n        stream: logStream,\n        level: 'error'\n      }\n    });\n  } catch (e) {\n    t.fail();\n  }\n\n  logStream.once('data', line => {\n    t.equal(line.msg, 'request errored');\n    t.equal(line.level, 50);\n  });\n  fastify.addHook('onResponse', (request, reply, done) => {\n    done(new Error('kaboom'));\n  });\n  fastify.get('/root', (request, reply) => {\n    reply.send();\n  });\n  fastify.inject('/root', (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"onResponse hook should support encapsulation / 1","suites":[],"updatePoint":{"line":868,"column":54,"index":20566},"line":868,"code":"test('onResponse hook should support encapsulation / 1', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.register((instance, opts, done) => {\n    instance.addHook('onResponse', (request, reply, done) => {\n      t.equal(reply.plugin, true);\n      done();\n    });\n    instance.get('/plugin', (request, reply) => {\n      reply.plugin = true;\n      reply.send();\n    });\n    done();\n  });\n  fastify.get('/root', (request, reply) => {\n    reply.send();\n  });\n  fastify.inject('/root', (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n  });\n  fastify.inject('/plugin', (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"onResponse hook should support encapsulation / 2","suites":[],"updatePoint":{"line":894,"column":54,"index":21237},"line":894,"code":"test('onResponse hook should support encapsulation / 2', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  let pluginInstance;\n  fastify.addHook('onResponse', () => {});\n  fastify.register((instance, opts, done) => {\n    instance.addHook('onResponse', () => {});\n    pluginInstance = instance;\n    done();\n  });\n  fastify.ready(err => {\n    t.error(err);\n    t.equal(fastify[symbols.kHooks].onResponse.length, 1);\n    t.equal(pluginInstance[symbols.kHooks].onResponse.length, 2);\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"onResponse hook should support encapsulation / 3","suites":[],"updatePoint":{"line":910,"column":54,"index":21728},"line":910,"code":"test('onResponse hook should support encapsulation / 3', t => {\n  t.plan(16);\n  const fastify = Fastify();\n  fastify.decorate('hello', 'world');\n  fastify.addHook('onResponse', function (request, reply, done) {\n    t.ok(this.hello);\n    t.ok('onResponse called');\n    done();\n  });\n  fastify.get('/first', (req, reply) => {\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.register((instance, opts, done) => {\n    instance.decorate('hello2', 'world');\n    instance.addHook('onResponse', function (request, reply, done) {\n      t.ok(this.hello);\n      t.ok(this.hello2);\n      t.ok('onResponse called');\n      done();\n    });\n    instance.get('/second', (req, reply) => {\n      reply.send({\n        hello: 'world'\n      });\n    });\n    done();\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/first'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/second'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"onSend hook should support encapsulation / 1","suites":[],"updatePoint":{"line":970,"column":50,"index":23302},"line":970,"code":"test('onSend hook should support encapsulation / 1', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  let pluginInstance;\n  fastify.addHook('onSend', () => {});\n  fastify.register((instance, opts, done) => {\n    instance.addHook('onSend', () => {});\n    pluginInstance = instance;\n    done();\n  });\n  fastify.ready(err => {\n    t.error(err);\n    t.equal(fastify[symbols.kHooks].onSend.length, 1);\n    t.equal(pluginInstance[symbols.kHooks].onSend.length, 2);\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"onSend hook should support encapsulation / 2","suites":[],"updatePoint":{"line":986,"column":50,"index":23773},"line":986,"code":"test('onSend hook should support encapsulation / 2', t => {\n  t.plan(16);\n  const fastify = Fastify();\n  fastify.decorate('hello', 'world');\n  fastify.addHook('onSend', function (request, reply, thePayload, done) {\n    t.ok(this.hello);\n    t.ok('onSend called');\n    done();\n  });\n  fastify.get('/first', (req, reply) => {\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.register((instance, opts, done) => {\n    instance.decorate('hello2', 'world');\n    instance.addHook('onSend', function (request, reply, thePayload, done) {\n      t.ok(this.hello);\n      t.ok(this.hello2);\n      t.ok('onSend called');\n      done();\n    });\n    instance.get('/second', (req, reply) => {\n      reply.send({\n        hello: 'world'\n      });\n    });\n    done();\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/first'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/second'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"onSend hook is called after payload is serialized and headers are set","suites":[],"updatePoint":{"line":1046,"column":75,"index":25380},"line":1046,"code":"test('onSend hook is called after payload is serialized and headers are set', t => {\n  t.plan(30);\n  const fastify = Fastify();\n  fastify.register((instance, opts, done) => {\n    const thePayload = {\n      hello: 'world'\n    };\n    instance.addHook('onSend', function (request, reply, payload, done) {\n      t.same(JSON.parse(payload), thePayload);\n      t.equal(reply[symbols.kReplyHeaders]['content-type'], 'application/json; charset=utf-8');\n      done();\n    });\n    instance.get('/json', (request, reply) => {\n      reply.send(thePayload);\n    });\n    done();\n  });\n  fastify.register((instance, opts, done) => {\n    instance.addHook('onSend', function (request, reply, payload, done) {\n      t.equal(payload, 'some text');\n      t.equal(reply[symbols.kReplyHeaders]['content-type'], 'text/plain; charset=utf-8');\n      done();\n    });\n    instance.get('/text', (request, reply) => {\n      reply.send('some text');\n    });\n    done();\n  });\n  fastify.register((instance, opts, done) => {\n    const thePayload = Buffer.from('buffer payload');\n    instance.addHook('onSend', function (request, reply, payload, done) {\n      t.equal(payload, thePayload);\n      t.equal(reply[symbols.kReplyHeaders]['content-type'], 'application/octet-stream');\n      done();\n    });\n    instance.get('/buffer', (request, reply) => {\n      reply.send(thePayload);\n    });\n    done();\n  });\n  fastify.register((instance, opts, done) => {\n    let chunk = 'stream payload';\n    const thePayload = new stream.Readable({\n      read() {\n        this.push(chunk);\n        chunk = null;\n      }\n\n    });\n    instance.addHook('onSend', function (request, reply, payload, done) {\n      t.equal(payload, thePayload);\n      t.equal(reply[symbols.kReplyHeaders]['content-type'], 'application/octet-stream');\n      done();\n    });\n    instance.get('/stream', (request, reply) => {\n      reply.header('content-type', 'application/octet-stream');\n      reply.send(thePayload);\n    });\n    done();\n  });\n  fastify.register((instance, opts, done) => {\n    const serializedPayload = 'serialized';\n    instance.addHook('onSend', function (request, reply, payload, done) {\n      t.equal(payload, serializedPayload);\n      t.equal(reply[symbols.kReplyHeaders]['content-type'], 'text/custom');\n      done();\n    });\n    instance.get('/custom-serializer', (request, reply) => {\n      reply.serializer(() => serializedPayload).type('text/custom').send('needs to be serialized');\n    });\n    done();\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/json'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.same(JSON.parse(res.payload), {\n      hello: 'world'\n    });\n    t.equal(res.headers['content-length'], '17');\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/text'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.same(res.payload, 'some text');\n    t.equal(res.headers['content-length'], '9');\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/buffer'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.same(res.payload, 'buffer payload');\n    t.equal(res.headers['content-length'], '14');\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/stream'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.same(res.payload, 'stream payload');\n    t.equal(res.headers['transfer-encoding'], 'chunked');\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/custom-serializer'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.same(res.payload, 'serialized');\n    t.equal(res.headers['content-type'], 'text/custom');\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"modify payload","suites":[],"updatePoint":{"line":1166,"column":20,"index":28974},"line":1166,"code":"test('modify payload', t => {\n  t.plan(10);\n  const fastify = Fastify();\n  const payload = {\n    hello: 'world'\n  };\n  const modifiedPayload = {\n    hello: 'modified'\n  };\n  const anotherPayload = '\"winter is coming\"';\n  fastify.addHook('onSend', function (request, reply, thePayload, done) {\n    t.ok('onSend called');\n    t.same(JSON.parse(thePayload), payload);\n    thePayload = thePayload.replace('world', 'modified');\n    done(null, thePayload);\n  });\n  fastify.addHook('onSend', function (request, reply, thePayload, done) {\n    t.ok('onSend called');\n    t.same(JSON.parse(thePayload), modifiedPayload);\n    done(null, anotherPayload);\n  });\n  fastify.addHook('onSend', function (request, reply, thePayload, done) {\n    t.ok('onSend called');\n    t.equal(thePayload, anotherPayload);\n    done();\n  });\n  fastify.get('/', (req, reply) => {\n    reply.send(payload);\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.payload, anotherPayload);\n    t.equal(res.statusCode, 200);\n    t.equal(res.headers['content-length'], '18');\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"clear payload","suites":[],"updatePoint":{"line":1205,"column":19,"index":30076},"line":1205,"code":"test('clear payload', t => {\n  t.plan(6);\n  const fastify = Fastify();\n  fastify.addHook('onSend', function (request, reply, payload, done) {\n    t.ok('onSend called');\n    reply.code(304);\n    done(null, null);\n  });\n  fastify.get('/', (req, reply) => {\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 304);\n    t.equal(res.payload, '');\n    t.equal(res.headers['content-length'], undefined);\n    t.equal(res.headers['content-type'], 'application/json; charset=utf-8');\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"onSend hook throws","suites":[],"updatePoint":{"line":1229,"column":24,"index":30684},"line":1229,"code":"test('onSend hook throws', t => {\n  t.plan(9);\n  const fastify = Fastify();\n  fastify.addHook('onSend', function (request, reply, payload, done) {\n    if (request.raw.method === 'DELETE') {\n      done(new Error('some error'));\n      return;\n    }\n\n    if (request.raw.method === 'PUT') {\n      throw new Error('some error');\n    }\n\n    done();\n  });\n  fastify.get('/', (req, reply) => {\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.delete('/', (req, reply) => {\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.put('/', (req, reply) => {\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n    sget({\n      method: 'DELETE',\n      url: 'http://localhost:' + fastify.server.address().port\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 500);\n    });\n    sget({\n      method: 'PUT',\n      url: 'http://localhost:' + fastify.server.address().port\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 500);\n    });\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"onSend hook should receive valid request and reply objects if onRequest hook fails","suites":[],"updatePoint":{"line":1293,"column":88,"index":32227},"line":1293,"code":"test('onSend hook should receive valid request and reply objects if onRequest hook fails', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.decorateRequest('testDecorator', 'testDecoratorVal');\n  fastify.decorateReply('testDecorator', 'testDecoratorVal');\n  fastify.addHook('onRequest', function (req, reply, done) {\n    done(new Error('onRequest hook failed'));\n  });\n  fastify.addHook('onSend', function (request, reply, payload, done) {\n    t.equal(request.testDecorator, 'testDecoratorVal');\n    t.equal(reply.testDecorator, 'testDecoratorVal');\n    done();\n  });\n  fastify.get('/', (req, reply) => {\n    reply.send('hello');\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 500);\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"onSend hook should receive valid request and reply objects if a custom content type parser fails","suites":[],"updatePoint":{"line":1317,"column":102,"index":33021},"line":1317,"code":"test('onSend hook should receive valid request and reply objects if a custom content type parser fails', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.decorateRequest('testDecorator', 'testDecoratorVal');\n  fastify.decorateReply('testDecorator', 'testDecoratorVal');\n  fastify.addContentTypeParser('*', function (req, payload, done) {\n    done(new Error('content type parser failed'));\n  });\n  fastify.addHook('onSend', function (request, reply, payload, done) {\n    t.equal(request.testDecorator, 'testDecoratorVal');\n    t.equal(reply.testDecorator, 'testDecoratorVal');\n    done();\n  });\n  fastify.get('/', (req, reply) => {\n    reply.send('hello');\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/',\n    payload: 'body'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 500);\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"Content-Length header should be updated if onSend hook modifies the payload","suites":[],"updatePoint":{"line":1342,"column":81,"index":33828},"line":1342,"code":"test('Content-Length header should be updated if onSend hook modifies the payload', t => {\n  t.plan(2);\n  const instance = Fastify();\n  instance.get('/', async (_, rep) => {\n    rep.header('content-length', 3);\n    return 'foo';\n  });\n  instance.addHook('onSend', async () => 'bar12233000');\n  instance.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    const payloadLength = Buffer.byteLength(res.body);\n    const contentLength = Number(res.headers['content-length']);\n    t.equal(payloadLength, contentLength);\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"cannot add hook after binding","suites":[],"updatePoint":{"line":1360,"column":35,"index":34338},"line":1360,"code":"test('cannot add hook after binding', t => {\n  t.plan(2);\n  const instance = Fastify();\n  instance.get('/', function (request, reply) {\n    reply.send({\n      hello: 'world'\n    });\n  });\n  instance.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(instance.server.close.bind(instance.server));\n\n    try {\n      instance.addHook('onRequest', () => {});\n      t.fail();\n    } catch (e) {\n      t.pass();\n    }\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"onRequest hooks should be able to block a request","suites":[],"updatePoint":{"line":1382,"column":55,"index":34795},"line":1382,"code":"test('onRequest hooks should be able to block a request', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.addHook('onRequest', (req, reply, done) => {\n    reply.send('hello');\n    done();\n  });\n  fastify.addHook('onRequest', (req, reply, done) => {\n    t.fail('this should not be called');\n  });\n  fastify.addHook('preHandler', (req, reply, done) => {\n    t.fail('this should not be called');\n  });\n  fastify.addHook('onSend', (req, reply, payload, done) => {\n    t.ok('called');\n    done();\n  });\n  fastify.addHook('onResponse', (request, reply, done) => {\n    t.ok('called');\n    done();\n  });\n  fastify.get('/', function (request, reply) {\n    t.fail('we should not be here');\n  });\n  fastify.inject({\n    url: '/',\n    method: 'GET'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.equal(res.payload, 'hello');\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"preValidation hooks should be able to block a request","suites":[],"updatePoint":{"line":1415,"column":59,"index":35665},"line":1415,"code":"test('preValidation hooks should be able to block a request', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.addHook('preValidation', (req, reply, done) => {\n    reply.send('hello');\n    done();\n  });\n  fastify.addHook('preValidation', (req, reply, done) => {\n    t.fail('this should not be called');\n  });\n  fastify.addHook('preHandler', (req, reply, done) => {\n    t.fail('this should not be called');\n  });\n  fastify.addHook('onSend', (req, reply, payload, done) => {\n    t.ok('called');\n    done();\n  });\n  fastify.addHook('onResponse', (request, reply, done) => {\n    t.ok('called');\n    done();\n  });\n  fastify.get('/', function (request, reply) {\n    t.fail('we should not be here');\n  });\n  fastify.inject({\n    url: '/',\n    method: 'GET'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.equal(res.payload, 'hello');\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"preValidation hooks should be able to change request body before validation","suites":[],"updatePoint":{"line":1448,"column":81,"index":36565},"line":1448,"code":"test('preValidation hooks should be able to change request body before validation', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.addHook('preValidation', (req, _reply, done) => {\n    const buff = Buffer.from(req.body.message, 'base64');\n    req.body = JSON.parse(buff.toString('utf-8'));\n    done();\n  });\n  fastify.post('/', {\n    schema: {\n      body: {\n        type: 'object',\n        properties: {\n          foo: {\n            type: 'string'\n          },\n          bar: {\n            type: 'number'\n          }\n        },\n        required: ['foo', 'bar']\n      }\n    }\n  }, (req, reply) => {\n    t.pass();\n    reply.status(200).send('hello');\n  });\n  fastify.inject({\n    url: '/',\n    method: 'POST',\n    payload: {\n      message: Buffer.from(JSON.stringify({\n        foo: 'example',\n        bar: 1\n      })).toString('base64')\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.equal(res.payload, 'hello');\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"preParsing hooks should be able to block a request","suites":[],"updatePoint":{"line":1490,"column":56,"index":37511},"line":1490,"code":"test('preParsing hooks should be able to block a request', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.addHook('preParsing', (req, reply, payload, done) => {\n    reply.send('hello');\n    done();\n  });\n  fastify.addHook('preParsing', (req, reply, payload, done) => {\n    t.fail('this should not be called');\n  });\n  fastify.addHook('preHandler', (req, reply, done) => {\n    t.fail('this should not be called');\n  });\n  fastify.addHook('onSend', (req, reply, payload, done) => {\n    t.ok('called');\n    done();\n  });\n  fastify.addHook('onResponse', (request, reply, done) => {\n    t.ok('called');\n    done();\n  });\n  fastify.get('/', function (request, reply) {\n    t.fail('we should not be here');\n  });\n  fastify.inject({\n    url: '/',\n    method: 'GET'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.equal(res.payload, 'hello');\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"preHandler hooks should be able to block a request","suites":[],"updatePoint":{"line":1523,"column":56,"index":38398},"line":1523,"code":"test('preHandler hooks should be able to block a request', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.addHook('preHandler', (req, reply, done) => {\n    reply.send('hello');\n    done();\n  });\n  fastify.addHook('preHandler', (req, reply, done) => {\n    t.fail('this should not be called');\n  });\n  fastify.addHook('onSend', (req, reply, payload, done) => {\n    t.equal(payload, 'hello');\n    done();\n  });\n  fastify.addHook('onResponse', (request, reply, done) => {\n    t.ok('called');\n    done();\n  });\n  fastify.get('/', function (request, reply) {\n    t.fail('we should not be here');\n  });\n  fastify.inject({\n    url: '/',\n    method: 'GET'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.equal(res.payload, 'hello');\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"onRequest hooks should be able to block a request (last hook)","suites":[],"updatePoint":{"line":1553,"column":67,"index":39186},"line":1553,"code":"test('onRequest hooks should be able to block a request (last hook)', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.addHook('onRequest', (req, reply, done) => {\n    reply.send('hello');\n    done();\n  });\n  fastify.addHook('preHandler', (req, reply, done) => {\n    t.fail('this should not be called');\n  });\n  fastify.addHook('onSend', (req, reply, payload, done) => {\n    t.ok('called');\n    done();\n  });\n  fastify.addHook('onResponse', (request, reply, done) => {\n    t.ok('called');\n    done();\n  });\n  fastify.get('/', function (request, reply) {\n    t.fail('we should not be here');\n  });\n  fastify.inject({\n    url: '/',\n    method: 'GET'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.equal(res.payload, 'hello');\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"preHandler hooks should be able to block a request (last hook)","suites":[],"updatePoint":{"line":1583,"column":68,"index":39963},"line":1583,"code":"test('preHandler hooks should be able to block a request (last hook)', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.addHook('preHandler', (req, reply, done) => {\n    reply.send('hello');\n    done();\n  });\n  fastify.addHook('onSend', (req, reply, payload, done) => {\n    t.equal(payload, 'hello');\n    done();\n  });\n  fastify.addHook('onResponse', (request, reply, done) => {\n    t.ok('called');\n    done();\n  });\n  fastify.get('/', function (request, reply) {\n    t.fail('we should not be here');\n  });\n  fastify.inject({\n    url: '/',\n    method: 'GET'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.equal(res.payload, 'hello');\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"preParsing hooks should handle errors","suites":[],"updatePoint":{"line":1610,"column":43,"index":40624},"line":1610,"code":"test('preParsing hooks should handle errors', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.addHook('preParsing', (req, reply, payload, done) => {\n    const e = new Error('kaboom');\n    e.statusCode = 501;\n    throw e;\n  });\n  fastify.post('/', function (request, reply) {\n    reply.send(request.body);\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/',\n    payload: {\n      hello: 'world'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 501);\n    t.same(JSON.parse(res.payload), {\n      error: 'Not Implemented',\n      message: 'kaboom',\n      statusCode: 501\n    });\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"onRequest respond with a stream","suites":[],"updatePoint":{"line":1637,"column":37,"index":41243},"line":1637,"code":"test('onRequest respond with a stream', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.addHook('onRequest', (req, reply, done) => {\n    const stream = fs.createReadStream(process.cwd() + '/test/stream.test.js', 'utf8'); // stream.pipe(res)\n    // res.once('finish', done)\n\n    reply.send(stream);\n  });\n  fastify.addHook('onRequest', (req, res, done) => {\n    t.fail('this should not be called');\n  });\n  fastify.addHook('preHandler', (req, reply, done) => {\n    t.fail('this should not be called');\n  });\n  fastify.addHook('onSend', (req, reply, payload, done) => {\n    t.ok('called');\n    done();\n  });\n  fastify.addHook('onResponse', (request, reply, done) => {\n    t.ok('called');\n    done();\n  });\n  fastify.get('/', function (request, reply) {\n    t.fail('we should not be here');\n  });\n  fastify.inject({\n    url: '/',\n    method: 'GET'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"preHandler respond with a stream","suites":[],"updatePoint":{"line":1671,"column":38,"index":42183},"line":1671,"code":"test('preHandler respond with a stream', t => {\n  t.plan(7);\n  const fastify = Fastify();\n  fastify.addHook('onRequest', (req, reply, done) => {\n    t.ok('called');\n    done();\n  }); // we are calling `reply.send` inside the `preHandler` hook with a stream,\n  // this triggers the `onSend` hook event if `preHandler` has not yet finished\n\n  const order = [1, 2];\n  fastify.addHook('preHandler', (req, reply, done) => {\n    const stream = fs.createReadStream(process.cwd() + '/test/stream.test.js', 'utf8');\n    reply.send(stream);\n    reply.raw.once('finish', () => {\n      t.equal(order.shift(), 2);\n      done();\n    });\n  });\n  fastify.addHook('preHandler', (req, reply, done) => {\n    t.fail('this should not be called');\n  });\n  fastify.addHook('onSend', (req, reply, payload, done) => {\n    t.equal(order.shift(), 1);\n    t.equal(typeof payload.pipe, 'function');\n    done();\n  });\n  fastify.addHook('onResponse', (request, reply, done) => {\n    t.ok('called');\n    done();\n  });\n  fastify.get('/', function (request, reply) {\n    t.fail('we should not be here');\n  });\n  fastify.inject({\n    url: '/',\n    method: 'GET'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"Register an hook after a plugin inside a plugin","suites":[],"updatePoint":{"line":1712,"column":53,"index":43408},"line":1712,"code":"test('Register an hook after a plugin inside a plugin', t => {\n  t.plan(6);\n  const fastify = Fastify();\n  fastify.register(fp(function (instance, opts, done) {\n    instance.addHook('preHandler', function (req, reply, done) {\n      t.ok('called');\n      done();\n    });\n    instance.get('/', function (request, reply) {\n      reply.send({\n        hello: 'world'\n      });\n    });\n    done();\n  }));\n  fastify.register(fp(function (instance, opts, done) {\n    instance.addHook('preHandler', function (req, reply, done) {\n      t.ok('called');\n      done();\n    });\n    instance.addHook('preHandler', function (req, reply, done) {\n      t.ok('called');\n      done();\n    });\n    done();\n  }));\n  fastify.inject({\n    url: '/',\n    method: 'GET'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.same(JSON.parse(res.payload), {\n      hello: 'world'\n    });\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"Register an hook after a plugin inside a plugin (with preHandler option)","suites":[],"updatePoint":{"line":1749,"column":78,"index":44326},"line":1749,"code":"test('Register an hook after a plugin inside a plugin (with preHandler option)', t => {\n  t.plan(7);\n  const fastify = Fastify();\n  fastify.register(fp(function (instance, opts, done) {\n    instance.addHook('preHandler', function (req, reply, done) {\n      t.ok('called');\n      done();\n    });\n    instance.get('/', {\n      preHandler: (req, reply, done) => {\n        t.ok('called');\n        done();\n      }\n    }, function (request, reply) {\n      reply.send({\n        hello: 'world'\n      });\n    });\n    done();\n  }));\n  fastify.register(fp(function (instance, opts, done) {\n    instance.addHook('preHandler', function (req, reply, done) {\n      t.ok('called');\n      done();\n    });\n    instance.addHook('preHandler', function (req, reply, done) {\n      t.ok('called');\n      done();\n    });\n    done();\n  }));\n  fastify.inject({\n    url: '/',\n    method: 'GET'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.same(JSON.parse(res.payload), {\n      hello: 'world'\n    });\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"Register hooks inside a plugin after an encapsulated plugin","suites":[],"updatePoint":{"line":1791,"column":65,"index":45330},"line":1791,"code":"test('Register hooks inside a plugin after an encapsulated plugin', t => {\n  t.plan(7);\n  const fastify = Fastify();\n  fastify.register(function (instance, opts, done) {\n    instance.get('/', function (request, reply) {\n      reply.send({\n        hello: 'world'\n      });\n    });\n    done();\n  });\n  fastify.register(fp(function (instance, opts, done) {\n    instance.addHook('onRequest', function (req, reply, done) {\n      t.ok('called');\n      done();\n    });\n    instance.addHook('preHandler', function (request, reply, done) {\n      t.ok('called');\n      done();\n    });\n    instance.addHook('onSend', function (request, reply, payload, done) {\n      t.ok('called');\n      done();\n    });\n    instance.addHook('onResponse', function (request, reply, done) {\n      t.ok('called');\n      done();\n    });\n    done();\n  }));\n  fastify.inject('/', (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.same(JSON.parse(res.payload), {\n      hello: 'world'\n    });\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"onRequest hooks should run in the order in which they are defined","suites":[],"updatePoint":{"line":1829,"column":71,"index":46328},"line":1829,"code":"test('onRequest hooks should run in the order in which they are defined', t => {\n  t.plan(9);\n  const fastify = Fastify();\n  fastify.register(function (instance, opts, done) {\n    instance.addHook('onRequest', function (req, reply, done) {\n      t.equal(req.previous, undefined);\n      req.previous = 1;\n      done();\n    });\n    instance.get('/', function (request, reply) {\n      t.equal(request.previous, 5);\n      reply.send({\n        hello: 'world'\n      });\n    });\n    instance.register(fp(function (i, opts, done) {\n      i.addHook('onRequest', function (req, reply, done) {\n        t.equal(req.previous, 1);\n        req.previous = 2;\n        done();\n      });\n      done();\n    }));\n    done();\n  });\n  fastify.register(fp(function (instance, opts, done) {\n    instance.addHook('onRequest', function (req, reply, done) {\n      t.equal(req.previous, 2);\n      req.previous = 3;\n      done();\n    });\n    instance.register(fp(function (i, opts, done) {\n      i.addHook('onRequest', function (req, reply, done) {\n        t.equal(req.previous, 3);\n        req.previous = 4;\n        done();\n      });\n      done();\n    }));\n    instance.addHook('onRequest', function (req, reply, done) {\n      t.equal(req.previous, 4);\n      req.previous = 5;\n      done();\n    });\n    done();\n  }));\n  fastify.inject('/', (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.same(JSON.parse(res.payload), {\n      hello: 'world'\n    });\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"preHandler hooks should run in the order in which they are defined","suites":[],"updatePoint":{"line":1883,"column":72,"index":47785},"line":1883,"code":"test('preHandler hooks should run in the order in which they are defined', t => {\n  t.plan(9);\n  const fastify = Fastify();\n  fastify.register(function (instance, opts, done) {\n    instance.addHook('preHandler', function (request, reply, done) {\n      t.equal(request.previous, undefined);\n      request.previous = 1;\n      done();\n    });\n    instance.get('/', function (request, reply) {\n      t.equal(request.previous, 5);\n      reply.send({\n        hello: 'world'\n      });\n    });\n    instance.register(fp(function (i, opts, done) {\n      i.addHook('preHandler', function (request, reply, done) {\n        t.equal(request.previous, 1);\n        request.previous = 2;\n        done();\n      });\n      done();\n    }));\n    done();\n  });\n  fastify.register(fp(function (instance, opts, done) {\n    instance.addHook('preHandler', function (request, reply, done) {\n      t.equal(request.previous, 2);\n      request.previous = 3;\n      done();\n    });\n    instance.register(fp(function (i, opts, done) {\n      i.addHook('preHandler', function (request, reply, done) {\n        t.equal(request.previous, 3);\n        request.previous = 4;\n        done();\n      });\n      done();\n    }));\n    instance.addHook('preHandler', function (request, reply, done) {\n      t.equal(request.previous, 4);\n      request.previous = 5;\n      done();\n    });\n    done();\n  }));\n  fastify.inject('/', (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.same(JSON.parse(res.payload), {\n      hello: 'world'\n    });\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"onSend hooks should run in the order in which they are defined","suites":[],"updatePoint":{"line":1937,"column":68,"index":49303},"line":1937,"code":"test('onSend hooks should run in the order in which they are defined', t => {\n  t.plan(8);\n  const fastify = Fastify();\n  fastify.register(function (instance, opts, done) {\n    instance.addHook('onSend', function (request, reply, payload, done) {\n      t.equal(request.previous, undefined);\n      request.previous = 1;\n      done();\n    });\n    instance.get('/', function (request, reply) {\n      reply.send({});\n    });\n    instance.register(fp(function (i, opts, done) {\n      i.addHook('onSend', function (request, reply, payload, done) {\n        t.equal(request.previous, 1);\n        request.previous = 2;\n        done();\n      });\n      done();\n    }));\n    done();\n  });\n  fastify.register(fp(function (instance, opts, done) {\n    instance.addHook('onSend', function (request, reply, payload, done) {\n      t.equal(request.previous, 2);\n      request.previous = 3;\n      done();\n    });\n    instance.register(fp(function (i, opts, done) {\n      i.addHook('onSend', function (request, reply, payload, done) {\n        t.equal(request.previous, 3);\n        request.previous = 4;\n        done();\n      });\n      done();\n    }));\n    instance.addHook('onSend', function (request, reply, payload, done) {\n      t.equal(request.previous, 4);\n      done(null, '5');\n    });\n    done();\n  }));\n  fastify.inject('/', (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.same(JSON.parse(res.payload), 5);\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"onResponse hooks should run in the order in which they are defined","suites":[],"updatePoint":{"line":1985,"column":72,"index":50738},"line":1985,"code":"test('onResponse hooks should run in the order in which they are defined', t => {\n  t.plan(8);\n  const fastify = Fastify();\n  fastify.register(function (instance, opts, done) {\n    instance.addHook('onResponse', function (request, reply, done) {\n      t.equal(reply.previous, undefined);\n      reply.previous = 1;\n      done();\n    });\n    instance.get('/', function (request, reply) {\n      reply.send({\n        hello: 'world'\n      });\n    });\n    instance.register(fp(function (i, opts, done) {\n      i.addHook('onResponse', function (request, reply, done) {\n        t.equal(reply.previous, 1);\n        reply.previous = 2;\n        done();\n      });\n      done();\n    }));\n    done();\n  });\n  fastify.register(fp(function (instance, opts, done) {\n    instance.addHook('onResponse', function (request, reply, done) {\n      t.equal(reply.previous, 2);\n      reply.previous = 3;\n      done();\n    });\n    instance.register(fp(function (i, opts, done) {\n      i.addHook('onResponse', function (request, reply, done) {\n        t.equal(reply.previous, 3);\n        reply.previous = 4;\n        done();\n      });\n      done();\n    }));\n    instance.addHook('onResponse', function (request, reply, done) {\n      t.equal(reply.previous, 4);\n      done();\n    });\n    done();\n  }));\n  fastify.inject('/', (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.same(JSON.parse(res.payload), {\n      hello: 'world'\n    });\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"onRequest, preHandler, and onResponse hooks that resolve to a value do not cause an error","suites":[],"updatePoint":{"line":2037,"column":95,"index":52201},"line":2037,"code":"test('onRequest, preHandler, and onResponse hooks that resolve to a value do not cause an error', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.addHook('onRequest', () => Promise.resolve(1)).addHook('onRequest', () => Promise.resolve(true)).addHook('preValidation', () => Promise.resolve(null)).addHook('preValidation', () => Promise.resolve('a')).addHook('preHandler', () => Promise.resolve(null)).addHook('preHandler', () => Promise.resolve('a')).addHook('onResponse', () => Promise.resolve({})).addHook('onResponse', () => Promise.resolve([]));\n  fastify.get('/', (request, reply) => {\n    reply.send('hello');\n  });\n  fastify.inject('/', (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.equal(res.payload, 'hello');\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"If a response header has been set inside an hook it shoulod not be overwritten by the final response handler","suites":[],"updatePoint":{"line":2050,"column":114,"index":52988},"line":2050,"code":"test('If a response header has been set inside an hook it shoulod not be overwritten by the final response handler', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.addHook('onRequest', (req, reply, done) => {\n    reply.header('X-Custom-Header', 'hello');\n    done();\n  });\n  fastify.get('/', (request, reply) => {\n    reply.send('hello');\n  });\n  fastify.inject('/', (err, res) => {\n    t.error(err);\n    t.equal(res.headers['x-custom-header'], 'hello');\n    t.equal(res.headers['content-type'], 'text/plain; charset=utf-8');\n    t.equal(res.statusCode, 200);\n    t.equal(res.payload, 'hello');\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"If the content type has been set inside an hook it should not be changed","suites":[],"updatePoint":{"line":2068,"column":78,"index":53569},"line":2068,"code":"test('If the content type has been set inside an hook it should not be changed', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.addHook('onRequest', (req, reply, done) => {\n    reply.header('content-type', 'text/html');\n    done();\n  });\n  fastify.get('/', (request, reply) => {\n    t.ok(reply[symbols.kReplyHeaders]['content-type']);\n    reply.send('hello');\n  });\n  fastify.inject('/', (err, res) => {\n    t.error(err);\n    t.equal(res.headers['content-type'], 'text/html');\n    t.equal(res.statusCode, 200);\n    t.equal(res.payload, 'hello');\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"request in onRequest, preParsing, preValidation and onResponse","suites":[],"updatePoint":{"line":2086,"column":68,"index":54127},"line":2086,"code":"test('request in onRequest, preParsing, preValidation and onResponse', t => {\n  t.plan(18);\n  const fastify = Fastify();\n  fastify.addHook('onRequest', function (request, reply, done) {\n    t.same(request.body, undefined);\n    t.same(request.query, {\n      key: 'value'\n    });\n    t.same(request.params, {\n      greeting: 'hello'\n    });\n    t.same(request.headers, {\n      'content-length': '17',\n      'content-type': 'application/json',\n      host: 'localhost:80',\n      'user-agent': 'lightMyRequest',\n      'x-custom': 'hello'\n    });\n    done();\n  });\n  fastify.addHook('preParsing', function (request, reply, payload, done) {\n    t.same(request.body, undefined);\n    t.same(request.query, {\n      key: 'value'\n    });\n    t.same(request.params, {\n      greeting: 'hello'\n    });\n    t.same(request.headers, {\n      'content-length': '17',\n      'content-type': 'application/json',\n      host: 'localhost:80',\n      'user-agent': 'lightMyRequest',\n      'x-custom': 'hello'\n    });\n    done();\n  });\n  fastify.addHook('preValidation', function (request, reply, done) {\n    t.same(request.body, {\n      hello: 'world'\n    });\n    t.same(request.query, {\n      key: 'value'\n    });\n    t.same(request.params, {\n      greeting: 'hello'\n    });\n    t.same(request.headers, {\n      'content-length': '17',\n      'content-type': 'application/json',\n      host: 'localhost:80',\n      'user-agent': 'lightMyRequest',\n      'x-custom': 'hello'\n    });\n    done();\n  });\n  fastify.addHook('onResponse', function (request, reply, done) {\n    t.same(request.body, {\n      hello: 'world'\n    });\n    t.same(request.query, {\n      key: 'value'\n    });\n    t.same(request.params, {\n      greeting: 'hello'\n    });\n    t.same(request.headers, {\n      'content-length': '17',\n      'content-type': 'application/json',\n      host: 'localhost:80',\n      'user-agent': 'lightMyRequest',\n      'x-custom': 'hello'\n    });\n    done();\n  });\n  fastify.post('/:greeting', function (req, reply) {\n    reply.send('ok');\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/hello?key=value',\n    headers: {\n      'x-custom': 'hello'\n    },\n    payload: {\n      hello: 'world'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"preValidation hook should support encapsulation / 1","suites":[],"updatePoint":{"line":2178,"column":57,"index":56364},"line":2178,"code":"test('preValidation hook should support encapsulation / 1', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.register((instance, opts, done) => {\n    instance.addHook('preValidation', (req, reply, done) => {\n      t.equal(req.raw.url, '/plugin');\n      done();\n    });\n    instance.get('/plugin', (request, reply) => {\n      reply.send();\n    });\n    done();\n  });\n  fastify.get('/root', (request, reply) => {\n    reply.send();\n  });\n  fastify.inject('/root', (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n  });\n  fastify.inject('/plugin', (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"preValidation hook should support encapsulation / 2","suites":[],"updatePoint":{"line":2203,"column":57,"index":57014},"line":2203,"code":"test('preValidation hook should support encapsulation / 2', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  let pluginInstance;\n  fastify.addHook('preValidation', () => {});\n  fastify.register((instance, opts, done) => {\n    instance.addHook('preValidation', () => {});\n    pluginInstance = instance;\n    done();\n  });\n  fastify.ready(err => {\n    t.error(err);\n    t.equal(fastify[symbols.kHooks].preValidation.length, 1);\n    t.equal(pluginInstance[symbols.kHooks].preValidation.length, 2);\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"preValidation hook should support encapsulation / 3","suites":[],"updatePoint":{"line":2219,"column":57,"index":57520},"line":2219,"code":"test('preValidation hook should support encapsulation / 3', t => {\n  t.plan(20);\n  const fastify = Fastify();\n  fastify.decorate('hello', 'world');\n  fastify.addHook('preValidation', function (req, reply, done) {\n    t.ok(this.hello);\n    t.ok(this.hello2);\n    req.first = true;\n    done();\n  });\n  fastify.decorate('hello2', 'world');\n  fastify.get('/first', (req, reply) => {\n    t.ok(req.first);\n    t.notOk(req.second);\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.register((instance, opts, done) => {\n    instance.decorate('hello3', 'world');\n    instance.addHook('preValidation', function (req, reply, done) {\n      t.ok(this.hello);\n      t.ok(this.hello2);\n      t.ok(this.hello3);\n      req.second = true;\n      done();\n    });\n    instance.get('/second', (req, reply) => {\n      t.ok(req.first);\n      t.ok(req.second);\n      reply.send({\n        hello: 'world'\n      });\n    });\n    done();\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/first'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/second'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"onError hook","suites":[],"updatePoint":{"line":2286,"column":18,"index":59223},"line":2286,"code":"test('onError hook', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  const err = new Error('kaboom');\n  fastify.addHook('onError', (request, reply, error, done) => {\n    t.match(error, err);\n    done();\n  });\n  fastify.get('/', (req, reply) => {\n    reply.send(err);\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      error: 'Internal Server Error',\n      message: 'kaboom',\n      statusCode: 500\n    });\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"reply.send should throw if called inside the onError hook","suites":[],"updatePoint":{"line":2309,"column":63,"index":59775},"line":2309,"code":"test('reply.send should throw if called inside the onError hook', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  const err = new Error('kaboom');\n  fastify.addHook('onError', (request, reply, error, done) => {\n    try {\n      reply.send();\n      t.fail('Should throw');\n    } catch (err) {\n      t.equal(err.code, 'FST_ERR_SEND_INSIDE_ONERR');\n    }\n\n    done();\n  });\n  fastify.get('/', (req, reply) => {\n    reply.send(err);\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      error: 'Internal Server Error',\n      message: 'kaboom',\n      statusCode: 500\n    });\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"onError hook with setErrorHandler","suites":[],"updatePoint":{"line":2338,"column":39,"index":60419},"line":2338,"code":"test('onError hook with setErrorHandler', t => {\n  t.test('Send error', t => {\n    t.plan(3);\n    const fastify = Fastify();\n    const external = new Error('ouch');\n    const internal = new Error('kaboom');\n    fastify.setErrorHandler((_, req, reply) => {\n      reply.send(external);\n    });\n    fastify.addHook('onError', (request, reply, error, done) => {\n      t.match(error, internal);\n      done();\n    });\n    fastify.get('/', (req, reply) => {\n      reply.send(internal);\n    });\n    fastify.inject({\n      method: 'GET',\n      url: '/'\n    }, (err, res) => {\n      t.error(err);\n      t.same(JSON.parse(res.payload), {\n        error: 'Internal Server Error',\n        message: 'ouch',\n        statusCode: 500\n      });\n    });\n  });\n  t.end();\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"preParsing hook should run before parsing and be able to modify the payload","suites":[],"updatePoint":{"line":2368,"column":81,"index":61216},"line":2368,"code":"test('preParsing hook should run before parsing and be able to modify the payload', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.addHook('preParsing', function (req, reply, payload, done) {\n    const modified = new stream.Readable();\n    modified.receivedEncodedLength = parseInt(req.headers['content-length'], 10);\n    modified.push(JSON.stringify({\n      hello: 'another world'\n    }));\n    modified.push(null);\n    done(null, modified);\n  });\n  fastify.route({\n    method: 'POST',\n    url: '/first',\n    handler: function (req, reply) {\n      reply.send(req.body);\n    }\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'POST',\n      url: 'http://localhost:' + fastify.server.address().port + '/first',\n      body: {\n        hello: 'world'\n      },\n      json: true\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + JSON.stringify(body).length);\n      t.same(body, {\n        hello: 'another world'\n      });\n    });\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"preParsing hooks should run in the order in which they are defined","suites":[],"updatePoint":{"line":2411,"column":72,"index":62349},"line":2411,"code":"test('preParsing hooks should run in the order in which they are defined', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.addHook('preParsing', function (req, reply, payload, done) {\n    const modified = new stream.Readable();\n    modified.receivedEncodedLength = parseInt(req.headers['content-length'], 10);\n    modified.push('{\"hello\":');\n    done(null, modified);\n  });\n  fastify.addHook('preParsing', function (req, reply, payload, done) {\n    payload.push('\"another world\"}');\n    payload.push(null);\n    done(null, payload);\n  });\n  fastify.route({\n    method: 'POST',\n    url: '/first',\n    handler: function (req, reply) {\n      reply.send(req.body);\n    }\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'POST',\n      url: 'http://localhost:' + fastify.server.address().port + '/first',\n      body: {\n        hello: 'world'\n      },\n      json: true\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + JSON.stringify(body).length);\n      t.same(body, {\n        hello: 'another world'\n      });\n    });\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"preParsing hooks should support encapsulation","suites":[],"updatePoint":{"line":2456,"column":51,"index":63559},"line":2456,"code":"test('preParsing hooks should support encapsulation', t => {\n  t.plan(9);\n  const fastify = Fastify();\n  fastify.addHook('preParsing', function (req, reply, payload, done) {\n    const modified = new stream.Readable();\n    modified.receivedEncodedLength = parseInt(req.headers['content-length'], 10);\n    modified.push('{\"hello\":\"another world\"}');\n    modified.push(null);\n    done(null, modified);\n  });\n  fastify.post('/first', (req, reply) => {\n    reply.send(req.body);\n  });\n  fastify.register((instance, opts, done) => {\n    instance.addHook('preParsing', function (req, reply, payload, done) {\n      const modified = new stream.Readable();\n      modified.receivedEncodedLength = payload.receivedEncodedLength || parseInt(req.headers['content-length'], 10);\n      modified.push('{\"hello\":\"encapsulated world\"}');\n      modified.push(null);\n      done(null, modified);\n    });\n    instance.post('/second', (req, reply) => {\n      reply.send(req.body);\n    });\n    done();\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'POST',\n      url: 'http://localhost:' + fastify.server.address().port + '/first',\n      body: {\n        hello: 'world'\n      },\n      json: true\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + JSON.stringify(body).length);\n      t.same(body, {\n        hello: 'another world'\n      });\n    });\n    sget({\n      method: 'POST',\n      url: 'http://localhost:' + fastify.server.address().port + '/second',\n      body: {\n        hello: 'world'\n      },\n      json: true\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + JSON.stringify(body).length);\n      t.same(body, {\n        hello: 'encapsulated world'\n      });\n    });\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"preParsing hook should support encapsulation / 1","suites":[],"updatePoint":{"line":2521,"column":54,"index":65520},"line":2521,"code":"test('preParsing hook should support encapsulation / 1', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.register((instance, opts, done) => {\n    instance.addHook('preParsing', (req, reply, payload, done) => {\n      t.equal(req.raw.url, '/plugin');\n      done();\n    });\n    instance.get('/plugin', (request, reply) => {\n      reply.send();\n    });\n    done();\n  });\n  fastify.get('/root', (request, reply) => {\n    reply.send();\n  });\n  fastify.inject('/root', (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n  });\n  fastify.inject('/plugin', (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"preParsing hook should support encapsulation / 2","suites":[],"updatePoint":{"line":2546,"column":54,"index":66173},"line":2546,"code":"test('preParsing hook should support encapsulation / 2', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  let pluginInstance;\n  fastify.addHook('preParsing', function a() {});\n  fastify.register((instance, opts, done) => {\n    instance.addHook('preParsing', function b() {});\n    pluginInstance = instance;\n    done();\n  });\n  fastify.ready(err => {\n    t.error(err);\n    t.equal(fastify[symbols.kHooks].preParsing.length, 1);\n    t.equal(pluginInstance[symbols.kHooks].preParsing.length, 2);\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"preParsing hook should support encapsulation / 3","suites":[],"updatePoint":{"line":2562,"column":54,"index":66678},"line":2562,"code":"test('preParsing hook should support encapsulation / 3', t => {\n  t.plan(20);\n  const fastify = Fastify();\n  fastify.decorate('hello', 'world');\n  fastify.addHook('preParsing', function (req, reply, payload, done) {\n    t.ok(this.hello);\n    t.ok(this.hello2);\n    req.first = true;\n    done();\n  });\n  fastify.decorate('hello2', 'world');\n  fastify.get('/first', (req, reply) => {\n    t.ok(req.first);\n    t.notOk(req.second);\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.register((instance, opts, done) => {\n    instance.decorate('hello3', 'world');\n    instance.addHook('preParsing', function (req, reply, payload, done) {\n      t.ok(this.hello);\n      t.ok(this.hello2);\n      t.ok(this.hello3);\n      req.second = true;\n      done();\n    });\n    instance.get('/second', (req, reply) => {\n      t.ok(req.first);\n      t.ok(req.second);\n      reply.send({\n        hello: 'world'\n      });\n    });\n    done();\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/first'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/second'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"preSerialization hook should run before serialization and be able to modify the payload","suites":[],"updatePoint":{"line":2629,"column":93,"index":68468},"line":2629,"code":"test('preSerialization hook should run before serialization and be able to modify the payload', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.addHook('preSerialization', function (req, reply, payload, done) {\n    payload.hello += '1';\n    payload.world = 'ok';\n    done(null, payload);\n  });\n  fastify.route({\n    method: 'GET',\n    url: '/first',\n    handler: function (req, reply) {\n      reply.send({\n        hello: 'world'\n      });\n    },\n    schema: {\n      response: {\n        200: {\n          type: 'object',\n          properties: {\n            hello: {\n              type: 'string'\n            },\n            world: {\n              type: 'string'\n            }\n          },\n          required: ['world'],\n          additionalProperties: false\n        }\n      }\n    }\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/first'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world1',\n        world: 'ok'\n      });\n    });\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"preSerialization hook should be able to throw errors which are validated against schema response","suites":[],"updatePoint":{"line":2684,"column":102,"index":69765},"line":2684,"code":"test('preSerialization hook should be able to throw errors which are validated against schema response', t => {\n  const fastify = Fastify();\n  fastify.addHook('preSerialization', function (req, reply, payload, done) {\n    done(new Error('preSerialization aborted'));\n  });\n  fastify.setErrorHandler((err, request, reply) => {\n    t.equal(err.message, 'preSerialization aborted');\n    err.world = 'error';\n    reply.send(err);\n  });\n  fastify.route({\n    method: 'GET',\n    url: '/first',\n    handler: function (req, reply) {\n      reply.send({\n        world: 'hello'\n      });\n    },\n    schema: {\n      response: {\n        500: {\n          type: 'object',\n          properties: {\n            world: {\n              type: 'string'\n            }\n          },\n          required: ['world'],\n          additionalProperties: false\n        }\n      }\n    }\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/first'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 500);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        world: 'error'\n      });\n      t.end();\n    });\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"preSerialization hook which returned error should still run onError hooks","suites":[],"updatePoint":{"line":2738,"column":79,"index":71085},"line":2738,"code":"test('preSerialization hook which returned error should still run onError hooks', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.addHook('preSerialization', function (req, reply, payload, done) {\n    done(new Error('preSerialization aborted'));\n  });\n  fastify.addHook('onError', function (req, reply, payload, done) {\n    t.pass();\n    done();\n  });\n  fastify.get('/first', (req, reply) => {\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/first'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 500);\n    });\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"preSerialization hooks should run in the order in which they are defined","suites":[],"updatePoint":{"line":2769,"column":78,"index":71877},"line":2769,"code":"test('preSerialization hooks should run in the order in which they are defined', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.addHook('preSerialization', function (req, reply, payload, done) {\n    payload.hello += '2';\n    done(null, payload);\n  });\n  fastify.addHook('preSerialization', function (req, reply, payload, done) {\n    payload.hello += '1';\n    done(null, payload);\n  });\n  fastify.get('/first', (req, reply) => {\n    reply.send(payload);\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/first'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world21'\n      });\n    });\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"preSerialization hooks should support encapsulation","suites":[],"updatePoint":{"line":2803,"column":57,"index":72800},"line":2803,"code":"test('preSerialization hooks should support encapsulation', t => {\n  t.plan(9);\n  const fastify = Fastify();\n  fastify.addHook('preSerialization', function (req, reply, payload, done) {\n    payload.hello += '1';\n    done(null, payload);\n  });\n  fastify.get('/first', (req, reply) => {\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.register((instance, opts, done) => {\n    instance.addHook('preSerialization', function (req, reply, payload, done) {\n      payload.hello += '2';\n      done(null, payload);\n    });\n    instance.get('/second', (req, reply) => {\n      reply.send({\n        hello: 'world'\n      });\n    });\n    done();\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/first'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world1'\n      });\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/second'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world12'\n      });\n    });\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"onRegister hook should be called / 1","suites":[],"updatePoint":{"line":2858,"column":42,"index":74255},"line":2858,"code":"test('onRegister hook should be called / 1', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.addHook('onRegister', (instance, opts) => {\n    // duck typing for the win!\n    t.ok(instance.addHook);\n    t.same(opts, pluginOpts);\n  });\n  const pluginOpts = {\n    prefix: 'hello',\n    custom: 'world'\n  };\n  fastify.register((instance, opts, done) => {\n    done();\n  }, pluginOpts);\n  fastify.ready(err => {\n    t.error(err);\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"onRegister hook should be called / 2","suites":[],"updatePoint":{"line":2877,"column":42,"index":74698},"line":2877,"code":"test('onRegister hook should be called / 2', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.addHook('onRegister', instance => {\n    // duck typing for the win!\n    t.ok(instance.addHook);\n  });\n  fastify.register((instance, opts, done) => {\n    instance.register((instance, opts, done) => {\n      done();\n    });\n    done();\n  });\n  fastify.register((instance, opts, done) => {\n    done();\n  });\n  fastify.ready(err => {\n    t.error(err);\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"onRegister hook should be called / 3","suites":[],"updatePoint":{"line":2897,"column":42,"index":75159},"line":2897,"code":"test('onRegister hook should be called / 3', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.decorate('data', []);\n  fastify.addHook('onRegister', instance => {\n    instance.data = instance.data.slice();\n  });\n  fastify.register((instance, opts, done) => {\n    instance.data.push(1);\n    instance.register((instance, opts, done) => {\n      instance.data.push(2);\n      t.same(instance.data, [1, 2]);\n      done();\n    });\n    t.same(instance.data, [1]);\n    done();\n  });\n  fastify.register((instance, opts, done) => {\n    t.same(instance.data, []);\n    done();\n  });\n  fastify.ready(err => {\n    t.error(err);\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"onRegister hook should be called (encapsulation)","suites":[],"updatePoint":{"line":2922,"column":54,"index":75803},"line":2922,"code":"test('onRegister hook should be called (encapsulation)', t => {\n  t.plan(1);\n  const fastify = Fastify();\n\n  function plugin(instance, opts, done) {\n    done();\n  }\n\n  plugin[Symbol.for('skip-override')] = true;\n  fastify.addHook('onRegister', (instance, opts) => {\n    t.fail('This should not be called');\n  });\n  fastify.register(plugin);\n  fastify.ready(err => {\n    t.error(err);\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"early termination, onRequest","suites":[],"updatePoint":{"line":2939,"column":34,"index":76177},"line":2939,"code":"test('early termination, onRequest', t => {\n  t.plan(3);\n  const app = Fastify();\n  app.addHook('onRequest', (req, reply) => {\n    setImmediate(() => reply.send('hello world'));\n    return reply;\n  });\n  app.get('/', (req, reply) => {\n    t.fail('should not happen');\n  });\n  app.inject('/', function (err, res) {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.equal(res.body.toString(), 'hello world');\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"reply.send should throw if undefined error is thrown","suites":[],"updatePoint":{"line":2955,"column":58,"index":76626},"line":2955,"code":"test('reply.send should throw if undefined error is thrown', t => {\n  /* eslint prefer-promise-reject-errors: [\"error\", {\"allowEmptyReject\": true}] */\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.addHook('onRequest', function (req, reply, done) {\n    return Promise.reject();\n  });\n  fastify.get('/', (req, reply) => {\n    reply.send('hello');\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 500);\n    t.same(JSON.parse(res.payload), {\n      error: 'Internal Server Error',\n      code: 'FST_ERR_SEND_UNDEFINED_ERR',\n      message: 'Undefined error has occurred',\n      statusCode: 500\n    });\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"reply.send should throw if undefined error is thrown at preParsing hook","suites":[],"updatePoint":{"line":2979,"column":77,"index":77331},"line":2979,"code":"test('reply.send should throw if undefined error is thrown at preParsing hook', t => {\n  /* eslint prefer-promise-reject-errors: [\"error\", {\"allowEmptyReject\": true}] */\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.addHook('preParsing', function (req, reply, done) {\n    return Promise.reject();\n  });\n  fastify.get('/', (req, reply) => {\n    reply.send('hello');\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 500);\n    t.same(JSON.parse(res.payload), {\n      error: 'Internal Server Error',\n      code: 'FST_ERR_SEND_UNDEFINED_ERR',\n      message: 'Undefined error has occurred',\n      statusCode: 500\n    });\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"reply.send should throw if undefined error is thrown at onSend hook","suites":[],"updatePoint":{"line":3003,"column":73,"index":78033},"line":3003,"code":"test('reply.send should throw if undefined error is thrown at onSend hook', t => {\n  /* eslint prefer-promise-reject-errors: [\"error\", {\"allowEmptyReject\": true}] */\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.addHook('onSend', function (req, reply, done) {\n    return Promise.reject();\n  });\n  fastify.get('/', (req, reply) => {\n    reply.send('hello');\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 500);\n    t.same(JSON.parse(res.payload), {\n      error: 'Internal Server Error',\n      code: 'FST_ERR_SEND_UNDEFINED_ERR',\n      message: 'Undefined error has occurred',\n      statusCode: 500\n    });\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"onTimeout should be triggered","suites":[],"updatePoint":{"line":3027,"column":35,"index":78693},"line":3027,"code":"test('onTimeout should be triggered', t => {\n  t.plan(6);\n  const fastify = Fastify({\n    connectionTimeout: 500\n  });\n  fastify.addHook('onTimeout', function (req, res, done) {\n    t.ok('called', 'onTimeout');\n    done();\n  });\n  fastify.get('/', async (req, reply) => {\n    await reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.get('/timeout', async (req, reply) => {\n    return reply;\n  });\n  fastify.listen({\n    port: 0\n  }, (err, address) => {\n    t.error(err);\n    t.teardown(() => fastify.close());\n    sget({\n      method: 'GET',\n      url: address\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n    });\n    sget({\n      method: 'GET',\n      url: `${address}/timeout`\n    }, (err, response, body) => {\n      t.type(err, Error);\n      t.equal(err.message, 'socket hang up');\n    });\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"onTimeout should be triggered and socket _meta is set","suites":[],"updatePoint":{"line":3065,"column":59,"index":79576},"line":3065,"code":"test('onTimeout should be triggered and socket _meta is set', t => {\n  t.plan(6);\n  const fastify = Fastify({\n    connectionTimeout: 500\n  });\n  fastify.addHook('onTimeout', function (req, res, done) {\n    t.ok('called', 'onTimeout');\n    done();\n  });\n  fastify.get('/', async (req, reply) => {\n    req.raw.socket._meta = {};\n    return reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.get('/timeout', async (req, reply) => {\n    return reply;\n  });\n  fastify.listen({\n    port: 0\n  }, (err, address) => {\n    t.error(err);\n    t.teardown(() => fastify.close());\n    sget({\n      method: 'GET',\n      url: address\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n    });\n    sget({\n      method: 'GET',\n      url: `${address}/timeout`\n    }, (err, response, body) => {\n      t.type(err, Error);\n      t.equal(err.message, 'socket hang up');\n    });\n  });\n});","file":"hooks.test.js","skipped":false,"dir":"test"},{"name":"A route supports host constraints under http2 protocol and secure connection","suites":[],"updatePoint":{"line":23,"column":82,"index":375},"line":23,"code":"test('A route supports host constraints under http2 protocol and secure connection', t => {\n  t.plan(5);\n  let fastify;\n\n  try {\n    fastify = Fastify({\n      http2: true,\n      https: {\n        key: global.context.key,\n        cert: global.context.cert\n      }\n    });\n    t.pass('Key/cert successfully loaded');\n  } catch (e) {\n    t.fail('Key/cert loading failed', e);\n  }\n\n  const constrain = 'fastify.io';\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    handler: function (_, reply) {\n      reply.code(200).send(alpha);\n    }\n  });\n  fastify.route({\n    method: 'GET',\n    url: '/beta',\n    constraints: {\n      host: constrain\n    },\n    handler: function (_, reply) {\n      reply.code(200).send(beta);\n    }\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    t.test('https get request - no constrain', async t => {\n      t.plan(3);\n      const url = `https://localhost:${fastify.server.address().port}`;\n      const res = await h2url.concat({\n        url\n      });\n      t.equal(res.headers[':status'], 200);\n      t.equal(res.headers['content-length'], '' + JSON.stringify(alpha).length);\n      t.same(JSON.parse(res.body), alpha);\n    });\n    t.test('https get request - constrain', async t => {\n      t.plan(3);\n      const url = `https://localhost:${fastify.server.address().port}/beta`;\n      const res = await h2url.concat({\n        url,\n        headers: {\n          ':authority': constrain\n        }\n      });\n      t.equal(res.headers[':status'], 200);\n      t.equal(res.headers['content-length'], '' + JSON.stringify(beta).length);\n      t.same(JSON.parse(res.body), beta);\n    });\n    t.test('https get request - constrain - not found', async t => {\n      t.plan(1);\n      const url = `https://localhost:${fastify.server.address().port}/beta`;\n      const res = await h2url.concat({\n        url\n      });\n      t.equal(res.headers[':status'], 404);\n    });\n  });\n});","file":"http2/constraint.test.js","skipped":false,"dir":"test"},{"name":"http HEAD request","suites":[],"updatePoint":{"line":35,"column":25,"index":526},"line":35,"code":"  test('http HEAD request', async t => {\n    t.plan(1);\n    const url = `http://localhost:${fastify.server.address().port}`;\n    const res = await h2url.concat({\n      url,\n      method: 'HEAD'\n    });\n    t.equal(res.headers[':status'], 200);\n  });","file":"http2/head.test.js","skipped":false,"dir":"test"},{"name":"should throw when http2 module cannot be found","suites":[],"updatePoint":{"line":15,"column":52,"index":296},"line":15,"code":"test('should throw when http2 module cannot be found', t => {\n  t.plan(2);\n\n  try {\n    Fastify({\n      http2: true\n    });\n    t.fail('fastify did not throw expected error');\n  } catch (err) {\n    t.equal(err.code, 'FST_ERR_HTTP2_INVALID_VERSION');\n    t.equal(err.message, 'HTTP2 is available only from node >= 8.8.1');\n  }\n});","file":"http2/missing-http2-module.test.js","skipped":false,"dir":"test"},{"name":"http get request","suites":[],"updatePoint":{"line":38,"column":24,"index":616},"line":38,"code":"  test('http get request', async t => {\n    t.plan(3);\n    const url = `http://localhost:${fastify.server.address().port}`;\n    const res = await h2url.concat({\n      url\n    });\n    t.equal(res.headers[':status'], 200);\n    t.equal(res.headers['content-length'], '' + JSON.stringify(msg).length);\n    t.same(JSON.parse(res.body), msg);\n  });","file":"http2/plain.test.js","skipped":false,"dir":"test"},{"name":"http hostname","suites":[],"updatePoint":{"line":48,"column":21,"index":956},"line":48,"code":"  test('http hostname', async t => {\n    t.plan(1);\n    const hostname = `localhost:${fastify.server.address().port}`;\n    const url = `http://${hostname}/hostname`;\n    const res = await h2url.concat({\n      url\n    });\n    t.equal(res.body, hostname);\n  });","file":"http2/plain.test.js","skipped":false,"dir":"test"},{"name":"secure with fallback","suites":[],"updatePoint":{"line":22,"column":26,"index":331},"line":22,"code":"test('secure with fallback', t => {\n  t.plan(7);\n  let fastify;\n\n  try {\n    fastify = Fastify({\n      http2: true,\n      https: {\n        allowHTTP1: true,\n        key: global.context.key,\n        cert: global.context.cert\n      }\n    });\n    t.pass('Key/cert successfully loaded');\n  } catch (e) {\n    t.fail('Key/cert loading failed', e);\n  }\n\n  fastify.get('/', function (req, reply) {\n    reply.code(200).send(msg);\n  });\n  fastify.post('/', function (req, reply) {\n    reply.code(200).send(req.body);\n  });\n  fastify.get('/error', async function (req, reply) {\n    throw new Error('kaboom');\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    t.test('https get error', async t => {\n      t.plan(1);\n      const url = `https://localhost:${fastify.server.address().port}/error`;\n      const res = await h2url.concat({\n        url\n      });\n      t.equal(res.headers[':status'], 500);\n    });\n    t.test('https post', async t => {\n      t.plan(2);\n      const url = `https://localhost:${fastify.server.address().port}`;\n      const res = await h2url.concat({\n        url,\n        method: 'POST',\n        body: JSON.stringify({\n          hello: 'http2'\n        }),\n        headers: {\n          'content-type': 'application/json'\n        }\n      });\n      t.equal(res.headers[':status'], 200);\n      t.same(JSON.parse(res.body), {\n        hello: 'http2'\n      });\n    });\n    t.test('https get request', async t => {\n      t.plan(3);\n      const url = `https://localhost:${fastify.server.address().port}`;\n      const res = await h2url.concat({\n        url\n      });\n      t.equal(res.headers[':status'], 200);\n      t.equal(res.headers['content-length'], '' + JSON.stringify(msg).length);\n      t.same(JSON.parse(res.body), msg);\n    });\n    t.test('http1 get request', t => {\n      t.plan(4);\n      sget({\n        method: 'GET',\n        url: 'https://localhost:' + fastify.server.address().port,\n        rejectUnauthorized: false\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 200);\n        t.equal(response.headers['content-length'], '' + body.length);\n        t.same(JSON.parse(body), {\n          hello: 'world'\n        });\n      });\n    });\n    t.test('http1 get error', t => {\n      t.plan(2);\n      sget({\n        method: 'GET',\n        url: 'https://localhost:' + fastify.server.address().port + '/error',\n        rejectUnauthorized: false\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 500);\n      });\n    });\n  });\n});","file":"http2/secure-with-fallback.test.js","skipped":false,"dir":"test"},{"name":"secure","suites":[],"updatePoint":{"line":20,"column":12,"index":273},"line":20,"code":"test('secure', t => {\n  t.plan(4);\n  let fastify;\n\n  try {\n    fastify = Fastify({\n      http2: true,\n      https: {\n        key: global.context.key,\n        cert: global.context.cert\n      }\n    });\n    t.pass('Key/cert successfully loaded');\n  } catch (e) {\n    t.fail('Key/cert loading failed', e);\n  }\n\n  fastify.get('/', function (req, reply) {\n    reply.code(200).send(msg);\n  });\n  fastify.get('/proto', function (req, reply) {\n    reply.code(200).send({\n      proto: req.protocol\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    t.test('https get request', async t => {\n      t.plan(3);\n      const url = `https://localhost:${fastify.server.address().port}`;\n      const res = await h2url.concat({\n        url\n      });\n      t.equal(res.headers[':status'], 200);\n      t.equal(res.headers['content-length'], '' + JSON.stringify(msg).length);\n      t.same(JSON.parse(res.body), msg);\n    });\n    t.test('https get request without trust proxy - protocol', async t => {\n      t.plan(2);\n      const url = `https://localhost:${fastify.server.address().port}/proto`;\n      t.same(JSON.parse((await h2url.concat({\n        url\n      })).body), {\n        proto: 'https'\n      });\n      t.same(JSON.parse((await h2url.concat({\n        url,\n        headers: {\n          'X-Forwarded-Proto': 'lorem'\n        }\n      })).body), {\n        proto: 'https'\n      });\n    });\n  });\n});","file":"http2/secure.test.js","skipped":false,"dir":"test"},{"name":"http UNKNOWN_METHOD request","suites":[],"updatePoint":{"line":27,"column":35,"index":423},"line":27,"code":"  test('http UNKNOWN_METHOD request', async t => {\n    t.plan(2);\n    const url = `http://localhost:${fastify.server.address().port}`;\n    const res = await h2url.concat({\n      url,\n      method: 'UNKNOWN_METHOD'\n    });\n    t.equal(res.headers[':status'], 404);\n    t.same(JSON.parse(res.body), {\n      statusCode: 404,\n      error: 'Not Found',\n      message: 'Not Found'\n    });\n  });","file":"http2/unknown-http-method.test.js","skipped":false,"dir":"test"},{"name":"Should support a custom https server","suites":[],"updatePoint":{"line":20,"column":42,"index":350},"line":20,"code":"test('Should support a custom https server', async t => {\n  const localAddresses = await dns.lookup('localhost', {\n    all: true\n  });\n  t.plan(localAddresses.length + 3);\n\n  const serverFactory = (handler, opts) => {\n    t.ok(opts.serverFactory, 'it is called twice for every HOST interface');\n    const options = {\n      key: global.context.key,\n      cert: global.context.cert\n    };\n    const server = https.createServer(options, (req, res) => {\n      req.custom = true;\n      handler(req, res);\n    });\n    return server;\n  };\n\n  const fastify = Fastify({\n    serverFactory\n  });\n  t.teardown(fastify.close.bind(fastify));\n  fastify.get('/', (req, reply) => {\n    t.ok(req.raw.custom);\n    reply.send({\n      hello: 'world'\n    });\n  });\n  await fastify.listen({\n    port: 0\n  });\n  await new Promise((resolve, reject) => {\n    sget({\n      method: 'GET',\n      url: 'https://localhost:' + fastify.server.address().port,\n      rejectUnauthorized: false\n    }, (err, response, body) => {\n      if (err) {\n        return reject(err);\n      }\n\n      t.equal(response.statusCode, 200);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n      resolve();\n    });\n  });\n});","file":"https/custom-https-server.test.js","skipped":false,"dir":"test"},{"name":"https","suites":[],"updatePoint":{"line":16,"column":11,"index":248},"line":16,"code":"test('https', t => {\n  t.plan(4);\n  let fastify;\n\n  try {\n    fastify = Fastify({\n      https: {\n        key: global.context.key,\n        cert: global.context.cert\n      }\n    });\n    t.pass('Key/cert successfully loaded');\n  } catch (e) {\n    t.fail('Key/cert loading failed', e);\n  }\n\n  fastify.get('/', function (req, reply) {\n    reply.code(200).send({\n      hello: 'world'\n    });\n  });\n  fastify.get('/proto', function (req, reply) {\n    reply.code(200).send({\n      proto: req.protocol\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    t.test('https get request', t => {\n      t.plan(4);\n      sget({\n        method: 'GET',\n        url: 'https://localhost:' + fastify.server.address().port,\n        rejectUnauthorized: false\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 200);\n        t.equal(response.headers['content-length'], '' + body.length);\n        t.same(JSON.parse(body), {\n          hello: 'world'\n        });\n      });\n    });\n    t.test('https get request without trust proxy - protocol', t => {\n      t.plan(4);\n      sget({\n        method: 'GET',\n        url: 'https://localhost:' + fastify.server.address().port + '/proto',\n        rejectUnauthorized: false\n      }, (err, response, body) => {\n        t.error(err);\n        t.same(JSON.parse(body), {\n          proto: 'https'\n        });\n      });\n      sget({\n        method: 'GET',\n        url: 'https://localhost:' + fastify.server.address().port + '/proto',\n        rejectUnauthorized: false,\n        headers: {\n          'x-forwarded-proto': 'lorem'\n        }\n      }, (err, response, body) => {\n        t.error(err);\n        t.same(JSON.parse(body), {\n          proto: 'https'\n        });\n      });\n    });\n  });\n});","file":"https/https.test.js","skipped":false,"dir":"test"},{"name":"should import as default","suites":[],"updatePoint":{"line":6,"column":30,"index":94},"line":6,"code":"test('should import as default', t => {\n  t.plan(2);\n\n  const fastify = require('..');\n\n  t.ok(fastify);\n  t.equal(typeof fastify, 'function');\n});","file":"imports.test.js","skipped":false,"dir":"test"},{"name":"should import as esm","suites":[],"updatePoint":{"line":14,"column":26,"index":238},"line":14,"code":"test('should import as esm', t => {\n  t.plan(2);\n\n  const {\n    fastify\n  } = require('..');\n\n  t.ok(fastify);\n  t.equal(typeof fastify, 'function');\n});","file":"imports.test.js","skipped":false,"dir":"test"},{"name":"inject should exist","suites":[],"updatePoint":{"line":15,"column":25,"index":228},"line":15,"code":"test('inject should exist', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  t.ok(fastify.inject);\n  t.equal(typeof fastify.inject, 'function');\n});","file":"inject.test.js","skipped":false,"dir":"test"},{"name":"should wait for the ready event","suites":[],"updatePoint":{"line":21,"column":37,"index":391},"line":21,"code":"test('should wait for the ready event', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  const payload = {\n    hello: 'world'\n  };\n  fastify.register((instance, opts, done) => {\n    instance.get('/', (req, reply) => {\n      reply.send(payload);\n    });\n    setTimeout(done, 500);\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.same(payload, JSON.parse(res.payload));\n    t.equal(res.statusCode, 200);\n    t.equal(res.headers['content-length'], '17');\n  });\n});","file":"inject.test.js","skipped":false,"dir":"test"},{"name":"inject get request","suites":[],"updatePoint":{"line":43,"column":24,"index":896},"line":43,"code":"test('inject get request', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  const payload = {\n    hello: 'world'\n  };\n  fastify.get('/', (req, reply) => {\n    reply.send(payload);\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.same(payload, JSON.parse(res.payload));\n    t.equal(res.statusCode, 200);\n    t.equal(res.headers['content-length'], '17');\n  });\n});","file":"inject.test.js","skipped":false,"dir":"test"},{"name":"inject get request - code check","suites":[],"updatePoint":{"line":62,"column":37,"index":1327},"line":62,"code":"test('inject get request - code check', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  const payload = {\n    hello: 'world'\n  };\n  fastify.get('/', (req, reply) => {\n    reply.code(201).send(payload);\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.same(payload, JSON.parse(res.payload));\n    t.equal(res.statusCode, 201);\n    t.equal(res.headers['content-length'], '17');\n  });\n});","file":"inject.test.js","skipped":false,"dir":"test"},{"name":"inject get request - headers check","suites":[],"updatePoint":{"line":81,"column":40,"index":1771},"line":81,"code":"test('inject get request - headers check', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.get('/', (req, reply) => {\n    reply.header('content-type', 'text/plain').send('');\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.equal('', res.payload);\n    t.equal(res.headers['content-type'], 'text/plain');\n    t.equal(res.headers['content-length'], '0');\n  });\n});","file":"inject.test.js","skipped":false,"dir":"test"},{"name":"inject get request - querystring","suites":[],"updatePoint":{"line":97,"column":38,"index":2196},"line":97,"code":"test('inject get request - querystring', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.get('/', (req, reply) => {\n    reply.send(req.query);\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/?hello=world'\n  }, (err, res) => {\n    t.error(err);\n    t.same({\n      hello: 'world'\n    }, JSON.parse(res.payload));\n    t.equal(res.statusCode, 200);\n    t.equal(res.headers['content-length'], '17');\n  });\n});","file":"inject.test.js","skipped":false,"dir":"test"},{"name":"inject get request - params","suites":[],"updatePoint":{"line":115,"column":33,"index":2614},"line":115,"code":"test('inject get request - params', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.get('/:hello', (req, reply) => {\n    reply.send(req.params);\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/world'\n  }, (err, res) => {\n    t.error(err);\n    t.same({\n      hello: 'world'\n    }, JSON.parse(res.payload));\n    t.equal(res.statusCode, 200);\n    t.equal(res.headers['content-length'], '17');\n  });\n});","file":"inject.test.js","skipped":false,"dir":"test"},{"name":"inject get request - wildcard","suites":[],"updatePoint":{"line":133,"column":35,"index":3034},"line":133,"code":"test('inject get request - wildcard', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.get('/test/*', (req, reply) => {\n    reply.send(req.params);\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/test/wildcard'\n  }, (err, res) => {\n    t.error(err);\n    t.same({\n      '*': 'wildcard'\n    }, JSON.parse(res.payload));\n    t.equal(res.statusCode, 200);\n    t.equal(res.headers['content-length'], '16');\n  });\n});","file":"inject.test.js","skipped":false,"dir":"test"},{"name":"inject get request - headers","suites":[],"updatePoint":{"line":151,"column":34,"index":3462},"line":151,"code":"test('inject get request - headers', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.get('/', (req, reply) => {\n    reply.send(req.headers);\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/',\n    headers: {\n      hello: 'world'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal('world', JSON.parse(res.payload).hello);\n    t.equal(res.statusCode, 200);\n    t.equal(res.headers['content-length'], '69');\n  });\n});","file":"inject.test.js","skipped":false,"dir":"test"},{"name":"inject post request","suites":[],"updatePoint":{"line":170,"column":25,"index":3891},"line":170,"code":"test('inject post request', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  const payload = {\n    hello: 'world'\n  };\n  fastify.post('/', (req, reply) => {\n    reply.send(req.body);\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/',\n    payload\n  }, (err, res) => {\n    t.error(err);\n    t.same(payload, JSON.parse(res.payload));\n    t.equal(res.statusCode, 200);\n    t.equal(res.headers['content-length'], '17');\n  });\n});","file":"inject.test.js","skipped":false,"dir":"test"},{"name":"inject post request - send stream","suites":[],"updatePoint":{"line":190,"column":39,"index":4340},"line":190,"code":"test('inject post request - send stream', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.post('/', (req, reply) => {\n    reply.send(req.body);\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/',\n    headers: {\n      'content-type': 'application/json'\n    },\n    payload: getStream()\n  }, (err, res) => {\n    t.error(err);\n    t.same('{\"hello\":\"world\"}', res.payload);\n    t.equal(res.statusCode, 200);\n    t.equal(res.headers['content-length'], '17');\n  });\n});","file":"inject.test.js","skipped":false,"dir":"test"},{"name":"inject get request - reply stream","suites":[],"updatePoint":{"line":210,"column":39,"index":4821},"line":210,"code":"test('inject get request - reply stream', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.get('/', (req, reply) => {\n    reply.send(getStream());\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.same('{\"hello\":\"world\"}', res.payload);\n    t.equal(res.statusCode, 200);\n  });\n});","file":"inject.test.js","skipped":false,"dir":"test"},{"name":"inject promisify - waiting for ready event","suites":[],"updatePoint":{"line":225,"column":48,"index":5173},"line":225,"code":"test('inject promisify - waiting for ready event', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  const payload = {\n    hello: 'world'\n  };\n  fastify.get('/', (req, reply) => {\n    reply.send(payload);\n  });\n  const injectParams = {\n    method: 'GET',\n    url: '/'\n  };\n  fastify.inject(injectParams).then(res => {\n    t.equal(res.statusCode, 200);\n  }).catch(t.fail);\n});","file":"inject.test.js","skipped":false,"dir":"test"},{"name":"inject promisify - after the ready event","suites":[],"updatePoint":{"line":242,"column":46,"index":5548},"line":242,"code":"test('inject promisify - after the ready event', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  const payload = {\n    hello: 'world'\n  };\n  fastify.get('/', (req, reply) => {\n    reply.send(payload);\n  });\n  fastify.ready(err => {\n    t.error(err);\n    const injectParams = {\n      method: 'GET',\n      url: '/'\n    };\n    fastify.inject(injectParams).then(res => {\n      t.equal(res.statusCode, 200);\n    }).catch(t.fail);\n  });\n});","file":"inject.test.js","skipped":false,"dir":"test"},{"name":"inject promisify - when the server is up","suites":[],"updatePoint":{"line":262,"column":46,"index":5986},"line":262,"code":"test('inject promisify - when the server is up', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  const payload = {\n    hello: 'world'\n  };\n  fastify.get('/', (req, reply) => {\n    reply.send(payload);\n  });\n  fastify.ready(err => {\n    t.error(err); // setTimeout because the ready event don't set \"started\" flag\n    // in this iteration of the 'event loop'\n\n    setTimeout(() => {\n      const injectParams = {\n        method: 'GET',\n        url: '/'\n      };\n      fastify.inject(injectParams).then(res => {\n        t.equal(res.statusCode, 200);\n      }).catch(t.fail);\n    }, 10);\n  });\n});","file":"inject.test.js","skipped":false,"dir":"test"},{"name":"should reject in error case","suites":[],"updatePoint":{"line":286,"column":33,"index":6569},"line":286,"code":"test('should reject in error case', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  const error = new Error('DOOM!');\n  fastify.register((instance, opts, done) => {\n    setTimeout(done, 500, error);\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }).catch(e => {\n    t.equal(e, error);\n  });\n});","file":"inject.test.js","skipped":false,"dir":"test"},{"name":"inject a multipart request using form-body","suites":[],"updatePoint":{"line":300,"column":48,"index":6894},"line":300,"code":"test('inject a multipart request using form-body', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  fastify.addContentTypeParser('*', function (req, payload, done) {\n    let body = '';\n    payload.on('data', d => {\n      body += d;\n    });\n    payload.on('end', () => {\n      done(null, body);\n    });\n  });\n  fastify.post('/', (req, reply) => {\n    reply.send(req.body);\n  });\n  const form = new FormData();\n  form.append('my_field', 'my value');\n  fastify.inject({\n    method: 'POST',\n    url: '/',\n    payload: form\n  }).then(response => {\n    t.equal(response.statusCode, 200);\n    t.ok(/Content-Disposition: form-data; name=\"my_field\"/.test(response.payload));\n  });\n}); // https://github.com/hapijs/shot/blob/master/test/index.js#L836","file":"inject.test.js","skipped":false,"dir":"test"},{"name":"should error the promise if ready errors","suites":[],"updatePoint":{"line":343,"column":46,"index":7932},"line":343,"code":"test('should error the promise if ready errors', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.register((instance, opts) => {\n    return Promise.reject(new Error('kaboom'));\n  }).after(function () {\n    t.pass('after is called');\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }).then(() => {\n    t.fail('this should not be called');\n  }).catch(err => {\n    t.ok(err);\n    t.equal(err.message, 'kaboom');\n  });\n});","file":"inject.test.js","skipped":false,"dir":"test"},{"name":"should throw error if callback specified and if ready errors","suites":[],"updatePoint":{"line":361,"column":66,"index":8392},"line":361,"code":"test('should throw error if callback specified and if ready errors', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  const error = new Error('kaboom');\n  fastify.register((instance, opts) => {\n    return Promise.reject(error);\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, err => {\n    t.ok(err);\n    t.equal(err, error);\n  });\n});","file":"inject.test.js","skipped":false,"dir":"test"},{"name":"should support builder-style injection with ready app","suites":[],"updatePoint":{"line":376,"column":59,"index":8736},"line":376,"code":"test('should support builder-style injection with ready app', async t => {\n  t.plan(3);\n  const fastify = Fastify();\n  const payload = {\n    hello: 'world'\n  };\n  fastify.get('/', (req, reply) => {\n    reply.send(payload);\n  });\n  await fastify.ready();\n  const res = await fastify.inject().get('/').end();\n  t.same(payload, JSON.parse(res.payload));\n  t.equal(res.statusCode, 200);\n  t.equal(res.headers['content-length'], '17');\n});","file":"inject.test.js","skipped":false,"dir":"test"},{"name":"should support builder-style injection with non-ready app","suites":[],"updatePoint":{"line":391,"column":63,"index":9175},"line":391,"code":"test('should support builder-style injection with non-ready app', async t => {\n  t.plan(3);\n  const fastify = Fastify();\n  const payload = {\n    hello: 'world'\n  };\n  fastify.get('/', (req, reply) => {\n    reply.send(payload);\n  });\n  const res = await fastify.inject().get('/').end();\n  t.same(payload, JSON.parse(res.payload));\n  t.equal(res.statusCode, 200);\n  t.equal(res.headers['content-length'], '17');\n});","file":"inject.test.js","skipped":false,"dir":"test"},{"name":"should handle errors in builder-style injection correctly","suites":[],"updatePoint":{"line":405,"column":63,"index":9589},"line":405,"code":"test('should handle errors in builder-style injection correctly', async t => {\n  t.plan(2);\n  const fastify = Fastify();\n  fastify.register((instance, opts, done) => {\n    done(new Error('Kaboom'));\n  });\n\n  try {\n    await fastify.inject().get('/');\n  } catch (err) {\n    t.ok(err);\n    t.equal(err.message, 'Kaboom');\n  }\n});","file":"inject.test.js","skipped":false,"dir":"test"},{"name":"fastify.all should add all the methods to the same url","suites":[],"updatePoint":{"line":13,"column":60,"index":226},"line":13,"code":"test('fastify.all should add all the methods to the same url', t => {\n  const requirePayload = ['POST', 'PUT', 'PATCH'];\n  t.plan(supportedMethods.length * 2);\n  const fastify = Fastify();\n  fastify.all('/', (req, reply) => {\n    reply.send({\n      method: req.raw.method\n    });\n  });\n  supportedMethods.forEach(injectRequest);\n\n  function injectRequest(method) {\n    const options = {\n      url: '/',\n      method\n    };\n\n    if (requirePayload.includes(method)) {\n      options.payload = {\n        hello: 'world'\n      };\n    }\n\n    fastify.inject(options, (err, res) => {\n      t.error(err);\n      const payload = JSON.parse(res.payload);\n      t.same(payload, {\n        method\n      });\n    });\n  }\n});","file":"internals/all.test.js","skipped":false,"dir":"test"},{"name":"rawBody function","suites":[],"updatePoint":{"line":22,"column":22,"index":340},"line":22,"code":"test('rawBody function', t => {\n  t.plan(2);\n\n  const internals = require('../../lib/contentTypeParser')[kTestInternals];\n\n  const body = Buffer.from('你好 世界');\n  const parser = {\n    asString: true,\n    asBuffer: false,\n\n    fn(req, bodyInString, done) {\n      t.equal(bodyInString, body.toString());\n      t.equal(typeof done, 'function');\n      return {\n        then(cb) {\n          cb();\n        }\n\n      };\n    }\n\n  };\n  const res = {};\n\n  res.end = () => {};\n\n  res.writeHead = () => {};\n\n  res.log = {\n    error: () => {},\n    info: () => {}\n  };\n  const context = {\n    Reply,\n    Request,\n    preHandler: [],\n    onSend: [],\n    _parserOptions: {\n      limit: 1024\n    }\n  };\n  const rs = new Readable();\n\n  rs._read = function () {};\n\n  rs.headers = {\n    'content-length': body.length\n  };\n  const request = new Request('id', 'params', rs, 'query', 'log', context);\n  const reply = new Reply(res, request);\n\n  const done = () => {};\n\n  internals.rawBody(request, reply, reply[kRouteContext]._parserOptions, parser, done);\n  rs.emit('data', body.toString());\n  rs.emit('end');\n});","file":"internals/contentTypeParser.test.js","skipped":false,"dir":"test"},{"name":"Should support Webpack and faux modules","suites":[],"updatePoint":{"line":79,"column":45,"index":1453},"line":79,"code":"test('Should support Webpack and faux modules', t => {\n  t.plan(2);\n  const internals = proxyquire('../../lib/contentTypeParser', {\n    'tiny-lru': {\n      default: () => {}\n    }\n  })[kTestInternals];\n  const body = Buffer.from('你好 世界');\n  const parser = {\n    asString: true,\n    asBuffer: false,\n\n    fn(req, bodyInString, done) {\n      t.equal(bodyInString, body.toString());\n      t.equal(typeof done, 'function');\n      return {\n        then(cb) {\n          cb();\n        }\n\n      };\n    }\n\n  };\n  const res = {};\n\n  res.end = () => {};\n\n  res.writeHead = () => {};\n\n  res.log = {\n    error: () => {},\n    info: () => {}\n  };\n  const context = {\n    Reply,\n    Request,\n    preHandler: [],\n    onSend: [],\n    _parserOptions: {\n      limit: 1024\n    }\n  };\n  const rs = new Readable();\n\n  rs._read = function () {};\n\n  rs.headers = {\n    'content-length': body.length\n  };\n  const request = new Request('id', 'params', rs, 'query', 'log', context);\n  const reply = new Reply(res, request);\n\n  const done = () => {};\n\n  internals.rawBody(request, reply, reply[kRouteContext]._parserOptions, parser, done);\n  rs.emit('data', body.toString());\n  rs.emit('end');\n});","file":"internals/contentTypeParser.test.js","skipped":false,"dir":"test"},{"name":"decorate should add the given method to its instance","suites":[],"updatePoint":{"line":14,"column":58,"index":263},"line":14,"code":"test('decorate should add the given method to its instance', t => {\n  t.plan(1);\n\n  function build() {\n    server.add = decorator.add;\n    server[kState] = {\n      listening: false,\n      closing: false,\n      started: false\n    };\n    return server;\n\n    function server() {}\n  }\n\n  const server = build();\n  server.add('test', () => {});\n  t.ok(server.test);\n});","file":"internals/decorator.test.js","skipped":false,"dir":"test"},{"name":"decorate is chainable","suites":[],"updatePoint":{"line":33,"column":27,"index":597},"line":33,"code":"test('decorate is chainable', t => {\n  t.plan(3);\n\n  function build() {\n    server.add = decorator.add;\n    server[kState] = {\n      listening: false,\n      closing: false,\n      started: false\n    };\n    return server;\n\n    function server() {}\n  }\n\n  const server = build();\n  server.add('test1', () => {}).add('test2', () => {}).add('test3', () => {});\n  t.ok(server.test1);\n  t.ok(server.test2);\n  t.ok(server.test3);\n});","file":"internals/decorator.test.js","skipped":false,"dir":"test"},{"name":"checkExistence should check if a property is part of the given instance","suites":[],"updatePoint":{"line":54,"column":77,"index":1073},"line":54,"code":"test('checkExistence should check if a property is part of the given instance', t => {\n  t.plan(1);\n  const instance = {\n    test: () => {}\n  };\n  t.ok(decorator.exist(instance, 'test'));\n});","file":"internals/decorator.test.js","skipped":false,"dir":"test"},{"name":"checkExistence should find the instance if not given","suites":[],"updatePoint":{"line":61,"column":58,"index":1246},"line":61,"code":"test('checkExistence should find the instance if not given', t => {\n  t.plan(1);\n\n  function build() {\n    server.add = decorator.add;\n    server.check = decorator.exist;\n    server[kState] = {\n      listening: false,\n      closing: false,\n      started: false\n    };\n    return server;\n\n    function server() {}\n  }\n\n  const server = build();\n  server.add('test', () => {});\n  t.ok(server.check('test'));\n});","file":"internals/decorator.test.js","skipped":false,"dir":"test"},{"name":"checkExistence should check the prototype as well","suites":[],"updatePoint":{"line":81,"column":55,"index":1653},"line":81,"code":"test('checkExistence should check the prototype as well', t => {\n  t.plan(1);\n\n  function Instance() {}\n\n  Instance.prototype.test = () => {};\n\n  const instance = new Instance();\n  t.ok(decorator.exist(instance, 'test'));\n});","file":"internals/decorator.test.js","skipped":false,"dir":"test"},{"name":"checkDependencies should throw if a dependency is not present","suites":[],"updatePoint":{"line":91,"column":67,"index":1891},"line":91,"code":"test('checkDependencies should throw if a dependency is not present', t => {\n  t.plan(2);\n  const instance = {};\n\n  try {\n    decorator.dependencies(instance, 'foo', ['test']);\n    t.fail();\n  } catch (e) {\n    t.equal(e.code, 'FST_ERR_DEC_MISSING_DEPENDENCY');\n    t.equal(e.message, 'The decorator is missing dependency \\'test\\'.');\n  }\n});","file":"internals/decorator.test.js","skipped":false,"dir":"test"},{"name":"decorate should internally call checkDependencies","suites":[],"updatePoint":{"line":103,"column":55,"index":2222},"line":103,"code":"test('decorate should internally call checkDependencies', t => {\n  t.plan(2);\n\n  function build() {\n    server.add = decorator.add;\n    server[kState] = {\n      listening: false,\n      closing: false,\n      started: false\n    };\n    return server;\n\n    function server() {}\n  }\n\n  const server = build();\n\n  try {\n    server.add('method', () => {}, ['test']);\n    t.fail();\n  } catch (e) {\n    t.equal(e.code, 'FST_ERR_DEC_MISSING_DEPENDENCY');\n    t.equal(e.message, 'The decorator is missing dependency \\'test\\'.');\n  }\n});","file":"internals/decorator.test.js","skipped":false,"dir":"test"},{"name":"decorate should recognize getter/setter objects","suites":[],"updatePoint":{"line":128,"column":53,"index":2746},"line":128,"code":"test('decorate should recognize getter/setter objects', t => {\n  t.plan(6);\n  const one = {\n    [kState]: {\n      listening: false,\n      closing: false,\n      started: false\n    }\n  };\n  decorator.add.call(one, 'foo', {\n    getter: () => this._a,\n    setter: val => {\n      t.pass();\n      this._a = val;\n    }\n  });\n  t.equal(Object.prototype.hasOwnProperty.call(one, 'foo'), true);\n  t.equal(one.foo, undefined);\n  one.foo = 'a';\n  t.equal(one.foo, 'a'); // getter only\n\n  const two = {\n    [kState]: {\n      listening: false,\n      closing: false,\n      started: false\n    }\n  };\n  decorator.add.call(two, 'foo', {\n    getter: () => 'a getter'\n  });\n  t.equal(Object.prototype.hasOwnProperty.call(two, 'foo'), true);\n  t.equal(two.foo, 'a getter');\n});","file":"internals/decorator.test.js","skipped":false,"dir":"test"},{"name":"handleRequest function - sent reply","suites":[],"updatePoint":{"line":47,"column":41,"index":852},"line":47,"code":"test('handleRequest function - sent reply', t => {\n  t.plan(1);\n  const request = {};\n  const reply = {\n    sent: true\n  };\n  const res = handleRequest(null, request, reply);\n  t.equal(res, undefined);\n});","file":"internals/handleRequest.test.js","skipped":false,"dir":"test"},{"name":"handleRequest function - invoke with error","suites":[],"updatePoint":{"line":56,"column":48,"index":1065},"line":56,"code":"test('handleRequest function - invoke with error', t => {\n  t.plan(1);\n  const request = {};\n  const reply = {};\n\n  reply.send = err => t.equal(err.message, 'Kaboom');\n\n  handleRequest(new Error('Kaboom'), request, reply);\n});","file":"internals/handleRequest.test.js","skipped":false,"dir":"test"},{"name":"handler function - invalid schema","suites":[],"updatePoint":{"line":65,"column":39,"index":1283},"line":65,"code":"test('handler function - invalid schema', t => {\n  t.plan(1);\n  const res = {};\n  res.log = {\n    error: () => {},\n    info: () => {}\n  };\n  const context = {\n    config: {\n      method: 'GET',\n      url: '/an-url'\n    },\n    schema: {\n      body: {\n        type: 'object',\n        properties: {\n          hello: {\n            type: 'number'\n          }\n        }\n      }\n    },\n    errorHandler: {\n      func: () => {\n        t.pass('errorHandler called');\n      }\n    },\n    handler: () => {},\n    Reply,\n    Request,\n    preValidation: [],\n    preHandler: [],\n    onSend: [],\n    onError: [],\n    attachValidation: false,\n    schemaErrorFormatter: () => new Error()\n  };\n  buildSchema(context, schemaValidator);\n  const request = {\n    body: {\n      hello: 'world'\n    },\n    [kRouteContext]: context\n  };\n  internals.handler(request, new Reply(res, request));\n});","file":"internals/handleRequest.test.js","skipped":false,"dir":"test"},{"name":"handler function - reply","suites":[],"updatePoint":{"line":111,"column":30,"index":2142},"line":111,"code":"test('handler function - reply', t => {\n  t.plan(3);\n  const res = {};\n\n  res.end = () => {\n    t.equal(res.statusCode, 204);\n    t.pass();\n  };\n\n  res.writeHead = () => {};\n\n  const context = {\n    handler: (req, reply) => {\n      t.equal(typeof reply, 'object');\n      reply.code(204);\n      reply.send(undefined);\n    },\n    Reply,\n    Request,\n    preValidation: [],\n    preHandler: [],\n    onSend: [],\n    onError: []\n  };\n  buildSchema(context, schemaValidator);\n  internals.handler({\n    [kRouteContext]: context\n  }, new Reply(res, {\n    [kRouteContext]: context\n  }));\n});","file":"internals/handleRequest.test.js","skipped":false,"dir":"test"},{"name":"handler function - preValidationCallback with finished response","suites":[],"updatePoint":{"line":142,"column":69,"index":2763},"line":142,"code":"test('handler function - preValidationCallback with finished response', t => {\n  t.plan(0);\n  const res = {}; // Be sure to check only `writableEnded` where is available\n\n  res.writableEnded = true;\n\n  res.end = () => {\n    t.fail();\n  };\n\n  res.writeHead = () => {};\n\n  const context = {\n    handler: (req, reply) => {\n      t.fail();\n      reply.send(undefined);\n    },\n    Reply,\n    Request,\n    preValidation: null,\n    preHandler: [],\n    onSend: [],\n    onError: []\n  };\n  buildSchema(context, schemaValidator);\n  internals.handler({\n    [kRouteContext]: context\n  }, new Reply(res, {\n    [kRouteContext]: context\n  }));\n});","file":"internals/handleRequest.test.js","skipped":false,"dir":"test"},{"name":"request should be defined in onSend Hook on post request with content type application/json","suites":[],"updatePoint":{"line":173,"column":97,"index":3423},"line":173,"code":"test('request should be defined in onSend Hook on post request with content type application/json', t => {\n  t.plan(8);\n\n  const fastify = require('../..')();\n\n  fastify.addHook('onSend', (request, reply, payload, done) => {\n    t.ok(request);\n    t.ok(request.raw);\n    t.ok(request.id);\n    t.ok(request.params);\n    t.ok(request.query);\n    done();\n  });\n  fastify.post('/', (request, reply) => {\n    reply.send(200);\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'POST',\n      url: 'http://localhost:' + fastify.server.address().port,\n      headers: {\n        'content-type': 'application/json'\n      }\n    }, (err, response, body) => {\n      t.error(err); // a 400 error is expected because of no body\n\n      t.equal(response.statusCode, 400);\n    });\n  });\n});","file":"internals/handleRequest.test.js","skipped":false,"dir":"test"},{"name":"request should be defined in onSend Hook on post request with content type application/x-www-form-urlencoded","suites":[],"updatePoint":{"line":209,"column":114,"index":4309},"line":209,"code":"test('request should be defined in onSend Hook on post request with content type application/x-www-form-urlencoded', t => {\n  t.plan(7);\n\n  const fastify = require('../..')();\n\n  fastify.addHook('onSend', (request, reply, payload, done) => {\n    t.ok(request);\n    t.ok(request.raw);\n    t.ok(request.params);\n    t.ok(request.query);\n    done();\n  });\n  fastify.post('/', (request, reply) => {\n    reply.send(200);\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'POST',\n      url: 'http://localhost:' + fastify.server.address().port,\n      headers: {\n        'content-type': 'application/x-www-form-urlencoded'\n      }\n    }, (err, response, body) => {\n      t.error(err); // a 415 error is expected because of missing content type parser\n\n      t.equal(response.statusCode, 415);\n    });\n  });\n});","file":"internals/handleRequest.test.js","skipped":false,"dir":"test"},{"name":"request should be defined in onSend Hook on options request with content type application/x-www-form-urlencoded","suites":[],"updatePoint":{"line":244,"column":117,"index":5213},"line":244,"code":"test('request should be defined in onSend Hook on options request with content type application/x-www-form-urlencoded', t => {\n  t.plan(7);\n\n  const fastify = require('../..')();\n\n  fastify.addHook('onSend', (request, reply, payload, done) => {\n    t.ok(request);\n    t.ok(request.raw);\n    t.ok(request.params);\n    t.ok(request.query);\n    done();\n  });\n  fastify.options('/', (request, reply) => {\n    reply.send(200);\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'OPTIONS',\n      url: 'http://localhost:' + fastify.server.address().port,\n      headers: {\n        'content-type': 'application/x-www-form-urlencoded'\n      }\n    }, (err, response, body) => {\n      t.error(err); // Body parsing skipped, so no body sent\n\n      t.equal(response.statusCode, 200);\n    });\n  });\n});","file":"internals/handleRequest.test.js","skipped":false,"dir":"test"},{"name":"request should respond with an error if an unserialized payload is sent inside an async handler","suites":[],"updatePoint":{"line":279,"column":101,"index":6082},"line":279,"code":"test('request should respond with an error if an unserialized payload is sent inside an async handler', t => {\n  t.plan(3);\n\n  const fastify = require('../..')();\n\n  fastify.get('/', (request, reply) => {\n    reply.type('text/html');\n    return Promise.resolve(request.headers);\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 500);\n    t.strictSame(JSON.parse(res.payload), {\n      error: 'Internal Server Error',\n      code: 'FST_ERR_REP_INVALID_PAYLOAD_TYPE',\n      message: 'Attempted to send payload of invalid type \\'object\\'. Expected a string or Buffer.',\n      statusCode: 500\n    });\n  });\n});","file":"internals/handleRequest.test.js","skipped":false,"dir":"test"},{"name":"hookRunner - Basic","suites":[],"updatePoint":{"line":12,"column":24,"index":163},"line":12,"code":"test('hookRunner - Basic', t => {\n  t.plan(9);\n  hookRunner([fn1, fn2, fn3], iterator, 'a', 'b', done);\n\n  function iterator(fn, a, b, done) {\n    return fn(a, b, done);\n  }\n\n  function fn1(a, b, done) {\n    t.equal(a, 'a');\n    t.equal(b, 'b');\n    done();\n  }\n\n  function fn2(a, b, done) {\n    t.equal(a, 'a');\n    t.equal(b, 'b');\n    done();\n  }\n\n  function fn3(a, b, done) {\n    t.equal(a, 'a');\n    t.equal(b, 'b');\n    done();\n  }\n\n  function done(err, a, b) {\n    t.error(err);\n    t.equal(a, 'a');\n    t.equal(b, 'b');\n  }\n});","file":"internals/hookRunner.test.js","skipped":false,"dir":"test"},{"name":"hookRunner - In case of error should skip to done","suites":[],"updatePoint":{"line":44,"column":55,"index":730},"line":44,"code":"test('hookRunner - In case of error should skip to done', t => {\n  t.plan(7);\n  hookRunner([fn1, fn2, fn3], iterator, 'a', 'b', done);\n\n  function iterator(fn, a, b, done) {\n    return fn(a, b, done);\n  }\n\n  function fn1(a, b, done) {\n    t.equal(a, 'a');\n    t.equal(b, 'b');\n    done();\n  }\n\n  function fn2(a, b, done) {\n    t.equal(a, 'a');\n    t.equal(b, 'b');\n    done(new Error('kaboom'));\n  }\n\n  function fn3() {\n    t.fail('We should not be here');\n  }\n\n  function done(err, a, b) {\n    t.equal(err.message, 'kaboom');\n    t.equal(a, 'a');\n    t.equal(b, 'b');\n  }\n});","file":"internals/hookRunner.test.js","skipped":false,"dir":"test"},{"name":"hookRunner - Should handle throw","suites":[],"updatePoint":{"line":74,"column":38,"index":1290},"line":74,"code":"test('hookRunner - Should handle throw', t => {\n  t.plan(7);\n  hookRunner([fn1, fn2, fn3], iterator, 'a', 'b', done);\n\n  function iterator(fn, a, b, done) {\n    return fn(a, b, done);\n  }\n\n  function fn1(a, b, done) {\n    t.equal(a, 'a');\n    t.equal(b, 'b');\n    done();\n  }\n\n  function fn2(a, b, done) {\n    t.equal(a, 'a');\n    t.equal(b, 'b');\n    throw new Error('kaboom');\n  }\n\n  function fn3() {\n    t.fail('We should not be here');\n  }\n\n  function done(err, a, b) {\n    t.equal(err.message, 'kaboom');\n    t.equal(a, 'a');\n    t.equal(b, 'b');\n  }\n});","file":"internals/hookRunner.test.js","skipped":false,"dir":"test"},{"name":"hookRunner - Should handle promises","suites":[],"updatePoint":{"line":104,"column":41,"index":1853},"line":104,"code":"test('hookRunner - Should handle promises', t => {\n  t.plan(9);\n  hookRunner([fn1, fn2, fn3], iterator, 'a', 'b', done);\n\n  function iterator(fn, a, b, done) {\n    return fn(a, b, done);\n  }\n\n  function fn1(a, b) {\n    t.equal(a, 'a');\n    t.equal(b, 'b');\n    return Promise.resolve();\n  }\n\n  function fn2(a, b) {\n    t.equal(a, 'a');\n    t.equal(b, 'b');\n    return Promise.resolve();\n  }\n\n  function fn3(a, b) {\n    t.equal(a, 'a');\n    t.equal(b, 'b');\n    return Promise.resolve();\n  }\n\n  function done(err, a, b) {\n    t.error(err);\n    t.equal(a, 'a');\n    t.equal(b, 'b');\n  }\n});","file":"internals/hookRunner.test.js","skipped":false,"dir":"test"},{"name":"hookRunner - In case of error should skip to done (with promises)","suites":[],"updatePoint":{"line":136,"column":71,"index":2472},"line":136,"code":"test('hookRunner - In case of error should skip to done (with promises)', t => {\n  t.plan(7);\n  hookRunner([fn1, fn2, fn3], iterator, 'a', 'b', done);\n\n  function iterator(fn, a, b, done) {\n    return fn(a, b, done);\n  }\n\n  function fn1(a, b) {\n    t.equal(a, 'a');\n    t.equal(b, 'b');\n    return Promise.resolve();\n  }\n\n  function fn2(a, b) {\n    t.equal(a, 'a');\n    t.equal(b, 'b');\n    return Promise.reject(new Error('kaboom'));\n  }\n\n  function fn3() {\n    t.fail('We should not be here');\n  }\n\n  function done(err, a, b) {\n    t.equal(err.message, 'kaboom');\n    t.equal(a, 'a');\n    t.equal(b, 'b');\n  }\n});","file":"internals/hookRunner.test.js","skipped":false,"dir":"test"},{"name":"hookRunner - Be able to exit before its natural end","suites":[],"updatePoint":{"line":166,"column":57,"index":3074},"line":166,"code":"test('hookRunner - Be able to exit before its natural end', t => {\n  t.plan(4);\n  let shouldStop = false;\n  hookRunner([fn1, fn2, fn3], iterator, 'a', 'b', done);\n\n  function iterator(fn, a, b, done) {\n    if (shouldStop) {\n      return undefined;\n    }\n\n    return fn(a, b, done);\n  }\n\n  function fn1(a, b, done) {\n    t.equal(a, 'a');\n    t.equal(b, 'b');\n    done();\n  }\n\n  function fn2(a, b) {\n    t.equal(a, 'a');\n    t.equal(b, 'b');\n    shouldStop = true;\n    return Promise.resolve();\n  }\n\n  function fn3() {\n    t.fail('this should not be called');\n  }\n\n  function done() {\n    t.fail('this should not be called');\n  }\n});","file":"internals/hookRunner.test.js","skipped":false,"dir":"test"},{"name":"hookRunner - Promises that resolve to a value do not change the state","suites":[],"updatePoint":{"line":200,"column":75,"index":3724},"line":200,"code":"test('hookRunner - Promises that resolve to a value do not change the state', t => {\n  t.plan(5);\n  const originalState = {\n    a: 'a',\n    b: 'b'\n  };\n  hookRunner([fn1, fn2, fn3], iterator, originalState, 'b', done);\n\n  function iterator(fn, state, b, done) {\n    return fn(state, b, done);\n  }\n\n  function fn1(state, b, done) {\n    t.equal(state, originalState);\n    return Promise.resolve(null);\n  }\n\n  function fn2(state, b, done) {\n    t.equal(state, originalState);\n    return Promise.resolve('string');\n  }\n\n  function fn3(state, b, done) {\n    t.equal(state, originalState);\n    return Promise.resolve({\n      object: true\n    });\n  }\n\n  function done(err, state, b) {\n    t.error(err);\n    t.equal(state, originalState);\n  }\n});","file":"internals/hookRunner.test.js","skipped":false,"dir":"test"},{"name":"onSendHookRunner - Basic","suites":[],"updatePoint":{"line":234,"column":30,"index":4418},"line":234,"code":"test('onSendHookRunner - Basic', t => {\n  t.plan(13);\n  const originalRequest = {\n    body: null\n  };\n  const originalReply = {\n    request: originalRequest\n  };\n  const originalPayload = 'payload';\n  onSendHookRunner([fn1, fn2, fn3], originalRequest, originalReply, originalPayload, done);\n\n  function fn1(request, reply, payload, done) {\n    t.same(request, originalRequest);\n    t.same(reply, originalReply);\n    t.equal(payload, originalPayload);\n    done();\n  }\n\n  function fn2(request, reply, payload, done) {\n    t.same(request, originalRequest);\n    t.same(reply, originalReply);\n    t.equal(payload, originalPayload);\n    done();\n  }\n\n  function fn3(request, reply, payload, done) {\n    t.same(request, originalRequest);\n    t.same(reply, originalReply);\n    t.equal(payload, originalPayload);\n    done();\n  }\n\n  function done(err, request, reply, payload) {\n    t.error(err);\n    t.same(request, originalRequest);\n    t.same(reply, originalReply);\n    t.equal(payload, originalPayload);\n  }\n});","file":"internals/hookRunner.test.js","skipped":false,"dir":"test"},{"name":"onSendHookRunner - Can change the payload","suites":[],"updatePoint":{"line":273,"column":47,"index":5440},"line":273,"code":"test('onSendHookRunner - Can change the payload', t => {\n  t.plan(7);\n  const originalRequest = {\n    body: null\n  };\n  const originalReply = {\n    request: originalRequest\n  };\n  const v1 = {\n    hello: 'world'\n  };\n  const v2 = {\n    ciao: 'mondo'\n  };\n  const v3 = {\n    winter: 'is coming'\n  };\n  const v4 = {\n    winter: 'has come'\n  };\n  onSendHookRunner([fn1, fn2, fn3], originalRequest, originalReply, v1, done);\n\n  function fn1(request, reply, payload, done) {\n    t.same(payload, v1);\n    done(null, v2);\n  }\n\n  function fn2(request, reply, payload, done) {\n    t.same(payload, v2);\n    done(null, v3);\n  }\n\n  function fn3(request, reply, payload, done) {\n    t.same(payload, v3);\n    done(null, v4);\n  }\n\n  function done(err, request, reply, payload) {\n    t.error(err);\n    t.same(request, originalRequest);\n    t.same(reply, originalReply);\n    t.same(payload, v4);\n  }\n});","file":"internals/hookRunner.test.js","skipped":false,"dir":"test"},{"name":"onSendHookRunner - In case of error should skip to done","suites":[],"updatePoint":{"line":317,"column":61,"index":6341},"line":317,"code":"test('onSendHookRunner - In case of error should skip to done', t => {\n  t.plan(6);\n  const originalRequest = {\n    body: null\n  };\n  const originalReply = {\n    request: originalRequest\n  };\n  const v1 = {\n    hello: 'world'\n  };\n  const v2 = {\n    ciao: 'mondo'\n  };\n  onSendHookRunner([fn1, fn2, fn3], originalRequest, originalReply, v1, done);\n\n  function fn1(request, reply, payload, done) {\n    t.same(payload, v1);\n    done(null, v2);\n  }\n\n  function fn2(request, reply, payload, done) {\n    t.same(payload, v2);\n    done(new Error('kaboom'));\n  }\n\n  function fn3() {\n    t.fail('We should not be here');\n  }\n\n  function done(err, request, reply, payload) {\n    t.equal(err.message, 'kaboom');\n    t.same(request, originalRequest);\n    t.same(reply, originalReply);\n    t.same(payload, v2);\n  }\n});","file":"internals/hookRunner.test.js","skipped":false,"dir":"test"},{"name":"onSendHookRunner - Should handle promises","suites":[],"updatePoint":{"line":354,"column":47,"index":7133},"line":354,"code":"test('onSendHookRunner - Should handle promises', t => {\n  t.plan(7);\n  const originalRequest = {\n    body: null\n  };\n  const originalReply = {\n    request: originalRequest\n  };\n  const v1 = {\n    hello: 'world'\n  };\n  const v2 = {\n    ciao: 'mondo'\n  };\n  const v3 = {\n    winter: 'is coming'\n  };\n  const v4 = {\n    winter: 'has come'\n  };\n  onSendHookRunner([fn1, fn2, fn3], originalRequest, originalReply, v1, done);\n\n  function fn1(request, reply, payload) {\n    t.same(payload, v1);\n    return Promise.resolve(v2);\n  }\n\n  function fn2(request, reply, payload) {\n    t.same(payload, v2);\n    return Promise.resolve(v3);\n  }\n\n  function fn3(request, reply, payload) {\n    t.same(payload, v3);\n    return Promise.resolve(v4);\n  }\n\n  function done(err, request, reply, payload) {\n    t.error(err);\n    t.same(request, originalRequest);\n    t.same(reply, originalReply);\n    t.same(payload, v4);\n  }\n});","file":"internals/hookRunner.test.js","skipped":false,"dir":"test"},{"name":"onSendHookRunner - In case of error should skip to done (with promises)","suites":[],"updatePoint":{"line":398,"column":77,"index":8068},"line":398,"code":"test('onSendHookRunner - In case of error should skip to done (with promises)', t => {\n  t.plan(6);\n  const originalRequest = {\n    body: null\n  };\n  const originalReply = {\n    request: originalRequest\n  };\n  const v1 = {\n    hello: 'world'\n  };\n  const v2 = {\n    ciao: 'mondo'\n  };\n  onSendHookRunner([fn1, fn2, fn3], originalRequest, originalReply, v1, done);\n\n  function fn1(request, reply, payload) {\n    t.same(payload, v1);\n    return Promise.resolve(v2);\n  }\n\n  function fn2(request, reply, payload) {\n    t.same(payload, v2);\n    return Promise.reject(new Error('kaboom'));\n  }\n\n  function fn3() {\n    t.fail('We should not be here');\n  }\n\n  function done(err, request, reply, payload) {\n    t.equal(err.message, 'kaboom');\n    t.same(request, originalRequest);\n    t.same(reply, originalReply);\n    t.same(payload, v2);\n  }\n});","file":"internals/hookRunner.test.js","skipped":false,"dir":"test"},{"name":"onSendHookRunner - Be able to exit before its natural end","suites":[],"updatePoint":{"line":435,"column":63,"index":8893},"line":435,"code":"test('onSendHookRunner - Be able to exit before its natural end', t => {\n  t.plan(2);\n  const originalRequest = {\n    body: null\n  };\n  const originalReply = {\n    request: originalRequest\n  };\n  const v1 = {\n    hello: 'world'\n  };\n  const v2 = {\n    ciao: 'mondo'\n  };\n  onSendHookRunner([fn1, fn2, fn3], originalRequest, originalReply, v1, done);\n\n  function fn1(request, reply, payload, done) {\n    t.same(payload, v1);\n    done(null, v2);\n  }\n\n  function fn2(request, reply, payload) {\n    t.same(payload, v2);\n  }\n\n  function fn3() {\n    t.fail('this should not be called');\n  }\n\n  function done() {\n    t.fail('this should not be called');\n  }\n});","file":"internals/hookRunner.test.js","skipped":false,"dir":"test"},{"name":"hooks should have 4 array with the registered hooks","suites":[],"updatePoint":{"line":13,"column":57,"index":195},"line":13,"code":"test('hooks should have 4 array with the registered hooks', t => {\n  const hooks = new Hooks();\n  t.equal(typeof hooks, 'object');\n  t.ok(Array.isArray(hooks.onRequest));\n  t.ok(Array.isArray(hooks.onSend));\n  t.ok(Array.isArray(hooks.preParsing));\n  t.ok(Array.isArray(hooks.preValidation));\n  t.ok(Array.isArray(hooks.preHandler));\n  t.ok(Array.isArray(hooks.onResponse));\n  t.ok(Array.isArray(hooks.onError));\n  t.end();\n});","file":"internals/hooks.test.js","skipped":false,"dir":"test"},{"name":"hooks.add should add a hook to the given hook","suites":[],"updatePoint":{"line":25,"column":51,"index":617},"line":25,"code":"test('hooks.add should add a hook to the given hook', t => {\n  const hooks = new Hooks();\n  hooks.add('onRequest', noop);\n  t.equal(hooks.onRequest.length, 1);\n  t.equal(typeof hooks.onRequest[0], 'function');\n  hooks.add('preParsing', noop);\n  t.equal(hooks.preParsing.length, 1);\n  t.equal(typeof hooks.preParsing[0], 'function');\n  hooks.add('preValidation', noop);\n  t.equal(hooks.preValidation.length, 1);\n  t.equal(typeof hooks.preValidation[0], 'function');\n  hooks.add('preHandler', noop);\n  t.equal(hooks.preHandler.length, 1);\n  t.equal(typeof hooks.preHandler[0], 'function');\n  hooks.add('onResponse', noop);\n  t.equal(hooks.onResponse.length, 1);\n  t.equal(typeof hooks.onResponse[0], 'function');\n  hooks.add('onSend', noop);\n  t.equal(hooks.onSend.length, 1);\n  t.equal(typeof hooks.onSend[0], 'function');\n  hooks.add('onError', noop);\n  t.equal(hooks.onError.length, 1);\n  t.equal(typeof hooks.onError[0], 'function');\n  t.end();\n});","file":"internals/hooks.test.js","skipped":false,"dir":"test"},{"name":"hooks should throw on unexisting handler","suites":[],"updatePoint":{"line":50,"column":46,"index":1563},"line":50,"code":"test('hooks should throw on unexisting handler', t => {\n  t.plan(1);\n  const hooks = new Hooks();\n\n  try {\n    hooks.add('onUnexistingHook', noop);\n    t.fail();\n  } catch (e) {\n    t.pass();\n  }\n});","file":"internals/hooks.test.js","skipped":false,"dir":"test"},{"name":"should throw on wrong parameters","suites":[],"updatePoint":{"line":61,"column":38,"index":1755},"line":61,"code":"test('should throw on wrong parameters', t => {\n  const hooks = new Hooks();\n  t.plan(4);\n\n  try {\n    hooks.add(null, noop);\n    t.fail();\n  } catch (e) {\n    t.equal(e.code, 'FST_ERR_HOOK_INVALID_TYPE');\n    t.equal(e.message, 'The hook name must be a string');\n  }\n\n  try {\n    hooks.add('', null);\n    t.fail();\n  } catch (e) {\n    t.equal(e.code, 'FST_ERR_HOOK_INVALID_HANDLER');\n    t.equal(e.message, 'The hook callback must be a function');\n  }\n});","file":"internals/hooks.test.js","skipped":false,"dir":"test"},{"name":"Fastify.initialConfig is an object","suites":[],"updatePoint":{"line":38,"column":40,"index":692},"line":38,"code":"test('Fastify.initialConfig is an object', t => {\n  t.plan(1);\n  t.type(Fastify().initialConfig, 'object');\n});","file":"internals/initialConfig.test.js","skipped":false,"dir":"test"},{"name":"without options passed to Fastify, initialConfig should expose default values","suites":[],"updatePoint":{"line":42,"column":83,"index":847},"line":42,"code":"test('without options passed to Fastify, initialConfig should expose default values', t => {\n  t.plan(1);\n  const fastifyDefaultOptions = {\n    connectionTimeout: 0,\n    keepAliveTimeout: 72000,\n    maxRequestsPerSocket: 0,\n    requestTimeout: 0,\n    bodyLimit: 1024 * 1024,\n    caseSensitive: true,\n    allowUnsafeRegex: false,\n    disableRequestLogging: false,\n    jsonShorthand: true,\n    ignoreTrailingSlash: false,\n    ignoreDuplicateSlashes: false,\n    maxParamLength: 100,\n    onProtoPoisoning: 'error',\n    onConstructorPoisoning: 'error',\n    pluginTimeout: 10000,\n    requestIdHeader: 'request-id',\n    requestIdLogLabel: 'reqId',\n    http2SessionTimeout: 72000,\n    exposeHeadRoutes: true\n  };\n  t.same(Fastify().initialConfig, fastifyDefaultOptions);\n});","file":"internals/initialConfig.test.js","skipped":false,"dir":"test"},{"name":"Fastify.initialConfig should expose all options","suites":[],"updatePoint":{"line":67,"column":53,"index":1584},"line":67,"code":"test('Fastify.initialConfig should expose all options', t => {\n  t.plan(20);\n\n  const serverFactory = (handler, opts) => {\n    const server = http.createServer((req, res) => {\n      handler(req, res);\n    });\n    return server;\n  };\n\n  const versionStrategy = {\n    name: 'version',\n    storage: function () {\n      const versions = {};\n      return {\n        get: version => {\n          return versions[version] || null;\n        },\n        set: (version, store) => {\n          versions[version] = store;\n        }\n      };\n    },\n    deriveConstraint: (req, ctx) => {\n      return req.headers.accept;\n    },\n\n    validate() {\n      return true;\n    }\n\n  };\n  let reqId = 0;\n  const options = {\n    http2: true,\n    https: {\n      key: global.context.key,\n      cert: global.context.cert\n    },\n    ignoreTrailingSlash: true,\n    ignoreDuplicateSlashes: true,\n    maxParamLength: 200,\n    connectionTimeout: 0,\n    keepAliveTimeout: 72000,\n    bodyLimit: 1049600,\n    onProtoPoisoning: 'remove',\n    serverFactory,\n    caseSensitive: true,\n    allowUnsafeRegex: false,\n    requestIdHeader: 'request-id-alt',\n    pluginTimeout: 20000,\n    querystringParser: str => str,\n    genReqId: function (req) {\n      return reqId++;\n    },\n    logger: pino({\n      level: 'info'\n    }),\n    constraints: {\n      version: versionStrategy\n    },\n    trustProxy: function myTrustFn(address, hop) {\n      return address === '1.2.3.4' || hop === 1;\n    }\n  };\n  const fastify = Fastify(options);\n  t.equal(fastify.initialConfig.http2, true);\n  t.equal(fastify.initialConfig.https, true, 'for security reason the key cert is hidden');\n  t.equal(fastify.initialConfig.ignoreTrailingSlash, true);\n  t.equal(fastify.initialConfig.ignoreDuplicateSlashes, true);\n  t.equal(fastify.initialConfig.maxParamLength, 200);\n  t.equal(fastify.initialConfig.connectionTimeout, 0);\n  t.equal(fastify.initialConfig.keepAliveTimeout, 72000);\n  t.equal(fastify.initialConfig.bodyLimit, 1049600);\n  t.equal(fastify.initialConfig.onProtoPoisoning, 'remove');\n  t.equal(fastify.initialConfig.caseSensitive, true);\n  t.equal(fastify.initialConfig.allowUnsafeRegex, false);\n  t.equal(fastify.initialConfig.requestIdHeader, 'request-id-alt');\n  t.equal(fastify.initialConfig.pluginTimeout, 20000);\n  t.ok(fastify.initialConfig.constraints.version); // obfuscated options:\n\n  t.equal(fastify.initialConfig.serverFactory, undefined);\n  t.equal(fastify.initialConfig.trustProxy, undefined);\n  t.equal(fastify.initialConfig.genReqId, undefined);\n  t.equal(fastify.initialConfig.querystringParser, undefined);\n  t.equal(fastify.initialConfig.logger, undefined);\n  t.equal(fastify.initialConfig.trustProxy, undefined);\n});","file":"internals/initialConfig.test.js","skipped":false,"dir":"test"},{"name":"Should throw if you try to modify Fastify.initialConfig","suites":[],"updatePoint":{"line":155,"column":61,"index":4268},"line":155,"code":"test('Should throw if you try to modify Fastify.initialConfig', t => {\n  t.plan(4);\n  const fastify = Fastify({\n    ignoreTrailingSlash: true\n  });\n\n  try {\n    fastify.initialConfig.ignoreTrailingSlash = false;\n    t.fail();\n  } catch (error) {\n    t.type(error, TypeError);\n    t.equal(error.message, \"Cannot assign to read only property 'ignoreTrailingSlash' of object '#<Object>'\");\n    t.ok(error.stack);\n    t.pass();\n  }\n});","file":"internals/initialConfig.test.js","skipped":false,"dir":"test"},{"name":"We must avoid shallow freezing and ensure that the whole object is freezed","suites":[],"updatePoint":{"line":171,"column":80,"index":4719},"line":171,"code":"test('We must avoid shallow freezing and ensure that the whole object is freezed', t => {\n  t.plan(4);\n  const fastify = Fastify({\n    https: {\n      allowHTTP1: true,\n      key: global.context.key,\n      cert: global.context.cert\n    }\n  });\n\n  try {\n    fastify.initialConfig.https.allowHTTP1 = false;\n    t.fail();\n  } catch (error) {\n    t.type(error, TypeError);\n    t.equal(error.message, \"Cannot assign to read only property 'allowHTTP1' of object '#<Object>'\");\n    t.ok(error.stack);\n    t.same(fastify.initialConfig.https, {\n      allowHTTP1: true\n    }, 'key cert removed');\n  }\n});","file":"internals/initialConfig.test.js","skipped":false,"dir":"test"},{"name":"https value check","suites":[],"updatePoint":{"line":193,"column":23,"index":5256},"line":193,"code":"test('https value check', t => {\n  t.plan(1);\n  const fastify = Fastify({});\n  t.notOk(fastify.initialConfig.https);\n});","file":"internals/initialConfig.test.js","skipped":false,"dir":"test"},{"name":"Return an error if options do not match the validation schema","suites":[],"updatePoint":{"line":198,"column":67,"index":5421},"line":198,"code":"test('Return an error if options do not match the validation schema', t => {\n  t.plan(6);\n\n  try {\n    Fastify({\n      ignoreTrailingSlash: 'string instead of boolean'\n    });\n    t.fail();\n  } catch (error) {\n    t.type(error, Error);\n    t.equal(error.name, 'FastifyError');\n    t.equal(error.message, 'Invalid initialization options: \\'[\"must be boolean\"]\\'');\n    t.equal(error.code, 'FST_ERR_INIT_OPTS_INVALID');\n    t.ok(error.stack);\n    t.pass();\n  }\n});","file":"internals/initialConfig.test.js","skipped":false,"dir":"test"},{"name":"Original options must not be frozen","suites":[],"updatePoint":{"line":215,"column":41,"index":5858},"line":215,"code":"test('Original options must not be frozen', t => {\n  t.plan(4);\n  const originalOptions = {\n    https: {\n      allowHTTP1: true,\n      key: global.context.key,\n      cert: global.context.cert\n    }\n  };\n  const fastify = Fastify(originalOptions);\n  t.equal(Object.isFrozen(originalOptions), false);\n  t.equal(Object.isFrozen(originalOptions.https), false);\n  t.equal(Object.isFrozen(fastify.initialConfig), true);\n  t.equal(Object.isFrozen(fastify.initialConfig.https), true);\n});","file":"internals/initialConfig.test.js","skipped":false,"dir":"test"},{"name":"Original options must not be altered (test deep cloning)","suites":[],"updatePoint":{"line":230,"column":62,"index":6360},"line":230,"code":"test('Original options must not be altered (test deep cloning)', t => {\n  t.plan(3);\n  const originalOptions = {\n    https: {\n      allowHTTP1: true,\n      key: global.context.key,\n      cert: global.context.cert\n    }\n  };\n  const originalOptionsClone = deepClone(originalOptions);\n  const fastify = Fastify(originalOptions); // initialConfig has been triggered\n\n  t.equal(Object.isFrozen(fastify.initialConfig), true); // originalOptions must not have been altered\n\n  t.same(originalOptions.https.key, originalOptionsClone.https.key);\n  t.same(originalOptions.https.cert, originalOptionsClone.https.cert);\n});","file":"internals/initialConfig.test.js","skipped":false,"dir":"test"},{"name":"Should not have issues when passing stream options to Pino.js","suites":[],"updatePoint":{"line":247,"column":67,"index":6977},"line":247,"code":"test('Should not have issues when passing stream options to Pino.js', t => {\n  t.plan(15);\n  const stream = split(JSON.parse);\n  const originalOptions = {\n    ignoreTrailingSlash: true,\n    logger: {\n      level: 'trace',\n      stream\n    }\n  };\n  let fastify;\n\n  try {\n    fastify = Fastify(originalOptions);\n    t.type(fastify, 'object');\n    t.same(fastify.initialConfig, {\n      connectionTimeout: 0,\n      keepAliveTimeout: 72000,\n      maxRequestsPerSocket: 0,\n      requestTimeout: 0,\n      bodyLimit: 1024 * 1024,\n      caseSensitive: true,\n      allowUnsafeRegex: false,\n      disableRequestLogging: false,\n      jsonShorthand: true,\n      ignoreTrailingSlash: true,\n      ignoreDuplicateSlashes: false,\n      maxParamLength: 100,\n      onProtoPoisoning: 'error',\n      onConstructorPoisoning: 'error',\n      pluginTimeout: 10000,\n      requestIdHeader: 'request-id',\n      requestIdLogLabel: 'reqId',\n      http2SessionTimeout: 72000,\n      exposeHeadRoutes: true\n    });\n  } catch (error) {\n    t.fail();\n  }\n\n  fastify.get('/', function (req, reply) {\n    t.ok(req.log);\n    reply.send({\n      hello: 'world'\n    });\n  });\n  stream.once('data', listenAtLogLine => {\n    t.ok(listenAtLogLine, 'listen at log message is ok');\n    stream.once('data', line => {\n      const id = line.reqId;\n      t.ok(line.reqId, 'reqId is defined');\n      t.ok(line.req, 'req is defined');\n      t.equal(line.msg, 'incoming request', 'message is set');\n      t.equal(line.req.method, 'GET', 'method is get');\n      stream.once('data', line => {\n        t.equal(line.reqId, id);\n        t.ok(line.reqId, 'reqId is defined');\n        t.ok(line.res, 'res is defined');\n        t.equal(line.msg, 'request completed', 'message is set');\n        t.equal(line.res.statusCode, 200, 'statusCode is 200');\n        t.ok(line.responseTime, 'responseTime is defined');\n      });\n    });\n  });\n  fastify.listen({\n    port: 0,\n    host: localhost\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    http.get(`http://${localhostForURL}:${fastify.server.address().port}`);\n  });\n});","file":"internals/initialConfig.test.js","skipped":false,"dir":"test"},{"name":"deepFreezeObject() should not throw on TypedArray","suites":[],"updatePoint":{"line":322,"column":55,"index":9062},"line":322,"code":"test('deepFreezeObject() should not throw on TypedArray', t => {\n  t.plan(5);\n  const object = {\n    buffer: Buffer.from(global.context.key),\n    dataView: new DataView(new ArrayBuffer(16)),\n    float: 1.1,\n    integer: 1,\n    object: {\n      nested: {\n        string: 'string'\n      }\n    },\n    stream: split(JSON.parse),\n    string: 'string'\n  };\n\n  try {\n    const frozenObject = deepFreezeObject(object); // Buffers should not be frozen, as they are Uint8Array inherited instances\n\n    t.equal(Object.isFrozen(frozenObject.buffer), false);\n    t.equal(Object.isFrozen(frozenObject), true);\n    t.equal(Object.isFrozen(frozenObject.object), true);\n    t.equal(Object.isFrozen(frozenObject.object.nested), true);\n    t.pass();\n  } catch (error) {\n    t.fail();\n  }\n});","file":"internals/initialConfig.test.js","skipped":false,"dir":"test"},{"name":"Fastify.initialConfig should accept the deprecated versioning option","suites":[],"updatePoint":{"line":350,"column":74,"index":9853},"line":350,"code":"test('Fastify.initialConfig should accept the deprecated versioning option', t => {\n  t.plan(1);\n\n  function onWarning(warning) {\n    t.equal(warning.code, 'FSTDEP009');\n  }\n\n  process.on('warning', onWarning);\n  const versioning = {\n    storage: function () {\n      const versions = {};\n      return {\n        get: version => {\n          return versions[version] || null;\n        },\n        set: (version, store) => {\n          versions[version] = store;\n        }\n      };\n    },\n    deriveVersion: (req, ctx) => {\n      return req.headers.accept;\n    }\n  };\n  Fastify({\n    versioning\n  });\n  setImmediate(function () {\n    process.removeListener('warning', onWarning);\n    t.end();\n  });\n});","file":"internals/initialConfig.test.js","skipped":false,"dir":"test"},{"name":"pluginTimeout should be parsed correctly","suites":[],"updatePoint":{"line":382,"column":46,"index":10521},"line":382,"code":"test('pluginTimeout should be parsed correctly', t => {\n  const withDisabledTimeout = Fastify({\n    pluginTimeout: '0'\n  });\n  t.equal(withDisabledTimeout.initialConfig.pluginTimeout, 0);\n  const withInvalidTimeout = Fastify({\n    pluginTimeout: undefined\n  });\n  t.equal(withInvalidTimeout.initialConfig.pluginTimeout, 10000);\n  t.end();\n});","file":"internals/initialConfig.test.js","skipped":false,"dir":"test"},{"name":"time resolution","suites":[],"updatePoint":{"line":11,"column":21,"index":171},"line":11,"code":"test('time resolution', t => {\n  t.plan(2);\n  t.equal(typeof loggerUtils.now, 'function');\n  t.equal(typeof loggerUtils.now(), 'number');\n});","file":"internals/logger.test.js","skipped":false,"dir":"test"},{"name":"The logger should add a unique id for every request","suites":[],"updatePoint":{"line":16,"column":57,"index":349},"line":16,"code":"test('The logger should add a unique id for every request', t => {\n  const ids = [];\n  const fastify = Fastify();\n  fastify.get('/', (req, reply) => {\n    t.ok(req.id);\n    reply.send({\n      id: req.id\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    const queue = new Queue();\n\n    for (let i = 0; i < 10; i++) {\n      queue.add(checkId);\n    }\n\n    queue.add(() => {\n      fastify.close();\n      t.end();\n    });\n  });\n\n  function checkId(done) {\n    fastify.inject({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port\n    }, (err, res) => {\n      t.error(err);\n      const payload = JSON.parse(res.payload);\n      t.ok(ids.indexOf(payload.id) === -1, 'the id should not be duplicated');\n      ids.push(payload.id);\n      done();\n    });\n  }\n});","file":"internals/logger.test.js","skipped":false,"dir":"test"},{"name":"The logger should reuse request id header for req.id","suites":[],"updatePoint":{"line":54,"column":58,"index":1164},"line":54,"code":"test('The logger should reuse request id header for req.id', t => {\n  const fastify = Fastify();\n  fastify.get('/', (req, reply) => {\n    t.ok(req.id);\n    reply.send({\n      id: req.id\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    fastify.inject({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port,\n      headers: {\n        'Request-Id': 'request-id-1'\n      }\n    }, (err, res) => {\n      t.error(err);\n      const payload = JSON.parse(res.payload);\n      t.ok(payload.id === 'request-id-1', 'the request id from the header should be returned');\n      fastify.close();\n      t.end();\n    });\n  });\n});","file":"internals/logger.test.js","skipped":false,"dir":"test"},{"name":"The logger should error if both stream and file destination are given","suites":[],"updatePoint":{"line":104,"column":75,"index":2221},"line":104,"code":"test('The logger should error if both stream and file destination are given', t => {\n  t.plan(2);\n\n  const stream = require('stream').Writable;\n\n  try {\n    Fastify({\n      logger: {\n        level: 'info',\n        stream,\n        file: '/test'\n      }\n    });\n  } catch (err) {\n    t.equal(err.code, 'FST_ERR_LOG_INVALID_DESTINATION');\n    t.equal(err.message, 'Cannot specify both logger.stream and logger.file options');\n  }\n});","file":"internals/logger.test.js","skipped":false,"dir":"test"},{"name":"The serializer prevent fails if the request socket is undefined","suites":[],"updatePoint":{"line":122,"column":69,"index":2646},"line":122,"code":"test('The serializer prevent fails if the request socket is undefined', t => {\n  t.plan(1);\n  const serialized = loggerUtils.serializers.req({\n    method: 'GET',\n    url: '/',\n    socket: undefined,\n    headers: {}\n  });\n  t.same(serialized, {\n    method: 'GET',\n    url: '/',\n    version: undefined,\n    hostname: undefined,\n    remoteAddress: undefined,\n    remotePort: undefined\n  });\n});","file":"internals/logger.test.js","skipped":false,"dir":"test"},{"name":"shouldSkipOverride should check the 'skip-override' symbol","suites":[],"updatePoint":{"line":13,"column":64,"index":322},"line":13,"code":"test(\"shouldSkipOverride should check the 'skip-override' symbol\", t => {\n  t.plan(2);\n  yes[Symbol.for('skip-override')] = true;\n  t.ok(pluginUtils.shouldSkipOverride(yes));\n  t.notOk(pluginUtils.shouldSkipOverride(no));\n\n  function yes() {}\n\n  function no() {}\n});","file":"internals/plugin.test.js","skipped":false,"dir":"test"},{"name":"getPluginName should return plugin name if the file is cached","suites":[],"updatePoint":{"line":23,"column":67,"index":592},"line":23,"code":"test('getPluginName should return plugin name if the file is cached', t => {\n  t.plan(1);\n  const expectedPluginName = 'example';\n\n  const fn = () => console.log('is just an example');\n\n  require.cache[expectedPluginName] = {\n    exports: fn\n  };\n  const pluginName = pluginUtilsPublic.getPluginName(fn);\n  t.equal(pluginName, expectedPluginName);\n});","file":"internals/plugin.test.js","skipped":false,"dir":"test"},{"name":"getMeta should return the object stored with the 'plugin-meta' symbol","suites":[],"updatePoint":{"line":35,"column":75,"index":952},"line":35,"code":"test(\"getMeta should return the object stored with the 'plugin-meta' symbol\", t => {\n  t.plan(1);\n  const meta = {\n    hello: 'world'\n  };\n  fn[Symbol.for('plugin-meta')] = meta;\n  t.same(meta, pluginUtils.getMeta(fn));\n\n  function fn() {}\n});","file":"internals/plugin.test.js","skipped":false,"dir":"test"},{"name":"checkDecorators should check if the given decorator is present in the instance","suites":[],"updatePoint":{"line":45,"column":84,"index":1205},"line":45,"code":"test('checkDecorators should check if the given decorator is present in the instance', t => {\n  t.plan(1);\n  fn[Symbol.for('plugin-meta')] = {\n    decorators: {\n      fastify: ['plugin'],\n      reply: ['plugin'],\n      request: ['plugin']\n    }\n  };\n\n  function context() {}\n\n  context.plugin = true;\n  context[symbols.kReply] = {\n    prototype: {\n      plugin: true\n    },\n    props: []\n  };\n  context[symbols.kRequest] = {\n    prototype: {\n      plugin: true\n    },\n    props: []\n  };\n\n  try {\n    pluginUtils.checkDecorators.call(context, fn);\n    t.pass('Everything ok');\n  } catch (err) {\n    t.fail(err);\n  }\n\n  function fn() {}\n});","file":"internals/plugin.test.js","skipped":false,"dir":"test"},{"name":"checkDecorators should check if the given decorator is present in the instance (errored)","suites":[],"updatePoint":{"line":80,"column":94,"index":1854},"line":80,"code":"test('checkDecorators should check if the given decorator is present in the instance (errored)', t => {\n  t.plan(1);\n  fn[Symbol.for('plugin-meta')] = {\n    decorators: {\n      fastify: ['plugin'],\n      reply: ['plugin'],\n      request: ['plugin']\n    }\n  };\n\n  function context() {}\n\n  context.plugin = true;\n  context[symbols.kReply] = {\n    prototype: {\n      plugin: true\n    },\n    props: []\n  };\n  context[symbols.kRequest] = {\n    prototype: {},\n    props: []\n  };\n\n  try {\n    pluginUtils.checkDecorators.call(context, fn);\n    t.fail('should throw');\n  } catch (err) {\n    t.equal(err.message, \"The decorator 'plugin' is not present in Request\");\n  }\n\n  function fn() {}\n});","file":"internals/plugin.test.js","skipped":false,"dir":"test"},{"name":"checkDecorators should accept optional decorators","suites":[],"updatePoint":{"line":113,"column":55,"index":2500},"line":113,"code":"test('checkDecorators should accept optional decorators', t => {\n  t.plan(1);\n  fn[Symbol.for('plugin-meta')] = {\n    decorators: {}\n  };\n\n  function context() {}\n\n  context.plugin = true;\n  context[symbols.kReply] = {\n    prototype: {\n      plugin: true\n    }\n  };\n  context[symbols.kRequest] = {\n    prototype: {\n      plugin: true\n    }\n  };\n\n  try {\n    pluginUtils.checkDecorators.call(context, fn);\n    t.pass('Everything ok');\n  } catch (err) {\n    t.fail(err);\n  }\n\n  function fn() {}\n});","file":"internals/plugin.test.js","skipped":false,"dir":"test"},{"name":"checkDependencies should check if the given dependency is present in the instance","suites":[],"updatePoint":{"line":142,"column":87,"index":3029},"line":142,"code":"test('checkDependencies should check if the given dependency is present in the instance', t => {\n  t.plan(1);\n  fn[Symbol.for('plugin-meta')] = {\n    dependencies: ['plugin']\n  };\n\n  function context() {}\n\n  context[pluginUtilsPublic.registeredPlugins] = ['plugin'];\n\n  try {\n    pluginUtils.checkDependencies.call(context, fn);\n    t.pass('Everything ok');\n  } catch (err) {\n    t.fail(err);\n  }\n\n  function fn() {}\n});","file":"internals/plugin.test.js","skipped":false,"dir":"test"},{"name":"checkDependencies should check if the given dependency is present in the instance (errored)","suites":[],"updatePoint":{"line":161,"column":97,"index":3460},"line":161,"code":"test('checkDependencies should check if the given dependency is present in the instance (errored)', t => {\n  t.plan(1);\n  fn[Symbol.for('plugin-meta')] = {\n    name: 'test-plugin',\n    dependencies: ['plugin']\n  };\n\n  function context() {}\n\n  context[pluginUtilsPublic.registeredPlugins] = [];\n\n  try {\n    pluginUtils.checkDependencies.call(context, fn);\n    t.fail('should throw');\n  } catch (err) {\n    t.equal(err.message, \"The dependency 'plugin' of plugin 'test-plugin' is not registered\");\n  }\n\n  function fn() {}\n});","file":"internals/plugin.test.js","skipped":false,"dir":"test"},{"name":"Reply#compileSerializationSchema","suites":[],"updatePoint":{"line":63,"column":38,"index":986},"line":63,"code":"test('Reply#compileSerializationSchema', t => {\n  t.plan(4);\n  t.test('Should return a serialization function', async t => {\n    const fastify = Fastify();\n    t.plan(4);\n    fastify.get('/', (req, reply) => {\n      const serialize = reply.compileSerializationSchema(getDefaultSchema());\n      const input = {\n        hello: 'world'\n      };\n      t.type(serialize, Function);\n      t.type(serialize(input), 'string');\n      t.equal(serialize(input), JSON.stringify(input));\n\n      try {\n        serialize({\n          world: 'foo'\n        });\n      } catch (err) {\n        t.equal(err.message, '\"hello\" is required!');\n      }\n\n      reply.send({\n        hello: 'world'\n      });\n    });\n    await fastify.inject({\n      path: '/',\n      method: 'GET'\n    });\n  });\n  t.test('Should reuse the serialize fn across multiple invocations - Route without schema', async t => {\n    const fastify = Fastify();\n    let serialize = null;\n    let counter = 0;\n    t.plan(17);\n    const schemaObj = getDefaultSchema();\n    fastify.get('/', (req, reply) => {\n      const input = {\n        hello: 'world'\n      };\n      counter++;\n\n      if (counter > 1) {\n        const newSerialize = reply.compileSerializationSchema(schemaObj);\n        t.equal(serialize, newSerialize, 'Are the same validate function');\n        serialize = newSerialize;\n      } else {\n        t.pass('build the schema compilation function');\n        serialize = reply.compileSerializationSchema(schemaObj);\n      }\n\n      t.type(serialize, Function);\n      t.equal(serialize(input), JSON.stringify(input));\n\n      try {\n        serialize({\n          world: 'foo'\n        });\n      } catch (err) {\n        t.equal(err.message, '\"hello\" is required!');\n      }\n\n      reply.send({\n        hello: 'world'\n      });\n    });\n    await Promise.all([fastify.inject('/'), fastify.inject('/'), fastify.inject('/'), fastify.inject('/')]);\n    t.equal(counter, 4);\n  });\n  t.test('Should use the custom serializer compiler for the route', async t => {\n    const fastify = Fastify();\n    let called = 0;\n\n    const custom = ({\n      schema,\n      httpStatus,\n      url,\n      method\n    }) => {\n      t.equal(schema, schemaObj);\n      t.equal(url, '/');\n      t.equal(method, 'GET');\n      t.equal(httpStatus, '201');\n      return input => {\n        called++;\n        t.same(input, {\n          hello: 'world'\n        });\n        return JSON.stringify(input);\n      };\n    };\n\n    t.plan(10);\n    const schemaObj = getDefaultSchema();\n    fastify.get('/', {\n      serializerCompiler: custom\n    }, (req, reply) => {\n      const input = {\n        hello: 'world'\n      };\n      const first = reply.compileSerializationSchema(schemaObj, '201');\n      const second = reply.compileSerializationSchema(schemaObj, '201');\n      t.equal(first, second);\n      t.ok(first(input), JSON.stringify(input));\n      t.ok(second(input), JSON.stringify(input));\n      t.equal(called, 2);\n      reply.send({\n        hello: 'world'\n      });\n    });\n    await fastify.inject({\n      path: '/',\n      method: 'GET'\n    });\n  });\n  t.test('Should build a WeakMap for cache when called', async t => {\n    const fastify = Fastify();\n    t.plan(4);\n    fastify.get('/', (req, reply) => {\n      const input = {\n        hello: 'world'\n      };\n      t.equal(reply[kRouteContext][kReplySerializeWeakMap], null);\n      t.equal(reply.compileSerializationSchema(getDefaultSchema())(input), JSON.stringify(input));\n      t.type(reply[kRouteContext][kReplySerializeWeakMap], WeakMap);\n      t.equal(reply.compileSerializationSchema(getDefaultSchema())(input), JSON.stringify(input));\n      reply.send({\n        hello: 'world'\n      });\n    });\n    await fastify.inject({\n      path: '/',\n      method: 'GET'\n    });\n  });\n});","file":"internals/reply-serialize.test.js","skipped":false,"dir":"test"},{"name":"Reply#getSerializationFunction","suites":[],"updatePoint":{"line":200,"column":36,"index":4722},"line":200,"code":"test('Reply#getSerializationFunction', t => {\n  t.plan(3);\n  t.test('Should retrieve the serialization function from the Schema definition', async t => {\n    const fastify = Fastify();\n    const okInput201 = {\n      status: 'ok',\n      message: 'done!'\n    };\n    const notOkInput201 = {\n      message: 'created'\n    };\n    const okInput4xx = {\n      status: 'error',\n      code: 2,\n      message: 'oops!'\n    };\n    const notOkInput4xx = {\n      status: 'error',\n      code: 'something'\n    };\n    let cached4xx;\n    let cached201;\n    t.plan(9);\n    const responseSchema = getResponseSchema();\n    fastify.get('/:id', {\n      params: {\n        id: {\n          type: 'integer'\n        }\n      },\n      schema: {\n        response: responseSchema\n      }\n    }, (req, reply) => {\n      const {\n        id\n      } = req.params;\n\n      if (Number(id) === 1) {\n        const serialize4xx = reply.getSerializationFunction('4xx');\n        const serialize201 = reply.getSerializationFunction(201);\n        const serializeUndefined = reply.getSerializationFunction(undefined);\n        cached4xx = serialize4xx;\n        cached201 = serialize201;\n        t.type(serialize4xx, Function);\n        t.type(serialize201, Function);\n        t.equal(serialize4xx(okInput4xx), JSON.stringify(okInput4xx));\n        t.equal(serialize201(okInput201), JSON.stringify(okInput201));\n        t.notOk(serializeUndefined);\n\n        try {\n          serialize4xx(notOkInput4xx);\n        } catch (err) {\n          t.equal(err.message, 'The value \"something\" cannot be converted to an integer.');\n        }\n\n        try {\n          serialize201(notOkInput201);\n        } catch (err) {\n          t.equal(err.message, '\"status\" is required!');\n        }\n\n        reply.status(201).send(okInput201);\n      } else {\n        const serialize201 = reply.getSerializationFunction(201);\n        const serialize4xx = reply.getSerializationFunction('4xx');\n        t.equal(serialize4xx, cached4xx);\n        t.equal(serialize201, cached201);\n        reply.status(401).send(okInput4xx);\n      }\n    });\n    await Promise.all([fastify.inject('/1'), fastify.inject('/2')]);\n  });\n  t.test('Should retrieve the serialization function from the cached one', async t => {\n    const fastify = Fastify();\n    const schemaObj = getDefaultSchema();\n    const okInput = {\n      hello: 'world',\n      world: 'done!'\n    };\n    const notOkInput = {\n      world: 'done!'\n    };\n    let cached;\n    t.plan(6);\n    fastify.get('/:id', {\n      params: {\n        id: {\n          type: 'integer'\n        }\n      }\n    }, (req, reply) => {\n      const {\n        id\n      } = req.params;\n\n      if (Number(id) === 1) {\n        const serialize = reply.compileSerializationSchema(schemaObj);\n        t.type(serialize, Function);\n        t.equal(serialize(okInput), JSON.stringify(okInput));\n\n        try {\n          serialize(notOkInput);\n        } catch (err) {\n          t.equal(err.message, '\"hello\" is required!');\n        }\n\n        cached = serialize;\n      } else {\n        const serialize = reply.getSerializationFunction(schemaObj);\n        t.equal(serialize, cached);\n        t.equal(serialize(okInput), JSON.stringify(okInput));\n\n        try {\n          serialize(notOkInput);\n        } catch (err) {\n          t.equal(err.message, '\"hello\" is required!');\n        }\n      }\n\n      reply.status(201).send(okInput);\n    });\n    await Promise.all([fastify.inject('/1'), fastify.inject('/2')]);\n  });\n  t.test('Should not instantiate a WeakMap if it is not needed', async t => {\n    const fastify = Fastify();\n    t.plan(4);\n    fastify.get('/', (req, reply) => {\n      t.notOk(reply.getSerializationFunction(getDefaultSchema()));\n      t.equal(reply[kRouteContext][kReplySerializeWeakMap], null);\n      t.notOk(reply.getSerializationFunction('200'));\n      t.equal(reply[kRouteContext][kReplySerializeWeakMap], null);\n      reply.send({\n        hello: 'world'\n      });\n    });\n    await fastify.inject({\n      path: '/',\n      method: 'GET'\n    });\n  });\n});","file":"internals/reply-serialize.test.js","skipped":false,"dir":"test"},{"name":"Reply#serializeInput","suites":[],"updatePoint":{"line":342,"column":26,"index":8714},"line":342,"code":"test('Reply#serializeInput', t => {\n  t.plan(5);\n  t.test('Should throw if missed serialization function from HTTP status', async t => {\n    const fastify = Fastify();\n    t.plan(2);\n    fastify.get('/', (req, reply) => {\n      reply.serializeInput({}, 201);\n    });\n    const result = await fastify.inject({\n      path: '/',\n      method: 'GET'\n    });\n    t.equal(result.statusCode, 500);\n    t.same(result.json(), {\n      statusCode: 500,\n      code: 'FST_ERR_MISSING_SERIALIZATION_FN',\n      error: 'Internal Server Error',\n      message: 'Missing serialization function. Key \"201\"'\n    });\n  });\n  t.test('Should use a serializer fn from HTTP status', async t => {\n    const fastify = Fastify();\n    const okInput201 = {\n      status: 'ok',\n      message: 'done!'\n    };\n    const notOkInput201 = {\n      message: 'created'\n    };\n    const okInput4xx = {\n      status: 'error',\n      code: 2,\n      message: 'oops!'\n    };\n    const notOkInput4xx = {\n      status: 'error',\n      code: 'something'\n    };\n    t.plan(4);\n    fastify.get('/', {\n      params: {\n        id: {\n          type: 'integer'\n        }\n      },\n      schema: {\n        response: getResponseSchema()\n      }\n    }, (req, reply) => {\n      t.equal(reply.serializeInput(okInput4xx, '4xx'), JSON.stringify(okInput4xx));\n      t.equal(reply.serializeInput(okInput201, 201), JSON.stringify(okInput201));\n\n      try {\n        reply.serializeInput(notOkInput4xx, '4xx');\n      } catch (err) {\n        t.equal(err.message, 'The value \"something\" cannot be converted to an integer.');\n      }\n\n      try {\n        reply.serializeInput(notOkInput201, 201);\n      } catch (err) {\n        t.equal(err.message, '\"status\" is required!');\n      }\n\n      reply.status(204).send('');\n    });\n    await fastify.inject({\n      path: '/',\n      method: 'GET'\n    });\n  });\n  t.test('Should compile a serializer out of a schema if serializer fn missed', async t => {\n    let compilerCalled = 0;\n    let serializerCalled = 0;\n    const testInput = {\n      hello: 'world'\n    };\n    const schemaObj = getDefaultSchema();\n    const fastify = Fastify();\n\n    const serializerCompiler = ({\n      schema,\n      httpStatus,\n      method,\n      url\n    }) => {\n      t.equal(schema, schemaObj);\n      t.notOk(httpStatus);\n      t.equal(method, 'GET');\n      t.equal(url, '/');\n      compilerCalled++;\n      return input => {\n        t.equal(input, testInput);\n        serializerCalled++;\n        return JSON.stringify(input);\n      };\n    };\n\n    t.plan(10);\n    fastify.get('/', {\n      serializerCompiler\n    }, (req, reply) => {\n      t.equal(reply.serializeInput(testInput, schemaObj), JSON.stringify(testInput));\n      t.equal(reply.serializeInput(testInput, schemaObj), JSON.stringify(testInput));\n      reply.status(201).send(testInput);\n    });\n    await fastify.inject({\n      path: '/',\n      method: 'GET'\n    });\n    t.equal(compilerCalled, 1);\n    t.equal(serializerCalled, 2);\n  });\n  t.test('Should use a cached serializer fn', async t => {\n    let compilerCalled = 0;\n    let serializerCalled = 0;\n    let cached;\n    const testInput = {\n      hello: 'world'\n    };\n    const schemaObj = getDefaultSchema();\n    const fastify = Fastify();\n\n    const serializer = input => {\n      t.equal(input, testInput);\n      serializerCalled++;\n      return JSON.stringify(input);\n    };\n\n    const serializerCompiler = ({\n      schema,\n      httpStatus,\n      method,\n      url\n    }) => {\n      t.equal(schema, schemaObj);\n      t.notOk(httpStatus);\n      t.equal(method, 'GET');\n      t.equal(url, '/');\n      compilerCalled++;\n      return serializer;\n    };\n\n    t.plan(12);\n    fastify.get('/', {\n      serializerCompiler\n    }, (req, reply) => {\n      t.equal(reply.serializeInput(testInput, schemaObj), JSON.stringify(testInput));\n      cached = reply.getSerializationFunction(schemaObj);\n      t.equal(reply.serializeInput(testInput, schemaObj), cached(testInput));\n      reply.status(201).send(testInput);\n    });\n    await fastify.inject({\n      path: '/',\n      method: 'GET'\n    });\n    t.equal(cached, serializer);\n    t.equal(compilerCalled, 1);\n    t.equal(serializerCalled, 3);\n  });\n  t.test('Should instantiate a WeakMap after first call', async t => {\n    const fastify = Fastify();\n    t.plan(3);\n    fastify.get('/', (req, reply) => {\n      const input = {\n        hello: 'world'\n      };\n      t.equal(reply[kRouteContext][kReplySerializeWeakMap], null);\n      t.equal(reply.serializeInput(input, getDefaultSchema()), JSON.stringify(input));\n      t.type(reply[kRouteContext][kReplySerializeWeakMap], WeakMap);\n      reply.send({\n        hello: 'world'\n      });\n    });\n    await fastify.inject({\n      path: '/',\n      method: 'GET'\n    });\n  });\n});","file":"internals/reply-serialize.test.js","skipped":false,"dir":"test"},{"name":"Once called, Reply should return an object with methods","suites":[],"updatePoint":{"line":54,"column":61,"index":949},"line":54,"code":"test('Once called, Reply should return an object with methods', t => {\n  t.plan(13);\n  const response = {\n    res: 'res'\n  };\n  const context = {};\n  const request = {\n    [kRouteContext]: context\n  };\n  const reply = new Reply(response, request);\n  t.equal(typeof reply, 'object');\n  t.equal(typeof reply[kReplyIsError], 'boolean');\n  t.equal(typeof reply[kReplyErrorHandlerCalled], 'boolean');\n  t.equal(typeof reply.send, 'function');\n  t.equal(typeof reply.code, 'function');\n  t.equal(typeof reply.status, 'function');\n  t.equal(typeof reply.header, 'function');\n  t.equal(typeof reply.serialize, 'function');\n  t.equal(typeof reply.getResponseTime, 'function');\n  t.equal(typeof reply[kReplyHeaders], 'object');\n  t.same(reply.raw, response);\n  t.equal(reply[kRouteContext], context);\n  t.equal(reply.request, request);\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"reply.send will logStream error and destroy the stream","suites":[],"updatePoint":{"line":78,"column":60,"index":1778},"line":78,"code":"test('reply.send will logStream error and destroy the stream', t => {\n  t.plan(1);\n  let destroyCalled;\n  const payload = new Readable({\n    read() {},\n\n    destroy(err, cb) {\n      destroyCalled = true;\n      cb(err);\n    }\n\n  });\n  const response = new Writable();\n  Object.assign(response, {\n    setHeader: () => {},\n    hasHeader: () => false,\n    getHeader: () => undefined,\n    writeHead: () => {},\n    write: () => {},\n    headersSent: true\n  });\n  const log = {\n    warn: () => {}\n  };\n  const reply = new Reply(response, {\n    [kRouteContext]: {\n      onSend: null\n    }\n  }, log);\n  reply.send(payload);\n  payload.destroy(new Error('stream error'));\n  t.equal(destroyCalled, true, 'Error not logged and not streamed');\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"reply.send throw with circular JSON","suites":[],"updatePoint":{"line":111,"column":41,"index":2492},"line":111,"code":"test('reply.send throw with circular JSON', t => {\n  t.plan(1);\n  const response = {\n    setHeader: () => {},\n    hasHeader: () => false,\n    getHeader: () => undefined,\n    writeHead: () => {},\n    write: () => {},\n    end: () => {}\n  };\n  const reply = new Reply(response, {\n    [kRouteContext]: {\n      onSend: []\n    }\n  });\n  t.throws(() => {\n    const obj = {};\n    obj.obj = obj;\n    reply.send(JSON.stringify(obj));\n  }, 'Converting circular structure to JSON');\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"reply.send returns itself","suites":[],"updatePoint":{"line":132,"column":31,"index":2957},"line":132,"code":"test('reply.send returns itself', t => {\n  t.plan(1);\n  const response = {\n    setHeader: () => {},\n    hasHeader: () => false,\n    getHeader: () => undefined,\n    writeHead: () => {},\n    write: () => {},\n    end: () => {}\n  };\n  const reply = new Reply(response, {\n    [kRouteContext]: {\n      onSend: []\n    }\n  });\n  t.equal(reply.send('hello'), reply);\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"reply.serializer should set a custom serializer","suites":[],"updatePoint":{"line":149,"column":53,"index":3341},"line":149,"code":"test('reply.serializer should set a custom serializer', t => {\n  t.plan(2);\n  const reply = new Reply(null, null, null);\n  t.equal(reply[kReplySerializer], null);\n  reply.serializer('serializer');\n  t.equal(reply[kReplySerializer], 'serializer');\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"reply.serializer should support running preSerialization hooks","suites":[],"updatePoint":{"line":156,"column":68,"index":3607},"line":156,"code":"test('reply.serializer should support running preSerialization hooks', t => {\n  t.plan(3);\n\n  const fastify = require('../..')();\n\n  fastify.addHook('preSerialization', async (request, reply, payload) => {\n    t.ok('called', 'preSerialization');\n  });\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    handler: (req, reply) => {\n      reply.type('application/json').serializer(JSON.stringify).send({\n        foo: 'bar'\n      });\n    }\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.payload, '{\"foo\":\"bar\"}');\n  });\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"reply.serialize should serialize payload","suites":[],"updatePoint":{"line":181,"column":46,"index":4174},"line":181,"code":"test('reply.serialize should serialize payload', t => {\n  t.plan(1);\n  const response = {\n    statusCode: 200\n  };\n  const context = {};\n  const reply = new Reply(response, {\n    [kRouteContext]: context\n  });\n  t.equal(reply.serialize({\n    foo: 'bar'\n  }), '{\"foo\":\"bar\"}');\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"reply.serialize should serialize payload with a custom serializer","suites":[],"updatePoint":{"line":194,"column":71,"index":4480},"line":194,"code":"test('reply.serialize should serialize payload with a custom serializer', t => {\n  t.plan(2);\n  let customSerializerCalled = false;\n  const response = {\n    statusCode: 200\n  };\n  const context = {};\n  const reply = new Reply(response, {\n    [kRouteContext]: context\n  });\n  reply.serializer(x => (customSerializerCalled = true) && JSON.stringify(x));\n  t.equal(reply.serialize({\n    foo: 'bar'\n  }), '{\"foo\":\"bar\"}');\n  t.equal(customSerializerCalled, true, 'custom serializer not called');\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"reply.serialize should serialize payload with a context default serializer","suites":[],"updatePoint":{"line":210,"column":80,"index":4985},"line":210,"code":"test('reply.serialize should serialize payload with a context default serializer', t => {\n  t.plan(2);\n  let customSerializerCalled = false;\n  const response = {\n    statusCode: 200\n  };\n  const context = {\n    [kReplySerializerDefault]: x => (customSerializerCalled = true) && JSON.stringify(x)\n  };\n  const reply = new Reply(response, {\n    [kRouteContext]: context\n  });\n  t.equal(reply.serialize({\n    foo: 'bar'\n  }), '{\"foo\":\"bar\"}');\n  t.equal(customSerializerCalled, true, 'custom serializer not called');\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"reply.serialize should serialize payload with Fastify instance","suites":[],"updatePoint":{"line":227,"column":68,"index":5491},"line":227,"code":"test('reply.serialize should serialize payload with Fastify instance', t => {\n  t.plan(2);\n\n  const fastify = require('../..')();\n\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    schema: {\n      response: {\n        200: {\n          type: 'object',\n          properties: {\n            foo: {\n              type: 'string'\n            }\n          }\n        }\n      }\n    },\n    handler: (req, reply) => {\n      reply.send(reply.serialize({\n        foo: 'bar'\n      }));\n    }\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.payload, '{\"foo\":\"bar\"}');\n  });\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"within an instance","suites":[],"updatePoint":{"line":261,"column":24,"index":6076},"line":261,"code":"test('within an instance', t => {\n  const fastify = require('../..')();\n\n  const test = t.test;\n  fastify.get('/', function (req, reply) {\n    reply.code(200);\n    reply.header('Content-Type', 'text/plain');\n    reply.send('hello world!');\n  });\n  fastify.get('/auto-type', function (req, reply) {\n    reply.code(200);\n    reply.type('text/plain');\n    reply.send('hello world!');\n  });\n  fastify.get('/auto-status-code', function (req, reply) {\n    reply.send('hello world!');\n  });\n  fastify.get('/redirect', function (req, reply) {\n    reply.redirect('/');\n  });\n  fastify.get('/redirect-async', async function (req, reply) {\n    return reply.redirect('/');\n  });\n  fastify.get('/redirect-code', function (req, reply) {\n    reply.redirect(301, '/');\n  });\n  fastify.get('/redirect-code-before-call', function (req, reply) {\n    reply.code(307).redirect('/');\n  });\n  fastify.get('/redirect-code-before-call-overwrite', function (req, reply) {\n    reply.code(307).redirect(302, '/');\n  });\n  fastify.get('/custom-serializer', function (req, reply) {\n    reply.code(200);\n    reply.type('text/plain');\n    reply.serializer(function (body) {\n      return require('querystring').stringify(body);\n    });\n    reply.send({\n      hello: 'world!'\n    });\n  });\n  fastify.register(function (instance, options, done) {\n    fastify.addHook('onSend', function (req, reply, payload, done) {\n      reply.header('x-onsend', 'yes');\n      done();\n    });\n    fastify.get('/redirect-onsend', function (req, reply) {\n      reply.redirect('/');\n    });\n    done();\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(fastify.close.bind(fastify));\n    test('custom serializer should be used', t => {\n      t.plan(3);\n      sget({\n        method: 'GET',\n        url: 'http://localhost:' + fastify.server.address().port + '/custom-serializer'\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.headers['content-type'], 'text/plain');\n        t.same(body.toString(), 'hello=world!');\n      });\n    });\n    test('status code and content-type should be correct', t => {\n      t.plan(4);\n      sget({\n        method: 'GET',\n        url: 'http://localhost:' + fastify.server.address().port\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 200);\n        t.equal(response.headers['content-type'], 'text/plain');\n        t.same(body.toString(), 'hello world!');\n      });\n    });\n    test('auto status code shoud be 200', t => {\n      t.plan(3);\n      sget({\n        method: 'GET',\n        url: 'http://localhost:' + fastify.server.address().port + '/auto-status-code'\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 200);\n        t.same(body.toString(), 'hello world!');\n      });\n    });\n    test('auto type shoud be text/plain', t => {\n      t.plan(3);\n      sget({\n        method: 'GET',\n        url: 'http://localhost:' + fastify.server.address().port + '/auto-type'\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.headers['content-type'], 'text/plain');\n        t.same(body.toString(), 'hello world!');\n      });\n    });\n    test('redirect to `/` - 1', t => {\n      t.plan(1);\n      http.get('http://localhost:' + fastify.server.address().port + '/redirect', function (response) {\n        t.equal(response.statusCode, 302);\n      });\n    });\n    test('redirect to `/` - 2', t => {\n      t.plan(1);\n      http.get('http://localhost:' + fastify.server.address().port + '/redirect-code', function (response) {\n        t.equal(response.statusCode, 301);\n      });\n    });\n    test('redirect to `/` - 3', t => {\n      t.plan(4);\n      sget({\n        method: 'GET',\n        url: 'http://localhost:' + fastify.server.address().port + '/redirect'\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 200);\n        t.equal(response.headers['content-type'], 'text/plain');\n        t.same(body.toString(), 'hello world!');\n      });\n    });\n    test('redirect to `/` - 4', t => {\n      t.plan(4);\n      sget({\n        method: 'GET',\n        url: 'http://localhost:' + fastify.server.address().port + '/redirect-code'\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 200);\n        t.equal(response.headers['content-type'], 'text/plain');\n        t.same(body.toString(), 'hello world!');\n      });\n    });\n    test('redirect to `/` - 5', t => {\n      t.plan(3);\n      const url = 'http://localhost:' + fastify.server.address().port + '/redirect-onsend';\n      http.get(url, response => {\n        t.equal(response.headers['x-onsend'], 'yes');\n        t.equal(response.headers['content-length'], '0');\n        t.equal(response.headers.location, '/');\n      });\n    });\n    test('redirect to `/` - 6', t => {\n      t.plan(4);\n      sget({\n        method: 'GET',\n        url: 'http://localhost:' + fastify.server.address().port + '/redirect-code-before-call'\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 200);\n        t.equal(response.headers['content-type'], 'text/plain');\n        t.same(body.toString(), 'hello world!');\n      });\n    });\n    test('redirect to `/` - 7', t => {\n      t.plan(4);\n      sget({\n        method: 'GET',\n        url: 'http://localhost:' + fastify.server.address().port + '/redirect-code-before-call-overwrite'\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 200);\n        t.equal(response.headers['content-type'], 'text/plain');\n        t.same(body.toString(), 'hello world!');\n      });\n    });\n    test('redirect to `/` - 8', t => {\n      t.plan(1);\n      http.get('http://localhost:' + fastify.server.address().port + '/redirect-code-before-call', function (response) {\n        t.equal(response.statusCode, 307);\n      });\n    });\n    test('redirect to `/` - 9', t => {\n      t.plan(1);\n      http.get('http://localhost:' + fastify.server.address().port + '/redirect-code-before-call-overwrite', function (response) {\n        t.equal(response.statusCode, 302);\n      });\n    });\n    test('redirect with async function to `/` - 10', t => {\n      t.plan(1);\n      http.get('http://localhost:' + fastify.server.address().port + '/redirect-async', function (response) {\n        t.equal(response.statusCode, 302);\n      });\n    });\n    t.end();\n  });\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"custom serializer should be used","suites":[],"updatePoint":{"line":318,"column":42,"index":7757},"line":318,"code":"    test('custom serializer should be used', t => {\n      t.plan(3);\n      sget({\n        method: 'GET',\n        url: 'http://localhost:' + fastify.server.address().port + '/custom-serializer'\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.headers['content-type'], 'text/plain');\n        t.same(body.toString(), 'hello=world!');\n      });\n    });","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"status code and content-type should be correct","suites":[],"updatePoint":{"line":329,"column":56,"index":8154},"line":329,"code":"    test('status code and content-type should be correct', t => {\n      t.plan(4);\n      sget({\n        method: 'GET',\n        url: 'http://localhost:' + fastify.server.address().port\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 200);\n        t.equal(response.headers['content-type'], 'text/plain');\n        t.same(body.toString(), 'hello world!');\n      });\n    });","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"auto status code shoud be 200","suites":[],"updatePoint":{"line":341,"column":39,"index":8554},"line":341,"code":"    test('auto status code shoud be 200', t => {\n      t.plan(3);\n      sget({\n        method: 'GET',\n        url: 'http://localhost:' + fastify.server.address().port + '/auto-status-code'\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 200);\n        t.same(body.toString(), 'hello world!');\n      });\n    });","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"auto type shoud be text/plain","suites":[],"updatePoint":{"line":352,"column":39,"index":8911},"line":352,"code":"    test('auto type shoud be text/plain', t => {\n      t.plan(3);\n      sget({\n        method: 'GET',\n        url: 'http://localhost:' + fastify.server.address().port + '/auto-type'\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.headers['content-type'], 'text/plain');\n        t.same(body.toString(), 'hello world!');\n      });\n    });","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"redirect to `/` - 1","suites":[],"updatePoint":{"line":363,"column":29,"index":9273},"line":363,"code":"    test('redirect to `/` - 1', t => {\n      t.plan(1);\n      http.get('http://localhost:' + fastify.server.address().port + '/redirect', function (response) {\n        t.equal(response.statusCode, 302);\n      });\n    });","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"redirect to `/` - 2","suites":[],"updatePoint":{"line":369,"column":29,"index":9494},"line":369,"code":"    test('redirect to `/` - 2', t => {\n      t.plan(1);\n      http.get('http://localhost:' + fastify.server.address().port + '/redirect-code', function (response) {\n        t.equal(response.statusCode, 301);\n      });\n    });","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"redirect to `/` - 3","suites":[],"updatePoint":{"line":375,"column":29,"index":9720},"line":375,"code":"    test('redirect to `/` - 3', t => {\n      t.plan(4);\n      sget({\n        method: 'GET',\n        url: 'http://localhost:' + fastify.server.address().port + '/redirect'\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 200);\n        t.equal(response.headers['content-type'], 'text/plain');\n        t.same(body.toString(), 'hello world!');\n      });\n    });","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"redirect to `/` - 4","suites":[],"updatePoint":{"line":387,"column":29,"index":10124},"line":387,"code":"    test('redirect to `/` - 4', t => {\n      t.plan(4);\n      sget({\n        method: 'GET',\n        url: 'http://localhost:' + fastify.server.address().port + '/redirect-code'\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 200);\n        t.equal(response.headers['content-type'], 'text/plain');\n        t.same(body.toString(), 'hello world!');\n      });\n    });","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"redirect to `/` - 5","suites":[],"updatePoint":{"line":399,"column":29,"index":10533},"line":399,"code":"    test('redirect to `/` - 5', t => {\n      t.plan(3);\n      const url = 'http://localhost:' + fastify.server.address().port + '/redirect-onsend';\n      http.get(url, response => {\n        t.equal(response.headers['x-onsend'], 'yes');\n        t.equal(response.headers['content-length'], '0');\n        t.equal(response.headers.location, '/');\n      });\n    });","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"redirect to `/` - 6","suites":[],"updatePoint":{"line":408,"column":29,"index":10894},"line":408,"code":"    test('redirect to `/` - 6', t => {\n      t.plan(4);\n      sget({\n        method: 'GET',\n        url: 'http://localhost:' + fastify.server.address().port + '/redirect-code-before-call'\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 200);\n        t.equal(response.headers['content-type'], 'text/plain');\n        t.same(body.toString(), 'hello world!');\n      });\n    });","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"redirect to `/` - 7","suites":[],"updatePoint":{"line":420,"column":29,"index":11315},"line":420,"code":"    test('redirect to `/` - 7', t => {\n      t.plan(4);\n      sget({\n        method: 'GET',\n        url: 'http://localhost:' + fastify.server.address().port + '/redirect-code-before-call-overwrite'\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 200);\n        t.equal(response.headers['content-type'], 'text/plain');\n        t.same(body.toString(), 'hello world!');\n      });\n    });","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"redirect to `/` - 8","suites":[],"updatePoint":{"line":432,"column":29,"index":11746},"line":432,"code":"    test('redirect to `/` - 8', t => {\n      t.plan(1);\n      http.get('http://localhost:' + fastify.server.address().port + '/redirect-code-before-call', function (response) {\n        t.equal(response.statusCode, 307);\n      });\n    });","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"redirect to `/` - 9","suites":[],"updatePoint":{"line":438,"column":29,"index":11984},"line":438,"code":"    test('redirect to `/` - 9', t => {\n      t.plan(1);\n      http.get('http://localhost:' + fastify.server.address().port + '/redirect-code-before-call-overwrite', function (response) {\n        t.equal(response.statusCode, 302);\n      });\n    });","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"redirect with async function to `/` - 10","suites":[],"updatePoint":{"line":444,"column":50,"index":12253},"line":444,"code":"    test('redirect with async function to `/` - 10', t => {\n      t.plan(1);\n      http.get('http://localhost:' + fastify.server.address().port + '/redirect-async', function (response) {\n        t.equal(response.statusCode, 302);\n      });\n    });","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"buffer without content type should send a application/octet-stream and raw buffer","suites":[],"updatePoint":{"line":453,"column":87,"index":12561},"line":453,"code":"test('buffer without content type should send a application/octet-stream and raw buffer', t => {\n  t.plan(4);\n\n  const fastify = require('../..')();\n\n  fastify.get('/', function (req, reply) {\n    reply.send(Buffer.alloc(1024));\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(fastify.close.bind(fastify));\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.headers['content-type'], 'application/octet-stream');\n      t.same(body, Buffer.alloc(1024));\n    });\n  });\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"buffer with content type should not send application/octet-stream","suites":[],"updatePoint":{"line":476,"column":71,"index":13172},"line":476,"code":"test('buffer with content type should not send application/octet-stream', t => {\n  t.plan(4);\n\n  const fastify = require('../..')();\n\n  fastify.get('/', function (req, reply) {\n    reply.header('Content-Type', 'text/plain');\n    reply.send(Buffer.alloc(1024));\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(fastify.close.bind(fastify));\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.headers['content-type'], 'text/plain');\n      t.same(body, Buffer.alloc(1024));\n    });\n  });\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"stream with content type should not send application/octet-stream","suites":[],"updatePoint":{"line":500,"column":71,"index":13817},"line":500,"code":"test('stream with content type should not send application/octet-stream', t => {\n  t.plan(4);\n\n  const fastify = require('../..')();\n\n  const streamPath = path.join(__dirname, '..', '..', 'package.json');\n  const stream = fs.createReadStream(streamPath);\n  const buf = fs.readFileSync(streamPath);\n  fastify.get('/', function (req, reply) {\n    reply.header('Content-Type', 'text/plain').send(stream);\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(fastify.close.bind(fastify));\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.headers['content-type'], 'text/plain');\n      t.same(body, buf);\n    });\n  });\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"stream without content type should not send application/octet-stream","suites":[],"updatePoint":{"line":526,"column":74,"index":14591},"line":526,"code":"test('stream without content type should not send application/octet-stream', t => {\n  t.plan(4);\n\n  const fastify = require('../..')();\n\n  const stream = fs.createReadStream(__filename);\n  const buf = fs.readFileSync(__filename);\n  fastify.get('/', function (req, reply) {\n    reply.send(stream);\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(fastify.close.bind(fastify));\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.headers['content-type'], undefined);\n      t.same(body, buf);\n    });\n  });\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"stream using reply.raw.writeHead should return customize headers","suites":[],"updatePoint":{"line":551,"column":70,"index":15250},"line":551,"code":"test('stream using reply.raw.writeHead should return customize headers', t => {\n  t.plan(6);\n\n  const fastify = require('../..')();\n\n  const fs = require('fs');\n\n  const path = require('path');\n\n  const streamPath = path.join(__dirname, '..', '..', 'package.json');\n  const stream = fs.createReadStream(streamPath);\n  const buf = fs.readFileSync(streamPath);\n  fastify.get('/', function (req, reply) {\n    reply.log.warn = function mockWarn(message) {\n      t.equal(message, 'response will send, but you shouldn\\'t use res.writeHead in stream mode');\n    };\n\n    reply.raw.writeHead(200, {\n      location: '/'\n    });\n    reply.send(stream);\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(fastify.close.bind(fastify));\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.headers.location, '/');\n      t.equal(response.headers['Content-Type'], undefined);\n      t.same(body, buf);\n    });\n  });\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"plain string without content type should send a text/plain","suites":[],"updatePoint":{"line":589,"column":64,"index":16299},"line":589,"code":"test('plain string without content type should send a text/plain', t => {\n  t.plan(4);\n\n  const fastify = require('../..')();\n\n  fastify.get('/', function (req, reply) {\n    reply.send('hello world!');\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(fastify.close.bind(fastify));\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.headers['content-type'], 'text/plain; charset=utf-8');\n      t.same(body.toString(), 'hello world!');\n    });\n  });\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"plain string with content type should be sent unmodified","suites":[],"updatePoint":{"line":612,"column":62,"index":16905},"line":612,"code":"test('plain string with content type should be sent unmodified', t => {\n  t.plan(4);\n\n  const fastify = require('../..')();\n\n  fastify.get('/', function (req, reply) {\n    reply.type('text/css').send('hello world!');\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(fastify.close.bind(fastify));\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.headers['content-type'], 'text/css');\n      t.same(body.toString(), 'hello world!');\n    });\n  });\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"plain string with content type and custom serializer should be serialized","suites":[],"updatePoint":{"line":635,"column":79,"index":17528},"line":635,"code":"test('plain string with content type and custom serializer should be serialized', t => {\n  t.plan(4);\n\n  const fastify = require('../..')();\n\n  fastify.get('/', function (req, reply) {\n    reply.serializer(() => 'serialized').type('text/css').send('hello world!');\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(fastify.close.bind(fastify));\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.headers['content-type'], 'text/css');\n      t.same(body.toString(), 'serialized');\n    });\n  });\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"plain string with content type application/json should NOT be serialized as json","suites":[],"updatePoint":{"line":658,"column":86,"index":18187},"line":658,"code":"test('plain string with content type application/json should NOT be serialized as json', t => {\n  t.plan(4);\n\n  const fastify = require('../..')();\n\n  fastify.get('/', function (req, reply) {\n    reply.type('application/json').send('{\"key\": \"hello world!\"}');\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(fastify.close.bind(fastify));\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.headers['content-type'], 'application/json; charset=utf-8');\n      t.same(body.toString(), '{\"key\": \"hello world!\"}');\n    });\n  });\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"plain string with custom json content type should NOT be serialized as json","suites":[],"updatePoint":{"line":681,"column":81,"index":18865},"line":681,"code":"test('plain string with custom json content type should NOT be serialized as json', t => {\n  t.plan(19);\n\n  const fastify = require('../..')();\n\n  const customSamples = {\n    collectionjson: {\n      mimeType: 'application/vnd.collection+json',\n      sample: '{\"collection\":{\"version\":\"1.0\",\"href\":\"http://api.example.com/people/\"}}'\n    },\n    hal: {\n      mimeType: 'application/hal+json',\n      sample: '{\"_links\":{\"self\":{\"href\":\"https://api.example.com/people/1\"}},\"name\":\"John Doe\"}'\n    },\n    jsonapi: {\n      mimeType: 'application/vnd.api+json',\n      sample: '{\"data\":{\"type\":\"people\",\"id\":\"1\"}}'\n    },\n    jsonld: {\n      mimeType: 'application/ld+json',\n      sample: '{\"@context\":\"https://json-ld.org/contexts/person.jsonld\",\"name\":\"John Doe\"}'\n    },\n    ndjson: {\n      mimeType: 'application/x-ndjson',\n      sample: '{\"a\":\"apple\",\"b\":{\"bb\":\"bubble\"}}\\n{\"c\":\"croissant\",\"bd\":{\"dd\":\"dribble\"}}'\n    },\n    siren: {\n      mimeType: 'application/vnd.siren+json',\n      sample: '{\"class\":\"person\",\"properties\":{\"name\":\"John Doe\"}}'\n    }\n  };\n  Object.keys(customSamples).forEach(path => {\n    fastify.get(`/${path}`, function (req, reply) {\n      reply.type(customSamples[path].mimeType).send(customSamples[path].sample);\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(fastify.close.bind(fastify));\n    Object.keys(customSamples).forEach(path => {\n      sget({\n        method: 'GET',\n        url: 'http://localhost:' + fastify.server.address().port + '/' + path\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.headers['content-type'], customSamples[path].mimeType + '; charset=utf-8');\n        t.same(body.toString(), customSamples[path].sample);\n      });\n    });\n  });\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"non-string with content type application/json SHOULD be serialized as json","suites":[],"updatePoint":{"line":734,"column":80,"index":20633},"line":734,"code":"test('non-string with content type application/json SHOULD be serialized as json', t => {\n  t.plan(4);\n\n  const fastify = require('../..')();\n\n  fastify.get('/', function (req, reply) {\n    reply.type('application/json').send({\n      key: 'hello world!'\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(fastify.close.bind(fastify));\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.headers['content-type'], 'application/json; charset=utf-8');\n      t.same(body.toString(), JSON.stringify({\n        key: 'hello world!'\n      }));\n    });\n  });\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"non-string with custom json's content-type SHOULD be serialized as json","suites":[],"updatePoint":{"line":761,"column":78,"index":21344},"line":761,"code":"test('non-string with custom json\\'s content-type SHOULD be serialized as json', t => {\n  t.plan(4);\n\n  const fastify = require('../..')();\n\n  fastify.get('/', function (req, reply) {\n    reply.type('application/json; version=2; ').send({\n      key: 'hello world!'\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(fastify.close.bind(fastify));\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.headers['content-type'], 'application/json; version=2; charset=utf-8');\n      t.same(body.toString(), JSON.stringify({\n        key: 'hello world!'\n      }));\n    });\n  });\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"non-string with custom json content type SHOULD be serialized as json","suites":[],"updatePoint":{"line":788,"column":75,"index":22076},"line":788,"code":"test('non-string with custom json content type SHOULD be serialized as json', t => {\n  t.plan(16);\n\n  const fastify = require('../..')();\n\n  const customSamples = {\n    collectionjson: {\n      mimeType: 'application/vnd.collection+json',\n      sample: JSON.parse('{\"collection\":{\"version\":\"1.0\",\"href\":\"http://api.example.com/people/\"}}')\n    },\n    hal: {\n      mimeType: 'application/hal+json',\n      sample: JSON.parse('{\"_links\":{\"self\":{\"href\":\"https://api.example.com/people/1\"}},\"name\":\"John Doe\"}')\n    },\n    jsonapi: {\n      mimeType: 'application/vnd.api+json',\n      sample: JSON.parse('{\"data\":{\"type\":\"people\",\"id\":\"1\"}}')\n    },\n    jsonld: {\n      mimeType: 'application/ld+json',\n      sample: JSON.parse('{\"@context\":\"https://json-ld.org/contexts/person.jsonld\",\"name\":\"John Doe\"}')\n    },\n    siren: {\n      mimeType: 'application/vnd.siren+json',\n      sample: JSON.parse('{\"class\":\"person\",\"properties\":{\"name\":\"John Doe\"}}')\n    }\n  };\n  Object.keys(customSamples).forEach(path => {\n    fastify.get(`/${path}`, function (req, reply) {\n      reply.type(customSamples[path].mimeType).send(customSamples[path].sample);\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(fastify.close.bind(fastify));\n    Object.keys(customSamples).forEach(path => {\n      sget({\n        method: 'GET',\n        url: 'http://localhost:' + fastify.server.address().port + '/' + path\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.headers['content-type'], customSamples[path].mimeType + '; charset=utf-8');\n        t.same(body.toString(), JSON.stringify(customSamples[path].sample));\n      });\n    });\n  });\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"error object with a content type that is not application/json should work","suites":[],"updatePoint":{"line":837,"column":79,"index":23767},"line":837,"code":"test('error object with a content type that is not application/json should work', t => {\n  t.plan(6);\n\n  const fastify = require('../..')();\n\n  fastify.get('/text', function (req, reply) {\n    reply.type('text/plain');\n    reply.send(new Error('some application error'));\n  });\n  fastify.get('/html', function (req, reply) {\n    reply.type('text/html');\n    reply.send(new Error('some application error'));\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/text'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 500);\n    t.equal(JSON.parse(res.payload).message, 'some application error');\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/html'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 500);\n    t.equal(JSON.parse(res.payload).message, 'some application error');\n  });\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"undefined payload should be sent as-is","suites":[],"updatePoint":{"line":867,"column":44,"index":24561},"line":867,"code":"test('undefined payload should be sent as-is', t => {\n  t.plan(6);\n\n  const fastify = require('../..')();\n\n  fastify.addHook('onSend', function (request, reply, payload, done) {\n    t.equal(payload, undefined);\n    done();\n  });\n  fastify.get('/', function (req, reply) {\n    reply.code(204).send();\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(fastify.close.bind(fastify));\n    sget({\n      method: 'GET',\n      url: `http://localhost:${fastify.server.address().port}`\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.headers['content-type'], undefined);\n      t.equal(response.headers['content-length'], undefined);\n      t.equal(body.length, 0);\n    });\n  });\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"for HEAD method, no body should be sent but content-length should be","suites":[],"updatePoint":{"line":895,"column":74,"index":25325},"line":895,"code":"test('for HEAD method, no body should be sent but content-length should be', t => {\n  t.plan(11);\n\n  const fastify = require('../..')();\n\n  const contentType = 'application/json; charset=utf-8';\n  const bodySize = JSON.stringify({\n    foo: 'bar'\n  }).length;\n  fastify.head('/', {\n    onSend: function (request, reply, payload, done) {\n      t.equal(payload, undefined);\n      done();\n    }\n  }, function (req, reply) {\n    reply.header('content-length', bodySize);\n    reply.header('content-type', contentType);\n    reply.code(200).send();\n  });\n  fastify.head('/with/null', {\n    onSend: function (request, reply, payload, done) {\n      t.equal(payload, 'null');\n      done();\n    }\n  }, function (req, reply) {\n    reply.header('content-length', bodySize);\n    reply.header('content-type', contentType);\n    reply.code(200).send(null);\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(fastify.close.bind(fastify));\n    sget({\n      method: 'HEAD',\n      url: `http://localhost:${fastify.server.address().port}`\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.headers['content-type'], contentType);\n      t.equal(response.headers['content-length'], bodySize.toString());\n      t.equal(body.length, 0);\n    });\n    sget({\n      method: 'HEAD',\n      url: `http://localhost:${fastify.server.address().port}/with/null`\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.headers['content-type'], contentType);\n      t.equal(response.headers['content-length'], bodySize.toString());\n      t.equal(body.length, 0);\n    });\n  });\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"reply.send(new NotFound()) should not invoke the 404 handler","suites":[],"updatePoint":{"line":949,"column":66,"index":26936},"line":949,"code":"test('reply.send(new NotFound()) should not invoke the 404 handler', t => {\n  t.plan(9);\n\n  const fastify = require('../..')();\n\n  fastify.setNotFoundHandler((req, reply) => {\n    t.fail('Should not be called');\n  });\n  fastify.get('/not-found', function (req, reply) {\n    reply.send(new NotFound());\n  });\n  fastify.register(function (instance, options, done) {\n    instance.get('/not-found', function (req, reply) {\n      reply.send(new NotFound());\n    });\n    done();\n  }, {\n    prefix: '/prefixed'\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(fastify.close.bind(fastify));\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/not-found'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 404);\n      t.equal(response.headers['content-type'], 'application/json; charset=utf-8');\n      t.same(JSON.parse(body.toString()), {\n        statusCode: 404,\n        error: 'Not Found',\n        message: 'Not Found'\n      });\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/prefixed/not-found'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 404);\n      t.equal(response.headers['content-type'], 'application/json; charset=utf-8');\n      t.same(JSON.parse(body), {\n        error: 'Not Found',\n        message: 'Not Found',\n        statusCode: 404\n      });\n    });\n  });\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"reply can set multiple instances of same header","suites":[],"updatePoint":{"line":1001,"column":53,"index":28415},"line":1001,"code":"test('reply can set multiple instances of same header', t => {\n  t.plan(4);\n\n  const fastify = require('../../')();\n\n  fastify.get('/headers', function (req, reply) {\n    reply.header('set-cookie', 'one').header('set-cookie', 'two').send({});\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(fastify.close.bind(fastify));\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/headers'\n    }, (err, response, body) => {\n      t.error(err);\n      t.ok(response.headers['set-cookie']);\n      t.strictSame(response.headers['set-cookie'], ['one', 'two']);\n    });\n  });\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"reply.hasHeader returns correct values","suites":[],"updatePoint":{"line":1024,"column":44,"index":29055},"line":1024,"code":"test('reply.hasHeader returns correct values', t => {\n  t.plan(3);\n\n  const fastify = require('../../')();\n\n  fastify.get('/headers', function (req, reply) {\n    reply.header('x-foo', 'foo');\n    t.equal(reply.hasHeader('x-foo'), true);\n    t.equal(reply.hasHeader('x-bar'), false);\n    reply.send();\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(fastify.close.bind(fastify));\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/headers'\n    }, () => {});\n  });\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"reply.getHeader returns correct values","suites":[],"updatePoint":{"line":1046,"column":44,"index":29606},"line":1046,"code":"test('reply.getHeader returns correct values', t => {\n  t.plan(5);\n\n  const fastify = require('../../')();\n\n  fastify.get('/headers', function (req, reply) {\n    reply.header('x-foo', 'foo');\n    t.equal(reply.getHeader('x-foo'), 'foo');\n    reply.header('x-foo', 'bar');\n    t.strictSame(reply.getHeader('x-foo'), 'bar');\n    reply.header('x-foo', 42);\n    t.strictSame(reply.getHeader('x-foo'), 42);\n    reply.header('set-cookie', 'one');\n    reply.header('set-cookie', 'two');\n    t.strictSame(reply.getHeader('set-cookie'), ['one', 'two']);\n    reply.send();\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(fastify.close.bind(fastify));\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/headers'\n    }, () => {});\n  });\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"reply.getHeader returns raw header if there is not in the reply headers","suites":[],"updatePoint":{"line":1074,"column":77,"index":30452},"line":1074,"code":"test('reply.getHeader returns raw header if there is not in the reply headers', t => {\n  t.plan(1);\n  const response = {\n    setHeader: () => {},\n    hasHeader: () => true,\n    getHeader: () => 'bar',\n    writeHead: () => {},\n    end: () => {}\n  };\n  const reply = new Reply(response, {\n    onSend: []\n  }, null);\n  t.equal(reply.getHeader('foo'), 'bar');\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"reply.getHeaders returns correct values","suites":[],"updatePoint":{"line":1088,"column":45,"index":30780},"line":1088,"code":"test('reply.getHeaders returns correct values', t => {\n  t.plan(3);\n\n  const fastify = require('../../')();\n\n  fastify.get('/headers', function (req, reply) {\n    reply.header('x-foo', 'foo');\n    t.strictSame(reply.getHeaders(), {\n      'x-foo': 'foo'\n    });\n    reply.header('x-bar', 'bar');\n    reply.raw.setHeader('x-foo', 'foo2');\n    reply.raw.setHeader('x-baz', 'baz');\n    t.strictSame(reply.getHeaders(), {\n      'x-foo': 'foo',\n      'x-bar': 'bar',\n      'x-baz': 'baz'\n    });\n    reply.send();\n  });\n  fastify.inject('/headers', err => {\n    t.error(err);\n  });\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"reply.removeHeader can remove the value","suites":[],"updatePoint":{"line":1112,"column":45,"index":31360},"line":1112,"code":"test('reply.removeHeader can remove the value', t => {\n  t.plan(5);\n\n  const fastify = require('../../')();\n\n  t.teardown(fastify.close.bind(fastify));\n  fastify.get('/headers', function (req, reply) {\n    reply.header('x-foo', 'foo');\n    t.equal(reply.getHeader('x-foo'), 'foo');\n    t.equal(reply.removeHeader('x-foo'), reply);\n    t.strictSame(reply.getHeader('x-foo'), undefined);\n    reply.send();\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(fastify.close.bind(fastify));\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/headers'\n    }, () => {\n      t.pass();\n    });\n  });\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"reply.header can reset the value","suites":[],"updatePoint":{"line":1138,"column":38,"index":32028},"line":1138,"code":"test('reply.header can reset the value', t => {\n  t.plan(3);\n\n  const fastify = require('../../')();\n\n  t.teardown(fastify.close.bind(fastify));\n  fastify.get('/headers', function (req, reply) {\n    reply.header('x-foo', 'foo');\n    reply.header('x-foo', undefined);\n    t.strictSame(reply.getHeader('x-foo'), '');\n    reply.send();\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(fastify.close.bind(fastify));\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/headers'\n    }, () => {\n      t.pass();\n    });\n  });\n}); // https://github.com/fastify/fastify/issues/3030","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"reply.hasHeader computes raw and fastify headers","suites":[],"updatePoint":{"line":1164,"column":54,"index":32699},"line":1164,"code":"test('reply.hasHeader computes raw and fastify headers', t => {\n  t.plan(4);\n\n  const fastify = require('../../')();\n\n  t.teardown(fastify.close.bind(fastify));\n  fastify.get('/headers', function (req, reply) {\n    reply.header('x-foo', 'foo');\n    reply.raw.setHeader('x-bar', 'bar');\n    t.ok(reply.hasHeader('x-foo'));\n    t.ok(reply.hasHeader('x-bar'));\n    reply.send();\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(fastify.close.bind(fastify));\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/headers'\n    }, () => {\n      t.pass();\n    });\n  });\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"Reply should handle JSON content type with a charset","suites":[],"updatePoint":{"line":1190,"column":58,"index":33350},"line":1190,"code":"test('Reply should handle JSON content type with a charset', t => {\n  t.plan(16);\n\n  const fastify = require('../../')();\n\n  fastify.get('/default', function (req, reply) {\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.get('/utf8', function (req, reply) {\n    reply.header('content-type', 'application/json; charset=utf-8').send({\n      hello: 'world'\n    });\n  });\n  fastify.get('/utf16', function (req, reply) {\n    reply.header('content-type', 'application/json; charset=utf-16').send({\n      hello: 'world'\n    });\n  });\n  fastify.get('/utf32', function (req, reply) {\n    reply.header('content-type', 'application/json; charset=utf-32').send({\n      hello: 'world'\n    });\n  });\n  fastify.get('/type-utf8', function (req, reply) {\n    reply.type('application/json; charset=utf-8').send({\n      hello: 'world'\n    });\n  });\n  fastify.get('/type-utf16', function (req, reply) {\n    reply.type('application/json; charset=utf-16').send({\n      hello: 'world'\n    });\n  });\n  fastify.get('/type-utf32', function (req, reply) {\n    reply.type('application/json; charset=utf-32').send({\n      hello: 'world'\n    });\n  });\n  fastify.get('/no-space-type-utf32', function (req, reply) {\n    reply.type('application/json;charset=utf-32').send({\n      hello: 'world'\n    });\n  });\n  fastify.inject('/default', (err, res) => {\n    t.error(err);\n    t.equal(res.headers['content-type'], 'application/json; charset=utf-8');\n  });\n  fastify.inject('/utf8', (err, res) => {\n    t.error(err);\n    t.equal(res.headers['content-type'], 'application/json; charset=utf-8');\n  });\n  fastify.inject('/utf16', (err, res) => {\n    t.error(err);\n    t.equal(res.headers['content-type'], 'application/json; charset=utf-16');\n  });\n  fastify.inject('/utf32', (err, res) => {\n    t.error(err);\n    t.equal(res.headers['content-type'], 'application/json; charset=utf-32');\n  });\n  fastify.inject('/type-utf8', (err, res) => {\n    t.error(err);\n    t.equal(res.headers['content-type'], 'application/json; charset=utf-8');\n  });\n  fastify.inject('/type-utf16', (err, res) => {\n    t.error(err);\n    t.equal(res.headers['content-type'], 'application/json; charset=utf-16');\n  });\n  fastify.inject('/type-utf32', (err, res) => {\n    t.error(err);\n    t.equal(res.headers['content-type'], 'application/json; charset=utf-32');\n  });\n  fastify.inject('/no-space-type-utf32', (err, res) => {\n    t.error(err);\n    t.equal(res.headers['content-type'], 'application/json;charset=utf-32');\n  });\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"Content type and charset set previously","suites":[],"updatePoint":{"line":1268,"column":45,"index":35816},"line":1268,"code":"test('Content type and charset set previously', t => {\n  t.plan(2);\n\n  const fastify = require('../../')();\n\n  fastify.addHook('onRequest', function (req, reply, done) {\n    reply.header('content-type', 'application/json; charset=utf-16');\n    done();\n  });\n  fastify.get('/', function (req, reply) {\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.inject('/', (err, res) => {\n    t.error(err);\n    t.equal(res.headers['content-type'], 'application/json; charset=utf-16');\n  });\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":".status() is an alias for .code()","suites":[],"updatePoint":{"line":1287,"column":39,"index":36307},"line":1287,"code":"test('.status() is an alias for .code()', t => {\n  t.plan(2);\n\n  const fastify = require('../..')();\n\n  fastify.get('/', function (req, reply) {\n    reply.status(418).send();\n  });\n  fastify.inject('/', (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 418);\n  });\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":".statusCode is getter and setter","suites":[],"updatePoint":{"line":1300,"column":38,"index":36587},"line":1300,"code":"test('.statusCode is getter and setter', t => {\n  t.plan(4);\n\n  const fastify = require('../..')();\n\n  fastify.get('/', function (req, reply) {\n    t.ok(reply.statusCode, 200, 'default status value');\n    reply.statusCode = 418;\n    t.ok(reply.statusCode, 418);\n    reply.send();\n  });\n  fastify.inject('/', (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 418);\n  });\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"reply.header setting multiple cookies as multiple Set-Cookie headers","suites":[],"updatePoint":{"line":1316,"column":74,"index":37009},"line":1316,"code":"test('reply.header setting multiple cookies as multiple Set-Cookie headers', t => {\n  t.plan(7);\n\n  const fastify = require('../../')();\n\n  fastify.get('/headers', function (req, reply) {\n    reply.header('set-cookie', 'one').header('set-cookie', 'two').header('set-cookie', 'three').header('set-cookie', ['four', 'five', 'six']).send({});\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(fastify.close.bind(fastify));\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/headers'\n    }, (err, response, body) => {\n      t.error(err);\n      t.ok(response.headers['set-cookie']);\n      t.strictSame(response.headers['set-cookie'], ['one', 'two', 'three', 'four', 'five', 'six']);\n    });\n  });\n  fastify.inject('/headers', (error, response) => {\n    t.error(error);\n    t.ok(response.headers['set-cookie']);\n    t.strictSame(response.headers['set-cookie'], ['one', 'two', 'three', 'four', 'five', 'six']);\n  });\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"should emit deprecation warning when trying to modify the reply.sent property","suites":[],"updatePoint":{"line":1344,"column":83,"index":38014},"line":1344,"code":"test('should emit deprecation warning when trying to modify the reply.sent property', t => {\n  t.plan(4);\n\n  const fastify = require('../..')();\n\n  const deprecationCode = 'FSTDEP010';\n  warning.emitted.delete(deprecationCode);\n  process.removeAllListeners('warning');\n  process.on('warning', onWarning);\n\n  function onWarning(warning) {\n    t.equal(warning.name, 'FastifyDeprecation');\n    t.equal(warning.code, deprecationCode);\n  }\n\n  fastify.get('/', (req, reply) => {\n    reply.sent = true;\n    reply.raw.end();\n  });\n  fastify.inject('/', (err, res) => {\n    t.error(err);\n    t.pass();\n    process.removeListener('warning', onWarning);\n  });\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"should throw error when passing falsy value to reply.sent","suites":[],"updatePoint":{"line":1369,"column":63,"index":38647},"line":1369,"code":"test('should throw error when passing falsy value to reply.sent', t => {\n  t.plan(4);\n\n  const fastify = require('../..')();\n\n  fastify.get('/', function (req, reply) {\n    try {\n      reply.sent = false;\n    } catch (err) {\n      t.equal(err.code, 'FST_ERR_REP_SENT_VALUE');\n      t.equal(err.message, 'The only possible value for reply.sent is true.');\n      reply.send();\n    }\n  });\n  fastify.inject('/', (err, res) => {\n    t.error(err);\n    t.pass();\n  });\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"should throw error when attempting to set reply.sent more than once","suites":[],"updatePoint":{"line":1388,"column":73,"index":39124},"line":1388,"code":"test('should throw error when attempting to set reply.sent more than once', t => {\n  t.plan(4);\n\n  const fastify = require('../..')();\n\n  fastify.get('/', function (req, reply) {\n    reply.sent = true;\n\n    try {\n      reply.sent = true;\n      t.fail('must throw');\n    } catch (err) {\n      t.equal(err.code, 'FST_ERR_REP_ALREADY_SENT');\n      t.equal(err.message, 'Reply was already sent.');\n    }\n\n    reply.raw.end();\n  });\n  fastify.inject('/', (err, res) => {\n    t.error(err);\n    t.pass();\n  });\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"should not throw error when attempting to set reply.sent if the underlining request was sent","suites":[],"updatePoint":{"line":1411,"column":98,"index":39657},"line":1411,"code":"test('should not throw error when attempting to set reply.sent if the underlining request was sent', t => {\n  t.plan(3);\n\n  const fastify = require('../..')();\n\n  fastify.get('/', function (req, reply) {\n    reply.raw.end();\n    t.doesNotThrow(() => {\n      reply.sent = true;\n    });\n  });\n  fastify.inject('/', (err, res) => {\n    t.error(err);\n    t.pass();\n  });\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"reply.getResponseTime() should return 0 before the timer is initialised on the reply by setting up response listeners","suites":[],"updatePoint":{"line":1427,"column":123,"index":40053},"line":1427,"code":"test('reply.getResponseTime() should return 0 before the timer is initialised on the reply by setting up response listeners', t => {\n  t.plan(1);\n  const response = {\n    statusCode: 200\n  };\n  const reply = new Reply(response, null);\n  t.equal(reply.getResponseTime(), 0);\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"reply.getResponseTime() should return a number greater than 0 after the timer is initialised on the reply by setting up response listeners","suites":[],"updatePoint":{"line":1435,"column":144,"index":40352},"line":1435,"code":"test('reply.getResponseTime() should return a number greater than 0 after the timer is initialised on the reply by setting up response listeners', t => {\n  t.plan(1);\n\n  const fastify = require('../..')();\n\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    handler: (req, reply) => {\n      reply.send('hello world');\n    }\n  });\n  fastify.addHook('onResponse', (req, reply) => {\n    t.ok(reply.getResponseTime() > 0);\n    t.end();\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  });\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"reply.getResponseTime() should return the time since a request started while inflight","suites":[],"updatePoint":{"line":1456,"column":91,"index":40802},"line":1456,"code":"test('reply.getResponseTime() should return the time since a request started while inflight', t => {\n  t.plan(1);\n\n  const fastify = require('../..')();\n\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    handler: (req, reply) => {\n      reply.send('hello world');\n    }\n  });\n  fastify.addHook('preValidation', (req, reply, done) => {\n    t.not(reply.getResponseTime(), reply.getResponseTime());\n    done();\n  });\n  fastify.addHook('onResponse', (req, reply) => {\n    t.end();\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  });\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"reply.getResponseTime() should return the same value after a request is finished","suites":[],"updatePoint":{"line":1480,"column":86,"index":41346},"line":1480,"code":"test('reply.getResponseTime() should return the same value after a request is finished', t => {\n  t.plan(1);\n\n  const fastify = require('../..')();\n\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    handler: (req, reply) => {\n      reply.send('hello world');\n    }\n  });\n  fastify.addHook('onResponse', (req, reply) => {\n    t.equal(reply.getResponseTime(), reply.getResponseTime());\n    t.end();\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  });\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"reply should use the custom serializer","suites":[],"updatePoint":{"line":1501,"column":44,"index":41773},"line":1501,"code":"test('reply should use the custom serializer', t => {\n  t.plan(4);\n\n  const fastify = require('../..')();\n\n  fastify.setReplySerializer((payload, statusCode) => {\n    t.same(payload, {\n      foo: 'bar'\n    });\n    t.equal(statusCode, 200);\n    payload.foo = 'bar bar';\n    return JSON.stringify(payload);\n  });\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    handler: (req, reply) => {\n      reply.send({\n        foo: 'bar'\n      });\n    }\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.payload, '{\"foo\":\"bar bar\"}');\n  });\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"reply should use the right serializer in encapsulated context","suites":[],"updatePoint":{"line":1531,"column":67,"index":42396},"line":1531,"code":"test('reply should use the right serializer in encapsulated context', t => {\n  t.plan(9);\n\n  const fastify = require('../..')();\n\n  fastify.setReplySerializer(payload => {\n    t.same(payload, {\n      foo: 'bar'\n    });\n    payload.foo = 'bar bar';\n    return JSON.stringify(payload);\n  });\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    handler: (req, reply) => {\n      reply.send({\n        foo: 'bar'\n      });\n    }\n  });\n  fastify.register(function (instance, opts, done) {\n    instance.route({\n      method: 'GET',\n      url: '/sub',\n      handler: (req, reply) => {\n        reply.send({\n          john: 'doo'\n        });\n      }\n    });\n    instance.setReplySerializer(payload => {\n      t.same(payload, {\n        john: 'doo'\n      });\n      payload.john = 'too too';\n      return JSON.stringify(payload);\n    });\n    done();\n  });\n  fastify.register(function (instance, opts, done) {\n    instance.route({\n      method: 'GET',\n      url: '/sub',\n      handler: (req, reply) => {\n        reply.send({\n          sweet: 'potato'\n        });\n      }\n    });\n    instance.setReplySerializer(payload => {\n      t.same(payload, {\n        sweet: 'potato'\n      });\n      payload.sweet = 'potato potato';\n      return JSON.stringify(payload);\n    });\n    done();\n  }, {\n    prefix: 'sub'\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.payload, '{\"foo\":\"bar bar\"}');\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/sub'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.payload, '{\"john\":\"too too\"}');\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/sub/sub'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.payload, '{\"sweet\":\"potato potato\"}');\n  });\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"reply should use the right serializer in deep encapsulated context","suites":[],"updatePoint":{"line":1614,"column":72,"index":44151},"line":1614,"code":"test('reply should use the right serializer in deep encapsulated context', t => {\n  t.plan(8);\n\n  const fastify = require('../..')();\n\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    handler: (req, reply) => {\n      reply.send({\n        foo: 'bar'\n      });\n    }\n  });\n  fastify.register(function (instance, opts, done) {\n    instance.route({\n      method: 'GET',\n      url: '/sub',\n      handler: (req, reply) => {\n        reply.send({\n          john: 'doo'\n        });\n      }\n    });\n    instance.setReplySerializer(payload => {\n      t.same(payload, {\n        john: 'doo'\n      });\n      payload.john = 'too too';\n      return JSON.stringify(payload);\n    });\n    instance.register(function (subInstance, opts, done) {\n      subInstance.route({\n        method: 'GET',\n        url: '/deep',\n        handler: (req, reply) => {\n          reply.send({\n            john: 'deep'\n          });\n        }\n      });\n      subInstance.setReplySerializer(payload => {\n        t.same(payload, {\n          john: 'deep'\n        });\n        payload.john = 'deep deep';\n        return JSON.stringify(payload);\n      });\n      done();\n    });\n    done();\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.payload, '{\"foo\":\"bar\"}');\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/sub'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.payload, '{\"john\":\"too too\"}');\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/deep'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.payload, '{\"john\":\"deep deep\"}');\n  });\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"reply should use the route serializer","suites":[],"updatePoint":{"line":1688,"column":43,"index":45718},"line":1688,"code":"test('reply should use the route serializer', t => {\n  t.plan(3);\n\n  const fastify = require('../..')();\n\n  fastify.setReplySerializer(() => {\n    t.fail('this serializer should not be executed');\n  });\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    handler: (req, reply) => {\n      reply.serializer(payload => {\n        t.same(payload, {\n          john: 'doo'\n        });\n        payload.john = 'too too';\n        return JSON.stringify(payload);\n      }).send({\n        john: 'doo'\n      });\n    }\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.payload, '{\"john\":\"too too\"}');\n  });\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"cannot set the replySerializer when the server is running","suites":[],"updatePoint":{"line":1719,"column":63,"index":46399},"line":1719,"code":"test('cannot set the replySerializer when the server is running', t => {\n  t.plan(2);\n\n  const fastify = require('../..')();\n\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n\n    try {\n      fastify.setReplySerializer(() => {});\n      t.fail('this serializer should not be setup');\n    } catch (e) {\n      t.equal(e.message, 'Cannot call \"setReplySerializer\" when fastify instance is already started!');\n    }\n  });\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"reply should not call the custom serializer for errors and not found","suites":[],"updatePoint":{"line":1738,"column":74,"index":46888},"line":1738,"code":"test('reply should not call the custom serializer for errors and not found', t => {\n  t.plan(9);\n\n  const fastify = require('../..')();\n\n  fastify.setReplySerializer((payload, statusCode) => {\n    t.same(payload, {\n      foo: 'bar'\n    });\n    t.equal(statusCode, 200);\n    return JSON.stringify(payload);\n  });\n  fastify.get('/', (req, reply) => {\n    reply.send({\n      foo: 'bar'\n    });\n  });\n  fastify.get('/err', (req, reply) => {\n    reply.send(new Error('an error'));\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.equal(res.payload, '{\"foo\":\"bar\"}');\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/err'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 500);\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/not-existing'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 404);\n  });\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"reply.then","suites":[],"updatePoint":{"line":1781,"column":16,"index":47764},"line":1781,"code":"test('reply.then', t => {\n  t.plan(4);\n\n  function request() {}\n\n  t.test('without an error', t => {\n    t.plan(1);\n    const response = new Writable();\n    const reply = new Reply(response, request);\n    reply.then(function () {\n      t.pass('fulfilled called');\n    });\n    response.destroy();\n  });\n  t.test('with an error', t => {\n    t.plan(1);\n    const response = new Writable();\n    const reply = new Reply(response, request);\n\n    const _err = new Error('kaboom');\n\n    reply.then(function () {\n      t.fail('fulfilled called');\n    }, function (err) {\n      t.equal(err, _err);\n    });\n    response.destroy(_err);\n  });\n  t.test('with error but without reject callback', t => {\n    t.plan(1);\n    const response = new Writable();\n    const reply = new Reply(response, request);\n\n    const _err = new Error('kaboom');\n\n    reply.then(function () {\n      t.fail('fulfilled called');\n    });\n    t.pass();\n    response.destroy(_err);\n  });\n  t.test('with error, without reject callback, with logger', t => {\n    t.plan(1);\n    const response = new Writable();\n    const reply = new Reply(response, request); // spy logger\n\n    reply.log = {\n      warn: message => {\n        t.equal(message, 'unhandled rejection on reply.then');\n      }\n    };\n\n    const _err = new Error('kaboom');\n\n    reply.then(function () {\n      t.fail('fulfilled called');\n    });\n    response.destroy(_err);\n  });\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"reply.sent should read from response.writableEnded if it is defined","suites":[],"updatePoint":{"line":1841,"column":73,"index":49221},"line":1841,"code":"test('reply.sent should read from response.writableEnded if it is defined', t => {\n  t.plan(1);\n  const reply = new Reply({\n    writableEnded: true\n  }, {}, {});\n  t.equal(reply.sent, true);\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"redirect to an invalid URL should not crash the server","suites":[],"updatePoint":{"line":1848,"column":60,"index":49403},"line":1848,"code":"test('redirect to an invalid URL should not crash the server', async t => {\n  const fastify = require('../..')();\n\n  fastify.route({\n    method: 'GET',\n    url: '/redirect',\n    handler: (req, reply) => {\n      reply.log.warn = function mockWarn(obj, message) {\n        t.equal(message, 'Invalid character in header content [\"location\"]');\n      };\n\n      switch (req.query.useCase) {\n        case '1':\n          reply.redirect('/?key=a’b');\n          break;\n\n        case '2':\n          reply.redirect(encodeURI('/?key=a’b'));\n          break;\n\n        default:\n          reply.redirect('/?key=ab');\n          break;\n      }\n    }\n  });\n  await fastify.listen({\n    port: 0\n  });\n  {\n    const {\n      response,\n      body\n    } = await doGet(`http://localhost:${fastify.server.address().port}/redirect?useCase=1`);\n    t.equal(response.statusCode, 500);\n    t.same(JSON.parse(body), {\n      statusCode: 500,\n      code: 'ERR_INVALID_CHAR',\n      error: 'Internal Server Error',\n      message: 'Invalid character in header content [\"location\"]'\n    });\n  }\n  {\n    const {\n      response\n    } = await doGet(`http://localhost:${fastify.server.address().port}/redirect?useCase=2`);\n    t.equal(response.statusCode, 302);\n    t.equal(response.headers.location, '/?key=a%E2%80%99b');\n  }\n  {\n    const {\n      response\n    } = await doGet(`http://localhost:${fastify.server.address().port}/redirect?useCase=3`);\n    t.equal(response.statusCode, 302);\n    t.equal(response.headers.location, '/?key=ab');\n  }\n  await fastify.close();\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"invalid response headers should not crash the server","suites":[],"updatePoint":{"line":1906,"column":58,"index":50935},"line":1906,"code":"test('invalid response headers should not crash the server', async t => {\n  const fastify = require('../..')();\n\n  fastify.route({\n    method: 'GET',\n    url: '/bad-headers',\n    handler: (req, reply) => {\n      reply.log.warn = function mockWarn(obj, message) {\n        t.equal(message, 'Invalid character in header content [\"smile-encoded\"]', 'only the first invalid header is logged');\n      };\n\n      reply.header('foo', '$');\n      reply.header('smile-encoded', '\\uD83D\\uDE00');\n      reply.header('smile', '😄');\n      reply.header('bar', 'ƒ∂å');\n      reply.send({});\n    }\n  });\n  await fastify.listen({\n    port: 0\n  });\n  const {\n    response,\n    body\n  } = await doGet(`http://localhost:${fastify.server.address().port}/bad-headers`);\n  t.equal(response.statusCode, 500);\n  t.same(JSON.parse(body), {\n    statusCode: 500,\n    code: 'ERR_INVALID_CHAR',\n    error: 'Internal Server Error',\n    message: 'Invalid character in header content [\"smile-encoded\"]'\n  });\n  await fastify.close();\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"invalid response headers when sending back an error","suites":[],"updatePoint":{"line":1940,"column":57,"index":51938},"line":1940,"code":"test('invalid response headers when sending back an error', async t => {\n  const fastify = require('../..')();\n\n  fastify.route({\n    method: 'GET',\n    url: '/bad-headers',\n    handler: (req, reply) => {\n      reply.log.warn = function mockWarn(obj, message) {\n        t.equal(message, 'Invalid character in header content [\"smile\"]', 'only the first invalid header is logged');\n      };\n\n      reply.header('smile', '😄');\n      reply.send(new Error('user land error'));\n    }\n  });\n  await fastify.listen({\n    port: 0\n  });\n  const {\n    response,\n    body\n  } = await doGet(`http://localhost:${fastify.server.address().port}/bad-headers`);\n  t.equal(response.statusCode, 500);\n  t.same(JSON.parse(body), {\n    statusCode: 500,\n    code: 'ERR_INVALID_CHAR',\n    error: 'Internal Server Error',\n    message: 'Invalid character in header content [\"smile\"]'\n  });\n  await fastify.close();\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"invalid response headers and custom error handler","suites":[],"updatePoint":{"line":1971,"column":55,"index":52830},"line":1971,"code":"test('invalid response headers and custom error handler', async t => {\n  const fastify = require('../..')();\n\n  fastify.route({\n    method: 'GET',\n    url: '/bad-headers',\n    handler: (req, reply) => {\n      reply.log.warn = function mockWarn(obj, message) {\n        t.equal(message, 'Invalid character in header content [\"smile\"]', 'only the first invalid header is logged');\n      };\n\n      reply.header('smile', '😄');\n      reply.send(new Error('user land error'));\n    }\n  });\n  fastify.setErrorHandler(function (error, request, reply) {\n    t.equal(error.message, 'user land error', 'custom error handler receives the error');\n    reply.status(500).send({\n      ops: true\n    });\n  });\n  await fastify.listen({\n    port: 0\n  });\n  const {\n    response,\n    body\n  } = await doGet(`http://localhost:${fastify.server.address().port}/bad-headers`);\n  t.equal(response.statusCode, 500);\n  t.same(JSON.parse(body), {\n    statusCode: 500,\n    code: 'ERR_INVALID_CHAR',\n    error: 'Internal Server Error',\n    message: 'Invalid character in header content [\"smile\"]'\n  });\n  await fastify.close();\n});","file":"internals/reply.test.js","skipped":false,"dir":"test"},{"name":"#compileValidationSchema","suites":[],"updatePoint":{"line":48,"column":30,"index":672},"line":48,"code":"test('#compileValidationSchema', subtest => {\n  subtest.plan(7);\n  subtest.test('Should return a function - Route without schema', async t => {\n    const fastify = Fastify();\n    t.plan(3);\n    fastify.get('/', (req, reply) => {\n      const validate = req.compileValidationSchema(defaultSchema);\n      t.type(validate, Function);\n      t.ok(validate({\n        hello: 'world'\n      }));\n      t.notOk(validate({\n        world: 'foo'\n      }));\n      reply.send({\n        hello: 'world'\n      });\n    });\n    await fastify.inject({\n      path: '/',\n      method: 'GET'\n    });\n  });\n  subtest.test('Validate function errors property should be null after validation when input is valid', async t => {\n    const fastify = Fastify();\n    t.plan(3);\n    fastify.get('/', (req, reply) => {\n      const validate = req.compileValidationSchema(defaultSchema);\n      t.ok(validate({\n        hello: 'world'\n      }));\n      t.ok(Object.prototype.hasOwnProperty.call(validate, 'errors'));\n      t.equal(validate.errors, null);\n      reply.send({\n        hello: 'world'\n      });\n    });\n    await fastify.inject({\n      path: '/',\n      method: 'GET'\n    });\n  });\n  subtest.test('Validate function errors property should be an array of errors after validation when input is valid', async t => {\n    const fastify = Fastify();\n    t.plan(4);\n    fastify.get('/', (req, reply) => {\n      const validate = req.compileValidationSchema(defaultSchema);\n      t.notOk(validate({\n        world: 'foo'\n      }));\n      t.ok(Object.prototype.hasOwnProperty.call(validate, 'errors'));\n      t.ok(Array.isArray(validate.errors));\n      t.ok(validate.errors.length > 0);\n      reply.send({\n        hello: 'world'\n      });\n    });\n    await fastify.inject({\n      path: '/',\n      method: 'GET'\n    });\n  });\n  subtest.test('Should reuse the validate fn across multiple invocations - Route without schema', async t => {\n    const fastify = Fastify();\n    let validate = null;\n    let counter = 0;\n    t.plan(16);\n    fastify.get('/', (req, reply) => {\n      counter++;\n\n      if (counter > 1) {\n        const newValidate = req.compileValidationSchema(defaultSchema);\n        t.equal(validate, newValidate, 'Are the same validate function');\n        validate = newValidate;\n      } else {\n        validate = req.compileValidationSchema(defaultSchema);\n      }\n\n      t.type(validate, Function);\n      t.ok(validate({\n        hello: 'world'\n      }));\n      t.notOk(validate({\n        world: 'foo'\n      }));\n      reply.send({\n        hello: 'world'\n      });\n    });\n    await Promise.all([fastify.inject({\n      path: '/',\n      method: 'GET'\n    }), fastify.inject({\n      path: '/',\n      method: 'GET'\n    }), fastify.inject({\n      path: '/',\n      method: 'GET'\n    }), fastify.inject({\n      path: '/',\n      method: 'GET'\n    })]);\n    t.equal(counter, 4);\n  });\n  subtest.test('Should return a function - Route with schema', async t => {\n    const fastify = Fastify();\n    t.plan(3);\n    fastify.post('/', {\n      schema: {\n        body: defaultSchema\n      }\n    }, (req, reply) => {\n      const validate = req.compileValidationSchema(defaultSchema);\n      t.type(validate, Function);\n      t.ok(validate({\n        hello: 'world'\n      }));\n      t.notOk(validate({\n        world: 'foo'\n      }));\n      reply.send({\n        hello: 'world'\n      });\n    });\n    await fastify.inject({\n      path: '/',\n      method: 'POST',\n      payload: {\n        hello: 'world',\n        world: 'foo'\n      }\n    });\n  });\n  subtest.test('Should use the custom validator compiler for the route', async t => {\n    const fastify = Fastify();\n    let called = 0;\n\n    const custom = ({\n      schema,\n      httpPart,\n      url,\n      method\n    }) => {\n      t.equal(schema, defaultSchema);\n      t.equal(url, '/');\n      t.equal(method, 'GET');\n      t.equal(httpPart, 'querystring');\n      return input => {\n        called++;\n        t.same(input, {\n          hello: 'world'\n        });\n        return true;\n      };\n    };\n\n    t.plan(10);\n    fastify.get('/', {\n      validatorCompiler: custom\n    }, (req, reply) => {\n      const first = req.compileValidationSchema(defaultSchema, 'querystring');\n      const second = req.compileValidationSchema(defaultSchema, 'querystring');\n      t.equal(first, second);\n      t.ok(first({\n        hello: 'world'\n      }));\n      t.ok(second({\n        hello: 'world'\n      }));\n      t.equal(called, 2);\n      reply.send({\n        hello: 'world'\n      });\n    });\n    await fastify.inject({\n      path: '/',\n      method: 'GET'\n    });\n  });\n  subtest.test('Should instantiate a WeakMap when executed for first time', async t => {\n    const fastify = Fastify();\n    t.plan(5);\n    fastify.get('/', (req, reply) => {\n      t.equal(req[kRouteContext][kRequestValidateWeakMap], null);\n      t.type(req.compileValidationSchema(defaultSchema), Function);\n      t.type(req[kRouteContext][kRequestValidateWeakMap], WeakMap);\n      t.type(req.compileValidationSchema(Object.assign({}, defaultSchema)), Function);\n      t.type(req[kRouteContext][kRequestValidateWeakMap], WeakMap);\n      reply.send({\n        hello: 'world'\n      });\n    });\n    await fastify.inject({\n      path: '/',\n      method: 'GET'\n    });\n  });\n});","file":"internals/request-validate.test.js","skipped":false,"dir":"test"},{"name":"#getValidationFunction","suites":[],"updatePoint":{"line":246,"column":28,"index":5892},"line":246,"code":"test('#getValidationFunction', subtest => {\n  subtest.plan(6);\n  subtest.test('Should return a validation function', async t => {\n    const fastify = Fastify();\n    t.plan(1);\n    fastify.get('/', (req, reply) => {\n      const original = req.compileValidationSchema(defaultSchema);\n      const referenced = req.getValidationFunction(defaultSchema);\n      t.equal(original, referenced);\n      reply.send({\n        hello: 'world'\n      });\n    });\n    await fastify.inject({\n      path: '/',\n      method: 'GET'\n    });\n  });\n  subtest.test('Validate function errors property should be null after validation when input is valid', async t => {\n    const fastify = Fastify();\n    t.plan(3);\n    fastify.get('/', (req, reply) => {\n      req.compileValidationSchema(defaultSchema);\n      const validate = req.getValidationFunction(defaultSchema);\n      t.ok(validate({\n        hello: 'world'\n      }));\n      t.ok(Object.prototype.hasOwnProperty.call(validate, 'errors'));\n      t.equal(validate.errors, null);\n      reply.send({\n        hello: 'world'\n      });\n    });\n    await fastify.inject({\n      path: '/',\n      method: 'GET'\n    });\n  });\n  subtest.test('Validate function errors property should be an array of errors after validation when input is valid', async t => {\n    const fastify = Fastify();\n    t.plan(4);\n    fastify.get('/', (req, reply) => {\n      req.compileValidationSchema(defaultSchema);\n      const validate = req.getValidationFunction(defaultSchema);\n      t.notOk(validate({\n        world: 'foo'\n      }));\n      t.ok(Object.prototype.hasOwnProperty.call(validate, 'errors'));\n      t.ok(Array.isArray(validate.errors));\n      t.ok(validate.errors.length > 0);\n      reply.send({\n        hello: 'world'\n      });\n    });\n    await fastify.inject({\n      path: '/',\n      method: 'GET'\n    });\n  });\n  subtest.test('Should return undefined if no schema compiled', async t => {\n    const fastify = Fastify();\n    t.plan(2);\n    fastify.get('/', (req, reply) => {\n      const validate = req.getValidationFunction(defaultSchema);\n      t.notOk(validate);\n      const validateFn = req.getValidationFunction(42);\n      t.notOk(validateFn);\n      reply.send({\n        hello: 'world'\n      });\n    });\n    await fastify.inject('/');\n  });\n  subtest.test('Should return the validation function from each HTTP part', async t => {\n    const fastify = Fastify();\n    let headerValidation = null;\n    let customValidation = null;\n    t.plan(15);\n    fastify.post('/:id', {\n      schema: requestSchema\n    }, (req, reply) => {\n      const {\n        params\n      } = req;\n\n      switch (params.id) {\n        case 1:\n          customValidation = req.compileValidationSchema(defaultSchema);\n          t.ok(req.getValidationFunction('body'));\n          t.ok(req.getValidationFunction('body')({\n            hello: 'world'\n          }));\n          t.notOk(req.getValidationFunction('body')({\n            world: 'hello'\n          }));\n          break;\n\n        case 2:\n          headerValidation = req.getValidationFunction('headers');\n          t.ok(headerValidation);\n          t.ok(headerValidation({\n            'x-foo': 'world'\n          }));\n          t.notOk(headerValidation({\n            'x-foo': []\n          }));\n          break;\n\n        case 3:\n          t.ok(req.getValidationFunction('params'));\n          t.ok(req.getValidationFunction('params')({\n            id: 123\n          }));\n          t.notOk(req.getValidationFunction('params'({\n            id: 1.2\n          })));\n          break;\n\n        case 4:\n          t.ok(req.getValidationFunction('querystring'));\n          t.ok(req.getValidationFunction('querystring')({\n            foo: 'bar'\n          }));\n          t.notOk(req.getValidationFunction('querystring')({\n            foo: 'not-bar'\n          }));\n          break;\n\n        case 5:\n          t.equal(customValidation, req.getValidationFunction(defaultSchema));\n          t.ok(customValidation({\n            hello: 'world'\n          }));\n          t.notOk(customValidation({}));\n          t.equal(headerValidation, req.getValidationFunction('headers'));\n          break;\n\n        default:\n          t.fail('Invalid id');\n      }\n\n      reply.send({\n        hello: 'world'\n      });\n    });\n    const promises = [];\n\n    for (let i = 1; i < 6; i++) {\n      promises.push(fastify.inject({\n        path: `/${i}`,\n        method: 'post',\n        query: {\n          foo: 'bar'\n        },\n        payload: {\n          hello: 'world'\n        },\n        headers: {\n          'x-foo': 'x-bar'\n        }\n      }));\n    }\n\n    await Promise.all(promises);\n  });\n  subtest.test('Should not set a WeakMap if there is no schema', async t => {\n    const fastify = Fastify();\n    t.plan(1);\n    fastify.get('/', (req, reply) => {\n      req.getValidationFunction(defaultSchema);\n      req.getValidationFunction('body');\n      t.equal(req[kRouteContext][kRequestValidateWeakMap], null);\n      reply.send({\n        hello: 'world'\n      });\n    });\n    await fastify.inject({\n      path: '/',\n      method: 'GET'\n    });\n  });\n});","file":"internals/request-validate.test.js","skipped":false,"dir":"test"},{"name":"#validate","suites":[],"updatePoint":{"line":428,"column":15,"index":10925},"line":428,"code":"test('#validate', subtest => {\n  subtest.plan(7);\n  subtest.test('Should return true/false if input valid - Route without schema', async t => {\n    const fastify = Fastify();\n    t.plan(2);\n    fastify.get('/', (req, reply) => {\n      const isNotValid = req.validateInput({\n        world: 'string'\n      }, defaultSchema);\n      const isValid = req.validateInput({\n        hello: 'string'\n      }, defaultSchema);\n      t.notOk(isNotValid);\n      t.ok(isValid);\n      reply.send({\n        hello: 'world'\n      });\n    });\n    await fastify.inject({\n      path: '/',\n      method: 'GET'\n    });\n  });\n  subtest.test('Should use the custom validator compiler for the route', async t => {\n    const fastify = Fastify();\n    let called = 0;\n\n    const custom = ({\n      schema,\n      httpPart,\n      url,\n      method\n    }) => {\n      t.equal(schema, defaultSchema);\n      t.equal(url, '/');\n      t.equal(method, 'GET');\n      t.equal(httpPart, 'querystring');\n      return input => {\n        called++;\n        t.same(input, {\n          hello: 'world'\n        });\n        return true;\n      };\n    };\n\n    t.plan(9);\n    fastify.get('/', {\n      validatorCompiler: custom\n    }, (req, reply) => {\n      const ok = req.validateInput({\n        hello: 'world'\n      }, defaultSchema, 'querystring');\n      const ok2 = req.validateInput({\n        hello: 'world'\n      }, defaultSchema);\n      t.ok(ok);\n      t.ok(ok2);\n      t.equal(called, 2);\n      reply.send({\n        hello: 'world'\n      });\n    });\n    await fastify.inject({\n      path: '/',\n      method: 'GET'\n    });\n  });\n  subtest.test('Should return true/false if input valid - With Schema for Route defined', async t => {\n    const fastify = Fastify();\n    t.plan(8);\n    fastify.post('/:id', {\n      schema: requestSchema\n    }, (req, reply) => {\n      const {\n        params\n      } = req;\n\n      switch (params.id) {\n        case 1:\n          t.ok(req.validateInput({\n            hello: 'world'\n          }, 'body'));\n          t.notOk(req.validateInput({\n            hello: [],\n            world: 'foo'\n          }, 'body'));\n          break;\n\n        case 2:\n          t.notOk(req.validateInput({\n            foo: 'something'\n          }, 'querystring'));\n          t.ok(req.validateInput({\n            foo: 'bar'\n          }, 'querystring'));\n          break;\n\n        case 3:\n          t.notOk(req.validateInput({\n            'x-foo': []\n          }, 'headers'));\n          t.ok(req.validateInput({\n            'x-foo': 'something'\n          }, 'headers'));\n          break;\n\n        case 4:\n          t.ok(req.validateInput({\n            id: params.id\n          }, 'params'));\n          t.notOk(req.validateInput({\n            id: 0\n          }, 'params'));\n          break;\n\n        default:\n          t.fail('Invalid id');\n      }\n\n      reply.send({\n        hello: 'world'\n      });\n    });\n    const promises = [];\n\n    for (let i = 1; i < 5; i++) {\n      promises.push(fastify.inject({\n        path: `/${i}`,\n        method: 'post',\n        query: {\n          foo: 'bar'\n        },\n        payload: {\n          hello: 'world'\n        },\n        headers: {\n          'x-foo': 'x-bar'\n        }\n      }));\n    }\n\n    await Promise.all(promises);\n  });\n  subtest.test('Should throw if missing validation fn for HTTP part and not schema provided', async t => {\n    const fastify = Fastify();\n    t.plan(10);\n    fastify.get('/:id', (req, reply) => {\n      const {\n        params\n      } = req;\n\n      switch (parseInt(params.id)) {\n        case 1:\n          req.validateInput({}, 'body');\n          break;\n\n        case 2:\n          req.validateInput({}, 'querystring');\n          break;\n\n        case 3:\n          req.validateInput({}, 'query');\n          break;\n\n        case 4:\n          req.validateInput({\n            'x-foo': []\n          }, 'headers');\n          break;\n\n        case 5:\n          req.validateInput({\n            id: 0\n          }, 'params');\n          break;\n\n        default:\n          t.fail('Invalid id');\n      }\n    });\n    const promises = [];\n\n    for (let i = 1; i < 6; i++) {\n      promises.push((async j => {\n        const response = await fastify.inject(`/${j}`);\n        const result = response.json();\n        t.equal(result.statusCode, 500);\n        t.equal(result.code, 'FST_ERR_REQ_INVALID_VALIDATION_INVOCATION');\n      })(i));\n    }\n\n    await Promise.all(promises);\n  });\n  subtest.test('Should throw if missing validation fn for HTTP part and not valid schema provided', async t => {\n    const fastify = Fastify();\n    t.plan(10);\n    fastify.get('/:id', (req, reply) => {\n      const {\n        params\n      } = req;\n\n      switch (parseInt(params.id)) {\n        case 1:\n          req.validateInput({}, 1, 'body');\n          break;\n\n        case 2:\n          req.validateInput({}, [], 'querystring');\n          break;\n\n        case 3:\n          req.validateInput({}, '', 'query');\n          break;\n\n        case 4:\n          req.validateInput({\n            'x-foo': []\n          }, null, 'headers');\n          break;\n\n        case 5:\n          req.validateInput({\n            id: 0\n          }, () => {}, 'params');\n          break;\n\n        default:\n          t.fail('Invalid id');\n      }\n    });\n    const promises = [];\n\n    for (let i = 1; i < 6; i++) {\n      promises.push((async j => {\n        const response = await fastify.inject({\n          path: `/${j}`,\n          method: 'GET'\n        });\n        const result = response.json();\n        t.equal(result.statusCode, 500);\n        t.equal(result.code, 'FST_ERR_REQ_INVALID_VALIDATION_INVOCATION');\n      })(i));\n    }\n\n    await Promise.all(promises);\n  });\n  subtest.test('Should throw if invalid schema passed', async t => {\n    const fastify = Fastify();\n    t.plan(10);\n    fastify.get('/:id', (req, reply) => {\n      const {\n        params\n      } = req;\n\n      switch (parseInt(params.id)) {\n        case 1:\n          req.validateInput({}, 1);\n          break;\n\n        case 2:\n          req.validateInput({}, '');\n          break;\n\n        case 3:\n          req.validateInput({}, []);\n          break;\n\n        case 4:\n          req.validateInput({\n            'x-foo': []\n          }, null);\n          break;\n\n        case 5:\n          req.validateInput({\n            id: 0\n          }, () => {});\n          break;\n\n        default:\n          t.fail('Invalid id');\n      }\n    });\n    const promises = [];\n\n    for (let i = 1; i < 6; i++) {\n      promises.push((async j => {\n        const response = await fastify.inject({\n          path: `/${j}`,\n          method: 'GET'\n        });\n        const result = response.json();\n        t.equal(result.statusCode, 500);\n        t.equal(result.code, 'FST_ERR_REQ_INVALID_VALIDATION_INVOCATION');\n      })(i));\n    }\n\n    await Promise.all(promises);\n  });\n  subtest.test('Should set a WeakMap if compiling the very first schema', async t => {\n    const fastify = Fastify();\n    t.plan(3);\n    fastify.get('/', (req, reply) => {\n      t.equal(req[kRouteContext][kRequestValidateWeakMap], null);\n      t.equal(req.validateInput({\n        hello: 'world'\n      }, defaultSchema), true);\n      t.type(req[kRouteContext][kRequestValidateWeakMap], WeakMap);\n      reply.send({\n        hello: 'world'\n      });\n    });\n    await fastify.inject({\n      path: '/',\n      method: 'GET'\n    });\n  });\n});","file":"internals/request-validate.test.js","skipped":false,"dir":"test"},{"name":"Nested Context","suites":[],"updatePoint":{"line":747,"column":20,"index":18247},"line":747,"code":"test('Nested Context', subtest => {\n  subtest.plan(1);\n  subtest.test('Level_1', tst => {\n    tst.plan(3);\n    tst.test('#compileValidationSchema', ntst => {\n      ntst.plan(4);\n      ntst.test('Should return a function - Route without schema', async t => {\n        const fastify = Fastify();\n        fastify.register((instance, opts, next) => {\n          instance.get('/', (req, reply) => {\n            const validate = req.compileValidationSchema(defaultSchema);\n            t.type(validate, Function);\n            t.ok(validate({\n              hello: 'world'\n            }));\n            t.notOk(validate({\n              world: 'foo'\n            }));\n            reply.send({\n              hello: 'world'\n            });\n          });\n          next();\n        });\n        t.plan(3);\n        await fastify.inject({\n          path: '/',\n          method: 'GET'\n        });\n      });\n      ntst.test('Should reuse the validate fn across multiple invocations - Route without schema', async t => {\n        const fastify = Fastify();\n        let validate = null;\n        let counter = 0;\n        t.plan(16);\n        fastify.register((instance, opts, next) => {\n          instance.get('/', (req, reply) => {\n            counter++;\n\n            if (counter > 1) {\n              const newValidate = req.compileValidationSchema(defaultSchema);\n              t.equal(validate, newValidate, 'Are the same validate function');\n              validate = newValidate;\n            } else {\n              validate = req.compileValidationSchema(defaultSchema);\n            }\n\n            t.type(validate, Function);\n            t.ok(validate({\n              hello: 'world'\n            }));\n            t.notOk(validate({\n              world: 'foo'\n            }));\n            reply.send({\n              hello: 'world'\n            });\n          });\n          next();\n        });\n        await Promise.all([fastify.inject('/'), fastify.inject('/'), fastify.inject('/'), fastify.inject('/')]);\n        t.equal(counter, 4);\n      });\n      ntst.test('Should return a function - Route with schema', async t => {\n        const fastify = Fastify();\n        t.plan(3);\n        fastify.register((instance, opts, next) => {\n          instance.post('/', {\n            schema: {\n              body: defaultSchema\n            }\n          }, (req, reply) => {\n            const validate = req.compileValidationSchema(defaultSchema);\n            t.type(validate, Function);\n            t.ok(validate({\n              hello: 'world'\n            }));\n            t.notOk(validate({\n              world: 'foo'\n            }));\n            reply.send({\n              hello: 'world'\n            });\n          });\n          next();\n        });\n        await fastify.inject({\n          path: '/',\n          method: 'POST',\n          payload: {\n            hello: 'world',\n            world: 'foo'\n          }\n        });\n      });\n      ntst.test('Should use the custom validator compiler for the route', async t => {\n        const fastify = Fastify();\n        let called = 0;\n        t.plan(10);\n        fastify.register((instance, opts, next) => {\n          const custom = ({\n            schema,\n            httpPart,\n            url,\n            method\n          }) => {\n            t.equal(schema, defaultSchema);\n            t.equal(url, '/');\n            t.equal(method, 'GET');\n            t.equal(httpPart, 'querystring');\n            return input => {\n              called++;\n              t.same(input, {\n                hello: 'world'\n              });\n              return true;\n            };\n          };\n\n          fastify.get('/', {\n            validatorCompiler: custom\n          }, (req, reply) => {\n            const first = req.compileValidationSchema(defaultSchema, 'querystring');\n            const second = req.compileValidationSchema(defaultSchema, 'querystring');\n            t.equal(first, second);\n            t.ok(first({\n              hello: 'world'\n            }));\n            t.ok(second({\n              hello: 'world'\n            }));\n            t.equal(called, 2);\n            reply.send({\n              hello: 'world'\n            });\n          });\n          next();\n        });\n        await fastify.inject('/');\n      });\n    });\n    tst.test('#getValidationFunction', ntst => {\n      ntst.plan(6);\n      ntst.test('Should return a validation function', async t => {\n        const fastify = Fastify();\n        t.plan(1);\n        fastify.register((instance, opts, next) => {\n          instance.get('/', (req, reply) => {\n            const original = req.compileValidationSchema(defaultSchema);\n            const referenced = req.getValidationFunction(defaultSchema);\n            t.equal(original, referenced);\n            reply.send({\n              hello: 'world'\n            });\n          });\n          next();\n        });\n        await fastify.inject('/');\n      });\n      ntst.test('Should return undefined if no schema compiled', async t => {\n        const fastify = Fastify();\n        t.plan(1);\n        fastify.register((instance, opts, next) => {\n          instance.get('/', (req, reply) => {\n            const validate = req.getValidationFunction(defaultSchema);\n            t.notOk(validate);\n            reply.send({\n              hello: 'world'\n            });\n          });\n          next();\n        });\n        await fastify.inject('/');\n      });\n      ntst.test('Should return the validation function from each HTTP part', async t => {\n        const fastify = Fastify();\n        let headerValidation = null;\n        let customValidation = null;\n        t.plan(15);\n        fastify.register((instance, opts, next) => {\n          instance.post('/:id', {\n            schema: requestSchema\n          }, (req, reply) => {\n            const {\n              params\n            } = req;\n\n            switch (params.id) {\n              case 1:\n                customValidation = req.compileValidationSchema(defaultSchema);\n                t.ok(req.getValidationFunction('body'));\n                t.ok(req.getValidationFunction('body')({\n                  hello: 'world'\n                }));\n                t.notOk(req.getValidationFunction('body')({\n                  world: 'hello'\n                }));\n                break;\n\n              case 2:\n                headerValidation = req.getValidationFunction('headers');\n                t.ok(headerValidation);\n                t.ok(headerValidation({\n                  'x-foo': 'world'\n                }));\n                t.notOk(headerValidation({\n                  'x-foo': []\n                }));\n                break;\n\n              case 3:\n                t.ok(req.getValidationFunction('params'));\n                t.ok(req.getValidationFunction('params')({\n                  id: 123\n                }));\n                t.notOk(req.getValidationFunction('params'({\n                  id: 1.2\n                })));\n                break;\n\n              case 4:\n                t.ok(req.getValidationFunction('querystring'));\n                t.ok(req.getValidationFunction('querystring')({\n                  foo: 'bar'\n                }));\n                t.notOk(req.getValidationFunction('querystring')({\n                  foo: 'not-bar'\n                }));\n                break;\n\n              case 5:\n                t.equal(customValidation, req.getValidationFunction(defaultSchema));\n                t.ok(customValidation({\n                  hello: 'world'\n                }));\n                t.notOk(customValidation({}));\n                t.equal(headerValidation, req.getValidationFunction('headers'));\n                break;\n\n              default:\n                t.fail('Invalid id');\n            }\n\n            reply.send({\n              hello: 'world'\n            });\n          });\n          next();\n        });\n        const promises = [];\n\n        for (let i = 1; i < 6; i++) {\n          promises.push(fastify.inject({\n            path: `/${i}`,\n            method: 'post',\n            query: {\n              foo: 'bar'\n            },\n            payload: {\n              hello: 'world'\n            },\n            headers: {\n              'x-foo': 'x-bar'\n            }\n          }));\n        }\n\n        await Promise.all(promises);\n      });\n      ntst.test('Should return a validation function - nested', async t => {\n        const fastify = Fastify();\n        let called = false;\n\n        const custom = ({\n          schema,\n          httpPart,\n          url,\n          method\n        }) => {\n          t.equal(schema, defaultSchema);\n          t.equal(url, '/');\n          t.equal(method, 'GET');\n          t.notOk(httpPart);\n          called = true;\n          return () => true;\n        };\n\n        t.plan(6);\n        fastify.setValidatorCompiler(custom);\n        fastify.register((instance, opts, next) => {\n          instance.get('/', (req, reply) => {\n            const original = req.compileValidationSchema(defaultSchema);\n            const referenced = req.getValidationFunction(defaultSchema);\n            t.equal(original, referenced);\n            t.equal(called, true);\n            reply.send({\n              hello: 'world'\n            });\n          });\n          next();\n        });\n        await fastify.inject('/');\n      });\n      ntst.test('Should return undefined if no schema compiled - nested', async t => {\n        const fastify = Fastify();\n        let called = 0;\n\n        const custom = ({\n          schema,\n          httpPart,\n          url,\n          method\n        }) => {\n          called++;\n          return () => true;\n        };\n\n        t.plan(3);\n        fastify.setValidatorCompiler(custom);\n        fastify.get('/', (req, reply) => {\n          const validate = req.compileValidationSchema(defaultSchema);\n          t.equal(typeof validate, 'function');\n          reply.send({\n            hello: 'world'\n          });\n        });\n        fastify.register((instance, opts, next) => {\n          instance.get('/', (req, reply) => {\n            const validate = req.getValidationFunction(defaultSchema);\n            t.notOk(validate);\n            t.equal(called, 1);\n            reply.send({\n              hello: 'world'\n            });\n          });\n          next();\n        }, {\n          prefix: '/nested'\n        });\n        await fastify.inject('/');\n        await fastify.inject('/nested');\n      });\n      ntst.test('Should per-route defined validation compiler', async t => {\n        const fastify = Fastify();\n        let validateParent;\n        let validateChild;\n        let calledParent = 0;\n        let calledChild = 0;\n\n        const customParent = ({\n          schema,\n          httpPart,\n          url,\n          method\n        }) => {\n          calledParent++;\n          return () => true;\n        };\n\n        const customChild = ({\n          schema,\n          httpPart,\n          url,\n          method\n        }) => {\n          calledChild++;\n          return () => true;\n        };\n\n        t.plan(5);\n        fastify.setValidatorCompiler(customParent);\n        fastify.get('/', (req, reply) => {\n          validateParent = req.compileValidationSchema(defaultSchema);\n          t.equal(typeof validateParent, 'function');\n          reply.send({\n            hello: 'world'\n          });\n        });\n        fastify.register((instance, opts, next) => {\n          instance.get('/', {\n            validatorCompiler: customChild\n          }, (req, reply) => {\n            const validate1 = req.compileValidationSchema(defaultSchema);\n            validateChild = req.getValidationFunction(defaultSchema);\n            t.equal(validate1, validateChild);\n            t.not(validateParent, validateChild);\n            t.equal(calledParent, 1);\n            t.equal(calledChild, 1);\n            reply.send({\n              hello: 'world'\n            });\n          });\n          next();\n        }, {\n          prefix: '/nested'\n        });\n        await fastify.inject('/');\n        await fastify.inject('/nested');\n      });\n    });\n    tst.test('#validate', ntst => {\n      ntst.plan(3);\n      ntst.test('Should return true/false if input valid - Route without schema', async t => {\n        const fastify = Fastify();\n        t.plan(2);\n        fastify.register((instance, opts, next) => {\n          instance.get('/', (req, reply) => {\n            const isNotValid = req.validateInput({\n              world: 'string'\n            }, defaultSchema);\n            const isValid = req.validateInput({\n              hello: 'string'\n            }, defaultSchema);\n            t.notOk(isNotValid);\n            t.ok(isValid);\n            reply.send({\n              hello: 'world'\n            });\n          });\n          next();\n        });\n        await fastify.inject('/');\n      });\n      ntst.test('Should use the custom validator compiler for the route', async t => {\n        const fastify = Fastify();\n        let parentCalled = 0;\n        let childCalled = 0;\n\n        const customParent = () => {\n          parentCalled++;\n          return () => true;\n        };\n\n        const customChild = ({\n          schema,\n          httpPart,\n          url,\n          method\n        }) => {\n          t.equal(schema, defaultSchema);\n          t.equal(url, '/');\n          t.equal(method, 'GET');\n          t.equal(httpPart, 'querystring');\n          return input => {\n            childCalled++;\n            t.same(input, {\n              hello: 'world'\n            });\n            return true;\n          };\n        };\n\n        t.plan(10);\n        fastify.setValidatorCompiler(customParent);\n        fastify.register((instance, opts, next) => {\n          instance.get('/', {\n            validatorCompiler: customChild\n          }, (req, reply) => {\n            const ok = req.validateInput({\n              hello: 'world'\n            }, defaultSchema, 'querystring');\n            const ok2 = req.validateInput({\n              hello: 'world'\n            }, defaultSchema);\n            t.ok(ok);\n            t.ok(ok2);\n            t.equal(childCalled, 2);\n            t.equal(parentCalled, 0);\n            reply.send({\n              hello: 'world'\n            });\n          });\n          next();\n        });\n        await fastify.inject('/');\n      });\n      ntst.test('Should return true/false if input valid - With Schema for Route defined and scoped validator compiler', async t => {\n        const validator = new Ajv();\n        const fastify = Fastify();\n        const childCounter = {\n          query: 0,\n          body: 0,\n          params: 0,\n          headers: 0\n        };\n        let parentCalled = 0;\n\n        const parent = () => {\n          parentCalled++;\n          return () => true;\n        };\n\n        const child = ({\n          schema,\n          httpPart,\n          url,\n          method\n        }) => {\n          httpPart = httpPart === 'querystring' ? 'query' : httpPart;\n          const validate = validator.compile(schema);\n          return input => {\n            childCounter[httpPart]++;\n            return validate(input);\n          };\n        };\n\n        t.plan(13);\n        fastify.setValidatorCompiler(parent);\n        fastify.register((instance, opts, next) => {\n          instance.setValidatorCompiler(child);\n          instance.post('/:id', {\n            schema: requestSchema\n          }, (req, reply) => {\n            const {\n              params\n            } = req;\n\n            switch (parseInt(params.id)) {\n              case 1:\n                t.ok(req.validateInput({\n                  hello: 'world'\n                }, 'body'));\n                t.notOk(req.validateInput({\n                  hello: [],\n                  world: 'foo'\n                }, 'body'));\n                break;\n\n              case 2:\n                t.notOk(req.validateInput({\n                  foo: 'something'\n                }, 'querystring'));\n                t.ok(req.validateInput({\n                  foo: 'bar'\n                }, 'querystring'));\n                break;\n\n              case 3:\n                t.notOk(req.validateInput({\n                  'x-foo': []\n                }, 'headers'));\n                t.ok(req.validateInput({\n                  'x-foo': 'something'\n                }, 'headers'));\n                break;\n\n              case 4:\n                t.ok(req.validateInput({\n                  id: 1\n                }, 'params'));\n                t.notOk(req.validateInput({\n                  id: params.id\n                }, 'params'));\n                break;\n\n              default:\n                t.fail('Invalid id');\n            }\n\n            reply.send({\n              hello: 'world'\n            });\n          });\n          next();\n        });\n        const promises = [];\n\n        for (let i = 1; i < 5; i++) {\n          promises.push(fastify.inject({\n            path: `/${i}`,\n            method: 'post',\n            query: {},\n            payload: {\n              hello: 'world'\n            }\n          }));\n        }\n\n        await Promise.all(promises);\n        t.equal(childCounter.query, 6); // 4 calls made + 2 custom validations\n\n        t.equal(childCounter.headers, 6); // 4 calls made + 2 custom validations\n\n        t.equal(childCounter.body, 6); // 4 calls made + 2 custom validations\n\n        t.equal(childCounter.params, 6); // 4 calls made + 2 custom validations\n\n        t.equal(parentCalled, 0);\n      });\n    });\n  });\n});","file":"internals/request-validate.test.js","skipped":false,"dir":"test"},{"name":"Regular request","suites":[],"updatePoint":{"line":18,"column":21,"index":293},"line":18,"code":"test('Regular request', t => {\n  const headers = {\n    host: 'hostname'\n  };\n  const req = {\n    method: 'GET',\n    url: '/',\n    socket: {\n      remoteAddress: 'ip'\n    },\n    headers\n  };\n  const context = new Context({\n    schema: {\n      body: {\n        type: 'object',\n        required: ['hello'],\n        properties: {\n          hello: {\n            type: 'string'\n          }\n        }\n      }\n    },\n    config: {\n      some: 'config',\n      url: req.url,\n      method: req.method\n    },\n    server: {\n      [kReply]: {},\n      [kRequest]: Request\n    }\n  });\n  req.connection = req.socket;\n  const request = new Request('id', 'params', req, 'query', 'log', context);\n  t.type(request, Request);\n  t.type(request.validateInput, Function);\n  t.type(request.getValidationFunction, Function);\n  t.type(request.compileValidationSchema, Function);\n  t.equal(request.id, 'id');\n  t.equal(request.params, 'params');\n  t.equal(request.raw, req);\n  t.equal(request.query, 'query');\n  t.equal(request.headers, headers);\n  t.equal(request.log, 'log');\n  t.equal(request.ip, 'ip');\n  t.equal(request.ips, undefined);\n  t.equal(request.hostname, 'hostname');\n  t.equal(request.body, undefined);\n  t.equal(request.method, 'GET');\n  t.equal(request.url, '/');\n  t.equal(request.socket, req.socket);\n  t.equal(request.protocol, 'http');\n  t.equal(request.routerPath, context.config.url);\n  t.equal(request.routerMethod, context.config.method);\n  t.equal(request.routeConfig, context[kPublicRouteContext].config);\n  t.equal(request.routeSchema, context[kPublicRouteContext].schema); // This will be removed, it's deprecated\n\n  t.equal(request.connection, req.connection);\n  t.end();\n});","file":"internals/request.test.js","skipped":false,"dir":"test"},{"name":"Regular request - hostname from authority","suites":[],"updatePoint":{"line":80,"column":47,"index":1997},"line":80,"code":"test('Regular request - hostname from authority', t => {\n  t.plan(2);\n  const headers = {\n    ':authority': 'authority'\n  };\n  const req = {\n    method: 'GET',\n    url: '/',\n    socket: {\n      remoteAddress: 'ip'\n    },\n    headers\n  };\n  const request = new Request('id', 'params', req, 'query', 'log');\n  t.type(request, Request);\n  t.equal(request.hostname, 'authority');\n});","file":"internals/request.test.js","skipped":false,"dir":"test"},{"name":"Regular request - host header has precedence over authority","suites":[],"updatePoint":{"line":97,"column":65,"index":2395},"line":97,"code":"test('Regular request - host header has precedence over authority', t => {\n  t.plan(2);\n  const headers = {\n    host: 'hostname',\n    ':authority': 'authority'\n  };\n  const req = {\n    method: 'GET',\n    url: '/',\n    socket: {\n      remoteAddress: 'ip'\n    },\n    headers\n  };\n  const request = new Request('id', 'params', req, 'query', 'log');\n  t.type(request, Request);\n  t.equal(request.hostname, 'hostname');\n});","file":"internals/request.test.js","skipped":false,"dir":"test"},{"name":"Request with trust proxy","suites":[],"updatePoint":{"line":115,"column":30,"index":2779},"line":115,"code":"test('Request with trust proxy', t => {\n  t.plan(22);\n  const headers = {\n    'x-forwarded-for': '2.2.2.2, 1.1.1.1',\n    'x-forwarded-host': 'example.com'\n  };\n  const req = {\n    method: 'GET',\n    url: '/',\n    socket: {\n      remoteAddress: 'ip'\n    },\n    headers\n  };\n  const context = new Context({\n    schema: {\n      body: {\n        type: 'object',\n        required: ['hello'],\n        properties: {\n          hello: {\n            type: 'string'\n          }\n        }\n      }\n    },\n    config: {\n      some: 'config',\n      url: req.url,\n      method: req.method\n    },\n    server: {\n      [kReply]: {},\n      [kRequest]: Request\n    }\n  });\n  const TpRequest = Request.buildRequest(Request, true);\n  const request = new TpRequest('id', 'params', req, 'query', 'log', context);\n  t.type(request, TpRequest);\n  t.equal(request.id, 'id');\n  t.equal(request.params, 'params');\n  t.same(request.raw, req);\n  t.equal(request.query, 'query');\n  t.equal(request.headers, headers);\n  t.equal(request.log, 'log');\n  t.equal(request.ip, '2.2.2.2');\n  t.same(request.ips, ['ip', '1.1.1.1', '2.2.2.2']);\n  t.equal(request.hostname, 'example.com');\n  t.equal(request.body, undefined);\n  t.equal(request.method, 'GET');\n  t.equal(request.url, '/');\n  t.equal(request.socket, req.socket);\n  t.equal(request.protocol, 'http');\n  t.type(request.validateInput, Function);\n  t.type(request.getValidationFunction, Function);\n  t.type(request.compileValidationSchema, Function);\n  t.equal(request.routerPath, context.config.url);\n  t.equal(request.routerMethod, context.config.method);\n  t.equal(request.routeConfig, context[kPublicRouteContext].config);\n  t.equal(request.routeSchema, context[kPublicRouteContext].schema);\n});","file":"internals/request.test.js","skipped":false,"dir":"test"},{"name":"Request with trust proxy, encrypted","suites":[],"updatePoint":{"line":176,"column":41,"index":4506},"line":176,"code":"test('Request with trust proxy, encrypted', t => {\n  t.plan(2);\n  const headers = {\n    'x-forwarded-for': '2.2.2.2, 1.1.1.1',\n    'x-forwarded-host': 'example.com'\n  };\n  const req = {\n    method: 'GET',\n    url: '/',\n    socket: {\n      remoteAddress: 'ip',\n      encrypted: true\n    },\n    headers\n  };\n  const TpRequest = Request.buildRequest(Request, true);\n  const request = new TpRequest('id', 'params', req, 'query', 'log');\n  t.type(request, TpRequest);\n  t.equal(request.protocol, 'https');\n});","file":"internals/request.test.js","skipped":false,"dir":"test"},{"name":"Request with trust proxy - no x-forwarded-host header","suites":[],"updatePoint":{"line":196,"column":59,"index":5029},"line":196,"code":"test('Request with trust proxy - no x-forwarded-host header', t => {\n  t.plan(2);\n  const headers = {\n    'x-forwarded-for': '2.2.2.2, 1.1.1.1',\n    host: 'hostname'\n  };\n  const req = {\n    method: 'GET',\n    url: '/',\n    socket: {\n      remoteAddress: 'ip'\n    },\n    headers\n  };\n  const TpRequest = Request.buildRequest(Request, true);\n  const request = new TpRequest('id', 'params', req, 'query', 'log');\n  t.type(request, TpRequest);\n  t.equal(request.hostname, 'hostname');\n});","file":"internals/request.test.js","skipped":false,"dir":"test"},{"name":"Request with trust proxy - no x-forwarded-host header and fallback to authority","suites":[],"updatePoint":{"line":215,"column":85,"index":5541},"line":215,"code":"test('Request with trust proxy - no x-forwarded-host header and fallback to authority', t => {\n  t.plan(2);\n  const headers = {\n    'x-forwarded-for': '2.2.2.2, 1.1.1.1',\n    ':authority': 'authority'\n  };\n  const req = {\n    method: 'GET',\n    url: '/',\n    socket: {\n      remoteAddress: 'ip'\n    },\n    headers\n  };\n  const TpRequest = Request.buildRequest(Request, true);\n  const request = new TpRequest('id', 'params', req, 'query', 'log');\n  t.type(request, TpRequest);\n  t.equal(request.hostname, 'authority');\n});","file":"internals/request.test.js","skipped":false,"dir":"test"},{"name":"Request with trust proxy - x-forwarded-host header has precedence over host","suites":[],"updatePoint":{"line":234,"column":81,"index":6059},"line":234,"code":"test('Request with trust proxy - x-forwarded-host header has precedence over host', t => {\n  t.plan(2);\n  const headers = {\n    'x-forwarded-for': ' 2.2.2.2, 1.1.1.1',\n    'x-forwarded-host': 'example.com',\n    host: 'hostname'\n  };\n  const req = {\n    method: 'GET',\n    url: '/',\n    socket: {\n      remoteAddress: 'ip'\n    },\n    headers\n  };\n  const TpRequest = Request.buildRequest(Request, true);\n  const request = new TpRequest('id', 'params', req, 'query', 'log');\n  t.type(request, TpRequest);\n  t.equal(request.hostname, 'example.com');\n});","file":"internals/request.test.js","skipped":false,"dir":"test"},{"name":"Request with trust proxy - handles multiple entries in x-forwarded-host/proto","suites":[],"updatePoint":{"line":254,"column":83,"index":6612},"line":254,"code":"test('Request with trust proxy - handles multiple entries in x-forwarded-host/proto', t => {\n  t.plan(3);\n  const headers = {\n    'x-forwarded-host': 'example2.com, example.com',\n    'x-forwarded-proto': 'http, https'\n  };\n  const req = {\n    method: 'GET',\n    url: '/',\n    socket: {\n      remoteAddress: 'ip'\n    },\n    headers\n  };\n  const TpRequest = Request.buildRequest(Request, true);\n  const request = new TpRequest('id', 'params', req, 'query', 'log');\n  t.type(request, TpRequest);\n  t.equal(request.hostname, 'example.com');\n  t.equal(request.protocol, 'https');\n});","file":"internals/request.test.js","skipped":false,"dir":"test"},{"name":"Request with trust proxy - plain","suites":[],"updatePoint":{"line":274,"column":38,"index":7146},"line":274,"code":"test('Request with trust proxy - plain', t => {\n  t.plan(1);\n  const headers = {\n    'x-forwarded-for': '2.2.2.2, 1.1.1.1',\n    'x-forwarded-host': 'example.com'\n  };\n  const req = {\n    method: 'GET',\n    url: '/',\n    socket: {\n      remoteAddress: 'ip'\n    },\n    headers\n  };\n  const TpRequest = Request.buildRequest(Request, true);\n  const request = new TpRequest('id', 'params', req, 'query', 'log');\n  t.same(request.protocol, 'http');\n});","file":"internals/request.test.js","skipped":false,"dir":"test"},{"name":"Request with undefined socket","suites":[],"updatePoint":{"line":292,"column":35,"index":7590},"line":292,"code":"test('Request with undefined socket', t => {\n  t.plan(18);\n  const headers = {\n    host: 'hostname'\n  };\n  const req = {\n    method: 'GET',\n    url: '/',\n    socket: undefined,\n    headers\n  };\n  const request = new Request('id', 'params', req, 'query', 'log');\n  t.type(request, Request);\n  t.equal(request.id, 'id');\n  t.equal(request.params, 'params');\n  t.same(request.raw, req);\n  t.equal(request.query, 'query');\n  t.equal(request.headers, headers);\n  t.equal(request.log, 'log');\n  t.equal(request.ip, undefined);\n  t.equal(request.ips, undefined);\n  t.equal(request.hostname, 'hostname');\n  t.same(request.body, null);\n  t.equal(request.method, 'GET');\n  t.equal(request.url, '/');\n  t.equal(request.protocol, undefined);\n  t.same(request.socket, req.socket);\n  t.type(request.validateInput, Function);\n  t.type(request.getValidationFunction, Function);\n  t.type(request.compileValidationSchema, Function);\n});","file":"internals/request.test.js","skipped":false,"dir":"test"},{"name":"Request with trust proxy and undefined socket","suites":[],"updatePoint":{"line":323,"column":51,"index":8525},"line":323,"code":"test('Request with trust proxy and undefined socket', t => {\n  t.plan(1);\n  const headers = {\n    'x-forwarded-for': '2.2.2.2, 1.1.1.1',\n    'x-forwarded-host': 'example.com'\n  };\n  const req = {\n    method: 'GET',\n    url: '/',\n    socket: undefined,\n    headers\n  };\n  const TpRequest = Request.buildRequest(Request, true);\n  const request = new TpRequest('id', 'params', req, 'query', 'log');\n  t.same(request.protocol, undefined);\n});","file":"internals/request.test.js","skipped":false,"dir":"test"},{"name":"start listening","suites":[],"updatePoint":{"line":24,"column":21,"index":379},"line":24,"code":"test('start listening', async t => {\n  const {\n    server,\n    listen\n  } = createServer({}, handler);\n  await listen.call(Fastify(), {\n    port: 0,\n    host: 'localhost'\n  });\n  server.close();\n  t.pass('server started');\n});","file":"internals/server.test.js","skipped":false,"dir":"test"},{"name":"DNS errors does not stop the main server on localhost - promise interface","suites":[],"updatePoint":{"line":36,"column":79,"index":664},"line":36,"code":"test('DNS errors does not stop the main server on localhost - promise interface', async t => {\n  const {\n    createServer\n  } = proxyquire('../../lib/server', {\n    dns: {\n      lookup: (hostname, options, cb) => {\n        cb(new Error('DNS error'));\n      }\n    }\n  });\n  const {\n    server,\n    listen\n  } = createServer({}, handler);\n  await listen.call(Fastify(), {\n    port: 0,\n    host: 'localhost'\n  });\n  server.close();\n  t.pass('server started');\n});","file":"internals/server.test.js","skipped":false,"dir":"test"},{"name":"DNS errors does not stop the main server on localhost - callback interface","suites":[],"updatePoint":{"line":57,"column":80,"index":1126},"line":57,"code":"test('DNS errors does not stop the main server on localhost - callback interface', t => {\n  t.plan(2);\n  const {\n    createServer\n  } = proxyquire('../../lib/server', {\n    dns: {\n      lookup: (hostname, options, cb) => {\n        cb(new Error('DNS error'));\n      }\n    }\n  });\n  const {\n    server,\n    listen\n  } = createServer({}, handler);\n  listen.call(Fastify(), {\n    port: 0,\n    host: 'localhost'\n  }, err => {\n    t.error(err);\n    server.close();\n    t.pass('server started');\n  });\n});","file":"internals/server.test.js","skipped":false,"dir":"test"},{"name":"DNS returns empty binding","suites":[],"updatePoint":{"line":81,"column":31,"index":1576},"line":81,"code":"test('DNS returns empty binding', t => {\n  t.plan(2);\n  const {\n    createServer\n  } = proxyquire('../../lib/server', {\n    dns: {\n      lookup: (hostname, options, cb) => {\n        cb(null, []);\n      }\n    }\n  });\n  const {\n    server,\n    listen\n  } = createServer({}, handler);\n  listen.call(Fastify(), {\n    port: 0,\n    host: 'localhost'\n  }, err => {\n    t.error(err);\n    server.close();\n    t.pass('server started');\n  });\n});","file":"internals/server.test.js","skipped":false,"dir":"test"},{"name":"DNS returns more than two binding","suites":[],"updatePoint":{"line":105,"column":39,"index":2020},"line":105,"code":"test('DNS returns more than two binding', t => {\n  t.plan(2);\n  const {\n    createServer\n  } = proxyquire('../../lib/server', {\n    dns: {\n      lookup: (hostname, options, cb) => {\n        cb(null, [{\n          address: '::1',\n          family: 6\n        }, {\n          address: '127.0.0.1',\n          family: 4\n        }, {\n          address: '0.0.0.0',\n          family: 4\n        }]);\n      }\n    }\n  });\n  const {\n    server,\n    listen\n  } = createServer({}, handler);\n  listen.call(Fastify(), {\n    port: 0,\n    host: 'localhost'\n  }, err => {\n    t.error(err);\n    server.close();\n    t.pass('server started');\n  });\n});","file":"internals/server.test.js","skipped":false,"dir":"test"},{"name":"Symbols","suites":[],"updatePoint":{"line":25,"column":13,"index":386},"line":25,"code":"test('Symbols', t => {\n  t.plan(5);\n  t.equal(typeof symbols.responseSchema, 'symbol');\n  t.equal(typeof symbols.bodySchema, 'symbol');\n  t.equal(typeof symbols.querystringSchema, 'symbol');\n  t.equal(typeof symbols.paramsSchema, 'symbol');\n  t.equal(typeof symbols.headersSchema, 'symbol');\n});","file":"internals/validation.test.js","skipped":false,"dir":"test"},{"name":" schema - missing schema","suites":[],"updatePoint":{"line":34,"column":39,"index":792},"line":34,"code":"  test(`${func} schema - missing schema`, t => {\n    t.plan(2);\n    const context = {};\n    validation[func](context);\n    t.equal(typeof context[symbols.bodySchema], 'undefined');\n    t.equal(typeof context[symbols.responseSchema], 'undefined');\n  });","file":"internals/validation.test.js","skipped":false,"dir":"test"},{"name":" schema - missing output schema","suites":[],"updatePoint":{"line":41,"column":46,"index":1052},"line":41,"code":"  test(`${func} schema - missing output schema`, t => {\n    t.plan(1);\n    const context = {\n      schema: {}\n    };\n    validation[func](context, null);\n    t.equal(typeof context[symbols.responseSchema], 'undefined');\n  });","file":"internals/validation.test.js","skipped":false,"dir":"test"},{"name":"build schema - output schema","suites":[],"updatePoint":{"line":50,"column":34,"index":1270},"line":50,"code":"test('build schema - output schema', t => {\n  t.plan(2);\n  const opts = {\n    schema: {\n      response: {\n        '2xx': {\n          type: 'object',\n          properties: {\n            hello: {\n              type: 'string'\n            }\n          }\n        },\n        201: {\n          type: 'object',\n          properties: {\n            hello: {\n              type: 'number'\n            }\n          }\n        }\n      }\n    }\n  };\n  validation.compileSchemasForSerialization(opts, ({\n    schema,\n    method,\n    url,\n    httpPart\n  }) => ajv.compile(schema));\n  t.equal(typeof opts[symbols.responseSchema]['2xx'], 'function');\n  t.equal(typeof opts[symbols.responseSchema]['201'], 'function');\n});","file":"internals/validation.test.js","skipped":false,"dir":"test"},{"name":"build schema - payload schema","suites":[],"updatePoint":{"line":83,"column":35,"index":1968},"line":83,"code":"test('build schema - payload schema', t => {\n  t.plan(1);\n  const opts = {\n    schema: {\n      body: {\n        type: 'object',\n        properties: {\n          hello: {\n            type: 'string'\n          }\n        }\n      }\n    }\n  };\n  validation.compileSchemasForValidation(opts, ({\n    schema,\n    method,\n    url,\n    httpPart\n  }) => ajv.compile(schema));\n  t.equal(typeof opts[symbols.bodySchema], 'function');\n});","file":"internals/validation.test.js","skipped":false,"dir":"test"},{"name":"build schema - avoid repeated normalize schema","suites":[],"updatePoint":{"line":105,"column":52,"index":2407},"line":105,"code":"test('build schema - avoid repeated normalize schema', t => {\n  t.plan(3);\n  const serverConfig = {\n    jsonShorthand: true\n  };\n  const opts = {\n    schema: {\n      query: {\n        type: 'object',\n        properties: {\n          hello: {\n            type: 'string'\n          }\n        }\n      }\n    }\n  };\n  opts.schema = normalizeSchema(opts.schema, serverConfig);\n  t.not(kSchemaVisited, undefined);\n  t.equal(opts.schema[kSchemaVisited], true);\n  t.equal(opts.schema, normalizeSchema(opts.schema, serverConfig));\n});","file":"internals/validation.test.js","skipped":false,"dir":"test"},{"name":"build schema - query schema","suites":[],"updatePoint":{"line":127,"column":33,"index":2910},"line":127,"code":"test('build schema - query schema', t => {\n  t.plan(2);\n  const serverConfig = {\n    jsonShorthand: true\n  };\n  const opts = {\n    schema: {\n      query: {\n        type: 'object',\n        properties: {\n          hello: {\n            type: 'string'\n          }\n        }\n      }\n    }\n  };\n  opts.schema = normalizeSchema(opts.schema, serverConfig);\n  validation.compileSchemasForValidation(opts, ({\n    schema,\n    method,\n    url,\n    httpPart\n  }) => ajv.compile(schema));\n  t.type(opts[symbols.querystringSchema].schema.type, 'string');\n  t.equal(typeof opts[symbols.querystringSchema], 'function');\n});","file":"internals/validation.test.js","skipped":false,"dir":"test"},{"name":"build schema - query schema abbreviated","suites":[],"updatePoint":{"line":154,"column":45,"index":3529},"line":154,"code":"test('build schema - query schema abbreviated', t => {\n  t.plan(2);\n  const serverConfig = {\n    jsonShorthand: true\n  };\n  const opts = {\n    schema: {\n      query: {\n        hello: {\n          type: 'string'\n        }\n      }\n    }\n  };\n  opts.schema = normalizeSchema(opts.schema, serverConfig);\n  validation.compileSchemasForValidation(opts, ({\n    schema,\n    method,\n    url,\n    httpPart\n  }) => ajv.compile(schema));\n  t.type(opts[symbols.querystringSchema].schema.type, 'string');\n  t.equal(typeof opts[symbols.querystringSchema], 'function');\n});","file":"internals/validation.test.js","skipped":false,"dir":"test"},{"name":"build schema - querystring schema","suites":[],"updatePoint":{"line":178,"column":39,"index":4080},"line":178,"code":"test('build schema - querystring schema', t => {\n  t.plan(2);\n  const opts = {\n    schema: {\n      querystring: {\n        type: 'object',\n        properties: {\n          hello: {\n            type: 'string'\n          }\n        }\n      }\n    }\n  };\n  validation.compileSchemasForValidation(opts, ({\n    schema,\n    method,\n    url,\n    httpPart\n  }) => ajv.compile(schema));\n  t.type(opts[symbols.querystringSchema].schema.type, 'string');\n  t.equal(typeof opts[symbols.querystringSchema], 'function');\n});","file":"internals/validation.test.js","skipped":false,"dir":"test"},{"name":"build schema - querystring schema abbreviated","suites":[],"updatePoint":{"line":201,"column":51,"index":4597},"line":201,"code":"test('build schema - querystring schema abbreviated', t => {\n  t.plan(2);\n  const serverConfig = {\n    jsonShorthand: true\n  };\n  const opts = {\n    schema: {\n      querystring: {\n        hello: {\n          type: 'string'\n        }\n      }\n    }\n  };\n  opts.schema = normalizeSchema(opts.schema, serverConfig);\n  validation.compileSchemasForValidation(opts, ({\n    schema,\n    method,\n    url,\n    httpPart\n  }) => ajv.compile(schema));\n  t.type(opts[symbols.querystringSchema].schema.type, 'string');\n  t.equal(typeof opts[symbols.querystringSchema], 'function');\n});","file":"internals/validation.test.js","skipped":false,"dir":"test"},{"name":"build schema - must throw if querystring and query schema exist","suites":[],"updatePoint":{"line":225,"column":69,"index":5184},"line":225,"code":"test('build schema - must throw if querystring and query schema exist', t => {\n  t.plan(2);\n\n  try {\n    const serverConfig = {\n      jsonShorthand: true\n    };\n    const opts = {\n      schema: {\n        query: {\n          type: 'object',\n          properties: {\n            hello: {\n              type: 'string'\n            }\n          }\n        },\n        querystring: {\n          type: 'object',\n          properties: {\n            hello: {\n              type: 'string'\n            }\n          }\n        }\n      }\n    };\n    opts.schema = normalizeSchema(opts.schema, serverConfig);\n  } catch (err) {\n    t.equal(err.code, 'FST_ERR_SCH_DUPLICATE');\n    t.equal(err.message, 'Schema with \\'querystring\\' already present!');\n  }\n});","file":"internals/validation.test.js","skipped":false,"dir":"test"},{"name":"build schema - params schema","suites":[],"updatePoint":{"line":258,"column":34,"index":5883},"line":258,"code":"test('build schema - params schema', t => {\n  t.plan(1);\n  const opts = {\n    schema: {\n      params: {\n        type: 'object',\n        properties: {\n          hello: {\n            type: 'string'\n          }\n        }\n      }\n    }\n  };\n  validation.compileSchemasForValidation(opts, ({\n    schema,\n    method,\n    url,\n    httpPart\n  }) => ajv.compile(schema));\n  t.equal(typeof opts[symbols.paramsSchema], 'function');\n});","file":"internals/validation.test.js","skipped":false,"dir":"test"},{"name":"build schema - headers schema","suites":[],"updatePoint":{"line":280,"column":35,"index":6309},"line":280,"code":"test('build schema - headers schema', t => {\n  t.plan(1);\n  const opts = {\n    schema: {\n      headers: {\n        type: 'object',\n        properties: {\n          'content-type': {\n            type: 'string'\n          }\n        }\n      }\n    }\n  };\n  validation.compileSchemasForValidation(opts, ({\n    schema,\n    method,\n    url,\n    httpPart\n  }) => ajv.compile(schema));\n  t.equal(typeof opts[symbols.headersSchema], 'function');\n});","file":"internals/validation.test.js","skipped":false,"dir":"test"},{"name":"build schema - headers are lowercase","suites":[],"updatePoint":{"line":302,"column":42,"index":6753},"line":302,"code":"test('build schema - headers are lowercase', t => {\n  t.plan(1);\n  const opts = {\n    schema: {\n      headers: {\n        type: 'object',\n        properties: {\n          'Content-Type': {\n            type: 'string'\n          }\n        }\n      }\n    }\n  };\n  validation.compileSchemasForValidation(opts, ({\n    schema,\n    method,\n    url,\n    httpPart\n  }) => {\n    t.ok(schema.properties['content-type'], 'lowercase content-type exists');\n    return () => {};\n  });\n});","file":"internals/validation.test.js","skipped":false,"dir":"test"},{"name":"build schema - headers are not lowercased in case of custom object","suites":[],"updatePoint":{"line":326,"column":72,"index":7253},"line":326,"code":"test('build schema - headers are not lowercased in case of custom object', t => {\n  t.plan(1);\n\n  class Headers {}\n\n  const opts = {\n    schema: {\n      headers: new Headers()\n    }\n  };\n  validation.compileSchemasForValidation(opts, ({\n    schema,\n    method,\n    url,\n    httpPart\n  }) => {\n    t.type(schema, Headers);\n    return () => {};\n  });\n});","file":"internals/validation.test.js","skipped":false,"dir":"test"},{"name":"build schema - headers are not lowercased in case of custom validator provided","suites":[],"updatePoint":{"line":346,"column":84,"index":7618},"line":346,"code":"test('build schema - headers are not lowercased in case of custom validator provided', t => {\n  t.plan(1);\n\n  class Headers {}\n\n  const opts = {\n    schema: {\n      headers: new Headers()\n    }\n  };\n  validation.compileSchemasForValidation(opts, ({\n    schema,\n    method,\n    url,\n    httpPart\n  }) => {\n    t.type(schema, Headers);\n    return () => {};\n  }, true);\n});","file":"internals/validation.test.js","skipped":false,"dir":"test"},{"name":"build schema - uppercased headers are not included","suites":[],"updatePoint":{"line":366,"column":56,"index":7961},"line":366,"code":"test('build schema - uppercased headers are not included', t => {\n  t.plan(1);\n  const opts = {\n    schema: {\n      headers: {\n        type: 'object',\n        properties: {\n          'Content-Type': {\n            type: 'string'\n          }\n        }\n      }\n    }\n  };\n  validation.compileSchemasForValidation(opts, ({\n    schema,\n    method,\n    url,\n    httpPart\n  }) => {\n    t.notOk('Content-Type' in schema.properties, 'uppercase does not exist');\n    return () => {};\n  });\n});","file":"internals/validation.test.js","skipped":false,"dir":"test"},{"name":"keepAliveTimeout","suites":[],"updatePoint":{"line":10,"column":22,"index":149},"line":10,"code":"test('keepAliveTimeout', t => {\n  t.plan(6);\n\n  try {\n    Fastify({\n      keepAliveTimeout: 1.3\n    });\n    t.fail('option must be an integer');\n  } catch (err) {\n    t.ok(err);\n  }\n\n  try {\n    Fastify({\n      keepAliveTimeout: []\n    });\n    t.fail('option must be an integer');\n  } catch (err) {\n    t.ok(err);\n  }\n\n  const httpServer = Fastify({\n    keepAliveTimeout: 1\n  }).server;\n  t.equal(httpServer.keepAliveTimeout, 1);\n  const httpsServer = Fastify({\n    keepAliveTimeout: 2,\n    https: {}\n  }).server;\n  t.equal(httpsServer.keepAliveTimeout, 2);\n  const http2Server = Fastify({\n    keepAliveTimeout: 3,\n    http2: true\n  }).server;\n  t.not(http2Server.keepAliveTimeout, 3);\n\n  const serverFactory = (handler, _) => {\n    const server = http.createServer((req, res) => {\n      handler(req, res);\n    });\n    server.keepAliveTimeout = 5;\n    return server;\n  };\n\n  const customServer = Fastify({\n    keepAliveTimeout: 4,\n    serverFactory\n  }).server;\n  t.equal(customServer.keepAliveTimeout, 5);\n});","file":"keepAliveTimeout.test.js","skipped":false,"dir":"test"},{"name":"listen accepts a port and a callback","suites":[],"updatePoint":{"line":26,"column":42,"index":592},"line":26,"code":"test('listen accepts a port and a callback', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen(0, err => {\n    t.equal(fastify.server.address().address, localhost);\n    t.error(err);\n  });\n});","file":"listen.deprecated.test.js","skipped":false,"dir":"test"},{"name":"listen accepts a port and a callback with (err, address)","suites":[],"updatePoint":{"line":35,"column":62,"index":864},"line":35,"code":"test('listen accepts a port and a callback with (err, address)', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen(0, (err, address) => {\n    t.equal(address, `http://${localhostForURL}:${fastify.server.address().port}`);\n    t.error(err);\n  });\n});","file":"listen.deprecated.test.js","skipped":false,"dir":"test"},{"name":"listen accepts a port, address, and callback","suites":[],"updatePoint":{"line":44,"column":50,"index":1161},"line":44,"code":"test('listen accepts a port, address, and callback', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen(0, localhost, err => {\n    t.error(err);\n  });\n});","file":"listen.deprecated.test.js","skipped":false,"dir":"test"},{"name":"listen accepts options, backlog and a callback","suites":[],"updatePoint":{"line":52,"column":52,"index":1376},"line":52,"code":"test('listen accepts options, backlog and a callback', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen({\n    port: 0,\n    host: 'localhost'\n  }, 511, err => {\n    t.error(err);\n  });\n});","file":"listen.deprecated.test.js","skipped":false,"dir":"test"},{"name":"listen accepts options (no port), backlog and a callback","suites":[],"updatePoint":{"line":63,"column":62,"index":1634},"line":63,"code":"test('listen accepts options (no port), backlog and a callback', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen({\n    host: 'localhost'\n  }, 511, err => {\n    t.error(err);\n  });\n});","file":"listen.deprecated.test.js","skipped":false,"dir":"test"},{"name":"listen accepts options (no host), backlog and a callback","suites":[],"updatePoint":{"line":73,"column":62,"index":1879},"line":73,"code":"test('listen accepts options (no host), backlog and a callback', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen({\n    port: 0\n  }, 511, err => {\n    t.error(err);\n  });\n});","file":"listen.deprecated.test.js","skipped":false,"dir":"test"},{"name":"listen accepts options (no port, no host), backlog and a callback","suites":[],"updatePoint":{"line":83,"column":71,"index":2123},"line":83,"code":"test('listen accepts options (no port, no host), backlog and a callback', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen({\n    ipv6Only: false\n  }, 511, err => {\n    t.error(err);\n  });\n});","file":"listen.deprecated.test.js","skipped":false,"dir":"test"},{"name":"listen accepts a port, address and a callback with (err, address)","suites":[],"updatePoint":{"line":93,"column":71,"index":2375},"line":93,"code":"test('listen accepts a port, address and a callback with (err, address)', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen(0, localhost, (err, address) => {\n    t.equal(address, `http://${localhostForURL}:${fastify.server.address().port}`);\n    t.error(err);\n  });\n});","file":"listen.deprecated.test.js","skipped":false,"dir":"test"},{"name":"listen accepts a port, address, backlog and callback","suites":[],"updatePoint":{"line":102,"column":58,"index":2691},"line":102,"code":"test('listen accepts a port, address, backlog and callback', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen(0, localhost, 511, err => {\n    t.error(err);\n  });\n});","file":"listen.deprecated.test.js","skipped":false,"dir":"test"},{"name":"listen accepts a port, address, backlog and callback with (err, address)","suites":[],"updatePoint":{"line":110,"column":78,"index":2937},"line":110,"code":"test('listen accepts a port, address, backlog and callback with (err, address)', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen(0, localhost, 511, (err, address) => {\n    t.equal(address, `http://${localhostForURL}:${fastify.server.address().port}`);\n    t.error(err);\n  });\n});","file":"listen.deprecated.test.js","skipped":false,"dir":"test"},{"name":"listen without callback (port zero)","suites":[],"updatePoint":{"line":119,"column":41,"index":3241},"line":119,"code":"test('listen without callback (port zero)', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen(0).then(() => {\n    t.equal(fastify.server.address().address, localhost);\n  });\n});","file":"listen.deprecated.test.js","skipped":false,"dir":"test"},{"name":"listen without callback (port not given)","suites":[],"updatePoint":{"line":127,"column":46,"index":3483},"line":127,"code":"test('listen without callback (port not given)', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen().then(() => {\n    t.equal(fastify.server.address().address, localhost);\n  });\n});","file":"listen.deprecated.test.js","skipped":false,"dir":"test"},{"name":"listen null without callback with (address)","suites":[],"updatePoint":{"line":135,"column":49,"index":3727},"line":135,"code":"test('listen null without callback with (address)', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen(null).then(address => {\n    t.equal(address, `http://${localhostForURL}:${fastify.server.address().port}`);\n  });\n});","file":"listen.deprecated.test.js","skipped":false,"dir":"test"},{"name":"listen without port without callback with (address)","suites":[],"updatePoint":{"line":143,"column":57,"index":4014},"line":143,"code":"test('listen without port without callback with (address)', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen().then(address => {\n    t.equal(address, `http://${localhostForURL}:${fastify.server.address().port}`);\n  });\n});","file":"listen.deprecated.test.js","skipped":false,"dir":"test"},{"name":"listen with undefined without callback with (address)","suites":[],"updatePoint":{"line":151,"column":59,"index":4299},"line":151,"code":"test('listen with undefined without callback with (address)', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen(undefined).then(address => {\n    t.equal(address, `http://${localhostForURL}:${fastify.server.address().port}`);\n  });\n});","file":"listen.deprecated.test.js","skipped":false,"dir":"test"},{"name":"listen when firstArg is string(pipe) and without backlog","suites":[],"updatePoint":{"line":159,"column":62,"index":4596},"line":159,"code":"test('listen when firstArg is string(pipe) and without backlog', async t => {\n  t.plan(1);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  const address = await fastify.listen('\\\\\\\\.\\\\pipe\\\\testPipe');\n  t.equal(address, '\\\\\\\\.\\\\pipe\\\\testPipe');\n});","file":"listen.deprecated.test.js","skipped":false,"dir":"test"},{"name":"listen when firstArg is string(pipe) and with backlog","suites":[],"updatePoint":{"line":166,"column":59,"index":4870},"line":166,"code":"test('listen when firstArg is string(pipe) and with backlog', async t => {\n  t.plan(1);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  const address = await fastify.listen('\\\\\\\\.\\\\pipe\\\\testPipe2', 511);\n  t.equal(address, '\\\\\\\\.\\\\pipe\\\\testPipe2');\n});","file":"listen.deprecated.test.js","skipped":false,"dir":"test"},{"name":"listen when firstArg is { path: string(pipe) } and with backlog and callback","suites":[],"updatePoint":{"line":173,"column":82,"index":5174},"line":173,"code":"test('listen when firstArg is { path: string(pipe) } and with backlog and callback', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen({\n    path: '\\\\\\\\.\\\\pipe\\\\testPipe3'\n  }, 511, (err, address) => {\n    t.error(err);\n    t.equal(address, '\\\\\\\\.\\\\pipe\\\\testPipe3');\n  });\n});","file":"listen.deprecated.test.js","skipped":false,"dir":"test"},{"name":"listen accepts a port as string, and callback","suites":[],"updatePoint":{"line":184,"column":51,"index":5480},"line":184,"code":"test('listen accepts a port as string, and callback', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  const port = 3000;\n  fastify.listen(port.toString(), localhost, err => {\n    t.equal(fastify.server.address().port, port);\n    t.error(err);\n  });\n});","file":"listen.deprecated.test.js","skipped":false,"dir":"test"},{"name":"listen accepts a port as string, address and callback","suites":[],"updatePoint":{"line":194,"column":59,"index":5787},"line":194,"code":"test('listen accepts a port as string, address and callback', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  const port = 3000;\n  fastify.listen(port.toString(), localhost, err => {\n    t.equal(fastify.server.address().port, port);\n    t.equal(fastify.server.address().address, localhost);\n    t.error(err);\n  });\n});","file":"listen.deprecated.test.js","skipped":false,"dir":"test"},{"name":"listen with invalid port string without callback with (address)","suites":[],"updatePoint":{"line":205,"column":69,"index":6162},"line":205,"code":"test('listen with invalid port string without callback with (address)', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen('-1').then(address => {\n    t.equal(address, `http://${localhostForURL}:${fastify.server.address().port}`);\n  });\n});","file":"listen.deprecated.test.js","skipped":false,"dir":"test"},{"name":"listen works without arguments","suites":[],"updatePoint":{"line":34,"column":36,"index":596},"line":34,"code":"test('listen works without arguments', async t => {\n  process.on('warning', () => {\n    t.fail('should not be deprecated');\n  });\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  await fastify.listen();\n  const address = fastify.server.address();\n  t.equal(address.address, localhost);\n  t.ok(address.port > 0);\n});","file":"listen.test.js","skipped":false,"dir":"test"},{"name":"Async/await listen with arguments","suites":[],"updatePoint":{"line":45,"column":39,"index":940},"line":45,"code":"test('Async/await listen with arguments', async t => {\n  process.on('warning', () => {\n    t.fail('should not be deprecated');\n  });\n  t.plan(1);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  const addr = await fastify.listen({\n    port: 0,\n    host: '0.0.0.0'\n  });\n  const address = fastify.server.address();\n  t.equal(addr, `http://${address.address}:${address.port}`);\n});","file":"listen.test.js","skipped":false,"dir":"test"},{"name":"Promise listen with arguments","suites":[],"updatePoint":{"line":59,"column":35,"index":1341},"line":59,"code":"test('Promise listen with arguments', t => {\n  process.on('warning', () => {\n    t.fail('should not be deprecated');\n  });\n  t.plan(1);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen({\n    port: 0,\n    host: '0.0.0.0'\n  }).then(addr => {\n    const address = fastify.server.address();\n    t.equal(addr, `http://${address.address}:${address.port}`);\n  });\n});","file":"listen.test.js","skipped":false,"dir":"test"},{"name":"listen accepts a callback","suites":[],"updatePoint":{"line":74,"column":31,"index":1737},"line":74,"code":"test('listen accepts a callback', t => {\n  process.on('warning', () => {\n    t.fail('should not be deprecated');\n  });\n  t.plan(2);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.equal(fastify.server.address().address, localhost);\n    t.error(err);\n  });\n});","file":"listen.test.js","skipped":false,"dir":"test"},{"name":"listen accepts options and a callback","suites":[],"updatePoint":{"line":88,"column":43,"index":2084},"line":88,"code":"test('listen accepts options and a callback', t => {\n  process.on('warning', () => {\n    t.fail('should not be deprecated');\n  });\n  t.plan(1);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen({\n    port: 0,\n    host: 'localhost',\n    backlog: 511,\n    exclusive: false,\n    readableAll: false,\n    writableAll: false,\n    ipv6Only: false\n  }, err => {\n    t.error(err);\n  });\n});","file":"listen.test.js","skipped":false,"dir":"test"},{"name":"listen after Promise.resolve()","suites":[],"updatePoint":{"line":107,"column":36,"index":2498},"line":107,"code":"test('listen after Promise.resolve()', t => {\n  t.plan(2);\n  const f = Fastify();\n  t.teardown(f.close.bind(f));\n  Promise.resolve().then(() => {\n    f.listen({\n      port: 0\n    }, (err, address) => {\n      f.server.unref();\n      t.equal(address, `http://${localhostForURL}:${f.server.address().port}`);\n      t.error(err);\n    });\n  });\n});","file":"listen.test.js","skipped":false,"dir":"test"},{"name":"register after listen using Promise.resolve()","suites":[],"updatePoint":{"line":121,"column":51,"index":2857},"line":121,"code":"test('register after listen using Promise.resolve()', t => {\n  t.plan(1);\n  const f = Fastify();\n\n  const handler = (req, res) => res.send({});\n\n  Promise.resolve().then(() => {\n    f.get('/', handler);\n    f.register((f2, options, done) => {\n      f2.get('/plugin', handler);\n      done();\n    });\n    return f.ready();\n  }).catch(t.error).then(() => t.pass('resolved'));\n});","file":"listen.test.js","skipped":false,"dir":"test"},{"name":"double listen errors","suites":[],"updatePoint":{"line":136,"column":26,"index":3209},"line":136,"code":"test('double listen errors', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    fastify.listen({\n      port: fastify.server.address().port\n    }, (err, address) => {\n      t.equal(address, null);\n      t.ok(err);\n    });\n  });\n});","file":"listen.test.js","skipped":false,"dir":"test"},{"name":"double listen errors callback with (err, address)","suites":[],"updatePoint":{"line":152,"column":55,"index":3577},"line":152,"code":"test('double listen errors callback with (err, address)', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen({\n    port: 0\n  }, (err1, address1) => {\n    t.equal(address1, `http://${localhostForURL}:${fastify.server.address().port}`);\n    t.error(err1);\n    fastify.listen({\n      port: fastify.server.address().port\n    }, (err2, address2) => {\n      t.equal(address2, null);\n      t.ok(err2);\n    });\n  });\n});","file":"listen.test.js","skipped":false,"dir":"test"},{"name":"listen twice on the same port","suites":[],"updatePoint":{"line":169,"column":35,"index":4028},"line":169,"code":"test('listen twice on the same port', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen({\n    port: 0\n  }, (err1, address1) => {\n    t.equal(address1, `http://${localhostForURL}:${fastify.server.address().port}`);\n    t.error(err1);\n    const s2 = Fastify();\n    t.teardown(s2.close.bind(s2));\n    s2.listen({\n      port: fastify.server.address().port\n    }, (err2, address2) => {\n      t.equal(address2, null);\n      t.ok(err2);\n    });\n  });\n});","file":"listen.test.js","skipped":false,"dir":"test"},{"name":"listen twice on the same port callback with (err, address)","suites":[],"updatePoint":{"line":188,"column":64,"index":4564},"line":188,"code":"test('listen twice on the same port callback with (err, address)', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen({\n    port: 0\n  }, (err1, address1) => {\n    const _port = fastify.server.address().port;\n    t.equal(address1, `http://${localhostForURL}:${_port}`);\n    t.error(err1);\n    const s2 = Fastify();\n    t.teardown(s2.close.bind(s2));\n    s2.listen({\n      port: _port\n    }, (err2, address2) => {\n      t.equal(address2, null);\n      t.ok(err2);\n    });\n  });\n}); // https://nodejs.org/api/net.html#net_ipc_support","file":"listen.test.js","skipped":false,"dir":"test"},{"name":"listen on socket","suites":[],"updatePoint":{"line":210,"column":24,"index":5146},"line":210,"code":"  test('listen on socket', t => {\n    t.plan(3);\n    const fastify = Fastify();\n    t.teardown(fastify.close.bind(fastify));\n    const sockFile = path.join(os.tmpdir(), `${(Math.random().toString(16) + '0000000').slice(2, 10)}-server.sock`);\n\n    try {\n      fs.unlinkSync(sockFile);\n    } catch (e) {}\n\n    fastify.listen({\n      path: sockFile\n    }, (err, address) => {\n      t.error(err);\n      t.strictSame(fastify.addresses(), [sockFile]);\n      t.equal(address, sockFile);\n    });\n  });","file":"listen.test.js","skipped":false,"dir":"test"},{"name":"listen on socket","suites":[],"updatePoint":{"line":229,"column":24,"index":5649},"line":229,"code":"  test('listen on socket', t => {\n    t.plan(3);\n    const fastify = Fastify();\n    t.teardown(fastify.close.bind(fastify));\n    const sockFile = `\\\\\\\\.\\\\pipe\\\\${(Math.random().toString(16) + '0000000').slice(2, 10)}-server-sock`;\n    fastify.listen({\n      path: sockFile\n    }, (err, address) => {\n      t.error(err);\n      t.strictSame(fastify.addresses(), [sockFile]);\n      t.equal(address, sockFile);\n    });\n  });","file":"listen.test.js","skipped":false,"dir":"test"},{"name":"listen without callback with (address)","suites":[],"updatePoint":{"line":244,"column":44,"index":6093},"line":244,"code":"test('listen without callback with (address)', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen({\n    port: 0\n  }).then(address => {\n    t.equal(address, `http://${localhostForURL}:${fastify.server.address().port}`);\n  });\n});","file":"listen.test.js","skipped":false,"dir":"test"},{"name":"double listen without callback rejects","suites":[],"updatePoint":{"line":254,"column":44,"index":6380},"line":254,"code":"test('double listen without callback rejects', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen({\n    port: 0\n  }).then(() => {\n    fastify.listen({\n      port: 0\n    }).catch(err => {\n      t.ok(err);\n    });\n  }).catch(err => t.error(err));\n});","file":"listen.test.js","skipped":false,"dir":"test"},{"name":"double listen without callback with (address)","suites":[],"updatePoint":{"line":268,"column":51,"index":6694},"line":268,"code":"test('double listen without callback with (address)', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen({\n    port: 0\n  }).then(address => {\n    t.equal(address, `http://${localhostForURL}:${fastify.server.address().port}`);\n    fastify.listen({\n      port: 0\n    }).catch(err => {\n      t.ok(err);\n    });\n  }).catch(err => t.error(err));\n});","file":"listen.test.js","skipped":false,"dir":"test"},{"name":"listen twice on the same port without callback rejects","suites":[],"updatePoint":{"line":283,"column":60,"index":7106},"line":283,"code":"test('listen twice on the same port without callback rejects', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen({\n    port: 0\n  }).then(() => {\n    const s2 = Fastify();\n    t.teardown(s2.close.bind(s2));\n    s2.listen({\n      port: fastify.server.address().port\n    }).catch(err => {\n      t.ok(err);\n    });\n  }).catch(err => t.error(err));\n});","file":"listen.test.js","skipped":false,"dir":"test"},{"name":"listen twice on the same port without callback rejects with (address)","suites":[],"updatePoint":{"line":299,"column":75,"index":7528},"line":299,"code":"test('listen twice on the same port without callback rejects with (address)', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen({\n    port: 0\n  }).then(address => {\n    const s2 = Fastify();\n    t.teardown(s2.close.bind(s2));\n    t.equal(address, `http://${localhostForURL}:${fastify.server.address().port}`);\n    s2.listen({\n      port: fastify.server.address().port\n    }).catch(err => {\n      t.ok(err);\n    });\n  }).catch(err => t.error(err));\n});","file":"listen.test.js","skipped":false,"dir":"test"},{"name":"listen on invalid port without callback rejects","suites":[],"updatePoint":{"line":316,"column":53,"index":8017},"line":316,"code":"test('listen on invalid port without callback rejects', t => {\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  return fastify.listen({\n    port: -1\n  }).catch(err => {\n    t.ok(err);\n    return true;\n  });\n});","file":"listen.test.js","skipped":false,"dir":"test"},{"name":"listen logs the port as info","suites":[],"updatePoint":{"line":326,"column":34,"index":8234},"line":326,"code":"test('listen logs the port as info', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  const msgs = [];\n\n  fastify.log.info = function (msg) {\n    msgs.push(msg);\n  };\n\n  fastify.listen({\n    port: 0\n  }).then(() => {\n    t.ok(/http:\\/\\//.test(msgs[0]));\n  });\n});","file":"listen.test.js","skipped":false,"dir":"test"},{"name":"listen on localhost binds IPv4 and IPv6 - promise interface","suites":[],"updatePoint":{"line":342,"column":65,"index":8574},"line":342,"code":"test('listen on localhost binds IPv4 and IPv6 - promise interface', async t => {\n  const lookups = await dns.lookup('localhost', {\n    all: true\n  });\n  t.plan(2 * lookups.length);\n  const app = Fastify();\n  app.get('/', async () => 'hello localhost');\n  t.teardown(app.close.bind(app));\n  await app.listen({\n    port: 0,\n    host: 'localhost'\n  });\n\n  for (const lookup of lookups) {\n    await new Promise((resolve, reject) => {\n      sget({\n        method: 'GET',\n        url: getUrl(app, lookup)\n      }, (err, response, body) => {\n        if (err) {\n          return reject(err);\n        }\n\n        t.equal(response.statusCode, 200);\n        t.same(body.toString(), 'hello localhost');\n        resolve();\n      });\n    });\n  }\n});","file":"listen.test.js","skipped":false,"dir":"test"},{"name":"listen on localhost binds to all interfaces (both IPv4 and IPv6 if present) - callback interface","suites":[],"updatePoint":{"line":372,"column":102,"index":9346},"line":372,"code":"test('listen on localhost binds to all interfaces (both IPv4 and IPv6 if present) - callback interface', t => {\n  dnsCb.lookup('localhost', {\n    all: true\n  }, (err, lookups) => {\n    t.plan(2 + 3 * lookups.length);\n    t.error(err);\n    const app = Fastify();\n    app.get('/', async () => 'hello localhost');\n    app.listen({\n      port: 0,\n      host: 'localhost'\n    }, err => {\n      t.error(err);\n      t.teardown(app.close.bind(app));\n\n      for (const lookup of lookups) {\n        sget({\n          method: 'GET',\n          url: getUrl(app, lookup)\n        }, (err, response, body) => {\n          t.error(err);\n          t.equal(response.statusCode, 200);\n          t.same(body.toString(), 'hello localhost');\n        });\n      }\n    });\n  });\n});","file":"listen.test.js","skipped":false,"dir":"test"},{"name":"addresses getter","suites":[],"updatePoint":{"line":400,"column":22,"index":10021},"line":400,"code":"test('addresses getter', async t => {\n  t.plan(4);\n  const app = Fastify();\n  app.get('/', async () => 'hello localhost');\n  t.same(app.addresses(), [], 'before ready');\n  await app.ready();\n  t.same(app.addresses(), [], 'after ready');\n  await app.listen({\n    port: 0,\n    host: 'localhost'\n  });\n  const {\n    port\n  } = app.server.address();\n  const localAddresses = await dns.lookup('localhost', {\n    all: true\n  });\n\n  for (const address of localAddresses) {\n    address.port = port;\n\n    if (typeof address.family === 'number') {\n      address.family = 'IPv' + address.family;\n    }\n  }\n\n  const appAddresses = app.addresses();\n\n  for (const address of appAddresses) {\n    if (typeof address.family === 'number') {\n      address.family = 'IPv' + address.family;\n    }\n  }\n\n  localAddresses.sort((a, b) => a.address.localeCompare(b.address));\n  appAddresses.sort((a, b) => a.address.localeCompare(b.address));\n  t.same(appAddresses, localAddresses, 'after listen');\n  await app.close();\n  t.same(app.addresses(), [], 'after close');\n});","file":"listen.test.js","skipped":false,"dir":"test"},{"name":"can be created - lock","suites":[],"updatePoint":{"line":11,"column":27,"index":170},"line":11,"code":"test('can be created - lock', t => {\n  t.plan(1);\n\n  try {\n    fastify.route({\n      method: 'LOCK',\n      url: '*',\n      handler: function (req, reply) {\n        reply.code(200).send(`<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n            <D:prop xmlns:D=\"DAV:\">\n              <D:lockdiscovery>\n                <D:activelock>\n                  <D:locktype>\n                    <D:write/>\n                  </D:locktype>\n                  <D:lockscope>\n                    <D:exclusive/>\n                  </D:lockscope>\n                  <D:depth>infinity</D:depth>\n                  <D:owner>\n                    <D:href>http://example.org/~ejw/contact.html</D:href>\n                  </D:owner>\n                  <D:timeout>Second-604800</D:timeout>\n                  <D:locktoken>\n                    <D:href>urn:uuid:e71d4fae-5dec-22d6-fea5-00a0c91e6be4</:href>\n                  </D:locktoken>\n                  <D:lockroot>\n                    <D:href>http://example.com/workspace/webdav/proposal.oc</D:href>\n                  </D:lockroot>\n                </D:activelock>\n              </D:lockdiscovery>\n            </D:prop>`);\n      }\n    });\n    t.pass();\n  } catch (e) {\n    t.fail();\n  }\n});","file":"lock.test.js","skipped":false,"dir":"test"},{"name":"request - lock","suites":[],"updatePoint":{"line":57,"column":22,"index":1472},"line":57,"code":"  test('request - lock', t => {\n    t.plan(3);\n    sget({\n      url: `http://localhost:${fastify.server.address().port}/test/a.txt`,\n      body: `<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n        <D:lockinfo xmlns:D='DAV:'>\n          <D:lockscope> <D:exclusive/> </D:lockscope>\n          <D:locktype> <D:write/> </D:locktype>\n          <D:owner>\n            <D:href>http://example.org/~ejw/contact.html</D:href>\n          </D:owner>\n        </D:lockinfo> `,\n      method: 'LOCK'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n    });\n  });","file":"lock.test.js","skipped":false,"dir":"test"},{"name":"defaults to info level","suites":[],"updatePoint":{"line":54,"column":28,"index":928},"line":54,"code":"test('defaults to info level', t => {\n  let fastify = null;\n  const stream = split(JSON.parse);\n\n  try {\n    fastify = Fastify({\n      logger: {\n        stream\n      }\n    });\n  } catch (e) {\n    t.fail();\n  }\n\n  fastify.get('/', function (req, reply) {\n    t.ok(req.log);\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    dns.lookup('localhost', {\n      all: true\n    }, function (err, addresses) {\n      t.error(err);\n      let toSkip = addresses.length;\n\n      function skip(data) {\n        if (--toSkip === 0) {\n          stream.removeListener('data', skip);\n          check();\n        }\n      }\n\n      stream.on('data', skip);\n      http.get(`http://${localhostForURL}:` + fastify.server.address().port);\n    });\n  });\n\n  function check() {\n    stream.once('data', line => {\n      const id = line.reqId;\n      t.ok(line.reqId, 'reqId is defined');\n      t.ok(line.req, 'req is defined');\n      t.equal(line.msg, 'incoming request', 'message is set');\n      t.equal(line.req.method, 'GET', 'method is get');\n      stream.once('data', line => {\n        t.equal(line.reqId, id);\n        t.ok(line.reqId, 'reqId is defined');\n        t.ok(line.res, 'res is defined');\n        t.equal(line.msg, 'request completed', 'message is set');\n        t.equal(line.res.statusCode, 200, 'statusCode is 200');\n        t.ok(line.responseTime, 'responseTime is defined');\n        t.end();\n      });\n    });\n  }\n});","file":"logger.test.js","skipped":false,"dir":"test"},{"name":"test log stream","suites":[],"updatePoint":{"line":118,"column":21,"index":2446},"line":118,"code":"test('test log stream', t => {\n  t.plan(12);\n  let fastify = null;\n  const stream = split(JSON.parse);\n\n  try {\n    fastify = Fastify({\n      logger: {\n        stream,\n        level: 'info'\n      }\n    });\n  } catch (e) {\n    t.fail();\n  }\n\n  fastify.get('/', function (req, reply) {\n    t.ok(req.log);\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.listen({\n    port: 0,\n    host: localhost\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    http.get(`http://${localhostForURL}:` + fastify.server.address().port);\n    stream.once('data', listenAtLogLine => {\n      t.ok(listenAtLogLine, 'listen at log message is ok');\n      stream.once('data', line => {\n        const id = line.reqId;\n        t.ok(line.reqId, 'reqId is defined');\n        t.ok(line.req, 'req is defined');\n        t.equal(line.msg, 'incoming request', 'message is set');\n        t.equal(line.req.method, 'GET', 'method is get');\n        stream.once('data', line => {\n          t.equal(line.reqId, id);\n          t.ok(line.reqId, 'reqId is defined');\n          t.ok(line.res, 'res is defined');\n          t.equal(line.msg, 'request completed', 'message is set');\n          t.equal(line.res.statusCode, 200, 'statusCode is 200');\n        });\n      });\n    });\n  });\n});","file":"logger.test.js","skipped":false,"dir":"test"},{"name":"test error log stream","suites":[],"updatePoint":{"line":168,"column":27,"index":3743},"line":168,"code":"test('test error log stream', t => {\n  t.plan(11);\n  let fastify = null;\n  const stream = split(JSON.parse);\n\n  try {\n    fastify = Fastify({\n      logger: {\n        stream,\n        level: 'info'\n      }\n    });\n  } catch (e) {\n    t.fail();\n  }\n\n  fastify.get('/error', function (req, reply) {\n    t.ok(req.log);\n    reply.send(new Error('kaboom'));\n  });\n  fastify.listen({\n    port: 0,\n    host: localhost\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    http.get(`http://${localhostForURL}:` + fastify.server.address().port + '/error');\n    stream.once('data', listenAtLogLine => {\n      t.ok(listenAtLogLine, 'listen at log message is ok');\n      stream.once('data', line => {\n        t.ok(line.reqId, 'reqId is defined');\n        t.ok(line.req, 'req is defined');\n        t.equal(line.msg, 'incoming request', 'message is set');\n        t.equal(line.req.method, 'GET', 'method is get');\n        stream.once('data', line => {\n          t.ok(line.reqId, 'reqId is defined');\n          t.ok(line.res, 'res is defined');\n          t.equal(line.msg, 'kaboom', 'message is set');\n          t.equal(line.res.statusCode, 500, 'statusCode is 500');\n        });\n      });\n    });\n  });\n});","file":"logger.test.js","skipped":false,"dir":"test"},{"name":"can use external logger instance","suites":[],"updatePoint":{"line":214,"column":38,"index":4981},"line":214,"code":"test('can use external logger instance', t => {\n  const lines = [/^Server listening at /, /^incoming request$/, /^log success$/, /^request completed$/];\n  t.plan(lines.length + 2);\n  const splitStream = split(JSON.parse);\n  splitStream.on('data', line => {\n    const regex = lines.shift();\n    t.ok(regex.test(line.msg), '\"' + line.msg + '\" dont match \"' + regex + '\"');\n  });\n\n  const logger = require('pino')(splitStream);\n\n  const localFastify = Fastify({\n    logger\n  });\n  localFastify.get('/foo', function (req, reply) {\n    t.ok(req.log);\n    req.log.info('log success');\n    reply.send({\n      hello: 'world'\n    });\n  });\n  localFastify.listen({\n    port: 0,\n    host: localhost\n  }, err => {\n    t.error(err);\n    http.get(`http://${localhostForURL}:` + localFastify.server.address().port + '/foo', res => {\n      res.resume();\n      res.on('end', () => {\n        localFastify.server.close();\n      });\n    });\n  });\n});","file":"logger.test.js","skipped":false,"dir":"test"},{"name":"can use external logger instance with custom serializer","suites":[],"updatePoint":{"line":248,"column":61,"index":5935},"line":248,"code":"test('can use external logger instance with custom serializer', t => {\n  const lines = [['level', 30], ['req', {\n    url: '/foo'\n  }], ['level', 30], ['res', {\n    statusCode: 200\n  }]];\n  t.plan(lines.length + 2);\n  const splitStream = split(JSON.parse);\n  splitStream.on('data', line => {\n    const check = lines.shift();\n    const key = check[0];\n    const value = check[1];\n    t.same(line[key], value);\n  });\n\n  const logger = require('pino')({\n    level: 'info',\n    serializers: {\n      req: function (req) {\n        return {\n          url: req.url\n        };\n      }\n    }\n  }, splitStream);\n\n  const localFastify = Fastify({\n    logger\n  });\n  localFastify.get('/foo', function (req, reply) {\n    t.ok(req.log);\n    req.log.info('log success');\n    reply.send({\n      hello: 'world'\n    });\n  });\n  localFastify.listen({\n    port: 0,\n    host: localhost\n  }, err => {\n    t.error(err);\n    http.get(`http://${localhostForURL}:` + localFastify.server.address().port + '/foo', res => {\n      res.resume();\n      res.on('end', () => {\n        localFastify.server.close();\n      });\n    });\n  });\n});","file":"logger.test.js","skipped":false,"dir":"test"},{"name":"expose the logger","suites":[],"updatePoint":{"line":297,"column":23,"index":7003},"line":297,"code":"test('expose the logger', t => {\n  t.plan(2);\n  let fastify = null;\n  const stream = split(JSON.parse);\n\n  try {\n    fastify = Fastify({\n      logger: {\n        stream,\n        level: 'info'\n      }\n    });\n  } catch (e) {\n    t.fail();\n  }\n\n  t.ok(fastify.log);\n  t.same(typeof fastify.log, 'object');\n});","file":"logger.test.js","skipped":false,"dir":"test"},{"name":"The request id header key can be customized","suites":[],"updatePoint":{"line":316,"column":49,"index":7336},"line":316,"code":"test('The request id header key can be customized', t => {\n  t.plan(9);\n  const REQUEST_ID = '42';\n  const stream = split(JSON.parse);\n  const fastify = Fastify({\n    logger: {\n      stream,\n      level: 'info'\n    },\n    requestIdHeader: 'my-custom-request-id'\n  });\n  t.teardown(() => fastify.close());\n  fastify.get('/', (req, reply) => {\n    t.equal(req.id, REQUEST_ID);\n    req.log.info('some log message');\n    reply.send({\n      id: req.id\n    });\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/',\n    headers: {\n      'my-custom-request-id': REQUEST_ID\n    }\n  }, (err, res) => {\n    t.error(err);\n    const payload = JSON.parse(res.payload);\n    t.equal(payload.id, REQUEST_ID);\n    stream.once('data', line => {\n      t.equal(line.reqId, REQUEST_ID);\n      t.equal(line.msg, 'incoming request', 'message is set');\n      stream.once('data', line => {\n        t.equal(line.reqId, REQUEST_ID);\n        t.equal(line.msg, 'some log message', 'message is set');\n        stream.once('data', line => {\n          t.equal(line.reqId, REQUEST_ID);\n          t.equal(line.msg, 'request completed', 'message is set');\n        });\n      });\n    });\n  });\n});","file":"logger.test.js","skipped":false,"dir":"test"},{"name":"The request id header key can be ignored","suites":[],"updatePoint":{"line":359,"column":46,"index":8496},"line":359,"code":"test('The request id header key can be ignored', t => {\n  t.plan(9);\n  const REQUEST_ID = 'ignore-me';\n  const stream = split(JSON.parse);\n  const fastify = Fastify({\n    logger: {\n      stream,\n      level: 'info'\n    },\n    requestIdHeader: false\n  });\n  t.teardown(() => fastify.close());\n  fastify.get('/', (req, reply) => {\n    t.equal(req.id, 'req-1');\n    req.log.info('some log message');\n    reply.send({\n      id: req.id\n    });\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/',\n    headers: {\n      'request-id': REQUEST_ID\n    }\n  }, (err, res) => {\n    t.error(err);\n    const payload = JSON.parse(res.payload);\n    t.equal(payload.id, 'req-1');\n    stream.once('data', line => {\n      t.equal(line.reqId, 'req-1');\n      t.equal(line.msg, 'incoming request', 'message is set');\n      stream.once('data', line => {\n        t.equal(line.reqId, 'req-1');\n        t.equal(line.msg, 'some log message', 'message is set');\n        stream.once('data', line => {\n          t.equal(line.reqId, 'req-1');\n          t.equal(line.msg, 'request completed', 'message is set');\n        });\n      });\n    });\n  });\n});","file":"logger.test.js","skipped":false,"dir":"test"},{"name":"The request id header key can be customized along with a custom id generator","suites":[],"updatePoint":{"line":402,"column":82,"index":9657},"line":402,"code":"test('The request id header key can be customized along with a custom id generator', t => {\n  t.plan(12);\n  const REQUEST_ID = '42';\n  const stream = split(JSON.parse);\n  const fastify = Fastify({\n    logger: {\n      stream,\n      level: 'info'\n    },\n    requestIdHeader: 'my-custom-request-id',\n\n    genReqId(req) {\n      return 'foo';\n    }\n\n  });\n  t.teardown(() => fastify.close());\n  fastify.get('/one', (req, reply) => {\n    t.equal(req.id, REQUEST_ID);\n    req.log.info('some log message');\n    reply.send({\n      id: req.id\n    });\n  });\n  fastify.get('/two', (req, reply) => {\n    t.equal(req.id, 'foo');\n    req.log.info('some log message 2');\n    reply.send({\n      id: req.id\n    });\n  });\n  const matches = [{\n    reqId: REQUEST_ID,\n    msg: /incoming request/\n  }, {\n    reqId: REQUEST_ID,\n    msg: /some log message/\n  }, {\n    reqId: REQUEST_ID,\n    msg: /request completed/\n  }, {\n    reqId: 'foo',\n    msg: /incoming request/\n  }, {\n    reqId: 'foo',\n    msg: /some log message 2/\n  }, {\n    reqId: 'foo',\n    msg: /request completed/\n  }];\n  let i = 0;\n  stream.on('data', line => {\n    t.match(line, matches[i]);\n    i += 1;\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/one',\n    headers: {\n      'my-custom-request-id': REQUEST_ID\n    }\n  }, (err, res) => {\n    t.error(err);\n    const payload = JSON.parse(res.payload);\n    t.equal(payload.id, REQUEST_ID);\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/two'\n  }, (err, res) => {\n    t.error(err);\n    const payload = JSON.parse(res.payload);\n    t.equal(payload.id, 'foo');\n  });\n});","file":"logger.test.js","skipped":false,"dir":"test"},{"name":"The request id header key can be ignored along with a custom id generator","suites":[],"updatePoint":{"line":477,"column":79,"index":11230},"line":477,"code":"test('The request id header key can be ignored along with a custom id generator', t => {\n  t.plan(12);\n  const REQUEST_ID = 'ignore-me';\n  const stream = split(JSON.parse);\n  const fastify = Fastify({\n    logger: {\n      stream,\n      level: 'info'\n    },\n    requestIdHeader: false,\n\n    genReqId(req) {\n      return 'foo';\n    }\n\n  });\n  t.teardown(() => fastify.close());\n  fastify.get('/one', (req, reply) => {\n    t.equal(req.id, 'foo');\n    req.log.info('some log message');\n    reply.send({\n      id: req.id\n    });\n  });\n  fastify.get('/two', (req, reply) => {\n    t.equal(req.id, 'foo');\n    req.log.info('some log message 2');\n    reply.send({\n      id: req.id\n    });\n  });\n  const matches = [{\n    reqId: 'foo',\n    msg: /incoming request/\n  }, {\n    reqId: 'foo',\n    msg: /some log message/\n  }, {\n    reqId: 'foo',\n    msg: /request completed/\n  }, {\n    reqId: 'foo',\n    msg: /incoming request/\n  }, {\n    reqId: 'foo',\n    msg: /some log message 2/\n  }, {\n    reqId: 'foo',\n    msg: /request completed/\n  }];\n  let i = 0;\n  stream.on('data', line => {\n    t.match(line, matches[i]);\n    i += 1;\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/one',\n    headers: {\n      'request-id': REQUEST_ID\n    }\n  }, (err, res) => {\n    t.error(err);\n    const payload = JSON.parse(res.payload);\n    t.equal(payload.id, 'foo');\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/two'\n  }, (err, res) => {\n    t.error(err);\n    const payload = JSON.parse(res.payload);\n    t.equal(payload.id, 'foo');\n  });\n});","file":"logger.test.js","skipped":false,"dir":"test"},{"name":"The request id log label can be changed","suites":[],"updatePoint":{"line":552,"column":45,"index":12724},"line":552,"code":"test('The request id log label can be changed', t => {\n  t.plan(6);\n  const REQUEST_ID = '42';\n  const stream = split(JSON.parse);\n  const fastify = Fastify({\n    logger: {\n      stream,\n      level: 'info'\n    },\n    requestIdHeader: 'my-custom-request-id',\n    requestIdLogLabel: 'traceId'\n  });\n  t.teardown(() => fastify.close());\n  fastify.get('/one', (req, reply) => {\n    t.equal(req.id, REQUEST_ID);\n    req.log.info('some log message');\n    reply.send({\n      id: req.id\n    });\n  });\n  const matches = [{\n    traceId: REQUEST_ID,\n    msg: /incoming request/\n  }, {\n    traceId: REQUEST_ID,\n    msg: /some log message/\n  }, {\n    traceId: REQUEST_ID,\n    msg: /request completed/\n  }];\n  let i = 0;\n  stream.on('data', line => {\n    t.match(line, matches[i]);\n    i += 1;\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/one',\n    headers: {\n      'my-custom-request-id': REQUEST_ID\n    }\n  }, (err, res) => {\n    t.error(err);\n    const payload = JSON.parse(res.payload);\n    t.equal(payload.id, REQUEST_ID);\n  });\n});","file":"logger.test.js","skipped":false,"dir":"test"},{"name":"The logger should accept custom serializer","suites":[],"updatePoint":{"line":599,"column":48,"index":13762},"line":599,"code":"test('The logger should accept custom serializer', t => {\n  t.plan(9);\n  const stream = split(JSON.parse);\n  const fastify = Fastify({\n    logger: {\n      stream,\n      level: 'info',\n      serializers: {\n        req: function (req) {\n          return {\n            url: req.url\n          };\n        }\n      }\n    }\n  });\n  fastify.get('/custom', function (req, reply) {\n    t.ok(req.log);\n    reply.send(new Error('kaboom'));\n  });\n  fastify.listen({\n    port: 0,\n    host: localhost\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    http.get(`http://${localhostForURL}:` + fastify.server.address().port + '/custom');\n    stream.once('data', listenAtLogLine => {\n      t.ok(listenAtLogLine, 'listen at log message is ok');\n      stream.once('data', line => {\n        t.ok(line.req, 'req is defined');\n        t.equal(line.msg, 'incoming request', 'message is set');\n        t.same(line.req, {\n          url: '/custom'\n        }, 'custom req serializer is use');\n        stream.once('data', line => {\n          t.ok(line.res, 'res is defined');\n          t.equal(line.msg, 'kaboom', 'message is set');\n          t.same(line.res, {\n            statusCode: 500\n          }, 'default res serializer is use');\n        });\n      });\n    });\n  });\n});","file":"logger.test.js","skipped":false,"dir":"test"},{"name":"reply.send logs an error if called twice in a row","suites":[],"updatePoint":{"line":647,"column":55,"index":15055},"line":647,"code":"test('reply.send logs an error if called twice in a row', t => {\n  const lines = ['incoming request', 'request completed', 'Reply already sent', 'Reply already sent'];\n  t.plan(lines.length + 2);\n  const splitStream = split(JSON.parse);\n  splitStream.on('data', line => {\n    t.same(line.msg, lines.shift());\n  });\n  const logger = pino(splitStream);\n  const fastify = Fastify({\n    logger\n  });\n  fastify.get('/', (req, reply) => {\n    reply.send({\n      hello: 'world'\n    });\n    reply.send({\n      hello: 'world2'\n    });\n    reply.send({\n      hello: 'world3'\n    });\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    const payload = JSON.parse(res.payload);\n    t.same(payload, {\n      hello: 'world'\n    });\n  });\n});","file":"logger.test.js","skipped":false,"dir":"test"},{"name":"logger can be silented","suites":[],"updatePoint":{"line":680,"column":28,"index":15803},"line":680,"code":"test('logger can be silented', t => {\n  t.plan(17);\n  const fastify = Fastify({\n    logger: false\n  });\n  t.ok(fastify.log);\n  t.same(typeof fastify.log, 'object');\n  t.same(typeof fastify.log.fatal, 'function');\n  t.same(typeof fastify.log.error, 'function');\n  t.same(typeof fastify.log.warn, 'function');\n  t.same(typeof fastify.log.info, 'function');\n  t.same(typeof fastify.log.debug, 'function');\n  t.same(typeof fastify.log.trace, 'function');\n  t.same(typeof fastify.log.child, 'function');\n  const childLog = fastify.log.child();\n  t.same(typeof childLog, 'object');\n  t.same(typeof childLog.fatal, 'function');\n  t.same(typeof childLog.error, 'function');\n  t.same(typeof childLog.warn, 'function');\n  t.same(typeof childLog.info, 'function');\n  t.same(typeof childLog.debug, 'function');\n  t.same(typeof childLog.trace, 'function');\n  t.same(typeof childLog.child, 'function');\n});","file":"logger.test.js","skipped":false,"dir":"test"},{"name":"Should set a custom logLevel for a plugin","suites":[],"updatePoint":{"line":704,"column":47,"index":16715},"line":704,"code":"test('Should set a custom logLevel for a plugin', t => {\n  const lines = ['incoming request', 'Hello', 'request completed'];\n  t.plan(7);\n  const splitStream = split(JSON.parse);\n  splitStream.on('data', line => {\n    t.same(line.msg, lines.shift());\n  });\n  const logger = pino({\n    level: 'error'\n  }, splitStream);\n  const fastify = Fastify({\n    logger\n  });\n  fastify.get('/', (req, reply) => {\n    req.log.info('Hello'); // we should not see this log\n\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.register(function (instance, opts, done) {\n    instance.get('/plugin', (req, reply) => {\n      req.log.info('Hello'); // we should see this log\n\n      reply.send({\n        hello: 'world'\n      });\n    });\n    done();\n  }, {\n    logLevel: 'info'\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    const payload = JSON.parse(res.payload);\n    t.same(payload, {\n      hello: 'world'\n    });\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/plugin'\n  }, (err, res) => {\n    t.error(err);\n    const payload = JSON.parse(res.payload);\n    t.same(payload, {\n      hello: 'world'\n    });\n  });\n});","file":"logger.test.js","skipped":false,"dir":"test"},{"name":"Should set a custom logSerializers for a plugin","suites":[],"updatePoint":{"line":757,"column":53,"index":17887},"line":757,"code":"test('Should set a custom logSerializers for a plugin', t => {\n  t.plan(3);\n  const splitStream = split(JSON.parse);\n  splitStream.on('data', line => {\n    if (line.test) {\n      t.same(line.test, 'XHello');\n    }\n  });\n  const logger = pino({\n    level: 'error'\n  }, splitStream);\n  const fastify = Fastify({\n    logger\n  });\n  fastify.register(function (instance, opts, done) {\n    instance.get('/plugin', (req, reply) => {\n      req.log.info({\n        test: 'Hello'\n      }); // we should see this log\n\n      reply.send({\n        hello: 'world'\n      });\n    });\n    done();\n  }, {\n    logLevel: 'info',\n    logSerializers: {\n      test: value => 'X' + value\n    }\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/plugin'\n  }, (err, res) => {\n    t.error(err);\n    const payload = JSON.parse(res.payload);\n    t.same(payload, {\n      hello: 'world'\n    });\n  });\n});","file":"logger.test.js","skipped":false,"dir":"test"},{"name":"Should set a custom logLevel for every plugin","suites":[],"updatePoint":{"line":799,"column":51,"index":18761},"line":799,"code":"test('Should set a custom logLevel for every plugin', t => {\n  const lines = ['incoming request', 'request completed', 'info', 'debug'];\n  t.plan(18);\n  const splitStream = split(JSON.parse);\n  splitStream.on('data', line => {\n    t.ok(line.level === 30 || line.level === 20);\n    t.ok(lines.indexOf(line.msg) > -1);\n  });\n  const logger = pino({\n    level: 'error'\n  }, splitStream);\n  const fastify = Fastify({\n    logger\n  });\n  fastify.get('/', (req, reply) => {\n    req.log.warn('Hello'); // we should not see this log\n\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.register(function (instance, opts, done) {\n    instance.get('/info', (req, reply) => {\n      req.log.info('info'); // we should see this log\n\n      req.log.debug('hidden log');\n      reply.send({\n        hello: 'world'\n      });\n    });\n    done();\n  }, {\n    logLevel: 'info'\n  });\n  fastify.register(function (instance, opts, done) {\n    instance.get('/debug', (req, reply) => {\n      req.log.debug('debug'); // we should see this log\n\n      req.log.trace('hidden log');\n      reply.send({\n        hello: 'world'\n      });\n    });\n    done();\n  }, {\n    logLevel: 'debug'\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    const payload = JSON.parse(res.payload);\n    t.same(payload, {\n      hello: 'world'\n    });\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/info'\n  }, (err, res) => {\n    t.error(err);\n    const payload = JSON.parse(res.payload);\n    t.same(payload, {\n      hello: 'world'\n    });\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/debug'\n  }, (err, res) => {\n    t.error(err);\n    const payload = JSON.parse(res.payload);\n    t.same(payload, {\n      hello: 'world'\n    });\n  });\n});","file":"logger.test.js","skipped":false,"dir":"test"},{"name":"Should set a custom logSerializers for every plugin","suites":[],"updatePoint":{"line":877,"column":57,"index":20523},"line":877,"code":"test('Should set a custom logSerializers for every plugin', async t => {\n  const lines = ['Hello', 'XHello', 'ZHello'];\n  t.plan(6);\n  const splitStream = split(JSON.parse);\n  splitStream.on('data', line => {\n    if (line.test) {\n      t.same(line.test, lines.shift());\n    }\n  });\n  const logger = pino({\n    level: 'info'\n  }, splitStream);\n  const fastify = Fastify({\n    logger\n  });\n  fastify.get('/', (req, reply) => {\n    req.log.warn({\n      test: 'Hello'\n    });\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.register(function (instance, opts, done) {\n    instance.get('/test1', (req, reply) => {\n      req.log.info({\n        test: 'Hello'\n      });\n      reply.send({\n        hello: 'world'\n      });\n    });\n    done();\n  }, {\n    logSerializers: {\n      test: value => 'X' + value\n    }\n  });\n  fastify.register(function (instance, opts, done) {\n    instance.get('/test2', (req, reply) => {\n      req.log.info({\n        test: 'Hello'\n      });\n      reply.send({\n        hello: 'world'\n      });\n    });\n    done();\n  }, {\n    logSerializers: {\n      test: value => 'Z' + value\n    }\n  });\n  let res = await fastify.inject({\n    method: 'GET',\n    url: '/'\n  });\n  t.same(res.json(), {\n    hello: 'world'\n  });\n  res = await fastify.inject({\n    method: 'GET',\n    url: '/test1'\n  });\n  t.same(res.json(), {\n    hello: 'world'\n  });\n  res = await fastify.inject({\n    method: 'GET',\n    url: '/test2'\n  });\n  t.same(res.json(), {\n    hello: 'world'\n  });\n});","file":"logger.test.js","skipped":false,"dir":"test"},{"name":"Should override serializers from route","suites":[],"updatePoint":{"line":952,"column":44,"index":21997},"line":952,"code":"test('Should override serializers from route', t => {\n  t.plan(3);\n  const splitStream = split(JSON.parse);\n  splitStream.on('data', line => {\n    if (line.test) {\n      t.same(line.test, 'ZHello');\n    }\n  });\n  const logger = pino({\n    level: 'info'\n  }, splitStream);\n  const fastify = Fastify({\n    logger\n  });\n  fastify.register(function (instance, opts, done) {\n    instance.get('/', {\n      logSerializers: {\n        test: value => 'Z' + value // should override\n\n      }\n    }, (req, reply) => {\n      req.log.info({\n        test: 'Hello'\n      });\n      reply.send({\n        hello: 'world'\n      });\n    });\n    done();\n  }, {\n    logSerializers: {\n      test: value => 'X' + value\n    }\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    const payload = JSON.parse(res.payload);\n    t.same(payload, {\n      hello: 'world'\n    });\n  });\n});","file":"logger.test.js","skipped":false,"dir":"test"},{"name":"Should override serializers from plugin","suites":[],"updatePoint":{"line":997,"column":45,"index":22899},"line":997,"code":"test('Should override serializers from plugin', t => {\n  t.plan(3);\n  const splitStream = split(JSON.parse);\n  splitStream.on('data', line => {\n    if (line.test) {\n      t.same(line.test, 'ZHello');\n    }\n  });\n  const logger = pino({\n    level: 'info'\n  }, splitStream);\n  const fastify = Fastify({\n    logger\n  });\n  fastify.register(function (instance, opts, done) {\n    instance.register(context1, {\n      logSerializers: {\n        test: value => 'Z' + value // should override\n\n      }\n    });\n    done();\n  }, {\n    logSerializers: {\n      test: value => 'X' + value\n    }\n  });\n\n  function context1(instance, opts, done) {\n    instance.get('/', (req, reply) => {\n      req.log.info({\n        test: 'Hello'\n      });\n      reply.send({\n        hello: 'world'\n      });\n    });\n    done();\n  }\n\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    const payload = JSON.parse(res.payload);\n    t.same(payload, {\n      hello: 'world'\n    });\n  });\n});","file":"logger.test.js","skipped":false,"dir":"test"},{"name":"Should use serializers from plugin and route","suites":[],"updatePoint":{"line":1048,"column":50,"index":23901},"line":1048,"code":"test('Should use serializers from plugin and route', t => {\n  t.plan(4);\n  const splitStream = split(JSON.parse);\n  splitStream.on('data', line => {\n    if (line.test) {\n      t.same(line.test, 'XHello');\n    }\n\n    if (line.test2) {\n      t.same(line.test2, 'ZHello');\n    }\n  });\n  const logger = pino({\n    level: 'info'\n  }, splitStream);\n  const fastify = Fastify({\n    logger\n  });\n  fastify.register(context1, {\n    logSerializers: {\n      test: value => 'X' + value\n    }\n  });\n\n  function context1(instance, opts, done) {\n    instance.get('/', {\n      logSerializers: {\n        test2: value => 'Z' + value\n      }\n    }, (req, reply) => {\n      req.log.info({\n        test: 'Hello',\n        test2: 'Hello'\n      }); // { test: 'XHello', test2: 'ZHello' }\n\n      reply.send({\n        hello: 'world'\n      });\n    });\n    done();\n  }\n\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    const payload = JSON.parse(res.payload);\n    t.same(payload, {\n      hello: 'world'\n    });\n  });\n});","file":"logger.test.js","skipped":false,"dir":"test"},{"name":"Should use serializers from instance fastify and route","suites":[],"updatePoint":{"line":1101,"column":60,"index":24949},"line":1101,"code":"test('Should use serializers from instance fastify and route', t => {\n  t.plan(4);\n  const splitStream = split(JSON.parse);\n  splitStream.on('data', line => {\n    if (line.test) {\n      t.same(line.test, 'XHello');\n    }\n\n    if (line.test2) {\n      t.same(line.test2, 'ZHello');\n    }\n  });\n  const logger = pino({\n    level: 'info',\n    serializers: {\n      test: value => 'X' + value,\n      test2: value => 'This should be override - ' + value\n    }\n  }, splitStream);\n  const fastify = Fastify({\n    logger\n  });\n  fastify.get('/', {\n    logSerializers: {\n      test2: value => 'Z' + value\n    }\n  }, (req, reply) => {\n    req.log.info({\n      test: 'Hello',\n      test2: 'Hello'\n    }); // { test: 'XHello', test2: 'ZHello' }\n\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    const payload = JSON.parse(res.payload);\n    t.same(payload, {\n      hello: 'world'\n    });\n  });\n});","file":"logger.test.js","skipped":false,"dir":"test"},{"name":"Should use serializers inherit from contexts","suites":[],"updatePoint":{"line":1148,"column":50,"index":25919},"line":1148,"code":"test('Should use serializers inherit from contexts', t => {\n  t.plan(5);\n  const splitStream = split(JSON.parse);\n  splitStream.on('data', line => {\n    if (line.test && line.test2 && line.test3) {\n      t.same(line.test, 'XHello');\n      t.same(line.test2, 'YHello');\n      t.same(line.test3, 'ZHello');\n    }\n  });\n  const logger = pino({\n    level: 'info',\n    serializers: {\n      test: value => 'X' + value\n    }\n  }, splitStream);\n  const fastify = Fastify({\n    logger\n  });\n  fastify.register(context1, {\n    logSerializers: {\n      test2: value => 'Y' + value\n    }\n  });\n\n  function context1(instance, opts, done) {\n    instance.get('/', {\n      logSerializers: {\n        test3: value => 'Z' + value\n      }\n    }, (req, reply) => {\n      req.log.info({\n        test: 'Hello',\n        test2: 'Hello',\n        test3: 'Hello'\n      }); // { test: 'XHello', test2: 'YHello', test3: 'ZHello' }\n\n      reply.send({\n        hello: 'world'\n      });\n    });\n    done();\n  }\n\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    const payload = JSON.parse(res.payload);\n    t.same(payload, {\n      hello: 'world'\n    });\n  });\n});","file":"logger.test.js","skipped":false,"dir":"test"},{"name":"Should increase the log level for a specific plugin","suites":[],"updatePoint":{"line":1203,"column":57,"index":27100},"line":1203,"code":"test('Should increase the log level for a specific plugin', t => {\n  t.plan(4);\n  const splitStream = split(JSON.parse);\n  splitStream.on('data', line => {\n    t.same(line.msg, 'Hello');\n    t.ok(line.level === 50);\n  });\n  const logger = pino({\n    level: 'info'\n  }, splitStream);\n  const fastify = Fastify({\n    logger\n  });\n  fastify.register(function (instance, opts, done) {\n    instance.get('/', (req, reply) => {\n      req.log.error('Hello'); // we should see this log\n\n      reply.send({\n        hello: 'world'\n      });\n    });\n    done();\n  }, {\n    logLevel: 'error'\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    const payload = JSON.parse(res.payload);\n    t.same(payload, {\n      hello: 'world'\n    });\n  });\n});","file":"logger.test.js","skipped":false,"dir":"test"},{"name":"Should set the log level for the customized 404 handler","suites":[],"updatePoint":{"line":1239,"column":61,"index":27885},"line":1239,"code":"test('Should set the log level for the customized 404 handler', t => {\n  t.plan(4);\n  const splitStream = split(JSON.parse);\n  splitStream.on('data', line => {\n    t.same(line.msg, 'Hello');\n    t.ok(line.level === 50);\n  });\n  const logger = pino({\n    level: 'warn'\n  }, splitStream);\n  const fastify = Fastify({\n    logger\n  });\n  fastify.register(function (instance, opts, done) {\n    instance.setNotFoundHandler(function (req, reply) {\n      req.log.error('Hello');\n      reply.code(404).send();\n    });\n    done();\n  }, {\n    logLevel: 'error'\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 404);\n  });\n});","file":"logger.test.js","skipped":false,"dir":"test"},{"name":"Should set the log level for the customized 500 handler","suites":[],"updatePoint":{"line":1269,"column":61,"index":28575},"line":1269,"code":"test('Should set the log level for the customized 500 handler', t => {\n  t.plan(4);\n  const splitStream = split(JSON.parse);\n  splitStream.on('data', line => {\n    t.same(line.msg, 'Hello');\n    t.ok(line.level === 60);\n  });\n  const logger = pino({\n    level: 'warn'\n  }, splitStream);\n  const fastify = Fastify({\n    logger\n  });\n  fastify.register(function (instance, opts, done) {\n    instance.get('/', (req, reply) => {\n      req.log.error('kaboom');\n      reply.send(new Error('kaboom'));\n    });\n    instance.setErrorHandler(function (e, request, reply) {\n      reply.log.fatal('Hello');\n      reply.code(500).send();\n    });\n    done();\n  }, {\n    logLevel: 'fatal'\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 500);\n  });\n});","file":"logger.test.js","skipped":false,"dir":"test"},{"name":"Should set a custom log level for a specific route","suites":[],"updatePoint":{"line":1303,"column":56,"index":29384},"line":1303,"code":"test('Should set a custom log level for a specific route', t => {\n  const lines = ['incoming request', 'Hello', 'request completed'];\n  t.plan(7);\n  const splitStream = split(JSON.parse);\n  splitStream.on('data', line => {\n    t.same(line.msg, lines.shift());\n  });\n  const logger = pino({\n    level: 'error'\n  }, splitStream);\n  const fastify = Fastify({\n    logger\n  });\n  fastify.get('/log', {\n    logLevel: 'info'\n  }, (req, reply) => {\n    req.log.info('Hello');\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.get('/no-log', (req, reply) => {\n    req.log.info('Hello');\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/log'\n  }, (err, res) => {\n    t.error(err);\n    const payload = JSON.parse(res.payload);\n    t.same(payload, {\n      hello: 'world'\n    });\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/no-log'\n  }, (err, res) => {\n    t.error(err);\n    const payload = JSON.parse(res.payload);\n    t.same(payload, {\n      hello: 'world'\n    });\n  });\n});","file":"logger.test.js","skipped":false,"dir":"test"},{"name":"The default 404 handler logs the incoming request","suites":[],"updatePoint":{"line":1351,"column":55,"index":30422},"line":1351,"code":"test('The default 404 handler logs the incoming request', t => {\n  t.plan(5);\n  const expectedMessages = ['incoming request', 'Route GET:/not-found not found', 'request completed'];\n  const splitStream = split(JSON.parse);\n  splitStream.on('data', line => {\n    t.same(line.msg, expectedMessages.shift());\n  });\n  const logger = pino({\n    level: 'trace'\n  }, splitStream);\n  const fastify = Fastify({\n    logger\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/not-found'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 404);\n  });\n});","file":"logger.test.js","skipped":false,"dir":"test"},{"name":"should serialize request and response","suites":[],"updatePoint":{"line":1372,"column":43,"index":30972},"line":1372,"code":"test('should serialize request and response', t => {\n  t.plan(3);\n  const lines = [];\n  const dest = new stream.Writable({\n    write: function (chunk, enc, cb) {\n      lines.push(JSON.parse(chunk));\n      cb();\n    }\n  });\n  const fastify = Fastify({\n    logger: {\n      level: 'info',\n      stream: dest\n    }\n  });\n  fastify.get('/500', (req, reply) => {\n    reply.code(500).send(Error('500 error'));\n  });\n  fastify.inject({\n    url: '/500',\n    method: 'GET'\n  }, (e, res) => {\n    const l = lines.find(line => line.res && line.res.statusCode === 500);\n    t.ok(l.req);\n    t.same(l.req.method, 'GET');\n    t.same(l.req.url, '/500');\n  });\n});","file":"logger.test.js","skipped":false,"dir":"test"},{"name":"Wrap IPv6 address in listening log message","suites":[],"updatePoint":{"line":1405,"column":52,"index":31935},"line":1405,"code":"    test('Wrap IPv6 address in listening log message', t => {\n      t.plan(2);\n      const stream = split(JSON.parse);\n      const fastify = Fastify({\n        logger: {\n          stream,\n          level: 'info'\n        }\n      });\n      fastify.listen({\n        port: 0,\n        host: ipv6\n      }, err => {\n        t.error(err);\n        stream.once('data', line => {\n          const expected = 'Server listening at http://[' + ipv6 + ']:' + fastify.server.address().port;\n          t.same(line.msg, expected);\n          fastify.close();\n        });\n      });\n    });","file":"logger.test.js","skipped":false,"dir":"test"},{"name":"Do not wrap IPv4 address","suites":[],"updatePoint":{"line":1428,"column":30,"index":32487},"line":1428,"code":"test('Do not wrap IPv4 address', t => {\n  t.plan(2);\n  const stream = split(JSON.parse);\n  const fastify = Fastify({\n    logger: {\n      stream,\n      level: 'info'\n    }\n  });\n  fastify.listen({\n    port: 0,\n    host: '127.0.0.1'\n  }, err => {\n    t.error(err);\n    stream.once('data', line => {\n      const expected = 'Server listening at http://127.0.0.1:' + fastify.server.address().port;\n      t.same(line.msg, expected);\n      fastify.close();\n    });\n  });\n});","file":"logger.test.js","skipped":false,"dir":"test"},{"name":"file option","suites":[],"updatePoint":{"line":1449,"column":17,"index":32942},"line":1449,"code":"test('file option', t => {\n  t.plan(13);\n  let fastify = null;\n  const dest = file();\n  fastify = Fastify({\n    logger: {\n      file: dest\n    }\n  });\n  fastify.get('/', function (req, reply) {\n    t.ok(req.log);\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.listen({\n    port: 0,\n    host: localhost\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    http.get(`http://${localhostForURL}:` + fastify.server.address().port, () => {\n      const stream = fs.createReadStream(dest).pipe(split(JSON.parse));\n      stream.once('data', listenAtLogLine => {\n        t.ok(listenAtLogLine, 'listen at log message is ok');\n        stream.once('data', line => {\n          const id = line.reqId;\n          t.ok(line.reqId, 'reqId is defined');\n          t.ok(line.req, 'req is defined');\n          t.equal(line.msg, 'incoming request', 'message is set');\n          t.equal(line.req.method, 'GET', 'method is get');\n          stream.once('data', line => {\n            t.equal(line.reqId, id);\n            t.ok(line.reqId, 'reqId is defined');\n            t.ok(line.res, 'res is defined');\n            t.equal(line.msg, 'request completed', 'message is set');\n            t.equal(line.res.statusCode, 200, 'statusCode is 200');\n            t.ok(line.responseTime, 'responseTime is defined');\n            stream.resume();\n          });\n        });\n      });\n    });\n  });\n});","file":"logger.test.js","skipped":false,"dir":"test"},{"name":"should log the error if no error handler is defined","suites":[],"updatePoint":{"line":1496,"column":57,"index":34397},"line":1496,"code":"test('should log the error if no error handler is defined', t => {\n  t.plan(8);\n  const stream = split(JSON.parse);\n  const fastify = Fastify({\n    logger: {\n      stream,\n      level: 'info'\n    }\n  });\n  fastify.get('/error', function (req, reply) {\n    t.ok(req.log);\n    reply.send(new Error('a generic error'));\n  });\n  fastify.listen({\n    port: 0,\n    host: localhost\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    http.get(`http://${localhostForURL}:` + fastify.server.address().port + '/error');\n    stream.once('data', listenAtLogLine => {\n      t.ok(listenAtLogLine, 'listen at log message is ok');\n      stream.once('data', line => {\n        t.equal(line.msg, 'incoming request', 'message is set');\n        stream.once('data', line => {\n          t.equal(line.level, 50, 'level is correct');\n          t.equal(line.msg, 'a generic error', 'message is set');\n          stream.once('data', line => {\n            t.equal(line.msg, 'request completed', 'message is set');\n            t.same(line.res, {\n              statusCode: 500\n            }, 'status code is set');\n          });\n        });\n      });\n    });\n  });\n});","file":"logger.test.js","skipped":false,"dir":"test"},{"name":"should log as info if error status code >= 400 and < 500 if no error handler is defined","suites":[],"updatePoint":{"line":1536,"column":93,"index":35609},"line":1536,"code":"test('should log as info if error status code >= 400 and < 500 if no error handler is defined', t => {\n  t.plan(8);\n  const stream = split(JSON.parse);\n  const fastify = Fastify({\n    logger: {\n      stream,\n      level: 'info'\n    }\n  });\n  fastify.get('/400', function (req, reply) {\n    t.ok(req.log);\n    reply.send(Object.assign(new Error('a 400 error'), {\n      statusCode: 400\n    }));\n  });\n  fastify.get('/503', function (req, reply) {\n    t.ok(req.log);\n    reply.send(Object.assign(new Error('a 503 error'), {\n      statusCode: 503\n    }));\n  });\n  fastify.listen({\n    port: 0,\n    host: localhost\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    http.get(`http://${localhostForURL}:` + fastify.server.address().port + '/400');\n    stream.once('data', listenAtLogLine => {\n      t.ok(listenAtLogLine, 'listen at log message is ok');\n      stream.once('data', line => {\n        t.equal(line.msg, 'incoming request', 'message is set');\n        stream.once('data', line => {\n          t.equal(line.level, 30, 'level is correct');\n          t.equal(line.msg, 'a 400 error', 'message is set');\n          stream.once('data', line => {\n            t.equal(line.msg, 'request completed', 'message is set');\n            t.same(line.res, {\n              statusCode: 400\n            }, 'status code is set');\n          });\n        });\n      });\n    });\n  });\n});","file":"logger.test.js","skipped":false,"dir":"test"},{"name":"should log as error if error status code >= 500 if no error handler is defined","suites":[],"updatePoint":{"line":1584,"column":84,"index":37005},"line":1584,"code":"test('should log as error if error status code >= 500 if no error handler is defined', t => {\n  t.plan(8);\n  const stream = split(JSON.parse);\n  const fastify = Fastify({\n    logger: {\n      stream,\n      level: 'info'\n    }\n  });\n  fastify.get('/503', function (req, reply) {\n    t.ok(req.log);\n    reply.send(Object.assign(new Error('a 503 error'), {\n      statusCode: 503\n    }));\n  });\n  fastify.listen({\n    port: 0,\n    host: localhost\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    http.get(`http://${localhostForURL}:` + fastify.server.address().port + '/503');\n    stream.once('data', listenAtLogLine => {\n      t.ok(listenAtLogLine, 'listen at log message is ok');\n      stream.once('data', line => {\n        t.equal(line.msg, 'incoming request', 'message is set');\n        stream.once('data', line => {\n          t.equal(line.level, 50, 'level is correct');\n          t.equal(line.msg, 'a 503 error', 'message is set');\n          stream.once('data', line => {\n            t.equal(line.msg, 'request completed', 'message is set');\n            t.same(line.res, {\n              statusCode: 503\n            }, 'status code is set');\n          });\n        });\n      });\n    });\n  });\n});","file":"logger.test.js","skipped":false,"dir":"test"},{"name":"should not log the error if error handler is defined and it does not error","suites":[],"updatePoint":{"line":1626,"column":80,"index":38238},"line":1626,"code":"test('should not log the error if error handler is defined and it does not error', t => {\n  t.plan(8);\n  const stream = split(JSON.parse);\n  const fastify = Fastify({\n    logger: {\n      stream,\n      level: 'info'\n    }\n  });\n  fastify.get('/error', function (req, reply) {\n    t.ok(req.log);\n    reply.send(new Error('something happened'));\n  });\n  fastify.setErrorHandler((err, req, reply) => {\n    t.ok(err);\n    reply.send('something bad happened');\n  });\n  fastify.listen({\n    port: 0,\n    host: localhost\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    http.get(`http://${localhostForURL}:` + fastify.server.address().port + '/error');\n    stream.once('data', listenAtLogLine => {\n      t.ok(listenAtLogLine, 'listen at log message is ok');\n      stream.once('data', line => {\n        t.equal(line.msg, 'incoming request', 'message is set');\n        stream.once('data', line => {\n          t.equal(line.level, 30, 'level is correct');\n          t.equal(line.msg, 'request completed', 'message is set');\n          t.same(line.res, {\n            statusCode: 200\n          }, 'status code is set');\n        });\n      });\n    });\n  });\n});","file":"logger.test.js","skipped":false,"dir":"test"},{"name":"should not rely on raw request to log errors","suites":[],"updatePoint":{"line":1667,"column":50,"index":39394},"line":1667,"code":"test('should not rely on raw request to log errors', t => {\n  t.plan(7);\n  const stream = split(JSON.parse);\n  const fastify = Fastify({\n    logger: {\n      stream,\n      level: 'info'\n    }\n  });\n  fastify.get('/error', function (req, reply) {\n    t.ok(req.log);\n    reply.status(415).send(new Error('something happened'));\n  });\n  fastify.listen({\n    port: 0,\n    host: localhost\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    http.get(`http://${localhostForURL}:` + fastify.server.address().port + '/error');\n    stream.once('data', listenAtLogLine => {\n      t.ok(listenAtLogLine, 'listen at log message is ok');\n      stream.once('data', line => {\n        t.equal(line.msg, 'incoming request', 'message is set');\n        stream.once('data', line => {\n          t.equal(line.level, 30, 'level is correct');\n          t.equal(line.msg, 'something happened', 'message is set');\n          t.same(line.res, {\n            statusCode: 415\n          }, 'status code is set');\n        });\n      });\n    });\n  });\n});","file":"logger.test.js","skipped":false,"dir":"test"},{"name":"should redact the authorization header if so specified","suites":[],"updatePoint":{"line":1704,"column":60,"index":40461},"line":1704,"code":"test('should redact the authorization header if so specified', t => {\n  t.plan(7);\n  const stream = split(JSON.parse);\n  const fastify = Fastify({\n    logger: {\n      stream,\n      redact: ['req.headers.authorization'],\n      level: 'info',\n      serializers: {\n        req(req) {\n          return {\n            method: req.method,\n            url: req.url,\n            headers: req.headers,\n            hostname: req.hostname,\n            remoteAddress: req.ip,\n            remotePort: req.socket.remotePort\n          };\n        }\n\n      }\n    }\n  });\n  fastify.get('/', function (req, reply) {\n    t.same(req.headers.authorization, 'Bearer abcde');\n    reply.send({\n      hello: 'world'\n    });\n  });\n  stream.once('data', listenAtLogLine => {\n    t.ok(listenAtLogLine, 'listen at log message is ok');\n    stream.once('data', line => {\n      t.equal(line.req.headers.authorization, '[Redacted]', 'authorization is redacted');\n    });\n  });\n  fastify.listen({\n    port: 0,\n    host: localhost\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'GET',\n      url: `http://${localhostForURL}:` + fastify.server.address().port,\n      headers: {\n        authorization: 'Bearer abcde'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.same(body.toString(), JSON.stringify({\n        hello: 'world'\n      }));\n    });\n  });\n});","file":"logger.test.js","skipped":false,"dir":"test"},{"name":"should not log incoming request and outgoing response when disabled","suites":[],"updatePoint":{"line":1762,"column":73,"index":41916},"line":1762,"code":"test('should not log incoming request and outgoing response when disabled', t => {\n  t.plan(3);\n  const lines = [];\n  const dest = new stream.Writable({\n    write: function (chunk, enc, cb) {\n      lines.push(JSON.parse(chunk));\n      cb();\n    }\n  });\n  const fastify = Fastify({\n    disableRequestLogging: true,\n    logger: {\n      level: 'info',\n      stream: dest\n    }\n  });\n  fastify.get('/500', (req, reply) => {\n    reply.code(500).send(Error('500 error'));\n  });\n  fastify.inject({\n    url: '/500',\n    method: 'GET'\n  }, (e, res) => {\n    t.same(lines.length, 1);\n    t.ok(lines[0].msg);\n    t.same(lines[0].msg, '500 error');\n  });\n});","file":"logger.test.js","skipped":false,"dir":"test"},{"name":"should not log incoming request and outgoing response for 404 onBadUrl when disabled","suites":[],"updatePoint":{"line":1790,"column":90,"index":42580},"line":1790,"code":"test('should not log incoming request and outgoing response for 404 onBadUrl when disabled', t => {\n  t.plan(1);\n  const lines = [];\n  const dest = new stream.Writable({\n    write: function (chunk, enc, cb) {\n      lines.push(JSON.parse(chunk));\n      cb();\n    }\n  });\n  const fastify = Fastify({\n    disableRequestLogging: true,\n    logger: {\n      level: 'info',\n      stream: dest\n    }\n  });\n  fastify.inject({\n    url: '/%c0',\n    method: 'GET'\n  }, (e, res) => {\n    // it will log 1 line only because of basic404\n    t.same(lines.length, 1);\n  });\n});","file":"logger.test.js","skipped":false,"dir":"test"},{"name":"should pass when using unWritable props in the logger option","suites":[],"updatePoint":{"line":1814,"column":66,"index":43116},"line":1814,"code":"test('should pass when using unWritable props in the logger option', t => {\n  t.plan(1);\n  Fastify({\n    logger: Object.defineProperty({}, 'level', {\n      value: 'info'\n    })\n  });\n  t.pass();\n});","file":"logger.test.js","skipped":false,"dir":"test"},{"name":"should be able to use a custom logger","suites":[],"updatePoint":{"line":1823,"column":43,"index":43292},"line":1823,"code":"test('should be able to use a custom logger', t => {\n  t.plan(1);\n  const logger = {\n    fatal: () => {},\n    error: () => {},\n    warn: () => {},\n    info: () => {},\n    debug: () => {},\n    trace: () => {},\n    child: () => {}\n  };\n  Fastify({\n    logger\n  });\n  t.pass();\n});","file":"logger.test.js","skipped":false,"dir":"test"},{"name":"should create a default logger if provided one is invalid","suites":[],"updatePoint":{"line":1839,"column":63,"index":43591},"line":1839,"code":"test('should create a default logger if provided one is invalid', t => {\n  t.plan(1);\n  const logger = new Date();\n  Fastify({\n    logger\n  });\n  t.pass();\n});","file":"logger.test.js","skipped":false,"dir":"test"},{"name":"should not throw error when serializing custom req","suites":[],"updatePoint":{"line":1847,"column":56,"index":43744},"line":1847,"code":"test('should not throw error when serializing custom req', t => {\n  t.plan(1);\n  const lines = [];\n  const dest = new stream.Writable({\n    write: function (chunk, enc, cb) {\n      lines.push(JSON.parse(chunk));\n      cb();\n    }\n  });\n  const fastify = Fastify({\n    logger: {\n      level: 'info',\n      stream: dest\n    }\n  });\n  fastify.log.info({\n    req: {}\n  });\n  t.same(lines[0].req, {});\n});","file":"logger.test.js","skipped":false,"dir":"test"},{"name":"maxRequestsPerSocket on node version >= 16.10.0","suites":[],"updatePoint":{"line":14,"column":53,"index":267},"line":14,"code":"test('maxRequestsPerSocket on node version >= 16.10.0', {\n  skip\n}, t => {\n  t.plan(8);\n  const fastify = Fastify({\n    maxRequestsPerSocket: 2\n  });\n  fastify.get('/', (req, reply) => {\n    reply.send({\n      hello: 'world'\n    });\n  });\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen({\n    port: 0\n  }, function (err) {\n    t.error(err);\n    const port = fastify.server.address().port;\n    const client = net.createConnection({\n      port\n    }, () => {\n      client.write('GET / HTTP/1.1\\r\\n\\r\\n');\n      client.once('data', data => {\n        t.match(data.toString(), /Connection:\\s*keep-alive/i);\n        t.match(data.toString(), /Keep-Alive:\\s*timeout=\\d+/i);\n        t.match(data.toString(), /200 OK/i);\n        client.write('GET / HTTP/1.1\\r\\n\\r\\n');\n        client.once('data', data => {\n          t.match(data.toString(), /Connection:\\s*close/i);\n          t.match(data.toString(), /200 OK/i);\n          client.write('GET / HTTP/1.1\\r\\n\\r\\n');\n          client.once('data', data => {\n            t.match(data.toString(), /Connection:\\s*close/i);\n            t.match(data.toString(), /503 Service Unavailable/i);\n            client.end();\n          });\n        });\n      });\n    });\n  });\n});","file":"maxRequestsPerSocket.test.js","skipped":false,"dir":"test"},{"name":"maxRequestsPerSocket zero should behave same as null","suites":[],"updatePoint":{"line":55,"column":58,"index":1486},"line":55,"code":"test('maxRequestsPerSocket zero should behave same as null', {\n  skip\n}, t => {\n  t.plan(10);\n  const fastify = Fastify({\n    maxRequestsPerSocket: 0\n  });\n  fastify.get('/', (req, reply) => {\n    reply.send({\n      hello: 'world'\n    });\n  });\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen({\n    port: 0\n  }, function (err) {\n    t.error(err);\n    const port = fastify.server.address().port;\n    const client = net.createConnection({\n      port\n    }, () => {\n      client.write('GET / HTTP/1.1\\r\\n\\r\\n');\n      client.once('data', data => {\n        t.match(data.toString(), /Connection:\\s*keep-alive/i);\n        t.match(data.toString(), /Keep-Alive:\\s*timeout=\\d+/i);\n        t.match(data.toString(), /200 OK/i);\n        client.write('GET / HTTP/1.1\\r\\n\\r\\n');\n        client.once('data', data => {\n          t.match(data.toString(), /Connection:\\s*keep-alive/i);\n          t.match(data.toString(), /Keep-Alive:\\s*timeout=\\d+/i);\n          t.match(data.toString(), /200 OK/i);\n          client.write('GET / HTTP/1.1\\r\\n\\r\\n');\n          client.once('data', data => {\n            t.match(data.toString(), /Connection:\\s*keep-alive/i);\n            t.match(data.toString(), /Keep-Alive:\\s*timeout=\\d+/i);\n            t.match(data.toString(), /200 OK/i);\n            client.end();\n          });\n        });\n      });\n    });\n  });\n});","file":"maxRequestsPerSocket.test.js","skipped":false,"dir":"test"},{"name":"maxRequestsPerSocket should be set","suites":[],"updatePoint":{"line":98,"column":40,"index":2815},"line":98,"code":"test('maxRequestsPerSocket should be set', async t => {\n  t.plan(1);\n  const initialConfig = Fastify({\n    maxRequestsPerSocket: 5\n  }).initialConfig;\n  t.same(initialConfig.maxRequestsPerSocket, 5);\n});","file":"maxRequestsPerSocket.test.js","skipped":false,"dir":"test"},{"name":"maxRequestsPerSocket should 0","suites":[],"updatePoint":{"line":105,"column":35,"index":3014},"line":105,"code":"test('maxRequestsPerSocket should 0', async t => {\n  t.plan(1);\n  const initialConfig = Fastify().initialConfig;\n  t.same(initialConfig.maxRequestsPerSocket, 0);\n});","file":"maxRequestsPerSocket.test.js","skipped":false,"dir":"test"},{"name":"requestTimeout passed to server","suites":[],"updatePoint":{"line":110,"column":37,"index":3182},"line":110,"code":"test('requestTimeout passed to server', t => {\n  t.plan(2);\n  const httpServer = Fastify({\n    maxRequestsPerSocket: 5\n  }).server;\n  t.equal(httpServer.maxRequestsPerSocket, 5);\n  const httpsServer = Fastify({\n    maxRequestsPerSocket: 5,\n    https: true\n  }).server;\n  t.equal(httpsServer.maxRequestsPerSocket, 5);\n});","file":"maxRequestsPerSocket.test.js","skipped":false,"dir":"test"},{"name":"Should be able to override the default use API","suites":[],"updatePoint":{"line":13,"column":52,"index":205},"line":13,"code":"test('Should be able to override the default use API', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  fastify.decorate('use', () => true);\n  t.equal(fastify.use(), true);\n});","file":"middleware.test.js","skipped":false,"dir":"test"},{"name":"Cannot decorate use twice","suites":[],"updatePoint":{"line":19,"column":31,"index":363},"line":19,"code":"test('Cannot decorate use twice', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  fastify.decorate('use', () => true);\n\n  try {\n    fastify.decorate('use', () => true);\n  } catch (err) {\n    t.ok(err instanceof FST_ERR_DEC_ALREADY_PRESENT);\n  }\n});","file":"middleware.test.js","skipped":false,"dir":"test"},{"name":"Encapsulation works","suites":[],"updatePoint":{"line":30,"column":25,"index":609},"line":30,"code":"test('Encapsulation works', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  fastify.register((instance, opts, done) => {\n    instance.decorate('use', () => true);\n    t.equal(instance.use(), true);\n    done();\n  });\n  fastify.ready();\n});","file":"middleware.test.js","skipped":false,"dir":"test"},{"name":"can be created - mkcol","suites":[],"updatePoint":{"line":11,"column":28,"index":171},"line":11,"code":"test('can be created - mkcol', t => {\n  t.plan(1);\n\n  try {\n    fastify.route({\n      method: 'MKCOL',\n      url: '*',\n      handler: function (req, reply) {\n        reply.code(201).send();\n      }\n    });\n    t.pass();\n  } catch (e) {\n    t.fail();\n  }\n});","file":"mkcol.test.js","skipped":false,"dir":"test"},{"name":"request - mkcol","suites":[],"updatePoint":{"line":34,"column":23,"index":527},"line":34,"code":"  test('request - mkcol', t => {\n    t.plan(2);\n    sget({\n      url: `http://localhost:${fastify.server.address().port}/test/`,\n      method: 'MKCOL'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 201);\n    });\n  });","file":"mkcol.test.js","skipped":false,"dir":"test"},{"name":"shorthand - move","suites":[],"updatePoint":{"line":11,"column":22,"index":165},"line":11,"code":"test('shorthand - move', t => {\n  t.plan(1);\n\n  try {\n    fastify.route({\n      method: 'MOVE',\n      url: '*',\n      handler: function (req, reply) {\n        const destination = req.headers.destination;\n        reply.code(201).header('location', destination).send();\n      }\n    });\n    t.pass();\n  } catch (e) {\n    t.fail();\n  }\n});","file":"move.test.js","skipped":false,"dir":"test"},{"name":"request - move","suites":[],"updatePoint":{"line":35,"column":22,"index":604},"line":35,"code":"  test('request - move', t => {\n    t.plan(3);\n    sget({\n      url: `http://localhost:${fastify.server.address().port}/test.txt`,\n      method: 'MOVE',\n      headers: {\n        Destination: '/test2.txt'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 201);\n      t.equal(response.headers.location, '/test2.txt');\n    });\n  });","file":"move.test.js","skipped":false,"dir":"test"},{"name":"nullable string","suites":[],"updatePoint":{"line":11,"column":21,"index":162},"line":11,"code":"test('nullable string', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.route({\n    method: 'POST',\n    url: '/',\n    handler: (req, reply) => {\n      t.same(req.body.hello, null);\n      reply.code(200).send(req.body);\n    },\n    schema: {\n      body: {\n        type: 'object',\n        properties: {\n          hello: {\n            type: 'string',\n            format: 'email',\n            nullable: true\n          }\n        }\n      },\n      response: {\n        200: {\n          type: 'object',\n          properties: {\n            hello: {\n              type: 'string',\n              format: 'email',\n              nullable: true\n            }\n          }\n        }\n      }\n    }\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/',\n    body: {\n      hello: null\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.same(res.payload.hello, null);\n  });\n});","file":"nullable-validation.test.js","skipped":false,"dir":"test"},{"name":"object or null body","suites":[],"updatePoint":{"line":57,"column":25,"index":1036},"line":57,"code":"test('object or null body', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.route({\n    method: 'POST',\n    url: '/',\n    handler: (req, reply) => {\n      t.equal(req.body, undefined);\n      reply.code(200).send({\n        isUndefinedBody: req.body === undefined\n      });\n    },\n    schema: {\n      body: {\n        type: ['object', 'null'],\n        properties: {\n          hello: {\n            type: 'string',\n            format: 'email'\n          }\n        }\n      },\n      response: {\n        200: {\n          type: 'object',\n          nullable: true,\n          properties: {\n            isUndefinedBody: {\n              type: 'boolean'\n            }\n          }\n        }\n      }\n    }\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'POST',\n      url: 'http://localhost:' + fastify.server.address().port\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.same(JSON.parse(body), {\n        isUndefinedBody: true\n      });\n    });\n  });\n});","file":"nullable-validation.test.js","skipped":false,"dir":"test"},{"name":"nullable body","suites":[],"updatePoint":{"line":111,"column":19,"index":2135},"line":111,"code":"test('nullable body', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.route({\n    method: 'POST',\n    url: '/',\n    handler: (req, reply) => {\n      t.equal(req.body, undefined);\n      reply.code(200).send({\n        isUndefinedBody: req.body === undefined\n      });\n    },\n    schema: {\n      body: {\n        type: 'object',\n        nullable: true,\n        properties: {\n          hello: {\n            type: 'string',\n            format: 'email'\n          }\n        }\n      },\n      response: {\n        200: {\n          type: 'object',\n          nullable: true,\n          properties: {\n            isUndefinedBody: {\n              type: 'boolean'\n            }\n          }\n        }\n      }\n    }\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'POST',\n      url: 'http://localhost:' + fastify.server.address().port\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.same(JSON.parse(body), {\n        isUndefinedBody: true\n      });\n    });\n  });\n});","file":"nullable-validation.test.js","skipped":false,"dir":"test"},{"name":"Nullable body with 204","suites":[],"updatePoint":{"line":166,"column":28,"index":3257},"line":166,"code":"test('Nullable body with 204', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.route({\n    method: 'POST',\n    url: '/',\n    handler: (req, reply) => {\n      t.equal(req.body, undefined);\n      reply.code(204).send();\n    },\n    schema: {\n      body: {\n        type: 'object',\n        nullable: true,\n        properties: {\n          hello: {\n            type: 'string',\n            format: 'email'\n          }\n        }\n      }\n    }\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'POST',\n      url: 'http://localhost:' + fastify.server.address().port\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 204);\n      t.equal(body.length, 0);\n    });\n  });\n});","file":"nullable-validation.test.js","skipped":false,"dir":"test"},{"name":"shorthand - output string","suites":[],"updatePoint":{"line":33,"column":31,"index":503},"line":33,"code":"test('shorthand - output string', t => {\n  t.plan(1);\n\n  try {\n    fastify.get('/string', opts, function (req, reply) {\n      reply.code(200).send({\n        hello: 'world'\n      });\n    });\n    t.pass();\n  } catch (e) {\n    t.fail();\n  }\n});","file":"output-validation.test.js","skipped":false,"dir":"test"},{"name":"shorthand - output number","suites":[],"updatePoint":{"line":47,"column":31,"index":745},"line":47,"code":"test('shorthand - output number', t => {\n  t.plan(1);\n\n  try {\n    fastify.get('/number', opts, function (req, reply) {\n      reply.code(201).send({\n        hello: 55\n      });\n    });\n    t.pass();\n  } catch (e) {\n    t.fail();\n  }\n});","file":"output-validation.test.js","skipped":false,"dir":"test"},{"name":"wrong object for schema - output","suites":[],"updatePoint":{"line":61,"column":38,"index":989},"line":61,"code":"test('wrong object for schema - output', t => {\n  t.plan(1);\n\n  try {\n    fastify.get('/wrong-object-for-schema', opts, function (req, reply) {\n      // will send { }\n      reply.code(201).send({\n        hello: 'world'\n      });\n    });\n    t.pass();\n  } catch (e) {\n    t.fail();\n  }\n});","file":"output-validation.test.js","skipped":false,"dir":"test"},{"name":"empty response","suites":[],"updatePoint":{"line":76,"column":20,"index":1260},"line":76,"code":"test('empty response', t => {\n  t.plan(1);\n\n  try {\n    // no checks\n    fastify.get('/empty', opts, function (req, reply) {\n      reply.code(204).send();\n    });\n    t.pass();\n  } catch (e) {\n    t.fail();\n  }\n});","file":"output-validation.test.js","skipped":false,"dir":"test"},{"name":"unlisted response code","suites":[],"updatePoint":{"line":89,"column":28,"index":1483},"line":89,"code":"test('unlisted response code', t => {\n  t.plan(1);\n\n  try {\n    fastify.get('/400', opts, function (req, reply) {\n      reply.code(400).send({\n        hello: 'DOOM'\n      });\n    });\n    t.pass();\n  } catch (e) {\n    t.fail();\n  }\n});","file":"output-validation.test.js","skipped":false,"dir":"test"},{"name":"shorthand - string get ok","suites":[],"updatePoint":{"line":110,"column":33,"index":1826},"line":110,"code":"  test('shorthand - string get ok', t => {\n    t.plan(4);\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/string'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n  });","file":"output-validation.test.js","skipped":false,"dir":"test"},{"name":"shorthand - number get ok","suites":[],"updatePoint":{"line":124,"column":33,"index":2235},"line":124,"code":"  test('shorthand - number get ok', t => {\n    t.plan(4);\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/number'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 201);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 55\n      });\n    });\n  });","file":"output-validation.test.js","skipped":false,"dir":"test"},{"name":"shorthand - wrong-object-for-schema","suites":[],"updatePoint":{"line":138,"column":43,"index":2649},"line":138,"code":"  test('shorthand - wrong-object-for-schema', t => {\n    t.plan(4);\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/wrong-object-for-schema'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 500);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        statusCode: 500,\n        error: 'Internal Server Error',\n        message: 'The value \"world\" cannot be converted to a number.'\n      });\n    });\n  });","file":"output-validation.test.js","skipped":false,"dir":"test"},{"name":"shorthand - empty","suites":[],"updatePoint":{"line":154,"column":25,"index":3179},"line":154,"code":"  test('shorthand - empty', t => {\n    t.plan(2);\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/empty'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 204);\n    });\n  });","file":"output-validation.test.js","skipped":false,"dir":"test"},{"name":"shorthand - 400","suites":[],"updatePoint":{"line":164,"column":23,"index":3442},"line":164,"code":"  test('shorthand - 400', t => {\n    t.plan(4);\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/400'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 400);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'DOOM'\n      });\n    });\n  });","file":"output-validation.test.js","skipped":false,"dir":"test"},{"name":"require a plugin","suites":[],"updatePoint":{"line":16,"column":22,"index":292},"line":16,"code":"test('require a plugin', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  fastify.register(require('./plugin.helper'));\n  fastify.ready(() => {\n    t.ok(fastify.test);\n  });\n});","file":"plugin.test.js","skipped":false,"dir":"test"},{"name":"plugin metadata - ignore prefix","suites":[],"updatePoint":{"line":24,"column":37,"index":487},"line":24,"code":"test('plugin metadata - ignore prefix', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  plugin[Symbol.for('skip-override')] = true;\n  fastify.register(plugin, {\n    prefix: 'foo'\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, function (err, res) {\n    t.error(err);\n    t.equal(res.payload, 'hello');\n  });\n\n  function plugin(instance, opts, done) {\n    instance.get('/', function (request, reply) {\n      reply.send('hello');\n    });\n    done();\n  }\n});","file":"plugin.test.js","skipped":false,"dir":"test"},{"name":"plugin metadata - naming plugins","suites":[],"updatePoint":{"line":46,"column":38,"index":961},"line":46,"code":"test('plugin metadata - naming plugins', async t => {\n  t.plan(2);\n  const fastify = Fastify();\n  fastify.register(require('./plugin.name.display'));\n  fastify.register(function (fastify, opts, done) {\n    // one line\n    t.equal(fastify.pluginName, 'function (fastify, opts, done) { -- // one line');\n    done();\n  });\n  fastify.register(function fooBar(fastify, opts, done) {\n    t.equal(fastify.pluginName, 'fooBar');\n    done();\n  });\n  await fastify.ready();\n});","file":"plugin.test.js","skipped":false,"dir":"test"},{"name":"fastify.register with fastify-plugin should not encapsulate his code","suites":[],"updatePoint":{"line":61,"column":74,"index":1465},"line":61,"code":"test('fastify.register with fastify-plugin should not encapsulate his code', t => {\n  t.plan(10);\n  const fastify = Fastify();\n  fastify.register((instance, opts, done) => {\n    instance.register(fp((i, o, n) => {\n      i.decorate('test', () => {});\n      t.ok(i.test);\n      n();\n    }));\n    t.notOk(instance.test); // the decoration is added at the end\n\n    instance.after(() => {\n      t.ok(instance.test);\n    });\n    instance.get('/', (req, reply) => {\n      t.ok(instance.test);\n      reply.send({\n        hello: 'world'\n      });\n    });\n    done();\n  });\n  fastify.ready(() => {\n    t.notOk(fastify.test);\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n  });\n});","file":"plugin.test.js","skipped":false,"dir":"test"},{"name":"fastify.register with fastify-plugin should provide access to external fastify instance if opts argument is a function","suites":[],"updatePoint":{"line":106,"column":124,"index":2596},"line":106,"code":"test('fastify.register with fastify-plugin should provide access to external fastify instance if opts argument is a function', t => {\n  t.plan(22);\n  const fastify = Fastify();\n  fastify.register((instance, opts, done) => {\n    instance.register(fp((i, o, n) => {\n      i.decorate('global', () => {});\n      t.ok(i.global);\n      n();\n    }));\n    instance.register((i, o, n) => n(), p => {\n      t.notOk(p === instance || p === fastify);\n      t.ok(instance.isPrototypeOf(p));\n      t.ok(fastify.isPrototypeOf(p));\n      t.ok(p.global);\n    });\n    instance.register((i, o, n) => {\n      i.decorate('local', () => {});\n      n();\n    });\n    instance.register((i, o, n) => n(), p => t.notOk(p.local));\n    instance.register((i, o, n) => {\n      t.ok(i.local);\n      n();\n    }, p => p.decorate('local', () => {}));\n    instance.register((i, o, n) => n(), p => t.notOk(p.local));\n    instance.register(fp((i, o, n) => {\n      t.ok(i.global_2);\n      n();\n    }), p => p.decorate('global_2', () => 'hello'));\n    instance.register((i, o, n) => {\n      i.decorate('global_2', () => 'world');\n      n();\n    }, p => p.get('/', (req, reply) => {\n      t.ok(p.global_2);\n      reply.send({\n        hello: p.global_2()\n      });\n    }));\n    t.notOk(instance.global);\n    t.notOk(instance.global_2);\n    t.notOk(instance.local); // the decoration is added at the end\n\n    instance.after(() => {\n      t.ok(instance.global);\n      t.equal(instance.global_2(), 'hello');\n      t.notOk(instance.local);\n    });\n    done();\n  });\n  fastify.ready(() => {\n    t.notOk(fastify.global);\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n  });\n});","file":"plugin.test.js","skipped":false,"dir":"test"},{"name":"fastify.register with fastify-plugin registers fastify level plugins","suites":[],"updatePoint":{"line":178,"column":74,"index":4585},"line":178,"code":"test('fastify.register with fastify-plugin registers fastify level plugins', t => {\n  t.plan(15);\n  const fastify = Fastify();\n\n  function fastifyPlugin(instance, opts, done) {\n    instance.decorate('test', 'first');\n    t.ok(instance.test);\n    done();\n  }\n\n  function innerPlugin(instance, opts, done) {\n    instance.decorate('test2', 'second');\n    done();\n  }\n\n  fastify.register(fp(fastifyPlugin));\n  fastify.register((instance, opts, done) => {\n    t.ok(instance.test);\n    instance.register(fp(innerPlugin));\n    instance.get('/test2', (req, reply) => {\n      t.ok(instance.test2);\n      reply.send({\n        test2: instance.test2\n      });\n    });\n    done();\n  });\n  fastify.ready(() => {\n    t.ok(fastify.test);\n    t.notOk(fastify.test2);\n  });\n  fastify.get('/', (req, reply) => {\n    t.ok(fastify.test);\n    reply.send({\n      test: fastify.test\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        test: 'first'\n      });\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/test2'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        test2: 'second'\n      });\n    });\n  });\n});","file":"plugin.test.js","skipped":false,"dir":"test"},{"name":"check dependencies - should not throw","suites":[],"updatePoint":{"line":246,"column":43,"index":6231},"line":246,"code":"test('check dependencies - should not throw', t => {\n  t.plan(12);\n  const fastify = Fastify();\n  fastify.register((instance, opts, done) => {\n    instance.register(fp((i, o, n) => {\n      i.decorate('test', () => {});\n      t.ok(i.test);\n      n();\n    }));\n    instance.register(fp((i, o, n) => {\n      try {\n        i.decorate('otherTest', () => {}, ['test']);\n        t.ok(i.test);\n        t.ok(i.otherTest);\n        n();\n      } catch (e) {\n        t.fail();\n      }\n    }));\n    instance.get('/', (req, reply) => {\n      t.ok(instance.test);\n      t.ok(instance.otherTest);\n      reply.send({\n        hello: 'world'\n      });\n    });\n    done();\n  });\n  fastify.ready(() => {\n    t.notOk(fastify.test);\n    t.notOk(fastify.otherTest);\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n  });\n});","file":"plugin.test.js","skipped":false,"dir":"test"},{"name":"check dependencies - should throw","suites":[],"updatePoint":{"line":298,"column":39,"index":7434},"line":298,"code":"test('check dependencies - should throw', t => {\n  t.plan(12);\n  const fastify = Fastify();\n  fastify.register((instance, opts, done) => {\n    instance.register(fp((i, o, n) => {\n      try {\n        i.decorate('otherTest', () => {}, ['test']);\n        t.fail();\n      } catch (e) {\n        t.equal(e.code, 'FST_ERR_DEC_MISSING_DEPENDENCY');\n        t.equal(e.message, 'The decorator is missing dependency \\'test\\'.');\n      }\n\n      n();\n    }));\n    instance.register(fp((i, o, n) => {\n      i.decorate('test', () => {});\n      t.ok(i.test);\n      t.notOk(i.otherTest);\n      n();\n    }));\n    instance.get('/', (req, reply) => {\n      t.ok(instance.test);\n      t.notOk(instance.otherTest);\n      reply.send({\n        hello: 'world'\n      });\n    });\n    done();\n  });\n  fastify.ready(() => {\n    t.notOk(fastify.test);\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n  });\n});","file":"plugin.test.js","skipped":false,"dir":"test"},{"name":"set the plugin name based on the plugin displayName symbol","suites":[],"updatePoint":{"line":351,"column":64,"index":8747},"line":351,"code":"test('set the plugin name based on the plugin displayName symbol', t => {\n  t.plan(6);\n  const fastify = Fastify();\n  fastify.register(fp((fastify, opts, done) => {\n    t.equal(fastify.pluginName, 'fastify -> plugin-A');\n    fastify.register(fp((fastify, opts, done) => {\n      t.equal(fastify.pluginName, 'fastify -> plugin-A -> plugin-AB');\n      done();\n    }, {\n      name: 'plugin-AB'\n    }));\n    fastify.register(fp((fastify, opts, done) => {\n      t.equal(fastify.pluginName, 'fastify -> plugin-A -> plugin-AB -> plugin-AC');\n      done();\n    }, {\n      name: 'plugin-AC'\n    }));\n    done();\n  }, {\n    name: 'plugin-A'\n  }));\n  fastify.register(fp((fastify, opts, done) => {\n    t.equal(fastify.pluginName, 'fastify -> plugin-A -> plugin-AB -> plugin-AC -> plugin-B');\n    done();\n  }, {\n    name: 'plugin-B'\n  }));\n  t.equal(fastify.pluginName, 'fastify');\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    fastify.close();\n  });\n});","file":"plugin.test.js","skipped":false,"dir":"test"},{"name":"plugin name will change when using no encapsulation","suites":[],"updatePoint":{"line":386,"column":57,"index":9703},"line":386,"code":"test('plugin name will change when using no encapsulation', t => {\n  t.plan(6);\n  const fastify = Fastify();\n  fastify.register(fp((fastify, opts, done) => {\n    // store it in a different variable will hold the correct name\n    const pluginName = fastify.pluginName;\n    fastify.register(fp((fastify, opts, done) => {\n      t.equal(fastify.pluginName, 'fastify -> plugin-A -> plugin-AB');\n      done();\n    }, {\n      name: 'plugin-AB'\n    }));\n    fastify.register(fp((fastify, opts, done) => {\n      t.equal(fastify.pluginName, 'fastify -> plugin-A -> plugin-AB -> plugin-AC');\n      done();\n    }, {\n      name: 'plugin-AC'\n    }));\n    setImmediate(() => {\n      // normally we would expect the name plugin-A\n      // but we operate on the same instance in each plugin\n      t.equal(fastify.pluginName, 'fastify -> plugin-A -> plugin-AB -> plugin-AC');\n      t.equal(pluginName, 'fastify -> plugin-A');\n    });\n    done();\n  }, {\n    name: 'plugin-A'\n  }));\n  t.equal(fastify.pluginName, 'fastify');\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    fastify.close();\n  });\n});","file":"plugin.test.js","skipped":false,"dir":"test"},{"name":"plugin name is undefined when accessing in no plugin context","suites":[],"updatePoint":{"line":422,"column":66,"index":10811},"line":422,"code":"test('plugin name is undefined when accessing in no plugin context', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  t.equal(fastify.pluginName, 'fastify');\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    fastify.close();\n  });\n});","file":"plugin.test.js","skipped":false,"dir":"test"},{"name":"set the plugin name based on the plugin function name","suites":[],"updatePoint":{"line":433,"column":59,"index":11058},"line":433,"code":"test('set the plugin name based on the plugin function name', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.register(function myPluginA(fastify, opts, done) {\n    t.equal(fastify.pluginName, 'myPluginA');\n    fastify.register(function myPluginAB(fastify, opts, done) {\n      t.equal(fastify.pluginName, 'myPluginAB');\n      done();\n    });\n    setImmediate(() => {\n      // exact name due to encapsulation\n      t.equal(fastify.pluginName, 'myPluginA');\n    });\n    done();\n  });\n  fastify.register(function myPluginB(fastify, opts, done) {\n    t.equal(fastify.pluginName, 'myPluginB');\n    done();\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    fastify.close();\n  });\n});","file":"plugin.test.js","skipped":false,"dir":"test"},{"name":"approximate a plugin name when no meta data is available","suites":[],"updatePoint":{"line":459,"column":62,"index":11773},"line":459,"code":"test('approximate a plugin name when no meta data is available', t => {\n  t.plan(7);\n  const fastify = Fastify();\n  fastify.register((fastify, opts, done) => {\n    // A\n    t.equal(fastify.pluginName.startsWith('(fastify, opts, done)'), true);\n    t.equal(fastify.pluginName.includes('// A'), true);\n    fastify.register((fastify, opts, done) => {\n      // B\n      t.equal(fastify.pluginName.startsWith('(fastify, opts, done)'), true);\n      t.equal(fastify.pluginName.includes('// B'), true);\n      done();\n    });\n    setImmediate(() => {\n      t.equal(fastify.pluginName.startsWith('(fastify, opts, done)'), true);\n      t.equal(fastify.pluginName.includes('// A'), true);\n    });\n    done();\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    fastify.close();\n  });\n});","file":"plugin.test.js","skipped":false,"dir":"test"},{"name":"approximate a plugin name also when fastify-plugin has no meta data","suites":[],"updatePoint":{"line":485,"column":73,"index":12580},"line":485,"code":"test('approximate a plugin name also when fastify-plugin has no meta data', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.register(fp((fastify, opts, done) => {\n    t.match(fastify.pluginName, /plugin\\.test/);\n    fastify.register(fp(function B(fastify, opts, done) {\n      // function has name\n      t.match(fastify.pluginName, /plugin\\.test-auto-\\d+ -> B/);\n      done();\n    }));\n    setImmediate(() => {\n      t.match(fastify.pluginName, /plugin\\.test-auto-\\d+ -> B/);\n    });\n    done();\n  }));\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    fastify.close();\n  });\n});","file":"plugin.test.js","skipped":false,"dir":"test"},{"name":"plugin encapsulation","suites":[],"updatePoint":{"line":507,"column":26,"index":13140},"line":507,"code":"test('plugin encapsulation', t => {\n  t.plan(10);\n  const fastify = Fastify();\n  fastify.register((instance, opts, done) => {\n    instance.register(fp((i, o, n) => {\n      i.decorate('test', 'first');\n      n();\n    }));\n    instance.get('/first', (req, reply) => {\n      reply.send({\n        plugin: instance.test\n      });\n    });\n    done();\n  });\n  fastify.register((instance, opts, done) => {\n    instance.register(fp((i, o, n) => {\n      i.decorate('test', 'second');\n      n();\n    }));\n    instance.get('/second', (req, reply) => {\n      reply.send({\n        plugin: instance.test\n      });\n    });\n    done();\n  });\n  fastify.ready(() => {\n    t.notOk(fastify.test);\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/first'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        plugin: 'first'\n      });\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/second'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        plugin: 'second'\n      });\n    });\n  });\n});","file":"plugin.test.js","skipped":false,"dir":"test"},{"name":"if a plugin raises an error and there is not a callback to handle it, the server must not start","suites":[],"updatePoint":{"line":568,"column":101,"index":14716},"line":568,"code":"test('if a plugin raises an error and there is not a callback to handle it, the server must not start', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  fastify.register((instance, opts, done) => {\n    done(new Error('err'));\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.ok(err instanceof Error);\n    t.equal(err.message, 'err');\n  });\n});","file":"plugin.test.js","skipped":false,"dir":"test"},{"name":"add hooks after route declaration","suites":[],"updatePoint":{"line":581,"column":39,"index":15008},"line":581,"code":"test('add hooks after route declaration', t => {\n  t.plan(3);\n  const fastify = Fastify();\n\n  function plugin(instance, opts, done) {\n    instance.decorateRequest('check', null);\n    instance.addHook('onRequest', (req, reply, done) => {\n      req.check = {};\n      done();\n    });\n    setImmediate(done);\n  }\n\n  fastify.register(fp(plugin));\n  fastify.register((instance, options, done) => {\n    instance.addHook('preHandler', function b(req, res, done) {\n      req.check.hook2 = true;\n      done();\n    });\n    instance.get('/', (req, reply) => {\n      reply.send(req.check);\n    });\n    instance.addHook('preHandler', function c(req, res, done) {\n      req.check.hook3 = true;\n      done();\n    });\n    done();\n  });\n  fastify.addHook('preHandler', function a(req, res, done) {\n    req.check.hook1 = true;\n    done();\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port\n    }, (err, response, body) => {\n      t.error(err);\n      t.same(JSON.parse(body), {\n        hook1: true,\n        hook2: true,\n        hook3: true\n      });\n      fastify.close();\n    });\n  });\n});","file":"plugin.test.js","skipped":false,"dir":"test"},{"name":"nested plugins","suites":[],"updatePoint":{"line":631,"column":20,"index":16173},"line":631,"code":"test('nested plugins', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  fastify.register(function (fastify, opts, done) {\n    fastify.register((fastify, opts, done) => {\n      fastify.get('/', function (req, reply) {\n        reply.send('I am child 1');\n      });\n      done();\n    }, {\n      prefix: '/child1'\n    });\n    fastify.register((fastify, opts, done) => {\n      fastify.get('/', function (req, reply) {\n        reply.send('I am child 2');\n      });\n      done();\n    }, {\n      prefix: '/child2'\n    });\n    done();\n  }, {\n    prefix: '/parent'\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/parent/child1'\n    }, (err, response, body) => {\n      t.error(err);\n      t.same(body.toString(), 'I am child 1');\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/parent/child2'\n    }, (err, response, body) => {\n      t.error(err);\n      t.same(body.toString(), 'I am child 2');\n    });\n  });\n});","file":"plugin.test.js","skipped":false,"dir":"test"},{"name":"nested plugins awaited","suites":[],"updatePoint":{"line":676,"column":28,"index":17306},"line":676,"code":"test('nested plugins awaited', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  fastify.register(async function wrap(fastify, opts) {\n    await fastify.register(async function child1(fastify, opts) {\n      fastify.get('/', function (req, reply) {\n        reply.send('I am child 1');\n      });\n    }, {\n      prefix: '/child1'\n    });\n    await fastify.register(async function child2(fastify, opts) {\n      fastify.get('/', function (req, reply) {\n        reply.send('I am child 2');\n      });\n    }, {\n      prefix: '/child2'\n    });\n  }, {\n    prefix: '/parent'\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/parent/child1'\n    }, (err, response, body) => {\n      t.error(err);\n      t.same(body.toString(), 'I am child 1');\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/parent/child2'\n    }, (err, response, body) => {\n      t.error(err);\n      t.same(body.toString(), 'I am child 2');\n    });\n  });\n});","file":"plugin.test.js","skipped":false,"dir":"test"},{"name":"plugin metadata - decorators","suites":[],"updatePoint":{"line":718,"column":34,"index":18445},"line":718,"code":"test('plugin metadata - decorators', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  fastify.decorate('plugin1', true);\n  fastify.decorateReply('plugin1', true);\n  fastify.decorateRequest('plugin1', true);\n  plugin[Symbol.for('skip-override')] = true;\n  plugin[Symbol.for('plugin-meta')] = {\n    decorators: {\n      fastify: ['plugin1'],\n      reply: ['plugin1'],\n      request: ['plugin1']\n    }\n  };\n  fastify.register(plugin);\n  fastify.ready(() => {\n    t.ok(fastify.plugin);\n  });\n\n  function plugin(instance, opts, done) {\n    instance.decorate('plugin', true);\n    done();\n  }\n});","file":"plugin.test.js","skipped":false,"dir":"test"},{"name":"plugin metadata - decorators - should throw","suites":[],"updatePoint":{"line":742,"column":49,"index":19051},"line":742,"code":"test('plugin metadata - decorators - should throw', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  fastify.decorate('plugin1', true);\n  fastify.decorateReply('plugin1', true);\n  plugin[Symbol.for('skip-override')] = true;\n  plugin[Symbol.for('plugin-meta')] = {\n    decorators: {\n      fastify: ['plugin1'],\n      reply: ['plugin1'],\n      request: ['plugin1']\n    }\n  };\n  fastify.register(plugin);\n  fastify.ready(err => {\n    t.equal(err.message, \"The decorator 'plugin1' is not present in Request\");\n  });\n\n  function plugin(instance, opts, done) {\n    instance.decorate('plugin', true);\n    done();\n  }\n});","file":"plugin.test.js","skipped":false,"dir":"test"},{"name":"plugin metadata - decorators - should throw with plugin name","suites":[],"updatePoint":{"line":765,"column":66,"index":19684},"line":765,"code":"test('plugin metadata - decorators - should throw with plugin name', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  fastify.decorate('plugin1', true);\n  fastify.decorateReply('plugin1', true);\n  plugin[Symbol.for('skip-override')] = true;\n  plugin[Symbol.for('plugin-meta')] = {\n    name: 'the-plugin',\n    decorators: {\n      fastify: ['plugin1'],\n      reply: ['plugin1'],\n      request: ['plugin1']\n    }\n  };\n  fastify.register(plugin);\n  fastify.ready(err => {\n    t.equal(err.message, \"The decorator 'plugin1' required by 'the-plugin' is not present in Request\");\n  });\n\n  function plugin(instance, opts, done) {\n    instance.decorate('plugin', true);\n    done();\n  }\n});","file":"plugin.test.js","skipped":false,"dir":"test"},{"name":"plugin metadata - dependencies","suites":[],"updatePoint":{"line":789,"column":36,"index":20336},"line":789,"code":"test('plugin metadata - dependencies', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  dependency[Symbol.for('skip-override')] = true;\n  dependency[Symbol.for('plugin-meta')] = {\n    name: 'plugin'\n  };\n  plugin[Symbol.for('skip-override')] = true;\n  plugin[Symbol.for('plugin-meta')] = {\n    dependencies: ['plugin']\n  };\n  fastify.register(dependency);\n  fastify.register(plugin);\n  fastify.ready(() => {\n    t.pass('everything right');\n  });\n\n  function dependency(instance, opts, done) {\n    done();\n  }\n\n  function plugin(instance, opts, done) {\n    done();\n  }\n});","file":"plugin.test.js","skipped":false,"dir":"test"},{"name":"plugin metadata - dependencies (nested)","suites":[],"updatePoint":{"line":814,"column":45,"index":20919},"line":814,"code":"test('plugin metadata - dependencies (nested)', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  dependency[Symbol.for('skip-override')] = true;\n  dependency[Symbol.for('plugin-meta')] = {\n    name: 'plugin'\n  };\n  nested[Symbol.for('skip-override')] = true;\n  nested[Symbol.for('plugin-meta')] = {\n    dependencies: ['plugin']\n  };\n  fastify.register(dependency);\n  fastify.register(plugin);\n  fastify.ready(() => {\n    t.pass('everything right');\n  });\n\n  function dependency(instance, opts, done) {\n    done();\n  }\n\n  function plugin(instance, opts, done) {\n    instance.register(nested);\n    done();\n  }\n\n  function nested(instance, opts, done) {\n    done();\n  }\n});","file":"plugin.test.js","skipped":false,"dir":"test"},{"name":"pluginTimeout","suites":[],"updatePoint":{"line":844,"column":19,"index":21566},"line":844,"code":"test('pluginTimeout', t => {\n  t.plan(5);\n  const fastify = Fastify({\n    pluginTimeout: 10\n  });\n  fastify.register(function (app, opts, done) {// to no call done on purpose\n  });\n  fastify.ready(err => {\n    t.ok(err);\n    t.equal(err.message, \"fastify-plugin: Plugin did not start in time: 'function (app, opts, done) { -- // to no call done on purpose'. You may have forgotten to call 'done' function or to resolve a Promise\");\n    t.equal(err.code, 'FST_ERR_PLUGIN_TIMEOUT');\n    t.ok(err.cause);\n    t.equal(err.cause.code, 'AVV_ERR_READY_TIMEOUT');\n  });\n});","file":"plugin.test.js","skipped":false,"dir":"test"},{"name":"pluginTimeout - named function","suites":[],"updatePoint":{"line":859,"column":36,"index":22149},"line":859,"code":"test('pluginTimeout - named function', t => {\n  t.plan(5);\n  const fastify = Fastify({\n    pluginTimeout: 10\n  });\n  fastify.register(function nameFunction(app, opts, done) {// to no call done on purpose\n  });\n  fastify.ready(err => {\n    t.ok(err);\n    t.equal(err.message, \"fastify-plugin: Plugin did not start in time: 'nameFunction'. You may have forgotten to call 'done' function or to resolve a Promise\");\n    t.equal(err.code, 'FST_ERR_PLUGIN_TIMEOUT');\n    t.ok(err.cause);\n    t.equal(err.cause.code, 'AVV_ERR_READY_TIMEOUT');\n  });\n});","file":"plugin.test.js","skipped":false,"dir":"test"},{"name":"pluginTimeout default","suites":[],"updatePoint":{"line":874,"column":27,"index":22686},"line":874,"code":"test('pluginTimeout default', t => {\n  t.plan(5);\n  const clock = fakeTimer.install({\n    shouldClearNativeTimers: true\n  });\n  const fastify = Fastify();\n  fastify.register(function (app, opts, done) {\n    // default time elapsed without calling done\n    clock.tick(10000);\n  });\n  fastify.ready(err => {\n    t.ok(err);\n    t.equal(err.message, \"fastify-plugin: Plugin did not start in time: 'function (app, opts, done) { -- // default time elapsed without calling done'. You may have forgotten to call 'done' function or to resolve a Promise\");\n    t.equal(err.code, 'FST_ERR_PLUGIN_TIMEOUT');\n    t.ok(err.cause);\n    t.equal(err.cause.code, 'AVV_ERR_READY_TIMEOUT');\n  });\n  t.teardown(clock.uninstall);\n});","file":"plugin.test.js","skipped":false,"dir":"test"},{"name":"plugin metadata - version","suites":[],"updatePoint":{"line":893,"column":31,"index":23402},"line":893,"code":"test('plugin metadata - version', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  plugin[Symbol.for('skip-override')] = true;\n  plugin[Symbol.for('plugin-meta')] = {\n    name: 'plugin',\n    fastify: '2.0.0'\n  };\n  fastify.register(plugin);\n  fastify.ready(() => {\n    t.pass('everything right');\n  });\n\n  function plugin(instance, opts, done) {\n    done();\n  }\n});","file":"plugin.test.js","skipped":false,"dir":"test"},{"name":"plugin metadata - version range","suites":[],"updatePoint":{"line":910,"column":37,"index":23776},"line":910,"code":"test('plugin metadata - version range', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  plugin[Symbol.for('skip-override')] = true;\n  plugin[Symbol.for('plugin-meta')] = {\n    name: 'plugin',\n    fastify: '>=2.0.0'\n  };\n  fastify.register(plugin);\n  fastify.ready(() => {\n    t.pass('everything right');\n  });\n\n  function plugin(instance, opts, done) {\n    done();\n  }\n});","file":"plugin.test.js","skipped":false,"dir":"test"},{"name":"plugin metadata - version not matching requirement","suites":[],"updatePoint":{"line":927,"column":56,"index":24171},"line":927,"code":"test('plugin metadata - version not matching requirement', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  plugin[Symbol.for('skip-override')] = true;\n  plugin[Symbol.for('plugin-meta')] = {\n    name: 'plugin',\n    fastify: '99.0.0'\n  };\n  fastify.register(plugin);\n  fastify.ready(err => {\n    t.ok(err);\n    t.equal(err.code, 'FST_ERR_PLUGIN_VERSION_MISMATCH');\n  });\n\n  function plugin(instance, opts, done) {\n    done();\n  }\n});","file":"plugin.test.js","skipped":false,"dir":"test"},{"name":"plugin metadata - version not matching requirement 2","suites":[],"updatePoint":{"line":945,"column":58,"index":24609},"line":945,"code":"test('plugin metadata - version not matching requirement 2', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  plugin[Symbol.for('skip-override')] = true;\n  plugin[Symbol.for('plugin-meta')] = {\n    name: 'plugin',\n    fastify: '<=3.0.0'\n  };\n  fastify.register(plugin);\n  fastify.ready(err => {\n    t.ok(err);\n    t.equal(err.code, 'FST_ERR_PLUGIN_VERSION_MISMATCH');\n  });\n\n  function plugin(instance, opts, done) {\n    done();\n  }\n});","file":"plugin.test.js","skipped":false,"dir":"test"},{"name":"plugin metadata - version not matching requirement 3","suites":[],"updatePoint":{"line":963,"column":58,"index":25048},"line":963,"code":"test('plugin metadata - version not matching requirement 3', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  plugin[Symbol.for('skip-override')] = true;\n  plugin[Symbol.for('plugin-meta')] = {\n    name: 'plugin',\n    fastify: '>=99.0.0'\n  };\n  fastify.register(plugin);\n  fastify.ready(err => {\n    t.ok(err);\n    t.equal(err.code, 'FST_ERR_PLUGIN_VERSION_MISMATCH');\n  });\n\n  function plugin(instance, opts, done) {\n    done();\n  }\n});","file":"plugin.test.js","skipped":false,"dir":"test"},{"name":"plugin metadata - release candidate","suites":[],"updatePoint":{"line":981,"column":41,"index":25471},"line":981,"code":"test('plugin metadata - release candidate', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  Object.defineProperty(fastify, 'version', {\n    value: '99.0.0-rc.1'\n  });\n  plugin[Symbol.for('plugin-meta')] = {\n    name: 'plugin',\n    fastify: '99.x'\n  };\n  fastify.register(plugin);\n  fastify.ready(err => {\n    t.error(err);\n    t.pass('everything right');\n  });\n\n  function plugin(instance, opts, done) {\n    done();\n  }\n});","file":"plugin.test.js","skipped":false,"dir":"test"},{"name":"fastify-rc loads prior version plugins","suites":[],"updatePoint":{"line":1001,"column":44,"index":25901},"line":1001,"code":"test('fastify-rc loads prior version plugins', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  Object.defineProperty(fastify, 'version', {\n    value: '99.0.0-rc.1'\n  });\n  plugin[Symbol.for('plugin-meta')] = {\n    name: 'plugin',\n    fastify: '^98.1.0'\n  };\n  plugin2[Symbol.for('plugin-meta')] = {\n    name: 'plugin2',\n    fastify: '98.x'\n  };\n  fastify.register(plugin);\n  fastify.ready(err => {\n    t.error(err);\n    t.pass('everything right');\n  });\n\n  function plugin(instance, opts, done) {\n    done();\n  }\n\n  function plugin2(instance, opts, done) {\n    done();\n  }\n});","file":"plugin.test.js","skipped":false,"dir":"test"},{"name":"hasPlugin method exists as a function","suites":[],"updatePoint":{"line":1029,"column":43,"index":26480},"line":1029,"code":"test('hasPlugin method exists as a function', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  t.equal(typeof fastify.hasPlugin, 'function');\n});","file":"plugin.test.js","skipped":false,"dir":"test"},{"name":"hasPlugin returns true if the specified plugin has been registered","suites":[],"updatePoint":{"line":1034,"column":72,"index":26657},"line":1034,"code":"test('hasPlugin returns true if the specified plugin has been registered', async t => {\n  t.plan(4);\n  const fastify = Fastify();\n\n  function pluginA(fastify, opts, done) {\n    t.ok(fastify.hasPlugin('plugin-A'));\n    done();\n  }\n\n  pluginA[Symbol.for('fastify.display-name')] = 'plugin-A';\n  fastify.register(pluginA);\n  fastify.register(function pluginB(fastify, opts, done) {\n    t.ok(fastify.hasPlugin('pluginB'));\n    done();\n  });\n  fastify.register(function (fastify, opts, done) {\n    // one line\n    t.ok(fastify.hasPlugin('function (fastify, opts, done) { -- // one line'));\n    done();\n  });\n  await fastify.ready();\n  t.ok(fastify.hasPlugin('fastify'));\n});","file":"plugin.test.js","skipped":false,"dir":"test"},{"name":"hasPlugin returns false if the specified plugin has not been registered","suites":[],"updatePoint":{"line":1057,"column":77,"index":27332},"line":1057,"code":"test('hasPlugin returns false if the specified plugin has not been registered', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  t.notOk(fastify.hasPlugin('pluginFoo'));\n});","file":"plugin.test.js","skipped":false,"dir":"test"},{"name":"hasPlugin returns false when using encapsulation","suites":[],"updatePoint":{"line":1062,"column":54,"index":27485},"line":1062,"code":"test('hasPlugin returns false when using encapsulation', async t => {\n  t.plan(25);\n  const fastify = Fastify();\n  fastify.register(function pluginA(fastify, opts, done) {\n    t.ok(fastify.hasPlugin('pluginA'));\n    t.notOk(fastify.hasPlugin('pluginAA'));\n    t.notOk(fastify.hasPlugin('pluginAAA'));\n    t.notOk(fastify.hasPlugin('pluginAB'));\n    t.notOk(fastify.hasPlugin('pluginB'));\n    fastify.register(function pluginAA(fastify, opts, done) {\n      t.notOk(fastify.hasPlugin('pluginA'));\n      t.ok(fastify.hasPlugin('pluginAA'));\n      t.notOk(fastify.hasPlugin('pluginAAA'));\n      t.notOk(fastify.hasPlugin('pluginAB'));\n      t.notOk(fastify.hasPlugin('pluginB'));\n      fastify.register(function pluginAAA(fastify, opts, done) {\n        t.notOk(fastify.hasPlugin('pluginA'));\n        t.notOk(fastify.hasPlugin('pluginAA'));\n        t.ok(fastify.hasPlugin('pluginAAA'));\n        t.notOk(fastify.hasPlugin('pluginAB'));\n        t.notOk(fastify.hasPlugin('pluginB'));\n        done();\n      });\n      done();\n    });\n    fastify.register(function pluginAB(fastify, opts, done) {\n      t.notOk(fastify.hasPlugin('pluginA'));\n      t.notOk(fastify.hasPlugin('pluginAA'));\n      t.notOk(fastify.hasPlugin('pluginAAA'));\n      t.ok(fastify.hasPlugin('pluginAB'));\n      t.notOk(fastify.hasPlugin('pluginB'));\n      done();\n    });\n    done();\n  });\n  fastify.register(function pluginB(fastify, opts, done) {\n    t.notOk(fastify.hasPlugin('pluginA'));\n    t.notOk(fastify.hasPlugin('pluginAA'));\n    t.notOk(fastify.hasPlugin('pluginAAA'));\n    t.notOk(fastify.hasPlugin('pluginAB'));\n    t.ok(fastify.hasPlugin('pluginB'));\n    done();\n  });\n  await fastify.ready();\n});","file":"plugin.test.js","skipped":false,"dir":"test"},{"name":"hasPlugin returns true when using no encapsulation","suites":[],"updatePoint":{"line":1107,"column":56,"index":29162},"line":1107,"code":"test('hasPlugin returns true when using no encapsulation', async t => {\n  t.plan(26);\n  const fastify = Fastify();\n  fastify.register(fp((fastify, opts, done) => {\n    t.equal(fastify.pluginName, 'fastify -> plugin-AA');\n    t.ok(fastify.hasPlugin('plugin-AA'));\n    t.notOk(fastify.hasPlugin('plugin-A'));\n    t.notOk(fastify.hasPlugin('plugin-AAA'));\n    t.notOk(fastify.hasPlugin('plugin-AB'));\n    t.notOk(fastify.hasPlugin('plugin-B'));\n    fastify.register(fp((fastify, opts, done) => {\n      t.ok(fastify.hasPlugin('plugin-AA'));\n      t.ok(fastify.hasPlugin('plugin-A'));\n      t.notOk(fastify.hasPlugin('plugin-AAA'));\n      t.notOk(fastify.hasPlugin('plugin-AB'));\n      t.notOk(fastify.hasPlugin('plugin-B'));\n      fastify.register(fp((fastify, opts, done) => {\n        t.ok(fastify.hasPlugin('plugin-AA'));\n        t.ok(fastify.hasPlugin('plugin-A'));\n        t.ok(fastify.hasPlugin('plugin-AAA'));\n        t.notOk(fastify.hasPlugin('plugin-AB'));\n        t.notOk(fastify.hasPlugin('plugin-B'));\n        done();\n      }, {\n        name: 'plugin-AAA'\n      }));\n      done();\n    }, {\n      name: 'plugin-A'\n    }));\n    fastify.register(fp((fastify, opts, done) => {\n      t.ok(fastify.hasPlugin('plugin-AA'));\n      t.ok(fastify.hasPlugin('plugin-A'));\n      t.ok(fastify.hasPlugin('plugin-AAA'));\n      t.ok(fastify.hasPlugin('plugin-AB'));\n      t.notOk(fastify.hasPlugin('plugin-B'));\n      done();\n    }, {\n      name: 'plugin-AB'\n    }));\n    done();\n  }, {\n    name: 'plugin-AA'\n  }));\n  fastify.register(fp((fastify, opts, done) => {\n    t.ok(fastify.hasPlugin('plugin-AA'));\n    t.ok(fastify.hasPlugin('plugin-A'));\n    t.ok(fastify.hasPlugin('plugin-AAA'));\n    t.ok(fastify.hasPlugin('plugin-AB'));\n    t.ok(fastify.hasPlugin('plugin-B'));\n    done();\n  }, {\n    name: 'plugin-B'\n  }));\n  await fastify.ready();\n});","file":"plugin.test.js","skipped":false,"dir":"test"},{"name":"pretty print - static routes","suites":[],"updatePoint":{"line":9,"column":34,"index":131},"line":9,"code":"test('pretty print - static routes', t => {\n  t.plan(2);\n  const fastify = Fastify({\n    exposeHeadRoutes: false\n  });\n  fastify.get('/test', () => {});\n  fastify.get('/test/hello', () => {});\n  fastify.get('/hello/world', () => {});\n  fastify.ready(() => {\n    const tree = fastify.printRoutes();\n    const expected = `└── /\n    ├── test (GET)\n    │   └── /hello (GET)\n    └── hello/world (GET)\n`;\n    t.equal(typeof tree, 'string');\n    t.equal(tree, expected);\n  });\n});","file":"pretty-print.test.js","skipped":false,"dir":"test"},{"name":"pretty print - parametric routes","suites":[],"updatePoint":{"line":28,"column":38,"index":609},"line":28,"code":"test('pretty print - parametric routes', t => {\n  t.plan(2);\n  const fastify = Fastify({\n    exposeHeadRoutes: false\n  });\n  fastify.get('/test', () => {});\n  fastify.get('/test/:hello', () => {});\n  fastify.get('/hello/:world', () => {});\n  fastify.ready(() => {\n    const tree = fastify.printRoutes();\n    const expected = `└── /\n    ├── test (GET)\n    │   └── /:hello (GET)\n    └── hello/:world (GET)\n`;\n    t.equal(typeof tree, 'string');\n    t.equal(tree, expected);\n  });\n});","file":"pretty-print.test.js","skipped":false,"dir":"test"},{"name":"pretty print - mixed parametric routes","suites":[],"updatePoint":{"line":47,"column":44,"index":1097},"line":47,"code":"test('pretty print - mixed parametric routes', t => {\n  t.plan(2);\n  const fastify = Fastify({\n    exposeHeadRoutes: false\n  });\n  fastify.get('/test', () => {});\n  fastify.get('/test/:hello', () => {});\n  fastify.post('/test/:hello', () => {});\n  fastify.get('/test/:hello/world', () => {});\n  fastify.ready(() => {\n    const tree = fastify.printRoutes();\n    const expected = `└── /test (GET)\n    └── /\n        └── :hello (GET)\n            :hello (POST)\n            └── /world (GET)\n`;\n    t.equal(typeof tree, 'string');\n    t.equal(tree, expected);\n  });\n});","file":"pretty-print.test.js","skipped":false,"dir":"test"},{"name":"pretty print - wildcard routes","suites":[],"updatePoint":{"line":68,"column":36,"index":1652},"line":68,"code":"test('pretty print - wildcard routes', t => {\n  t.plan(2);\n  const fastify = Fastify({\n    exposeHeadRoutes: false\n  });\n  fastify.get('/test', () => {});\n  fastify.get('/test/*', () => {});\n  fastify.get('/hello/*', () => {});\n  fastify.ready(() => {\n    const tree = fastify.printRoutes();\n    const expected = `└── /\n    ├── test (GET)\n    │   └── /* (GET)\n    └── hello/* (GET)\n`;\n    t.equal(typeof tree, 'string');\n    t.equal(tree, expected);\n  });\n});","file":"pretty-print.test.js","skipped":false,"dir":"test"},{"name":"pretty print - empty plugins","suites":[],"updatePoint":{"line":87,"column":34,"index":2110},"line":87,"code":"test('pretty print - empty plugins', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  fastify.ready(() => {\n    const tree = fastify.printPlugins();\n    t.equal(typeof tree, 'string');\n    t.match(tree, 'bound root');\n  });\n});","file":"pretty-print.test.js","skipped":false,"dir":"test"},{"name":"pretty print - nested plugins","suites":[],"updatePoint":{"line":96,"column":35,"index":2341},"line":96,"code":"test('pretty print - nested plugins', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.register(async function foo(instance) {\n    instance.register(async function bar() {});\n    instance.register(async function baz() {});\n  });\n  fastify.ready(() => {\n    const tree = fastify.printPlugins();\n    t.equal(typeof tree, 'string');\n    t.match(tree, 'foo');\n    t.match(tree, 'bar');\n    t.match(tree, 'baz');\n  });\n});","file":"pretty-print.test.js","skipped":false,"dir":"test"},{"name":"pretty print - commonPrefix","suites":[],"updatePoint":{"line":111,"column":33,"index":2767},"line":111,"code":"test('pretty print - commonPrefix', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.get('/hello', () => {});\n  fastify.put('/hello', () => {});\n  fastify.get('/helicopter', () => {});\n  fastify.ready(() => {\n    const radixTree = fastify.printRoutes();\n    const flatTree = fastify.printRoutes({\n      commonPrefix: false\n    });\n    const radixExpected = `└── /\n    ├── hel\n    │   ├── lo (GET)\n    │   │   lo (HEAD)\n    │   └── icopter (GET)\n    │       icopter (HEAD)\n    └── hello (PUT)\n`;\n    const flatExpected = `└── / (-)\n    ├── helicopter (GET, HEAD)\n    └── hello (GET, HEAD, PUT)\n`;\n    t.equal(typeof radixTree, 'string');\n    t.equal(typeof flatTree, 'string');\n    t.equal(radixTree, radixExpected);\n    t.equal(flatTree, flatExpected);\n  });\n});","file":"pretty-print.test.js","skipped":false,"dir":"test"},{"name":"pretty print - includeMeta, includeHooks","suites":[],"updatePoint":{"line":140,"column":46,"index":3553},"line":140,"code":"test('pretty print - includeMeta, includeHooks', t => {\n  t.plan(6);\n  const fastify = Fastify();\n\n  const onTimeout = () => {};\n\n  fastify.get('/hello', () => {});\n  fastify.put('/hello', () => {});\n  fastify.get('/helicopter', () => {});\n  fastify.addHook('onRequest', () => {});\n  fastify.addHook('onTimeout', onTimeout);\n  fastify.ready(() => {\n    const radixTree = fastify.printRoutes({\n      includeHooks: true,\n      includeMeta: ['errorHandler']\n    });\n    const flatTree = fastify.printRoutes({\n      commonPrefix: false,\n      includeHooks: true,\n      includeMeta: ['errorHandler']\n    });\n    const hooksOnly = fastify.printRoutes({\n      commonPrefix: false,\n      includeHooks: true\n    });\n    const radixExpected = `└── /\n    ├── hel\n    │   ├── lo (GET)\n    │   │   • (onTimeout) [\"onTimeout()\"]\n    │   │   • (onRequest) [\"anonymous()\"]\n    │   │   • (errorHandler) \"defaultErrorHandler()\"\n    │   │   lo (HEAD)\n    │   │   • (onTimeout) [\"onTimeout()\"]\n    │   │   • (onRequest) [\"anonymous()\"]\n    │   │   • (onSend) [\"headRouteOnSendHandler()\"]\n    │   │   • (errorHandler) \"defaultErrorHandler()\"\n    │   └── icopter (GET)\n    │       • (onTimeout) [\"onTimeout()\"]\n    │       • (onRequest) [\"anonymous()\"]\n    │       • (errorHandler) \"defaultErrorHandler()\"\n    │       icopter (HEAD)\n    │       • (onTimeout) [\"onTimeout()\"]\n    │       • (onRequest) [\"anonymous()\"]\n    │       • (onSend) [\"headRouteOnSendHandler()\"]\n    │       • (errorHandler) \"defaultErrorHandler()\"\n    └── hello (PUT)\n        • (onTimeout) [\"onTimeout()\"]\n        • (onRequest) [\"anonymous()\"]\n        • (errorHandler) \"defaultErrorHandler()\"\n`;\n    const flatExpected = `└── / (-)\n    ├── helicopter (GET, HEAD)\n    │   • (onTimeout) [\"onTimeout()\"]\n    │   • (onRequest) [\"anonymous()\"]\n    │   • (errorHandler) \"defaultErrorHandler()\"\n    └── hello (GET, HEAD, PUT)\n        • (onTimeout) [\"onTimeout()\"]\n        • (onRequest) [\"anonymous()\"]\n        • (errorHandler) \"defaultErrorHandler()\"\n`;\n    const hooksOnlyExpected = `└── / (-)\n    ├── helicopter (GET, HEAD)\n    │   • (onTimeout) [\"onTimeout()\"]\n    │   • (onRequest) [\"anonymous()\"]\n    └── hello (GET, HEAD, PUT)\n        • (onTimeout) [\"onTimeout()\"]\n        • (onRequest) [\"anonymous()\"]\n`;\n    t.equal(typeof radixTree, 'string');\n    t.equal(typeof flatTree, 'string');\n    t.equal(typeof hooksOnlyExpected, 'string');\n    t.equal(radixTree, radixExpected);\n    t.equal(flatTree, flatExpected);\n    t.equal(hooksOnly, hooksOnlyExpected);\n  });\n});","file":"pretty-print.test.js","skipped":false,"dir":"test"},{"name":"shorthand - sget return promise es6 get","suites":[],"updatePoint":{"line":76,"column":47,"index":1471},"line":76,"code":"  test('shorthand - sget return promise es6 get', t => {\n    t.plan(4);\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/return'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n  });","file":"promises.test.js","skipped":false,"dir":"test"},{"name":"shorthand - sget promise es6 get return error","suites":[],"updatePoint":{"line":90,"column":53,"index":1900},"line":90,"code":"  test('shorthand - sget promise es6 get return error', t => {\n    t.plan(2);\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/return-error'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 500);\n    });\n  });","file":"promises.test.js","skipped":false,"dir":"test"},{"name":"sget promise double send","suites":[],"updatePoint":{"line":100,"column":32,"index":2179},"line":100,"code":"  test('sget promise double send', t => {\n    t.plan(3);\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/double'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.same(JSON.parse(body), {\n        hello: '42'\n      });\n    });\n  });","file":"promises.test.js","skipped":false,"dir":"test"},{"name":"thenable","suites":[],"updatePoint":{"line":113,"column":16,"index":2499},"line":113,"code":"  test('thenable', t => {\n    t.plan(4);\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/thenable'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n  });","file":"promises.test.js","skipped":false,"dir":"test"},{"name":"thenable (error)","suites":[],"updatePoint":{"line":127,"column":24,"index":2901},"line":127,"code":"  test('thenable (error)', t => {\n    t.plan(2);\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/thenable-error'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 500);\n    });\n  });","file":"promises.test.js","skipped":false,"dir":"test"},{"name":"return-reply","suites":[],"updatePoint":{"line":137,"column":20,"index":3170},"line":137,"code":"  test('return-reply', t => {\n    t.plan(4);\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/return-reply'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n  });","file":"promises.test.js","skipped":false,"dir":"test"},{"name":"can be created - propfind","suites":[],"updatePoint":{"line":11,"column":31,"index":174},"line":11,"code":"test('can be created - propfind', t => {\n  t.plan(1);\n\n  try {\n    fastify.route({\n      method: 'PROPFIND',\n      url: '*',\n      handler: function (req, reply) {\n        return reply.code(207).send(`<?xml version=\"1.0\" encoding=\"utf-8\"?>\n            <D:multistatus xmlns:D=\"DAV:\">\n              <D:response xmlns:lp1=\"DAV:\">\n                <D:href>/</D:href>\n                <D:propstat>\n                  <D:prop>\n                    <lp1:resourcetype>\n                      <D:collection/>\n                    </lp1:resourcetype>\n                    <lp1:creationdate>2022-04-13T12:35:30Z</lp1:creationdate>\n                    <lp1:getlastmodified>Wed, 13 Apr 2022 12:35:30 GMT</lp1:getlastmodified>\n                    <lp1:getetag>\"e0-5dc8869b53ef1\"</lp1:getetag>\n                    <D:supportedlock>\n                      <D:lockentry>\n                        <D:lockscope>\n                          <D:exclusive/>\n                        </D:lockscope>\n                        <D:locktype>\n                          <D:write/>\n                        </D:locktype>\n                      </D:lockentry>\n                      <D:lockentry>\n                        <D:lockscope>\n                          <D:shared/>\n                        </D:lockscope>\n                        <D:locktype>\n                          <D:write/>\n                        </D:locktype>\n                      </D:lockentry>\n                    </D:supportedlock>\n                    <D:lockdiscovery/>\n                    <D:getcontenttype>httpd/unix-directory</D:getcontenttype>\n                  </D:prop>\n                  <D:status>HTTP/1.1 200 OK</D:status>\n                </D:propstat>\n              </D:response>\n            </D:multistatus>`);\n      }\n    });\n    t.pass();\n  } catch (e) {\n    t.fail();\n  }\n});","file":"propfind.test.js","skipped":false,"dir":"test"},{"name":"request - propfind","suites":[],"updatePoint":{"line":70,"column":26,"index":2082},"line":70,"code":"  test('request - propfind', t => {\n    t.plan(3);\n    sget({\n      url: `http://localhost:${fastify.server.address().port}/`,\n      method: 'PROPFIND'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 207);\n      t.equal(response.headers['content-length'], '' + body.length);\n    });\n  });","file":"propfind.test.js","skipped":false,"dir":"test"},{"name":"request with other path - propfind","suites":[],"updatePoint":{"line":81,"column":42,"index":2428},"line":81,"code":"  test('request with other path - propfind', t => {\n    t.plan(3);\n    sget({\n      url: `http://localhost:${fastify.server.address().port}/test`,\n      method: 'PROPFIND'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 207);\n      t.equal(response.headers['content-length'], '' + body.length);\n    });\n  });","file":"propfind.test.js","skipped":false,"dir":"test"},{"name":"request with body - propfind","suites":[],"updatePoint":{"line":92,"column":36,"index":2772},"line":92,"code":"  test('request with body - propfind', t => {\n    t.plan(3);\n    sget({\n      url: `http://localhost:${fastify.server.address().port}/test`,\n      body: `<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n        <D:propfind xmlns:D=\"DAV:\">\n          <D:prop xmlns:R=\"http://ns.example.com/boxschema/\">\n            <R:bigbox/> <R:author/> <R:DingALing/> <R:Random/>\n          </D:prop>\n        </D:propfind>\n      `,\n      method: 'PROPFIND'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 207);\n      t.equal(response.headers['content-length'], '' + body.length);\n    });\n  });","file":"propfind.test.js","skipped":false,"dir":"test"},{"name":"shorthand - proppatch","suites":[],"updatePoint":{"line":11,"column":27,"index":170},"line":11,"code":"test('shorthand - proppatch', t => {\n  t.plan(1);\n\n  try {\n    fastify.route({\n      method: 'PROPPATCH',\n      url: '*',\n      handler: function (req, reply) {\n        reply.code(207).send(`<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n            <D:multistatus xmlns:D=\"DAV:\"\n              xmlns:Z=\"http://ns.example.com/standards/z39.50/\">\n              <D:response>\n                <D:href>http://www.example.com/bar.html</D:href>\n                <D:propstat>\n                  <D:prop>\n                    <Z:Authors/>\n                  </D:prop>\n                  <D:status>HTTP/1.1 424 Failed Dependency</D:status>\n                </D:propstat>\n                <D:propstat>\n                  <D:prop>\n                    <Z:Copyright-Owner/>\n                  </D:prop>\n                  <D:status>HTTP/1.1 409 Conflict</D:status>\n                </D:propstat>\n                <D:responsedescription> Copyright Owner cannot be deleted or altered.</D:responsedescription>\n              </D:response>\n            </D:multistatus>`);\n      }\n    });\n    t.pass();\n  } catch (e) {\n    t.fail();\n  }\n});","file":"proppatch.test.js","skipped":false,"dir":"test"},{"name":"request - proppatch","suites":[],"updatePoint":{"line":53,"column":27,"index":1374},"line":53,"code":"  test('request - proppatch', t => {\n    t.plan(3);\n    sget({\n      url: `http://localhost:${fastify.server.address().port}/test/a.txt`,\n      body: `<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n        <D:propertyupdate xmlns:D=\"DAV:\"\n          xmlns:Z=\"http://ns.example.com/standards/z39.50/\">\n          <D:set>\n            <D:prop>\n              <Z:Authors>\n                <Z:Author>Jim Whitehead</Z:Author>\n                <Z:Author>Roy Fielding</Z:Author>\n              </Z:Authors>\n            </D:prop>\n          </D:set>\n          <D:remove>\n            <D:prop>\n              <Z:Copyright-Owner/>\n            </D:prop>\n          </D:remove>\n        </D:propertyupdate>`,\n      method: 'PROPPATCH'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 207);\n      t.equal(response.headers['content-length'], '' + body.length);\n    });\n  });","file":"proppatch.test.js","skipped":false,"dir":"test"},{"name":"proto-poisoning error","suites":[],"updatePoint":{"line":10,"column":27,"index":167},"line":10,"code":"test('proto-poisoning error', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  fastify.post('/', (request, reply) => {\n    t.fail('handler should not be called');\n  });\n  fastify.listen({\n    port: 0\n  }, function (err) {\n    t.error(err);\n    sget({\n      method: 'POST',\n      url: 'http://localhost:' + fastify.server.address().port,\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: '{ \"__proto__\": { \"a\": 42 } }'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 400);\n    });\n  });\n});","file":"proto-poisoning.test.js","skipped":false,"dir":"test"},{"name":"proto-poisoning remove","suites":[],"updatePoint":{"line":34,"column":28,"index":775},"line":34,"code":"test('proto-poisoning remove', t => {\n  t.plan(4);\n  const fastify = Fastify({\n    onProtoPoisoning: 'remove'\n  });\n  t.teardown(fastify.close.bind(fastify));\n  fastify.post('/', (request, reply) => {\n    t.equal(undefined, Object.assign({}, request.body).a);\n    reply.send({\n      ok: true\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, function (err) {\n    t.error(err);\n    sget({\n      method: 'POST',\n      url: 'http://localhost:' + fastify.server.address().port,\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: '{ \"__proto__\": { \"a\": 42 }, \"b\": 42 }'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n    });\n  });\n});","file":"proto-poisoning.test.js","skipped":false,"dir":"test"},{"name":"proto-poisoning ignore","suites":[],"updatePoint":{"line":63,"column":28,"index":1483},"line":63,"code":"test('proto-poisoning ignore', t => {\n  t.plan(4);\n  const fastify = Fastify({\n    onProtoPoisoning: 'ignore'\n  });\n  t.teardown(fastify.close.bind(fastify));\n  fastify.post('/', (request, reply) => {\n    t.equal(42, Object.assign({}, request.body).a);\n    reply.send({\n      ok: true\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, function (err) {\n    t.error(err);\n    sget({\n      method: 'POST',\n      url: 'http://localhost:' + fastify.server.address().port,\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: '{ \"__proto__\": { \"a\": 42 }, \"b\": 42 }'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n    });\n  });\n});","file":"proto-poisoning.test.js","skipped":false,"dir":"test"},{"name":"constructor-poisoning error (default in v3)","suites":[],"updatePoint":{"line":92,"column":49,"index":2205},"line":92,"code":"test('constructor-poisoning error (default in v3)', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  fastify.post('/', (request, reply) => {\n    reply.send('ok');\n  });\n  fastify.listen({\n    port: 0\n  }, function (err) {\n    t.error(err);\n    sget({\n      method: 'POST',\n      url: 'http://localhost:' + fastify.server.address().port,\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: '{ \"constructor\": { \"prototype\": { \"foo\": \"bar\" } } }'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 400);\n    });\n  });\n});","file":"proto-poisoning.test.js","skipped":false,"dir":"test"},{"name":"constructor-poisoning error","suites":[],"updatePoint":{"line":116,"column":33,"index":2820},"line":116,"code":"test('constructor-poisoning error', t => {\n  t.plan(3);\n  const fastify = Fastify({\n    onConstructorPoisoning: 'error'\n  });\n  t.teardown(fastify.close.bind(fastify));\n  fastify.post('/', (request, reply) => {\n    t.fail('handler should not be called');\n  });\n  fastify.listen({\n    port: 0\n  }, function (err) {\n    t.error(err);\n    sget({\n      method: 'POST',\n      url: 'http://localhost:' + fastify.server.address().port,\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: '{ \"constructor\": { \"prototype\": { \"foo\": \"bar\" } } }'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 400);\n    });\n  });\n});","file":"proto-poisoning.test.js","skipped":false,"dir":"test"},{"name":"constructor-poisoning remove","suites":[],"updatePoint":{"line":142,"column":34,"index":3499},"line":142,"code":"test('constructor-poisoning remove', t => {\n  t.plan(4);\n  const fastify = Fastify({\n    onConstructorPoisoning: 'remove'\n  });\n  t.teardown(fastify.close.bind(fastify));\n  fastify.post('/', (request, reply) => {\n    t.equal(undefined, Object.assign({}, request.body).foo);\n    reply.send({\n      ok: true\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, function (err) {\n    t.error(err);\n    sget({\n      method: 'POST',\n      url: 'http://localhost:' + fastify.server.address().port,\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: '{ \"constructor\": { \"prototype\": { \"foo\": \"bar\" } } }'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n    });\n  });\n});","file":"proto-poisoning.test.js","skipped":false,"dir":"test"},{"name":"register","suites":[],"updatePoint":{"line":12,"column":14,"index":193},"line":12,"code":"test('register', t => {\n  t.plan(17);\n  const fastify = Fastify();\n  fastify.register(function (instance, opts, done) {\n    t.not(instance, fastify);\n    t.ok(fastify.isPrototypeOf(instance));\n    t.equal(typeof opts, 'object');\n    t.equal(typeof done, 'function');\n    instance.get('/first', function (req, reply) {\n      reply.send({\n        hello: 'world'\n      });\n    });\n    done();\n  });\n  fastify.register(function (instance, opts, done) {\n    t.not(instance, fastify);\n    t.ok(fastify.isPrototypeOf(instance));\n    t.equal(typeof opts, 'object');\n    t.equal(typeof done, 'function');\n    instance.get('/second', function (req, reply) {\n      reply.send({\n        hello: 'world'\n      });\n    });\n    done();\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    makeRequest('first');\n    makeRequest('second');\n  });\n\n  function makeRequest(path) {\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/' + path\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n  }\n});","file":"register.test.js","skipped":false,"dir":"test"},{"name":"internal route declaration should pass the error generated by the register to the done handler / 1","suites":[],"updatePoint":{"line":64,"column":104,"index":1571},"line":64,"code":"test('internal route declaration should pass the error generated by the register to the done handler / 1', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  fastify.register((instance, opts, done) => {\n    done(new Error('kaboom'));\n  });\n  fastify.get('/', (req, reply) => {\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    fastify.close();\n    t.equal(err.message, 'kaboom');\n  });\n});","file":"register.test.js","skipped":false,"dir":"test"},{"name":"internal route declaration should pass the error generated by the register to the done handler / 2","suites":[],"updatePoint":{"line":82,"column":104,"index":2012},"line":82,"code":"test('internal route declaration should pass the error generated by the register to the done handler / 2', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  fastify.register((instance, opts, done) => {\n    done(new Error('kaboom'));\n  });\n  fastify.get('/', (req, reply) => {\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.after(err => {\n    t.equal(err.message, 'kaboom');\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    fastify.close();\n    t.error(err);\n  });\n});","file":"register.test.js","skipped":false,"dir":"test"},{"name":"awaitable register and after","suites":[],"updatePoint":{"line":103,"column":34,"index":2432},"line":103,"code":"test('awaitable register and after', async t => {\n  const fastify = Fastify();\n  let first = false;\n  let second = false;\n  let third = false;\n  await fastify.register(async (instance, opts, done) => {\n    first = true;\n  });\n  t.equal(first, true);\n  fastify.register(async (instance, opts, done) => {\n    second = true;\n  });\n  await fastify.after();\n  t.equal(second, true);\n  fastify.register(async (instance, opts, done) => {\n    third = true;\n  });\n  await fastify.ready();\n  t.equal(third, true);\n});","file":"register.test.js","skipped":false,"dir":"test"},{"name":"awaitable register error handling","suites":[],"updatePoint":{"line":130,"column":39,"index":3060},"line":130,"code":"test('awaitable register error handling', async t => {\n  const fastify = Fastify();\n  const e = new Error('kaboom');\n  await thenableRejects(t, fastify.register(async (instance, opts) => {\n    throw e;\n  }), e);\n  fastify.register(async (instance, opts) => {\n    t.fail('should not be executed');\n  });\n  await t.rejects(fastify.after(), e);\n  fastify.register(async (instance, opts, done) => {\n    t.fail('should not be executed');\n  });\n  await thenableRejects(t, fastify.ready(), e);\n});","file":"register.test.js","skipped":false,"dir":"test"},{"name":"awaitable after error handling","suites":[],"updatePoint":{"line":145,"column":36,"index":3548},"line":145,"code":"test('awaitable after error handling', async t => {\n  const fastify = Fastify();\n  const e = new Error('kaboom');\n  fastify.register(async (instance, opts) => {\n    throw e;\n  });\n  fastify.register(async (instance, opts) => {\n    t.fail('should not be executed');\n  });\n  await t.rejects(fastify.after(), e);\n  fastify.register(async (instance, opts, done) => {\n    t.fail('should not be executed');\n  });\n  await t.rejects(fastify.ready());\n});","file":"register.test.js","skipped":false,"dir":"test"},{"name":"chainable register","suites":[],"updatePoint":{"line":160,"column":24,"index":3983},"line":160,"code":"test('chainable register', async t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.register(async () => {\n    t.pass('first loaded');\n  }).register(async () => {\n    t.pass('second loaded');\n  }).register(async () => {\n    t.pass('third loaded');\n  });\n  await fastify.ready();\n});","file":"register.test.js","skipped":false,"dir":"test"},{"name":"code should handle null/undefined/float","suites":[],"updatePoint":{"line":9,"column":45,"index":142},"line":9,"code":"test('code should handle null/undefined/float', t => {\n  t.plan(8);\n  const fastify = Fastify();\n  fastify.get('/null', function (request, reply) {\n    reply.status(null).send();\n  });\n  fastify.get('/undefined', function (request, reply) {\n    reply.status(undefined).send();\n  });\n  fastify.get('/404.5', function (request, reply) {\n    reply.status(404.5).send();\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/null'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 500);\n    t.same(res.json(), {\n      statusCode: 500,\n      code: 'FST_ERR_BAD_STATUS_CODE',\n      error: 'Internal Server Error',\n      message: 'Called reply with an invalid status code: null'\n    });\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/undefined'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 500);\n    t.same(res.json(), {\n      statusCode: 500,\n      code: 'FST_ERR_BAD_STATUS_CODE',\n      error: 'Internal Server Error',\n      message: 'Called reply with an invalid status code: undefined'\n    });\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/404.5'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 404);\n  });\n});","file":"reply-code.test.js","skipped":false,"dir":"test"},{"name":"preHandler hook error handling with external code","suites":[],"updatePoint":{"line":48,"column":55,"index":1086},"line":48,"code":"test('preHandler hook error handling with external code', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  const err = new Error('winter is coming');\n  fastify.addHook('preHandler', (req, reply, done) => {\n    reply.code(400);\n    done(err);\n  });\n  fastify.get('/', () => {});\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 400);\n    t.same({\n      error: statusCodes['400'],\n      message: err.message,\n      statusCode: 400\n    }, JSON.parse(res.payload));\n  });\n});","file":"reply-error.test.js","skipped":false,"dir":"test"},{"name":"onRequest hook error handling with external done","suites":[],"updatePoint":{"line":70,"column":54,"index":1632},"line":70,"code":"test('onRequest hook error handling with external done', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  const err = new Error('winter is coming');\n  fastify.addHook('onRequest', (req, reply, done) => {\n    reply.code(400);\n    done(err);\n  });\n  fastify.get('/', () => {});\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 400);\n    t.same({\n      error: statusCodes['400'],\n      message: err.message,\n      statusCode: 400\n    }, JSON.parse(res.payload));\n  });\n});","file":"reply-error.test.js","skipped":false,"dir":"test"},{"name":"Should reply 400 on client error","suites":[],"updatePoint":{"line":92,"column":38,"index":2161},"line":92,"code":"test('Should reply 400 on client error', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    const client = net.connect(fastify.server.address().port);\n    client.end('oooops!');\n    let chunks = '';\n    client.on('data', chunk => {\n      chunks += chunk;\n    });\n    client.once('end', () => {\n      const body = JSON.stringify({\n        error: 'Bad Request',\n        message: 'Client Error',\n        statusCode: 400\n      });\n      t.equal(`HTTP/1.1 400 Bad Request\\r\\nContent-Length: ${body.length}\\r\\nContent-Type: application/json\\r\\n\\r\\n${body}`, chunks);\n      fastify.close();\n    });\n  });\n});","file":"reply-error.test.js","skipped":false,"dir":"test"},{"name":"Should set the response from client error handler","suites":[],"updatePoint":{"line":116,"column":55,"index":2845},"line":116,"code":"test('Should set the response from client error handler', t => {\n  t.plan(5);\n  const responseBody = JSON.stringify({\n    error: 'Ended Request',\n    message: 'Serious Client Error',\n    statusCode: 400\n  });\n  const response = `HTTP/1.1 400 Bad Request\\r\\nContent-Length: ${responseBody.length}\\r\\nContent-Type: application/json; charset=utf-8\\r\\n\\r\\n${responseBody}`;\n\n  function clientErrorHandler(err, socket) {\n    t.type(err, Error);\n    this.log.warn({\n      err\n    }, 'Handled client error');\n    socket.end(response);\n  }\n\n  const logStream = split(JSON.parse);\n  const fastify = Fastify({\n    clientErrorHandler,\n    logger: {\n      stream: logStream,\n      level: 'warn'\n    }\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    const client = net.connect(fastify.server.address().port);\n    client.end('oooops!');\n    let chunks = '';\n    client.on('data', chunk => {\n      chunks += chunk;\n    });\n    client.once('end', () => {\n      t.equal(response, chunks);\n      fastify.close();\n    });\n  });\n  logStream.once('data', line => {\n    t.equal('Handled client error', line.msg);\n    t.equal(40, line.level, 'Log level is not warn');\n  });\n});","file":"reply-error.test.js","skipped":false,"dir":"test"},{"name":"Error instance sets HTTP status code","suites":[],"updatePoint":{"line":161,"column":42,"index":4012},"line":161,"code":"test('Error instance sets HTTP status code', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  const err = new Error('winter is coming');\n  err.statusCode = 418;\n  fastify.get('/', () => {\n    return Promise.reject(err);\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 418);\n    t.same({\n      error: statusCodes['418'],\n      message: err.message,\n      statusCode: 418\n    }, JSON.parse(res.payload));\n  });\n});","file":"reply-error.test.js","skipped":false,"dir":"test"},{"name":"Error status code below 400 defaults to 500","suites":[],"updatePoint":{"line":182,"column":49,"index":4514},"line":182,"code":"test('Error status code below 400 defaults to 500', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  const err = new Error('winter is coming');\n  err.statusCode = 399;\n  fastify.get('/', () => {\n    return Promise.reject(err);\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 500);\n    t.same({\n      error: statusCodes['500'],\n      message: err.message,\n      statusCode: 500\n    }, JSON.parse(res.payload));\n  });\n});","file":"reply-error.test.js","skipped":false,"dir":"test"},{"name":"Error.status property support","suites":[],"updatePoint":{"line":203,"column":35,"index":5002},"line":203,"code":"test('Error.status property support', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  const err = new Error('winter is coming');\n  err.status = 418;\n  fastify.get('/', () => {\n    return Promise.reject(err);\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 418);\n    t.same({\n      error: statusCodes['418'],\n      message: err.message,\n      statusCode: 418\n    }, JSON.parse(res.payload));\n  });\n});","file":"reply-error.test.js","skipped":false,"dir":"test"},{"name":"Support rejection with values that are not Error instances","suites":[],"updatePoint":{"line":224,"column":64,"index":5515},"line":224,"code":"test('Support rejection with values that are not Error instances', t => {\n  const objs = [0, '', [], {}, null, undefined, 123, 'abc', new RegExp(), new Date(), new Uint8Array()];\n  t.plan(objs.length);\n\n  for (const nonErr of objs) {\n    t.test('Type: ' + typeof nonErr, t => {\n      t.plan(4);\n      const fastify = Fastify();\n      fastify.get('/', () => {\n        return Promise.reject(nonErr);\n      });\n      fastify.setErrorHandler((err, request, reply) => {\n        if (typeof err === 'object') {\n          t.same(err, nonErr);\n        } else {\n          t.equal(err, nonErr);\n        }\n\n        reply.code(500).send('error');\n      });\n      fastify.inject({\n        method: 'GET',\n        url: '/'\n      }, (error, res) => {\n        t.error(error);\n        t.equal(res.statusCode, 500);\n        t.equal(res.payload, 'error');\n      });\n    });\n  }\n});","file":"reply-error.test.js","skipped":false,"dir":"test"},{"name":"invalid schema - ajv","suites":[],"updatePoint":{"line":255,"column":26,"index":6338},"line":255,"code":"test('invalid schema - ajv', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.get('/', {\n    schema: {\n      querystring: {\n        type: 'object',\n        properties: {\n          id: {\n            type: 'number'\n          }\n        }\n      }\n    }\n  }, (req, reply) => {\n    t.fail('we should not be here');\n  });\n  fastify.setErrorHandler((err, request, reply) => {\n    t.ok(Array.isArray(err.validation));\n    reply.code(400).send('error');\n  });\n  fastify.inject({\n    url: '/?id=abc',\n    method: 'GET'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 400);\n    t.equal(res.payload, 'error');\n  });\n});","file":"reply-error.test.js","skipped":false,"dir":"test"},{"name":"should set the status code and the headers from the error object (from route handler) (no custom error handler)","suites":[],"updatePoint":{"line":285,"column":117,"index":7065},"line":285,"code":"test('should set the status code and the headers from the error object (from route handler) (no custom error handler)', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.get('/', (req, reply) => {\n    const error = new Error('kaboom');\n    error.headers = {\n      hello: 'world'\n    };\n    error.statusCode = 400;\n    reply.send(error);\n  });\n  fastify.inject({\n    url: '/',\n    method: 'GET'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 400);\n    t.equal(res.headers.hello, 'world');\n    t.same(JSON.parse(res.payload), {\n      error: 'Bad Request',\n      message: 'kaboom',\n      statusCode: 400\n    });\n  });\n});","file":"reply-error.test.js","skipped":false,"dir":"test"},{"name":"should set the status code and the headers from the error object (from custom error handler)","suites":[],"updatePoint":{"line":310,"column":98,"index":7694},"line":310,"code":"test('should set the status code and the headers from the error object (from custom error handler)', t => {\n  t.plan(6);\n  const fastify = Fastify();\n  fastify.get('/', (req, reply) => {\n    const error = new Error('ouch');\n    error.statusCode = 401;\n    reply.send(error);\n  });\n  fastify.setErrorHandler((err, request, reply) => {\n    t.equal(err.message, 'ouch');\n    t.equal(reply.raw.statusCode, 200);\n    const error = new Error('kaboom');\n    error.headers = {\n      hello: 'world'\n    };\n    error.statusCode = 400;\n    reply.send(error);\n  });\n  fastify.inject({\n    url: '/',\n    method: 'GET'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 400);\n    t.equal(res.headers.hello, 'world');\n    t.same(JSON.parse(res.payload), {\n      error: 'Bad Request',\n      message: 'kaboom',\n      statusCode: 400\n    });\n  });\n}); // Issue 595 https://github.com/fastify/fastify/issues/595","file":"reply-error.test.js","skipped":false,"dir":"test"},{"name":"'*' should throw an error due to serializer can not handle the payload type","suites":[],"updatePoint":{"line":343,"column":83,"index":8589},"line":343,"code":"test('\\'*\\' should throw an error due to serializer can not handle the payload type', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.get('/', (req, reply) => {\n    reply.type('text/html');\n\n    try {\n      reply.send({});\n    } catch (err) {\n      t.type(err, TypeError);\n      t.equal(err.code, 'FST_ERR_REP_INVALID_PAYLOAD_TYPE');\n      t.equal(err.message, \"Attempted to send payload of invalid type 'object'. Expected a string or Buffer.\");\n    }\n  });\n  fastify.inject({\n    url: '/',\n    method: 'GET'\n  }, (e, res) => {\n    t.fail('should not be called');\n  });\n});","file":"reply-error.test.js","skipped":false,"dir":"test"},{"name":"should throw an error if the custom serializer does not serialize the payload to a valid type","suites":[],"updatePoint":{"line":364,"column":99,"index":9190},"line":364,"code":"test('should throw an error if the custom serializer does not serialize the payload to a valid type', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.get('/', (req, reply) => {\n    try {\n      reply.type('text/html').serializer(payload => payload).send({});\n    } catch (err) {\n      t.type(err, TypeError);\n      t.equal(err.code, 'FST_ERR_REP_INVALID_PAYLOAD_TYPE');\n      t.equal(err.message, \"Attempted to send payload of invalid type 'object'. Expected a string or Buffer.\");\n    }\n  });\n  fastify.inject({\n    url: '/',\n    method: 'GET'\n  }, (e, res) => {\n    t.fail('should not be called');\n  });\n});","file":"reply-error.test.js","skipped":false,"dir":"test"},{"name":"should not set headers or status code for custom error handler","suites":[],"updatePoint":{"line":383,"column":68,"index":9779},"line":383,"code":"test('should not set headers or status code for custom error handler', t => {\n  t.plan(7);\n  const fastify = Fastify();\n  fastify.get('/', function (req, reply) {\n    const err = new Error('kaboom');\n    err.headers = {\n      'fake-random-header': 'abc'\n    };\n    reply.send(err);\n  });\n  fastify.setErrorHandler(async (err, req, res) => {\n    t.equal(res.statusCode, 200);\n    t.equal('fake-random-header' in res.headers, false);\n    return res.code(500).send(err.message);\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 500);\n    t.equal('fake-random-header' in res.headers, false);\n    t.equal(res.headers['content-length'], 'kaboom'.length.toString());\n    t.same(res.payload, 'kaboom');\n  });\n});","file":"reply-error.test.js","skipped":false,"dir":"test"},{"name":"error thrown by custom error handler routes to default error handler","suites":[],"updatePoint":{"line":409,"column":74,"index":10565},"line":409,"code":"test('error thrown by custom error handler routes to default error handler', t => {\n  t.plan(6);\n  const fastify = Fastify();\n  const error = new Error('kaboom');\n  error.headers = {\n    'fake-random-header': 'abc'\n  };\n  fastify.get('/', function (req, reply) {\n    reply.send(error);\n  });\n  const newError = new Error('kabong');\n  fastify.setErrorHandler(async (err, req, res) => {\n    t.equal(res.statusCode, 200);\n    t.equal('fake-random-header' in res.headers, false);\n    t.same(err.headers, error.headers);\n    return res.send(newError);\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 500);\n    t.same(JSON.parse(res.payload), {\n      error: statusCodes['500'],\n      message: newError.message,\n      statusCode: 500\n    });\n  });\n}); // Issue 2078 https://github.com/fastify/fastify/issues/2078","file":"reply-error.test.js","skipped":false,"dir":"test"},{"name":"should throw error if error code is ","suites":[],"updatePoint":{"line":444,"column":58,"index":11687},"line":444,"code":"  test(`should throw error if error code is ${invalidCode}`, t => {\n    t.plan(2);\n    const fastify = Fastify();\n    fastify.get('/', (request, reply) => {\n      try {\n        return reply.code(invalidCode).send('You should not read this');\n      } catch (err) {\n        t.equal(err.code, 'FST_ERR_BAD_STATUS_CODE');\n        t.equal(err.message, 'Called reply with an invalid status code: ' + invalidCode);\n      }\n    });\n    fastify.inject({\n      url: '/',\n      method: 'GET'\n    }, (e, res) => {\n      t.fail('should not be called');\n    });\n  });","file":"reply-error.test.js","skipped":false,"dir":"test"},{"name":"error handler is triggered when a string is thrown from sync handler","suites":[],"updatePoint":{"line":463,"column":74,"index":12261},"line":463,"code":"test('error handler is triggered when a string is thrown from sync handler', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  const throwable = 'test';\n  const payload = 'error';\n  fastify.get('/', function (req, reply) {\n    // eslint-disable-next-line no-throw-literal\n    throw throwable;\n  });\n  fastify.setErrorHandler((err, req, res) => {\n    t.equal(err, throwable);\n    res.send(payload);\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.payload, payload);\n  });\n});","file":"reply-error.test.js","skipped":false,"dir":"test"},{"name":"status code should be set to 500 and return an error json payload if route handler throws any non Error object expression","suites":[],"updatePoint":{"line":484,"column":127,"index":12854},"line":484,"code":"test('status code should be set to 500 and return an error json payload if route handler throws any non Error object expression', async t => {\n  t.plan(2);\n  const fastify = Fastify();\n  fastify.get('/', () => {\n    /* eslint-disable-next-line */\n    throw {\n      foo: 'bar'\n    };\n  }); // ----\n\n  const reply = await fastify.inject({\n    method: 'GET',\n    url: '/'\n  });\n  t.equal(reply.statusCode, 500);\n  t.equal(JSON.parse(reply.body).foo, 'bar');\n});","file":"reply-error.test.js","skipped":false,"dir":"test"},{"name":"should preserve the status code set by the user if an expression is thrown in a sync route","suites":[],"updatePoint":{"line":501,"column":96,"index":13282},"line":501,"code":"test('should preserve the status code set by the user if an expression is thrown in a sync route', async t => {\n  t.plan(2);\n  const fastify = Fastify();\n  fastify.get('/', (_, rep) => {\n    rep.status(501);\n    /* eslint-disable-next-line */\n\n    throw {\n      foo: 'bar'\n    };\n  }); // ----\n\n  const reply = await fastify.inject({\n    method: 'GET',\n    url: '/'\n  });\n  t.equal(reply.statusCode, 501);\n  t.equal(JSON.parse(reply.body).foo, 'bar');\n});","file":"reply-error.test.js","skipped":false,"dir":"test"},{"name":"should trigger error handlers if a sync route throws any non-error object","suites":[],"updatePoint":{"line":520,"column":79,"index":13721},"line":520,"code":"test('should trigger error handlers if a sync route throws any non-error object', async t => {\n  t.plan(2);\n  const fastify = Fastify();\n  const throwable = 'test';\n  const payload = 'error';\n  fastify.get('/', function async(req, reply) {\n    // eslint-disable-next-line no-throw-literal\n    throw throwable;\n  });\n  fastify.setErrorHandler((err, req, res) => {\n    t.equal(err, throwable);\n    res.code(500).send(payload);\n  });\n  const reply = await fastify.inject({\n    method: 'GET',\n    url: '/'\n  });\n  t.equal(reply.statusCode, 500);\n});","file":"reply-error.test.js","skipped":false,"dir":"test"},{"name":"should trigger error handlers if a sync route throws undefined","suites":[],"updatePoint":{"line":539,"column":68,"index":14256},"line":539,"code":"test('should trigger error handlers if a sync route throws undefined', async t => {\n  t.plan(1);\n  const fastify = Fastify();\n  fastify.get('/', function async(req, reply) {\n    // eslint-disable-next-line no-throw-literal\n    throw undefined;\n  });\n  const reply = await fastify.inject({\n    method: 'GET',\n    url: '/'\n  });\n  t.equal(reply.statusCode, 500);\n});","file":"reply-error.test.js","skipped":false,"dir":"test"},{"name":"setting content-type on reply object should not hang the server case 1","suites":[],"updatePoint":{"line":552,"column":76,"index":14629},"line":552,"code":"test('setting content-type on reply object should not hang the server case 1', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  fastify.get('/', (req, reply) => {\n    reply.code(200).headers({\n      'content-type': 'text/plain; charset=utf-32'\n    }).send(JSON.stringify({\n      bar: 'foo',\n      baz: 'foobar'\n    }));\n  });\n  fastify.inject({\n    url: '/',\n    method: 'GET'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n  });\n});","file":"reply-error.test.js","skipped":false,"dir":"test"},{"name":"setting content-type on reply object should not hang the server case 2","suites":[],"updatePoint":{"line":571,"column":76,"index":15091},"line":571,"code":"test('setting content-type on reply object should not hang the server case 2', async t => {\n  t.plan(1);\n  const fastify = Fastify();\n  fastify.get('/', (req, reply) => {\n    reply.code(200).headers({\n      'content-type': 'text/plain; charset=utf-8'\n    }).send({\n      bar: 'foo',\n      baz: 'foobar'\n    });\n  });\n\n  try {\n    await fastify.listen({\n      port: 0\n    });\n    const res = await fastify.inject({\n      url: '/',\n      method: 'GET'\n    });\n    t.same({\n      error: 'Internal Server Error',\n      message: 'Attempted to send payload of invalid type \\'object\\'. Expected a string or Buffer.',\n      statusCode: 500,\n      code: 'FST_ERR_REP_INVALID_PAYLOAD_TYPE'\n    }, res.json());\n  } catch (error) {\n    t.error(error);\n  } finally {\n    await fastify.close();\n  }\n});","file":"reply-error.test.js","skipped":false,"dir":"test"},{"name":"setting content-type on reply object should not hang the server case 3","suites":[],"updatePoint":{"line":603,"column":76,"index":15880},"line":603,"code":"test('setting content-type on reply object should not hang the server case 3', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  fastify.get('/', (req, reply) => {\n    reply.code(200).headers({\n      'content-type': 'application/json'\n    }).send({\n      bar: 'foo',\n      baz: 'foobar'\n    });\n  });\n  fastify.inject({\n    url: '/',\n    method: 'GET'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n  });\n});","file":"reply-error.test.js","skipped":false,"dir":"test"},{"name":"pipe stream inside error handler should not cause error","suites":[],"updatePoint":{"line":622,"column":61,"index":16301},"line":622,"code":"test('pipe stream inside error handler should not cause error', t => {\n  t.plan(3);\n  const location = path.join(__dirname, '..', 'package.json');\n  const json = JSON.parse(fs.readFileSync(path.join(__dirname, '..', 'package.json')).toString('utf8'));\n  const fastify = Fastify();\n  fastify.setErrorHandler((_error, _request, reply) => {\n    const stream = fs.createReadStream(location);\n    reply.code(400).type('application/json; charset=utf-8').send(stream);\n  });\n  fastify.get('/', (request, reply) => {\n    throw new Error('This is an error.');\n  });\n  fastify.inject({\n    url: '/',\n    method: 'GET'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 400);\n    t.same(JSON.parse(res.payload), json);\n  });\n});","file":"reply-error.test.js","skipped":false,"dir":"test"},{"name":"send trailers when payload is empty string","suites":[],"updatePoint":{"line":17,"column":48,"index":233},"line":17,"code":"test('send trailers when payload is empty string', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.get('/', function (request, reply) {\n    reply.trailer('ETag', function (reply, payload) {\n      return 'custom-etag';\n    });\n    reply.send('');\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 200);\n    t.equal(res.headers.trailer, 'etag');\n    t.equal(res.trailers.etag, 'custom-etag');\n    t.notHas(res.headers, 'content-length');\n  });\n});","file":"reply-trailers.test.js","skipped":false,"dir":"test"},{"name":"send trailers when payload is empty buffer","suites":[],"updatePoint":{"line":37,"column":48,"index":768},"line":37,"code":"test('send trailers when payload is empty buffer', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.get('/', function (request, reply) {\n    reply.trailer('ETag', function (reply, payload) {\n      return 'custom-etag';\n    });\n    reply.send(Buffer.alloc(0));\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 200);\n    t.equal(res.headers.trailer, 'etag');\n    t.equal(res.trailers.etag, 'custom-etag');\n    t.notHas(res.headers, 'content-length');\n  });\n});","file":"reply-trailers.test.js","skipped":false,"dir":"test"},{"name":"send trailers when payload is undefined","suites":[],"updatePoint":{"line":57,"column":45,"index":1313},"line":57,"code":"test('send trailers when payload is undefined', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.get('/', function (request, reply) {\n    reply.trailer('ETag', function (reply, payload) {\n      return 'custom-etag';\n    });\n    reply.send(undefined);\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 200);\n    t.equal(res.headers.trailer, 'etag');\n    t.equal(res.trailers.etag, 'custom-etag');\n    t.notHas(res.headers, 'content-length');\n  });\n});","file":"reply-trailers.test.js","skipped":false,"dir":"test"},{"name":"send trailers when payload is json","suites":[],"updatePoint":{"line":77,"column":40,"index":1847},"line":77,"code":"test('send trailers when payload is json', t => {\n  t.plan(7);\n  const fastify = Fastify();\n  const data = JSON.stringify({\n    hello: 'world'\n  });\n  const hash = createHash('md5');\n  hash.update(data);\n  const md5 = hash.digest('hex');\n  fastify.get('/', function (request, reply) {\n    reply.trailer('Content-MD5', function (reply, payload) {\n      t.equal(data, payload);\n      const hash = createHash('md5');\n      hash.update(payload);\n      return hash.digest('hex');\n    });\n    reply.send(data);\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 200);\n    t.equal(res.headers['transfer-encoding'], 'chunked');\n    t.equal(res.headers.trailer, 'content-md5');\n    t.equal(res.trailers['content-md5'], md5);\n    t.notHas(res.headers, 'content-length');\n  });\n});","file":"reply-trailers.test.js","skipped":false,"dir":"test"},{"name":"send trailers when payload is stream","suites":[],"updatePoint":{"line":107,"column":42,"index":2697},"line":107,"code":"test('send trailers when payload is stream', t => {\n  t.plan(7);\n  const fastify = Fastify();\n  fastify.get('/', function (request, reply) {\n    reply.trailer('ETag', function (reply, payload) {\n      t.same(payload, null);\n      return 'custom-etag';\n    });\n    const stream = Readable.from([JSON.stringify({\n      hello: 'world'\n    })]);\n    reply.send(stream);\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 200);\n    t.equal(res.headers['transfer-encoding'], 'chunked');\n    t.equal(res.headers.trailer, 'etag');\n    t.equal(res.trailers.etag, 'custom-etag');\n    t.notHas(res.headers, 'content-length');\n  });\n});","file":"reply-trailers.test.js","skipped":false,"dir":"test"},{"name":"removeTrailer","suites":[],"updatePoint":{"line":132,"column":19,"index":3376},"line":132,"code":"test('removeTrailer', t => {\n  t.plan(6);\n  const fastify = Fastify();\n  fastify.get('/', function (request, reply) {\n    reply.removeTrailer('ETag'); // remove nothing\n\n    reply.trailer('ETag', function (reply, payload) {\n      return 'custom-etag';\n    });\n    reply.trailer('Should-Not-Call', function (reply, payload) {\n      t.fail('it should not called as this trailer is removed');\n      return 'should-not-call';\n    });\n    reply.removeTrailer('Should-Not-Call');\n    reply.send(undefined);\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 200);\n    t.equal(res.headers.trailer, 'etag');\n    t.equal(res.trailers.etag, 'custom-etag');\n    t.notOk(res.trailers['should-not-call']);\n    t.notHas(res.headers, 'content-length');\n  });\n});","file":"reply-trailers.test.js","skipped":false,"dir":"test"},{"name":"hasTrailer","suites":[],"updatePoint":{"line":160,"column":16,"index":4198},"line":160,"code":"test('hasTrailer', t => {\n  t.plan(10);\n  const fastify = Fastify();\n  fastify.get('/', function (request, reply) {\n    t.equal(reply.hasTrailer('ETag'), false);\n    reply.trailer('ETag', function (reply, payload) {\n      return 'custom-etag';\n    });\n    t.equal(reply.hasTrailer('ETag'), true);\n    reply.trailer('Should-Not-Call', function (reply, payload) {\n      t.fail('it should not called as this trailer is removed');\n      return 'should-not-call';\n    });\n    t.equal(reply.hasTrailer('Should-Not-Call'), true);\n    reply.removeTrailer('Should-Not-Call');\n    t.equal(reply.hasTrailer('Should-Not-Call'), false);\n    reply.send(undefined);\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 200);\n    t.equal(res.headers.trailer, 'etag');\n    t.equal(res.trailers.etag, 'custom-etag');\n    t.notOk(res.trailers['should-not-call']);\n    t.notHas(res.headers, 'content-length');\n  });\n});","file":"reply-trailers.test.js","skipped":false,"dir":"test"},{"name":"throw error when trailer header name is not allowed","suites":[],"updatePoint":{"line":190,"column":57,"index":5214},"line":190,"code":"test('throw error when trailer header name is not allowed', t => {\n  const INVALID_TRAILERS = ['transfer-encoding', 'content-length', 'host', 'cache-control', 'max-forwards', 'te', 'authorization', 'set-cookie', 'content-encoding', 'content-type', 'content-range', 'trailer'];\n  t.plan(INVALID_TRAILERS.length + 2);\n  const fastify = Fastify();\n  fastify.get('/', function (request, reply) {\n    for (const key of INVALID_TRAILERS) {\n      try {\n        reply.trailer(key, () => {});\n      } catch (err) {\n        t.equal(err.message, `Called reply.trailer with an invalid header name: ${key}`);\n      }\n    }\n\n    reply.send('');\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 200);\n  });\n});","file":"reply-trailers.test.js","skipped":false,"dir":"test"},{"name":"throw error when trailer header value is not function","suites":[],"updatePoint":{"line":213,"column":59,"index":5991},"line":213,"code":"test('throw error when trailer header value is not function', t => {\n  const INVALID_TRAILERS_VALUE = [undefined, null, true, false, 'invalid', [], new Date(), {}];\n  t.plan(INVALID_TRAILERS_VALUE.length + 2);\n  const fastify = Fastify();\n  fastify.get('/', function (request, reply) {\n    for (const value of INVALID_TRAILERS_VALUE) {\n      try {\n        reply.trailer('invalid', value);\n      } catch (err) {\n        t.equal(err.message, `Called reply.trailer('invalid', fn) with an invalid type: ${typeof value}. Expected a function.`);\n      }\n    }\n\n    reply.send('');\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 200);\n  });\n});","file":"reply-trailers.test.js","skipped":false,"dir":"test"},{"name":"default 400 on request error","suites":[],"updatePoint":{"line":17,"column":34,"index":224},"line":17,"code":"test('default 400 on request error', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.post('/', function (req, reply) {\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/',\n    simulate: {\n      error: true\n    },\n    body: {\n      text: '12345678901234567890123456789012345678901234567890'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 400);\n    t.equal(res.headers['content-type'], 'application/json; charset=utf-8');\n    t.same(JSON.parse(res.payload), {\n      error: 'Bad Request',\n      message: 'Simulated',\n      statusCode: 400\n    });\n  });\n});","file":"request-error.test.js","skipped":false,"dir":"test"},{"name":"default 400 on request error with custom error handler","suites":[],"updatePoint":{"line":45,"column":60,"index":893},"line":45,"code":"test('default 400 on request error with custom error handler', t => {\n  t.plan(6);\n  const fastify = Fastify();\n  fastify.setErrorHandler(function (err, request, reply) {\n    t.type(request, 'object');\n    t.type(request, fastify[kRequest].parent);\n    reply.code(err.statusCode).type('application/json; charset=utf-8').send(err);\n  });\n  fastify.post('/', function (req, reply) {\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/',\n    simulate: {\n      error: true\n    },\n    body: {\n      text: '12345678901234567890123456789012345678901234567890'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 400);\n    t.equal(res.headers['content-type'], 'application/json; charset=utf-8');\n    t.same(JSON.parse(res.payload), {\n      error: 'Bad Request',\n      message: 'Simulated',\n      statusCode: 400\n    });\n  });\n});","file":"request-error.test.js","skipped":false,"dir":"test"},{"name":"default clientError handler ignores ECONNRESET","suites":[],"updatePoint":{"line":78,"column":52,"index":1779},"line":78,"code":"test('default clientError handler ignores ECONNRESET', t => {\n  t.plan(3);\n  let logs = '';\n  let response = '';\n  const fastify = Fastify({\n    bodyLimit: 1,\n    keepAliveTimeout: 100,\n    logger: {\n      level: 'trace',\n      stream: {\n        write() {\n          logs += JSON.stringify(arguments);\n        }\n\n      }\n    }\n  });\n  fastify.get('/', (request, reply) => {\n    reply.send('OK');\n    process.nextTick(() => {\n      const error = new Error();\n      error.code = 'ECONNRESET';\n      fastify.server.emit('clientError', error, request.raw.socket);\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, function (err) {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    const client = connect(fastify.server.address().port);\n    client.on('data', chunk => {\n      response += chunk.toString('utf-8');\n    });\n    client.on('end', () => {\n      t.match(response, /^HTTP\\/1.1 200 OK/);\n      t.notMatch(logs, /ECONNRESET/);\n    });\n    client.resume();\n    client.write('GET / HTTP/1.1\\r\\n');\n    client.write('Connection: close\\r\\n');\n    client.write('\\r\\n\\r\\n');\n  });\n});","file":"request-error.test.js","skipped":false,"dir":"test"},{"name":"default clientError handler ignores sockets in destroyed state","suites":[],"updatePoint":{"line":124,"column":68,"index":2901},"line":124,"code":"test('default clientError handler ignores sockets in destroyed state', t => {\n  t.plan(1);\n  const fastify = Fastify({\n    bodyLimit: 1,\n    keepAliveTimeout: 100\n  });\n  fastify.server.on('clientError', () => {\n    // this handler is called after default handler, so we can make sure end was not called\n    t.pass();\n  });\n  fastify.server.emit('clientError', new Error(), {\n    destroyed: true,\n\n    end() {\n      t.fail('end should not be called');\n    },\n\n    destroy() {\n      t.fail('destroy should not be called');\n    }\n\n  });\n});","file":"request-error.test.js","skipped":false,"dir":"test"},{"name":"default clientError handler destroys sockets in writable state","suites":[],"updatePoint":{"line":147,"column":68,"index":3440},"line":147,"code":"test('default clientError handler destroys sockets in writable state', t => {\n  t.plan(2);\n  const fastify = Fastify({\n    bodyLimit: 1,\n    keepAliveTimeout: 100\n  });\n  fastify.server.emit('clientError', new Error(), {\n    destroyed: false,\n    writable: true,\n    encrypted: true,\n\n    end() {\n      t.fail('end should not be called');\n    },\n\n    destroy() {\n      t.pass('destroy should be called');\n    },\n\n    write(response) {\n      t.match(response, /^HTTP\\/1.1 400 Bad Request/);\n    }\n\n  });\n});","file":"request-error.test.js","skipped":false,"dir":"test"},{"name":"default clientError handler destroys http sockets in non-writable state","suites":[],"updatePoint":{"line":172,"column":77,"index":3956},"line":172,"code":"test('default clientError handler destroys http sockets in non-writable state', t => {\n  t.plan(1);\n  const fastify = Fastify({\n    bodyLimit: 1,\n    keepAliveTimeout: 100\n  });\n  fastify.server.emit('clientError', new Error(), {\n    destroyed: false,\n    writable: false,\n\n    end() {\n      t.fail('end should not be called');\n    },\n\n    destroy() {\n      t.pass('destroy should be called');\n    },\n\n    write(response) {\n      t.fail('write should not be called');\n    }\n\n  });\n});","file":"request-error.test.js","skipped":false,"dir":"test"},{"name":"error handler binding","suites":[],"updatePoint":{"line":196,"column":27,"index":4391},"line":196,"code":"test('error handler binding', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.setErrorHandler(function (err, request, reply) {\n    t.equal(this, fastify);\n    reply.code(err.statusCode).type('application/json; charset=utf-8').send(err);\n  });\n  fastify.post('/', function (req, reply) {\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/',\n    simulate: {\n      error: true\n    },\n    body: {\n      text: '12345678901234567890123456789012345678901234567890'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 400);\n    t.equal(res.headers['content-type'], 'application/json; charset=utf-8');\n    t.same(JSON.parse(res.payload), {\n      error: 'Bad Request',\n      message: 'Simulated',\n      statusCode: 400\n    });\n  });\n});","file":"request-error.test.js","skipped":false,"dir":"test"},{"name":"encapsulated error handler binding","suites":[],"updatePoint":{"line":228,"column":40,"index":5215},"line":228,"code":"test('encapsulated error handler binding', t => {\n  t.plan(7);\n  const fastify = Fastify();\n  fastify.register(function (app, opts, done) {\n    app.decorate('hello', 'world');\n    t.equal(app.hello, 'world');\n    app.post('/', function (req, reply) {\n      reply.send({\n        hello: 'world'\n      });\n    });\n    app.setErrorHandler(function (err, request, reply) {\n      t.equal(this.hello, 'world');\n      reply.code(err.statusCode).type('application/json; charset=utf-8').send(err);\n    });\n    done();\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/',\n    simulate: {\n      error: true\n    },\n    body: {\n      text: '12345678901234567890123456789012345678901234567890'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 400);\n    t.equal(res.headers['content-type'], 'application/json; charset=utf-8');\n    t.same(res.json(), {\n      error: 'Bad Request',\n      message: 'Simulated',\n      statusCode: 400\n    });\n    t.equal(fastify.hello, undefined);\n  });\n});","file":"request-error.test.js","skipped":false,"dir":"test"},{"name":"default clientError replies with bad request on reused keep-alive connection","suites":[],"updatePoint":{"line":266,"column":82,"index":6258},"line":266,"code":"test('default clientError replies with bad request on reused keep-alive connection', t => {\n  t.plan(2);\n  let response = '';\n  const fastify = Fastify({\n    bodyLimit: 1,\n    keepAliveTimeout: 100\n  });\n  fastify.get('/', (request, reply) => {\n    reply.send('OK\\n');\n  });\n  fastify.listen({\n    port: 0\n  }, function (err) {\n    t.error(err);\n    fastify.server.unref();\n    const client = connect(fastify.server.address().port);\n    client.on('data', chunk => {\n      response += chunk.toString('utf-8');\n    });\n    client.on('end', () => {\n      t.match(response, /^HTTP\\/1.1 200 OK.*HTTP\\/1.1 400 Bad Request/s);\n    });\n    client.resume();\n    client.write('GET / HTTP/1.1\\r\\n');\n    client.write('\\r\\n\\r\\n');\n    client.write('GET /?a b HTTP/1.1\\r\\n');\n    client.write('Connection: close\\r\\n');\n    client.write('\\r\\n\\r\\n');\n  });\n});","file":"request-error.test.js","skipped":false,"dir":"test"},{"name":"requestTimeout passed to server","suites":[],"updatePoint":{"line":11,"column":37,"index":160},"line":11,"code":"test('requestTimeout passed to server', t => {\n  t.plan(5);\n\n  try {\n    Fastify({\n      requestTimeout: 500.1\n    });\n    t.fail('option must be an integer');\n  } catch (err) {\n    t.ok(err);\n  }\n\n  try {\n    Fastify({\n      requestTimeout: []\n    });\n    t.fail('option must be an integer');\n  } catch (err) {\n    t.ok(err);\n  }\n\n  const httpServer = Fastify({\n    requestTimeout: 1000\n  }).server;\n  t.equal(httpServer.requestTimeout, 1000);\n  const httpsServer = Fastify({\n    requestTimeout: 1000,\n    https: true\n  }).server;\n  t.equal(httpsServer.requestTimeout, 1000);\n\n  const serverFactory = (handler, _) => {\n    const server = http.createServer((req, res) => {\n      handler(req, res);\n    });\n    server.requestTimeout = 5000;\n    return server;\n  };\n\n  const customServer = Fastify({\n    requestTimeout: 4000,\n    serverFactory\n  }).server;\n  t.equal(customServer.requestTimeout, 5000);\n});","file":"requestTimeout.test.js","skipped":false,"dir":"test"},{"name":"requestTimeout should be set","suites":[],"updatePoint":{"line":56,"column":34,"index":1062},"line":56,"code":"test('requestTimeout should be set', async t => {\n  t.plan(1);\n  const initialConfig = Fastify({\n    requestTimeout: 5000\n  }).initialConfig;\n  t.same(initialConfig.requestTimeout, 5000);\n});","file":"requestTimeout.test.js","skipped":false,"dir":"test"},{"name":"requestTimeout should 0","suites":[],"updatePoint":{"line":63,"column":29,"index":1249},"line":63,"code":"test('requestTimeout should 0', async t => {\n  t.plan(1);\n  const initialConfig = Fastify().initialConfig;\n  t.same(initialConfig.requestTimeout, 0);\n});","file":"requestTimeout.test.js","skipped":false,"dir":"test"},{"name":"","suites":[],"updatePoint":{"line":24,"column":15,"index":431},"line":24,"code":"  test(`${hook}`, t => {\n    t.plan(3);\n    const fastify = Fastify();\n    fastify.post('/', {\n      [hook]: (req, reply, doneOrPayload, done) => {\n        t.pass('hook called');\n        endRouteHook(doneOrPayload, done);\n      }\n    }, (req, reply) => {\n      reply.send(req.body);\n    });\n    fastify.inject({\n      method: 'POST',\n      url: '/',\n      payload: {\n        hello: 'world'\n      }\n    }, (err, res) => {\n      t.error(err);\n      const payload = JSON.parse(res.payload);\n      t.same(payload, {\n        hello: 'world'\n      });\n    });\n  });","file":"route-hooks.test.js","skipped":false,"dir":"test"},{"name":" option should be called after  hook","suites":[],"updatePoint":{"line":49,"column":58,"index":1033},"line":49,"code":"  test(`${hook} option should be called after ${hook} hook`, t => {\n    t.plan(3);\n    const fastify = Fastify();\n    const checker = Object.defineProperty({\n      calledTimes: 0\n    }, 'check', {\n      get: function () {\n        return ++this.calledTimes;\n      }\n    });\n    fastify.addHook(hook, (req, reply, doneOrPayload, done) => {\n      t.equal(checker.check, 1);\n      endRouteHook(doneOrPayload, done);\n    });\n    fastify.post('/', {\n      [hook]: (req, reply, doneOrPayload, done) => {\n        t.equal(checker.check, 2);\n        endRouteHook(doneOrPayload, done);\n      }\n    }, (req, reply) => {\n      reply.send({});\n    });\n    fastify.inject({\n      method: 'POST',\n      url: '/',\n      payload: {\n        hello: 'world'\n      }\n    }, (err, res) => {\n      t.error(err);\n    });\n  });","file":"route-hooks.test.js","skipped":false,"dir":"test"},{"name":" option could accept an array of functions","suites":[],"updatePoint":{"line":81,"column":57,"index":1834},"line":81,"code":"  test(`${hook} option could accept an array of functions`, t => {\n    t.plan(3);\n    const fastify = Fastify();\n    const checker = Object.defineProperty({\n      calledTimes: 0\n    }, 'check', {\n      get: function () {\n        return ++this.calledTimes;\n      }\n    });\n    fastify.post('/', {\n      [hook]: [(req, reply, doneOrPayload, done) => {\n        t.equal(checker.check, 1);\n        endRouteHook(doneOrPayload, done);\n      }, (req, reply, doneOrPayload, done) => {\n        t.equal(checker.check, 2);\n        endRouteHook(doneOrPayload, done);\n      }]\n    }, (req, reply) => {\n      reply.send({});\n    });\n    fastify.inject({\n      method: 'POST',\n      url: '/',\n      payload: {\n        hello: 'world'\n      }\n    }, (err, res) => {\n      t.error(err);\n    });\n  });","file":"route-hooks.test.js","skipped":false,"dir":"test"},{"name":" option does not interfere with  hook","suites":[],"updatePoint":{"line":112,"column":59,"index":2618},"line":112,"code":"  test(`${hook} option does not interfere with ${hook} hook`, t => {\n    t.plan(7);\n    const fastify = Fastify();\n    const checker = Object.defineProperty({\n      calledTimes: 0\n    }, 'check', {\n      get: function () {\n        return ++this.calledTimes;\n      }\n    });\n    fastify.addHook(hook, (req, reply, doneOrPayload, done) => {\n      t.equal(checker.check, 1);\n      endRouteHook(doneOrPayload, done);\n    });\n    fastify.post('/', {\n      [hook]: (req, reply, doneOrPayload, done) => {\n        t.equal(checker.check, 2);\n        endRouteHook(doneOrPayload, done);\n      }\n    }, handler);\n    fastify.post('/no', handler);\n\n    function handler(req, reply) {\n      reply.send({});\n    }\n\n    fastify.inject({\n      method: 'post',\n      url: '/'\n    }, (err, res) => {\n      t.error(err);\n      t.equal(checker.calledTimes, 2);\n      checker.calledTimes = 0;\n      fastify.inject({\n        method: 'post',\n        url: '/no'\n      }, (err, res) => {\n        t.error(err);\n        t.equal(checker.calledTimes, 1);\n      });\n    });\n  });","file":"route-hooks.test.js","skipped":false,"dir":"test"},{"name":" option should be unique per route","suites":[],"updatePoint":{"line":157,"column":49,"index":3699},"line":157,"code":"  test(`${hook} option should be unique per route`, t => {\n    t.plan(4);\n    const fastify = Fastify();\n    fastify.post('/', {\n      [hook]: (req, reply, doneOrPayload, done) => {\n        req.hello = 'earth';\n        endRouteHook(doneOrPayload, done);\n      }\n    }, (req, reply) => {\n      reply.send({\n        hello: req.hello\n      });\n    });\n    fastify.post('/no', (req, reply) => {\n      reply.send(req.body);\n    });\n    fastify.inject({\n      method: 'POST',\n      url: '/',\n      payload: {\n        hello: 'world'\n      }\n    }, (err, res) => {\n      t.error(err);\n      const payload = JSON.parse(res.payload);\n      t.same(payload, {\n        hello: 'earth'\n      });\n    });\n    fastify.inject({\n      method: 'POST',\n      url: '/no',\n      payload: {\n        hello: 'world'\n      }\n    }, (err, res) => {\n      t.error(err);\n      const payload = JSON.parse(res.payload);\n      t.same(payload, {\n        hello: 'world'\n      });\n    });\n  });","file":"route-hooks.test.js","skipped":false,"dir":"test"},{"name":" option should handle errors","suites":[],"updatePoint":{"line":200,"column":43,"index":4652},"line":200,"code":"  test(`${hook} option should handle errors`, t => {\n    t.plan(3);\n    const fastify = Fastify();\n    fastify.post('/', {\n      [hook]: (req, reply, doneOrPayload, done) => {\n        endRouteHook(doneOrPayload, done, new Error('kaboom'));\n      }\n    }, (req, reply) => {\n      reply.send(req.body);\n    });\n    fastify.inject({\n      method: 'POST',\n      url: '/',\n      payload: {\n        hello: 'world'\n      }\n    }, (err, res) => {\n      t.error(err);\n      const payload = JSON.parse(res.payload);\n      t.equal(res.statusCode, 500);\n      t.same(payload, {\n        message: 'kaboom',\n        error: 'Internal Server Error',\n        statusCode: 500\n      });\n    });\n  });","file":"route-hooks.test.js","skipped":false,"dir":"test"},{"name":" option should handle throwing objects","suites":[],"updatePoint":{"line":227,"column":53,"index":5343},"line":227,"code":"  test(`${hook} option should handle throwing objects`, t => {\n    t.plan(4);\n    const fastify = Fastify();\n    const myError = {\n      myError: 'kaboom'\n    };\n    fastify.setErrorHandler(async (error, request, reply) => {\n      t.same(error, myError, 'the error object throws by the user');\n      return reply.code(500).send({\n        this: 'is',\n        my: 'error'\n      });\n    });\n    fastify.get('/', {\n      [hook]: async () => {\n        // eslint-disable-next-line no-throw-literal\n        throw myError;\n      }\n    }, (req, reply) => {\n      t.fail('the handler must not be called');\n    });\n    fastify.inject({\n      url: '/',\n      method: 'GET'\n    }, (err, res) => {\n      t.error(err);\n      t.equal(res.statusCode, 500);\n      t.same(res.json(), {\n        this: 'is',\n        my: 'error'\n      });\n    });\n  });","file":"route-hooks.test.js","skipped":false,"dir":"test"},{"name":" option should handle throwing objects by default","suites":[],"updatePoint":{"line":260,"column":64,"index":6185},"line":260,"code":"  test(`${hook} option should handle throwing objects by default`, t => {\n    t.plan(3);\n    const fastify = Fastify();\n    fastify.get('/', {\n      [hook]: async () => {\n        // eslint-disable-next-line no-throw-literal\n        throw {\n          myError: 'kaboom',\n          message: 'i am an error'\n        };\n      }\n    }, (req, reply) => {\n      t.fail('the handler must not be called');\n    });\n    fastify.inject({\n      url: '/',\n      method: 'GET'\n    }, (err, res) => {\n      t.error(err);\n      t.equal(res.statusCode, 500);\n      t.same(res.json(), {\n        myError: 'kaboom',\n        message: 'i am an error'\n      });\n    });\n  });","file":"route-hooks.test.js","skipped":false,"dir":"test"},{"name":" option should handle errors with custom status code","suites":[],"updatePoint":{"line":286,"column":67,"index":6839},"line":286,"code":"  test(`${hook} option should handle errors with custom status code`, t => {\n    t.plan(3);\n    const fastify = Fastify();\n    fastify.post('/', {\n      [hook]: (req, reply, doneOrPayload, done) => {\n        reply.code(401);\n        endRouteHook(doneOrPayload, done, new Error('go away'));\n      }\n    }, (req, reply) => {\n      reply.send(req.body);\n    });\n    fastify.inject({\n      method: 'POST',\n      url: '/',\n      payload: {\n        hello: 'world'\n      }\n    }, (err, res) => {\n      t.error(err);\n      const payload = JSON.parse(res.payload);\n      t.equal(res.statusCode, 401);\n      t.same(payload, {\n        message: 'go away',\n        error: 'Unauthorized',\n        statusCode: 401\n      });\n    });\n  });","file":"route-hooks.test.js","skipped":false,"dir":"test"},{"name":" option should keep the context","suites":[],"updatePoint":{"line":314,"column":46,"index":7541},"line":314,"code":"  test(`${hook} option should keep the context`, t => {\n    t.plan(3);\n    const fastify = Fastify();\n    fastify.decorate('foo', 42);\n    fastify.post('/', {\n      [hook]: function (req, reply, doneOrPayload, done) {\n        t.equal(this.foo, 42);\n        this.foo += 1;\n        endRouteHook(doneOrPayload, done);\n      }\n    }, function (req, reply) {\n      reply.send({\n        foo: this.foo\n      });\n    });\n    fastify.inject({\n      method: 'POST',\n      url: '/',\n      payload: {\n        hello: 'world'\n      }\n    }, (err, res) => {\n      t.error(err);\n      const payload = JSON.parse(res.payload);\n      t.same(payload, {\n        foo: 43\n      });\n    });\n  });","file":"route-hooks.test.js","skipped":false,"dir":"test"},{"name":" option should keep the context (array)","suites":[],"updatePoint":{"line":343,"column":54,"index":8223},"line":343,"code":"  test(`${hook} option should keep the context (array)`, t => {\n    t.plan(3);\n    const fastify = Fastify();\n    fastify.decorate('foo', 42);\n    fastify.post('/', {\n      [hook]: [function (req, reply, doneOrPayload, done) {\n        t.equal(this.foo, 42);\n        this.foo += 1;\n        endRouteHook(doneOrPayload, done);\n      }]\n    }, function (req, reply) {\n      reply.send({\n        foo: this.foo\n      });\n    });\n    fastify.inject({\n      method: 'POST',\n      url: '/',\n      payload: {\n        hello: 'world'\n      }\n    }, (err, res) => {\n      t.error(err);\n      const payload = JSON.parse(res.payload);\n      t.same(payload, {\n        foo: 43\n      });\n    });\n  });","file":"route-hooks.test.js","skipped":false,"dir":"test"},{"name":"preValidation option should be called before preHandler hook","suites":[],"updatePoint":{"line":385,"column":66,"index":9308},"line":385,"code":"test('preValidation option should be called before preHandler hook', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.addHook('preHandler', (req, reply, done) => {\n    t.ok(req.called);\n    done();\n  });\n  fastify.post('/', {\n    preValidation: (req, reply, done) => {\n      req.called = true;\n      done();\n    }\n  }, (req, reply) => {\n    reply.send(req.body);\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/',\n    payload: {\n      hello: 'world'\n    }\n  }, (err, res) => {\n    t.error(err);\n    const payload = JSON.parse(res.payload);\n    t.same(payload, {\n      hello: 'world'\n    });\n  });\n});","file":"route-hooks.test.js","skipped":false,"dir":"test"},{"name":"preSerialization option should be able to modify the payload","suites":[],"updatePoint":{"line":414,"column":66,"index":9927},"line":414,"code":"test('preSerialization option should be able to modify the payload', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.get('/only', {\n    preSerialization: (req, reply, payload, done) => {\n      done(null, {\n        hello: 'another world'\n      });\n    }\n  }, (req, reply) => {\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/only'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.same(JSON.parse(res.payload), {\n      hello: 'another world'\n    });\n  });\n});","file":"route-hooks.test.js","skipped":false,"dir":"test"},{"name":"preParsing option should be called before preValidation hook","suites":[],"updatePoint":{"line":439,"column":66,"index":10479},"line":439,"code":"test('preParsing option should be called before preValidation hook', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.addHook('preValidation', (req, reply, done) => {\n    t.ok(req.called);\n    done();\n  });\n  fastify.post('/', {\n    preParsing: (req, reply, payload, done) => {\n      req.called = true;\n      done();\n    }\n  }, (req, reply) => {\n    reply.send(req.body);\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/',\n    payload: {\n      hello: 'world'\n    }\n  }, (err, res) => {\n    t.error(err);\n    const payload = JSON.parse(res.payload);\n    t.same(payload, {\n      hello: 'world'\n    });\n  });\n});","file":"route-hooks.test.js","skipped":false,"dir":"test"},{"name":"preParsing option should be able to modify the payload","suites":[],"updatePoint":{"line":468,"column":60,"index":11101},"line":468,"code":"test('preParsing option should be able to modify the payload', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.post('/only', {\n    preParsing: (req, reply, payload, done) => {\n      const stream = new Readable();\n      stream.receivedEncodedLength = parseInt(req.headers['content-length'], 10);\n      stream.push(JSON.stringify({\n        hello: 'another world'\n      }));\n      stream.push(null);\n      done(null, stream);\n    }\n  }, (req, reply) => {\n    reply.send(req.body);\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/only',\n    payload: {\n      hello: 'world'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.same(JSON.parse(res.payload), {\n      hello: 'another world'\n    });\n  });\n});","file":"route-hooks.test.js","skipped":false,"dir":"test"},{"name":"onRequest option should be called before preParsing","suites":[],"updatePoint":{"line":498,"column":57,"index":11850},"line":498,"code":"test('onRequest option should be called before preParsing', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.addHook('preParsing', (req, reply, payload, done) => {\n    t.ok(req.called);\n    done();\n  });\n  fastify.post('/', {\n    onRequest: (req, reply, done) => {\n      req.called = true;\n      done();\n    }\n  }, (req, reply) => {\n    reply.send(req.body);\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/',\n    payload: {\n      hello: 'world'\n    }\n  }, (err, res) => {\n    t.error(err);\n    const payload = JSON.parse(res.payload);\n    t.same(payload, {\n      hello: 'world'\n    });\n  });\n});","file":"route-hooks.test.js","skipped":false,"dir":"test"},{"name":"onTimeout on route","suites":[],"updatePoint":{"line":527,"column":24,"index":12432},"line":527,"code":"test('onTimeout on route', t => {\n  t.plan(4);\n  const fastify = Fastify({\n    connectionTimeout: 500\n  });\n  fastify.get('/timeout', {\n    handler(request, reply) {},\n\n    onTimeout(request, reply, done) {\n      t.pass('onTimeout called');\n      done();\n    }\n\n  });\n  fastify.listen({\n    port: 0\n  }, (err, address) => {\n    t.error(err);\n    t.teardown(() => fastify.close());\n    sget({\n      method: 'GET',\n      url: `${address}/timeout`\n    }, (err, response, body) => {\n      t.type(err, Error);\n      t.equal(err.message, 'socket hang up');\n    });\n  });\n});","file":"route-hooks.test.js","skipped":false,"dir":"test"},{"name":"onError on route","suites":[],"updatePoint":{"line":555,"column":22,"index":12999},"line":555,"code":"test('onError on route', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  const err = new Error('kaboom');\n  fastify.get('/', {\n    onError(request, reply, error, done) {\n      t.match(error, err);\n      done();\n    }\n\n  }, (req, reply) => {\n    reply.send(err);\n  });\n  fastify.inject('/', (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      error: 'Internal Server Error',\n      message: 'kaboom',\n      statusCode: 500\n    });\n  });\n});","file":"route-hooks.test.js","skipped":false,"dir":"test"},{"name":"Prefix options should add a prefix for all the routes inside a register / 1","suites":[],"updatePoint":{"line":9,"column":81,"index":178},"line":9,"code":"test('Prefix options should add a prefix for all the routes inside a register / 1', t => {\n  t.plan(6);\n  const fastify = Fastify();\n  fastify.get('/first', (req, reply) => {\n    reply.send({\n      route: '/first'\n    });\n  });\n  fastify.register(function (fastify, opts, done) {\n    fastify.get('/first', (req, reply) => {\n      reply.send({\n        route: '/v1/first'\n      });\n    });\n    fastify.register(function (fastify, opts, done) {\n      fastify.get('/first', (req, reply) => {\n        reply.send({\n          route: '/v1/v2/first'\n        });\n      });\n      done();\n    }, {\n      prefix: '/v2'\n    });\n    done();\n  }, {\n    prefix: '/v1'\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/first'\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      route: '/first'\n    });\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/v1/first'\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      route: '/v1/first'\n    });\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/v1/v2/first'\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      route: '/v1/v2/first'\n    });\n  });\n});","file":"route-prefix.test.js","skipped":false,"dir":"test"},{"name":"Prefix options should add a prefix for all the routes inside a register / 2","suites":[],"updatePoint":{"line":65,"column":81,"index":1364},"line":65,"code":"test('Prefix options should add a prefix for all the routes inside a register / 2', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.register(function (fastify, opts, done) {\n    fastify.get('/first', (req, reply) => {\n      reply.send({\n        route: '/v1/first'\n      });\n    });\n    fastify.get('/second', (req, reply) => {\n      reply.send({\n        route: '/v1/second'\n      });\n    });\n    done();\n  }, {\n    prefix: '/v1'\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/v1/first'\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      route: '/v1/first'\n    });\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/v1/second'\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      route: '/v1/second'\n    });\n  });\n});","file":"route-prefix.test.js","skipped":false,"dir":"test"},{"name":"Prefix options should add a prefix for all the chained routes inside a register / 3","suites":[],"updatePoint":{"line":102,"column":89,"index":2174},"line":102,"code":"test('Prefix options should add a prefix for all the chained routes inside a register / 3', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.register(function (fastify, opts, done) {\n    fastify.get('/first', (req, reply) => {\n      reply.send({\n        route: '/v1/first'\n      });\n    }).get('/second', (req, reply) => {\n      reply.send({\n        route: '/v1/second'\n      });\n    });\n    done();\n  }, {\n    prefix: '/v1'\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/v1/first'\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      route: '/v1/first'\n    });\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/v1/second'\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      route: '/v1/second'\n    });\n  });\n});","file":"route-prefix.test.js","skipped":false,"dir":"test"},{"name":"Prefix should support parameters as well","suites":[],"updatePoint":{"line":138,"column":46,"index":2928},"line":138,"code":"test('Prefix should support parameters as well', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  fastify.register(function (fastify, opts, done) {\n    fastify.get('/hello', (req, reply) => {\n      reply.send({\n        id: req.params.id\n      });\n    });\n    done();\n  }, {\n    prefix: '/v1/:id'\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/v1/param/hello'\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      id: 'param'\n    });\n  });\n});","file":"route-prefix.test.js","skipped":false,"dir":"test"},{"name":"Prefix should support /","suites":[],"updatePoint":{"line":161,"column":29,"index":3393},"line":161,"code":"test('Prefix should support /', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  fastify.register(function (fastify, opts, done) {\n    fastify.get('/', (req, reply) => {\n      reply.send({\n        hello: 'world'\n      });\n    });\n    done();\n  }, {\n    prefix: '/v1'\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/v1'\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      hello: 'world'\n    });\n  });\n});","file":"route-prefix.test.js","skipped":false,"dir":"test"},{"name":"Prefix without /","suites":[],"updatePoint":{"line":184,"column":22,"index":3830},"line":184,"code":"test('Prefix without /', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  fastify.register(function (fastify, opts, done) {\n    fastify.get('/', (req, reply) => {\n      reply.send({\n        hello: 'world'\n      });\n    });\n    done();\n  }, {\n    prefix: 'v1'\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/v1'\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      hello: 'world'\n    });\n  });\n});","file":"route-prefix.test.js","skipped":false,"dir":"test"},{"name":"Prefix with trailing /","suites":[],"updatePoint":{"line":207,"column":28,"index":4272},"line":207,"code":"test('Prefix with trailing /', t => {\n  t.plan(6);\n  const fastify = Fastify();\n  fastify.register(function (fastify, opts, done) {\n    fastify.get('/route1', (req, reply) => {\n      reply.send({\n        hello: 'world1'\n      });\n    });\n    fastify.get('route2', (req, reply) => {\n      reply.send({\n        hello: 'world2'\n      });\n    });\n    fastify.register(function (fastify, opts, done) {\n      fastify.get('/route3', (req, reply) => {\n        reply.send({\n          hello: 'world3'\n        });\n      });\n      done();\n    }, {\n      prefix: '/inner/'\n    });\n    done();\n  }, {\n    prefix: '/v1/'\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/v1/route1'\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      hello: 'world1'\n    });\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/v1/route2'\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      hello: 'world2'\n    });\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/v1/inner/route3'\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      hello: 'world3'\n    });\n  });\n});","file":"route-prefix.test.js","skipped":false,"dir":"test"},{"name":"Prefix works multiple levels deep","suites":[],"updatePoint":{"line":263,"column":39,"index":5424},"line":263,"code":"test('Prefix works multiple levels deep', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  fastify.register(function (fastify, opts, done) {\n    fastify.register(function (fastify, opts, done) {\n      fastify.register(function (fastify, opts, done) {\n        fastify.register(function (fastify, opts, done) {\n          fastify.get('/', (req, reply) => {\n            reply.send({\n              hello: 'world'\n            });\n          });\n          done();\n        }, {\n          prefix: '/v3'\n        });\n        done();\n      }); // No prefix on this level\n\n      done();\n    }, {\n      prefix: 'v2'\n    });\n    done();\n  }, {\n    prefix: '/v1'\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/v1/v2/v3'\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      hello: 'world'\n    });\n  });\n});","file":"route-prefix.test.js","skipped":false,"dir":"test"},{"name":"Different register - encapsulation check","suites":[],"updatePoint":{"line":300,"column":46,"index":6260},"line":300,"code":"test('Different register - encapsulation check', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.get('/first', (req, reply) => {\n    reply.send({\n      route: '/first'\n    });\n  });\n  fastify.register(function (instance, opts, done) {\n    instance.register(function (f, opts, done) {\n      f.get('/', (req, reply) => {\n        reply.send({\n          route: '/v1/v2'\n        });\n      });\n      done();\n    }, {\n      prefix: '/v2'\n    });\n    done();\n  }, {\n    prefix: '/v1'\n  });\n  fastify.register(function (instance, opts, done) {\n    instance.register(function (f, opts, done) {\n      f.get('/', (req, reply) => {\n        reply.send({\n          route: '/v3/v4'\n        });\n      });\n      done();\n    }, {\n      prefix: '/v4'\n    });\n    done();\n  }, {\n    prefix: '/v3'\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/v1/v2'\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      route: '/v1/v2'\n    });\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/v3/v4'\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      route: '/v3/v4'\n    });\n  });\n});","file":"route-prefix.test.js","skipped":false,"dir":"test"},{"name":"Can retrieve prefix within encapsulated instances","suites":[],"updatePoint":{"line":357,"column":55,"index":7404},"line":357,"code":"test('Can retrieve prefix within encapsulated instances', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.register(function (instance, opts, done) {\n    instance.get('/one', function (req, reply) {\n      reply.send(instance.prefix);\n    });\n    instance.register(function (instance, opts, done) {\n      instance.get('/two', function (req, reply) {\n        reply.send(instance.prefix);\n      });\n      done();\n    }, {\n      prefix: '/v2'\n    });\n    done();\n  }, {\n    prefix: '/v1'\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/v1/one'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.payload, '/v1');\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/v1/v2/two'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.payload, '/v1/v2');\n  });\n});","file":"route-prefix.test.js","skipped":false,"dir":"test"},{"name":"matches both /prefix and /prefix/ with a / route","suites":[],"updatePoint":{"line":391,"column":54,"index":8183},"line":391,"code":"test('matches both /prefix and /prefix/ with a / route', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.register(function (fastify, opts, done) {\n    fastify.get('/', (req, reply) => {\n      reply.send({\n        hello: 'world'\n      });\n    });\n    done();\n  }, {\n    prefix: '/prefix'\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/prefix'\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      hello: 'world'\n    });\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/prefix/'\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      hello: 'world'\n    });\n  });\n});","file":"route-prefix.test.js","skipped":false,"dir":"test"},{"name":"prefix \"/prefix/\" does not match \"/prefix\" with a / route","suites":[],"updatePoint":{"line":423,"column":63,"index":8839},"line":423,"code":"test('prefix \"/prefix/\" does not match \"/prefix\" with a / route', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.register(function (fastify, opts, done) {\n    fastify.get('/', (req, reply) => {\n      reply.send({\n        hello: 'world'\n      });\n    });\n    done();\n  }, {\n    prefix: '/prefix/'\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/prefix'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 404);\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/prefix/'\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      hello: 'world'\n    });\n  });\n});","file":"route-prefix.test.js","skipped":false,"dir":"test"},{"name":"matches both /prefix and /prefix/ with a / route - ignoreTrailingSlash: true","suites":[],"updatePoint":{"line":453,"column":82,"index":9482},"line":453,"code":"test('matches both /prefix and /prefix/ with a / route - ignoreTrailingSlash: true', t => {\n  t.plan(4);\n  const fastify = Fastify({\n    ignoreTrailingSlash: true\n  });\n  fastify.register(function (fastify, opts, done) {\n    fastify.get('/', (req, reply) => {\n      reply.send({\n        hello: 'world'\n      });\n    });\n    done();\n  }, {\n    prefix: '/prefix'\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/prefix'\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      hello: 'world'\n    });\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/prefix/'\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      hello: 'world'\n    });\n  });\n});","file":"route-prefix.test.js","skipped":false,"dir":"test"},{"name":"matches both /prefix and /prefix/ with a / route - ignoreDuplicateSlashes: true","suites":[],"updatePoint":{"line":487,"column":85,"index":10195},"line":487,"code":"test('matches both /prefix and /prefix/ with a / route - ignoreDuplicateSlashes: true', t => {\n  t.plan(4);\n  const fastify = Fastify({\n    ignoreDuplicateSlashes: true\n  });\n  fastify.register(function (fastify, opts, done) {\n    fastify.get('/', (req, reply) => {\n      reply.send({\n        hello: 'world'\n      });\n    });\n    done();\n  }, {\n    prefix: '/prefix'\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/prefix'\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      hello: 'world'\n    });\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/prefix/'\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      hello: 'world'\n    });\n  });\n});","file":"route-prefix.test.js","skipped":false,"dir":"test"},{"name":"matches both /prefix and /prefix/  with a / route - prefixTrailingSlash: \"both\", ignoreTrailingSlash: false","suites":[],"updatePoint":{"line":521,"column":113,"index":10939},"line":521,"code":"test('matches both /prefix and /prefix/  with a / route - prefixTrailingSlash: \"both\", ignoreTrailingSlash: false', t => {\n  t.plan(4);\n  const fastify = Fastify({\n    ignoreTrailingSlash: false\n  });\n  fastify.register(function (fastify, opts, done) {\n    fastify.route({\n      method: 'GET',\n      url: '/',\n      prefixTrailingSlash: 'both',\n      handler: (req, reply) => {\n        reply.send({\n          hello: 'world'\n        });\n      }\n    });\n    done();\n  }, {\n    prefix: '/prefix'\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/prefix'\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      hello: 'world'\n    });\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/prefix/'\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      hello: 'world'\n    });\n  });\n});","file":"route-prefix.test.js","skipped":false,"dir":"test"},{"name":"matches both /prefix and /prefix/  with a / route - prefixTrailingSlash: \"both\", ignoreDuplicateSlashes: false","suites":[],"updatePoint":{"line":560,"column":116,"index":11784},"line":560,"code":"test('matches both /prefix and /prefix/  with a / route - prefixTrailingSlash: \"both\", ignoreDuplicateSlashes: false', t => {\n  t.plan(4);\n  const fastify = Fastify({\n    ignoreDuplicateSlashes: false\n  });\n  fastify.register(function (fastify, opts, done) {\n    fastify.route({\n      method: 'GET',\n      url: '/',\n      prefixTrailingSlash: 'both',\n      handler: (req, reply) => {\n        reply.send({\n          hello: 'world'\n        });\n      }\n    });\n    done();\n  }, {\n    prefix: '/prefix'\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/prefix'\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      hello: 'world'\n    });\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/prefix/'\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      hello: 'world'\n    });\n  });\n});","file":"route-prefix.test.js","skipped":false,"dir":"test"},{"name":"matches both /prefix and /prefix/ with a / route - ignoreTrailingSlash: true, ignoreDuplicateSlashes: true","suites":[],"updatePoint":{"line":599,"column":112,"index":12628},"line":599,"code":"test('matches both /prefix and /prefix/ with a / route - ignoreTrailingSlash: true, ignoreDuplicateSlashes: true', t => {\n  t.plan(4);\n  const fastify = Fastify({\n    ignoreTrailingSlash: true,\n    ignoreDuplicateSlashes: true\n  });\n  fastify.register(function (fastify, opts, done) {\n    fastify.get('/', (req, reply) => {\n      reply.send({\n        hello: 'world'\n      });\n    });\n    done();\n  }, {\n    prefix: '/prefix'\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/prefix'\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      hello: 'world'\n    });\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/prefix/'\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      hello: 'world'\n    });\n  });\n});","file":"route-prefix.test.js","skipped":false,"dir":"test"},{"name":"matches both /prefix and /prefix/ with a / route - ignoreTrailingSlash: true, ignoreDuplicateSlashes: false","suites":[],"updatePoint":{"line":634,"column":113,"index":13403},"line":634,"code":"test('matches both /prefix and /prefix/ with a / route - ignoreTrailingSlash: true, ignoreDuplicateSlashes: false', t => {\n  t.plan(4);\n  const fastify = Fastify({\n    ignoreTrailingSlash: true,\n    ignoreDuplicateSlashes: false\n  });\n  fastify.register(function (fastify, opts, done) {\n    fastify.get('/', (req, reply) => {\n      reply.send({\n        hello: 'world'\n      });\n    });\n    done();\n  }, {\n    prefix: '/prefix'\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/prefix'\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      hello: 'world'\n    });\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/prefix/'\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      hello: 'world'\n    });\n  });\n});","file":"route-prefix.test.js","skipped":false,"dir":"test"},{"name":"returns 404 status code with /prefix/ and / route - prefixTrailingSlash: \"both\" (default), ignoreTrailingSlash: true","suites":[],"updatePoint":{"line":669,"column":122,"index":14188},"line":669,"code":"test('returns 404 status code with /prefix/ and / route - prefixTrailingSlash: \"both\" (default), ignoreTrailingSlash: true', t => {\n  t.plan(2);\n  const fastify = Fastify({\n    ignoreTrailingSlash: true\n  });\n  fastify.register(function (fastify, opts, done) {\n    fastify.route({\n      method: 'GET',\n      url: '/',\n      handler: (req, reply) => {\n        reply.send({\n          hello: 'world'\n        });\n      }\n    });\n    done();\n  }, {\n    prefix: '/prefix/'\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/prefix//'\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      error: 'Not Found',\n      message: 'Route GET:/prefix// not found',\n      statusCode: 404\n    });\n  });\n});","file":"route-prefix.test.js","skipped":false,"dir":"test"},{"name":"matches both /prefix and /prefix/  with a / route - prefixTrailingSlash: \"both\", ignoreDuplicateSlashes: true","suites":[],"updatePoint":{"line":700,"column":115,"index":14904},"line":700,"code":"test('matches both /prefix and /prefix/  with a / route - prefixTrailingSlash: \"both\", ignoreDuplicateSlashes: true', t => {\n  t.plan(2);\n  const fastify = Fastify({\n    ignoreDuplicateSlashes: true\n  });\n  fastify.register(function (fastify, opts, done) {\n    fastify.route({\n      method: 'GET',\n      url: '/',\n      handler: (req, reply) => {\n        reply.send({\n          hello: 'world'\n        });\n      }\n    });\n    done();\n  }, {\n    prefix: '/prefix/'\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/prefix//'\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      hello: 'world'\n    });\n  });\n});","file":"route-prefix.test.js","skipped":false,"dir":"test"},{"name":"matches both /prefix and /prefix/  with a / route - prefixTrailingSlash: \"both\", ignoreTrailingSlash: true, ignoreDuplicateSlashes: true","suites":[],"updatePoint":{"line":729,"column":142,"index":15575},"line":729,"code":"test('matches both /prefix and /prefix/  with a / route - prefixTrailingSlash: \"both\", ignoreTrailingSlash: true, ignoreDuplicateSlashes: true', t => {\n  t.plan(2);\n  const fastify = Fastify({\n    ignoreTrailingSlash: true,\n    ignoreDuplicateSlashes: true\n  });\n  fastify.register(function (fastify, opts, done) {\n    fastify.route({\n      method: 'GET',\n      url: '/',\n      handler: (req, reply) => {\n        reply.send({\n          hello: 'world'\n        });\n      }\n    });\n    done();\n  }, {\n    prefix: '/prefix/'\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/prefix//'\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      hello: 'world'\n    });\n  });\n});","file":"route-prefix.test.js","skipped":false,"dir":"test"},{"name":"matches both /prefix and /prefix/  with a / route - prefixTrailingSlash: \"both\", ignoreDuplicateSlashes: true","suites":[],"updatePoint":{"line":759,"column":115,"index":16250},"line":759,"code":"test('matches both /prefix and /prefix/  with a / route - prefixTrailingSlash: \"both\", ignoreDuplicateSlashes: true', t => {\n  t.plan(2);\n  const fastify = Fastify({\n    ignoreTrailingSlash: true,\n    ignoreDuplicateSlashes: true\n  });\n  fastify.register(function (fastify, opts, done) {\n    fastify.route({\n      method: 'GET',\n      url: '/',\n      handler: (req, reply) => {\n        reply.send({\n          hello: 'world'\n        });\n      }\n    });\n    done();\n  }, {\n    prefix: '/prefix/'\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/prefix//'\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      hello: 'world'\n    });\n  });\n});","file":"route-prefix.test.js","skipped":false,"dir":"test"},{"name":"matches only /prefix  with a / route - prefixTrailingSlash: \"no-slash\", ignoreTrailingSlash: false","suites":[],"updatePoint":{"line":789,"column":104,"index":16914},"line":789,"code":"test('matches only /prefix  with a / route - prefixTrailingSlash: \"no-slash\", ignoreTrailingSlash: false', t => {\n  t.plan(4);\n  const fastify = Fastify({\n    ignoreTrailingSlash: false\n  });\n  fastify.register(function (fastify, opts, done) {\n    fastify.route({\n      method: 'GET',\n      url: '/',\n      prefixTrailingSlash: 'no-slash',\n      handler: (req, reply) => {\n        reply.send({\n          hello: 'world'\n        });\n      }\n    });\n    done();\n  }, {\n    prefix: '/prefix'\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/prefix'\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      hello: 'world'\n    });\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/prefix/'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(JSON.parse(res.payload).statusCode, 404);\n  });\n});","file":"route-prefix.test.js","skipped":false,"dir":"test"},{"name":"matches only /prefix  with a / route - prefixTrailingSlash: \"no-slash\", ignoreDuplicateSlashes: false","suites":[],"updatePoint":{"line":826,"column":107,"index":17741},"line":826,"code":"test('matches only /prefix  with a / route - prefixTrailingSlash: \"no-slash\", ignoreDuplicateSlashes: false', t => {\n  t.plan(4);\n  const fastify = Fastify({\n    ignoreDuplicateSlashes: false\n  });\n  fastify.register(function (fastify, opts, done) {\n    fastify.route({\n      method: 'GET',\n      url: '/',\n      prefixTrailingSlash: 'no-slash',\n      handler: (req, reply) => {\n        reply.send({\n          hello: 'world'\n        });\n      }\n    });\n    done();\n  }, {\n    prefix: '/prefix'\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/prefix'\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      hello: 'world'\n    });\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/prefix/'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(JSON.parse(res.payload).statusCode, 404);\n  });\n});","file":"route-prefix.test.js","skipped":false,"dir":"test"},{"name":"matches only /prefix/  with a / route - prefixTrailingSlash: \"slash\", ignoreTrailingSlash: false","suites":[],"updatePoint":{"line":863,"column":102,"index":18566},"line":863,"code":"test('matches only /prefix/  with a / route - prefixTrailingSlash: \"slash\", ignoreTrailingSlash: false', t => {\n  t.plan(4);\n  const fastify = Fastify({\n    ignoreTrailingSlash: false\n  });\n  fastify.register(function (fastify, opts, done) {\n    fastify.route({\n      method: 'GET',\n      url: '/',\n      prefixTrailingSlash: 'slash',\n      handler: (req, reply) => {\n        reply.send({\n          hello: 'world'\n        });\n      }\n    });\n    done();\n  }, {\n    prefix: '/prefix'\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/prefix/'\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      hello: 'world'\n    });\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/prefix'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(JSON.parse(res.payload).statusCode, 404);\n  });\n});","file":"route-prefix.test.js","skipped":false,"dir":"test"},{"name":"calls onRoute only once when prefixing","suites":[],"updatePoint":{"line":900,"column":44,"index":19327},"line":900,"code":"test('calls onRoute only once when prefixing', async t => {\n  t.plan(1);\n  const fastify = Fastify({\n    ignoreTrailingSlash: false,\n    exposeHeadRoutes: false\n  });\n  let onRouteCalled = 0;\n  fastify.register(function (fastify, opts, next) {\n    fastify.addHook('onRoute', () => {\n      onRouteCalled++;\n    });\n    fastify.route({\n      method: 'GET',\n      url: '/',\n      prefixTrailingSlash: 'both',\n      handler: (req, reply) => {\n        reply.send({\n          hello: 'world'\n        });\n      }\n    });\n    next();\n  }, {\n    prefix: '/prefix'\n  });\n  await fastify.ready();\n  t.same(onRouteCalled, 1);\n});","file":"route-prefix.test.js","skipped":false,"dir":"test"},{"name":"route","suites":[],"updatePoint":{"line":36,"column":11,"index":565},"line":36,"code":"test('route', t => {\n  t.plan(9);\n  const test = t.test;\n  const fastify = Fastify();\n  test('route - get', t => {\n    t.plan(1);\n\n    try {\n      fastify.route({\n        method: 'GET',\n        url: '/',\n        schema: {\n          response: {\n            '2xx': {\n              type: 'object',\n              properties: {\n                hello: {\n                  type: 'string'\n                }\n              }\n            }\n          }\n        },\n        handler: function (req, reply) {\n          reply.send({\n            hello: 'world'\n          });\n        }\n      });\n      t.pass();\n    } catch (e) {\n      t.fail();\n    }\n  });\n  test('missing schema - route', t => {\n    t.plan(1);\n\n    try {\n      fastify.route({\n        method: 'GET',\n        url: '/missing',\n        handler: function (req, reply) {\n          reply.send({\n            hello: 'world'\n          });\n        }\n      });\n      t.pass();\n    } catch (e) {\n      t.fail();\n    }\n  });\n  test('invalid handler attribute - route', t => {\n    t.plan(1);\n\n    try {\n      fastify.get('/', {\n        handler: 'not a function'\n      }, () => {});\n      t.fail();\n    } catch (e) {\n      t.pass();\n    }\n  });\n  test('Multiple methods', t => {\n    t.plan(1);\n\n    try {\n      fastify.route({\n        method: ['GET', 'DELETE'],\n        url: '/multiple',\n        handler: function (req, reply) {\n          reply.send({\n            hello: 'world'\n          });\n        }\n      });\n      t.pass();\n    } catch (e) {\n      t.fail();\n    }\n  });\n  test('Add multiple methods', t => {\n    t.plan(1);\n\n    try {\n      fastify.get('/add-multiple', function (req, reply) {\n        reply.send({\n          hello: 'Bob!'\n        });\n      });\n      fastify.route({\n        method: ['PUT', 'DELETE'],\n        url: '/add-multiple',\n        handler: function (req, reply) {\n          reply.send({\n            hello: 'world'\n          });\n        }\n      });\n      t.pass();\n    } catch (e) {\n      t.fail();\n    }\n  });\n  fastify.listen({\n    port: 0\n  }, function (err) {\n    if (err) t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    test('cannot add another route after binding', t => {\n      t.plan(1);\n\n      try {\n        fastify.route({\n          method: 'GET',\n          url: '/another-get-route',\n          handler: function (req, reply) {\n            reply.send({\n              hello: 'world'\n            });\n          }\n        });\n        t.fail();\n      } catch (e) {\n        t.pass();\n      }\n    });\n    test('route - get', t => {\n      t.plan(3);\n      sget({\n        method: 'GET',\n        url: 'http://localhost:' + fastify.server.address().port\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 200);\n        t.same(JSON.parse(body), {\n          hello: 'world'\n        });\n      });\n    });\n    test('route - missing schema', t => {\n      t.plan(3);\n      sget({\n        method: 'GET',\n        url: 'http://localhost:' + fastify.server.address().port + '/missing'\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 200);\n        t.same(JSON.parse(body), {\n          hello: 'world'\n        });\n      });\n    });\n    test('route - multiple methods', t => {\n      t.plan(6);\n      sget({\n        method: 'GET',\n        url: 'http://localhost:' + fastify.server.address().port + '/multiple'\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 200);\n        t.same(JSON.parse(body), {\n          hello: 'world'\n        });\n      });\n      sget({\n        method: 'DELETE',\n        url: 'http://localhost:' + fastify.server.address().port + '/multiple'\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 200);\n        t.same(JSON.parse(body), {\n          hello: 'world'\n        });\n      });\n    });\n  });\n});","file":"route.test.js","skipped":false,"dir":"test"},{"name":"route - get","suites":[],"updatePoint":{"line":40,"column":19,"index":659},"line":40,"code":"  test('route - get', t => {\n    t.plan(1);\n\n    try {\n      fastify.route({\n        method: 'GET',\n        url: '/',\n        schema: {\n          response: {\n            '2xx': {\n              type: 'object',\n              properties: {\n                hello: {\n                  type: 'string'\n                }\n              }\n            }\n          }\n        },\n        handler: function (req, reply) {\n          reply.send({\n            hello: 'world'\n          });\n        }\n      });\n      t.pass();\n    } catch (e) {\n      t.fail();\n    }\n  });","file":"route.test.js","skipped":false,"dir":"test"},{"name":"missing schema - route","suites":[],"updatePoint":{"line":70,"column":30,"index":1223},"line":70,"code":"  test('missing schema - route', t => {\n    t.plan(1);\n\n    try {\n      fastify.route({\n        method: 'GET',\n        url: '/missing',\n        handler: function (req, reply) {\n          reply.send({\n            hello: 'world'\n          });\n        }\n      });\n      t.pass();\n    } catch (e) {\n      t.fail();\n    }\n  });","file":"route.test.js","skipped":false,"dir":"test"},{"name":"invalid handler attribute - route","suites":[],"updatePoint":{"line":88,"column":41,"index":1557},"line":88,"code":"  test('invalid handler attribute - route', t => {\n    t.plan(1);\n\n    try {\n      fastify.get('/', {\n        handler: 'not a function'\n      }, () => {});\n      t.fail();\n    } catch (e) {\n      t.pass();\n    }\n  });","file":"route.test.js","skipped":false,"dir":"test"},{"name":"Multiple methods","suites":[],"updatePoint":{"line":100,"column":24,"index":1758},"line":100,"code":"  test('Multiple methods', t => {\n    t.plan(1);\n\n    try {\n      fastify.route({\n        method: ['GET', 'DELETE'],\n        url: '/multiple',\n        handler: function (req, reply) {\n          reply.send({\n            hello: 'world'\n          });\n        }\n      });\n      t.pass();\n    } catch (e) {\n      t.fail();\n    }\n  });","file":"route.test.js","skipped":false,"dir":"test"},{"name":"Add multiple methods","suites":[],"updatePoint":{"line":118,"column":28,"index":2092},"line":118,"code":"  test('Add multiple methods', t => {\n    t.plan(1);\n\n    try {\n      fastify.get('/add-multiple', function (req, reply) {\n        reply.send({\n          hello: 'Bob!'\n        });\n      });\n      fastify.route({\n        method: ['PUT', 'DELETE'],\n        url: '/add-multiple',\n        handler: function (req, reply) {\n          reply.send({\n            hello: 'world'\n          });\n        }\n      });\n      t.pass();\n    } catch (e) {\n      t.fail();\n    }\n  });","file":"route.test.js","skipped":false,"dir":"test"},{"name":"cannot add another route after binding","suites":[],"updatePoint":{"line":148,"column":48,"index":2710},"line":148,"code":"    test('cannot add another route after binding', t => {\n      t.plan(1);\n\n      try {\n        fastify.route({\n          method: 'GET',\n          url: '/another-get-route',\n          handler: function (req, reply) {\n            reply.send({\n              hello: 'world'\n            });\n          }\n        });\n        t.fail();\n      } catch (e) {\n        t.pass();\n      }\n    });","file":"route.test.js","skipped":false,"dir":"test"},{"name":"route - get","suites":[],"updatePoint":{"line":166,"column":21,"index":3066},"line":166,"code":"    test('route - get', t => {\n      t.plan(3);\n      sget({\n        method: 'GET',\n        url: 'http://localhost:' + fastify.server.address().port\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 200);\n        t.same(JSON.parse(body), {\n          hello: 'world'\n        });\n      });\n    });","file":"route.test.js","skipped":false,"dir":"test"},{"name":"route - missing schema","suites":[],"updatePoint":{"line":179,"column":32,"index":3417},"line":179,"code":"    test('route - missing schema', t => {\n      t.plan(3);\n      sget({\n        method: 'GET',\n        url: 'http://localhost:' + fastify.server.address().port + '/missing'\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 200);\n        t.same(JSON.parse(body), {\n          hello: 'world'\n        });\n      });\n    });","file":"route.test.js","skipped":false,"dir":"test"},{"name":"route - multiple methods","suites":[],"updatePoint":{"line":192,"column":34,"index":3783},"line":192,"code":"    test('route - multiple methods', t => {\n      t.plan(6);\n      sget({\n        method: 'GET',\n        url: 'http://localhost:' + fastify.server.address().port + '/multiple'\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 200);\n        t.same(JSON.parse(body), {\n          hello: 'world'\n        });\n      });\n      sget({\n        method: 'DELETE',\n        url: 'http://localhost:' + fastify.server.address().port + '/multiple'\n      }, (err, response, body) => {\n        t.error(err);\n        t.equal(response.statusCode, 200);\n        t.same(JSON.parse(body), {\n          hello: 'world'\n        });\n      });\n    });","file":"route.test.js","skipped":false,"dir":"test"},{"name":"invalid schema - route","suites":[],"updatePoint":{"line":217,"column":28,"index":4455},"line":217,"code":"test('invalid schema - route', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.route({\n    handler: () => {},\n    method: 'GET',\n    url: '/invalid',\n    schema: {\n      querystring: {\n        id: 'string'\n      }\n    }\n  });\n  fastify.after(err => {\n    t.notOk(err, 'the error is throw on preReady');\n  });\n  fastify.ready(err => {\n    t.equal(err.code, 'FST_ERR_SCH_VALIDATION_BUILD');\n    t.match(err.message, /Failed building the validation schema for GET: \\/invalid/);\n  });\n});","file":"route.test.js","skipped":false,"dir":"test"},{"name":"same route definition object on multiple prefixes","suites":[],"updatePoint":{"line":238,"column":55,"index":4978},"line":238,"code":"test('same route definition object on multiple prefixes', async t => {\n  t.plan(2);\n  const routeObject = {\n    handler: () => {},\n    method: 'GET',\n    url: '/simple'\n  };\n  const fastify = Fastify({\n    exposeHeadRoutes: false\n  });\n  fastify.register(async function (f) {\n    f.addHook('onRoute', routeOptions => {\n      t.equal(routeOptions.url, '/v1/simple');\n    });\n    f.route(routeObject);\n  }, {\n    prefix: '/v1'\n  });\n  fastify.register(async function (f) {\n    f.addHook('onRoute', routeOptions => {\n      t.equal(routeOptions.url, '/v2/simple');\n    });\n    f.route(routeObject);\n  }, {\n    prefix: '/v2'\n  });\n  await fastify.ready();\n});","file":"route.test.js","skipped":false,"dir":"test"},{"name":"path can be specified in place of uri","suites":[],"updatePoint":{"line":266,"column":43,"index":5621},"line":266,"code":"test('path can be specified in place of uri', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.route({\n    method: 'GET',\n    path: '/path',\n    handler: function (req, reply) {\n      reply.send({\n        hello: 'world'\n      });\n    }\n  });\n  const reqOpts = {\n    method: 'GET',\n    url: '/path'\n  };\n  fastify.inject(reqOpts, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.same(JSON.parse(res.payload), {\n      hello: 'world'\n    });\n  });\n});","file":"route.test.js","skipped":false,"dir":"test"},{"name":"invalid bodyLimit option - route","suites":[],"updatePoint":{"line":290,"column":38,"index":6100},"line":290,"code":"test('invalid bodyLimit option - route', t => {\n  t.plan(2);\n  const fastify = Fastify();\n\n  try {\n    fastify.route({\n      bodyLimit: false,\n      method: 'PUT',\n      handler: () => null\n    });\n    t.fail('bodyLimit must be an integer');\n  } catch (err) {\n    t.equal(err.message, \"'bodyLimit' option must be an integer > 0. Got 'false'\");\n  }\n\n  try {\n    fastify.post('/url', {\n      bodyLimit: 10000.1\n    }, () => null);\n    t.fail('bodyLimit must be an integer');\n  } catch (err) {\n    t.equal(err.message, \"'bodyLimit' option must be an integer > 0. Got '10000.1'\");\n  }\n});","file":"route.test.js","skipped":false,"dir":"test"},{"name":"handler function in options of shorthand route should works correctly","suites":[],"updatePoint":{"line":314,"column":75,"index":6722},"line":314,"code":"test('handler function in options of shorthand route should works correctly', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.get('/foo', {\n    handler: (req, reply) => {\n      reply.send({\n        hello: 'world'\n      });\n    }\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/foo'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.same(JSON.parse(res.payload), {\n      hello: 'world'\n    });\n  });\n});","file":"route.test.js","skipped":false,"dir":"test"},{"name":"does not mutate joi schemas","suites":[],"updatePoint":{"line":335,"column":33,"index":7130},"line":335,"code":"test('does not mutate joi schemas', t => {\n  t.plan(4);\n  const fastify = Fastify();\n\n  function validatorCompiler({\n    schema,\n    method,\n    url,\n    httpPart\n  }) {\n    // Needed to extract the params part,\n    // without the JSON-schema encapsulation\n    // that is automatically added by the short\n    // form of params.\n    schema = joi.object(schema.properties);\n    return validateHttpData;\n\n    function validateHttpData(data) {\n      return schema.validate(data);\n    }\n  }\n\n  fastify.setValidatorCompiler(validatorCompiler);\n  fastify.route({\n    path: '/foo/:an_id',\n    method: 'GET',\n    schema: {\n      params: {\n        an_id: joi.number()\n      }\n    },\n\n    handler(req, res) {\n      t.same(req.params, {\n        an_id: 42\n      });\n      res.send({\n        hello: 'world'\n      });\n    }\n\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/foo/42'\n  }, (err, result) => {\n    t.error(err);\n    t.equal(result.statusCode, 200);\n    t.same(JSON.parse(result.payload), {\n      hello: 'world'\n    });\n  });\n});","file":"route.test.js","skipped":false,"dir":"test"},{"name":"multiple routes with one schema","suites":[],"updatePoint":{"line":388,"column":37,"index":8166},"line":388,"code":"test('multiple routes with one schema', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  const schema = {\n    query: {\n      id: {\n        type: 'number'\n      }\n    }\n  };\n  fastify.route({\n    schema,\n    method: 'GET',\n    path: '/first/:id',\n\n    handler(req, res) {\n      res.send({\n        hello: 'world'\n      });\n    }\n\n  });\n  fastify.route({\n    schema,\n    method: 'GET',\n    path: '/second/:id',\n\n    handler(req, res) {\n      res.send({\n        hello: 'world'\n      });\n    }\n\n  });\n  fastify.ready(error => {\n    t.error(error);\n    t.same(schema, schema);\n  });\n});","file":"route.test.js","skipped":false,"dir":"test"},{"name":"route error handler overrides default error handler","suites":[],"updatePoint":{"line":427,"column":57,"index":8769},"line":427,"code":"test('route error handler overrides default error handler', t => {\n  t.plan(4);\n  const fastify = Fastify();\n\n  const customRouteErrorHandler = (error, request, reply) => {\n    t.equal(error.message, 'Wrong Pot Error');\n    reply.code(418).send({\n      message: 'Make a brew',\n      statusCode: 418,\n      error: 'Wrong Pot Error'\n    });\n  };\n\n  fastify.route({\n    method: 'GET',\n    path: '/coffee',\n    handler: (req, res) => {\n      res.send(new Error('Wrong Pot Error'));\n    },\n    errorHandler: customRouteErrorHandler\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/coffee'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 418);\n    t.same(JSON.parse(res.payload), {\n      message: 'Make a brew',\n      statusCode: 418,\n      error: 'Wrong Pot Error'\n    });\n  });\n});","file":"route.test.js","skipped":false,"dir":"test"},{"name":"route error handler does not affect other routes","suites":[],"updatePoint":{"line":461,"column":54,"index":9573},"line":461,"code":"test('route error handler does not affect other routes', t => {\n  t.plan(3);\n  const fastify = Fastify();\n\n  const customRouteErrorHandler = (error, request, reply) => {\n    t.equal(error.message, 'Wrong Pot Error');\n    reply.code(418).send({\n      message: 'Make a brew',\n      statusCode: 418,\n      error: 'Wrong Pot Error'\n    });\n  };\n\n  fastify.route({\n    method: 'GET',\n    path: '/coffee',\n    handler: (req, res) => {\n      res.send(new Error('Wrong Pot Error'));\n    },\n    errorHandler: customRouteErrorHandler\n  });\n  fastify.route({\n    method: 'GET',\n    path: '/tea',\n    handler: (req, res) => {\n      res.send(new Error('No tea today'));\n    }\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/tea'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 500);\n    t.same(JSON.parse(res.payload), {\n      message: 'No tea today',\n      statusCode: 500,\n      error: 'Internal Server Error'\n    });\n  });\n});","file":"route.test.js","skipped":false,"dir":"test"},{"name":"async error handler for a route","suites":[],"updatePoint":{"line":502,"column":37,"index":10503},"line":502,"code":"test('async error handler for a route', t => {\n  t.plan(4);\n  const fastify = Fastify();\n\n  const customRouteErrorHandler = async (error, request, reply) => {\n    t.equal(error.message, 'Delayed Pot Error');\n    reply.code(418);\n    return {\n      message: 'Make a brew sometime later',\n      statusCode: 418,\n      error: 'Delayed Pot Error'\n    };\n  };\n\n  fastify.route({\n    method: 'GET',\n    path: '/late-coffee',\n    handler: (req, res) => {\n      res.send(new Error('Delayed Pot Error'));\n    },\n    errorHandler: customRouteErrorHandler\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/late-coffee'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 418);\n    t.same(JSON.parse(res.payload), {\n      message: 'Make a brew sometime later',\n      statusCode: 418,\n      error: 'Delayed Pot Error'\n    });\n  });\n});","file":"route.test.js","skipped":false,"dir":"test"},{"name":"route error handler overrides global custom error handler","suites":[],"updatePoint":{"line":537,"column":63,"index":11376},"line":537,"code":"test('route error handler overrides global custom error handler', t => {\n  t.plan(4);\n  const fastify = Fastify();\n\n  const customGlobalErrorHandler = (error, request, reply) => {\n    t.error(error);\n    reply.code(429).send({\n      message: 'Too much coffee'\n    });\n  };\n\n  const customRouteErrorHandler = (error, request, reply) => {\n    t.equal(error.message, 'Wrong Pot Error');\n    reply.code(418).send({\n      message: 'Make a brew',\n      statusCode: 418,\n      error: 'Wrong Pot Error'\n    });\n  };\n\n  fastify.setErrorHandler(customGlobalErrorHandler);\n  fastify.route({\n    method: 'GET',\n    path: '/more-coffee',\n    handler: (req, res) => {\n      res.send(new Error('Wrong Pot Error'));\n    },\n    errorHandler: customRouteErrorHandler\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/more-coffee'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 418);\n    t.same(JSON.parse(res.payload), {\n      message: 'Make a brew',\n      statusCode: 418,\n      error: 'Wrong Pot Error'\n    });\n  });\n});","file":"route.test.js","skipped":false,"dir":"test"},{"name":"throws when route with empty url","suites":[],"updatePoint":{"line":579,"column":38,"index":12385},"line":579,"code":"test('throws when route with empty url', async t => {\n  t.plan(1);\n  const fastify = Fastify();\n\n  try {\n    fastify.route({\n      method: 'GET',\n      url: '',\n      handler: (req, res) => {\n        res.send('hi!');\n      }\n    });\n  } catch (err) {\n    t.equal(err.message, 'The path could not be empty');\n  }\n});","file":"route.test.js","skipped":false,"dir":"test"},{"name":"throws when route with empty url in shorthand declaration","suites":[],"updatePoint":{"line":595,"column":63,"index":12726},"line":595,"code":"test('throws when route with empty url in shorthand declaration', async t => {\n  t.plan(1);\n  const fastify = Fastify();\n\n  try {\n    fastify.get('', async function handler() {\n      return {};\n    });\n  } catch (err) {\n    t.equal(err.message, 'The path could not be empty');\n  }\n});","file":"route.test.js","skipped":false,"dir":"test"},{"name":"throws when route-level error handler is not a function","suites":[],"updatePoint":{"line":607,"column":61,"index":13009},"line":607,"code":"test('throws when route-level error handler is not a function', t => {\n  t.plan(1);\n  const fastify = Fastify();\n\n  try {\n    fastify.route({\n      method: 'GET',\n      url: '/tea',\n      handler: (req, res) => {\n        res.send('hi!');\n      },\n      errorHandler: 'teapot'\n    });\n  } catch (err) {\n    t.equal(err.message, 'Error Handler for GET:/tea route, if defined, must be a function');\n  }\n});","file":"route.test.js","skipped":false,"dir":"test"},{"name":"Creates a HEAD route for each GET one (default)","suites":[],"updatePoint":{"line":624,"column":53,"index":13405},"line":624,"code":"test('Creates a HEAD route for each GET one (default)', t => {\n  t.plan(8);\n  const fastify = Fastify();\n  fastify.route({\n    method: 'GET',\n    path: '/more-coffee',\n    handler: (req, reply) => {\n      reply.send({\n        here: 'is coffee'\n      });\n    }\n  });\n  fastify.route({\n    method: 'GET',\n    path: '/some-light',\n    handler: (req, reply) => {\n      reply.send('Get some light!');\n    }\n  });\n  fastify.inject({\n    method: 'HEAD',\n    url: '/more-coffee'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 200);\n    t.equal(res.headers['content-type'], 'application/json; charset=utf-8');\n    t.same(res.body, '');\n  });\n  fastify.inject({\n    method: 'HEAD',\n    url: '/some-light'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 200);\n    t.equal(res.headers['content-type'], 'text/plain; charset=utf-8');\n    t.equal(res.body, '');\n  });\n});","file":"route.test.js","skipped":false,"dir":"test"},{"name":"Do not create a HEAD route for each GET one (exposeHeadRoutes: false)","suites":[],"updatePoint":{"line":662,"column":75,"index":14331},"line":662,"code":"test('Do not create a HEAD route for each GET one (exposeHeadRoutes: false)', t => {\n  t.plan(4);\n  const fastify = Fastify({\n    exposeHeadRoutes: false\n  });\n  fastify.route({\n    method: 'GET',\n    path: '/more-coffee',\n    handler: (req, reply) => {\n      reply.send({\n        here: 'is coffee'\n      });\n    }\n  });\n  fastify.route({\n    method: 'GET',\n    path: '/some-light',\n    handler: (req, reply) => {\n      reply.send('Get some light!');\n    }\n  });\n  fastify.inject({\n    method: 'HEAD',\n    url: '/more-coffee'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 404);\n  });\n  fastify.inject({\n    method: 'HEAD',\n    url: '/some-light'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 404);\n  });\n});","file":"route.test.js","skipped":false,"dir":"test"},{"name":"Creates a HEAD route for each GET one","suites":[],"updatePoint":{"line":698,"column":43,"index":15057},"line":698,"code":"test('Creates a HEAD route for each GET one', t => {\n  t.plan(8);\n  const fastify = Fastify({\n    exposeHeadRoutes: true\n  });\n  fastify.route({\n    method: 'GET',\n    path: '/more-coffee',\n    handler: (req, reply) => {\n      reply.send({\n        here: 'is coffee'\n      });\n    }\n  });\n  fastify.route({\n    method: 'GET',\n    path: '/some-light',\n    handler: (req, reply) => {\n      reply.send('Get some light!');\n    }\n  });\n  fastify.inject({\n    method: 'HEAD',\n    url: '/more-coffee'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 200);\n    t.equal(res.headers['content-type'], 'application/json; charset=utf-8');\n    t.same(res.body, '');\n  });\n  fastify.inject({\n    method: 'HEAD',\n    url: '/some-light'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 200);\n    t.equal(res.headers['content-type'], 'text/plain; charset=utf-8');\n    t.equal(res.body, '');\n  });\n});","file":"route.test.js","skipped":false,"dir":"test"},{"name":"Creates a HEAD route for a GET one with prefixTrailingSlash","suites":[],"updatePoint":{"line":738,"column":65,"index":16005},"line":738,"code":"test('Creates a HEAD route for a GET one with prefixTrailingSlash', async t => {\n  t.plan(1);\n  const fastify = Fastify();\n  const arr = [];\n  fastify.register((instance, opts, next) => {\n    instance.addHook('onRoute', routeOptions => {\n      arr.push(`${routeOptions.method} ${routeOptions.url}`);\n    });\n    instance.route({\n      method: 'GET',\n      path: '/',\n      exposeHeadRoute: true,\n      prefixTrailingSlash: 'both',\n      handler: (req, reply) => {\n        reply.send({\n          here: 'is coffee'\n        });\n      }\n    });\n    next();\n  }, {\n    prefix: '/v1'\n  });\n  await fastify.ready();\n  t.ok(true);\n});","file":"route.test.js","skipped":false,"dir":"test"},{"name":"Will not create a HEAD route that is not GET","suites":[],"updatePoint":{"line":764,"column":50,"index":16617},"line":764,"code":"test('Will not create a HEAD route that is not GET', t => {\n  t.plan(11);\n  const fastify = Fastify({\n    exposeHeadRoutes: true\n  });\n  fastify.route({\n    method: 'GET',\n    path: '/more-coffee',\n    handler: (req, reply) => {\n      reply.send({\n        here: 'is coffee'\n      });\n    }\n  });\n  fastify.route({\n    method: 'GET',\n    path: '/some-light',\n    handler: (req, reply) => {\n      reply.send();\n    }\n  });\n  fastify.route({\n    method: 'POST',\n    path: '/something',\n    handler: (req, reply) => {\n      reply.send({\n        look: 'It is something!'\n      });\n    }\n  });\n  fastify.inject({\n    method: 'HEAD',\n    url: '/more-coffee'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 200);\n    t.equal(res.headers['content-type'], 'application/json; charset=utf-8');\n    t.same(res.body, '');\n  });\n  fastify.inject({\n    method: 'HEAD',\n    url: '/some-light'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 200);\n    t.equal(res.headers['content-type'], undefined);\n    t.equal(res.headers['content-length'], '0');\n    t.equal(res.body, '');\n  });\n  fastify.inject({\n    method: 'HEAD',\n    url: '/something'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 404);\n  });\n});","file":"route.test.js","skipped":false,"dir":"test"},{"name":"HEAD route should handle properly each response type","suites":[],"updatePoint":{"line":821,"column":58,"index":17884},"line":821,"code":"test('HEAD route should handle properly each response type', t => {\n  t.plan(25);\n  const fastify = Fastify({\n    exposeHeadRoutes: true\n  });\n  const resString = 'Found me!';\n  const resJSON = {\n    here: 'is Johnny'\n  };\n  const resBuffer = Buffer.from('I am a buffer!');\n  const resStream = stream.Readable.from('I am a stream!');\n  fastify.route({\n    method: 'GET',\n    path: '/json',\n    handler: (req, reply) => {\n      reply.send(resJSON);\n    }\n  });\n  fastify.route({\n    method: 'GET',\n    path: '/string',\n    handler: (req, reply) => {\n      reply.send(resString);\n    }\n  });\n  fastify.route({\n    method: 'GET',\n    path: '/buffer',\n    handler: (req, reply) => {\n      reply.send(resBuffer);\n    }\n  });\n  fastify.route({\n    method: 'GET',\n    path: '/buffer-with-content-type',\n    handler: (req, reply) => {\n      reply.headers({\n        'content-type': 'image/jpeg'\n      });\n      reply.send(resBuffer);\n    }\n  });\n  fastify.route({\n    method: 'GET',\n    path: '/stream',\n    handler: (req, reply) => {\n      return resStream;\n    }\n  });\n  fastify.inject({\n    method: 'HEAD',\n    url: '/json'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 200);\n    t.equal(res.headers['content-type'], 'application/json; charset=utf-8');\n    t.equal(res.headers['content-length'], `${Buffer.byteLength(JSON.stringify(resJSON))}`);\n    t.same(res.body, '');\n  });\n  fastify.inject({\n    method: 'HEAD',\n    url: '/string'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 200);\n    t.equal(res.headers['content-type'], 'text/plain; charset=utf-8');\n    t.equal(res.headers['content-length'], `${Buffer.byteLength(resString)}`);\n    t.equal(res.body, '');\n  });\n  fastify.inject({\n    method: 'HEAD',\n    url: '/buffer'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 200);\n    t.equal(res.headers['content-type'], 'application/octet-stream');\n    t.equal(res.headers['content-length'], `${resBuffer.byteLength}`);\n    t.equal(res.body, '');\n  });\n  fastify.inject({\n    method: 'HEAD',\n    url: '/buffer-with-content-type'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 200);\n    t.equal(res.headers['content-type'], 'image/jpeg');\n    t.equal(res.headers['content-length'], `${resBuffer.byteLength}`);\n    t.equal(res.body, '');\n  });\n  fastify.inject({\n    method: 'HEAD',\n    url: '/stream'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 200);\n    t.equal(res.headers['content-type'], undefined);\n    t.equal(res.headers['content-length'], undefined);\n    t.equal(res.body, '');\n  });\n});","file":"route.test.js","skipped":false,"dir":"test"},{"name":"HEAD route should respect custom onSend handlers","suites":[],"updatePoint":{"line":921,"column":54,"index":20497},"line":921,"code":"test('HEAD route should respect custom onSend handlers', t => {\n  t.plan(6);\n  let counter = 0;\n  const resBuffer = Buffer.from('I am a coffee!');\n  const fastify = Fastify({\n    exposeHeadRoutes: true\n  });\n\n  const customOnSend = (res, reply, payload, done) => {\n    counter = counter + 1;\n    done(null, payload);\n  };\n\n  fastify.route({\n    method: 'GET',\n    path: '/more-coffee',\n    handler: (req, reply) => {\n      reply.send(resBuffer);\n    },\n    onSend: [customOnSend, customOnSend]\n  });\n  fastify.inject({\n    method: 'HEAD',\n    url: '/more-coffee'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 200);\n    t.equal(res.headers['content-type'], 'application/octet-stream');\n    t.equal(res.headers['content-length'], `${resBuffer.byteLength}`);\n    t.equal(res.body, '');\n    t.equal(counter, 2);\n  });\n});","file":"route.test.js","skipped":false,"dir":"test"},{"name":"route onSend can be function or array of functions","suites":[],"updatePoint":{"line":954,"column":56,"index":21342},"line":954,"code":"test('route onSend can be function or array of functions', t => {\n  t.plan(12);\n  const counters = {\n    single: 0,\n    multiple: 0\n  };\n  const resBuffer = Buffer.from('I am a coffee!');\n  const fastify = Fastify({\n    exposeHeadRoutes: true\n  });\n  fastify.route({\n    method: 'GET',\n    path: '/coffee',\n    handler: () => resBuffer,\n    onSend: (res, reply, payload, done) => {\n      counters.single += 1;\n      done(null, payload);\n    }\n  });\n\n  const customOnSend = (res, reply, payload, done) => {\n    counters.multiple += 1;\n    done(null, payload);\n  };\n\n  fastify.route({\n    method: 'GET',\n    path: '/more-coffee',\n    handler: () => resBuffer,\n    onSend: [customOnSend, customOnSend]\n  });\n  fastify.inject({\n    method: 'HEAD',\n    url: '/coffee'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 200);\n    t.equal(res.headers['content-type'], 'application/octet-stream');\n    t.equal(res.headers['content-length'], `${resBuffer.byteLength}`);\n    t.equal(res.body, '');\n    t.equal(counters.single, 1);\n  });\n  fastify.inject({\n    method: 'HEAD',\n    url: '/more-coffee'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 200);\n    t.equal(res.headers['content-type'], 'application/octet-stream');\n    t.equal(res.headers['content-length'], `${resBuffer.byteLength}`);\n    t.equal(res.body, '');\n    t.equal(counters.multiple, 2);\n  });\n});","file":"route.test.js","skipped":false,"dir":"test"},{"name":"no warning for exposeHeadRoute","suites":[],"updatePoint":{"line":1008,"column":36,"index":22722},"line":1008,"code":"test('no warning for exposeHeadRoute', async t => {\n  const fastify = Fastify();\n  fastify.route({\n    method: 'GET',\n    path: '/more-coffee',\n    exposeHeadRoute: true,\n\n    async handler() {\n      return 'hello world';\n    }\n\n  });\n\n  const listener = w => {\n    t.fail('no warning');\n  };\n\n  process.on('warning', listener);\n  await fastify.listen({\n    port: 0\n  });\n  process.removeListener('warning', listener);\n  await fastify.close();\n});","file":"route.test.js","skipped":false,"dir":"test"},{"name":"HEAD route should handle stream.on('error')","suites":[],"updatePoint":{"line":1032,"column":49,"index":23183},"line":1032,"code":"test(\"HEAD route should handle stream.on('error')\", t => {\n  t.plan(6);\n  const resStream = stream.Readable.from('Hello with error!');\n  const logStream = split(JSON.parse);\n  const expectedError = new Error('Hello!');\n  const fastify = Fastify({\n    logger: {\n      stream: logStream,\n      level: 'error'\n    }\n  });\n  fastify.route({\n    method: 'GET',\n    path: '/more-coffee',\n    exposeHeadRoute: true,\n    handler: (req, reply) => {\n      process.nextTick(() => resStream.emit('error', expectedError));\n      return resStream;\n    }\n  });\n  logStream.once('data', line => {\n    const {\n      message,\n      stack\n    } = expectedError;\n    t.same(line.err, {\n      type: 'Error',\n      message,\n      stack\n    });\n    t.equal(line.msg, 'Error on Stream found for HEAD route');\n    t.equal(line.level, 50);\n  });\n  fastify.inject({\n    method: 'HEAD',\n    url: '/more-coffee'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 200);\n    t.equal(res.headers['content-type'], undefined);\n  });\n});","file":"route.test.js","skipped":false,"dir":"test"},{"name":"HEAD route should be exposed by default","suites":[],"updatePoint":{"line":1074,"column":45,"index":24202},"line":1074,"code":"test('HEAD route should be exposed by default', t => {\n  t.plan(7);\n  const resStream = stream.Readable.from('Hello with error!');\n  const resJson = {\n    hello: 'world'\n  };\n  const fastify = Fastify();\n  fastify.route({\n    method: 'GET',\n    path: '/without-flag',\n    handler: (req, reply) => {\n      return resStream;\n    }\n  });\n  fastify.route({\n    exposeHeadRoute: true,\n    method: 'GET',\n    path: '/with-flag',\n    handler: (req, reply) => {\n      return resJson;\n    }\n  });\n  fastify.inject({\n    method: 'HEAD',\n    url: '/without-flag'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 200);\n  });\n  fastify.inject({\n    method: 'HEAD',\n    url: '/with-flag'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 200);\n    t.equal(res.headers['content-type'], 'application/json; charset=utf-8');\n    t.equal(res.headers['content-length'], `${Buffer.byteLength(JSON.stringify(resJson))}`);\n    t.equal(res.body, '');\n  });\n});","file":"route.test.js","skipped":false,"dir":"test"},{"name":"HEAD route should be exposed if route exposeHeadRoute is set","suites":[],"updatePoint":{"line":1114,"column":66,"index":25203},"line":1114,"code":"test('HEAD route should be exposed if route exposeHeadRoute is set', t => {\n  t.plan(7);\n  const resBuffer = Buffer.from('I am a coffee!');\n  const resJson = {\n    hello: 'world'\n  };\n  const fastify = Fastify({\n    exposeHeadRoutes: false\n  });\n  fastify.route({\n    exposeHeadRoute: true,\n    method: 'GET',\n    path: '/one',\n    handler: (req, reply) => {\n      return resBuffer;\n    }\n  });\n  fastify.route({\n    method: 'GET',\n    path: '/two',\n    handler: (req, reply) => {\n      return resJson;\n    }\n  });\n  fastify.inject({\n    method: 'HEAD',\n    url: '/one'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 200);\n    t.equal(res.headers['content-type'], 'application/octet-stream');\n    t.equal(res.headers['content-length'], `${resBuffer.byteLength}`);\n    t.equal(res.body, '');\n  });\n  fastify.inject({\n    method: 'HEAD',\n    url: '/two'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 404);\n  });\n});","file":"route.test.js","skipped":false,"dir":"test"},{"name":"Set a custom HEAD route before GET one without disabling exposeHeadRoutes (global)","suites":[],"updatePoint":{"line":1156,"column":88,"index":26188},"line":1156,"code":"test('Set a custom HEAD route before GET one without disabling exposeHeadRoutes (global)', t => {\n  t.plan(6);\n  const resBuffer = Buffer.from('I am a coffee!');\n  const fastify = Fastify({\n    exposeHeadRoutes: true\n  });\n  fastify.route({\n    method: 'HEAD',\n    path: '/one',\n    handler: (req, reply) => {\n      reply.header('content-type', 'application/pdf');\n      reply.header('content-length', `${resBuffer.byteLength}`);\n      reply.header('x-custom-header', 'some-custom-header');\n      reply.send();\n    }\n  });\n  fastify.route({\n    method: 'GET',\n    path: '/one',\n    handler: (req, reply) => {\n      return resBuffer;\n    }\n  });\n  fastify.inject({\n    method: 'HEAD',\n    url: '/one'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 200);\n    t.equal(res.headers['content-type'], 'application/pdf');\n    t.equal(res.headers['content-length'], `${resBuffer.byteLength}`);\n    t.equal(res.headers['x-custom-header'], 'some-custom-header');\n    t.equal(res.body, '');\n  });\n});","file":"route.test.js","skipped":false,"dir":"test"},{"name":"Set a custom HEAD route before GET one without disabling exposeHeadRoutes (route)","suites":[],"updatePoint":{"line":1191,"column":87,"index":27200},"line":1191,"code":"test('Set a custom HEAD route before GET one without disabling exposeHeadRoutes (route)', t => {\n  t.plan(7);\n\n  function onWarning(code) {\n    t.equal(code, 'FSTDEP007');\n  }\n\n  const warning = {\n    emit: onWarning\n  };\n  const route = proxyquire('../lib/route', {\n    './warnings': warning\n  });\n  const fastify = proxyquire('..', {\n    './lib/route.js': route\n  })();\n  const resBuffer = Buffer.from('I am a coffee!');\n  fastify.route({\n    method: 'HEAD',\n    path: '/one',\n    handler: (req, reply) => {\n      reply.header('content-type', 'application/pdf');\n      reply.header('content-length', `${resBuffer.byteLength}`);\n      reply.header('x-custom-header', 'some-custom-header');\n      reply.send();\n    }\n  });\n  fastify.route({\n    method: 'GET',\n    exposeHeadRoute: true,\n    path: '/one',\n    handler: (req, reply) => {\n      return resBuffer;\n    }\n  });\n  fastify.inject({\n    method: 'HEAD',\n    url: '/one'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 200);\n    t.equal(res.headers['content-type'], 'application/pdf');\n    t.equal(res.headers['content-length'], `${resBuffer.byteLength}`);\n    t.equal(res.headers['x-custom-header'], 'some-custom-header');\n    t.equal(res.body, '');\n  });\n});","file":"route.test.js","skipped":false,"dir":"test"},{"name":"HEAD routes properly auto created for GET routes when prefixTrailingSlash: 'no-slash'","suites":[],"updatePoint":{"line":1238,"column":93,"index":28446},"line":1238,"code":"test('HEAD routes properly auto created for GET routes when prefixTrailingSlash: \\'no-slash\\'', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  fastify.register(function routes(f, opts, next) {\n    f.route({\n      method: 'GET',\n      url: '/',\n      exposeHeadRoute: true,\n      prefixTrailingSlash: 'no-slash',\n      handler: (req, reply) => {\n        reply.send({\n          hello: 'world'\n        });\n      }\n    });\n    next();\n  }, {\n    prefix: '/prefix'\n  });\n  fastify.inject({\n    url: '/prefix/prefix',\n    method: 'HEAD'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 404);\n  });\n});","file":"route.test.js","skipped":false,"dir":"test"},{"name":"HEAD routes properly auto created for GET routes when prefixTrailingSlash: 'both'","suites":[],"updatePoint":{"line":1265,"column":89,"index":29060},"line":1265,"code":"test('HEAD routes properly auto created for GET routes when prefixTrailingSlash: \\'both\\'', async t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.register(function routes(f, opts, next) {\n    f.route({\n      method: 'GET',\n      url: '/',\n      exposeHeadRoute: true,\n      prefixTrailingSlash: 'both',\n      handler: (req, reply) => {\n        reply.send({\n          hello: 'world'\n        });\n      }\n    });\n    next();\n  }, {\n    prefix: '/prefix'\n  });\n  const doublePrefixReply = await fastify.inject({\n    url: '/prefix/prefix',\n    method: 'HEAD'\n  });\n  const trailingSlashReply = await fastify.inject({\n    url: '/prefix/',\n    method: 'HEAD'\n  });\n  const noneTrailingReply = await fastify.inject({\n    url: '/prefix',\n    method: 'HEAD'\n  });\n  t.equal(doublePrefixReply.statusCode, 404);\n  t.equal(trailingSlashReply.statusCode, 200);\n  t.equal(noneTrailingReply.statusCode, 200);\n});","file":"route.test.js","skipped":false,"dir":"test"},{"name":"Request and Reply share the route config","suites":[],"updatePoint":{"line":1300,"column":46,"index":29925},"line":1300,"code":"test('Request and Reply share the route config', async t => {\n  t.plan(3);\n  const fastify = Fastify();\n  const config = {\n    this: 'is a string',\n    thisIs: function aFunction() {}\n  };\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    config,\n    handler: (req, reply) => {\n      t.same(req.context, reply.context);\n      t.same(req.context.config, reply.context.config);\n      t.match(req.context.config, config, 'there are url and method additional properties');\n      reply.send({\n        hello: 'world'\n      });\n    }\n  });\n  await fastify.inject('/');\n});","file":"route.test.js","skipped":false,"dir":"test"},{"name":"Will not try to re-createprefixed HEAD route if it already exists and exposeHeadRoutes is true","suites":[],"updatePoint":{"line":1322,"column":100,"index":30550},"line":1322,"code":"test('Will not try to re-createprefixed HEAD route if it already exists and exposeHeadRoutes is true', async t => {\n  t.plan(1);\n  const fastify = Fastify({\n    exposeHeadRoutes: true\n  });\n  fastify.register((scope, opts, next) => {\n    scope.route({\n      method: 'HEAD',\n      path: '/route',\n      handler: (req, reply) => {\n        reply.header('content-type', 'text/plain');\n        reply.send('custom HEAD response');\n      }\n    });\n    scope.route({\n      method: 'GET',\n      path: '/route',\n      handler: (req, reply) => {\n        reply.send({\n          ok: true\n        });\n      }\n    });\n    next();\n  }, {\n    prefix: '/prefix'\n  });\n  await fastify.ready();\n  t.ok(true);\n});","file":"route.test.js","skipped":false,"dir":"test"},{"name":"GET route with body schema should throw","suites":[],"updatePoint":{"line":1352,"column":45,"index":31188},"line":1352,"code":"test('GET route with body schema should throw', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  t.throws(() => {\n    fastify.route({\n      method: 'GET',\n      path: '/get',\n      schema: {\n        body: {}\n      },\n      handler: function (req, reply) {\n        reply.send({\n          hello: 'world'\n        });\n      }\n    });\n  }, new Error('Body validation schema for GET:/get route is not supported!'));\n});","file":"route.test.js","skipped":false,"dir":"test"},{"name":"HEAD route with body schema should throw","suites":[],"updatePoint":{"line":1370,"column":46,"index":31605},"line":1370,"code":"test('HEAD route with body schema should throw', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  t.throws(() => {\n    fastify.route({\n      method: 'HEAD',\n      path: '/shouldThrow',\n      schema: {\n        body: {}\n      },\n      handler: function (req, reply) {\n        reply.send({\n          hello: 'world'\n        });\n      }\n    });\n  }, new Error('Body validation schema for HEAD:/shouldThrow route is not supported!'));\n});","file":"route.test.js","skipped":false,"dir":"test"},{"name":"[HEAD, GET] route with body schema should throw","suites":[],"updatePoint":{"line":1388,"column":53,"index":32047},"line":1388,"code":"test('[HEAD, GET] route with body schema should throw', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  t.throws(() => {\n    fastify.route({\n      method: ['HEAD', 'GET'],\n      path: '/shouldThrowHead',\n      schema: {\n        body: {}\n      },\n      handler: function (req, reply) {\n        reply.send({\n          hello: 'world'\n        });\n      }\n    });\n  }, new Error('Body validation schema for HEAD:/shouldThrowHead route is not supported!'));\n});","file":"route.test.js","skipped":false,"dir":"test"},{"name":"GET route with body schema should throw - shorthand","suites":[],"updatePoint":{"line":1406,"column":57,"index":32510},"line":1406,"code":"test('GET route with body schema should throw - shorthand', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  t.throws(() => {\n    fastify.get('/shouldThrow', {\n      schema: {\n        body: {}\n      }\n    }, function (req, reply) {\n      reply.send({\n        hello: 'world'\n      });\n    });\n  }, new Error('Body validation schema for GET:/shouldThrow route is not supported!'));\n});","file":"route.test.js","skipped":false,"dir":"test"},{"name":"HEAD route with body schema should throw - shorthand","suites":[],"updatePoint":{"line":1421,"column":58,"index":32897},"line":1421,"code":"test('HEAD route with body schema should throw - shorthand', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  t.throws(() => {\n    fastify.head('/shouldThrow2', {\n      schema: {\n        body: {}\n      }\n    }, function (req, reply) {\n      reply.send({\n        hello: 'world'\n      });\n    });\n  }, new Error('Body validation schema for HEAD:/shouldThrow2 route is not supported!'));\n});","file":"route.test.js","skipped":false,"dir":"test"},{"name":"route with non-english characters","suites":[],"updatePoint":{"line":1436,"column":39,"index":33269},"line":1436,"code":"test('route with non-english characters', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.get('/föö', (request, reply) => {\n    reply.send('here /föö');\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'GET',\n      url: getUrl(fastify) + encodeURI('/föö')\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(body.toString(), 'here /föö');\n    });\n  });\n});","file":"route.test.js","skipped":false,"dir":"test"},{"name":"invalid url attribute - non string URL","suites":[],"updatePoint":{"line":1459,"column":44,"index":33798},"line":1459,"code":"test('invalid url attribute - non string URL', t => {\n  t.plan(1);\n  const fastify = Fastify();\n\n  try {\n    fastify.get(/^\\/(donations|skills|blogs)/, () => {});\n  } catch (error) {\n    t.equal(error.code, FST_ERR_INVALID_URL().code);\n  }\n});","file":"route.test.js","skipped":false,"dir":"test"},{"name":"exposeHeadRoute should not reuse the same route option","suites":[],"updatePoint":{"line":1469,"column":60,"index":34058},"line":1469,"code":"test('exposeHeadRoute should not reuse the same route option', async t => {\n  t.plan(2);\n  const fastify = Fastify(); // we update the onRequest hook in onRoute hook\n  // if we reuse the same route option\n  // that means we will append another function inside the array\n\n  fastify.addHook('onRoute', function (routeOption) {\n    if (Array.isArray(routeOption.onRequest)) {\n      routeOption.onRequest.push(() => {});\n    } else {\n      routeOption.onRequest = [() => {}];\n    }\n  });\n  fastify.addHook('onRoute', function (routeOption) {\n    t.equal(routeOption.onRequest.length, 1);\n  });\n  fastify.route({\n    method: 'GET',\n    path: '/more-coffee',\n\n    async handler() {\n      return 'hello world';\n    }\n\n  });\n});","file":"route.test.js","skipped":false,"dir":"test"},{"name":"Should honor ignoreTrailingSlash option","suites":[],"updatePoint":{"line":11,"column":45,"index":186},"line":11,"code":"test('Should honor ignoreTrailingSlash option', async t => {\n  t.plan(4);\n  const fastify = Fastify({\n    ignoreTrailingSlash: true\n  });\n  fastify.get('/test', (req, res) => {\n    res.send('test');\n  });\n  let res = await fastify.inject('/test');\n  t.equal(res.statusCode, 200);\n  t.equal(res.payload.toString(), 'test');\n  res = await fastify.inject('/test/');\n  t.equal(res.statusCode, 200);\n  t.equal(res.payload.toString(), 'test');\n});","file":"router-options.test.js","skipped":false,"dir":"test"},{"name":"Should honor ignoreDuplicateSlashes option","suites":[],"updatePoint":{"line":26,"column":48,"index":631},"line":26,"code":"test('Should honor ignoreDuplicateSlashes option', async t => {\n  t.plan(4);\n  const fastify = Fastify({\n    ignoreDuplicateSlashes: true\n  });\n  fastify.get('/test//test///test', (req, res) => {\n    res.send('test');\n  });\n  let res = await fastify.inject('/test/test/test');\n  t.equal(res.statusCode, 200);\n  t.equal(res.payload.toString(), 'test');\n  res = await fastify.inject('/test//test///test');\n  t.equal(res.statusCode, 200);\n  t.equal(res.payload.toString(), 'test');\n});","file":"router-options.test.js","skipped":false,"dir":"test"},{"name":"Should honor ignoreTrailingSlash and ignoreDuplicateSlashes options","suites":[],"updatePoint":{"line":41,"column":73,"index":1139},"line":41,"code":"test('Should honor ignoreTrailingSlash and ignoreDuplicateSlashes options', async t => {\n  t.plan(4);\n  const fastify = Fastify({\n    ignoreTrailingSlash: true,\n    ignoreDuplicateSlashes: true\n  });\n  fastify.get('/test//test///test', (req, res) => {\n    res.send('test');\n  });\n  let res = await fastify.inject('/test/test/test/');\n  t.equal(res.statusCode, 200);\n  t.equal(res.payload.toString(), 'test');\n  res = await fastify.inject('/test//test///test//');\n  t.equal(res.statusCode, 200);\n  t.equal(res.payload.toString(), 'test');\n});","file":"router-options.test.js","skipped":false,"dir":"test"},{"name":"Should honor maxParamLength option","suites":[],"updatePoint":{"line":57,"column":40,"index":1648},"line":57,"code":"test('Should honor maxParamLength option', t => {\n  t.plan(4);\n  const fastify = Fastify({\n    maxParamLength: 10\n  });\n  fastify.get('/test/:id', (req, reply) => {\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/test/123456789'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 200);\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/test/123456789abcd'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 404);\n  });\n});","file":"router-options.test.js","skipped":false,"dir":"test"},{"name":"Should expose router options via getters on request and reply","suites":[],"updatePoint":{"line":82,"column":67,"index":2196},"line":82,"code":"test('Should expose router options via getters on request and reply', t => {\n  t.plan(10);\n  const fastify = Fastify();\n  const expectedSchema = {\n    params: {\n      id: {\n        type: 'integer'\n      }\n    }\n  };\n  fastify.get('/test/:id', {\n    schema: expectedSchema\n  }, (req, reply) => {\n    t.equal(reply.context.config.url, '/test/:id');\n    t.equal(reply.context.config.method, 'GET');\n    t.equal(req.routeConfig.url, '/test/:id');\n    t.equal(req.routeConfig.method, 'GET');\n    t.same(req.routeSchema, expectedSchema);\n    t.equal(req.routerPath, '/test/:id');\n    t.equal(req.routerMethod, 'GET');\n    t.equal(req.is404, false);\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/test/123456789'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 200);\n  });\n});","file":"router-options.test.js","skipped":false,"dir":"test"},{"name":"Should set is404 flag for unmatched paths","suites":[],"updatePoint":{"line":115,"column":47,"index":3023},"line":115,"code":"test('Should set is404 flag for unmatched paths', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.setNotFoundHandler((req, reply) => {\n    t.equal(req.is404, true);\n    reply.code(404).send({\n      error: 'Not Found',\n      message: 'Four oh for',\n      statusCode: 404\n    });\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/nonexist/123456789'\n  }, (error, res) => {\n    t.error(error);\n    t.equal(res.statusCode, 404);\n  });\n});","file":"router-options.test.js","skipped":false,"dir":"test"},{"name":"Should honor frameworkErrors option","suites":[],"updatePoint":{"line":134,"column":41,"index":3468},"line":134,"code":"test('Should honor frameworkErrors option', t => {\n  t.plan(3);\n  const fastify = Fastify({\n    frameworkErrors: function (err, req, res) {\n      if (err instanceof FST_ERR_BAD_URL) {\n        t.ok(true);\n      } else {\n        t.fail();\n      }\n\n      res.send(`${err.message} - ${err.code}`);\n    }\n  });\n  fastify.get('/test/:id', (req, res) => {\n    res.send('{ hello: \\'world\\' }');\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/test/%world'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.body, '\\'/test/%world\\' is not a valid url component - FST_ERR_BAD_URL');\n  });\n});","file":"router-options.test.js","skipped":false,"dir":"test"},{"name":"Example - URI $id","suites":[],"updatePoint":{"line":11,"column":23,"index":146},"line":11,"code":"test('Example - URI $id', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  fastify.addSchema({\n    $id: 'http://example.com/',\n    type: 'object',\n    properties: {\n      hello: {\n        type: 'string'\n      }\n    }\n  });\n  fastify.post('/', {\n    handler() {},\n\n    schema: {\n      body: {\n        type: 'array',\n        items: {\n          $ref: 'http://example.com#/properties/hello'\n        }\n      }\n    }\n  });\n  fastify.ready(err => t.error(err));\n});","file":"schema-examples.test.js","skipped":false,"dir":"test"},{"name":"Example - string $id","suites":[],"updatePoint":{"line":37,"column":26,"index":610},"line":37,"code":"test('Example - string $id', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  fastify.addSchema({\n    $id: 'commonSchema',\n    type: 'object',\n    properties: {\n      hello: {\n        type: 'string'\n      }\n    }\n  });\n  fastify.post('/', {\n    handler() {},\n\n    schema: {\n      body: {\n        $ref: 'commonSchema#'\n      },\n      headers: {\n        $ref: 'commonSchema#'\n      }\n    }\n  });\n  fastify.ready(err => t.error(err));\n});","file":"schema-examples.test.js","skipped":false,"dir":"test"},{"name":"Example - get schema","suites":[],"updatePoint":{"line":63,"column":26,"index":1048},"line":63,"code":"test('Example - get schema', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  fastify.addSchema({\n    $id: 'schemaId',\n    type: 'object',\n    properties: {\n      hello: {\n        type: 'string'\n      }\n    }\n  });\n  const mySchemas = fastify.getSchemas();\n  const mySchema = fastify.getSchema('schemaId');\n  t.same(mySchemas.schemaId, mySchema);\n});","file":"schema-examples.test.js","skipped":false,"dir":"test"},{"name":"Example - get schema encapsulated","suites":[],"updatePoint":{"line":79,"column":39,"index":1414},"line":79,"code":"test('Example - get schema encapsulated', async t => {\n  const fastify = Fastify();\n  fastify.addSchema({\n    $id: 'one',\n    my: 'hello'\n  }); // will return only `one` schema\n\n  fastify.get('/', (request, reply) => {\n    reply.send(fastify.getSchemas());\n  });\n  fastify.register((instance, opts, done) => {\n    instance.addSchema({\n      $id: 'two',\n      my: 'ciao'\n    }); // will return `one` and `two` schemas\n\n    instance.get('/sub', (request, reply) => {\n      reply.send(instance.getSchemas());\n    });\n    instance.register((subinstance, opts, done) => {\n      subinstance.addSchema({\n        $id: 'three',\n        my: 'hola'\n      }); // will return `one`, `two` and `three`\n\n      subinstance.get('/deep', (request, reply) => {\n        reply.send(subinstance.getSchemas());\n      });\n      done();\n    });\n    done();\n  });\n  const r1 = await fastify.inject('/');\n  const r2 = await fastify.inject('/sub');\n  const r3 = await fastify.inject('/deep');\n  t.same(Object.keys(r1.json()), ['one']);\n  t.same(Object.keys(r2.json()), ['one', 'two']);\n  t.same(Object.keys(r3.json()), ['one', 'two', 'three']);\n});","file":"schema-examples.test.js","skipped":false,"dir":"test"},{"name":"Example - validation","suites":[],"updatePoint":{"line":118,"column":26,"index":2522},"line":118,"code":"test('Example - validation', t => {\n  t.plan(1);\n  const fastify = Fastify({\n    ajv: {\n      customOptions: {\n        allowUnionTypes: true\n      }\n    }\n  });\n\n  const handler = () => {};\n\n  const bodyJsonSchema = {\n    type: 'object',\n    required: ['requiredKey'],\n    properties: {\n      someKey: {\n        type: 'string'\n      },\n      someOtherKey: {\n        type: 'number'\n      },\n      requiredKey: {\n        type: 'array',\n        maxItems: 3,\n        items: {\n          type: 'integer'\n        }\n      },\n      nullableKey: {\n        type: ['number', 'null']\n      },\n      // or { type: 'number', nullable: true }\n      multipleTypesKey: {\n        type: ['boolean', 'number']\n      },\n      multipleRestrictedTypesKey: {\n        oneOf: [{\n          type: 'string',\n          maxLength: 5\n        }, {\n          type: 'number',\n          minimum: 10\n        }]\n      },\n      enumKey: {\n        type: 'string',\n        enum: ['John', 'Foo']\n      },\n      notTypeKey: {\n        not: {\n          type: 'array'\n        }\n      }\n    }\n  };\n  const queryStringJsonSchema = {\n    name: {\n      type: 'string'\n    },\n    excitement: {\n      type: 'integer'\n    }\n  };\n  const paramsJsonSchema = {\n    par1: {\n      type: 'string'\n    },\n    par2: {\n      type: 'number'\n    }\n  };\n  const headersJsonSchema = {\n    type: 'object',\n    properties: {\n      'x-foo': {\n        type: 'string'\n      }\n    },\n    required: ['x-foo']\n  };\n  const schema = {\n    body: bodyJsonSchema,\n    querystring: queryStringJsonSchema,\n    params: paramsJsonSchema,\n    headers: headersJsonSchema\n  };\n  fastify.post('/the/url', {\n    schema\n  }, handler);\n  fastify.ready(err => t.error(err));\n});","file":"schema-examples.test.js","skipped":false,"dir":"test"},{"name":"Example - ajv config","suites":[],"updatePoint":{"line":210,"column":26,"index":4210},"line":210,"code":"test('Example - ajv config', t => {\n  t.plan(1);\n  const fastify = Fastify({\n    ajv: {\n      plugins: [require('ajv-merge-patch')]\n    }\n  });\n  fastify.post('/', {\n    handler(req, reply) {\n      reply.send({\n        ok: 1\n      });\n    },\n\n    schema: {\n      body: {\n        $patch: {\n          source: {\n            type: 'object',\n            properties: {\n              q: {\n                type: 'string'\n              }\n            }\n          },\n          with: [{\n            op: 'add',\n            path: '/properties/q',\n            value: {\n              type: 'number'\n            }\n          }]\n        }\n      }\n    }\n  });\n  fastify.post('/foo', {\n    handler(req, reply) {\n      reply.send({\n        ok: 1\n      });\n    },\n\n    schema: {\n      body: {\n        $merge: {\n          source: {\n            type: 'object',\n            properties: {\n              q: {\n                type: 'string'\n              }\n            }\n          },\n          with: {\n            required: ['q']\n          }\n        }\n      }\n    }\n  });\n  fastify.ready(err => t.error(err));\n});","file":"schema-examples.test.js","skipped":false,"dir":"test"},{"name":"Example Joi","suites":[],"updatePoint":{"line":273,"column":17,"index":5286},"line":273,"code":"test('Example Joi', t => {\n  t.plan(1);\n  const fastify = Fastify();\n\n  const handler = () => {};\n\n  const Joi = require('joi');\n\n  fastify.post('/the/url', {\n    schema: {\n      body: Joi.object().keys({\n        hello: Joi.string().required()\n      }).required()\n    },\n    validatorCompiler: ({\n      schema,\n      method,\n      url,\n      httpPart\n    }) => {\n      return data => schema.validate(data);\n    }\n  }, handler);\n  fastify.ready(err => t.error(err));\n});","file":"schema-examples.test.js","skipped":false,"dir":"test"},{"name":"Example yup","suites":[],"updatePoint":{"line":298,"column":17,"index":5756},"line":298,"code":"test('Example yup', t => {\n  t.plan(1);\n  const fastify = Fastify();\n\n  const handler = () => {};\n\n  const yup = require('yup'); // Validation options to match ajv's baseline options used in Fastify\n\n\n  const yupOptions = {\n    strict: false,\n    abortEarly: false,\n    // return all errors\n    stripUnknown: true,\n    // remove additional properties\n    recursive: true\n  };\n  fastify.post('/the/url', {\n    schema: {\n      body: yup.object({\n        age: yup.number().integer().required(),\n        sub: yup.object().shape({\n          name: yup.string().required()\n        }).required()\n      })\n    },\n    validatorCompiler: ({\n      schema,\n      method,\n      url,\n      httpPart\n    }) => {\n      return function (data) {\n        // with option strict = false, yup `validateSync` function returns the coerced value if validation was successful, or throws if validation failed\n        try {\n          const result = schema.validateSync(data, yupOptions);\n          return {\n            value: result\n          };\n        } catch (e) {\n          return {\n            error: e\n          };\n        }\n      };\n    }\n  }, handler);\n  fastify.ready(err => t.error(err));\n});","file":"schema-examples.test.js","skipped":false,"dir":"test"},{"name":"Example - serialization","suites":[],"updatePoint":{"line":347,"column":29,"index":6942},"line":347,"code":"test('Example - serialization', t => {\n  t.plan(1);\n  const fastify = Fastify();\n\n  const handler = () => {};\n\n  const schema = {\n    response: {\n      200: {\n        type: 'object',\n        properties: {\n          value: {\n            type: 'string'\n          },\n          otherValue: {\n            type: 'boolean'\n          }\n        }\n      }\n    }\n  };\n  fastify.post('/the/url', {\n    schema\n  }, handler);\n  fastify.ready(err => t.error(err));\n});","file":"schema-examples.test.js","skipped":false,"dir":"test"},{"name":"Example - serialization 2","suites":[],"updatePoint":{"line":373,"column":31,"index":7398},"line":373,"code":"test('Example - serialization 2', t => {\n  t.plan(1);\n  const fastify = Fastify();\n\n  const handler = () => {};\n\n  const schema = {\n    response: {\n      '2xx': {\n        type: 'object',\n        properties: {\n          value: {\n            type: 'string'\n          },\n          otherValue: {\n            type: 'boolean'\n          }\n        }\n      },\n      201: {\n        // the contract sintax\n        value: {\n          type: 'string'\n        }\n      }\n    }\n  };\n  fastify.post('/the/url', {\n    schema\n  }, handler);\n  fastify.ready(err => t.error(err));\n});","file":"schema-examples.test.js","skipped":false,"dir":"test"},{"name":"Example - serializator","suites":[],"updatePoint":{"line":405,"column":28,"index":7958},"line":405,"code":"test('Example - serializator', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  fastify.setSerializerCompiler(({\n    schema,\n    method,\n    url,\n    httpStatus\n  }) => {\n    return data => JSON.stringify(data);\n  });\n  fastify.get('/user', {\n    handler(req, reply) {\n      reply.send({\n        id: 1,\n        name: 'Foo',\n        image: 'BIG IMAGE'\n      });\n    },\n\n    schema: {\n      response: {\n        '2xx': {\n          id: {\n            type: 'number'\n          },\n          name: {\n            type: 'string'\n          }\n        }\n      }\n    }\n  });\n  fastify.ready(err => t.error(err));\n});","file":"schema-examples.test.js","skipped":false,"dir":"test"},{"name":"Example - schemas examples","suites":[],"updatePoint":{"line":440,"column":32,"index":8567},"line":440,"code":"test('Example - schemas examples', t => {\n  t.plan(1);\n  const fastify = Fastify();\n\n  const handler = () => {};\n\n  fastify.addSchema({\n    $id: 'http://foo/common.json',\n    type: 'object',\n    definitions: {\n      foo: {\n        $id: '#address',\n        type: 'object',\n        properties: {\n          city: {\n            type: 'string'\n          }\n        }\n      }\n    }\n  });\n  fastify.addSchema({\n    $id: 'http://foo/shared.json',\n    type: 'object',\n    definitions: {\n      foo: {\n        type: 'object',\n        properties: {\n          city: {\n            type: 'string'\n          }\n        }\n      }\n    }\n  });\n  const refToId = {\n    type: 'object',\n    definitions: {\n      foo: {\n        $id: '#address',\n        type: 'object',\n        properties: {\n          city: {\n            type: 'string'\n          }\n        }\n      }\n    },\n    properties: {\n      home: {\n        $ref: '#address'\n      },\n      work: {\n        $ref: '#address'\n      }\n    }\n  };\n  const refToDefinitions = {\n    type: 'object',\n    definitions: {\n      foo: {\n        $id: '#address',\n        type: 'object',\n        properties: {\n          city: {\n            type: 'string'\n          }\n        }\n      }\n    },\n    properties: {\n      home: {\n        $ref: '#/definitions/foo'\n      },\n      work: {\n        $ref: '#/definitions/foo'\n      }\n    }\n  };\n  const refToSharedSchemaId = {\n    type: 'object',\n    properties: {\n      home: {\n        $ref: 'http://foo/common.json#address'\n      },\n      work: {\n        $ref: 'http://foo/common.json#address'\n      }\n    }\n  };\n  const refToSharedSchemaDefinitions = {\n    type: 'object',\n    properties: {\n      home: {\n        $ref: 'http://foo/shared.json#/definitions/foo'\n      },\n      work: {\n        $ref: 'http://foo/shared.json#/definitions/foo'\n      }\n    }\n  };\n  fastify.post('/', {\n    handler,\n    schema: {\n      body: refToId,\n      headers: refToDefinitions,\n      params: refToSharedSchemaId,\n      query: refToSharedSchemaDefinitions\n    }\n  });\n  fastify.ready(err => t.error(err));\n});","file":"schema-examples.test.js","skipped":false,"dir":"test"},{"name":"should return custom error messages with ajv-errors","suites":[],"updatePoint":{"line":552,"column":57,"index":10641},"line":552,"code":"test('should return custom error messages with ajv-errors', t => {\n  t.plan(3);\n  const fastify = Fastify({\n    ajv: {\n      customOptions: {\n        allErrors: true\n      },\n      plugins: [require('ajv-errors')]\n    }\n  });\n  const schema = {\n    body: {\n      type: 'object',\n      properties: {\n        name: {\n          type: 'string'\n        },\n        work: {\n          type: 'string'\n        },\n        age: {\n          type: 'number',\n          errorMessage: {\n            type: 'bad age - should be num'\n          }\n        }\n      },\n      required: ['name', 'work'],\n      errorMessage: {\n        required: {\n          name: 'name please',\n          work: 'work please',\n          age: 'age please'\n        }\n      }\n    }\n  };\n  fastify.post('/', {\n    schema\n  }, function (req, reply) {\n    reply.code(200).send(req.body.name);\n  });\n  fastify.inject({\n    method: 'POST',\n    payload: {\n      hello: 'salman',\n      age: 'bad'\n    },\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      statusCode: 400,\n      error: 'Bad Request',\n      message: 'body/age bad age - should be num, body name please, body work please'\n    });\n    t.equal(res.statusCode, 400);\n  });\n});","file":"schema-examples.test.js","skipped":false,"dir":"test"},{"name":"should be able to handle formats of ajv-formats when added by plugins option","suites":[],"updatePoint":{"line":611,"column":82,"index":11895},"line":611,"code":"test('should be able to handle formats of ajv-formats when added by plugins option', t => {\n  t.plan(3);\n  const fastify = Fastify({\n    ajv: {\n      plugins: [require('ajv-formats')]\n    }\n  });\n  const schema = {\n    body: {\n      type: 'object',\n      properties: {\n        id: {\n          type: 'string',\n          format: 'uuid'\n        },\n        email: {\n          type: 'string',\n          format: 'email'\n        }\n      },\n      required: ['id', 'email']\n    }\n  };\n  fastify.post('/', {\n    schema\n  }, function (req, reply) {\n    reply.code(200).send(req.body.id);\n  });\n  fastify.inject({\n    method: 'POST',\n    payload: {\n      id: '254381a5-888c-4b41-8116-e3b1a54980bd',\n      email: 'info@fastify.io'\n    },\n    url: '/'\n  }, (_err, res) => {\n    t.equal(res.body, '254381a5-888c-4b41-8116-e3b1a54980bd');\n    t.equal(res.statusCode, 200);\n  });\n  fastify.inject({\n    method: 'POST',\n    payload: {\n      id: 'invalid',\n      email: 'info@fastify.io'\n    },\n    url: '/'\n  }, (_err, res) => {\n    t.same(JSON.parse(res.payload), {\n      statusCode: 400,\n      error: 'Bad Request',\n      message: 'body/id must match format \"uuid\"'\n    });\n  });\n});","file":"schema-examples.test.js","skipped":false,"dir":"test"},{"name":"should return localized error messages with ajv-i18n","suites":[],"updatePoint":{"line":665,"column":58,"index":13039},"line":665,"code":"test('should return localized error messages with ajv-i18n', t => {\n  t.plan(3);\n  const schema = {\n    body: {\n      type: 'object',\n      properties: {\n        name: {\n          type: 'string'\n        },\n        work: {\n          type: 'string'\n        }\n      },\n      required: ['name', 'work']\n    }\n  };\n  const fastify = Fastify({\n    ajv: {\n      customOptions: {\n        allErrors: true\n      }\n    }\n  });\n  fastify.setErrorHandler(function (error, request, reply) {\n    if (error.validation) {\n      localize.ru(error.validation);\n      reply.status(400).send(error.validation);\n      return;\n    }\n\n    reply.send(error);\n  });\n  fastify.post('/', {\n    schema\n  }, function (req, reply) {\n    reply.code(200).send(req.body.name);\n  });\n  fastify.inject({\n    method: 'POST',\n    payload: {\n      name: 'salman'\n    },\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), [{\n      instancePath: '',\n      keyword: 'required',\n      message: 'должно иметь обязательное поле work',\n      params: {\n        missingProperty: 'work'\n      },\n      schemaPath: '#/required'\n    }]);\n    t.equal(res.statusCode, 400);\n  });\n});","file":"schema-examples.test.js","skipped":false,"dir":"test"},{"name":"Should expose  function","suites":[],"updatePoint":{"line":31,"column":35,"index":558},"line":31,"code":"  test(`Should expose ${f} function`, t => {\n    t.plan(1);\n    const fastify = Fastify();\n    t.equal(typeof fastify[f], 'function');\n  });","file":"schema-feature.test.js","skipped":false,"dir":"test"},{"name":"cannot call  after binding","suites":[],"updatePoint":{"line":38,"column":38,"index":771},"line":38,"code":"  test(`cannot call ${f} after binding`, t => {\n    t.plan(2);\n    const fastify = Fastify();\n    t.teardown(fastify.close.bind(fastify));\n    fastify.listen({\n      port: 0\n    }, err => {\n      t.error(err);\n\n      try {\n        fastify[f](() => {});\n        t.fail();\n      } catch (e) {\n        t.pass();\n      }\n    });\n  });","file":"schema-feature.test.js","skipped":false,"dir":"test"},{"name":"The schemas should be added to an internal storage","suites":[],"updatePoint":{"line":56,"column":56,"index":1124},"line":56,"code":"test('The schemas should be added to an internal storage', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  const schema = {\n    $id: 'id',\n    my: 'schema'\n  };\n  fastify.addSchema(schema);\n  t.same(fastify[kSchemaController].schemaBucket.store, {\n    id: schema\n  });\n});","file":"schema-feature.test.js","skipped":false,"dir":"test"},{"name":"The schemas should be accessible via getSchemas","suites":[],"updatePoint":{"line":68,"column":53,"index":1397},"line":68,"code":"test('The schemas should be accessible via getSchemas', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  const schemas = {\n    id: {\n      $id: 'id',\n      my: 'schema'\n    },\n    abc: {\n      $id: 'abc',\n      my: 'schema'\n    },\n    bcd: {\n      $id: 'bcd',\n      my: 'schema',\n      properties: {\n        a: 'a',\n        b: 1\n      }\n    }\n  };\n  Object.values(schemas).forEach(schema => {\n    fastify.addSchema(schema);\n  });\n  t.same(fastify.getSchemas(), schemas);\n});","file":"schema-feature.test.js","skipped":false,"dir":"test"},{"name":"The schema should be accessible by id via getSchema","suites":[],"updatePoint":{"line":94,"column":57,"index":1878},"line":94,"code":"test('The schema should be accessible by id via getSchema', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  const schemas = [{\n    $id: 'id',\n    my: 'schema'\n  }, {\n    $id: 'abc',\n    my: 'schema'\n  }, {\n    $id: 'bcd',\n    my: 'schema',\n    properties: {\n      a: 'a',\n      b: 1\n    }\n  }];\n  schemas.forEach(schema => {\n    fastify.addSchema(schema);\n  });\n  t.same(fastify.getSchema('abc'), schemas[1]);\n  t.same(fastify.getSchema('id'), schemas[0]);\n  t.same(fastify.getSchema('foo'), undefined);\n  fastify.register((instance, opts, done) => {\n    const pluginSchema = {\n      $id: 'cde',\n      my: 'schema'\n    };\n    instance.addSchema(pluginSchema);\n    t.same(instance.getSchema('cde'), pluginSchema);\n    done();\n  });\n  fastify.ready(err => t.error(err));\n});","file":"schema-feature.test.js","skipped":false,"dir":"test"},{"name":"Get validatorCompiler after setValidatorCompiler","suites":[],"updatePoint":{"line":128,"column":54,"index":2651},"line":128,"code":"test('Get validatorCompiler after setValidatorCompiler', t => {\n  t.plan(2);\n\n  const myCompiler = () => {};\n\n  const fastify = Fastify();\n  fastify.setValidatorCompiler(myCompiler);\n  const sc = fastify.validatorCompiler;\n  t.ok(Object.is(myCompiler, sc));\n  fastify.ready(err => t.error(err));\n});","file":"schema-feature.test.js","skipped":false,"dir":"test"},{"name":"Get serializerCompiler after setSerializerCompiler","suites":[],"updatePoint":{"line":139,"column":56,"index":2953},"line":139,"code":"test('Get serializerCompiler after setSerializerCompiler', t => {\n  t.plan(2);\n\n  const myCompiler = () => {};\n\n  const fastify = Fastify();\n  fastify.setSerializerCompiler(myCompiler);\n  const sc = fastify.serializerCompiler;\n  t.ok(Object.is(myCompiler, sc));\n  fastify.ready(err => t.error(err));\n});","file":"schema-feature.test.js","skipped":false,"dir":"test"},{"name":"Get compilers is empty when settle on routes","suites":[],"updatePoint":{"line":150,"column":50,"index":3251},"line":150,"code":"test('Get compilers is empty when settle on routes', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.post('/', {\n    schema: {\n      body: {\n        type: 'object',\n        properties: {\n          hello: {\n            type: 'string'\n          }\n        }\n      },\n      response: {\n        '2xx': {\n          foo: {\n            type: 'array',\n            items: {\n              type: 'string'\n            }\n          }\n        }\n      }\n    },\n    validatorCompiler: ({\n      schema,\n      method,\n      url,\n      httpPart\n    }) => {},\n    serializerCompiler: ({\n      schema,\n      method,\n      url,\n      httpPart\n    }) => {}\n  }, function (req, reply) {\n    reply.send('ok');\n  });\n  fastify.inject({\n    method: 'POST',\n    payload: {},\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(fastify.validatorCompiler, undefined);\n    t.equal(fastify.serializerCompiler, undefined);\n  });\n});","file":"schema-feature.test.js","skipped":false,"dir":"test"},{"name":"Should throw if the $id property is missing","suites":[],"updatePoint":{"line":199,"column":49,"index":4171},"line":199,"code":"test('Should throw if the $id property is missing', t => {\n  t.plan(1);\n  const fastify = Fastify();\n\n  try {\n    fastify.addSchema({\n      type: 'string'\n    });\n    t.fail();\n  } catch (err) {\n    t.equal(err.code, 'FST_ERR_SCH_MISSING_ID');\n  }\n});","file":"schema-feature.test.js","skipped":false,"dir":"test"},{"name":"Cannot add multiple times the same id","suites":[],"updatePoint":{"line":212,"column":43,"index":4417},"line":212,"code":"test('Cannot add multiple times the same id', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  fastify.addSchema({\n    $id: 'id'\n  });\n\n  try {\n    fastify.addSchema({\n      $id: 'id'\n    });\n  } catch (err) {\n    t.equal(err.code, 'FST_ERR_SCH_ALREADY_PRESENT');\n    t.equal(err.message, 'Schema with id \\'id\\' already declared!');\n  }\n});","file":"schema-feature.test.js","skipped":false,"dir":"test"},{"name":"Cannot add schema for query and querystring","suites":[],"updatePoint":{"line":228,"column":49,"index":4766},"line":228,"code":"test('Cannot add schema for query and querystring', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  fastify.get('/', {\n    handler: () => {},\n    schema: {\n      query: {\n        foo: {\n          type: 'string'\n        }\n      },\n      querystring: {\n        foo: {\n          type: 'string'\n        }\n      }\n    }\n  });\n  fastify.ready(err => {\n    t.equal(err.code, 'FST_ERR_SCH_DUPLICATE');\n    t.equal(err.message, 'Schema with \\'querystring\\' already present!');\n  });\n});","file":"schema-feature.test.js","skipped":false,"dir":"test"},{"name":"Should throw of the schema does not exists in input","suites":[],"updatePoint":{"line":251,"column":57,"index":5255},"line":251,"code":"test('Should throw of the schema does not exists in input', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  fastify.get('/:id', {\n    handler: echoParams,\n    schema: {\n      params: {\n        name: {\n          $ref: '#notExist'\n        }\n      }\n    }\n  });\n  fastify.ready(err => {\n    t.equal(err.code, 'FST_ERR_SCH_VALIDATION_BUILD');\n    t.equal(err.message, \"Failed building the validation schema for GET: /:id, due to error can't resolve reference #notExist from id #\");\n  });\n});","file":"schema-feature.test.js","skipped":false,"dir":"test"},{"name":"Should throw of the schema does not exists in output","suites":[],"updatePoint":{"line":269,"column":58,"index":5747},"line":269,"code":"test('Should throw of the schema does not exists in output', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  fastify.get('/:id', {\n    handler: echoParams,\n    schema: {\n      response: {\n        '2xx': {\n          name: {\n            $ref: '#notExist'\n          }\n        }\n      }\n    }\n  });\n  fastify.ready(err => {\n    t.equal(err.code, 'FST_ERR_SCH_SERIALIZATION_BUILD');\n    t.match(err.message, /^Failed building the serialization schema for GET: \\/:id, due to error Cannot find reference.*/); // error from fast-json-strinfigy\n  });\n});","file":"schema-feature.test.js","skipped":false,"dir":"test"},{"name":"Should not change the input schemas","suites":[],"updatePoint":{"line":289,"column":41,"index":6279},"line":289,"code":"test('Should not change the input schemas', t => {\n  t.plan(4);\n  const theSchema = {\n    $id: 'helloSchema',\n    type: 'object',\n    definitions: {\n      hello: {\n        type: 'string'\n      }\n    }\n  };\n  const fastify = Fastify();\n  fastify.post('/', {\n    handler: echoBody,\n    schema: {\n      body: {\n        type: 'object',\n        additionalProperties: false,\n        properties: {\n          name: {\n            $ref: 'helloSchema#/definitions/hello'\n          }\n        }\n      },\n      response: {\n        '2xx': {\n          name: {\n            $ref: 'helloSchema#/definitions/hello'\n          }\n        }\n      }\n    }\n  });\n  fastify.addSchema(theSchema);\n  fastify.inject({\n    url: '/',\n    method: 'POST',\n    payload: {\n      name: 'Foo',\n      surname: 'Bar'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.same(res.json(), {\n      name: 'Foo'\n    });\n    t.ok(theSchema.$id, 'the $id is not removed');\n    t.same(fastify.getSchema('helloSchema'), theSchema);\n  });\n});","file":"schema-feature.test.js","skipped":false,"dir":"test"},{"name":"First level $ref","suites":[],"updatePoint":{"line":339,"column":22,"index":7251},"line":339,"code":"test('First level $ref', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  fastify.addSchema({\n    $id: 'test',\n    type: 'object',\n    properties: {\n      id: {\n        type: 'number'\n      }\n    }\n  });\n  fastify.get('/:id', {\n    handler: (req, reply) => {\n      reply.send({\n        id: req.params.id * 2,\n        ignore: 'it'\n      });\n    },\n    schema: {\n      params: {\n        $ref: 'test#'\n      },\n      response: {\n        200: {\n          $ref: 'test#'\n        }\n      }\n    }\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/123'\n  }, (err, res) => {\n    t.error(err);\n    t.same(res.json(), {\n      id: 246\n    });\n  });\n});","file":"schema-feature.test.js","skipped":false,"dir":"test"},{"name":"Customize validator compiler in instance and route","suites":[],"updatePoint":{"line":379,"column":56,"index":7932},"line":379,"code":"test('Customize validator compiler in instance and route', t => {\n  t.plan(28);\n  const fastify = Fastify({\n    exposeHeadRoutes: false\n  });\n  fastify.setValidatorCompiler(({\n    schema,\n    method,\n    url,\n    httpPart\n  }) => {\n    t.equal(method, 'POST'); // run 4 times\n\n    t.equal(url, '/:id'); // run 4 times\n\n    switch (httpPart) {\n      case 'body':\n        t.pass('body evaluated');\n        return body => {\n          t.same(body, {\n            foo: ['bar', 'BAR']\n          });\n          return true;\n        };\n\n      case 'params':\n        t.pass('params evaluated');\n        return params => {\n          t.same(params, {\n            id: 1234\n          });\n          return true;\n        };\n\n      case 'querystring':\n        t.pass('querystring evaluated');\n        return query => {\n          t.same(query, {\n            lang: 'en'\n          });\n          return true;\n        };\n\n      case 'headers':\n        t.pass('headers evaluated');\n        return headers => {\n          t.match(headers, {\n            x: 'hello'\n          });\n          return true;\n        };\n\n      case '2xx':\n        t.fail('the validator doesn\\'t process the response');\n        break;\n\n      default:\n        t.fail(`unknown httpPart ${httpPart}`);\n    }\n  });\n  fastify.post('/:id', {\n    handler: echoBody,\n    schema: {\n      query: {\n        lang: {\n          type: 'string',\n          enum: ['it', 'en']\n        }\n      },\n      headers: {\n        x: {\n          type: 'string'\n        }\n      },\n      params: {\n        id: {\n          type: 'number'\n        }\n      },\n      body: {\n        foo: {\n          type: 'array'\n        }\n      },\n      response: {\n        '2xx': {\n          foo: {\n            type: 'array',\n            items: {\n              type: 'string'\n            }\n          }\n        }\n      }\n    }\n  });\n  fastify.get('/wow/:id', {\n    handler: echoParams,\n    validatorCompiler: ({\n      schema,\n      method,\n      url,\n      httpPart\n    }) => {\n      t.equal(method, 'GET'); // run 3 times (params, headers, query)\n\n      t.equal(url, '/wow/:id'); // run 4 times\n\n      return () => {\n        return true;\n      }; // ignore the validation\n    },\n    schema: {\n      query: {\n        lang: {\n          type: 'string',\n          enum: ['it', 'en']\n        }\n      },\n      headers: {\n        x: {\n          type: 'string'\n        }\n      },\n      params: {\n        id: {\n          type: 'number'\n        }\n      },\n      response: {\n        '2xx': {\n          foo: {\n            type: 'array',\n            items: {\n              type: 'string'\n            }\n          }\n        }\n      }\n    }\n  });\n  fastify.inject({\n    url: '/1234',\n    method: 'POST',\n    headers: {\n      x: 'hello'\n    },\n    query: {\n      lang: 'en'\n    },\n    payload: {\n      foo: ['bar', 'BAR']\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.same(res.json(), {\n      foo: ['bar', 'BAR']\n    });\n  });\n  fastify.inject({\n    url: '/wow/should-be-a-num',\n    method: 'GET',\n    headers: {\n      x: 'hello'\n    },\n    query: {\n      lang: 'jp'\n    } // not in the enum\n\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200); // the validation is always true\n\n    t.same(res.json(), {});\n  });\n});","file":"schema-feature.test.js","skipped":false,"dir":"test"},{"name":"Use the same schema across multiple routes","suites":[],"updatePoint":{"line":556,"column":48,"index":11183},"line":556,"code":"test('Use the same schema across multiple routes', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.addSchema({\n    $id: 'test',\n    type: 'object',\n    properties: {\n      id: {\n        type: 'number'\n      }\n    }\n  });\n  fastify.get('/first/:id', {\n    schema: {\n      params: {\n        id: {\n          $ref: 'test#/properties/id'\n        }\n      }\n    },\n    handler: (req, reply) => {\n      reply.send(typeof req.params.id);\n    }\n  });\n  fastify.get('/second/:id', {\n    schema: {\n      params: {\n        id: {\n          $ref: 'test#/properties/id'\n        }\n      }\n    },\n    handler: (req, reply) => {\n      reply.send(typeof req.params.id);\n    }\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/first/123'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.payload, 'number');\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/second/123'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.payload, 'number');\n  });\n});","file":"schema-feature.test.js","skipped":false,"dir":"test"},{"name":"Encapsulation should intervene","suites":[],"updatePoint":{"line":607,"column":36,"index":12131},"line":607,"code":"test('Encapsulation should intervene', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  fastify.register((instance, opts, done) => {\n    instance.addSchema({\n      $id: 'encapsulation',\n      type: 'object',\n      properties: {\n        id: {\n          type: 'number'\n        }\n      }\n    });\n    done();\n  });\n  fastify.register((instance, opts, done) => {\n    instance.get('/:id', {\n      handler: echoParams,\n      schema: {\n        params: {\n          id: {\n            $ref: 'encapsulation#/properties/id'\n          }\n        }\n      }\n    });\n    done();\n  });\n  fastify.ready(err => {\n    t.equal(err.code, 'FST_ERR_SCH_VALIDATION_BUILD');\n    t.equal(err.message, \"Failed building the validation schema for GET: /:id, due to error can't resolve reference encapsulation#/properties/id from id #\");\n  });\n});","file":"schema-feature.test.js","skipped":false,"dir":"test"},{"name":"Encapsulation isolation","suites":[],"updatePoint":{"line":640,"column":29,"index":12941},"line":640,"code":"test('Encapsulation isolation', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  fastify.register((instance, opts, done) => {\n    instance.addSchema({\n      $id: 'id'\n    });\n    done();\n  });\n  fastify.register((instance, opts, done) => {\n    instance.addSchema({\n      $id: 'id'\n    });\n    done();\n  });\n  fastify.ready(err => t.error(err));\n});","file":"schema-feature.test.js","skipped":false,"dir":"test"},{"name":"Add schema after register","suites":[],"updatePoint":{"line":657,"column":31,"index":13294},"line":657,"code":"test('Add schema after register', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.register((instance, opts, done) => {\n    instance.get('/:id', {\n      handler: echoParams,\n      schema: {\n        params: {\n          $ref: 'test#'\n        }\n      }\n    }); // add it to the parent instance\n\n    fastify.addSchema({\n      $id: 'test',\n      type: 'object',\n      properties: {\n        id: {\n          type: 'number'\n        }\n      }\n    });\n\n    try {\n      instance.addSchema({\n        $id: 'test'\n      });\n    } catch (err) {\n      t.equal(err.code, 'FST_ERR_SCH_ALREADY_PRESENT');\n      t.equal(err.message, 'Schema with id \\'test\\' already declared!');\n    }\n\n    done();\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/4242'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.same(res.json(), {\n      id: 4242\n    });\n  });\n});","file":"schema-feature.test.js","skipped":false,"dir":"test"},{"name":"Encapsulation isolation for getSchemas","suites":[],"updatePoint":{"line":702,"column":44,"index":14187},"line":702,"code":"test('Encapsulation isolation for getSchemas', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  let pluginDeepOneSide;\n  let pluginDeepOne;\n  let pluginDeepTwo;\n  const schemas = {\n    z: {\n      $id: 'z',\n      my: 'schema'\n    },\n    a: {\n      $id: 'a',\n      my: 'schema'\n    },\n    b: {\n      $id: 'b',\n      my: 'schema'\n    },\n    c: {\n      $id: 'c',\n      my: 'schema',\n      properties: {\n        a: 'a',\n        b: 1\n      }\n    }\n  };\n  fastify.addSchema(schemas.z);\n  fastify.register((instance, opts, done) => {\n    instance.addSchema(schemas.a);\n    pluginDeepOneSide = instance;\n    done();\n  });\n  fastify.register((instance, opts, done) => {\n    instance.addSchema(schemas.b);\n    instance.register((subinstance, opts, done) => {\n      subinstance.addSchema(schemas.c);\n      pluginDeepTwo = subinstance;\n      done();\n    });\n    pluginDeepOne = instance;\n    done();\n  });\n  fastify.ready(err => {\n    t.error(err);\n    t.same(fastify.getSchemas(), {\n      z: schemas.z\n    });\n    t.same(pluginDeepOneSide.getSchemas(), {\n      z: schemas.z,\n      a: schemas.a\n    });\n    t.same(pluginDeepOne.getSchemas(), {\n      z: schemas.z,\n      b: schemas.b\n    });\n    t.same(pluginDeepTwo.getSchemas(), {\n      z: schemas.z,\n      b: schemas.b,\n      c: schemas.c\n    });\n  });\n});","file":"schema-feature.test.js","skipped":false,"dir":"test"},{"name":"Use the same schema id in different places","suites":[],"updatePoint":{"line":766,"column":48,"index":15489},"line":766,"code":"test('Use the same schema id in different places', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  fastify.addSchema({\n    $id: 'test',\n    type: 'object',\n    properties: {\n      id: {\n        type: 'number'\n      }\n    }\n  });\n  fastify.get('/:id', {\n    handler: echoParams,\n    schema: {\n      response: {\n        200: {\n          type: 'array',\n          items: {\n            $ref: 'test#/properties/id'\n          }\n        }\n      }\n    }\n  });\n  fastify.post('/:id', {\n    handler: echoBody,\n    schema: {\n      body: {\n        id: {\n          $ref: 'test#/properties/id'\n        }\n      },\n      response: {\n        200: {\n          id: {\n            $ref: 'test#/properties/id'\n          }\n        }\n      }\n    }\n  });\n  fastify.ready(err => t.error(err));\n});","file":"schema-feature.test.js","skipped":false,"dir":"test"},{"name":"Get schema anyway should not add `properties` if allOf is present","suites":[],"updatePoint":{"line":810,"column":71,"index":16286},"line":810,"code":"test('Get schema anyway should not add `properties` if allOf is present', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  fastify.addSchema({\n    $id: 'first',\n    type: 'object',\n    properties: {\n      first: {\n        type: 'number'\n      }\n    }\n  });\n  fastify.addSchema({\n    $id: 'second',\n    type: 'object',\n    allOf: [{\n      type: 'object',\n      properties: {\n        second: {\n          type: 'number'\n        }\n      }\n    }, fastify.getSchema('first')]\n  });\n  fastify.get('/', {\n    handler: () => {},\n    schema: {\n      querystring: fastify.getSchema('second'),\n      response: {\n        200: fastify.getSchema('second')\n      }\n    }\n  });\n  fastify.ready(err => t.error(err));\n});","file":"schema-feature.test.js","skipped":false,"dir":"test"},{"name":"Get schema anyway should not add `properties` if oneOf is present","suites":[],"updatePoint":{"line":845,"column":71,"index":16991},"line":845,"code":"test('Get schema anyway should not add `properties` if oneOf is present', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  fastify.addSchema({\n    $id: 'first',\n    type: 'object',\n    properties: {\n      first: {\n        type: 'number'\n      }\n    }\n  });\n  fastify.addSchema({\n    $id: 'second',\n    type: 'object',\n    oneOf: [{\n      type: 'object',\n      properties: {\n        second: {\n          type: 'number'\n        }\n      }\n    }, fastify.getSchema('first')]\n  });\n  fastify.get('/', {\n    handler: () => {},\n    schema: {\n      querystring: fastify.getSchema('second'),\n      response: {\n        200: fastify.getSchema('second')\n      }\n    }\n  });\n  fastify.ready(err => t.error(err));\n});","file":"schema-feature.test.js","skipped":false,"dir":"test"},{"name":"Get schema anyway should not add `properties` if anyOf is present","suites":[],"updatePoint":{"line":880,"column":71,"index":17696},"line":880,"code":"test('Get schema anyway should not add `properties` if anyOf is present', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  fastify.addSchema({\n    $id: 'first',\n    type: 'object',\n    properties: {\n      first: {\n        type: 'number'\n      }\n    }\n  });\n  fastify.addSchema({\n    $id: 'second',\n    type: 'object',\n    anyOf: [{\n      type: 'object',\n      properties: {\n        second: {\n          type: 'number'\n        }\n      }\n    }, fastify.getSchema('first')]\n  });\n  fastify.get('/', {\n    handler: () => {},\n    schema: {\n      querystring: fastify.getSchema('second'),\n      response: {\n        200: fastify.getSchema('second')\n      }\n    }\n  });\n  fastify.ready(err => t.error(err));\n});","file":"schema-feature.test.js","skipped":false,"dir":"test"},{"name":"Shared schema should be ignored in string enum","suites":[],"updatePoint":{"line":915,"column":52,"index":18382},"line":915,"code":"test('Shared schema should be ignored in string enum', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  fastify.get('/:lang', {\n    handler: echoParams,\n    schema: {\n      params: {\n        type: 'object',\n        properties: {\n          lang: {\n            type: 'string',\n            enum: ['Javascript', 'C++', 'C#']\n          }\n        }\n      }\n    }\n  });\n  fastify.inject('/C%23', (err, res) => {\n    t.error(err);\n    t.same(res.json(), {\n      lang: 'C#'\n    });\n  });\n});","file":"schema-feature.test.js","skipped":false,"dir":"test"},{"name":"Shared schema should NOT be ignored in != string enum","suites":[],"updatePoint":{"line":939,"column":59,"index":18874},"line":939,"code":"test('Shared schema should NOT be ignored in != string enum', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  fastify.addSchema({\n    $id: 'C',\n    type: 'object',\n    properties: {\n      lang: {\n        type: 'string',\n        enum: ['Javascript', 'C++', 'C#']\n      }\n    }\n  });\n  fastify.post('/:lang', {\n    handler: echoBody,\n    schema: {\n      body: fastify.getSchema('C')\n    }\n  });\n  fastify.inject({\n    url: '/',\n    method: 'POST',\n    payload: {\n      lang: 'C#'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.same(res.json(), {\n      lang: 'C#'\n    });\n  });\n});","file":"schema-feature.test.js","skipped":false,"dir":"test"},{"name":"Case insensitive header validation","suites":[],"updatePoint":{"line":971,"column":40,"index":19441},"line":971,"code":"test('Case insensitive header validation', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  fastify.get('/', {\n    handler: (req, reply) => {\n      reply.code(200).send(req.headers.foobar);\n    },\n    schema: {\n      headers: {\n        type: 'object',\n        required: ['FooBar'],\n        properties: {\n          FooBar: {\n            type: 'string'\n          }\n        }\n      }\n    }\n  });\n  fastify.inject({\n    url: '/',\n    method: 'GET',\n    headers: {\n      FooBar: 'Baz'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.payload, 'Baz');\n  });\n});","file":"schema-feature.test.js","skipped":false,"dir":"test"},{"name":"Not evaluate json-schema $schema keyword","suites":[],"updatePoint":{"line":1001,"column":46,"index":20017},"line":1001,"code":"test('Not evaluate json-schema $schema keyword', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  fastify.post('/', {\n    handler: echoBody,\n    schema: {\n      body: {\n        $schema: 'http://json-schema.org/draft-07/schema#',\n        type: 'object',\n        additionalProperties: false,\n        properties: {\n          hello: {\n            type: 'string'\n          }\n        }\n      }\n    }\n  });\n  fastify.inject({\n    url: '/',\n    method: 'POST',\n    body: {\n      hello: 'world',\n      foo: 'bar'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.same(res.json(), {\n      hello: 'world'\n    });\n  });\n});","file":"schema-feature.test.js","skipped":false,"dir":"test"},{"name":"Validation context in validation result","suites":[],"updatePoint":{"line":1033,"column":45,"index":20631},"line":1033,"code":"test('Validation context in validation result', t => {\n  t.plan(5);\n  const fastify = Fastify(); // custom error handler to expose validation context in response, so we can test it later\n\n  fastify.setErrorHandler((err, request, reply) => {\n    t.equal(err instanceof Error, true);\n    t.ok(err.validation, 'detailed errors');\n    t.equal(err.validationContext, 'body');\n    reply.code(400).send();\n  });\n  fastify.post('/', {\n    handler: echoParams,\n    schema: {\n      body: {\n        type: 'object',\n        required: ['hello'],\n        properties: {\n          hello: {\n            type: 'string'\n          }\n        }\n      }\n    }\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/',\n    payload: {} // body lacks required field, will fail validation\n\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 400);\n  });\n});","file":"schema-feature.test.js","skipped":false,"dir":"test"},{"name":"The schema build should not modify the input","suites":[],"updatePoint":{"line":1067,"column":50,"index":21483},"line":1067,"code":"test('The schema build should not modify the input', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  const first = {\n    $id: 'first',\n    type: 'object',\n    properties: {\n      first: {\n        type: 'number'\n      }\n    }\n  };\n  fastify.addSchema(first);\n  fastify.addSchema({\n    $id: 'second',\n    type: 'object',\n    allOf: [{\n      type: 'object',\n      properties: {\n        second: {\n          type: 'number'\n        }\n      }\n    }, {\n      $ref: 'first#'\n    }]\n  });\n  fastify.post('/', {\n    schema: {\n      description: 'get',\n      body: {\n        $ref: 'second#'\n      },\n      response: {\n        200: {\n          $ref: 'second#'\n        }\n      }\n    },\n    handler: (request, reply) => {\n      reply.send({\n        hello: 'world'\n      });\n    }\n  });\n  fastify.patch('/', {\n    schema: {\n      description: 'patch',\n      body: {\n        $ref: 'first#'\n      },\n      response: {\n        200: {\n          $ref: 'first#'\n        }\n      }\n    },\n    handler: (request, reply) => {\n      reply.send({\n        hello: 'world'\n      });\n    }\n  });\n  t.ok(first.$id);\n  fastify.ready(err => {\n    t.error(err);\n    t.ok(first.$id);\n  });\n});","file":"schema-feature.test.js","skipped":false,"dir":"test"},{"name":"Cross schema reference with encapsulation references","suites":[],"updatePoint":{"line":1136,"column":58,"index":22651},"line":1136,"code":"test('Cross schema reference with encapsulation references', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  fastify.addSchema({\n    $id: 'http://foo/item',\n    type: 'object',\n    properties: {\n      foo: {\n        type: 'string'\n      }\n    }\n  });\n  const refItem = {\n    $ref: 'http://foo/item#'\n  };\n  fastify.addSchema({\n    $id: 'itemList',\n    type: 'array',\n    items: refItem\n  });\n  fastify.register((instance, opts, done) => {\n    instance.addSchema({\n      $id: 'encapsulation',\n      type: 'object',\n      properties: {\n        id: {\n          type: 'number'\n        },\n        item: refItem,\n        secondItem: refItem\n      }\n    });\n    const multipleRef = {\n      type: 'object',\n      properties: {\n        a: {\n          $ref: 'itemList#'\n        },\n        b: refItem,\n        c: refItem,\n        d: refItem\n      }\n    };\n    instance.get('/get', {\n      schema: {\n        response: {\n          200: deepClone(multipleRef)\n        }\n      }\n    }, () => {});\n    instance.get('/double-get', {\n      schema: {\n        querystring: multipleRef,\n        response: {\n          200: multipleRef\n        }\n      }\n    }, () => {});\n    instance.post('/post', {\n      schema: {\n        body: multipleRef,\n        response: {\n          200: multipleRef\n        }\n      }\n    }, () => {});\n    instance.post('/double', {\n      schema: {\n        response: {\n          200: {\n            $ref: 'encapsulation'\n          }\n        }\n      }\n    }, () => {});\n    done();\n  }, {\n    prefix: '/foo'\n  });\n  fastify.post('/post', {\n    schema: {\n      body: refItem,\n      response: {\n        200: refItem\n      }\n    }\n  }, () => {});\n  fastify.get('/get', {\n    schema: {\n      params: refItem,\n      response: {\n        200: refItem\n      }\n    }\n  }, () => {});\n  fastify.ready(err => {\n    t.error(err);\n  });\n});","file":"schema-feature.test.js","skipped":false,"dir":"test"},{"name":"Check how many AJV instances are built #1","suites":[],"updatePoint":{"line":1235,"column":47,"index":24470},"line":1235,"code":"test('Check how many AJV instances are built #1', t => {\n  t.plan(12);\n  const fastify = Fastify();\n  addRandomRoute(fastify); // this trigger the schema validation creation\n\n  t.notOk(fastify.validatorCompiler, 'validator not initialized');\n  const instances = [];\n  fastify.register((instance, opts, done) => {\n    t.notOk(fastify.validatorCompiler, 'validator not initialized');\n    instances.push(instance);\n    done();\n  });\n  fastify.register((instance, opts, done) => {\n    t.notOk(fastify.validatorCompiler, 'validator not initialized');\n    addRandomRoute(instance);\n    instances.push(instance);\n    done();\n    instance.register((instance, opts, done) => {\n      t.notOk(fastify.validatorCompiler, 'validator not initialized');\n      addRandomRoute(instance);\n      instances.push(instance);\n      done();\n    });\n  });\n  fastify.ready(err => {\n    t.error(err);\n    t.ok(fastify.validatorCompiler, 'validator initialized on preReady');\n    fastify.validatorCompiler.checkPointer = true;\n    instances.forEach(i => {\n      t.ok(i.validatorCompiler, 'validator initialized on preReady');\n      t.equal(i.validatorCompiler.checkPointer, true, 'validator is only one for all the instances');\n    });\n  });\n});","file":"schema-feature.test.js","skipped":false,"dir":"test"},{"name":"onReady hook has the compilers ready","suites":[],"updatePoint":{"line":1269,"column":42,"index":25683},"line":1269,"code":"test('onReady hook has the compilers ready', t => {\n  t.plan(6);\n  const fastify = Fastify();\n  fastify.get(`/${Math.random()}`, {\n    handler: (req, reply) => reply.send(),\n    schema: {\n      headers: {\n        type: 'object'\n      },\n      response: {\n        200: {\n          type: 'object'\n        }\n      }\n    }\n  });\n  fastify.addHook('onReady', function (done) {\n    t.ok(this.validatorCompiler);\n    t.ok(this.serializerCompiler);\n    done();\n  });\n  let hookCallCounter = 0;\n  fastify.register(async (i, o) => {\n    i.addHook('onReady', function (done) {\n      t.ok(this.validatorCompiler);\n      t.ok(this.serializerCompiler);\n      done();\n    });\n    i.register(async (i, o) => {});\n    i.addHook('onReady', function (done) {\n      hookCallCounter++;\n      done();\n    });\n  });\n  fastify.ready(err => {\n    t.error(err);\n    t.equal(hookCallCounter, 1, 'it is called once');\n  });\n});","file":"schema-feature.test.js","skipped":false,"dir":"test"},{"name":"Check how many AJV instances are built #2 - verify validatorPool","suites":[],"updatePoint":{"line":1308,"column":70,"index":26611},"line":1308,"code":"test('Check how many AJV instances are built #2 - verify validatorPool', t => {\n  t.plan(13);\n  const fastify = Fastify();\n  t.notOk(fastify.validatorCompiler, 'validator not initialized');\n  fastify.register(function sibling1(instance, opts, done) {\n    addRandomRoute(instance);\n    t.notOk(instance.validatorCompiler, 'validator not initialized');\n    instance.ready(() => {\n      t.ok(instance.validatorCompiler, 'validator is initialized');\n      instance.validatorCompiler.sharedPool = 1;\n    });\n    instance.after(() => {\n      t.notOk(instance.validatorCompiler, 'validator not initialized');\n    });\n    done();\n  });\n  fastify.register(function sibling2(instance, opts, done) {\n    addRandomRoute(instance);\n    t.notOk(instance.validatorCompiler, 'validator not initialized');\n    instance.ready(() => {\n      t.equal(instance.validatorCompiler.sharedPool, 1, 'this context must share the validator with the same schemas');\n      instance.validatorCompiler.sharedPool = 2;\n    });\n    instance.after(() => {\n      t.notOk(instance.validatorCompiler, 'validator not initialized');\n    });\n    instance.register((instance, opts, done) => {\n      t.notOk(instance.validatorCompiler, 'validator not initialized');\n      instance.ready(() => {\n        t.equal(instance.validatorCompiler.sharedPool, 2, 'this context must share the validator of the parent');\n      });\n      done();\n    });\n    done();\n  });\n  fastify.register(function sibling3(instance, opts, done) {\n    addRandomRoute(instance); // this trigger to dont't reuse the same compiler pool\n\n    instance.addSchema({\n      $id: 'diff',\n      type: 'object'\n    });\n    t.notOk(instance.validatorCompiler, 'validator not initialized');\n    instance.ready(() => {\n      t.ok(instance.validatorCompiler, 'validator is initialized');\n      t.notOk(instance.validatorCompiler.sharedPool, 'this context has its own compiler');\n    });\n    done();\n  });\n  fastify.ready(err => {\n    t.error(err);\n  });\n});","file":"schema-feature.test.js","skipped":false,"dir":"test"},{"name":"Add schema order should not break the startup","suites":[],"updatePoint":{"line":1372,"column":51,"index":28738},"line":1372,"code":"test('Add schema order should not break the startup', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  fastify.get('/', {\n    schema: {\n      random: 'options'\n    }\n  }, () => {});\n  fastify.register(fp((f, opts) => {\n    f.addSchema({\n      $id: 'https://example.com/bson/objectId',\n      type: 'string',\n      pattern: '\\\\b[0-9A-Fa-f]{24}\\\\b'\n    });\n    return Promise.resolve(); // avoid async for node 6\n  }));\n  fastify.get('/:id', {\n    schema: {\n      params: {\n        type: 'object',\n        properties: {\n          id: {\n            $ref: 'https://example.com/bson/objectId#'\n          }\n        }\n      }\n    }\n  }, () => {});\n  fastify.ready(err => {\n    t.error(err);\n  });\n});","file":"schema-feature.test.js","skipped":false,"dir":"test"},{"name":"The schema compiler recreate itself if needed","suites":[],"updatePoint":{"line":1404,"column":51,"index":29433},"line":1404,"code":"test('The schema compiler recreate itself if needed', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  fastify.options('/', {\n    schema: {\n      hide: true\n    }\n  }, echoBody);\n  fastify.register(function (fastify, options, done) {\n    fastify.addSchema({\n      $id: 'identifier',\n      type: 'string',\n      format: 'uuid'\n    });\n    fastify.get('/:foobarId', {\n      schema: {\n        params: {\n          foobarId: {\n            $ref: 'identifier#'\n          }\n        }\n      }\n    }, echoBody);\n    done();\n  });\n  fastify.ready(err => {\n    t.error(err);\n  });\n});","file":"schema-feature.test.js","skipped":false,"dir":"test"},{"name":"Schema controller setter","suites":[],"updatePoint":{"line":1433,"column":30,"index":29987},"line":1433,"code":"test('Schema controller setter', t => {\n  t.plan(2);\n  Fastify({\n    schemaController: {}\n  });\n  t.pass('allow empty object');\n\n  try {\n    Fastify({\n      schemaController: {\n        bucket: {}\n      }\n    });\n    t.fail('the bucket option must be a function');\n  } catch (err) {\n    t.equal(err.message, \"schemaController.bucket option should be a function, instead got 'object'\");\n  }\n});","file":"schema-feature.test.js","skipped":false,"dir":"test"},{"name":"Schema controller bucket","suites":[],"updatePoint":{"line":1451,"column":30,"index":30380},"line":1451,"code":"test('Schema controller bucket', t => {\n  t.plan(10);\n  let added = 0;\n  let builtBucket = 0;\n  const initStoreQueue = [];\n\n  function factoryBucket(storeInit) {\n    builtBucket++;\n    t.same(initStoreQueue.pop(), storeInit);\n    const store = new Map(storeInit);\n    return {\n      add(schema) {\n        added++;\n        store.set(schema.$id, schema);\n      },\n\n      getSchema(id) {\n        return store.get(id);\n      },\n\n      getSchemas() {\n        // what is returned by this function, will be the `storeInit` parameter\n        initStoreQueue.push(store);\n        return store;\n      }\n\n    };\n  }\n\n  const fastify = Fastify({\n    schemaController: {\n      bucket: factoryBucket\n    }\n  });\n  fastify.register(async instance => {\n    instance.addSchema({\n      $id: 'b',\n      type: 'string'\n    });\n    instance.addHook('onReady', function (done) {\n      t.equal(instance.getSchemas().size, 2);\n      done();\n    });\n    instance.register(async subinstance => {\n      subinstance.addSchema({\n        $id: 'c',\n        type: 'string'\n      });\n      subinstance.addHook('onReady', function (done) {\n        t.equal(subinstance.getSchemas().size, 3);\n        done();\n      });\n    });\n  });\n  fastify.register(async instance => {\n    instance.addHook('onReady', function (done) {\n      t.equal(instance.getSchemas().size, 1);\n      done();\n    });\n  });\n  fastify.addSchema({\n    $id: 'a',\n    type: 'string'\n  });\n  fastify.ready(err => {\n    t.error(err);\n    t.equal(added, 3, 'three schema added');\n    t.equal(builtBucket, 4, 'one bucket built for every register call + 1 for the root instance');\n  });\n});","file":"schema-feature.test.js","skipped":false,"dir":"test"},{"name":"setSchemaController per instance","suites":[],"updatePoint":{"line":1521,"column":38,"index":32005},"line":1521,"code":"test('setSchemaController per instance', t => {\n  t.plan(7);\n  const fastify = Fastify({});\n  fastify.register(async instance1 => {\n    instance1.setSchemaController({\n      bucket: function factoryBucket(storeInit) {\n        t.pass('instance1 has created the bucket');\n        return {\n          add(schema) {\n            t.fail('add is not called');\n          },\n\n          getSchema(id) {\n            t.fail('getSchema is not called');\n          },\n\n          getSchemas() {\n            t.fail('getSchemas is not called');\n          }\n\n        };\n      }\n    });\n  });\n  fastify.register(async instance2 => {\n    const bSchema = {\n      $id: 'b',\n      type: 'string'\n    };\n    instance2.setSchemaController({\n      bucket: function factoryBucket(storeInit) {\n        t.pass('instance2 has created the bucket');\n        const map = {};\n        return {\n          add(schema) {\n            t.equal(schema.$id, bSchema.$id, 'add is called');\n            map[schema.$id] = schema;\n          },\n\n          getSchema(id) {\n            t.pass('getSchema is called');\n            return map[id];\n          },\n\n          getSchemas() {\n            t.pass('getSchemas is called');\n          }\n\n        };\n      }\n    });\n    instance2.addSchema(bSchema);\n    instance2.addHook('onReady', function (done) {\n      instance2.getSchemas();\n      t.same(instance2.getSchema('b'), bSchema, 'the schema are loaded');\n      done();\n    });\n  });\n  fastify.ready(err => {\n    t.error(err);\n  });\n});","file":"schema-feature.test.js","skipped":false,"dir":"test"},{"name":"setSchemaController: Inherits correctly parent schemas with a customized validator instance","suites":[],"updatePoint":{"line":1583,"column":97,"index":33550},"line":1583,"code":"test('setSchemaController: Inherits correctly parent schemas with a customized validator instance', async t => {\n  t.plan(5);\n  const customAjv = new Ajv({\n    coerceTypes: false\n  });\n  const server = Fastify();\n  const someSchema = {\n    $id: 'some',\n    type: 'array',\n    items: {\n      type: 'string'\n    }\n  };\n  const errorResponseSchema = {\n    $id: 'error_response',\n    type: 'object',\n    properties: {\n      statusCode: {\n        type: 'integer'\n      },\n      message: {\n        type: 'string'\n      }\n    }\n  };\n  server.addSchema(someSchema);\n  server.addSchema(errorResponseSchema);\n  server.register((instance, _, done) => {\n    instance.setSchemaController({\n      compilersFactory: {\n        buildValidator: function (externalSchemas) {\n          const schemaKeys = Object.keys(externalSchemas);\n          t.equal(schemaKeys.length, 2, 'Contains same number of schemas');\n          t.hasStrict([someSchema, errorResponseSchema], Object.values(externalSchemas), 'Contains expected schemas');\n\n          for (const key of schemaKeys) {\n            if (customAjv.getSchema(key) == null) {\n              customAjv.addSchema(externalSchemas[key], key);\n            }\n          }\n\n          return function validatorCompiler({\n            schema\n          }) {\n            return customAjv.compile(schema);\n          };\n        }\n      }\n    });\n    instance.get('/', {\n      schema: {\n        querystring: {\n          msg: {\n            $ref: 'some#'\n          }\n        },\n        response: {\n          '4xx': {\n            $ref: 'error_response#'\n          }\n        }\n      }\n    }, (req, reply) => {\n      reply.send({\n        noop: 'noop'\n      });\n    });\n    done();\n  });\n  const res = await server.inject({\n    method: 'GET',\n    url: '/',\n    query: {\n      msg: 'string'\n    }\n  });\n  const json = res.json();\n  t.equal(json.message, 'querystring/msg must be array');\n  t.equal(json.statusCode, 400);\n  t.equal(res.statusCode, 400, 'Should not coearce the string into array');\n});","file":"schema-feature.test.js","skipped":false,"dir":"test"},{"name":"setSchemaController: Inherits buildSerializer from parent if not present within the instance","suites":[],"updatePoint":{"line":1664,"column":98,"index":35557},"line":1664,"code":"test('setSchemaController: Inherits buildSerializer from parent if not present within the instance', async t => {\n  t.plan(6);\n  const customAjv = new Ajv({\n    coerceTypes: false\n  });\n  const someSchema = {\n    $id: 'some',\n    type: 'array',\n    items: {\n      type: 'string'\n    }\n  };\n  const errorResponseSchema = {\n    $id: 'error_response',\n    type: 'object',\n    properties: {\n      statusCode: {\n        type: 'integer'\n      },\n      message: {\n        type: 'string'\n      }\n    }\n  };\n  let rootSerializerCalled = 0;\n  let rootValidatorCalled = 0;\n  let childValidatorCalled = 0;\n\n  const rootBuildSerializer = function (externalSchemas) {\n    rootSerializerCalled++;\n    return function serializer() {\n      return data => {\n        return JSON.stringify({\n          statusCode: data.statusCode,\n          message: data.message\n        });\n      };\n    };\n  };\n\n  const rootBuildValidator = function (externalSchemas) {\n    rootValidatorCalled++;\n    return function validatorCompiler({\n      schema\n    }) {\n      return customAjv.compile(schema);\n    };\n  };\n\n  const server = Fastify({\n    schemaController: {\n      compilersFactory: {\n        buildValidator: rootBuildValidator,\n        buildSerializer: rootBuildSerializer\n      }\n    }\n  });\n  server.addSchema(someSchema);\n  server.addSchema(errorResponseSchema);\n  server.register((instance, _, done) => {\n    instance.setSchemaController({\n      compilersFactory: {\n        buildValidator: function (externalSchemas) {\n          childValidatorCalled++;\n          const schemaKeys = Object.keys(externalSchemas);\n\n          for (const key of schemaKeys) {\n            if (customAjv.getSchema(key) == null) {\n              customAjv.addSchema(externalSchemas[key], key);\n            }\n          }\n\n          return function validatorCompiler({\n            schema\n          }) {\n            return customAjv.compile(schema);\n          };\n        }\n      }\n    });\n    instance.get('/', {\n      schema: {\n        querystring: {\n          msg: {\n            $ref: 'some#'\n          }\n        },\n        response: {\n          '4xx': {\n            $ref: 'error_response#'\n          }\n        }\n      }\n    }, (req, reply) => {\n      reply.send({\n        noop: 'noop'\n      });\n    });\n    done();\n  });\n  const res = await server.inject({\n    method: 'GET',\n    url: '/',\n    query: {\n      msg: 'string'\n    }\n  });\n  const json = res.json();\n  t.equal(json.statusCode, 400);\n  t.equal(json.message, 'querystring/msg must be array');\n  t.equal(rootSerializerCalled, 1, 'Should be called from the child');\n  t.equal(rootValidatorCalled, 0, 'Should not be called from the child');\n  t.equal(childValidatorCalled, 1, 'Should be called from the child');\n  t.equal(res.statusCode, 400, 'Should not coerce the string into array');\n});","file":"schema-feature.test.js","skipped":false,"dir":"test"},{"name":"setSchemaController: Inherits buildValidator from parent if not present within the instance","suites":[],"updatePoint":{"line":1779,"column":97,"index":38353},"line":1779,"code":"test('setSchemaController: Inherits buildValidator from parent if not present within the instance', async t => {\n  t.plan(6);\n  const customAjv = new Ajv({\n    coerceTypes: false\n  });\n  const someSchema = {\n    $id: 'some',\n    type: 'array',\n    items: {\n      type: 'string'\n    }\n  };\n  const errorResponseSchema = {\n    $id: 'error_response',\n    type: 'object',\n    properties: {\n      statusCode: {\n        type: 'integer'\n      },\n      message: {\n        type: 'string'\n      }\n    }\n  };\n  let rootSerializerCalled = 0;\n  let rootValidatorCalled = 0;\n  let childSerializerCalled = 0;\n\n  const rootBuildSerializer = function (externalSchemas) {\n    rootSerializerCalled++;\n    return function serializer() {\n      return data => JSON.stringify(data);\n    };\n  };\n\n  const rootBuildValidator = function (externalSchemas) {\n    rootValidatorCalled++;\n    const schemaKeys = Object.keys(externalSchemas);\n\n    for (const key of schemaKeys) {\n      if (customAjv.getSchema(key) == null) {\n        customAjv.addSchema(externalSchemas[key], key);\n      }\n    }\n\n    return function validatorCompiler({\n      schema\n    }) {\n      return customAjv.compile(schema);\n    };\n  };\n\n  const server = Fastify({\n    schemaController: {\n      compilersFactory: {\n        buildValidator: rootBuildValidator,\n        buildSerializer: rootBuildSerializer\n      }\n    }\n  });\n  server.register((instance, _, done) => {\n    instance.register((subInstance, _, subDone) => {\n      subInstance.setSchemaController({\n        compilersFactory: {\n          buildSerializer: function (externalSchemas) {\n            childSerializerCalled++;\n            return function serializerCompiler() {\n              return data => {\n                return JSON.stringify({\n                  statusCode: data.statusCode,\n                  message: data.message\n                });\n              };\n            };\n          }\n        }\n      });\n      subInstance.get('/', {\n        schema: {\n          querystring: {\n            msg: {\n              $ref: 'some#'\n            }\n          },\n          response: {\n            '4xx': {\n              $ref: 'error_response#'\n            }\n          }\n        }\n      }, (req, reply) => {\n        reply.send({\n          noop: 'noop'\n        });\n      });\n      subDone();\n    });\n    done();\n  });\n  server.addSchema(someSchema);\n  server.addSchema(errorResponseSchema);\n  const res = await server.inject({\n    method: 'GET',\n    url: '/',\n    query: {\n      msg: ['string']\n    }\n  });\n  const json = res.json();\n  t.equal(json.statusCode, 400);\n  t.equal(json.message, 'querystring/msg must be array');\n  t.equal(rootSerializerCalled, 0, 'Should be called from the child');\n  t.equal(rootValidatorCalled, 1, 'Should not be called from the child');\n  t.equal(childSerializerCalled, 1, 'Should be called from the child');\n  t.equal(res.statusCode, 400, 'Should not coearce the string into array');\n});","file":"schema-feature.test.js","skipped":false,"dir":"test"},{"name":"Should throw if not default validator passed","suites":[],"updatePoint":{"line":1895,"column":50,"index":41225},"line":1895,"code":"test('Should throw if not default validator passed', async t => {\n  t.plan(4);\n  const customAjv = new Ajv({\n    coerceTypes: false\n  });\n  const someSchema = {\n    $id: 'some',\n    type: 'array',\n    items: {\n      type: 'string'\n    }\n  };\n  const anotherSchema = {\n    $id: 'another',\n    type: 'integer'\n  };\n  const plugin = fp(function (pluginInstance, _, pluginDone) {\n    pluginInstance.setSchemaController({\n      compilersFactory: {\n        buildValidator: function (externalSchemas) {\n          const schemaKeys = Object.keys(externalSchemas);\n          t.equal(schemaKeys.length, 2);\n          t.same(schemaKeys, ['some', 'another']);\n\n          for (const key of schemaKeys) {\n            if (customAjv.getSchema(key) == null) {\n              customAjv.addSchema(externalSchemas[key], key);\n            }\n          }\n\n          return function validatorCompiler({\n            schema\n          }) {\n            return customAjv.compile(schema);\n          };\n        }\n      }\n    });\n    pluginDone();\n  });\n  const server = Fastify();\n  server.addSchema(someSchema);\n  server.register((instance, opts, done) => {\n    instance.addSchema(anotherSchema);\n    instance.register(plugin, {});\n    instance.post('/', {\n      schema: {\n        query: {\n          msg: {\n            $ref: 'some#'\n          }\n        },\n        headers: {\n          'x-another': {\n            $ref: 'another#'\n          }\n        }\n      }\n    }, (req, reply) => {\n      reply.send({\n        noop: 'noop'\n      });\n    });\n    done();\n  });\n\n  try {\n    const res = await server.inject({\n      method: 'POST',\n      url: '/',\n      query: {\n        msg: ['string']\n      }\n    });\n    t.equal(res.json().message, 'querystring/msg must be array');\n    t.equal(res.statusCode, 400, 'Should not coearce the string into array');\n  } catch (err) {\n    t.error(err);\n  }\n});","file":"schema-feature.test.js","skipped":false,"dir":"test"},{"name":"Should coerce the array if the default validator is used","suites":[],"updatePoint":{"line":1975,"column":62,"index":43093},"line":1975,"code":"test('Should coerce the array if the default validator is used', async t => {\n  t.plan(2);\n  const someSchema = {\n    $id: 'some',\n    type: 'array',\n    items: {\n      type: 'string'\n    }\n  };\n  const anotherSchema = {\n    $id: 'another',\n    type: 'integer'\n  };\n  const server = Fastify();\n  server.addSchema(someSchema);\n  server.register((instance, opts, done) => {\n    instance.addSchema(anotherSchema);\n    instance.post('/', {\n      schema: {\n        query: {\n          msg: {\n            $ref: 'some#'\n          }\n        },\n        headers: {\n          'x-another': {\n            $ref: 'another#'\n          }\n        }\n      }\n    }, (req, reply) => {\n      reply.send(req.query);\n    });\n    done();\n  });\n\n  try {\n    const res = await server.inject({\n      method: 'POST',\n      url: '/',\n      query: {\n        msg: 'string'\n      }\n    });\n    t.equal(res.statusCode, 200);\n    t.same(res.json(), {\n      msg: ['string']\n    }, 'Should coearce the string into array');\n  } catch (err) {\n    t.error(err);\n  }\n});","file":"schema-feature.test.js","skipped":false,"dir":"test"},{"name":"Should return a human-friendly error if response status codes are not specified","suites":[],"updatePoint":{"line":2027,"column":85,"index":44145},"line":2027,"code":"test('Should return a human-friendly error if response status codes are not specified', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  fastify.route({\n    url: '/',\n    method: 'GET',\n    schema: {\n      response: {\n        // This should be nested under a status code key, e.g { 200: { type: 'array' } }\n        type: 'array'\n      }\n    },\n    handler: (req, reply) => {\n      reply.send([]);\n    }\n  });\n  fastify.ready(err => {\n    t.equal(err.code, 'FST_ERR_SCH_SERIALIZATION_BUILD');\n    t.match(err.message, 'Failed building the serialization schema for GET: /, due to error response schemas should be nested under a valid status code, e.g { 2xx: { type: \"object\" } }');\n  });\n});","file":"schema-feature.test.js","skipped":false,"dir":"test"},{"name":"setSchemaController: custom validator instance should not mutate headers schema","suites":[],"updatePoint":{"line":2048,"column":85,"index":44837},"line":2048,"code":"test('setSchemaController: custom validator instance should not mutate headers schema', async t => {\n  t.plan(2);\n\n  class Headers {}\n\n  const fastify = Fastify();\n  fastify.setSchemaController({\n    compilersFactory: {\n      buildValidator: function () {\n        return ({\n          schema,\n          method,\n          url,\n          httpPart\n        }) => {\n          t.type(schema, Headers);\n          return () => {};\n        };\n      }\n    }\n  });\n  fastify.get('/', {\n    schema: {\n      headers: new Headers()\n    }\n  }, () => {});\n  await fastify.ready();\n});","file":"schema-feature.test.js","skipped":false,"dir":"test"},{"name":"basic test","suites":[],"updatePoint":{"line":13,"column":16,"index":176},"line":13,"code":"test('basic test', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.get('/', {\n    schema: {\n      response: {\n        '2xx': {\n          type: 'object',\n          properties: {\n            name: {\n              type: 'string'\n            },\n            work: {\n              type: 'string'\n            }\n          }\n        }\n      }\n    }\n  }, function (req, reply) {\n    reply.code(200).send({\n      name: 'Foo',\n      work: 'Bar',\n      nick: 'Boo'\n    });\n  });\n  fastify.inject('/', (err, res) => {\n    t.error(err);\n    t.same(res.json(), {\n      name: 'Foo',\n      work: 'Bar'\n    });\n    t.equal(res.statusCode, 200);\n  });\n});","file":"schema-serialization.test.js","skipped":false,"dir":"test"},{"name":"custom serializer options","suites":[],"updatePoint":{"line":48,"column":31,"index":838},"line":48,"code":"test('custom serializer options', t => {\n  t.plan(3);\n  const fastify = Fastify({\n    serializerOpts: {\n      rounding: 'ceil'\n    }\n  });\n  fastify.get('/', {\n    schema: {\n      response: {\n        '2xx': {\n          type: 'integer'\n        }\n      }\n    }\n  }, function (req, reply) {\n    reply.send(4.2);\n  });\n  fastify.inject('/', (err, res) => {\n    t.error(err);\n    t.equal(res.payload, '5', 'it must use the ceil rouding');\n    t.equal(res.statusCode, 200);\n  });\n});","file":"schema-serialization.test.js","skipped":false,"dir":"test"},{"name":"Use the same schema id in different places","suites":[],"updatePoint":{"line":72,"column":48,"index":1333},"line":72,"code":"test('Use the same schema id in different places', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  fastify.addSchema({\n    $id: 'test',\n    type: 'object',\n    properties: {\n      id: {\n        type: 'number'\n      }\n    }\n  });\n  fastify.get('/:id', {\n    handler(req, reply) {\n      reply.send([{\n        id: 1\n      }, {\n        id: 2\n      }, {\n        what: 'is this'\n      }]);\n    },\n\n    schema: {\n      response: {\n        200: {\n          type: 'array',\n          items: {\n            $ref: 'test'\n          }\n        }\n      }\n    }\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/123'\n  }, (err, res) => {\n    t.error(err);\n    t.same(res.json(), [{\n      id: 1\n    }, {\n      id: 2\n    }, {}]);\n  });\n});","file":"schema-serialization.test.js","skipped":false,"dir":"test"},{"name":"Use shared schema and $ref with $id in response ($ref to $id)","suites":[],"updatePoint":{"line":118,"column":67,"index":2080},"line":118,"code":"test('Use shared schema and $ref with $id in response ($ref to $id)', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.addSchema({\n    $id: 'http://foo/test',\n    type: 'object',\n    properties: {\n      id: {\n        type: 'number'\n      }\n    }\n  });\n  const complexSchema = {\n    $schema: 'http://json-schema.org/draft-07/schema#',\n    $id: 'http://foo/user',\n    type: 'object',\n    definitions: {\n      address: {\n        $id: '#address',\n        type: 'object',\n        properties: {\n          city: {\n            type: 'string'\n          }\n        }\n      }\n    },\n    properties: {\n      test: {\n        $ref: 'http://foo/test#'\n      },\n      address: {\n        $ref: '#address'\n      }\n    },\n    required: ['address', 'test']\n  };\n  fastify.post('/', {\n    schema: {\n      body: complexSchema,\n      response: {\n        200: complexSchema\n      }\n    },\n    handler: (req, reply) => {\n      req.body.removeThis = 'it should not be serialized';\n      reply.send(req.body);\n    }\n  });\n  const payload = {\n    address: {\n      city: 'New Node'\n    },\n    test: {\n      id: Date.now()\n    }\n  };\n  fastify.inject({\n    method: 'POST',\n    url: '/',\n    payload\n  }, (err, res) => {\n    t.error(err);\n    t.same(res.json(), payload);\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/',\n    payload: {\n      test: {\n        id: Date.now()\n      }\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 400);\n    t.same(res.json(), {\n      error: 'Bad Request',\n      message: \"body must have required property 'address'\",\n      statusCode: 400\n    });\n  });\n});","file":"schema-serialization.test.js","skipped":false,"dir":"test"},{"name":"Shared schema should be pass to serializer and validator ($ref to shared schema /definitions)","suites":[],"updatePoint":{"line":201,"column":99,"index":3714},"line":201,"code":"test('Shared schema should be pass to serializer and validator ($ref to shared schema /definitions)', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.addSchema({\n    $id: 'http://example.com/asset.json',\n    $schema: 'http://json-schema.org/draft-07/schema#',\n    title: 'Physical Asset',\n    description: 'A generic representation of a physical asset',\n    type: 'object',\n    required: ['id', 'model', 'location'],\n    properties: {\n      id: {\n        type: 'string',\n        format: 'uuid'\n      },\n      model: {\n        type: 'string'\n      },\n      location: {\n        $ref: 'http://example.com/point.json#'\n      }\n    },\n    definitions: {\n      inner: {\n        $id: '#innerId',\n        type: 'string',\n        format: 'email'\n      }\n    }\n  });\n  fastify.addSchema({\n    $id: 'http://example.com/point.json',\n    $schema: 'http://json-schema.org/draft-07/schema#',\n    title: 'Longitude and Latitude Values',\n    description: 'A geographical coordinate.',\n    type: 'object',\n    required: ['latitude', 'longitude'],\n    properties: {\n      email: {\n        $ref: 'http://example.com/asset.json#/definitions/inner'\n      },\n      latitude: {\n        type: 'number',\n        minimum: -90,\n        maximum: 90\n      },\n      longitude: {\n        type: 'number',\n        minimum: -180,\n        maximum: 180\n      },\n      altitude: {\n        type: 'number'\n      }\n    }\n  });\n  const schemaLocations = {\n    $id: 'http://example.com/locations.json',\n    $schema: 'http://json-schema.org/draft-07/schema#',\n    title: 'List of Asset locations',\n    type: 'array',\n    items: {\n      $ref: 'http://example.com/asset.json#'\n    }\n  };\n  fastify.post('/', {\n    schema: {\n      body: schemaLocations,\n      response: {\n        200: schemaLocations\n      }\n    }\n  }, (req, reply) => {\n    reply.send(locations.map(_ => Object.assign({\n      serializer: 'remove me'\n    }, _)));\n  });\n  const locations = [{\n    id: '550e8400-e29b-41d4-a716-446655440000',\n    model: 'mod',\n    location: {\n      latitude: 10,\n      longitude: 10,\n      email: 'foo@bar.it'\n    }\n  }, {\n    id: '550e8400-e29b-41d4-a716-446655440000',\n    model: 'mod',\n    location: {\n      latitude: 10,\n      longitude: 10,\n      email: 'foo@bar.it'\n    }\n  }];\n  fastify.inject({\n    method: 'POST',\n    url: '/',\n    payload: locations\n  }, (err, res) => {\n    t.error(err);\n    t.same(res.json(), locations);\n    fastify.inject({\n      method: 'POST',\n      url: '/',\n      payload: locations.map(_ => {\n        _.location.email = 'not an email';\n        return _;\n      })\n    }, (err, res) => {\n      t.error(err);\n      t.equal(res.statusCode, 400);\n      t.same(res.json(), {\n        error: 'Bad Request',\n        message: 'body/0/location/email must match format \"email\"',\n        statusCode: 400\n      });\n    });\n  });\n});","file":"schema-serialization.test.js","skipped":false,"dir":"test"},{"name":"Custom setSerializerCompiler","suites":[],"updatePoint":{"line":320,"column":34,"index":6467},"line":320,"code":"test('Custom setSerializerCompiler', t => {\n  t.plan(7);\n  const fastify = Fastify({\n    exposeHeadRoutes: false\n  });\n  const outSchema = {\n    $id: 'test',\n    type: 'object',\n    whatever: 'need to be parsed by the custom serializer'\n  };\n  fastify.setSerializerCompiler(({\n    schema,\n    method,\n    url,\n    httpStatus\n  }) => {\n    t.equal(method, 'GET');\n    t.equal(url, '/foo/:id');\n    t.equal(httpStatus, '200');\n    t.same(schema, outSchema);\n    return data => JSON.stringify(data);\n  });\n  fastify.register((instance, opts, done) => {\n    instance.get('/:id', {\n      handler(req, reply) {\n        reply.send({\n          id: 1\n        });\n      },\n\n      schema: {\n        response: {\n          200: outSchema\n        }\n      }\n    });\n    t.ok(instance.serializerCompiler, 'the serializer is set by the parent');\n    done();\n  }, {\n    prefix: '/foo'\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/foo/123'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.payload, JSON.stringify({\n      id: 1\n    }));\n  });\n});","file":"schema-serialization.test.js","skipped":false,"dir":"test"},{"name":"Custom setSerializerCompiler returns bad serialized output","suites":[],"updatePoint":{"line":371,"column":64,"index":7540},"line":371,"code":"test('Custom setSerializerCompiler returns bad serialized output', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  const outSchema = {\n    $id: 'test',\n    type: 'object',\n    whatever: 'need to be parsed by the custom serializer'\n  };\n  fastify.setSerializerCompiler(({\n    schema,\n    method,\n    url,\n    httpStatus\n  }) => {\n    return data => {\n      t.pass('returning an invalid serialization');\n      return {\n        not: 'a string'\n      };\n    };\n  });\n  fastify.get('/:id', {\n    handler(req, reply) {\n      throw new Error('ops');\n    },\n\n    schema: {\n      response: {\n        500: outSchema\n      }\n    }\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/123'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 500);\n    t.strictSame(res.json(), {\n      code: 'FST_ERR_REP_INVALID_PAYLOAD_TYPE',\n      message: 'Attempted to send payload of invalid type \\'object\\'. Expected a string or Buffer.',\n      statusCode: 500\n    });\n  });\n});","file":"schema-serialization.test.js","skipped":false,"dir":"test"},{"name":"Custom serializer per route","suites":[],"updatePoint":{"line":416,"column":33,"index":8485},"line":416,"code":"test('Custom serializer per route', async t => {\n  const fastify = Fastify();\n  const outSchema = {\n    $id: 'test',\n    type: 'object',\n    properties: {\n      mean: {\n        type: 'string'\n      }\n    }\n  };\n  fastify.get('/default', {\n    handler(req, reply) {\n      reply.send({\n        mean: 'default'\n      });\n    },\n\n    schema: {\n      response: {\n        200: outSchema\n      }\n    }\n  });\n  let hit = 0;\n  fastify.register((instance, opts, done) => {\n    instance.setSerializerCompiler(({\n      schema,\n      method,\n      url,\n      httpStatus\n    }) => {\n      hit++;\n      return data => JSON.stringify({\n        mean: 'custom'\n      });\n    });\n    instance.get('/custom', {\n      handler(req, reply) {\n        reply.send({});\n      },\n\n      schema: {\n        response: {\n          200: outSchema\n        }\n      }\n    });\n    instance.get('/route', {\n      handler(req, reply) {\n        reply.send({});\n      },\n\n      serializerCompiler: ({\n        schema,\n        method,\n        url,\n        httpPart\n      }) => {\n        hit++;\n        return data => JSON.stringify({\n          mean: 'route'\n        });\n      },\n      schema: {\n        response: {\n          200: outSchema\n        }\n      }\n    });\n    done();\n  });\n  let res = await fastify.inject('/default');\n  t.equal(res.json().mean, 'default');\n  res = await fastify.inject('/custom');\n  t.equal(res.json().mean, 'custom');\n  res = await fastify.inject('/route');\n  t.equal(res.json().mean, 'route');\n  t.equal(hit, 4, 'the custom and route serializer has been called');\n});","file":"schema-serialization.test.js","skipped":false,"dir":"test"},{"name":"Reply serializer win over serializer ","suites":[],"updatePoint":{"line":496,"column":43,"index":10051},"line":496,"code":"test('Reply serializer win over serializer ', t => {\n  t.plan(6);\n  const fastify = Fastify();\n  fastify.setReplySerializer(function (payload, statusCode) {\n    t.same(payload, {\n      name: 'Foo',\n      work: 'Bar',\n      nick: 'Boo'\n    });\n    return 'instance serializator';\n  });\n  fastify.get('/', {\n    schema: {\n      response: {\n        '2xx': {\n          type: 'object',\n          properties: {\n            name: {\n              type: 'string'\n            },\n            work: {\n              type: 'string'\n            }\n          }\n        }\n      }\n    },\n    serializerCompiler: ({\n      schema,\n      method,\n      url,\n      httpPart\n    }) => {\n      t.ok(method, 'the custom compiler has been created');\n      return () => {\n        t.fail('the serializer must not be called when there is a reply serializer');\n        return 'fail';\n      };\n    }\n  }, function (req, reply) {\n    reply.code(200).send({\n      name: 'Foo',\n      work: 'Bar',\n      nick: 'Boo'\n    });\n  });\n  fastify.inject('/', (err, res) => {\n    t.error(err);\n    t.same(res.payload, 'instance serializator');\n    t.equal(res.statusCode, 200);\n  });\n});","file":"schema-serialization.test.js","skipped":false,"dir":"test"},{"name":"Reply serializer win over serializer ","suites":[],"updatePoint":{"line":548,"column":43,"index":11194},"line":548,"code":"test('Reply serializer win over serializer ', t => {\n  t.plan(6);\n  const fastify = Fastify();\n  fastify.setReplySerializer(function (payload, statusCode) {\n    t.same(payload, {\n      name: 'Foo',\n      work: 'Bar',\n      nick: 'Boo'\n    });\n    return 'instance serializator';\n  });\n  fastify.get('/', {\n    schema: {\n      response: {\n        '2xx': {\n          type: 'object',\n          properties: {\n            name: {\n              type: 'string'\n            },\n            work: {\n              type: 'string'\n            }\n          }\n        }\n      }\n    },\n    serializerCompiler: ({\n      schema,\n      method,\n      url,\n      httpPart\n    }) => {\n      t.ok(method, 'the custom compiler has been created');\n      return () => {\n        t.fail('the serializer must not be called when there is a reply serializer');\n        return 'fail';\n      };\n    }\n  }, function (req, reply) {\n    reply.code(200).send({\n      name: 'Foo',\n      work: 'Bar',\n      nick: 'Boo'\n    });\n  });\n  fastify.inject('/', (err, res) => {\n    t.error(err);\n    t.same(res.payload, 'instance serializator');\n    t.equal(res.statusCode, 200);\n  });\n});","file":"schema-serialization.test.js","skipped":false,"dir":"test"},{"name":"The schema compiler recreate itself if needed","suites":[],"updatePoint":{"line":600,"column":51,"index":12345},"line":600,"code":"test('The schema compiler recreate itself if needed', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  fastify.options('/', {\n    schema: {\n      response: {\n        '2xx': {\n          hello: {\n            type: 'string'\n          }\n        }\n      }\n    }\n  }, echoBody);\n  fastify.register(function (fastify, options, done) {\n    fastify.addSchema({\n      $id: 'identifier',\n      type: 'string',\n      format: 'uuid'\n    });\n    fastify.get('/', {\n      schema: {\n        response: {\n          '2xx': {\n            foobarId: {\n              $ref: 'identifier#'\n            }\n          }\n        }\n      }\n    }, echoBody);\n    done();\n  });\n  fastify.ready(err => {\n    t.error(err);\n  });\n});","file":"schema-serialization.test.js","skipped":false,"dir":"test"},{"name":"The schema changes the default error handler output","suites":[],"updatePoint":{"line":637,"column":57,"index":13050},"line":637,"code":"test('The schema changes the default error handler output', async t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.get('/:code', {\n    schema: {\n      response: {\n        '2xx': {\n          hello: {\n            type: 'string'\n          }\n        },\n        501: {\n          type: 'object',\n          properties: {\n            message: {\n              type: 'string'\n            }\n          }\n        },\n        '5xx': {\n          type: 'object',\n          properties: {\n            customId: {\n              type: 'number'\n            },\n            error: {\n              type: 'string'\n            },\n            message: {\n              type: 'string'\n            }\n          }\n        }\n      }\n    }\n  }, (request, reply) => {\n    if (request.params.code === '501') {\n      return reply.code(501).send(new Error('501 message'));\n    }\n\n    const error = new Error('500 message');\n    error.customId = 42;\n    reply.send(error);\n  });\n  let res = await fastify.inject('/501');\n  t.equal(res.statusCode, 501);\n  t.same(res.json(), {\n    message: '501 message'\n  });\n  res = await fastify.inject('/500');\n  t.equal(res.statusCode, 500);\n  t.same(res.json(), {\n    error: 'Internal Server Error',\n    message: '500 message',\n    customId: 42\n  });\n});","file":"schema-serialization.test.js","skipped":false,"dir":"test"},{"name":"do not crash if status code serializer errors","suites":[],"updatePoint":{"line":694,"column":51,"index":14307},"line":694,"code":"test('do not crash if status code serializer errors', async t => {\n  const fastify = Fastify();\n  const requiresFoo = {\n    type: 'object',\n    properties: {\n      foo: {\n        type: 'string'\n      }\n    },\n    required: ['foo']\n  };\n  const someUserErrorType2 = {\n    type: 'object',\n    properties: {\n      code: {\n        type: 'number'\n      }\n    },\n    required: ['code']\n  };\n  fastify.get('/', {\n    schema: {\n      query: requiresFoo,\n      response: {\n        400: someUserErrorType2\n      }\n    }\n  }, (request, reply) => {\n    t.fail('handler, should not be called');\n  });\n  const res = await fastify.inject({\n    path: '/',\n    query: {\n      notfoo: true\n    }\n  });\n  t.equal(res.statusCode, 500);\n  t.same(res.json(), {\n    statusCode: 500,\n    error: 'Internal Server Error',\n    message: '\"code\" is required!'\n  });\n});","file":"schema-serialization.test.js","skipped":false,"dir":"test"},{"name":"custom schema serializer error, empty message","suites":[],"updatePoint":{"line":737,"column":51,"index":15148},"line":737,"code":"test('custom schema serializer error, empty message', async t => {\n  t.plan(2);\n  const fastify = Fastify();\n  fastify.get('/:code', {\n    schema: {\n      response: {\n        '2xx': {\n          hello: {\n            type: 'string'\n          }\n        },\n        501: {\n          type: 'object',\n          properties: {\n            message: {\n              type: 'string'\n            }\n          }\n        }\n      }\n    }\n  }, (request, reply) => {\n    if (request.params.code === '501') {\n      return reply.code(501).send(new Error(''));\n    }\n  });\n  const res = await fastify.inject('/501');\n  t.equal(res.statusCode, 501);\n  t.same(res.json(), {\n    message: ''\n  });\n});","file":"schema-serialization.test.js","skipped":false,"dir":"test"},{"name":"error in custom schema serialize compiler, throw FST_ERR_SCH_SERIALIZATION_BUILD error","suites":[],"updatePoint":{"line":769,"column":92,"index":15864},"line":769,"code":"test('error in custom schema serialize compiler, throw FST_ERR_SCH_SERIALIZATION_BUILD error', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.get('/', {\n    schema: {\n      response: {\n        '2xx': {\n          type: 'object',\n          properties: {\n            some: {\n              type: 'string'\n            }\n          }\n        },\n        500: {\n          type: 'object',\n          properties: {\n            message: {\n              type: 'string'\n            }\n          }\n        }\n      }\n    },\n    serializerCompiler: () => {\n      throw new Error('CUSTOM_ERROR');\n    }\n  }, function (req, reply) {\n    reply.code(200).send({\n      some: 'thing'\n    });\n  });\n  fastify.ready(err => {\n    t.equal(err.message, 'Failed building the serialization schema for GET: /, due to error CUSTOM_ERROR');\n    t.equal(err.statusCode, 500);\n    t.equal(err.code, 'FST_ERR_SCH_SERIALIZATION_BUILD');\n  });\n});","file":"schema-serialization.test.js","skipped":false,"dir":"test"},{"name":"Errors in searilizer sended to errorHandler","suites":[],"updatePoint":{"line":807,"column":49,"index":16741},"line":807,"code":"test('Errors in searilizer sended to errorHandler', async t => {\n  let savedError;\n  const fastify = Fastify();\n  fastify.get('/', {\n    schema: {\n      response: {\n        200: {\n          type: 'object',\n          properties: {\n            name: {\n              type: 'string'\n            },\n            power: {\n              type: 'string'\n            }\n          },\n          required: ['name']\n        }\n      }\n    }\n  }, function (req, reply) {\n    reply.code(200).send({\n      no: 'thing'\n    });\n  });\n  fastify.setErrorHandler((error, request, reply) => {\n    savedError = error;\n    reply.code(500).send(error);\n  });\n  const res = await fastify.inject('/');\n  t.equal(res.statusCode, 500); // t.same(savedError, new Error('\"name\" is required!'));\n\n  t.same(res.json(), {\n    statusCode: 500,\n    error: 'Internal Server Error',\n    message: '\"name\" is required!'\n  });\n  t.ok(savedError, 'error presents');\n  t.ok(savedError.serialization, 'Serialization sign presents');\n  t.end();\n});","file":"schema-serialization.test.js","skipped":false,"dir":"test"},{"name":"capital X","suites":[],"updatePoint":{"line":848,"column":15,"index":17707},"line":848,"code":"test('capital X', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.get('/', {\n    schema: {\n      response: {\n        '2XX': {\n          type: 'object',\n          properties: {\n            name: {\n              type: 'string'\n            },\n            work: {\n              type: 'string'\n            }\n          }\n        }\n      }\n    }\n  }, function (req, reply) {\n    reply.code(200).send({\n      name: 'Foo',\n      work: 'Bar',\n      nick: 'Boo'\n    });\n  });\n  fastify.inject('/', (err, res) => {\n    t.error(err);\n    t.same(res.json(), {\n      name: 'Foo',\n      work: 'Bar'\n    });\n    t.equal(res.statusCode, 200);\n  });\n});","file":"schema-serialization.test.js","skipped":false,"dir":"test"},{"name":"allow default as status code and used as last fallback","suites":[],"updatePoint":{"line":883,"column":60,"index":18398},"line":883,"code":"test('allow default as status code and used as last fallback', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.route({\n    url: '/',\n    method: 'GET',\n    schema: {\n      response: {\n        default: {\n          type: 'object',\n          properties: {\n            name: {\n              type: 'string'\n            },\n            work: {\n              type: 'string'\n            }\n          }\n        }\n      }\n    },\n    handler: (req, reply) => {\n      reply.code(200).send({\n        name: 'Foo',\n        work: 'Bar',\n        nick: 'Boo'\n      });\n    }\n  });\n  fastify.inject('/', (err, res) => {\n    t.error(err);\n    t.same(res.json(), {\n      name: 'Foo',\n      work: 'Bar'\n    });\n    t.equal(res.statusCode, 200);\n  });\n});","file":"schema-serialization.test.js","skipped":false,"dir":"test"},{"name":"Ajv plugins array parameter","suites":[],"updatePoint":{"line":21,"column":33,"index":339},"line":21,"code":"test('Ajv plugins array parameter', t => {\n  t.plan(3);\n  const fastify = Fastify({\n    ajv: {\n      customOptions: {\n        allErrors: true\n      },\n      plugins: [[ajvErrors, {\n        singleError: '@@@@'\n      }]]\n    }\n  });\n  fastify.post('/', {\n    schema: {\n      body: {\n        type: 'object',\n        properties: {\n          foo: {\n            type: 'number',\n            minimum: 2,\n            maximum: 10,\n            multipleOf: 2,\n            errorMessage: {\n              type: 'should be number',\n              minimum: 'should be >= 2',\n              maximum: 'should be <= 10',\n              multipleOf: 'should be multipleOf 2'\n            }\n          }\n        }\n      }\n    },\n\n    handler(req, reply) {\n      reply.send({\n        ok: 1\n      });\n    }\n\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/',\n    payload: {\n      foo: 99\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 400);\n    t.equal(res.json().message, 'body/foo should be <= 10@@@@should be multipleOf 2');\n  });\n});","file":"schema-special-usage.test.js","skipped":false,"dir":"test"},{"name":"Should handle root $merge keywords in header","suites":[],"updatePoint":{"line":73,"column":50,"index":1398},"line":73,"code":"test('Should handle root $merge keywords in header', t => {\n  t.plan(5);\n  const fastify = Fastify({\n    ajv: {\n      plugins: [ajvMergePatch]\n    }\n  });\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    schema: {\n      headers: {\n        $merge: {\n          source: {\n            type: 'object',\n            properties: {\n              q: {\n                type: 'string'\n              }\n            }\n          },\n          with: {\n            required: ['q']\n          }\n        }\n      }\n    },\n\n    handler(req, reply) {\n      reply.send({\n        ok: 1\n      });\n    }\n\n  });\n  fastify.ready(err => {\n    t.error(err);\n    fastify.inject({\n      method: 'GET',\n      url: '/'\n    }, (err, res) => {\n      t.error(err);\n      t.equal(res.statusCode, 400);\n    });\n    fastify.inject({\n      method: 'GET',\n      url: '/',\n      headers: {\n        q: 'foo'\n      }\n    }, (err, res) => {\n      t.error(err);\n      t.equal(res.statusCode, 200);\n    });\n  });\n});","file":"schema-special-usage.test.js","skipped":false,"dir":"test"},{"name":"Should handle root $patch keywords in header","suites":[],"updatePoint":{"line":129,"column":50,"index":2370},"line":129,"code":"test('Should handle root $patch keywords in header', t => {\n  t.plan(5);\n  const fastify = Fastify({\n    ajv: {\n      plugins: [ajvMergePatch]\n    }\n  });\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    schema: {\n      headers: {\n        $patch: {\n          source: {\n            type: 'object',\n            properties: {\n              q: {\n                type: 'string'\n              }\n            }\n          },\n          with: [{\n            op: 'add',\n            path: '/properties/q',\n            value: {\n              type: 'number'\n            }\n          }]\n        }\n      }\n    },\n\n    handler(req, reply) {\n      reply.send({\n        ok: 1\n      });\n    }\n\n  });\n  fastify.ready(err => {\n    t.error(err);\n    fastify.inject({\n      method: 'GET',\n      url: '/',\n      headers: {\n        q: 'foo'\n      }\n    }, (err, res) => {\n      t.error(err);\n      t.equal(res.statusCode, 400);\n    });\n    fastify.inject({\n      method: 'GET',\n      url: '/',\n      headers: {\n        q: 10\n      }\n    }, (err, res) => {\n      t.error(err);\n      t.equal(res.statusCode, 200);\n    });\n  });\n});","file":"schema-special-usage.test.js","skipped":false,"dir":"test"},{"name":"Should handle $merge keywords in body","suites":[],"updatePoint":{"line":192,"column":43,"index":3471},"line":192,"code":"test('Should handle $merge keywords in body', t => {\n  t.plan(5);\n  const fastify = Fastify({\n    ajv: {\n      plugins: [ajvMergePatch]\n    }\n  });\n  fastify.post('/', {\n    schema: {\n      body: {\n        $merge: {\n          source: {\n            type: 'object',\n            properties: {\n              q: {\n                type: 'string'\n              }\n            }\n          },\n          with: {\n            required: ['q']\n          }\n        }\n      }\n    },\n\n    handler(req, reply) {\n      reply.send({\n        ok: 1\n      });\n    }\n\n  });\n  fastify.ready(err => {\n    t.error(err);\n    fastify.inject({\n      method: 'POST',\n      url: '/'\n    }, (err, res) => {\n      t.error(err);\n      t.equal(res.statusCode, 400);\n    });\n    fastify.inject({\n      method: 'POST',\n      url: '/',\n      payload: {\n        q: 'foo'\n      }\n    }, (err, res) => {\n      t.error(err);\n      t.equal(res.statusCode, 200);\n    });\n  });\n});","file":"schema-special-usage.test.js","skipped":false,"dir":"test"},{"name":"Should handle $patch keywords in body","suites":[],"updatePoint":{"line":246,"column":43,"index":4406},"line":246,"code":"test('Should handle $patch keywords in body', t => {\n  t.plan(5);\n  const fastify = Fastify({\n    ajv: {\n      plugins: [ajvMergePatch]\n    }\n  });\n  fastify.post('/', {\n    schema: {\n      body: {\n        $patch: {\n          source: {\n            type: 'object',\n            properties: {\n              q: {\n                type: 'string'\n              }\n            }\n          },\n          with: [{\n            op: 'add',\n            path: '/properties/q',\n            value: {\n              type: 'number'\n            }\n          }]\n        }\n      }\n    },\n\n    handler(req, reply) {\n      reply.send({\n        ok: 1\n      });\n    }\n\n  });\n  fastify.ready(err => {\n    t.error(err);\n    fastify.inject({\n      method: 'POST',\n      url: '/',\n      payload: {\n        q: 'foo'\n      }\n    }, (err, res) => {\n      t.error(err);\n      t.equal(res.statusCode, 400);\n    });\n    fastify.inject({\n      method: 'POST',\n      url: '/',\n      payload: {\n        q: 10\n      }\n    }, (err, res) => {\n      t.error(err);\n      t.equal(res.statusCode, 200);\n    });\n  });\n});","file":"schema-special-usage.test.js","skipped":false,"dir":"test"},{"name":"serializer read validator's schemas","suites":[],"updatePoint":{"line":307,"column":41,"index":5475},"line":307,"code":"test(\"serializer read validator's schemas\", t => {\n  t.plan(4);\n  const ajvInstance = new AJV();\n  const baseSchema = {\n    $id: 'http://example.com/schemas/base',\n    definitions: {\n      hello: {\n        type: 'string'\n      }\n    },\n    type: 'object',\n    properties: {\n      hello: {\n        $ref: '#/definitions/hello'\n      }\n    }\n  };\n  const refSchema = {\n    $id: 'http://example.com/schemas/ref',\n    type: 'object',\n    properties: {\n      hello: {\n        $ref: 'http://example.com/schemas/base#/definitions/hello'\n      }\n    }\n  };\n  ajvInstance.addSchema(baseSchema);\n  ajvInstance.addSchema(refSchema);\n  const fastify = Fastify({\n    schemaController: {\n      bucket: function factory(storeInit) {\n        t.notOk(storeInit, 'is always empty because fastify.addSchema is not called');\n        return {\n          getSchemas() {\n            return {\n              [baseSchema.$id]: ajvInstance.getSchema(baseSchema.$id).schema,\n              [refSchema.$id]: ajvInstance.getSchema(refSchema.$id).schema\n            };\n          }\n\n        };\n      }\n    }\n  });\n  fastify.setValidatorCompiler(function ({\n    schema\n  }) {\n    return ajvInstance.compile(schema);\n  });\n  fastify.get('/', {\n    schema: {\n      response: {\n        '2xx': ajvInstance.getSchema('http://example.com/schemas/ref').schema\n      }\n    },\n\n    handler(req, res) {\n      res.send({\n        hello: 'world',\n        evict: 'this'\n      });\n    }\n\n  });\n  fastify.inject('/', (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.same(res.json(), {\n      hello: 'world'\n    });\n  });\n});","file":"schema-special-usage.test.js","skipped":false,"dir":"test"},{"name":"setSchemaController in a plugin","suites":[],"updatePoint":{"line":379,"column":37,"index":7068},"line":379,"code":"test('setSchemaController in a plugin', t => {\n  t.plan(5);\n  const baseSchema = {\n    $id: 'urn:schema:base',\n    definitions: {\n      hello: {\n        type: 'string'\n      }\n    },\n    type: 'object',\n    properties: {\n      hello: {\n        $ref: '#/definitions/hello'\n      }\n    }\n  };\n  const refSchema = {\n    $id: 'urn:schema:ref',\n    type: 'object',\n    properties: {\n      hello: {\n        $ref: 'urn:schema:base#/definitions/hello'\n      }\n    }\n  };\n  const ajvInstance = new AJV();\n  ajvInstance.addSchema(baseSchema);\n  ajvInstance.addSchema(refSchema);\n  const fastify = Fastify({\n    exposeHeadRoutes: false\n  });\n  fastify.register(schemaPlugin);\n  fastify.get('/', {\n    schema: {\n      query: ajvInstance.getSchema('urn:schema:ref').schema,\n      response: {\n        '2xx': ajvInstance.getSchema('urn:schema:ref').schema\n      }\n    },\n\n    handler(req, res) {\n      res.send({\n        hello: 'world',\n        evict: 'this'\n      });\n    }\n\n  });\n  fastify.inject('/', (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.same(res.json(), {\n      hello: 'world'\n    });\n  });\n\n  async function schemaPlugin(server) {\n    server.setSchemaController({\n      bucket() {\n        t.pass('the bucket is created');\n        return {\n          addSchema(source) {\n            ajvInstance.addSchema(source);\n          },\n\n          getSchema(id) {\n            return ajvInstance.getSchema(id).schema;\n          },\n\n          getSchemas() {\n            return {\n              'urn:schema:base': baseSchema,\n              'urn:schema:ref': refSchema\n            };\n          }\n\n        };\n      }\n\n    });\n    server.setValidatorCompiler(function ({\n      schema\n    }) {\n      t.pass('the querystring schema is compiled');\n      return ajvInstance.compile(schema);\n    });\n  }\n\n  schemaPlugin[Symbol.for('skip-override')] = true;\n});","file":"schema-special-usage.test.js","skipped":false,"dir":"test"},{"name":"side effect on schema let the server crash","suites":[],"updatePoint":{"line":469,"column":48,"index":8943},"line":469,"code":"test('side effect on schema let the server crash', async t => {\n  const firstSchema = {\n    $id: 'example1',\n    type: 'object',\n    properties: {\n      name: {\n        type: 'string'\n      }\n    }\n  };\n  const reusedSchema = {\n    $id: 'example2',\n    type: 'object',\n    properties: {\n      name: {\n        oneOf: [{\n          $ref: 'example1'\n        }]\n      }\n    }\n  };\n  const fastify = Fastify();\n  fastify.addSchema(firstSchema);\n  fastify.post('/a', {\n    handler: async () => 'OK',\n    schema: {\n      body: reusedSchema,\n      response: {\n        200: reusedSchema\n      }\n    }\n  });\n  fastify.post('/b', {\n    handler: async () => 'OK',\n    schema: {\n      body: reusedSchema,\n      response: {\n        200: reusedSchema\n      }\n    }\n  });\n  await fastify.ready();\n});","file":"schema-special-usage.test.js","skipped":false,"dir":"test"},{"name":"only response schema trigger AJV pollution","suites":[],"updatePoint":{"line":512,"column":48,"index":9727},"line":512,"code":"test('only response schema trigger AJV pollution', async t => {\n  const ShowSchema = S.object().id('ShowSchema').prop('name', S.string());\n  const ListSchema = S.array().id('ListSchema').items(S.ref('ShowSchema#'));\n  const fastify = Fastify();\n  fastify.addSchema(ListSchema);\n  fastify.addSchema(ShowSchema);\n  const routeResponseSchemas = {\n    schema: {\n      response: {\n        200: S.ref('ListSchema#')\n      }\n    }\n  };\n  fastify.register(async app => {\n    app.get('/resource/', routeResponseSchemas, () => ({}));\n  }, {\n    prefix: '/prefix1'\n  });\n  fastify.register(async app => {\n    app.get('/resource/', routeResponseSchemas, () => ({}));\n  }, {\n    prefix: '/prefix2'\n  });\n  await fastify.ready();\n});","file":"schema-special-usage.test.js","skipped":false,"dir":"test"},{"name":"only response schema trigger AJV pollution #2","suites":[],"updatePoint":{"line":537,"column":51,"index":10450},"line":537,"code":"test('only response schema trigger AJV pollution #2', async t => {\n  const ShowSchema = S.object().id('ShowSchema').prop('name', S.string());\n  const ListSchema = S.array().id('ListSchema').items(S.ref('ShowSchema#'));\n  const fastify = Fastify();\n  fastify.addSchema(ListSchema);\n  fastify.addSchema(ShowSchema);\n  const routeResponseSchemas = {\n    schema: {\n      params: S.ref('ListSchema#'),\n      response: {\n        200: S.ref('ListSchema#')\n      }\n    }\n  };\n  fastify.register(async app => {\n    app.get('/resource/', routeResponseSchemas, () => ({}));\n  }, {\n    prefix: '/prefix1'\n  });\n  fastify.register(async app => {\n    app.get('/resource/', routeResponseSchemas, () => ({}));\n  }, {\n    prefix: '/prefix2'\n  });\n  await fastify.ready();\n});","file":"schema-special-usage.test.js","skipped":false,"dir":"test"},{"name":"setSchemaController in a plugin with head routes","suites":[],"updatePoint":{"line":563,"column":54,"index":11212},"line":563,"code":"test('setSchemaController in a plugin with head routes', t => {\n  t.plan(6);\n  const baseSchema = {\n    $id: 'urn:schema:base',\n    definitions: {\n      hello: {\n        type: 'string'\n      }\n    },\n    type: 'object',\n    properties: {\n      hello: {\n        $ref: '#/definitions/hello'\n      }\n    }\n  };\n  const refSchema = {\n    $id: 'urn:schema:ref',\n    type: 'object',\n    properties: {\n      hello: {\n        $ref: 'urn:schema:base#/definitions/hello'\n      }\n    }\n  };\n  const ajvInstance = new AJV();\n  ajvInstance.addSchema(baseSchema);\n  ajvInstance.addSchema(refSchema);\n  const fastify = Fastify({\n    exposeHeadRoutes: true\n  });\n  fastify.register(schemaPlugin);\n  fastify.get('/', {\n    schema: {\n      query: ajvInstance.getSchema('urn:schema:ref').schema,\n      response: {\n        '2xx': ajvInstance.getSchema('urn:schema:ref').schema\n      }\n    },\n\n    handler(req, res) {\n      res.send({\n        hello: 'world',\n        evict: 'this'\n      });\n    }\n\n  });\n  fastify.inject('/', (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.same(res.json(), {\n      hello: 'world'\n    });\n  });\n\n  async function schemaPlugin(server) {\n    server.setSchemaController({\n      bucket() {\n        t.pass('the bucket is created');\n        return {\n          addSchema(source) {\n            ajvInstance.addSchema(source);\n          },\n\n          getSchema(id) {\n            return ajvInstance.getSchema(id).schema;\n          },\n\n          getSchemas() {\n            return {\n              'urn:schema:base': baseSchema,\n              'urn:schema:ref': refSchema\n            };\n          }\n\n        };\n      }\n\n    });\n    server.setValidatorCompiler(function ({\n      schema\n    }) {\n      if (schema.$id) {\n        const stored = ajvInstance.getSchema(schema.$id);\n\n        if (stored) {\n          t.pass('the schema is reused');\n          return stored;\n        }\n      }\n\n      t.pass('the schema is compiled');\n      return ajvInstance.compile(schema);\n    });\n  }\n\n  schemaPlugin[Symbol.for('skip-override')] = true;\n});","file":"schema-special-usage.test.js","skipped":false,"dir":"test"},{"name":"multiple refs with the same ids","suites":[],"updatePoint":{"line":662,"column":37,"index":13254},"line":662,"code":"test('multiple refs with the same ids', t => {\n  t.plan(3);\n  const baseSchema = {\n    $id: 'urn:schema:base',\n    definitions: {\n      hello: {\n        type: 'string'\n      }\n    },\n    type: 'object',\n    properties: {\n      hello: {\n        $ref: '#/definitions/hello'\n      }\n    }\n  };\n  const refSchema = {\n    $id: 'urn:schema:ref',\n    type: 'object',\n    properties: {\n      hello: {\n        $ref: 'urn:schema:base#/definitions/hello'\n      }\n    }\n  };\n  const fastify = Fastify();\n  fastify.addSchema(baseSchema);\n  fastify.addSchema(refSchema);\n  fastify.head('/', {\n    schema: {\n      query: refSchema,\n      response: {\n        '2xx': refSchema\n      }\n    },\n\n    handler(req, res) {\n      res.send({\n        hello: 'world',\n        evict: 'this'\n      });\n    }\n\n  });\n  fastify.get('/', {\n    schema: {\n      query: refSchema,\n      response: {\n        '2xx': refSchema\n      }\n    },\n\n    handler(req, res) {\n      res.send({\n        hello: 'world',\n        evict: 'this'\n      });\n    }\n\n  });\n  fastify.inject('/', (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.same(res.json(), {\n      hello: 'world'\n    });\n  });\n});","file":"schema-special-usage.test.js","skipped":false,"dir":"test"},{"name":"JOI validation overwrite request headers","suites":[],"updatePoint":{"line":730,"column":46,"index":14431},"line":730,"code":"test('JOI validation overwrite request headers', t => {\n  t.plan(3);\n\n  const schemaValidator = ({\n    schema\n  }) => data => {\n    const validationResult = schema.validate(data);\n    return validationResult;\n  };\n\n  const fastify = Fastify();\n  fastify.setValidatorCompiler(schemaValidator);\n  fastify.get('/', {\n    schema: {\n      headers: Joi.object({\n        'user-agent': Joi.string().required(),\n        host: Joi.string().required()\n      })\n    }\n  }, (request, reply) => {\n    reply.send(request.headers);\n  });\n  fastify.inject('/', (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.same(res.json(), {\n      'user-agent': 'lightMyRequest',\n      host: 'localhost:80'\n    });\n  });\n});","file":"schema-special-usage.test.js","skipped":false,"dir":"test"},{"name":"Custom schema object should not trigger FST_ERR_SCH_DUPLICATE","suites":[],"updatePoint":{"line":761,"column":67,"index":15172},"line":761,"code":"test('Custom schema object should not trigger FST_ERR_SCH_DUPLICATE', async t => {\n  const fastify = Fastify();\n\n  const handler = () => {};\n\n  fastify.get('/the/url', {\n    schema: {\n      query: yup.object({\n        foo: yup.string()\n      })\n    },\n    validatorCompiler: ({\n      schema,\n      method,\n      url,\n      httpPart\n    }) => {\n      return function (data) {\n        // with option strict = false, yup `validateSync` function returns the coerced value if validation was successful, or throws if validation failed\n        try {\n          const result = schema.validateSync(data, {});\n          return {\n            value: result\n          };\n        } catch (e) {\n          return {\n            error: e\n          };\n        }\n      };\n    },\n    handler\n  });\n  await fastify.ready();\n  t.pass('fastify is ready');\n});","file":"schema-special-usage.test.js","skipped":false,"dir":"test"},{"name":"Basic validation test","suites":[],"updatePoint":{"line":85,"column":27,"index":1393},"line":85,"code":"test('Basic validation test', t => {\n  t.plan(6);\n  const fastify = Fastify();\n  fastify.post('/', {\n    schema: {\n      body: schemaArtist\n    }\n  }, function (req, reply) {\n    reply.code(200).send(req.body.name);\n  });\n  fastify.inject({\n    method: 'POST',\n    payload: {\n      name: 'michelangelo',\n      work: 'sculptor, painter, architect and poet'\n    },\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.same(res.payload, 'michelangelo');\n    t.equal(res.statusCode, 200);\n  });\n  fastify.inject({\n    method: 'POST',\n    payload: {\n      name: 'michelangelo'\n    },\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.same(res.json(), {\n      statusCode: 400,\n      error: 'Bad Request',\n      message: \"body must have required property 'work'\"\n    });\n    t.equal(res.statusCode, 400);\n  });\n});","file":"schema-validation.test.js","skipped":false,"dir":"test"},{"name":"External AJV instance","suites":[],"updatePoint":{"line":123,"column":27,"index":2214},"line":123,"code":"test('External AJV instance', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  const ajv = new AJV();\n  ajv.addSchema(schemaA);\n  ajv.addSchema(schemaBRefToA); // the user must provide the schemas to fastify also\n\n  fastify.addSchema(schemaA);\n  fastify.addSchema(schemaBRefToA);\n  fastify.setValidatorCompiler(({\n    schema,\n    method,\n    url,\n    httpPart\n  }) => {\n    return ajv.compile(schema);\n  });\n  fastify.post('/', {\n    handler(req, reply) {\n      reply.send({\n        foo: 1\n      });\n    },\n\n    schema: {\n      body: schemaCRefToB,\n      response: {\n        '2xx': ajv.getSchema('urn:schema:response').schema\n      }\n    }\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/',\n    payload: {\n      foo: 42\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/',\n    payload: {\n      foo: 'not a number'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 400);\n  });\n});","file":"schema-validation.test.js","skipped":false,"dir":"test"},{"name":"Encapsulation","suites":[],"updatePoint":{"line":175,"column":19,"index":3204},"line":175,"code":"test('Encapsulation', t => {\n  t.plan(19);\n  const fastify = Fastify();\n  const ajv = new AJV();\n  ajv.addSchema(schemaA);\n  ajv.addSchema(schemaBRefToA); // the user must provide the schemas to fastify also\n\n  fastify.addSchema(schemaA);\n  fastify.addSchema(schemaBRefToA);\n  fastify.register((instance, opts, done) => {\n    const validator = ({\n      schema,\n      method,\n      url,\n      httpPart\n    }) => {\n      return ajv.compile(schema);\n    };\n\n    instance.setValidatorCompiler(validator);\n    instance.post('/one', {\n      handler(req, reply) {\n        reply.send({\n          foo: 'one'\n        });\n      },\n\n      schema: {\n        body: ajv.getSchema('urn:schema:response').schema\n      }\n    });\n    instance.register((instance, opts, done) => {\n      instance.post('/two', {\n        handler(req, reply) {\n          t.same(instance.validatorCompiler, validator);\n          reply.send({\n            foo: 'two'\n          });\n        },\n\n        schema: {\n          body: ajv.getSchema('urn:schema:response').schema\n        }\n      });\n\n      const anotherValidator = ({\n        schema,\n        method,\n        url,\n        httpPart\n      }) => {\n        return () => {\n          return true;\n        }; // always valid\n      };\n\n      instance.post('/three', {\n        validatorCompiler: anotherValidator,\n\n        handler(req, reply) {\n          t.same(instance.validatorCompiler, validator, 'the route validator does not change the instance one');\n          reply.send({\n            foo: 'three'\n          });\n        },\n\n        schema: {\n          body: ajv.getSchema('urn:schema:response').schema\n        }\n      });\n      done();\n    });\n    done();\n  });\n  fastify.register((instance, opts, done) => {\n    instance.post('/clean', function (req, reply) {\n      t.equal(instance.validatorCompiler, undefined);\n      reply.send({\n        foo: 'bar'\n      });\n    });\n    done();\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/one',\n    payload: {\n      foo: 1\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.same(res.json(), {\n      foo: 'one'\n    });\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/one',\n    payload: {\n      wrongFoo: 'bar'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 400);\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/two',\n    payload: {\n      foo: 2\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.same(res.json(), {\n      foo: 'two'\n    });\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/two',\n    payload: {\n      wrongFoo: 'bar'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 400);\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/three',\n    payload: {\n      wrongFoo: 'but works'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.same(res.json(), {\n      foo: 'three'\n    });\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/clean',\n    payload: {\n      wrongFoo: 'bar'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.same(res.json(), {\n      foo: 'bar'\n    });\n  });\n});","file":"schema-validation.test.js","skipped":false,"dir":"test"},{"name":"Triple $ref with a simple $id","suites":[],"updatePoint":{"line":331,"column":35,"index":6388},"line":331,"code":"test('Triple $ref with a simple $id', t => {\n  t.plan(6);\n  const fastify = Fastify();\n  const ajv = new AJV();\n  ajv.addSchema(schemaA);\n  ajv.addSchema(schemaBRefToA);\n  ajv.addSchema(schemaCRefToB); // the user must provide the schemas to fastify also\n\n  fastify.addSchema(schemaA);\n  fastify.addSchema(schemaBRefToA);\n  fastify.addSchema(schemaCRefToB);\n  fastify.setValidatorCompiler(({\n    schema,\n    method,\n    url,\n    httpPart\n  }) => {\n    return ajv.compile(schema);\n  });\n  fastify.post('/', {\n    handler(req, reply) {\n      reply.send({\n        foo: 105,\n        bar: 'foo'\n      });\n    },\n\n    schema: {\n      body: ajv.getSchema('urn:schema:request').schema,\n      response: {\n        '2xx': ajv.getSchema('urn:schema:response').schema\n      }\n    }\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/',\n    payload: {\n      foo: 43\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.same(res.json(), {\n      foo: 105\n    });\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/',\n    payload: {\n      fool: 'bar'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 400);\n    t.same(res.json().message, \"body must have required property 'foo'\");\n  });\n});","file":"schema-validation.test.js","skipped":false,"dir":"test"},{"name":"Extending schema","suites":[],"updatePoint":{"line":390,"column":22,"index":7614},"line":390,"code":"test('Extending schema', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.addSchema({\n    $id: 'address.id',\n    type: 'object',\n    definitions: {\n      address: {\n        type: 'object',\n        properties: {\n          city: {\n            type: 'string'\n          },\n          state: {\n            type: 'string'\n          }\n        },\n        required: ['city', 'state']\n      }\n    }\n  });\n  fastify.post('/', {\n    handler(req, reply) {\n      reply.send('works');\n    },\n\n    schema: {\n      body: {\n        type: 'object',\n        properties: {\n          billingAddress: {\n            $ref: 'address.id#/definitions/address'\n          },\n          shippingAddress: {\n            allOf: [{\n              $ref: 'address.id#/definitions/address'\n            }, {\n              type: 'object',\n              properties: {\n                type: {\n                  enum: ['residential', 'business']\n                }\n              },\n              required: ['type']\n            }]\n          }\n        }\n      }\n    }\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/',\n    payload: {\n      shippingAddress: {\n        city: 'Forlì',\n        state: 'FC'\n      }\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 400);\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/',\n    payload: {\n      shippingAddress: {\n        city: 'Forlì',\n        state: 'FC',\n        type: 'business'\n      }\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n  });\n});","file":"schema-validation.test.js","skipped":false,"dir":"test"},{"name":"Should work with nested ids","suites":[],"updatePoint":{"line":468,"column":33,"index":9148},"line":468,"code":"test('Should work with nested ids', t => {\n  t.plan(6);\n  const fastify = Fastify();\n  fastify.addSchema({\n    $id: 'test',\n    type: 'object',\n    properties: {\n      id: {\n        type: 'number'\n      }\n    }\n  });\n  fastify.addSchema({\n    $id: 'greetings',\n    type: 'string'\n  });\n  fastify.post('/:id', {\n    handler(req, reply) {\n      reply.send(typeof req.params.id);\n    },\n\n    schema: {\n      params: {\n        $ref: 'test#'\n      },\n      body: {\n        type: 'object',\n        properties: {\n          hello: {\n            $ref: 'greetings#'\n          }\n        }\n      }\n    }\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/123',\n    payload: {\n      hello: 'world'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.equal(res.payload, 'number');\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/abc',\n    payload: {\n      hello: 'world'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 400);\n    t.equal(res.json().message, 'params/id must be number');\n  });\n});","file":"schema-validation.test.js","skipped":false,"dir":"test"},{"name":"Use the same schema across multiple routes","suites":[],"updatePoint":{"line":526,"column":48,"index":10216},"line":526,"code":"test('Use the same schema across multiple routes', t => {\n  t.plan(8);\n  const fastify = Fastify();\n  fastify.addSchema({\n    $id: 'test',\n    type: 'object',\n    properties: {\n      id: {\n        type: 'number'\n      }\n    }\n  });\n  fastify.get('/first/:id', {\n    handler(req, reply) {\n      reply.send(typeof req.params.id);\n    },\n\n    schema: {\n      params: {\n        $ref: 'test#'\n      }\n    }\n  });\n  fastify.get('/second/:id', {\n    handler(req, reply) {\n      reply.send(typeof req.params.id);\n    },\n\n    schema: {\n      params: {\n        $ref: 'test#'\n      }\n    }\n  });\n  ['/first/123', '/second/123'].forEach(url => {\n    fastify.inject({\n      url,\n      method: 'GET'\n    }, (err, res) => {\n      t.error(err);\n      t.equal(res.payload, 'number');\n    });\n  });\n  ['/first/abc', '/second/abc'].forEach(url => {\n    fastify.inject({\n      url,\n      method: 'GET'\n    }, (err, res) => {\n      t.error(err);\n      t.equal(res.statusCode, 400);\n    });\n  });\n});","file":"schema-validation.test.js","skipped":false,"dir":"test"},{"name":"JSON Schema validation keywords","suites":[],"updatePoint":{"line":579,"column":37,"index":11184},"line":579,"code":"test('JSON Schema validation keywords', t => {\n  t.plan(6);\n  const fastify = Fastify();\n  fastify.addSchema({\n    $id: 'test',\n    type: 'object',\n    properties: {\n      ip: {\n        type: 'string',\n        format: 'ipv4'\n      }\n    }\n  });\n  fastify.get('/:ip', {\n    handler(req, reply) {\n      reply.send(typeof req.params.ip);\n    },\n\n    schema: {\n      params: {\n        $ref: 'test#'\n      }\n    }\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/127.0.0.1'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.equal(res.payload, 'string');\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/localhost'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 400);\n    t.same(res.json(), {\n      statusCode: 400,\n      error: 'Bad Request',\n      message: 'params/ip must match format \"ipv4\"'\n    });\n  });\n});","file":"schema-validation.test.js","skipped":false,"dir":"test"},{"name":"Nested id calls","suites":[],"updatePoint":{"line":624,"column":21,"index":12037},"line":624,"code":"test('Nested id calls', t => {\n  t.plan(6);\n  const fastify = Fastify();\n  fastify.addSchema({\n    $id: 'test',\n    type: 'object',\n    properties: {\n      ip: {\n        type: 'string',\n        format: 'ipv4'\n      }\n    }\n  });\n  fastify.addSchema({\n    $id: 'hello',\n    type: 'object',\n    properties: {\n      host: {\n        $ref: 'test#'\n      }\n    }\n  });\n  fastify.post('/', {\n    handler(req, reply) {\n      reply.send(typeof req.body.host.ip);\n    },\n\n    schema: {\n      body: {\n        $ref: 'hello#'\n      }\n    }\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/',\n    payload: {\n      host: {\n        ip: '127.0.0.1'\n      }\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.equal(res.payload, 'string');\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/',\n    payload: {\n      host: {\n        ip: 'localhost'\n      }\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 400);\n    t.same(res.json(), {\n      error: 'Bad Request',\n      message: 'body/host/ip must match format \"ipv4\"',\n      statusCode: 400\n    });\n  });\n});","file":"schema-validation.test.js","skipped":false,"dir":"test"},{"name":"Use the same schema id in different places","suites":[],"updatePoint":{"line":688,"column":48,"index":13174},"line":688,"code":"test('Use the same schema id in different places', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  fastify.addSchema({\n    $id: 'test',\n    type: 'object',\n    properties: {\n      id: {\n        type: 'number'\n      }\n    }\n  });\n  fastify.post('/', {\n    handler(req, reply) {\n      reply.send({\n        id: req.body.id / 2\n      });\n    },\n\n    schema: {\n      body: {\n        $ref: 'test#'\n      },\n      response: {\n        200: {\n          $ref: 'test#'\n        }\n      }\n    }\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/',\n    payload: {\n      id: 42\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.same(res.json(), {\n      id: 21\n    });\n  });\n});","file":"schema-validation.test.js","skipped":false,"dir":"test"},{"name":"Use shared schema and $ref with $id ($ref to $id)","suites":[],"updatePoint":{"line":731,"column":55,"index":13854},"line":731,"code":"test('Use shared schema and $ref with $id ($ref to $id)', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.addSchema({\n    $id: 'http://foo/test',\n    type: 'object',\n    properties: {\n      id: {\n        type: 'number'\n      }\n    }\n  });\n  const body = {\n    $id: 'http://foo/user',\n    $schema: 'http://json-schema.org/draft-07/schema#',\n    type: 'object',\n    definitions: {\n      address: {\n        $id: '#address',\n        type: 'object',\n        properties: {\n          city: {\n            type: 'string'\n          }\n        }\n      }\n    },\n    required: ['address'],\n    properties: {\n      test: {\n        $ref: 'http://foo/test#'\n      },\n      // to external\n      address: {\n        $ref: '#address'\n      } // to local\n\n    }\n  };\n  fastify.post('/', {\n    handler(req, reply) {\n      reply.send(req.body.test);\n    },\n\n    schema: {\n      body,\n      response: {\n        200: {\n          $ref: 'http://foo/test#'\n        }\n      }\n    }\n  });\n  const id = Date.now();\n  fastify.inject({\n    method: 'POST',\n    url: '/',\n    payload: {\n      address: {\n        city: 'New Node'\n      },\n      test: {\n        id\n      }\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.same(res.json(), {\n      id\n    });\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/',\n    payload: {\n      test: {\n        id\n      }\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 400);\n    t.same(res.json(), {\n      error: 'Bad Request',\n      message: \"body must have required property 'address'\",\n      statusCode: 400\n    });\n  });\n});","file":"schema-validation.test.js","skipped":false,"dir":"test"},{"name":"Use items with $ref","suites":[],"updatePoint":{"line":820,"column":25,"index":15397},"line":820,"code":"test('Use items with $ref', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.addSchema({\n    $id: 'http://example.com/ref-to-external-validator.json',\n    type: 'object',\n    properties: {\n      hello: {\n        type: 'string'\n      }\n    }\n  });\n  const body = {\n    type: 'array',\n    items: {\n      $ref: 'http://example.com/ref-to-external-validator.json#'\n    }\n  };\n  fastify.post('/', {\n    schema: {\n      body\n    },\n    handler: (_, r) => {\n      r.send('ok');\n    }\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/',\n    payload: [{\n      hello: 'world'\n    }]\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.payload, 'ok');\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/',\n    payload: {\n      hello: 'world'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 400);\n  });\n});","file":"schema-validation.test.js","skipped":false,"dir":"test"},{"name":"Use $ref to /definitions","suites":[],"updatePoint":{"line":867,"column":30,"index":16247},"line":867,"code":"test('Use $ref to /definitions', t => {\n  t.plan(6);\n  const fastify = Fastify();\n  fastify.addSchema({\n    $id: 'test',\n    type: 'object',\n    properties: {\n      id: {\n        type: 'number'\n      }\n    }\n  });\n  const body = {\n    type: 'object',\n    definitions: {\n      address: {\n        $id: '#otherId',\n        type: 'object',\n        properties: {\n          city: {\n            type: 'string'\n          }\n        }\n      }\n    },\n    properties: {\n      test: {\n        $ref: 'test#'\n      },\n      address: {\n        $ref: '#/definitions/address'\n      }\n    },\n    required: ['address', 'test']\n  };\n  fastify.post('/', {\n    schema: {\n      body,\n      response: {\n        200: body\n      }\n    },\n    handler: (req, reply) => {\n      req.body.removeThis = 'it should not be serialized';\n      reply.send(req.body);\n    }\n  });\n  const payload = {\n    address: {\n      city: 'New Node'\n    },\n    test: {\n      id: Date.now()\n    }\n  };\n  fastify.inject({\n    method: 'POST',\n    url: '/',\n    payload\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.same(res.json(), payload);\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/',\n    payload: {\n      address: {\n        city: 'New Node'\n      },\n      test: {\n        id: 'wrong'\n      }\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 400);\n    t.same(res.json(), {\n      error: 'Bad Request',\n      message: 'body/test/id must be number',\n      statusCode: 400\n    });\n  });\n});","file":"schema-validation.test.js","skipped":false,"dir":"test"},{"name":"Custom AJV settings - pt1","suites":[],"updatePoint":{"line":952,"column":31,"index":17754},"line":952,"code":"test('Custom AJV settings - pt1', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.post('/', {\n    schema: {\n      body: {\n        num: {\n          type: 'integer'\n        }\n      }\n    },\n    handler: (req, reply) => {\n      t.equal(req.body.num, 12);\n      reply.send(req.body);\n    }\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/',\n    payload: {\n      num: '12'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.same(res.json(), {\n      num: 12\n    });\n  });\n});","file":"schema-validation.test.js","skipped":false,"dir":"test"},{"name":"Custom AJV settings - pt2","suites":[],"updatePoint":{"line":982,"column":31,"index":18277},"line":982,"code":"test('Custom AJV settings - pt2', t => {\n  t.plan(2);\n  const fastify = Fastify({\n    ajv: {\n      customOptions: {\n        coerceTypes: false\n      }\n    }\n  });\n  fastify.post('/', {\n    schema: {\n      body: {\n        num: {\n          type: 'integer'\n        }\n      }\n    },\n    handler: (req, reply) => {\n      t.fail('the handler is not called because the \"12\" is not coerced to number');\n    }\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/',\n    payload: {\n      num: '12'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 400);\n  });\n});","file":"schema-validation.test.js","skipped":false,"dir":"test"},{"name":"Custom AJV settings on different parameters - pt1","suites":[],"updatePoint":{"line":1014,"column":55,"index":18881},"line":1014,"code":"test('Custom AJV settings on different parameters - pt1', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  fastify.setValidatorCompiler(customValidatorCompiler);\n  fastify.post('/api/:id', {\n    schema: {\n      querystring: {\n        id: {\n          type: 'integer'\n        }\n      },\n      body: {\n        type: 'object',\n        properties: {\n          num: {\n            type: 'number'\n          }\n        },\n        required: ['num']\n      }\n    },\n    handler: (req, reply) => {\n      t.fail('the handler is not called because the \"12\" is not coerced to number');\n    }\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/api/42',\n    payload: {\n      num: '12'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 400);\n  });\n});","file":"schema-validation.test.js","skipped":false,"dir":"test"},{"name":"Custom AJV settings on different parameters - pt2","suites":[],"updatePoint":{"line":1050,"column":55,"index":19643},"line":1050,"code":"test('Custom AJV settings on different parameters - pt2', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.setValidatorCompiler(customValidatorCompiler);\n  fastify.post('/api/:id', {\n    schema: {\n      params: {\n        type: 'object',\n        properties: {\n          id: {\n            type: 'number'\n          }\n        },\n        required: ['id']\n      },\n      body: {\n        type: 'object',\n        properties: {\n          num: {\n            type: 'number'\n          }\n        },\n        required: ['num']\n      }\n    },\n    handler: (req, reply) => {\n      t.same(typeof req.params.id, 'number');\n      t.same(typeof req.body.num, 'number');\n      t.same(req.params.id, 42);\n      t.same(req.body.num, 12);\n    }\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/api/42',\n    payload: {\n      num: 12\n    }\n  });\n});","file":"schema-validation.test.js","skipped":false,"dir":"test"},{"name":"The same $id in route's schema must not overwrite others","suites":[],"updatePoint":{"line":1090,"column":62,"index":20490},"line":1090,"code":"test(\"The same $id in route's schema must not overwrite others\", t => {\n  t.plan(4);\n  const fastify = Fastify();\n  const UserSchema = Schema.object().id('http://mydomain.com/user').title('User schema').description('Contains all user fields').prop('id', Schema.integer()).prop('username', Schema.string().minLength(4)).prop('firstName', Schema.string().minLength(1)).prop('lastName', Schema.string().minLength(1)).prop('fullName', Schema.string().minLength(1)).prop('email', Schema.string()).prop('password', Schema.string().minLength(6)).prop('bio', Schema.string());\n  const userCreateSchema = UserSchema.only(['username', 'firstName', 'lastName', 'email', 'bio', 'password', 'password_confirm']).required(['username', 'firstName', 'lastName', 'email', 'bio', 'password']);\n  const userPatchSchema = UserSchema.only(['firstName', 'lastName', 'bio']);\n  fastify.patch('/user/:id', {\n    schema: {\n      body: userPatchSchema\n    },\n    handler: () => {\n      return 'ok';\n    }\n  }).post('/user', {\n    schema: {\n      body: userCreateSchema\n    },\n    handler: () => {\n      return 'ok';\n    }\n  });\n  fastify.inject({\n    method: 'POST',\n    url: '/user',\n    body: {}\n  }, (err, res) => {\n    t.error(err);\n    t.same(res.json().message, \"body must have required property 'username'\");\n  });\n  fastify.inject({\n    url: '/user/1',\n    method: 'PATCH',\n    body: {}\n  }, (err, res) => {\n    t.error(err);\n    t.same(res.payload, 'ok');\n  });\n});","file":"schema-validation.test.js","skipped":false,"dir":"test"},{"name":"Custom validator compiler should not mutate schema","suites":[],"updatePoint":{"line":1128,"column":56,"index":21933},"line":1128,"code":"test('Custom validator compiler should not mutate schema', async t => {\n  t.plan(2);\n\n  class Headers {}\n\n  const fastify = Fastify();\n  fastify.setValidatorCompiler(({\n    schema,\n    method,\n    url,\n    httpPart\n  }) => {\n    t.type(schema, Headers);\n    return () => {};\n  });\n  fastify.get('/', {\n    schema: {\n      headers: new Headers()\n    }\n  }, () => {});\n  await fastify.ready();\n});","file":"schema-validation.test.js","skipped":false,"dir":"test"},{"name":"search","suites":[],"updatePoint":{"line":59,"column":12,"index":801},"line":59,"code":"test('search', t => {\n  t.plan(1);\n\n  try {\n    fastify.route({\n      method: 'SEARCH',\n      url: '/',\n      schema,\n      handler: function (request, reply) {\n        reply.code(200).send({\n          hello: 'world'\n        });\n      }\n    });\n    t.pass();\n  } catch (e) {\n    t.fail();\n  }\n});","file":"search.test.js","skipped":false,"dir":"test"},{"name":"search, params schema","suites":[],"updatePoint":{"line":78,"column":27,"index":1113},"line":78,"code":"test('search, params schema', t => {\n  t.plan(1);\n\n  try {\n    fastify.route({\n      method: 'SEARCH',\n      url: '/params/:foo/:test',\n      schema: paramsSchema,\n      handler: function (request, reply) {\n        reply.code(200).send(request.params);\n      }\n    });\n    t.pass();\n  } catch (e) {\n    t.fail();\n  }\n});","file":"search.test.js","skipped":false,"dir":"test"},{"name":"search, querystring schema","suites":[],"updatePoint":{"line":95,"column":32,"index":1439},"line":95,"code":"test('search, querystring schema', t => {\n  t.plan(1);\n\n  try {\n    fastify.route({\n      method: 'SEARCH',\n      url: '/query',\n      schema: querySchema,\n      handler: function (request, reply) {\n        reply.code(200).send(request.query);\n      }\n    });\n    t.pass();\n  } catch (e) {\n    t.fail();\n  }\n});","file":"search.test.js","skipped":false,"dir":"test"},{"name":"search, body schema","suites":[],"updatePoint":{"line":112,"column":25,"index":1744},"line":112,"code":"test('search, body schema', t => {\n  t.plan(1);\n\n  try {\n    fastify.route({\n      method: 'SEARCH',\n      url: '/body',\n      schema: bodySchema,\n      handler: function (request, reply) {\n        reply.code(200).send(request.body);\n      }\n    });\n    t.pass();\n  } catch (e) {\n    t.fail();\n  }\n});","file":"search.test.js","skipped":false,"dir":"test"},{"name":"request - search","suites":[],"updatePoint":{"line":137,"column":24,"index":2215},"line":137,"code":"  test('request - search', t => {\n    t.plan(4);\n    sget({\n      method: 'SEARCH',\n      url\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n  });","file":"search.test.js","skipped":false,"dir":"test"},{"name":"request search params schema","suites":[],"updatePoint":{"line":151,"column":36,"index":2565},"line":151,"code":"  test('request search params schema', t => {\n    t.plan(4);\n    sget({\n      method: 'SEARCH',\n      url: `${url}/params/world/123`\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        foo: 'world',\n        test: 123\n      });\n    });\n  });","file":"search.test.js","skipped":false,"dir":"test"},{"name":"request search params schema error","suites":[],"updatePoint":{"line":166,"column":42,"index":2965},"line":166,"code":"  test('request search params schema error', t => {\n    t.plan(3);\n    sget({\n      method: 'SEARCH',\n      url: `${url}/params/world/string`\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 400);\n      t.same(JSON.parse(body), {\n        error: 'Bad Request',\n        message: 'params/test must be integer',\n        statusCode: 400\n      });\n    });\n  });","file":"search.test.js","skipped":false,"dir":"test"},{"name":"request search querystring schema","suites":[],"updatePoint":{"line":181,"column":41,"index":3360},"line":181,"code":"  test('request search querystring schema', t => {\n    t.plan(4);\n    sget({\n      method: 'SEARCH',\n      url: `${url}/query?hello=123`\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        hello: 123\n      });\n    });\n  });","file":"search.test.js","skipped":false,"dir":"test"},{"name":"request search querystring schema error","suites":[],"updatePoint":{"line":195,"column":47,"index":3743},"line":195,"code":"  test('request search querystring schema error', t => {\n    t.plan(3);\n    sget({\n      method: 'SEARCH',\n      url: `${url}/query?hello=world`\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 400);\n      t.same(JSON.parse(body), {\n        error: 'Bad Request',\n        message: 'querystring/hello must be integer',\n        statusCode: 400\n      });\n    });\n  });","file":"search.test.js","skipped":false,"dir":"test"},{"name":"request search body schema","suites":[],"updatePoint":{"line":210,"column":34,"index":4135},"line":210,"code":"  test('request search body schema', t => {\n    t.plan(4);\n    const replyBody = {\n      foo: 'bar',\n      test: 5\n    };\n    sget({\n      method: 'SEARCH',\n      url: `${url}/body`,\n      body: JSON.stringify(replyBody),\n      headers: {\n        'content-type': 'application/json'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), replyBody);\n    });\n  });","file":"search.test.js","skipped":false,"dir":"test"},{"name":"request search body schema error","suites":[],"updatePoint":{"line":230,"column":40,"index":4652},"line":230,"code":"  test('request search body schema error', t => {\n    t.plan(4);\n    sget({\n      method: 'SEARCH',\n      url: `${url}/body`,\n      body: JSON.stringify({\n        foo: 'bar',\n        test: 'test'\n      }),\n      headers: {\n        'content-type': 'application/json'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 400);\n      t.equal(response.headers['content-length'], '' + body.length);\n      t.same(JSON.parse(body), {\n        error: 'Bad Request',\n        message: 'body/test must be integer',\n        statusCode: 400\n      });\n    });\n  });","file":"search.test.js","skipped":false,"dir":"test"},{"name":"listen should accept null port","suites":[],"updatePoint":{"line":9,"column":36,"index":133},"line":9,"code":"test('listen should accept null port', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen({\n    port: null\n  }, err => {\n    t.error(err);\n  });\n});","file":"server.test.js","skipped":false,"dir":"test"},{"name":"listen should accept undefined port","suites":[],"updatePoint":{"line":19,"column":41,"index":345},"line":19,"code":"test('listen should accept undefined port', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen({\n    port: undefined\n  }, err => {\n    t.error(err);\n  });\n});","file":"server.test.js","skipped":false,"dir":"test"},{"name":"listen should accept stringified number port","suites":[],"updatePoint":{"line":29,"column":50,"index":571},"line":29,"code":"test('listen should accept stringified number port', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n  fastify.listen({\n    port: '1234'\n  }, err => {\n    t.error(err);\n  });\n});","file":"server.test.js","skipped":false,"dir":"test"},{"name":"listen should reject string port","suites":[],"updatePoint":{"line":39,"column":38,"index":782},"line":39,"code":"test('listen should reject string port', async t => {\n  t.plan(2);\n  const fastify = Fastify();\n  t.teardown(fastify.close.bind(fastify));\n\n  try {\n    await fastify.listen({\n      port: 'hello-world'\n    });\n  } catch (error) {\n    t.same(error.message, 'options.port should be >= 0 and < 65536. Received hello-world.');\n  }\n\n  try {\n    await fastify.listen({\n      port: '1234hello'\n    });\n  } catch (error) {\n    t.same(error.message, 'options.port should be >= 0 and < 65536. Received 1234hello.');\n  }\n});","file":"server.test.js","skipped":false,"dir":"test"},{"name":"skip automatic reply.send() with reply.sent = true and a body","suites":[],"updatePoint":{"line":15,"column":67,"index":412},"line":15,"code":"test('skip automatic reply.send() with reply.sent = true and a body', t => {\n  const stream = split(JSON.parse);\n  const app = Fastify({\n    logger: {\n      stream\n    }\n  });\n  stream.on('data', line => {\n    t.not(line.level, 40); // there are no errors\n\n    t.not(line.level, 50); // there are no errors\n  });\n  app.get('/', (req, reply) => {\n    reply.sent = true;\n    reply.raw.end('hello world');\n    return Promise.resolve('this will be skipped');\n  });\n  return app.inject({\n    method: 'GET',\n    url: '/'\n  }).then(res => {\n    t.equal(res.statusCode, 200);\n    t.equal(res.body, 'hello world');\n  });\n});","file":"skip-reply-send.test.js","skipped":false,"dir":"test"},{"name":"skip automatic reply.send() with reply.sent = true and no body","suites":[],"updatePoint":{"line":40,"column":68,"index":1029},"line":40,"code":"test('skip automatic reply.send() with reply.sent = true and no body', t => {\n  const stream = split(JSON.parse);\n  const app = Fastify({\n    logger: {\n      stream\n    }\n  });\n  stream.on('data', line => {\n    t.not(line.level, 40); // there are no error\n\n    t.not(line.level, 50); // there are no error\n  });\n  app.get('/', (req, reply) => {\n    reply.sent = true;\n    reply.raw.end('hello world');\n    return Promise.resolve();\n  });\n  return app.inject({\n    method: 'GET',\n    url: '/'\n  }).then(res => {\n    t.equal(res.statusCode, 200);\n    t.equal(res.body, 'hello world');\n  });\n});","file":"skip-reply-send.test.js","skipped":false,"dir":"test"},{"name":"skip automatic reply.send() with reply.sent = true and an error","suites":[],"updatePoint":{"line":65,"column":69,"index":1623},"line":65,"code":"test('skip automatic reply.send() with reply.sent = true and an error', t => {\n  const stream = split(JSON.parse);\n  const app = Fastify({\n    logger: {\n      stream\n    }\n  });\n  let errorSeen = false;\n  stream.on('data', line => {\n    if (line.level === 50) {\n      errorSeen = true;\n      t.equal(line.err.message, 'kaboom');\n      t.equal(line.msg, 'Promise errored, but reply.sent = true was set');\n    }\n  });\n  app.get('/', (req, reply) => {\n    reply.sent = true;\n    reply.raw.end('hello world');\n    return Promise.reject(new Error('kaboom'));\n  });\n  return app.inject({\n    method: 'GET',\n    url: '/'\n  }).then(res => {\n    t.equal(errorSeen, true);\n    t.equal(res.statusCode, 200);\n    t.equal(res.body, 'hello world');\n  });\n});","file":"skip-reply-send.test.js","skipped":false,"dir":"test"},{"name":"Hijacking inside  skips all the following hooks and handler execution","suites":[],"updatePoint":{"line":99,"column":93,"index":2683},"line":99,"code":"  test(`Hijacking inside ${hookOrHandler} skips all the following hooks and handler execution`, t => {\n    t.plan(4);\n    const test = t.test;\n    test('Sending a response using reply.raw => onResponse hook is called', t => {\n      const stream = split(JSON.parse);\n      const app = Fastify({\n        logger: {\n          stream\n        }\n      });\n      stream.on('data', line => {\n        t.not(line.level, 40); // there are no errors\n\n        t.not(line.level, 50); // there are no errors\n      });\n      previousHooks.forEach(h => app.addHook(h, async (req, reply) => t.pass(`${h} should be called`)));\n\n      if (hookOrHandler === 'handler') {\n        app.get('/', (req, reply) => {\n          reply.hijack();\n          reply.raw.end(`hello from ${hookOrHandler}`);\n        });\n      } else {\n        app.addHook(hookOrHandler, async (req, reply) => {\n          reply.hijack();\n          reply.raw.end(`hello from ${hookOrHandler}`);\n        });\n        app.get('/', (req, reply) => t.fail('Handler should not be called'));\n      }\n\n      nextHooks.forEach(h => {\n        if (h === 'onResponse') {\n          app.addHook(h, async (req, reply) => t.pass(`${h} should be called`));\n        } else {\n          app.addHook(h, async (req, reply) => t.fail(`${h} should not be called`));\n        }\n      });\n      return app.inject({\n        method: 'GET',\n        url: '/'\n      }).then(res => {\n        t.equal(res.statusCode, 200);\n        t.equal(res.body, `hello from ${hookOrHandler}`);\n      });\n    });\n    test('Sending a response using req.socket => onResponse not called', t => {\n      const stream = split(JSON.parse);\n      const app = Fastify({\n        logger: {\n          stream\n        }\n      });\n      t.teardown(() => app.close());\n      stream.on('data', line => {\n        t.not(line.level, 40); // there are no errors\n\n        t.not(line.level, 50); // there are no errors\n      });\n      previousHooks.forEach(h => app.addHook(h, async (req, reply) => t.pass(`${h} should be called`)));\n\n      if (hookOrHandler === 'handler') {\n        app.get('/', (req, reply) => {\n          reply.hijack();\n          req.socket.write('HTTP/1.1 200 OK\\r\\n\\r\\n');\n          req.socket.write(`hello from ${hookOrHandler}`);\n          req.socket.end();\n        });\n      } else {\n        app.addHook(hookOrHandler, async (req, reply) => {\n          reply.hijack();\n          req.socket.write('HTTP/1.1 200 OK\\r\\n\\r\\n');\n          req.socket.write(`hello from ${hookOrHandler}`);\n          req.socket.end();\n        });\n        app.get('/', (req, reply) => t.fail('Handler should not be called'));\n      }\n\n      nextHooks.forEach(h => app.addHook(h, async (req, reply) => t.fail(`${h} should not be called`)));\n      app.listen({\n        port: 0\n      }, err => {\n        t.error(err);\n        const client = net.createConnection({\n          port: app.server.address().port\n        }, () => {\n          client.write('GET / HTTP/1.1\\r\\n\\r\\n');\n          let chunks = '';\n          client.setEncoding('utf8');\n          client.on('data', data => {\n            chunks += data;\n          });\n          client.on('end', function () {\n            t.match(chunks, new RegExp(`hello from ${hookOrHandler}`, 'i'));\n            t.end();\n          });\n        });\n      });\n    });\n    test('Throwing an error doesnt trigger any hooks', t => {\n      const stream = split(JSON.parse);\n      const app = Fastify({\n        logger: {\n          stream\n        }\n      });\n      t.teardown(() => app.close());\n      let errorSeen = false;\n      stream.on('data', line => {\n        if (hookOrHandler === 'handler') {\n          if (line.level === 40) {\n            errorSeen = true;\n            t.equal(line.err.code, 'FST_ERR_REP_ALREADY_SENT');\n          }\n        } else {\n          t.not(line.level, 40); // there are no errors\n\n          t.not(line.level, 50); // there are no errors\n        }\n      });\n      previousHooks.forEach(h => app.addHook(h, async (req, reply) => t.pass(`${h} should be called`)));\n\n      if (hookOrHandler === 'handler') {\n        app.get('/', (req, reply) => {\n          reply.hijack();\n          throw new Error('This wil be skipped');\n        });\n      } else {\n        app.addHook(hookOrHandler, async (req, reply) => {\n          reply.hijack();\n          throw new Error('This wil be skipped');\n        });\n        app.get('/', (req, reply) => t.fail('Handler should not be called'));\n      }\n\n      nextHooks.forEach(h => app.addHook(h, async (req, reply) => t.fail(`${h} should not be called`)));\n      return Promise.race([app.inject({\n        method: 'GET',\n        url: '/'\n      }), new Promise((resolve, reject) => setTimeout(resolve, 1000))]).then((err, res) => {\n        t.error(err);\n\n        if (hookOrHandler === 'handler') {\n          t.equal(errorSeen, true);\n        }\n      });\n    });\n    test('Calling reply.send() after hijacking logs a warning', t => {\n      const stream = split(JSON.parse);\n      const app = Fastify({\n        logger: {\n          stream\n        }\n      });\n      let errorSeen = false;\n      stream.on('data', line => {\n        if (line.level === 40) {\n          errorSeen = true;\n          t.equal(line.err.code, 'FST_ERR_REP_ALREADY_SENT');\n        }\n      });\n      previousHooks.forEach(h => app.addHook(h, async (req, reply) => t.pass(`${h} should be called`)));\n\n      if (hookOrHandler === 'handler') {\n        app.get('/', (req, reply) => {\n          reply.hijack();\n          reply.send('hello from reply.send()');\n        });\n      } else {\n        app.addHook(hookOrHandler, async (req, reply) => {\n          reply.hijack();\n          return reply.send('hello from reply.send()');\n        });\n        app.get('/', (req, reply) => t.fail('Handler should not be called'));\n      }\n\n      nextHooks.forEach(h => app.addHook(h, async (req, reply) => t.fail(`${h} should not be called`)));\n      return Promise.race([app.inject({\n        method: 'GET',\n        url: '/'\n      }), new Promise((resolve, reject) => setTimeout(resolve, 1000))]).then((err, res) => {\n        t.error(err);\n        t.equal(errorSeen, true);\n      });\n    });\n  });","file":"skip-reply-send.test.js","skipped":false,"dir":"test"},{"name":"Sending a response using reply.raw => onResponse hook is called","suites":[],"updatePoint":{"line":102,"column":73,"index":2806},"line":102,"code":"    test('Sending a response using reply.raw => onResponse hook is called', t => {\n      const stream = split(JSON.parse);\n      const app = Fastify({\n        logger: {\n          stream\n        }\n      });\n      stream.on('data', line => {\n        t.not(line.level, 40); // there are no errors\n\n        t.not(line.level, 50); // there are no errors\n      });\n      previousHooks.forEach(h => app.addHook(h, async (req, reply) => t.pass(`${h} should be called`)));\n\n      if (hookOrHandler === 'handler') {\n        app.get('/', (req, reply) => {\n          reply.hijack();\n          reply.raw.end(`hello from ${hookOrHandler}`);\n        });\n      } else {\n        app.addHook(hookOrHandler, async (req, reply) => {\n          reply.hijack();\n          reply.raw.end(`hello from ${hookOrHandler}`);\n        });\n        app.get('/', (req, reply) => t.fail('Handler should not be called'));\n      }\n\n      nextHooks.forEach(h => {\n        if (h === 'onResponse') {\n          app.addHook(h, async (req, reply) => t.pass(`${h} should be called`));\n        } else {\n          app.addHook(h, async (req, reply) => t.fail(`${h} should not be called`));\n        }\n      });\n      return app.inject({\n        method: 'GET',\n        url: '/'\n      }).then(res => {\n        t.equal(res.statusCode, 200);\n        t.equal(res.body, `hello from ${hookOrHandler}`);\n      });\n    });","file":"skip-reply-send.test.js","skipped":false,"dir":"test"},{"name":"Sending a response using req.socket => onResponse not called","suites":[],"updatePoint":{"line":144,"column":70,"index":4168},"line":144,"code":"    test('Sending a response using req.socket => onResponse not called', t => {\n      const stream = split(JSON.parse);\n      const app = Fastify({\n        logger: {\n          stream\n        }\n      });\n      t.teardown(() => app.close());\n      stream.on('data', line => {\n        t.not(line.level, 40); // there are no errors\n\n        t.not(line.level, 50); // there are no errors\n      });\n      previousHooks.forEach(h => app.addHook(h, async (req, reply) => t.pass(`${h} should be called`)));\n\n      if (hookOrHandler === 'handler') {\n        app.get('/', (req, reply) => {\n          reply.hijack();\n          req.socket.write('HTTP/1.1 200 OK\\r\\n\\r\\n');\n          req.socket.write(`hello from ${hookOrHandler}`);\n          req.socket.end();\n        });\n      } else {\n        app.addHook(hookOrHandler, async (req, reply) => {\n          reply.hijack();\n          req.socket.write('HTTP/1.1 200 OK\\r\\n\\r\\n');\n          req.socket.write(`hello from ${hookOrHandler}`);\n          req.socket.end();\n        });\n        app.get('/', (req, reply) => t.fail('Handler should not be called'));\n      }\n\n      nextHooks.forEach(h => app.addHook(h, async (req, reply) => t.fail(`${h} should not be called`)));\n      app.listen({\n        port: 0\n      }, err => {\n        t.error(err);\n        const client = net.createConnection({\n          port: app.server.address().port\n        }, () => {\n          client.write('GET / HTTP/1.1\\r\\n\\r\\n');\n          let chunks = '';\n          client.setEncoding('utf8');\n          client.on('data', data => {\n            chunks += data;\n          });\n          client.on('end', function () {\n            t.match(chunks, new RegExp(`hello from ${hookOrHandler}`, 'i'));\n            t.end();\n          });\n        });\n      });\n    });","file":"skip-reply-send.test.js","skipped":false,"dir":"test"},{"name":"Throwing an error doesnt trigger any hooks","suites":[],"updatePoint":{"line":197,"column":52,"index":5915},"line":197,"code":"    test('Throwing an error doesnt trigger any hooks', t => {\n      const stream = split(JSON.parse);\n      const app = Fastify({\n        logger: {\n          stream\n        }\n      });\n      t.teardown(() => app.close());\n      let errorSeen = false;\n      stream.on('data', line => {\n        if (hookOrHandler === 'handler') {\n          if (line.level === 40) {\n            errorSeen = true;\n            t.equal(line.err.code, 'FST_ERR_REP_ALREADY_SENT');\n          }\n        } else {\n          t.not(line.level, 40); // there are no errors\n\n          t.not(line.level, 50); // there are no errors\n        }\n      });\n      previousHooks.forEach(h => app.addHook(h, async (req, reply) => t.pass(`${h} should be called`)));\n\n      if (hookOrHandler === 'handler') {\n        app.get('/', (req, reply) => {\n          reply.hijack();\n          throw new Error('This wil be skipped');\n        });\n      } else {\n        app.addHook(hookOrHandler, async (req, reply) => {\n          reply.hijack();\n          throw new Error('This wil be skipped');\n        });\n        app.get('/', (req, reply) => t.fail('Handler should not be called'));\n      }\n\n      nextHooks.forEach(h => app.addHook(h, async (req, reply) => t.fail(`${h} should not be called`)));\n      return Promise.race([app.inject({\n        method: 'GET',\n        url: '/'\n      }), new Promise((resolve, reject) => setTimeout(resolve, 1000))]).then((err, res) => {\n        t.error(err);\n\n        if (hookOrHandler === 'handler') {\n          t.equal(errorSeen, true);\n        }\n      });\n    });","file":"skip-reply-send.test.js","skipped":false,"dir":"test"},{"name":"Calling reply.send() after hijacking logs a warning","suites":[],"updatePoint":{"line":245,"column":61,"index":7474},"line":245,"code":"    test('Calling reply.send() after hijacking logs a warning', t => {\n      const stream = split(JSON.parse);\n      const app = Fastify({\n        logger: {\n          stream\n        }\n      });\n      let errorSeen = false;\n      stream.on('data', line => {\n        if (line.level === 40) {\n          errorSeen = true;\n          t.equal(line.err.code, 'FST_ERR_REP_ALREADY_SENT');\n        }\n      });\n      previousHooks.forEach(h => app.addHook(h, async (req, reply) => t.pass(`${h} should be called`)));\n\n      if (hookOrHandler === 'handler') {\n        app.get('/', (req, reply) => {\n          reply.hijack();\n          reply.send('hello from reply.send()');\n        });\n      } else {\n        app.addHook(hookOrHandler, async (req, reply) => {\n          reply.hijack();\n          return reply.send('hello from reply.send()');\n        });\n        app.get('/', (req, reply) => t.fail('Handler should not be called'));\n      }\n\n      nextHooks.forEach(h => app.addHook(h, async (req, reply) => t.fail(`${h} should not be called`)));\n      return Promise.race([app.inject({\n        method: 'GET',\n        url: '/'\n      }), new Promise((resolve, reject) => setTimeout(resolve, 1000))]).then((err, res) => {\n        t.error(err);\n        t.equal(errorSeen, true);\n      });\n    });","file":"skip-reply-send.test.js","skipped":false,"dir":"test"},{"name":"should respond with a stream","suites":[],"updatePoint":{"line":50,"column":34,"index":857},"line":50,"code":"test('should respond with a stream', t => {\n  t.plan(6);\n  const fastify = Fastify();\n  fastify.get('/', function (req, reply) {\n    const stream = fs.createReadStream(__filename, 'utf8');\n    reply.code(200).send(stream);\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget(`http://localhost:${fastify.server.address().port}`, function (err, response, data) {\n      t.error(err);\n      t.equal(response.headers['content-type'], undefined);\n      t.equal(response.statusCode, 200);\n      fs.readFile(__filename, (err, expected) => {\n        t.error(err);\n        t.equal(expected.toString(), data.toString());\n      });\n    });\n  });\n});","file":"stream.test.js","skipped":false,"dir":"test"},{"name":"should respond with a stream (error)","suites":[],"updatePoint":{"line":75,"column":42,"index":1583},"line":75,"code":"test('should respond with a stream (error)', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.get('/error', function (req, reply) {\n    const stream = fs.createReadStream('not-existing-file', 'utf8');\n    reply.code(200).send(stream);\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget(`http://localhost:${fastify.server.address().port}/error`, function (err, response) {\n      t.error(err);\n      t.equal(response.statusCode, 500);\n    });\n  });\n});","file":"stream.test.js","skipped":false,"dir":"test"},{"name":"should trigger the onSend hook","suites":[],"updatePoint":{"line":95,"column":36,"index":2119},"line":95,"code":"test('should trigger the onSend hook', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.get('/', (req, reply) => {\n    reply.send(fs.createReadStream(__filename, 'utf8'));\n  });\n  fastify.addHook('onSend', (req, reply, payload, done) => {\n    t.ok(payload._readableState);\n    reply.header('Content-Type', 'application/javascript');\n    done();\n  });\n  fastify.inject({\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.headers['content-type'], 'application/javascript');\n    t.equal(res.payload, fs.readFileSync(__filename, 'utf8'));\n    fastify.close();\n  });\n});","file":"stream.test.js","skipped":false,"dir":"test"},{"name":"should trigger the onSend hook only twice if pumping the stream fails, first with the stream, second with the serialized error","suites":[],"updatePoint":{"line":115,"column":132,"index":2809},"line":115,"code":"test('should trigger the onSend hook only twice if pumping the stream fails, first with the stream, second with the serialized error', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.get('/', (req, reply) => {\n    reply.send(fs.createReadStream('not-existing-file', 'utf8'));\n  });\n  let counter = 0;\n  fastify.addHook('onSend', (req, reply, payload, done) => {\n    if (counter === 0) {\n      t.ok(payload._readableState);\n    } else if (counter === 1) {\n      const error = JSON.parse(payload);\n      t.equal(error.statusCode, 500);\n    }\n\n    counter++;\n    done();\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget(`http://localhost:${fastify.server.address().port}`, function (err, response) {\n      t.error(err);\n      t.equal(response.statusCode, 500);\n    });\n  });\n});","file":"stream.test.js","skipped":false,"dir":"test"},{"name":"onSend hook stream","suites":[],"updatePoint":{"line":146,"column":24,"index":3571},"line":146,"code":"test('onSend hook stream', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.get('/', function (req, reply) {\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.addHook('onSend', (req, reply, payload, done) => {\n    const gzStream = zlib.createGzip();\n    reply.header('Content-Encoding', 'gzip');\n    pump(fs.createReadStream(resolve(process.cwd() + '/test/stream.test.js'), 'utf8'), gzStream, t.error);\n    done(null, gzStream);\n  });\n  fastify.inject({\n    url: '/',\n    method: 'GET'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.headers['content-encoding'], 'gzip');\n    const file = fs.readFileSync(resolve(process.cwd() + '/test/stream.test.js'), 'utf8');\n    const payload = zlib.gunzipSync(res.rawPayload);\n    t.equal(payload.toString('utf-8'), file);\n    fastify.close();\n  });\n});","file":"stream.test.js","skipped":false,"dir":"test"},{"name":"onSend hook stream should work even if payload is not a proper stream","suites":[],"updatePoint":{"line":172,"column":75,"index":4444},"line":172,"code":"test('onSend hook stream should work even if payload is not a proper stream', t => {\n  t.plan(1);\n  const reply = proxyquire('../lib/reply', {\n    stream: {\n      finished: (...args) => {\n        if (args.length === 2) {\n          args[1](new Error('test-error'));\n        }\n      }\n    }\n  });\n  const Fastify = proxyquire('..', {\n    './lib/reply.js': reply\n  });\n  const spyLogger = {\n    fatal: () => {},\n    error: () => {},\n    warn: message => {\n      t.equal(message, 'stream payload does not end properly');\n      fastify.close();\n    },\n    info: () => {},\n    debug: () => {},\n    trace: () => {},\n    child: () => {\n      return spyLogger;\n    }\n  };\n  const fastify = Fastify({\n    logger: spyLogger\n  });\n  fastify.get('/', function (req, reply) {\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.addHook('onSend', (req, reply, payload, done) => {\n    const fakeStream = {\n      pipe: () => {}\n    };\n    done(null, fakeStream);\n  });\n  fastify.inject({\n    url: '/',\n    method: 'GET'\n  });\n});","file":"stream.test.js","skipped":false,"dir":"test"},{"name":"onSend hook stream should work on payload with \"close\" ending function","suites":[],"updatePoint":{"line":219,"column":76,"index":5468},"line":219,"code":"test('onSend hook stream should work on payload with \"close\" ending function', t => {\n  t.plan(1);\n  const reply = proxyquire('../lib/reply', {\n    stream: {\n      finished: (...args) => {\n        if (args.length === 2) {\n          args[1](new Error('test-error'));\n        }\n      }\n    }\n  });\n  const Fastify = proxyquire('..', {\n    './lib/reply.js': reply\n  });\n  const fastify = Fastify({\n    logger: false\n  });\n  fastify.get('/', function (req, reply) {\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.addHook('onSend', (req, reply, payload, done) => {\n    const fakeStream = {\n      pipe: () => {},\n      close: cb => {\n        cb();\n        t.pass();\n      }\n    };\n    done(null, fakeStream);\n  });\n  fastify.inject({\n    url: '/',\n    method: 'GET'\n  });\n});","file":"stream.test.js","skipped":false,"dir":"test"},{"name":"Destroying streams prematurely","suites":[],"updatePoint":{"line":256,"column":36,"index":6213},"line":256,"code":"test('Destroying streams prematurely', t => {\n  t.plan(6);\n  let fastify = null;\n  const logStream = split(JSON.parse);\n\n  try {\n    fastify = Fastify({\n      logger: {\n        stream: logStream,\n        level: 'info'\n      }\n    });\n  } catch (e) {\n    t.fail();\n  }\n\n  const stream = require('stream');\n\n  const http = require('http'); // Test that \"premature close\" errors are logged with level warn\n\n\n  logStream.on('data', line => {\n    if (line.res) {\n      t.equal(line.msg, 'stream closed prematurely');\n      t.equal(line.level, 30);\n    }\n  });\n  fastify.get('/', function (request, reply) {\n    t.pass('Received request');\n    let sent = false;\n    const reallyLongStream = new stream.Readable({\n      read: function () {\n        if (!sent) {\n          this.push(Buffer.from('hello\\n'));\n        }\n\n        sent = true;\n      }\n    });\n    reply.send(reallyLongStream);\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    const port = fastify.server.address().port;\n    http.get(`http://localhost:${port}`, function (response) {\n      t.equal(response.statusCode, 200);\n      response.on('readable', function () {\n        response.destroy();\n      }); // Node bug? Node never emits 'close' here.\n\n      response.on('aborted', function () {\n        t.pass('Response closed');\n      });\n    });\n  });\n});","file":"stream.test.js","skipped":false,"dir":"test"},{"name":"Destroying streams prematurely should call close method","suites":[],"updatePoint":{"line":317,"column":61,"index":7627},"line":317,"code":"test('Destroying streams prematurely should call close method', t => {\n  t.plan(7);\n  let fastify = null;\n  const logStream = split(JSON.parse);\n\n  try {\n    fastify = Fastify({\n      logger: {\n        stream: logStream,\n        level: 'info'\n      }\n    });\n  } catch (e) {\n    t.fail();\n  }\n\n  const stream = require('stream');\n\n  const http = require('http'); // Test that \"premature close\" errors are logged with level warn\n\n\n  logStream.on('data', line => {\n    if (line.res) {\n      t.equal(line.msg, 'stream closed prematurely');\n      t.equal(line.level, 30);\n    }\n  });\n  fastify.get('/', function (request, reply) {\n    t.pass('Received request');\n    let sent = false;\n    const reallyLongStream = new stream.Readable({\n      read: function () {\n        if (!sent) {\n          this.push(Buffer.from('hello\\n'));\n        }\n\n        sent = true;\n      }\n    });\n    reallyLongStream.destroy = undefined;\n\n    reallyLongStream.close = () => t.ok('called');\n\n    reply.send(reallyLongStream);\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    const port = fastify.server.address().port;\n    http.get(`http://localhost:${port}`, function (response) {\n      t.equal(response.statusCode, 200);\n      response.on('readable', function () {\n        response.destroy();\n      }); // Node bug? Node never emits 'close' here.\n\n      response.on('aborted', function () {\n        t.pass('Response closed');\n      });\n    });\n  });\n});","file":"stream.test.js","skipped":false,"dir":"test"},{"name":"Destroying streams prematurely should call close method when destroy is not a function","suites":[],"updatePoint":{"line":382,"column":92,"index":9167},"line":382,"code":"test('Destroying streams prematurely should call close method when destroy is not a function', t => {\n  t.plan(7);\n  let fastify = null;\n  const logStream = split(JSON.parse);\n\n  try {\n    fastify = Fastify({\n      logger: {\n        stream: logStream,\n        level: 'info'\n      }\n    });\n  } catch (e) {\n    t.fail();\n  }\n\n  const stream = require('stream');\n\n  const http = require('http'); // Test that \"premature close\" errors are logged with level warn\n\n\n  logStream.on('data', line => {\n    if (line.res) {\n      t.equal(line.msg, 'stream closed prematurely');\n      t.equal(line.level, 30);\n    }\n  });\n  fastify.get('/', function (request, reply) {\n    t.pass('Received request');\n    let sent = false;\n    const reallyLongStream = new stream.Readable({\n      read: function () {\n        if (!sent) {\n          this.push(Buffer.from('hello\\n'));\n        }\n\n        sent = true;\n      }\n    });\n    reallyLongStream.destroy = true;\n\n    reallyLongStream.close = () => t.ok('called');\n\n    reply.send(reallyLongStream);\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    const port = fastify.server.address().port;\n    http.get(`http://localhost:${port}`, function (response) {\n      t.equal(response.statusCode, 200);\n      response.on('readable', function () {\n        response.destroy();\n      }); // Node bug? Node never emits 'close' here.\n\n      response.on('aborted', function () {\n        t.pass('Response closed');\n      });\n    });\n  });\n});","file":"stream.test.js","skipped":false,"dir":"test"},{"name":"Destroying streams prematurely should call abort method","suites":[],"updatePoint":{"line":447,"column":61,"index":10671},"line":447,"code":"test('Destroying streams prematurely should call abort method', t => {\n  t.plan(7);\n  let fastify = null;\n  const logStream = split(JSON.parse);\n\n  try {\n    fastify = Fastify({\n      logger: {\n        stream: logStream,\n        level: 'info'\n      }\n    });\n  } catch (e) {\n    t.fail();\n  }\n\n  const stream = require('stream');\n\n  const http = require('http'); // Test that \"premature close\" errors are logged with level warn\n\n\n  logStream.on('data', line => {\n    if (line.res) {\n      t.equal(line.msg, 'stream closed prematurely');\n      t.equal(line.level, 30);\n    }\n  });\n  fastify.get('/', function (request, reply) {\n    t.pass('Received request');\n    let sent = false;\n    const reallyLongStream = new stream.Readable({\n      read: function () {\n        if (!sent) {\n          this.push(Buffer.from('hello\\n'));\n        }\n\n        sent = true;\n      }\n    });\n    reallyLongStream.destroy = undefined;\n    reallyLongStream.close = undefined;\n\n    reallyLongStream.abort = () => t.ok('called');\n\n    reply.send(reallyLongStream);\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    const port = fastify.server.address().port;\n    http.get(`http://localhost:${port}`, function (response) {\n      t.equal(response.statusCode, 200);\n      response.on('readable', function () {\n        response.destroy();\n      }); // Node bug? Node never emits 'close' here.\n\n      response.on('aborted', function () {\n        t.pass('Response closed');\n      });\n    });\n  });\n});","file":"stream.test.js","skipped":false,"dir":"test"},{"name":"Destroying streams prematurely, log is disabled","suites":[],"updatePoint":{"line":513,"column":53,"index":12212},"line":513,"code":"test('Destroying streams prematurely, log is disabled', t => {\n  t.plan(4);\n  let fastify = null;\n\n  try {\n    fastify = Fastify({\n      logger: false\n    });\n  } catch (e) {\n    t.fail();\n  }\n\n  const stream = require('stream');\n\n  const http = require('http');\n\n  fastify.get('/', function (request, reply) {\n    reply.log[kDisableRequestLogging] = true;\n    let sent = false;\n    const reallyLongStream = new stream.Readable({\n      read: function () {\n        if (!sent) {\n          this.push(Buffer.from('hello\\n'));\n        }\n\n        sent = true;\n      }\n    });\n    reallyLongStream.destroy = true;\n\n    reallyLongStream.close = () => t.ok('called');\n\n    reply.send(reallyLongStream);\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    const port = fastify.server.address().port;\n    http.get(`http://localhost:${port}`, function (response) {\n      t.equal(response.statusCode, 200);\n      response.on('readable', function () {\n        response.destroy();\n      }); // Node bug? Node never emits 'close' here.\n\n      response.on('aborted', function () {\n        t.pass('Response closed');\n      });\n    });\n  });\n});","file":"stream.test.js","skipped":false,"dir":"test"},{"name":"should respond with a stream1","suites":[],"updatePoint":{"line":567,"column":35,"index":13396},"line":567,"code":"test('should respond with a stream1', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.get('/', function (req, reply) {\n    const stream = JSONStream.stringify();\n    reply.code(200).type('application/json').send(stream);\n    stream.write({\n      hello: 'world'\n    });\n    stream.end({\n      a: 42\n    });\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget(`http://localhost:${fastify.server.address().port}`, function (err, response, body) {\n      t.error(err);\n      t.equal(response.headers['content-type'], 'application/json');\n      t.equal(response.statusCode, 200);\n      t.same(JSON.parse(body), [{\n        hello: 'world'\n      }, {\n        a: 42\n      }]);\n    });\n  });\n});","file":"stream.test.js","skipped":false,"dir":"test"},{"name":"return a 404 if the stream emits a 404 error","suites":[],"updatePoint":{"line":599,"column":50,"index":14187},"line":599,"code":"test('return a 404 if the stream emits a 404 error', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.get('/', function (request, reply) {\n    t.pass('Received request');\n    const reallyLongStream = new Readable({\n      read: function () {\n        setImmediate(() => {\n          this.emit('error', new errors.NotFound());\n        });\n      }\n    });\n    reply.send(reallyLongStream);\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    const port = fastify.server.address().port;\n    sget(`http://localhost:${port}`, function (err, response) {\n      t.error(err);\n      t.equal(response.headers['content-type'], 'application/json; charset=utf-8');\n      t.equal(response.statusCode, 404);\n    });\n  });\n});","file":"stream.test.js","skipped":false,"dir":"test"},{"name":"should support send module 200 and 404","suites":[],"updatePoint":{"line":628,"column":44,"index":14974},"line":628,"code":"test('should support send module 200 and 404', {\n  skip: semver.gte(process.versions.node, '17.0.0')\n}, t => {\n  t.plan(8);\n  const fastify = Fastify();\n  fastify.get('/', function (req, reply) {\n    const stream = send(req.raw, __filename);\n    reply.code(200).send(stream);\n  });\n  fastify.get('/error', function (req, reply) {\n    const stream = send(req.raw, 'non-existing-file');\n    reply.code(200).send(stream);\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    const url = getUrl(fastify);\n    sget(url, function (err, response, data) {\n      t.error(err);\n      t.equal(response.headers['content-type'], 'application/javascript; charset=UTF-8');\n      t.equal(response.statusCode, 200);\n      fs.readFile(__filename, (err, expected) => {\n        t.error(err);\n        t.equal(expected.toString(), data.toString());\n      });\n    });\n    sget(url + '/error', function (err, response) {\n      t.error(err);\n      t.equal(response.statusCode, 404);\n    });\n  });\n});","file":"stream.test.js","skipped":false,"dir":"test"},{"name":"should destroy stream when response is ended","suites":[],"updatePoint":{"line":664,"column":50,"index":16030},"line":664,"code":"test('should destroy stream when response is ended', t => {\n  t.plan(4);\n\n  const stream = require('stream');\n\n  const fastify = Fastify();\n  fastify.get('/error', function (req, reply) {\n    const reallyLongStream = new stream.Readable({\n      read: function () {},\n      destroy: function (err, callback) {\n        t.ok('called');\n        callback(err);\n      }\n    });\n    reply.code(200).send(reallyLongStream);\n    reply.raw.end(Buffer.from('hello\\n'));\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget(`http://localhost:${fastify.server.address().port}/error`, function (err, response) {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n    });\n  });\n});","file":"stream.test.js","skipped":false,"dir":"test"},{"name":"should mark reply as sent before pumping the payload stream into response for async route handler","suites":[],"updatePoint":{"line":694,"column":103,"index":16839},"line":694,"code":"test('should mark reply as sent before pumping the payload stream into response for async route handler', t => {\n  t.plan(3);\n  const handleRequest = proxyquire('../lib/handleRequest', {\n    './wrapThenable': (thenable, reply) => {\n      thenable.then(function (payload) {\n        t.equal(reply.sent, true);\n      });\n    }\n  });\n  const route = proxyquire('../lib/route', {\n    './handleRequest': handleRequest\n  });\n  const Fastify = proxyquire('..', {\n    './lib/route': route\n  });\n  const fastify = Fastify();\n  fastify.get('/', async function (req, reply) {\n    const stream = fs.createReadStream(__filename, 'utf8');\n    return reply.code(200).send(stream);\n  });\n  fastify.inject({\n    url: '/',\n    method: 'GET'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.payload, fs.readFileSync(__filename, 'utf8'));\n    fastify.close();\n  });\n});","file":"stream.test.js","skipped":false,"dir":"test"},{"name":"reply.send handles aborted requests","suites":[],"updatePoint":{"line":723,"column":41,"index":17632},"line":723,"code":"test('reply.send handles aborted requests', t => {\n  t.plan(2);\n  const spyLogger = {\n    level: 'error',\n    fatal: () => {},\n    error: () => {\n      t.fail('should not log an error');\n    },\n    warn: () => {},\n    info: () => {},\n    debug: () => {},\n    trace: () => {},\n    child: () => {\n      return spyLogger;\n    }\n  };\n  const fastify = Fastify({\n    logger: spyLogger\n  });\n  fastify.get('/', (req, reply) => {\n    setTimeout(() => {\n      const stream = new Readable({\n        read: function () {\n          this.push(null);\n        }\n      });\n      reply.send(stream);\n    }, 6);\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    const port = fastify.server.address().port;\n\n    const http = require('http');\n\n    const req = http.get(`http://localhost:${port}`).on('error', err => {\n      t.equal(err.code, 'ECONNRESET');\n      fastify.close();\n    });\n    setTimeout(() => {\n      req.abort();\n    }, 1);\n  });\n});","file":"stream.test.js","skipped":false,"dir":"test"},{"name":"request terminated should not crash fastify","suites":[],"updatePoint":{"line":772,"column":49,"index":18648},"line":772,"code":"test('request terminated should not crash fastify', t => {\n  t.plan(10);\n  const spyLogger = {\n    level: 'error',\n    fatal: () => {},\n    error: () => {\n      t.fail('should not log an error');\n    },\n    warn: () => {},\n    info: () => {},\n    debug: () => {},\n    trace: () => {},\n    child: () => {\n      return spyLogger;\n    }\n  };\n  const fastify = Fastify({\n    logger: spyLogger\n  });\n  fastify.get('/', async (req, reply) => {\n    const stream = new Readable();\n\n    stream._read = () => {};\n\n    reply.header('content-type', 'text/html; charset=utf-8');\n    reply.header('transfer-encoding', 'chunked');\n    stream.push('<h1>HTML</h1>');\n    reply.send(stream);\n    await new Promise(resolve => {\n      setTimeout(resolve, 100).unref();\n    });\n    stream.push('<h1>should disply on second stream</h1>');\n    stream.push(null);\n    return reply;\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    const port = fastify.server.address().port;\n\n    const http = require('http');\n\n    const req = http.get(`http://localhost:${port}`, function (res) {\n      const {\n        statusCode,\n        headers\n      } = res;\n      t.equal(statusCode, 200);\n      t.equal(headers['content-type'], 'text/html; charset=utf-8');\n      t.equal(headers['transfer-encoding'], 'chunked');\n      res.on('data', function (chunk) {\n        t.equal(chunk.toString(), '<h1>HTML</h1>');\n      });\n      setTimeout(() => {\n        req.destroy(); // the server is not crash, we can connect it\n\n        http.get(`http://localhost:${port}`, function (res) {\n          const {\n            statusCode,\n            headers\n          } = res;\n          t.equal(statusCode, 200);\n          t.equal(headers['content-type'], 'text/html; charset=utf-8');\n          t.equal(headers['transfer-encoding'], 'chunked');\n          let payload = '';\n          res.on('data', function (chunk) {\n            payload += chunk.toString();\n          });\n          res.on('end', function () {\n            t.equal(payload, '<h1>HTML</h1><h1>should disply on second stream</h1>');\n            t.pass('should end properly');\n          });\n        });\n      }, 1);\n    });\n  });\n});","file":"stream.test.js","skipped":false,"dir":"test"},{"name":"sync route","suites":[],"updatePoint":{"line":9,"column":16,"index":100},"line":9,"code":"test('sync route', async t => {\n  const app = Fastify();\n  t.teardown(app.close.bind(app));\n  app.get('/', () => 'hello world');\n  const res = await app.inject('/');\n  t.equal(res.statusCode, 200);\n  t.equal(res.body, 'hello world');\n});","file":"sync-routes.test.js","skipped":false,"dir":"test"},{"name":"sync route return null","suites":[],"updatePoint":{"line":17,"column":28,"index":350},"line":17,"code":"test('sync route return null', async t => {\n  const app = Fastify();\n  t.teardown(app.close.bind(app));\n  app.get('/', () => null);\n  const res = await app.inject('/');\n  t.equal(res.statusCode, 200);\n  t.equal(res.body, 'null');\n});","file":"sync-routes.test.js","skipped":false,"dir":"test"},{"name":"sync route, error","suites":[],"updatePoint":{"line":25,"column":23,"index":579},"line":25,"code":"test('sync route, error', async t => {\n  const app = Fastify();\n  t.teardown(app.close.bind(app));\n  app.get('/', () => {\n    throw new Error('kaboom');\n  });\n  const res = await app.inject('/');\n  t.equal(res.statusCode, 500);\n});","file":"sync-routes.test.js","skipped":false,"dir":"test"},{"name":"Fastify should throw on wrong options","suites":[],"updatePoint":{"line":9,"column":43,"index":127},"line":9,"code":"test('Fastify should throw on wrong options', t => {\n  t.plan(2);\n\n  try {\n    Fastify('lol');\n    t.fail();\n  } catch (e) {\n    t.equal(e.message, 'Options must be an object');\n    t.pass();\n  }\n});","file":"throw.test.js","skipped":false,"dir":"test"},{"name":"Fastify should throw on multiple assignment to the same route","suites":[],"updatePoint":{"line":20,"column":67,"index":351},"line":20,"code":"test('Fastify should throw on multiple assignment to the same route', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  fastify.get('/', () => {});\n\n  try {\n    fastify.get('/', () => {});\n    t.fail('Should throw on duplicated route declaration');\n  } catch (error) {\n    t.equal(error.message, \"Method 'GET' already declared for route '/'\");\n  }\n});","file":"throw.test.js","skipped":false,"dir":"test"},{"name":"Fastify should throw for an invalid schema, printing the error route - headers","suites":[],"updatePoint":{"line":32,"column":84,"index":721},"line":32,"code":"test('Fastify should throw for an invalid schema, printing the error route - headers', t => {\n  t.plan(2);\n  const badSchema = {\n    type: 'object',\n    properties: {\n      bad: {\n        type: 'bad-type'\n      }\n    }\n  };\n  const fastify = Fastify();\n  fastify.get('/', {\n    schema: {\n      headers: badSchema\n    }\n  }, () => {});\n  fastify.get('/not-loaded', {\n    schema: {\n      headers: badSchema\n    }\n  }, () => {});\n  fastify.ready(err => {\n    t.equal(err.code, 'FST_ERR_SCH_VALIDATION_BUILD');\n    t.match(err.message, /Failed building the validation schema for GET: \\//);\n  });\n});","file":"throw.test.js","skipped":false,"dir":"test"},{"name":"Fastify should throw for an invalid schema, printing the error route - body","suites":[],"updatePoint":{"line":58,"column":81,"index":1314},"line":58,"code":"test('Fastify should throw for an invalid schema, printing the error route - body', t => {\n  t.plan(2);\n  const badSchema = {\n    type: 'object',\n    properties: {\n      bad: {\n        type: 'bad-type'\n      }\n    }\n  };\n  const fastify = Fastify();\n  fastify.register((instance, opts, done) => {\n    instance.post('/form', {\n      schema: {\n        body: badSchema\n      }\n    }, () => {});\n    done();\n  }, {\n    prefix: 'hello'\n  });\n  fastify.ready(err => {\n    t.equal(err.code, 'FST_ERR_SCH_VALIDATION_BUILD');\n    t.match(err.message, /Failed building the validation schema for POST: \\/hello\\/form/);\n  });\n});","file":"throw.test.js","skipped":false,"dir":"test"},{"name":"Fastify should throw for an invalid shorthand option type","suites":[],"updatePoint":{"line":84,"column":63,"index":1914},"line":84,"code":"test('Fastify should throw for an invalid shorthand option type', t => {\n  t.plan(3);\n\n  try {\n    Fastify({\n      jsonShorthand: 'hello'\n    });\n    t.fail();\n  } catch (e) {\n    t.equal(e.code, 'FST_ERR_INIT_OPTS_INVALID');\n    t.match(e.message, /must be boolean/);\n    t.pass();\n  }\n});","file":"throw.test.js","skipped":false,"dir":"test"},{"name":"Should throw on unsupported method","suites":[],"updatePoint":{"line":98,"column":40,"index":2182},"line":98,"code":"test('Should throw on unsupported method', t => {\n  t.plan(1);\n  const fastify = Fastify();\n\n  try {\n    fastify.route({\n      method: 'TROLL',\n      url: '/',\n      schema: {},\n      handler: function (req, reply) {}\n    });\n    t.fail();\n  } catch (e) {\n    t.pass();\n  }\n});","file":"throw.test.js","skipped":false,"dir":"test"},{"name":"Should throw on missing handler","suites":[],"updatePoint":{"line":114,"column":37,"index":2457},"line":114,"code":"test('Should throw on missing handler', t => {\n  t.plan(1);\n  const fastify = Fastify();\n\n  try {\n    fastify.route({\n      method: 'GET',\n      url: '/'\n    });\n    t.fail();\n  } catch (e) {\n    t.pass();\n  }\n});","file":"throw.test.js","skipped":false,"dir":"test"},{"name":"Should throw if one method is unsupported","suites":[],"updatePoint":{"line":128,"column":47,"index":2681},"line":128,"code":"test('Should throw if one method is unsupported', t => {\n  const fastify = Fastify();\n  t.plan(1);\n\n  try {\n    fastify.route({\n      method: ['GET', 'TROLL'],\n      url: '/',\n      schema: {},\n      handler: function (req, reply) {}\n    });\n    t.fail();\n  } catch (e) {\n    t.pass();\n  }\n});","file":"throw.test.js","skipped":false,"dir":"test"},{"name":"Should throw on duplicate content type parser","suites":[],"updatePoint":{"line":144,"column":51,"index":2979},"line":144,"code":"test('Should throw on duplicate content type parser', t => {\n  t.plan(1);\n  const fastify = Fastify();\n\n  function customParser(req, payload, done) {\n    done(null, '');\n  }\n\n  fastify.addContentTypeParser('application/qq', customParser);\n\n  try {\n    fastify.addContentTypeParser('application/qq', customParser);\n    t.fail();\n  } catch (e) {\n    t.pass();\n  }\n});","file":"throw.test.js","skipped":false,"dir":"test"},{"name":"Should throw on duplicate decorator","suites":[],"updatePoint":{"line":161,"column":41,"index":3335},"line":161,"code":"test('Should throw on duplicate decorator', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  const fooObj = {};\n  fastify.decorate('foo', fooObj);\n\n  try {\n    fastify.decorate('foo', fooObj);\n    t.fail();\n  } catch (e) {\n    t.pass();\n  }\n});","file":"throw.test.js","skipped":false,"dir":"test"},{"name":"Should not throw on duplicate decorator encapsulation","suites":[],"updatePoint":{"line":174,"column":59,"index":3600},"line":174,"code":"test('Should not throw on duplicate decorator encapsulation', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  const foo2Obj = {};\n  fastify.decorate('foo2', foo2Obj);\n  fastify.register(function (fastify, opts, done) {\n    t.doesNotThrow(() => {\n      fastify.decorate('foo2', foo2Obj);\n    });\n    done();\n  });\n  fastify.ready();\n});","file":"throw.test.js","skipped":false,"dir":"test"},{"name":"Should throw on duplicate request decorator","suites":[],"updatePoint":{"line":187,"column":49,"index":3929},"line":187,"code":"test('Should throw on duplicate request decorator', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  fastify.decorateRequest('foo', null);\n\n  try {\n    fastify.decorateRequest('foo', null);\n    t.fail();\n  } catch (e) {\n    t.equal(e.code, 'FST_ERR_DEC_ALREADY_PRESENT');\n    t.equal(e.message, 'The decorator \\'foo\\' has already been added!');\n  }\n});","file":"throw.test.js","skipped":false,"dir":"test"},{"name":"Should throw if request decorator dependencies are not met","suites":[],"updatePoint":{"line":200,"column":64,"index":4299},"line":200,"code":"test('Should throw if request decorator dependencies are not met', t => {\n  t.plan(2);\n  const fastify = Fastify();\n\n  try {\n    fastify.decorateRequest('bar', null, ['world']);\n    t.fail();\n  } catch (e) {\n    t.equal(e.code, 'FST_ERR_DEC_MISSING_DEPENDENCY');\n    t.equal(e.message, 'The decorator is missing dependency \\'world\\'.');\n  }\n});","file":"throw.test.js","skipped":false,"dir":"test"},{"name":"Should throw on duplicate reply decorator","suites":[],"updatePoint":{"line":212,"column":47,"index":4627},"line":212,"code":"test('Should throw on duplicate reply decorator', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  fastify.decorateReply('foo', null);\n\n  try {\n    fastify.decorateReply('foo', null);\n    t.fail();\n  } catch (e) {\n    t.ok(/has already been added/.test(e.message));\n  }\n});","file":"throw.test.js","skipped":false,"dir":"test"},{"name":"Should throw if reply decorator dependencies are not met","suites":[],"updatePoint":{"line":224,"column":62,"index":4918},"line":224,"code":"test('Should throw if reply decorator dependencies are not met', t => {\n  t.plan(1);\n  const fastify = Fastify();\n\n  try {\n    fastify.decorateReply('bar', null, ['world']);\n    t.fail();\n  } catch (e) {\n    t.ok(/missing dependency/.test(e.message));\n  }\n});","file":"throw.test.js","skipped":false,"dir":"test"},{"name":"Should throw if handler as the third parameter to the shortcut method is missing and the second parameter is not a function and also not an object","suites":[],"updatePoint":{"line":235,"column":152,"index":5268},"line":235,"code":"test('Should throw if handler as the third parameter to the shortcut method is missing and the second parameter is not a function and also not an object', t => {\n  t.plan(5);\n  const fastify = Fastify();\n\n  try {\n    fastify.get('/foo/1', '');\n    t.fail();\n  } catch (e) {\n    t.pass();\n  }\n\n  try {\n    fastify.get('/foo/2', 1);\n    t.fail();\n  } catch (e) {\n    t.pass();\n  }\n\n  try {\n    fastify.get('/foo/3', []);\n    t.fail();\n  } catch (e) {\n    t.pass();\n  }\n\n  try {\n    fastify.get('/foo/4', undefined);\n    t.fail();\n  } catch (e) {\n    t.pass();\n  }\n\n  try {\n    fastify.get('/foo/5', null);\n    t.fail();\n  } catch (e) {\n    t.pass();\n  }\n});","file":"throw.test.js","skipped":false,"dir":"test"},{"name":"Should throw if handler as the third parameter to the shortcut method is missing and the second parameter is not a function and also not an object","suites":[],"updatePoint":{"line":274,"column":152,"index":5924},"line":274,"code":"test('Should throw if handler as the third parameter to the shortcut method is missing and the second parameter is not a function and also not an object', t => {\n  t.plan(5);\n  const fastify = Fastify();\n\n  try {\n    fastify.get('/foo/1', '');\n    t.fail();\n  } catch (e) {\n    t.pass();\n  }\n\n  try {\n    fastify.get('/foo/2', 1);\n    t.fail();\n  } catch (e) {\n    t.pass();\n  }\n\n  try {\n    fastify.get('/foo/3', []);\n    t.fail();\n  } catch (e) {\n    t.pass();\n  }\n\n  try {\n    fastify.get('/foo/4', undefined);\n    t.fail();\n  } catch (e) {\n    t.pass();\n  }\n\n  try {\n    fastify.get('/foo/5', null);\n    t.fail();\n  } catch (e) {\n    t.pass();\n  }\n});","file":"throw.test.js","skipped":false,"dir":"test"},{"name":"Should throw if there is handler function as the third parameter to the shortcut method and options as the second parameter is not an object","suites":[],"updatePoint":{"line":313,"column":146,"index":6574},"line":313,"code":"test('Should throw if there is handler function as the third parameter to the shortcut method and options as the second parameter is not an object', t => {\n  t.plan(5);\n  const fastify = Fastify();\n\n  try {\n    fastify.get('/foo/1', '', (req, res) => {});\n    t.fail();\n  } catch (e) {\n    t.pass();\n  }\n\n  try {\n    fastify.get('/foo/2', 1, (req, res) => {});\n    t.fail();\n  } catch (e) {\n    t.pass();\n  }\n\n  try {\n    fastify.get('/foo/3', [], (req, res) => {});\n    t.fail();\n  } catch (e) {\n    t.pass();\n  }\n\n  try {\n    fastify.get('/foo/4', undefined, (req, res) => {});\n    t.fail();\n  } catch (e) {\n    t.pass();\n  }\n\n  try {\n    fastify.get('/foo/5', null, (req, res) => {});\n    t.fail();\n  } catch (e) {\n    t.pass();\n  }\n});","file":"throw.test.js","skipped":false,"dir":"test"},{"name":"Should throw if found duplicate handler as the third parameter to the shortcut method and in options","suites":[],"updatePoint":{"line":352,"column":106,"index":7274},"line":352,"code":"test('Should throw if found duplicate handler as the third parameter to the shortcut method and in options', t => {\n  t.plan(1);\n  const fastify = Fastify();\n\n  try {\n    fastify.get('/foo/abc', {\n      handler: (req, res) => {}\n    }, (req, res) => {});\n    t.fail();\n  } catch (e) {\n    t.pass();\n  }\n});","file":"throw.test.js","skipped":false,"dir":"test"},{"name":"shorthand - trace","suites":[],"updatePoint":{"line":9,"column":23,"index":122},"line":9,"code":"test('shorthand - trace', t => {\n  t.plan(1);\n\n  try {\n    fastify.route({\n      method: 'TRACE',\n      url: '/',\n      handler: function (request, reply) {\n        reply.code(200).send('TRACE OK');\n      }\n    });\n    t.pass();\n  } catch (e) {\n    t.fail();\n  }\n});","file":"trace.test.js","skipped":false,"dir":"test"},{"name":"trust proxy, not add properties to node req","suites":[],"updatePoint":{"line":59,"column":49,"index":1325},"line":59,"code":"test('trust proxy, not add properties to node req', t => {\n  t.plan(8);\n  const app = fastify({\n    trustProxy: true\n  });\n  app.get('/trustproxy', function (req, reply) {\n    testRequestValues(t, req, {\n      ip: '1.1.1.1',\n      hostname: 'example.com'\n    });\n    reply.code(200).send({\n      ip: req.ip,\n      hostname: req.hostname\n    });\n  });\n  app.get('/trustproxychain', function (req, reply) {\n    testRequestValues(t, req, {\n      ip: '2.2.2.2',\n      ips: [localhost, '1.1.1.1', '2.2.2.2']\n    });\n    reply.code(200).send({\n      ip: req.ip,\n      hostname: req.hostname\n    });\n  });\n  t.teardown(app.close.bind(app));\n  app.listen({\n    port: 0\n  }, err => {\n    app.server.unref();\n    t.error(err);\n    sgetForwardedRequest(app, '1.1.1.1', '/trustproxy');\n    sgetForwardedRequest(app, '2.2.2.2, 1.1.1.1', '/trustproxychain');\n  });\n});","file":"trust-proxy.test.js","skipped":false,"dir":"test"},{"name":"trust proxy chain","suites":[],"updatePoint":{"line":94,"column":23,"index":2154},"line":94,"code":"test('trust proxy chain', t => {\n  t.plan(3);\n  const app = fastify({\n    trustProxy: [localhost, '192.168.1.1']\n  });\n  app.get('/trustproxychain', function (req, reply) {\n    testRequestValues(t, req, {\n      ip: '1.1.1.1'\n    });\n    reply.code(200).send({\n      ip: req.ip,\n      hostname: req.hostname\n    });\n  });\n  t.teardown(app.close.bind(app));\n  app.listen({\n    port: 0\n  }, err => {\n    app.server.unref();\n    t.error(err);\n    sgetForwardedRequest(app, '192.168.1.1, 1.1.1.1', '/trustproxychain');\n  });\n});","file":"trust-proxy.test.js","skipped":false,"dir":"test"},{"name":"trust proxy function","suites":[],"updatePoint":{"line":117,"column":26,"index":2681},"line":117,"code":"test('trust proxy function', t => {\n  t.plan(3);\n  const app = fastify({\n    trustProxy: address => address === localhost\n  });\n  app.get('/trustproxyfunc', function (req, reply) {\n    testRequestValues(t, req, {\n      ip: '1.1.1.1'\n    });\n    reply.code(200).send({\n      ip: req.ip,\n      hostname: req.hostname\n    });\n  });\n  t.teardown(app.close.bind(app));\n  app.listen({\n    port: 0\n  }, err => {\n    app.server.unref();\n    t.error(err);\n    sgetForwardedRequest(app, '1.1.1.1', '/trustproxyfunc');\n  });\n});","file":"trust-proxy.test.js","skipped":false,"dir":"test"},{"name":"trust proxy number","suites":[],"updatePoint":{"line":140,"column":24,"index":3197},"line":140,"code":"test('trust proxy number', t => {\n  t.plan(4);\n  const app = fastify({\n    trustProxy: 1\n  });\n  app.get('/trustproxynumber', function (req, reply) {\n    testRequestValues(t, req, {\n      ip: '1.1.1.1',\n      ips: [localhost, '1.1.1.1']\n    });\n    reply.code(200).send({\n      ip: req.ip,\n      hostname: req.hostname\n    });\n  });\n  t.teardown(app.close.bind(app));\n  app.listen({\n    port: 0\n  }, err => {\n    app.server.unref();\n    t.error(err);\n    sgetForwardedRequest(app, '2.2.2.2, 1.1.1.1', '/trustproxynumber');\n  });\n});","file":"trust-proxy.test.js","skipped":false,"dir":"test"},{"name":"trust proxy IP addresses","suites":[],"updatePoint":{"line":164,"column":30,"index":3736},"line":164,"code":"test('trust proxy IP addresses', t => {\n  t.plan(4);\n  const app = fastify({\n    trustProxy: `${localhost}, 2.2.2.2`\n  });\n  app.get('/trustproxyipaddrs', function (req, reply) {\n    testRequestValues(t, req, {\n      ip: '1.1.1.1',\n      ips: [localhost, '1.1.1.1']\n    });\n    reply.code(200).send({\n      ip: req.ip,\n      hostname: req.hostname\n    });\n  });\n  t.teardown(app.close.bind(app));\n  app.listen({\n    port: 0\n  }, err => {\n    app.server.unref();\n    t.error(err);\n    sgetForwardedRequest(app, '3.3.3.3, 2.2.2.2, 1.1.1.1', '/trustproxyipaddrs');\n  });\n});","file":"trust-proxy.test.js","skipped":false,"dir":"test"},{"name":"trust proxy protocol","suites":[],"updatePoint":{"line":188,"column":26,"index":4304},"line":188,"code":"test('trust proxy protocol', t => {\n  t.plan(13);\n  const app = fastify({\n    trustProxy: true\n  });\n  app.get('/trustproxyprotocol', function (req, reply) {\n    testRequestValues(t, req, {\n      ip: '1.1.1.1',\n      protocol: 'lorem'\n    });\n    reply.code(200).send({\n      ip: req.ip,\n      hostname: req.hostname\n    });\n  });\n  app.get('/trustproxynoprotocol', function (req, reply) {\n    testRequestValues(t, req, {\n      ip: '1.1.1.1',\n      protocol: 'http'\n    });\n    reply.code(200).send({\n      ip: req.ip,\n      hostname: req.hostname\n    });\n  });\n  app.get('/trustproxyprotocols', function (req, reply) {\n    testRequestValues(t, req, {\n      ip: '1.1.1.1',\n      protocol: 'dolor'\n    });\n    reply.code(200).send({\n      ip: req.ip,\n      hostname: req.hostname\n    });\n  });\n  t.teardown(app.close.bind(app));\n  app.listen({\n    port: 0\n  }, err => {\n    app.server.unref();\n    t.error(err);\n    sgetForwardedRequest(app, '1.1.1.1', '/trustproxyprotocol', 'lorem');\n    sgetForwardedRequest(app, '1.1.1.1', '/trustproxynoprotocol');\n    sgetForwardedRequest(app, '1.1.1.1', '/trustproxyprotocols', 'ipsum, dolor');\n  });\n});","file":"trust-proxy.test.js","skipped":false,"dir":"test"},{"name":"Should export withTypeProvider function","suites":[],"updatePoint":{"line":9,"column":45,"index":129},"line":9,"code":"test('Should export withTypeProvider function', t => {\n  t.plan(1);\n\n  try {\n    Fastify().withTypeProvider();\n    t.pass();\n  } catch (e) {\n    t.fail();\n  }\n});","file":"type-provider.test.js","skipped":false,"dir":"test"},{"name":"Should return same instance","suites":[],"updatePoint":{"line":19,"column":33,"index":280},"line":19,"code":"test('Should return same instance', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  t.equal(fastify, fastify.withTypeProvider());\n});","file":"type-provider.test.js","skipped":false,"dir":"test"},{"name":"can be created - unlock","suites":[],"updatePoint":{"line":11,"column":29,"index":172},"line":11,"code":"test('can be created - unlock', t => {\n  t.plan(1);\n\n  try {\n    fastify.route({\n      method: 'UNLOCK',\n      url: '*',\n      handler: function (req, reply) {\n        reply.code(204).send();\n      }\n    });\n    t.pass();\n  } catch (e) {\n    t.fail();\n  }\n});","file":"unlock.test.js","skipped":false,"dir":"test"},{"name":"request - unlock","suites":[],"updatePoint":{"line":34,"column":24,"index":530},"line":34,"code":"  test('request - unlock', t => {\n    t.plan(2);\n    sget({\n      url: `http://localhost:${fastify.server.address().port}/test/a.txt`,\n      method: 'UNLOCK',\n      headers: {\n        'Lock-Token': 'urn:uuid:a515cfa4-5da4-22e1-f5b5-00a0451e6bf7'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 204);\n    });\n  });","file":"unlock.test.js","skipped":false,"dir":"test"},{"name":"upgrade to both servers","suites":[],"updatePoint":{"line":32,"column":31,"index":428},"line":32,"code":"  test('upgrade to both servers', async t => {\n    t.plan(2);\n    const app = Fastify();\n    app.server.on('upgrade', (req, socket, head) => {\n      t.pass(`upgrade event ${JSON.stringify(socket.address())}`);\n      socket.end();\n    });\n    app.get('/', (req, res) => {});\n    await app.listen();\n    t.teardown(app.close.bind(app));\n    {\n      const client = connect(app.server.address().port, '127.0.0.1');\n      client.write('GET / HTTP/1.1\\r\\n');\n      client.write('Upgrade: websocket\\r\\n');\n      client.write('Connection: Upgrade\\r\\n');\n      client.write('Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==\\r\\n');\n      client.write('Sec-WebSocket-Protocol: com.xxx.service.v1\\r\\n');\n      client.write('Sec-WebSocket-Version: 13\\r\\n\\r\\n');\n      client.write('\\r\\n\\r\\n');\n      await once(client, 'close');\n    }\n    {\n      const client = connect(app.server.address().port, '::1');\n      client.write('GET / HTTP/1.1\\r\\n');\n      client.write('Upgrade: websocket\\r\\n');\n      client.write('Connection: Upgrade\\r\\n');\n      client.write('Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==\\r\\n');\n      client.write('Sec-WebSocket-Protocol: com.xxx.service.v1\\r\\n');\n      client.write('Sec-WebSocket-Version: 13\\r\\n\\r\\n');\n      await once(client, 'close');\n    }\n  });","file":"upgrade.test.js","skipped":false,"dir":"test"},{"name":"Should rewrite url","suites":[],"updatePoint":{"line":11,"column":24,"index":165},"line":11,"code":"test('Should rewrite url', t => {\n  t.plan(5);\n  const fastify = Fastify({\n    rewriteUrl(req) {\n      t.equal(req.url, '/this-would-404-without-url-rewrite');\n      return '/';\n    }\n\n  });\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    handler: (req, reply) => {\n      reply.send({\n        hello: 'world'\n      });\n    }\n  });\n  fastify.listen({\n    port: 0\n  }, function (err) {\n    t.error(err);\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/this-would-404-without-url-rewrite'\n    }, (err, response, body) => {\n      t.error(err);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n      t.equal(response.statusCode, 200);\n    });\n  });\n  t.teardown(() => fastify.close());\n});","file":"url-rewriting.test.js","skipped":false,"dir":"test"},{"name":"Should not rewrite if the url is the same","suites":[],"updatePoint":{"line":46,"column":47,"index":947},"line":46,"code":"test('Should not rewrite if the url is the same', t => {\n  t.plan(4);\n  const fastify = Fastify({\n    rewriteUrl(req) {\n      t.equal(req.url, '/this-would-404-without-url-rewrite');\n      return req.url;\n    }\n\n  });\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    handler: (req, reply) => {\n      reply.send({\n        hello: 'world'\n      });\n    }\n  });\n  fastify.listen({\n    port: 0\n  }, function (err) {\n    t.error(err);\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/this-would-404-without-url-rewrite'\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 404);\n    });\n  });\n  t.teardown(() => fastify.close());\n});","file":"url-rewriting.test.js","skipped":false,"dir":"test"},{"name":"Should throw an error","suites":[],"updatePoint":{"line":78,"column":27,"index":1647},"line":78,"code":"test('Should throw an error', t => {\n  t.plan(5);\n  const fastify = Fastify({\n    rewriteUrl(req) {\n      t.equal(req.url, '/this-would-404-without-url-rewrite');\n      return undefined;\n    }\n\n  });\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    handler: (req, reply) => {\n      reply.send({\n        hello: 'world'\n      });\n    }\n  });\n  fastify.listen({\n    port: 0\n  }, function (err) {\n    t.error(err);\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port + '/this-would-404-without-url-rewrite'\n    }, (err, response, body) => {\n      t.equal(err.code, 'ECONNRESET');\n      t.equal(response, undefined);\n      t.equal(body, undefined);\n    });\n  });\n  t.teardown(() => fastify.close());\n});","file":"url-rewriting.test.js","skipped":false,"dir":"test"},{"name":"should work with valid payload","suites":[],"updatePoint":{"line":30,"column":36,"index":425},"line":30,"code":"test('should work with valid payload', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.post('/', {\n    schema\n  }, echoBody);\n  fastify.inject({\n    method: 'POST',\n    payload: {\n      name: 'michelangelo',\n      work: 'sculptor, painter, architect and poet'\n    },\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.same(res.payload, 'michelangelo');\n    t.equal(res.statusCode, 200);\n  });\n});","file":"validation-error-handling.test.js","skipped":false,"dir":"test"},{"name":"should fail immediately with invalid payload","suites":[],"updatePoint":{"line":49,"column":50,"index":854},"line":49,"code":"test('should fail immediately with invalid payload', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.post('/', {\n    schema\n  }, echoBody);\n  fastify.inject({\n    method: 'POST',\n    payload: {\n      hello: 'michelangelo'\n    },\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.same(res.json(), {\n      statusCode: 400,\n      error: 'Bad Request',\n      message: \"body must have required property 'name'\"\n    });\n    t.equal(res.statusCode, 400);\n  });\n});","file":"validation-error-handling.test.js","skipped":false,"dir":"test"},{"name":"should be able to use setErrorHandler specify custom validation error","suites":[],"updatePoint":{"line":71,"column":75,"index":1356},"line":71,"code":"test('should be able to use setErrorHandler specify custom validation error', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.post('/', {\n    schema\n  }, function (req, reply) {\n    t.fail('should not be here');\n    reply.code(200).send(req.body.name);\n  });\n  fastify.setErrorHandler(function (error, request, reply) {\n    if (error.validation) {\n      reply.status(422).send(new Error('validation failed'));\n    }\n  });\n  fastify.inject({\n    method: 'POST',\n    payload: {\n      hello: 'michelangelo'\n    },\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      statusCode: 422,\n      error: 'Unprocessable Entity',\n      message: 'validation failed'\n    });\n    t.equal(res.statusCode, 422);\n  });\n});","file":"validation-error-handling.test.js","skipped":false,"dir":"test"},{"name":"validation error has 400 statusCode set","suites":[],"updatePoint":{"line":101,"column":45,"index":2085},"line":101,"code":"test('validation error has 400 statusCode set', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.setErrorHandler((error, request, reply) => {\n    const errorResponse = {\n      message: error.message,\n      statusCode: error.statusCode || 500\n    };\n    reply.code(errorResponse.statusCode).send(errorResponse);\n  });\n  fastify.post('/', {\n    schema\n  }, echoBody);\n  fastify.inject({\n    method: 'POST',\n    payload: {\n      hello: 'michelangelo'\n    },\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.same(res.json(), {\n      statusCode: 400,\n      message: \"body must have required property 'name'\"\n    });\n    t.equal(res.statusCode, 400);\n  });\n});","file":"validation-error-handling.test.js","skipped":false,"dir":"test"},{"name":"error inside custom error handler should have validationContext","suites":[],"updatePoint":{"line":129,"column":69,"index":2783},"line":129,"code":"test('error inside custom error handler should have validationContext', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  fastify.post('/', {\n    schema,\n    validatorCompiler: ({\n      schema,\n      method,\n      url,\n      httpPart\n    }) => {\n      return function (data) {\n        return {\n          error: new Error('this failed')\n        };\n      };\n    }\n  }, function (req, reply) {\n    t.fail('should not be here');\n    reply.code(200).send(req.body.name);\n  });\n  fastify.setErrorHandler(function (error, request, reply) {\n    t.equal(error.validationContext, 'body');\n    reply.status(500).send(error);\n  });\n  fastify.inject({\n    method: 'POST',\n    payload: {\n      name: 'michelangelo',\n      work: 'artist'\n    },\n    url: '/'\n  }, () => {});\n});","file":"validation-error-handling.test.js","skipped":false,"dir":"test"},{"name":"error inside custom error handler should have validationContext if specified by custom error handler","suites":[],"updatePoint":{"line":163,"column":106,"index":3584},"line":163,"code":"test('error inside custom error handler should have validationContext if specified by custom error handler', t => {\n  t.plan(1);\n  const fastify = Fastify();\n  fastify.post('/', {\n    schema,\n    validatorCompiler: ({\n      schema,\n      method,\n      url,\n      httpPart\n    }) => {\n      return function (data) {\n        const error = new Error('this failed');\n        error.validationContext = 'customContext';\n        return {\n          error\n        };\n      };\n    }\n  }, function (req, reply) {\n    t.fail('should not be here');\n    reply.code(200).send(req.body.name);\n  });\n  fastify.setErrorHandler(function (error, request, reply) {\n    t.equal(error.validationContext, 'customContext');\n    reply.status(500).send(error);\n  });\n  fastify.inject({\n    method: 'POST',\n    payload: {\n      name: 'michelangelo',\n      work: 'artist'\n    },\n    url: '/'\n  }, () => {});\n});","file":"validation-error-handling.test.js","skipped":false,"dir":"test"},{"name":"should be able to attach validation to request","suites":[],"updatePoint":{"line":199,"column":52,"index":4413},"line":199,"code":"test('should be able to attach validation to request', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.post('/', {\n    schema,\n    attachValidation: true\n  }, function (req, reply) {\n    reply.code(400).send(req.validationError.validation);\n  });\n  fastify.inject({\n    method: 'POST',\n    payload: {\n      hello: 'michelangelo'\n    },\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.same(res.json(), [{\n      keyword: 'required',\n      instancePath: '',\n      schemaPath: '#/required',\n      params: {\n        missingProperty: 'name'\n      },\n      message: 'must have required property \\'name\\''\n    }]);\n    t.equal(res.statusCode, 400);\n  });\n});","file":"validation-error-handling.test.js","skipped":false,"dir":"test"},{"name":"should respect when attachValidation is explicitly set to false","suites":[],"updatePoint":{"line":228,"column":69,"index":5102},"line":228,"code":"test('should respect when attachValidation is explicitly set to false', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.post('/', {\n    schema,\n    attachValidation: false\n  }, function (req, reply) {\n    t.fail('should not be here');\n    reply.code(200).send(req.validationError.validation);\n  });\n  fastify.inject({\n    method: 'POST',\n    payload: {\n      hello: 'michelangelo'\n    },\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      statusCode: 400,\n      error: 'Bad Request',\n      message: \"body must have required property 'name'\"\n    });\n    t.equal(res.statusCode, 400);\n  });\n});","file":"validation-error-handling.test.js","skipped":false,"dir":"test"},{"name":"Attached validation error should take precedence over setErrorHandler","suites":[],"updatePoint":{"line":254,"column":75,"index":5757},"line":254,"code":"test('Attached validation error should take precedence over setErrorHandler', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.post('/', {\n    schema,\n    attachValidation: true\n  }, function (req, reply) {\n    reply.code(400).send('Attached: ' + req.validationError);\n  });\n  fastify.setErrorHandler(function (error, request, reply) {\n    t.fail('should not be here');\n\n    if (error.validation) {\n      reply.status(422).send(new Error('validation failed'));\n    }\n  });\n  fastify.inject({\n    method: 'POST',\n    payload: {\n      hello: 'michelangelo'\n    },\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.same(res.payload, \"Attached: Error: body must have required property 'name'\");\n    t.equal(res.statusCode, 400);\n  });\n});","file":"validation-error-handling.test.js","skipped":false,"dir":"test"},{"name":"should handle response validation error","suites":[],"updatePoint":{"line":282,"column":45,"index":6480},"line":282,"code":"test('should handle response validation error', t => {\n  t.plan(2);\n  const response = {\n    200: {\n      type: 'object',\n      required: ['name', 'work'],\n      properties: {\n        name: {\n          type: 'string'\n        },\n        work: {\n          type: 'string'\n        }\n      }\n    }\n  };\n  const fastify = Fastify();\n  fastify.get('/', {\n    schema: {\n      response\n    }\n  }, function (req, reply) {\n    try {\n      reply.code(200).send({\n        work: 'actor'\n      });\n    } catch (error) {\n      reply.code(500).send(error);\n    }\n  });\n  fastify.inject({\n    method: 'GET',\n    payload: {},\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.payload, '{\"statusCode\":500,\"error\":\"Internal Server Error\",\"message\":\"\\\\\"name\\\\\" is required!\"}');\n  });\n});","file":"validation-error-handling.test.js","skipped":false,"dir":"test"},{"name":"should handle response validation error with promises","suites":[],"updatePoint":{"line":321,"column":59,"index":7279},"line":321,"code":"test('should handle response validation error with promises', t => {\n  t.plan(2);\n  const response = {\n    200: {\n      type: 'object',\n      required: ['name', 'work'],\n      properties: {\n        name: {\n          type: 'string'\n        },\n        work: {\n          type: 'string'\n        }\n      }\n    }\n  };\n  const fastify = Fastify();\n  fastify.get('/', {\n    schema: {\n      response\n    }\n  }, function (req, reply) {\n    return Promise.resolve({\n      work: 'actor'\n    });\n  });\n  fastify.inject({\n    method: 'GET',\n    payload: {},\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.payload, '{\"statusCode\":500,\"error\":\"Internal Server Error\",\"message\":\"\\\\\"name\\\\\" is required!\"}');\n  });\n});","file":"validation-error-handling.test.js","skipped":false,"dir":"test"},{"name":"should return a defined output message parsing AJV errors","suites":[],"updatePoint":{"line":356,"column":63,"index":8005},"line":356,"code":"test('should return a defined output message parsing AJV errors', t => {\n  t.plan(2);\n  const body = {\n    type: 'object',\n    required: ['name', 'work'],\n    properties: {\n      name: {\n        type: 'string'\n      },\n      work: {\n        type: 'string'\n      }\n    }\n  };\n  const fastify = Fastify();\n  fastify.post('/', {\n    schema: {\n      body\n    }\n  }, function (req, reply) {\n    t.fail();\n  });\n  fastify.inject({\n    method: 'POST',\n    payload: {},\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.payload, '{\"statusCode\":400,\"error\":\"Bad Request\",\"message\":\"body must have required property \\'name\\'\"}');\n  });\n});","file":"validation-error-handling.test.js","skipped":false,"dir":"test"},{"name":"should return a defined output message parsing JOI errors","suites":[],"updatePoint":{"line":387,"column":63,"index":8653},"line":387,"code":"test('should return a defined output message parsing JOI errors', t => {\n  t.plan(2);\n  const body = Joi.object().keys({\n    name: Joi.string().required(),\n    work: Joi.string().required()\n  }).required();\n  const fastify = Fastify();\n  fastify.post('/', {\n    schema: {\n      body\n    },\n    validatorCompiler: ({\n      schema,\n      method,\n      url,\n      httpPart\n    }) => {\n      return data => schema.validate(data);\n    }\n  }, function (req, reply) {\n    t.fail();\n  });\n  fastify.inject({\n    method: 'POST',\n    payload: {},\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.payload, '{\"statusCode\":400,\"error\":\"Bad Request\",\"message\":\"\\\\\"name\\\\\" is required\"}');\n  });\n});","file":"validation-error-handling.test.js","skipped":false,"dir":"test"},{"name":"should return a defined output message parsing JOI error details","suites":[],"updatePoint":{"line":418,"column":70,"index":9364},"line":418,"code":"test('should return a defined output message parsing JOI error details', t => {\n  t.plan(2);\n  const body = Joi.object().keys({\n    name: Joi.string().required(),\n    work: Joi.string().required()\n  }).required();\n  const fastify = Fastify();\n  fastify.post('/', {\n    schema: {\n      body\n    },\n    validatorCompiler: ({\n      schema,\n      method,\n      url,\n      httpPart\n    }) => {\n      return data => {\n        const validation = schema.validate(data);\n        return {\n          error: validation.error.details\n        };\n      };\n    }\n  }, function (req, reply) {\n    t.fail();\n  });\n  fastify.inject({\n    method: 'POST',\n    payload: {},\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.payload, '{\"statusCode\":400,\"error\":\"Bad Request\",\"message\":\"body \\\\\"name\\\\\" is required\"}');\n  });\n});","file":"validation-error-handling.test.js","skipped":false,"dir":"test"},{"name":"the custom error formatter context must be the server instance","suites":[],"updatePoint":{"line":454,"column":68,"index":10186},"line":454,"code":"test('the custom error formatter context must be the server instance', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.setSchemaErrorFormatter(function (errors, dataVar) {\n    t.same(this, fastify);\n    return new Error('my error');\n  });\n  fastify.post('/', {\n    schema\n  }, echoBody);\n  fastify.inject({\n    method: 'POST',\n    payload: {\n      hello: 'michelangelo'\n    },\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.same(res.json(), {\n      statusCode: 400,\n      error: 'Bad Request',\n      message: 'my error'\n    });\n    t.equal(res.statusCode, 400);\n  });\n});","file":"validation-error-handling.test.js","skipped":false,"dir":"test"},{"name":"the custom error formatter context must be the server instance in options","suites":[],"updatePoint":{"line":480,"column":79,"index":10791},"line":480,"code":"test('the custom error formatter context must be the server instance in options', t => {\n  t.plan(4);\n  const fastify = Fastify({\n    schemaErrorFormatter: function (errors, dataVar) {\n      t.same(this, fastify);\n      return new Error('my error');\n    }\n  });\n  fastify.post('/', {\n    schema\n  }, echoBody);\n  fastify.inject({\n    method: 'POST',\n    payload: {\n      hello: 'michelangelo'\n    },\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.same(res.json(), {\n      statusCode: 400,\n      error: 'Bad Request',\n      message: 'my error'\n    });\n    t.equal(res.statusCode, 400);\n  });\n});","file":"validation-error-handling.test.js","skipped":false,"dir":"test"},{"name":"should call custom error formatter","suites":[],"updatePoint":{"line":507,"column":40,"index":11358},"line":507,"code":"test('should call custom error formatter', t => {\n  t.plan(9);\n  const fastify = Fastify({\n    schemaErrorFormatter: (errors, dataVar) => {\n      t.equal(errors.length, 1);\n      t.equal(errors[0].message, \"must have required property 'name'\");\n      t.equal(errors[0].keyword, 'required');\n      t.equal(errors[0].schemaPath, '#/required');\n      t.same(errors[0].params, {\n        missingProperty: 'name'\n      });\n      t.equal(dataVar, 'body');\n      return new Error('my error');\n    }\n  });\n  fastify.post('/', {\n    schema\n  }, echoBody);\n  fastify.inject({\n    method: 'POST',\n    payload: {\n      hello: 'michelangelo'\n    },\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.same(res.json(), {\n      statusCode: 400,\n      error: 'Bad Request',\n      message: 'my error'\n    });\n    t.equal(res.statusCode, 400);\n  });\n});","file":"validation-error-handling.test.js","skipped":false,"dir":"test"},{"name":"should catch error inside formatter and return message","suites":[],"updatePoint":{"line":541,"column":60,"index":12219},"line":541,"code":"test('should catch error inside formatter and return message', t => {\n  t.plan(3);\n  const fastify = Fastify({\n    schemaErrorFormatter: (errors, dataVar) => {\n      throw new Error('abc');\n    }\n  });\n  fastify.post('/', {\n    schema\n  }, echoBody);\n  fastify.inject({\n    method: 'POST',\n    payload: {\n      hello: 'michelangelo'\n    },\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.same(res.json(), {\n      statusCode: 500,\n      error: 'Internal Server Error',\n      message: 'abc'\n    });\n    t.equal(res.statusCode, 500);\n    t.end();\n  });\n});","file":"validation-error-handling.test.js","skipped":false,"dir":"test"},{"name":"cannot create a fastify instance with wrong type of errorFormatter","suites":[],"updatePoint":{"line":568,"column":72,"index":12795},"line":568,"code":"test('cannot create a fastify instance with wrong type of errorFormatter', t => {\n  t.plan(3);\n\n  try {\n    Fastify({\n      schemaErrorFormatter: async (errors, dataVar) => {\n        return new Error('should not execute');\n      }\n    });\n  } catch (err) {\n    t.equal(err.message, 'schemaErrorFormatter option should not be an async function');\n  }\n\n  try {\n    Fastify({\n      schemaErrorFormatter: 500\n    });\n  } catch (err) {\n    t.equal(err.message, 'schemaErrorFormatter option should be a function, instead got number');\n  }\n\n  try {\n    const fastify = Fastify();\n    fastify.setSchemaErrorFormatter(500);\n  } catch (err) {\n    t.equal(err.message, 'schemaErrorFormatter option should be a function, instead got number');\n  }\n});","file":"validation-error-handling.test.js","skipped":false,"dir":"test"},{"name":"should register a route based schema error formatter","suites":[],"updatePoint":{"line":596,"column":58,"index":13520},"line":596,"code":"test('should register a route based schema error formatter', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.post('/', {\n    schema,\n    schemaErrorFormatter: (errors, dataVar) => {\n      return new Error('abc');\n    }\n  }, echoBody);\n  fastify.inject({\n    method: 'POST',\n    payload: {\n      hello: 'michelangelo'\n    },\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.same(res.json(), {\n      statusCode: 400,\n      error: 'Bad Request',\n      message: 'abc'\n    });\n    t.equal(res.statusCode, 400);\n    t.end();\n  });\n});","file":"validation-error-handling.test.js","skipped":false,"dir":"test"},{"name":"prefer route based error formatter over global one","suites":[],"updatePoint":{"line":622,"column":56,"index":14067},"line":622,"code":"test('prefer route based error formatter over global one', t => {\n  t.plan(9);\n  const fastify = Fastify({\n    schemaErrorFormatter: (errors, dataVar) => {\n      return new Error('abc123');\n    }\n  });\n  fastify.post('/', {\n    schema,\n    schemaErrorFormatter: (errors, dataVar) => {\n      return new Error('123');\n    }\n  }, echoBody);\n  fastify.post('/abc', {\n    schema,\n    schemaErrorFormatter: (errors, dataVar) => {\n      return new Error('abc');\n    }\n  }, echoBody);\n  fastify.post('/test', {\n    schema\n  }, echoBody);\n  fastify.inject({\n    method: 'POST',\n    payload: {\n      hello: 'michelangelo'\n    },\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.same(res.json(), {\n      statusCode: 400,\n      error: 'Bad Request',\n      message: '123'\n    });\n    t.equal(res.statusCode, 400);\n  });\n  fastify.inject({\n    method: 'POST',\n    payload: {\n      hello: 'michelangelo'\n    },\n    url: '/abc'\n  }, (err, res) => {\n    t.error(err);\n    t.same(res.json(), {\n      statusCode: 400,\n      error: 'Bad Request',\n      message: 'abc'\n    });\n    t.equal(res.statusCode, 400);\n  });\n  fastify.inject({\n    method: 'POST',\n    payload: {\n      hello: 'michelangelo'\n    },\n    url: '/test'\n  }, (err, res) => {\n    t.error(err);\n    t.same(res.json(), {\n      statusCode: 400,\n      error: 'Bad Request',\n      message: 'abc123'\n    });\n    t.equal(res.statusCode, 400);\n  });\n});","file":"validation-error-handling.test.js","skipped":false,"dir":"test"},{"name":"adding schemaErrorFormatter","suites":[],"updatePoint":{"line":690,"column":33,"index":15446},"line":690,"code":"test('adding schemaErrorFormatter', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.setSchemaErrorFormatter((errors, dataVar) => {\n    return new Error('abc');\n  });\n  fastify.post('/', {\n    schema\n  }, echoBody);\n  fastify.inject({\n    method: 'POST',\n    payload: {\n      hello: 'michelangelo'\n    },\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.same(res.json(), {\n      statusCode: 400,\n      error: 'Bad Request',\n      message: 'abc'\n    });\n    t.equal(res.statusCode, 400);\n    t.end();\n  });\n});","file":"validation-error-handling.test.js","skipped":false,"dir":"test"},{"name":"plugin override","suites":[],"updatePoint":{"line":716,"column":21,"index":15963},"line":716,"code":"test('plugin override', t => {\n  t.plan(15);\n  const fastify = Fastify({\n    schemaErrorFormatter: (errors, dataVar) => {\n      return new Error('B');\n    }\n  });\n  fastify.register((instance, opts, done) => {\n    instance.setSchemaErrorFormatter((errors, dataVar) => {\n      return new Error('C');\n    });\n    instance.post('/d', {\n      schema,\n      schemaErrorFormatter: (errors, dataVar) => {\n        return new Error('D');\n      }\n    }, function (req, reply) {\n      reply.code(200).send(req.body.name);\n    });\n    instance.post('/c', {\n      schema\n    }, echoBody);\n    instance.register((subinstance, opts, done) => {\n      subinstance.post('/stillC', {\n        schema\n      }, echoBody);\n      done();\n    });\n    done();\n  });\n  fastify.post('/b', {\n    schema\n  }, echoBody);\n  fastify.post('/', {\n    schema,\n    schemaErrorFormatter: (errors, dataVar) => {\n      return new Error('A');\n    }\n  }, echoBody);\n  fastify.inject({\n    method: 'POST',\n    payload: {\n      hello: 'michelangelo'\n    },\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.same(res.json(), {\n      statusCode: 400,\n      error: 'Bad Request',\n      message: 'A'\n    });\n    t.equal(res.statusCode, 400);\n  });\n  fastify.inject({\n    method: 'POST',\n    payload: {\n      hello: 'michelangelo'\n    },\n    url: '/b'\n  }, (err, res) => {\n    t.error(err);\n    t.same(res.json(), {\n      statusCode: 400,\n      error: 'Bad Request',\n      message: 'B'\n    });\n    t.equal(res.statusCode, 400);\n  });\n  fastify.inject({\n    method: 'POST',\n    payload: {\n      hello: 'michelangelo'\n    },\n    url: '/c'\n  }, (err, res) => {\n    t.error(err);\n    t.same(res.json(), {\n      statusCode: 400,\n      error: 'Bad Request',\n      message: 'C'\n    });\n    t.equal(res.statusCode, 400);\n  });\n  fastify.inject({\n    method: 'POST',\n    payload: {\n      hello: 'michelangelo'\n    },\n    url: '/d'\n  }, (err, res) => {\n    t.error(err);\n    t.same(res.json(), {\n      statusCode: 400,\n      error: 'Bad Request',\n      message: 'D'\n    });\n    t.equal(res.statusCode, 400);\n  });\n  fastify.inject({\n    method: 'POST',\n    payload: {\n      hello: 'michelangelo'\n    },\n    url: '/stillC'\n  }, (err, res) => {\n    t.error(err);\n    t.same(res.json(), {\n      statusCode: 400,\n      error: 'Bad Request',\n      message: 'C'\n    });\n    t.equal(res.statusCode, 400);\n  });\n});","file":"validation-error-handling.test.js","skipped":false,"dir":"test"},{"name":"Should register a versioned route","suites":[],"updatePoint":{"line":27,"column":39,"index":495},"line":27,"code":"test('Should register a versioned route', t => {\n  t.plan(11);\n  const fastify = Fastify();\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    constraints: {\n      version: '1.2.0'\n    },\n    handler: (req, reply) => {\n      reply.send({\n        hello: 'world'\n      });\n    }\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/',\n    headers: {\n      'Accept-Version': '1.x'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      hello: 'world'\n    });\n    t.equal(res.statusCode, 200);\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/',\n    headers: {\n      'Accept-Version': '1.2.x'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      hello: 'world'\n    });\n    t.equal(res.statusCode, 200);\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/',\n    headers: {\n      'Accept-Version': '1.2.0'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      hello: 'world'\n    });\n    t.equal(res.statusCode, 200);\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/',\n    headers: {\n      'Accept-Version': '1.2.1'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 404);\n  });\n});","file":"versioned-routes.test.js","skipped":false,"dir":"test"},{"name":"Should register a versioned route via route constraints","suites":[],"updatePoint":{"line":92,"column":61,"index":1743},"line":92,"code":"test('Should register a versioned route via route constraints', t => {\n  t.plan(6);\n  const fastify = Fastify();\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    constraints: {\n      version: '1.2.0'\n    },\n    handler: (req, reply) => {\n      reply.send({\n        hello: 'world'\n      });\n    }\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/',\n    headers: {\n      'Accept-Version': '1.x'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      hello: 'world'\n    });\n    t.equal(res.statusCode, 200);\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/',\n    headers: {\n      'Accept-Version': '1.2.x'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      hello: 'world'\n    });\n    t.equal(res.statusCode, 200);\n  });\n});","file":"versioned-routes.test.js","skipped":false,"dir":"test"},{"name":"Should register the same route with different versions","suites":[],"updatePoint":{"line":134,"column":60,"index":2554},"line":134,"code":"test('Should register the same route with different versions', t => {\n  t.plan(8);\n  const fastify = Fastify();\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    constraints: {\n      version: '1.2.0'\n    },\n    handler: (req, reply) => {\n      reply.send('1.2.0');\n    }\n  });\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    constraints: {\n      version: '1.3.0'\n    },\n    handler: (req, reply) => {\n      reply.send('1.3.0');\n    }\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/',\n    headers: {\n      'Accept-Version': '1.x'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.equal(res.payload, '1.3.0');\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/',\n    headers: {\n      'Accept-Version': '1.2.x'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 200);\n    t.equal(res.payload, '1.2.0');\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/',\n    headers: {\n      'Accept-Version': '2.x'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 404);\n  });\n});","file":"versioned-routes.test.js","skipped":false,"dir":"test"},{"name":"The versioned route should take precedence","suites":[],"updatePoint":{"line":190,"column":48,"index":3616},"line":190,"code":"test('The versioned route should take precedence', t => {\n  t.plan(3);\n  const fastify = Fastify();\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    handler: (req, reply) => {\n      reply.send({\n        winter: 'is coming'\n      });\n    }\n  });\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    constraints: {\n      version: '1.2.0'\n    },\n    handler: (req, reply) => {\n      reply.send({\n        hello: 'world'\n      });\n    }\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/',\n    headers: {\n      'Accept-Version': '1.x'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      hello: 'world'\n    });\n    t.equal(res.statusCode, 200);\n  });\n});","file":"versioned-routes.test.js","skipped":false,"dir":"test"},{"name":"Versioned route but not version header should return a 404","suites":[],"updatePoint":{"line":228,"column":64,"index":4331},"line":228,"code":"test('Versioned route but not version header should return a 404', t => {\n  t.plan(2);\n  const fastify = Fastify();\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    constraints: {\n      version: '1.2.0'\n    },\n    handler: (req, reply) => {\n      reply.send({\n        hello: 'world'\n      });\n    }\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 404);\n  });\n});","file":"versioned-routes.test.js","skipped":false,"dir":"test"},{"name":"Should register a versioned route","suites":[],"updatePoint":{"line":251,"column":39,"index":4751},"line":251,"code":"test('Should register a versioned route', t => {\n  t.plan(6);\n  const fastify = Fastify();\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    constraints: {\n      version: '1.2.0'\n    },\n    handler: (req, reply) => {\n      reply.send({\n        hello: 'world'\n      });\n    }\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port,\n      headers: {\n        'Accept-Version': '1.x'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 200);\n      t.same(JSON.parse(body), {\n        hello: 'world'\n      });\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port,\n      headers: {\n        'Accept-Version': '2.x'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 404);\n    });\n  });\n});","file":"versioned-routes.test.js","skipped":false,"dir":"test"},{"name":"Shorthand route declaration","suites":[],"updatePoint":{"line":298,"column":33,"index":5736},"line":298,"code":"test('Shorthand route declaration', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.get('/', {\n    constraints: {\n      version: '1.2.0'\n    }\n  }, (req, reply) => {\n    reply.send({\n      hello: 'world'\n    });\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/',\n    headers: {\n      'Accept-Version': '1.x'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      hello: 'world'\n    });\n    t.equal(res.statusCode, 200);\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/',\n    headers: {\n      'Accept-Version': '1.2.1'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 404);\n  });\n});","file":"versioned-routes.test.js","skipped":false,"dir":"test"},{"name":"The not found handler should not erase the Accept-Version header","suites":[],"updatePoint":{"line":334,"column":70,"index":6439},"line":334,"code":"test('The not found handler should not erase the Accept-Version header', t => {\n  t.plan(13);\n  const fastify = Fastify();\n  fastify.addHook('onRequest', function (req, reply, done) {\n    t.same(req.headers['accept-version'], '2.x');\n    done();\n  });\n  fastify.addHook('preValidation', function (req, reply, done) {\n    t.same(req.headers['accept-version'], '2.x');\n    done();\n  });\n  fastify.addHook('preHandler', function (req, reply, done) {\n    t.same(req.headers['accept-version'], '2.x');\n    done();\n  });\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    constraints: {\n      version: '1.2.0'\n    },\n    handler: (req, reply) => {\n      reply.send({\n        hello: 'world'\n      });\n    }\n  });\n  fastify.setNotFoundHandler(function (req, reply) {\n    t.same(req.headers['accept-version'], '2.x'); // we check if the symbol is exposed on key or not\n\n    for (const key in req.headers) {\n      t.same(typeof key, 'string');\n    }\n\n    for (const key of Object.keys(req.headers)) {\n      t.same(typeof key, 'string');\n    }\n\n    reply.code(404).send('not found handler');\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/',\n    headers: {\n      'Accept-Version': '2.x'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.same(res.payload, 'not found handler');\n    t.equal(res.statusCode, 404);\n  });\n});","file":"versioned-routes.test.js","skipped":false,"dir":"test"},{"name":"Bad accept version (inject)","suites":[],"updatePoint":{"line":386,"column":33,"index":7725},"line":386,"code":"test('Bad accept version (inject)', t => {\n  t.plan(4);\n  const fastify = Fastify();\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    constraints: {\n      version: '1.2.0'\n    },\n    handler: (req, reply) => {\n      reply.send({\n        hello: 'world'\n      });\n    }\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/',\n    headers: {\n      'Accept-Version': 'a.b.c'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 404);\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/',\n    headers: {\n      'Accept-Version': 12\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 404);\n  });\n});","file":"versioned-routes.test.js","skipped":false,"dir":"test"},{"name":"Bas accept version (server)","suites":[],"updatePoint":{"line":422,"column":33,"index":8372},"line":422,"code":"test('Bas accept version (server)', t => {\n  t.plan(5);\n  const fastify = Fastify();\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    constraints: {\n      version: '1.2.0'\n    },\n    handler: (req, reply) => {\n      reply.send({\n        hello: 'world'\n      });\n    }\n  });\n  fastify.listen({\n    port: 0\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port,\n      headers: {\n        'Accept-Version': 'a.b.c'\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 404);\n    });\n    sget({\n      method: 'GET',\n      url: 'http://localhost:' + fastify.server.address().port,\n      headers: {\n        'Accept-Version': 12\n      }\n    }, (err, response, body) => {\n      t.error(err);\n      t.equal(response.statusCode, 404);\n    });\n  });\n});","file":"versioned-routes.test.js","skipped":false,"dir":"test"},{"name":"test log stream","suites":[],"updatePoint":{"line":466,"column":21,"index":9278},"line":466,"code":"test('test log stream', t => {\n  t.plan(3);\n  const stream = split(JSON.parse);\n  const fastify = Fastify({\n    logger: {\n      stream,\n      level: 'info'\n    }\n  });\n  fastify.get('/', {\n    constraints: {\n      version: '1.2.0'\n    }\n  }, function (req, reply) {\n    reply.send(new Error('kaboom'));\n  });\n  fastify.listen({\n    port: 0,\n    host: localhost\n  }, err => {\n    t.error(err);\n    t.teardown(() => {\n      fastify.close();\n    });\n    http.get({\n      hostname: fastify.server.address().hostname,\n      port: fastify.server.address().port,\n      path: '/',\n      method: 'GET',\n      headers: {\n        'Accept-Version': '1.x'\n      }\n    });\n    stream.once('data', listenAtLogLine => {\n      stream.once('data', line => {\n        t.equal(line.req.version, '1.x');\n        stream.once('data', line => {\n          t.equal(line.req.version, '1.x');\n        });\n      });\n    });\n  });\n});","file":"versioned-routes.test.js","skipped":false,"dir":"test"},{"name":"Should register a versioned route with custom versioning strategy","suites":[],"updatePoint":{"line":509,"column":71,"index":10232},"line":509,"code":"test('Should register a versioned route with custom versioning strategy', t => {\n  t.plan(8);\n  const customVersioning = {\n    name: 'version',\n    storage: function () {\n      const versions = {};\n      return {\n        get: version => {\n          return versions[version] || null;\n        },\n        set: (version, store) => {\n          versions[version] = store;\n        }\n      };\n    },\n    deriveConstraint: (req, ctx) => {\n      return req.headers.accept;\n    },\n    mustMatchWhenDerived: true,\n    validate: () => true\n  };\n  const fastify = Fastify({\n    constraints: {\n      version: customVersioning\n    }\n  });\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    constraints: {\n      version: 'application/vnd.example.api+json;version=2'\n    },\n    handler: (req, reply) => {\n      reply.send({\n        hello: 'from route v2'\n      });\n    }\n  });\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    constraints: {\n      version: 'application/vnd.example.api+json;version=3'\n    },\n    handler: (req, reply) => {\n      reply.send({\n        hello: 'from route v3'\n      });\n    }\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/',\n    headers: {\n      Accept: 'application/vnd.example.api+json;version=2'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      hello: 'from route v2'\n    });\n    t.equal(res.statusCode, 200);\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/',\n    headers: {\n      Accept: 'application/vnd.example.api+json;version=3'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      hello: 'from route v3'\n    });\n    t.equal(res.statusCode, 200);\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/',\n    headers: {\n      Accept: 'application/vnd.example.api+json;version=4'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 404);\n  });\n});","file":"versioned-routes.test.js","skipped":false,"dir":"test"},{"name":"Should get error using an invalid a versioned route, using default validation (deprecated versioning option)","suites":[],"updatePoint":{"line":596,"column":114,"index":12165},"line":596,"code":"test('Should get error using an invalid a versioned route, using default validation (deprecated versioning option)', t => {\n  t.plan(3);\n  const fastify = Fastify({\n    versioning: {\n      storage: function () {\n        const versions = {};\n        return {\n          get: version => {\n            return versions[version] || null;\n          },\n          set: (version, store) => {\n            versions[version] = store;\n          }\n        };\n      },\n      deriveVersion: (req, ctx) => {\n        return req.headers.accept;\n      }\n    }\n  });\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    constraints: {\n      version: 'application/vnd.example.api+json;version=1'\n    },\n    handler: (req, reply) => {\n      reply.send({\n        hello: 'cant match route v1'\n      });\n    }\n  });\n\n  try {\n    fastify.route({\n      method: 'GET',\n      url: '/',\n      // not a string version\n      constraints: {\n        version: 2\n      },\n      handler: (req, reply) => {\n        reply.send({\n          hello: 'cant match route v2'\n        });\n      }\n    });\n  } catch (err) {\n    t.equal(err.message, 'Version constraint should be a string.');\n  }\n\n  fastify.inject({\n    method: 'GET',\n    url: '/',\n    headers: {\n      Accept: 'application/vnd.example.api+json;version=2'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.equal(res.statusCode, 404);\n  });\n});","file":"versioned-routes.test.js","skipped":false,"dir":"test"},{"name":"Vary header check (for documentation example)","suites":[],"updatePoint":{"line":658,"column":51,"index":13465},"line":658,"code":"test('Vary header check (for documentation example)', t => {\n  t.plan(8);\n  const fastify = Fastify();\n  fastify.addHook('onSend', async (req, reply) => {\n    if (req.headers['accept-version']) {\n      // or the custom header you are using\n      let value = reply.getHeader('Vary') || '';\n      const header = Array.isArray(value) ? value.join(', ') : String(value);\n\n      if (value = append(header, 'Accept-Version')) {\n        // or the custom header you are using\n        reply.header('Vary', value);\n      }\n    }\n  });\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    handler: (req, reply) => {\n      reply.send({\n        hello: 'world'\n      });\n    }\n  });\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    constraints: {\n      version: '1.2.0'\n    },\n    handler: (req, reply) => {\n      reply.send({\n        hello: 'world'\n      });\n    }\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/',\n    headers: {\n      'Accept-Version': '1.x'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      hello: 'world'\n    });\n    t.equal(res.statusCode, 200);\n    t.equal(res.headers.vary, 'Accept-Version');\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      hello: 'world'\n    });\n    t.equal(res.statusCode, 200);\n    t.equal(res.headers.vary, undefined);\n  });\n});","file":"versioned-routes.test.js","skipped":false,"dir":"test"},{"name":"Should trigger a warning when a versioned route is registered via version option","suites":[],"updatePoint":{"line":720,"column":86,"index":14907},"line":720,"code":"test('Should trigger a warning when a versioned route is registered via version option', t => {\n  t.plan(4);\n\n  function onWarning(code) {\n    t.equal(code, 'FSTDEP008');\n  }\n\n  const warning = {\n    emit: onWarning\n  };\n  const route = proxyquire('../lib/route', {\n    './warnings': warning\n  });\n  const fastify = proxyquire('..', {\n    './lib/route.js': route\n  })({\n    exposeHeadRoutes: false\n  });\n  fastify.route({\n    method: 'GET',\n    url: '/',\n    version: '1.2.0',\n    handler: (req, reply) => {\n      reply.send({\n        hello: 'world'\n      });\n    }\n  });\n  fastify.inject({\n    method: 'GET',\n    url: '/',\n    headers: {\n      'Accept-Version': '1.x'\n    }\n  }, (err, res) => {\n    t.error(err);\n    t.same(JSON.parse(res.payload), {\n      hello: 'world'\n    });\n    t.equal(res.statusCode, 200);\n  });\n});","file":"versioned-routes.test.js","skipped":false,"dir":"test"},{"name":"should resolve immediately when reply[kReplyHijacked] is true","suites":[],"updatePoint":{"line":15,"column":67,"index":283},"line":15,"code":"test('should resolve immediately when reply[kReplyHijacked] is true', t => {\n  const reply = {};\n  reply[kReplyHijacked] = true;\n  const thenable = Promise.resolve();\n  wrapThenable(thenable, reply);\n  t.end();\n});","file":"wrapThenable.test.js","skipped":false,"dir":"test"},{"name":"should reject immediately when reply[kReplyHijacked] is true","suites":[],"updatePoint":{"line":22,"column":66,"index":497},"line":22,"code":"test('should reject immediately when reply[kReplyHijacked] is true', t => {\n  t.plan(1);\n  const reply = new Reply({}, {}, {});\n  reply[kReplyHijacked] = true;\n  reply.log = {\n    error: ({\n      err\n    }) => {\n      t.equal(err.message, 'Reply sent already');\n    }\n  };\n  const thenable = Promise.reject(new Error('Reply sent already'));\n  wrapThenable(thenable, reply);\n});","file":"wrapThenable.test.js","skipped":false,"dir":"test"}]}