{"repo":"carbon-design-system/carbon","url":"https://github.com/carbon-design-system/carbon","branch":"main","configs":[{"package":"@carbon/react","lang":"js","dir":"packages/carbon-react/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@carbon/colors","lang":"js","dir":"packages/colors/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"carbon-components","lang":"js","dir":"packages/components/tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@carbon/elements","lang":"js","dir":"packages/elements/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@carbon/feature-flags","lang":"js","dir":"packages/feature-flags/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@carbon/grid","lang":"js","dir":"packages/grid/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@carbon/icon-build-helpers","lang":"js","dir":"packages/icon-build-helpers/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@carbon/icon-helpers","lang":"js","dir":"packages/icon-helpers/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@carbon/layout","lang":"js","dir":"packages/layout/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@carbon/motion","lang":"js","dir":"packages/motion/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"carbon-components-react","lang":"js","dir":"packages/react/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@carbon/scss-generator","lang":"js","dir":"packages/scss-generator/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@carbon/styles","lang":"js","dir":"packages/styles/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@carbon/test-utils","lang":"js","dir":"packages/test-utils/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@carbon/themes","lang":"js","dir":"packages/themes/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@carbon/type","lang":"js","dir":"packages/type/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"can be imported using the correct path","suites":["Carbon Components React"],"updatePoint":{"line":9,"column":44,"index":307},"line":9,"code":"  it('can be imported using the correct path', () => {\n    expect(typeof Carbon).toBe('object');\n  });","file":"index-test.js","skipped":false,"dir":"packages/carbon-react/__tests__"},{"name":"should export components","suites":["Carbon Components React"],"updatePoint":{"line":12,"column":30,"index":396},"line":12,"code":"  it('should export components', () => {\n    expect(Object.keys(Carbon).sort()).toMatchInlineSnapshot(`\n      Array [\n        \"Accordion\",\n        \"AccordionItem\",\n        \"AccordionSkeleton\",\n        \"ActionableNotification\",\n        \"AspectRatio\",\n        \"Breadcrumb\",\n        \"BreadcrumbItem\",\n        \"BreadcrumbSkeleton\",\n        \"Button\",\n        \"ButtonSet\",\n        \"ButtonSkeleton\",\n        \"Checkbox\",\n        \"CheckboxSkeleton\",\n        \"ClickableTile\",\n        \"CodeSnippet\",\n        \"CodeSnippetSkeleton\",\n        \"Column\",\n        \"ComboBox\",\n        \"ComposedModal\",\n        \"Content\",\n        \"ContentSwitcher\",\n        \"Copy\",\n        \"CopyButton\",\n        \"DangerButton\",\n        \"DataTable\",\n        \"DataTableSkeleton\",\n        \"DatePicker\",\n        \"DatePickerInput\",\n        \"DatePickerSkeleton\",\n        \"Dropdown\",\n        \"DropdownSkeleton\",\n        \"ErrorBoundary\",\n        \"ErrorBoundaryContext\",\n        \"ExpandableSearch\",\n        \"ExpandableTile\",\n        \"FeatureFlags\",\n        \"FileUploader\",\n        \"FileUploaderButton\",\n        \"FileUploaderDropContainer\",\n        \"FileUploaderItem\",\n        \"FileUploaderSkeleton\",\n        \"Filename\",\n        \"FlexGrid\",\n        \"FluidForm\",\n        \"Form\",\n        \"FormGroup\",\n        \"FormItem\",\n        \"FormLabel\",\n        \"Grid\",\n        \"HStack\",\n        \"Header\",\n        \"HeaderContainer\",\n        \"HeaderGlobalAction\",\n        \"HeaderGlobalBar\",\n        \"HeaderMenu\",\n        \"HeaderMenuButton\",\n        \"HeaderMenuItem\",\n        \"HeaderName\",\n        \"HeaderNavigation\",\n        \"HeaderPanel\",\n        \"HeaderSideNavItems\",\n        \"Heading\",\n        \"IconButton\",\n        \"IconSkeleton\",\n        \"InlineLoading\",\n        \"InlineNotification\",\n        \"Layer\",\n        \"Link\",\n        \"ListItem\",\n        \"Loading\",\n        \"Modal\",\n        \"ModalBody\",\n        \"ModalFooter\",\n        \"ModalHeader\",\n        \"MultiSelect\",\n        \"NotificationActionButton\",\n        \"NotificationButton\",\n        \"NotificationTextDetails\",\n        \"NumberInput\",\n        \"NumberInputSkeleton\",\n        \"OrderedList\",\n        \"OverflowMenu\",\n        \"OverflowMenuItem\",\n        \"Pagination\",\n        \"PaginationNav\",\n        \"PaginationSkeleton\",\n        \"PasswordInput\",\n        \"Popover\",\n        \"PopoverContent\",\n        \"PrimaryButton\",\n        \"ProgressIndicator\",\n        \"ProgressIndicatorSkeleton\",\n        \"ProgressStep\",\n        \"RadioButton\",\n        \"RadioButtonGroup\",\n        \"RadioButtonSkeleton\",\n        \"RadioTile\",\n        \"Row\",\n        \"Search\",\n        \"SearchFilterButton\",\n        \"SearchLayoutButton\",\n        \"SearchSkeleton\",\n        \"SecondaryButton\",\n        \"Section\",\n        \"Select\",\n        \"SelectItem\",\n        \"SelectItemGroup\",\n        \"SelectSkeleton\",\n        \"SelectableTile\",\n        \"SideNav\",\n        \"SideNavDetails\",\n        \"SideNavDivider\",\n        \"SideNavFooter\",\n        \"SideNavHeader\",\n        \"SideNavIcon\",\n        \"SideNavItem\",\n        \"SideNavItems\",\n        \"SideNavLink\",\n        \"SideNavLinkText\",\n        \"SideNavMenu\",\n        \"SideNavMenuItem\",\n        \"SideNavSwitcher\",\n        \"SkeletonPlaceholder\",\n        \"SkeletonText\",\n        \"SkipToContent\",\n        \"Slider\",\n        \"SliderSkeleton\",\n        \"Stack\",\n        \"StructuredListBody\",\n        \"StructuredListCell\",\n        \"StructuredListHead\",\n        \"StructuredListInput\",\n        \"StructuredListRow\",\n        \"StructuredListSkeleton\",\n        \"StructuredListWrapper\",\n        \"Switch\",\n        \"Switcher\",\n        \"SwitcherDivider\",\n        \"SwitcherItem\",\n        \"Tab\",\n        \"TabContent\",\n        \"Table\",\n        \"TableActionList\",\n        \"TableBatchAction\",\n        \"TableBatchActions\",\n        \"TableBody\",\n        \"TableCell\",\n        \"TableContainer\",\n        \"TableExpandHeader\",\n        \"TableExpandRow\",\n        \"TableExpandedRow\",\n        \"TableHead\",\n        \"TableHeader\",\n        \"TableRow\",\n        \"TableSelectAll\",\n        \"TableSelectRow\",\n        \"TableToolbar\",\n        \"TableToolbarAction\",\n        \"TableToolbarContent\",\n        \"TableToolbarMenu\",\n        \"TableToolbarSearch\",\n        \"Tabs\",\n        \"TabsSkeleton\",\n        \"Tag\",\n        \"TagSkeleton\",\n        \"TextArea\",\n        \"TextAreaSkeleton\",\n        \"TextInput\",\n        \"TextInputSkeleton\",\n        \"Theme\",\n        \"Tile\",\n        \"TileAboveTheFoldContent\",\n        \"TileBelowTheFoldContent\",\n        \"TileGroup\",\n        \"TimePicker\",\n        \"TimePickerSelect\",\n        \"ToastNotification\",\n        \"Toggle\",\n        \"ToggleSkeleton\",\n        \"ToggleSmall\",\n        \"ToggleSmallSkeleton\",\n        \"Toolbar\",\n        \"ToolbarDivider\",\n        \"ToolbarItem\",\n        \"ToolbarOption\",\n        \"ToolbarSearch\",\n        \"ToolbarTitle\",\n        \"Tooltip\",\n        \"UnorderedList\",\n        \"VStack\",\n        \"unstable_IconTab\",\n        \"unstable_Menu\",\n        \"unstable_MenuDivider\",\n        \"unstable_MenuGroup\",\n        \"unstable_MenuItem\",\n        \"unstable_MenuRadioGroup\",\n        \"unstable_MenuSelectableItem\",\n        \"unstable_PageSelector\",\n        \"unstable_Pagination\",\n        \"unstable_ProgressBar\",\n        \"unstable_TabList\",\n        \"unstable_TabPanel\",\n        \"unstable_TabPanels\",\n        \"unstable_ThemeContext\",\n        \"unstable_TreeNode\",\n        \"unstable_TreeView\",\n        \"unstable_useContextMenu\",\n        \"useFeatureFlag\",\n        \"useFeatureFlags\",\n        \"usePrefix\",\n        \"useTheme\",\n      ]\n    `);\n  });","file":"index-test.js","skipped":false,"dir":"packages/carbon-react/__tests__"},{"name":"colors","suites":[],"updatePoint":{"line":12,"column":12,"index":290},"line":12,"code":"test('colors', () => {\n  expect(colors).toMatchSnapshot();\n});","file":"colors-test.js","skipped":false,"dir":"packages/colors/__tests__"},{"name":"unstable_hoverColors","suites":[],"updatePoint":{"line":15,"column":26,"index":367},"line":15,"code":"test('unstable_hoverColors', () => {\n  expect(unstable_hoverColors).toMatchSnapshot();\n});","file":"colors-test.js","skipped":false,"dir":"packages/colors/__tests__"},{"name":"Public API","suites":["@carbon/colors"],"updatePoint":{"line":19,"column":18,"index":393},"line":19,"code":"  test('Public API', async () => {\n    const {\n      getValue\n    } = await render(`\n      @use 'sass:meta';\n      @use '../index.scss' as colors;\n\n      $_: get-value(meta.module-variables('colors'));\n    `);\n    const variables = getValue(0);\n    expect(variables).toMatchSnapshot();\n  });","file":"modules-test.js","skipped":false,"dir":"packages/colors/__tests__"},{"name":"should emit default variable initializations when mixins are included","suites":["colors.scss"],"updatePoint":{"line":18,"column":75,"index":455},"line":18,"code":"  it('should emit default variable initializations when mixins are included', async () => {\n    const {\n      calls\n    } = await render(`\n@import '../scss/mixins';\n\n$test: test(mixin-exists(carbon--colors));\n$test: test(global-variable-exists(carbon--blue-50));\n`);\n    expect(calls[0][0].getValue()).toBe(true);\n    expect(calls[1][0].getValue()).toBe(true);\n  });","file":"scss-test.js","skipped":false,"dir":"packages/colors/__tests__"},{"name":"should include color variables as globals if the mixin is called","suites":["colors.scss"],"updatePoint":{"line":30,"column":70,"index":817},"line":30,"code":"  it('should include color variables as globals if the mixin is called', async () => {\n    const {\n      calls\n    } = await render(`\n@import '../scss/mixins';\n\n@include carbon--colors();\n$test: test(variable-exists(carbon--blue-50));\n$test: test(global-variable-exists(carbon--blue-50));\n`);\n    expect(calls[0][0].getValue()).toBe(true);\n    expect(calls[1][0].getValue()).toBe(true);\n  });","file":"scss-test.js","skipped":false,"dir":"packages/colors/__tests__"},{"name":"should include color variables in the default entrypoint","suites":["colors.scss"],"updatePoint":{"line":43,"column":62,"index":1202},"line":43,"code":"  it('should include color variables in the default entrypoint', async () => {\n    const {\n      calls\n    } = await render(`\n@import '../scss/colors';\n\n$test: test(mixin-exists(carbon--colors));\n$test: test(variable-exists(carbon--blue-50));\n$test: test(global-variable-exists(carbon--blue-50));\n`);\n    expect(calls[0][0].getValue()).toBe(true);\n    expect(calls[1][0].getValue()).toBe(true);\n    expect(calls[2][0].getValue()).toBe(true);\n  });","file":"scss-test.js","skipped":false,"dir":"packages/colors/__tests__"},{"name":"should provide a map of color values","suites":["colors.scss","deprecated"],"updatePoint":{"line":58,"column":44,"index":1665},"line":58,"code":"    it('should provide a map of color values', async () => {\n      const {\n        calls\n      } = await render(`\n@import '../scss/colors';\n\n$map: test($ibm-color-map);\n$swatch: test(map-get($ibm-color-map, 'black'));\n$value: test(map-get(map-get($ibm-color-map, 'black'), 100));\n$null: test(map-get($ibm-color-map, black));\n`);\n      expect(calls[0][0]).toBeInstanceOf(types.Map);\n      expect(calls[1][0]).toBeInstanceOf(types.Map);\n      expect(calls[2][0]).toBeInstanceOf(types.Color);\n      expect(calls[3][0]).toBeInstanceOf(types.Null);\n    });","file":"scss-test.js","skipped":false,"dir":"packages/colors/__tests__"},{"name":"should be able to bring in prefix","suites":["ES build"],"updatePoint":{"line":12,"column":39,"index":335},"line":12,"code":"  it('should be able to bring in prefix', () => {\n    expect(prefix).toBe('bx');\n  });","file":"es-test.js","skipped":false,"dir":"packages/components/tests"},{"name":"builds es/globals/js/feature-flags.js as ES5 code","suites":["ES build"],"updatePoint":{"line":15,"column":55,"index":438},"line":15,"code":"  it('builds es/globals/js/feature-flags.js as ES5 code', async () => {\n    const contents = await readFile(path.resolve(__dirname, '../es/globals/js/feature-flags.js'), 'utf8');\n    const {\n      code\n    } = await transformAsync(contents, {\n      presets: [['@babel/preset-env', {\n        modules: false\n      }]],\n      babelrc: false\n    });\n    expect(minify(contents).code).toBe(minify(code).code);\n  });","file":"es-test.js","skipped":false,"dir":"packages/components/tests"},{"name":"builds es/globals/js/settings.js as ES5 code","suites":["ES build"],"updatePoint":{"line":27,"column":50,"index":844},"line":27,"code":"  it('builds es/globals/js/settings.js as ES5 code', async () => {\n    const contents = await readFile(path.resolve(__dirname, '../es/globals/js/settings.js'), 'utf8');\n    const {\n      code\n    } = await transformAsync(contents, {\n      presets: [['@babel/preset-env', {\n        modules: false\n      }]],\n      babelrc: false\n    });\n    expect(minify(contents).code).toBe(minify(code).code);\n  });","file":"es-test.js","skipped":false,"dir":"packages/components/tests"},{"name":"%s should be tree-shakable","suites":["ES modules"],"line":73,"code":"  it.each(files)('%s should be tree-shakable', async relativeFilePath => {\n    const filepath = path.join(cwd, relativeFilePath);\n    const bundle = await rollup({\n      input: entry,\n      plugins: [virtual({\n        [entry]: `import ${JSON.stringify(filepath)}`\n      }), commonjs({\n        include: [/node_modules/, 'src/globals/js/settings.js', 'src/globals/js/feature-flags.js'],\n        sourceMap: false\n      }), nodeResolve(), replace({\n        'process.env.NODE_ENV': JSON.stringify('production'),\n        preventAssignment: true\n      }), terser.terser()],\n      onwarn: (warning, handle) => {\n        if (warning.code !== 'EMPTY_BUNDLE') {\n          handle(warning);\n        }\n      },\n      treeshake: {\n        annotations: false\n      }\n    });\n    const {\n      output\n    } = await bundle.generate({\n      format: 'iife'\n    }); // lo-dash seems to remain small chunk of code after tree-shaken\n\n    const code = output.map(item => item.code).join('').trim().replace(lodashOutput.map(item => item.code).join('').trim(), '').replace(';window', '').replace('!function(){\"use strict\"}();', '');\n    expect(code).toBe('');\n  });","file":"pure-modules-test.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not given","suites":["Test accordion","Constructor"],"updatePoint":{"line":14,"column":49,"index":637},"line":14,"code":"    it('Should throw if root element is not given', function () {\n      expect(() => {\n        new Accordion();\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/accordion_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not a DOM element","suites":["Test accordion","Constructor"],"updatePoint":{"line":19,"column":57,"index":857},"line":19,"code":"    it('Should throw if root element is not a DOM element', function () {\n      expect(() => {\n        new Accordion(document.createTextNode(''));\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/accordion_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should set default options","suites":["Test accordion","Constructor"],"updatePoint":{"line":24,"column":34,"index":1081},"line":24,"code":"    it('Should set default options', function () {\n      expect(flattenOptions(instance.options)).toEqual({\n        selectorInit: '[data-accordion]',\n        selectorAccordionItem: '.bx--accordion__item',\n        selectorAccordionItemHeading: '.bx--accordion__heading',\n        selectorAccordionContent: '.bx--accordion__content',\n        classActive: 'bx--accordion__item--active'\n      });\n    });","file":"spec/accordion_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should set active state on click","suites":["Test accordion","Clicking list item"],"updatePoint":{"line":54,"column":40,"index":2346},"line":54,"code":"    it('Should set active state on click', function () {\n      buttonItem.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(listItem.classList.contains('bx--accordion__item--active')).toBe(true);\n    });","file":"spec/accordion_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should remove active state on second click","suites":["Test accordion","Clicking list item"],"updatePoint":{"line":60,"column":50,"index":2597},"line":60,"code":"    it('Should remove active state on second click', function () {\n      listItem.classList.add('bx--accordion__item--active');\n      buttonItem.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(listItem.classList.contains('bx--accordion__item--active')).toBe(false);\n    });","file":"spec/accordion_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should not set active state on other keypress","suites":["Test accordion","Keypress legacy list item"],"updatePoint":{"line":85,"column":53,"index":3535},"line":85,"code":"    it('Should not set active state on other keypress', function () {\n      const event = new CustomEvent('keypress', {\n        bubbles: true\n      });\n      event.which = 86;\n      listItem.dispatchEvent(event);\n      expect(listItem.classList.contains('bx--accordion__item--active')).toBe(false);\n    });","file":"spec/accordion_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should set active state on enter or spacebar press","suites":["Test accordion","Keypress legacy list item"],"updatePoint":{"line":93,"column":58,"index":3847},"line":93,"code":"    it('Should set active state on enter or spacebar press', function () {\n      const event = new CustomEvent('keypress', {\n        bubbles: true\n      });\n      event.which = 13;\n      listItem.dispatchEvent(event);\n      expect(listItem.classList.contains('bx--accordion__item--active')).toBe(true);\n    });","file":"spec/accordion_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should remove active state on second enter or spacebar press","suites":["Test accordion","Keypress legacy list item"],"updatePoint":{"line":101,"column":68,"index":4168},"line":101,"code":"    it('Should remove active state on second enter or spacebar press', function () {\n      listItem.classList.add('bx--accordion__item--active');\n      const event = new CustomEvent('keypress', {\n        bubbles: true\n      });\n      event.which = 13;\n      listItem.dispatchEvent(event);\n      expect(listItem.classList.contains('bx--accordion__item--active')).toBe(false);\n    });","file":"spec/accordion_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not given","suites":["Test Checkbox","Constructor"],"updatePoint":{"line":16,"column":49,"index":616},"line":16,"code":"    it('Should throw if root element is not given', function () {\n      expect(() => {\n        new Checkbox();\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/checkbox_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not a DOM element","suites":["Test Checkbox","Constructor"],"updatePoint":{"line":21,"column":57,"index":835},"line":21,"code":"    it('Should throw if root element is not a DOM element', function () {\n      expect(() => {\n        new Checkbox(document.createTextNode(''));\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/checkbox_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should set default options","suites":["Test Checkbox","Constructor"],"updatePoint":{"line":26,"column":34,"index":1058},"line":26,"code":"    it('should set default options', function () {\n      expect(flattenOptions(instance.options)).toEqual({\n        selectorInit: '.bx--checkbox',\n        selectorContainedCheckboxState: '[data-contained-checkbox-state]',\n        selectorContainedCheckboxDisabled: '[data-contained-checkbox-disabled]',\n        classLabel: 'bx--checkbox-label',\n        classLabelFocused: 'bx--checkbox-label__focus',\n        attribContainedCheckboxState: 'data-contained-checkbox-state',\n        attribContainedCheckboxDisabled: 'data-contained-checkbox-disabled'\n      });\n    });","file":"spec/checkbox_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"setState should support mixed state","suites":["Test Checkbox","Test Checkbox"],"updatePoint":{"line":61,"column":43,"index":2401},"line":61,"code":"    it('setState should support mixed state', function () {\n      checkbox.setState('mixed');\n      expect(elem.indeterminate, 'indeterminate on element').toBe(true);\n      expect(elem.checked, 'checked prop on element').toBe(false);\n      expect(elem.getAttribute('aria-checked')).toBe('mixed');\n    });","file":"spec/checkbox_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"setState should support checked state","suites":["Test Checkbox","Test Checkbox"],"updatePoint":{"line":67,"column":45,"index":2708},"line":67,"code":"    it('setState should support checked state', function () {\n      checkbox.setState('true');\n      expect(elem.indeterminate, 'indeterminate on element').toBe(false);\n      expect(elem.checked, 'checked prop on element').toBe(true);\n      expect(elem.getAttribute('aria-checked')).toBe('true');\n    });","file":"spec/checkbox_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"setState should support unchecked state","suites":["Test Checkbox","Test Checkbox"],"updatePoint":{"line":73,"column":47,"index":3015},"line":73,"code":"    it('setState should support unchecked state', function () {\n      checkbox.setState('false');\n      expect(elem.indeterminate, 'indeterminate on element').toBe(false);\n      expect(elem.checked, 'checked prop on element').toBe(false);\n      expect(elem.getAttribute('aria-checked')).toBe('false');\n    });","file":"spec/checkbox_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should check checkbox on click","suites":["Test Checkbox","Test Checkbox"],"updatePoint":{"line":79,"column":38,"index":3316},"line":79,"code":"    it('Should check checkbox on click', function () {\n      elem.checked = true;\n      elem.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(elem.checked, 'checked prop on element').toBe(true);\n    });","file":"spec/checkbox_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should uncheck checkbox on click","suites":["Test Checkbox","Test Checkbox"],"updatePoint":{"line":86,"column":40,"index":3559},"line":86,"code":"    it('Should uncheck checkbox on click', function () {\n      elem.checked = false;\n      elem.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(elem.checked, 'checked prop on element').toBe(false);\n    });","file":"spec/checkbox_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should show the checkbox upon focusing in nested checkbox","suites":["Test Checkbox","Test Checkbox"],"updatePoint":{"line":93,"column":65,"index":3829},"line":93,"code":"    it('Should show the checkbox upon focusing in nested checkbox', function () {\n      container.classList.add('bx--checkbox-label');\n      elem.dispatchEvent(new CustomEvent('focus', {\n        bubbles: true\n      }));\n      expect(container.classList.contains('bx--checkbox-label__focus')).toBe(true);\n    });","file":"spec/checkbox_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should hide the checkbox upon blur in nested checkbox","suites":["Test Checkbox","Test Checkbox"],"updatePoint":{"line":100,"column":61,"index":4137},"line":100,"code":"    it('Should hide the checkbox upon blur in nested checkbox', function () {\n      container.classList.add('bx--checkbox-label');\n      container.classList.add('bx--checkbox-label__focus');\n      elem.dispatchEvent(new CustomEvent('blur', {\n        bubbles: true\n      }));\n      expect(container.classList.contains('bx--checkbox-label__focus')).toBe(false);\n    });","file":"spec/checkbox_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should set default options","suites":["Test content switcher","Constructor"],"updatePoint":{"line":9,"column":34,"index":483},"line":9,"code":"    it('Should set default options', function () {\n      const contentSwitcher = new ContentSwitcher(document.createElement('div'));\n      expect(flattenOptions(contentSwitcher.options)).toEqual({\n        selectorInit: '[data-content-switcher]',\n        selectorButton: 'input[type=\"radio\"], .bx--content-switcher-btn',\n        classActive: 'bx--content-switcher--selected',\n        eventBeforeSelected: 'content-switcher-beingselected',\n        eventAfterSelected: 'content-switcher-selected'\n      });\n    });","file":"spec/content-switcher_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should be called on click","suites":["Test content switcher","_handleClick"],"updatePoint":{"line":34,"column":33,"index":1473},"line":34,"code":"    it('Should be called on click', function () {\n      spyOn(instance, '_handleClick');\n      const event = new CustomEvent('click', {\n        bubbles: true\n      });\n      buttons[1].dispatchEvent(event);\n      expect(instance._handleClick).toHaveBeenCalled();\n    });","file":"spec/content-switcher_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should update active item upon clicking","suites":["Test content switcher","_handleClick"],"updatePoint":{"line":42,"column":47,"index":1758},"line":42,"code":"    it('Should update active item upon clicking', function () {\n      const event = new CustomEvent('click', {\n        bubbles: true\n      });\n      buttons[1].dispatchEvent(event);\n      expect(buttons[1].classList.contains(instance.options.classActive)).toBe(true);\n      expect(buttons[0].classList.contains(instance.options.classActive)).toBe(false);\n    });","file":"spec/content-switcher_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should update aria-selected upon clicking","suites":["Test content switcher","_handleClick"],"updatePoint":{"line":50,"column":49,"index":2123},"line":50,"code":"    it('Should update aria-selected upon clicking', function () {\n      const event = new CustomEvent('click', {\n        bubbles: true\n      });\n      buttons[1].dispatchEvent(event);\n      expect(buttons[1].getAttribute('aria-selected')).toBe('true');\n      expect(buttons[0].getAttribute('aria-selected')).toBe('false');\n    });","file":"spec/content-switcher_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should provide a way to cancel switching item upon clicking","suites":["Test content switcher","_handleClick"],"updatePoint":{"line":58,"column":67,"index":2472},"line":58,"code":"    it('Should provide a way to cancel switching item upon clicking', async function () {\n      const eventBeforeSelected = await new Promise(resolve => {\n        events.on(element, 'content-switcher-beingselected', event => {\n          event.preventDefault();\n          resolve(event);\n        });\n        buttons[1].dispatchEvent(new CustomEvent('click', {\n          bubbles: true\n        }));\n      });\n      expect(eventBeforeSelected.detail.item).toBe(buttons[1]);\n      expect(buttons[0].classList.contains('bx--content-switcher--selected')).toBe(true);\n      expect(buttons[1].classList.contains('bx--content-switcher--selected')).toBe(false);\n    });","file":"spec/content-switcher_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should update selected item when using setActive method","suites":["Test content switcher","setActive"],"updatePoint":{"line":92,"column":63,"index":3729},"line":92,"code":"    it('Should update selected item when using setActive method', function () {\n      instance.setActive(buttons[1]);\n      expect(buttons[0].classList.contains('bx--content-switcher--selected')).toBe(false);\n      expect(buttons[1].classList.contains('bx--content-switcher--selected')).toBe(true);\n    });","file":"spec/content-switcher_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should update aria-selected when using setActive method","suites":["Test content switcher","setActive"],"updatePoint":{"line":97,"column":63,"index":4036},"line":97,"code":"    it('Should update aria-selected when using setActive method', function () {\n      instance.setActive(buttons[1]);\n      expect(buttons[0].getAttribute('aria-selected')).toBe('false');\n      expect(buttons[1].getAttribute('aria-selected')).toBe('true');\n    });","file":"spec/content-switcher_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should update active item upon an API call","suites":["Test content switcher","setActive"],"updatePoint":{"line":102,"column":50,"index":4288},"line":102,"code":"    it('Should update active item upon an API call', async function () {\n      const item = await promisify(instance.setActive, {\n        context: instance\n      })(buttons[1]);\n      expect(item).toBe(buttons[1]);\n      expect(buttons[0].classList.contains('bx--content-switcher--selected')).toBe(false);\n      expect(buttons[1].classList.contains('bx--content-switcher--selected')).toBe(true);\n    });","file":"spec/content-switcher_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should update aria-selected upon an API call","suites":["Test content switcher","setActive"],"updatePoint":{"line":110,"column":52,"index":4694},"line":110,"code":"    it('Should update aria-selected upon an API call', async function () {\n      const item = await promisify(instance.setActive, {\n        context: instance\n      })(buttons[1]);\n      expect(item).toBe(buttons[1]);\n      expect(buttons[0].getAttribute('aria-selected')).toBe('false');\n      expect(buttons[1].getAttribute('aria-selected')).toBe('true');\n    });","file":"spec/content-switcher_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should provide a way to cancel switching item upon an API call","suites":["Test content switcher","setActive"],"updatePoint":{"line":118,"column":70,"index":5076},"line":118,"code":"    it('Should provide a way to cancel switching item upon an API call', async function () {\n      let errorBeforeSelected;\n      let eventBeforeSelected;\n      events.on(element, 'content-switcher-beingselected', event => {\n        eventBeforeSelected = event;\n        event.preventDefault();\n      });\n\n      try {\n        await promisify(instance.setActive, {\n          context: instance\n        })(buttons[1]);\n      } catch (error) {\n        errorBeforeSelected = error;\n      }\n\n      expect(eventBeforeSelected.detail.item).toBe(buttons[1]);\n      expect(errorBeforeSelected.canceled).toBe(true);\n      expect(errorBeforeSelected.item).toBe(buttons[1]);\n      expect(buttons[0].classList.contains('bx--content-switcher--selected')).toBe(true);\n      expect(buttons[1].classList.contains('bx--content-switcher--selected')).toBe(false);\n    });","file":"spec/content-switcher_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should select target pane","suites":["Test content switcher","Panes"],"updatePoint":{"line":186,"column":33,"index":7369},"line":186,"code":"    it('Should select target pane', function () {\n      try {\n        buttonNodes[0].dataset.target = `.${id}_0`;\n        buttonNodes[1].dataset.target = `.${id}_1`;\n        buttonNodes[1].dispatchEvent(new CustomEvent('click', {\n          bubbles: true\n        }));\n        paneNodes[0].forEach(node => {\n          expect(node.hasAttribute('hidden'), 'hidden of unselected item').toBe(true);\n        });\n        paneNodes[1].forEach(node => {\n          expect(node.hasAttribute('hidden'), 'hidden of selected item').toBe(false);\n        });\n      } finally {\n        // eslint-disable-next-line no-param-reassign\n        buttonNodes.forEach(buttonNode => {\n          buttonNode.dataset.target = undefined;\n        });\n      }\n    });","file":"spec/content-switcher_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should update active item upon clicking","suites":["Test content switcher","Setting active item with link"],"updatePoint":{"line":237,"column":47,"index":9031},"line":237,"code":"    it('Should update active item upon clicking', function () {\n      linkNodes[1].dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(linkNodes[0].getAttribute('aria-selected')).toBe('false');\n      expect(linkNodes[1].getAttribute('aria-selected')).toBe('true');\n    });","file":"spec/content-switcher_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not given","suites":["Test Copy Button","Constructor"],"updatePoint":{"line":13,"column":49,"index":603},"line":13,"code":"    it('Should throw if root element is not given', function () {\n      expect(() => {\n        new CopyButton();\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/copy-button_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not a DOM element","suites":["Test Copy Button","Constructor"],"updatePoint":{"line":18,"column":57,"index":824},"line":18,"code":"    it('Should throw if root element is not a DOM element', function () {\n      expect(() => {\n        new CopyButton(document.createTextNode(''));\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/copy-button_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should not show the feedback tooltip before click","suites":["Test Copy Button","Showing and hiding feedback tooltip"],"updatePoint":{"line":42,"column":57,"index":1767},"line":42,"code":"    it('Should not show the feedback tooltip before click', function () {\n      expect(feedbackTooltipInitialState).toBe(false);\n    });","file":"spec/copy-button_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should show the feedback tooltip on click","suites":["Test Copy Button","Showing and hiding feedback tooltip"],"updatePoint":{"line":45,"column":49,"index":1896},"line":45,"code":"    it('Should show the feedback tooltip on click', function () {\n      element.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(feedbackTooltip.classList.contains('bx--btn--copy__feedback--displayed')).toBe(true);\n    });","file":"spec/copy-button_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should hide the feedback tooltip after specified timeout value","suites":["Test Copy Button","Showing and hiding feedback tooltip"],"updatePoint":{"line":51,"column":70,"index":2178},"line":51,"code":"    it('Should hide the feedback tooltip after specified timeout value', function () {\n      element.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(feedbackTooltip.classList.contains('bx--btn--copy__feedback--displayed')).toBe(true);\n      jasmine.clock().tick(2000);\n      expect(feedbackTooltip.classList.contains('bx--btn--copy__feedback--displayed')).toBe(false);\n    });","file":"spec/copy-button_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not given","suites":["DataTable","Constructor"],"updatePoint":{"line":9,"column":49,"index":537},"line":9,"code":"    it('Should throw if root element is not given', function () {\n      expect(() => {\n        new DataTable();\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/data-table_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not a DOM element","suites":["DataTable","Constructor"],"updatePoint":{"line":14,"column":57,"index":757},"line":14,"code":"    it('Should throw if root element is not a DOM element', function () {\n      expect(() => {\n        new DataTable(document.createTextNode(''));\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/data-table_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should set default options","suites":["DataTable","Constructor"],"updatePoint":{"line":19,"column":34,"index":981},"line":19,"code":"    it('Should set default options', function () {\n      const table = new DataTable(document.createElement('div'));\n      expect(flattenOptions(table.options)).toEqual({\n        selectorInit: `[data-table]`,\n        selectorToolbar: '.bx--table--toolbar',\n        selectorActions: '.bx--batch-actions',\n        selectorCount: '[data-items-selected]',\n        selectorActionCancel: '.bx--batch-summary__cancel',\n        selectorCheckbox: '.bx--checkbox',\n        selectorExpandCells: `td.bx--table-expand`,\n        selectorExpandableRows: `.bx--expandable-row`,\n        selectorParentRows: `.bx--parent-row`,\n        selectorChildRow: '[data-child-row]',\n        selectorTableBody: 'tbody',\n        selectorTableSort: `.bx--table-sort`,\n        selectorTableSelected: `.bx--data-table--selected`,\n        selectorToolbarSearchContainer: '.bx--toolbar-search-container-expandable',\n        selectorSearchMagnifier: '.bx--search-magnifier',\n        selectorSearchInput: '.bx--search-input',\n        classExpandableRow: `bx--expandable-row`,\n        classExpandableRowHidden: `bx--expandable-row--hidden`,\n        classExpandableRowHover: `bx--expandable-row--hover`,\n        classTableSortAscending: `bx--table-sort--ascending`,\n        classTableSortActive: `bx--table-sort--active`,\n        classToolbarSearchActive: 'bx--toolbar-search-container-active',\n        classActionBarActive: 'bx--batch-actions--active',\n        classTableSelected: `bx--data-table--selected`,\n        eventBeforeExpand: `data-table-beforetoggleexpand`,\n        eventAfterExpand: `data-table-aftertoggleexpand`,\n        eventBeforeExpandAll: `data-table-beforetoggleexpandall`,\n        eventAfterExpandAll: `data-table-aftertoggleexpandall`,\n        eventBeforeSort: `data-table-beforetogglesort`,\n        eventAfterSort: `data-table-aftertogglesort`,\n        eventTrigger: '[data-event]',\n        eventParentContainer: '[data-parent-row]'\n      });\n    });","file":"spec/data-table_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Expandable rows should be removed from the DOM","suites":["DataTable","Initial tasks"],"updatePoint":{"line":68,"column":54,"index":3292},"line":68,"code":"    it('Expandable rows should be removed from the DOM', function () {\n      const rows = [...element.querySelectorAll('tbody > tr')];\n      rows.forEach(row => {\n        expect(row.classList.contains('[data-child-row]')).toBe(false);\n      });\n    });","file":"spec/data-table_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should toggle the row on click","suites":["DataTable","Row Expansion"],"updatePoint":{"line":91,"column":38,"index":4037},"line":91,"code":"    it('Should toggle the row on click', function () {\n      const firstRowExpand = document.querySelector('[data-event=\"expand\"]');\n      firstRowExpand.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(document.querySelector('[data-child-row]').previousElementSibling.classList.contains(`bx--expandable-row`)).toBe(true);\n      firstRowExpand.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(document.querySelector('[data-child-row]').previousElementSibling.classList.contains(`bx--expandable-row`)).toBe(false);\n    });","file":"spec/data-table_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should emit an event on row expansion click","suites":["DataTable","Row Expansion"],"updatePoint":{"line":102,"column":51,"index":4648},"line":102,"code":"    it('Should emit an event on row expansion click', function () {\n      const firstRowExpand = document.querySelector('[data-event=\"expand\"]');\n      const spyToggleRowExpandEvent = jasmine.createSpy();\n      events.on(element.ownerDocument.body, `data-table-aftertoggleexpand`, spyToggleRowExpandEvent);\n      firstRowExpand.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(spyToggleRowExpandEvent).toHaveBeenCalled();\n    });","file":"spec/data-table_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"The event should trigger the function","suites":["DataTable","Row Expansion"],"updatePoint":{"line":111,"column":45,"index":5110},"line":111,"code":"    it('The event should trigger the function', function () {\n      const firstRowExpand = document.querySelector('[data-event=\"expand\"]');\n      spyOn(table, '_rowExpandToggle');\n      firstRowExpand.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(table._rowExpandToggle).toHaveBeenCalled();\n    });","file":"spec/data-table_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should toggle the rows on click","suites":["DataTable","Batch row Expansion"],"updatePoint":{"line":137,"column":39,"index":5984},"line":137,"code":"    it('Should toggle the rows on click', function () {\n      const headerExpand = element.querySelector('[data-event=\"expandAll\"]');\n      headerExpand.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      const expandedStateAfterExpand = Array.prototype.map.call(element.querySelectorAll('[data-child-row]'), elem => elem.previousElementSibling.classList.contains(`bx--expandable-row`));\n      expect(expandedStateAfterExpand).toEqual([true, true]);\n      headerExpand.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      const expandedStateAfterCollapse = Array.prototype.map.call(element.querySelectorAll('[data-child-row]'), elem => elem.previousElementSibling.classList.contains(`bx--expandable-row`));\n      expect(expandedStateAfterCollapse).toEqual([false, false]);\n    });","file":"spec/data-table_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should emit an event on row expansion click","suites":["DataTable","Batch row Expansion"],"updatePoint":{"line":150,"column":51,"index":6832},"line":150,"code":"    it('Should emit an event on row expansion click', function () {\n      const headerExpand = element.querySelector('[data-event=\"expandAll\"]');\n      const spyToggleRowExpandEvent = jasmine.createSpy();\n      events.on(element.ownerDocument.body, `data-table-aftertoggleexpandall`, spyToggleRowExpandEvent);\n      headerExpand.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(spyToggleRowExpandEvent).toHaveBeenCalled();\n    });","file":"spec/data-table_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"The event should trigger the function","suites":["DataTable","Batch row Expansion"],"updatePoint":{"line":159,"column":45,"index":7295},"line":159,"code":"    it('The event should trigger the function', function () {\n      const headerExpand = element.querySelector('[data-event=\"expandAll\"]');\n      spyOn(table, '_rowExpandToggleAll');\n      headerExpand.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(table._rowExpandToggleAll).toHaveBeenCalled();\n    });","file":"spec/data-table_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should switch through tri-state sort","suites":["DataTable","Sort"],"updatePoint":{"line":187,"column":44,"index":8232},"line":187,"code":"    it('Should switch through tri-state sort', function () {\n      firstSort.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(firstSort.classList.contains(`bx--table-sort--ascending`)).toBe(true);\n      expect(firstSort.getAttribute('data-previous-value') === 'ascending').toBe(true);\n      firstSort.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(firstSort.classList.contains(`bx--table-sort--ascending`)).toBe(false);\n      expect(firstSort.getAttribute('data-previous-value') === 'descending').toBe(true);\n      firstSort.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(firstSort.classList.contains(`bx--table-sort--ascending`)).toBe(false);\n      expect(firstSort.hasAttribute('data-previous-value')).toBe(false);\n    });","file":"spec/data-table_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should emit an event on sort click","suites":["DataTable","Sort"],"updatePoint":{"line":204,"column":42,"index":9073},"line":204,"code":"    it('Should emit an event on sort click', function () {\n      const spyToggleSortEvent = jasmine.createSpy();\n      events.on(element.ownerDocument.body, `data-table-aftertogglesort`, spyToggleSortEvent);\n      firstSort.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(spyToggleSortEvent).toHaveBeenCalled();\n    });","file":"spec/data-table_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should toggle the action bar on checkbox select","suites":["DataTable","Action bar"],"updatePoint":{"line":234,"column":55,"index":10104},"line":234,"code":"    it('Should toggle the action bar on checkbox select', function () {\n      const firstSelect = document.querySelector('[data-event=\"select\"]');\n      firstSelect.click();\n      const batchActions = element.querySelector('.bx--batch-actions');\n      expect(batchActions.classList.contains('bx--batch-actions--active')).toBe(true);\n      firstSelect.click();\n      expect(batchActions.classList.contains('bx--batch-actions--active')).toBe(false);\n    }); // it('Should close the action bar on a cancel click', function() {});","file":"spec/data-table_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should select all checkboxes on select all event","suites":["DataTable","Action bar"],"updatePoint":{"line":244,"column":56,"index":10701},"line":244,"code":"    it('Should select all checkboxes on select all event', function () {\n      const firstSelect = document.querySelector('[data-event=\"select-all\"]');\n      firstSelect.click();\n      const batchActions = element.querySelector('.bx--batch-actions');\n      expect(batchActions.classList.contains('bx--batch-actions--active')).toBe(true);\n    });","file":"spec/data-table_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should open search bar on click","suites":["DataTable","Toggle active search bar"],"updatePoint":{"line":271,"column":39,"index":11586},"line":271,"code":"    it('Should open search bar on click', function () {\n      const search = document.querySelector('.bx--toolbar-search-container-expandable');\n      const magnifier = document.querySelector('.bx--search-magnifier');\n      magnifier.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(search.classList.contains('bx--toolbar-search-container-active')).toBe(true);\n    });","file":"spec/data-table_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should close search bar on click","suites":["DataTable","Toggle active search bar"],"updatePoint":{"line":279,"column":40,"index":11994},"line":279,"code":"    it('Should close search bar on click', function () {\n      const search = document.querySelector('.bx--toolbar-search-container-expandable');\n      search.classList.add('bx--toolbar-search-container-active');\n      dt.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(search.classList.contains('bx--toolbar-search-container-active')).toBe(false);\n    });","file":"spec/data-table_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should open search bar on keydown","suites":["DataTable","Toggle active search bar"],"updatePoint":{"line":287,"column":41,"index":12391},"line":287,"code":"    it('Should open search bar on keydown', function () {\n      const search = document.querySelector('.bx--toolbar-search-container-expandable');\n      const magnifier = document.querySelector('.bx--search-magnifier');\n      const event = new CustomEvent('keydown', {\n        bubbles: true\n      });\n      event.which = 13;\n      magnifier.dispatchEvent(event);\n      expect(search.classList.contains('bx--toolbar-search-container-active')).toBe(true);\n    });","file":"spec/data-table_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should close search bar on keydown","suites":["DataTable","Toggle active search bar"],"updatePoint":{"line":297,"column":42,"index":12854},"line":297,"code":"    it('Should close search bar on keydown', function () {\n      const search = document.querySelector('.bx--toolbar-search-container-expandable');\n      const input = document.querySelector('input');\n      search.classList.add('bx--toolbar-search-container-active');\n      const event = new CustomEvent('keydown', {\n        bubbles: true\n      });\n      event.which = 27;\n      input.dispatchEvent(event);\n      expect(search.classList.contains('bx--toolbar-search-container-active')).toBe(false);\n    });","file":"spec/data-table_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not given","suites":["Test date picker","Constructor"],"updatePoint":{"line":6,"column":49,"index":356},"line":6,"code":"    it('Should throw if root element is not given', function () {\n      expect(() => {\n        new DatePicker();\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/date-picker_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not a DOM element","suites":["Test date picker","Constructor"],"updatePoint":{"line":11,"column":57,"index":577},"line":11,"code":"    it('Should throw if root element is not a DOM element', function () {\n      expect(() => {\n        new DatePicker(document.createTextNode(''));\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/date-picker_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should add a calendar","suites":["Test date picker","Creating a date picker with a single mode calendar"],"updatePoint":{"line":31,"column":29,"index":1398},"line":31,"code":"    it('Should add a calendar', function () {\n      expect(datePicker.calendar).not.toBe(undefined);\n    });","file":"spec/date-picker_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should be a single calendar and not range mode","suites":["Test date picker","Creating a date picker with a single mode calendar"],"updatePoint":{"line":34,"column":54,"index":1532},"line":34,"code":"    it('Should be a single calendar and not range mode', function () {\n      expect(datePicker.calendar.config.mode === 'single').toBe(true);\n    });","file":"spec/date-picker_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should show the calendar when the input field is clicked","suites":["Test date picker","Creating a date picker with a single mode calendar"],"updatePoint":{"line":37,"column":64,"index":1692},"line":37,"code":"    it('Should show the calendar when the input field is clicked', function () {\n      datePickerInput.dispatchEvent(new CustomEvent('focus', {\n        bubbles: true\n      }));\n      expect(datePicker.calendar.calendarContainer.classList.contains('open')).toBe(true);\n    });","file":"spec/date-picker_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should show the calendar when the calendar icon is clicked","suites":["Test date picker","Creating a date picker with a single mode calendar"],"updatePoint":{"line":43,"column":66,"index":1970},"line":43,"code":"    it('Should show the calendar when the calendar icon is clicked', function () {\n      datePickerIcon.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(datePicker.calendar.calendarContainer.classList.contains('open')).toBe(true);\n    });","file":"spec/date-picker_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should hide the calendar on click outside the date picker","suites":["Test date picker","Creating a date picker with a single mode calendar"],"updatePoint":{"line":49,"column":65,"index":2246},"line":49,"code":"    it('Should hide the calendar on click outside the date picker', function () {\n      // Avoid using open() API as we force it open during the event loop where open() is called\n      datePicker.calendar.calendarContainer.classList.add('open');\n      datePicker.calendar.isOpen = true;\n      container.dispatchEvent(Object.assign(new CustomEvent('mousedown', {\n        bubbles: true\n      }), {\n        which: 1\n      }));\n      expect(datePicker.calendar.calendarContainer.classList.contains('open')).toBe(false);\n    });","file":"spec/date-picker_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should update the selected date in the calendar when input changes","suites":["Test date picker","Creating a date picker with a single mode calendar"],"updatePoint":{"line":60,"column":74,"index":2779},"line":60,"code":"    it('Should update the selected date in the calendar when input changes', function () {\n      datePickerInput.value = '10/10/2017';\n      datePickerInput.dispatchEvent(new CustomEvent('change', {\n        bubbles: true,\n        detail: {\n          isNotFromFlatpickr: true\n        }\n      }));\n      expect(datePicker.calendar.selectedDates[0].valueOf()).toBe(datePicker.calendar.parseDate(datePickerInput.value).valueOf());\n    });","file":"spec/date-picker_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should add a calendar","suites":["Test date picker","Creating a date picker with a range mode calendar"],"updatePoint":{"line":95,"column":29,"index":4176},"line":95,"code":"    it('Should add a calendar', function () {\n      expect(datePicker.calendar).not.toBe(undefined);\n    });","file":"spec/date-picker_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should be a range calendar","suites":["Test date picker","Creating a date picker with a range mode calendar"],"updatePoint":{"line":98,"column":34,"index":4290},"line":98,"code":"    it('Should be a range calendar', function () {\n      expect(datePicker.calendar.config.mode === 'range').toBe(true);\n    });","file":"spec/date-picker_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should show the calendar when the first input field is clicked","suites":["Test date picker","Creating a date picker with a range mode calendar"],"updatePoint":{"line":101,"column":70,"index":4455},"line":101,"code":"    it('Should show the calendar when the first input field is clicked', function () {\n      datePickerInputFrom.dispatchEvent(new CustomEvent('focus', {\n        bubbles: true\n      }));\n      expect(datePicker.calendar.calendarContainer.classList.contains('open')).toBe(true);\n    });","file":"spec/date-picker_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should show the calendar when the second input field is clicked","suites":["Test date picker","Creating a date picker with a range mode calendar"],"updatePoint":{"line":107,"column":71,"index":4742},"line":107,"code":"    it('Should show the calendar when the second input field is clicked', function () {\n      datePickerInputTo.dispatchEvent(new CustomEvent('focus', {\n        bubbles: true\n      }));\n      expect(datePicker.calendar.calendarContainer.classList.contains('open')).toBe(true);\n    });","file":"spec/date-picker_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should show the calendar when the calendar icon is clicked","suites":["Test date picker","Creating a date picker with a range mode calendar"],"updatePoint":{"line":113,"column":66,"index":5022},"line":113,"code":"    it('Should show the calendar when the calendar icon is clicked', function () {\n      datePickerIcon.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(datePicker.calendar.calendarContainer.classList.contains('open')).toBe(true);\n    });","file":"spec/date-picker_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should hide the calendar on click outside the date picker","suites":["Test date picker","Creating a date picker with a range mode calendar"],"updatePoint":{"line":119,"column":65,"index":5298},"line":119,"code":"    it('Should hide the calendar on click outside the date picker', function () {\n      // Avoid using open() API as we force it open during the event loop where open() is called\n      datePicker.calendar.calendarContainer.classList.add('open');\n      datePicker.calendar.isOpen = true;\n      container.dispatchEvent(Object.assign(new CustomEvent('mousedown', {\n        bubbles: true\n      }), {\n        which: 1\n      }));\n      expect(datePicker.calendar.calendarContainer.classList.contains('open')).toBe(false);\n    });","file":"spec/date-picker_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should update the selected date in the calendar when input changes","suites":["Test date picker","Creating a date picker with a range mode calendar"],"updatePoint":{"line":130,"column":74,"index":5831},"line":130,"code":"    it('Should update the selected date in the calendar when input changes', function () {\n      datePickerInputFrom.value = '10/10/2017';\n      datePickerInputFrom.dispatchEvent(new CustomEvent('change', {\n        bubbles: true,\n        detail: {\n          isNotFromFlatpickr: true\n        }\n      }));\n      expect(datePicker.calendar.selectedDates[0].valueOf()).toBe(datePicker.calendar.parseDate(datePickerInputFrom.value).valueOf());\n    });","file":"spec/date-picker_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not given","suites":["Dropdown","Constructor"],"updatePoint":{"line":7,"column":49,"index":324},"line":7,"code":"    it('Should throw if root element is not given', function () {\n      expect(() => {\n        new Dropdown();\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not a DOM element","suites":["Dropdown","Constructor"],"updatePoint":{"line":12,"column":57,"index":543},"line":12,"code":"    it('Should throw if root element is not a DOM element', function () {\n      expect(() => {\n        new Dropdown(document.createTextNode(''));\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should not instantiate with \"open\" stateful modifier class","suites":["Dropdown","Constructor"],"updatePoint":{"line":17,"column":66,"index":798},"line":17,"code":"    it('Should not instantiate with \"open\" stateful modifier class', function () {\n      const element = document.createElement('ul');\n      new Dropdown(element);\n      document.body.appendChild(element);\n      expect(element.classList.contains('bx--dropdown--open')).toBe(false);\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should add \"open\" stateful modifier class","suites":["Dropdown","Toggle"],"updatePoint":{"line":45,"column":49,"index":1963},"line":45,"code":"    it('Should add \"open\" stateful modifier class', function () {\n      element.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(element.classList.contains('bx--dropdown--open')).toBe(true);\n      expect(element.getAttribute('class')).toBe('bx--dropdown bx--dropdown--open');\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should remove \"open\" stateful modifier class (closed default state)","suites":["Dropdown","Toggle"],"updatePoint":{"line":52,"column":75,"index":2311},"line":52,"code":"    it('Should remove \"open\" stateful modifier class (closed default state)', function () {\n      element.classList.add('bx--dropdown--open');\n      element.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(element.classList.contains('bx--dropdown--open')).toBe(false);\n      expect(element.getAttribute('class')).toBe('bx--dropdown');\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should always close dropdown when clicking document","suites":["Dropdown","Toggle"],"updatePoint":{"line":60,"column":59,"index":2676},"line":60,"code":"    it('Should always close dropdown when clicking document', function () {\n      element.classList.add('bx--dropdown--open');\n      document.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(element.getAttribute('class')).toBe('bx--dropdown');\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should close dropdown when clicking on an item","suites":["Dropdown","Toggle"],"updatePoint":{"line":67,"column":54,"index":2961},"line":67,"code":"    it('Should close dropdown when clicking on an item', function () {\n      element.classList.add('bx--dropdown--open');\n      itemNode.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(element.getAttribute('class')).toBe('bx--dropdown');\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should open dropdown with enter key","suites":["Dropdown","Toggle"],"updatePoint":{"line":74,"column":43,"index":3235},"line":74,"code":"    it('Should open dropdown with enter key', function () {\n      spyOn(element, 'focus');\n      element.dispatchEvent(Object.assign(new CustomEvent('keydown'), {\n        which: 13\n      }));\n      expect(element.classList.contains('bx--dropdown--open'), 'Open state').toBe(true);\n      expect(element.focus, 'Focus requested').toHaveBeenCalledTimes(1);\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should close dropdown with enter key","suites":["Dropdown","Toggle"],"updatePoint":{"line":82,"column":44,"index":3598},"line":82,"code":"    it('Should close dropdown with enter key', async function () {\n      spyOn(element, 'focus');\n      element.classList.add('bx--dropdown--open');\n      element.dispatchEvent(Object.assign(new CustomEvent('keydown'), {\n        which: 13\n      }));\n      expect(element.classList.contains('bx--dropdown--open'), 'Open state').toBe(false);\n      await delay(0);\n      expect(element.focus, 'Focus requested').toHaveBeenCalledTimes(1);\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should open dropdown with space key","suites":["Dropdown","Toggle"],"updatePoint":{"line":92,"column":43,"index":4040},"line":92,"code":"    it('Should open dropdown with space key', function () {\n      spyOn(element, 'focus');\n      element.dispatchEvent(Object.assign(new CustomEvent('keydown'), {\n        which: 32\n      }));\n      expect(element.classList.contains('bx--dropdown--open'), 'Open state').toBe(true);\n      expect(element.focus, 'Focus requested').toHaveBeenCalledTimes(1);\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should close dropdown with space key","suites":["Dropdown","Toggle"],"updatePoint":{"line":100,"column":44,"index":4403},"line":100,"code":"    it('Should close dropdown with space key', async function () {\n      spyOn(element, 'focus');\n      element.classList.add('bx--dropdown--open');\n      element.dispatchEvent(Object.assign(new CustomEvent('keydown'), {\n        which: 32\n      }));\n      expect(element.classList.contains('bx--dropdown--open'), 'Open state').toBe(false);\n      await delay(0);\n      expect(element.focus, 'Focus requested').toHaveBeenCalledTimes(1);\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should not close dropdown with space key on an item","suites":["Dropdown","Toggle"],"updatePoint":{"line":110,"column":59,"index":4861},"line":110,"code":"    it('Should not close dropdown with space key on an item', function () {\n      spyOn(element, 'focus');\n      element.classList.add('bx--dropdown--open');\n      itemNode.dispatchEvent(Object.assign(new CustomEvent('keydown', {\n        bubbles: true\n      }), {\n        which: 32\n      }));\n      expect(element.classList.contains('bx--dropdown--open'), 'Open state').toBe(true);\n      expect(element.focus, 'Focus requested').not.toHaveBeenCalled();\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should close dropdown with ESC key","suites":["Dropdown","Toggle"],"updatePoint":{"line":121,"column":42,"index":5305},"line":121,"code":"    it('Should close dropdown with ESC key', async function () {\n      spyOn(element, 'focus');\n      element.classList.add('bx--dropdown--open');\n      element.dispatchEvent(Object.assign(new CustomEvent('keydown'), {\n        which: 27\n      }));\n      expect(element.classList.contains('bx--dropdown--open'), 'Open state').toBe(false);\n      await delay(0);\n      expect(element.focus, 'Focus requested').toHaveBeenCalledTimes(1);\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should close dropdown with ESC key on an item","suites":["Dropdown","Toggle"],"updatePoint":{"line":131,"column":53,"index":5757},"line":131,"code":"    it('Should close dropdown with ESC key on an item', async function () {\n      spyOn(element, 'focus');\n      element.classList.add('bx--dropdown--open');\n      itemNode.dispatchEvent(Object.assign(new CustomEvent('keydown', {\n        bubbles: true\n      }), {\n        which: 27\n      }));\n      expect(element.classList.contains('bx--dropdown--open'), 'Open state').toBe(false);\n      await delay(0);\n      expect(element.focus, 'Focus requested').toHaveBeenCalledTimes(1);\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should not open dropdown with ESC key","suites":["Dropdown","Toggle"],"updatePoint":{"line":143,"column":45,"index":6235},"line":143,"code":"    it('Should not open dropdown with ESC key', function () {\n      spyOn(element, 'focus');\n      element.dispatchEvent(Object.assign(new CustomEvent('keydown'), {\n        which: 27\n      }));\n      expect(element.classList.contains('bx--dropdown--open'), 'Open state').toBe(false);\n      expect(element.focus, 'Focus requested').not.toHaveBeenCalled();\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should not open when the disabled class is applied","suites":["Dropdown","Toggle"],"updatePoint":{"line":151,"column":58,"index":6611},"line":151,"code":"    it('Should not open when the disabled class is applied', function () {\n      element.classList.add('bx--dropdown--disabled');\n      element.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(element.classList.contains('bx--dropdown--open'), 'Open state').toBe(false);\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should add \"open\" stateful modifier class","suites":["Dropdown","Toggle with semantic markup"],"updatePoint":{"line":192,"column":49,"index":8169},"line":192,"code":"    it('Should add \"open\" stateful modifier class', function () {\n      element.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(element.classList.contains('bx--dropdown--open')).toBe(true);\n      expect(element.getAttribute('class')).toBe('bx--dropdown bx--dropdown--open');\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should setup active descendent when open","suites":["Dropdown","Toggle with semantic markup"],"updatePoint":{"line":199,"column":48,"index":8490},"line":199,"code":"    it('Should setup active descendent when open', function () {\n      trigger.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(list.getAttribute('aria-activedescendant')).toBe(itemNode.id);\n      expect(itemNode.classList.contains('bx--dropdown--focused')).toBe(true);\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should remove \"open\" stateful modifier class (closed default state)","suites":["Dropdown","Toggle with semantic markup"],"updatePoint":{"line":206,"column":75,"index":8833},"line":206,"code":"    it('Should remove \"open\" stateful modifier class (closed default state)', function () {\n      element.classList.add('bx--dropdown--open');\n      element.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(element.classList.contains('bx--dropdown--open')).toBe(false);\n      expect(element.getAttribute('class')).toBe('bx--dropdown');\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should remove active descendent setup when closed","suites":["Dropdown","Toggle with semantic markup"],"updatePoint":{"line":214,"column":57,"index":9196},"line":214,"code":"    it('Should remove active descendent setup when closed', function () {\n      // Open the dropdown\n      trigger.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      })); // Close the dropdown\n\n      trigger.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(list.hasAttribute('aria-activedescendant')).toBe(false);\n      expect(itemNode.classList.contains('bx--dropdown--focused')).toBe(false);\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should open dropdown with enter key","suites":["Dropdown","Toggle with semantic markup"],"updatePoint":{"line":226,"column":43,"index":9640},"line":226,"code":"    it('Should open dropdown with enter key', function () {\n      spyOn(list, 'focus');\n      element.dispatchEvent(Object.assign(new CustomEvent('keydown'), {\n        which: 13\n      }));\n      expect(element.classList.contains('bx--dropdown--open')).toBe(true);\n      expect(list.focus, 'Focus requested').toHaveBeenCalledTimes(1);\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should close dropdown with enter key","suites":["Dropdown","Toggle with semantic markup"],"updatePoint":{"line":234,"column":44,"index":9983},"line":234,"code":"    it('Should close dropdown with enter key', async function () {\n      spyOn(trigger, 'focus');\n      element.classList.add('bx--dropdown--open');\n      element.dispatchEvent(Object.assign(new CustomEvent('keydown'), {\n        which: 13\n      }));\n      expect(element.classList.contains('bx--dropdown--open')).toBe(false);\n      await delay(0);\n      expect(trigger.focus, 'Focus requested').toHaveBeenCalledTimes(1);\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should open dropdown with space key","suites":["Dropdown","Toggle with semantic markup"],"updatePoint":{"line":244,"column":43,"index":10411},"line":244,"code":"    it('Should open dropdown with space key', function () {\n      spyOn(list, 'focus');\n      element.dispatchEvent(Object.assign(new CustomEvent('keydown'), {\n        which: 32\n      }));\n      expect(element.classList.contains('bx--dropdown--open')).toBe(true);\n      expect(list.focus, 'Focus requested').toHaveBeenCalledTimes(1);\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should close dropdown with space key","suites":["Dropdown","Toggle with semantic markup"],"updatePoint":{"line":252,"column":44,"index":10754},"line":252,"code":"    it('Should close dropdown with space key', async function () {\n      spyOn(trigger, 'focus');\n      element.classList.add('bx--dropdown--open');\n      element.dispatchEvent(Object.assign(new CustomEvent('keydown'), {\n        which: 32\n      }));\n      expect(element.classList.contains('bx--dropdown--open')).toBe(false);\n      await delay(0);\n      expect(trigger.focus, 'Focus requested').toHaveBeenCalledTimes(1);\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should not close dropdown with space key on an item","suites":["Dropdown","Toggle with semantic markup"],"updatePoint":{"line":262,"column":59,"index":11198},"line":262,"code":"    it('Should not close dropdown with space key on an item', function () {\n      spyOn(element, 'focus');\n      element.classList.add('bx--dropdown--open');\n      itemNode.dispatchEvent(Object.assign(new CustomEvent('keydown', {\n        bubbles: true\n      }), {\n        which: 32\n      }));\n      expect(element.classList.contains('bx--dropdown--open')).toBe(true);\n      expect(element.focus, 'Focus requested').not.toHaveBeenCalled();\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should close dropdown with ESC key","suites":["Dropdown","Toggle with semantic markup"],"updatePoint":{"line":273,"column":42,"index":11628},"line":273,"code":"    it('Should close dropdown with ESC key', async function () {\n      spyOn(trigger, 'focus');\n      element.classList.add('bx--dropdown--open');\n      element.dispatchEvent(Object.assign(new CustomEvent('keydown'), {\n        which: 27\n      }));\n      expect(element.classList.contains('bx--dropdown--open')).toBe(false);\n      await delay(0);\n      expect(trigger.focus, 'Focus requested').toHaveBeenCalledTimes(1);\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should close dropdown with ESC key on an item","suites":["Dropdown","Toggle with semantic markup"],"updatePoint":{"line":283,"column":53,"index":12066},"line":283,"code":"    it('Should close dropdown with ESC key on an item', async function () {\n      spyOn(trigger, 'focus');\n      element.classList.add('bx--dropdown--open');\n      itemNode.dispatchEvent(Object.assign(new CustomEvent('keydown', {\n        bubbles: true\n      }), {\n        which: 27\n      }));\n      expect(element.classList.contains('bx--dropdown--open')).toBe(false);\n      await delay(0);\n      expect(trigger.focus, 'Focus requested').toHaveBeenCalledTimes(1);\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should not open dropdown with ESC key","suites":["Dropdown","Toggle with semantic markup"],"updatePoint":{"line":295,"column":45,"index":12530},"line":295,"code":"    it('Should not open dropdown with ESC key', function () {\n      spyOn(element, 'focus');\n      element.dispatchEvent(Object.assign(new CustomEvent('keydown'), {\n        which: 27\n      }));\n      expect(element.classList.contains('bx--dropdown--open')).toBe(false);\n      expect(element.focus, 'Focus requested').not.toHaveBeenCalled();\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should add/remove \"selected\" modifier class","suites":["Dropdown","Selecting an item"],"updatePoint":{"line":343,"column":51,"index":14311},"line":343,"code":"    it('Should add/remove \"selected\" modifier class', function () {\n      itemNodes[1].dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(itemNodes[0].parentElement.classList.contains('bx--dropdown--selected'), 'Unselected item').toBe(false);\n      expect(itemNodes[1].parentElement.classList.contains('bx--dropdown--selected'), 'Selected item').toBe(true);\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should update text","suites":["Dropdown","Selecting an item"],"updatePoint":{"line":350,"column":26,"index":14688},"line":350,"code":"    it('Should update text', function () {\n      itemNodes[1].dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(textNode.textContent).toBe('1');\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should not update text if navigation","suites":["Dropdown","Selecting an item"],"updatePoint":{"line":356,"column":44,"index":14896},"line":356,"code":"    it('Should not update text if navigation', function () {\n      element.setAttribute('data-dropdown-type', 'navigation');\n      itemNodes[1].dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(textNode.textContent).toBe('0');\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should not add \"selected\" modifier class if dropdown type is navigation","suites":["Dropdown","Selecting an item"],"updatePoint":{"line":363,"column":79,"index":15203},"line":363,"code":"    it('Should not add \"selected\" modifier class if dropdown type is navigation', function () {\n      element.setAttribute('data-dropdown-type', 'navigation');\n      itemNodes[1].dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(itemNodes[0].parentElement.classList.contains('bx--dropdown--selected'), 'Unselected item').toBe(false);\n      expect(itemNodes[1].parentElement.classList.contains('bx--dropdown--selected'), 'Selected item').toBe(false);\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should not cause an error if text does not exist","suites":["Dropdown","Selecting an item"],"updatePoint":{"line":371,"column":56,"index":15675},"line":371,"code":"    it('Should not cause an error if text does not exist', function () {\n      textNode.parentNode.removeChild(textNode);\n      expect(() => {\n        itemNodes[1].dispatchEvent(new CustomEvent('click', {\n          bubbles: true\n        }));\n      }, 'Error').not.toThrowError();\n      expect(textNode.textContent, 'Text').toBe('0');\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should provide a way to cancel switching item","suites":["Dropdown","Selecting an item"],"updatePoint":{"line":380,"column":53,"index":16014},"line":380,"code":"    it('Should provide a way to cancel switching item', function () {\n      events.on(element, 'dropdown-beingselected', e => {\n        expect(e.detail.item).toBe(itemNodes[1]);\n        e.preventDefault();\n      });\n      itemNodes[1].dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(itemNodes[0].parentElement.classList.contains('bx--dropdown--selected'), 'Other item').toBe(true);\n      expect(itemNodes[1].parentElement.classList.contains('bx--dropdown--selected'), 'Clicked item').toBe(false);\n      expect(textNode.textContent).toBe('0');\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should select the first one for forward navigation if there is no selection","suites":["Dropdown","Navigating focus"],"updatePoint":{"line":444,"column":83,"index":18548},"line":444,"code":"    it('Should select the first one for forward navigation if there is no selection', function () {\n      itemNodes.forEach(item => {\n        spyOn(item, 'focus');\n      });\n      const defaultPrevented = !element.dispatchEvent(Object.assign(new CustomEvent('keydown', {\n        cancelable: true\n      }), {\n        which: 40\n      }));\n      expect(defaultPrevented, 'Canceling event').toBe(true);\n      expect(itemNodes[0].focus, 'Focus on 1st item').toHaveBeenCalledTimes(1);\n      expect(itemNodes[1].focus, 'Focus on 2nd item').not.toHaveBeenCalled();\n      expect(itemNodes[2].focus, 'Focus on 3rd item').not.toHaveBeenCalled();\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should select the last one for backward navigation if there is no selection","suites":["Dropdown","Navigating focus"],"updatePoint":{"line":458,"column":83,"index":19191},"line":458,"code":"    it('Should select the last one for backward navigation if there is no selection', function () {\n      itemNodes.forEach(item => {\n        spyOn(item, 'focus');\n      });\n      element.dispatchEvent(Object.assign(new CustomEvent('keydown'), {\n        which: 38\n      }));\n      expect(itemNodes[0].focus, 'Focus on 1st item').not.toHaveBeenCalled();\n      expect(itemNodes[1].focus, 'Focus on 2nd item').not.toHaveBeenCalled();\n      expect(itemNodes[2].focus, 'Focus on 3rd item').toHaveBeenCalledTimes(1);\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should start with selection for forward navigation","suites":["Dropdown","Navigating focus"],"updatePoint":{"line":469,"column":58,"index":19685},"line":469,"code":"    it('Should start with selection for forward navigation', function () {\n      itemNodes[0].parentElement.classList.add('bx--dropdown--selected');\n      itemNodes.forEach(item => {\n        spyOn(item, 'focus');\n      });\n      const defaultPrevented = !element.dispatchEvent(Object.assign(new CustomEvent('keydown', {\n        cancelable: true\n      }), {\n        which: 40\n      }));\n      expect(defaultPrevented, 'Canceling event').toBe(true);\n      expect(itemNodes[0].focus, 'Focus on 1st item').not.toHaveBeenCalled();\n      expect(itemNodes[1].focus, 'Focus on 2nd item').toHaveBeenCalledTimes(1);\n      expect(itemNodes[2].focus, 'Focus on 3rd item').not.toHaveBeenCalled();\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should start with selection for backward navigation","suites":["Dropdown","Navigating focus"],"updatePoint":{"line":484,"column":59,"index":20378},"line":484,"code":"    it('Should start with selection for backward navigation', function () {\n      itemNodes[2].parentElement.classList.add('bx--dropdown--selected');\n      itemNodes.forEach(item => {\n        spyOn(item, 'focus');\n      });\n      const defaultPrevented = !element.dispatchEvent(Object.assign(new CustomEvent('keydown', {\n        cancelable: true\n      }), {\n        which: 38\n      }));\n      expect(defaultPrevented, 'Canceling event').toBe(true);\n      expect(itemNodes[0].focus, 'Focus on 1st item').not.toHaveBeenCalled();\n      expect(itemNodes[1].focus, 'Focus on 2nd item').toHaveBeenCalledTimes(1);\n      expect(itemNodes[2].focus, 'Focus on 3rd item').not.toHaveBeenCalled();\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should handle overflow for forward navigation","suites":["Dropdown","Navigating focus"],"updatePoint":{"line":499,"column":53,"index":21065},"line":499,"code":"    it('Should handle overflow for forward navigation', function () {\n      itemNodes[2].classList.add('bx--dropdown--selected');\n      itemNodes.forEach(item => {\n        spyOn(item, 'focus');\n      });\n      const defaultPrevented = !element.dispatchEvent(Object.assign(new CustomEvent('keydown', {\n        cancelable: true\n      }), {\n        which: 40\n      }));\n      expect(defaultPrevented, 'Canceling event').toBe(true);\n      expect(itemNodes[0].focus, 'Focus on 1st item').toHaveBeenCalledTimes(1);\n      expect(itemNodes[1].focus, 'Focus on 2nd item').not.toHaveBeenCalled();\n      expect(itemNodes[2].focus, 'Focus on 3rd item').not.toHaveBeenCalled();\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should handle underflow for backward navigation","suites":["Dropdown","Navigating focus"],"updatePoint":{"line":514,"column":55,"index":21740},"line":514,"code":"    it('Should handle underflow for backward navigation', function () {\n      itemNodes[0].classList.add('bx--dropdown--selected');\n      itemNodes.forEach(item => {\n        spyOn(item, 'focus');\n      });\n      element.dispatchEvent(Object.assign(new CustomEvent('keydown'), {\n        which: 38\n      }));\n      expect(itemNodes[0].focus, 'Focus on 1st item').not.toHaveBeenCalled();\n      expect(itemNodes[1].focus, 'Focus on 2nd item').not.toHaveBeenCalled();\n      expect(itemNodes[2].focus, 'Focus on 3rd item').toHaveBeenCalledTimes(1);\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should start with focused element over selection for forward navigation","suites":["Dropdown","Navigating focus"],"updatePoint":{"line":526,"column":79,"index":22315},"line":526,"code":"    it('Should start with focused element over selection for forward navigation', function () {\n      spyOn(dropdown, 'getCurrentNavigation').and.callFake(function () {\n        return itemNodes[0];\n      });\n      itemNodes[2].classList.add('bx--dropdown--selected');\n      itemNodes.forEach(item => {\n        spyOn(item, 'focus');\n      });\n      const defaultPrevented = !element.dispatchEvent(Object.assign(new CustomEvent('keydown', {\n        cancelable: true\n      }), {\n        which: 40\n      }));\n      expect(defaultPrevented, 'Canceling event').toBe(true);\n      expect(itemNodes[0].focus, 'Focus on 1st item').not.toHaveBeenCalled();\n      expect(itemNodes[1].focus, 'Focus on 2nd item').toHaveBeenCalledTimes(1);\n      expect(itemNodes[2].focus, 'Focus on 3rd item').not.toHaveBeenCalled();\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should start with focused element over selection for backward navigation","suites":["Dropdown","Navigating focus"],"updatePoint":{"line":544,"column":80,"index":23127},"line":544,"code":"    it('Should start with focused element over selection for backward navigation', function () {\n      itemNodes[0].classList.add('bx--dropdown--selected');\n      spyOn(dropdown, 'getCurrentNavigation').and.callFake(function () {\n        return itemNodes[2];\n      });\n      itemNodes.forEach(item => {\n        spyOn(item, 'focus');\n      });\n      element.dispatchEvent(Object.assign(new CustomEvent('keydown'), {\n        which: 38\n      }));\n      expect(itemNodes[0].focus, 'Focus on 1st item').not.toHaveBeenCalled();\n      expect(itemNodes[1].focus, 'Focus on 2nd item').toHaveBeenCalledTimes(1);\n      expect(itemNodes[2].focus, 'Focus on 3rd item').not.toHaveBeenCalled();\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should skip selected items","suites":["Dropdown","Navigating focus"],"updatePoint":{"line":559,"column":34,"index":23769},"line":559,"code":"    it('Should skip selected items', function () {\n      spyOn(dropdown, 'getCurrentNavigation').and.callFake(function () {\n        return itemNodes[0];\n      });\n      itemNodes[1].parentElement.classList.add('bx--dropdown--selected');\n      itemNodes.forEach(item => {\n        spyOn(item, 'focus');\n      });\n      const defaultPrevented = !element.dispatchEvent(Object.assign(new CustomEvent('keydown', {\n        cancelable: true\n      }), {\n        which: 40\n      }));\n      expect(defaultPrevented, 'Canceling event').toBe(true);\n      expect(itemNodes[0].focus, 'Focus on 1st item').not.toHaveBeenCalled();\n      expect(itemNodes[1].focus, 'Focus on 2nd item').not.toHaveBeenCalled();\n      expect(itemNodes[2].focus, 'Focus on 3rd item').toHaveBeenCalledTimes(1);\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should skip items with hidden link","suites":["Dropdown","Navigating focus"],"updatePoint":{"line":577,"column":42,"index":24557},"line":577,"code":"    it('Should skip items with hidden link', function () {\n      spyOn(dropdown, 'getCurrentNavigation').and.callFake(function () {\n        return itemNodes[0];\n      });\n      itemNodes[1].setAttribute('hidden', '');\n      itemNodes.forEach(item => {\n        spyOn(item, 'focus');\n      });\n      const defaultPrevented = !element.dispatchEvent(Object.assign(new CustomEvent('keydown', {\n        cancelable: true\n      }), {\n        which: 40\n      }));\n      expect(defaultPrevented, 'Canceling event').toBe(true);\n      expect(itemNodes[0].focus, 'Focus on 1st item').not.toHaveBeenCalled();\n      expect(itemNodes[1].focus, 'Focus on 2nd item').not.toHaveBeenCalled();\n      expect(itemNodes[2].focus, 'Focus on 3rd item').toHaveBeenCalledTimes(1);\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should skip items with hidden container","suites":["Dropdown","Navigating focus"],"updatePoint":{"line":595,"column":47,"index":25323},"line":595,"code":"    it('Should skip items with hidden container', function () {\n      spyOn(dropdown, 'getCurrentNavigation').and.callFake(function () {\n        return itemNodes[0];\n      });\n      itemNodes[1].parentNode.setAttribute('hidden', '');\n      itemNodes.forEach(item => {\n        spyOn(item, 'focus');\n      });\n      const defaultPrevented = !element.dispatchEvent(Object.assign(new CustomEvent('keydown', {\n        cancelable: true\n      }), {\n        which: 40\n      }));\n      expect(defaultPrevented, 'Canceling event').toBe(true);\n      expect(itemNodes[0].focus, 'Focus on 1st item').not.toHaveBeenCalled();\n      expect(itemNodes[1].focus, 'Focus on 2nd item').not.toHaveBeenCalled();\n      expect(itemNodes[2].focus, 'Focus on 3rd item').toHaveBeenCalledTimes(1);\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should skip items with link with aria-hidden","suites":["Dropdown","Navigating focus"],"updatePoint":{"line":613,"column":52,"index":26105},"line":613,"code":"    it('Should skip items with link with aria-hidden', function () {\n      spyOn(dropdown, 'getCurrentNavigation').and.callFake(function () {\n        return itemNodes[0];\n      });\n      itemNodes[1].setAttribute('aria-hidden', 'true');\n      itemNodes.forEach(item => {\n        spyOn(item, 'focus');\n      });\n      const defaultPrevented = !element.dispatchEvent(Object.assign(new CustomEvent('keydown', {\n        cancelable: true\n      }), {\n        which: 40\n      }));\n      expect(defaultPrevented, 'Canceling event').toBe(true);\n      expect(itemNodes[0].focus, 'Focus on 1st item').not.toHaveBeenCalled();\n      expect(itemNodes[1].focus, 'Focus on 2nd item').not.toHaveBeenCalled();\n      expect(itemNodes[2].focus, 'Focus on 3rd item').toHaveBeenCalledTimes(1);\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should skip items with container with aria-hidden","suites":["Dropdown","Navigating focus"],"updatePoint":{"line":631,"column":57,"index":26890},"line":631,"code":"    it('Should skip items with container with aria-hidden', function () {\n      spyOn(dropdown, 'getCurrentNavigation').and.callFake(function () {\n        return itemNodes[0];\n      });\n      itemNodes[1].parentNode.setAttribute('aria-hidden', 'true');\n      itemNodes.forEach(item => {\n        spyOn(item, 'focus');\n      });\n      const defaultPrevented = !element.dispatchEvent(Object.assign(new CustomEvent('keydown', {\n        cancelable: true\n      }), {\n        which: 40\n      }));\n      expect(defaultPrevented, 'Canceling event').toBe(true);\n      expect(itemNodes[0].focus, 'Focus on 1st item').not.toHaveBeenCalled();\n      expect(itemNodes[1].focus, 'Focus on 2nd item').not.toHaveBeenCalled();\n      expect(itemNodes[2].focus, 'Focus on 3rd item').toHaveBeenCalledTimes(1);\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should not navigate unless dropdown is open","suites":["Dropdown","Navigating focus"],"updatePoint":{"line":649,"column":51,"index":27680},"line":649,"code":"    it('Should not navigate unless dropdown is open', function () {\n      element.classList.remove('bx--dropdown--open');\n      itemNodes.forEach(item => {\n        spyOn(item, 'focus');\n      });\n      const defaultPrevented = !element.dispatchEvent(Object.assign(new CustomEvent('keydown', {\n        cancelable: true\n      }), {\n        which: 40\n      }));\n      expect(defaultPrevented, 'Canceling event').not.toBe(true);\n      expect(itemNodes[0].focus, 'Focus on 1st item').not.toHaveBeenCalled();\n      expect(itemNodes[1].focus, 'Focus on 2nd item').not.toHaveBeenCalled();\n      expect(itemNodes[2].focus, 'Focus on 3rd item').not.toHaveBeenCalled();\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should focus the first item with no selection","suites":["Dropdown","Navigating focus with semantic markup"],"updatePoint":{"line":711,"column":53,"index":30081},"line":711,"code":"    it('Should focus the first item with no selection', function () {\n      trigger.click();\n      expect(list.getAttribute('aria-activedescendant')).toBe(itemNodes[0].id);\n      expect(itemNodes[0].classList.contains('bx--dropdown--focused'), 'Focus on 1st item').toBe(true);\n      expect(itemNodes[1].classList.contains('bx--dropdown--focused'), 'Focus on 2nd item').toBe(false);\n      expect(itemNodes[2].classList.contains('bx--dropdown--focused'), 'Focus on 3rd item').toBe(false);\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should start with selection for forward navigation","suites":["Dropdown","Navigating focus with semantic markup"],"updatePoint":{"line":718,"column":58,"index":30581},"line":718,"code":"    it('Should start with selection for forward navigation', function () {\n      itemNodes[0].classList.add('bx--dropdown--selected');\n      trigger.click();\n      const defaultPrevented = !element.dispatchEvent(Object.assign(new CustomEvent('keydown', {\n        cancelable: true\n      }), {\n        which: 40\n      }));\n      expect(defaultPrevented, 'Canceling event').toBe(true);\n      expect(list.getAttribute('aria-activedescendant')).toBe(itemNodes[1].id);\n      expect(itemNodes[0].classList.contains('bx--dropdown--focused'), 'Focus on 1st item').toBe(false);\n      expect(itemNodes[1].classList.contains('bx--dropdown--focused'), 'Focus on 2nd item').toBe(true);\n      expect(itemNodes[2].classList.contains('bx--dropdown--focused'), 'Focus on 3rd item').toBe(false);\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should start with selection for backward navigation","suites":["Dropdown","Navigating focus with semantic markup"],"updatePoint":{"line":732,"column":59,"index":31367},"line":732,"code":"    it('Should start with selection for backward navigation', function () {\n      itemNodes[2].parentElement.classList.add('bx--dropdown--selected');\n      trigger.click();\n      const defaultPrevented = !element.dispatchEvent(Object.assign(new CustomEvent('keydown', {\n        cancelable: true\n      }), {\n        which: 38\n      }));\n      expect(defaultPrevented, 'Canceling event').toBe(true);\n      expect(list.getAttribute('aria-activedescendant')).toBe(itemNodes[1].id);\n      expect(itemNodes[0].classList.contains('bx--dropdown--focused'), 'Focus on 1st item').toBe(false);\n      expect(itemNodes[1].classList.contains('bx--dropdown--focused'), 'Focus on 2nd item').toBe(true);\n      expect(itemNodes[2].classList.contains('bx--dropdown--focused'), 'Focus on 3rd item').toBe(false);\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should handle overflow for forward navigation","suites":["Dropdown","Navigating focus with semantic markup"],"updatePoint":{"line":746,"column":53,"index":32161},"line":746,"code":"    it('Should handle overflow for forward navigation', function () {\n      itemNodes[2].parentElement.classList.add('bx--dropdown--selected');\n      trigger.click();\n      const defaultPrevented = !element.dispatchEvent(Object.assign(new CustomEvent('keydown', {\n        cancelable: true\n      }), {\n        which: 40\n      }));\n      expect(defaultPrevented, 'Canceling event').toBe(true);\n      expect(list.getAttribute('aria-activedescendant')).toBe(itemNodes[0].id);\n      expect(itemNodes[0].classList.contains('bx--dropdown--focused'), 'Focus on 1st item').toBe(true);\n      expect(itemNodes[1].classList.contains('bx--dropdown--focused'), 'Focus on 2nd item').toBe(false);\n      expect(itemNodes[2].classList.contains('bx--dropdown--focused'), 'Focus on 3rd item').toBe(false);\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should handle underflow for backward navigation","suites":["Dropdown","Navigating focus with semantic markup"],"updatePoint":{"line":760,"column":55,"index":32957},"line":760,"code":"    it('Should handle underflow for backward navigation', function () {\n      itemNodes[0].classList.add('bx--dropdown--selected');\n      trigger.click();\n      element.dispatchEvent(Object.assign(new CustomEvent('keydown'), {\n        which: 38\n      }));\n      expect(list.getAttribute('aria-activedescendant')).toBe(itemNodes[2].id);\n      expect(itemNodes[0].classList.contains('bx--dropdown--focused'), 'Focus on 1st item').toBe(false);\n      expect(itemNodes[1].classList.contains('bx--dropdown--focused'), 'Focus on 2nd item').toBe(false);\n      expect(itemNodes[2].classList.contains('bx--dropdown--focused'), 'Focus on 3rd item').toBe(true);\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should focus selected item with forward navigation","suites":["Dropdown","Navigating focus with show selected modifier"],"updatePoint":{"line":819,"column":58,"index":35411},"line":819,"code":"    it('Should focus selected item with forward navigation', function () {\n      itemNodes[1].parentElement.classList.add('bx--dropdown--selected');\n      trigger.click();\n      element.dispatchEvent(Object.assign(new CustomEvent('keydown', {\n        cancelable: true\n      }), {\n        // user presses up\n        which: 38\n      })); // Verify the navigation worked\n\n      expect(itemNodes[0].classList.contains('bx--dropdown--focused'), 'Focus on 1st item').toBe(true);\n      expect(itemNodes[1].classList.contains('bx--dropdown--focused'), 'Focus on 2nd item').toBe(false);\n      expect(itemNodes[2].classList.contains('bx--dropdown--focused'), 'Focus on 3rd item').toBe(false);\n      element.dispatchEvent(Object.assign(new CustomEvent('keydown', {\n        cancelable: true\n      }), {\n        // user presses down\n        which: 40\n      })); // Verify that the selected item can be focused\n\n      expect(itemNodes[0].classList.contains('bx--dropdown--focused'), 'Focus on 1st item').toBe(false);\n      expect(itemNodes[1].classList.contains('bx--dropdown--focused'), 'Focus on 2nd item').toBe(true);\n      expect(itemNodes[2].classList.contains('bx--dropdown--focused'), 'Focus on 3rd item').toBe(false);\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should focus selected item with backward navigation","suites":["Dropdown","Navigating focus with show selected modifier"],"updatePoint":{"line":843,"column":59,"index":36632},"line":843,"code":"    it('Should focus selected item with backward navigation', function () {\n      itemNodes[1].parentElement.classList.add('bx--dropdown--selected');\n      trigger.click();\n      element.dispatchEvent(Object.assign(new CustomEvent('keydown', {\n        cancelable: true\n      }), {\n        // user presses down\n        which: 40\n      })); // Verify the navigation worked\n\n      expect(itemNodes[0].classList.contains('bx--dropdown--focused'), 'Focus on 1st item').toBe(false);\n      expect(itemNodes[1].classList.contains('bx--dropdown--focused'), 'Focus on 2nd item').toBe(false);\n      expect(itemNodes[2].classList.contains('bx--dropdown--focused'), 'Focus on 3rd item').toBe(true);\n      element.dispatchEvent(Object.assign(new CustomEvent('keydown', {\n        cancelable: true\n      }), {\n        // user presses up\n        which: 38\n      })); // Verify that the selected item can be focused\n\n      expect(itemNodes[0].classList.contains('bx--dropdown--focused'), 'Focus on 1st item').toBe(false);\n      expect(itemNodes[1].classList.contains('bx--dropdown--focused'), 'Focus on 2nd item').toBe(true);\n      expect(itemNodes[2].classList.contains('bx--dropdown--focused'), 'Focus on 3rd item').toBe(false);\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should close when dropdown loses focus","suites":["Dropdown","Close on blur"],"updatePoint":{"line":900,"column":46,"index":39002},"line":900,"code":"    it('Should close when dropdown loses focus', function () {\n      input.focus();\n      expect(dropdown.element.contains(document.activeElement)).toBe(false);\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should prevent creating duplicate instances","suites":["Dropdown","Managing instances: create() and release()"],"updatePoint":{"line":918,"column":51,"index":39548},"line":918,"code":"    it('Should prevent creating duplicate instances', function () {\n      let first;\n      let second;\n\n      try {\n        first = Dropdown.create(element);\n        second = Dropdown.create(element);\n        expect(first).toBe(second);\n      } finally {\n        first && first.release();\n\n        if (first !== second) {\n          second && second.release();\n        }\n      }\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should create a new instance for an element if an earlier one has been released","suites":["Dropdown","Managing instances: create() and release()"],"updatePoint":{"line":934,"column":87,"index":39970},"line":934,"code":"    it('Should create a new instance for an element if an earlier one has been released', function () {\n      let first;\n      let second;\n\n      try {\n        first = Dropdown.create(element);\n        first.release();\n        second = Dropdown.create(element);\n        expect(first).not.toBe(second);\n      } finally {\n        first && first.release();\n\n        if (first !== second) {\n          second && second.release();\n        }\n      }\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should remove click event listener on document object once the instance is released","suites":["Dropdown","Managing instances: create() and release()"],"updatePoint":{"line":951,"column":91,"index":40425},"line":951,"code":"    it('Should remove click event listener on document object once the instance is released', function () {\n      element.classList.add('bx--dropdown--open');\n      document.body.appendChild(element);\n      Dropdown.create(element).release();\n      document.body.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(element.classList.contains('bx--dropdown--open')).toBe(true);\n    });","file":"spec/dropdown_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should throw if root element is not given","suites":["File Uploader","Constructor"],"updatePoint":{"line":16,"column":49,"index":634},"line":16,"code":"    it('should throw if root element is not given', function () {\n      expect(() => {\n        new FileUploader();\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/file-uploader_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should throw if root element is not a DOM element","suites":["File Uploader","Constructor"],"updatePoint":{"line":21,"column":57,"index":857},"line":21,"code":"    it('should throw if root element is not a DOM element', function () {\n      expect(() => {\n        new FileUploader(document.createTextNode(''));\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/file-uploader_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should throw if the <input type=\"file\"> is not found","suites":["File Uploader","Constructor"],"updatePoint":{"line":26,"column":60,"index":1110},"line":26,"code":"    it('should throw if the <input type=\"file\"> is not found', function () {\n      expect(() => {\n        const div = document.createElement('div');\n        div.innerHTML = `<div data-file-container></div>`;\n        new FileUploader(div);\n      }).toThrowError(TypeError, 'Cannot find the file input box.');\n    });","file":"spec/file-uploader_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should throw if the <div data-file-container> is not found","suites":["File Uploader","Constructor"],"updatePoint":{"line":33,"column":66,"index":1432},"line":33,"code":"    it('should throw if the <div data-file-container> is not found', function () {\n      expect(() => {\n        const div = document.createElement('div');\n        div.innerHTML = `<input type=\"file\" class=\"bx--file-input\">`;\n        new FileUploader(div);\n      }).toThrowError(TypeError, 'Cannot find the file names container.');\n    });","file":"spec/file-uploader_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should set default options","suites":["File Uploader","Constructor"],"updatePoint":{"line":40,"column":34,"index":1739},"line":40,"code":"    it('should set default options', function () {\n      expect(flattenOptions(instance.options)).toEqual({\n        selectorInit: '[data-file]',\n        selectorInput: 'input[type=\"file\"].bx--file-input',\n        selectorContainer: '[data-file-container]',\n        selectorCloseButton: '.bx--file-close',\n        selectorSelectedFile: '.bx--file__selected-file',\n        selectorDropContainer: '[data-file-drop-container]',\n        selectorOtherDropContainers: '[data-drop-container]',\n        classLoading: 'bx--loading bx--loading--small',\n        classLoadingAnimation: 'bx--inline-loading__animation',\n        classLoadingSvg: 'bx--loading__svg',\n        classLoadingBackground: 'bx--loading__background',\n        classLoadingStroke: 'bx--loading__stroke',\n        classFileName: 'bx--file-filename',\n        classFileClose: 'bx--file-close',\n        classFileComplete: 'bx--file-complete',\n        classSelectedFile: 'bx--file__selected-file',\n        classStateContainer: 'bx--file__state-container',\n        classDragOver: 'bx--file__drop-container--drag-over',\n        eventBeforeDeleteFilenameFileuploader: 'fileuploader-before-delete-filename',\n        eventAfterDeleteFilenameFileuploader: 'fileuploader-after-delete-filename'\n      });\n    });","file":"spec/file-uploader_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should access container element","suites":["File Uploader","Constructor"],"updatePoint":{"line":64,"column":39,"index":3000},"line":64,"code":"    it('should access container element', function () {\n      const container = element.querySelector('[data-file-container]');\n      expect(instance.container).toBe(container);\n    });","file":"spec/file-uploader_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should access the input element","suites":["File Uploader","Constructor"],"updatePoint":{"line":68,"column":39,"index":3186},"line":68,"code":"    it('should access the input element', function () {\n      const input = element.querySelector('input');\n      expect(instance.input).toBe(input);\n    });","file":"spec/file-uploader_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should access id for input","suites":["File Uploader","Constructor"],"updatePoint":{"line":72,"column":34,"index":3339},"line":72,"code":"    it('should access id for input', function () {\n      const input = element.querySelector('input');\n      expect(instance.inputId).toBe(input.id);\n    });","file":"spec/file-uploader_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"_filenamesHTML method should use name","suites":["File Uploader","HTML methods"],"updatePoint":{"line":92,"column":45,"index":3967},"line":92,"code":"    it('_filenamesHTML method should use name', function () {\n      const filenamesHTML = instance._filenamesHTML('testName', 'testId');\n\n      const div = document.createElement('div');\n      div.innerHTML = filenamesHTML;\n      document.body.appendChild(div);\n      const nameElement = document.querySelector('.bx--file__selected-file .bx--file-filename');\n      expect(nameElement.innerHTML).toBe('testName');\n      document.body.removeChild(div);\n    });","file":"spec/file-uploader_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"_filenamesHTML method should use id param to for [data-for] attr","suites":["File Uploader","HTML methods"],"updatePoint":{"line":102,"column":72,"index":4453},"line":102,"code":"    it('_filenamesHTML method should use id param to for [data-for] attr', function () {\n      const filenamesHTML = instance._filenamesHTML('testName', 'testId');\n\n      const div = document.createElement('div');\n      div.innerHTML = filenamesHTML;\n      document.body.appendChild(div);\n      const idElement = document.querySelector('.bx--file__state-container');\n      expect(idElement.dataset.for).toBe('testId');\n      document.body.removeChild(div);\n    });","file":"spec/file-uploader_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"_uploadHTML method should return expected HTML string","suites":["File Uploader","HTML methods"],"updatePoint":{"line":112,"column":61,"index":4907},"line":112,"code":"    it('_uploadHTML method should return expected HTML string', function () {\n      const uploadHTML = instance._uploadHTML();\n\n      const div = document.createElement('div');\n      div.innerHTML = uploadHTML;\n      document.body.appendChild(div);\n      const uploadElement = document.querySelector('[data-inline-loading-spinner]');\n      expect(uploadElement.classList.contains('bx--loading')).toBe(true);\n      document.body.removeChild(div);\n    });","file":"spec/file-uploader_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"_closeButtonHTML method should return expected HTML string","suites":["File Uploader","HTML methods"],"updatePoint":{"line":122,"column":66,"index":5366},"line":122,"code":"    it('_closeButtonHTML method should return expected HTML string', function () {\n      const closeButtonHTML = instance._closeButtonHTML();\n\n      const div = document.createElement('div');\n      div.innerHTML = closeButtonHTML;\n      document.body.appendChild(div);\n      const closeButtonElement = document.querySelector('button[aria-label=\"close\"]');\n      expect(closeButtonElement.getAttribute('class').trim().split(/\\s+/).indexOf('bx--file-close') >= 0).toBe(true);\n      document.body.removeChild(div);\n    });","file":"spec/file-uploader_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"_checkmarkHTML method should return expected HTML string","suites":["File Uploader","HTML methods"],"updatePoint":{"line":132,"column":64,"index":5884},"line":132,"code":"    it('_checkmarkHTML method should return expected HTML string', function () {\n      const checkmarkHTML = instance._checkmarkHTML();\n\n      const div = document.createElement('div');\n      div.innerHTML = checkmarkHTML;\n      document.body.appendChild(div);\n      const closeButtonElement = document.querySelector('[width=\"16\"]');\n      expect(closeButtonElement.getAttribute('class').trim().split(/\\s+/).indexOf('bx--file-complete') >= 0).toBe(true);\n      document.body.removeChild(div);\n    });","file":"spec/file-uploader_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should throw if element param is not given","suites":["File Uploader","_removeState()"],"updatePoint":{"line":158,"column":50,"index":6833},"line":158,"code":"    it('should throw if element param is not given', function () {\n      expect(() => {\n        instance._removeState(document.createTextNode(''));\n      }).toThrowError(Error);\n    });","file":"spec/file-uploader_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should be called","suites":["File Uploader","_removeState()"],"updatePoint":{"line":163,"column":24,"index":6993},"line":163,"code":"    it('should be called', function () {\n      const parentEl = document.createElement('div');\n      const childEl = document.createElement('span');\n      parentEl.appendChild(childEl);\n      spyOn(instance, '_removeState');\n\n      instance._removeState(parentEl);\n\n      expect(instance._removeState).toHaveBeenCalled();\n    });","file":"spec/file-uploader_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should remove the firstChild of given element","suites":["File Uploader","_removeState()"],"updatePoint":{"line":173,"column":53,"index":7352},"line":173,"code":"    it('should remove the firstChild of given element', function () {\n      const parentEl = document.createElement('div');\n      parentEl.classList.add('foo');\n      const childEl = document.createElement('span');\n      parentEl.appendChild(childEl);\n      document.body.appendChild(parentEl);\n\n      instance._removeState(parentEl);\n\n      expect(document.querySelector('.foo').firstChild).toBe(null);\n      document.body.removeChild(parentEl);\n    });","file":"spec/file-uploader_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should throw if stateContainers are empty","suites":["File Uploader","_getStateContainers"],"updatePoint":{"line":201,"column":49,"index":8270},"line":201,"code":"    it('should throw if stateContainers are empty', function () {\n      expect(() => {\n        instance._getStateContainers();\n      }).toThrowError(Error);\n    });","file":"spec/file-uploader_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should throw if id for input[type=\"file\"] does not equal [data-for] attribute on state container","suites":["File Uploader","_getStateContainers"],"updatePoint":{"line":206,"column":104,"index":8490},"line":206,"code":"    it('should throw if id for input[type=\"file\"] does not equal [data-for] attribute on state container', function () {\n      const filenameElement = instance._filenamesHTML('name', 'unmatching-id');\n\n      instance.container.insertAdjacentHTML('beforeend', filenameElement);\n      expect(() => {\n        instance._getStateContainers();\n      }).toThrowError(Error);\n    });","file":"spec/file-uploader_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should be called","suites":["File Uploader","_getStateContainers"],"updatePoint":{"line":214,"column":24,"index":8786},"line":214,"code":"    it('should be called', function () {\n      const filenameElement = instance._filenamesHTML('name', instance.inputId);\n\n      instance.container.insertAdjacentHTML('beforeend', filenameElement);\n      spyOn(instance, '_getStateContainers');\n\n      instance._getStateContainers();\n\n      expect(instance._getStateContainers).toHaveBeenCalled();\n    });","file":"spec/file-uploader_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should return an array","suites":["File Uploader","_getStateContainers"],"updatePoint":{"line":224,"column":30,"index":9147},"line":224,"code":"    it('should return an array', function () {\n      const filenameElement = instance._filenamesHTML('name', instance.inputId);\n\n      instance.container.insertAdjacentHTML('beforeend', filenameElement);\n\n      const array = instance._getStateContainers();\n\n      expect(Array.isArray(array)).toBe(true);\n    });","file":"spec/file-uploader_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should have a length","suites":["File Uploader","_getStateContainers"],"updatePoint":{"line":233,"column":28,"index":9458},"line":233,"code":"    it('should have a length', function () {\n      const filenameElement = instance._filenamesHTML('name', instance.inputId);\n\n      instance.container.insertAdjacentHTML('beforeend', filenameElement);\n\n      const array = instance._getStateContainers();\n\n      expect(array.length).toBe(1);\n    });","file":"spec/file-uploader_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should have an empty stateContainer","suites":["File Uploader","_getStateContainers"],"updatePoint":{"line":242,"column":43,"index":9773},"line":242,"code":"    it('should have an empty stateContainer', function () {\n      const filenameElement = instance._filenamesHTML('name', instance.inputId);\n\n      instance.container.insertAdjacentHTML('beforeend', filenameElement);\n      const stateContainer = document.querySelector('.bx--file__state-container');\n      expect(stateContainer.innerHTML).toBe('');\n    });","file":"spec/file-uploader_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should be called on input change event","suites":["File Uploader","Displaying filenames with _displayFilenames"],"updatePoint":{"line":265,"column":46,"index":10623},"line":265,"code":"    it('should be called on input change event', function () {\n      spyOn(instance, '_displayFilenames');\n      instance.input.dispatchEvent(new CustomEvent('change', {\n        bubbles: true\n      }));\n      expect(instance._displayFilenames).toHaveBeenCalled();\n    });","file":"spec/file-uploader_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should be called","suites":["File Uploader","_handleStateChange"],"updatePoint":{"line":288,"column":24,"index":11338},"line":288,"code":"    it('should be called', function () {\n      const testHTML = '<ul><li class=\"test\">...</li><li class=\"test\">...</li></ul>';\n      const div = document.createElement('div');\n      div.id = 'bob';\n      div.innerHTML = testHTML;\n      document.body.appendChild(div);\n      spyOn(instance, '_handleStateChange');\n\n      instance._handleStateChange([...document.querySelectorAll('.test')], 1, div);\n\n      expect(instance._handleStateChange).toHaveBeenCalled();\n      document.body.removeChild(div);\n    });","file":"spec/file-uploader_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should be called","suites":["File Uploader","_handleDragDrop"],"updatePoint":{"line":319,"column":24,"index":12416},"line":319,"code":"    it('should be called', function () {\n      spyOn(instance, '_handleDragDrop');\n\n      instance._handleDragDrop(new CustomEvent('change', {\n        bubbles: true\n      }));\n\n      expect(instance._handleDragDrop).toHaveBeenCalled();\n    });","file":"spec/file-uploader_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should handle dragover event","suites":["File Uploader","_handleDragDrop"],"updatePoint":{"line":328,"column":36,"index":12672},"line":328,"code":"    it('should handle dragover event', function () {\n      const dragover = new CustomEvent('dragover', {\n        bubbles: true\n      });\n      Object.defineProperty(dragover, 'target', {\n        writable: false,\n        value: dropContainer\n      });\n      Object.defineProperty(dragover, 'dataTransfer', {\n        writable: false,\n        value: {\n          types: ['Files']\n        }\n      });\n      instance.dropContainer.dispatchEvent(dragover);\n      expect(instance.dropContainer.classList.contains(instance.options.classDragOver)).toBe(true);\n    });","file":"spec/file-uploader_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should handle dragleave event","suites":["File Uploader","_handleDragDrop"],"updatePoint":{"line":345,"column":37,"index":13232},"line":345,"code":"    it('should handle dragleave event', function () {\n      const dragleave = new CustomEvent('dragleave', {\n        bubbles: true\n      });\n      Object.defineProperty(dragleave, 'target', {\n        writable: false,\n        value: dropContainer\n      });\n      Object.defineProperty(dragleave, 'dataTransfer', {\n        writable: false,\n        value: {\n          types: ['Files']\n        }\n      });\n      document.dispatchEvent(dragleave);\n      expect(instance.dropContainer.classList.contains(instance.options.classDragOver)).toBe(false);\n    });","file":"spec/file-uploader_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should handle drop event","suites":["File Uploader","_handleDragDrop"],"updatePoint":{"line":362,"column":32,"index":13779},"line":362,"code":"    it('should handle drop event', function () {\n      spyOn(instance, '_displayFilenames');\n      const drop = new CustomEvent('drop', {\n        bubbles: true\n      });\n      Object.defineProperty(drop, 'target', {\n        writable: false,\n        value: dropContainer\n      });\n      Object.defineProperty(drop, 'dataTransfer', {\n        writable: false,\n        value: {\n          types: ['Files']\n        }\n      });\n      instance.dropContainer.dispatchEvent(drop);\n      expect(instance._displayFilenames).toHaveBeenCalled();\n      expect(instance.dropContainer.classList.contains(instance.options.classDragOver)).toBe(false);\n    });","file":"spec/file-uploader_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should ignore events from other file uploaders","suites":["File Uploader","_handleDragDrop"],"updatePoint":{"line":381,"column":54,"index":14442},"line":381,"code":"    it('should ignore events from other file uploaders', function () {\n      const dragover = new CustomEvent('dragover', {\n        bubbles: true\n      });\n      Object.defineProperty(dragover, 'target', {\n        writable: false,\n        value: document\n      });\n      Object.defineProperty(dragover, 'dataTransfer', {\n        writable: false,\n        value: {\n          types: ['Files']\n        }\n      });\n      const dragleave = new CustomEvent('dragleave', {\n        bubbles: true\n      });\n      Object.defineProperty(dragleave, 'target', {\n        writable: false,\n        value: document\n      });\n      Object.defineProperty(dragleave, 'dataTransfer', {\n        writable: false,\n        value: {\n          types: ['Files']\n        }\n      });\n      document.dispatchEvent(dragover);\n      document.dispatchEvent(dragleave);\n      expect(instance.dropContainer.classList.contains(instance.options.classDragOver)).toBe(false);\n    });","file":"spec/file-uploader_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not given","suites":["Test floating menu","Constructor"],"updatePoint":{"line":7,"column":49,"index":374},"line":7,"code":"    it('Should throw if root element is not given', function () {\n      expect(() => {\n        new FloatingMenu();\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/floating-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not a DOM element","suites":["Test floating menu","Constructor"],"updatePoint":{"line":12,"column":57,"index":597},"line":12,"code":"    it('Should throw if root element is not a DOM element', function () {\n      expect(() => {\n        new FloatingMenu(document.createTextNode(''));\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/floating-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should use bottom by default","suites":["Test floating menu","Setting menu direction"],"updatePoint":{"line":20,"column":36,"index":897},"line":20,"code":"    it('Should use bottom by default', function () {\n      expect((menu = new FloatingMenu(document.createElement('div'))).options.direction).toBe('bottom');\n    });","file":"spec/floating-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should read the direction from data-floating-menu-direction","suites":["Test floating menu","Setting menu direction"],"updatePoint":{"line":23,"column":67,"index":1094},"line":23,"code":"    it('Should read the direction from data-floating-menu-direction', function () {\n      const element = document.createElement('div');\n      element.dataset.floatingMenuDirection = 'left';\n      expect((menu = new FloatingMenu(element)).options.direction).toBe('left');\n    });","file":"spec/floating-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should use options.direction over data-floating-menu-direction","suites":["Test floating menu","Setting menu direction"],"updatePoint":{"line":28,"column":70,"index":1377},"line":28,"code":"    it('Should use options.direction over data-floating-menu-direction', function () {\n      const element = document.createElement('div');\n      element.dataset.floatingMenuDirection = 'left';\n      expect((menu = new FloatingMenu(element, {\n        direction: 'right'\n      })).options.direction).toBe('right');\n    });","file":"spec/floating-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should sanity check show()'s arguments","suites":["Test floating menu","Showing/hiding"],"updatePoint":{"line":59,"column":46,"index":2389},"line":59,"code":"    it(\"Should sanity check show()'s arguments\", function () {\n      expect(() => {\n        menu.show({});\n      }).toThrowError(TypeError, 'DOM Node should be given for launching element.');\n    });","file":"spec/floating-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should have show() do nothing if already visible","suites":["Test floating menu","Showing/hiding"],"updatePoint":{"line":64,"column":56,"index":2599},"line":64,"code":"    it('Should have show() do nothing if already visible', function () {\n      element.classList.add('my-floating-menu-open');\n      const spy = jasmine.createSpy();\n      events.on(element, 'floating-menu-beingshown', spy);\n      menu.show();\n      expect(element.classList.contains('my-floating-menu-open'), 'Menu state').toBe(true);\n      expect(refNode.classList.contains('my-floating-menu-trigger-open'), 'Trigger button state').toBe(false);\n      expect(spy, 'floating-menu-beingshown event').not.toHaveBeenCalled();\n    });","file":"spec/floating-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should have show() method show menu","suites":["Test floating menu","Showing/hiding"],"updatePoint":{"line":73,"column":43,"index":3117},"line":73,"code":"    it('Should have show() method show menu', function () {\n      const spy = jasmine.createSpy();\n      events.on(menu.element, 'floating-menu-shown', spy);\n      menu.show();\n      expect(element.classList.contains('my-floating-menu-open'), 'Menu state').toBe(true);\n      expect(refNode.classList.contains('my-floating-menu-trigger-open'), 'Trigger button state').toBe(true);\n      expect(spy, 'floating-menu-shown event').toHaveBeenCalledTimes(1);\n    });","file":"spec/floating-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should call callback of show() method after it finishes","suites":["Test floating menu","Showing/hiding"],"updatePoint":{"line":81,"column":63,"index":3597},"line":81,"code":"    it('Should call callback of show() method after it finishes', function () {\n      const spy = jasmine.createSpy();\n      menu.show(spy);\n      menu.element.dispatchEvent(new CustomEvent('transitionend', {\n        bubbles: true\n      }));\n      expect(spy).toHaveBeenCalledTimes(1);\n    });","file":"spec/floating-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should sanity check hide()'s arguments","suites":["Test floating menu","Showing/hiding"],"updatePoint":{"line":89,"column":46,"index":3874},"line":89,"code":"    it(\"Should sanity check hide()'s arguments\", function () {\n      expect(() => {\n        menu.hide({});\n      }).toThrowError(TypeError, 'DOM Node should be given for launching element.');\n    });","file":"spec/floating-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should have hide() not hide if not visible already","suites":["Test floating menu","Showing/hiding"],"updatePoint":{"line":94,"column":58,"index":4086},"line":94,"code":"    it('Should have hide() not hide if not visible already', function () {\n      const spy = jasmine.createSpy();\n      events.on(element, 'floating-menu-beinghidden', spy);\n      menu.hide();\n      menu.element.dispatchEvent(new CustomEvent('transitionend', {\n        bubbles: true\n      }));\n      expect(element.classList.contains('my-floating-menu-open'), 'Menu state').toBe(false);\n      expect(element.classList.contains('my-floating-menu-trigger-open'), 'Trigger button state').toBe(false);\n      expect(spy, 'floating-menu-beinghidden event').not.toHaveBeenCalled();\n    });","file":"spec/floating-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should have hide() method hide menu","suites":["Test floating menu","Showing/hiding"],"updatePoint":{"line":105,"column":43,"index":4654},"line":105,"code":"    it('Should have hide() method hide menu', function () {\n      menu.show();\n      menu.element.dispatchEvent(new CustomEvent('transitionend', {\n        bubbles: true\n      }));\n      const spy = jasmine.createSpy();\n      events.on(element, 'floating-menu-hidden', spy);\n      menu.hide();\n      expect(element.classList.contains('my-floating-menu-open'), 'Menu state').toBe(false);\n      expect(element.classList.contains('my-floating-menu-trigger-open'), 'Trigger button state').toBe(false);\n      expect(spy, 'floating-menu-hidden event').toHaveBeenCalled();\n    });","file":"spec/floating-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should have changeState() do nothing if the new state is neither shown or nor hidden","suites":["Test floating menu","Showing/hiding"],"updatePoint":{"line":117,"column":92,"index":5276},"line":117,"code":"    it('Should have changeState() do nothing if the new state is neither shown or nor hidden', function () {\n      const spyBeingShown = jasmine.createSpy();\n      const spyBeingHidden = jasmine.createSpy();\n      events.on(element, 'floating-menu-beingshown', spyBeingShown);\n      events.on(element, 'floating-menu-beinghidden', spyBeingHidden);\n      menu.changeState('foo');\n      expect(element.classList.contains('my-floating-menu-open'), 'Menu state').toBe(false);\n      expect(refNode.classList.contains('my-floating-menu-trigger-open'), 'Trigger button state').toBe(false);\n      expect(spyBeingShown, 'floating-menu-beingshown event').not.toHaveBeenCalled();\n      expect(spyBeingHidden, 'floating-menu-beinghidden event').not.toHaveBeenCalled();\n    });","file":"spec/floating-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should fire event on delegator node if it's given","suites":["Test floating menu","Showing/hiding"],"updatePoint":{"line":128,"column":57,"index":6006},"line":128,"code":"    it(\"Should fire event on delegator node if it's given\", function () {\n      const spy = jasmine.createSpy();\n      events.on(refNode, 'floating-menu-shown', spy);\n      menu.changeState('shown', {\n        delegatorNode: refNode\n      });\n      expect(spy, 'floating-menu-shown event').toHaveBeenCalledTimes(1);\n    });","file":"spec/floating-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should place the menu at the left","suites":["Test floating menu","Placing menu"],"updatePoint":{"line":199,"column":41,"index":7922},"line":199,"code":"    it('Should place the menu at the left', function () {\n      menu.options.direction = 'left';\n      menu.show();\n      expect(element.style.left).toBe('-325px');\n      expect(element.style.top).toBe('150px');\n    });","file":"spec/floating-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should place the menu at the top","suites":["Test floating menu","Placing menu"],"updatePoint":{"line":205,"column":40,"index":8141},"line":205,"code":"    it('Should place the menu at the top', function () {\n      menu.options.direction = 'top';\n      menu.show();\n      expect(element.style.left).toBe('25px');\n      expect(element.style.top).toBe('-250px');\n    });","file":"spec/floating-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should place the menu at the right","suites":["Test floating menu","Placing menu"],"updatePoint":{"line":211,"column":42,"index":8360},"line":211,"code":"    it('Should place the menu at the right', function () {\n      menu.options.direction = 'right';\n      menu.show();\n      expect(element.style.left).toBe('325px');\n      expect(element.style.top).toBe('150px');\n    });","file":"spec/floating-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should place the menu at the bottom","suites":["Test floating menu","Placing menu"],"updatePoint":{"line":217,"column":43,"index":8582},"line":217,"code":"    it('Should place the menu at the bottom', function () {\n      menu.options.direction = 'bottom';\n      menu.show();\n      expect(element.style.left).toBe('25px');\n      expect(element.style.top).toBe('450px');\n    });","file":"spec/floating-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if refNode is not there","suites":["Test floating menu","Placing menu"],"updatePoint":{"line":223,"column":44,"index":8805},"line":223,"code":"    it('Should throw if refNode is not there', function () {\n      menu.options.refNode = null;\n\n      try {\n        expect(() => {\n          menu.show();\n        }).toThrowError(TypeError, 'Cannot find the reference node for changing the style.');\n      } finally {\n        menu.options.refNode = refNode;\n      }\n    });","file":"spec/floating-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should move to body by default","suites":["Test floating menu","Moving menu into the container"],"updatePoint":{"line":284,"column":38,"index":10466},"line":284,"code":"    it('Should move to body by default', function () {\n      menu.show();\n      expect(element.parentNode).toBe(document.body);\n    });","file":"spec/floating-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should move to element with data-floating-menu-container attribute","suites":["Test floating menu","Moving menu into the container"],"updatePoint":{"line":288,"column":74,"index":10638},"line":288,"code":"    it('Should move to element with data-floating-menu-container attribute', function () {\n      container.dataset.floatingMenuContainer = '';\n      menu.show();\n      expect(element.parentNode).toBe(container);\n    });","file":"spec/floating-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should handle resizing while shown","suites":["Test floating menu","Handling resize"],"updatePoint":{"line":350,"column":42,"index":12201},"line":350,"code":"    it('Should handle resizing while shown', function () {\n      menu.show();\n\n      menu._place.calls.reset();\n\n      window.dispatchEvent(new CustomEvent('resize'));\n      expect(menu._place).toHaveBeenCalledTimes(1);\n    });","file":"spec/floating-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should not handle resizing while hidden","suites":["Test floating menu","Handling resize"],"updatePoint":{"line":358,"column":47,"index":12434},"line":358,"code":"    it('Should not handle resizing while hidden', function () {\n      window.dispatchEvent(new CustomEvent('resize'));\n      expect(menu._place).not.toHaveBeenCalled();\n    });","file":"spec/floating-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should close menu when both the trigger button and the menu lose focus","suites":["Test floating menu","Managing focus"],"updatePoint":{"line":410,"column":78,"index":13899},"line":410,"code":"    it('Should close menu when both the trigger button and the menu lose focus', function () {\n      primaryFocusNode.focus();\n      menu.changeState('shown', {});\n      input.focus();\n      expect(element.classList.contains('bx--overflow-menu-options--open')).toBe(false);\n    });","file":"spec/floating-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should focus back on the trigger button when floating menu loses focus","suites":["Test floating menu","Managing focus"],"updatePoint":{"line":416,"column":78,"index":14181},"line":416,"code":"    it('Should focus back on the trigger button when floating menu loses focus', function () {\n      const hasFocusin = ('onfocusin' in window);\n      const focusinEventName = hasFocusin ? 'focusin' : 'focus';\n      menu.changeState('shown', {});\n      spyOn(HTMLElement.prototype, 'focus'); // Firefox does not fire `onfocus` event with `input.focus()` call, presumably when the window does not have focus\n\n      input.dispatchEvent(Object.assign(new CustomEvent(focusinEventName, {\n        bubbles: true\n      }), {\n        relatedTarget: primaryFocusNode\n      }));\n      expect(HTMLElement.prototype.focus).toHaveBeenCalledTimes(1);\n    });","file":"spec/floating-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should move to next submenu with right arrow key","suites":["HeaderNav","Left/Right arrow keys","right arrow keydown"],"updatePoint":{"line":51,"column":58,"index":1573},"line":51,"code":"      it('should move to next submenu with right arrow key', function () {\n        spyOn(a2, 'focus');\n        a1.dispatchEvent(rightArrowKeydown);\n        expect(a2.focus).toHaveBeenCalled();\n      });","file":"spec/header-nav_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should wrap to first submenu when navigating from end of list","suites":["HeaderNav","Left/Right arrow keys","right arrow keydown"],"updatePoint":{"line":56,"column":71,"index":1789},"line":56,"code":"      it('should wrap to first submenu when navigating from end of list', function () {\n        // TODO: investigate\n        a2.setAttribute('tabindex', 0);\n        a2.focus();\n        spyOn(a1, 'focus');\n        a2.dispatchEvent(rightArrowKeydown);\n        expect(a1.focus).toHaveBeenCalled();\n      });","file":"spec/header-nav_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should move to previous submenu with left arrow key","suites":["HeaderNav","Left/Right arrow keys","left arrow keydown"],"updatePoint":{"line":66,"column":61,"index":2141},"line":66,"code":"      it('should move to previous submenu with left arrow key', function () {\n        // TODO: investigate\n        a2.setAttribute('tabindex', 0);\n        a2.focus();\n        spyOn(a1, 'focus');\n        a2.dispatchEvent(rightArrowKeydown);\n        expect(a1.focus).toHaveBeenCalled();\n      });","file":"spec/header-nav_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should wrap to last submenu when navigating from start of list","suites":["HeaderNav","Left/Right arrow keys","left arrow keydown"],"updatePoint":{"line":74,"column":72,"index":2447},"line":74,"code":"      it('should wrap to last submenu when navigating from start of list', function () {\n        spyOn(a2, 'focus');\n        a1.dispatchEvent(rightArrowKeydown);\n        expect(a2.focus).toHaveBeenCalled();\n      });","file":"spec/header-nav_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not given","suites":["Header Submenu","Constructor"],"updatePoint":{"line":4,"column":49,"index":205},"line":4,"code":"    it('Should throw if root element is not given', function () {\n      expect(() => {\n        new HeaderSubmenu();\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/header-submenu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not a DOM element","suites":["Header Submenu","Constructor"],"updatePoint":{"line":9,"column":57,"index":429},"line":9,"code":"    it('Should throw if root element is not a DOM element', function () {\n      expect(() => {\n        new HeaderSubmenu(document.createTextNode(''));\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/header-submenu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should do nothing on menu title click","suites":["Header Submenu","Click handler"],"updatePoint":{"line":37,"column":45,"index":1595},"line":37,"code":"    it('should do nothing on menu title click', function () {\n      triggerNode.setAttribute('aria-expanded', 'false');\n      element.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(triggerNode.getAttribute('aria-expanded')).toBe('false');\n    });","file":"spec/header-submenu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should close menu when clicking on an item","suites":["Header Submenu","Click handler"],"updatePoint":{"line":44,"column":50,"index":1887},"line":44,"code":"    it('should close menu when clicking on an item', function () {\n      triggerNode.setAttribute('aria-expanded', 'true');\n      itemLinkNode.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(triggerNode.getAttribute('aria-expanded')).toBe('false');\n    });","file":"spec/header-submenu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should close menu when another element is focused or when document is clicked","suites":["Header Submenu","Handle blur"],"updatePoint":{"line":92,"column":85,"index":3752},"line":92,"code":"    it('should close menu when another element is focused or when document is clicked', function () {\n      // TODO: mock CustomEvent for IE\n      const customEvent = new CustomEvent('blur', {\n        bubbles: true\n      });\n      Object.defineProperty(customEvent, 'relatedTarget', {\n        value: input,\n        writable: true\n      });\n      itemLinkNode.dispatchEvent(customEvent);\n      expect(triggerNode.getAttribute('aria-expanded')).toBe('false');\n    });","file":"spec/header-submenu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should move focus from currently focused item to previous menu item","suites":["Header Submenu","Handle keydown","Arrow keys","Up/Down arrow keys"],"updatePoint":{"line":163,"column":79,"index":6311},"line":163,"code":"        it('should move focus from currently focused item to previous menu item', function () {\n          spyOn(itemLinkNode2, 'focus');\n          triggerNode.setAttribute('aria-expanded', 'true');\n          triggerNode.dispatchEvent(upArrowKeydown);\n          expect(triggerNode.getAttribute('aria-expanded')).toBe('true');\n          expect(itemLinkNode2.focus).toHaveBeenCalled();\n          expect(itemLinkNode2.focus).toHaveBeenCalledTimes(1);\n        });","file":"spec/header-submenu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should wrap focus from first menu item to last menu item","suites":["Header Submenu","Handle keydown","Arrow keys","Up/Down arrow keys"],"updatePoint":{"line":171,"column":68,"index":6759},"line":171,"code":"        it('should wrap focus from first menu item to last menu item', function () {\n          spyOn(itemLinkNode1, 'focus');\n          spyOn(itemLinkNode2, 'focus');\n          triggerNode.setAttribute('aria-expanded', 'true');\n          triggerNode.dispatchEvent(downArrowKeydown);\n          triggerNode.dispatchEvent(upArrowKeydown);\n          expect(triggerNode.getAttribute('aria-expanded')).toBe('true');\n          expect(itemLinkNode1.focus).toHaveBeenCalledTimes(1);\n          expect(itemLinkNode2.focus).toHaveBeenCalledTimes(1);\n        });","file":"spec/header-submenu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should not open menu when menu is focused","suites":["Header Submenu","Handle keydown","Arrow keys","Up/Down arrow keys"],"updatePoint":{"line":181,"column":53,"index":7294},"line":181,"code":"        it('should not open menu when menu is focused', function () {\n          triggerNode.dispatchEvent(downArrowKeydown);\n          expect(triggerNode.getAttribute('aria-expanded')).toBe('false');\n        });","file":"spec/header-submenu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should move focus from currently focused item to next menu item","suites":["Header Submenu","Handle keydown","Arrow keys","Up/Down arrow keys"],"updatePoint":{"line":185,"column":75,"index":7528},"line":185,"code":"        it('should move focus from currently focused item to next menu item', function () {\n          // TODO: figure out why we need to set tabindex\n          itemLinkNode1.setAttribute('tabindex', 0);\n          spyOn(itemLinkNode2, 'focus');\n          triggerNode.setAttribute('aria-expanded', 'true');\n          itemLinkNode1.focus();\n          triggerNode.dispatchEvent(downArrowKeydown);\n          expect(triggerNode.getAttribute('aria-expanded')).toBe('true');\n          expect(itemLinkNode2.focus).toHaveBeenCalledTimes(1);\n        });","file":"spec/header-submenu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should wrap focus from last menu item to first menu item","suites":["Header Submenu","Handle keydown","Arrow keys","Up/Down arrow keys"],"updatePoint":{"line":195,"column":68,"index":8064},"line":195,"code":"        it('should wrap focus from last menu item to first menu item', function () {\n          // TODO: figure out why we need to set tabindex\n          itemLinkNode2.setAttribute('tabindex', 0);\n          spyOn(itemLinkNode1, 'focus');\n          triggerNode.setAttribute('aria-expanded', 'true');\n          itemLinkNode2.focus();\n          triggerNode.dispatchEvent(downArrowKeydown);\n          expect(triggerNode.getAttribute('aria-expanded')).toBe('true');\n          expect(itemLinkNode1.focus).toHaveBeenCalledTimes(1);\n        });","file":"spec/header-submenu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should close menu with ESC key when menu is focused","suites":["Header Submenu","Handle keydown","Esc key"],"updatePoint":{"line":215,"column":61,"index":8840},"line":215,"code":"      it('should close menu with ESC key when menu is focused', function () {\n        triggerNode.setAttribute('aria-expanded', 'true');\n        triggerNode.dispatchEvent(escKeydown);\n        expect(triggerNode.getAttribute('aria-expanded')).toBe('false');\n      });","file":"spec/header-submenu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should close menu with ESC key when an item is focused","suites":["Header Submenu","Handle keydown","Esc key"],"updatePoint":{"line":220,"column":64,"index":9110},"line":220,"code":"      it('should close menu with ESC key when an item is focused', function () {\n        triggerNode.setAttribute('aria-expanded', 'true');\n        itemNode1.dispatchEvent(escKeydown);\n        expect(triggerNode.getAttribute('aria-expanded')).toBe('false');\n      });","file":"spec/header-submenu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should not open menu with ESC key","suites":["Header Submenu","Handle keydown","Esc key"],"updatePoint":{"line":225,"column":43,"index":9357},"line":225,"code":"      it('should not open menu with ESC key', function () {\n        triggerNode.dispatchEvent(escKeydown);\n        expect(triggerNode.getAttribute('aria-expanded')).toBe('false');\n      });","file":"spec/header-submenu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should open menu with space bar","suites":["Header Submenu","Handle keydown","Space bar"],"updatePoint":{"line":238,"column":41,"index":9788},"line":238,"code":"      it('should open menu with space bar', function () {\n        triggerNode.dispatchEvent(spaceBarDown);\n        expect(triggerNode.getAttribute('aria-expanded')).toBe('true');\n      });","file":"spec/header-submenu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should close menu with space key","suites":["Header Submenu","Handle keydown","Space bar"],"updatePoint":{"line":242,"column":42,"index":9978},"line":242,"code":"      it('should close menu with space key', function () {\n        triggerNode.setAttribute('aria-expanded', 'true');\n        triggerNode.dispatchEvent(spaceBarDown);\n        expect(triggerNode.getAttribute('aria-expanded')).toBe('false');\n      });","file":"spec/header-submenu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should not close menu with space key on an item","suites":["Header Submenu","Handle keydown","Space bar"],"updatePoint":{"line":247,"column":57,"index":10243},"line":247,"code":"      it('should not close menu with space key on an item', function () {\n        itemNode1.dispatchEvent(spaceBarDown);\n        expect(triggerNode.getAttribute('aria-expanded')).toBe('true');\n      });","file":"spec/header-submenu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should close menu on mouseleave","suites":["Header Submenu","Handle mouse event"],"updatePoint":{"line":300,"column":39,"index":12170},"line":300,"code":"    it('should close menu on mouseleave', function () {\n      triggerNode.setAttribute('aria-expanded', 'true');\n      triggerNode.dispatchEvent(mouseLeave);\n      expect(triggerNode.getAttribute('aria-expanded')).toBe('false');\n    });","file":"spec/header-submenu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should open menu on mouseenter","suites":["Header Submenu","Handle mouse event"],"updatePoint":{"line":305,"column":38,"index":12406},"line":305,"code":"    it('should open menu on mouseenter', function () {\n      triggerNode.setAttribute('aria-expanded', 'false');\n      triggerNode.dispatchEvent(mouseEnter);\n      expect(triggerNode.getAttribute('aria-expanded')).toBe('true');\n    });","file":"spec/header-submenu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should gracefully ignore unknown events","suites":["Header Submenu","Handle unknown events"],"updatePoint":{"line":355,"column":47,"index":14221},"line":355,"code":"    it('should gracefully ignore unknown events', function () {\n      const getAction = headerSubmenu._getAction(unknownEvent);\n\n      expect(getAction).toEqual(null);\n    });","file":"spec/header-submenu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should not change state upon unknown events","suites":["Header Submenu","Handle unknown events"],"updatePoint":{"line":360,"column":51,"index":14401},"line":360,"code":"    it('should not change state upon unknown events', function () {\n      const action = headerSubmenu._getAction(unknownEvent);\n\n      const state = headerSubmenu._getNewState(action);\n\n      expect(state).toEqual(false);\n    });","file":"spec/header-submenu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should handle unknown keypress","suites":["Header Submenu","Handle unknown events"],"updatePoint":{"line":367,"column":38,"index":14619},"line":367,"code":"    it('should handle unknown keypress', function () {\n      const unknownKeypress = headerSubmenu._handleKeyDown(unknownEvent);\n\n      expect(unknownKeypress).toEqual(undefined);\n    });","file":"spec/header-submenu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not given","suites":["Test Inline Loading","Constructor"],"updatePoint":{"line":5,"column":49,"index":295},"line":5,"code":"    it('Should throw if root element is not given', function () {\n      expect(() => {\n        new InlineLoading();\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/inline-loading_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not a DOM element","suites":["Test Inline Loading","Constructor"],"updatePoint":{"line":10,"column":57,"index":519},"line":10,"code":"    it('Should throw if root element is not a DOM element', function () {\n      expect(() => {\n        new InlineLoading(document.createTextNode(''));\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/inline-loading_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should support setting the initial state via options","suites":["Test Inline Loading","Setting state"],"updatePoint":{"line":23,"column":60,"index":976},"line":23,"code":"    it('Should support setting the initial state via options', function () {\n      instance = new InlineLoading(elem.querySelector('[data-inline-loading]'), {\n        initialState: 'active'\n      });\n      expect(elem.querySelector('[data-inline-loading-spinner]').classList.contains('bx--loading--stop')).toBe(false);\n      expect(elem.querySelector('[data-inline-loading-spinner]').hasAttribute('hidden')).toBe(false);\n      expect(elem.querySelector('[data-inline-loading-finished]').hasAttribute('hidden')).toBe(true);\n      expect(elem.querySelector('[data-inline-loading-error]').hasAttribute('hidden')).toBe(true);\n      expect(elem.querySelector('[data-inline-loading-text-active]').hasAttribute('hidden')).toBe(false);\n      expect(elem.querySelector('[data-inline-loading-text-finished]').hasAttribute('hidden')).toBe(true);\n      expect(elem.querySelector('[data-inline-loading-text-error]').hasAttribute('hidden')).toBe(true);\n    });","file":"spec/inline-loading_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should hide everything but spinner when the state is set to inactive","suites":["Test Inline Loading","Setting state"],"updatePoint":{"line":35,"column":76,"index":1939},"line":35,"code":"    it('Should hide everything but spinner when the state is set to inactive', function () {\n      instance = new InlineLoading(elem.querySelector('[data-inline-loading]')).setState('inactive');\n      expect(elem.querySelector('[data-inline-loading-spinner]').classList.contains('bx--loading--stop')).toBe(true);\n      expect(elem.querySelector('[data-inline-loading-spinner]').hasAttribute('hidden')).toBe(false);\n      expect(elem.querySelector('[data-inline-loading-finished]').hasAttribute('hidden')).toBe(true);\n      expect(elem.querySelector('[data-inline-loading-error]').hasAttribute('hidden')).toBe(true);\n      expect(elem.querySelector('[data-inline-loading-text-active]').hasAttribute('hidden')).toBe(true);\n      expect(elem.querySelector('[data-inline-loading-text-finished]').hasAttribute('hidden')).toBe(true);\n      expect(elem.querySelector('[data-inline-loading-text-error]').hasAttribute('hidden')).toBe(true);\n    });","file":"spec/inline-loading_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should hide elements for finished states when the state is set to active","suites":["Test Inline Loading","Setting state"],"updatePoint":{"line":45,"column":80,"index":2883},"line":45,"code":"    it('Should hide elements for finished states when the state is set to active', function () {\n      instance = new InlineLoading(elem.querySelector('[data-inline-loading]')).setState('active');\n      expect(elem.querySelector('[data-inline-loading-spinner]').classList.contains('bx--loading--stop')).toBe(false);\n      expect(elem.querySelector('[data-inline-loading-spinner]').hasAttribute('hidden')).toBe(false);\n      expect(elem.querySelector('[data-inline-loading-finished]').hasAttribute('hidden')).toBe(true);\n      expect(elem.querySelector('[data-inline-loading-error]').hasAttribute('hidden')).toBe(true);\n      expect(elem.querySelector('[data-inline-loading-text-active]').hasAttribute('hidden')).toBe(false);\n      expect(elem.querySelector('[data-inline-loading-text-finished]').hasAttribute('hidden')).toBe(true);\n      expect(elem.querySelector('[data-inline-loading-text-error]').hasAttribute('hidden')).toBe(true);\n    });","file":"spec/inline-loading_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should hide elements for active states when the state is set to finished","suites":["Test Inline Loading","Setting state"],"updatePoint":{"line":55,"column":80,"index":3827},"line":55,"code":"    it('Should hide elements for active states when the state is set to finished', function () {\n      instance = new InlineLoading(elem.querySelector('[data-inline-loading]')).setState('finished');\n      expect(elem.querySelector('[data-inline-loading-spinner]').classList.contains('bx--loading--stop')).toBe(true);\n      expect(elem.querySelector('[data-inline-loading-spinner]').hasAttribute('hidden')).toBe(true);\n      expect(elem.querySelector('[data-inline-loading-finished]').hasAttribute('hidden')).toBe(false);\n      expect(elem.querySelector('[data-inline-loading-error]').hasAttribute('hidden')).toBe(true);\n      expect(elem.querySelector('[data-inline-loading-text-active]').hasAttribute('hidden')).toBe(true);\n      expect(elem.querySelector('[data-inline-loading-text-finished]').hasAttribute('hidden')).toBe(false);\n      expect(elem.querySelector('[data-inline-loading-text-error]').hasAttribute('hidden')).toBe(true);\n    });","file":"spec/inline-loading_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should hide elements for active states when the state is set to error","suites":["Test Inline Loading","Setting state"],"updatePoint":{"line":65,"column":77,"index":4769},"line":65,"code":"    it('Should hide elements for active states when the state is set to error', function () {\n      instance = new InlineLoading(elem.querySelector('[data-inline-loading]')).setState('error');\n      expect(elem.querySelector('[data-inline-loading-spinner]').classList.contains('bx--loading--stop')).toBe(true);\n      expect(elem.querySelector('[data-inline-loading-spinner]').hasAttribute('hidden')).toBe(true);\n      expect(elem.querySelector('[data-inline-loading-finished]').hasAttribute('hidden')).toBe(true);\n      expect(elem.querySelector('[data-inline-loading-error]').hasAttribute('hidden')).toBe(false);\n      expect(elem.querySelector('[data-inline-loading-text-active]').hasAttribute('hidden')).toBe(true);\n      expect(elem.querySelector('[data-inline-loading-text-finished]').hasAttribute('hidden')).toBe(true);\n      expect(elem.querySelector('[data-inline-loading-text-error]').hasAttribute('hidden')).toBe(false);\n    });","file":"spec/inline-loading_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if a wrong state is passed in","suites":["Test Inline Loading","Setting state"],"updatePoint":{"line":75,"column":50,"index":5681},"line":75,"code":"    it('Should throw if a wrong state is passed in', function () {\n      instance = new InlineLoading(document.createElement('div'));\n      expect(() => instance.setState()).toThrowError(Error, 'One of the following value should be given as the state: inactive, active, finished, error');\n      expect(() => instance.setState('foo')).toThrowError(Error, 'One of the following value should be given as the state: inactive, active, finished, error');\n    });","file":"spec/inline-loading_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should return self","suites":["Test Inline Loading","Setting state"],"updatePoint":{"line":80,"column":26,"index":6114},"line":80,"code":"    it('Should return self', function () {\n      instance = new InlineLoading(document.createElement('div'));\n      expect(instance.setState('active')).toBe(instance);\n    });","file":"spec/inline-loading_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should prevent creating duplicate instances","suites":["Test Inline Loading","Managing instances"],"updatePoint":{"line":99,"column":51,"index":6653},"line":99,"code":"    it('Should prevent creating duplicate instances', function () {\n      let first;\n      let second;\n\n      try {\n        first = InlineLoading.create(element);\n        second = InlineLoading.create(element);\n        expect(first).toBe(second);\n      } finally {\n        first && first.release();\n\n        if (first !== second) {\n          second && second.release();\n        }\n      }\n    });","file":"spec/inline-loading_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should let create a new instance for an element if an earlier one has been released","suites":["Test Inline Loading","Managing instances"],"updatePoint":{"line":115,"column":91,"index":7089},"line":115,"code":"    it('Should let create a new instance for an element if an earlier one has been released', function () {\n      let first;\n      let second;\n\n      try {\n        first = InlineLoading.create(element);\n        first.release();\n        second = InlineLoading.create(element);\n        expect(first).not.toBe(second);\n      } finally {\n        first && first.release();\n\n        if (first !== second) {\n          second && second.release();\n        }\n      }\n    });","file":"spec/inline-loading_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not given","suites":["Test Loading","Constructor"],"updatePoint":{"line":5,"column":49,"index":248},"line":5,"code":"    it('Should throw if root element is not given', function () {\n      expect(() => {\n        new Loading();\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/loading_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not a DOM element","suites":["Test Loading","Constructor"],"updatePoint":{"line":10,"column":57,"index":466},"line":10,"code":"    it('Should throw if root element is not a DOM element', function () {\n      expect(() => {\n        new Loading(document.createTextNode(''));\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/loading_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should set default state to active","suites":["Test Loading","Constructor"],"updatePoint":{"line":15,"column":42,"index":696},"line":15,"code":"    it('Should set default state to active', function () {\n      const spinner = new Loading(document.createElement('div'));\n      expect(spinner.isActive()).toBe(true);\n    });","file":"spec/loading_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should accept options","suites":["Test Loading","Constructor"],"updatePoint":{"line":19,"column":29,"index":861},"line":19,"code":"    it('Should accept options', function () {\n      const options = {\n        active: false\n      };\n      const spinner = new Loading(document.createElement('div'), options);\n      expect(spinner.isActive()).toBe(false);\n    });","file":"spec/loading_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if boolean is not passed in","suites":["Test Loading","set()"],"updatePoint":{"line":28,"column":48,"index":1150},"line":28,"code":"    it('Should throw if boolean is not passed in', function () {\n      const spinner = new Loading(document.createElement('div'));\n      expect(() => spinner.set()).toThrowError(TypeError, 'set expects a boolean.');\n      expect(() => spinner.set('true')).toThrowError(TypeError, 'set expects a boolean.');\n    });","file":"spec/loading_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should set state","suites":["Test Loading","set()"],"updatePoint":{"line":33,"column":24,"index":1441},"line":33,"code":"    it('Should set state', function () {\n      const spinner = new Loading(document.createElement('div'));\n      spinner.set(true);\n      expect(spinner.isActive()).toBe(true);\n      spinner.set(false);\n      expect(spinner.isActive()).toBe(false);\n    });","file":"spec/loading_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should return self","suites":["Test Loading","set()"],"updatePoint":{"line":40,"column":26,"index":1700},"line":40,"code":"    it('Should return self', function () {\n      const spinner = new Loading(document.createElement('div'));\n      expect(spinner.set(true)).toBe(spinner);\n    });","file":"spec/loading_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should remove and add bx--loading--stop class attribute of DOM element","suites":["Test Loading","set()"],"updatePoint":{"line":44,"column":78,"index":1916},"line":44,"code":"    it('Should remove and add bx--loading--stop class attribute of DOM element', function () {\n      const spinner = new Loading(document.createElement('div'));\n      spinner.set(false);\n      expect(spinner.element.classList.contains('bx--loading--stop'), 'Class for stopped state').toBe(true);\n      spinner.set(true);\n      expect(spinner.element.classList.contains('bx--loading--stop'), 'Class for started state').toBe(false);\n    });","file":"spec/loading_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should toggle","suites":["Test Loading","toggle()"],"updatePoint":{"line":53,"column":21,"index":2341},"line":53,"code":"    it('Should toggle', function () {\n      const spinner = new Loading(document.createElement('div'));\n      spinner.toggle();\n      expect(spinner.isActive()).toBe(false);\n      spinner.toggle();\n      expect(spinner.isActive()).toBe(true);\n    });","file":"spec/loading_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should return spinner state","suites":["Test Loading","isActive()"],"updatePoint":{"line":62,"column":35,"index":2651},"line":62,"code":"    it('Should return spinner state', function () {\n      const spinner = new Loading(document.createElement('div'));\n      expect(spinner.isActive()).toBe(true);\n    });","file":"spec/loading_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should be called","suites":["Test Loading","_deleteElement()"],"updatePoint":{"line":78,"column":24,"index":3176},"line":78,"code":"    it('Should be called', function () {\n      spyOn(instance, '_deleteElement');\n\n      instance._deleteElement();\n\n      expect(instance._deleteElement).toHaveBeenCalled();\n    });","file":"spec/loading_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should remove loading element from the DOM","suites":["Test Loading","_deleteElement()"],"updatePoint":{"line":85,"column":50,"index":3385},"line":85,"code":"    it('Should remove loading element from the DOM', function () {\n      instance._deleteElement();\n\n      const loadingEl = document.querySelector('[data-loading]');\n      expect(loadingEl).toBe(null);\n    });","file":"spec/loading_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should be called","suites":["Test Loading","end()"],"updatePoint":{"line":107,"column":24,"index":4028},"line":107,"code":"    it('Should be called', function () {\n      spyOn(instance, 'end');\n      instance.end();\n      expect(instance.end).toHaveBeenCalled();\n    });","file":"spec/loading_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should set state to inactive","suites":["Test Loading","end()"],"updatePoint":{"line":112,"column":36,"index":4188},"line":112,"code":"    it('Should set state to inactive', function () {\n      instance.end();\n      expect(instance.isActive()).toBe(false);\n    });","file":"spec/loading_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should prevent creating duplicate instances","suites":["Test Loading","Managing instances"],"updatePoint":{"line":126,"column":51,"index":4588},"line":126,"code":"    it('Should prevent creating duplicate instances', function () {\n      let first;\n      let second;\n\n      try {\n        first = Loading.create(element);\n        second = Loading.create(element);\n        expect(first).toBe(second);\n      } finally {\n        first && first.release();\n\n        if (first !== second) {\n          second && second.release();\n        }\n      }\n    });","file":"spec/loading_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should let create a new instance for an element if an earlier one has been released","suites":["Test Loading","Managing instances"],"updatePoint":{"line":142,"column":91,"index":5012},"line":142,"code":"    it('Should let create a new instance for an element if an earlier one has been released', function () {\n      let first;\n      let second;\n\n      try {\n        first = Loading.create(element);\n        first.release();\n        second = Loading.create(element);\n        expect(first).not.toBe(second);\n      } finally {\n        first && first.release();\n\n        if (first !== second) {\n          second && second.release();\n        }\n      }\n    });","file":"spec/loading_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should call event handler with keyboard based focus","suites":["onFocusByKeyboard"],"updatePoint":{"line":18,"column":57,"index":596},"line":18,"code":"  it('should call event handler with keyboard based focus', function () {\n    spy = jasmine.createSpy('focus');\n    eventHandler = onFocusByKeyboard(container, 'focus', spy);\n    container.dispatchEvent(new FocusEvent('focus', {\n      bubbles: true\n    }));\n    expect(spy.calls.count()).toEqual(1);\n  });","file":"spec/misc/on-focus-by-keyboard_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should call event handler with keyboard based blur","suites":["onFocusByKeyboard"],"updatePoint":{"line":26,"column":56,"index":901},"line":26,"code":"  it('should call event handler with keyboard based blur', function () {\n    spy = jasmine.createSpy('blur');\n    eventHandler = onFocusByKeyboard(container, 'blur', spy);\n    container.dispatchEvent(new FocusEvent('blur', {\n      bubbles: true\n    }));\n    expect(spy.calls.count()).toEqual(1);\n  });","file":"spec/misc/on-focus-by-keyboard_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should handle unsupported events","suites":["onFocusByKeyboard"],"updatePoint":{"line":34,"column":38,"index":1185},"line":34,"code":"  it('should handle unsupported events', function () {\n    spy = jasmine.createSpy('blur');\n    eventHandler = onFocusByKeyboard(container, 'blur', spy);\n    container.dispatchEvent(new CustomEvent('unknown', {\n      bubbles: true\n    }));\n    expect(spy).not.toHaveBeenCalled();\n  });","file":"spec/misc/on-focus-by-keyboard_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should throw an error on unsupported events","suites":["onFocusByKeyboard"],"updatePoint":{"line":42,"column":49,"index":1482},"line":42,"code":"  it('should throw an error on unsupported events', function () {\n    expect(() => onFocusByKeyboard(container, 'click', () => {})).toThrow();\n  });","file":"spec/misc/on-focus-by-keyboard_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should detect focus events caused by mouse","suites":["onFocusByKeyboard"],"updatePoint":{"line":45,"column":48,"index":1630},"line":45,"code":"  it('should detect focus events caused by mouse', function () {\n    spy = jasmine.createSpy('focus');\n    eventHandler = onFocusByKeyboard(container, 'focus', spy);\n    container.dispatchEvent(new MouseEvent('mousedown', {\n      bubbles: true\n    }));\n    container.dispatchEvent(new FocusEvent('focus', {\n      bubbles: true\n    }));\n    expect(spy).not.toHaveBeenCalled();\n  });","file":"spec/misc/on-focus-by-keyboard_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should detect blur events caused by mouse","suites":["onFocusByKeyboard"],"updatePoint":{"line":56,"column":47,"index":2011},"line":56,"code":"  it('should detect blur events caused by mouse', function () {\n    spy = jasmine.createSpy('blur');\n    eventHandler = onFocusByKeyboard(container, 'blur', spy);\n    container.dispatchEvent(new MouseEvent('mousedown', {\n      bubbles: true\n    }));\n    container.dispatchEvent(new FocusEvent('blur', {\n      bubbles: true\n    }));\n    expect(spy).not.toHaveBeenCalled();\n  });","file":"spec/misc/on-focus-by-keyboard_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should add class for toggling","suites":["Test toggling class for <svg>"],"updatePoint":{"line":4,"column":35,"index":213},"line":4,"code":"  it('Should add class for toggling', function () {\n    svg.setAttribute('class', 'foo bar');\n    svgToggleClass(svg, 'baz');\n    expect(svg.getAttribute('class')).toBe('foo bar baz');\n  });","file":"spec/misc/svg-toggle-class_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should remove class for toggling","suites":["Test toggling class for <svg>"],"updatePoint":{"line":9,"column":38,"index":407},"line":9,"code":"  it('Should remove class for toggling', function () {\n    svg.setAttribute('class', 'foo bar');\n    svgToggleClass(svg, 'foo');\n    expect(svg.getAttribute('class')).toBe('bar');\n  });","file":"spec/misc/svg-toggle-class_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should add class if specified","suites":["Test toggling class for <svg>"],"updatePoint":{"line":14,"column":35,"index":590},"line":14,"code":"  it('Should add class if specified', function () {\n    svg.setAttribute('class', 'foo bar');\n    svgToggleClass(svg, 'baz', true);\n    expect(svg.getAttribute('class')).toBe('foo bar baz');\n  });","file":"spec/misc/svg-toggle-class_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should remove class if specified","suites":["Test toggling class for <svg>"],"updatePoint":{"line":19,"column":38,"index":790},"line":19,"code":"  it('Should remove class if specified', function () {\n    svg.setAttribute('class', 'foo bar');\n    svgToggleClass(svg, 'foo', false);\n    expect(svg.getAttribute('class')).toBe('bar');\n  });","file":"spec/misc/svg-toggle-class_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should sanitize upon edit","suites":["Test toggling class for <svg>"],"updatePoint":{"line":24,"column":31,"index":976},"line":24,"code":"  it('Should sanitize upon edit', function () {\n    svg.setAttribute('class', ' foo bar  foo ');\n    svgToggleClass(svg, 'baz', true);\n    expect(svg.getAttribute('class')).toBe('foo bar baz');\n  });","file":"spec/misc/svg-toggle-class_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should keep class attribute intact if there is no edit","suites":["Test toggling class for <svg>"],"updatePoint":{"line":29,"column":60,"index":1205},"line":29,"code":"  it('Should keep class attribute intact if there is no edit', function () {\n    svg.setAttribute('class', ' foo bar  foo ');\n    svgToggleClass(svg, 'baz', false);\n    expect(svg.getAttribute('class')).toBe(' foo bar  foo ');\n  });","file":"spec/misc/svg-toggle-class_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if given element is null","suites":["Test init component by launcher"],"updatePoint":{"line":28,"column":43,"index":920},"line":28,"code":"  it('Should throw if given element is null', function () {\n    expect(() => {\n      Class.init(null);\n    }).toThrowError(TypeError, 'DOM document or DOM element should be given to search for and initialize this widget.');\n  });","file":"spec/mixins/init-component-by-launcher_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if given element is neither a DOM element or a document","suites":["Test init component by launcher"],"updatePoint":{"line":33,"column":74,"index":1181},"line":33,"code":"  it('Should throw if given element is neither a DOM element or a document', function () {\n    expect(() => {\n      Class.init(document.createTextNode(''));\n    }).toThrowError(TypeError, 'DOM document or DOM element should be given to search for and initialize this widget.');\n  });","file":"spec/mixins/init-component-by-launcher_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should do nothing if there is no target modals for a button upon button click","suites":["Test init component by launcher"],"updatePoint":{"line":38,"column":83,"index":1474},"line":38,"code":"  it('Should do nothing if there is no target modals for a button upon button click', function () {\n    launcherButton = document.createElement('a');\n    document.body.appendChild(launcherButton);\n    expect(launcherButton.dispatchEvent(new CustomEvent('click', {\n      bubbles: true,\n      cancelable: true\n    }))).toBe(true);\n  });","file":"spec/mixins/init-component-by-launcher_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should create an instance if the given element is of the widget","suites":["Test init component by launcher"],"updatePoint":{"line":46,"column":69,"index":1795},"line":46,"code":"  it('Should create an instance if the given element is of the widget', function () {\n    container = document.createElement('div');\n    container.dataset.myComponent = '';\n    context = Class.init(container, initOptions);\n    expect(spyCreate.calls.allArgs()).toEqual([[container, initOptions]]);\n  });","file":"spec/mixins/init-component-by-launcher_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if launcher targets to multiple components","suites":["Test init component by launcher"],"updatePoint":{"line":52,"column":61,"index":2091},"line":52,"code":"  it('Should throw if launcher targets to multiple components', function () {\n    const origOnError = window.onError;\n    window.onerror = null; // Mocha sets its own global `onerror` handler that causes test to fail\n\n    try {\n      const spyGlobalError = jasmine.createSpy();\n      events.on(window, 'error', spyGlobalError);\n      container = document.createElement('div');\n      [...new Array(2)].forEach(() => {\n        const element = document.createElement('div');\n        element.dataset.myComponent = '';\n        container.appendChild(element);\n      });\n      document.body.appendChild(container);\n      launcherButton = document.createElement('button');\n      launcherButton.dataset.initTarget = '[data-my-component]';\n      document.body.appendChild(launcherButton);\n      context = Class.init();\n      launcherButton.dispatchEvent(new CustomEvent('foo', {\n        bubbles: true\n      }));\n      expect(spyGlobalError).toHaveBeenCalledTimes(1);\n    } finally {\n      window.onerror = origOnError;\n    }\n  });","file":"spec/mixins/init-component-by-launcher_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should launch the component","suites":["Test init component by launcher"],"updatePoint":{"line":78,"column":33,"index":3084},"line":78,"code":"  it('Should launch the component', function () {\n    container = document.createElement('div');\n    container.dataset.myComponent = '';\n    document.body.appendChild(container);\n    launcherButton = document.createElement('button');\n    launcherButton.dataset.initTarget = '[data-my-component]';\n    document.body.appendChild(launcherButton);\n    context = Class.init();\n    expect(spyCreate, 'Call count of create() before hitting launcher button').not.toHaveBeenCalled();\n    launcherButton.dispatchEvent(new CustomEvent('foo', {\n      bubbles: true\n    }));\n    expect(spyCreate.calls.allArgs(), 'create()').toEqual([[container, {}]]);\n    expect(spyCreatedByLauncher, 'Call count of createdByLauncher()').toHaveBeenCalledTimes(1);\n  });","file":"spec/mixins/init-component-by-launcher_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should cancel the event if launcher button is <a>","suites":["Test init component by launcher"],"updatePoint":{"line":93,"column":55,"index":3848},"line":93,"code":"  it('Should cancel the event if launcher button is <a>', function () {\n    container = document.createElement('div');\n    container.dataset.myComponent = '';\n    document.body.appendChild(container);\n    launcherButton = document.createElement('a');\n    launcherButton.dataset.initTarget = '[data-my-component]';\n    document.body.appendChild(launcherButton);\n    context = Class.init();\n    expect(launcherButton.dispatchEvent(new CustomEvent('foo', {\n      bubbles: true,\n      cancelable: true\n    }))).toBe(false);\n  });","file":"spec/mixins/init-component-by-launcher_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if given element is null","suites":["Test init component by search"],"updatePoint":{"line":16,"column":43,"index":555},"line":16,"code":"  it('Should throw if given element is null', function () {\n    expect(() => {\n      Class.init(null);\n    }).toThrowError(TypeError, 'DOM document or DOM element should be given to search for and initialize this widget.');\n  });","file":"spec/mixins/init-component-by-search_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if given element is neither a DOM element or a document","suites":["Test init component by search"],"updatePoint":{"line":21,"column":74,"index":816},"line":21,"code":"  it('Should throw if given element is neither a DOM element or a document', function () {\n    expect(() => {\n      Class.init(document.createTextNode(''));\n    }).toThrowError(TypeError, 'DOM document or DOM element should be given to search for and initialize this widget.');\n  });","file":"spec/mixins/init-component-by-search_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should search from document if root element is not given","suites":["Test init component by search"],"updatePoint":{"line":26,"column":62,"index":1088},"line":26,"code":"  it('Should search from document if root element is not given', function () {\n    container = document.createElement('div');\n    container.dataset.myComponent = '';\n    document.body.appendChild(container);\n    Class.init();\n    expect(spyCreate.calls.allArgs()).toEqual([[container, {}]]);\n  });","file":"spec/mixins/init-component-by-search_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should search from document if document node is given","suites":["Test init component by search"],"updatePoint":{"line":33,"column":59,"index":1383},"line":33,"code":"  it('Should search from document if document node is given', function () {\n    container = document.createElement('div');\n    container.dataset.myComponent = '';\n    document.body.appendChild(container);\n    Class.init(container.ownerDocument, options);\n    expect(spyCreate.calls.allArgs()).toEqual([[container, options]]);\n  });","file":"spec/mixins/init-component-by-search_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should create an instance if the given element is of the widget","suites":["Test init component by search"],"updatePoint":{"line":40,"column":69,"index":1725},"line":40,"code":"  it('Should create an instance if the given element is of the widget', function () {\n    container = document.createElement('div');\n    container.dataset.myComponent = '';\n    Class.init(container, options);\n    expect(spyCreate.calls.allArgs()).toEqual([[container, options]]);\n  });","file":"spec/mixins/init-component-by-search_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not given","suites":["Test modal","Constructor"],"updatePoint":{"line":8,"column":49,"index":355},"line":8,"code":"    it('Should throw if root element is not given', function () {\n      expect(() => {\n        modal = new Modal();\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/modal_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not a DOM element","suites":["Test modal","Constructor"],"updatePoint":{"line":13,"column":57,"index":579},"line":13,"code":"    it('Should throw if root element is not a DOM element', function () {\n      expect(() => {\n        modal = new Modal(document.createTextNode(''));\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/modal_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should set default options","suites":["Test modal","Constructor"],"updatePoint":{"line":18,"column":34,"index":807},"line":18,"code":"    it('Should set default options', function () {\n      const container = document.createElement('div');\n      container.innerHTML = ModalHtml;\n      const modalElement = container.querySelector('[data-modal]');\n      modal = new Modal(modalElement);\n      expect(flattenOptions(modal.options)).toEqual({\n        selectorInit: '[data-modal]',\n        selectorModalClose: '[data-modal-close]',\n        selectorPrimaryFocus: '[data-modal-primary-focus]',\n        selectorModalContainer: '.bx--modal-container',\n        selectorsFloatingMenus: ['.bx--overflow-menu-options', '.bx--tooltip', '.flatpickr-calendar'],\n        classVisible: 'is-visible',\n        classBody: 'bx--body--with-modal-open',\n        attribInitTarget: 'data-modal-target',\n        initEventNames: ['click'],\n        eventBeforeShown: 'modal-beingshown',\n        eventAfterShown: 'modal-shown',\n        eventBeforeHidden: 'modal-beinghidden',\n        eventAfterHidden: 'modal-hidden'\n      });\n    });","file":"spec/modal_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should sanity check show()'s arguments","suites":["Test modal","Showing/hiding functions"],"updatePoint":{"line":61,"column":46,"index":2470},"line":61,"code":"    it(\"Should sanity check show()'s arguments\", function () {\n      expect(() => {\n        modal.show({});\n      }).toThrowError(TypeError, 'DOM Node should be given for launching element.');\n    });","file":"spec/modal_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should have show() do nothing if already visible","suites":["Test modal","Showing/hiding functions"],"updatePoint":{"line":66,"column":56,"index":2681},"line":66,"code":"    it('Should have show() do nothing if already visible', function () {\n      element.classList.add('is-visible');\n      const spy = jasmine.createSpy();\n      events.on(element, 'modal-beingshown', spy);\n      modal.show();\n      expect(element.classList.contains('is-visible')).toBe(true);\n      expect(spy).not.toHaveBeenCalled();\n    });","file":"spec/modal_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should have show() method show modal","suites":["Test modal","Showing/hiding functions"],"updatePoint":{"line":74,"column":44,"index":3012},"line":74,"code":"    it('Should have show() method show modal', function () {\n      const spy = jasmine.createSpy();\n      events.on(modal.element, 'modal-shown', spy);\n      modal.show();\n      modal.element.dispatchEvent(new CustomEvent('transitionend', {\n        bubbles: true\n      }));\n      expect(spy).toHaveBeenCalledTimes(1);\n      expect(element.classList.contains('is-visible')).toBe(true);\n    });","file":"spec/modal_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should have show() method support providing a DOM element instead of an event","suites":["Test modal","Showing/hiding functions"],"updatePoint":{"line":84,"column":85,"index":3446},"line":84,"code":"    it('Should have show() method support providing a DOM element instead of an event', function () {\n      const spy = jasmine.createSpy();\n      events.on(modal.element, 'modal-shown', spy);\n      modal.show(modal.element);\n      modal.element.dispatchEvent(new CustomEvent('transitionend', {\n        bubbles: true\n      }));\n      expect(spy.calls.argsFor(0)[0].detail.launchingElement, 'Launching element for modal-shown event').toBe(modal.element);\n    });","file":"spec/modal_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should call callback of show() method after it finishes","suites":["Test modal","Showing/hiding functions"],"updatePoint":{"line":93,"column":63,"index":3886},"line":93,"code":"    it('Should call callback of show() method after it finishes', function () {\n      const spy = jasmine.createSpy();\n      modal.show(spy);\n      modal.element.dispatchEvent(new CustomEvent('transitionend', {\n        bubbles: true\n      }));\n      expect(spy).toHaveBeenCalledTimes(1);\n    });","file":"spec/modal_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should focus on a child of modal upon showing","suites":["Test modal","Showing/hiding functions"],"updatePoint":{"line":101,"column":53,"index":4172},"line":101,"code":"    it('Should focus on a child of modal upon showing', function () {\n      const firstTabbable = modal.element.querySelector('button');\n      spyOn(firstTabbable, 'focus');\n      modal.show();\n      modal.element.dispatchEvent(new CustomEvent('transitionend', {\n        bubbles: true\n      }));\n      expect(firstTabbable.focus).toHaveBeenCalledTimes(1);\n    });","file":"spec/modal_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should support specifying the primary focus element","suites":["Test modal","Showing/hiding functions"],"updatePoint":{"line":110,"column":59,"index":4542},"line":110,"code":"    it('Should support specifying the primary focus element', function () {\n      const primaryButton = modal.element.querySelector('.bx--btn--primary');\n      spyOn(primaryButton, 'focus');\n      primaryButton.dataset.modalPrimaryFocus = '';\n\n      try {\n        modal.show();\n        modal.element.dispatchEvent(new CustomEvent('transitionend', {\n          bubbles: true\n        }));\n        expect(primaryButton.focus).toHaveBeenCalledTimes(1);\n      } finally {\n        delete primaryButton.dataset.modalPrimaryFocus;\n      }\n    });","file":"spec/modal_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should sanity check hide()'s arguments","suites":["Test modal","Showing/hiding functions"],"updatePoint":{"line":125,"column":46,"index":5067},"line":125,"code":"    it(\"Should sanity check hide()'s arguments\", function () {\n      expect(() => {\n        modal.hide({});\n      }).toThrowError(TypeError, 'DOM Node should be given for launching element.');\n    });","file":"spec/modal_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should have hide() not hide if not visible","suites":["Test modal","Showing/hiding functions"],"updatePoint":{"line":130,"column":50,"index":5272},"line":130,"code":"    it('Should have hide() not hide if not visible', function () {\n      const spy = jasmine.createSpy();\n      events.on(element, 'modal-beinghidden', spy);\n      modal.hide();\n      modal.element.dispatchEvent(new CustomEvent('transitionend', {\n        bubbles: true\n      }));\n      expect(element.classList.contains('is-visible')).toBe(false);\n      expect(spy).not.toHaveBeenCalled();\n    });","file":"spec/modal_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should have hide() method hide modal","suites":["Test modal","Showing/hiding functions"],"updatePoint":{"line":140,"column":44,"index":5664},"line":140,"code":"    it('Should have hide() method hide modal', function () {\n      modal.show();\n      modal.element.dispatchEvent(new CustomEvent('transitionend', {\n        bubbles: true\n      }));\n      const spy = jasmine.createSpy();\n      events.on(element, 'modal-beinghidden', spy);\n      modal.hide();\n      expect(element.classList.contains('is-visible')).toBe(false);\n      expect(spy).toHaveBeenCalled();\n    });","file":"spec/modal_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should have hide() method support providing a DOM element instead of an event","suites":["Test modal","Showing/hiding functions"],"updatePoint":{"line":151,"column":85,"index":6113},"line":151,"code":"    it('Should have hide() method support providing a DOM element instead of an event', function () {\n      modal.show();\n      modal.element.dispatchEvent(new CustomEvent('transitionend', {\n        bubbles: true\n      }));\n      const spy = jasmine.createSpy();\n      events.on(modal.element, 'modal-hidden', spy);\n      modal.hide(modal.element);\n      modal.element.dispatchEvent(new CustomEvent('transitionend', {\n        bubbles: true\n      }));\n      expect(spy.calls.argsFor(0)[0].detail.launchingElement, 'Launching element for modal-hidden event').toBe(modal.element);\n    });","file":"spec/modal_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should call callback of hide() method after it finishes","suites":["Test modal","Showing/hiding functions"],"updatePoint":{"line":164,"column":63,"index":6677},"line":164,"code":"    it('Should call callback of hide() method after it finishes', function () {\n      modal.show();\n      modal.element.dispatchEvent(new CustomEvent('transitionend', {\n        bubbles: true\n      }));\n      const spy = jasmine.createSpy();\n      modal.hide(spy);\n      modal.element.dispatchEvent(new CustomEvent('transitionend', {\n        bubbles: true\n      }));\n      expect(spy).toHaveBeenCalledTimes(1);\n    });","file":"spec/modal_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should handle the ESC key to close the modal","suites":["Test modal","The various close actions"],"updatePoint":{"line":199,"column":52,"index":7736},"line":199,"code":"    it('Should handle the ESC key to close the modal', function () {\n      element.classList.add('is-visible');\n      const spyBeforeHidden = jasmine.createSpy();\n      const spyAfterHidden = jasmine.createSpy();\n      events.on(element, 'modal-beinghidden', spyBeforeHidden);\n      events.on(element, 'modal-hidden', spyAfterHidden);\n      element.ownerDocument.body.dispatchEvent(Object.assign(new CustomEvent('keydown', {\n        bubbles: true\n      }), {\n        which: 27\n      }));\n      modal.element.dispatchEvent(new CustomEvent('transitionend', {\n        bubbles: true\n      }));\n      expect(element.classList.contains('is-visible')).toBe(false);\n      expect(spyBeforeHidden).toHaveBeenCalled();\n      expect(spyAfterHidden).toHaveBeenCalled();\n      const eventDataBeforeHidden = spyBeforeHidden.calls.argsFor(0)[0].detail;\n      const eventDataAfterHidden = spyAfterHidden.calls.argsFor(0)[0].detail;\n      expect(eventDataBeforeHidden.launchingElement, 'Launching element for modal-beinghidden').toBe(element.ownerDocument.body);\n      expect(eventDataBeforeHidden.launchingEvent.target, 'Launching event for modal-beinghidden').toBe(element.ownerDocument.body);\n      expect(eventDataAfterHidden.launchingElement, 'Launching element for modal-hidden').toBe(element.ownerDocument.body);\n      expect(eventDataAfterHidden.launchingEvent.target, 'Launching event for modal-hidden').toBe(element.ownerDocument.body);\n    });","file":"spec/modal_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should handle any elements with data-modal-close attribute to close the modal","suites":["Test modal","The various close actions"],"updatePoint":{"line":223,"column":85,"index":9206},"line":223,"code":"    it('Should handle any elements with data-modal-close attribute to close the modal', function () {\n      modal.show();\n      modal.element.dispatchEvent(new CustomEvent('transitionend', {\n        bubbles: true\n      }));\n      const spyBeforeHidden = jasmine.createSpy();\n      const spyAfterHidden = jasmine.createSpy();\n      events.on(modal.element, 'modal-beinghidden', spyBeforeHidden);\n      events.on(modal.element, 'modal-hidden', spyAfterHidden);\n      const closeButton = element.querySelector('[data-modal-close]');\n      closeButton.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      modal.element.dispatchEvent(new CustomEvent('transitionend', {\n        bubbles: true\n      }));\n      expect(element.classList.contains('is-visible'), 'Visible state').toBe(false);\n      expect(spyBeforeHidden).toHaveBeenCalled();\n      expect(spyAfterHidden).toHaveBeenCalled();\n      const eventDataBeforeHidden = spyBeforeHidden.calls.argsFor(0)[0].detail;\n      const eventDataAfterHidden = spyAfterHidden.calls.argsFor(0)[0].detail;\n      expect(eventDataBeforeHidden.launchingElement, 'Launching element for modal-beinghidden').toBe(closeButton);\n      expect(eventDataBeforeHidden.launchingEvent.target, 'Launching event for modal-beinghidden').toBe(closeButton);\n      expect(eventDataAfterHidden.launchingElement, 'Launching element for modal-hidden').toBe(closeButton);\n      expect(eventDataAfterHidden.launchingEvent.target, 'Launching event for modal-hidden').toBe(closeButton);\n    });","file":"spec/modal_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should handle any click outside the modal element to close the modal","suites":["Test modal","The various close actions"],"updatePoint":{"line":249,"column":76,"index":10725},"line":249,"code":"    it('Should handle any click outside the modal element to close the modal', function () {\n      modal.show();\n      modal.element.dispatchEvent(new CustomEvent('transitionend', {\n        bubbles: true\n      }));\n      const spyBeforeHidden = jasmine.createSpy();\n      const spyAfterHidden = jasmine.createSpy();\n      events.on(modal.element, 'modal-beinghidden', spyBeforeHidden);\n      events.on(modal.element, 'modal-hidden', spyAfterHidden);\n      const containerArea = document.querySelector('.bx--modal');\n      containerArea.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      modal.element.dispatchEvent(new CustomEvent('transitionend', {\n        bubbles: true\n      }));\n      expect(element.classList.contains('is-visible')).toBe(false);\n      expect(spyBeforeHidden).toHaveBeenCalled();\n      expect(spyAfterHidden).toHaveBeenCalled();\n      const eventDataBeforeHidden = spyBeforeHidden.calls.argsFor(0)[0].detail;\n      const eventDataAfterHidden = spyAfterHidden.calls.argsFor(0)[0].detail;\n      expect(eventDataBeforeHidden.launchingElement, 'Launching element for modal-beinghidden').toBe(element);\n      expect(eventDataBeforeHidden.launchingEvent.target, 'Launching event for modal-beinghidden').toBe(element);\n      expect(eventDataAfterHidden.launchingElement, 'Launching element for modal-hidden').toBe(element);\n      expect(eventDataAfterHidden.launchingEvent.target, 'Launching event for modal-hidden').toBe(element);\n    });","file":"spec/modal_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should bring back focus when modal loses focus","suites":["Test modal","Wrapping focus while modal is open"],"updatePoint":{"line":306,"column":54,"index":13092},"line":306,"code":"    it('Should bring back focus when modal loses focus', async function () {\n      modal.show();\n      modal.element.dispatchEvent(new CustomEvent('transitionend', {\n        bubbles: true\n      }));\n      input.focus();\n      expect(element.contains(document.activeElement)).toBe(true);\n    });","file":"spec/modal_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should launch the modal on button click","suites":["Test modal","Init Component by Launch functionality"],"updatePoint":{"line":347,"column":47,"index":14283},"line":347,"code":"    it('Should launch the modal on button click', function () {\n      button.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(element.classList.contains('is-visible')).toBe(true);\n    });","file":"spec/modal_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not given","suites":["Popup Nav","Constructor"],"updatePoint":{"line":6,"column":49,"index":287},"line":6,"code":"    it('Should throw if root element is not given', function () {\n      expect(() => {\n        navigationMenu = new NavigationMenu();\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/navigation-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not a DOM element","suites":["Popup Nav","Constructor"],"updatePoint":{"line":11,"column":57,"index":529},"line":11,"code":"    it('Should throw if root element is not a DOM element', function () {\n      expect(() => {\n        navigationMenu = new NavigationMenu(document.createTextNode(''));\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/navigation-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should open the popup nav on button click","suites":["Popup Nav","Init Component by Launch functionality"],"updatePoint":{"line":39,"column":49,"index":1623},"line":39,"code":"    it('Should open the popup nav on button click', function () {\n      button.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(button.classList.contains('bx--header__action--active')).toBe(true);\n      expect(navigationMenu.hasAttribute('hidden')).toBe(false);\n    });","file":"spec/navigation-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should close an open popup nav on button click","suites":["Popup Nav","Init Component by Launch functionality"],"updatePoint":{"line":46,"column":54,"index":1936},"line":46,"code":"    it('Should close an open popup nav on button click', function () {\n      navigationMenu.removeAttribute('hidden');\n      button.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(button.classList.contains('bx--header__action--active')).toBe(false);\n      expect(navigationMenu.hasAttribute('hidden')).toBe(true);\n    });","file":"spec/navigation-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should close navigation menu on Esc","suites":["Popup Nav","Keydown handler"],"updatePoint":{"line":85,"column":43,"index":3356},"line":85,"code":"    it('should close navigation menu on Esc', function () {\n      navigationMenuNode.removeAttribute('hidden');\n      navigationMenuNode.dispatchEvent(escKeydown);\n      expect(navigationMenuNode.hasAttribute('hidden'));\n    });","file":"spec/navigation-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should navigate backwards on up arrow","suites":["Popup Nav","Keydown handler","Up arrow navigation"],"updatePoint":{"line":115,"column":47,"index":4407},"line":115,"code":"      it('should navigate backwards on up arrow', async function () {\n        spyOn(firstNavItem, 'focus');\n        secondNavItem.focus();\n        secondNavItem.dispatchEvent(upArrowKeydown);\n        expect(firstNavItem.focus).toHaveBeenCalled();\n        expect(firstNavItem.focus).toHaveBeenCalledTimes(1);\n      });","file":"spec/navigation-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should wrap navigation from first to last item","suites":["Popup Nav","Keydown handler","Up arrow navigation"],"updatePoint":{"line":122,"column":56,"index":4734},"line":122,"code":"      it('should wrap navigation from first to last item', function () {\n        spyOn(lastNavItem, 'focus');\n        firstNavItem.focus();\n        firstNavItem.dispatchEvent(upArrowKeydown);\n        expect(lastNavItem.focus).toHaveBeenCalled();\n        expect(lastNavItem.focus).toHaveBeenCalledTimes(1);\n      });","file":"spec/navigation-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should navigate out of submenus","suites":["Popup Nav","Keydown handler","Up arrow navigation"],"updatePoint":{"line":129,"column":41,"index":5035},"line":129,"code":"      it('should navigate out of submenus', function () {\n        spyOn(button, 'focus');\n        button.setAttribute('aria-expanded', 'true');\n        firstNavItem.focus();\n        firstNavItem.dispatchEvent(upArrowKeydown);\n        expect(button.focus).toHaveBeenCalled();\n        expect(button.focus).toHaveBeenCalledTimes(1);\n      });","file":"spec/navigation-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should navigate forwards on down arrow","suites":["Popup Nav","Keydown handler","Down arrow navigation"],"updatePoint":{"line":168,"column":48,"index":6460},"line":168,"code":"      it('should navigate forwards on down arrow', async function () {\n        spyOn(secondNavItem, 'focus');\n        firstNavItem.focus();\n        firstNavItem.dispatchEvent(downArrowKeydown);\n        expect(secondNavItem.focus).toHaveBeenCalled();\n        expect(secondNavItem.focus).toHaveBeenCalledTimes(1);\n      });","file":"spec/navigation-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should wrap navigation from last to first item","suites":["Popup Nav","Keydown handler","Down arrow navigation"],"updatePoint":{"line":175,"column":56,"index":6790},"line":175,"code":"      it('should wrap navigation from last to first item', function () {\n        spyOn(firstNavItem, 'focus');\n        lastNavItem.focus();\n        lastNavItem.dispatchEvent(downArrowKeydown);\n        expect(firstNavItem.focus).toHaveBeenCalled();\n        expect(firstNavItem.focus).toHaveBeenCalledTimes(1);\n      }); // eslint-disable-next-line no-undef","file":"spec/navigation-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should open submenu","suites":["Popup Nav","Click handler","Submenu"],"updatePoint":{"line":225,"column":29,"index":8586},"line":225,"code":"      it('should open submenu', function () {\n        button.dispatchEvent(new CustomEvent('click', {\n          bubbles: true\n        }));\n        expect(wrapper.classList.contains('bx--navigation__category--expanded')).toBe(true);\n        expect(button.getAttribute('aria-expanded')).toBe('true');\n      });","file":"spec/navigation-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should close an open submenu","suites":["Popup Nav","Click handler","Submenu"],"updatePoint":{"line":232,"column":38,"index":8904},"line":232,"code":"      it('should close an open submenu', function () {\n        wrapper.classList.add('bx--navigation__category--expanded');\n        button.dispatchEvent(new CustomEvent('click', {\n          bubbles: true\n        }));\n        expect(wrapper.classList.contains('bx--navigation__category--expanded')).toBe(false);\n      });","file":"spec/navigation-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should attach active link CSS classes on click","suites":["Popup Nav","Click handler","Link"],"updatePoint":{"line":241,"column":56,"index":9286},"line":241,"code":"      it('should attach active link CSS classes on click', function () {\n        anchors[0].dispatchEvent(new CustomEvent('click', {\n          bubbles: true\n        }));\n        expect(li.classList.contains('bx--navigation-item--active')).toBe(true);\n      });","file":"spec/navigation-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not given","suites":["Popup Nav","Constructor"],"updatePoint":{"line":6,"column":49,"index":303},"line":6,"code":"    it('Should throw if root element is not given', function () {\n      expect(() => {\n        navigationMenuPanel = new NavigationMenuPanel();\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/navigation-menu-panel_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not a DOM element","suites":["Popup Nav","Constructor"],"updatePoint":{"line":11,"column":57,"index":555},"line":11,"code":"    it('Should throw if root element is not a DOM element', function () {\n      expect(() => {\n        navigationMenuPanel = new NavigationMenuPanel(document.createTextNode(''));\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/navigation-menu-panel_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should open the popup nav on button click","suites":["Popup Nav","Init Component by Launch functionality"],"updatePoint":{"line":51,"column":49,"index":2459},"line":51,"code":"    it('Should open the popup nav on button click', function () {\n      button.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(button.classList.contains('bx--header__action--active')).toBe(true);\n      expect(navigationMenu.hasAttribute('hidden')).toBe(false);\n    });","file":"spec/navigation-menu-panel_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should close an open popup nav on button click","suites":["Popup Nav","Init Component by Launch functionality"],"updatePoint":{"line":58,"column":54,"index":2772},"line":58,"code":"    it('Should close an open popup nav on button click', function () {\n      navigationMenu.removeAttribute('hidden');\n      button.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(button.classList.contains('bx--header__action--active')).toBe(false);\n      expect(navigationMenu.hasAttribute('hidden')).toBe(true);\n    });","file":"spec/navigation-menu-panel_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not given","suites":["ToastNotification","Constructor"],"updatePoint":{"line":14,"column":49,"index":643},"line":14,"code":"    it('Should throw if root element is not given', function () {\n      expect(() => {\n        new Notification();\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/notification_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not a DOM element","suites":["ToastNotification","Constructor"],"updatePoint":{"line":19,"column":57,"index":866},"line":19,"code":"    it('Should throw if root element is not a DOM element', function () {\n      expect(() => {\n        new Notification(document.createTextNode(''));\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/notification_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should set default options","suites":["ToastNotification","Constructor"],"updatePoint":{"line":24,"column":34,"index":1093},"line":24,"code":"    it('should set default options', function () {\n      const instance = new Notification(toastElement);\n      expect(flattenOptions(instance.options)).toEqual({\n        selectorInit: '[data-notification]',\n        selectorButton: '[data-notification-btn]',\n        eventBeforeDeleteNotification: 'notification-before-delete',\n        eventAfterDeleteNotification: 'notification-after-delete'\n      });\n    });","file":"spec/notification_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should search for an element with options.selectorInit","suites":["ToastNotification","Constructor"],"updatePoint":{"line":33,"column":62,"index":1533},"line":33,"code":"    it('should search for an element with options.selectorInit', function () {\n      toastElement.dataset.id = 'foo';\n      const toastInstance = new Notification(toastElement, {\n        selectorInit: '[data-id=\"foo\"]'\n      });\n      expect(toastInstance.options.selectorInit).toBe('[data-id=\"foo\"]');\n      toastInstance.release();\n    });","file":"spec/notification_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should search for close-button element with options.selectorButton","suites":["ToastNotification","Constructor"],"updatePoint":{"line":41,"column":74,"index":1887},"line":41,"code":"    it('should search for close-button element with options.selectorButton', function () {\n      const toastInstance = new Notification(toastElement);\n      const toastButton = toastElement.querySelector(toastInstance.options.selectorButton);\n      expect(toastButton).toBe(toastInstance.button);\n      toastInstance.release();\n    });","file":"spec/notification_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should call remove method","suites":["ToastNotification","Remove notification"],"updatePoint":{"line":64,"column":33,"index":2692},"line":64,"code":"    it('should call remove method', function () {\n      spyOn(instance, 'remove');\n      instance.button.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(instance.remove).toHaveBeenCalled();\n    });","file":"spec/notification_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should remove notification on click event","suites":["ToastNotification","Remove notification"],"updatePoint":{"line":71,"column":49,"index":2945},"line":71,"code":"    it('should remove notification on click event', function () {\n      instance.button.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(document.querySelector('.bx--toast-notification--error')).toBe(null);\n    });","file":"spec/notification_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should emit notification-before-delete event on click","suites":["ToastNotification","Remove notification"],"updatePoint":{"line":77,"column":61,"index":3210},"line":77,"code":"    it('should emit notification-before-delete event on click', function () {\n      const spyNotificationCloseEvent = jasmine.createSpy();\n      events.on(element, 'notification-before-delete', spyNotificationCloseEvent);\n      instance.button.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(spyNotificationCloseEvent).toHaveBeenCalled();\n    });","file":"spec/notification_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should emit notification-after-delete event on click","suites":["ToastNotification","Remove notification"],"updatePoint":{"line":85,"column":60,"index":3595},"line":85,"code":"    it('should emit notification-after-delete event on click', function () {\n      const spyNotificationCloseEvent = jasmine.createSpy();\n      events.on(element, 'notification-after-delete', spyNotificationCloseEvent);\n      instance.button.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(spyNotificationCloseEvent).toHaveBeenCalled();\n    });","file":"spec/notification_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should delete instance from WeakMap with release","suites":["ToastNotification","Remove notification"],"updatePoint":{"line":93,"column":56,"index":3975},"line":93,"code":"    it('should delete instance from WeakMap with release', function () {\n      instance.release();\n      expect(Notification.components.get(element)).toBe(undefined);\n    });","file":"spec/notification_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not given","suites":["Test Number Input","Constructor"],"updatePoint":{"line":19,"column":49,"index":792},"line":19,"code":"    it('Should throw if root element is not given', function () {\n      expect(() => {\n        new NumberInput();\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/number-input_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not a DOM element","suites":["Test Number Input","Constructor"],"updatePoint":{"line":24,"column":57,"index":1014},"line":24,"code":"    it('Should throw if root element is not a DOM element', function () {\n      expect(() => {\n        new NumberInput(document.createTextNode(''));\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/number-input_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should set default options","suites":["Test Number Input","Constructor"],"updatePoint":{"line":29,"column":34,"index":1240},"line":29,"code":"    it('should set default options', function () {\n      expect(flattenOptions(instance.options)).toEqual({\n        selectorInit: '[data-numberinput]',\n        selectorInput: '.bx--number input'\n      });\n    });","file":"spec/number-input_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should be called on click","suites":["Test Number Input","_handleClick"],"updatePoint":{"line":51,"column":33,"index":1927},"line":51,"code":"    it('Should be called on click', function () {\n      spyOn(instance, '_handleClick');\n      const event = new CustomEvent('click', {\n        bubbles: true\n      });\n      const clickTarget = element.querySelector('.up-icon');\n      clickTarget.dispatchEvent(event);\n      expect(instance._handleClick).toHaveBeenCalled();\n    });","file":"spec/number-input_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should emit a change event","suites":["Test Number Input","_handleClick"],"updatePoint":{"line":60,"column":34,"index":2261},"line":60,"code":"    it('Should emit a change event', function () {\n      const spyOnChange = jasmine.createSpy();\n      document.body.addEventListener('change', spyOnChange);\n      const event = new CustomEvent('click', {\n        bubbles: true\n      });\n      const clickTarget = element.querySelector('.up-icon');\n      clickTarget.dispatchEvent(event);\n      expect(spyOnChange).toHaveBeenCalled();\n    });","file":"spec/number-input_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should increase the value","suites":["Test Number Input","Adding and Subtracting"],"updatePoint":{"line":94,"column":33,"index":3369},"line":94,"code":"    it('Should increase the value', async function () {\n      const upArrowNode = document.querySelector('.up-icon');\n      const e = await new Promise(resolve => {\n        events.on(document.body, 'change', resolve);\n        upArrowNode.dispatchEvent(new CustomEvent('click', {\n          bubbles: true\n        }));\n      });\n      await delay(0);\n      expect(e.cancelable).toBe(false);\n      expect(inputNode.value).toBe('1');\n    });","file":"spec/number-input_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should increase the value when no maximum is set","suites":["Test Number Input","Adding and Subtracting"],"updatePoint":{"line":106,"column":56,"index":3829},"line":106,"code":"    it('Should increase the value when no maximum is set', async function () {\n      const upArrowNode = document.querySelector('.up-icon');\n      inputNode.max = '';\n      inputNode.min = '';\n      const e = await new Promise(resolve => {\n        events.on(document.body, 'change', resolve);\n        upArrowNode.dispatchEvent(new CustomEvent('click', {\n          bubbles: true\n        }));\n      });\n      await delay(0);\n      expect(e.cancelable).toBe(false);\n      expect(inputNode.value).toBe('1');\n    });","file":"spec/number-input_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should increase the value by the step amount","suites":["Test Number Input","Adding and Subtracting"],"updatePoint":{"line":120,"column":52,"index":4337},"line":120,"code":"    it('Should increase the value by the step amount', async function () {\n      inputNode.step = 5;\n      const upArrowNode = document.querySelector('.up-icon');\n      const e = await new Promise(resolve => {\n        events.on(document.body, 'change', resolve);\n        upArrowNode.dispatchEvent(new CustomEvent('click', {\n          bubbles: true\n        }));\n      });\n      await delay(0);\n      expect(e.cancelable).toBe(false);\n      expect(inputNode.value).toBe('5');\n    });","file":"spec/number-input_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should not increase the value past the max","suites":["Test Number Input","Adding and Subtracting"],"updatePoint":{"line":133,"column":50,"index":4817},"line":133,"code":"    it('Should not increase the value past the max', async function () {\n      inputNode.step = 5;\n      inputNode.max = 3;\n      const upArrowNode = document.querySelector('.up-icon');\n      const e = await new Promise(resolve => {\n        events.on(document.body, 'change', resolve);\n        upArrowNode.dispatchEvent(new CustomEvent('click', {\n          bubbles: true\n        }));\n      });\n      await delay(0);\n      expect(e.cancelable).toBe(false);\n      expect(inputNode.value).toBe('3');\n    });","file":"spec/number-input_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should ignore increment when current value is above maximum","suites":["Test Number Input","Adding and Subtracting"],"updatePoint":{"line":147,"column":67,"index":5339},"line":147,"code":"    it('Should ignore increment when current value is above maximum', async function () {\n      inputNode.value = 1000;\n      inputNode.step = 10;\n      inputNode.max = 100;\n      const upArrowNode = document.querySelector('.up-icon');\n      const e = await new Promise(resolve => {\n        events.on(document.body, 'change', resolve);\n        upArrowNode.dispatchEvent(new CustomEvent('click', {\n          bubbles: true\n        }));\n      });\n      await delay(0);\n      expect(e.cancelable).toBe(false);\n      expect(inputNode.value).toBe('1000');\n    });","file":"spec/number-input_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should set value to maximum on decrement when current value is above maximum","suites":["Test Number Input","Adding and Subtracting"],"updatePoint":{"line":162,"column":84,"index":5914},"line":162,"code":"    it('Should set value to maximum on decrement when current value is above maximum', async function () {\n      inputNode.value = inputNode.max + 1;\n      inputNode.step = 10;\n      const downArrowNode = document.querySelector('.down-icon');\n      const e = await new Promise(resolve => {\n        events.on(document.body, 'change', resolve);\n        downArrowNode.dispatchEvent(new CustomEvent('click', {\n          bubbles: true\n        }));\n      });\n      await delay(0);\n      expect(e.cancelable).toBe(false);\n      expect(inputNode.value).toBe(inputNode.max);\n    });","file":"spec/number-input_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should ignore decrement when current value is below minimum","suites":["Test Number Input","Adding and Subtracting"],"updatePoint":{"line":176,"column":67,"index":6471},"line":176,"code":"    it('Should ignore decrement when current value is below minimum', async function () {\n      inputNode.value = -100;\n      inputNode.step = 10;\n      inputNode.min = 0;\n      const downArrowNode = document.querySelector('.down-icon');\n      const e = await new Promise(resolve => {\n        events.on(document.body, 'change', resolve);\n        downArrowNode.dispatchEvent(new CustomEvent('click', {\n          bubbles: true\n        }));\n      });\n      await delay(0);\n      expect(e.cancelable).toBe(false);\n      expect(inputNode.value).toBe('-100');\n    });","file":"spec/number-input_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should set value to minimum on increment when current value is below minimum","suites":["Test Number Input","Adding and Subtracting"],"updatePoint":{"line":191,"column":84,"index":7050},"line":191,"code":"    it('Should set value to minimum on increment when current value is below minimum', async function () {\n      inputNode.value = inputNode.min - 100;\n      inputNode.step = 10;\n      const upArrowNode = document.querySelector('.up-icon');\n      const e = await new Promise(resolve => {\n        events.on(document.body, 'change', resolve);\n        upArrowNode.dispatchEvent(new CustomEvent('click', {\n          bubbles: true\n        }));\n      });\n      await delay(0);\n      expect(e.cancelable).toBe(false);\n      expect(inputNode.value).toBe(inputNode.min);\n    });","file":"spec/number-input_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should decrease the value","suites":["Test Number Input","Adding and Subtracting"],"updatePoint":{"line":205,"column":33,"index":7569},"line":205,"code":"    it('Should decrease the value', async function () {\n      const downArrowNode = document.querySelector('.down-icon');\n      inputNode.value = '1';\n      const e = await new Promise(resolve => {\n        events.on(document.body, 'change', resolve);\n        downArrowNode.dispatchEvent(new CustomEvent('click', {\n          bubbles: true\n        }));\n      });\n      await delay(0);\n      expect(e.cancelable).toBe(false);\n      expect(inputNode.value).toBe('0');\n    });","file":"spec/number-input_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should decrease the value when no minimum is set","suites":["Test Number Input","Adding and Subtracting"],"updatePoint":{"line":218,"column":56,"index":8064},"line":218,"code":"    it('Should decrease the value when no minimum is set', async function () {\n      const downArrowNode = document.querySelector('.down-icon');\n      inputNode.min = '';\n      inputNode.max = '';\n      inputNode.step = 1;\n      inputNode.value = '1';\n      const e = await new Promise(resolve => {\n        events.on(document.body, 'change', resolve);\n        downArrowNode.dispatchEvent(new CustomEvent('click', {\n          bubbles: true\n        }));\n      });\n      await delay(0);\n      expect(e.cancelable).toBe(false);\n      expect(inputNode.value).toBe('0');\n    });","file":"spec/number-input_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should decrease the value by the step amount","suites":["Test Number Input","Adding and Subtracting"],"updatePoint":{"line":234,"column":52,"index":8633},"line":234,"code":"    it('Should decrease the value by the step amount', async function () {\n      inputNode.value = 5;\n      inputNode.step = 5;\n      const downArrowNode = document.querySelector('.down-icon');\n      const e = await new Promise(resolve => {\n        events.on(document.body, 'change', resolve);\n        downArrowNode.dispatchEvent(new CustomEvent('click', {\n          bubbles: true\n        }));\n      });\n      await delay(0);\n      expect(e.cancelable).toBe(false);\n      expect(inputNode.value).toBe('0');\n    });","file":"spec/number-input_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should not decrease the value past the min","suites":["Test Number Input","Adding and Subtracting"],"updatePoint":{"line":248,"column":50,"index":9146},"line":248,"code":"    it('Should not decrease the value past the min', async function () {\n      inputNode.value = 3;\n      inputNode.step = 5;\n      const downArrowNode = document.querySelector('.down-icon');\n      const e = await new Promise(resolve => {\n        events.on(document.body, 'change', resolve);\n        downArrowNode.dispatchEvent(new CustomEvent('click', {\n          bubbles: true\n        }));\n      });\n      await delay(0);\n      expect(e.cancelable).toBe(false);\n      expect(inputNode.value).toBe('0');\n    });","file":"spec/number-input_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should prevent creating duplicate instances","suites":["Test Number Input","Managing instances"],"updatePoint":{"line":279,"column":51,"index":10137},"line":279,"code":"    it('Should prevent creating duplicate instances', function () {\n      let first;\n      let second;\n\n      try {\n        first = NumberInput.create(element);\n        second = NumberInput.create(element);\n        expect(first).toBe(second);\n      } finally {\n        first && first.release();\n\n        if (first !== second) {\n          second && second.release();\n        }\n      }\n    });","file":"spec/number-input_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should let create a new instance for an element if an earlier one has been released","suites":["Test Number Input","Managing instances"],"updatePoint":{"line":295,"column":91,"index":10569},"line":295,"code":"    it('Should let create a new instance for an element if an earlier one has been released', function () {\n      let first;\n      let second;\n\n      try {\n        first = NumberInput.create(element);\n        first.release();\n        second = NumberInput.create(element);\n        expect(first).not.toBe(second);\n      } finally {\n        first && first.release();\n\n        if (first !== second) {\n          second && second.release();\n        }\n      }\n    });","file":"spec/number-input_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not given","suites":["Test Overflow menu","Constructor"],"updatePoint":{"line":6,"column":49,"index":327},"line":6,"code":"    it('Should throw if root element is not given', function () {\n      expect(() => {\n        new OverflowMenu();\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/overflow-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not a DOM element","suites":["Test Overflow menu","Constructor"],"updatePoint":{"line":11,"column":57,"index":550},"line":11,"code":"    it('Should throw if root element is not a DOM element', function () {\n      expect(() => {\n        new OverflowMenu(document.createTextNode(''));\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/overflow-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should set and remove \"bx--overflow-menu--open\" class on the element on click event","suites":["Test Overflow menu","Toggling a single overflow-menu"],"updatePoint":{"line":27,"column":91,"index":1200},"line":27,"code":"    it('Should set and remove \"bx--overflow-menu--open\" class on the element on click event', function () {\n      // Initial click to open overflow-menu:\n      element.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(element.classList.contains('bx--overflow-menu--open')).toBe(true); // Secondary click to close overflow-menu:\n\n      element.dispatchEvent(new CustomEvent('mousedown', {\n        bubbles: true\n      }));\n      element.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(element.classList.contains('bx--overflow-menu--open')).toBe(false);\n    });","file":"spec/overflow-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should provide a way to cancel showing overflow menu","suites":["Test Overflow menu","Custom event emission"],"updatePoint":{"line":63,"column":60,"index":2493},"line":63,"code":"    it('Should provide a way to cancel showing overflow menu', function () {\n      const spyOverflowEvent = jasmine.createSpy();\n      events.on(element.ownerDocument.body, 'floating-menu-beingshown', e => {\n        e.preventDefault();\n      });\n      events.on(element.ownerDocument.body, 'floating-menu-shown', spyOverflowEvent);\n      element.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(spyOverflowEvent, 'floating-menu-shown event').not.toHaveBeenCalled();\n      expect(element.classList.contains('bx--overflow-menu--open'), 'State of root element').toBe(false);\n    });","file":"spec/overflow-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should move focus from currently focused item to previous menu item","suites":["Test Overflow menu","Custom event emission","Arrow key navigation","Up/Down arrow keys"],"updatePoint":{"line":102,"column":79,"index":4081},"line":102,"code":"        it('should move focus from currently focused item to previous menu item', function () {\n          spyOn(items[0], 'focus');\n          items[1].focus();\n          element.dispatchEvent(upArrowKeydown);\n          expect(items[0].focus).toHaveBeenCalled();\n          expect(items[0].focus).toHaveBeenCalledTimes(1);\n        });","file":"spec/overflow-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should wrap focus from first menu item to last menu item","suites":["Test Overflow menu","Custom event emission","Arrow key navigation","Up/Down arrow keys"],"updatePoint":{"line":109,"column":68,"index":4403},"line":109,"code":"        it('should wrap focus from first menu item to last menu item', function () {\n          spyOn(items[items.length - 1], 'focus');\n          element.dispatchEvent(upArrowKeydown);\n          expect(items[items.length - 1].focus).toHaveBeenCalled();\n          expect(items[items.length - 1].focus).toHaveBeenCalledTimes(1);\n        });","file":"spec/overflow-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should move focus from currently focused item to next menu item","suites":["Test Overflow menu","Custom event emission","Arrow key navigation","Up/Down arrow keys"],"updatePoint":{"line":115,"column":75,"index":4749},"line":115,"code":"        it('should move focus from currently focused item to next menu item', function () {\n          spyOn(items[1], 'focus');\n          optionsElement.dispatchEvent(downArrowKeydown);\n          expect(items[1].focus).toHaveBeenCalledTimes(1);\n        });","file":"spec/overflow-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should wrap focus from last menu item to first menu item","suites":["Test Overflow menu","Custom event emission","Arrow key navigation","Up/Down arrow keys"],"updatePoint":{"line":120,"column":68,"index":4999},"line":120,"code":"        it('should wrap focus from last menu item to first menu item', function () {\n          spyOn(items[0], 'focus');\n          items[items.length - 1].focus();\n          optionsElement.dispatchEvent(downArrowKeydown);\n          expect(items[0].focus).toHaveBeenCalledTimes(1);\n        });","file":"spec/overflow-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should emit an event after showing","suites":["Test Overflow menu","Custom event emission","Arrow key navigation","Up/Down arrow keys"],"updatePoint":{"line":132,"column":42,"index":5455},"line":132,"code":"    it('Should emit an event after showing', function () {\n      const spyOverflowEvent = jasmine.createSpy();\n      events.on(document, 'floating-menu-shown', spyOverflowEvent);\n      element.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(spyOverflowEvent).toHaveBeenCalled();\n    });","file":"spec/overflow-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should provide a way to cancel hiding overflow menu","suites":["Test Overflow menu","Custom event emission","Arrow key navigation","Up/Down arrow keys"],"updatePoint":{"line":140,"column":59,"index":5798},"line":140,"code":"    it('Should provide a way to cancel hiding overflow menu', function () {\n      const spyOverflowEvent = jasmine.createSpy();\n      events.on(element.ownerDocument.body, 'floating-menu-beinghidden', e => {\n        e.preventDefault();\n      });\n      events.on(element.ownerDocument.body, 'floating-menu-hidden', spyOverflowEvent);\n      element.classList.add('bx--overflow-menu--open');\n      optionsElement.classList.add('bx--overflow-menu-options--open');\n      element.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(spyOverflowEvent, 'floating-menu-hidden event').not.toHaveBeenCalled();\n      expect(element.classList.contains('bx--overflow-menu--open'), 'State of root element').toBe(true);\n    });","file":"spec/overflow-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should emit an event after hiding","suites":["Test Overflow menu","Custom event emission","Arrow key navigation","Up/Down arrow keys"],"updatePoint":{"line":154,"column":41,"index":6526},"line":154,"code":"    it('Should emit an event after hiding', function () {\n      const spyOverflowEvent = jasmine.createSpy();\n      events.on(document, 'floating-menu-hidden', spyOverflowEvent);\n      element.classList.add('bx--overflow-menu--open');\n      optionsElement.classList.add('bx--overflow-menu-options--open');\n      element.dispatchEvent(new CustomEvent('mousedown', {\n        bubbles: true\n      }));\n      element.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(spyOverflowEvent).toHaveBeenCalled();\n    });","file":"spec/overflow-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should open one menu on a single click event","suites":["Test Overflow menu","Toggling multiple overflow-menus"],"updatePoint":{"line":194,"column":52,"index":8048},"line":194,"code":"    it('Should open one menu on a single click event', function () {\n      element1.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(element1.classList.contains('bx--overflow-menu--open'), '1st overflow menu').toBe(true);\n      expect(element2.classList.contains('bx--overflow-menu--open'), '2nd overflow menu').toBe(false);\n      expect(element3.classList.contains('bx--overflow-menu--open'), '3rd overflow menu').toBe(false);\n    });","file":"spec/overflow-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should open one menu on multiple click events","suites":["Test Overflow menu","Toggling multiple overflow-menus"],"updatePoint":{"line":202,"column":53,"index":8523},"line":202,"code":"    it('Should open one menu on multiple click events', function () {\n      element1.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      element2.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(element1.classList.contains('bx--overflow-menu--open'), '1st overflow menu').toBe(false);\n      expect(element2.classList.contains('bx--overflow-menu--open'), '2nd overflow menu').toBe(true);\n      expect(element3.classList.contains('bx--overflow-menu--open'), '3rd overflow menu').toBe(false);\n    });","file":"spec/overflow-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should focus on the floating menu when the menu is open","suites":["Test Overflow menu","Managing focus"],"updatePoint":{"line":237,"column":63,"index":9905},"line":237,"code":"    it('Should focus on the floating menu when the menu is open', function () {\n      spyOn(firstItemNode, 'focus');\n      element.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(firstItemNode.focus).toHaveBeenCalledTimes(1);\n    });","file":"spec/overflow-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should remove click event listener on document object once the instance is released","suites":["Test Overflow menu","Managing instances"],"updatePoint":{"line":260,"column":91,"index":10681},"line":260,"code":"    it('Should remove click event listener on document object once the instance is released', function () {\n      element.classList.add('bx--overflow-menu--open');\n      menu.release();\n      document.body.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(element.classList.contains('bx--overflow-menu--open')).toBe(true);\n    });","file":"spec/overflow-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should remove keypress event listener on document object once the instance is released","suites":["Test Overflow menu","Managing instances"],"updatePoint":{"line":268,"column":94,"index":11052},"line":268,"code":"    it('Should remove keypress event listener on document object once the instance is released', function () {\n      element.classList.add('bx--overflow-menu--open');\n      menu.release();\n      const event = new CustomEvent('keypress', {\n        bubbles: true\n      });\n      event.key = 'Enter';\n      document.body.dispatchEvent(event);\n      expect(element.classList.contains('bx--overflow-menu--open')).toBe(true);\n    });","file":"spec/overflow-menu_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not given","suites":["Test pagination","Constructor"],"updatePoint":{"line":6,"column":49,"index":276},"line":6,"code":"    it('Should throw if root element is not given', function () {\n      expect(() => {\n        pagination = new Pagination();\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/pagination_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not a DOM element","suites":["Test pagination","Constructor"],"updatePoint":{"line":11,"column":57,"index":510},"line":11,"code":"    it('Should throw if root element is not a DOM element', function () {\n      expect(() => {\n        pagination = new Pagination(document.createTextNode(''));\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/pagination_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should set default options","suites":["Test pagination","Constructor"],"updatePoint":{"line":16,"column":34,"index":748},"line":16,"code":"    it('Should set default options', function () {\n      expect(flattenOptions((pagination = new Pagination(document.createElement('div'))).options)).toEqual({\n        selectorInit: '[data-pagination]',\n        selectorItemsPerPageInput: '[data-items-per-page]',\n        selectorPageNumberInput: '[data-page-number-input]',\n        selectorPageBackward: '[data-page-backward]',\n        selectorPageForward: '[data-page-forward]',\n        eventItemsPerPage: 'itemsPerPage',\n        eventPageNumber: 'pageNumber',\n        eventPageChange: 'pageChange'\n      });\n    });","file":"spec/pagination_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not given","suites":["Pagination Nav","Constructor"],"updatePoint":{"line":15,"column":49,"index":619},"line":15,"code":"    it('Should throw if root element is not given', () => {\n      expect(() => {\n        new PaginationNav();\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/pagination-nav_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not a DOM element","suites":["Pagination Nav","Constructor"],"updatePoint":{"line":20,"column":57,"index":837},"line":20,"code":"    it('Should throw if root element is not a DOM element', () => {\n      expect(() => {\n        new PaginationNav(document.createTextNode(''));\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/pagination-nav_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should set default options","suites":["Pagination Nav","Constructor"],"updatePoint":{"line":25,"column":34,"index":1059},"line":25,"code":"    it('should set default options', () => {\n      expect(flattenOptions(instance.options)).toEqual({\n        selectorInit: '[data-pagination-nav]',\n        selectorPageElement: '[data-page]',\n        selectorPageButton: '[data-page-button]',\n        selectorPagePrevious: '[data-page-previous]',\n        selectorPageNext: '[data-page-next]',\n        selectorPageSelect: '[data-page-select]',\n        selectorPageActive: '[data-page-active=\"true\"]',\n        attribPage: 'data-page',\n        attribActive: 'data-page-active',\n        classActive: 'bx--pagination-nav__page--active',\n        classDisabled: 'bx--pagination-nav__page--disabled'\n      });\n    });","file":"spec/pagination-nav_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should be called on click","suites":["Pagination Nav","handleClick"],"updatePoint":{"line":55,"column":33,"index":2155},"line":55,"code":"    it('should be called on click', () => {\n      spyOn(instance, 'handleClick');\n      const event = new CustomEvent('click', {\n        bubbles: true\n      });\n      const pageButton = element.querySelector(instance.options.selectorPageElement);\n      pageButton.dispatchEvent(event);\n      expect(instance.handleClick).toHaveBeenCalled();\n    });","file":"spec/pagination-nav_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should be called on page direction click","suites":["Pagination Nav","handleClick"],"updatePoint":{"line":64,"column":48,"index":2519},"line":64,"code":"    it('should be called on page direction click', () => {\n      spyOn(instance, 'clearActivePage');\n      const event = new CustomEvent('click', {\n        bubbles: true\n      });\n      const pagePreviousButton = element.querySelector(instance.options.selectorPagePrevious);\n      const pageNextButton = element.querySelector(instance.options.selectorPageNext);\n\n      if (pagePreviousButton && !pagePreviousButton.getAttribute('aria-disabled')) {\n        pagePreviousButton.dispatchEvent(event);\n        expect(instance.clearActivePage).toHaveBeenCalled();\n      }\n\n      if (pageNextButton) {\n        pageNextButton.dispatchEvent(event);\n        expect(instance.clearActivePage).toHaveBeenCalled();\n      }\n    });","file":"spec/pagination-nav_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should be called on page select menu","suites":["Pagination Nav","handleClick"],"updatePoint":{"line":82,"column":44,"index":3232},"line":82,"code":"    it('should be called on page select menu', () => {\n      spyOn(instance, 'handleSelectChange');\n      const event = new CustomEvent('change', {\n        bubbles: true\n      });\n      const pageSelectMenu = element.querySelector(instance.options.selectorPageSelect);\n\n      if (pageSelectMenu) {\n        pageSelectMenu.dispatchEvent(event);\n        expect(instance.handleSelectChange).toHaveBeenCalled();\n        expect(instance.setPrevNextStates).toHaveBeenCalled();\n        expect(pageSelectMenu.classList.contains(instance.options.classActive)).toBe(true);\n      }\n    });","file":"spec/pagination-nav_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"page should get active class and be disabled when clicked","suites":["Pagination Nav","page change"],"updatePoint":{"line":111,"column":65,"index":4268},"line":111,"code":"    it('page should get active class and be disabled when clicked', () => {\n      const pageButtonArray = element.querySelectorAll(instance.options.selectorPageElement);\n      pageButtonArray.forEach(el => {\n        el.dispatchEvent(new CustomEvent('click', {\n          bubbles: true\n        }));\n        expect(el.classList.contains(instance.options.classActive)).toBe(true);\n        expect(el.classList.contains(instance.options.classDisabled)).toBe(true);\n      });\n    });","file":"spec/pagination-nav_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not given","suites":["Popup Nav","Constructor"],"updatePoint":{"line":6,"column":49,"index":290},"line":6,"code":"    it('Should throw if root element is not given', function () {\n      expect(() => {\n        productSwitcher = new ProductSwitcher();\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/product-switcher_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not a DOM element","suites":["Popup Nav","Constructor"],"updatePoint":{"line":11,"column":57,"index":534},"line":11,"code":"    it('Should throw if root element is not a DOM element', function () {\n      expect(() => {\n        productSwitcher = new ProductSwitcher(document.createTextNode(''));\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/product-switcher_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should open the popup nav on button click","suites":["Popup Nav","Init Component by Launch functionality"],"updatePoint":{"line":38,"column":49,"index":1644},"line":38,"code":"    it('Should open the popup nav on button click', function () {\n      button.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(button.classList.contains('bx--header__action--active')).toBe(true);\n      expect(productSwitcher.classList.contains('bx--panel--expanded')).toBe(true);\n    });","file":"spec/product-switcher_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should close an open popup nav on button click","suites":["Popup Nav","Init Component by Launch functionality"],"updatePoint":{"line":45,"column":54,"index":1976},"line":45,"code":"    it('Should close an open popup nav on button click', function () {\n      productSwitcher.classList.add('bx--panel--expanded');\n      button.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(button.classList.contains('bx--header__action--active')).toBe(false);\n      expect(productSwitcher.classList.contains('bx--panel--expanded')).toBe(false);\n    });","file":"spec/product-switcher_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not given","suites":["ProgressIndicator","Constructor"],"updatePoint":{"line":16,"column":49,"index":702},"line":16,"code":"    it('Should throw if root element is not given', function () {\n      expect(() => {\n        new ProgressIndicator();\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/progress-indicator_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not a DOM element","suites":["ProgressIndicator","Constructor"],"updatePoint":{"line":21,"column":57,"index":930},"line":21,"code":"    it('Should throw if root element is not a DOM element', function () {\n      expect(() => {\n        new ProgressIndicator(document.createTextNode(''));\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/progress-indicator_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should set default options","suites":["ProgressIndicator","Constructor"],"updatePoint":{"line":26,"column":34,"index":1162},"line":26,"code":"    it('should set default options', function () {\n      expect(flattenOptions(instance.options)).toEqual({\n        selectorInit: '[data-progress]',\n        selectorStepElement: '.bx--progress-step',\n        selectorCurrent: '.bx--progress-step--current',\n        selectorIncomplete: '.bx--progress-step--incomplete',\n        selectorComplete: '.bx--progress-step--complete',\n        selectorLabel: '.bx--progress-label',\n        selectorTooltip: '.bx--tooltip',\n        selectorTooltipText: '.bx--tooltip__text',\n        classStep: 'bx--progress-step',\n        classComplete: 'bx--progress-step--complete',\n        classCurrent: 'bx--progress-step--current',\n        classIncomplete: 'bx--progress-step--incomplete',\n        classOverflowLabel: 'bx--progress-label-overflow',\n        classTooltipMulti: 'bx--tooltip_multi',\n        maxWidth: 87,\n        tooltipMaxHeight: 21\n      });\n    });","file":"spec/progress-indicator_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"state.currentIndex should be a number","suites":["ProgressIndicator","Constructor"],"updatePoint":{"line":46,"column":45,"index":2067},"line":46,"code":"    it('state.currentIndex should be a number', function () {\n      expect(isNaN(instance.state.currentIndex)).toBe(false);\n    });","file":"spec/progress-indicator_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"state.totalSteps should be a number","suites":["ProgressIndicator","Constructor"],"updatePoint":{"line":49,"column":43,"index":2197},"line":49,"code":"    it('state.totalSteps should be a number', function () {\n      expect(isNaN(instance.state.totalSteps)).toBe(false);\n    });","file":"spec/progress-indicator_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should remove the svg contained inside given element param","suites":["ProgressIndicator","_updateStep"],"updatePoint":{"line":67,"column":66,"index":2801},"line":67,"code":"    it('should remove the svg contained inside given element param', function () {\n      const el = instance.element.querySelector(instance.options.selectorIncomplete);\n\n      instance._updateStep({\n        element: el,\n        className: instance.options.classComplete\n      });\n\n      expect(el.firstElementChild.tagName).not.toBe('svg');\n    });","file":"spec/progress-indicator_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should update className with given className param","suites":["ProgressIndicator","_updateStep"],"updatePoint":{"line":77,"column":58,"index":3142},"line":77,"code":"    it('should update className with given className param', function () {\n      const el = instance.element.querySelector(instance.options.selectorIncomplete);\n\n      instance._updateStep({\n        element: el,\n        className: instance.options.classComplete\n      });\n\n      expect(el.classList.contains(instance.options.classComplete)).toBe(true);\n    });","file":"spec/progress-indicator_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should not have overflow class","suites":["ProgressIndicator","addOverflowTooltip"],"updatePoint":{"line":112,"column":38,"index":4350},"line":112,"code":"    it('should not have overflow class', function () {\n      stepLabel.textContent = 'Step';\n      instance = new ProgressIndicator(element);\n      expect(stepLabel.classList.contains('bx--progress-label-overflow')).toBe(false);\n    });","file":"spec/progress-indicator_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should have an overflow class","suites":["ProgressIndicator","addOverflowTooltip"],"updatePoint":{"line":117,"column":37,"index":4586},"line":117,"code":"    it('should have an overflow class', function () {\n      stepLabel.textContent = 'Overflow Ex. 1';\n      instance = new ProgressIndicator(element);\n      expect(stepLabel.classList.contains('bx--progress-label-overflow')).toBe(true);\n    });","file":"spec/progress-indicator_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"multi line tooltip should have multi line class","suites":["ProgressIndicator","addOverflowTooltip"],"updatePoint":{"line":122,"column":55,"index":4849},"line":122,"code":"    it('multi line tooltip should have multi line class', function () {\n      stepLabel.textContent = 'Overflow Ex. 2 Multi Line';\n      tooltipText.style.height = '24px';\n      instance = new ProgressIndicator(element);\n      expect(tooltipDiv.classList.contains('bx--tooltip_multi')).toBe(true);\n    });","file":"spec/progress-indicator_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"single line tooltip should not have multi line class","suites":["ProgressIndicator","addOverflowTooltip"],"updatePoint":{"line":128,"column":60,"index":5160},"line":128,"code":"    it('single line tooltip should not have multi line class', function () {\n      stepLabel.textContent = 'Overflow Ex. 1';\n      tooltipText.style.height = '20px';\n      instance = new ProgressIndicator(element);\n      expect(tooltipDiv.classList.contains('bx--tooltip_multi')).toBe(false);\n    });","file":"spec/progress-indicator_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should loop through all step elements with the correct selector","suites":["ProgressIndicator","getSteps"],"updatePoint":{"line":149,"column":71,"index":5922},"line":149,"code":"    it('should loop through all step elements with the correct selector', function () {\n      const className = instance.options.classStep;\n      const steps = instance.getSteps();\n      steps.forEach(step => expect(step.element.classList.contains(className)).toBe(true));\n    });","file":"spec/progress-indicator_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should return an Array of objects with \"element\" and \"index\" keynames","suites":["ProgressIndicator","getSteps"],"updatePoint":{"line":154,"column":77,"index":6209},"line":154,"code":"    it('should return an Array of objects with \"element\" and \"index\" keynames', function () {\n      const elementKey = Object.keys(instance.getSteps()[0])[0];\n      const indexKey = Object.keys(instance.getSteps()[0])[1];\n      expect(elementKey).toBe('element');\n      expect(indexKey).toBe('index');\n    });","file":"spec/progress-indicator_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"index should be a number","suites":["ProgressIndicator","getSteps"],"updatePoint":{"line":160,"column":32,"index":6474},"line":160,"code":"    it('index should be a number', function () {\n      expect(isNaN(instance.getSteps()[0].index)).toBe(false);\n    });","file":"spec/progress-indicator_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"order should start counting from 0","suites":["ProgressIndicator","getSteps"],"updatePoint":{"line":163,"column":42,"index":6604},"line":163,"code":"    it('order should start counting from 0', function () {\n      const firstStepIndex = instance.getSteps().map(step => step.index)[0];\n      expect(firstStepIndex).toBe(0);\n    });","file":"spec/progress-indicator_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should return an object with element and index keys","suites":["ProgressIndicator","getCurrent"],"updatePoint":{"line":182,"column":59,"index":7255},"line":182,"code":"    it('should return an object with element and index keys', function () {\n      expect(Object.keys(instance.getCurrent())[0]).toBe('element');\n      expect(Object.keys(instance.getCurrent())[1]).toBe('index');\n    });","file":"spec/progress-indicator_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"element value should have correct className: classStep","suites":["ProgressIndicator","getCurrent"],"updatePoint":{"line":186,"column":62,"index":7478},"line":186,"code":"    it('element value should have correct className: classStep', function () {\n      const el = instance.getCurrent().element;\n      expect(el.classList.contains(instance.options.classStep)).toBe(true);\n    });","file":"spec/progress-indicator_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"element value should have correct className: classCurrent","suites":["ProgressIndicator","getCurrent"],"updatePoint":{"line":190,"column":65,"index":7692},"line":190,"code":"    it('element value should have correct className: classCurrent', function () {\n      const el = instance.getCurrent().element;\n      expect(el.classList.contains(instance.options.classCurrent)).toBe(true);\n    });","file":"spec/progress-indicator_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should set a new currentIndex with a given number param","suites":["ProgressIndicator","setCurrent"],"updatePoint":{"line":209,"column":63,"index":8359},"line":209,"code":"    it('should set a new currentIndex with a given number param', function () {\n      instance.setCurrent(2);\n      expect(instance.state.currentIndex).toBe(2);\n    });","file":"spec/progress-indicator_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should update className of new currentIndex","suites":["ProgressIndicator","setCurrent"],"updatePoint":{"line":213,"column":51,"index":8516},"line":213,"code":"    it('should update className of new currentIndex', function () {\n      instance.setCurrent(2);\n      const el = instance.getCurrent().element;\n      expect(el.classList.contains(instance.options.classCurrent)).toBe(true);\n    });","file":"spec/progress-indicator_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should set state of previous steps to complete","suites":["ProgressIndicator","setCurrent"],"updatePoint":{"line":218,"column":54,"index":8752},"line":218,"code":"    it('should set state of previous steps to complete', function () {\n      instance.setCurrent(2);\n      const previousStep = instance.getSteps().map(step => step).filter(step => step.index < 2)[0];\n      expect(previousStep.element.classList.contains(instance.options.classComplete)).toBe(true);\n      expect(previousStep.element.classList.contains(instance.options.classCurrent)).toBe(false);\n    });","file":"spec/progress-indicator_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should set state of next steps to incomplete","suites":["ProgressIndicator","setCurrent"],"updatePoint":{"line":224,"column":52,"index":9155},"line":224,"code":"    it('should set state of next steps to incomplete', function () {\n      instance.setCurrent(2);\n      const nextStep = instance.getSteps().map(step => step).filter(step => step.index > 2)[0];\n      expect(nextStep.element.classList.contains(instance.options.classIncomplete)).toBe(true);\n      expect(nextStep.element.classList.contains(instance.options.classComplete)).toBe(false);\n      expect(nextStep.element.classList.contains(instance.options.classCurrent)).toBe(false);\n    });","file":"spec/progress-indicator_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not given","suites":["Test Search","Constructor"],"updatePoint":{"line":6,"column":49,"index":309},"line":6,"code":"    it('Should throw if root element is not given', function () {\n      expect(() => {\n        new Search();\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/search_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not a DOM element","suites":["Test Search","Constructor"],"updatePoint":{"line":11,"column":57,"index":526},"line":11,"code":"    it('Should throw if root element is not a DOM element', function () {\n      expect(() => {\n        new Search(document.createTextNode(''));\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/search_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should set default options","suites":["Test Search","Constructor"],"updatePoint":{"line":16,"column":34,"index":747},"line":16,"code":"    it('Should set default options', function () {\n      const container = document.createElement('div');\n      container.innerHTML = searchHTML;\n      const search = new Search(container);\n\n      try {\n        expect(flattenOptions(search.options)).toEqual({\n          selectorInit: '[data-search]',\n          selectorSearchView: '[data-search-view]',\n          selectorSearchInput: '.bx--search-input',\n          selectorClearIcon: '.bx--search-close',\n          selectorIconContainer: '.bx--search-button[data-search-toggle]',\n          classClearHidden: 'bx--search-close--hidden',\n          classLayoutHidden: 'bx--search-view--hidden'\n        });\n      } finally {\n        search.release();\n      }\n    });","file":"spec/search_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Clear icon should be hidden by default","suites":["Test Search","Clearing the search bar"],"updatePoint":{"line":51,"column":46,"index":2149},"line":51,"code":"    it('Clear icon should be hidden by default', function () {\n      expect(clearIconInitialState).toBe(true);\n    });","file":"spec/search_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Clear icon should be shown when input has value","suites":["Test Search","Clearing the search bar"],"updatePoint":{"line":54,"column":55,"index":2277},"line":54,"code":"    it('Clear icon should be shown when input has value', function () {\n      input.value = 'testing';\n      input.dispatchEvent(new CustomEvent('input', {\n        bubbles: true\n      })); // IE11 doesn't have `.classList` for `<svg>`\n\n      expect(clearIcon.getAttribute('class').trim().split(/\\s+/).indexOf('bx--search-close--hidden') < 0).toBe(true);\n    });","file":"spec/search_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should clear the input when clicked","suites":["Test Search","Clearing the search bar"],"updatePoint":{"line":62,"column":43,"index":2627},"line":62,"code":"    it('Should clear the input when clicked', function () {\n      clearIcon.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(input.value).toBe('');\n    });","file":"spec/search_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not given","suites":["Side Nav","Constructor"],"updatePoint":{"line":4,"column":49,"index":187},"line":4,"code":"    it('Should throw if root element is not given', function () {\n      expect(() => new SideNav()).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/side-nav_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not a DOM element","suites":["Side Nav","Constructor"],"updatePoint":{"line":7,"column":57,"index":386},"line":7,"code":"    it('Should throw if root element is not a DOM element', function () {\n      expect(() => new SideNav(document.createTextNode(''))).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/side-nav_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should open the side nav on toggle click","suites":["Side Nav","Click handler","Click toggle"],"updatePoint":{"line":50,"column":50,"index":2301},"line":50,"code":"      it('should open the side nav on toggle click', function () {\n        toggleNode.dispatchEvent(new CustomEvent('click', {\n          bubbles: true\n        }));\n        expect(element.classList.contains('bx--side-nav--expanded')).toBe(true);\n      });","file":"spec/side-nav_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should close the open side nav on toggle click","suites":["Side Nav","Click handler","Click toggle"],"updatePoint":{"line":56,"column":56,"index":2562},"line":56,"code":"      it('should close the open side nav on toggle click', function () {\n        toggleNode.setAttribute('aria-expanded', 'true');\n        toggleNode.dispatchEvent(new CustomEvent('click', {\n          bubbles: true\n        }));\n        expect(element.classList.contains('bx--side-nav--expanded')).toBe(false);\n      });","file":"spec/side-nav_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should attach CSS classes on click","suites":["Side Nav","Click handler","Click side nav link"],"updatePoint":{"line":65,"column":44,"index":2928},"line":65,"code":"      it('should attach CSS classes on click', function () {\n        navLinkTriggerNode1.dispatchEvent(new CustomEvent('click', {\n          bubbles: true\n        }));\n        expect(navLinkTriggerNode1.classList.contains('bx--side-nav__link--current')).toBe(true);\n        expect(navLinkNode1.classList.contains('bx--side-nav__item--active')).toBe(true);\n      });","file":"spec/side-nav_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should detach CSS classes from previously active links when nav link is active","suites":["Side Nav","Click handler","Click side nav link"],"updatePoint":{"line":72,"column":88,"index":3337},"line":72,"code":"      it('should detach CSS classes from previously active links when nav link is active', function () {\n        navLinkTriggerNode1.dispatchEvent(new CustomEvent('click', {\n          bubbles: true\n        }));\n        navLinkTriggerNode2.dispatchEvent(new CustomEvent('click', {\n          bubbles: true\n        }));\n        expect(navLinkTriggerNode1.classList.contains('bx--side-nav__link--current')).toBe(false);\n        expect(navLinkNode1.classList.contains('bx--side-nav__item--active')).toBe(false);\n        expect(navLinkTriggerNode2.classList.contains('bx--side-nav__link--current')).toBe(true);\n        expect(navLinkNode2.classList.contains('bx--side-nav__item--active')).toBe(true);\n      });","file":"spec/side-nav_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should open the submenu on click","suites":["Side Nav","Click handler","Click nav submenu"],"updatePoint":{"line":86,"column":42,"index":4052},"line":86,"code":"      it('should open the submenu on click', function () {\n        navSubmenuTriggerNode.dispatchEvent(new CustomEvent('click', {\n          bubbles: true\n        }));\n        expect(navSubmenuTriggerNode.getAttribute('aria-expanded')).toBe('true');\n      });","file":"spec/side-nav_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should close the open submenu on click","suites":["Side Nav","Click handler","Click nav submenu"],"updatePoint":{"line":92,"column":48,"index":4317},"line":92,"code":"      it('should close the open submenu on click', function () {\n        navSubmenuTriggerNode.setAttribute('aria-expanded', 'true');\n        navSubmenuTriggerNode.dispatchEvent(new CustomEvent('click', {\n          bubbles: true\n        }));\n        expect(navSubmenuTriggerNode.getAttribute('aria-expanded')).toBe('false');\n      });","file":"spec/side-nav_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not given","suites":["Test slider","Constructor"],"updatePoint":{"line":8,"column":49,"index":350},"line":8,"code":"    it('Should throw if root element is not given', function () {\n      expect(() => {\n        slider = new Slider();\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/slider_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not a DOM element","suites":["Test slider","Constructor"],"updatePoint":{"line":13,"column":57,"index":576},"line":13,"code":"    it('Should throw if root element is not a DOM element', function () {\n      expect(() => {\n        slider = new Slider(document.createTextNode(''));\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/slider_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should set default options","suites":["Test slider","Constructor"],"updatePoint":{"line":18,"column":34,"index":806},"line":18,"code":"    it('Should set default options', function () {\n      const container = document.createElement('div');\n      container.innerHTML = SliderHTML;\n      document.body.appendChild(container);\n      slider = new Slider(document.querySelector('[data-slider]'));\n      expect(flattenOptions(slider.options)).toEqual({\n        selectorInit: '[data-slider]',\n        selectorTrack: '.bx--slider__track',\n        selectorFilledTrack: '.bx--slider__filled-track',\n        selectorThumb: '.bx--slider__thumb',\n        selectorInput: '.bx--slider__input',\n        classDisabled: 'bx--slider--disabled',\n        classThumbClicked: 'bx--slider__thumb--clicked',\n        eventBeforeSliderValueChange: 'slider-before-value-change',\n        eventAfterSliderValueChange: 'slider-after-value-change',\n        stepMultiplier: 4\n      });\n    });","file":"spec/slider_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should setValue as expected","suites":["Test slider","Programmatic change"],"updatePoint":{"line":51,"column":35,"index":2060},"line":51,"code":"    it('Should setValue as expected', function () {\n      slider.setValue(100);\n      expect(slider.getInputProps().value).toBe(100);\n    });","file":"spec/slider_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should stepUp as expected","suites":["Test slider","Programmatic change"],"updatePoint":{"line":55,"column":33,"index":2200},"line":55,"code":"    it('Should stepUp as expected', function () {\n      slider.setValue(50);\n      slider.stepUp();\n      expect(slider.getInputProps().value).toBe(51);\n    });","file":"spec/slider_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should stepDown as expected","suites":["Test slider","Programmatic change"],"updatePoint":{"line":60,"column":35,"index":2363},"line":60,"code":"    it('Should stepDown as expected', function () {\n      slider.setValue(50);\n      slider.stepDown();\n      expect(slider.getInputProps().value).toBe(49);\n    });","file":"spec/slider_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should stepUp value on up/right key","suites":["Test slider","Keydown on slider"],"updatePoint":{"line":90,"column":43,"index":3270},"line":90,"code":"    it('Should stepUp value on up/right key', function () {\n      const event = new CustomEvent('keydown', {\n        bubbles: true\n      });\n      event.which = 39;\n      thumb.dispatchEvent(event);\n      mockRaf.step({\n        count: 1\n      });\n      thumb.dispatchEvent(event);\n      mockRaf.step({\n        count: 1\n      });\n      expect(slider.getInputProps().value).toBe(51);\n      event.which = 38;\n      thumb.dispatchEvent(event);\n      mockRaf.step({\n        count: 1\n      });\n      expect(slider.getInputProps().value).toBe(52);\n    });","file":"spec/slider_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should stepDown value on down/left key","suites":["Test slider","Keydown on slider"],"updatePoint":{"line":111,"column":46,"index":3822},"line":111,"code":"    it('Should stepDown value on down/left key', function () {\n      const event = new CustomEvent('keydown', {\n        bubbles: true\n      });\n      event.which = 40;\n      thumb.dispatchEvent(event);\n      mockRaf.step({\n        count: 1\n      });\n      thumb.dispatchEvent(event);\n      mockRaf.step({\n        count: 1\n      });\n      expect(slider.getInputProps().value).toBe(49);\n      event.which = 37;\n      thumb.dispatchEvent(event);\n      mockRaf.step({\n        count: 1\n      });\n      expect(slider.getInputProps().value).toBe(48);\n    });","file":"spec/slider_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should change value on click","suites":["Test slider","Click on slider"],"updatePoint":{"line":156,"column":36,"index":5069},"line":156,"code":"    it('Should change value on click', function () {\n      const event = new CustomEvent('click', {\n        bubbles: true\n      });\n      event.clientX = 0;\n      track.dispatchEvent(event);\n      mockRaf.step({\n        count: 1\n      });\n      expect(slider.getInputProps().value).toBe(0);\n    });","file":"spec/slider_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should throw if root element is not given","suites":["StructuredList","Constructor"],"updatePoint":{"line":16,"column":49,"index":669},"line":16,"code":"    it('should throw if root element is not given', function () {\n      expect(() => {\n        new StructuredList();\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/structured-list_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should throw if root element is not a DOM element","suites":["StructuredList","Constructor"],"updatePoint":{"line":21,"column":57,"index":894},"line":21,"code":"    it('should throw if root element is not a DOM element', function () {\n      expect(() => {\n        new StructuredList(document.createTextNode(''));\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/structured-list_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should set default options","suites":["StructuredList","Constructor"],"updatePoint":{"line":26,"column":34,"index":1123},"line":26,"code":"    it('should set default options', function () {\n      // Spread operator does not take non-owning props\n      const {\n        selectorListInput,\n        ...options\n      } = Object.getPrototypeOf(instance.options);\n      expect(selectorListInput('foo'), 'selectorListInput option').toBe('#foo.bx--structured-list-input');\n      expect(flattenOptions(options), 'Other options').toEqual({\n        selectorInit: '[data-structured-list]',\n        selectorRow: '[data-structured-list] .bx--structured-list-tbody > label.bx--structured-list-row',\n        classActive: 'bx--structured-list-row--selected'\n      });\n    });","file":"spec/structured-list_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should be called on \"enter\" keydown event","suites":["StructuredList","_handleKeydownChecked(evt)"],"updatePoint":{"line":55,"column":49,"index":2243},"line":55,"code":"    it('should be called on \"enter\" keydown event', function () {\n      spyOn(instance, '_handleKeydownChecked');\n      const event = Object.assign(new CustomEvent('keydown', {\n        bubbles: true\n      }), {\n        which: 13\n      });\n      instance.element.dispatchEvent(event);\n      expect(instance._handleKeydownChecked).toHaveBeenCalled();\n    });","file":"spec/structured-list_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should be called on \"space\" keydown event","suites":["StructuredList","_handleKeydownChecked(evt)"],"updatePoint":{"line":65,"column":49,"index":2600},"line":65,"code":"    it('should be called on \"space\" keydown event', function () {\n      spyOn(instance, '_handleKeydownChecked');\n      const event = Object.assign(new CustomEvent('keydown', {\n        bubbles: true\n      }), {\n        which: 32\n      });\n      instance.element.dispatchEvent(event);\n      expect(instance._handleKeydownChecked).toHaveBeenCalled();\n    });","file":"spec/structured-list_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should not be called with another keydown event","suites":["StructuredList","_handleKeydownChecked(evt)"],"updatePoint":{"line":75,"column":55,"index":2963},"line":75,"code":"    it('should not be called with another keydown event', function () {\n      spyOn(instance, '_handleKeydownChecked');\n      const event = Object.assign(new CustomEvent('keydown', {\n        bubbles: true\n      }), {\n        which: 40\n      });\n      instance.element.dispatchEvent(event);\n      expect(instance._handleKeydownChecked).not.toHaveBeenCalled();\n    });","file":"spec/structured-list_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should be called on \"click\" keydown event","suites":["StructuredList","_handleClick(evt)"],"updatePoint":{"line":101,"column":49,"index":3802},"line":101,"code":"    it('should be called on \"click\" keydown event', function () {\n      spyOn(instance, '_handleClick');\n      const event = Object.assign(new CustomEvent('click', {\n        bubbles: true\n      }));\n      instance.element.dispatchEvent(event);\n      expect(instance._handleClick).toHaveBeenCalled();\n    });","file":"spec/structured-list_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should toggle classActive on a selectorRow","suites":["StructuredList","_handleClick(evt)"],"updatePoint":{"line":109,"column":50,"index":4111},"line":109,"code":"    it('should toggle classActive on a selectorRow', function () {\n      spyOn(instance, '_handleClick').and.callThrough();\n      const event = Object.assign(new CustomEvent('click', {\n        bubbles: true\n      }));\n      const rows = instance.element.querySelectorAll(instance.options.selectorRow);\n      rows[1].dispatchEvent(event);\n      expect(rows[1].classList.contains(instance.options.classActive)).toBe(true);\n    });","file":"spec/structured-list_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should be called on \"up\" keydown event","suites":["StructuredList","_direction(evt)"],"updatePoint":{"line":134,"column":46,"index":5012},"line":134,"code":"    it('should be called on \"up\" keydown event', function () {\n      spyOn(instance, '_direction');\n      const event = Object.assign(new CustomEvent('keydown', {\n        bubbles: true\n      }), {\n        which: 38\n      });\n      instance.element.dispatchEvent(event);\n      expect(instance._direction).toHaveBeenCalled();\n    });","file":"spec/structured-list_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should be called on \"down\" keydown event","suites":["StructuredList","_direction(evt)"],"updatePoint":{"line":144,"column":48,"index":5346},"line":144,"code":"    it('should be called on \"down\" keydown event', function () {\n      spyOn(instance, '_direction');\n      const event = Object.assign(new CustomEvent('keydown', {\n        bubbles: true\n      }), {\n        which: 40\n      });\n      instance.element.dispatchEvent(event);\n      expect(instance._direction).toHaveBeenCalled();\n    });","file":"spec/structured-list_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should return -1 on \"up\" key","suites":["StructuredList","_direction(evt)"],"updatePoint":{"line":154,"column":36,"index":5668},"line":154,"code":"    it('should return -1 on \"up\" key', function () {\n      const event = Object.assign(new CustomEvent('keydown', {\n        bubbles: true\n      }), {\n        which: 38\n      });\n\n      const direction = instance._direction(event);\n\n      expect(direction).toBe(-1);\n    });","file":"spec/structured-list_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should return 1 on \"down\" key","suites":["StructuredList","_direction(evt)"],"updatePoint":{"line":165,"column":37,"index":5943},"line":165,"code":"    it('should return 1 on \"down\" key', function () {\n      const event = Object.assign(new CustomEvent('keydown', {\n        bubbles: true\n      }), {\n        which: 40\n      });\n\n      const direction = instance._direction(event);\n\n      expect(direction).toBe(1);\n    });","file":"spec/structured-list_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should return undefined on other key presses","suites":["StructuredList","_direction(evt)"],"updatePoint":{"line":176,"column":52,"index":6232},"line":176,"code":"    it('should return undefined on other key presses', function () {\n      const event = Object.assign(new CustomEvent('keydown', {\n        bubbles: true\n      }), {\n        which: 70\n      });\n\n      const direction = instance._direction(event);\n\n      expect(direction).toBe(undefined);\n    });","file":"spec/structured-list_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should be called","suites":["StructuredList","_nextIndex()"],"updatePoint":{"line":203,"column":24,"index":6974},"line":203,"code":"    it('should be called', function () {\n      spyOn(instance, '_nextIndex');\n\n      instance._nextIndex([0, 1, 2, 3], 0, 1);\n\n      expect(instance._nextIndex).toHaveBeenCalled();\n    });","file":"spec/structured-list_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should return a number","suites":["StructuredList","_nextIndex()"],"updatePoint":{"line":210,"column":30,"index":7169},"line":210,"code":"    it('should return a number', function () {\n      const array = [0, 1, 2, 3];\n\n      const result = instance._nextIndex(array, 0, 1);\n\n      expect(typeof result).toBe('number');\n    });","file":"spec/structured-list_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should be called","suites":["StructuredList","_handleInputChecked()"],"updatePoint":{"line":233,"column":24,"index":7835},"line":233,"code":"    it('should be called', function () {\n      spyOn(instance, '_handleInputChecked');\n\n      instance._handleInputChecked(0);\n\n      expect(instance._handleInputChecked).toHaveBeenCalled();\n    });","file":"spec/structured-list_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should be called on \"up\" keydown event","suites":["StructuredList","_handleKeydownArrow(evt)"],"updatePoint":{"line":256,"column":46,"index":8541},"line":256,"code":"    it('should be called on \"up\" keydown event', function () {\n      spyOn(instance, '_handleKeydownArrow');\n      const event = Object.assign(new CustomEvent('keydown', {\n        bubbles: true\n      }), {\n        which: 38\n      });\n      instance.element.dispatchEvent(event);\n      expect(instance._handleKeydownArrow).toHaveBeenCalled();\n    });","file":"spec/structured-list_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should be called on \"down\" keydown event","suites":["StructuredList","_handleKeydownArrow(evt)"],"updatePoint":{"line":266,"column":48,"index":8893},"line":266,"code":"    it('should be called on \"down\" keydown event', function () {\n      spyOn(instance, '_handleKeydownArrow');\n      const event = Object.assign(new CustomEvent('keydown', {\n        bubbles: true\n      }), {\n        which: 40\n      });\n      instance.element.dispatchEvent(event);\n      expect(instance._handleKeydownArrow).toHaveBeenCalled();\n    });","file":"spec/structured-list_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"should not be called with another keydown event","suites":["StructuredList","_handleKeydownArrow(evt)"],"updatePoint":{"line":276,"column":55,"index":9252},"line":276,"code":"    it('should not be called with another keydown event', function () {\n      spyOn(instance, '_handleKeydownArrow');\n      const event = Object.assign(new CustomEvent('keydown', {\n        bubbles: true\n      }), {\n        which: 13\n      });\n      instance.element.dispatchEvent(event);\n      expect(instance._handleKeydownArrow).not.toHaveBeenCalled();\n    });","file":"spec/structured-list_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should set default options","suites":["Test tabs","Constructor"],"updatePoint":{"line":5,"column":34,"index":216},"line":5,"code":"    it('Should set default options', function () {\n      spyOn(Tab.prototype, '_updateTriggerText');\n      const tab = new Tab(document.createElement('div'));\n      expect(flattenOptions(tab.options)).toEqual({\n        selectorInit: '[data-tabs]',\n        selectorMenu: '.bx--tabs__nav',\n        selectorTrigger: '.bx--tabs-trigger',\n        selectorTriggerText: '.bx--tabs-trigger-text',\n        selectorButton: '.bx--tabs__nav-item',\n        selectorButtonEnabled: '.bx--tabs__nav-item:not(.bx--tabs__nav-item--disabled)',\n        selectorButtonSelected: '.bx--tabs__nav-item--selected',\n        selectorLink: '.bx--tabs__nav-link',\n        classActive: 'bx--tabs__nav-item--selected',\n        classHidden: 'bx--tabs__nav--hidden',\n        classOpen: 'bx--tabs-trigger--open',\n        classButtonDisabled: `bx--tabs__nav-item--disabled`,\n        eventBeforeSelected: 'tab-beingselected',\n        eventAfterSelected: 'tab-selected'\n      });\n    });","file":"spec/tabs_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should initialize currently selected tab item for narrow screen","suites":["Test tabs","Constructor"],"updatePoint":{"line":25,"column":71,"index":1204},"line":25,"code":"    it('Should initialize currently selected tab item for narrow screen', function () {\n      const triggerTextNode = document.createElement('div');\n      triggerTextNode.classList.add('bx--tabs-trigger-text');\n      const element = document.createElement('div');\n      element.appendChild(triggerTextNode);\n      [...new Array(2)].forEach((item, i) => {\n        const buttonNode = document.createElement('div');\n        buttonNode.classList.add('bx--tabs__nav-item');\n\n        if (i === 0) {\n          buttonNode.classList.add('bx--tabs__nav-item--selected');\n        }\n\n        buttonNode.textContent = i;\n        element.appendChild(buttonNode);\n      });\n      new Tab(element);\n      expect(triggerTextNode.textContent).toBe('0');\n    });","file":"spec/tabs_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should deal with a condition with no selected item when constructor runs","suites":["Test tabs","Constructor"],"updatePoint":{"line":44,"column":80,"index":1957},"line":44,"code":"    it('Should deal with a condition with no selected item when constructor runs', function () {\n      const element = document.createElement('div');\n      const buttonNode = document.createElement('div');\n      buttonNode.classList.add('bx--tabs__nav-item');\n      element.appendChild(buttonNode);\n      expect(() => {\n        new Tab(element);\n      }).not.toThrowError(Error);\n    });","file":"spec/tabs_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should show drop down upon hitting trigger button","suites":["Test tabs","Toggling drop down for narrow screen"],"updatePoint":{"line":70,"column":57,"index":2924},"line":70,"code":"    it('Should show drop down upon hitting trigger button', function () {\n      menuNode.classList.add('bx--tabs__nav--hidden');\n      triggerNode.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(menuNode.classList.contains('bx--tabs__nav--hidden')).toBe(false);\n      expect(triggerNode.classList.contains('bx--tabs-trigger--open')).toBe(true);\n    });","file":"spec/tabs_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should hide drop down upon hitting trigger button","suites":["Test tabs","Toggling drop down for narrow screen"],"updatePoint":{"line":78,"column":57,"index":3316},"line":78,"code":"    it('Should hide drop down upon hitting trigger button', function () {\n      triggerNode.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(menuNode.classList.contains('bx--tabs__nav--hidden')).toBe(true);\n      expect(triggerNode.classList.contains('bx--tabs-trigger--open')).toBe(false);\n    });","file":"spec/tabs_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should update active tab upon clicking","suites":["Test tabs","Setting active tab"],"updatePoint":{"line":122,"column":46,"index":4911},"line":122,"code":"    it('Should update active tab upon clicking', function () {\n      buttonNodes[1].dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(buttonNodes[0].classList.contains('bx--tabs__nav-item--selected')).toBe(false);\n      expect(buttonNodes[1].classList.contains('bx--tabs__nav-item--selected')).toBe(true);\n      expect(buttonNodes[2].classList.contains('bx--tabs__nav-item--selected')).toBe(false);\n    });","file":"spec/tabs_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should skip disabled tab upon right key","suites":["Test tabs","Setting active tab"],"updatePoint":{"line":130,"column":47,"index":5356},"line":130,"code":"    it('Should skip disabled tab upon right key', function () {\n      buttonNodes[1].classList.add('bx--tabs__nav-item--disabled');\n      const defaultPrevented = element.dispatchEvent(Object.assign(new CustomEvent('keydown'), {\n        which: 39\n      }));\n      expect(defaultPrevented).toBe(true);\n      expect(buttonNodes[0].classList.contains('bx--tabs__nav-item--selected')).toBe(false);\n      expect(buttonNodes[1].classList.contains('bx--tabs__nav-item--selected')).toBe(false);\n      expect(buttonNodes[2].classList.contains('bx--tabs__nav-item--selected')).toBe(true);\n    });","file":"spec/tabs_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should avoid activating disabled tab on click","suites":["Test tabs","Setting active tab"],"updatePoint":{"line":140,"column":53,"index":5949},"line":140,"code":"    it('Should avoid activating disabled tab on click', function () {\n      buttonNodes[1].classList.add('bx--tabs__nav-item--disabled');\n      buttonNodes[1].dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(buttonNodes[0].classList.contains('bx--tabs__nav-item--selected')).toBe(true);\n      expect(buttonNodes[1].classList.contains('bx--tabs__nav-item--selected')).toBe(false);\n      expect(buttonNodes[2].classList.contains('bx--tabs__nav-item--selected')).toBe(false);\n    });","file":"spec/tabs_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should update currently selected tab item for narrow screen","suites":["Test tabs","Setting active tab"],"updatePoint":{"line":149,"column":67,"index":6482},"line":149,"code":"    it('Should update currently selected tab item for narrow screen', function () {\n      buttonNodes[1].dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(triggerTextNode.textContent).toBe(buttonNodes[1].textContent);\n    });","file":"spec/tabs_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should update active tab upon right key","suites":["Test tabs","Setting active tab"],"updatePoint":{"line":155,"column":47,"index":6725},"line":155,"code":"    it('Should update active tab upon right key', function () {\n      const defaultPrevented = element.dispatchEvent(Object.assign(new CustomEvent('keydown'), {\n        which: 39\n      }));\n      expect(defaultPrevented).toBe(true);\n      expect(buttonNodes[0].classList.contains('bx--tabs__nav-item--selected')).toBe(false);\n      expect(buttonNodes[1].classList.contains('bx--tabs__nav-item--selected')).toBe(true);\n      expect(buttonNodes[2].classList.contains('bx--tabs__nav-item--selected')).toBe(false);\n    });","file":"spec/tabs_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should handle out of range index","suites":["Test tabs","Setting active tab"],"updatePoint":{"line":164,"column":40,"index":7237},"line":164,"code":"    it('Should handle out of range index', function () {\n      element.dispatchEvent(Object.assign(new CustomEvent('keydown'), {\n        which: 39\n      }));\n      element.dispatchEvent(Object.assign(new CustomEvent('keydown'), {\n        which: 39\n      }));\n      element.dispatchEvent(Object.assign(new CustomEvent('keydown'), {\n        which: 39\n      }));\n      expect(buttonNodes[0].classList.contains('bx--tabs__nav-item--selected')).toBe(true);\n      expect(buttonNodes[1].classList.contains('bx--tabs__nav-item--selected')).toBe(false);\n      expect(buttonNodes[2].classList.contains('bx--tabs__nav-item--selected')).toBe(false);\n    });","file":"spec/tabs_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should update active tab upon left key","suites":["Test tabs","Setting active tab"],"updatePoint":{"line":178,"column":46,"index":7889},"line":178,"code":"    it('Should update active tab upon left key', function () {\n      const defaultPrevented = element.dispatchEvent(Object.assign(new CustomEvent('keydown'), {\n        which: 37\n      }));\n      expect(defaultPrevented).toBe(true);\n      expect(buttonNodes[0].classList.contains('bx--tabs__nav-item--selected')).toBe(false);\n      expect(buttonNodes[1].classList.contains('bx--tabs__nav-item--selected')).toBe(false);\n      expect(buttonNodes[2].classList.contains('bx--tabs__nav-item--selected')).toBe(true);\n    });","file":"spec/tabs_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should focus on the new active tab upon keyboard navigation","suites":["Test tabs","Setting active tab"],"updatePoint":{"line":187,"column":67,"index":8428},"line":187,"code":"    it('Should focus on the new active tab upon keyboard navigation', function () {\n      const link = document.createElement('a');\n      spyOn(link, 'focus');\n      link.classList.add('bx--tabs__nav-link');\n      buttonNodes[1].appendChild(link);\n\n      try {\n        element.dispatchEvent(Object.assign(new CustomEvent('keydown'), {\n          which: 39\n        }));\n        expect(link.focus).toHaveBeenCalledTimes(1);\n      } finally {\n        buttonNodes[1].removeChild(link);\n      }\n    });","file":"spec/tabs_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not given","suites":["Test text input","Constructor"],"updatePoint":{"line":14,"column":49,"index":674},"line":14,"code":"    it('Should throw if root element is not given', () => {\n      expect(() => {\n        new TextInput();\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/text-input_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not a DOM element","suites":["Test text input","Constructor"],"updatePoint":{"line":19,"column":57,"index":888},"line":19,"code":"    it('Should throw if root element is not a DOM element', () => {\n      expect(() => {\n        new TextInput(document.createTextNode(''));\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/text-input_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should set default options","suites":["Test text input","Constructor"],"updatePoint":{"line":24,"column":34,"index":1106},"line":24,"code":"    it('Should set default options', () => {\n      expect(flattenOptions(instance.options)).toEqual({\n        selectorInit: '[data-text-input]',\n        selectorPasswordField: `.bx--text-input[data-toggle-password-visibility]`,\n        selectorPasswordVisibilityButton: `.bx--text-input--password__visibility__toggle`,\n        selectorPasswordVisibilityTooltip: `.bx--text-input--password__visibility__toggle > .bx--assistive-text`,\n        passwordIsVisible: `bx--text-input--password-visible`,\n        svgIconVisibilityOn: 'svg.bx--icon--visibility-on',\n        svgIconVisibilityOff: 'svg.bx--icon--visibility-off'\n      });\n    });","file":"spec/text-input_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should set password visibility state on 2n+1 clicks","suites":["Test text input","Clicking password visibility button"],"updatePoint":{"line":55,"column":59,"index":2526},"line":55,"code":"    it('Should set password visibility state on 2n+1 clicks', () => {\n      passwordVisibilityButton.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(textInput.classList.contains('bx--text-input--password-visible')).toBe(true);\n    });","file":"spec/text-input_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should remove password visibility state on 2n clicks","suites":["Test text input","Clicking password visibility button"],"updatePoint":{"line":61,"column":60,"index":2801},"line":61,"code":"    it('Should remove password visibility state on 2n clicks', () => {\n      textInput.classList.add('bx--text-input--password-visible');\n      passwordVisibilityButton.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(textInput.classList.contains('bx--text-input--password-visible')).toBe(false);\n    });","file":"spec/text-input_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not given","suites":["Test tile","Constructor"],"updatePoint":{"line":9,"column":49,"index":448},"line":9,"code":"    it('Should throw if root element is not given', function () {\n      expect(() => {\n        tile = new Tile();\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/tile_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not a DOM element","suites":["Test tile","Constructor"],"updatePoint":{"line":14,"column":57,"index":670},"line":14,"code":"    it('Should throw if root element is not a DOM element', function () {\n      expect(() => {\n        tile = new Tile(document.createTextNode(''));\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/tile_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should set default options","suites":["Test tile","Constructor"],"updatePoint":{"line":19,"column":34,"index":896},"line":19,"code":"    it('Should set default options', function () {\n      const container = document.createElement('div');\n      container.innerHTML = clickableTile;\n      document.body.appendChild(container);\n      tile = new Tile(document.querySelector('[data-tile]'));\n      expect(flattenOptions(tile.options)).toEqual({\n        selectorInit: '[data-tile]',\n        selectorAboveTheFold: '[data-tile-atf]',\n        selectorTileInput: '[data-tile-input]',\n        classExpandedTile: 'bx--tile--is-expanded',\n        classClickableTile: 'bx--tile--is-clicked',\n        classSelectableTile: 'bx--tile--is-selected'\n      });\n    });","file":"spec/tile_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should be called","suites":["Test tile","Test _hookActions"],"updatePoint":{"line":49,"column":24,"index":1961},"line":49,"code":"    it('Should be called', function () {\n      spyOn(instance, '_hookActions');\n\n      instance._hookActions();\n\n      expect(instance._hookActions).toHaveBeenCalled();\n    });","file":"spec/tile_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should not have the is-clicked class before its been clicked","suites":["Test tile","Test clickable tile"],"updatePoint":{"line":73,"column":68,"index":2775},"line":73,"code":"    it('Should not have the is-clicked class before its been clicked', function () {\n      expect(tileElementInitialState).toBe(false);\n    });","file":"spec/tile_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should have the is-clicked class after its been clicked","suites":["Test tile","Test clickable tile"],"updatePoint":{"line":76,"column":63,"index":2914},"line":76,"code":"    it('Should have the is-clicked class after its been clicked', function () {\n      tileElement.classList.remove('bx--tile--is-clicked');\n      tileElement.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(tileElement.classList.contains('bx--tile--is-clicked')).toBe(true);\n    });","file":"spec/tile_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should not have the is-expanded class before its been clicked","suites":["Test tile","Test expandable tile"],"updatePoint":{"line":100,"column":69,"index":3837},"line":100,"code":"    it('Should not have the is-expanded class before its been clicked', function () {\n      expect(tileElementInitialState).toBe(false);\n    });","file":"spec/tile_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should have the is-expanded class after its been clicked","suites":["Test tile","Test expandable tile"],"updatePoint":{"line":103,"column":64,"index":3977},"line":103,"code":"    it('Should have the is-expanded class after its been clicked', function () {\n      tileElement.classList.remove('bx--tile--is-expanded');\n      tileElement.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(tileElement.classList.contains('bx--tile--is-expanded')).toBe(true);\n    });","file":"spec/tile_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should not have the is-clicked class before its been clicked","suites":["Test tile","Test selectable tile"],"updatePoint":{"line":138,"column":68,"index":5359},"line":138,"code":"    it('Should not have the is-clicked class before its been clicked', function () {\n      expect(tileElementInitialState).toBe(false);\n    });","file":"spec/tile_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should have the is-clicked class after its been clicked","suites":["Test tile","Test selectable tile"],"updatePoint":{"line":141,"column":63,"index":5498},"line":141,"code":"    it('Should have the is-clicked class after its been clicked', function () {\n      tileElement.classList.remove('bx--tile--is-selected');\n      tileElement.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(tileElement.classList.contains('bx--tile--is-selected')).toBe(true);\n    });","file":"spec/tile_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not given","suites":["Test toolbar","Constructor"],"updatePoint":{"line":6,"column":49,"index":292},"line":6,"code":"    it('Should throw if root element is not given', function () {\n      expect(() => {\n        new Toolbar();\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/toolbar_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not a DOM element","suites":["Test toolbar","Constructor"],"updatePoint":{"line":11,"column":57,"index":510},"line":11,"code":"    it('Should throw if root element is not a DOM element', function () {\n      expect(() => {\n        new Toolbar(document.createTextNode(''));\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/toolbar_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should open search on click","suites":["Test toolbar","Clicking on search"],"updatePoint":{"line":26,"column":35,"index":1100},"line":26,"code":"    it('Should open search on click', function () {\n      search.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(search.classList.contains('bx--toolbar-search--active')).toBe(true);\n    });","file":"spec/toolbar_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should close search on click outside the toolbar","suites":["Test toolbar","Clicking on search"],"updatePoint":{"line":32,"column":56,"index":1350},"line":32,"code":"    it('Should close search on click outside the toolbar', function () {\n      container.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(search.classList.contains('bx--toolbar-search--active')).toBe(false);\n    });","file":"spec/toolbar_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should close search on esc keydown","suites":["Test toolbar","Keydown on search"],"updatePoint":{"line":55,"column":42,"index":2139},"line":55,"code":"    it('Should close search on esc keydown', function () {\n      const event = new CustomEvent('keydown', {\n        bubbles: true\n      });\n      event.which = 27;\n      search.dispatchEvent(event);\n      expect(search.classList.contains('bx--toolbar-search--active')).toBe(false);\n    });","file":"spec/toolbar_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should make the search box exclusive upon clicking on one of the search boxes","suites":["Test toolbar","Exclusive search box"],"updatePoint":{"line":86,"column":85,"index":3248},"line":86,"code":"    it('Should make the search box exclusive upon clicking on one of the search boxes', function () {\n      const searches = toolbars.map(toolbar => toolbar.element.querySelector(toolbar.options.selectorSearch));\n      searches[0].classList.add(toolbars[0].classSearchActive);\n      searches[1].dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(searches[0].classList.contains('bx--toolbar-search--active')).toBe(false);\n      expect(searches[1].classList.contains('bx--toolbar-search--active')).toBe(true);\n    });","file":"spec/toolbar_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not given","suites":["Test tooltip","Constructor"],"updatePoint":{"line":5,"column":49,"index":241},"line":5,"code":"    it('Should throw if root element is not given', function () {\n      expect(() => {\n        new Tooltip();\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/tooltip_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not a DOM element","suites":["Test tooltip","Constructor"],"updatePoint":{"line":10,"column":57,"index":459},"line":10,"code":"    it('Should throw if root element is not a DOM element', function () {\n      expect(() => {\n        new Tooltip(document.createTextNode(''));\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/tooltip_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Content should be programmatically focusable","suites":["Test tooltip","Showing/hiding"],"updatePoint":{"line":30,"column":52,"index":1189},"line":30,"code":"    it('Content should be programmatically focusable', function () {\n      element.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      const content = floating.querySelector('.bx--tooltip__content');\n      expect(content.getAttribute('tabindex')).toBe('-1');\n    });","file":"spec/tooltip_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should show the tooltip upon clicking","suites":["Test tooltip","Showing/hiding"],"updatePoint":{"line":37,"column":45,"index":1477},"line":37,"code":"    it('Should show the tooltip upon clicking', function () {\n      element.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(floating.classList.contains('bx--tooltip--shown')).toBe(true);\n    });","file":"spec/tooltip_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should apply focus to a child element upon opening","suites":["Test tooltip","Showing/hiding"],"updatePoint":{"line":43,"column":58,"index":1724},"line":43,"code":"    it('Should apply focus to a child element upon opening', function () {\n      element.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      expect(document.activeElement.closest('.bx--tooltip')).not.toBe(null);\n    });","file":"spec/tooltip_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should remain open upon focusing the content within the tooltip","suites":["Test tooltip","Showing/hiding"],"updatePoint":{"line":49,"column":71,"index":1985},"line":49,"code":"    it('Should remain open upon focusing the content within the tooltip', function () {\n      element.dispatchEvent(new CustomEvent('click', {\n        bubbles: true\n      }));\n      const content = floating.querySelector('.bx--tooltip__content');\n      content.dispatchEvent(new CustomEvent('focus', {\n        bubbles: true\n      }));\n      expect(floating.classList.contains('bx--tooltip--shown')).toBe(true);\n    }); // Known bug: https://github.com/carbon-design-system/carbon/issues/3835","file":"spec/tooltip_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should hide the tooltip upon blurring","suites":["Test tooltip","Showing/hiding"],"updatePoint":{"line":60,"column":45,"index":2452},"line":60,"code":"    it('Should hide the tooltip upon blurring', function () {\n      floating.classList.add('bx--tooltip--shown');\n      element.dispatchEvent(new CustomEvent('blur', {\n        bubbles: true\n      }));\n      expect(floating.classList.contains('bx--tooltip--shown')).toBe(false);\n    });","file":"spec/tooltip_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should create an instance upon clicking","suites":["Test tooltip","Automatic creation"],"updatePoint":{"line":93,"column":47,"index":3505},"line":93,"code":"    it('Should create an instance upon clicking', function () {\n      return Tooltip.__with__({\n        debounce: fn => fn\n      })(() => {\n        element.dispatchEvent(new CustomEvent('click', {\n          bubbles: true\n        }));\n        expect(floating.classList.contains('bx--tooltip--shown')).toBe(true);\n      });\n    });","file":"spec/tooltip_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not given","suites":["Test simple tooltip","Constructor"],"updatePoint":{"line":6,"column":49,"index":354},"line":6,"code":"    it('Should throw if root element is not given', function () {\n      expect(() => {\n        new Tooltip();\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/tooltip--simple_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if root element is not a DOM element","suites":["Test simple tooltip","Constructor"],"updatePoint":{"line":11,"column":57,"index":572},"line":11,"code":"    it('Should throw if root element is not a DOM element', function () {\n      expect(() => {\n        new Tooltip(document.createTextNode(''));\n      }).toThrowError(TypeError, 'DOM element should be given to initialize this widget.');\n    });","file":"spec/tooltip--simple_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should not have hidden class after mouseenter","suites":["Test simple tooltip","Showing/hiding definition tooltip"],"updatePoint":{"line":27,"column":53,"index":1273},"line":27,"code":"    it('Should not have hidden class after mouseenter', function () {\n      element.dispatchEvent(new CustomEvent('mouseenter', {\n        bubbles: true\n      }));\n      expect(button.classList.contains('bx--tooltip--hidden')).toBe(false);\n    });","file":"spec/tooltip--simple_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should not have hidden class after focus","suites":["Test simple tooltip","Showing/hiding definition tooltip"],"updatePoint":{"line":33,"column":48,"index":1515},"line":33,"code":"    it('Should not have hidden class after focus', function () {\n      element.dispatchEvent(new CustomEvent('focus', {\n        bubbles: true\n      }));\n      expect(button.classList.contains('bx--tooltip--hidden')).toBe(false);\n    });","file":"spec/tooltip--simple_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should have hidden class after Esc keydown","suites":["Test simple tooltip","Showing/hiding definition tooltip"],"updatePoint":{"line":39,"column":50,"index":1754},"line":39,"code":"    it('Should have hidden class after Esc keydown', function () {\n      element.dispatchEvent(Object.assign(new CustomEvent('keydown', {\n        bubbles: true\n      }), {\n        which: 27\n      }));\n      expect(button.classList.contains('bx--tooltip--hidden')).toBe(true);\n    });","file":"spec/tooltip--simple_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should not have hidden class after mouseenter","suites":["Test simple tooltip","Showing/hiding icon tooltip"],"updatePoint":{"line":72,"column":53,"index":2752},"line":72,"code":"    it('Should not have hidden class after mouseenter', function () {\n      element.dispatchEvent(new CustomEvent('mouseenter', {\n        bubbles: true\n      }));\n      expect(element.classList.contains('bx--tooltip--hidden')).toBe(false);\n    });","file":"spec/tooltip--simple_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should have visible class after mouseenter","suites":["Test simple tooltip","Showing/hiding icon tooltip"],"updatePoint":{"line":78,"column":50,"index":2997},"line":78,"code":"    it('Should have visible class after mouseenter', function () {\n      element.dispatchEvent(new CustomEvent('mouseenter', {\n        bubbles: true\n      }));\n      expect(element.classList.contains('bx--tooltip--visible')).toBe(true);\n    });","file":"spec/tooltip--simple_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should not have visible class after mouseleave","suites":["Test simple tooltip","Showing/hiding icon tooltip"],"updatePoint":{"line":84,"column":54,"index":3246},"line":84,"code":"    it('Should not have visible class after mouseleave', async function () {\n      return Tooltip.__with__({\n        debounce: fn => fn\n      })(() => {\n        tooltip.release();\n        tooltip = new Tooltip(element);\n        element.dispatchEvent(new CustomEvent('mouseleave', {\n          bubbles: true\n        }));\n        expect(element.classList.contains('bx--tooltip--visible')).toBe(false);\n      });\n    });","file":"spec/tooltip--simple_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should not have hidden class after focus","suites":["Test simple tooltip","Showing/hiding icon tooltip"],"updatePoint":{"line":96,"column":48,"index":3657},"line":96,"code":"    it('Should not have hidden class after focus', function () {\n      element.dispatchEvent(new CustomEvent('focus', {\n        bubbles: true\n      }));\n      expect(element.classList.contains('bx--tooltip--hidden')).toBe(false);\n    });","file":"spec/tooltip--simple_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should have hidden class after Esc keydown","suites":["Test simple tooltip","Showing/hiding icon tooltip"],"updatePoint":{"line":102,"column":50,"index":3897},"line":102,"code":"    it('Should have hidden class after Esc keydown', function () {\n      element.dispatchEvent(Object.assign(new CustomEvent('keydown', {\n        bubbles: true\n      }), {\n        which: 27\n      }));\n      expect(element.classList.contains('bx--tooltip--hidden')).toBe(true);\n    });","file":"spec/tooltip--simple_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should throw if given element is neither a DOM element or a document","suites":["Test watch mode","Handling regular components"],"updatePoint":{"line":71,"column":76,"index":2883},"line":71,"code":"    it('Should throw if given element is neither a DOM element or a document', function () {\n      expect(() => {\n        handle = watch(document.createTextNode(''));\n      }).toThrowError(TypeError, 'DOM document or DOM element should be given to watch for DOM node to create/release components.');\n    });","file":"spec/watch_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should look at document if no element is given","suites":["Test watch mode","Handling regular components"],"updatePoint":{"line":76,"column":54,"index":3169},"line":76,"code":"    it('Should look at document if no element is given', function () {\n      handle = watch();\n      expect(lastTarget).toBe(document);\n    });","file":"spec/watch_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should instantiate the components","suites":["Test watch mode","Handling regular components"],"updatePoint":{"line":80,"column":41,"index":3300},"line":80,"code":"    it('Should instantiate the components', async function () {\n      await watch.__with__({\n        components\n      })(async () => {\n        handle = watch(document, watchOptions);\n        ClassInitedBySearch.init.calls.reset();\n        expect(lastTarget, 'Watch target').toBe(document);\n        expect(ClassInitedByEvent.init.calls.allArgs(), 'ClassInitedByEvent.init()').toEqual([[document, watchOptions]]);\n        expect(ClassInitedByLauncher.init.calls.allArgs(), 'ClassInitedByLauncher.init()').toEqual([[document, watchOptions]]);\n        element = document.createElement('div');\n        element.dataset.myComponentInitedBySearch = '';\n        document.body.appendChild(element);\n        await delay(0); // Wait for mutation observer to deliver records\n\n        expect(ClassInitedBySearch.init.calls.allArgs(), 'ClassInitedBySearch.init()').toEqual([[element, watchOptions]]);\n      });\n    });","file":"spec/watch_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should release the components","suites":["Test watch mode","Handling regular components"],"updatePoint":{"line":97,"column":37,"index":4200},"line":97,"code":"    it('Should release the components', async function () {\n      await watch.__with__({\n        components\n      })(async () => {\n        handle = watch();\n        element = document.createElement('div');\n        document.body.appendChild(element);\n        const elementInitedBySearch = document.createElement('div');\n        elementInitedBySearch.dataset.myComponentInitedBySearch = '';\n        element.appendChild(elementInitedBySearch);\n        const elementInitedByEvent = document.createElement('div');\n        elementInitedByEvent.dataset.myComponentInitedByEvent = '';\n        element.appendChild(elementInitedByEvent);\n        elementInitedByEvent.dispatchEvent(new CustomEvent('instantiating-event', {\n          bubbles: true,\n          cancelable: true\n        }));\n        const elementInitedByLauncher = document.createElement('div');\n        elementInitedByLauncher.dataset.myComponentInitedByLauncher = '';\n        element.appendChild(elementInitedByLauncher);\n        const launcherButton = document.createElement('button');\n        launcherButton.dataset.initTarget = '[data-my-component-inited-by-launcher]';\n        element.appendChild(launcherButton);\n        launcherButton.dispatchEvent(new CustomEvent('launching-event', {\n          bubbles: true,\n          cancelable: true\n        }));\n        await delay(0); // Wait for mutation observer to deliver records\n\n        document.body.removeChild(element);\n        await delay(0); // Wait for mutation observer to deliver records\n\n        expect(ClassInitedBySearch.prototype.release).toHaveBeenCalledTimes(1);\n        expect(ClassInitedByEvent.prototype.release).toHaveBeenCalledTimes(1);\n        expect(ClassInitedByLauncher.prototype.release).toHaveBeenCalledTimes(1);\n      });\n    });","file":"spec/watch_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should release the components even if the removed node is of the component","suites":["Test watch mode","Handling regular components"],"updatePoint":{"line":134,"column":82,"index":6007},"line":134,"code":"    it('Should release the components even if the removed node is of the component', async function () {\n      await watch.__with__({\n        components\n      })(async () => {\n        handle = watch();\n        element = document.createElement('div');\n        element.dataset.myComponentInitedBySearch = '';\n        document.body.appendChild(element);\n        await delay(0); // Wait for mutation observer to deliver records\n\n        document.body.removeChild(element);\n        await delay(0); // Wait for mutation observer to deliver records\n\n        expect(ClassInitedBySearch.prototype.release).toHaveBeenCalledTimes(1);\n      });\n    });","file":"spec/watch_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"Should stop instantiating components once the handle is released","suites":["Test watch mode","Handling regular components"],"updatePoint":{"line":150,"column":72,"index":6638},"line":150,"code":"    it('Should stop instantiating components once the handle is released', async function () {\n      await watch.__with__({\n        components\n      })(async () => {\n        handle = watch(document, watchOptions);\n        ClassInitedBySearch.init.calls.reset();\n        expect(lastTarget, 'Watch target').toBe(document);\n        expect(ClassInitedByEvent.init.calls.allArgs(), 'ClassInitedByEvent.init()').toEqual([[document, watchOptions]]);\n        expect(ClassInitedByLauncher.init.calls.allArgs(), 'ClassInitedByLauncher.init()').toEqual([[document, watchOptions]]);\n        element = document.createElement('div');\n        element.dataset.myComponentInitedBySearch = '';\n        document.body.appendChild(element);\n        handle = handle.release();\n        await delay(0); // Wait for mutation observer to deliver records\n\n        expect(ClassInitedBySearch.init, 'ClassInitedBySearch.init()').not.toHaveBeenCalled();\n      });\n    });","file":"spec/watch_spec.js","skipped":false,"dir":"packages/components/tests"},{"name":"%s should compile","suites":["styles"],"line":28,"code":"  it.each(files)('%s should compile', async relativeFilePath => {\n    const filepath = path.join(cwd, relativeFilePath);\n\n    try {\n      expect((await render({\n        file: filepath,\n        ...defaultOptions\n      })).css).toBeDefined();\n    } catch (error) {\n      const {\n        column,\n        line,\n        message\n      } = error;\n\n      if (message) {\n        throw new Error(`${filepath}\\n[${line}:${column}] ${message}`);\n      }\n\n      throw error;\n    }\n  });","file":"styles-test.js","skipped":false,"dir":"packages/components/tests"},{"name":"Public API should only change with a semver change","suites":[],"updatePoint":{"line":8,"column":56,"index":274},"line":8,"code":"test('Public API should only change with a semver change', () => {\n  expect(Object.keys(CarbonElements).sort()).toMatchSnapshot();\n});","file":"PublicAPI-test.js","skipped":false,"dir":"packages/elements/src/__tests__"},{"name":"should add the given flag and set whether its enabled","suites":["@carbon/feature-flags","add"],"updatePoint":{"line":20,"column":61,"index":469},"line":20,"code":"    it('should add the given flag and set whether its enabled', async () => {\n      const {\n        getValue\n      } = await render(`\n        @use '../index.scss' as feature-flags;\n\n        @include feature-flags.add(flag-a, true);\n        @include feature-flags.add(flag-b, false);\n\n        $_: get-value(feature-flags.enabled(flag-a));\n        $_: get-value(feature-flags.enabled(flag-b));\n      `); // flag-a\n\n      expect(getValue(0)).toBe(true); // flag-b\n\n      expect(getValue(1)).toBe(false);\n    });","file":"scss-test.js","skipped":false,"dir":"packages/feature-flags/__tests__"},{"name":"should enable the given feature flag","suites":["@carbon/feature-flags","enable"],"updatePoint":{"line":39,"column":44,"index":996},"line":39,"code":"    it('should enable the given feature flag', async () => {\n      const {\n        getValue\n      } = await render(`\n        @use '../index.scss' as feature-flags;\n\n        @include feature-flags.add(flag-a, false);\n\n        $_: get-value(feature-flags.enabled(flag-a));\n\n        @include feature-flags.enable(flag-a);\n\n        $_: get-value(feature-flags.enabled(flag-a));\n      `);\n      expect(getValue(0)).toBe(false);\n      expect(getValue(1)).toBe(true);\n    });","file":"scss-test.js","skipped":false,"dir":"packages/feature-flags/__tests__"},{"name":"should disable the given feature flag","suites":["@carbon/feature-flags","disable"],"updatePoint":{"line":58,"column":45,"index":1502},"line":58,"code":"    it('should disable the given feature flag', async () => {\n      const {\n        getValue\n      } = await render(`\n        @use '../index.scss' as feature-flags;\n\n        @include feature-flags.add(flag-a, true);\n\n        $_: get-value(feature-flags.enabled(flag-a));\n\n        @include feature-flags.disable(flag-a);\n\n        $_: get-value(feature-flags.enabled(flag-a));\n      `);\n      expect(getValue(0)).toBe(true);\n      expect(getValue(1)).toBe(false);\n    });","file":"scss-test.js","skipped":false,"dir":"packages/feature-flags/__tests__"},{"name":"should return whether a flag is enabled or disabled","suites":["@carbon/feature-flags","enabled"],"updatePoint":{"line":77,"column":59,"index":2022},"line":77,"code":"    it('should return whether a flag is enabled or disabled', async () => {\n      const {\n        getValue\n      } = await render(`\n        @use '../index.scss' as feature-flags;\n\n        @include feature-flags.add(flag-a, true);\n        @include feature-flags.add(flag-b, false);\n\n        $_: get-value(feature-flags.enabled(flag-a));\n        $_: get-value(feature-flags.enabled(flag-b));\n      `); // flag-a\n\n      expect(getValue(0)).toBe(true); // flag-b\n\n      expect(getValue(1)).toBe(false);\n    });","file":"scss-test.js","skipped":false,"dir":"packages/feature-flags/__tests__"},{"name":"should set each feature flag given","suites":["@carbon/feature-flags","merge"],"updatePoint":{"line":96,"column":42,"index":2546},"line":96,"code":"    it('should set each feature flag given', async () => {\n      const {\n        getValue\n      } = await render(`\n        @use '../index.scss' as feature-flags;\n\n        @include feature-flags.add(flag-c, false);\n        @include feature-flags.merge((\n          flag-a: true,\n          flag-b: false,\n          flag-c: true,\n        ));\n\n        $_: get-value(feature-flags.enabled(flag-a));\n        $_: get-value(feature-flags.enabled(flag-b));\n        $_: get-value(feature-flags.enabled(flag-c));\n      `); // flag-a\n\n      expect(getValue(0)).toBe(true); // flag-b\n\n      expect(getValue(1)).toBe(false); // flag-c\n\n      expect(getValue(2)).toBe(true);\n    });","file":"scss-test.js","skipped":false,"dir":"packages/feature-flags/__tests__"},{"name":"Public API","suites":["@carbon/grid"],"updatePoint":{"line":19,"column":18,"index":391},"line":19,"code":"  test('Public API', async () => {\n    const {\n      get\n    } = await render(`\n      @use 'sass:meta';\n      @use '../index.scss' as grid;\n\n      $_: get('variables', meta.module-variables('grid'));\n      $_: get('mixins', (\n        grid: meta.mixin-exists('css-grid', 'grid'),\n      ));\n    `);\n    const variables = get('variables');\n    expect(Object.keys(variables.value)).toMatchSnapshot();\n    const mixins = get('mixins');\n    expect(mixins.value.grid).toBe(true);\n  });","file":"scss-test.js","skipped":false,"dir":"packages/grid/__tests__"},{"name":"should register each asset from a directory","suites":["registry"],"updatePoint":{"line":31,"column":49,"index":853},"line":31,"code":"  it('should register each asset from a directory', async () => {\n    const assets = ['a', 'b', 'c'];\n    const files = {};\n\n    for (const asset of assets) {\n      const filepath = `/svg/${asset}.svg`;\n      files[filepath] = 'mock';\n    }\n\n    vol.fromJSON(files);\n    const registry = await Registry.create('/svg');\n\n    for (const [id] of registry) {\n      expect(assets.indexOf(id)).not.toBe(-1);\n    }\n  });","file":"registry-test.js","skipped":false,"dir":"packages/icon-build-helpers/src/__tests__"},{"name":"should register each asset in nested directories","suites":["registry"],"updatePoint":{"line":47,"column":54,"index":1272},"line":47,"code":"  it('should register each asset in nested directories', async () => {\n    const assets = ['foo/a', 'foo/bar/b', 'baz/c'];\n    const files = {};\n\n    for (const asset of assets) {\n      const filepath = `/svg/${asset}.svg`;\n      files[filepath] = 'mock';\n    }\n\n    vol.fromJSON(files);\n    const registry = await Registry.create('/svg');\n\n    for (const icon of registry.values()) {\n      const asset = icon.namespace.join('/') + '/' + icon.id;\n      expect(assets.indexOf(asset)).not.toBe(-1);\n    }\n  });","file":"registry-test.js","skipped":false,"dir":"packages/icon-build-helpers/src/__tests__"},{"name":"should register assets with the same name under the same icon","suites":["registry"],"updatePoint":{"line":64,"column":67,"index":1794},"line":64,"code":"  it('should register assets with the same name under the same icon', async () => {\n    const assets = ['16/a', '20/a', '32/a'];\n    const files = {};\n\n    for (const asset of assets) {\n      const filepath = `/svg/${asset}.svg`;\n      files[filepath] = 'mock';\n    }\n\n    vol.fromJSON(files);\n    const registry = await Registry.create('/svg');\n    expect(registry.size).toBe(1);\n    const icon = registry.get('a');\n    expect(icon.assets.length).toBe(assets.length);\n    expect(icon.assets[0].size).toBe(16);\n    expect(icon.assets[1].size).toBe(20);\n    expect(icon.assets[2].size).toBe(32);\n  });","file":"registry-test.js","skipped":false,"dir":"packages/icon-build-helpers/src/__tests__"},{"name":"should default `aria-hidden=\"true\"` and `focusable=\"false\"` for SVGs","suites":["getAttributes"],"updatePoint":{"line":16,"column":74,"index":437},"line":16,"code":"  it('should default `aria-hidden=\"true\"` and `focusable=\"false\"` for SVGs', () => {\n    const attrs = getAttributes();\n    expect(attrs['aria-hidden']).toBe(true);\n    expect(attrs.focusable).toBe('false');\n    expect(attrs.role).not.toBeDefined();\n  }); // Test when we need to set `focusable` and `tabindex`. The rule of thumb","file":"getAttributes-test.js","skipped":false,"dir":"packages/icon-helpers/src/__tests__"},{"name":"should set `focusable=\"%s\"` when using %s","suites":["getAttributes"],"line":27,"code":"  test.each([['false', 'only tabindex', {\n    tabindex: 0\n  }], ['true', 'aria-label and tabindex', {\n    'aria-label': 'label',\n    tabindex: 0\n  }], ['false', 'only aria-label', {\n    'aria-label': 'label'\n  }], ['true', 'aria-labelledby and tabindex', {\n    'aria-labelledby': 'id',\n    tabindex: 0\n  }], ['false', 'only aria-labelledby', {\n    'aria-labelledby': 'id'\n  }], ['true', 'title and tabindex', {\n    title: 'title',\n    tabindex: 0\n  }], ['false', 'only title', {\n    title: 'title'\n  }]])('should set `focusable=\"%s\"` when using %s', (focusable, _, attributes) => {\n    const iconAttributes = getAttributes({\n      width: 16,\n      height: 16,\n      viewBox: '0 0 16 16',\n      ...attributes\n    });\n    expect(iconAttributes.focusable).toBe(focusable);\n  });","file":"getAttributes-test.js","skipped":false,"dir":"packages/icon-helpers/src/__tests__"},{"name":"should set role and remove aria-hidden if `%s` is set","suites":["getAttributes"],"line":53,"code":"  test.each(['aria-label', 'aria-labelledby', 'title'])('should set role and remove aria-hidden if `%s` is set', attr => {\n    const attrs = getAttributes({\n      [attr]: 'attribute'\n    });\n    expect(attrs.role).toBe('img');\n    expect(attrs['aria-hidden']).not.toBeDefined();\n  });","file":"getAttributes-test.js","skipped":false,"dir":"packages/icon-helpers/src/__tests__"},{"name":"should convert a given descriptor to a string","suites":["toString"],"updatePoint":{"line":37,"column":51,"index":903},"line":37,"code":"  it('should convert a given descriptor to a string', () => {\n    expect(() => {\n      toString(defaultDescriptor);\n    }).not.toThrow();\n    expect(typeof toString(defaultDescriptor)).toBe('string');\n  });","file":"toString-test.js","skipped":false,"dir":"packages/icon-helpers/src/__tests__"},{"name":"should convert a given descriptor to a valid DOM node","suites":["toSVG"],"updatePoint":{"line":37,"column":59,"index":899},"line":37,"code":"  it('should convert a given descriptor to a valid DOM node', () => {\n    expect(() => {\n      const node = toSVG(defaultDescriptor);\n      document.body.appendChild(node);\n      node.parentNode.removeChild(node);\n    }).not.toThrow();\n  });","file":"toSVG-test.js","skipped":false,"dir":"packages/icon-helpers/src/__tests__"},{"name":"it should export spacing step %s","suites":["scss/layout.scss"],"line":37,"code":"  it.each(spacingScale)('it should export spacing step %s', async (index, namespace, alias, value) => {\n    const {\n      calls\n    } = await render(`\n        @import '../scss/layout';\n        $t: test(global-variable-exists(${namespace}));\n        $t: test($${namespace});\n        $t: test(global-variable-exists(${alias}));\n        $t: test($${alias});\n      `);\n    expect(convert(calls[0][0])).toBe(true);\n    expect(convert(calls[1][0])).toBe(value);\n    expect(convert(calls[2][0])).toBe(true);\n    expect(convert(calls[3][0])).toBe(value);\n  });","file":"layout-test.js","skipped":false,"dir":"packages/layout/__tests__"},{"name":"it should export fluid spacing step %s","suites":["scss/layout.scss"],"line":52,"code":"  it.each(fluidSpacingScale)('it should export fluid spacing step %s', async (index, namespace, alias, value) => {\n    const {\n      calls\n    } = await render(`\n        @import '../scss/layout';\n        $t: test(global-variable-exists(${namespace}));\n        $t: test($${namespace});\n        $t: test(global-variable-exists(${alias}));\n        $t: test($${alias});\n      `);\n    expect(convert(calls[0][0])).toBe(true);\n    expect(convert(calls[1][0])).toBe(value);\n    expect(convert(calls[2][0])).toBe(true);\n    expect(convert(calls[3][0])).toBe(value);\n  });","file":"layout-test.js","skipped":false,"dir":"packages/layout/__tests__"},{"name":"it should export layout step %s","suites":["scss/layout.scss"],"line":67,"code":"  it.each(layoutScale)('it should export layout step %s', async (index, namespace, alias, value) => {\n    const {\n      calls\n    } = await render(`\n        @import '../scss/layout';\n        $t: test(global-variable-exists(${namespace}));\n        $t: test($${namespace});\n        $t: test(global-variable-exists(${alias}));\n        $t: test($${alias});\n      `);\n    expect(convert(calls[0][0])).toBe(true);\n    expect(convert(calls[1][0])).toBe(value);\n    expect(convert(calls[2][0])).toBe(true);\n    expect(convert(calls[3][0])).toBe(value);\n  });","file":"layout-test.js","skipped":false,"dir":"packages/layout/__tests__"},{"name":"it should export container step %s","suites":["scss/layout.scss"],"line":82,"code":"  it.each(containerScale)('it should export container step %s', async (index, namespace, alias, value) => {\n    const {\n      calls\n    } = await render(`\n        @import '../scss/layout';\n        $t: test(global-variable-exists(${namespace}));\n        $t: test($${namespace});\n        $t: test(global-variable-exists(${alias}));\n        $t: test($${alias});\n      `);\n    expect(convert(calls[0][0])).toBe(true);\n    expect(convert(calls[1][0])).toBe(value);\n    expect(convert(calls[2][0])).toBe(true);\n    expect(convert(calls[3][0])).toBe(value);\n  });","file":"layout-test.js","skipped":false,"dir":"packages/layout/__tests__"},{"name":"it should export icon-size step %s","suites":["scss/layout.scss"],"line":97,"code":"  it.each(iconSizeScale)('it should export icon-size step %s', async (index, namespace, alias, value) => {\n    const {\n      calls\n    } = await render(`\n        @import '../scss/layout';\n        $t: test(global-variable-exists(${namespace}));\n        $t: test($${namespace});\n        $t: test(global-variable-exists(${alias}));\n        $t: test($${alias});\n      `);\n    expect(convert(calls[0][0])).toBe(true);\n    expect(convert(calls[1][0])).toBe(value);\n    expect(convert(calls[2][0])).toBe(true);\n    expect(convert(calls[3][0])).toBe(value);\n  });","file":"layout-test.js","skipped":false,"dir":"packages/layout/__tests__"},{"name":"Public API","suites":["@carbon/motion"],"updatePoint":{"line":15,"column":18,"index":410},"line":15,"code":"  test('Public API', () => {\n    expect(CarbonMotion).toMatchSnapshot();\n  });","file":"motion-test.js","skipped":false,"dir":"packages/motion/__tests__"},{"name":"@carbon/motion/scss/motion.scss","suites":["@carbon/motion"],"updatePoint":{"line":18,"column":39,"index":510},"line":18,"code":"  test('@carbon/motion/scss/motion.scss', async () => {\n    const {\n      getValue\n    } = await render(`\n      @use 'sass:meta';\n      @use '../scss/motion';\n\n      $_: get-value(meta.module-variables('motion'));\n    `);\n    const variables = getValue(0);\n    expect(Object.keys(variables)).toMatchSnapshot();\n  });","file":"motion-test.js","skipped":false,"dir":"packages/motion/__tests__"},{"name":"Public API should only change with a semver change","suites":[],"updatePoint":{"line":108,"column":56,"index":3704},"line":108,"code":"test('Public API should only change with a semver change', () => {\n  jest.mock('../src/internal/deprecateFieldOnObject');\n\n  const CarbonReact = require('../src');\n\n  const PublicAPI = new Map();\n  Object.keys(CarbonReact).forEach(name => {\n    const Component = CarbonReact[name];\n    PublicAPI.set(name, mapComponentToAPI(Component));\n  });\n\n  function mapComponentToAPI(Component) {\n    const api = {};\n    Object.keys(Component).forEach(key => {\n      // There are a couple of properties on components that we don't believe\n      // are part of our API, such as `_` prefixed variables, or capture details\n      // that are internal to a library-specific piece of functionality. For\n      // example, React's context functionality.\n      if (key[0] === '_') {\n        return;\n      }\n\n      if (key === 'Consumer') {\n        api[key] = 'React.Consumer';\n        return;\n      }\n\n      if (key === 'Provider') {\n        api[key] = 'React.Provider';\n        return;\n      }\n\n      if (key === 'contextType') {\n        api[key] = {\n          $$typeof: Component[key]['$$typeof']\n        };\n        return;\n      } // Handle components defined as fields on a component, for example\n      // `MultiSelect.Filterable`\n\n\n      if (typeof Component[key] === 'function' && key !== 'render' && isValidElementType(Component[key])) {\n        api[key] = mapComponentToAPI(Component[key]);\n        return;\n      }\n\n      api[key] = Component[key];\n    });\n    return api;\n  }\n\n  expect(PublicAPI).toMatchSnapshot();\n});","file":"PublicAPI-test.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"should load","suites":[],"updatePoint":{"line":9,"column":17,"index":225},"line":9,"code":"test('should load', () => {\n  expect(() => require('../lib')).not.toThrow();\n});","file":"ssr-test.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"%s","suites":["@carbon/scss","assignments"],"line":74,"code":"    test.each(assignment)('%s', (_, init, expected, options = {}) => {\n      const {\n        code\n      } = generate(t.StyleSheet({\n        children: [t.Assignment({\n          id: t.Identifier({\n            name: 'variable'\n          }),\n          init,\n          ...options\n        })]\n      }));\n      expect(code).toEqual(prettier.format(expected.trim(), prettierOptions));\n    });","file":"scss-test.js","skipped":false,"dir":"packages/scss-generator/__tests__"},{"name":"%s","suites":["@carbon/scss","rules"],"line":119,"code":"    test.each(rules)('%s', (_, rule, expected) => {\n      const {\n        code\n      } = generate(t.StyleSheet({\n        children: [rule]\n      }));\n      expect(code).toEqual(prettier.format(expected.trim(), prettierOptions));\n    });","file":"scss-test.js","skipped":false,"dir":"packages/scss-generator/__tests__"},{"name":"%s","suites":["@carbon/scss","function"],"line":239,"code":"    test.each(functions)('%s', (_, ast, expected) => {\n      const {\n        code\n      } = generate(t.StyleSheet({\n        children: [ast]\n      }));\n      expect(code).toEqual(prettier.format(expected.trim(), prettierOptions));\n    });","file":"scss-test.js","skipped":false,"dir":"packages/scss-generator/__tests__"},{"name":"%s","suites":["@carbon/scss","mixin"],"line":339,"code":"    test.each(mixins)('%s', (_, ast, expected) => {\n      const {\n        code\n      } = generate(t.StyleSheet({\n        children: [ast]\n      }));\n      expect(code).toEqual(prettier.format(expected.trim(), prettierOptions));\n    });","file":"scss-test.js","skipped":false,"dir":"packages/scss-generator/__tests__"},{"name":"%s","suites":["@carbon/scss","calls"],"line":388,"code":"    test.each(calls)('%s', (_, ast, expected) => {\n      const {\n        code\n      } = generate(t.StyleSheet({\n        children: [ast]\n      }));\n      expect(code).toEqual(prettier.format(expected.trim(), prettierOptions));\n    });","file":"scss-test.js","skipped":false,"dir":"packages/scss-generator/__tests__"},{"name":"%s","suites":["@carbon/scss","Control structures"],"line":420,"code":"    test.each(structures)('%s', (_, ast, expected) => {\n      const {\n        code\n      } = generate(ast);\n      expect(code.trim()).toEqual(expected.trim());\n    });","file":"scss-test.js","skipped":false,"dir":"packages/scss-generator/__tests__"},{"name":"%s","suites":["@carbon/scss","Expressions"],"line":446,"code":"    test.each(expressions)('%s', (_, ast, expected) => {\n      const {\n        code\n      } = generate(ast);\n      expect(code.trim()).toEqual(expected.trim());\n    });","file":"scss-test.js","skipped":false,"dir":"packages/scss-generator/__tests__"},{"name":"newline","suites":["@carbon/scss","formatting"],"updatePoint":{"line":454,"column":17,"index":11209},"line":454,"code":"    test('newline', () => {\n      const {\n        code\n      } = generate(t.StyleSheet([t.Comment('start'), t.Newline(), t.Comment('end')]));\n      expect(code).toBe(`//start\n\n//end\n`);\n    });","file":"scss-test.js","skipped":false,"dir":"packages/scss-generator/__tests__"},{"name":"should export white, g10, g90, and g100 themes","suites":["@carbon/styles/scss/compat"],"updatePoint":{"line":19,"column":52,"index":439},"line":19,"code":"  it('should export white, g10, g90, and g100 themes', async () => {\n    const {\n      unwrap\n    } = await render(`\n      @use 'sass:map';\n      @use 'sass:meta';\n      @use '../scss/compat/themes';\n\n      $_: get('variables', map.keys(meta.module-variables('themes')));\n    `);\n    const themes = unwrap('variables').sort();\n    expect(themes).toEqual(['white', 'g10', 'g90', 'g100'].sort());\n  });","file":"compat-test.js","skipped":false,"dir":"packages/styles/__tests__"},{"name":"should export v10 tokens as Sass Variables","suites":["@carbon/styles/scss/compat"],"updatePoint":{"line":32,"column":48,"index":836},"line":32,"code":"  it('should export v10 tokens as Sass Variables', async () => {\n    const {\n      unwrap\n    } = await render(`\n      @use '../scss/config' with ( $prefix: 'cds' );\n      @use '../scss/compat/themes';\n      @use '../scss/compat/theme' with (\n        $theme: themes.$white,\n      );\n\n      $_: get('theme', themes.$white);\n      $_: get('variable', theme.$interactive-01);\n    `);\n    const theme = unwrap('theme');\n    const variable = unwrap('variable');\n    expect(variable).toEqual(`var(--cds-interactive-01, ${theme['interactive-01']})`);\n  });","file":"compat-test.js","skipped":false,"dir":"packages/styles/__tests__"},{"name":"should export v11 tokens that match the fallback theme","suites":["@carbon/styles/scss/compat"],"updatePoint":{"line":49,"column":60,"index":1398},"line":49,"code":"  it('should export v11 tokens that match the fallback theme', async () => {\n    const {\n      unwrap\n    } = await render(`\n      @use '../scss/config' with ( $prefix: 'cds' );\n      @use '../scss/themes';\n      @use '../scss/compat/themes' as compat;\n      @use '../scss/compat/theme' with (\n        $theme: compat.$g100,\n      );\n\n      $_: get('theme', themes.$g100);\n      $_: get('variable', theme.$background);\n    `);\n    const theme = unwrap('theme');\n    const variable = unwrap('variable');\n    expect(variable).toEqual(`var(--cds-background, ${theme['background']})`);\n  });","file":"compat-test.js","skipped":false,"dir":"packages/styles/__tests__"},{"name":"%s","suites":[],"line":19,"code":"describe.each(filepaths)('%s', filepath => {\n  it('should be importable', async () => {\n    await expect(render(`@use '../${filepath}';`)).resolves.toBeDefined();\n  });\n});","file":"styles-test.js","skipped":false,"dir":"packages/styles/__tests__"},{"name":"should be importable","suites":[],"updatePoint":{"line":20,"column":26,"index":2449},"line":20,"code":"  it('should be importable', async () => {\n    await expect(render(`@use '../${filepath}';`)).resolves.toBeDefined();\n  });","file":"styles-test.js","skipped":false,"dir":"packages/styles/__tests__"},{"name":"should match snapshots","suites":["Snapshot Tests"],"updatePoint":{"line":25,"column":28,"index":2614},"line":25,"code":"  it('should match snapshots', async () => {\n    expect(filepaths).toMatchSnapshot();\n  });","file":"styles-test.js","skipped":false,"dir":"packages/styles/__tests__"},{"name":"Config overrides","suites":["@carbon/styles/scss/config"],"updatePoint":{"line":30,"column":24,"index":2753},"line":30,"code":"  test('Config overrides', async () => {\n    const {\n      get\n    } = await render(`\n      @use 'sass:meta';\n      @use '../scss/config' with (\n        $prefix: 'custom-prefix',\n        $css--font-face: false,\n      );\n\n      $_: get('config', (\n        prefix: config.$prefix,\n        css--font-face: config.$css--font-face,\n      ));\n    `);\n    expect(get('config').value).toEqual({\n      prefix: 'custom-prefix',\n      ['css--font-face']: false\n    });\n  });","file":"styles-test.js","skipped":false,"dir":"packages/styles/__tests__"},{"name":"should get the matching node for the given text input","suites":["DOM test helpers","getByText"],"updatePoint":{"line":18,"column":61,"index":576},"line":18,"code":"    it('should get the matching node for the given text input', () => {\n      const nodes = ['<div>Text A</div>', '<button>Text B</button>', '<button>Text C <svg></svg></button>'];\n      container.innerHTML = nodes.join('');\n      expect(getByText(container, 'Text A')).toEqual(container.childNodes[0]);\n      expect(getByText(container, 'Text B')).toEqual(container.childNodes[1]);\n      expect(getByText(container, 'Text C')).toEqual(container.childNodes[2]);\n    });","file":"dom-test.js","skipped":false,"dir":"packages/test-utils/__tests__"},{"name":"should return null if no matches are found","suites":["DOM test helpers","getByText"],"updatePoint":{"line":25,"column":50,"index":1035},"line":25,"code":"    it('should return null if no matches are found', () => {\n      expect(getByText(container, 'Not found')).toEqual(null);\n    });","file":"dom-test.js","skipped":false,"dir":"packages/test-utils/__tests__"},{"name":"should get the matching node based on aria-label","suites":["DOM test helpers","getByLabel"],"updatePoint":{"line":30,"column":56,"index":1212},"line":30,"code":"    it('should get the matching node based on aria-label', () => {\n      container.innerHTML = '<button aria-label=\"test\">Test</button>';\n      expect(getByLabel(container, 'test')).toEqual(container.childNodes[0]);\n    });","file":"dom-test.js","skipped":false,"dir":"packages/test-utils/__tests__"},{"name":"should get the matching node based on aria-labelledby","suites":["DOM test helpers","getByLabel"],"updatePoint":{"line":34,"column":61,"index":1441},"line":34,"code":"    it('should get the matching node based on aria-labelledby', () => {\n      container.innerHTML = ['<span id=\"test\">label</span>', '<button aria-labelledby=\"test\">Test</button>'].join('');\n      expect(getByLabel(container, 'label')).toEqual(container.childNodes[1]);\n    });","file":"dom-test.js","skipped":false,"dir":"packages/test-utils/__tests__"},{"name":"should support matching based on text if label is in an interactive node","suites":["DOM test helpers","getByLabel"],"updatePoint":{"line":38,"column":80,"index":1738},"line":38,"code":"    it('should support matching based on text if label is in an interactive node', () => {\n      container.innerHTML = '<button>test</button>';\n      expect(getByLabel(container, 'test')).toEqual(container.childNodes[0]);\n    });","file":"dom-test.js","skipped":false,"dir":"packages/test-utils/__tests__"},{"name":"should return null if no matches are found","suites":["DOM test helpers","getByLabel"],"updatePoint":{"line":42,"column":50,"index":1938},"line":42,"code":"    it('should return null if no matches are found', () => {\n      expect(getByLabel(container, 'Not found')).toEqual(null);\n    });","file":"dom-test.js","skipped":false,"dir":"packages/test-utils/__tests__"},{"name":"should detect if an element is visible","suites":["DOM test helpers","isElementVisible"],"updatePoint":{"line":47,"column":46,"index":2112},"line":47,"code":"    it('should detect if an element is visible', () => {\n      expect(isElementVisible(container)).toBe(true);\n    });","file":"dom-test.js","skipped":false,"dir":"packages/test-utils/__tests__"},{"name":"should detect if an element is not visible","suites":["DOM test helpers","isElementVisible"],"updatePoint":{"line":50,"column":50,"index":2235},"line":50,"code":"    it('should detect if an element is not visible', () => {\n      const hidden = Array.from({\n        length: 6\n      }).map(() => document.createElement('div')); // <div hidden></div>\n\n      hidden[0].setAttribute('hidden', ''); // <div style=\"display: none;\"></div>\n\n      hidden[1].style.display = 'none'; // <div style=\"visibility: hidden;\"></div>\n\n      hidden[2].style.visibility = 'hidden'; // <div style=\"visibility: collapse;\"></div>\n\n      hidden[3].style.visibility = 'collapse'; // <div style=\"opacity: 0;\"></div>\n\n      hidden[4].style.opacity = '0'; // <div style=\"opacity: 0;\"></div>\n\n      hidden[5].style.opacity = 0;\n\n      for (const node of hidden) {\n        container.appendChild(node);\n        expect(isElementVisible(node)).toBe(false);\n      }\n    });","file":"dom-test.js","skipped":false,"dir":"packages/test-utils/__tests__"},{"name":"should detect if an element has a parent that is not visible","suites":["DOM test helpers","isElementVisible"],"updatePoint":{"line":72,"column":68,"index":3030},"line":72,"code":"    it('should detect if an element has a parent that is not visible', () => {\n      const hiddenParent = document.createElement('div');\n      hiddenParent.style.display = 'none';\n      const visibleChild = document.createElement('div');\n      hiddenParent.appendChild(visibleChild);\n      expect(isElementVisible(hiddenParent)).toBe(false);\n      expect(isElementVisible(visibleChild)).toBe(false);\n    });","file":"dom-test.js","skipped":false,"dir":"packages/test-utils/__tests__"},{"name":"pressTab should shift focus to the next focusable element","suites":[],"updatePoint":{"line":12,"column":63,"index":447},"line":12,"code":"test('pressTab should shift focus to the next focusable element', () => {\n  const button1 = document.createElement('button');\n  button1.textContent = 'Test button 1';\n  const button2 = document.createElement('button');\n  button2.textContent = 'Test button 2';\n  document.body.appendChild(button1); // Add a non-interactive element in between our interactive elements. If this\n  // receives focus, something is wrong with how we determine tab order\n\n  document.body.appendChild(document.createElement('span'));\n  document.body.appendChild(button2);\n  expect(document.activeElement === document.body).toBe(true);\n  pressTab();\n  expect(document.activeElement === button1).toBe(true);\n  pressTab();\n  expect(document.activeElement === button2).toBe(true);\n  pressTab();\n  expect(document.activeElement === button1).toBe(true);\n});","file":"keyboard-test.js","skipped":false,"dir":"packages/test-utils/__tests__"},{"name":"pressShiftTab should shift focus to the previous focusable element","suites":[],"updatePoint":{"line":30,"column":72,"index":1284},"line":30,"code":"test('pressShiftTab should shift focus to the previous focusable element', () => {\n  const button1 = document.createElement('button');\n  button1.textContent = 'Test button 1';\n  const button2 = document.createElement('button');\n  button2.textContent = 'Test button 2';\n  document.body.appendChild(button1);\n  document.body.appendChild(document.createElement('span'));\n  document.body.appendChild(button2);\n  expect(document.activeElement === document.body).toBe(true);\n  pressShiftTab();\n  expect(document.activeElement === button2).toBe(true);\n  pressShiftTab();\n  expect(document.activeElement === button1).toBe(true);\n  pressShiftTab();\n  expect(document.activeElement === button2).toBe(true);\n});","file":"keyboard-test.js","skipped":false,"dir":"packages/test-utils/__tests__"},{"name":"pressEnter should dispatch an additional click event on a button","suites":[],"updatePoint":{"line":46,"column":70,"index":1983},"line":46,"code":"test('pressEnter should dispatch an additional click event on a button', () => {\n  const button = document.createElement('button');\n  const buttonOnClick = jest.fn();\n  const buttonOnKeyDown = jest.fn();\n  const span = document.createElement('span');\n  const spanOnClick = jest.fn();\n  const spanOnKeyDown = jest.fn();\n  button.addEventListener('click', buttonOnClick);\n  button.addEventListener('keydown', buttonOnKeyDown);\n  span.addEventListener('click', spanOnClick);\n  span.addEventListener('keydown', spanOnKeyDown);\n  pressEnter(button);\n  expect(buttonOnClick).toHaveBeenCalledTimes(1);\n  expect(buttonOnKeyDown).toHaveBeenCalledTimes(1);\n  expect(buttonOnKeyDown).toHaveBeenLastCalledWith(expect.objectContaining({\n    key: 'Enter'\n  }));\n  pressEnter(span);\n  expect(spanOnClick).not.toHaveBeenCalled();\n  expect(spanOnKeyDown).toHaveBeenCalledTimes(1);\n  expect(spanOnKeyDown).toHaveBeenLastCalledWith(expect.objectContaining({\n    key: 'Enter'\n  }));\n});","file":"keyboard-test.js","skipped":false,"dir":"packages/test-utils/__tests__"},{"name":"pressSpace should dispatch an additional click event on a button","suites":[],"updatePoint":{"line":70,"column":70,"index":2950},"line":70,"code":"test('pressSpace should dispatch an additional click event on a button', () => {\n  const button = document.createElement('button');\n  const buttonOnClick = jest.fn();\n  const buttonOnKeyDown = jest.fn();\n  const span = document.createElement('span');\n  const spanOnClick = jest.fn();\n  const spanOnKeyDown = jest.fn();\n  button.addEventListener('click', buttonOnClick);\n  button.addEventListener('keydown', buttonOnKeyDown);\n  span.addEventListener('click', spanOnClick);\n  span.addEventListener('keydown', spanOnKeyDown);\n  pressSpace(button);\n  expect(buttonOnClick).toHaveBeenCalledTimes(1);\n  expect(buttonOnKeyDown).toHaveBeenCalledTimes(1);\n  expect(buttonOnKeyDown).toHaveBeenLastCalledWith(expect.objectContaining({\n    key: 'Space'\n  }));\n  pressSpace(span);\n  expect(spanOnClick).not.toHaveBeenCalled();\n  expect(spanOnKeyDown).toHaveBeenCalledTimes(1);\n  expect(spanOnKeyDown).toHaveBeenLastCalledWith(expect.objectContaining({\n    key: 'Space'\n  }));\n});","file":"keyboard-test.js","skipped":false,"dir":"packages/test-utils/__tests__"},{"name":"should export a carbon--theme mixin","suites":["_mixins.scss"],"updatePoint":{"line":23,"column":41,"index":455},"line":23,"code":"  it('should export a carbon--theme mixin', async () => {\n    const {\n      unwrap\n    } = await render(`\n      @import '../scss/mixins';\n\n      $_: get('mixin', mixin-exists(carbon--theme));\n    `);\n    expect(unwrap('mixin')).toBe(true);\n  });","file":"mixins-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"should set token variables for the given theme","suites":["_mixins.scss"],"updatePoint":{"line":33,"column":52,"index":712},"line":33,"code":"  it('should set token variables for the given theme', async () => {\n    const themeTests = Object.keys(themes).map(key => {\n      const variable = `$carbon--theme--${key}`;\n      const test = `\n        @include carbon--theme(${variable}) {\n          $_: get('${variable}', $interactive-01);\n        }\n      `;\n      return [variable, themes[key].interactive01, test];\n    });\n    const tests = themeTests.map(([_variable, _expectedColor, test]) => test).join('\\n');\n    const {\n      unwrap\n    } = await render(`\n      @import '../scss/themes';\n      ${tests}\n    `);\n    themeTests.forEach(([variable, expectedColor]) => {\n      expect(unwrap(variable)).toBe(expectedColor);\n    });\n  });","file":"mixins-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"should reset token variables after using the theme","suites":["_mixins.scss"],"updatePoint":{"line":54,"column":56,"index":1408},"line":54,"code":"  it('should reset token variables after using the theme', async () => {\n    const {\n      unwrap\n    } = await render(`\n      @import '../scss/themes';\n\n      $custom-theme: map-merge($carbon--theme--white, (\n        interactive-01: #ffffff,\n      ));\n\n      $_: get('before', $interactive-01);\n\n      @include carbon--theme($custom-theme) {\n        $_: get('mixin', $interactive-01);\n      }\n\n      $_: get('after', $interactive-01);\n    `);\n    expect(unwrap('before')).toBe(unwrap('after'));\n    expect(unwrap('mixin')).toBe('#ffffff');\n  });","file":"mixins-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"should reset token variables after using the theme with css custom properties","suites":["_mixins.scss"],"updatePoint":{"line":75,"column":83,"index":1982},"line":75,"code":"  it('should reset token variables after using the theme with css custom properties', async () => {\n    const {\n      unwrap\n    } = await render(`\n      $feature-flags: (enable-css-custom-properties: true);\n\n      @import '../scss/themes';\n\n      $custom-theme: map-merge($carbon--theme--white, (\n        interactive-01: #ffffff,\n      ));\n\n      $_: get('before', $interactive-01);\n\n      @include carbon--theme($custom-theme) {\n        $_: get('mixin', $interactive-01);\n      }\n\n      $_: get('after', $interactive-01);\n    `);\n    expect(unwrap('mixin')).toBe('var(--cds-interactive-01, #ffffff)');\n    expect(unwrap('after')).toBe(`var(--cds-interactive-01, ${unwrap('before')})`);\n  });","file":"mixins-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"should set the global carbon--theme to match the given theme","suites":["_mixins.scss"],"updatePoint":{"line":98,"column":66,"index":2659},"line":98,"code":"  it('should set the global carbon--theme to match the given theme', async () => {\n    const {\n      unwrap\n    } = await render(`\n      @import '../scss/themes';\n      $carbon--theme: ( value-01: #000000 );\n      $custom-theme: ( value-01: #ffffff );\n\n      @include carbon--theme($custom-theme) {\n        $_: get('mixin', $carbon--theme);\n      }\n\n      $_: get('after', $carbon--theme);\n    `);\n    const mixin = unwrap('mixin');\n    const after = unwrap('after');\n    expect(mixin['value-01']).toBe('#ffffff');\n    expect(after['value-01']).toBe('#000000');\n  });","file":"mixins-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"should create a custom property for a given token name and value","suites":["_mixins.scss","@mixin custom-property"],"updatePoint":{"line":118,"column":72,"index":3278},"line":118,"code":"    it('should create a custom property for a given token name and value', async () => {\n      const {\n        result\n      } = await render(`\n        @import '../scss/mixins';\n        .selector {\n          @include custom-property('token-01', #000000);\n        }\n      `);\n      expect(result.css.toString()).toEqual(expect.stringContaining('--cds-token-01: #000000;'));\n    });","file":"mixins-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"should export multiple tokens for maps","suites":["_mixins.scss","@mixin custom-property"],"updatePoint":{"line":129,"column":46,"index":3632},"line":129,"code":"    it('should export multiple tokens for maps', async () => {\n      const {\n        result\n      } = await render(`\n        @import '../scss/mixins';\n        .selector {\n          @include custom-property('token-01', (\n            property-01: #000000,\n            property-02: #ffffff,\n          ));\n        }\n      `);\n      const output = result.css.toString();\n      expect(output).toEqual(expect.stringContaining('--cds-token-01-property-01: #000000'));\n      expect(output).toEqual(expect.stringContaining('--cds-token-01-property-02: #ffffff'));\n    });","file":"mixins-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"should emit a value only if they are different","suites":["_mixins.scss","@function should-emit"],"updatePoint":{"line":147,"column":54,"index":4252},"line":147,"code":"    it('should emit a value only if they are different', async () => {\n      const {\n        unwrap\n      } = await render(`\n        @import '../scss/mixins';\n\n        $theme-a: (\n          property-01: #000000,\n          property-02: #ffffff,\n          property-03: (\n            sub-property-01: 16px,\n          ),\n          property-04: (\n            sub-property-01: 16px,\n          ),\n        );\n        $theme-b: (\n          property-01: #343434,\n          property-02: #ffffff,\n          property-03: (\n            sub-property-01: 16px,\n          ),\n          property-04: (\n            sub-property-01: 20px,\n          ),\n        );\n\n        // The properties are different, so should emit\n        $_: get('first', should-emit($theme-a, $theme-b, 'property-01', true));\n        $_: get('second', should-emit($theme-a, $theme-b, 'property-04', true));\n\n        // The properties are the same so should not emit\n        $_: get('third', should-emit($theme-a, $theme-b, 'property-02', true));\n        $_: get('fourth', should-emit($theme-a, $theme-b, 'property-03', true));\n      `);\n      expect(unwrap('first')).toBe(true);\n      expect(unwrap('second')).toBe(true);\n      expect(unwrap('third')).toBe(false);\n      expect(unwrap('fourth')).toBe(false);\n    });","file":"mixins-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"should use fallback values for v11 tokens","suites":["_mixins.scss","v11"],"updatePoint":{"line":189,"column":49,"index":5549},"line":189,"code":"    it('should use fallback values for v11 tokens', async () => {\n      const {\n        unwrap\n      } = await render(`\n        @import '../scss/mixins';\n        @import '../scss/theme-maps';\n\n        $carbon--theme: (\n          ui-background: #ffffff,\n        );\n        @include carbon--theme();\n\n        $_: get('token', $background);\n      `); // `ui-background` is the fallback for `background`\n\n      expect(unwrap('token')).toBe('#ffffff');\n    });","file":"mixins-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"index.scss","suites":["@carbon/themes/scss"],"updatePoint":{"line":25,"column":18,"index":487},"line":25,"code":"  test('index.scss', async () => {\n    const tokenVariables = tokens.map(token => {\n      const variable = `themes.$${token.name}`;\n      return `$_: get('${variable}', ${variable});`;\n    });\n    const {\n      unwrap\n    } = await render(`\n      @use 'sass:meta';\n      @use '../' as themes;\n\n      // Theme mixin\n      $_: get('themes.theme', meta.mixin-exists(theme, 'themes'));\n\n      // Get value from current theme\n      $_: get('themes.get', meta.function-exists(get, 'themes'));\n\n      // Current theme\n      $_: get('themes.$theme', themes.$theme);\n\n      // Theme variables\n      ${tokenVariables.join('\\n')}\n    `); // Mixin\n\n    expect(unwrap('themes.theme')).toBe(true); // Current theme\n\n    expect(unwrap('themes.$theme')).toBeDefined(); // Theme getter\n\n    expect(unwrap('themes.get')).toBe(true); // All tokens should be available as variables\n\n    for (const token of tokens) {\n      const variable = `themes.$${token.name}`;\n      expect(unwrap(variable)).toBeDefined();\n    }\n  });","file":"module-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"scss/_themes.scss","suites":["@carbon/themes/scss"],"updatePoint":{"line":60,"column":25,"index":1497},"line":60,"code":"  test('scss/_themes.scss', async () => {\n    const {\n      unwrap\n    } = await render(`\n      @use '../scss/modules/themes';\n\n      // Themes\n      $_: get('themes.$white', themes.$white);\n      $_: get('themes.$g10', themes.$g10);\n      $_: get('themes.$g90', themes.$g90);\n      $_: get('themes.$g100', themes.$g100);\n    `); // Themes should be available\n\n    for (const theme of Object.keys(themes)) {\n      expect(unwrap(`themes.$${theme}`)).toBeDefined();\n    }\n  });","file":"module-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"$theme","suites":["@carbon/themes/scss","configuration"],"updatePoint":{"line":79,"column":16,"index":2042},"line":79,"code":"    test('$theme', async () => {\n      const {\n        unwrap\n      } = await render(`\n        @use 'sass:map';\n        @use '../scss/modules/themes' as *;\n        @use '../' as themes with (\n          $theme: $g100\n        );\n\n        $_: get('theme.background', themes.get('background'));\n        $_: get('g100.background', map.get($g100, 'background'));\n      `);\n      expect(unwrap('theme.background')).toBe(unwrap('g100.background'));\n    }); // Set current theme to a custom theme","file":"module-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"custom $theme","suites":["@carbon/themes/scss","configuration"],"updatePoint":{"line":95,"column":23,"index":2538},"line":95,"code":"    test('custom $theme', async () => {\n      const {\n        unwrap\n      } = await render(`\n        @use '../' as themes with (\n          $theme: (\n            token-01: #ffffff\n          )\n        );\n\n        $_: get('token-01', themes.get('token-01'));\n        $_: get('background', themes.get('background'));\n      `);\n      expect(unwrap('token-01')).toBe('#ffffff');\n      expect(unwrap('background')).toBeDefined();\n    }); // Set theme fallback","file":"module-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"$fallback","suites":["@carbon/themes/scss","configuration"],"updatePoint":{"line":112,"column":19,"index":2989},"line":112,"code":"    test('$fallback', async () => {\n      const {\n        unwrap\n      } = await render(`\n        @use 'sass:map';\n        @use '../scss/modules/themes' as *;\n        @use '../' as themes with (\n          $fallback: $g100,\n          $theme: (\n            token-01: #ffffff,\n          ),\n        );\n\n        $_: get('token-01', themes.get('token-01'));\n        $_: get('background', themes.get('background'));\n        $_: get('gray100.background', map.get($g100, 'background'));\n      `); // Should allow custom token to resolve and other tokens should resolve\n      // from the $fallback theme\n\n      expect(unwrap('token-01')).toBe('#ffffff');\n      expect(unwrap('background')).toBe(unwrap('gray100.background'));\n    }); // Set value fallback for CSS Custom Properties","file":"module-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"$use-fallback-value","suites":["@carbon/themes/scss","configuration"],"updatePoint":{"line":135,"column":29,"index":3772},"line":135,"code":"    test('$use-fallback-value', async () => {\n      const {\n        unwrap\n      } = await render(`\n        @use '../' as themes with (\n          $use-fallback-value: false,\n        );\n\n        $_: get('background', themes.$background);\n      `);\n      expect(unwrap('background')).toBe('var(--cds-background)');\n    }); // Set prefix for CSS Custom Properties","file":"module-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"$property-prefix","suites":["@carbon/themes/scss","configuration"],"updatePoint":{"line":148,"column":26,"index":4131},"line":148,"code":"    test('$property-prefix', async () => {\n      const {\n        unwrap\n      } = await render(`\n        @use '../' as themes with (\n          $prefix: 'test',\n        );\n\n        $_: get('background', themes.$background);\n      `);\n      expect(unwrap('background')).toEqual('var(--test-background, #ffffff)');\n    });","file":"module-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"should export all themes as sass maps","suites":["_theme-maps.scss"],"updatePoint":{"line":21,"column":43,"index":460},"line":21,"code":"  it('should export all themes as sass maps', async () => {\n    const themeMapsTests = Object.keys(themes).map(theme => {\n      return `$t: test(global-variable-exists(carbon--theme--${theme}));`;\n    });\n    const {\n      calls\n    } = await render(`\n      @import '../scss/theme-maps';\n\n      ${themeMapsTests.join('\\n')}\n    `);\n\n    for (const call of calls) {\n      expect(call[0].getValue()).toBe(true);\n    }\n  });","file":"theme-maps-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"%s should match the default theme","suites":["themes.scss","tokens"],"line":57,"code":"    it.each(flatten(tokens))('%s should match the default theme', async token => {\n      const name = formatTokenName(token);\n      const {\n        calls\n      } = await render(`\n          @import '../scss/themes';\n          $t: test(global-variable-exists(${name}));\n          $t: test($${name});\n        `);\n      expect(convert(calls[0][0])).toBe(true); // Since some of our tokens are objects/maps (specifically type), we'll\n      // need to format the Sass value so that keys are changed from\n      // param-case to camelCase and that values are correctly mapped over for\n      // strings and numbers\n\n      expect(formatObjectKeys(convert(calls[1][0]))).toEqual(defaultTheme[token]);\n    });","file":"themes-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"should export tokens that match the default theme","suites":["themes.scss","carbon--theme"],"updatePoint":{"line":75,"column":57,"index":1845},"line":75,"code":"    it('should export tokens that match the default theme', async () => {\n      const {\n        calls\n      } = await render(`\n        @import '../scss/themes';\n        $t: test($carbon--theme);\n      `);\n      const theme = convert(calls[0][0]);\n      Object.keys(defaultTheme).forEach(token => {\n        expect(defaultTheme[token]).toEqual(formatObjectKeys(theme[formatTokenName(token)]));\n      });\n    });","file":"themes-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"should update based on global token definitions","suites":["themes.scss","carbon--theme"],"updatePoint":{"line":87,"column":55,"index":2253},"line":87,"code":"    it('should update based on global token definitions', async () => {\n      const color = '#000000';\n      const {\n        calls\n      } = await render(`\n        $interactive-01: ${color};\n\n        @import '../scss/themes';\n        $t: test($carbon--theme);\n      `);\n      const theme = convert(calls[0][0]);\n      expect(theme['interactive-01']).toEqual(color);\n    });","file":"themes-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"should support emitting the difference between themes","suites":["themes.scss","carbon--theme"],"updatePoint":{"line":100,"column":61,"index":2633},"line":100,"code":"    it('should support emitting the difference between themes', async () => {\n      const {\n        result\n      } = await render(`\n        @import '../scss/themes';\n\n        $carbon--theme: map-merge($carbon--theme--white, (\n          interactive-01: #000000,\n        ));\n        $theme--light: map-merge($carbon--theme--white, (\n          interactive-01: #ffffff,\n        ));\n\n        .emit-all-values {\n          @include carbon--theme(\n            $emit-custom-properties: true,\n            $emit-difference: false,\n          );\n        }\n\n        .emit-changed-values {\n          @include carbon--theme(\n            $theme: $theme--light,\n            $emit-custom-properties: true,\n            $emit-difference: true,\n          );\n        }\n      `);\n      const style = document.createElement('style');\n      style.innerHTML = result.css.toString();\n      document.head.appendChild(style);\n      const allValues = document.styleSheets[0].cssRules[0].style;\n      const changedValues = document.styleSheets[0].cssRules[1].style;\n      expect(allValues.length).toBeGreaterThan(changedValues.length);\n      expect(changedValues.length).toBe(1);\n    });","file":"themes-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"should export all tokens","suites":["_tokens.scss"],"updatePoint":{"line":22,"column":30,"index":462},"line":22,"code":"  it('should export all tokens', async () => {\n    const tokenVariableTests = tokens.colors.map(token => {\n      return `$t: test(global-variable-exists(${formatTokenName(token)}));`;\n    });\n    const {\n      calls\n    } = await render(`\n      @import '../scss/tokens';\n\n      ${tokenVariableTests.join('\\n')}\n    `);\n\n    for (const call of calls) {\n      expect(call[0].getValue()).toBe(true);\n    }\n  });","file":"tokens-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"should emit the CSS properties and values for a type token","suites":["type.scss","styles"],"updatePoint":{"line":33,"column":66,"index":764},"line":33,"code":"    it('should emit the CSS properties and values for a type token', async () => {\n      const {\n        result\n      } = await render(`\n        @import '../scss/index';\n\n        .selector {\n          @include carbon--type-style('productive-heading-01');\n        }\n      `);\n      const stylesheet = renderIntoDocument(result.css.toString());\n      const {\n        style\n      } = stylesheet.cssRules[0];\n      expect(style.length).toBe(Object.keys(productiveHeading01).length);\n      Object.keys(productiveHeading01).forEach(key => {\n        const property = paramCase(key); // We stringify the value from JS due to the fact that most of these\n        // values (like numbers) are represented as strings when we get the\n        // value from the CSSStyleDeclaration\n\n        expect('' + productiveHeading01[key]).toBe(style.getPropertyValue(property));\n      });\n    });","file":"scss-test.js","skipped":false,"dir":"packages/type/__tests__"},{"name":"should emit CSS Custom Properties when the feature flag is set","suites":["type.scss","styles"],"updatePoint":{"line":56,"column":70,"index":1640},"line":56,"code":"    it('should emit CSS Custom Properties when the feature flag is set', async () => {\n      const {\n        result\n      } = await render(`\n        $feature-flags: (enable-css-custom-properties: true);\n        @import '../scss/index';\n\n        .selector {\n          @include carbon--type-style('productive-heading-01');\n        }\n      `);\n      const stylesheet = renderIntoDocument(result.css.toString());\n      const {\n        style\n      } = stylesheet.cssRules[0];\n\n      for (let i = 0; i < style.length; i++) {\n        const property = style[i];\n        const key = camelCase(property);\n        const value = style.getPropertyValue(property); // Make sure it's a custom property\n\n        expect(value).toEqual(expect.stringContaining('var(--')); // Make sure the fallback value is included\n\n        expect(value).toEqual(expect.stringContaining('' + productiveHeading01[key]));\n      }\n    });","file":"scss-test.js","skipped":false,"dir":"packages/type/__tests__"}]}