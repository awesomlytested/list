{"repo":"leon-ai/leon","url":"https://github.com/leon-ai/leon","branch":"develop","configs":[{"package":"leon","lang":"js","dir":"test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"\"\" queries this module","suites":["NLU modules"," language"," package"," module"],"updatePoint":{"line":63,"column":57,"index":2478},"line":63,"code":"                  test(`\"${exprs[m]}\" queries this module`, async () => {\n                    // Need to redefine the NLU brain execution to update the mocking\n                    nlu.brain.execute = jest.fn();\n                    await nlu.process(exprs[m]);\n                    const [obj] = nlu.brain.execute.mock.calls;\n                    expect(obj[0].classification.package).toBe(packages[j]);\n                    expect(obj[0].classification.module).toBe(module);\n                  });","file":"e2e/nlp-modules.spec.js","skipped":false,"dir":"test"},{"name":"Request query endpoint POST ","suites":["Over HTTP"],"updatePoint":{"line":17,"column":47,"index":471},"line":17,"code":"  test(`Request query endpoint POST ${queryUrl}`, async () => {\n    const {\n      body\n    } = await superagent.post(queryUrl).send({\n      utterance: 'Hello'\n    }).set('X-API-Key', process.env.LEON_HTTP_API_KEY);\n    expect(body).toHaveProperty('success', true);\n  });","file":"e2e/over-http.spec.js","skipped":false,"dir":"test"},{"name":"Request an action skill: GET ","suites":["Over HTTP"],"updatePoint":{"line":25,"column":54,"index":749},"line":25,"code":"  test(`Request an action skill: GET ${actionSkillUrl}`, async () => {\n    const {\n      body\n    } = await superagent.get(actionSkillUrl).set('X-API-Key', process.env.LEON_HTTP_API_KEY);\n    expect(body).toHaveProperty('success', true);\n  });","file":"e2e/over-http.spec.js","skipped":false,"dir":"test"},{"name":" has valid JSON syntax","suites":["are JSON files valid"],"updatePoint":{"line":17,"column":47,"index":653},"line":17,"code":"        test(`${jsonFile} has valid JSON syntax`, () => {\n          try {\n            JSON.parse(fs.readFileSync(jsonFile, 'utf8'));\n            expect(true).toBe(true);\n          } catch (e) {\n            throw e;\n          }\n        });","file":"json/is-valid.spec.js","skipped":false,"dir":"test"},{"name":"has no punctuation at the end of \"\"","suites":["no punctuation"],"updatePoint":{"line":19,"column":53,"index":669},"line":19,"code":"        test(`has no punctuation at the end of \"${s}\"`, () => {\n          expect(found).toBe(false);\n        });","file":"json/no-punctuation.spec.js","skipped":false,"dir":"test"},{"name":"has punctuation at the end of \"\"","suites":["punctuation"],"updatePoint":{"line":19,"column":50,"index":661},"line":19,"code":"        test(`has punctuation at the end of \"${s}\"`, () => {\n          expect(found).toBe(true);\n        });","file":"json/punctuation.spec.js","skipped":false,"dir":"test"},{"name":"creates a new instance of Asr","suites":["ASR","constructor()"],"updatePoint":{"line":7,"column":39,"index":223},"line":7,"code":"    test('creates a new instance of Asr', () => {\n      const asr = new Asr();\n      expect(asr).toBeInstanceOf(Asr);\n    });","file":"unit/server/core/asr.spec.js","skipped":false,"dir":"test"},{"name":"returns audio paths","suites":["ASR","get audios()"],"updatePoint":{"line":13,"column":29,"index":380},"line":13,"code":"    test('returns audio paths', () => {\n      expect(Asr.audios).toContainAllKeys(['webm', 'wav']);\n      expect(Asr.audios.webm.indexOf('/tmp/speech.webm')).not.toBe(-1);\n      expect(Asr.audios.wav.indexOf('/tmp/speech.wav')).not.toBe(-1);\n    });","file":"unit/server/core/asr.spec.js","skipped":false,"dir":"test"},{"name":"returns error because of wrong WebM audio path","suites":["ASR","run()"],"updatePoint":{"line":21,"column":56,"index":728},"line":21,"code":"    test('returns error because of wrong WebM audio path', async () => {\n      const asr = new Asr();\n      Asr.audios.webm = '';\n\n      try {\n        await asr.run('', {});\n      } catch (e) {\n        expect(e.type).toBe('error');\n        Asr.audios.webm = webmTmp; // Need to give back the real WebM path\n      }\n    });","file":"unit/server/core/asr.spec.js","skipped":false,"dir":"test"},{"name":"returns error because of a bad blob","suites":["ASR","run()"],"updatePoint":{"line":32,"column":45,"index":1040},"line":32,"code":"    test('returns error because of a bad blob', async () => {\n      const asr = new Asr();\n\n      try {\n        await asr.run('bad blob', {});\n      } catch (e) {\n        expect(e.type).toBe('error');\n      }\n    });","file":"unit/server/core/asr.spec.js","skipped":false,"dir":"test"},{"name":"returns warning speech recognition not ready","suites":["ASR","run()"],"updatePoint":{"line":41,"column":54,"index":1266},"line":41,"code":"    test('returns warning speech recognition not ready', async () => {\n      const asr = new Asr();\n      const blob = Buffer.from(global.audio.base_64_webm_blob, 'base64');\n\n      try {\n        await asr.run(blob, {});\n      } catch (e) {\n        expect(e.type).toBe('warning');\n      }\n    });","file":"unit/server/core/asr.spec.js","skipped":false,"dir":"test"},{"name":"encodes audio blob to WAVE file","suites":["ASR","run()"],"updatePoint":{"line":51,"column":41,"index":1549},"line":51,"code":"    test('encodes audio blob to WAVE file', async () => {\n      const asr = new Asr();\n      const blob = Buffer.from(global.audio.base_64_webm_blob, 'base64');\n      const stt = {\n        parse: jest.fn()\n      };\n      await asr.run(blob, stt);\n      expect(fs.existsSync(Asr.audios.webm)).toBe(true);\n      expect(stt.parse).toHaveBeenCalledTimes(1);\n    });","file":"unit/server/core/asr.spec.js","skipped":false,"dir":"test"},{"name":"creates a new instance of Brain","suites":["brain","constructor()"],"updatePoint":{"line":5,"column":41,"index":182},"line":5,"code":"    test('creates a new instance of Brain', () => {\n      const brain = new Brain('en');\n      expect(brain).toBeInstanceOf(Brain);\n    });","file":"unit/server/core/brain.spec.js","skipped":false,"dir":"test"},{"name":"does not emit answer to the client when the speech is empty","suites":["brain","talk()"],"updatePoint":{"line":11,"column":69,"index":385},"line":11,"code":"    test('does not emit answer to the client when the speech is empty', () => {\n      const brain = new Brain('en');\n      brain.socket.emit = jest.fn();\n      brain.talk('');\n      expect(brain.socket.emit).toHaveBeenCalledTimes(0);\n    });","file":"unit/server/core/brain.spec.js","skipped":false,"dir":"test"},{"name":"emits string answer to the client","suites":["brain","talk()"],"updatePoint":{"line":17,"column":43,"index":601},"line":17,"code":"    test('emits string answer to the client', () => {\n      const brain = new Brain('en');\n      brain.tts = {\n        add: jest.fn()\n      };\n      brain.socket.emit = jest.fn();\n      brain.talk('Hello world');\n      expect(brain.tts.add).toHaveBeenCalledTimes(1);\n      expect(brain.socket.emit).toHaveBeenCalledTimes(1);\n    });","file":"unit/server/core/brain.spec.js","skipped":false,"dir":"test"},{"name":"picks specific string according to object properties","suites":["brain","wernicke()"],"updatePoint":{"line":29,"column":62,"index":992},"line":29,"code":"    test('picks specific string according to object properties', () => {\n      const brain = new Brain('en');\n      expect(brain.wernicke('errors', 'not_found', {})).toBe('Sorry, it seems I cannot find that');\n    });","file":"unit/server/core/brain.spec.js","skipped":false,"dir":"test"},{"name":"picks random string from an array","suites":["brain","wernicke()"],"updatePoint":{"line":33,"column":43,"index":1191},"line":33,"code":"    test('picks random string from an array', () => {\n      const brain = new Brain('en');\n      expect(global.enUtteranceSamples.answers.random_errors).toIncludeAnyMembers([brain.wernicke('random_errors', '', {})]);\n    });","file":"unit/server/core/brain.spec.js","skipped":false,"dir":"test"},{"name":"asks to repeat","suites":["brain","execute()"],"updatePoint":{"line":39,"column":24,"index":1435},"line":39,"code":"    test('asks to repeat', async () => {\n      const brain = new Brain('en');\n      brain.socket.emit = jest.fn();\n      brain.talk = jest.fn();\n      await brain.execute({\n        classification: {\n          confidence: 0.1\n        }\n      });\n      const [string] = brain.talk.mock.calls;\n      expect(global.enUtteranceSamples.answers.random_not_sure).toIncludeAnyMembers([string[0].substr(0, string[0].length - 1)]);\n    });","file":"unit/server/core/brain.spec.js","skipped":false,"dir":"test"},{"name":"spawns child process","suites":["brain","execute()"],"updatePoint":{"line":51,"column":30,"index":1870},"line":51,"code":"    test('spawns child process', async () => {\n      const brain = new Brain('en');\n      brain.socket.emit = jest.fn();\n      brain.tts = {\n        synthesizer: jest.fn(),\n        default: jest.fn(),\n        save: jest.fn(),\n        add: jest.fn()\n      };\n      const obj = {\n        utterance: 'Hello',\n        entities: [],\n        classification: {\n          package: 'leon',\n          module: 'greeting',\n          action: 'run',\n          confidence: 0.9\n        }\n      };\n      await brain.execute(obj);\n      expect(brain.process).toEqual({});\n    });","file":"unit/server/core/brain.spec.js","skipped":false,"dir":"test"},{"name":"executes module","suites":["brain","execute()"],"updatePoint":{"line":73,"column":25,"index":2427},"line":73,"code":"    test('executes module', async () => {\n      const brain = new Brain('en');\n      brain.socket.emit = jest.fn();\n      brain.talk = jest.fn();\n      const obj = {\n        utterance: 'Is github.com up?',\n        entities: [{\n          sourceText: 'github.com',\n          utteranceText: 'github.com',\n          entity: 'url',\n          resolution: {\n            value: 'github.com'\n          }\n        }],\n        classification: {\n          package: 'checker',\n          module: 'isitdown',\n          action: 'run',\n          confidence: 0.9\n        }\n      };\n      await brain.execute(obj);\n      expect(brain.talk).toHaveBeenCalled();\n    });","file":"unit/server/core/brain.spec.js","skipped":false,"dir":"test"},{"name":"rejects promise because of spawn failure","suites":["brain","execute()"],"updatePoint":{"line":97,"column":50,"index":3100},"line":97,"code":"    test('rejects promise because of spawn failure', async () => {\n      const brain = new Brain('en');\n      brain.socket.emit = jest.fn();\n      brain.talk = jest.fn();\n      const obj = {\n        utterance: 'Hello',\n        entities: [],\n        classification: {\n          package: 'leon',\n          module: 'greeting',\n          action: 'run',\n          confidence: 0.9\n        }\n      };\n      brain.process = spawn('pipenv', ['run', 'python', `${global.paths.packages}/fake-main-to-test.py`, 'en', obj.classification.package, obj.classification.module, obj.utterance]);\n\n      try {\n        await brain.execute(obj);\n      } catch (e) {\n        expect(e.type).toBe('error');\n        expect(brain.talk).toHaveBeenCalledTimes(1);\n      }\n    });","file":"unit/server/core/brain.spec.js","skipped":false,"dir":"test"},{"name":"creates a new instance of Ner","suites":["NER","constructor()"],"updatePoint":{"line":5,"column":39,"index":160},"line":5,"code":"    test('creates a new instance of Ner', () => {\n      const ner = new Ner();\n      expect(ner).toBeInstanceOf(Ner);\n    });","file":"unit/server/core/ner.spec.js","skipped":false,"dir":"test"},{"name":"logs entities extractions","suites":["NER","logExtraction()"],"updatePoint":{"line":11,"column":35,"index":326},"line":11,"code":"    test('logs entities extractions', async () => {\n      console.log = jest.fn();\n      Ner.logExtraction([{\n        sourceText: 'shopping',\n        entity: 'list'\n      }, {\n        sourceText: 'red',\n        entity: 'color'\n      }]);\n      expect(console.log.mock.calls[0][1]).toBe('{ value: shopping, entity: list }');\n      expect(console.log.mock.calls[1][1]).toBe('{ value: red, entity: color }');\n    });","file":"unit/server/core/ner.spec.js","skipped":false,"dir":"test"},{"name":"finds no entity","suites":["NER","extractEntities()"],"updatePoint":{"line":25,"column":25,"index":776},"line":25,"code":"    test('finds no entity', async () => {\n      const ner = new Ner();\n      const entities = await ner.extractEntities('en', path.join(__dirname, '../../../../packages/leon/data/expressions/en.json'), {\n        utterance: 'Give me a random number',\n        entities: [],\n        classification: {\n          package: 'leon',\n          module: 'randomnumber',\n          action: 'run',\n          confidence: 1\n        }\n      });\n      expect(entities).toEqual([]);\n    });","file":"unit/server/core/ner.spec.js","skipped":false,"dir":"test"},{"name":"extracts built-in entities","suites":["NER","extractEntities()"],"updatePoint":{"line":39,"column":36,"index":1259},"line":39,"code":"    test('extracts built-in entities', async () => {\n      const ner = new Ner();\n      Ner.logExtraction = jest.fn();\n      const entities = await ner.extractEntities('en', path.join(__dirname, '../../../../packages/trend/data/expressions/en.json'), {\n        utterance: 'Give me the 2 latest GitHub trends',\n        entities: [{\n          sourceText: 2,\n          entity: 'number'\n        }],\n        classification: {\n          package: 'trend',\n          module: 'github',\n          action: 'run',\n          confidence: 1\n        }\n      });\n      expect(Ner.logExtraction).toHaveBeenCalledTimes(1);\n      expect(entities.length).toBe(1);\n    });","file":"unit/server/core/ner.spec.js","skipped":false,"dir":"test"},{"name":"does not support entity type","suites":["NER","extractEntities()"],"updatePoint":{"line":58,"column":38,"index":1912},"line":58,"code":"    test('does not support entity type', async () => {\n      const ner = new Ner();\n\n      try {\n        await ner.extractEntities('en', global.paths.utterance_samples, {\n          utterance: 'Just an utterance',\n          entities: [],\n          classification: {\n            package: 'doesnotmatter',\n            module: 'unittest',\n            action: 'do_not_support_entity',\n            confidence: 1\n          }\n        });\n      } catch (e) {\n        expect(e.code).toBe('random_ner_type_not_supported');\n      }\n    });","file":"unit/server/core/ner.spec.js","skipped":false,"dir":"test"},{"name":"extracts trim custom entities with between conditions","suites":["NER","extractEntities()"],"updatePoint":{"line":76,"column":63,"index":2465},"line":76,"code":"    test('extracts trim custom entities with between conditions', async () => {\n      const ner = new Ner();\n      Ner.logExtraction = jest.fn();\n      const entities = await ner.extractEntities('en', path.join(__dirname, '../../../../packages/calendar/data/expressions/en.json'), {\n        utterance: 'Create a shopping list',\n        entities: [],\n        classification: {\n          package: 'calendar',\n          module: 'todolist',\n          action: 'create_list',\n          confidence: 1\n        }\n      });\n      expect(Ner.logExtraction).toHaveBeenCalledTimes(1);\n      expect(entities.length).toBe(1);\n      expect(entities[0].entity).toBe('list');\n      expect(entities[0].sourceText).toBe('shopping');\n    });","file":"unit/server/core/ner.spec.js","skipped":false,"dir":"test"},{"name":"extracts trim custom entities with before and after conditions","suites":["NER","extractEntities()"],"updatePoint":{"line":94,"column":72,"index":3195},"line":94,"code":"    test('extracts trim custom entities with before and after conditions', async () => {\n      const ner = new Ner();\n      Ner.logExtraction = jest.fn();\n      const entities = await ner.extractEntities('en', global.paths.utterance_samples, {\n        utterance: 'Please whistle as a bird',\n        entities: [],\n        classification: {\n          package: 'doesnotmatter',\n          module: 'mockingbird',\n          action: 'test',\n          confidence: 1\n        }\n      });\n      expect(Ner.logExtraction).toHaveBeenCalledTimes(1);\n      expect(entities.length).toBe(2);\n      expect(entities.map(e => e.entity)).toEqual(['start', 'animal']);\n      expect(entities.map(e => e.sourceText)).toEqual(['Please whistle as a', 'bird']);\n    });","file":"unit/server/core/ner.spec.js","skipped":false,"dir":"test"},{"name":"extracts regex custom entities","suites":["NER","extractEntities()"],"updatePoint":{"line":112,"column":40,"index":3906},"line":112,"code":"    test('extracts regex custom entities', async () => {\n      const ner = new Ner();\n      Ner.logExtraction = jest.fn();\n      const entities = await ner.extractEntities('en', global.paths.utterance_samples, {\n        utterance: 'I love the color blue, white and red',\n        entities: [],\n        classification: {\n          package: 'preference',\n          module: 'color',\n          action: 'run',\n          confidence: 1\n        }\n      });\n      expect(Ner.logExtraction).toHaveBeenCalledTimes(1);\n      expect(entities.length).toBe(3);\n      expect(entities.map(e => e.entity)).toEqual(['color', 'color', 'color']);\n      expect(entities.map(e => e.sourceText)).toEqual(['blue', 'white', 'red']);\n    });","file":"unit/server/core/ner.spec.js","skipped":false,"dir":"test"},{"name":"creates a new instance of Nlu","suites":["NLU","constructor()"],"updatePoint":{"line":4,"column":39,"index":130},"line":4,"code":"    test('creates a new instance of Nlu', () => {\n      const nlu = new Nlu();\n      expect(nlu).toBeInstanceOf(Nlu);\n    });","file":"unit/server/core/nlu.spec.js","skipped":false,"dir":"test"},{"name":"returns warning NLP model does not exist","suites":["NLU","loadModel()"],"updatePoint":{"line":10,"column":50,"index":307},"line":10,"code":"    test('returns warning NLP model does not exist', async () => {\n      const nlu = new Nlu();\n\n      try {\n        await nlu.loadModel('ghost-model.nlp');\n      } catch (e) {\n        expect(e.type).toBe('warning');\n      }\n    });","file":"unit/server/core/nlu.spec.js","skipped":false,"dir":"test"},{"name":"rejects because of a broken NLP model","suites":["NLU","loadModel()"],"updatePoint":{"line":19,"column":47,"index":537},"line":19,"code":"    test('rejects because of a broken NLP model', async () => {\n      const nlu = new Nlu();\n      nlu.brain = {\n        talk: jest.fn(),\n        wernicke: jest.fn(),\n        socket: {\n          emit: jest.fn()\n        }\n      };\n\n      try {\n        await nlu.loadModel(global.paths.broken_nlp_model);\n      } catch (e) {\n        expect(e.type).toBe('error');\n      }\n    });","file":"unit/server/core/nlu.spec.js","skipped":false,"dir":"test"},{"name":"loads the NLP model","suites":["NLU","loadModel()"],"updatePoint":{"line":35,"column":29,"index":896},"line":35,"code":"    test('loads the NLP model', async () => {\n      const nlu = new Nlu();\n      await nlu.loadModel(global.paths.nlp_model);\n      expect(nlu.nlp.nluManager.domainManagers).not.toBeEmpty();\n    });","file":"unit/server/core/nlu.spec.js","skipped":false,"dir":"test"},{"name":"rejects because the NLP model is empty","suites":["NLU","process()"],"updatePoint":{"line":43,"column":48,"index":1193},"line":43,"code":"    test('rejects because the NLP model is empty', async () => {\n      const nlu = new Nlu();\n      nlu.brain = {\n        talk: jest.fn(),\n        wernicke: jest.fn(),\n        socket: {\n          emit: jest.fn()\n        }\n      };\n      await expect(nlu.process('Hello')).rejects.toEqual('The NLP model is missing, please rebuild the project or if you are in dev run: npm run train');\n    });","file":"unit/server/core/nlu.spec.js","skipped":false,"dir":"test"},{"name":"resolves with intent not found","suites":["NLU","process()"],"updatePoint":{"line":54,"column":40,"index":1578},"line":54,"code":"    test('resolves with intent not found', async () => {\n      const nlu = new Nlu();\n      nlu.brain = {\n        talk: jest.fn(),\n        wernicke: jest.fn(),\n        socket: {\n          emit: jest.fn()\n        }\n      };\n      await nlu.loadModel(global.paths.nlp_model);\n      await expect(nlu.process('Unknown intent')).resolves.toHaveProperty('message', 'Intent not found');\n      expect(nlu.brain.talk).toHaveBeenCalledTimes(1);\n    });","file":"unit/server/core/nlu.spec.js","skipped":false,"dir":"test"},{"name":"executes brain with the fallback value (object)","suites":["NLU","process()"],"updatePoint":{"line":67,"column":57,"index":2038},"line":67,"code":"    test('executes brain with the fallback value (object)', async () => {\n      const utterance = 'Thisisanutteranceexampletotestfallbacks';\n      const fallbackObj = {\n        utterance,\n        entities: [],\n        classification: {\n          package: 'leon',\n          module: 'randomnumber',\n          action: 'run'\n        }\n      };\n      const nlu = new Nlu();\n      nlu.brain = {\n        execute: jest.fn()\n      };\n      Nlu.fallback = jest.fn(() => fallbackObj);\n      await nlu.loadModel(global.paths.nlp_model);\n      await expect(nlu.process(utterance)).resolves.toHaveProperty('processingTime');\n      expect(nlu.brain.execute.mock.calls[0][0]).toBe(fallbackObj);\n      Nlu.fallback = nluFallbackTmp; // Need to give back the real fallback method\n    });","file":"unit/server/core/nlu.spec.js","skipped":false,"dir":"test"},{"name":"returns true thanks to intent found","suites":["NLU","process()"],"updatePoint":{"line":88,"column":45,"index":2796},"line":88,"code":"    test('returns true thanks to intent found', async () => {\n      const nlu = new Nlu();\n      nlu.brain = {\n        execute: jest.fn()\n      };\n      await nlu.loadModel(global.paths.nlp_model);\n      await expect(nlu.process('Hello')).toResolve();\n      expect(nlu.brain.execute).toHaveBeenCalledTimes(1);\n    });","file":"unit/server/core/nlu.spec.js","skipped":false,"dir":"test"},{"name":"returns false because there is no fallback matching the utterance","suites":["NLU","fallback()"],"updatePoint":{"line":99,"column":75,"index":3183},"line":99,"code":"    test('returns false because there is no fallback matching the utterance', () => {\n      expect(Nlu.fallback({\n        utterance: 'This is an utterance example to test fallbacks'\n      }, [])).toBeFalsy();\n    });","file":"unit/server/core/nlu.spec.js","skipped":false,"dir":"test"},{"name":"returns fallback injected object","suites":["NLU","fallback()"],"updatePoint":{"line":104,"column":42,"index":3367},"line":104,"code":"    test('returns fallback injected object', () => {\n      const obj = {\n        utterance: 'This is am utterance example to test fallbacks',\n        classification: {}\n      };\n      expect(Nlu.fallback(obj, [{\n        words: ['utterance', 'example', 'test', 'fallbacks'],\n        package: 'fake-pkg',\n        module: 'fake-module',\n        action: 'fake-action'\n      }]).classification).toContainEntries([['package', 'fake-pkg'], ['module', 'fake-module'], ['action', 'fake-action'], ['confidence', 1]]);\n    });","file":"unit/server/core/nlu.spec.js","skipped":false,"dir":"test"},{"name":"uses default language if the given one is unsupported","suites":["server","init()"],"updatePoint":{"line":5,"column":63,"index":212},"line":5,"code":"    test('uses default language if the given one is unsupported', async () => {\n      server.bootstrap = jest.fn(); // Need to mock bootstrap method to not continue the init\n\n      process.env.LEON_LANG = 'fake-lang';\n      await server.init();\n      expect(process.env.LEON_LANG).toBe('en-US');\n    });","file":"unit/server/core/server.spec.js","skipped":false,"dir":"test"},{"name":"initializes server configurations","suites":["server","init()"],"updatePoint":{"line":12,"column":43,"index":496},"line":12,"code":"    test('initializes server configurations', async () => {\n      await expect(server.init()).resolves.not.toThrow();\n    });","file":"unit/server/core/server.spec.js","skipped":false,"dir":"test"},{"name":"initializes HTTP server","suites":["server","bootstrap()"],"updatePoint":{"line":17,"column":33,"index":652},"line":17,"code":"    test('initializes HTTP server', async () => {\n      await server.bootstrap();\n      expect(server.httpServer).not.toBe({});\n    });","file":"unit/server/core/server.spec.js","skipped":false,"dir":"test"},{"name":"listens for request","suites":["server","listen()"],"updatePoint":{"line":23,"column":29,"index":821},"line":23,"code":"    test('listens for request', async () => {\n      console.log = jest.fn();\n      await server.listen(process.env.LEON_PORT);\n      expect(console.log.mock.calls[1][1].indexOf(`${process.env.LEON_HOST}:${process.env.LEON_PORT}`)).not.toEqual(-1);\n    });","file":"unit/server/core/server.spec.js","skipped":false,"dir":"test"},{"name":"initializes main nodes","suites":["server","handleOnConnection()"],"updatePoint":{"line":30,"column":32,"index":1129},"line":30,"code":"    test('initializes main nodes', async () => {\n      // Mock the WebSocket with an EventEmitter\n      const ee = new EventEmitter();\n      ee.broadcast = {\n        emit: jest.fn()\n      };\n      console.log = jest.fn();\n      server.handleOnConnection(ee);\n      expect(console.log.mock.calls[0][1]).toBe('CLIENT');\n      console.log = jest.fn();\n      ee.emit('init', 'hotword-node');\n      console.log = jest.fn();\n      ee.emit('hotword-detected', {});\n      expect(console.log.mock.calls[0][1]).toBe('SOCKET');\n      console.log = jest.fn();\n      ee.emit('init', 'jest');\n      /* setTimeout(() => {\n        ee.emit('utterance', { client: 'jest', value: 'Hello' })\n      }, 50)\n       setTimeout(() => {\n        expect(console.log.mock.calls[26][1]).toBe('Intent found')\n        console.log = jest.fn()\n      }, 100)\n       setTimeout(() => {\n        ee.emit('recognize', 'blob')\n      }, 150)\n       setTimeout(async () => {\n        expect(console.log.mock.calls[0][1]).toBe('ASR')\n        console.log = jest.fn()\n         await server.httpServer.close()\n      }, 200) */\n    });","file":"unit/server/core/server.spec.js","skipped":false,"dir":"test"},{"name":"creates a new instance of Synchronizer","suites":["synchronizer","constructor()"],"updatePoint":{"line":4,"column":48,"index":166},"line":4,"code":"    test('creates a new instance of Synchronizer', () => {\n      const sync = new Synchronizer({}, {}, {});\n      expect(sync).toBeInstanceOf(Synchronizer);\n    });","file":"unit/server/core/synchronizer.spec.js","skipped":false,"dir":"test"},{"name":"executes direct synchronization method","suites":["synchronizer","synchronize()"],"updatePoint":{"line":10,"column":48,"index":373},"line":10,"code":"    test('executes direct synchronization method', () => {\n      const brain = {\n        socket: {}\n      };\n      brain.talk = brain.socket.emit = brain.wernicke = jest.fn();\n      const sync = new Synchronizer(brain, {}, {\n        method: 'direct'\n      });\n      sync.direct = jest.fn();\n      sync.synchronize(() => {\n        expect(sync.direct).toHaveBeenCalledTimes(1);\n      });\n    });","file":"unit/server/core/synchronizer.spec.js","skipped":false,"dir":"test"},{"name":"executes Google Drive synchronization method","suites":["synchronizer","synchronize()"],"updatePoint":{"line":23,"column":54,"index":773},"line":23,"code":"    test('executes Google Drive synchronization method', () => {\n      const brain = {\n        socket: {}\n      };\n      brain.talk = brain.socket.emit = brain.wernicke = jest.fn();\n      const sync = new Synchronizer(brain, {}, {\n        method: 'google-drive'\n      });\n      sync.googleDrive = jest.fn();\n      sync.synchronize(() => {\n        expect(sync.googleDrive).toHaveBeenCalledTimes(1);\n      });\n    });","file":"unit/server/core/synchronizer.spec.js","skipped":false,"dir":"test"},{"name":"emits the download","suites":["synchronizer","direct()"],"updatePoint":{"line":38,"column":28,"index":1200},"line":38,"code":"    test('emits the download', () => {\n      const brain = {\n        socket: {\n          emit: jest.fn()\n        }\n      };\n      const sync = new Synchronizer(brain, {}, {});\n      sync.direct();\n      expect(sync.brain.socket.emit.mock.calls[0][0]).toBe('download');\n    });","file":"unit/server/core/synchronizer.spec.js","skipped":false,"dir":"test"},{"name":"returns date time with UTC","suites":["date helper","dateTime()"],"updatePoint":{"line":5,"column":36,"index":192},"line":5,"code":"    test('returns date time with UTC', () => {\n      expect(DateHelper.getDateTime()).toBe(moment().tz(global.date.time_zone).format());\n    });","file":"unit/server/helpers/date.spec.js","skipped":false,"dir":"test"},{"name":"returns time zone","suites":["date helper","timeZone()"],"updatePoint":{"line":10,"column":27,"index":367},"line":10,"code":"    test('returns time zone', () => {\n      expect(DateHelper.getTimeZone()).toBe(global.date.time_zone);\n    });","file":"unit/server/helpers/date.spec.js","skipped":false,"dir":"test"},{"name":"starts spinner","suites":["loader helper","start()"],"updatePoint":{"line":7,"column":24,"index":232},"line":7,"code":"    test('starts spinner', () => {\n      expect(LoaderHelper.start()).toBeObject();\n      expect(setInterval).toHaveBeenCalledTimes(1);\n    });","file":"unit/server/helpers/loader.spec.js","skipped":false,"dir":"test"},{"name":"stops spinner","suites":["loader helper","stop()"],"updatePoint":{"line":13,"column":23,"index":410},"line":13,"code":"    test('stops spinner', () => {\n      expect(LoaderHelper.stop()).toBeObject();\n    });","file":"unit/server/helpers/loader.spec.js","skipped":false,"dir":"test"},{"name":"logs success","suites":["log helper","success()"],"updatePoint":{"line":4,"column":22,"index":136},"line":4,"code":"    test('logs success', () => {\n      console.log = jest.fn();\n      LogHelper.success('This is a success');\n      expect(console.log.mock.calls[0][1]).toBe('This is a success');\n    });","file":"unit/server/helpers/log.spec.js","skipped":false,"dir":"test"},{"name":"logs info","suites":["log helper","info()"],"updatePoint":{"line":11,"column":19,"index":356},"line":11,"code":"    test('logs info', () => {\n      console.info = jest.fn();\n      LogHelper.info('This is an info');\n      expect(console.info.mock.calls[0][1]).toBe('This is an info');\n    });","file":"unit/server/helpers/log.spec.js","skipped":false,"dir":"test"},{"name":"logs error","suites":["log helper","error()"],"updatePoint":{"line":18,"column":20,"index":573},"line":18,"code":"    test('logs error', () => {\n      console.error = jest.fn();\n      LogHelper.error('This is an error');\n      expect(console.error.mock.calls[0][1]).toBe('This is an error');\n    });","file":"unit/server/helpers/log.spec.js","skipped":false,"dir":"test"},{"name":"logs warning","suites":["log helper","warning()"],"updatePoint":{"line":25,"column":22,"index":799},"line":25,"code":"    test('logs warning', () => {\n      console.warn = jest.fn();\n      LogHelper.warning('This is a warning');\n      expect(console.warn.mock.calls[0][1]).toBe('This is a warning');\n    });","file":"unit/server/helpers/log.spec.js","skipped":false,"dir":"test"},{"name":"logs title","suites":["log helper","title()"],"updatePoint":{"line":32,"column":20,"index":1023},"line":32,"code":"    test('logs title', () => {\n      console.log = jest.fn();\n      LogHelper.title('This is a title');\n      expect(console.log.mock.calls[0][1]).toBe('THIS IS A TITLE');\n    });","file":"unit/server/helpers/log.spec.js","skipped":false,"dir":"test"},{"name":"logs default","suites":["log helper","default()"],"updatePoint":{"line":39,"column":22,"index":1243},"line":39,"code":"    test('logs default', () => {\n      console.log = jest.fn();\n      LogHelper.default('This is a default');\n      expect(console.log.mock.calls[0][1]).toBe('This is a default');\n    });","file":"unit/server/helpers/log.spec.js","skipped":false,"dir":"test"},{"name":"returns information about the OS","suites":["OS helper","get()"],"updatePoint":{"line":4,"column":42,"index":149},"line":4,"code":"    test('returns information about the OS', () => {\n      const info = OSHelper.getInformation();\n      expect(info.type).toBeOneOf(['windows', 'linux', 'macos']);\n      expect(info.name).toBeOneOf(['Windows', 'Linux', 'macOS']);\n    });","file":"unit/server/helpers/os.spec.js","skipped":false,"dir":"test"},{"name":"returns information for Windows","suites":["OS helper","get()"],"updatePoint":{"line":9,"column":41,"index":387},"line":9,"code":"    test('returns information for Windows', () => {\n      jest.unmock('os');\n      const o = jest.requireActual('os');\n      o.type = jest.fn(() => 'Windows_NT');\n      expect(OSHelper.getInformation()).toEqual({\n        name: 'Windows',\n        type: 'windows'\n      });\n    });","file":"unit/server/helpers/os.spec.js","skipped":false,"dir":"test"},{"name":"returns information for Linux","suites":["OS helper","get()"],"updatePoint":{"line":18,"column":39,"index":665},"line":18,"code":"    test('returns information for Linux', () => {\n      jest.unmock('os');\n      const o = jest.requireActual('os');\n      o.type = jest.fn(() => 'Linux');\n      expect(OSHelper.getInformation()).toEqual({\n        name: 'Linux',\n        type: 'linux'\n      });\n    });","file":"unit/server/helpers/os.spec.js","skipped":false,"dir":"test"},{"name":"returns information for macOS","suites":["OS helper","get()"],"updatePoint":{"line":27,"column":39,"index":934},"line":27,"code":"    test('returns information for macOS', () => {\n      jest.unmock('os');\n      const o = jest.requireActual('os');\n      o.type = jest.fn(() => 'Darwin');\n      expect(OSHelper.getInformation()).toEqual({\n        name: 'macOS',\n        type: 'macos'\n      });\n    });","file":"unit/server/helpers/os.spec.js","skipped":false,"dir":"test"},{"name":"returns the number of cores on the machine","suites":["OS helper","cpus()"],"updatePoint":{"line":38,"column":52,"index":1252},"line":38,"code":"    test('returns the number of cores on the machine', () => {\n      expect(typeof OSHelper.getNumberOfCPUCores()).toBe('number');\n    });","file":"unit/server/helpers/os.spec.js","skipped":false,"dir":"test"},{"name":"replaces substring to a string defined in an object","suites":["string helper","pnr()"],"updatePoint":{"line":4,"column":61,"index":170},"line":4,"code":"    test('replaces substring to a string defined in an object', () => {\n      expect(StringHelper.pnr('Hello %name%', {\n        '%name%': 'Leon'\n      })).toBe('Hello Leon');\n    });","file":"unit/server/helpers/string.spec.js","skipped":false,"dir":"test"},{"name":"transforms first letter to uppercase","suites":["string helper","ucfirst()"],"updatePoint":{"line":11,"column":46,"index":376},"line":11,"code":"    test('transforms first letter to uppercase', () => {\n      expect(StringHelper.ucfirst('leon')).toBe('Leon');\n    });","file":"unit/server/helpers/string.spec.js","skipped":false,"dir":"test"},{"name":"transforms snake_case string to PascalCase","suites":["string helper","snakeToPascalCase()"],"updatePoint":{"line":16,"column":52,"index":552},"line":16,"code":"    test('transforms snake_case string to PascalCase', () => {\n      expect(StringHelper.snakeToPascalCase('leon')).toBe('Leon');\n      expect(StringHelper.snakeToPascalCase('this_is_leon')).toBe('ThisIsLeon');\n    });","file":"unit/server/helpers/string.spec.js","skipped":false,"dir":"test"},{"name":"generates a random string with a length defined by a given number","suites":["string helper","random()"],"updatePoint":{"line":22,"column":75,"index":831},"line":22,"code":"    test('generates a random string with a length defined by a given number', () => {\n      const s = StringHelper.random(6);\n      expect(typeof s).toBe('string');\n      expect(s.length).toBe(6);\n    });","file":"unit/server/helpers/string.spec.js","skipped":false,"dir":"test"},{"name":"removes accents","suites":["string helper","removeAccents()"],"updatePoint":{"line":29,"column":25,"index":1030},"line":29,"code":"    test('removes accents', () => {\n      expect(StringHelper.removeAccents('àâèéêëîïôöûüùÛÜç')).toBe('aaeeeeiioouuuUUc');\n    });","file":"unit/server/helpers/string.spec.js","skipped":false,"dir":"test"},{"name":"removes end-punctuation","suites":["string helper","removeEndPunctuation()"],"updatePoint":{"line":34,"column":33,"index":1220},"line":34,"code":"    test('removes end-punctuation', () => {\n      expect(StringHelper.removeEndPunctuation('Who are you?')).toBe('Who are you');\n      expect(StringHelper.removeEndPunctuation('This is great.')).toBe('This is great');\n      expect(StringHelper.removeEndPunctuation('This string has no punctuation')).toBe('This string has no punctuation');\n    });","file":"unit/server/helpers/string.spec.js","skipped":false,"dir":"test"},{"name":"returns error cannot find model","suites":["Coqui STT parser","init()"],"updatePoint":{"line":7,"column":43,"index":373},"line":7,"code":"      test('returns error cannot find model', () => {\n        expect(parser.init({\n          model: 'fake-model-path'\n        })).toBeFalsy();\n      });","file":"unit/server/stt/coqui/parser.spec.js","skipped":false,"dir":"test"},{"name":"returns error cannot find scorer","suites":["Coqui STT parser","init()"],"updatePoint":{"line":12,"column":44,"index":527},"line":12,"code":"      test('returns error cannot find scorer', () => {\n        expect(parser.init({\n          model: `${global.paths.root}/bin/coqui/model.tflite`,\n          scorer: 'fake-scorer-path'\n        })).toBeFalsy();\n      });","file":"unit/server/stt/coqui/parser.spec.js","skipped":false,"dir":"test"},{"name":"returns true because all of the paths are good","suites":["Coqui STT parser","init()"],"updatePoint":{"line":18,"column":58,"index":761},"line":18,"code":"      test('returns true because all of the paths are good', () => {\n        expect(parser.init({\n          model: `${global.paths.root}/bin/coqui/model.tflite`,\n          scorer: `${global.paths.root}/bin/coqui/huge-vocabulary.scorer`\n        })).toBeTruthy();\n      });","file":"unit/server/stt/coqui/parser.spec.js","skipped":false,"dir":"test"},{"name":"displays warning because the sample rate is lower than the desired sample rate","suites":["Coqui STT parser","parser()"],"updatePoint":{"line":28,"column":88,"index":1107},"line":28,"code":"    test('displays warning because the sample rate is lower than the desired sample rate', () => {\n      console.warn = jest.fn();\n      parser.parse(fs.readFileSync(`${global.paths.wave_speech_8}`));\n      expect(console.warn).toBeCalled();\n    });","file":"unit/server/stt/coqui/parser.spec.js","skipped":false,"dir":"test"},{"name":"returns true","suites":["Coqui STT parser","parser()"],"updatePoint":{"line":33,"column":22,"index":1291},"line":33,"code":"    test('returns true', () => {\n      expect(parser.parse(fs.readFileSync(`${global.paths.wave_speech}`))).toBeTruthy();\n    });","file":"unit/server/stt/coqui/parser.spec.js","skipped":false,"dir":"test"},{"name":"creates a new instance of Stt","suites":["STT","constructor()"],"updatePoint":{"line":4,"column":39,"index":129},"line":4,"code":"    test('creates a new instance of Stt', () => {\n      const stt = new Stt({}, 'coqui-stt');\n      expect(stt).toBeInstanceOf(Stt);\n    });","file":"unit/server/stt/stt.spec.js","skipped":false,"dir":"test"},{"name":"returns error provider does not exist or not yet supported","suites":["STT","init()"],"updatePoint":{"line":10,"column":68,"index":334},"line":10,"code":"    test('returns error provider does not exist or not yet supported', () => {\n      const stt = new Stt({}, 'fake-provider');\n      expect(stt.init()).toBeFalsy();\n    });","file":"unit/server/stt/stt.spec.js","skipped":false,"dir":"test"},{"name":"initializes the STT parser","suites":["STT","init()"],"updatePoint":{"line":14,"column":36,"index":475},"line":14,"code":"    test('initializes the STT parser', () => {\n      const stt = new Stt({}, 'coqui-stt');\n      expect(stt.init(() => null)).toBeTruthy();\n    });","file":"unit/server/stt/stt.spec.js","skipped":false,"dir":"test"},{"name":"forwards string output to the client","suites":["STT","forward()"],"updatePoint":{"line":20,"column":46,"index":671},"line":20,"code":"    test('forwards string output to the client', () => {\n      const stt = new Stt({}, '');\n      stt.socket = {\n        emit: jest.fn()\n      };\n      stt.forward('Hello');\n      expect(stt.socket.emit.mock.calls[0][0]).toBe('recognized');\n      expect(stt.socket.emit.mock.calls[0][1]).toBe('Hello');\n    });","file":"unit/server/stt/stt.spec.js","skipped":false,"dir":"test"},{"name":"returns error file does not exist","suites":["STT","parse()"],"updatePoint":{"line":31,"column":43,"index":1015},"line":31,"code":"    test('returns error file does not exist', () => {\n      const stt = new Stt({}, '');\n      expect(stt.parse('fake-file.wav')).toBeFalsy();\n    });","file":"unit/server/stt/stt.spec.js","skipped":false,"dir":"test"},{"name":"parses WAVE file via the chosen parser","suites":["STT","parse()"],"updatePoint":{"line":35,"column":48,"index":1171},"line":35,"code":"    test('parses WAVE file via the chosen parser', () => {\n      const stt = new Stt({}, '');\n      expect(stt.parse(global.paths.wave_speech)).toBeTruthy();\n    });","file":"unit/server/stt/stt.spec.js","skipped":false,"dir":"test"},{"name":"returns true","suites":["Flite TTS synthesizer","init()"],"updatePoint":{"line":7,"column":24,"index":272},"line":7,"code":"      test('returns true', () => {\n        expect(synthesizer.init()).toBeTruthy();\n      });","file":"unit/server/tts/flite/synthesizer.spec.js","skipped":false,"dir":"test"},{"name":"returns warning message to say only \"en-US\" language is accepted","suites":["Flite TTS synthesizer","init()"],"updatePoint":{"line":10,"column":76,"index":418},"line":10,"code":"      test('returns warning message to say only \"en-US\" language is accepted', () => {\n        process.env.LEON_LANG = 'fake-lang';\n        console.warn = jest.fn();\n        synthesizer.init();\n        expect(console.warn).toBeCalled();\n      });","file":"unit/server/tts/flite/synthesizer.spec.js","skipped":false,"dir":"test"},{"name":"saves string to audio file","suites":["Flite TTS synthesizer","save()"],"updatePoint":{"line":18,"column":38,"index":666},"line":18,"code":"      test('saves string to audio file', () => {\n        const em = new events.EventEmitter();\n        synthesizer.init();\n        synthesizer.save('Hello world', em, file => {\n          expect(fs.readFileSync(file)).toBeTruthy();\n          fs.unlinkSync(file);\n        });\n      });","file":"unit/server/tts/flite/synthesizer.spec.js","skipped":false,"dir":"test"},{"name":"get file duration","suites":["Flite TTS synthesizer","save()"],"updatePoint":{"line":26,"column":29,"index":941},"line":26,"code":"      test('get file duration', done => {\n        const em = new events.EventEmitter();\n        const spy = jest.spyOn(em, 'emit');\n        synthesizer.save('Hello world', em, file => {\n          expect(spy).toHaveBeenCalledTimes(1);\n          expect(spy.mock.calls[0][0]).toBe('saved');\n          expect(spy.mock.calls[0][1]).toBe(975);\n          fs.unlinkSync(file);\n          done();\n        });\n      });","file":"unit/server/tts/flite/synthesizer.spec.js","skipped":false,"dir":"test"},{"name":"creates a new instance of tts","suites":["TTS","constructor()"],"updatePoint":{"line":4,"column":39,"index":129},"line":4,"code":"    test('creates a new instance of tts', () => {\n      const tts = new Tts({}, 'flite');\n      expect(tts).toBeInstanceOf(Tts);\n    });","file":"unit/server/tts/tts.spec.js","skipped":false,"dir":"test"},{"name":"returns error provider does not exist or not yet supported","suites":["TTS","init()"],"updatePoint":{"line":10,"column":68,"index":330},"line":10,"code":"    test('returns error provider does not exist or not yet supported', () => {\n      const tts = new Tts({}, 'fake-provider');\n      expect(tts.init()).toBeFalsy();\n    });","file":"unit/server/tts/tts.spec.js","skipped":false,"dir":"test"},{"name":"initializes the TTS synthesizer","suites":["TTS","init()"],"updatePoint":{"line":14,"column":41,"index":476},"line":14,"code":"    test('initializes the TTS synthesizer', () => {\n      const tts = new Tts({}, 'flite');\n      expect(tts.init(() => null)).toBeTruthy();\n    });","file":"unit/server/tts/tts.spec.js","skipped":false,"dir":"test"},{"name":"forwards buffer audio file to the client","suites":["TTS","forward()"],"updatePoint":{"line":20,"column":50,"index":672},"line":20,"code":"    test('forwards buffer audio file to the client', () => {\n      const tts = new Tts({}, '');\n      tts.synthesizer = {\n        default: {\n          save: jest.fn()\n        }\n      };\n      tts.socket = {\n        emit: jest.fn()\n      };\n      tts.forward({\n        text: 'Hello',\n        isFinalAnswer: true\n      });\n      expect(tts.synthesizer.default.save.mock.calls[0][0]).toBe('Hello');\n    });","file":"unit/server/tts/tts.spec.js","skipped":false,"dir":"test"},{"name":"shifts the queue","suites":["TTS","onSaved()"],"updatePoint":{"line":38,"column":26,"index":1090},"line":38,"code":"    test('shifts the queue', async () => {\n      const tts = new Tts({}, 'flite');\n      tts.forward = jest.fn();\n      tts.speeches.push('Hello', 'Hello again');\n      setTimeout(() => {\n        tts.em.emit('saved', 300);\n      }, 300);\n      expect(tts.speeches.length).toBe(2);\n      await tts.onSaved();\n      expect(tts.forward).toHaveBeenCalledTimes(1);\n      expect(tts.speeches.length).toBe(1);\n    });","file":"unit/server/tts/tts.spec.js","skipped":false,"dir":"test"},{"name":"fixes Flite ","suites":["TTS","add()"],"updatePoint":{"line":52,"column":22,"index":1531},"line":52,"code":"    test('fixes Flite ', async () => {\n      const tts = new Tts({}, 'flite');\n      tts.forward = jest.fn();\n      expect(tts.add('Hello', true)[0].text.substr('Hello'.length)).toBe(' ');\n    });","file":"unit/server/tts/tts.spec.js","skipped":false,"dir":"test"},{"name":"adds speech to the queue ","suites":["TTS","add()"],"updatePoint":{"line":57,"column":35,"index":1741},"line":57,"code":"    test('adds speech to the queue ', async () => {\n      const tts = new Tts({}, 'flite');\n      tts.forward = jest.fn();\n      tts.speeches.push('Hello');\n      expect(tts.add('Hello again').length).toBe(2);\n    });","file":"unit/server/tts/tts.spec.js","skipped":false,"dir":"test"},{"name":"forwards speech latest speech","suites":["TTS","add()"],"updatePoint":{"line":63,"column":39,"index":1963},"line":63,"code":"    test('forwards speech latest speech', async () => {\n      const tts = new Tts({}, 'flite');\n      tts.forward = jest.fn();\n      tts.add('Hello');\n      expect(tts.forward).toHaveBeenCalledTimes(1);\n    });","file":"unit/server/tts/tts.spec.js","skipped":false,"dir":"test"}]}