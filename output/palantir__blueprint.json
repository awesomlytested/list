{"repo":"palantir/blueprint","url":"https://github.com/palantir/blueprint","branch":"develop","configs":[{"package":"@blueprintjs/core","lang":"ts","dir":"packages/core/test","framework":"mocha","pattern":"**/*.{js,ts}"},{"package":"@blueprintjs/datetime","lang":"ts","dir":"packages/datetime/test","framework":"mocha","pattern":"**/*.{js,ts}"},{"package":"@blueprintjs/eslint-plugin","lang":"ts","dir":"packages/eslint-plugin/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@blueprintjs/icons","lang":"ts","dir":"packages/icons/test","framework":"mocha","pattern":"**/*.{js,ts}"},{"package":"@blueprintjs/popover2","lang":"ts","dir":"packages/popover2/test","framework":"mocha","pattern":"**/*.{js,ts}"},{"package":"@blueprintjs/select","lang":"ts","dir":"packages/select/test","framework":"mocha","pattern":"**/*.{js,ts}"},{"package":"@blueprintjs/stylelint-plugin","lang":"js","dir":"packages/stylelint-plugin/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@blueprintjs/table","lang":"ts","dir":"packages/table/test","framework":"mocha","pattern":"**/*.{js,ts}"},{"package":"@blueprintjs/timezone","lang":"ts","dir":"packages/timezone/test","framework":"mocha","pattern":"**/*.{js,ts}"},{"package":"@blueprintjs/tslint-config","lang":"js","dir":"packages/tslint-config/test","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"removes only from curated denylist when supplied 1 argument","suites":["Props","removeNonHTMLProps"],"updatePoint":{"line":39,"column":71},"line":39,"code":"        it(\"removes only from curated denylist when supplied 1 argument\", () => {\n            assert.deepEqual(removeNonHTMLProps(props), {\n                apple: true,\n                banana: true,\n                cat: true,\n            });\n        });","file":"common/propsTests.ts","skipped":false,"dir":"packages/core/test"},{"name":"removes only from the supplied array when supplied 2 arguments","suites":["Props","removeNonHTMLProps"],"updatePoint":{"line":47,"column":74},"line":47,"code":"        it(\"removes only from the supplied array when supplied 2 arguments\", () => {\n            assert.deepEqual(removeNonHTMLProps(props, [\"apple\", \"banana\"]), {\n                cat: true,\n                containerRef: true,\n                elementRef: true,\n                icon: true,\n                intent: true,\n                round: true,\n                text: true,\n            });\n        });","file":"common/propsTests.ts","skipped":false,"dir":"packages/core/test"},{"name":"removes from the curated denylist and the supplied array when shouldMerge=true","suites":["Props","removeNonHTMLProps"],"updatePoint":{"line":59,"column":90},"line":59,"code":"        it(\"removes from the curated denylist and the supplied array when shouldMerge=true\", () => {\n            assert.deepEqual(removeNonHTMLProps(props, [\"apple\", \"banana\"], true), { cat: true });\n        });","file":"common/propsTests.ts","skipped":false,"dir":"packages/core/test"},{"name":"getOppositePosition returns opposite","suites":["Popper utils"],"updatePoint":{"line":23,"column":44},"line":23,"code":"    it(\"getOppositePosition returns opposite\", () => {\n        [\n            [\"top\", \"bottom\"],\n            [\"left\", \"right\"],\n        ].map(([a, b]) => {\n            expect(getOppositePosition(a as Position)).to.equal(b);\n            expect(getOppositePosition(b as Position)).to.equal(a);\n        });\n    });","file":"popover/popperUtilTests.ts","skipped":false,"dir":"packages/core/test"},{"name":"getAlignment returns alignment","suites":["Popper utils"],"updatePoint":{"line":33,"column":38},"line":33,"code":"    it(\"getAlignment returns alignment\", () => {\n        expect(getAlignment(\"bottom-start\")).to.equal(\"left\");\n        expect(getAlignment(\"top-end\")).to.equal(\"right\");\n        expect(getAlignment(\"left\")).to.equal(\"center\");\n    });","file":"popover/popperUtilTests.ts","skipped":false,"dir":"packages/core/test"},{"name":"right","suites":["Popper utils","arrow offset modifier shifts away from popover"],"updatePoint":{"line":40,"column":17},"line":40,"code":"        it(\"right\", () => {\n            const {\n                offsets: { popper, arrow },\n            } = arrowOffsetModifier(getPopperData(\"right\"), {});\n            expect(popper.left).to.be.greaterThan(arrow.left);\n        });","file":"popover/popperUtilTests.ts","skipped":false,"dir":"packages/core/test"},{"name":"left","suites":["Popper utils","arrow offset modifier shifts away from popover"],"updatePoint":{"line":47,"column":16},"line":47,"code":"        it(\"left\", () => {\n            const {\n                offsets: { popper, arrow },\n            } = arrowOffsetModifier(getPopperData(\"left\"), {});\n            expect(popper.left).to.be.lessThan(arrow.left);\n        });","file":"popover/popperUtilTests.ts","skipped":false,"dir":"packages/core/test"},{"name":"getOppositePlacement returns opposite","suites":["Popover2 utils"],"updatePoint":{"line":23,"column":45},"line":23,"code":"    it(\"getOppositePlacement returns opposite\", () => {\n        [\n            [\"top\", \"bottom\"],\n            [\"left\", \"right\"],\n        ].map(([a, b]) => {\n            expect(getOppositePlacement(a as BasePlacement)).to.equal(b);\n            expect(getOppositePlacement(b as BasePlacement)).to.equal(a);\n        });\n    });","file":"utilsTests.ts","skipped":false,"dir":"packages/popover2/test"},{"name":"getAlignment returns alignment","suites":["Popover2 utils"],"updatePoint":{"line":33,"column":38},"line":33,"code":"    it(\"getAlignment returns alignment\", () => {\n        expect(getAlignment(\"bottom-start\")).to.equal(\"left\");\n        expect(getAlignment(\"top-end\")).to.equal(\"right\");\n        expect(getAlignment(\"left\")).to.equal(\"center\");\n    });","file":"utilsTests.ts","skipped":false,"dir":"packages/popover2/test"},{"name":"treats null and undefined as distinctly different","suites":["ListItemsProps Utils","executeItemsEqual","itemsEqual is undefined"],"updatePoint":{"line":62,"column":65},"line":62,"code":"            it(\"treats null and undefined as distinctly different\", () => {\n                assert.isTrue(executeItemsEqual(undefined, null, null));\n                assert.isTrue(executeItemsEqual(undefined, undefined, undefined));\n                assert.isFalse(executeItemsEqual(undefined, null, undefined));\n                assert.isFalse(executeItemsEqual(undefined, undefined, null));\n            });","file":"listItemsPropsTests.ts","skipped":false,"dir":"packages/select/test"},{"name":"compares primitives correctly","suites":["ListItemsProps Utils","executeItemsEqual","itemsEqual is undefined"],"updatePoint":{"line":69,"column":45},"line":69,"code":"            it(\"compares primitives correctly\", () => {\n                assert.isTrue(executeItemsEqual(undefined, 42, 42));\n                assert.isFalse(executeItemsEqual(undefined, 42, 1337));\n\n                assert.isTrue(executeItemsEqual(undefined, \"A\", \"A\"));\n                assert.isFalse(executeItemsEqual(undefined, \"A\", \"B\"));\n            });","file":"listItemsPropsTests.ts","skipped":false,"dir":"packages/select/test"},{"name":"uses strict equality","suites":["ListItemsProps Utils","executeItemsEqual","itemsEqual is undefined"],"updatePoint":{"line":77,"column":36},"line":77,"code":"            it(\"uses strict equality\", () => {\n                assert.isTrue(executeItemsEqual(undefined, ITEM_OBJECT_A, ITEM_OBJECT_A));\n                // Duplicate objects fail strict equality test\n                assert.isFalse(executeItemsEqual(undefined, ITEM_OBJECT_A, ITEM_OBJECT_A_DUPLICATE));\n            });","file":"listItemsPropsTests.ts","skipped":false,"dir":"packages/select/test"},{"name":"treats null and undefined as distinctly different","suites":["ListItemsProps Utils","executeItemsEqual","itemsEqual is a property name"],"updatePoint":{"line":85,"column":65},"line":85,"code":"            it(\"treats null and undefined as distinctly different\", () => {\n                assert.isTrue(executeItemsEqual<IItemObject>(\"id\", null, null));\n                assert.isTrue(executeItemsEqual<IItemObject>(\"id\", undefined, undefined));\n                assert.isFalse(executeItemsEqual<IItemObject>(\"id\", null, undefined));\n                assert.isFalse(executeItemsEqual<IItemObject>(\"id\", undefined, null));\n            });","file":"listItemsPropsTests.ts","skipped":false,"dir":"packages/select/test"},{"name":"compares primitives correctly","suites":["ListItemsProps Utils","executeItemsEqual","itemsEqual is a property name"],"updatePoint":{"line":92,"column":45},"line":92,"code":"            it(\"compares primitives correctly\", () => {\n                assert.isTrue(executeItemsEqual(\"id\", ITEM_OBJECT_A, ITEM_OBJECT_A_EQUIVALENT));\n                assert.isFalse(executeItemsEqual(\"id\", ITEM_OBJECT_A, ITEM_OBJECT_B));\n            });","file":"listItemsPropsTests.ts","skipped":false,"dir":"packages/select/test"},{"name":"uses strict equality","suites":["ListItemsProps Utils","executeItemsEqual","itemsEqual is a property name"],"updatePoint":{"line":97,"column":36},"line":97,"code":"            it(\"uses strict equality\", () => {\n                assert.isTrue(executeItemsEqual(\"listOfValues\", ITEM_OBJECT_A, ITEM_OBJECT_A));\n                // \"listOfValues\" property is an array, so strict equality fails even though the\n                // arrays contain the same values.\n                assert.isFalse(executeItemsEqual(\"listOfValues\", ITEM_OBJECT_A, ITEM_OBJECT_A_DUPLICATE));\n            });","file":"listItemsPropsTests.ts","skipped":false,"dir":"packages/select/test"},{"name":"does not incorrectly compare null to a property with a null value","suites":["ListItemsProps Utils","executeItemsEqual","itemsEqual is a property name"],"updatePoint":{"line":104,"column":81},"line":104,"code":"            it(\"does not incorrectly compare null to a property with a null value\", () => {\n                assert.isFalse(executeItemsEqual<IItemObject>(\"nullField\", ITEM_OBJECT_A, null));\n            });","file":"listItemsPropsTests.ts","skipped":false,"dir":"packages/select/test"},{"name":"treats null and undefined as distinctly different","suites":["ListItemsProps Utils","executeItemsEqual","itemsEqual is a function"],"updatePoint":{"line":119,"column":65},"line":119,"code":"            it(\"treats null and undefined as distinctly different\", () => {\n                assert.isTrue(executeItemsEqual<IItemObject>(equalityComparator, null, null));\n                assert.isTrue(executeItemsEqual<IItemObject>(equalityComparator, undefined, undefined));\n                assert.isFalse(executeItemsEqual<IItemObject>(equalityComparator, null, undefined));\n                assert.isFalse(executeItemsEqual<IItemObject>(equalityComparator, undefined, null));\n\n                assert(!equalityComparator.called);\n            });","file":"listItemsPropsTests.ts","skipped":false,"dir":"packages/select/test"},{"name":"calls the function and uses its result (true)","suites":["ListItemsProps Utils","executeItemsEqual","itemsEqual is a function"],"updatePoint":{"line":128,"column":61},"line":128,"code":"            it(\"calls the function and uses its result (true)\", () => {\n                assert.isTrue(\n                    executeItemsEqual<IItemObject>(equalityComparator, ITEM_OBJECT_A, ITEM_OBJECT_A_EQUIVALENT),\n                );\n                assert(equalityComparator.calledWith(ITEM_OBJECT_A, ITEM_OBJECT_A_EQUIVALENT));\n                assert(equalityComparator.returned(true));\n            });","file":"listItemsPropsTests.ts","skipped":false,"dir":"packages/select/test"},{"name":"calls the function and uses its result (false)","suites":["ListItemsProps Utils","executeItemsEqual","itemsEqual is a function"],"updatePoint":{"line":136,"column":62},"line":136,"code":"            it(\"calls the function and uses its result (false)\", () => {\n                assert.isFalse(executeItemsEqual<IItemObject>(equalityComparator, ITEM_OBJECT_A, ITEM_OBJECT_B));\n                assert(equalityComparator.calledWith(ITEM_OBJECT_A, ITEM_OBJECT_B));\n                assert(equalityComparator.returned(false));\n            });","file":"listItemsPropsTests.ts","skipped":false,"dir":"packages/select/test"},{"name":"does not call the function if one param is null/undefined","suites":["ListItemsProps Utils","executeItemsEqual","itemsEqual is a function"],"updatePoint":{"line":142,"column":73},"line":142,"code":"            it(\"does not call the function if one param is null/undefined\", () => {\n                assert.isFalse(executeItemsEqual<IItemObject>(equalityComparator, ITEM_OBJECT_A, null));\n                assert.isFalse(executeItemsEqual<IItemObject>(equalityComparator, ITEM_OBJECT_A, undefined));\n                assert.isFalse(executeItemsEqual<IItemObject>(equalityComparator, null, ITEM_OBJECT_A));\n                assert.isFalse(executeItemsEqual<IItemObject>(equalityComparator, undefined, ITEM_OBJECT_A));\n\n                assert(!equalityComparator.called);\n            });","file":"listItemsPropsTests.ts","skipped":false,"dir":"packages/select/test"},{"name":"Returns false if no imports exist","suites":["checkImportExists"],"updatePoint":{"line":31,"column":39,"index":981},"line":31,"code":"  it(\"Returns false if no imports exist\", () => {\n    const root = postcss.parse(`.some-class { width: 10px }`);\n    expect(checkImportExists(CssSyntax.LESS, root, \"some_path\")).to.be.false;\n  });","file":"checkImportExists.test.js","skipped":false,"dir":"packages/stylelint-plugin/test"},{"name":"Returns false if imports exist but not the one we want","suites":["checkImportExists"],"updatePoint":{"line":35,"column":60,"index":1199},"line":35,"code":"  it(\"Returns false if imports exist but not the one we want\", () => {\n    const root = postcss.parse(`\n@import \"some_path1\";\n@import \"some_path2\";\n\n.some-class {\n    width: 10px;\n}\n    `);\n    expect(checkImportExists(CssSyntax.LESS, root, \"some_path\")).to.be.false;\n  });","file":"checkImportExists.test.js","skipped":false,"dir":"packages/stylelint-plugin/test"},{"name":"Returns true if our import exists","suites":["checkImportExists"],"updatePoint":{"line":46,"column":39,"index":1452},"line":46,"code":"  it(\"Returns true if our import exists\", () => {\n    const root = postcss.parse(`\n@import \"some_path1\";\n@import \"some_path2\";\n@import \"some_path\";\n.some-class {\n    width: 10px;\n}\n    `);\n    expect(checkImportExists(CssSyntax.LESS, root, \"some_path\")).to.be.true;\n  });","file":"checkImportExists.test.js","skipped":false,"dir":"packages/stylelint-plugin/test"},{"name":"Returns true if our import exists, and works with single quotes","suites":["checkImportExists"],"updatePoint":{"line":57,"column":69,"index":1754},"line":57,"code":"  it(\"Returns true if our import exists, and works with single quotes\", () => {\n    const root = postcss.parse(`\n@import 'some_path1';\n@import 'some_path2';\n@import 'some_path';\n.some-class {\n    width: 10px;\n}\n    `);\n    expect(checkImportExists(CssSyntax.LESS, root, \"some_path\")).to.be.true;\n  });","file":"checkImportExists.test.js","skipped":false,"dir":"packages/stylelint-plugin/test"},{"name":"Returns true if our sass import exists, and works with single quotes","suites":["checkImportExists"],"updatePoint":{"line":68,"column":74,"index":2061},"line":68,"code":"  it(\"Returns true if our sass import exists, and works with single quotes\", () => {\n    const root = postcss.parse(`\n@use 'some_path1';\n@use 'some_path2';\n@use 'some_path' as foo;\n.some-class {\n    width: 10px;\n}\n    `);\n    expect(checkImportExists(CssSyntax.SASS, root, \"some_path\", \"foo\")).to.be.true;\n  });","file":"checkImportExists.test.js","skipped":false,"dir":"packages/stylelint-plugin/test"},{"name":"Can match multiple paths","suites":["checkImportExists"],"updatePoint":{"line":79,"column":30,"index":2329},"line":79,"code":"  it(\"Can match multiple paths\", () => {\n    const root = postcss.parse(`\n@use 'some_path.scss';\n.some-class {\n    width: 10px;\n}\n    `);\n    expect(checkImportExists(CssSyntax.SASS, root, [\"some_path\", \"some_path.scss\"])).to.be.true;\n  });","file":"checkImportExists.test.js","skipped":false,"dir":"packages/stylelint-plugin/test"},{"name":"Handles less references","suites":["checkImportExists"],"updatePoint":{"line":88,"column":29,"index":2569},"line":88,"code":"  it(\"Handles less references\", () => {\n    const root = postcss.parse(`@import (reference) \"some_path\";`);\n    expect(checkImportExists(CssSyntax.LESS, root, \"some_path\")).to.be.true;\n  });","file":"checkImportExists.test.js","skipped":false,"dir":"packages/stylelint-plugin/test"},{"name":"Accepts valid colors","suites":["isHexColor"],"updatePoint":{"line":27,"column":26,"index":872},"line":27,"code":"  it(\"Accepts valid colors\", () => {\n    expect(isHexColor(\"#FFFFFF\")).to.be.true;\n    expect(isHexColor(\"#abABab\")).to.be.true;\n    expect(isHexColor(\"#abc\")).to.be.true;\n    expect(isHexColor(\"#ABc\")).to.be.true;\n  });","file":"hexColor.test.js","skipped":false,"dir":"packages/stylelint-plugin/test"},{"name":"Rejects invalid colors","suites":["isHexColor"],"updatePoint":{"line":33,"column":28,"index":1095},"line":33,"code":"  it(\"Rejects invalid colors\", () => {\n    expect(isHexColor(\"FFFFFF\")).to.be.false;\n    expect(isHexColor(\"#FFFFFX\")).to.be.false;\n    expect(isHexColor(\"#\")).to.be.false;\n    expect(isHexColor(\"#abcde\")).to.be.false;\n    expect(isHexColor(\"#FFx\")).to.be.false;\n  });","file":"hexColor.test.js","skipped":false,"dir":"packages/stylelint-plugin/test"},{"name":"Uppercases hex colors","suites":["normalizeHexColor"],"updatePoint":{"line":42,"column":27,"index":1405},"line":42,"code":"  it(\"Uppercases hex colors\", () => {\n    expect(normalizeHexColor(\"#ffaabb\")).to.be.eq(\"#FFAABB\");\n  });","file":"hexColor.test.js","skipped":false,"dir":"packages/stylelint-plugin/test"},{"name":"Converts three letter hexes into six letter hexes","suites":["normalizeHexColor"],"updatePoint":{"line":45,"column":55,"index":1539},"line":45,"code":"  it(\"Converts three letter hexes into six letter hexes\", () => {\n    expect(normalizeHexColor(\"#ABC\")).to.be.eq(\"#AABBCC\");\n  });","file":"hexColor.test.js","skipped":false,"dir":"packages/stylelint-plugin/test"},{"name":"Converts lowercase three letter hexes into uppercase six letter hexes","suites":["normalizeHexColor"],"updatePoint":{"line":48,"column":75,"index":1690},"line":48,"code":"  it(\"Converts lowercase three letter hexes into uppercase six letter hexes\", () => {\n    expect(normalizeHexColor(\"#abc\")).to.be.eq(\"#AABBCC\");\n  });","file":"hexColor.test.js","skipped":false,"dir":"packages/stylelint-plugin/test"},{"name":"Inserts an import at the top of the file when no imports are present","suites":["insertImport"],"updatePoint":{"line":31,"column":74,"index":1001},"line":31,"code":"  it(\"Inserts an import at the top of the file when no imports are present\", () => {\n    const root = postcss.parse(`.some-class { width: 10px }`);\n    insertImport(CssSyntax.LESS, root, {\n      newline: \"\\n\"\n    }, \"some_path\");\n    expect(root.toString()).to.be.eq(`@import \"some_path\";\n\n.some-class { width: 10px }`);\n  });","file":"insertImport.test.js","skipped":false,"dir":"packages/stylelint-plugin/test"},{"name":"Inserts an import below other imports","suites":["insertImport"],"updatePoint":{"line":40,"column":43,"index":1297},"line":40,"code":"  it(\"Inserts an import below other imports\", () => {\n    const root = postcss.parse(`\n@import \"some_path1\";\n.some-class { width: 10px }`);\n    insertImport(CssSyntax.LESS, root, {\n      newline: \"\\n\"\n    }, \"some_path2\");\n    expect(root.toString()).to.be.eq(`\n@import \"some_path1\";\n@import \"some_path2\";\n.some-class { width: 10px }`);\n  });","file":"insertImport.test.js","skipped":false,"dir":"packages/stylelint-plugin/test"},{"name":"Inserts an import below the copyright header if no other imports exist","suites":["insertImport"],"updatePoint":{"line":52,"column":76,"index":1673},"line":52,"code":"  it(\"Inserts an import below the copyright header if no other imports exist\", () => {\n    const root = postcss.parse(`\n/* copyright 2021 */\n\n.some-class { width: 10px }`);\n    insertImport(CssSyntax.LESS, root, {\n      newline: \"\\n\"\n    }, \"some_path\");\n    expect(root.toString()).to.be.eq(`\n/* copyright 2021 */\n\n@import \"some_path\";\n\n.some-class { width: 10px }`);\n  });","file":"insertImport.test.js","skipped":false,"dir":"packages/stylelint-plugin/test"},{"name":"Inserts an import below other imports if the copyright header exists","suites":["insertImport"],"updatePoint":{"line":67,"column":74,"index":2046},"line":67,"code":"  it(\"Inserts an import below other imports if the copyright header exists\", () => {\n    const root = postcss.parse(`\n/* copyright 2021 */\n\n@import \"some_path1\";\n@import \"some_path2\";\n\n.some-class { width: 10px }`);\n    insertImport(CssSyntax.LESS, root, {\n      newline: \"\\n\"\n    }, \"some_path3\");\n    expect(root.toString()).to.be.eq(`\n/* copyright 2021 */\n\n@import \"some_path1\";\n@import \"some_path2\";\n@import \"some_path3\";\n\n.some-class { width: 10px }`);\n  });","file":"insertImport.test.js","skipped":false,"dir":"packages/stylelint-plugin/test"},{"name":"Inserts a sass import below other sass imports if the copyright header exists","suites":["insertImport"],"updatePoint":{"line":87,"column":83,"index":2519},"line":87,"code":"  it(\"Inserts a sass import below other sass imports if the copyright header exists\", () => {\n    const root = postcss.parse(`\n/* copyright 2021 */\n\n@use \"some_path1\";\n@use \"some_path2\";\n\n.some-class { width: 10px }`);\n    insertImport(CssSyntax.SASS, root, {\n      newline: \"\\n\"\n    }, \"some_path3\", \"foo\");\n    expect(root.toString()).to.be.eq(`\n/* copyright 2021 */\n\n@use \"some_path1\";\n@use \"some_path2\";\n@use \"some_path3\" as foo;\n\n.some-class { width: 10px }`);\n  });","file":"insertImport.test.js","skipped":false,"dir":"packages/stylelint-plugin/test"},{"name":"Doesn't treat media queries as imports","suites":["insertImport"],"updatePoint":{"line":107,"column":44,"index":2952},"line":107,"code":"  it(\"Doesn't treat media queries as imports\", () => {\n    const root = postcss.parse(`\n@media only screen and (max-width: 600px) {\n    body {\n        background-color: lightblue;\n    }\n}\n\n.some-class { width: 10px }\n    `);\n    insertImport(CssSyntax.LESS, root, {\n      newline: \"\\n\"\n    }, \"some_path\");\n    expect(root.toString()).to.be.eq(`@import \"some_path\";\n\n@media only screen and (max-width: 600px) {\n    body {\n        background-color: lightblue;\n    }\n}\n\n.some-class { width: 10px }\n    `);\n  });","file":"insertImport.test.js","skipped":false,"dir":"packages/stylelint-plugin/test"},{"name":"Warns when blueprint color literal is used (1)","suites":["no-color-literal"],"updatePoint":{"line":30,"column":52,"index":1016},"line":30,"code":"  it(\"Warns when blueprint color literal is used (1)\", async () => {\n    const result = await stylelint.lint({\n      files: \"test/fixtures/no-color-literal/bp-hex-literal-1.scss\",\n      config\n    });\n    expect(result.errored).to.be.true;\n    const warnings = result.results[0].warnings;\n    expect(warnings).lengthOf(1);\n    expect(warnings[0].line).to.be.eq(2, \"line number\");\n    expect(warnings[0].column).to.be.eq(10, \"col number\");\n  });","file":"no-color-literal.test.js","skipped":false,"dir":"packages/stylelint-plugin/test"},{"name":"Warns when blueprint color literal is used (2)","suites":["no-color-literal"],"updatePoint":{"line":41,"column":52,"index":1461},"line":41,"code":"  it(\"Warns when blueprint color literal is used (2)\", async () => {\n    const result = await stylelint.lint({\n      files: \"test/fixtures/no-color-literal/bp-hex-literal-2.scss\",\n      config\n    });\n    expect(result.errored).to.be.true;\n    const warnings = result.results[0].warnings;\n    expect(warnings).lengthOf(1);\n    expect(warnings[0].line).to.be.eq(5, \"line number\");\n    expect(warnings[0].column).to.be.eq(21, \"col number\");\n  });","file":"no-color-literal.test.js","skipped":false,"dir":"packages/stylelint-plugin/test"},{"name":"Doesn't warn when non-blueprint color literal is used","suites":["no-color-literal"],"updatePoint":{"line":52,"column":59,"index":1913},"line":52,"code":"  it(\"Doesn't warn when non-blueprint color literal is used\", async () => {\n    const result = await stylelint.lint({\n      files: \"test/fixtures/no-color-literal/non-bp-hex-literal.scss\",\n      config\n    });\n    expect(result.errored).to.be.false;\n    const warnings = result.results[0].warnings;\n    expect(warnings).lengthOf(0);\n  });","file":"no-color-literal.test.js","skipped":false,"dir":"packages/stylelint-plugin/test"},{"name":"Warns when .bp3 is present","suites":["no-prefix-literal"],"updatePoint":{"line":34,"column":32,"index":1056},"line":34,"code":"  it(\"Warns when .bp3 is present\", async () => {\n    const result = await stylelint.lint({\n      files: \"test/fixtures/no-prefix-literal/contains-bp3.scss\",\n      config\n    });\n    expect(result.errored).to.be.true;\n    const warnings = result.results[0].warnings;\n    expect(warnings).lengthOf(1);\n    expect(warnings[0].line).to.be.eq(1);\n    expect(warnings[0].column).to.be.eq(2);\n  });","file":"no-prefix-literal.test.js","skipped":false,"dir":"packages/stylelint-plugin/test"},{"name":"Warns when .bp3 is present (CSS modules)","suites":["no-prefix-literal"],"updatePoint":{"line":45,"column":46,"index":1462},"line":45,"code":"  it(\"Warns when .bp3 is present (CSS modules)\", async () => {\n    const result = await stylelint.lint({\n      files: \"test/fixtures/no-prefix-literal/contains-bp3.module.scss\",\n      config\n    });\n    expect(result.errored).to.be.true;\n    const warnings = result.results[0].warnings;\n    expect(warnings).lengthOf(1);\n    expect(warnings[0].line).to.be.eq(1);\n    expect(warnings[0].column).to.be.eq(10);\n  });","file":"no-prefix-literal.test.js","skipped":false,"dir":"packages/stylelint-plugin/test"},{"name":"Warns when nested .bp3 is present even when not first selector","suites":["no-prefix-literal"],"updatePoint":{"line":56,"column":68,"index":1898},"line":56,"code":"  it(\"Warns when nested .bp3 is present even when not first selector\", async () => {\n    const result = await stylelint.lint({\n      files: \"test/fixtures/no-prefix-literal/contains-nested-bp3.scss\",\n      config\n    });\n    expect(result.errored).to.be.true;\n    const warnings = result.results[0].warnings;\n    expect(warnings).lengthOf(1);\n    expect(warnings[0].line).to.be.eq(2);\n    expect(warnings[0].column).to.be.eq(21);\n  });","file":"no-prefix-literal.test.js","skipped":false,"dir":"packages/stylelint-plugin/test"},{"name":"Warns when nested .bp3 is present even when not first selector (CSS modules)","suites":["no-prefix-literal"],"updatePoint":{"line":67,"column":82,"index":2348},"line":67,"code":"  it(\"Warns when nested .bp3 is present even when not first selector (CSS modules)\", async () => {\n    const result = await stylelint.lint({\n      files: \"test/fixtures/no-prefix-literal/contains-nested-bp3.module.scss\",\n      config\n    });\n    expect(result.errored).to.be.true;\n    const warnings = result.results[0].warnings;\n    expect(warnings).lengthOf(1);\n    expect(warnings[0].line).to.be.eq(2);\n    expect(warnings[0].column).to.be.eq(29);\n  });","file":"no-prefix-literal.test.js","skipped":false,"dir":"packages/stylelint-plugin/test"},{"name":"Doesn't warn bp3 string is present but not as a prefix","suites":["no-prefix-literal"],"updatePoint":{"line":78,"column":60,"index":2783},"line":78,"code":"  it(\"Doesn't warn bp3 string is present but not as a prefix\", async () => {\n    const result = await stylelint.lint({\n      files: \"test/fixtures/no-prefix-literal/contains-non-prefix-bp3.scss\",\n      config\n    });\n    expect(result.errored).to.be.false;\n  });","file":"no-prefix-literal.test.js","skipped":false,"dir":"packages/stylelint-plugin/test"},{"name":"Doesn't warn bp3 string is present but not as a prefix (CSS modules)","suites":["no-prefix-literal"],"updatePoint":{"line":85,"column":74,"index":3060},"line":85,"code":"  it(\"Doesn't warn bp3 string is present but not as a prefix (CSS modules)\", async () => {\n    const result = await stylelint.lint({\n      files: \"test/fixtures/no-prefix-literal/contains-non-prefix-bp3.module.scss\",\n      config\n    });\n    expect(result.errored).to.be.false;\n    const warnings = result.results[0].warnings;\n    expect(warnings).lengthOf(0);\n  });","file":"no-prefix-literal.test.js","skipped":false,"dir":"packages/stylelint-plugin/test"},{"name":"Doesn't warn when .bp3 is not present","suites":["no-prefix-literal"],"updatePoint":{"line":94,"column":43,"index":3396},"line":94,"code":"  it(\"Doesn't warn when .bp3 is not present\", async () => {\n    const result = await stylelint.lint({\n      files: \"test/fixtures/no-prefix-literal/does-not-contain-bp3.scss\",\n      config\n    });\n    expect(result.errored).to.be.false;\n    const warnings = result.results[0].warnings;\n    expect(warnings).lengthOf(0);\n  });","file":"no-prefix-literal.test.js","skipped":false,"dir":"packages/stylelint-plugin/test"},{"name":"Doesn't warn when .bp3 is not present (CSS modules)","suites":["no-prefix-literal"],"updatePoint":{"line":103,"column":57,"index":3736},"line":103,"code":"  it(\"Doesn't warn when .bp3 is not present (CSS modules)\", async () => {\n    const result = await stylelint.lint({\n      files: \"test/fixtures/no-prefix-literal/does-not-contain-bp3.module.scss\",\n      config\n    });\n    expect(result.errored).to.be.false;\n    const warnings = result.results[0].warnings;\n    expect(warnings).lengthOf(0);\n  });","file":"no-prefix-literal.test.js","skipped":false,"dir":"packages/stylelint-plugin/test"},{"name":"Doesn't warn when .bp3 is present but lint rule is disabled","suites":["no-prefix-literal"],"updatePoint":{"line":112,"column":65,"index":4091},"line":112,"code":"  it(\"Doesn't warn when .bp3 is present but lint rule is disabled\", async () => {\n    const result = await stylelint.lint({\n      files: \"test/fixtures/no-prefix-literal/contains-bp3-disabled.scss\",\n      config\n    });\n    expect(result.errored).to.be.false;\n    const warnings = result.results[0].warnings;\n    expect(warnings).lengthOf(0);\n  });","file":"no-prefix-literal.test.js","skipped":false,"dir":"packages/stylelint-plugin/test"},{"name":"Accepts a valid secondary config","suites":["no-prefix-literal"],"updatePoint":{"line":121,"column":38,"index":4413},"line":121,"code":"  it(\"Accepts a valid secondary config\", async () => {\n    const result = await stylelint.lint({\n      files: \"test/fixtures/no-prefix-literal/contains-bp3.scss\",\n      config: {\n        plugins: [\"@blueprintjs/stylelint-plugin\"],\n        rules: {\n          \"@blueprintjs/no-prefix-literal\": [true, {\n            disableFix: true,\n            variablesImportPath: {\n              sass: \"some-path\"\n            }\n          }]\n        }\n      }\n    });\n    expect(result.results[0].invalidOptionWarnings.length).to.be.eq(0);\n  });","file":"no-prefix-literal.test.js","skipped":false,"dir":"packages/stylelint-plugin/test"},{"name":"Rejects an invalid secondary config","suites":["no-prefix-literal"],"updatePoint":{"line":138,"column":41,"index":4945},"line":138,"code":"  it(\"Rejects an invalid secondary config\", async () => {\n    const result = await stylelint.lint({\n      files: \"test/fixtures/no-prefix-literal/contains-bp3.scss\",\n      config: {\n        plugins: [\"@blueprintjs/stylelint-plugin\"],\n        rules: {\n          \"@blueprintjs/no-prefix-literal\": [true, {\n            disableFix: \"yes\",\n            variablesImportPath: {\n              scss: \"some-path\",\n              somethingElse: \"some-other-path\"\n            }\n          }]\n        }\n      }\n    });\n    expect(result.results[0].invalidOptionWarnings.length).to.be.eq(1);\n  });","file":"no-prefix-literal.test.js","skipped":false,"dir":"packages/stylelint-plugin/test"},{"name":"Works for a double bp3 selector","suites":["no-prefix-literal"],"updatePoint":{"line":156,"column":37,"index":5522},"line":156,"code":"  it(\"Works for a double bp3 selector\", async () => {\n    const result = await stylelint.lint({\n      files: \"test/fixtures/no-prefix-literal/contains-double-bp3-selector.scss\",\n      config\n    });\n    expect(result.errored).to.be.true;\n    const warnings = result.results[0].warnings;\n    expect(warnings).lengthOf(2);\n  });","file":"no-prefix-literal.test.js","skipped":false,"dir":"packages/stylelint-plugin/test"},{"name":"Replaces selector text properly","suites":["no-prefix-literal","auto-fixer"],"updatePoint":{"line":176,"column":39,"index":6094},"line":176,"code":"    it(\"Replaces selector text properly\", async () => {\n      const fixtureFilename = \"contains-bp3.scss\"; // path to the fixture we want to test\n\n      const fixturePath = path.join(__dirname, \"fixtures/no-prefix-literal\", fixtureFilename); // path to a copy of the fixture which we can allow stylelint to mutate\n\n      const mutableFixturePath = path.join(tmpDir, fixtureFilename);\n      fs.copyFileSync(fixturePath, mutableFixturePath);\n      const result = await stylelint.lint({\n        files: mutableFixturePath,\n        config,\n        fix: true\n      }); // there should be no warnings/errors since the fixer should succeed\n\n      expect(result.errored).to.be.false;\n      const warnings = result.results[0].warnings;\n      expect(warnings).lengthOf(0);\n      const fixedSourceContents = fs.readFileSync(mutableFixturePath, {\n        encoding: \"utf-8\"\n      });\n      expect(fixedSourceContents).to.contain(`@use \"@blueprintjs/core/lib/scss/variables.scss\" as bp;`);\n      expect(fixedSourceContents).to.contain(\".#{bp.$ns}-tag {\");\n    });","file":"no-prefix-literal.test.js","skipped":false,"dir":"packages/stylelint-plugin/test"},{"name":"copies cells","suites":["Clipboard"],"updatePoint":{"line":37,"column":20},"line":37,"code":"    it(\"copies cells\", async () => {\n        return Clipboard.copyCells([\n            [\"A\", \"B\", \"C\"],\n            [\"D\", \"E\", \"F\"],\n        ]);\n    });","file":"clipboardTests.ts","skipped":true,"dir":"packages/table/test"},{"name":"copies strings","suites":["Clipboard"],"updatePoint":{"line":44,"column":22},"line":44,"code":"    it(\"copies strings\", async () => {\n        return Clipboard.copyString(`\n            Hello,\n            World!\n        `);\n    });","file":"clipboardTests.ts","skipped":true,"dir":"packages/table/test"},{"name":"returns correct delta for Direction.UP","suites":["DirectionUtils","directionToDelta"],"updatePoint":{"line":24,"column":50},"line":24,"code":"        it(\"returns correct delta for Direction.UP\", () => {\n            const delta = DirectionUtils.directionToDelta(Direction.UP);\n            expect(delta).to.deep.equal({ rows: -1, cols: 0 });\n        });","file":"common/internal/directionUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns correct delta for Direction.DOWN","suites":["DirectionUtils","directionToDelta"],"updatePoint":{"line":29,"column":52},"line":29,"code":"        it(\"returns correct delta for Direction.DOWN\", () => {\n            const delta = DirectionUtils.directionToDelta(Direction.DOWN);\n            expect(delta).to.deep.equal({ rows: 1, cols: 0 });\n        });","file":"common/internal/directionUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns correct delta for Direction.LEFT","suites":["DirectionUtils","directionToDelta"],"updatePoint":{"line":34,"column":52},"line":34,"code":"        it(\"returns correct delta for Direction.LEFT\", () => {\n            const delta = DirectionUtils.directionToDelta(Direction.LEFT);\n            expect(delta).to.deep.equal({ rows: 0, cols: -1 });\n        });","file":"common/internal/directionUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns correct delta for Direction.RIGHT","suites":["DirectionUtils","directionToDelta"],"updatePoint":{"line":39,"column":53},"line":39,"code":"        it(\"returns correct delta for Direction.RIGHT\", () => {\n            const delta = DirectionUtils.directionToDelta(Direction.RIGHT);\n            expect(delta).to.deep.equal({ rows: 0, cols: +1 });\n        });","file":"common/internal/directionUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"upward","suites":["FocusedCellUtils","expandFocusedRegion","Expands to a FULL_ROWS selection"],"updatePoint":{"line":41,"column":22},"line":41,"code":"            it(\"upward\", () => {\n                const newRegion = Regions.row(PREV_ROW);\n                const result = fn(focusedCell, newRegion);\n                checkEqual(result, Regions.row(PREV_ROW, FOCUSED_COL));\n            });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"downward","suites":["FocusedCellUtils","expandFocusedRegion","Expands to a FULL_ROWS selection"],"updatePoint":{"line":47,"column":24},"line":47,"code":"            it(\"downward\", () => {\n                const newRegion = Regions.row(NEXT_ROW);\n                const result = fn(focusedCell, newRegion);\n                checkEqual(result, Regions.row(FOCUSED_ROW, NEXT_ROW));\n            });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"same row","suites":["FocusedCellUtils","expandFocusedRegion","Expands to a FULL_ROWS selection"],"updatePoint":{"line":53,"column":24},"line":53,"code":"            it(\"same row\", () => {\n                const newRegion = Regions.row(FOCUSED_ROW);\n                const result = fn(focusedCell, newRegion);\n                checkEqual(result, Regions.row(FOCUSED_ROW, FOCUSED_COL));\n            });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"leftward","suites":["FocusedCellUtils","expandFocusedRegion","Expands to a FULL_COLUMNS selection"],"updatePoint":{"line":61,"column":24},"line":61,"code":"            it(\"leftward\", () => {\n                const newRegion = Regions.column(PREV_COL);\n                const result = fn(focusedCell, newRegion);\n                checkEqual(result, Regions.column(PREV_COL, FOCUSED_COL));\n            });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"rightward","suites":["FocusedCellUtils","expandFocusedRegion","Expands to a FULL_COLUMNS selection"],"updatePoint":{"line":67,"column":25},"line":67,"code":"            it(\"rightward\", () => {\n                const newRegion = Regions.column(NEXT_COL);\n                const result = fn(focusedCell, newRegion);\n                checkEqual(result, Regions.column(FOCUSED_COL, NEXT_COL));\n            });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"same column","suites":["FocusedCellUtils","expandFocusedRegion","Expands to a FULL_COLUMNS selection"],"updatePoint":{"line":73,"column":27},"line":73,"code":"            it(\"same column\", () => {\n                const newRegion = Regions.column(FOCUSED_COL);\n                const result = fn(focusedCell, newRegion);\n                checkEqual(result, Regions.column(FOCUSED_COL, FOCUSED_COL));\n            });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"toward top-left","suites":["FocusedCellUtils","expandFocusedRegion","Expands to a CELLS selection"],"updatePoint":{"line":81,"column":31},"line":81,"code":"            it(\"toward top-left\", () => {\n                const newRegion = Regions.cell(PREV_ROW, PREV_COL);\n                const result = fn(focusedCell, newRegion);\n                checkEqual(result, Regions.cell(PREV_ROW, PREV_COL, FOCUSED_ROW, FOCUSED_COL));\n            });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"toward top","suites":["FocusedCellUtils","expandFocusedRegion","Expands to a CELLS selection"],"updatePoint":{"line":87,"column":26},"line":87,"code":"            it(\"toward top\", () => {\n                const newRegion = Regions.cell(FOCUSED_ROW, PREV_COL);\n                const result = fn(focusedCell, newRegion);\n                checkEqual(result, Regions.cell(FOCUSED_ROW, PREV_COL, FOCUSED_ROW, FOCUSED_COL));\n            });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"toward top-right","suites":["FocusedCellUtils","expandFocusedRegion","Expands to a CELLS selection"],"updatePoint":{"line":93,"column":32},"line":93,"code":"            it(\"toward top-right\", () => {\n                const newRegion = Regions.cell(PREV_ROW, NEXT_COL);\n                const result = fn(focusedCell, newRegion);\n                checkEqual(result, Regions.cell(PREV_ROW, FOCUSED_COL, FOCUSED_ROW, NEXT_COL));\n            });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"toward right","suites":["FocusedCellUtils","expandFocusedRegion","Expands to a CELLS selection"],"updatePoint":{"line":99,"column":28},"line":99,"code":"            it(\"toward right\", () => {\n                const newRegion = Regions.cell(FOCUSED_ROW, NEXT_COL);\n                const result = fn(focusedCell, newRegion);\n                checkEqual(result, Regions.cell(FOCUSED_ROW, FOCUSED_COL, FOCUSED_ROW, NEXT_COL));\n            });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"toward bottom-right","suites":["FocusedCellUtils","expandFocusedRegion","Expands to a CELLS selection"],"updatePoint":{"line":105,"column":35},"line":105,"code":"            it(\"toward bottom-right\", () => {\n                const newRegion = Regions.cell(NEXT_ROW, NEXT_COL);\n                const result = fn(focusedCell, newRegion);\n                checkEqual(result, Regions.cell(FOCUSED_ROW, FOCUSED_COL, NEXT_ROW, NEXT_COL));\n            });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"toward bottom","suites":["FocusedCellUtils","expandFocusedRegion","Expands to a CELLS selection"],"updatePoint":{"line":111,"column":29},"line":111,"code":"            it(\"toward bottom\", () => {\n                const newRegion = Regions.cell(NEXT_ROW, FOCUSED_COL);\n                const result = fn(focusedCell, newRegion);\n                checkEqual(result, Regions.cell(FOCUSED_ROW, FOCUSED_COL, NEXT_ROW, FOCUSED_COL));\n            });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"toward bottom-left","suites":["FocusedCellUtils","expandFocusedRegion","Expands to a CELLS selection"],"updatePoint":{"line":117,"column":34},"line":117,"code":"            it(\"toward bottom-left\", () => {\n                const newRegion = Regions.cell(NEXT_ROW, PREV_COL);\n                const result = fn(focusedCell, newRegion);\n                checkEqual(result, Regions.cell(FOCUSED_ROW, PREV_COL, NEXT_ROW, FOCUSED_COL));\n            });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"toward left","suites":["FocusedCellUtils","expandFocusedRegion","Expands to a CELLS selection"],"updatePoint":{"line":123,"column":27},"line":123,"code":"            it(\"toward left\", () => {\n                const newRegion = Regions.cell(FOCUSED_ROW, PREV_COL);\n                const result = fn(focusedCell, newRegion);\n                checkEqual(result, Regions.cell(FOCUSED_ROW, PREV_COL, FOCUSED_ROW, FOCUSED_COL));\n            });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"Expands to a FULL_TABLE selection","suites":["FocusedCellUtils","expandFocusedRegion","Expands to a CELLS selection"],"updatePoint":{"line":130,"column":45},"line":130,"code":"        it(\"Expands to a FULL_TABLE selection\", () => {\n            const newRegion = Regions.table();\n            const result = fn(focusedCell, newRegion);\n            checkEqual(result, Regions.table());\n        });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"always returns `undefined` if selectedRegions is empty","suites":["FocusedCellUtils","getFocusedOrLastSelectedIndex"],"updatePoint":{"line":148,"column":66},"line":148,"code":"        it(\"always returns `undefined` if selectedRegions is empty\", () => {\n            const focusedCell = FocusedCellUtils.toFullCoordinates({ row: 0, col: 0 });\n            expect(fn([], undefined)).to.equal(undefined);\n            expect(fn([], focusedCell)).to.equal(undefined);\n        });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns selectedRegions's last index if focused cell not defined","suites":["FocusedCellUtils","getFocusedOrLastSelectedIndex"],"updatePoint":{"line":154,"column":76},"line":154,"code":"        it(\"returns selectedRegions's last index if focused cell not defined\", () => {\n            const selectedRegions = [Regions.row(0), Regions.row(1), Regions.row(3)];\n            const lastIndex = selectedRegions.length - 1;\n            expect(fn(selectedRegions, undefined)).to.deep.equal(lastIndex);\n        });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns focusSelectionIndex if focused cell is defined","suites":["FocusedCellUtils","getFocusedOrLastSelectedIndex"],"updatePoint":{"line":160,"column":66},"line":160,"code":"        it(\"returns focusSelectionIndex if focused cell is defined\", () => {\n            const INDEX = 1;\n            const selectedRegions = [Regions.row(0), Regions.row(1), Regions.row(3)];\n            const focusedCell = { row: 0, col: 0, focusSelectionIndex: INDEX };\n            expect(fn(selectedRegions, focusedCell)).to.deep.equal(INDEX);\n        });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns undefined if enableFocusedCell=false","suites":["FocusedCellUtils","getInitialFocusedCell"],"updatePoint":{"line":173,"column":56},"line":173,"code":"        it(\"returns undefined if enableFocusedCell=false\", () => {\n            const focusedCell = FocusedCellUtils.getInitialFocusedCell(\n                false,\n                FOCUSED_CELL_FROM_PROPS,\n                FOCUSED_CELL_FROM_STATE,\n                SELECTED_REGIONS,\n            );\n            expect(focusedCell).to.be.undefined;\n        });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns the focusedCellFromProps if defined","suites":["FocusedCellUtils","getInitialFocusedCell"],"updatePoint":{"line":183,"column":55},"line":183,"code":"        it(\"returns the focusedCellFromProps if defined\", () => {\n            const focusedCell = FocusedCellUtils.getInitialFocusedCell(\n                true,\n                FOCUSED_CELL_FROM_PROPS,\n                FOCUSED_CELL_FROM_STATE,\n                SELECTED_REGIONS,\n            );\n            expect(focusedCell).to.deep.equal(FOCUSED_CELL_FROM_PROPS);\n        });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns the focusedCellFromState if focusedCellFromProps not defined","suites":["FocusedCellUtils","getInitialFocusedCell"],"updatePoint":{"line":193,"column":80},"line":193,"code":"        it(\"returns the focusedCellFromState if focusedCellFromProps not defined\", () => {\n            const focusedCell = FocusedCellUtils.getInitialFocusedCell(\n                true,\n                undefined,\n                FOCUSED_CELL_FROM_STATE,\n                SELECTED_REGIONS,\n            );\n            expect(focusedCell).to.deep.equal(FOCUSED_CELL_FROM_STATE);\n        });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns the focused cell for the last selected region if focusedCell not provided","suites":["FocusedCellUtils","getInitialFocusedCell"],"updatePoint":{"line":203,"column":93},"line":203,"code":"        it(\"returns the focused cell for the last selected region if focusedCell not provided\", () => {\n            const focusedCell = FocusedCellUtils.getInitialFocusedCell(true, undefined, undefined, SELECTED_REGIONS);\n            const lastIndex = SELECTED_REGIONS.length - 1;\n            const expectedFocusedCell = {\n                ...Regions.getFocusCellCoordinatesFromRegion(SELECTED_REGIONS[lastIndex]),\n                focusSelectionIndex: lastIndex,\n            };\n            expect(focusedCell).to.deep.equal(expectedFocusedCell);\n        });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns cell (0, 0) if nothing else is defined","suites":["FocusedCellUtils","getInitialFocusedCell"],"updatePoint":{"line":213,"column":58},"line":213,"code":"        it(\"returns cell (0, 0) if nothing else is defined\", () => {\n            const focusedCell = FocusedCellUtils.getInitialFocusedCell(true, undefined, undefined, []);\n            const expectedFocusedCell = {\n                col: 0,\n                focusSelectionIndex: 0,\n                row: 0,\n            };\n            expect(focusedCell).to.deep.equal(expectedFocusedCell);\n        });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns true if focused cell at region top and inside region","suites":["FocusedCellUtils","itFocusedCellAtRegion___","isFocusedCellAtRegionTop","CELLS region"],"updatePoint":{"line":243,"column":80},"line":243,"code":"                it(\"returns true if focused cell at region top and inside region\", () => {\n                    const focusedCell = FocusedCellUtils.toFullCoordinates({\n                        row: ROW_START,\n                        col: COL_START,\n                    });\n                    expect(fn(cellRegion, focusedCell)).to.be.true;\n                });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns true if focused cell at region top and not inside region","suites":["FocusedCellUtils","itFocusedCellAtRegion___","isFocusedCellAtRegionTop","CELLS region"],"updatePoint":{"line":251,"column":84},"line":251,"code":"                it(\"returns true if focused cell at region top and not inside region\", () => {\n                    const focusedCell = FocusedCellUtils.toFullCoordinates({\n                        row: ROW_START,\n                        col: COL_END + 1,\n                    });\n                    expect(fn(cellRegion, focusedCell)).to.be.true;\n                });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns false if focused cell not at region top","suites":["FocusedCellUtils","itFocusedCellAtRegion___","isFocusedCellAtRegionTop","CELLS region"],"updatePoint":{"line":259,"column":67},"line":259,"code":"                it(\"returns false if focused cell not at region top\", () => {\n                    const focusedCell = FocusedCellUtils.toFullCoordinates({\n                        row: ROW_START + 1,\n                        col: COL_START,\n                    });\n                    expect(fn(cellRegion, focusedCell)).to.be.false;\n                });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"always returns false","suites":["FocusedCellUtils","itFocusedCellAtRegion___","isFocusedCellAtRegionTop","FULL_COLUMNS region"],"updatePoint":{"line":269,"column":40},"line":269,"code":"                it(\"always returns false\", () => {\n                    const focusedCell1 = FocusedCellUtils.toFullCoordinates({\n                        row: ROW_START,\n                        col: COL_START,\n                    });\n                    const focusedCell2 = FocusedCellUtils.toFullCoordinates({\n                        row: ROW_START,\n                        col: COL_END + 1,\n                    });\n                    const focusedCell3 = FocusedCellUtils.toFullCoordinates({\n                        row: ROW_START + 1,\n                        col: COL_START,\n                    });\n                    expect(fn(columnRegion, focusedCell1)).to.be.false;\n                    expect(fn(columnRegion, focusedCell2)).to.be.false;\n                    expect(fn(columnRegion, focusedCell3)).to.be.false;\n                });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns true if focused cell at region top and inside region","suites":["FocusedCellUtils","itFocusedCellAtRegion___","isFocusedCellAtRegionTop","FULL_ROWS region"],"updatePoint":{"line":289,"column":80},"line":289,"code":"                it(\"returns true if focused cell at region top and inside region\", () => {\n                    const focusedCell = FocusedCellUtils.toFullCoordinates({\n                        row: ROW_START,\n                        col: COL_START,\n                    });\n                    expect(fn(rowRegion, focusedCell)).to.be.true;\n                });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns false if focused cell not at region top","suites":["FocusedCellUtils","itFocusedCellAtRegion___","isFocusedCellAtRegionTop","FULL_ROWS region"],"updatePoint":{"line":297,"column":67},"line":297,"code":"                it(\"returns false if focused cell not at region top\", () => {\n                    const focusedCell = FocusedCellUtils.toFullCoordinates({\n                        row: ROW_START + 1,\n                        col: COL_START,\n                    });\n                    expect(fn(rowRegion, focusedCell)).to.be.false;\n                });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"always returns false","suites":["FocusedCellUtils","itFocusedCellAtRegion___","isFocusedCellAtRegionTop","FULL_TABLE region"],"updatePoint":{"line":307,"column":40},"line":307,"code":"                it(\"always returns false\", () => {\n                    const focusedCell1 = FocusedCellUtils.toFullCoordinates({ row: 0, col: 0 });\n                    const focusedCell2 = FocusedCellUtils.toFullCoordinates({\n                        row: ROW_START,\n                        col: COL_START,\n                    });\n                    expect(fn(tableRegion, focusedCell1)).to.be.false;\n                    expect(fn(tableRegion, focusedCell2)).to.be.false;\n                });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns true if focused cell at region bottom and inside region","suites":["FocusedCellUtils","itFocusedCellAtRegion___","isFocusedCellAtRegionBottom","CELLS region"],"updatePoint":{"line":323,"column":83},"line":323,"code":"                it(\"returns true if focused cell at region bottom and inside region\", () => {\n                    const focusedCell = FocusedCellUtils.toFullCoordinates({\n                        row: ROW_END,\n                        col: COL_START,\n                    });\n                    expect(fn(cellRegion, focusedCell)).to.be.true;\n                });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns true if focused cell at region bottom and not inside region","suites":["FocusedCellUtils","itFocusedCellAtRegion___","isFocusedCellAtRegionBottom","CELLS region"],"updatePoint":{"line":331,"column":87},"line":331,"code":"                it(\"returns true if focused cell at region bottom and not inside region\", () => {\n                    const focusedCell = FocusedCellUtils.toFullCoordinates({\n                        row: ROW_END,\n                        col: COL_END + 1,\n                    });\n                    expect(fn(cellRegion, focusedCell)).to.be.true;\n                });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns false if focused cell not at region bottom","suites":["FocusedCellUtils","itFocusedCellAtRegion___","isFocusedCellAtRegionBottom","CELLS region"],"updatePoint":{"line":339,"column":70},"line":339,"code":"                it(\"returns false if focused cell not at region bottom\", () => {\n                    const focusedCell = FocusedCellUtils.toFullCoordinates({\n                        row: ROW_END - 1,\n                        col: COL_START,\n                    });\n                    expect(fn(cellRegion, focusedCell)).to.be.false;\n                });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"always returns false","suites":["FocusedCellUtils","itFocusedCellAtRegion___","isFocusedCellAtRegionBottom","FULL_COLUMNS region"],"updatePoint":{"line":349,"column":40},"line":349,"code":"                it(\"always returns false\", () => {\n                    const focusedCell1 = FocusedCellUtils.toFullCoordinates({\n                        row: ROW_END,\n                        col: COL_START,\n                    });\n                    const focusedCell2 = FocusedCellUtils.toFullCoordinates({\n                        row: ROW_END,\n                        col: COL_END + 1,\n                    });\n                    const focusedCell3 = FocusedCellUtils.toFullCoordinates({\n                        row: ROW_END - 1,\n                        col: COL_START,\n                    });\n                    expect(fn(columnRegion, focusedCell1)).to.be.false;\n                    expect(fn(columnRegion, focusedCell2)).to.be.false;\n                    expect(fn(columnRegion, focusedCell3)).to.be.false;\n                });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns true if focused cell at region bottom and inside region","suites":["FocusedCellUtils","itFocusedCellAtRegion___","isFocusedCellAtRegionBottom","FULL_ROWS region"],"updatePoint":{"line":369,"column":83},"line":369,"code":"                it(\"returns true if focused cell at region bottom and inside region\", () => {\n                    const focusedCell = FocusedCellUtils.toFullCoordinates({\n                        row: ROW_END,\n                        col: COL_START,\n                    });\n                    expect(fn(rowRegion, focusedCell)).to.be.true;\n                });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns false if focused cell not at region bottom","suites":["FocusedCellUtils","itFocusedCellAtRegion___","isFocusedCellAtRegionBottom","FULL_ROWS region"],"updatePoint":{"line":377,"column":70},"line":377,"code":"                it(\"returns false if focused cell not at region bottom\", () => {\n                    const focusedCell = FocusedCellUtils.toFullCoordinates({\n                        row: ROW_END + 1,\n                        col: COL_START,\n                    });\n                    expect(fn(rowRegion, focusedCell)).to.be.false;\n                });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"always returns false","suites":["FocusedCellUtils","itFocusedCellAtRegion___","isFocusedCellAtRegionBottom","FULL_TABLE region"],"updatePoint":{"line":387,"column":40},"line":387,"code":"                it(\"always returns false\", () => {\n                    const focusedCell1 = FocusedCellUtils.toFullCoordinates({ row: 0, col: 0 });\n                    const focusedCell2 = FocusedCellUtils.toFullCoordinates({\n                        row: ROW_END,\n                        col: COL_START,\n                    });\n                    expect(fn(tableRegion, focusedCell1)).to.be.false;\n                    expect(fn(tableRegion, focusedCell2)).to.be.false;\n                });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns true if focused cell at region left and inside region","suites":["FocusedCellUtils","itFocusedCellAtRegion___","isFocusedCellAtRegionLeft","CELLS region"],"updatePoint":{"line":403,"column":81},"line":403,"code":"                it(\"returns true if focused cell at region left and inside region\", () => {\n                    const focusedCell = FocusedCellUtils.toFullCoordinates({\n                        row: ROW_START,\n                        col: COL_START,\n                    });\n                    expect(fn(cellRegion, focusedCell)).to.be.true;\n                });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns true if focused cell at region left and not inside region","suites":["FocusedCellUtils","itFocusedCellAtRegion___","isFocusedCellAtRegionLeft","CELLS region"],"updatePoint":{"line":411,"column":85},"line":411,"code":"                it(\"returns true if focused cell at region left and not inside region\", () => {\n                    const focusedCell = FocusedCellUtils.toFullCoordinates({\n                        row: ROW_END + 1,\n                        col: COL_START,\n                    });\n                    expect(fn(cellRegion, focusedCell)).to.be.true;\n                });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns false if focused cell not at region left","suites":["FocusedCellUtils","itFocusedCellAtRegion___","isFocusedCellAtRegionLeft","CELLS region"],"updatePoint":{"line":419,"column":68},"line":419,"code":"                it(\"returns false if focused cell not at region left\", () => {\n                    const focusedCell = FocusedCellUtils.toFullCoordinates({\n                        row: ROW_START,\n                        col: COL_START + 1,\n                    });\n                    expect(fn(cellRegion, focusedCell)).to.be.false;\n                });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns true if focused cell at region left and inside region","suites":["FocusedCellUtils","itFocusedCellAtRegion___","isFocusedCellAtRegionLeft","FULL_COLUMNS region"],"updatePoint":{"line":429,"column":81},"line":429,"code":"                it(\"returns true if focused cell at region left and inside region\", () => {\n                    const focusedCell = FocusedCellUtils.toFullCoordinates({\n                        row: ROW_START,\n                        col: COL_START,\n                    });\n                    expect(fn(columnRegion, focusedCell)).to.be.true;\n                });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns false if focused cell not at region left","suites":["FocusedCellUtils","itFocusedCellAtRegion___","isFocusedCellAtRegionLeft","FULL_COLUMNS region"],"updatePoint":{"line":437,"column":68},"line":437,"code":"                it(\"returns false if focused cell not at region left\", () => {\n                    const focusedCell = FocusedCellUtils.toFullCoordinates({\n                        row: ROW_START,\n                        col: COL_START + 1,\n                    });\n                    expect(fn(columnRegion, focusedCell)).to.be.false;\n                });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"always returns false","suites":["FocusedCellUtils","itFocusedCellAtRegion___","isFocusedCellAtRegionLeft","FULL_ROWS region"],"updatePoint":{"line":447,"column":40},"line":447,"code":"                it(\"always returns false\", () => {\n                    const focusedCell1 = FocusedCellUtils.toFullCoordinates({\n                        row: ROW_START,\n                        col: COL_START,\n                    });\n                    const focusedCell2 = FocusedCellUtils.toFullCoordinates({\n                        row: ROW_END + 1,\n                        col: COL_START,\n                    });\n                    const focusedCell3 = FocusedCellUtils.toFullCoordinates({\n                        row: ROW_START,\n                        col: COL_START + 1,\n                    });\n                    expect(fn(rowRegion, focusedCell1)).to.be.false;\n                    expect(fn(rowRegion, focusedCell2)).to.be.false;\n                    expect(fn(rowRegion, focusedCell3)).to.be.false;\n                });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"always returns false","suites":["FocusedCellUtils","itFocusedCellAtRegion___","isFocusedCellAtRegionLeft","FULL_TABLE region"],"updatePoint":{"line":467,"column":40},"line":467,"code":"                it(\"always returns false\", () => {\n                    const focusedCell1 = FocusedCellUtils.toFullCoordinates({ row: 0, col: 0 });\n                    const focusedCell2 = FocusedCellUtils.toFullCoordinates({\n                        row: ROW_START,\n                        col: COL_START,\n                    });\n                    expect(fn(tableRegion, focusedCell1)).to.be.false;\n                    expect(fn(tableRegion, focusedCell2)).to.be.false;\n                });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns true if focused cell at region right and inside region","suites":["FocusedCellUtils","itFocusedCellAtRegion___","isFocusedCellAtRegionRight","CELLS region"],"updatePoint":{"line":483,"column":82},"line":483,"code":"                it(\"returns true if focused cell at region right and inside region\", () => {\n                    const focusedCell = FocusedCellUtils.toFullCoordinates({\n                        row: ROW_START,\n                        col: COL_END,\n                    });\n                    expect(fn(cellRegion, focusedCell)).to.be.true;\n                });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns true if focused cell at region right and not inside region","suites":["FocusedCellUtils","itFocusedCellAtRegion___","isFocusedCellAtRegionRight","CELLS region"],"updatePoint":{"line":491,"column":86},"line":491,"code":"                it(\"returns true if focused cell at region right and not inside region\", () => {\n                    const focusedCell = FocusedCellUtils.toFullCoordinates({\n                        row: ROW_END + 1,\n                        col: COL_END,\n                    });\n                    expect(fn(cellRegion, focusedCell)).to.be.true;\n                });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns false if focused cell not at region right","suites":["FocusedCellUtils","itFocusedCellAtRegion___","isFocusedCellAtRegionRight","CELLS region"],"updatePoint":{"line":499,"column":69},"line":499,"code":"                it(\"returns false if focused cell not at region right\", () => {\n                    const focusedCell = FocusedCellUtils.toFullCoordinates({\n                        row: ROW_START,\n                        col: COL_END - 1,\n                    });\n                    expect(fn(cellRegion, focusedCell)).to.be.false;\n                });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns true if focused cell at region right and inside region","suites":["FocusedCellUtils","itFocusedCellAtRegion___","isFocusedCellAtRegionRight","FULL_COLUMNS region"],"updatePoint":{"line":509,"column":82},"line":509,"code":"                it(\"returns true if focused cell at region right and inside region\", () => {\n                    const focusedCell = FocusedCellUtils.toFullCoordinates({\n                        row: ROW_START,\n                        col: COL_END,\n                    });\n                    expect(fn(columnRegion, focusedCell)).to.be.true;\n                });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns false if focused cell not at region right","suites":["FocusedCellUtils","itFocusedCellAtRegion___","isFocusedCellAtRegionRight","FULL_COLUMNS region"],"updatePoint":{"line":517,"column":69},"line":517,"code":"                it(\"returns false if focused cell not at region right\", () => {\n                    const focusedCell = FocusedCellUtils.toFullCoordinates({\n                        row: ROW_START,\n                        col: COL_END - 1,\n                    });\n                    expect(fn(columnRegion, focusedCell)).to.be.false;\n                });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"always returns false","suites":["FocusedCellUtils","itFocusedCellAtRegion___","isFocusedCellAtRegionRight","FULL_ROWS region"],"updatePoint":{"line":527,"column":40},"line":527,"code":"                it(\"always returns false\", () => {\n                    const focusedCell1 = FocusedCellUtils.toFullCoordinates({\n                        row: ROW_START,\n                        col: COL_END,\n                    });\n                    const focusedCell2 = FocusedCellUtils.toFullCoordinates({\n                        row: ROW_END + 1,\n                        col: COL_END,\n                    });\n                    const focusedCell3 = FocusedCellUtils.toFullCoordinates({\n                        row: ROW_START,\n                        col: COL_END - 1,\n                    });\n                    expect(fn(rowRegion, focusedCell1)).to.be.false;\n                    expect(fn(rowRegion, focusedCell2)).to.be.false;\n                    expect(fn(rowRegion, focusedCell3)).to.be.false;\n                });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"always returns false","suites":["FocusedCellUtils","itFocusedCellAtRegion___","isFocusedCellAtRegionRight","FULL_TABLE region"],"updatePoint":{"line":547,"column":40},"line":547,"code":"                it(\"always returns false\", () => {\n                    const focusedCell1 = FocusedCellUtils.toFullCoordinates({ row: 0, col: 0 });\n                    const focusedCell2 = FocusedCellUtils.toFullCoordinates({\n                        row: ROW_START,\n                        col: COL_END,\n                    });\n                    expect(fn(tableRegion, focusedCell1)).to.be.false;\n                    expect(fn(tableRegion, focusedCell2)).to.be.false;\n                });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"applies focusSelectionIndex=0 by default","suites":["FocusedCellUtils","toFullCoordinates"],"updatePoint":{"line":561,"column":52},"line":561,"code":"        it(\"applies focusSelectionIndex=0 by default\", () => {\n            const cellCoords: ICellCoordinates = { row: 2, col: 3 };\n            const result = FocusedCellUtils.toFullCoordinates(cellCoords);\n            expect(result).to.deep.equal({ ...result, focusSelectionIndex: 0 });\n        });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"applies a custom focusSelectionIndex if provided","suites":["FocusedCellUtils","toFullCoordinates"],"updatePoint":{"line":567,"column":60},"line":567,"code":"        it(\"applies a custom focusSelectionIndex if provided\", () => {\n            const cellCoords: ICellCoordinates = { row: 2, col: 3 };\n            const INDEX = 1;\n            const result = FocusedCellUtils.toFullCoordinates(cellCoords, INDEX);\n            expect(result).to.deep.equal({ ...result, focusSelectionIndex: INDEX });\n        });","file":"common/internal/focusedCellUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns false for non-Mac platforms","suites":["platformUtils","isMac"],"updatePoint":{"line":23,"column":47},"line":23,"code":"        it(\"returns false for non-Mac platforms\", () => {\n            expect(PlatformUtils.isMac(\"Win32\")).to.be.false;\n            expect(PlatformUtils.isMac(\"linux\")).to.be.false;\n        });","file":"common/internal/platformUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns true for Mac platforms","suites":["platformUtils","isMac"],"updatePoint":{"line":28,"column":42},"line":28,"code":"        it(\"returns true for Mac platforms\", () => {\n            expect(PlatformUtils.isMac(\"Mac\")).to.be.true;\n            expect(PlatformUtils.isMac(\"iPhone\")).to.be.true;\n            expect(PlatformUtils.isMac(\"iPod\")).to.be.true;\n            expect(PlatformUtils.isMac(\"iPad\")).to.be.true;\n        });","file":"common/internal/platformUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns true if CTRL key pressed","suites":["platformUtils","isModKeyPressed","on non-Mac platform"],"updatePoint":{"line":40,"column":48},"line":40,"code":"            it(\"returns true if CTRL key pressed\", () => {\n                const fakeEvent: any = { metaKey: false, ctrlKey: true };\n                expect(PlatformUtils.isModKeyPressed(fakeEvent, PLATFORM)).to.be.true;\n            });","file":"common/internal/platformUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns false if META key pressed","suites":["platformUtils","isModKeyPressed","on non-Mac platform"],"updatePoint":{"line":45,"column":49},"line":45,"code":"            it(\"returns false if META key pressed\", () => {\n                const fakeEvent: any = { metaKey: true, ctrlKey: false };\n                expect(PlatformUtils.isModKeyPressed(fakeEvent, PLATFORM)).to.be.false;\n            });","file":"common/internal/platformUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns true if both CTRL and META keys pressed","suites":["platformUtils","isModKeyPressed","on non-Mac platform"],"updatePoint":{"line":50,"column":63},"line":50,"code":"            it(\"returns true if both CTRL and META keys pressed\", () => {\n                const fakeEvent: any = { metaKey: true, ctrlKey: true };\n                expect(PlatformUtils.isModKeyPressed(fakeEvent, PLATFORM)).to.be.true;\n            });","file":"common/internal/platformUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns true if META key pressed","suites":["platformUtils","isModKeyPressed","on Mac platform"],"updatePoint":{"line":59,"column":48},"line":59,"code":"            it(\"returns true if META key pressed\", () => {\n                const fakeEvent: any = { metaKey: true, ctrlKey: false };\n                expect(PlatformUtils.isModKeyPressed(fakeEvent, PLATFORM)).to.be.true;\n            });","file":"common/internal/platformUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns false if CTRL key pressed","suites":["platformUtils","isModKeyPressed","on Mac platform"],"updatePoint":{"line":64,"column":49},"line":64,"code":"            it(\"returns false if CTRL key pressed\", () => {\n                const fakeEvent: any = { metaKey: false, ctrlKey: true };\n                expect(PlatformUtils.isModKeyPressed(fakeEvent, PLATFORM)).to.be.false;\n            });","file":"common/internal/platformUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns true if both CTRL and META keys pressed","suites":["platformUtils","isModKeyPressed","on Mac platform"],"updatePoint":{"line":69,"column":63},"line":69,"code":"            it(\"returns true if both CTRL and META keys pressed\", () => {\n                const fakeEvent: any = { metaKey: true, ctrlKey: true };\n                expect(PlatformUtils.isModKeyPressed(fakeEvent, PLATFORM)).to.be.true;\n            });","file":"common/internal/platformUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"on Direction.UP","suites":["SelectionUtils","resizeRegion","when focusedCell is defined","CELLS region"],"updatePoint":{"line":62,"column":35},"line":62,"code":"                it(\"on Direction.UP\", () => {\n                    expect(fn(region, Direction.UP, focusedCellTop)).to.deep.equal(regionShrunkenBottom);\n                    expect(fn(region, Direction.UP, focusedCellBottom)).to.deep.equal(regionExpandedTop);\n                    expect(fn(region, Direction.UP, focusedCellLeft)).to.deep.equal(regionExpandedTop);\n                    expect(fn(region, Direction.UP, focusedCellRight)).to.deep.equal(regionExpandedTop);\n\n                    const result = fn(singleCellRegion, Direction.UP, singleCellRegionFocusedCell);\n                    expect(result).to.deep.equal(singleCellRegionExpandedTop);\n                });","file":"common/internal/selectionUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"on Direction.DOWN","suites":["SelectionUtils","resizeRegion","when focusedCell is defined","CELLS region"],"updatePoint":{"line":72,"column":37},"line":72,"code":"                it(\"on Direction.DOWN\", () => {\n                    expect(fn(region, Direction.DOWN, focusedCellTop)).to.deep.equal(regionExpandedBottom);\n                    expect(fn(region, Direction.DOWN, focusedCellBottom)).to.deep.equal(regionShrunkenTop);\n                    expect(fn(region, Direction.DOWN, focusedCellLeft)).to.deep.equal(regionExpandedBottom);\n                    expect(fn(region, Direction.DOWN, focusedCellRight)).to.deep.equal(regionExpandedBottom);\n\n                    const result = fn(singleCellRegion, Direction.DOWN, singleCellRegionFocusedCell);\n                    expect(result).to.deep.equal(singleCellRegionExpandedBottom);\n                });","file":"common/internal/selectionUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"on Direction.LEFT","suites":["SelectionUtils","resizeRegion","when focusedCell is defined","CELLS region"],"updatePoint":{"line":82,"column":37},"line":82,"code":"                it(\"on Direction.LEFT\", () => {\n                    expect(fn(region, Direction.LEFT, focusedCellTop)).to.deep.equal(regionExpandedLeft);\n                    expect(fn(region, Direction.LEFT, focusedCellBottom)).to.deep.equal(regionExpandedLeft);\n                    expect(fn(region, Direction.LEFT, focusedCellLeft)).to.deep.equal(regionShrunkenRight);\n                    expect(fn(region, Direction.LEFT, focusedCellRight)).to.deep.equal(regionExpandedLeft);\n\n                    const result = fn(singleCellRegion, Direction.LEFT, singleCellRegionFocusedCell);\n                    expect(result).to.deep.equal(singleCellRegionExpandedLeft);\n                });","file":"common/internal/selectionUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"on Direction.RIGHT","suites":["SelectionUtils","resizeRegion","when focusedCell is defined","CELLS region"],"updatePoint":{"line":92,"column":38},"line":92,"code":"                it(\"on Direction.RIGHT\", () => {\n                    expect(fn(region, Direction.RIGHT, focusedCellTop)).to.deep.equal(regionExpandedRight);\n                    expect(fn(region, Direction.RIGHT, focusedCellBottom)).to.deep.equal(regionExpandedRight);\n                    expect(fn(region, Direction.RIGHT, focusedCellLeft)).to.deep.equal(regionExpandedRight);\n                    expect(fn(region, Direction.RIGHT, focusedCellRight)).to.deep.equal(regionShrunkenLeft);\n\n                    const result = fn(singleCellRegion, Direction.RIGHT, singleCellRegionFocusedCell);\n                    expect(result).to.deep.equal(singleCellRegionExpandedRight);\n                });","file":"common/internal/selectionUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"on Direction.UP","suites":["SelectionUtils","resizeRegion","when focusedCell is defined","FULL_COLUMNS region"],"updatePoint":{"line":120,"column":35},"line":120,"code":"                it(\"on Direction.UP\", () => {\n                    expect(fn(region, Direction.UP, focusedCellLeft)).to.deep.equal(region);\n                    expect(fn(region, Direction.UP, focusedCellRight)).to.deep.equal(region);\n                });","file":"common/internal/selectionUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"on Direction.DOWN","suites":["SelectionUtils","resizeRegion","when focusedCell is defined","FULL_COLUMNS region"],"updatePoint":{"line":125,"column":37},"line":125,"code":"                it(\"on Direction.DOWN\", () => {\n                    expect(fn(region, Direction.DOWN, focusedCellLeft)).to.deep.equal(region);\n                    expect(fn(region, Direction.DOWN, focusedCellRight)).to.deep.equal(region);\n                });","file":"common/internal/selectionUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"on Direction.LEFT","suites":["SelectionUtils","resizeRegion","when focusedCell is defined","FULL_COLUMNS region"],"updatePoint":{"line":130,"column":37},"line":130,"code":"                it(\"on Direction.LEFT\", () => {\n                    expect(fn(region, Direction.LEFT, focusedCellLeft)).to.deep.equal(regionShrunkenRight);\n                    expect(fn(region, Direction.LEFT, focusedCellRight)).to.deep.equal(regionExpandedLeft);\n\n                    const result = fn(singleColumnRegion, Direction.LEFT, singleColumnRegionFocusedCell);\n                    expect(result).to.deep.equal(singleColumnRegionExpandedLeft);\n                });","file":"common/internal/selectionUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"on Direction.RIGHT","suites":["SelectionUtils","resizeRegion","when focusedCell is defined","FULL_COLUMNS region"],"updatePoint":{"line":138,"column":38},"line":138,"code":"                it(\"on Direction.RIGHT\", () => {\n                    expect(fn(region, Direction.RIGHT, focusedCellLeft)).to.deep.equal(regionExpandedRight);\n                    expect(fn(region, Direction.RIGHT, focusedCellRight)).to.deep.equal(regionShrunkenLeft);\n\n                    const result = fn(singleColumnRegion, Direction.RIGHT, singleColumnRegionFocusedCell);\n                    expect(result).to.deep.equal(singleColumnRegionExpandedRight);\n                });","file":"common/internal/selectionUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"on Direction.UP","suites":["SelectionUtils","resizeRegion","when focusedCell is defined","FULL_ROWS region"],"updatePoint":{"line":164,"column":35},"line":164,"code":"                it(\"on Direction.UP\", () => {\n                    expect(fn(region, Direction.UP, focusedCellTop)).to.deep.equal(regionShrunkenBottom);\n                    expect(fn(region, Direction.UP, focusedCellBottom)).to.deep.equal(regionExpandedTop);\n\n                    const result = fn(singleRowRegion, Direction.UP, singleRowRegionFocusedCell);\n                    expect(result).to.deep.equal(singleRowRegionExpandedTop);\n                });","file":"common/internal/selectionUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"on Direction.DOWN","suites":["SelectionUtils","resizeRegion","when focusedCell is defined","FULL_ROWS region"],"updatePoint":{"line":172,"column":37},"line":172,"code":"                it(\"on Direction.DOWN\", () => {\n                    expect(fn(region, Direction.DOWN, focusedCellTop)).to.deep.equal(regionExpandedBottom);\n                    expect(fn(region, Direction.DOWN, focusedCellBottom)).to.deep.equal(regionShrunkenTop);\n\n                    const result = fn(singleRowRegion, Direction.DOWN, singleRowRegionFocusedCell);\n                    expect(result).to.deep.equal(singleRowRegionExpandedBottom);\n                });","file":"common/internal/selectionUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"on Direction.LEFT","suites":["SelectionUtils","resizeRegion","when focusedCell is defined","FULL_ROWS region"],"updatePoint":{"line":180,"column":37},"line":180,"code":"                it(\"on Direction.LEFT\", () => {\n                    expect(fn(region, Direction.LEFT, focusedCellTop)).to.deep.equal(region);\n                    expect(fn(region, Direction.LEFT, focusedCellBottom)).to.deep.equal(region);\n                });","file":"common/internal/selectionUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"on Direction.RIGHT","suites":["SelectionUtils","resizeRegion","when focusedCell is defined","FULL_ROWS region"],"updatePoint":{"line":185,"column":38},"line":185,"code":"                it(\"on Direction.RIGHT\", () => {\n                    expect(fn(region, Direction.RIGHT, focusedCellTop)).to.deep.equal(region);\n                    expect(fn(region, Direction.RIGHT, focusedCellBottom)).to.deep.equal(region);\n                });","file":"common/internal/selectionUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns the same region instance unchanged","suites":["SelectionUtils","resizeRegion","when focusedCell is defined","FULL_TABLE region"],"updatePoint":{"line":192,"column":62},"line":192,"code":"                it(\"returns the same region instance unchanged\", () => {\n                    const region = Regions.table();\n                    const focusedCell = getFocusedCell(0, 0);\n                    expect(fn(region, Direction.UP, focusedCell)).to.equal(region);\n                    expect(fn(region, Direction.DOWN, focusedCell)).to.equal(region);\n                    expect(fn(region, Direction.LEFT, focusedCell)).to.equal(region);\n                    expect(fn(region, Direction.RIGHT, focusedCell)).to.equal(region);\n                });","file":"common/internal/selectionUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"expands CELLS regions horizontally or vertically","suites":["SelectionUtils","resizeRegion","when focusedCell is not defined"],"updatePoint":{"line":204,"column":64},"line":204,"code":"            it(\"expands CELLS regions horizontally or vertically\", () => {\n                const cellRegion = Regions.cell(ROW_START, COL_START, ROW_END, COL_END);\n                const cellExpectedUp = Regions.cell(ROW_START - 1, COL_START, ROW_END, COL_END);\n                const cellExpectedDown = Regions.cell(ROW_START, COL_START, ROW_END + 1, COL_END);\n                const cellExpectedLeft = Regions.cell(ROW_START, COL_START - 1, ROW_END, COL_END);\n                const cellExpectedRight = Regions.cell(ROW_START, COL_START, ROW_END, COL_END + 1);\n\n                expect(fn(cellRegion, Direction.UP)).to.deep.equal(cellExpectedUp);\n                expect(fn(cellRegion, Direction.DOWN)).to.deep.equal(cellExpectedDown);\n                expect(fn(cellRegion, Direction.LEFT)).to.deep.equal(cellExpectedLeft);\n                expect(fn(cellRegion, Direction.RIGHT)).to.deep.equal(cellExpectedRight);\n            });","file":"common/internal/selectionUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"expands FULL_COLUMNS regions only horizontally","suites":["SelectionUtils","resizeRegion","when focusedCell is not defined"],"updatePoint":{"line":217,"column":62},"line":217,"code":"            it(\"expands FULL_COLUMNS regions only horizontally\", () => {\n                const columnRegion = Regions.column(COL_START, COL_END);\n                const columnExpectedUp = Regions.column(COL_START, COL_END);\n                const columnExpectedDown = Regions.column(COL_START, COL_END);\n                const columnExpectedLeft = Regions.column(COL_START - 1, COL_END);\n                const columnExpectedRight = Regions.column(COL_START, COL_END + 1);\n\n                expect(fn(columnRegion, Direction.UP)).to.deep.equal(columnExpectedUp);\n                expect(fn(columnRegion, Direction.DOWN)).to.deep.equal(columnExpectedDown);\n                expect(fn(columnRegion, Direction.LEFT)).to.deep.equal(columnExpectedLeft);\n                expect(fn(columnRegion, Direction.RIGHT)).to.deep.equal(columnExpectedRight);\n            });","file":"common/internal/selectionUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"expands FULL_ROWS regions only vertically","suites":["SelectionUtils","resizeRegion","when focusedCell is not defined"],"updatePoint":{"line":230,"column":57},"line":230,"code":"            it(\"expands FULL_ROWS regions only vertically\", () => {\n                const rowRegion = Regions.row(ROW_START, ROW_END);\n                const rowExpectedUp = Regions.row(ROW_START - 1, ROW_END);\n                const rowExpectedDown = Regions.row(ROW_START, ROW_END + 1);\n                const rowExpectedLeft = Regions.row(ROW_START, ROW_END);\n                const rowExpectedRight = Regions.row(ROW_START, ROW_END);\n\n                expect(fn(rowRegion, Direction.UP)).to.deep.equal(rowExpectedUp);\n                expect(fn(rowRegion, Direction.DOWN)).to.deep.equal(rowExpectedDown);\n                expect(fn(rowRegion, Direction.LEFT)).to.deep.equal(rowExpectedLeft);\n                expect(fn(rowRegion, Direction.RIGHT)).to.deep.equal(rowExpectedRight);\n            });","file":"common/internal/selectionUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns the same FULL_TABLE region instance unchanged","suites":["SelectionUtils","resizeRegion","when focusedCell is not defined"],"updatePoint":{"line":243,"column":69},"line":243,"code":"            it(\"returns the same FULL_TABLE region instance unchanged\", () => {\n                const tableRegion = Regions.table();\n\n                expect(fn(tableRegion, Direction.UP)).to.equal(tableRegion);\n                expect(fn(tableRegion, Direction.DOWN)).to.equal(tableRegion);\n                expect(fn(tableRegion, Direction.LEFT)).to.equal(tableRegion);\n                expect(fn(tableRegion, Direction.RIGHT)).to.equal(tableRegion);\n            });","file":"common/internal/selectionUtilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"accumulates offsets","suites":["Grid"],"updatePoint":{"line":28,"column":27},"line":28,"code":"    it(\"accumulates offsets\", () => {\n        const grid = new Grid(test7s, test13s);\n        expect(grid.numRows).to.equal(10);\n        expect(grid.numCols).to.equal(10);\n\n        expect(grid.getHeight()).to.equal(7 * 10);\n        expect(grid.getWidth()).to.equal(13 * 10);\n\n        const rect = grid.getCellRect(2, 3);\n        expect(rect.top).to.equal(2 * 7);\n        expect(rect.height).to.equal(7);\n        expect(rect.left).to.equal(3 * 13);\n        expect(rect.width).to.equal(13);\n    });","file":"gridTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"calculates ghost indices correctly when there are no columns or rows","suites":["Grid"],"updatePoint":{"line":43,"column":76},"line":43,"code":"    it(\"calculates ghost indices correctly when there are no columns or rows\", () => {\n        const grid = new Grid([], [], 0);\n        const rect = new Rect(Grid.DEFAULT_GHOST_WIDTH, 0, Grid.DEFAULT_GHOST_WIDTH * 4, Grid.DEFAULT_GHOST_HEIGHT * 5);\n\n        const { columnIndexStart, columnIndexEnd } = grid.getColumnIndicesInRect(rect, true);\n        expect(columnIndexStart).to.equal(2);\n        expect(columnIndexEnd).to.equal(5);\n\n        const { rowIndexStart, rowIndexEnd } = grid.getRowIndicesInRect({ rect, includeGhostCells: true });\n        expect(rowIndexStart).to.equal(1);\n        expect(rowIndexEnd).to.equal(5);\n    });","file":"gridTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"width and height are zero when there are no rows and columns","suites":["Grid"],"updatePoint":{"line":56,"column":68},"line":56,"code":"    it(\"width and height are zero when there are no rows and columns\", () => {\n        const grid = new Grid([], [], 0);\n        expect(grid.getHeight()).to.equal(0);\n        expect(grid.getWidth()).to.equal(0);\n    });","file":"gridTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"locates column indices of overlapping rect","suites":["Grid"],"updatePoint":{"line":62,"column":50},"line":62,"code":"    it(\"locates column indices of overlapping rect\", () => {\n        const grid = new Grid(test7s, test13s, 0);\n        const rect = new Rect(15, 0, 30, 0);\n        const { columnIndexStart, columnIndexEnd } = grid.getColumnIndicesInRect(rect);\n        expect(columnIndexStart).to.equal(1);\n        expect(columnIndexEnd).to.equal(3);\n\n        const mapped = grid.mapColumnsInRect(rect, () => \"X\");\n        expect(mapped).to.have.lengthOf(3);\n    });","file":"gridTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"locates row indices of overlapping rect","suites":["Grid"],"updatePoint":{"line":73,"column":47},"line":73,"code":"    it(\"locates row indices of overlapping rect\", () => {\n        const grid = new Grid(test7s, test13s, 0);\n        const rect = new Rect(0, 15, 0, 15);\n        const { rowIndexStart, rowIndexEnd } = grid.getRowIndicesInRect({ rect });\n        expect(rowIndexStart).to.equal(2);\n        expect(rowIndexEnd).to.equal(4);\n\n        const mapped = grid.mapRowsInRect(rect, () => \"X\");\n        expect(mapped).to.have.lengthOf(3);\n    });","file":"gridTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"locates all cell indices of overlapping rect","suites":["Grid"],"updatePoint":{"line":84,"column":52},"line":84,"code":"    it(\"locates all cell indices of overlapping rect\", () => {\n        const grid = new Grid(test7s, test13s, 0);\n        const rect = new Rect(15, 15, 30, 15);\n        const mapped = grid.mapCellsInRect(rect, () => \"X\");\n        expect(mapped).to.have.lengthOf(3 * 3);\n    });","file":"gridTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"column before border","suites":["Grid","border intersection behavior"],"updatePoint":{"line":92,"column":32},"line":92,"code":"        it(\"column before border\", () => {\n            const grid = new Grid(test7s, test13s, 0);\n            const rect = new Rect(25, 0, 1, 0);\n            const { columnIndexStart, columnIndexEnd } = grid.getColumnIndicesInRect(rect);\n            expect(columnIndexStart).to.equal(1);\n            expect(columnIndexEnd).to.equal(1);\n        });","file":"gridTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"column overlapping border","suites":["Grid","border intersection behavior"],"updatePoint":{"line":100,"column":37},"line":100,"code":"        it(\"column overlapping border\", () => {\n            const grid = new Grid(test7s, test13s, 0);\n            const rect = new Rect(25, 0, 2, 0);\n            const { columnIndexStart, columnIndexEnd } = grid.getColumnIndicesInRect(rect);\n            expect(columnIndexStart).to.equal(1);\n            expect(columnIndexEnd).to.equal(2);\n        });","file":"gridTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"column after border","suites":["Grid","border intersection behavior"],"updatePoint":{"line":108,"column":31},"line":108,"code":"        it(\"column after border\", () => {\n            const grid = new Grid(test7s, test13s, 0);\n            const rect = new Rect(26, 0, 13, 0);\n            const { columnIndexStart, columnIndexEnd } = grid.getColumnIndicesInRect(rect);\n            expect(columnIndexStart).to.equal(2);\n            expect(columnIndexEnd).to.equal(2);\n        });","file":"gridTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"row before border","suites":["Grid","border intersection behavior"],"updatePoint":{"line":116,"column":29},"line":116,"code":"        it(\"row before border\", () => {\n            const grid = new Grid(test7s, test13s, 0);\n            const rect = new Rect(0, 13, 0, 1);\n            const { rowIndexStart, rowIndexEnd } = grid.getRowIndicesInRect({ rect });\n            expect(rowIndexStart).to.equal(1);\n            expect(rowIndexEnd).to.equal(1);\n        });","file":"gridTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"row overlapping border","suites":["Grid","border intersection behavior"],"updatePoint":{"line":124,"column":34},"line":124,"code":"        it(\"row overlapping border\", () => {\n            const grid = new Grid(test7s, test13s, 0);\n            const rect = new Rect(0, 13, 0, 2);\n            const { rowIndexStart, rowIndexEnd } = grid.getRowIndicesInRect({ rect });\n            expect(rowIndexStart).to.equal(1);\n            expect(rowIndexEnd).to.equal(2);\n        });","file":"gridTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"row after border","suites":["Grid","border intersection behavior"],"updatePoint":{"line":132,"column":28},"line":132,"code":"        it(\"row after border\", () => {\n            const grid = new Grid(test7s, test13s, 0);\n            const rect = new Rect(0, 14, 0, 7);\n            const { rowIndexStart, rowIndexEnd } = grid.getRowIndicesInRect({ rect });\n            expect(rowIndexStart).to.equal(2);\n            expect(rowIndexEnd).to.equal(2);\n        });","file":"gridTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"bleed === 0","suites":["Grid","bleed"],"updatePoint":{"line":142,"column":23},"line":142,"code":"        it(\"bleed === 0\", () => {\n            const grid = new Grid(test7s, test13s, 0);\n            const rect = new Rect(40, 0, 30, 0);\n            const { columnIndexStart, columnIndexEnd } = grid.getColumnIndicesInRect(rect);\n            expect(columnIndexStart).to.equal(3);\n            expect(columnIndexEnd).to.equal(5);\n        });","file":"gridTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"bleed === 2","suites":["Grid","bleed"],"updatePoint":{"line":150,"column":23},"line":150,"code":"        it(\"bleed === 2\", () => {\n            const grid = new Grid(test7s, test13s, 2);\n            const rect = new Rect(40, 0, 30, 0);\n            const { columnIndexStart, columnIndexEnd } = grid.getColumnIndicesInRect(rect);\n            expect(columnIndexStart).to.equal(1);\n            expect(columnIndexEnd).to.equal(7);\n        });","file":"gridTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"bleed === 40 is clamped","suites":["Grid","bleed"],"updatePoint":{"line":158,"column":35},"line":158,"code":"        it(\"bleed === 40 is clamped\", () => {\n            const grid = new Grid(test7s, test13s, 40);\n            const rect = new Rect(40, 0, 30, 0);\n            const { columnIndexStart, columnIndexEnd } = grid.getColumnIndicesInRect(rect);\n            expect(columnIndexStart).to.equal(0);\n            expect(columnIndexEnd).to.equal(9);\n        });","file":"gridTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns display: none if region not inside grid for cells","suites":["Grid","style"],"updatePoint":{"line":168,"column":69},"line":168,"code":"        it(\"returns display: none if region not inside grid for cells\", () => {\n            const grid = new Grid(test7s, test13s);\n            const region = Regions.cell(5, 5, 10, 10);\n            const regionStyle = grid.getRegionStyle(region);\n            expect(regionStyle.display).to.equal(\"none\");\n        });","file":"gridTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns display: none if region not inside grid for columns","suites":["Grid","style"],"updatePoint":{"line":175,"column":71},"line":175,"code":"        it(\"returns display: none if region not inside grid for columns\", () => {\n            const grid = new Grid(test7s, test13s);\n            const region = Regions.column(8, 16);\n            const regionStyle = grid.getRegionStyle(region);\n            expect(regionStyle.display).to.equal(\"none\");\n        });","file":"gridTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns display: none if region not inside grid for rows","suites":["Grid","style"],"updatePoint":{"line":182,"column":68},"line":182,"code":"        it(\"returns display: none if region not inside grid for rows\", () => {\n            const grid = new Grid(test7s, test13s);\n            const region = Regions.row(8, 16);\n            const regionStyle = grid.getRegionStyle(region);\n            expect(regionStyle.display).to.equal(\"none\");\n        });","file":"gridTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"limits rows","suites":["Grid","limit"],"updatePoint":{"line":195,"column":23},"line":195,"code":"        it(\"limits rows\", () => {\n            const { rowIndexStart, rowIndexEnd } = grid.getRowIndicesInRect({ rect });\n            expect(rowIndexStart).to.equal(0);\n            expect(rowIndexEnd).to.equal(Grid.DEFAULT_MAX_ROWS);\n        });","file":"gridTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"unlimited rows","suites":["Grid","limit"],"updatePoint":{"line":201,"column":26},"line":201,"code":"        it(\"unlimited rows\", () => {\n            const { rowIndexStart, rowIndexEnd } = grid.getRowIndicesInRect({\n                includeGhostCells: false,\n                limit: 0,\n                rect,\n            });\n            expect(rowIndexStart).to.equal(0);\n            expect(rowIndexEnd).to.equal(5000 - 1);\n        });","file":"gridTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"limits columns","suites":["Grid","limit"],"updatePoint":{"line":211,"column":26},"line":211,"code":"        it(\"limits columns\", () => {\n            const { columnIndexStart, columnIndexEnd } = grid.getColumnIndicesInRect(rect);\n            expect(columnIndexStart).to.equal(0);\n            expect(columnIndexEnd).to.equal(Grid.DEFAULT_MAX_COLUMNS);\n        });","file":"gridTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"unlimited columns","suites":["Grid","limit"],"updatePoint":{"line":217,"column":29},"line":217,"code":"        it(\"unlimited columns\", () => {\n            const { columnIndexStart, columnIndexEnd } = grid.getColumnIndicesInRect(rect, false, 0);\n            expect(columnIndexStart).to.equal(0);\n            expect(columnIndexEnd).to.equal(5000 - 1);\n        });","file":"gridTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"clamps to min index","suites":["Grid","limit"],"updatePoint":{"line":224,"column":27},"line":224,"code":"    it(\"clamps to min index\", () => {\n        const grid = new Grid(test7s, test13s, 0);\n        const rect = new Rect(-10, 0, 15, 0);\n        const { columnIndexStart, columnIndexEnd } = grid.getColumnIndicesInRect(rect);\n        expect(columnIndexStart).to.equal(0);\n        expect(columnIndexEnd).to.equal(0);\n    });","file":"gridTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"clamps to max index","suites":["Grid","limit"],"updatePoint":{"line":232,"column":27},"line":232,"code":"    it(\"clamps to max index\", () => {\n        const grid = new Grid(test7s, test13s, 0);\n        const rect = new Rect(125, 0, 100, 0);\n        const { columnIndexStart, columnIndexEnd } = grid.getColumnIndicesInRect(rect);\n        expect(columnIndexStart).to.equal(9);\n        expect(columnIndexEnd).to.equal(9);\n    });","file":"gridTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"wraps AnyRects","suites":["Rect"],"updatePoint":{"line":22,"column":22},"line":22,"code":"    it(\"wraps AnyRects\", () => {\n        const anyRect: ClientRect = {\n            height: 40,\n            left: 20,\n            top: 10,\n            width: 30,\n        } as any;\n\n        const rect = Rect.union(anyRect, anyRect);\n        expect(rect).to.be.instanceof(Rect);\n        expect(rect.top).to.equal(10);\n    });","file":"rectTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"produces styles","suites":["Rect"],"updatePoint":{"line":35,"column":23},"line":35,"code":"    it(\"produces styles\", () => {\n        const rect = new Rect(20, 10, 30, 40);\n        expect(rect.style().position).to.equal(\"absolute\");\n        expect(rect.sizeStyle().width).to.equal(\"30px\");\n    });","file":"rectTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"unions","suites":["Rect"],"updatePoint":{"line":41,"column":14},"line":41,"code":"    it(\"unions\", () => {\n        const rect = Rect.union(new Rect(0, 0, 10, 10), new Rect(5, 5, 30, 1));\n        expect(rect.top).to.equal(0);\n        expect(rect.left).to.equal(0);\n        expect(rect.width).to.equal(35);\n        expect(rect.height).to.equal(10);\n    });","file":"rectTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"checks containment","suites":["Rect"],"updatePoint":{"line":49,"column":26},"line":49,"code":"    it(\"checks containment\", () => {\n        const rect = new Rect(20, 10, 30, 40);\n        expect(rect.containsX(19)).to.be.false;\n        expect(rect.containsX(20)).to.be.true;\n        expect(rect.containsX(30)).to.be.true;\n        expect(rect.containsX(50)).to.be.true;\n        expect(rect.containsX(51)).to.be.false;\n\n        expect(rect.containsY(9)).to.be.false;\n        expect(rect.containsY(10)).to.be.true;\n        expect(rect.containsY(30)).to.be.true;\n        expect(rect.containsY(50)).to.be.true;\n        expect(rect.containsY(51)).to.be.false;\n    });","file":"rectTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"equals","suites":["Rect"],"updatePoint":{"line":64,"column":14},"line":64,"code":"    it(\"equals\", () => {\n        const rect1 = new Rect(10, 20, 30, 40);\n        const rect2 = new Rect(10, 20, 30, 40);\n        const rect3 = new Rect(40, 30, 20, 10);\n\n        expect(rect1.equals(rect2)).to.be.true;\n        expect(rect2.equals(rect1)).to.be.true;\n        expect(rect1.equals(rect3)).to.be.false;\n        expect(rect3.equals(rect1)).to.be.false;\n    });","file":"rectTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"creates cell regions","suites":["Regions","factories"],"updatePoint":{"line":23,"column":32},"line":23,"code":"        it(\"creates cell regions\", () => {\n            const region = Regions.cell(0, 1, 2, 3);\n\n            expect(Regions.isValid(region)).to.be.true;\n            expect(Regions.getRegionCardinality(region)).to.equal(RegionCardinality.CELLS);\n            expect(region).to.deep.equal({\n                cols: [1, 3],\n                rows: [0, 2],\n            });\n\n            expect(Regions.cell(0, 1)).to.deep.equal(Regions.cell(0, 1, 0, 1));\n        });","file":"regionsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"creates column regions","suites":["Regions","factories"],"updatePoint":{"line":36,"column":34},"line":36,"code":"        it(\"creates column regions\", () => {\n            const region = Regions.column(7, 11);\n\n            expect(Regions.isValid(region)).to.be.true;\n            expect(Regions.getRegionCardinality(region)).to.equal(RegionCardinality.FULL_COLUMNS);\n            expect(region).to.deep.equal({\n                cols: [7, 11],\n            });\n\n            expect(Regions.column(1)).to.deep.equal(Regions.column(1, 1));\n        });","file":"regionsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"creates row regions","suites":["Regions","factories"],"updatePoint":{"line":48,"column":31},"line":48,"code":"        it(\"creates row regions\", () => {\n            const region = Regions.row(3, 14);\n\n            expect(Regions.isValid(region)).to.be.true;\n            expect(Regions.getRegionCardinality(region)).to.equal(RegionCardinality.FULL_ROWS);\n            expect(region).to.deep.equal({\n                rows: [3, 14],\n            });\n\n            expect(Regions.row(1)).to.deep.equal(Regions.row(1, 1));\n        });","file":"regionsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"adds regions","suites":["Regions","array manipulation"],"updatePoint":{"line":62,"column":24},"line":62,"code":"        it(\"adds regions\", () => {\n            const regions = [Regions.row(1, 37)];\n            const added = Regions.add(regions, Regions.column(3, 14));\n\n            expect(added).to.not.equal(regions);\n            expect(added.length).to.equal(regions.length + 1);\n            expect(Regions.lastRegionIsEqual(added, Regions.column(14, 3)));\n        });","file":"regionsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"updates regions at last index","suites":["Regions","array manipulation"],"updatePoint":{"line":71,"column":41},"line":71,"code":"        it(\"updates regions at last index\", () => {\n            const regions = [Regions.row(1, 37)];\n            const updated = Regions.update(regions, Regions.column(3, 14));\n\n            expect(updated).to.not.equal(regions);\n            expect(updated.length).to.equal(regions.length);\n            expect(Regions.lastRegionIsEqual(updated, Regions.column(14, 3)));\n        });","file":"regionsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"updates regions at specified index","suites":["Regions","array manipulation"],"updatePoint":{"line":80,"column":46},"line":80,"code":"        it(\"updates regions at specified index\", () => {\n            const INDEX = 1;\n            const regions = [Regions.row(1), Regions.column(1), Regions.cell(1, 1)];\n            const updated = Regions.update(regions, Regions.column(2), INDEX);\n\n            expect(updated).to.not.equal(regions);\n            expect(updated.length).to.equal(regions.length);\n            expect(updated[INDEX]).to.deep.equal(Regions.column(2));\n        });","file":"regionsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns false if row index out-of-bounds","suites":["Regions","isRegionValidForTable","in an NxN table","cell regions"],"updatePoint":{"line":107,"column":60},"line":107,"code":"                it(\"returns false if row index out-of-bounds\", () => {\n                    expectFalse(Regions.cell(INVALID_INDEX_LOW, VALID_INDEX_LOW), \"invalid low\");\n                    expectFalse(Regions.cell(INVALID_INDEX_HIGH, VALID_INDEX_LOW), \"invalid high\");\n                });","file":"regionsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns false if column index out-of-bounds","suites":["Regions","isRegionValidForTable","in an NxN table","cell regions"],"updatePoint":{"line":112,"column":63},"line":112,"code":"                it(\"returns false if column index out-of-bounds\", () => {\n                    expectFalse(Regions.cell(VALID_INDEX_LOW, INVALID_INDEX_LOW), \"invalid low\");\n                    expectFalse(Regions.cell(VALID_INDEX_LOW, INVALID_INDEX_HIGH), \"invalid high\");\n                });","file":"regionsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns true if both row and column indices in bounds","suites":["Regions","isRegionValidForTable","in an NxN table","cell regions"],"updatePoint":{"line":117,"column":73},"line":117,"code":"                it(\"returns true if both row and column indices in bounds\", () => {\n                    expectTrue(Regions.cell(VALID_INDEX_LOW, VALID_INDEX_LOW), \"valid low\");\n                    expectTrue(Regions.cell(VALID_INDEX_HIGH, VALID_INDEX_HIGH), \"valid high\");\n                });","file":"regionsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns false if column index out-of-bounds","suites":["Regions","isRegionValidForTable","in an NxN table","column regions"],"updatePoint":{"line":124,"column":63},"line":124,"code":"                it(\"returns false if column index out-of-bounds\", () => {\n                    expectFalse(Regions.column(INVALID_INDEX_LOW), \"invalid low\");\n                    expectFalse(Regions.column(INVALID_INDEX_HIGH), \"invalid high\");\n                });","file":"regionsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns true if both row and column indices in bounds","suites":["Regions","isRegionValidForTable","in an NxN table","column regions"],"updatePoint":{"line":129,"column":73},"line":129,"code":"                it(\"returns true if both row and column indices in bounds\", () => {\n                    expectTrue(Regions.column(VALID_INDEX_LOW), \"valid low\");\n                    expectTrue(Regions.column(VALID_INDEX_HIGH), \"valid high\");\n                });","file":"regionsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns false if row index out-of-bounds","suites":["Regions","isRegionValidForTable","in an NxN table","row regions"],"updatePoint":{"line":136,"column":60},"line":136,"code":"                it(\"returns false if row index out-of-bounds\", () => {\n                    expectFalse(Regions.row(INVALID_INDEX_LOW), \"invalid low\");\n                    expectFalse(Regions.row(INVALID_INDEX_HIGH), \"invalid high\");\n                });","file":"regionsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns true if both row and column indices in bounds","suites":["Regions","isRegionValidForTable","in an NxN table","row regions"],"updatePoint":{"line":141,"column":73},"line":141,"code":"                it(\"returns true if both row and column indices in bounds\", () => {\n                    expectTrue(Regions.row(VALID_INDEX_LOW), \"valid low\");\n                    expectTrue(Regions.row(VALID_INDEX_HIGH), \"valid high\");\n                });","file":"regionsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"always returns true","suites":["Regions","isRegionValidForTable","in an NxN table","table regions"],"updatePoint":{"line":148,"column":39},"line":148,"code":"                it(\"always returns true\", () => {\n                    expectTrue(Regions.table());\n                });","file":"regionsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"always returns false","suites":["Regions","isRegionValidForTable","in an N-row, 0-column table"],"updatePoint":{"line":158,"column":36},"line":158,"code":"            it(\"always returns false\", () => {\n                expectFalse(Regions.cell(VALID_INDEX_LOW, VALID_INDEX_LOW));\n                expectFalse(Regions.column(INVALID_INDEX_LOW));\n                expectFalse(Regions.column(VALID_INDEX_LOW));\n                expectFalse(Regions.row(INVALID_INDEX_LOW));\n                expectFalse(Regions.row(VALID_INDEX_LOW));\n                expectFalse(Regions.table());\n            });","file":"regionsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"always returns false","suites":["Regions","isRegionValidForTable","in an N-column, 0-row table"],"updatePoint":{"line":172,"column":36},"line":172,"code":"            it(\"always returns false\", () => {\n                expectFalse(Regions.cell(INVALID_INDEX_LOW, INVALID_INDEX_LOW));\n                expectFalse(Regions.column(INVALID_INDEX_LOW));\n                expectFalse(Regions.column(VALID_INDEX_LOW));\n                expectFalse(Regions.row(INVALID_INDEX_LOW));\n                expectFalse(Regions.row(VALID_INDEX_LOW));\n                expectFalse(Regions.table());\n            });","file":"regionsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"always returns false","suites":["Regions","isRegionValidForTable","in a 0-column, 0-row table"],"updatePoint":{"line":186,"column":36},"line":186,"code":"            it(\"always returns false\", () => {\n                expectFalse(Regions.cell(INVALID_INDEX_LOW, INVALID_INDEX_LOW));\n                expectFalse(Regions.cell(VALID_INDEX_LOW, VALID_INDEX_LOW));\n                expectFalse(Regions.column(INVALID_INDEX_LOW));\n                expectFalse(Regions.column(VALID_INDEX_LOW));\n                expectFalse(Regions.row(INVALID_INDEX_LOW));\n                expectFalse(Regions.row(VALID_INDEX_LOW));\n                expectFalse(Regions.table());\n            });","file":"regionsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"searches","suites":["Regions","isRegionValidForTable","in a 0-column, 0-row table"],"updatePoint":{"line":198,"column":16},"line":198,"code":"    it(\"searches\", () => {\n        const regions = [Regions.row(1, 37), Regions.column(3, 14), Regions.cell(1, 2, 3, 4)];\n\n        expect(Regions.findMatchingRegion(null, Regions.column(14, 3))).to.equal(-1);\n        expect(Regions.findMatchingRegion([], Regions.column(14, 3))).to.equal(-1);\n        expect(Regions.findMatchingRegion(regions, Regions.column(4, 14))).to.equal(-1);\n        expect(Regions.findMatchingRegion(regions, Regions.column(3, 14))).to.equal(1);\n        expect(Regions.findMatchingRegion(regions, Regions.column(14, 3))).to.equal(1);\n    });","file":"regionsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"containment","suites":["Regions","isRegionValidForTable","in a 0-column, 0-row table"],"updatePoint":{"line":208,"column":19},"line":208,"code":"    it(\"containment\", () => {\n        expect(Regions.hasFullColumn(null, 5)).to.be.false;\n        expect(Regions.hasFullColumn([Regions.row(0, 10)], 5)).to.be.false;\n        expect(Regions.hasFullColumn([Regions.column(0, 10)], 15)).to.be.false;\n        expect(Regions.hasFullColumn([Regions.column(0, 10)], 5)).to.be.true;\n\n        expect(Regions.hasFullRow(null, 5)).to.be.false;\n        expect(Regions.hasFullRow([Regions.column(0, 10)], 5)).to.be.false;\n        expect(Regions.hasFullRow([Regions.row(0, 10)], 15)).to.be.false;\n        expect(Regions.hasFullRow([Regions.row(0, 10)], 5)).to.be.true;\n    });","file":"regionsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"validates","suites":["Regions","isRegionValidForTable","in a 0-column, 0-row table"],"updatePoint":{"line":220,"column":17},"line":220,"code":"    it(\"validates\", () => {\n        expect(Regions.isValid(null)).to.be.false;\n\n        expect(Regions.isValid(Regions.column(3, 14))).to.be.true;\n        expect(Regions.isValid(Regions.column(14, 3))).to.be.true;\n        expect(Regions.isValid(Regions.column(-14, 3))).to.be.false;\n\n        expect(Regions.isValid(Regions.row(3, 14))).to.be.true;\n        expect(Regions.isValid(Regions.row(14, 3))).to.be.true;\n        expect(Regions.isValid(Regions.row(-14, 3))).to.be.false;\n    });","file":"regionsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"combines styled region groups","suites":["Regions","isRegionValidForTable","in a 0-column, 0-row table"],"updatePoint":{"line":232,"column":37},"line":232,"code":"    it(\"combines styled region groups\", () => {\n        const myGroups = [\n            {\n                className: \"my-region\",\n                regions: [Regions.column(1)],\n            },\n        ];\n\n        const joinedGroups = Regions.joinStyledRegionGroups([Regions.row(2)], myGroups, undefined);\n        expect(joinedGroups).to.have.lengthOf(2);\n        expect(joinedGroups[1].regions[0]).to.deep.equal(Regions.row(2));\n    });","file":"regionsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"iterates","suites":["Regions","isRegionValidForTable","in a 0-column, 0-row table"],"updatePoint":{"line":245,"column":16},"line":245,"code":"    it(\"iterates\", () => {\n        const hits: string[] = [];\n        const append = () => {\n            hits.push(\"X\");\n        };\n        Regions.eachUniqueFullColumn([], append);\n        expect(hits).to.have.lengthOf(0);\n\n        Regions.eachUniqueFullColumn([Regions.row(2)], append);\n        expect(hits).to.have.lengthOf(0);\n\n        Regions.eachUniqueFullColumn([Regions.row(2), Regions.column(2, 5)], append);\n        expect(hits).to.have.lengthOf(4);\n    });","file":"regionsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"enumerates cells","suites":["Regions","isRegionValidForTable","in a 0-column, 0-row table"],"updatePoint":{"line":260,"column":24},"line":260,"code":"    it(\"enumerates cells\", () => {\n        const invalid = Regions.enumerateUniqueCells(null, 3, 2);\n        expect(invalid).to.have.lengthOf(0);\n\n        const cells = Regions.enumerateUniqueCells([Regions.column(0), Regions.row(0)], 3, 2);\n        expect(cells).to.deep.equal([\n            [0, 0],\n            [0, 1],\n            [1, 0],\n            [2, 0],\n        ]);\n    });","file":"regionsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"sparsely maps cells","suites":["Regions","isRegionValidForTable","in a 0-column, 0-row table"],"updatePoint":{"line":273,"column":27},"line":273,"code":"    it(\"sparsely maps cells\", () => {\n        const cells = [\n            [0, 0],\n            [0, 1],\n            [1, 0],\n            [2, 0],\n        ] as ICellCoordinate[];\n        const sparse = Regions.sparseMapCells(cells, () => \"X\");\n        // normal deep equals doesn't work here so we use JSON.stringify\n        expect(JSON.stringify(sparse)).to.equal(\n            JSON.stringify([\n                [\"X\", \"X\"],\n                [\"X\", null],\n                [\"X\", null],\n            ]),\n        );\n    });","file":"regionsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns a deep copy of the region","suites":["Regions","clampRegion"],"updatePoint":{"line":294,"column":45},"line":294,"code":"        it(\"returns a deep copy of the region\", () => {\n            const validRegion = Regions.table();\n            const clampedRegion = fn(validRegion, 1, 1);\n            expect(clampedRegion === validRegion).to.be.false;\n        });","file":"regionsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"clamps regions whose start indices are < 0","suites":["Regions","clampRegion"],"updatePoint":{"line":300,"column":54},"line":300,"code":"        it(\"clamps regions whose start indices are < 0\", () => {\n            const cellRegion = Regions.cell(-1, 1);\n            expect(fn(cellRegion, 1, 1)).to.deep.equal(Regions.cell(0, 1));\n\n            const columnRegion = Regions.column(-1, 1);\n            expect(fn(columnRegion, 1, 1)).to.deep.equal(Regions.column(0, 1));\n\n            const rowRegion = Regions.row(-1, 1);\n            expect(fn(rowRegion, 1, 1)).to.deep.equal(Regions.row(0, 1));\n        });","file":"regionsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"clamps regions whose end indices are > max","suites":["Regions","clampRegion"],"updatePoint":{"line":311,"column":54},"line":311,"code":"        it(\"clamps regions whose end indices are > max\", () => {\n            const cellRegion = Regions.cell(0, 2);\n            expect(fn(cellRegion, 1, 1)).to.deep.equal(Regions.cell(0, 1));\n\n            const columnRegion = Regions.column(0, 2);\n            expect(fn(columnRegion, 1, 1)).to.deep.equal(Regions.column(0, 1));\n\n            const rowRegion = Regions.row(0, 2);\n            expect(fn(rowRegion, 1, 1)).to.deep.equal(Regions.row(0, 1));\n        });","file":"regionsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns a new FULL_TABLE region if provided","suites":["Regions","clampRegion"],"updatePoint":{"line":322,"column":55},"line":322,"code":"        it(\"returns a new FULL_TABLE region if provided\", () => {\n            const tableRegion = Regions.table();\n            expect(fn(tableRegion, 1, 1)).to.deep.equal(Regions.table());\n        });","file":"regionsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"copies CELLS regions","suites":["Regions","copy"],"updatePoint":{"line":329,"column":32},"line":329,"code":"        it(\"copies CELLS regions\", () => {\n            const region = Regions.cell(0, 1, 2, 3);\n            const regionCopy = Regions.cell(0, 1, 2, 3);\n            expect(Regions.copy(region)).to.deep.equal(regionCopy);\n        });","file":"regionsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"copies FULL_COLUMNS regions","suites":["Regions","copy"],"updatePoint":{"line":335,"column":39},"line":335,"code":"        it(\"copies FULL_COLUMNS regions\", () => {\n            const region = Regions.column(0, 1);\n            const regionCopy = Regions.column(0, 1);\n            expect(Regions.copy(region)).to.deep.equal(regionCopy);\n        });","file":"regionsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"copies FULL_ROWS regions","suites":["Regions","copy"],"updatePoint":{"line":341,"column":36},"line":341,"code":"        it(\"copies FULL_ROWS regions\", () => {\n            const region = Regions.row(0, 1);\n            const regionCopy = Regions.row(0, 1);\n            expect(Regions.copy(region)).to.deep.equal(regionCopy);\n        });","file":"regionsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"copies FULL_TABLE regions","suites":["Regions","copy"],"updatePoint":{"line":347,"column":37},"line":347,"code":"        it(\"copies FULL_TABLE regions\", () => {\n            const region = Regions.table();\n            const regionCopy = Regions.table();\n            expect(Regions.copy(region)).to.deep.equal(regionCopy);\n        });","file":"regionsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns new region if cardinalities are different","suites":["Regions","expandRegion"],"updatePoint":{"line":355,"column":61},"line":355,"code":"        it(\"returns new region if cardinalities are different\", () => {\n            const oldRegion = Regions.cell(0, 0);\n            const newRegion = Regions.table();\n            const result = Regions.expandRegion(oldRegion, newRegion);\n            // should have returned the newRegion instance\n            expect(result).to.equal(newRegion);\n        });","file":"regionsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"expands a FULL_ROWS region","suites":["Regions","expandRegion"],"updatePoint":{"line":363,"column":38},"line":363,"code":"        it(\"expands a FULL_ROWS region\", () => {\n            const oldRegion = Regions.row(1, 2);\n            const newRegion = Regions.row(9, 10);\n            const result = Regions.expandRegion(oldRegion, newRegion);\n            expect(result).to.deep.equal(Regions.row(1, 10));\n        });","file":"regionsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"expands a FULL_COLUMNS region","suites":["Regions","expandRegion"],"updatePoint":{"line":370,"column":41},"line":370,"code":"        it(\"expands a FULL_COLUMNS region\", () => {\n            const oldRegion = Regions.column(9, 10);\n            const newRegion = Regions.column(1, 2);\n            const result = Regions.expandRegion(oldRegion, newRegion);\n            expect(result).to.deep.equal(Regions.column(1, 10));\n        });","file":"regionsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"expands a CELLS region","suites":["Regions","expandRegion"],"updatePoint":{"line":377,"column":34},"line":377,"code":"        it(\"expands a CELLS region\", () => {\n            const oldRegion = Regions.cell(1, 2);\n            const newRegion = Regions.cell(9, 10);\n            const result = Regions.expandRegion(oldRegion, newRegion);\n            expect(result).to.deep.equal(Regions.cell(1, 2, 9, 10));\n        });","file":"regionsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"expands a FULL_TABLE region","suites":["Regions","expandRegion"],"updatePoint":{"line":384,"column":39},"line":384,"code":"        it(\"expands a FULL_TABLE region\", () => {\n            const oldRegion = Regions.table();\n            const newRegion = Regions.table();\n            const result = Regions.expandRegion(oldRegion, newRegion);\n            expect(result).to.deep.equal(Regions.table());\n        });","file":"regionsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"converts to spreadsheet-like base26","suites":["Utils","toBase26Alpha"],"updatePoint":{"line":23,"column":47},"line":23,"code":"        it(\"converts to spreadsheet-like base26\", () => {\n            expect(Utils.toBase26Alpha(0)).to.equal(\"A\");\n            expect(Utils.toBase26Alpha(25)).to.equal(\"Z\");\n            expect(Utils.toBase26Alpha(26)).to.equal(\"AA\");\n            expect(Utils.toBase26Alpha(27)).to.equal(\"AB\");\n            expect(Utils.toBase26Alpha((26 + 1) * 26 - 1)).to.equal(\"ZZ\");\n            expect(Utils.toBase26Alpha((26 + 1) * 26)).to.equal(\"AAA\");\n        });","file":"utilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"converts to spreadsheet-like base26 cell names","suites":["Utils","toBase26CellName"],"updatePoint":{"line":34,"column":58},"line":34,"code":"        it(\"converts to spreadsheet-like base26 cell names\", () => {\n            expect(Utils.toBase26CellName(0, 0)).to.equal(\"A1\");\n            expect(Utils.toBase26CellName(25, 0)).to.equal(\"A26\");\n            expect(Utils.toBase26CellName(0, 25)).to.equal(\"Z1\");\n            expect(Utils.toBase26CellName(1, 27)).to.equal(\"AB2\");\n            expect(Utils.toBase26CellName(99, (26 + 1) * 26 - 1)).to.equal(\"ZZ100\");\n            expect(Utils.toBase26CellName(998, (26 + 1) * 26)).to.equal(\"AAA999\");\n        });","file":"utilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns 0 for empty list","suites":["Utils","binarySearch"],"updatePoint":{"line":45,"column":36},"line":45,"code":"        it(\"returns 0 for empty list\", () => {\n            const arr = [] as number[];\n            const lookup = (i: number) => arr[i];\n\n            expect(Utils.binarySearch(10, 0, lookup)).to.equal(0);\n            expect(Utils.binarySearch(0, 0, lookup)).to.equal(0);\n            expect(Utils.binarySearch(-10, 0, lookup)).to.equal(0);\n        });","file":"utilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns max index if number is high","suites":["Utils","binarySearch"],"updatePoint":{"line":54,"column":47},"line":54,"code":"        it(\"returns max index if number is high\", () => {\n            const arr = [10, 20, 30, 30, 40];\n            const lookup = (i: number) => arr[i];\n\n            expect(Utils.binarySearch(1000, arr.length, lookup)).to.equal(arr.length);\n        });","file":"utilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns min index if number is low","suites":["Utils","binarySearch"],"updatePoint":{"line":61,"column":46},"line":61,"code":"        it(\"returns min index if number is low\", () => {\n            const arr = [10, 20, 30, 30, 40];\n            const lookup = (i: number) => arr[i];\n\n            expect(Utils.binarySearch(-1000, arr.length, lookup)).to.equal(0);\n        });","file":"utilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns index of exact match","suites":["Utils","binarySearch"],"updatePoint":{"line":68,"column":40},"line":68,"code":"        it(\"returns index of exact match\", () => {\n            const arr = [10, 20, 30, 30, 40];\n            const lookup = (i: number) => arr[i];\n\n            expect(Utils.binarySearch(20, arr.length, lookup)).to.equal(1);\n            expect(Utils.binarySearch(40, arr.length, lookup)).to.equal(4);\n        });","file":"utilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns lowest index of multiple exact matches","suites":["Utils","binarySearch"],"updatePoint":{"line":76,"column":58},"line":76,"code":"        it(\"returns lowest index of multiple exact matches\", () => {\n            expect(Utils.binarySearch(30, 5, (i: number) => [10, 20, 30, 30, 40][i])).to.equal(2);\n            expect(Utils.binarySearch(30, 5, (i: number) => [10, 11, 12, 30, 30][i])).to.equal(3);\n            expect(Utils.binarySearch(30, 5, (i: number) => [30, 30, 30, 50, 60][i])).to.equal(0);\n        });","file":"utilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns insertion index if no match","suites":["Utils","binarySearch"],"updatePoint":{"line":82,"column":47},"line":82,"code":"        it(\"returns insertion index if no match\", () => {\n            const arr = [10, 20, 30, 30, 40];\n            const lookup = (i: number) => arr[i];\n\n            expect(Utils.binarySearch(19, arr.length, lookup)).to.equal(1);\n            expect(Utils.binarySearch(21, arr.length, lookup)).to.equal(2);\n        });","file":"utilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns empty array for 0","suites":["Utils","times"],"updatePoint":{"line":92,"column":37},"line":92,"code":"        it(\"returns empty array for 0\", () => {\n            const arr = Utils.times(0, () => \"test\");\n            expect(arr).to.deep.equal([]);\n        });","file":"utilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"throws error for negative numbers","suites":["Utils","times"],"updatePoint":{"line":97,"column":45},"line":97,"code":"        it(\"throws error for negative numbers\", () => {\n            expect(() => Utils.times(-5, () => \"test\")).to.throw();\n        });","file":"utilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns array of correct length","suites":["Utils","times"],"updatePoint":{"line":101,"column":43},"line":101,"code":"        it(\"returns array of correct length\", () => {\n            const arr = Utils.times(4, () => \"test\");\n            expect(arr).to.deep.equal([\"test\", \"test\", \"test\", \"test\"]);\n        });","file":"utilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"works for high numbers of elements without throwing an error","suites":["Utils","times"],"updatePoint":{"line":106,"column":72},"line":106,"code":"        it(\"works for high numbers of elements without throwing an error\", () => {\n            const HUGE_NUMBER = 3e6;\n            expect(() => Utils.times(HUGE_NUMBER, () => \"test\")).to.not.throw();\n        });","file":"utilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"uses argument length","suites":["Utils","times"],"updatePoint":{"line":111,"column":32},"line":111,"code":"        it(\"uses argument length\", () => {\n            const arr = Utils.times(4, (i: number) => \"test\" + i);\n            expect(arr).to.deep.equal([\"test0\", \"test1\", \"test2\", \"test3\"]);\n        });","file":"utilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"truncates if too long","suites":["Utils","arrayOfLength"],"updatePoint":{"line":119,"column":33},"line":119,"code":"        it(\"truncates if too long\", () => {\n            const original = Utils.times(5, () => \"A\");\n            const result = Utils.arrayOfLength(original, 2, \"B\");\n\n            expect(result).to.have.lengthOf(2);\n            expect(result).to.deep.equal([\"A\", \"A\"]);\n        });","file":"utilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"expands if too short","suites":["Utils","arrayOfLength"],"updatePoint":{"line":127,"column":32},"line":127,"code":"        it(\"expands if too short\", () => {\n            const original = Utils.times(2, () => \"A\");\n            const result = Utils.arrayOfLength(original, 5, \"B\");\n\n            expect(result).to.have.lengthOf(5);\n            expect(result).to.deep.equal([\"A\", \"A\", \"B\", \"B\", \"B\"]);\n        });","file":"utilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"just copies if length is correct","suites":["Utils","arrayOfLength"],"updatePoint":{"line":135,"column":44},"line":135,"code":"        it(\"just copies if length is correct\", () => {\n            const original = Utils.times(5, () => \"A\");\n            const result = Utils.arrayOfLength(original, 5, \"B\");\n\n            expect(result).to.not.equal(original);\n            expect(result).to.have.lengthOf(5);\n            expect(result).to.deep.equal([\"A\", \"A\", \"A\", \"A\", \"A\"]);\n        });","file":"utilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"compares array lengths","suites":["Utils","assignSparseValues"],"updatePoint":{"line":147,"column":34},"line":147,"code":"        it(\"compares array lengths\", () => {\n            const defaults = Utils.times(3, () => \"A\");\n\n            expect(Utils.assignSparseValues(defaults, [\"B\"])).to.equal(defaults);\n        });","file":"utilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"overrides with sparse values","suites":["Utils","assignSparseValues"],"updatePoint":{"line":153,"column":40},"line":153,"code":"        it(\"overrides with sparse values\", () => {\n            const defaults = Utils.times(3, () => \"A\");\n            const result = Utils.assignSparseValues(defaults, [null, \"B\", null]);\n\n            expect(result).to.deep.equal([\"A\", \"B\", \"A\"]);\n        });","file":"utilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"(oldIndex: , newIndex: , length: ) => ","suites":["Utils","guideIndexToReorderedIndex","moving the thing within itself (no-op)"],"updatePoint":{"line":199,"column":102},"line":199,"code":"            it(`(oldIndex: ${oldIndex}, newIndex: ${newIndex}, length: ${length}) => ${expectedResult}`, () => {\n                const actualResult = Utils.guideIndexToReorderedIndex(oldIndex, newIndex, length);\n                expect(actualResult).to.equal(expectedResult);\n            });","file":"utilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"(oldIndex: , newIndex: , length: ) => ","suites":["Utils","reorderedIndexToGuideIndex","moving the thing two places to the left"],"updatePoint":{"line":238,"column":102},"line":238,"code":"            it(`(oldIndex: ${oldIndex}, newIndex: ${newIndex}, length: ${length}) => ${expectedResult}`, () => {\n                const actualResult = Utils.reorderedIndexToGuideIndex(oldIndex, newIndex, length);\n                expect(actualResult).to.equal(expectedResult);\n            });","file":"utilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns true for left click","suites":["Utils","isLeftClick"],"updatePoint":{"line":249,"column":39},"line":249,"code":"        it(\"returns true for left click\", () => {\n            expect(Utils.isLeftClick({ button: LEFT_BUTTON_CODE } as any as MouseEvent)).to.be.true;\n        });","file":"utilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns false for right click","suites":["Utils","isLeftClick"],"updatePoint":{"line":253,"column":41},"line":253,"code":"        it(\"returns false for right click\", () => {\n            expect(Utils.isLeftClick({ button: RIGHT_BUTTON_CODE } as any as MouseEvent)).to.be.false;\n        });","file":"utilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"when moved from index 0","suites":["Utils","reorderArray","reorders a single element properly"],"updatePoint":{"line":267,"column":39},"line":267,"code":"            it(\"when moved from index 0\", () => {\n                assertArraysEqual(Utils.reorderArray(ARRAY, FIRST_INDEX, 2), \"BCADEFG\");\n            });","file":"utilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"when moved from a middle index leftward","suites":["Utils","reorderArray","reorders a single element properly"],"updatePoint":{"line":270,"column":55},"line":270,"code":"            it(\"when moved from a middle index leftward\", () => {\n                assertArraysEqual(Utils.reorderArray(ARRAY, 3, 1), \"ADBCEFG\");\n            });","file":"utilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"when moved from a middle index rightward","suites":["Utils","reorderArray","reorders a single element properly"],"updatePoint":{"line":273,"column":56},"line":273,"code":"            it(\"when moved from a middle index rightward\", () => {\n                assertArraysEqual(Utils.reorderArray(ARRAY, 3, 5), \"ABCEFDG\");\n            });","file":"utilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"when moved from the end","suites":["Utils","reorderArray","reorders a single element properly"],"updatePoint":{"line":276,"column":39},"line":276,"code":"            it(\"when moved from the end\", () => {\n                assertArraysEqual(Utils.reorderArray(ARRAY, LAST_INDEX, LAST_INDEX - 2), \"ABCDGEF\");\n            });","file":"utilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"when moved from index 0","suites":["Utils","reorderArray","reorders multiple elements properly"],"updatePoint":{"line":282,"column":39},"line":282,"code":"            it(\"when moved from index 0\", () => {\n                assertArraysEqual(Utils.reorderArray(ARRAY, FIRST_INDEX, 2, LENGTH), \"DEABCFG\");\n            });","file":"utilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"when moved from a middle index leftward","suites":["Utils","reorderArray","reorders multiple elements properly"],"updatePoint":{"line":285,"column":55},"line":285,"code":"            it(\"when moved from a middle index leftward\", () => {\n                assertArraysEqual(Utils.reorderArray(ARRAY, 3, 1, LENGTH), \"ADEFBCG\");\n            });","file":"utilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"when moved from a middle index rightward","suites":["Utils","reorderArray","reorders multiple elements properly"],"updatePoint":{"line":288,"column":56},"line":288,"code":"            it(\"when moved from a middle index rightward\", () => {\n                assertArraysEqual(Utils.reorderArray(ARRAY, 2, 4, LENGTH), \"ABFGCDE\");\n            });","file":"utilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"when moved from the end","suites":["Utils","reorderArray","reorders multiple elements properly"],"updatePoint":{"line":291,"column":39},"line":291,"code":"            it(\"when moved from the end\", () => {\n                const fromIndex = LAST_INDEX - LENGTH + 1; // the index that yields the last LENGTH elements\n                assertArraysEqual(Utils.reorderArray(ARRAY, fromIndex, fromIndex - 2, LENGTH), \"ABEFGCD\");\n            });","file":"utilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns undefined if length < 0","suites":["Utils","reorderArray","edge cases"],"updatePoint":{"line":298,"column":47},"line":298,"code":"            it(\"returns undefined if length < 0\", () => {\n                expect(Utils.reorderArray(ARRAY, 0, 1, -1)).to.be.undefined;\n            });","file":"utilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns undefined if length > array.length","suites":["Utils","reorderArray","edge cases"],"updatePoint":{"line":301,"column":58},"line":301,"code":"            it(\"returns undefined if length > array.length\", () => {\n                expect(Utils.reorderArray(ARRAY, 0, 1, ARRAY_LENGTH + 1)).to.be.undefined;\n            });","file":"utilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns undefined if from + length > array.length","suites":["Utils","reorderArray","edge cases"],"updatePoint":{"line":304,"column":65},"line":304,"code":"            it(\"returns undefined if from + length > array.length\", () => {\n                const fromIndex = LAST_INDEX - LENGTH + 2; // one spot too far to the right\n                expect(Utils.reorderArray(ARRAY, fromIndex, fromIndex - 1, LENGTH)).to.be.undefined;\n            });","file":"utilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns an unchanged copy of the array if length === 0","suites":["Utils","reorderArray","edge cases"],"updatePoint":{"line":308,"column":70},"line":308,"code":"            it(\"returns an unchanged copy of the array if length === 0\", () => {\n                assertArraysEqual(Utils.reorderArray(ARRAY, 0, 1, 0), ARRAY_STRING);\n                assertArraysEqual(Utils.reorderArray(ARRAY, 0, 2, 0), ARRAY_STRING);\n                assertArraysEqual(Utils.reorderArray(ARRAY, 1, 3, 0), ARRAY_STRING);\n                assertArraysEqual(Utils.reorderArray(ARRAY, 3, 1, 0), ARRAY_STRING);\n                assertArraysEqual(Utils.reorderArray(ARRAY, LAST_INDEX, LAST_INDEX - 1, 0), ARRAY_STRING);\n            });","file":"utilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns an unchanged copy of the array if length === array.length","suites":["Utils","reorderArray","edge cases"],"updatePoint":{"line":315,"column":81},"line":315,"code":"            it(\"returns an unchanged copy of the array if length === array.length\", () => {\n                assertArraysEqual(Utils.reorderArray(ARRAY, 0, 1, ARRAY_LENGTH), ARRAY_STRING);\n                assertArraysEqual(Utils.reorderArray(ARRAY, 0, 2, ARRAY_LENGTH), ARRAY_STRING);\n                assertArraysEqual(Utils.reorderArray(ARRAY, 1, 3, ARRAY_LENGTH), ARRAY_STRING);\n                assertArraysEqual(Utils.reorderArray(ARRAY, 3, 1, ARRAY_LENGTH), ARRAY_STRING);\n                assertArraysEqual(Utils.reorderArray(ARRAY, LAST_INDEX, LAST_INDEX - 1, ARRAY_LENGTH), ARRAY_STRING);\n            });","file":"utilsTests.ts","skipped":false,"dir":"packages/table/test"},{"name":"returns an unchanged copy of the array if from === to","suites":["Utils","reorderArray","edge cases"],"updatePoint":{"line":322,"column":69},"line":322,"code":"            it(\"returns an unchanged copy of the array if from === to\", () => {\n                assertArraysEqual(Utils.reorderArray(ARRAY, 0, 0), ARRAY_STRING);\n                assertArraysEqual(Utils.reorderArray(ARRAY, 1, 1), ARRAY_STRING);\n                assertArraysEqual(Utils.reorderArray(ARRAY, 3, 3, ARRAY_LENGTH), ARRAY_STRING);\n                assertArraysEqual(Utils.reorderArray(ARRAY, 4, 4, ARRAY_LENGTH), ARRAY_STRING);\n                assertArraysEqual(Utils.reorderArray(ARRAY, LAST_INDEX, LAST_INDEX), ARRAY_STRING);\n            });","file":"utilsTests.ts","skipped":false,"dir":"packages/table/test"}]}