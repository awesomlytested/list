{
    "repo": "prerender/prerender",
    "url": "https://github.com/prerender/prerender",
    "branch": "master",
    "configs": [
        {
            "package": "prerender",
            "lang": "js",
            "dir": "test",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        }
    ],
    "tests": [
        {
            "name": "Should NOT change tabs status code",
            "suites": [
                "chrome",
                "loadUrlThenWaitForPageLoadEvent"
            ],
            "updatePoint": {
                "line": 28,
                "column": 42
            },
            "line": 28,
            "code": "    it(\"Should NOT change tabs status code\", async function () {\n      const expectedStatusCode = 123;\n      tab.prerender.statusCode = expectedStatusCode;\n      await chrome.loadUrlThenWaitForPageLoadEvent(tab, \"the-url\");\n      assert.strictEqual(tab.prerender.statusCode, expectedStatusCode);\n    });",
            "file": "browsers/chrome-spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should change tabs status code to the predefined value",
            "suites": [
                "chrome",
                "loadUrlThenWaitForPageLoadEvent"
            ],
            "updatePoint": {
                "line": 34,
                "column": 62
            },
            "line": 34,
            "code": "    it(\"Should change tabs status code to the predefined value\", async function () {\n      const expectedStatusCode = 222;\n      tab.prerender.statusCode = 111;\n      tab.prerender.timeoutStatusCode = expectedStatusCode;\n      await chrome.loadUrlThenWaitForPageLoadEvent(tab, \"the-url\");\n      assert.strictEqual(tab.prerender.statusCode, expectedStatusCode);\n    });",
            "file": "browsers/chrome-spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should remove the / from the beginning of the URL if present",
            "suites": [
                "Prerender",
                "#util"
            ],
            "updatePoint": {
                "line": 15,
                "column": 68
            },
            "line": 15,
            "code": "    it('should remove the / from the beginning of the URL if present', function () {\n      var url = util.getUrl('/http://www.example.com/');\n      assert.equal(url, 'http://www.example.com/');\n    });",
            "file": "index-spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return the correct URL for #! URLs without query strings",
            "suites": [
                "Prerender",
                "#util"
            ],
            "updatePoint": {
                "line": 19,
                "column": 71
            },
            "line": 19,
            "code": "    it('should return the correct URL for #! URLs without query strings', function () {\n      var url = util.getUrl('http://www.example.com/?_escaped_fragment_=/user/1');\n      assert.equal(url, 'http://www.example.com/#!/user/1');\n    });",
            "file": "index-spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return the correct URL for #! URLs with query strings",
            "suites": [
                "Prerender",
                "#util"
            ],
            "updatePoint": {
                "line": 23,
                "column": 68
            },
            "line": 23,
            "code": "    it('should return the correct URL for #! URLs with query strings', function () {\n      var url = util.getUrl('http://www.example.com/?_escaped_fragment_=/user/1&param1=yes&param2=no');\n      assert.equal(url, 'http://www.example.com/?param1=yes&param2=no#!/user/1');\n    });",
            "file": "index-spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return the correct URL for #! URLs if query string is before hash",
            "suites": [
                "Prerender",
                "#util"
            ],
            "updatePoint": {
                "line": 27,
                "column": 80
            },
            "line": 27,
            "code": "    it('should return the correct URL for #! URLs if query string is before hash', function () {\n      var url = util.getUrl('http://www.example.com/?param1=yes&param2=no&_escaped_fragment_=/user/1');\n      assert.equal(url, 'http://www.example.com/?param1=yes&param2=no#!/user/1');\n    });",
            "file": "index-spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return the correct URL for #! URLs that are encoded with another ?",
            "suites": [
                "Prerender",
                "#util"
            ],
            "updatePoint": {
                "line": 31,
                "column": 81
            },
            "line": 31,
            "code": "    it('should return the correct URL for #! URLs that are encoded with another ?', function () {\n      var url = util.getUrl('http://www.example.com/?_escaped_fragment_=%2Fuser%2F1%3Fparam1%3Dyes%26param2%3Dno');\n      assert.equal(url, 'http://www.example.com/?param1=yes&param2=no#!/user/1');\n    });",
            "file": "index-spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return the correct URL for html5 push state URLs",
            "suites": [
                "Prerender",
                "#util"
            ],
            "updatePoint": {
                "line": 35,
                "column": 63
            },
            "line": 35,
            "code": "    it('should return the correct URL for html5 push state URLs', function () {\n      var url = util.getUrl('http://www.example.com/user/1?_escaped_fragment_=');\n      assert.equal(url, 'http://www.example.com/user/1');\n    });",
            "file": "index-spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return the correct URL for html5 push state URLs with query strings",
            "suites": [
                "Prerender",
                "#util"
            ],
            "updatePoint": {
                "line": 39,
                "column": 82
            },
            "line": 39,
            "code": "    it('should return the correct URL for html5 push state URLs with query strings', function () {\n      var url = util.getUrl('http://www.example.com/user/1?param1=yes&param2=no&_escaped_fragment_=');\n      assert.equal(url, 'http://www.example.com/user/1?param1=yes&param2=no');\n    });",
            "file": "index-spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should fix incorrect html5 URL that Bing accesses",
            "suites": [
                "Prerender",
                "#util"
            ],
            "updatePoint": {
                "line": 43,
                "column": 57
            },
            "line": 43,
            "code": "    it('should fix incorrect html5 URL that Bing accesses', function () {\n      var url = util.getUrl('http://www.example.com/?&_escaped_fragment_=');\n      assert.equal(url, 'http://www.example.com/');\n    });",
            "file": "index-spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should encode # correctly in URLs that do not use the #!",
            "suites": [
                "Prerender",
                "#util"
            ],
            "updatePoint": {
                "line": 47,
                "column": 64
            },
            "line": 47,
            "code": "    it('should encode # correctly in URLs that do not use the #!', function () {\n      var url = util.getUrl('http://www.example.com/productNumber=123%23456?_escaped_fragment_=');\n      assert.equal(url, 'http://www.example.com/productNumber=123%23456');\n    });",
            "file": "index-spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not encode non-english characters",
            "suites": [
                "Prerender",
                "#util"
            ],
            "updatePoint": {
                "line": 51,
                "column": 48
            },
            "line": 51,
            "code": "    it('should not encode non-english characters', function () {\n      var url = util.getUrl('http://www.example.com/كاليفورنيا?_escaped_fragment_=');\n      assert.equal(url, 'http://www.example.com/كاليفورنيا');\n    });",
            "file": "index-spec.js",
            "skipped": false,
            "dir": "test"
        }
    ],
    "badge": "prerender__prerender.svg"
}