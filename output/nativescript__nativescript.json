{
    "repo": "NativeScript/NativeScript",
    "url": "https://github.com/NativeScript/NativeScript",
    "branch": "master",
    "configs": [
        {
            "package": "@nativescript/core",
            "lang": "ts",
            "dir": "packages/core/__tests__",
            "framework": "mocha",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@nativescript/webpack",
            "lang": "ts",
            "dir": "packages/webpack5/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        }
    ],
    "tests": [
        {
            "name": "basic selector",
            "suites": [
                "css-tree parser compatible with rework "
            ],
            "updatePoint": {
                "line": 6,
                "column": 19
            },
            "line": 6,
            "code": "\tit('basic selector', () => {\n\t\tconst testCase = '.test { color: red; }';\n\t\tconst reworkAST = reworkCssParse(testCase, { source: 'file.css' });\n\t\tconst cssTreeAST = cssTreeParse(testCase, 'file.css');\n\n\t\tassert.deepEqual(cssTreeAST, reworkAST);\n\t});",
            "file": "css-tree-parser/css-tree-parser.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "empty rule",
            "suites": [
                "css-tree parser compatible with rework "
            ],
            "updatePoint": {
                "line": 14,
                "column": 15
            },
            "line": 14,
            "code": "\tit('empty rule', () => {\n\t\tconst css = `.test {\n            color: red;\n            ;\n        }`;\n\t\tconst reworkAST = reworkCssParse(css, { source: 'file.css' });\n\t\tconst cssTreeAST = cssTreeParse(css, 'file.css');\n\t\tassert.deepEqual(cssTreeAST, reworkAST);\n\t});",
            "file": "css-tree-parser/css-tree-parser.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "@keyframes",
            "suites": [
                "css-tree parser compatible with rework "
            ],
            "updatePoint": {
                "line": 24,
                "column": 15
            },
            "line": 24,
            "code": "\tit('@keyframes', () => {\n\t\tconst testCase = '.test { animation-name: test; } @keyframes test { from { background-color: red; } to { background-color: blue; } } .test { color: red; }';\n\t\tconst reworkAST = reworkCssParse(testCase, { source: 'file.css' });\n\t\tconst cssTreeAST = cssTreeParse(testCase, 'file.css');\n\n\t\tassert.deepEqual(cssTreeAST, reworkAST);\n\t});",
            "file": "css-tree-parser/css-tree-parser.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "@media",
            "suites": [
                "css-tree parser compatible with rework "
            ],
            "updatePoint": {
                "line": 32,
                "column": 11
            },
            "line": 32,
            "code": "\tit('@media', () => {\n\t\tconst testCase = '@media screen and (max-width: 600px) { body { background-color: olive; } } .test { color: red; }';\n\t\tconst reworkAST = reworkCssParse(testCase, { source: 'file.css' });\n\t\tconst cssTreeAST = cssTreeParse(testCase, 'file.css');\n\n\t\tassert.deepEqual(cssTreeAST, reworkAST);\n\t});",
            "file": "css-tree-parser/css-tree-parser.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "@supports",
            "suites": [
                "css-tree parser compatible with rework "
            ],
            "updatePoint": {
                "line": 40,
                "column": 14
            },
            "line": 40,
            "code": "\tit('@supports', () => {\n\t\tconst testCase = '@supports not (display: grid) { div { float: right; } } .test { color: red; }';\n\t\tconst reworkAST = reworkCssParse(testCase, { source: 'file.css' });\n\t\tconst cssTreeAST = cssTreeParse(testCase, 'file.css');\n\n\t\tassert.deepEqual(cssTreeAST, reworkAST);\n\t});",
            "file": "css-tree-parser/css-tree-parser.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "@page",
            "suites": [
                "css-tree parser compatible with rework "
            ],
            "updatePoint": {
                "line": 48,
                "column": 10
            },
            "line": 48,
            "code": "\tit('@page', () => {\n\t\tconst testCase = '@page :first { margin: 2cm; } .test { color: red; }';\n\t\tconst reworkAST = reworkCssParse(testCase, { source: 'file.css' });\n\t\tconst cssTreeAST = cssTreeParse(testCase, 'file.css');\n\n\t\tassert.deepEqual(cssTreeAST, reworkAST);\n\t});",
            "file": "css-tree-parser/css-tree-parser.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "@document",
            "suites": [
                "css-tree parser compatible with rework "
            ],
            "updatePoint": {
                "line": 56,
                "column": 14
            },
            "line": 56,
            "code": "\tit('@document', () => {\n\t\tconst testCase = '@document url(\"https://www.example.com/\") { h1 { color: green; } } .test { color: red; }';\n\t\tconst reworkAST = reworkCssParse(testCase, { source: 'file.css' });\n\t\tconst cssTreeAST = cssTreeParse(testCase, 'file.css');\n\n\t\tassert.deepEqual(cssTreeAST, reworkAST);\n\t});",
            "file": "css-tree-parser/css-tree-parser.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "@font-face",
            "suites": [
                "css-tree parser compatible with rework "
            ],
            "updatePoint": {
                "line": 64,
                "column": 15
            },
            "line": 64,
            "code": "\tit('@font-face', () => {\n\t\tconst testCase = '@font-face { font-family: \"Open Sans\"; src: url(\"/fonts/OpenSans-Regular-webfont.woff2\") format(\"woff2\"), url(\"/fonts/OpenSans-Regular-webfont.woff\") format(\"woff\"); } .test { color: red; }';\n\t\tconst reworkAST = reworkCssParse(testCase, { source: 'file.css' });\n\t\tconst cssTreeAST = cssTreeParse(testCase, 'file.css');\n\n\t\tassert.deepEqual(cssTreeAST, reworkAST);\n\t});",
            "file": "css-tree-parser/css-tree-parser.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "@import",
            "suites": [
                "css-tree parser compatible with rework "
            ],
            "updatePoint": {
                "line": 72,
                "column": 12
            },
            "line": 72,
            "code": "\tit('@import', () => {\n\t\tconst testCase = '@import url(\\'landscape.css\\') screen and (orientation:landscape); @import url(\"fineprint.css\") print; .test { color: red; }';\n\t\tconst reworkAST = reworkCssParse(testCase, { source: 'file.css' });\n\t\tconst cssTreeAST = cssTreeParse(testCase, 'file.css');\n\n\t\tassert.deepEqual(cssTreeAST, reworkAST);\n\t});",
            "file": "css-tree-parser/css-tree-parser.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "@charset",
            "suites": [
                "css-tree parser compatible with rework "
            ],
            "updatePoint": {
                "line": 80,
                "column": 13
            },
            "line": 80,
            "code": "\tit('@charset', () => {\n\t\tconst testCase = '@charset \"utf-8\"; .test { color: red; }';\n\t\tconst reworkAST = reworkCssParse(testCase, { source: 'file.css' });\n\t\tconst cssTreeAST = cssTreeParse(testCase, 'file.css');\n\n\t\tassert.deepEqual(cssTreeAST, reworkAST);\n\t});",
            "file": "css-tree-parser/css-tree-parser.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "@namespace",
            "suites": [
                "css-tree parser compatible with rework "
            ],
            "updatePoint": {
                "line": 88,
                "column": 15
            },
            "line": 88,
            "code": "\tit('@namespace', () => {\n\t\tconst testCase = '@namespace svg url(http://www.w3.org/2000/svg); .test { color: red; }';\n\t\tconst reworkAST = reworkCssParse(testCase, { source: 'file.css' });\n\t\tconst cssTreeAST = cssTreeParse(testCase, 'file.css');\n\n\t\tassert.deepEqual(cssTreeAST, reworkAST);\n\t});",
            "file": "css-tree-parser/css-tree-parser.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "\"\"",
            "suites": [
                "css",
                "parser"
            ],
            "updatePoint": {
                "line": 22,
                "column": 74
            },
            "line": 22,
            "code": "\t\t\t\tit(`${lastIndexOrExpected ? 'can parse ' : 'can not parse '}\"${value}\"`, () => {\n\t\t\t\t\tconst result = parse(value);\n\t\t\t\t\tassert.deepEqual(result, lastIndexOrExpected);\n\t\t\t\t});",
            "file": "css/parser.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "\"\" starting at index ",
            "suites": [
                "css",
                "parser"
            ],
            "updatePoint": {
                "line": 27,
                "column": 104
            },
            "line": 27,
            "code": "\t\t\t\tit(`${expected ? 'can parse ' : 'can not parse '}\"${value}\" starting at index ${lastIndexOrExpected}`, () => {\n\t\t\t\t\tconst result = parse(value, <number>lastIndexOrExpected);\n\t\t\t\t\tassert.deepEqual(result, expected);\n\t\t\t\t});",
            "file": "css/parser.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "the tokenizer roundtrips the core.light.css theme",
            "suites": [
                "css",
                "parser",
                "css3",
                "tokenizer"
            ],
            "updatePoint": {
                "line": 282,
                "column": 57
            },
            "line": 282,
            "code": "\t\t\t\tit('the tokenizer roundtrips the core.light.css theme', () => {\n\t\t\t\t\tconst cssparser = new CSS3Parser(themeCoreLightIos);\n\t\t\t\t\tconst stylesheet = cssparser.tokenize();\n\n\t\t\t\t\tconst original = themeCoreLightIos.replace(/\\/\\*([^\\/]|\\/[^\\*])*\\*\\//g, '').replace(/\\n/g, ' ');\n\t\t\t\t\tconst roundtrip = stylesheet\n\t\t\t\t\t\t.map((m) => {\n\t\t\t\t\t\t\tif (!m) {\n\t\t\t\t\t\t\t\treturn '';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (typeof m === 'string') {\n\t\t\t\t\t\t\t\treturn m;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn m.text;\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.join('');\n\n\t\t\t\t\tconst lastIndex = Math.min(original.length, roundtrip.length);\n\t\t\t\t\tfor (let i = 0; i < lastIndex; i++) {\n\t\t\t\t\t\tif (original[i] !== roundtrip[i]) {\n\t\t\t\t\t\t\tassert.equal(roundtrip.substr(i, 50), original.substr(i, 50), 'Round-tripped CSS string differ at index: ' + i);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tassert.equal(roundtrip.length, original.length, 'Expected round-tripped string lengths to match.');\n\t\t\t\t});",
            "file": "css/parser.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "test what-is-new.ios.css from nativescript-marketplace-demo",
            "suites": [
                "css",
                "parser",
                "css3",
                "tokenizer"
            ],
            "updatePoint": {
                "line": 311,
                "column": 67
            },
            "line": 311,
            "code": "\t\t\t\tit('test what-is-new.ios.css from nativescript-marketplace-demo', () => {\n\t\t\t\t\tconst parser = new CSS3Parser(whatIsNewIos);\n\t\t\t\t\tconst tokens = parser.tokenize();\n\t\t\t\t\tassert.deepEqual(tokens, [\n\t\t\t\t\t\t{ type: TokenObjectType.atKeyword, text: 'import' },\n\t\t\t\t\t\t' ',\n\t\t\t\t\t\t{ type: TokenObjectType.url, text: \"url('~/views/what-is-new-common.css')\" },\n\t\t\t\t\t\t';',\n\t\t\t\t\t\t' ',\n\t\t\t\t\t\t{ type: TokenObjectType.delim, text: '.' },\n\t\t\t\t\t\t{ type: TokenObjectType.ident, text: 'news-card' },\n\t\t\t\t\t\t' ',\n\t\t\t\t\t\t'{',\n\t\t\t\t\t\t' ',\n\t\t\t\t\t\t{ type: TokenObjectType.ident, text: 'margin' },\n\t\t\t\t\t\t':',\n\t\t\t\t\t\t' ',\n\t\t\t\t\t\t{ type: TokenObjectType.number, text: '12' },\n\t\t\t\t\t\t' ',\n\t\t\t\t\t\t{ type: TokenObjectType.number, text: '12' },\n\t\t\t\t\t\t' ',\n\t\t\t\t\t\t{ type: TokenObjectType.number, text: '0' },\n\t\t\t\t\t\t' ',\n\t\t\t\t\t\t{ type: TokenObjectType.number, text: '12' },\n\t\t\t\t\t\t';',\n\t\t\t\t\t\t' ',\n\t\t\t\t\t\t'}',\n\t\t\t\t\t\t' ',\n\t\t\t\t\t\t{ type: TokenObjectType.delim, text: '.' },\n\t\t\t\t\t\t{ type: TokenObjectType.ident, text: 'title' },\n\t\t\t\t\t\t' ',\n\t\t\t\t\t\t'{',\n\t\t\t\t\t\t' ',\n\t\t\t\t\t\t{ type: TokenObjectType.ident, text: 'font-size' },\n\t\t\t\t\t\t':',\n\t\t\t\t\t\t' ',\n\t\t\t\t\t\t{ type: TokenObjectType.number, text: '14' },\n\t\t\t\t\t\t';',\n\t\t\t\t\t\t' ',\n\t\t\t\t\t\t'}',\n\t\t\t\t\t\t' ',\n\t\t\t\t\t\t{ type: TokenObjectType.delim, text: '.' },\n\t\t\t\t\t\t{ type: TokenObjectType.ident, text: 'body' },\n\t\t\t\t\t\t' ',\n\t\t\t\t\t\t'{',\n\t\t\t\t\t\t' ',\n\t\t\t\t\t\t{ type: TokenObjectType.ident, text: 'font-size' },\n\t\t\t\t\t\t':',\n\t\t\t\t\t\t' ',\n\t\t\t\t\t\t{ type: TokenObjectType.number, text: '14' },\n\t\t\t\t\t\t';',\n\t\t\t\t\t\t' ',\n\t\t\t\t\t\t'}',\n\t\t\t\t\t\t' ',\n\t\t\t\t\t\t{ type: TokenObjectType.delim, text: '.' },\n\t\t\t\t\t\t{ type: TokenObjectType.ident, text: 'learn-more' },\n\t\t\t\t\t\t' ',\n\t\t\t\t\t\t'{',\n\t\t\t\t\t\t' ',\n\t\t\t\t\t\t{ type: TokenObjectType.ident, text: 'font-size' },\n\t\t\t\t\t\t':',\n\t\t\t\t\t\t' ',\n\t\t\t\t\t\t{ type: TokenObjectType.number, text: '14' },\n\t\t\t\t\t\t';',\n\t\t\t\t\t\t' ',\n\t\t\t\t\t\t'}',\n\t\t\t\t\t\t' ',\n\t\t\t\t\t\t{ type: TokenObjectType.delim, text: '.' },\n\t\t\t\t\t\t{ type: TokenObjectType.ident, text: 'date' },\n\t\t\t\t\t\t' ',\n\t\t\t\t\t\t'{',\n\t\t\t\t\t\t' ',\n\t\t\t\t\t\t{ type: TokenObjectType.ident, text: 'font-size' },\n\t\t\t\t\t\t':',\n\t\t\t\t\t\t' ',\n\t\t\t\t\t\t{ type: TokenObjectType.number, text: '12' },\n\t\t\t\t\t\t';',\n\t\t\t\t\t\t' ',\n\t\t\t\t\t\t'}',\n\t\t\t\t\t\t' ',\n\t\t\t\t\t\t{ type: TokenObjectType.delim, text: '.' },\n\t\t\t\t\t\t{ type: TokenObjectType.ident, text: 'empty-placeholder' },\n\t\t\t\t\t\t' ',\n\t\t\t\t\t\t'{',\n\t\t\t\t\t\t' ',\n\t\t\t\t\t\t{ type: TokenObjectType.ident, text: 'vertical-align' },\n\t\t\t\t\t\t':',\n\t\t\t\t\t\t' ',\n\t\t\t\t\t\t{ type: TokenObjectType.ident, text: 'center' },\n\t\t\t\t\t\t';',\n\t\t\t\t\t\t' ',\n\t\t\t\t\t\t{ type: TokenObjectType.ident, text: 'text-align' },\n\t\t\t\t\t\t':',\n\t\t\t\t\t\t' ',\n\t\t\t\t\t\t{ type: TokenObjectType.ident, text: 'center' },\n\t\t\t\t\t\t';',\n\t\t\t\t\t\t' ',\n\t\t\t\t\t\t'}',\n\t\t\t\t\t\tundefined, // EOF\n\t\t\t\t\t]);\n\t\t\t\t});",
            "file": "css/parser.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "test what-is-new.ios.css from nativescript-marketplace-demo",
            "suites": [
                "css",
                "parser",
                "css3",
                "parser"
            ],
            "updatePoint": {
                "line": 415,
                "column": 67
            },
            "line": 415,
            "code": "\t\t\t\tit('test what-is-new.ios.css from nativescript-marketplace-demo', () => {\n\t\t\t\t\tconst parser = new CSS3Parser(whatIsNewIos);\n\t\t\t\t\tconst stylesheet = parser.parseAStylesheet();\n\t\t\t\t\t// console.log(JSON.stringify(stylesheet, null, \"\\t\"));\n\t\t\t\t\t// TODO: Assert...\n\t\t\t\t});",
            "file": "css/parser.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": ".btn-primary{border-color:rgba(255,0,0,0)}",
            "suites": [
                "css",
                "parser",
                "css3",
                "parser"
            ],
            "updatePoint": {
                "line": 422,
                "column": 50
            },
            "line": 422,
            "code": "\t\t\t\tit('.btn-primary{border-color:rgba(255,0,0,0)}', () => {\n\t\t\t\t\tconst parser = new CSS3Parser('.btn-primary{border-color:rgba(255,0,0,0)}');\n\t\t\t\t\tconst stylesheet = parser.parseAStylesheet();\n\n\t\t\t\t\tassert.deepEqual(\n\t\t\t\t\t\tstylesheet,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\trules: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttype: 'qualified-rule',\n\t\t\t\t\t\t\t\t\tprelude: [\n\t\t\t\t\t\t\t\t\t\t{ type: 2, text: '.' },\n\t\t\t\t\t\t\t\t\t\t{ type: 6, text: 'btn-primary' },\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tblock: { type: 9, text: '{border-color:rgba(255,0,0,0)}', associatedToken: '{', values: [{ type: 6, text: 'border-color' }, ':', { type: 14, name: 'rgba', text: 'rgba(255,0,0,0)', components: [{ type: 3, text: '255' }, ',', { type: 3, text: '0' }, ',', { type: 3, text: '0' }, ',', { type: 3, text: '0' }] }] },\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"NativeScript parsed AST doesn't match.\"\n\t\t\t\t\t);\n\n\t\t\t\t\tconst cssToNS = new CSSNativeScript();\n\t\t\t\t\tconst nativescriptAst = cssToNS.parseStylesheet(stylesheet);\n\n\t\t\t\t\tassert.deepEqual(\n\t\t\t\t\t\tnativescriptAst,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'stylesheet',\n\t\t\t\t\t\t\tstylesheet: {\n\t\t\t\t\t\t\t\trules: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttype: 'rule',\n\t\t\t\t\t\t\t\t\t\tselectors: ['.btn-primary'],\n\t\t\t\t\t\t\t\t\t\tdeclarations: [\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\ttype: 'declaration',\n\t\t\t\t\t\t\t\t\t\t\t\tproperty: 'border-color',\n\t\t\t\t\t\t\t\t\t\t\t\tvalue: 'rgba(255,0,0,0)',\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"NativeScript AST mapped to rework doesn't match.\"\n\t\t\t\t\t);\n\t\t\t\t});",
            "file": "css/parser.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "serialization",
            "suites": [
                "css",
                "parser",
                "css3",
                "parser"
            ],
            "updatePoint": {
                "line": 471,
                "column": 20
            },
            "line": 471,
            "code": "\t\t\tit('serialization', () => {\n\t\t\t\tconst reworkAst = reworkCss.parse(themeCoreLightIos, { source: 'nativescript-theme-core/css/core.light.css' });\n\t\t\t\tfs.writeFileSync(\n\t\t\t\t\t'css/out/rework.css.json',\n\t\t\t\t\tJSON.stringify(reworkAst, (k, v) => (k === 'position' ? undefined : v), '  ')\n\t\t\t\t);\n\n\t\t\t\tconst nsParser = new CSS3Parser(themeCoreLightIos);\n\t\t\t\tconst nativescriptStylesheet = nsParser.parseAStylesheet();\n\t\t\t\tconst cssToNS = new CSSNativeScript();\n\t\t\t\tconst nativescriptAst = cssToNS.parseStylesheet(nativescriptStylesheet);\n\n\t\t\t\tfs.writeFileSync('css/out/nativescript.css.json', JSON.stringify(nativescriptAst, null, '  '));\n\t\t\t});",
            "file": "css/parser.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "our parser is fast (this test is flaky, gc, opts.)",
            "suites": [
                "css",
                "parser",
                "css3",
                "parser"
            ],
            "line": 486,
            "code": "\t\t\tit.skip('our parser is fast (this test is flaky, gc, opts.)', () => {",
            "file": "css/parser.ts",
            "skipped": true,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "removes an item",
            "suites": [
                "observable-array",
                "splice"
            ],
            "updatePoint": {
                "line": 6,
                "column": 21
            },
            "line": 6,
            "code": "\t\tit('removes an item', () => {\n\t\t\tconst _array = new ObservableArray();\n\n\t\t\t_array.push(1);\n\t\t\t_array.push(2);\n\n\t\t\t_array.splice(0, 1);\n\n\t\t\tassert.equal(2, _array.getItem(0));\n\t\t});",
            "file": "observable/observable-array.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "replaces an item",
            "suites": [
                "observable-array",
                "splice"
            ],
            "updatePoint": {
                "line": 17,
                "column": 22
            },
            "line": 17,
            "code": "\t\tit('replaces an item', () => {\n\t\t\tconst _array = new ObservableArray();\n\n\t\t\t_array.push(1);\n\t\t\t_array.push(2);\n\n\t\t\t_array.splice(0, 1, 3);\n\n\t\t\tassert.equal(3, _array.getItem(0));\n\t\t});",
            "file": "observable/observable-array.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "empties on start zero and no delete count",
            "suites": [
                "observable-array",
                "splice"
            ],
            "updatePoint": {
                "line": 28,
                "column": 47
            },
            "line": 28,
            "code": "\t\tit('empties on start zero and no delete count', () => {\n\t\t\tconst _array = new ObservableArray();\n\n\t\t\t_array.push(1);\n\n\t\t\t_array.splice(0);\n\t\t\tassert.equal(0, _array.length);\n\t\t});",
            "file": "observable/observable-array.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "empties on length set to zero",
            "suites": [
                "observable-array",
                "splice"
            ],
            "updatePoint": {
                "line": 37,
                "column": 35
            },
            "line": 37,
            "code": "\t\tit('empties on length set to zero', () => {\n\t\t\tconst _array = new ObservableArray();\n\n\t\t\t_array.push(1);\n\t\t\t_array.push(2);\n\n\t\t\t_array.length = 0;\n\t\t\tassert.equal(0, _array.length);\n\t\t});",
            "file": "observable/observable-array.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "finds an item",
            "suites": [
                "observable-array",
                "findIndex"
            ],
            "updatePoint": {
                "line": 49,
                "column": 19
            },
            "line": 49,
            "code": "\t\tit('finds an item', () => {\n\t\t\tconst _array = new ObservableArray();\n\n\t\t\t_array.push(1);\n\t\t\t_array.push(2);\n\n\t\t\tconst index = _array.findIndex((i) => i === 2);\n\n\t\t\tassert.equal(1, index);\n\t\t});",
            "file": "observable/observable-array.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "does not find item",
            "suites": [
                "observable-array",
                "findIndex"
            ],
            "updatePoint": {
                "line": 60,
                "column": 24
            },
            "line": 60,
            "code": "\t\tit('does not find item', () => {\n\t\t\tconst _array = new ObservableArray();\n\n\t\t\t_array.push(1);\n\t\t\t_array.push(2);\n\n\t\t\tconst index = _array.findIndex((i) => i === 3);\n\n\t\t\tassert.equal(-1, index);\n\t\t});",
            "file": "observable/observable-array.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "fires just once",
            "suites": [
                "observable",
                "once"
            ],
            "updatePoint": {
                "line": 30,
                "column": 21
            },
            "line": 30,
            "code": "\t\tit('fires just once', () => {\n\t\t\tnotify();\n\t\t\tnotify();\n\t\t\tassert.equal(callCount, 1, 'Expected the handler to be called exactly once');\n\t\t});",
            "file": "observable/observable.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "does not fire for other events",
            "suites": [
                "observable",
                "once"
            ],
            "updatePoint": {
                "line": 35,
                "column": 36
            },
            "line": 35,
            "code": "\t\tit('does not fire for other events', () => {\n\t\t\tnotifyWrong();\n\t\t\tassert.equal(callCount, 0, 'Expected the handler to not be called, when other events fire');\n\t\t});",
            "file": "observable/observable.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "fire once when fired recursively",
            "suites": [
                "observable",
                "once"
            ],
            "updatePoint": {
                "line": 42,
                "column": 38
            },
            "line": 42,
            "code": "\t\tit('fire once when fired recursively', () => {\n\t\t\tconst observable = new Observable();\n\t\t\tlet callCount1 = 0;\n\t\t\tlet callCount2 = 0;\n\t\t\tconst handler2 = function () {\n\t\t\t\tcallCount2++;\n\t\t\t};\n\t\t\tconst handler1 = function () {\n\t\t\t\tcallCount1++;\n\t\t\t\tobservable.once('test', handler2);\n\t\t\t\tobservable.notify({ eventName: 'test', object: observable });\n\t\t\t};\n\t\t\tobservable.once('test', handler1);\n\t\t\tobservable.notify({ eventName: 'test', object: observable });\n\t\t\tassert.equal(callCount1, 1, 'Expected the first handler to unsubscribe before being fired and to notify just once');\n\t\t\tassert.equal(callCount2, 1, 'Expected the second handler to be fired once when recursively notified by the first handler');\n\t\t});",
            "file": "observable/observable.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "button[attr]",
            "suites": [
                "ui",
                "styling",
                "css-selectors",
                "match"
            ],
            "updatePoint": {
                "line": 9,
                "column": 20
            },
            "line": 9,
            "code": "\t\t\t\tit('button[attr]', () => {\n\t\t\t\t\tconst sel = selector.createSelector('button[testAttr]');\n\t\t\t\t\tassert.isTrue(\n\t\t\t\t\t\tsel.match(<any>{\n\t\t\t\t\t\t\tcssType: 'button',\n\t\t\t\t\t\t\ttestAttr: true,\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t\tassert.isFalse(\n\t\t\t\t\t\tsel.match(<any>{\n\t\t\t\t\t\t\tcssType: 'button',\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t});",
            "file": "ui/styling/css-selector.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "single selector",
            "suites": [
                "ui",
                "styling",
                "css-selectors",
                "match"
            ],
            "updatePoint": {
                "line": 40,
                "column": 23
            },
            "line": 40,
            "code": "\t\t\t\tit('single selector', () => {\n\t\t\t\t\tconst rule = createOne(`* { color: red; }`);\n\t\t\t\t\tassert.isTrue(rule.selectors[0].match({ cssType: 'button' }));\n\t\t\t\t\tassert.isTrue(rule.selectors[0].match({ cssType: 'image' }));\n\t\t\t\t});",
            "file": "ui/styling/css-selector.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "two selectors",
            "suites": [
                "ui",
                "styling",
                "css-selectors",
                "match"
            ],
            "updatePoint": {
                "line": 46,
                "column": 21
            },
            "line": 46,
            "code": "\t\t\t\tit('two selectors', () => {\n\t\t\t\t\tconst rule = createOne(`button, image { color: red; }`);\n\t\t\t\t\tassert.isTrue(rule.selectors[0].match({ cssType: 'button' }));\n\t\t\t\t\tassert.isTrue(rule.selectors[1].match({ cssType: 'image' }));\n\t\t\t\t\tassert.isFalse(rule.selectors[0].match({ cssType: 'stacklayout' }));\n\t\t\t\t\tassert.isFalse(rule.selectors[1].match({ cssType: 'stacklayout' }));\n\t\t\t\t});",
            "file": "ui/styling/css-selector.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "narrow selection",
            "suites": [
                "ui",
                "styling",
                "css-selectors",
                "match"
            ],
            "updatePoint": {
                "line": 54,
                "column": 24
            },
            "line": 54,
            "code": "\t\t\t\tit('narrow selection', () => {\n\t\t\t\t\tconst { map } = create(`\n                        .login { color: blue; }\n                        button { color: red; }\n                        image { color: green; }\n                    `);\n\n\t\t\t\t\tconst buttonQuerry = map.query({ cssType: 'button' }).selectors;\n\t\t\t\t\tassert.equal(buttonQuerry.length, 1);\n\t\t\t\t\tassert.includeDeepMembers(buttonQuerry[0].ruleset.declarations, [{ property: 'color', value: 'red' }]);\n\n\t\t\t\t\tconst imageQuerry = map.query({ cssType: 'image', cssClasses: new Set(['login']) }).selectors;\n\t\t\t\t\tassert.equal(imageQuerry.length, 2);\n\t\t\t\t\t// Note class before type\n\t\t\t\t\tassert.includeDeepMembers(imageQuerry[0].ruleset.declarations, [{ property: 'color', value: 'green' }]);\n\t\t\t\t\tassert.includeDeepMembers(imageQuerry[1].ruleset.declarations, [{ property: 'color', value: 'blue' }]);\n\t\t\t\t});",
            "file": "ui/styling/css-selector.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "simple selectors match",
            "suites": [
                "ui",
                "styling",
                "css-selectors",
                "match"
            ],
            "updatePoint": {
                "line": 100,
                "column": 30
            },
            "line": 100,
            "code": "\t\t\t\tit('simple selectors match', () => {\n\t\t\t\t\tfor (const sel in positiveMatches) {\n\t\t\t\t\t\tconst css = sel + ' { color: red; }';\n\t\t\t\t\t\tconst rule = createOne(css);\n\t\t\t\t\t\tassert.isTrue(rule.selectors[0].match(positivelyMatchingView), 'Expected successful match for: ' + css);\n\t\t\t\t\t\tif (sel !== '*') {\n\t\t\t\t\t\t\tassert.isFalse(rule.selectors[0].match(negativelyMatchingView), 'Expected match failure for: ' + css);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});",
            "file": "ui/styling/css-selector.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "two selector sequence positive match",
            "suites": [
                "ui",
                "styling",
                "css-selectors",
                "match"
            ],
            "updatePoint": {
                "line": 111,
                "column": 44
            },
            "line": 111,
            "code": "\t\t\t\tit('two selector sequence positive match', () => {\n\t\t\t\t\tfor (const firstStr in positiveMatches) {\n\t\t\t\t\t\tfor (const secondStr in positiveMatches) {\n\t\t\t\t\t\t\tif (secondStr !== firstStr && secondStr !== '*' && secondStr !== 'type') {\n\t\t\t\t\t\t\t\tconst css = firstStr + secondStr + ' { color: red; }';\n\t\t\t\t\t\t\t\tconst rule = createOne(css);\n\t\t\t\t\t\t\t\tassert.isTrue(rule.selectors[0].match(positivelyMatchingView), 'Expected successful match for: ' + css);\n\t\t\t\t\t\t\t\tif (firstStr !== '*') {\n\t\t\t\t\t\t\t\t\tassert.isFalse(rule.selectors[0].match(negativelyMatchingView), 'Expected match failure for: ' + css);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});",
            "file": "ui/styling/css-selector.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "direct parent combinator",
            "suites": [
                "ui",
                "styling",
                "css-selectors",
                "match"
            ],
            "updatePoint": {
                "line": 126,
                "column": 32
            },
            "line": 126,
            "code": "\t\t\t\tit('direct parent combinator', () => {\n\t\t\t\t\tconst rule = createOne(`listview > item:selected { color: red; }`);\n\t\t\t\t\tassert.isTrue(\n\t\t\t\t\t\trule.selectors[0].match({\n\t\t\t\t\t\t\tcssType: 'item',\n\t\t\t\t\t\t\tcssPseudoClasses: new Set(['selected']),\n\t\t\t\t\t\t\tparent: {\n\t\t\t\t\t\t\t\tcssType: 'listview',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t}),\n\t\t\t\t\t\t'Item in list view expected to match'\n\t\t\t\t\t);\n\t\t\t\t\tassert.isFalse(\n\t\t\t\t\t\trule.selectors[0].match({\n\t\t\t\t\t\t\tcssType: 'item',\n\t\t\t\t\t\t\tcssPseudoClasses: new Set(['selected']),\n\t\t\t\t\t\t\tparent: {\n\t\t\t\t\t\t\t\tcssType: 'stacklayout',\n\t\t\t\t\t\t\t\tparent: {\n\t\t\t\t\t\t\t\t\tcssType: 'listview',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t}),\n\t\t\t\t\t\t'Item in stack in list view NOT expected to match.'\n\t\t\t\t\t);\n\t\t\t\t});",
            "file": "ui/styling/css-selector.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "ancestor combinator",
            "suites": [
                "ui",
                "styling",
                "css-selectors",
                "match"
            ],
            "updatePoint": {
                "line": 153,
                "column": 27
            },
            "line": 153,
            "code": "\t\t\t\tit('ancestor combinator', () => {\n\t\t\t\t\tconst rule = createOne(`listview item:selected { color: red; }`);\n\t\t\t\t\tassert.isTrue(\n\t\t\t\t\t\trule.selectors[0].match({\n\t\t\t\t\t\t\tcssType: 'item',\n\t\t\t\t\t\t\tcssPseudoClasses: new Set(['selected']),\n\t\t\t\t\t\t\tparent: {\n\t\t\t\t\t\t\t\tcssType: 'listview',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t}),\n\t\t\t\t\t\t'Item in list view expected to match'\n\t\t\t\t\t);\n\t\t\t\t\tassert.isTrue(\n\t\t\t\t\t\trule.selectors[0].match({\n\t\t\t\t\t\t\tcssType: 'item',\n\t\t\t\t\t\t\tcssPseudoClasses: new Set(['selected']),\n\t\t\t\t\t\t\tparent: {\n\t\t\t\t\t\t\t\tcssType: 'stacklayout',\n\t\t\t\t\t\t\t\tparent: {\n\t\t\t\t\t\t\t\t\tcssType: 'listview',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t}),\n\t\t\t\t\t\t'Item in stack in list view expected to match.'\n\t\t\t\t\t);\n\t\t\t\t\tassert.isFalse(\n\t\t\t\t\t\trule.selectors[0].match({\n\t\t\t\t\t\t\tcssType: 'item',\n\t\t\t\t\t\t\tcssPseudoClasses: new Set(['selected']),\n\t\t\t\t\t\t\tparent: {\n\t\t\t\t\t\t\t\tcssType: 'stacklayout',\n\t\t\t\t\t\t\t\tparent: {\n\t\t\t\t\t\t\t\t\tcssType: 'page',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t}),\n\t\t\t\t\t\t'Item in stack in page NOT expected to match.'\n\t\t\t\t\t);\n\t\t\t\t});",
            "file": "ui/styling/css-selector.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "backtracking css selector",
            "suites": [
                "ui",
                "styling",
                "css-selectors",
                "match"
            ],
            "updatePoint": {
                "line": 193,
                "column": 33
            },
            "line": 193,
            "code": "\t\t\t\tit('backtracking css selector', () => {\n\t\t\t\t\tconst sel = createOne(`a>b c { color: red; }`).selectors[0];\n\t\t\t\t\tconst child = {\n\t\t\t\t\t\tcssType: 'c',\n\t\t\t\t\t\tparent: {\n\t\t\t\t\t\t\tcssType: 'b',\n\t\t\t\t\t\t\tparent: {\n\t\t\t\t\t\t\t\tcssType: 'fail',\n\t\t\t\t\t\t\t\tparent: {\n\t\t\t\t\t\t\t\t\tcssType: 'b',\n\t\t\t\t\t\t\t\t\tparent: {\n\t\t\t\t\t\t\t\t\t\tcssType: 'a',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\n\t\t\t\t\tassert.isTrue(sel.match(child));\n\t\t\t\t});",
            "file": "ui/styling/css-selector.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "simple query match",
            "suites": [
                "ui",
                "styling",
                "css-selectors",
                "match"
            ],
            "updatePoint": {
                "line": 218,
                "column": 26
            },
            "line": 218,
            "code": "\t\t\t\tit('simple query match', () => {\n\t\t\t\t\tconst { map } = create(`list grid[promotion] button:highlighted { color: red; }`);\n\n\t\t\t\t\tlet list, grid, button;\n\n\t\t\t\t\tbutton = {\n\t\t\t\t\t\tcssType: 'button',\n\t\t\t\t\t\tcssPseudoClasses: new Set<string>(['highlighted']),\n\t\t\t\t\t\ttoString,\n\t\t\t\t\t\tparent: grid = {\n\t\t\t\t\t\t\tcssType: 'grid',\n\t\t\t\t\t\t\tpromotion: true,\n\t\t\t\t\t\t\ttoString,\n\t\t\t\t\t\t\tparent: list = {\n\t\t\t\t\t\t\t\tcssType: 'list',\n\t\t\t\t\t\t\t\ttoString,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\n\t\t\t\t\tconst match = map.query(button);\n\t\t\t\t\tassert.equal(match.selectors.length, 1, 'Expected match to have one selector.');\n\n\t\t\t\t\tconst expected = new Map<selector.Node, selector.Changes>().set(grid, { attributes: new Set(['promotion']) }).set(button, { pseudoClasses: new Set(['highlighted']) });\n\n\t\t\t\t\tassert.deepEqual(match.changeMap, expected);\n\t\t\t\t});",
            "file": "ui/styling/css-selector.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "query match one child group",
            "suites": [
                "ui",
                "styling",
                "css-selectors",
                "match"
            ],
            "updatePoint": {
                "line": 246,
                "column": 35
            },
            "line": 246,
            "code": "\t\t\t\tit('query match one child group', () => {\n\t\t\t\t\tconst { map } = create(`#prod[special] > gridlayout { color: red; }`);\n\t\t\t\t\tlet gridlayout, prod;\n\n\t\t\t\t\tgridlayout = {\n\t\t\t\t\t\tcssType: 'gridlayout',\n\t\t\t\t\t\ttoString,\n\t\t\t\t\t\tparent: prod = {\n\t\t\t\t\t\t\tid: 'prod',\n\t\t\t\t\t\t\tcssType: 'listview',\n\t\t\t\t\t\t\ttoString,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\n\t\t\t\t\tconst match = map.query(gridlayout);\n\t\t\t\t\tassert.equal(match.selectors.length, 1, 'Expected match to have one selector.');\n\n\t\t\t\t\tconst expected = new Map<selector.Node, selector.Changes>().set(prod, { attributes: new Set(['special']) });\n\t\t\t\t\tassert.deepEqual(match.changeMap, expected);\n\t\t\t\t});",
            "file": "ui/styling/css-selector.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "query match one sibling group (deepEqual does not compare Map?)",
            "suites": [
                "ui",
                "styling",
                "css-selectors",
                "match"
            ],
            "updatePoint": {
                "line": 267,
                "column": 71
            },
            "line": 267,
            "code": "\t\t\t\tit('query match one sibling group (deepEqual does not compare Map?)', () => {\n\t\t\t\t\tconst { map } = create(`list button:highlighted+button:disabled { color: red; }`);\n\t\t\t\t\tlet list, button, disabledButton;\n\n\t\t\t\t\tlist = {\n\t\t\t\t\t\tcssType: 'list',\n\t\t\t\t\t\ttoString,\n\t\t\t\t\t\tgetChildIndex: () => 1,\n\t\t\t\t\t\tgetChildAt: () => button,\n\t\t\t\t\t};\n\n\t\t\t\t\tbutton = {\n\t\t\t\t\t\tcssType: 'button',\n\t\t\t\t\t\tcssPseudoClasses: new Set<string>(['highlighted']),\n\t\t\t\t\t\ttoString,\n\t\t\t\t\t\tparent: list,\n\t\t\t\t\t};\n\n\t\t\t\t\tdisabledButton = {\n\t\t\t\t\t\tcssType: 'button',\n\t\t\t\t\t\tcssPseudoClasses: new Set<string>(['disabled']),\n\t\t\t\t\t\ttoString,\n\t\t\t\t\t\tparent: list,\n\t\t\t\t\t};\n\n\t\t\t\t\tconst match = map.query(disabledButton);\n\t\t\t\t\tassert.equal(match.selectors.length, 1, 'Expected match to have one selector.');\n\n\t\t\t\t\tconst expected = new Map<selector.Node, selector.Changes>().set(disabledButton, { pseudoClasses: new Set(['disabled']) }).set(button, { pseudoClasses: new Set(['highlighted']) });\n\n\t\t\t\t\tassert.deepEqual(match.changeMap, expected);\n\t\t\t\t});",
            "file": "ui/styling/css-selector.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "parses [property] binding",
            "suites": [
                "angular xml parser"
            ],
            "updatePoint": {
                "line": 21,
                "column": 30
            },
            "line": 21,
            "code": "\tit('parses [property] binding', () => {\n\t\tparser.parse(\"<TextField [text]='somevar' />\");\n\n\t\tassert.equal('TextField', last_element);\n\t\tassert.equal(last_attrs['[text]'], 'somevar');\n\t});",
            "file": "xml/test-angular-xml.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "parses (event) binding",
            "suites": [
                "angular xml parser"
            ],
            "updatePoint": {
                "line": 28,
                "column": 27
            },
            "line": 28,
            "code": "\tit('parses (event) binding', () => {\n\t\tparser.parse(\"<TextField (tap)='onTap(blah)' />\");\n\n\t\tassert.equal('TextField', last_element);\n\t\tassert.equal(last_attrs['(tap)'], 'onTap(blah)');\n\t});",
            "file": "xml/test-angular-xml.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "parses (^event) binding",
            "suites": [
                "angular xml parser"
            ],
            "updatePoint": {
                "line": 35,
                "column": 28
            },
            "line": 35,
            "code": "\tit('parses (^event) binding', () => {\n\t\tparser.parse(\"<TextField (^tap)='onTap(blah)' />\");\n\n\t\tassert.equal('TextField', last_element);\n\t\tassert.equal(last_attrs['(^tap)'], 'onTap(blah)');\n\t});",
            "file": "xml/test-angular-xml.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "parses #id attribute",
            "suites": [
                "angular xml parser"
            ],
            "updatePoint": {
                "line": 42,
                "column": 25
            },
            "line": 42,
            "code": "\tit('parses #id attribute', () => {\n\t\tparser.parse('<TextField #firstName />');\n\n\t\tassert.equal('TextField', last_element);\n\t\tassert.equal(last_attrs['#firstName'], '');\n\t});",
            "file": "xml/test-angular-xml.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "parses #id attribute followed by another",
            "suites": [
                "angular xml parser"
            ],
            "updatePoint": {
                "line": 49,
                "column": 45
            },
            "line": 49,
            "code": "\tit('parses #id attribute followed by another', () => {\n\t\tparser.parse(\"<TextField #firstName text='Name' />\");\n\n\t\tassert.equal('TextField', last_element);\n\t\tassert.equal(last_attrs['#firstName'], '');\n\t\tassert.equal(last_attrs['text'], 'Name');\n\t});",
            "file": "xml/test-angular-xml.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "detects equals without value",
            "suites": [
                "angular xml parser"
            ],
            "updatePoint": {
                "line": 57,
                "column": 33
            },
            "line": 57,
            "code": "\tit('detects equals without value', () => {\n\t\tparser.parse('<TextField brokenTag= />');\n\n\t\tassert.isFalse(last_attrs);\n\t});",
            "file": "xml/test-angular-xml.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "detects no equals with quoted value",
            "suites": [
                "angular xml parser"
            ],
            "updatePoint": {
                "line": 63,
                "column": 40
            },
            "line": 63,
            "code": "\tit('detects no equals with quoted value', () => {\n\t\tparser.parse(\"<TextField noEquals 'value' />\");\n\n\t\tassert.isFalse(last_attrs);\n\t});",
            "file": "xml/test-angular-xml.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "detects unclosed tag after no value attribute",
            "suites": [
                "angular xml parser"
            ],
            "updatePoint": {
                "line": 69,
                "column": 50
            },
            "line": 69,
            "code": "\tit('detects unclosed tag after no value attribute', () => {\n\t\tparser.parse('<TextField #myId');\n\n\t\tassert.isFalse(last_attrs);\n\t});",
            "file": "xml/test-angular-xml.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "rejects angular properties if syntax disabled",
            "suites": [
                "angular xml parser"
            ],
            "updatePoint": {
                "line": 75,
                "column": 50
            },
            "line": 75,
            "code": "\tit('rejects angular properties if syntax disabled', () => {\n\t\tparser.angularSyntax = false;\n\t\tparser.parse(\"<TextField [text]='somevalue' />\");\n\n\t\tassert.isFalse(last_attrs);\n\t});",
            "file": "xml/test-angular-xml.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "handles whitespace around attribute =",
            "suites": [
                "xml parser"
            ],
            "updatePoint": {
                "line": 24,
                "column": 42
            },
            "line": 24,
            "code": "\tit('handles whitespace around attribute =', () => {\n\t\tparser.parse(\"<TextField text = \\n 'hello' />\");\n\n\t\tassert.equal('TextField', last_element);\n\t\tassert.equal('hello', last_attrs['text']);\n\t});",
            "file": "xml/test-xml.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "resolves entities",
            "suites": [
                "xml parser"
            ],
            "updatePoint": {
                "line": 31,
                "column": 22
            },
            "line": 31,
            "code": "\tit('resolves entities', () => {\n\t\tparser.parse('<element>&lt;&gt;&quot;&amp;&apos;</element>');\n\t\tassert.equal('<>\"&\\'', last_data);\n\t});",
            "file": "xml/test-xml.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "resolves greek letter entities in attributes",
            "suites": [
                "xml parser"
            ],
            "updatePoint": {
                "line": 36,
                "column": 49
            },
            "line": 36,
            "code": "\tit('resolves greek letter entities in attributes', () => {\n\t\tparser.parse(\"<element text='&Omega;'>blah</element>\");\n\t\tassert.equal('Ω', last_attrs.text);\n\t});",
            "file": "xml/test-xml.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "resolves entities in element text",
            "suites": [
                "xml parser"
            ],
            "updatePoint": {
                "line": 41,
                "column": 38
            },
            "line": 41,
            "code": "\tit('resolves entities in element text', () => {\n\t\tparser.parse('<element>&Omega;</element>');\n\t\tassert.equal('Ω', last_data);\n\t});",
            "file": "xml/test-xml.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        },
        {
            "name": "resolves <> inside quotes",
            "suites": [
                "xml parser"
            ],
            "updatePoint": {
                "line": 46,
                "column": 30
            },
            "line": 46,
            "code": "\tit('resolves <> inside quotes', () => {\n\t\tparser.parse('<element name=\\'<&>\\' blah=\"b<a&>\"/>');\n\t\tassert.equal('<&>', last_attrs.name);\n\t\tassert.equal('b<a&>', last_attrs.blah);\n\t});",
            "file": "xml/test-xml.ts",
            "skipped": false,
            "dir": "packages/core/__tests__"
        }
    ],
    "error": "Exclusive tests detected. `.only` call found in cli/parseEnvFlags.spec.ts:3\nRemove `.only` to restore test checks"
}