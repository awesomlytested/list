{"repo":"moleculerjs/moleculer","url":"https://github.com/moleculerjs/moleculer","branch":"master","configs":[{"package":"moleculer","lang":"js","dir":"test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"should set broker & create store","suites":["Test Async Storage class"],"updatePoint":{"line":4,"column":38},"line":4,"code":"  it(\"should set broker & create store\", () => {\n    const broker = {};\n    const storage = new AsyncStorage(broker);\n    expect(storage.broker).toBe(broker);\n    expect(storage.store).toBeInstanceOf(Map);\n  });","file":"integration/async-storage.spec.js","skipped":false,"dir":"test"},{"name":"should store context for async thread","suites":["Test Async Storage class"],"updatePoint":{"line":10,"column":43},"line":10,"code":"  it(\"should store context for async thread\", () => {\n    const broker = {};\n    const storage = new AsyncStorage(broker);\n    const context = {\n      a: 5\n    };\n    return Promise.resolve().then(() => {\n      storage.setSessionData(context);\n      expect(storage.getSessionData()).toBe(context);\n    }).then(() => {\n      expect(storage.getSessionData()).toBe(context);\n    });\n    /*.then(() => new Promise(resolve => setTimeout(resolve, 50)));\n    \t.then(() => {\n    \t\t// TODO: need fix\n    \t\texpect(storage.getSessionData()).toBe(context);\n    \t});\n    \t*/\n  });","file":"integration/async-storage.spec.js","skipped":false,"dir":"test"},{"name":"should register $node internal actions","suites":["Test internal services"],"updatePoint":{"line":58,"column":44},"line":58,"code":"  it(\"should register $node internal actions\", () => {\n    expect(broker.registry.actions.isAvailable(\"$node.list\")).toBe(true);\n    expect(broker.registry.actions.isAvailable(\"$node.services\")).toBe(true);\n    expect(broker.registry.actions.isAvailable(\"$node.actions\")).toBe(true);\n    expect(broker.registry.actions.isAvailable(\"$node.events\")).toBe(true);\n    expect(broker.registry.actions.isAvailable(\"$node.health\")).toBe(true);\n  });","file":"integration/broker-internal.spec.js","skipped":false,"dir":"test"},{"name":"should return node list","suites":["Test internal services"],"updatePoint":{"line":65,"column":29},"line":65,"code":"  it(\"should return node list\", () => {\n    const localNode = broker.registry.nodes.localNode;\n    return broker.call(\"$node.list\").then(res => {\n      expect(res).toEqual([{\n        available: true,\n        client: {\n          langVersion: process.version,\n          type: \"nodejs\",\n          version: broker.MOLECULER_VERSION\n        },\n        config: {},\n        cpu: null,\n        cpuSeq: null,\n        id: \"node-master\",\n        instanceID: localNode.instanceID,\n        ipList: localNode.ipList,\n        hostname: hostname(),\n        lastHeartbeatTime: localNode.lastHeartbeatTime,\n        offlineSince: null,\n        port: null,\n        seq: localNode.seq,\n        local: true,\n        metadata: {\n          a: 5\n        },\n        udpAddress: null\n      }]);\n    });\n  });","file":"integration/broker-internal.spec.js","skipped":false,"dir":"test"},{"name":"should return service list","suites":["Test internal services"],"updatePoint":{"line":94,"column":32},"line":94,"code":"  it(\"should return service list\", () => {\n    return broker.call(\"$node.services\").then(res => {\n      expect(res).toEqual([{\n        name: \"$node\",\n        nodes: [\"node-master\"],\n        settings: {},\n        metadata: {},\n        version: undefined,\n        fullName: \"$node\",\n        local: true,\n        available: true\n      }, {\n        name: \"greeter\",\n        nodes: [\"node-master\"],\n        settings: {\n          anonymous: \"John\"\n        },\n        metadata: {\n          scaling: true\n        },\n        version: undefined,\n        fullName: \"greeter\",\n        local: true,\n        available: true\n      }, {\n        name: \"echo\",\n        nodes: [\"node-master\"],\n        settings: {},\n        metadata: {},\n        version: \"alpha\",\n        fullName: \"alpha.echo\",\n        local: true,\n        available: true\n      }]);\n    });\n  });","file":"integration/broker-internal.spec.js","skipped":false,"dir":"test"},{"name":"should return service list (skipInternal, withActions)","suites":["Test internal services"],"updatePoint":{"line":130,"column":60},"line":130,"code":"  it(\"should return service list (skipInternal, withActions)\", () => {\n    return broker.call(\"$node.services\", {\n      skipInternal: true,\n      withActions: true\n    }).then(res => {\n      expect(res).toEqual([{\n        actions: {\n          \"greeter.hello\": {\n            name: \"greeter.hello\",\n            rawName: \"hello\"\n          },\n          \"greeter.welcome\": {\n            cache: true,\n            name: \"greeter.welcome\",\n            rawName: \"welcome\",\n            params: {\n              name: {\n                type: \"string\"\n              }\n            }\n          }\n        },\n        name: \"greeter\",\n        nodes: [\"node-master\"],\n        settings: {\n          anonymous: \"John\"\n        },\n        metadata: {\n          scaling: true\n        },\n        version: undefined,\n        fullName: \"greeter\",\n        local: true,\n        available: true\n      }, {\n        actions: {\n          \"alpha.echo.reply\": {\n            name: \"alpha.echo.reply\",\n            rawName: \"reply\"\n          }\n        },\n        name: \"echo\",\n        nodes: [\"node-master\"],\n        settings: {},\n        metadata: {},\n        version: \"alpha\",\n        fullName: \"alpha.echo\",\n        local: true,\n        available: true\n      }]);\n    });\n  });","file":"integration/broker-internal.spec.js","skipped":false,"dir":"test"},{"name":"should return action list","suites":["Test internal services"],"updatePoint":{"line":182,"column":31},"line":182,"code":"  it(\"should return action list\", () => {\n    return broker.call(\"$node.actions\").then(res => {\n      expect(res).toEqual([{\n        action: {\n          tracing: false,\n          cache: false,\n          name: \"$node.list\",\n          rawName: \"list\",\n          params: {\n            onlyAvailable: {\n              optional: true,\n              type: \"boolean\",\n              convert: true,\n              default: false\n            },\n            withServices: {\n              optional: true,\n              type: \"boolean\",\n              convert: true,\n              default: false\n            }\n          }\n        },\n        available: true,\n        count: 1,\n        hasLocal: true,\n        name: \"$node.list\"\n      }, {\n        action: {\n          tracing: false,\n          cache: false,\n          name: \"$node.services\",\n          rawName: \"services\",\n          params: {\n            onlyLocal: {\n              optional: true,\n              type: \"boolean\",\n              convert: true,\n              default: false\n            },\n            onlyAvailable: {\n              optional: true,\n              type: \"boolean\",\n              convert: true,\n              default: false\n            },\n            skipInternal: {\n              optional: true,\n              type: \"boolean\",\n              convert: true,\n              default: false\n            },\n            withActions: {\n              optional: true,\n              type: \"boolean\",\n              convert: true,\n              default: false\n            },\n            withEvents: {\n              optional: true,\n              type: \"boolean\",\n              convert: true,\n              default: false\n            },\n            grouping: {\n              optional: true,\n              type: \"boolean\",\n              convert: true,\n              default: true\n            }\n          }\n        },\n        available: true,\n        count: 1,\n        hasLocal: true,\n        name: \"$node.services\"\n      }, {\n        action: {\n          tracing: false,\n          cache: false,\n          name: \"$node.actions\",\n          rawName: \"actions\",\n          params: {\n            onlyLocal: {\n              optional: true,\n              type: \"boolean\",\n              convert: true,\n              default: false\n            },\n            onlyAvailable: {\n              optional: true,\n              type: \"boolean\",\n              convert: true,\n              default: false\n            },\n            skipInternal: {\n              optional: true,\n              type: \"boolean\",\n              convert: true,\n              default: false\n            },\n            withEndpoints: {\n              optional: true,\n              type: \"boolean\",\n              convert: true,\n              default: false\n            }\n          }\n        },\n        available: true,\n        count: 1,\n        hasLocal: true,\n        name: \"$node.actions\"\n      }, {\n        action: {\n          tracing: false,\n          cache: false,\n          name: \"$node.events\",\n          rawName: \"events\",\n          params: {\n            onlyLocal: {\n              optional: true,\n              type: \"boolean\",\n              convert: true,\n              default: false\n            },\n            onlyAvailable: {\n              optional: true,\n              type: \"boolean\",\n              convert: true,\n              default: false\n            },\n            skipInternal: {\n              optional: true,\n              type: \"boolean\",\n              convert: true,\n              default: false\n            },\n            withEndpoints: {\n              optional: true,\n              type: \"boolean\",\n              convert: true,\n              default: false\n            }\n          }\n        },\n        available: true,\n        count: 1,\n        hasLocal: true,\n        name: \"$node.events\"\n      }, {\n        action: {\n          tracing: false,\n          cache: false,\n          name: \"$node.health\",\n          rawName: \"health\"\n        },\n        available: true,\n        count: 1,\n        hasLocal: true,\n        name: \"$node.health\"\n      }, {\n        action: {\n          tracing: false,\n          cache: false,\n          name: \"$node.options\",\n          rawName: \"options\",\n          params: {}\n        },\n        available: true,\n        count: 1,\n        hasLocal: true,\n        name: \"$node.options\"\n      }, {\n        action: {\n          tracing: false,\n          cache: false,\n          name: \"$node.metrics\",\n          rawName: \"metrics\",\n          params: {\n            types: {\n              type: \"multi\",\n              optional: true,\n              rules: [{\n                type: \"string\"\n              }, {\n                type: \"array\",\n                items: \"string\"\n              }]\n            },\n            includes: {\n              type: \"multi\",\n              optional: true,\n              rules: [{\n                type: \"string\"\n              }, {\n                type: \"array\",\n                items: \"string\"\n              }]\n            },\n            excludes: {\n              type: \"multi\",\n              optional: true,\n              rules: [{\n                type: \"string\"\n              }, {\n                type: \"array\",\n                items: \"string\"\n              }]\n            }\n          }\n        },\n        available: true,\n        count: 1,\n        hasLocal: true,\n        name: \"$node.metrics\"\n      }, {\n        action: {\n          name: \"greeter.hello\",\n          rawName: \"hello\"\n        },\n        available: true,\n        count: 1,\n        hasLocal: true,\n        name: \"greeter.hello\"\n      }, {\n        action: {\n          cache: true,\n          name: \"greeter.welcome\",\n          rawName: \"welcome\",\n          params: {\n            name: {\n              type: \"string\"\n            }\n          }\n        },\n        available: true,\n        count: 1,\n        hasLocal: true,\n        name: \"greeter.welcome\"\n      }, {\n        action: {\n          name: \"alpha.echo.reply\",\n          rawName: \"reply\"\n        },\n        available: true,\n        count: 1,\n        hasLocal: true,\n        name: \"alpha.echo.reply\"\n      }]);\n    });\n  });","file":"integration/broker-internal.spec.js","skipped":false,"dir":"test"},{"name":"should return action list (skipInternal, withEndpoints)","suites":["Test internal services"],"updatePoint":{"line":434,"column":61},"line":434,"code":"  it(\"should return action list (skipInternal, withEndpoints)\", () => {\n    return broker.call(\"$node.actions\", {\n      skipInternal: true,\n      withEndpoints: true\n    }).then(res => {\n      expect(res).toEqual([{\n        action: {\n          name: \"greeter.hello\",\n          rawName: \"hello\"\n        },\n        available: true,\n        count: 1,\n        endpoints: [{\n          available: true,\n          nodeID: \"node-master\",\n          state: true\n        }],\n        hasLocal: true,\n        name: \"greeter.hello\"\n      }, {\n        action: {\n          cache: true,\n          name: \"greeter.welcome\",\n          rawName: \"welcome\",\n          params: {\n            name: {\n              type: \"string\"\n            }\n          }\n        },\n        available: true,\n        count: 1,\n        endpoints: [{\n          available: true,\n          nodeID: \"node-master\",\n          state: true\n        }],\n        hasLocal: true,\n        name: \"greeter.welcome\"\n      }, {\n        action: {\n          name: \"alpha.echo.reply\",\n          rawName: \"reply\"\n        },\n        available: true,\n        count: 1,\n        endpoints: [{\n          available: true,\n          nodeID: \"node-master\",\n          state: true\n        }],\n        hasLocal: true,\n        name: \"alpha.echo.reply\"\n      }]);\n    });\n  });","file":"integration/broker-internal.spec.js","skipped":false,"dir":"test"},{"name":"should return event list","suites":["Test internal services"],"updatePoint":{"line":490,"column":30},"line":490,"code":"  it(\"should return event list\", () => {\n    return broker.call(\"$node.events\").then(res => {\n      expect(res).toEqual([{\n        available: true,\n        count: 1,\n        event: {\n          name: \"say.hi\"\n        },\n        group: \"greeter\",\n        hasLocal: true,\n        name: \"say.hi\"\n      }, {\n        available: true,\n        count: 1,\n        event: {\n          name: \"say.hello\"\n        },\n        group: \"greeter\",\n        hasLocal: true,\n        name: \"say.hello\"\n      }]);\n    });\n  });","file":"integration/broker-internal.spec.js","skipped":false,"dir":"test"},{"name":"should return event list (withEndpoints)","suites":["Test internal services"],"updatePoint":{"line":513,"column":46},"line":513,"code":"  it(\"should return event list (withEndpoints)\", () => {\n    return broker.call(\"$node.events\", {\n      withEndpoints: true\n    }).then(res => {\n      expect(res).toEqual([{\n        available: true,\n        count: 1,\n        endpoints: [{\n          available: true,\n          nodeID: \"node-master\",\n          state: true\n        }],\n        event: {\n          name: \"say.hi\"\n        },\n        group: \"greeter\",\n        hasLocal: true,\n        name: \"say.hi\"\n      }, {\n        available: true,\n        count: 1,\n        endpoints: [{\n          available: true,\n          nodeID: \"node-master\",\n          state: true\n        }],\n        event: {\n          name: \"say.hello\"\n        },\n        group: \"greeter\",\n        hasLocal: true,\n        name: \"say.hello\"\n      }]);\n    });\n  });","file":"integration/broker-internal.spec.js","skipped":false,"dir":"test"},{"name":"should return health of node","suites":["Test internal services"],"updatePoint":{"line":548,"column":34},"line":548,"code":"  it(\"should return health of node\", () => {\n    return broker.call(\"$node.health\").then(res => {\n      expect(res).toBeDefined();\n      expect(res.cpu).toBeDefined();\n      expect(res.cpu.load1).toBeDefined();\n      expect(res.cpu.load5).toBeDefined();\n      expect(res.cpu.load15).toBeDefined();\n      expect(res.cpu.cores).toBeDefined();\n      expect(res.cpu.utilization).toBeDefined();\n      expect(res.mem).toBeDefined();\n      expect(res.mem.free).toBeDefined();\n      expect(res.mem.total).toBeDefined();\n      expect(res.mem.percent).toBeDefined();\n      expect(res.os).toBeDefined();\n      expect(res.os.uptime).toBeDefined();\n      expect(res.os.type).toBeDefined();\n      expect(res.os.release).toBeDefined();\n      expect(res.os.hostname).toBeDefined();\n      expect(res.os.arch).toBeDefined();\n      expect(res.os.platform).toBeDefined();\n      expect(res.os.user).toBeDefined();\n      expect(res.net).toBeDefined();\n      expect(res.net.ip).toBeDefined();\n      expect(res.client).toBeDefined();\n      expect(res.process).toBeDefined();\n      expect(res.process.pid).toBeDefined();\n      expect(res.process.memory).toBeDefined();\n      expect(res.process.uptime).toBeDefined();\n      expect(res.process.argv).toBeDefined();\n      expect(res.time).toBeDefined();\n      expect(res.time.now).toBeDefined();\n      expect(res.time.iso).toBeDefined();\n      expect(res.time.utc).toBeDefined();\n    });\n  });","file":"integration/broker-internal.spec.js","skipped":false,"dir":"test"},{"name":"should return metrics","suites":["Test internal services"],"updatePoint":{"line":583,"column":27},"line":583,"code":"  it(\"should return metrics\", () => {\n    return broker.call(\"$node.metrics\", {\n      includes: [\"moleculer.broker.**\"]\n    }).then(res => {\n      expect(res).toEqual([{\n        description: \"Moleculer namespace\",\n        labelNames: [],\n        name: \"moleculer.broker.namespace\",\n        type: \"info\",\n        unit: undefined,\n        values: [{\n          key: \"\",\n          labels: {},\n          timestamp: expect.any(Number),\n          value: \"\"\n        }]\n      }, {\n        description: \"ServiceBroker started\",\n        labelNames: [],\n        name: \"moleculer.broker.started\",\n        type: \"gauge\",\n        unit: undefined,\n        values: [{\n          key: \"\",\n          labels: {},\n          timestamp: expect.any(Number),\n          value: 1\n        }]\n      }, {\n        description: \"Number of local services\",\n        labelNames: [],\n        name: \"moleculer.broker.local.services.total\",\n        type: \"gauge\",\n        unit: undefined,\n        values: [{\n          key: \"\",\n          labels: {},\n          timestamp: expect.any(Number),\n          value: 3\n        }]\n      }, {\n        description: \"Number of local middlewares\",\n        labelNames: [],\n        name: \"moleculer.broker.middlewares.total\",\n        type: \"gauge\",\n        unit: undefined,\n        values: [{\n          key: \"\",\n          labels: {},\n          timestamp: expect.any(Number),\n          value: 13\n        }]\n      }]);\n    });\n  });","file":"integration/broker-internal.spec.js","skipped":false,"dir":"test"},{"name":"should call echo.reply on b2","suites":["Test RPC"],"updatePoint":{"line":53,"column":34},"line":53,"code":"  it(\"should call echo.reply on b2\", () => {\n    return b1.call(\"echo.reply\", {\n      data: 100\n    }).then(res => {\n      expect(res).toEqual({\n        data: 100\n      });\n      expect(b2ReplyHandler).toHaveBeenCalledTimes(1);\n    });\n  });","file":"integration/broker-transit.spec.js","skipped":false,"dir":"test"},{"name":"should call double RPC (b1 -> b2 -> b1 -> b2 -> b1) & emit an event to b1","suites":["Test RPC"],"updatePoint":{"line":63,"column":79},"line":63,"code":"  it(\"should call double RPC (b1 -> b2 -> b1 -> b2 -> b1) & emit an event to b1\", () => {\n    return b1.call(\"echo.helloProxy\", {\n      name: \"Icebob\"\n    }).then(res => {\n      expect(res).toEqual(\"Hello Icebob (proxied)\");\n    });\n  });","file":"integration/broker-transit.spec.js","skipped":false,"dir":"test"},{"name":"should emit & receive an event via transporter","suites":["Test RPC"],"updatePoint":{"line":70,"column":52},"line":70,"code":"  it(\"should emit & receive an event via transporter\", () => {\n    return b1.call(\"echo.emitter\", {\n      a: 5\n    }).then(() => {\n      expect(eventHandler).toHaveBeenCalledTimes(1);\n      expect(eventHandler).toHaveBeenCalledWith({\n        a: 5\n      }, \"node-2\", \"emitter.hello.event\", expect.any(b1.ContextFactory));\n    });\n  });","file":"integration/broker-transit.spec.js","skipped":false,"dir":"test"},{"name":"should return with RequestTimeout","suites":["Test RPC"],"updatePoint":{"line":80,"column":39},"line":80,"code":"  it(\"should return with RequestTimeout\", () => {\n    return b1.call(\"echo.slow\", null, {\n      timeout: 100\n    }).catch(err => {\n      expect(err.name).toBe(\"RequestTimeoutError\");\n      expect([\"node-1\", \"node-2\"]).toContain(err.data.nodeID);\n      expect(err.data.action).toBe(\"echo.slow\");\n    });\n  });","file":"integration/broker-transit.spec.js","skipped":false,"dir":"test"},{"name":"should return with fallbackResponse","suites":["Test RPC"],"updatePoint":{"line":89,"column":41},"line":89,"code":"  it(\"should return with fallbackResponse\", () => {\n    let fallbackResponse = \"MAYBE\";\n    return b1.call(\"echo.slow\", null, {\n      timeout: 100,\n      fallbackResponse\n    }).then(res => {\n      expect(res).toBe(\"MAYBE\");\n    });\n  });","file":"integration/broker-transit.spec.js","skipped":false,"dir":"test"},{"name":"should have event listener for emitter.some.thing","suites":["Test RPC"],"updatePoint":{"line":98,"column":55},"line":98,"code":"  it(\"should have event listener for emitter.some.thing\", () => {\n    expect(b1.hasEventListener(\"emitter.some.thing\")).toBe(true);\n    expect(b2.hasEventListener(\"emitter.some.thing\")).toBe(true);\n    let res = b1.getEventListeners(\"emitter.some.thing\");\n    expect(res.length).toBe(1);\n    expect(res[0].id).toBe(\"node-1\");\n    expect(res[0].event.name).toBe(\"emitter.**\");\n    res = b2.getEventListeners(\"emitter.some.thing\");\n    expect(res.length).toBe(1);\n    expect(res[0].id).toBe(\"node-1\");\n    expect(res[0].event.name).toBe(\"emitter.**\");\n  });","file":"integration/broker-transit.spec.js","skipped":false,"dir":"test"},{"name":"should not have event listener for other.some.thing","suites":["Test RPC"],"updatePoint":{"line":110,"column":57},"line":110,"code":"  it(\"should not have event listener for other.some.thing\", () => {\n    expect(b1.hasEventListener(\"other.some.thing\")).toBe(false);\n    expect(b2.hasEventListener(\"other.some.thing\")).toBe(false);\n    let res = b1.getEventListeners(\"other.some.thing\");\n    expect(res.length).toBe(0);\n    res = b2.getEventListeners(\"other.some.thing\");\n    expect(res.length).toBe(0);\n  });","file":"integration/broker-transit.spec.js","skipped":false,"dir":"test"},{"name":"should create service from schema","suites":["Test load services"],"updatePoint":{"line":17,"column":39},"line":17,"code":"  it(\"should create service from schema\", () => {\n    let handler = jest.fn();\n    broker.createService({\n      name: \"mailer\",\n      version: 2,\n      actions: {\n        send: handler\n      }\n    });\n    return broker.start().catch(protectReject).then(() => {\n      expect(broker.getLocalService(\"mailer\", 2)).toBeDefined();\n      expect(broker.registry.actions.isAvailable(\"v2.mailer.send\")).toBe(true);\n    }).then(() => {\n      return broker.call(\"v2.mailer.send\").then(() => {\n        expect(handler).toHaveBeenCalledTimes(1);\n      });\n    }).catch(protectReject).then(() => broker.stop());\n  });","file":"integration/broker.spec.js","skipped":false,"dir":"test"},{"name":"should load all services","suites":["Test load services"],"updatePoint":{"line":35,"column":30},"line":35,"code":"  it(\"should load all services\", () => {\n    let count = broker.loadServices(\"./test/services\");\n    expect(count).toBe(5);\n    return broker.start().catch(protectReject).then(() => {\n      expect(broker.getLocalService(\"math\")).toBeDefined();\n      expect(broker.getLocalService(\"posts\")).toBeDefined();\n      expect(broker.getLocalService(\"users\")).toBeDefined();\n      expect(broker.getLocalService(\"test\")).toBeDefined();\n    }).then(() => broker.stop());\n  });","file":"integration/broker.spec.js","skipped":false,"dir":"test"},{"name":"should create service from ES6 instance without schema mods","suites":["Test load services"],"updatePoint":{"line":45,"column":65},"line":45,"code":"  it(\"should create service from ES6 instance without schema mods\", () => {\n    const handler = jest.fn();\n\n    class ES6Service extends Service {\n      constructor(broker, schemaMods) {\n        super(broker);\n        this.name = \"es6-without-schema-mods\";\n        this.version = 2;\n        this.actions = {\n          send: handler\n        };\n\n        if (schemaMods && schemaMods.version) {\n          this.version = schemaMods.version;\n        }\n\n        this.parseServiceSchema(Object.assign({}, this));\n      }\n\n    }\n\n    broker.createService(ES6Service);\n    return broker.start().catch(protectReject).then(() => {\n      expect(broker.getLocalService(\"es6-without-schema-mods\", 2)).toBeDefined();\n      expect(broker.registry.actions.isAvailable(\"v2.es6-without-schema-mods.send\")).toBe(true);\n    }).then(() => {\n      return broker.call(\"v2.es6-without-schema-mods.send\").then(() => {\n        expect(handler).toHaveBeenCalledTimes(1);\n      });\n    }).catch(protectReject).then(() => broker.stop());\n  });","file":"integration/broker.spec.js","skipped":false,"dir":"test"},{"name":"should create service from ES6 instance with schema mods","suites":["Test load services"],"updatePoint":{"line":76,"column":62},"line":76,"code":"  it(\"should create service from ES6 instance with schema mods\", () => {\n    const handler = jest.fn();\n\n    class ES6Service extends Service {\n      constructor(broker, schemaMods) {\n        super(broker);\n        this.name = \"es6-with-schema-mods\";\n        this.version = 2;\n        this.actions = {\n          send: handler\n        };\n\n        if (schemaMods && schemaMods.version) {\n          this.version = schemaMods.version;\n        }\n\n        this.parseServiceSchema(Object.assign({}, this));\n      }\n\n    }\n\n    broker.createService(ES6Service, {\n      version: 3\n    });\n    return broker.start().catch(protectReject).then(() => {\n      expect(broker.getLocalService(\"es6-with-schema-mods\", 3)).toBeDefined();\n      expect(broker.registry.actions.isAvailable(\"v3.es6-with-schema-mods.send\")).toBe(true);\n    }).then(() => {\n      return broker.call(\"v3.es6-with-schema-mods.send\").then(() => {\n        expect(handler).toHaveBeenCalledTimes(1);\n      });\n    }).catch(protectReject).then(() => broker.stop());\n  });","file":"integration/broker.spec.js","skipped":false,"dir":"test"},{"name":"should return context & call the action handler","suites":["Test local call"],"updatePoint":{"line":131,"column":53},"line":131,"code":"  it(\"should return context & call the action handler\", () => {\n    return broker.call(\"posts.find\").then(ctx => {\n      expect(ctx).toBeDefined();\n      expect(ctx.broker).toBe(broker);\n      expect(ctx.action.name).toBe(\"posts.find\");\n      expect(ctx.nodeID).toBe(broker.nodeID);\n      expect(ctx.params).toBeDefined();\n      expect(actionHandler).toHaveBeenCalledTimes(1);\n      expect(actionHandler).toHaveBeenCalledWith(ctx);\n    });\n  });","file":"integration/broker.spec.js","skipped":false,"dir":"test"},{"name":"should set params to context","suites":["Test local call"],"updatePoint":{"line":142,"column":34},"line":142,"code":"  it(\"should set params to context\", () => {\n    let params = {\n      a: 1\n    };\n    return broker.call(\"posts.find\", params).then(ctx => {\n      expect(ctx.params).toEqual({\n        a: 1\n      });\n    });\n  });","file":"integration/broker.spec.js","skipped":false,"dir":"test"},{"name":"should create a sub context of parent context","suites":["Test local call"],"updatePoint":{"line":152,"column":51},"line":152,"code":"  it(\"should create a sub context of parent context\", () => {\n    let parentCtx = new Context(broker);\n    parentCtx.params = {\n      a: 5,\n      b: 2\n    };\n    parentCtx.meta = {\n      user: \"John\",\n      roles: [\"user\"],\n      status: true\n    };\n    let params = {\n      a: 1\n    };\n    let meta = {\n      user: \"Jane\",\n      roles: [\"admin\"],\n      verified: true\n    };\n    parentCtx.tracing = true;\n    parentCtx.requestID = \"12345\";\n    return broker.call(\"posts.find\", params, {\n      parentCtx,\n      meta\n    }).then(ctx => {\n      expect(ctx.id).not.toBe(parentCtx.id);\n      expect(ctx.params).toBe(params);\n      expect(ctx.meta).toEqual({\n        user: \"Jane\",\n        roles: [\"admin\"],\n        status: true,\n        verified: true\n      });\n      expect(ctx.level).toBe(2);\n      expect(ctx.tracing).toBe(true);\n      expect(ctx.parentID).toBe(parentCtx.id);\n      expect(ctx.requestID).toBe(\"12345\");\n    });\n  });","file":"integration/broker.spec.js","skipped":false,"dir":"test"},{"name":"should merge meta from sub context to parent context","suites":["Test local call"],"updatePoint":{"line":191,"column":58},"line":191,"code":"  it(\"should merge meta from sub context to parent context\", () => {\n    let ctx = new Context(broker, {});\n    ctx.meta = {\n      user: \"John\",\n      roles: [\"user\"],\n      status: true\n    };\n    let meta = {\n      user: \"Jane\",\n      roles: [\"admin\"],\n      verified: true\n    };\n    ctx.tracing = true;\n    ctx.requestID = \"12345\";\n    return ctx.call(\"posts.export\", {}, {\n      meta\n    }).then(newCtx => {\n      expect(newCtx.id).not.toBe(ctx.id);\n      expect(newCtx.level).toBe(2);\n      expect(newCtx.tracing).toBe(true);\n      expect(newCtx.parentID).toBe(ctx.id);\n      expect(newCtx.requestID).toBe(\"12345\");\n      expect(newCtx.meta).toEqual({\n        roles: [\"admin\"],\n        status: true,\n        user: \"Jane\",\n        verified: true,\n        headers: {\n          \"Content-Type\": \"text/csv\"\n        }\n      });\n      expect(ctx.meta).toEqual({\n        roles: [\"admin\"],\n        status: true,\n        user: \"Jane\",\n        verified: true,\n        headers: {\n          \"Content-Type\": \"text/csv\"\n        }\n      });\n    });\n  });","file":"integration/broker.spec.js","skipped":false,"dir":"test"},{"name":"should call the v1 handler","suites":["Test versioned action registration"],"updatePoint":{"line":256,"column":32},"line":256,"code":"  it(\"should call the v1 handler\", () => {\n    return broker.call(\"v1.posts.find\").then(() => {\n      expect(findV1).toHaveBeenCalledTimes(1);\n    });\n  });","file":"integration/broker.spec.js","skipped":false,"dir":"test"},{"name":"should call the v2 handler","suites":["Test versioned action registration"],"updatePoint":{"line":261,"column":32},"line":261,"code":"  it(\"should call the v2 handler\", () => {\n    return broker.call(\"v2.posts.find\").then(() => {\n      expect(findV2).toHaveBeenCalledTimes(1);\n    });\n  });","file":"integration/broker.spec.js","skipped":false,"dir":"test"},{"name":"should call action handler because the cache is empty","suites":["Test cachers"],"updatePoint":{"line":289,"column":59},"line":289,"code":"  it(\"should call action handler because the cache is empty\", () => {\n    return broker.call(\"user.get\").then(res => {\n      expect(res).toBe(\"Action result\");\n      expect(handler).toHaveBeenCalledTimes(1);\n    });\n  });","file":"integration/broker.spec.js","skipped":false,"dir":"test"},{"name":"should NOT call action handler because the cache is loaded","suites":["Test cachers"],"updatePoint":{"line":295,"column":64},"line":295,"code":"  it(\"should NOT call action handler because the cache is loaded\", () => {\n    handler.mockClear();\n    return broker.call(\"user.get\").then(res => {\n      expect(res).toBe(\"Action result\");\n      expect(handler).toHaveBeenCalledTimes(0);\n    });\n  });","file":"integration/broker.spec.js","skipped":false,"dir":"test"},{"name":"clear the cache with `save` action","suites":["Test cachers"],"updatePoint":{"line":302,"column":40},"line":302,"code":"  it(\"clear the cache with `save` action\", () => {\n    handler.mockClear();\n    return broker.call(\"user.save\").then(() => {\n      expect(handler).toHaveBeenCalledTimes(0);\n    });\n  });","file":"integration/broker.spec.js","skipped":false,"dir":"test"},{"name":"should NOT call action handler because the cache is loaded","suites":["Test cachers"],"updatePoint":{"line":308,"column":64},"line":308,"code":"  it(\"should NOT call action handler because the cache is loaded\", () => {\n    handler.mockClear();\n    return broker.call(\"user.get\").then(res => {\n      expect(res).toBe(\"Action result\");\n      expect(handler).toHaveBeenCalledTimes(0);\n    });\n  });","file":"integration/broker.spec.js","skipped":false,"dir":"test"},{"name":"should call 'happy' x5 without problem","suites":["Test circuit breaker"],"updatePoint":{"line":60,"column":44},"line":60,"code":"  it(\"should call 'happy' x5 without problem\", () => {\n    return master1.call(\"cb.happy\").then(() => master1.call(\"cb.happy\")).then(() => master1.call(\"cb.happy\")).then(() => master1.call(\"cb.happy\")).then(() => master1.call(\"cb.happy\")).then(res => expect(res).toBe(\"OK\")).catch(protectReject);\n  });","file":"integration/circuit-breaker.spec.js","skipped":false,"dir":"test"},{"name":"should call 'angry' and throw MoleculerError","suites":["Test circuit breaker"],"updatePoint":{"line":63,"column":50},"line":63,"code":"  it(\"should call 'angry' and throw MoleculerError\", () => {\n    return master1.call(\"cb.angry\").then(protectReject).catch(err => expect(err.name).toBe(\"MoleculerError\")).then(() => master1.call(\"cb.angry\")).then(protectReject).catch(err => expect(err.name).toBe(\"MoleculerError\")).then(() => master1.call(\"cb.angry\", {\n      please: true\n    })).then(res => expect(res).toBe(\"Just for you!\")).catch(protectReject).then(() => master1.call(\"cb.angry\", {\n      please: true\n    })).then(res => expect(res).toBe(\"Just for you!\")).catch(protectReject).then(() => master1.call(\"cb.angry\")).then(protectReject).catch(err => expect(err.name).toBe(\"MoleculerError\")).then(() => master1.call(\"cb.angry\")).then(protectReject).catch(err => {\n      expect(err.name).toBe(\"ServiceNotAvailableError\");\n      expect(cbOpenedHandler).toHaveBeenCalledTimes(1);\n      expect(cbOpenedHandler).toHaveBeenCalledWith({\n        nodeID: \"slave-1\",\n        service: \"cb\",\n        action: \"cb.angry\",\n        failures: 3,\n        count: 5,\n        rate: 0.6\n      });\n    });\n  });","file":"integration/circuit-breaker.spec.js","skipped":false,"dir":"test"},{"name":"should switched to half-open and again open","suites":["Test circuit breaker"],"updatePoint":{"line":81,"column":49},"line":81,"code":"  it(\"should switched to half-open and again open\", () => {\n    cbOpenedHandler.mockClear();\n    clock.tick(6000);\n    return master1.call(\"cb.angry\").then(protectReject).catch(err => expect(err.name).toBe(\"MoleculerError\")).then(() => master1.call(\"cb.angry\", {\n      please: true\n    })).then(protectReject).catch(err => {\n      expect(err.name).toBe(\"ServiceNotAvailableError\");\n      expect(cbOpenedHandler).toHaveBeenCalledTimes(1);\n      expect(cbOpenedHandler).toHaveBeenCalledWith({\n        nodeID: \"slave-1\",\n        service: \"cb\",\n        action: \"cb.angry\",\n        failures: 4,\n        count: 6,\n        rate: 0.6666666666666666\n      });\n    });\n  });","file":"integration/circuit-breaker.spec.js","skipped":false,"dir":"test"},{"name":"should switched to half-open and close","suites":["Test circuit breaker"],"updatePoint":{"line":99,"column":44},"line":99,"code":"  it(\"should switched to half-open and close\", () => {\n    clock.tick(6000);\n    return master1.call(\"cb.angry\", {\n      please: true\n    }).then(res => expect(res).toBe(\"Just for you!\")).catch(protectReject).then(() => master1.call(\"cb.angry\", {\n      please: true\n    })).then(res => expect(res).toBe(\"Just for you!\")).catch(protectReject);\n  }); // TODO: Not working because timer created before lolex install.","file":"integration/circuit-breaker.spec.js","skipped":false,"dir":"test"},{"name":"should reset values by window timer","suites":["Test circuit breaker"],"line":108,"code":"  it.skip(\"should reset values by window timer\", () => {","file":"integration/circuit-breaker.spec.js","skipped":true,"dir":"test"},{"name":"send a 'user.created' event with balancing #1","suites":["Test event balancing"],"updatePoint":{"line":144,"column":51},"line":144,"code":"  it(\"send a 'user.created' event with balancing #1\", () => {\n    master.emit(\"user.created\");\n    expect(flow).toEqual([\"user-1-users-uc\", \"pay-1-payment-uc\", \"mail-1-mail-u*\"]);\n  });","file":"integration/event-balancer.spec.js","skipped":false,"dir":"test"},{"name":"send a 'user.created' event with balancing #2","suites":["Test event balancing"],"updatePoint":{"line":148,"column":51},"line":148,"code":"  it(\"send a 'user.created' event with balancing #2\", () => {\n    master.emit(\"user.created\");\n    expect(flow).toEqual([\"user-2-users-uc\", \"pay-2-payment-uc\", \"mail-2-mail-u*\"]);\n  });","file":"integration/event-balancer.spec.js","skipped":false,"dir":"test"},{"name":"send a 'user.created' event with balancing #3","suites":["Test event balancing"],"updatePoint":{"line":152,"column":51},"line":152,"code":"  it(\"send a 'user.created' event with balancing #3\", () => {\n    master.emit(\"user.created\");\n    expect(flow).toEqual([\"user-3-users-uc\", \"pay-1-payment-uc\", \"mail-1-mail-u*\"]);\n  });","file":"integration/event-balancer.spec.js","skipped":false,"dir":"test"},{"name":"send a 'user.created' event with balancing #4","suites":["Test event balancing"],"updatePoint":{"line":156,"column":51},"line":156,"code":"  it(\"send a 'user.created' event with balancing #4\", () => {\n    master.emit(\"user.created\");\n    expect(flow).toEqual([\"user-1-users-uc\", \"pay-2-payment-uc\", \"mail-2-mail-u*\"]);\n  });","file":"integration/event-balancer.spec.js","skipped":false,"dir":"test"},{"name":"send a 'user.updated' event with balancing #1","suites":["Test event balancing"],"updatePoint":{"line":160,"column":51},"line":160,"code":"  it(\"send a 'user.updated' event with balancing #1\", () => {\n    master.emit(\"user.updated\");\n    expect(flow).toEqual([\"mail-1-mail-u*\"]);\n  });","file":"integration/event-balancer.spec.js","skipped":false,"dir":"test"},{"name":"send a 'user.updated' event with balancing #2","suites":["Test event balancing"],"updatePoint":{"line":164,"column":51},"line":164,"code":"  it(\"send a 'user.updated' event with balancing #2\", () => {\n    master.emit(\"user.updated\");\n    expect(flow).toEqual([\"mail-2-mail-u*\"]);\n  });","file":"integration/event-balancer.spec.js","skipped":false,"dir":"test"},{"name":"send a 'user.created' event to filtered groups #1","suites":["Test event balancing"],"updatePoint":{"line":168,"column":55},"line":168,"code":"  it(\"send a 'user.created' event to filtered groups #1\", () => {\n    master.emit(\"user.created\", null, \"payment\");\n    expect(flow).toEqual([\"pay-1-payment-uc\"]);\n  });","file":"integration/event-balancer.spec.js","skipped":false,"dir":"test"},{"name":"send a 'user.created' event to filtered groups #2","suites":["Test event balancing"],"updatePoint":{"line":172,"column":55},"line":172,"code":"  it(\"send a 'user.created' event to filtered groups #2\", () => {\n    master.emit(\"user.created\", null, [\"payment\", \"mail\"]);\n    expect(flow).toEqual([\"pay-2-payment-uc\", \"mail-1-mail-u*\"]);\n  });","file":"integration/event-balancer.spec.js","skipped":false,"dir":"test"},{"name":"broadcast a 'user.created' event to all nodes & services","suites":["Test event balancing"],"updatePoint":{"line":176,"column":62},"line":176,"code":"  it(\"broadcast a 'user.created' event to all nodes & services\", () => {\n    master.broadcast(\"user.created\");\n    expect(flow).toEqual([\"user-1-users-uc\", \"user-2-users-uc\", \"user-3-users-uc\", \"pay-1-payment-uc\", \"pay-2-payment-uc\", \"mail-1-mail-u*\", \"mail-2-mail-u*\"]);\n  });","file":"integration/event-balancer.spec.js","skipped":false,"dir":"test"},{"name":"broadcast a 'user.created' event to filtered group","suites":["Test event balancing"],"updatePoint":{"line":180,"column":56},"line":180,"code":"  it(\"broadcast a 'user.created' event to filtered group\", () => {\n    master.broadcast(\"user.created\", null, \"payment\");\n    expect(flow).toEqual([\"pay-1-payment-uc\", \"pay-2-payment-uc\"]);\n  });","file":"integration/event-balancer.spec.js","skipped":false,"dir":"test"},{"name":"broadcast a 'user.created' event to filtered groups","suites":["Test event balancing"],"updatePoint":{"line":184,"column":57},"line":184,"code":"  it(\"broadcast a 'user.created' event to filtered groups\", () => {\n    master.broadcast(\"user.created\", null, [\"payment\", \"mail\"]);\n    expect(flow).toEqual([\"pay-1-payment-uc\", \"pay-2-payment-uc\", \"mail-1-mail-u*\", \"mail-2-mail-u*\"]);\n  });","file":"integration/event-balancer.spec.js","skipped":false,"dir":"test"},{"name":"broadcastLocal a 'user.created' event to local services","suites":["Test event balancing"],"updatePoint":{"line":188,"column":61},"line":188,"code":"  it(\"broadcastLocal a 'user.created' event to local services\", () => {\n    master.broadcastLocal(\"user.created\");\n    expect(flow).toEqual([]);\n  });","file":"integration/event-balancer.spec.js","skipped":false,"dir":"test"},{"name":"broadcastLocal an 'other.thing' event to local services","suites":["Test event balancing"],"updatePoint":{"line":192,"column":61},"line":192,"code":"  it(\"broadcastLocal an 'other.thing' event to local services\", () => {\n    master.broadcastLocal(\"other.thing\");\n    expect(flow).toEqual([\"master-other-ot\", \"master-other2-ot\"]);\n  });","file":"integration/event-balancer.spec.js","skipped":false,"dir":"test"},{"name":"broadcast an 'other.thing' event to all services","suites":["Test event balancing"],"updatePoint":{"line":196,"column":54},"line":196,"code":"  it(\"broadcast an 'other.thing' event to all services\", () => {\n    master.broadcast(\"other.thing\");\n    expect(flow).toEqual([\"user-2-other-ot\", \"pay-2-other2-ot\", \"master-other-ot\", \"master-other2-ot\"]);\n  });","file":"integration/event-balancer.spec.js","skipped":false,"dir":"test"},{"name":"emit an 'other.thing' event with preferLocal","suites":["Test event balancing"],"updatePoint":{"line":200,"column":50},"line":200,"code":"  it(\"emit an 'other.thing' event with preferLocal\", () => {\n    master.emit(\"other.thing\");\n    expect(flow).toEqual([\"master-other-ot\", \"master-other2-ot\"]);\n  });","file":"integration/event-balancer.spec.js","skipped":false,"dir":"test"},{"name":"emit an 'other.thing' event with preferLocal 2nd","suites":["Test event balancing"],"updatePoint":{"line":204,"column":54},"line":204,"code":"  it(\"emit an 'other.thing' event with preferLocal 2nd\", () => {\n    master.emit(\"other.thing\");\n    expect(flow).toEqual([\"master-other-ot\", \"master-other2-ot\"]);\n  });","file":"integration/event-balancer.spec.js","skipped":false,"dir":"test"},{"name":"emit an 'other.thing' without preferLocal","suites":["Test event balancing"],"updatePoint":{"line":208,"column":47},"line":208,"code":"  it(\"emit an 'other.thing' without preferLocal\", () => {\n    master.registry.opts.preferLocal = false;\n    master.emit(\"other.thing\");\n    expect(flow).toEqual([\"master-other-ot\", \"master-other2-ot\"]);\n    flow = [];\n    master.emit(\"other.thing\");\n    expect(flow).toEqual([\"user-2-other-ot\", \"pay-2-other2-ot\"]);\n  }); // --- LOCAL EVENTS ---","file":"integration/event-balancer.spec.js","skipped":false,"dir":"test"},{"name":"broadcast a '$internal.user.event' event on master","suites":["Test event balancing"],"updatePoint":{"line":217,"column":56},"line":217,"code":"  it(\"broadcast a '$internal.user.event' event on master\", () => {\n    master.broadcast(\"$internal.user.event\");\n    expect(flow).toEqual([\"user-1-users-$iue\", \"user-2-users-$iue\", \"user-3-users-$iue\"]);\n  });","file":"integration/event-balancer.spec.js","skipped":false,"dir":"test"},{"name":"broadcast a '$internal.user.event' event on node1","suites":["Test event balancing"],"updatePoint":{"line":221,"column":55},"line":221,"code":"  it(\"broadcast a '$internal.user.event' event on node1\", () => {\n    nodeUser1.broadcast(\"$internal.user.event\");\n    expect(flow).toEqual([\"user-2-users-$iue\", \"user-3-users-$iue\", \"nodeUser1-on-$iue\", \"user-1-users-$iue\"]);\n  });","file":"integration/event-balancer.spec.js","skipped":false,"dir":"test"},{"name":"broadcastLocal a '$internal.user.event' event on node1","suites":["Test event balancing"],"updatePoint":{"line":225,"column":60},"line":225,"code":"  it(\"broadcastLocal a '$internal.user.event' event on node1\", () => {\n    nodeUser1.broadcastLocal(\"$internal.user.event\");\n    expect(flow).toEqual([\"nodeUser1-on-$iue\", \"user-1-users-$iue\"]);\n  });","file":"integration/event-balancer.spec.js","skipped":false,"dir":"test"},{"name":"emit a '$internal.user.event' event on node1","suites":["Test event balancing"],"updatePoint":{"line":229,"column":50},"line":229,"code":"  it(\"emit a '$internal.user.event' event on node1\", () => {\n    nodeUser1.emit(\"$internal.user.event\");\n    expect(flow).toEqual([\"nodeUser1-on-$iue\", \"user-1-users-$iue\"]);\n  });","file":"integration/event-balancer.spec.js","skipped":false,"dir":"test"},{"name":"send a 'user.created' event with balancing #1","suites":["Test multiple handler in the same group balancing"],"updatePoint":{"line":260,"column":51},"line":260,"code":"  it(\"send a 'user.created' event with balancing #1\", () => {\n    master.emit(\"user.created\");\n    expect(flow).toEqual([\"master-payment-uc\", \"master-users-uc\"]);\n  });","file":"integration/event-balancer.spec.js","skipped":false,"dir":"test"},{"name":"send a 'user.created' event with balancing #2","suites":["Test multiple handler in the same group balancing"],"updatePoint":{"line":264,"column":51},"line":264,"code":"  it(\"send a 'user.created' event with balancing #2\", () => {\n    master.emit(\"user.created\");\n    expect(flow).toEqual([\"master-stripe-uc\", \"master-users-uc\"]);\n  });","file":"integration/event-balancer.spec.js","skipped":false,"dir":"test"},{"name":"send a 'user.created' event with balancing to filtered group","suites":["Test multiple handler in the same group balancing"],"updatePoint":{"line":268,"column":66},"line":268,"code":"  it(\"send a 'user.created' event with balancing to filtered group\", () => {\n    master.emit(\"user.created\", null, \"payment\");\n    expect(flow).toEqual([\"master-payment-uc\"]);\n  }); // --- EMIT WITHOUT LOCALPREFER ---","file":"integration/event-balancer.spec.js","skipped":false,"dir":"test"},{"name":"send a 'user.created' event with balancing #1","suites":["Test multiple handler in the same group balancing"],"updatePoint":{"line":273,"column":51},"line":273,"code":"  it(\"send a 'user.created' event with balancing #1\", () => {\n    master.registry.opts.preferLocal = false;\n    nodePay1.registry.opts.preferLocal = false;\n    master.emit(\"user.created\");\n    expect(flow).toEqual([\"master-stripe-uc\", \"master-users-uc\"]);\n  });","file":"integration/event-balancer.spec.js","skipped":false,"dir":"test"},{"name":"send a 'user.created' event with balancing #2","suites":["Test multiple handler in the same group balancing"],"updatePoint":{"line":279,"column":51},"line":279,"code":"  it(\"send a 'user.created' event with balancing #2\", () => {\n    master.emit(\"user.created\");\n    expect(flow).toEqual([\"master-users-uc\", \"pay-1-payment-uc\"]);\n  });","file":"integration/event-balancer.spec.js","skipped":false,"dir":"test"},{"name":"send a 'user.created' event with balancing to filtered group #1","suites":["Test multiple handler in the same group balancing"],"updatePoint":{"line":283,"column":69},"line":283,"code":"  it(\"send a 'user.created' event with balancing to filtered group #1\", () => {\n    master.emit(\"user.created\", null, \"payment\");\n    expect(flow).toEqual([\"pay-1-stripe-uc\"]);\n  });","file":"integration/event-balancer.spec.js","skipped":false,"dir":"test"},{"name":"send a 'user.created' event with balancing to filtered group #2","suites":["Test multiple handler in the same group balancing"],"updatePoint":{"line":287,"column":69},"line":287,"code":"  it(\"send a 'user.created' event with balancing to filtered group #2\", () => {\n    master.emit(\"user.created\", null, \"payment\");\n    expect(flow).toEqual([\"master-payment-uc\"]);\n  }); // --- BROADCAST ---","file":"integration/event-balancer.spec.js","skipped":false,"dir":"test"},{"name":"broadcast a 'user.created' event to all nodes & services","suites":["Test multiple handler in the same group balancing"],"updatePoint":{"line":292,"column":62},"line":292,"code":"  it(\"broadcast a 'user.created' event to all nodes & services\", () => {\n    master.broadcast(\"user.created\");\n    expect(flow).toEqual([\"pay-1-payment-uc\", \"pay-1-stripe-uc\", \"master-payment-uc\", \"master-stripe-uc\", \"master-users-uc\"]);\n  });","file":"integration/event-balancer.spec.js","skipped":false,"dir":"test"},{"name":"broadcast a 'user.created' event to filtered group","suites":["Test multiple handler in the same group balancing"],"updatePoint":{"line":296,"column":56},"line":296,"code":"  it(\"broadcast a 'user.created' event to filtered group\", () => {\n    master.broadcast(\"user.created\", null, \"payment\");\n    expect(flow).toEqual([\"pay-1-payment-uc\", \"pay-1-stripe-uc\", \"master-payment-uc\", \"master-stripe-uc\"]);\n  });","file":"integration/event-balancer.spec.js","skipped":false,"dir":"test"},{"name":"broadcast a 'user.created' event to filtered groups","suites":["Test multiple handler in the same group balancing"],"updatePoint":{"line":300,"column":57},"line":300,"code":"  it(\"broadcast a 'user.created' event to filtered groups\", () => {\n    master.broadcast(\"user.created\", null, [\"payment\"]);\n    expect(flow).toEqual([\"pay-1-payment-uc\", \"pay-1-stripe-uc\", \"master-payment-uc\", \"master-stripe-uc\"]);\n  });","file":"integration/event-balancer.spec.js","skipped":false,"dir":"test"},{"name":"should register plugins","suites":["Test middleware system","Test with sync & async middlewares"],"updatePoint":{"line":61,"column":31},"line":61,"code":"    it(\"should register plugins\", () => {\n      expect(broker.middlewares.count()).toBe(2);\n    });","file":"integration/middlewares.spec.js","skipped":false,"dir":"test"},{"name":"should call all middlewares functions & master","suites":["Test middleware system","Test with sync & async middlewares"],"updatePoint":{"line":64,"column":54},"line":64,"code":"    it(\"should call all middlewares functions & master\", () => {\n      let p = broker.call(\"test.foo\");\n      expect(utils.isPromise(p)).toBe(true);\n      return p.then(res => {\n        expect(res).toEqual({\n          user: \"icebob\"\n        });\n        expect(master).toHaveBeenCalledTimes(1);\n        expect(flow.join(\"-\")).toBe(\"B1-B2-B2P-MASTER-A2-A1\");\n      });\n    });","file":"integration/middlewares.spec.js","skipped":false,"dir":"test"},{"name":"should register plugins","suites":["Test middleware system","Test with SYNC break"],"updatePoint":{"line":131,"column":31},"line":131,"code":"    it(\"should register plugins\", () => {\n      expect(broker.middlewares.count()).toBe(3);\n    });","file":"integration/middlewares.spec.js","skipped":false,"dir":"test"},{"name":"should call only mw1 & mw2 middlewares functions","suites":["Test middleware system","Test with SYNC break"],"updatePoint":{"line":134,"column":56},"line":134,"code":"    it(\"should call only mw1 & mw2 middlewares functions\", () => {\n      let p = broker.call(\"test.foo\");\n      expect(utils.isPromise(p)).toBe(true);\n      return p.then(res => {\n        expect(res).toEqual({\n          user: \"bobcsi\"\n        });\n        expect(master).toHaveBeenCalledTimes(0);\n        expect(flow.join(\"-\")).toBe(\"B1-B2-A1\");\n      });\n    });","file":"integration/middlewares.spec.js","skipped":false,"dir":"test"},{"name":"should register plugins","suites":["Test middleware system","Test middleware system with ASYNC break"],"updatePoint":{"line":205,"column":31},"line":205,"code":"    it(\"should register plugins\", () => {\n      expect(broker.middlewares.count()).toBe(3);\n    });","file":"integration/middlewares.spec.js","skipped":false,"dir":"test"},{"name":"should call only mw1 & mw2 middlewares functions","suites":["Test middleware system","Test middleware system with ASYNC break"],"updatePoint":{"line":208,"column":56},"line":208,"code":"    it(\"should call only mw1 & mw2 middlewares functions\", () => {\n      let p = broker.call(\"test.foo\");\n      expect(utils.isPromise(p)).toBe(true);\n      return p.then(res => {\n        expect(res).toEqual({\n          user: \"bobcsi\"\n        });\n        expect(master).toHaveBeenCalledTimes(0);\n        expect(flow.join(\"-\")).toBe(\"B1-B2-B2P-A1\");\n      });\n    });","file":"integration/middlewares.spec.js","skipped":false,"dir":"test"},{"name":"should call only mw1 & mw2 middlewares functions","suites":["Test middleware system","Test with Error"],"updatePoint":{"line":262,"column":56},"line":262,"code":"    it(\"should call only mw1 & mw2 middlewares functions\", () => {\n      let p = broker.call(\"test.foo\");\n      expect(utils.isPromise(p)).toBe(true);\n      return p.catch(err => {\n        expect(err.message).toEqual(\"Something happened in mw2\");\n        expect(flow.join(\"-\")).toBe(\"B1-B2\");\n      });\n    });","file":"integration/middlewares.spec.js","skipped":false,"dir":"test"},{"name":"should call 'created' ","suites":["Test middleware v2 system"],"updatePoint":{"line":495,"column":28},"line":495,"code":"  it(\"should call 'created' \", () => {\n    broker = new ServiceBroker({\n      nodeID: \"mw2-test\",\n      logger: false,\n      internalMiddlewares: false,\n      middlewares: [mw1, mw2]\n    });\n    expect(FLOW).toEqual([\"mw2-createService-$node\", \"mw1-createService-$node\", \"mw1-serviceCreating-$node\", \"mw2-serviceCreating-$node\", \"mw1-serviceCreated-$node\", \"mw2-serviceCreated-$node\", \"mw1-created\", \"mw2-created\"]);\n  });","file":"integration/middlewares.spec.js","skipped":false,"dir":"test"},{"name":"should call 'serviceCreating' & 'serviceCreated' ","suites":["Test middleware v2 system"],"updatePoint":{"line":504,"column":55},"line":504,"code":"  it(\"should call 'serviceCreating' & 'serviceCreated' \", () => {\n    svc = broker.createService({\n      name: \"greeter\",\n      actions: {\n        hello(ctx) {\n          FLOW.push(`svc-${ctx.action.name}-${ctx.params.name}`);\n          return `Hello ${ctx.params.name}!`;\n        }\n\n      },\n      methods: {\n        uppercase(text) {\n          return text ? text.toUpperCase() : text;\n        }\n\n      },\n      events: {\n        \"john.**\"(ctx) {\n          FLOW.push(`svc-${ctx.eventName}-${ctx.params.name}`);\n        }\n\n      }\n    });\n    expect(FLOW).toEqual([\"mw2-createService-greeter\", \"mw1-createService-greeter\", \"mw1-serviceCreating-greeter\", \"mw2-serviceCreating-greeter\", \"mw1-serviceCreated-greeter\", \"mw2-serviceCreated-greeter\"]);\n  });","file":"integration/middlewares.spec.js","skipped":false,"dir":"test"},{"name":"should call 'starting', 'started', 'serviceStarting' & serviceStarted' ","suites":["Test middleware v2 system"],"updatePoint":{"line":529,"column":77},"line":529,"code":"  it(\"should call 'starting', 'started', 'serviceStarting' & serviceStarted' \", () => {\n    return broker.start().catch(protectReject).then(() => {\n      expect(FLOW).toEqual([\"mw1-starting\", \"mw2-starting\", \"mw1-serviceStarting-$node\", \"mw1-serviceStarting-greeter\", \"mw2-serviceStarting-$node\", \"mw2-serviceStarting-greeter\", \"mw2-registerLocalService-$node\", \"mw1-registerLocalService-$node\", \"mw2-registerLocalService-greeter\", \"mw1-registerLocalService-greeter\", \"mw1-serviceStarted-$node\", \"mw1-serviceStarted-greeter\", \"mw2-serviceStarted-$node\", \"mw2-serviceStarted-greeter\", \"mw1-started\", \"mw2-started\"]);\n    });\n  });","file":"integration/middlewares.spec.js","skipped":false,"dir":"test"},{"name":"should call 'call' & 'localAction' ","suites":["Test middleware v2 system"],"updatePoint":{"line":534,"column":41},"line":534,"code":"  it(\"should call 'call' & 'localAction' \", () => {\n    return broker.call(\"greeter.hello\", {\n      name: \"John\"\n    }).catch(protectReject).then(res => {\n      expect(res).toBe(\"Hello John!\");\n      expect(FLOW).toEqual([\"mw2-call-greeter.hello-before-John\", \"mw1-call-greeter.hello-before-John\", \"mw2-localAction-before-John\", \"mw1-localAction-before-John\", \"svc-greeter.hello-John\", \"mw1-localAction-after-John\", \"mw2-localAction-after-John\", \"mw1-call-greeter.hello-after-John\", \"mw2-call-greeter.hello-after-John\"]);\n    });\n  });","file":"integration/middlewares.spec.js","skipped":false,"dir":"test"},{"name":"should call 'mcall' & 'localAction' ","suites":["Test middleware v2 system"],"updatePoint":{"line":542,"column":42},"line":542,"code":"  it(\"should call 'mcall' & 'localAction' \", () => {\n    return broker.mcall([{\n      action: \"greeter.hello\",\n      params: {\n        name: \"John\"\n      }\n    }]).catch(protectReject).then(res => {\n      expect(res).toEqual([\"Hello John!\"]);\n      expect(FLOW).toEqual([\"mw2-mcall-greeter.hello-before-John\", \"mw1-mcall-greeter.hello-before-John\", \"mw2-call-greeter.hello-before-John\", \"mw1-call-greeter.hello-before-John\", \"mw2-localAction-before-John\", \"mw1-localAction-before-John\", \"svc-greeter.hello-John\", \"mw1-localAction-after-John\", \"mw2-localAction-after-John\", \"mw1-call-greeter.hello-after-John\", \"mw2-call-greeter.hello-after-John\", \"mw1-mcall-greeter.hello-after-John\", \"mw2-mcall-greeter.hello-after-John\"]);\n    });\n  });","file":"integration/middlewares.spec.js","skipped":false,"dir":"test"},{"name":"should call 'emit' & 'localEvent' ","suites":["Test middleware v2 system"],"updatePoint":{"line":553,"column":40},"line":553,"code":"  it(\"should call 'emit' & 'localEvent' \", () => {\n    broker.emit(\"john.welcomed\", {\n      name: \"John\"\n    });\n    expect(FLOW).toEqual([\"mw2-emit-john.welcomed-John\", \"mw1-emit-john.welcomed-John\", \"mw2-localEvent-john.welcomed-John\", \"mw1-localEvent-john.welcomed-John\", \"svc-john.welcomed-John\"]);\n  });","file":"integration/middlewares.spec.js","skipped":false,"dir":"test"},{"name":"should call 'broadcast' & 'localEvent' ","suites":["Test middleware v2 system"],"updatePoint":{"line":559,"column":45},"line":559,"code":"  it(\"should call 'broadcast' & 'localEvent' \", () => {\n    broker.broadcast(\"john.welcomed\", {\n      name: \"John\"\n    });\n    expect(FLOW).toEqual([\"mw2-broadcast-john.welcomed-John\", \"mw1-broadcast-john.welcomed-John\", \"mw2-broadcastLocal-john.welcomed-John\", \"mw1-broadcastLocal-john.welcomed-John\", \"mw2-localEvent-john.welcomed-John\", \"mw1-localEvent-john.welcomed-John\", \"svc-john.welcomed-John\"]);\n  });","file":"integration/middlewares.spec.js","skipped":false,"dir":"test"},{"name":"should call 'broadcastLocal' & 'localEvent' ","suites":["Test middleware v2 system"],"updatePoint":{"line":565,"column":50},"line":565,"code":"  it(\"should call 'broadcastLocal' & 'localEvent' \", () => {\n    broker.broadcastLocal(\"john.welcomed\", {\n      name: \"John\"\n    });\n    expect(FLOW).toEqual([\"mw2-broadcastLocal-john.welcomed-John\", \"mw1-broadcastLocal-john.welcomed-John\", \"mw2-localEvent-john.welcomed-John\", \"mw1-localEvent-john.welcomed-John\", \"svc-john.welcomed-John\"]);\n  });","file":"integration/middlewares.spec.js","skipped":false,"dir":"test"},{"name":"should call method & 'localMethod' ","suites":["Test middleware v2 system"],"updatePoint":{"line":571,"column":41},"line":571,"code":"  it(\"should call method & 'localMethod' \", () => {\n    const res = svc.uppercase(\"John\");\n    expect(res).toBe(\"JOHN\");\n    expect(FLOW).toEqual([\"mw2-localMethod-uppercase-John\", \"mw1-localMethod-uppercase-John\"]);\n  });","file":"integration/middlewares.spec.js","skipped":false,"dir":"test"},{"name":"should call 'destroyService', 'serviceStopping', 'serviceStopped' ","suites":["Test middleware v2 system"],"updatePoint":{"line":576,"column":72},"line":576,"code":"  it(\"should call 'destroyService', 'serviceStopping', 'serviceStopped' \", () => {\n    return broker.destroyService(broker.getLocalService(\"greeter\")).catch(protectReject).then(() => {\n      expect(FLOW).toEqual([\"mw2-destroyService-greeter\", \"mw1-destroyService-greeter\", \"mw2-serviceStopping-greeter\", \"mw1-serviceStopping-greeter\", \"mw2-serviceStopped-greeter\", \"mw1-serviceStopped-greeter\"]);\n    });\n  });","file":"integration/middlewares.spec.js","skipped":false,"dir":"test"},{"name":"should call 'stopping', 'stopped' ","suites":["Test middleware v2 system"],"updatePoint":{"line":581,"column":40},"line":581,"code":"  it(\"should call 'stopping', 'stopped' \", () => {\n    return broker.stop().catch(protectReject).then(() => {\n      expect(FLOW).toEqual([\"mw2-stopping\", \"mw1-stopping\", \"mw2-serviceStopping-$node\", \"mw1-serviceStopping-$node\", \"mw2-serviceStopped-$node\", \"mw1-serviceStopped-$node\", \"mw2-stopped\", \"mw1-stopped\"]);\n    });\n  });","file":"integration/middlewares.spec.js","skipped":false,"dir":"test"},{"name":"--- create broker with transporter","suites":["Test middleware v2 system"],"updatePoint":{"line":586,"column":40},"line":586,"code":"  it(\"--- create broker with transporter\", () => {\n    mw1.created = null;\n    mw1.starting = null;\n    mw1.started = null;\n    mw1.stopping = null;\n    mw1.stopped = null;\n    mw2.created = null;\n    mw2.starting = null;\n    mw2.started = null;\n    mw2.stopping = null;\n    mw2.stopped = null;\n    broker = new ServiceBroker({\n      logger: false,\n      nodeID: \"node-1\",\n      transporter: \"Fake\",\n      internalMiddlewares: false,\n      middlewares: [mw1, mw2]\n    });\n    const broker2 = new ServiceBroker({\n      logger: false,\n      nodeID: \"node-2\",\n      transporter: \"Fake\",\n      internalMiddlewares: false,\n      middlewares: [mw1, mw2]\n    });\n    broker2.createService({\n      name: \"greeter\",\n      actions: {\n        hello(ctx) {\n          FLOW.push(`svc-${ctx.action.name}-${ctx.params.name}`);\n          return `Hello ${ctx.params.name}!`;\n        }\n\n      }\n    });\n    return Promise.all([broker.start(), broker2.start()]).delay(500)\n    /*.catch(protectReject).then(() => {\n    expect(FLOW).toEqual([\n    ]);\n    })*/\n    ;\n  });","file":"integration/middlewares.spec.js","skipped":false,"dir":"test"},{"name":"should call 'remoteAction' ","suites":["Test middleware v2 system"],"updatePoint":{"line":628,"column":33},"line":628,"code":"  it(\"should call 'remoteAction' \", () => {\n    return broker.call(\"greeter.hello\", {\n      name: \"John\"\n    }).catch(protectReject).then(res => {\n      expect(res).toBe(\"Hello John!\");\n      expect(FLOW).toEqual([\"mw2-call-greeter.hello-before-John\", \"mw1-call-greeter.hello-before-John\", \"mw2-remoteAction-before-John\", \"mw1-remoteAction-before-John\", \"mw2-publish-REQ\", \"mw1-publish-REQ\", \"mw2-transporterSend-MOL.REQ.node-2\", \"mw1-transporterSend-MOL.REQ.node-2\", \"mw1-transporterReceive-REQ\", \"mw2-transporterReceive-REQ\", \"mw2-transitMessageHandler-REQ\", \"mw1-transitMessageHandler-REQ\", \"mw2-localAction-before-John\", \"mw1-localAction-before-John\", \"svc-greeter.hello-John\", \"mw1-localAction-after-John\", \"mw2-localAction-after-John\", \"mw2-publish-RES\", \"mw1-publish-RES\", \"mw2-transporterSend-MOL.RES.node-1\", \"mw1-transporterSend-MOL.RES.node-1\", \"mw1-transporterReceive-RES\", \"mw2-transporterReceive-RES\", \"mw2-transitMessageHandler-RES\", \"mw1-transitMessageHandler-RES\", \"mw1-remoteAction-after-John\", \"mw2-remoteAction-after-John\", \"mw1-call-greeter.hello-after-John\", \"mw2-call-greeter.hello-after-John\"]);\n    });\n  });","file":"integration/middlewares.spec.js","skipped":false,"dir":"test"},{"name":"should call 'transitPublish', 'transporterSend', 'transporterReceive', 'transporterSend' ","suites":["Test middleware v2 system"],"updatePoint":{"line":636,"column":95},"line":636,"code":"  it(\"should call 'transitPublish', 'transporterSend', 'transporterReceive', 'transporterSend' \", () => {\n    return broker.ping().catch(protectReject).then(() => {\n      expect(FLOW).toEqual([\"mw2-publish-PING\", \"mw1-publish-PING\", \"mw2-transporterSend-MOL.PING.node-2\", \"mw1-transporterSend-MOL.PING.node-2\", \"mw1-transporterReceive-PING\", \"mw2-transporterReceive-PING\", \"mw2-transitMessageHandler-PING\", \"mw1-transitMessageHandler-PING\", \"mw2-publish-PONG\", \"mw1-publish-PONG\", \"mw2-transporterSend-MOL.PONG.node-1\", \"mw1-transporterSend-MOL.PONG.node-1\", \"mw1-transporterReceive-PONG\", \"mw2-transporterReceive-PONG\", \"mw2-transitMessageHandler-PONG\", \"mw1-transitMessageHandler-PONG\"]);\n    });\n  });","file":"integration/middlewares.spec.js","skipped":false,"dir":"test"},{"name":"should list local $node service","suites":["Test service registry"],"updatePoint":{"line":126,"column":37},"line":126,"code":"  it(\"should list local $node service\", () => {\n    expect(H.hasService(master, \"$node\")).toBe(true);\n    expect(H.hasService(master, \"users\")).toBe(false);\n    expect(H.getActionNodes(master, \"$node.list\")).toEqual([\"master\"]);\n    expect(servicesChanged).toHaveBeenCalledTimes(1);\n  });","file":"integration/registry.spec.js","skipped":false,"dir":"test"},{"name":"start node1 with userService","suites":["Test service registry"],"updatePoint":{"line":132,"column":34},"line":132,"code":"  it(\"start node1 with userService\", () => {\n    servicesChanged.mockClear();\n    return node1.start().delay(100).then(() => {\n      expect(H.getNode(master, \"node-1\")).toBeDefined();\n      expect(H.hasService(master, \"users\")).toBe(true);\n      expect(H.hasAction(master, \"users.find\")).toBe(true);\n      expect(H.hasAction(master, \"users.get\")).toBe(true); // Check visibility\n\n      expect(H.hasAction(master, \"users.update\")).toBe(false);\n      expect(H.hasAction(node1, \"users.update\")).toBe(true);\n      expect(H.hasAction(node1, \"users.remove\")).toBe(false);\n      expect(node1.getLocalService(\"users\").actions.remove).toBeInstanceOf(Function);\n      expect(H.getActionNodes(master, \"users.find\")).toEqual([\"node-1\"]);\n      expect(H.getActionNodes(master, \"users.get\")).toEqual([\"node-1\"]);\n      expect(H.getActionNodes(master, \"$node.list\")).toEqual([\"master\", \"node-1\"]);\n      expect(H.getEventNodes(master, \"user.created\")).toEqual([\"node-1\"]);\n      expect(servicesChanged).toHaveBeenCalledTimes(1);\n    });\n  });","file":"integration/registry.spec.js","skipped":false,"dir":"test"},{"name":"start node2 with userService & payment service","suites":["Test service registry"],"updatePoint":{"line":151,"column":52},"line":151,"code":"  it(\"start node2 with userService & payment service\", () => {\n    servicesChanged.mockClear();\n    return node2.start().delay(100).then(() => {\n      let node2 = H.getNode(master, \"node-2\");\n      expect(node2).toBeDefined();\n      expect(node2.available).toBe(true);\n      expect(node2.services.length).toBe(3);\n      expect(H.hasService(master, \"payments\")).toBe(true);\n      expect(H.hasAction(master, \"payments.charge\")).toBe(true);\n      expect(H.hasAction(master, \"payments.checkCard\")).toBe(true);\n      expect(H.hasAction(node1, \"payments.checkCard\")).toBe(true);\n      expect(H.getActionNodes(master, \"users.find\")).toEqual([\"node-1\", \"node-2\"]);\n      expect(H.getActionNodes(master, \"users.get\")).toEqual([\"node-1\", \"node-2\"]);\n      expect(H.getActionNodes(master, \"$node.list\")).toEqual([\"master\", \"node-1\", \"node-2\"]);\n      expect(H.getEventNodes(master, \"user.created\")).toEqual([\"node-1\", \"node-2\"]);\n      expect(H.getEventNodes(master, \"user.paid\")).toEqual([\"node-2\"]);\n      expect(servicesChanged).toHaveBeenCalledTimes(1);\n    });\n  });","file":"integration/registry.spec.js","skipped":false,"dir":"test"},{"name":"stop node2","suites":["Test service registry"],"updatePoint":{"line":170,"column":16},"line":170,"code":"  it(\"stop node2\", () => {\n    servicesChanged.mockClear();\n    return node2.stop().delay(100).then(() => {\n      let infoNode2 = H.getNode(master, \"node-2\");\n      expect(infoNode2).toBeDefined();\n      expect(infoNode2.available).toBe(false);\n      expect(H.hasService(master, \"payments\")).toBe(false);\n      expect(H.getActionNodes(master, \"payments.charge\")).toEqual([]);\n      expect(H.getActionNodes(master, \"payments.checkCard\")).toEqual([]);\n      expect(H.getActionNodes(node1, \"payments.checkCard\")).toEqual([]);\n      expect(H.getActionNodes(master, \"users.find\")).toEqual([\"node-1\"]);\n      expect(H.getActionNodes(master, \"users.get\")).toEqual([\"node-1\"]);\n      expect(H.getActionNodes(master, \"$node.list\")).toEqual([\"master\", \"node-1\"]);\n      expect(H.getEventNodes(master, \"user.created\")).toEqual([\"node-1\"]);\n      expect(H.getEventNodes(master, \"user.paid\")).toEqual([]);\n      expect(servicesChanged).toHaveBeenCalledTimes(1);\n    });\n  });","file":"integration/registry.spec.js","skipped":false,"dir":"test"},{"name":"node2 recreate with posts, paymentMod","suites":["Test service registry"],"updatePoint":{"line":188,"column":43},"line":188,"code":"  it(\"node2 recreate with posts, paymentMod\", () => {\n    servicesChanged.mockClear();\n    node2 = H.createNode({\n      namespace: \"first\",\n      nodeID: \"node-2\"\n    }, [paymentModService, postService]);\n    return node2.start().delay(100).then(() => {\n      let infoNode2 = H.getNode(master, \"node-2\");\n      expect(infoNode2).toBeDefined();\n      expect(infoNode2.services.length).toBe(3);\n      expect(infoNode2.available).toBe(true);\n      expect(H.hasService(master, \"payments\")).toBe(true);\n      expect(H.getActionNodes(master, \"payments.charge\")).toEqual([\"node-2\"]);\n      expect(H.getActionNodes(master, \"payments.checkCreditCard\")).toEqual([\"node-2\"]);\n      expect(H.getActionNodes(master, \"payments.checkCard\")).toEqual([]);\n      expect(H.isActionAvailable(master, \"payments.checkCard\")).toBe(false);\n      expect(H.getActionNodes(master, \"users.find\")).toEqual([\"node-1\"]);\n      expect(H.getActionNodes(master, \"users.get\")).toEqual([\"node-1\"]);\n      expect(H.getEventNodes(master, \"user.created\")).toEqual([\"node-1\", \"node-2\"]);\n      expect(H.getEventNodes(master, \"user.paid\")).toEqual([]);\n      expect(H.getEventNodes(master, \"payment.done\")).toEqual([\"node-2\"]);\n      expect(servicesChanged).toHaveBeenCalledTimes(1);\n    });\n  });","file":"integration/registry.spec.js","skipped":false,"dir":"test"},{"name":"load mail on-the-fly to node1","suites":["Test service registry"],"updatePoint":{"line":212,"column":35},"line":212,"code":"  it(\"load mail on-the-fly to node1\", () => {\n    servicesChanged.mockClear();\n    H.addServices(node1, [mailService]);\n    return Promise.resolve().delay(100).then(() => {\n      expect(H.hasService(master, \"mail\")).toBe(true);\n      expect(H.getActionNodes(master, \"mail.send\")).toEqual([\"node-1\"]);\n      expect(servicesChanged).toHaveBeenCalledTimes(1);\n    });\n  });","file":"integration/registry.spec.js","skipped":false,"dir":"test"},{"name":"destroy mail on-the-fly to node1","suites":["Test service registry"],"updatePoint":{"line":221,"column":38},"line":221,"code":"  it(\"destroy mail on-the-fly to node1\", () => {\n    servicesChanged.mockClear();\n    H.removeServices(node1, [\"mail\"]);\n    return Promise.resolve().delay(100).then(() => {\n      expect(H.hasService(master, \"mail\")).toBe(false);\n      expect(H.getActionNodes(master, \"mail.send\")).toEqual([]);\n      expect(servicesChanged).toHaveBeenCalledTimes(1);\n    });\n  });","file":"integration/registry.spec.js","skipped":false,"dir":"test"},{"name":"should call remotely","suites":["Test action visibilities"],"updatePoint":{"line":242,"column":26},"line":242,"code":"  it(\"should call remotely\", () => {\n    return Promise.all([master.call(\"users.find\").catch(protectReject).then(res => expect(res).toBe(\"Found\")), master.call(\"users.get\").catch(protectReject).then(res => expect(res).toBe(\"Got\")), master.call(\"users.update\").then(protectReject).catch(err => expect(err).toBeInstanceOf(E.ServiceNotFoundError)), master.call(\"users.remove\").then(protectReject).catch(err => expect(err).toBeInstanceOf(E.ServiceNotFoundError))]);\n  });","file":"integration/registry.spec.js","skipped":false,"dir":"test"},{"name":"should call locally","suites":["Test action visibilities"],"updatePoint":{"line":245,"column":25},"line":245,"code":"  it(\"should call locally\", () => {\n    return Promise.all([node1.call(\"users.find\").catch(protectReject).then(res => expect(res).toBe(\"Found\")), node1.call(\"users.get\").catch(protectReject).then(res => expect(res).toBe(\"Got\")), node1.call(\"users.update\").catch(protectReject).then(res => expect(res).toBe(\"Updated\")), node1.call(\"users.remove\").then(protectReject).catch(err => expect(err).toBeInstanceOf(E.ServiceNotFoundError))]);\n  });","file":"integration/registry.spec.js","skipped":false,"dir":"test"},{"name":"should call directly inside action","suites":["Test action visibilities"],"updatePoint":{"line":248,"column":40},"line":248,"code":"  it(\"should call directly inside action\", () => {\n    return node1.call(\"users.removeWrap\").catch(protectReject).then(res => expect(res).toBe(\"Removed\"));\n  });","file":"integration/registry.spec.js","skipped":false,"dir":"test"},{"name":"should retry local calls 3 times","suites":["Test Retry middleware","Test with local actions"],"updatePoint":{"line":41,"column":40},"line":41,"code":"    it(\"should retry local calls 3 times\", async () => {\n      try {\n        await broker0.call(\"test.retry\");\n        throw new Error(\"Should throw error\");\n      } catch (err) {\n        expect(err).toBeInstanceOf(MoleculerRetryableError);\n        expect(err.name).toBe(\"MoleculerRetryableError\");\n        expect(err.message).toBe(\"Something happened\");\n        expect(FLOW).toEqual([\"CALL-caller-FROM-caller\", \"CALL-caller-FROM-caller\", \"CALL-caller-FROM-caller\", \"CALL-caller-FROM-caller\"]);\n      }\n    });","file":"integration/retry.spec.js","skipped":false,"dir":"test"},{"name":"should retry local calls 3 times","suites":["Test Retry middleware","Test with remote actions"],"updatePoint":{"line":87,"column":40},"line":87,"code":"    it(\"should retry local calls 3 times\", async () => {\n      try {\n        await broker0.call(\"test.retry\");\n        throw new Error(\"Should throw error\");\n      } catch (err) {\n        expect(err).toBeInstanceOf(MoleculerRetryableError);\n        expect(err.name).toBe(\"MoleculerRetryableError\");\n        expect(err.message).toBe(\"Something happened\");\n        expect(FLOW).toEqual([\"CALL-broker-1-FROM-caller\", \"CALL-broker-2-FROM-caller\", \"CALL-broker-1-FROM-caller\", \"CALL-broker-2-FROM-caller\"]);\n      }\n    });","file":"integration/retry.spec.js","skipped":false,"dir":"test"},{"name":"should retry local calls 3 times","suites":["Test Retry middleware","Test with remote actions and no preferLocal"],"updatePoint":{"line":136,"column":40},"line":136,"code":"    it(\"should retry local calls 3 times\", async () => {\n      try {\n        await broker0.call(\"test.retry\");\n        throw new Error(\"Should throw error\");\n      } catch (err) {\n        expect(err).toBeInstanceOf(MoleculerRetryableError);\n        expect(err.name).toBe(\"MoleculerRetryableError\");\n        expect(err.message).toBe(\"Something happened\");\n        expect(FLOW).toEqual([\"CALL-caller-FROM-caller\", \"CALL-broker-1-FROM-caller\", \"CALL-broker-2-FROM-caller\", \"CALL-caller-FROM-caller\"]);\n      }\n    });","file":"integration/retry.spec.js","skipped":false,"dir":"test"},{"name":"should not call main started","suites":["Test Service dependencies"],"updatePoint":{"line":32,"column":34},"line":32,"code":"  it(\"should not call main started\", () => {\n    return broker1.Promise.delay(500).then(() => {\n      expect(startedMain).toHaveBeenCalledTimes(0);\n    });\n  });","file":"integration/service-deps.spec.js","skipped":false,"dir":"test"},{"name":"should call main started if broker2.starts","suites":["Test Service dependencies"],"updatePoint":{"line":37,"column":48},"line":37,"code":"  it(\"should call main started if broker2.starts\", () => {\n    return broker2.start().delay(1000).then(() => {\n      expect(startedMain).toHaveBeenCalledTimes(1);\n      expect(startedMath).toHaveBeenCalledTimes(1);\n    });\n  });","file":"integration/service-deps.spec.js","skipped":false,"dir":"test"},{"name":"should call every merged handler","suites":["Test Service mixins"],"updatePoint":{"line":330,"column":38},"line":330,"code":"  it(\"should call every merged handler\", () => {\n    expect(mainSchema.merged).toHaveBeenCalledTimes(1);\n    expect(mixin1L1.merged).toHaveBeenCalledTimes(1);\n    expect(mixin2L1.merged).toHaveBeenCalledTimes(1);\n    expect(mixinL2.merged).toHaveBeenCalledTimes(2);\n    expect(flowMerged.join(\"-\")).toBe(\"mixinL2-mixin2L1-mixinL2-mixin1L1-main\");\n  });","file":"integration/service-mixins.spec.js","skipped":false,"dir":"test"},{"name":"should call every created handler","suites":["Test Service mixins"],"updatePoint":{"line":337,"column":39},"line":337,"code":"  it(\"should call every created handler\", () => {\n    expect(mainSchema.created).toHaveBeenCalledTimes(1);\n    expect(mixin1L1.created).toHaveBeenCalledTimes(1);\n    expect(mixin2L1.created).toHaveBeenCalledTimes(1);\n    expect(mixinL2.created).toHaveBeenCalledTimes(2);\n    expect(flowCreated.join(\"-\")).toBe(\"mixinL2-mixin2L1-mixinL2-mixin1L1-main\");\n    return broker.start();\n  });","file":"integration/service-mixins.spec.js","skipped":false,"dir":"test"},{"name":"should call every start handler","suites":["Test Service mixins"],"updatePoint":{"line":345,"column":37},"line":345,"code":"  it(\"should call every start handler\", () => {\n    expect(mainSchema.started).toHaveBeenCalledTimes(1);\n    expect(mixin2L1.started).toHaveBeenCalledTimes(1);\n    expect(mixinL2.started).toHaveBeenCalledTimes(2);\n    expect(flowStarted.join(\"-\")).toBe(\"mixinL2-mixin2L1-mixinL2-main\");\n  });","file":"integration/service-mixins.spec.js","skipped":false,"dir":"test"},{"name":"should merge settings","suites":["Test Service mixins"],"updatePoint":{"line":351,"column":27},"line":351,"code":"  it(\"should merge settings\", () => {\n    expect(svc.settings).toEqual({\n      a: 999,\n      b: 500,\n      c: \"John\",\n      d: \"Adam\",\n      e: \"Susan\",\n      f: \"Bill\"\n    });\n  });","file":"integration/service-mixins.spec.js","skipped":false,"dir":"test"},{"name":"should merge dependencies","suites":["Test Service mixins"],"updatePoint":{"line":361,"column":31},"line":361,"code":"  it(\"should merge dependencies\", () => {\n    expect(svc.schema.dependencies).toEqual([\"posts\", {\n      name: \"users\",\n      version: 2\n    }, \"math\"]);\n    expect(svc.waitForServices).toHaveBeenCalledTimes(1);\n    expect(svc.waitForServices).toHaveBeenCalledWith([\"posts\", {\n      name: \"users\",\n      version: 2\n    }, \"math\"], 0, 1000);\n  });","file":"integration/service-mixins.spec.js","skipped":false,"dir":"test"},{"name":"should merge metadata","suites":["Test Service mixins"],"updatePoint":{"line":372,"column":27},"line":372,"code":"  it(\"should merge metadata\", () => {\n    expect(svc.metadata).toEqual({\n      priority: 3,\n      tag: \"other\",\n      scalable: true,\n      minMemory: \"2g\"\n    });\n  });","file":"integration/service-mixins.spec.js","skipped":false,"dir":"test"},{"name":"should call 'beta' action","suites":["Test Service mixins"],"updatePoint":{"line":380,"column":31},"line":380,"code":"  it(\"should call 'beta' action\", () => {\n    flowHooks = [];\n    return broker.call(\"main.beta\").catch(protectReject).then(res => {\n      expect(res).toBe(\"Change result\");\n      expect(flowHooks).toEqual([\"mixinL2-before-all\", \"mixinL2-before-all\", \"main-before-all\", \"mixinL2-before-beta\", \"mixinL2-before-beta\", \"main-before-beta\", \"main-action-before-beta\", \"main-action-after-beta\", \"main-after-beta\", \"mixin1L1-after-beta\", \"mixinsL2-after-beta\", \"mixinsL2-after-beta\", \"mixin1L1-after-all\"]);\n    });\n  });","file":"integration/service-mixins.spec.js","skipped":false,"dir":"test"},{"name":"should call 'delta' action","suites":["Test Service mixins"],"updatePoint":{"line":387,"column":32},"line":387,"code":"  it(\"should call 'delta' action\", () => {\n    flowHooks = [];\n    return broker.call(\"main.delta\").catch(protectReject).then(res => {\n      expect(res).toBe(\"From mixin2L1\");\n      expect(flowHooks).toEqual([\"mixinL2-before-all\", \"mixinL2-before-all\", \"main-before-all\", \"mixin1L1-after-all\"]);\n    });\n  });","file":"integration/service-mixins.spec.js","skipped":false,"dir":"test"},{"name":"should call 'gamma' action","suites":["Test Service mixins"],"updatePoint":{"line":394,"column":32},"line":394,"code":"  it(\"should call 'gamma' action\", () => {\n    flowHooks = [];\n    return broker.call(\"main.gamma\").catch(protectReject).then(res => {\n      expect(res).toBe(\"From mixin1L1\");\n      expect(flowHooks).toEqual([\"mixinL2-before-all\", \"mixinL2-before-all\", \"main-before-all\", \"mixin1L1-after-all\"]);\n    });\n  });","file":"integration/service-mixins.spec.js","skipped":false,"dir":"test"},{"name":"should call 'alpha' action","suites":["Test Service mixins"],"updatePoint":{"line":401,"column":32},"line":401,"code":"  it(\"should call 'alpha' action\", () => {\n    flowHooks = [];\n    return broker.call(\"main.alpha\").catch(protectReject).then(res => {\n      expect(res).toBe(\"From mixinL2\");\n      expect(flowHooks).toEqual([\"mixinL2-before-all\", \"mixinL2-before-all\", \"main-before-all\", \"mixin1L1-after-all\"]);\n    });\n  });","file":"integration/service-mixins.spec.js","skipped":false,"dir":"test"},{"name":"should call 'tango' action","suites":["Test Service mixins"],"updatePoint":{"line":408,"column":32},"line":408,"code":"  it(\"should call 'tango' action\", () => {\n    flowHooks = [];\n    return broker.call(\"main.tango\").catch(protectReject).then(res => {\n      expect(res).toBe(\"From main\");\n      expect(flowHooks).toEqual([\"mixinL2-before-all\", \"mixinL2-before-all\", \"main-before-all\", \"mixin1L1-after-all\"]);\n    });\n  });","file":"integration/service-mixins.spec.js","skipped":false,"dir":"test"},{"name":"should call 'charlie' action","suites":["Test Service mixins"],"updatePoint":{"line":415,"column":34},"line":415,"code":"  it(\"should call 'charlie' action\", () => {\n    flowHooks = [];\n    return broker.call(\"main.charlie\", {\n      name: \"John\"\n    }).catch(protectReject).then(res => {\n      expect(res.msg).toBe(\"From mixinL2\");\n      expect(res.action).toEqual({\n        cache: {\n          keys: [\"name\"]\n        },\n        name: \"main.charlie\",\n        rawName: \"charlie\",\n        params: {\n          name: \"string\"\n        }\n      });\n      expect(flowHooks).toEqual([\"mixinL2-before-all\", \"mixinL2-before-all\", \"main-before-all\", \"mixin1L1-after-all\"]);\n    });\n  });","file":"integration/service-mixins.spec.js","skipped":false,"dir":"test"},{"name":"should call 'echo' action","suites":["Test Service mixins"],"updatePoint":{"line":434,"column":31},"line":434,"code":"  it(\"should call 'echo' action\", () => {\n    flowHooks = [];\n    return broker.call(\"main.echo\", {\n      id: \"1\"\n    }).catch(protectReject).then(res => {\n      expect(res.msg).toBe(\"From mixin1L1\");\n      expect(res.action).toEqual({\n        name: \"main.echo\",\n        rawName: \"echo\",\n        params: {\n          id: \"string\"\n        }\n      });\n      expect(flowHooks).toEqual([\"mixinL2-before-all\", \"mixinL2-before-all\", \"main-before-all\", \"mixin1L1-after-all\"]);\n    });\n  });","file":"integration/service-mixins.spec.js","skipped":false,"dir":"test"},{"name":"should call 'zulu' action","suites":["Test Service mixins"],"updatePoint":{"line":450,"column":31},"line":450,"code":"  it(\"should call 'zulu' action\", () => {\n    flowHooks = [];\n    return broker.call(\"main.zulu\").then(protectReject).catch(err => {\n      expect(err.message).toBe(\"Zulu error\");\n      expect(flowHooks).toEqual([\"mixinL2-before-all\", \"mixinL2-before-all\", \"main-before-all\", \"main-error-zulu\", \"main-error-all\", \"mixin2L1-error-all-1\", \"mixin2L1-error-all-2\"]);\n    });\n  });","file":"integration/service-mixins.spec.js","skipped":false,"dir":"test"},{"name":"should call 'sierra' action","suites":["Test Service mixins"],"updatePoint":{"line":457,"column":33},"line":457,"code":"  it(\"should call 'sierra' action\", () => {\n    flowHooks = [];\n    return broker.call(\"main.sierra\").catch(protectReject).then(res => {\n      expect(res).toBe(\"Sierra in main\");\n      expect(flowHooks).toEqual([\"mixinL2-before-all\", \"mixinL2-before-all\", \"main-before-all\", \"main-action-before-sierra\", \"mixin1L1-after-all\"]);\n    });\n  });","file":"integration/service-mixins.spec.js","skipped":false,"dir":"test"},{"name":"should call 'victor' action","suites":["Test Service mixins"],"updatePoint":{"line":464,"column":33},"line":464,"code":"  it(\"should call 'victor' action\", () => {\n    flowHooks = [];\n    return broker.call(\"main.victor\").catch(protectReject).then(res => {\n      expect(res).toBe(\"Victory!\");\n      expect(flowHooks).toEqual([\"mixinL2-before-all\", \"mixinL2-before-all\", \"main-before-all\", \"handler\", \"mixin2L1-action-before-victor\", \"mixin1L1-after-all\"]);\n    });\n  });","file":"integration/service-mixins.spec.js","skipped":false,"dir":"test"},{"name":"should not call 'foxtrot' action","suites":["Test Service mixins"],"updatePoint":{"line":471,"column":38},"line":471,"code":"  it(\"should not call 'foxtrot' action\", () => {\n    return broker.call(\"main.foxtrot\").catch(err => {\n      expect(err.name).toBe(\"ServiceNotFoundError\");\n    });\n  });","file":"integration/service-mixins.spec.js","skipped":false,"dir":"test"},{"name":"should call 'jupiter' method","suites":["Test Service mixins"],"updatePoint":{"line":476,"column":34},"line":476,"code":"  it(\"should call 'jupiter' method\", () => {\n    svc.jupiter();\n    expect(mixin1L1.methods.jupiter).toHaveBeenCalledTimes(1);\n  });","file":"integration/service-mixins.spec.js","skipped":false,"dir":"test"},{"name":"should call 'uranus' method","suites":["Test Service mixins"],"updatePoint":{"line":480,"column":33},"line":480,"code":"  it(\"should call 'uranus' method\", () => {\n    svc.uranus();\n    expect(mainSchema.methods.uranus).toHaveBeenCalledTimes(1);\n  });","file":"integration/service-mixins.spec.js","skipped":false,"dir":"test"},{"name":"should call 'saturn' method","suites":["Test Service mixins"],"updatePoint":{"line":484,"column":33},"line":484,"code":"  it(\"should call 'saturn' method\", () => {\n    svc.saturn();\n    expect(mixin1L1.methods.saturn).toHaveBeenCalledTimes(1);\n  });","file":"integration/service-mixins.spec.js","skipped":false,"dir":"test"},{"name":"should call 'mars' method","suites":["Test Service mixins"],"updatePoint":{"line":488,"column":31},"line":488,"code":"  it(\"should call 'mars' method\", () => {\n    svc.mars();\n    expect(mixinL2.methods.mars).toHaveBeenCalledTimes(1);\n  });","file":"integration/service-mixins.spec.js","skipped":false,"dir":"test"},{"name":"should call 'venus' method","suites":["Test Service mixins"],"updatePoint":{"line":492,"column":32},"line":492,"code":"  it(\"should call 'venus' method\", () => {\n    svc.venus();\n    expect(mixin2L1.methods.venus).toHaveBeenCalledTimes(1);\n  });","file":"integration/service-mixins.spec.js","skipped":false,"dir":"test"},{"name":"should call 'oxygen' event handlers","suites":["Test Service mixins"],"updatePoint":{"line":496,"column":41},"line":496,"code":"  it(\"should call 'oxygen' event handlers\", () => {\n    let payload = {\n      a: 5\n    };\n    broker.broadcastLocal(\"oxygen\", payload);\n    expect(mainSchema.events.oxygen.handler).toHaveBeenCalledTimes(1);\n    expect(mainSchema.events.oxygen.handler).toHaveBeenCalledWith(expect.any(broker.ContextFactory));\n    expect(mixin1L1.events.oxygen).toHaveBeenCalledTimes(1);\n    expect(mixin1L1.events.oxygen).toHaveBeenCalledWith(expect.any(broker.ContextFactory));\n    expect(mixin2L1.events.oxygen).toHaveBeenCalledTimes(1);\n    expect(mixin2L1.events.oxygen).toHaveBeenCalledWith(expect.any(broker.ContextFactory));\n    expect(mixinL2.events.oxygen.handler).toHaveBeenCalledTimes(2);\n    expect(mixinL2.events.oxygen.handler).toHaveBeenCalledWith(expect.any(broker.ContextFactory));\n  });","file":"integration/service-mixins.spec.js","skipped":false,"dir":"test"},{"name":"should call 'carbon' event handlers","suites":["Test Service mixins"],"updatePoint":{"line":510,"column":41},"line":510,"code":"  it(\"should call 'carbon' event handlers\", () => {\n    let payload = {\n      a: 5\n    };\n    broker.broadcastLocal(\"carbon\", payload);\n    expect(mainSchema.events.carbon).toHaveBeenCalledTimes(1);\n    expect(mainSchema.events.carbon).toHaveBeenCalledWith(payload, broker.nodeID, \"carbon\", expect.any(broker.ContextFactory));\n  });","file":"integration/service-mixins.spec.js","skipped":false,"dir":"test"},{"name":"should call 'hydrogen' event handlers","suites":["Test Service mixins"],"updatePoint":{"line":518,"column":43},"line":518,"code":"  it(\"should call 'hydrogen' event handlers\", () => {\n    let payload = {\n      a: 5\n    };\n    broker.broadcastLocal(\"hydrogen\", payload);\n    expect(mixin1L1.events.hydrogen).toHaveBeenCalledTimes(1);\n    expect(mixin1L1.events.hydrogen).toHaveBeenCalledWith(payload, broker.nodeID, \"hydrogen\", expect.any(broker.ContextFactory));\n    expect(mixin2L1.events.hydrogen).toHaveBeenCalledTimes(1);\n    expect(mixin2L1.events.hydrogen).toHaveBeenCalledWith(payload, broker.nodeID, \"hydrogen\", expect.any(broker.ContextFactory));\n  });","file":"integration/service-mixins.spec.js","skipped":false,"dir":"test"},{"name":"should call 'nitrogen' event handlers without group","suites":["Test Service mixins"],"updatePoint":{"line":528,"column":57},"line":528,"code":"  it(\"should call 'nitrogen' event handlers without group\", () => {\n    let payload = {\n      a: 5\n    };\n    broker.broadcastLocal(\"nitrogen\", payload);\n    expect(mixin1L1.events.nitrogen.handler).toHaveBeenCalledTimes(1);\n    expect(mixin1L1.events.nitrogen.handler).toHaveBeenCalledWith(payload, broker.nodeID, \"nitrogen\", expect.any(broker.ContextFactory));\n    expect(mainSchema.events.nitrogen).toHaveBeenCalledTimes(1);\n    expect(mainSchema.events.nitrogen).toHaveBeenCalledWith(payload, broker.nodeID, \"nitrogen\", expect.any(broker.ContextFactory));\n  });","file":"integration/service-mixins.spec.js","skipped":false,"dir":"test"},{"name":"should call 'nitrogen' event handlers with group","suites":["Test Service mixins"],"updatePoint":{"line":538,"column":54},"line":538,"code":"  it(\"should call 'nitrogen' event handlers with group\", () => {\n    mixin1L1.events.nitrogen.handler.mockClear();\n    mainSchema.events.nitrogen.mockClear();\n    let payload = {\n      a: 5\n    };\n    broker.broadcastLocal(\"nitrogen\", payload, \"pnictogen\");\n    expect(mixin1L1.events.nitrogen.handler).toHaveBeenCalledTimes(1);\n    expect(mixin1L1.events.nitrogen.handler).toHaveBeenCalledWith(payload, broker.nodeID, \"nitrogen\", expect.any(broker.ContextFactory));\n    expect(mainSchema.events.nitrogen).toHaveBeenCalledTimes(1);\n    expect(mainSchema.events.nitrogen).toHaveBeenCalledWith(payload, broker.nodeID, \"nitrogen\", expect.any(broker.ContextFactory));\n  });","file":"integration/service-mixins.spec.js","skipped":false,"dir":"test"},{"name":"should call 'nitrogen' event handlers with wrong group","suites":["Test Service mixins"],"updatePoint":{"line":550,"column":60},"line":550,"code":"  it(\"should call 'nitrogen' event handlers with wrong group\", () => {\n    mixin1L1.events.nitrogen.handler.mockClear();\n    mainSchema.events.nitrogen.mockClear();\n    let payload = {\n      a: 5\n    };\n    broker.broadcastLocal(\"nitrogen\", payload, \"other\");\n    expect(mixin1L1.events.nitrogen.handler).toHaveBeenCalledTimes(0);\n    expect(mainSchema.events.nitrogen).toHaveBeenCalledTimes(0);\n  });","file":"integration/service-mixins.spec.js","skipped":false,"dir":"test"},{"name":"calling broker.stop","suites":["Test Service mixins"],"updatePoint":{"line":560,"column":25},"line":560,"code":"  it(\"calling broker.stop\", () => {\n    return broker.stop();\n  });","file":"integration/service-mixins.spec.js","skipped":false,"dir":"test"},{"name":"should called stop handler","suites":["Test Service mixins"],"updatePoint":{"line":563,"column":32},"line":563,"code":"  it(\"should called stop handler\", () => {\n    expect(mainSchema.stopped).toHaveBeenCalledTimes(1);\n    expect(mixin1L1.stopped).toHaveBeenCalledTimes(1);\n    expect(mixinL2.stopped).toHaveBeenCalledTimes(2);\n    expect(flowStopped.join(\"-\")).toBe(\"main-mixin1L1-mixinL2-mixinL2\");\n  });","file":"integration/service-mixins.spec.js","skipped":false,"dir":"test"},{"name":"should call merged handler","suites":["Test Service handlers"],"updatePoint":{"line":27,"column":32},"line":27,"code":"  it(\"should call merged handler\", () => {\n    expect(mergedHandler).toHaveBeenCalledTimes(1);\n  });","file":"integration/service.lifecycle.spec.js","skipped":false,"dir":"test"},{"name":"should call created handler","suites":["Test Service handlers"],"updatePoint":{"line":30,"column":33},"line":30,"code":"  it(\"should call created handler\", () => {\n    expect(createdHandler).toHaveBeenCalledTimes(1);\n  });","file":"integration/service.lifecycle.spec.js","skipped":false,"dir":"test"},{"name":"should call start handler","suites":["Test Service handlers"],"updatePoint":{"line":33,"column":31},"line":33,"code":"  it(\"should call start handler\", () => {\n    return broker.start().then(() => {\n      expect(startedHandler).toHaveBeenCalledTimes(1);\n    });\n  });","file":"integration/service.lifecycle.spec.js","skipped":false,"dir":"test"},{"name":"should call event handler","suites":["Test Service handlers"],"updatePoint":{"line":38,"column":31},"line":38,"code":"  it(\"should call event handler\", () => {\n    broker.broadcastLocal(\"user.created\", {\n      id: 1,\n      name: \"John\"\n    });\n    expect(eventHandler).toHaveBeenCalledTimes(1);\n    expect(eventHandler).toHaveBeenCalledWith({\n      id: 1,\n      name: \"John\"\n    }, \"node-1\", \"user.created\", expect.any(broker.ContextFactory));\n  });","file":"integration/service.lifecycle.spec.js","skipped":false,"dir":"test"},{"name":"should call stop handler","suites":["Test Service handlers"],"updatePoint":{"line":49,"column":30},"line":49,"code":"  it(\"should call stop handler\", () => {\n    return broker.stop().then(() => {\n      expect(stoppedHandler).toHaveBeenCalledTimes(1);\n    });\n  });","file":"integration/service.lifecycle.spec.js","skipped":false,"dir":"test"},{"name":"load service dynamically","suites":["Test Service handlers after broker.start"],"updatePoint":{"line":66,"column":30},"line":66,"code":"  it(\"load service dynamically\", () => {\n    broker.createService({\n      name: \"posts\",\n      merged: mergedHandler,\n      created: createdHandler,\n      started: startedHandler,\n      stopped: stoppedHandler,\n      events: {\n        \"user.*\": eventHandler\n      }\n    });\n  });","file":"integration/service.lifecycle.spec.js","skipped":false,"dir":"test"},{"name":"should call merged, created & started handler","suites":["Test Service handlers after broker.start"],"updatePoint":{"line":78,"column":51},"line":78,"code":"  it(\"should call merged, created & started handler\", () => {\n    return broker.Promise.delay(100).then(() => {\n      expect(mergedHandler).toHaveBeenCalledTimes(1);\n      expect(createdHandler).toHaveBeenCalledTimes(1);\n      expect(startedHandler).toHaveBeenCalledTimes(1);\n    });\n  });","file":"integration/service.lifecycle.spec.js","skipped":false,"dir":"test"},{"name":"should call event handler","suites":["Test Service handlers after broker.start"],"updatePoint":{"line":85,"column":31},"line":85,"code":"  it(\"should call event handler\", () => {\n    broker.broadcastLocal(\"user.created\", {\n      id: 1,\n      name: \"John\"\n    });\n    expect(eventHandler).toHaveBeenCalledTimes(1);\n    expect(eventHandler).toHaveBeenCalledWith({\n      id: 1,\n      name: \"John\"\n    }, \"node-1\", \"user.created\", expect.any(broker.ContextFactory));\n  });","file":"integration/service.lifecycle.spec.js","skipped":false,"dir":"test"},{"name":"should call stop handler","suites":["Test Service handlers after broker.start"],"updatePoint":{"line":96,"column":30},"line":96,"code":"  it(\"should call stop handler\", () => {\n    return broker.stop().then(() => {\n      expect(stoppedHandler).toHaveBeenCalledTimes(1);\n    });\n  });","file":"integration/service.lifecycle.spec.js","skipped":false,"dir":"test"},{"name":"should call action","suites":["Test Service requesting during stopping"],"updatePoint":{"line":136,"column":24},"line":136,"code":"  it(\"should call action\", () => {\n    return broker1.call(\"posts.find\").catch(protectReject).then(() => {\n      expect(schema1.actions.find).toHaveBeenCalledTimes(1);\n    });\n  });","file":"integration/service.lifecycle.spec.js","skipped":false,"dir":"test"},{"name":"should not call action after stopping","suites":["Test Service requesting during stopping"],"updatePoint":{"line":141,"column":43},"line":141,"code":"  it(\"should not call action after stopping\", () => {\n    schema1.actions.find.mockClear();\n    broker2.stop();\n    return broker1.Promise.delay(500).then(() => broker1.call(\"posts.find\")).then(protectReject).catch(err => {\n      expect(err.name).toBe(\"ServiceNotAvailableError\");\n      expect(schema1.actions.find).toHaveBeenCalledTimes(0);\n    }).then(() => broker1.call(\"users.find\")).then(protectReject).catch(err => {\n      expect(err.name).toBe(\"ServiceNotAvailableError\");\n      expect(schema2.actions.find).toHaveBeenCalledTimes(0);\n      resolver();\n      return broker1.stop();\n    });\n  });","file":"integration/service.lifecycle.spec.js","skipped":false,"dir":"test"},{"name":"should receive stream on b2","suites":["Test to send stream as ctx.param"],"updatePoint":{"line":41,"column":33},"line":41,"code":"  it(\"should receive stream on b2\", () => {\n    FLOW = [];\n    return b1.Promise.resolve().then(() => b1.call(\"file.save\", stream)).then(res => expect(res).toBe(\"OK\")).then(() => stream.push(\"first chunk\")).delay(100).then(() => {\n      expect(FLOW).toEqual([\"first chunk\"]);\n      stream.push(Buffer.from(\"second chunk\"));\n    }).delay(100).then(() => {\n      expect(FLOW).toEqual([\"first chunk\", \"second chunk\"]);\n      stream.emit(\"end\");\n    }).delay(100).then(() => {\n      expect(FLOW).toEqual([\"first chunk\", \"second chunk\", \"<END>\"]);\n    });\n  });","file":"integration/stream.spec.js","skipped":false,"dir":"test"},{"name":"should receive stream & handle error","suites":["Test to send stream as ctx.param"],"updatePoint":{"line":53,"column":42},"line":53,"code":"  it(\"should receive stream & handle error\", () => {\n    FLOW = [];\n    stream = new Stream.Readable({\n      read() {}\n\n    });\n    return b1.Promise.resolve().then(() => b1.call(\"file.save\", stream)).then(res => expect(res).toBe(\"OK\")).then(() => stream.push(\"first chunk\")).delay(100).then(() => {\n      expect(FLOW).toEqual([\"first chunk\"]);\n      stream.emit(\"error\", new Error(\"Something happened\"));\n    }).delay(100).then(() => {\n      expect(FLOW).toEqual([\"first chunk\", \"<ERROR:Something happened>\", \"<END>\"]);\n    });\n  });","file":"integration/stream.spec.js","skipped":false,"dir":"test"},{"name":"should receive stream","suites":["Test to receive a stream as response"],"updatePoint":{"line":95,"column":27},"line":95,"code":"  it(\"should receive stream\", () => {\n    const FLOW = [];\n    return b1.Promise.resolve().then(() => b1.call(\"file.get\")).then(res => {\n      expect(res).toBeInstanceOf(Stream.Readable);\n      res.on(\"data\", msg => FLOW.push(msg.toString()));\n      res.on(\"error\", err => FLOW.push(\"<ERROR:\" + err.message + \">\"));\n      res.on(\"end\", () => FLOW.push(\"<END>\"));\n    }).then(() => stream.push(\"first chunk\")).delay(100).then(() => {\n      expect(FLOW).toEqual([\"first chunk\"]);\n      stream.push(Buffer.from(\"second chunk\"));\n    }).delay(100).then(() => {\n      expect(FLOW).toEqual([\"first chunk\", \"second chunk\"]);\n      stream.emit(\"end\");\n    }).delay(100).then(() => {\n      expect(FLOW).toEqual([\"first chunk\", \"second chunk\", \"<END>\"]);\n    });\n  });","file":"integration/stream.spec.js","skipped":false,"dir":"test"},{"name":"should receive stream & handle error","suites":["Test to receive a stream as response"],"updatePoint":{"line":112,"column":42},"line":112,"code":"  it(\"should receive stream & handle error\", () => {\n    const FLOW = [];\n    return b1.Promise.resolve().then(() => b1.call(\"file.get\")).then(res => {\n      expect(res).toBeInstanceOf(Stream.Readable);\n      res.on(\"data\", msg => FLOW.push(msg.toString()));\n      res.on(\"error\", err => FLOW.push(\"<ERROR:\" + err.message + \">\"));\n      res.on(\"end\", () => FLOW.push(\"<END>\"));\n    }).then(() => stream.push(\"first chunk\")).delay(100).then(() => {\n      expect(FLOW).toEqual([\"first chunk\"]);\n      stream.emit(\"error\", new Error(\"Something happened\"));\n    }).delay(100).then(() => {\n      expect(FLOW).toEqual([\"first chunk\", \"<ERROR:Something happened>\", \"<END>\"]);\n    });\n  });","file":"integration/stream.spec.js","skipped":false,"dir":"test"},{"name":"should send & receive stream","suites":["Test duplex streaming"],"updatePoint":{"line":158,"column":34},"line":158,"code":"  it(\"should send & receive stream\", () => {\n    const FLOW = [];\n    const stream = new Stream.Readable({\n      read() {}\n\n    });\n    return b1.Promise.resolve().then(() => b1.call(\"file.convert\", stream)).then(res => {\n      expect(res).toBeInstanceOf(Stream.Readable);\n      res.on(\"data\", msg => FLOW.push(msg.toString()));\n      res.on(\"error\", err => FLOW.push(\"<ERROR:\" + err.message + \">\"));\n      res.on(\"end\", () => FLOW.push(\"<END>\"));\n    }).then(() => stream.push(\"first chunk\")).delay(100).then(() => {\n      expect(FLOW).toEqual([\"FIRST CHUNK\"]);\n      stream.push(Buffer.from(\"second chunk\"));\n    }).delay(100).then(() => {\n      expect(FLOW).toEqual([\"FIRST CHUNK\", \"SECOND CHUNK\"]);\n      stream.emit(\"end\");\n    }).delay(100).then(() => {\n      expect(FLOW).toEqual([\"FIRST CHUNK\", \"SECOND CHUNK\", \"<END>\"]);\n    });\n  });","file":"integration/stream.spec.js","skipped":false,"dir":"test"},{"name":"should receive stream & handle error","suites":["Test duplex streaming"],"updatePoint":{"line":179,"column":42},"line":179,"code":"  it(\"should receive stream & handle error\", () => {\n    const FLOW = [];\n    const stream = new Stream.Readable({\n      read() {}\n\n    });\n    return b1.Promise.resolve().then(() => b1.call(\"file.convert\", stream)).then(res => {\n      expect(res).toBeInstanceOf(Stream.Readable);\n      res.on(\"data\", msg => FLOW.push(msg.toString()));\n      res.on(\"error\", err => FLOW.push(\"<ERROR:\" + err.message + \">\"));\n      res.on(\"end\", () => FLOW.push(\"<END>\"));\n    }).then(() => stream.push(\"first chunk\")).delay(100).then(() => {\n      expect(FLOW).toEqual([\"FIRST CHUNK\"]);\n      stream.emit(\"error\", new Error(\"Something happened\"));\n    }).delay(100).then(() => {\n      expect(FLOW).toEqual([\"FIRST CHUNK\", \"<ERROR:Something happened>\", \"<END>\"]);\n    });\n  });","file":"integration/stream.spec.js","skipped":false,"dir":"test"},{"name":"should receive stream in objectMode on b2","suites":["Test to send stream in objectMode as ctx.param"],"updatePoint":{"line":237,"column":47},"line":237,"code":"  it(\"should receive stream in objectMode on b2\", () => {\n    FLOW = [];\n    return b1.Promise.resolve().then(() => b1.call(\"data.store\", stream)).then(res => expect(res).toBe(\"OK\")).then(() => stream.push({\n      id: 123,\n      data: \"first record\"\n    })).delay(100).then(() => {\n      expect(FLOW).toEqual([{\n        id: 123,\n        data: \"first record\"\n      }]);\n      stream.push({\n        id: 786,\n        data: \"second record\"\n      });\n    }).delay(100).then(() => {\n      expect(FLOW).toEqual([{\n        id: 123,\n        data: \"first record\"\n      }, {\n        id: 786,\n        data: \"second record\"\n      }]);\n      stream.emit(\"end\");\n    }).delay(100).then(() => {\n      expect(FLOW).toEqual([{\n        id: 123,\n        data: \"first record\"\n      }, {\n        id: 786,\n        data: \"second record\"\n      }, \"<END>\"]);\n    });\n  });","file":"integration/stream.spec.js","skipped":false,"dir":"test"},{"name":"should receive stream in objectMode & handle error","suites":["Test to send stream in objectMode as ctx.param"],"updatePoint":{"line":270,"column":56},"line":270,"code":"  it(\"should receive stream in objectMode & handle error\", () => {\n    FLOW = [];\n    stream = new Stream.Readable({\n      objectMode: true,\n\n      read() {}\n\n    });\n    return b1.Promise.resolve().then(() => b1.call(\"data.store\", stream)).then(res => expect(res).toBe(\"OK\")).then(() => stream.push({\n      id: 123,\n      data: \"first record\"\n    })).delay(100).then(() => {\n      expect(FLOW).toEqual([{\n        id: 123,\n        data: \"first record\"\n      }]);\n      stream.emit(\"error\", new Error(\"Something happened\"));\n    }).delay(100).then(() => {\n      expect(FLOW).toEqual([{\n        id: 123,\n        data: \"first record\"\n      }, \"<ERROR:Something happened>\", \"<END>\"]);\n    });\n  });","file":"integration/stream.spec.js","skipped":false,"dir":"test"},{"name":"should receive stream in objectMode","suites":["Test to receive a stream in objectMode as response"],"updatePoint":{"line":325,"column":41},"line":325,"code":"  it(\"should receive stream in objectMode\", () => {\n    const FLOW = [];\n    return b1.Promise.resolve().then(() => b1.call(\"db.query\")).then(res => {\n      expect(res).toBeInstanceOf(Stream.Readable);\n      expect(res.readableObjectMode === true || res._readableState && res._readableState.objectMode === true).toBe(true);\n      res.on(\"data\", msg => FLOW.push(msg));\n      res.on(\"error\", err => FLOW.push(\"<ERROR:\" + err.message + \">\"));\n      res.on(\"end\", () => FLOW.push(\"<END>\"));\n    }).then(() => stream.push({\n      id: 123,\n      data: \"first record\"\n    })).delay(100).then(() => {\n      expect(FLOW).toEqual([{\n        id: 123,\n        data: \"first record\"\n      }]);\n      stream.push({\n        id: 786,\n        data: \"second record\"\n      });\n    }).delay(100).then(() => {\n      expect(FLOW).toEqual([{\n        id: 123,\n        data: \"first record\"\n      }, {\n        id: 786,\n        data: \"second record\"\n      }]);\n      stream.emit(\"end\");\n    }).delay(100).then(() => {\n      expect(FLOW).toEqual([{\n        id: 123,\n        data: \"first record\"\n      }, {\n        id: 786,\n        data: \"second record\"\n      }, \"<END>\"]);\n    });\n  });","file":"integration/stream.spec.js","skipped":false,"dir":"test"},{"name":"should receive stream in objectMode & handle error","suites":["Test to receive a stream in objectMode as response"],"updatePoint":{"line":364,"column":56},"line":364,"code":"  it(\"should receive stream in objectMode & handle error\", () => {\n    const FLOW = [];\n    return b1.Promise.resolve().then(() => b1.call(\"db.query\")).then(res => {\n      expect(res).toBeInstanceOf(Stream.Readable);\n      expect(res.readableObjectMode === true || res._readableState && res._readableState.objectMode === true).toBe(true);\n      res.on(\"data\", msg => FLOW.push(msg));\n      res.on(\"error\", err => FLOW.push(\"<ERROR:\" + err.message + \">\"));\n      res.on(\"end\", () => FLOW.push(\"<END>\"));\n    }).then(() => stream.push({\n      id: 123,\n      data: \"first record\"\n    })).delay(100).then(() => {\n      expect(FLOW).toEqual([{\n        id: 123,\n        data: \"first record\"\n      }]);\n      stream.emit(\"error\", new Error(\"Something happened\"));\n    }).delay(100).then(() => {\n      expect(FLOW).toEqual([{\n        id: 123,\n        data: \"first record\"\n      }, \"<ERROR:Something happened>\", \"<END>\"]);\n    });\n  });","file":"integration/stream.spec.js","skipped":false,"dir":"test"},{"name":"should send & receive stream in objectMode","suites":["Test duplex streaming, result in objectMode"],"updatePoint":{"line":427,"column":48},"line":427,"code":"  it(\"should send & receive stream in objectMode\", () => {\n    const FLOW = [];\n    const stream = new Stream.Readable({\n      objectMode: true,\n\n      read() {}\n\n    });\n    return b1.Promise.resolve().then(() => b1.call(\"csv.parse\", stream)).then(res => {\n      expect(res).toBeInstanceOf(Stream.Readable);\n      expect(res.readableObjectMode === true || res._readableState && res._readableState.objectMode === true).toBe(true);\n      res.on(\"data\", msg => FLOW.push(msg));\n      res.on(\"error\", err => FLOW.push(\"<ERROR:\" + err.message + \">\"));\n      res.on(\"end\", () => FLOW.push(\"<END>\"));\n    }).then(() => stream.push({\n      id: 123,\n      data: \"first record\"\n    })).delay(100).then(() => {\n      expect(FLOW).toEqual([{\n        line: 1,\n        data: {\n          id: 123,\n          data: \"first record\"\n        }\n      }]);\n      stream.push({\n        id: 786,\n        data: \"second record\"\n      });\n    }).delay(100).then(() => {\n      expect(FLOW).toEqual([{\n        line: 1,\n        data: {\n          id: 123,\n          data: \"first record\"\n        }\n      }, {\n        line: 2,\n        data: {\n          id: 786,\n          data: \"second record\"\n        }\n      }]);\n      stream.emit(\"end\");\n    }).delay(100).then(() => {\n      expect(FLOW).toEqual([{\n        line: 1,\n        data: {\n          id: 123,\n          data: \"first record\"\n        }\n      }, {\n        line: 2,\n        data: {\n          id: 786,\n          data: \"second record\"\n        }\n      }, \"<END>\"]);\n    });\n  });","file":"integration/stream.spec.js","skipped":false,"dir":"test"},{"name":"should receive stream in objectMode & handle error","suites":["Test duplex streaming, result in objectMode"],"updatePoint":{"line":487,"column":56},"line":487,"code":"  it(\"should receive stream in objectMode & handle error\", () => {\n    const FLOW = [];\n    const stream = new Stream.Readable({\n      objectMode: true,\n\n      read() {}\n\n    });\n    return b1.Promise.resolve().then(() => b1.call(\"csv.parse\", stream)).then(res => {\n      expect(res).toBeInstanceOf(Stream.Readable);\n      expect(res.readableObjectMode === true || res._readableState && res._readableState.objectMode === true).toBe(true);\n      res.on(\"data\", msg => FLOW.push(msg));\n      res.on(\"error\", err => FLOW.push(\"<ERROR:\" + err.message + \">\"));\n      res.on(\"end\", () => FLOW.push(\"<END>\"));\n    }).then(() => stream.push({\n      id: 123,\n      data: \"first record\"\n    })).delay(100).then(() => {\n      expect(FLOW).toEqual([{\n        line: 1,\n        data: {\n          id: 123,\n          data: \"first record\"\n        }\n      }]);\n      stream.emit(\"error\", new Error(\"Something happened\"));\n    }).delay(100).then(() => {\n      expect(FLOW).toEqual([{\n        line: 1,\n        data: {\n          id: 123,\n          data: \"first record\"\n        }\n      }, \"<ERROR:Something happened>\", \"<END>\"]);\n    });\n  });","file":"integration/stream.spec.js","skipped":false,"dir":"test"},{"name":"should generate action spans","suites":["Test Tracing feature with actions"],"updatePoint":{"line":191,"column":34},"line":191,"code":"  it(\"should generate action spans\", async () => {\n    idCounter = 1;\n    const res = await broker1.call(\"posts.list\", null, {\n      meta: {\n        user: {\n          id: 100,\n          name: \"Superuser\"\n        }\n      }\n    });\n    expect(res).toMatchSnapshot(); //Promise.delay(200);\n\n    STORE.sort((a, b) => a.startTicks - b.startTicks);\n    const spans = getSpanFields(STORE);\n    expect(spans).toMatchSnapshot();\n  });","file":"integration/tracing.spec.js","skipped":false,"dir":"test"},{"name":"should generate event spans","suites":["Test Tracing feature with actions"],"updatePoint":{"line":207,"column":33},"line":207,"code":"  it(\"should generate event spans\", async () => {\n    idCounter = 1;\n    STORE.length = 0;\n    await broker1.emit(\"comments.removed\", null, {\n      meta: {\n        user: {\n          id: 100,\n          name: \"Superuser\"\n        }\n      }\n    });\n    await Promise.delay(500);\n    STORE.sort((a, b) => a.startTicks - b.startTicks);\n    const spans = getSpanFields(STORE);\n    expect(spans).toMatchSnapshot();\n  });","file":"integration/tracing.spec.js","skipped":false,"dir":"test"},{"name":"shouldn't wrap validation, if action can't contain params settings","suites":["Test broker validator with actions"],"updatePoint":{"line":35,"column":72},"line":35,"code":"  it(\"shouldn't wrap validation, if action can't contain params settings\", () => {\n    return broker.call(\"test.withoutValidation\").then(() => {\n      expect(broker.validator.validate).toHaveBeenCalledTimes(0);\n    });\n  });","file":"integration/validator.spec.js","skipped":false,"dir":"test"},{"name":"should call handler, if params are correct","suites":["Test broker validator with actions"],"updatePoint":{"line":40,"column":48},"line":40,"code":"  it(\"should call handler, if params are correct\", () => {\n    schema.actions.withValidation.handler.mockClear();\n    let p = {\n      a: 5,\n      b: 10\n    };\n    return broker.call(\"test.withValidation\", p).then(res => {\n      expect(res).toBe(123);\n      expect(schema.actions.withValidation.handler).toHaveBeenCalledTimes(1);\n    });\n  });","file":"integration/validator.spec.js","skipped":false,"dir":"test"},{"name":"should throw ValidationError, if params is not correct","suites":["Test broker validator with actions"],"updatePoint":{"line":51,"column":60},"line":51,"code":"  it(\"should throw ValidationError, if params is not correct\", () => {\n    schema.actions.withValidation.handler.mockClear();\n    let p = {\n      a: 5,\n      b: \"asd\"\n    };\n    return broker.call(\"test.withValidation\", p).catch(err => {\n      expect(err).toBeInstanceOf(ValidationError);\n      expect(schema.actions.withValidation.handler).toHaveBeenCalledTimes(0);\n    });\n  });","file":"integration/validator.spec.js","skipped":false,"dir":"test"},{"name":"should set broker & hook & executionAsyncId & store, ","suites":["Test 'AsyncStorage' class","Test constructor"],"updatePoint":{"line":26,"column":61},"line":26,"code":"    it(\"should set broker & hook & executionAsyncId & store, \", () => {\n      const _initBindMock = jest.fn(() => \"_initBindMock\"); //const _beforeBindMock = jest.fn(() => \"_beforeBindMock\");\n      //const _afterBindMock = jest.fn(() => \"_afterBindMock\");\n\n\n      const _destroyBindMock = jest.fn(() => \"_destroyBindMock\");\n\n      AsyncStorage.prototype._init.bind = _initBindMock; //AsyncStorage.prototype._before.bind = _becoreBindMock;\n      //AsyncStorage.prototype._after.bind = _afterBindMock;\n\n      AsyncStorage.prototype._destroy.bind = _destroyBindMock; // ---- ^ SETUP ^ ---\n\n      const storage = new AsyncStorage(broker); // ---- ˇ ASSERTS ˇ ---\n\n      expect(storage.broker).toBe(broker);\n      expect(asyncHooks.createHook).toBeCalledTimes(1);\n      expect(asyncHooks.createHook).toBeCalledWith({\n        init: \"_initBindMock\",\n        //before: \"_beforeBindMock\",\n        //after: \"_afterBindMock\",\n        destroy: \"_destroyBindMock\",\n        promiseResolve: \"_destroyBindMock\"\n      });\n      expect(storage.hook).toEqual(\"createHookMock\");\n      const thisOnMock = {\n        broker: {},\n        executionAsyncId: executionAsyncIdMock,\n        hook: \"createHookMock\",\n        store: new Map()\n      };\n      expect(_initBindMock).toBeCalledTimes(1);\n      expect(_initBindMock).toBeCalledWith(thisOnMock); //expect(_beforeBindMock).toBeCalledTimes(1);\n      //expect(_beforeBindMock).toBeCalledWith(thisOnMock);\n      //expect(_afterBindMock).toBeCalledTimes(1);\n      //expect(_afterBindMock).toBeCalledWith(thisOnMock);\n\n      expect(_destroyBindMock).toBeCalledTimes(2);\n      expect(_destroyBindMock).toHaveBeenNthCalledWith(1, thisOnMock);\n      expect(_destroyBindMock).toHaveBeenNthCalledWith(2, thisOnMock);\n      expect(storage.executionAsyncId).toBe(executionAsyncIdMock);\n      expect(storage.store).toBeInstanceOf(Map);\n      expect(storage.store.size).toEqual(0);\n\n      _initBindMock.mockClear(); //_beforeBindMock.mockClear();\n      //_afterBindMock.mockClear();\n\n\n      _destroyBindMock.mockClear();\n    });","file":"unit/async-storage.spec.js","skipped":false,"dir":"test"},{"name":"should call hook enable function","suites":["Test 'AsyncStorage' class","Test 'enable' function"],"updatePoint":{"line":77,"column":40},"line":77,"code":"    it(\"should call hook enable function\", () => {\n      const storage = new AsyncStorage(broker); // ---- ^ SETUP ^ ---\n\n      storage.enable(); // ---- ˇ ASSERTS ˇ ---\n\n      expect(enableHookMock).toBeCalledTimes(1);\n      expect(enableHookMock).toBeCalledWith();\n      enableHookMock.mockClear();\n    });","file":"unit/async-storage.spec.js","skipped":false,"dir":"test"},{"name":"should call hook disable function","suites":["Test 'AsyncStorage' class","Test 'disable' function"],"updatePoint":{"line":88,"column":41},"line":88,"code":"    it(\"should call hook disable function\", () => {\n      const storage = new AsyncStorage(broker); // ---- ^ SETUP ^ ---\n\n      storage.disable(); // ---- ˇ ASSERTS ˇ ---\n\n      expect(disableHookMock).toBeCalledTimes(1);\n      expect(disableHookMock).toBeCalledWith();\n      disableHookMock.mockClear();\n    });","file":"unit/async-storage.spec.js","skipped":false,"dir":"test"},{"name":"should call hook disable and store clear function","suites":["Test 'AsyncStorage' class","Test 'stop' function"],"updatePoint":{"line":99,"column":57},"line":99,"code":"    it(\"should call hook disable and store clear function\", () => {\n      const storage = new AsyncStorage(broker);\n      jest.spyOn(Map.prototype, \"clear\"); // ---- ^ SETUP ^ ---\n\n      storage.stop(); // ---- ˇ ASSERTS ˇ ---\n\n      expect(disableHookMock).toBeCalledTimes(1);\n      expect(disableHookMock).toBeCalledWith();\n      expect(storage.store.clear).toBeCalledTimes(1);\n      expect(storage.store.clear).toBeCalledWith();\n      disableHookMock.mockClear();\n    });","file":"unit/async-storage.spec.js","skipped":false,"dir":"test"},{"name":"should call and return executionAsyncId function","suites":["Test 'AsyncStorage' class","Test 'getAsyncId' method"],"updatePoint":{"line":113,"column":56},"line":113,"code":"    it(\"should call and return executionAsyncId function\", () => {\n      const storage = new AsyncStorage(broker); // ---- ^ SETUP ^ ---\n\n      const res = storage.getAsyncId(); // ---- ˇ ASSERTS ˇ ---\n\n      expect(executionAsyncIdMock).toBeCalledTimes(1);\n      expect(executionAsyncIdMock).toBeCalledWith();\n      expect(res).toEqual(\"currentUidMock\");\n      executionAsyncIdMock.mockClear();\n    });","file":"unit/async-storage.spec.js","skipped":false,"dir":"test"},{"name":"should get executionAsyncId and set store","suites":["Test 'AsyncStorage' class","Test 'setSessionData' method"],"updatePoint":{"line":125,"column":49},"line":125,"code":"    it(\"should get executionAsyncId and set store\", () => {\n      const storage = new AsyncStorage(broker);\n      storage.store = {\n        set: jest.fn()\n      }; // ---- ^ SETUP ^ ---\n\n      storage.setSessionData(\"dataMock\"); // ---- ˇ ASSERTS ˇ ---\n\n      expect(executionAsyncIdMock).toBeCalledTimes(1);\n      expect(executionAsyncIdMock).toBeCalledWith();\n      expect(storage.store.set).toBeCalledTimes(1);\n      expect(storage.store.set).toBeCalledWith(\"currentUidMock\", {\n        data: \"dataMock\",\n        owner: \"currentUidMock\"\n      });\n      executionAsyncIdMock.mockClear();\n    });","file":"unit/async-storage.spec.js","skipped":false,"dir":"test"},{"name":"should get executionAsyncId and get item from store (item has data)","suites":["Test 'AsyncStorage' class","Test 'getSessionData' method"],"updatePoint":{"line":144,"column":75},"line":144,"code":"    it(\"should get executionAsyncId and get item from store (item has data)\", () => {\n      const storage = new AsyncStorage(broker);\n      storage.store = {\n        get: jest.fn(() => {\n          return {\n            data: \"itemDataMock\"\n          };\n        })\n      }; // ---- ^ SETUP ^ ---\n\n      const res = storage.getSessionData(); // ---- ˇ ASSERTS ˇ ---\n\n      expect(executionAsyncIdMock).toBeCalledTimes(1);\n      expect(executionAsyncIdMock).toBeCalledWith();\n      expect(storage.store.get).toBeCalledTimes(1);\n      expect(storage.store.get).toBeCalledWith(\"currentUidMock\");\n      expect(res).toEqual(\"itemDataMock\");\n      executionAsyncIdMock.mockClear();\n    });","file":"unit/async-storage.spec.js","skipped":false,"dir":"test"},{"name":"should get executionAsyncId and get item from store (item has no data)","suites":["Test 'AsyncStorage' class","Test 'getSessionData' method"],"updatePoint":{"line":163,"column":78},"line":163,"code":"    it(\"should get executionAsyncId and get item from store (item has no data)\", () => {\n      const storage = new AsyncStorage(broker);\n      storage.store = {\n        get: jest.fn()\n      }; // ---- ^ SETUP ^ ---\n\n      const res = storage.getSessionData(); // ---- ˇ ASSERTS ˇ ---\n\n      expect(executionAsyncIdMock).toBeCalledTimes(1);\n      expect(executionAsyncIdMock).toBeCalledWith();\n      expect(storage.store.get).toBeCalledTimes(1);\n      expect(storage.store.get).toBeCalledWith(\"currentUidMock\");\n      expect(res).toBeNull();\n      executionAsyncIdMock.mockClear();\n    });","file":"unit/async-storage.spec.js","skipped":false,"dir":"test"},{"name":"should getSessionData return what setSessionData set before","suites":["Test 'AsyncStorage' class","Test 'getSessionData' method"],"updatePoint":{"line":178,"column":67},"line":178,"code":"    it(\"should getSessionData return what setSessionData set before\", () => {\n      const storage = new AsyncStorage(broker);\n      const context = {\n        a: 5\n      };\n      storage.setSessionData(context); // ---- ^ SETUP ^ ---\n\n      let storagedContext = storage.getSessionData(); // ---- ˇ ASSERTS ˇ ---\n\n      expect(storagedContext).toBe(context);\n    });","file":"unit/async-storage.spec.js","skipped":false,"dir":"test"},{"name":"should return if type is 'TIMERWRAP'","suites":["Test 'AsyncStorage' class","Test '_init' function"],"updatePoint":{"line":191,"column":44},"line":191,"code":"    it(\"should return if type is 'TIMERWRAP'\", () => {\n      const storage = new AsyncStorage(broker);\n      storage.store = {\n        get: jest.fn(),\n        set: jest.fn()\n      }; // ---- ^ SETUP ^ ---\n\n      const res = storage._init(null, \"TIMERWRAP\", null); // ---- ˇ ASSERTS ˇ ---\n\n\n      expect(storage.store.get).toBeCalledTimes(0);\n      expect(storage.store.set).toBeCalledTimes(0);\n      expect(res).toBeUndefined();\n    });","file":"unit/async-storage.spec.js","skipped":false,"dir":"test"},{"name":"should does nothing if store does not contain item by trigerAsyncId","suites":["Test 'AsyncStorage' class","Test '_init' function"],"updatePoint":{"line":205,"column":75},"line":205,"code":"    it(\"should does nothing if store does not contain item by trigerAsyncId\", () => {\n      const storage = new AsyncStorage(broker);\n      storage.store = {\n        get: jest.fn(),\n        set: jest.fn()\n      }; // ---- ^ SETUP ^ ---\n\n      storage._init(\"asyncId\", \"NOT_TIMERWRAP\", \"triggerAsyncId\"); // ---- ˇ ASSERTS ˇ ---\n\n\n      expect(storage.store.get).toBeCalledTimes(1);\n      expect(storage.store.get).toBeCalledWith(\"triggerAsyncId\");\n      expect(storage.store.set).toBeCalledTimes(0);\n    });","file":"unit/async-storage.spec.js","skipped":false,"dir":"test"},{"name":"should set item in store (triggerAsyncId -> asyncId)","suites":["Test 'AsyncStorage' class","Test '_init' function"],"updatePoint":{"line":219,"column":60},"line":219,"code":"    it(\"should set item in store (triggerAsyncId -> asyncId)\", () => {\n      const storage = new AsyncStorage(broker);\n      storage.store = {\n        get: jest.fn(() => \"itemMock\"),\n        set: jest.fn()\n      }; // ---- ^ SETUP ^ ---\n\n      storage._init(\"asyncId\", \"NOT_TIMERWRAP\", \"triggerAsyncId\"); // ---- ˇ ASSERTS ˇ ---\n\n\n      expect(storage.store.get).toBeCalledTimes(1);\n      expect(storage.store.get).toBeCalledWith(\"triggerAsyncId\");\n      expect(storage.store.set).toBeCalledTimes(1);\n      expect(storage.store.set).toBeCalledWith(\"asyncId\", \"itemMock\");\n    });","file":"unit/async-storage.spec.js","skipped":false,"dir":"test"},{"name":"should does nothing if store does not contain item by trigerAsyncId","suites":["Test 'AsyncStorage' class","Test '_destroy' function"],"updatePoint":{"line":236,"column":75},"line":236,"code":"    it(\"should does nothing if store does not contain item by trigerAsyncId\", () => {\n      const storage = new AsyncStorage(broker);\n      storage.store = {\n        get: jest.fn(),\n        delete: jest.fn()\n      }; // ---- ^ SETUP ^ ---\n\n      storage._destroy(\"asyncId\"); // ---- ˇ ASSERTS ˇ ---\n\n\n      expect(storage.store.get).toBeCalledTimes(1);\n      expect(storage.store.get).toBeCalledWith(\"asyncId\");\n      expect(storage.store.delete).toBeCalledTimes(0);\n    });","file":"unit/async-storage.spec.js","skipped":false,"dir":"test"},{"name":"should delete item from store by asyncId","suites":["Test 'AsyncStorage' class","Test '_destroy' function"],"updatePoint":{"line":250,"column":48},"line":250,"code":"    it(\"should delete item from store by asyncId\", () => {\n      const storage = new AsyncStorage(broker);\n      storage.store = {\n        get: jest.fn(() => \"itemMock\"),\n        delete: jest.fn()\n      }; // ---- ^ SETUP ^ ---\n\n      storage._destroy(\"asyncId\"); // ---- ˇ ASSERTS ˇ ---\n\n\n      expect(storage.store.get).toBeCalledTimes(1);\n      expect(storage.store.get).toBeCalledWith(\"asyncId\");\n      expect(storage.store.delete).toBeCalledTimes(1);\n      expect(storage.store.delete).toBeCalledWith(\"asyncId\");\n    }); // Commented case","file":"unit/async-storage.spec.js","skipped":false,"dir":"test"},{"name":"check constructor","suites":["Test BaseCacher"],"updatePoint":{"line":8,"column":23},"line":8,"code":"  it(\"check constructor\", () => {\n    let cacher = new Cacher();\n    expect(cacher).toBeDefined();\n    expect(cacher.opts).toBeDefined();\n    expect(cacher.opts.ttl).toBeNull();\n    expect(cacher.connected).toBe(null);\n    expect(cacher.init).toBeDefined();\n    expect(cacher.close).toBeDefined();\n    expect(cacher.get).toBeDefined();\n    expect(cacher.set).toBeDefined();\n    expect(cacher.del).toBeDefined();\n    expect(cacher.clean).toBeDefined();\n    expect(cacher.getCacheKey).toBeDefined();\n    expect(cacher.middleware).toBeDefined();\n  });","file":"unit/cachers/base.spec.js","skipped":false,"dir":"test"},{"name":"check constructor with empty opts","suites":["Test BaseCacher"],"updatePoint":{"line":23,"column":39},"line":23,"code":"  it(\"check constructor with empty opts\", () => {\n    let opts = {};\n    let cacher = new Cacher(opts);\n    expect(cacher.opts).toBeDefined();\n    expect(cacher.opts.ttl).toBeNull();\n    expect(cacher.opts.maxParamsLength).toBeNull();\n  });","file":"unit/cachers/base.spec.js","skipped":false,"dir":"test"},{"name":"check constructor with options","suites":["Test BaseCacher"],"updatePoint":{"line":30,"column":36},"line":30,"code":"  it(\"check constructor with options\", () => {\n    let opts = {\n      ttl: 500,\n      maxParamsLength: 128\n    };\n    let cacher = new Cacher(opts);\n    expect(cacher).toBeDefined();\n    expect(cacher.opts).toEqual(opts);\n    expect(cacher.opts.ttl).toBe(500);\n    expect(cacher.opts.maxParamsLength).toBe(128);\n  });","file":"unit/cachers/base.spec.js","skipped":false,"dir":"test"},{"name":"check init","suites":["Test BaseCacher"],"updatePoint":{"line":41,"column":16},"line":41,"code":"  it(\"check init\", () => {\n    let broker = new ServiceBroker({\n      logger: false\n    });\n    broker.on = jest.fn();\n    let cacher = new Cacher();\n    jest.spyOn(cacher, \"registerMoleculerMetrics\");\n    cacher.init(broker);\n    expect(cacher.broker).toBe(broker);\n    expect(cacher.logger).toBeDefined();\n    expect(cacher.prefix).toBe(\"MOL-\");\n    expect(cacher.registerMoleculerMetrics).toHaveBeenCalledTimes(1);\n  });","file":"unit/cachers/base.spec.js","skipped":false,"dir":"test"},{"name":"check registerMoleculerMetrics","suites":["Test BaseCacher"],"updatePoint":{"line":54,"column":36},"line":54,"code":"  it(\"check registerMoleculerMetrics\", () => {\n    let broker = new ServiceBroker({\n      logger: false\n    });\n    let cacher = new Cacher();\n    cacher.init(broker);\n    broker.metrics.register = jest.fn();\n    cacher.registerMoleculerMetrics();\n    expect(broker.metrics.register).toHaveBeenCalledTimes(10);\n  });","file":"unit/cachers/base.spec.js","skipped":false,"dir":"test"},{"name":"check init with namespace","suites":["Test BaseCacher"],"updatePoint":{"line":64,"column":31},"line":64,"code":"  it(\"check init with namespace\", () => {\n    let broker = new ServiceBroker({\n      logger: false,\n      namespace: \"uat-test\"\n    });\n    let cacher = new Cacher();\n    cacher.init(broker);\n    expect(cacher.prefix).toBe(\"MOL-uat-test-\");\n  });","file":"unit/cachers/base.spec.js","skipped":false,"dir":"test"},{"name":"check init with prefix","suites":["Test BaseCacher"],"updatePoint":{"line":73,"column":28},"line":73,"code":"  it(\"check init with prefix\", () => {\n    let broker = new ServiceBroker({\n      logger: false,\n      namespace: \"uat-test\"\n    });\n    let cacher = new Cacher({\n      prefix: \"other\"\n    });\n    cacher.init(broker);\n    expect(cacher.prefix).toBe(\"other-\");\n  });","file":"unit/cachers/base.spec.js","skipped":false,"dir":"test"},{"name":"check getCacheKey with keys","suites":["Test BaseCacher"],"updatePoint":{"line":84,"column":33},"line":84,"code":"  it(\"check getCacheKey with keys\", () => {\n    let broker = new ServiceBroker({\n      logger: false\n    });\n    let cacher = new Cacher();\n    cacher.init(broker); // Check result\n\n    let res = cacher.getCacheKey(\"posts.find.model\", {\n      id: 1,\n      name: \"Bob\"\n    });\n    expect(res).toBe(\"posts.find.model:id|1|name|Bob\"); // Same result, with same params\n\n    let res2 = cacher.getCacheKey(\"posts.find.model\", {\n      id: 1,\n      name: \"Bob\"\n    });\n    expect(res2).toEqual(res); // Different result, with different params\n\n    let res3 = cacher.getCacheKey(\"posts.find.model\", {\n      id: 2,\n      name: \"Bob\"\n    });\n    expect(res3).not.toEqual(res);\n    expect(res3).toBe(\"posts.find.model:id|2|name|Bob\");\n    res = cacher.getCacheKey();\n    expect(res).toBe(undefined);\n    res = cacher.getCacheKey(\"posts.find\");\n    expect(res).toBe(\"posts.find\");\n    res = cacher.getCacheKey(\"user\", {});\n    expect(res).toBe(\"user:\");\n    res = cacher.getCacheKey(\"user\", {\n      a: 5\n    });\n    expect(res).toBe(\"user:a|5\");\n    res = cacher.getCacheKey(\"user\", {\n      a: []\n    });\n    expect(res).toBe(\"user:a|[]\");\n    res = cacher.getCacheKey(\"user\", {\n      a: null\n    });\n    expect(res).toBe(\"user:a|null\");\n    res = cacher.getCacheKey(\"user\", {\n      a: 5\n    }, null, [\"a\"]);\n    expect(res).toBe(\"user:5\");\n    res = cacher.getCacheKey(\"user\", {\n      a: {\n        id: 5\n      }\n    }, null, [\"a\"]);\n    expect(res).toBe(\"user:id|5\");\n    res = cacher.getCacheKey(\"user\", {\n      a: [1, 3, 5]\n    }, null, [\"a\"]);\n    expect(res).toBe(\"user:[1|3|5]\");\n    res = cacher.getCacheKey(\"user\", {\n      a: 5,\n      b: 3,\n      c: 5\n    }, null, [\"a\"]);\n    expect(res).toBe(\"user:5\");\n    res = cacher.getCacheKey(\"user\", {\n      a: {\n        b: \"John\"\n      }\n    }, null, [\"a.b\"]);\n    expect(res).toBe(\"user:John\");\n    res = cacher.getCacheKey(\"user\", {\n      a: 5,\n      b: 3,\n      c: 5\n    }, null, [\"a\", \"b\", \"c\"]);\n    expect(res).toBe(\"user:5|3|5\");\n    res = cacher.getCacheKey(\"user\", {\n      a: 5,\n      c: 5\n    }, null, [\"a\", \"b\", \"c\"]);\n    expect(res).toBe(\"user:5|undefined|5\");\n    res = cacher.getCacheKey(\"user\", {\n      a: \"12345\"\n    });\n    expect(res).toBe(\"user:a|12345\");\n    res = cacher.getCacheKey(\"user\", {\n      a: [\"12345\"]\n    });\n    expect(res).toBe(\"user:a|[12345]\");\n    const d = new Date(1614529868608);\n    res = cacher.getCacheKey(\"user\", {\n      a: d\n    });\n    expect(res).toBe(\"user:a|1614529868608\");\n    res = cacher.getCacheKey(\"user\", {\n      a: Symbol(\"something\")\n    });\n    expect(res).toBe(\"user:a|Symbol(something)\");\n    res = cacher.getCacheKey(\"user\", {\n      a: 5,\n      b: {\n        id: 3\n      }\n    }, null, [\"a\", \"c\", \"b\"]);\n    expect(res).toBe(\"user:5|undefined|id|3\");\n    res = cacher.getCacheKey(\"user\", {\n      a: 5,\n      b: {\n        id: 3,\n        other: {\n          status: true\n        }\n      }\n    }, null, [\"a\", \"c\", \"b.id\"]);\n    expect(res).toBe(\"user:5|undefined|3\");\n    res = cacher.getCacheKey(\"user\", {\n      a: 5,\n      b: {\n        id: 3,\n        other: {\n          status: true\n        }\n      }\n    }, null, [\"a\", \"b.id\", \"b.other.status\"]);\n    expect(res).toBe(\"user:5|3|true\");\n    res = cacher.getCacheKey(\"user\", {\n      a: 5,\n      b: {\n        id: 3,\n        other: {\n          status: true\n        }\n      }\n    });\n    expect(res).toBe(\"user:a|5|b|id|3|other|status|true\");\n    res = cacher.getCacheKey(\"user\", {\n      a: 5,\n      b: 3\n    }, null, []);\n    expect(res).toBe(\"user\");\n    res = cacher.getCacheKey(\"user\", {\n      a: Object.create(null)\n    }, null, [\"a\"]);\n    expect(res).toBe(\"user:\"); // Test with meta\n\n    res = cacher.getCacheKey(\"user\", {\n      a: 5\n    }, {\n      user: \"bob\"\n    });\n    expect(res).toBe(\"user:a|5\");\n    res = cacher.getCacheKey(\"user\", {\n      a: 5\n    }, {\n      user: \"bob\"\n    }, [\"a\"]);\n    expect(res).toBe(\"user:5\");\n    res = cacher.getCacheKey(\"user\", {\n      a: 5\n    }, {\n      user: \"bob\"\n    }, [\"user\"]);\n    expect(res).toBe(\"user:undefined\");\n    res = cacher.getCacheKey(\"user\", {\n      a: 5\n    }, {\n      user: \"bob\"\n    }, [\"#user\"]);\n    expect(res).toBe(\"user:bob\");\n    res = cacher.getCacheKey(\"user\", {\n      a: 5\n    }, {\n      user: \"bob\"\n    }, [\"a\", \"#user\"]);\n    expect(res).toBe(\"user:5|bob\");\n    res = cacher.getCacheKey(\"user\", {\n      a: 5\n    }, {\n      user: \"bob\"\n    }, [\"#user\", \"a\"]);\n    expect(res).toBe(\"user:bob|5\");\n    res = cacher.getCacheKey(\"user\", {\n      a: 5,\n      user: \"adam\"\n    }, {\n      user: \"bob\"\n    }, [\"#user\"]);\n    expect(res).toBe(\"user:bob\");\n    res = cacher.getCacheKey(\"user\", {\n      a: 5\n    }, null, [\"#user\"]);\n    expect(res).toBe(\"user:undefined\");\n    res = cacher.getCacheKey(\"user\", null, {\n      a: {\n        b: {\n          c: \"nested\"\n        }\n      }\n    }, [\"#a.b.c\"]);\n    expect(res).toBe(\"user:nested\");\n  });","file":"unit/cachers/base.spec.js","skipped":false,"dir":"test"},{"name":"check getCacheKey with hashing","suites":["Test BaseCacher"],"updatePoint":{"line":284,"column":36},"line":284,"code":"  it(\"check getCacheKey with hashing\", () => {\n    let broker = new ServiceBroker({\n      logger: false\n    });\n    let cacher = new Cacher();\n    let res;\n    cacher.init(broker);\n    const bigObj = {\n      A: {\n        C0: false,\n        C1: true,\n        C2: true,\n        C3: \"495f761d77d6294f\",\n        C4: true\n      },\n      B: {\n        C0: true,\n        C1: false,\n        C2: true,\n        C3: \"5721c26bfddb7927\",\n        C4: false\n      },\n      C: {\n        C0: \"5d9e85c124d5d09e\",\n        C1: true,\n        C2: 5366,\n        C3: false,\n        C4: false\n      },\n      D: {\n        C0: false,\n        C1: true,\n        C2: \"704473bca1242604\",\n        C3: false,\n        C4: \"6fc56107e69be769\"\n      },\n      E: {\n        C0: true,\n        C1: true,\n        C2: 4881,\n        C3: true,\n        C4: 1418\n      },\n      F: {\n        C0: true,\n        C1: false,\n        C2: false,\n        C3: false,\n        C4: true\n      },\n      G: {\n        C0: false,\n        C1: true,\n        C2: false,\n        C3: 6547,\n        C4: 9565\n      },\n      H: {\n        C0: true,\n        C1: 1848,\n        C2: \"232e6552d0b8aa98\",\n        C3: \"1d50627abe5c0463\",\n        C4: 5251\n      },\n      I: {\n        C0: \"ecd0e4eae08e4f\",\n        C1: \"197bcb312fc17f60\",\n        C2: 4755,\n        C3: true,\n        C4: 9552\n      },\n      J: {\n        C0: false,\n        C1: \"1cc45cadbbf240f\",\n        C2: \"4dbb352b21c3c2f3\",\n        C3: 5065,\n        C4: \"792b19631c78d4f6\"\n      },\n      K: {\n        C0: \"13c23a525adf9e1f\",\n        C1: true,\n        C2: true,\n        C3: \"589d3499abbf6765\",\n        C4: true\n      },\n      L: {\n        C0: false,\n        C1: true,\n        C2: 4350,\n        C3: \"72f6c4f0e9beb03c\",\n        C4: \"434b74b5ff500609\"\n      },\n      M: {\n        C0: 9228,\n        C1: \"5254b36ec238c266\",\n        C2: true,\n        C3: \"27b040089b057684\",\n        C4: true\n      },\n      N: {\n        C0: \"35d3c608ef8aac5e\",\n        C1: \"23fbdbd520d5ae7d\",\n        C2: false,\n        C3: 9061,\n        C4: true\n      },\n      O: {\n        C0: true,\n        C1: true,\n        C2: \"2382f9fe7834e0cc\",\n        C3: true,\n        C4: false\n      },\n      P: {\n        C0: true,\n        C1: false,\n        C2: \"38c0d40b91a9d1f6\",\n        C3: false,\n        C4: 5512\n      },\n      Q: {\n        C0: true,\n        C1: true,\n        C2: true,\n        C3: true,\n        C4: true\n      },\n      R: {\n        C0: \"70bd27c06b067734\",\n        C1: true,\n        C2: \"5213493253b98636\",\n        C3: 8272,\n        C4: 1264\n      },\n      S: {\n        C0: \"61044125008e634c\",\n        C1: 9175,\n        C2: true,\n        C3: \"225e3d912bfbc338\",\n        C4: false\n      },\n      T: {\n        C0: \"38edc77387da030a\",\n        C1: false,\n        C2: \"38d8b9e2525413fc\",\n        C3: true,\n        C4: false\n      },\n      U: {\n        C0: false,\n        C1: \"4b3962c3d26bddd0\",\n        C2: \"1e66b069bad46643\",\n        C3: 3642,\n        C4: 9225\n      },\n      V: {\n        C0: \"1c40e44b54486080\",\n        C1: \"5a560d81078bab02\",\n        C2: \"1c131259e1e9aa61\",\n        C3: true,\n        C4: 9335\n      },\n      W: {\n        C0: false,\n        C1: \"7089b0ad438df2cb\",\n        C2: \"216aec98f513ac08\",\n        C3: true,\n        C4: false\n      },\n      X: {\n        C0: \"3b749354aac19f24\",\n        C1: 9626,\n        C2: true,\n        C3: false,\n        C4: false\n      },\n      Y: {\n        C0: 298,\n        C1: \"224075dadd108ef9\",\n        C2: 3450,\n        C3: 2548,\n        C4: true\n      }\n    };\n    cacher.opts.maxParamsLength = 44;\n    res = cacher.getCacheKey(\"abc.def\", bigObj);\n    expect(res).toBe(\"abc.def:/18CtAt7Z+barI7S7Ef+WTFQ23yVQ4VM8o+riN95sjo=\");\n    cacher.opts.maxParamsLength = 94;\n    res = cacher.getCacheKey(\"abc.def\", bigObj);\n    expect(res).toBe(\"abc.def:A|C0|false|C1|true|C2|true|C3|495f761d77d6294f|C4|/18CtAt7Z+barI7S7Ef+WTFQ23yVQ4VM8o+riN95sjo=\");\n    cacher.opts.maxParamsLength = 485;\n    res = cacher.getCacheKey(\"abc.def\", bigObj);\n    expect(res).toBe(\"abc.def:A|C0|false|C1|true|C2|true|C3|495f761d77d6294f|C4|true|B|C0|true|C1|false|C2|true|C3|5721c26bfddb7927|C4|false|C|C0|5d9e85c124d5d09e|C1|true|C2|5366|C3|false|C4|false|D|C0|false|C1|true|C2|704473bca1242604|C3|false|C4|6fc56107e69be769|E|C0|true|C1|true|C2|4881|C3|true|C4|1418|F|C0|true|C1|false|C2|false|C3|false|C4|true|G|C0|false|C1|true|C2|false|C3|6547|C4|9565|H|C0|true|C1|1848|C2|232e6552d0b8aa98|C3|1d50627abe5c0463|C4|5251|I|C0|ecd0/18CtAt7Z+barI7S7Ef+WTFQ23yVQ4VM8o+riN95sjo=\");\n    cacher.opts.maxParamsLength = null;\n    res = cacher.getCacheKey(\"abc.def\", bigObj);\n    expect(res).toBe(\"abc.def:A|C0|false|C1|true|C2|true|C3|495f761d77d6294f|C4|true|B|C0|true|C1|false|C2|true|C3|5721c26bfddb7927|C4|false|C|C0|5d9e85c124d5d09e|C1|true|C2|5366|C3|false|C4|false|D|C0|false|C1|true|C2|704473bca1242604|C3|false|C4|6fc56107e69be769|E|C0|true|C1|true|C2|4881|C3|true|C4|1418|F|C0|true|C1|false|C2|false|C3|false|C4|true|G|C0|false|C1|true|C2|false|C3|6547|C4|9565|H|C0|true|C1|1848|C2|232e6552d0b8aa98|C3|1d50627abe5c0463|C4|5251|I|C0|ecd0e4eae08e4f|C1|197bcb312fc17f60|C2|4755|C3|true|C4|9552|J|C0|false|C1|1cc45cadbbf240f|C2|4dbb352b21c3c2f3|C3|5065|C4|792b19631c78d4f6|K|C0|13c23a525adf9e1f|C1|true|C2|true|C3|589d3499abbf6765|C4|true|L|C0|false|C1|true|C2|4350|C3|72f6c4f0e9beb03c|C4|434b74b5ff500609|M|C0|9228|C1|5254b36ec238c266|C2|true|C3|27b040089b057684|C4|true|N|C0|35d3c608ef8aac5e|C1|23fbdbd520d5ae7d|C2|false|C3|9061|C4|true|O|C0|true|C1|true|C2|2382f9fe7834e0cc|C3|true|C4|false|P|C0|true|C1|false|C2|38c0d40b91a9d1f6|C3|false|C4|5512|Q|C0|true|C1|true|C2|true|C3|true|C4|true|R|C0|70bd27c06b067734|C1|true|C2|5213493253b98636|C3|8272|C4|1264|S|C0|61044125008e634c|C1|9175|C2|true|C3|225e3d912bfbc338|C4|false|T|C0|38edc77387da030a|C1|false|C2|38d8b9e2525413fc|C3|true|C4|false|U|C0|false|C1|4b3962c3d26bddd0|C2|1e66b069bad46643|C3|3642|C4|9225|V|C0|1c40e44b54486080|C1|5a560d81078bab02|C2|1c131259e1e9aa61|C3|true|C4|9335|W|C0|false|C1|7089b0ad438df2cb|C2|216aec98f513ac08|C3|true|C4|false|X|C0|3b749354aac19f24|C1|9626|C2|true|C3|false|C4|false|Y|C0|298|C1|224075dadd108ef9|C2|3450|C3|2548|C4|true\");\n    cacher.opts.maxParamsLength = 44;\n    res = cacher.getCacheKey(\"users.list\", {\n      token: \"eyJpZCI6Im9SMU1sS1hCdVVjSGlnM3QiLCJ1c2VybmFtZSI6ImljZWJvYiIsImV4cCI6MTUzNDYyMTk1MCwiaWF0IjoxNTI5NDM3OTUwfQ\"\n    }, {}, [\"token\"]);\n    expect(res).toBe(\"users.list:YUgoMlSXRyzkAI98NgGKRqakaZdCSJiITaRJWHyaJlU=\");\n    cacher.opts.maxParamsLength = 44;\n    res = cacher.getCacheKey(\"users.list\", {\n      id: 123,\n      token: \"eyJpZCI6Im9SMU1sS1hCdVVjSGlnM3QiLCJ1c2VybmFtZSI6ImljZWJvYiIsImV4cCI6MTUzNDYyMTk1MCwiaWF0IjoxNTI5NDM3OTUwfQ\"\n    }, {}, [\"id\", \"token\"]);\n    expect(res).toBe(\"users.list:jVksjHDWP+LfXPCxdnQC9Sa10+12yis9AhWmSOwCWfY=\");\n  });","file":"unit/cachers/base.spec.js","skipped":false,"dir":"test"},{"name":"check getCacheKey with custom keygen","suites":["Test BaseCacher"],"updatePoint":{"line":492,"column":42},"line":492,"code":"  it(\"check getCacheKey with custom keygen\", () => {\n    let broker = new ServiceBroker({\n      logger: false\n    });\n    let keygen = jest.fn(() => \"custom\");\n    let actionKeygen = jest.fn(() => \"actionKeygen\");\n    let cacher = new Cacher({\n      keygen\n    });\n    cacher.init(broker);\n    const actionName = \"posts.find.model\";\n    const params = {\n      limit: 5\n    };\n    const meta = {\n      user: \"bob\"\n    };\n    const keys = [\"limit\", \"#user\"];\n    expect(cacher.getCacheKey(actionName, params, meta, keys)).toBe(\"custom\");\n    expect(keygen).toHaveBeenCalledTimes(1);\n    expect(keygen).toHaveBeenCalledWith(actionName, params, meta, keys);\n    expect(cacher.getCacheKey(actionName, params, meta, keys, actionKeygen)).toBe(\"actionKeygen\");\n    expect(actionKeygen).toHaveBeenCalledTimes(1);\n    expect(actionKeygen).toHaveBeenCalledWith(actionName, params, meta, keys);\n  });","file":"unit/cachers/base.spec.js","skipped":false,"dir":"test"},{"name":"should give back the cached data and not called the handler","suites":["Test middleware"],"updatePoint":{"line":539,"column":65},"line":539,"code":"  it(\"should give back the cached data and not called the handler\", () => {\n    let ctx = new Context();\n    ctx.setParams(params);\n    let cachedHandler = cacher.middleware().localAction(mockAction.handler, mockAction);\n    expect(typeof cachedHandler).toBe(\"function\");\n    return cachedHandler(ctx).then(response => {\n      expect(broker.cacher.get).toHaveBeenCalledTimes(1);\n      expect(broker.cacher.get).toHaveBeenCalledWith(\"posts.find:id|3|name|Antsa\");\n      expect(mockAction.handler).toHaveBeenCalledTimes(0);\n      expect(broker.cacher.set).toHaveBeenCalledTimes(0);\n      expect(response).toBe(cachedData);\n    });\n  });","file":"unit/cachers/base.spec.js","skipped":false,"dir":"test"},{"name":"should not give back cached data and should call the handler and call the 'cache.set' action with promise","suites":["Test middleware"],"updatePoint":{"line":552,"column":111},"line":552,"code":"  it(\"should not give back cached data and should call the handler and call the 'cache.set' action with promise\", () => {\n    let resData = [1, 3, 5];\n    let cacheKey = cacher.getCacheKey(mockAction.name, params);\n    broker.cacher.get = jest.fn(() => Promise.resolve(null));\n    mockAction.handler = jest.fn(() => Promise.resolve(resData));\n    let ctx = new Context();\n    ctx.setParams(params);\n    let cachedHandler = cacher.middleware().localAction(mockAction.handler, mockAction);\n    return cachedHandler(ctx).then(response => {\n      expect(response).toBe(resData);\n      expect(mockAction.handler).toHaveBeenCalledTimes(1);\n      expect(broker.cacher.get).toHaveBeenCalledTimes(1);\n      expect(broker.cacher.get).toHaveBeenCalledWith(cacheKey);\n      expect(broker.cacher.set).toHaveBeenCalledTimes(1);\n      expect(broker.cacher.set).toHaveBeenCalledWith(cacheKey, resData, undefined);\n    });\n  });","file":"unit/cachers/base.spec.js","skipped":false,"dir":"test"},{"name":"should call the 'cache.set' action with custom TTL","suites":["Test middleware"],"updatePoint":{"line":569,"column":56},"line":569,"code":"  it(\"should call the 'cache.set' action with custom TTL\", () => {\n    let resData = [1];\n    let cacheKey = cacher.getCacheKey(mockAction.name, params);\n    broker.cacher.set.mockClear();\n    broker.cacher.get = jest.fn(() => Promise.resolve(null));\n    mockAction.handler = jest.fn(() => Promise.resolve(resData));\n    mockAction.cache = {\n      ttl: 8\n    };\n    let ctx = new Context();\n    ctx.setParams(params);\n    let cachedHandler = cacher.middleware().localAction(mockAction.handler, mockAction);\n    return cachedHandler(ctx).then(response => {\n      expect(response).toBe(resData);\n      expect(mockAction.handler).toHaveBeenCalledTimes(1);\n      expect(broker.cacher.get).toHaveBeenCalledTimes(1);\n      expect(broker.cacher.get).toHaveBeenCalledWith(cacheKey);\n      expect(broker.cacher.set).toHaveBeenCalledTimes(1);\n      expect(broker.cacher.set).toHaveBeenCalledWith(cacheKey, resData, 8);\n    });\n  });","file":"unit/cachers/base.spec.js","skipped":false,"dir":"test"},{"name":"should not call cacher.get & set if cache = false","suites":["Test middleware"],"updatePoint":{"line":590,"column":55},"line":590,"code":"  it(\"should not call cacher.get & set if cache = false\", () => {\n    let action = {\n      name: \"posts.get\",\n      cache: false,\n      handler: jest.fn(() => Promise.resolve(cachedData))\n    };\n    cacher.get.mockClear();\n    cacher.set.mockClear();\n    let ctx = new Context();\n    ctx.setParams(params);\n    let cachedHandler = cacher.middleware().localAction(action.handler, action);\n    expect(typeof cachedHandler).toBe(\"function\");\n    return cachedHandler(ctx).then(() => {\n      expect(cachedHandler).toBe(action.handler);\n      expect(broker.cacher.get).toHaveBeenCalledTimes(0);\n      expect(action.handler).toHaveBeenCalledTimes(1);\n      expect(broker.cacher.set).toHaveBeenCalledTimes(0);\n    });\n  });","file":"unit/cachers/base.spec.js","skipped":false,"dir":"test"},{"name":"should not call cacher.get & set if cache = { enabled: false }","suites":["Test middleware"],"updatePoint":{"line":609,"column":68},"line":609,"code":"  it(\"should not call cacher.get & set if cache = { enabled: false }\", () => {\n    let action = {\n      name: \"posts.get\",\n      cache: {\n        enabled: false\n      },\n      handler: jest.fn(() => Promise.resolve(cachedData))\n    };\n    cacher.get.mockClear();\n    cacher.set.mockClear();\n    let ctx = new Context();\n    ctx.setParams(params);\n    let cachedHandler = cacher.middleware().localAction(action.handler, action);\n    expect(typeof cachedHandler).toBe(\"function\");\n    return cachedHandler(ctx).then(() => {\n      expect(cachedHandler).toBe(action.handler);\n      expect(broker.cacher.get).toHaveBeenCalledTimes(0);\n      expect(action.handler).toHaveBeenCalledTimes(1);\n      expect(broker.cacher.set).toHaveBeenCalledTimes(0);\n    });\n  });","file":"unit/cachers/base.spec.js","skipped":false,"dir":"test"},{"name":"should call custom enabled function","suites":["Test middleware"],"updatePoint":{"line":630,"column":41},"line":630,"code":"  it(\"should call custom enabled function\", () => {\n    let action = {\n      name: \"posts.get\",\n      cache: {\n        enabled: ctx => ctx.params.cache !== false\n      },\n      handler: jest.fn(() => Promise.resolve(cachedData))\n    };\n    cacher.get.mockClear();\n    cacher.set.mockClear();\n    let ctx = new Context();\n    ctx.setParams(params);\n    let cachedHandler = cacher.middleware().localAction(action.handler, action);\n    expect(typeof cachedHandler).toBe(\"function\");\n    return cachedHandler(ctx).then(() => {\n      expect(broker.cacher.get).toHaveBeenCalledTimes(1);\n      expect(action.handler).toHaveBeenCalledTimes(1);\n      expect(broker.cacher.set).toHaveBeenCalledTimes(1);\n      ctx.setParams({\n        cache: false\n      });\n      cacher.get.mockClear();\n      cacher.set.mockClear();\n      action.handler.mockClear();\n      return cachedHandler(ctx).then(() => {\n        expect(broker.cacher.get).toHaveBeenCalledTimes(0);\n        expect(action.handler).toHaveBeenCalledTimes(1);\n        expect(broker.cacher.set).toHaveBeenCalledTimes(0);\n      });\n    });\n  });","file":"unit/cachers/base.spec.js","skipped":false,"dir":"test"},{"name":"should not use cache if ctx.meta.$cache === false","suites":["Test middleware"],"updatePoint":{"line":661,"column":55},"line":661,"code":"  it(\"should not use cache if ctx.meta.$cache === false\", () => {\n    let action = {\n      name: \"posts.get\",\n      cache: {\n        enabled: true\n      },\n      handler: jest.fn(() => Promise.resolve(cachedData))\n    };\n    cacher.get.mockClear();\n    cacher.set.mockClear();\n    let ctx = new Context();\n    ctx.setParams(params);\n    let cachedHandler = cacher.middleware().localAction(action.handler, action);\n    expect(typeof cachedHandler).toBe(\"function\");\n    return cachedHandler(ctx).then(() => {\n      expect(broker.cacher.get).toHaveBeenCalledTimes(1);\n      expect(action.handler).toHaveBeenCalledTimes(1);\n      expect(broker.cacher.set).toHaveBeenCalledTimes(1);\n      ctx.meta.$cache = false;\n      cacher.get.mockClear();\n      cacher.set.mockClear();\n      action.handler.mockClear();\n      return cachedHandler(ctx).then(() => {\n        expect(broker.cacher.get).toHaveBeenCalledTimes(0);\n        expect(action.handler).toHaveBeenCalledTimes(1);\n        expect(broker.cacher.set).toHaveBeenCalledTimes(0);\n      });\n    });\n  });","file":"unit/cachers/base.spec.js","skipped":false,"dir":"test"},{"name":"should call the handler if the connection to cacher is lost","suites":["Test middleware"],"updatePoint":{"line":690,"column":65},"line":690,"code":"  it(\"should call the handler if the connection to cacher is lost\", () => {\n    cacher.connected = false; // <- cacher lost connection\n\n    let action = {\n      name: \"posts.get\",\n      cache: {\n        enabled: true\n      },\n      // Return what you receive\n      handler: jest.fn(() => Promise.resolve(params))\n    };\n    let ctx = new Context();\n    ctx.setParams(params);\n    let cachedHandler = cacher.middleware().localAction(action.handler, action);\n    expect(typeof cachedHandler).toBe(\"function\");\n    return cachedHandler(ctx).then(response => {\n      expect(broker.cacher.get).toHaveBeenCalledTimes(0);\n      expect(action.handler).toHaveBeenCalledTimes(1);\n      expect(response).toBe(params);\n    });\n  });","file":"unit/cachers/base.spec.js","skipped":false,"dir":"test"},{"name":"should give back the cached data and not called the handler","suites":["Test middleware with lock enabled"],"updatePoint":{"line":741,"column":65},"line":741,"code":"  it(\"should give back the cached data and not called the handler\", () => {\n    let ctx = new Context();\n    ctx.setParams(params);\n    let cachedHandler = cacher.middleware().localAction(mockAction.handler, mockAction);\n    expect(typeof cachedHandler).toBe(\"function\");\n    let cacheKey = cacher.getCacheKey(mockAction.name, params);\n    return cachedHandler(ctx).then(response => {\n      expect(broker.cacher.get).toHaveBeenCalledTimes(1);\n      expect(broker.cacher.get).toHaveBeenCalledWith(cacheKey);\n      expect(broker.cacher.getWithTTL).toHaveBeenCalledTimes(0);\n      expect(broker.cacher.set).toHaveBeenCalledTimes(0);\n      expect(mockAction.handler).toHaveBeenCalledTimes(0);\n    });\n  });","file":"unit/cachers/base.spec.js","skipped":false,"dir":"test"},{"name":"should not give back cached data and should call the handler and call the 'cache.set' action with promise","suites":["Test middleware with lock enabled"],"updatePoint":{"line":755,"column":111},"line":755,"code":"  it(\"should not give back cached data and should call the handler and call the 'cache.set' action with promise\", () => {\n    let resData = [1, 3, 5];\n    let cacheKey = cacher.getCacheKey(mockAction.name, params);\n    broker.cacher.get = jest.fn(() => Promise.resolve(null));\n    broker.cacher.getWithTTL = jest.fn(() => Promise.resolve({\n      data: null,\n      ttl: null\n    }));\n    const unlockFn = jest.fn(() => Promise.resolve());\n    broker.cacher.lock = jest.fn(() => Promise.resolve(unlockFn));\n    mockAction.handler = jest.fn(() => Promise.resolve(resData));\n    let ctx = new Context();\n    ctx.setParams(params);\n    let cachedHandler = cacher.middleware().localAction(mockAction.handler, mockAction);\n    return cachedHandler(ctx).then(response => {\n      expect(broker.cacher.getWithTTL).toHaveBeenCalledTimes(0); //Check the cache key and ttl\n\n      expect(broker.cacher.get).toHaveBeenCalledTimes(2); // Check the cache after acquired the lock\n\n      expect(broker.cacher.get).toHaveBeenCalledWith(cacheKey);\n      expect(broker.cacher.set).toHaveBeenCalledTimes(1);\n      expect(broker.cacher.set).toHaveBeenCalledWith(cacheKey, resData, 60);\n      expect(response).toBe(resData);\n    });\n  });","file":"unit/cachers/base.spec.js","skipped":false,"dir":"test"},{"name":"should disable cache lock by defalut","suites":["Test middleware with lock enabled"],"updatePoint":{"line":780,"column":42},"line":780,"code":"  it(\"should disable cache lock by defalut\", () => {\n    let mockAction = {\n      name: \"post.get\",\n      cache: {\n        ttl: 30\n      }\n    };\n    broker.cacher.get = jest.fn(() => Promise.resolve(null));\n    broker.cacher.getWithTTL = jest.fn(() => Promise.resolve({\n      data: null,\n      ttl: null\n    }));\n    broker.cacher.lock = jest.fn(() => Promise.resolve());\n    mockAction.handler = jest.fn(() => Promise.resolve());\n    let ctx = new Context();\n    ctx.setParams(params);\n    let cacheKey = cacher.getCacheKey(mockAction.name, params);\n    let cachedHandler = cacher.middleware().localAction(mockAction.handler, mockAction);\n    return cachedHandler(ctx).then(response => {\n      expect(broker.cacher.lock).toHaveBeenCalledTimes(0);\n      expect(broker.cacher.get).toHaveBeenCalledTimes(1);\n      expect(broker.cacher.get).toHaveBeenCalledWith(cacheKey);\n    });\n  });","file":"unit/cachers/base.spec.js","skipped":false,"dir":"test"},{"name":"should not call cacher.lock if cache.lock = false","suites":["Test middleware with lock enabled"],"updatePoint":{"line":804,"column":55},"line":804,"code":"  it(\"should not call cacher.lock if cache.lock = false\", () => {\n    let mockAction = {\n      name: \"post.get\",\n      cache: {\n        ttl: 30,\n        lock: false\n      }\n    };\n    broker.cacher.get = jest.fn(() => Promise.resolve(null));\n    broker.cacher.getWithTTL = jest.fn(() => Promise.resolve({\n      data: null,\n      ttl: null\n    }));\n    const unlockFn = jest.fn(() => Promise.resolve());\n    broker.cacher.lock = jest.fn(() => Promise.resolve(unlockFn));\n    mockAction.handler = jest.fn(() => Promise.resolve());\n    let ctx = new Context();\n    ctx.setParams(params);\n    let cacheKey = cacher.getCacheKey(mockAction.name, params);\n    let cachedHandler = cacher.middleware().localAction(mockAction.handler, mockAction);\n    return cachedHandler(ctx).then(response => {\n      expect(broker.cacher.getWithTTL).toHaveBeenCalledTimes(0);\n      expect(broker.cacher.lock).toHaveBeenCalledTimes(0);\n      expect(broker.cacher.get).toHaveBeenCalledTimes(1);\n      expect(broker.cacher.get).toHaveBeenCalledWith(cacheKey);\n    });\n  });","file":"unit/cachers/base.spec.js","skipped":false,"dir":"test"},{"name":"should not call cacher.lock if cache.lock = { enabled: false }","suites":["Test middleware with lock enabled"],"updatePoint":{"line":831,"column":68},"line":831,"code":"  it(\"should not call cacher.lock if cache.lock = { enabled: false }\", () => {\n    let mockAction = {\n      name: \"post.get\",\n      cache: {\n        ttl: 30,\n        lock: {\n          enabled: false\n        }\n      }\n    };\n    broker.cacher.get = jest.fn(() => Promise.resolve(null));\n    const unlockFn = jest.fn(() => Promise.resolve());\n    broker.cacher.lock = jest.fn(() => Promise.resolve(unlockFn));\n    broker.cacher.getWithTTL = jest.fn(() => Promise.resolve({\n      data: null,\n      ttl: null\n    }));\n    mockAction.handler = jest.fn(() => Promise.resolve());\n    let ctx = new Context();\n    ctx.setParams(params);\n    let cacheKey = cacher.getCacheKey(mockAction.name, params);\n    let cachedHandler = cacher.middleware().localAction(mockAction.handler, mockAction);\n    return cachedHandler(ctx).then(response => {\n      expect(broker.cacher.getWithTTL).toHaveBeenCalledTimes(0);\n      expect(broker.cacher.lock).toHaveBeenCalledTimes(0);\n      expect(broker.cacher.get).toHaveBeenCalledTimes(1);\n      expect(broker.cacher.get).toHaveBeenCalledWith(cacheKey);\n    });\n  });","file":"unit/cachers/base.spec.js","skipped":false,"dir":"test"},{"name":"should call the handler only once when concurrency call a cacher with lock","suites":["Test middleware with lock enabled"],"updatePoint":{"line":860,"column":80},"line":860,"code":"  it(\"should call the handler only once when concurrency call a cacher with lock\", () => {\n    let resData = [6, 6, 6];\n\n    const MemoryCacher = require(\"../../../src/cachers/memory\");\n\n    const cacher = new MemoryCacher();\n    const broker = new ServiceBroker({\n      logger: false,\n      cacher\n    });\n    let mockAction = {\n      name: \"post.get\",\n      cache: {\n        ttl: 30,\n        lock: true\n      }\n    };\n    const get = jest.spyOn(cacher, \"get\");\n    const getWithTTL = jest.spyOn(cacher, \"getWithTTL\");\n    const lock = jest.spyOn(cacher, \"lock\");\n    mockAction.handler = jest.fn(() => {\n      return new Promise(function (resolve, reject) {\n        setTimeout(() => resolve(resData), 1000);\n      });\n    });\n    let ctx = new Context();\n    ctx.setParams(params);\n    let cacheKey = cacher.getCacheKey(mockAction.name, params);\n    let cachedHandler = cacher.middleware().localAction(mockAction.handler, mockAction);\n\n    function call() {\n      let ctx = new Context();\n      ctx.setParams(params);\n      return cachedHandler(ctx);\n    } // Concurrency 3\n\n\n    return Promise.all([call(), call(), call()]).then(responses => {\n      for (let response of responses) {\n        expect(response).toEqual(resData);\n      }\n\n      expect(mockAction.handler).toHaveBeenCalledTimes(1);\n      expect(get).toHaveBeenCalledTimes(6);\n      expect(getWithTTL).toHaveBeenCalledTimes(0);\n      expect(lock).toHaveBeenCalledTimes(3);\n    }).then(() => {\n      return cacher.close();\n    });\n  });","file":"unit/cachers/base.spec.js","skipped":false,"dir":"test"},{"name":"should realse the lock when an error throw","suites":["Test middleware with lock enabled"],"updatePoint":{"line":910,"column":48},"line":910,"code":"  it(\"should realse the lock when an error throw\", () => {\n    const err = new Error(\"wrong\");\n    let mockAction = {\n      name: \"posts.find\",\n      cache: {\n        ttl: 30,\n        lock: true\n      },\n      handler: jest.fn(function (ctx) {\n        return Promise.reject(err);\n      })\n    };\n    broker.cacher.get = jest.fn(() => Promise.resolve(null));\n    broker.cacher.getWithTTL = jest.fn(() => Promise.resolve({\n      data: null,\n      ttl: null\n    }));\n    const unlockFn = jest.fn(() => Promise.resolve());\n    broker.cacher.lock = jest.fn(() => Promise.resolve(unlockFn));\n    let cachedHandler = cacher.middleware().localAction(mockAction.handler, mockAction);\n    return cachedHandler(new Context()).catch(e => {\n      expect(e).toBe(err);\n      expect(unlockFn).toHaveBeenCalledTimes(1);\n    });\n  });","file":"unit/cachers/base.spec.js","skipped":false,"dir":"test"},{"name":"should refresh a stale key of cache","suites":["Test middleware with lock enabled"],"updatePoint":{"line":935,"column":41},"line":935,"code":"  it(\"should refresh a stale key of cache\", () => {\n    let resData = [9, 9, 9];\n    let mockAction = {\n      name: \"post.find\",\n      cache: {\n        ttl: 30,\n        lock: {\n          staleTime: 10\n        }\n      },\n      handler: jest.fn(() => Promise.resolve(resData))\n    };\n    broker.cacher.get = jest.fn(() => Promise.resolve(cachedData));\n    broker.cacher.getWithTTL = jest.fn(() => Promise.resolve({\n      data: cachedData,\n      ttl: 5\n    }));\n    broker.cacher.set = jest.fn(() => Promise.resolve());\n    const unlockFn = jest.fn(() => Promise.resolve());\n    broker.cacher.lock = jest.fn(() => Promise.resolve(unlockFn));\n    broker.cacher.tryLock = jest.fn(() => Promise.resolve(unlockFn));\n    let cachedHandler = cacher.middleware().localAction(mockAction.handler, mockAction);\n    return new Promise(function (resolve, reject) {\n      cachedHandler(new Context()).then(response => {\n        expect(response).toBe(cachedData);\n        expect(broker.cacher.get).toHaveBeenCalledTimes(0);\n        expect(broker.cacher.getWithTTL).toHaveBeenCalledTimes(1);\n        expect(broker.cacher.lock).toHaveBeenCalledTimes(0);\n        expect(broker.cacher.tryLock).toHaveBeenCalledTimes(1);\n        expect(mockAction.handler).toHaveBeenCalledTimes(1);\n        setTimeout(resolve, 1000);\n      });\n    }).then(() => expect(unlockFn).toHaveBeenCalledTimes(1)); //Should finally unlock the lock.\n  });","file":"unit/cachers/base.spec.js","skipped":false,"dir":"test"},{"name":"should not call the handler if the cache is refreshed","suites":["Test middleware with lock enabled"],"updatePoint":{"line":969,"column":59},"line":969,"code":"  it(\"should not call the handler if the cache is refreshed\", () => {\n    let resData = [8, 6, 4];\n    let mockAction = {\n      name: \"post.find\",\n      cache: {\n        ttl: 30,\n        lock: {\n          staleTime: 10\n        }\n      },\n      handler: jest.fn(() => Promise.resolve(resData))\n    };\n    broker.cacher.get = jest.fn(() => Promise.resolve(cachedData));\n    broker.cacher.getWithTTL = jest.fn(() => Promise.resolve({\n      data: cachedData,\n      ttl: 25\n    }));\n    broker.cacher.set = jest.fn(() => Promise.resolve());\n    const unlockFn = jest.fn(() => Promise.resolve());\n    broker.cacher.lock = jest.fn(() => Promise.resolve(unlockFn));\n    broker.cacher.tryLock = jest.fn(() => Promise.resolve(unlockFn));\n    let cachedHandler = cacher.middleware().localAction(mockAction.handler, mockAction);\n    return cachedHandler(new Context()).then(response => {\n      expect(response).toBe(cachedData);\n      expect(broker.cacher.get).toHaveBeenCalledTimes(0);\n      expect(broker.cacher.getWithTTL).toHaveBeenCalledTimes(1);\n      expect(broker.cacher.lock).toHaveBeenCalledTimes(0);\n      expect(broker.cacher.tryLock).toHaveBeenCalledTimes(0);\n      expect(unlockFn).toHaveBeenCalledTimes(0);\n      expect(mockAction.handler).toHaveBeenCalledTimes(0);\n    });\n  });","file":"unit/cachers/base.spec.js","skipped":false,"dir":"test"},{"name":"should realse the lock when refreshing a key and an error throw","suites":["Test middleware with lock enabled"],"updatePoint":{"line":1001,"column":69},"line":1001,"code":"  it(\"should realse the lock when refreshing a key and an error throw\", () => {\n    const err = new Error(\"wrong\");\n    let mockAction = {\n      name: \"posts.find\",\n      cache: {\n        ttl: 30,\n        lock: {\n          staleTime: 10\n        }\n      },\n      handler: jest.fn(ctx => Promise.reject(err))\n    };\n    broker.cacher.get = jest.fn(() => Promise.resolve(cachedData));\n    broker.cacher.del = jest.fn(() => Promise.resolve());\n    broker.cacher.getWithTTL = jest.fn(() => Promise.resolve({\n      data: cachedData,\n      ttl: 5\n    }));\n    broker.cacher.set = jest.fn(() => Promise.resolve());\n    const unlockFn = jest.fn(() => Promise.resolve());\n    broker.cacher.lock = jest.fn(() => Promise.resolve(unlockFn));\n    broker.cacher.tryLock = jest.fn(() => Promise.resolve(unlockFn));\n    let cacheKey = cacher.getCacheKey(mockAction.name, params);\n    let cachedHandler = cacher.middleware().localAction(mockAction.handler, mockAction);\n    const ctx = new Context();\n    ctx.setParams(params);\n    return new Promise(function (resolve, reject) {\n      cachedHandler(ctx).then(response => {\n        expect(response).toBe(cachedData);\n        expect(broker.cacher.get).toHaveBeenCalledTimes(0);\n        expect(broker.cacher.getWithTTL).toHaveBeenCalledTimes(1);\n        expect(broker.cacher.lock).toHaveBeenCalledTimes(0);\n        expect(broker.cacher.tryLock).toHaveBeenCalledTimes(1);\n        expect(mockAction.handler).toHaveBeenCalledTimes(1);\n        setTimeout(resolve, 1000);\n      });\n    }).then(() => {\n      expect(unlockFn).toHaveBeenCalledTimes(1); //Should finally unlock the lock.\n\n      expect(broker.cacher.del).toHaveBeenCalledTimes(1);\n      expect(broker.cacher.del).toHaveBeenCalledWith(cacheKey);\n    });\n  });","file":"unit/cachers/base.spec.js","skipped":false,"dir":"test"},{"name":"should resolve MemoryCacher from true","suites":["Test Cacher resolver with valid instances"],"updatePoint":{"line":12,"column":43},"line":12,"code":"  it(\"should resolve MemoryCacher from true\", () => {\n    cacher = Cachers.resolve(true);\n    expect(cacher).toBeInstanceOf(Cachers.Memory);\n  });","file":"unit/cachers/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve MemoryCacher from string","suites":["Test Cacher resolver with valid instances"],"updatePoint":{"line":16,"column":45},"line":16,"code":"  it(\"should resolve MemoryCacher from string\", () => {\n    cacher = Cachers.resolve(\"memory\");\n    expect(cacher).toBeInstanceOf(Cachers.Memory);\n  });","file":"unit/cachers/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve MemoryLRUCacher from string","suites":["Test Cacher resolver with valid instances"],"updatePoint":{"line":20,"column":48},"line":20,"code":"  it(\"should resolve MemoryLRUCacher from string\", () => {\n    cacher = Cachers.resolve(\"MemoryLRU\");\n    expect(cacher).toBeInstanceOf(Cachers.MemoryLRU);\n  });","file":"unit/cachers/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve RedisCacher from string","suites":["Test Cacher resolver with valid instances"],"updatePoint":{"line":24,"column":44},"line":24,"code":"  it(\"should resolve RedisCacher from string\", () => {\n    cacher = Cachers.resolve(\"Redis\");\n    expect(cacher).toBeInstanceOf(Cachers.Redis);\n  });","file":"unit/cachers/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve MemoryCacher from obj without type","suites":["Test Cacher resolver with valid instances"],"updatePoint":{"line":28,"column":55},"line":28,"code":"  it(\"should resolve MemoryCacher from obj without type\", () => {\n    let options = {\n      ttl: 100\n    };\n    cacher = Cachers.resolve({\n      options\n    });\n    expect(cacher).toBeInstanceOf(Cachers.Memory);\n    expect(cacher.opts).toEqual({\n      keygen: null,\n      maxParamsLength: null,\n      ttl: 100\n    });\n  });","file":"unit/cachers/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve MemoryCacher from obj","suites":["Test Cacher resolver with valid instances"],"updatePoint":{"line":42,"column":42},"line":42,"code":"  it(\"should resolve MemoryCacher from obj\", () => {\n    let options = {\n      ttl: 100\n    };\n    cacher = Cachers.resolve({\n      type: \"Memory\",\n      options\n    });\n    expect(cacher).toBeInstanceOf(Cachers.Memory);\n    expect(cacher.opts).toEqual({\n      keygen: null,\n      maxParamsLength: null,\n      ttl: 100\n    });\n  });","file":"unit/cachers/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve MemoryLRUCacher from obj","suites":["Test Cacher resolver with valid instances"],"updatePoint":{"line":57,"column":45},"line":57,"code":"  it(\"should resolve MemoryLRUCacher from obj\", () => {\n    let options = {\n      ttl: 100,\n      max: 1000\n    };\n    cacher = Cachers.resolve({\n      type: \"MemoryLRU\",\n      options\n    });\n    expect(cacher).toBeInstanceOf(Cachers.MemoryLRU);\n    expect(cacher.opts).toEqual({\n      keygen: null,\n      maxParamsLength: null,\n      ttl: 100,\n      max: 1000\n    });\n  });","file":"unit/cachers/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve RedisCacher from obj with Redis type","suites":["Test Cacher resolver with valid instances"],"updatePoint":{"line":74,"column":57},"line":74,"code":"  it(\"should resolve RedisCacher from obj with Redis type\", () => {\n    let options = {\n      ttl: 100\n    };\n    cacher = Cachers.resolve({\n      type: \"Redis\",\n      options\n    });\n    expect(cacher).toBeInstanceOf(Cachers.Redis);\n    expect(cacher.opts).toEqual({\n      prefix: null,\n      keygen: null,\n      maxParamsLength: null,\n      ttl: 100,\n      pingInterval: null\n    });\n  });","file":"unit/cachers/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve RedisCacher from obj with Redis type","suites":["Test Cacher resolver with valid instances"],"updatePoint":{"line":91,"column":57},"line":91,"code":"  it(\"should resolve RedisCacher from obj with Redis type\", () => {\n    let options = {\n      ttl: 80,\n      redis: {\n        db: 3\n      }\n    };\n    cacher = Cachers.resolve({\n      type: \"redis\",\n      options\n    });\n    expect(cacher).toBeInstanceOf(Cachers.Redis);\n    expect(cacher.opts).toEqual({\n      prefix: null,\n      keygen: null,\n      maxParamsLength: null,\n      ttl: 80,\n      pingInterval: null,\n      redis: {\n        db: 3\n      }\n    });\n  });","file":"unit/cachers/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve RedisCacher from connection string","suites":["Test Cacher resolver with valid instances"],"updatePoint":{"line":114,"column":55},"line":114,"code":"  it(\"should resolve RedisCacher from connection string\", () => {\n    cacher = Cachers.resolve(\"redis://localhost\");\n    expect(cacher).toBeInstanceOf(Cachers.Redis);\n  });","file":"unit/cachers/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve null from undefined","suites":["Test Cacher resolver with invalid instances"],"updatePoint":{"line":120,"column":40},"line":120,"code":"  it(\"should resolve null from undefined\", () => {\n    const cacher = Cachers.resolve();\n    expect(cacher).toBeNull();\n  });","file":"unit/cachers/index.spec.js","skipped":false,"dir":"test"},{"name":"should throw error if type if not correct","suites":["Test Cacher resolver with invalid instances"],"updatePoint":{"line":124,"column":47},"line":124,"code":"  it(\"should throw error if type if not correct\", () => {\n    expect(() => {\n      Cachers.resolve({\n        type: \"xyz\"\n      });\n    }).toThrowError(BrokerOptionsError);\n    expect(() => {\n      Cachers.resolve(\"xyz\");\n    }).toThrowError(BrokerOptionsError);\n  });","file":"unit/cachers/index.spec.js","skipped":false,"dir":"test"},{"name":"should throw error if type if not correct","suites":["Test Cacher register"],"updatePoint":{"line":138,"column":47},"line":138,"code":"  it(\"should throw error if type if not correct\", () => {\n    expect(() => {\n      Cachers.resolve(\"MyCustom\");\n    }).toThrowError(BrokerOptionsError);\n  });","file":"unit/cachers/index.spec.js","skipped":false,"dir":"test"},{"name":"should register new type","suites":["Test Cacher register"],"updatePoint":{"line":143,"column":30},"line":143,"code":"  it(\"should register new type\", () => {\n    Cachers.register(\"MyCustom\", MyCustom);\n    expect(Cachers.MyCustom).toBe(MyCustom);\n  });","file":"unit/cachers/index.spec.js","skipped":false,"dir":"test"},{"name":"should find the new type","suites":["Test Cacher register"],"updatePoint":{"line":147,"column":30},"line":147,"code":"  it(\"should find the new type\", () => {\n    const cacher = Cachers.resolve(\"MyCustom\");\n    expect(cacher).toBeInstanceOf(MyCustom);\n  });","file":"unit/cachers/index.spec.js","skipped":false,"dir":"test"},{"name":"should reject the promise when failed to unlock","suites":["Test lock method"],"updatePoint":{"line":9,"column":53},"line":9,"code":"  it(\"should reject the promise when failed to unlock\", () => {\n    return Promise.all(cachers.map(Cacher => {\n      const cacher = new Cacher({\n        ttl: 30,\n        lock: true\n      });\n      let err = new Error(\"Can not acquire a lock.\");\n      cacher._lock.release = jest.fn(function (key) {\n        return Promise.reject(err);\n      });\n      return cacher.lock(\"key\").then(unlock => {\n        unlock().catch(e => {\n          expect(cacher._lock.release).toHaveBeenCalledTimes(1);\n          expect(e).toBe(err);\n        });\n      }).then(() => {\n        return cacher.close();\n      });\n    }));\n  });","file":"unit/cachers/lock.spec.js","skipped":false,"dir":"test"},{"name":"should lock the concurrency call","suites":["Test lock method"],"updatePoint":{"line":29,"column":38},"line":29,"code":"  it(\"should lock the concurrency call\", () => {\n    return Promise.all(cachers.map(Cacher => {\n      const cacher = new Cacher({\n        ttl: 30,\n        lock: true\n      });\n      const broker = new ServiceBroker({\n        logger: false,\n        cacher\n      });\n      const lock = jest.spyOn(cacher, \"lock\");\n      const key1 = \"abcd1234\";\n      let taskes = [1, 2, 3, 4];\n      let globalValue = 0;\n      return Promise.all(taskes.map(task => {\n        return cacher.lock(key1).then(unlock => {\n          globalValue = task;\n          return new Promise((resolve, reject) => {\n            setTimeout(() => {\n              expect(globalValue).toEqual(task);\n              unlock().then(() => {\n                resolve();\n              });\n            }, Math.random() * 500);\n          });\n        }).then(() => {\n          return cacher.close();\n        });\n      })).then(() => {\n        expect(lock).toHaveBeenCalledTimes(4);\n      });\n    }));\n  });","file":"unit/cachers/lock.spec.js","skipped":false,"dir":"test"},{"name":"should able to lock","suites":["Test tryLock method"],"updatePoint":{"line":65,"column":25},"line":65,"code":"  it(\"should able to lock\", () => {\n    return Promise.all(cachers.map(Cacher => {\n      const cacher = new Cacher({\n        ttl: 30,\n        lock: true\n      });\n      const broker = new ServiceBroker({\n        logger: false,\n        cacher\n      });\n      const key = \"123fff\";\n      const tryLock = jest.spyOn(cacher, \"tryLock\");\n      return cacher.tryLock(key).then(unlock => {\n        expect(cacher._lock.isLocked(key)).toBeTruthy();\n        return unlock();\n      }).then(() => {\n        return cacher.close();\n      });\n    }));\n  });","file":"unit/cachers/lock.spec.js","skipped":false,"dir":"test"},{"name":"should throw an error when already locked.","suites":["Test tryLock method"],"updatePoint":{"line":85,"column":48},"line":85,"code":"  it(\"should throw an error when already locked.\", () => {\n    return Promise.all(cachers.map(Cacher => {\n      const cacher = new Cacher({\n        ttl: 30,\n        lock: true\n      });\n      const broker = new ServiceBroker({\n        logger: false,\n        cacher\n      });\n      const key = \"123fff\";\n      const tryLock = jest.spyOn(cacher, \"tryLock\");\n      return cacher.tryLock(key).then(() => {\n        return cacher.tryLock(key).catch(e => {\n          expect(e.message).toEqual(\"Locked.\");\n        });\n      }).then(() => {\n        return cacher.close();\n      });\n    }));\n  });","file":"unit/cachers/lock.spec.js","skipped":false,"dir":"test"},{"name":"should reject the promise when failed to unlock","suites":["Test tryLock method"],"updatePoint":{"line":106,"column":53},"line":106,"code":"  it(\"should reject the promise when failed to unlock\", () => {\n    return Promise.all(cachers.map(Cacher => {\n      const cacher = new Cacher({\n        ttl: 30,\n        lock: true\n      });\n      let err = new Error(\"Can not acquire a lock.\");\n      let unlockFn;\n      cacher._lock.release = jest.fn(() => Promise.reject(err));\n      cacher._lock.isLocked = jest.fn(key => false);\n      return cacher.tryLock(\"key\").then(unlock => {\n        unlock().catch(e => {\n          expect(cacher._lock.release).toHaveBeenCalledTimes(1);\n          expect(e).toBe(err);\n        });\n      }).then(() => {\n        return cacher.close();\n      });\n    }));\n  });","file":"unit/cachers/lock.spec.js","skipped":false,"dir":"test"},{"name":"should create an empty options","suites":["Test MemoryLRUCacher constructor"],"updatePoint":{"line":8,"column":36},"line":8,"code":"  it(\"should create an empty options\", () => {\n    const cacher = new MemoryLRUCacher();\n    expect(cacher).toBeDefined();\n    expect(cacher.opts).toBeDefined();\n    expect(cacher.opts.ttl).toBeNull();\n    expect(cacher.connected).toBe(null);\n  });","file":"unit/cachers/memory-lru.spec.js","skipped":false,"dir":"test"},{"name":"should create a timer if set ttl option","suites":["Test MemoryLRUCacher constructor"],"updatePoint":{"line":15,"column":45},"line":15,"code":"  it(\"should create a timer if set ttl option\", () => {\n    const opts = {\n      ttl: 500\n    };\n    const cacher = new MemoryLRUCacher(opts);\n    expect(cacher).toBeDefined();\n    expect(cacher.opts).toEqual(opts);\n    expect(cacher.opts.ttl).toBe(500);\n    expect(cacher.cache).toBeDefined();\n    expect(cacher.timer).toBeDefined();\n  });","file":"unit/cachers/memory-lru.spec.js","skipped":false,"dir":"test"},{"name":"check init","suites":["Test MemoryLRUCacher init"],"updatePoint":{"line":28,"column":16},"line":28,"code":"  it(\"check init\", () => {\n    const broker = new ServiceBroker({\n      logger: false\n    });\n    broker.localBus.on = jest.fn();\n    const cacher = new MemoryLRUCacher();\n    expect(cacher.connected).toBe(null);\n    cacher.init(broker);\n    expect(cacher.connected).toBe(true);\n    expect(broker.localBus.on).toHaveBeenCalledTimes(1);\n    expect(broker.localBus.on).toHaveBeenCalledWith(\"$transporter.connected\", expect.any(Function));\n  });","file":"unit/cachers/memory-lru.spec.js","skipped":false,"dir":"test"},{"name":"should call cache clean after transporter connected","suites":["Test MemoryLRUCacher init"],"updatePoint":{"line":40,"column":57},"line":40,"code":"  it(\"should call cache clean after transporter connected\", () => {\n    const broker = new ServiceBroker({\n      logger: false\n    });\n    const cacher = new MemoryLRUCacher();\n    cacher.clean = jest.fn();\n    cacher.init(broker);\n    broker.localBus.emit(\"$transporter.connected\");\n    expect(cacher.clean).toHaveBeenCalledTimes(1);\n  });","file":"unit/cachers/memory-lru.spec.js","skipped":false,"dir":"test"},{"name":"should save the data with key","suites":["Test MemoryLRUCacher set & get"],"updatePoint":{"line":66,"column":35},"line":66,"code":"  it(\"should save the data with key\", () => {\n    cacher.set(key, data1);\n    expect(cacher.cache.get(key)).toBe(data1);\n  });","file":"unit/cachers/memory-lru.spec.js","skipped":false,"dir":"test"},{"name":"should give back the data by key","suites":["Test MemoryLRUCacher set & get"],"updatePoint":{"line":70,"column":38},"line":70,"code":"  it(\"should give back the data by key\", () => {\n    return cacher.get(key).then(obj => {\n      expect(obj).toBeDefined();\n      expect(obj).toEqual(data1);\n    });\n  });","file":"unit/cachers/memory-lru.spec.js","skipped":false,"dir":"test"},{"name":"should give null if key not exist","suites":["Test MemoryLRUCacher set & get"],"updatePoint":{"line":76,"column":39},"line":76,"code":"  it(\"should give null if key not exist\", () => {\n    return cacher.get(\"123123\").then(obj => {\n      expect(obj).toBeNull();\n    });\n  });","file":"unit/cachers/memory-lru.spec.js","skipped":false,"dir":"test"},{"name":"should give back the data by key","suites":["Test MemoryLRUCacher set & get with default cloning enabled"],"updatePoint":{"line":103,"column":38},"line":103,"code":"  it(\"should give back the data by key\", async () => {\n    let cached_response = await cacher.set(key, data1); // Cloned object. References different object\n\n    expect(cached_response).not.toBe(data1);\n    expect(cached_response).toEqual(data1);\n    let obj = await cacher.get(key);\n    expect(obj).toBeDefined(); // Cloned object. References different object\n\n    expect(obj).not.toBe(data1);\n    expect(obj).toEqual(data1);\n    let obj2 = await cacher.get(key);\n    expect(obj2).toBeDefined(); // Cloned object. References different objects\n\n    expect(obj2).not.toBe(obj);\n    expect(obj).not.toBe(data1);\n    expect(obj2).toEqual(data1);\n  });","file":"unit/cachers/memory-lru.spec.js","skipped":false,"dir":"test"},{"name":"should give back the data by key","suites":["Test MemoryLRUCacher set & get with default cloning disabled"],"updatePoint":{"line":142,"column":38},"line":142,"code":"  it(\"should give back the data by key\", async () => {\n    let cached_response = await cacher.set(key, data1); // Not a clone. References the same entry\n\n    expect(cached_response).toBe(data1);\n    expect(cached_response).toEqual(data1);\n    let obj = await cacher.get(key);\n    expect(obj).toBeDefined(); // Not a clone. References the same entry\n\n    expect(obj).toBe(data1);\n    expect(obj).toEqual(data1);\n    let obj2 = await cacher.get(key);\n    expect(obj2).toBeDefined(); // Not a clone. Reference the same entry\n\n    expect(obj2).toBe(obj);\n    expect(obj).toBe(data1);\n    expect(obj2).toEqual(data1);\n  });","file":"unit/cachers/memory-lru.spec.js","skipped":false,"dir":"test"},{"name":"should give back the data by key","suites":["Test MemoryLRUCacher set & get with custom cloning"],"updatePoint":{"line":182,"column":38},"line":182,"code":"  it(\"should give back the data by key\", async () => {\n    await cacher.set(key, data1);\n    let obj = await cacher.get(key);\n    expect(obj).toBeDefined();\n    expect(obj).not.toBe(data1);\n    expect(obj).toEqual(data1); // 1 with set + 1 with  get\n\n    expect(clone).toHaveBeenCalledTimes(2);\n    expect(clone).toHaveBeenCalledWith(data1);\n  });","file":"unit/cachers/memory-lru.spec.js","skipped":false,"dir":"test"},{"name":"should save the data with key","suites":["Test MemoryLRUCacher delete"],"updatePoint":{"line":208,"column":35},"line":208,"code":"  it(\"should save the data with key\", () => {\n    return cacher.set(key, data1);\n  });","file":"unit/cachers/memory-lru.spec.js","skipped":false,"dir":"test"},{"name":"should delete the key","suites":["Test MemoryLRUCacher delete"],"updatePoint":{"line":211,"column":27},"line":211,"code":"  it(\"should delete the key\", () => {\n    expect(cacher.cache.get(key)).toBeDefined();\n    cacher.del(key);\n    expect(cacher.cache.get(key)).toBeUndefined();\n  });","file":"unit/cachers/memory-lru.spec.js","skipped":false,"dir":"test"},{"name":"should give null","suites":["Test MemoryLRUCacher delete"],"updatePoint":{"line":216,"column":22},"line":216,"code":"  it(\"should give null\", () => {\n    return cacher.get(key).then(obj => {\n      expect(obj).toBeNull();\n    });\n  });","file":"unit/cachers/memory-lru.spec.js","skipped":false,"dir":"test"},{"name":"should delete multiple keys","suites":["Test MemoryLRUCacher delete"],"updatePoint":{"line":221,"column":33},"line":221,"code":"  it(\"should delete multiple keys\", () => {\n    cacher.set(\"key1\", \"value1\");\n    cacher.set(\"key2\", \"value2\");\n    cacher.set(\"key3\", \"value3\");\n    cacher.del([\"key1\", \"key3\"]);\n    expect(cacher.cache.get(\"key1\")).toBeUndefined();\n    expect(cacher.cache.get(\"key2\")).toEqual(\"value2\");\n    expect(cacher.cache.get(\"key3\")).toBeUndefined();\n  });","file":"unit/cachers/memory-lru.spec.js","skipped":false,"dir":"test"},{"name":"should save the data with key","suites":["Test MemoryLRUCacher clean"],"updatePoint":{"line":248,"column":35},"line":248,"code":"  it(\"should save the data with key\", () => {\n    cacher.set(key1, data1);\n    cacher.set(key2, data2);\n  });","file":"unit/cachers/memory-lru.spec.js","skipped":false,"dir":"test"},{"name":"should give item in cache for keys","suites":["Test MemoryLRUCacher clean"],"updatePoint":{"line":252,"column":40},"line":252,"code":"  it(\"should give item in cache for keys\", () => {\n    expect(cacher.cache.get(key1)).toBeDefined();\n    expect(cacher.cache.get(key2)).toBeDefined();\n  });","file":"unit/cachers/memory-lru.spec.js","skipped":false,"dir":"test"},{"name":"should clean test* keys","suites":["Test MemoryLRUCacher clean"],"updatePoint":{"line":256,"column":29},"line":256,"code":"  it(\"should clean test* keys\", () => {\n    cacher.clean(\"tst*\");\n  });","file":"unit/cachers/memory-lru.spec.js","skipped":false,"dir":"test"},{"name":"should give null for key1","suites":["Test MemoryLRUCacher clean"],"updatePoint":{"line":259,"column":31},"line":259,"code":"  it(\"should give null for key1\", () => {\n    return cacher.get(key1).then(obj => {\n      expect(obj).toBeNull();\n    });\n  });","file":"unit/cachers/memory-lru.spec.js","skipped":false,"dir":"test"},{"name":"should give back data 2 for key2","suites":["Test MemoryLRUCacher clean"],"updatePoint":{"line":264,"column":38},"line":264,"code":"  it(\"should give back data 2 for key2\", () => {\n    return cacher.get(key2).then(obj => {\n      expect(obj).toEqual(data2);\n    });\n  });","file":"unit/cachers/memory-lru.spec.js","skipped":false,"dir":"test"},{"name":"should clean all keys","suites":["Test MemoryLRUCacher clean"],"updatePoint":{"line":269,"column":27},"line":269,"code":"  it(\"should clean all keys\", () => {\n    cacher.clean();\n    expect(Object.keys(cacher.cache).length).toBe(0);\n  });","file":"unit/cachers/memory-lru.spec.js","skipped":false,"dir":"test"},{"name":"should give null for key2 too","suites":["Test MemoryLRUCacher clean"],"updatePoint":{"line":273,"column":35},"line":273,"code":"  it(\"should give null for key2 too\", () => {\n    return cacher.get(key1).then(obj => {\n      expect(obj).toBeNull();\n    });\n  });","file":"unit/cachers/memory-lru.spec.js","skipped":false,"dir":"test"},{"name":"should clean by multiple patterns","suites":["Test MemoryLRUCacher clean"],"updatePoint":{"line":278,"column":39},"line":278,"code":"  it(\"should clean by multiple patterns\", () => {\n    cacher.set(\"key.1\", \"value1\");\n    cacher.set(\"key.2\", \"value2\");\n    cacher.set(\"key.3\", \"value3\");\n    cacher.set(\"other.1\", \"value1\");\n    cacher.set(\"other.2\", \"value2\");\n    cacher.set(\"other.3\", \"value3\");\n    cacher.clean([\"key.*\", \"*.2\"]);\n    expect(cacher.cache.get(\"key.1\")).toBeUndefined();\n    expect(cacher.cache.get(\"key.2\")).toBeUndefined();\n    expect(cacher.cache.get(\"key.3\")).toBeUndefined();\n    expect(cacher.cache.get(\"other.1\")).toBeDefined();\n    expect(cacher.cache.get(\"other.2\")).toBeUndefined();\n    expect(cacher.cache.get(\"other.3\")).toBeDefined();\n  });","file":"unit/cachers/memory-lru.spec.js","skipped":false,"dir":"test"},{"name":"should save the data with key","suites":["Test MemoryLRUCacher expired method"],"updatePoint":{"line":316,"column":35},"line":316,"code":"  it(\"should save the data with key\", () => {\n    cacher.set(key1, data1);\n    clock.tick(35 * 1000);\n    cacher.set(key2, data2);\n  });","file":"unit/cachers/memory-lru.spec.js","skipped":false,"dir":"test"},{"name":"should give null for key1","suites":["Test MemoryLRUCacher expired method"],"updatePoint":{"line":321,"column":31},"line":321,"code":"  it(\"should give null for key1\", () => {\n    clock.tick(30 * 1000);\n    return cacher.get(key1).then(obj => {\n      expect(obj).toBeNull();\n    });\n  });","file":"unit/cachers/memory-lru.spec.js","skipped":false,"dir":"test"},{"name":"should give back data 2 for key2","suites":["Test MemoryLRUCacher expired method"],"updatePoint":{"line":327,"column":38},"line":327,"code":"  it(\"should give back data 2 for key2\", () => {\n    return cacher.get(key2).then(obj => {\n      expect(obj).toEqual(data2);\n    });\n  });","file":"unit/cachers/memory-lru.spec.js","skipped":false,"dir":"test"},{"name":"should give back data 2 for key2","suites":["Test MemoryLRUCacher expired method"],"updatePoint":{"line":332,"column":38},"line":332,"code":"  it(\"should give back data 2 for key2\", () => {\n    clock.tick(65 * 1000);\n    return cacher.get(key2).then(obj => {\n      expect(obj).toBeNull();\n    });\n  });","file":"unit/cachers/memory-lru.spec.js","skipped":false,"dir":"test"},{"name":"should return data and ttl","suites":["Test MemoryCacher getWithTTL method"],"updatePoint":{"line":352,"column":32},"line":352,"code":"  it(\"should return data and ttl\", () => {\n    return cacher.set(key1, \"hello\").then(() => {\n      return cacher.getWithTTL(key1).then(res => {\n        expect(res.data).toEqual(\"hello\");\n        expect(res.ttl).toBeDefined();\n      });\n    });\n  });","file":"unit/cachers/memory-lru.spec.js","skipped":false,"dir":"test"},{"name":"should return data and ttl","suites":["Test MemoryCacher getCacheKeys method"],"updatePoint":{"line":370,"column":32},"line":370,"code":"  it(\"should return data and ttl\", () => {\n    return Promise.all([cacher.set(\"hello\", \"test\"), cacher.set(\"hello2\", \"test\"), cacher.set(\"hello3:test\", \"test\")]).then(() => {\n      return cacher.getCacheKeys();\n    }).then(res => {\n      expect(res).toEqual(expect.arrayContaining([{\n        key: \"hello3:test\"\n      }, {\n        key: \"hello2\"\n      }, {\n        key: \"hello\"\n      }]));\n    });\n  });","file":"unit/cachers/memory-lru.spec.js","skipped":false,"dir":"test"},{"name":"should create an empty options","suites":["Test MemoryCacher constructor"],"updatePoint":{"line":10,"column":36},"line":10,"code":"  it(\"should create an empty options\", () => {\n    cacher = new MemoryCacher();\n    expect(cacher).toBeDefined();\n    expect(cacher.opts).toBeDefined();\n    expect(cacher.opts.ttl).toBeNull();\n    expect(cacher.connected).toBe(null);\n  });","file":"unit/cachers/memory.spec.js","skipped":false,"dir":"test"},{"name":"should create a timer if set ttl option","suites":["Test MemoryCacher constructor"],"updatePoint":{"line":17,"column":45},"line":17,"code":"  it(\"should create a timer if set ttl option\", () => {\n    const opts = {\n      ttl: 500\n    };\n    cacher = new MemoryCacher(opts);\n    expect(cacher).toBeDefined();\n    expect(cacher.opts).toEqual(opts);\n    expect(cacher.opts.ttl).toBe(500);\n    expect(cacher.timer).toBeDefined();\n  });","file":"unit/cachers/memory.spec.js","skipped":false,"dir":"test"},{"name":"check init","suites":["Test MemoryCacher init"],"updatePoint":{"line":36,"column":16},"line":36,"code":"  it(\"check init\", () => {\n    broker = new ServiceBroker({\n      logger: false\n    });\n    broker.localBus.on = jest.fn();\n    cacher = new MemoryCacher();\n    expect(cacher.connected).toBe(null);\n    cacher.init(broker);\n    expect(cacher.connected).toBe(true);\n    expect(broker.localBus.on).toHaveBeenCalledTimes(1);\n    expect(broker.localBus.on).toHaveBeenCalledWith(\"$transporter.connected\", expect.any(Function));\n  });","file":"unit/cachers/memory.spec.js","skipped":false,"dir":"test"},{"name":"should call cache clean after transporter connected","suites":["Test MemoryCacher init"],"updatePoint":{"line":48,"column":57},"line":48,"code":"  it(\"should call cache clean after transporter connected\", () => {\n    broker = new ServiceBroker({\n      logger: false\n    });\n    cacher = new MemoryCacher();\n    cacher.clean = jest.fn();\n    cacher.init(broker);\n    broker.localBus.emit(\"$transporter.connected\");\n    expect(cacher.clean).toHaveBeenCalledTimes(1);\n  });","file":"unit/cachers/memory.spec.js","skipped":false,"dir":"test"},{"name":"should save the data with key","suites":["Test MemoryCacher set & get"],"updatePoint":{"line":78,"column":35},"line":78,"code":"  it(\"should save the data with key\", () => {\n    cacher.set(key, data1);\n    expect(cacher.cache.get(key)).toBeDefined();\n    expect(cacher.cache.get(key).data).toBe(data1);\n    expect(cacher.cache.get(key).expire).toBeNull();\n  });","file":"unit/cachers/memory.spec.js","skipped":false,"dir":"test"},{"name":"should give back the data by key","suites":["Test MemoryCacher set & get"],"updatePoint":{"line":84,"column":38},"line":84,"code":"  it(\"should give back the data by key\", () => {\n    return cacher.get(key).then(obj => {\n      expect(obj).toBeDefined();\n      expect(obj).toEqual(data1);\n    });\n  });","file":"unit/cachers/memory.spec.js","skipped":false,"dir":"test"},{"name":"should give null if key not exist","suites":["Test MemoryCacher set & get"],"updatePoint":{"line":90,"column":39},"line":90,"code":"  it(\"should give null if key not exist\", () => {\n    return cacher.get(\"123123\").then(obj => {\n      expect(obj).toBeNull();\n    });\n  });","file":"unit/cachers/memory.spec.js","skipped":false,"dir":"test"},{"name":"should save the data with key and a TTL value","suites":["Test MemoryCacher get() with expire"],"updatePoint":{"line":125,"column":51},"line":125,"code":"  it(\"should save the data with key and a TTL value\", () => {\n    // setting expire date -> will be called by cacher.set()\n    dateNowSpy.mockImplementationOnce(() => currentTime);\n    cacher.set(key, data1, ttlValue);\n    const entry = cacher.cache.get(key);\n    expect(entry).toBeDefined();\n    expect(entry.data).toBe(data1);\n    expect(entry.expire).toBe(currentTime + ttlValue * 1000);\n  });","file":"unit/cachers/memory.spec.js","skipped":false,"dir":"test"},{"name":"should give back the data after 14 secs","suites":["Test MemoryCacher get() with expire"],"updatePoint":{"line":134,"column":45},"line":134,"code":"  it(\"should give back the data after 14 secs\", () => {\n    // date.now() in cacher.get() will advance by 14 secs\n    dateNowSpy.mockImplementationOnce(() => currentTime + 14 * 1000);\n    return cacher.get(key).then(obj => {\n      expect(obj).toBeDefined();\n      expect(obj).toEqual(data1);\n    });\n  });","file":"unit/cachers/memory.spec.js","skipped":false,"dir":"test"},{"name":"should remove the entry after 15 secs","suites":["Test MemoryCacher get() with expire"],"updatePoint":{"line":142,"column":43},"line":142,"code":"  it(\"should remove the entry after 15 secs\", () => {\n    // date.now() in cacher.get() will advance by 16 secs\n    dateNowSpy.mockImplementationOnce(() => currentTime + 16 * 1000);\n    return cacher.get(key).then(obj => {\n      expect(obj).toBeNull();\n    });\n  });","file":"unit/cachers/memory.spec.js","skipped":false,"dir":"test"},{"name":"should give back the data by key","suites":["Test MemoryCacher set & get with default cloning enabled"],"updatePoint":{"line":171,"column":38},"line":171,"code":"  it(\"should give back the data by key\", async () => {\n    let cached_response = await cacher.set(key, data1); // Cloned object. References different object\n\n    expect(cached_response).not.toBe(data1);\n    expect(cached_response).toEqual(data1);\n    let obj = await cacher.get(key);\n    expect(obj).toBeDefined(); // Cloned object. References different object\n\n    expect(obj).not.toBe(data1);\n    expect(obj).toEqual(data1);\n    let obj2 = await cacher.get(key);\n    expect(obj2).toBeDefined(); // Cloned object. References different objects\n\n    expect(obj2).not.toBe(obj);\n    expect(obj).not.toBe(data1);\n    expect(obj2).toEqual(data1);\n  });","file":"unit/cachers/memory.spec.js","skipped":false,"dir":"test"},{"name":"should give back the data by key","suites":["Test MemoryCacher set & get with default cloning disabled"],"updatePoint":{"line":210,"column":38},"line":210,"code":"  it(\"should give back the data by key\", async () => {\n    let cached_response = await cacher.set(key, data1); // Not a clone. References the same entry\n\n    expect(cached_response).toBe(data1);\n    expect(cached_response).toEqual(data1);\n    let obj = await cacher.get(key);\n    expect(obj).toBeDefined(); // Not a clone. References the same entry\n\n    expect(obj).toBe(data1);\n    expect(obj).toEqual(data1);\n    let obj2 = await cacher.get(key);\n    expect(obj2).toBeDefined(); // Not a clone. Reference the same entry\n\n    expect(obj2).toBe(obj);\n    expect(obj).toBe(data1);\n    expect(obj2).toEqual(data1);\n  });","file":"unit/cachers/memory.spec.js","skipped":false,"dir":"test"},{"name":"should give back the data by key","suites":["Test MemoryCacher set & get with custom cloning"],"updatePoint":{"line":250,"column":38},"line":250,"code":"  it(\"should give back the data by key\", async () => {\n    await cacher.set(key, data1);\n    let obj = await cacher.get(key);\n    expect(obj).toBeDefined();\n    expect(obj).not.toBe(data1);\n    expect(obj).toEqual(data1); // 1 with set + 1 with  get\n\n    expect(clone).toHaveBeenCalledTimes(2);\n    expect(clone).toHaveBeenCalledWith(data1);\n  });","file":"unit/cachers/memory.spec.js","skipped":false,"dir":"test"},{"name":"should save the data with key","suites":["Test MemoryCacher delete"],"updatePoint":{"line":280,"column":35},"line":280,"code":"  it(\"should save the data with key\", () => {\n    return cacher.set(key, data1);\n  });","file":"unit/cachers/memory.spec.js","skipped":false,"dir":"test"},{"name":"should delete the key","suites":["Test MemoryCacher delete"],"updatePoint":{"line":283,"column":27},"line":283,"code":"  it(\"should delete the key\", () => {\n    expect(cacher.cache.get(key)).toBeDefined();\n    cacher.del(key);\n    expect(cacher.cache.get(key)).toBeUndefined();\n  });","file":"unit/cachers/memory.spec.js","skipped":false,"dir":"test"},{"name":"should give null","suites":["Test MemoryCacher delete"],"updatePoint":{"line":288,"column":22},"line":288,"code":"  it(\"should give null\", () => {\n    return cacher.get(key).then(obj => {\n      expect(obj).toBeNull();\n    });\n  });","file":"unit/cachers/memory.spec.js","skipped":false,"dir":"test"},{"name":"should delete multiple keys","suites":["Test MemoryCacher delete"],"updatePoint":{"line":293,"column":33},"line":293,"code":"  it(\"should delete multiple keys\", () => {\n    cacher.set(\"key1\", \"value1\");\n    cacher.set(\"key2\", \"value2\");\n    cacher.set(\"key3\", \"value3\");\n    cacher.del([\"key1\", \"key3\"]);\n    expect(cacher.cache.get(\"key1\")).toBeUndefined();\n    expect(cacher.cache.get(\"key2\")).toEqual({\n      data: \"value2\",\n      expire: null\n    });\n    expect(cacher.cache.get(\"key3\")).toBeUndefined();\n  });","file":"unit/cachers/memory.spec.js","skipped":false,"dir":"test"},{"name":"should save the data with key","suites":["Test MemoryCacher clean"],"updatePoint":{"line":327,"column":35},"line":327,"code":"  it(\"should save the data with key\", () => {\n    cacher.set(key1, data1);\n    cacher.set(key2, data2);\n  });","file":"unit/cachers/memory.spec.js","skipped":false,"dir":"test"},{"name":"should give item in cache for keys","suites":["Test MemoryCacher clean"],"updatePoint":{"line":331,"column":40},"line":331,"code":"  it(\"should give item in cache for keys\", () => {\n    expect(cacher.cache.get(key1)).toBeDefined();\n    expect(cacher.cache.get(key2)).toBeDefined();\n  });","file":"unit/cachers/memory.spec.js","skipped":false,"dir":"test"},{"name":"should clean test* keys","suites":["Test MemoryCacher clean"],"updatePoint":{"line":335,"column":29},"line":335,"code":"  it(\"should clean test* keys\", () => {\n    cacher.clean(\"tst*\");\n  });","file":"unit/cachers/memory.spec.js","skipped":false,"dir":"test"},{"name":"should give null for key1","suites":["Test MemoryCacher clean"],"updatePoint":{"line":338,"column":31},"line":338,"code":"  it(\"should give null for key1\", () => {\n    return cacher.get(key1).then(obj => {\n      expect(obj).toBeNull();\n    });\n  });","file":"unit/cachers/memory.spec.js","skipped":false,"dir":"test"},{"name":"should give back data 2 for key2","suites":["Test MemoryCacher clean"],"updatePoint":{"line":343,"column":38},"line":343,"code":"  it(\"should give back data 2 for key2\", () => {\n    return cacher.get(key2).then(obj => {\n      expect(obj).toEqual(data2);\n    });\n  });","file":"unit/cachers/memory.spec.js","skipped":false,"dir":"test"},{"name":"should clean all keys","suites":["Test MemoryCacher clean"],"updatePoint":{"line":348,"column":27},"line":348,"code":"  it(\"should clean all keys\", () => {\n    cacher.clean();\n    expect(Object.keys(cacher.cache).length).toBe(0);\n  });","file":"unit/cachers/memory.spec.js","skipped":false,"dir":"test"},{"name":"should give null for key2 too","suites":["Test MemoryCacher clean"],"updatePoint":{"line":352,"column":35},"line":352,"code":"  it(\"should give null for key2 too\", () => {\n    return cacher.get(key1).then(obj => {\n      expect(obj).toBeNull();\n    });\n  });","file":"unit/cachers/memory.spec.js","skipped":false,"dir":"test"},{"name":"should clean by multiple patterns","suites":["Test MemoryCacher clean"],"updatePoint":{"line":357,"column":39},"line":357,"code":"  it(\"should clean by multiple patterns\", () => {\n    cacher.set(\"key.1\", \"value1\");\n    cacher.set(\"key.2\", \"value2\");\n    cacher.set(\"key.3\", \"value3\");\n    cacher.set(\"other.1\", \"value1\");\n    cacher.set(\"other.2\", \"value2\");\n    cacher.set(\"other.3\", \"value3\");\n    cacher.clean([\"key.*\", \"*.2\"]);\n    expect(cacher.cache.get(\"key.1\")).toBeUndefined();\n    expect(cacher.cache.get(\"key.2\")).toBeUndefined();\n    expect(cacher.cache.get(\"key.3\")).toBeUndefined();\n    expect(cacher.cache.get(\"other.1\")).toBeDefined();\n    expect(cacher.cache.get(\"other.2\")).toBeUndefined();\n    expect(cacher.cache.get(\"other.3\")).toBeDefined();\n  });","file":"unit/cachers/memory.spec.js","skipped":false,"dir":"test"},{"name":"should save the data with key","suites":["Test MemoryCacher expired method"],"updatePoint":{"line":397,"column":35},"line":397,"code":"  it(\"should save the data with key\", () => {\n    cacher.set(key1, data1);\n    cacher.set(key2, data2);\n  });","file":"unit/cachers/memory.spec.js","skipped":false,"dir":"test"},{"name":"should set expire to item","suites":["Test MemoryCacher expired method"],"updatePoint":{"line":401,"column":31},"line":401,"code":"  it(\"should set expire to item\", () => {\n    expect(cacher.cache.get(key1).expire).toBeDefined();\n    expect(cacher.cache.get(key1).expire).toBeGreaterThan(Date.now());\n    cacher.cache.get(key1).expire = Date.now() - 10 * 1000; // Hack the expire time\n\n    cacher.checkTTL();\n  });","file":"unit/cachers/memory.spec.js","skipped":false,"dir":"test"},{"name":"should give null for key1","suites":["Test MemoryCacher expired method"],"updatePoint":{"line":408,"column":31},"line":408,"code":"  it(\"should give null for key1\", () => {\n    return cacher.get(key1).then(obj => {\n      expect(obj).toBeNull();\n    });\n  });","file":"unit/cachers/memory.spec.js","skipped":false,"dir":"test"},{"name":"should give back data 2 for key2","suites":["Test MemoryCacher expired method"],"updatePoint":{"line":413,"column":38},"line":413,"code":"  it(\"should give back data 2 for key2\", () => {\n    return cacher.get(key2).then(obj => {\n      expect(obj).toEqual(data2);\n    });\n  });","file":"unit/cachers/memory.spec.js","skipped":false,"dir":"test"},{"name":"should return data and ttl","suites":["Test MemoryCacher getWithTTL method"],"updatePoint":{"line":436,"column":32},"line":436,"code":"  it(\"should return data and ttl\", () => {\n    return cacher.set(key1, \"hello\", 30).then(() => {\n      return cacher.getWithTTL(key1).then(res => {\n        expect(res.data).toEqual(\"hello\");\n        expect(res.ttl).toBeLessThanOrEqual(30);\n      });\n    });\n  });","file":"unit/cachers/memory.spec.js","skipped":false,"dir":"test"},{"name":"should return data and ttl","suites":["Test MemoryCacher getCacheKeys method"],"updatePoint":{"line":454,"column":32},"line":454,"code":"  it(\"should return data and ttl\", () => {\n    return Promise.all([cacher.set(\"hello\", \"test\"), cacher.set(\"hello2\", \"test\"), cacher.set(\"hello3:test\", \"test\")]).then(() => {\n      return cacher.getCacheKeys();\n    }).then(res => {\n      expect(res).toEqual([{\n        key: \"hello\",\n        expiresAt: expect.any(Number)\n      }, {\n        key: \"hello2\",\n        expiresAt: expect.any(Number)\n      }, {\n        key: \"hello3:test\",\n        expiresAt: expect.any(Number)\n      }]);\n    });\n  });","file":"unit/cachers/memory.spec.js","skipped":false,"dir":"test"},{"name":"should create an empty options","suites":["Test RedisCacher constructor"],"updatePoint":{"line":35,"column":36},"line":35,"code":"  it(\"should create an empty options\", () => {\n    let cacher = new RedisCacher();\n    expect(cacher).toBeDefined();\n    expect(cacher.opts).toBeDefined();\n    expect(cacher.opts.ttl).toBeNull();\n    expect(cacher.opts.maxParamsLength).toBeNull();\n    expect(cacher.connected).toBe(null);\n  });","file":"unit/cachers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should create a timer if set ttl option","suites":["Test RedisCacher constructor"],"updatePoint":{"line":43,"column":45},"line":43,"code":"  it(\"should create a timer if set ttl option\", () => {\n    let opts = {\n      ttl: 500,\n      maxParamsLength: 1024,\n      prefix: \"custom-\"\n    };\n    let cacher = new RedisCacher(opts);\n    expect(cacher).toBeDefined();\n    expect(cacher.opts).toEqual(opts);\n    expect(cacher.opts.ttl).toBe(500);\n    expect(cacher.opts.prefix).toBe(\"custom-\");\n    expect(cacher.opts.maxParamsLength).toBe(1024);\n  });","file":"unit/cachers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should add option for pingInterval","suites":["Test RedisCacher constructor"],"updatePoint":{"line":56,"column":40},"line":56,"code":"  it(\"should add option for pingInterval\", () => {\n    let opts = {\n      pingInterval: 5000\n    };\n    let cacher = new RedisCacher(opts);\n    expect(cacher).toBeDefined();\n    expect(cacher.opts).toEqual(opts);\n    expect(cacher.opts.pingInterval).toBe(5000);\n  });","file":"unit/cachers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should create with redis opts from string","suites":["Test RedisCacher constructor"],"updatePoint":{"line":65,"column":47},"line":65,"code":"  it(\"should create with redis opts from string\", () => {\n    let opts = \"redis://localhost:6379\";\n    let cacher = new RedisCacher(opts);\n    expect(cacher).toBeDefined();\n    expect(cacher.opts).toEqual({\n      keygen: null,\n      ttl: null,\n      prefix: null,\n      pingInterval: null,\n      maxParamsLength: null,\n      redis: opts\n    });\n  });","file":"unit/cachers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should create Redis client with default options","suites":["Test RedisCacher init"],"updatePoint":{"line":83,"column":53},"line":83,"code":"  it(\"should create Redis client with default options\", () => {\n    const cacher = new RedisCacher();\n    Redis.mockClear();\n    cacher.init(broker); // expect(cacher.client).toBeInstanceOf(Redis);\n\n    expect(cacher.serializer).toBeInstanceOf(Serializers.JSON);\n    expect(Redis).toHaveBeenCalledTimes(1);\n    expect(Redis).toHaveBeenCalledWith(undefined);\n  });","file":"unit/cachers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should create Redis client with default options","suites":["Test RedisCacher init"],"updatePoint":{"line":92,"column":53},"line":92,"code":"  it(\"should create Redis client with default options\", () => {\n    const opts = {\n      redis: {\n        host: \"1.2.3.4\"\n      }\n    };\n    const cacher = new RedisCacher(opts);\n    jest.spyOn(Serializers.JSON.prototype, \"init\");\n    Redis.mockClear();\n    cacher.init(broker); // expect(cacher.client).toBeInstanceOf(Redis);\n\n    expect(cacher.serializer).toBeInstanceOf(Serializers.JSON);\n    expect(Redis).toHaveBeenCalledTimes(1);\n    expect(Redis).toHaveBeenCalledWith(opts.redis);\n    expect(Serializers.JSON.prototype.init).toHaveBeenCalledTimes(1);\n    expect(Serializers.JSON.prototype.init).toHaveBeenCalledWith(broker);\n  });","file":"unit/cachers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should broadcast client error","suites":["Test RedisCacher init"],"updatePoint":{"line":109,"column":35},"line":109,"code":"  it(\"should broadcast client error\", () => {\n    broker.broadcastLocal = jest.fn();\n    const cacher = new RedisCacher();\n    Redis.mockClear();\n    cacher.init(broker);\n    cacher.client.onCallbacks.error(new Error(\"Ups!\"));\n    expect(broker.broadcastLocal).toHaveBeenCalledTimes(1);\n    expect(broker.broadcastLocal).toHaveBeenCalledWith(\"$cacher.error\", {\n      error: new Error(\"Ups!\"),\n      module: \"cacher\",\n      type: C.CLIENT_ERROR\n    });\n  });","file":"unit/cachers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should create with redis opts","suites":["Test RedisCacher cluster"],"updatePoint":{"line":124,"column":35},"line":124,"code":"  it(\"should create with redis opts\", () => {\n    let opts = {\n      type: \"Redis\",\n      ttl: 30,\n      cluster: {\n        nodes: [{\n          host: \"localhost\",\n          port: 6379\n        }]\n      }\n    };\n    let cacher = new RedisCacher(opts);\n    expect(cacher).toBeDefined();\n    expect(cacher.opts).toEqual(opts);\n  });","file":"unit/cachers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should init redis cluster","suites":["Test RedisCacher cluster"],"updatePoint":{"line":139,"column":31},"line":139,"code":"  it(\"should init redis cluster\", () => {\n    let broker = new ServiceBroker({\n      logger: false\n    });\n    let opts = {\n      type: \"Redis\",\n      ttl: 30,\n      cluster: {\n        nodes: [{\n          host: \"localhost\",\n          port: 6379\n        }]\n      }\n    };\n    let cacher = new RedisCacher(opts);\n    expect(cacher).toBeDefined();\n    expect(cacher.opts).toEqual(opts);\n    cacher.init(broker);\n    expect(cacher.client).toBeInstanceOf(Redis.Cluster);\n  });","file":"unit/cachers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should fail to init redis cluster without nodes","suites":["Test RedisCacher cluster"],"updatePoint":{"line":159,"column":53},"line":159,"code":"  it(\"should fail to init redis cluster without nodes\", () => {\n    let broker = new ServiceBroker({\n      logger: false\n    });\n    let opts = {\n      type: \"Redis\",\n      ttl: 30,\n      cluster: {\n        nodes: []\n      }\n    };\n    let cacher = new RedisCacher(opts);\n    expect(cacher).toBeDefined();\n    expect(cacher.opts).toEqual(opts);\n    expect(() => {\n      cacher.init(broker);\n    }).toThrowError(\"No nodes defined for cluster\");\n  });","file":"unit/cachers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should construct serializer based on options","suites":["Test RedisCacher cluster"],"updatePoint":{"line":177,"column":50},"line":177,"code":"  it(\"should construct serializer based on options\", () => {\n    let broker = new ServiceBroker({\n      logger: false\n    });\n    let opts = {\n      type: \"Redis\",\n      serializer: \"Notepack\"\n    };\n    let cacher = new RedisCacher(opts);\n    expect(cacher).toBeDefined();\n    cacher.init(broker);\n    expect(cacher.serializer).toBeInstanceOf(Serializers.Notepack);\n  });","file":"unit/cachers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should ping based on numeric interval","suites":["Test RedisCacher cluster"],"updatePoint":{"line":190,"column":43},"line":190,"code":"  it(\"should ping based on numeric interval\", () => {\n    jest.useFakeTimers();\n    let broker = new ServiceBroker({\n      logger: false\n    });\n    let opts = {\n      type: \"Redis\",\n      pingInterval: 25\n    };\n    let cacher = new RedisCacher(opts);\n    expect(cacher).toBeDefined();\n    cacher.init(broker);\n    cacher.client.ping = jest.fn().mockResolvedValue(undefined);\n    jest.advanceTimersByTime(25);\n    expect(cacher.client.ping).toHaveBeenCalledTimes(1);\n    jest.advanceTimersByTime(25);\n    expect(cacher.client.ping).toHaveBeenCalledTimes(2);\n    jest.advanceTimersByTime(25);\n    expect(cacher.client.ping).toHaveBeenCalledTimes(3);\n    jest.clearAllTimers();\n    jest.useRealTimers();\n  });","file":"unit/cachers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should ping based on numeric string interval","suites":["Test RedisCacher cluster"],"updatePoint":{"line":212,"column":50},"line":212,"code":"  it(\"should ping based on numeric string interval\", () => {\n    jest.useFakeTimers();\n    let broker = new ServiceBroker({\n      logger: false\n    });\n    let opts = {\n      type: \"Redis\",\n      pingInterval: \"25\"\n    };\n    let cacher = new RedisCacher(opts);\n    expect(cacher).toBeDefined();\n    cacher.init(broker);\n    cacher.client.ping = jest.fn().mockResolvedValue(undefined);\n    jest.advanceTimersByTime(25);\n    expect(cacher.client.ping).toHaveBeenCalledTimes(1);\n    jest.advanceTimersByTime(25);\n    expect(cacher.client.ping).toHaveBeenCalledTimes(2);\n    jest.advanceTimersByTime(25);\n    expect(cacher.client.ping).toHaveBeenCalledTimes(3);\n    jest.clearAllTimers();\n    jest.useRealTimers();\n  });","file":"unit/cachers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should not ping with malformed pingInterval","suites":["Test RedisCacher cluster"],"updatePoint":{"line":234,"column":49},"line":234,"code":"  it(\"should not ping with malformed pingInterval\", () => {\n    jest.useFakeTimers();\n    let broker = new ServiceBroker({\n      logger: false\n    });\n    let opts = {\n      type: \"Redis\",\n      pingInterval: \"foo\"\n    };\n    let cacher = new RedisCacher(opts);\n    expect(cacher).toBeDefined();\n    cacher.init(broker);\n    cacher.client.ping = jest.fn().mockResolvedValue(undefined);\n    jest.advanceTimersByTime(25);\n    expect(cacher.client.ping).toHaveBeenCalledTimes(0);\n    jest.advanceTimersByTime(25);\n    expect(cacher.client.ping).toHaveBeenCalledTimes(0);\n    jest.advanceTimersByTime(25);\n    expect(cacher.client.ping).toHaveBeenCalledTimes(0);\n    jest.clearAllTimers();\n    jest.useRealTimers();\n  });","file":"unit/cachers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should call client.set with key & data","suites":["Test RedisCacher set & get without prefix"],"updatePoint":{"line":293,"column":44},"line":293,"code":"  it(\"should call client.set with key & data\", () => {\n    cacher.set(key, data1);\n    expect(cacher.client.set).toHaveBeenCalledTimes(1);\n    expect(cacher.client.set).toHaveBeenCalledWith(prefix + key, cacher.serializer.serialize(data1));\n    expect(cacher.client.setex).toHaveBeenCalledTimes(0);\n  });","file":"unit/cachers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should call client.getBuffer with key & return with data1","suites":["Test RedisCacher set & get without prefix"],"updatePoint":{"line":299,"column":63},"line":299,"code":"  it(\"should call client.getBuffer with key & return with data1\", () => {\n    let p = cacher.get(key);\n    expect(cacher.client.getBuffer).toHaveBeenCalledTimes(1);\n    expect(cacher.client.getBuffer).toHaveBeenCalledWith(prefix + key);\n    return p.catch(protectReject).then(d => {\n      expect(d).toEqual(data1);\n    });\n  });","file":"unit/cachers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should give null if response cannot be deserialized","suites":["Test RedisCacher set & get without prefix"],"updatePoint":{"line":307,"column":57},"line":307,"code":"  it(\"should give null if response cannot be deserialized\", () => {\n    cacher.client.getBuffer = jest.fn(() => Promise.resolve(\"{ 'asd' 5}\")); // Invalid JSON\n\n    let p = cacher.get(key);\n    expect(cacher.client.getBuffer).toHaveBeenCalledTimes(1);\n    expect(cacher.client.getBuffer).toHaveBeenCalledWith(prefix + key);\n    return p.catch(protectReject).then(d => {\n      expect(d).toBeNull();\n    });\n  });","file":"unit/cachers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should call client.del with key","suites":["Test RedisCacher set & get without prefix"],"updatePoint":{"line":317,"column":37},"line":317,"code":"  it(\"should call client.del with key\", () => {\n    cacher.del(key);\n    expect(cacher.client.del).toHaveBeenCalledTimes(1);\n    expect(cacher.client.del).toHaveBeenCalledWith([prefix + key]);\n  });","file":"unit/cachers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should delete an array of keys","suites":["Test RedisCacher set & get without prefix"],"updatePoint":{"line":322,"column":36},"line":322,"code":"  it(\"should delete an array of keys\", () => {\n    cacher.del([\"key1\", \"key2\"]);\n    expect(cacher.client.del).toHaveBeenCalledTimes(1);\n    expect(cacher.client.del).toHaveBeenCalledWith([prefix + \"key1\", prefix + \"key2\"]);\n  });","file":"unit/cachers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should call client.scanStream & del","suites":["Test RedisCacher set & get without prefix"],"updatePoint":{"line":327,"column":41},"line":327,"code":"  it(\"should call client.scanStream & del\", () => {\n    return cacher.clean().catch(protectReject).then(() => {\n      expect(cacher.client.scanStream).toHaveBeenCalledTimes(1);\n      expect(cacher.client.scanStream).toHaveBeenCalledWith({\n        match: \"MOL-*\",\n        count: 100\n      });\n      expect(cacher.client.del).toHaveBeenCalledTimes(1);\n      expect(cacher.client.del).toHaveBeenCalledWith([\"key1\", \"key2\"]);\n    });\n  });","file":"unit/cachers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should not call del if data returns an empty array","suites":["Test RedisCacher set & get without prefix"],"updatePoint":{"line":338,"column":56},"line":338,"code":"  it(\"should not call del if data returns an empty array\", () => {\n    dataEvent.mockImplementationOnce((eventType, callback) => {\n      if (eventType === \"data\") {\n        callback([]);\n      }\n\n      if (eventType === \"end\") {\n        callback();\n      }\n    });\n    return cacher.clean().catch(protectReject).then(() => {\n      expect(cacher.client.scanStream).toHaveBeenCalledTimes(1);\n      expect(cacher.client.scanStream).toHaveBeenCalledWith({\n        match: \"MOL-*\",\n        count: 100\n      });\n      expect(cacher.client.del).not.toBeCalled();\n    });\n  });","file":"unit/cachers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should call client.setex with key & data","suites":["Test RedisCacher set & get with namespace & ttl"],"updatePoint":{"line":402,"column":46},"line":402,"code":"  it(\"should call client.setex with key & data\", () => {\n    cacher.set(key, data1);\n    expect(cacher.client.setex).toHaveBeenCalledTimes(1);\n    expect(cacher.client.setex).toHaveBeenCalledWith(prefix + key, 60, cacher.serializer.serialize(data1));\n  });","file":"unit/cachers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should give back the data by key","suites":["Test RedisCacher set & get with namespace & ttl"],"updatePoint":{"line":407,"column":38},"line":407,"code":"  it(\"should give back the data by key\", () => {\n    cacher.get(key);\n    expect(cacher.client.getBuffer).toHaveBeenCalledTimes(1);\n    expect(cacher.client.getBuffer).toHaveBeenCalledWith(prefix + key);\n  });","file":"unit/cachers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should call client.del with key","suites":["Test RedisCacher set & get with namespace & ttl"],"updatePoint":{"line":412,"column":37},"line":412,"code":"  it(\"should call client.del with key\", () => {\n    return cacher.del(key).catch(protectReject).then(() => {\n      expect(cacher.client.del).toHaveBeenCalledTimes(1);\n      expect(cacher.client.del).toHaveBeenCalledWith([prefix + key]);\n    });\n  });","file":"unit/cachers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should call client.del with multiple keys","suites":["Test RedisCacher set & get with namespace & ttl"],"updatePoint":{"line":418,"column":47},"line":418,"code":"  it(\"should call client.del with multiple keys\", () => {\n    return cacher.del([\"key1\", \"key2\"]).catch(protectReject).then(() => {\n      expect(cacher.client.del).toHaveBeenCalledTimes(1);\n      expect(cacher.client.del).toHaveBeenCalledWith([prefix + \"key1\", prefix + \"key2\"]);\n    });\n  });","file":"unit/cachers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should throw error","suites":["Test RedisCacher set & get with namespace & ttl"],"updatePoint":{"line":424,"column":24},"line":424,"code":"  it(\"should throw error\", () => {\n    const error = new Error(\"Redis delete error\");\n    cacher.client.del = jest.fn(() => Promise.reject(error));\n    return cacher.del([\"key1\"]).then(protectReject).catch(err => {\n      expect(err).toBe(error);\n      expect(cacher.client.del).toHaveBeenCalledTimes(1);\n      expect(cacher.client.del).toHaveBeenCalledWith([prefix + \"key1\"]);\n      expect(cacher.logger.error).toHaveBeenCalledTimes(1);\n      expect(cacher.logger.error).toHaveBeenCalledWith(\"Redis 'del' error. Key: MOL-uat-key1\", error);\n    });\n  });","file":"unit/cachers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should call client.scanStream","suites":["Test RedisCacher set & get with namespace & ttl"],"updatePoint":{"line":435,"column":35},"line":435,"code":"  it(\"should call client.scanStream\", () => {\n    return cacher.clean().catch(protectReject).then(() => {\n      expect(cacher.client.scanStream).toHaveBeenCalledTimes(1);\n      expect(cacher.client.scanStream).toHaveBeenCalledWith({\n        match: \"MOL-uat-*\",\n        count: 100\n      });\n    });\n  });","file":"unit/cachers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should call client.scanStream with service key","suites":["Test RedisCacher set & get with namespace & ttl"],"updatePoint":{"line":444,"column":52},"line":444,"code":"  it(\"should call client.scanStream with service key\", () => {\n    return cacher.clean(\"service-name.*\").catch(protectReject).then(() => {\n      expect(cacher.client.scanStream).toHaveBeenCalledTimes(1);\n      expect(cacher.client.scanStream).toHaveBeenCalledWith({\n        match: \"MOL-uat-service-name.*\",\n        count: 100\n      });\n    });\n  });","file":"unit/cachers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should call client.scanStream if provided as array service key in array","suites":["Test RedisCacher set & get with namespace & ttl"],"updatePoint":{"line":453,"column":77},"line":453,"code":"  it(\"should call client.scanStream if provided as array service key in array\", () => {\n    return cacher.clean([\"service-name.*\"]).catch(protectReject).then(() => {\n      expect(cacher.client.scanStream).toHaveBeenCalledTimes(1);\n      expect(cacher.client.scanStream).toHaveBeenCalledWith({\n        match: \"MOL-uat-service-name.*\",\n        count: 100\n      });\n    });\n  });","file":"unit/cachers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should call client.scanStream for each array element","suites":["Test RedisCacher set & get with namespace & ttl"],"updatePoint":{"line":462,"column":58},"line":462,"code":"  it(\"should call client.scanStream for each array element\", () => {\n    return cacher.clean([\"service-name.*\", \"service2-name.*\"]).catch(protectReject).then(() => {\n      expect(cacher.client.scanStream).toHaveBeenCalledTimes(2);\n      expect(cacher.client.scanStream).toHaveBeenCalledWith({\n        match: \"MOL-uat-service-name.*\",\n        count: 100\n      });\n      expect(cacher.client.scanStream).toHaveBeenCalledWith({\n        match: \"MOL-uat-service2-name.*\",\n        count: 100\n      });\n    });\n  });","file":"unit/cachers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should not call second pattern if failed on first","suites":["Test RedisCacher set & get with namespace & ttl"],"updatePoint":{"line":475,"column":55},"line":475,"code":"  it(\"should not call second pattern if failed on first\", () => {\n    const error = new Error(\"Redis delete error\");\n    cacher.client.del = jest.fn().mockRejectedValueOnce(error);\n    return cacher.clean([\"service-name.*\", \"service2-name.*\"]).then(protectReject).catch(err => {\n      expect(err).toBe(error);\n      expect(cacher.client.scanStream).toHaveBeenCalledTimes(1);\n      expect(cacher.client.scanStream).toHaveBeenCalledWith({\n        count: 100,\n        match: \"MOL-uat-service-name.*\"\n      });\n      expect(cacher.logger.error).toHaveBeenCalledTimes(1);\n      expect(cacher.logger.error).toHaveBeenCalledWith(\"Redis 'scanDel' error. Pattern: MOL-uat-service-name.*\", error);\n    });\n  });","file":"unit/cachers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should call the getBuffer and ttl using pipeline","suites":["Test RedisCacher getWithTTL method"],"updatePoint":{"line":511,"column":54},"line":511,"code":"  it(\"should call the getBuffer and ttl using pipeline\", () => {\n    return cacher.getWithTTL(key).then(res => {\n      expect(res.data).toEqual(cachedData);\n      expect(res.ttl).toBe(20);\n      expect(mockPipeline.getBuffer).toHaveBeenCalledTimes(1);\n      expect(mockPipeline.ttl).toHaveBeenCalledTimes(1);\n      expect(mockPipeline.exec).toHaveBeenCalledTimes(1);\n    });\n  });","file":"unit/cachers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should throw an error when getBuffer method return error","suites":["Test RedisCacher getWithTTL method"],"updatePoint":{"line":520,"column":62},"line":520,"code":"  it(\"should throw an error when getBuffer method return error\", () => {\n    const err = new Error(\"getBuffer error.\");\n    mockPipeline.exec = jest.fn(() => Promise.resolve([[err, null], [null, 20]]));\n    return cacher.getWithTTL(key).catch(e => {\n      expect(e).toBe(err);\n    });\n  });","file":"unit/cachers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should throw an error when ttl method return error","suites":["Test RedisCacher getWithTTL method"],"updatePoint":{"line":527,"column":56},"line":527,"code":"  it(\"should throw an error when ttl method return error\", () => {\n    const err = new Error(\"ttl error.\");\n    mockPipeline.exec = jest.fn(() => Promise.resolve([[null, cachedData], [err, null]]));\n    return cacher.getWithTTL(key).catch(e => {\n      expect(e).toBe(err);\n    });\n  });","file":"unit/cachers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should return null if data cannot be deserialized","suites":["Test RedisCacher getWithTTL method"],"updatePoint":{"line":534,"column":55},"line":534,"code":"  it(\"should return null if data cannot be deserialized\", () => {\n    mockPipeline.exec = jest.fn(() => Promise.resolve([[null, \"{'some invalid JSON here.\"], [null, 20]]));\n    return cacher.getWithTTL(key).then(res => {\n      expect(res.data).toBeNull();\n    });\n  });","file":"unit/cachers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should call redlock.lock when calling cacher.lock","suites":["Test RedisCacher lock method"],"updatePoint":{"line":567,"column":55},"line":567,"code":"  it(\"should call redlock.lock when calling cacher.lock\", () => {\n    return cacher.lock(key, 20).then(() => {\n      expect(cacher.redlock.lock).toHaveBeenCalledTimes(1);\n      expect(cacher.redlock.lock).toHaveBeenCalledWith(cacher.prefix + key + \"-lock\", 20);\n    });\n  });","file":"unit/cachers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should call redlock.unlock when calling unlock callback","suites":["Test RedisCacher lock method"],"updatePoint":{"line":573,"column":61},"line":573,"code":"  it(\"should call redlock.unlock when calling unlock callback\", () => {\n    return cacher.lock(key, 20).then(unlock => {\n      return unlock().then(() => {\n        expect(unlock1).toBeCalled();\n      });\n    });\n  });","file":"unit/cachers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should call redlock.lock when calling cacher.tryLock","suites":["Test RedisCacher lock method"],"updatePoint":{"line":580,"column":58},"line":580,"code":"  it(\"should call redlock.lock when calling cacher.tryLock\", () => {\n    return cacher.tryLock(key, 20).then(() => {\n      expect(cacher.redlockNonBlocking.lock).toHaveBeenCalledTimes(1);\n      expect(cacher.redlockNonBlocking.lock).toHaveBeenCalledWith(cacher.prefix + key + \"-lock\", 20);\n    });\n  });","file":"unit/cachers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should call redlock.unlock when calling unlock callback","suites":["Test RedisCacher lock method"],"updatePoint":{"line":586,"column":61},"line":586,"code":"  it(\"should call redlock.unlock when calling unlock callback\", () => {\n    const err = new Error(\"Already locked.\");\n    cacher.redlockNonBlocking.lock = jest.fn(() => {\n      return Promise.reject(err);\n    });\n    return cacher.tryLock(key, 20).catch(e => {\n      expect(e).toBe(err);\n    });\n  });","file":"unit/cachers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should failed to acquire a lock when redlock client throw an error","suites":["Test RedisCacher lock method"],"updatePoint":{"line":595,"column":72},"line":595,"code":"  it(\"should failed to acquire a lock when redlock client throw an error\", () => {\n    return cacher.tryLock(key, 20);\n  });","file":"unit/cachers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should create redlock clients","suites":["Test RedisCacher with opts.lock"],"updatePoint":{"line":600,"column":35},"line":600,"code":"  it(\"should create redlock clients\", () => {\n    let broker = new ServiceBroker({\n      logger: false\n    });\n    let cacher = new RedisCacher({\n      ttl: 30\n    });\n    cacher.init(broker);\n    expect(cacher.redlock).toBeDefined();\n    expect(cacher.redlockNonBlocking).toBeDefined();\n  });","file":"unit/cachers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should call client.quit","suites":["Test RedisCacher close"],"updatePoint":{"line":613,"column":29},"line":613,"code":"  it(\"should call client.quit\", () => {\n    let broker = new ServiceBroker({\n      logger: false\n    });\n    let cacher = new RedisCacher();\n    cacher.init(broker); // for empty logger\n\n    cacher.close();\n  });","file":"unit/cachers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should clear interval","suites":["Test RedisCacher close"],"updatePoint":{"line":622,"column":27},"line":622,"code":"  it(\"should clear interval\", () => {\n    jest.useFakeTimers();\n    let broker = new ServiceBroker({\n      logger: false\n    });\n    let opts = {\n      type: \"Redis\",\n      pingInterval: 25\n    };\n    let cacher = new RedisCacher(opts);\n    cacher.init(broker); // for empty logger\n\n    cacher.client.ping = jest.fn().mockResolvedValue(undefined);\n    expect(jest.getTimerCount()).toBe(1);\n    cacher.close();\n    expect(jest.getTimerCount()).toBe(0);\n    jest.clearAllTimers();\n    jest.useRealTimers();\n  });","file":"unit/cachers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should return data and ttl","suites":["Test MemoryCacher getCacheKeys method"],"updatePoint":{"line":664,"column":32},"line":664,"code":"  it(\"should return data and ttl\", () => {\n    return cacher.getCacheKeys().then(res => {\n      expect(res).toEqual([{\n        key: \"hello\"\n      }, {\n        key: \"hello2\"\n      }, {\n        key: \"hello3:test\"\n      }]);\n    });\n  });","file":"unit/cachers/redis.spec.js","skipped":false,"dir":"test"},{"name":"test with empty opts","suites":["Test Context"],"updatePoint":{"line":19,"column":26},"line":19,"code":"  it(\"test with empty opts\", () => {\n    let broker = new ServiceBroker({\n      nodeID: \"server-123\",\n      logger: false\n    });\n    let ctx = new Context(broker);\n    expect(ctx.id).toBeDefined();\n    expect(ctx.broker).toBeDefined();\n    expect(ctx.endpoint).toBeNull();\n    expect(ctx.action).toBeNull();\n    expect(ctx.event).toBeNull();\n    expect(ctx.service).toBeNull();\n    expect(ctx.nodeID).toBe(\"server-123\");\n    expect(ctx.eventName).toBeNull();\n    expect(ctx.eventType).toBeNull();\n    expect(ctx.eventGroups).toBeNull();\n    expect(ctx.options).toEqual({\n      timeout: null,\n      retries: null\n    });\n    expect(ctx.parentID).toBeNull();\n    expect(ctx.caller).toBeNull();\n    expect(ctx.level).toBe(1);\n    expect(ctx.params).toBeNull();\n    expect(ctx.meta).toEqual({});\n    expect(ctx.locals).toEqual({});\n    expect(ctx.requestID).toBe(ctx.id);\n    expect(ctx.tracing).toBeNull();\n    expect(ctx.span).toBeNull();\n    expect(ctx.needAck).toBeNull();\n    expect(ctx.ackID).toBeNull();\n    expect(ctx.cachedResult).toBe(false);\n  });","file":"unit/context.spec.js","skipped":false,"dir":"test"},{"name":"test with constructor params","suites":["Test Context"],"updatePoint":{"line":52,"column":34},"line":52,"code":"  it(\"test with constructor params\", () => {\n    let broker = new ServiceBroker({\n      nodeID: \"server-123\",\n      logger: false\n    });\n    let ctx = new Context(broker);\n    expect(ctx.broker).toBe(broker);\n    expect(ctx.endpoint).toBeNull();\n    expect(ctx.action).toBeNull();\n    expect(ctx.event).toBeNull();\n    expect(ctx.service).toBeNull();\n    expect(ctx.nodeID).toBe(\"server-123\");\n  });","file":"unit/context.spec.js","skipped":false,"dir":"test"},{"name":"test without opts","suites":["Test Context.create"],"updatePoint":{"line":80,"column":23},"line":80,"code":"  it(\"test without opts\", () => {\n    const params = {\n      a: 5\n    };\n    let ctx = Context.create(broker, endpoint, params);\n    expect(ctx.id).toBeDefined();\n    expect(ctx.broker).toBe(broker);\n    expect(ctx.endpoint).toBe(endpoint);\n    expect(ctx.action).toBe(endpoint.action);\n    expect(ctx.service).toBe(endpoint.action.service);\n    expect(ctx.event).toBeNull();\n    expect(ctx.nodeID).toBe(\"server-123\");\n    expect(ctx.eventName).toBeNull();\n    expect(ctx.eventType).toBeNull();\n    expect(ctx.eventGroups).toBeNull();\n    expect(ctx.params).toEqual({\n      a: 5\n    });\n    expect(ctx.meta).toEqual({});\n    expect(ctx.options).toEqual({});\n    expect(ctx.parentID).toBeNull();\n    expect(ctx.caller).toBeNull();\n    expect(ctx.tracing).toBeNull();\n    expect(ctx.level).toBe(1);\n    expect(ctx.needAck).toBeNull();\n    expect(ctx.ackID).toBeNull();\n    expect(ctx.requestID).toBe(ctx.id);\n    expect(ctx.cachedResult).toBe(false);\n  });","file":"unit/context.spec.js","skipped":false,"dir":"test"},{"name":"test with opts","suites":["Test Context.create"],"updatePoint":{"line":109,"column":20},"line":109,"code":"  it(\"test with opts\", () => {\n    const params = {\n      a: 5\n    };\n    const opts = {\n      timeout: 2500,\n      retries: 3,\n      fallbackResponse: \"Hello\",\n      meta: {\n        user: \"John\",\n        c: 200\n      },\n      parentCtx: {\n        id: 100,\n        level: 5,\n        meta: {\n          token: \"123456\",\n          c: 100\n        },\n        requestID: \"1234567890abcdef\",\n        tracing: true,\n        action: {\n          name: \"posts.list\"\n        },\n        service: {\n          fullName: \"posts\"\n        }\n      }\n    };\n    let ctx = Context.create(broker, endpoint, params, opts);\n    expect(ctx.id).toBeDefined();\n    expect(ctx.broker).toBe(broker);\n    expect(ctx.endpoint).toBe(endpoint);\n    expect(ctx.action).toBe(endpoint.action);\n    expect(ctx.service).toBe(endpoint.action.service);\n    expect(ctx.event).toBeNull();\n    expect(ctx.nodeID).toBe(\"server-123\");\n    expect(ctx.eventName).toBeNull();\n    expect(ctx.eventType).toBeNull();\n    expect(ctx.eventGroups).toBeNull();\n    expect(ctx.params).toEqual({\n      a: 5\n    });\n    expect(ctx.meta).toEqual({\n      token: \"123456\",\n      user: \"John\",\n      c: 200\n    });\n    expect(ctx.options).toEqual(opts);\n    expect(ctx.parentID).toBe(100);\n    expect(ctx.caller).toBe(\"posts\");\n    expect(ctx.tracing).toBe(true);\n    expect(ctx.level).toBe(6);\n    expect(ctx.needAck).toBeNull();\n    expect(ctx.ackID).toBeNull();\n    expect(ctx.requestID).toBe(\"1234567890abcdef\");\n  });","file":"unit/context.spec.js","skipped":false,"dir":"test"},{"name":"test with opts & event","suites":["Test Context.create"],"updatePoint":{"line":166,"column":28},"line":166,"code":"  it(\"test with opts & event\", () => {\n    const endpoint = {\n      event: {\n        name: \"user.created\",\n        service: {\n          name: \"posts\"\n        }\n      },\n      id: \"server-123\"\n    };\n    const params = {\n      a: 5\n    };\n    const opts = {\n      timeout: 2500,\n      retries: 3,\n      fallbackResponse: \"Hello\",\n      meta: {\n        user: \"John\",\n        c: 200\n      },\n      parentCtx: {\n        id: 100,\n        level: 5,\n        meta: {\n          token: \"123456\",\n          c: 100\n        },\n        requestID: \"1234567890abcdef\",\n        tracing: true,\n        service: {\n          fullName: \"posts\"\n        },\n        span: {\n          id: 300\n        }\n      },\n      caller: \"api\"\n    };\n    let ctx = Context.create(broker, endpoint, params, opts);\n    expect(ctx.id).toBeDefined();\n    expect(ctx.broker).toBe(broker);\n    expect(ctx.endpoint).toBe(endpoint);\n    expect(ctx.action).toBeNull();\n    expect(ctx.event).toBe(endpoint.event);\n    expect(ctx.service).toBe(endpoint.event.service);\n    expect(ctx.nodeID).toBe(\"server-123\");\n    expect(ctx.eventName).toBeNull();\n    expect(ctx.eventType).toBeNull();\n    expect(ctx.eventGroups).toBeNull();\n    expect(ctx.params).toEqual({\n      a: 5\n    });\n    expect(ctx.meta).toEqual({\n      token: \"123456\",\n      user: \"John\",\n      c: 200\n    });\n    expect(ctx.options).toEqual(opts);\n    expect(ctx.parentID).toBe(300);\n    expect(ctx.caller).toBe(\"api\");\n    expect(ctx.tracing).toBe(true);\n    expect(ctx.level).toBe(6);\n    expect(ctx.needAck).toBeNull();\n    expect(ctx.ackID).toBeNull();\n    expect(ctx.requestID).toBe(\"1234567890abcdef\");\n  });","file":"unit/context.spec.js","skipped":false,"dir":"test"},{"name":"test with parentSpan","suites":["Test Context.create"],"updatePoint":{"line":233,"column":26},"line":233,"code":"  it(\"test with parentSpan\", () => {\n    const params = {\n      a: 5\n    };\n    const opts = {\n      timeout: 2500,\n      parentSpan: {\n        id: 111,\n        traceID: 222,\n        sampled: true\n      }\n    };\n    let ctx = Context.create(broker, endpoint, params, opts);\n    expect(ctx.id).toBeDefined();\n    expect(ctx.broker).toBe(broker);\n    expect(ctx.endpoint).toBe(endpoint);\n    expect(ctx.params).toEqual({\n      a: 5\n    });\n    expect(ctx.options).toEqual(opts);\n    expect(ctx.parentID).toBe(111);\n    expect(ctx.tracing).toBe(true);\n    expect(ctx.level).toBe(1);\n    expect(ctx.needAck).toBeNull();\n    expect(ctx.ackID).toBeNull();\n    expect(ctx.requestID).toBe(222);\n  });","file":"unit/context.spec.js","skipped":false,"dir":"test"},{"name":"should copy all properties without endpoint","suites":["Test copy"],"updatePoint":{"line":303,"column":49},"line":303,"code":"  it(\"should copy all properties without endpoint\", () => {\n    const ctx = baseCtx.copy();\n    expect(ctx.id).not.toBe(baseCtx.id);\n    expect(ctx.broker).toBe(broker);\n    expect(ctx.endpoint).toBe(endpoint);\n    expect(ctx.action).toBe(endpoint.action);\n    expect(ctx.service).toBe(endpoint.action.service);\n    expect(ctx.event).toBeNull();\n    expect(ctx.nodeID).toBe(\"server-123\");\n    expect(ctx.eventName).toBeNull();\n    expect(ctx.eventType).toBeNull();\n    expect(ctx.eventGroups).toBeNull();\n    expect(ctx.params).toEqual(baseCtx.params);\n    expect(ctx.meta).toEqual(baseCtx.meta);\n    expect(ctx.locals).toEqual(baseCtx.locals);\n    expect(ctx.options).toEqual(baseCtx.options);\n    expect(ctx.parentID).toEqual(baseCtx.parentID);\n    expect(ctx.caller).toEqual(baseCtx.caller);\n    expect(ctx.tracing).toEqual(baseCtx.tracing);\n    expect(ctx.level).toEqual(baseCtx.level);\n    expect(ctx.needAck).toEqual(baseCtx.needAck);\n    expect(ctx.ackID).toEqual(baseCtx.ackID);\n    expect(ctx.requestID).toBe(baseCtx.requestID);\n    expect(ctx.cachedResult).toBe(false);\n  });","file":"unit/context.spec.js","skipped":false,"dir":"test"},{"name":"should copy all properties with new endpoint","suites":["Test copy"],"updatePoint":{"line":328,"column":50},"line":328,"code":"  it(\"should copy all properties with new endpoint\", () => {\n    const newEndpoint = {\n      event: {\n        name: \"post.created\",\n        service: {\n          name: \"posts\"\n        }\n      },\n      id: \"server-333\"\n    };\n    baseCtx.eventName = \"post.created\";\n    baseCtx.eventType = \"emit\";\n    baseCtx.eventGroups = [\"mail\"];\n    const ctx = baseCtx.copy(newEndpoint);\n    expect(ctx.id).not.toBe(baseCtx.id);\n    expect(ctx.broker).toBe(broker);\n    expect(ctx.endpoint).toBe(newEndpoint);\n    expect(ctx.action).toBeNull();\n    expect(ctx.event).toBe(newEndpoint.event);\n    expect(ctx.service).toBe(newEndpoint.event.service);\n    expect(ctx.nodeID).toBe(\"server-333\");\n    expect(ctx.eventName).toEqual(\"post.created\");\n    expect(ctx.eventType).toEqual(\"emit\");\n    expect(ctx.eventGroups).toEqual([\"mail\"]);\n    expect(ctx.params).toEqual(baseCtx.params);\n    expect(ctx.meta).toEqual(baseCtx.meta);\n    expect(ctx.options).toEqual(baseCtx.options);\n    expect(ctx.parentID).toEqual(baseCtx.parentID);\n    expect(ctx.caller).toEqual(baseCtx.caller);\n    expect(ctx.tracing).toEqual(baseCtx.tracing);\n    expect(ctx.level).toEqual(baseCtx.level);\n    expect(ctx.needAck).toEqual(baseCtx.needAck);\n    expect(ctx.ackID).toEqual(baseCtx.ackID);\n    expect(ctx.requestID).toBe(baseCtx.requestID);\n    expect(ctx.cachedResult).toBe(false);\n  });","file":"unit/context.spec.js","skipped":false,"dir":"test"},{"name":"should set internal variables from action endpoint","suites":["Test setEndpoint"],"updatePoint":{"line":370,"column":56},"line":370,"code":"  it(\"should set internal variables from action endpoint\", () => {\n    let endpoint = {\n      action: {\n        name: \"posts.find\",\n        service: {\n          name: \"posts\"\n        }\n      },\n      id: \"server-123\"\n    };\n    let ctx = new Context(broker);\n    expect(ctx.endpoint).toBeNull();\n    expect(ctx.action).toBeNull();\n    expect(ctx.event).toBeNull();\n    expect(ctx.service).toBeNull();\n    expect(ctx.nodeID).toBe(\"node-1\");\n    ctx.setEndpoint(endpoint);\n    expect(ctx.endpoint).toBe(endpoint);\n    expect(ctx.action).toBe(endpoint.action);\n    expect(ctx.service).toBe(endpoint.action.service);\n    expect(ctx.event).toBeNull();\n    expect(ctx.nodeID).toBe(\"server-123\");\n  });","file":"unit/context.spec.js","skipped":false,"dir":"test"},{"name":"should set internal variables from event endpoint","suites":["Test setEndpoint"],"updatePoint":{"line":393,"column":55},"line":393,"code":"  it(\"should set internal variables from event endpoint\", () => {\n    let endpoint = {\n      event: {\n        name: \"user.created\",\n        service: {\n          name: \"posts\"\n        }\n      },\n      id: \"server-123\"\n    };\n    let ctx = new Context(broker);\n    expect(ctx.endpoint).toBeNull();\n    expect(ctx.action).toBeNull();\n    expect(ctx.event).toBeNull();\n    expect(ctx.service).toBeNull();\n    expect(ctx.nodeID).toBe(\"node-1\");\n    ctx.setEndpoint(endpoint);\n    expect(ctx.endpoint).toBe(endpoint);\n    expect(ctx.event).toBe(endpoint.event);\n    expect(ctx.service).toBe(endpoint.event.service);\n    expect(ctx.action).toBeNull();\n    expect(ctx.nodeID).toBe(\"server-123\");\n  });","file":"unit/context.spec.js","skipped":false,"dir":"test"},{"name":"should override the params","suites":["Test setParams"],"updatePoint":{"line":418,"column":32},"line":418,"code":"  it(\"should override the params\", () => {\n    let params1 = {\n      a: 1\n    };\n    let params2 = {\n      b: 5\n    };\n    let ctx = new Context();\n    ctx.params = params1;\n    ctx.setParams(params2);\n    expect(ctx.params).not.toBe(params1);\n    expect(ctx.params).toBe(params2);\n  });","file":"unit/context.spec.js","skipped":false,"dir":"test"},{"name":"should clone the params","suites":["Test setParams"],"updatePoint":{"line":431,"column":29},"line":431,"code":"  it(\"should clone the params\", () => {\n    let params1 = {\n      a: 1\n    };\n    let ctx = new Context();\n    ctx.params1 = params1;\n    let params2 = {\n      b: 5\n    };\n    ctx.setParams(params2, true);\n    expect(ctx.params).not.toBe(params2);\n    expect(ctx.params).toEqual(params2);\n  });","file":"unit/context.spec.js","skipped":false,"dir":"test"},{"name":"should call broker.call method with itself","suites":["Test call method"],"updatePoint":{"line":454,"column":48},"line":454,"code":"  it(\"should call broker.call method with itself\", () => {\n    let ctx = new Context(broker);\n    let p = {\n      id: 5\n    };\n    ctx.call(\"posts.find\", p);\n    expect(broker.call).toHaveBeenCalledTimes(1);\n    expect(broker.call).toHaveBeenCalledWith(\"posts.find\", p, {\n      parentCtx: ctx\n    });\n  });","file":"unit/context.spec.js","skipped":false,"dir":"test"},{"name":"should call broker.call method with options","suites":["Test call method"],"updatePoint":{"line":465,"column":49},"line":465,"code":"  it(\"should call broker.call method with options\", () => {\n    broker.call.mockClear();\n    let ctx = new Context(broker);\n    ctx.level = 4;\n    let p = {\n      id: 5\n    };\n    let opts = {\n      timeout: 2500\n    };\n    ctx.call(\"posts.find\", p, opts);\n    expect(broker.call).toHaveBeenCalledTimes(1);\n    expect(broker.call).toHaveBeenCalledWith(\"posts.find\", p, {\n      parentCtx: ctx,\n      timeout: 2500\n    });\n    expect(broker.call.mock.calls[0][2]).not.toBe(opts);\n    expect(opts.parentCtx).toBeUndefined();\n  });","file":"unit/context.spec.js","skipped":false,"dir":"test"},{"name":"should decrement the timeout with elapsed time","suites":["Test call method"],"updatePoint":{"line":484,"column":52},"line":484,"code":"  it(\"should decrement the timeout with elapsed time\", () => {\n    broker.call.mockClear();\n    let ctx = new Context(broker);\n    ctx.startHrTime = process.hrtime();\n    ctx.options.timeout = 1000;\n    clock.tick(300);\n    ctx.call(\"posts.find\", {});\n    expect(broker.call).toHaveBeenCalledTimes(1);\n    let opts = broker.call.mock.calls[0][2];\n    expect(opts.timeout).toBe(700);\n  });","file":"unit/context.spec.js","skipped":false,"dir":"test"},{"name":"should throw RequestSkippedError","suites":["Test call method"],"updatePoint":{"line":495,"column":38},"line":495,"code":"  it(\"should throw RequestSkippedError\", () => {\n    broker.call.mockClear();\n    let ctx = new Context(broker);\n    ctx.startHrTime = process.hrtime();\n    ctx.options.timeout = 200;\n    clock.tick(300);\n    return ctx.call(\"posts.find\", {}).then(protectReject).catch(err => {\n      expect(broker.call).toHaveBeenCalledTimes(0);\n      expect(err).toBeInstanceOf(RequestSkippedError);\n      expect(err.data.action).toBe(\"posts.find\");\n    });\n  });","file":"unit/context.spec.js","skipped":false,"dir":"test"},{"name":"should throw Error if reached the 'maxCallLevel'","suites":["Test call method"],"updatePoint":{"line":507,"column":54},"line":507,"code":"  it(\"should throw Error if reached the 'maxCallLevel'\", () => {\n    broker.call.mockClear();\n    let ctx = new Context(broker);\n    ctx.level = 5;\n    return ctx.call(\"posts.find\", {}).then(protectReject).catch(err => {\n      expect(broker.call).toHaveBeenCalledTimes(0);\n      expect(err).toBeInstanceOf(MaxCallLevelError);\n      expect(err.code).toBe(500);\n      expect(err.data).toEqual({\n        nodeID: broker.nodeID,\n        level: 5\n      });\n    });\n  });","file":"unit/context.spec.js","skipped":false,"dir":"test"},{"name":"should merge meta from sub-context if resolved","suites":["Test call with meta merge"],"updatePoint":{"line":545,"column":52},"line":545,"code":"  it(\"should merge meta from sub-context if resolved\", () => {\n    let ctx = new Context(broker);\n    ctx.meta.a = \"Hello\";\n    ctx.meta.b = 1;\n    return ctx.call(\"posts.find\", {}).catch(protectReject).then(() => {\n      expect(broker.call).toHaveBeenCalledTimes(1);\n      expect(ctx.meta).toEqual({\n        a: \"Hello\",\n        b: 5\n      });\n    });\n  });","file":"unit/context.spec.js","skipped":false,"dir":"test"},{"name":"should merge meta from sub-context if rejected","suites":["Test call with meta merge"],"updatePoint":{"line":557,"column":52},"line":557,"code":"  it(\"should merge meta from sub-context if rejected\", () => {\n    broker.call.mockClear();\n    let ctx = new Context(broker);\n    ctx.meta.a = \"Hello\";\n    ctx.meta.b = 1;\n    return ctx.call(\"posts.find\", {}).then(protectReject).catch(e => {\n      expect(e).toBe(err);\n      expect(broker.call).toHaveBeenCalledTimes(1);\n      expect(ctx.meta).toEqual({\n        a: \"Hello\",\n        b: 5\n      });\n    });\n  });","file":"unit/context.spec.js","skipped":false,"dir":"test"},{"name":"should call broker.mcall method with itself","suites":["Test mcall method"],"updatePoint":{"line":581,"column":49},"line":581,"code":"  it(\"should call broker.mcall method with itself\", () => {\n    let ctx = new Context(broker);\n    let p = {\n      id: 5\n    };\n    let a = [{\n      action: \"posts.find\",\n      params: p\n    }, {\n      action: \"posts.list\",\n      params: p\n    }];\n    ctx.mcall(a);\n    expect(broker.mcall).toHaveBeenCalledTimes(1);\n    expect(broker.mcall).toHaveBeenCalledWith(a, {\n      parentCtx: ctx\n    });\n  });","file":"unit/context.spec.js","skipped":false,"dir":"test"},{"name":"should call broker.call method with options","suites":["Test mcall method"],"updatePoint":{"line":599,"column":49},"line":599,"code":"  it(\"should call broker.call method with options\", () => {\n    broker.mcall.mockClear();\n    let ctx = new Context(broker);\n    ctx.level = 4;\n    let p = {\n      id: 5\n    };\n    let a = [{\n      action: \"posts.find\",\n      params: p\n    }, {\n      action: \"posts.list\",\n      params: p\n    }];\n    let opts = {\n      timeout: 2500\n    };\n    ctx.mcall(a, opts);\n    expect(broker.mcall).toHaveBeenCalledTimes(1);\n    expect(broker.mcall).toHaveBeenCalledWith(a, {\n      parentCtx: ctx,\n      timeout: 2500\n    });\n    expect(broker.mcall.mock.calls[0][2]).not.toBe(opts);\n    expect(opts.parentCtx).toBeUndefined();\n  });","file":"unit/context.spec.js","skipped":false,"dir":"test"},{"name":"should call broker.call method with object","suites":["Test mcall method"],"updatePoint":{"line":625,"column":48},"line":625,"code":"  it(\"should call broker.call method with object\", () => {\n    broker.mcall.mockClear();\n    let ctx = new Context(broker);\n    ctx.level = 4;\n    let p = {\n      id: 5\n    };\n    let a = {\n      find: {\n        action: \"posts.find\",\n        params: p\n      },\n      list: {\n        action: \"posts.list\",\n        params: p\n      }\n    };\n    let opts = {\n      timeout: 2500\n    };\n    ctx.mcall(a, opts);\n    expect(broker.mcall).toHaveBeenCalledTimes(1);\n    expect(broker.mcall).toHaveBeenCalledWith(a, {\n      parentCtx: ctx,\n      timeout: 2500\n    });\n    expect(broker.mcall.mock.calls[0][2]).not.toBe(opts);\n    expect(opts.parentCtx).toBeUndefined();\n  });","file":"unit/context.spec.js","skipped":false,"dir":"test"},{"name":"should decrement the timeout with elapsed time","suites":["Test mcall method"],"updatePoint":{"line":654,"column":52},"line":654,"code":"  it(\"should decrement the timeout with elapsed time\", () => {\n    broker.mcall.mockClear();\n    let ctx = new Context(broker);\n    ctx.startHrTime = process.hrtime();\n    ctx.options.timeout = 1000;\n    clock.tick(300);\n    let p = {\n      id: 5\n    };\n    let a = [{\n      action: \"posts.find\",\n      params: p\n    }, {\n      action: \"posts.list\",\n      params: p\n    }];\n    let opts = {};\n    ctx.mcall(a, opts);\n    expect(broker.mcall).toHaveBeenCalledTimes(1);\n    let bopts = broker.mcall.mock.calls[0][1];\n    expect(bopts.timeout).toBe(700);\n  });","file":"unit/context.spec.js","skipped":false,"dir":"test"},{"name":"should throw RequestSkippedError with array","suites":["Test mcall method"],"updatePoint":{"line":676,"column":49},"line":676,"code":"  it(\"should throw RequestSkippedError with array\", () => {\n    broker.mcall.mockClear();\n    let ctx = new Context(broker);\n    ctx.startHrTime = process.hrtime();\n    ctx.options.timeout = 200;\n    clock.tick(300);\n    let p = {\n      id: 5\n    };\n    let a = [{\n      action: \"posts.find\",\n      params: p\n    }, {\n      action: \"posts.list\",\n      params: p\n    }];\n    let opts = {};\n    return ctx.mcall(a, opts).then(protectReject).catch(err => {\n      expect(broker.mcall).toHaveBeenCalledTimes(0);\n      expect(err).toBeInstanceOf(RequestSkippedError);\n      expect(err.data.action).toBe(\"posts.find, posts.list\");\n    });\n  });","file":"unit/context.spec.js","skipped":false,"dir":"test"},{"name":"should throw RequestSkippedError with object","suites":["Test mcall method"],"updatePoint":{"line":699,"column":50},"line":699,"code":"  it(\"should throw RequestSkippedError with object\", () => {\n    broker.mcall.mockClear();\n    let ctx = new Context(broker);\n    ctx.startHrTime = process.hrtime();\n    ctx.options.timeout = 200;\n    clock.tick(300);\n    let p = {\n      id: 5\n    };\n    let a = {\n      find: {\n        action: \"posts.find\",\n        params: p\n      },\n      list: {\n        action: \"posts.list\",\n        params: p\n      }\n    };\n    let opts = {};\n    return ctx.mcall(a, opts).then(protectReject).catch(err => {\n      expect(broker.mcall).toHaveBeenCalledTimes(0);\n      expect(err).toBeInstanceOf(RequestSkippedError);\n      expect(err.data.action).toBe(\"posts.find, posts.list\");\n    });\n  });","file":"unit/context.spec.js","skipped":false,"dir":"test"},{"name":"should throw Error if reached the 'maxCallLevel'","suites":["Test mcall method"],"updatePoint":{"line":725,"column":54},"line":725,"code":"  it(\"should throw Error if reached the 'maxCallLevel'\", () => {\n    broker.mcall.mockClear();\n    let ctx = new Context(broker);\n    ctx.level = 5;\n    return ctx.mcall([{\n      action: \"posts.find\",\n      params: {}\n    }, {\n      action: \"posts.list\",\n      params: {}\n    }]).then(protectReject).catch(err => {\n      expect(broker.mcall).toHaveBeenCalledTimes(0);\n      expect(err).toBeInstanceOf(MaxCallLevelError);\n      expect(err.code).toBe(500);\n      expect(err.data).toEqual({\n        nodeID: broker.nodeID,\n        level: 5\n      });\n    });\n  });","file":"unit/context.spec.js","skipped":false,"dir":"test"},{"name":"should merge meta from sub-context if resolved","suites":["Test mcall with meta merge"],"updatePoint":{"line":777,"column":52},"line":777,"code":"  it(\"should merge meta from sub-context if resolved\", () => {\n    let ctx = new Context(broker);\n    ctx.meta.a = \"Hello\";\n    ctx.meta.b = 1;\n    return ctx.mcall([{\n      action: \"posts.find\",\n      params: {}\n    }, {\n      action: \"posts.list\",\n      params: {}\n    }]).catch(protectReject).then(() => {\n      expect(broker.mcall).toHaveBeenCalledTimes(1);\n      expect(ctx.meta).toEqual({\n        a: \"Hello\",\n        b: 5,\n        c: 3\n      });\n    });\n  });","file":"unit/context.spec.js","skipped":false,"dir":"test"},{"name":"should merge meta from sub-context if rejected","suites":["Test mcall with meta merge"],"updatePoint":{"line":796,"column":52},"line":796,"code":"  it(\"should merge meta from sub-context if rejected\", () => {\n    broker.mcall.mockClear();\n    let ctx = new Context(broker);\n    ctx.meta.a = \"Hello\";\n    ctx.meta.b = 1;\n    return ctx.mcall([{\n      action: \"posts.find\",\n      params: {}\n    }, {\n      action: \"posts.list\",\n      params: {}\n    }]).then(protectReject).catch(e => {\n      expect(e).toBe(err);\n      expect(broker.mcall).toHaveBeenCalledTimes(1);\n      expect(ctx.meta).toEqual({\n        a: \"Hello\",\n        b: 5,\n        c: 3\n      });\n    });\n  });","file":"unit/context.spec.js","skipped":false,"dir":"test"},{"name":"should call broker.emit method with object param","suites":["Test emit method"],"updatePoint":{"line":824,"column":54},"line":824,"code":"  it(\"should call broker.emit method with object param\", () => {\n    const data = {\n      id: 5\n    };\n    ctx.emit(\"request.rest\", data);\n    expect(broker.emit).toHaveBeenCalledTimes(1);\n    expect(broker.emit).toHaveBeenCalledWith(\"request.rest\", data, {\n      parentCtx: ctx,\n      groups: undefined\n    });\n  });","file":"unit/context.spec.js","skipped":false,"dir":"test"},{"name":"should call broker.emit method with string param","suites":["Test emit method"],"updatePoint":{"line":835,"column":54},"line":835,"code":"  it(\"should call broker.emit method with string param\", () => {\n    broker.emit.mockClear();\n    ctx.emit(\"request.rest\", \"string-data\");\n    expect(broker.emit).toHaveBeenCalledTimes(1);\n    expect(broker.emit).toHaveBeenCalledWith(\"request.rest\", \"string-data\", {\n      parentCtx: ctx,\n      groups: undefined\n    });\n  });","file":"unit/context.spec.js","skipped":false,"dir":"test"},{"name":"should call broker.emit method without payload & group","suites":["Test emit method"],"updatePoint":{"line":844,"column":60},"line":844,"code":"  it(\"should call broker.emit method without payload & group\", () => {\n    broker.emit.mockClear();\n    ctx.emit(\"request.rest\", null, \"mail\");\n    expect(broker.emit).toHaveBeenCalledTimes(1);\n    expect(broker.emit).toHaveBeenCalledWith(\"request.rest\", null, {\n      parentCtx: ctx,\n      groups: [\"mail\"]\n    });\n  });","file":"unit/context.spec.js","skipped":false,"dir":"test"},{"name":"should call broker.emit method without payload & groups","suites":["Test emit method"],"updatePoint":{"line":853,"column":61},"line":853,"code":"  it(\"should call broker.emit method without payload & groups\", () => {\n    broker.emit.mockClear();\n    ctx.emit(\"request.rest\", null, [\"mail\", \"users\"]);\n    expect(broker.emit).toHaveBeenCalledTimes(1);\n    expect(broker.emit).toHaveBeenCalledWith(\"request.rest\", null, {\n      parentCtx: ctx,\n      groups: [\"mail\", \"users\"]\n    });\n  });","file":"unit/context.spec.js","skipped":false,"dir":"test"},{"name":"should call broker.emit method with opts","suites":["Test emit method"],"updatePoint":{"line":862,"column":46},"line":862,"code":"  it(\"should call broker.emit method with opts\", () => {\n    const data = {\n      id: 5\n    };\n    broker.emit.mockClear();\n    ctx.emit(\"request.rest\", data, {\n      groups: [\"mail\"]\n    });\n    expect(broker.emit).toHaveBeenCalledTimes(1);\n    expect(broker.emit).toHaveBeenCalledWith(\"request.rest\", data, {\n      parentCtx: ctx,\n      groups: [\"mail\"]\n    });\n  });","file":"unit/context.spec.js","skipped":false,"dir":"test"},{"name":"should call broker.broadcast method with object param","suites":["Test broadcast method"],"updatePoint":{"line":883,"column":59},"line":883,"code":"  it(\"should call broker.broadcast method with object param\", () => {\n    const data = {\n      id: 5\n    };\n    ctx.broadcast(\"request.rest\", data);\n    expect(broker.broadcast).toHaveBeenCalledTimes(1);\n    expect(broker.broadcast).toHaveBeenCalledWith(\"request.rest\", data, {\n      parentCtx: ctx,\n      groups: undefined\n    });\n  });","file":"unit/context.spec.js","skipped":false,"dir":"test"},{"name":"should call broker.broadcast method with string param","suites":["Test broadcast method"],"updatePoint":{"line":894,"column":59},"line":894,"code":"  it(\"should call broker.broadcast method with string param\", () => {\n    broker.broadcast.mockClear();\n    ctx.broadcast(\"request.rest\", \"string-data\");\n    expect(broker.broadcast).toHaveBeenCalledTimes(1);\n    expect(broker.broadcast).toHaveBeenCalledWith(\"request.rest\", \"string-data\", {\n      parentCtx: ctx,\n      groups: undefined\n    });\n  });","file":"unit/context.spec.js","skipped":false,"dir":"test"},{"name":"should call broker.broadcast method without payload & group","suites":["Test broadcast method"],"updatePoint":{"line":903,"column":65},"line":903,"code":"  it(\"should call broker.broadcast method without payload & group\", () => {\n    broker.broadcast.mockClear();\n    ctx.broadcast(\"request.rest\", null, \"users\");\n    expect(broker.broadcast).toHaveBeenCalledTimes(1);\n    expect(broker.broadcast).toHaveBeenCalledWith(\"request.rest\", null, {\n      parentCtx: ctx,\n      groups: [\"users\"]\n    });\n  });","file":"unit/context.spec.js","skipped":false,"dir":"test"},{"name":"should call broker.broadcast method without payload & groups","suites":["Test broadcast method"],"updatePoint":{"line":912,"column":66},"line":912,"code":"  it(\"should call broker.broadcast method without payload & groups\", () => {\n    broker.broadcast.mockClear();\n    ctx.broadcast(\"request.rest\", null, [\"mail\", \"users\"]);\n    expect(broker.broadcast).toHaveBeenCalledTimes(1);\n    expect(broker.broadcast).toHaveBeenCalledWith(\"request.rest\", null, {\n      parentCtx: ctx,\n      groups: [\"mail\", \"users\"]\n    });\n  });","file":"unit/context.spec.js","skipped":false,"dir":"test"},{"name":"should call broker.broadcast method without payload & groups","suites":["Test broadcast method"],"updatePoint":{"line":921,"column":66},"line":921,"code":"  it(\"should call broker.broadcast method without payload & groups\", () => {\n    const data = {\n      id: 5\n    };\n    broker.broadcast.mockClear();\n    ctx.broadcast(\"request.rest\", data, {\n      groups: [\"mail\"]\n    });\n    expect(broker.broadcast).toHaveBeenCalledTimes(1);\n    expect(broker.broadcast).toHaveBeenCalledWith(\"request.rest\", data, {\n      parentCtx: ctx,\n      groups: [\"mail\"]\n    });\n  });","file":"unit/context.spec.js","skipped":false,"dir":"test"},{"name":"should call tracer.startSpan","suites":["Test startSpan, finishSpan method"],"updatePoint":{"line":954,"column":34},"line":954,"code":"  it(\"should call tracer.startSpan\", () => {\n    expect(ctx.span).toBeNull();\n    expect(ctx._spanStack).toEqual([]);\n    let opts = {\n      a: 5\n    };\n    ctx.startSpan(\"custom span\", opts);\n    expect(broker.tracer.startSpan).toHaveBeenCalledTimes(1);\n    expect(broker.tracer.startSpan).toHaveBeenCalledWith(\"custom span\", Object.assign({\n      ctx\n    }, opts));\n    expect(ctx.span).toBe(fakeSpan);\n    expect(ctx._spanStack).toEqual([fakeSpan]);\n  });","file":"unit/context.spec.js","skipped":false,"dir":"test"},{"name":"should call startSpan of current span","suites":["Test startSpan, finishSpan method"],"updatePoint":{"line":968,"column":43},"line":968,"code":"  it(\"should call startSpan of current span\", () => {\n    expect(ctx.span).toBeDefined();\n    expect(ctx._spanStack).toEqual([fakeSpan]);\n    let opts = {\n      b: 3\n    };\n    ctx.startSpan(\"custom nested span\", opts);\n    expect(fakeSpan.startSpan).toHaveBeenCalledTimes(1);\n    expect(fakeSpan.startSpan).toHaveBeenCalledWith(\"custom nested span\", Object.assign({\n      ctx\n    }, opts));\n    expect(ctx.span).toBe(fakeSpan2);\n    expect(ctx._spanStack).toEqual([fakeSpan, fakeSpan2]);\n  });","file":"unit/context.spec.js","skipped":false,"dir":"test"},{"name":"should call finish of current span","suites":["Test startSpan, finishSpan method"],"updatePoint":{"line":982,"column":40},"line":982,"code":"  it(\"should call finish of current span\", () => {\n    expect(ctx.span).toBe(fakeSpan2);\n    expect(ctx._spanStack).toEqual([fakeSpan, fakeSpan2]);\n    ctx.finishSpan(fakeSpan2);\n    expect(fakeSpan2.isActive).toHaveBeenCalledTimes(1);\n    expect(fakeSpan2.finish).toHaveBeenCalledTimes(1);\n    expect(fakeSpan2.finish).toHaveBeenCalledWith(undefined);\n    expect(ctx.span).toBe(fakeSpan);\n    expect(ctx._spanStack).toEqual([fakeSpan]);\n  });","file":"unit/context.spec.js","skipped":false,"dir":"test"},{"name":"should not call finish of current spanif is not active","suites":["Test startSpan, finishSpan method"],"updatePoint":{"line":992,"column":60},"line":992,"code":"  it(\"should not call finish of current spanif is not active\", () => {\n    ctx.finishSpan(fakeSpan);\n    expect(fakeSpan.isActive).toHaveBeenCalledTimes(1);\n    expect(fakeSpan.finish).toHaveBeenCalledTimes(0);\n    expect(ctx.span).toBe(fakeSpan);\n    expect(ctx._spanStack).toEqual([fakeSpan]);\n  });","file":"unit/context.spec.js","skipped":false,"dir":"test"},{"name":"should call finish of current spanif is not active","suites":["Test startSpan, finishSpan method"],"updatePoint":{"line":999,"column":56},"line":999,"code":"  it(\"should call finish of current spanif is not active\", () => {\n    fakeSpan.isActive = jest.fn(() => true);\n    ctx.finishSpan(fakeSpan, 1234);\n    expect(fakeSpan.isActive).toHaveBeenCalledTimes(1);\n    expect(fakeSpan.finish).toHaveBeenCalledTimes(1);\n    expect(fakeSpan.finish).toHaveBeenCalledWith(1234);\n    expect(ctx.span).toBeUndefined();\n    expect(ctx._spanStack).toEqual([]);\n  });","file":"unit/context.spec.js","skipped":false,"dir":"test"},{"name":"should generate POJO","suites":["Test toJSON method"],"updatePoint":{"line":1057,"column":26},"line":1057,"code":"  it(\"should generate POJO\", () => {\n    expect(ctx.toJSON()).toEqual({\n      id: ctx.id,\n      nodeID: \"server-123\",\n      service: {\n        name: \"posts\",\n        version: 2,\n        fullName: \"v2.posts\"\n      },\n      action: {\n        name: \"posts.find\"\n      },\n      caller: \"posts\",\n      eventName: \"post.created\",\n      eventType: \"emit\",\n      eventGroups: [\"users\", \"mail\"],\n      level: 6,\n      meta: {\n        token: \"123456\",\n        c: 200,\n        user: \"John\"\n      },\n      options: ctx.options,\n      params: {\n        a: 5\n      },\n      parentID: 100,\n      requestID: \"1234567890abcdef\",\n      span: null,\n      needAck: true,\n      ackID: \"ACK-123\",\n      tracing: true,\n      cachedResult: false\n    });\n  });","file":"unit/context.spec.js","skipped":false,"dir":"test"},{"name":"should generate POJO with id","suites":["Test toJSON method"],"updatePoint":{"line":1092,"column":34},"line":1092,"code":"  it(\"should generate POJO with id\", () => {\n    ctx.id = \"123123123\";\n    expect(ctx.toJSON().id).toBe(\"123123123\");\n  });","file":"unit/context.spec.js","skipped":false,"dir":"test"},{"name":"should report cpu usage","suites":["getCpuUsage"],"updatePoint":{"line":10,"column":29},"line":10,"code":"  it(\"should report cpu usage\", () => {\n    os.cpus = jest.fn().mockImplementationOnce(() => [{\n      times: {\n        user: 1,\n        nice: 2,\n        sys: 3,\n        idle: 4,\n        irq: 5\n      }\n    }]).mockImplementationOnce(() => [{\n      times: {\n        user: 2,\n        nice: 3,\n        sys: 4,\n        idle: 5,\n        irq: 6\n      }\n    }]).mockImplementationOnce(() => [{\n      times: {\n        user: 3,\n        nice: 3,\n        sys: 3,\n        idle: 3,\n        irq: 3\n      }\n    }]);\n    const result = getCpuUsage(100);\n    jest.runAllTimers();\n    return expect(result).resolves.toEqual({\n      avg: 70,\n      usages: [70]\n    });\n  });","file":"unit/cpu-usage.spec.js","skipped":false,"dir":"test"},{"name":"should return rejected promise on missing cpu data","suites":["getCpuUsage"],"updatePoint":{"line":43,"column":56},"line":43,"code":"  it(\"should return rejected promise on missing cpu data\", () => {\n    os.cpus = jest.fn().mockImplementationOnce(() => undefined);\n    const result = getCpuUsage(100);\n    jest.runAllTimers();\n    return expect(result).rejects.toBeInstanceOf(Error);\n  });","file":"unit/cpu-usage.spec.js","skipped":false,"dir":"test"},{"name":"test MoleculerError","suites":["Test Errors"],"updatePoint":{"line":8,"column":25},"line":8,"code":"  it(\"test MoleculerError\", () => {\n    let err = new errors.MoleculerError(\"Something went wrong!\", 555, \"ERR_TYPE\", {\n      a: 5\n    });\n    expect(err).toBeDefined();\n    expect(err).toBeInstanceOf(Error);\n    expect(err).toBeInstanceOf(errors.MoleculerError);\n    expect(err.name).toBe(\"MoleculerError\");\n    expect(err.message).toBe(\"Something went wrong!\");\n    expect(err.code).toBe(555);\n    expect(err.type).toBe(\"ERR_TYPE\");\n    expect(err.data).toEqual({\n      a: 5\n    });\n    expect(err.retryable).toBe(false);\n  });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"test MoleculerRetryableError","suites":["Test Errors"],"updatePoint":{"line":24,"column":34},"line":24,"code":"  it(\"test MoleculerRetryableError\", () => {\n    let err = new errors.MoleculerRetryableError(\"Something went wrong!\", 555, \"ERR_TYPE\", {\n      a: 5\n    });\n    expect(err).toBeDefined();\n    expect(err).toBeInstanceOf(Error);\n    expect(err).toBeInstanceOf(errors.MoleculerError);\n    expect(err).toBeInstanceOf(errors.MoleculerRetryableError);\n    expect(err.name).toBe(\"MoleculerRetryableError\");\n    expect(err.message).toBe(\"Something went wrong!\");\n    expect(err.code).toBe(555);\n    expect(err.type).toBe(\"ERR_TYPE\");\n    expect(err.data).toEqual({\n      a: 5\n    });\n    expect(err.retryable).toBe(true);\n  });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"test BrokerDisconnectedError","suites":["Test Errors"],"updatePoint":{"line":41,"column":34},"line":41,"code":"  it(\"test BrokerDisconnectedError\", () => {\n    let err = new errors.BrokerDisconnectedError();\n    expect(err).toBeDefined();\n    expect(err).toBeInstanceOf(Error);\n    expect(err).toBeInstanceOf(errors.MoleculerError);\n    expect(err).toBeInstanceOf(errors.MoleculerRetryableError);\n    expect(err).toBeInstanceOf(errors.BrokerDisconnectedError);\n    expect(err.name).toBe(\"BrokerDisconnectedError\");\n    expect(err.message).toBe(\"The broker's transporter has disconnected. Please try again when a connection is reestablished.\");\n    expect(err.code).toBe(502);\n    expect(err.type).toBe(\"BAD_GATEWAY\");\n    expect(err.data).toEqual(undefined);\n    expect(err.retryable).toBe(true);\n  });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"test MoleculerServerError","suites":["Test Errors"],"updatePoint":{"line":55,"column":31},"line":55,"code":"  it(\"test MoleculerServerError\", () => {\n    let err = new errors.MoleculerServerError(\"Something went wrong!\", 555, \"ERR_TYPE\", {\n      a: 5\n    });\n    expect(err).toBeDefined();\n    expect(err).toBeInstanceOf(Error);\n    expect(err).toBeInstanceOf(errors.MoleculerError);\n    expect(err).toBeInstanceOf(errors.MoleculerRetryableError);\n    expect(err).toBeInstanceOf(errors.MoleculerServerError);\n    expect(err.name).toBe(\"MoleculerServerError\");\n    expect(err.message).toBe(\"Something went wrong!\");\n    expect(err.code).toBe(555);\n    expect(err.type).toBe(\"ERR_TYPE\");\n    expect(err.data).toEqual({\n      a: 5\n    });\n    expect(err.retryable).toBe(true);\n  });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"test MoleculerClientError","suites":["Test Errors"],"updatePoint":{"line":73,"column":31},"line":73,"code":"  it(\"test MoleculerClientError\", () => {\n    let err = new errors.MoleculerClientError(\"Client error!\");\n    expect(err).toBeDefined();\n    expect(err).toBeInstanceOf(Error);\n    expect(err).toBeInstanceOf(errors.MoleculerError);\n    expect(err).toBeInstanceOf(errors.MoleculerClientError);\n    expect(err.code).toBe(400);\n    expect(err.name).toBe(\"MoleculerClientError\");\n    expect(err.message).toBe(\"Client error!\"); //expect(err.data).toEqual({ action: \"posts.find\" });\n\n    expect(err.retryable).toBe(false);\n  });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"test ServiceNotFoundError","suites":["Test Errors"],"updatePoint":{"line":85,"column":31},"line":85,"code":"  it(\"test ServiceNotFoundError\", () => {\n    let err = new errors.ServiceNotFoundError({\n      action: \"posts.find\"\n    });\n    expect(err).toBeDefined();\n    expect(err).toBeInstanceOf(Error);\n    expect(err).toBeInstanceOf(errors.MoleculerRetryableError);\n    expect(err).toBeInstanceOf(errors.ServiceNotFoundError);\n    expect(err.code).toBe(404);\n    expect(err.name).toBe(\"ServiceNotFoundError\");\n    expect(err.type).toBe(\"SERVICE_NOT_FOUND\");\n    expect(err.message).toBe(\"Service 'posts.find' is not found.\");\n    expect(err.data).toEqual({\n      action: \"posts.find\"\n    });\n    expect(err.retryable).toBe(true);\n  });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"test ServiceNotFoundError with nodeID","suites":["Test Errors"],"updatePoint":{"line":102,"column":43},"line":102,"code":"  it(\"test ServiceNotFoundError with nodeID\", () => {\n    let err = new errors.ServiceNotFoundError({\n      action: \"posts.find\",\n      nodeID: \"node-2\"\n    });\n    expect(err).toBeDefined();\n    expect(err).toBeInstanceOf(Error);\n    expect(err).toBeInstanceOf(errors.MoleculerRetryableError);\n    expect(err).toBeInstanceOf(errors.ServiceNotFoundError);\n    expect(err.code).toBe(404);\n    expect(err.name).toBe(\"ServiceNotFoundError\");\n    expect(err.message).toBe(\"Service 'posts.find' is not found on 'node-2' node.\");\n    expect(err.type).toBe(\"SERVICE_NOT_FOUND\");\n    expect(err.data).toEqual({\n      action: \"posts.find\",\n      nodeID: \"node-2\"\n    });\n    expect(err.retryable).toBe(true);\n  });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"test ServiceNotAvailableError","suites":["Test Errors"],"updatePoint":{"line":121,"column":35},"line":121,"code":"  it(\"test ServiceNotAvailableError\", () => {\n    let err = new errors.ServiceNotAvailableError({\n      action: \"posts.find\"\n    });\n    expect(err).toBeDefined();\n    expect(err).toBeInstanceOf(Error);\n    expect(err).toBeInstanceOf(errors.MoleculerRetryableError);\n    expect(err).toBeInstanceOf(errors.ServiceNotAvailableError);\n    expect(err.code).toBe(404);\n    expect(err.name).toBe(\"ServiceNotAvailableError\");\n    expect(err.message).toBe(\"Service 'posts.find' is not available.\");\n    expect(err.type).toBe(\"SERVICE_NOT_AVAILABLE\");\n    expect(err.data).toEqual({\n      action: \"posts.find\"\n    });\n    expect(err.retryable).toBe(true);\n  });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"test ServiceNotAvailableError with NodeID","suites":["Test Errors"],"updatePoint":{"line":138,"column":47},"line":138,"code":"  it(\"test ServiceNotAvailableError with NodeID\", () => {\n    let err = new errors.ServiceNotAvailableError({\n      action: \"posts.find\",\n      nodeID: \"server-2\"\n    });\n    expect(err).toBeDefined();\n    expect(err).toBeInstanceOf(Error);\n    expect(err).toBeInstanceOf(errors.MoleculerRetryableError);\n    expect(err).toBeInstanceOf(errors.ServiceNotAvailableError);\n    expect(err.code).toBe(404);\n    expect(err.name).toBe(\"ServiceNotAvailableError\");\n    expect(err.message).toBe(\"Service 'posts.find' is not available on 'server-2' node.\");\n    expect(err.type).toBe(\"SERVICE_NOT_AVAILABLE\");\n    expect(err.data).toEqual({\n      action: \"posts.find\",\n      nodeID: \"server-2\"\n    });\n    expect(err.retryable).toBe(true);\n  });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"test RequestTimeoutError","suites":["Test Errors"],"updatePoint":{"line":157,"column":30},"line":157,"code":"  it(\"test RequestTimeoutError\", () => {\n    let err = new errors.RequestTimeoutError({\n      action: \"posts.find\",\n      nodeID: \"server-2\"\n    });\n    expect(err).toBeDefined();\n    expect(err).toBeInstanceOf(Error);\n    expect(err).toBeInstanceOf(errors.MoleculerRetryableError);\n    expect(err).toBeInstanceOf(errors.RequestTimeoutError);\n    expect(err.code).toBe(504);\n    expect(err.name).toBe(\"RequestTimeoutError\");\n    expect(err.message).toBe(\"Request is timed out when call 'posts.find' action on 'server-2' node.\");\n    expect(err.type).toBe(\"REQUEST_TIMEOUT\");\n    expect(err.data.nodeID).toBe(\"server-2\");\n    expect(err.retryable).toBe(true);\n  });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"test RequestSkippedError","suites":["Test Errors"],"updatePoint":{"line":173,"column":30},"line":173,"code":"  it(\"test RequestSkippedError\", () => {\n    let err = new errors.RequestSkippedError({\n      action: \"posts.find\",\n      nodeID: \"server-3\"\n    });\n    expect(err).toBeDefined();\n    expect(err).toBeInstanceOf(Error);\n    expect(err).toBeInstanceOf(errors.MoleculerError);\n    expect(err).toBeInstanceOf(errors.RequestSkippedError);\n    expect(err.code).toBe(514);\n    expect(err.name).toBe(\"RequestSkippedError\");\n    expect(err.message).toBe(\"Calling 'posts.find' is skipped because timeout reached on 'server-3' node.\");\n    expect(err.type).toBe(\"REQUEST_SKIPPED\");\n    expect(err.data.action).toBe(\"posts.find\");\n    expect(err.data.nodeID).toBe(\"server-3\");\n    expect(err.retryable).toBe(false);\n  });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"test RequestRejectedError","suites":["Test Errors"],"updatePoint":{"line":190,"column":31},"line":190,"code":"  it(\"test RequestRejectedError\", () => {\n    let err = new errors.RequestRejectedError({\n      action: \"posts.find\",\n      nodeID: \"server-3\"\n    });\n    expect(err).toBeDefined();\n    expect(err).toBeInstanceOf(Error);\n    expect(err).toBeInstanceOf(errors.MoleculerRetryableError);\n    expect(err).toBeInstanceOf(errors.RequestRejectedError);\n    expect(err.code).toBe(503);\n    expect(err.name).toBe(\"RequestRejectedError\");\n    expect(err.message).toBe(\"Request is rejected when call 'posts.find' action on 'server-3' node.\");\n    expect(err.type).toBe(\"REQUEST_REJECTED\");\n    expect(err.data.action).toBe(\"posts.find\");\n    expect(err.data.nodeID).toBe(\"server-3\");\n    expect(err.retryable).toBe(true);\n  });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"test QueueIsFullError","suites":["Test Errors"],"updatePoint":{"line":207,"column":27},"line":207,"code":"  it(\"test QueueIsFullError\", () => {\n    let err = new errors.QueueIsFullError({\n      action: \"posts.find\",\n      nodeID: \"server-3\",\n      size: 100,\n      limit: 50\n    });\n    expect(err).toBeDefined();\n    expect(err).toBeInstanceOf(Error);\n    expect(err).toBeInstanceOf(errors.MoleculerRetryableError);\n    expect(err).toBeInstanceOf(errors.QueueIsFullError);\n    expect(err.code).toBe(429);\n    expect(err.name).toBe(\"QueueIsFullError\");\n    expect(err.message).toBe(\"Queue is full. Request 'posts.find' action on 'server-3' node is rejected.\");\n    expect(err.type).toBe(\"QUEUE_FULL\");\n    expect(err.data.action).toBe(\"posts.find\");\n    expect(err.data.nodeID).toBe(\"server-3\");\n    expect(err.data.size).toBe(100);\n    expect(err.data.limit).toBe(50);\n    expect(err.retryable).toBe(true);\n  });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"test ValidationError","suites":["Test Errors"],"updatePoint":{"line":228,"column":26},"line":228,"code":"  it(\"test ValidationError\", () => {\n    let data = {};\n    let err = new errors.ValidationError(\"Param is not correct!\", \"ERR_TYPE\", data);\n    expect(err).toBeDefined();\n    expect(err).toBeInstanceOf(Error);\n    expect(err).toBeInstanceOf(errors.MoleculerClientError);\n    expect(err).toBeInstanceOf(errors.ValidationError);\n    expect(err.name).toBe(\"ValidationError\");\n    expect(err.message).toBe(\"Param is not correct!\");\n    expect(err.code).toBe(422);\n    expect(err.type).toBe(\"ERR_TYPE\");\n    expect(err.data).toBe(data);\n    expect(err.retryable).toBe(false);\n  });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"test MaxCallLevelError","suites":["Test Errors"],"updatePoint":{"line":242,"column":28},"line":242,"code":"  it(\"test MaxCallLevelError\", () => {\n    let err = new errors.MaxCallLevelError({\n      nodeID: \"server-2\",\n      level: 10\n    });\n    expect(err).toBeDefined();\n    expect(err).toBeInstanceOf(Error);\n    expect(err).toBeInstanceOf(errors.MoleculerError);\n    expect(err).toBeInstanceOf(errors.MaxCallLevelError);\n    expect(err.code).toBe(500);\n    expect(err.name).toBe(\"MaxCallLevelError\");\n    expect(err.type).toBe(\"MAX_CALL_LEVEL\");\n    expect(err.message).toBe(\"Request level is reached the limit (10) on 'server-2' node.\");\n    expect(err.data).toEqual({\n      nodeID: \"server-2\",\n      level: 10\n    });\n    expect(err.retryable).toBe(false);\n  });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"test ServiceSchemaError","suites":["Test Errors"],"updatePoint":{"line":261,"column":29},"line":261,"code":"  it(\"test ServiceSchemaError\", () => {\n    let err = new errors.ServiceSchemaError(\"Invalid schema def.\");\n    expect(err).toBeDefined();\n    expect(err).toBeInstanceOf(Error);\n    expect(err).toBeInstanceOf(errors.ServiceSchemaError);\n    expect(err.name).toBe(\"ServiceSchemaError\");\n    expect(err.message).toBe(\"Invalid schema def.\");\n    expect(err.code).toBe(500);\n    expect(err.type).toBe(\"SERVICE_SCHEMA_ERROR\");\n    expect(err.data).toBeUndefined();\n  });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"test BrokerOptionsError","suites":["Test Errors"],"updatePoint":{"line":272,"column":29},"line":272,"code":"  it(\"test BrokerOptionsError\", () => {\n    let err = new errors.BrokerOptionsError(\"Invalid broker config.\", {\n      a: 5\n    });\n    expect(err).toBeDefined();\n    expect(err).toBeInstanceOf(Error);\n    expect(err).toBeInstanceOf(errors.BrokerOptionsError);\n    expect(err.name).toBe(\"BrokerOptionsError\");\n    expect(err.message).toBe(\"Invalid broker config.\");\n    expect(err.code).toBe(500);\n    expect(err.type).toBe(\"BROKER_OPTIONS_ERROR\");\n    expect(err.data).toEqual({\n      a: 5\n    });\n  });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"test GracefulStopTimeoutError","suites":["Test Errors"],"updatePoint":{"line":287,"column":35},"line":287,"code":"  it(\"test GracefulStopTimeoutError\", () => {\n    let err = new errors.GracefulStopTimeoutError({\n      service: {\n        name: \"posts\",\n        version: 2\n      }\n    });\n    expect(err).toBeDefined();\n    expect(err).toBeInstanceOf(Error);\n    expect(err).toBeInstanceOf(errors.GracefulStopTimeoutError);\n    expect(err.name).toBe(\"GracefulStopTimeoutError\");\n    expect(err.message).toBe(\"Unable to stop 'posts' service gracefully.\");\n    expect(err.code).toBe(500);\n    expect(err.type).toBe(\"GRACEFUL_STOP_TIMEOUT\");\n    expect(err.data).toEqual({\n      name: \"posts\",\n      version: 2\n    });\n  });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"test ProtocolVersionMismatchError","suites":["Test Errors"],"updatePoint":{"line":306,"column":39},"line":306,"code":"  it(\"test ProtocolVersionMismatchError\", () => {\n    let err = new errors.ProtocolVersionMismatchError({\n      nodeID: \"server-2\",\n      actual: \"2\",\n      received: \"1\"\n    });\n    expect(err).toBeDefined();\n    expect(err).toBeInstanceOf(Error);\n    expect(err).toBeInstanceOf(errors.ProtocolVersionMismatchError);\n    expect(err.code).toBe(500);\n    expect(err.name).toBe(\"ProtocolVersionMismatchError\");\n    expect(err.message).toBe(\"Protocol version mismatch.\");\n    expect(err.type).toBe(\"PROTOCOL_VERSION_MISMATCH\");\n    expect(err.data).toEqual({\n      nodeID: \"server-2\",\n      actual: \"2\",\n      received: \"1\"\n    });\n    expect(err.retryable).toBe(false);\n  });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"test InvalidPacketDataError","suites":["Test Errors"],"updatePoint":{"line":326,"column":33},"line":326,"code":"  it(\"test InvalidPacketDataError\", () => {\n    let payload = {};\n    let err = new errors.InvalidPacketDataError({\n      type: \"INFO\",\n      payload\n    });\n    expect(err).toBeDefined();\n    expect(err).toBeInstanceOf(Error);\n    expect(err).toBeInstanceOf(errors.InvalidPacketDataError);\n    expect(err.code).toBe(500);\n    expect(err.name).toBe(\"InvalidPacketDataError\");\n    expect(err.type).toBe(\"INVALID_PACKET_DATA\");\n    expect(err.message).toBe(\"Invalid packet data.\");\n    expect(err.data).toEqual({\n      type: \"INFO\",\n      payload\n    });\n    expect(err.retryable).toBe(false);\n  });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"should recreate MoleculerError","suites":["Test Errors.recreateError"],"updatePoint":{"line":347,"column":36},"line":347,"code":"  it(\"should recreate MoleculerError\", () => {\n    let err = errors.recreateError({\n      name: \"MoleculerError\",\n      message: \"Something went wrong\",\n      code: 501,\n      type: \"SOMETHING_ERROR\",\n      data: {\n        a: 5\n      }\n    });\n    expect(err).toBeDefined();\n    expect(err).toBeInstanceOf(errors.MoleculerError);\n    expect(err.name).toBe(\"MoleculerError\");\n    expect(err.message).toBe(\"Something went wrong\");\n    expect(err.code).toBe(501);\n    expect(err.type).toBe(\"SOMETHING_ERROR\");\n    expect(err.data).toEqual({\n      a: 5\n    });\n  });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"should recreate MoleculerRetryableError","suites":["Test Errors.recreateError"],"updatePoint":{"line":367,"column":45},"line":367,"code":"  it(\"should recreate MoleculerRetryableError\", () => {\n    let err = errors.recreateError({\n      name: \"MoleculerRetryableError\",\n      message: \"Something went wrong\",\n      code: 501,\n      type: \"SOMETHING_ERROR\",\n      data: {\n        a: 5\n      }\n    });\n    expect(err).toBeDefined();\n    expect(err).toBeInstanceOf(errors.MoleculerRetryableError);\n    expect(err.name).toBe(\"MoleculerRetryableError\");\n    expect(err.message).toBe(\"Something went wrong\");\n    expect(err.code).toBe(501);\n    expect(err.type).toBe(\"SOMETHING_ERROR\");\n    expect(err.data).toEqual({\n      a: 5\n    });\n  });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"should recreate MoleculerServerError","suites":["Test Errors.recreateError"],"updatePoint":{"line":387,"column":42},"line":387,"code":"  it(\"should recreate MoleculerServerError\", () => {\n    let err = errors.recreateError({\n      name: \"MoleculerServerError\",\n      message: \"Something went wrong\",\n      code: 501,\n      type: \"SOMETHING_ERROR\",\n      data: {\n        a: 5\n      }\n    });\n    expect(err).toBeDefined();\n    expect(err).toBeInstanceOf(errors.MoleculerServerError);\n    expect(err.name).toBe(\"MoleculerServerError\");\n    expect(err.message).toBe(\"Something went wrong\");\n    expect(err.code).toBe(501);\n    expect(err.type).toBe(\"SOMETHING_ERROR\");\n    expect(err.data).toEqual({\n      a: 5\n    });\n  });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"should recreate MoleculerClientError","suites":["Test Errors.recreateError"],"updatePoint":{"line":407,"column":42},"line":407,"code":"  it(\"should recreate MoleculerClientError\", () => {\n    let err = errors.recreateError({\n      name: \"MoleculerClientError\",\n      message: \"Something went wrong\",\n      code: 404,\n      type: \"SOMETHING_ERROR\",\n      data: {\n        a: 5\n      }\n    });\n    expect(err).toBeDefined();\n    expect(err).toBeInstanceOf(errors.MoleculerClientError);\n    expect(err.name).toBe(\"MoleculerClientError\");\n    expect(err.message).toBe(\"Something went wrong\");\n    expect(err.code).toBe(404);\n    expect(err.type).toBe(\"SOMETHING_ERROR\");\n    expect(err.data).toEqual({\n      a: 5\n    });\n  });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"should recreate ValidationError","suites":["Test Errors.recreateError"],"updatePoint":{"line":427,"column":37},"line":427,"code":"  it(\"should recreate ValidationError\", () => {\n    let err = errors.recreateError({\n      name: \"ValidationError\",\n      message: \"Parameters wrong\",\n      type: \"PARAM_VALIDATION_ERROR\",\n      data: {\n        a: \"must be string\"\n      }\n    });\n    expect(err).toBeDefined();\n    expect(err).toBeInstanceOf(errors.ValidationError);\n    expect(err.name).toBe(\"ValidationError\");\n    expect(err.message).toBe(\"Parameters wrong\");\n    expect(err.code).toBe(422);\n    expect(err.type).toBe(\"PARAM_VALIDATION_ERROR\");\n    expect(err.data).toEqual({\n      a: \"must be string\"\n    });\n  });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"should recreate ServiceNotFoundError","suites":["Test Errors.recreateError"],"updatePoint":{"line":446,"column":42},"line":446,"code":"  it(\"should recreate ServiceNotFoundError\", () => {\n    let err = errors.recreateError({\n      name: \"ServiceNotFoundError\",\n      data: {\n        action: \"posts.find\",\n        nodeID: \"node-2\"\n      }\n    });\n    expect(err).toBeDefined();\n    expect(err).toBeInstanceOf(errors.ServiceNotFoundError);\n    expect(err.name).toBe(\"ServiceNotFoundError\");\n    expect(err.message).toBe(\"Service 'posts.find' is not found on 'node-2' node.\");\n    expect(err.code).toBe(404);\n    expect(err.type).toBe(\"SERVICE_NOT_FOUND\");\n    expect(err.data).toEqual({\n      action: \"posts.find\",\n      nodeID: \"node-2\"\n    });\n  });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"should recreate ServiceNotAvailableError","suites":["Test Errors.recreateError"],"updatePoint":{"line":465,"column":46},"line":465,"code":"  it(\"should recreate ServiceNotAvailableError\", () => {\n    let err = errors.recreateError({\n      name: \"ServiceNotAvailableError\",\n      data: {\n        action: \"posts.find\",\n        nodeID: \"node-2\"\n      }\n    });\n    expect(err).toBeDefined();\n    expect(err).toBeInstanceOf(errors.ServiceNotAvailableError);\n    expect(err.name).toBe(\"ServiceNotAvailableError\");\n    expect(err.message).toBe(\"Service 'posts.find' is not available on 'node-2' node.\");\n    expect(err.code).toBe(404);\n    expect(err.type).toBe(\"SERVICE_NOT_AVAILABLE\");\n    expect(err.data).toEqual({\n      action: \"posts.find\",\n      nodeID: \"node-2\"\n    });\n  });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"should recreate RequestTimeoutError","suites":["Test Errors.recreateError"],"updatePoint":{"line":484,"column":41},"line":484,"code":"  it(\"should recreate RequestTimeoutError\", () => {\n    let err = errors.recreateError({\n      name: \"RequestTimeoutError\",\n      data: {\n        action: \"posts.find\",\n        nodeID: \"node-2\"\n      }\n    });\n    expect(err).toBeDefined();\n    expect(err).toBeInstanceOf(errors.RequestTimeoutError);\n    expect(err.name).toBe(\"RequestTimeoutError\");\n    expect(err.message).toBe(\"Request is timed out when call 'posts.find' action on 'node-2' node.\");\n    expect(err.code).toBe(504);\n    expect(err.type).toBe(\"REQUEST_TIMEOUT\");\n    expect(err.data).toEqual({\n      action: \"posts.find\",\n      nodeID: \"node-2\"\n    });\n  });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"should recreate RequestSkippedError","suites":["Test Errors.recreateError"],"updatePoint":{"line":503,"column":41},"line":503,"code":"  it(\"should recreate RequestSkippedError\", () => {\n    let err = errors.recreateError({\n      name: \"RequestSkippedError\",\n      data: {\n        action: \"posts.find\",\n        nodeID: \"node-2\"\n      }\n    });\n    expect(err).toBeDefined();\n    expect(err).toBeInstanceOf(errors.RequestSkippedError);\n    expect(err.name).toBe(\"RequestSkippedError\");\n    expect(err.message).toBe(\"Calling 'posts.find' is skipped because timeout reached on 'node-2' node.\");\n    expect(err.code).toBe(514);\n    expect(err.type).toBe(\"REQUEST_SKIPPED\");\n    expect(err.data).toEqual({\n      action: \"posts.find\",\n      nodeID: \"node-2\"\n    });\n  });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"should recreate RequestRejectedError","suites":["Test Errors.recreateError"],"updatePoint":{"line":522,"column":42},"line":522,"code":"  it(\"should recreate RequestRejectedError\", () => {\n    let err = errors.recreateError({\n      name: \"RequestRejectedError\",\n      data: {\n        action: \"posts.find\",\n        nodeID: \"node-2\"\n      }\n    });\n    expect(err).toBeDefined();\n    expect(err).toBeInstanceOf(errors.RequestRejectedError);\n    expect(err.name).toBe(\"RequestRejectedError\");\n    expect(err.message).toBe(\"Request is rejected when call 'posts.find' action on 'node-2' node.\");\n    expect(err.code).toBe(503);\n    expect(err.type).toBe(\"REQUEST_REJECTED\");\n    expect(err.data).toEqual({\n      action: \"posts.find\",\n      nodeID: \"node-2\"\n    });\n  });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"should recreate QueueIsFullError","suites":["Test Errors.recreateError"],"updatePoint":{"line":541,"column":38},"line":541,"code":"  it(\"should recreate QueueIsFullError\", () => {\n    let err = errors.recreateError({\n      name: \"QueueIsFullError\",\n      data: {\n        action: \"posts.find\",\n        nodeID: \"node-2\"\n      }\n    });\n    expect(err).toBeDefined();\n    expect(err).toBeInstanceOf(errors.QueueIsFullError);\n    expect(err.name).toBe(\"QueueIsFullError\");\n    expect(err.message).toBe(\"Queue is full. Request 'posts.find' action on 'node-2' node is rejected.\");\n    expect(err.code).toBe(429);\n    expect(err.type).toBe(\"QUEUE_FULL\");\n    expect(err.data).toEqual({\n      action: \"posts.find\",\n      nodeID: \"node-2\"\n    });\n  });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"should recreate MaxCallLevelError","suites":["Test Errors.recreateError"],"updatePoint":{"line":560,"column":39},"line":560,"code":"  it(\"should recreate MaxCallLevelError\", () => {\n    let err = errors.recreateError({\n      name: \"MaxCallLevelError\",\n      data: {\n        level: 3,\n        nodeID: \"node-2\"\n      }\n    });\n    expect(err).toBeDefined();\n    expect(err).toBeInstanceOf(errors.MaxCallLevelError);\n    expect(err.name).toBe(\"MaxCallLevelError\");\n    expect(err.message).toBe(\"Request level is reached the limit (3) on 'node-2' node.\");\n    expect(err.code).toBe(500);\n    expect(err.type).toBe(\"MAX_CALL_LEVEL\");\n    expect(err.data).toEqual({\n      level: 3,\n      nodeID: \"node-2\"\n    });\n  });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"should recreate GracefulStopTimeoutError","suites":["Test Errors.recreateError"],"updatePoint":{"line":579,"column":46},"line":579,"code":"  it(\"should recreate GracefulStopTimeoutError\", () => {\n    let err = errors.recreateError({\n      name: \"GracefulStopTimeoutError\"\n    });\n    expect(err).toBeDefined();\n    expect(err).toBeInstanceOf(errors.GracefulStopTimeoutError);\n    expect(err.name).toBe(\"GracefulStopTimeoutError\");\n    expect(err.message).toBe(\"Unable to stop ServiceBroker gracefully.\");\n    expect(err.code).toBe(500);\n    expect(err.type).toBe(\"GRACEFUL_STOP_TIMEOUT\");\n  });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"should recreate ProtocolVersionMismatchError","suites":["Test Errors.recreateError"],"updatePoint":{"line":590,"column":50},"line":590,"code":"  it(\"should recreate ProtocolVersionMismatchError\", () => {\n    let err = errors.recreateError({\n      name: \"ProtocolVersionMismatchError\",\n      data: {\n        a: 5\n      }\n    });\n    expect(err).toBeDefined();\n    expect(err).toBeInstanceOf(errors.ProtocolVersionMismatchError);\n    expect(err.name).toBe(\"ProtocolVersionMismatchError\");\n    expect(err.message).toBe(\"Protocol version mismatch.\");\n    expect(err.code).toBe(500);\n    expect(err.type).toBe(\"PROTOCOL_VERSION_MISMATCH\");\n    expect(err.data).toEqual({\n      a: 5\n    });\n  });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"should recreate InvalidPacketDataError","suites":["Test Errors.recreateError"],"updatePoint":{"line":607,"column":44},"line":607,"code":"  it(\"should recreate InvalidPacketDataError\", () => {\n    let err = errors.recreateError({\n      name: \"InvalidPacketDataError\",\n      data: {\n        a: 5\n      }\n    });\n    expect(err).toBeDefined();\n    expect(err).toBeInstanceOf(errors.InvalidPacketDataError);\n    expect(err.name).toBe(\"InvalidPacketDataError\");\n    expect(err.message).toBe(\"Invalid packet data.\");\n    expect(err.code).toBe(500);\n    expect(err.type).toBe(\"INVALID_PACKET_DATA\");\n    expect(err.data).toEqual({\n      a: 5\n    });\n  });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"should recreate ServiceSchemaError","suites":["Test Errors.recreateError"],"updatePoint":{"line":624,"column":40},"line":624,"code":"  it(\"should recreate ServiceSchemaError\", () => {\n    let err = errors.recreateError({\n      name: \"ServiceSchemaError\",\n      message: \"Something wrong in broker options\",\n      data: {\n        a: 5\n      }\n    });\n    expect(err).toBeDefined();\n    expect(err).toBeInstanceOf(errors.ServiceSchemaError);\n    expect(err.name).toBe(\"ServiceSchemaError\");\n    expect(err.message).toBe(\"Something wrong in broker options\");\n    expect(err.code).toBe(500);\n    expect(err.type).toBe(\"SERVICE_SCHEMA_ERROR\");\n    expect(err.data).toEqual({\n      a: 5\n    });\n  });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"should recreate BrokerOptionsError","suites":["Test Errors.recreateError"],"updatePoint":{"line":642,"column":40},"line":642,"code":"  it(\"should recreate BrokerOptionsError\", () => {\n    let err = errors.recreateError({\n      name: \"BrokerOptionsError\",\n      message: \"Something wrong in broker options\",\n      data: {\n        a: 5\n      }\n    });\n    expect(err).toBeDefined();\n    expect(err).toBeInstanceOf(errors.BrokerOptionsError);\n    expect(err.name).toBe(\"BrokerOptionsError\");\n    expect(err.message).toBe(\"Something wrong in broker options\");\n    expect(err.code).toBe(500);\n    expect(err.type).toBe(\"BROKER_OPTIONS_ERROR\");\n    expect(err.data).toEqual({\n      a: 5\n    });\n  });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"should return null if not known error","suites":["Test Errors.recreateError"],"updatePoint":{"line":660,"column":43},"line":660,"code":"  it(\"should return null if not known error\", () => {\n    let err = errors.recreateError({\n      name: \"MyCustomError\",\n      message: \"Something wrong in broker options\",\n      data: {\n        a: 5\n      }\n    });\n    expect(err).toBeUndefined();\n  });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"should create an instance","suites":["Test Errors.Regenerator","Initialization"],"updatePoint":{"line":673,"column":33},"line":673,"code":"    it(\"should create an instance\", () => {\n      let regenerator = new errors.Regenerator();\n      expect(regenerator).toBeDefined();\n      expect(regenerator.init).toBeDefined();\n      expect(regenerator.restore).toBeDefined();\n      expect(regenerator.extractPlainError).toBeDefined();\n      expect(regenerator.restoreCustomError).toBeDefined();\n    });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"should initialize an instance","suites":["Test Errors.Regenerator","Initialization"],"updatePoint":{"line":681,"column":37},"line":681,"code":"    it(\"should initialize an instance\", () => {\n      let broker = new ServiceBroker({\n        logger: false\n      });\n      let regenerator = new errors.Regenerator();\n      regenerator.init(broker);\n      expect(regenerator.broker).toBe(broker);\n    });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"should call restoreCustomError hook","suites":["Test Errors.Regenerator","Restore error"],"updatePoint":{"line":699,"column":43},"line":699,"code":"    it(\"should call restoreCustomError hook\", () => {\n      let plainError = {\n        name: \"MoleculerError\",\n        message: \"Something went wrong\",\n        code: 501,\n        type: \"SOMETHING_ERROR\",\n        data: {\n          a: 5\n        }\n      };\n      let payload = {};\n      regenerator.restoreCustomError = jest.fn();\n      regenerator.restore(plainError, payload);\n      expect(regenerator.restoreCustomError).toHaveBeenCalled();\n      expect(regenerator.restoreCustomError).toHaveBeenCalledWith(plainError, payload);\n    });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"should restore a built-in error","suites":["Test Errors.Regenerator","Restore error"],"updatePoint":{"line":715,"column":39},"line":715,"code":"    it(\"should restore a built-in error\", () => {\n      let plainError = {\n        name: \"ServiceNotFoundError\",\n        code: 404,\n        type: \"SERVICE_NOT_FOUND\",\n        data: {\n          a: 5\n        },\n        retryable: true,\n        nodeID: \"node-1234\",\n        stack: \"error stack\"\n      };\n      let payload = {\n        sender: \"payload-sender\"\n      };\n      let err = regenerator.restore(plainError, payload);\n      expect(err).toBeInstanceOf(errors.MoleculerError);\n      expect(err).toBeInstanceOf(errors.ServiceNotFoundError);\n      expect(err.name).toBe(\"ServiceNotFoundError\");\n      expect(err.code).toBe(404);\n      expect(err.type).toBe(\"SERVICE_NOT_FOUND\");\n      expect(err.data).toEqual({\n        a: 5\n      });\n      expect(err.retryable).toBe(true);\n      expect(err.nodeID).toBe(\"node-1234\");\n      expect(err.stack).toBe(\"error stack\");\n    });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"should pick nodeID from payload.sender when nodeID is absent in a plain error","suites":["Test Errors.Regenerator","Restore error"],"updatePoint":{"line":743,"column":85},"line":743,"code":"    it(\"should pick nodeID from payload.sender when nodeID is absent in a plain error\", () => {\n      let plainError = {\n        name: \"ServiceNotFoundError\",\n        code: 404,\n        type: \"SERVICE_NOT_FOUND\",\n        data: {\n          a: 5\n        },\n        retryable: true,\n        stack: \"error stack\"\n      };\n      let payload = {\n        sender: \"payload-sender\"\n      };\n      let err = regenerator.restore(plainError, payload);\n      expect(err).toBeInstanceOf(errors.MoleculerError);\n      expect(err).toBeInstanceOf(errors.ServiceNotFoundError);\n      expect(err.name).toBe(\"ServiceNotFoundError\");\n      expect(err.code).toBe(404);\n      expect(err.type).toBe(\"SERVICE_NOT_FOUND\");\n      expect(err.data).toEqual({\n        a: 5\n      });\n      expect(err.retryable).toBe(true);\n      expect(err.nodeID).toBe(\"payload-sender\");\n      expect(err.stack).toBe(\"error stack\");\n    });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"should restore an unknown error","suites":["Test Errors.Regenerator","Restore error"],"updatePoint":{"line":770,"column":39},"line":770,"code":"    it(\"should restore an unknown error\", () => {\n      let plainError = {\n        name: \"UnknownError\",\n        code: 456,\n        type: \"UNKNOWN_TYPE\",\n        data: {\n          a: 5\n        },\n        retryable: true,\n        nodeID: \"node-1234\",\n        stack: \"error stack\"\n      };\n      let payload = {\n        sender: \"payload-sender\"\n      };\n      let err = regenerator.restore(plainError, payload);\n      expect(err).toBeInstanceOf(Error);\n      expect(err.name).toBe(\"UnknownError\");\n      expect(err.code).toBe(456);\n      expect(err.type).toBe(\"UNKNOWN_TYPE\");\n      expect(err.data).toEqual({\n        a: 5\n      });\n      expect(err.retryable).toBe(true);\n      expect(err.nodeID).toBe(\"node-1234\");\n      expect(err.stack).toBe(\"error stack\");\n    });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"should create a custom error","suites":["Test Errors.Regenerator","Restore custom error"],"updatePoint":{"line":830,"column":36},"line":830,"code":"    it(\"should create a custom error\", () => {\n      let plainError = {\n        name: \"MyCustomError\",\n        code: 456,\n        type: \"CUSTOM_TYPE\",\n        data: {\n          a: 5\n        },\n        retryable: true,\n        nodeID: \"node-1234\",\n        stack: \"error stack\",\n        custom: {\n          a: 5,\n          b: 6\n        }\n      };\n      let payload = {\n        sender: \"payload-sender\"\n      };\n      let err = regenerator.restore(plainError, payload);\n      expect(err).toBeInstanceOf(MyCustomError);\n      expect(err.name).toBe(\"MyCustomError\");\n      expect(err.code).toBe(456);\n      expect(err.type).toBe(\"CUSTOM_TYPE\");\n      expect(err.data).toEqual({\n        a: 5\n      });\n      expect(err.retryable).toBe(true);\n      expect(err.nodeID).toBe(\"node-1234\");\n      expect(err.stack).toBe(\"error stack\");\n      expect(err.custom).toEqual({\n        a: 5,\n        b: 6\n      });\n    });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"should prefer a custom error over a built-in one","suites":["Test Errors.Regenerator","Restore custom error"],"updatePoint":{"line":865,"column":56},"line":865,"code":"    it(\"should prefer a custom error over a built-in one\", () => {\n      regenerator.restoreCustomError = function ({\n        name,\n        code,\n        type,\n        data,\n        custom\n      }) {\n        if (name === \"MoleculerRetryableError\") {\n          return new MyCustomError(name, code, type, data, custom);\n        }\n      };\n\n      let plainError = {\n        name: \"MoleculerRetryableError\",\n        code: 456,\n        type: \"CUSTOM_TYPE\",\n        data: {\n          a: 5\n        },\n        retryable: true,\n        nodeID: \"node-1234\",\n        stack: \"error stack\",\n        custom: {\n          a: 5,\n          b: 6\n        }\n      };\n      let payload = {\n        sender: \"payload-sender\"\n      };\n      let err = regenerator.restore(plainError, payload);\n      expect(err).toBeInstanceOf(MyCustomError);\n    });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"should extract from a built-in error","suites":["Test Errors.Regenerator","Extract plain error"],"updatePoint":{"line":910,"column":44},"line":910,"code":"    it(\"should extract from a built-in error\", () => {\n      const err = new errors.MoleculerRetryableError(\"Msg\", 456, \"TYPE\", {\n        a: 5\n      });\n      err.stack = \"custom stack\";\n      err.nodeID = \"node1\";\n      const res = regenerator.extractPlainError(err);\n      expect(res).toEqual({\n        name: \"MoleculerRetryableError\",\n        message: \"Msg\",\n        nodeID: \"node1\",\n        code: 456,\n        type: \"TYPE\",\n        retryable: true,\n        stack: \"custom stack\",\n        data: {\n          a: 5\n        }\n      });\n    });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"should select nodeID from a broker when input error doesn't have nodeID","suites":["Test Errors.Regenerator","Extract plain error"],"updatePoint":{"line":930,"column":79},"line":930,"code":"    it(\"should select nodeID from a broker when input error doesn't have nodeID\", () => {\n      const err = new errors.MoleculerRetryableError(\"Msg\", 456, \"TYPE\", {\n        a: 5\n      });\n      err.stack = \"custom stack\";\n      const res = regenerator.extractPlainError(err);\n      expect(res).toEqual({\n        name: \"MoleculerRetryableError\",\n        message: \"Msg\",\n        nodeID: regenerator.broker.nodeID,\n        code: 456,\n        type: \"TYPE\",\n        retryable: true,\n        stack: \"custom stack\",\n        data: {\n          a: 5\n        }\n      });\n    });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"should resolve to a custom regenerator when option is an instance of Errors.Regenerator","suites":["Test Errors.resolveRegenerator"],"updatePoint":{"line":952,"column":93},"line":952,"code":"  it(\"should resolve to a custom regenerator when option is an instance of Errors.Regenerator\", () => {\n    class CustomRegenerator extends errors.Regenerator {}\n\n    const result = errors.resolveRegenerator(new CustomRegenerator());\n    expect(result).toBeInstanceOf(CustomRegenerator);\n  });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"should resolve to Errors.Regenerator when option isn't an instance of Errors.Regenerator","suites":["Test Errors.resolveRegenerator"],"updatePoint":{"line":958,"column":94},"line":958,"code":"  it(\"should resolve to Errors.Regenerator when option isn't an instance of Errors.Regenerator\", () => {\n    class CustomRegenerator {}\n\n    const result = errors.resolveRegenerator(new CustomRegenerator());\n    expect(result).toBeInstanceOf(errors.Regenerator);\n  });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"should resolve to Errors.Regenerator when option is '%p'","suites":["Test Errors.resolveRegenerator"],"line":964,"code":"  it.each([-1, 0, 1, \"\", \"custom\", {}, null, undefined, [], true, false, () => {}])(\"should resolve to Errors.Regenerator when option is '%p'\", option => {\n    const result = errors.resolveRegenerator(option);\n    expect(result).toBeInstanceOf(errors.Regenerator);\n  });","file":"unit/errors.spec.js","skipped":false,"dir":"test"},{"name":"should return health status","suites":["Test health status methods"],"updatePoint":{"line":14,"column":33},"line":14,"code":"  it(\"should return health status\", () => {\n    let res = H.getHealthStatus(broker);\n    expect(res).toBeDefined();\n    expect(res.cpu).toBeDefined();\n    expect(res.cpu.load1).toBeDefined();\n    expect(res.cpu.load5).toBeDefined();\n    expect(res.cpu.load15).toBeDefined();\n    expect(res.cpu.cores).toBeDefined();\n    expect(res.cpu.utilization).toBeDefined();\n    expect(res.mem).toBeDefined();\n    expect(res.mem.free).toBeDefined();\n    expect(res.mem.total).toBeDefined();\n    expect(res.mem.percent).toBeDefined();\n    expect(res.os).toBeDefined();\n    expect(res.os.uptime).toBeDefined();\n    expect(res.os.type).toBeDefined();\n    expect(res.os.release).toBeDefined();\n    expect(res.os.hostname).toBeDefined();\n    expect(res.os.arch).toBeDefined();\n    expect(res.os.platform).toBeDefined();\n    expect(res.os.user).toBeDefined();\n    expect(res.net).toBeDefined();\n    expect(res.net.ip).toBeDefined();\n    expect(res.client).toBeDefined();\n    expect(res.process).toBeDefined();\n    expect(res.process.pid).toBeDefined();\n    expect(res.process.memory).toBeDefined();\n    expect(res.process.uptime).toBeDefined();\n    expect(res.process.argv).toBeDefined();\n    expect(res.time).toBeDefined();\n    expect(res.time.now).toBeDefined();\n    expect(res.time.iso).toBeDefined();\n    expect(res.time.utc).toBeDefined();\n  });","file":"unit/health.spec.js","skipped":false,"dir":"test"},{"name":"should call getNodeList","suites":["Test health status methods"],"updatePoint":{"line":23,"column":29},"line":23,"code":"  it(\"should call getNodeList\", () => {\n    broker.registry.getNodeList = jest.fn();\n    return broker.call(\"$node.list\").catch(protectReject).then(() => {\n      expect(broker.registry.getNodeList).toHaveBeenCalledTimes(1);\n    });\n  });","file":"unit/internals.spec.js","skipped":false,"dir":"test"},{"name":"should call getServiceList","suites":["Test health status methods"],"updatePoint":{"line":29,"column":32},"line":29,"code":"  it(\"should call getServiceList\", () => {\n    broker.registry.getServiceList = jest.fn();\n    let opts = {\n      skipInternal: true,\n      withActions: true\n    };\n    return broker.call(\"$node.services\", opts).catch(protectReject).then(res => {\n      expect(broker.registry.getServiceList).toHaveBeenCalledTimes(1);\n      expect(broker.registry.getServiceList).toHaveBeenCalledWith({\n        grouping: true,\n        onlyAvailable: false,\n        onlyLocal: false,\n        skipInternal: true,\n        withActions: true,\n        withEvents: false\n      });\n    });\n  });","file":"unit/internals.spec.js","skipped":false,"dir":"test"},{"name":"should call getActionList","suites":["Test health status methods"],"updatePoint":{"line":47,"column":31},"line":47,"code":"  it(\"should call getActionList\", () => {\n    broker.registry.getActionList = jest.fn();\n    let opts = {\n      skipInternal: true\n    };\n    return broker.call(\"$node.actions\", opts).catch(protectReject).then(() => {\n      expect(broker.registry.getActionList).toHaveBeenCalledTimes(1);\n      expect(broker.registry.getActionList).toHaveBeenCalledWith({\n        skipInternal: true,\n        onlyAvailable: false,\n        onlyLocal: false,\n        withEndpoints: false\n      });\n    });\n  });","file":"unit/internals.spec.js","skipped":false,"dir":"test"},{"name":"should call getEventList","suites":["Test health status methods"],"updatePoint":{"line":62,"column":30},"line":62,"code":"  it(\"should call getEventList\", () => {\n    broker.registry.getEventList = jest.fn();\n    let opts = {\n      skipInternal: true\n    };\n    return broker.call(\"$node.events\", opts).catch(protectReject).then(() => {\n      expect(broker.registry.getEventList).toHaveBeenCalledTimes(1);\n      expect(broker.registry.getEventList).toHaveBeenCalledWith({\n        skipInternal: true,\n        onlyAvailable: false,\n        onlyLocal: false,\n        withEndpoints: false\n      });\n    });\n  });","file":"unit/internals.spec.js","skipped":false,"dir":"test"},{"name":"should call getHealthStatus","suites":["Test health status methods"],"updatePoint":{"line":77,"column":33},"line":77,"code":"  it(\"should call getHealthStatus\", () => {\n    broker.getHealthStatus = jest.fn();\n    return broker.call(\"$node.health\").catch(protectReject).then(() => {\n      expect(broker.getHealthStatus).toHaveBeenCalledTimes(1);\n    });\n  });","file":"unit/internals.spec.js","skipped":false,"dir":"test"},{"name":"should return broker.options","suites":["Test health status methods"],"updatePoint":{"line":83,"column":34},"line":83,"code":"  it(\"should return broker.options\", () => {\n    return broker.call(\"$node.options\").catch(protectReject).then(res => {\n      const opts = _.cloneDeep(broker.options);\n\n      delete opts.circuitBreaker.check;\n      delete opts.retryPolicy.check;\n      expect(res).toEqual(opts);\n    });\n  });","file":"unit/internals.spec.js","skipped":false,"dir":"test"},{"name":"should call MetricsRegistry.list","suites":["Test health status methods"],"updatePoint":{"line":92,"column":38},"line":92,"code":"  it(\"should call MetricsRegistry.list\", () => {\n    broker.metrics.list = jest.fn();\n    let opts = {\n      includes: \"moleculer.**\",\n      excludes: [\"process.**\"],\n      types: \"info\"\n    };\n    return broker.call(\"$node.metrics\", opts).catch(protectReject).then(() => {\n      expect(broker.metrics.list).toHaveBeenCalledTimes(1);\n      expect(broker.metrics.list).toHaveBeenCalledWith({\n        includes: \"moleculer.**\",\n        excludes: [\"process.**\"],\n        types: \"info\"\n      });\n    });\n  });","file":"unit/internals.spec.js","skipped":false,"dir":"test"},{"name":"should throw error if metrics is disabled","suites":["Test health status methods"],"updatePoint":{"line":108,"column":47},"line":108,"code":"  it(\"should throw error if metrics is disabled\", () => {\n    broker.isMetricsEnabled = jest.fn(() => false);\n    broker.metrics.list = jest.fn();\n    let opts = {\n      includes: \"moleculer.**\",\n      excludes: [\"process.**\"],\n      types: \"info\"\n    };\n    return broker.call(\"$node.metrics\", opts).then(protectReject).catch(err => {\n      expect(err).toBeInstanceOf(MoleculerClientError);\n      expect(err.name).toBe(\"MoleculerClientError\");\n      expect(err.type).toBe(\"METRICS_DISABLED\");\n      expect(err.code).toBe(400);\n      expect(err.message).toBe(\"Metrics feature is disabled\");\n      expect(broker.metrics.list).toHaveBeenCalledTimes(0);\n    });\n  });","file":"unit/internals.spec.js","skipped":false,"dir":"test"},{"name":"should lock","suites":["Test lock"],"updatePoint":{"line":5,"column":17},"line":5,"code":"  it(\"should lock\", () => {\n    const lock = new Lock();\n    return lock.acquire(key).then(() => {\n      expect(lock.isLocked(key)).toBeTruthy();\n      return lock.release(key).then(() => {\n        expect(lock.isLocked(key)).toBeFalsy();\n      });\n    });\n  });","file":"unit/lock.spec.js","skipped":false,"dir":"test"},{"name":"2 locks","suites":["Test lock"],"updatePoint":{"line":14,"column":13},"line":14,"code":"  it(\"2 locks\", () => {\n    const lock = new Lock();\n    let released = 0;\n    return Promise.all([lock.acquire(key).then(() => {\n      expect(lock.isLocked(key)).toBeTruthy();\n      return new Promise(function (resolve) {\n        setTimeout(() => {\n          released = 1;\n          lock.release(key).then(() => {\n            expect(lock.isLocked(key)).toBeFalsy();\n            resolve();\n          });\n        }, 200);\n      });\n    }), lock.acquire(key).then(() => {\n      expect(lock.isLocked(key)).toBeTruthy();\n      expect(released).toBe(1);\n      return lock.release(key).then(() => {\n        expect(lock.isLocked(key)).toBeFalsy();\n      });\n    })]);\n  });","file":"unit/lock.spec.js","skipped":false,"dir":"test"},{"name":"should lock the concurrency call","suites":["Test lock"],"updatePoint":{"line":36,"column":38},"line":36,"code":"  it(\"should lock the concurrency call\", () => {\n    let taskes = [1, 2, 3, 4];\n    let globalValue = 0;\n    const lock = new Lock();\n    return Promise.all(taskes.map(task => {\n      return lock.acquire(key).then(() => {\n        globalValue = task;\n        return new Promise(function (resolve) {\n          setTimeout(() => {\n            expect(globalValue).toEqual(task);\n            lock.release(key).then(() => {\n              resolve();\n            });\n          }, Math.random() * 500);\n        });\n      });\n    }));\n  });","file":"unit/lock.spec.js","skipped":false,"dir":"test"},{"name":"test constructor","suites":["Test LoggerFactory"],"updatePoint":{"line":22,"column":22},"line":22,"code":"  it(\"test constructor\", () => {\n    let loggerFactory = new LoggerFactory(broker);\n    expect(loggerFactory.broker).toBe(broker);\n    expect(loggerFactory.appenders).toBeInstanceOf(Array);\n    expect(loggerFactory.cache).toBeInstanceOf(Map);\n  });","file":"unit/logger-factory.spec.js","skipped":false,"dir":"test"},{"name":"should not add appenders","suites":["Test LoggerFactory","Test init method"],"updatePoint":{"line":34,"column":32},"line":34,"code":"    it(\"should not add appenders\", () => {\n      loggerFactory.init(null);\n      expect(loggerFactory.appenders.length).toBe(0);\n      expect(Loggers.resolve).toHaveBeenCalledTimes(0);\n      loggerFactory.init(false);\n      expect(loggerFactory.appenders.length).toBe(0);\n      expect(Loggers.resolve).toHaveBeenCalledTimes(0);\n    });","file":"unit/logger-factory.spec.js","skipped":false,"dir":"test"},{"name":"should add default console appender","suites":["Test LoggerFactory","Test init method"],"updatePoint":{"line":42,"column":43},"line":42,"code":"    it(\"should add default console appender\", () => {\n      loggerFactory.init(true);\n      expect(loggerFactory.appenders.length).toBe(1);\n      expect(Loggers.resolve).toHaveBeenCalledTimes(1);\n      expect(Loggers.resolve).toHaveBeenCalledWith({\n        type: \"Console\",\n        options: {\n          level: \"info\"\n        }\n      });\n      expect(mockInit).toHaveBeenCalledTimes(1);\n    });","file":"unit/logger-factory.spec.js","skipped":false,"dir":"test"},{"name":"should add default console appender","suites":["Test LoggerFactory","Test init method"],"updatePoint":{"line":54,"column":43},"line":54,"code":"    it(\"should add default console appender\", () => {\n      broker.options.logLevel = \"debug\";\n      Loggers.resolve.mockClear();\n      mockInit.mockClear();\n      loggerFactory.init(console);\n      expect(loggerFactory.appenders.length).toBe(1);\n      expect(Loggers.resolve).toHaveBeenCalledTimes(1);\n      expect(Loggers.resolve).toHaveBeenCalledWith({\n        type: \"Console\",\n        options: {\n          level: \"debug\"\n        }\n      });\n      expect(mockInit).toHaveBeenCalledTimes(1);\n    });","file":"unit/logger-factory.spec.js","skipped":false,"dir":"test"},{"name":"should add an appender by object","suites":["Test LoggerFactory","Test init method"],"updatePoint":{"line":69,"column":40},"line":69,"code":"    it(\"should add an appender by object\", () => {\n      broker.options.logLevel = \"debug\";\n      Loggers.resolve.mockClear();\n      mockInit.mockClear();\n      loggerFactory.init({\n        type: \"Pino\",\n        options: {\n          pino: {\n            a: 5\n          }\n        }\n      });\n      expect(loggerFactory.appenders.length).toBe(1);\n      expect(Loggers.resolve).toHaveBeenCalledTimes(1);\n      expect(Loggers.resolve).toHaveBeenCalledWith({\n        type: \"Pino\",\n        options: {\n          level: \"debug\",\n          pino: {\n            a: 5\n          }\n        }\n      });\n      expect(mockInit).toHaveBeenCalledTimes(1);\n      expect(mockInit).toHaveBeenCalledWith(loggerFactory);\n    });","file":"unit/logger-factory.spec.js","skipped":false,"dir":"test"},{"name":"should add an appender by string","suites":["Test LoggerFactory","Test init method"],"updatePoint":{"line":95,"column":40},"line":95,"code":"    it(\"should add an appender by string\", () => {\n      broker.options.logLevel = \"debug\";\n      Loggers.resolve.mockClear();\n      mockInit.mockClear();\n      loggerFactory.init(\"Pino\");\n      expect(loggerFactory.appenders.length).toBe(1);\n      expect(Loggers.resolve).toHaveBeenCalledTimes(1);\n      expect(Loggers.resolve).toHaveBeenCalledWith({\n        type: \"Pino\",\n        options: {\n          level: \"debug\"\n        }\n      });\n      expect(mockInit).toHaveBeenCalledTimes(1);\n      expect(mockInit).toHaveBeenCalledWith(loggerFactory);\n    });","file":"unit/logger-factory.spec.js","skipped":false,"dir":"test"},{"name":"should add multiple appenders","suites":["Test LoggerFactory","Test init method"],"updatePoint":{"line":111,"column":37},"line":111,"code":"    it(\"should add multiple appenders\", () => {\n      broker.options.logLevel = \"warn\";\n      Loggers.resolve.mockClear();\n      mockInit.mockClear();\n      loggerFactory.init([{\n        type: \"Console\",\n        options: {\n          moduleColors: true\n        }\n      }, null, {\n        type: \"File\",\n        options: {\n          folder: \"./my-logs\"\n        }\n      }]);\n      expect(loggerFactory.appenders.length).toBe(2);\n      expect(Loggers.resolve).toHaveBeenCalledTimes(2);\n      expect(Loggers.resolve).toHaveBeenNthCalledWith(1, {\n        type: \"Console\",\n        options: {\n          level: \"warn\",\n          moduleColors: true\n        }\n      });\n      expect(Loggers.resolve).toHaveBeenNthCalledWith(2, {\n        type: \"File\",\n        options: {\n          level: \"warn\",\n          folder: \"./my-logs\"\n        }\n      });\n      expect(mockInit).toHaveBeenCalledTimes(2);\n    });","file":"unit/logger-factory.spec.js","skipped":false,"dir":"test"},{"name":"should add multiple appenders by strings","suites":["Test LoggerFactory","Test init method"],"updatePoint":{"line":144,"column":48},"line":144,"code":"    it(\"should add multiple appenders by strings\", () => {\n      broker.options.logLevel = \"info\";\n      Loggers.resolve.mockClear();\n      mockInit.mockClear();\n      loggerFactory.init([\"Console\", \"File\"]);\n      expect(loggerFactory.appenders.length).toBe(2);\n      expect(Loggers.resolve).toHaveBeenCalledTimes(2);\n      expect(Loggers.resolve).toHaveBeenNthCalledWith(1, {\n        type: \"Console\",\n        options: {\n          level: \"info\"\n        }\n      });\n      expect(Loggers.resolve).toHaveBeenNthCalledWith(2, {\n        type: \"File\",\n        options: {\n          level: \"info\"\n        }\n      });\n      expect(mockInit).toHaveBeenCalledTimes(2);\n    });","file":"unit/logger-factory.spec.js","skipped":false,"dir":"test"},{"name":"should add custom Appender","suites":["Test LoggerFactory","Test init method"],"updatePoint":{"line":165,"column":34},"line":165,"code":"    it(\"should add custom Appender\", () => {\n      Loggers.resolve.mockClear();\n      mockInit.mockClear();\n      const myAppender = new MyCustomAppender();\n      loggerFactory.init(myAppender);\n      expect(loggerFactory.appenders.length).toBe(1);\n      expect(Loggers.resolve).toHaveBeenCalledTimes(1);\n      expect(Loggers.resolve).toHaveBeenNthCalledWith(1, myAppender);\n      expect(mockInit).toHaveBeenCalledTimes(1);\n    });","file":"unit/logger-factory.spec.js","skipped":false,"dir":"test"},{"name":"should add multiple appenders","suites":["Test LoggerFactory","Test stop method"],"updatePoint":{"line":178,"column":37},"line":178,"code":"    it(\"should add multiple appenders\", async () => {\n      loggerFactory.init([{\n        type: \"Console\",\n        options: {\n          moduleColors: true\n        }\n      }, {\n        type: \"File\",\n        options: {\n          folder: \"./my-logs\"\n        }\n      }]);\n      expect(loggerFactory.appenders.length).toBe(2);\n      const appenders = Array.from(loggerFactory.appenders);\n      appenders[0].stop = jest.fn();\n      appenders[1].stop = jest.fn();\n      await loggerFactory.stop();\n      expect(appenders[0].stop).toHaveBeenCalledTimes(1);\n      expect(appenders[1].stop).toHaveBeenCalledTimes(1);\n    });","file":"unit/logger-factory.spec.js","skipped":false,"dir":"test"},{"name":"should return a logger object","suites":["Test LoggerFactory","Test getLogger method"],"updatePoint":{"line":210,"column":37},"line":210,"code":"    it(\"should return a logger object\", () => {\n      expect(loggerFactory.cache.size).toBe(0);\n      logger = loggerFactory.getLogger({\n        mod: \"my-service\"\n      });\n      expect(logger).toEqual(Object.assign({\n        appenders: []\n      }, loggerInterface));\n      expect(loggerFactory.cache.size).toBe(1);\n    });","file":"unit/logger-factory.spec.js","skipped":false,"dir":"test"},{"name":"should return the cached logger","suites":["Test LoggerFactory","Test getLogger method"],"updatePoint":{"line":220,"column":39},"line":220,"code":"    it(\"should return the cached logger\", () => {\n      const logger2 = loggerFactory.getLogger({\n        mod: \"my-service\"\n      });\n      expect(logger2).toBe(logger);\n      expect(loggerFactory.cache.size).toBe(1);\n    });","file":"unit/logger-factory.spec.js","skipped":false,"dir":"test"},{"name":"should not return the cached logger","suites":["Test LoggerFactory","Test getLogger method"],"updatePoint":{"line":227,"column":43},"line":227,"code":"    it(\"should not return the cached logger\", () => {\n      const logger3 = loggerFactory.getLogger({\n        mod: \"your-service\"\n      });\n      expect(logger3).not.toBe(logger);\n      expect(loggerFactory.cache.size).toBe(2);\n      const logger4 = loggerFactory.getLogger({\n        mod: \"my-service\",\n        ns: \"other\"\n      });\n      expect(logger4).not.toBe(logger);\n      expect(logger4).not.toBe(logger3);\n      expect(loggerFactory.cache.size).toBe(3);\n    });","file":"unit/logger-factory.spec.js","skipped":false,"dir":"test"},{"name":"should call log handlers middlewares","suites":["Test LoggerFactory","Test getLogger method"],"updatePoint":{"line":241,"column":44},"line":241,"code":"    it(\"should call log handlers middlewares\", () => {\n      broker.middlewares.add({\n        newLogEntry: jest.fn()\n      });\n      jest.spyOn(broker.middlewares, \"callSyncHandlers\");\n      const handler1 = jest.fn();\n      const handler2 = jest.fn();\n      loggerFactory.appenders = [{\n        getLogHandler: jest.fn(bindings => handler1)\n      }, {\n        getLogHandler: jest.fn(bindings => null)\n      }, {\n        getLogHandler: jest.fn(bindings => handler2)\n      }];\n      const bindings = {\n        mod: \"posts\",\n        nodeID: \"node-1\"\n      };\n      const logger = loggerFactory.getLogger(bindings);\n      logger.info(\"message\", {\n        a: 5\n      });\n      expect(broker.middlewares.callSyncHandlers).toHaveBeenCalledTimes(1);\n      expect(broker.middlewares.callSyncHandlers).toHaveBeenCalledWith(\"newLogEntry\", [\"info\", [\"message\", {\n        a: 5\n      }], bindings], {});\n      expect(handler1).toHaveBeenCalledTimes(1);\n      expect(handler1).toHaveBeenCalledWith(\"info\", [\"message\", {\n        a: 5\n      }]);\n      expect(handler2).toHaveBeenCalledTimes(1);\n      expect(handler2).toHaveBeenCalledWith(\"info\", [\"message\", {\n        a: 5\n      }]);\n    });","file":"unit/logger-factory.spec.js","skipped":false,"dir":"test"},{"name":"should call log handlers middlewares without appenders","suites":["Test LoggerFactory","Test getLogger method"],"updatePoint":{"line":276,"column":62},"line":276,"code":"    it(\"should call log handlers middlewares without appenders\", () => {\n      const newLogEntry = jest.fn();\n      broker.middlewares.add({\n        newLogEntry\n      });\n      loggerFactory.appenders = [];\n      const bindings = {\n        mod: \"posts\",\n        nodeID: \"node-1\"\n      };\n      const logger = loggerFactory.getLogger(bindings);\n      logger.info(\"message\", {\n        a: 5\n      });\n      expect(newLogEntry).toHaveBeenCalledTimes(1);\n      expect(newLogEntry).toHaveBeenCalledWith(\"info\", [\"message\", {\n        a: 5\n      }], bindings);\n    });","file":"unit/logger-factory.spec.js","skipped":false,"dir":"test"},{"name":"should create a key from bindings","suites":["Test LoggerFactory","Test getBindingsKey method"],"updatePoint":{"line":298,"column":41},"line":298,"code":"    it(\"should create a key from bindings\", () => {\n      expect(loggerFactory.getBindingsKey()).toBe(\"\");\n      expect(loggerFactory.getBindingsKey({})).toBe(\"||\");\n      expect(loggerFactory.getBindingsKey({\n        mod: \"service\"\n      })).toBe(\"||service\");\n      expect(loggerFactory.getBindingsKey({\n        mod: \"service\",\n        ns: \"namespace\",\n        nodeID: \"node-123\"\n      })).toBe(\"node-123|namespace|service\");\n    });","file":"unit/logger-factory.spec.js","skipped":false,"dir":"test"},{"name":"should create with default options","suites":["Test Bunyan logger class","Test Constructor"],"updatePoint":{"line":14,"column":42},"line":14,"code":"    it(\"should create with default options\", () => {\n      const logger = new BaseLogger();\n      expect(logger.opts).toEqual({\n        level: \"info\",\n        createLogger: null\n      });\n    });","file":"unit/loggers/base.spec.js","skipped":false,"dir":"test"},{"name":"should create with custom options","suites":["Test Bunyan logger class","Test Constructor"],"updatePoint":{"line":21,"column":41},"line":21,"code":"    it(\"should create with custom options\", () => {\n      const logger = new BaseLogger({\n        a: 5,\n        createLogger: jest.fn(),\n        level: \"debug\"\n      });\n      expect(logger.opts).toEqual({\n        a: 5,\n        createLogger: expect.any(Function),\n        level: \"debug\"\n      });\n    });","file":"unit/loggers/base.spec.js","skipped":false,"dir":"test"},{"name":"should create a default logger","suites":["Test Bunyan logger class","Test init method"],"updatePoint":{"line":36,"column":38},"line":36,"code":"    it(\"should create a default logger\", () => {\n      const logger = new BaseLogger();\n      logger.init(loggerFactory);\n      expect(logger.loggerFactory).toBe(loggerFactory);\n      expect(logger.broker).toBe(broker);\n    });","file":"unit/loggers/base.spec.js","skipped":false,"dir":"test"},{"name":"should create a default logger","suites":["Test Bunyan logger class","Test stop method"],"updatePoint":{"line":45,"column":38},"line":45,"code":"    it(\"should create a default logger\", async () => {\n      const logger = new BaseLogger();\n      logger.init(loggerFactory);\n      await logger.stop();\n    });","file":"unit/loggers/base.spec.js","skipped":false,"dir":"test"},{"name":"should find the correct log level if logLevel is string","suites":["Test Bunyan logger class","Test getLogLevel method"],"updatePoint":{"line":52,"column":63},"line":52,"code":"    it(\"should find the correct log level if logLevel is string\", () => {\n      const logger = new BaseLogger({\n        level: \"info\"\n      });\n      expect(logger.getLogLevel()).toBe(\"info\");\n      expect(logger.getLogLevel(\"my-module\")).toBe(\"info\");\n    });","file":"unit/loggers/base.spec.js","skipped":false,"dir":"test"},{"name":"should find the correct log level if logLevel is object","suites":["Test Bunyan logger class","Test getLogLevel method"],"updatePoint":{"line":59,"column":63},"line":59,"code":"    it(\"should find the correct log level if logLevel is object\", () => {\n      const logger = new BaseLogger({\n        level: {\n          \"MY-*\": \"warn\",\n          CACHER: false,\n          \"**\": \"trace\",\n          BROKER: \"debug\"\n        }\n      });\n      expect(logger.getLogLevel()).toBe(\"trace\");\n      expect(logger.getLogLevel(\"my-module\")).toBe(\"warn\");\n      expect(logger.getLogLevel(\"MY-MODULE\")).toBe(\"warn\");\n      expect(logger.getLogLevel(\"MY.SERVICE\")).toBe(\"trace\");\n      expect(logger.getLogLevel(\"broker\")).toBe(\"debug\");\n      expect(logger.getLogLevel(\"cacher\")).toBe(false);\n      expect(logger.getLogLevel(\"transporter\")).toBe(\"trace\");\n    });","file":"unit/loggers/base.spec.js","skipped":false,"dir":"test"},{"name":"should return null","suites":["Test Bunyan logger class","Test getLogHandler abstract method"],"updatePoint":{"line":78,"column":26},"line":78,"code":"    it(\"should return null\", () => {\n      const logger = new BaseLogger({\n        level: \"info\"\n      });\n      expect(logger.getLogHandler()).toBeNull();\n    });","file":"unit/loggers/base.spec.js","skipped":false,"dir":"test"},{"name":"should contain log levels","suites":["Test Bunyan logger class","Test LEVELS static property"],"updatePoint":{"line":86,"column":33},"line":86,"code":"    it(\"should contain log levels\", () => {\n      expect(BaseLogger.LEVELS).toEqual([\"fatal\", \"error\", \"warn\", \"info\", \"debug\", \"trace\"]);\n    });","file":"unit/loggers/base.spec.js","skipped":false,"dir":"test"},{"name":"should create with default options","suites":["Test Bunyan logger class","Test Constructor"],"updatePoint":{"line":26,"column":42},"line":26,"code":"    it(\"should create with default options\", () => {\n      const logger = new BunyanLogger();\n      expect(logger.opts).toEqual({\n        bunyan: {\n          name: \"moleculer\"\n        },\n        createLogger: null,\n        level: \"info\"\n      });\n    });","file":"unit/loggers/bunyan.spec.js","skipped":false,"dir":"test"},{"name":"should create with custom options","suites":["Test Bunyan logger class","Test Constructor"],"updatePoint":{"line":36,"column":41},"line":36,"code":"    it(\"should create with custom options\", () => {\n      const logger = new BunyanLogger({\n        bunyan: {\n          name: \"my-app\"\n        },\n        createLogger: jest.fn(),\n        level: \"debug\"\n      });\n      expect(logger.opts).toEqual({\n        bunyan: {\n          name: \"my-app\"\n        },\n        createLogger: expect.any(Function),\n        level: \"debug\"\n      });\n    });","file":"unit/loggers/bunyan.spec.js","skipped":false,"dir":"test"},{"name":"should create a default logger","suites":["Test Bunyan logger class","Test init method"],"updatePoint":{"line":55,"column":38},"line":55,"code":"    it(\"should create a default logger\", () => {\n      const logger = new BunyanLogger();\n      logger.init(loggerFactory);\n      expect(logger.bunyan).toBe(fakeLogger);\n      expect(Bunyan.createLogger).toHaveBeenCalledTimes(1);\n      expect(Bunyan.createLogger).toHaveBeenCalledWith({\n        name: \"moleculer\"\n      });\n    });","file":"unit/loggers/bunyan.spec.js","skipped":false,"dir":"test"},{"name":"should create a default logger with custom options","suites":["Test Bunyan logger class","Test init method"],"updatePoint":{"line":64,"column":58},"line":64,"code":"    it(\"should create a default logger with custom options\", () => {\n      Bunyan.createLogger.mockClear();\n      const logger = new BunyanLogger({\n        a: 5,\n        bunyan: {\n          name: \"my-app\"\n        }\n      });\n      logger.init(loggerFactory);\n      expect(logger.bunyan).toBe(fakeLogger);\n      expect(Bunyan.createLogger).toHaveBeenCalledTimes(1);\n      expect(Bunyan.createLogger).toHaveBeenCalledWith({\n        name: \"my-app\"\n      });\n    });","file":"unit/loggers/bunyan.spec.js","skipped":false,"dir":"test"},{"name":"should create a child logger","suites":["Test Bunyan logger class","Test getLogHandler method"],"updatePoint":{"line":82,"column":36},"line":82,"code":"    it(\"should create a child logger\", () => {\n      const logger = new BunyanLogger();\n      logger.init(loggerFactory);\n      const logHandler = logger.getLogHandler({\n        mod: \"my-service\",\n        nodeID: \"node-1\"\n      });\n      expect(logHandler).toBeInstanceOf(Function);\n      expect(logger.bunyan.child).toHaveBeenCalledTimes(1);\n      expect(logger.bunyan.child).toHaveBeenCalledWith({\n        level: \"info\",\n        mod: \"my-service\",\n        nodeID: \"node-1\"\n      });\n      logHandler(\"warn\", [\"message\", {\n        a: 5\n      }]);\n      expect(childFakeLogger.warn).toHaveBeenCalledTimes(1);\n      expect(childFakeLogger.warn).toHaveBeenCalledWith(\"message\", {\n        a: 5\n      });\n    });","file":"unit/loggers/bunyan.spec.js","skipped":false,"dir":"test"},{"name":"should call the createLogger function","suites":["Test Bunyan logger class","Test getLogHandler method"],"updatePoint":{"line":104,"column":45},"line":104,"code":"    it(\"should call the createLogger function\", () => {\n      fakeLogger.child.mockClear();\n      childFakeLogger.warn.mockClear();\n      const mockFn = jest.fn(() => childFakeLogger);\n      const logger = new BunyanLogger({\n        createLogger: mockFn\n      });\n      logger.init(loggerFactory);\n      const logHandler = logger.getLogHandler({\n        mod: \"my-service\",\n        nodeID: \"node-1\"\n      });\n      expect(logHandler).toBeInstanceOf(Function);\n      expect(logger.bunyan.child).toHaveBeenCalledTimes(0);\n      expect(mockFn).toHaveBeenCalledTimes(1);\n      expect(mockFn).toHaveBeenCalledWith(\"info\", {\n        mod: \"my-service\",\n        nodeID: \"node-1\"\n      });\n      logHandler(\"warn\", [\"message\", {\n        a: 5\n      }]);\n      expect(childFakeLogger.warn).toHaveBeenCalledTimes(1);\n      expect(childFakeLogger.warn).toHaveBeenCalledWith(\"message\", {\n        a: 5\n      });\n    });","file":"unit/loggers/bunyan.spec.js","skipped":false,"dir":"test"},{"name":"should not create child logger if level is null","suites":["Test Bunyan logger class","Test getLogHandler method"],"updatePoint":{"line":131,"column":55},"line":131,"code":"    it(\"should not create child logger if level is null\", () => {\n      fakeLogger.child.mockClear();\n      childFakeLogger.warn.mockClear();\n      const logger = new BunyanLogger();\n      logger.init(loggerFactory);\n      logger.getLogLevel = jest.fn();\n      const logHandler = logger.getLogHandler({\n        mod: \"my-service\",\n        nodeID: \"node-1\"\n      });\n      expect(logHandler).toBeNull();\n      expect(logger.getLogLevel).toHaveBeenCalledTimes(1);\n      expect(logger.getLogLevel).toHaveBeenCalledWith(\"my-service\");\n    });","file":"unit/loggers/bunyan.spec.js","skipped":false,"dir":"test"},{"name":"should not create child logger if bindings is null","suites":["Test Bunyan logger class","Test getLogHandler method"],"updatePoint":{"line":145,"column":58},"line":145,"code":"    it(\"should not create child logger if bindings is null\", () => {\n      fakeLogger.child.mockClear();\n      childFakeLogger.warn.mockClear();\n      const logger = new BunyanLogger();\n      logger.init(loggerFactory);\n      logger.getLogLevel = jest.fn();\n      const logHandler = logger.getLogHandler();\n      expect(logHandler).toBeNull();\n      expect(logger.getLogLevel).toHaveBeenCalledTimes(0);\n    });","file":"unit/loggers/bunyan.spec.js","skipped":false,"dir":"test"},{"name":"should create with default options","suites":["Test Console logger class","Test Constructor"],"updatePoint":{"line":21,"column":42},"line":21,"code":"    it(\"should create with default options\", () => {\n      const logger = new ConsoleLogger();\n      expect(logger.opts).toEqual({\n        createLogger: null,\n        level: \"info\",\n        colors: true,\n        moduleColors: false,\n        formatter: \"full\",\n        objectPrinter: null,\n        autoPadding: false\n      });\n      expect(logger.maxPrefixLength).toBe(0);\n    });","file":"unit/loggers/console.spec.js","skipped":false,"dir":"test"},{"name":"should create with custom options","suites":["Test Console logger class","Test Constructor"],"updatePoint":{"line":34,"column":41},"line":34,"code":"    it(\"should create with custom options\", () => {\n      const logger = new ConsoleLogger({\n        createLogger: jest.fn(),\n        level: \"debug\",\n        colors: false,\n        formatter: \"simple\"\n      });\n      expect(logger.opts).toEqual({\n        createLogger: expect.any(Function),\n        level: \"debug\",\n        colors: false,\n        moduleColors: false,\n        formatter: \"simple\",\n        objectPrinter: null,\n        autoPadding: false\n      });\n    });","file":"unit/loggers/console.spec.js","skipped":false,"dir":"test"},{"name":"should create a child logger","suites":["Test Console logger class","Test getLogHandler method"],"updatePoint":{"line":57,"column":36},"line":57,"code":"    it(\"should create a child logger\", () => {\n      const logger = new ConsoleLogger({\n        level: \"trace\"\n      });\n      logger.init(loggerFactory);\n      logger.getFormatter = jest.fn(() => (type, args) => args);\n      const logHandler = logger.getLogHandler({\n        mod: \"my-service\",\n        nodeID: \"node-1\"\n      });\n      expect(logHandler).toBeInstanceOf(Function);\n      expect(logger.getFormatter).toHaveBeenCalledTimes(1);\n      expect(logger.getFormatter).toHaveBeenCalledWith({\n        mod: \"my-service\",\n        nodeID: \"node-1\"\n      });\n      logHandler(\"fatal\", [\"message\", {\n        a: 5\n      }]);\n      expect(console.error).toHaveBeenCalledTimes(1);\n      expect(console.error).toHaveBeenCalledWith(\"message\", {\n        a: 5\n      });\n      console.error.mockClear();\n      logHandler(\"error\", [\"message\", {\n        a: 5\n      }]);\n      expect(console.error).toHaveBeenCalledTimes(1);\n      expect(console.error).toHaveBeenCalledWith(\"message\", {\n        a: 5\n      });\n      console.warn.mockClear();\n      logHandler(\"warn\", [\"message\", {\n        a: 5\n      }]);\n      expect(console.warn).toHaveBeenCalledTimes(1);\n      expect(console.warn).toHaveBeenCalledWith(\"message\", {\n        a: 5\n      });\n      console.log.mockClear();\n      logHandler(\"info\", [\"message\", {\n        a: 5\n      }]);\n      expect(console.log).toHaveBeenCalledTimes(1);\n      expect(console.log).toHaveBeenCalledWith(\"message\", {\n        a: 5\n      });\n      console.log.mockClear();\n      logHandler(\"debug\", [\"message\", {\n        a: 5\n      }]);\n      expect(console.log).toHaveBeenCalledTimes(1);\n      expect(console.log).toHaveBeenCalledWith(\"message\", {\n        a: 5\n      });\n      console.log.mockClear();\n      logHandler(\"trace\", [\"message\", {\n        a: 5\n      }]);\n      expect(console.log).toHaveBeenCalledTimes(1);\n      expect(console.log).toHaveBeenCalledWith(\"message\", {\n        a: 5\n      });\n    });","file":"unit/loggers/console.spec.js","skipped":false,"dir":"test"},{"name":"should not call console if level is lower","suites":["Test Console logger class","Test getLogHandler method"],"updatePoint":{"line":121,"column":49},"line":121,"code":"    it(\"should not call console if level is lower\", () => {\n      const logger = new ConsoleLogger({\n        level: \"info\"\n      });\n      logger.init(loggerFactory);\n      logger.getFormatter = jest.fn(() => (type, args) => args);\n      const logHandler = logger.getLogHandler({\n        mod: \"my-service\",\n        nodeID: \"node-1\"\n      });\n      expect(logHandler).toBeInstanceOf(Function);\n      expect(logger.getFormatter).toHaveBeenCalledTimes(1);\n      expect(logger.getFormatter).toHaveBeenCalledWith({\n        mod: \"my-service\",\n        nodeID: \"node-1\"\n      });\n      console.error.mockClear();\n      logHandler(\"fatal\", [\"message\", {\n        a: 5\n      }]);\n      expect(console.error).toHaveBeenCalledTimes(1);\n      expect(console.error).toHaveBeenCalledWith(\"message\", {\n        a: 5\n      });\n      console.error.mockClear();\n      logHandler(\"error\", [\"message\", {\n        a: 5\n      }]);\n      expect(console.error).toHaveBeenCalledTimes(1);\n      expect(console.error).toHaveBeenCalledWith(\"message\", {\n        a: 5\n      });\n      console.warn.mockClear();\n      logHandler(\"warn\", [\"message\", {\n        a: 5\n      }]);\n      expect(console.warn).toHaveBeenCalledTimes(1);\n      expect(console.warn).toHaveBeenCalledWith(\"message\", {\n        a: 5\n      });\n      console.log.mockClear();\n      logHandler(\"info\", [\"message\", {\n        a: 5\n      }]);\n      expect(console.log).toHaveBeenCalledTimes(1);\n      expect(console.log).toHaveBeenCalledWith(\"message\", {\n        a: 5\n      });\n      console.log.mockClear();\n      logHandler(\"debug\", [\"message\", {\n        a: 5\n      }]);\n      expect(console.log).toHaveBeenCalledTimes(0);\n      console.log.mockClear();\n      logHandler(\"trace\", [\"message\", {\n        a: 5\n      }]);\n      expect(console.log).toHaveBeenCalledTimes(0);\n    });","file":"unit/loggers/console.spec.js","skipped":false,"dir":"test"},{"name":"should not create child logger if level is null","suites":["Test Console logger class","Test getLogHandler method"],"updatePoint":{"line":180,"column":55},"line":180,"code":"    it(\"should not create child logger if level is null\", () => {\n      const logger = new ConsoleLogger();\n      logger.init(loggerFactory);\n      logger.getLogLevel = jest.fn();\n      const logHandler = logger.getLogHandler({\n        mod: \"my-service\",\n        nodeID: \"node-1\"\n      });\n      expect(logHandler).toBeNull();\n      expect(logger.getLogLevel).toHaveBeenCalledTimes(1);\n      expect(logger.getLogLevel).toHaveBeenCalledWith(\"my-service\");\n    });","file":"unit/loggers/console.spec.js","skipped":false,"dir":"test"},{"name":"should not create child logger if bindings is null","suites":["Test Console logger class","Test getLogHandler method"],"updatePoint":{"line":192,"column":58},"line":192,"code":"    it(\"should not create child logger if bindings is null\", () => {\n      const logger = new ConsoleLogger();\n      logger.init(loggerFactory);\n      logger.getLogLevel = jest.fn();\n      const logHandler = logger.getLogHandler();\n      expect(logHandler).toBeNull();\n      expect(logger.getLogLevel).toHaveBeenCalledTimes(0);\n    });","file":"unit/loggers/console.spec.js","skipped":false,"dir":"test"},{"name":"should create with default options","suites":["Test Datadog logger class","Test Constructor"],"updatePoint":{"line":30,"column":42},"line":30,"code":"    it(\"should create with default options\", () => {\n      const logger = new DatadogLogger();\n      expect(logger.opts).toEqual({\n        createLogger: null,\n        level: \"info\",\n        url: \"https://http-intake.logs.datadoghq.com/v1/input/\",\n        apiKey: \"datadog-api-key\",\n        ddSource: \"moleculer\",\n        env: undefined,\n        hostname: os.hostname(),\n        objectPrinter: null,\n        interval: 10 * 1000\n      });\n      expect(logger.queue).toEqual([]);\n      expect(logger.timer).toBeNull();\n    });","file":"unit/loggers/datadog.spec.js","skipped":false,"dir":"test"},{"name":"should create with custom options","suites":["Test Datadog logger class","Test Constructor"],"updatePoint":{"line":46,"column":41},"line":46,"code":"    it(\"should create with custom options\", () => {\n      const logger = new DatadogLogger({\n        createLogger: jest.fn(),\n        level: \"debug\",\n        ddSource: \"my-app\",\n        env: \"production\",\n        hostname: \"my-host\",\n        objectPrinter: jest.fn(),\n        interval: 30 * 1000\n      });\n      expect(logger.opts).toEqual({\n        createLogger: expect.any(Function),\n        level: \"debug\",\n        url: \"https://http-intake.logs.datadoghq.com/v1/input/\",\n        apiKey: \"datadog-api-key\",\n        ddSource: \"my-app\",\n        env: \"production\",\n        hostname: \"my-host\",\n        objectPrinter: expect.any(Function),\n        interval: 30 * 1000\n      });\n    });","file":"unit/loggers/datadog.spec.js","skipped":false,"dir":"test"},{"name":"should throw error if apiKey is not defined","suites":["Test Datadog logger class","Test Constructor"],"updatePoint":{"line":68,"column":51},"line":68,"code":"    it(\"should throw error if apiKey is not defined\", () => {\n      expect(() => new DatadogLogger({\n        apiKey: \"\"\n      })).toThrow(\"Datadog API key is missing. Set DATADOG_API_KEY environment variable.\");\n    });","file":"unit/loggers/datadog.spec.js","skipped":false,"dir":"test"},{"name":"should init the logger","suites":["Test Datadog logger class","Test init method"],"updatePoint":{"line":80,"column":30},"line":80,"code":"    it(\"should init the logger\", () => {\n      logger = new DatadogLogger();\n      logger.init(loggerFactory);\n      expect(logger.objectPrinter).toBeDefined();\n      expect(logger.timer).toBeDefined();\n    });","file":"unit/loggers/datadog.spec.js","skipped":false,"dir":"test"},{"name":"should init the logger with custom options","suites":["Test Datadog logger class","Test init method"],"updatePoint":{"line":86,"column":50},"line":86,"code":"    it(\"should init the logger with custom options\", () => {\n      logger = new DatadogLogger({\n        interval: 0\n      });\n      logger.init(loggerFactory);\n      expect(logger.timer).toBeNull();\n    });","file":"unit/loggers/datadog.spec.js","skipped":false,"dir":"test"},{"name":"should use custom objectPrinter","suites":["Test Datadog logger class","Test init method"],"updatePoint":{"line":93,"column":39},"line":93,"code":"    it(\"should use custom objectPrinter\", () => {\n      const objectPrinter = jest.fn();\n      logger = new DatadogLogger({\n        objectPrinter\n      });\n      logger.init(loggerFactory);\n      expect(logger.objectPrinter).toBe(objectPrinter);\n    });","file":"unit/loggers/datadog.spec.js","skipped":false,"dir":"test"},{"name":"should create a default logger","suites":["Test Datadog logger class","Test stop method"],"updatePoint":{"line":104,"column":38},"line":104,"code":"    it(\"should create a default logger\", async () => {\n      const logger = new DatadogLogger();\n      logger.init(loggerFactory);\n      expect(logger.timer).toBeDefined();\n      logger.flush = jest.fn();\n      await logger.stop();\n      expect(logger.flush).toHaveBeenCalledTimes(1);\n      expect(logger.timer).toBeNull();\n    });","file":"unit/loggers/datadog.spec.js","skipped":false,"dir":"test"},{"name":"should return tags from row","suites":["Test Datadog logger class","Test getTags method"],"updatePoint":{"line":120,"column":35},"line":120,"code":"    it(\"should return tags from row\", () => {\n      logger = new DatadogLogger({\n        env: \"production\"\n      });\n      logger.init(loggerFactory);\n      expect(logger.getTags({\n        bindings: {\n          nodeID: \"my-node\",\n          ns: \"namespace\",\n          svc: \"users\"\n        }\n      })).toBe(\"env:production,nodeID:my-node,namespace:namespace,service:users\");\n    });","file":"unit/loggers/datadog.spec.js","skipped":false,"dir":"test"},{"name":"should create a child logger","suites":["Test Datadog logger class","Test getLogHandler method"],"updatePoint":{"line":147,"column":36},"line":147,"code":"    it(\"should create a child logger\", () => {\n      logger = new DatadogLogger({\n        level: \"trace\"\n      });\n      logger.init(loggerFactory);\n      logger.flush = jest.fn();\n      const logHandler = logger.getLogHandler({\n        mod: \"my-service\",\n        nodeID: \"node-1\"\n      });\n      expect(logHandler).toBeInstanceOf(Function);\n      logHandler(\"fatal\", [\"message\", {\n        a: 5\n      }]);\n      logHandler(\"error\", [\"message\", {\n        a: 5\n      }]);\n      logHandler(\"warn\", [\"message\", {\n        a: 5\n      }]);\n      logHandler(\"info\", [\"message\", {\n        a: 5\n      }]);\n      logHandler(\"debug\", [\"message\", {\n        a: 5\n      }]);\n      logHandler(\"trace\", [\"message\", {\n        a: 5\n      }]);\n      expect(logger.queue).toEqual([{\n        level: \"fatal\",\n        msg: \"message { a: 5 }\",\n        bindings: {\n          mod: \"my-service\",\n          nodeID: \"node-1\"\n        },\n        ts: 0\n      }, {\n        level: \"error\",\n        msg: \"message { a: 5 }\",\n        bindings: {\n          mod: \"my-service\",\n          nodeID: \"node-1\"\n        },\n        ts: 0\n      }, {\n        level: \"warn\",\n        msg: \"message { a: 5 }\",\n        bindings: {\n          mod: \"my-service\",\n          nodeID: \"node-1\"\n        },\n        ts: 0\n      }, {\n        level: \"info\",\n        msg: \"message { a: 5 }\",\n        bindings: {\n          mod: \"my-service\",\n          nodeID: \"node-1\"\n        },\n        ts: 0\n      }, {\n        level: \"debug\",\n        msg: \"message { a: 5 }\",\n        bindings: {\n          mod: \"my-service\",\n          nodeID: \"node-1\"\n        },\n        ts: 0\n      }, {\n        level: \"trace\",\n        msg: \"message { a: 5 }\",\n        bindings: {\n          mod: \"my-service\",\n          nodeID: \"node-1\"\n        },\n        ts: 0\n      }]);\n      expect(logger.flush).toHaveBeenCalledTimes(0);\n    });","file":"unit/loggers/datadog.spec.js","skipped":false,"dir":"test"},{"name":"should not call console if level is lower","suites":["Test Datadog logger class","Test getLogHandler method"],"updatePoint":{"line":227,"column":49},"line":227,"code":"    it(\"should not call console if level is lower\", () => {\n      logger = new DatadogLogger({\n        level: \"info\"\n      });\n      logger.init(loggerFactory);\n      logger.flush = jest.fn();\n      const logHandler = logger.getLogHandler({\n        mod: \"my-service\",\n        nodeID: \"node-1\"\n      });\n      expect(logHandler).toBeInstanceOf(Function);\n      logHandler(\"fatal\", [\"message\", {\n        a: 5\n      }]);\n      logHandler(\"error\", [\"message\", {\n        a: 5\n      }]);\n      logHandler(\"warn\", [\"message\", {\n        a: 5\n      }]);\n      logHandler(\"info\", [\"message\", {\n        a: 5\n      }]);\n      logHandler(\"debug\", [\"message\", {\n        a: 5\n      }]);\n      logHandler(\"trace\", [\"message\", {\n        a: 5\n      }]);\n      expect(logger.queue).toEqual([{\n        level: \"fatal\",\n        msg: \"message { a: 5 }\",\n        bindings: {\n          mod: \"my-service\",\n          nodeID: \"node-1\"\n        },\n        ts: 0\n      }, {\n        level: \"error\",\n        msg: \"message { a: 5 }\",\n        bindings: {\n          mod: \"my-service\",\n          nodeID: \"node-1\"\n        },\n        ts: 0\n      }, {\n        level: \"warn\",\n        msg: \"message { a: 5 }\",\n        bindings: {\n          mod: \"my-service\",\n          nodeID: \"node-1\"\n        },\n        ts: 0\n      }, {\n        level: \"info\",\n        msg: \"message { a: 5 }\",\n        bindings: {\n          mod: \"my-service\",\n          nodeID: \"node-1\"\n        },\n        ts: 0\n      }]);\n    });","file":"unit/loggers/datadog.spec.js","skipped":false,"dir":"test"},{"name":"should not create child logger if level is null","suites":["Test Datadog logger class","Test getLogHandler method"],"updatePoint":{"line":290,"column":55},"line":290,"code":"    it(\"should not create child logger if level is null\", () => {\n      logger = new DatadogLogger();\n      logger.init(loggerFactory);\n      logger.getLogLevel = jest.fn();\n      const logHandler = logger.getLogHandler({\n        mod: \"my-service\",\n        nodeID: \"node-1\"\n      });\n      expect(logHandler).toBeNull();\n      expect(logger.getLogLevel).toHaveBeenCalledTimes(1);\n      expect(logger.getLogLevel).toHaveBeenCalledWith(\"my-service\");\n    });","file":"unit/loggers/datadog.spec.js","skipped":false,"dir":"test"},{"name":"should not create child logger if bindings is null","suites":["Test Datadog logger class","Test getLogHandler method"],"updatePoint":{"line":302,"column":58},"line":302,"code":"    it(\"should not create child logger if bindings is null\", () => {\n      logger = new DatadogLogger();\n      logger.init(loggerFactory);\n      logger.getLogLevel = jest.fn();\n      const logHandler = logger.getLogHandler();\n      expect(logHandler).toBeNull();\n      expect(logger.getLogLevel).toHaveBeenCalledTimes(0);\n    });","file":"unit/loggers/datadog.spec.js","skipped":false,"dir":"test"},{"name":"should call flush if not interval","suites":["Test Datadog logger class","Test getLogHandler method"],"updatePoint":{"line":310,"column":41},"line":310,"code":"    it(\"should call flush if not interval\", () => {\n      logger = new DatadogLogger({\n        level: \"trace\",\n        interval: 0\n      });\n      logger.init(loggerFactory);\n      logger.flush = jest.fn();\n      const logHandler = logger.getLogHandler({\n        mod: \"my-service\",\n        nodeID: \"node-1\"\n      });\n      expect(logHandler).toBeInstanceOf(Function);\n      logHandler(\"fatal\", [\"message\", {\n        a: 5\n      }]);\n      logHandler(\"error\", [\"message\", {\n        a: 5\n      }]);\n      expect(logger.queue).toEqual([{\n        ts: 0,\n        level: \"fatal\",\n        msg: \"message { a: 5 }\",\n        bindings: {\n          nodeID: \"node-1\",\n          mod: \"my-service\"\n        }\n      }, {\n        ts: 0,\n        level: \"error\",\n        msg: \"message { a: 5 }\",\n        bindings: {\n          nodeID: \"node-1\",\n          mod: \"my-service\"\n        }\n      }]);\n      expect(logger.flush).toHaveBeenCalledTimes(2);\n    });","file":"unit/loggers/datadog.spec.js","skipped":false,"dir":"test"},{"name":"should do nothing if queue is empty","suites":["Test Datadog logger class","Test flush method"],"updatePoint":{"line":361,"column":43},"line":361,"code":"    it(\"should do nothing if queue is empty\", () => {\n      logger = new DatadogLogger({\n        level: \"trace\",\n        interval: 0\n      });\n      logger.init(loggerFactory);\n      fetch.mockClear();\n      logger.flush();\n      expect(fetch).toHaveBeenCalledTimes(0);\n    });","file":"unit/loggers/datadog.spec.js","skipped":false,"dir":"test"},{"name":"should render rows and call appendFile","suites":["Test Datadog logger class","Test flush method"],"updatePoint":{"line":371,"column":46},"line":371,"code":"    it(\"should render rows and call appendFile\", () => {\n      logger = new DatadogLogger({\n        level: \"trace\",\n        eol: \"\\n\",\n        hostname: \"my-host\"\n      });\n      logger.init(loggerFactory);\n      const logHandler = logger.getLogHandler({\n        mod: \"my-service\",\n        nodeID: \"node-1\"\n      });\n      logHandler(\"fatal\", [\"message\", {\n        a: 5\n      }]);\n      logHandler(\"error\", [\"message\", {\n        a: 5\n      }]);\n      fetch.mockClear();\n      logger.flush();\n      expect(fetch).toHaveBeenCalledTimes(1);\n      expect(fetch).toHaveBeenCalledWith(\"https://http-intake.logs.datadoghq.com/v1/input/datadog-api-key\", {\n        method: \"post\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: '[{\"timestamp\":0,\"level\":\"fatal\",\"message\":\"message { a: 5 }\",\"nodeID\":\"node-1\",\"ddsource\":\"moleculer\",\"ddtags\":\"env:,nodeID:node-1,namespace:undefined\",\"hostname\":\"my-host\"},{\"timestamp\":0,\"level\":\"error\",\"message\":\"message { a: 5 }\",\"nodeID\":\"node-1\",\"ddsource\":\"moleculer\",\"ddtags\":\"env:,nodeID:node-1,namespace:undefined\",\"hostname\":\"my-host\"}]'\n      });\n    });","file":"unit/loggers/datadog.spec.js","skipped":false,"dir":"test"},{"name":"should call flush after interval","suites":["Test Datadog logger class","Test flush method"],"updatePoint":{"line":399,"column":40},"line":399,"code":"    it(\"should call flush after interval\", () => {\n      logger = new DatadogLogger({\n        level: \"trace\",\n        interval: 2000\n      });\n      logger.init(loggerFactory);\n      logger.flush = jest.fn();\n      const logHandler = logger.getLogHandler({\n        mod: \"my-service\",\n        nodeID: \"node-1\"\n      });\n      logHandler(\"fatal\", [\"message\", {\n        a: 5\n      }]);\n      logHandler(\"error\", [\"message\", {\n        a: 5\n      }]);\n      expect(logger.flush).toHaveBeenCalledTimes(0);\n      clock.tick(2100);\n      expect(logger.flush).toHaveBeenCalledTimes(1);\n    });","file":"unit/loggers/datadog.spec.js","skipped":false,"dir":"test"},{"name":"should create with default options","suites":["Test Debug logger class","Test Constructor"],"updatePoint":{"line":24,"column":42},"line":24,"code":"    it(\"should create with default options\", () => {\n      const logger = new DebugLogger();\n      expect(logger.opts).toEqual({\n        createLogger: null,\n        level: \"info\"\n      });\n    });","file":"unit/loggers/debug.spec.js","skipped":false,"dir":"test"},{"name":"should create with custom options","suites":["Test Debug logger class","Test Constructor"],"updatePoint":{"line":31,"column":41},"line":31,"code":"    it(\"should create with custom options\", () => {\n      const logger = new DebugLogger({\n        a: 5,\n        createLogger: jest.fn(),\n        level: \"debug\"\n      });\n      expect(logger.opts).toEqual({\n        a: 5,\n        createLogger: expect.any(Function),\n        level: \"debug\"\n      });\n    });","file":"unit/loggers/debug.spec.js","skipped":false,"dir":"test"},{"name":"should create a default logger","suites":["Test Debug logger class","Test init method"],"updatePoint":{"line":46,"column":38},"line":46,"code":"    it(\"should create a default logger\", () => {\n      const logger = new DebugLogger();\n      logger.init(loggerFactory);\n      expect(logger.debug).toBe(fakeLogger);\n      expect(Debug).toHaveBeenCalledTimes(1);\n      expect(Debug).toHaveBeenCalledWith(\"moleculer\");\n    });","file":"unit/loggers/debug.spec.js","skipped":false,"dir":"test"},{"name":"should create a child logger","suites":["Test Debug logger class","Test getLogHandler method"],"updatePoint":{"line":56,"column":36},"line":56,"code":"    it(\"should create a child logger\", () => {\n      const logger = new DebugLogger();\n      logger.init(loggerFactory);\n      const logHandler = logger.getLogHandler({\n        mod: \"my-service\",\n        nodeID: \"node-1\"\n      });\n      expect(logHandler).toBeInstanceOf(Function);\n      expect(logger.debug.extend).toHaveBeenCalledTimes(1);\n      expect(logger.debug.extend).toHaveBeenCalledWith(\"my-service\");\n      logHandler(\"warn\", [\"message\", {\n        a: 5\n      }]);\n      expect(childFakeLogger).toHaveBeenCalledTimes(1);\n      expect(childFakeLogger).toHaveBeenCalledWith(\"message\", {\n        a: 5\n      }); // should not call if level is lower\n\n      childFakeLogger.mockClear();\n      logHandler(\"debug\", [\"message\", {\n        a: 5\n      }]);\n      expect(childFakeLogger).toHaveBeenCalledTimes(0);\n    });","file":"unit/loggers/debug.spec.js","skipped":false,"dir":"test"},{"name":"should call the createLogger function","suites":["Test Debug logger class","Test getLogHandler method"],"updatePoint":{"line":80,"column":45},"line":80,"code":"    it(\"should call the createLogger function\", () => {\n      fakeLogger.extend.mockClear();\n      childFakeLogger.mockClear();\n      const mockFn = jest.fn(() => childFakeLogger);\n      const logger = new DebugLogger({\n        createLogger: mockFn\n      });\n      logger.init(loggerFactory);\n      const logHandler = logger.getLogHandler({\n        mod: \"my-service\",\n        nodeID: \"node-1\"\n      });\n      expect(logHandler).toBeInstanceOf(Function);\n      expect(logger.debug.extend).toHaveBeenCalledTimes(0);\n      expect(mockFn).toHaveBeenCalledTimes(1);\n      expect(mockFn).toHaveBeenCalledWith(\"info\", {\n        mod: \"my-service\",\n        nodeID: \"node-1\"\n      });\n      logHandler(\"warn\", [\"message\", {\n        a: 5\n      }]);\n      expect(childFakeLogger).toHaveBeenCalledTimes(1);\n      expect(childFakeLogger).toHaveBeenCalledWith(\"message\", {\n        a: 5\n      });\n    });","file":"unit/loggers/debug.spec.js","skipped":false,"dir":"test"},{"name":"should not create child logger if level is null","suites":["Test Debug logger class","Test getLogHandler method"],"updatePoint":{"line":107,"column":55},"line":107,"code":"    it(\"should not create child logger if level is null\", () => {\n      fakeLogger.extend.mockClear();\n      childFakeLogger.mockClear();\n      const logger = new DebugLogger();\n      logger.init(loggerFactory);\n      logger.getLogLevel = jest.fn();\n      const logHandler = logger.getLogHandler({\n        mod: \"my-service\",\n        nodeID: \"node-1\"\n      });\n      expect(logHandler).toBeNull();\n      expect(logger.getLogLevel).toHaveBeenCalledTimes(1);\n      expect(logger.getLogLevel).toHaveBeenCalledWith(\"my-service\");\n    });","file":"unit/loggers/debug.spec.js","skipped":false,"dir":"test"},{"name":"should not create child logger if bindings is null","suites":["Test Debug logger class","Test getLogHandler method"],"updatePoint":{"line":121,"column":58},"line":121,"code":"    it(\"should not create child logger if bindings is null\", () => {\n      fakeLogger.extend.mockClear();\n      childFakeLogger.mockClear();\n      const logger = new DebugLogger();\n      logger.init(loggerFactory);\n      logger.getLogLevel = jest.fn();\n      const logHandler = logger.getLogHandler();\n      expect(logHandler).toBeNull();\n      expect(logger.getLogLevel).toHaveBeenCalledTimes(1);\n      expect(logger.getLogLevel).toHaveBeenCalledWith(null);\n    });","file":"unit/loggers/debug.spec.js","skipped":false,"dir":"test"},{"name":"should create with default options","suites":["Test File logger class","Test Constructor"],"updatePoint":{"line":37,"column":42},"line":37,"code":"    it(\"should create with default options\", () => {\n      logger = new FileLogger();\n      expect(logger.opts).toEqual({\n        autoPadding: false,\n        colors: false,\n        createLogger: null,\n        level: \"info\",\n        folder: \"./logs\",\n        filename: \"moleculer-{date}.log\",\n        formatter: \"full\",\n        objectPrinter: null,\n        moduleColors: false,\n        eol: os.EOL,\n        interval: 1 * 1000\n      });\n      expect(logger.queue).toEqual([]);\n      expect(logger.currentFilename).toBeNull();\n      expect(logger.fs).toBeNull();\n    });","file":"unit/loggers/file.spec.js","skipped":false,"dir":"test"},{"name":"should create with custom options","suites":["Test File logger class","Test Constructor"],"updatePoint":{"line":56,"column":41},"line":56,"code":"    it(\"should create with custom options\", () => {\n      logger = new FileLogger({\n        createLogger: jest.fn(),\n        level: \"debug\",\n        folder: \"/my-log\",\n        filename: \"moleculer-{ns}-{date}.json\",\n        formatter: \"{timestamp} {level} {nodeID}/{mod}: {msg}\",\n        eol: \"/\",\n        interval: 5 * 1000\n      });\n      expect(logger.opts).toEqual({\n        autoPadding: false,\n        colors: false,\n        createLogger: expect.any(Function),\n        level: \"debug\",\n        folder: \"/my-log\",\n        filename: \"moleculer-{ns}-{date}.json\",\n        formatter: \"{timestamp} {level} {nodeID}/{mod}: {msg}\",\n        objectPrinter: null,\n        moduleColors: false,\n        eol: \"/\",\n        interval: 5 * 1000\n      });\n    });","file":"unit/loggers/file.spec.js","skipped":false,"dir":"test"},{"name":"should init the logger","suites":["Test File logger class","Test init method"],"updatePoint":{"line":83,"column":30},"line":83,"code":"    it(\"should init the logger\", () => {\n      logger = new FileLogger();\n      logger.init(loggerFactory);\n      expect(logger.logFolder).toBe(\"./logs\");\n      expect(logger.timer).toBeDefined();\n    });","file":"unit/loggers/file.spec.js","skipped":false,"dir":"test"},{"name":"should init the logger with custom options","suites":["Test File logger class","Test init method"],"updatePoint":{"line":89,"column":50},"line":89,"code":"    it(\"should init the logger with custom options\", () => {\n      utils.makeDirs.mockClear();\n      logger = new FileLogger({\n        folder: \"/logs/{namespace}/{nodeID}\",\n        interval: 0\n      });\n      logger.init(loggerFactory);\n      expect(logger.logFolder).toBe(\"/logs/test-ns/node-123\");\n      expect(logger.timer).toBeNull();\n      expect(utils.makeDirs).toHaveBeenCalledTimes(1);\n      expect(utils.makeDirs).toHaveBeenCalledWith(\"/logs/test-ns/node-123\");\n    });","file":"unit/loggers/file.spec.js","skipped":false,"dir":"test"},{"name":"should create a default logger","suites":["Test File logger class","Test stop method"],"updatePoint":{"line":104,"column":38},"line":104,"code":"    it(\"should create a default logger\", async () => {\n      logger = new FileLogger();\n      logger.init(loggerFactory);\n      expect(logger.timer).toBeDefined();\n      logger.flush = jest.fn();\n      await logger.stop();\n      expect(logger.flush).toHaveBeenCalledTimes(1);\n      expect(logger.timer).toBeNull();\n    });","file":"unit/loggers/file.spec.js","skipped":false,"dir":"test"},{"name":"should return interpolated filename","suites":["Test File logger class","Test getFilename method"],"updatePoint":{"line":123,"column":43},"line":123,"code":"    it(\"should return interpolated filename\", () => {\n      logger = new FileLogger();\n      logger.init(loggerFactory);\n      expect(logger.getFilename()).toBe(\"./logs/moleculer-1970-01-01.log\");\n    });","file":"unit/loggers/file.spec.js","skipped":false,"dir":"test"},{"name":"should create a child logger","suites":["Test File logger class","Test getLogHandler method"],"updatePoint":{"line":138,"column":36},"line":138,"code":"    it(\"should create a child logger\", () => {\n      logger = new FileLogger({\n        level: \"trace\"\n      });\n      logger.init(loggerFactory);\n      logger.flush = jest.fn();\n      const logHandler = logger.getLogHandler({\n        mod: \"my-service\",\n        nodeID: \"node-1\"\n      });\n      expect(logHandler).toBeInstanceOf(Function);\n      logHandler(\"fatal\", [\"message\", {\n        a: 5\n      }]);\n      logHandler(\"error\", [\"message\", {\n        a: 5\n      }]);\n      logHandler(\"warn\", [\"message\", {\n        a: 5\n      }]);\n      logHandler(\"info\", [\"message\", {\n        a: 5\n      }]);\n      logHandler(\"debug\", [\"message\", {\n        a: 5\n      }]);\n      logHandler(\"trace\", [\"message\", {\n        a: 5\n      }]);\n      expect(logger.queue).toEqual([\"[1970-01-01T00:00:00.000Z] FATAL node-1/MY-SERVICE: message { a: 5 }\", \"[1970-01-01T00:00:00.000Z] ERROR node-1/MY-SERVICE: message { a: 5 }\", \"[1970-01-01T00:00:00.000Z] WARN  node-1/MY-SERVICE: message { a: 5 }\", \"[1970-01-01T00:00:00.000Z] INFO  node-1/MY-SERVICE: message { a: 5 }\", \"[1970-01-01T00:00:00.000Z] DEBUG node-1/MY-SERVICE: message { a: 5 }\", \"[1970-01-01T00:00:00.000Z] TRACE node-1/MY-SERVICE: message { a: 5 }\"]);\n      expect(logger.flush).toHaveBeenCalledTimes(0);\n    });","file":"unit/loggers/file.spec.js","skipped":false,"dir":"test"},{"name":"should not call console if level is lower","suites":["Test File logger class","Test getLogHandler method"],"updatePoint":{"line":170,"column":49},"line":170,"code":"    it(\"should not call console if level is lower\", () => {\n      logger = new FileLogger({\n        level: \"info\"\n      });\n      logger.init(loggerFactory);\n      logger.flush = jest.fn();\n      const logHandler = logger.getLogHandler({\n        mod: \"my-service\",\n        nodeID: \"node-1\"\n      });\n      expect(logHandler).toBeInstanceOf(Function);\n      logHandler(\"fatal\", [\"message\", {\n        a: 5\n      }]);\n      logHandler(\"error\", [\"message\", {\n        a: 5\n      }]);\n      logHandler(\"warn\", [\"message\", {\n        a: 5\n      }]);\n      logHandler(\"info\", [\"message\", {\n        a: 5\n      }]);\n      logHandler(\"debug\", [\"message\", {\n        a: 5\n      }]);\n      logHandler(\"trace\", [\"message\", {\n        a: 5\n      }]);\n      expect(logger.queue).toEqual([\"[1970-01-01T00:00:00.000Z] FATAL node-1/MY-SERVICE: message { a: 5 }\", \"[1970-01-01T00:00:00.000Z] ERROR node-1/MY-SERVICE: message { a: 5 }\", \"[1970-01-01T00:00:00.000Z] WARN  node-1/MY-SERVICE: message { a: 5 }\", \"[1970-01-01T00:00:00.000Z] INFO  node-1/MY-SERVICE: message { a: 5 }\"]);\n    });","file":"unit/loggers/file.spec.js","skipped":false,"dir":"test"},{"name":"should not create child logger if level is null","suites":["Test File logger class","Test getLogHandler method"],"updatePoint":{"line":201,"column":55},"line":201,"code":"    it(\"should not create child logger if level is null\", () => {\n      logger = new FileLogger();\n      logger.init(loggerFactory);\n      logger.getLogLevel = jest.fn();\n      const logHandler = logger.getLogHandler({\n        mod: \"my-service\",\n        nodeID: \"node-1\"\n      });\n      expect(logHandler).toBeNull();\n      expect(logger.getLogLevel).toHaveBeenCalledTimes(1);\n      expect(logger.getLogLevel).toHaveBeenCalledWith(\"my-service\");\n    });","file":"unit/loggers/file.spec.js","skipped":false,"dir":"test"},{"name":"should not create child logger if bindings is null","suites":["Test File logger class","Test getLogHandler method"],"updatePoint":{"line":213,"column":58},"line":213,"code":"    it(\"should not create child logger if bindings is null\", () => {\n      logger = new FileLogger();\n      logger.init(loggerFactory);\n      logger.getLogLevel = jest.fn();\n      const logHandler = logger.getLogHandler();\n      expect(logHandler).toBeNull();\n      expect(logger.getLogLevel).toHaveBeenCalledTimes(0);\n    });","file":"unit/loggers/file.spec.js","skipped":false,"dir":"test"},{"name":"should call flush if not interval","suites":["Test File logger class","Test getLogHandler method"],"updatePoint":{"line":221,"column":41},"line":221,"code":"    it(\"should call flush if not interval\", () => {\n      logger = new FileLogger({\n        level: \"trace\",\n        interval: 0\n      });\n      logger.init(loggerFactory);\n      logger.flush = jest.fn();\n      const logHandler = logger.getLogHandler({\n        mod: \"my-service\",\n        nodeID: \"node-1\"\n      });\n      expect(logHandler).toBeInstanceOf(Function);\n      logHandler(\"fatal\", [\"message\", {\n        a: 5\n      }]);\n      logHandler(\"error\", [\"message\", {\n        a: 5\n      }]);\n      expect(logger.queue).toEqual([\"[1970-01-01T00:00:00.000Z] FATAL node-1/MY-SERVICE: message { a: 5 }\", \"[1970-01-01T00:00:00.000Z] ERROR node-1/MY-SERVICE: message { a: 5 }\"]);\n      expect(logger.flush).toHaveBeenCalledTimes(2);\n    });","file":"unit/loggers/file.spec.js","skipped":false,"dir":"test"},{"name":"should do nothing if queue is empty","suites":["Test File logger class","Test flush method"],"updatePoint":{"line":252,"column":43},"line":252,"code":"    it(\"should do nothing if queue is empty\", () => {\n      logger = new FileLogger({\n        level: \"trace\",\n        interval: 0\n      });\n      logger.init(loggerFactory);\n      logger.renderRow = jest.fn();\n      fs.appendFile.mockClear();\n      logger.flush();\n      expect(logger.renderRow).toHaveBeenCalledTimes(0);\n      expect(fs.appendFile).toHaveBeenCalledTimes(0);\n    });","file":"unit/loggers/file.spec.js","skipped":false,"dir":"test"},{"name":"should render rows and call appendFile","suites":["Test File logger class","Test flush method"],"updatePoint":{"line":264,"column":46},"line":264,"code":"    it(\"should render rows and call appendFile\", () => {\n      logger = new FileLogger({\n        level: \"trace\",\n        eol: \"\\n\"\n      });\n      logger.init(loggerFactory);\n      const logHandler = logger.getLogHandler({\n        mod: \"my-service\",\n        nodeID: \"node-1\"\n      });\n      logHandler(\"fatal\", [\"message\", {\n        a: 5\n      }]);\n      logHandler(\"error\", [\"message\", {\n        a: 5\n      }]);\n      logger.formatter = jest.fn(() => \"rendered\");\n      fs.appendFile.mockClear();\n      logger.flush();\n      expect(fs.appendFile).toHaveBeenCalledTimes(1);\n      expect(fs.appendFile).toHaveBeenCalledWith(\"./logs/moleculer-1970-01-01.log\", \"[1970-01-01T00:00:00.000Z] FATAL node-1/MY-SERVICE: message { a: 5 }\\n[1970-01-01T00:00:00.000Z] ERROR node-1/MY-SERVICE: message { a: 5 }\\n\", expect.any(Function));\n    });","file":"unit/loggers/file.spec.js","skipped":false,"dir":"test"},{"name":"should call flush after interval","suites":["Test File logger class","Test flush method"],"updatePoint":{"line":286,"column":40},"line":286,"code":"    it(\"should call flush after interval\", () => {\n      logger = new FileLogger({\n        level: \"trace\",\n        interval: 2000\n      });\n      logger.init(loggerFactory);\n      logger.flush = jest.fn();\n      const logHandler = logger.getLogHandler({\n        mod: \"my-service\",\n        nodeID: \"node-1\"\n      });\n      logHandler(\"fatal\", [\"message\", {\n        a: 5\n      }]);\n      logHandler(\"error\", [\"message\", {\n        a: 5\n      }]);\n      expect(logger.flush).toHaveBeenCalledTimes(0);\n      clock.tick(2100);\n      expect(logger.flush).toHaveBeenCalledTimes(1);\n    });","file":"unit/loggers/file.spec.js","skipped":false,"dir":"test"},{"name":"should create with default options","suites":["Test Formatted logger class","Test Constructor"],"updatePoint":{"line":21,"column":42},"line":21,"code":"    it(\"should create with default options\", () => {\n      const logger = new FormattedLogger();\n      expect(logger.opts).toEqual({\n        createLogger: null,\n        level: \"info\",\n        colors: true,\n        moduleColors: false,\n        formatter: \"full\",\n        objectPrinter: null,\n        autoPadding: false\n      });\n    });","file":"unit/loggers/formatted.spec.js","skipped":false,"dir":"test"},{"name":"should create with custom options","suites":["Test Formatted logger class","Test Constructor"],"updatePoint":{"line":33,"column":41},"line":33,"code":"    it(\"should create with custom options\", () => {\n      const logger = new FormattedLogger({\n        createLogger: jest.fn(),\n        level: \"debug\",\n        colors: false,\n        formatter: \"simple\"\n      });\n      expect(logger.opts).toEqual({\n        createLogger: expect.any(Function),\n        level: \"debug\",\n        colors: false,\n        moduleColors: false,\n        formatter: \"simple\",\n        objectPrinter: null,\n        autoPadding: false\n      });\n    });","file":"unit/loggers/formatted.spec.js","skipped":false,"dir":"test"},{"name":"should init the logger","suites":["Test Formatted logger class","Test init method"],"updatePoint":{"line":53,"column":30},"line":53,"code":"    it(\"should init the logger\", () => {\n      const logger = new FormattedLogger();\n      logger.init(loggerFactory);\n      expect(logger.objectPrinter).toBeInstanceOf(Function);\n      expect(logger.levelColorStr).toEqual({\n        debug: \"DEBUG\",\n        error: \"ERROR\",\n        fatal: \"FATAL\",\n        info: \"INFO \",\n        trace: \"TRACE\",\n        warn: \"WARN \"\n      });\n      expect(logger.opts.moduleColors).toBe(false);\n    });","file":"unit/loggers/formatted.spec.js","skipped":false,"dir":"test"},{"name":"should init the logger with custom options","suites":["Test Formatted logger class","Test init method"],"updatePoint":{"line":67,"column":50},"line":67,"code":"    it(\"should init the logger with custom options\", () => {\n      const objectPrinter = jest.fn();\n      const logger = new FormattedLogger({\n        moduleColors: true,\n        objectPrinter\n      });\n      logger.init(loggerFactory);\n      expect(logger.objectPrinter).toBe(objectPrinter);\n      expect(logger.opts.moduleColors).toEqual([\"yellow\", \"bold.yellow\", \"cyan\", \"bold.cyan\", \"green\", \"bold.green\", \"magenta\", \"bold.magenta\", \"blue\", \"bold.blue\"]);\n    });","file":"unit/loggers/formatted.spec.js","skipped":false,"dir":"test"},{"name":"should return interpolated string","suites":["Test Formatted logger class","Test render method"],"updatePoint":{"line":80,"column":41},"line":80,"code":"    it(\"should return interpolated string\", () => {\n      const logger = new FormattedLogger();\n      logger.init(loggerFactory);\n      expect(logger.render(\"[{timestamp}] {level} {nodeID}/{mod}: {msg}\", {\n        timestamp: \"2019-09-07\",\n        level: \"INFO\",\n        mod: \"broker\",\n        nodeID: \"server-1\",\n        msg: \"Message\"\n      })).toBe(\"[2019-09-07] INFO server-1/broker: Message\");\n    });","file":"unit/loggers/formatted.spec.js","skipped":false,"dir":"test"},{"name":"should return a default color for module name","suites":["Test Formatted logger class","Test getNextColor method"],"updatePoint":{"line":94,"column":53},"line":94,"code":"    it(\"should return a default color for module name\", () => {\n      const logger = new FormattedLogger({\n        moduleColors: true\n      });\n      logger.init(loggerFactory);\n      expect(logger.getNextColor(\"broker\")).toBe(\"bold.yellow\");\n      expect(logger.getNextColor(\"registry\")).toBe(\"bold.cyan\");\n      expect(logger.getNextColor(\"my-service\")).toBe(\"cyan\");\n      expect(logger.getNextColor(\"broker\")).toBe(\"bold.yellow\");\n      expect(logger.getNextColor(\"my-service\")).toBe(\"cyan\");\n    });","file":"unit/loggers/formatted.spec.js","skipped":false,"dir":"test"},{"name":"should return the default grey color for module name if disabled","suites":["Test Formatted logger class","Test getNextColor method"],"updatePoint":{"line":105,"column":72},"line":105,"code":"    it(\"should return the default grey color for module name if disabled\", () => {\n      const logger = new FormattedLogger();\n      logger.init(loggerFactory);\n      expect(logger.getNextColor(\"broker\")).toBe(\"grey\");\n      expect(logger.getNextColor(\"registry\")).toBe(\"grey\");\n      expect(logger.getNextColor(\"my-service\")).toBe(\"grey\");\n      expect(logger.getNextColor(\"broker\")).toBe(\"grey\");\n      expect(logger.getNextColor(\"my-service\")).toBe(\"grey\");\n    });","file":"unit/loggers/formatted.spec.js","skipped":false,"dir":"test"},{"name":"should return a custom color for module name","suites":["Test Formatted logger class","Test getNextColor method"],"updatePoint":{"line":114,"column":52},"line":114,"code":"    it(\"should return a custom color for module name\", () => {\n      const logger = new FormattedLogger({\n        moduleColors: [\"magenta\", \"green\", \"red\", \"blue\"]\n      });\n      logger.init(loggerFactory);\n      expect(logger.getNextColor(\"broker\")).toBe(\"blue\");\n      expect(logger.getNextColor(\"registry\")).toBe(\"blue\");\n      expect(logger.getNextColor(\"my-service\")).toBe(\"magenta\");\n      expect(logger.getNextColor(\"broker\")).toBe(\"blue\");\n      expect(logger.getNextColor(\"my-service\")).toBe(\"magenta\");\n    });","file":"unit/loggers/formatted.spec.js","skipped":false,"dir":"test"},{"name":"should create default full formatter","suites":["Test Formatted logger class","Test getFormatter method","Test getFormatter method without padding "],"updatePoint":{"line":138,"column":46},"line":138,"code":"      it(\"should create default full formatter\", () => {\n        const logger = new FormattedLogger({\n          level: \"trace\"\n        });\n        logger.init(loggerFactory);\n        const formatter = logger.getFormatter({\n          mod: \"my-service\",\n          nodeID: \"node-1\"\n        });\n        expect(formatter(\"debug\", [\"message\", {\n          a: 5\n        }])).toEqual([\"[2009-02-13T23:31:39.990Z]\", \"DEBUG\", \"node-1/MY-SERVICE:\", \"message\", \"{ a: 5 }\"]);\n      });","file":"unit/loggers/formatted.spec.js","skipped":false,"dir":"test"},{"name":"should create simple formatter","suites":["Test Formatted logger class","Test getFormatter method","Test getFormatter method without padding "],"updatePoint":{"line":151,"column":40},"line":151,"code":"      it(\"should create simple formatter\", () => {\n        const logger = new FormattedLogger({\n          level: \"trace\",\n          formatter: \"simple\"\n        });\n        logger.init(loggerFactory);\n        const formatter = logger.getFormatter({\n          mod: \"my-service\",\n          nodeID: \"node-1\"\n        });\n        expect(formatter(\"debug\", [\"message\", {\n          a: 5\n        }])).toEqual([\"DEBUG\", \"-\", \"message\", \"{ a: 5 }\"]);\n      });","file":"unit/loggers/formatted.spec.js","skipped":false,"dir":"test"},{"name":"should create short formatter","suites":["Test Formatted logger class","Test getFormatter method","Test getFormatter method without padding "],"updatePoint":{"line":165,"column":39},"line":165,"code":"      it(\"should create short formatter\", () => {\n        const logger = new FormattedLogger({\n          level: \"trace\",\n          formatter: \"short\"\n        });\n        logger.init(loggerFactory);\n        const formatter = logger.getFormatter({\n          mod: \"my-service\",\n          nodeID: \"node-1\"\n        });\n        expect(formatter(\"debug\", [\"message\", {\n          a: 5\n        }])).toEqual([\"[23:31:39.990Z]\", \"DEBUG\", \"MY-SERVICE:\", \"message\", \"{ a: 5 }\"]);\n      });","file":"unit/loggers/formatted.spec.js","skipped":false,"dir":"test"},{"name":"should create json formatter","suites":["Test Formatted logger class","Test getFormatter method","Test getFormatter method without padding "],"updatePoint":{"line":179,"column":38},"line":179,"code":"      it(\"should create json formatter\", () => {\n        const logger = new FormattedLogger({\n          level: \"trace\",\n          formatter: \"json\"\n        });\n        logger.init(loggerFactory);\n        const formatter = logger.getFormatter({\n          mod: \"my-service\",\n          nodeID: \"node-1\"\n        });\n        expect(formatter(\"debug\", [\"message\", {\n          a: 5\n        }])).toEqual(['{\"ts\":1234567899990,\"level\":\"debug\",\"msg\":\"message { a: 5 }\",\"mod\":\"my-service\",\"nodeID\":\"node-1\"}']);\n      });","file":"unit/loggers/formatted.spec.js","skipped":false,"dir":"test"},{"name":"should create jsonext formatter","suites":["Test Formatted logger class","Test getFormatter method","Test getFormatter method without padding "],"updatePoint":{"line":193,"column":41},"line":193,"code":"      it(\"should create jsonext formatter\", () => {\n        const logger = new FormattedLogger({\n          level: \"trace\",\n          formatter: \"jsonext\"\n        });\n        logger.init(loggerFactory);\n        const formatter = logger.getFormatter({\n          mod: \"my-service\",\n          nodeID: \"node-1\"\n        });\n        expect(formatter(\"debug\", [\"message\", {\n          a: 5\n        }])).toEqual(['{\"time\":\"2009-02-13T23:31:39.990Z\",\"level\":\"debug\",\"message\":\"message { a: 5 }\",\"mod\":\"my-service\",\"nodeID\":\"node-1\"}']);\n        expect(formatter(\"debug\", [{\n          a: 5\n        }, \"message\"])).toEqual(['{\"time\":\"2009-02-13T23:31:39.990Z\",\"level\":\"debug\",\"message\":\"message\",\"mod\":\"my-service\",\"nodeID\":\"node-1\",\"a\":5}']);\n      });","file":"unit/loggers/formatted.spec.js","skipped":false,"dir":"test"},{"name":"should create a custom template formatter","suites":["Test Formatted logger class","Test getFormatter method","Test getFormatter method without padding "],"updatePoint":{"line":210,"column":51},"line":210,"code":"      it(\"should create a custom template formatter\", () => {\n        const logger = new FormattedLogger({\n          level: \"trace\",\n          formatter: \"[{time}] {level} <{nodeID}:{mod}> -> {msg}\"\n        });\n        logger.init(loggerFactory);\n        const formatter = logger.getFormatter({\n          mod: \"my-service\",\n          nodeID: \"node-1\"\n        });\n        expect(formatter(\"debug\", [\"message\", {\n          a: 5\n        }])).toEqual([\"[23:31:39.990Z] DEBUG <node-1:MY-SERVICE> -> message { a: 5 }\"]);\n      });","file":"unit/loggers/formatted.spec.js","skipped":false,"dir":"test"},{"name":"should use custom formatter","suites":["Test Formatted logger class","Test getFormatter method","Test getFormatter method without padding "],"updatePoint":{"line":224,"column":37},"line":224,"code":"      it(\"should use custom formatter\", () => {\n        const myFormatter = jest.fn((type, args, bindings) => args);\n        const logger = new FormattedLogger({\n          level: \"trace\",\n          formatter: myFormatter\n        });\n        logger.init(loggerFactory);\n        const formatter = logger.getFormatter({\n          mod: \"my-service\",\n          nodeID: \"node-1\"\n        });\n        expect(formatter(\"debug\", [\"message\", {\n          a: 5\n        }])).toEqual([\"message\", {\n          a: 5\n        }]);\n        expect(myFormatter).toHaveBeenCalledTimes(1);\n        expect(myFormatter).toHaveBeenCalledWith(\"debug\", [\"message\", {\n          a: 5\n        }], {\n          mod: \"my-service\",\n          nodeID: \"node-1\"\n        }, {\n          printArgs: expect.any(Function)\n        });\n      });","file":"unit/loggers/formatted.spec.js","skipped":false,"dir":"test"},{"name":"should create default formatter","suites":["Test Formatted logger class","Test getFormatter method","Test getFormatter method with autoPadding"],"updatePoint":{"line":252,"column":41},"line":252,"code":"      it(\"should create default formatter\", () => {\n        const logger = new FormattedLogger({\n          level: \"trace\",\n          autoPadding: true\n        });\n        logger.init(loggerFactory);\n        const formatter = logger.getFormatter({\n          mod: \"my-service\",\n          nodeID: \"node-1\"\n        });\n        expect(formatter(\"debug\", [\"message\", {\n          a: 5\n        }])).toEqual([\"[2009-02-13T23:31:39.990Z]\", \"DEBUG\", \"node-1/MY-SERVICE:\", \"message\", \"{ a: 5 }\"]);\n        const formatter2 = logger.getFormatter({\n          mod: \"short\",\n          nodeID: \"n-2\"\n        });\n        expect(formatter2(\"debug\", [\"message2\"])).toEqual([\"[2009-02-13T23:31:39.990Z]\", \"DEBUG\", \"n-2/SHORT        :\", \"message2\"]);\n      });","file":"unit/loggers/formatted.spec.js","skipped":false,"dir":"test"},{"name":"should create short formatter","suites":["Test Formatted logger class","Test getFormatter method","Test getFormatter method with autoPadding"],"updatePoint":{"line":271,"column":39},"line":271,"code":"      it(\"should create short formatter\", () => {\n        const logger = new FormattedLogger({\n          level: \"trace\",\n          formatter: \"short\",\n          autoPadding: true\n        });\n        logger.init(loggerFactory);\n        const formatter = logger.getFormatter({\n          mod: \"my-service\",\n          nodeID: \"node-1\"\n        });\n        expect(formatter(\"debug\", [\"message\", {\n          a: 5\n        }])).toEqual([\"[23:31:39.990Z]\", \"DEBUG\", \"MY-SERVICE:\", \"message\", \"{ a: 5 }\"]);\n        const formatter2 = logger.getFormatter({\n          mod: \"short\",\n          nodeID: \"n-2\"\n        });\n        expect(formatter2(\"debug\", [\"message2\"])).toEqual([\"[23:31:39.990Z]\", \"DEBUG\", \"SHORT     :\", \"message2\"]);\n      });","file":"unit/loggers/formatted.spec.js","skipped":false,"dir":"test"},{"name":"should use the default objectPrinter","suites":["Test Formatted logger class","Test getFormatter method","Test getFormatter objectPrinter"],"updatePoint":{"line":293,"column":46},"line":293,"code":"      it(\"should use the default objectPrinter\", () => {\n        const logger = new FormattedLogger({});\n        logger.init(loggerFactory);\n        const formatter = logger.getFormatter({\n          mod: \"my-service\",\n          nodeID: \"node-1\"\n        });\n        expect(formatter(\"debug\", [\"message\", {\n          a: 5\n        }, [\"John\", \"Doe\"], true, 123])).toEqual([\"[2009-02-13T23:31:39.990Z]\", \"DEBUG\", \"node-1/MY-SERVICE:\", \"message\", \"{ a: 5 }\", \"[ 'John', 'Doe' ]\", true, 123]);\n      });","file":"unit/loggers/formatted.spec.js","skipped":false,"dir":"test"},{"name":"should use a custom objectPrinter","suites":["Test Formatted logger class","Test getFormatter method","Test getFormatter objectPrinter"],"updatePoint":{"line":304,"column":43},"line":304,"code":"      it(\"should use a custom objectPrinter\", () => {\n        const objectPrinter = jest.fn(() => \"printed\");\n        const logger = new FormattedLogger({\n          objectPrinter\n        });\n        logger.init(loggerFactory);\n        const formatter = logger.getFormatter({\n          mod: \"my-service\",\n          nodeID: \"node-1\"\n        });\n        expect(formatter(\"debug\", [\"message\", {\n          a: 5\n        }, [\"John\", \"Doe\"], true, 123])).toEqual([\"[2009-02-13T23:31:39.990Z]\", \"DEBUG\", \"node-1/MY-SERVICE:\", \"message\", \"printed\", \"printed\", true, 123]);\n        expect(objectPrinter).toHaveBeenCalledTimes(2);\n        expect(objectPrinter).toHaveBeenCalledWith({\n          a: 5\n        });\n        expect(objectPrinter).toHaveBeenCalledWith([\"John\", \"Doe\"]);\n      });","file":"unit/loggers/formatted.spec.js","skipped":false,"dir":"test"},{"name":"should throw error","suites":["Test Loggers resolver"],"updatePoint":{"line":16,"column":24},"line":16,"code":"  it(\"should throw error\", () => {\n    expect(() => Loggers.resolve()).toThrowError(BrokerOptionsError);\n    expect(() => Loggers.resolve({})).toThrowError(BrokerOptionsError);\n    expect(() => Loggers.resolve(\"xyz\")).toThrowError(BrokerOptionsError);\n    expect(() => Loggers.resolve({\n      type: \"xyz\"\n    })).toThrowError(BrokerOptionsError);\n  });","file":"unit/loggers/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve Bunyan logger from string","suites":["Test Loggers resolver"],"updatePoint":{"line":24,"column":46},"line":24,"code":"  it(\"should resolve Bunyan logger from string\", () => {\n    let logger = Loggers.resolve(\"Bunyan\");\n    expect(logger).toBeInstanceOf(Loggers.Bunyan);\n  });","file":"unit/loggers/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve Bunyan logger from obj","suites":["Test Loggers resolver"],"updatePoint":{"line":28,"column":43},"line":28,"code":"  it(\"should resolve Bunyan logger from obj\", () => {\n    let options = {\n      bunyan: {\n        a: 5\n      }\n    };\n    let logger = Loggers.resolve({\n      type: \"Bunyan\",\n      options\n    });\n    expect(logger).toBeInstanceOf(Loggers.Bunyan);\n    expect(logger.opts).toEqual(expect.objectContaining({\n      bunyan: {\n        a: 5,\n        name: \"moleculer\"\n      }\n    }));\n  });","file":"unit/loggers/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve console logger from string","suites":["Test Loggers resolver"],"updatePoint":{"line":46,"column":47},"line":46,"code":"  it(\"should resolve console logger from string\", () => {\n    let logger = Loggers.resolve(\"Console\");\n    expect(logger).toBeInstanceOf(Loggers.Console);\n  });","file":"unit/loggers/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve console logger from obj","suites":["Test Loggers resolver"],"updatePoint":{"line":50,"column":44},"line":50,"code":"  it(\"should resolve console logger from obj\", () => {\n    let options = {\n      moduleColors: true\n    };\n    let logger = Loggers.resolve({\n      type: \"Console\",\n      options\n    });\n    expect(logger).toBeInstanceOf(Loggers.Console);\n    expect(logger.opts).toEqual(expect.objectContaining({\n      moduleColors: true\n    }));\n  });","file":"unit/loggers/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve Datadog logger from string","suites":["Test Loggers resolver"],"updatePoint":{"line":63,"column":47},"line":63,"code":"  it(\"should resolve Datadog logger from string\", () => {\n    let logger = Loggers.resolve(\"Datadog\");\n    expect(logger).toBeInstanceOf(Loggers.Datadog);\n  });","file":"unit/loggers/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve Datadog logger from obj","suites":["Test Loggers resolver"],"updatePoint":{"line":67,"column":44},"line":67,"code":"  it(\"should resolve Datadog logger from obj\", () => {\n    let options = {\n      a: 5\n    };\n    let logger = Loggers.resolve({\n      type: \"Datadog\",\n      options\n    });\n    expect(logger).toBeInstanceOf(Loggers.Datadog);\n    expect(logger.opts).toEqual(expect.objectContaining({\n      a: 5\n    }));\n  });","file":"unit/loggers/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve Debug logger from string","suites":["Test Loggers resolver"],"updatePoint":{"line":80,"column":45},"line":80,"code":"  it(\"should resolve Debug logger from string\", () => {\n    let logger = Loggers.resolve(\"Debug\");\n    expect(logger).toBeInstanceOf(Loggers.Debug);\n  });","file":"unit/loggers/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve Debug logger from obj","suites":["Test Loggers resolver"],"updatePoint":{"line":84,"column":42},"line":84,"code":"  it(\"should resolve Debug logger from obj\", () => {\n    let options = {\n      a: 5\n    };\n    let logger = Loggers.resolve({\n      type: \"Debug\",\n      options\n    });\n    expect(logger).toBeInstanceOf(Loggers.Debug);\n    expect(logger.opts).toEqual(expect.objectContaining({\n      a: 5\n    }));\n  });","file":"unit/loggers/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve File logger from string","suites":["Test Loggers resolver"],"updatePoint":{"line":97,"column":44},"line":97,"code":"  it(\"should resolve File logger from string\", () => {\n    let logger = Loggers.resolve(\"File\");\n    expect(logger).toBeInstanceOf(Loggers.File);\n  });","file":"unit/loggers/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve File logger from obj","suites":["Test Loggers resolver"],"updatePoint":{"line":101,"column":41},"line":101,"code":"  it(\"should resolve File logger from obj\", () => {\n    let options = {\n      a: 5\n    };\n    let logger = Loggers.resolve({\n      type: \"File\",\n      options\n    });\n    expect(logger).toBeInstanceOf(Loggers.File);\n    expect(logger.opts).toEqual(expect.objectContaining({\n      a: 5\n    }));\n  });","file":"unit/loggers/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve Log4js logger from string","suites":["Test Loggers resolver"],"updatePoint":{"line":114,"column":46},"line":114,"code":"  it(\"should resolve Log4js logger from string\", () => {\n    let logger = Loggers.resolve(\"Log4js\");\n    expect(logger).toBeInstanceOf(Loggers.Log4js);\n  });","file":"unit/loggers/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve Log4js logger from obj","suites":["Test Loggers resolver"],"updatePoint":{"line":118,"column":43},"line":118,"code":"  it(\"should resolve Log4js logger from obj\", () => {\n    let options = {\n      a: 5\n    };\n    let logger = Loggers.resolve({\n      type: \"Log4js\",\n      options\n    });\n    expect(logger).toBeInstanceOf(Loggers.Log4js);\n    expect(logger.opts).toEqual(expect.objectContaining({\n      a: 5\n    }));\n  });","file":"unit/loggers/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve Pino logger from string","suites":["Test Loggers resolver"],"updatePoint":{"line":131,"column":44},"line":131,"code":"  it(\"should resolve Pino logger from string\", () => {\n    let logger = Loggers.resolve(\"Pino\");\n    expect(logger).toBeInstanceOf(Loggers.Pino);\n  });","file":"unit/loggers/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve Pino logger from obj","suites":["Test Loggers resolver"],"updatePoint":{"line":135,"column":41},"line":135,"code":"  it(\"should resolve Pino logger from obj\", () => {\n    let options = {\n      a: 5\n    };\n    let logger = Loggers.resolve({\n      type: \"Pino\",\n      options\n    });\n    expect(logger).toBeInstanceOf(Loggers.Pino);\n    expect(logger.opts).toEqual(expect.objectContaining({\n      a: 5\n    }));\n  });","file":"unit/loggers/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve Winston logger from string","suites":["Test Loggers resolver"],"updatePoint":{"line":148,"column":47},"line":148,"code":"  it(\"should resolve Winston logger from string\", () => {\n    let logger = Loggers.resolve(\"Winston\");\n    expect(logger).toBeInstanceOf(Loggers.Winston);\n  });","file":"unit/loggers/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve Winston logger from obj","suites":["Test Loggers resolver"],"updatePoint":{"line":152,"column":44},"line":152,"code":"  it(\"should resolve Winston logger from obj\", () => {\n    let options = {\n      a: 5\n    };\n    let logger = Loggers.resolve({\n      type: \"Winston\",\n      options\n    });\n    expect(logger).toBeInstanceOf(Loggers.Winston);\n    expect(logger.opts).toEqual(expect.objectContaining({\n      a: 5\n    }));\n  });","file":"unit/loggers/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve custom logger","suites":["Test Loggers resolver"],"updatePoint":{"line":165,"column":34},"line":165,"code":"  it(\"should resolve custom logger\", () => {\n    let logger = Loggers.resolve(new MyLogger({\n      a: 5\n    }));\n    expect(logger).toBeInstanceOf(Loggers.Base);\n    expect(logger.opts).toEqual(expect.objectContaining({\n      a: 5\n    }));\n  });","file":"unit/loggers/index.spec.js","skipped":false,"dir":"test"},{"name":"should throw error if type if not correct","suites":["Test Logger register"],"updatePoint":{"line":178,"column":47},"line":178,"code":"  it(\"should throw error if type if not correct\", () => {\n    expect(() => {\n      Loggers.resolve(\"MyCustom\");\n    }).toThrowError(BrokerOptionsError);\n  });","file":"unit/loggers/index.spec.js","skipped":false,"dir":"test"},{"name":"should register new type","suites":["Test Logger register"],"updatePoint":{"line":183,"column":30},"line":183,"code":"  it(\"should register new type\", () => {\n    Loggers.register(\"MyCustom\", MyCustom);\n    expect(Loggers.MyCustom).toBe(MyCustom);\n  });","file":"unit/loggers/index.spec.js","skipped":false,"dir":"test"},{"name":"should find the new type","suites":["Test Logger register"],"updatePoint":{"line":187,"column":30},"line":187,"code":"  it(\"should find the new type\", () => {\n    const logger = Loggers.resolve(\"MyCustom\");\n    expect(logger).toBeInstanceOf(MyCustom);\n  });","file":"unit/loggers/index.spec.js","skipped":false,"dir":"test"},{"name":"should create with default options","suites":["Test Log4js logger class","Test Constructor"],"updatePoint":{"line":22,"column":42},"line":22,"code":"    it(\"should create with default options\", () => {\n      const logger = new Log4jsLogger();\n      expect(logger.opts).toEqual({\n        createLogger: null,\n        level: \"info\"\n      });\n    });","file":"unit/loggers/log4js.spec.js","skipped":false,"dir":"test"},{"name":"should create with custom options","suites":["Test Log4js logger class","Test Constructor"],"updatePoint":{"line":29,"column":41},"line":29,"code":"    it(\"should create with custom options\", () => {\n      const logger = new Log4jsLogger({\n        a: 5,\n        createLogger: jest.fn(),\n        level: \"debug\"\n      });\n      expect(logger.opts).toEqual({\n        a: 5,\n        createLogger: expect.any(Function),\n        level: \"debug\"\n      });\n    });","file":"unit/loggers/log4js.spec.js","skipped":false,"dir":"test"},{"name":"should create a default logger without config","suites":["Test Log4js logger class","Test init method"],"updatePoint":{"line":44,"column":53},"line":44,"code":"    it(\"should create a default logger without config\", () => {\n      const logger = new Log4jsLogger();\n      logger.init(loggerFactory);\n      expect(logger.log4js).toBe(Log4js);\n      expect(Log4js.configure).toHaveBeenCalledTimes(0);\n    });","file":"unit/loggers/log4js.spec.js","skipped":false,"dir":"test"},{"name":"should create a default logger with config","suites":["Test Log4js logger class","Test init method"],"updatePoint":{"line":50,"column":50},"line":50,"code":"    it(\"should create a default logger with config\", () => {\n      const logger = new Log4jsLogger({\n        log4js: {\n          a: 5\n        }\n      });\n      logger.init(loggerFactory);\n      expect(logger.log4js).toBe(Log4js);\n      expect(Log4js.configure).toHaveBeenCalledTimes(1);\n      expect(Log4js.configure).toHaveBeenCalledWith({\n        a: 5\n      });\n    });","file":"unit/loggers/log4js.spec.js","skipped":false,"dir":"test"},{"name":"should create a default logger","suites":["Test Log4js logger class","Test stop method"],"updatePoint":{"line":66,"column":38},"line":66,"code":"    it(\"should create a default logger\", async () => {\n      const logger = new Log4jsLogger({\n        log4js: {}\n      });\n      logger.init(loggerFactory);\n      logger.log4js.shutdown = jest.fn(cb => cb());\n      await logger.stop();\n      expect(logger.log4js.shutdown).toHaveBeenCalledTimes(1);\n    });","file":"unit/loggers/log4js.spec.js","skipped":false,"dir":"test"},{"name":"should create a child logger","suites":["Test Log4js logger class","Test getLogHandler method"],"updatePoint":{"line":78,"column":36},"line":78,"code":"    it(\"should create a child logger\", () => {\n      const logger = new Log4jsLogger();\n      logger.init(loggerFactory);\n      const logHandler = logger.getLogHandler({\n        mod: \"my-service\",\n        nodeID: \"node-1\"\n      });\n      expect(logHandler).toBeInstanceOf(Function);\n      expect(logger.log4js.getLogger).toHaveBeenCalledTimes(1);\n      expect(logger.log4js.getLogger).toHaveBeenCalledWith(\"MY-SERVICE\");\n      logHandler(\"warn\", [\"message\", {\n        a: 5\n      }]);\n      expect(childFakeLogger.warn).toHaveBeenCalledTimes(1);\n      expect(childFakeLogger.warn).toHaveBeenCalledWith(\"message\", {\n        a: 5\n      });\n    });","file":"unit/loggers/log4js.spec.js","skipped":false,"dir":"test"},{"name":"should call the createLogger function","suites":["Test Log4js logger class","Test getLogHandler method"],"updatePoint":{"line":96,"column":45},"line":96,"code":"    it(\"should call the createLogger function\", () => {\n      Log4js.getLogger.mockClear();\n      childFakeLogger.warn.mockClear();\n      const mockFn = jest.fn(() => childFakeLogger);\n      const logger = new Log4jsLogger({\n        createLogger: mockFn\n      });\n      logger.init(loggerFactory);\n      const logHandler = logger.getLogHandler({\n        mod: \"my-service\",\n        nodeID: \"node-1\"\n      });\n      expect(logHandler).toBeInstanceOf(Function);\n      expect(logger.log4js.getLogger).toHaveBeenCalledTimes(0);\n      expect(mockFn).toHaveBeenCalledTimes(1);\n      expect(mockFn).toHaveBeenCalledWith(\"info\", {\n        mod: \"my-service\",\n        nodeID: \"node-1\"\n      });\n      logHandler(\"warn\", [\"message\", {\n        a: 5\n      }]);\n      expect(childFakeLogger.warn).toHaveBeenCalledTimes(1);\n      expect(childFakeLogger.warn).toHaveBeenCalledWith(\"message\", {\n        a: 5\n      });\n    });","file":"unit/loggers/log4js.spec.js","skipped":false,"dir":"test"},{"name":"should not create child logger if level is null","suites":["Test Log4js logger class","Test getLogHandler method"],"updatePoint":{"line":123,"column":55},"line":123,"code":"    it(\"should not create child logger if level is null\", () => {\n      Log4js.getLogger.mockClear();\n      childFakeLogger.warn.mockClear();\n      const logger = new Log4jsLogger();\n      logger.init(loggerFactory);\n      logger.getLogLevel = jest.fn();\n      const logHandler = logger.getLogHandler({\n        mod: \"my-service\",\n        nodeID: \"node-1\"\n      });\n      expect(logHandler).toBeNull();\n      expect(logger.getLogLevel).toHaveBeenCalledTimes(1);\n      expect(logger.getLogLevel).toHaveBeenCalledWith(\"my-service\");\n    });","file":"unit/loggers/log4js.spec.js","skipped":false,"dir":"test"},{"name":"should not create child logger if bindings is null","suites":["Test Log4js logger class","Test getLogHandler method"],"updatePoint":{"line":137,"column":58},"line":137,"code":"    it(\"should not create child logger if bindings is null\", () => {\n      Log4js.getLogger.mockClear();\n      childFakeLogger.warn.mockClear();\n      const logger = new Log4jsLogger();\n      logger.init(loggerFactory);\n      logger.getLogLevel = jest.fn();\n      const logHandler = logger.getLogHandler();\n      expect(logHandler).toBeNull();\n      expect(logger.getLogLevel).toHaveBeenCalledTimes(0);\n    });","file":"unit/loggers/log4js.spec.js","skipped":false,"dir":"test"},{"name":"should create with default options","suites":["Test Pino logger class","Test Constructor"],"updatePoint":{"line":26,"column":42},"line":26,"code":"    it(\"should create with default options\", () => {\n      const logger = new PinoLogger();\n      expect(logger.opts).toEqual({\n        pino: {\n          options: null,\n          destination: null\n        },\n        createLogger: null,\n        level: \"info\"\n      });\n    });","file":"unit/loggers/pino.spec.js","skipped":false,"dir":"test"},{"name":"should create with custom options","suites":["Test Pino logger class","Test Constructor"],"updatePoint":{"line":37,"column":41},"line":37,"code":"    it(\"should create with custom options\", () => {\n      const logger = new PinoLogger({\n        pino: {\n          options: {\n            a: 5\n          },\n          destination: \"/logs\"\n        },\n        createLogger: jest.fn(),\n        level: \"debug\"\n      });\n      expect(logger.opts).toEqual({\n        pino: {\n          options: {\n            a: 5\n          },\n          destination: \"/logs\"\n        },\n        createLogger: expect.any(Function),\n        level: \"debug\"\n      });\n    });","file":"unit/loggers/pino.spec.js","skipped":false,"dir":"test"},{"name":"should create a default logger","suites":["Test Pino logger class","Test init method"],"updatePoint":{"line":62,"column":38},"line":62,"code":"    it(\"should create a default logger\", () => {\n      const logger = new PinoLogger();\n      logger.init(loggerFactory);\n      expect(logger.pino).toBe(fakeLogger);\n      expect(Pino).toHaveBeenCalledTimes(1);\n      expect(Pino).toHaveBeenCalledWith(undefined, undefined);\n    });","file":"unit/loggers/pino.spec.js","skipped":false,"dir":"test"},{"name":"should create a default logger with custom options","suites":["Test Pino logger class","Test init method"],"updatePoint":{"line":69,"column":58},"line":69,"code":"    it(\"should create a default logger with custom options\", () => {\n      Pino.mockClear();\n      const logger = new PinoLogger({\n        pino: {\n          options: {\n            a: 5\n          },\n          destination: \"/logs\"\n        }\n      });\n      logger.init(loggerFactory);\n      expect(logger.pino).toBe(fakeLogger);\n      expect(Pino).toHaveBeenCalledTimes(1);\n      expect(Pino).toHaveBeenCalledWith({\n        a: 5\n      }, \"/logs\");\n    });","file":"unit/loggers/pino.spec.js","skipped":false,"dir":"test"},{"name":"should create a child logger","suites":["Test Pino logger class","Test getLogHandler method"],"updatePoint":{"line":89,"column":36},"line":89,"code":"    it(\"should create a child logger\", () => {\n      const logger = new PinoLogger();\n      logger.init(loggerFactory);\n      const logHandler = logger.getLogHandler({\n        mod: \"my-service\",\n        nodeID: \"node-1\"\n      });\n      expect(logHandler).toBeInstanceOf(Function);\n      expect(logger.pino.child).toHaveBeenCalledTimes(1);\n      expect(logger.pino.child).toHaveBeenCalledWith({}, {\n        level: \"info\",\n        mod: \"my-service\",\n        nodeID: \"node-1\"\n      });\n      logHandler(\"warn\", [\"message\", {\n        a: 5\n      }]);\n      expect(childFakeLogger.warn).toHaveBeenCalledTimes(1);\n      expect(childFakeLogger.warn).toHaveBeenCalledWith(\"message\", {\n        a: 5\n      });\n    });","file":"unit/loggers/pino.spec.js","skipped":false,"dir":"test"},{"name":"should call the createLogger function","suites":["Test Pino logger class","Test getLogHandler method"],"updatePoint":{"line":111,"column":45},"line":111,"code":"    it(\"should call the createLogger function\", () => {\n      fakeLogger.child.mockClear();\n      childFakeLogger.warn.mockClear();\n      const mockFn = jest.fn(() => childFakeLogger);\n      const logger = new PinoLogger({\n        createLogger: mockFn\n      });\n      logger.init(loggerFactory);\n      const logHandler = logger.getLogHandler({\n        mod: \"my-service\",\n        nodeID: \"node-1\"\n      });\n      expect(logHandler).toBeInstanceOf(Function);\n      expect(logger.pino.child).toHaveBeenCalledTimes(0);\n      expect(mockFn).toHaveBeenCalledTimes(1);\n      expect(mockFn).toHaveBeenCalledWith(\"info\", {\n        mod: \"my-service\",\n        nodeID: \"node-1\"\n      });\n      logHandler(\"warn\", [\"message\", {\n        a: 5\n      }]);\n      expect(childFakeLogger.warn).toHaveBeenCalledTimes(1);\n      expect(childFakeLogger.warn).toHaveBeenCalledWith(\"message\", {\n        a: 5\n      });\n    });","file":"unit/loggers/pino.spec.js","skipped":false,"dir":"test"},{"name":"should not create child logger if level is null","suites":["Test Pino logger class","Test getLogHandler method"],"updatePoint":{"line":138,"column":55},"line":138,"code":"    it(\"should not create child logger if level is null\", () => {\n      fakeLogger.child.mockClear();\n      childFakeLogger.warn.mockClear();\n      const logger = new PinoLogger();\n      logger.init(loggerFactory);\n      logger.getLogLevel = jest.fn();\n      const logHandler = logger.getLogHandler({\n        mod: \"my-service\",\n        nodeID: \"node-1\"\n      });\n      expect(logHandler).toBeNull();\n      expect(logger.getLogLevel).toHaveBeenCalledTimes(1);\n      expect(logger.getLogLevel).toHaveBeenCalledWith(\"my-service\");\n    });","file":"unit/loggers/pino.spec.js","skipped":false,"dir":"test"},{"name":"should not create child logger if bindings is null","suites":["Test Pino logger class","Test getLogHandler method"],"updatePoint":{"line":152,"column":58},"line":152,"code":"    it(\"should not create child logger if bindings is null\", () => {\n      fakeLogger.child.mockClear();\n      childFakeLogger.warn.mockClear();\n      const logger = new PinoLogger();\n      logger.init(loggerFactory);\n      logger.getLogLevel = jest.fn();\n      const logHandler = logger.getLogHandler();\n      expect(logHandler).toBeNull();\n      expect(logger.getLogLevel).toHaveBeenCalledTimes(0);\n    });","file":"unit/loggers/pino.spec.js","skipped":false,"dir":"test"},{"name":"should create with default options","suites":["Test Winston logger class","Test Constructor"],"updatePoint":{"line":30,"column":42},"line":30,"code":"    it(\"should create with default options\", () => {\n      const logger = new WinstonLogger();\n      expect(logger.opts).toEqual({\n        winston: {\n          level: \"silly\"\n        },\n        createLogger: null,\n        level: \"info\"\n      });\n    });","file":"unit/loggers/winston.spec.js","skipped":false,"dir":"test"},{"name":"should create with custom options","suites":["Test Winston logger class","Test Constructor"],"updatePoint":{"line":40,"column":41},"line":40,"code":"    it(\"should create with custom options\", () => {\n      const logger = new WinstonLogger({\n        winston: {\n          level: \"info\",\n          transports: []\n        },\n        createLogger: jest.fn(),\n        level: \"debug\"\n      });\n      expect(logger.opts).toEqual({\n        winston: {\n          level: \"info\",\n          transports: []\n        },\n        createLogger: expect.any(Function),\n        level: \"debug\"\n      });\n    });","file":"unit/loggers/winston.spec.js","skipped":false,"dir":"test"},{"name":"should create a default logger","suites":["Test Winston logger class","Test init method"],"updatePoint":{"line":61,"column":38},"line":61,"code":"    it(\"should create a default logger\", () => {\n      const logger = new WinstonLogger();\n      logger.init(loggerFactory);\n      expect(logger.winston).toBe(fakeLogger);\n      expect(Winston.createLogger).toHaveBeenCalledTimes(1);\n      expect(Winston.createLogger).toHaveBeenCalledWith({\n        level: \"silly\"\n      });\n    });","file":"unit/loggers/winston.spec.js","skipped":false,"dir":"test"},{"name":"should create a default logger with custom options","suites":["Test Winston logger class","Test init method"],"updatePoint":{"line":70,"column":58},"line":70,"code":"    it(\"should create a default logger with custom options\", () => {\n      Winston.createLogger.mockClear();\n      const logger = new WinstonLogger({\n        winston: {\n          transports: []\n        }\n      });\n      logger.init(loggerFactory);\n      expect(logger.winston).toBe(fakeLogger);\n      expect(Winston.createLogger).toHaveBeenCalledTimes(1);\n      expect(Winston.createLogger).toHaveBeenCalledWith({\n        level: \"silly\",\n        transports: []\n      });\n    });","file":"unit/loggers/winston.spec.js","skipped":false,"dir":"test"},{"name":"should create a child logger","suites":["Test Winston logger class","Test getLogHandler method"],"updatePoint":{"line":88,"column":36},"line":88,"code":"    it(\"should create a child logger\", () => {\n      const logger = new WinstonLogger({\n        level: \"trace\"\n      });\n      logger.init(loggerFactory);\n      const logHandler = logger.getLogHandler({\n        mod: \"my-service\",\n        nodeID: \"node-1\"\n      });\n      expect(logHandler).toBeInstanceOf(Function);\n      expect(logger.winston.child).toHaveBeenCalledTimes(1);\n      expect(logger.winston.child).toHaveBeenCalledWith({\n        level: \"trace\",\n        mod: \"my-service\",\n        nodeID: \"node-1\"\n      });\n      logHandler(\"info\", [\"message\", {\n        a: 5\n      }]);\n      expect(childFakeLogger.info).toHaveBeenCalledTimes(1);\n      expect(childFakeLogger.info).toHaveBeenCalledWith(\"message\", {\n        a: 5\n      });\n      logHandler(\"fatal\", [\"message\", {\n        a: 5\n      }]);\n      expect(childFakeLogger.error).toHaveBeenCalledTimes(1);\n      expect(childFakeLogger.error).toHaveBeenCalledWith(\"message\", {\n        a: 5\n      });\n      childFakeLogger.error.mockClear();\n      logHandler(\"error\", [\"message\", {\n        a: 5\n      }]);\n      expect(childFakeLogger.error).toHaveBeenCalledTimes(1);\n      expect(childFakeLogger.error).toHaveBeenCalledWith(\"message\", {\n        a: 5\n      });\n      logHandler(\"warn\", [\"message\", {\n        a: 5\n      }]);\n      expect(childFakeLogger.warn).toHaveBeenCalledTimes(1);\n      expect(childFakeLogger.warn).toHaveBeenCalledWith(\"message\", {\n        a: 5\n      });\n      logHandler(\"debug\", [\"message\", {\n        a: 5\n      }]);\n      expect(childFakeLogger.debug).toHaveBeenCalledTimes(1);\n      expect(childFakeLogger.debug).toHaveBeenCalledWith(\"message\", {\n        a: 5\n      });\n      logHandler(\"trace\", [\"message\", {\n        a: 5\n      }]);\n      expect(childFakeLogger.log).toHaveBeenCalledTimes(1);\n      expect(childFakeLogger.log).toHaveBeenCalledWith(\"silly\", \"message\", {\n        a: 5\n      });\n    });","file":"unit/loggers/winston.spec.js","skipped":false,"dir":"test"},{"name":"should not call logger if level is lower","suites":["Test Winston logger class","Test getLogHandler method"],"updatePoint":{"line":148,"column":48},"line":148,"code":"    it(\"should not call logger if level is lower\", () => {\n      fakeLogger.child.mockClear();\n      childFakeLogger.info.mockClear();\n      childFakeLogger.debug.mockClear();\n      const logger = new WinstonLogger({\n        level: \"info\"\n      });\n      logger.init(loggerFactory);\n      const logHandler = logger.getLogHandler({\n        mod: \"my-service\",\n        nodeID: \"node-1\"\n      });\n      expect(logHandler).toBeInstanceOf(Function);\n      expect(logger.winston.child).toHaveBeenCalledTimes(1);\n      expect(logger.winston.child).toHaveBeenCalledWith({\n        level: \"info\",\n        mod: \"my-service\",\n        nodeID: \"node-1\"\n      });\n      logHandler(\"info\", [\"message\", {\n        a: 5\n      }]);\n      expect(childFakeLogger.info).toHaveBeenCalledTimes(1);\n      expect(childFakeLogger.info).toHaveBeenCalledWith(\"message\", {\n        a: 5\n      });\n      logHandler(\"debug\", [\"message\", {\n        a: 5\n      }]);\n      expect(childFakeLogger.debug).toHaveBeenCalledTimes(0);\n    });","file":"unit/loggers/winston.spec.js","skipped":false,"dir":"test"},{"name":"should call the createLogger function","suites":["Test Winston logger class","Test getLogHandler method"],"updatePoint":{"line":179,"column":45},"line":179,"code":"    it(\"should call the createLogger function\", () => {\n      fakeLogger.child.mockClear();\n      childFakeLogger.warn.mockClear();\n      const mockFn = jest.fn(() => childFakeLogger);\n      const logger = new WinstonLogger({\n        createLogger: mockFn\n      });\n      logger.init(loggerFactory);\n      const logHandler = logger.getLogHandler({\n        mod: \"my-service\",\n        nodeID: \"node-1\"\n      });\n      expect(logHandler).toBeInstanceOf(Function);\n      expect(logger.winston.child).toHaveBeenCalledTimes(0);\n      expect(mockFn).toHaveBeenCalledTimes(1);\n      expect(mockFn).toHaveBeenCalledWith(\"info\", {\n        mod: \"my-service\",\n        nodeID: \"node-1\"\n      });\n      logHandler(\"warn\", [\"message\", {\n        a: 5\n      }]);\n      expect(childFakeLogger.warn).toHaveBeenCalledTimes(1);\n      expect(childFakeLogger.warn).toHaveBeenCalledWith(\"message\", {\n        a: 5\n      });\n    });","file":"unit/loggers/winston.spec.js","skipped":false,"dir":"test"},{"name":"should not create child logger if level is null","suites":["Test Winston logger class","Test getLogHandler method"],"updatePoint":{"line":206,"column":55},"line":206,"code":"    it(\"should not create child logger if level is null\", () => {\n      fakeLogger.child.mockClear();\n      childFakeLogger.warn.mockClear();\n      const logger = new WinstonLogger();\n      logger.init(loggerFactory);\n      logger.getLogLevel = jest.fn();\n      const logHandler = logger.getLogHandler({\n        mod: \"my-service\",\n        nodeID: \"node-1\"\n      });\n      expect(logHandler).toBeNull();\n      expect(logger.getLogLevel).toHaveBeenCalledTimes(1);\n      expect(logger.getLogLevel).toHaveBeenCalledWith(\"my-service\");\n    });","file":"unit/loggers/winston.spec.js","skipped":false,"dir":"test"},{"name":"should not create child logger if bindings is null","suites":["Test Winston logger class","Test getLogHandler method"],"updatePoint":{"line":220,"column":58},"line":220,"code":"    it(\"should not create child logger if bindings is null\", () => {\n      fakeLogger.child.mockClear();\n      childFakeLogger.warn.mockClear();\n      const logger = new WinstonLogger();\n      logger.init(loggerFactory);\n      logger.getLogLevel = jest.fn();\n      const logHandler = logger.getLogHandler();\n      expect(logHandler).toBeNull();\n      expect(logger.getLogLevel).toHaveBeenCalledTimes(0);\n    });","file":"unit/loggers/winston.spec.js","skipped":false,"dir":"test"},{"name":"should create MetricRate","suites":["Test MetricRate class"],"updatePoint":{"line":22,"column":30},"line":22,"code":"  it(\"should create MetricRate\", () => {\n    rate = new MetricRate(fakeMetric, fakeMetricItem, 1);\n    expect(rate.metric).toBe(fakeMetric);\n    expect(rate.item).toBe(fakeMetricItem);\n    expect(rate.min).toBe(1);\n    expect(rate.rate).toBe(0);\n    expect(rate.lastValue).toBe(0);\n    expect(rate.lastTickTime).toBe(1234567899990);\n    expect(rate.value).toBeNull();\n    expect(rate.timer).toBeDefined();\n  });","file":"unit/metrics/rates.spec.js","skipped":false,"dir":"test"},{"name":"should set value","suites":["Test MetricRate class"],"updatePoint":{"line":33,"column":22},"line":33,"code":"  it(\"should set value\", () => {\n    expect(rate.value).toBeNull();\n    rate.update(111);\n    expect(rate.value).toBe(111);\n  });","file":"unit/metrics/rates.spec.js","skipped":false,"dir":"test"},{"name":"should call tick method","suites":["Test MetricRate class"],"updatePoint":{"line":38,"column":29},"line":38,"code":"  it(\"should call tick method\", () => {\n    rate.tick = jest.fn();\n    clock.tick(3000);\n    expect(rate.tick).toBeCalledTimes(0);\n    clock.tick(2000);\n    expect(rate.tick).toBeCalledTimes(1);\n    clock.tick(5000);\n    expect(rate.tick).toBeCalledTimes(2);\n  });","file":"unit/metrics/rates.spec.js","skipped":false,"dir":"test"},{"name":"should reset values","suites":["Test MetricRate class"],"updatePoint":{"line":47,"column":25},"line":47,"code":"  it(\"should reset values\", () => {\n    rate.lastValue = 5;\n    rate.value = 10;\n    rate.rate = 12.5;\n    rate.reset();\n    expect(rate.lastValue).toBe(0);\n    expect(rate.value).toBeNull();\n    expect(rate.rate).toBe(0);\n  });","file":"unit/metrics/rates.spec.js","skipped":false,"dir":"test"},{"name":"should first calculate rate","suites":["Test rate calculation"],"updatePoint":{"line":66,"column":33},"line":66,"code":"  it(\"should first calculate rate\", () => {\n    fakeMetric.changed.mockClear();\n    rate.update(100);\n    clock.tick(5000);\n    expect(rate.lastTickTime).toBe(1234567904990);\n    expect(rate.lastValue).toBe(100);\n    expect(rate.value).toBe(100);\n    expect(rate.rate).toBe(600);\n    expect(fakeMetric.changed).toBeCalledTimes(1);\n    expect(fakeMetric.changed).toBeCalledWith(\"value\", {\n      a: 5\n    }, 1234567904990);\n  });","file":"unit/metrics/rates.spec.js","skipped":false,"dir":"test"},{"name":"should calculate rate again #2","suites":["Test rate calculation"],"updatePoint":{"line":79,"column":36},"line":79,"code":"  it(\"should calculate rate again #2\", () => {\n    fakeMetric.changed.mockClear();\n    rate.update(120);\n    clock.tick(5000);\n    expect(rate.lastTickTime).toBe(1234567909990);\n    expect(rate.lastValue).toBe(120);\n    expect(rate.value).toBe(120);\n    expect(rate.rate).toBe(420);\n    expect(fakeMetric.changed).toBeCalledTimes(1);\n    expect(fakeMetric.changed).toBeCalledWith(\"value\", {\n      a: 5\n    }, 1234567909990);\n  });","file":"unit/metrics/rates.spec.js","skipped":false,"dir":"test"},{"name":"should calculate rate again without value update","suites":["Test rate calculation"],"updatePoint":{"line":92,"column":54},"line":92,"code":"  it(\"should calculate rate again without value update\", () => {\n    fakeMetric.changed.mockClear();\n    clock.tick(5000);\n    expect(rate.lastTickTime).toBe(1234567914990);\n    expect(rate.lastValue).toBe(120);\n    expect(rate.value).toBe(120);\n    expect(rate.rate).toBe(210);\n    expect(fakeMetric.changed).toBeCalledTimes(1);\n    expect(fakeMetric.changed).toBeCalledWith(\"value\", {\n      a: 5\n    }, 1234567914990);\n  });","file":"unit/metrics/rates.spec.js","skipped":false,"dir":"test"},{"name":"should rate goes zero","suites":["Test rate calculation"],"updatePoint":{"line":104,"column":27},"line":104,"code":"  it(\"should rate goes zero\", () => {\n    fakeMetric.changed.mockClear();\n    clock.tick(100000);\n    expect(rate.lastTickTime).toBe(1234568014990);\n    expect(rate.lastValue).toBe(120);\n    expect(rate.value).toBe(120);\n    expect(rate.rate).toBe(0);\n    expect(fakeMetric.changed).toBeCalledTimes(13);\n  });","file":"unit/metrics/rates.spec.js","skipped":false,"dir":"test"},{"name":"should create with default options","suites":["Test Metric Registry","Test Constructor"],"updatePoint":{"line":29,"column":42},"line":29,"code":"    it(\"should create with default options\", () => {\n      const metric = new MetricRegistry(broker);\n      expect(metric.broker).toBe(broker);\n      expect(metric.logger).toBeDefined();\n      expect(metric.dirty).toBe(true);\n      expect(metric.opts).toMatchSnapshot();\n      expect(metric.store).toBeInstanceOf(Map);\n      expect(metric.isEnabled()).toBe(true);\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should create with custom options","suites":["Test Metric Registry","Test Constructor"],"updatePoint":{"line":38,"column":41},"line":38,"code":"    it(\"should create with custom options\", () => {\n      const metric = new MetricRegistry(broker, {\n        enabled: false,\n        collectProcessMetrics: false,\n        reporter: \"Prometheus\",\n        defaultBuckets: [1, 2, 3, 4, 5],\n        defaultQuantiles: [0.1, 0.5, 0.9]\n      });\n      expect(metric.broker).toBe(broker);\n      expect(metric.logger).toBeDefined();\n      expect(metric.dirty).toBe(true);\n      expect(metric.opts).toMatchSnapshot();\n      expect(metric.store).toBeInstanceOf(Map);\n      expect(metric.isEnabled()).toBe(false);\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should not create timers & reporter","suites":["Test Metric Registry","Test init method"],"updatePoint":{"line":65,"column":43},"line":65,"code":"    it(\"should not create timers & reporter\", () => {\n      const metric = new MetricRegistry(broker, {\n        collectProcessMetrics: false\n      });\n      MetricCommons.registerCommonMetrics.mockClear();\n      MetricCommons.updateCommonMetrics.mockClear();\n      metric.init();\n      expect(metric.reporter).toBeUndefined();\n      expect(metric.collectTimer).toBeUndefined();\n      expect(MetricCommons.registerCommonMetrics).toHaveBeenCalledTimes(0);\n      expect(MetricCommons.updateCommonMetrics).toHaveBeenCalledTimes(0);\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should create timers & reporter","suites":["Test Metric Registry","Test init method"],"updatePoint":{"line":77,"column":39},"line":77,"code":"    it(\"should create timers & reporter\", () => {\n      const metric = new MetricRegistry(broker, {\n        collectProcessMetrics: true,\n        reporter: \"Event\"\n      });\n      MetricCommons.registerCommonMetrics.mockClear();\n      MetricCommons.updateCommonMetrics.mockClear();\n      metric.init();\n      expect(metric.reporter).toBeInstanceOf(Array);\n      expect(metric.reporter[0]).toBeInstanceOf(MetricReporters.Event);\n      expect(metric.collectTimer).toBeDefined();\n      expect(MetricCommons.registerCommonMetrics).toHaveBeenCalledTimes(1);\n      expect(MetricCommons.updateCommonMetrics).toHaveBeenCalledTimes(1);\n      clock.tick(metric.opts.collectInterval * 1000 + 100);\n      expect(MetricCommons.registerCommonMetrics).toHaveBeenCalledTimes(1);\n      expect(MetricCommons.updateCommonMetrics).toHaveBeenCalledTimes(2);\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should create multiple reporters","suites":["Test Metric Registry","Test init method"],"updatePoint":{"line":94,"column":40},"line":94,"code":"    it(\"should create multiple reporters\", () => {\n      const metric = new MetricRegistry(broker, {\n        collectProcessMetrics: false,\n        reporter: [\"Event\", null, {\n          type: \"Console\"\n        }]\n      });\n      MetricCommons.registerCommonMetrics.mockClear();\n      MetricCommons.updateCommonMetrics.mockClear();\n      metric.init();\n      expect(metric.reporter).toBeInstanceOf(Array);\n      expect(metric.reporter.length).toBe(2);\n      expect(metric.reporter[0]).toBeInstanceOf(MetricReporters.Event);\n      expect(metric.reporter[1]).toBeInstanceOf(MetricReporters.Console);\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should stop reporters","suites":["Test Metric Registry","Test stop method"],"updatePoint":{"line":111,"column":29},"line":111,"code":"    it(\"should stop reporters\", async () => {\n      const broker = new ServiceBroker({\n        logger: false\n      });\n      const metric = new MetricRegistry(broker, {\n        collectProcessMetrics: true,\n        reporter: \"Event\"\n      });\n      metric.init();\n      metric.reporter[0].stop = jest.fn(() => Promise.resolve());\n      await metric.stop();\n      expect(metric.reporter[0].stop).toHaveBeenCalledTimes(1);\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should throw errors if parameter is not valid","suites":["Test Metric Registry","Test register method"],"updatePoint":{"line":132,"column":53},"line":132,"code":"    it(\"should throw errors if parameter is not valid\", () => {\n      expect(() => metric.register()).toThrow(\"Wrong argument. Must be an Object.\");\n      expect(() => metric.register(1)).toThrow(\"Wrong argument. Must be an Object.\");\n      expect(() => metric.register(\"John\")).toThrow(\"Wrong argument. Must be an Object.\");\n      expect(() => metric.register({})).toThrow(\"The metric 'type' property is mandatory.\");\n      expect(() => metric.register({\n        type: \"counter\"\n      })).toThrow(\"The metric 'name' property is mandatory.\");\n      expect(() => metric.register({\n        type: \"counter\",\n        name: \"test!\"\n      })).toThrow(\"The metric 'name' is not valid: test!\");\n      expect(() => metric.register({\n        type: \"counter\",\n        name: \"test\",\n        labelNames: [\"label!\"]\n      })).toThrow(\"The 'test' metric label name is not valid: label!\");\n      expect(() => metric.register({\n        type: \"unknow\",\n        name: \"test\"\n      })).toThrow(\"Invalid metric type 'unknow'.\");\n      expect(metric.store.size).toBe(0);\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should return metric item","suites":["Test Metric Registry","Test register method"],"updatePoint":{"line":155,"column":33},"line":155,"code":"    it(\"should return metric item\", () => {\n      const item = metric.register({\n        type: \"counter\",\n        name: \"test\"\n      });\n      expect(item).toBeInstanceOf(MetricTypes.Counter);\n      expect(metric.store.size).toBe(1);\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should return null if metrics disabled","suites":["Test Metric Registry","Test register method"],"updatePoint":{"line":163,"column":46},"line":163,"code":"    it(\"should return null if metrics disabled\", () => {\n      const metric = new MetricRegistry(broker, {\n        enabled: false,\n        collectProcessMetrics: false\n      });\n      const item = metric.register({\n        type: \"counter\",\n        name: \"test\"\n      });\n      expect(item).toBeNull();\n      expect(metric.store.size).toBe(0);\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should find the stored metrics if metrics enabled","suites":["Test Metric Registry","Test hasMetric method"],"updatePoint":{"line":180,"column":57},"line":180,"code":"    it(\"should find the stored metrics if metrics enabled\", () => {\n      const metric = new MetricRegistry(broker, {\n        collectProcessMetrics: false\n      });\n      metric.register({\n        name: \"test.first\",\n        type: \"counter\"\n      });\n      metric.register({\n        name: \"test.second\",\n        type: \"gauge\"\n      });\n      expect(metric.hasMetric(\"test.first\")).toBe(true);\n      expect(metric.hasMetric(\"test.second\")).toBe(true);\n      expect(metric.hasMetric(\"test.third\")).toBe(false);\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should not find if metrics disabled","suites":["Test Metric Registry","Test hasMetric method"],"updatePoint":{"line":196,"column":43},"line":196,"code":"    it(\"should not find if metrics disabled\", () => {\n      const metric = new MetricRegistry(broker, {\n        enabled: false,\n        collectProcessMetrics: false\n      });\n      metric.register({\n        name: \"test.first\",\n        type: \"counter\"\n      });\n      metric.register({\n        name: \"test.second\",\n        type: \"gauge\"\n      });\n      expect(metric.hasMetric(\"test.first\")).toBe(false);\n      expect(metric.hasMetric(\"test.second\")).toBe(false);\n      expect(metric.hasMetric(\"test.third\")).toBe(false);\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should return the stored metrics if metrics enabled","suites":["Test Metric Registry","Test getMetric method"],"updatePoint":{"line":218,"column":59},"line":218,"code":"    it(\"should return the stored metrics if metrics enabled\", () => {\n      const metric = new MetricRegistry(broker, {\n        collectProcessMetrics: false\n      });\n      metric.register({\n        name: \"test.first\",\n        type: \"counter\"\n      });\n      metric.register({\n        name: \"test.second\",\n        type: \"gauge\"\n      });\n      expect(metric.getMetric(\"test.first\")).toBeDefined();\n      expect(metric.getMetric(\"test.second\")).toBeDefined();\n      expect(metric.getMetric(\"test.third\")).toBeNull();\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should return null if metrics disabled","suites":["Test Metric Registry","Test getMetric method"],"updatePoint":{"line":234,"column":46},"line":234,"code":"    it(\"should return null if metrics disabled\", () => {\n      const metric = new MetricRegistry(broker, {\n        enabled: false,\n        collectProcessMetrics: false\n      });\n      metric.register({\n        name: \"test.first\",\n        type: \"counter\"\n      });\n      metric.register({\n        name: \"test.second\",\n        type: \"gauge\"\n      });\n      expect(metric.getMetric(\"test.first\")).toBeNull();\n      expect(metric.getMetric(\"test.second\")).toBeNull();\n      expect(metric.getMetric(\"test.third\")).toBeNull();\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should call increment method without params","suites":["Test Metric Registry","Test increment method"],"updatePoint":{"line":264,"column":51},"line":264,"code":"    it(\"should call increment method without params\", () => {\n      metric.increment(\"test.counter\");\n      expect(counter.increment).toHaveBeenCalledTimes(1);\n      expect(counter.increment).toHaveBeenCalledWith(undefined, 1, undefined);\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should call increment method with params","suites":["Test Metric Registry","Test increment method"],"updatePoint":{"line":269,"column":48},"line":269,"code":"    it(\"should call increment method with params\", () => {\n      counter.increment.mockClear();\n      const now = Date.now();\n      metric.increment(\"test.counter\", {\n        a: 5\n      }, 3, now);\n      expect(counter.increment).toHaveBeenCalledTimes(1);\n      expect(counter.increment).toHaveBeenCalledWith({\n        a: 5\n      }, 3, now);\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should throw error if increment method is not exist","suites":["Test Metric Registry","Test increment method"],"updatePoint":{"line":280,"column":59},"line":280,"code":"    it(\"should throw error if increment method is not exist\", () => {\n      metric.register({\n        type: \"histogram\",\n        name: \"test.histogram\"\n      });\n      expect(() => metric.increment(\"test.histogram\")).toThrow(\"Invalid metric type. Incrementing works only with counter & gauge metric types.\");\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should not call increment method if metric disabled","suites":["Test Metric Registry","Test increment method"],"updatePoint":{"line":287,"column":59},"line":287,"code":"    it(\"should not call increment method if metric disabled\", () => {\n      counter.increment.mockClear();\n      metric.opts.enabled = false;\n      metric.increment(\"test.counter\");\n      expect(counter.increment).toHaveBeenCalledTimes(0);\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should call decrement method without params","suites":["Test Metric Registry","Test decrement method"],"updatePoint":{"line":306,"column":51},"line":306,"code":"    it(\"should call decrement method without params\", () => {\n      metric.decrement(\"test.gauge\");\n      expect(gauge.decrement).toHaveBeenCalledTimes(1);\n      expect(gauge.decrement).toHaveBeenCalledWith(undefined, 1, undefined);\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should call decrement method with params","suites":["Test Metric Registry","Test decrement method"],"updatePoint":{"line":311,"column":48},"line":311,"code":"    it(\"should call decrement method with params\", () => {\n      gauge.decrement.mockClear();\n      const now = Date.now();\n      metric.decrement(\"test.gauge\", {\n        a: 5\n      }, 3, now);\n      expect(gauge.decrement).toHaveBeenCalledTimes(1);\n      expect(gauge.decrement).toHaveBeenCalledWith({\n        a: 5\n      }, 3, now);\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should throw error if metric has no decrement method","suites":["Test Metric Registry","Test decrement method"],"updatePoint":{"line":322,"column":60},"line":322,"code":"    it(\"should throw error if metric has no decrement method\", () => {\n      metric.register({\n        type: \"counter\",\n        name: \"test.counter\"\n      });\n      expect(() => metric.decrement(\"test.counter\")).toThrow(\"Counter can't be decreased.\");\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should throw error if decrement method is not exist","suites":["Test Metric Registry","Test decrement method"],"updatePoint":{"line":329,"column":59},"line":329,"code":"    it(\"should throw error if decrement method is not exist\", () => {\n      metric.register({\n        type: \"histogram\",\n        name: \"test.histogram\"\n      });\n      expect(() => metric.decrement(\"test.histogram\")).toThrow(\"Invalid metric type. Decrementing works only with gauge metric type.\");\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should not call decrement method if metric disabled","suites":["Test Metric Registry","Test decrement method"],"updatePoint":{"line":336,"column":59},"line":336,"code":"    it(\"should not call decrement method if metric disabled\", () => {\n      gauge.decrement.mockClear();\n      metric.opts.enabled = false;\n      metric.decrement(\"test.gauge\");\n      expect(gauge.decrement).toHaveBeenCalledTimes(0);\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should call set method without params","suites":["Test Metric Registry","Test set method"],"updatePoint":{"line":355,"column":45},"line":355,"code":"    it(\"should call set method without params\", () => {\n      metric.set(\"test.info\", 8);\n      expect(info.set).toHaveBeenCalledTimes(1);\n      expect(info.set).toHaveBeenCalledWith(8, undefined, undefined);\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should call set method with params","suites":["Test Metric Registry","Test set method"],"updatePoint":{"line":360,"column":42},"line":360,"code":"    it(\"should call set method with params\", () => {\n      info.set.mockClear();\n      const now = Date.now();\n      metric.set(\"test.info\", 8, {\n        a: 5\n      }, now);\n      expect(info.set).toHaveBeenCalledTimes(1);\n      expect(info.set).toHaveBeenCalledWith(8, {\n        a: 5\n      }, now);\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should throw error if set method is not exist","suites":["Test Metric Registry","Test set method"],"updatePoint":{"line":371,"column":53},"line":371,"code":"    it(\"should throw error if set method is not exist\", () => {\n      metric.register({\n        type: \"histogram\",\n        name: \"test.histogram\"\n      });\n      expect(() => metric.set(\"test.histogram\")).toThrow(\"Invalid metric type. Value setting works only with counter, gauge & info metric types.\");\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should not call set method if metric disabled","suites":["Test Metric Registry","Test set method"],"updatePoint":{"line":378,"column":53},"line":378,"code":"    it(\"should not call set method if metric disabled\", () => {\n      info.set.mockClear();\n      metric.opts.enabled = false;\n      metric.set(\"test.info\");\n      expect(info.set).toHaveBeenCalledTimes(0);\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should call observe method without params","suites":["Test Metric Registry","Test observe method"],"updatePoint":{"line":397,"column":49},"line":397,"code":"    it(\"should call observe method without params\", () => {\n      metric.observe(\"test.histogram\", 8);\n      expect(histogram.observe).toHaveBeenCalledTimes(1);\n      expect(histogram.observe).toHaveBeenCalledWith(8, undefined, undefined);\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should call observe method with params","suites":["Test Metric Registry","Test observe method"],"updatePoint":{"line":402,"column":46},"line":402,"code":"    it(\"should call observe method with params\", () => {\n      histogram.observe.mockClear();\n      const now = Date.now();\n      metric.observe(\"test.histogram\", 8, {\n        a: 5\n      }, now);\n      expect(histogram.observe).toHaveBeenCalledTimes(1);\n      expect(histogram.observe).toHaveBeenCalledWith(8, {\n        a: 5\n      }, now);\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should throw error if observe method is not exist","suites":["Test Metric Registry","Test observe method"],"updatePoint":{"line":413,"column":57},"line":413,"code":"    it(\"should throw error if observe method is not exist\", () => {\n      metric.register({\n        type: \"counter\",\n        name: \"test.counter\"\n      });\n      expect(() => metric.observe(\"test.counter\")).toThrow(\"Invalid metric type. Observing works only with histogram metric type.\");\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should not call observe method if metric disabled","suites":["Test Metric Registry","Test observe method"],"updatePoint":{"line":420,"column":57},"line":420,"code":"    it(\"should not call observe method if metric disabled\", () => {\n      histogram.observe.mockClear();\n      metric.opts.enabled = false;\n      metric.observe(\"test.histogram\");\n      expect(histogram.observe).toHaveBeenCalledTimes(0);\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should call reset method without params","suites":["Test Metric Registry","Test reset method"],"updatePoint":{"line":439,"column":47},"line":439,"code":"    it(\"should call reset method without params\", () => {\n      metric.reset(\"test.histogram\", 8);\n      expect(histogram.reset).toHaveBeenCalledTimes(1);\n      expect(histogram.reset).toHaveBeenCalledWith(8, undefined);\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should call reset method with params","suites":["Test Metric Registry","Test reset method"],"updatePoint":{"line":444,"column":44},"line":444,"code":"    it(\"should call reset method with params\", () => {\n      histogram.reset.mockClear();\n      metric.reset(\"test.histogram\", 8, {\n        a: 5\n      });\n      expect(histogram.reset).toHaveBeenCalledTimes(1);\n      expect(histogram.reset).toHaveBeenCalledWith(8, {\n        a: 5\n      });\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should not call reset method if metric disabled","suites":["Test Metric Registry","Test reset method"],"updatePoint":{"line":454,"column":55},"line":454,"code":"    it(\"should not call reset method if metric disabled\", () => {\n      histogram.reset.mockClear();\n      metric.opts.enabled = false;\n      metric.reset(\"test.histogram\");\n      expect(histogram.reset).toHaveBeenCalledTimes(0);\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should call resetAll method without params","suites":["Test Metric Registry","Test resetAll method"],"updatePoint":{"line":473,"column":50},"line":473,"code":"    it(\"should call resetAll method without params\", () => {\n      metric.resetAll(\"test.histogram\");\n      expect(histogram.resetAll).toHaveBeenCalledTimes(1);\n      expect(histogram.resetAll).toHaveBeenCalledWith(undefined);\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should call resetAll method with params","suites":["Test Metric Registry","Test resetAll method"],"updatePoint":{"line":478,"column":47},"line":478,"code":"    it(\"should call resetAll method with params\", () => {\n      histogram.resetAll.mockClear();\n      const now = Date.now();\n      metric.resetAll(\"test.histogram\", now);\n      expect(histogram.resetAll).toHaveBeenCalledTimes(1);\n      expect(histogram.resetAll).toHaveBeenCalledWith(now);\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should not call resetAll method if metric disabled","suites":["Test Metric Registry","Test resetAll method"],"updatePoint":{"line":485,"column":58},"line":485,"code":"    it(\"should not call resetAll method if metric disabled\", () => {\n      histogram.resetAll.mockClear();\n      metric.opts.enabled = false;\n      metric.resetAll(\"test.histogram\");\n      expect(histogram.resetAll).toHaveBeenCalledTimes(0);\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should call gauge.set method","suites":["Test Metric Registry","Test timer method"],"updatePoint":{"line":509,"column":36},"line":509,"code":"    it(\"should call gauge.set method\", () => {\n      const timeEnd = metric.timer(\"test.gauge\");\n      expect(gauge.set).toHaveBeenCalledTimes(0);\n      const duration = timeEnd();\n      expect(duration).toBeGreaterThan(0.001);\n      expect(gauge.set).toHaveBeenCalledTimes(1);\n      expect(gauge.set).toHaveBeenCalledWith(expect.any(Number), undefined, undefined);\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should call gauge.set method with params","suites":["Test Metric Registry","Test timer method"],"updatePoint":{"line":517,"column":48},"line":517,"code":"    it(\"should call gauge.set method with params\", () => {\n      gauge.set.mockClear();\n      const now = Date.now();\n      const timeEnd = metric.timer(\"test.gauge\", {\n        a: 5\n      }, now);\n      expect(gauge.set).toHaveBeenCalledTimes(0);\n      const duration = timeEnd();\n      expect(duration).toBeGreaterThan(0.001);\n      expect(gauge.set).toHaveBeenCalledTimes(1);\n      expect(gauge.set).toHaveBeenCalledWith(expect.any(Number), {\n        a: 5\n      }, now);\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should call histogram.observe method","suites":["Test Metric Registry","Test timer method"],"updatePoint":{"line":531,"column":44},"line":531,"code":"    it(\"should call histogram.observe method\", () => {\n      const timeEnd = metric.timer(\"test.histogram\");\n      expect(histogram.observe).toHaveBeenCalledTimes(0);\n      const duration = timeEnd();\n      expect(duration).toBeGreaterThan(0.001);\n      expect(histogram.observe).toHaveBeenCalledTimes(1);\n      expect(histogram.observe).toHaveBeenCalledWith(expect.any(Number), undefined, undefined);\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should call histogram.observe method with params","suites":["Test Metric Registry","Test timer method"],"updatePoint":{"line":539,"column":56},"line":539,"code":"    it(\"should call histogram.observe method with params\", () => {\n      histogram.observe.mockClear();\n      const now = Date.now();\n      const timeEnd = metric.timer(\"test.histogram\", {\n        a: 5\n      }, now);\n      expect(histogram.observe).toHaveBeenCalledTimes(0);\n      const duration = timeEnd();\n      expect(duration).toBeGreaterThan(0.001);\n      expect(histogram.observe).toHaveBeenCalledTimes(1);\n      expect(histogram.observe).toHaveBeenCalledWith(expect.any(Number), {\n        a: 5\n      }, now);\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should not call gauge.set method if metric disabled","suites":["Test Metric Registry","Test timer method"],"updatePoint":{"line":553,"column":59},"line":553,"code":"    it(\"should not call gauge.set method if metric disabled\", () => {\n      gauge.set.mockClear();\n      metric.opts.enabled = false;\n      const timeEnd = metric.timer(\"test.gauge\");\n      expect(gauge.set).toHaveBeenCalledTimes(0);\n      const duration = timeEnd();\n      expect(duration).toBeGreaterThan(0.001);\n      expect(gauge.set).toHaveBeenCalledTimes(0);\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should call metricChanged method of reporters","suites":["Test Metric Registry","Test changed method"],"updatePoint":{"line":577,"column":53},"line":577,"code":"    it(\"should call metricChanged method of reporters\", () => {\n      metric.changed(\"test.counter\", 5.3, labels, 123456);\n      expect(metric.reporter[0].metricChanged).toHaveBeenCalledTimes(1);\n      expect(metric.reporter[0].metricChanged).toHaveBeenCalledWith(\"test.counter\", 5.3, labels, 123456);\n      expect(metric.reporter[1].metricChanged).toHaveBeenCalledTimes(1);\n      expect(metric.reporter[1].metricChanged).toHaveBeenCalledWith(\"test.counter\", 5.3, labels, 123456);\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should list all metrics","suites":["Test Metric Registry","Test list method"],"updatePoint":{"line":630,"column":31},"line":630,"code":"    it(\"should list all metrics\", () => {\n      const res = registry.list();\n      expect(res).toEqual([{\n        name: \"os.datetime.utc\",\n        type: \"gauge\"\n      }, {\n        name: \"test.info\",\n        type: \"info\"\n      }, {\n        name: \"test.counter\",\n        type: \"counter\"\n      }, {\n        name: \"test.gauge-total\",\n        type: \"gauge\"\n      }, {\n        name: \"test.histogram\",\n        type: \"histogram\"\n      }]);\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should filtering type","suites":["Test Metric Registry","Test list method"],"updatePoint":{"line":649,"column":29},"line":649,"code":"    it(\"should filtering type\", () => {\n      const res = registry.list({\n        types: \"counter\"\n      });\n      expect(res).toEqual([{\n        name: \"test.counter\",\n        type: \"counter\"\n      }]);\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should filtering types","suites":["Test Metric Registry","Test list method"],"updatePoint":{"line":658,"column":30},"line":658,"code":"    it(\"should filtering types\", () => {\n      const res = registry.list({\n        types: [\"counter\", \"histogram\"]\n      });\n      expect(res).toEqual([{\n        name: \"test.counter\",\n        type: \"counter\"\n      }, {\n        name: \"test.histogram\",\n        type: \"histogram\"\n      }]);\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should filtering includes","suites":["Test Metric Registry","Test list method"],"updatePoint":{"line":670,"column":33},"line":670,"code":"    it(\"should filtering includes\", () => {\n      const res = registry.list({\n        includes: \"test.counter\"\n      });\n      expect(res).toEqual([{\n        name: \"test.counter\",\n        type: \"counter\"\n      }]);\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should filtering multi includes","suites":["Test Metric Registry","Test list method"],"updatePoint":{"line":679,"column":39},"line":679,"code":"    it(\"should filtering multi includes\", () => {\n      const res = registry.list({\n        includes: [\"test.co**\", \"os.**\"]\n      });\n      expect(res).toEqual([{\n        name: \"os.datetime.utc\",\n        type: \"gauge\"\n      }, {\n        name: \"test.counter\",\n        type: \"counter\"\n      }]);\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should filtering excludes","suites":["Test Metric Registry","Test list method"],"updatePoint":{"line":691,"column":33},"line":691,"code":"    it(\"should filtering excludes\", () => {\n      const res = registry.list({\n        excludes: \"test.**\"\n      });\n      expect(res).toEqual([{\n        name: \"os.datetime.utc\",\n        type: \"gauge\"\n      }]);\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should filtering multi excludes","suites":["Test Metric Registry","Test list method"],"updatePoint":{"line":700,"column":39},"line":700,"code":"    it(\"should filtering multi excludes\", () => {\n      const res = registry.list({\n        excludes: [\"test.counter\", \"os.**\"]\n      });\n      expect(res).toEqual([{\n        name: \"test.info\",\n        type: \"info\"\n      }, {\n        name: \"test.gauge-total\",\n        type: \"gauge\"\n      }, {\n        name: \"test.histogram\",\n        type: \"histogram\"\n      }]);\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should filtering all","suites":["Test Metric Registry","Test list method"],"updatePoint":{"line":715,"column":28},"line":715,"code":"    it(\"should filtering all\", () => {\n      const res = registry.list({\n        types: [\"counter\", \"gauge\"],\n        includes: \"test.**\",\n        excludes: [\"test.counter\"]\n      });\n      expect(res).toEqual([{\n        name: \"test.gauge-total\",\n        type: \"gauge\"\n      }]);\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should pluralize units","suites":["Test Metric Registry","Test pluralizeUnit method"],"updatePoint":{"line":733,"column":30},"line":733,"code":"    it(\"should pluralize units\", () => {\n      expect(metric.pluralizeUnit(METRIC.UNIT_REQUEST)).toBe(\"requests\");\n      expect(metric.pluralizeUnit(METRIC.UNIT_BYTE)).toBe(\"bytes\");\n      expect(metric.pluralizeUnit(METRIC.UNIT_GHZ)).toBe(\"GHz\");\n    });","file":"unit/metrics/registry.spec.js","skipped":false,"dir":"test"},{"name":"should create with default options","suites":["Test Base Reporter class","Test Constructor"],"updatePoint":{"line":7,"column":42},"line":7,"code":"    it(\"should create with default options\", () => {\n      const reporter = new BaseReporter();\n      expect(reporter.opts).toEqual({\n        includes: null,\n        excludes: null,\n        metricNamePrefix: null,\n        metricNameSuffix: null,\n        metricNameFormatter: null,\n        labelNameFormatter: null\n      });\n    });","file":"unit/metrics/reporters/base.spec.js","skipped":false,"dir":"test"},{"name":"should create with custom options","suites":["Test Base Reporter class","Test Constructor"],"updatePoint":{"line":18,"column":41},"line":18,"code":"    it(\"should create with custom options\", () => {\n      const reporter = new BaseReporter({\n        metricNamePrefix: \"mol-\",\n        metricNameSuffix: \".data\",\n        includes: \"moleculer.**\",\n        excludes: [\"moleculer.circuit-breaker.**\", \"moleculer.custom.**\"],\n        metricNameFormatter: () => {},\n        labelNameFormatter: () => {}\n      });\n      expect(reporter.opts).toEqual({\n        metricNamePrefix: \"mol-\",\n        metricNameSuffix: \".data\",\n        includes: [\"moleculer.**\"],\n        excludes: [\"moleculer.circuit-breaker.**\", \"moleculer.custom.**\"],\n        metricNameFormatter: expect.any(Function),\n        labelNameFormatter: expect.any(Function)\n      });\n    });","file":"unit/metrics/reporters/base.spec.js","skipped":false,"dir":"test"},{"name":"init - should set internal variables","suites":["Test Base Reporter class","Test init & stop methods"],"updatePoint":{"line":38,"column":44},"line":38,"code":"    it(\"init - should set internal variables\", () => {\n      const fakeBroker = {};\n      const fakeRegistry = {\n        broker: fakeBroker,\n        logger: {}\n      };\n      const reporter = new BaseReporter();\n      reporter.init(fakeRegistry);\n      expect(reporter.registry).toBe(fakeRegistry);\n      expect(reporter.broker).toBe(fakeBroker);\n      expect(reporter.logger).toBe(fakeRegistry.logger);\n    });","file":"unit/metrics/reporters/base.spec.js","skipped":false,"dir":"test"},{"name":"stop - should return a promise","suites":["Test Base Reporter class","Test init & stop methods"],"updatePoint":{"line":50,"column":38},"line":50,"code":"    it(\"stop - should return a promise\", () => {\n      const reporter = new BaseReporter();\n      expect(reporter.stop()).toBeInstanceOf(Promise);\n    });","file":"unit/metrics/reporters/base.spec.js","skipped":false,"dir":"test"},{"name":"should match included metrics","suites":["Test Base Reporter class","Test matchMetricName method"],"updatePoint":{"line":56,"column":37},"line":56,"code":"    it(\"should match included metrics\", () => {\n      const reporter = new BaseReporter({\n        includes: \"moleculer.broker.**\"\n      });\n      expect(reporter.matchMetricName(\"moleculer.node.type\")).toBe(false);\n      expect(reporter.matchMetricName(\"moleculer.broker.namespace\")).toBe(true);\n      expect(reporter.matchMetricName(\"moleculer.broker.local.services.total\")).toBe(true);\n      expect(reporter.matchMetricName(\"os.cpu.info.times.sys\")).toBe(false);\n    });","file":"unit/metrics/reporters/base.spec.js","skipped":false,"dir":"test"},{"name":"should not match excluded metrics","suites":["Test Base Reporter class","Test matchMetricName method"],"updatePoint":{"line":65,"column":41},"line":65,"code":"    it(\"should not match excluded metrics\", () => {\n      const reporter = new BaseReporter({\n        excludes: [\"moleculer.broker.**\", \"process.eventloop.**\"]\n      });\n      expect(reporter.matchMetricName(\"moleculer.node.type\")).toBe(true);\n      expect(reporter.matchMetricName(\"moleculer.broker.namespace\")).toBe(false);\n      expect(reporter.matchMetricName(\"moleculer.broker.local.services.total\")).toBe(false);\n      expect(reporter.matchMetricName(\"os.cpu.info.times.sys\")).toBe(true);\n      expect(reporter.matchMetricName(\"process.eventloop.lag.min\")).toBe(false);\n    });","file":"unit/metrics/reporters/base.spec.js","skipped":false,"dir":"test"},{"name":"should match included & excluded metrics","suites":["Test Base Reporter class","Test matchMetricName method"],"updatePoint":{"line":75,"column":48},"line":75,"code":"    it(\"should match included & excluded metrics\", () => {\n      const reporter = new BaseReporter({\n        includes: [\"moleculer.**.total\"],\n        excludes: [\"moleculer.broker.**\", \"moleculer.request.**\"]\n      });\n      expect(reporter.matchMetricName(\"moleculer.registry.nodes.total\")).toBe(true);\n      expect(reporter.matchMetricName(\"moleculer.broker.namespace\")).toBe(false);\n      expect(reporter.matchMetricName(\"moleculer.broker.local.services.total\")).toBe(false);\n      expect(reporter.matchMetricName(\"moleculer.request.timeout.total\")).toBe(false);\n      expect(reporter.matchMetricName(\"moleculer.request.bulkhead.inflight\")).toBe(false);\n      expect(reporter.matchMetricName(\"moleculer.cacher.get.total\")).toBe(true);\n      expect(reporter.matchMetricName(\"moleculer.cacher.get.time\")).toBe(false);\n      expect(reporter.matchMetricName(\"os.cpu.info.times.sys\")).toBe(false);\n    });","file":"unit/metrics/reporters/base.spec.js","skipped":false,"dir":"test"},{"name":"should not format metric name","suites":["Test Base Reporter class","Test formatMetricName method"],"updatePoint":{"line":91,"column":37},"line":91,"code":"    it(\"should not format metric name\", () => {\n      const reporter = new BaseReporter({});\n      expect(reporter.formatMetricName(\"moleculer.node.type\")).toBe(\"moleculer.node.type\");\n      expect(reporter.formatMetricName(\"\")).toBe(\"\");\n    });","file":"unit/metrics/reporters/base.spec.js","skipped":false,"dir":"test"},{"name":"should format metric name with prefix & suffix","suites":["Test Base Reporter class","Test formatMetricName method"],"updatePoint":{"line":96,"column":54},"line":96,"code":"    it(\"should format metric name with prefix & suffix\", () => {\n      const reporter = new BaseReporter({\n        metricNamePrefix: \"mol:\",\n        metricNameSuffix: \".value\"\n      });\n      expect(reporter.formatMetricName(\"moleculer.node.type\")).toBe(\"mol:moleculer.node.type.value\");\n      expect(reporter.formatMetricName(\"\")).toBe(\"mol:.value\");\n    });","file":"unit/metrics/reporters/base.spec.js","skipped":false,"dir":"test"},{"name":"should format metric name with custom formatter","suites":["Test Base Reporter class","Test formatMetricName method"],"updatePoint":{"line":104,"column":55},"line":104,"code":"    it(\"should format metric name with custom formatter\", () => {\n      const reporter = new BaseReporter({\n        metricNamePrefix: \"mol:\",\n        metricNameSuffix: \".value\",\n        metricNameFormatter: name => name.toUpperCase().replace(/[.:]/g, \"_\")\n      });\n      expect(reporter.formatMetricName(\"moleculer.node.type\")).toBe(\"MOL_MOLECULER_NODE_TYPE_VALUE\");\n      expect(reporter.formatMetricName(\"\")).toBe(\"MOL__VALUE\");\n    });","file":"unit/metrics/reporters/base.spec.js","skipped":false,"dir":"test"},{"name":"should not format label name","suites":["Test Base Reporter class","Test formatLabelName method"],"updatePoint":{"line":115,"column":36},"line":115,"code":"    it(\"should not format label name\", () => {\n      const reporter = new BaseReporter();\n      expect(reporter.formatLabelName(\"action.name\")).toBe(\"action.name\");\n      expect(reporter.formatLabelName(\"\")).toBe(\"\");\n    });","file":"unit/metrics/reporters/base.spec.js","skipped":false,"dir":"test"},{"name":"should format label name with custom formatter","suites":["Test Base Reporter class","Test formatLabelName method"],"updatePoint":{"line":120,"column":54},"line":120,"code":"    it(\"should format label name with custom formatter\", () => {\n      const reporter = new BaseReporter({\n        labelNameFormatter: name => name.toUpperCase().replace(/[.:]/g, \"_\")\n      });\n      expect(reporter.formatLabelName(\"action.name\")).toBe(\"ACTION_NAME\");\n      expect(reporter.formatLabelName(\"\")).toBe(\"\");\n    });","file":"unit/metrics/reporters/base.spec.js","skipped":false,"dir":"test"},{"name":"should create with default options","suites":["Test ConsoleReporter class","Test Constructor"],"updatePoint":{"line":13,"column":42},"line":13,"code":"    it(\"should create with default options\", () => {\n      const reporter = new ConsoleReporter();\n      expect(reporter.opts).toEqual({\n        includes: null,\n        excludes: null,\n        metricNamePrefix: null,\n        metricNameSuffix: null,\n        metricNameFormatter: null,\n        labelNameFormatter: null,\n        interval: 5,\n        logger: null,\n        colors: true,\n        onlyChanges: true\n      });\n      expect(reporter.lastChanges).toBeInstanceOf(Set);\n    });","file":"unit/metrics/reporters/console.spec.js","skipped":false,"dir":"test"},{"name":"should create with custom options","suites":["Test ConsoleReporter class","Test Constructor"],"updatePoint":{"line":29,"column":41},"line":29,"code":"    it(\"should create with custom options\", () => {\n      const reporter = new ConsoleReporter({\n        metricNamePrefix: \"mol-\",\n        metricNameSuffix: \".data\",\n        includes: \"moleculer.**\",\n        excludes: [\"moleculer.circuit-breaker.**\", \"moleculer.custom.**\"],\n        metricNameFormatter: () => {},\n        labelNameFormatter: () => {},\n        interval: 10,\n        logger: {},\n        colors: false,\n        onlyChanges: false\n      });\n      expect(reporter.opts).toEqual({\n        metricNamePrefix: \"mol-\",\n        metricNameSuffix: \".data\",\n        includes: [\"moleculer.**\"],\n        excludes: [\"moleculer.circuit-breaker.**\", \"moleculer.custom.**\"],\n        metricNameFormatter: expect.any(Function),\n        labelNameFormatter: expect.any(Function),\n        interval: 10,\n        logger: {},\n        colors: false,\n        onlyChanges: false\n      });\n    });","file":"unit/metrics/reporters/console.spec.js","skipped":false,"dir":"test"},{"name":"should start timer","suites":["Test ConsoleReporter class","Test init method"],"updatePoint":{"line":60,"column":26},"line":60,"code":"    it(\"should start timer\", () => {\n      const fakeBroker = {\n        nodeID: \"node-123\",\n        namespace: \"test-ns\"\n      };\n      const fakeRegistry = {\n        broker: fakeBroker\n      };\n      const reporter = new ConsoleReporter({\n        interval: 2\n      });\n      reporter.print = jest.fn();\n      reporter.init(fakeRegistry);\n      expect(reporter.timer).toBeDefined();\n      expect(reporter.print).toBeCalledTimes(0);\n      clock.tick(2500);\n      expect(reporter.print).toBeCalledTimes(1);\n    });","file":"unit/metrics/reporters/console.spec.js","skipped":false,"dir":"test"},{"name":"should not start timer","suites":["Test ConsoleReporter class","Test init method"],"updatePoint":{"line":78,"column":30},"line":78,"code":"    it(\"should not start timer\", () => {\n      const fakeBroker = {\n        nodeID: \"node-123\",\n        namespace: \"test-ns\"\n      };\n      const fakeRegistry = {\n        broker: fakeBroker\n      };\n      const reporter = new ConsoleReporter({\n        interval: 0\n      });\n      reporter.print = jest.fn();\n      reporter.init(fakeRegistry);\n      expect(reporter.timer).toBeUndefined();\n      expect(reporter.print).toBeCalledTimes(0);\n      clock.tick(2500);\n      expect(reporter.print).toBeCalledTimes(0);\n    });","file":"unit/metrics/reporters/console.spec.js","skipped":false,"dir":"test"},{"name":"should print lines to the logger","suites":["Test ConsoleReporter class","Test print method"],"updatePoint":{"line":110,"column":40},"line":110,"code":"    it(\"should print lines to the logger\", () => {\n      const reporter = new ConsoleReporter({\n        interval: 0,\n        colors: false,\n        onlyChanges: false,\n        logger\n      });\n      reporter.init(registry);\n      registry.register({\n        name: \"os.datetime.utc\",\n        type: \"gauge\"\n      }).set(123456);\n      registry.register({\n        name: \"test.info\",\n        type: \"info\",\n        description: \"Test Info Metric\"\n      }).set(\"Test Value\");\n      registry.register({\n        name: \"test.counter\",\n        type: \"counter\",\n        labelNames: [\"action\"],\n        description: \"Test Counter Metric\"\n      });\n      registry.increment(\"test.counter\", null, 5);\n      registry.increment(\"test.counter\", {\n        action: \"posts\\\\comments\"\n      }, 8);\n      registry.register({\n        name: \"test.gauge-total\",\n        type: \"gauge\",\n        labelNames: [\"action\"],\n        description: \"Test Gauge Metric\"\n      });\n      registry.decrement(\"test.gauge-total\", {\n        action: 'users-\"John\"'\n      }, 8);\n      registry.set(\"test.gauge-total\", {\n        action: \"posts\"\n      }, null);\n      registry.register({\n        name: \"test.histogram\",\n        type: \"histogram\",\n        labelNames: [\"action\"],\n        buckets: true,\n        quantiles: true,\n        unit: \"byte\"\n      });\n      registry.observe(\"test.histogram\", 8, null);\n      registry.observe(\"test.histogram\", 2, null);\n      registry.observe(\"test.histogram\", 6, null);\n      registry.observe(\"test.histogram\", 2, null);\n      registry.observe(\"test.histogram\", 1, {\n        action: \"auth\"\n      });\n      registry.observe(\"test.histogram\", 3, {\n        action: \"auth\"\n      });\n      registry.observe(\"test.histogram\", 7, {\n        action: \"auth\"\n      });\n      reporter.print();\n      expect(LOG_STORE).toMatchSnapshot();\n    });","file":"unit/metrics/reporters/console.spec.js","skipped":false,"dir":"test"},{"name":"should not print lines to the logger","suites":["Test ConsoleReporter class","Test print method with onlyChanges"],"updatePoint":{"line":200,"column":44},"line":200,"code":"    it(\"should not print lines to the logger\", () => {\n      registry.register({\n        name: \"os.datetime.utc\",\n        type: \"gauge\"\n      }).set(123456);\n      registry.register({\n        name: \"test.info\",\n        type: \"info\",\n        description: \"Test Info Metric\"\n      }).set(\"Test Value\");\n      registry.register({\n        name: \"test.counter\",\n        type: \"counter\",\n        labelNames: [\"action\"],\n        description: \"Test Counter Metric\"\n      });\n      registry.increment(\"test.counter\", null, 5);\n      registry.increment(\"test.counter\", {\n        action: \"posts\\\\comments\"\n      }, 8);\n      registry.register({\n        name: \"test.gauge-total\",\n        type: \"gauge\",\n        labelNames: [\"action\"],\n        description: \"Test Gauge Metric\"\n      });\n      registry.decrement(\"test.gauge-total\", {\n        action: 'users-\"John\"'\n      }, 8);\n      registry.set(\"test.gauge-total\", {\n        action: \"posts\"\n      }, null);\n      registry.register({\n        name: \"test.histogram\",\n        type: \"histogram\",\n        labelNames: [\"action\"],\n        buckets: true,\n        quantiles: true,\n        unit: \"byte\"\n      });\n      registry.observe(\"test.histogram\", 8, null);\n      registry.observe(\"test.histogram\", 2, null);\n      registry.observe(\"test.histogram\", 6, null);\n      registry.observe(\"test.histogram\", 2, null);\n      registry.observe(\"test.histogram\", 1, {\n        action: \"auth\"\n      });\n      registry.observe(\"test.histogram\", 3, {\n        action: \"auth\"\n      });\n      registry.observe(\"test.histogram\", 7, {\n        action: \"auth\"\n      });\n      reporter.print();\n      expect(LOG_STORE).toMatchSnapshot();\n    });","file":"unit/metrics/reporters/console.spec.js","skipped":false,"dir":"test"},{"name":"should print changes only","suites":["Test ConsoleReporter class","Test print method with onlyChanges"],"updatePoint":{"line":256,"column":33},"line":256,"code":"    it(\"should print changes only\", () => {\n      LOG_STORE = [];\n      registry.increment(\"test.counter\", null, 7);\n      registry.decrement(\"test.gauge-total\", {\n        action: \"posts\"\n      }, 5);\n      expect(reporter.lastChanges.size).toBe(2);\n      reporter.print();\n      expect(LOG_STORE).toMatchSnapshot();\n      expect(reporter.lastChanges.size).toBe(0);\n    });","file":"unit/metrics/reporters/console.spec.js","skipped":false,"dir":"test"},{"name":"should create with default options","suites":["Test CSVReporter class","Test Constructor"],"updatePoint":{"line":26,"column":42},"line":26,"code":"    it(\"should create with default options\", () => {\n      const reporter = new CSVReporter();\n      expect(reporter.opts).toEqual({\n        includes: null,\n        excludes: null,\n        metricNamePrefix: null,\n        metricNameSuffix: null,\n        metricNameFormatter: null,\n        labelNameFormatter: null,\n        folder: \"./reports/metrics\",\n        delimiter: \",\",\n        rowDelimiter: \"\\n\",\n        mode: \"metric\",\n        types: null,\n        interval: 5,\n        filenameFormatter: null,\n        rowFormatter: null\n      });\n      expect(reporter.lastChanges).toBeInstanceOf(Set);\n    });","file":"unit/metrics/reporters/csv.spec.js","skipped":false,"dir":"test"},{"name":"should create with custom options","suites":["Test CSVReporter class","Test Constructor"],"updatePoint":{"line":46,"column":41},"line":46,"code":"    it(\"should create with custom options\", () => {\n      const reporter = new CSVReporter({\n        metricNamePrefix: \"mol-\",\n        metricNameSuffix: \".data\",\n        includes: \"moleculer.**\",\n        excludes: [\"moleculer.circuit-breaker.**\", \"moleculer.custom.**\"],\n        metricNameFormatter: () => {},\n        labelNameFormatter: () => {},\n        folder: \"./metrics\",\n        delimiter: \";\",\n        rowDelimiter: \"\\r\\n\",\n        mode: \"label\",\n        types: [\"gauge\", \"counter\"],\n        interval: 10\n      });\n      expect(reporter.opts).toEqual({\n        metricNamePrefix: \"mol-\",\n        metricNameSuffix: \".data\",\n        includes: [\"moleculer.**\"],\n        excludes: [\"moleculer.circuit-breaker.**\", \"moleculer.custom.**\"],\n        metricNameFormatter: expect.any(Function),\n        labelNameFormatter: expect.any(Function),\n        folder: \"./metrics\",\n        delimiter: \";\",\n        rowDelimiter: \"\\r\\n\",\n        mode: \"label\",\n        types: [\"gauge\", \"counter\"],\n        interval: 10,\n        filenameFormatter: null,\n        rowFormatter: null\n      });\n    });","file":"unit/metrics/reporters/csv.spec.js","skipped":false,"dir":"test"},{"name":"should start timer & create directory","suites":["Test CSVReporter class","Test init method"],"updatePoint":{"line":83,"column":45},"line":83,"code":"    it(\"should start timer & create directory\", () => {\n      utils.makeDirs.mockClear();\n      const fakeBroker = {\n        nodeID: \"node-123\",\n        namespace: \"test-ns\"\n      };\n      const fakeRegistry = {\n        broker: fakeBroker\n      };\n      const reporter = new CSVReporter({\n        interval: 2,\n        folder: \"/metrics\"\n      });\n      reporter.flush = jest.fn();\n      reporter.init(fakeRegistry);\n      expect(reporter.timer).toBeDefined();\n      expect(reporter.flush).toBeCalledTimes(0);\n      expect(utils.makeDirs).toHaveBeenCalledTimes(1);\n      expect(utils.makeDirs).toHaveBeenCalledWith(\"/metrics\");\n      clock.tick(2500);\n      expect(reporter.flush).toBeCalledTimes(1);\n    });","file":"unit/metrics/reporters/csv.spec.js","skipped":false,"dir":"test"},{"name":"should not start timer but create directory","suites":["Test CSVReporter class","Test init method"],"updatePoint":{"line":105,"column":51},"line":105,"code":"    it(\"should not start timer but create directory\", () => {\n      utils.makeDirs.mockClear();\n      const fakeBroker = {\n        nodeID: \"node-123\",\n        namespace: \"test-ns\"\n      };\n      const fakeRegistry = {\n        broker: fakeBroker\n      };\n      const reporter = new CSVReporter({\n        interval: 0,\n        folder: \"/metrics\"\n      });\n      reporter.flush = jest.fn();\n      reporter.init(fakeRegistry);\n      expect(reporter.timer).toBeUndefined();\n      expect(reporter.flush).toBeCalledTimes(0);\n      expect(utils.makeDirs).toHaveBeenCalledTimes(1);\n      expect(utils.makeDirs).toHaveBeenCalledWith(\"/metrics\");\n      clock.tick(2500);\n      expect(reporter.flush).toBeCalledTimes(0);\n    });","file":"unit/metrics/reporters/csv.spec.js","skipped":false,"dir":"test"},{"name":"should convert labels to filename compatible string","suites":["Test CSVReporter class","Test labelsToStr method"],"updatePoint":{"line":136,"column":59},"line":136,"code":"    it(\"should convert labels to filename compatible string\", () => {\n      expect(reporter.labelsToStr()).toBe(\"\");\n      expect(reporter.labelsToStr({})).toBe(\"\");\n      expect(reporter.labelsToStr({\n        a: 5,\n        b: \"John\",\n        c: true,\n        d: null,\n        e: \"%Hello . Mol:ec?uler/\"\n      })).toBe(\"a=5--b=John--c=true--d=null--e=Hello_._Moleculer\");\n    });","file":"unit/metrics/reporters/csv.spec.js","skipped":false,"dir":"test"},{"name":"should create metric-based filename","suites":["Test CSVReporter class","Test getFilename method"],"updatePoint":{"line":167,"column":43},"line":167,"code":"    it(\"should create metric-based filename\", () => {\n      expect(reporter.getFilename(metric, item)).toBe(\"/metrics/moleculer.request.total.csv\");\n    });","file":"unit/metrics/reporters/csv.spec.js","skipped":false,"dir":"test"},{"name":"should create label-based filename","suites":["Test CSVReporter class","Test getFilename method"],"updatePoint":{"line":170,"column":42},"line":170,"code":"    it(\"should create label-based filename\", () => {\n      reporter.opts.mode = \"label\";\n      expect(reporter.getFilename(metric, item)).toBe(\"/metrics/moleculer.request.total/moleculer.request.total--a=5--b=John_Doe.csv\");\n    });","file":"unit/metrics/reporters/csv.spec.js","skipped":false,"dir":"test"},{"name":"should create metric-based filename","suites":["Test CSVReporter class","Test getFilename method"],"updatePoint":{"line":174,"column":43},"line":174,"code":"    it(\"should create metric-based filename\", () => {\n      reporter.opts.filenameFormatter = jest.fn(() => \"/xyz.csv\");\n      expect(reporter.getFilename(metric, item)).toBe(\"/xyz.csv\");\n      expect(reporter.opts.filenameFormatter).toHaveBeenCalledTimes(1);\n      expect(reporter.opts.filenameFormatter).toHaveBeenCalledWith(\"moleculer.request.total\", metric, item);\n    });","file":"unit/metrics/reporters/csv.spec.js","skipped":false,"dir":"test"},{"name":"should create a new file with header & data","suites":["Test CSVReporter class","Test writeRow method"],"updatePoint":{"line":193,"column":51},"line":193,"code":"    it(\"should create a new file with header & data\", () => {\n      fs.existsSync = jest.fn(() => false);\n      reporter.writeRow(\"test.csv\", headers, data);\n      expect(fs.writeFileSync).toHaveBeenCalledTimes(1);\n      expect(fs.writeFileSync).toHaveBeenCalledWith(\"test.csv\", \"header1,header2\\n\");\n      expect(fs.appendFileSync).toHaveBeenCalledTimes(1);\n      expect(fs.appendFileSync).toHaveBeenCalledWith(\"test.csv\", \"data1,data2\\n\");\n    });","file":"unit/metrics/reporters/csv.spec.js","skipped":false,"dir":"test"},{"name":"should append data","suites":["Test CSVReporter class","Test writeRow method"],"updatePoint":{"line":201,"column":26},"line":201,"code":"    it(\"should append data\", () => {\n      reporter.opts.delimiter = \";\";\n      reporter.opts.rowDelimiter = \"\\r\\n\";\n      fs.writeFileSync.mockClear();\n      fs.appendFileSync.mockClear();\n      fs.existsSync = jest.fn(() => true);\n      reporter.writeRow(\"test.csv\", headers, data);\n      expect(fs.writeFileSync).toHaveBeenCalledTimes(0);\n      expect(fs.appendFileSync).toHaveBeenCalledTimes(1);\n      expect(fs.appendFileSync).toHaveBeenCalledWith(\"test.csv\", \"data1;data2\\r\\n\");\n    });","file":"unit/metrics/reporters/csv.spec.js","skipped":false,"dir":"test"},{"name":"should call broker emit with changes","suites":["Test CSVReporter class","Test flush method"],"updatePoint":{"line":237,"column":44},"line":237,"code":"    it(\"should call broker emit with changes\", () => {\n      registry.register({\n        name: \"os.datetime.utc\",\n        type: \"gauge\"\n      }).set(123456);\n      registry.register({\n        name: \"test.info\",\n        type: \"info\",\n        description: \"Test Info Metric\"\n      }).set(\"Test Value\");\n      registry.register({\n        name: \"test.counter\",\n        type: \"counter\",\n        labelNames: [\"action\"],\n        description: \"Test Counter Metric\"\n      });\n      registry.increment(\"test.counter\", null, 5);\n      registry.increment(\"test.counter\", {\n        action: \"posts\\\\comments\"\n      }, 8);\n      registry.register({\n        name: \"test.gauge-total\",\n        type: \"gauge\",\n        labelNames: [\"action\"],\n        description: \"Test Gauge Metric\"\n      });\n      registry.decrement(\"test.gauge-total\", {\n        action: 'users-\"John\"'\n      }, 8);\n      registry.set(\"test.gauge-total\", {\n        action: \"posts\"\n      }, null);\n      registry.register({\n        name: \"test.histogram\",\n        type: \"histogram\",\n        labelNames: [\"action\"],\n        buckets: true,\n        quantiles: true,\n        unit: \"byte\"\n      });\n      registry.observe(\"test.histogram\", 8, null);\n      registry.observe(\"test.histogram\", 2, null);\n      registry.observe(\"test.histogram\", 6, null);\n      registry.observe(\"test.histogram\", 2, null);\n      registry.observe(\"test.histogram\", 1, {\n        action: \"auth\"\n      });\n      registry.observe(\"test.histogram\", 3, {\n        action: \"auth\"\n      });\n      registry.observe(\"test.histogram\", 7, {\n        action: \"auth\"\n      });\n      reporter.flush();\n      expect(ROWS).toMatchSnapshot();\n    });","file":"unit/metrics/reporters/csv.spec.js","skipped":false,"dir":"test"},{"name":"should write changes only","suites":["Test CSVReporter class","Test flush method"],"updatePoint":{"line":293,"column":33},"line":293,"code":"    it(\"should write changes only\", () => {\n      ROWS = [];\n      reporter.opts.rowFormatter = jest.fn((data, headers\n      /*, metric, item*/\n      ) => {\n        data.push(\"MyData\");\n        headers.push(\"MyField\");\n      });\n      expect(reporter.lastChanges.size).toBe(0);\n      registry.increment(\"test.counter\", null, 7);\n      registry.decrement(\"test.gauge-total\", {\n        action: \"posts\"\n      }, 5);\n      expect(reporter.lastChanges.size).toBe(2);\n      reporter.flush();\n      expect(ROWS).toMatchSnapshot();\n      expect(reporter.lastChanges.size).toBe(0);\n    });","file":"unit/metrics/reporters/csv.spec.js","skipped":false,"dir":"test"},{"name":"should create with default options","suites":["Test Datadog Reporter class","Test Constructor"],"updatePoint":{"line":24,"column":42},"line":24,"code":"    it(\"should create with default options\", () => {\n      const reporter = new DatadogReporter();\n      expect(reporter.opts).toEqual({\n        includes: null,\n        excludes: null,\n        metricNamePrefix: null,\n        metricNameSuffix: null,\n        metricNameFormatter: null,\n        labelNameFormatter: null,\n        baseUrl: \"https://api.datadoghq.com/api/\",\n        apiKey: \"datadog-api-key\",\n        path: \"/series\",\n        apiVersion: \"v1\",\n        defaultLabels: expect.any(Function),\n        host: os.hostname(),\n        interval: 10\n      });\n    });","file":"unit/metrics/reporters/datadog.spec.js","skipped":false,"dir":"test"},{"name":"should create with custom options","suites":["Test Datadog Reporter class","Test Constructor"],"updatePoint":{"line":42,"column":41},"line":42,"code":"    it(\"should create with custom options\", () => {\n      const reporter = new DatadogReporter({\n        metricNamePrefix: \"mol-\",\n        metricNameSuffix: \".data\",\n        includes: \"moleculer.**\",\n        excludes: [\"moleculer.circuit-breaker.**\", \"moleculer.custom.**\"],\n        metricNameFormatter: () => {},\n        labelNameFormatter: () => {},\n        baseUrl: \"https://api.custom-url.com/api/\",\n        apiKey: \"12345\",\n        apiVersion: \"v2\",\n        host: \"custom-hostname\",\n        interval: 5\n      });\n      expect(reporter.opts).toEqual({\n        metricNamePrefix: \"mol-\",\n        metricNameSuffix: \".data\",\n        includes: [\"moleculer.**\"],\n        excludes: [\"moleculer.circuit-breaker.**\", \"moleculer.custom.**\"],\n        metricNameFormatter: expect.any(Function),\n        labelNameFormatter: expect.any(Function),\n        baseUrl: \"https://api.custom-url.com/api/\",\n        apiKey: \"12345\",\n        path: \"/series\",\n        apiVersion: \"v2\",\n        defaultLabels: expect.any(Function),\n        host: \"custom-hostname\",\n        interval: 5\n      });\n    });","file":"unit/metrics/reporters/datadog.spec.js","skipped":false,"dir":"test"},{"name":"should throw error if apiKey is not defined","suites":["Test Datadog Reporter class","Test Constructor"],"updatePoint":{"line":72,"column":51},"line":72,"code":"    it(\"should throw error if apiKey is not defined\", () => {\n      expect(() => new DatadogReporter({\n        apiKey: \"\"\n      })).toThrow(\"Datadog API key is missing. Set DATADOG_API_KEY environment variable.\");\n    });","file":"unit/metrics/reporters/datadog.spec.js","skipped":false,"dir":"test"},{"name":"should start timer","suites":["Test Datadog Reporter class","Test init method"],"updatePoint":{"line":86,"column":26},"line":86,"code":"    it(\"should start timer\", () => {\n      const fakeBroker = {\n        nodeID: \"node-123\",\n        namespace: \"test-ns\"\n      };\n      const fakeRegistry = {\n        broker: fakeBroker\n      };\n      reporter = new DatadogReporter({\n        interval: 5\n      });\n      reporter.flush = jest.fn();\n      reporter.init(fakeRegistry);\n      expect(reporter.timer).toBeDefined();\n      expect(reporter.flush).toBeCalledTimes(0);\n      clock.tick(5500);\n      expect(reporter.flush).toBeCalledTimes(1);\n    });","file":"unit/metrics/reporters/datadog.spec.js","skipped":false,"dir":"test"},{"name":"should generate defaultLabels","suites":["Test Datadog Reporter class","Test init method"],"updatePoint":{"line":104,"column":37},"line":104,"code":"    it(\"should generate defaultLabels\", () => {\n      const fakeBroker = {\n        nodeID: \"node-123\",\n        namespace: \"test-ns\"\n      };\n      const fakeRegistry = {\n        broker: fakeBroker\n      };\n      reporter = new DatadogReporter({});\n      reporter.init(fakeRegistry);\n      expect(reporter.defaultLabels).toStrictEqual({\n        namespace: \"test-ns\",\n        nodeID: \"node-123\"\n      });\n    });","file":"unit/metrics/reporters/datadog.spec.js","skipped":false,"dir":"test"},{"name":"should set static defaultLabels","suites":["Test Datadog Reporter class","Test init method"],"updatePoint":{"line":119,"column":39},"line":119,"code":"    it(\"should set static defaultLabels\", () => {\n      const fakeBroker = {};\n      const fakeRegistry = {\n        broker: fakeBroker\n      };\n      reporter = new DatadogReporter({\n        defaultLabels: {\n          a: 5,\n          b: \"John\"\n        }\n      });\n      reporter.init(fakeRegistry);\n      expect(reporter.defaultLabels).toStrictEqual({\n        a: 5,\n        b: \"John\"\n      });\n    });","file":"unit/metrics/reporters/datadog.spec.js","skipped":false,"dir":"test"},{"name":"should call generateDatadogSeries method but not fetch","suites":["Test Datadog Reporter class","Test flush method"],"updatePoint":{"line":142,"column":62},"line":142,"code":"    it(\"should call generateDatadogSeries method but not fetch\", async () => {\n      const fakeBroker = {\n        nodeID: \"node-123\",\n        namespace: \"test-ns\"\n      };\n      const fakeRegistry = {\n        broker: fakeBroker\n      };\n      reporter = new DatadogReporter({});\n      reporter.init(fakeRegistry);\n      reporter.generateDatadogSeries = jest.fn(() => []);\n      await reporter.flush();\n      expect(reporter.generateDatadogSeries).toBeCalledTimes(1);\n      expect(fetch).toBeCalledTimes(0);\n    });","file":"unit/metrics/reporters/datadog.spec.js","skipped":false,"dir":"test"},{"name":"should call generateDatadogSeries method & fetch","suites":["Test Datadog Reporter class","Test flush method"],"updatePoint":{"line":157,"column":56},"line":157,"code":"    it(\"should call generateDatadogSeries method & fetch\", async () => {\n      const fakeBroker = {\n        nodeID: \"node-123\",\n        namespace: \"test-ns\"\n      };\n      const fakeRegistry = {\n        broker: fakeBroker,\n        logger: {\n          debug: jest.fn()\n        }\n      };\n      reporter = new DatadogReporter({\n        apiKey: \"12345\"\n      });\n      reporter.init(fakeRegistry);\n      reporter.generateDatadogSeries = jest.fn(() => [{\n        a: 5\n      }, {\n        a: 6\n      }]);\n      await reporter.flush();\n      expect(reporter.generateDatadogSeries).toBeCalledTimes(1);\n      expect(fetch).toBeCalledTimes(1);\n      expect(fetch).toBeCalledWith(\"https://api.datadoghq.com/api/v1/series?api_key=12345\", {\n        body: '{\"series\":[{\"a\":5},{\"a\":6}]}',\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        method: \"post\"\n      });\n    });","file":"unit/metrics/reporters/datadog.spec.js","skipped":false,"dir":"test"},{"name":"should call generateDatadogSeries method but not fetch","suites":["Test Datadog Reporter class","Test generateDatadogSeries method"],"updatePoint":{"line":207,"column":62},"line":207,"code":"    it(\"should call generateDatadogSeries method but not fetch\", () => {\n      reporter = new DatadogReporter({\n        host: \"test-host\",\n        defaultLabels: {\n          defLabel: 'def\\\\Value-\"quote\"'\n        }\n      });\n      reporter.init(registry);\n      registry.register({\n        name: \"os.datetime.utc\",\n        type: \"gauge\"\n      }).set(123456);\n      registry.register({\n        name: \"test.info\",\n        type: \"info\"\n      }).set(\"Test Value\");\n      registry.register({\n        name: \"test.counter\",\n        type: \"counter\",\n        labelNames: [\"action\"]\n      });\n      registry.increment(\"test.counter\", null, 5);\n      registry.increment(\"test.counter\", {\n        action: \"posts\"\n      }, 8);\n      registry.register({\n        name: \"test.gauge\",\n        type: \"gauge\",\n        labelNames: [\"action\"]\n      });\n      registry.decrement(\"test.gauge\", {\n        action: \"users\"\n      }, 8);\n      registry.register({\n        name: \"test.histogram\",\n        type: \"histogram\",\n        labelNames: [\"action\"],\n        buckets: true,\n        quantiles: true\n      });\n      registry.observe(\"test.histogram\", 8, null);\n      registry.observe(\"test.histogram\", 2, null);\n      registry.observe(\"test.histogram\", 6, null);\n      registry.observe(\"test.histogram\", 2, null);\n      registry.observe(\"test.histogram\", 1, {\n        action: \"auth\"\n      });\n      registry.observe(\"test.histogram\", 3, {\n        action: \"auth\"\n      });\n      registry.observe(\"test.histogram\", 7, {\n        action: \"auth\"\n      });\n      const res = reporter.generateDatadogSeries();\n      expect(res).toMatchSnapshot();\n    });","file":"unit/metrics/reporters/datadog.spec.js","skipped":false,"dir":"test"},{"name":"should create with default options","suites":["Test EventReporter class","Test Constructor"],"updatePoint":{"line":13,"column":42},"line":13,"code":"    it(\"should create with default options\", () => {\n      const reporter = new EventReporter();\n      expect(reporter.opts).toEqual({\n        includes: null,\n        excludes: null,\n        metricNamePrefix: null,\n        metricNameSuffix: null,\n        metricNameFormatter: null,\n        labelNameFormatter: null,\n        eventName: \"$metrics.snapshot\",\n        broadcast: false,\n        groups: null,\n        onlyChanges: false,\n        interval: 5\n      });\n      expect(reporter.lastChanges).toBeInstanceOf(Set);\n    });","file":"unit/metrics/reporters/event.spec.js","skipped":false,"dir":"test"},{"name":"should create with custom options","suites":["Test EventReporter class","Test Constructor"],"updatePoint":{"line":30,"column":41},"line":30,"code":"    it(\"should create with custom options\", () => {\n      const reporter = new EventReporter({\n        metricNamePrefix: \"mol-\",\n        metricNameSuffix: \".data\",\n        includes: \"moleculer.**\",\n        excludes: [\"moleculer.circuit-breaker.**\", \"moleculer.custom.**\"],\n        metricNameFormatter: () => {},\n        labelNameFormatter: () => {},\n        eventName: \"$metrics.state\",\n        broadcast: true,\n        groups: [\"payments\"],\n        onlyChanges: true,\n        interval: 10\n      });\n      expect(reporter.opts).toEqual({\n        metricNamePrefix: \"mol-\",\n        metricNameSuffix: \".data\",\n        includes: [\"moleculer.**\"],\n        excludes: [\"moleculer.circuit-breaker.**\", \"moleculer.custom.**\"],\n        metricNameFormatter: expect.any(Function),\n        labelNameFormatter: expect.any(Function),\n        eventName: \"$metrics.state\",\n        broadcast: true,\n        groups: [\"payments\"],\n        onlyChanges: true,\n        interval: 10\n      });\n    });","file":"unit/metrics/reporters/event.spec.js","skipped":false,"dir":"test"},{"name":"should start timer","suites":["Test EventReporter class","Test init method"],"updatePoint":{"line":63,"column":26},"line":63,"code":"    it(\"should start timer\", () => {\n      const fakeBroker = {\n        nodeID: \"node-123\",\n        namespace: \"test-ns\"\n      };\n      const fakeRegistry = {\n        broker: fakeBroker\n      };\n      const reporter = new EventReporter({\n        interval: 2\n      });\n      reporter.sendEvent = jest.fn();\n      reporter.init(fakeRegistry);\n      expect(reporter.timer).toBeDefined();\n      expect(reporter.sendEvent).toBeCalledTimes(0);\n      clock.tick(2500);\n      expect(reporter.sendEvent).toBeCalledTimes(1);\n    });","file":"unit/metrics/reporters/event.spec.js","skipped":false,"dir":"test"},{"name":"should not start timer","suites":["Test EventReporter class","Test init method"],"updatePoint":{"line":81,"column":30},"line":81,"code":"    it(\"should not start timer\", () => {\n      const fakeBroker = {\n        nodeID: \"node-123\",\n        namespace: \"test-ns\"\n      };\n      const fakeRegistry = {\n        broker: fakeBroker\n      };\n      const reporter = new EventReporter({\n        interval: 0\n      });\n      reporter.sendEvent = jest.fn();\n      reporter.init(fakeRegistry);\n      expect(reporter.timer).toBeUndefined();\n      expect(reporter.sendEvent).toBeCalledTimes(0);\n      clock.tick(2500);\n      expect(reporter.sendEvent).toBeCalledTimes(0);\n    });","file":"unit/metrics/reporters/event.spec.js","skipped":false,"dir":"test"},{"name":"should call broker emit with changes","suites":["Test EventReporter class","Test sendEvent method"],"updatePoint":{"line":113,"column":44},"line":113,"code":"    it(\"should call broker emit with changes\", () => {\n      const reporter = new EventReporter({\n        interval: 0,\n        onlyChanges: false,\n        broadcast: false,\n        groups: [\"mail\", \"stat\"]\n      });\n      reporter.init(registry);\n      registry.register({\n        name: \"os.datetime.utc\",\n        type: \"gauge\"\n      }).set(123456);\n      registry.register({\n        name: \"test.info\",\n        type: \"info\",\n        description: \"Test Info Metric\"\n      }).set(\"Test Value\");\n      registry.register({\n        name: \"test.counter\",\n        type: \"counter\",\n        labelNames: [\"action\"],\n        description: \"Test Counter Metric\"\n      });\n      registry.increment(\"test.counter\", null, 5);\n      registry.increment(\"test.counter\", {\n        action: \"posts\\\\comments\"\n      }, 8);\n      registry.register({\n        name: \"test.gauge-total\",\n        type: \"gauge\",\n        labelNames: [\"action\"],\n        description: \"Test Gauge Metric\"\n      });\n      registry.decrement(\"test.gauge-total\", {\n        action: 'users-\"John\"'\n      }, 8);\n      registry.set(\"test.gauge-total\", {\n        action: \"posts\"\n      }, null);\n      registry.register({\n        name: \"test.histogram\",\n        type: \"histogram\",\n        labelNames: [\"action\"],\n        buckets: true,\n        quantiles: true,\n        unit: \"byte\"\n      });\n      registry.observe(\"test.histogram\", 8, null);\n      registry.observe(\"test.histogram\", 2, null);\n      registry.observe(\"test.histogram\", 6, null);\n      registry.observe(\"test.histogram\", 2, null);\n      registry.observe(\"test.histogram\", 1, {\n        action: \"auth\"\n      });\n      registry.observe(\"test.histogram\", 3, {\n        action: \"auth\"\n      });\n      registry.observe(\"test.histogram\", 7, {\n        action: \"auth\"\n      });\n      reporter.sendEvent();\n      expect(broker.broadcast).toHaveBeenCalledTimes(0);\n      expect(broker.emit).toHaveBeenCalledTimes(1);\n      expect(broker.emit).toHaveBeenCalledWith(\"$metrics.snapshot\", expect.any(Array), {\n        groups: [\"mail\", \"stat\"]\n      });\n      expect(broker.emit.mock.calls[0][1]).toMatchSnapshot();\n    });","file":"unit/metrics/reporters/event.spec.js","skipped":false,"dir":"test"},{"name":"should call broker.broadcast","suites":["Test EventReporter class","Test sendEvent method with onlyChanges"],"updatePoint":{"line":210,"column":36},"line":210,"code":"    it(\"should call broker.broadcast\", () => {\n      broker.emit.mockClear();\n      registry.register({\n        name: \"os.datetime.utc\",\n        type: \"gauge\"\n      }).set(123456);\n      registry.register({\n        name: \"test.info\",\n        type: \"info\",\n        description: \"Test Info Metric\"\n      }).set(\"Test Value\");\n      registry.register({\n        name: \"test.counter\",\n        type: \"counter\",\n        labelNames: [\"action\"],\n        description: \"Test Counter Metric\"\n      });\n      registry.increment(\"test.counter\", null, 5);\n      registry.increment(\"test.counter\", {\n        action: \"posts\\\\comments\"\n      }, 8);\n      registry.register({\n        name: \"test.gauge-total\",\n        type: \"gauge\",\n        labelNames: [\"action\"],\n        description: \"Test Gauge Metric\"\n      });\n      registry.decrement(\"test.gauge-total\", {\n        action: 'users-\"John\"'\n      }, 8);\n      registry.set(\"test.gauge-total\", {\n        action: \"posts\"\n      }, null);\n      registry.register({\n        name: \"test.histogram\",\n        type: \"histogram\",\n        labelNames: [\"action\"],\n        buckets: true,\n        quantiles: true,\n        unit: \"byte\"\n      });\n      registry.observe(\"test.histogram\", 8, null);\n      registry.observe(\"test.histogram\", 2, null);\n      registry.observe(\"test.histogram\", 6, null);\n      registry.observe(\"test.histogram\", 2, null);\n      registry.observe(\"test.histogram\", 1, {\n        action: \"auth\"\n      });\n      registry.observe(\"test.histogram\", 3, {\n        action: \"auth\"\n      });\n      registry.observe(\"test.histogram\", 7, {\n        action: \"auth\"\n      });\n      reporter.sendEvent();\n      expect(broker.emit).toHaveBeenCalledTimes(0);\n      expect(broker.broadcast).toHaveBeenCalledTimes(1);\n      expect(broker.broadcast).toHaveBeenCalledWith(\"$metrics.custom\", expect.any(Array), {\n        groups: null\n      });\n      expect(broker.broadcast.mock.calls[0][1]).toMatchSnapshot();\n    });","file":"unit/metrics/reporters/event.spec.js","skipped":false,"dir":"test"},{"name":"should send changes only","suites":["Test EventReporter class","Test sendEvent method with onlyChanges"],"updatePoint":{"line":272,"column":32},"line":272,"code":"    it(\"should send changes only\", () => {\n      broker.broadcast.mockClear();\n      registry.increment(\"test.counter\", null, 7);\n      registry.decrement(\"test.gauge-total\", {\n        action: \"posts\"\n      }, 5);\n      expect(reporter.lastChanges.size).toBe(2);\n      reporter.sendEvent();\n      expect(broker.emit).toHaveBeenCalledTimes(0);\n      expect(broker.broadcast).toHaveBeenCalledTimes(1);\n      expect(broker.broadcast).toHaveBeenCalledWith(\"$metrics.custom\", expect.any(Array), {\n        groups: null\n      });\n      expect(broker.broadcast.mock.calls[0][1]).toMatchSnapshot();\n      expect(reporter.lastChanges.size).toBe(0);\n    });","file":"unit/metrics/reporters/event.spec.js","skipped":false,"dir":"test"},{"name":"should send changes with groups","suites":["Test EventReporter class","Test sendEvent method with onlyChanges"],"updatePoint":{"line":288,"column":39},"line":288,"code":"    it(\"should send changes with groups\", () => {\n      reporter.opts.groups = [\"mail\", \"stat\"];\n      broker.broadcast.mockClear();\n      registry.increment(\"test.counter\", null, 7);\n      registry.decrement(\"test.gauge-total\", {\n        action: \"posts\"\n      }, 5);\n      expect(reporter.lastChanges.size).toBe(2);\n      reporter.sendEvent();\n      expect(broker.emit).toHaveBeenCalledTimes(0);\n      expect(broker.broadcast).toHaveBeenCalledTimes(1);\n      expect(broker.broadcast).toHaveBeenCalledWith(\"$metrics.custom\", expect.any(Array), {\n        groups: [\"mail\", \"stat\"]\n      });\n    });","file":"unit/metrics/reporters/event.spec.js","skipped":false,"dir":"test"},{"name":"should throw error","suites":["Test MetricReporters resolver"],"updatePoint":{"line":13,"column":24},"line":13,"code":"  it(\"should throw error\", () => {\n    expect(() => MetricReporters.resolve()).toThrowError(BrokerOptionsError);\n    expect(() => MetricReporters.resolve({})).toThrowError(BrokerOptionsError);\n    expect(() => MetricReporters.resolve(\"xyz\")).toThrowError(BrokerOptionsError);\n    expect(() => MetricReporters.resolve({\n      type: \"xyz\"\n    })).toThrowError(BrokerOptionsError);\n  });","file":"unit/metrics/reporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve console metric reporter from string","suites":["Test MetricReporters resolver"],"updatePoint":{"line":21,"column":56},"line":21,"code":"  it(\"should resolve console metric reporter from string\", () => {\n    let reporter = MetricReporters.resolve(\"Console\");\n    expect(reporter).toBeInstanceOf(MetricReporters.Console);\n  });","file":"unit/metrics/reporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve console metric reporter from obj","suites":["Test MetricReporters resolver"],"updatePoint":{"line":25,"column":53},"line":25,"code":"  it(\"should resolve console metric reporter from obj\", () => {\n    let options = {\n      interval: 2000\n    };\n    let reporter = MetricReporters.resolve({\n      type: \"Console\",\n      options\n    });\n    expect(reporter).toBeInstanceOf(MetricReporters.Console);\n    expect(reporter.opts).toEqual(expect.objectContaining({\n      interval: 2000\n    }));\n  });","file":"unit/metrics/reporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve CSV metric reporter from string","suites":["Test MetricReporters resolver"],"updatePoint":{"line":38,"column":52},"line":38,"code":"  it(\"should resolve CSV metric reporter from string\", () => {\n    let reporter = MetricReporters.resolve(\"CSV\");\n    expect(reporter).toBeInstanceOf(MetricReporters.CSV);\n  });","file":"unit/metrics/reporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve CSV metric reporter from obj","suites":["Test MetricReporters resolver"],"updatePoint":{"line":42,"column":49},"line":42,"code":"  it(\"should resolve CSV metric reporter from obj\", () => {\n    let options = {\n      interval: 2000\n    };\n    let reporter = MetricReporters.resolve({\n      type: \"CSV\",\n      options\n    });\n    expect(reporter).toBeInstanceOf(MetricReporters.CSV);\n    expect(reporter.opts).toEqual(expect.objectContaining({\n      interval: 2000\n    }));\n  });","file":"unit/metrics/reporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve event metric reporter from string","suites":["Test MetricReporters resolver"],"updatePoint":{"line":55,"column":54},"line":55,"code":"  it(\"should resolve event metric reporter from string\", () => {\n    let reporter = MetricReporters.resolve(\"Event\");\n    expect(reporter).toBeInstanceOf(MetricReporters.Event);\n  });","file":"unit/metrics/reporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve event metric reporter from obj","suites":["Test MetricReporters resolver"],"updatePoint":{"line":59,"column":51},"line":59,"code":"  it(\"should resolve event metric reporter from obj\", () => {\n    let options = {\n      interval: 2000\n    };\n    let reporter = MetricReporters.resolve({\n      type: \"Event\",\n      options\n    });\n    expect(reporter).toBeInstanceOf(MetricReporters.Event);\n    expect(reporter.opts).toEqual(expect.objectContaining({\n      interval: 2000\n    }));\n  });","file":"unit/metrics/reporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve Prometheus metric reporter from string","suites":["Test MetricReporters resolver"],"updatePoint":{"line":72,"column":59},"line":72,"code":"  it(\"should resolve Prometheus metric reporter from string\", () => {\n    let reporter = MetricReporters.resolve(\"Prometheus\");\n    expect(reporter).toBeInstanceOf(MetricReporters.Prometheus);\n  });","file":"unit/metrics/reporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve Prometheus metric reporter from obj","suites":["Test MetricReporters resolver"],"updatePoint":{"line":76,"column":56},"line":76,"code":"  it(\"should resolve Prometheus metric reporter from obj\", () => {\n    let options = {\n      interval: 2000\n    };\n    let reporter = MetricReporters.resolve({\n      type: \"Prometheus\",\n      options\n    });\n    expect(reporter).toBeInstanceOf(MetricReporters.Prometheus);\n    expect(reporter.opts).toEqual(expect.objectContaining({\n      interval: 2000\n    }));\n  });","file":"unit/metrics/reporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve Datadog metric reporter from string","suites":["Test MetricReporters resolver"],"updatePoint":{"line":89,"column":56},"line":89,"code":"  it(\"should resolve Datadog metric reporter from string\", () => {\n    let reporter = MetricReporters.resolve(\"Datadog\");\n    expect(reporter).toBeInstanceOf(MetricReporters.Datadog);\n  });","file":"unit/metrics/reporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve Datadog metric reporter from obj","suites":["Test MetricReporters resolver"],"updatePoint":{"line":93,"column":53},"line":93,"code":"  it(\"should resolve Datadog metric reporter from obj\", () => {\n    let options = {\n      interval: 2000\n    };\n    let reporter = MetricReporters.resolve({\n      type: \"Datadog\",\n      options\n    });\n    expect(reporter).toBeInstanceOf(MetricReporters.Datadog);\n    expect(reporter.opts).toEqual(expect.objectContaining({\n      interval: 2000\n    }));\n  });","file":"unit/metrics/reporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve StatsD metric reporter from string","suites":["Test MetricReporters resolver"],"updatePoint":{"line":106,"column":55},"line":106,"code":"  it(\"should resolve StatsD metric reporter from string\", () => {\n    let reporter = MetricReporters.resolve(\"StatsD\");\n    expect(reporter).toBeInstanceOf(MetricReporters.StatsD);\n  });","file":"unit/metrics/reporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve StatsD metric reporter from obj","suites":["Test MetricReporters resolver"],"updatePoint":{"line":110,"column":52},"line":110,"code":"  it(\"should resolve StatsD metric reporter from obj\", () => {\n    let options = {\n      interval: 2000\n    };\n    let reporter = MetricReporters.resolve({\n      type: \"StatsD\",\n      options\n    });\n    expect(reporter).toBeInstanceOf(MetricReporters.StatsD);\n    expect(reporter.opts).toEqual(expect.objectContaining({\n      interval: 2000\n    }));\n  });","file":"unit/metrics/reporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should throw error if type if not correct","suites":["Test Reporter register"],"updatePoint":{"line":127,"column":47},"line":127,"code":"  it(\"should throw error if type if not correct\", () => {\n    expect(() => {\n      MetricReporters.resolve(\"MyCustom\");\n    }).toThrowError(BrokerOptionsError);\n  });","file":"unit/metrics/reporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should register new type","suites":["Test Reporter register"],"updatePoint":{"line":132,"column":30},"line":132,"code":"  it(\"should register new type\", () => {\n    MetricReporters.register(\"MyCustom\", MyCustom);\n    expect(MetricReporters.MyCustom).toBe(MyCustom);\n  });","file":"unit/metrics/reporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should find the new type","suites":["Test Reporter register"],"updatePoint":{"line":136,"column":30},"line":136,"code":"  it(\"should find the new type\", () => {\n    const reporter = MetricReporters.resolve(\"MyCustom\");\n    expect(reporter).toBeInstanceOf(MyCustom);\n  });","file":"unit/metrics/reporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should create with default options","suites":["Test Prometheus Reporter class","Test Constructor"],"updatePoint":{"line":16,"column":42},"line":16,"code":"    it(\"should create with default options\", () => {\n      const reporter = new PrometheusReporter();\n      expect(reporter.opts).toEqual({\n        includes: null,\n        excludes: null,\n        metricNamePrefix: null,\n        metricNameSuffix: null,\n        metricNameFormatter: null,\n        labelNameFormatter: null,\n        port: 3030,\n        path: \"/metrics\",\n        defaultLabels: expect.any(Function)\n      });\n    });","file":"unit/metrics/reporters/prometheus.spec.js","skipped":false,"dir":"test"},{"name":"should create with custom options","suites":["Test Prometheus Reporter class","Test Constructor"],"updatePoint":{"line":30,"column":41},"line":30,"code":"    it(\"should create with custom options\", () => {\n      const reporter = new PrometheusReporter({\n        metricNamePrefix: \"mol-\",\n        metricNameSuffix: \".data\",\n        includes: \"moleculer.**\",\n        excludes: [\"moleculer.circuit-breaker.**\", \"moleculer.custom.**\"],\n        metricNameFormatter: () => {},\n        labelNameFormatter: () => {},\n        port: 12345,\n        path: \"/meter\"\n      });\n      expect(reporter.opts).toEqual({\n        metricNamePrefix: \"mol-\",\n        metricNameSuffix: \".data\",\n        includes: [\"moleculer.**\"],\n        excludes: [\"moleculer.circuit-breaker.**\", \"moleculer.custom.**\"],\n        metricNameFormatter: expect.any(Function),\n        labelNameFormatter: expect.any(Function),\n        port: 12345,\n        path: \"/meter\",\n        defaultLabels: expect.any(Function)\n      });\n    });","file":"unit/metrics/reporters/prometheus.spec.js","skipped":false,"dir":"test"},{"name":"should create HTTP server","suites":["Test Prometheus Reporter class","Test init method"],"updatePoint":{"line":61,"column":33},"line":61,"code":"    it(\"should create HTTP server\", () => {\n      broker = new ServiceBroker({\n        logger: false,\n        nodeID: \"test-node\",\n        namespace: \"test-ns\"\n      });\n      const registry = new MetricRegistry(broker);\n      reporter = new PrometheusReporter({\n        port: 0\n      });\n      reporter.init(registry);\n      expect(reporter.server).toBeDefined();\n    });","file":"unit/metrics/reporters/prometheus.spec.js","skipped":false,"dir":"test"},{"name":"should generate defaultLabels","suites":["Test Prometheus Reporter class","Test init method"],"updatePoint":{"line":74,"column":37},"line":74,"code":"    it(\"should generate defaultLabels\", () => {\n      broker = new ServiceBroker({\n        logger: false,\n        nodeID: \"test-node\",\n        namespace: \"test-ns\"\n      });\n      const registry = new MetricRegistry(broker);\n      reporter = new PrometheusReporter({\n        port: 0\n      });\n      reporter.init(registry);\n      expect(reporter.defaultLabels).toStrictEqual({\n        namespace: \"test-ns\",\n        nodeID: \"test-node\"\n      });\n    });","file":"unit/metrics/reporters/prometheus.spec.js","skipped":false,"dir":"test"},{"name":"should set static defaultLabels","suites":["Test Prometheus Reporter class","Test init method"],"updatePoint":{"line":90,"column":39},"line":90,"code":"    it(\"should set static defaultLabels\", () => {\n      broker = new ServiceBroker({\n        logger: false,\n        nodeID: \"test-node\",\n        namespace: \"test-ns\"\n      });\n      const registry = new MetricRegistry(broker);\n      reporter = new PrometheusReporter({\n        port: 0,\n        defaultLabels: {\n          a: 5,\n          b: \"John\"\n        }\n      });\n      reporter.init(registry);\n      expect(reporter.defaultLabels).toStrictEqual({\n        a: 5,\n        b: \"John\"\n      });\n    });","file":"unit/metrics/reporters/prometheus.spec.js","skipped":false,"dir":"test"},{"name":"should stop HTTP server","suites":["Test Prometheus Reporter class","Test stop method"],"updatePoint":{"line":116,"column":31},"line":116,"code":"    it(\"should stop HTTP server\", () => {\n      broker = new ServiceBroker({\n        logger: false,\n        nodeID: \"test-node\",\n        namespace: \"test-ns\"\n      });\n      const registry = new MetricRegistry(broker);\n      const reporter = new PrometheusReporter({\n        port: 0\n      });\n      reporter.init(registry);\n      reporter.stop().then(() => {\n        expect(reporter.server.listening).toBe(false);\n      });\n    });","file":"unit/metrics/reporters/prometheus.spec.js","skipped":false,"dir":"test"},{"name":"should return 404 if path is not match","suites":["Test Prometheus Reporter class","Test HTTP handler method"],"updatePoint":{"line":152,"column":46},"line":152,"code":"    it(\"should return 404 if path is not match\", async () => {\n      const res = await request(reporter.server).get(\"/\");\n      expect(res.statusCode).toBe(404);\n      expect(res.text).toBe(\"\");\n      expect(reporter.generatePrometheusResponse).toBeCalledTimes(0);\n    });","file":"unit/metrics/reporters/prometheus.spec.js","skipped":false,"dir":"test"},{"name":"should call generatePrometheusResponse method and send response","suites":["Test Prometheus Reporter class","Test HTTP handler method"],"updatePoint":{"line":158,"column":71},"line":158,"code":"    it(\"should call generatePrometheusResponse method and send response\", async () => {\n      const res = await request(reporter.server).get(\"/metrics\").set(\"Accept-Encoding\", \"none\");\n      expect(res.statusCode).toBe(200);\n      expect(res.headers[\"content-type\"]).toBe(\"text/plain; version=0.0.4; charset=utf-8\");\n      expect(res.text).toBe(\"Fake generatePrometheusResponse content.\");\n      expect(reporter.generatePrometheusResponse).toBeCalledTimes(1);\n    });","file":"unit/metrics/reporters/prometheus.spec.js","skipped":false,"dir":"test"},{"name":"should call generatePrometheusResponse method and send response","suites":["Test Prometheus Reporter class","Test HTTP handler method"],"updatePoint":{"line":165,"column":71},"line":165,"code":"    it(\"should call generatePrometheusResponse method and send response\", async () => {\n      reporter.generatePrometheusResponse.mockClear();\n      const res = await request(reporter.server).get(\"/metrics\").set(\"Accept-Encoding\", \"gzip\");\n      expect(res.statusCode).toBe(200);\n      expect(res.headers[\"content-type\"]).toBe(\"text/plain; version=0.0.4; charset=utf-8\");\n      expect(res.headers[\"content-encoding\"]).toBe(\"gzip\");\n      expect(res.text).toBe(\"Fake generatePrometheusResponse content.\");\n      expect(reporter.generatePrometheusResponse).toBeCalledTimes(1);\n    });","file":"unit/metrics/reporters/prometheus.spec.js","skipped":false,"dir":"test"},{"name":"should call generatePrometheusResponse method but not fetch","suites":["Test Prometheus Reporter class","Test generatePrometheusResponse method"],"updatePoint":{"line":193,"column":67},"line":193,"code":"    it(\"should call generatePrometheusResponse method but not fetch\", () => {\n      reporter = new PrometheusReporter({\n        port: 0,\n        host: \"test-host\",\n        defaultLabels: {\n          a: 5\n        }\n      });\n      reporter.init(registry);\n      registry.register({\n        name: \"os.datetime.utc\",\n        type: \"gauge\"\n      }).set(123456);\n      registry.register({\n        name: \"test.info\",\n        type: \"info\",\n        description: \"Test Info Metric\"\n      }).set(\"Test Value\");\n      registry.register({\n        name: \"test.counter\",\n        type: \"counter\",\n        labelNames: [\"action\"],\n        description: \"Test Counter Metric\"\n      });\n      registry.increment(\"test.counter\", null, 5);\n      registry.increment(\"test.counter\", {\n        action: \"posts\\\\comments\"\n      }, 8);\n      registry.register({\n        name: \"test.gauge-total\",\n        type: \"gauge\",\n        labelNames: [\"action\"],\n        description: \"Test Gauge Metric\",\n        rate: true\n      });\n      registry.increment(\"test.gauge-total\", {\n        action: 'users-\"John\"'\n      }, 10);\n      clock.tick(100);\n      registry.decrement(\"test.gauge-total\", {\n        action: 'users-\"John\"'\n      }, 8);\n      registry.set(\"test.gauge-total\", null, {\n        action: \"posts\"\n      });\n      registry.register({\n        name: \"test.histogram\",\n        type: \"histogram\",\n        labelNames: [\"action\"],\n        buckets: true,\n        quantiles: true,\n        unit: \"bytes\",\n        rate: true\n      });\n      registry.observe(\"test.histogram\", 8, null);\n      registry.observe(\"test.histogram\", 2, null);\n      clock.tick(500);\n      registry.observe(\"test.histogram\", 6, null);\n      registry.observe(\"test.histogram\", 2, null);\n      registry.observe(\"test.histogram\", 1, {\n        action: \"auth\"\n      });\n      registry.observe(\"test.histogram\", 3, {\n        action: \"auth\"\n      });\n      clock.tick(500);\n      registry.observe(\"test.histogram\", 7, {\n        action: \"auth\"\n      });\n      clock.tick(10 * 1000);\n      const res = reporter.generatePrometheusResponse();\n      expect(res).toMatchSnapshot();\n    });","file":"unit/metrics/reporters/prometheus.spec.js","skipped":false,"dir":"test"},{"name":"should create with default options","suites":["Test StatsDReporter class","Test Constructor"],"updatePoint":{"line":24,"column":42},"line":24,"code":"    it(\"should create with default options\", () => {\n      const reporter = new StatsDReporter();\n      expect(reporter.opts).toEqual({\n        includes: null,\n        excludes: null,\n        metricNamePrefix: null,\n        metricNameSuffix: null,\n        metricNameFormatter: null,\n        labelNameFormatter: null,\n        host: \"localhost\",\n        port: 8125,\n        maxPayloadSize: 1300\n      });\n    });","file":"unit/metrics/reporters/statsd.spec.js","skipped":false,"dir":"test"},{"name":"should create with custom options","suites":["Test StatsDReporter class","Test Constructor"],"updatePoint":{"line":38,"column":41},"line":38,"code":"    it(\"should create with custom options\", () => {\n      const reporter = new StatsDReporter({\n        metricNamePrefix: \"mol-\",\n        metricNameSuffix: \".data\",\n        includes: \"moleculer.**\",\n        excludes: [\"moleculer.circuit-breaker.**\", \"moleculer.custom.**\"],\n        metricNameFormatter: () => {},\n        labelNameFormatter: () => {},\n        host: \"localhost\",\n        port: 8888,\n        maxPayloadSize: 600\n      });\n      expect(reporter.opts).toEqual({\n        metricNamePrefix: \"mol-\",\n        metricNameSuffix: \".data\",\n        includes: [\"moleculer.**\"],\n        excludes: [\"moleculer.circuit-breaker.**\", \"moleculer.custom.**\"],\n        metricNameFormatter: expect.any(Function),\n        labelNameFormatter: expect.any(Function),\n        host: \"localhost\",\n        port: 8888,\n        maxPayloadSize: 600\n      });\n    });","file":"unit/metrics/reporters/statsd.spec.js","skipped":false,"dir":"test"},{"name":"should start timer & create directory","suites":["Test StatsDReporter class","Test init method"],"updatePoint":{"line":67,"column":45},"line":67,"code":"    it(\"should start timer & create directory\", () => {\n      const fakeBroker = {\n        nodeID: \"node-123\",\n        namespace: \"test-ns\"\n      };\n      const fakeRegistry = {\n        broker: fakeBroker\n      };\n      const reporter = new StatsDReporter({\n        interval: 2000,\n        folder: \"/metrics\"\n      });\n      reporter.flush = jest.fn();\n      reporter.init(fakeRegistry);\n      expect(reporter.flush).toBeCalledTimes(1);\n    });","file":"unit/metrics/reporters/statsd.spec.js","skipped":false,"dir":"test"},{"name":"should convert labels to filename compatible string","suites":["Test StatsDReporter class","Test labelsToTags method"],"updatePoint":{"line":92,"column":59},"line":92,"code":"    it(\"should convert labels to filename compatible string\", () => {\n      expect(reporter.labelsToTags()).toBe(\"\");\n      expect(reporter.labelsToTags({})).toBe(\"\");\n      expect(reporter.labelsToTags({\n        a: 5,\n        b: \"John\",\n        c: true,\n        d: null,\n        e: '\"Hello \\' Mol:ec?uler\"'\n      })).toBe('a:5,b:John,c:true,d:null,e:\\\\\"Hello \\' Mol:ec?uler\\\\\"');\n    });","file":"unit/metrics/reporters/statsd.spec.js","skipped":false,"dir":"test"},{"name":"should call generateStatsDSeries","suites":["Test StatsDReporter class","Test flush method"],"updatePoint":{"line":116,"column":40},"line":116,"code":"    it(\"should call generateStatsDSeries\", () => {\n      reporter.generateStatsDSeries.mockClear();\n      reporter.sendChunks.mockClear();\n      reporter.flush();\n      expect(reporter.generateStatsDSeries).toBeCalledTimes(1);\n      expect(reporter.sendChunks).toBeCalledTimes(0);\n    });","file":"unit/metrics/reporters/statsd.spec.js","skipped":false,"dir":"test"},{"name":"should call generateStatsDSeries & sendChunks","suites":["Test StatsDReporter class","Test flush method"],"updatePoint":{"line":123,"column":53},"line":123,"code":"    it(\"should call generateStatsDSeries & sendChunks\", () => {\n      reporter.generateStatsDSeries = jest.fn(() => [1, 2]);\n      reporter.sendChunks.mockClear();\n      reporter.flush();\n      expect(reporter.generateStatsDSeries).toBeCalledTimes(1);\n      expect(reporter.sendChunks).toBeCalledTimes(1);\n      expect(reporter.sendChunks).toBeCalledWith([1, 2]);\n    });","file":"unit/metrics/reporters/statsd.spec.js","skipped":false,"dir":"test"},{"name":"should call send with chunks","suites":["Test StatsDReporter class","Test sendChunks method with maxPayloadSize"],"updatePoint":{"line":148,"column":36},"line":148,"code":"    it(\"should call send with chunks\", () => {\n      reporter.send.mockClear();\n      reporter.sendChunks(Array.from(series));\n      expect(reporter.send).toBeCalledTimes(1);\n      expect(reporter.send).toBeCalledWith(Buffer.from(series.slice(0, 4).join(\"\\n\")));\n    });","file":"unit/metrics/reporters/statsd.spec.js","skipped":false,"dir":"test"},{"name":"should call send with the rest","suites":["Test StatsDReporter class","Test sendChunks method with maxPayloadSize"],"updatePoint":{"line":154,"column":38},"line":154,"code":"    it(\"should call send with the rest\", () => {\n      reporter.send.mockClear();\n      clock.tick(150);\n      expect(reporter.send).toBeCalledTimes(1);\n      expect(reporter.send).toBeCalledWith(Buffer.from(series.slice(4, 6).join(\"\\n\")));\n    });","file":"unit/metrics/reporters/statsd.spec.js","skipped":false,"dir":"test"},{"name":"should not call send","suites":["Test StatsDReporter class","Test sendChunks method with maxPayloadSize"],"updatePoint":{"line":160,"column":28},"line":160,"code":"    it(\"should not call send\", () => {\n      reporter.send.mockClear();\n      clock.tick(150);\n      expect(reporter.send).toBeCalledTimes(0);\n    });","file":"unit/metrics/reporters/statsd.spec.js","skipped":false,"dir":"test"},{"name":"should call send with all chunks","suites":["Test StatsDReporter class","Test sendChunks method without maxPayloadSize"],"updatePoint":{"line":182,"column":40},"line":182,"code":"    it(\"should call send with all chunks\", () => {\n      reporter.send.mockClear();\n      reporter.sendChunks(Array.from(series));\n      expect(reporter.send).toBeCalledTimes(1);\n      expect(reporter.send).toBeCalledWith(Buffer.from(series.slice(0, 6).join(\"\\n\")));\n    });","file":"unit/metrics/reporters/statsd.spec.js","skipped":false,"dir":"test"},{"name":"should not call send","suites":["Test StatsDReporter class","Test sendChunks method without maxPayloadSize"],"updatePoint":{"line":188,"column":28},"line":188,"code":"    it(\"should not call send\", () => {\n      reporter.send.mockClear();\n      clock.tick(150);\n      expect(reporter.send).toBeCalledTimes(0);\n    });","file":"unit/metrics/reporters/statsd.spec.js","skipped":false,"dir":"test"},{"name":"should send data via udp4","suites":["Test StatsDReporter class","Test send method"],"updatePoint":{"line":204,"column":33},"line":204,"code":"    it(\"should send data via udp4\", () => {\n      dgram.createSocket.mockClear();\n      sockSend.mockClear();\n      sockClose.mockClear();\n      const buf = Buffer.from(\"Moleculer Metrics Data\");\n      reporter.send(buf);\n      expect(dgram.createSocket).toBeCalledTimes(1);\n      expect(dgram.createSocket).toBeCalledWith(\"udp4\");\n      expect(sockSend).toBeCalledTimes(1);\n      expect(sockSend).toBeCalledWith(buf, 0, 22, 8125, \"localhost\", expect.any(Function));\n      expect(sockClose).toBeCalledTimes(1);\n    });","file":"unit/metrics/reporters/statsd.spec.js","skipped":false,"dir":"test"},{"name":"should call generateStatDLine","suites":["Test StatsDReporter class","Test generateStatsDSeries & generateStatDLine method"],"updatePoint":{"line":227,"column":37},"line":227,"code":"    it(\"should call generateStatDLine\", () => {\n      registry.register({\n        name: \"os.datetime.utc\",\n        type: \"gauge\"\n      }).set(123456);\n      registry.register({\n        name: \"test.info\",\n        type: \"info\",\n        description: \"Test Info Metric\"\n      }).set(\"Test Value\");\n      registry.register({\n        name: \"test.counter\",\n        type: \"counter\",\n        labelNames: [\"action\"],\n        description: \"Test Counter Metric\"\n      });\n      registry.increment(\"test.counter\", null, 5);\n      registry.increment(\"test.counter\", {\n        action: \"posts\\\\comments\"\n      }, 8);\n      registry.register({\n        name: \"test.gauge-total\",\n        type: \"gauge\",\n        labelNames: [\"action\"],\n        description: \"Test Gauge Metric\"\n      });\n      registry.decrement(\"test.gauge-total\", {\n        action: 'users-\"John\"'\n      }, 8);\n      registry.set(\"test.gauge-total\", {\n        action: \"posts\"\n      }, null);\n      registry.register({\n        name: \"test.histogram\",\n        type: \"histogram\",\n        labelNames: [\"action\"],\n        buckets: true,\n        quantiles: true,\n        unit: \"byte\"\n      });\n      registry.observe(\"test.histogram\", 8, null);\n      registry.observe(\"test.histogram\", 2, null);\n      registry.observe(\"test.histogram\", 6, null);\n      registry.observe(\"test.histogram\", 2, null);\n      registry.observe(\"test.histogram\", 1, {\n        action: \"auth\"\n      });\n      registry.observe(\"test.histogram\", 3, {\n        action: \"auth\"\n      });\n      registry.observe(\"test.histogram\", 7, {\n        action: \"auth\"\n      });\n      const res = reporter.generateStatsDSeries();\n      expect(res).toEqual(['test.info:\"Test Value\"|s', \"test.counter:5|c|#\", \"test.counter:8|c|#action:posts\\\\\\\\comments\", 'test.gauge-total:-8|g|#action:users-\\\\\"John\\\\\"', \"test.gauge-total:[object Object]|g|#\"]);\n    });","file":"unit/metrics/reporters/statsd.spec.js","skipped":false,"dir":"test"},{"name":"should call generateStatDLine","suites":["Test StatsDReporter class","Test metricChanged method"],"updatePoint":{"line":293,"column":37},"line":293,"code":"    it(\"should call generateStatDLine\", () => {\n      registry.register({\n        name: \"test.histogram\",\n        type: \"histogram\",\n        labelNames: [\"action\"],\n        buckets: true,\n        quantiles: true,\n        unit: \"byte\"\n      });\n      reporter.send = jest.fn();\n      registry.observe(\"test.histogram\", 7, {\n        action: \"auth\"\n      });\n      expect(reporter.send).toBeCalledTimes(1);\n      expect(reporter.send).toBeCalledWith(Buffer.from(\"test.histogram:7|ms|#action:auth\"));\n    });","file":"unit/metrics/reporters/statsd.spec.js","skipped":false,"dir":"test"},{"name":"should create with base options","suites":["Test Base Metric class","Test Constructor"],"updatePoint":{"line":12,"column":39},"line":12,"code":"    it(\"should create with base options\", () => {\n      const item = new BaseMetric({\n        type: \"counter\",\n        name: \"test.counter\"\n      }, registry);\n      expect(item.registry).toBe(registry);\n      expect(item.type).toBe(\"counter\");\n      expect(item.name).toBe(\"test.counter\");\n      expect(item.description).toBeUndefined();\n      expect(item.labelNames).toEqual([]);\n      expect(item.unit).toBeUndefined();\n      expect(item.aggregator).toBe(\"sum\");\n      expect(item.lastSnapshot).toBeNull();\n      expect(item.dirty).toBe(true);\n      expect(item.values).toBeInstanceOf(Map);\n    });","file":"unit/metrics/types/base.spec.js","skipped":false,"dir":"test"},{"name":"should create with all options","suites":["Test Base Metric class","Test Constructor"],"updatePoint":{"line":28,"column":38},"line":28,"code":"    it(\"should create with all options\", () => {\n      const item = new BaseMetric({\n        type: \"gauge\",\n        name: \"test.gauge\",\n        description: \"Test gauge\",\n        labelNames: [\"action\", \"service\"],\n        unit: \"bytes\",\n        aggregator: \"avg\"\n      }, registry);\n      expect(item.registry).toBe(registry);\n      expect(item.type).toBe(\"gauge\");\n      expect(item.name).toBe(\"test.gauge\");\n      expect(item.description).toBe(\"Test gauge\");\n      expect(item.labelNames).toEqual([\"action\", \"service\"]);\n      expect(item.unit).toBe(\"bytes\");\n      expect(item.aggregator).toBe(\"avg\");\n      expect(item.lastSnapshot).toBeNull();\n      expect(item.dirty).toBe(true);\n      expect(item.values).toBeInstanceOf(Map);\n    });","file":"unit/metrics/types/base.spec.js","skipped":false,"dir":"test"},{"name":"should clear dirty flag","suites":["Test Base Metric class","Test setDirty & clearDirty"],"updatePoint":{"line":59,"column":31},"line":59,"code":"    it(\"should clear dirty flag\", () => {\n      expect(item.dirty).toBe(true);\n      item.clearDirty();\n      expect(item.dirty).toBe(false);\n      item.setDirty();\n      expect(item.dirty).toBe(true);\n    });","file":"unit/metrics/types/base.spec.js","skipped":false,"dir":"test"},{"name":"should create empty hash because labels are not defined","suites":["Test Base Metric class","Test hashingLabels"],"updatePoint":{"line":73,"column":63},"line":73,"code":"    it(\"should create empty hash because labels are not defined\", () => {\n      const item = new BaseMetric({\n        type: \"counter\",\n        name: \"test.counter\"\n      }, registry);\n      expect(item.hashingLabels()).toBe(\"\");\n      expect(item.hashingLabels({\n        a: 5\n      })).toBe(\"\");\n      expect(item.hashingLabels({\n        a: 5,\n        b: \"John\",\n        c: null,\n        d: false\n      })).toBe(\"\");\n    });","file":"unit/metrics/types/base.spec.js","skipped":false,"dir":"test"},{"name":"should create limited hash because labels are not defined","suites":["Test Base Metric class","Test hashingLabels"],"updatePoint":{"line":89,"column":65},"line":89,"code":"    it(\"should create limited hash because labels are not defined\", () => {\n      const item = new BaseMetric({\n        type: \"counter\",\n        name: \"test.counter\",\n        labelNames: [\"a\", \"c\", \"d\"]\n      }, registry);\n      expect(item.hashingLabels()).toBe(\"\");\n      expect(item.hashingLabels({\n        a: 5\n      })).toBe(\"5||\");\n      expect(item.hashingLabels({\n        a: 5,\n        c: null,\n        d: false\n      })).toBe(\"5||false\");\n      expect(item.hashingLabels({\n        a: 5,\n        b: \"John\",\n        c: null,\n        d: false\n      })).toBe(\"5||false\");\n    });","file":"unit/metrics/types/base.spec.js","skipped":false,"dir":"test"},{"name":"should create full hash because labels are not defined","suites":["Test Base Metric class","Test hashingLabels"],"updatePoint":{"line":111,"column":62},"line":111,"code":"    it(\"should create full hash because labels are not defined\", () => {\n      const item = new BaseMetric({\n        type: \"counter\",\n        name: \"test.counter\",\n        labelNames: [\"a\", \"b\", \"c\", \"d\"]\n      }, registry);\n      expect(item.hashingLabels()).toBe(\"\");\n      expect(item.hashingLabels({\n        a: 5\n      })).toBe(\"5|||\");\n      expect(item.hashingLabels({\n        a: 5,\n        b: \"John\",\n        c: null,\n        d: false\n      })).toBe('5|\"John\"||false');\n    });","file":"unit/metrics/types/base.spec.js","skipped":false,"dir":"test"},{"name":"should return the correct values","suites":["Test Base Metric class","Test get & clear method"],"updatePoint":{"line":140,"column":40},"line":140,"code":"    it(\"should return the correct values\", () => {\n      const hash = item.hashingLabels({\n        a: 5,\n        b: \"John\",\n        c: null,\n        d: false\n      });\n      const hash2 = item.hashingLabels({\n        a: 6,\n        b: \"Jane\"\n      });\n      item.values.set(hash, 12345);\n      item.values.set(hash2, 67890);\n      expect(item.get({\n        a: 5,\n        b: \"John\",\n        c: null,\n        d: false\n      })).toBe(12345);\n      expect(item.get({\n        a: 6,\n        b: \"Jane\",\n        c: null,\n        d: false\n      })).toBe(67890);\n    });","file":"unit/metrics/types/base.spec.js","skipped":false,"dir":"test"},{"name":"should clear all values","suites":["Test Base Metric class","Test get & clear method"],"updatePoint":{"line":166,"column":31},"line":166,"code":"    it(\"should clear all values\", () => {\n      item.changed = jest.fn();\n      expect(item.values.size).toBe(2);\n      item.clear();\n      expect(item.values.size).toBe(0);\n      expect(item.changed).toBeCalledTimes(1);\n      expect(item.changed).toBeCalledWith();\n    });","file":"unit/metrics/types/base.spec.js","skipped":false,"dir":"test"},{"name":"should call generateSnapshot","suites":["Test Base Metric class","Test snapshot method"],"updatePoint":{"line":187,"column":36},"line":187,"code":"    it(\"should call generateSnapshot\", () => {\n      expect(item.lastSnapshot).toBeNull();\n      expect(item.snapshot()).toBe(\"snapshot\");\n      expect(item.generateSnapshot).toBeCalledTimes(1);\n      expect(item.clearDirty).toBeCalledTimes(1);\n      expect(item.lastSnapshot).toBe(\"snapshot\");\n    });","file":"unit/metrics/types/base.spec.js","skipped":false,"dir":"test"},{"name":"should not call generateSnapshot","suites":["Test Base Metric class","Test snapshot method"],"updatePoint":{"line":194,"column":40},"line":194,"code":"    it(\"should not call generateSnapshot\", () => {\n      item.generateSnapshot.mockClear();\n      item.clearDirty.mockClear();\n      expect(item.snapshot()).toBe(\"snapshot\");\n      expect(item.generateSnapshot).toBeCalledTimes(0);\n      expect(item.clearDirty).toBeCalledTimes(0);\n      expect(item.lastSnapshot).toBe(\"snapshot\");\n    });","file":"unit/metrics/types/base.spec.js","skipped":false,"dir":"test"},{"name":"should call setDirty & registry.changed","suites":["Test Base Metric class","Test changed method"],"updatePoint":{"line":215,"column":47},"line":215,"code":"    it(\"should call setDirty & registry.changed\", () => {\n      const labels = {\n        a: 6,\n        b: \"Jane\"\n      };\n      item.changed(5.6, labels, 123456);\n      expect(item.setDirty).toBeCalledTimes(1);\n      expect(registry.changed).toBeCalledTimes(1);\n      expect(registry.changed).toBeCalledWith(item, 5.6, labels, 123456);\n    });","file":"unit/metrics/types/base.spec.js","skipped":false,"dir":"test"},{"name":"should call snapshot & generate POJO","suites":["Test Base Metric class","Test toObject method"],"updatePoint":{"line":241,"column":44},"line":241,"code":"    it(\"should call snapshot & generate POJO\", () => {\n      expect(item.toObject()).toEqual({\n        type: \"counter\",\n        name: \"test.counter\",\n        labelNames: [\"a\", \"b\"],\n        description: \"Test description\",\n        unit: \"bytes\",\n        values: \"snapshot\"\n      });\n    });","file":"unit/metrics/types/base.spec.js","skipped":false,"dir":"test"},{"name":"should create with base options","suites":["Test Base Metric class","Test Constructor"],"updatePoint":{"line":13,"column":39},"line":13,"code":"    it(\"should create with base options\", () => {\n      registry.changed.mockClear();\n      const item = new CounterMetric({\n        type: \"counter\",\n        name: \"test.counter\"\n      }, registry);\n      expect(item.registry).toBe(registry);\n      expect(item.type).toBe(\"counter\");\n      expect(item.name).toBe(\"test.counter\");\n      expect(registry.changed).toBeCalledTimes(0);\n    });","file":"unit/metrics/types/counter.spec.js","skipped":false,"dir":"test"},{"name":"should call set method","suites":["Test Base Metric class","Test increment method"],"updatePoint":{"line":31,"column":30},"line":31,"code":"    it(\"should call set method\", () => {\n      item.set.mockClear();\n      item.increment();\n      expect(item.set).toBeCalledTimes(1);\n      expect(item.set).toBeCalledWith(1, undefined, undefined);\n      item.set.mockClear();\n      const now = Date.now();\n      item.increment({\n        a: 5\n      }, 3, now);\n      expect(item.set).toBeCalledTimes(1);\n      expect(item.set).toBeCalledWith(4, {\n        a: 5\n      }, now);\n      item.set.mockClear();\n      item.increment();\n      expect(item.set).toBeCalledTimes(1);\n      expect(item.set).toBeCalledWith(5, undefined, undefined);\n    });","file":"unit/metrics/types/counter.spec.js","skipped":false,"dir":"test"},{"name":"should throw error","suites":["Test Base Metric class","Test decrement method"],"updatePoint":{"line":56,"column":26},"line":56,"code":"    it(\"should throw error\", () => {\n      expect(() => item.decrement()).toThrow(\"Counter can't be decreased.\");\n    });","file":"unit/metrics/types/counter.spec.js","skipped":false,"dir":"test"},{"name":"should store a value","suites":["Test Base Metric class","Test set, reset & resetAll method"],"updatePoint":{"line":67,"column":28},"line":67,"code":"    it(\"should store a value\", () => {\n      item.changed.mockClear();\n      expect(item.values.size).toBe(0);\n      item.set(3);\n      expect(item.values.size).toBe(1);\n      expect(item.values.get(\"\")).toEqual({\n        labels: {},\n        timestamp: expect.any(Number),\n        value: 3\n      });\n      expect(item.changed).toBeCalledTimes(1);\n      expect(item.changed).toBeCalledWith(3, undefined, undefined);\n    });","file":"unit/metrics/types/counter.spec.js","skipped":false,"dir":"test"},{"name":"should store a labeled value","suites":["Test Base Metric class","Test set, reset & resetAll method"],"updatePoint":{"line":80,"column":36},"line":80,"code":"    it(\"should store a labeled value\", () => {\n      item.changed.mockClear();\n      expect(item.values.size).toBe(1);\n      item.set(3, {\n        a: 5\n      });\n      expect(item.values.size).toBe(2);\n      expect(item.values.get(\"5\")).toEqual({\n        labels: {\n          a: 5\n        },\n        timestamp: expect.any(Number),\n        value: 3\n      });\n      expect(item.changed).toBeCalledTimes(1);\n      expect(item.changed).toBeCalledWith(3, {\n        a: 5\n      }, undefined);\n    });","file":"unit/metrics/types/counter.spec.js","skipped":false,"dir":"test"},{"name":"should update the labeled value","suites":["Test Base Metric class","Test set, reset & resetAll method"],"updatePoint":{"line":99,"column":39},"line":99,"code":"    it(\"should update the labeled value\", () => {\n      item.changed.mockClear();\n      expect(item.values.size).toBe(2);\n      item.set(8, {\n        a: 5\n      }, 12345);\n      expect(item.values.size).toBe(2);\n      expect(item.values.get(\"5\")).toEqual({\n        labels: {\n          a: 5\n        },\n        timestamp: 12345,\n        value: 8\n      });\n      expect(item.changed).toBeCalledTimes(1);\n      expect(item.changed).toBeCalledWith(8, {\n        a: 5\n      }, 12345);\n    });","file":"unit/metrics/types/counter.spec.js","skipped":false,"dir":"test"},{"name":"should reset the labeled value","suites":["Test Base Metric class","Test set, reset & resetAll method"],"updatePoint":{"line":118,"column":38},"line":118,"code":"    it(\"should reset the labeled value\", () => {\n      item.changed.mockClear();\n      item.reset({\n        a: 5\n      }, 23456);\n      expect(item.values.get(\"5\")).toEqual({\n        labels: {\n          a: 5\n        },\n        timestamp: 23456,\n        value: 0\n      });\n      expect(item.changed).toBeCalledTimes(1);\n      expect(item.changed).toBeCalledWith(0, {\n        a: 5\n      }, 23456);\n      expect(item.values.size).toBe(2);\n    });","file":"unit/metrics/types/counter.spec.js","skipped":false,"dir":"test"},{"name":"should reset all values","suites":["Test Base Metric class","Test set, reset & resetAll method"],"updatePoint":{"line":136,"column":31},"line":136,"code":"    it(\"should reset all values\", () => {\n      item.set(8, {\n        a: 5\n      }, 12345); // restore value\n\n      item.changed.mockClear();\n      item.resetAll(34567);\n      expect(item.values.get(\"\")).toEqual({\n        labels: {},\n        timestamp: 34567,\n        value: 0\n      });\n      expect(item.values.get(\"5\")).toEqual({\n        labels: {\n          a: 5\n        },\n        timestamp: 34567,\n        value: 0\n      });\n      expect(item.changed).toBeCalledTimes(1);\n      expect(item.changed).toBeCalledWith(null, null, 34567);\n      expect(item.values.size).toBe(2);\n    });","file":"unit/metrics/types/counter.spec.js","skipped":false,"dir":"test"},{"name":"should generate a snapshot","suites":["Test Base Metric class","Test generateSnapshot method"],"updatePoint":{"line":176,"column":34},"line":176,"code":"    it(\"should generate a snapshot\", () => {\n      expect(item.generateSnapshot()).toMatchSnapshot();\n    });","file":"unit/metrics/types/counter.spec.js","skipped":false,"dir":"test"},{"name":"should create with base options","suites":["Test Base Metric class","Test Constructor"],"updatePoint":{"line":23,"column":39},"line":23,"code":"    it(\"should create with base options\", () => {\n      registry.changed.mockClear();\n      const item = new GaugeMetric({\n        type: \"gauge\",\n        name: \"test.gauge\"\n      }, registry);\n      expect(item.registry).toBe(registry);\n      expect(item.type).toBe(\"gauge\");\n      expect(item.name).toBe(\"test.gauge\");\n      expect(item.rate).toBeUndefined();\n      expect(registry.changed).toBeCalledTimes(0);\n    });","file":"unit/metrics/types/gauge.spec.js","skipped":false,"dir":"test"},{"name":"should create with custom options","suites":["Test Base Metric class","Test Constructor"],"updatePoint":{"line":35,"column":41},"line":35,"code":"    it(\"should create with custom options\", () => {\n      registry.changed.mockClear();\n      const item = new GaugeMetric({\n        type: \"gauge\",\n        name: \"test.gauge\",\n        rate: true\n      }, registry);\n      expect(item.registry).toBe(registry);\n      expect(item.type).toBe(\"gauge\");\n      expect(item.name).toBe(\"test.gauge\");\n      expect(item.rate).toBe(true);\n      expect(registry.changed).toBeCalledTimes(0);\n    });","file":"unit/metrics/types/gauge.spec.js","skipped":false,"dir":"test"},{"name":"should call set method","suites":["Test Base Metric class","Test increment method"],"updatePoint":{"line":55,"column":30},"line":55,"code":"    it(\"should call set method\", () => {\n      item.set.mockClear();\n      item.increment();\n      expect(item.set).toBeCalledTimes(1);\n      expect(item.set).toBeCalledWith(1, undefined, undefined);\n      item.set.mockClear();\n      const now = Date.now();\n      item.increment({\n        a: 5\n      }, 3, now);\n      expect(item.set).toBeCalledTimes(1);\n      expect(item.set).toBeCalledWith(4, {\n        a: 5\n      }, now);\n      item.set.mockClear();\n      item.increment();\n      expect(item.set).toBeCalledTimes(1);\n      expect(item.set).toBeCalledWith(5, undefined, undefined);\n    });","file":"unit/metrics/types/gauge.spec.js","skipped":false,"dir":"test"},{"name":"should call set method","suites":["Test Base Metric class","Test decrement method"],"updatePoint":{"line":82,"column":30},"line":82,"code":"    it(\"should call set method\", () => {\n      item.set.mockClear();\n      item.decrement();\n      expect(item.set).toBeCalledTimes(1);\n      expect(item.set).toBeCalledWith(9, undefined, undefined);\n      item.set.mockClear();\n      const now = Date.now();\n      item.decrement({\n        a: 5\n      }, 3, now);\n      expect(item.set).toBeCalledTimes(1);\n      expect(item.set).toBeCalledWith(6, {\n        a: 5\n      }, now);\n      item.set.mockClear();\n      item.decrement();\n      expect(item.set).toBeCalledTimes(1);\n      expect(item.set).toBeCalledWith(5, undefined, undefined);\n    });","file":"unit/metrics/types/gauge.spec.js","skipped":false,"dir":"test"},{"name":"should store a value","suites":["Test Base Metric class","Test set, reset & resetAll method"],"updatePoint":{"line":110,"column":28},"line":110,"code":"    it(\"should store a value\", () => {\n      MetricRate.mockClear();\n      rateUpdate.mockClear();\n      item.changed.mockClear();\n      expect(item.values.size).toBe(0);\n      item.set(3);\n      expect(item.values.size).toBe(1);\n      expect(item.values.get(\"\")).toEqual({\n        labels: {},\n        timestamp: expect.any(Number),\n        value: 3,\n        rate: fakeRate\n      });\n      expect(MetricRate).toBeCalledTimes(1);\n      expect(MetricRate).toBeCalledWith(item, item.values.get(\"\"), 1);\n      expect(rateUpdate).toBeCalledTimes(1);\n      expect(rateUpdate).toBeCalledWith(3);\n      expect(item.changed).toBeCalledTimes(1);\n      expect(item.changed).toBeCalledWith(3, undefined, undefined);\n    });","file":"unit/metrics/types/gauge.spec.js","skipped":false,"dir":"test"},{"name":"should store a labeled value","suites":["Test Base Metric class","Test set, reset & resetAll method"],"updatePoint":{"line":130,"column":36},"line":130,"code":"    it(\"should store a labeled value\", () => {\n      MetricRate.mockClear();\n      rateUpdate.mockClear();\n      item.changed.mockClear();\n      expect(item.values.size).toBe(1);\n      item.set(3, {\n        a: 5\n      });\n      expect(item.values.size).toBe(2);\n      expect(item.values.get(\"5\")).toEqual({\n        labels: {\n          a: 5\n        },\n        timestamp: expect.any(Number),\n        value: 3,\n        rate: fakeRate\n      });\n      expect(MetricRate).toBeCalledTimes(1);\n      expect(MetricRate).toBeCalledWith(item, item.values.get(\"5\"), 1);\n      expect(rateUpdate).toBeCalledTimes(1);\n      expect(rateUpdate).toBeCalledWith(3);\n      expect(item.changed).toBeCalledTimes(1);\n      expect(item.changed).toBeCalledWith(3, {\n        a: 5\n      }, undefined);\n    });","file":"unit/metrics/types/gauge.spec.js","skipped":false,"dir":"test"},{"name":"should update the labeled value","suites":["Test Base Metric class","Test set, reset & resetAll method"],"updatePoint":{"line":156,"column":39},"line":156,"code":"    it(\"should update the labeled value\", () => {\n      MetricRate.mockClear();\n      rateUpdate.mockClear();\n      item.changed.mockClear();\n      expect(item.values.size).toBe(2);\n      item.set(8, {\n        a: 5\n      }, 12345);\n      expect(item.values.size).toBe(2);\n      expect(item.values.get(\"5\")).toEqual({\n        labels: {\n          a: 5\n        },\n        timestamp: 12345,\n        value: 8,\n        rate: fakeRate\n      });\n      expect(MetricRate).toBeCalledTimes(0);\n      expect(rateUpdate).toBeCalledTimes(1);\n      expect(rateUpdate).toBeCalledWith(8);\n      expect(item.changed).toBeCalledTimes(1);\n      expect(item.changed).toBeCalledWith(8, {\n        a: 5\n      }, 12345);\n    });","file":"unit/metrics/types/gauge.spec.js","skipped":false,"dir":"test"},{"name":"should reset the labeled value","suites":["Test Base Metric class","Test set, reset & resetAll method"],"updatePoint":{"line":181,"column":38},"line":181,"code":"    it(\"should reset the labeled value\", () => {\n      MetricRate.mockClear();\n      rateUpdate.mockClear();\n      item.changed.mockClear();\n      item.reset({\n        a: 5\n      }, 23456);\n      expect(item.values.get(\"5\")).toEqual({\n        labels: {\n          a: 5\n        },\n        timestamp: 23456,\n        value: 0,\n        rate: fakeRate\n      });\n      expect(MetricRate).toBeCalledTimes(0);\n      expect(rateUpdate).toBeCalledTimes(1);\n      expect(rateUpdate).toBeCalledWith(0);\n      expect(item.changed).toBeCalledTimes(1);\n      expect(item.changed).toBeCalledWith(0, {\n        a: 5\n      }, 23456);\n      expect(item.values.size).toBe(2);\n    });","file":"unit/metrics/types/gauge.spec.js","skipped":false,"dir":"test"},{"name":"should reset all values","suites":["Test Base Metric class","Test set, reset & resetAll method"],"updatePoint":{"line":205,"column":31},"line":205,"code":"    it(\"should reset all values\", () => {\n      item.set(8, {\n        a: 5\n      }, 12345); // restore value\n\n      item.changed.mockClear();\n      MetricRate.mockClear();\n      rateUpdate.mockClear();\n      item.resetAll(34567);\n      expect(item.values.get(\"\")).toEqual({\n        labels: {},\n        timestamp: 34567,\n        value: 0,\n        rate: fakeRate\n      });\n      expect(item.values.get(\"5\")).toEqual({\n        labels: {\n          a: 5\n        },\n        timestamp: 34567,\n        value: 0,\n        rate: fakeRate\n      });\n      expect(MetricRate).toBeCalledTimes(0);\n      expect(rateUpdate).toBeCalledTimes(0);\n      expect(item.changed).toBeCalledTimes(1);\n      expect(item.changed).toBeCalledWith(null, null, 34567);\n      expect(item.values.size).toBe(2);\n    });","file":"unit/metrics/types/gauge.spec.js","skipped":false,"dir":"test"},{"name":"should generate a snapshot","suites":["Test Base Metric class","Test generateSnapshot method"],"updatePoint":{"line":252,"column":34},"line":252,"code":"    it(\"should generate a snapshot\", () => {\n      expect(item.generateSnapshot()).toMatchSnapshot();\n    });","file":"unit/metrics/types/gauge.spec.js","skipped":false,"dir":"test"},{"name":"should create with default options","suites":["Test Base Metric class","Test Constructor"],"updatePoint":{"line":28,"column":42},"line":28,"code":"    it(\"should create with default options\", () => {\n      registry.changed.mockClear();\n      const item = new HistogramMetric({\n        type: \"histogram\",\n        name: \"test.histogram\"\n      }, registry);\n      expect(item.registry).toBe(registry);\n      expect(item.type).toBe(\"histogram\");\n      expect(item.name).toBe(\"test.histogram\");\n      expect(item.buckets).toBeUndefined();\n      expect(item.quantiles).toBeUndefined();\n      expect(item.maxAgeSeconds).toBeUndefined();\n      expect(item.ageBuckets).toBeUndefined();\n      expect(registry.changed).toBeCalledTimes(0);\n    });","file":"unit/metrics/types/histogram.spec.js","skipped":false,"dir":"test"},{"name":"should create with default buckets","suites":["Test Base Metric class","Test Constructor","Test with buckets"],"updatePoint":{"line":44,"column":44},"line":44,"code":"      it(\"should create with default buckets\", () => {\n        registry.changed.mockClear();\n        const item = new HistogramMetric({\n          type: \"histogram\",\n          name: \"test.histogram\",\n          buckets: true\n        }, registry);\n        expect(item.buckets).toEqual([0.1, 0.2, 0.5, 1, 2, 5, 10]);\n      });","file":"unit/metrics/types/histogram.spec.js","skipped":false,"dir":"test"},{"name":"should create with custom buckets","suites":["Test Base Metric class","Test Constructor","Test with buckets"],"updatePoint":{"line":53,"column":43},"line":53,"code":"      it(\"should create with custom buckets\", () => {\n        registry.changed.mockClear();\n        const item = new HistogramMetric({\n          type: \"histogram\",\n          name: \"test.histogram\",\n          buckets: [13, 3, 7, 9, 1]\n        }, registry);\n        expect(item.buckets).toEqual([1, 3, 7, 9, 13]);\n      });","file":"unit/metrics/types/histogram.spec.js","skipped":false,"dir":"test"},{"name":"should create with linearBuckets","suites":["Test Base Metric class","Test Constructor","Test with buckets"],"updatePoint":{"line":62,"column":42},"line":62,"code":"      it(\"should create with linearBuckets\", () => {\n        registry.changed.mockClear();\n        const item = new HistogramMetric({\n          type: \"histogram\",\n          name: \"test.histogram\",\n          linearBuckets: {\n            start: 1,\n            width: 4,\n            count: 5\n          }\n        }, registry);\n        expect(item.buckets).toEqual([1, 5, 9, 13, 17]);\n      });","file":"unit/metrics/types/histogram.spec.js","skipped":false,"dir":"test"},{"name":"should create with exponentialBuckets","suites":["Test Base Metric class","Test Constructor","Test with buckets"],"updatePoint":{"line":75,"column":47},"line":75,"code":"      it(\"should create with exponentialBuckets\", () => {\n        registry.changed.mockClear();\n        const item = new HistogramMetric({\n          type: \"histogram\",\n          name: \"test.histogram\",\n          exponentialBuckets: {\n            start: 1,\n            factor: 2.5,\n            count: 4\n          }\n        }, registry);\n        expect(item.buckets).toEqual([1, 2.5, 6.25, 15.625]);\n      });","file":"unit/metrics/types/histogram.spec.js","skipped":false,"dir":"test"},{"name":"should create with default quantiles","suites":["Test Base Metric class","Test Constructor","Test with quantiles"],"updatePoint":{"line":90,"column":46},"line":90,"code":"      it(\"should create with default quantiles\", () => {\n        registry.changed.mockClear();\n        const item = new HistogramMetric({\n          type: \"histogram\",\n          name: \"test.histogram\",\n          quantiles: true,\n          maxAgeSeconds: 60,\n          ageBuckets: 10\n        }, registry);\n        expect(item.quantiles).toEqual([0.1, 0.2, 0.5, 0.9, 0.99]);\n      });","file":"unit/metrics/types/histogram.spec.js","skipped":false,"dir":"test"},{"name":"should create with custom quantiles","suites":["Test Base Metric class","Test Constructor","Test with quantiles"],"updatePoint":{"line":101,"column":45},"line":101,"code":"      it(\"should create with custom quantiles\", () => {\n        registry.changed.mockClear();\n        const item = new HistogramMetric({\n          type: \"histogram\",\n          name: \"test.histogram\",\n          quantiles: [0.9, 0.6, 0.4, 0.2, 0.15],\n          maxAgeSeconds: 30,\n          ageBuckets: 5\n        }, registry);\n        expect(item.quantiles).toEqual([0.15, 0.2, 0.4, 0.6, 0.9]);\n      });","file":"unit/metrics/types/histogram.spec.js","skipped":false,"dir":"test"},{"name":"should create with rates","suites":["Test Base Metric class","Test Constructor","Test with quantiles"],"updatePoint":{"line":113,"column":32},"line":113,"code":"    it(\"should create with rates\", () => {\n      registry.changed.mockClear();\n      const item = new HistogramMetric({\n        type: \"histogram\",\n        name: \"test.histogram\",\n        rate: true\n      }, registry);\n      expect(item.rate).toBe(true);\n    });","file":"unit/metrics/types/histogram.spec.js","skipped":false,"dir":"test"},{"name":"should store values","suites":["Test Base Metric class","Test observe method","Test without buckets & quantiles"],"updatePoint":{"line":130,"column":29},"line":130,"code":"      it(\"should store values\", () => {\n        item.changed.mockClear();\n        const now = Date.now();\n        item.observe(100, null, now);\n        expect(item.values.get(\"\")).toEqual({\n          count: 1,\n          labels: {},\n          sum: 100,\n          lastValue: 100,\n          timestamp: now\n        });\n        expect(item.changed).toBeCalledTimes(1);\n        expect(item.changed).toBeCalledWith(100, null, now);\n      });","file":"unit/metrics/types/histogram.spec.js","skipped":false,"dir":"test"},{"name":"should sum values","suites":["Test Base Metric class","Test observe method","Test without buckets & quantiles"],"updatePoint":{"line":144,"column":27},"line":144,"code":"      it(\"should sum values\", () => {\n        item.changed.mockClear();\n        const now = Date.now();\n        item.observe(250, null, now);\n        expect(item.values.get(\"\")).toEqual({\n          count: 2,\n          labels: {},\n          sum: 350,\n          lastValue: 250,\n          timestamp: now\n        });\n        expect(item.changed).toBeCalledTimes(1);\n        expect(item.changed).toBeCalledWith(250, null, now);\n      });","file":"unit/metrics/types/histogram.spec.js","skipped":false,"dir":"test"},{"name":"should store values","suites":["Test Base Metric class","Test observe method","Test with buckets"],"updatePoint":{"line":166,"column":29},"line":166,"code":"      it(\"should store values\", () => {\n        item.changed.mockClear();\n        const now = Date.now();\n        item.observe(2, null, now);\n        expect(item.values.get(\"\")).toEqual({\n          count: 1,\n          labels: {},\n          sum: 2,\n          lastValue: 2,\n          timestamp: now,\n          bucketValues: {\n            1: 0,\n            2: 1,\n            5: 1,\n            10: 1,\n            20: 1,\n            50: 1\n          }\n        });\n        expect(item.changed).toBeCalledTimes(1);\n        expect(item.changed).toBeCalledWith(2, null, now);\n      });","file":"unit/metrics/types/histogram.spec.js","skipped":false,"dir":"test"},{"name":"should sum values","suites":["Test Base Metric class","Test observe method","Test with buckets"],"updatePoint":{"line":188,"column":27},"line":188,"code":"      it(\"should sum values\", () => {\n        item.changed.mockClear();\n        const now = Date.now();\n        item.observe(13, null, now);\n        expect(item.values.get(\"\")).toEqual({\n          count: 2,\n          labels: {},\n          sum: 15,\n          lastValue: 13,\n          timestamp: now,\n          bucketValues: {\n            1: 0,\n            2: 1,\n            5: 1,\n            10: 1,\n            20: 2,\n            50: 2\n          }\n        });\n        expect(item.changed).toBeCalledTimes(1);\n        expect(item.changed).toBeCalledWith(13, null, now);\n      });","file":"unit/metrics/types/histogram.spec.js","skipped":false,"dir":"test"},{"name":"should store values","suites":["Test Base Metric class","Test observe method","Test with quantiles"],"updatePoint":{"line":218,"column":29},"line":218,"code":"      it(\"should store values\", () => {\n        item.changed.mockClear();\n        const now = Date.now();\n        item.observe(5, null, now);\n        expect(item.values.get(\"\")).toEqual({\n          count: 1,\n          labels: {},\n          sum: 5,\n          lastValue: 5,\n          timestamp: now,\n          quantileValues: expect.any(HistogramMetric.TimeWindowQuantiles)\n        });\n        expect(item.changed).toBeCalledTimes(1);\n        expect(item.changed).toBeCalledWith(5, null, now);\n      });","file":"unit/metrics/types/histogram.spec.js","skipped":false,"dir":"test"},{"name":"should sum values","suites":["Test Base Metric class","Test observe method","Test with quantiles"],"updatePoint":{"line":233,"column":27},"line":233,"code":"      it(\"should sum values\", () => {\n        item.changed.mockClear();\n        const now = Date.now();\n        item.observe(13, null, now);\n        expect(item.values.get(\"\")).toEqual({\n          count: 2,\n          labels: {},\n          sum: 18,\n          lastValue: 13,\n          timestamp: now,\n          quantileValues: expect.any(HistogramMetric.TimeWindowQuantiles)\n        });\n        expect(item.changed).toBeCalledTimes(1);\n        expect(item.changed).toBeCalledWith(13, null, now);\n      });","file":"unit/metrics/types/histogram.spec.js","skipped":false,"dir":"test"},{"name":"should store values","suites":["Test Base Metric class","Test observe method","Test with rate"],"updatePoint":{"line":256,"column":29},"line":256,"code":"      it(\"should store values\", () => {\n        item.changed.mockClear();\n        const now = Date.now();\n        item.observe(100, null, now);\n        expect(item.values.get(\"\")).toEqual({\n          count: 1,\n          labels: {},\n          sum: 100,\n          lastValue: 100,\n          rate: expect.anything(),\n          timestamp: now\n        });\n        expect(MetricRate).toBeCalledTimes(1);\n        expect(MetricRate).toBeCalledWith(item, item.values.get(\"\"), 1);\n        expect(rateUpdate).toBeCalledTimes(1);\n        expect(rateUpdate).toBeCalledWith(1);\n        expect(item.changed).toBeCalledTimes(1);\n        expect(item.changed).toBeCalledWith(100, null, now);\n      });","file":"unit/metrics/types/histogram.spec.js","skipped":false,"dir":"test"},{"name":"should sum values","suites":["Test Base Metric class","Test observe method","Test with rate"],"updatePoint":{"line":275,"column":27},"line":275,"code":"      it(\"should sum values\", () => {\n        MetricRate.mockClear();\n        rateUpdate.mockClear();\n        item.changed.mockClear();\n        const now = Date.now();\n        item.observe(250, null, now);\n        expect(item.values.get(\"\")).toEqual({\n          count: 2,\n          labels: {},\n          sum: 350,\n          lastValue: 250,\n          rate: expect.anything(),\n          timestamp: now\n        });\n        expect(MetricRate).toBeCalledTimes(0);\n        expect(rateUpdate).toBeCalledTimes(1);\n        expect(rateUpdate).toBeCalledWith(2);\n        expect(item.changed).toBeCalledTimes(1);\n        expect(item.changed).toBeCalledWith(250, null, now);\n      });","file":"unit/metrics/types/histogram.spec.js","skipped":false,"dir":"test"},{"name":"should generate bucket object","suites":["Test Base Metric class","Test createBucketValues method"],"updatePoint":{"line":303,"column":37},"line":303,"code":"    it(\"should generate bucket object\", () => {\n      expect(item.createBucketValues()).toEqual({\n        1: 0,\n        2: 0,\n        5: 0,\n        8: 0,\n        10: 0,\n        20: 0\n      });\n    });","file":"unit/metrics/types/histogram.spec.js","skipped":false,"dir":"test"},{"name":"should generate snapshot","suites":["Test Base Metric class","Test generateSnapshot & generateItemSnapshot methods"],"updatePoint":{"line":323,"column":32},"line":323,"code":"    it(\"should generate snapshot\", () => {\n      const now = 1558295472783;\n      item.observe(2, null, now + 1);\n      item.observe(8, null, now + 5);\n      item.observe(3, null, now + 10);\n      item.observe(6, null, now + 15);\n      item.observe(5, null, now + 20);\n      item.observe(2, {\n        a: 5\n      }, now + 25);\n      item.observe(1, {\n        a: 5\n      }, now + 30);\n      item.observe(2, {\n        a: 5\n      }, now + 35);\n      item.observe(4, {\n        a: 5\n      }, now + 40);\n      expect(item.generateSnapshot()).toMatchSnapshot();\n    });","file":"unit/metrics/types/histogram.spec.js","skipped":false,"dir":"test"},{"name":"should initialize a value item","suites":["Test Base Metric class","Test resetItem method"],"updatePoint":{"line":353,"column":38},"line":353,"code":"    it(\"should initialize a value item\", () => {\n      expect(item.resetItem({}, 123456)).toEqual({\n        count: 0,\n        sum: 0,\n        lastValue: null,\n        timestamp: 123456,\n        bucketValues: {\n          1: 0,\n          2: 0,\n          5: 0,\n          10: 0,\n          20: 0\n        },\n        quantileValues: expect.any(HistogramMetric.TimeWindowQuantiles)\n      });\n    });","file":"unit/metrics/types/histogram.spec.js","skipped":false,"dir":"test"},{"name":"should store initial values","suites":["Test Base Metric class","Test reset & resetAll method"],"updatePoint":{"line":379,"column":35},"line":379,"code":"    it(\"should store initial values\", () => {\n      expect(item.values.size).toBe(0);\n      const now = 1558295472783;\n      item.observe(2, null, now + 1);\n      item.observe(8, null, now + 5);\n      item.observe(3, null, now + 10);\n      item.observe(6, null, now + 15);\n      item.observe(5, null, now + 20);\n      item.observe(2, {\n        a: 5\n      }, now + 25);\n      item.observe(1, {\n        a: 5\n      }, now + 30);\n      item.observe(2, {\n        a: 5\n      }, now + 35);\n      item.observe(4, {\n        a: 5\n      }, now + 40);\n      expect(item.values.size).toBe(2);\n    });","file":"unit/metrics/types/histogram.spec.js","skipped":false,"dir":"test"},{"name":"should reset the labeled value","suites":["Test Base Metric class","Test reset & resetAll method"],"updatePoint":{"line":401,"column":38},"line":401,"code":"    it(\"should reset the labeled value\", () => {\n      item.changed.mockClear();\n      item.reset({\n        a: 5\n      }, 23456);\n      expect(item.values.get(\"5\")).toEqual({\n        labels: {\n          a: 5\n        },\n        count: 0,\n        sum: 0,\n        lastValue: null,\n        timestamp: 23456,\n        bucketValues: {\n          1: 0,\n          2: 0,\n          5: 0,\n          10: 0,\n          20: 0\n        },\n        quantileValues: expect.any(HistogramMetric.TimeWindowQuantiles)\n      });\n      expect(item.changed).toBeCalledTimes(1);\n      expect(item.changed).toBeCalledWith(null, {\n        a: 5\n      }, 23456);\n      expect(item.values.size).toBe(2);\n    });","file":"unit/metrics/types/histogram.spec.js","skipped":false,"dir":"test"},{"name":"should reset all values","suites":["Test Base Metric class","Test reset & resetAll method"],"updatePoint":{"line":429,"column":31},"line":429,"code":"    it(\"should reset all values\", () => {\n      item.observe(2, {\n        a: 5\n      }, 12345); // restore value\n\n      item.changed.mockClear();\n      item.resetAll(34567);\n      expect(item.values.get(\"\")).toEqual({\n        labels: {},\n        count: 0,\n        sum: 0,\n        lastValue: null,\n        timestamp: 34567,\n        bucketValues: {\n          1: 0,\n          2: 0,\n          5: 0,\n          10: 0,\n          20: 0\n        },\n        quantileValues: expect.any(HistogramMetric.TimeWindowQuantiles)\n      });\n      expect(item.values.get(\"5\")).toEqual({\n        labels: {\n          a: 5\n        },\n        count: 0,\n        sum: 0,\n        lastValue: null,\n        timestamp: 34567,\n        bucketValues: {\n          1: 0,\n          2: 0,\n          5: 0,\n          10: 0,\n          20: 0\n        },\n        quantileValues: expect.any(HistogramMetric.TimeWindowQuantiles)\n      });\n      expect(item.changed).toBeCalledTimes(1);\n      expect(item.changed).toBeCalledWith();\n      expect(item.values.size).toBe(2);\n    });","file":"unit/metrics/types/histogram.spec.js","skipped":false,"dir":"test"},{"name":"should linear generate bucket","suites":["Test Base Metric class","Test generateLinearBuckets & generateExponentialBuckets method"],"updatePoint":{"line":474,"column":37},"line":474,"code":"    it(\"should linear generate bucket\", () => {\n      expect(HistogramMetric.generateLinearBuckets(1, 1, 1)).toEqual([1]);\n      expect(HistogramMetric.generateLinearBuckets(1, 1, 0)).toEqual([]);\n      expect(HistogramMetric.generateLinearBuckets(0, 5, 3)).toEqual([0, 5, 10]);\n      expect(HistogramMetric.generateLinearBuckets(1, 2, 10)).toEqual([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]);\n    });","file":"unit/metrics/types/histogram.spec.js","skipped":false,"dir":"test"},{"name":"should exponential generate bucket","suites":["Test Base Metric class","Test generateLinearBuckets & generateExponentialBuckets method"],"updatePoint":{"line":480,"column":42},"line":480,"code":"    it(\"should exponential generate bucket\", () => {\n      expect(HistogramMetric.generateExponentialBuckets(1, 1, 1)).toEqual([1]);\n      expect(HistogramMetric.generateExponentialBuckets(1, 1, 0)).toEqual([]);\n      expect(HistogramMetric.generateExponentialBuckets(1, 5, 3)).toEqual([1, 5, 25]);\n      expect(HistogramMetric.generateExponentialBuckets(1, 2, 10)).toEqual([1, 2, 4, 8, 16, 32, 64, 128, 256, 512]);\n    });","file":"unit/metrics/types/histogram.spec.js","skipped":false,"dir":"test"},{"name":"should create variables","suites":["Test Bucket class"],"updatePoint":{"line":490,"column":29},"line":490,"code":"  it(\"should create variables\", () => {\n    expect(bucket.count).toBe(0);\n    expect(bucket.samples).toEqual([]);\n  });","file":"unit/metrics/types/histogram.spec.js","skipped":false,"dir":"test"},{"name":"should store samples","suites":["Test Bucket class"],"updatePoint":{"line":494,"column":26},"line":494,"code":"  it(\"should store samples\", () => {\n    bucket.add(3);\n    bucket.add(5);\n    bucket.add(1);\n    expect(bucket.count).toBe(3);\n    expect(bucket.samples).toEqual([3, 5, 1]);\n  });","file":"unit/metrics/types/histogram.spec.js","skipped":false,"dir":"test"},{"name":"should clear samples","suites":["Test Bucket class"],"updatePoint":{"line":501,"column":26},"line":501,"code":"  it(\"should clear samples\", () => {\n    bucket.clear();\n    expect(bucket.count).toBe(0);\n    expect(bucket.samples).toEqual([]);\n  });","file":"unit/metrics/types/histogram.spec.js","skipped":false,"dir":"test"},{"name":"should create variables","suites":["Test TimeWindowQuantiles class"],"updatePoint":{"line":514,"column":29},"line":514,"code":"  it(\"should create variables\", () => {\n    item = new HistogramMetric.TimeWindowQuantiles(fakeMetric, [0.1, 0.5, 0.9], 30, 3);\n    expect(item.metric).toBe(fakeMetric);\n    expect(item.quantiles).toEqual([0.1, 0.5, 0.9]);\n    expect(item.maxAgeSeconds).toBe(30);\n    expect(item.ageBuckets).toBe(3);\n    expect(item.ringBuckets.length).toBe(3);\n    expect(item.ringBuckets[0]).toBeInstanceOf(HistogramMetric.Bucket);\n    expect(item.dirty).toBe(true);\n    expect(item.currentBucket).toBe(0);\n    expect(item.lastSnapshot).toBe(null);\n    jest.spyOn(item, \"rotate\");\n  });","file":"unit/metrics/types/histogram.spec.js","skipped":false,"dir":"test"},{"name":"should set dirty flag","suites":["Test TimeWindowQuantiles class"],"updatePoint":{"line":527,"column":27},"line":527,"code":"  it(\"should set dirty flag\", () => {\n    fakeMetric.setDirty.mockClear();\n    item.clearDirty();\n    expect(item.dirty).toBe(false);\n    item.setDirty();\n    expect(item.dirty).toBe(true);\n    expect(fakeMetric.setDirty).toBeCalledTimes(1);\n  });","file":"unit/metrics/types/histogram.spec.js","skipped":false,"dir":"test"},{"name":"should add value to the current bucket","suites":["Test TimeWindowQuantiles class"],"updatePoint":{"line":535,"column":44},"line":535,"code":"  it(\"should add value to the current bucket\", () => {\n    item.add(3);\n    item.add(5);\n    item.add(1);\n    expect(item.ringBuckets[0].samples).toEqual([3, 5, 1]);\n  });","file":"unit/metrics/types/histogram.spec.js","skipped":false,"dir":"test"},{"name":"should call rotate after 10 secs","suites":["Test TimeWindowQuantiles class"],"updatePoint":{"line":541,"column":38},"line":541,"code":"  it(\"should call rotate after 10 secs\", () => {\n    item.clearDirty();\n    expect(item.rotate).toBeCalledTimes(0);\n    clock.tick(11 * 1000);\n    expect(item.rotate).toBeCalledTimes(1);\n    expect(item.currentBucket).toBe(1);\n    expect(item.dirty).toBe(true);\n    item.add(2);\n    item.add(6);\n    item.add(0);\n    expect(item.ringBuckets[1].samples).toEqual([2, 6, 0]);\n  });","file":"unit/metrics/types/histogram.spec.js","skipped":false,"dir":"test"},{"name":"should increase bucket index","suites":["Test TimeWindowQuantiles class"],"updatePoint":{"line":553,"column":34},"line":553,"code":"  it(\"should increase bucket index\", () => {\n    item.rotate();\n    expect(item.currentBucket).toBe(2);\n  });","file":"unit/metrics/types/histogram.spec.js","skipped":false,"dir":"test"},{"name":"should reset bucket index & samples","suites":["Test TimeWindowQuantiles class"],"updatePoint":{"line":557,"column":41},"line":557,"code":"  it(\"should reset bucket index & samples\", () => {\n    expect(item.ringBuckets[0].samples).toEqual([3, 5, 1]);\n    item.rotate();\n    expect(item.currentBucket).toBe(0);\n    expect(item.ringBuckets[0].samples).toEqual([]);\n    item.add(8);\n    item.add(5);\n    item.add(2);\n  });","file":"unit/metrics/types/histogram.spec.js","skipped":false,"dir":"test"},{"name":"should generate snapshot","suites":["Test TimeWindowQuantiles class"],"updatePoint":{"line":566,"column":30},"line":566,"code":"  it(\"should generate snapshot\", () => {\n    expect(item.lastSnapshot).toBeNull();\n    snapshot = item.snapshot();\n    expect(item.lastSnapshot).toBe(snapshot);\n    expect(snapshot).toMatchSnapshot();\n  });","file":"unit/metrics/types/histogram.spec.js","skipped":false,"dir":"test"},{"name":"should not generate snapshot","suites":["Test TimeWindowQuantiles class"],"updatePoint":{"line":572,"column":34},"line":572,"code":"  it(\"should not generate snapshot\", () => {\n    jest.spyOn(item, \"clearDirty\");\n    expect(item.snapshot()).toBe(snapshot);\n    expect(item.clearDirty).toBeCalledTimes(0);\n  });","file":"unit/metrics/types/histogram.spec.js","skipped":false,"dir":"test"},{"name":"should throw error","suites":["Test MetricTypes resolver"],"updatePoint":{"line":8,"column":24},"line":8,"code":"  it(\"should throw error\", () => {\n    expect(() => MetricTypes.resolve()).toThrowError(BrokerOptionsError);\n    expect(() => MetricTypes.resolve(\"xyz\")).toThrowError(BrokerOptionsError);\n  });","file":"unit/metrics/types/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve metric types by string","suites":["Test MetricTypes resolver"],"updatePoint":{"line":12,"column":43},"line":12,"code":"  it(\"should resolve metric types by string\", () => {\n    expect(MetricTypes.resolve(\"counter\")).toBe(MetricTypes.Counter);\n    expect(MetricTypes.resolve(\"gauge\")).toBe(MetricTypes.Gauge);\n    expect(MetricTypes.resolve(\"histogram\")).toBe(MetricTypes.Histogram);\n    expect(MetricTypes.resolve(\"info\")).toBe(MetricTypes.Info);\n  });","file":"unit/metrics/types/index.spec.js","skipped":false,"dir":"test"},{"name":"should throw error if type if not correct","suites":["Test MetricTypes register"],"updatePoint":{"line":22,"column":47},"line":22,"code":"  it(\"should throw error if type if not correct\", () => {\n    expect(() => {\n      MetricTypes.resolve(\"MyCustom\");\n    }).toThrowError(BrokerOptionsError);\n  });","file":"unit/metrics/types/index.spec.js","skipped":false,"dir":"test"},{"name":"should register new type","suites":["Test MetricTypes register"],"updatePoint":{"line":27,"column":30},"line":27,"code":"  it(\"should register new type\", () => {\n    MetricTypes.register(\"MyCustom\", MyCustom);\n    expect(MetricTypes.MyCustom).toBe(MyCustom);\n  });","file":"unit/metrics/types/index.spec.js","skipped":false,"dir":"test"},{"name":"should find the new type","suites":["Test MetricTypes register"],"updatePoint":{"line":31,"column":30},"line":31,"code":"  it(\"should find the new type\", () => {\n    const type = MetricTypes.resolve(\"MyCustom\");\n    expect(type).toBe(MyCustom);\n  });","file":"unit/metrics/types/index.spec.js","skipped":false,"dir":"test"},{"name":"should create with base options","suites":["Test Base Metric class","Test Constructor"],"updatePoint":{"line":13,"column":39},"line":13,"code":"    it(\"should create with base options\", () => {\n      registry.changed.mockClear();\n      const item = new InfoMetric({\n        type: \"info\",\n        name: \"test.info\"\n      }, registry);\n      expect(item.registry).toBe(registry);\n      expect(item.type).toBe(\"info\");\n      expect(item.name).toBe(\"test.info\");\n      expect(registry.changed).toBeCalledTimes(0);\n    });","file":"unit/metrics/types/info.spec.js","skipped":false,"dir":"test"},{"name":"should store a value","suites":["Test Base Metric class","Test set, reset & resetAll method"],"updatePoint":{"line":32,"column":28},"line":32,"code":"    it(\"should store a value\", () => {\n      item.changed.mockClear();\n      expect(item.values.size).toBe(0);\n      item.set(\"John\");\n      expect(item.values.size).toBe(1);\n      expect(item.values.get(\"\")).toEqual({\n        labels: {},\n        timestamp: expect.any(Number),\n        value: \"John\"\n      });\n      expect(item.changed).toBeCalledTimes(1);\n      expect(item.changed).toBeCalledWith(\"John\", undefined, undefined);\n    });","file":"unit/metrics/types/info.spec.js","skipped":false,"dir":"test"},{"name":"should store a labeled value","suites":["Test Base Metric class","Test set, reset & resetAll method"],"updatePoint":{"line":45,"column":36},"line":45,"code":"    it(\"should store a labeled value\", () => {\n      item.changed.mockClear();\n      expect(item.values.size).toBe(1);\n      item.set(\"Jane\", {\n        a: 5\n      });\n      expect(item.values.size).toBe(2);\n      expect(item.values.get(\"5\")).toEqual({\n        labels: {\n          a: 5\n        },\n        timestamp: expect.any(Number),\n        value: \"Jane\"\n      });\n      expect(item.changed).toBeCalledTimes(1);\n      expect(item.changed).toBeCalledWith(\"Jane\", {\n        a: 5\n      }, undefined);\n    });","file":"unit/metrics/types/info.spec.js","skipped":false,"dir":"test"},{"name":"should update the labeled value","suites":["Test Base Metric class","Test set, reset & resetAll method"],"updatePoint":{"line":64,"column":39},"line":64,"code":"    it(\"should update the labeled value\", () => {\n      item.changed.mockClear();\n      expect(item.values.size).toBe(2);\n      item.set(\"Adam\", {\n        a: 5\n      }, 12345);\n      expect(item.values.size).toBe(2);\n      expect(item.values.get(\"5\")).toEqual({\n        labels: {\n          a: 5\n        },\n        timestamp: 12345,\n        value: \"Adam\"\n      });\n      expect(item.changed).toBeCalledTimes(1);\n      expect(item.changed).toBeCalledWith(\"Adam\", {\n        a: 5\n      }, 12345);\n    });","file":"unit/metrics/types/info.spec.js","skipped":false,"dir":"test"},{"name":"should reset the labeled value","suites":["Test Base Metric class","Test set, reset & resetAll method"],"updatePoint":{"line":83,"column":38},"line":83,"code":"    it(\"should reset the labeled value\", () => {\n      item.changed.mockClear();\n      item.reset({\n        a: 5\n      }, 23456);\n      expect(item.values.get(\"5\")).toEqual({\n        labels: {\n          a: 5\n        },\n        timestamp: 23456,\n        value: null\n      });\n      expect(item.changed).toBeCalledTimes(1);\n      expect(item.changed).toBeCalledWith(null, {\n        a: 5\n      }, 23456);\n      expect(item.values.size).toBe(2);\n    });","file":"unit/metrics/types/info.spec.js","skipped":false,"dir":"test"},{"name":"should reset all values","suites":["Test Base Metric class","Test set, reset & resetAll method"],"updatePoint":{"line":101,"column":31},"line":101,"code":"    it(\"should reset all values\", () => {\n      item.set(\"Adam\", {\n        a: 5\n      }, 12345); // restore value\n\n      item.changed.mockClear();\n      item.resetAll(34567);\n      expect(item.values.get(\"\")).toEqual({\n        labels: {},\n        timestamp: 34567,\n        value: null\n      });\n      expect(item.values.get(\"5\")).toEqual({\n        labels: {\n          a: 5\n        },\n        timestamp: 34567,\n        value: null\n      });\n      expect(item.changed).toBeCalledTimes(1);\n      expect(item.changed).toBeCalledWith();\n      expect(item.values.size).toBe(2);\n    });","file":"unit/metrics/types/info.spec.js","skipped":false,"dir":"test"},{"name":"should generate a snapshot","suites":["Test Base Metric class","Test generateSnapshot method"],"updatePoint":{"line":141,"column":34},"line":141,"code":"    it(\"should generate a snapshot\", () => {\n      expect(item.generateSnapshot()).toMatchSnapshot();\n    });","file":"unit/metrics/types/info.spec.js","skipped":false,"dir":"test"},{"name":"test constructor","suites":["Test MiddlewareHandler"],"updatePoint":{"line":17,"column":22},"line":17,"code":"  it(\"test constructor\", () => {\n    let middlewares = new MiddlewareHandler(broker);\n    expect(middlewares.broker).toBe(broker);\n    expect(middlewares.list).toBeInstanceOf(Array);\n    expect(middlewares.registeredHooks).toBeInstanceOf(Object);\n  });","file":"unit/middleware.spec.js","skipped":false,"dir":"test"},{"name":"should not add item","suites":["Test MiddlewareHandler","Test add method"],"updatePoint":{"line":25,"column":27},"line":25,"code":"    it(\"should not add item\", () => {\n      middlewares.add();\n      expect(middlewares.count()).toBe(0);\n      expect(middlewares.registeredHooks).toEqual({});\n    });","file":"unit/middleware.spec.js","skipped":false,"dir":"test"},{"name":"should add a middleware","suites":["Test MiddlewareHandler","Test add method"],"updatePoint":{"line":30,"column":31},"line":30,"code":"    it(\"should add a middleware\", () => {\n      let mw1 = {};\n      middlewares.add(mw1);\n      expect(middlewares.count()).toBe(1);\n      expect(middlewares.list[0]).toBe(mw1);\n      expect(middlewares.registeredHooks).toEqual({});\n    });","file":"unit/middleware.spec.js","skipped":false,"dir":"test"},{"name":"should call function and add middleware","suites":["Test MiddlewareHandler","Test add method"],"updatePoint":{"line":37,"column":47},"line":37,"code":"    it(\"should call function and add middleware\", () => {\n      let mw2 = {\n        localAction: jest.fn()\n      };\n      let mw2Wrap = jest.fn(() => mw2);\n      middlewares.add(mw2Wrap);\n      expect(middlewares.count()).toBe(2);\n      expect(middlewares.list[1]).toEqual(mw2);\n      expect(mw2Wrap).toHaveBeenCalledTimes(1);\n      expect(mw2Wrap).toHaveBeenCalledWith(broker);\n      expect(middlewares.registeredHooks).toEqual({\n        localAction: [mw2.localAction]\n      });\n    });","file":"unit/middleware.spec.js","skipped":false,"dir":"test"},{"name":"should add a built-in middleware by name","suites":["Test MiddlewareHandler","Test add method"],"updatePoint":{"line":51,"column":48},"line":51,"code":"    it(\"should add a built-in middleware by name\", () => {\n      jest.spyOn(Middlewares, \"Timeout\");\n      middlewares.add(\"Timeout\");\n      expect(middlewares.count()).toBe(3);\n      expect(middlewares.list[2]).toEqual({\n        name: \"Timeout\",\n        created: expect.any(Function),\n        localAction: expect.any(Function),\n        remoteAction: expect.any(Function)\n      });\n      expect(middlewares.registeredHooks).toEqual({\n        created: [expect.any(Function)],\n        localAction: [expect.any(Function), expect.any(Function)],\n        remoteAction: [expect.any(Function)]\n      });\n    });","file":"unit/middleware.spec.js","skipped":false,"dir":"test"},{"name":"should throw error if built-in middleware is not found","suites":["Test MiddlewareHandler","Test add method"],"updatePoint":{"line":67,"column":62},"line":67,"code":"    it(\"should throw error if built-in middleware is not found\", () => {\n      expect(() => middlewares.add(\"NotExist\")).toThrow(\"Invalid built-in middleware type 'NotExist'.\");\n    });","file":"unit/middleware.spec.js","skipped":false,"dir":"test"},{"name":"should throw error if middleware type is not valid","suites":["Test MiddlewareHandler","Test add method"],"updatePoint":{"line":70,"column":58},"line":70,"code":"    it(\"should throw error if middleware type is not valid\", () => {\n      expect(() => middlewares.add(5)).toThrow(\"Invalid middleware type 'number'. Accept only Object or Function.\");\n    });","file":"unit/middleware.spec.js","skipped":false,"dir":"test"},{"name":"should wrap local action","suites":["Test MiddlewareHandler","Test wrapper"],"updatePoint":{"line":136,"column":32},"line":136,"code":"    it(\"should wrap local action\", () => {\n      const newHandler = middlewares.wrapHandler(\"localAction\", handler, action);\n      expect(mw1.localAction).toHaveBeenCalledTimes(1);\n      expect(mw1.localAction).toHaveBeenCalledWith(handler, action);\n      expect(mw3.localAction).toHaveBeenCalledTimes(1);\n      expect(mw3.localAction).toHaveBeenCalledWith(expect.any(Function), action);\n      expect(mw3.remoteAction).toHaveBeenCalledTimes(0);\n      return newHandler().catch(protectReject).then(res => {\n        expect(res).toBe(\"John\");\n        expect(FLOW).toEqual([\"MW3-local-pre\", \"MW1-local-pre\", \"HANDLER\", \"MW1-local-post\", \"MW3-local-post\"]);\n      });\n    });","file":"unit/middleware.spec.js","skipped":false,"dir":"test"},{"name":"should wrap remote action","suites":["Test MiddlewareHandler","Test wrapper"],"updatePoint":{"line":148,"column":33},"line":148,"code":"    it(\"should wrap remote action\", () => {\n      mw1.localAction.mockClear();\n      mw3.localAction.mockClear();\n      FLOW = [];\n      const newHandler = middlewares.wrapHandler(\"remoteAction\", handler, action);\n      expect(mw1.localAction).toHaveBeenCalledTimes(0);\n      expect(mw3.localAction).toHaveBeenCalledTimes(0);\n      expect(mw3.remoteAction).toHaveBeenCalledTimes(1);\n      expect(mw3.remoteAction).toHaveBeenCalledWith(expect.any(Function), action);\n      return newHandler().catch(protectReject).then(res => {\n        expect(res).toBe(\"John\");\n        expect(FLOW).toEqual([\"MW3-remote-pre\", \"HANDLER\", \"MW3-remote-post\"]);\n      });\n    });","file":"unit/middleware.spec.js","skipped":false,"dir":"test"},{"name":"should wrap local event","suites":["Test MiddlewareHandler","Test wrapper"],"updatePoint":{"line":162,"column":31},"line":162,"code":"    it(\"should wrap local event\", () => {\n      FLOW = [];\n      const newHandler = middlewares.wrapHandler(\"localEvent\", event.handler, event);\n      expect(mw1.localEvent).toHaveBeenCalledTimes(1);\n      expect(mw1.localEvent).toHaveBeenCalledWith(event.handler, event);\n      return newHandler().catch(protectReject).then(() => {\n        expect(FLOW).toEqual([\"MW1-local-event-pre\", \"EVENT-HANDLER\", \"MW1-local-event-post\"]);\n      });\n    });","file":"unit/middleware.spec.js","skipped":false,"dir":"test"},{"name":"should call sync handlers","suites":["Test MiddlewareHandler","Test calling handlers"],"updatePoint":{"line":188,"column":33},"line":188,"code":"    it(\"should call sync handlers\", () => {\n      const obj = {};\n      middlewares.callSyncHandlers(\"created\", [obj]);\n      expect(mw1.created).toHaveBeenCalledTimes(1);\n      expect(mw1.created).toHaveBeenCalledWith(obj);\n      expect(mw3.created).toHaveBeenCalledTimes(1);\n      expect(mw3.created).toHaveBeenCalledWith(obj);\n      expect(FLOW).toEqual([\"MW1-created\", \"MW3-created\"]);\n    });","file":"unit/middleware.spec.js","skipped":false,"dir":"test"},{"name":"should call reverted sync handlers","suites":["Test MiddlewareHandler","Test calling handlers"],"updatePoint":{"line":197,"column":42},"line":197,"code":"    it(\"should call reverted sync handlers\", () => {\n      mw1.created.mockClear();\n      mw3.created.mockClear();\n      FLOW = [];\n      const obj = {};\n      middlewares.callSyncHandlers(\"created\", [obj], {\n        reverse: true\n      });\n      expect(mw1.created).toHaveBeenCalledTimes(1);\n      expect(mw1.created).toHaveBeenCalledWith(obj);\n      expect(mw3.created).toHaveBeenCalledTimes(1);\n      expect(mw3.created).toHaveBeenCalledWith(obj);\n      expect(FLOW).toEqual([\"MW3-created\", \"MW1-created\"]);\n    });","file":"unit/middleware.spec.js","skipped":false,"dir":"test"},{"name":"should call async handlers","suites":["Test MiddlewareHandler","Test calling handlers"],"updatePoint":{"line":211,"column":34},"line":211,"code":"    it(\"should call async handlers\", () => {\n      FLOW = [];\n      const obj = {};\n      return middlewares.callHandlers(\"started\", [obj]).catch(protectReject).then(() => {\n        expect(mw2.started).toHaveBeenCalledTimes(1);\n        expect(mw2.started).toHaveBeenCalledWith(obj);\n        expect(mw3.started).toHaveBeenCalledTimes(1);\n        expect(mw3.started).toHaveBeenCalledWith(obj);\n        expect(FLOW).toEqual([\"MW2-started\", \"MW3-started\"]);\n      });\n    });","file":"unit/middleware.spec.js","skipped":false,"dir":"test"},{"name":"should call reverted async handlers","suites":["Test MiddlewareHandler","Test calling handlers"],"updatePoint":{"line":222,"column":43},"line":222,"code":"    it(\"should call reverted async handlers\", () => {\n      mw2.started.mockClear();\n      mw3.started.mockClear();\n      FLOW = [];\n      const obj = {};\n      return middlewares.callHandlers(\"started\", [obj], {\n        reverse: true\n      }).catch(protectReject).then(() => {\n        expect(mw2.started).toHaveBeenCalledTimes(1);\n        expect(mw2.started).toHaveBeenCalledWith(obj);\n        expect(mw3.started).toHaveBeenCalledTimes(1);\n        expect(mw3.started).toHaveBeenCalledWith(obj);\n        expect(FLOW).toEqual([\"MW3-started\", \"MW2-started\"]);\n      });\n    });","file":"unit/middleware.spec.js","skipped":false,"dir":"test"},{"name":"should wrap a method","suites":["Test MiddlewareHandler","Test wrapMethod"],"updatePoint":{"line":240,"column":28},"line":240,"code":"    it(\"should wrap a method\", () => {\n      const mw1 = {\n        myMethod: jest.fn(function (next) {\n          return str => next(`!${str}!`);\n        })\n      };\n      const mw2 = {\n        myMethod: jest.fn(function (next) {\n          return str => next([str, str].join(\"-\"));\n        })\n      };\n      const target = {\n        myMethod(str) {\n          return str.toUpperCase();\n        }\n\n      };\n      middlewares.add(mw1);\n      middlewares.add(mw2);\n      expect(target.myMethod(\"Moleculer\")).toBe(\"MOLECULER\");\n      const wrappedMyMethod = middlewares.wrapMethod(\"myMethod\", target.myMethod, target);\n      expect(wrappedMyMethod(\"Moleculer\")).toBe(\"!MOLECULER-MOLECULER!\");\n      const wrappedRevMyMethod = middlewares.wrapMethod(\"myMethod\", target.myMethod, target, {\n        reverse: true\n      });\n      expect(wrappedRevMyMethod(\"Moleculer\")).toBe(\"!MOLECULER!-!MOLECULER!\");\n    });","file":"unit/middleware.spec.js","skipped":false,"dir":"test"},{"name":"should register hooks","suites":["Test ActionHookMiddleware"],"updatePoint":{"line":72,"column":27},"line":72,"code":"  it(\"should register hooks\", () => {\n    expect(mw.localAction).toBeInstanceOf(Function);\n  });","file":"unit/middlewares/action-hook.spec.js","skipped":false,"dir":"test"},{"name":"should not wrap handler if no hooks","suites":["Test ActionHookMiddleware"],"updatePoint":{"line":75,"column":41},"line":75,"code":"  it(\"should not wrap handler if no hooks\", () => {\n    const newHandler = mw.localAction.call(broker, handler, {});\n    expect(newHandler).toBe(handler);\n  });","file":"unit/middlewares/action-hook.spec.js","skipped":false,"dir":"test"},{"name":"should call simple before & after hooks","suites":["Test ActionHookMiddleware"],"updatePoint":{"line":79,"column":45},"line":79,"code":"  it(\"should call simple before & after hooks\", () => {\n    service.schema.hooks = {\n      before: {\n        \"*\"(ctx) {\n          FLOW.push(\"before-all-hook\");\n          ctx.params.hundred = 100;\n        },\n\n        find(ctx) {\n          FLOW.push(\"before-hook\");\n          ctx.params.second = 2;\n        }\n\n      },\n      after: {\n        find(ctx, res) {\n          FLOW.push(\"after-hook\");\n          return Object.assign(res, {\n            b: 200\n          });\n        },\n\n        \"*\"(ctx, res) {\n          FLOW.push(\"after-all-hook\");\n          return Object.assign(res, {\n            x: 999\n          });\n        }\n\n      }\n    };\n    FLOW = [];\n    const handler = jest.fn(ctx => {\n      FLOW.push(\"handler-\" + ctx.params.first + \"-\" + ctx.params.second);\n      return broker.Promise.resolve({\n        a: 100\n      });\n    });\n    const newHandler = mw.localAction.call(broker, handler, action);\n    const ctx = Context.create(broker, endpoint, {\n      first: 1\n    });\n    return newHandler.call(broker, ctx).catch(protectReject).then(res => {\n      expect(res).toEqual({\n        a: 100,\n        b: 200,\n        c: 300,\n        x: 999\n      });\n      expect(FLOW).toEqual([\"before-all-hook\", \"before-hook\", \"before-action-hook\", \"handler-1-2\", \"after-action-hook\", \"after-hook\", \"after-all-hook\"]);\n      expect(handler).toHaveBeenCalledTimes(1);\n    });\n  });","file":"unit/middlewares/action-hook.spec.js","skipped":false,"dir":"test"},{"name":"should call simple error hooks","suites":["Test ActionHookMiddleware"],"updatePoint":{"line":132,"column":36},"line":132,"code":"  it(\"should call simple error hooks\", () => {\n    service.schema.hooks = {\n      error: {\n        find(ctx, err) {\n          FLOW.push(\"error-hook\");\n          throw err;\n        },\n\n        list(ctx, err) {\n          FLOW.push(\"error-other-hook\");\n          throw err;\n        },\n\n        \"*\"(ctx, err) {\n          FLOW.push(\"error-all-hook\");\n          throw err;\n        }\n\n      }\n    };\n    FLOW = [];\n    const error = new MoleculerError(\"Simple error\");\n    const handler = jest.fn(() => {\n      FLOW.push(\"handler\");\n      return broker.Promise.reject(error);\n    });\n    const newHandler = mw.localAction.call(broker, handler, action);\n    const ctx = Context.create(broker, endpoint, {\n      first: 1\n    });\n    return newHandler.call(broker, ctx).then(protectReject).catch(err => {\n      expect(err).toBe(error);\n      expect(FLOW).toEqual([\"before-action-hook\", \"handler\", \"error-action-hook\", \"error-hook\", \"error-all-hook\"]);\n      expect(handler).toHaveBeenCalledTimes(1);\n    });\n  });","file":"unit/middlewares/action-hook.spec.js","skipped":false,"dir":"test"},{"name":"should call multiple before & after hooks","suites":["Test ActionHookMiddleware"],"updatePoint":{"line":168,"column":47},"line":168,"code":"  it(\"should call multiple before & after hooks\", () => {\n    service.schema.hooks = {\n      before: {\n        \"*\": [function (ctx) {\n          FLOW.push(\"before-all-hook-1\");\n          ctx.params.hundred = 100;\n        }, function (ctx) {\n          FLOW.push(\"before-all-hook-2\");\n          ctx.params.hundred = 101;\n        }],\n        find: [function (ctx) {\n          FLOW.push(\"before-hook-1\");\n          ctx.params.second = 2;\n        }, function (ctx) {\n          FLOW.push(\"before-hook-2\");\n          ctx.params.third = 3;\n        }]\n      },\n      after: {\n        find: [function (ctx, res) {\n          FLOW.push(\"after-hook-1\");\n          return Object.assign(res, {\n            b: 200\n          });\n        }, function (ctx, res) {\n          FLOW.push(\"after-hook-2\");\n          return Object.assign(res, {\n            c: 300\n          });\n        }],\n        \"*\": [function (ctx, res) {\n          FLOW.push(\"after-all-hook-1\");\n          return Object.assign(res, {\n            x: 999\n          });\n        }, function (ctx, res) {\n          FLOW.push(\"after-all-hook-2\");\n          res.x = 909;\n          return res;\n        }]\n      }\n    };\n    FLOW = [];\n    const handler = jest.fn(ctx => {\n      FLOW.push(\"handler-\" + ctx.params.first + \"-\" + ctx.params.second + \"-\" + ctx.params.third);\n      return broker.Promise.resolve({\n        a: 100\n      });\n    });\n    const newHandler = mw.localAction.call(broker, handler, action);\n    const ctx = Context.create(broker, endpoint, {\n      first: 1\n    });\n    return newHandler.call(broker, ctx).catch(protectReject).then(res => {\n      expect(res).toEqual({\n        a: 100,\n        b: 200,\n        c: 300,\n        x: 909\n      });\n      expect(FLOW).toEqual([\"before-all-hook-1\", \"before-all-hook-2\", \"before-hook-1\", \"before-hook-2\", \"before-action-hook\", \"handler-1-2-3\", \"after-action-hook\", \"after-hook-1\", \"after-hook-2\", \"after-all-hook-1\", \"after-all-hook-2\"]);\n      expect(handler).toHaveBeenCalledTimes(1);\n    });\n  });","file":"unit/middlewares/action-hook.spec.js","skipped":false,"dir":"test"},{"name":"should call multiple error hooks","suites":["Test ActionHookMiddleware"],"updatePoint":{"line":232,"column":38},"line":232,"code":"  it(\"should call multiple error hooks\", () => {\n    service.schema.hooks = {\n      error: {\n        find: [function (ctx, err) {\n          FLOW.push(\"error-hook-1\");\n          err.a = 100;\n          throw err;\n        }, function (ctx, err) {\n          FLOW.push(\"error-hook-2\");\n          err.b = 200;\n          throw err;\n        }],\n        \"*\": [function (ctx, err) {\n          FLOW.push(\"error-all-hook-1\");\n          err.x = 999;\n          err.y = 888;\n          throw err;\n        }, function (ctx, err) {\n          FLOW.push(\"error-all-hook-2\");\n          err.x = 909;\n          throw err;\n        }]\n      }\n    };\n    FLOW = [];\n    const error = new MoleculerError(\"Simple error\");\n    const handler = jest.fn(() => {\n      FLOW.push(\"handler\");\n      return broker.Promise.reject(error);\n    });\n    const newHandler = mw.localAction.call(broker, handler, action);\n    const ctx = Context.create(broker, endpoint, {\n      first: 1\n    });\n    return newHandler.call(broker, ctx).then(protectReject).catch(err => {\n      expect(err).toBe(error);\n      expect(err.a).toBe(100);\n      expect(err.b).toBe(200);\n      expect(err.x).toBe(909);\n      expect(err.y).toBe(888);\n      expect(FLOW).toEqual([\"before-action-hook\", \"handler\", \"error-action-hook\", \"error-hook-1\", \"error-hook-2\", \"error-all-hook-1\", \"error-all-hook-2\"]);\n      expect(handler).toHaveBeenCalledTimes(1);\n    });\n  });","file":"unit/middlewares/action-hook.spec.js","skipped":false,"dir":"test"},{"name":"should call service method hooks if the hook is a 'string'","suites":["Test ActionHookMiddleware"],"updatePoint":{"line":276,"column":64},"line":276,"code":"  it(\"should call service method hooks if the hook is a 'string'\", () => {\n    service.schema.hooks = {\n      before: {\n        find: [function (ctx) {\n          FLOW.push(\"before-hook-1\");\n          ctx.params.second = 2;\n        }, \"beforeHookMethod\"]\n      },\n      after: {\n        find: \"afterHookMethod\"\n      }\n    };\n    FLOW = [];\n    const handler = jest.fn(ctx => {\n      FLOW.push(\"handler-\" + ctx.params.first + \"-\" + ctx.params.second);\n      return broker.Promise.resolve({\n        a: 100\n      });\n    });\n    const newHandler = mw.localAction.call(broker, handler, action);\n    const ctx = Context.create(broker, endpoint, {\n      first: 1\n    });\n    return newHandler.call(broker, ctx).catch(protectReject).then(res => {\n      expect(res).toEqual({\n        a: 100,\n        b: 200,\n        c: 300\n      });\n      expect(FLOW).toEqual([\"before-hook-1\", \"method-before-hook-find\", \"before-action-hook\", \"handler-1-2\", \"after-action-hook\", \"method-after-hook-find\"]);\n      expect(handler).toHaveBeenCalledTimes(1);\n    });\n  });","file":"unit/middlewares/action-hook.spec.js","skipped":false,"dir":"test"},{"name":"should register hooks","suites":["Test BulkheadMiddleware"],"updatePoint":{"line":50,"column":27},"line":50,"code":"  it(\"should register hooks\", () => {\n    expect(mw.localAction).toBeInstanceOf(Function);\n    expect(mw.localEvent).toBeInstanceOf(Function);\n  });","file":"unit/middlewares/bulkhead.spec.js","skipped":false,"dir":"test"},{"name":"should not wrap handler if bulkhead is disabled","suites":["Test BulkheadMiddleware"],"updatePoint":{"line":54,"column":53},"line":54,"code":"  it(\"should not wrap handler if bulkhead is disabled\", () => {\n    broker.options.bulkhead.enabled = false;\n    const newActionHandler = mw.localAction.call(broker, handler, action);\n    expect(newActionHandler).toBe(handler);\n    const newEventHandler = mw.localEvent.call(broker, handler, action);\n    expect(newEventHandler).toBe(handler);\n  });","file":"unit/middlewares/bulkhead.spec.js","skipped":false,"dir":"test"},{"name":"should register metrics","suites":["Test BulkheadMiddleware"],"updatePoint":{"line":61,"column":29},"line":61,"code":"  it(\"should register metrics\", () => {\n    broker.isMetricsEnabled = jest.fn(() => true);\n    broker.metrics.register = jest.fn();\n    mw.created.call(broker, broker);\n    expect(broker.metrics.register).toHaveBeenCalledTimes(4);\n    expect(broker.metrics.register).toHaveBeenCalledWith({\n      type: \"gauge\",\n      name: \"moleculer.request.bulkhead.inflight\",\n      labelNames: [\"action\", \"service\"]\n    });\n    expect(broker.metrics.register).toHaveBeenCalledWith({\n      type: \"gauge\",\n      name: \"moleculer.request.bulkhead.queue.size\",\n      labelNames: [\"action\", \"service\"]\n    });\n    expect(broker.metrics.register).toHaveBeenCalledWith({\n      type: \"gauge\",\n      name: \"moleculer.event.bulkhead.inflight\",\n      labelNames: [\"event\", \"service\"]\n    });\n    expect(broker.metrics.register).toHaveBeenCalledWith({\n      type: \"gauge\",\n      name: \"moleculer.event.bulkhead.queue.size\",\n      labelNames: [\"event\", \"service\"]\n    });\n  });","file":"unit/middlewares/bulkhead.spec.js","skipped":false,"dir":"test"},{"name":"should wrap handler if bulkhead is disabled but in action is enabled","suites":["Test BulkheadMiddleware","Test localAction"],"updatePoint":{"line":88,"column":76},"line":88,"code":"    it(\"should wrap handler if bulkhead is disabled but in action is enabled\", () => {\n      broker.options.bulkhead.enabled = false;\n      action.bulkhead.enabled = true;\n      const newHandler = mw.localAction.call(broker, handler, action);\n      expect(newHandler).not.toBe(handler);\n    });","file":"unit/middlewares/bulkhead.spec.js","skipped":false,"dir":"test"},{"name":"should wrap handler if bulkhead is enabled","suites":["Test BulkheadMiddleware","Test localAction"],"updatePoint":{"line":94,"column":50},"line":94,"code":"    it(\"should wrap handler if bulkhead is enabled\", () => {\n      broker.options.bulkhead.enabled = true;\n      const newHandler = mw.localAction.call(broker, handler, action);\n      expect(newHandler).not.toBe(handler);\n    });","file":"unit/middlewares/bulkhead.spec.js","skipped":false,"dir":"test"},{"name":"should not wrap handler if bulkhead is enabled but in action is disabled","suites":["Test BulkheadMiddleware","Test localAction"],"updatePoint":{"line":99,"column":80},"line":99,"code":"    it(\"should not wrap handler if bulkhead is enabled but in action is disabled\", () => {\n      broker.options.bulkhead.enabled = true;\n      action.bulkhead.enabled = false;\n      const newHandler = mw.localAction.call(broker, handler, action);\n      expect(newHandler).toBe(handler);\n    });","file":"unit/middlewares/bulkhead.spec.js","skipped":false,"dir":"test"},{"name":"should call 3 times immediately & 7 times after some delay (queueing)","suites":["Test BulkheadMiddleware","Test localAction"],"updatePoint":{"line":105,"column":77},"line":105,"code":"    it(\"should call 3 times immediately & 7 times after some delay (queueing)\", () => {\n      action.bulkhead.enabled = true;\n      action.bulkhead.concurrency = 3;\n      action.bulkhead.maxQueueSize = 10;\n      let FLOW = [];\n      const handler = jest.fn(ctx => {\n        FLOW.push(\"handler-\" + ctx.params.id);\n        return broker.Promise.delay(10 * ctx.params.id);\n      });\n      const newHandler = mw.localAction.call(broker, handler, action);\n\n      const ctxs = _.times(10, i => Context.create(broker, endpoint, {\n        id: i + 1\n      }));\n\n      Promise.all(ctxs.map(ctx => newHandler.call(broker, ctx)));\n      expect(FLOW).toEqual(expect.arrayContaining([\"handler-1\", \"handler-2\", \"handler-3\"]));\n      expect(handler).toHaveBeenCalledTimes(3);\n      expect(broker.metrics.set).toHaveBeenCalledTimes(13);\n      expect(broker.metrics.set).toHaveBeenNthCalledWith(1, \"moleculer.request.bulkhead.inflight\", 1, {\n        action: \"posts.find\",\n        service: \"posts\"\n      });\n      expect(broker.metrics.set).toHaveBeenNthCalledWith(2, \"moleculer.request.bulkhead.queue.size\", 0, {\n        action: \"posts.find\",\n        service: \"posts\"\n      });\n      expect(broker.metrics.set).toHaveBeenNthCalledWith(3, \"moleculer.request.bulkhead.inflight\", 2, {\n        action: \"posts.find\",\n        service: \"posts\"\n      });\n      expect(broker.metrics.set).toHaveBeenNthCalledWith(4, \"moleculer.request.bulkhead.queue.size\", 0, {\n        action: \"posts.find\",\n        service: \"posts\"\n      });\n      expect(broker.metrics.set).toHaveBeenNthCalledWith(5, \"moleculer.request.bulkhead.inflight\", 3, {\n        action: \"posts.find\",\n        service: \"posts\"\n      });\n      expect(broker.metrics.set).toHaveBeenNthCalledWith(6, \"moleculer.request.bulkhead.queue.size\", 0, {\n        action: \"posts.find\",\n        service: \"posts\"\n      });\n      expect(broker.metrics.set).toHaveBeenNthCalledWith(7, \"moleculer.request.bulkhead.queue.size\", 1, {\n        action: \"posts.find\",\n        service: \"posts\"\n      });\n      expect(broker.metrics.set).toHaveBeenNthCalledWith(8, \"moleculer.request.bulkhead.queue.size\", 2, {\n        action: \"posts.find\",\n        service: \"posts\"\n      });\n      expect(broker.metrics.set).toHaveBeenNthCalledWith(9, \"moleculer.request.bulkhead.queue.size\", 3, {\n        action: \"posts.find\",\n        service: \"posts\"\n      });\n      expect(broker.metrics.set).toHaveBeenNthCalledWith(10, \"moleculer.request.bulkhead.queue.size\", 4, {\n        action: \"posts.find\",\n        service: \"posts\"\n      });\n      expect(broker.metrics.set).toHaveBeenNthCalledWith(11, \"moleculer.request.bulkhead.queue.size\", 5, {\n        action: \"posts.find\",\n        service: \"posts\"\n      });\n      expect(broker.metrics.set).toHaveBeenNthCalledWith(12, \"moleculer.request.bulkhead.queue.size\", 6, {\n        action: \"posts.find\",\n        service: \"posts\"\n      });\n      expect(broker.metrics.set).toHaveBeenNthCalledWith(13, \"moleculer.request.bulkhead.queue.size\", 7, {\n        action: \"posts.find\",\n        service: \"posts\"\n      });\n      broker.metrics.set.mockClear();\n      FLOW = [];\n      return broker.Promise.delay(500).catch(protectReject).then(() => {\n        expect(FLOW).toEqual(expect.arrayContaining([\"handler-4\", \"handler-5\", \"handler-6\", \"handler-7\", \"handler-8\", \"handler-9\", \"handler-10\"]));\n        expect(handler).toHaveBeenCalledTimes(10);\n        expect(broker.metrics.set).toHaveBeenCalledTimes(34);\n      });\n    });","file":"unit/middlewares/bulkhead.spec.js","skipped":false,"dir":"test"},{"name":"should call 3 times immediately & 5 times after some delay (queueing) and throw error because 2 are out of queue size","suites":["Test BulkheadMiddleware","Test localAction"],"updatePoint":{"line":184,"column":125},"line":184,"code":"    it(\"should call 3 times immediately & 5 times after some delay (queueing) and throw error because 2 are out of queue size\", () => {\n      action.bulkhead.enabled = true;\n      action.bulkhead.concurrency = 3;\n      action.bulkhead.maxQueueSize = 5;\n      let FLOW = [];\n      const handler = jest.fn(ctx => {\n        FLOW.push(\"handler-\" + ctx.params.id);\n        return broker.Promise.delay(10 * ctx.params.id);\n      });\n      const newHandler = mw.localAction.call(broker, handler, action);\n\n      const ctxs = _.times(10, i => Context.create(broker, endpoint, {\n        id: i + 1\n      }));\n\n      const p = broker.Promise.all(ctxs.map(ctx => newHandler.call(broker, ctx).catch(err => FLOW.push(err.name + \"-\" + ctx.params.id))));\n      expect(FLOW).toEqual(expect.arrayContaining([\"handler-1\", \"handler-2\", \"handler-3\"]));\n      expect(handler).toHaveBeenCalledTimes(3);\n      FLOW = [];\n      return p.delay(500).catch(protectReject).then(() => {\n        expect(FLOW).toEqual(expect.arrayContaining([\"handler-4\", \"QueueIsFullError-9\", \"QueueIsFullError-10\", \"handler-5\", \"handler-6\", \"handler-7\", \"handler-8\"]));\n        expect(handler).toHaveBeenCalledTimes(8);\n      });\n    });","file":"unit/middlewares/bulkhead.spec.js","skipped":false,"dir":"test"},{"name":"should call 3 times immediately & 7 times after some delay (queueing) and some request rejected","suites":["Test BulkheadMiddleware","Test localAction"],"updatePoint":{"line":208,"column":103},"line":208,"code":"    it(\"should call 3 times immediately & 7 times after some delay (queueing) and some request rejected\", () => {\n      action.bulkhead.enabled = true;\n      action.bulkhead.concurrency = 3;\n      action.bulkhead.maxQueueSize = 10;\n      broker.metrics.set.mockClear();\n      let FLOW = [];\n      const handler = jest.fn(ctx => {\n        FLOW.push(\"handler-\" + ctx.params.id);\n        if (ctx.params.crash) return broker.Promise.reject(new Error(\"Crashed\")).delay(10 * ctx.params.id);else return broker.Promise.delay(10 * ctx.params.id);\n      });\n      const newHandler = mw.localAction.call(broker, handler, action);\n\n      const ctxs = _.times(10, i => Context.create(broker, endpoint, {\n        id: i + 1,\n        crash: i == 1 || i == 7\n      }));\n\n      const p = broker.Promise.all(ctxs.map(ctx => newHandler.call(broker, ctx).catch(err => FLOW.push(err.name + \"-\" + ctx.params.id))));\n      expect(FLOW).toEqual(expect.arrayContaining([\"handler-1\", \"handler-2\", \"handler-3\"]));\n      expect(handler).toHaveBeenCalledTimes(3);\n      expect(broker.metrics.set).toHaveBeenCalledTimes(13);\n      broker.metrics.set.mockClear();\n      FLOW = [];\n      return p.delay(500).catch(protectReject).then(() => {\n        expect(FLOW).toEqual(expect.arrayContaining([\"handler-4\", \"Error-2\", \"handler-5\", \"handler-6\", \"handler-7\", \"handler-8\", \"handler-9\", \"Error-8\", \"handler-10\"]));\n        expect(handler).toHaveBeenCalledTimes(10);\n        expect(broker.metrics.set).toHaveBeenCalledTimes(34);\n      });\n    });","file":"unit/middlewares/bulkhead.spec.js","skipped":false,"dir":"test"},{"name":"should wrap handler if bulkhead is disabled but in event is enabled","suites":["Test BulkheadMiddleware","Test localEvent"],"updatePoint":{"line":239,"column":75},"line":239,"code":"    it(\"should wrap handler if bulkhead is disabled but in event is enabled\", () => {\n      broker.options.bulkhead.enabled = false;\n      event.bulkhead.enabled = true;\n      const newHandler = mw.localEvent.call(broker, handler, event);\n      expect(newHandler).not.toBe(handler);\n    });","file":"unit/middlewares/bulkhead.spec.js","skipped":false,"dir":"test"},{"name":"should wrap handler if bulkhead is enabled","suites":["Test BulkheadMiddleware","Test localEvent"],"updatePoint":{"line":245,"column":50},"line":245,"code":"    it(\"should wrap handler if bulkhead is enabled\", () => {\n      broker.options.bulkhead.enabled = true;\n      const newHandler = mw.localEvent.call(broker, handler, event);\n      expect(newHandler).not.toBe(handler);\n    });","file":"unit/middlewares/bulkhead.spec.js","skipped":false,"dir":"test"},{"name":"should not wrap handler if bulkhead is enabled but in event is disabled","suites":["Test BulkheadMiddleware","Test localEvent"],"updatePoint":{"line":250,"column":79},"line":250,"code":"    it(\"should not wrap handler if bulkhead is enabled but in event is disabled\", () => {\n      broker.options.bulkhead.enabled = true;\n      event.bulkhead.enabled = false;\n      const newHandler = mw.localEvent.call(broker, handler, event);\n      expect(newHandler).toBe(handler);\n    });","file":"unit/middlewares/bulkhead.spec.js","skipped":false,"dir":"test"},{"name":"should call 3 times immediately & 7 times after some delay (queueing)","suites":["Test BulkheadMiddleware","Test localEvent"],"updatePoint":{"line":256,"column":77},"line":256,"code":"    it(\"should call 3 times immediately & 7 times after some delay (queueing)\", () => {\n      event.bulkhead.enabled = true;\n      event.bulkhead.concurrency = 3;\n      event.bulkhead.maxQueueSize = 10;\n      broker.metrics.set.mockClear();\n      let FLOW = [];\n      const handler = jest.fn(ctx => {\n        FLOW.push(\"handler-\" + ctx.params.id);\n        return broker.Promise.delay(10 * ctx.params.id);\n      });\n      const newHandler = mw.localEvent.call(broker, handler, event);\n\n      const ctxs = _.times(10, i => Context.create(broker, endpoint, {\n        id: i + 1\n      }));\n\n      Promise.all(ctxs.map(ctx => newHandler.call(broker, ctx)));\n      expect(FLOW).toEqual(expect.arrayContaining([\"handler-1\", \"handler-2\", \"handler-3\"]));\n      expect(handler).toHaveBeenCalledTimes(3);\n      expect(broker.metrics.set).toHaveBeenCalledTimes(13);\n      expect(broker.metrics.set).toHaveBeenNthCalledWith(1, \"moleculer.event.bulkhead.inflight\", 1, {\n        event: \"user.created\",\n        service: \"posts\"\n      });\n      expect(broker.metrics.set).toHaveBeenNthCalledWith(2, \"moleculer.event.bulkhead.queue.size\", 0, {\n        event: \"user.created\",\n        service: \"posts\"\n      });\n      expect(broker.metrics.set).toHaveBeenNthCalledWith(3, \"moleculer.event.bulkhead.inflight\", 2, {\n        event: \"user.created\",\n        service: \"posts\"\n      });\n      expect(broker.metrics.set).toHaveBeenNthCalledWith(4, \"moleculer.event.bulkhead.queue.size\", 0, {\n        event: \"user.created\",\n        service: \"posts\"\n      });\n      expect(broker.metrics.set).toHaveBeenNthCalledWith(5, \"moleculer.event.bulkhead.inflight\", 3, {\n        event: \"user.created\",\n        service: \"posts\"\n      });\n      expect(broker.metrics.set).toHaveBeenNthCalledWith(6, \"moleculer.event.bulkhead.queue.size\", 0, {\n        event: \"user.created\",\n        service: \"posts\"\n      });\n      expect(broker.metrics.set).toHaveBeenNthCalledWith(7, \"moleculer.event.bulkhead.queue.size\", 1, {\n        event: \"user.created\",\n        service: \"posts\"\n      });\n      expect(broker.metrics.set).toHaveBeenNthCalledWith(8, \"moleculer.event.bulkhead.queue.size\", 2, {\n        event: \"user.created\",\n        service: \"posts\"\n      });\n      expect(broker.metrics.set).toHaveBeenNthCalledWith(9, \"moleculer.event.bulkhead.queue.size\", 3, {\n        event: \"user.created\",\n        service: \"posts\"\n      });\n      expect(broker.metrics.set).toHaveBeenNthCalledWith(10, \"moleculer.event.bulkhead.queue.size\", 4, {\n        event: \"user.created\",\n        service: \"posts\"\n      });\n      expect(broker.metrics.set).toHaveBeenNthCalledWith(11, \"moleculer.event.bulkhead.queue.size\", 5, {\n        event: \"user.created\",\n        service: \"posts\"\n      });\n      expect(broker.metrics.set).toHaveBeenNthCalledWith(12, \"moleculer.event.bulkhead.queue.size\", 6, {\n        event: \"user.created\",\n        service: \"posts\"\n      });\n      expect(broker.metrics.set).toHaveBeenNthCalledWith(13, \"moleculer.event.bulkhead.queue.size\", 7, {\n        event: \"user.created\",\n        service: \"posts\"\n      });\n      broker.metrics.set.mockClear();\n      FLOW = [];\n      return broker.Promise.delay(500).catch(protectReject).then(() => {\n        expect(FLOW).toEqual(expect.arrayContaining([\"handler-4\", \"handler-5\", \"handler-6\", \"handler-7\", \"handler-8\", \"handler-9\", \"handler-10\"]));\n        expect(handler).toHaveBeenCalledTimes(10);\n        expect(broker.metrics.set).toHaveBeenCalledTimes(34);\n      });\n    });","file":"unit/middlewares/bulkhead.spec.js","skipped":false,"dir":"test"},{"name":"should call 3 times immediately & 5 times after some delay (queueing) and throw error because 2 are out of queue size","suites":["Test BulkheadMiddleware","Test localEvent"],"updatePoint":{"line":336,"column":125},"line":336,"code":"    it(\"should call 3 times immediately & 5 times after some delay (queueing) and throw error because 2 are out of queue size\", () => {\n      event.bulkhead.enabled = true;\n      event.bulkhead.concurrency = 3;\n      event.bulkhead.maxQueueSize = 5;\n      let FLOW = [];\n      const handler = jest.fn(ctx => {\n        FLOW.push(\"handler-\" + ctx.params.id);\n        return broker.Promise.delay(10 * ctx.params.id);\n      });\n      const newHandler = mw.localEvent.call(broker, handler, event);\n\n      const ctxs = _.times(10, i => Context.create(broker, endpoint, {\n        id: i + 1\n      }));\n\n      const p = broker.Promise.all(ctxs.map(ctx => newHandler.call(broker, ctx).catch(err => FLOW.push(err.name + \"-\" + ctx.params.id))));\n      expect(FLOW).toEqual(expect.arrayContaining([\"handler-1\", \"handler-2\", \"handler-3\"]));\n      expect(handler).toHaveBeenCalledTimes(3);\n      FLOW = [];\n      return p.delay(500).catch(protectReject).then(() => {\n        expect(FLOW).toEqual(expect.arrayContaining([\"handler-4\", \"QueueIsFullError-9\", \"QueueIsFullError-10\", \"handler-5\", \"handler-6\", \"handler-7\", \"handler-8\"]));\n        expect(handler).toHaveBeenCalledTimes(8);\n      });\n    });","file":"unit/middlewares/bulkhead.spec.js","skipped":false,"dir":"test"},{"name":"should call 3 times immediately & 7 times after some delay (queueing) and some request rejected","suites":["Test BulkheadMiddleware","Test localEvent"],"updatePoint":{"line":360,"column":103},"line":360,"code":"    it(\"should call 3 times immediately & 7 times after some delay (queueing) and some request rejected\", () => {\n      event.bulkhead.enabled = true;\n      event.bulkhead.concurrency = 3;\n      event.bulkhead.maxQueueSize = 10;\n      broker.metrics.set.mockClear();\n      let FLOW = [];\n      const handler = jest.fn(ctx => {\n        FLOW.push(\"handler-\" + ctx.params.id);\n        if (ctx.params.crash) return broker.Promise.reject(new Error(\"Crashed\")).delay(10 * ctx.params.id);else return broker.Promise.delay(10 * ctx.params.id);\n      });\n      const newHandler = mw.localEvent.call(broker, handler, event);\n\n      const ctxs = _.times(10, i => Context.create(broker, endpoint, {\n        id: i + 1,\n        crash: i == 1 || i == 7\n      }));\n\n      const p = broker.Promise.all(ctxs.map(ctx => newHandler.call(broker, ctx).catch(err => FLOW.push(err.name + \"-\" + ctx.params.id))));\n      expect(FLOW).toEqual(expect.arrayContaining([\"handler-1\", \"handler-2\", \"handler-3\"]));\n      expect(handler).toHaveBeenCalledTimes(3);\n      expect(broker.metrics.set).toHaveBeenCalledTimes(13);\n      broker.metrics.set.mockClear();\n      FLOW = [];\n      return p.delay(500).catch(protectReject).then(() => {\n        expect(FLOW).toEqual(expect.arrayContaining([\"handler-4\", \"Error-2\", \"handler-5\", \"handler-6\", \"handler-7\", \"handler-8\", \"handler-9\", \"Error-8\", \"handler-10\"]));\n        expect(handler).toHaveBeenCalledTimes(10);\n        expect(broker.metrics.set).toHaveBeenCalledTimes(34);\n      });\n    });","file":"unit/middlewares/bulkhead.spec.js","skipped":false,"dir":"test"},{"name":"should register hooks","suites":["Test CircuitBreakerMiddleware"],"updatePoint":{"line":33,"column":27},"line":33,"code":"  it(\"should register hooks\", () => {\n    expect(mw.created).toBeInstanceOf(Function);\n    expect(mw.localAction).toBeInstanceOf(Function);\n    expect(mw.remoteAction).toBeInstanceOf(Function);\n    expect(mw.stopped).toBeInstanceOf(Function);\n  });","file":"unit/middlewares/circuit-breaker.spec.js","skipped":false,"dir":"test"},{"name":"should not wrap handler if circuitBreaker is disabled","suites":["Test CircuitBreakerMiddleware"],"updatePoint":{"line":39,"column":59},"line":39,"code":"  it(\"should not wrap handler if circuitBreaker is disabled\", () => {\n    broker.options.circuitBreaker.enabled = false;\n    const newHandler = mw.localAction.call(broker, handler, action);\n    expect(newHandler).toBe(handler);\n    const newHandler2 = mw.remoteAction.call(broker, handler, action);\n    expect(newHandler2).toBe(handler);\n  });","file":"unit/middlewares/circuit-breaker.spec.js","skipped":false,"dir":"test"},{"name":"should wrap handler if circuitBreaker is enabled","suites":["Test CircuitBreakerMiddleware"],"updatePoint":{"line":46,"column":54},"line":46,"code":"  it(\"should wrap handler if circuitBreaker is enabled\", () => {\n    broker.options.circuitBreaker.enabled = true;\n    const newHandler = mw.localAction.call(broker, handler, action);\n    expect(newHandler).not.toBe(handler);\n    const newHandler2 = mw.remoteAction.call(broker, handler, action);\n    expect(newHandler2).not.toBe(handler);\n  });","file":"unit/middlewares/circuit-breaker.spec.js","skipped":false,"dir":"test"},{"name":"should register metrics","suites":["Test CircuitBreakerMiddleware"],"updatePoint":{"line":53,"column":29},"line":53,"code":"  it(\"should register metrics\", () => {\n    broker.isMetricsEnabled = jest.fn(() => true);\n    broker.metrics.register = jest.fn();\n    mw.created.call(broker, broker);\n    expect(broker.metrics.register).toHaveBeenCalledTimes(3);\n    expect(broker.metrics.register).toHaveBeenCalledWith({\n      type: \"gauge\",\n      name: \"moleculer.circuit-breaker.opened.active\",\n      labelNames: [\"affectedNodeID\", \"service\", \"action\"],\n      description: expect.any(String)\n    });\n    expect(broker.metrics.register).toHaveBeenCalledWith({\n      type: \"counter\",\n      name: \"moleculer.circuit-breaker.opened.total\",\n      labelNames: [\"affectedNodeID\", \"service\", \"action\"],\n      description: expect.any(String)\n    });\n    expect(broker.metrics.register).toHaveBeenCalledWith({\n      type: \"gauge\",\n      name: \"moleculer.circuit-breaker.half-opened.active\",\n      labelNames: [\"affectedNodeID\", \"service\", \"action\"],\n      description: expect.any(String)\n    });\n  });","file":"unit/middlewares/circuit-breaker.spec.js","skipped":false,"dir":"test"},{"name":"should not open CB","suites":["Test CircuitBreakerMiddleware logic"],"updatePoint":{"line":124,"column":24},"line":124,"code":"  it(\"should not open CB\", () => {\n    return Promise.all([newHandler(Context.create(broker, endpoint, {\n      crash: true\n    })).then(protectReject).catch(err => expect(err.message).toBe(\"Crashed\")), newHandler(Context.create(broker, endpoint, {\n      crash: true\n    })).then(protectReject).catch(err => expect(err.message).toBe(\"Crashed\")), newHandler(Context.create(broker, endpoint, {\n      crash: true\n    })).then(protectReject).catch(err => expect(err.message).toBe(\"Crashed\")), newHandler(Context.create(broker, endpoint, {\n      crash: false\n    })).catch(protectReject).then(res => expect(res).toBe(\"Result\"))]).catch(protectReject).then(() => {\n      expect(broker.broadcast).toHaveBeenCalledTimes(0);\n      expect(endpoint.state).toBe(true);\n    });\n  });","file":"unit/middlewares/circuit-breaker.spec.js","skipped":false,"dir":"test"},{"name":"should open CB","suites":["Test CircuitBreakerMiddleware logic"],"updatePoint":{"line":138,"column":20},"line":138,"code":"  it(\"should open CB\", () => {\n    return Promise.all([newHandler(Context.create(broker, endpoint, {\n      crash: false\n    })).catch(protectReject).then(res => expect(res).toBe(\"Result\"))]).catch(protectReject).then(() => {\n      expect(broker.broadcast).toHaveBeenCalledTimes(1);\n      expect(broker.broadcast).toHaveBeenCalledWith(\"$circuit-breaker.opened\", {\n        service: \"v2.likes\",\n        action: \"likes.count\",\n        count: 5,\n        failures: 3,\n        nodeID: broker.nodeID,\n        rate: 0.6\n      });\n      expect(endpoint.state).toBe(false);\n      expect(broker.metrics.set).toHaveBeenCalledTimes(1);\n      expect(broker.metrics.set).toHaveBeenCalledWith(\"moleculer.circuit-breaker.opened.active\", 1, {\n        affectedNodeID: \"server-1\",\n        service: \"v2.likes\",\n        action: \"likes.count\"\n      });\n      expect(broker.metrics.increment).toHaveBeenCalledTimes(1);\n      expect(broker.metrics.increment).toHaveBeenCalledWith(\"moleculer.circuit-breaker.opened.total\", {\n        affectedNodeID: \"server-1\",\n        service: \"v2.likes\",\n        action: \"likes.count\"\n      });\n    });\n  });","file":"unit/middlewares/circuit-breaker.spec.js","skipped":false,"dir":"test"},{"name":"should half-open","suites":["Test CircuitBreakerMiddleware logic"],"updatePoint":{"line":166,"column":22},"line":166,"code":"  it(\"should half-open\", () => {\n    broker.broadcast.mockClear();\n    broker.metrics.set.mockClear();\n    clock.tick(12 * 1000);\n    expect(endpoint.state).toBe(true);\n    expect(broker.broadcast).toHaveBeenCalledTimes(1);\n    expect(broker.broadcast).toHaveBeenCalledWith(\"$circuit-breaker.half-opened\", {\n      service: \"v2.likes\",\n      action: \"likes.count\",\n      nodeID: broker.nodeID\n    });\n    expect(broker.metrics.set).toHaveBeenCalledTimes(2);\n    expect(broker.metrics.set).toHaveBeenNthCalledWith(1, \"moleculer.circuit-breaker.opened.active\", 0, {\n      affectedNodeID: \"server-1\",\n      service: \"v2.likes\",\n      action: \"likes.count\"\n    });\n    expect(broker.metrics.set).toHaveBeenNthCalledWith(2, \"moleculer.circuit-breaker.half-opened.active\", 1, {\n      affectedNodeID: \"server-1\",\n      service: \"v2.likes\",\n      action: \"likes.count\"\n    });\n  });","file":"unit/middlewares/circuit-breaker.spec.js","skipped":false,"dir":"test"},{"name":"should reopen CB","suites":["Test CircuitBreakerMiddleware logic"],"updatePoint":{"line":189,"column":22},"line":189,"code":"  it(\"should reopen CB\", () => {\n    broker.metrics.set.mockClear();\n    broker.metrics.increment.mockClear();\n    broker.broadcast.mockClear();\n    return Promise.all([newHandler(Context.create(broker, endpoint, {\n      crash: true\n    })).then(protectReject).catch(err => expect(err.message).toBe(\"Crashed\"))]).catch(protectReject).then(() => {\n      expect(broker.broadcast).toHaveBeenCalledTimes(1);\n      expect(broker.broadcast).toHaveBeenCalledWith(\"$circuit-breaker.opened\", {\n        service: \"v2.likes\",\n        action: \"likes.count\",\n        count: 6,\n        failures: 4,\n        nodeID: broker.nodeID,\n        rate: 0.6666666666666666\n      });\n      expect(endpoint.state).toBe(false);\n      expect(broker.metrics.set).toHaveBeenCalledTimes(1);\n      expect(broker.metrics.set).toHaveBeenNthCalledWith(1, \"moleculer.circuit-breaker.opened.active\", 1, {\n        affectedNodeID: \"server-1\",\n        service: \"v2.likes\",\n        action: \"likes.count\"\n      });\n      expect(broker.metrics.increment).toHaveBeenCalledTimes(1);\n      expect(broker.metrics.increment).toHaveBeenNthCalledWith(1, \"moleculer.circuit-breaker.opened.total\", {\n        affectedNodeID: \"server-1\",\n        service: \"v2.likes\",\n        action: \"likes.count\"\n      });\n    });\n  });","file":"unit/middlewares/circuit-breaker.spec.js","skipped":false,"dir":"test"},{"name":"should half-open again","suites":["Test CircuitBreakerMiddleware logic"],"updatePoint":{"line":220,"column":28},"line":220,"code":"  it(\"should half-open again\", () => {\n    broker.broadcast.mockClear();\n    broker.metrics.set.mockClear();\n    clock.tick(11 * 1000);\n    expect(endpoint.state).toBe(true);\n    expect(broker.broadcast).toHaveBeenCalledTimes(1);\n    expect(broker.broadcast).toHaveBeenCalledWith(\"$circuit-breaker.half-opened\", {\n      service: \"v2.likes\",\n      action: \"likes.count\",\n      nodeID: broker.nodeID\n    });\n    expect(broker.metrics.set).toHaveBeenCalledTimes(2);\n    expect(broker.metrics.set).toHaveBeenNthCalledWith(1, \"moleculer.circuit-breaker.opened.active\", 0, {\n      affectedNodeID: \"server-1\",\n      service: \"v2.likes\",\n      action: \"likes.count\"\n    });\n    expect(broker.metrics.set).toHaveBeenNthCalledWith(2, \"moleculer.circuit-breaker.half-opened.active\", 1, {\n      affectedNodeID: \"server-1\",\n      service: \"v2.likes\",\n      action: \"likes.count\"\n    });\n  });","file":"unit/middlewares/circuit-breaker.spec.js","skipped":false,"dir":"test"},{"name":"should close CB","suites":["Test CircuitBreakerMiddleware logic"],"updatePoint":{"line":243,"column":21},"line":243,"code":"  it(\"should close CB\", () => {\n    broker.broadcast.mockClear();\n    broker.metrics.set.mockClear();\n    return Promise.all([newHandler(Context.create(broker, endpoint, {\n      crash: false\n    })).catch(protectReject).then(res => expect(res).toBe(\"Result\")), newHandler(Context.create(broker, endpoint, {\n      crash: false\n    })).catch(protectReject).then(res => expect(res).toBe(\"Result\"))]).catch(protectReject).then(() => {\n      expect(broker.broadcast).toHaveBeenCalledTimes(1);\n      expect(broker.broadcast).toHaveBeenCalledWith(\"$circuit-breaker.closed\", {\n        service: \"v2.likes\",\n        action: \"likes.count\",\n        nodeID: broker.nodeID\n      });\n      expect(endpoint.state).toBe(true);\n      expect(broker.metrics.set).toHaveBeenCalledTimes(2);\n      expect(broker.metrics.set).toHaveBeenNthCalledWith(1, \"moleculer.circuit-breaker.opened.active\", 0, {\n        affectedNodeID: \"server-1\",\n        service: \"v2.likes\",\n        action: \"likes.count\"\n      });\n      expect(broker.metrics.set).toHaveBeenNthCalledWith(2, \"moleculer.circuit-breaker.half-opened.active\", 0, {\n        affectedNodeID: \"server-1\",\n        service: \"v2.likes\",\n        action: \"likes.count\"\n      });\n    });\n  });","file":"unit/middlewares/circuit-breaker.spec.js","skipped":false,"dir":"test"},{"name":"should reset stat after windowTime","suites":["Test CircuitBreakerMiddleware logic"],"updatePoint":{"line":271,"column":40},"line":271,"code":"  it(\"should reset stat after windowTime\", () => {\n    clock.tick(62 * 1000);\n    expect(endpoint.state).toBe(true);\n    broker.broadcast.mockClear();\n    broker.metrics.set.mockClear();\n    broker.metrics.increment.mockClear();\n    return Promise.all([newHandler(Context.create(broker, endpoint, {\n      crash: true\n    })).then(protectReject).catch(err => expect(err.message).toBe(\"Crashed\")), newHandler(Context.create(broker, endpoint, {\n      crash: true\n    })).then(protectReject).catch(err => expect(err.message).toBe(\"Crashed\")), newHandler(Context.create(broker, endpoint, {\n      crash: true\n    })).then(protectReject).catch(err => expect(err.message).toBe(\"Crashed\")), newHandler(Context.create(broker, endpoint, {\n      crash: true\n    })).then(protectReject).catch(err => expect(err.message).toBe(\"Crashed\"))]).catch(protectReject).then(() => {\n      expect(endpoint.state).toBe(true);\n      expect(broker.broadcast).toHaveBeenCalledTimes(0);\n      expect(broker.metrics.set).toHaveBeenCalledTimes(0);\n      expect(broker.metrics.increment).toHaveBeenCalledTimes(0);\n    });\n  });","file":"unit/middlewares/circuit-breaker.spec.js","skipped":false,"dir":"test"},{"name":"should reset stat after windowTime","suites":["Test CircuitBreakerMiddleware logic"],"updatePoint":{"line":292,"column":40},"line":292,"code":"  it(\"should reset stat after windowTime\", () => {\n    clock.tick(62 * 1000);\n    expect(endpoint.state).toBe(true);\n    broker.broadcast.mockClear();\n    broker.metrics.set.mockClear();\n    broker.metrics.increment.mockClear();\n    return Promise.all([newHandler(Context.create(broker, endpoint, {\n      crash: false\n    })).catch(protectReject).then(res => expect(res).toBe(\"Result\")), newHandler(Context.create(broker, endpoint, {\n      crash: false\n    })).catch(protectReject).then(res => expect(res).toBe(\"Result\")), newHandler(Context.create(broker, endpoint, {\n      crash: false\n    })).catch(protectReject).then(res => expect(res).toBe(\"Result\")), newHandler(Context.create(broker, endpoint, {\n      crash: false\n    })).catch(protectReject).then(res => expect(res).toBe(\"Result\")), newHandler(Context.create(broker, endpoint, {\n      crash: false\n    })).catch(protectReject).then(res => expect(res).toBe(\"Result\")), newHandler(Context.create(broker, endpoint, {\n      crash: false\n    })).catch(protectReject).then(res => expect(res).toBe(\"Result\")), newHandler(Context.create(broker, endpoint, {\n      crash: false\n    })).catch(protectReject).then(res => expect(res).toBe(\"Result\")), newHandler(Context.create(broker, endpoint, {\n      crash: false\n    })).catch(protectReject).then(res => expect(res).toBe(\"Result\"))]).catch(protectReject).then(() => {\n      expect(endpoint.state).toBe(true);\n      expect(broker.broadcast).toHaveBeenCalledTimes(0);\n      expect(broker.metrics.set).toHaveBeenCalledTimes(0);\n      expect(broker.metrics.increment).toHaveBeenCalledTimes(0);\n    });\n  });","file":"unit/middlewares/circuit-breaker.spec.js","skipped":false,"dir":"test"},{"name":"should register hooks","suites":["Test ContextTrackerMiddleware"],"updatePoint":{"line":35,"column":27},"line":35,"code":"  it(\"should register hooks\", () => {\n    expect(mw.localAction).toBeInstanceOf(Function);\n    expect(mw.remoteAction).toBeInstanceOf(Function);\n    expect(mw.localEvent).toBeInstanceOf(Function);\n  });","file":"unit/middlewares/context-tracker.spec.js","skipped":false,"dir":"test"},{"name":"should not wrap handler if tracking is disabled","suites":["Test ContextTrackerMiddleware"],"updatePoint":{"line":40,"column":53},"line":40,"code":"  it(\"should not wrap handler if tracking is disabled\", () => {\n    broker.options.tracking.enabled = false;\n    const newHandler = mw.localAction.call(broker, handler, action);\n    expect(newHandler).toBe(handler);\n  });","file":"unit/middlewares/context-tracker.spec.js","skipped":false,"dir":"test"},{"name":"should wrap handler if tracking is enabled","suites":["Test ContextTrackerMiddleware"],"updatePoint":{"line":45,"column":48},"line":45,"code":"  it(\"should wrap handler if tracking is enabled\", () => {\n    broker.options.tracking.enabled = true;\n    const newHandler = mw.localAction.call(broker, handler, action);\n    expect(newHandler).not.toBe(handler);\n  });","file":"unit/middlewares/context-tracker.spec.js","skipped":false,"dir":"test"},{"name":"should not track if tracking is false in calling options","suites":["Test ContextTrackerMiddleware"],"updatePoint":{"line":50,"column":62},"line":50,"code":"  it(\"should not track if tracking is false in calling options\", () => {\n    let resolve;\n    const handler = jest.fn(() => new Promise(r => resolve = r));\n    const newHandler = mw.localAction.call(broker, handler, action);\n    const ctx = Context.create(broker, endpoint, null, {\n      tracking: false\n    });\n    const p = newHandler(ctx);\n    expect(service._trackedContexts.length).toBe(0);\n    resolve(\"Result\");\n    return p.catch(protectReject).then(res => {\n      expect(res).toBe(\"Result\");\n      expect(handler).toHaveBeenCalledTimes(1);\n      expect(service._trackedContexts.length).toBe(0);\n    });\n  });","file":"unit/middlewares/context-tracker.spec.js","skipped":false,"dir":"test"},{"name":"should tracking","suites":["Test ContextTrackerMiddleware"],"updatePoint":{"line":66,"column":21},"line":66,"code":"  it(\"should tracking\", () => {\n    let resolve;\n    const handler = jest.fn(() => new Promise(r => resolve = r));\n    const newHandler = mw.localAction.call(broker, handler, action);\n    const ctx = Context.create(broker, endpoint);\n    const p = newHandler(ctx);\n    expect(service._trackedContexts.length).toBe(1);\n    expect(service._trackedContexts[0]).toBe(ctx);\n    resolve(\"Result\");\n    return p.catch(protectReject).then(res => {\n      expect(res).toBe(\"Result\");\n      expect(service._trackedContexts.length).toBe(0);\n    });\n  });","file":"unit/middlewares/context-tracker.spec.js","skipped":false,"dir":"test"},{"name":"should remove from list if handler is rejected","suites":["Test ContextTrackerMiddleware"],"updatePoint":{"line":80,"column":52},"line":80,"code":"  it(\"should remove from list if handler is rejected\", () => {\n    let reject;\n    const handler = jest.fn(() => new Promise((_, r) => reject = r));\n    const newHandler = mw.localAction.call(broker, handler, action);\n    let err = new Error(\"Some error\");\n    const ctx = Context.create(broker, endpoint);\n    const p = newHandler(ctx);\n    expect(service._trackedContexts.length).toBe(1);\n    expect(service._trackedContexts[0]).toBe(ctx);\n    reject(err);\n    return p.then(protectReject).catch(res => {\n      expect(res).toBe(err);\n      expect(service._trackedContexts.length).toBe(0);\n    });\n  });","file":"unit/middlewares/context-tracker.spec.js","skipped":false,"dir":"test"},{"name":"should called stopped","suites":["Test Service stopping with delayed shutdown"],"updatePoint":{"line":119,"column":27},"line":119,"code":"  it(\"should called stopped\", () => {\n    const service = broker.createService(schema);\n    return broker.start().then(() => {\n      broker.call(\"delayed.test\", {});\n      return service.Promise.delay(10);\n    }).then(() => broker.stop()).catch(protectReject).then(() => {\n      expect(FLOW).toEqual([\"service-start\", \"broker-start\", \"start\", \"end\", \"service-stop\", \"broker-stop\"]);\n      expect(schema.stopped).toHaveBeenCalledTimes(1);\n    });\n  });","file":"unit/middlewares/context-tracker.spec.js","skipped":false,"dir":"test"},{"name":"should called stopped","suites":["Test Service stopping with delayed shutdown & event"],"updatePoint":{"line":154,"column":27},"line":154,"code":"  it(\"should called stopped\", () => {\n    const service = broker.createService(schema);\n    return broker.start().then(() => {\n      broker.emit(\"test\");\n      return service.Promise.delay(10);\n    }).then(() => broker.stop()).catch(protectReject).then(() => {\n      expect(FLOW).toEqual([\"service-start\", \"broker-start\", \"start\", \"end\", \"service-stop\", \"broker-stop\"]);\n      expect(schema.stopped).toHaveBeenCalledTimes(1);\n    });\n  });","file":"unit/middlewares/context-tracker.spec.js","skipped":false,"dir":"test"},{"name":"should called stopped","suites":["Test Service throw GraceFulTimeoutError"],"updatePoint":{"line":191,"column":27},"line":191,"code":"  it(\"should called stopped\", () => {\n    const service = broker.createService(schema);\n    return broker.start().then(() => {\n      broker.call(\"delayed.test\", {});\n      return service.Promise.delay(10);\n    }).then(() => broker.stop()).catch(protectReject).then(() => {\n      expect(FLOW).toEqual([\"service-start\", \"broker-start\", \"start\", \"service-stop\", \"broker-stop\"]);\n      expect(schema.stopped).toHaveBeenCalledTimes(1);\n    });\n  });","file":"unit/middlewares/context-tracker.spec.js","skipped":false,"dir":"test"},{"name":"should called stopped","suites":["Test broker delayed shutdown with remote calls"],"updatePoint":{"line":238,"column":27},"line":238,"code":"  it(\"should called stopped\", () => {\n    return broker1.Promise.resolve().then(() => {\n      broker1.call(\"delayed.test\", {});\n      return broker1.Promise.delay(50);\n    }).then(() => broker1.Promise.all([broker1.stop(), broker2.stop()])).catch(protectReject).then(() => {\n      expect(FLOW).toEqual([\"broker1-start\", \"service-start\", \"broker2-start\", \"start\", \"end\", \"service-stop\", \"broker2-stop\", \"broker1-stop\"]);\n    });\n  });","file":"unit/middlewares/context-tracker.spec.js","skipped":true,"dir":"test"},{"name":"should called stopped","suites":["Test broker delayed throw GraceFulTimeoutError with remote calls"],"updatePoint":{"line":290,"column":27},"line":290,"code":"  it(\"should called stopped\", () => {\n    return broker1.Promise.resolve().then(() => {\n      broker1.call(\"delayed.test\", {});\n      return broker1.Promise.delay(10);\n    }).then(() => broker1.Promise.all([broker2.stop(), broker1.stop()])).catch(protectReject).then(() => {\n      expect(FLOW).toEqual([\"broker1-start\", \"service-start\", \"broker2-start\", \"start\", \"broker1-stop\", \"service-stop\", \"broker2-stop\"]);\n    });\n  });","file":"unit/middlewares/context-tracker.spec.js","skipped":true,"dir":"test"},{"name":"should register hooks","suites":["Test DebounceMiddleware"],"updatePoint":{"line":29,"column":27},"line":29,"code":"  it(\"should register hooks\", () => {\n    expect(mw.localEvent).toBeInstanceOf(Function);\n  });","file":"unit/middlewares/debounce.spec.js","skipped":false,"dir":"test"},{"name":"should not wrap handler if debounce is not set","suites":["Test DebounceMiddleware","Test localEvent"],"updatePoint":{"line":36,"column":54},"line":36,"code":"    it(\"should not wrap handler if debounce is not set\", () => {\n      const newActionHandler = mw.localEvent.call(broker, handler, event);\n      expect(newActionHandler).toBe(handler);\n      event.debounce = 0;\n      const newEventHandler = mw.localEvent.call(broker, handler, event);\n      expect(newEventHandler).toBe(handler);\n    });","file":"unit/middlewares/debounce.spec.js","skipped":false,"dir":"test"},{"name":"should wrap handler if debounce is defined","suites":["Test DebounceMiddleware","Test localEvent"],"updatePoint":{"line":43,"column":50},"line":43,"code":"    it(\"should wrap handler if debounce is defined\", () => {\n      event.debounce = 5000;\n      const newHandler = mw.localEvent.call(broker, handler, event);\n      expect(newHandler).not.toBe(handler);\n    });","file":"unit/middlewares/debounce.spec.js","skipped":false,"dir":"test"},{"name":"should invoke when event not received in 5 seconds","suites":["Test DebounceMiddleware","Test localEvent"],"updatePoint":{"line":48,"column":58},"line":48,"code":"    it(\"should invoke when event not received in 5 seconds\", () => {\n      event.debounce = 5000;\n      event.handler.mockClear();\n      const ctx = Context.create(broker, endpoint);\n      const newHandler = mw.localEvent.call(broker, handler, event);\n      expect(event.handler).toBeCalledTimes(0);\n      newHandler(ctx);\n      expect(event.handler).toBeCalledTimes(0);\n      clock.tick(500);\n      newHandler(ctx);\n      expect(event.handler).toBeCalledTimes(0);\n      clock.tick(1500);\n      newHandler(ctx);\n      expect(event.handler).toBeCalledTimes(0);\n      clock.tick(2000);\n      newHandler(ctx);\n      expect(event.handler).toBeCalledTimes(0);\n      clock.tick(5000);\n      newHandler(ctx);\n      expect(event.handler).toBeCalledTimes(1);\n    });","file":"unit/middlewares/debounce.spec.js","skipped":false,"dir":"test"},{"name":"should register hooks","suites":["Test ActionLogger"],"updatePoint":{"line":49,"column":27},"line":49,"code":"  it(\"should register hooks\", () => {\n    const mw = Middleware();\n    expect(mw.created).toBeInstanceOf(Function);\n    expect(mw.call).toBeInstanceOf(Function);\n  });","file":"unit/middlewares/debugging/action-logger.spec.js","skipped":false,"dir":"test"},{"name":"should log action call only","suites":["Test ActionLogger","Test logging to logger"],"updatePoint":{"line":58,"column":35},"line":58,"code":"    it(\"should log action call only\", async () => {\n      logger.info.mockClear();\n      const broker = await createMW({\n        logger,\n        colors: false\n      });\n      const res = await broker.call(\"test.ok\", {\n        a: 5\n      });\n      expect(res).toStrictEqual({\n        result: \"ok\"\n      });\n      expect(logger.info).toBeCalledTimes(2);\n      expect(logger.info).toHaveBeenNthCalledWith(1, \"Calling 'test.ok'.\");\n      expect(logger.info).toHaveBeenNthCalledWith(2, \"Response for 'test.ok' is received.\");\n      await broker.stop();\n    });","file":"unit/middlewares/debugging/action-logger.spec.js","skipped":false,"dir":"test"},{"name":"should log action call with params","suites":["Test ActionLogger","Test logging to logger"],"updatePoint":{"line":75,"column":42},"line":75,"code":"    it(\"should log action call with params\", async () => {\n      logger.info.mockClear();\n      const broker = await createMW({\n        logger,\n        colors: false,\n        logParams: true\n      });\n      const res = await broker.call(\"test.ok\", {\n        a: 5\n      });\n      expect(res).toStrictEqual({\n        result: \"ok\"\n      });\n      expect(logger.info).toBeCalledTimes(2);\n      expect(logger.info).toHaveBeenNthCalledWith(1, \"Calling 'test.ok' with params:\", {\n        a: 5\n      });\n      expect(logger.info).toHaveBeenNthCalledWith(2, \"Response for 'test.ok' is received.\");\n      await broker.stop();\n    });","file":"unit/middlewares/debugging/action-logger.spec.js","skipped":false,"dir":"test"},{"name":"should log action call with params & meta","suites":["Test ActionLogger","Test logging to logger"],"updatePoint":{"line":95,"column":49},"line":95,"code":"    it(\"should log action call with params & meta\", async () => {\n      logger.info.mockClear();\n      const broker = await createMW({\n        logger,\n        colors: false,\n        logParams: true,\n        logMeta: true\n      });\n      const res = await broker.call(\"test.ok\", {\n        a: 5\n      }, {\n        meta: {\n          user: \"John\"\n        }\n      });\n      expect(res).toStrictEqual({\n        result: \"ok\"\n      });\n      expect(logger.info).toBeCalledTimes(3);\n      expect(logger.info).toHaveBeenNthCalledWith(1, \"Calling 'test.ok' with params:\", {\n        a: 5\n      });\n      expect(logger.info).toHaveBeenNthCalledWith(2, \"Meta:\", {\n        user: \"John\"\n      });\n      expect(logger.info).toHaveBeenNthCalledWith(3, \"Response for 'test.ok' is received.\");\n      await broker.stop();\n    });","file":"unit/middlewares/debugging/action-logger.spec.js","skipped":false,"dir":"test"},{"name":"should log action call with response","suites":["Test ActionLogger","Test logging to logger"],"updatePoint":{"line":123,"column":44},"line":123,"code":"    it(\"should log action call with response\", async () => {\n      logger.info.mockClear();\n      const broker = await createMW({\n        logger,\n        colors: false,\n        logResponse: true\n      });\n      const res = await broker.call(\"test.ok\", {\n        a: 5\n      });\n      expect(res).toStrictEqual({\n        result: \"ok\"\n      });\n      expect(logger.info).toBeCalledTimes(2);\n      expect(logger.info).toHaveBeenNthCalledWith(1, \"Calling 'test.ok'.\");\n      expect(logger.info).toHaveBeenNthCalledWith(2, \"Response for 'test.ok' is received:\", {\n        result: \"ok\"\n      });\n      await broker.stop();\n    });","file":"unit/middlewares/debugging/action-logger.spec.js","skipped":false,"dir":"test"},{"name":"should log failed action call","suites":["Test ActionLogger","Test logging to logger"],"updatePoint":{"line":143,"column":37},"line":143,"code":"    it(\"should log failed action call\", async () => {\n      logger.info.mockClear();\n      const broker = await createMW({\n        logger,\n        colors: false\n      });\n      expect.assertions(4);\n\n      try {\n        await broker.call(\"test.fail\", {\n          a: 5\n        });\n      } catch (err) {\n        expect(err).toBeInstanceOf(MoleculerError);\n        expect(logger.info).toBeCalledTimes(2);\n        expect(logger.info).toHaveBeenNthCalledWith(1, \"Calling 'test.fail'.\");\n        expect(logger.info).toHaveBeenNthCalledWith(2, \"Error for 'test.fail' is received:\", err);\n      }\n\n      await broker.stop();\n    });","file":"unit/middlewares/debugging/action-logger.spec.js","skipped":false,"dir":"test"},{"name":"should not log if not match whitelist","suites":["Test ActionLogger","Test logging to logger"],"updatePoint":{"line":164,"column":45},"line":164,"code":"    it(\"should not log if not match whitelist\", async () => {\n      logger.info.mockClear();\n      const broker = await createMW({\n        logger,\n        colors: false,\n        whitelist: [\"$node.*\"]\n      });\n      await broker.call(\"test.ok\", {\n        a: 5\n      });\n      expect(logger.info).toBeCalledTimes(0);\n      await broker.stop();\n    });","file":"unit/middlewares/debugging/action-logger.spec.js","skipped":false,"dir":"test"},{"name":"should log nothing","suites":["Test ActionLogger","Test logging to files"],"updatePoint":{"line":179,"column":26},"line":179,"code":"    it(\"should log nothing\", async () => {\n      fs.writeFile.mockClear();\n      Date.now = jest.fn(() => 123456);\n      const broker = await createMW({\n        logger,\n        colors: false,\n        folder: \"./logs\",\n        extension: \".log\"\n      });\n      expect(utils.makeDirs).toBeCalledTimes(1);\n      expect(utils.makeDirs).toBeCalledWith(path.join(\"logs\", \"server-1\"));\n      const res = await broker.call(\"test.ok\", {\n        a: 5\n      });\n      expect(res).toStrictEqual({\n        result: \"ok\"\n      });\n      expect(fs.writeFile).toBeCalledTimes(0);\n      await broker.stop();\n    });","file":"unit/middlewares/debugging/action-logger.spec.js","skipped":false,"dir":"test"},{"name":"should log request","suites":["Test ActionLogger","Test logging to files"],"updatePoint":{"line":199,"column":26},"line":199,"code":"    it(\"should log request\", async () => {\n      fs.writeFile.mockClear();\n      Date.now = jest.fn(() => 123456);\n      const broker = await createMW({\n        logger,\n        colors: false,\n        folder: \"./logs\",\n        extension: \".log\",\n        logParams: true\n      });\n      const res = await broker.call(\"test.ok\", {\n        a: 5\n      });\n      expect(res).toStrictEqual({\n        result: \"ok\"\n      });\n      expect(fs.writeFile).toBeCalledTimes(1);\n      expect(fs.writeFile).toHaveBeenNthCalledWith(1, path.join(\"logs\", \"server-1\", \"123456-call-test.ok-request.log\"), stringify({\n        a: 5\n      }), expect.any(Function));\n      await broker.stop();\n    });","file":"unit/middlewares/debugging/action-logger.spec.js","skipped":false,"dir":"test"},{"name":"should log response","suites":["Test ActionLogger","Test logging to files"],"updatePoint":{"line":221,"column":27},"line":221,"code":"    it(\"should log response\", async () => {\n      fs.writeFile.mockClear();\n      Date.now = jest.fn(() => 123456);\n      const broker = await createMW({\n        logger,\n        colors: false,\n        folder: \"./logs\",\n        logResponse: true\n      });\n      const res = await broker.call(\"test.ok\", {\n        a: 5\n      });\n      expect(res).toStrictEqual({\n        result: \"ok\"\n      });\n      expect(fs.writeFile).toBeCalledTimes(1);\n      expect(fs.writeFile).toHaveBeenNthCalledWith(1, path.join(\"logs\", \"server-1\", \"123456-call-test.ok-response.json\"), stringify({\n        result: \"ok\"\n      }), expect.any(Function));\n      await broker.stop();\n    });","file":"unit/middlewares/debugging/action-logger.spec.js","skipped":false,"dir":"test"},{"name":"should log meta & error","suites":["Test ActionLogger","Test logging to files"],"updatePoint":{"line":242,"column":31},"line":242,"code":"    it(\"should log meta & error\", async () => {\n      fs.writeFile.mockClear();\n      Date.now = jest.fn(() => 123456);\n      const broker = await createMW({\n        logger,\n        colors: false,\n        folder: \"./logs\",\n        extension: \".log\",\n        logMeta: true,\n        logResponse: true\n      });\n      expect.assertions(5);\n\n      try {\n        await broker.call(\"test.fail\", {\n          a: 5\n        }, {\n          meta: {\n            user: \"John\"\n          }\n        });\n      } catch (err) {\n        expect(err).toBeInstanceOf(MoleculerError);\n        expect(err.message).toBe(\"Action calling failed.\");\n        expect(fs.writeFile).toBeCalledTimes(2);\n        expect(fs.writeFile).toHaveBeenNthCalledWith(1, path.join(\"logs\", \"server-1\", \"123456-call-test.fail-meta.log\"), stringify({\n          user: \"John\"\n        }), expect.any(Function));\n        expect(fs.writeFile).toHaveBeenNthCalledWith(2, path.join(\"logs\", \"server-1\", \"123456-call-test.fail-error.log\"), stringify(err), expect.any(Function));\n        await broker.stop();\n      }\n    });","file":"unit/middlewares/debugging/action-logger.spec.js","skipped":false,"dir":"test"},{"name":"should register hooks","suites":["Test ActionLogger"],"updatePoint":{"line":30,"column":27},"line":30,"code":"  it(\"should register hooks\", () => {\n    const mw = createMW();\n    expect(mw.created).toBeInstanceOf(Function);\n    expect(mw.transitPublish).toBeInstanceOf(Function);\n    expect(mw.transitMessageHandler).toBeInstanceOf(Function);\n  });","file":"unit/middlewares/debugging/transit-logger.spec.js","skipped":false,"dir":"test"},{"name":"should log published packet","suites":["Test ActionLogger","Test logging published packets"],"updatePoint":{"line":40,"column":35},"line":40,"code":"    it(\"should log published packet\", async () => {\n      logger.info.mockClear();\n      const mw = createMW({\n        logger,\n        colors: false\n      });\n      const next = jest.fn();\n      const packet = {\n        type: \"REQUEST\",\n        target: \"server-2\",\n        params: {\n          a: 5\n        }\n      };\n      mw.transitPublish(next)(packet);\n      expect(next).toBeCalledTimes(1);\n      expect(next).toBeCalledWith(packet);\n      expect(logger.info).toBeCalledTimes(1);\n      expect(logger.info).toHaveBeenNthCalledWith(1, \"=> Send REQUEST packet to 'server-2'\");\n    });","file":"unit/middlewares/debugging/transit-logger.spec.js","skipped":false,"dir":"test"},{"name":"should log published packet with payload","suites":["Test ActionLogger","Test logging published packets"],"updatePoint":{"line":60,"column":48},"line":60,"code":"    it(\"should log published packet with payload\", async () => {\n      logger.info.mockClear();\n      const mw = createMW({\n        logger,\n        colors: false,\n        logPacketData: true\n      });\n      const next = jest.fn();\n      const packet = {\n        type: \"REQUEST\",\n        target: \"server-2\",\n        payload: {\n          a: 5\n        }\n      };\n      mw.transitPublish(next)(packet);\n      expect(next).toBeCalledTimes(1);\n      expect(next).toBeCalledWith(packet);\n      expect(logger.info).toBeCalledTimes(2);\n      expect(logger.info).toHaveBeenNthCalledWith(1, \"=> Send REQUEST packet to 'server-2'\");\n      expect(logger.info).toHaveBeenNthCalledWith(2, \"=>\", packet.payload);\n    });","file":"unit/middlewares/debugging/transit-logger.spec.js","skipped":false,"dir":"test"},{"name":"should not log if not match whitelist","suites":["Test ActionLogger","Test logging published packets"],"updatePoint":{"line":82,"column":45},"line":82,"code":"    it(\"should not log if not match whitelist\", async () => {\n      logger.info.mockClear();\n      const mw = createMW({\n        logger,\n        colors: false,\n        logPacketData: true\n      });\n      const next = jest.fn();\n      const packet = {\n        type: \"HEARTBEAT\",\n        target: \"server-2\",\n        payload: {\n          a: 5\n        }\n      };\n      mw.transitPublish(next)(packet);\n      expect(next).toBeCalledTimes(1);\n      expect(next).toBeCalledWith(packet);\n      expect(logger.info).toBeCalledTimes(0);\n    });","file":"unit/middlewares/debugging/transit-logger.spec.js","skipped":false,"dir":"test"},{"name":"should log published packet to file","suites":["Test ActionLogger","Test logging published packets"],"updatePoint":{"line":102,"column":43},"line":102,"code":"    it(\"should log published packet to file\", async () => {\n      fs.writeFile.mockClear();\n      Date.now = jest.fn(() => 123456);\n      const mw = createMW({\n        logger,\n        colors: false,\n        folder: \"./logs\",\n        extension: \".log\",\n        logParams: true\n      });\n      expect(utils.makeDirs).toBeCalledTimes(1);\n      expect(utils.makeDirs).toBeCalledWith(path.join(\"logs\", \"server-1\"));\n      const next = jest.fn();\n      const packet = {\n        type: \"REQUEST\",\n        target: \"server-2\",\n        payload: {\n          a: 5\n        }\n      };\n      mw.transitPublish(next)(packet);\n      expect(next).toBeCalledTimes(1);\n      expect(next).toBeCalledWith(packet);\n      expect(fs.writeFile).toBeCalledTimes(1);\n      expect(fs.writeFile).toHaveBeenNthCalledWith(1, path.join(\"logs\", \"server-1\", \"123456-send-REQUEST-to-server-2.log\"), stringify({\n        a: 5\n      }), expect.any(Function));\n    });","file":"unit/middlewares/debugging/transit-logger.spec.js","skipped":false,"dir":"test"},{"name":"should log received packet","suites":["Test ActionLogger","Test logging received packets"],"updatePoint":{"line":140,"column":34},"line":140,"code":"    it(\"should log received packet\", async () => {\n      logger.info.mockClear();\n      const mw = createMW({\n        logger,\n        colors: false\n      });\n      const next = jest.fn();\n      mw.transitMessageHandler(next)(\"RESPONSE\", packet);\n      expect(next).toBeCalledTimes(1);\n      expect(next).toBeCalledWith(\"RESPONSE\", packet);\n      expect(logger.info).toBeCalledTimes(1);\n      expect(logger.info).toHaveBeenNthCalledWith(1, \"<= Receive RESPONSE packet from 'server-2'\");\n    });","file":"unit/middlewares/debugging/transit-logger.spec.js","skipped":false,"dir":"test"},{"name":"should log received packet with payload","suites":["Test ActionLogger","Test logging received packets"],"updatePoint":{"line":153,"column":47},"line":153,"code":"    it(\"should log received packet with payload\", async () => {\n      logger.info.mockClear();\n      const mw = createMW({\n        logger,\n        colors: false,\n        logPacketData: true\n      });\n      const next = jest.fn();\n      mw.transitMessageHandler(next)(\"RESPONSE\", packet);\n      expect(next).toBeCalledTimes(1);\n      expect(next).toBeCalledWith(\"RESPONSE\", packet);\n      expect(logger.info).toBeCalledTimes(2);\n      expect(logger.info).toHaveBeenNthCalledWith(1, \"<= Receive RESPONSE packet from 'server-2'\");\n      expect(logger.info).toHaveBeenNthCalledWith(2, \"<=\", packet.payload);\n    });","file":"unit/middlewares/debugging/transit-logger.spec.js","skipped":false,"dir":"test"},{"name":"should not log if not match whitelist","suites":["Test ActionLogger","Test logging received packets"],"updatePoint":{"line":168,"column":45},"line":168,"code":"    it(\"should not log if not match whitelist\", async () => {\n      logger.info.mockClear();\n      const mw = createMW({\n        logger,\n        colors: false,\n        logPacketData: true\n      });\n      const next = jest.fn();\n      mw.transitMessageHandler(next)(\"HEARTBEAT\", packet);\n      expect(next).toBeCalledTimes(1);\n      expect(next).toBeCalledWith(\"HEARTBEAT\", packet);\n      expect(logger.info).toBeCalledTimes(0);\n    });","file":"unit/middlewares/debugging/transit-logger.spec.js","skipped":false,"dir":"test"},{"name":"should log received packet to file","suites":["Test ActionLogger","Test logging received packets"],"updatePoint":{"line":181,"column":42},"line":181,"code":"    it(\"should log received packet to file\", async () => {\n      fs.writeFile.mockClear();\n      Date.now = jest.fn(() => 123456);\n      const mw = createMW({\n        logger,\n        colors: false,\n        folder: \"./logs\",\n        extension: \".log\",\n        logParams: true\n      });\n      const next = jest.fn();\n      mw.transitMessageHandler(next)(\"RESPONSE\", packet);\n      expect(next).toBeCalledTimes(1);\n      expect(next).toBeCalledWith(\"RESPONSE\", packet);\n      expect(fs.writeFile).toBeCalledTimes(1);\n      expect(fs.writeFile).toHaveBeenNthCalledWith(1, path.join(\"logs\", \"server-1\", \"123456-receive-RESPONSE-from-server-2.log\"), stringify(packet.payload), expect.any(Function));\n    });","file":"unit/middlewares/debugging/transit-logger.spec.js","skipped":false,"dir":"test"},{"name":"should register hooks","suites":["Test ErrorHandlerMiddleware"],"updatePoint":{"line":53,"column":27},"line":53,"code":"  it(\"should register hooks\", () => {\n    expect(mw.localAction).toBeInstanceOf(Function);\n    expect(mw.remoteAction).toBeInstanceOf(Function);\n  });","file":"unit/middlewares/error-handler.spec.js","skipped":false,"dir":"test"},{"name":"should wrap handler","suites":["Test ErrorHandlerMiddleware"],"updatePoint":{"line":57,"column":25},"line":57,"code":"  it(\"should wrap handler\", () => {\n    const newHandler = mw.localAction.call(broker, actionHandler, action);\n    expect(newHandler).not.toBe(actionHandler);\n    const newHandler2 = mw.remoteAction.call(broker, actionHandler, action);\n    expect(newHandler2).not.toBe(actionHandler);\n    const newHandler3 = mw.localEvent.call(broker, eventHandler, event);\n    expect(newHandler3).not.toBe(eventHandler);\n  });","file":"unit/middlewares/error-handler.spec.js","skipped":false,"dir":"test"},{"name":"should call broker errorHandler","suites":["Test ErrorHandlerMiddleware","Test with actions"],"updatePoint":{"line":66,"column":39},"line":66,"code":"    it(\"should call broker errorHandler\", () => {\n      broker.errorHandler.mockClear();\n      const error = new MoleculerError(\"Something wrong\");\n      let handler = jest.fn(() => Promise.reject(error));\n      const newHandler = mw.localAction.call(broker, handler, action);\n      const ctx = Context.create(broker, actionEndpoint);\n      return newHandler(ctx).then(protectReject).catch(err => {\n        expect(err).toBeInstanceOf(MoleculerError);\n        expect(err.name).toBe(\"MoleculerError\");\n        expect(err.message).toBe(\"Something wrong\");\n        expect(err.ctx).toBe(ctx);\n        expect(broker.errorHandler).toBeCalledTimes(1);\n        expect(broker.errorHandler).toBeCalledWith(err, {\n          ctx,\n          service: action.service,\n          action\n        });\n      });\n    });","file":"unit/middlewares/error-handler.spec.js","skipped":false,"dir":"test"},{"name":"should convert if not Error","suites":["Test ErrorHandlerMiddleware","Test with actions"],"updatePoint":{"line":85,"column":35},"line":85,"code":"    it(\"should convert if not Error\", () => {\n      broker.errorHandler.mockClear();\n      let handler = jest.fn(() => Promise.reject(\"Something wrong\"));\n      const newHandler = mw.localAction.call(broker, handler, action);\n      const ctx = Context.create(broker, actionEndpoint);\n      return newHandler(ctx).then(protectReject).catch(err => {\n        expect(err).toBeInstanceOf(Error);\n        expect(err).toBeInstanceOf(MoleculerError);\n        expect(err.name).toBe(\"MoleculerError\");\n        expect(err.message).toBe(\"Something wrong\");\n        expect(err.ctx).toBe(ctx);\n        expect(broker.errorHandler).toBeCalledTimes(1);\n        expect(broker.errorHandler).toBeCalledWith(err, {\n          ctx,\n          service: action.service,\n          action\n        });\n      });\n    });","file":"unit/middlewares/error-handler.spec.js","skipped":false,"dir":"test"},{"name":"should remove pending request if remote call","suites":["Test ErrorHandlerMiddleware","Test with actions"],"updatePoint":{"line":104,"column":52},"line":104,"code":"    it(\"should remove pending request if remote call\", () => {\n      let error = new MoleculerError(\"Some error\");\n      let handler = jest.fn(() => Promise.reject(error));\n      broker.transit.removePendingRequest = jest.fn();\n      const newHandler = mw.localAction.call(broker, handler, action);\n      const ctx = Context.create(broker, actionEndpoint);\n      ctx.id = \"123456\";\n      ctx.nodeID = \"server-2\";\n      return newHandler(ctx).then(protectReject).catch(err => {\n        expect(err).toBe(error);\n        expect(err.ctx).toBe(ctx);\n        expect(broker.transit.removePendingRequest).toHaveBeenCalledTimes(1);\n        expect(broker.transit.removePendingRequest).toHaveBeenCalledWith(\"123456\");\n      });\n    });","file":"unit/middlewares/error-handler.spec.js","skipped":false,"dir":"test"},{"name":"should call broker errorHandler","suites":["Test ErrorHandlerMiddleware","Test with events"],"updatePoint":{"line":121,"column":39},"line":121,"code":"    it(\"should call broker errorHandler\", () => {\n      broker.errorHandler.mockClear();\n      const error = new MoleculerError(\"Something wrong\");\n      let handler = jest.fn(() => Promise.reject(error));\n      const newHandler = mw.localEvent.call(broker, handler, event);\n      const ctx = Context.create(broker, eventEndpoint);\n      return newHandler(ctx).catch(protectReject).then(() => {\n        expect(error.ctx).toBe(ctx);\n        expect(broker.errorHandler).toBeCalledTimes(1);\n        expect(broker.errorHandler).toBeCalledWith(error, {\n          ctx,\n          service: action.service,\n          event\n        });\n      });\n    });","file":"unit/middlewares/error-handler.spec.js","skipped":false,"dir":"test"},{"name":"should convert if not Error","suites":["Test ErrorHandlerMiddleware","Test with events"],"updatePoint":{"line":137,"column":35},"line":137,"code":"    it(\"should convert if not Error\", () => {\n      broker.errorHandler.mockClear();\n      let handler = jest.fn(() => Promise.reject(\"Something wrong\"));\n      const newHandler = mw.localEvent.call(broker, handler, action);\n      const ctx = Context.create(broker, eventEndpoint);\n      return newHandler(ctx).catch(protectReject).then(() => {\n        const err = broker.errorHandler.mock.calls[0][0];\n        expect(err).toBeInstanceOf(Error);\n        expect(err).toBeInstanceOf(MoleculerError);\n        expect(err.name).toBe(\"MoleculerError\");\n        expect(err.message).toBe(\"Something wrong\");\n        expect(err.ctx).toBe(ctx);\n        expect(broker.errorHandler).toBeCalledTimes(1);\n        expect(broker.errorHandler).toBeCalledWith(err, {\n          ctx,\n          service: action.service,\n          event\n        });\n      });\n    });","file":"unit/middlewares/error-handler.spec.js","skipped":false,"dir":"test"},{"name":"should logging if throw further","suites":["Test ErrorHandlerMiddleware","Test with events"],"updatePoint":{"line":157,"column":39},"line":157,"code":"    it(\"should logging if throw further\", () => {\n      broker.errorHandler = jest.fn(err => Promise.reject(err));\n      let error = new MoleculerError(\"Some error\");\n      let handler = jest.fn(() => Promise.reject(error));\n      const newHandler = mw.localEvent.call(broker, handler, action);\n      const ctx = Context.create(broker, eventEndpoint);\n      ctx.id = \"123456\";\n      ctx.nodeID = \"server-2\";\n      jest.spyOn(broker.logger, \"error\");\n      return newHandler(ctx).catch(protectReject).then(() => {\n        const err = broker.errorHandler.mock.calls[0][0];\n        expect(err).toBe(error);\n        expect(err.ctx).toBe(ctx);\n        expect(broker.logger.error).toHaveBeenCalledTimes(1);\n        expect(broker.logger.error).toHaveBeenCalledWith(err);\n      });\n    });","file":"unit/middlewares/error-handler.spec.js","skipped":false,"dir":"test"},{"name":"should register hooks","suites":["Test FallbackMiddleware"],"updatePoint":{"line":41,"column":27},"line":41,"code":"  it(\"should register hooks\", () => {\n    expect(mw.created).toBeInstanceOf(Function);\n    expect(mw.localAction).toBeInstanceOf(Function);\n    expect(mw.remoteAction).toBeInstanceOf(Function);\n  });","file":"unit/middlewares/fallback.spec.js","skipped":false,"dir":"test"},{"name":"should wrap handler","suites":["Test FallbackMiddleware"],"updatePoint":{"line":46,"column":25},"line":46,"code":"  it(\"should wrap handler\", () => {\n    const newHandler = mw.localAction.call(broker, handler, action);\n    expect(newHandler).not.toBe(handler);\n  });","file":"unit/middlewares/fallback.spec.js","skipped":false,"dir":"test"},{"name":"should register metrics","suites":["Test FallbackMiddleware"],"updatePoint":{"line":50,"column":29},"line":50,"code":"  it(\"should register metrics\", () => {\n    mw.created(broker);\n    expect(broker.metrics.register).toHaveBeenCalledTimes(1);\n    expect(broker.metrics.register).toHaveBeenCalledWith({\n      type: \"counter\",\n      name: \"moleculer.request.fallback.total\",\n      labelNames: [\"service\", \"action\"],\n      description: \"Number of fallbacked requests\",\n      rate: true\n    });\n  });","file":"unit/middlewares/fallback.spec.js","skipped":false,"dir":"test"},{"name":"should call fallback Function and return","suites":["Test FallbackMiddleware"],"updatePoint":{"line":61,"column":46},"line":61,"code":"  it(\"should call fallback Function and return\", () => {\n    broker.metrics.increment.mockClear();\n    action.fallback = jest.fn(() => \"Fallback response\");\n    let error = new MoleculerError(\"Some error\");\n    let handler = jest.fn(() => Promise.reject(error));\n    const newHandler = mw.localAction.call(broker, handler, action);\n    const ctx = Context.create(broker, endpoint);\n    return newHandler(ctx).catch(protectReject).then(res => {\n      expect(res).toBe(\"Fallback response\");\n      expect(action.fallback).toHaveBeenCalledTimes(1);\n      expect(action.fallback).toHaveBeenCalledWith(ctx, error);\n      expect(broker.metrics.increment).toHaveBeenCalledTimes(1);\n      expect(broker.metrics.increment).toHaveBeenCalledWith(\"moleculer.request.fallback.total\", {\n        service: \"posts\",\n        action: \"posts.find\"\n      });\n    });\n  });","file":"unit/middlewares/fallback.spec.js","skipped":false,"dir":"test"},{"name":"should call fallback Function and return","suites":["Test FallbackMiddleware"],"updatePoint":{"line":79,"column":46},"line":79,"code":"  it(\"should call fallback Function and return\", () => {\n    broker.metrics.increment.mockClear();\n    action.fallback = \"someFallbackMethod\";\n    let error = new MoleculerError(\"Some error\");\n    let handler = jest.fn(() => Promise.reject(error));\n    const newHandler = mw.localAction.call(broker, handler, action);\n    const ctx = Context.create(broker, endpoint);\n    return newHandler(ctx).catch(protectReject).then(res => {\n      expect(res).toBe(\"Fallback response from method\");\n      expect(action.service.someFallbackMethod).toHaveBeenCalledTimes(1);\n      expect(action.service.someFallbackMethod).toHaveBeenCalledWith(ctx, error);\n      expect(broker.metrics.increment).toHaveBeenCalledTimes(1);\n      expect(broker.metrics.increment).toHaveBeenCalledWith(\"moleculer.request.fallback.total\", {\n        service: \"posts\",\n        action: \"posts.find\"\n      });\n    });\n  });","file":"unit/middlewares/fallback.spec.js","skipped":false,"dir":"test"},{"name":"should return fallbackResponse (native type)","suites":["Test FallbackMiddleware"],"updatePoint":{"line":97,"column":50},"line":97,"code":"  it(\"should return fallbackResponse (native type)\", () => {\n    broker.metrics.increment.mockClear();\n    action.fallback = null;\n    let error = new MoleculerError(\"Some error\");\n    let handler = jest.fn(() => Promise.reject(error));\n    const newHandler = mw.localAction.call(broker, handler, action);\n    const ctx = Context.create(broker, endpoint, null, {\n      fallbackResponse: \"fallback response\"\n    });\n    return newHandler(ctx).catch(protectReject).then(res => {\n      expect(res).toBe(\"fallback response\");\n      expect(broker.metrics.increment).toHaveBeenCalledTimes(1);\n      expect(broker.metrics.increment).toHaveBeenCalledWith(\"moleculer.request.fallback.total\", {\n        action: \"posts.find\"\n      });\n    });\n  });","file":"unit/middlewares/fallback.spec.js","skipped":false,"dir":"test"},{"name":"should return fallbackResponse (function)","suites":["Test FallbackMiddleware"],"updatePoint":{"line":114,"column":47},"line":114,"code":"  it(\"should return fallbackResponse (function)\", () => {\n    broker.metrics.increment.mockClear();\n    let error = new MoleculerError(\"Some error\");\n    let handler = jest.fn(() => Promise.reject(error));\n    let fallbackResponse = jest.fn(() => \"fallback response\");\n    const newHandler = mw.localAction.call(broker, handler, action);\n    const ctx = Context.create(broker, endpoint, null, {\n      fallbackResponse\n    });\n    expect(ctx.options.fallbackResponse).toBe(fallbackResponse);\n    return newHandler(ctx).catch(protectReject).then(res => {\n      expect(res).toBe(\"fallback response\");\n      expect(fallbackResponse).toHaveBeenCalledTimes(1);\n      expect(fallbackResponse).toHaveBeenCalledWith(ctx, error);\n      expect(broker.metrics.increment).toHaveBeenCalledTimes(1);\n      expect(broker.metrics.increment).toHaveBeenCalledWith(\"moleculer.request.fallback.total\", {\n        action: \"posts.find\"\n      });\n    });\n  });","file":"unit/middlewares/fallback.spec.js","skipped":false,"dir":"test"},{"name":"should register hooks","suites":["Test MetricsMiddleware"],"updatePoint":{"line":44,"column":27},"line":44,"code":"  it(\"should register hooks\", () => {\n    expect(mw.created).toBeInstanceOf(Function);\n    expect(mw.localAction).toBeInstanceOf(Function);\n    expect(mw.remoteAction).toBeInstanceOf(Function);\n    expect(mw.localEvent).toBeInstanceOf(Function);\n    expect(mw.emit).toBeInstanceOf(Function);\n    expect(mw.broadcast).toBeInstanceOf(Function);\n    expect(mw.broadcastLocal).toBeInstanceOf(Function);\n    expect(mw.transitPublish).toBeInstanceOf(Function);\n    expect(mw.transitMessageHandler).toBeInstanceOf(Function);\n    expect(mw.transporterSend).toBeInstanceOf(Function);\n    expect(mw.transporterReceive).toBeInstanceOf(Function);\n  });","file":"unit/middlewares/metrics.spec.js","skipped":false,"dir":"test"},{"name":"should register metrics & CB event handlers","suites":["Test MetricsMiddleware"],"updatePoint":{"line":57,"column":49},"line":57,"code":"  it(\"should register metrics & CB event handlers\", () => {\n    mw.created(broker);\n    expect(broker.metrics.register).toBeCalledTimes(20);\n  });","file":"unit/middlewares/metrics.spec.js","skipped":false,"dir":"test"},{"name":"should not wrap handler if metrics is disabled","suites":["Test MetricsMiddleware"],"updatePoint":{"line":61,"column":52},"line":61,"code":"  it(\"should not wrap handler if metrics is disabled\", () => {\n    broker.isMetricsEnabled = jest.fn(() => false);\n    const newHandler = mw.localAction.call(broker, handler, action);\n    expect(newHandler).toBe(handler);\n  });","file":"unit/middlewares/metrics.spec.js","skipped":false,"dir":"test"},{"name":"should wrap handler if metrics is enabled","suites":["Test MetricsMiddleware"],"updatePoint":{"line":66,"column":47},"line":66,"code":"  it(\"should wrap handler if metrics is enabled\", () => {\n    broker.isMetricsEnabled = jest.fn(() => true);\n    const newHandler = mw.localAction.call(broker, handler, action);\n    expect(newHandler).not.toBe(handler);\n  });","file":"unit/middlewares/metrics.spec.js","skipped":false,"dir":"test"},{"name":"should update local request metrics events if handler is resolved","suites":["Test MetricsMiddleware","Test localAction & remoteAction"],"updatePoint":{"line":72,"column":73},"line":72,"code":"    it(\"should update local request metrics events if handler is resolved\", () => {\n      handler.mockClear();\n      broker.metrics.increment.mockClear();\n      broker.metrics.decrement.mockClear();\n      broker.metrics.timer.mockClear();\n      const newHandler = mw.localAction.call(broker, handler, action);\n      const ctx = Context.create(broker, endpoint);\n      ctx.caller = \"users.list\";\n      return newHandler(ctx).catch(protectReject).then(res => {\n        expect(res).toBe(\"Result\");\n        expect(broker.metrics.increment).toHaveBeenCalledTimes(3);\n        expect(broker.metrics.increment).toHaveBeenNthCalledWith(1, \"moleculer.request.total\", {\n          action: \"posts.find\",\n          service: \"v2.posts\",\n          type: \"local\",\n          caller: \"users.list\"\n        });\n        expect(broker.metrics.increment).toHaveBeenNthCalledWith(2, \"moleculer.request.active\", {\n          action: \"posts.find\",\n          service: \"v2.posts\",\n          type: \"local\",\n          caller: \"users.list\"\n        });\n        expect(broker.metrics.increment).toHaveBeenNthCalledWith(3, \"moleculer.request.levels\", {\n          action: \"posts.find\",\n          service: \"v2.posts\",\n          level: 1,\n          caller: \"users.list\"\n        });\n        expect(broker.metrics.timer).toHaveBeenCalledTimes(1);\n        expect(broker.metrics.timer).toHaveBeenNthCalledWith(1, \"moleculer.request.time\", {\n          action: \"posts.find\",\n          service: \"v2.posts\",\n          type: \"local\",\n          caller: \"users.list\"\n        });\n        expect(handler).toHaveBeenCalledTimes(1);\n        expect(broker.metrics.decrement).toHaveBeenCalledTimes(1);\n        expect(broker.metrics.decrement).toHaveBeenNthCalledWith(1, \"moleculer.request.active\", {\n          action: \"posts.find\",\n          service: \"v2.posts\",\n          type: \"local\",\n          caller: \"users.list\"\n        });\n      });\n    });","file":"unit/middlewares/metrics.spec.js","skipped":false,"dir":"test"},{"name":"should update remote request metrics events if handler is resolved","suites":["Test MetricsMiddleware","Test localAction & remoteAction"],"updatePoint":{"line":118,"column":74},"line":118,"code":"    it(\"should update remote request metrics events if handler is resolved\", () => {\n      handler.mockClear();\n      broker.metrics.increment.mockClear();\n      broker.metrics.decrement.mockClear();\n      broker.metrics.timer.mockClear();\n      const newHandler = mw.remoteAction.call(broker, handler, action);\n      const ctx = Context.create(broker, endpoint);\n      ctx.caller = \"users.list\";\n      return newHandler(ctx).catch(protectReject).then(res => {\n        expect(res).toBe(\"Result\");\n        expect(broker.metrics.increment).toHaveBeenCalledTimes(3);\n        expect(broker.metrics.increment).toHaveBeenNthCalledWith(1, \"moleculer.request.total\", {\n          action: \"posts.find\",\n          service: \"v2.posts\",\n          type: \"remote\",\n          caller: \"users.list\"\n        });\n        expect(broker.metrics.increment).toHaveBeenNthCalledWith(2, \"moleculer.request.active\", {\n          action: \"posts.find\",\n          service: \"v2.posts\",\n          type: \"remote\",\n          caller: \"users.list\"\n        });\n        expect(broker.metrics.increment).toHaveBeenNthCalledWith(3, \"moleculer.request.levels\", {\n          action: \"posts.find\",\n          service: \"v2.posts\",\n          level: 1,\n          caller: \"users.list\"\n        });\n        expect(broker.metrics.timer).toHaveBeenCalledTimes(1);\n        expect(broker.metrics.timer).toHaveBeenNthCalledWith(1, \"moleculer.request.time\", {\n          action: \"posts.find\",\n          service: \"v2.posts\",\n          type: \"remote\",\n          caller: \"users.list\"\n        });\n        expect(handler).toHaveBeenCalledTimes(1);\n        expect(broker.metrics.decrement).toHaveBeenCalledTimes(1);\n        expect(broker.metrics.decrement).toHaveBeenNthCalledWith(1, \"moleculer.request.active\", {\n          action: \"posts.find\",\n          service: \"v2.posts\",\n          type: \"remote\",\n          caller: \"users.list\"\n        });\n      });\n    });","file":"unit/middlewares/metrics.spec.js","skipped":false,"dir":"test"},{"name":"should update local request metrics events if handler is rejected","suites":["Test MetricsMiddleware","Test localAction & remoteAction"],"updatePoint":{"line":164,"column":73},"line":164,"code":"    it(\"should update local request metrics events if handler is rejected\", () => {\n      const error = new MoleculerError(\"Something went wrong\", 503, \"WENT_WRONG\", {\n        a: 5\n      });\n      const handler = jest.fn(() => Promise.reject(error));\n      broker.metrics.increment.mockClear();\n      broker.metrics.decrement.mockClear();\n      broker.metrics.timer.mockClear();\n      const newHandler = mw.localAction.call(broker, handler, action);\n      const ctx = Context.create(broker, endpoint);\n      ctx.caller = \"users.list\";\n      return newHandler(ctx).then(protectReject).catch(err => {\n        expect(err).toBe(error);\n        expect(broker.metrics.increment).toHaveBeenCalledTimes(4);\n        expect(broker.metrics.increment).toHaveBeenNthCalledWith(1, \"moleculer.request.total\", {\n          action: \"posts.find\",\n          service: \"v2.posts\",\n          caller: \"users.list\",\n          type: \"local\"\n        });\n        expect(broker.metrics.increment).toHaveBeenNthCalledWith(2, \"moleculer.request.active\", {\n          action: \"posts.find\",\n          service: \"v2.posts\",\n          caller: \"users.list\",\n          type: \"local\"\n        });\n        expect(broker.metrics.increment).toHaveBeenNthCalledWith(3, \"moleculer.request.levels\", {\n          action: \"posts.find\",\n          service: \"v2.posts\",\n          caller: \"users.list\",\n          level: 1\n        });\n        expect(broker.metrics.timer).toHaveBeenCalledTimes(1);\n        expect(broker.metrics.timer).toHaveBeenNthCalledWith(1, \"moleculer.request.time\", {\n          action: \"posts.find\",\n          service: \"v2.posts\",\n          caller: \"users.list\",\n          type: \"local\"\n        });\n        expect(handler).toHaveBeenCalledTimes(1);\n        expect(broker.metrics.decrement).toHaveBeenCalledTimes(1);\n        expect(broker.metrics.decrement).toHaveBeenNthCalledWith(1, \"moleculer.request.active\", {\n          action: \"posts.find\",\n          service: \"v2.posts\",\n          caller: \"users.list\",\n          type: \"local\"\n        });\n        expect(broker.metrics.increment).toHaveBeenNthCalledWith(4, \"moleculer.request.error.total\", {\n          action: \"posts.find\",\n          service: \"v2.posts\",\n          type: \"local\",\n          caller: \"users.list\",\n          errorName: \"MoleculerError\",\n          errorCode: 503,\n          errorType: \"WENT_WRONG\"\n        });\n      });\n    });","file":"unit/middlewares/metrics.spec.js","skipped":false,"dir":"test"},{"name":"should update remote request metrics events if handler is rejected","suites":["Test MetricsMiddleware","Test localAction & remoteAction"],"updatePoint":{"line":222,"column":74},"line":222,"code":"    it(\"should update remote request metrics events if handler is rejected\", () => {\n      const error = new MoleculerError(\"Something went wrong\", 503, \"WENT_WRONG\", {\n        a: 5\n      });\n      const handler = jest.fn(() => Promise.reject(error));\n      broker.metrics.increment.mockClear();\n      broker.metrics.decrement.mockClear();\n      broker.metrics.timer.mockClear();\n      const newHandler = mw.remoteAction.call(broker, handler, action);\n      const ctx = Context.create(broker, endpoint);\n      ctx.caller = \"users.list\";\n      return newHandler(ctx).then(protectReject).catch(err => {\n        expect(err).toBe(error);\n        expect(broker.metrics.increment).toHaveBeenCalledTimes(4);\n        expect(broker.metrics.increment).toHaveBeenNthCalledWith(1, \"moleculer.request.total\", {\n          action: \"posts.find\",\n          service: \"v2.posts\",\n          caller: \"users.list\",\n          type: \"remote\"\n        });\n        expect(broker.metrics.increment).toHaveBeenNthCalledWith(2, \"moleculer.request.active\", {\n          action: \"posts.find\",\n          service: \"v2.posts\",\n          caller: \"users.list\",\n          type: \"remote\"\n        });\n        expect(broker.metrics.increment).toHaveBeenNthCalledWith(3, \"moleculer.request.levels\", {\n          action: \"posts.find\",\n          service: \"v2.posts\",\n          caller: \"users.list\",\n          level: 1\n        });\n        expect(broker.metrics.timer).toHaveBeenCalledTimes(1);\n        expect(broker.metrics.timer).toHaveBeenNthCalledWith(1, \"moleculer.request.time\", {\n          action: \"posts.find\",\n          service: \"v2.posts\",\n          caller: \"users.list\",\n          type: \"remote\"\n        });\n        expect(handler).toHaveBeenCalledTimes(1);\n        expect(broker.metrics.decrement).toHaveBeenCalledTimes(1);\n        expect(broker.metrics.decrement).toHaveBeenNthCalledWith(1, \"moleculer.request.active\", {\n          action: \"posts.find\",\n          service: \"v2.posts\",\n          caller: \"users.list\",\n          type: \"remote\"\n        });\n        expect(broker.metrics.increment).toHaveBeenNthCalledWith(4, \"moleculer.request.error.total\", {\n          action: \"posts.find\",\n          service: \"v2.posts\",\n          type: \"remote\",\n          caller: \"users.list\",\n          errorName: \"MoleculerError\",\n          errorCode: 503,\n          errorType: \"WENT_WRONG\"\n        });\n      });\n    });","file":"unit/middlewares/metrics.spec.js","skipped":false,"dir":"test"},{"name":"should update event handler metrics events","suites":["Test MetricsMiddleware","Test localEvent"],"updatePoint":{"line":288,"column":50},"line":288,"code":"    it(\"should update event handler metrics events\", () => {\n      handler.mockClear();\n      broker.isMetricsEnabled = jest.fn(() => true);\n      broker.metrics.increment.mockClear();\n      broker.metrics.decrement.mockClear();\n      broker.metrics.timer.mockClear();\n      const newHandler = mw.localEvent.call(broker, handler, event);\n      const ctx = Context.create(broker, {}, {\n        a: 5\n      });\n      ctx.eventName = \"user.created\";\n      ctx.eventGroup = \"\";\n      ctx.caller = \"posts\";\n      return newHandler(ctx).catch(protectReject).then(() => {\n        expect(broker.metrics.increment).toHaveBeenCalledTimes(2);\n        expect(broker.metrics.increment).toHaveBeenNthCalledWith(1, \"moleculer.event.received.total\", {\n          event: \"user.created\",\n          service: \"posts\",\n          group: \"users\",\n          caller: \"posts\"\n        });\n        expect(broker.metrics.increment).toHaveBeenNthCalledWith(2, \"moleculer.event.received.active\", {\n          event: \"user.created\",\n          service: \"posts\",\n          group: \"users\",\n          caller: \"posts\"\n        });\n        expect(broker.metrics.timer).toHaveBeenCalledTimes(1);\n        expect(broker.metrics.timer).toHaveBeenNthCalledWith(1, \"moleculer.event.received.time\", {\n          event: \"user.created\",\n          service: \"posts\",\n          group: \"users\",\n          caller: \"posts\"\n        });\n        expect(handler).toHaveBeenCalledTimes(1);\n        expect(handler).toHaveBeenCalledWith(ctx);\n        expect(broker.metrics.decrement).toHaveBeenCalledTimes(1);\n        expect(broker.metrics.decrement).toHaveBeenNthCalledWith(1, \"moleculer.event.received.active\", {\n          event: \"user.created\",\n          service: \"posts\",\n          group: \"users\",\n          caller: \"posts\"\n        });\n      });\n    });","file":"unit/middlewares/metrics.spec.js","skipped":false,"dir":"test"},{"name":"should update event handler metrics events if handler is rejected","suites":["Test MetricsMiddleware","Test localEvent"],"updatePoint":{"line":333,"column":73},"line":333,"code":"    it(\"should update event handler metrics events if handler is rejected\", () => {\n      const error = new MoleculerError(\"Something went wrong\", 503, \"WENT_WRONG\", {\n        a: 5\n      });\n      const handler = jest.fn(() => Promise.reject(error));\n      broker.metrics.increment.mockClear();\n      broker.metrics.decrement.mockClear();\n      broker.metrics.timer.mockClear();\n      const newHandler = mw.localEvent.call(broker, handler, event);\n      const ctx = Context.create(broker, {}, {\n        a: 5\n      });\n      ctx.eventName = \"user.created\";\n      ctx.eventGroup = \"\";\n      ctx.caller = \"posts\";\n      return newHandler(ctx).then(protectReject).catch(err => {\n        expect(err).toBe(error);\n        expect(broker.metrics.increment).toHaveBeenCalledTimes(3);\n        expect(broker.metrics.increment).toHaveBeenNthCalledWith(1, \"moleculer.event.received.total\", {\n          event: \"user.created\",\n          service: \"posts\",\n          group: \"users\",\n          caller: \"posts\"\n        });\n        expect(broker.metrics.increment).toHaveBeenNthCalledWith(2, \"moleculer.event.received.active\", {\n          event: \"user.created\",\n          service: \"posts\",\n          group: \"users\",\n          caller: \"posts\"\n        });\n        expect(broker.metrics.timer).toHaveBeenCalledTimes(1);\n        expect(broker.metrics.timer).toHaveBeenNthCalledWith(1, \"moleculer.event.received.time\", {\n          event: \"user.created\",\n          service: \"posts\",\n          group: \"users\",\n          caller: \"posts\"\n        });\n        expect(handler).toHaveBeenCalledTimes(1);\n        expect(broker.metrics.decrement).toHaveBeenCalledTimes(1);\n        expect(broker.metrics.decrement).toHaveBeenNthCalledWith(1, \"moleculer.event.received.active\", {\n          event: \"user.created\",\n          service: \"posts\",\n          group: \"users\",\n          caller: \"posts\"\n        });\n        expect(broker.metrics.increment).toHaveBeenNthCalledWith(3, \"moleculer.event.received.error.total\", {\n          event: \"user.created\",\n          service: \"posts\",\n          group: \"users\",\n          caller: \"posts\",\n          errorName: \"MoleculerError\",\n          errorCode: 503,\n          errorType: \"WENT_WRONG\"\n        });\n      });\n    });","file":"unit/middlewares/metrics.spec.js","skipped":false,"dir":"test"},{"name":"should not wrap handler if metrics is disabled","suites":["Test MetricsMiddleware","Test localEvent"],"updatePoint":{"line":389,"column":54},"line":389,"code":"    it(\"should not wrap handler if metrics is disabled\", () => {\n      handler.mockClear();\n      broker.isMetricsEnabled = jest.fn(() => false);\n      broker.metrics.increment.mockClear();\n      const newHandler = mw.localEvent.call(broker, handler, event);\n      const ctx = Context.create(broker, {}, {\n        a: 5\n      });\n      ctx.eventName = \"user.created\";\n      ctx.eventGroup = \"\";\n      newHandler(ctx);\n      expect(broker.metrics.increment).toHaveBeenCalledTimes(0);\n      expect(handler).toHaveBeenCalledTimes(1);\n      expect(handler).toHaveBeenCalledWith(ctx);\n    });","file":"unit/middlewares/metrics.spec.js","skipped":false,"dir":"test"},{"name":"should update event handler metrics events","suites":["Test MetricsMiddleware","Test emit"],"updatePoint":{"line":412,"column":50},"line":412,"code":"    it(\"should update event handler metrics events\", () => {\n      handler.mockClear();\n      broker.isMetricsEnabled = jest.fn(() => true);\n      broker.metrics.increment.mockClear();\n      const newHandler = mw.emit.call(broker, handler, event);\n      newHandler(\"user.created\", {\n        a: 5\n      }, [\"payment\", \"mail\"]);\n      expect(broker.metrics.increment).toHaveBeenCalledTimes(1);\n      expect(broker.metrics.increment).toHaveBeenNthCalledWith(1, \"moleculer.event.emit.total\", {\n        event: \"user.created\"\n      });\n      expect(handler).toHaveBeenCalledTimes(1);\n      expect(handler).toHaveBeenCalledWith(\"user.created\", {\n        a: 5\n      }, [\"payment\", \"mail\"]);\n    });","file":"unit/middlewares/metrics.spec.js","skipped":false,"dir":"test"},{"name":"should not wrap handler if metrics is disabled","suites":["Test MetricsMiddleware","Test emit"],"updatePoint":{"line":429,"column":54},"line":429,"code":"    it(\"should not wrap handler if metrics is disabled\", () => {\n      handler.mockClear();\n      broker.isMetricsEnabled = jest.fn(() => false);\n      broker.metrics.increment.mockClear();\n      const newHandler = mw.emit.call(broker, handler, event);\n      newHandler(\"user.created\", {\n        a: 5\n      }, [\"payment\", \"mail\"]);\n      expect(broker.metrics.increment).toHaveBeenCalledTimes(0);\n      expect(handler).toHaveBeenCalledTimes(1);\n      expect(handler).toHaveBeenCalledWith(\"user.created\", {\n        a: 5\n      }, [\"payment\", \"mail\"]);\n    });","file":"unit/middlewares/metrics.spec.js","skipped":false,"dir":"test"},{"name":"should update event handler metrics events","suites":["Test MetricsMiddleware","Test broadcast"],"updatePoint":{"line":451,"column":50},"line":451,"code":"    it(\"should update event handler metrics events\", () => {\n      handler.mockClear();\n      broker.isMetricsEnabled = jest.fn(() => true);\n      broker.metrics.increment.mockClear();\n      const newHandler = mw.broadcast.call(broker, handler, event);\n      newHandler(\"user.created\", {\n        a: 5\n      }, [\"payment\", \"mail\"]);\n      expect(broker.metrics.increment).toHaveBeenCalledTimes(1);\n      expect(broker.metrics.increment).toHaveBeenNthCalledWith(1, \"moleculer.event.broadcast.total\", {\n        event: \"user.created\"\n      });\n      expect(handler).toHaveBeenCalledTimes(1);\n      expect(handler).toHaveBeenCalledWith(\"user.created\", {\n        a: 5\n      }, [\"payment\", \"mail\"]);\n    });","file":"unit/middlewares/metrics.spec.js","skipped":false,"dir":"test"},{"name":"should not wrap handler if metrics is disabled","suites":["Test MetricsMiddleware","Test broadcast"],"updatePoint":{"line":468,"column":54},"line":468,"code":"    it(\"should not wrap handler if metrics is disabled\", () => {\n      handler.mockClear();\n      broker.isMetricsEnabled = jest.fn(() => false);\n      broker.metrics.increment.mockClear();\n      const newHandler = mw.broadcast.call(broker, handler, event);\n      newHandler(\"user.created\", {\n        a: 5\n      }, [\"payment\", \"mail\"]);\n      expect(broker.metrics.increment).toHaveBeenCalledTimes(0);\n      expect(handler).toHaveBeenCalledTimes(1);\n      expect(handler).toHaveBeenCalledWith(\"user.created\", {\n        a: 5\n      }, [\"payment\", \"mail\"]);\n    });","file":"unit/middlewares/metrics.spec.js","skipped":false,"dir":"test"},{"name":"should update event handler metrics events","suites":["Test MetricsMiddleware","Test broadcastLocal"],"updatePoint":{"line":490,"column":50},"line":490,"code":"    it(\"should update event handler metrics events\", () => {\n      handler.mockClear();\n      broker.isMetricsEnabled = jest.fn(() => true);\n      broker.metrics.increment.mockClear();\n      const newHandler = mw.broadcastLocal.call(broker, handler, event);\n      newHandler(\"user.created\", {\n        a: 5\n      }, [\"payment\", \"mail\"]);\n      expect(broker.metrics.increment).toHaveBeenCalledTimes(1);\n      expect(broker.metrics.increment).toHaveBeenNthCalledWith(1, \"moleculer.event.broadcast-local.total\", {\n        event: \"user.created\"\n      });\n      expect(handler).toHaveBeenCalledTimes(1);\n      expect(handler).toHaveBeenCalledWith(\"user.created\", {\n        a: 5\n      }, [\"payment\", \"mail\"]);\n    });","file":"unit/middlewares/metrics.spec.js","skipped":false,"dir":"test"},{"name":"should not wrap handler if metrics is disabled","suites":["Test MetricsMiddleware","Test broadcastLocal"],"updatePoint":{"line":507,"column":54},"line":507,"code":"    it(\"should not wrap handler if metrics is disabled\", () => {\n      handler.mockClear();\n      broker.isMetricsEnabled = jest.fn(() => false);\n      broker.metrics.increment.mockClear();\n      const newHandler = mw.broadcastLocal.call(broker, handler, event);\n      newHandler(\"user.created\", {\n        a: 5\n      }, [\"payment\", \"mail\"]);\n      expect(broker.metrics.increment).toHaveBeenCalledTimes(0);\n      expect(handler).toHaveBeenCalledTimes(1);\n      expect(handler).toHaveBeenCalledWith(\"user.created\", {\n        a: 5\n      }, [\"payment\", \"mail\"]);\n    });","file":"unit/middlewares/metrics.spec.js","skipped":false,"dir":"test"},{"name":"should update metrics values","suites":["Test MetricsMiddleware","Test transitPublish"],"updatePoint":{"line":535,"column":36},"line":535,"code":"    it(\"should update metrics values\", () => {\n      handler.mockClear();\n      broker.isMetricsEnabled = jest.fn(() => true);\n      broker.metrics.increment.mockClear();\n      const newHandler = mw.transitPublish.call(fakeTransit, handler);\n      const packet = {\n        type: \"REQUEST\"\n      };\n      newHandler.call(fakeTransit, packet);\n      expect(broker.metrics.increment).toHaveBeenCalledTimes(3);\n      expect(broker.metrics.increment).toHaveBeenNthCalledWith(1, \"moleculer.transit.publish.total\", {\n        type: \"REQUEST\"\n      });\n      expect(broker.metrics.increment).toHaveBeenNthCalledWith(2, \"moleculer.transit.requests.active\", null, 3);\n      expect(broker.metrics.increment).toHaveBeenNthCalledWith(3, \"moleculer.transit.streams.send.active\", null, 6);\n      expect(handler).toHaveBeenCalledTimes(1);\n      expect(handler).toHaveBeenCalledWith(packet);\n    });","file":"unit/middlewares/metrics.spec.js","skipped":false,"dir":"test"},{"name":"should not wrap handler if metrics is disabled","suites":["Test MetricsMiddleware","Test transitPublish"],"updatePoint":{"line":553,"column":54},"line":553,"code":"    it(\"should not wrap handler if metrics is disabled\", () => {\n      handler.mockClear();\n      broker.isMetricsEnabled = jest.fn(() => false);\n      broker.metrics.increment.mockClear();\n      const newHandler = mw.transitPublish.call(fakeTransit, handler);\n      const packet = {\n        type: \"REQUEST\"\n      };\n      newHandler(packet);\n      expect(broker.metrics.increment).toHaveBeenCalledTimes(0);\n      expect(handler).toHaveBeenCalledTimes(1);\n      expect(handler).toHaveBeenCalledWith(packet);\n    });","file":"unit/middlewares/metrics.spec.js","skipped":false,"dir":"test"},{"name":"should update metrics values","suites":["Test MetricsMiddleware","Test transitMessageHandler"],"updatePoint":{"line":570,"column":36},"line":570,"code":"    it(\"should update metrics values\", () => {\n      handler.mockClear();\n      broker.isMetricsEnabled = jest.fn(() => true);\n      broker.metrics.increment.mockClear();\n      const newHandler = mw.transitMessageHandler.call(fakeTransit, handler);\n      const packet = {};\n      newHandler.call(fakeTransit, \"RESPONSE\", packet);\n      expect(broker.metrics.increment).toHaveBeenCalledTimes(1);\n      expect(broker.metrics.increment).toHaveBeenNthCalledWith(1, \"moleculer.transit.receive.total\", {\n        type: \"RESPONSE\"\n      });\n      expect(handler).toHaveBeenCalledTimes(1);\n      expect(handler).toHaveBeenCalledWith(\"RESPONSE\", packet);\n    });","file":"unit/middlewares/metrics.spec.js","skipped":false,"dir":"test"},{"name":"should not wrap handler if metrics is disabled","suites":["Test MetricsMiddleware","Test transitMessageHandler"],"updatePoint":{"line":584,"column":54},"line":584,"code":"    it(\"should not wrap handler if metrics is disabled\", () => {\n      handler.mockClear();\n      broker.isMetricsEnabled = jest.fn(() => false);\n      broker.metrics.increment.mockClear();\n      const newHandler = mw.transitMessageHandler.call(fakeTransit, handler);\n      const packet = {};\n      newHandler.call(fakeTransit, \"RESPONSE\", packet);\n      expect(broker.metrics.increment).toHaveBeenCalledTimes(0);\n      expect(handler).toHaveBeenCalledTimes(1);\n      expect(handler).toHaveBeenCalledWith(\"RESPONSE\", packet);\n    });","file":"unit/middlewares/metrics.spec.js","skipped":false,"dir":"test"},{"name":"should update metrics values","suites":["Test MetricsMiddleware","Test transporterSend"],"updatePoint":{"line":599,"column":36},"line":599,"code":"    it(\"should update metrics values\", () => {\n      handler.mockClear();\n      broker.isMetricsEnabled = jest.fn(() => true);\n      broker.metrics.increment.mockClear();\n      const newHandler = mw.transporterSend.call(fakeTransit, handler);\n      const data = {\n        length: 200\n      };\n      const meta = {\n        user: \"John\"\n      };\n      newHandler.call(fakeTransit, \"MOL-TOPIC\", data, meta);\n      expect(broker.metrics.increment).toHaveBeenCalledTimes(2);\n      expect(broker.metrics.increment).toHaveBeenNthCalledWith(1, \"moleculer.transporter.packets.sent.total\");\n      expect(broker.metrics.increment).toHaveBeenNthCalledWith(2, \"moleculer.transporter.packets.sent.bytes\", null, 200);\n      expect(handler).toHaveBeenCalledTimes(1);\n      expect(handler).toHaveBeenCalledWith(\"MOL-TOPIC\", data, meta);\n    });","file":"unit/middlewares/metrics.spec.js","skipped":false,"dir":"test"},{"name":"should not wrap handler if metrics is disabled","suites":["Test MetricsMiddleware","Test transporterSend"],"updatePoint":{"line":617,"column":54},"line":617,"code":"    it(\"should not wrap handler if metrics is disabled\", () => {\n      handler.mockClear();\n      broker.isMetricsEnabled = jest.fn(() => false);\n      broker.metrics.increment.mockClear();\n      const newHandler = mw.transporterSend.call(fakeTransit, handler);\n      const data = {\n        length: 200\n      };\n      const meta = {\n        user: \"John\"\n      };\n      newHandler.call(fakeTransit, \"MOL-TOPIC\", data, meta);\n      expect(broker.metrics.increment).toHaveBeenCalledTimes(0);\n      expect(handler).toHaveBeenCalledTimes(1);\n      expect(handler).toHaveBeenCalledWith(\"MOL-TOPIC\", data, meta);\n    });","file":"unit/middlewares/metrics.spec.js","skipped":false,"dir":"test"},{"name":"should update metrics values","suites":["Test MetricsMiddleware","Test transporterReceive"],"updatePoint":{"line":637,"column":36},"line":637,"code":"    it(\"should update metrics values\", () => {\n      handler.mockClear();\n      broker.isMetricsEnabled = jest.fn(() => true);\n      broker.metrics.increment.mockClear();\n      const newHandler = mw.transporterReceive.call(fakeTransit, handler);\n      const data = {\n        length: 200\n      };\n      const s = {\n        user: \"John\"\n      };\n      newHandler.call(fakeTransit, \"MOL-TOPIC\", data, s);\n      expect(broker.metrics.increment).toHaveBeenCalledTimes(2);\n      expect(broker.metrics.increment).toHaveBeenNthCalledWith(1, \"moleculer.transporter.packets.received.total\");\n      expect(broker.metrics.increment).toHaveBeenNthCalledWith(2, \"moleculer.transporter.packets.received.bytes\", null, 200);\n      expect(handler).toHaveBeenCalledTimes(1);\n      expect(handler).toHaveBeenCalledWith(\"MOL-TOPIC\", data, s);\n    });","file":"unit/middlewares/metrics.spec.js","skipped":false,"dir":"test"},{"name":"should not wrap handler if metrics is disabled","suites":["Test MetricsMiddleware","Test transporterReceive"],"updatePoint":{"line":655,"column":54},"line":655,"code":"    it(\"should not wrap handler if metrics is disabled\", () => {\n      handler.mockClear();\n      broker.isMetricsEnabled = jest.fn(() => false);\n      broker.metrics.increment.mockClear();\n      const newHandler = mw.transporterReceive.call(fakeTransit, handler);\n      const data = {\n        length: 200\n      };\n      const s = {\n        user: \"John\"\n      };\n      newHandler.call(fakeTransit, \"MOL-TOPIC\", data, s);\n      expect(broker.metrics.increment).toHaveBeenCalledTimes(0);\n      expect(handler).toHaveBeenCalledTimes(1);\n      expect(handler).toHaveBeenCalledWith(\"MOL-TOPIC\", data, s);\n    });","file":"unit/middlewares/metrics.spec.js","skipped":false,"dir":"test"},{"name":"should register hooks","suites":["Test RetryMiddleware"],"updatePoint":{"line":44,"column":27},"line":44,"code":"  it(\"should register hooks\", () => {\n    expect(mw.created).toBeInstanceOf(Function);\n    expect(mw.localAction).toBeInstanceOf(Function);\n    expect(mw.remoteAction).toBeInstanceOf(Function);\n  });","file":"unit/middlewares/retry.spec.js","skipped":false,"dir":"test"},{"name":"should not wrap handler if retryPolicy is disabled","suites":["Test RetryMiddleware"],"updatePoint":{"line":49,"column":56},"line":49,"code":"  it(\"should not wrap handler if retryPolicy is disabled\", () => {\n    broker.options.retryPolicy.enabled = false;\n    const newHandler = mw.localAction.call(broker, handler, action);\n    expect(newHandler).toBe(handler);\n    const newHandler2 = mw.remoteAction.call(broker, handler, action);\n    expect(newHandler2).toBe(handler);\n  });","file":"unit/middlewares/retry.spec.js","skipped":false,"dir":"test"},{"name":"should wrap handler if retryPolicy is enabled","suites":["Test RetryMiddleware"],"updatePoint":{"line":56,"column":51},"line":56,"code":"  it(\"should wrap handler if retryPolicy is enabled\", () => {\n    broker.options.retryPolicy.enabled = true;\n    const newHandler = mw.localAction.call(broker, handler, action);\n    expect(newHandler).not.toBe(handler);\n    const newHandler2 = mw.remoteAction.call(broker, handler, action);\n    expect(newHandler2).not.toBe(handler);\n  });","file":"unit/middlewares/retry.spec.js","skipped":false,"dir":"test"},{"name":"should register metrics","suites":["Test RetryMiddleware"],"updatePoint":{"line":63,"column":29},"line":63,"code":"  it(\"should register metrics\", () => {\n    mw.created(broker);\n    expect(broker.metrics.register).toHaveBeenCalledTimes(1);\n    expect(broker.metrics.register).toHaveBeenCalledWith({\n      type: \"counter\",\n      name: \"moleculer.request.retry.attempts.total\",\n      labelNames: [\"service\", \"action\"],\n      description: \"Number of retries\",\n      rate: true\n    });\n  });","file":"unit/middlewares/retry.spec.js","skipped":false,"dir":"test"},{"name":"should retry","suites":["Test RetryMiddleware"],"updatePoint":{"line":74,"column":18},"line":74,"code":"  it(\"should retry\", () => {\n    broker.metrics.increment.mockClear();\n    broker.options.retryPolicy.enabled = true;\n    broker.options.retryPolicy.retries = 3;\n    broker.options.retryPolicy.check = jest.fn(() => true);\n    let error = new MoleculerRetryableError(\"Retryable error\");\n    let handler = jest.fn(() => Promise.reject(error));\n    broker.Promise.delay = jest.fn(() => Promise.resolve());\n    const newHandler = mw.localAction.call(broker, handler, action);\n    const ctx = Context.create(broker, endpoint);\n    ctx.setParams({\n      offset: 10\n    });\n    ctx.span = {\n      setError: jest.fn(),\n      addTags: jest.fn()\n    };\n    ctx.finishSpan = jest.fn();\n    broker.call = jest.fn(() => Promise.resolve(\"Next call\"));\n    return newHandler(ctx).catch(protectReject).then(res => {\n      expect(res).toBe(\"Next call\");\n      expect(ctx.id).toBe(\"1\");\n      expect(ctx._retryAttempts).toBe(1);\n      expect(handler).toHaveBeenCalledTimes(1);\n      expect(broker.call).toHaveBeenCalledTimes(1);\n      expect(broker.call).toHaveBeenCalledWith(\"posts.find\", {\n        offset: 10\n      }, {\n        ctx: expect.any(Context)\n      });\n      expect(broker.call.mock.calls[0][2].ctx.id).toBe(\"2\");\n      expect(broker.call.mock.calls[0][2].ctx._retryAttempts).toBe(1);\n      expect(ctx.span.setError).toHaveBeenCalledTimes(1);\n      expect(ctx.span.setError).toHaveBeenCalledWith(error);\n      expect(ctx.span.addTags).toHaveBeenCalledTimes(1);\n      expect(ctx.span.addTags).toHaveBeenCalledWith({\n        retryAttempts: 1\n      });\n      expect(ctx.finishSpan).toHaveBeenCalledTimes(1);\n      expect(ctx.finishSpan).toHaveBeenCalledWith(ctx.span);\n      expect(broker.Promise.delay).toHaveBeenCalledTimes(1);\n      expect(broker.Promise.delay).toHaveBeenCalledWith(100);\n      expect(broker.options.retryPolicy.check).toHaveBeenCalledTimes(1);\n      expect(broker.options.retryPolicy.check).toHaveBeenCalledWith(error);\n      expect(broker.metrics.increment).toHaveBeenCalledTimes(1);\n      expect(broker.metrics.increment).toHaveBeenCalledWith(\"moleculer.request.retry.attempts.total\", {\n        service: \"posts\",\n        action: \"posts.find\"\n      });\n    });\n  });","file":"unit/middlewares/retry.spec.js","skipped":false,"dir":"test"},{"name":"should retry private action","suites":["Test RetryMiddleware"],"updatePoint":{"line":125,"column":33},"line":125,"code":"  it(\"should retry private action\", () => {\n    broker.metrics.increment.mockClear();\n    broker.options.retryPolicy.enabled = true;\n    broker.options.retryPolicy.retries = 3;\n    broker.options.retryPolicy.check = jest.fn(() => true);\n    let error = new MoleculerRetryableError(\"Retryable error\");\n    let handler = jest.fn(() => Promise.reject(error));\n    broker.Promise.delay = jest.fn(() => Promise.resolve());\n    let action = {\n      name: \"posts.list\",\n      rawName: \"list\",\n      visibility: \"private\",\n      service: {\n        fullName: \"posts\",\n        actions: {\n          list: jest.fn(() => Promise.resolve(\"Next direct call\"))\n        }\n      }\n    };\n    const newHandler = mw.localAction.call(broker, handler, action);\n    const ctx = Context.create(broker, {\n      action,\n      node: {\n        id: broker.nodeID\n      }\n    });\n    ctx.setParams({\n      limit: 5\n    });\n    broker.call = jest.fn();\n    return newHandler(ctx).catch(protectReject).then(res => {\n      expect(res).toBe(\"Next direct call\");\n      expect(ctx._retryAttempts).toBe(1);\n      expect(ctx.id).toBe(\"3\");\n      expect(handler).toHaveBeenCalledTimes(1);\n      expect(broker.call).toHaveBeenCalledTimes(0);\n      expect(action.service.actions.list).toHaveBeenCalledTimes(1);\n      expect(action.service.actions.list).toHaveBeenCalledWith({\n        limit: 5\n      }, {\n        ctx: { ...ctx,\n          id: \"4\"\n        }\n      });\n      expect(broker.Promise.delay).toHaveBeenCalledTimes(1);\n      expect(broker.Promise.delay).toHaveBeenCalledWith(100);\n      expect(broker.options.retryPolicy.check).toHaveBeenCalledTimes(1);\n      expect(broker.options.retryPolicy.check).toHaveBeenCalledWith(error);\n      expect(broker.metrics.increment).toHaveBeenCalledTimes(1);\n      expect(broker.metrics.increment).toHaveBeenCalledWith(\"moleculer.request.retry.attempts.total\", {\n        service: \"posts\",\n        action: \"posts.list\"\n      });\n    });\n  });","file":"unit/middlewares/retry.spec.js","skipped":false,"dir":"test"},{"name":"should not retry if attempts reach the limit","suites":["Test RetryMiddleware"],"updatePoint":{"line":180,"column":50},"line":180,"code":"  it(\"should not retry if attempts reach the limit\", () => {\n    broker.metrics.increment.mockClear();\n    broker.options.retryPolicy.enabled = true;\n    broker.options.retryPolicy.retries = 3;\n    broker.options.retryPolicy.check = jest.fn(() => true);\n    let error = new MoleculerRetryableError(\"Retryable error\");\n    let handler = jest.fn(() => Promise.reject(error));\n    broker.Promise.delay = jest.fn(() => Promise.resolve());\n    const newHandler = mw.localAction.call(broker, handler, action);\n    const ctx = Context.create(broker, endpoint);\n    ctx._retryAttempts = 3;\n    broker.call = jest.fn(() => Promise.resolve(\"Next call\"));\n    return newHandler(ctx).then(protectReject).catch(err => {\n      expect(err).toBe(error);\n      expect(handler).toHaveBeenCalledTimes(1);\n      expect(broker.call).toHaveBeenCalledTimes(0);\n      expect(broker.Promise.delay).toHaveBeenCalledTimes(0);\n      expect(broker.metrics.increment).toHaveBeenCalledTimes(1);\n      expect(broker.metrics.increment).toHaveBeenCalledWith(\"moleculer.request.retry.attempts.total\", {\n        service: \"posts\",\n        action: \"posts.find\"\n      });\n    });\n  });","file":"unit/middlewares/retry.spec.js","skipped":false,"dir":"test"},{"name":"should not retry if check returns false","suites":["Test RetryMiddleware"],"updatePoint":{"line":204,"column":45},"line":204,"code":"  it(\"should not retry if check returns false\", () => {\n    broker.metrics.increment.mockClear();\n    broker.options.retryPolicy.check = jest.fn(() => false);\n    let error = new MoleculerRetryableError(\"Retryable error\");\n    let handler = jest.fn(() => Promise.reject(error));\n    broker.Promise.delay = jest.fn(() => Promise.resolve());\n    const newHandler = mw.localAction.call(broker, handler, action);\n    const ctx = Context.create(broker, endpoint);\n    broker.call = jest.fn(() => Promise.resolve(\"Next call\"));\n    return newHandler(ctx).then(protectReject).catch(err => {\n      expect(err).toBe(error);\n      expect(handler).toHaveBeenCalledTimes(1);\n      expect(broker.call).toHaveBeenCalledTimes(0);\n      expect(broker.Promise.delay).toHaveBeenCalledTimes(0);\n      expect(broker.metrics.increment).toHaveBeenCalledTimes(0);\n    });\n  });","file":"unit/middlewares/retry.spec.js","skipped":false,"dir":"test"},{"name":"should not retry if the call is a remote received call from other node","suites":["Test RetryMiddleware"],"updatePoint":{"line":221,"column":76},"line":221,"code":"  it(\"should not retry if the call is a remote received call from other node\", () => {\n    broker.metrics.increment.mockClear();\n    broker.options.retryPolicy.enabled = true;\n    broker.options.retryPolicy.retries = 3;\n    broker.options.retryPolicy.check = jest.fn(() => true);\n    let error = new MoleculerRetryableError(\"Retryable error\");\n    let handler = jest.fn(() => Promise.reject(error));\n    broker.Promise.delay = jest.fn(() => Promise.resolve());\n    const newHandler = mw.localAction.call(broker, handler, action);\n    endpoint.local = true;\n    const ctx = Context.create(broker, endpoint);\n    ctx.nodeID = \"server-2\";\n    ctx.setParams({\n      offset: 10\n    });\n    broker.call = jest.fn(() => Promise.resolve(\"Next call\"));\n    return newHandler(ctx).then(protectReject).catch(err => {\n      expect(err).toBe(error);\n      expect(handler).toHaveBeenCalledTimes(1);\n      expect(broker.call).toHaveBeenCalledTimes(0);\n      expect(broker.Promise.delay).toHaveBeenCalledTimes(0);\n      expect(broker.metrics.increment).toHaveBeenCalledTimes(0);\n    });\n  });","file":"unit/middlewares/retry.spec.js","skipped":false,"dir":"test"},{"name":"should register hooks","suites":["Test ThrottleMiddleware"],"updatePoint":{"line":29,"column":27},"line":29,"code":"  it(\"should register hooks\", () => {\n    expect(mw.localEvent).toBeInstanceOf(Function);\n  });","file":"unit/middlewares/throttle.spec.js","skipped":false,"dir":"test"},{"name":"should not wrap handler if throttle is not set","suites":["Test ThrottleMiddleware","Test localEvent"],"updatePoint":{"line":38,"column":54},"line":38,"code":"    it(\"should not wrap handler if throttle is not set\", () => {\n      const newActionHandler = mw.localEvent.call(broker, handler, event);\n      expect(newActionHandler).toBe(handler);\n      event.throttle = 0;\n      const newEventHandler = mw.localEvent.call(broker, handler, event);\n      expect(newEventHandler).toBe(handler);\n    });","file":"unit/middlewares/throttle.spec.js","skipped":false,"dir":"test"},{"name":"should wrap handler if throttle is defined","suites":["Test ThrottleMiddleware","Test localEvent"],"updatePoint":{"line":45,"column":50},"line":45,"code":"    it(\"should wrap handler if throttle is defined\", () => {\n      event.throttle = 5000;\n      const newHandler = mw.localEvent.call(broker, handler, event);\n      expect(newHandler).not.toBe(handler);\n    });","file":"unit/middlewares/throttle.spec.js","skipped":false,"dir":"test"},{"name":"should invoke when event not received in 5 seconds","suites":["Test ThrottleMiddleware","Test localEvent"],"updatePoint":{"line":50,"column":58},"line":50,"code":"    it(\"should invoke when event not received in 5 seconds\", () => {\n      event.throttle = 5000;\n      event.handler.mockClear();\n      const ctx = Context.create(broker, endpoint);\n      const newHandler = mw.localEvent.call(broker, handler, event);\n      expect(event.handler).toBeCalledTimes(0);\n      newHandler(ctx);\n      expect(event.handler).toBeCalledTimes(1);\n      clock.tick(1000);\n      newHandler(ctx);\n      expect(event.handler).toBeCalledTimes(1);\n      clock.tick(2000);\n      newHandler(ctx);\n      expect(event.handler).toBeCalledTimes(1);\n      clock.tick(2000);\n      newHandler(ctx);\n      expect(event.handler).toBeCalledTimes(2);\n      clock.tick(2000);\n      newHandler(ctx);\n      expect(event.handler).toBeCalledTimes(2);\n      clock.tick(3000);\n      newHandler(ctx);\n      expect(event.handler).toBeCalledTimes(3);\n    });","file":"unit/middlewares/throttle.spec.js","skipped":false,"dir":"test"},{"name":"should register hooks","suites":["Test TimeoutMiddleware"],"updatePoint":{"line":38,"column":27},"line":38,"code":"  it(\"should register hooks\", () => {\n    expect(mw.localAction).toBeInstanceOf(Function);\n    expect(mw.remoteAction).toBeInstanceOf(Function);\n  });","file":"unit/middlewares/timeout.spec.js","skipped":false,"dir":"test"},{"name":"should wrap handler","suites":["Test TimeoutMiddleware"],"updatePoint":{"line":42,"column":25},"line":42,"code":"  it(\"should wrap handler\", () => {\n    broker.options.metrics = true;\n    const newHandler = mw.localAction.call(broker, handler, action);\n    expect(newHandler).not.toBe(handler);\n  });","file":"unit/middlewares/timeout.spec.js","skipped":false,"dir":"test"},{"name":"should register metrics","suites":["Test TimeoutMiddleware"],"updatePoint":{"line":47,"column":29},"line":47,"code":"  it(\"should register metrics\", () => {\n    mw.created(broker);\n    expect(broker.metrics.register).toHaveBeenCalledTimes(1);\n    expect(broker.metrics.register).toHaveBeenCalledWith({\n      type: \"counter\",\n      name: \"moleculer.request.timeout.total\",\n      labelNames: [\"service\", \"action\"],\n      description: \"Number of timed out requests\",\n      rate: true\n    });\n  });","file":"unit/middlewares/timeout.spec.js","skipped":false,"dir":"test"},{"name":"should not be timeout if requestTimeout is 0","suites":["Test TimeoutMiddleware"],"updatePoint":{"line":58,"column":50},"line":58,"code":"  it(\"should not be timeout if requestTimeout is 0\", () => {\n    broker.metrics.increment.mockClear();\n    broker.options.requestTimeout = 0;\n    const newHandler = mw.localAction.call(broker, handler, action);\n    const ctx = Context.create(broker, endpoint);\n    return newHandler(ctx).catch(protectReject).then(res => {\n      expect(res).toBe(\"Result\");\n      expect(ctx.options.timeout).toBe(0);\n      expect(handler).toHaveBeenCalledTimes(1);\n      expect(broker.metrics.increment).toHaveBeenCalledTimes(0);\n    });\n  });","file":"unit/middlewares/timeout.spec.js","skipped":false,"dir":"test"},{"name":"should handle timeout from global setting","suites":["Test TimeoutMiddleware"],"updatePoint":{"line":70,"column":47},"line":70,"code":"  it(\"should handle timeout from global setting\", () => {\n    const clock = lolex.install();\n    broker.metrics.increment.mockClear();\n    broker.options.requestTimeout = 5000;\n    let handler = jest.fn(() => broker.Promise.delay(10 * 1000));\n    const newHandler = mw.localAction.call(broker, handler, action);\n    const ctx = Context.create(broker, endpoint);\n    const p = newHandler(ctx);\n    clock.tick(5500);\n    return p.then(protectReject).catch(err => {\n      expect(ctx.startHrTime).toBeDefined();\n      expect(ctx.options.timeout).toBe(5000);\n      expect(handler).toHaveBeenCalledTimes(1);\n      expect(broker.metrics.increment).toHaveBeenCalledTimes(1);\n      expect(broker.metrics.increment).toHaveBeenCalledWith(\"moleculer.request.timeout.total\", {\n        service: \"posts\",\n        action: \"posts.find\"\n      });\n      expect(err).toBeInstanceOf(Error);\n      expect(err).toBeInstanceOf(RequestTimeoutError);\n      expect(err.message).toBe(\"Request is timed out when call 'posts.find' action on 'server-1' node.\");\n      expect(err.data).toEqual({\n        action: \"posts.find\",\n        nodeID: \"server-1\"\n      });\n      clock.uninstall();\n    });\n  });","file":"unit/middlewares/timeout.spec.js","skipped":false,"dir":"test"},{"name":"should handle timeout from action setting","suites":["Test TimeoutMiddleware"],"updatePoint":{"line":98,"column":47},"line":98,"code":"  it(\"should handle timeout from action setting\", () => {\n    const clock = lolex.install();\n    broker.metrics.increment.mockClear();\n    broker.options.requestTimeout = 5000;\n    action.timeout = 4000;\n    let handler = jest.fn(() => broker.Promise.delay(10 * 1000));\n    const newHandler = mw.localAction.call(broker, handler, action);\n    const ctx = Context.create(broker, endpoint);\n    const p = newHandler(ctx);\n    clock.tick(5500);\n    return p.then(protectReject).catch(err => {\n      expect(ctx.startHrTime).toBeDefined();\n      expect(ctx.options.timeout).toBe(4000);\n      expect(handler).toHaveBeenCalledTimes(1);\n      expect(broker.metrics.increment).toHaveBeenCalledTimes(1);\n      expect(broker.metrics.increment).toHaveBeenCalledWith(\"moleculer.request.timeout.total\", {\n        service: \"posts\",\n        action: \"posts.find\"\n      });\n      expect(err).toBeInstanceOf(Error);\n      expect(err).toBeInstanceOf(RequestTimeoutError);\n      expect(err.message).toBe(\"Request is timed out when call 'posts.find' action on 'server-1' node.\");\n      expect(err.data).toEqual({\n        action: \"posts.find\",\n        nodeID: \"server-1\"\n      });\n      clock.uninstall();\n    });\n  });","file":"unit/middlewares/timeout.spec.js","skipped":false,"dir":"test"},{"name":"should handle timeout from Context setting","suites":["Test TimeoutMiddleware"],"updatePoint":{"line":127,"column":48},"line":127,"code":"  it(\"should handle timeout from Context setting\", () => {\n    const clock = lolex.install();\n    broker.metrics.increment.mockClear();\n    broker.options.requestTimeout = 5000;\n    action.timeout = 4000;\n    let handler = jest.fn(() => broker.Promise.delay(10 * 1000));\n    const newHandler = mw.localAction.call(broker, handler, action);\n    const ctx = Context.create(broker, endpoint);\n    ctx.options.timeout = 2000;\n    const p = newHandler(ctx);\n    clock.tick(5500);\n    return p.then(protectReject).catch(err => {\n      expect(ctx.startHrTime).toBeDefined();\n      expect(ctx.options.timeout).toBe(2000);\n      expect(handler).toHaveBeenCalledTimes(1);\n      expect(broker.metrics.increment).toHaveBeenCalledTimes(1);\n      expect(broker.metrics.increment).toHaveBeenCalledWith(\"moleculer.request.timeout.total\", {\n        service: \"posts\",\n        action: \"posts.find\"\n      });\n      expect(err).toBeInstanceOf(Error);\n      expect(err).toBeInstanceOf(RequestTimeoutError);\n      expect(err.message).toBe(\"Request is timed out when call 'posts.find' action on 'server-1' node.\");\n      expect(err.data).toEqual({\n        action: \"posts.find\",\n        nodeID: \"server-1\"\n      });\n      clock.uninstall();\n    });\n  });","file":"unit/middlewares/timeout.spec.js","skipped":false,"dir":"test"},{"name":"should don't touch other errors","suites":["Test TimeoutMiddleware"],"updatePoint":{"line":157,"column":37},"line":157,"code":"  it(\"should don't touch other errors\", () => {\n    broker.metrics.increment.mockClear();\n    let err = new Error(\"Some error\");\n    let handler = jest.fn(() => Promise.reject(err));\n    const newHandler = mw.localAction.call(broker, handler, action);\n    const ctx = Context.create(broker, endpoint);\n    return newHandler(ctx).then(protectReject).catch(res => {\n      expect(ctx.options.timeout).toBe(4000);\n      expect(res).toBe(err);\n      expect(broker.metrics.increment).toHaveBeenCalledTimes(0);\n    });\n  });","file":"unit/middlewares/timeout.spec.js","skipped":false,"dir":"test"},{"name":"should not register hooks if tracing is disabled","suites":["Test TracingMiddleware localAction","Test localAction wrapping"],"updatePoint":{"line":24,"column":56},"line":24,"code":"    it(\"should not register hooks if tracing is disabled\", () => {\n      const mw = Middleware(broker);\n      expect(mw.name).toBe(\"Tracing\");\n      expect(mw.localAction).toBeNull();\n    });","file":"unit/middlewares/tracing.spec.js","skipped":false,"dir":"test"},{"name":"should wrap handler if tracing is enabled","suites":["Test TracingMiddleware localAction","Test localAction wrapping"],"updatePoint":{"line":29,"column":49},"line":29,"code":"    it(\"should wrap handler if tracing is enabled\", () => {\n      broker.options.tracing.enabled = true;\n      broker.tracer.opts.enabled = true;\n      const mw = Middleware(broker);\n      expect(mw.localAction).toBeInstanceOf(Function);\n      const newHandler = mw.localAction.call(broker, handler, action);\n      expect(newHandler).not.toBe(handler);\n    });","file":"unit/middlewares/tracing.spec.js","skipped":false,"dir":"test"},{"name":"should not wrap handler if tracing is disabled in action definition","suites":["Test TracingMiddleware localAction","Test localAction wrapping"],"updatePoint":{"line":37,"column":75},"line":37,"code":"    it(\"should not wrap handler if tracing is disabled in action definition\", () => {\n      action.tracing = false;\n      const mw = Middleware(broker);\n      expect(mw.localAction).toBeInstanceOf(Function);\n      const newHandler = mw.localAction.call(broker, handler, action);\n      expect(newHandler).toBe(handler);\n    });","file":"unit/middlewares/tracing.spec.js","skipped":false,"dir":"test"},{"name":"should not wrap handler if tracing is disabled in action definition","suites":["Test TracingMiddleware localAction","Test localAction wrapping"],"updatePoint":{"line":44,"column":75},"line":44,"code":"    it(\"should not wrap handler if tracing is disabled in action definition\", () => {\n      action.tracing = {\n        enabled: false\n      };\n      const mw = Middleware(broker);\n      expect(mw.localAction).toBeInstanceOf(Function);\n      const newHandler = mw.localAction.call(broker, handler, action);\n      expect(newHandler).toBe(handler);\n    });","file":"unit/middlewares/tracing.spec.js","skipped":false,"dir":"test"},{"name":"should wrap handler if tracing is enabled in action definition","suites":["Test TracingMiddleware localAction","Test localAction wrapping"],"updatePoint":{"line":53,"column":70},"line":53,"code":"    it(\"should wrap handler if tracing is enabled in action definition\", () => {\n      action.tracing = true;\n      const mw = Middleware(broker);\n      expect(mw.localAction).toBeInstanceOf(Function);\n      const newHandler = mw.localAction.call(broker, handler, action);\n      expect(newHandler).not.toBe(handler);\n    });","file":"unit/middlewares/tracing.spec.js","skipped":false,"dir":"test"},{"name":"should wrap handler if tracing is enabled in action definition","suites":["Test TracingMiddleware localAction","Test localAction wrapping"],"updatePoint":{"line":60,"column":70},"line":60,"code":"    it(\"should wrap handler if tracing is enabled in action definition\", () => {\n      action.tracing = {\n        enabled: true\n      };\n      const mw = Middleware(broker);\n      expect(mw.localAction).toBeInstanceOf(Function);\n      const newHandler = mw.localAction.call(broker, handler, action);\n      expect(newHandler).not.toBe(handler);\n    });","file":"unit/middlewares/tracing.spec.js","skipped":false,"dir":"test"},{"name":"should create a span","suites":["Test TracingMiddleware localAction","Test localAction handler"],"updatePoint":{"line":132,"column":28},"line":132,"code":"    it(\"should create a span\", async () => {\n      const mw = Middleware(broker);\n      const newHandler = mw.localAction.call(broker, handler, action);\n      tracer.getCurrentTraceID.mockClear();\n      tracer.getActiveSpanID.mockClear();\n      ctx.startSpan.mockClear();\n      fakeSpan.addTags.mockClear();\n      fakeSpan.setError.mockClear();\n      fakeSpan.finish.mockClear();\n      const res = await newHandler(ctx);\n      expect(res).toBe(result);\n      ctx.params.a = 5;\n      expect(tracer.getCurrentTraceID).toHaveBeenCalledTimes(0);\n      expect(tracer.getActiveSpanID).toHaveBeenCalledTimes(0);\n      expect(ctx.startSpan).toHaveBeenCalledTimes(1);\n      expect(ctx.startSpan).toHaveBeenCalledWith(\"action 'posts.find'\", {\n        id: \"ctx-id\",\n        type: \"action\",\n        traceID: \"request-id\",\n        parentID: \"parent-id\",\n        service: {\n          fullName: \"v1.posts\",\n          name: \"posts\",\n          version: 1\n        },\n        tags: {\n          action: {\n            name: \"posts.find\",\n            rawName: \"find\"\n          },\n          callerNodeID: \"server-2\",\n          callingLevel: 3,\n          nodeID: \"server-1\",\n          options: {\n            retries: 3,\n            timeout: 5\n          },\n          requestID: \"request-id\",\n          remoteCall: true,\n          params: {\n            a: 2,\n            b: \"John\",\n            c: {\n              d: 100,\n              e: true\n            }\n          }\n        },\n        sampled: true\n      });\n      expect(ctx.finishSpan).toHaveBeenCalledTimes(1);\n      expect(ctx.finishSpan).toHaveBeenCalledWith(fakeSpan);\n      expect(ctx.tracing).toBe(true);\n      expect(fakeSpan.addTags).toHaveBeenCalledTimes(1);\n      expect(fakeSpan.addTags).toHaveBeenCalledWith({\n        fromCache: false\n      });\n      expect(fakeSpan.setError).toHaveBeenCalledTimes(0);\n    });","file":"unit/middlewares/tracing.spec.js","skipped":false,"dir":"test"},{"name":"should create a span with context tags & without service","suites":["Test TracingMiddleware localAction","Test localAction handler"],"updatePoint":{"line":191,"column":64},"line":191,"code":"    it(\"should create a span with context tags & without service\", async () => {\n      action.tracing = {\n        spanName: \"static text\",\n        tags: {\n          params: [\"a\", \"c\"],\n          meta: [\"user.name\"],\n          response: [\"id\", \"title\"]\n        }\n      };\n      ctx.service = null;\n      ctx.nodeID = \"server-1\";\n      tracer.getCurrentTraceID = jest.fn(() => \"tracer-trace-id\");\n      tracer.getActiveSpanID = jest.fn(() => \"tracer-span-id\");\n      const mw = Middleware(broker);\n      const newHandler = mw.localAction.call(broker, handler, action);\n      ctx.startSpan.mockClear();\n      ctx.finishSpan.mockClear();\n      fakeSpan.addTags.mockClear();\n      fakeSpan.setError.mockClear();\n      fakeSpan.finish.mockClear();\n      const res = await newHandler(ctx);\n      expect(res).toBe(result);\n      expect(tracer.getCurrentTraceID).toHaveBeenCalledTimes(0);\n      expect(tracer.getActiveSpanID).toHaveBeenCalledTimes(0);\n      expect(ctx.startSpan).toHaveBeenCalledTimes(1);\n      expect(ctx.startSpan).toHaveBeenCalledWith(\"static text\", {\n        id: \"ctx-id\",\n        type: \"action\",\n        traceID: \"request-id\",\n        parentID: \"parent-id\",\n        service: null,\n        tags: {\n          action: {\n            name: \"posts.find\",\n            rawName: \"find\"\n          },\n          callerNodeID: \"server-1\",\n          callingLevel: 3,\n          nodeID: \"server-1\",\n          options: {\n            retries: 3,\n            timeout: 5\n          },\n          requestID: \"request-id\",\n          remoteCall: false,\n          params: {\n            a: 5,\n            c: {\n              d: 100,\n              e: true\n            }\n          },\n          meta: {\n            user: {\n              name: \"Adam\"\n            }\n          }\n        },\n        sampled: true\n      });\n      expect(ctx.finishSpan).toHaveBeenCalledTimes(1);\n      expect(ctx.finishSpan).toHaveBeenCalledWith(fakeSpan);\n      expect(ctx.tracing).toBe(true);\n      expect(fakeSpan.addTags).toHaveBeenCalledTimes(1);\n      expect(fakeSpan.addTags).toHaveBeenCalledWith({\n        fromCache: false,\n        response: {\n          id: \"post-id\",\n          title: \"Post title\"\n        }\n      });\n      expect(fakeSpan.setError).toHaveBeenCalledTimes(0);\n    });","file":"unit/middlewares/tracing.spec.js","skipped":false,"dir":"test"},{"name":"should create a span with cloned params & meta","suites":["Test TracingMiddleware localAction","Test localAction handler"],"updatePoint":{"line":264,"column":54},"line":264,"code":"    it(\"should create a span with cloned params & meta\", async () => {\n      action.tracing = {\n        spanName: ctx => `The ${ctx.action.name} action called`,\n        tags: {\n          params: true,\n          meta: true,\n          response: true\n        }\n      };\n      const mw = Middleware(broker);\n      const newHandler = mw.localAction.call(broker, handler, action);\n      ctx.startSpan.mockClear();\n      ctx.finishSpan.mockClear();\n      fakeSpan.addTags.mockClear();\n      fakeSpan.setError.mockClear();\n      fakeSpan.finish.mockClear();\n      await newHandler(ctx);\n      ctx.params.a = 10;\n      ctx.meta.user.age = 35;\n      expect(ctx.startSpan).toHaveBeenCalledTimes(1);\n      expect(ctx.startSpan).toHaveBeenCalledWith(\"The posts.find action called\", {\n        id: \"ctx-id\",\n        type: \"action\",\n        traceID: \"request-id\",\n        parentID: \"parent-id\",\n        service: null,\n        tags: {\n          action: {\n            name: \"posts.find\",\n            rawName: \"find\"\n          },\n          callerNodeID: \"server-1\",\n          callingLevel: 3,\n          nodeID: \"server-1\",\n          options: {\n            retries: 3,\n            timeout: 5\n          },\n          requestID: \"request-id\",\n          remoteCall: false,\n          meta: {\n            user: {\n              age: 35,\n              name: \"Adam\"\n            }\n          },\n          params: {\n            a: 5,\n            b: \"John\",\n            c: {\n              d: 100,\n              e: true\n            }\n          }\n        },\n        sampled: true\n      });\n      expect(fakeSpan.addTags).toHaveBeenCalledTimes(1);\n      expect(fakeSpan.addTags).toHaveBeenCalledWith({\n        fromCache: false,\n        response: result\n      });\n      expect(ctx.finishSpan).toHaveBeenCalledTimes(1);\n      expect(ctx.finishSpan).toHaveBeenCalledWith(fakeSpan);\n      expect(fakeSpan.setError).toHaveBeenCalledTimes(0);\n    });","file":"unit/middlewares/tracing.spec.js","skipped":false,"dir":"test"},{"name":"should create a span without params, meta & response","suites":["Test TracingMiddleware localAction","Test localAction handler"],"updatePoint":{"line":330,"column":60},"line":330,"code":"    it(\"should create a span without params, meta & response\", async () => {\n      action.tracing = {\n        tags: {\n          params: false,\n          meta: false,\n          response: false\n        }\n      };\n      const mw = Middleware(broker);\n      const newHandler = mw.localAction.call(broker, handler, action);\n      ctx.startSpan.mockClear();\n      ctx.finishSpan.mockClear();\n      fakeSpan.addTags.mockClear();\n      fakeSpan.setError.mockClear();\n      fakeSpan.finish.mockClear();\n      await newHandler(ctx);\n      expect(ctx.startSpan).toHaveBeenCalledTimes(1);\n      expect(ctx.startSpan).toHaveBeenCalledWith(\"action 'posts.find'\", {\n        id: \"ctx-id\",\n        type: \"action\",\n        traceID: \"request-id\",\n        parentID: \"parent-id\",\n        service: null,\n        tags: {\n          action: {\n            name: \"posts.find\",\n            rawName: \"find\"\n          },\n          callerNodeID: \"server-1\",\n          callingLevel: 3,\n          nodeID: \"server-1\",\n          options: {\n            retries: 3,\n            timeout: 5\n          },\n          requestID: \"request-id\",\n          remoteCall: false\n        },\n        sampled: true\n      });\n      expect(fakeSpan.addTags).toHaveBeenCalledTimes(1);\n      expect(fakeSpan.addTags).toHaveBeenCalledWith({\n        fromCache: false\n      });\n      expect(ctx.finishSpan).toHaveBeenCalledTimes(1);\n      expect(ctx.finishSpan).toHaveBeenCalledWith(fakeSpan);\n      expect(fakeSpan.setError).toHaveBeenCalledTimes(0);\n    });","file":"unit/middlewares/tracing.spec.js","skipped":false,"dir":"test"},{"name":"should create a span without params, meta & response","suites":["Test TracingMiddleware localAction","Test localAction handler"],"updatePoint":{"line":378,"column":60},"line":378,"code":"    it(\"should create a span without params, meta & response\", async () => {\n      action.tracing = {\n        tags: jest.fn((ctx, response) => ({\n          custom: {\n            params: ctx.params,\n            meta: ctx.meta,\n            response\n          }\n        }))\n      };\n      const mw = Middleware(broker);\n      const newHandler = mw.localAction.call(broker, handler, action);\n      ctx.startSpan.mockClear();\n      ctx.finishSpan.mockClear();\n      fakeSpan.addTags.mockClear();\n      fakeSpan.setError.mockClear();\n      fakeSpan.finish.mockClear();\n      await newHandler(ctx);\n      expect(ctx.startSpan).toHaveBeenCalledTimes(1);\n      expect(ctx.startSpan).toHaveBeenCalledWith(\"action 'posts.find'\", {\n        id: \"ctx-id\",\n        type: \"action\",\n        traceID: \"request-id\",\n        parentID: \"parent-id\",\n        service: null,\n        tags: {\n          action: {\n            name: \"posts.find\",\n            rawName: \"find\"\n          },\n          callerNodeID: \"server-1\",\n          callingLevel: 3,\n          nodeID: \"server-1\",\n          options: {\n            retries: 3,\n            timeout: 5\n          },\n          requestID: \"request-id\",\n          remoteCall: false,\n          custom: {\n            meta: {\n              user: {\n                age: 35,\n                name: \"Adam\"\n              }\n            },\n            params: {\n              a: 10,\n              b: \"John\",\n              c: {\n                d: 100,\n                e: true\n              }\n            },\n            response: undefined\n          }\n        },\n        sampled: true\n      });\n      expect(fakeSpan.addTags).toHaveBeenCalledTimes(1);\n      expect(fakeSpan.addTags).toHaveBeenCalledWith({\n        fromCache: false,\n        custom: {\n          meta: {\n            user: {\n              age: 35,\n              name: \"Adam\"\n            }\n          },\n          params: {\n            a: 10,\n            b: \"John\",\n            c: {\n              d: 100,\n              e: true\n            }\n          },\n          response: {\n            id: \"post-id\",\n            title: \"Post title\",\n            content: \"Post content\"\n          }\n        }\n      });\n      expect(ctx.finishSpan).toHaveBeenCalledTimes(1);\n      expect(ctx.finishSpan).toHaveBeenCalledWith(fakeSpan);\n      expect(fakeSpan.setError).toHaveBeenCalledTimes(0);\n    });","file":"unit/middlewares/tracing.spec.js","skipped":false,"dir":"test"},{"name":"should create a span with custom tags function & error","suites":["Test TracingMiddleware localAction","Test localAction handler"],"updatePoint":{"line":466,"column":62},"line":466,"code":"    it(\"should create a span with custom tags function & error\", () => {\n      const error = new MoleculerError(\"Something happened\", 456, \"SOMETHING\", {\n        some: \"thing\"\n      });\n      action.handler = jest.fn(() => Promise.reject(error));\n      action.tracing = {\n        tags: jest.fn((ctx, response) => ({\n          custom: {\n            params: ctx.params,\n            meta: ctx.meta,\n            response\n          }\n        }))\n      };\n      fakeSpan.sampled = false;\n      ctx.requestID = null;\n      ctx.parentID = null;\n      tracer.getCurrentTraceID = jest.fn(() => \"tracer-trace-id\");\n      tracer.getActiveSpanID = jest.fn(() => \"tracer-span-id\");\n      const mw = Middleware(broker);\n      const newHandler = mw.localAction.call(broker, action.handler, action);\n      ctx.startSpan.mockClear();\n      ctx.finishSpan.mockClear();\n      fakeSpan.addTags.mockClear();\n      fakeSpan.setError.mockClear();\n      fakeSpan.finish.mockClear();\n      return newHandler(ctx).then(protectReject).catch(err => {\n        expect(err).toBe(error);\n        expect(action.handler).toHaveBeenCalledTimes(1);\n        expect(action.tracing.tags).toHaveBeenCalledTimes(1);\n        expect(action.tracing.tags).toHaveBeenCalledWith(ctx);\n        expect(tracer.getCurrentTraceID).toHaveBeenCalledTimes(1);\n        expect(tracer.getActiveSpanID).toHaveBeenCalledTimes(1);\n        expect(ctx.startSpan).toHaveBeenCalledTimes(1);\n        expect(ctx.startSpan).toHaveBeenCalledWith(\"action 'posts.find'\", {\n          id: \"ctx-id\",\n          type: \"action\",\n          traceID: \"tracer-trace-id\",\n          parentID: \"tracer-span-id\",\n          service: null,\n          tags: {\n            action: {\n              name: \"posts.find\",\n              rawName: \"find\"\n            },\n            callerNodeID: \"server-1\",\n            callingLevel: 3,\n            nodeID: \"server-1\",\n            options: {\n              retries: 3,\n              timeout: 5\n            },\n            requestID: \"tracer-trace-id\",\n            remoteCall: false,\n            custom: {\n              meta: {\n                user: {\n                  age: 35,\n                  name: \"Adam\"\n                }\n              },\n              params: {\n                a: 10,\n                b: \"John\",\n                c: {\n                  d: 100,\n                  e: true\n                }\n              }\n            }\n          },\n          sampled: true\n        });\n        expect(ctx.tracing).toBe(false);\n        expect(fakeSpan.addTags).toHaveBeenCalledTimes(0);\n        expect(ctx.finishSpan).toHaveBeenCalledTimes(1);\n        expect(ctx.finishSpan).toHaveBeenCalledWith(fakeSpan);\n        expect(fakeSpan.setError).toHaveBeenCalledTimes(1);\n        expect(fakeSpan.setError).toHaveBeenCalledWith(err);\n      });\n    });","file":"unit/middlewares/tracing.spec.js","skipped":false,"dir":"test"},{"name":"should create a span with non-object params & response","suites":["Test TracingMiddleware localAction","Test localAction handler"],"updatePoint":{"line":547,"column":62},"line":547,"code":"    it(\"should create a span with non-object params & response\", async () => {\n      action.tracing = {\n        tags: {\n          params: true,\n          response: true\n        }\n      };\n      const mw = Middleware(broker);\n      const newHandler = mw.localAction.call(broker, handler, action);\n      ctx.startSpan.mockClear();\n      ctx.finishSpan.mockClear();\n      fakeSpan.addTags.mockClear();\n      fakeSpan.setError.mockClear();\n      fakeSpan.finish.mockClear();\n      ctx.params = \"Moleculer\";\n      await newHandler(ctx);\n      expect(ctx.startSpan).toHaveBeenCalledTimes(1);\n      expect(ctx.startSpan).toHaveBeenCalledWith(\"action 'posts.find'\", {\n        id: \"ctx-id\",\n        type: \"action\",\n        traceID: \"tracer-trace-id\",\n        parentID: \"tracer-span-id\",\n        service: null,\n        tags: {\n          action: {\n            name: \"posts.find\",\n            rawName: \"find\"\n          },\n          callerNodeID: \"server-1\",\n          callingLevel: 3,\n          nodeID: \"server-1\",\n          options: {\n            retries: 3,\n            timeout: 5\n          },\n          requestID: \"tracer-trace-id\",\n          remoteCall: false,\n          params: \"Moleculer\"\n        },\n        sampled: false\n      });\n      expect(fakeSpan.addTags).toHaveBeenCalledTimes(1);\n      expect(fakeSpan.addTags).toHaveBeenCalledWith({\n        fromCache: false,\n        response: result\n      });\n      expect(ctx.finishSpan).toHaveBeenCalledTimes(1);\n    });","file":"unit/middlewares/tracing.spec.js","skipped":false,"dir":"test"},{"name":"should create a span with local custom tags function even if global custom tags are specified","suites":["Test TracingMiddleware localAction","Test localAction handler","global action tags"],"updatePoint":{"line":625,"column":103},"line":625,"code":"      it(\"should create a span with local custom tags function even if global custom tags are specified\", async () => {\n        const brokerOptions = {\n          tracing: {\n            tags: {\n              action: jest.fn((ctx, response) => {})\n            }\n          }\n        };\n        const broker = new ServiceBroker({\n          nodeID: \"server-1\",\n          logger: false,\n          tracing: true,\n          ...brokerOptions\n        });\n        const tracer = broker.tracer;\n        tracer.getCurrentTraceID = jest.fn();\n        tracer.getActiveSpanID = jest.fn();\n        action.tracing = {\n          tags: jest.fn((ctx, response) => ({\n            custom: {\n              params: ctx.params,\n              meta: ctx.meta,\n              response\n            }\n          }))\n        };\n        ctx.parentID = null;\n        tracer.getCurrentTraceID = jest.fn(() => \"tracer-trace-id\");\n        tracer.getActiveSpanID = jest.fn(() => \"tracer-span-id\");\n        const mw = Middleware(broker);\n        const newHandler = mw.localAction.call(broker, action.handler, action);\n        await newHandler(ctx);\n        expect(action.handler).toHaveBeenCalledTimes(1); // params/meta and response\n\n        expect(action.tracing.tags).toHaveBeenCalledTimes(2);\n        expect(action.tracing.tags).toHaveBeenCalledWith(ctx);\n        expect(tracer.getActiveSpanID).toHaveBeenCalledTimes(1);\n        expect(ctx.startSpan).toHaveBeenCalledTimes(1);\n        expect(ctx.startSpan).toHaveBeenCalledWith(\"action 'posts.find'\", {\n          id: \"ctx-id\",\n          parentID: \"tracer-span-id\",\n          sampled: true,\n          service: null,\n          tags: {\n            action: {\n              name: \"posts.find\",\n              rawName: \"find\"\n            },\n            callerNodeID: \"server-1\",\n            callingLevel: 3,\n            custom: {\n              meta: {\n                user: {\n                  age: 30,\n                  name: \"Adam\"\n                }\n              },\n              params: {\n                a: 2,\n                b: \"John\",\n                c: {\n                  d: 100,\n                  e: true\n                }\n              },\n              response: undefined\n            },\n            nodeID: \"server-1\",\n            options: {\n              retries: 3,\n              timeout: 5\n            },\n            requestID: \"request-id\",\n            remoteCall: false\n          },\n          traceID: \"request-id\",\n          type: \"action\"\n        });\n        expect(fakeSpan.addTags).toHaveBeenCalledTimes(1);\n        expect(ctx.finishSpan).toHaveBeenCalledTimes(1);\n        expect(ctx.finishSpan).toHaveBeenCalledWith(fakeSpan);\n        expect(brokerOptions.tracing.tags.action).toHaveBeenCalledTimes(0);\n      });","file":"unit/middlewares/tracing.spec.js","skipped":false,"dir":"test"},{"name":"should create a span with global custom tags function if no local action tags are specified","suites":["Test TracingMiddleware localAction","Test localAction handler","global action tags"],"updatePoint":{"line":708,"column":101},"line":708,"code":"      it(\"should create a span with global custom tags function if no local action tags are specified\", async () => {\n        const brokerOptions = {\n          tracing: {\n            tags: {\n              action: jest.fn((ctx, response) => ({\n                custom: {\n                  params: ctx.params,\n                  meta: ctx.meta,\n                  response\n                }\n              }))\n            }\n          }\n        };\n        const broker = new ServiceBroker({\n          nodeID: \"server-1\",\n          logger: false,\n          tracing: true,\n          ...brokerOptions\n        });\n        const tracer = broker.tracer;\n        tracer.getCurrentTraceID = jest.fn();\n        tracer.getActiveSpanID = jest.fn();\n        fakeSpan.sampled = false;\n        ctx.parentID = null;\n        tracer.getCurrentTraceID = jest.fn(() => \"tracer-trace-id\");\n        tracer.getActiveSpanID = jest.fn(() => \"tracer-span-id\");\n        const mw = Middleware(broker);\n        const newHandler = mw.localAction.call(broker, action.handler, action);\n        await newHandler(ctx);\n        expect(action.handler).toHaveBeenCalledTimes(1);\n        expect(tracer.getActiveSpanID).toHaveBeenCalledTimes(1);\n        expect(ctx.startSpan).toHaveBeenCalledTimes(1);\n        expect(ctx.startSpan).toHaveBeenCalledWith(\"action 'posts.find'\", {\n          id: \"ctx-id\",\n          parentID: \"tracer-span-id\",\n          sampled: true,\n          service: null,\n          tags: {\n            action: {\n              name: \"posts.find\",\n              rawName: \"find\"\n            },\n            callerNodeID: \"server-1\",\n            callingLevel: 3,\n            custom: {\n              meta: {\n                user: {\n                  age: 30,\n                  name: \"Adam\"\n                }\n              },\n              params: {\n                a: 2,\n                b: \"John\",\n                c: {\n                  d: 100,\n                  e: true\n                }\n              },\n              response: undefined\n            },\n            nodeID: \"server-1\",\n            options: {\n              retries: 3,\n              timeout: 5\n            },\n            requestID: \"request-id\",\n            remoteCall: false\n          },\n          traceID: \"request-id\",\n          type: \"action\"\n        });\n        expect(fakeSpan.addTags).toHaveBeenCalledTimes(1);\n        expect(ctx.finishSpan).toHaveBeenCalledTimes(1);\n        expect(ctx.finishSpan).toHaveBeenCalledWith(fakeSpan);\n        expect(brokerOptions.tracing.tags.action).toHaveBeenCalledTimes(2);\n        expect(brokerOptions.tracing.tags.action).toHaveBeenCalledWith(ctx);\n      });","file":"unit/middlewares/tracing.spec.js","skipped":false,"dir":"test"},{"name":"should default to params tags if no local or global action tags are specified","suites":["Test TracingMiddleware localAction","Test localAction handler","global action tags"],"updatePoint":{"line":787,"column":87},"line":787,"code":"      it(\"should default to params tags if no local or global action tags are specified\", async () => {\n        const brokerOptions = {};\n        const broker = new ServiceBroker({\n          nodeID: \"server-1\",\n          logger: false,\n          tracing: true,\n          ...brokerOptions\n        });\n        const tracer = broker.tracer;\n        tracer.getCurrentTraceID = jest.fn();\n        tracer.getActiveSpanID = jest.fn();\n        fakeSpan.sampled = false;\n        ctx.parentID = null;\n        tracer.getCurrentTraceID = jest.fn(() => \"tracer-trace-id\");\n        tracer.getActiveSpanID = jest.fn(() => \"tracer-span-id\");\n        const mw = Middleware(broker);\n        const newHandler = mw.localAction.call(broker, action.handler, action);\n        await newHandler(ctx);\n        expect(action.handler).toHaveBeenCalledTimes(1);\n        expect(tracer.getActiveSpanID).toHaveBeenCalledTimes(1);\n        expect(ctx.startSpan).toHaveBeenCalledTimes(1);\n        expect(ctx.startSpan).toHaveBeenCalledWith(\"action 'posts.find'\", {\n          id: \"ctx-id\",\n          parentID: \"tracer-span-id\",\n          sampled: true,\n          service: null,\n          tags: {\n            action: {\n              name: \"posts.find\",\n              rawName: \"find\"\n            },\n            callerNodeID: \"server-1\",\n            callingLevel: 3,\n            params: {\n              a: 2,\n              b: \"John\",\n              c: {\n                d: 100,\n                e: true\n              }\n            },\n            nodeID: \"server-1\",\n            options: {\n              retries: 3,\n              timeout: 5\n            },\n            requestID: \"request-id\",\n            remoteCall: false\n          },\n          traceID: \"request-id\",\n          type: \"action\"\n        });\n        expect(fakeSpan.addTags).toHaveBeenCalledTimes(1);\n        expect(ctx.finishSpan).toHaveBeenCalledTimes(1);\n        expect(ctx.finishSpan).toHaveBeenCalledWith(fakeSpan);\n      });","file":"unit/middlewares/tracing.spec.js","skipped":false,"dir":"test"},{"name":"should merge global action tags with the default params tag","suites":["Test TracingMiddleware localAction","Test localAction handler","global action tags"],"updatePoint":{"line":843,"column":69},"line":843,"code":"      it(\"should merge global action tags with the default params tag\", async () => {\n        const brokerOptions = {\n          tracing: {\n            tags: {\n              action: {\n                meta: true,\n                response: true\n              }\n            }\n          }\n        };\n        const broker = new ServiceBroker({\n          nodeID: \"server-1\",\n          logger: false,\n          tracing: true,\n          ...brokerOptions\n        });\n        const tracer = broker.tracer;\n        tracer.getCurrentTraceID = jest.fn();\n        tracer.getActiveSpanID = jest.fn();\n        fakeSpan.sampled = false;\n        ctx.parentID = null;\n        tracer.getCurrentTraceID = jest.fn(() => \"tracer-trace-id\");\n        tracer.getActiveSpanID = jest.fn(() => \"tracer-span-id\");\n        const mw = Middleware(broker);\n        const newHandler = mw.localAction.call(broker, action.handler, action);\n        await newHandler(ctx);\n        expect(action.handler).toHaveBeenCalledTimes(1);\n        expect(tracer.getActiveSpanID).toHaveBeenCalledTimes(1);\n        expect(ctx.startSpan).toHaveBeenCalledTimes(1);\n        expect(ctx.startSpan).toHaveBeenCalledWith(\"action 'posts.find'\", {\n          id: \"ctx-id\",\n          parentID: \"tracer-span-id\",\n          sampled: true,\n          service: null,\n          tags: {\n            action: {\n              name: \"posts.find\",\n              rawName: \"find\"\n            },\n            callerNodeID: \"server-1\",\n            callingLevel: 3,\n            meta: {\n              user: {\n                age: 30,\n                name: \"Adam\"\n              }\n            },\n            params: {\n              a: 2,\n              b: \"John\",\n              c: {\n                d: 100,\n                e: true\n              }\n            },\n            nodeID: \"server-1\",\n            options: {\n              retries: 3,\n              timeout: 5\n            },\n            requestID: \"request-id\",\n            remoteCall: false\n          },\n          traceID: \"request-id\",\n          type: \"action\"\n        });\n        expect(fakeSpan.addTags).toHaveBeenCalledTimes(1);\n        expect(fakeSpan.addTags).toHaveBeenCalledWith({\n          fromCache: false,\n          response: {\n            id: \"post-id\",\n            title: \"Post title\",\n            content: \"Post content\"\n          }\n        });\n        expect(ctx.finishSpan).toHaveBeenCalledTimes(1);\n        expect(ctx.finishSpan).toHaveBeenCalledWith(fakeSpan);\n      });","file":"unit/middlewares/tracing.spec.js","skipped":false,"dir":"test"},{"name":"should override global action tags with local tags","suites":["Test TracingMiddleware localAction","Test localAction handler","global action tags"],"updatePoint":{"line":922,"column":60},"line":922,"code":"      it(\"should override global action tags with local tags\", async () => {\n        const brokerOptions = {\n          tracing: {\n            tags: {\n              action: {\n                params: false,\n                meta: false,\n                response: false\n              }\n            }\n          }\n        };\n        const broker = new ServiceBroker({\n          nodeID: \"server-1\",\n          logger: false,\n          tracing: true,\n          ...brokerOptions\n        });\n        const tracer = broker.tracer;\n        tracer.getCurrentTraceID = jest.fn();\n        tracer.getActiveSpanID = jest.fn();\n        fakeSpan.sampled = false;\n        action.tracing = {\n          tags: {\n            params: [\"a\"],\n            meta: [\"user.age\"],\n            response: [\"id\"]\n          }\n        };\n        ctx.parentID = null;\n        tracer.getCurrentTraceID = jest.fn(() => \"tracer-trace-id\");\n        tracer.getActiveSpanID = jest.fn(() => \"tracer-span-id\");\n        const mw = Middleware(broker);\n        const newHandler = mw.localAction.call(broker, action.handler, action);\n        await newHandler(ctx);\n        expect(action.handler).toHaveBeenCalledTimes(1);\n        expect(tracer.getActiveSpanID).toHaveBeenCalledTimes(1);\n        expect(ctx.startSpan).toHaveBeenCalledTimes(1);\n        expect(ctx.startSpan).toHaveBeenCalledWith(\"action 'posts.find'\", {\n          id: \"ctx-id\",\n          parentID: \"tracer-span-id\",\n          sampled: true,\n          service: null,\n          tags: {\n            action: {\n              name: \"posts.find\",\n              rawName: \"find\"\n            },\n            callerNodeID: \"server-1\",\n            callingLevel: 3,\n            meta: {\n              user: {\n                age: 30\n              }\n            },\n            params: {\n              a: 2\n            },\n            nodeID: \"server-1\",\n            options: {\n              retries: 3,\n              timeout: 5\n            },\n            requestID: \"request-id\",\n            remoteCall: false\n          },\n          traceID: \"request-id\",\n          type: \"action\"\n        });\n        expect(fakeSpan.addTags).toHaveBeenCalledTimes(1);\n        expect(fakeSpan.addTags).toHaveBeenCalledWith({\n          fromCache: false,\n          response: {\n            id: \"post-id\"\n          }\n        });\n        expect(ctx.finishSpan).toHaveBeenCalledTimes(1);\n        expect(ctx.finishSpan).toHaveBeenCalledWith(fakeSpan);\n      });","file":"unit/middlewares/tracing.spec.js","skipped":false,"dir":"test"},{"name":"should not register hooks if tracing is disabled","suites":["Test TracingMiddleware localEvent","Test localEvent wrapping"],"updatePoint":{"line":1015,"column":56},"line":1015,"code":"    it(\"should not register hooks if tracing is disabled\", () => {\n      const mw = Middleware(broker);\n      expect(mw.name).toBe(\"Tracing\");\n      expect(mw.localEvent).toBeNull();\n    });","file":"unit/middlewares/tracing.spec.js","skipped":false,"dir":"test"},{"name":"should wrap handler if tracing is enabled","suites":["Test TracingMiddleware localEvent","Test localEvent wrapping"],"updatePoint":{"line":1020,"column":49},"line":1020,"code":"    it(\"should wrap handler if tracing is enabled\", () => {\n      broker.options.tracing.enabled = true;\n      broker.tracer.opts.enabled = true;\n      broker.tracer.opts.events = true;\n      const mw = Middleware(broker);\n      expect(mw.localEvent).toBeInstanceOf(Function);\n      const newHandler = mw.localEvent.call(broker, handler, event);\n      expect(newHandler).not.toBe(handler);\n    });","file":"unit/middlewares/tracing.spec.js","skipped":false,"dir":"test"},{"name":"should not wrap handler if tracing is disabled in event definition","suites":["Test TracingMiddleware localEvent","Test localEvent wrapping"],"updatePoint":{"line":1029,"column":74},"line":1029,"code":"    it(\"should not wrap handler if tracing is disabled in event definition\", () => {\n      event.tracing = false;\n      const mw = Middleware(broker);\n      expect(mw.localEvent).toBeInstanceOf(Function);\n      const newHandler = mw.localEvent.call(broker, handler, event);\n      expect(newHandler).toBe(handler);\n    });","file":"unit/middlewares/tracing.spec.js","skipped":false,"dir":"test"},{"name":"should not wrap handler if tracing is disabled in event definition","suites":["Test TracingMiddleware localEvent","Test localEvent wrapping"],"updatePoint":{"line":1036,"column":74},"line":1036,"code":"    it(\"should not wrap handler if tracing is disabled in event definition\", () => {\n      event.tracing = {\n        enabled: false\n      };\n      const mw = Middleware(broker);\n      expect(mw.localEvent).toBeInstanceOf(Function);\n      const newHandler = mw.localEvent.call(broker, handler, event);\n      expect(newHandler).toBe(handler);\n    });","file":"unit/middlewares/tracing.spec.js","skipped":false,"dir":"test"},{"name":"should wrap handler if tracing is enabled in event definition","suites":["Test TracingMiddleware localEvent","Test localEvent wrapping"],"updatePoint":{"line":1045,"column":69},"line":1045,"code":"    it(\"should wrap handler if tracing is enabled in event definition\", () => {\n      event.tracing = true;\n      const mw = Middleware(broker);\n      expect(mw.localEvent).toBeInstanceOf(Function);\n      const newHandler = mw.localEvent.call(broker, handler, event);\n      expect(newHandler).not.toBe(handler);\n    });","file":"unit/middlewares/tracing.spec.js","skipped":false,"dir":"test"},{"name":"should wrap handler if tracing is enabled in event definition","suites":["Test TracingMiddleware localEvent","Test localEvent wrapping"],"updatePoint":{"line":1052,"column":69},"line":1052,"code":"    it(\"should wrap handler if tracing is enabled in event definition\", () => {\n      event.tracing = {\n        enabled: true\n      };\n      const mw = Middleware(broker);\n      expect(mw.localEvent).toBeInstanceOf(Function);\n      const newHandler = mw.localEvent.call(broker, handler, event);\n      expect(newHandler).not.toBe(handler);\n    });","file":"unit/middlewares/tracing.spec.js","skipped":false,"dir":"test"},{"name":"should create a span","suites":["Test TracingMiddleware localEvent","Test localEvent handler"],"updatePoint":{"line":1127,"column":28},"line":1127,"code":"    it(\"should create a span\", async () => {\n      const mw = Middleware(broker);\n      const newHandler = mw.localEvent.call(broker, handler, event);\n      tracer.getCurrentTraceID.mockClear();\n      tracer.getActiveSpanID.mockClear();\n      ctx.startSpan.mockClear();\n      ctx.finishSpan.mockClear();\n      fakeSpan.addTags.mockClear();\n      fakeSpan.setError.mockClear();\n      fakeSpan.finish.mockClear();\n      await newHandler(ctx);\n      ctx.params.a = 5;\n      expect(tracer.getCurrentTraceID).toHaveBeenCalledTimes(0);\n      expect(tracer.getActiveSpanID).toHaveBeenCalledTimes(0);\n      expect(ctx.startSpan).toHaveBeenCalledTimes(1);\n      expect(ctx.startSpan).toHaveBeenCalledWith(\"event 'user.created' in 'v1.posts'\", {\n        id: \"ctx-id\",\n        type: \"event\",\n        traceID: \"request-id\",\n        parentID: \"parent-id\",\n        service: {\n          fullName: \"v1.posts\",\n          name: \"posts\",\n          version: 1\n        },\n        tags: {\n          event: {\n            name: \"user.created\",\n            group: \"posts\"\n          },\n          eventName: \"user.created\",\n          eventType: \"emit\",\n          callerNodeID: \"server-2\",\n          callingLevel: 3,\n          nodeID: \"server-1\",\n          remoteCall: true,\n          requestID: \"request-id\",\n          params: {\n            a: 2,\n            b: \"John\",\n            c: {\n              d: 100,\n              e: true\n            }\n          }\n        },\n        sampled: true\n      });\n      expect(ctx.span).toBeUndefined();\n      expect(ctx.tracing).toBe(true);\n      expect(fakeSpan.addTags).toHaveBeenCalledTimes(0);\n      expect(ctx.finishSpan).toHaveBeenCalledTimes(1);\n      expect(ctx.finishSpan).toHaveBeenCalledWith(fakeSpan);\n      expect(fakeSpan.setError).toHaveBeenCalledTimes(0);\n    });","file":"unit/middlewares/tracing.spec.js","skipped":false,"dir":"test"},{"name":"should create a span with context tags & without service","suites":["Test TracingMiddleware localEvent","Test localEvent handler"],"updatePoint":{"line":1182,"column":64},"line":1182,"code":"    it(\"should create a span with context tags & without service\", async () => {\n      event.tracing = {\n        spanName: \"static text\",\n        tags: {\n          params: [\"a\", \"c\"],\n          meta: [\"user.name\"]\n        }\n      };\n      ctx.service = null;\n      ctx.nodeID = \"server-1\";\n      tracer.getCurrentTraceID = jest.fn(() => \"tracer-trace-id\");\n      tracer.getActiveSpanID = jest.fn(() => \"tracer-span-id\");\n      const mw = Middleware(broker);\n      const newHandler = mw.localEvent.call(broker, handler, event);\n      ctx.startSpan.mockClear();\n      ctx.finishSpan.mockClear();\n      fakeSpan.addTags.mockClear();\n      fakeSpan.setError.mockClear();\n      fakeSpan.finish.mockClear();\n      await newHandler(ctx);\n      expect(tracer.getCurrentTraceID).toHaveBeenCalledTimes(0);\n      expect(tracer.getActiveSpanID).toHaveBeenCalledTimes(0);\n      expect(ctx.startSpan).toHaveBeenCalledTimes(1);\n      expect(ctx.startSpan).toHaveBeenCalledWith(\"static text\", {\n        id: \"ctx-id\",\n        type: \"event\",\n        traceID: \"request-id\",\n        parentID: \"parent-id\",\n        service: {\n          fullName: \"v1.posts\",\n          name: \"posts\",\n          version: 1\n        },\n        tags: {\n          event: {\n            name: \"user.created\",\n            group: \"posts\"\n          },\n          eventName: \"user.created\",\n          eventType: \"emit\",\n          callerNodeID: \"server-1\",\n          callingLevel: 3,\n          nodeID: \"server-1\",\n          remoteCall: false,\n          requestID: \"request-id\",\n          params: {\n            a: 5,\n            c: {\n              d: 100,\n              e: true\n            }\n          },\n          meta: {\n            user: {\n              name: \"Adam\"\n            }\n          }\n        },\n        sampled: true\n      });\n      expect(ctx.span).toBeUndefined();\n      expect(ctx.tracing).toBe(true);\n      expect(fakeSpan.addTags).toHaveBeenCalledTimes(0);\n      expect(ctx.finishSpan).toHaveBeenCalledTimes(1);\n      expect(ctx.finishSpan).toHaveBeenCalledWith(fakeSpan);\n      expect(fakeSpan.setError).toHaveBeenCalledTimes(0);\n    });","file":"unit/middlewares/tracing.spec.js","skipped":false,"dir":"test"},{"name":"should create a span with cloned params & meta","suites":["Test TracingMiddleware localEvent","Test localEvent handler"],"updatePoint":{"line":1249,"column":54},"line":1249,"code":"    it(\"should create a span with cloned params & meta\", async () => {\n      event.tracing = {\n        spanName: ctx => `The ${ctx.eventName} triggered`,\n        tags: {\n          params: true,\n          meta: true\n        }\n      };\n      const mw = Middleware(broker);\n      const newHandler = mw.localEvent.call(broker, handler, event);\n      ctx.startSpan.mockClear();\n      ctx.finishSpan.mockClear();\n      fakeSpan.addTags.mockClear();\n      fakeSpan.setError.mockClear();\n      fakeSpan.finish.mockClear();\n      await newHandler(ctx); // eslint-disable-next-line\n\n      ctx.params.a = 10; // eslint-disable-next-line\n\n      ctx.meta.user.age = 35;\n      expect(ctx.startSpan).toHaveBeenCalledTimes(1);\n      expect(ctx.startSpan).toHaveBeenCalledWith(\"The user.created triggered\", {\n        id: \"ctx-id\",\n        type: \"event\",\n        traceID: \"request-id\",\n        parentID: \"parent-id\",\n        service: {\n          fullName: \"v1.posts\",\n          name: \"posts\",\n          version: 1\n        },\n        tags: {\n          event: {\n            name: \"user.created\",\n            group: \"posts\"\n          },\n          eventName: \"user.created\",\n          eventType: \"emit\",\n          callerNodeID: \"server-1\",\n          callingLevel: 3,\n          nodeID: \"server-1\",\n          remoteCall: false,\n          requestID: \"request-id\",\n          meta: {\n            user: {\n              age: 35,\n              name: \"Adam\"\n            }\n          },\n          params: {\n            a: 5,\n            b: \"John\",\n            c: {\n              d: 100,\n              e: true\n            }\n          }\n        },\n        sampled: true\n      });\n      expect(fakeSpan.addTags).toHaveBeenCalledTimes(0);\n      expect(ctx.finishSpan).toHaveBeenCalledTimes(1);\n      expect(ctx.finishSpan).toHaveBeenCalledWith(fakeSpan);\n      expect(fakeSpan.setError).toHaveBeenCalledTimes(0);\n    });","file":"unit/middlewares/tracing.spec.js","skipped":false,"dir":"test"},{"name":"should create a span without params, meta","suites":["Test TracingMiddleware localEvent","Test localEvent handler"],"updatePoint":{"line":1314,"column":49},"line":1314,"code":"    it(\"should create a span without params, meta\", async () => {\n      event.tracing = {\n        tags: {\n          params: false,\n          meta: false\n        }\n      };\n      const mw = Middleware(broker);\n      const newHandler = mw.localEvent.call(broker, handler, event);\n      ctx.startSpan.mockClear();\n      ctx.finishSpan.mockClear();\n      fakeSpan.addTags.mockClear();\n      fakeSpan.setError.mockClear();\n      fakeSpan.finish.mockClear();\n      await newHandler(ctx);\n      expect(ctx.startSpan).toHaveBeenCalledTimes(1);\n      expect(ctx.startSpan).toHaveBeenCalledWith(\"event 'user.created' in 'v1.posts'\", {\n        id: \"ctx-id\",\n        type: \"event\",\n        traceID: \"request-id\",\n        parentID: \"parent-id\",\n        service: {\n          fullName: \"v1.posts\",\n          name: \"posts\",\n          version: 1\n        },\n        tags: {\n          event: {\n            name: \"user.created\",\n            group: \"posts\"\n          },\n          eventName: \"user.created\",\n          eventType: \"emit\",\n          callerNodeID: \"server-1\",\n          callingLevel: 3,\n          nodeID: \"server-1\",\n          remoteCall: false,\n          requestID: \"request-id\"\n        },\n        sampled: true\n      });\n      expect(fakeSpan.addTags).toHaveBeenCalledTimes(0);\n      expect(ctx.finishSpan).toHaveBeenCalledTimes(1);\n      expect(ctx.finishSpan).toHaveBeenCalledWith(fakeSpan);\n      expect(fakeSpan.setError).toHaveBeenCalledTimes(0);\n    });","file":"unit/middlewares/tracing.spec.js","skipped":false,"dir":"test"},{"name":"should create a span without params, meta & response","suites":["Test TracingMiddleware localEvent","Test localEvent handler"],"updatePoint":{"line":1360,"column":60},"line":1360,"code":"    it(\"should create a span without params, meta & response\", async () => {\n      event.tracing = {\n        tags: jest.fn((ctx, response) => ({\n          custom: {\n            params: ctx.params,\n            meta: ctx.meta,\n            response\n          }\n        }))\n      };\n      const mw = Middleware(broker);\n      const newHandler = mw.localEvent.call(broker, handler, event);\n      ctx.startSpan.mockClear();\n      ctx.finishSpan.mockClear();\n      fakeSpan.addTags.mockClear();\n      fakeSpan.setError.mockClear();\n      fakeSpan.finish.mockClear();\n      await newHandler(ctx);\n      expect(ctx.startSpan).toHaveBeenCalledTimes(1);\n      expect(ctx.startSpan).toHaveBeenCalledWith(\"event 'user.created' in 'v1.posts'\", {\n        id: \"ctx-id\",\n        type: \"event\",\n        traceID: \"request-id\",\n        parentID: \"parent-id\",\n        service: {\n          fullName: \"v1.posts\",\n          name: \"posts\",\n          version: 1\n        },\n        tags: {\n          event: {\n            name: \"user.created\",\n            group: \"posts\"\n          },\n          eventName: \"user.created\",\n          eventType: \"emit\",\n          callerNodeID: \"server-1\",\n          callingLevel: 3,\n          nodeID: \"server-1\",\n          remoteCall: false,\n          requestID: \"request-id\",\n          custom: {\n            meta: {\n              user: {\n                age: 35,\n                name: \"Adam\"\n              }\n            },\n            params: {\n              a: 10,\n              b: \"John\",\n              c: {\n                d: 100,\n                e: true\n              }\n            },\n            response: undefined\n          }\n        },\n        sampled: true\n      });\n      expect(fakeSpan.addTags).toHaveBeenCalledTimes(0);\n      expect(ctx.finishSpan).toHaveBeenCalledTimes(1);\n      expect(ctx.finishSpan).toHaveBeenCalledWith(fakeSpan);\n      expect(fakeSpan.setError).toHaveBeenCalledTimes(0);\n    });","file":"unit/middlewares/tracing.spec.js","skipped":false,"dir":"test"},{"name":"should create a span with custom tags function & error","suites":["Test TracingMiddleware localEvent","Test localEvent handler"],"updatePoint":{"line":1426,"column":62},"line":1426,"code":"    it(\"should create a span with custom tags function & error\", () => {\n      const error = new MoleculerError(\"Something happened\", 456, \"SOMETHING\", {\n        some: \"thing\"\n      });\n      event.handler = jest.fn(() => Promise.reject(error));\n      event.tracing = {\n        tags: jest.fn(ctx => ({\n          custom: {\n            params: ctx.params,\n            meta: ctx.meta\n          }\n        }))\n      };\n      fakeSpan.sampled = false;\n      ctx.requestID = null;\n      ctx.parentID = null;\n      tracer.getCurrentTraceID = jest.fn(() => \"tracer-trace-id\");\n      tracer.getActiveSpanID = jest.fn(() => \"tracer-span-id\");\n      const mw = Middleware(broker);\n      const newHandler = mw.localEvent.call(broker, event.handler, event);\n      ctx.startSpan.mockClear();\n      ctx.finishSpan.mockClear();\n      fakeSpan.addTags.mockClear();\n      fakeSpan.setError.mockClear();\n      fakeSpan.finish.mockClear();\n      return newHandler(ctx).then(protectReject).catch(err => {\n        expect(err).toBe(error);\n        expect(event.handler).toHaveBeenCalledTimes(1);\n        expect(event.tracing.tags).toHaveBeenCalledTimes(1);\n        expect(event.tracing.tags).toHaveBeenCalledWith(ctx);\n        expect(tracer.getCurrentTraceID).toHaveBeenCalledTimes(1);\n        expect(tracer.getActiveSpanID).toHaveBeenCalledTimes(1);\n        expect(ctx.startSpan).toHaveBeenCalledTimes(1);\n        expect(ctx.startSpan).toHaveBeenCalledWith(\"event 'user.created' in 'v1.posts'\", {\n          id: \"ctx-id\",\n          type: \"event\",\n          traceID: \"tracer-trace-id\",\n          parentID: \"tracer-span-id\",\n          service: {\n            fullName: \"v1.posts\",\n            name: \"posts\",\n            version: 1\n          },\n          tags: {\n            event: {\n              name: \"user.created\",\n              group: \"posts\"\n            },\n            eventName: \"user.created\",\n            eventType: \"emit\",\n            callerNodeID: \"server-1\",\n            callingLevel: 3,\n            nodeID: \"server-1\",\n            remoteCall: false,\n            requestID: \"tracer-trace-id\",\n            custom: {\n              meta: {\n                user: {\n                  age: 35,\n                  name: \"Adam\"\n                }\n              },\n              params: {\n                a: 10,\n                b: \"John\",\n                c: {\n                  d: 100,\n                  e: true\n                }\n              }\n            }\n          },\n          sampled: true\n        });\n        expect(ctx.span).toBeUndefined();\n        expect(ctx.tracing).toBe(false);\n        expect(fakeSpan.addTags).toHaveBeenCalledTimes(0);\n        expect(ctx.finishSpan).toHaveBeenCalledTimes(1);\n        expect(ctx.finishSpan).toHaveBeenCalledWith(fakeSpan);\n        expect(fakeSpan.setError).toHaveBeenCalledTimes(1);\n        expect(fakeSpan.setError).toHaveBeenCalledWith(err);\n      });\n    });","file":"unit/middlewares/tracing.spec.js","skipped":false,"dir":"test"},{"name":"should create a span with non-object params","suites":["Test TracingMiddleware localEvent","Test localEvent handler"],"updatePoint":{"line":1509,"column":51},"line":1509,"code":"    it(\"should create a span with non-object params\", async () => {\n      event.tracing = {\n        tags: {\n          params: true\n        }\n      };\n      const mw = Middleware(broker);\n      const newHandler = mw.localEvent.call(broker, handler, event);\n      ctx.startSpan.mockClear();\n      ctx.finishSpan.mockClear();\n      fakeSpan.addTags.mockClear();\n      fakeSpan.setError.mockClear();\n      fakeSpan.finish.mockClear();\n      ctx.params = \"Moleculer\";\n      await newHandler(ctx);\n      expect(ctx.startSpan).toHaveBeenCalledTimes(1);\n      expect(ctx.startSpan).toHaveBeenCalledWith(\"event 'user.created' in 'v1.posts'\", {\n        id: \"ctx-id\",\n        type: \"event\",\n        traceID: \"tracer-trace-id\",\n        parentID: \"tracer-span-id\",\n        service: {\n          fullName: \"v1.posts\",\n          name: \"posts\",\n          version: 1\n        },\n        tags: {\n          event: {\n            name: \"user.created\",\n            group: \"posts\"\n          },\n          eventName: \"user.created\",\n          eventType: \"emit\",\n          callerNodeID: \"server-1\",\n          callingLevel: 3,\n          nodeID: \"server-1\",\n          remoteCall: false,\n          requestID: \"tracer-trace-id\",\n          params: \"Moleculer\"\n        },\n        sampled: false\n      });\n      expect(fakeSpan.addTags).toHaveBeenCalledTimes(0);\n      expect(ctx.finishSpan).toHaveBeenCalledTimes(1);\n      expect(ctx.finishSpan).toHaveBeenCalledWith(fakeSpan);\n      expect(fakeSpan.setError).toHaveBeenCalledTimes(0);\n    });","file":"unit/middlewares/tracing.spec.js","skipped":false,"dir":"test"},{"name":"should create a span with local custom tags function even if global custom event tags are specified","suites":["Test TracingMiddleware localEvent","Test localEvent handler","global event tags"],"updatePoint":{"line":1592,"column":109},"line":1592,"code":"      it(\"should create a span with local custom tags function even if global custom event tags are specified\", async () => {\n        const brokerOptions = {\n          tracing: {\n            enabled: true,\n            events: true,\n            tags: {\n              event: jest.fn((ctx, response) => {})\n            }\n          }\n        };\n        const broker = new ServiceBroker({\n          nodeID: \"server-1\",\n          logger: false,\n          ...brokerOptions\n        });\n        const tracer = broker.tracer;\n        tracer.getCurrentTraceID = jest.fn();\n        tracer.getActiveSpanID = jest.fn();\n        event.tracing = {\n          tags: jest.fn((ctx, response) => ({\n            custom: {\n              params: ctx.params,\n              meta: ctx.meta,\n              response\n            }\n          }))\n        };\n        ctx.parentID = null;\n        tracer.getCurrentTraceID = jest.fn(() => \"tracer-trace-id\");\n        tracer.getActiveSpanID = jest.fn(() => \"tracer-span-id\");\n        const mw = Middleware(broker);\n        const newHandler = mw.localEvent.call(broker, event.handler, event);\n        await newHandler(ctx);\n        expect(event.handler).toHaveBeenCalledTimes(1);\n        expect(event.tracing.tags).toHaveBeenCalledTimes(1);\n        expect(event.tracing.tags).toHaveBeenCalledWith(ctx);\n        expect(tracer.getActiveSpanID).toHaveBeenCalledTimes(1);\n        expect(ctx.startSpan).toHaveBeenCalledTimes(1);\n        expect(ctx.startSpan).toHaveBeenCalledWith(\"event 'user.created' in 'v1.posts'\", {\n          id: \"ctx-id\",\n          parentID: \"tracer-span-id\",\n          sampled: true,\n          service: {\n            fullName: \"v1.posts\",\n            name: \"posts\",\n            version: 1\n          },\n          tags: {\n            event: {\n              group: \"posts\",\n              name: \"user.created\"\n            },\n            callerNodeID: \"server-1\",\n            callingLevel: 3,\n            custom: {\n              meta: {\n                user: {\n                  age: 30,\n                  name: \"Adam\"\n                }\n              },\n              params: {\n                a: 2,\n                b: \"John\",\n                c: {\n                  d: 100,\n                  e: true\n                }\n              }\n            },\n            eventName: \"user.created\",\n            eventType: \"emit\",\n            nodeID: \"server-1\",\n            remoteCall: false,\n            requestID: \"request-id\"\n          },\n          traceID: \"request-id\",\n          type: \"event\"\n        });\n        expect(ctx.tracing).toBe(true);\n        expect(ctx.finishSpan).toHaveBeenCalledTimes(1);\n        expect(ctx.finishSpan).toHaveBeenCalledWith(fakeSpan);\n        expect(brokerOptions.tracing.tags.event).toHaveBeenCalledTimes(0);\n      });","file":"unit/middlewares/tracing.spec.js","skipped":false,"dir":"test"},{"name":"should create a span with global custom tags function if no local event tags are specified","suites":["Test TracingMiddleware localEvent","Test localEvent handler","global event tags"],"updatePoint":{"line":1676,"column":100},"line":1676,"code":"      it(\"should create a span with global custom tags function if no local event tags are specified\", async () => {\n        const brokerOptions = {\n          tracing: {\n            enabled: true,\n            events: true,\n            tags: {\n              event: jest.fn((ctx, response) => ({\n                custom: {\n                  params: ctx.params,\n                  meta: ctx.meta\n                }\n              }))\n            }\n          }\n        };\n        const broker = new ServiceBroker({\n          nodeID: \"server-1\",\n          logger: false,\n          ...brokerOptions\n        });\n        const tracer = broker.tracer;\n        tracer.getCurrentTraceID = jest.fn();\n        tracer.getActiveSpanID = jest.fn();\n        ctx.parentID = null;\n        tracer.getCurrentTraceID = jest.fn(() => \"tracer-trace-id\");\n        tracer.getActiveSpanID = jest.fn(() => \"tracer-span-id\");\n        const mw = Middleware(broker);\n        const newHandler = mw.localEvent.call(broker, event.handler, event);\n        await newHandler(ctx);\n        expect(event.handler).toHaveBeenCalledTimes(1);\n        expect(tracer.getActiveSpanID).toHaveBeenCalledTimes(1);\n        expect(ctx.startSpan).toHaveBeenCalledTimes(1);\n        expect(ctx.startSpan).toHaveBeenCalledWith(\"event 'user.created' in 'v1.posts'\", {\n          id: \"ctx-id\",\n          parentID: \"tracer-span-id\",\n          sampled: true,\n          service: {\n            fullName: \"v1.posts\",\n            name: \"posts\",\n            version: 1\n          },\n          tags: {\n            event: {\n              group: \"posts\",\n              name: \"user.created\"\n            },\n            callerNodeID: \"server-1\",\n            callingLevel: 3,\n            custom: {\n              meta: {\n                user: {\n                  age: 30,\n                  name: \"Adam\"\n                }\n              },\n              params: {\n                a: 2,\n                b: \"John\",\n                c: {\n                  d: 100,\n                  e: true\n                }\n              }\n            },\n            eventName: \"user.created\",\n            eventType: \"emit\",\n            nodeID: \"server-1\",\n            remoteCall: false,\n            requestID: \"request-id\"\n          },\n          traceID: \"request-id\",\n          type: \"event\"\n        });\n        expect(ctx.tracing).toBe(true);\n        expect(ctx.finishSpan).toHaveBeenCalledTimes(1);\n        expect(ctx.finishSpan).toHaveBeenCalledWith(fakeSpan);\n        expect(brokerOptions.tracing.tags.event).toHaveBeenCalledTimes(1);\n        expect(brokerOptions.tracing.tags.event).toHaveBeenCalledWith(ctx);\n      });","file":"unit/middlewares/tracing.spec.js","skipped":false,"dir":"test"},{"name":"should default to params tags if no local or global event tags are specified","suites":["Test TracingMiddleware localEvent","Test localEvent handler","global event tags"],"updatePoint":{"line":1755,"column":86},"line":1755,"code":"      it(\"should default to params tags if no local or global event tags are specified\", async () => {\n        const brokerOptions = {\n          tracing: {\n            enabled: true,\n            events: true\n          }\n        };\n        const broker = new ServiceBroker({\n          nodeID: \"server-1\",\n          logger: false,\n          ...brokerOptions\n        });\n        const tracer = broker.tracer;\n        tracer.getCurrentTraceID = jest.fn();\n        tracer.getActiveSpanID = jest.fn();\n        ctx.parentID = null;\n        tracer.getCurrentTraceID = jest.fn(() => \"tracer-trace-id\");\n        tracer.getActiveSpanID = jest.fn(() => \"tracer-span-id\");\n        const mw = Middleware(broker);\n        const newHandler = mw.localEvent.call(broker, event.handler, event);\n        ctx.startSpan.mockClear();\n        ctx.finishSpan.mockClear();\n        fakeSpan.addTags.mockClear();\n        fakeSpan.setError.mockClear();\n        fakeSpan.finish.mockClear();\n        await newHandler(ctx);\n        expect(event.handler).toHaveBeenCalledTimes(1);\n        expect(tracer.getActiveSpanID).toHaveBeenCalledTimes(1);\n        expect(ctx.startSpan).toHaveBeenCalledTimes(1);\n        expect(ctx.startSpan).toHaveBeenCalledWith(\"event 'user.created' in 'v1.posts'\", {\n          id: \"ctx-id\",\n          parentID: \"tracer-span-id\",\n          sampled: true,\n          service: {\n            fullName: \"v1.posts\",\n            name: \"posts\",\n            version: 1\n          },\n          tags: {\n            event: {\n              group: \"posts\",\n              name: \"user.created\"\n            },\n            callerNodeID: \"server-1\",\n            callingLevel: 3,\n            params: {\n              a: 2,\n              b: \"John\",\n              c: {\n                d: 100,\n                e: true\n              }\n            },\n            eventName: \"user.created\",\n            eventType: \"emit\",\n            nodeID: \"server-1\",\n            remoteCall: false,\n            requestID: \"request-id\"\n          },\n          traceID: \"request-id\",\n          type: \"event\"\n        });\n        expect(ctx.tracing).toBe(true);\n        expect(ctx.finishSpan).toHaveBeenCalledTimes(1);\n        expect(ctx.finishSpan).toHaveBeenCalledWith(fakeSpan);\n      });","file":"unit/middlewares/tracing.spec.js","skipped":false,"dir":"test"},{"name":"should merge global event tags with the default params tag","suites":["Test TracingMiddleware localEvent","Test localEvent handler","global event tags"],"updatePoint":{"line":1821,"column":68},"line":1821,"code":"      it(\"should merge global event tags with the default params tag\", async () => {\n        const brokerOptions = {\n          tracing: {\n            enabled: true,\n            events: true,\n            tags: {\n              event: {\n                meta: true\n              }\n            }\n          }\n        };\n        const broker = new ServiceBroker({\n          nodeID: \"server-1\",\n          logger: false,\n          ...brokerOptions\n        });\n        const tracer = broker.tracer;\n        tracer.getCurrentTraceID = jest.fn();\n        tracer.getActiveSpanID = jest.fn();\n        ctx.parentID = null;\n        tracer.getCurrentTraceID = jest.fn(() => \"tracer-trace-id\");\n        tracer.getActiveSpanID = jest.fn(() => \"tracer-span-id\");\n        const mw = Middleware(broker);\n        const newHandler = mw.localEvent.call(broker, event.handler, event);\n        ctx.startSpan.mockClear();\n        ctx.finishSpan.mockClear();\n        fakeSpan.addTags.mockClear();\n        fakeSpan.setError.mockClear();\n        fakeSpan.finish.mockClear();\n        await newHandler(ctx);\n        expect(event.handler).toHaveBeenCalledTimes(1);\n        expect(tracer.getActiveSpanID).toHaveBeenCalledTimes(1);\n        expect(ctx.startSpan).toHaveBeenCalledTimes(1);\n        expect(ctx.startSpan).toHaveBeenCalledWith(\"event 'user.created' in 'v1.posts'\", {\n          id: \"ctx-id\",\n          parentID: \"tracer-span-id\",\n          sampled: true,\n          service: {\n            fullName: \"v1.posts\",\n            name: \"posts\",\n            version: 1\n          },\n          tags: {\n            event: {\n              group: \"posts\",\n              name: \"user.created\"\n            },\n            eventName: \"user.created\",\n            eventType: \"emit\",\n            nodeID: \"server-1\",\n            callerNodeID: \"server-1\",\n            callingLevel: 3,\n            meta: {\n              user: {\n                age: 30,\n                name: \"Adam\"\n              }\n            },\n            params: {\n              a: 2,\n              b: \"John\",\n              c: {\n                d: 100,\n                e: true\n              }\n            },\n            remoteCall: false,\n            requestID: \"request-id\"\n          },\n          traceID: \"request-id\",\n          type: \"event\"\n        });\n        expect(ctx.tracing).toBe(true);\n        expect(ctx.finishSpan).toHaveBeenCalledTimes(1);\n        expect(ctx.finishSpan).toHaveBeenCalledWith(fakeSpan);\n      });","file":"unit/middlewares/tracing.spec.js","skipped":false,"dir":"test"},{"name":"should override global event tags with local tags","suites":["Test TracingMiddleware localEvent","Test localEvent handler","global event tags"],"updatePoint":{"line":1898,"column":59},"line":1898,"code":"      it(\"should override global event tags with local tags\", async () => {\n        const brokerOptions = {\n          tracing: {\n            enabled: true,\n            events: true,\n            tags: {\n              event: {\n                params: false,\n                meta: false\n              }\n            }\n          }\n        };\n        const broker = new ServiceBroker({\n          nodeID: \"server-1\",\n          logger: false,\n          ...brokerOptions\n        });\n        const tracer = broker.tracer;\n        tracer.getCurrentTraceID = jest.fn();\n        tracer.getActiveSpanID = jest.fn();\n        event.tracing = {\n          tags: {\n            params: [\"a\"],\n            meta: [\"user.age\"]\n          }\n        };\n        ctx.parentID = null;\n        tracer.getCurrentTraceID = jest.fn(() => \"tracer-trace-id\");\n        tracer.getActiveSpanID = jest.fn(() => \"tracer-span-id\");\n        const mw = Middleware(broker);\n        const newHandler = mw.localEvent.call(broker, event.handler, event);\n        ctx.startSpan.mockClear();\n        ctx.finishSpan.mockClear();\n        fakeSpan.addTags.mockClear();\n        fakeSpan.setError.mockClear();\n        fakeSpan.finish.mockClear();\n        await newHandler(ctx);\n        expect(event.handler).toHaveBeenCalledTimes(1);\n        expect(tracer.getActiveSpanID).toHaveBeenCalledTimes(1);\n        expect(ctx.startSpan).toHaveBeenCalledTimes(1);\n        expect(ctx.startSpan).toHaveBeenCalledWith(\"event 'user.created' in 'v1.posts'\", {\n          id: \"ctx-id\",\n          parentID: \"tracer-span-id\",\n          sampled: true,\n          service: {\n            fullName: \"v1.posts\",\n            name: \"posts\",\n            version: 1\n          },\n          tags: {\n            eventName: \"user.created\",\n            eventType: \"emit\",\n            event: {\n              group: \"posts\",\n              name: \"user.created\"\n            },\n            callerNodeID: \"server-1\",\n            callingLevel: 3,\n            meta: {\n              user: {\n                age: 30\n              }\n            },\n            params: {\n              a: 2\n            },\n            nodeID: \"server-1\",\n            remoteCall: false,\n            requestID: \"request-id\"\n          },\n          traceID: \"request-id\",\n          type: \"event\"\n        });\n        expect(ctx.tracing).toBe(true);\n        expect(ctx.finishSpan).toHaveBeenCalledTimes(1);\n        expect(ctx.finishSpan).toHaveBeenCalledWith(fakeSpan);\n      });","file":"unit/middlewares/tracing.spec.js","skipped":false,"dir":"test"},{"name":"should register hooks","suites":["Test CompressionMiddleware","Without threshold"],"updatePoint":{"line":20,"column":29},"line":20,"code":"    it(\"should register hooks\", () => {\n      const mw = Middleware();\n      mw.created(broker);\n      expect(mw.transporterSend).toBeInstanceOf(Function);\n      expect(mw.transporterReceive).toBeInstanceOf(Function);\n    });","file":"unit/middlewares/transmit/compression.spec.js","skipped":false,"dir":"test"},{"name":"should compress with 'deflate'","suites":["Test CompressionMiddleware","Without threshold"],"updatePoint":{"line":26,"column":38},"line":26,"code":"    it(\"should compress with 'deflate'\", () => {\n      const mw = Middleware({\n        threshold: 0\n      });\n      mw.created(broker);\n      const meta = {};\n      const next = jest.fn(() => Promise.resolve());\n      const send = mw.transporterSend.call(broker, next);\n      return send(\"topic\", Buffer.from(\"uncompressed data\"), meta).catch(protectReject).then(() => {\n        expect(next).toHaveBeenCalledTimes(1);\n        expect(next).toHaveBeenCalledWith(\"topic\", expect.any(Buffer), meta);\n        expect(next.mock.calls[0][1]).toEqual(Buffer.concat([COMPRESSED_FLAG, zlib.deflateSync(Buffer.from(\"uncompressed data\"))]));\n      });\n    });","file":"unit/middlewares/transmit/compression.spec.js","skipped":false,"dir":"test"},{"name":"should decompress with 'deflate'","suites":["Test CompressionMiddleware","Without threshold"],"updatePoint":{"line":40,"column":40},"line":40,"code":"    it(\"should decompress with 'deflate'\", () => {\n      const mw = Middleware({\n        threshold: 0\n      });\n      mw.created(broker);\n      const meta = {};\n      const next = jest.fn();\n      const receive = mw.transporterReceive.call(broker, next);\n      const compressedData = Buffer.concat([COMPRESSED_FLAG, zlib.deflateSync(Buffer.from(\"compressed data\"))]);\n      return receive(\"topic\", compressedData, meta).catch(protectReject).then(() => {\n        expect(next).toHaveBeenCalledTimes(1);\n        expect(next).toHaveBeenCalledWith(\"topic\", Buffer.from(\"compressed data\"), meta);\n      });\n    });","file":"unit/middlewares/transmit/compression.spec.js","skipped":false,"dir":"test"},{"name":"should compress with 'deflateRaw'","suites":["Test CompressionMiddleware","Without threshold"],"updatePoint":{"line":54,"column":41},"line":54,"code":"    it(\"should compress with 'deflateRaw'\", () => {\n      const mw = Middleware({\n        method: \"deflateRaw\",\n        threshold: 0\n      });\n      mw.created(broker);\n      const meta = {};\n      const next = jest.fn(() => Promise.resolve());\n      const send = mw.transporterSend.call(broker, next);\n      return send(\"topic\", Buffer.from(\"uncompressed data\"), meta).catch(protectReject).then(() => {\n        expect(next).toHaveBeenCalledTimes(1);\n        expect(next).toHaveBeenCalledWith(\"topic\", expect.any(Buffer), meta);\n        expect(next.mock.calls[0][1]).toEqual(Buffer.concat([COMPRESSED_FLAG, zlib.deflateRawSync(Buffer.from(\"uncompressed data\"))]));\n      });\n    });","file":"unit/middlewares/transmit/compression.spec.js","skipped":false,"dir":"test"},{"name":"should decompress with 'deflateRaw'","suites":["Test CompressionMiddleware","Without threshold"],"updatePoint":{"line":69,"column":43},"line":69,"code":"    it(\"should decompress with 'deflateRaw'\", () => {\n      const mw = Middleware({\n        method: \"deflateRaw\",\n        threshold: 0\n      });\n      mw.created(broker);\n      const meta = {};\n      const next = jest.fn();\n      const receive = mw.transporterReceive.call(broker, next);\n      const compressedData = Buffer.concat([COMPRESSED_FLAG, zlib.deflateRawSync(Buffer.from(\"compressed data\"))]);\n      return receive(\"topic\", compressedData, meta).catch(protectReject).then(() => {\n        expect(next).toHaveBeenCalledTimes(1);\n        expect(next).toHaveBeenCalledWith(\"topic\", Buffer.from(\"compressed data\"), meta);\n      });\n    });","file":"unit/middlewares/transmit/compression.spec.js","skipped":false,"dir":"test"},{"name":"should compress with 'gzip'","suites":["Test CompressionMiddleware","Without threshold"],"updatePoint":{"line":84,"column":35},"line":84,"code":"    it(\"should compress with 'gzip'\", () => {\n      const mw = Middleware({\n        method: \"gzip\",\n        threshold: 0\n      });\n      mw.created(broker);\n      const meta = {};\n      const next = jest.fn(() => Promise.resolve());\n      const send = mw.transporterSend.call(broker, next);\n      return send(\"topic\", Buffer.from(\"uncompressed data\"), meta).catch(protectReject).then(() => {\n        expect(next).toHaveBeenCalledTimes(1);\n        expect(next).toHaveBeenCalledWith(\"topic\", expect.any(Buffer), meta);\n        expect(next.mock.calls[0][1]).toEqual(Buffer.concat([COMPRESSED_FLAG, zlib.gzipSync(Buffer.from(\"uncompressed data\"))]));\n      });\n    });","file":"unit/middlewares/transmit/compression.spec.js","skipped":false,"dir":"test"},{"name":"should decompress with 'gzip'","suites":["Test CompressionMiddleware","Without threshold"],"updatePoint":{"line":99,"column":37},"line":99,"code":"    it(\"should decompress with 'gzip'\", () => {\n      const mw = Middleware({\n        method: \"gzip\",\n        threshold: 0\n      });\n      mw.created(broker);\n      const meta = {};\n      const next = jest.fn();\n      const receive = mw.transporterReceive.call(broker, next);\n      const compressedData = Buffer.concat([COMPRESSED_FLAG, zlib.gzipSync(Buffer.from(\"compressed data\"))]);\n      return receive(\"topic\", compressedData, meta).catch(protectReject).then(() => {\n        expect(next).toHaveBeenCalledTimes(1);\n        expect(next).toHaveBeenCalledWith(\"topic\", Buffer.from(\"compressed data\"), meta);\n      });\n    });","file":"unit/middlewares/transmit/compression.spec.js","skipped":false,"dir":"test"},{"name":"should not compress short packets","suites":["Test CompressionMiddleware","With threshold"],"updatePoint":{"line":127,"column":41},"line":127,"code":"    it(\"should not compress short packets\", () => {\n      next.mockClear();\n      const send = mw.transporterSend.call(broker, next);\n      return send(\"topic\", shortData, meta).catch(protectReject).then(() => {\n        expect(next).toHaveBeenCalledTimes(1);\n        expect(next).toHaveBeenCalledWith(\"topic\", expect.any(Buffer), meta);\n        expect(next.mock.calls[0][1]).toEqual(Buffer.concat([NOT_COMPRESSED_FLAG, shortData]));\n      });\n    });","file":"unit/middlewares/transmit/compression.spec.js","skipped":false,"dir":"test"},{"name":"should compress large packets","suites":["Test CompressionMiddleware","With threshold"],"updatePoint":{"line":136,"column":37},"line":136,"code":"    it(\"should compress large packets\", () => {\n      next.mockClear();\n      const send = mw.transporterSend.call(broker, next);\n      return send(\"topic\", longData, meta).catch(protectReject).then(() => {\n        expect(next).toHaveBeenCalledTimes(1);\n        expect(next).toHaveBeenCalledWith(\"topic\", expect.any(Buffer), meta);\n        expect(next.mock.calls[0][1]).toEqual(Buffer.concat([COMPRESSED_FLAG, zlib.deflateSync(longData)]));\n      });\n    });","file":"unit/middlewares/transmit/compression.spec.js","skipped":false,"dir":"test"},{"name":"should decompress if compressed regardless the threshold","suites":["Test CompressionMiddleware","With threshold"],"updatePoint":{"line":145,"column":64},"line":145,"code":"    it(\"should decompress if compressed regardless the threshold\", () => {\n      next.mockClear();\n      const receive = mw.transporterReceive.call(broker, next);\n      const compressedData = Buffer.concat([COMPRESSED_FLAG, zlib.deflateSync(shortData)]);\n      return receive(\"topic\", compressedData, meta).catch(protectReject).then(() => {\n        expect(next).toHaveBeenCalledTimes(1);\n        expect(next).toHaveBeenCalledWith(\"topic\", shortData, meta);\n      });\n    });","file":"unit/middlewares/transmit/compression.spec.js","skipped":false,"dir":"test"},{"name":"should not decompress if not compressed regardless the threshold","suites":["Test CompressionMiddleware","With threshold"],"updatePoint":{"line":154,"column":72},"line":154,"code":"    it(\"should not decompress if not compressed regardless the threshold\", () => {\n      next.mockClear();\n      const receive = mw.transporterReceive.call(broker, next);\n      const compressedData = Buffer.concat([NOT_COMPRESSED_FLAG, shortData]);\n      return receive(\"topic\", compressedData, meta).catch(protectReject).then(() => {\n        expect(next).toHaveBeenCalledTimes(1);\n        expect(next).toHaveBeenCalledWith(\"topic\", shortData, meta);\n      });\n    });","file":"unit/middlewares/transmit/compression.spec.js","skipped":false,"dir":"test"},{"name":"should register hooks","suites":["Test EncryptionMiddleware"],"updatePoint":{"line":12,"column":27},"line":12,"code":"  it(\"should register hooks\", () => {\n    const mw = Middleware(password);\n    expect(mw.transporterSend).toBeInstanceOf(Function);\n    expect(mw.transporterReceive).toBeInstanceOf(Function);\n  });","file":"unit/middlewares/transmit/encryption.spec.js","skipped":false,"dir":"test"},{"name":"should encrypt the data","suites":["Test EncryptionMiddleware"],"updatePoint":{"line":17,"column":29},"line":17,"code":"  it(\"should encrypt the data\", () => {\n    const mw = Middleware(password);\n    const meta = {};\n    const next = jest.fn();\n    const send = mw.transporterSend.call(broker, next);\n    const encrypter = crypto.createCipher(\"aes-256-cbc\", password);\n    send(\"topic\", Buffer.from(\"plaintext data\"), meta);\n    expect(next).toHaveBeenCalledTimes(1);\n    expect(next).toHaveBeenCalledWith(\"topic\", expect.any(Buffer), meta);\n    expect(next.mock.calls[0][1]).toEqual(Buffer.concat([encrypter.update(\"plaintext data\"), encrypter.final()]));\n  });","file":"unit/middlewares/transmit/encryption.spec.js","skipped":false,"dir":"test"},{"name":"should encrypt the data with IV","suites":["Test EncryptionMiddleware"],"updatePoint":{"line":28,"column":37},"line":28,"code":"  it(\"should encrypt the data with IV\", () => {\n    const pass = crypto.randomBytes(32);\n    const iv = crypto.randomBytes(16);\n    const mw = Middleware(pass, \"aes-256-ctr\", iv);\n    const meta = {};\n    const next = jest.fn();\n    const send = mw.transporterSend.call(broker, next);\n    const encrypter = crypto.createCipheriv(\"aes-256-ctr\", pass, iv);\n    send(\"topic\", Buffer.from(\"plaintext data\"), meta);\n    expect(next).toHaveBeenCalledTimes(1);\n    expect(next).toHaveBeenCalledWith(\"topic\", expect.any(Buffer), meta);\n    expect(next.mock.calls[0][1]).toEqual(Buffer.concat([encrypter.update(\"plaintext data\"), encrypter.final()]));\n  });","file":"unit/middlewares/transmit/encryption.spec.js","skipped":false,"dir":"test"},{"name":"should decrypt data with IV","suites":["Test EncryptionMiddleware"],"updatePoint":{"line":41,"column":33},"line":41,"code":"  it(\"should decrypt data with IV\", () => {\n    const mw = Middleware(password);\n    const meta = {};\n    const next = jest.fn();\n    const receive = mw.transporterReceive.call(broker, next);\n    const encrypter = crypto.createCipher(\"aes-256-cbc\", password);\n    const encryptedData = Buffer.concat([encrypter.update(\"plaintext data\"), encrypter.final()]);\n    receive(\"topic\", encryptedData, meta);\n    expect(next).toHaveBeenCalledTimes(1);\n    expect(next).toHaveBeenCalledWith(\"topic\", Buffer.from(\"plaintext data\"), meta);\n  });","file":"unit/middlewares/transmit/encryption.spec.js","skipped":false,"dir":"test"},{"name":"should decrypt data","suites":["Test EncryptionMiddleware"],"updatePoint":{"line":52,"column":25},"line":52,"code":"  it(\"should decrypt data\", () => {\n    const pass = crypto.randomBytes(32);\n    const iv = crypto.randomBytes(16);\n    const mw = Middleware(pass, \"aes-256-ctr\", iv);\n    const meta = {};\n    const next = jest.fn();\n    const receive = mw.transporterReceive.call(broker, next);\n    const encrypter = crypto.createCipheriv(\"aes-256-ctr\", pass, iv);\n    const encryptedData = Buffer.concat([encrypter.update(\"plaintext data\"), encrypter.final()]);\n    receive(\"topic\", encryptedData, meta);\n    expect(next).toHaveBeenCalledTimes(1);\n    expect(next).toHaveBeenCalledWith(\"topic\", Buffer.from(\"plaintext data\"), meta);\n  });","file":"unit/middlewares/transmit/encryption.spec.js","skipped":false,"dir":"test"},{"name":"create Packet without type","suites":["Test base Packet"],"updatePoint":{"line":4,"column":32},"line":4,"code":"  it(\"create Packet without type\", () => {\n    let packet = new P.Packet();\n    expect(packet).toBeDefined();\n    expect(packet.type).toBe(P.PACKET_UNKNOWN);\n    expect(packet.target).toBeUndefined();\n    expect(packet.payload).toEqual({});\n  });","file":"unit/packets.spec.js","skipped":false,"dir":"test"},{"name":"create Packet with type & target","suites":["Test base Packet"],"updatePoint":{"line":11,"column":38},"line":11,"code":"  it(\"create Packet with type & target\", () => {\n    let packet = new P.Packet(P.PACKET_EVENT, \"node-2\");\n    expect(packet).toBeDefined();\n    expect(packet.type).toBe(P.PACKET_EVENT);\n    expect(packet.target).toBe(\"node-2\");\n    expect(packet.payload).toEqual({});\n  });","file":"unit/packets.spec.js","skipped":false,"dir":"test"},{"name":"create Packet with type & target & payload","suites":["Test base Packet"],"updatePoint":{"line":18,"column":48},"line":18,"code":"  it(\"create Packet with type & target & payload\", () => {\n    let packet = new P.Packet(P.PACKET_EVENT, \"node-2\", {\n      a: 5\n    });\n    expect(packet).toBeDefined();\n    expect(packet.type).toBe(P.PACKET_EVENT);\n    expect(packet.target).toBe(\"node-2\");\n    expect(packet.payload).toBeDefined();\n    expect(packet.payload.a).toBe(5);\n  });","file":"unit/packets.spec.js","skipped":false,"dir":"test"},{"name":"test constructor","suites":["Test ActionCatalog constructor"],"updatePoint":{"line":20,"column":22},"line":20,"code":"  it(\"test constructor\", () => {\n    let catalog = new ActionCatalog(registry, broker, Strategy);\n    expect(catalog).toBeDefined();\n    expect(catalog.registry).toBe(registry);\n    expect(catalog.broker).toBe(broker);\n    expect(catalog.logger).toBe(registry.logger);\n    expect(catalog.StrategyFactory).toBe(Strategy);\n    expect(catalog.actions).toBeInstanceOf(Map);\n    expect(catalog.EndpointFactory).toBe(ActionEndpoint);\n  });","file":"unit/registry/action-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should create an EndpointList and add to 'actions'","suites":["Test ActionCatalog methods"],"updatePoint":{"line":40,"column":56},"line":40,"code":"  it(\"should create an EndpointList and add to 'actions'\", () => {\n    let node = {\n      id: \"server-1\"\n    };\n    let action = {\n      name: \"test.hello\"\n    };\n    expect(catalog.actions.size).toBe(0);\n    list = catalog.add(node, service, action);\n    expect(catalog.actions.size).toBe(1);\n    expect(list).toBeInstanceOf(EndpointList);\n    expect(catalog.isAvailable(\"test.hello\")).toBe(true);\n    expect(catalog.isAvailable(\"test.hi\")).toBe(false);\n  });","file":"unit/registry/action-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should not create a new EndpointList just add new node","suites":["Test ActionCatalog methods"],"updatePoint":{"line":54,"column":60},"line":54,"code":"  it(\"should not create a new EndpointList just add new node\", () => {\n    let node = {\n      id: \"server-2\"\n    };\n    let service = {};\n    let action = {\n      name: \"test.hello\"\n    };\n    list.add = jest.fn();\n    let res = catalog.add(node, service, action);\n    expect(catalog.actions.size).toBe(1);\n    expect(res).toBe(list);\n    expect(list.add).toHaveBeenCalledTimes(1);\n    expect(list.add).toHaveBeenCalledWith(node, service, action);\n  });","file":"unit/registry/action-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should return the list","suites":["Test ActionCatalog methods"],"updatePoint":{"line":69,"column":28},"line":69,"code":"  it(\"should return the list\", () => {\n    expect(catalog.get(\"test.hello\")).toBe(list);\n    expect(catalog.get(\"not.found\")).toBeUndefined();\n  });","file":"unit/registry/action-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should call list.removeByNodeID","suites":["Test ActionCatalog methods"],"updatePoint":{"line":73,"column":37},"line":73,"code":"  it(\"should call list.removeByNodeID\", () => {\n    list.removeByNodeID = jest.fn();\n    catalog.remove(\"test.hello\", \"server-2\");\n    expect(list.removeByNodeID).toHaveBeenCalledTimes(1);\n    expect(list.removeByNodeID).toHaveBeenCalledWith(\"server-2\");\n    list.removeByNodeID.mockClear();\n    catalog.remove(\"not-found\", \"server-2\");\n    expect(list.removeByNodeID).toHaveBeenCalledTimes(0);\n  });","file":"unit/registry/action-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should call list.removeByService","suites":["Test ActionCatalog methods"],"updatePoint":{"line":82,"column":38},"line":82,"code":"  it(\"should call list.removeByService\", () => {\n    let service2 = {\n      name: \"echo\"\n    };\n    let list2 = catalog.add(broker.registry.nodes.localNode, service2, {\n      name: \"echo.reply\",\n      cache: true\n    });\n    list.removeByService = jest.fn();\n    list2.removeByService = jest.fn();\n    catalog.removeByService(service2);\n    expect(list.removeByService).toHaveBeenCalledTimes(1);\n    expect(list.removeByService).toHaveBeenCalledWith(service2);\n    expect(list2.removeByService).toHaveBeenCalledTimes(1);\n    expect(list2.removeByService).toHaveBeenCalledWith(service2);\n  });","file":"unit/registry/action-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should return with action list","suites":["Test ActionCatalog methods"],"updatePoint":{"line":98,"column":36},"line":98,"code":"  it(\"should return with action list\", () => {\n    let res = catalog.list({});\n    expect(res).toEqual([{\n      action: {\n        name: \"test.hello\"\n      },\n      available: true,\n      count: 1,\n      hasLocal: false,\n      name: \"test.hello\"\n    }, {\n      action: {\n        name: \"echo.reply\",\n        cache: true\n      },\n      available: true,\n      count: 1,\n      hasLocal: true,\n      name: \"echo.reply\"\n    }]);\n    res = catalog.list({\n      onlyLocal: true,\n      skipInternal: true\n    });\n    expect(res).toEqual([{\n      action: {\n        cache: true,\n        name: \"echo.reply\"\n      },\n      available: true,\n      count: 1,\n      hasLocal: true,\n      name: \"echo.reply\"\n    }]);\n    catalog.get(\"test.hello\").hasAvailable = jest.fn(() => false);\n    res = catalog.list({\n      withEndpoints: true,\n      onlyAvailable: true\n    });\n    expect(res).toEqual([{\n      action: {\n        name: \"echo.reply\",\n        cache: true\n      },\n      available: true,\n      count: 1,\n      endpoints: [{\n        available: true,\n        nodeID: broker.registry.nodes.localNode.id,\n        state: true\n      }],\n      hasLocal: true,\n      name: \"echo.reply\"\n    }]);\n  });","file":"unit/registry/action-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should create an EndpointList and add to 'actions'","suites":["Test ActionCatalog add method"],"updatePoint":{"line":163,"column":56},"line":163,"code":"  it(\"should create an EndpointList and add to 'actions'\", () => {\n    let node = {\n      id: \"server-1\"\n    };\n    let action = {\n      name: \"test.hello\"\n    };\n    list = catalog.add(node, service, action);\n    expect(list).toBeInstanceOf(EndpointList);\n    expect(list.strategy).toBeInstanceOf(Strategy);\n    expect(list.strategy.opts).toEqual({});\n  });","file":"unit/registry/action-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should create an EndpointList with custom strategy","suites":["Test ActionCatalog add method"],"updatePoint":{"line":175,"column":56},"line":175,"code":"  it(\"should create an EndpointList with custom strategy\", () => {\n    let node = {\n      id: \"server-1\"\n    };\n    let action = {\n      name: \"test.welcome\",\n      strategy: \"CpuUsage\",\n      strategyOptions: {\n        sampleCount: 6\n      }\n    };\n    list = catalog.add(node, service, action);\n    expect(list).toBeInstanceOf(EndpointList);\n    expect(list.strategy).toBeInstanceOf(CpuStrategy);\n    expect(list.strategy.opts).toEqual({\n      sampleCount: 6,\n      lowCpuUsage: 10\n    });\n  });","file":"unit/registry/action-catalog.spec.js","skipped":false,"dir":"test"},{"name":"test constructor without opts","suites":["Test BaseDiscoverer constructor"],"updatePoint":{"line":12,"column":35},"line":12,"code":"  it(\"test constructor without opts\", () => {\n    const discoverer = new BaseDiscoverer();\n    expect(discoverer).toBeDefined();\n    expect(discoverer.opts).toEqual({\n      heartbeatInterval: null,\n      heartbeatTimeout: null,\n      disableHeartbeatChecks: false,\n      disableOfflineNodeRemoving: false,\n      cleanOfflineNodesTimeout: 600\n    });\n    expect(discoverer.heartbeatTimer).toBeNull();\n    expect(discoverer.checkNodesTimer).toBeNull();\n    expect(discoverer.offlineTimer).toBeNull();\n    expect(discoverer.localNode).toBeNull();\n  });","file":"unit/registry/discoverers/base.spec.js","skipped":false,"dir":"test"},{"name":"test constructor with opts","suites":["Test BaseDiscoverer constructor"],"updatePoint":{"line":27,"column":32},"line":27,"code":"  it(\"test constructor with opts\", () => {\n    const discoverer = new BaseDiscoverer({\n      heartbeatInterval: 5,\n      disableOfflineNodeRemoving: true,\n      cleanOfflineNodesTimeout: 10000\n    });\n    expect(discoverer).toBeDefined();\n    expect(discoverer.opts).toEqual({\n      heartbeatInterval: 5,\n      heartbeatTimeout: null,\n      disableHeartbeatChecks: false,\n      disableOfflineNodeRemoving: true,\n      cleanOfflineNodesTimeout: 10000\n    });\n    expect(discoverer.heartbeatTimer).toBeNull();\n    expect(discoverer.checkNodesTimer).toBeNull();\n    expect(discoverer.offlineTimer).toBeNull();\n    expect(discoverer.localNode).toBeNull();\n  });","file":"unit/registry/discoverers/base.spec.js","skipped":false,"dir":"test"},{"name":"init without opts & transit","suites":["Test BaseDiscoverer 'init' method"],"updatePoint":{"line":48,"column":33},"line":48,"code":"  it(\"init without opts & transit\", () => {\n    const broker = new ServiceBroker({\n      logger: false\n    });\n    const registry = broker.registry;\n    jest.spyOn(broker, \"getLogger\");\n    const discoverer = new BaseDiscoverer();\n    discoverer.registerMoleculerMetrics = jest.fn();\n    discoverer.init(registry);\n    expect(discoverer.logger).toBeDefined();\n    expect(broker.getLogger).toBeCalledTimes(1);\n    expect(broker.getLogger).toBeCalledWith(\"Discovery\");\n    expect(discoverer.transit).toBeUndefined();\n    expect(discoverer.opts).toEqual({\n      heartbeatInterval: 10,\n      heartbeatTimeout: 30,\n      disableHeartbeatChecks: false,\n      disableOfflineNodeRemoving: false,\n      cleanOfflineNodesTimeout: 600\n    });\n    expect(discoverer.localNode).toBe(registry.nodes.localNode);\n    expect(discoverer.registerMoleculerMetrics).toBeCalledTimes(1);\n    expect(discoverer.registerMoleculerMetrics).toBeCalledWith();\n  });","file":"unit/registry/discoverers/base.spec.js","skipped":false,"dir":"test"},{"name":"init with opts & transit","suites":["Test BaseDiscoverer 'init' method"],"updatePoint":{"line":72,"column":30},"line":72,"code":"  it(\"init with opts & transit\", () => {\n    const broker = new ServiceBroker({\n      logger: false,\n      transporter: \"Fake\",\n      heartbeatInterval: 10,\n      heartbeatTimeout: 50\n    });\n    const registry = broker.registry;\n    const discoverer = new BaseDiscoverer({\n      heartbeatInterval: 20,\n      heartbeatTimeout: 40\n    });\n    const eventsCB = {};\n    broker.localBus.on = jest.fn((name, cb) => eventsCB[name] = cb);\n    discoverer.startHeartbeatTimers = jest.fn();\n    discoverer.stopHeartbeatTimers = jest.fn();\n    discoverer.init(registry);\n    expect(discoverer.transit).toBe(broker.transit);\n    expect(discoverer.opts).toEqual({\n      heartbeatInterval: 20,\n      heartbeatTimeout: 40,\n      disableHeartbeatChecks: false,\n      disableOfflineNodeRemoving: false,\n      cleanOfflineNodesTimeout: 600\n    });\n    expect(broker.localBus.on).toBeCalledTimes(2);\n    expect(broker.localBus.on).toBeCalledWith(\"$transporter.connected\", expect.any(Function));\n    expect(broker.localBus.on).toBeCalledWith(\"$transporter.disconnected\", expect.any(Function)); // Test event handlers\n\n    expect(discoverer.startHeartbeatTimers).toBeCalledTimes(0);\n    eventsCB[\"$transporter.connected\"]();\n    expect(discoverer.startHeartbeatTimers).toBeCalledTimes(1);\n    expect(discoverer.stopHeartbeatTimers).toBeCalledTimes(0);\n    eventsCB[\"$transporter.disconnected\"]();\n    expect(discoverer.stopHeartbeatTimers).toBeCalledTimes(1);\n  });","file":"unit/registry/discoverers/base.spec.js","skipped":false,"dir":"test"},{"name":"should stop timers","suites":["Test BaseDiscoverer 'stop' method"],"updatePoint":{"line":110,"column":24},"line":110,"code":"  it(\"should stop timers\", async () => {\n    const broker = new ServiceBroker({\n      logger: false\n    });\n    const registry = broker.registry;\n    const discoverer = new BaseDiscoverer();\n    discoverer.stopHeartbeatTimers = jest.fn();\n    discoverer.init(registry);\n    await discoverer.stop();\n    expect(discoverer.stopHeartbeatTimers).toBeCalledTimes(1);\n    expect(discoverer.stopHeartbeatTimers).toBeCalledWith();\n  });","file":"unit/registry/discoverers/base.spec.js","skipped":false,"dir":"test"},{"name":"should do nothing if no init","suites":["Test BaseDiscoverer 'stop' method"],"updatePoint":{"line":122,"column":34},"line":122,"code":"  it(\"should do nothing if no init\", async () => {\n    const broker = new ServiceBroker({\n      logger: false\n    });\n    const registry = broker.registry;\n    const discoverer = new BaseDiscoverer();\n    await discoverer.stop();\n  });","file":"unit/registry/discoverers/base.spec.js","skipped":false,"dir":"test"},{"name":"should create timers","suites":["Test BaseDiscoverer 'startHeartbeatTimers' method"],"updatePoint":{"line":139,"column":26},"line":139,"code":"  it(\"should create timers\", async () => {\n    jest.useFakeTimers();\n    discoverer.beat = jest.fn();\n    discoverer.checkRemoteNodes = jest.fn();\n    discoverer.checkOfflineNodes = jest.fn();\n    discoverer.startHeartbeatTimers();\n    expect(discoverer.heartbeatTimer).toBeDefined();\n    expect(discoverer.checkNodesTimer).toBeDefined();\n    expect(discoverer.offlineTimer).toBeDefined();\n    expect(discoverer.beat).toBeCalledTimes(0);\n    jest.advanceTimersByTime(12000);\n    expect(discoverer.beat).toBeCalledTimes(1);\n    expect(discoverer.checkRemoteNodes).toBeCalledTimes(0);\n    jest.advanceTimersByTime(20000);\n    expect(discoverer.checkRemoteNodes).toBeCalledTimes(1);\n    expect(discoverer.checkOfflineNodes).toBeCalledTimes(0);\n    jest.advanceTimersByTime(30000);\n    expect(discoverer.checkOfflineNodes).toBeCalledTimes(1);\n  });","file":"unit/registry/discoverers/base.spec.js","skipped":false,"dir":"test"},{"name":"should stop timers","suites":["Test BaseDiscoverer 'stopHeartbeatTimers' method"],"updatePoint":{"line":167,"column":24},"line":167,"code":"  it(\"should stop timers\", async () => {\n    jest.useFakeTimers();\n    discoverer.beat = jest.fn();\n    discoverer.checkRemoteNodes = jest.fn();\n    discoverer.checkOfflineNodes = jest.fn();\n    discoverer.startHeartbeatTimers();\n    expect(discoverer.heartbeatTimer).toBeDefined();\n    expect(discoverer.checkNodesTimer).toBeDefined();\n    expect(discoverer.offlineTimer).toBeDefined();\n    discoverer.stopHeartbeatTimers();\n    expect(discoverer.heartbeatTimer).toBeNull();\n    expect(discoverer.checkNodesTimer).toBeNull();\n    expect(discoverer.offlineTimer).toBeNull();\n    jest.advanceTimersByTime(35000);\n    expect(discoverer.beat).toBeCalledTimes(0);\n    expect(discoverer.checkRemoteNodes).toBeCalledTimes(0);\n    expect(discoverer.checkOfflineNodes).toBeCalledTimes(0);\n  });","file":"unit/registry/discoverers/base.spec.js","skipped":false,"dir":"test"},{"name":"should stop timers","suites":["Test BaseDiscoverer 'disableHeartbeat' method"],"updatePoint":{"line":194,"column":24},"line":194,"code":"  it(\"should stop timers\", async () => {\n    discoverer.stopHeartbeatTimers = jest.fn();\n    expect(discoverer.opts.heartbeatInterval).toBe(10);\n    discoverer.disableHeartbeat();\n    expect(discoverer.opts.heartbeatInterval).toBe(0);\n    expect(discoverer.stopHeartbeatTimers).toBeCalledTimes(1);\n  });","file":"unit/registry/discoverers/base.spec.js","skipped":false,"dir":"test"},{"name":"should update local node & call sendHeartbeat","suites":["Test BaseDiscoverer 'beat' method"],"updatePoint":{"line":210,"column":51},"line":210,"code":"  it(\"should update local node & call sendHeartbeat\", async () => {\n    discoverer.sendHeartbeat = jest.fn();\n    discoverer.localNode.updateLocalInfo = jest.fn(() => Promise.resolve());\n    await discoverer.beat();\n    expect(discoverer.localNode.updateLocalInfo).toBeCalledTimes(1);\n    expect(discoverer.localNode.updateLocalInfo).toBeCalledWith(broker.getCpuUsage);\n    expect(discoverer.sendHeartbeat).toBeCalledTimes(1);\n    expect(discoverer.sendHeartbeat).toBeCalledWith();\n  });","file":"unit/registry/discoverers/base.spec.js","skipped":false,"dir":"test"},{"name":"should set lastHeartbeatTime","suites":["Test BaseDiscoverer 'checkRemoteNodes' method"],"updatePoint":{"line":240,"column":34},"line":240,"code":"  it(\"should set lastHeartbeatTime\", async () => {\n    discoverer.logger.warn.mockClear();\n    registry.nodes.disconnected.mockClear();\n    discoverer.checkRemoteNodes();\n    expect(registry.nodes.disconnected).toBeCalledTimes(0);\n    expect(discoverer.logger.warn).toBeCalledTimes(0);\n    expect(node.lastHeartbeatTime).toBeDefined();\n  });","file":"unit/registry/discoverers/base.spec.js","skipped":false,"dir":"test"},{"name":"should call disconnected if available","suites":["Test BaseDiscoverer 'checkRemoteNodes' method"],"updatePoint":{"line":248,"column":43},"line":248,"code":"  it(\"should call disconnected if available\", async () => {\n    discoverer.logger.warn.mockClear();\n    registry.nodes.disconnected.mockClear();\n    node.lastHeartbeatTime = Number(process.uptime()) - 13;\n    discoverer.checkRemoteNodes();\n    expect(registry.nodes.disconnected).toBeCalledTimes(1);\n    expect(registry.nodes.disconnected).toBeCalledWith(\"node-10\", true);\n    expect(discoverer.logger.warn).toBeCalledTimes(1);\n  });","file":"unit/registry/discoverers/base.spec.js","skipped":false,"dir":"test"},{"name":"should not call disconnected if time between","suites":["Test BaseDiscoverer 'checkRemoteNodes' method"],"updatePoint":{"line":257,"column":50},"line":257,"code":"  it(\"should not call disconnected if time between\", async () => {\n    discoverer.logger.warn.mockClear();\n    registry.nodes.disconnected.mockClear();\n    node.lastHeartbeatTime = Number(process.uptime()) - 6;\n    discoverer.checkRemoteNodes();\n    expect(registry.nodes.disconnected).toBeCalledTimes(0);\n    expect(discoverer.logger.warn).toBeCalledTimes(0);\n  });","file":"unit/registry/discoverers/base.spec.js","skipped":false,"dir":"test"},{"name":"should not call disconnected if not available","suites":["Test BaseDiscoverer 'checkRemoteNodes' method"],"updatePoint":{"line":265,"column":51},"line":265,"code":"  it(\"should not call disconnected if not available\", async () => {\n    discoverer.logger.warn.mockClear();\n    registry.nodes.disconnected.mockClear();\n    node.lastHeartbeatTime = Number(process.uptime()) - 13;\n    node.available = false;\n    discoverer.checkRemoteNodes();\n    expect(registry.nodes.disconnected).toBeCalledTimes(0);\n    expect(discoverer.logger.warn).toBeCalledTimes(0);\n  });","file":"unit/registry/discoverers/base.spec.js","skipped":false,"dir":"test"},{"name":"should not call disconnected if local","suites":["Test BaseDiscoverer 'checkRemoteNodes' method"],"updatePoint":{"line":274,"column":43},"line":274,"code":"  it(\"should not call disconnected if local\", async () => {\n    discoverer.logger.warn.mockClear();\n    registry.nodes.disconnected.mockClear();\n    node.available = true;\n    node.local = true;\n    discoverer.checkRemoteNodes();\n    expect(registry.nodes.disconnected).toBeCalledTimes(0);\n    expect(discoverer.logger.warn).toBeCalledTimes(0);\n  });","file":"unit/registry/discoverers/base.spec.js","skipped":false,"dir":"test"},{"name":"should not call disconnected if disabled","suites":["Test BaseDiscoverer 'checkRemoteNodes' method"],"updatePoint":{"line":283,"column":46},"line":283,"code":"  it(\"should not call disconnected if disabled\", async () => {\n    discoverer.logger.warn.mockClear();\n    registry.nodes.disconnected.mockClear();\n    discoverer.opts.disableHeartbeatChecks = true;\n    node.local = false;\n    discoverer.checkRemoteNodes();\n    expect(registry.nodes.disconnected).toBeCalledTimes(0);\n    expect(discoverer.logger.warn).toBeCalledTimes(0);\n  });","file":"unit/registry/discoverers/base.spec.js","skipped":false,"dir":"test"},{"name":"should set lastHeartbeatTime","suites":["Test BaseDiscoverer 'checkOfflineNodes' method"],"updatePoint":{"line":313,"column":34},"line":313,"code":"  it(\"should set lastHeartbeatTime\", async () => {\n    discoverer.logger.warn.mockClear();\n    registry.nodes.delete.mockClear();\n    discoverer.checkOfflineNodes();\n    expect(registry.nodes.delete).toBeCalledTimes(0);\n    expect(discoverer.logger.warn).toBeCalledTimes(0);\n    expect(node.lastHeartbeatTime).toBeDefined();\n  });","file":"unit/registry/discoverers/base.spec.js","skipped":false,"dir":"test"},{"name":"should call delete if not available","suites":["Test BaseDiscoverer 'checkOfflineNodes' method"],"updatePoint":{"line":321,"column":41},"line":321,"code":"  it(\"should call delete if not available\", async () => {\n    discoverer.logger.warn.mockClear();\n    registry.nodes.delete.mockClear();\n    node.lastHeartbeatTime = Number(process.uptime()) - 31;\n    discoverer.checkOfflineNodes();\n    expect(registry.nodes.delete).toBeCalledTimes(1);\n    expect(registry.nodes.delete).toBeCalledWith(\"node-10\");\n    expect(discoverer.logger.warn).toBeCalledTimes(1);\n  });","file":"unit/registry/discoverers/base.spec.js","skipped":false,"dir":"test"},{"name":"should not call delete if time between","suites":["Test BaseDiscoverer 'checkOfflineNodes' method"],"updatePoint":{"line":330,"column":44},"line":330,"code":"  it(\"should not call delete if time between\", async () => {\n    discoverer.logger.warn.mockClear();\n    registry.nodes.delete.mockClear();\n    node.lastHeartbeatTime = Number(process.uptime()) - 28;\n    discoverer.checkOfflineNodes();\n    expect(registry.nodes.delete).toBeCalledTimes(0);\n    expect(discoverer.logger.warn).toBeCalledTimes(0);\n  });","file":"unit/registry/discoverers/base.spec.js","skipped":false,"dir":"test"},{"name":"should not call delete if available","suites":["Test BaseDiscoverer 'checkOfflineNodes' method"],"updatePoint":{"line":338,"column":41},"line":338,"code":"  it(\"should not call delete if available\", async () => {\n    discoverer.logger.warn.mockClear();\n    registry.nodes.delete.mockClear();\n    node.lastHeartbeatTime = Number(process.uptime()) - 31;\n    node.available = true;\n    discoverer.checkOfflineNodes();\n    expect(registry.nodes.delete).toBeCalledTimes(0);\n    expect(discoverer.logger.warn).toBeCalledTimes(0);\n  });","file":"unit/registry/discoverers/base.spec.js","skipped":false,"dir":"test"},{"name":"should not call delete if local","suites":["Test BaseDiscoverer 'checkOfflineNodes' method"],"updatePoint":{"line":347,"column":37},"line":347,"code":"  it(\"should not call delete if local\", async () => {\n    discoverer.logger.warn.mockClear();\n    registry.nodes.delete.mockClear();\n    node.available = false;\n    node.local = true;\n    discoverer.checkOfflineNodes();\n    expect(registry.nodes.delete).toBeCalledTimes(0);\n    expect(discoverer.logger.warn).toBeCalledTimes(0);\n  });","file":"unit/registry/discoverers/base.spec.js","skipped":false,"dir":"test"},{"name":"should not call delete if disabled","suites":["Test BaseDiscoverer 'checkOfflineNodes' method"],"updatePoint":{"line":356,"column":40},"line":356,"code":"  it(\"should not call delete if disabled\", async () => {\n    discoverer.logger.warn.mockClear();\n    registry.nodes.delete.mockClear();\n    discoverer.opts.disableOfflineNodeRemoving = true;\n    node.local = false;\n    discoverer.checkOfflineNodes();\n    expect(registry.nodes.delete).toBeCalledTimes(0);\n    expect(discoverer.logger.warn).toBeCalledTimes(0);\n  });","file":"unit/registry/discoverers/base.spec.js","skipped":false,"dir":"test"},{"name":"should call discoverNode if unknown","suites":["Test BaseDiscoverer 'heartbeatReceived' method"],"updatePoint":{"line":384,"column":41},"line":384,"code":"  it(\"should call discoverNode if unknown\", async () => {\n    discoverer.discoverNode.mockClear();\n    registry.nodes.get.mockClear();\n    node.heartbeat.mockClear();\n    discoverer.heartbeatReceived(\"node-9\", {});\n    expect(registry.nodes.get).toBeCalledTimes(1);\n    expect(registry.nodes.get).toBeCalledWith(\"node-9\");\n    expect(discoverer.discoverNode).toBeCalledTimes(1);\n    expect(discoverer.discoverNode).toBeCalledWith(\"node-9\");\n    expect(node.heartbeat).toBeCalledTimes(0);\n  });","file":"unit/registry/discoverers/base.spec.js","skipped":false,"dir":"test"},{"name":"should call discoverNode if node is not available","suites":["Test BaseDiscoverer 'heartbeatReceived' method"],"updatePoint":{"line":395,"column":55},"line":395,"code":"  it(\"should call discoverNode if node is not available\", async () => {\n    discoverer.discoverNode.mockClear();\n    registry.nodes.get.mockClear();\n    node.heartbeat.mockClear();\n    node.available = false;\n    discoverer.heartbeatReceived(\"node-10\", {});\n    expect(discoverer.discoverNode).toBeCalledTimes(1);\n    expect(discoverer.discoverNode).toBeCalledWith(\"node-10\");\n    expect(node.heartbeat).toBeCalledTimes(0);\n  });","file":"unit/registry/discoverers/base.spec.js","skipped":false,"dir":"test"},{"name":"should call discoverNode if seq is different","suites":["Test BaseDiscoverer 'heartbeatReceived' method"],"updatePoint":{"line":405,"column":50},"line":405,"code":"  it(\"should call discoverNode if seq is different\", async () => {\n    discoverer.discoverNode.mockClear();\n    registry.nodes.get.mockClear();\n    node.heartbeat.mockClear();\n    node.available = true;\n    discoverer.heartbeatReceived(\"node-10\", {\n      seq: 3\n    });\n    expect(discoverer.discoverNode).toBeCalledTimes(1);\n    expect(discoverer.discoverNode).toBeCalledWith(\"node-10\");\n    expect(node.heartbeat).toBeCalledTimes(0);\n  });","file":"unit/registry/discoverers/base.spec.js","skipped":false,"dir":"test"},{"name":"should call discoverNode if instanceID different","suites":["Test BaseDiscoverer 'heartbeatReceived' method"],"updatePoint":{"line":417,"column":54},"line":417,"code":"  it(\"should call discoverNode if instanceID different\", async () => {\n    discoverer.discoverNode.mockClear();\n    registry.nodes.get.mockClear();\n    node.heartbeat.mockClear();\n    discoverer.heartbeatReceived(\"node-10\", {\n      instanceID: \"iid-2\"\n    });\n    expect(discoverer.discoverNode).toBeCalledTimes(1);\n    expect(discoverer.discoverNode).toBeCalledWith(\"node-10\");\n    expect(node.heartbeat).toBeCalledTimes(0);\n  });","file":"unit/registry/discoverers/base.spec.js","skipped":false,"dir":"test"},{"name":"should call heartbeat if instanceID & seq same","suites":["Test BaseDiscoverer 'heartbeatReceived' method"],"updatePoint":{"line":428,"column":52},"line":428,"code":"  it(\"should call heartbeat if instanceID & seq same\", async () => {\n    discoverer.discoverNode.mockClear();\n    registry.nodes.get.mockClear();\n    node.heartbeat.mockClear();\n    discoverer.heartbeatReceived(\"node-10\", {\n      seq: 2,\n      instanceID: \"iid-1\"\n    });\n    expect(discoverer.discoverNode).toBeCalledTimes(0);\n    expect(node.heartbeat).toBeCalledTimes(1);\n    expect(node.heartbeat).toBeCalledWith({\n      seq: 2,\n      instanceID: \"iid-1\"\n    });\n  });","file":"unit/registry/discoverers/base.spec.js","skipped":false,"dir":"test"},{"name":"should call heartbeat if no instanceID in payload","suites":["Test BaseDiscoverer 'heartbeatReceived' method"],"updatePoint":{"line":443,"column":55},"line":443,"code":"  it(\"should call heartbeat if no instanceID in payload\", async () => {\n    discoverer.discoverNode.mockClear();\n    registry.nodes.get.mockClear();\n    node.heartbeat.mockClear();\n    discoverer.heartbeatReceived(\"node-10\", {\n      seq: 2\n    });\n    expect(discoverer.discoverNode).toBeCalledTimes(0);\n    expect(node.heartbeat).toBeCalledTimes(1);\n    expect(node.heartbeat).toBeCalledWith({\n      seq: 2\n    });\n  });","file":"unit/registry/discoverers/base.spec.js","skipped":false,"dir":"test"},{"name":"should call heartbeat if not seq in payload","suites":["Test BaseDiscoverer 'heartbeatReceived' method"],"updatePoint":{"line":456,"column":49},"line":456,"code":"  it(\"should call heartbeat if not seq in payload\", async () => {\n    discoverer.discoverNode.mockClear();\n    registry.nodes.get.mockClear();\n    node.heartbeat.mockClear();\n    discoverer.heartbeatReceived(\"node-10\", {});\n    expect(discoverer.discoverNode).toBeCalledTimes(0);\n    expect(node.heartbeat).toBeCalledTimes(1);\n    expect(node.heartbeat).toBeCalledWith({});\n  });","file":"unit/registry/discoverers/base.spec.js","skipped":false,"dir":"test"},{"name":"should call registry processNodeInfo","suites":["Test BaseDiscoverer 'processRemoteNodeInfo' method"],"updatePoint":{"line":475,"column":42},"line":475,"code":"  it(\"should call registry processNodeInfo\", async () => {\n    const payload = {\n      a: 5\n    };\n    discoverer.processRemoteNodeInfo(\"node-9\", payload);\n    expect(registry.processNodeInfo).toBeCalledTimes(1);\n    expect(registry.processNodeInfo).toBeCalledWith(payload);\n  });","file":"unit/registry/discoverers/base.spec.js","skipped":false,"dir":"test"},{"name":"should do nothing if no transporter","suites":["Test BaseDiscoverer 'sendHeartbeat' method"],"updatePoint":{"line":485,"column":41},"line":485,"code":"  it(\"should do nothing if no transporter\", async () => {\n    const broker = new ServiceBroker({\n      logger: false\n    });\n    const discoverer = new BaseDiscoverer();\n    discoverer.init(broker.registry);\n    discoverer.sendHeartbeat();\n    await discoverer.stop();\n  });","file":"unit/registry/discoverers/base.spec.js","skipped":false,"dir":"test"},{"name":"should call transit.sendHeartbeat if has transporter","suites":["Test BaseDiscoverer 'sendHeartbeat' method"],"updatePoint":{"line":494,"column":58},"line":494,"code":"  it(\"should call transit.sendHeartbeat if has transporter\", async () => {\n    const broker = new ServiceBroker({\n      logger: false,\n      transporter: \"Fake\"\n    });\n    const discoverer = new BaseDiscoverer();\n    discoverer.init(broker.registry);\n    broker.transit.sendHeartbeat = jest.fn();\n    discoverer.sendHeartbeat();\n    expect(broker.transit.sendHeartbeat).toBeCalledTimes(1);\n    expect(broker.transit.sendHeartbeat).toBeCalledWith(discoverer.localNode);\n    await discoverer.stop();\n  });","file":"unit/registry/discoverers/base.spec.js","skipped":false,"dir":"test"},{"name":"should call sendLocalNodeInfo","suites":["Test BaseDiscoverer 'localNodeReady' method"],"updatePoint":{"line":509,"column":35},"line":509,"code":"  it(\"should call sendLocalNodeInfo\", async () => {\n    const broker = new ServiceBroker({\n      logger: false\n    });\n    const discoverer = new BaseDiscoverer();\n    discoverer.init(broker.registry);\n    discoverer.sendLocalNodeInfo = jest.fn();\n    discoverer.localNodeReady();\n    expect(discoverer.sendLocalNodeInfo).toBeCalledTimes(1);\n    expect(discoverer.sendLocalNodeInfo).toBeCalledWith();\n    await discoverer.stop();\n  });","file":"unit/registry/discoverers/base.spec.js","skipped":false,"dir":"test"},{"name":"should do nothing if no transporter","suites":["Test BaseDiscoverer 'localNodeDisconnected' method"],"updatePoint":{"line":523,"column":41},"line":523,"code":"  it(\"should do nothing if no transporter\", async () => {\n    const broker = new ServiceBroker({\n      logger: false\n    });\n    const discoverer = new BaseDiscoverer();\n    discoverer.init(broker.registry);\n    discoverer.localNodeDisconnected();\n    await discoverer.stop();\n  });","file":"unit/registry/discoverers/base.spec.js","skipped":false,"dir":"test"},{"name":"should call transit.sendDisconnectPacket if has transporter","suites":["Test BaseDiscoverer 'localNodeDisconnected' method"],"updatePoint":{"line":532,"column":65},"line":532,"code":"  it(\"should call transit.sendDisconnectPacket if has transporter\", async () => {\n    const broker = new ServiceBroker({\n      logger: false,\n      transporter: \"Fake\"\n    });\n    const discoverer = new BaseDiscoverer();\n    discoverer.init(broker.registry);\n    broker.transit.sendDisconnectPacket = jest.fn();\n    discoverer.localNodeDisconnected();\n    expect(broker.transit.sendDisconnectPacket).toBeCalledTimes(1);\n    expect(broker.transit.sendDisconnectPacket).toBeCalledWith();\n    await discoverer.stop();\n  });","file":"unit/registry/discoverers/base.spec.js","skipped":false,"dir":"test"},{"name":"should call sendLocalNodeInfo","suites":["Test BaseDiscoverer 'remoteNodeDisconnected' method"],"updatePoint":{"line":547,"column":35},"line":547,"code":"  it(\"should call sendLocalNodeInfo\", async () => {\n    const broker = new ServiceBroker({\n      logger: false\n    });\n    const registry = broker.registry;\n    const discoverer = new BaseDiscoverer();\n    discoverer.init(broker.registry);\n    registry.nodes.disconnected = jest.fn();\n    discoverer.remoteNodeDisconnected(\"node-2\", true);\n    expect(registry.nodes.disconnected).toBeCalledTimes(1);\n    expect(registry.nodes.disconnected).toBeCalledWith(\"node-2\", true);\n    await discoverer.stop();\n  });","file":"unit/registry/discoverers/base.spec.js","skipped":false,"dir":"test"},{"name":"test constructor without opts","suites":["Test Etcd3Discoverer constructor"],"updatePoint":{"line":24,"column":35},"line":24,"code":"  it(\"test constructor without opts\", () => {\n    const discoverer = new Etcd3Discoverer();\n    expect(discoverer).toBeDefined();\n    expect(discoverer.opts).toEqual({\n      heartbeatInterval: null,\n      heartbeatTimeout: null,\n      disableHeartbeatChecks: false,\n      disableOfflineNodeRemoving: false,\n      cleanOfflineNodesTimeout: 600,\n      etcd: undefined,\n      serializer: \"JSON\",\n      fullCheck: 10\n    });\n    expect(discoverer.idx).toBeDefined(); // random number\n\n    expect(discoverer.client).toBeNull();\n    expect(discoverer.lastInfoSeq).toBe(0);\n    expect(discoverer.lastBeatSeq).toBe(0);\n    expect(discoverer.leaseBeat).toBeNull();\n    expect(discoverer.leaseInfo).toBeNull();\n  });","file":"unit/registry/discoverers/etcd3.spec.js","skipped":false,"dir":"test"},{"name":"test constructor with opts","suites":["Test Etcd3Discoverer constructor"],"updatePoint":{"line":45,"column":32},"line":45,"code":"  it(\"test constructor with opts\", () => {\n    const discoverer = new Etcd3Discoverer({\n      heartbeatInterval: 5,\n      etcd: {\n        hosts: [\"localhost:2379\"]\n      },\n      fullCheck: 0,\n      serializer: \"Notepack\"\n    });\n    expect(discoverer).toBeDefined();\n    expect(discoverer.opts).toEqual({\n      heartbeatInterval: 5,\n      heartbeatTimeout: null,\n      disableHeartbeatChecks: false,\n      disableOfflineNodeRemoving: false,\n      cleanOfflineNodesTimeout: 600,\n      etcd: {\n        hosts: [\"localhost:2379\"]\n      },\n      fullCheck: 0,\n      serializer: \"Notepack\"\n    });\n    expect(discoverer.idx).toBe(0);\n    expect(discoverer.client).toBeNull();\n    expect(discoverer.lastInfoSeq).toBe(0);\n    expect(discoverer.lastBeatSeq).toBe(0);\n    expect(discoverer.leaseBeat).toBeNull();\n    expect(discoverer.leaseInfo).toBeNull();\n  });","file":"unit/registry/discoverers/etcd3.spec.js","skipped":false,"dir":"test"},{"name":"init without opts","suites":["Test Etcd3Discoverer 'init' method"],"updatePoint":{"line":82,"column":23},"line":82,"code":"  it(\"init without opts\", () => {\n    const discoverer = new Etcd3Discoverer();\n    ETCD3.Etcd3.mockClear();\n    Serializers.JSON.prototype.init.mockClear();\n    jest.spyOn(BaseDiscoverer.prototype, \"init\"); // ---- ^ SETUP ^ ---\n\n    discoverer.init(broker.registry); // ---- ˇ ASSERTS ˇ ---\n\n    expect(discoverer.instanceHash).toBe(\"12345678\");\n    expect(discoverer.PREFIX).toBe(\"moleculer/discovery\");\n    expect(discoverer.BEAT_KEY).toBe(\"moleculer/discovery/beats/node-99/12345678\");\n    expect(discoverer.INFO_KEY).toBe(\"moleculer/discovery/info/node-99\");\n    expect(discoverer.client).toBeInstanceOf(ETCD3.Etcd3);\n    expect(discoverer.serializer).toBeInstanceOf(Serializers.JSON);\n    expect(ETCD3.Etcd3).toHaveBeenCalledTimes(1);\n    expect(ETCD3.Etcd3).toHaveBeenCalledWith(undefined);\n    expect(Serializers.JSON.prototype.init).toHaveBeenCalledTimes(1);\n    expect(Serializers.JSON.prototype.init).toHaveBeenCalledWith(broker);\n    expect(BaseDiscoverer.prototype.init).toHaveBeenCalledTimes(1);\n    expect(BaseDiscoverer.prototype.init).toHaveBeenCalledWith(broker.registry);\n  });","file":"unit/registry/discoverers/etcd3.spec.js","skipped":false,"dir":"test"},{"name":"init with opts","suites":["Test Etcd3Discoverer 'init' method"],"updatePoint":{"line":103,"column":20},"line":103,"code":"  it(\"init with opts\", () => {\n    broker.namespace = \"testing\";\n    const discoverer = new Etcd3Discoverer({\n      etcd: {\n        hosts: [\"localhost:2379\"]\n      }\n    });\n    ETCD3.Etcd3.mockClear();\n    Serializers.JSON.prototype.init.mockClear(); // ---- ^ SETUP ^ ---\n\n    discoverer.init(broker.registry); // ---- ˇ ASSERTS ˇ ---\n\n    expect(discoverer.instanceHash).toBe(\"12345678\");\n    expect(discoverer.PREFIX).toBe(\"moleculer-testing/discovery\");\n    expect(discoverer.BEAT_KEY).toBe(\"moleculer-testing/discovery/beats/node-99/12345678\");\n    expect(discoverer.INFO_KEY).toBe(\"moleculer-testing/discovery/info/node-99\");\n    expect(discoverer.client).toBeInstanceOf(ETCD3.Etcd3);\n    expect(discoverer.serializer).toBeInstanceOf(Serializers.JSON);\n    expect(ETCD3.Etcd3).toHaveBeenCalledTimes(1);\n    expect(ETCD3.Etcd3).toHaveBeenCalledWith({\n      hosts: [\"localhost:2379\"]\n    });\n    expect(Serializers.JSON.prototype.init).toHaveBeenCalledTimes(1);\n    expect(Serializers.JSON.prototype.init).toHaveBeenCalledWith(broker);\n  });","file":"unit/registry/discoverers/etcd3.spec.js","skipped":false,"dir":"test"},{"name":"should call client quit","suites":["Test Etcd3Discoverer 'stop' method"],"updatePoint":{"line":130,"column":29},"line":130,"code":"  it(\"should call client quit\", async () => {\n    const broker = new ServiceBroker({\n      logger: false\n    });\n    const registry = broker.registry;\n    const discoverer = new Etcd3Discoverer();\n    discoverer.init(registry);\n    discoverer.client.close = jest.fn();\n    jest.spyOn(BaseDiscoverer.prototype, \"stop\"); // ---- ^ SETUP ^ ---\n\n    await discoverer.stop(); // ---- ˇ ASSERTS ˇ ---\n\n    expect(discoverer.client.close).toBeCalledTimes(1);\n    expect(discoverer.client.close).toBeCalledWith();\n    expect(BaseDiscoverer.prototype.stop).toHaveBeenCalledTimes(1);\n  });","file":"unit/registry/discoverers/etcd3.spec.js","skipped":false,"dir":"test"},{"name":"should do nothing if no client","suites":["Test Etcd3Discoverer 'stop' method"],"updatePoint":{"line":146,"column":36},"line":146,"code":"  it(\"should do nothing if no client\", async () => {\n    const broker = new ServiceBroker({\n      logger: false\n    });\n    const registry = broker.registry;\n    const discoverer = new Etcd3Discoverer(); // ---- ^ SETUP ^ ---\n\n    await discoverer.stop();\n  });","file":"unit/registry/discoverers/etcd3.spec.js","skipped":false,"dir":"test"},{"name":"should register metrics","suites":["Test Etcd3Discoverer 'registerMoleculerMetrics' method"],"updatePoint":{"line":157,"column":29},"line":157,"code":"  it(\"should register metrics\", async () => {\n    const broker = new ServiceBroker({\n      logger: false\n    });\n    const registry = broker.registry;\n    const discoverer = new Etcd3Discoverer();\n    discoverer.init(registry);\n    jest.spyOn(broker.metrics, \"register\"); // ---- ^ SETUP ^ ---\n\n    await discoverer.registerMoleculerMetrics(); // ---- ˇ ASSERTS ˇ ---\n\n    expect(broker.metrics.register).toBeCalledTimes(2);\n    expect(broker.metrics.register).toBeCalledWith({\n      name: \"moleculer.discoverer.etcd.collect.total\",\n      rate: true,\n      type: \"counter\",\n      description: \"Number of Service Registry fetching from etcd\"\n    });\n    expect(broker.metrics.register).toBeCalledWith({\n      name: \"moleculer.discoverer.etcd.collect.time\",\n      quantiles: true,\n      type: \"histogram\",\n      unit: \"millisecond\",\n      description: \"Time of Service Registry fetching from etcd\"\n    });\n  });","file":"unit/registry/discoverers/etcd3.spec.js","skipped":false,"dir":"test"},{"name":"should create leaseBeat & set HB key on etcd3 & call collectNodes","suites":["Test Etcd3Discoverer 'sendHeartbeat' method"],"updatePoint":{"line":215,"column":71},"line":215,"code":"  it(\"should create leaseBeat & set HB key on etcd3 & call collectNodes\", async () => {\n    discoverer.logger.error.mockClear();\n    broker.metrics.increment.mockClear();\n    broker.metrics.timer.mockClear();\n    discoverer.serializer.serialize.mockClear();\n    discoverer.collectOnlineNodes.mockClear(); // ---- ^ SETUP ^ ---\n\n    await discoverer.sendHeartbeat(); // ---- ˇ ASSERTS ˇ ---\n\n    expect(broker.metrics.timer).toBeCalledTimes(1);\n    expect(broker.metrics.timer).toBeCalledWith(\"moleculer.discoverer.etcd.collect.time\");\n    expect(discoverer.client.lease).toBeCalledTimes(1);\n    expect(discoverer.client.lease).toBeCalledWith(30);\n    expect(fakeLease.grant).toBeCalledTimes(1);\n    expect(discoverer.leaseBeat).toBe(fakeLease);\n    expect(discoverer.serializer.serialize).toBeCalledTimes(1);\n    expect(fakeLease.put).toBeCalledTimes(1);\n    expect(fakeLease.put).toBeCalledWith(\"moleculer/discovery/beats/node-99/12345678/1\");\n    expect(fakeLease.value).toBeCalledTimes(1);\n    expect(fakeLease.value).toBeCalledWith({\n      cpu: null,\n      sender: \"node-99\",\n      seq: 1,\n      ver: \"4\",\n      instanceID: \"1234567890\"\n    });\n    expect(fakeLease.on).toBeCalledTimes(1);\n    expect(discoverer.lastBeatSeq).toBe(1);\n    expect(discoverer.collectOnlineNodes).toBeCalledTimes(1);\n    expect(discoverer.logger.error).toBeCalledTimes(0);\n    expect(broker.metrics.increment).toBeCalledTimes(1);\n    expect(broker.metrics.increment).toBeCalledWith(\"moleculer.discoverer.etcd.collect.total\");\n  });","file":"unit/registry/discoverers/etcd3.spec.js","skipped":false,"dir":"test"},{"name":"should set HB key without del if seq is same","suites":["Test Etcd3Discoverer 'sendHeartbeat' method"],"updatePoint":{"line":248,"column":50},"line":248,"code":"  it(\"should set HB key without del if seq is same\", async () => {\n    discoverer.logger.error.mockClear();\n    broker.metrics.increment.mockClear();\n    broker.metrics.timer.mockClear();\n    discoverer.serializer.serialize.mockClear();\n    discoverer.client.lease.mockClear();\n    discoverer.collectOnlineNodes.mockClear();\n    fakeLease.grant.mockClear();\n    fakeLease.revoke.mockClear();\n    fakeLease.put.mockClear();\n    fakeLease.on.mockClear();\n    fakeLease.value.mockClear(); // ---- ^ SETUP ^ ---\n\n    await discoverer.sendHeartbeat(); // ---- ˇ ASSERTS ˇ ---\n\n    expect(broker.metrics.timer).toBeCalledTimes(1);\n    expect(broker.metrics.timer).toBeCalledWith(\"moleculer.discoverer.etcd.collect.time\");\n    expect(discoverer.client.lease).toBeCalledTimes(0);\n    expect(fakeLease.grant).toBeCalledTimes(0);\n    expect(discoverer.serializer.serialize).toBeCalledTimes(1);\n    expect(fakeLease.put).toBeCalledTimes(1);\n    expect(fakeLease.put).toBeCalledWith(\"moleculer/discovery/beats/node-99/12345678/1\");\n    expect(fakeLease.value).toBeCalledTimes(1);\n    expect(fakeLease.value).toBeCalledWith({\n      cpu: null,\n      sender: \"node-99\",\n      seq: 1,\n      ver: \"4\",\n      instanceID: \"1234567890\"\n    });\n    expect(fakeLease.on).toBeCalledTimes(0);\n    expect(discoverer.lastBeatSeq).toBe(1);\n    expect(discoverer.collectOnlineNodes).toBeCalledTimes(1);\n    expect(discoverer.logger.error).toBeCalledTimes(0);\n    expect(broker.metrics.increment).toBeCalledTimes(1);\n    expect(broker.metrics.increment).toBeCalledWith(\"moleculer.discoverer.etcd.collect.total\");\n  });","file":"unit/registry/discoverers/etcd3.spec.js","skipped":false,"dir":"test"},{"name":"should recreate lease if seq is same","suites":["Test Etcd3Discoverer 'sendHeartbeat' method"],"updatePoint":{"line":285,"column":42},"line":285,"code":"  it(\"should recreate lease if seq is same\", async () => {\n    discoverer.logger.error.mockClear();\n    broker.metrics.increment.mockClear();\n    broker.metrics.timer.mockClear();\n    discoverer.serializer.serialize.mockClear();\n    discoverer.client.lease = jest.fn(() => fakeLease2);\n    discoverer.collectOnlineNodes.mockClear();\n    fakeLease.grant.mockClear();\n    fakeLease.revoke.mockClear();\n    fakeLease.put.mockClear();\n    fakeLease.on.mockClear();\n    fakeLease.value.mockClear();\n    discoverer.localNode.seq++;\n    discoverer.leaseBeat = fakeLease; // ---- ^ SETUP ^ ---\n\n    await discoverer.sendHeartbeat(); // ---- ˇ ASSERTS ˇ ---\n\n    expect(fakeLease.revoke).toBeCalledTimes(1);\n    expect(fakeLease.on).toBeCalledTimes(0);\n    expect(discoverer.client.lease).toBeCalledTimes(1);\n    expect(discoverer.client.lease).toBeCalledWith(30);\n    expect(fakeLease2.grant).toBeCalledTimes(1);\n    expect(discoverer.leaseBeat).toBe(fakeLease2);\n    expect(discoverer.serializer.serialize).toBeCalledTimes(1);\n    expect(fakeLease2.put).toBeCalledTimes(1);\n    expect(fakeLease2.put).toBeCalledWith(\"moleculer/discovery/beats/node-99/12345678/2\");\n    expect(fakeLease2.value).toBeCalledTimes(1);\n    expect(fakeLease2.value).toBeCalledWith({\n      cpu: null,\n      sender: \"node-99\",\n      seq: 2,\n      ver: \"4\",\n      instanceID: \"1234567890\"\n    });\n    expect(fakeLease2.on).toBeCalledTimes(1);\n    expect(discoverer.lastBeatSeq).toBe(2);\n    expect(discoverer.collectOnlineNodes).toBeCalledTimes(1);\n    expect(discoverer.logger.error).toBeCalledTimes(0);\n  });","file":"unit/registry/discoverers/etcd3.spec.js","skipped":false,"dir":"test"},{"name":"should broadcast an error","suites":["Test Etcd3Discoverer 'sendHeartbeat' method"],"updatePoint":{"line":324,"column":31},"line":324,"code":"  it(\"should broadcast an error\", async () => {\n    discoverer.collectOnlineNodes = jest.fn(() => Promise.reject(new Error(\"Ups!\")));\n    broker.broadcastLocal = jest.fn(); // ---- ^ SETUP ^ ---\n\n    await discoverer.sendHeartbeat(); // ---- ˇ ASSERTS ˇ ---\n\n    expect(discoverer.broker.broadcastLocal).toHaveBeenCalledTimes(1);\n    expect(broker.broadcastLocal).toHaveBeenCalledWith(\"$discoverer.error\", {\n      error: expect.any(Error),\n      module: \"discoverer\",\n      type: C.FAILED_COLLECT_KEYS\n    });\n  });","file":"unit/registry/discoverers/etcd3.spec.js","skipped":false,"dir":"test"},{"name":"should handle empty list","suites":["Test Etcd3Discoverer 'collectOnlineNodes' method"],"updatePoint":{"line":371,"column":30},"line":371,"code":"  it(\"should handle empty list\", async () => {\n    discoverer.opts.fullCheck = 0;\n    broker.registry.nodes.list = jest.fn(() => []); // ---- ^ SETUP ^ ---\n\n    await discoverer.collectOnlineNodes(); // ---- ˇ ASSERTS ˇ ---\n\n    expect(broker.registry.nodes.list).toBeCalledTimes(1);\n    expect(broker.registry.nodes.list).toBeCalledWith({\n      onlyAvailable: true,\n      withServices: false\n    });\n    expect(discoverer.client.getAll).toBeCalledTimes(1);\n    expect(fakeClient.prefix).toBeCalledTimes(1);\n    expect(fakeClient.prefix).toBeCalledWith(\"moleculer/discovery/beats/\");\n    expect(fakeClient.keys).toBeCalledTimes(1);\n    expect(discoverer.remoteNodeDisconnected).toBeCalledTimes(0);\n    expect(discoverer.heartbeatReceived).toBeCalledTimes(0);\n  });","file":"unit/registry/discoverers/etcd3.spec.js","skipped":false,"dir":"test"},{"name":"should disconnect previous nodes","suites":["Test Etcd3Discoverer 'collectOnlineNodes' method"],"updatePoint":{"line":389,"column":38},"line":389,"code":"  it(\"should disconnect previous nodes\", async () => {\n    discoverer.opts.scanLength = 50;\n    broker.registry.nodes.list = jest.fn(() => [{\n      id: \"node-1\"\n    }, {\n      id: \"node-2\"\n    }, {\n      id: \"node-99\"\n    }]); // ---- ^ SETUP ^ ---\n\n    await discoverer.collectOnlineNodes(); // ---- ˇ ASSERTS ˇ ---\n\n    expect(broker.registry.nodes.list).toBeCalledTimes(1);\n    expect(broker.registry.nodes.list).toBeCalledWith({\n      onlyAvailable: true,\n      withServices: false\n    });\n    expect(discoverer.client.getAll).toBeCalledTimes(1);\n    expect(fakeClient.prefix).toBeCalledTimes(1);\n    expect(fakeClient.prefix).toBeCalledWith(\"moleculer/discovery/beats/\");\n    expect(fakeClient.keys).toBeCalledTimes(1);\n    expect(discoverer.heartbeatReceived).toBeCalledTimes(0);\n    expect(discoverer.remoteNodeDisconnected).toBeCalledTimes(2);\n    expect(discoverer.remoteNodeDisconnected).toBeCalledWith(\"node-1\", true);\n    expect(discoverer.remoteNodeDisconnected).toBeCalledWith(\"node-2\", true);\n  });","file":"unit/registry/discoverers/etcd3.spec.js","skipped":false,"dir":"test"},{"name":"should add new nodes (full check)","suites":["Test Etcd3Discoverer 'collectOnlineNodes' method"],"updatePoint":{"line":415,"column":39},"line":415,"code":"  it(\"should add new nodes (full check)\", async () => {\n    discoverer.opts.fullCheck = 1;\n    broker.registry.nodes.list = jest.fn(() => [{\n      id: \"node-1\"\n    }, {\n      id: \"node-2\"\n    }, {\n      id: \"node-3\"\n    }, {\n      id: \"node-99\"\n    }]);\n    fakeClient.buffers = jest.fn(() => Promise.resolve([{\n      instanceID: \"111\",\n      sender: \"node-1\",\n      seq: 1\n    }, {\n      instanceID: \"222\",\n      sender: \"node-2\",\n      seq: 2\n    }, {\n      instanceID: \"999\",\n      sender: \"node-99\",\n      seq: 9\n    }])); // ---- ^ SETUP ^ ---\n\n    await discoverer.collectOnlineNodes(); // ---- ˇ ASSERTS ˇ ---\n\n    expect(discoverer.client.getAll).toBeCalledTimes(1);\n    expect(fakeClient.prefix).toBeCalledTimes(1);\n    expect(fakeClient.prefix).toBeCalledWith(\"moleculer/discovery/beats/\");\n    expect(fakeClient.buffers).toBeCalledTimes(1);\n    expect(fakeClient.keys).toBeCalledTimes(0);\n    expect(discoverer.heartbeatReceived).toBeCalledTimes(2);\n    expect(discoverer.heartbeatReceived).toBeCalledWith(\"node-1\", {\n      instanceID: \"111\",\n      sender: \"node-1\",\n      seq: 1\n    });\n    expect(discoverer.heartbeatReceived).toBeCalledWith(\"node-2\", {\n      instanceID: \"222\",\n      sender: \"node-2\",\n      seq: 2\n    });\n    expect(discoverer.remoteNodeDisconnected).toBeCalledTimes(1);\n    expect(discoverer.remoteNodeDisconnected).toBeCalledWith(\"node-3\", true);\n  });","file":"unit/registry/discoverers/etcd3.spec.js","skipped":false,"dir":"test"},{"name":"should add new nodes (fast check)","suites":["Test Etcd3Discoverer 'collectOnlineNodes' method"],"updatePoint":{"line":461,"column":39},"line":461,"code":"  it(\"should add new nodes (fast check)\", async () => {\n    discoverer.opts.fullCheck = 0;\n    broker.registry.nodes.list = jest.fn(() => [{\n      id: \"node-1\"\n    }, {\n      id: \"node-2\"\n    }, {\n      id: \"node-3\"\n    }, {\n      id: \"node-99\"\n    }]);\n    fakeClient.keys = jest.fn(() => Promise.resolve([\"moleculer/discovery/beats/node-1/111/1\", \"moleculer/discovery/beats/node-2/222/2\", \"moleculer/discovery/beats/node-99/999/9\"])); // ---- ^ SETUP ^ ---\n\n    await discoverer.collectOnlineNodes(); // ---- ˇ ASSERTS ˇ ---\n\n    expect(discoverer.client.getAll).toBeCalledTimes(1);\n    expect(fakeClient.prefix).toBeCalledTimes(1);\n    expect(fakeClient.prefix).toBeCalledWith(\"moleculer/discovery/beats/\");\n    expect(fakeClient.buffers).toBeCalledTimes(0);\n    expect(fakeClient.keys).toBeCalledTimes(1);\n    expect(discoverer.heartbeatReceived).toBeCalledTimes(2);\n    expect(discoverer.heartbeatReceived).toBeCalledWith(\"node-1\", {\n      instanceID: \"111\",\n      sender: \"node-1\",\n      seq: 1,\n      key: \"moleculer/discovery/beats/node-1/111/1\"\n    });\n    expect(discoverer.heartbeatReceived).toBeCalledWith(\"node-2\", {\n      instanceID: \"222\",\n      sender: \"node-2\",\n      seq: 2,\n      key: \"moleculer/discovery/beats/node-2/222/2\"\n    });\n    expect(discoverer.remoteNodeDisconnected).toBeCalledTimes(1);\n    expect(discoverer.remoteNodeDisconnected).toBeCalledWith(\"node-3\", true);\n  });","file":"unit/registry/discoverers/etcd3.spec.js","skipped":false,"dir":"test"},{"name":"should call processRemoteNodeInfo if data received","suites":["Test Etcd3Discoverer 'discoverNode' method"],"updatePoint":{"line":523,"column":56},"line":523,"code":"  it(\"should call processRemoteNodeInfo if data received\", async () => {\n    // ---- ^ SETUP ^ ---\n    await discoverer.discoverNode(\"node-1\"); // ---- ˇ ASSERTS ˇ ---\n\n    expect(discoverer.client.get).toBeCalledTimes(1);\n    expect(discoverer.client.get).toBeCalledWith(\"moleculer/discovery/info/node-1\");\n    expect(buffer).toBeCalledTimes(1);\n    expect(discoverer.logger.warn).toBeCalledTimes(0);\n    expect(discoverer.serializer.deserialize).toBeCalledTimes(1);\n    expect(discoverer.serializer.deserialize).toBeCalledWith(\"fake-data\", P.PACKET_INFO);\n    expect(discoverer.processRemoteNodeInfo).toBeCalledTimes(1);\n    expect(discoverer.processRemoteNodeInfo).toBeCalledWith(\"node-1\", \"fake-data\");\n  });","file":"unit/registry/discoverers/etcd3.spec.js","skipped":false,"dir":"test"},{"name":"should handle if data is invalid","suites":["Test Etcd3Discoverer 'discoverNode' method"],"updatePoint":{"line":536,"column":38},"line":536,"code":"  it(\"should handle if data is invalid\", async () => {\n    discoverer.serializer.deserialize = jest.fn(() => {\n      throw new Error(\"Unexpected token\");\n    }); // ---- ^ SETUP ^ ---\n\n    await discoverer.discoverNode(\"node-1\"); // ---- ˇ ASSERTS ˇ ---\n\n    expect(discoverer.client.get).toBeCalledTimes(1);\n    expect(discoverer.client.get).toBeCalledWith(\"moleculer/discovery/info/node-1\");\n    expect(buffer).toBeCalledTimes(1);\n    expect(discoverer.logger.warn).toBeCalledTimes(1);\n    expect(discoverer.serializer.deserialize).toBeCalledTimes(1);\n    expect(discoverer.serializer.deserialize).toBeCalledWith(\"fake-data\", P.PACKET_INFO);\n    expect(discoverer.processRemoteNodeInfo).toBeCalledTimes(0);\n  });","file":"unit/registry/discoverers/etcd3.spec.js","skipped":false,"dir":"test"},{"name":"should handle if no data","suites":["Test Etcd3Discoverer 'discoverNode' method"],"updatePoint":{"line":551,"column":30},"line":551,"code":"  it(\"should handle if no data\", async () => {\n    discoverer.serializer.deserialize = jest.fn(() => \"fake-data\");\n    buffer = jest.fn(async () => null); // ---- ^ SETUP ^ ---\n\n    await discoverer.discoverNode(\"node-1\"); // ---- ˇ ASSERTS ˇ ---\n\n    expect(discoverer.client.get).toBeCalledTimes(1);\n    expect(discoverer.client.get).toBeCalledWith(\"moleculer/discovery/info/node-1\");\n    expect(buffer).toBeCalledTimes(1);\n    expect(discoverer.logger.warn).toBeCalledTimes(1);\n    expect(discoverer.logger.warn).toBeCalledWith(\"No INFO for 'node-1' node in registry.\");\n    expect(discoverer.serializer.deserialize).toBeCalledTimes(0);\n    expect(discoverer.processRemoteNodeInfo).toBeCalledTimes(0);\n  });","file":"unit/registry/discoverers/etcd3.spec.js","skipped":false,"dir":"test"},{"name":"should call collectOnlineNodes","suites":["Test Etcd3Discoverer 'discoverAllNodes' method"],"updatePoint":{"line":567,"column":36},"line":567,"code":"  it(\"should call collectOnlineNodes\", async () => {\n    const broker = new ServiceBroker({\n      logger: false,\n      transporter: \"Fake\"\n    });\n    const discoverer = new Etcd3Discoverer();\n    discoverer.init(broker.registry);\n    discoverer.collectOnlineNodes = jest.fn(() => Promise.resolve());\n    await discoverer.discoverAllNodes();\n    expect(discoverer.collectOnlineNodes).toBeCalledTimes(1);\n    expect(discoverer.collectOnlineNodes).toBeCalledWith();\n    await discoverer.stop();\n  });","file":"unit/registry/discoverers/etcd3.spec.js","skipped":false,"dir":"test"},{"name":"should send INFO & call recreateInfoUpdateTimer & beat","suites":["Test Etcd3Discoverer 'sendLocalNodeInfo' method"],"updatePoint":{"line":630,"column":60},"line":630,"code":"  it(\"should send INFO & call recreateInfoUpdateTimer & beat\", async () => {\n    // ---- ^ SETUP ^ ---\n    await discoverer.sendLocalNodeInfo(); // ---- ˇ ASSERTS ˇ ---\n\n    expect(broker.getLocalNodeInfo).toBeCalledTimes(1);\n    expect(discoverer.client.lease).toBeCalledTimes(1);\n    expect(discoverer.client.lease).toBeCalledWith(60);\n    expect(fakeLease.grant).toBeCalledTimes(1);\n    expect(discoverer.leaseInfo).toBe(fakeLease);\n    expect(discoverer.serializer.serialize).toBeCalledTimes(1);\n    expect(fakeLease.put).toBeCalledTimes(1);\n    expect(fakeLease.put).toBeCalledWith(\"moleculer/discovery/info/node-99\");\n    expect(fakeLease.value).toBeCalledTimes(1);\n    expect(fakeLease.value).toBeCalledWith({\n      sender: \"node-99\",\n      ver: \"4\",\n      a: 5\n    });\n    expect(fakeLease.on).toBeCalledTimes(1);\n    expect(discoverer.lastInfoSeq).toBe(1);\n    expect(discoverer.beat).toBeCalledTimes(1);\n    expect(discoverer.logger.error).toBeCalledTimes(0);\n  });","file":"unit/registry/discoverers/etcd3.spec.js","skipped":false,"dir":"test"},{"name":"should send INFO & call recreateInfoUpdateTimer & NOT beat","suites":["Test Etcd3Discoverer 'sendLocalNodeInfo' method"],"updatePoint":{"line":653,"column":64},"line":653,"code":"  it(\"should send INFO & call recreateInfoUpdateTimer & NOT beat\", async () => {\n    // ---- ^ SETUP ^ ---\n    await discoverer.sendLocalNodeInfo(\"node-10\"); // ---- ˇ ASSERTS ˇ ---\n\n    expect(broker.getLocalNodeInfo).toBeCalledTimes(1);\n    expect(discoverer.client.lease).toBeCalledTimes(0);\n    expect(discoverer.serializer.serialize).toBeCalledTimes(1);\n    expect(fakeLease.put).toBeCalledTimes(1);\n    expect(fakeLease.put).toBeCalledWith(\"moleculer/discovery/info/node-99\");\n    expect(fakeLease.value).toBeCalledTimes(1);\n    expect(fakeLease.value).toBeCalledWith({\n      sender: \"node-99\",\n      ver: \"4\",\n      a: 5\n    });\n    expect(fakeLease.on).toBeCalledTimes(0);\n    expect(discoverer.lastInfoSeq).toBe(1);\n    expect(discoverer.beat).toBeCalledTimes(0);\n    expect(discoverer.logger.error).toBeCalledTimes(0);\n  });","file":"unit/registry/discoverers/etcd3.spec.js","skipped":false,"dir":"test"},{"name":"should recreate lease if seq is same","suites":["Test Etcd3Discoverer 'sendLocalNodeInfo' method"],"updatePoint":{"line":673,"column":42},"line":673,"code":"  it(\"should recreate lease if seq is same\", async () => {\n    discoverer.localNode.seq++;\n    discoverer.leaseInfo = fakeLease;\n    discoverer.client.lease = jest.fn(() => fakeLease2); // ---- ^ SETUP ^ ---\n\n    await discoverer.sendLocalNodeInfo(); // ---- ˇ ASSERTS ˇ ---\n\n    expect(fakeLease.revoke).toBeCalledTimes(1);\n    expect(fakeLease.on).toBeCalledTimes(0);\n    expect(discoverer.client.lease).toBeCalledTimes(1);\n    expect(discoverer.client.lease).toBeCalledWith(60);\n    expect(fakeLease2.on).toBeCalledTimes(1);\n    expect(fakeLease2.grant).toBeCalledTimes(1);\n    expect(discoverer.leaseInfo).toBe(fakeLease2);\n    expect(discoverer.serializer.serialize).toBeCalledTimes(1);\n    expect(fakeLease2.put).toBeCalledTimes(1);\n    expect(fakeLease2.put).toBeCalledWith(\"moleculer/discovery/info/node-99\");\n    expect(fakeLease2.value).toBeCalledTimes(1);\n    expect(fakeLease2.value).toBeCalledWith({\n      sender: \"node-99\",\n      ver: \"4\",\n      a: 5\n    });\n    expect(discoverer.lastInfoSeq).toBe(2);\n    expect(discoverer.beat).toBeCalledTimes(1);\n    expect(discoverer.logger.error).toBeCalledTimes(0);\n  });","file":"unit/registry/discoverers/etcd3.spec.js","skipped":false,"dir":"test"},{"name":"should recreate lease if seq is same & call makeBalancedSubscriptions","suites":["Test Etcd3Discoverer 'sendLocalNodeInfo' method"],"updatePoint":{"line":700,"column":75},"line":700,"code":"  it(\"should recreate lease if seq is same & call makeBalancedSubscriptions\", async () => {\n    broker.transit.tx.makeBalancedSubscriptions = jest.fn(() => Promise.resolve());\n    broker.options.disableBalancer = true;\n    discoverer.localNode.seq++;\n    discoverer.leaseInfo = fakeLease;\n    discoverer.client.lease = jest.fn(() => fakeLease2);\n    fakeLease2.grant.mockClear(); // ---- ^ SETUP ^ ---\n\n    await discoverer.sendLocalNodeInfo(); // ---- ˇ ASSERTS ˇ ---\n\n    expect(fakeLease.revoke).toBeCalledTimes(1);\n    expect(fakeLease.on).toBeCalledTimes(0);\n    expect(discoverer.client.lease).toBeCalledTimes(1);\n    expect(discoverer.client.lease).toBeCalledWith(60);\n    expect(fakeLease2.on).toBeCalledTimes(1);\n    expect(fakeLease2.grant).toBeCalledTimes(1);\n    expect(discoverer.leaseInfo).toBe(fakeLease2);\n    expect(broker.transit.tx.makeBalancedSubscriptions).toBeCalledTimes(1);\n    expect(discoverer.serializer.serialize).toBeCalledTimes(1);\n    expect(fakeLease2.put).toBeCalledTimes(1);\n    expect(fakeLease2.put).toBeCalledWith(\"moleculer/discovery/info/node-99\");\n    expect(fakeLease2.value).toBeCalledTimes(1);\n    expect(fakeLease2.value).toBeCalledWith({\n      sender: \"node-99\",\n      ver: \"4\",\n      a: 5\n    });\n    expect(discoverer.lastInfoSeq).toBe(3);\n    expect(discoverer.beat).toBeCalledTimes(1);\n    expect(discoverer.logger.error).toBeCalledTimes(0);\n  });","file":"unit/registry/discoverers/etcd3.spec.js","skipped":false,"dir":"test"},{"name":"should handle error","suites":["Test Etcd3Discoverer 'sendLocalNodeInfo' method"],"updatePoint":{"line":731,"column":25},"line":731,"code":"  it(\"should handle error\", async () => {\n    const err = new Error(\"Something happened\");\n    fakeLease2.value = jest.fn(() => Promise.reject(err)); // ---- ^ SETUP ^ ---\n\n    await discoverer.sendLocalNodeInfo(); // ---- ˇ ASSERTS ˇ ---\n\n    expect(fakeLease2.put).toBeCalledTimes(1);\n    expect(discoverer.beat).toBeCalledTimes(0);\n    expect(discoverer.logger.error).toBeCalledTimes(1);\n    expect(discoverer.logger.error).toBeCalledWith(\"Unable to send INFO to etcd server\", err);\n  });","file":"unit/registry/discoverers/etcd3.spec.js","skipped":false,"dir":"test"},{"name":"should broadcast an error","suites":["Test Etcd3Discoverer 'sendLocalNodeInfo' method"],"updatePoint":{"line":742,"column":31},"line":742,"code":"  it(\"should broadcast an error\", async () => {\n    const err = new Error(\"Something happened\");\n    discoverer.client.setex = jest.fn(() => Promise.reject(err));\n    broker.broadcastLocal = jest.fn(); // ---- ^ SETUP ^ ---\n\n    await discoverer.sendLocalNodeInfo(); // ---- ˇ ASSERTS ˇ ---\n\n    expect(discoverer.broker.broadcastLocal).toHaveBeenCalledTimes(1);\n    expect(broker.broadcastLocal).toHaveBeenCalledWith(\"$discoverer.error\", {\n      error: err,\n      module: \"discoverer\",\n      type: C.FAILED_SEND_INFO\n    });\n  });","file":"unit/registry/discoverers/etcd3.spec.js","skipped":false,"dir":"test"},{"name":"should call localNodeDisconnected & del & scanClean","suites":["Test Etcd3Discoverer 'localNodeDisconnected' method"],"updatePoint":{"line":758,"column":57},"line":758,"code":"  it(\"should call localNodeDisconnected & del & scanClean\", async () => {\n    const broker = new ServiceBroker({\n      logger: false,\n      nodeID: \"node-99\"\n    });\n    broker.instanceID = \"1234567890\";\n    const discoverer = new Etcd3Discoverer();\n    discoverer.init(broker.registry);\n    const fakeDelete = {\n      key: jest.fn()\n    };\n    discoverer.client.delete = jest.fn(() => fakeDelete);\n    discoverer.leaseBeat = {\n      revoke: jest.fn()\n    };\n    discoverer.leaseInfo = {\n      revoke: jest.fn()\n    };\n    jest.spyOn(BaseDiscoverer.prototype, \"localNodeDisconnected\");\n    await discoverer.localNodeDisconnected();\n    expect(BaseDiscoverer.prototype.localNodeDisconnected).toBeCalledTimes(1);\n    expect(discoverer.client.delete).toBeCalledTimes(2);\n    expect(fakeDelete.key).toBeCalledTimes(2);\n    expect(fakeDelete.key).toBeCalledWith(\"moleculer/discovery/info/node-99\");\n    expect(fakeDelete.key).toBeCalledWith(\"moleculer/discovery/beats/node-99/12345678\");\n    expect(discoverer.leaseBeat.revoke).toBeCalledTimes(1);\n    expect(discoverer.leaseInfo.revoke).toBeCalledTimes(1);\n    await discoverer.stop();\n  });","file":"unit/registry/discoverers/etcd3.spec.js","skipped":false,"dir":"test"},{"name":"should resolve default Local discoverer","suites":["Test Discoverers resolver"],"updatePoint":{"line":8,"column":45},"line":8,"code":"  it(\"should resolve default Local discoverer\", () => {\n    const discoverer = Discoverers.resolve();\n    expect(discoverer).toBeInstanceOf(Discoverers.Local);\n  });","file":"unit/registry/discoverers/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve Local reporter from string","suites":["Test Discoverers resolver"],"updatePoint":{"line":12,"column":47},"line":12,"code":"  it(\"should resolve Local reporter from string\", () => {\n    const discoverer = Discoverers.resolve(\"Local\");\n    expect(discoverer).toBeInstanceOf(Discoverers.Local);\n  });","file":"unit/registry/discoverers/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve Local discoverer from obj","suites":["Test Discoverers resolver"],"updatePoint":{"line":16,"column":46},"line":16,"code":"  it(\"should resolve Local discoverer from obj\", () => {\n    const options = {\n      heartbeatInterval: 8\n    };\n    const discoverer = Discoverers.resolve({\n      type: \"Local\",\n      options\n    });\n    expect(discoverer).toBeInstanceOf(Discoverers.Local);\n    expect(discoverer.opts).toEqual(expect.objectContaining({\n      heartbeatInterval: 8\n    }));\n  });","file":"unit/registry/discoverers/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve Local discoverer from instance","suites":["Test Discoverers resolver"],"updatePoint":{"line":29,"column":51},"line":29,"code":"  it(\"should resolve Local discoverer from instance\", () => {\n    const instance = new Discoverers.Local();\n    const discoverer = Discoverers.resolve(instance);\n    expect(discoverer).toBe(instance);\n  });","file":"unit/registry/discoverers/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve Etcd3 reporter from string","suites":["Test Discoverers resolver"],"updatePoint":{"line":34,"column":47},"line":34,"code":"  it(\"should resolve Etcd3 reporter from string\", () => {\n    const discoverer = Discoverers.resolve(\"Etcd3\");\n    expect(discoverer).toBeInstanceOf(Discoverers.Etcd3);\n  });","file":"unit/registry/discoverers/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve Etcd3 reporter from connection string","suites":["Test Discoverers resolver"],"updatePoint":{"line":38,"column":58},"line":38,"code":"  it(\"should resolve Etcd3 reporter from connection string\", () => {\n    const discoverer = Discoverers.resolve(\"etcd3://server:2345\");\n    expect(discoverer).toBeInstanceOf(Discoverers.Etcd3);\n    expect(discoverer.opts.etcd).toEqual({\n      hosts: \"server:2345\"\n    });\n  });","file":"unit/registry/discoverers/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve Etcd3 discoverer from obj","suites":["Test Discoverers resolver"],"updatePoint":{"line":45,"column":46},"line":45,"code":"  it(\"should resolve Etcd3 discoverer from obj\", () => {\n    const options = {\n      heartbeatInterval: 8\n    };\n    const discoverer = Discoverers.resolve({\n      type: \"Etcd3\",\n      options\n    });\n    expect(discoverer).toBeInstanceOf(Discoverers.Etcd3);\n    expect(discoverer.opts).toEqual(expect.objectContaining({\n      heartbeatInterval: 8\n    }));\n  });","file":"unit/registry/discoverers/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve Etcd3 discoverer from instance","suites":["Test Discoverers resolver"],"updatePoint":{"line":58,"column":51},"line":58,"code":"  it(\"should resolve Etcd3 discoverer from instance\", () => {\n    const instance = new Discoverers.Etcd3();\n    const discoverer = Discoverers.resolve(instance);\n    expect(discoverer).toBe(instance);\n  });","file":"unit/registry/discoverers/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve Redis reporter from string","suites":["Test Discoverers resolver"],"updatePoint":{"line":63,"column":47},"line":63,"code":"  it(\"should resolve Redis reporter from string\", () => {\n    const discoverer = Discoverers.resolve(\"Redis\");\n    expect(discoverer).toBeInstanceOf(Discoverers.Redis);\n  });","file":"unit/registry/discoverers/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve Redis reporter from connection string","suites":["Test Discoverers resolver"],"updatePoint":{"line":67,"column":58},"line":67,"code":"  it(\"should resolve Redis reporter from connection string\", () => {\n    const discoverer = Discoverers.resolve(\"redis://redis-server:6379\");\n    expect(discoverer).toBeInstanceOf(Discoverers.Redis);\n    expect(discoverer.opts.redis).toEqual(\"redis://redis-server:6379\");\n  });","file":"unit/registry/discoverers/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve Redis discoverer from obj","suites":["Test Discoverers resolver"],"updatePoint":{"line":72,"column":46},"line":72,"code":"  it(\"should resolve Redis discoverer from obj\", () => {\n    const options = {\n      heartbeatInterval: 8\n    };\n    const discoverer = Discoverers.resolve({\n      type: \"Redis\",\n      options\n    });\n    expect(discoverer).toBeInstanceOf(Discoverers.Redis);\n    expect(discoverer.opts).toEqual(expect.objectContaining({\n      heartbeatInterval: 8\n    }));\n  });","file":"unit/registry/discoverers/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve Redis discoverer from instance","suites":["Test Discoverers resolver"],"updatePoint":{"line":85,"column":51},"line":85,"code":"  it(\"should resolve Redis discoverer from instance\", () => {\n    const instance = new Discoverers.Redis();\n    const discoverer = Discoverers.resolve(instance);\n    expect(discoverer).toBe(instance);\n  });","file":"unit/registry/discoverers/index.spec.js","skipped":false,"dir":"test"},{"name":"should throw error if not found by name","suites":["Test Discoverers resolver"],"updatePoint":{"line":90,"column":45},"line":90,"code":"  it(\"should throw error if not found by name\", () => {\n    expect(() => Discoverers.resolve(\"xyz\")).toThrowError(BrokerOptionsError);\n    expect(() => Discoverers.resolve({\n      type: \"xyz\"\n    })).toThrowError(BrokerOptionsError);\n  });","file":"unit/registry/discoverers/index.spec.js","skipped":false,"dir":"test"},{"name":"should throw error if type if not correct","suites":["Test Discoverer register"],"updatePoint":{"line":100,"column":47},"line":100,"code":"  it(\"should throw error if type if not correct\", () => {\n    expect(() => {\n      Discoverers.resolve(\"MyCustom\");\n    }).toThrowError(BrokerOptionsError);\n  });","file":"unit/registry/discoverers/index.spec.js","skipped":false,"dir":"test"},{"name":"should register new type","suites":["Test Discoverer register"],"updatePoint":{"line":105,"column":30},"line":105,"code":"  it(\"should register new type\", () => {\n    Discoverers.register(\"MyCustom\", MyCustom);\n    expect(Discoverers.MyCustom).toBe(MyCustom);\n  });","file":"unit/registry/discoverers/index.spec.js","skipped":false,"dir":"test"},{"name":"should find the new type","suites":["Test Discoverer register"],"updatePoint":{"line":109,"column":30},"line":109,"code":"  it(\"should find the new type\", () => {\n    const discoverer = Discoverers.resolve(\"MyCustom\");\n    expect(discoverer).toBeInstanceOf(MyCustom);\n  });","file":"unit/registry/discoverers/index.spec.js","skipped":false,"dir":"test"},{"name":"should do nothing if no transporter","suites":["Test LocalDiscoverer 'discoverNode' method"],"updatePoint":{"line":8,"column":41},"line":8,"code":"  it(\"should do nothing if no transporter\", async () => {\n    const broker = new ServiceBroker({\n      logger: false\n    });\n    const discoverer = new LocalDiscoverer();\n    discoverer.init(broker.registry);\n    await discoverer.discoverNode(\"node-1\");\n    await discoverer.stop();\n  });","file":"unit/registry/discoverers/local.spec.js","skipped":false,"dir":"test"},{"name":"should call transit.discoverNode if has transporter","suites":["Test LocalDiscoverer 'discoverNode' method"],"updatePoint":{"line":17,"column":57},"line":17,"code":"  it(\"should call transit.discoverNode if has transporter\", async () => {\n    const broker = new ServiceBroker({\n      logger: false,\n      transporter: \"Fake\"\n    });\n    const discoverer = new LocalDiscoverer();\n    discoverer.init(broker.registry);\n    broker.transit.discoverNode = jest.fn(() => Promise.resolve());\n    await discoverer.discoverNode(\"node-1\");\n    expect(broker.transit.discoverNode).toBeCalledTimes(1);\n    expect(broker.transit.discoverNode).toBeCalledWith(\"node-1\");\n    await discoverer.stop();\n  });","file":"unit/registry/discoverers/local.spec.js","skipped":false,"dir":"test"},{"name":"should do nothing if no transporter","suites":["Test LocalDiscoverer 'discoverAllNodes' method"],"updatePoint":{"line":32,"column":41},"line":32,"code":"  it(\"should do nothing if no transporter\", async () => {\n    const broker = new ServiceBroker({\n      logger: false\n    });\n    const discoverer = new LocalDiscoverer();\n    discoverer.init(broker.registry);\n    await discoverer.discoverAllNodes();\n    await discoverer.stop();\n  });","file":"unit/registry/discoverers/local.spec.js","skipped":false,"dir":"test"},{"name":"should call transit.discoverNode if has transporter","suites":["Test LocalDiscoverer 'discoverAllNodes' method"],"updatePoint":{"line":41,"column":57},"line":41,"code":"  it(\"should call transit.discoverNode if has transporter\", async () => {\n    const broker = new ServiceBroker({\n      logger: false,\n      transporter: \"Fake\"\n    });\n    const discoverer = new LocalDiscoverer();\n    discoverer.init(broker.registry);\n    broker.transit.discoverNodes = jest.fn(() => Promise.resolve());\n    await discoverer.discoverAllNodes();\n    expect(broker.transit.discoverNodes).toBeCalledTimes(1);\n    expect(broker.transit.discoverNodes).toBeCalledWith();\n    await discoverer.stop();\n  });","file":"unit/registry/discoverers/local.spec.js","skipped":false,"dir":"test"},{"name":"should do nothing if no transporter","suites":["Test LocalDiscoverer 'sendLocalNodeInfo' method"],"updatePoint":{"line":56,"column":41},"line":56,"code":"  it(\"should do nothing if no transporter\", async () => {\n    const broker = new ServiceBroker({\n      logger: false\n    });\n    const discoverer = new LocalDiscoverer();\n    discoverer.init(broker.registry);\n    await discoverer.sendLocalNodeInfo(\"node-3\");\n    await discoverer.stop();\n  });","file":"unit/registry/discoverers/local.spec.js","skipped":false,"dir":"test"},{"name":"should call transit.sendNodeInfo if has transporter","suites":["Test LocalDiscoverer 'sendLocalNodeInfo' method"],"updatePoint":{"line":65,"column":57},"line":65,"code":"  it(\"should call transit.sendNodeInfo if has transporter\", async () => {\n    const broker = new ServiceBroker({\n      logger: false,\n      transporter: \"Fake\"\n    });\n    const discoverer = new LocalDiscoverer();\n    discoverer.init(broker.registry);\n    const info = {\n      a: 5\n    };\n    broker.getLocalNodeInfo = jest.fn(() => info);\n    broker.transit.sendNodeInfo = jest.fn();\n    broker.transit.tx.makeBalancedSubscriptions = jest.fn();\n    await discoverer.sendLocalNodeInfo(\"node-3\");\n    expect(broker.transit.sendNodeInfo).toBeCalledTimes(1);\n    expect(broker.transit.sendNodeInfo).toBeCalledWith(info, \"node-3\");\n    expect(broker.transit.tx.makeBalancedSubscriptions).toBeCalledTimes(0);\n    await discoverer.stop();\n  });","file":"unit/registry/discoverers/local.spec.js","skipped":false,"dir":"test"},{"name":"should call makeBalancedSubscriptions if has transporter & balancer disabled","suites":["Test LocalDiscoverer 'sendLocalNodeInfo' method"],"updatePoint":{"line":84,"column":82},"line":84,"code":"  it(\"should call makeBalancedSubscriptions if has transporter & balancer disabled\", async () => {\n    const broker = new ServiceBroker({\n      logger: false,\n      transporter: \"Fake\"\n    });\n    const discoverer = new LocalDiscoverer();\n    discoverer.init(broker.registry);\n    const info = {\n      a: 5\n    };\n    broker.getLocalNodeInfo = jest.fn(() => info);\n    broker.transit.sendNodeInfo = jest.fn();\n    broker.transit.tx.makeBalancedSubscriptions = jest.fn(() => Promise.resolve());\n    broker.options.disableBalancer = true;\n    await discoverer.sendLocalNodeInfo();\n    expect(broker.transit.sendNodeInfo).toBeCalledTimes(1);\n    expect(broker.transit.sendNodeInfo).toBeCalledWith(info, undefined);\n    expect(broker.transit.tx.makeBalancedSubscriptions).toBeCalledTimes(1);\n    await discoverer.stop();\n  });","file":"unit/registry/discoverers/local.spec.js","skipped":false,"dir":"test"},{"name":"test constructor without opts","suites":["Test RedisDiscoverer constructor"],"updatePoint":{"line":24,"column":35},"line":24,"code":"  it(\"test constructor without opts\", () => {\n    const discoverer = new RedisDiscoverer();\n    expect(discoverer).toBeDefined();\n    expect(discoverer.opts).toEqual({\n      heartbeatInterval: null,\n      heartbeatTimeout: null,\n      disableHeartbeatChecks: false,\n      disableOfflineNodeRemoving: false,\n      cleanOfflineNodesTimeout: 600,\n      redis: null,\n      serializer: \"JSON\",\n      fullCheck: 10,\n      scanLength: 100,\n      monitor: false\n    });\n    expect(discoverer.idx).toBeDefined(); // random number\n\n    expect(discoverer.client).toBeNull();\n    expect(discoverer.infoUpdateTimer).toBeNull();\n    expect(discoverer.lastInfoSeq).toBe(0);\n    expect(discoverer.lastBeatSeq).toBe(0);\n    expect(discoverer.reconnecting).toBe(false);\n  });","file":"unit/registry/discoverers/redis.spec.js","skipped":false,"dir":"test"},{"name":"test constructor with opts","suites":["Test RedisDiscoverer constructor"],"updatePoint":{"line":47,"column":32},"line":47,"code":"  it(\"test constructor with opts\", () => {\n    const discoverer = new RedisDiscoverer({\n      heartbeatInterval: 5,\n      redis: {\n        host: \"localhost\",\n        port: 6379,\n        db: 3\n      },\n      fullCheck: 0,\n      serializer: \"Notepack\",\n      scanLength: 255,\n      monitor: true\n    });\n    expect(discoverer).toBeDefined();\n    expect(discoverer.opts).toEqual({\n      heartbeatInterval: 5,\n      heartbeatTimeout: null,\n      disableHeartbeatChecks: false,\n      disableOfflineNodeRemoving: false,\n      cleanOfflineNodesTimeout: 600,\n      redis: {\n        host: \"localhost\",\n        port: 6379,\n        db: 3\n      },\n      fullCheck: 0,\n      serializer: \"Notepack\",\n      scanLength: 255,\n      monitor: true\n    });\n    expect(discoverer.idx).toBe(0);\n    expect(discoverer.client).toBeNull();\n    expect(discoverer.infoUpdateTimer).toBeNull();\n    expect(discoverer.lastInfoSeq).toBe(0);\n    expect(discoverer.lastBeatSeq).toBe(0);\n    expect(discoverer.reconnecting).toBe(false);\n  });","file":"unit/registry/discoverers/redis.spec.js","skipped":false,"dir":"test"},{"name":"init without opts","suites":["Test RedisDiscoverer 'init' method"],"updatePoint":{"line":92,"column":23},"line":92,"code":"  it(\"init without opts\", () => {\n    const discoverer = new RedisDiscoverer();\n    Redis.mockClear();\n    Serializers.JSON.prototype.init.mockClear();\n    jest.spyOn(BaseDiscoverer.prototype, \"init\"); // ---- ^ SETUP ^ ---\n\n    discoverer.init(broker.registry); // ---- ˇ ASSERTS ˇ ---\n\n    expect(discoverer.instanceHash).toBe(\"12345678\");\n    expect(discoverer.PREFIX).toBe(\"MOL-DSCVR\");\n    expect(discoverer.BEAT_KEY).toBe(\"MOL-DSCVR-BEAT:node-99|12345678\");\n    expect(discoverer.INFO_KEY).toBe(\"MOL-DSCVR-INFO:node-99\");\n    expect(discoverer.client).toBeInstanceOf(Redis);\n    expect(discoverer.serializer).toBeInstanceOf(Serializers.JSON);\n    expect(Redis).toHaveBeenCalledTimes(1);\n    expect(Redis).toHaveBeenCalledWith(null);\n    expect(Serializers.JSON.prototype.init).toHaveBeenCalledTimes(1);\n    expect(Serializers.JSON.prototype.init).toHaveBeenCalledWith(broker);\n    expect(BaseDiscoverer.prototype.init).toHaveBeenCalledTimes(1);\n    expect(BaseDiscoverer.prototype.init).toHaveBeenCalledWith(broker.registry);\n  });","file":"unit/registry/discoverers/redis.spec.js","skipped":false,"dir":"test"},{"name":"init with opts","suites":["Test RedisDiscoverer 'init' method"],"updatePoint":{"line":113,"column":20},"line":113,"code":"  it(\"init with opts\", () => {\n    broker.namespace = \"TESTING\";\n    const discoverer = new RedisDiscoverer({\n      redis: {\n        host: \"redis-server\",\n        db: 3\n      },\n      monitor: true\n    });\n    Redis.mockClear();\n    Serializers.JSON.prototype.init.mockClear(); // ---- ^ SETUP ^ ---\n\n    discoverer.init(broker.registry); // ---- ˇ ASSERTS ˇ ---\n\n    expect(discoverer.instanceHash).toBe(\"12345678\");\n    expect(discoverer.PREFIX).toBe(\"MOL-TESTING-DSCVR\");\n    expect(discoverer.BEAT_KEY).toBe(\"MOL-TESTING-DSCVR-BEAT:node-99|12345678\");\n    expect(discoverer.INFO_KEY).toBe(\"MOL-TESTING-DSCVR-INFO:node-99\");\n    expect(discoverer.client).toBeInstanceOf(Redis);\n    expect(discoverer.serializer).toBeInstanceOf(Serializers.JSON);\n    expect(Redis).toHaveBeenCalledTimes(1);\n    expect(Redis).toHaveBeenCalledWith({\n      host: \"redis-server\",\n      db: 3\n    });\n    expect(Redis.prototype.monitor).toHaveBeenCalledTimes(1);\n    expect(Serializers.JSON.prototype.init).toHaveBeenCalledTimes(1);\n    expect(Serializers.JSON.prototype.init).toHaveBeenCalledWith(broker);\n  });","file":"unit/registry/discoverers/redis.spec.js","skipped":false,"dir":"test"},{"name":"init Redis cluster client","suites":["Test RedisDiscoverer 'init' method"],"updatePoint":{"line":142,"column":31},"line":142,"code":"  it(\"init Redis cluster client\", () => {\n    broker.namespace = \"TESTING\";\n    const discoverer = new RedisDiscoverer({\n      cluster: {\n        nodes: [\"redis-server\"],\n        options: {\n          db: 3\n        }\n      }\n    });\n    Redis.Cluster.mockClear();\n    Serializers.JSON.prototype.init.mockClear(); // ---- ^ SETUP ^ ---\n\n    discoverer.init(broker.registry); // ---- ˇ ASSERTS ˇ ---\n\n    expect(discoverer.instanceHash).toBe(\"12345678\");\n    expect(discoverer.PREFIX).toBe(\"MOL-TESTING-DSCVR\");\n    expect(discoverer.BEAT_KEY).toBe(\"MOL-TESTING-DSCVR-BEAT:node-99|12345678\");\n    expect(discoverer.INFO_KEY).toBe(\"MOL-TESTING-DSCVR-INFO:node-99\");\n    expect(discoverer.client).toBeInstanceOf(Redis.Cluster);\n    expect(discoverer.serializer).toBeInstanceOf(Serializers.JSON);\n    expect(Redis.Cluster).toHaveBeenCalledTimes(1);\n    expect(Redis.Cluster).toHaveBeenCalledWith([\"redis-server\"], {\n      db: 3\n    });\n    expect(Serializers.JSON.prototype.init).toHaveBeenCalledTimes(1);\n    expect(Serializers.JSON.prototype.init).toHaveBeenCalledWith(broker);\n  });","file":"unit/registry/discoverers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should register callbacks","suites":["Test RedisDiscoverer 'init' method","check Redis client events"],"updatePoint":{"line":175,"column":33},"line":175,"code":"    it(\"should register callbacks\", () => {\n      Redis.prototype.on.mockClear(); // ---- ^ SETUP ^ ---\n\n      discoverer.init(broker.registry); // ---- ˇ ASSERTS ˇ ---\n\n      expect(Redis.prototype.on).toHaveBeenCalledTimes(3);\n      expect(Redis.prototype.on).toHaveBeenCalledWith(\"connect\", expect.any(Function));\n      expect(Redis.prototype.on).toHaveBeenCalledWith(\"reconnecting\", expect.any(Function));\n      expect(Redis.prototype.on).toHaveBeenCalledWith(\"error\", expect.any(Function));\n    });","file":"unit/registry/discoverers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should broadcast an error","suites":["Test RedisDiscoverer 'init' method","check Redis client events"],"updatePoint":{"line":185,"column":33},"line":185,"code":"    it(\"should broadcast an error\", () => {\n      broker.broadcastLocal = jest.fn();\n      Redis.prototype.on.mockClear(); // ---- ^ SETUP ^ ---\n\n      discoverer.init(broker.registry);\n      redisCallbacks.error(new Error(\"Ups!\"));\n      expect(discoverer.broker.broadcastLocal).toHaveBeenCalledTimes(1);\n      expect(broker.broadcastLocal).toHaveBeenCalledWith(\"$discoverer.error\", {\n        error: expect.any(Error),\n        module: \"discoverer\",\n        type: C.CLIENT_ERROR\n      });\n    });","file":"unit/registry/discoverers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should not call sendLocalNodeInfo","suites":["Test RedisDiscoverer 'init' method","check Redis client events"],"updatePoint":{"line":198,"column":41},"line":198,"code":"    it(\"should not call sendLocalNodeInfo\", () => {\n      Redis.prototype.on.mockClear();\n      discoverer.sendLocalNodeInfo = jest.fn();\n      discoverer.init(broker.registry); // ---- ^ SETUP ^ ---\n\n      redisCallbacks[\"connect\"](); // ---- ˇ ASSERTS ˇ ---\n\n      expect(discoverer.reconnecting).toBe(false);\n      expect(discoverer.sendLocalNodeInfo).toHaveBeenCalledTimes(0);\n    });","file":"unit/registry/discoverers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should call sendLocalNodeInfo","suites":["Test RedisDiscoverer 'init' method","check Redis client events"],"updatePoint":{"line":208,"column":37},"line":208,"code":"    it(\"should call sendLocalNodeInfo\", () => {\n      Redis.prototype.on.mockClear();\n      discoverer.sendLocalNodeInfo = jest.fn();\n      discoverer.init(broker.registry);\n      discoverer.reconnecting = true; // ---- ^ SETUP ^ ---\n\n      redisCallbacks[\"connect\"](); // ---- ˇ ASSERTS ˇ ---\n\n      expect(discoverer.reconnecting).toBe(false);\n      expect(discoverer.sendLocalNodeInfo).toHaveBeenCalledTimes(1);\n      expect(discoverer.sendLocalNodeInfo).toHaveBeenCalledWith();\n    });","file":"unit/registry/discoverers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should set reconnecting property","suites":["Test RedisDiscoverer 'init' method","check Redis client events"],"updatePoint":{"line":220,"column":40},"line":220,"code":"    it(\"should set reconnecting property\", () => {\n      Redis.prototype.on.mockClear();\n      discoverer.sendLocalNodeInfo = jest.fn();\n      discoverer.init(broker.registry);\n      discoverer.reconnecting = false;\n      discoverer.lastInfoSeq = 5;\n      discoverer.lastBeatSeq = 5; // ---- ^ SETUP ^ ---\n\n      redisCallbacks[\"reconnecting\"](); // ---- ˇ ASSERTS ˇ ---\n\n      expect(discoverer.reconnecting).toBe(true);\n      expect(discoverer.lastInfoSeq).toBe(0);\n      expect(discoverer.lastBeatSeq).toBe(0);\n    });","file":"unit/registry/discoverers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should call client quit","suites":["Test RedisDiscoverer 'stop' method"],"updatePoint":{"line":237,"column":29},"line":237,"code":"  it(\"should call client quit\", async () => {\n    const broker = new ServiceBroker({\n      logger: false\n    });\n    const registry = broker.registry;\n    const discoverer = new RedisDiscoverer();\n    discoverer.init(registry);\n    discoverer.client.quit = jest.fn();\n    jest.spyOn(BaseDiscoverer.prototype, \"stop\"); // ---- ^ SETUP ^ ---\n\n    await discoverer.stop(); // ---- ˇ ASSERTS ˇ ---\n\n    expect(discoverer.client.quit).toBeCalledTimes(1);\n    expect(discoverer.client.quit).toBeCalledWith();\n    expect(BaseDiscoverer.prototype.stop).toHaveBeenCalledTimes(1);\n  });","file":"unit/registry/discoverers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should do nothing if no client","suites":["Test RedisDiscoverer 'stop' method"],"updatePoint":{"line":253,"column":36},"line":253,"code":"  it(\"should do nothing if no client\", async () => {\n    const broker = new ServiceBroker({\n      logger: false\n    });\n    const registry = broker.registry;\n    const discoverer = new RedisDiscoverer(); // ---- ^ SETUP ^ ---\n\n    await discoverer.stop();\n  });","file":"unit/registry/discoverers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should register metrics","suites":["Test RedisDiscoverer 'registerMoleculerMetrics' method"],"updatePoint":{"line":264,"column":29},"line":264,"code":"  it(\"should register metrics\", async () => {\n    const broker = new ServiceBroker({\n      logger: false\n    });\n    const registry = broker.registry;\n    const discoverer = new RedisDiscoverer();\n    discoverer.init(registry);\n    jest.spyOn(broker.metrics, \"register\"); // ---- ^ SETUP ^ ---\n\n    await discoverer.registerMoleculerMetrics(); // ---- ˇ ASSERTS ˇ ---\n\n    expect(broker.metrics.register).toBeCalledTimes(2);\n    expect(broker.metrics.register).toBeCalledWith({\n      name: \"moleculer.discoverer.redis.collect.total\",\n      rate: true,\n      type: \"counter\",\n      description: \"Number of Service Registry fetching from Redis\"\n    });\n    expect(broker.metrics.register).toBeCalledWith({\n      name: \"moleculer.discoverer.redis.collect.time\",\n      quantiles: true,\n      type: \"histogram\",\n      unit: \"millisecond\",\n      description: \"Time of Service Registry fetching from Redis\"\n    });\n  });","file":"unit/registry/discoverers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should recreate timer & call client.expire","suites":["Test RedisDiscoverer 'recreateInfoUpdateTimer' method"],"updatePoint":{"line":300,"column":48},"line":300,"code":"  it(\"should recreate timer & call client.expire\", async () => {\n    expect(discoverer.infoUpdateTimer).toBeNull();\n    discoverer.client.expire = jest.fn();\n    jest.useFakeTimers(); // ---- ^ SETUP ^ ---\n\n    await discoverer.recreateInfoUpdateTimer(); // ---- ˇ ASSERTS ˇ ---\n\n    expect(discoverer.infoUpdateTimer).toBeDefined();\n    jest.advanceTimersByTime(21 * 60 * 1000);\n    expect(discoverer.recreateInfoUpdateTimer).toBeCalledTimes(2);\n    expect(discoverer.client.expire).toBeCalledTimes(1);\n    expect(discoverer.client.expire).toBeCalledWith(\"MOL-DSCVR-INFO:node-99\", 3600);\n  });","file":"unit/registry/discoverers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should set HB key on Redis & call collectNodes","suites":["Test RedisDiscoverer 'sendHeartbeat' method"],"updatePoint":{"line":336,"column":52},"line":336,"code":"  it(\"should set HB key on Redis & call collectNodes\", async () => {\n    discoverer.logger.error.mockClear();\n    broker.metrics.increment.mockClear();\n    broker.metrics.timer.mockClear();\n    discoverer.serializer.serialize.mockClear();\n    discoverer.collectOnlineNodes.mockClear(); // ---- ^ SETUP ^ ---\n\n    await discoverer.sendHeartbeat(); // ---- ˇ ASSERTS ˇ ---\n\n    expect(broker.metrics.timer).toBeCalledTimes(1);\n    expect(broker.metrics.timer).toBeCalledWith(\"moleculer.discoverer.redis.collect.time\");\n    expect(discoverer.client.multi).toBeCalledTimes(1);\n    expect(fakePipeline.del).toBeCalledTimes(1);\n    expect(fakePipeline.del).toBeCalledWith(\"MOL-DSCVR-BEAT:node-99|12345678|0\");\n    expect(discoverer.serializer.serialize).toBeCalledTimes(1);\n    expect(fakePipeline.setex).toBeCalledTimes(1);\n    expect(fakePipeline.setex).toBeCalledWith(\"MOL-DSCVR-BEAT:node-99|12345678|1\", 30, {\n      cpu: null,\n      instanceID: \"1234567890\",\n      sender: \"node-99\",\n      seq: 1,\n      ver: \"4\"\n    });\n    expect(fakePipeline.exec).toBeCalledTimes(1);\n    expect(discoverer.lastBeatSeq).toBe(1);\n    expect(discoverer.collectOnlineNodes).toBeCalledTimes(1);\n    expect(discoverer.logger.error).toBeCalledTimes(0);\n    expect(broker.metrics.increment).toBeCalledTimes(1);\n    expect(broker.metrics.increment).toBeCalledWith(\"moleculer.discoverer.redis.collect.total\");\n  });","file":"unit/registry/discoverers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should set HB key without del if seq is same","suites":["Test RedisDiscoverer 'sendHeartbeat' method"],"updatePoint":{"line":366,"column":50},"line":366,"code":"  it(\"should set HB key without del if seq is same\", async () => {\n    discoverer.logger.error.mockClear();\n    broker.metrics.increment.mockClear();\n    broker.metrics.timer.mockClear();\n    discoverer.serializer.serialize.mockClear();\n    discoverer.client.multi.mockClear();\n    discoverer.collectOnlineNodes.mockClear();\n    fakePipeline.del.mockClear();\n    fakePipeline.setex.mockClear();\n    fakePipeline.exec.mockClear(); // ---- ^ SETUP ^ ---\n\n    await discoverer.sendHeartbeat(); // ---- ˇ ASSERTS ˇ ---\n\n    expect(broker.metrics.timer).toBeCalledTimes(1);\n    expect(broker.metrics.timer).toBeCalledWith(\"moleculer.discoverer.redis.collect.time\");\n    expect(discoverer.client.multi).toBeCalledTimes(1);\n    expect(fakePipeline.del).toBeCalledTimes(0);\n    expect(discoverer.serializer.serialize).toBeCalledTimes(1);\n    expect(fakePipeline.setex).toBeCalledTimes(1);\n    expect(fakePipeline.setex).toBeCalledWith(\"MOL-DSCVR-BEAT:node-99|12345678|1\", 30, {\n      cpu: null,\n      instanceID: \"1234567890\",\n      sender: \"node-99\",\n      seq: 1,\n      ver: \"4\"\n    });\n    expect(fakePipeline.exec).toBeCalledTimes(1);\n    expect(discoverer.lastBeatSeq).toBe(1);\n    expect(discoverer.collectOnlineNodes).toBeCalledTimes(1);\n    expect(discoverer.logger.error).toBeCalledTimes(0);\n    expect(broker.metrics.increment).toBeCalledTimes(1);\n    expect(broker.metrics.increment).toBeCalledWith(\"moleculer.discoverer.redis.collect.total\");\n  });","file":"unit/registry/discoverers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should broadcast an error","suites":["Test RedisDiscoverer 'sendHeartbeat' method"],"updatePoint":{"line":399,"column":31},"line":399,"code":"  it(\"should broadcast an error\", async () => {\n    discoverer.collectOnlineNodes = jest.fn(() => Promise.reject(new Error(\"Ups!\")));\n    broker.broadcastLocal = jest.fn(); // ---- ^ SETUP ^ ---\n\n    await discoverer.sendHeartbeat(); // ---- ˇ ASSERTS ˇ ---\n\n    expect(discoverer.broker.broadcastLocal).toHaveBeenCalledTimes(1);\n    expect(broker.broadcastLocal).toHaveBeenCalledWith(\"$discoverer.error\", {\n      error: expect.any(Error),\n      module: \"discoverer\",\n      type: C.FAILED_KEY_SCAN\n    });\n  });","file":"unit/registry/discoverers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should handle empty list","suites":["Test RedisDiscoverer 'collectOnlineNodes' method"],"updatePoint":{"line":447,"column":30},"line":447,"code":"  it(\"should handle empty list\", async () => {\n    broker.registry.nodes.list = jest.fn(() => []); // ---- ^ SETUP ^ ---\n\n    const p = discoverer.collectOnlineNodes();\n    fakeStreamCB.end();\n    await p; // ---- ˇ ASSERTS ˇ ---\n\n    expect(broker.registry.nodes.list).toBeCalledTimes(1);\n    expect(broker.registry.nodes.list).toBeCalledWith({\n      onlyAvailable: true,\n      withServices: false\n    });\n    expect(discoverer.client.scanStream).toBeCalledTimes(1);\n    expect(discoverer.client.scanStream).toBeCalledWith({\n      match: \"MOL-DSCVR-BEAT:*\",\n      count: 100\n    });\n    expect(fakeStream.on).toBeCalledTimes(3);\n    expect(fakeStream.on).toBeCalledWith(\"data\", expect.any(Function));\n    expect(fakeStream.on).toBeCalledWith(\"error\", expect.any(Function));\n    expect(fakeStream.on).toBeCalledWith(\"end\", expect.any(Function));\n    expect(discoverer.client.mgetBuffer).toBeCalledTimes(0);\n    expect(discoverer.remoteNodeDisconnected).toBeCalledTimes(0);\n    expect(discoverer.heartbeatReceived).toBeCalledTimes(0);\n  });","file":"unit/registry/discoverers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should disconnect previous nodes","suites":["Test RedisDiscoverer 'collectOnlineNodes' method"],"updatePoint":{"line":472,"column":38},"line":472,"code":"  it(\"should disconnect previous nodes\", async () => {\n    discoverer.opts.scanLength = 50;\n    broker.registry.nodes.list = jest.fn(() => [{\n      id: \"node-1\"\n    }, {\n      id: \"node-2\"\n    }, {\n      id: \"node-99\"\n    }]); // ---- ^ SETUP ^ ---\n\n    const p = discoverer.collectOnlineNodes();\n    fakeStreamCB.end();\n    await p; // ---- ˇ ASSERTS ˇ ---\n\n    expect(broker.registry.nodes.list).toBeCalledTimes(1);\n    expect(broker.registry.nodes.list).toBeCalledWith({\n      onlyAvailable: true,\n      withServices: false\n    });\n    expect(discoverer.client.scanStream).toBeCalledTimes(1);\n    expect(discoverer.client.scanStream).toBeCalledWith({\n      match: \"MOL-DSCVR-BEAT:*\",\n      count: 50\n    });\n    expect(fakeStream.on).toBeCalledTimes(3);\n    expect(fakeStream.on).toBeCalledWith(\"data\", expect.any(Function));\n    expect(fakeStream.on).toBeCalledWith(\"error\", expect.any(Function));\n    expect(fakeStream.on).toBeCalledWith(\"end\", expect.any(Function));\n    expect(discoverer.client.mgetBuffer).toBeCalledTimes(0);\n    expect(discoverer.heartbeatReceived).toBeCalledTimes(0);\n    expect(discoverer.remoteNodeDisconnected).toBeCalledTimes(2);\n    expect(discoverer.remoteNodeDisconnected).toBeCalledWith(\"node-1\", true);\n    expect(discoverer.remoteNodeDisconnected).toBeCalledWith(\"node-2\", true);\n  });","file":"unit/registry/discoverers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should add new nodes (full check)","suites":["Test RedisDiscoverer 'collectOnlineNodes' method"],"updatePoint":{"line":506,"column":39},"line":506,"code":"  it(\"should add new nodes (full check)\", async () => {\n    discoverer.opts.fullCheck = 1;\n    broker.registry.nodes.list = jest.fn(() => [{\n      id: \"node-1\"\n    }, {\n      id: \"node-2\"\n    }, {\n      id: \"node-3\"\n    }, {\n      id: \"node-99\"\n    }]);\n    discoverer.client.mgetBuffer = jest.fn(() => Promise.resolve([{\n      instanceID: \"111\",\n      sender: \"node-1\",\n      seq: 1\n    }, {\n      instanceID: \"222\",\n      sender: \"node-2\",\n      seq: 2\n    }, {\n      instanceID: \"999\",\n      sender: \"node-99\",\n      seq: 9\n    }])); // ---- ^ SETUP ^ ---\n\n    const p = discoverer.collectOnlineNodes();\n    fakeStreamCB.data([\"MOL-DSCVR-BEAT:node-1|111|1\", \"MOL-DSCVR-BEAT:node-2|222|2\"]);\n    fakeStreamCB.data([\"MOL-DSCVR-BEAT:node-99|999|9\"]);\n    fakeStreamCB.end();\n    await p; // ---- ˇ ASSERTS ˇ ---\n\n    expect(discoverer.client.mgetBuffer).toBeCalledTimes(1);\n    expect(discoverer.client.mgetBuffer).toBeCalledWith(\"MOL-DSCVR-BEAT:node-1|111|1\", \"MOL-DSCVR-BEAT:node-2|222|2\", \"MOL-DSCVR-BEAT:node-99|999|9\");\n    expect(discoverer.heartbeatReceived).toBeCalledTimes(2);\n    expect(discoverer.heartbeatReceived).toBeCalledWith(\"node-1\", {\n      instanceID: \"111\",\n      sender: \"node-1\",\n      seq: 1\n    });\n    expect(discoverer.heartbeatReceived).toBeCalledWith(\"node-2\", {\n      instanceID: \"222\",\n      sender: \"node-2\",\n      seq: 2\n    });\n    expect(discoverer.remoteNodeDisconnected).toBeCalledTimes(1);\n    expect(discoverer.remoteNodeDisconnected).toBeCalledWith(\"node-3\", true);\n  });","file":"unit/registry/discoverers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should add new nodes (fast check)","suites":["Test RedisDiscoverer 'collectOnlineNodes' method"],"updatePoint":{"line":553,"column":39},"line":553,"code":"  it(\"should add new nodes (fast check)\", async () => {\n    discoverer.opts.fullCheck = 0;\n    broker.registry.nodes.list = jest.fn(() => [{\n      id: \"node-1\"\n    }, {\n      id: \"node-2\"\n    }, {\n      id: \"node-3\"\n    }, {\n      id: \"node-99\"\n    }]); // ---- ^ SETUP ^ ---\n\n    const p = discoverer.collectOnlineNodes();\n    fakeStreamCB.data([\"MOL-DSCVR-BEAT:node-1|111|1\", \"MOL-DSCVR-BEAT:node-2|222|2\"]);\n    fakeStreamCB.data([\"MOL-DSCVR-BEAT:node-99|999|9\"]);\n    fakeStreamCB.end();\n    await p; // ---- ˇ ASSERTS ˇ ---\n\n    expect(discoverer.client.mgetBuffer).toBeCalledTimes(0);\n    expect(discoverer.heartbeatReceived).toBeCalledTimes(2);\n    expect(discoverer.heartbeatReceived).toBeCalledWith(\"node-1\", {\n      instanceID: \"111\",\n      sender: \"node-1\",\n      seq: 1\n    });\n    expect(discoverer.heartbeatReceived).toBeCalledWith(\"node-2\", {\n      instanceID: \"222\",\n      sender: \"node-2\",\n      seq: 2\n    });\n    expect(discoverer.remoteNodeDisconnected).toBeCalledTimes(1);\n    expect(discoverer.remoteNodeDisconnected).toBeCalledWith(\"node-3\", true);\n  });","file":"unit/registry/discoverers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should stop on error","suites":["Test RedisDiscoverer 'collectOnlineNodes' method"],"updatePoint":{"line":586,"column":26},"line":586,"code":"  it(\"should stop on error\", async () => {\n    broker.registry.nodes.list = jest.fn(() => [{\n      id: \"node-1\"\n    }, {\n      id: \"node-2\"\n    }, {\n      id: \"node-3\"\n    }, {\n      id: \"node-99\"\n    }]); // ---- ^ SETUP ^ ---\n\n    const p = discoverer.collectOnlineNodes();\n    const err = new Error(\"Something happened\");\n    fakeStreamCB.data([\"MOL-DSCVR-BEAT:node-1|111|1\", \"MOL-DSCVR-BEAT:node-2|222|2\"]);\n    fakeStreamCB.error(err); // ---- ˇ ASSERTS ˇ ---\n\n    try {\n      await p;\n    } catch (e) {\n      expect(e).toBe(err);\n    }\n\n    expect(discoverer.client.mgetBuffer).toBeCalledTimes(0);\n    expect(discoverer.heartbeatReceived).toBeCalledTimes(0);\n    expect(discoverer.remoteNodeDisconnected).toBeCalledTimes(0);\n    expect.assertions(4);\n  });","file":"unit/registry/discoverers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should call processRemoteNodeInfo if data received","suites":["Test RedisDiscoverer 'discoverNode' method"],"updatePoint":{"line":629,"column":56},"line":629,"code":"  it(\"should call processRemoteNodeInfo if data received\", async () => {\n    discoverer.logger.warn.mockClear();\n    discoverer.serializer.deserialize.mockClear();\n    discoverer.client.getBuffer.mockClear();\n    discoverer.processRemoteNodeInfo.mockClear(); // ---- ^ SETUP ^ ---\n\n    await discoverer.discoverNode(\"node-1\"); // ---- ˇ ASSERTS ˇ ---\n\n    expect(discoverer.client.getBuffer).toBeCalledTimes(1);\n    expect(discoverer.client.getBuffer).toBeCalledWith(\"MOL-DSCVR-INFO:node-1\");\n    expect(discoverer.logger.warn).toBeCalledTimes(0);\n    expect(discoverer.serializer.deserialize).toBeCalledTimes(1);\n    expect(discoverer.serializer.deserialize).toBeCalledWith(\"fake-data\", P.PACKET_INFO);\n    expect(discoverer.processRemoteNodeInfo).toBeCalledTimes(1);\n    expect(discoverer.processRemoteNodeInfo).toBeCalledWith(\"node-1\", \"fake-data\");\n  });","file":"unit/registry/discoverers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should handle if data is invalid","suites":["Test RedisDiscoverer 'discoverNode' method"],"updatePoint":{"line":645,"column":38},"line":645,"code":"  it(\"should handle if data is invalid\", async () => {\n    discoverer.logger.warn.mockClear();\n    discoverer.serializer.deserialize = jest.fn(() => {\n      throw new Error(\"Unexpected token\");\n    });\n    discoverer.client.getBuffer.mockClear();\n    discoverer.processRemoteNodeInfo.mockClear(); // ---- ^ SETUP ^ ---\n\n    await discoverer.discoverNode(\"node-1\"); // ---- ˇ ASSERTS ˇ ---\n\n    expect(discoverer.client.getBuffer).toBeCalledTimes(1);\n    expect(discoverer.client.getBuffer).toBeCalledWith(\"MOL-DSCVR-INFO:node-1\");\n    expect(discoverer.logger.warn).toBeCalledTimes(1);\n    expect(discoverer.serializer.deserialize).toBeCalledTimes(1);\n    expect(discoverer.serializer.deserialize).toBeCalledWith(\"fake-data\", P.PACKET_INFO);\n    expect(discoverer.processRemoteNodeInfo).toBeCalledTimes(0);\n  });","file":"unit/registry/discoverers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should handle if no data","suites":["Test RedisDiscoverer 'discoverNode' method"],"updatePoint":{"line":662,"column":30},"line":662,"code":"  it(\"should handle if no data\", async () => {\n    discoverer.logger.warn.mockClear();\n    discoverer.serializer.deserialize = jest.fn(() => \"fake-data\");\n    discoverer.client.getBuffer = jest.fn(async () => null);\n    discoverer.processRemoteNodeInfo.mockClear(); // ---- ^ SETUP ^ ---\n\n    await discoverer.discoverNode(\"node-1\"); // ---- ˇ ASSERTS ˇ ---\n\n    expect(discoverer.client.getBuffer).toBeCalledTimes(1);\n    expect(discoverer.client.getBuffer).toBeCalledWith(\"MOL-DSCVR-INFO:node-1\");\n    expect(discoverer.logger.warn).toBeCalledTimes(1);\n    expect(discoverer.logger.warn).toBeCalledWith(\"No INFO for 'node-1' node in registry.\");\n    expect(discoverer.serializer.deserialize).toBeCalledTimes(0);\n    expect(discoverer.processRemoteNodeInfo).toBeCalledTimes(0);\n  });","file":"unit/registry/discoverers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should call collectOnlineNodes","suites":["Test RedisDiscoverer 'discoverAllNodes' method"],"updatePoint":{"line":679,"column":36},"line":679,"code":"  it(\"should call collectOnlineNodes\", async () => {\n    const broker = new ServiceBroker({\n      logger: false,\n      transporter: \"Fake\"\n    });\n    const discoverer = new RedisDiscoverer();\n    discoverer.init(broker.registry);\n    discoverer.collectOnlineNodes = jest.fn(() => Promise.resolve());\n    await discoverer.discoverAllNodes();\n    expect(discoverer.collectOnlineNodes).toBeCalledTimes(1);\n    expect(discoverer.collectOnlineNodes).toBeCalledWith();\n    await discoverer.stop();\n  });","file":"unit/registry/discoverers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should send INFO & call recreateInfoUpdateTimer & beat","suites":["Test RedisDiscoverer 'sendLocalNodeInfo' method"],"updatePoint":{"line":722,"column":60},"line":722,"code":"  it(\"should send INFO & call recreateInfoUpdateTimer & beat\", async () => {\n    // ---- ^ SETUP ^ ---\n    await discoverer.sendLocalNodeInfo(); // ---- ˇ ASSERTS ˇ ---\n\n    expect(broker.getLocalNodeInfo).toBeCalledTimes(1);\n    expect(discoverer.serializer.serialize).toBeCalledTimes(1);\n    expect(discoverer.client.setex).toBeCalledTimes(1);\n    expect(discoverer.client.setex).toBeCalledWith(\"MOL-DSCVR-INFO:node-99\", 1800, {\n      a: 5,\n      sender: \"node-99\",\n      ver: \"4\"\n    });\n    expect(discoverer.lastInfoSeq).toBe(1);\n    expect(discoverer.recreateInfoUpdateTimer).toBeCalledTimes(1);\n    expect(discoverer.beat).toBeCalledTimes(1);\n    expect(discoverer.logger.error).toBeCalledTimes(0);\n  });","file":"unit/registry/discoverers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should send INFO & call recreateInfoUpdateTimer & NOT beat","suites":["Test RedisDiscoverer 'sendLocalNodeInfo' method"],"updatePoint":{"line":739,"column":64},"line":739,"code":"  it(\"should send INFO & call recreateInfoUpdateTimer & NOT beat\", async () => {\n    // ---- ^ SETUP ^ ---\n    await discoverer.sendLocalNodeInfo(\"node-10\"); // ---- ˇ ASSERTS ˇ ---\n\n    expect(broker.getLocalNodeInfo).toBeCalledTimes(1);\n    expect(discoverer.serializer.serialize).toBeCalledTimes(1);\n    expect(discoverer.client.setex).toBeCalledTimes(1);\n    expect(discoverer.client.setex).toBeCalledWith(\"MOL-DSCVR-INFO:node-99\", 1800, {\n      a: 5,\n      sender: \"node-99\",\n      ver: \"4\"\n    });\n    expect(discoverer.lastInfoSeq).toBe(1);\n    expect(discoverer.recreateInfoUpdateTimer).toBeCalledTimes(1);\n    expect(discoverer.beat).toBeCalledTimes(0);\n    expect(discoverer.logger.error).toBeCalledTimes(0);\n  });","file":"unit/registry/discoverers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should send INFO & call recreateInfoUpdateTimer & beat & call makeBalancedSubscriptions","suites":["Test RedisDiscoverer 'sendLocalNodeInfo' method"],"updatePoint":{"line":756,"column":93},"line":756,"code":"  it(\"should send INFO & call recreateInfoUpdateTimer & beat & call makeBalancedSubscriptions\", async () => {\n    broker.transit.tx.makeBalancedSubscriptions = jest.fn(() => Promise.resolve());\n    broker.options.disableBalancer = true; // ---- ^ SETUP ^ ---\n\n    await discoverer.sendLocalNodeInfo(); // ---- ˇ ASSERTS ˇ ---\n\n    expect(broker.getLocalNodeInfo).toBeCalledTimes(1);\n    expect(discoverer.serializer.serialize).toBeCalledTimes(1);\n    expect(discoverer.client.setex).toBeCalledTimes(1);\n    expect(discoverer.client.setex).toBeCalledWith(\"MOL-DSCVR-INFO:node-99\", 1800, {\n      a: 5,\n      sender: \"node-99\",\n      ver: \"4\"\n    });\n    expect(broker.transit.tx.makeBalancedSubscriptions).toBeCalledTimes(1);\n    expect(discoverer.lastInfoSeq).toBe(1);\n    expect(discoverer.recreateInfoUpdateTimer).toBeCalledTimes(1);\n    expect(discoverer.beat).toBeCalledTimes(1);\n    expect(discoverer.logger.error).toBeCalledTimes(0);\n  });","file":"unit/registry/discoverers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should handle error","suites":["Test RedisDiscoverer 'sendLocalNodeInfo' method"],"updatePoint":{"line":776,"column":25},"line":776,"code":"  it(\"should handle error\", async () => {\n    const err = new Error(\"Something happened\");\n    discoverer.client.setex = jest.fn(() => Promise.reject(err)); // ---- ^ SETUP ^ ---\n\n    await discoverer.sendLocalNodeInfo(); // ---- ˇ ASSERTS ˇ ---\n\n    expect(discoverer.client.setex).toBeCalledTimes(1);\n    expect(discoverer.recreateInfoUpdateTimer).toBeCalledTimes(0);\n    expect(discoverer.beat).toBeCalledTimes(0);\n    expect(discoverer.logger.error).toBeCalledTimes(1);\n    expect(discoverer.logger.error).toBeCalledWith(\"Unable to send INFO to Redis server\", err);\n  });","file":"unit/registry/discoverers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should broadcast an error","suites":["Test RedisDiscoverer 'sendLocalNodeInfo' method"],"updatePoint":{"line":788,"column":31},"line":788,"code":"  it(\"should broadcast an error\", async () => {\n    const err = new Error(\"Something happened\");\n    discoverer.client.setex = jest.fn(() => Promise.reject(err));\n    broker.broadcastLocal = jest.fn(); // ---- ^ SETUP ^ ---\n\n    await discoverer.sendLocalNodeInfo(); // ---- ˇ ASSERTS ˇ ---\n\n    expect(discoverer.broker.broadcastLocal).toHaveBeenCalledTimes(1);\n    expect(broker.broadcastLocal).toHaveBeenCalledWith(\"$discoverer.error\", {\n      error: err,\n      module: \"discoverer\",\n      type: C.FAILED_SEND_INFO\n    });\n  });","file":"unit/registry/discoverers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should call localNodeDisconnected & del & scanClean","suites":["Test RedisDiscoverer 'localNodeDisconnected' method"],"updatePoint":{"line":804,"column":57},"line":804,"code":"  it(\"should call localNodeDisconnected & del & scanClean\", async () => {\n    const broker = new ServiceBroker({\n      logger: false,\n      nodeID: \"node-99\"\n    });\n    broker.instanceID = \"1234567890\";\n    const discoverer = new RedisDiscoverer();\n    discoverer.init(broker.registry);\n    discoverer.client.del = jest.fn();\n    discoverer.scanClean = jest.fn();\n    jest.spyOn(BaseDiscoverer.prototype, \"localNodeDisconnected\");\n    await discoverer.localNodeDisconnected();\n    expect(BaseDiscoverer.prototype.localNodeDisconnected).toBeCalledTimes(1);\n    expect(discoverer.client.del).toBeCalledTimes(1);\n    expect(discoverer.client.del).toBeCalledWith(\"MOL-DSCVR-INFO:node-99\");\n    expect(discoverer.scanClean).toBeCalledTimes(1);\n    expect(discoverer.scanClean).toBeCalledWith(\"MOL-DSCVR-BEAT:node-99|12345678*\");\n    await discoverer.stop();\n  });","file":"unit/registry/discoverers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should collect keys & call del with keys","suites":["Test RedisDiscoverer 'scanClean' method"],"updatePoint":{"line":853,"column":46},"line":853,"code":"  it(\"should collect keys & call del with keys\", async () => {\n    // ---- ^ SETUP ^ ---\n    const p = discoverer.scanClean(\"SOME.**\"); // ---- ˇ ASSERTS ˇ ---\n\n    expect(discoverer.client.scanStream).toBeCalledTimes(1);\n    expect(discoverer.client.scanStream).toBeCalledWith({\n      match: \"SOME.**\",\n      count: 50\n    });\n    expect(fakeStream.on).toBeCalledTimes(3);\n    expect(fakeStream.on).toBeCalledWith(\"data\", expect.any(Function));\n    expect(fakeStream.on).toBeCalledWith(\"error\", expect.any(Function));\n    expect(fakeStream.on).toBeCalledWith(\"end\", expect.any(Function));\n    expect(discoverer.client.del).toBeCalledTimes(0);\n    await fakeStreamCB.data([\"key1\", \"key2\"]);\n    expect(discoverer.client.del).toBeCalledTimes(1);\n    expect(discoverer.client.del).toBeCalledWith([\"key1\", \"key2\"]);\n    expect(fakeStream.pause).toBeCalledTimes(1);\n    expect(fakeStream.resume).toBeCalledTimes(1);\n    fakeStreamCB.end();\n    expect(discoverer.logger.error).toBeCalledTimes(0);\n    await p;\n  });","file":"unit/registry/discoverers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should reject if error occured","suites":["Test RedisDiscoverer 'scanClean' method"],"updatePoint":{"line":876,"column":36},"line":876,"code":"  it(\"should reject if error occured\", async () => {\n    // ---- ^ SETUP ^ ---\n    const p = discoverer.scanClean(\"SOME.**\"); // ---- ˇ ASSERTS ˇ ---\n\n    expect(discoverer.client.scanStream).toBeCalledTimes(1);\n    expect(discoverer.client.scanStream).toBeCalledWith({\n      match: \"SOME.**\",\n      count: 50\n    });\n    expect(fakeStream.on).toBeCalledTimes(3);\n    expect(fakeStream.on).toBeCalledWith(\"data\", expect.any(Function));\n    expect(fakeStream.on).toBeCalledWith(\"error\", expect.any(Function));\n    expect(fakeStream.on).toBeCalledWith(\"end\", expect.any(Function));\n    expect(discoverer.client.del).toBeCalledTimes(0);\n    const err = new Error(\"Something happened\");\n    await fakeStreamCB.error(err);\n    expect(discoverer.client.del).toBeCalledTimes(0);\n    expect(fakeStream.pause).toBeCalledTimes(0);\n    expect(fakeStream.resume).toBeCalledTimes(0);\n    expect(discoverer.logger.error).toBeCalledTimes(1);\n    fakeStreamCB.end();\n\n    try {\n      await p;\n    } catch (e) {\n      expect(e).toBe(err);\n    }\n\n    expect.assertions(12);\n  });","file":"unit/registry/discoverers/redis.spec.js","skipped":false,"dir":"test"},{"name":"should set properties","suites":["Test ActionEndpoint"],"updatePoint":{"line":22,"column":27},"line":22,"code":"  it(\"should set properties\", () => {\n    ep = new ActionEndpoint(registry, broker, node, service, action);\n    expect(ep).toBeDefined();\n    expect(ep.registry).toBe(registry);\n    expect(ep.broker).toBe(broker);\n    expect(ep.node).toBe(node);\n    expect(ep.service).toBe(service);\n    expect(ep.action).toBe(action);\n    expect(ep.isAvailable).toBe(true);\n  });","file":"unit/registry/endpoint-action.spec.js","skipped":false,"dir":"test"},{"name":"shoud update action","suites":["Test ActionEndpoint"],"updatePoint":{"line":32,"column":25},"line":32,"code":"  it(\"shoud update action\", () => {\n    let newAction = {\n      name: \"test.hello2\"\n    };\n    ep.update(newAction);\n    expect(ep.action).toBe(newAction);\n  });","file":"unit/registry/endpoint-action.spec.js","skipped":false,"dir":"test"},{"name":"should set properties","suites":["Test EventEndpoint"],"updatePoint":{"line":22,"column":27},"line":22,"code":"  it(\"should set properties\", () => {\n    ep = new EventEndpoint(registry, broker, node, service, event);\n    expect(ep).toBeDefined();\n    expect(ep.registry).toBe(registry);\n    expect(ep.broker).toBe(broker);\n    expect(ep.node).toBe(node);\n    expect(ep.service).toBe(service);\n    expect(ep.event).toBe(event);\n    expect(ep.isAvailable).toBe(true);\n  });","file":"unit/registry/endpoint-event.spec.js","skipped":false,"dir":"test"},{"name":"shoud update event","suites":["Test EventEndpoint"],"updatePoint":{"line":32,"column":24},"line":32,"code":"  it(\"shoud update event\", () => {\n    let newEvent = {\n      name: \"test.hello2\"\n    };\n    ep.update(newEvent);\n    expect(ep.event).toBe(newEvent);\n  });","file":"unit/registry/endpoint-event.spec.js","skipped":false,"dir":"test"},{"name":"should create a new list","suites":["Test EndpointList constructor"],"updatePoint":{"line":26,"column":30},"line":26,"code":"  it(\"should create a new list\", () => {\n    Strategy.mockClear();\n    list = new EndpointList(registry, broker, \"listName\", \"groupName\", ActionEndpoint, Strategy, strategyOptions);\n    expect(list).toBeDefined();\n    expect(list.registry).toBe(registry);\n    expect(list.broker).toBe(broker);\n    expect(list.logger).toBe(registry.logger);\n    expect(list.strategy).toBeInstanceOf(Strategy);\n    expect(list.name).toBe(\"listName\");\n    expect(list.group).toBe(\"groupName\");\n    expect(list.internal).toBe(false);\n    expect(list.EndPointFactory).toBe(ActionEndpoint);\n    expect(list.endpoints).toBeInstanceOf(Array);\n    expect(list.localEndpoints).toEqual([]);\n    expect(Strategy).toHaveBeenCalledTimes(1);\n    expect(Strategy).toHaveBeenCalledWith(registry, broker, strategyOptions);\n  });","file":"unit/registry/endpoint-list.spec.js","skipped":false,"dir":"test"},{"name":"should set internal flag","suites":["Test EndpointList constructor"],"updatePoint":{"line":43,"column":30},"line":43,"code":"  it(\"should set internal flag\", () => {\n    let list = new EndpointList(registry, broker, \"$listName\", \"groupName\", ActionEndpoint, Strategy);\n    expect(list).toBeDefined();\n    expect(list.name).toBe(\"$listName\");\n    expect(list.internal).toBe(true);\n  });","file":"unit/registry/endpoint-list.spec.js","skipped":false,"dir":"test"},{"name":"should add a new Endpoint","suites":["Test EndpointList.add"],"updatePoint":{"line":73,"column":31},"line":73,"code":"  it(\"should add a new Endpoint\", () => {\n    expect(list.endpoints.length).toBe(0);\n    let ep = list.add(node, service, action);\n    expect(ep).toBeDefined();\n    expect(list.EndPointFactory).toHaveBeenCalledTimes(1);\n    expect(list.EndPointFactory).toHaveBeenCalledWith(registry, broker, node, service, action);\n    expect(list.endpoints.length).toBe(1);\n    expect(list.endpoints[0]).toBe(ep);\n    expect(list.localEndpoints).toEqual([]);\n  });","file":"unit/registry/endpoint-list.spec.js","skipped":false,"dir":"test"},{"name":"should add a new local Endpoint","suites":["Test EndpointList.add"],"updatePoint":{"line":83,"column":37},"line":83,"code":"  it(\"should add a new local Endpoint\", () => {\n    let node2 = {\n      id: \"server-2\"\n    };\n    list.EndPointFactory = jest.fn(() => ({\n      local: true\n    }));\n    let ep = list.add(node2, service, action);\n    expect(ep).toBeDefined();\n    expect(list.EndPointFactory).toHaveBeenCalledTimes(1);\n    expect(list.EndPointFactory).toHaveBeenCalledWith(registry, broker, node2, service, action);\n    expect(list.endpoints.length).toBe(2);\n    expect(list.endpoints[1]).toBe(ep);\n    expect(list.localEndpoints).toEqual([ep]);\n    expect(list.hasLocal()).toBe(true);\n  });","file":"unit/registry/endpoint-list.spec.js","skipped":false,"dir":"test"},{"name":"should update action on existing endpoint","suites":["Test EndpointList.add"],"updatePoint":{"line":99,"column":47},"line":99,"code":"  it(\"should update action on existing endpoint\", () => {\n    list.EndPointFactory.mockClear();\n    let action2 = {\n      name: \"test.hello2\"\n    };\n    let ep = list.add(node, service, action2);\n    expect(ep).toBeDefined();\n    expect(list.EndPointFactory).toHaveBeenCalledTimes(0);\n    expect(epUpdate).toHaveBeenCalledTimes(1);\n    expect(epUpdate).toHaveBeenCalledWith(action2);\n    expect(list.endpoints.length).toBe(2);\n  });","file":"unit/registry/endpoint-list.spec.js","skipped":false,"dir":"test"},{"name":"should return null if empty","suites":["Test EndpointList.getFirst"],"updatePoint":{"line":120,"column":33},"line":120,"code":"  it(\"should return null if empty\", () => {\n    expect(list.getFirst()).toBeNull();\n  });","file":"unit/registry/endpoint-list.spec.js","skipped":false,"dir":"test"},{"name":"should return the first endpoint","suites":["Test EndpointList.getFirst"],"updatePoint":{"line":123,"column":38},"line":123,"code":"  it(\"should return the first endpoint\", () => {\n    list.endpoints = [{\n      a: 5\n    }, {\n      b: 10\n    }];\n    expect(list.getFirst()).toBe(list.endpoints[0]);\n  });","file":"unit/registry/endpoint-list.spec.js","skipped":false,"dir":"test"},{"name":"should call strategy select","suites":["Test EndpointList.select"],"updatePoint":{"line":149,"column":33},"line":149,"code":"  it(\"should call strategy select\", () => {\n    let res = list.select(arr, ctx);\n    expect(res).toBe(ep);\n    expect(select).toHaveBeenCalledTimes(1);\n    expect(select).toHaveBeenCalledWith(arr, ctx);\n  });","file":"unit/registry/endpoint-list.spec.js","skipped":false,"dir":"test"},{"name":"should throw exception if select return with null","suites":["Test EndpointList.select"],"updatePoint":{"line":155,"column":55},"line":155,"code":"  it(\"should throw exception if select return with null\", () => {\n    list.strategy.select = jest.fn();\n    expect(() => {\n      list.select(arr);\n    }).toThrowError(MoleculerError);\n  });","file":"unit/registry/endpoint-list.spec.js","skipped":false,"dir":"test"},{"name":"should return null if no endpoints","suites":["Test EndpointList.next"],"updatePoint":{"line":180,"column":40},"line":180,"code":"  it(\"should return null if no endpoints\", () => {\n    expect(list.endpoints.length).toBe(0);\n    let ep = list.next(ctx);\n    expect(ep).toBeNull();\n    expect(list.select).toHaveBeenCalledTimes(0);\n    expect(list.count()).toBe(0);\n  });","file":"unit/registry/endpoint-list.spec.js","skipped":false,"dir":"test"},{"name":"should return only one ep","suites":["Test EndpointList.next"],"updatePoint":{"line":187,"column":31},"line":187,"code":"  it(\"should return only one ep\", () => {\n    ep1 = list.add(node, service, action);\n    expect(list.next(ctx)).toBe(ep1);\n    expect(list.count()).toBe(1);\n    expect(list.select).toHaveBeenCalledTimes(0);\n  });","file":"unit/registry/endpoint-list.spec.js","skipped":false,"dir":"test"},{"name":"should return null if only one is not available","suites":["Test EndpointList.next"],"updatePoint":{"line":193,"column":53},"line":193,"code":"  it(\"should return null if only one is not available\", () => {\n    ep1.state = false;\n    expect(list.next(ctx)).toBeNull();\n    expect(list.select).toHaveBeenCalledTimes(0);\n    ep1.state = true;\n  });","file":"unit/registry/endpoint-list.spec.js","skipped":false,"dir":"test"},{"name":"should return local item is preferLocal is true && local item is available","suites":["Test EndpointList.next"],"updatePoint":{"line":199,"column":80},"line":199,"code":"  it(\"should return local item is preferLocal is true && local item is available\", () => {\n    ep2 = list.add({\n      id: \"node-2\"\n    }, service, action);\n    ep3 = list.add({\n      id: broker.nodeID\n    }, service, action);\n    ep4 = list.add({\n      id: \"node-3\"\n    }, service, action);\n    expect(list.count()).toBe(4);\n    expect(ep3.local).toBe(true);\n    expect(list.localEndpoints).toEqual([ep3]);\n    expect(list.next(ctx)).toBe(ep3);\n    expect(list.next(ctx)).toBe(ep3);\n    expect(list.next(ctx)).toBe(ep3);\n    expect(list.select).toHaveBeenCalledTimes(0);\n  });","file":"unit/registry/endpoint-list.spec.js","skipped":false,"dir":"test"},{"name":"should call select if no local ep","suites":["Test EndpointList.next"],"updatePoint":{"line":217,"column":39},"line":217,"code":"  it(\"should call select if no local ep\", () => {\n    ep3.state = false;\n    expect(list.next(ctx)).toBe(ep1);\n    expect(list.select).toHaveBeenCalledTimes(1);\n    expect(list.select).toHaveBeenCalledWith([ep1, ep2, ep4], ctx);\n    ep3.state = true;\n  });","file":"unit/registry/endpoint-list.spec.js","skipped":false,"dir":"test"},{"name":"should call select if no local ep","suites":["Test EndpointList.next"],"updatePoint":{"line":224,"column":39},"line":224,"code":"  it(\"should call select if no local ep\", () => {\n    list.select.mockClear();\n    registry.opts.preferLocal = false;\n    expect(list.next(ctx)).toBe(ep1);\n    expect(list.select).toHaveBeenCalledTimes(1);\n    expect(list.select).toHaveBeenCalledWith([ep1, ep2, ep3, ep4], ctx);\n  });","file":"unit/registry/endpoint-list.spec.js","skipped":false,"dir":"test"},{"name":"should find the first available ep","suites":["Test EndpointList.next"],"updatePoint":{"line":231,"column":40},"line":231,"code":"  it(\"should find the first available ep\", () => {\n    list.select = jest.fn(() => ep4);\n    ep1.state = false;\n    ep2.state = false;\n    ep3.state = false;\n    ep4.state = true;\n    expect(list.next(ctx)).toBe(ep4);\n    expect(list.select).toHaveBeenCalledTimes(1);\n    expect(list.select).toHaveBeenCalledWith([ep4], ctx);\n  });","file":"unit/registry/endpoint-list.spec.js","skipped":false,"dir":"test"},{"name":"should return null, if no available ep","suites":["Test EndpointList.next"],"updatePoint":{"line":241,"column":44},"line":241,"code":"  it(\"should return null, if no available ep\", () => {\n    list.select.mockClear();\n    ep1.state = false;\n    ep2.state = false;\n    ep3.state = false;\n    ep4.state = false;\n    expect(list.next(ctx)).toBeNull();\n    expect(list.select).toHaveBeenCalledTimes(0);\n  });","file":"unit/registry/endpoint-list.spec.js","skipped":false,"dir":"test"},{"name":"should return null if internal & localEndpoint is not available","suites":["Test EndpointList.next"],"updatePoint":{"line":250,"column":69},"line":250,"code":"  it(\"should return null if internal & localEndpoint is not available\", () => {\n    list.select.mockClear();\n    list.internal = true;\n    expect(list.next(ctx)).toBe(null);\n    expect(list.select).toHaveBeenCalledTimes(0);\n  });","file":"unit/registry/endpoint-list.spec.js","skipped":false,"dir":"test"},{"name":"should return always localEndpoint if internal","suites":["Test EndpointList.next"],"updatePoint":{"line":256,"column":52},"line":256,"code":"  it(\"should return always localEndpoint if internal\", () => {\n    list.select.mockClear();\n    list.internal = true;\n    ep3.state = true;\n    expect(list.next(ctx)).toBe(ep3);\n    expect(list.next(ctx)).toBe(ep3);\n    expect(list.next(ctx)).toBe(ep3);\n    expect(list.select).toHaveBeenCalledTimes(0);\n    list.internal = false;\n  });","file":"unit/registry/endpoint-list.spec.js","skipped":false,"dir":"test"},{"name":"should return null if no endpoints","suites":["Test EndpointList.nextLocal"],"updatePoint":{"line":285,"column":40},"line":285,"code":"  it(\"should return null if no endpoints\", () => {\n    expect(list.endpoints.length).toBe(0);\n    let ep = list.nextLocal(ctx);\n    expect(ep).toBeNull();\n    expect(list.select).toHaveBeenCalledTimes(0);\n    expect(list.count()).toBe(0);\n    expect(list.localEndpoints.length).toBe(0);\n  });","file":"unit/registry/endpoint-list.spec.js","skipped":false,"dir":"test"},{"name":"should return only one ep","suites":["Test EndpointList.nextLocal"],"updatePoint":{"line":293,"column":31},"line":293,"code":"  it(\"should return only one ep\", () => {\n    ep1 = list.add(node, service, action);\n    expect(list.nextLocal(ctx)).toBe(ep1);\n    expect(list.count()).toBe(1);\n    expect(list.localEndpoints.length).toBe(1);\n  });","file":"unit/registry/endpoint-list.spec.js","skipped":false,"dir":"test"},{"name":"should return null if only one is not available","suites":["Test EndpointList.nextLocal"],"updatePoint":{"line":299,"column":53},"line":299,"code":"  it(\"should return null if only one is not available\", () => {\n    ep1.state = false;\n    expect(list.nextLocal(ctx)).toBeNull();\n    expect(list.select).toHaveBeenCalledTimes(0);\n    ep1.state = true;\n  });","file":"unit/registry/endpoint-list.spec.js","skipped":false,"dir":"test"},{"name":"should call select if there are more ep","suites":["Test EndpointList.nextLocal"],"updatePoint":{"line":305,"column":45},"line":305,"code":"  it(\"should call select if there are more ep\", () => {\n    list.add({\n      id: \"node-2\"\n    }, service, action);\n    ep3 = list.add(node, {\n      name: \"test2\"\n    }, action);\n    list.add({\n      id: \"node-3\"\n    }, service, action);\n    expect(list.localEndpoints.length).toBe(2);\n    expect(ep3.local).toBe(true);\n    expect(list.localEndpoints).toEqual([ep1, ep3]);\n    expect(list.nextLocal(ctx)).toBe(ep1);\n    expect(list.select).toHaveBeenCalledTimes(1);\n    expect(list.select).toHaveBeenCalledWith([ep1, ep3], ctx);\n  });","file":"unit/registry/endpoint-list.spec.js","skipped":false,"dir":"test"},{"name":"should find the first available ep","suites":["Test EndpointList.nextLocal"],"updatePoint":{"line":322,"column":40},"line":322,"code":"  it(\"should find the first available ep\", () => {\n    list.select = jest.fn(() => ep3);\n    ep1.state = false;\n    ep3.state = true;\n    expect(list.nextLocal(ctx)).toBe(ep3);\n    expect(list.select).toHaveBeenCalledTimes(1);\n    expect(list.select).toHaveBeenCalledWith([ep3], ctx);\n  });","file":"unit/registry/endpoint-list.spec.js","skipped":false,"dir":"test"},{"name":"should return null, if no available ep","suites":["Test EndpointList.nextLocal"],"updatePoint":{"line":330,"column":44},"line":330,"code":"  it(\"should return null, if no available ep\", () => {\n    list.select = jest.fn();\n    ep1.state = false;\n    ep3.state = false;\n    expect(list.nextLocal(ctx)).toBeNull();\n    expect(list.select).toHaveBeenCalledTimes(0);\n  });","file":"unit/registry/endpoint-list.spec.js","skipped":false,"dir":"test"},{"name":"should return the correct value","suites":["Test EndpointList.hasAvailable"],"updatePoint":{"line":356,"column":37},"line":356,"code":"  it(\"should return the correct value\", () => {\n    expect(list.hasAvailable()).toBe(true);\n    ep1.state = false;\n    expect(list.hasAvailable()).toBe(true);\n    ep2.state = false;\n    expect(list.hasAvailable()).toBe(false);\n  });","file":"unit/registry/endpoint-list.spec.js","skipped":false,"dir":"test"},{"name":"should return the correct value","suites":["Test EndpointList.hasLocal"],"updatePoint":{"line":382,"column":37},"line":382,"code":"  it(\"should return the correct value\", () => {\n    expect(list.hasLocal()).toBe(true);\n    list.localEndpoints = [];\n    expect(list.hasLocal()).toBe(false);\n  });","file":"unit/registry/endpoint-list.spec.js","skipped":false,"dir":"test"},{"name":"should return the correct ep","suites":["Test EndpointList.getEndpointByNodeID"],"updatePoint":{"line":406,"column":34},"line":406,"code":"  it(\"should return the correct ep\", () => {\n    expect(list.getEndpointByNodeID(broker.nodeID)).toBe(ep2);\n    expect(list.getEndpointByNodeID(\"node-1\")).toBe(ep1);\n  });","file":"unit/registry/endpoint-list.spec.js","skipped":false,"dir":"test"},{"name":"should return null","suites":["Test EndpointList.getEndpointByNodeID"],"updatePoint":{"line":410,"column":24},"line":410,"code":"  it(\"should return null\", () => {\n    ep1.state = false;\n    expect(list.getEndpointByNodeID(\"node-1\")).toBe(null);\n    expect(list.getEndpointByNodeID(\"node-123\")).toBe(null);\n  });","file":"unit/registry/endpoint-list.spec.js","skipped":false,"dir":"test"},{"name":"should return the correct ep","suites":["Test EndpointList.hasNodeID"],"updatePoint":{"line":434,"column":34},"line":434,"code":"  it(\"should return the correct ep\", () => {\n    expect(list.hasNodeID(broker.nodeID)).toBe(true);\n    expect(list.hasNodeID(\"node-1\")).toBe(true);\n    expect(list.hasNodeID(\"node-123\")).toBe(false);\n  });","file":"unit/registry/endpoint-list.spec.js","skipped":false,"dir":"test"},{"name":"should remove endpoints for service-1","suites":["Test EndpointList.removeByService"],"updatePoint":{"line":464,"column":43},"line":464,"code":"  it(\"should remove endpoints for service-1\", () => {\n    expect(list.count()).toBe(3);\n    list.removeByService(service1);\n    expect(list.count()).toBe(1);\n    expect(list.hasNodeID(broker.nodeID)).toBe(true);\n    expect(list.hasNodeID(\"node-1\")).toBe(false);\n    expect(list.hasNodeID(\"node-2\")).toBe(false);\n    expect(list.hasLocal()).toBe(true);\n    list.removeByService(service2);\n    expect(list.count()).toBe(0);\n    expect(list.hasLocal()).toBe(false);\n  });","file":"unit/registry/endpoint-list.spec.js","skipped":false,"dir":"test"},{"name":"should remove endpoints for service-1","suites":["Test EndpointList.removeByNodeID"],"updatePoint":{"line":498,"column":43},"line":498,"code":"  it(\"should remove endpoints for service-1\", () => {\n    expect(list.count()).toBe(2);\n    list.removeByNodeID(\"node-1\");\n    expect(list.count()).toBe(1);\n    expect(list.hasNodeID(broker.nodeID)).toBe(true);\n    expect(list.hasNodeID(\"node-1\")).toBe(false);\n    expect(list.hasLocal()).toBe(true);\n    list.removeByNodeID(broker.nodeID);\n    expect(list.count()).toBe(0);\n    expect(list.hasLocal()).toBe(false);\n  });","file":"unit/registry/endpoint-list.spec.js","skipped":false,"dir":"test"},{"name":"should remove endpoints for service-1","suites":["Test EndpointList.setLocalEndpoints"],"updatePoint":{"line":531,"column":43},"line":531,"code":"  it(\"should remove endpoints for service-1\", () => {\n    expect(list.localEndpoints).toEqual([ep2]);\n    list.localEndpoints = [];\n    list.setLocalEndpoints();\n    expect(list.localEndpoints).toEqual([ep2]);\n    list.removeByNodeID(broker.nodeID);\n    expect(list.localEndpoints).toEqual([]);\n  });","file":"unit/registry/endpoint-list.spec.js","skipped":false,"dir":"test"},{"name":"should set properties","suites":["Test Endpoint"],"updatePoint":{"line":16,"column":27},"line":16,"code":"  it(\"should set properties\", () => {\n    ep = new Endpoint(registry, broker, node);\n    expect(ep).toBeDefined();\n    expect(ep.registry).toBe(registry);\n    expect(ep.broker).toBe(broker);\n    expect(ep.id).toBe(node.id);\n    expect(ep.node).toBe(node);\n    expect(ep.local).toBe(false);\n    expect(ep.state).toBe(true);\n    expect(ep.isAvailable).toBe(true);\n  });","file":"unit/registry/endpoint.spec.js","skipped":false,"dir":"test"},{"name":"shoud unAvailable","suites":["Test Endpoint"],"updatePoint":{"line":27,"column":23},"line":27,"code":"  it(\"shoud unAvailable\", () => {\n    ep.state = false;\n    expect(ep.isAvailable).toBe(false);\n  });","file":"unit/registry/endpoint.spec.js","skipped":false,"dir":"test"},{"name":"should create local ep","suites":["Test Endpoint"],"updatePoint":{"line":31,"column":28},"line":31,"code":"  it(\"should create local ep\", () => {\n    let newNode = {\n      id: broker.nodeID\n    };\n    let ep = new Endpoint(registry, broker, newNode);\n    expect(ep).toBeDefined();\n    expect(ep.registry).toBe(registry);\n    expect(ep.broker).toBe(broker);\n    expect(ep.id).toBe(newNode.id);\n    expect(ep.node).toBe(newNode);\n    expect(ep.local).toBe(true);\n    expect(ep.state).toBe(true);\n    expect(ep.isAvailable).toBe(true);\n  });","file":"unit/registry/endpoint.spec.js","skipped":false,"dir":"test"},{"name":"test without CB","suites":["Test EventCatalog constructor"],"updatePoint":{"line":26,"column":21},"line":26,"code":"  it(\"test without CB\", () => {\n    let catalog = new EventCatalog(registry, broker, Strategy);\n    expect(catalog).toBeDefined();\n    expect(catalog.registry).toBe(registry);\n    expect(catalog.broker).toBe(broker);\n    expect(catalog.logger).toBe(registry.logger);\n    expect(catalog.StrategyFactory).toBe(Strategy);\n    expect(catalog.events).toBeInstanceOf(Array);\n    expect(catalog.EndpointFactory).toBe(EventEndpoint);\n  });","file":"unit/registry/event-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should create an EndpointList and add to 'events'","suites":["Test EventCatalog methods"],"updatePoint":{"line":46,"column":55},"line":46,"code":"  it(\"should create an EndpointList and add to 'events'\", () => {\n    let node = {\n      id: \"server-1\"\n    };\n    let event = {\n      name: \"hello\"\n    };\n    expect(catalog.events.length).toBe(0);\n    list = catalog.add(node, service, event);\n    expect(catalog.events.length).toBe(1);\n    expect(list).toBeInstanceOf(EndpointList);\n    expect(list.group).toBe(service.name);\n  });","file":"unit/registry/event-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should not create a new EndpointList just add new node","suites":["Test EventCatalog methods"],"updatePoint":{"line":59,"column":60},"line":59,"code":"  it(\"should not create a new EndpointList just add new node\", () => {\n    let node = {\n      id: \"server-2\"\n    };\n    let event = {\n      name: \"hello\"\n    };\n    list.add = jest.fn();\n    let res = catalog.add(node, service, event);\n    expect(catalog.events.length).toBe(1);\n    expect(res).toBe(list);\n    expect(list.add).toHaveBeenCalledTimes(1);\n    expect(list.add).toHaveBeenCalledWith(node, service, event);\n  });","file":"unit/registry/event-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should return the list","suites":["Test EventCatalog methods"],"updatePoint":{"line":73,"column":28},"line":73,"code":"  it(\"should return the list\", () => {\n    expect(catalog.get(\"hello\", \"test\")).toBe(list);\n    expect(catalog.get(\"hello\", \"other\")).toBeUndefined();\n    expect(catalog.get(\"nothing\", \"test\")).toBeUndefined();\n  });","file":"unit/registry/event-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should call list.removeByNodeID","suites":["Test EventCatalog methods"],"updatePoint":{"line":78,"column":37},"line":78,"code":"  it(\"should call list.removeByNodeID\", () => {\n    list.removeByNodeID = jest.fn();\n    catalog.remove(\"hello\", \"server-2\");\n    expect(list.removeByNodeID).toHaveBeenCalledTimes(1);\n    expect(list.removeByNodeID).toHaveBeenCalledWith(\"server-2\");\n    list.removeByNodeID.mockClear();\n    catalog.remove(\"not-found\", \"server-2\");\n    expect(list.removeByNodeID).toHaveBeenCalledTimes(0);\n  });","file":"unit/registry/event-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should call list.removeByService","suites":["Test EventCatalog methods"],"updatePoint":{"line":87,"column":38},"line":87,"code":"  it(\"should call list.removeByService\", () => {\n    let service2 = {\n      name: \"echo\"\n    };\n    let list2 = catalog.add(broker.registry.nodes.localNode, service2, {\n      name: \"echo.reply\",\n      cache: true\n    });\n    list.removeByService = jest.fn();\n    list2.removeByService = jest.fn();\n    catalog.removeByService(service2);\n    expect(list.removeByService).toHaveBeenCalledTimes(1);\n    expect(list.removeByService).toHaveBeenCalledWith(service2);\n    expect(list2.removeByService).toHaveBeenCalledTimes(1);\n    expect(list2.removeByService).toHaveBeenCalledWith(service2);\n  });","file":"unit/registry/event-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should return with event list","suites":["Test EventCatalog methods"],"updatePoint":{"line":103,"column":35},"line":103,"code":"  it(\"should return with event list\", () => {\n    let res = catalog.list({});\n    expect(res).toEqual([{\n      event: {\n        name: \"hello\"\n      },\n      available: true,\n      count: 1,\n      group: \"test\",\n      hasLocal: false,\n      name: \"hello\"\n    }, {\n      event: {\n        name: \"echo.reply\",\n        cache: true\n      },\n      available: true,\n      count: 1,\n      group: \"echo\",\n      hasLocal: true,\n      name: \"echo.reply\"\n    }]);\n    res = catalog.list({\n      withEndpoints: true\n    });\n    expect(res).toEqual([{\n      event: {\n        name: \"hello\"\n      },\n      available: true,\n      count: 1,\n      endpoints: [{\n        available: undefined,\n        nodeID: \"server-1\",\n        state: true\n      }],\n      group: \"test\",\n      hasLocal: false,\n      name: \"hello\"\n    }, {\n      event: {\n        name: \"echo.reply\",\n        cache: true\n      },\n      available: true,\n      count: 1,\n      endpoints: [{\n        available: true,\n        nodeID: broker.registry.nodes.localNode.id,\n        state: true\n      }],\n      group: \"echo\",\n      hasLocal: true,\n      name: \"echo.reply\"\n    }]);\n    res = catalog.list({\n      onlyLocal: true,\n      skipInternal: true\n    });\n    expect(res).toEqual([{\n      available: true,\n      count: 1,\n      event: {\n        cache: true,\n        name: \"echo.reply\"\n      },\n      group: \"echo\",\n      hasLocal: true,\n      name: \"echo.reply\"\n    }]);\n    catalog.get(\"hello\", \"test\").hasAvailable = jest.fn(() => false);\n    res = catalog.list({\n      onlyAvailable: true\n    });\n    expect(res).toEqual([{\n      event: {\n        name: \"echo.reply\",\n        cache: true\n      },\n      available: true,\n      count: 1,\n      group: \"echo\",\n      hasLocal: true,\n      name: \"echo.reply\"\n    }]);\n  });","file":"unit/registry/event-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should return balanced endpoint list for 'user.created'","suites":["Test EventCatalog.getBalancedEndpoints & getAllEndpoints"],"updatePoint":{"line":249,"column":61},"line":249,"code":"  it(\"should return balanced endpoint list for 'user.created'\", () => {\n    expect(catalog.events.length).toBe(4);\n    let res = catalog.getBalancedEndpoints(\"user.created\");\n    expect(res.length).toBe(3);\n    expect(res[0][0].id).toEqual(\"node-1\");\n    expect(res[0][1]).toEqual(\"users\");\n    expect(res.length).toBe(3);\n    expect(res[1][0].id).toEqual(\"node-1\");\n    expect(res[1][1]).toEqual(\"payment\");\n    expect(res.length).toBe(3);\n    expect(res[2][0].id).toEqual(\"node-2\");\n    expect(res[2][1]).toEqual(\"mail\");\n  });","file":"unit/registry/event-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should return balanced endpoint list for 'user.updated'","suites":["Test EventCatalog.getBalancedEndpoints & getAllEndpoints"],"updatePoint":{"line":262,"column":61},"line":262,"code":"  it(\"should return balanced endpoint list for 'user.updated'\", () => {\n    expect(catalog.events.length).toBe(4);\n    let res = catalog.getBalancedEndpoints(\"user.updated\");\n    expect(res.length).toBe(1);\n    expect(res[0][0].id).toEqual(\"node-3\");\n    expect(res[0][1]).toEqual(\"mail\");\n  });","file":"unit/registry/event-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should return balanced endpoint list for 'user.created' on group 'payment'","suites":["Test EventCatalog.getBalancedEndpoints & getAllEndpoints"],"updatePoint":{"line":269,"column":80},"line":269,"code":"  it(\"should return balanced endpoint list for 'user.created' on group 'payment'\", () => {\n    expect(catalog.events.length).toBe(4);\n    let res = catalog.getBalancedEndpoints(\"user.created\", \"payment\");\n    expect(res.length).toBe(1);\n    expect(res[0][0].id).toEqual(\"node-2\");\n    expect(res[0][1]).toEqual(\"payment\");\n  });","file":"unit/registry/event-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should return all endpoint","suites":["Test EventCatalog.getBalancedEndpoints & getAllEndpoints"],"updatePoint":{"line":276,"column":32},"line":276,"code":"  it(\"should return all endpoint\", () => {\n    let res = catalog.getAllEndpoints(\"user.created\");\n    expect(res.length).toBe(4);\n    expect(res[0].id).toEqual(\"node-1\");\n    expect(res[1].id).toEqual(\"node-2\");\n    expect(res[2].id).toEqual(\"node-4\");\n    expect(res[3].id).toEqual(\"node-3\");\n  });","file":"unit/registry/event-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should return all endpoint with groups","suites":["Test EventCatalog.getBalancedEndpoints & getAllEndpoints"],"updatePoint":{"line":284,"column":44},"line":284,"code":"  it(\"should return all endpoint with groups\", () => {\n    let res = catalog.getAllEndpoints(\"user.created\", [\"mail\"]);\n    expect(res.length).toBe(2);\n    expect(res[0].id).toEqual(\"node-2\");\n    expect(res[1].id).toEqual(\"node-3\");\n  });","file":"unit/registry/event-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should return all endpoint with matches","suites":["Test EventCatalog.getBalancedEndpoints & getAllEndpoints"],"updatePoint":{"line":290,"column":45},"line":290,"code":"  it(\"should return all endpoint with matches\", () => {\n    let res = catalog.getAllEndpoints(\"user.removed\");\n    expect(res.length).toBe(2);\n    expect(res[0].id).toEqual(\"node-2\");\n    expect(res[1].id).toEqual(\"node-3\");\n  });","file":"unit/registry/event-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should return empty list with matches","suites":["Test EventCatalog.getBalancedEndpoints & getAllEndpoints"],"updatePoint":{"line":296,"column":43},"line":296,"code":"  it(\"should return empty list with matches\", () => {\n    let res = catalog.getAllEndpoints(\"posts.created\");\n    expect(res.length).toBe(0);\n  });","file":"unit/registry/event-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should collect groups for event 'user.created'","suites":["Test getGroups"],"updatePoint":{"line":349,"column":52},"line":349,"code":"  it(\"should collect groups for event 'user.created'\", () => {\n    expect(catalog.getGroups(\"user.created\")).toEqual([\"users\", \"payment\", \"mail\"]);\n    expect(catalog.getGroups(\"user.removed\")).toEqual([\"mail\"]);\n    expect(catalog.getGroups(\"posts.created\")).toEqual([]);\n  });","file":"unit/registry/event-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should broadcast local handlers without groups","suites":["Test EventCatalog.emitLocalServices"],"updatePoint":{"line":403,"column":52},"line":403,"code":"  it(\"should broadcast local handlers without groups\", () => {\n    expect(catalog.events.length).toBe(3);\n    const ctx = Context.create(broker, {\n      id: \"node-99\",\n      event: {\n        name: \"user.*\"\n      }\n    }, {\n      a: 5\n    });\n    ctx.eventName = \"user.created\";\n    ctx.eventGroups = null;\n    ctx.eventType = \"broadcast\";\n    jest.spyOn(ctx, \"copy\");\n    catalog.emitLocalServices(ctx);\n    expect(catalog.callEventHandler).toHaveBeenCalledTimes(4);\n    expect(catalog.callEventHandler).toHaveBeenCalledWith(expect.any(Context));\n    let copied = catalog.callEventHandler.mock.calls[0][0];\n    expect(copied.event).toEqual({\n      name: \"user.created\",\n      desc: \"usersEvent\",\n      handler: expect.any(Function)\n    });\n    expect(copied.eventGroups).toEqual(null);\n    expect(copied.nodeID).toEqual(\"node-99\");\n    copied = catalog.callEventHandler.mock.calls[1][0];\n    expect(copied.event).toEqual({\n      name: \"user.created\",\n      desc: \"paymentEvent\",\n      handler: expect.any(Function)\n    });\n    expect(copied.eventGroups).toEqual(null);\n    expect(copied.nodeID).toEqual(\"node-99\");\n    copied = catalog.callEventHandler.mock.calls[2][0];\n    expect(copied.event).toEqual({\n      name: \"user.created\",\n      group: \"payment\",\n      desc: \"otherEvent\",\n      handler: expect.any(Function)\n    });\n    expect(copied.eventGroups).toEqual(null);\n    expect(copied.nodeID).toEqual(\"node-99\");\n    copied = catalog.callEventHandler.mock.calls[3][0];\n    expect(copied.event).toEqual({\n      name: \"user.*\",\n      desc: \"mailEvent\",\n      handler: expect.any(Function)\n    });\n    expect(copied.eventGroups).toEqual(null);\n    expect(copied.nodeID).toEqual(\"node-99\");\n    expect(ctx.copy).toHaveBeenCalledTimes(4);\n  });","file":"unit/registry/event-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should broadcast local handlers with groups","suites":["Test EventCatalog.emitLocalServices"],"updatePoint":{"line":455,"column":49},"line":455,"code":"  it(\"should broadcast local handlers with groups\", () => {\n    catalog.callEventHandler.mockClear();\n    const ctx = Context.create(broker, {\n      id: \"node-99\",\n      event: {\n        name: \"user.*\"\n      }\n    }, {\n      a: 5\n    });\n    ctx.eventName = \"user.created\";\n    ctx.eventGroups = [\"mail\", \"payment\"];\n    ctx.eventType = \"broadcast\";\n    jest.spyOn(ctx, \"copy\");\n    catalog.emitLocalServices(ctx);\n    expect(catalog.callEventHandler).toHaveBeenCalledTimes(3);\n    expect(catalog.callEventHandler).toHaveBeenCalledWith(expect.any(Context));\n    let copied = catalog.callEventHandler.mock.calls[0][0];\n    expect(copied.event).toEqual({\n      name: \"user.created\",\n      desc: \"paymentEvent\",\n      handler: expect.any(Function)\n    });\n    expect(copied.eventGroups).toEqual([\"mail\", \"payment\"]);\n    expect(copied.nodeID).toEqual(\"node-99\");\n    copied = catalog.callEventHandler.mock.calls[1][0];\n    expect(copied.event).toEqual({\n      name: \"user.created\",\n      group: \"payment\",\n      desc: \"otherEvent\",\n      handler: expect.any(Function)\n    });\n    expect(copied.eventGroups).toEqual([\"mail\", \"payment\"]);\n    expect(copied.nodeID).toEqual(\"node-99\");\n    copied = catalog.callEventHandler.mock.calls[2][0];\n    expect(copied.event).toEqual({\n      name: \"user.*\",\n      desc: \"mailEvent\",\n      handler: expect.any(Function)\n    });\n    expect(copied.eventGroups).toEqual([\"mail\", \"payment\"]);\n    expect(copied.nodeID).toEqual(\"node-99\");\n    expect(ctx.copy).toHaveBeenCalledTimes(3);\n  });","file":"unit/registry/event-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should balance local handlers without groups","suites":["Test EventCatalog.emitLocalServices"],"updatePoint":{"line":499,"column":50},"line":499,"code":"  it(\"should balance local handlers without groups\", () => {\n    catalog.callEventHandler.mockClear();\n    const ctx = Context.create(broker, {\n      id: \"node-99\",\n      event: {\n        name: \"user.*\"\n      }\n    }, {\n      a: 5\n    });\n    ctx.eventName = \"user.created\";\n    ctx.eventGroups = null;\n    ctx.eventType = \"emit\";\n    jest.spyOn(ctx, \"copy\");\n    catalog.emitLocalServices(ctx);\n    expect(catalog.callEventHandler).toHaveBeenCalledTimes(3);\n    expect(catalog.callEventHandler).toHaveBeenCalledWith(expect.any(Context));\n    let copied = catalog.callEventHandler.mock.calls[0][0];\n    expect(copied.event).toEqual({\n      name: \"user.created\",\n      desc: \"usersEvent\",\n      handler: expect.any(Function)\n    });\n    expect(copied.eventGroups).toEqual(null);\n    expect(copied.nodeID).toEqual(\"node-99\");\n    copied = catalog.callEventHandler.mock.calls[1][0];\n    expect(copied.event).toEqual({\n      name: \"user.created\",\n      desc: \"paymentEvent\",\n      handler: expect.any(Function)\n    });\n    expect(copied.eventGroups).toEqual(null);\n    expect(copied.nodeID).toEqual(\"node-99\");\n    copied = catalog.callEventHandler.mock.calls[2][0];\n    expect(copied.event).toEqual({\n      name: \"user.*\",\n      desc: \"mailEvent\",\n      handler: expect.any(Function)\n    });\n    expect(copied.eventGroups).toEqual(null);\n    expect(copied.nodeID).toEqual(\"node-99\");\n    expect(ctx.copy).toHaveBeenCalledTimes(3);\n  });","file":"unit/registry/event-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should balance local handlers with groups","suites":["Test EventCatalog.emitLocalServices"],"updatePoint":{"line":542,"column":47},"line":542,"code":"  it(\"should balance local handlers with groups\", () => {\n    catalog.callEventHandler.mockClear();\n    const ctx = Context.create(broker, {\n      id: \"node-99\",\n      event: {\n        name: \"user.*\"\n      }\n    }, {\n      a: 5\n    });\n    ctx.eventName = \"user.created\";\n    ctx.eventGroups = [\"mail\", \"payment\"];\n    ctx.eventType = \"emit\";\n    jest.spyOn(ctx, \"copy\");\n    catalog.emitLocalServices(ctx);\n    expect(catalog.callEventHandler).toHaveBeenCalledTimes(2);\n    expect(catalog.callEventHandler).toHaveBeenCalledWith(expect.any(Context));\n    let copied = catalog.callEventHandler.mock.calls[0][0];\n    expect(copied.event).toEqual({\n      name: \"user.created\",\n      desc: \"otherEvent\",\n      group: \"payment\",\n      handler: expect.any(Function)\n    });\n    expect(copied.eventGroups).toEqual([\"mail\", \"payment\"]);\n    expect(copied.nodeID).toEqual(\"node-99\");\n    copied = catalog.callEventHandler.mock.calls[1][0];\n    expect(copied.event).toEqual({\n      name: \"user.*\",\n      desc: \"mailEvent\",\n      handler: expect.any(Function)\n    });\n    expect(copied.eventGroups).toEqual([\"mail\", \"payment\"]);\n    expect(copied.nodeID).toEqual(\"node-99\");\n    expect(ctx.copy).toHaveBeenCalledTimes(2);\n  });","file":"unit/registry/event-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should add catch handler to result","suites":["Test EventCatalog.callEventHandler"],"updatePoint":{"line":598,"column":40},"line":598,"code":"  it(\"should add catch handler to result\", () => {\n    let resolver;\n    ctx.endpoint.event.handler = jest.fn(() => new Promise(res => resolver = res));\n    const p = catalog.callEventHandler(ctx);\n    expect(ctx.endpoint.event.handler).toHaveBeenCalledTimes(1);\n    expect(ctx.endpoint.event.handler).toHaveBeenCalledWith(ctx);\n    expect(errorHandler).toHaveBeenCalledTimes(0);\n    resolver();\n    return p;\n  });","file":"unit/registry/event-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should catch error","suites":["Test EventCatalog.callEventHandler"],"updatePoint":{"line":608,"column":24},"line":608,"code":"  it(\"should catch error\", () => {\n    let rejecter;\n    ctx.endpoint.event.handler = jest.fn(() => new Promise((res, rej) => rejecter = rej));\n    broker.logger.error = jest.fn();\n    const p = catalog.callEventHandler(ctx);\n    expect(ctx.endpoint.event.handler).toHaveBeenCalledTimes(1);\n    expect(ctx.endpoint.event.handler).toHaveBeenCalledWith(ctx);\n    const err = new Error(\"Something went wrong\");\n    rejecter(err);\n    return p.then(protectReject).catch(e => {\n      expect(e).toBe(err);\n    });\n  });","file":"unit/registry/event-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should create an EndpointList and add to 'events'","suites":["Test EventCatalog add method"],"updatePoint":{"line":631,"column":55},"line":631,"code":"  it(\"should create an EndpointList and add to 'events'\", () => {\n    let node = {\n      id: \"server-1\"\n    };\n    let event = {\n      name: \"hello\"\n    };\n    list = catalog.add(node, service, event);\n    expect(list).toBeInstanceOf(EndpointList);\n    expect(list.strategy).toBeInstanceOf(Strategy);\n    expect(list.strategy.opts).toEqual({});\n  });","file":"unit/registry/event-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should create an EndpointList with custom strategy","suites":["Test EventCatalog add method"],"updatePoint":{"line":643,"column":56},"line":643,"code":"  it(\"should create an EndpointList with custom strategy\", () => {\n    let node = {\n      id: \"server-1\"\n    };\n    let event = {\n      name: \"welcome\",\n      strategy: \"CpuUsage\",\n      strategyOptions: {\n        sampleCount: 6\n      }\n    };\n    list = catalog.add(node, service, event);\n    expect(list).toBeInstanceOf(EndpointList);\n    expect(list.strategy).toBeInstanceOf(CpuStrategy);\n    expect(list.strategy.opts).toEqual({\n      sampleCount: 6,\n      lowCpuUsage: 10\n    });\n  });","file":"unit/registry/event-catalog.spec.js","skipped":false,"dir":"test"},{"name":"test properties","suites":["Test NodeCatalog constructor"],"updatePoint":{"line":8,"column":21},"line":8,"code":"  it(\"test properties\", () => {\n    const broker = new ServiceBroker({\n      logger: false\n    });\n    const registry = broker.registry;\n    broker.localBus.on = jest.fn();\n    const catalog = new NodeCatalog(registry, broker);\n    expect(catalog).toBeDefined();\n    expect(catalog.registry).toBe(registry);\n    expect(catalog.broker).toBe(broker);\n    expect(catalog.logger).toBe(registry.logger);\n    expect(catalog.nodes).toBeInstanceOf(Map);\n    expect(catalog.localNode).toBeDefined();\n    expect(catalog.localNode.id).toBe(broker.nodeID);\n    expect(catalog.localNode.available).toBe(true);\n    expect(catalog.nodes.size).toBe(1);\n  });","file":"unit/registry/node-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should load local values","suites":["Test NodeCatalog localNode"],"updatePoint":{"line":35,"column":30},"line":35,"code":"  it(\"should load local values\", () => {\n    const node = catalog.localNode;\n    expect(node.id).toBe(broker.nodeID);\n    expect(node.instanceID).toBe(broker.instanceID);\n    expect(node.local).toBe(true);\n    expect(node.ipList).toBeInstanceOf(Array);\n    expect(node.hostname).toBeDefined();\n    expect(node.client).toEqual({\n      type: \"nodejs\",\n      version: broker.MOLECULER_VERSION,\n      langVersion: process.version\n    });\n    expect(node.seq).toBe(1);\n    expect(node.metadata).toBe(metadata);\n    expect(catalog.nodes.get(broker.nodeID)).toBe(node);\n  });","file":"unit/registry/node-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should add new nodes","suites":["Test NodeCatalog.add & has & get"],"updatePoint":{"line":57,"column":26},"line":57,"code":"  it(\"should add new nodes\", () => {\n    catalog.add(\"node-1\", {\n      a: 1\n    });\n    catalog.add(\"node-2\", {\n      a: 2\n    });\n    catalog.add(\"node-3\", {\n      a: 3\n    });\n    expect(catalog.nodes.size).toBe(4);\n    expect(catalog.has(\"node-2\")).toBe(true);\n    expect(catalog.has(\"node-3\")).toBe(true);\n    expect(catalog.has(\"node-99\")).toBe(false);\n    expect(catalog.has(broker.nodeID)).toBe(true);\n    expect(catalog.get(\"node-2\")).toEqual({\n      a: 2\n    });\n    expect(catalog.get(\"node-1\")).toEqual({\n      a: 1\n    });\n    expect(catalog.get(broker.nodeID)).toBe(catalog.localNode);\n  });","file":"unit/registry/node-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should add new nodes","suites":["Test NodeCatalog.processNodeInfo"],"updatePoint":{"line":89,"column":26},"line":89,"code":"  it(\"should add new nodes\", () => {\n    const payload = {\n      sender: \"node-12\",\n      services: [{}, {}]\n    };\n    expect(catalog.count()).toBe(1);\n    expect(catalog.onlineCount()).toBe(1);\n    catalog.processNodeInfo(payload);\n    expect(catalog.nodes.size).toBe(2);\n    expect(catalog.count()).toBe(2);\n    expect(catalog.onlineCount()).toBe(2);\n    const node = catalog.get(\"node-12\");\n    expect(node.id).toBe(\"node-12\");\n    expect(broker.registry.registerServices).toHaveBeenCalledTimes(1);\n    expect(broker.registry.registerServices).toHaveBeenCalledWith(node, payload.services);\n    expect(broker.broadcastLocal).toHaveBeenCalledTimes(1);\n    expect(broker.broadcastLocal).toHaveBeenCalledWith(\"$node.connected\", {\n      node,\n      reconnected: false\n    });\n    expect(broker.registry.updateMetrics).toHaveBeenCalledTimes(1);\n    node.update = jest.fn(() => true);\n  });","file":"unit/registry/node-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should update exist node","suites":["Test NodeCatalog.processNodeInfo"],"updatePoint":{"line":112,"column":30},"line":112,"code":"  it(\"should update exist node\", () => {\n    broker.registry.registerServices.mockClear();\n    broker.broadcastLocal.mockClear();\n    broker.registry.updateMetrics.mockClear();\n    const payload = {\n      sender: \"node-12\",\n      services: [{}, {}, {}]\n    };\n    const node = catalog.get(\"node-12\");\n    catalog.processNodeInfo(payload);\n    expect(catalog.nodes.size).toBe(2);\n    expect(broker.registry.registerServices).toHaveBeenCalledTimes(1);\n    expect(broker.registry.registerServices).toHaveBeenCalledWith(node, node.services);\n    expect(broker.broadcastLocal).toHaveBeenCalledTimes(1);\n    expect(broker.broadcastLocal).toHaveBeenCalledWith(\"$node.updated\", {\n      node\n    });\n    expect(broker.registry.updateMetrics).toHaveBeenCalledTimes(0);\n  });","file":"unit/registry/node-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should not update node services","suites":["Test NodeCatalog.processNodeInfo"],"updatePoint":{"line":131,"column":37},"line":131,"code":"  it(\"should not update node services\", () => {\n    broker.registry.registerServices.mockClear();\n    broker.broadcastLocal.mockClear();\n    broker.registry.updateMetrics.mockClear();\n    const node = catalog.get(\"node-12\");\n    node.update = jest.fn(() => false);\n    const payload = {\n      sender: \"node-12\",\n      services: [{}, {}, {}]\n    };\n    catalog.processNodeInfo(payload);\n    expect(catalog.nodes.size).toBe(2);\n    expect(broker.registry.registerServices).toHaveBeenCalledTimes(0);\n    expect(broker.broadcastLocal).toHaveBeenCalledTimes(1);\n    expect(broker.broadcastLocal).toHaveBeenCalledWith(\"$node.updated\", {\n      node\n    });\n    expect(broker.registry.updateMetrics).toHaveBeenCalledTimes(0);\n    node.available = false;\n  });","file":"unit/registry/node-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should update exist node and send reconnected event","suites":["Test NodeCatalog.processNodeInfo"],"updatePoint":{"line":151,"column":57},"line":151,"code":"  it(\"should update exist node and send reconnected event\", () => {\n    broker.registry.registerServices.mockClear();\n    broker.broadcastLocal.mockClear();\n    broker.registry.updateMetrics.mockClear();\n    const node = catalog.get(\"node-12\");\n    node.update = jest.fn(() => true);\n    const payload = {\n      sender: \"node-12\",\n      services: [{}, {}, {}]\n    };\n    catalog.processNodeInfo(payload);\n    expect(catalog.nodes.size).toBe(2);\n    expect(broker.registry.registerServices).toHaveBeenCalledTimes(1);\n    expect(broker.registry.registerServices).toHaveBeenCalledWith(node, node.services);\n    expect(broker.broadcastLocal).toHaveBeenCalledTimes(1);\n    expect(broker.broadcastLocal).toHaveBeenCalledWith(\"$node.connected\", {\n      node,\n      reconnected: true\n    });\n    expect(broker.registry.updateMetrics).toHaveBeenCalledTimes(1);\n  });","file":"unit/registry/node-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should call disconnected & unregister services","suites":["Test NodeCatalog.disconnected"],"updatePoint":{"line":199,"column":52},"line":199,"code":"  it(\"should call disconnected & unregister services\", () => {\n    broker.broadcastLocal.mockClear();\n    broker.registry.unregisterServicesByNode.mockClear();\n    broker.registry.updateMetrics.mockClear();\n    catalog.disconnected(\"node-11\", false);\n    expect(node.disconnected).toHaveBeenCalledTimes(1);\n    expect(node.disconnected).toHaveBeenCalledWith(false);\n    expect(broker.broadcastLocal).toHaveBeenCalledTimes(1);\n    expect(broker.broadcastLocal).toHaveBeenCalledWith(\"$node.disconnected\", {\n      node,\n      unexpected: false\n    });\n    expect(broker.registry.updateMetrics).toHaveBeenCalledTimes(1);\n    expect(broker.servicesChanged).toHaveBeenCalledTimes(1);\n    expect(broker.servicesChanged).toHaveBeenCalledWith(false);\n    expect(broker.transit.removePendingRequestByNodeID).toHaveBeenCalledTimes(1);\n    expect(broker.transit.removePendingRequestByNodeID).toHaveBeenCalledWith(\"node-11\");\n    expect(broker.registry.unregisterServicesByNode).toHaveBeenCalledTimes(1);\n    expect(broker.registry.unregisterServicesByNode).toHaveBeenCalledWith(node.id);\n    expect(catalog.logger.info).toHaveBeenCalledTimes(1);\n    expect(catalog.logger.info).toHaveBeenCalledWith(\"Node 'node-11' disconnected.\");\n    expect(catalog.logger.warn).toHaveBeenCalledTimes(0);\n  });","file":"unit/registry/node-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should call disconnected & unregister services (unexpected)","suites":["Test NodeCatalog.disconnected"],"updatePoint":{"line":222,"column":65},"line":222,"code":"  it(\"should call disconnected & unregister services (unexpected)\", () => {\n    broker.broadcastLocal.mockClear();\n    broker.registry.unregisterServicesByNode.mockClear();\n    node.disconnected.mockClear();\n    broker.servicesChanged.mockClear();\n    broker.registry.updateMetrics.mockClear();\n    catalog.disconnected(\"node-11\", true);\n    expect(node.disconnected).toHaveBeenCalledTimes(1);\n    expect(node.disconnected).toHaveBeenCalledWith(true);\n    expect(broker.broadcastLocal).toHaveBeenCalledTimes(1);\n    expect(broker.broadcastLocal).toHaveBeenCalledWith(\"$node.disconnected\", {\n      node,\n      unexpected: true\n    });\n    expect(broker.registry.updateMetrics).toHaveBeenCalledTimes(1); // expect(broker.servicesChanged).toHaveBeenCalledTimes(1);\n    // expect(broker.servicesChanged).toHaveBeenCalledWith(false);\n\n    expect(broker.registry.unregisterServicesByNode).toHaveBeenCalledTimes(1);\n    expect(broker.registry.unregisterServicesByNode).toHaveBeenCalledWith(node.id);\n    expect(catalog.logger.info).toHaveBeenCalledTimes(0);\n    expect(catalog.logger.warn).toHaveBeenCalledTimes(1);\n    expect(catalog.logger.warn).toHaveBeenCalledWith(\"Node 'node-11' disconnected unexpectedly.\");\n  });","file":"unit/registry/node-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should return with node list","suites":["Test NodeCatalog.list"],"updatePoint":{"line":261,"column":34},"line":261,"code":"  it(\"should return with node list\", () => {\n    const res = catalog.list({});\n    expect(res).toEqual([{\n      available: true,\n      client: catalog.localNode.client,\n      config: {},\n      cpu: null,\n      cpuSeq: null,\n      id: broker.nodeID,\n      instanceID: broker.instanceID,\n      ipList: catalog.localNode.ipList,\n      hostname: catalog.localNode.hostname,\n      port: null,\n      lastHeartbeatTime: expect.any(Number),\n      offlineSince: null,\n      seq: 1,\n      local: true,\n      metadata: {\n        a: 5\n      },\n      udpAddress: null\n    }, {\n      available: true,\n      client: {},\n      config: {},\n      cpu: null,\n      cpuSeq: null,\n      id: \"node-10\",\n      instanceID: undefined,\n      ipList: undefined,\n      hostname: undefined,\n      port: undefined,\n      lastHeartbeatTime: expect.any(Number),\n      offlineSince: null,\n      seq: 1,\n      local: false,\n      metadata: undefined,\n      udpAddress: null\n    }]);\n  });","file":"unit/registry/node-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should return node list with services","suites":["Test NodeCatalog.list"],"updatePoint":{"line":301,"column":43},"line":301,"code":"  it(\"should return node list with services\", () => {\n    const res = catalog.list({\n      withServices: true\n    });\n    expect(res).toEqual([{\n      available: true,\n      client: catalog.localNode.client,\n      config: {},\n      cpu: null,\n      cpuSeq: null,\n      id: broker.nodeID,\n      instanceID: broker.instanceID,\n      ipList: catalog.localNode.ipList,\n      hostname: catalog.localNode.hostname,\n      port: null,\n      lastHeartbeatTime: expect.any(Number),\n      local: true,\n      offlineSince: null,\n      seq: 1,\n      services: [],\n      metadata: {\n        a: 5\n      },\n      udpAddress: null\n    }, {\n      available: true,\n      client: {},\n      config: {},\n      cpu: null,\n      cpuSeq: null,\n      id: \"node-10\",\n      instanceID: undefined,\n      ipList: undefined,\n      hostname: undefined,\n      port: undefined,\n      lastHeartbeatTime: expect.any(Number),\n      local: false,\n      offlineSince: null,\n      seq: 1,\n      services: [],\n      metadata: undefined,\n      udpAddress: null\n    }]);\n  });","file":"unit/registry/node-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should return node list with services","suites":["Test NodeCatalog.list"],"updatePoint":{"line":345,"column":43},"line":345,"code":"  it(\"should return node list with services\", () => {\n    catalog.disconnected(\"node-10\");\n    const res = catalog.list({\n      onlyAvailable: true\n    });\n    expect(res).toEqual([{\n      available: true,\n      client: catalog.localNode.client,\n      config: {},\n      cpu: null,\n      cpuSeq: null,\n      id: broker.nodeID,\n      instanceID: broker.instanceID,\n      ipList: catalog.localNode.ipList,\n      hostname: catalog.localNode.hostname,\n      port: null,\n      lastHeartbeatTime: expect.any(Number),\n      local: true,\n      offlineSince: null,\n      seq: 1,\n      metadata: {\n        a: 5\n      },\n      udpAddress: null\n    }]);\n  });","file":"unit/registry/node-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should return with node list array","suites":["Test NodeCatalog.toArray"],"updatePoint":{"line":385,"column":40},"line":385,"code":"  it(\"should return with node list array\", () => {\n    const res = catalog.toArray();\n    expect(res).toEqual([catalog.nodes.get(\"node-1\"), catalog.nodes.get(\"node-10\")]);\n  });","file":"unit/registry/node-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should create a new Node","suites":["Test Node"],"updatePoint":{"line":6,"column":30},"line":6,"code":"  it(\"should create a new Node\", () => {\n    let node = new Node(\"node-1\");\n    expect(node).toEqual({\n      id: \"node-1\",\n      instanceID: null,\n      available: true,\n      local: false,\n      lastHeartbeatTime: expect.any(Number),\n      config: {},\n      client: {},\n      metadata: null,\n      ipList: null,\n      port: null,\n      hostname: null,\n      udpAddress: null,\n      rawInfo: null,\n      services: [],\n      cpu: null,\n      cpuSeq: null,\n      seq: 0,\n      offlineSince: null\n    });\n  });","file":"unit/registry/node.spec.js","skipped":false,"dir":"test"},{"name":"should update props","suites":["Test Node","Test update"],"updatePoint":{"line":31,"column":27},"line":31,"code":"    it(\"should update props\", () => {\n      let payload = {\n        ipList: [\"127.0.0.1\"],\n        hostname: \"host\",\n        instanceID: \"123456\",\n        port: 1234,\n        client: {},\n        services: [{}],\n        seq: 6,\n        metadata: {\n          region: \"eu-west1\"\n        }\n      };\n      node.update(payload);\n      expect(node.ipList).toBe(payload.ipList);\n      expect(node.client).toBe(payload.client);\n      expect(node.hostname).toBe(\"host\");\n      expect(node.port).toBe(1234);\n      expect(node.services).toStrictEqual(payload.services);\n      expect(node.rawInfo).toBe(payload);\n      expect(node.instanceID).toBe(\"123456\");\n      expect(node.metadata).toEqual({\n        region: \"eu-west1\"\n      });\n      expect(node.seq).toBe(6);\n    });","file":"unit/registry/node.spec.js","skipped":false,"dir":"test"},{"name":"should update 'seq' if later","suites":["Test Node","Test update"],"updatePoint":{"line":57,"column":36},"line":57,"code":"    it(\"should update 'seq' if later\", () => {\n      let payload = {\n        seq: 8\n      };\n      node.update(payload);\n      expect(node.seq).toBe(8);\n    });","file":"unit/registry/node.spec.js","skipped":false,"dir":"test"},{"name":"should not update 'seq' if earlier","suites":["Test Node","Test update"],"updatePoint":{"line":64,"column":42},"line":64,"code":"    it(\"should not update 'seq' if earlier\", () => {\n      let payload = {\n        seq: 7\n      };\n      node.update(payload);\n      expect(node.seq).toBe(8);\n    });","file":"unit/registry/node.spec.js","skipped":false,"dir":"test"},{"name":"should update 'seq' if reconnected","suites":["Test Node","Test update"],"updatePoint":{"line":71,"column":42},"line":71,"code":"    it(\"should update 'seq' if reconnected\", () => {\n      let payload = {\n        seq: 2\n      };\n      node.update(payload, true);\n      expect(node.seq).toBe(2);\n    });","file":"unit/registry/node.spec.js","skipped":false,"dir":"test"},{"name":"should update local info","suites":["Test Node","Test update"],"updatePoint":{"line":79,"column":30},"line":79,"code":"  it(\"should update local info\", () => {\n    let node = new Node(\"node-1\");\n    node.cpuSeq = 1000;\n    const cpu = jest.fn(() => Promise.resolve({\n      avg: 12.345\n    }));\n    return node.updateLocalInfo(cpu).then(() => {\n      expect(node.cpu).toBe(12);\n      expect(node.cpuSeq).not.toBe(1000);\n      expect(cpu).toHaveBeenCalledTimes(1);\n      expect(cpu).toHaveBeenCalledWith();\n    });\n  });","file":"unit/registry/node.spec.js","skipped":false,"dir":"test"},{"name":"should update heartbeat props","suites":["Test Node","Test update"],"updatePoint":{"line":92,"column":35},"line":92,"code":"  it(\"should update heartbeat props\", () => {\n    let node = new Node(\"node-1\");\n    node.available = false;\n    node.offlineSince = Date.now();\n    node.seq = 5;\n    let payload = {\n      cpu: 56.8,\n      cpuSeq: 12345678\n    };\n    node.heartbeat(payload);\n    expect(node.cpu).toBe(56.8);\n    expect(node.cpuSeq).toBe(12345678);\n    expect(node.available).toBe(true);\n    expect(node.offlineSince).toBeNull();\n    expect(node.seq).toBe(5);\n    expect(node.lastHeartbeatTime).toBeDefined();\n  });","file":"unit/registry/node.spec.js","skipped":false,"dir":"test"},{"name":"should set unavailable","suites":["Test Node","Test update"],"updatePoint":{"line":109,"column":28},"line":109,"code":"  it(\"should set unavailable\", () => {\n    let node = new Node(\"node-1\");\n    node.seq = 5;\n    node.available = true;\n    node.offlineSince = null;\n    node.disconnected();\n    expect(node.available).toBe(false);\n    expect(node.offlineSince).toBeDefined();\n    expect(node.seq).toBe(6); // Should not increment seq again\n\n    node.disconnected();\n    expect(node.available).toBe(false);\n    expect(node.offlineSince).toBeDefined();\n    expect(node.seq).toBe(6);\n  });","file":"unit/registry/node.spec.js","skipped":false,"dir":"test"},{"name":"test properties","suites":["Test Registry constructor"],"updatePoint":{"line":19,"column":21},"line":19,"code":"  it(\"test properties\", () => {\n    let registry = new Registry(broker);\n    expect(registry).toBeDefined();\n    expect(registry.broker).toBe(broker);\n    expect(registry.logger).toBeDefined();\n    expect(registry.metrics).toBe(broker.metrics);\n    expect(registry.opts).toEqual({\n      preferLocal: true,\n      strategy: \"RoundRobin\"\n    });\n    expect(registry.StrategyFactory).toBe(Strategies.RoundRobin);\n    expect(registry.discoverer).toBeInstanceOf(Discoverers.Local);\n    expect(registry.nodes).toBeDefined();\n    expect(registry.services).toBeDefined();\n    expect(registry.actions).toBeDefined();\n    expect(registry.events).toBeDefined();\n  });","file":"unit/registry/registry.spec.js","skipped":false,"dir":"test"},{"name":"test different strategy","suites":["Test Registry constructor"],"updatePoint":{"line":36,"column":29},"line":36,"code":"  it(\"test different strategy\", () => {\n    const broker = new ServiceBroker({\n      logger: false,\n      registry: {\n        strategy: \"Random\",\n        preferLocal: false\n      }\n    });\n    const registry = new Registry(broker);\n    expect(registry.opts).toEqual({\n      preferLocal: false,\n      strategy: \"Random\"\n    });\n    expect(registry.StrategyFactory).toBe(Strategies.Random);\n  });","file":"unit/registry/registry.spec.js","skipped":false,"dir":"test"},{"name":"test different discoverer","suites":["Test Registry constructor"],"updatePoint":{"line":51,"column":31},"line":51,"code":"  it(\"test different discoverer\", async () => {\n    const broker = new ServiceBroker({\n      logger: false,\n      registry: {\n        discoverer: \"Redis\"\n      }\n    });\n    const registry = new Registry(broker);\n    expect(registry.opts).toEqual({\n      preferLocal: true,\n      discoverer: \"Redis\",\n      strategy: \"RoundRobin\"\n    });\n    expect(registry.discoverer).toBeInstanceOf(Discoverers.Redis);\n    await registry.discoverer.stop();\n    await broker.registry.stop();\n  });","file":"unit/registry/registry.spec.js","skipped":false,"dir":"test"},{"name":"should register metrics","suites":["Test Registry constructor"],"updatePoint":{"line":68,"column":29},"line":68,"code":"  it(\"should register metrics\", () => {\n    broker.isMetricsEnabled = jest.fn(() => true);\n    jest.spyOn(broker.metrics, \"register\");\n    jest.spyOn(broker.metrics, \"set\");\n    const registry = new Registry(broker);\n    expect(broker.metrics.register).toHaveBeenCalledTimes(8);\n    expect(broker.metrics.set).toHaveBeenCalledTimes(5);\n    expect(broker.metrics.set).toHaveBeenNthCalledWith(1, \"moleculer.registry.nodes.total\", 1);\n    expect(broker.metrics.set).toHaveBeenNthCalledWith(2, \"moleculer.registry.nodes.online.total\", 1);\n    expect(broker.metrics.set).toHaveBeenNthCalledWith(3, \"moleculer.registry.services.total\", 0);\n    expect(broker.metrics.set).toHaveBeenNthCalledWith(4, \"moleculer.registry.actions.total\", 0);\n    expect(broker.metrics.set).toHaveBeenNthCalledWith(5, \"moleculer.registry.events.total\", 0);\n  });","file":"unit/registry/registry.spec.js","skipped":false,"dir":"test"},{"name":"should call discoverer.init","suites":["Test Registry.init"],"updatePoint":{"line":87,"column":33},"line":87,"code":"  it(\"should call discoverer.init\", async () => {\n    registry.discoverer.init = jest.fn();\n    registry.init();\n    expect(registry.discoverer.init).toBeCalledTimes(1);\n    await registry.stop();\n  });","file":"unit/registry/registry.spec.js","skipped":false,"dir":"test"},{"name":"should call discoverer.stop","suites":["Test Registry.stop"],"updatePoint":{"line":99,"column":33},"line":99,"code":"  it(\"should call discoverer.stop\", async () => {\n    registry.init();\n    registry.discoverer.stop = jest.fn();\n    registry.stop();\n    expect(registry.discoverer.stop).toBeCalledTimes(1);\n  });","file":"unit/registry/registry.spec.js","skipped":false,"dir":"test"},{"name":"should call register methods","suites":["Test Registry.registerLocalService"],"updatePoint":{"line":120,"column":34},"line":120,"code":"  it(\"should call register methods\", () => {\n    let svc = {\n      name: \"users\",\n      version: 2,\n      settings: {},\n      metadata: {},\n      actions: {},\n      events: []\n    };\n    registry.registerLocalService(svc);\n    expect(registry.services.add).toHaveBeenCalledTimes(1);\n    expect(registry.services.add).toHaveBeenCalledWith(registry.nodes.localNode, svc, true);\n    expect(registry.registerActions).toHaveBeenCalledTimes(1);\n    expect(registry.registerActions).toHaveBeenCalledWith(registry.nodes.localNode, service, svc.actions);\n    expect(registry.registerEvents).toHaveBeenCalledTimes(1);\n    expect(registry.registerEvents).toHaveBeenCalledWith(registry.nodes.localNode, service, svc.events);\n    expect(registry.nodes.localNode.seq).toBe(seq);\n    expect(registry.regenerateLocalRawInfo).toHaveBeenCalledTimes(1);\n    expect(registry.regenerateLocalRawInfo).toHaveBeenCalledWith(false);\n    expect(broker.servicesChanged).toHaveBeenCalledTimes(1);\n    expect(broker.servicesChanged).toHaveBeenCalledWith(true);\n    expect(registry.updateMetrics).toHaveBeenCalledTimes(1);\n  });","file":"unit/registry/registry.spec.js","skipped":false,"dir":"test"},{"name":"should not call register methods, but increment seq","suites":["Test Registry.registerLocalService"],"updatePoint":{"line":143,"column":57},"line":143,"code":"  it(\"should not call register methods, but increment seq\", () => {\n    registry.services.add.mockClear();\n    registry.registerActions.mockClear();\n    registry.registerEvents.mockClear();\n    registry.regenerateLocalRawInfo.mockClear();\n    registry.updateMetrics = jest.fn();\n    broker.servicesChanged.mockClear();\n    let svc = {\n      name: \"users\",\n      version: 2,\n      settings: {},\n      metadata: {}\n    };\n    return broker.start().catch(protectReject).then(() => {\n      expect(registry.regenerateLocalRawInfo).toHaveBeenCalledTimes(1);\n      expect(registry.regenerateLocalRawInfo).toHaveBeenCalledWith(true);\n      registry.regenerateLocalRawInfo.mockClear();\n      registry.registerLocalService(svc);\n      expect(registry.services.add).toHaveBeenCalledTimes(1);\n      expect(registry.services.add).toHaveBeenCalledWith(registry.nodes.localNode, svc, true);\n      expect(registry.registerActions).toHaveBeenCalledTimes(0);\n      expect(registry.registerEvents).toHaveBeenCalledTimes(0);\n      expect(registry.regenerateLocalRawInfo).toHaveBeenCalledTimes(1);\n      expect(registry.regenerateLocalRawInfo).toHaveBeenCalledWith(true);\n      expect(broker.servicesChanged).toHaveBeenCalledTimes(1);\n      expect(broker.servicesChanged).toHaveBeenCalledWith(true);\n      expect(registry.updateMetrics).toHaveBeenCalledTimes(1);\n    });\n  });","file":"unit/registry/registry.spec.js","skipped":false,"dir":"test"},{"name":"should call services.add","suites":["Test Registry.registerServices"],"updatePoint":{"line":195,"column":30},"line":195,"code":"  it(\"should call services.add\", () => {\n    let service = {\n      name: \"users\",\n      version: 2,\n      settings: {\n        a: 5\n      },\n      actions: {\n        \"users.find\"() {},\n\n        \"users.get\"() {}\n\n      },\n      events: {\n        \"user.created\"() {},\n\n        \"user.removed\"() {}\n\n      }\n    };\n    registry.registerServices(node, [service]);\n    expect(registry.services.add).toHaveBeenCalledTimes(1);\n    expect(registry.services.add).toHaveBeenCalledWith(node, service, false);\n    expect(serviceItem.update).toHaveBeenCalledTimes(0);\n    expect(registry.registerActions).toHaveBeenCalledTimes(1);\n    expect(registry.registerActions).toHaveBeenCalledWith(node, serviceItem, service.actions);\n    expect(registry.unregisterAction).toHaveBeenCalledTimes(0);\n    expect(registry.registerEvents).toHaveBeenCalledTimes(1);\n    expect(registry.registerEvents).toHaveBeenCalledWith(node, serviceItem, service.events);\n    expect(registry.unregisterEvent).toHaveBeenCalledTimes(0);\n    expect(registry.unregisterService).toHaveBeenCalledTimes(0);\n    expect(broker.servicesChanged).toHaveBeenCalledTimes(1);\n    expect(broker.servicesChanged).toHaveBeenCalledWith(false);\n    expect(registry.updateMetrics).toHaveBeenCalledTimes(1);\n  });","file":"unit/registry/registry.spec.js","skipped":false,"dir":"test"},{"name":"should update service, actions & events","suites":["Test Registry.registerServices"],"updatePoint":{"line":230,"column":45},"line":230,"code":"  it(\"should update service, actions & events\", () => {\n    let serviceItem = {\n      name: \"users\",\n      fullName: \"v2.users\",\n      version: 2,\n      metadata: {},\n      node,\n      update: jest.fn(),\n      equals: jest.fn(() => false),\n      actions: {\n        \"users.find\"() {},\n\n        \"users.get\"() {}\n\n      },\n      events: {\n        \"user.created\"() {},\n\n        \"user.removed\"() {}\n\n      }\n    };\n    registry.services.get = jest.fn(() => serviceItem);\n    registry.services.add.mockClear();\n    registry.unregisterService.mockClear();\n    registry.registerActions.mockClear();\n    registry.unregisterAction.mockClear();\n    registry.registerEvents.mockClear();\n    registry.unregisterEvent.mockClear();\n    registry.updateMetrics = jest.fn();\n    broker.servicesChanged.mockClear();\n    let service = {\n      name: \"users\",\n      fullName: \"v2.users\",\n      version: 2,\n      settings: {\n        b: 3\n      },\n      metadata: {\n        priority: 3\n      },\n      actions: {\n        \"users.find\"() {},\n\n        \"users.remove\"() {}\n\n      },\n      events: {\n        \"user.created\"() {},\n\n        \"user.deleted\"() {}\n\n      }\n    };\n    registry.registerServices(node, [service]);\n    expect(registry.services.add).toHaveBeenCalledTimes(0);\n    expect(registry.services.get).toHaveBeenCalledTimes(1);\n    expect(registry.services.get).toHaveBeenCalledWith(\"v2.users\", node.id);\n    expect(serviceItem.update).toHaveBeenCalledTimes(1);\n    expect(serviceItem.update).toHaveBeenCalledWith(service);\n    expect(registry.registerActions).toHaveBeenCalledTimes(1);\n    expect(registry.registerActions).toHaveBeenCalledWith(node, serviceItem, service.actions);\n    expect(registry.unregisterAction).toHaveBeenCalledTimes(1);\n    expect(registry.unregisterAction).toHaveBeenCalledWith(node, \"users.get\");\n    expect(registry.registerEvents).toHaveBeenCalledTimes(1);\n    expect(registry.registerEvents).toHaveBeenCalledWith(node, serviceItem, service.events);\n    expect(registry.unregisterEvent).toHaveBeenCalledTimes(1);\n    expect(registry.unregisterEvent).toHaveBeenCalledWith(node, \"user.removed\");\n    expect(registry.unregisterService).toHaveBeenCalledTimes(0);\n    expect(broker.servicesChanged).toHaveBeenCalledTimes(1);\n    expect(broker.servicesChanged).toHaveBeenCalledWith(false);\n    expect(registry.updateMetrics).toHaveBeenCalledTimes(1); // For next test\n\n    registry.services.services.push(serviceItem);\n  });","file":"unit/registry/registry.spec.js","skipped":false,"dir":"test"},{"name":"should remove old service","suites":["Test Registry.registerServices"],"updatePoint":{"line":305,"column":31},"line":305,"code":"  it(\"should remove old service\", () => {\n    registry.services.get = jest.fn();\n    registry.services.add.mockClear();\n    registry.unregisterService.mockClear();\n    registry.updateMetrics = jest.fn();\n    broker.servicesChanged.mockClear();\n    let service = {\n      name: \"posts\"\n    };\n    registry.registerServices(node, [service]);\n    expect(registry.unregisterService).toHaveBeenCalledTimes(1);\n    expect(registry.unregisterService).toHaveBeenCalledWith(\"v2.users\", \"node-11\");\n    expect(broker.servicesChanged).toHaveBeenCalledTimes(1);\n    expect(broker.servicesChanged).toHaveBeenCalledWith(false);\n    expect(registry.updateMetrics).toHaveBeenCalledTimes(1);\n  });","file":"unit/registry/registry.spec.js","skipped":false,"dir":"test"},{"name":"should call services remove method","suites":["Test Registry.unregisterService & unregisterServicesByNode"],"updatePoint":{"line":333,"column":40},"line":333,"code":"  it(\"should call services remove method\", () => {\n    registry.regenerateLocalRawInfo.mockClear();\n    registry.unregisterService(\"v2.posts\", \"node-11\");\n    expect(registry.services.remove).toHaveBeenCalledTimes(1);\n    expect(registry.services.remove).toHaveBeenCalledWith(\"v2.posts\", \"node-11\");\n    expect(registry.nodes.localNode.seq).toBe(seq);\n    expect(registry.regenerateLocalRawInfo).toHaveBeenCalledTimes(0);\n  });","file":"unit/registry/registry.spec.js","skipped":false,"dir":"test"},{"name":"should call services remove method with local nodeID","suites":["Test Registry.unregisterService & unregisterServicesByNode"],"updatePoint":{"line":341,"column":58},"line":341,"code":"  it(\"should call services remove method with local nodeID\", () => {\n    registry.regenerateLocalRawInfo.mockClear();\n    registry.services.remove.mockClear();\n    registry.unregisterService(\"v2.posts\");\n    expect(registry.services.remove).toHaveBeenCalledTimes(1);\n    expect(registry.services.remove).toHaveBeenCalledWith(\"v2.posts\", broker.nodeID);\n    expect(registry.regenerateLocalRawInfo).toHaveBeenCalledTimes(1);\n    expect(registry.regenerateLocalRawInfo).toHaveBeenCalledWith(true);\n  });","file":"unit/registry/registry.spec.js","skipped":false,"dir":"test"},{"name":"should call services removeAllByNodeID method","suites":["Test Registry.unregisterService & unregisterServicesByNode"],"updatePoint":{"line":350,"column":51},"line":350,"code":"  it(\"should call services removeAllByNodeID method\", () => {\n    registry.regenerateLocalRawInfo.mockClear();\n    registry.services.removeAllByNodeID.mockClear();\n    registry.unregisterServicesByNode(\"node-2\");\n    expect(registry.services.removeAllByNodeID).toHaveBeenCalledTimes(1);\n    expect(registry.services.removeAllByNodeID).toHaveBeenCalledWith(\"node-2\");\n  });","file":"unit/registry/registry.spec.js","skipped":false,"dir":"test"},{"name":"should call actions add & service addAction methods","suites":["Test Registry.registerActions"],"updatePoint":{"line":373,"column":57},"line":373,"code":"  it(\"should call actions add & service addAction methods\", () => {\n    registry.registerActions(node, service, {\n      \"users.find\": {\n        name: \"users.find\",\n        handler: jest.fn()\n      },\n      \"users.save\": {\n        name: \"users.save\",\n        handler: jest.fn()\n      }\n    });\n    expect(registry.actions.add).toHaveBeenCalledTimes(2);\n    expect(registry.actions.add).toHaveBeenCalledWith(node, service, {\n      name: \"users.find\"\n    });\n    expect(registry.actions.add).toHaveBeenCalledWith(node, service, {\n      name: \"users.save\"\n    });\n    expect(service.addAction).toHaveBeenCalledTimes(2);\n    expect(service.addAction).toHaveBeenCalledWith({\n      name: \"users.find\"\n    });\n    expect(service.addAction).toHaveBeenCalledWith({\n      name: \"users.save\"\n    });\n    expect(broker.middlewares.wrapHandler).toHaveBeenCalledTimes(2);\n    expect(broker.middlewares.wrapHandler).toHaveBeenCalledWith(\"remoteAction\", expect.any(Function), {\n      name: \"users.find\",\n      handler: expect.any(Function),\n      service\n    });\n    expect(broker.middlewares.wrapHandler).toHaveBeenCalledWith(\"remoteAction\", expect.any(Function), {\n      name: \"users.save\",\n      handler: expect.any(Function),\n      service\n    });\n  });","file":"unit/registry/registry.spec.js","skipped":false,"dir":"test"},{"name":"should not call actions add & service addAction methods if has visibility","suites":["Test Registry.registerActions"],"updatePoint":{"line":410,"column":79},"line":410,"code":"  it(\"should not call actions add & service addAction methods if has visibility\", () => {\n    registry.actions.add.mockClear();\n    service.addAction.mockClear();\n    broker.middlewares.wrapHandler.mockClear();\n    registry.checkActionVisibility = jest.fn(() => false);\n    registry.registerActions(node, service, {\n      \"users.find\": {\n        name: \"users.find\",\n        handler: jest.fn()\n      },\n      \"users.save\": {\n        name: \"users.save\",\n        handler: jest.fn()\n      }\n    });\n    expect(registry.checkActionVisibility).toHaveBeenCalledTimes(2);\n    expect(registry.checkActionVisibility).toHaveBeenCalledWith({\n      name: \"users.save\",\n      handler: expect.any(Function)\n    }, node);\n    expect(registry.checkActionVisibility).toHaveBeenCalledWith({\n      name: \"users.find\",\n      handler: expect.any(Function)\n    }, node);\n    expect(registry.actions.add).toHaveBeenCalledTimes(0);\n    expect(service.addAction).toHaveBeenCalledTimes(0);\n    expect(broker.middlewares.wrapHandler).toHaveBeenCalledTimes(0);\n  });","file":"unit/registry/registry.spec.js","skipped":false,"dir":"test"},{"name":"check if not set visibility","suites":["Test Registry.checkActionVisibility"],"updatePoint":{"line":445,"column":33},"line":445,"code":"  it(\"check if not set visibility\", () => {\n    expect(registry.checkActionVisibility({}, {\n      local: true\n    })).toBe(true);\n    expect(registry.checkActionVisibility({}, {\n      local: false\n    })).toBe(true);\n  });","file":"unit/registry/registry.spec.js","skipped":false,"dir":"test"},{"name":"check if set visibility to 'published'","suites":["Test Registry.checkActionVisibility"],"updatePoint":{"line":453,"column":44},"line":453,"code":"  it(\"check if set visibility to 'published'\", () => {\n    expect(registry.checkActionVisibility({\n      visibility: \"published\"\n    }, {\n      local: true\n    })).toBe(true);\n    expect(registry.checkActionVisibility({\n      visibility: \"published\"\n    }, {\n      local: false\n    })).toBe(true);\n  });","file":"unit/registry/registry.spec.js","skipped":false,"dir":"test"},{"name":"check if set visibility to 'public'","suites":["Test Registry.checkActionVisibility"],"updatePoint":{"line":465,"column":41},"line":465,"code":"  it(\"check if set visibility to 'public'\", () => {\n    expect(registry.checkActionVisibility({\n      visibility: \"public\"\n    }, {\n      local: true\n    })).toBe(true);\n    expect(registry.checkActionVisibility({\n      visibility: \"public\"\n    }, {\n      local: false\n    })).toBe(true);\n  });","file":"unit/registry/registry.spec.js","skipped":false,"dir":"test"},{"name":"check if set visibility to 'protected'","suites":["Test Registry.checkActionVisibility"],"updatePoint":{"line":477,"column":44},"line":477,"code":"  it(\"check if set visibility to 'protected'\", () => {\n    expect(registry.checkActionVisibility({\n      visibility: \"protected\"\n    }, {\n      local: true\n    })).toBe(true);\n    expect(registry.checkActionVisibility({\n      visibility: \"protected\"\n    }, {\n      local: false\n    })).toBe(false);\n  });","file":"unit/registry/registry.spec.js","skipped":false,"dir":"test"},{"name":"check if set visibility to 'private'","suites":["Test Registry.checkActionVisibility"],"updatePoint":{"line":489,"column":42},"line":489,"code":"  it(\"check if set visibility to 'private'\", () => {\n    expect(registry.checkActionVisibility({\n      visibility: \"private\"\n    }, {\n      local: true\n    })).toBe(false);\n    expect(registry.checkActionVisibility({\n      visibility: \"private\"\n    }, {\n      local: false\n    })).toBe(false);\n  });","file":"unit/registry/registry.spec.js","skipped":false,"dir":"test"},{"name":"should call actions remove method","suites":["Test Registry.unregisterAction"],"updatePoint":{"line":508,"column":39},"line":508,"code":"  it(\"should call actions remove method\", () => {\n    registry.unregisterAction({\n      id: \"node-11\"\n    }, \"posts.find\");\n    expect(registry.actions.remove).toHaveBeenCalledTimes(1);\n    expect(registry.actions.remove).toHaveBeenCalledWith(\"posts.find\", \"node-11\");\n  });","file":"unit/registry/registry.spec.js","skipped":false,"dir":"test"},{"name":"should call events add & service addEvent methods","suites":["Test Registry.registerEvents"],"updatePoint":{"line":530,"column":55},"line":530,"code":"  it(\"should call events add & service addEvent methods\", () => {\n    registry.registerEvents(node, service, {\n      \"user.created\": {\n        name: \"user.created\",\n        handler: jest.fn()\n      },\n      \"user.removed\": {\n        name: \"user.removed\",\n        handler: jest.fn()\n      }\n    });\n    expect(registry.events.add).toHaveBeenCalledTimes(2);\n    expect(registry.events.add).toHaveBeenCalledWith(node, service, {\n      name: \"user.created\"\n    });\n    expect(registry.events.add).toHaveBeenCalledWith(node, service, {\n      name: \"user.removed\"\n    });\n    expect(service.addEvent).toHaveBeenCalledTimes(2);\n    expect(service.addEvent).toHaveBeenCalledWith({\n      name: \"user.created\"\n    });\n    expect(service.addEvent).toHaveBeenCalledWith({\n      name: \"user.removed\"\n    });\n    expect(broker.middlewares.wrapHandler).toHaveBeenCalledTimes(2);\n    expect(broker.middlewares.wrapHandler).toHaveBeenCalledWith(\"localEvent\", expect.any(Function), {\n      name: \"user.created\"\n    });\n    expect(broker.middlewares.wrapHandler).toHaveBeenCalledWith(\"localEvent\", expect.any(Function), {\n      name: \"user.removed\"\n    });\n  });","file":"unit/registry/registry.spec.js","skipped":false,"dir":"test"},{"name":"should call events remove method","suites":["Test Registry.unregisterEvent"],"updatePoint":{"line":570,"column":38},"line":570,"code":"  it(\"should call events remove method\", () => {\n    registry.unregisterEvent({\n      id: \"node-11\"\n    }, \"posts.find\");\n    expect(registry.events.remove).toHaveBeenCalledTimes(1);\n    expect(registry.events.remove).toHaveBeenCalledWith(\"posts.find\", \"node-11\");\n  });","file":"unit/registry/registry.spec.js","skipped":false,"dir":"test"},{"name":"should not call registry getLocalNodeServices if broker is not started","suites":["Test Registry.regenerateLocalRawInfo"],"updatePoint":{"line":599,"column":76},"line":599,"code":"  it(\"should not call registry getLocalNodeServices if broker is not started\", () => {\n    broker.started = false;\n    expect(registry.regenerateLocalRawInfo()).toEqual({\n      client: localNode.client,\n      config: {},\n      hostname: localNode.hostname,\n      ipList: localNode.ipList,\n      instanceID: localNode.instanceID,\n      metadata: localNode.metadata,\n      port: null,\n      seq: 1,\n      services: []\n    });\n    expect(registry.services.getLocalNodeServices).toHaveBeenCalledTimes(0);\n  });","file":"unit/registry/registry.spec.js","skipped":false,"dir":"test"},{"name":"should increment seq","suites":["Test Registry.regenerateLocalRawInfo"],"updatePoint":{"line":614,"column":26},"line":614,"code":"  it(\"should increment seq\", () => {\n    broker.started = false;\n    expect(registry.regenerateLocalRawInfo(true)).toEqual({\n      client: localNode.client,\n      config: {},\n      hostname: localNode.hostname,\n      ipList: localNode.ipList,\n      instanceID: localNode.instanceID,\n      metadata: localNode.metadata,\n      port: null,\n      seq: 2,\n      services: []\n    });\n    expect(registry.services.getLocalNodeServices).toHaveBeenCalledTimes(0);\n  });","file":"unit/registry/registry.spec.js","skipped":false,"dir":"test"},{"name":"should call registry getLocalNodeServices and return with local rawInfo","suites":["Test Registry.regenerateLocalRawInfo"],"updatePoint":{"line":629,"column":77},"line":629,"code":"  it(\"should call registry getLocalNodeServices and return with local rawInfo\", () => {\n    broker.started = true;\n    expect(registry.regenerateLocalRawInfo()).toEqual({\n      client: localNode.client,\n      config: {},\n      hostname: localNode.hostname,\n      instanceID: localNode.instanceID,\n      metadata: localNode.metadata,\n      ipList: localNode.ipList,\n      port: null,\n      seq: 2,\n      services: [{\n        name: \"svc1\",\n        prop: {}\n      }, {\n        name: \"svc2\",\n        prop: {}\n      }]\n    });\n    expect(registry.services.getLocalNodeServices).toHaveBeenCalledTimes(1);\n    expect(registry.services.getLocalNodeServices).toHaveBeenCalledWith();\n  });","file":"unit/registry/registry.spec.js","skipped":false,"dir":"test"},{"name":"should call registry.regenerateLocalRawInfo if no rawInfo","suites":["Test Registry.getLocalNodeInfo"],"updatePoint":{"line":664,"column":63},"line":664,"code":"  it(\"should call registry.regenerateLocalRawInfo if no rawInfo\", () => {\n    expect(registry.getLocalNodeInfo()).toBe(rawInfo);\n    expect(registry.regenerateLocalRawInfo).toHaveBeenCalledTimes(1);\n    expect(registry.regenerateLocalRawInfo).toHaveBeenCalledWith();\n  });","file":"unit/registry/registry.spec.js","skipped":false,"dir":"test"},{"name":"should not call registry.regenerateLocalRawInfo if has rawInfo","suites":["Test Registry.getLocalNodeInfo"],"updatePoint":{"line":669,"column":68},"line":669,"code":"  it(\"should not call registry.regenerateLocalRawInfo if has rawInfo\", () => {\n    registry.regenerateLocalRawInfo.mockClear();\n    localNode.rawInfo = rawInfo;\n    expect(registry.getLocalNodeInfo()).toBe(rawInfo);\n    expect(registry.regenerateLocalRawInfo).toHaveBeenCalledTimes(0);\n  });","file":"unit/registry/registry.spec.js","skipped":false,"dir":"test"},{"name":"should call registry.regenerateLocalRawInfo if has rawInfo && force","suites":["Test Registry.getLocalNodeInfo"],"updatePoint":{"line":675,"column":73},"line":675,"code":"  it(\"should call registry.regenerateLocalRawInfo if has rawInfo && force\", () => {\n    registry.regenerateLocalRawInfo.mockClear();\n    localNode.rawInfo = rawInfo;\n    expect(registry.getLocalNodeInfo(true)).toBe(rawInfo);\n    expect(registry.regenerateLocalRawInfo).toHaveBeenCalledTimes(1);\n    expect(registry.regenerateLocalRawInfo).toHaveBeenCalledWith();\n  });","file":"unit/registry/registry.spec.js","skipped":false,"dir":"test"},{"name":"should call registry.nodes.get method and return with rawInfo","suites":["Test Registry.getNodeInfo"],"updatePoint":{"line":697,"column":67},"line":697,"code":"  it(\"should call registry.nodes.get method and return with rawInfo\", () => {\n    let res = registry.getNodeInfo(\"node-11\");\n    expect(res).toBe(node.rawInfo);\n    expect(registry.nodes.get).toHaveBeenCalledTimes(1);\n    expect(registry.nodes.get).toHaveBeenCalledWith(\"node-11\");\n  });","file":"unit/registry/registry.spec.js","skipped":false,"dir":"test"},{"name":"should call registry.nodes.get method and getLocalNodeInfo","suites":["Test Registry.getNodeInfo"],"updatePoint":{"line":703,"column":64},"line":703,"code":"  it(\"should call registry.nodes.get method and getLocalNodeInfo\", () => {\n    registry.nodes.get = jest.fn(() => ({\n      local: true\n    }));\n    let res = registry.getNodeInfo(\"node-1\");\n    expect(res).toBe(node.rawInfo);\n    expect(registry.nodes.get).toHaveBeenCalledTimes(1);\n    expect(registry.nodes.get).toHaveBeenCalledWith(\"node-1\");\n    expect(registry.getLocalNodeInfo).toHaveBeenCalledTimes(1);\n    expect(registry.getLocalNodeInfo).toHaveBeenCalledWith();\n  });","file":"unit/registry/registry.spec.js","skipped":false,"dir":"test"},{"name":"should call registry.nodes.get method and getLocalNodeInfo","suites":["Test Registry.getNodeInfo"],"updatePoint":{"line":714,"column":64},"line":714,"code":"  it(\"should call registry.nodes.get method and getLocalNodeInfo\", () => {\n    registry.nodes.get = jest.fn();\n    let res = registry.getNodeInfo(\"node-2\");\n    expect(res).toBeNull();\n    expect(registry.nodes.get).toHaveBeenCalledTimes(1);\n    expect(registry.nodes.get).toHaveBeenCalledWith(\"node-2\");\n  });","file":"unit/registry/registry.spec.js","skipped":false,"dir":"test"},{"name":"should call registry.nodes.processNodeInfo method","suites":["Test Registry.processNodeInfo"],"updatePoint":{"line":728,"column":55},"line":728,"code":"  it(\"should call registry.nodes.processNodeInfo method\", () => {\n    let payload = {};\n    registry.processNodeInfo(payload);\n    expect(registry.nodes.processNodeInfo).toHaveBeenCalledTimes(1);\n    expect(registry.nodes.processNodeInfo).toHaveBeenCalledWith(payload);\n  });","file":"unit/registry/registry.spec.js","skipped":false,"dir":"test"},{"name":"should call registry.nodes.list method","suites":["Test Registry.getNodeList"],"updatePoint":{"line":741,"column":44},"line":741,"code":"  it(\"should call registry.nodes.list method\", () => {\n    let opts = {};\n    registry.nodes.list(opts);\n    expect(registry.nodes.list).toHaveBeenCalledTimes(1);\n    expect(registry.nodes.list).toHaveBeenCalledWith(opts);\n  });","file":"unit/registry/registry.spec.js","skipped":false,"dir":"test"},{"name":"should call registry.services.list method","suites":["Test Registry.getServiceList"],"updatePoint":{"line":754,"column":47},"line":754,"code":"  it(\"should call registry.services.list method\", () => {\n    let opts = {};\n    registry.getServiceList(opts);\n    expect(registry.services.list).toHaveBeenCalledTimes(1);\n    expect(registry.services.list).toHaveBeenCalledWith(opts);\n  });","file":"unit/registry/registry.spec.js","skipped":false,"dir":"test"},{"name":"should call registry.actions.list method","suites":["Test Registry.getActionList"],"updatePoint":{"line":767,"column":46},"line":767,"code":"  it(\"should call registry.actions.list method\", () => {\n    let opts = {};\n    registry.getActionList(opts);\n    expect(registry.actions.list).toHaveBeenCalledTimes(1);\n    expect(registry.actions.list).toHaveBeenCalledWith(opts);\n  });","file":"unit/registry/registry.spec.js","skipped":false,"dir":"test"},{"name":"should call registry.events.list method","suites":["Test Registry.getEventList"],"updatePoint":{"line":780,"column":45},"line":780,"code":"  it(\"should call registry.events.list method\", () => {\n    let opts = {};\n    registry.getEventList(opts);\n    expect(registry.events.list).toHaveBeenCalledTimes(1);\n    expect(registry.events.list).toHaveBeenCalledWith(opts);\n  });","file":"unit/registry/registry.spec.js","skipped":false,"dir":"test"},{"name":"should call registry.events.list method","suites":["Test Registry.getNodeRawList"],"updatePoint":{"line":801,"column":45},"line":801,"code":"  it(\"should call registry.events.list method\", () => {\n    expect(registry.getNodeRawList()).toEqual([{\n      a: 5\n    }, {\n      b: 10\n    }]);\n    expect(registry.nodes.toArray).toHaveBeenCalledTimes(1);\n    expect(registry.nodes.toArray).toHaveBeenCalledWith();\n  });","file":"unit/registry/registry.spec.js","skipped":false,"dir":"test"},{"name":"should call registry.services.has method","suites":["Test Registry.hasService"],"updatePoint":{"line":817,"column":46},"line":817,"code":"  it(\"should call registry.services.has method\", () => {\n    registry.hasService(\"v2.posts\");\n    expect(registry.services.has).toHaveBeenCalledTimes(1);\n    expect(registry.services.has).toHaveBeenCalledWith(\"v2.posts\", undefined);\n  });","file":"unit/registry/registry.spec.js","skipped":false,"dir":"test"},{"name":"should call registry.services.has method with nodeID","suites":["Test Registry.hasService"],"updatePoint":{"line":822,"column":58},"line":822,"code":"  it(\"should call registry.services.has method with nodeID\", () => {\n    registry.services.has.mockClear();\n    registry.hasService(\"v2.posts\", \"node-123\");\n    expect(registry.services.has).toHaveBeenCalledTimes(1);\n    expect(registry.services.has).toHaveBeenCalledWith(\"v2.posts\", \"node-123\");\n  });","file":"unit/registry/registry.spec.js","skipped":false,"dir":"test"},{"name":"test without CB","suites":["Test ServiceCatalog constructor"],"updatePoint":{"line":14,"column":21},"line":14,"code":"  it(\"test without CB\", () => {\n    let catalog = new ServiceCatalog(registry, broker);\n    expect(catalog).toBeDefined();\n    expect(catalog.registry).toBe(registry);\n    expect(catalog.broker).toBe(broker);\n    expect(catalog.logger).toBe(registry.logger);\n    expect(catalog.services).toBeInstanceOf(Array);\n  });","file":"unit/registry/service-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should create a ServiceItem and add to 'events'","suites":["Test ServiceCatalog methods"],"updatePoint":{"line":33,"column":53},"line":33,"code":"  it(\"should create a ServiceItem and add to 'events'\", () => {\n    expect(catalog.services.length).toBe(0);\n    svc = catalog.add(node, {\n      name: \"test\",\n      fullName: \"test\",\n      settings: {\n        a: 5\n      }\n    });\n    expect(catalog.services.length).toBe(1);\n    expect(svc).toBeInstanceOf(ServiceItem);\n  });","file":"unit/registry/service-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should be find the service","suites":["Test ServiceCatalog methods"],"updatePoint":{"line":45,"column":32},"line":45,"code":"  it(\"should be find the service\", () => {\n    expect(catalog.has(\"test\", \"server-2\")).toBe(false);\n    expect(catalog.has(\"test\", \"server-1\")).toBe(true);\n    expect(catalog.has(\"v2.test\", \"server-1\")).toBe(false);\n    expect(catalog.has(\"posts\", \"server-1\")).toBe(false);\n  });","file":"unit/registry/service-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should be find the service","suites":["Test ServiceCatalog methods"],"updatePoint":{"line":51,"column":32},"line":51,"code":"  it(\"should be find the service\", () => {\n    expect(catalog.get(\"test\", \"server-2\")).toBeUndefined();\n    expect(catalog.get(\"test\", \"server-1\")).toBeDefined();\n    expect(catalog.get(\"v2.test\", \"server-1\")).toBeUndefined();\n    expect(catalog.get(\"posts\", \"server-1\")).toBeUndefined();\n  });","file":"unit/registry/service-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should remove action & event endpoints by nodeID","suites":["Test ServiceCatalog methods"],"updatePoint":{"line":57,"column":54},"line":57,"code":"  it(\"should remove action & event endpoints by nodeID\", () => {\n    broker.registry.actions.removeByService = jest.fn();\n    broker.registry.events.removeByService = jest.fn();\n    catalog.removeAllByNodeID(\"server-2\");\n    expect(broker.registry.actions.removeByService).toHaveBeenCalledTimes(0);\n    expect(broker.registry.events.removeByService).toHaveBeenCalledTimes(0);\n    catalog.removeAllByNodeID(\"server-1\");\n    expect(broker.registry.actions.removeByService).toHaveBeenCalledTimes(1);\n    expect(broker.registry.actions.removeByService).toHaveBeenCalledWith(svc);\n    expect(broker.registry.events.removeByService).toHaveBeenCalledTimes(1);\n    expect(broker.registry.events.removeByService).toHaveBeenCalledWith(svc);\n    expect(catalog.services.length).toBe(0);\n  });","file":"unit/registry/service-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should remove actions & events by service","suites":["Test ServiceCatalog methods"],"updatePoint":{"line":70,"column":47},"line":70,"code":"  it(\"should remove actions & events by service\", () => {\n    broker.registry.actions.removeByService = jest.fn();\n    broker.registry.events.removeByService = jest.fn();\n    svc = catalog.add(node, {\n      name: \"test\",\n      fullName: \"test\"\n    });\n    catalog.remove(\"test\", \"server-2\");\n    expect(broker.registry.actions.removeByService).toHaveBeenCalledTimes(0);\n    expect(broker.registry.events.removeByService).toHaveBeenCalledTimes(0);\n    catalog.remove(\"test\", \"server-1\");\n    expect(broker.registry.actions.removeByService).toHaveBeenCalledTimes(1);\n    expect(broker.registry.actions.removeByService).toHaveBeenCalledWith(svc);\n    expect(broker.registry.events.removeByService).toHaveBeenCalledTimes(1);\n    expect(broker.registry.events.removeByService).toHaveBeenCalledWith(svc);\n    expect(catalog.services.length).toBe(0);\n  });","file":"unit/registry/service-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should return with service list","suites":["Test ServiceCatalog methods"],"updatePoint":{"line":87,"column":37},"line":87,"code":"  it(\"should return with service list\", () => {\n    catalog.add({\n      id: broker.nodeID,\n      available: true\n    }, {\n      name: \"$node\",\n      fullName: \"$node\"\n    }, true);\n    let node2 = {\n      id: \"server-2\",\n      available: true\n    };\n    catalog.add(node2, {\n      name: \"$node\",\n      fullName: \"$node\"\n    });\n    let svc = catalog.add(node2, {\n      name: \"posts\",\n      fullName: \"v2.posts\",\n      version: 2,\n      settings: {\n        a: 5\n      },\n      metadata: {\n        priority: 5\n      }\n    });\n    svc.addAction({\n      name: \"posts.find\"\n    });\n    svc.addEvent({\n      name: \"user.created\"\n    });\n    svc.addEvent({\n      name: \"$services.changed\"\n    }); // internal\n\n    let res = catalog.list({});\n    expect(res).toEqual([{\n      name: \"$node\",\n      fullName: \"$node\",\n      nodeID: broker.nodeID,\n      settings: undefined,\n      metadata: {},\n      version: undefined,\n      available: true,\n      local: true\n    }, {\n      name: \"$node\",\n      fullName: \"$node\",\n      nodeID: \"server-2\",\n      settings: undefined,\n      metadata: {},\n      version: undefined,\n      available: true,\n      local: false\n    }, {\n      name: \"posts\",\n      fullName: \"v2.posts\",\n      nodeID: \"server-2\",\n      settings: {\n        a: 5\n      },\n      metadata: {\n        priority: 5\n      },\n      version: 2,\n      available: true,\n      local: false\n    }]);\n    res = catalog.list({\n      grouping: true\n    });\n    expect(res).toEqual([{\n      name: \"$node\",\n      fullName: \"$node\",\n      settings: undefined,\n      metadata: {},\n      version: undefined,\n      available: true,\n      local: true,\n      nodes: [\"master\", \"server-2\"]\n    }, {\n      name: \"posts\",\n      fullName: \"v2.posts\",\n      settings: {\n        a: 5\n      },\n      metadata: {\n        priority: 5\n      },\n      version: 2,\n      available: true,\n      local: false,\n      nodes: [\"server-2\"]\n    }]);\n    res = catalog.list({\n      onlyLocal: true\n    });\n    expect(res).toEqual([{\n      name: \"$node\",\n      fullName: \"$node\",\n      nodeID: broker.nodeID,\n      settings: undefined,\n      metadata: {},\n      version: undefined,\n      available: true,\n      local: true\n    }]);\n    res = catalog.list({\n      skipInternal: true,\n      withActions: true,\n      withEvents: true\n    });\n    expect(res).toEqual([{\n      actions: {\n        \"posts.find\": {\n          name: \"posts.find\"\n        }\n      },\n      events: {\n        \"user.created\": {\n          name: \"user.created\"\n        }\n      },\n      name: \"posts\",\n      fullName: \"v2.posts\",\n      nodeID: \"server-2\",\n      settings: {\n        a: 5\n      },\n      metadata: {\n        priority: 5\n      },\n      version: 2,\n      available: true,\n      local: false\n    }]);\n    svc.node.available = false;\n    res = catalog.list({\n      onlyAvailable: true\n    });\n    expect(res).toEqual([{\n      name: \"$node\",\n      fullName: \"$node\",\n      nodeID: broker.nodeID,\n      settings: undefined,\n      metadata: {},\n      version: undefined,\n      available: true,\n      local: true\n    }]);\n  });","file":"unit/registry/service-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should return with service list for info","suites":["Test ServiceCatalog methods"],"updatePoint":{"line":240,"column":46},"line":240,"code":"  it(\"should return with service list for info\", () => {\n    let node2 = {\n      id: \"server-2\",\n      available: true\n    };\n    catalog.add(node2, {\n      name: \"$node\",\n      fullName: \"$node\"\n    });\n    let svc = catalog.add({\n      id: broker.nodeID,\n      available: true\n    }, {\n      name: \"posts\",\n      fullName: \"v2.posts\",\n      version: 2,\n      settings: {\n        a: 5\n      },\n      metadata: {\n        priority: 5\n      }\n    }, true);\n    svc.addAction({\n      name: \"posts.find\"\n    });\n    svc.addEvent({\n      name: \"user.created\"\n    });\n    svc.addEvent({\n      name: \"$services.changed\"\n    }); // internal\n\n    let res = catalog.getLocalNodeServices();\n    expect(res).toEqual([{\n      name: \"$node\",\n      fullName: \"$node\",\n      actions: {},\n      dependencies: undefined,\n      events: {},\n      metadata: {},\n      settings: undefined,\n      version: undefined\n    }, {\n      name: \"posts\",\n      fullName: \"v2.posts\",\n      version: 2,\n      settings: {\n        a: 5\n      },\n      actions: {\n        \"posts.find\": {\n          name: \"posts.find\"\n        }\n      },\n      dependencies: undefined,\n      events: {\n        \"user.created\": {\n          name: \"user.created\"\n        },\n        \"$services.changed\": {\n          name: \"$services.changed\"\n        }\n      },\n      metadata: {\n        priority: 5\n      }\n    }]);\n  });","file":"unit/registry/service-catalog.spec.js","skipped":false,"dir":"test"},{"name":"should create new ServiceItem","suites":["Test ServiceItem without version"],"updatePoint":{"line":21,"column":35},"line":21,"code":"  it(\"should create new ServiceItem\", () => {\n    svc = new ServiceItem(node, serviceDef, false);\n    expect(svc).toBeDefined();\n    expect(svc.node).toBe(node);\n    expect(svc.name).toBe(\"posts\");\n    expect(svc.version).toBeUndefined();\n    expect(svc.settings).toBe(serviceDef.settings);\n    expect(svc.metadata).toBe(serviceDef.metadata);\n    expect(svc.local).toBe(false);\n    expect(svc.actions).toEqual({});\n    expect(svc.events).toEqual({});\n  });","file":"unit/registry/service-item.spec.js","skipped":false,"dir":"test"},{"name":"should check equals services","suites":["Test ServiceItem without version"],"updatePoint":{"line":33,"column":34},"line":33,"code":"  it(\"should check equals services\", () => {\n    expect(svc.equals(\"posts\")).toBe(true);\n    expect(svc.equals(\"v2.posts\")).toBe(false);\n    expect(svc.equals(\"posts\", \"server-1\")).toBe(true);\n    expect(svc.equals(\"v2.posts\", \"server-1\")).toBe(false);\n    expect(svc.equals(\"posts\", \"server-2\")).toBe(false);\n    expect(svc.equals(\"users\", \"server-1\")).toBe(false);\n    expect(svc.equals(\"v2.users\", \"server-1\")).toBe(false);\n    expect(svc.equals(\"users\", \"server-2\")).toBe(false);\n  });","file":"unit/registry/service-item.spec.js","skipped":false,"dir":"test"},{"name":"should update props","suites":["Test ServiceItem without version"],"updatePoint":{"line":43,"column":25},"line":43,"code":"  it(\"should update props\", () => {\n    svc.update({\n      fullName: \"v2.posts\",\n      version: 2,\n      settings: {\n        b: 3\n      },\n      metadata: {\n        scalable: true\n      }\n    });\n    expect(svc.fullName).toBe(\"v2.posts\");\n    expect(svc.version).toBe(2);\n    expect(svc.settings).toEqual({\n      b: 3\n    });\n    expect(svc.metadata).toEqual({\n      scalable: true\n    });\n  });","file":"unit/registry/service-item.spec.js","skipped":false,"dir":"test"},{"name":"should add actions","suites":["Test ServiceItem without version"],"updatePoint":{"line":63,"column":24},"line":63,"code":"  it(\"should add actions\", () => {\n    expect(Object.keys(svc.actions).length).toBe(0);\n    svc.addAction({\n      name: \"posts.find\"\n    });\n    expect(Object.keys(svc.actions).length).toBe(1);\n  });","file":"unit/registry/service-item.spec.js","skipped":false,"dir":"test"},{"name":"should add events","suites":["Test ServiceItem without version"],"updatePoint":{"line":70,"column":23},"line":70,"code":"  it(\"should add events\", () => {\n    expect(Object.keys(svc.events).length).toBe(0);\n    svc.addEvent({\n      name: \"user.created\"\n    });\n    expect(Object.keys(svc.events).length).toBe(1);\n  });","file":"unit/registry/service-item.spec.js","skipped":false,"dir":"test"},{"name":"should create new ServiceItem","suites":["Test ServiceItem with version"],"updatePoint":{"line":94,"column":35},"line":94,"code":"  it(\"should create new ServiceItem\", () => {\n    svc = new ServiceItem(node, serviceDef, true);\n    expect(svc).toBeDefined();\n    expect(svc.node).toBe(node);\n    expect(svc.name).toBe(\"posts\");\n    expect(svc.fullName).toBe(\"v4.posts\");\n    expect(svc.version).toBe(4);\n    expect(svc.settings).toBe(serviceDef.settings);\n    expect(svc.metadata).toBe(serviceDef.metadata);\n    expect(svc.local).toBe(true);\n    expect(svc.actions).toEqual({});\n    expect(svc.events).toEqual({});\n  });","file":"unit/registry/service-item.spec.js","skipped":false,"dir":"test"},{"name":"should check equals services","suites":["Test ServiceItem with version"],"updatePoint":{"line":107,"column":34},"line":107,"code":"  it(\"should check equals services\", () => {\n    expect(svc.equals(\"v4.posts\")).toBe(true);\n    expect(svc.equals(\"v2.posts\")).toBe(false);\n    expect(svc.equals(\"posts\")).toBe(false);\n    expect(svc.equals(\"v4.posts\", \"server-1\")).toBe(true);\n    expect(svc.equals(\"posts\", \"server-1\")).toBe(false);\n    expect(svc.equals(\"v4.posts\", \"server-2\")).toBe(false);\n    expect(svc.equals(\"v4.users\", \"server-1\")).toBe(false);\n    expect(svc.equals(\"v4.users\", \"server-1\")).toBe(false);\n    expect(svc.equals(\"v4.users\", \"server-2\")).toBe(false);\n  });","file":"unit/registry/service-item.spec.js","skipped":false,"dir":"test"},{"name":"should update props","suites":["Test ServiceItem with version"],"updatePoint":{"line":118,"column":25},"line":118,"code":"  it(\"should update props\", () => {\n    svc.update({\n      fullName: \"v2.posts\",\n      version: 2,\n      settings: {\n        b: 3\n      },\n      metadata: {\n        scalable: true\n      }\n    });\n    expect(svc.fullName).toBe(\"v2.posts\");\n    expect(svc.version).toBe(2);\n    expect(svc.settings).toEqual({\n      b: 3\n    });\n    expect(svc.metadata).toEqual({\n      scalable: true\n    });\n  });","file":"unit/registry/service-item.spec.js","skipped":false,"dir":"test"},{"name":"should create an empty options","suites":["Test AvroSerializer constructor"],"updatePoint":{"line":12,"column":36},"line":12,"code":"  it(\"should create an empty options\", () => {\n    let serializer = new AvroSerializer();\n    expect(serializer).toBeDefined();\n    expect(serializer.serialize).toBeDefined();\n    expect(serializer.deserialize).toBeDefined();\n  });","file":"unit/serializers/avro.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the disconnect packet","suites":["Test Avro serializer"],"updatePoint":{"line":22,"column":44},"line":22,"code":"  it(\"should serialize the disconnect packet\", () => {\n    const obj = {\n      ver: \"2\",\n      sender: \"test-1\"\n    };\n    const s = serializer.serialize(obj, P.PACKET_DISCONNECT);\n    expect(s.length).toBe(9);\n    const res = serializer.deserialize(s, P.PACKET_DISCONNECT);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(obj);\n  });","file":"unit/serializers/avro.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the heartbeat packet","suites":["Test Avro serializer"],"updatePoint":{"line":33,"column":43},"line":33,"code":"  it(\"should serialize the heartbeat packet\", () => {\n    const obj = {\n      ver: \"2\",\n      sender: \"test-1\",\n      cpu: 12.5\n    };\n    const s = serializer.serialize(obj, P.PACKET_HEARTBEAT);\n    expect(s.length).toBe(17);\n    const res = serializer.deserialize(s, P.PACKET_HEARTBEAT);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(obj);\n  });","file":"unit/serializers/avro.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the discover packet","suites":["Test Avro serializer"],"updatePoint":{"line":45,"column":42},"line":45,"code":"  it(\"should serialize the discover packet\", () => {\n    const obj = {\n      ver: \"2\",\n      sender: \"test-1\"\n    };\n    const s = serializer.serialize(obj, P.PACKET_DISCOVER);\n    expect(s.length).toBe(9);\n    const res = serializer.deserialize(s, P.PACKET_DISCOVER);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(obj);\n  });","file":"unit/serializers/avro.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the info packet","suites":["Test Avro serializer"],"updatePoint":{"line":56,"column":38},"line":56,"code":"  it(\"should serialize the info packet\", () => {\n    const obj = {\n      ver: \"2\",\n      sender: \"test-1\",\n      services: [{\n        name: \"users\",\n        version: \"2\",\n        settings: {},\n        metadata: {},\n        actions: {\n          \"users.create\": {}\n        },\n        events: {\n          \"user.created\": {}\n        }\n      }],\n      config: {},\n      ipList: [\"127.0.0.1\"],\n      instanceID: \"123456\",\n      hostname: \"test-server\",\n      client: {\n        type: \"nodejs\",\n        version: \"1.2.3\",\n        langVersion: \"6.10.2\"\n      },\n      metadata: {\n        region: \"eu-west1\"\n      },\n      seq: 3\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_INFO);\n    expect(s.length).toBe(207);\n    const res = serializer.deserialize(s, P.PACKET_INFO);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(obj);\n  });","file":"unit/serializers/avro.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the event packet","suites":["Test Avro serializer"],"updatePoint":{"line":92,"column":39},"line":92,"code":"  it(\"should serialize the event packet\", () => {\n    const obj = {\n      ver: \"2\",\n      sender: \"test-1\",\n      id: \"event-id\",\n      event: \"user.created\",\n      data: {\n        a: 5,\n        b: \"Test\"\n      },\n      broadcast: true,\n      meta: {\n        name: \"John\"\n      },\n      level: 5,\n      tracing: true,\n      parentID: \"parent-id\",\n      requestID: \"request-id\",\n      caller: \"posts.created\",\n      needAck: true\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_EVENT);\n    expect(s.length).toBe(115);\n    const res = serializer.deserialize(s, P.PACKET_EVENT);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(Object.assign(obj, {\n      groups: null,\n      seq: null,\n      stream: null\n    }));\n  });","file":"unit/serializers/avro.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the event packet with groups","suites":["Test Avro serializer"],"updatePoint":{"line":123,"column":51},"line":123,"code":"  it(\"should serialize the event packet with groups\", () => {\n    const obj = {\n      ver: \"2\",\n      sender: \"test-1\",\n      id: \"event-id\",\n      event: \"user.created\",\n      data: {\n        a: 5,\n        b: \"Test\"\n      },\n      groups: [\"users\", \"payments\"],\n      broadcast: false,\n      meta: {\n        name: \"John\"\n      },\n      level: 5,\n      tracing: true,\n      parentID: \"parent-id\",\n      requestID: \"request-id\",\n      caller: \"posts.created\",\n      needAck: true\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_EVENT);\n    expect(s.length).toBe(132);\n    const res = serializer.deserialize(s, P.PACKET_EVENT);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(Object.assign(obj, {\n      seq: null,\n      stream: null\n    }));\n  });","file":"unit/serializers/avro.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the event packet null data","suites":["Test Avro serializer"],"updatePoint":{"line":154,"column":49},"line":154,"code":"  it(\"should serialize the event packet null data\", () => {\n    const obj = {\n      ver: \"3\",\n      sender: \"test-1\",\n      id: \"event-id\",\n      event: \"user.created\",\n      data: null,\n      broadcast: true,\n      meta: {\n        name: \"John\"\n      },\n      level: 5,\n      tracing: true,\n      parentID: \"parent-id\",\n      requestID: \"request-id\",\n      caller: \"posts.created\",\n      needAck: true\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_EVENT);\n    expect(s.length).toBe(96);\n    const res = serializer.deserialize(s, P.PACKET_EVENT);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(Object.assign(obj, {\n      groups: null,\n      seq: null,\n      stream: null\n    }));\n  });","file":"unit/serializers/avro.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the event packet without data","suites":["Test Avro serializer"],"updatePoint":{"line":182,"column":52},"line":182,"code":"  it(\"should serialize the event packet without data\", () => {\n    const obj = {\n      ver: \"2\",\n      sender: \"test-1\",\n      id: \"event-id\",\n      event: \"user.created\",\n      broadcast: true,\n      meta: {\n        name: \"John\"\n      },\n      level: 5,\n      tracing: true,\n      parentID: \"parent-id\",\n      requestID: \"request-id\",\n      caller: \"posts.created\",\n      needAck: true\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_EVENT);\n    expect(s.length).toBe(96);\n    const res = serializer.deserialize(s, P.PACKET_EVENT);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(Object.assign(obj, {\n      groups: null,\n      seq: null,\n      stream: null\n    }));\n  });","file":"unit/serializers/avro.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the request packet","suites":["Test Avro serializer"],"updatePoint":{"line":209,"column":41},"line":209,"code":"  it(\"should serialize the request packet\", () => {\n    const obj = {\n      ver: \"2\",\n      sender: \"test-1\",\n      id: \"100\",\n      action: \"posts.find\",\n      params: {\n        id: 5\n      },\n      meta: {\n        user: {\n          id: 1,\n          roles: [\"admin\"]\n        }\n      },\n      timeout: 1500,\n      level: 4,\n      tracing: true,\n      parentID: \"999\",\n      requestID: \"12345\",\n      caller: \"users.list\",\n      stream: false,\n      seq: null\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_REQUEST);\n    expect(s.length).toBe(110);\n    const res = serializer.deserialize(s, P.PACKET_REQUEST);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(obj);\n  });","file":"unit/serializers/avro.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the request packet without params","suites":["Test Avro serializer"],"updatePoint":{"line":239,"column":56},"line":239,"code":"  it(\"should serialize the request packet without params\", () => {\n    const obj = {\n      ver: \"2\",\n      sender: \"test-1\",\n      id: \"100\",\n      action: \"posts.find\",\n      params: null,\n      meta: {\n        user: {\n          id: 1,\n          roles: [\"admin\"]\n        }\n      },\n      timeout: 1500,\n      level: 4,\n      tracing: true,\n      parentID: \"999\",\n      requestID: \"12345\",\n      caller: \"users.list\",\n      stream: false,\n      seq: null\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_REQUEST);\n    expect(s.length).toBe(101);\n    const res = serializer.deserialize(s, P.PACKET_REQUEST);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(obj);\n  });","file":"unit/serializers/avro.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the request packet with buffer","suites":["Test Avro serializer"],"updatePoint":{"line":267,"column":53},"line":267,"code":"  it(\"should serialize the request packet with buffer\", () => {\n    const obj = {\n      ver: \"2\",\n      sender: \"test-1\",\n      id: \"100\",\n      action: \"posts.find\",\n      params: Buffer.from(\"binary data\"),\n      meta: {\n        user: {\n          id: 1,\n          roles: [\"admin\"]\n        }\n      },\n      timeout: 1500,\n      level: 4,\n      tracing: true,\n      parentID: \"999\",\n      requestID: \"12345\",\n      caller: null,\n      stream: true,\n      seq: 6\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_REQUEST);\n    expect(s.length).toBe(103);\n    const res = serializer.deserialize(s, P.PACKET_REQUEST);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(obj);\n  });","file":"unit/serializers/avro.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the response packet with data","suites":["Test Avro serializer"],"updatePoint":{"line":295,"column":52},"line":295,"code":"  it(\"should serialize the response packet with data\", () => {\n    const obj = {\n      ver: \"2\",\n      sender: \"test-1\",\n      id: \"12345\",\n      success: true,\n      data: [{\n        id: 1,\n        name: \"John\"\n      }, {\n        id: 2,\n        name: \"Jane\"\n      }],\n      meta: {\n        user: {\n          id: 1,\n          roles: [\"admin\"]\n        }\n      },\n      stream: false,\n      seq: null\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_RESPONSE);\n    expect(s.length).toBe(106);\n    const res = serializer.deserialize(s, P.PACKET_RESPONSE);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(Object.assign(obj, {\n      error: null\n    }));\n  });","file":"unit/serializers/avro.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the response packet with falsy data","suites":["Test Avro serializer"],"updatePoint":{"line":325,"column":58},"line":325,"code":"  it(\"should serialize the response packet with falsy data\", () => {\n    const obj = {\n      ver: \"3\",\n      sender: \"test-1\",\n      id: \"12345\",\n      success: true,\n      data: false,\n      meta: {},\n      stream: false,\n      seq: 3\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_RESPONSE);\n    expect(s.length).toBe(32);\n    const res = serializer.deserialize(s, P.PACKET_RESPONSE);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(Object.assign(obj, {\n      error: null\n    }));\n  });","file":"unit/serializers/avro.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the response packet with buffer data","suites":["Test Avro serializer"],"updatePoint":{"line":344,"column":59},"line":344,"code":"  it(\"should serialize the response packet with buffer data\", () => {\n    const obj = {\n      ver: \"2\",\n      sender: \"test-1\",\n      id: \"12345\",\n      success: true,\n      data: Buffer.from(\"binary data\"),\n      meta: {\n        user: {\n          id: 1,\n          roles: [\"admin\"]\n        }\n      },\n      stream: true,\n      seq: 6\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_RESPONSE);\n    expect(s.length).toBe(71);\n    const res = serializer.deserialize(s, P.PACKET_RESPONSE);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(Object.assign(obj, {\n      error: null\n    }));\n  });","file":"unit/serializers/avro.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the response packet with null data","suites":["Test Avro serializer"],"updatePoint":{"line":368,"column":57},"line":368,"code":"  it(\"should serialize the response packet with null data\", () => {\n    const obj = {\n      ver: \"3\",\n      sender: \"test-1\",\n      id: \"12345\",\n      success: true,\n      data: null,\n      meta: {},\n      stream: false,\n      seq: 3\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_RESPONSE);\n    expect(s.length).toBe(26);\n    const res = serializer.deserialize(s, P.PACKET_RESPONSE);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(Object.assign(obj, {\n      error: null\n    }));\n  });","file":"unit/serializers/avro.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the response packet with error","suites":["Test Avro serializer"],"updatePoint":{"line":387,"column":53},"line":387,"code":"  it(\"should serialize the response packet with error\", () => {\n    const obj = {\n      ver: \"2\",\n      sender: \"test-1\",\n      id: \"12345\",\n      success: false,\n      error: {\n        name: \"ValidationError\",\n        message: \"Invalid email!\",\n        code: 422,\n        nodeID: \"test-1\",\n        type: \"ERR_INVALID_A\",\n        retryable: true,\n        stack: \"STACK_PLACEHOLDER\",\n        data: {\n          a: 5\n        }\n      },\n      meta: {\n        user: {\n          id: 1,\n          roles: [\"admin\"]\n        }\n      },\n      stream: false,\n      seq: null\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_RESPONSE);\n    expect(s.length).toBe(225);\n    const res = serializer.deserialize(s, P.PACKET_RESPONSE);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(obj);\n  });","file":"unit/serializers/avro.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the ping packet","suites":["Test Avro serializer"],"updatePoint":{"line":420,"column":38},"line":420,"code":"  it(\"should serialize the ping packet\", () => {\n    const obj = {\n      ver: \"2\",\n      sender: \"test-1\",\n      id: \"123\",\n      time: 1234567\n    };\n    const s = serializer.serialize(obj, P.PACKET_PING);\n    expect(s.length).toBe(18);\n    const res = serializer.deserialize(s, P.PACKET_PING);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(obj);\n  });","file":"unit/serializers/avro.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the pong packet","suites":["Test Avro serializer"],"updatePoint":{"line":433,"column":38},"line":433,"code":"  it(\"should serialize the pong packet\", () => {\n    const obj = {\n      ver: \"2\",\n      sender: \"test-1\",\n      time: 1234567,\n      id: \"123\",\n      arrived: 7654321\n    };\n    const s = serializer.serialize(obj, P.PACKET_PONG);\n    expect(s.length).toBe(22);\n    const res = serializer.deserialize(s, P.PACKET_PONG);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(obj);\n  });","file":"unit/serializers/avro.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the hello packet","suites":["Test Avro serializer with Gossip packets"],"updatePoint":{"line":451,"column":39},"line":451,"code":"  it(\"should serialize the hello packet\", () => {\n    const obj = {\n      ver: \"2\",\n      sender: \"test-1\",\n      host: \"server-host\",\n      port: 45450\n    };\n    const s = serializer.serialize(obj, P.PACKET_GOSSIP_HELLO);\n    expect(s.length).toBe(24);\n    const res = serializer.deserialize(s, P.PACKET_GOSSIP_HELLO);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(obj);\n  });","file":"unit/serializers/avro.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the empty REQUEST packet","suites":["Test Avro serializer with Gossip packets"],"updatePoint":{"line":464,"column":47},"line":464,"code":"  it(\"should serialize the empty REQUEST packet\", () => {\n    const obj = {\n      ver: \"2\",\n      sender: \"test-1\"\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_GOSSIP_REQ);\n    expect(s.length).toBe(11);\n    const res = serializer.deserialize(s, P.PACKET_GOSSIP_REQ);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(Object.assign(obj, {\n      online: null,\n      offline: null\n    }));\n  });","file":"unit/serializers/avro.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the full REQUEST packet","suites":["Test Avro serializer with Gossip packets"],"updatePoint":{"line":478,"column":46},"line":478,"code":"  it(\"should serialize the full REQUEST packet\", () => {\n    const obj = {\n      ver: \"2\",\n      sender: \"test-1\",\n      online: {\n        \"node-1\": [1, 2, 3],\n        \"node-2\": [150, 0, 0]\n      },\n      offline: {\n        \"node-3\": 23,\n        \"node-4\": 26854204\n      }\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_GOSSIP_REQ);\n    expect(s.length).toBe(81);\n    const res = serializer.deserialize(s, P.PACKET_GOSSIP_REQ);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(obj);\n  });","file":"unit/serializers/avro.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the empty RESPONSE packet","suites":["Test Avro serializer with Gossip packets"],"updatePoint":{"line":497,"column":48},"line":497,"code":"  it(\"should serialize the empty RESPONSE packet\", () => {\n    const obj = {\n      ver: \"2\",\n      sender: \"test-1\"\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_GOSSIP_RES);\n    expect(s.length).toBe(11);\n    const res = serializer.deserialize(s, P.PACKET_GOSSIP_RES);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(Object.assign(obj, {\n      online: null,\n      offline: null\n    }));\n  });","file":"unit/serializers/avro.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the full RESPONSE packet","suites":["Test Avro serializer with Gossip packets"],"updatePoint":{"line":511,"column":47},"line":511,"code":"  it(\"should serialize the full RESPONSE packet\", () => {\n    const obj = {\n      ver: \"2\",\n      sender: \"test-1\",\n      online: {\n        \"node-1\": [{\n          services: []\n        }, 2, 3],\n        \"node-2\": [13, 56]\n      },\n      offline: {\n        \"node-3\": 23,\n        \"node-4\": 26854204\n      }\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_GOSSIP_RES);\n    expect(s.length).toBe(93);\n    const res = serializer.deserialize(s, P.PACKET_GOSSIP_RES);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(obj);\n  });","file":"unit/serializers/avro.spec.js","skipped":false,"dir":"test"},{"name":"check constructor","suites":["Test BaseSerializer"],"updatePoint":{"line":8,"column":23},"line":8,"code":"  it(\"check constructor\", () => {\n    let cacher = new Serializer();\n    expect(cacher).toBeDefined();\n    expect(cacher.init).toBeDefined();\n    expect(cacher.serialize).toBeDefined();\n    expect(cacher.deserialize).toBeDefined();\n  });","file":"unit/serializers/base.spec.js","skipped":false,"dir":"test"},{"name":"check init","suites":["Test BaseSerializer"],"updatePoint":{"line":15,"column":16},"line":15,"code":"  it(\"check init\", () => {\n    let broker = new ServiceBroker({\n      logger: false\n    });\n    let serializer = new Serializer();\n    serializer.init(broker);\n    expect(serializer.broker).toBe(broker);\n  });","file":"unit/serializers/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_INFO","suites":["Test serializer.serializeCustomFields"],"updatePoint":{"line":33,"column":28},"line":33,"code":"  it(\"check with PACKET_INFO\", () => {\n    expect(serializer.serializeCustomFields(P.PACKET_INFO, {\n      sender: \"node-1\",\n      services: [{\n        name: \"users\",\n        settings: {}\n      }],\n      config: {\n        a: 5\n      },\n      instanceID: \"123456\",\n      client: {\n        version: 5\n      },\n      metadata: {\n        region: \"eu-west1\"\n      }\n    })).toEqual({\n      client: {\n        version: 5\n      },\n      config: '{\"a\":5}',\n      instanceID: \"123456\",\n      sender: \"node-1\",\n      services: '[{\"name\":\"users\",\"settings\":{}}]',\n      metadata: '{\"region\":\"eu-west1\"}'\n    });\n  });","file":"unit/serializers/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_EVENT","suites":["Test serializer.serializeCustomFields"],"updatePoint":{"line":61,"column":29},"line":61,"code":"  it(\"check with PACKET_EVENT\", () => {\n    expect(serializer.serializeCustomFields(P.PACKET_EVENT, {\n      sender: \"node-1\",\n      event: \"user.created\",\n      data: {\n        id: 5\n      },\n      groups: [\"mail\"]\n    })).toEqual({\n      data: Buffer.from('{\"id\":5}'),\n      dataType: 2,\n      event: \"user.created\",\n      groups: [\"mail\"],\n      sender: \"node-1\"\n    });\n  });","file":"unit/serializers/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_EVENT with null","suites":["Test serializer.serializeCustomFields"],"updatePoint":{"line":77,"column":39},"line":77,"code":"  it(\"check with PACKET_EVENT with null\", () => {\n    expect(serializer.serializeCustomFields(P.PACKET_EVENT, {\n      sender: \"node-1\",\n      event: \"user.created\",\n      data: null,\n      groups: [\"mail\"]\n    })).toEqual({\n      data: null,\n      dataType: 1,\n      event: \"user.created\",\n      groups: [\"mail\"],\n      sender: \"node-1\"\n    });\n  });","file":"unit/serializers/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_EVENT with Buffer","suites":["Test serializer.serializeCustomFields"],"updatePoint":{"line":91,"column":41},"line":91,"code":"  it(\"check with PACKET_EVENT with Buffer\", () => {\n    expect(serializer.serializeCustomFields(P.PACKET_EVENT, {\n      sender: \"node-1\",\n      event: \"user.created\",\n      data: Buffer.from(\"moleculer\"),\n      groups: [\"mail\"]\n    })).toEqual({\n      data: Buffer.from(\"moleculer\"),\n      dataType: 3,\n      event: \"user.created\",\n      groups: [\"mail\"],\n      sender: \"node-1\"\n    });\n  });","file":"unit/serializers/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_REQUEST with null","suites":["Test serializer.serializeCustomFields"],"updatePoint":{"line":105,"column":41},"line":105,"code":"  it(\"check with PACKET_REQUEST with null\", () => {\n    expect(serializer.serializeCustomFields(P.PACKET_REQUEST, {\n      sender: \"node-1\",\n      action: \"users.create\",\n      params: null,\n      meta: {\n        token: \"12345\"\n      },\n      requestID: \"1111\",\n      stream: false\n    })).toEqual({\n      action: \"users.create\",\n      meta: '{\"token\":\"12345\"}',\n      params: null,\n      paramsType: 1,\n      requestID: \"1111\",\n      sender: \"node-1\",\n      stream: false\n    });\n  });","file":"unit/serializers/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_REQUEST with params","suites":["Test serializer.serializeCustomFields"],"updatePoint":{"line":125,"column":43},"line":125,"code":"  it(\"check with PACKET_REQUEST with params\", () => {\n    expect(serializer.serializeCustomFields(P.PACKET_REQUEST, {\n      sender: \"node-1\",\n      action: \"users.create\",\n      params: {\n        name: \"John\"\n      },\n      meta: {\n        token: \"12345\"\n      },\n      requestID: \"1111\",\n      stream: false\n    })).toEqual({\n      action: \"users.create\",\n      meta: '{\"token\":\"12345\"}',\n      params: Buffer.from('{\"name\":\"John\"}'),\n      paramsType: 2,\n      requestID: \"1111\",\n      sender: \"node-1\",\n      stream: false\n    });\n  });","file":"unit/serializers/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_REQUEST with Buffer","suites":["Test serializer.serializeCustomFields"],"updatePoint":{"line":147,"column":43},"line":147,"code":"  it(\"check with PACKET_REQUEST with Buffer\", () => {\n    expect(serializer.serializeCustomFields(P.PACKET_REQUEST, {\n      sender: \"node-1\",\n      action: \"users.create\",\n      params: Buffer.from(\"binary data\"),\n      meta: {\n        token: \"12345\"\n      },\n      requestID: \"1111\",\n      stream: false\n    })).toEqual({\n      action: \"users.create\",\n      meta: '{\"token\":\"12345\"}',\n      params: Buffer.from(\"binary data\"),\n      paramsType: 3,\n      requestID: \"1111\",\n      sender: \"node-1\",\n      stream: false\n    });\n  });","file":"unit/serializers/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_REQUEST with stream","suites":["Test serializer.serializeCustomFields"],"updatePoint":{"line":167,"column":43},"line":167,"code":"  it(\"check with PACKET_REQUEST with stream\", () => {\n    expect(serializer.serializeCustomFields(P.PACKET_REQUEST, {\n      sender: \"node-1\",\n      action: \"users.create\",\n      params: Buffer.from(\"binary data\"),\n      meta: {\n        token: \"12345\"\n      },\n      requestID: \"1111\",\n      stream: true\n    })).toEqual({\n      action: \"users.create\",\n      meta: '{\"token\":\"12345\"}',\n      params: Buffer.from(\"binary data\"),\n      paramsType: 3,\n      requestID: \"1111\",\n      sender: \"node-1\",\n      stream: true\n    });\n  });","file":"unit/serializers/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_RESPONSE with null","suites":["Test serializer.serializeCustomFields"],"updatePoint":{"line":187,"column":42},"line":187,"code":"  it(\"check with PACKET_RESPONSE with null\", () => {\n    expect(serializer.serializeCustomFields(P.PACKET_RESPONSE, {\n      sender: \"node-1\",\n      id: \"12345\",\n      data: null,\n      error: {\n        name: \"SomeError\"\n      },\n      meta: {\n        token: \"12345\"\n      },\n      stream: false\n    })).toEqual({\n      data: null,\n      dataType: 1,\n      error: '{\"name\":\"SomeError\"}',\n      id: \"12345\",\n      meta: '{\"token\":\"12345\"}',\n      sender: \"node-1\",\n      stream: false\n    });\n  });","file":"unit/serializers/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_RESPONSE","suites":["Test serializer.serializeCustomFields"],"updatePoint":{"line":209,"column":32},"line":209,"code":"  it(\"check with PACKET_RESPONSE\", () => {\n    expect(serializer.serializeCustomFields(P.PACKET_RESPONSE, {\n      sender: \"node-1\",\n      id: \"12345\",\n      data: {\n        id: 5\n      },\n      error: {\n        name: \"SomeError\"\n      },\n      meta: {\n        token: \"12345\"\n      },\n      stream: false\n    })).toEqual({\n      data: Buffer.from('{\"id\":5}'),\n      dataType: 2,\n      error: '{\"name\":\"SomeError\"}',\n      id: \"12345\",\n      meta: '{\"token\":\"12345\"}',\n      sender: \"node-1\",\n      stream: false\n    });\n  });","file":"unit/serializers/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_RESPONSE with Buffer","suites":["Test serializer.serializeCustomFields"],"updatePoint":{"line":233,"column":44},"line":233,"code":"  it(\"check with PACKET_RESPONSE with Buffer\", () => {\n    expect(serializer.serializeCustomFields(P.PACKET_RESPONSE, {\n      sender: \"node-1\",\n      id: \"12345\",\n      data: Buffer.from(\"binary data\"),\n      error: {\n        name: \"SomeError\"\n      },\n      meta: {\n        token: \"12345\"\n      },\n      stream: false\n    })).toEqual({\n      data: Buffer.from(\"binary data\"),\n      dataType: 3,\n      error: '{\"name\":\"SomeError\"}',\n      id: \"12345\",\n      meta: '{\"token\":\"12345\"}',\n      sender: \"node-1\",\n      stream: false\n    });\n  });","file":"unit/serializers/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_RESPONSE with stream","suites":["Test serializer.serializeCustomFields"],"updatePoint":{"line":255,"column":44},"line":255,"code":"  it(\"check with PACKET_RESPONSE with stream\", () => {\n    expect(serializer.serializeCustomFields(P.PACKET_RESPONSE, {\n      sender: \"node-1\",\n      id: \"12345\",\n      data: Buffer.from(\"binary data\"),\n      error: {\n        name: \"SomeError\"\n      },\n      meta: {\n        token: \"12345\"\n      },\n      stream: true\n    })).toEqual({\n      data: Buffer.from(\"binary data\"),\n      dataType: 3,\n      error: '{\"name\":\"SomeError\"}',\n      id: \"12345\",\n      meta: '{\"token\":\"12345\"}',\n      sender: \"node-1\",\n      stream: true\n    });\n  });","file":"unit/serializers/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_INFO","suites":["Test serializer.deserializeCustomFields"],"updatePoint":{"line":287,"column":28},"line":287,"code":"  it(\"check with PACKET_INFO\", () => {\n    expect(serializer.deserializeCustomFields(P.PACKET_INFO, {\n      client: {\n        version: 5\n      },\n      config: '{\"a\":5}',\n      instanceID: \"123456\",\n      sender: \"node-1\",\n      services: '[{\"name\":\"users\",\"settings\":{}}]',\n      metadata: '{\"region\":\"eu-west1\"}'\n    })).toEqual({\n      sender: \"node-1\",\n      services: [{\n        name: \"users\",\n        settings: {}\n      }],\n      instanceID: \"123456\",\n      config: {\n        a: 5\n      },\n      client: {\n        version: 5\n      },\n      metadata: {\n        region: \"eu-west1\"\n      }\n    });\n  });","file":"unit/serializers/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_EVENT with null","suites":["Test serializer.deserializeCustomFields"],"updatePoint":{"line":315,"column":39},"line":315,"code":"  it(\"check with PACKET_EVENT with null\", () => {\n    expect(serializer.deserializeCustomFields(P.PACKET_EVENT, {\n      data: null,\n      dataType: 1,\n      meta: '{\"name\":\"John\"}',\n      event: \"user.created\",\n      groups: [\"mail\"],\n      sender: \"node-1\"\n    })).toEqual({\n      sender: \"node-1\",\n      event: \"user.created\",\n      data: null,\n      meta: {\n        name: \"John\"\n      },\n      groups: [\"mail\"]\n    });\n  });","file":"unit/serializers/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_EVENT with data","suites":["Test serializer.deserializeCustomFields"],"updatePoint":{"line":333,"column":39},"line":333,"code":"  it(\"check with PACKET_EVENT with data\", () => {\n    expect(serializer.deserializeCustomFields(P.PACKET_EVENT, {\n      data: Buffer.from('{\"id\":5}'),\n      dataType: 2,\n      meta: '{\"name\":\"John\"}',\n      event: \"user.created\",\n      groups: [\"mail\"],\n      sender: \"node-1\"\n    })).toEqual({\n      sender: \"node-1\",\n      event: \"user.created\",\n      data: {\n        id: 5\n      },\n      meta: {\n        name: \"John\"\n      },\n      groups: [\"mail\"]\n    });\n  });","file":"unit/serializers/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_EVENT with Buffer","suites":["Test serializer.deserializeCustomFields"],"updatePoint":{"line":353,"column":41},"line":353,"code":"  it(\"check with PACKET_EVENT with Buffer\", () => {\n    expect(serializer.deserializeCustomFields(P.PACKET_EVENT, {\n      data: Buffer.from(\"binary data\"),\n      dataType: 3,\n      meta: '{\"name\":\"John\"}',\n      event: \"user.created\",\n      groups: [\"mail\"],\n      sender: \"node-1\"\n    })).toEqual({\n      sender: \"node-1\",\n      event: \"user.created\",\n      data: Buffer.from(\"binary data\"),\n      meta: {\n        name: \"John\"\n      },\n      groups: [\"mail\"]\n    });\n  });","file":"unit/serializers/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_REQUEST with null","suites":["Test serializer.deserializeCustomFields"],"updatePoint":{"line":371,"column":41},"line":371,"code":"  it(\"check with PACKET_REQUEST with null\", () => {\n    expect(serializer.deserializeCustomFields(P.PACKET_REQUEST, {\n      action: \"users.create\",\n      meta: '{\"token\":\"12345\"}',\n      params: null,\n      paramsType: 1,\n      requestID: \"1111\",\n      sender: \"node-1\"\n    })).toEqual({\n      sender: \"node-1\",\n      action: \"users.create\",\n      params: null,\n      meta: {\n        token: \"12345\"\n      },\n      requestID: \"1111\"\n    });\n  });","file":"unit/serializers/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_REQUEST with JSON","suites":["Test serializer.deserializeCustomFields"],"updatePoint":{"line":389,"column":41},"line":389,"code":"  it(\"check with PACKET_REQUEST with JSON\", () => {\n    expect(serializer.deserializeCustomFields(P.PACKET_REQUEST, {\n      action: \"users.create\",\n      meta: '{\"token\":\"12345\"}',\n      params: '{\"name\":\"John\"}',\n      paramsType: 2,\n      requestID: \"1111\",\n      sender: \"node-1\"\n    })).toEqual({\n      sender: \"node-1\",\n      action: \"users.create\",\n      params: {\n        name: \"John\"\n      },\n      meta: {\n        token: \"12345\"\n      },\n      requestID: \"1111\"\n    });\n  });","file":"unit/serializers/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_REQUEST with Buffer","suites":["Test serializer.deserializeCustomFields"],"updatePoint":{"line":409,"column":43},"line":409,"code":"  it(\"check with PACKET_REQUEST with Buffer\", () => {\n    expect(serializer.deserializeCustomFields(P.PACKET_REQUEST, {\n      action: \"users.create\",\n      meta: '{\"token\":\"12345\"}',\n      params: Buffer.from(\"binary data\"),\n      paramsType: 3,\n      requestID: \"1111\",\n      stream: true,\n      sender: \"node-1\"\n    })).toEqual({\n      sender: \"node-1\",\n      action: \"users.create\",\n      params: Buffer.from(\"binary data\"),\n      meta: {\n        token: \"12345\"\n      },\n      stream: true,\n      requestID: \"1111\"\n    });\n  });","file":"unit/serializers/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_REQUEST with stream","suites":["Test serializer.deserializeCustomFields"],"updatePoint":{"line":429,"column":43},"line":429,"code":"  it(\"check with PACKET_REQUEST with stream\", () => {\n    expect(serializer.deserializeCustomFields(P.PACKET_REQUEST, {\n      action: \"users.create\",\n      meta: '{\"token\":\"12345\"}',\n      params: Buffer.from(\"binary data\"),\n      paramsType: 3,\n      requestID: \"1111\",\n      stream: true,\n      sender: \"node-1\"\n    })).toEqual({\n      sender: \"node-1\",\n      action: \"users.create\",\n      params: Buffer.from(\"binary data\"),\n      meta: {\n        token: \"12345\"\n      },\n      stream: true,\n      requestID: \"1111\"\n    });\n  });","file":"unit/serializers/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_RESPONSE with null","suites":["Test serializer.deserializeCustomFields"],"updatePoint":{"line":449,"column":42},"line":449,"code":"  it(\"check with PACKET_RESPONSE with null\", () => {\n    expect(serializer.deserializeCustomFields(P.PACKET_RESPONSE, {\n      data: null,\n      dataType: 1,\n      error: '{\"name\":\"SomeError\"}',\n      id: \"12345\",\n      meta: '{\"token\":\"12345\"}',\n      sender: \"node-1\"\n    })).toEqual({\n      sender: \"node-1\",\n      id: \"12345\",\n      data: null,\n      error: {\n        name: \"SomeError\"\n      },\n      meta: {\n        token: \"12345\"\n      }\n    });\n  });","file":"unit/serializers/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_RESPONSE with JSON","suites":["Test serializer.deserializeCustomFields"],"updatePoint":{"line":469,"column":42},"line":469,"code":"  it(\"check with PACKET_RESPONSE with JSON\", () => {\n    expect(serializer.deserializeCustomFields(P.PACKET_RESPONSE, {\n      data: '{\"id\":5}',\n      dataType: 2,\n      error: '{\"name\":\"SomeError\"}',\n      id: \"12345\",\n      meta: '{\"token\":\"12345\"}',\n      sender: \"node-1\"\n    })).toEqual({\n      sender: \"node-1\",\n      id: \"12345\",\n      data: {\n        id: 5\n      },\n      error: {\n        name: \"SomeError\"\n      },\n      meta: {\n        token: \"12345\"\n      }\n    });\n  });","file":"unit/serializers/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_RESPONSE with Buffer","suites":["Test serializer.deserializeCustomFields"],"updatePoint":{"line":491,"column":44},"line":491,"code":"  it(\"check with PACKET_RESPONSE with Buffer\", () => {\n    expect(serializer.deserializeCustomFields(P.PACKET_RESPONSE, {\n      data: Buffer.from(\"binary data\"),\n      dataType: 3,\n      error: '{\"name\":\"SomeError\"}',\n      id: \"12345\",\n      meta: '{\"token\":\"12345\"}',\n      stream: true,\n      sender: \"node-1\"\n    })).toEqual({\n      sender: \"node-1\",\n      id: \"12345\",\n      data: Buffer.from(\"binary data\"),\n      error: {\n        name: \"SomeError\"\n      },\n      meta: {\n        token: \"12345\"\n      },\n      stream: true\n    });\n  });","file":"unit/serializers/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_RESPONSE with stream","suites":["Test serializer.deserializeCustomFields"],"updatePoint":{"line":513,"column":44},"line":513,"code":"  it(\"check with PACKET_RESPONSE with stream\", () => {\n    expect(serializer.deserializeCustomFields(P.PACKET_RESPONSE, {\n      data: Buffer.from(\"binary data\"),\n      dataType: 3,\n      error: '{\"name\":\"SomeError\"}',\n      id: \"12345\",\n      meta: '{\"token\":\"12345\"}',\n      stream: true,\n      sender: \"node-1\"\n    })).toEqual({\n      sender: \"node-1\",\n      id: \"12345\",\n      data: Buffer.from(\"binary data\"),\n      error: {\n        name: \"SomeError\"\n      },\n      meta: {\n        token: \"12345\"\n      },\n      stream: true\n    });\n  });","file":"unit/serializers/base.spec.js","skipped":false,"dir":"test"},{"name":"should create an empty options","suites":["Test CborSerializer constructor"],"updatePoint":{"line":10,"column":36},"line":10,"code":"  it(\"should create an empty options\", () => {\n    let serializer = new CborSerializer();\n    expect(serializer).toBeDefined();\n    expect(serializer.serialize).toBeDefined();\n    expect(serializer.deserialize).toBeDefined();\n  });","file":"unit/serializers/cbor.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the event packet","suites":["Test CborSerializer"],"updatePoint":{"line":20,"column":39},"line":20,"code":"  it(\"should serialize the event packet\", () => {\n    const now = new Date();\n    const obj = {\n      ver: \"4\",\n      sender: \"node-100\",\n      id: \"8b3c7371-7f0a-4aa2-b734-70ede29e1bbb\",\n      event: \"user.created\",\n      data: {\n        a: 5,\n        b: \"Test\",\n        c: now\n      },\n      broadcast: true,\n      meta: {},\n      level: 1,\n      needAck: false\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_EVENT);\n    expect(s.length).toBe(150);\n    const res = serializer.deserialize(s, P.PACKET_EVENT);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(obj);\n  });","file":"unit/serializers/cbor.spec.js","skipped":false,"dir":"test"},{"name":"should deserialize maps to objects by default","suites":["Test CborSerializer"],"updatePoint":{"line":43,"column":51},"line":43,"code":"  it(\"should deserialize maps to objects by default\", () => {\n    const input = new Map([[\"foo\", \"bar\"], [\"baz\", \"qux\"]]);\n    const s = serializer.serialize(input);\n    const res = serializer.deserialize(s);\n    expect(res).not.toEqual(input);\n    expect(res).toEqual({\n      foo: \"bar\",\n      baz: \"qux\"\n    });\n  });","file":"unit/serializers/cbor.spec.js","skipped":false,"dir":"test"},{"name":"should allow maps to be serialized with mapsAsObjects option false","suites":["Test CborSerializer"],"updatePoint":{"line":53,"column":72},"line":53,"code":"  it(\"should allow maps to be serialized with mapsAsObjects option false\", () => {\n    const options = {\n      mapsAsObjects: false\n    };\n    const optsSerializer = new CborSerializer(options);\n    optsSerializer.init();\n    const input = new Map([[\"foo\", \"bar\"], [\"baz\", \"qux\"]]);\n    const s = optsSerializer.serialize(input);\n    const res = optsSerializer.deserialize(s);\n    expect(res).toEqual(input);\n  });","file":"unit/serializers/cbor.spec.js","skipped":false,"dir":"test"},{"name":"should allow maps to be serialized with useTag259ForMaps option true","suites":["Test CborSerializer"],"updatePoint":{"line":64,"column":74},"line":64,"code":"  it(\"should allow maps to be serialized with useTag259ForMaps option true\", () => {\n    const options = {\n      useTag259ForMaps: true\n    };\n    const optsSerializer = new CborSerializer(options);\n    optsSerializer.init();\n    const input = new Map([[\"foo\", \"bar\"], [\"baz\", \"qux\"]]);\n    const s = optsSerializer.serialize(input);\n    const res = optsSerializer.deserialize(s);\n    expect(res).toEqual(input);\n  });","file":"unit/serializers/cbor.spec.js","skipped":false,"dir":"test"},{"name":"should resolve null from undefined","suites":["Test Serializers resolver"],"updatePoint":{"line":8,"column":40},"line":8,"code":"  it(\"should resolve null from undefined\", () => {\n    let serializer = Serializers.resolve();\n    expect(serializer).toBeInstanceOf(Serializers.JSON);\n  });","file":"unit/serializers/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve JSONSerializer from obj without type","suites":["Test Serializers resolver"],"updatePoint":{"line":12,"column":57},"line":12,"code":"  it(\"should resolve JSONSerializer from obj without type\", () => {\n    let serializer = Serializers.resolve({});\n    expect(serializer).toBeInstanceOf(Serializers.JSON);\n  });","file":"unit/serializers/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve JSONSerializer from obj","suites":["Test Serializers resolver"],"updatePoint":{"line":16,"column":44},"line":16,"code":"  it(\"should resolve JSONSerializer from obj\", () => {\n    let serializer = Serializers.resolve({\n      type: \"JSON\"\n    });\n    expect(serializer).toBeInstanceOf(Serializers.JSON);\n  });","file":"unit/serializers/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve AvroSerializer from string with Avro type","suites":["Test Serializers resolver"],"updatePoint":{"line":22,"column":62},"line":22,"code":"  it(\"should resolve AvroSerializer from string with Avro type\", () => {\n    let serializer = Serializers.resolve(\"avro\");\n    expect(serializer).toBeInstanceOf(Serializers.Avro);\n  });","file":"unit/serializers/index.spec.js","skipped":false,"dir":"test"},{"name":"should throw error if type if not correct","suites":["Test Serializers resolver"],"updatePoint":{"line":26,"column":47},"line":26,"code":"  it(\"should throw error if type if not correct\", () => {\n    expect(() => {\n      Serializers.resolve(\"xyz\");\n    }).toThrowError(BrokerOptionsError);\n    expect(() => {\n      Serializers.resolve({\n        type: \"xyz\"\n      });\n    }).toThrowError(BrokerOptionsError);\n  });","file":"unit/serializers/index.spec.js","skipped":false,"dir":"test"},{"name":"should throw error if type if not correct","suites":["Test Serializers register"],"updatePoint":{"line":40,"column":47},"line":40,"code":"  it(\"should throw error if type if not correct\", () => {\n    expect(() => {\n      Serializers.resolve(\"MyCustom\");\n    }).toThrowError(BrokerOptionsError);\n  });","file":"unit/serializers/index.spec.js","skipped":false,"dir":"test"},{"name":"should register new type","suites":["Test Serializers register"],"updatePoint":{"line":45,"column":30},"line":45,"code":"  it(\"should register new type\", () => {\n    Serializers.register(\"MyCustom\", MyCustom);\n    expect(Serializers.MyCustom).toBe(MyCustom);\n  });","file":"unit/serializers/index.spec.js","skipped":false,"dir":"test"},{"name":"should find the new type","suites":["Test Serializers register"],"updatePoint":{"line":49,"column":30},"line":49,"code":"  it(\"should find the new type\", () => {\n    const serializer = Serializers.resolve(\"MyCustom\");\n    expect(serializer).toBeInstanceOf(MyCustom);\n  });","file":"unit/serializers/index.spec.js","skipped":false,"dir":"test"},{"name":"should create an empty options","suites":["Test JSONSerializer constructor"],"updatePoint":{"line":10,"column":36},"line":10,"code":"  it(\"should create an empty options\", () => {\n    let serializer = new JSONSerializer();\n    expect(serializer).toBeDefined();\n    expect(serializer.serialize).toBeDefined();\n    expect(serializer.deserialize).toBeDefined();\n  });","file":"unit/serializers/json.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the event packet","suites":["Test JSONSerializer"],"updatePoint":{"line":20,"column":39},"line":20,"code":"  it(\"should serialize the event packet\", () => {\n    const obj = {\n      ver: \"4\",\n      sender: \"node-100\",\n      id: \"8b3c7371-7f0a-4aa2-b734-70ede29e1bbb\",\n      event: \"user.created\",\n      data: {\n        a: 5,\n        b: \"Test\"\n      },\n      broadcast: true,\n      meta: {},\n      level: 1,\n      needAck: false\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_EVENT);\n    expect(s.length).toBe(177);\n    const res = serializer.deserialize(s, P.PACKET_EVENT);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(obj);\n  });","file":"unit/serializers/json.spec.js","skipped":false,"dir":"test"},{"name":"should create an empty options","suites":["Test MsgPackSerializer constructor"],"updatePoint":{"line":10,"column":36},"line":10,"code":"  it(\"should create an empty options\", () => {\n    let serializer = new MsgPackSerializer();\n    expect(serializer).toBeDefined();\n    expect(serializer.serialize).toBeDefined();\n    expect(serializer.deserialize).toBeDefined();\n  });","file":"unit/serializers/msgpack.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the event packet","suites":["Test MsgPackSerializer"],"updatePoint":{"line":20,"column":39},"line":20,"code":"  it(\"should serialize the event packet\", () => {\n    const now = new Date();\n    const obj = {\n      ver: \"4\",\n      sender: \"node-100\",\n      id: \"8b3c7371-7f0a-4aa2-b734-70ede29e1bbb\",\n      event: \"user.created\",\n      data: {\n        a: 5,\n        b: \"Test\",\n        c: now\n      },\n      broadcast: true,\n      meta: {},\n      level: 1,\n      needAck: false\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_EVENT);\n    expect(s.length).toBe(144);\n    const res = serializer.deserialize(s, P.PACKET_EVENT);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(obj);\n  });","file":"unit/serializers/msgpack.spec.js","skipped":false,"dir":"test"},{"name":"should create an empty options","suites":["Test NotePackSerializer constructor"],"updatePoint":{"line":10,"column":36},"line":10,"code":"  it(\"should create an empty options\", () => {\n    let serializer = new NotePackSerializer();\n    expect(serializer).toBeDefined();\n    expect(serializer.serialize).toBeDefined();\n    expect(serializer.deserialize).toBeDefined();\n  });","file":"unit/serializers/notepack.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the event packet","suites":["Test NotePackSerializer"],"updatePoint":{"line":20,"column":39},"line":20,"code":"  it(\"should serialize the event packet\", () => {\n    const now = new Date();\n    const obj = {\n      ver: \"4\",\n      sender: \"node-100\",\n      id: \"8b3c7371-7f0a-4aa2-b734-70ede29e1bbb\",\n      event: \"user.created\",\n      data: {\n        a: 5,\n        b: \"Test\",\n        c: now\n      },\n      broadcast: true,\n      meta: {},\n      level: 1,\n      needAck: false\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_EVENT);\n    expect(s.length).toBe(144);\n    const res = serializer.deserialize(s, P.PACKET_EVENT);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(obj);\n  });","file":"unit/serializers/notepack.spec.js","skipped":false,"dir":"test"},{"name":"should create an empty options","suites":["Test ProtoBufSerializer constructor"],"updatePoint":{"line":12,"column":36},"line":12,"code":"  it(\"should create an empty options\", () => {\n    let serializer = new ProtoBufSerializer();\n    expect(serializer).toBeDefined();\n    expect(serializer.serialize).toBeDefined();\n    expect(serializer.deserialize).toBeDefined();\n  });","file":"unit/serializers/protobuf.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the disconnect packet","suites":["Test ProtoBuf serializer"],"updatePoint":{"line":22,"column":44},"line":22,"code":"  it(\"should serialize the disconnect packet\", () => {\n    const obj = {\n      ver: \"4\",\n      sender: \"test-1\"\n    };\n    const s = serializer.serialize(obj, P.PACKET_DISCONNECT);\n    expect(s.length).toBe(11);\n    const res = serializer.deserialize(s, P.PACKET_DISCONNECT);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(obj);\n  });","file":"unit/serializers/protobuf.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the heartbeat packet","suites":["Test ProtoBuf serializer"],"updatePoint":{"line":33,"column":43},"line":33,"code":"  it(\"should serialize the heartbeat packet\", () => {\n    const obj = {\n      ver: \"4\",\n      sender: \"test-1\",\n      cpu: 12.5\n    };\n    const s = serializer.serialize(obj, P.PACKET_HEARTBEAT);\n    expect(s.length).toBe(20);\n    const res = serializer.deserialize(s, P.PACKET_HEARTBEAT);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(obj);\n  });","file":"unit/serializers/protobuf.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the discover packet","suites":["Test ProtoBuf serializer"],"updatePoint":{"line":45,"column":42},"line":45,"code":"  it(\"should serialize the discover packet\", () => {\n    const obj = {\n      ver: \"4\",\n      sender: \"test-1\"\n    };\n    const s = serializer.serialize(obj, P.PACKET_DISCOVER);\n    expect(s.length).toBe(11);\n    const res = serializer.deserialize(s, P.PACKET_DISCOVER);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(obj);\n  });","file":"unit/serializers/protobuf.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the info packet","suites":["Test ProtoBuf serializer"],"updatePoint":{"line":56,"column":38},"line":56,"code":"  it(\"should serialize the info packet\", () => {\n    const obj = {\n      ver: \"4\",\n      sender: \"test-1\",\n      seq: 3,\n      services: [{\n        name: \"users\",\n        version: \"2\",\n        settings: {},\n        metadata: {},\n        actions: {\n          \"users.create\": {}\n        },\n        events: {\n          \"user.created\": {}\n        }\n      }],\n      config: {},\n      instanceID: \"123456\",\n      ipList: [\"127.0.0.1\"],\n      hostname: \"test-server\",\n      client: {\n        type: \"nodejs\",\n        version: \"1.2.3\",\n        langVersion: \"6.10.2\"\n      },\n      metadata: {\n        region: \"eu-west1\"\n      }\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_INFO);\n    expect(s.length).toBe(218);\n    const res = serializer.deserialize(s, P.PACKET_INFO);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(obj);\n  });","file":"unit/serializers/protobuf.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the event packet","suites":["Test ProtoBuf serializer"],"updatePoint":{"line":92,"column":39},"line":92,"code":"  it(\"should serialize the event packet\", () => {\n    const obj = {\n      ver: \"4\",\n      sender: \"test-1\",\n      id: \"event-id\",\n      event: \"user.created\",\n      data: {\n        a: 5,\n        b: \"Test\"\n      },\n      broadcast: true,\n      meta: {\n        name: \"John\"\n      },\n      level: 5,\n      tracing: true,\n      parentID: \"parent-id\",\n      requestID: \"request-id\",\n      caller: \"posts.created\",\n      needAck: true\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_EVENT);\n    expect(s.length).toBe(122);\n    const res = serializer.deserialize(s, P.PACKET_EVENT);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(Object.assign(obj, {\n      groups: []\n    }));\n  });","file":"unit/serializers/protobuf.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the event packet with groups","suites":["Test ProtoBuf serializer"],"updatePoint":{"line":121,"column":51},"line":121,"code":"  it(\"should serialize the event packet with groups\", () => {\n    const obj = {\n      ver: \"4\",\n      sender: \"test-1\",\n      id: \"event-id\",\n      event: \"user.created\",\n      data: {\n        a: 5,\n        b: \"Test\"\n      },\n      groups: [\"users\", \"payments\"],\n      broadcast: false,\n      meta: {\n        name: \"John\"\n      },\n      level: 5,\n      tracing: true,\n      parentID: \"parent-id\",\n      requestID: \"request-id\",\n      caller: \"posts.created\",\n      needAck: true\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_EVENT);\n    expect(s.length).toBe(139);\n    const res = serializer.deserialize(s, P.PACKET_EVENT);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(obj);\n  });","file":"unit/serializers/protobuf.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the event packet null data","suites":["Test ProtoBuf serializer"],"updatePoint":{"line":149,"column":49},"line":149,"code":"  it(\"should serialize the event packet null data\", () => {\n    const obj = {\n      ver: \"3\",\n      sender: \"test-1\",\n      id: \"event-id\",\n      event: \"user.created\",\n      data: null,\n      broadcast: true,\n      meta: {\n        name: \"John\"\n      },\n      level: 5,\n      tracing: true,\n      parentID: \"parent-id\",\n      requestID: \"request-id\",\n      caller: \"posts.created\",\n      needAck: true\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_EVENT);\n    expect(s.length).toBe(102);\n    const res = serializer.deserialize(s, P.PACKET_EVENT);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(Object.assign(obj, {\n      groups: []\n    }));\n  });","file":"unit/serializers/protobuf.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the event packet without data","suites":["Test ProtoBuf serializer"],"updatePoint":{"line":175,"column":52},"line":175,"code":"  it(\"should serialize the event packet without data\", () => {\n    const obj = {\n      ver: \"4\",\n      sender: \"test-1\",\n      id: \"event-id\",\n      event: \"user.created\",\n      broadcast: true,\n      meta: {\n        name: \"John\"\n      },\n      level: 5,\n      tracing: true,\n      parentID: \"parent-id\",\n      requestID: \"request-id\",\n      caller: \"posts.created\",\n      needAck: true\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_EVENT);\n    expect(s.length).toBe(102);\n    const res = serializer.deserialize(s, P.PACKET_EVENT);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(Object.assign(obj, {\n      groups: [],\n      data: undefined\n    }));\n  });","file":"unit/serializers/protobuf.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the request packet","suites":["Test ProtoBuf serializer"],"updatePoint":{"line":201,"column":41},"line":201,"code":"  it(\"should serialize the request packet\", () => {\n    const obj = {\n      ver: \"4\",\n      sender: \"test-1\",\n      id: \"100\",\n      action: \"posts.find\",\n      params: {\n        id: 5\n      },\n      meta: {\n        user: {\n          id: 1,\n          roles: [\"admin\"]\n        }\n      },\n      timeout: 1500,\n      level: 4,\n      tracing: true,\n      parentID: \"999\",\n      requestID: \"12345\",\n      caller: \"users.list\",\n      stream: false,\n      seq: null\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_REQUEST);\n    expect(s.length).toBe(116);\n    const res = serializer.deserialize(s, P.PACKET_REQUEST);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(Object.assign(obj, {\n      seq: undefined\n    }));\n  });","file":"unit/serializers/protobuf.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the request packet without params","suites":["Test ProtoBuf serializer"],"updatePoint":{"line":233,"column":56},"line":233,"code":"  it(\"should serialize the request packet without params\", () => {\n    const obj = {\n      ver: \"4\",\n      sender: \"test-1\",\n      id: \"100\",\n      action: \"posts.find\",\n      params: null,\n      meta: {\n        user: {\n          id: 1,\n          roles: [\"admin\"]\n        }\n      },\n      timeout: 1500,\n      level: 4,\n      tracing: true,\n      parentID: \"999\",\n      requestID: \"12345\",\n      caller: \"users.list\",\n      stream: false,\n      seq: null\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_REQUEST);\n    expect(s.length).toBe(106);\n    const res = serializer.deserialize(s, P.PACKET_REQUEST);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(Object.assign(obj, {\n      seq: undefined\n    }));\n  });","file":"unit/serializers/protobuf.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the request packet with buffer","suites":["Test ProtoBuf serializer"],"updatePoint":{"line":263,"column":53},"line":263,"code":"  it(\"should serialize the request packet with buffer\", () => {\n    const obj = {\n      ver: \"4\",\n      sender: \"test-1\",\n      id: \"100\",\n      action: \"posts.find\",\n      params: Buffer.from(\"binary data\"),\n      meta: {\n        user: {\n          id: 1,\n          roles: [\"admin\"]\n        }\n      },\n      timeout: 1500,\n      level: 4,\n      tracing: true,\n      parentID: \"999\",\n      requestID: \"12345\",\n      caller: null,\n      stream: true,\n      seq: 6\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_REQUEST);\n    expect(s.length).toBe(109);\n    const res = serializer.deserialize(s, P.PACKET_REQUEST);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(Object.assign(obj, {\n      caller: undefined\n    }));\n  });","file":"unit/serializers/protobuf.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the response packet with data","suites":["Test ProtoBuf serializer"],"updatePoint":{"line":293,"column":52},"line":293,"code":"  it(\"should serialize the response packet with data\", () => {\n    const obj = {\n      ver: \"4\",\n      sender: \"test-1\",\n      id: \"12345\",\n      success: true,\n      data: [{\n        id: 1,\n        name: \"John\"\n      }, {\n        id: 2,\n        name: \"Jane\"\n      }],\n      meta: {\n        user: {\n          id: 1,\n          roles: [\"admin\"]\n        }\n      },\n      stream: false,\n      seq: null\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_RESPONSE);\n    expect(s.length).toBe(110);\n    const res = serializer.deserialize(s, P.PACKET_RESPONSE);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(Object.assign(obj, {\n      seq: undefined\n    }));\n  });","file":"unit/serializers/protobuf.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the response packet with falsy data","suites":["Test ProtoBuf serializer"],"updatePoint":{"line":323,"column":58},"line":323,"code":"  it(\"should serialize the response packet with falsy data\", () => {\n    const obj = {\n      ver: \"3\",\n      sender: \"test-1\",\n      id: \"12345\",\n      success: true,\n      data: false,\n      meta: {},\n      stream: false\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_RESPONSE);\n    expect(s.length).toBe(35);\n    const res = serializer.deserialize(s, P.PACKET_RESPONSE);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(obj);\n  });","file":"unit/serializers/protobuf.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the response packet with buffer data","suites":["Test ProtoBuf serializer"],"updatePoint":{"line":339,"column":59},"line":339,"code":"  it(\"should serialize the response packet with buffer data\", () => {\n    const obj = {\n      ver: \"4\",\n      sender: \"test-1\",\n      id: \"12345\",\n      success: true,\n      data: Buffer.from(\"binary data\"),\n      meta: {\n        user: {\n          id: 1,\n          roles: [\"admin\"]\n        }\n      },\n      stream: true,\n      seq: 6\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_RESPONSE);\n    expect(s.length).toBe(76);\n    const res = serializer.deserialize(s, P.PACKET_RESPONSE);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(obj);\n  });","file":"unit/serializers/protobuf.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the response packet with null data","suites":["Test ProtoBuf serializer"],"updatePoint":{"line":361,"column":57},"line":361,"code":"  it(\"should serialize the response packet with null data\", () => {\n    const obj = {\n      ver: \"3\",\n      sender: \"test-1\",\n      id: \"12345\",\n      success: true,\n      data: null,\n      meta: {},\n      stream: false\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_RESPONSE);\n    expect(s.length).toBe(28);\n    const res = serializer.deserialize(s, P.PACKET_RESPONSE);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(obj);\n  });","file":"unit/serializers/protobuf.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the response packet with error","suites":["Test ProtoBuf serializer"],"updatePoint":{"line":377,"column":53},"line":377,"code":"  it(\"should serialize the response packet with error\", () => {\n    const obj = {\n      ver: \"4\",\n      sender: \"test-1\",\n      id: \"12345\",\n      success: false,\n      error: {\n        name: \"ValidationError\",\n        message: \"Invalid email!\",\n        code: 422,\n        nodeID: \"test-1\",\n        type: \"ERR_INVALID_A\",\n        retryable: true,\n        stack: \"STACK_PLACEHOLDER\",\n        data: {\n          a: 5\n        }\n      },\n      meta: {\n        user: {\n          id: 1,\n          roles: [\"admin\"]\n        }\n      },\n      stream: false,\n      seq: null\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_RESPONSE);\n    expect(s.length).toBe(229);\n    const res = serializer.deserialize(s, P.PACKET_RESPONSE);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(Object.assign(obj, {\n      seq: undefined\n    }));\n  });","file":"unit/serializers/protobuf.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the ping packet","suites":["Test ProtoBuf serializer"],"updatePoint":{"line":412,"column":38},"line":412,"code":"  it(\"should serialize the ping packet\", () => {\n    const obj = {\n      ver: \"4\",\n      sender: \"test-1\",\n      time: 1234567,\n      id: \"123\"\n    };\n    const s = serializer.serialize(obj, P.PACKET_PING);\n    expect(s.length).toBe(20);\n    const res = serializer.deserialize(s, P.PACKET_PING);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(Object.assign(obj, {\n      time: {\n        high: 0,\n        low: 1234567,\n        unsigned: false\n      }\n    }));\n  });","file":"unit/serializers/protobuf.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the pong packet","suites":["Test ProtoBuf serializer"],"updatePoint":{"line":431,"column":38},"line":431,"code":"  it(\"should serialize the pong packet\", () => {\n    const obj = {\n      ver: \"4\",\n      sender: \"test-1\",\n      time: 1234567,\n      arrived: 7654321,\n      id: \"123\"\n    };\n    const s = serializer.serialize(obj, P.PACKET_PONG);\n    expect(s.length).toBe(25);\n    const res = serializer.deserialize(s, P.PACKET_PONG);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(Object.assign(obj, {\n      time: {\n        high: 0,\n        low: 1234567,\n        unsigned: false\n      },\n      arrived: {\n        high: 0,\n        low: 7654321,\n        unsigned: false\n      }\n    }));\n  });","file":"unit/serializers/protobuf.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the hello packet","suites":["Test ProtoBuf serializer with Gossip packets"],"updatePoint":{"line":460,"column":39},"line":460,"code":"  it(\"should serialize the hello packet\", () => {\n    const obj = {\n      ver: \"4\",\n      sender: \"test-1\",\n      host: \"server-host\",\n      port: 45450\n    };\n    const s = serializer.serialize(obj, P.PACKET_GOSSIP_HELLO);\n    expect(s.length).toBe(28);\n    const res = serializer.deserialize(s, P.PACKET_GOSSIP_HELLO);\n    expect(res).toEqual(obj);\n  });","file":"unit/serializers/protobuf.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the empty REQUEST packet","suites":["Test ProtoBuf serializer with Gossip packets"],"updatePoint":{"line":472,"column":47},"line":472,"code":"  it(\"should serialize the empty REQUEST packet\", () => {\n    const obj = {\n      ver: \"4\",\n      sender: \"test-1\"\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_GOSSIP_REQ);\n    expect(s.length).toBe(11);\n    const res = serializer.deserialize(s, P.PACKET_GOSSIP_REQ);\n    expect(res).toEqual(obj);\n  });","file":"unit/serializers/protobuf.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the full REQUEST packet","suites":["Test ProtoBuf serializer with Gossip packets"],"updatePoint":{"line":482,"column":46},"line":482,"code":"  it(\"should serialize the full REQUEST packet\", () => {\n    const obj = {\n      ver: \"4\",\n      sender: \"test-1\",\n      online: {\n        \"node-1\": [1, 2, 3],\n        \"node-2\": [150, 0, 0]\n      },\n      offline: {\n        \"node-3\": 23,\n        \"node-4\": 26854204\n      }\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_GOSSIP_REQ);\n    expect(s.length).toBe(83);\n    const res = serializer.deserialize(s, P.PACKET_GOSSIP_REQ);\n    expect(res).toEqual(obj);\n  });","file":"unit/serializers/protobuf.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the empty RESPONSE packet","suites":["Test ProtoBuf serializer with Gossip packets"],"updatePoint":{"line":500,"column":48},"line":500,"code":"  it(\"should serialize the empty RESPONSE packet\", () => {\n    const obj = {\n      ver: \"4\",\n      sender: \"test-1\"\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_GOSSIP_RES);\n    expect(s.length).toBe(11);\n    const res = serializer.deserialize(s, P.PACKET_GOSSIP_RES);\n    expect(res).toEqual(obj);\n  });","file":"unit/serializers/protobuf.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the full RESPONSE packet","suites":["Test ProtoBuf serializer with Gossip packets"],"updatePoint":{"line":510,"column":47},"line":510,"code":"  it(\"should serialize the full RESPONSE packet\", () => {\n    const obj = {\n      ver: \"4\",\n      sender: \"test-1\",\n      online: {\n        \"node-1\": [{\n          services: []\n        }, 2, 3],\n        \"node-2\": [13, 56]\n      },\n      offline: {\n        \"node-3\": 23,\n        \"node-4\": 26854204\n      }\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_GOSSIP_RES);\n    expect(s.length).toBe(95);\n    const res = serializer.deserialize(s, P.PACKET_GOSSIP_RES);\n    expect(res).toEqual(obj);\n  });","file":"unit/serializers/protobuf.spec.js","skipped":false,"dir":"test"},{"name":"should create an empty options","suites":["Test ThriftSerializer constructor"],"updatePoint":{"line":12,"column":36},"line":12,"code":"  it(\"should create an empty options\", () => {\n    let serializer = new ThriftSerializer();\n    expect(serializer).toBeDefined();\n    expect(serializer.serialize).toBeDefined();\n    expect(serializer.deserialize).toBeDefined();\n  });","file":"unit/serializers/thrift.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the disconnect packet","suites":["Test ProtoBuf serializer"],"updatePoint":{"line":22,"column":44},"line":22,"code":"  it(\"should serialize the disconnect packet\", () => {\n    const obj = {\n      ver: \"4\",\n      sender: \"test-1\"\n    };\n    const s = serializer.serialize(obj, P.PACKET_DISCONNECT);\n    expect(s.length).toBe(22);\n    const res = serializer.deserialize(s, P.PACKET_DISCONNECT);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(obj);\n  });","file":"unit/serializers/thrift.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the heartbeat packet","suites":["Test ProtoBuf serializer"],"updatePoint":{"line":33,"column":43},"line":33,"code":"  it(\"should serialize the heartbeat packet\", () => {\n    const obj = {\n      ver: \"4\",\n      sender: \"test-1\",\n      cpu: 12.5\n    };\n    const s = serializer.serialize(obj, P.PACKET_HEARTBEAT);\n    expect(s.length).toBe(33);\n    const res = serializer.deserialize(s, P.PACKET_HEARTBEAT);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(obj);\n  });","file":"unit/serializers/thrift.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the discover packet","suites":["Test ProtoBuf serializer"],"updatePoint":{"line":45,"column":42},"line":45,"code":"  it(\"should serialize the discover packet\", () => {\n    const obj = {\n      ver: \"4\",\n      sender: \"test-1\"\n    };\n    const s = serializer.serialize(obj, P.PACKET_DISCOVER);\n    expect(s.length).toBe(22);\n    const res = serializer.deserialize(s, P.PACKET_DISCOVER);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(obj);\n  });","file":"unit/serializers/thrift.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the info packet","suites":["Test ProtoBuf serializer"],"updatePoint":{"line":56,"column":38},"line":56,"code":"  it(\"should serialize the info packet\", () => {\n    const obj = {\n      ver: \"4\",\n      sender: \"test-1\",\n      services: [{\n        name: \"users\",\n        version: \"2\",\n        settings: {},\n        metadata: {},\n        actions: {\n          \"users.create\": {}\n        },\n        events: {\n          \"user.created\": {}\n        }\n      }],\n      config: {},\n      instanceID: \"123456\",\n      ipList: [\"127.0.0.1\"],\n      hostname: \"test-server\",\n      client: {\n        type: \"nodejs\",\n        version: \"1.2.3\",\n        langVersion: \"6.10.2\"\n      },\n      metadata: {\n        region: \"eu-west1\"\n      },\n      seq: 3\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_INFO);\n    expect(s.length).toBe(286);\n    const res = serializer.deserialize(s, P.PACKET_INFO);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(obj);\n  });","file":"unit/serializers/thrift.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the event packet","suites":["Test ProtoBuf serializer"],"updatePoint":{"line":92,"column":39},"line":92,"code":"  it(\"should serialize the event packet\", () => {\n    const obj = {\n      ver: \"4\",\n      sender: \"test-1\",\n      id: \"event-id\",\n      event: \"user.created\",\n      data: {\n        a: 5,\n        b: \"Test\"\n      },\n      broadcast: true,\n      meta: {\n        name: \"John\"\n      },\n      level: 5,\n      tracing: true,\n      parentID: \"parent-id\",\n      requestID: \"request-id\",\n      caller: \"posts.created\",\n      needAck: true\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_EVENT);\n    expect(s.length).toBe(182);\n    const res = serializer.deserialize(s, P.PACKET_EVENT);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(Object.assign(obj, {\n      groups: null,\n      seq: null,\n      stream: null\n    }));\n  });","file":"unit/serializers/thrift.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the event packet with groups","suites":["Test ProtoBuf serializer"],"updatePoint":{"line":123,"column":51},"line":123,"code":"  it(\"should serialize the event packet with groups\", () => {\n    const obj = {\n      ver: \"4\",\n      sender: \"test-1\",\n      id: \"event-id\",\n      event: \"user.created\",\n      data: {\n        a: 5,\n        b: \"Test\"\n      },\n      groups: [\"users\", \"payments\"],\n      broadcast: false,\n      meta: {\n        name: \"John\"\n      },\n      level: 5,\n      tracing: true,\n      parentID: \"parent-id\",\n      requestID: \"request-id\",\n      caller: \"posts.created\",\n      needAck: true\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_EVENT);\n    expect(s.length).toBe(211);\n    const res = serializer.deserialize(s, P.PACKET_EVENT);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(Object.assign(obj, {\n      seq: null,\n      stream: null\n    }));\n  });","file":"unit/serializers/thrift.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the event packet null data","suites":["Test ProtoBuf serializer"],"updatePoint":{"line":154,"column":49},"line":154,"code":"  it(\"should serialize the event packet null data\", () => {\n    const obj = {\n      ver: \"3\",\n      sender: \"test-1\",\n      id: \"event-id\",\n      event: \"user.created\",\n      data: null,\n      broadcast: true,\n      meta: {\n        name: \"John\"\n      },\n      level: 5,\n      tracing: true,\n      parentID: \"parent-id\",\n      requestID: \"request-id\",\n      caller: \"posts.created\",\n      needAck: true\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_EVENT);\n    expect(s.length).toBe(157);\n    const res = serializer.deserialize(s, P.PACKET_EVENT);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(Object.assign(obj, {\n      groups: null,\n      seq: null,\n      stream: null\n    }));\n  });","file":"unit/serializers/thrift.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the event packet without data","suites":["Test ProtoBuf serializer"],"updatePoint":{"line":182,"column":52},"line":182,"code":"  it(\"should serialize the event packet without data\", () => {\n    const obj = {\n      ver: \"4\",\n      sender: \"test-1\",\n      id: \"event-id\",\n      event: \"user.created\",\n      broadcast: true,\n      meta: {\n        name: \"John\"\n      },\n      level: 5,\n      tracing: true,\n      parentID: \"parent-id\",\n      requestID: \"request-id\",\n      caller: \"posts.created\",\n      needAck: true\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_EVENT);\n    expect(s.length).toBe(157);\n    const res = serializer.deserialize(s, P.PACKET_EVENT);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(Object.assign(obj, {\n      groups: null,\n      seq: null,\n      stream: null\n    }));\n  });","file":"unit/serializers/thrift.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the request packet","suites":["Test ProtoBuf serializer"],"updatePoint":{"line":209,"column":41},"line":209,"code":"  it(\"should serialize the request packet\", () => {\n    const obj = {\n      ver: \"4\",\n      sender: \"test-1\",\n      id: \"100\",\n      action: \"posts.find\",\n      params: {\n        id: 5\n      },\n      meta: {\n        user: {\n          id: 1,\n          roles: [\"admin\"]\n        }\n      },\n      timeout: 1500,\n      level: 4,\n      tracing: true,\n      parentID: \"999\",\n      requestID: \"12345\",\n      caller: \"users.list\",\n      stream: false,\n      seq: null\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_REQUEST);\n    expect(s.length).toBe(178);\n    const res = serializer.deserialize(s, P.PACKET_REQUEST);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(obj);\n  });","file":"unit/serializers/thrift.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the request packet without params","suites":["Test ProtoBuf serializer"],"updatePoint":{"line":239,"column":56},"line":239,"code":"  it(\"should serialize the request packet without params\", () => {\n    const obj = {\n      ver: \"4\",\n      sender: \"test-1\",\n      id: \"100\",\n      action: \"posts.find\",\n      params: null,\n      meta: {\n        user: {\n          id: 1,\n          roles: [\"admin\"]\n        }\n      },\n      timeout: 1500,\n      level: 4,\n      tracing: true,\n      parentID: \"999\",\n      requestID: \"12345\",\n      caller: \"users.list\",\n      stream: false,\n      seq: null\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_REQUEST);\n    expect(s.length).toBe(163);\n    const res = serializer.deserialize(s, P.PACKET_REQUEST);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(obj);\n  });","file":"unit/serializers/thrift.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the request packet with buffer","suites":["Test ProtoBuf serializer"],"updatePoint":{"line":267,"column":53},"line":267,"code":"  it(\"should serialize the request packet with buffer\", () => {\n    const obj = {\n      ver: \"4\",\n      sender: \"test-1\",\n      id: \"100\",\n      action: \"posts.find\",\n      params: Buffer.from(\"binary data\"),\n      meta: {\n        user: {\n          id: 1,\n          roles: [\"admin\"]\n        }\n      },\n      timeout: 1500,\n      level: 4,\n      tracing: true,\n      parentID: \"999\",\n      requestID: \"12345\",\n      caller: null,\n      stream: true,\n      seq: 6\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_REQUEST);\n    expect(s.length).toBe(171);\n    const res = serializer.deserialize(s, P.PACKET_REQUEST);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(obj);\n  });","file":"unit/serializers/thrift.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the response packet with data","suites":["Test ProtoBuf serializer"],"updatePoint":{"line":295,"column":52},"line":295,"code":"  it(\"should serialize the response packet with data\", () => {\n    const obj = {\n      ver: \"4\",\n      sender: \"test-1\",\n      id: \"12345\",\n      success: true,\n      data: [{\n        id: 1,\n        name: \"John\"\n      }, {\n        id: 2,\n        name: \"Jane\"\n      }],\n      meta: {\n        user: {\n          id: 1,\n          roles: [\"admin\"]\n        }\n      },\n      stream: false,\n      seq: null\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_RESPONSE);\n    expect(s.length).toBe(145);\n    const res = serializer.deserialize(s, P.PACKET_RESPONSE);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(Object.assign(obj, {\n      error: null\n    }));\n  });","file":"unit/serializers/thrift.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the response packet with falsy data","suites":["Test ProtoBuf serializer"],"updatePoint":{"line":325,"column":58},"line":325,"code":"  it(\"should serialize the response packet with falsy data\", () => {\n    const obj = {\n      ver: \"3\",\n      sender: \"test-1\",\n      id: \"12345\",\n      success: true,\n      data: false,\n      meta: {},\n      seq: 3,\n      stream: false\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_RESPONSE);\n    expect(s.length).toBe(77);\n    const res = serializer.deserialize(s, P.PACKET_RESPONSE);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(Object.assign(obj, {\n      error: null\n    }));\n  });","file":"unit/serializers/thrift.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the response packet with buffer data","suites":["Test ProtoBuf serializer"],"updatePoint":{"line":344,"column":59},"line":344,"code":"  it(\"should serialize the response packet with buffer data\", () => {\n    const obj = {\n      ver: \"4\",\n      sender: \"test-1\",\n      id: \"12345\",\n      success: true,\n      data: Buffer.from(\"binary data\"),\n      meta: {\n        user: {\n          id: 1,\n          roles: [\"admin\"]\n        }\n      },\n      stream: true,\n      seq: 6\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_RESPONSE);\n    expect(s.length).toBe(116);\n    const res = serializer.deserialize(s, P.PACKET_RESPONSE);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(Object.assign(obj, {\n      error: null\n    }));\n  });","file":"unit/serializers/thrift.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the response packet with null data","suites":["Test ProtoBuf serializer"],"updatePoint":{"line":368,"column":57},"line":368,"code":"  it(\"should serialize the response packet with null data\", () => {\n    const obj = {\n      ver: \"3\",\n      sender: \"test-1\",\n      id: \"12345\",\n      success: true,\n      data: null,\n      meta: {},\n      seq: 3,\n      stream: false\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_RESPONSE);\n    expect(s.length).toBe(65);\n    const res = serializer.deserialize(s, P.PACKET_RESPONSE);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(Object.assign(obj, {\n      error: null\n    }));\n  });","file":"unit/serializers/thrift.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the response packet with error","suites":["Test ProtoBuf serializer"],"updatePoint":{"line":387,"column":53},"line":387,"code":"  it(\"should serialize the response packet with error\", () => {\n    const obj = {\n      ver: \"4\",\n      sender: \"test-1\",\n      id: \"12345\",\n      success: false,\n      error: {\n        name: \"ValidationError\",\n        message: \"Invalid email!\",\n        code: 422,\n        nodeID: \"test-1\",\n        type: \"ERR_INVALID_A\",\n        retryable: true,\n        stack: \"STACK_PLACEHOLDER\",\n        data: {\n          a: 5\n        }\n      },\n      meta: {\n        user: {\n          id: 1,\n          roles: [\"admin\"]\n        }\n      },\n      stream: false,\n      seq: 0\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_RESPONSE);\n    expect(s.length).toBe(270);\n    const res = serializer.deserialize(s, P.PACKET_RESPONSE);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(obj);\n  });","file":"unit/serializers/thrift.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the ping packet","suites":["Test ProtoBuf serializer"],"updatePoint":{"line":420,"column":38},"line":420,"code":"  it(\"should serialize the ping packet\", () => {\n    const obj = {\n      ver: \"4\",\n      sender: \"test-1\",\n      time: 1234567,\n      id: \"123\"\n    };\n    const s = serializer.serialize(obj, P.PACKET_PING);\n    expect(s.length).toBe(43);\n    const res = serializer.deserialize(s, P.PACKET_PING);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(Object.assign(obj, {\n      time: {\n        buffer: Buffer.from([0, 0, 0, 0, 0, 18, 214, 135]),\n        offset: 0\n      }\n    }));\n  });","file":"unit/serializers/thrift.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the pong packet","suites":["Test ProtoBuf serializer"],"updatePoint":{"line":438,"column":38},"line":438,"code":"  it(\"should serialize the pong packet\", () => {\n    const obj = {\n      ver: \"4\",\n      sender: \"test-1\",\n      id: \"123\",\n      time: 1234567,\n      arrived: 7654321\n    };\n    const s = serializer.serialize(obj, P.PACKET_PONG);\n    expect(s.length).toBe(54);\n    const res = serializer.deserialize(s, P.PACKET_PONG);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(Object.assign(obj, {\n      time: {\n        buffer: Buffer.from([0, 0, 0, 0, 0, 18, 214, 135]),\n        offset: 0\n      },\n      arrived: {\n        buffer: Buffer.from([0, 0, 0, 0, 0, 116, 203, 177]),\n        offset: 0\n      }\n    }));\n  });","file":"unit/serializers/thrift.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the hello packet","suites":["Test ProtoBuf serializer with Gossip packets"],"updatePoint":{"line":465,"column":39},"line":465,"code":"  it(\"should serialize the hello packet\", () => {\n    const obj = {\n      ver: \"4\",\n      sender: \"test-1\",\n      host: \"server-host\",\n      port: 45450\n    };\n    const s = serializer.serialize(obj, P.PACKET_GOSSIP_HELLO);\n    expect(s.length).toBe(47);\n    const res = serializer.deserialize(s, P.PACKET_GOSSIP_HELLO);\n    expect(res).toEqual(obj);\n  });","file":"unit/serializers/thrift.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the empty REQUEST packet","suites":["Test ProtoBuf serializer with Gossip packets"],"updatePoint":{"line":477,"column":47},"line":477,"code":"  it(\"should serialize the empty REQUEST packet\", () => {\n    const obj = {\n      ver: \"4\",\n      sender: \"test-1\"\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_GOSSIP_REQ);\n    expect(s.length).toBe(22);\n    const res = serializer.deserialize(s, P.PACKET_GOSSIP_REQ);\n    expect(res).toEqual(Object.assign(obj, {\n      offline: null,\n      online: null\n    }));\n  });","file":"unit/serializers/thrift.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the full REQUEST packet","suites":["Test ProtoBuf serializer with Gossip packets"],"updatePoint":{"line":490,"column":46},"line":490,"code":"  it(\"should serialize the full REQUEST packet\", () => {\n    const obj = {\n      ver: \"4\",\n      sender: \"test-1\",\n      online: {\n        \"node-1\": [1, 2, 3],\n        \"node-2\": [150, 0, 0]\n      },\n      offline: {\n        \"node-3\": 23,\n        \"node-4\": 26854204\n      }\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_GOSSIP_REQ);\n    expect(s.length).toBe(104);\n    const res = serializer.deserialize(s, P.PACKET_GOSSIP_REQ);\n    expect(res).toEqual(obj);\n  });","file":"unit/serializers/thrift.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the empty RESPONSE packet","suites":["Test ProtoBuf serializer with Gossip packets"],"updatePoint":{"line":508,"column":48},"line":508,"code":"  it(\"should serialize the empty RESPONSE packet\", () => {\n    const obj = {\n      ver: \"4\",\n      sender: \"test-1\"\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_GOSSIP_RES);\n    expect(s.length).toBe(22);\n    const res = serializer.deserialize(s, P.PACKET_GOSSIP_RES);\n    expect(res).toEqual(Object.assign(obj, {\n      offline: null,\n      online: null\n    }));\n  });","file":"unit/serializers/thrift.spec.js","skipped":false,"dir":"test"},{"name":"should serialize the full RESPONSE packet","suites":["Test ProtoBuf serializer with Gossip packets"],"updatePoint":{"line":521,"column":47},"line":521,"code":"  it(\"should serialize the full RESPONSE packet\", () => {\n    const obj = {\n      ver: \"4\",\n      sender: \"test-1\",\n      online: {\n        \"node-1\": [{\n          services: []\n        }, 2, 3],\n        \"node-2\": [13, 56]\n      },\n      offline: {\n        \"node-3\": 23,\n        \"node-4\": 26854204\n      }\n    };\n    const s = serializer.serialize(cloneDeep(obj), P.PACKET_GOSSIP_RES);\n    expect(s.length).toBe(116);\n    const res = serializer.deserialize(s, P.PACKET_GOSSIP_RES);\n    expect(res).toEqual(obj);\n  });","file":"unit/serializers/thrift.spec.js","skipped":false,"dir":"test"},{"name":"should set default options","suites":["Test ServiceBroker constructor"],"updatePoint":{"line":116,"column":32},"line":116,"code":"  it(\"should set default options\", () => {\n    console.log = jest.fn();\n    Registry.prototype.init.mockClear();\n    broker = new ServiceBroker();\n    expect(broker).toBeDefined();\n    expect(broker.options).toEqual(ServiceBroker.defaultOptions);\n    expect(broker.Promise).toBe(Promise);\n    expect(ServiceBroker.Promise).toBe(Promise);\n    expect(broker.ServiceFactory).toBe(Service);\n    expect(broker.ContextFactory).toBe(Context);\n    expect(broker.namespace).toBe(\"\");\n    expect(broker.nodeID).toBe(\"node-1234\");\n    expect(broker.instanceID).toBe(\"1\");\n    expect(broker.loggerFactory).toBeInstanceOf(LoggerFactory);\n    expect(broker.logger).toBeDefined();\n    expect(broker.metadata).toEqual({});\n    expect(broker.localBus).toBeDefined(); //expect(broker.scope).toBeDefined();\n\n    expect(broker.metrics).toBeDefined();\n    expect(broker.tracer).toBeDefined();\n    expect(broker.services).toBeInstanceOf(Array);\n    expect(broker.registry).toBeInstanceOf(Registry);\n    expect(broker.registry.init).toBeCalledTimes(1);\n    expect(broker.registry.init).toBeCalledWith(broker);\n    expect(broker.middlewares).toBeInstanceOf(MiddlewareHandler);\n    expect(broker.cacher).toBeNull();\n    expect(broker.serializer).toBeInstanceOf(Serializers.JSON);\n    expect(broker.validator).toBeInstanceOf(Validators.Fastest);\n    expect(broker.errorRegenerator).toBeInstanceOf(Regenerator);\n    expect(broker.transit).toBeUndefined();\n    expect(broker.getLocalService(\"$node\")).toBeDefined();\n    expect(ServiceBroker.defaultOptions).toBeDefined();\n    expect(ServiceBroker.MOLECULER_VERSION).toBeDefined();\n    expect(broker.MOLECULER_VERSION).toBeDefined();\n    expect(broker.call).not.toBe(broker.callWithoutBalancer);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should merge options","suites":["Test ServiceBroker constructor"],"updatePoint":{"line":152,"column":26},"line":152,"code":"  it(\"should merge options\", () => {\n    broker = new ServiceBroker({\n      namespace: \"test\",\n      nodeID: \"server-12\",\n      transporter: null,\n      heartbeatTimeout: 25,\n      logger: {\n        type: \"Console\",\n        options: {\n          level: \"error\",\n          formatter: \"simple\"\n        }\n      },\n      retryPolicy: {\n        enabled: true,\n        retries: 3\n      },\n      contextParamsCloning: true,\n      maxCallLevel: 10,\n      requestTimeout: 5000,\n      tracking: {\n        enabled: true\n      },\n      metrics: {\n        enabled: true\n      },\n      tracing: {\n        enabled: true\n      },\n      errorHandler: err => console.log(err),\n      disableBalancer: true,\n      registry: {\n        strategy: Strategies.Random,\n        preferLocal: false\n      },\n      circuitBreaker: {\n        enabled: true,\n        threshold: 0.3,\n        minRequestCount: 10\n      },\n      bulkhead: {\n        enabled: true,\n        concurrency: 2\n      },\n      validator: false,\n      internalServices: false,\n      hotReload: true,\n      metadata: {\n        region: \"eu-west1\"\n      }\n    });\n    expect(broker).toBeDefined();\n    expect(broker.options).toEqual({\n      namespace: \"test\",\n      nodeID: \"server-12\",\n      logger: {\n        type: \"Console\",\n        options: {\n          level: \"error\",\n          formatter: \"simple\"\n        }\n      },\n      logLevel: null,\n      errorRegenerator: null,\n      cacher: null,\n      serializer: null,\n      transporter: null,\n      heartbeatTimeout: 25,\n      heartbeatInterval: 10,\n      tracking: {\n        enabled: true,\n        shutdownTimeout: 5000\n      },\n      errorHandler: expect.any(Function),\n      metrics: {\n        enabled: true\n      },\n      tracing: {\n        enabled: true\n      },\n      disableBalancer: true,\n      registry: {\n        strategy: Strategies.Random,\n        preferLocal: false\n      },\n      circuitBreaker: {\n        enabled: true,\n        threshold: 0.3,\n        windowTime: 60,\n        minRequestCount: 10,\n        halfOpenTime: 10 * 1000,\n        check: expect.any(Function)\n      },\n      bulkhead: {\n        enabled: true,\n        concurrency: 2,\n        maxQueueSize: 100\n      },\n      transit: {\n        disableReconnect: false,\n        maxQueueSize: 50 * 1000,\n        maxChunkSize: 262144,\n        disableVersionCheck: false\n      },\n      uidGenerator: null,\n      retryPolicy: {\n        enabled: true,\n        retries: 3,\n        delay: 100,\n        maxDelay: 1000,\n        factor: 2,\n        check: expect.any(Function)\n      },\n      requestTimeout: 5000,\n      maxCallLevel: 10,\n      maxSafeObjectSize: null,\n      contextParamsCloning: true,\n      validator: false,\n      internalServices: false,\n      internalMiddlewares: true,\n      dependencyInterval: 1000,\n      hotReload: true,\n      middlewares: null,\n      replCommands: null,\n      replDelimiter: null,\n      metadata: {\n        region: \"eu-west1\"\n      },\n      skipProcessEventRegistration: false\n    });\n    expect(broker.services).toBeInstanceOf(Array);\n    expect(broker.registry).toBeInstanceOf(Registry);\n    expect(broker.transit).toBeUndefined();\n    expect(broker.validator).toBeUndefined();\n    expect(broker.serializer).toBeInstanceOf(Serializers.JSON);\n    expect(broker.namespace).toBe(\"test\");\n    expect(broker.nodeID).toBe(\"server-12\");\n    expect(broker.instanceID).toBe(\"1\");\n    expect(broker.metadata).toEqual({\n      region: \"eu-west1\"\n    });\n    expect(broker.call).toBe(broker.callWithoutBalancer);\n    expect(broker.getLocalService(\"$node\")).not.toBeDefined();\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should create transit if transporter into options","suites":["Test ServiceBroker constructor"],"updatePoint":{"line":296,"column":55},"line":296,"code":"  it(\"should create transit if transporter into options\", () => {\n    broker = new ServiceBroker({\n      logger: false,\n      transporter: \"Fake\"\n    });\n    expect(broker).toBeDefined();\n    expect(broker.transit).toBeInstanceOf(Transit);\n    expect(broker.nodeID).toBe(\"node-1234\");\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should create cacher and call init","suites":["Test ServiceBroker constructor"],"updatePoint":{"line":305,"column":40},"line":305,"code":"  it(\"should create cacher and call init\", () => {\n    let cacher = new Cachers.Memory();\n    cacher.init = jest.fn();\n    broker = new ServiceBroker({\n      logger: false,\n      cacher\n    });\n    expect(broker).toBeDefined();\n    expect(broker.cacher).toBe(cacher);\n    expect(cacher.init).toHaveBeenCalledTimes(1);\n    expect(cacher.init).toHaveBeenCalledWith(broker);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should create errorRegenerator and call init","suites":["Test ServiceBroker constructor"],"updatePoint":{"line":317,"column":50},"line":317,"code":"  it(\"should create errorRegenerator and call init\", () => {\n    let errorRegenerator = new Regenerator();\n    errorRegenerator.init = jest.fn();\n    broker = new ServiceBroker({\n      logger: false,\n      errorRegenerator\n    });\n    expect(broker).toBeDefined();\n    expect(broker.errorRegenerator).toBe(errorRegenerator);\n    expect(errorRegenerator.init).toHaveBeenCalledTimes(1);\n    expect(errorRegenerator.init).toHaveBeenCalledWith(broker);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should set serializer and call init","suites":["Test ServiceBroker constructor"],"updatePoint":{"line":329,"column":41},"line":329,"code":"  it(\"should set serializer and call init\", () => {\n    let serializer = new Serializers.JSON();\n    serializer.init = jest.fn();\n    broker = new ServiceBroker({\n      logger: false,\n      serializer\n    });\n    expect(broker).toBeDefined();\n    expect(broker.serializer).toBe(serializer);\n    expect(serializer.init).toHaveBeenCalledTimes(1);\n    expect(serializer.init).toHaveBeenCalledWith(broker);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should set validator","suites":["Test ServiceBroker constructor"],"updatePoint":{"line":341,"column":26},"line":341,"code":"  it(\"should set validator\", () => {\n    broker = new ServiceBroker({\n      logger: false\n    });\n    expect(broker.validator).toBeInstanceOf(Validators.Fastest);\n    broker.stop();\n    broker = new ServiceBroker({\n      logger: false,\n      validator: true\n    });\n    expect(broker.validator).toBeInstanceOf(Validators.Fastest);\n    broker.stop();\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should not set validator","suites":["Test ServiceBroker constructor"],"updatePoint":{"line":354,"column":30},"line":354,"code":"  it(\"should not set validator\", () => {\n    broker = new ServiceBroker({\n      logger: false,\n      validator: false\n    });\n    expect(broker.validator).toBeUndefined();\n    broker.stop();\n    broker = new ServiceBroker({\n      logger: false,\n      validator: null\n    });\n    expect(broker.validator).toBeUndefined();\n    broker.stop();\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should disable balancer if transporter has no built-in balancer","suites":["Test ServiceBroker constructor"],"updatePoint":{"line":368,"column":69},"line":368,"code":"  it(\"should disable balancer if transporter has no built-in balancer\", () => {\n    broker = new ServiceBroker({\n      logger: false,\n      transporter: \"Fake\",\n      disableBalancer: true\n    });\n    expect(broker.options.disableBalancer).toBe(true);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should not disable balancer if transporter has no built-in balancer","suites":["Test ServiceBroker constructor"],"updatePoint":{"line":376,"column":73},"line":376,"code":"  it(\"should not disable balancer if transporter has no built-in balancer\", () => {\n    let tx = new Transporters.Fake();\n    tx.hasBuiltInBalancer = false;\n    broker = new ServiceBroker({\n      logger: false,\n      transporter: tx,\n      disableBalancer: true\n    });\n    expect(broker.options.disableBalancer).toBe(false);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call lifecycle handlers","suites":["Test ServiceBroker constructor"],"updatePoint":{"line":386,"column":36},"line":386,"code":"  it(\"should call lifecycle handlers\", () => {\n    let created = jest.fn();\n    let started = jest.fn();\n    let stopped = jest.fn();\n    broker = new ServiceBroker({\n      logger: false,\n      created,\n      started,\n      stopped\n    });\n    expect(created).toHaveBeenCalledTimes(1);\n    expect(created).toHaveBeenCalledWith(broker);\n    expect(started).toHaveBeenCalledTimes(0);\n    expect(stopped).toHaveBeenCalledTimes(0);\n    return broker.start().then(() => {\n      expect(created).toHaveBeenCalledTimes(1);\n      expect(started).toHaveBeenCalledTimes(1);\n      expect(started).toHaveBeenCalledWith(broker);\n      expect(stopped).toHaveBeenCalledTimes(0);\n      return broker.stop().then(() => {\n        expect(created).toHaveBeenCalledTimes(1);\n        expect(started).toHaveBeenCalledTimes(1);\n        expect(stopped).toHaveBeenCalledTimes(1);\n        expect(stopped).toHaveBeenCalledWith(broker);\n      });\n    });\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should load internal middlewares","suites":["Test ServiceBroker constructor"],"updatePoint":{"line":413,"column":38},"line":413,"code":"  it(\"should load internal middlewares\", () => {\n    broker = new ServiceBroker({\n      logger: false\n    });\n    expect(broker.middlewares.count()).toBe(13);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should not load internal middlewares","suites":["Test ServiceBroker constructor"],"updatePoint":{"line":419,"column":42},"line":419,"code":"  it(\"should not load internal middlewares\", () => {\n    broker = new ServiceBroker({\n      logger: false,\n      internalMiddlewares: false\n    });\n    expect(broker.middlewares.count()).toBe(0);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should load user middlewares","suites":["Test ServiceBroker constructor"],"updatePoint":{"line":426,"column":34},"line":426,"code":"  it(\"should load user middlewares\", () => {\n    let mw1 = {\n      localAction: jest.fn(handler => handler)\n    };\n    let mw2 = {\n      localAction: jest.fn(handler => handler)\n    };\n    broker = new ServiceBroker({\n      logger: false,\n      internalMiddlewares: false,\n      middlewares: [mw1, function () {\n        return mw2;\n      }]\n    });\n    expect(broker.middlewares.count()).toBe(2);\n    expect(mw1.localAction).toHaveBeenCalledTimes(7);\n    expect(mw2.localAction).toHaveBeenCalledTimes(7);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should register internal middlewares","suites":["Test ServiceBroker constructor"],"updatePoint":{"line":444,"column":42},"line":444,"code":"  it(\"should register internal middlewares\", () => {\n    broker = new ServiceBroker({\n      logger: false,\n      cacher: \"memory\",\n      requestTimeout: 5000,\n      trackContext: true,\n      circuitBreaker: {\n        enabled: true\n      },\n      retryPolicy: {\n        enabled: true\n      }\n    });\n    expect(broker.middlewares.count()).toBe(14);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should register moleculer metrics","suites":["Test ServiceBroker constructor"],"updatePoint":{"line":459,"column":39},"line":459,"code":"  it(\"should register moleculer metrics\", () => {\n    broker = new ServiceBroker({\n      logger: false,\n      metrics: false\n    });\n    const mockSet = jest.fn();\n    broker.metrics.register = jest.fn(() => ({\n      set: mockSet\n    }));\n    broker.registerMoleculerMetrics();\n    expect(broker.metrics.register).toHaveBeenCalledTimes(0);\n    broker.isMetricsEnabled = jest.fn(() => true);\n    broker.registerMoleculerMetrics();\n    expect(broker.metrics.register).toHaveBeenCalledTimes(7);\n    expect(mockSet).toHaveBeenCalledTimes(7);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call started of services","suites":["Test broker.start","without transporter"],"updatePoint":{"line":489,"column":39},"line":489,"code":"    it(\"should call started of services\", async () => {\n      broker.services.forEach(svc => svc._start = jest.fn());\n      broker.broadcastLocal = jest.fn();\n      broker.metrics.set = jest.fn();\n      broker.callMiddlewareHook = jest.fn();\n      broker.registry.regenerateLocalRawInfo = jest.fn(); //broker.scope.enable = jest.fn();\n      //broker.tracer.restartScope = jest.fn();\n\n      await broker.start(); //expect(broker.scope.enable).toHaveBeenCalledTimes(1);\n      //expect(broker.tracer.restartScope).toHaveBeenCalledTimes(1);\n\n      expect(optStarted).toHaveBeenCalledTimes(1);\n      expect(svc._start).toHaveBeenCalledTimes(1);\n      expect(broker.started).toBe(true);\n      expect(broker.metrics.set).toHaveBeenCalledTimes(1);\n      expect(broker.metrics.set).toHaveBeenCalledWith(\"moleculer.broker.started\", 1);\n      expect(broker.broadcastLocal).toHaveBeenCalledTimes(1);\n      expect(broker.broadcastLocal).toHaveBeenCalledWith(\"$broker.started\");\n      expect(broker.registry.regenerateLocalRawInfo).toBeCalledTimes(1);\n      expect(broker.registry.regenerateLocalRawInfo).toBeCalledWith(true);\n      expect(broker.callMiddlewareHook).toHaveBeenCalledTimes(2);\n      expect(broker.callMiddlewareHook).toHaveBeenCalledWith(\"starting\", [broker]);\n      expect(broker.callMiddlewareHook).toHaveBeenCalledWith(\"started\", [broker]);\n    });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call started of services","suites":["Test broker.start","with transporter"],"updatePoint":{"line":526,"column":39},"line":526,"code":"    it(\"should call started of services\", async () => {\n      broker.services.forEach(svc => svc._start = jest.fn());\n      broker.transit.connect = jest.fn(() => Promise.resolve());\n      broker.transit.ready = jest.fn(() => Promise.resolve());\n      broker.broadcastLocal = jest.fn();\n      broker.metrics.set = jest.fn();\n      broker.callMiddlewareHook = jest.fn();\n      broker.registry.regenerateLocalRawInfo = jest.fn(); //broker.scope.enable = jest.fn();\n      //broker.tracer.restartScope = jest.fn();\n\n      await broker.start(); //expect(broker.scope.enable).toHaveBeenCalledTimes(1);\n      //expect(broker.tracer.restartScope).toHaveBeenCalledTimes(1);\n\n      expect(optStarted).toHaveBeenCalledTimes(1);\n      expect(svc._start).toHaveBeenCalledTimes(1);\n      expect(broker.transit.connect).toHaveBeenCalledTimes(1);\n      expect(broker.started).toBe(true);\n      expect(broker.metrics.set).toHaveBeenCalledTimes(1);\n      expect(broker.metrics.set).toHaveBeenCalledWith(\"moleculer.broker.started\", 1);\n      expect(broker.broadcastLocal).toHaveBeenCalledTimes(1);\n      expect(broker.broadcastLocal).toHaveBeenCalledWith(\"$broker.started\");\n      expect(broker.registry.regenerateLocalRawInfo).toBeCalledTimes(1);\n      expect(broker.registry.regenerateLocalRawInfo).toBeCalledWith(true);\n      expect(broker.transit.ready).toHaveBeenCalledTimes(1);\n      expect(broker.callMiddlewareHook).toHaveBeenCalledTimes(2);\n      expect(broker.callMiddlewareHook).toHaveBeenCalledWith(\"starting\", [broker]);\n      expect(broker.callMiddlewareHook).toHaveBeenCalledWith(\"started\", [broker]);\n    });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should reject","suites":["Test broker.start","if started throw error"],"updatePoint":{"line":575,"column":21},"line":575,"code":"    it(\"should reject\", () => {\n      return expect(broker.start()).rejects.toBeDefined();\n    });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should not call others","suites":["Test broker.start","if started throw error"],"updatePoint":{"line":578,"column":30},"line":578,"code":"    it(\"should not call others\", () => {\n      // expect(broker.scope.enable).toHaveBeenCalledTimes(1);\n      // expect(broker.tracer.restartScope).toHaveBeenCalledTimes(1);\n      expect(optStarted).toHaveBeenCalledTimes(0);\n      expect(broker.transit.connect).toHaveBeenCalledTimes(1);\n      expect(schema.started).toHaveBeenCalledTimes(1);\n      expect(broker.started).toBe(false);\n      expect(broker.localBus.emit).toHaveBeenCalledTimes(0);\n      expect(broker.metrics.set).toHaveBeenCalledTimes(0);\n      expect(broker.transit.ready).toHaveBeenCalledTimes(0);\n      expect(broker.callMiddlewareHook).toHaveBeenCalledTimes(2);\n      expect(broker.callMiddlewareHook).toHaveBeenCalledWith(\"starting\", [broker]);\n    });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call stopped of services","suites":["Test broker.stop","without transporter"],"updatePoint":{"line":617,"column":39},"line":617,"code":"    it(\"should call stopped of services\", () => {\n      broker.services.forEach(svc => svc._stop = jest.fn());\n      broker.broadcastLocal.mockClear();\n      broker.metrics.set.mockClear();\n      broker.callMiddlewareHook.mockClear();\n      broker.registry.regenerateLocalRawInfo = jest.fn();\n      broker.registry.discoverer.sendLocalNodeInfo = jest.fn();\n      return broker.stop().then(() => {\n        expect(broker.registry.regenerateLocalRawInfo).toBeCalledTimes(0);\n        expect(broker.registry.discoverer.sendLocalNodeInfo).toBeCalledTimes(0);\n        expect(optStopped).toHaveBeenCalledTimes(1);\n        expect(svc._stop).toHaveBeenCalledTimes(1);\n        expect(broker.cacher.close).toHaveBeenCalledTimes(1);\n        expect(broker.metrics.stop).toHaveBeenCalledTimes(1);\n        expect(broker.tracer.stop).toHaveBeenCalledTimes(1);\n        expect(broker.loggerFactory.stop).toHaveBeenCalledTimes(1);\n        expect(broker.callMiddlewareHook).toHaveBeenCalledTimes(2);\n        expect(broker.callMiddlewareHook).toHaveBeenCalledWith(\"stopping\", [broker], {\n          reverse: true\n        });\n        expect(broker.callMiddlewareHook).toHaveBeenCalledWith(\"stopped\", [broker], {\n          reverse: true\n        });\n        expect(broker.started).toBe(false);\n        expect(broker.broadcastLocal).toHaveBeenCalledTimes(1);\n        expect(broker.broadcastLocal).toHaveBeenCalledWith(\"$broker.stopped\"); // expect(broker.scope.stop).toHaveBeenCalledTimes(1);\n\n        expect(broker.metrics.set).toHaveBeenCalledTimes(1);\n        expect(broker.metrics.set).toHaveBeenCalledWith(\"moleculer.broker.started\", 0);\n      });\n    });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call stopped of services","suites":["Test broker.stop","if stopped return with Promise"],"updatePoint":{"line":675,"column":39},"line":675,"code":"    it(\"should call stopped of services\", () => {\n      broker.services.forEach(svc => svc._stop = jest.fn());\n      broker.broadcastLocal.mockClear();\n      broker.metrics.set.mockClear();\n      broker.callMiddlewareHook.mockClear();\n      broker.registry.regenerateLocalRawInfo = jest.fn();\n      broker.registry.discoverer.sendLocalNodeInfo = jest.fn();\n      return broker.stop().then(() => {\n        expect(broker.registry.regenerateLocalRawInfo).toBeCalledTimes(1);\n        expect(broker.registry.regenerateLocalRawInfo).toBeCalledWith(true);\n        expect(broker.registry.discoverer.sendLocalNodeInfo).toBeCalledTimes(1);\n        expect(optStopped).toHaveBeenCalledTimes(1);\n        expect(svc._stop).toHaveBeenCalledTimes(1);\n        expect(broker.transit.disconnect).toHaveBeenCalledTimes(1);\n        expect(broker.cacher.close).toHaveBeenCalledTimes(1);\n        expect(broker.metrics.stop).toHaveBeenCalledTimes(1);\n        expect(broker.tracer.stop).toHaveBeenCalledTimes(1);\n        expect(broker.loggerFactory.stop).toHaveBeenCalledTimes(1);\n        expect(broker.callMiddlewareHook).toHaveBeenCalledTimes(2);\n        expect(broker.callMiddlewareHook).toHaveBeenCalledWith(\"stopping\", [broker], {\n          reverse: true\n        });\n        expect(broker.callMiddlewareHook).toHaveBeenCalledWith(\"stopped\", [broker], {\n          reverse: true\n        });\n        expect(broker.started).toBe(false);\n        expect(broker.broadcastLocal).toHaveBeenCalledTimes(1);\n        expect(broker.broadcastLocal).toHaveBeenCalledWith(\"$broker.stopped\"); // expect(broker.scope.stop).toHaveBeenCalledTimes(1);\n\n        expect(broker.metrics.set).toHaveBeenCalledTimes(1);\n        expect(broker.metrics.set).toHaveBeenCalledWith(\"moleculer.broker.started\", 0);\n      });\n    });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call stopped of services","suites":["Test broker.stop","if stopped throw error"],"updatePoint":{"line":736,"column":39},"line":736,"code":"    it(\"should call stopped of services\", () => {\n      broker.broadcastLocal.mockClear();\n      broker.callMiddlewareHook.mockClear();\n      broker.metrics.set.mockClear();\n      return broker.stop().then(() => {\n        expect(optStopped).toHaveBeenCalledTimes(1);\n        expect(schema.stopped).toHaveBeenCalledTimes(1);\n        expect(broker.transit.disconnect).toHaveBeenCalledTimes(1);\n        expect(broker.cacher.close).toHaveBeenCalledTimes(1);\n        expect(broker.metrics.stop).toHaveBeenCalledTimes(1);\n        expect(broker.tracer.stop).toHaveBeenCalledTimes(1);\n        expect(broker.loggerFactory.stop).toHaveBeenCalledTimes(1);\n        expect(broker.callMiddlewareHook).toHaveBeenCalledTimes(5);\n        expect(broker.callMiddlewareHook).toHaveBeenCalledWith(\"stopping\", [broker], {\n          reverse: true\n        });\n        expect(broker.callMiddlewareHook).toHaveBeenCalledWith(\"stopped\", [broker], {\n          reverse: true\n        });\n        expect(broker.started).toBe(false);\n        expect(broker.broadcastLocal).toHaveBeenCalledTimes(2);\n        expect(broker.broadcastLocal).toHaveBeenNthCalledWith(1, \"$broker.error\", {\n          error: \"Can't stop!\",\n          module: \"broker\",\n          type: C.FAILED_STOPPING_SERVICES\n        });\n        expect(broker.broadcastLocal).toHaveBeenNthCalledWith(2, \"$broker.stopped\"); // expect(broker.scope.stop).toHaveBeenCalledTimes(1);\n\n        expect(broker.metrics.set).toHaveBeenCalledTimes(1);\n        expect(broker.metrics.set).toHaveBeenCalledWith(\"moleculer.broker.started\", 0);\n      });\n    });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should broadcast an error when stop","suites":["Test broker.stop","Test throw error during service stop"],"updatePoint":{"line":786,"column":43},"line":786,"code":"    it(\"should broadcast an error when stop\", async () => {\n      broker.broadcastLocal = jest.fn();\n      await broker.stop(service);\n      expect(broker.broadcastLocal).toHaveBeenCalledTimes(2);\n      expect(broker.broadcastLocal).toHaveBeenNthCalledWith(1, \"$broker.error\", {\n        error: new Error(\"test\"),\n        module: \"broker\",\n        type: C.FAILED_STOPPING_SERVICES\n      });\n      expect(broker.broadcastLocal).toHaveBeenNthCalledWith(2, \"$broker.stopped\");\n    });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should switch to repl mode","suites":["Test broker.repl"],"updatePoint":{"line":804,"column":32},"line":804,"code":"  it(\"should switch to repl mode\", () => {\n    let broker = new ServiceBroker({\n      logger: false\n    });\n    broker.repl();\n    expect(repl).toHaveBeenCalledTimes(1);\n    expect(repl).toHaveBeenCalledWith(broker, null);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should switch to repl mode with custom commands","suites":["Test broker.repl"],"updatePoint":{"line":812,"column":53},"line":812,"code":"  it(\"should switch to repl mode with custom commands\", () => {\n    repl.mockClear();\n    let broker = new ServiceBroker({\n      logger: false,\n      replCommands: []\n    });\n    broker.repl();\n    expect(repl).toHaveBeenCalledTimes(1);\n    expect(repl).toHaveBeenCalledWith(broker, {\n      customCommands: broker.options.replCommands\n    });\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should switch to repl mode with delimiter","suites":["Test broker.repl"],"updatePoint":{"line":824,"column":47},"line":824,"code":"  it(\"should switch to repl mode with delimiter\", () => {\n    repl.mockClear();\n    let broker = new ServiceBroker({\n      logger: false,\n      replDelimiter: \"mol # \"\n    });\n    broker.repl();\n    expect(repl).toHaveBeenCalledTimes(1);\n    expect(repl).toHaveBeenCalledWith(broker, {\n      delimiter: broker.options.replDelimiter\n    });\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should throw further error if not errorHandler","suites":["Test broker.errorHandler"],"updatePoint":{"line":838,"column":52},"line":838,"code":"  it(\"should throw further error if not errorHandler\", () => {\n    const broker = new ServiceBroker({\n      logger: false\n    });\n    const error = new MoleculerError(\"Some error\");\n    const info = {};\n    expect(() => broker.errorHandler(error, info)).toThrowError(error);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call errorHandler and not throw further","suites":["Test broker.errorHandler"],"updatePoint":{"line":846,"column":52},"line":846,"code":"  it(\"should call errorHandler and not throw further\", () => {\n    const errorHandler = jest.fn();\n    const broker = new ServiceBroker({\n      logger: false,\n      errorHandler\n    });\n    const error = new MoleculerError(\"Some error\");\n    const info = {};\n    broker.errorHandler(error, info);\n    expect(errorHandler).toHaveBeenCalledTimes(1);\n    expect(errorHandler).toHaveBeenCalledWith(error, info);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call errorHandler and throw further","suites":["Test broker.errorHandler"],"updatePoint":{"line":858,"column":48},"line":858,"code":"  it(\"should call errorHandler and throw further\", () => {\n    const errorHandler = jest.fn(err => {\n      throw err;\n    });\n    const broker = new ServiceBroker({\n      logger: false,\n      errorHandler\n    });\n    const error = new MoleculerError(\"Some error\");\n    const info = {};\n    expect(() => broker.errorHandler(error, info)).toThrowError(error);\n    expect(errorHandler).toHaveBeenCalledTimes(1);\n    expect(errorHandler).toHaveBeenCalledWith(error, info);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call middleware.wrapMethod","suites":["Test wrapMethod, callMiddlewareHook & callMiddlewareHookSync methods"],"updatePoint":{"line":874,"column":39},"line":874,"code":"  it(\"should call middleware.wrapMethod\", () => {\n    const broker = new ServiceBroker({\n      logger: false\n    });\n    broker.middlewares.wrapMethod = jest.fn();\n    const handler = jest.fn();\n    const o = {};\n    broker.wrapMethod(\"emit\", handler);\n    expect(broker.middlewares.wrapMethod).toHaveBeenCalledTimes(1);\n    expect(broker.middlewares.wrapMethod).toHaveBeenCalledWith(\"emit\", handler, undefined, undefined);\n    broker.middlewares.wrapMethod.mockClear();\n    broker.wrapMethod(\"emit\", handler, o, {\n      reverse: true\n    });\n    expect(broker.middlewares.wrapMethod).toHaveBeenCalledTimes(1);\n    expect(broker.middlewares.wrapMethod).toHaveBeenCalledWith(\"emit\", handler, o, {\n      reverse: true\n    });\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call middleware.callHandlers","suites":["Test wrapMethod, callMiddlewareHook & callMiddlewareHookSync methods"],"updatePoint":{"line":893,"column":41},"line":893,"code":"  it(\"should call middleware.callHandlers\", () => {\n    const broker = new ServiceBroker({\n      logger: false\n    });\n    broker.middlewares.callHandlers = jest.fn();\n    broker.callMiddlewareHook(\"started\", [1, 2, 3]);\n    expect(broker.middlewares.callHandlers).toHaveBeenCalledTimes(1);\n    expect(broker.middlewares.callHandlers).toHaveBeenCalledWith(\"started\", [1, 2, 3], undefined);\n    broker.middlewares.callHandlers.mockClear();\n    broker.callMiddlewareHook(\"started\", [1, 2, 3], {\n      reverse: true\n    });\n    expect(broker.middlewares.callHandlers).toHaveBeenCalledTimes(1);\n    expect(broker.middlewares.callHandlers).toHaveBeenCalledWith(\"started\", [1, 2, 3], {\n      reverse: true\n    });\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call middleware.callSyncHandlers","suites":["Test wrapMethod, callMiddlewareHook & callMiddlewareHookSync methods"],"updatePoint":{"line":910,"column":45},"line":910,"code":"  it(\"should call middleware.callSyncHandlers\", () => {\n    const broker = new ServiceBroker({\n      logger: false\n    });\n    broker.middlewares.callSyncHandlers = jest.fn();\n    broker.callMiddlewareHookSync(\"started\", [1, 2, 3]);\n    expect(broker.middlewares.callSyncHandlers).toHaveBeenCalledTimes(1);\n    expect(broker.middlewares.callSyncHandlers).toHaveBeenCalledWith(\"started\", [1, 2, 3], undefined);\n    broker.middlewares.callSyncHandlers.mockClear();\n    broker.callMiddlewareHookSync(\"started\", [1, 2, 3], {\n      reverse: true\n    });\n    expect(broker.middlewares.callSyncHandlers).toHaveBeenCalledTimes(1);\n    expect(broker.middlewares.callSyncHandlers).toHaveBeenCalledWith(\"started\", [1, 2, 3], {\n      reverse: true\n    });\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call metrics.isEnabled","suites":["Test isMetricsEnabled"],"updatePoint":{"line":929,"column":35},"line":929,"code":"  it(\"should call metrics.isEnabled\", () => {\n    const broker = new ServiceBroker({\n      logger: false\n    });\n    broker.metrics.isEnabled = jest.fn(() => true);\n    expect(broker.isMetricsEnabled()).toBe(true);\n    expect(broker.metrics.isEnabled).toHaveBeenCalledTimes(1);\n    expect(broker.metrics.isEnabled).toHaveBeenCalledWith();\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call tracer.isEnabled","suites":["Test isTracingEnabled"],"updatePoint":{"line":940,"column":34},"line":940,"code":"  it(\"should call tracer.isEnabled\", () => {\n    const broker = new ServiceBroker({\n      logger: false\n    });\n    broker.tracer.isEnabled = jest.fn(() => true);\n    expect(broker.isTracingEnabled()).toBe(true);\n    expect(broker.tracer.isEnabled).toHaveBeenCalledTimes(1);\n    expect(broker.tracer.isEnabled).toHaveBeenCalledWith();\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call loggerFactory with module name","suites":["Test broker.getLogger"],"updatePoint":{"line":955,"column":48},"line":955,"code":"  it(\"should call loggerFactory with module name\", () => {\n    broker.loggerFactory.getLogger = jest.fn();\n    broker.getLogger(\"svc-1\");\n    expect(broker.loggerFactory.getLogger).toHaveBeenCalledTimes(1);\n    expect(broker.loggerFactory.getLogger).toHaveBeenCalledWith({\n      mod: \"svc-1\",\n      nodeID: \"node-1234\",\n      ns: \"test-ns\"\n    });\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call loggerFactory with props","suites":["Test broker.getLogger"],"updatePoint":{"line":965,"column":42},"line":965,"code":"  it(\"should call loggerFactory with props\", () => {\n    broker.loggerFactory.getLogger = jest.fn();\n    broker.getLogger(\"svc-2\", {\n      ver: 2,\n      other: \"a\"\n    });\n    expect(broker.loggerFactory.getLogger).toHaveBeenCalledTimes(1);\n    expect(broker.loggerFactory.getLogger).toHaveBeenCalledWith({\n      mod: \"svc-2\",\n      nodeID: \"node-1234\",\n      ns: \"test-ns\",\n      ver: 2,\n      other: \"a\"\n    });\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should log the message to console & logger","suites":["Test broker.fatal"],"updatePoint":{"line":989,"column":48},"line":989,"code":"  it(\"should log the message to console & logger\", () => {\n    console.error.mockClear();\n    broker.fatal(\"Fatal error happened!\");\n    expect(broker.logger.fatal).toHaveBeenCalledTimes(1);\n    expect(broker.logger.fatal).toHaveBeenCalledWith(\"Fatal error happened!\", undefined);\n    expect(process.exit).toHaveBeenCalledTimes(1);\n    expect(process.exit).toHaveBeenCalledWith(1);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should log the message & error and doesn't call exit","suites":["Test broker.fatal"],"updatePoint":{"line":997,"column":58},"line":997,"code":"  it(\"should log the message & error and doesn't call exit\", () => {\n    broker.logger.fatal.mockClear();\n    console.error.mockClear();\n    process.exit.mockClear();\n    const err = new Error(\"Fatal\");\n    broker.fatal(\"Fatal error happened!\", err, false);\n    expect(broker.logger.fatal).toHaveBeenCalledTimes(1);\n    expect(broker.logger.fatal).toHaveBeenCalledWith(\"Fatal error happened!\", err);\n    expect(process.exit).toHaveBeenCalledTimes(0);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should load 5 services","suites":["Test loadServices"],"updatePoint":{"line":1013,"column":28},"line":1013,"code":"  it(\"should load 5 services\", () => {\n    let count = broker.loadServices(\"./test/services\");\n    expect(count).toBe(5);\n    expect(broker.loadService).toHaveBeenCalledTimes(5);\n    expect(broker.loadService).toHaveBeenCalledWith(\"test/services/users.service.js\");\n    expect(broker.loadService).toHaveBeenCalledWith(\"test/services/posts.service.js\");\n    expect(broker.loadService).toHaveBeenCalledWith(\"test/services/math.service.js\");\n    expect(broker.loadService).toHaveBeenCalledWith(\"test/services/utils/util.service.js\");\n    expect(broker.loadService).toHaveBeenCalledWith(\"test/services/greeter.es6.service.js\");\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should load 1 services","suites":["Test loadServices"],"updatePoint":{"line":1023,"column":28},"line":1023,"code":"  it(\"should load 1 services\", () => {\n    broker.loadService.mockClear();\n    let count = broker.loadServices(\"./test/services\", \"users.*.js\");\n    expect(count).toBe(1);\n    expect(broker.loadService).toHaveBeenCalledTimes(1);\n    expect(broker.loadService).toHaveBeenCalledWith(\"test/services/users.service.js\");\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should load 0 services","suites":["Test loadServices"],"updatePoint":{"line":1030,"column":28},"line":1030,"code":"  it(\"should load 0 services\", () => {\n    broker.loadService.mockClear();\n    let count = broker.loadServices();\n    expect(count).toBe(0);\n    expect(broker.loadService).toHaveBeenCalledTimes(0);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should load selected services","suites":["Test loadServices"],"updatePoint":{"line":1036,"column":35},"line":1036,"code":"  it(\"should load selected services\", () => {\n    broker.loadService.mockClear();\n    let count = broker.loadServices(\"./test/services\", [\"users.service\", \"math.service\"]);\n    expect(count).toBe(2);\n    expect(broker.loadService).toHaveBeenCalledTimes(2);\n    expect(broker.loadService).toHaveBeenCalledWith(path.join(\"test\", \"services\", \"users.service\"));\n    expect(broker.loadService).toHaveBeenCalledWith(path.join(\"test\", \"services\", \"math.service\"));\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should load service from schema","suites":["Test broker.loadService"],"updatePoint":{"line":1052,"column":37},"line":1052,"code":"  it(\"should load service from schema\", () => {\n    // Load schema\n    let service = broker.loadService(\"./test/services/math.service.js\");\n    expect(service).toBeDefined();\n    expect(service.__filename).toBeDefined();\n    expect(broker.createService).toHaveBeenCalledTimes(1);\n    expect(broker._restartService).toHaveBeenCalledTimes(0);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call function which returns Service instance","suites":["Test broker.loadService"],"updatePoint":{"line":1060,"column":57},"line":1060,"code":"  it(\"should call function which returns Service instance\", () => {\n    broker.createService.mockClear();\n\n    broker._restartService.mockClear();\n\n    let service = broker.loadService(\"./test/services/users.service.js\");\n    expect(service).toBeInstanceOf(broker.ServiceFactory);\n    expect(broker.createService).toHaveBeenCalledTimes(0);\n    expect(broker._restartService).toHaveBeenCalledTimes(0);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call function which returns schema","suites":["Test broker.loadService"],"updatePoint":{"line":1070,"column":47},"line":1070,"code":"  it(\"should call function which returns schema\", () => {\n    broker.createService.mockClear();\n\n    broker._restartService.mockClear();\n\n    let service = broker.loadService(\"./test/services/posts.service.js\");\n    expect(service).toBeDefined();\n    expect(broker.createService).toHaveBeenCalledTimes(1);\n    expect(broker._restartService).toHaveBeenCalledTimes(0);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should load ES6 class","suites":["Test broker.loadService"],"updatePoint":{"line":1080,"column":27},"line":1080,"code":"  it(\"should load ES6 class\", () => {\n    broker.createService.mockClear();\n\n    broker._restartService.mockClear();\n\n    let service = broker.loadService(\"./test/services/greeter.es6.service.js\");\n    expect(service).toBeDefined();\n    expect(broker.createService).toHaveBeenCalledTimes(0);\n    expect(broker._restartService).toHaveBeenCalledTimes(0);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should broadcast error when loading service","suites":["Test broker.loadService"],"updatePoint":{"line":1090,"column":49},"line":1090,"code":"  it(\"should broadcast error when loading service\", () => {\n    broker.broadcastLocal = jest.fn();\n    jest.spyOn(broker, \"normalizeSchemaConstructor\").mockImplementation(() => {\n      throw new Error(\"Ups!\");\n    });\n    expect(() => {\n      broker.loadService(\"./test/services/math.service.js\");\n    }).toThrow();\n    expect(broker.broadcastLocal).toHaveBeenCalledTimes(1);\n    expect(broker.broadcastLocal).toHaveBeenCalledWith(\"$broker.error\", {\n      error: new Error(\"Ups!\"),\n      module: \"broker\",\n      type: C.FAILED_LOAD_SERVICE\n    });\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should load service from schema","suites":["Test broker.loadService after broker started"],"updatePoint":{"line":1115,"column":37},"line":1115,"code":"  it(\"should load service from schema\", () => {\n    // Load schema\n    let service = broker.loadService(\"./test/services/math.service.js\");\n    expect(service).toBeDefined();\n    expect(service.__filename).toBeDefined();\n    expect(broker.createService).toHaveBeenCalledTimes(1);\n    expect(broker._restartService).toHaveBeenCalledTimes(0);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call function which returns Service instance","suites":["Test broker.loadService after broker started"],"updatePoint":{"line":1123,"column":57},"line":1123,"code":"  it(\"should call function which returns Service instance\", () => {\n    broker.createService.mockClear();\n\n    broker._restartService.mockClear();\n\n    let service = broker.loadService(\"./test/services/users.service.js\");\n    expect(service).toBeInstanceOf(broker.ServiceFactory);\n    expect(broker.createService).toHaveBeenCalledTimes(0);\n    expect(broker._restartService).toHaveBeenCalledTimes(1);\n    expect(broker._restartService).toHaveBeenCalledWith(service);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call function which returns schema","suites":["Test broker.loadService after broker started"],"updatePoint":{"line":1134,"column":47},"line":1134,"code":"  it(\"should call function which returns schema\", () => {\n    broker.createService.mockClear();\n\n    broker._restartService.mockClear();\n\n    let service = broker.loadService(\"./test/services/posts.service.js\");\n    expect(service).toBeDefined();\n    expect(broker.createService).toHaveBeenCalledTimes(1);\n    expect(broker._restartService).toHaveBeenCalledTimes(0);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should load ES6 class","suites":["Test broker.loadService after broker started"],"updatePoint":{"line":1144,"column":27},"line":1144,"code":"  it(\"should load ES6 class\", () => {\n    broker.createService.mockClear();\n\n    broker._restartService.mockClear();\n\n    let service = broker.loadService(\"./test/services/greeter.es6.service.js\");\n    expect(service).toBeDefined();\n    expect(broker.createService).toHaveBeenCalledTimes(0);\n    expect(broker._restartService).toHaveBeenCalledTimes(1);\n    expect(broker._restartService).toHaveBeenCalledWith(service);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should load math service","suites":["Test broker.createService"],"updatePoint":{"line":1162,"column":30},"line":1162,"code":"  it(\"should load math service\", () => {\n    let schema = {\n      name: \"test\",\n      actions: {\n        empty() {}\n\n      }\n    };\n    let service = broker.createService(schema);\n    expect(service).toBe(schema);\n    expect(broker.ServiceFactory).toHaveBeenCalledTimes(1);\n    expect(broker.ServiceFactory).toHaveBeenCalledWith(broker, schema);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call mergeSchema if give schema mods param","suites":["Test broker.createService"],"updatePoint":{"line":1175,"column":55},"line":1175,"code":"  it(\"should call mergeSchema if give schema mods param\", () => {\n    broker.ServiceFactory.mergeSchemas = jest.fn(s1 => s1);\n    let schema = {\n      name: \"test\",\n      actions: {\n        empty() {}\n\n      }\n    };\n    let mods = {\n      name: \"other\",\n      version: 2\n    };\n    broker.createService(schema, mods);\n    expect(broker.ServiceFactory.mergeSchemas).toHaveBeenCalledTimes(1);\n    expect(broker.ServiceFactory.mergeSchemas).toHaveBeenCalledWith(schema, mods);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should load es6 class service","suites":["Test broker.createService"],"updatePoint":{"line":1192,"column":35},"line":1192,"code":"  it(\"should load es6 class service\", () => {\n    const es6Service = require(\"../services/greeter.es6.service\");\n\n    es6Service.prototype.parseServiceSchema = jest.fn();\n    Object.setPrototypeOf(es6Service, broker.ServiceFactory);\n    let service = broker.createService(es6Service);\n    expect(service).toBeInstanceOf(es6Service);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should broadcast an error when restarting","suites":["Test broker.__restartService"],"updatePoint":{"line":1218,"column":47},"line":1218,"code":"  it(\"should broadcast an error when restarting\", async () => {\n    broker.broadcastLocal = jest.fn();\n    await broker._restartService(service);\n    expect(broker.broadcastLocal).toHaveBeenCalledTimes(1);\n    expect(broker.broadcastLocal).toHaveBeenCalledWith(\"$broker.error\", {\n      error: new Error(\"Ups!\"),\n      module: \"broker\",\n      type: C.FAILED_RESTART_SERVICE\n    });\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should add service to local services list","suites":["Test broker.addLocalService"],"updatePoint":{"line":1235,"column":47},"line":1235,"code":"  it(\"should add service to local services list\", () => {\n    let svc = {\n      name: \"test\"\n    };\n    expect(broker.services.length).toBe(0);\n    broker.addLocalService(svc);\n    expect(broker.services.length).toBe(1);\n    expect(broker.services[0]).toBe(svc);\n    expect(broker.metrics.set).toHaveBeenCalledTimes(1);\n    expect(broker.metrics.set).toHaveBeenCalledWith(\"moleculer.broker.local.services.total\", 1);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call registry.registerLocalService","suites":["Test broker.registerLocalService"],"updatePoint":{"line":1252,"column":47},"line":1252,"code":"  it(\"should call registry.registerLocalService\", () => {\n    let svc = {\n      name: \"test\"\n    };\n    broker.registry.registerLocalService = jest.fn();\n    broker.registerLocalService(svc);\n    expect(broker.registry.registerLocalService).toHaveBeenCalledTimes(1);\n    expect(broker.registry.registerLocalService).toHaveBeenCalledWith(svc);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should destroy service","suites":["Test broker.destroyService","For not versioned services"],"updatePoint":{"line":1284,"column":30},"line":1284,"code":"    it(\"should destroy service\", () => {\n      broker.registry.unregisterService = jest.fn();\n      broker.servicesChanged = jest.fn();\n      broker.metrics.set.mockClear();\n      expect(broker.services.length).toBe(1);\n      return broker.destroyService(service).catch(protectReject).then(() => {\n        expect(stopped).toHaveBeenCalledTimes(1);\n        expect(broker.getLocalService).toHaveBeenCalledTimes(0);\n        expect(broker.registry.unregisterService).toHaveBeenCalledTimes(1);\n        expect(broker.registry.unregisterService).toHaveBeenCalledWith(\"greeter\", \"node-1234\");\n        expect(broker.servicesChanged).toHaveBeenCalledTimes(1);\n        expect(broker.servicesChanged).toHaveBeenCalledWith(true);\n        expect(broker.services.length).toBe(0);\n        expect(broker.metrics.set).toHaveBeenCalledTimes(1);\n        expect(broker.metrics.set).toHaveBeenCalledWith(\"moleculer.broker.local.services.total\", 0);\n      });\n    });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should find service by name","suites":["Test broker.destroyService","For not versioned services"],"updatePoint":{"line":1301,"column":35},"line":1301,"code":"    it(\"should find service by name\", () => {\n      broker.createService(schema);\n      broker.registry.unregisterService.mockClear();\n      broker.servicesChanged.mockClear();\n      broker.metrics.set.mockClear();\n      broker.getLocalService.mockClear();\n      schema.stopped.mockClear();\n      expect(broker.services.length).toBe(1);\n      return broker.destroyService(\"greeter\").catch(protectReject).then(() => {\n        expect(stopped).toHaveBeenCalledTimes(1);\n        expect(broker.getLocalService).toHaveBeenCalledTimes(1);\n        expect(broker.getLocalService).toHaveBeenCalledWith(\"greeter\");\n        expect(broker.registry.unregisterService).toHaveBeenCalledTimes(1);\n        expect(broker.registry.unregisterService).toHaveBeenCalledWith(\"greeter\", \"node-1234\");\n        expect(broker.servicesChanged).toHaveBeenCalledTimes(1);\n        expect(broker.servicesChanged).toHaveBeenCalledWith(true);\n        expect(broker.services.length).toBe(0);\n        expect(broker.metrics.set).toHaveBeenCalledTimes(1);\n        expect(broker.metrics.set).toHaveBeenCalledWith(\"moleculer.broker.local.services.total\", 0);\n      });\n    });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should broadcast error while destroying service","suites":["Test broker.destroyService","For not versioned services"],"updatePoint":{"line":1322,"column":55},"line":1322,"code":"    it(\"should broadcast error while destroying service\", async () => {\n      broker.broadcastLocal = jest.fn();\n      jest.spyOn(service, \"_stop\").mockImplementation(() => {\n        throw new Error(\"Ups!\");\n      });\n      await broker.destroyService(service);\n      expect(broker.broadcastLocal).toHaveBeenCalledTimes(1);\n      expect(broker.broadcastLocal).toHaveBeenCalledWith(\"$broker.error\", {\n        error: new Error(\"Ups!\"),\n        module: \"broker\",\n        type: C.FAILED_DESTRUCTION_SERVICE\n      });\n    });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should destroy service by providing service instance","suites":["Test broker.destroyService","For versioned services"],"updatePoint":{"line":1358,"column":60},"line":1358,"code":"    it(\"should destroy service by providing service instance\", () => {\n      broker.registry.unregisterService = jest.fn();\n      broker.servicesChanged = jest.fn();\n      broker.metrics.set.mockClear();\n      expect(broker.services.length).toBe(1);\n      return broker.destroyService(service).catch(protectReject).then(() => {\n        expect(stopped).toHaveBeenCalledTimes(1);\n        expect(broker.getLocalService).toHaveBeenCalledTimes(0);\n        expect(broker.registry.unregisterService).toHaveBeenCalledTimes(1);\n        expect(broker.registry.unregisterService).toHaveBeenCalledWith(\"v2.greeter\", \"node-1234\");\n        expect(broker.servicesChanged).toHaveBeenCalledTimes(1);\n        expect(broker.servicesChanged).toHaveBeenCalledWith(true);\n        expect(broker.services.length).toBe(0);\n        expect(broker.metrics.set).toHaveBeenCalledTimes(1);\n        expect(broker.metrics.set).toHaveBeenCalledWith(\"moleculer.broker.local.services.total\", 0);\n      });\n    });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should destroy service by providing full service name","suites":["Test broker.destroyService","For versioned services"],"updatePoint":{"line":1375,"column":61},"line":1375,"code":"    it(\"should destroy service by providing full service name\", () => {\n      broker.createService(schema);\n      broker.registry.unregisterService.mockClear();\n      broker.servicesChanged.mockClear();\n      broker.metrics.set.mockClear();\n      broker.getLocalService.mockClear();\n      schema.stopped.mockClear();\n      expect(broker.services.length).toBe(1);\n      return broker.destroyService(\"v2.greeter\").catch(protectReject).then(() => {\n        expect(stopped).toHaveBeenCalledTimes(1);\n        expect(broker.getLocalService).toHaveBeenCalledTimes(1);\n        expect(broker.getLocalService).toHaveBeenCalledWith(\"v2.greeter\");\n        expect(broker.registry.unregisterService).toHaveBeenCalledTimes(1);\n        expect(broker.registry.unregisterService).toHaveBeenCalledWith(\"v2.greeter\", \"node-1234\");\n        expect(broker.servicesChanged).toHaveBeenCalledTimes(1);\n        expect(broker.servicesChanged).toHaveBeenCalledWith(true);\n        expect(broker.services.length).toBe(0);\n        expect(broker.metrics.set).toHaveBeenCalledTimes(1);\n        expect(broker.metrics.set).toHaveBeenCalledWith(\"moleculer.broker.local.services.total\", 0);\n      });\n    });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should NOT find service by string name","suites":["Test broker.destroyService","For versioned services"],"updatePoint":{"line":1396,"column":46},"line":1396,"code":"    it(\"should NOT find service by string name\", () => {\n      broker.createService(schema);\n      return broker.destroyService(\"greeter\").catch(err => {\n        expect(err).toBeInstanceOf(ServiceNotFoundError);\n        expect(err.message).toBe(\"Service 'greeter' not found.\"); // remove service for next tests\n\n        return broker.destroyService(\"v2.greeter\");\n      });\n    });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should NOT find service by object with name","suites":["Test broker.destroyService","For versioned services"],"updatePoint":{"line":1405,"column":51},"line":1405,"code":"    it(\"should NOT find service by object with name\", () => {\n      broker.createService(schema);\n      return broker.destroyService({\n        name: \"greeter\"\n      }).catch(err => {\n        expect(err).toBeInstanceOf(ServiceNotFoundError);\n        expect(err.message).toBe(\"Service 'greeter' not found.\"); // remove service for next tests\n\n        return broker.destroyService({\n          name: \"greeter\",\n          version: 2\n        });\n      });\n    });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should NOT find service by object with name","suites":["Test broker.destroyService","For versioned services"],"updatePoint":{"line":1419,"column":51},"line":1419,"code":"    it(\"should NOT find service by object with name\", () => {\n      broker.createService(schema);\n      return broker.destroyService({\n        name: \"greeter\",\n        version: 123\n      }).catch(err => {\n        expect(err).toBeInstanceOf(ServiceNotFoundError);\n        expect(err.message).toBe(\"Service '123.greeter' not found.\"); // remove service for next tests\n\n        return broker.destroyService({\n          name: \"greeter\",\n          version: 2\n        });\n      });\n    });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call broadcastLocal without transit.sendNodeInfo because remote changes","suites":["Test broker.servicesChanged"],"updatePoint":{"line":1445,"column":84},"line":1445,"code":"  it(\"should call broadcastLocal without transit.sendNodeInfo because remote changes\", () => {\n    broker.broadcastLocal.mockClear();\n    broker.registry.discoverer.sendLocalNodeInfo.mockClear();\n    broker.servicesChanged(false);\n    expect(broker.broadcastLocal).toHaveBeenCalledTimes(1);\n    expect(broker.broadcastLocal).toHaveBeenCalledWith(\"$services.changed\", {\n      localService: false\n    });\n    expect(broker.registry.discoverer.sendLocalNodeInfo).toHaveBeenCalledTimes(0);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call broadcastLocal & transit.sendNodeInfo","suites":["Test broker.servicesChanged"],"updatePoint":{"line":1455,"column":55},"line":1455,"code":"  it(\"should call broadcastLocal & transit.sendNodeInfo\", () => {\n    broker.broadcastLocal.mockClear();\n    broker.registry.discoverer.sendLocalNodeInfo.mockClear();\n    broker.servicesChanged(true);\n    expect(broker.broadcastLocal).toHaveBeenCalledTimes(1);\n    expect(broker.broadcastLocal).toHaveBeenCalledWith(\"$services.changed\", {\n      localService: true\n    });\n    expect(broker.registry.discoverer.sendLocalNodeInfo).toHaveBeenCalledTimes(1);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should register internal action","suites":["Test broker.registerInternalServices"],"updatePoint":{"line":1467,"column":37},"line":1467,"code":"  it(\"should register internal action\", () => {\n    let broker = new ServiceBroker({\n      logger: false,\n      internalServices: false\n    });\n    broker.createService = jest.fn();\n    broker.registerInternalServices();\n    expect(broker.createService).toHaveBeenCalledTimes(1);\n    expect(broker.createService).toHaveBeenCalledWith({\n      name: \"$node\",\n      actions: {\n        list: expect.any(Object),\n        services: expect.any(Object),\n        actions: expect.any(Object),\n        events: expect.any(Object),\n        health: expect.any(Object),\n        options: expect.any(Object),\n        metrics: expect.any(Object)\n      }\n    }, undefined);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should register internal action with mixins","suites":["Test broker.registerInternalServices"],"updatePoint":{"line":1488,"column":49},"line":1488,"code":"  it(\"should register internal action with mixins\", () => {\n    let broker = new ServiceBroker({\n      logger: false,\n      internalServices: false\n    });\n    broker.createService = jest.fn();\n    broker.registerInternalServices({\n      $node: {\n        metadata: {\n          a: 5\n        }\n      }\n    });\n    expect(broker.createService).toHaveBeenCalledTimes(1);\n    expect(broker.createService).toHaveBeenCalledWith({\n      name: \"$node\",\n      actions: {\n        list: expect.any(Object),\n        services: expect.any(Object),\n        actions: expect.any(Object),\n        events: expect.any(Object),\n        health: expect.any(Object),\n        options: expect.any(Object),\n        metrics: expect.any(Object)\n      }\n    }, {\n      metadata: {\n        a: 5\n      }\n    });\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should find the service by name","suites":["Test broker.getLocalService","without version"],"updatePoint":{"line":1528,"column":39},"line":1528,"code":"    it(\"should find the service by name\", () => {\n      expect(broker.getLocalService(\"posts\")).toBe(service);\n      expect(broker.getLocalService(\"other\")).toBeUndefined();\n    });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should not find the service by name","suites":["Test broker.getLocalService","with version"],"updatePoint":{"line":1545,"column":43},"line":1545,"code":"    it(\"should not find the service by name\", () => {\n      expect(broker.getLocalService(\"posts\")).toBeUndefined();\n    });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should find the service by full name","suites":["Test broker.getLocalService","with version"],"updatePoint":{"line":1548,"column":44},"line":1548,"code":"    it(\"should find the service by full name\", () => {\n      expect(broker.getLocalService(\"v2.posts\")).toBe(service2);\n    });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should find the service by obj","suites":["Test broker.getLocalService","with version"],"updatePoint":{"line":1551,"column":38},"line":1551,"code":"    it(\"should find the service by obj\", () => {\n      expect(broker.getLocalService({\n        name: \"posts\"\n      })).toBeUndefined();\n      expect(broker.getLocalService({\n        name: \"posts\",\n        version: 1\n      })).toBe(service1);\n      expect(broker.getLocalService({\n        name: \"posts\",\n        version: 2\n      })).toBe(service2);\n    });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should find the service by name & version (deprecated)","suites":["Test broker.getLocalService","with version"],"updatePoint":{"line":1564,"column":62},"line":1564,"code":"    it(\"should find the service by name & version (deprecated)\", () => {\n      expect(broker.getLocalService(\"posts\", 2)).toBe(service2);\n      expect(broker.getLocalService(\"posts\", 1)).toBe(service1);\n    });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should wait service","suites":["Test broker.waitForServices"],"updatePoint":{"line":1579,"column":25},"line":1579,"code":"  it(\"should wait service\", () => {\n    res = false;\n    broker.registry.hasService.mockClear();\n    let p = broker.waitForServices(\"posts\", 10 * 1000, 100).catch(protectReject).then(result => {\n      expect(result).toEqual({\n        services: [\"posts\"],\n        statuses: [{\n          name: \"posts\",\n          available: true\n        }]\n      });\n      expect(broker.registry.hasService).toHaveBeenCalledTimes(6);\n      expect(broker.registry.hasService).toHaveBeenLastCalledWith(\"posts\");\n    });\n    clock.tick(450);\n    res = true;\n    clock.tick(150);\n    return p;\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should wait for service when service is passed as an array of string","suites":["Test broker.waitForServices"],"updatePoint":{"line":1598,"column":74},"line":1598,"code":"  it(\"should wait for service when service is passed as an array of string\", () => {\n    res = false;\n    broker.registry.hasService.mockClear();\n    let p = broker.waitForServices([\"posts\"], 10 * 1000, 100).catch(protectReject).then(result => {\n      expect(result).toEqual({\n        services: [\"posts\"],\n        statuses: [{\n          name: \"posts\",\n          available: true\n        }]\n      });\n      expect(broker.registry.hasService).toHaveBeenCalledTimes(6);\n      expect(broker.registry.hasService).toHaveBeenLastCalledWith(\"posts\");\n    });\n    clock.tick(450);\n    res = true;\n    clock.tick(150);\n    return p;\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should wait for service when service is passed as an array of object","suites":["Test broker.waitForServices"],"updatePoint":{"line":1617,"column":74},"line":1617,"code":"  it(\"should wait for service when service is passed as an array of object\", () => {\n    res = false;\n    broker.registry.hasService.mockClear();\n    let p = broker.waitForServices([{\n      name: \"posts\"\n    }], 10 * 1000, 100).catch(protectReject).then(result => {\n      expect(result).toEqual({\n        services: [\"posts\"],\n        statuses: [{\n          name: \"posts\",\n          available: true\n        }]\n      });\n      expect(broker.registry.hasService).toHaveBeenCalledTimes(6);\n      expect(broker.registry.hasService).toHaveBeenLastCalledWith(\"posts\");\n    });\n    clock.tick(450);\n    res = true;\n    clock.tick(150);\n    return p;\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should wait for service when service is passed as an object","suites":["Test broker.waitForServices"],"updatePoint":{"line":1638,"column":65},"line":1638,"code":"  it(\"should wait for service when service is passed as an object\", () => {\n    res = false;\n    broker.registry.hasService.mockClear();\n    let p = broker.waitForServices({\n      name: \"posts\"\n    }, 10 * 1000, 100).catch(protectReject).then(result => {\n      expect(result).toEqual({\n        services: [\"posts\"],\n        statuses: [{\n          name: \"posts\",\n          available: true\n        }]\n      });\n      expect(broker.registry.hasService).toHaveBeenCalledTimes(6);\n      expect(broker.registry.hasService).toHaveBeenLastCalledWith(\"posts\");\n    });\n    clock.tick(450);\n    res = true;\n    clock.tick(150);\n    return p;\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should wait for service when service is passed as an array of object with version","suites":["Test broker.waitForServices"],"updatePoint":{"line":1659,"column":87},"line":1659,"code":"  it(\"should wait for service when service is passed as an array of object with version\", () => {\n    res = false;\n    broker.registry.hasService.mockClear();\n    let p = broker.waitForServices([{\n      name: \"posts\",\n      version: 1\n    }], 10 * 1000, 100).catch(protectReject).then(result => {\n      expect(result).toEqual({\n        services: [\"v1.posts\"],\n        statuses: [{\n          name: \"v1.posts\",\n          available: true\n        }]\n      });\n      expect(broker.registry.hasService).toHaveBeenCalledTimes(6);\n      expect(broker.registry.hasService).toHaveBeenLastCalledWith(\"v1.posts\");\n    });\n    clock.tick(450);\n    res = true;\n    clock.tick(150);\n    return p;\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should wait for service when service is passed as an array of object with version and unrelated property","suites":["Test broker.waitForServices"],"updatePoint":{"line":1681,"column":110},"line":1681,"code":"  it(\"should wait for service when service is passed as an array of object with version and unrelated property\", () => {\n    res = false;\n    broker.registry.hasService.mockClear();\n    let p = broker.waitForServices([{\n      name: \"posts\",\n      version: 1,\n      meta: true\n    }], 10 * 1000, 100).catch(protectReject).then(result => {\n      expect(result).toEqual({\n        services: [\"v1.posts\"],\n        statuses: [{\n          name: \"v1.posts\",\n          available: true\n        }]\n      });\n      expect(broker.registry.hasService).toHaveBeenCalledTimes(6);\n      expect(broker.registry.hasService).toHaveBeenLastCalledWith(\"v1.posts\");\n    });\n    clock.tick(450);\n    res = true;\n    clock.tick(150);\n    return p;\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should wait for service when service is passed as a versioned string","suites":["Test broker.waitForServices"],"updatePoint":{"line":1704,"column":74},"line":1704,"code":"  it(\"should wait for service when service is passed as a versioned string\", () => {\n    res = false;\n    broker.registry.hasService.mockClear();\n    let p = broker.waitForServices(\"v1.posts\", 10 * 1000, 100).catch(protectReject).then(result => {\n      expect(result).toEqual({\n        services: [\"v1.posts\"],\n        statuses: [{\n          name: \"v1.posts\",\n          available: true\n        }]\n      });\n      expect(broker.registry.hasService).toHaveBeenCalledTimes(6);\n      expect(broker.registry.hasService).toHaveBeenLastCalledWith(\"v1.posts\");\n    });\n    clock.tick(450);\n    res = true;\n    clock.tick(150);\n    return p;\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should wait for service when service is passed as an array of versioned strings","suites":["Test broker.waitForServices"],"updatePoint":{"line":1723,"column":85},"line":1723,"code":"  it(\"should wait for service when service is passed as an array of versioned strings\", () => {\n    res = false;\n    broker.registry.hasService.mockClear();\n    let p = broker.waitForServices([\"v1.posts\"], 10 * 1000, 100).catch(protectReject).then(result => {\n      expect(result).toEqual({\n        services: [\"v1.posts\"],\n        statuses: [{\n          name: \"v1.posts\",\n          available: true\n        }]\n      });\n      expect(broker.registry.hasService).toHaveBeenCalledTimes(6);\n      expect(broker.registry.hasService).toHaveBeenLastCalledWith(\"v1.posts\");\n    });\n    clock.tick(450);\n    res = true;\n    clock.tick(150);\n    return p;\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should skip duplicated services","suites":["Test broker.waitForServices"],"updatePoint":{"line":1742,"column":37},"line":1742,"code":"  it(\"should skip duplicated services\", () => {\n    res = false;\n    broker.registry.hasService.mockClear();\n    let p = broker.waitForServices([\"v2.posts\", \"users\", {\n      name: \"posts\",\n      version: 2\n    }], 10 * 1000, 100).catch(protectReject).then(result => {\n      expect(result).toEqual({\n        services: [\"v2.posts\", \"users\"],\n        statuses: [{\n          name: \"v2.posts\",\n          available: true\n        }, {\n          name: \"users\",\n          available: true\n        }]\n      });\n      expect(broker.registry.hasService).toHaveBeenCalledTimes(12);\n      expect(broker.registry.hasService).toHaveBeenCalledWith(\"v2.posts\");\n      expect(broker.registry.hasService).toHaveBeenCalledWith(\"users\");\n    });\n    clock.tick(450);\n    res = true;\n    clock.tick(150);\n    return p;\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should not wait for service when service is passed as an array of object without name","suites":["Test broker.waitForServices"],"updatePoint":{"line":1768,"column":91},"line":1768,"code":"  it(\"should not wait for service when service is passed as an array of object without name\", () => {\n    res = false;\n    broker.registry.hasService.mockClear();\n    let p = broker.waitForServices([{\n      svcName: \"posts\",\n      version: 1,\n      meta: true\n    }], 10 * 1000, 100).catch(protectReject).then(() => {\n      expect(broker.registry.hasService).toHaveBeenCalledTimes(0);\n    });\n    clock.tick(450);\n    res = true;\n    clock.tick(150);\n    return p;\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should not wait for service when passed an empty array","suites":["Test broker.waitForServices"],"updatePoint":{"line":1783,"column":60},"line":1783,"code":"  it(\"should not wait for service when passed an empty array\", () => {\n    res = false;\n    broker.registry.hasService.mockClear();\n    let p = broker.waitForServices([], 10 * 1000, 100).catch(protectReject).then(() => {\n      expect(broker.registry.hasService).toHaveBeenCalledTimes(0);\n    });\n    clock.tick(450);\n    res = true;\n    clock.tick(150);\n    return p;\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should reject if timed out","suites":["Test broker.waitForServices"],"updatePoint":{"line":1794,"column":32},"line":1794,"code":"  it(\"should reject if timed out\", () => {\n    res = false;\n    broker.registry.hasService.mockClear();\n    let p = broker.waitForServices(\"posts\", 300, 100).then(protectReject).catch(err => {\n      expect(err).toBeInstanceOf(MoleculerError);\n      expect(err.data).toEqual({\n        services: [\"posts\"],\n        statuses: [{\n          name: \"posts\",\n          available: false\n        }]\n      });\n    });\n    clock.tick(450);\n    res = true;\n    clock.tick(150);\n    return p;\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call waitForServices with dependencyInterval from settings","suites":["Test waitForServices using dependencyInterval from options"],"updatePoint":{"line":1814,"column":71},"line":1814,"code":"  it(\"should call waitForServices with dependencyInterval from settings\", async () => {\n    let broker = new ServiceBroker({\n      logger: false,\n      dependencyInterval: 100\n    });\n    jest.spyOn(broker, \"createService\");\n    jest.spyOn(broker, \"waitForServices\");\n    let services = [{\n      name: \"users\"\n    }, {\n      name: \"auth\"\n    }, {\n      name: \"posts\",\n      dependencies: [\"users\", \"auth\"]\n    }].map(svc => broker.createService(svc));\n    await broker.start();\n    expect(broker.createService).toHaveBeenCalledTimes(3);\n    expect(broker.waitForServices).toHaveBeenCalledTimes(1);\n    expect(broker.waitForServices).toHaveBeenLastCalledWith([\"users\", \"auth\"], 0, 100, broker.logger);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should start fast despite multiple levels of dependencies","suites":["Test waitForServices using dependencyInterval from options"],"updatePoint":{"line":1834,"column":63},"line":1834,"code":"  it(\"should start fast despite multiple levels of dependencies\", async () => {\n    let broker = new ServiceBroker({\n      logger: false,\n      dependencyInterval: 10\n    });\n    jest.spyOn(broker, \"createService\");\n    jest.spyOn(broker, \"waitForServices\"); // create multiple levels of dependencies, starting to \"max level\" and down to 1\n    // each level has to wait for the previous one\n    // 10 levels ensure a test timeout if dependencyInterval is not set to a lower value\n\n    let nb_levels = 10;\n\n    for (let i = nb_levels; i > 0; i--) {\n      broker.createService({\n        name: `level_${i}`,\n        dependencies: i > 1 ? [`level_${i - 1}`] : null,\n        $dependencyTimeout: 1000\n      });\n    }\n\n    await broker.start();\n    expect(broker.createService).toHaveBeenCalledTimes(nb_levels);\n    expect(broker.waitForServices).toHaveBeenCalledTimes(nb_levels - 1);\n    expect(broker.waitForServices).toHaveBeenLastCalledWith([\"level_1\"], 0, broker.options.dependencyInterval, broker.logger);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should return actionName if it is not String","suites":["Test broker.findNextActionEndpoint"],"updatePoint":{"line":1880,"column":50},"line":1880,"code":"  it(\"should return actionName if it is not String\", () => {\n    let ep = {};\n    expect(broker.findNextActionEndpoint(ep, {})).toBe(ep);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should reject if no action","suites":["Test broker.findNextActionEndpoint"],"updatePoint":{"line":1884,"column":32},"line":1884,"code":"  it(\"should reject if no action\", () => {\n    const err = broker.findNextActionEndpoint(\"posts.noaction\");\n    expect(err).toBeDefined();\n    expect(err).toBeInstanceOf(ServiceNotFoundError);\n    expect(err.message).toBe(\"Service 'posts.noaction' is not found.\");\n    expect(err.data).toEqual({\n      action: \"posts.noaction\",\n      nodeID: undefined\n    });\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should reject if no handler","suites":["Test broker.findNextActionEndpoint"],"updatePoint":{"line":1894,"column":33},"line":1894,"code":"  it(\"should reject if no handler\", () => {\n    broker.registry.unregisterAction({\n      id: broker.nodeID\n    }, \"posts.noHandler\");\n    const err = broker.findNextActionEndpoint(\"posts.noHandler\");\n    expect(err).toBeDefined();\n    expect(err).toBeInstanceOf(ServiceNotAvailableError);\n    expect(err.message).toBe(\"Service 'posts.noHandler' is not available.\");\n    expect(err.data).toEqual({\n      action: \"posts.noHandler\",\n      nodeID: undefined\n    });\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should reject if no action on node","suites":["Test broker.findNextActionEndpoint"],"updatePoint":{"line":1907,"column":40},"line":1907,"code":"  it(\"should reject if no action on node\", () => {\n    const err = broker.findNextActionEndpoint(\"posts.noHandler\", {\n      nodeID: \"node-123\"\n    });\n    expect(err).toBeDefined();\n    expect(err).toBeInstanceOf(ServiceNotFoundError);\n    expect(err.message).toBe(\"Service 'posts.noHandler' is not found on 'node-123' node.\");\n    expect(err.data).toEqual({\n      action: \"posts.noHandler\",\n      nodeID: \"node-123\"\n    });\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should find the endpoint with nodeID","suites":["Test broker.findNextActionEndpoint"],"updatePoint":{"line":1919,"column":42},"line":1919,"code":"  it(\"should find the endpoint with nodeID\", () => {\n    let ep = broker.findNextActionEndpoint(\"posts.find\", {\n      nodeID: broker.nodeID\n    });\n    expect(ep).toBeDefined();\n    expect(ep.action).toBeDefined();\n    expect(ep.id).toBe(broker.nodeID);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should find the endpoint","suites":["Test broker.findNextActionEndpoint"],"updatePoint":{"line":1927,"column":30},"line":1927,"code":"  it(\"should find the endpoint\", () => {\n    let ep = broker.findNextActionEndpoint(\"posts.find\");\n    expect(ep).toBeDefined();\n    expect(ep.action).toBeDefined();\n    expect(ep.id).toBe(broker.nodeID);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should default params on context to empty object if undefined","suites":["Test broker.call"],"updatePoint":{"line":1957,"column":67},"line":1957,"code":"  it(\"should default params on context to empty object if undefined\", () => {\n    let context = {\n      action,\n      endpoint: ep,\n      setEndpoint: jest.fn()\n    };\n    broker.ContextFactory.create = jest.fn(() => context);\n    let p = broker.call(\"posts.find\");\n    return p.catch(protectReject).then(() => {\n      expect(broker.ContextFactory.create).toHaveBeenCalledWith(broker, null, {}, {});\n      context.setEndpoint.mockClear();\n    });\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should set params on context to passed in value","suites":["Test broker.call"],"updatePoint":{"line":1970,"column":53},"line":1970,"code":"  it(\"should set params on context to passed in value\", () => {\n    let context = {\n      action,\n      endpoint: ep,\n      setEndpoint: jest.fn()\n    };\n    broker.ContextFactory.create = jest.fn(() => context);\n    let params = {\n      userId: \"userId-value\"\n    };\n    let p = broker.call(\"posts.find\", params);\n    return p.catch(protectReject).then(() => {\n      expect(broker.ContextFactory.create).toHaveBeenCalledWith(broker, null, params, {});\n      context.setEndpoint.mockClear();\n    });\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should set params on context to null if passed in value is null","suites":["Test broker.call"],"updatePoint":{"line":1986,"column":69},"line":1986,"code":"  it(\"should set params on context to null if passed in value is null\", () => {\n    let context = {\n      action,\n      endpoint: ep,\n      setEndpoint: jest.fn()\n    };\n    broker.ContextFactory.create = jest.fn(() => context);\n    let p = broker.call(\"posts.find\", null);\n    return p.catch(protectReject).then(() => {\n      expect(broker.ContextFactory.create).toHaveBeenCalledWith(broker, null, null, {});\n      context.setEndpoint.mockClear();\n    });\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should create new Context & call handler","suites":["Test broker.call"],"updatePoint":{"line":1999,"column":46},"line":1999,"code":"  it(\"should create new Context & call handler\", () => {\n    action.handler.mockClear();\n    broker.ContextFactory.create.mockClear();\n    broker.findNextActionEndpoint.mockClear();\n    let context = {\n      action,\n      endpoint: ep,\n      setEndpoint: jest.fn()\n    };\n    broker.ContextFactory.create = jest.fn(() => context);\n    let p = broker.call(\"posts.find\");\n    return p.catch(protectReject).then(ctx => {\n      expect(ctx).toBe(context);\n      expect(broker.ContextFactory.create).toHaveBeenCalledTimes(1);\n      expect(broker.ContextFactory.create).toHaveBeenCalledWith(broker, null, {}, {});\n      expect(context.setEndpoint).toHaveBeenCalledWith(ep);\n      expect(broker.findNextActionEndpoint).toHaveBeenCalledTimes(1);\n      expect(broker.findNextActionEndpoint).toHaveBeenCalledWith(\"posts.find\", {}, ctx);\n      expect(action.handler).toHaveBeenCalledTimes(1);\n      expect(action.handler).toHaveBeenCalledWith(ctx);\n      context.setEndpoint.mockClear();\n    });\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should create new Context & call handler if remote endpoint","suites":["Test broker.call"],"updatePoint":{"line":2022,"column":65},"line":2022,"code":"  it(\"should create new Context & call handler if remote endpoint\", () => {\n    action.handler.mockClear();\n    ep.local = false;\n    broker.ContextFactory.create.mockClear();\n    broker.findNextActionEndpoint.mockClear();\n    let p = broker.call(\"posts.find\");\n    return p.catch(protectReject).then(ctx => {\n      expect(p.ctx).toBe(ctx);\n      expect(broker.ContextFactory.create).toHaveBeenCalledTimes(1);\n      expect(broker.ContextFactory.create).toHaveBeenCalledWith(broker, null, {}, {});\n      expect(ctx.setEndpoint).toHaveBeenCalledWith(ep);\n      expect(broker.findNextActionEndpoint).toHaveBeenCalledTimes(1);\n      expect(broker.findNextActionEndpoint).toHaveBeenCalledWith(\"posts.find\", {}, ctx);\n      expect(action.handler).toHaveBeenCalledTimes(1);\n      expect(action.handler).toHaveBeenCalledWith(ctx);\n    });\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call action handler with a reused Context","suites":["Test broker.call"],"updatePoint":{"line":2039,"column":54},"line":2039,"code":"  it(\"should call action handler with a reused Context\", () => {\n    broker.findNextActionEndpoint.mockClear();\n    action.handler.mockClear();\n    let preCtx = new Context(broker, {\n      name: \"posts.find\"\n    });\n    preCtx.params = {\n      a: 5\n    };\n    preCtx.requestID = \"555\";\n    preCtx.meta = {\n      a: 123\n    };\n    preCtx.metrics = true;\n    let opts = {\n      ctx: preCtx\n    };\n    return broker.call(\"posts.find\", {\n      b: 10\n    }, opts).catch(protectReject).then(ctx => {\n      expect(ctx).toBe(preCtx);\n      expect(ctx.broker).toBe(broker);\n      expect(ctx.endpoint).toBe(ep);\n      expect(ctx.service).toBe(service);\n      expect(ctx.nodeID).toBe(broker.nodeID);\n      expect(ctx.level).toBe(1);\n      expect(ctx.parentID).toBeNull();\n      expect(ctx.requestID).toBe(\"555\");\n      expect(ctx.action.name).toBe(\"posts.find\");\n      expect(ctx.params).toEqual({\n        a: 5\n      }); // params from reused context\n\n      expect(ctx.meta).toEqual({\n        a: 123\n      });\n      expect(ctx.metrics).toBe(true);\n      expect(broker.findNextActionEndpoint).toHaveBeenCalledTimes(1);\n      expect(broker.findNextActionEndpoint).toHaveBeenCalledWith(\"posts.find\", opts, preCtx);\n      expect(action.handler).toHaveBeenCalledTimes(1);\n      expect(action.handler).toHaveBeenCalledWith(ctx);\n    });\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call remoteHandler if actionName is an endpoint","suites":["Test broker.callWithoutBalancer"],"updatePoint":{"line":2099,"column":60},"line":2099,"code":"  it(\"should call remoteHandler if actionName is an endpoint\", () => {\n    let p = broker.callWithoutBalancer(ep);\n    return p.catch(protectReject).then(ctx => {\n      expect(ctx).toBeDefined();\n      expect(ctx.nodeID).toBe(\"node-11\");\n      expect(ctx.level).toBe(1);\n      expect(ctx.action.name).toBe(\"posts.find\");\n      expect(ctx.params).toEqual({});\n      expect(action.remoteHandler).toHaveBeenCalledTimes(1);\n      expect(action.remoteHandler).toHaveBeenCalledWith(ctx);\n    });\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should reject if no action","suites":["Test broker.callWithoutBalancer"],"updatePoint":{"line":2111,"column":32},"line":2111,"code":"  it(\"should reject if no action\", () => {\n    broker.registry.getActionEndpoints = jest.fn();\n    return broker.callWithoutBalancer(\"posts.noaction\", {}).then(protectReject).catch(err => {\n      expect(err).toBeDefined();\n      expect(err).toBeInstanceOf(ServiceNotFoundError);\n      expect(err.message).toBe(\"Service 'posts.noaction' is not found.\");\n      expect(err.data).toEqual({\n        action: \"posts.noaction\",\n        nodeID: undefined\n      });\n    });\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should reject if no endpoint","suites":["Test broker.callWithoutBalancer"],"updatePoint":{"line":2123,"column":34},"line":2123,"code":"  it(\"should reject if no endpoint\", () => {\n    broker.registry.getActionEndpoints = jest.fn(() => ({\n      getFirst: () => null\n    }));\n    return broker.callWithoutBalancer(\"posts.noaction\", {}).then(protectReject).catch(err => {\n      expect(err).toBeDefined();\n      expect(err).toBeInstanceOf(ServiceNotAvailableError);\n      expect(err.message).toBe(\"Service 'posts.noaction' is not available.\");\n      expect(err.data).toEqual({\n        action: \"posts.noaction\",\n        nodeID: undefined\n      });\n    });\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call _remoteCall with new Context without params","suites":["Test broker.callWithoutBalancer"],"updatePoint":{"line":2137,"column":61},"line":2137,"code":"  it(\"should call _remoteCall with new Context without params\", () => {\n    action.remoteHandler.mockClear();\n    broker.registry.getActionEndpoints = jest.fn(() => ({\n      getFirst: () => ep\n    }));\n    let p = broker.callWithoutBalancer(\"posts.find\");\n    return p.catch(protectReject).then(ctx => {\n      expect(ctx).toBeDefined();\n      expect(ctx.broker).toBe(broker);\n      expect(ctx.nodeID).toBe(null);\n      expect(ctx.level).toBe(1);\n      expect(ctx.action.name).toBe(\"posts.find\");\n      expect(ctx.params).toEqual({});\n      expect(action.remoteHandler).toHaveBeenCalledTimes(1);\n      expect(action.remoteHandler).toHaveBeenCalledWith(ctx);\n    });\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call _remoteCall with new Context with params","suites":["Test broker.callWithoutBalancer"],"updatePoint":{"line":2154,"column":58},"line":2154,"code":"  it(\"should call _remoteCall with new Context with params\", () => {\n    action.remoteHandler.mockClear();\n    let params = {\n      limit: 5,\n      search: \"John\"\n    };\n    return broker.callWithoutBalancer(\"posts.find\", params).catch(protectReject).then(ctx => {\n      expect(ctx).toBeDefined();\n      expect(ctx.action.name).toBe(\"posts.find\");\n      expect(ctx.params).toEqual(params);\n      expect(action.remoteHandler).toHaveBeenCalledTimes(1);\n      expect(action.remoteHandler).toHaveBeenCalledWith(ctx);\n    });\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call _remoteCall with specified nodeID","suites":["Test broker.callWithoutBalancer"],"updatePoint":{"line":2168,"column":51},"line":2168,"code":"  it(\"should call _remoteCall with specified nodeID\", () => {\n    action.remoteHandler.mockClear();\n    let params = {\n      limit: 5,\n      search: \"John\"\n    };\n    let opts = {\n      nodeID: \"node-10\"\n    };\n    broker.registry.getActionEndpointByNodeId = jest.fn(() => ep);\n    return broker.callWithoutBalancer(\"posts.find\", params, opts).catch(protectReject).then(ctx => {\n      expect(ctx).toBeDefined();\n      expect(ctx.action.name).toBe(\"posts.find\");\n      expect(ctx.params).toEqual(params);\n      expect(ctx.nodeID).toBe(\"node-10\");\n      expect(broker.registry.getActionEndpointByNodeId).toHaveBeenCalledTimes(1);\n      expect(broker.registry.getActionEndpointByNodeId).toHaveBeenCalledWith(\"posts.find\", \"node-10\");\n      expect(action.remoteHandler).toHaveBeenCalledTimes(1);\n      expect(action.remoteHandler).toHaveBeenCalledWith(ctx);\n    });\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should reject if no endpoint on specified node","suites":["Test broker.callWithoutBalancer"],"updatePoint":{"line":2189,"column":52},"line":2189,"code":"  it(\"should reject if no endpoint on specified node\", () => {\n    broker.registry.getActionEndpointByNodeId = jest.fn(() => null);\n    let params = {\n      limit: 5,\n      search: \"John\"\n    };\n    let opts = {\n      nodeID: \"node-10\"\n    };\n    return broker.callWithoutBalancer(\"posts.find\", params, opts).then(protectReject).catch(err => {\n      expect(err).toBeDefined();\n      expect(err).toBeInstanceOf(ServiceNotFoundError);\n      expect(err.message).toBe(\"Service 'posts.find' is not found on 'node-10' node.\");\n      expect(err.data).toEqual({\n        action: \"posts.find\",\n        nodeID: \"node-10\"\n      });\n    });\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call _remoteCall with new Context with requestID & meta","suites":["Test broker.callWithoutBalancer"],"updatePoint":{"line":2208,"column":68},"line":2208,"code":"  it(\"should call _remoteCall with new Context with requestID & meta\", () => {\n    action.remoteHandler.mockClear();\n    let params = {\n      limit: 5,\n      search: \"John\"\n    };\n    let opts = {\n      requestID: \"123\",\n      meta: {\n        a: 5\n      }\n    };\n    return broker.callWithoutBalancer(\"posts.find\", params, opts).catch(protectReject).then(ctx => {\n      expect(ctx).toBeDefined();\n      expect(ctx.action.name).toBe(\"posts.find\");\n      expect(ctx.requestID).toBe(\"123\"); // need enabled `metrics`\n\n      expect(ctx.meta).toEqual({\n        a: 5\n      });\n      expect(action.remoteHandler).toHaveBeenCalledTimes(1);\n      expect(action.remoteHandler).toHaveBeenCalledWith(ctx);\n    });\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call _remoteCall with a sub Context","suites":["Test broker.callWithoutBalancer"],"updatePoint":{"line":2232,"column":48},"line":2232,"code":"  it(\"should call _remoteCall with a sub Context\", () => {\n    action.remoteHandler.mockClear();\n    let parentCtx = new Context(broker);\n    parentCtx.params = {\n      a: 5\n    };\n    parentCtx.requestID = \"555\";\n    parentCtx.meta = {\n      a: 123\n    };\n    parentCtx.tracing = true;\n    let opts = {\n      parentCtx,\n      meta: {\n        b: \"Adam\"\n      }\n    };\n    return broker.callWithoutBalancer(\"posts.find\", {\n      b: 10\n    }, opts).catch(protectReject).then(ctx => {\n      expect(ctx).toBeDefined();\n      expect(ctx.broker).toBe(broker);\n      expect(ctx.nodeID).toBeNull();\n      expect(ctx.level).toBe(2);\n      expect(ctx.parentID).toBe(parentCtx.id);\n      expect(ctx.requestID).toBe(\"555\");\n      expect(ctx.action.name).toBe(\"posts.find\");\n      expect(ctx.params).toEqual({\n        b: 10\n      });\n      expect(ctx.meta).toEqual({\n        a: 123,\n        b: \"Adam\"\n      });\n      expect(ctx.tracing).toBe(true);\n      expect(action.remoteHandler).toHaveBeenCalledTimes(1);\n      expect(action.remoteHandler).toHaveBeenCalledWith(ctx);\n    });\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call _remoteCall with a reused Context","suites":["Test broker.callWithoutBalancer"],"updatePoint":{"line":2271,"column":51},"line":2271,"code":"  it(\"should call _remoteCall with a reused Context\", () => {\n    action.remoteHandler.mockClear();\n    let preCtx = new Context(broker, {\n      name: \"posts.find\"\n    });\n    preCtx.params = {\n      a: 5\n    };\n    preCtx.requestID = \"555\";\n    preCtx.meta = {\n      a: 123\n    };\n    preCtx.metrics = true;\n    let opts = {\n      ctx: preCtx\n    };\n    return broker.callWithoutBalancer(\"posts.find\", {\n      b: 10\n    }, opts).catch(protectReject).then(ctx => {\n      expect(ctx).toBe(preCtx);\n      expect(ctx.broker).toBe(broker);\n      expect(ctx.nodeID).toBeNull();\n      expect(ctx.level).toBe(1);\n      expect(ctx.parentID).toBeNull();\n      expect(ctx.requestID).toBe(\"555\");\n      expect(ctx.action.name).toBe(\"posts.find\");\n      expect(ctx.params).toEqual({\n        a: 5\n      }); // params from reused context\n\n      expect(ctx.meta).toEqual({\n        a: 123\n      });\n      expect(ctx.metrics).toBe(true);\n      expect(action.remoteHandler).toHaveBeenCalledTimes(1);\n      expect(action.remoteHandler).toHaveBeenCalledWith(ctx);\n    });\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call getActionEndpoints","suites":["Test broker._getLocalActionEndpoint"],"updatePoint":{"line":2328,"column":36},"line":2328,"code":"  it(\"should call getActionEndpoints\", () => {\n    const res = broker._getLocalActionEndpoint(\"posts.find\");\n\n    expect(res).toBe(ep);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should throw ServiceNotFoundError if there is no endpoint list","suites":["Test broker._getLocalActionEndpoint"],"updatePoint":{"line":2333,"column":68},"line":2333,"code":"  it(\"should throw ServiceNotFoundError if there is no endpoint list\", () => {\n    broker.registry.getActionEndpoints = jest.fn();\n    expect(() => broker._getLocalActionEndpoint(\"posts.find\")).toThrowError(ServiceNotFoundError);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should throw ServiceNotFoundError if there is no local endpoint","suites":["Test broker._getLocalActionEndpoint"],"updatePoint":{"line":2337,"column":69},"line":2337,"code":"  it(\"should throw ServiceNotFoundError if there is no local endpoint\", () => {\n    broker.registry.getActionEndpoints = jest.fn(() => ({\n      hasLocal: () => false\n    }));\n    expect(() => broker._getLocalActionEndpoint(\"posts.find\")).toThrowError(ServiceNotFoundError);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should throw ServiceNotAvailableError if there is no next endpoint","suites":["Test broker._getLocalActionEndpoint"],"updatePoint":{"line":2343,"column":72},"line":2343,"code":"  it(\"should throw ServiceNotAvailableError if there is no next endpoint\", () => {\n    const ctx = {};\n    const epList = {\n      hasLocal: () => true,\n      nextLocal: jest.fn(() => null)\n    };\n    broker.registry.getActionEndpoints = jest.fn(() => epList);\n    expect(() => broker._getLocalActionEndpoint(\"posts.find\", ctx)).toThrowError(ServiceNotAvailableError);\n    expect(epList.nextLocal).toHaveBeenCalledTimes(1);\n    expect(epList.nextLocal).toHaveBeenCalledWith(ctx);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call both action & return an array","suites":["Test broker.mcall"],"updatePoint":{"line":2361,"column":47},"line":2361,"code":"  it(\"should call both action & return an array\", () => {\n    return broker.mcall([{\n      action: \"posts.find\",\n      params: {\n        limit: 2,\n        offset: 0\n      },\n      options: {\n        timeout: 500\n      }\n    }, {\n      action: \"users.find\",\n      params: {\n        limit: 2,\n        sort: \"username\"\n      }\n    }], {\n      timeout: 200\n    }).catch(protectReject).then(res => {\n      expect(res).toEqual([\"posts.find\", \"users.find\"]);\n      expect(broker.call).toHaveBeenCalledTimes(2);\n      expect(broker.call).toHaveBeenCalledWith(\"posts.find\", {\n        limit: 2,\n        offset: 0\n      }, {\n        timeout: 500\n      });\n      expect(broker.call).toHaveBeenCalledWith(\"users.find\", {\n        limit: 2,\n        sort: \"username\"\n      }, {\n        timeout: 200\n      });\n    });\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call both action & return an object","suites":["Test broker.mcall"],"updatePoint":{"line":2396,"column":48},"line":2396,"code":"  it(\"should call both action & return an object\", () => {\n    broker.call.mockClear();\n    return broker.mcall({\n      posts: {\n        action: \"posts.find\",\n        params: {\n          limit: 2,\n          offset: 0\n        },\n        options: {\n          timeout: 500\n        }\n      },\n      users: {\n        action: \"users.find\",\n        params: {\n          limit: 2,\n          sort: \"username\"\n        }\n      }\n    }, {\n      timeout: 200\n    }).catch(protectReject).then(res => {\n      expect(res).toEqual({\n        posts: \"posts.find\",\n        users: \"users.find\"\n      });\n      expect(broker.call).toHaveBeenCalledTimes(2);\n      expect(broker.call).toHaveBeenCalledWith(\"posts.find\", {\n        limit: 2,\n        offset: 0\n      }, {\n        timeout: 500\n      });\n      expect(broker.call).toHaveBeenCalledWith(\"users.find\", {\n        limit: 2,\n        sort: \"username\"\n      }, {\n        timeout: 200\n      });\n    });\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should throw error","suites":["Test broker.mcall"],"updatePoint":{"line":2438,"column":24},"line":2438,"code":"  it(\"should throw error\", () => {\n    return broker.mcall(6).catch(err => {\n      expect(err).toBeInstanceOf(MoleculerServerError);\n    });\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call both action & return an array with settled","suites":["Test broker.mcall"],"updatePoint":{"line":2445,"column":62},"line":2445,"code":"    it(\"should call both action & return an array with settled\", () => {\n      return broker.mcall([{\n        action: \"posts.find\",\n        params: {\n          limit: 2,\n          offset: 0\n        },\n        options: {\n          timeout: 500\n        }\n      }, {\n        action: \"users.find\",\n        params: {\n          limit: 2,\n          sort: \"username\"\n        }\n      }, {\n        action: \"service.notfound\",\n        params: {\n          notfound: 1\n        }\n      }], {\n        timeout: 200,\n        settled: true\n      }).then(res => {\n        expect(res).toEqual([{\n          status: \"fulfilled\",\n          value: \"posts.find\"\n        }, {\n          status: \"fulfilled\",\n          value: \"users.find\"\n        }, {\n          status: \"fulfilled\",\n          value: \"service.notfound\"\n        }]);\n        expect(broker.call).toHaveBeenCalledTimes(5);\n        expect(broker.call).toHaveBeenCalledWith(\"posts.find\", {\n          limit: 2,\n          offset: 0\n        }, {\n          timeout: 500\n        });\n        expect(broker.call).toHaveBeenCalledWith(\"users.find\", {\n          limit: 2,\n          sort: \"username\"\n        }, {\n          timeout: 200\n        });\n      });\n    });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call the local handler","suites":["Test broker.emit"],"updatePoint":{"line":2513,"column":35},"line":2513,"code":"  it(\"should call the local handler\", () => {\n    expect(broker.transit).toBeUndefined();\n    broker.emit(\"test.event\");\n    expect(broker.localBus.emit).toHaveBeenCalledTimes(0);\n    expect(broker.registry.events.getBalancedEndpoints).toHaveBeenCalledTimes(1);\n    expect(broker.registry.events.getBalancedEndpoints).toHaveBeenCalledWith(\"test.event\", undefined);\n    expect(broker.registry.events.callEventHandler).toHaveBeenCalledTimes(1);\n    const ctx = broker.registry.events.callEventHandler.mock.calls[0][0];\n    expect(broker.registry.events.callEventHandler).toHaveBeenCalledWith(ctx);\n    expect(ctx.toJSON()).toEqual({\n      id: \"1\",\n      ackID: null,\n      cachedResult: false,\n      caller: null,\n      eventGroups: undefined,\n      eventName: \"test.event\",\n      eventType: \"emit\",\n      level: 1,\n      meta: {},\n      needAck: null,\n      nodeID: \"node-1234\",\n      options: {},\n      params: null,\n      parentID: null,\n      requestID: \"1\",\n      span: null,\n      tracing: null\n    });\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call the localBus.emit if it starts with '$'","suites":["Test broker.emit"],"updatePoint":{"line":2542,"column":57},"line":2542,"code":"  it(\"should call the localBus.emit if it starts with '$'\", () => {\n    broker.registry.events.callEventHandler.mockClear();\n    broker.localBus.emit.mockClear();\n    broker.registry.events.getBalancedEndpoints.mockClear();\n    broker.emit(\"$test.event\", {\n      a: 5\n    });\n    expect(broker.registry.events.callEventHandler).toHaveBeenCalledTimes(1);\n    const ctx = broker.registry.events.callEventHandler.mock.calls[0][0];\n    expect(broker.registry.events.callEventHandler).toHaveBeenCalledWith(ctx);\n    expect(ctx.toJSON()).toEqual({\n      id: \"1\",\n      ackID: null,\n      cachedResult: false,\n      caller: null,\n      eventGroups: undefined,\n      eventName: \"$test.event\",\n      eventType: \"emit\",\n      level: 1,\n      meta: {},\n      needAck: null,\n      nodeID: \"node-1234\",\n      options: {},\n      params: {\n        a: 5\n      },\n      parentID: null,\n      requestID: \"1\",\n      span: null,\n      tracing: null\n    });\n    expect(broker.localBus.emit).toHaveBeenCalledTimes(1);\n    expect(broker.localBus.emit).toHaveBeenCalledWith(\"$test.event\", {\n      a: 5\n    });\n    expect(broker.registry.events.getBalancedEndpoints).toHaveBeenCalledTimes(1);\n    expect(broker.registry.events.getBalancedEndpoints).toHaveBeenCalledWith(\"$test.event\", undefined);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call getBalancedEndpoints with object payload","suites":["Test broker.emit"],"updatePoint":{"line":2580,"column":58},"line":2580,"code":"  it(\"should call getBalancedEndpoints with object payload\", () => {\n    broker.registry.events.callEventHandler.mockClear();\n    broker.registry.events.getBalancedEndpoints.mockClear();\n    broker.emit(\"test.event\", {\n      a: 5\n    });\n    expect(broker.registry.events.callEventHandler).toHaveBeenCalledTimes(1);\n    const ctx = broker.registry.events.callEventHandler.mock.calls[0][0];\n    expect(broker.registry.events.callEventHandler).toHaveBeenCalledWith(ctx);\n    expect(ctx.toJSON()).toEqual({\n      id: \"1\",\n      ackID: null,\n      cachedResult: false,\n      caller: null,\n      eventGroups: undefined,\n      eventName: \"test.event\",\n      eventType: \"emit\",\n      level: 1,\n      meta: {},\n      needAck: null,\n      nodeID: \"node-1234\",\n      options: {},\n      params: {\n        a: 5\n      },\n      parentID: null,\n      requestID: \"1\",\n      span: null,\n      tracing: null\n    });\n    expect(broker.registry.events.getBalancedEndpoints).toHaveBeenCalledTimes(1);\n    expect(broker.registry.events.getBalancedEndpoints).toHaveBeenCalledWith(\"test.event\", undefined);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call getBalancedEndpoints with a group","suites":["Test broker.emit"],"updatePoint":{"line":2613,"column":51},"line":2613,"code":"  it(\"should call getBalancedEndpoints with a group\", () => {\n    broker.registry.events.callEventHandler.mockClear();\n    broker.registry.events.getBalancedEndpoints.mockClear();\n    broker.emit(\"test.event\", {\n      a: 5\n    }, \"users\");\n    expect(broker.registry.events.getBalancedEndpoints).toHaveBeenCalledTimes(1);\n    expect(broker.registry.events.getBalancedEndpoints).toHaveBeenCalledWith(\"test.event\", [\"users\"]);\n    expect(broker.registry.events.callEventHandler).toHaveBeenCalledTimes(1);\n    const ctx = broker.registry.events.callEventHandler.mock.calls[0][0];\n    expect(broker.registry.events.callEventHandler).toHaveBeenCalledWith(ctx);\n    expect(ctx.toJSON()).toEqual({\n      id: \"1\",\n      ackID: null,\n      cachedResult: false,\n      caller: null,\n      eventGroups: [\"users\"],\n      eventName: \"test.event\",\n      eventType: \"emit\",\n      level: 1,\n      meta: {},\n      needAck: null,\n      nodeID: \"node-1234\",\n      options: {\n        groups: [\"users\"]\n      },\n      params: {\n        a: 5\n      },\n      parentID: null,\n      requestID: \"1\",\n      span: null,\n      tracing: null\n    });\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call getBalancedEndpoints with multiple groups","suites":["Test broker.emit"],"updatePoint":{"line":2648,"column":59},"line":2648,"code":"  it(\"should call getBalancedEndpoints with multiple groups\", () => {\n    broker.registry.events.callEventHandler.mockClear();\n    broker.registry.events.getBalancedEndpoints.mockClear();\n    broker.emit(\"test.event\", {\n      a: 5\n    }, [\"users\", \"payments\"]);\n    expect(broker.registry.events.getBalancedEndpoints).toHaveBeenCalledTimes(1);\n    expect(broker.registry.events.getBalancedEndpoints).toHaveBeenCalledWith(\"test.event\", [\"users\", \"payments\"]);\n    expect(broker.registry.events.callEventHandler).toHaveBeenCalledTimes(1);\n    const ctx = broker.registry.events.callEventHandler.mock.calls[0][0];\n    expect(broker.registry.events.callEventHandler).toHaveBeenCalledWith(ctx);\n    expect(ctx.toJSON()).toEqual({\n      id: \"1\",\n      ackID: null,\n      cachedResult: false,\n      caller: null,\n      eventGroups: [\"users\", \"payments\"],\n      eventName: \"test.event\",\n      eventType: \"emit\",\n      level: 1,\n      meta: {},\n      needAck: null,\n      nodeID: \"node-1234\",\n      options: {\n        groups: [\"users\", \"payments\"]\n      },\n      params: {\n        a: 5\n      },\n      parentID: null,\n      requestID: \"1\",\n      span: null,\n      tracing: null\n    });\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call getBalancedEndpoints with opts","suites":["Test broker.emit"],"updatePoint":{"line":2683,"column":48},"line":2683,"code":"  it(\"should call getBalancedEndpoints with opts\", () => {\n    broker.registry.events.callEventHandler.mockClear();\n    broker.registry.events.getBalancedEndpoints.mockClear();\n    broker.emit(\"test.event\", {\n      a: 5\n    }, {\n      groups: [\"users\", \"payments\"],\n      b: 6\n    });\n    expect(broker.registry.events.getBalancedEndpoints).toHaveBeenCalledTimes(1);\n    expect(broker.registry.events.getBalancedEndpoints).toHaveBeenCalledWith(\"test.event\", [\"users\", \"payments\"]);\n    expect(broker.registry.events.callEventHandler).toHaveBeenCalledTimes(1);\n    const ctx = broker.registry.events.callEventHandler.mock.calls[0][0];\n    expect(broker.registry.events.callEventHandler).toHaveBeenCalledWith(ctx);\n    expect(ctx.toJSON()).toEqual({\n      id: \"1\",\n      ackID: null,\n      cachedResult: false,\n      caller: null,\n      eventGroups: [\"users\", \"payments\"],\n      eventName: \"test.event\",\n      eventType: \"emit\",\n      level: 1,\n      meta: {},\n      needAck: null,\n      nodeID: \"node-1234\",\n      options: {\n        groups: [\"users\", \"payments\"],\n        b: 6\n      },\n      params: {\n        a: 5\n      },\n      parentID: null,\n      requestID: \"1\",\n      span: null,\n      tracing: null\n    });\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call sendEvent with ctx","suites":["Test broker.emit with transporter"],"updatePoint":{"line":2746,"column":36},"line":2746,"code":"  it(\"should call sendEvent with ctx\", () => {\n    broker.transit.sendEvent.mockClear();\n    broker.emit(\"user.event\", {\n      name: \"John\"\n    });\n    expect(broker.registry.events.callEventHandler).toHaveBeenCalledTimes(1);\n    let ctx = broker.registry.events.callEventHandler.mock.calls[0][0];\n    expect(broker.registry.events.callEventHandler).toHaveBeenCalledWith(ctx);\n    expect(ctx.toJSON()).toEqual({\n      id: \"1\",\n      ackID: null,\n      cachedResult: false,\n      caller: null,\n      eventGroups: undefined,\n      eventName: \"user.event\",\n      eventType: \"emit\",\n      level: 1,\n      meta: {},\n      needAck: null,\n      nodeID: \"node-1\",\n      options: {},\n      params: {\n        name: \"John\"\n      },\n      parentID: null,\n      requestID: \"1\",\n      span: null,\n      tracing: null\n    });\n    expect(broker.transit.sendEvent).toHaveBeenCalledTimes(2);\n    ctx = broker.transit.sendEvent.mock.calls[0][0];\n    expect(broker.transit.sendEvent).toHaveBeenNthCalledWith(1, ctx);\n    expect(ctx.toJSON()).toEqual({\n      id: \"1\",\n      ackID: null,\n      cachedResult: false,\n      caller: null,\n      eventGroups: [\"payment\", \"mail\"],\n      eventName: \"user.event\",\n      eventType: \"emit\",\n      level: 1,\n      meta: {},\n      needAck: null,\n      nodeID: \"node-2\",\n      options: {},\n      params: {\n        name: \"John\"\n      },\n      parentID: null,\n      requestID: \"1\",\n      span: null,\n      tracing: null\n    });\n    ctx = broker.transit.sendEvent.mock.calls[1][0];\n    expect(broker.transit.sendEvent).toHaveBeenNthCalledWith(2, ctx);\n    expect(ctx.toJSON()).toEqual({\n      id: \"1\",\n      ackID: null,\n      cachedResult: false,\n      caller: null,\n      eventGroups: [\"users\"],\n      eventName: \"user.event\",\n      eventType: \"emit\",\n      level: 1,\n      meta: {},\n      needAck: null,\n      nodeID: \"node-3\",\n      options: {},\n      params: {\n        name: \"John\"\n      },\n      parentID: null,\n      requestID: \"1\",\n      span: null,\n      tracing: null\n    });\n    expect(broker.registry.events.getBalancedEndpoints).toHaveBeenCalledTimes(1);\n    expect(broker.registry.events.getBalancedEndpoints).toHaveBeenCalledWith(\"user.event\", undefined);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call sendEvent if no registry balancing","suites":["Test broker.emit with transporter"],"updatePoint":{"line":2825,"column":52},"line":2825,"code":"  it(\"should call sendEvent if no registry balancing\", () => {\n    broker.registry.events.callEventHandler.mockClear();\n    broker.getEventGroups.mockClear();\n    broker.transit.sendEvent.mockClear();\n    broker.registry.events.getBalancedEndpoints.mockClear();\n    broker.options.disableBalancer = true;\n    broker.emit(\"user.event\", {\n      name: \"John\"\n    });\n    expect(broker.registry.events.callEventHandler).toHaveBeenCalledTimes(0);\n    expect(broker.getEventGroups).toHaveBeenCalledTimes(1);\n    expect(broker.getEventGroups).toHaveBeenCalledWith(\"user.event\");\n    expect(broker.transit.sendEvent).toHaveBeenCalledTimes(1);\n    const ctx = broker.transit.sendEvent.mock.calls[0][0];\n    expect(broker.transit.sendEvent).toHaveBeenCalledWith(ctx);\n    expect(ctx.toJSON()).toEqual({\n      id: \"1\",\n      ackID: null,\n      cachedResult: false,\n      caller: null,\n      eventGroups: [\"mail\", \"payment\"],\n      eventName: \"user.event\",\n      eventType: \"emit\",\n      level: 1,\n      meta: {},\n      needAck: null,\n      nodeID: \"node-1\",\n      options: {},\n      params: {\n        name: \"John\"\n      },\n      parentID: null,\n      requestID: \"1\",\n      span: null,\n      tracing: null\n    });\n    expect(ctx.endpoint).toBeNull();\n    expect(broker.registry.events.getBalancedEndpoints).toHaveBeenCalledTimes(0);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call sendEvent if no registry balancing with groups","suites":["Test broker.emit with transporter"],"updatePoint":{"line":2864,"column":64},"line":2864,"code":"  it(\"should call sendEvent if no registry balancing with groups\", () => {\n    broker.registry.events.callEventHandler.mockClear();\n    broker.getEventGroups.mockClear();\n    broker.transit.sendEvent.mockClear();\n    broker.registry.events.getBalancedEndpoints.mockClear();\n    broker.options.disableBalancer = true;\n    broker.emit(\"user.event\", {\n      name: \"John\"\n    }, [\"users\", \"mail\"]);\n    expect(broker.registry.events.callEventHandler).toHaveBeenCalledTimes(0);\n    expect(broker.getEventGroups).toHaveBeenCalledTimes(0);\n    expect(broker.transit.sendEvent).toHaveBeenCalledTimes(1);\n    const ctx = broker.transit.sendEvent.mock.calls[0][0];\n    expect(broker.transit.sendEvent).toHaveBeenCalledWith(ctx);\n    expect(ctx.toJSON()).toEqual({\n      id: \"1\",\n      ackID: null,\n      cachedResult: false,\n      caller: null,\n      eventGroups: [\"users\", \"mail\"],\n      eventName: \"user.event\",\n      eventType: \"emit\",\n      level: 1,\n      meta: {},\n      needAck: null,\n      nodeID: \"node-1\",\n      options: {\n        groups: [\"users\", \"mail\"]\n      },\n      params: {\n        name: \"John\"\n      },\n      parentID: null,\n      requestID: \"1\",\n      span: null,\n      tracing: null\n    });\n    expect(ctx.endpoint).toBeNull();\n    expect(broker.registry.events.getBalancedEndpoints).toHaveBeenCalledTimes(0);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call sendEvent if it is an internal event","suites":["Test broker.emit with transporter"],"updatePoint":{"line":2904,"column":54},"line":2904,"code":"  it(\"should call sendEvent if it is an internal event\", () => {\n    broker.registry.events.callEventHandler.mockClear();\n    broker.localBus.emit.mockClear();\n    broker.transit.sendEvent.mockClear();\n    broker.registry.events.getBalancedEndpoints.mockClear();\n    broker.options.disableBalancer = true;\n    broker.emit(\"$user.event\", {\n      name: \"John\"\n    }, [\"users\", \"mail\"]);\n    expect(broker.localBus.emit).toHaveBeenCalledTimes(1);\n    expect(broker.localBus.emit).toHaveBeenCalledWith(\"$user.event\", {\n      name: \"John\"\n    });\n    expect(broker.registry.events.callEventHandler).toHaveBeenCalledTimes(0);\n    expect(broker.transit.sendEvent).toHaveBeenCalledTimes(1);\n    const ctx = broker.transit.sendEvent.mock.calls[0][0];\n    expect(broker.transit.sendEvent).toHaveBeenCalledWith(ctx);\n    expect(ctx.toJSON()).toEqual({\n      id: \"1\",\n      ackID: null,\n      cachedResult: false,\n      caller: null,\n      eventGroups: [\"users\", \"mail\"],\n      eventName: \"$user.event\",\n      eventType: \"emit\",\n      level: 1,\n      meta: {},\n      needAck: null,\n      nodeID: \"node-1\",\n      options: {\n        groups: [\"users\", \"mail\"]\n      },\n      params: {\n        name: \"John\"\n      },\n      parentID: null,\n      requestID: \"1\",\n      span: null,\n      tracing: null\n    });\n    expect(ctx.endpoint).toBeNull();\n    expect(broker.registry.events.getBalancedEndpoints).toHaveBeenCalledTimes(0);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call sendEvent & broadcastLocal without payload","suites":["Test broker broadcast"],"updatePoint":{"line":2962,"column":60},"line":2962,"code":"  it(\"should call sendEvent & broadcastLocal without payload\", () => {\n    broker.broadcast(\"user.event\");\n    expect(broker.broadcastLocal).toHaveBeenCalledTimes(1);\n    expect(broker.broadcastLocal).toHaveBeenCalledWith(\"user.event\", undefined, {});\n    expect(broker.transit.sendEvent).toHaveBeenCalledTimes(2);\n    let ctx = broker.transit.sendEvent.mock.calls[0][0];\n    expect(broker.transit.sendEvent).toHaveBeenNthCalledWith(1, ctx);\n    expect(ctx.toJSON()).toEqual({\n      id: \"1\",\n      ackID: null,\n      cachedResult: false,\n      caller: null,\n      eventGroups: undefined,\n      eventName: \"user.event\",\n      eventType: \"broadcast\",\n      level: 1,\n      meta: {},\n      needAck: null,\n      nodeID: \"node-2\",\n      options: {},\n      params: null,\n      parentID: null,\n      requestID: \"1\",\n      span: null,\n      tracing: null\n    });\n    ctx = broker.transit.sendEvent.mock.calls[1][0];\n    expect(broker.transit.sendEvent).toHaveBeenNthCalledWith(2, ctx);\n    expect(ctx.toJSON()).toEqual({\n      id: \"1\",\n      ackID: null,\n      cachedResult: false,\n      caller: null,\n      eventGroups: undefined,\n      eventName: \"user.event\",\n      eventType: \"broadcast\",\n      level: 1,\n      meta: {},\n      needAck: null,\n      nodeID: \"node-3\",\n      options: {},\n      params: null,\n      parentID: null,\n      requestID: \"1\",\n      span: null,\n      tracing: null\n    });\n    expect(broker.registry.events.getAllEndpoints).toHaveBeenCalledTimes(1);\n    expect(broker.registry.events.getAllEndpoints).toHaveBeenCalledWith(\"user.event\", undefined);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call sendEvent & broadcastLocal with object payload","suites":["Test broker broadcast"],"updatePoint":{"line":3012,"column":64},"line":3012,"code":"  it(\"should call sendEvent & broadcastLocal with object payload\", () => {\n    broker.broadcastLocal.mockClear();\n    broker.transit.sendEvent.mockClear();\n    broker.registry.events.getAllEndpoints.mockClear();\n    broker.broadcast(\"user.event\", {\n      name: \"John\"\n    });\n    expect(broker.broadcastLocal).toHaveBeenCalledTimes(1);\n    expect(broker.broadcastLocal).toHaveBeenCalledWith(\"user.event\", {\n      name: \"John\"\n    }, {});\n    expect(broker.transit.sendEvent).toHaveBeenCalledTimes(2);\n    let ctx = broker.transit.sendEvent.mock.calls[0][0];\n    expect(broker.transit.sendEvent).toHaveBeenNthCalledWith(1, ctx);\n    expect(ctx.toJSON()).toEqual({\n      id: \"1\",\n      ackID: null,\n      cachedResult: false,\n      caller: null,\n      eventGroups: undefined,\n      eventName: \"user.event\",\n      eventType: \"broadcast\",\n      level: 1,\n      meta: {},\n      needAck: null,\n      nodeID: \"node-2\",\n      options: {},\n      params: {\n        name: \"John\"\n      },\n      parentID: null,\n      requestID: \"1\",\n      span: null,\n      tracing: null\n    });\n    ctx = broker.transit.sendEvent.mock.calls[1][0];\n    expect(broker.transit.sendEvent).toHaveBeenNthCalledWith(2, ctx);\n    expect(ctx.toJSON()).toEqual({\n      id: \"1\",\n      ackID: null,\n      cachedResult: false,\n      caller: null,\n      eventGroups: undefined,\n      eventName: \"user.event\",\n      eventType: \"broadcast\",\n      level: 1,\n      meta: {},\n      needAck: null,\n      nodeID: \"node-3\",\n      options: {},\n      params: {\n        name: \"John\"\n      },\n      parentID: null,\n      requestID: \"1\",\n      span: null,\n      tracing: null\n    });\n    expect(broker.registry.events.getAllEndpoints).toHaveBeenCalledTimes(1);\n    expect(broker.registry.events.getAllEndpoints).toHaveBeenCalledWith(\"user.event\", undefined);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call sendEvent & broadcastLocal with groups","suites":["Test broker broadcast"],"updatePoint":{"line":3073,"column":56},"line":3073,"code":"  it(\"should call sendEvent & broadcastLocal with groups\", () => {\n    broker.broadcastLocal.mockClear();\n    broker.transit.sendEvent.mockClear();\n    broker.registry.events.getAllEndpoints.mockClear();\n    broker.broadcast(\"user.event\", {\n      name: \"John\"\n    }, [\"mail\", \"payment\"]);\n    expect(broker.broadcastLocal).toHaveBeenCalledTimes(1);\n    expect(broker.broadcastLocal).toHaveBeenCalledWith(\"user.event\", {\n      name: \"John\"\n    }, {\n      groups: [\"mail\", \"payment\"]\n    });\n    expect(broker.transit.sendEvent).toHaveBeenCalledTimes(2);\n    let ctx = broker.transit.sendEvent.mock.calls[0][0];\n    expect(broker.transit.sendEvent).toHaveBeenNthCalledWith(1, ctx);\n    expect(ctx.toJSON()).toEqual({\n      id: \"1\",\n      ackID: null,\n      cachedResult: false,\n      caller: null,\n      eventGroups: [\"mail\", \"payment\"],\n      eventName: \"user.event\",\n      eventType: \"broadcast\",\n      level: 1,\n      meta: {},\n      needAck: null,\n      nodeID: \"node-2\",\n      options: {\n        groups: [\"mail\", \"payment\"]\n      },\n      params: {\n        name: \"John\"\n      },\n      parentID: null,\n      requestID: \"1\",\n      span: null,\n      tracing: null\n    });\n    ctx = broker.transit.sendEvent.mock.calls[1][0];\n    expect(broker.transit.sendEvent).toHaveBeenNthCalledWith(2, ctx);\n    expect(ctx.toJSON()).toEqual({\n      id: \"1\",\n      ackID: null,\n      cachedResult: false,\n      caller: null,\n      eventGroups: [\"mail\", \"payment\"],\n      eventName: \"user.event\",\n      eventType: \"broadcast\",\n      level: 1,\n      meta: {},\n      needAck: null,\n      nodeID: \"node-3\",\n      options: {\n        groups: [\"mail\", \"payment\"]\n      },\n      params: {\n        name: \"John\"\n      },\n      parentID: null,\n      requestID: \"1\",\n      span: null,\n      tracing: null\n    });\n    expect(broker.registry.events.getAllEndpoints).toHaveBeenCalledTimes(1);\n    expect(broker.registry.events.getAllEndpoints).toHaveBeenCalledWith(\"user.event\", [\"mail\", \"payment\"]);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call sendEvent if internal event","suites":["Test broker broadcast"],"updatePoint":{"line":3140,"column":45},"line":3140,"code":"  it(\"should call sendEvent if internal event\", () => {\n    broker.broadcastLocal.mockClear();\n    broker.transit.sendEvent.mockClear();\n    broker.registry.events.getAllEndpoints.mockClear();\n    broker.broadcast(\"$user.event\", {\n      name: \"John\"\n    });\n    expect(broker.broadcastLocal).toHaveBeenCalledTimes(1);\n    expect(broker.broadcastLocal).toHaveBeenCalledWith(\"$user.event\", {\n      name: \"John\"\n    }, {});\n    expect(broker.transit.sendEvent).toHaveBeenCalledTimes(2);\n    let ctx = broker.transit.sendEvent.mock.calls[0][0];\n    expect(broker.transit.sendEvent).toHaveBeenNthCalledWith(1, ctx);\n    expect(ctx.toJSON()).toEqual({\n      id: \"1\",\n      ackID: null,\n      cachedResult: false,\n      caller: null,\n      eventGroups: undefined,\n      eventName: \"$user.event\",\n      eventType: \"broadcast\",\n      level: 1,\n      meta: {},\n      needAck: null,\n      nodeID: \"node-2\",\n      options: {},\n      params: {\n        name: \"John\"\n      },\n      parentID: null,\n      requestID: \"1\",\n      span: null,\n      tracing: null\n    });\n    ctx = broker.transit.sendEvent.mock.calls[1][0];\n    expect(broker.transit.sendEvent).toHaveBeenNthCalledWith(2, ctx);\n    expect(ctx.toJSON()).toEqual({\n      id: \"1\",\n      ackID: null,\n      cachedResult: false,\n      caller: null,\n      eventGroups: undefined,\n      eventName: \"$user.event\",\n      eventType: \"broadcast\",\n      level: 1,\n      meta: {},\n      needAck: null,\n      nodeID: \"node-3\",\n      options: {},\n      params: {\n        name: \"John\"\n      },\n      parentID: null,\n      requestID: \"1\",\n      span: null,\n      tracing: null\n    });\n    expect(broker.registry.events.getAllEndpoints).toHaveBeenCalledTimes(1);\n    expect(broker.registry.events.getAllEndpoints).toHaveBeenCalledWith(\"$user.event\", undefined);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call sendEvent without nodeID if no registry balancing","suites":["Test broker broadcast"],"updatePoint":{"line":3201,"column":67},"line":3201,"code":"  it(\"should call sendEvent without nodeID if no registry balancing\", () => {\n    broker.registry.events.getAllEndpoints.mockClear();\n    broker.getEventGroups.mockClear();\n    broker.broadcastLocal.mockClear();\n    broker.transit.sendEvent.mockClear();\n    broker.getEventGroups = jest.fn(() => [\"payments\"]);\n    broker.options.disableBalancer = true;\n    broker.broadcast(\"$user.event\", {\n      name: \"John\"\n    });\n    expect(broker.getEventGroups).toHaveBeenCalledTimes(1);\n    expect(broker.getEventGroups).toHaveBeenCalledWith(\"$user.event\");\n    expect(broker.transit.sendEvent).toHaveBeenCalledTimes(2);\n    let ctx = broker.transit.sendEvent.mock.calls[0][0];\n    expect(broker.transit.sendEvent).toHaveBeenNthCalledWith(1, ctx);\n    expect(ctx.toJSON()).toEqual({\n      id: \"1\",\n      ackID: null,\n      cachedResult: false,\n      caller: null,\n      eventGroups: [\"payments\"],\n      eventName: \"$user.event\",\n      eventType: \"broadcast\",\n      level: 1,\n      meta: {},\n      needAck: null,\n      nodeID: \"node-2\",\n      options: {},\n      params: {\n        name: \"John\"\n      },\n      parentID: null,\n      requestID: \"1\",\n      span: null,\n      tracing: null\n    });\n    expect(ctx.endpoint).toEqual({\n      id: \"node-2\"\n    });\n    ctx = broker.transit.sendEvent.mock.calls[1][0];\n    expect(broker.transit.sendEvent).toHaveBeenNthCalledWith(2, ctx);\n    expect(ctx.toJSON()).toEqual({\n      id: \"1\",\n      ackID: null,\n      cachedResult: false,\n      caller: null,\n      eventGroups: [\"payments\"],\n      eventName: \"$user.event\",\n      eventType: \"broadcast\",\n      level: 1,\n      meta: {},\n      needAck: null,\n      nodeID: \"node-3\",\n      options: {},\n      params: {\n        name: \"John\"\n      },\n      parentID: null,\n      requestID: \"1\",\n      span: null,\n      tracing: null\n    });\n    expect(ctx.endpoint).toEqual({\n      id: \"node-3\"\n    });\n    expect(broker.registry.events.getAllEndpoints).toHaveBeenCalledTimes(1);\n    expect(broker.broadcastLocal).toHaveBeenCalledTimes(0);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call emitLocalServices without payload","suites":["Test broker broadcastLocal"],"updatePoint":{"line":3277,"column":51},"line":3277,"code":"  it(\"should call emitLocalServices without payload\", () => {\n    broker.broadcastLocal(\"user.event\");\n    expect(broker.emitLocalServices).toHaveBeenCalledTimes(1);\n    const ctx = broker.emitLocalServices.mock.calls[0][0];\n    expect(broker.emitLocalServices).toHaveBeenNthCalledWith(1, ctx);\n    expect(ctx.toJSON()).toEqual({\n      id: \"1\",\n      ackID: null,\n      cachedResult: false,\n      caller: null,\n      eventGroups: undefined,\n      eventName: \"user.event\",\n      eventType: \"broadcastLocal\",\n      level: 1,\n      meta: {},\n      needAck: null,\n      nodeID: \"server-1\",\n      options: {},\n      params: null,\n      parentID: null,\n      requestID: \"1\",\n      span: null,\n      tracing: null\n    });\n    expect(broker.localBus.emit).toHaveBeenCalledTimes(0);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call emitLocalServices with object payload","suites":["Test broker broadcastLocal"],"updatePoint":{"line":3303,"column":55},"line":3303,"code":"  it(\"should call emitLocalServices with object payload\", () => {\n    broker.localBus.emit.mockClear();\n    broker.emitLocalServices.mockClear();\n    broker.broadcastLocal(\"user.event\", {\n      name: \"John\"\n    });\n    expect(broker.emitLocalServices).toHaveBeenCalledTimes(1);\n    const ctx = broker.emitLocalServices.mock.calls[0][0];\n    expect(broker.emitLocalServices).toHaveBeenNthCalledWith(1, ctx);\n    expect(ctx.toJSON()).toEqual({\n      id: \"1\",\n      ackID: null,\n      cachedResult: false,\n      caller: null,\n      eventGroups: undefined,\n      eventName: \"user.event\",\n      eventType: \"broadcastLocal\",\n      level: 1,\n      meta: {},\n      needAck: null,\n      nodeID: \"server-1\",\n      options: {},\n      params: {\n        name: \"John\"\n      },\n      parentID: null,\n      requestID: \"1\",\n      span: null,\n      tracing: null\n    });\n    expect(broker.localBus.emit).toHaveBeenCalledTimes(0);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call emitLocalServices with object payload","suites":["Test broker broadcastLocal"],"updatePoint":{"line":3335,"column":55},"line":3335,"code":"  it(\"should call emitLocalServices with object payload\", () => {\n    broker.localBus.emit.mockClear();\n    broker.emitLocalServices.mockClear();\n    broker.broadcastLocal(\"$user.event\", {\n      name: \"John\"\n    });\n    expect(broker.emitLocalServices).toHaveBeenCalledTimes(1);\n    const ctx = broker.emitLocalServices.mock.calls[0][0];\n    expect(broker.emitLocalServices).toHaveBeenNthCalledWith(1, ctx);\n    expect(ctx.toJSON()).toEqual({\n      id: \"1\",\n      ackID: null,\n      cachedResult: false,\n      caller: null,\n      eventGroups: undefined,\n      eventName: \"$user.event\",\n      eventType: \"broadcastLocal\",\n      level: 1,\n      meta: {},\n      needAck: null,\n      nodeID: \"server-1\",\n      options: {},\n      params: {\n        name: \"John\"\n      },\n      parentID: null,\n      requestID: \"1\",\n      span: null,\n      tracing: null\n    });\n    expect(broker.localBus.emit).toHaveBeenCalledTimes(1);\n    expect(broker.localBus.emit).toHaveBeenCalledWith(\"$user.event\", {\n      name: \"John\"\n    });\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should ping one node","suites":["Test broker ping"],"updatePoint":{"line":3387,"column":26},"line":3387,"code":"  it(\"should ping one node\", () => {\n    let p = broker.ping(\"node-2\").catch(protectReject);\n    broker.localBus.emit(\"$node.pong\", {\n      nodeID: \"node-2\",\n      elapsedTime: 5,\n      timeDiff: 3\n    });\n    return p.then(res => {\n      expect(res).toEqual({\n        nodeID: \"node-2\",\n        elapsedTime: 5,\n        timeDiff: 3\n      });\n      expect(broker.transit.sendPing).toHaveBeenCalledTimes(1);\n      expect(broker.transit.sendPing).toHaveBeenCalledWith(\"node-2\");\n    });\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should ping one node with timeout","suites":["Test broker ping"],"updatePoint":{"line":3404,"column":39},"line":3404,"code":"  it(\"should ping one node with timeout\", () => {\n    broker.transit.sendPing.mockClear();\n    let p = broker.ping(\"node-2\", 500).catch(protectReject);\n    clock.tick(600);\n    return p.then(res => {\n      expect(res).toEqual(null);\n      expect(broker.transit.sendPing).toHaveBeenCalledTimes(1);\n      expect(broker.transit.sendPing).toHaveBeenCalledWith(\"node-2\");\n    });\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should ping multiple node","suites":["Test broker ping"],"updatePoint":{"line":3414,"column":31},"line":3414,"code":"  it(\"should ping multiple node\", () => {\n    broker.transit.sendPing.mockClear();\n    let p = broker.ping([\"node-2\", \"node-3\"]).catch(protectReject);\n    broker.localBus.emit(\"$node.pong\", {\n      nodeID: \"node-2\",\n      elapsedTime: 5,\n      timeDiff: 3\n    });\n    broker.localBus.emit(\"$node.pong\", {\n      nodeID: \"node-3\",\n      elapsedTime: 50,\n      timeDiff: 30\n    });\n    return p.then(res => {\n      expect(res).toEqual({\n        \"node-2\": {\n          elapsedTime: 5,\n          nodeID: \"node-2\",\n          timeDiff: 3\n        },\n        \"node-3\": {\n          elapsedTime: 50,\n          nodeID: \"node-3\",\n          timeDiff: 30\n        }\n      });\n      expect(broker.transit.sendPing).toHaveBeenCalledTimes(2);\n      expect(broker.transit.sendPing).toHaveBeenCalledWith(\"node-2\");\n      expect(broker.transit.sendPing).toHaveBeenCalledWith(\"node-3\");\n    });\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should ping multiple node with timeout","suites":["Test broker ping"],"updatePoint":{"line":3445,"column":44},"line":3445,"code":"  it(\"should ping multiple node with timeout\", () => {\n    broker.transit.sendPing.mockClear();\n    let p = broker.ping([\"node-2\", \"node-3\"], 1000).catch(protectReject);\n    broker.localBus.emit(\"$node.pong\", {\n      nodeID: \"node-3\",\n      elapsedTime: 50,\n      timeDiff: 30\n    });\n    clock.tick(1100);\n    return p.then(res => {\n      expect(res).toEqual({\n        \"node-2\": null,\n        \"node-3\": {\n          elapsedTime: 50,\n          nodeID: \"node-3\",\n          timeDiff: 30\n        }\n      });\n      expect(broker.transit.sendPing).toHaveBeenCalledTimes(2);\n      expect(broker.transit.sendPing).toHaveBeenCalledWith(\"node-2\");\n      expect(broker.transit.sendPing).toHaveBeenCalledWith(\"node-3\");\n    });\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should ping all available nodes (except local)","suites":["Test broker ping"],"updatePoint":{"line":3468,"column":52},"line":3468,"code":"  it(\"should ping all available nodes (except local)\", () => {\n    broker.transit.sendPing.mockClear();\n    broker.registry.getNodeList = jest.fn(() => [{\n      id: \"node-1\",\n      local: true,\n      available: true\n    }, {\n      id: \"node-3\",\n      local: false,\n      available: true\n    }, {\n      id: \"node-4\",\n      local: false,\n      available: true\n    }]);\n    let p = broker.ping().catch(protectReject);\n    broker.localBus.emit(\"$node.pong\", {\n      nodeID: \"node-3\",\n      elapsedTime: 30,\n      timeDiff: 33\n    });\n    broker.localBus.emit(\"$node.pong\", {\n      nodeID: \"node-4\",\n      elapsedTime: 40,\n      timeDiff: 44\n    });\n    return p.then(res => {\n      expect(res).toEqual({\n        \"node-3\": {\n          elapsedTime: 30,\n          nodeID: \"node-3\",\n          timeDiff: 33\n        },\n        \"node-4\": {\n          elapsedTime: 40,\n          nodeID: \"node-4\",\n          timeDiff: 44\n        }\n      });\n      expect(broker.transit.sendPing).toHaveBeenCalledTimes(2);\n      expect(broker.transit.sendPing).toHaveBeenCalledWith(\"node-3\");\n      expect(broker.transit.sendPing).toHaveBeenCalledWith(\"node-4\");\n    });\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call H.getHealthStatus","suites":["Test broker getHealthStatus"],"updatePoint":{"line":3517,"column":35},"line":3517,"code":"  it(\"should call H.getHealthStatus\", () => {\n    broker.getHealthStatus();\n    expect(H.getHealthStatus).toHaveBeenCalledTimes(1);\n    expect(H.getHealthStatus).toHaveBeenCalledWith(broker);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call the original generateToken","suites":["Test broker generateUid"],"updatePoint":{"line":3524,"column":44},"line":3524,"code":"  it(\"should call the original generateToken\", () => {\n    let broker = new ServiceBroker({\n      logger: false\n    });\n    utils.generateToken.mockClear();\n    expect(broker.generateUid()).toBe(\"1\");\n    expect(utils.generateToken).toHaveBeenCalledTimes(1);\n    expect(utils.generateToken).toHaveBeenCalledWith();\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call the original generateToken","suites":["Test broker generateUid"],"updatePoint":{"line":3533,"column":44},"line":3533,"code":"  it(\"should call the original generateToken\", () => {\n    let counter = 1;\n    const customUidGenerator = jest.fn(broker => `${broker.nodeID}-${counter++}`);\n    let broker = new ServiceBroker({\n      nodeID: \"node-100\",\n      logger: false,\n      uidGenerator: customUidGenerator\n    });\n    utils.generateToken.mockClear();\n    expect(broker.generateUid()).toBe(\"node-100-1\");\n    expect(utils.generateToken).toHaveBeenCalledTimes(0);\n    expect(customUidGenerator).toHaveBeenCalledTimes(1);\n    expect(customUidGenerator).toHaveBeenCalledWith(broker);\n    customUidGenerator.mockClear();\n    expect(broker.generateUid()).toBe(\"node-100-2\");\n    expect(utils.generateToken).toHaveBeenCalledTimes(0);\n    expect(customUidGenerator).toHaveBeenCalledTimes(1);\n    expect(customUidGenerator).toHaveBeenCalledWith(broker);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call registry.getLocalNodeInfo","suites":["Test registry links"],"updatePoint":{"line":3562,"column":43},"line":3562,"code":"  it(\"should call registry.getLocalNodeInfo\", () => {\n    broker.getLocalNodeInfo();\n    expect(broker.registry.getLocalNodeInfo).toHaveBeenCalledTimes(1);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call registry.getGroups","suites":["Test registry links"],"updatePoint":{"line":3566,"column":36},"line":3566,"code":"  it(\"should call registry.getGroups\", () => {\n    broker.getEventGroups(\"event.name\");\n    expect(broker.registry.events.getGroups).toHaveBeenCalledTimes(1);\n    expect(broker.registry.events.getGroups).toHaveBeenCalledWith(\"event.name\");\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call registry.getAllEndpoints","suites":["Test registry links"],"updatePoint":{"line":3571,"column":42},"line":3571,"code":"  it(\"should call registry.getAllEndpoints\", () => {\n    const res = broker.hasEventListener(\"event.name\");\n    expect(res).toBe(true);\n    expect(broker.registry.events.getAllEndpoints).toHaveBeenCalledTimes(1);\n    expect(broker.registry.events.getAllEndpoints).toHaveBeenCalledWith(\"event.name\");\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call registry.getAllEndpoints","suites":["Test registry links"],"updatePoint":{"line":3577,"column":42},"line":3577,"code":"  it(\"should call registry.getAllEndpoints\", () => {\n    broker.registry.events.getAllEndpoints.mockClear();\n    const res = broker.getEventListeners(\"event.name\");\n    expect(res).toEqual([{}]);\n    expect(broker.registry.events.getAllEndpoints).toHaveBeenCalledTimes(1);\n    expect(broker.registry.events.getAllEndpoints).toHaveBeenCalledWith(\"event.name\");\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should call registry.events.emitLocalServices","suites":["Test registry links"],"updatePoint":{"line":3584,"column":51},"line":3584,"code":"  it(\"should call registry.events.emitLocalServices\", () => {\n    const ctx = {\n      id: \"123\"\n    };\n    broker.emitLocalServices(ctx);\n    expect(broker.registry.events.emitLocalServices).toHaveBeenCalledTimes(1);\n    expect(broker.registry.events.emitLocalServices).toHaveBeenCalledWith(ctx);\n  });","file":"unit/service-broker.spec.js","skipped":false,"dir":"test"},{"name":"should throw error if missing serviceBroker instance","suites":["Test Service class","Test constructor"],"updatePoint":{"line":19,"column":60},"line":19,"code":"    it(\"should throw error if missing serviceBroker instance\", () => {\n      expect(() => {\n        new Service();\n      }).toThrowError(\"Must set a ServiceBroker instance!\");\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should set broker to local variable","suites":["Test Service class","Test constructor"],"updatePoint":{"line":24,"column":43},"line":24,"code":"    it(\"should set broker to local variable\", () => {\n      Service.prototype.parseServiceSchema.mockClear();\n      const svc = new Service(broker);\n      expect(svc.broker).toBe(broker);\n      expect(svc.Promise).toBe(broker.Promise);\n      expect(Service.prototype.parseServiceSchema).toBeCalledTimes(0);\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should call the parseServiceSchema","suites":["Test Service class","Test constructor"],"updatePoint":{"line":31,"column":42},"line":31,"code":"    it(\"should call the parseServiceSchema\", () => {\n      Service.prototype.parseServiceSchema.mockClear();\n      const schema = {\n        name: \"posts\"\n      };\n      const svc = new Service(broker, schema);\n      expect(svc.broker).toBe(broker);\n      expect(svc.Promise).toBe(broker.Promise);\n      expect(Service.prototype.parseServiceSchema).toBeCalledTimes(1);\n      expect(Service.prototype.parseServiceSchema).toBeCalledWith(schema);\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should throw error if missing schema","suites":["Test Service class","Test parseServiceSchema"],"updatePoint":{"line":52,"column":44},"line":52,"code":"    it(\"should throw error if missing schema\", () => {\n      expect(() => {\n        svc.parseServiceSchema();\n      }).toThrowError(\"The service schema can't be null. Maybe is it not a service schema?\");\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should throw error if name is empty","suites":["Test Service class","Test parseServiceSchema"],"updatePoint":{"line":57,"column":43},"line":57,"code":"    it(\"should throw error if name is empty\", () => {\n      Service.applyMixins.mockClear();\n      expect(() => {\n        /* eslint-disable-next-line no-console */\n        console.error = jest.fn();\n        svc.parseServiceSchema({});\n      }).toThrowError(\"Service name can't be empty! Maybe it is not a valid Service schema. Maybe is it not a service schema?\");\n      expect(Service.applyMixins).toBeCalledTimes(0);\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should set common local variables","suites":["Test Service class","Test parseServiceSchema"],"updatePoint":{"line":66,"column":41},"line":66,"code":"    it(\"should set common local variables\", () => {\n      Service.applyMixins.mockClear();\n      const schema = {\n        name: \"posts\"\n      };\n      svc.parseServiceSchema(schema);\n      expect(svc.originalSchema).toEqual({\n        name: \"posts\"\n      });\n      expect(svc.originalSchema).not.toBe(schema);\n      expect(Service.applyMixins).toBeCalledTimes(0);\n      expect(svc.name).toBe(\"posts\");\n      expect(svc.version).toBeUndefined();\n      expect(svc.settings).toEqual({});\n      expect(svc.metadata).toEqual({});\n      expect(svc.schema).toBe(schema);\n      expect(svc.fullName).toBe(\"posts\");\n      expect(svc.logger).toBeDefined();\n      expect(broker.getLogger).toBeCalledTimes(1);\n      expect(broker.getLogger).toBeCalledWith(\"posts\", {\n        svc: \"posts\",\n        ver: undefined\n      });\n      expect(svc.actions).toEqual({});\n      expect(svc.events).toEqual({});\n      expect(svc._init).toBeCalledTimes(1);\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should set common local variables with version","suites":["Test Service class","Test parseServiceSchema"],"updatePoint":{"line":93,"column":54},"line":93,"code":"    it(\"should set common local variables with version\", () => {\n      Service.applyMixins.mockClear();\n      broker.getLogger.mockClear();\n\n      svc._init.mockClear();\n\n      const schema = {\n        name: \"posts\",\n        version: 3,\n        mixins: []\n      };\n      svc.parseServiceSchema(schema);\n      expect(svc.originalSchema).toEqual({\n        name: \"posts\",\n        version: 3,\n        mixins: []\n      });\n      expect(svc.originalSchema).not.toBe(schema);\n      expect(Service.applyMixins).toBeCalledTimes(1);\n      expect(Service.applyMixins).toBeCalledWith(schema);\n      expect(svc.name).toBe(\"posts\");\n      expect(svc.version).toBe(3);\n      expect(svc.settings).toEqual({});\n      expect(svc.metadata).toEqual({});\n      expect(svc.schema).toBe(schema);\n      expect(svc.fullName).toBe(\"v3.posts\");\n      expect(svc.logger).toBeDefined();\n      expect(broker.getLogger).toBeCalledTimes(1);\n      expect(broker.getLogger).toBeCalledWith(\"v3.posts\", {\n        svc: \"posts\",\n        ver: 3\n      });\n      expect(svc.actions).toEqual({});\n      expect(svc.events).toEqual({});\n      expect(svc._init).toBeCalledTimes(1);\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should set common local variables with version & noVersionPrefix","suites":["Test Service class","Test parseServiceSchema"],"updatePoint":{"line":129,"column":72},"line":129,"code":"    it(\"should set common local variables with version & noVersionPrefix\", () => {\n      Service.applyMixins.mockClear();\n      broker.getLogger.mockClear();\n\n      svc._init.mockClear();\n\n      const schema = {\n        name: \"posts\",\n        version: 3,\n        settings: {\n          $noVersionPrefix: true\n        }\n      };\n      svc.parseServiceSchema(schema);\n      expect(svc.name).toBe(\"posts\");\n      expect(svc.version).toBe(3);\n      expect(svc.fullName).toBe(\"posts\");\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should throw error if method name is now allowed","suites":["Test Service class","Test parseServiceSchema"],"updatePoint":{"line":147,"column":56},"line":147,"code":"    it(\"should throw error if method name is now allowed\", () => {\n      expect(() => {\n        svc.parseServiceSchema({\n          name: \"posts\",\n          methods: {\n            actions() {}\n\n          }\n        });\n      }).toThrowError(\"Invalid method name 'actions' in 'posts' service!\");\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should set methods and bind the service instance","suites":["Test Service class","Test parseServiceSchema"],"updatePoint":{"line":158,"column":56},"line":158,"code":"    it(\"should set methods and bind the service instance\", () => {\n      const schema = {\n        name: \"posts\",\n        methods: {\n          alpha: () => \"Alpha\",\n\n          beta() {\n            expect(this).toBe(svc);\n            return \"Beta\";\n          },\n\n          gamma: {\n            handler() {\n              expect(this).toBe(svc);\n              return \"Gamma\";\n            }\n\n          }\n        }\n      };\n      svc.parseServiceSchema(schema);\n      expect(svc.alpha).toBeInstanceOf(Function);\n      expect(svc.beta).toBeInstanceOf(Function);\n      expect(svc.gamma).toBeInstanceOf(Function);\n      expect(svc.alpha()).toBe(\"Alpha\");\n      expect(svc.beta()).toBe(\"Beta\");\n      expect(svc.gamma()).toBe(\"Gamma\");\n      expect(svc._serviceSpecification).toEqual({\n        name: \"posts\",\n        version: undefined,\n        fullName: \"posts\",\n        settings: {},\n        metadata: {},\n        actions: {},\n        events: {}\n      });\n      expect.assertions(9);\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should register actions","suites":["Test Service class","Test parseServiceSchema"],"updatePoint":{"line":196,"column":31},"line":196,"code":"    it(\"should register actions\", () => {\n      jest.spyOn(svc, \"_createAction\").mockImplementation((action, name) => ({\n        name,\n        handler: action.handler || action\n      }));\n      jest.spyOn(broker.middlewares, \"wrapHandler\").mockImplementation((type, handler, action) => handler);\n      jest.spyOn(broker.registry, \"createPrivateActionEndpoint\").mockImplementation(() => ({\n        id: \"nodeID\"\n      }));\n      const schema = {\n        name: \"posts\",\n        actions: {\n          alpha: jest.fn(() => \"Alpha\"),\n          beta: false,\n          gamma: {\n            handler: jest.fn()\n          }\n        }\n      };\n      svc.parseServiceSchema(schema);\n      expect(svc._createAction).toBeCalledTimes(2);\n      expect(svc._createAction).toHaveBeenNthCalledWith(1, schema.actions.alpha, \"alpha\");\n      expect(svc._createAction).toHaveBeenNthCalledWith(2, schema.actions.gamma, \"gamma\");\n      expect(broker.middlewares.wrapHandler).toBeCalledTimes(2);\n      expect(broker.middlewares.wrapHandler).toHaveBeenNthCalledWith(1, \"localAction\", expect.any(Function), {\n        name: \"alpha\",\n        handler: expect.any(Function)\n      });\n      expect(broker.middlewares.wrapHandler).toHaveBeenNthCalledWith(2, \"localAction\", expect.any(Function), {\n        name: \"gamma\",\n        handler: expect.any(Function)\n      });\n      expect(broker.registry.createPrivateActionEndpoint).toBeCalledTimes(2);\n      expect(broker.registry.createPrivateActionEndpoint).toHaveBeenNthCalledWith(1, {\n        name: \"alpha\",\n        handler: expect.any(Function)\n      });\n      expect(broker.registry.createPrivateActionEndpoint).toHaveBeenNthCalledWith(2, {\n        name: \"gamma\",\n        handler: expect.any(Function)\n      });\n      expect(svc._serviceSpecification).toEqual({\n        name: \"posts\",\n        version: undefined,\n        fullName: \"posts\",\n        settings: {},\n        metadata: {},\n        actions: {\n          alpha: {\n            name: \"alpha\",\n            handler: expect.any(Function)\n          },\n          gamma: {\n            name: \"gamma\",\n            handler: expect.any(Function)\n          }\n        },\n        events: {}\n      });\n      expect(svc.actions.alpha).toBeInstanceOf(Function);\n      expect(svc.actions.beta).toBeUndefined();\n      expect(svc.actions.gamma).toBeInstanceOf(Function);\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should call the handler via this.actions.xy","suites":["Test Service class","Test parseServiceSchema"],"updatePoint":{"line":259,"column":51},"line":259,"code":"    it(\"should call the handler via this.actions.xy\", () => {\n      const schema = {\n        name: \"posts\",\n        actions: {\n          alpha: jest.fn(() => \"Alpha\")\n        }\n      };\n      svc.parseServiceSchema(schema);\n      const res = svc.actions.alpha({\n        a: 5\n      });\n      expect(res).toBe(\"Alpha\");\n      expect(schema.actions.alpha).toBeCalledTimes(1);\n      expect(schema.actions.alpha).toBeCalledWith(expect.any(Context));\n      expect(schema.actions.alpha.mock.calls[0][0].params).toEqual({\n        a: 5\n      });\n      expect(schema.actions.alpha.mock.calls[0][0].endpoint).toEqual({\n        id: \"nodeID\"\n      });\n      schema.actions.alpha.mockClear();\n      const fakeCtx = {\n        id: 123\n      };\n      const res2 = svc.actions.alpha({\n        a: 5\n      }, {\n        ctx: fakeCtx\n      });\n      expect(res2).toBe(\"Alpha\");\n      expect(schema.actions.alpha).toBeCalledTimes(1);\n      expect(schema.actions.alpha).toBeCalledWith(fakeCtx);\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should register events","suites":["Test Service class","Test parseServiceSchema"],"updatePoint":{"line":292,"column":30},"line":292,"code":"    it(\"should register events\", () => {\n      jest.spyOn(svc, \"_createEvent\").mockImplementation((event, name) => ({\n        name,\n        handler: event.handler || event\n      }));\n      const schema = {\n        name: \"posts\",\n        events: {\n          \"user.created\": jest.fn(() => \"User created\"),\n          \"posts.updated\": {\n            handler: jest.fn(() => \"Post #1 updated\")\n          }\n        }\n      };\n      svc.parseServiceSchema(schema);\n      expect(svc._createEvent).toBeCalledTimes(2);\n      expect(svc._createEvent).toHaveBeenNthCalledWith(1, schema.events[\"user.created\"], \"user.created\");\n      expect(svc._createEvent).toHaveBeenNthCalledWith(2, schema.events[\"posts.updated\"], \"posts.updated\");\n      expect(svc._serviceSpecification).toEqual({\n        name: \"posts\",\n        version: undefined,\n        fullName: \"posts\",\n        settings: {},\n        metadata: {},\n        actions: {},\n        events: {\n          \"user.created\": {\n            name: \"user.created\",\n            handler: expect.any(Function)\n          },\n          \"posts.updated\": {\n            name: \"posts.updated\",\n            handler: expect.any(Function)\n          }\n        }\n      });\n      expect(svc.events[\"user.created\"]).toBeInstanceOf(Function);\n      expect(svc.events[\"posts.updated\"]).toBeInstanceOf(Function);\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should call the handler via this.events.xy","suites":["Test Service class","Test parseServiceSchema"],"updatePoint":{"line":331,"column":50},"line":331,"code":"    it(\"should call the handler via this.events.xy\", () => {\n      const schema = {\n        name: \"posts\",\n        events: {\n          \"user.created\": jest.fn(() => \"User created\")\n        }\n      };\n      svc.parseServiceSchema(schema);\n      const res = svc.events[\"user.created\"]({\n        id: 5\n      });\n      expect(res).toBe(\"User created\");\n      expect(schema.events[\"user.created\"]).toBeCalledTimes(1);\n      expect(schema.events[\"user.created\"]).toBeCalledWith(expect.any(Context));\n      expect(schema.events[\"user.created\"].mock.calls[0][0].params).toEqual({\n        id: 5\n      });\n      expect(schema.events[\"user.created\"].mock.calls[0][0].eventName).toBe(\"user.created\");\n      expect(schema.events[\"user.created\"].mock.calls[0][0].eventType).toBe(\"emit\");\n      expect(schema.events[\"user.created\"].mock.calls[0][0].eventGroups).toEqual([\"posts\"]);\n      schema.events[\"user.created\"].mockClear();\n      const fakeCtx = {\n        id: 123\n      };\n      const res2 = svc.events[\"user.created\"]({\n        a: 5\n      }, {\n        ctx: fakeCtx\n      });\n      expect(res2).toBe(\"User created\");\n      expect(schema.events[\"user.created\"]).toBeCalledTimes(1);\n      expect(schema.events[\"user.created\"]).toBeCalledWith(fakeCtx);\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should call service single 'merged' hook","suites":["Test Service class","Test parseServiceSchema"],"updatePoint":{"line":364,"column":48},"line":364,"code":"    it(\"should call service single 'merged' hook\", () => {\n      const merged = jest.fn();\n      const schema = {\n        name: \"posts\",\n        merged\n      };\n      svc.parseServiceSchema(schema);\n      expect(merged).toBeCalledTimes(1);\n      expect(merged).toBeCalledWith(schema);\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should call service multi 'merged' hook","suites":["Test Service class","Test parseServiceSchema"],"updatePoint":{"line":374,"column":47},"line":374,"code":"    it(\"should call service multi 'merged' hook\", () => {\n      let FLOW = [];\n      const merged1 = jest.fn(() => FLOW.push(\"C1\"));\n      const merged2 = jest.fn(() => FLOW.push(\"C2\"));\n      const schema = {\n        name: \"posts\",\n        merged: [merged1, merged2]\n      };\n      svc.parseServiceSchema(schema);\n      expect(merged1).toBeCalledTimes(1);\n      expect(merged1).toBeCalledWith(schema);\n      expect(merged2).toBeCalledTimes(1);\n      expect(merged2).toBeCalledWith(schema);\n      expect(FLOW.join(\"-\")).toBe(\"C1-C2\");\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should skip the properties by $secureSettings","suites":["Test Service class","Test _getPublicSettings"],"updatePoint":{"line":395,"column":53},"line":395,"code":"    it(\"should skip the properties by $secureSettings\", () => {\n      expect(svc._getPublicSettings({\n        a: 5,\n        auth: {\n          user: \"user\",\n          pass: \"pass\"\n        },\n        tokens: {\n          a: 111,\n          b: 222\n        },\n        x: \"x\",\n        $secureSettings: [\"auth.pass\", \"tokens\"]\n      })).toEqual({\n        a: 5,\n        auth: {\n          user: \"user\"\n        },\n        x: \"x\"\n      });\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should keep all properties without $secureSettings","suites":["Test Service class","Test _getPublicSettings"],"updatePoint":{"line":416,"column":58},"line":416,"code":"    it(\"should keep all properties without $secureSettings\", () => {\n      expect(svc._getPublicSettings({\n        a: 5,\n        auth: {\n          user: \"user\",\n          pass: \"pass\"\n        },\n        tokens: {\n          a: 111,\n          b: 222\n        },\n        x: \"x\"\n      })).toEqual({\n        a: 5,\n        auth: {\n          user: \"user\",\n          pass: \"pass\"\n        },\n        tokens: {\n          a: 111,\n          b: 222\n        },\n        x: \"x\"\n      });\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should call broker methods","suites":["Test Service class","Test _init"],"updatePoint":{"line":449,"column":34},"line":449,"code":"    it(\"should call broker methods\", () => {\n      svc.parseServiceSchema({\n        name: \"posts\"\n      });\n      broker.addLocalService.mockClear();\n      broker.callMiddlewareHookSync.mockClear();\n\n      svc._init();\n\n      expect(broker.addLocalService).toBeCalledTimes(1);\n      expect(broker.addLocalService).toBeCalledWith(svc);\n      expect(broker.callMiddlewareHookSync).toBeCalledTimes(1);\n      expect(broker.callMiddlewareHookSync).toBeCalledWith(\"serviceCreated\", [svc]);\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should call service single 'created' hook","suites":["Test Service class","Test _init"],"updatePoint":{"line":463,"column":49},"line":463,"code":"    it(\"should call service single 'created' hook\", () => {\n      const created = jest.fn();\n      svc.parseServiceSchema({\n        name: \"posts\",\n        created\n      });\n      created.mockClear();\n\n      svc._init();\n\n      expect(created).toBeCalledTimes(1);\n      expect(created).toBeCalledWith();\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should call service multi 'created' hook","suites":["Test Service class","Test _init"],"updatePoint":{"line":476,"column":48},"line":476,"code":"    it(\"should call service multi 'created' hook\", () => {\n      let FLOW = [];\n      const created1 = jest.fn(() => FLOW.push(\"C1\"));\n      const created2 = jest.fn(() => FLOW.push(\"C2\"));\n      svc.parseServiceSchema({\n        name: \"posts\",\n        created: [created1, created2]\n      });\n      created1.mockClear();\n      created2.mockClear();\n      FLOW.length = 0;\n\n      svc._init();\n\n      expect(created1).toBeCalledTimes(1);\n      expect(created1).toBeCalledWith();\n      expect(created2).toBeCalledTimes(1);\n      expect(created2).toBeCalledWith();\n      expect(FLOW.join(\"-\")).toBe(\"C1-C2\");\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should call broker methods","suites":["Test Service class","Test _start"],"updatePoint":{"line":505,"column":34},"line":505,"code":"    it(\"should call broker methods\", async () => {\n      svc.parseServiceSchema({\n        name: \"posts\"\n      });\n      broker.registerLocalService.mockClear();\n      broker.callMiddlewareHook.mockClear();\n      svc.waitForServices.mockClear();\n      await svc._start();\n      expect(broker.callMiddlewareHook).toBeCalledTimes(2);\n      expect(broker.callMiddlewareHook).toHaveBeenNthCalledWith(1, \"serviceStarting\", [svc]);\n      expect(broker.callMiddlewareHook).toHaveBeenNthCalledWith(2, \"serviceStarted\", [svc]);\n      expect(broker.registerLocalService).toBeCalledTimes(1);\n      expect(broker.registerLocalService).toBeCalledWith(svc._serviceSpecification);\n      expect(svc.waitForServices).toBeCalledTimes(0);\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should call waitForServices if dependencies are defined","suites":["Test Service class","Test _start"],"updatePoint":{"line":520,"column":63},"line":520,"code":"    it(\"should call waitForServices if dependencies are defined\", async () => {\n      svc.parseServiceSchema({\n        name: \"posts\",\n        dependencies: [\"users\", \"auth\"]\n      });\n      broker.registerLocalService.mockClear();\n      broker.callMiddlewareHook.mockClear();\n      svc.waitForServices.mockClear();\n      await svc._start();\n      expect(broker.callMiddlewareHook).toBeCalledTimes(2);\n      expect(broker.callMiddlewareHook).toHaveBeenNthCalledWith(1, \"serviceStarting\", [svc]);\n      expect(broker.callMiddlewareHook).toHaveBeenNthCalledWith(2, \"serviceStarted\", [svc]);\n      expect(broker.registerLocalService).toBeCalledTimes(1);\n      expect(broker.registerLocalService).toBeCalledWith(svc._serviceSpecification);\n      expect(svc.waitForServices).toBeCalledTimes(1);\n      expect(svc.waitForServices).toBeCalledWith([\"users\", \"auth\"], 0, 1000);\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should call waitForServices if dependencies are defined & $dependencyTimeout","suites":["Test Service class","Test _start"],"updatePoint":{"line":537,"column":84},"line":537,"code":"    it(\"should call waitForServices if dependencies are defined & $dependencyTimeout\", async () => {\n      svc.parseServiceSchema({\n        name: \"posts\",\n        settings: {\n          $dependencyTimeout: 3000\n        },\n        dependencies: [\"users\", \"auth\"]\n      });\n      svc.waitForServices.mockClear();\n      await svc._start();\n      expect(svc.waitForServices).toBeCalledTimes(1);\n      expect(svc.waitForServices).toBeCalledWith([\"users\", \"auth\"], 3000, 1000);\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should call waitForServices if dependencies are defined & $dependencyInterval","suites":["Test Service class","Test _start"],"updatePoint":{"line":550,"column":85},"line":550,"code":"    it(\"should call waitForServices if dependencies are defined & $dependencyInterval\", async () => {\n      svc.parseServiceSchema({\n        name: \"posts\",\n        settings: {\n          $dependencyInterval: 100\n        },\n        dependencies: [\"users\", \"auth\"]\n      });\n      svc.waitForServices.mockClear();\n      await svc._start();\n      expect(svc.waitForServices).toBeCalledTimes(1);\n      expect(svc.waitForServices).toBeCalledWith([\"users\", \"auth\"], 0, 100);\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should call single started lifecycle event handler","suites":["Test Service class","Test _start"],"updatePoint":{"line":563,"column":58},"line":563,"code":"    it(\"should call single started lifecycle event handler\", async () => {\n      const started = jest.fn(async () => {});\n      svc.parseServiceSchema({\n        name: \"posts\",\n        started\n      });\n      await svc._start();\n      expect(started).toBeCalledTimes(1);\n      expect(started).toBeCalledWith();\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should call multiple started lifecycle event handler","suites":["Test Service class","Test _start"],"updatePoint":{"line":573,"column":60},"line":573,"code":"    it(\"should call multiple started lifecycle event handler\", async () => {\n      let FLOW = [];\n      const started1 = jest.fn(async () => FLOW.push(\"S1\"));\n      const started2 = jest.fn(async () => FLOW.push(\"S2\"));\n      svc.parseServiceSchema({\n        name: \"posts\",\n        started: [started1, started2]\n      });\n      await svc._start();\n      expect(started1).toBeCalledTimes(1);\n      expect(started1).toBeCalledWith();\n      expect(started2).toBeCalledTimes(1);\n      expect(started2).toBeCalledWith();\n      expect(FLOW.join(\"-\")).toBe(\"S1-S2\");\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should call broker methods","suites":["Test Service class","Test _stop"],"updatePoint":{"line":595,"column":34},"line":595,"code":"    it(\"should call broker methods\", async () => {\n      svc.parseServiceSchema({\n        name: \"posts\"\n      });\n      broker.callMiddlewareHook.mockClear();\n      await svc._stop();\n      expect(broker.callMiddlewareHook).toBeCalledTimes(2);\n      expect(broker.callMiddlewareHook).toHaveBeenNthCalledWith(1, \"serviceStopping\", [svc], {\n        reverse: true\n      });\n      expect(broker.callMiddlewareHook).toHaveBeenNthCalledWith(2, \"serviceStopped\", [svc], {\n        reverse: true\n      });\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should call single stopped lifecycle event handler","suites":["Test Service class","Test _stop"],"updatePoint":{"line":609,"column":58},"line":609,"code":"    it(\"should call single stopped lifecycle event handler\", async () => {\n      const stopped = jest.fn(async () => {});\n      svc.parseServiceSchema({\n        name: \"posts\",\n        stopped\n      });\n      await svc._stop();\n      expect(stopped).toBeCalledTimes(1);\n      expect(stopped).toBeCalledWith();\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should call multiple stopped lifecycle event handler","suites":["Test Service class","Test _stop"],"updatePoint":{"line":619,"column":60},"line":619,"code":"    it(\"should call multiple stopped lifecycle event handler\", async () => {\n      let FLOW = [];\n      const stopped1 = jest.fn(async () => FLOW.push(\"S1\"));\n      const stopped2 = jest.fn(async () => FLOW.push(\"S2\"));\n      svc.parseServiceSchema({\n        name: \"posts\",\n        stopped: [stopped1, stopped2]\n      });\n      await svc._stop();\n      expect(stopped1).toBeCalledTimes(1);\n      expect(stopped1).toBeCalledWith();\n      expect(stopped2).toBeCalledTimes(1);\n      expect(stopped2).toBeCalledWith();\n      expect(FLOW.join(\"-\")).toBe(\"S2-S1\");\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should throw error if method schema is invalid","suites":["Test Service class","Test _createMethod"],"updatePoint":{"line":644,"column":54},"line":644,"code":"    it(\"should throw error if method schema is invalid\", () => {\n      expect(() => {\n        svc._createMethod(null, \"list\");\n      }).toThrowError(\"Invalid method definition in 'list' method in 'v2.posts' service!\");\n      expect(() => {\n        svc._createMethod(\"schema\", \"list\");\n      }).toThrowError(\"Invalid method definition in 'list' method in 'v2.posts' service!\");\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should throw error if action handler is not defined","suites":["Test Service class","Test _createMethod"],"updatePoint":{"line":652,"column":59},"line":652,"code":"    it(\"should throw error if action handler is not defined\", () => {\n      expect(() => {\n        svc._createMethod({}, \"list\");\n      }).toThrowError(\"Missing method handler on 'list' method in 'v2.posts' service!\");\n      expect(() => {\n        svc._createMethod({\n          handler: null\n        }, \"list\");\n      }).toThrowError(\"Missing method handler on 'list' method in 'v2.posts' service!\");\n      expect(() => {\n        svc._createMethod({\n          handler: \"wrong\"\n        }, \"list\");\n      }).toThrowError(\"Missing method handler on 'list' method in 'v2.posts' service!\");\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should create action definition from a shorthand handler","suites":["Test Service class","Test _createMethod"],"updatePoint":{"line":667,"column":64},"line":667,"code":"    it(\"should create action definition from a shorthand handler\", () => {\n      const handler = jest.fn(function (name) {\n        expect(this).toBe(svc);\n        return `Hello ${name}`;\n      });\n\n      const res = svc._createMethod(handler, \"list\");\n\n      expect(res).toEqual({\n        name: \"list\",\n        handler: expect.any(Function),\n        service: svc\n      });\n      expect(svc.list).toBe(res.handler);\n      expect(svc.list(\"John\")).toBe(\"Hello John\");\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should create action definition from a schema","suites":["Test Service class","Test _createMethod"],"updatePoint":{"line":683,"column":53},"line":683,"code":"    it(\"should create action definition from a schema\", () => {\n      const schema = {\n        uppercase: true,\n        handler: jest.fn(function (name) {\n          expect(this).toBe(svc);\n          return `Hello ${name}`;\n        })\n      };\n\n      const res = svc._createMethod(schema, \"hello\");\n\n      expect(res).toEqual({\n        name: \"hello\",\n        handler: expect.any(Function),\n        service: svc,\n        uppercase: true\n      });\n      expect(svc.hello).toBe(res.handler);\n      expect(svc.hello(\"John\")).toBe(\"Hello John\");\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should throw error if action schema is invalid","suites":["Test Service class","Test _createAction"],"updatePoint":{"line":714,"column":54},"line":714,"code":"    it(\"should throw error if action schema is invalid\", () => {\n      expect(() => {\n        svc._createAction(null, \"list\");\n      }).toThrowError(\"Invalid action definition in 'list' action in 'v2.posts' service!\");\n      expect(() => {\n        svc._createAction(\"schema\", \"list\");\n      }).toThrowError(\"Invalid action definition in 'list' action in 'v2.posts' service!\");\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should throw error if action handler is not defined","suites":["Test Service class","Test _createAction"],"updatePoint":{"line":722,"column":59},"line":722,"code":"    it(\"should throw error if action handler is not defined\", () => {\n      expect(() => {\n        svc._createAction({}, \"list\");\n      }).toThrowError(\"Missing action handler on 'list' action in 'v2.posts' service!\");\n      expect(() => {\n        svc._createAction({\n          handler: null\n        }, \"list\");\n      }).toThrowError(\"Missing action handler on 'list' action in 'v2.posts' service!\");\n      expect(() => {\n        svc._createAction({\n          handler: \"wrong\"\n        }, \"list\");\n      }).toThrowError(\"Missing action handler on 'list' action in 'v2.posts' service!\");\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should create action definition from a shorthand handler","suites":["Test Service class","Test _createAction"],"updatePoint":{"line":737,"column":64},"line":737,"code":"    it(\"should create action definition from a shorthand handler\", () => {\n      const handler = jest.fn(function () {\n        expect(this).toBe(svc);\n        return \"Hello\";\n      });\n      svc.Promise.method.mockClear();\n\n      const res = svc._createAction(handler, \"list\");\n\n      expect(res).toEqual({\n        name: \"v2.posts.list\",\n        rawName: \"list\",\n        handler: expect.any(Function),\n        service: svc\n      });\n      expect.assertions(4);\n      expect(svc.Promise.method).toBeCalledTimes(1);\n      return res.handler().then(res => expect(res).toBe(\"Hello\"));\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should create action definition with cache","suites":["Test Service class","Test _createAction"],"updatePoint":{"line":756,"column":50},"line":756,"code":"    it(\"should create action definition with cache\", () => {\n      const handler = jest.fn(() => \"Hello\");\n\n      const res = svc._createAction({\n        params: {\n          a: \"string\"\n        },\n        cache: true,\n        etc: \"etc\",\n        handler\n      }, \"list\");\n\n      expect(res).toEqual({\n        name: \"v2.posts.list\",\n        rawName: \"list\",\n        handler: expect.any(Function),\n        service: svc,\n        cache: true,\n        etc: \"etc\",\n        params: {\n          a: \"string\"\n        }\n      });\n      expect.assertions(2);\n      return res.handler().then(res => expect(res).toBe(\"Hello\"));\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should create action definition without prefixes","suites":["Test Service class","Test _createAction"],"updatePoint":{"line":782,"column":56},"line":782,"code":"    it(\"should create action definition without prefixes\", () => {\n      svc.settings.$noServiceNamePrefix = true;\n      const handler = jest.fn(() => \"Hello\");\n\n      const res = svc._createAction({\n        handler\n      }, \"list\");\n\n      expect(res).toStrictEqual({\n        name: \"list\",\n        rawName: \"list\",\n        handler: expect.any(Function),\n        service: svc\n      });\n      svc.settings.$noServiceNamePrefix = false;\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should set cache: true if $cache is defined in service settings","suites":["Test Service class","Test _createAction"],"updatePoint":{"line":798,"column":71},"line":798,"code":"    it(\"should set cache: true if $cache is defined in service settings\", () => {\n      svc.settings.$cache = true;\n      const handler = jest.fn(() => \"Hello\");\n\n      const res = svc._createAction({\n        handler\n      }, \"list\");\n\n      expect(res).toStrictEqual({\n        name: \"v2.posts.list\",\n        rawName: \"list\",\n        handler: expect.any(Function),\n        service: svc,\n        cache: true\n      });\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should set cache: true if $cache is defined in service settings","suites":["Test Service class","Test _createAction"],"updatePoint":{"line":814,"column":71},"line":814,"code":"    it(\"should set cache: true if $cache is defined in service settings\", () => {\n      svc.settings.$cache = false;\n      const handler = jest.fn(() => \"Hello\");\n\n      const res = svc._createAction({\n        handler\n      }, \"list\");\n\n      expect(res).toStrictEqual({\n        name: \"v2.posts.list\",\n        rawName: \"list\",\n        handler: expect.any(Function),\n        service: svc,\n        cache: false\n      });\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should not overwrite cache value if defined in action schema","suites":["Test Service class","Test _createAction"],"updatePoint":{"line":830,"column":68},"line":830,"code":"    it(\"should not overwrite cache value if defined in action schema\", () => {\n      svc.settings.$cache = true;\n      const handler = jest.fn(() => \"Hello\");\n\n      const res = svc._createAction({\n        handler,\n        cache: false\n      }, \"list\");\n\n      expect(res).toStrictEqual({\n        name: \"v2.posts.list\",\n        rawName: \"list\",\n        handler: expect.any(Function),\n        service: svc,\n        cache: false\n      });\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should not overwrite cache value if defined in action schema","suites":["Test Service class","Test _createAction"],"updatePoint":{"line":847,"column":68},"line":847,"code":"    it(\"should not overwrite cache value if defined in action schema\", () => {\n      svc.settings.$cache = true;\n      const handler = jest.fn(() => \"Hello\");\n\n      const res = svc._createAction({\n        handler,\n        cache: {\n          keys: [\"id\"]\n        }\n      }, \"list\");\n\n      expect(res).toStrictEqual({\n        name: \"v2.posts.list\",\n        rawName: \"list\",\n        handler: expect.any(Function),\n        service: svc,\n        cache: {\n          keys: [\"id\"]\n        }\n      });\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should throw error if event schema is invalid","suites":["Test Service class","Test _createEvent"],"updatePoint":{"line":879,"column":53},"line":879,"code":"    it(\"should throw error if event schema is invalid\", () => {\n      expect(() => {\n        svc._createEvent(null, \"user.created\");\n      }).toThrowError(\"Invalid event definition in 'user.created' event in 'v2.posts' service!\");\n      expect(() => {\n        svc._createEvent(\"schema\", \"user.created\");\n      }).toThrowError(\"Invalid event definition in 'user.created' event in 'v2.posts' service!\");\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should throw error if event handler is not defined","suites":["Test Service class","Test _createEvent"],"updatePoint":{"line":887,"column":58},"line":887,"code":"    it(\"should throw error if event handler is not defined\", () => {\n      expect(() => {\n        svc._createEvent({}, \"user.created\");\n      }).toThrowError(\"Missing event handler on 'user.created' event in 'v2.posts' service!\");\n      expect(() => {\n        svc._createEvent({\n          handler: null\n        }, \"user.created\");\n      }).toThrowError(\"Missing event handler on 'user.created' event in 'v2.posts' service!\");\n      expect(() => {\n        svc._createEvent({\n          handler: \"wrong\"\n        }, \"user.created\");\n      }).toThrowError(\"Missing event handler on 'user.created' event in 'v2.posts' service!\");\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should create event definition from a shorthand handler","suites":["Test Service class","Test _createEvent"],"updatePoint":{"line":902,"column":63},"line":902,"code":"    it(\"should create event definition from a shorthand handler\", () => {\n      const handler = jest.fn(function () {\n        expect(this).toBe(svc);\n        return \"Hello\";\n      });\n\n      const res = svc._createEvent(handler, \"user.created\");\n\n      expect(res).toEqual({\n        name: \"user.created\",\n        handler: expect.any(Function),\n        service: svc\n      });\n      expect.assertions(3);\n      return res.handler({}).then(res => expect(res).toBe(\"Hello\"));\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should create event definition from event schema","suites":["Test Service class","Test _createEvent"],"updatePoint":{"line":918,"column":56},"line":918,"code":"    it(\"should create event definition from event schema\", () => {\n      svc.Promise.method.mockClear();\n      const handler = jest.fn(function () {\n        expect(this).toBe(svc);\n        return \"Hello\";\n      });\n\n      const res = svc._createEvent({\n        name: \"user.updated\",\n        handler,\n        etc: \"etc\"\n      }, \"other\");\n\n      expect(res).toEqual({\n        name: \"user.updated\",\n        handler: expect.any(Function),\n        service: svc,\n        etc: \"etc\"\n      });\n      expect.assertions(4);\n      expect(svc.Promise.method).toBeCalledTimes(1);\n      return res.handler({}).then(res => expect(res).toBe(\"Hello\"));\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should create event definition with multiple handlers","suites":["Test Service class","Test _createEvent"],"updatePoint":{"line":941,"column":61},"line":941,"code":"    it(\"should create event definition with multiple handlers\", () => {\n      const handler1 = jest.fn(function () {\n        expect(this).toBe(svc);\n        return \"Hello1\";\n      });\n      const handler2 = jest.fn(function () {\n        expect(this).toBe(svc);\n        return \"Hello2\";\n      });\n\n      const res = svc._createEvent({\n        handler: [handler1, handler2]\n      }, \"user.updated\");\n\n      expect(res).toEqual({\n        name: \"user.updated\",\n        handler: expect.any(Function),\n        service: svc\n      });\n      expect.assertions(4);\n      return res.handler({}).then(res => expect(res).toEqual([\"Hello1\", \"Hello2\"]));\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should call handler with legacy arguments","suites":["Test Service class","Test _createEvent"],"updatePoint":{"line":963,"column":49},"line":963,"code":"    it(\"should call handler with legacy arguments\", () => {\n      const handler = function (payload, nodeID, eventName, ctx) {\n        expect(this).toBe(svc);\n        return {\n          payload,\n          nodeID,\n          eventName,\n          ctx\n        };\n      };\n\n      const res = svc._createEvent({\n        handler\n      }, \"user.updated\");\n\n      expect.assertions(5);\n      const ctx = {\n        params: {\n          a: 5\n        },\n        nodeID: \"node-100\",\n        eventName: \"user.removed\"\n      };\n      return res.handler(ctx).then(res => {\n        expect(res.payload).toEqual({\n          a: 5\n        });\n        expect(res.nodeID).toEqual(\"node-100\");\n        expect(res.eventName).toEqual(\"user.removed\");\n        expect(res.ctx).toBe(ctx);\n      });\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should call handler with context","suites":["Test Service class","Test _createEvent"],"updatePoint":{"line":995,"column":40},"line":995,"code":"    it(\"should call handler with context\", () => {\n      const handler = function (ctx) {\n        expect(this).toBe(svc);\n        return {\n          ctx\n        };\n      };\n\n      const res = svc._createEvent({\n        handler\n      }, \"user.updated\");\n\n      expect.assertions(5);\n      const ctx = {\n        params: {\n          a: 5\n        },\n        nodeID: \"node-100\",\n        eventName: \"user.removed\"\n      };\n      return res.handler(ctx).then(res => {\n        expect(res.payload).toBeUndefined();\n        expect(res.nodeID).toBeUndefined();\n        expect(res.eventName).toBeUndefined();\n        expect(res.ctx).toBe(ctx);\n      });\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should call handler with multiple times","suites":["Test Service class","Test _createEvent"],"updatePoint":{"line":1022,"column":47},"line":1022,"code":"    it(\"should call handler with multiple times\", () => {\n      const handler1 = function (ctx) {\n        expect(this).toBe(svc);\n        return {\n          ctx\n        };\n      };\n\n      const handler2 = function (payload, nodeID, eventName, ctx) {\n        expect(this).toBe(svc);\n        return {\n          payload,\n          nodeID,\n          eventName,\n          ctx\n        };\n      };\n\n      const res = svc._createEvent({\n        handler: [handler1, handler2]\n      }, \"user.updated\"); //expect.assertions(5);\n\n\n      const ctx = {\n        params: {\n          a: 5\n        },\n        nodeID: \"node-100\",\n        eventName: \"user.removed\"\n      };\n      return res.handler(ctx).then(([res1, res2]) => {\n        expect(res1.payload).toBeUndefined();\n        expect(res1.nodeID).toBeUndefined();\n        expect(res1.eventName).toBeUndefined();\n        expect(res1.ctx).toBe(ctx);\n        expect(res2.payload).toEqual({\n          a: 5\n        });\n        expect(res2.nodeID).toEqual(\"node-100\");\n        expect(res2.eventName).toEqual(\"user.removed\");\n        expect(res2.ctx).toBe(ctx);\n      });\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should call the event handler","suites":["Test Service class","Test emitLocalEventHandler"],"updatePoint":{"line":1071,"column":37},"line":1071,"code":"    it(\"should call the event handler\", async () => {\n      svc.parseServiceSchema({\n        name: \"posts\",\n        version: 2,\n        events: {\n          \"user.created\"(ctx) {\n            expect(this).toBe(svc);\n            expect(ctx.params).toEqual({\n              id: 5\n            });\n            expect(ctx.eventName).toBe(\"user.created\");\n            expect(ctx.eventGroups).toEqual([\"posts\"]);\n            expect(ctx.eventType).toBe(\"emit\");\n            return \"Hello\";\n          }\n\n        }\n      });\n      const res = await svc.emitLocalEventHandler(\"user.created\", {\n        id: 5\n      });\n      expect(res).toBe(\"Hello\");\n      expect.assertions(6);\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should call the event handler with opts","suites":["Test Service class","Test emitLocalEventHandler"],"updatePoint":{"line":1095,"column":47},"line":1095,"code":"    it(\"should call the event handler with opts\", async () => {\n      svc.parseServiceSchema({\n        name: \"posts\",\n        version: 2,\n        events: {\n          \"user.created\"(ctx) {\n            expect(this).toBe(svc);\n            expect(ctx.params).toEqual({\n              id: 5\n            });\n            expect(ctx.eventName).toBe(\"user.created\");\n            expect(ctx.eventGroups).toEqual([\"posts\"]);\n            expect(ctx.eventType).toBe(\"emit\");\n            expect(ctx.requestID).toBe(\"12345\");\n            return \"Hello\";\n          }\n\n        }\n      });\n      const res = await svc.emitLocalEventHandler(\"user.created\", {\n        id: 5\n      }, {\n        requestID: \"12345\"\n      });\n      expect(res).toBe(\"Hello\");\n      expect.assertions(7);\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should throw error if event is not exist","suites":["Test Service class","Test emitLocalEventHandler"],"updatePoint":{"line":1122,"column":48},"line":1122,"code":"    it(\"should throw error if event is not exist\", async () => {\n      try {\n        await svc.emitLocalEventHandler(\"not.found\");\n      } catch (err) {\n        expect(err.code).toBe(500);\n        expect(err.type).toBe(\"NOT_FOUND_EVENT\");\n        expect(err.message).toBe(\"No 'not.found' registered local event handler\");\n        expect(err.data).toEqual({\n          eventName: \"not.found\"\n        });\n      }\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should call broker.waitForServices","suites":["Test Service class","Test waitForServices"],"updatePoint":{"line":1141,"column":42},"line":1141,"code":"    it(\"should call broker.waitForServices\", async () => {\n      await svc.waitForServices([\"users\", \"auth\"], 3000, 500);\n      expect(broker.waitForServices).toHaveBeenCalledTimes(1);\n      expect(broker.waitForServices).toHaveBeenCalledWith([\"users\", \"auth\"], 3000, 500, svc.logger);\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should return the schema if no mixins defined","suites":["Test Service class","Test static applyMixins"],"updatePoint":{"line":1150,"column":53},"line":1150,"code":"    it(\"should return the schema if no mixins defined\", () => {\n      Service.mergeSchemas.mockClear();\n      const schema = {\n        name: \"posts\"\n      };\n      const res = Service.applyMixins(schema);\n      expect(res).toBe(schema);\n      expect(Service.mergeSchemas).toBeCalledTimes(0);\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should call mergeSchema once","suites":["Test Service class","Test static applyMixins"],"updatePoint":{"line":1159,"column":36},"line":1159,"code":"    it(\"should call mergeSchema once\", () => {\n      Service.mergeSchemas.mockClear();\n      const mixin1 = {\n        name: \"users\"\n      };\n      const schema = {\n        name: \"posts\",\n        mixins: mixin1\n      };\n      const res = Service.applyMixins(schema);\n      expect(res).toEqual({\n        name: \"users\"\n      });\n      expect(Service.mergeSchemas).toBeCalledTimes(1);\n      expect(Service.mergeSchemas).toBeCalledWith(mixin1, schema);\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should call mergeSchema twice","suites":["Test Service class","Test static applyMixins"],"updatePoint":{"line":1175,"column":37},"line":1175,"code":"    it(\"should call mergeSchema twice\", () => {\n      Service.mergeSchemas.mockClear();\n      const mixin1 = {\n        name: \"users\"\n      };\n      const mixin2 = {\n        version: 2\n      };\n      const schema = {\n        name: \"posts\",\n        mixins: [mixin1, mixin2]\n      };\n      const res = Service.applyMixins(schema);\n      expect(res).toEqual({\n        version: 2\n      });\n      expect(Service.mergeSchemas).toBeCalledTimes(2);\n      expect(Service.mergeSchemas).toHaveBeenNthCalledWith(1, mixin2, mixin1);\n      expect(Service.mergeSchemas).toHaveBeenNthCalledWith(2, mixin2, schema);\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should call mergeSchema for multi-level mixins","suites":["Test Service class","Test static applyMixins"],"updatePoint":{"line":1195,"column":54},"line":1195,"code":"    it(\"should call mergeSchema for multi-level mixins\", () => {\n      Service.mergeSchemas.mockClear();\n      const mixin2 = {\n        version: 2\n      };\n      const mixin1 = {\n        name: \"users\",\n        mixins: [mixin2]\n      };\n      const schema = {\n        name: \"posts\",\n        mixins: [mixin1]\n      };\n      const res = Service.applyMixins(schema);\n      expect(res).toEqual({\n        version: 2\n      });\n      expect(Service.mergeSchemas).toBeCalledTimes(2);\n      expect(Service.mergeSchemas).toHaveBeenNthCalledWith(1, mixin2, mixin1);\n      expect(Service.mergeSchemas).toHaveBeenNthCalledWith(2, mixin2, schema);\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should call merge methods","suites":["Test Service class","Test static mergeSchemas"],"updatePoint":{"line":1240,"column":33},"line":1240,"code":"    it(\"should call merge methods\", () => {\n      const mixin2 = {};\n      const mixin = {\n        name: \"posts\",\n        version: 3,\n        mixins: [mixin2],\n        dependencies: [\"users\", \"auth\"],\n        settings: {\n          a: 5\n        },\n        metadata: {\n          region: \"us-west\"\n        },\n        hooks: {\n          before: {\n            \"*\": () => {}\n          },\n          after: {\n            list: [() => {}, () => {}]\n          },\n          error: {\n            \"*\": () => {}\n          }\n        },\n        actions: {\n          find() {},\n\n          get: {\n            cache: true,\n            params: {\n              a: \"string\"\n            }\n          },\n          delete: false\n        },\n        methods: {\n          doSomething() {}\n\n        },\n        events: {\n          \"user.created\"() {},\n\n          \"user.updated\": {\n            group: \"user\",\n            handler: () => {}\n          }\n        },\n\n        created() {},\n\n        started() {},\n\n        stopped() {},\n\n        custom: \"123\"\n      };\n      Service.mergeSchemas({}, mixin);\n      expect(Service.mergeSchemaSettings).toBeCalledTimes(1);\n      expect(Service.mergeSchemaSettings).toBeCalledWith(mixin.settings, undefined);\n      expect(Service.mergeSchemaMetadata).toBeCalledTimes(1);\n      expect(Service.mergeSchemaMetadata).toBeCalledWith(mixin.metadata, undefined);\n      expect(Service.mergeSchemaHooks).toBeCalledTimes(1);\n      expect(Service.mergeSchemaHooks).toBeCalledWith(mixin.hooks, {});\n      expect(Service.mergeSchemaActions).toBeCalledTimes(1);\n      expect(Service.mergeSchemaActions).toBeCalledWith(mixin.actions, {});\n      expect(Service.mergeSchemaMethods).toBeCalledTimes(1);\n      expect(Service.mergeSchemaMethods).toBeCalledWith(mixin.methods, undefined);\n      expect(Service.mergeSchemaEvents).toBeCalledTimes(1);\n      expect(Service.mergeSchemaEvents).toBeCalledWith(mixin.events, {});\n      expect(Service.mergeSchemaLifecycleHandlers).toBeCalledTimes(3);\n      expect(Service.mergeSchemaLifecycleHandlers).toBeCalledWith(mixin.created, undefined);\n      expect(Service.mergeSchemaLifecycleHandlers).toBeCalledWith(mixin.started, undefined);\n      expect(Service.mergeSchemaLifecycleHandlers).toBeCalledWith(mixin.stopped, undefined);\n      expect(Service.mergeSchemaUniqArray).toBeCalledTimes(2);\n      expect(Service.mergeSchemaUniqArray).toHaveBeenNthCalledWith(1, mixin.mixins, undefined);\n      expect(Service.mergeSchemaUniqArray).toHaveBeenNthCalledWith(2, mixin.dependencies, undefined);\n      expect(Service.mergeSchemaUnknown).toBeCalledTimes(1);\n      expect(Service.mergeSchemaUnknown).toHaveBeenNthCalledWith(1, mixin.custom, undefined);\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should call custom merge method","suites":["Test Service class","Test static mergeSchemas"],"updatePoint":{"line":1319,"column":39},"line":1319,"code":"    it(\"should call custom merge method\", () => {\n      Service.mergeSchemaUnknown.mockClear();\n      Service.mergeSchemaMyProp = jest.fn();\n      const mixin = {\n        myProp: \"123\"\n      };\n      Service.mergeSchemas({}, mixin);\n      expect(Service.mergeSchemaMyProp).toBeCalledTimes(1);\n      expect(Service.mergeSchemaMyProp).toBeCalledWith(\"123\", undefined);\n      expect(Service.mergeSchemaUnknown).toBeCalledTimes(0);\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should not overwrite the name & version","suites":["Test Service class","Test static mergeSchemas"],"updatePoint":{"line":1330,"column":47},"line":1330,"code":"    it(\"should not overwrite the name & version\", () => {\n      Service.mergeSchemaUnknown.mockClear();\n      const mixed = Service.mergeSchemas({\n        name: \"first\",\n        version: 1\n      }, {});\n      expect(mixed).toEqual({\n        name: \"first\",\n        version: 1\n      });\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should overwrite the name & version","suites":["Test Service class","Test static mergeSchemas"],"updatePoint":{"line":1341,"column":43},"line":1341,"code":"    it(\"should overwrite the name & version\", () => {\n      Service.mergeSchemaUnknown.mockClear();\n      const mixed = Service.mergeSchemas({\n        name: \"first\",\n        version: 1\n      }, {\n        name: \"second\",\n        version: 2\n      });\n      expect(mixed).toEqual({\n        name: \"second\",\n        version: 2\n      });\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should merge values","suites":["Test Service class","Test static mergeSchemaSettings"],"updatePoint":{"line":1357,"column":27},"line":1357,"code":"    it(\"should merge values\", () => {\n      const src = {\n        a: 5,\n        b: \"John\",\n        c: {\n          d: true,\n          e: 45.8\n        }\n      };\n      const prev = {\n        a: 10,\n        c: {\n          e: 10.5,\n          f: \"Fox\"\n        }\n      };\n      const res = Service.mergeSchemaSettings(src, prev);\n      expect(res).toEqual({\n        a: 5,\n        b: \"John\",\n        c: {\n          d: true,\n          e: 45.8,\n          f: \"Fox\"\n        }\n      });\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should merge values with $secureSettings","suites":["Test Service class","Test static mergeSchemaSettings"],"updatePoint":{"line":1384,"column":48},"line":1384,"code":"    it(\"should merge values with $secureSettings\", () => {\n      const src = {\n        $secureSettings: [\"a\", \"b\"],\n        a: 5,\n        b: \"John\",\n        c: {\n          d: true,\n          e: 45.8\n        }\n      };\n      const prev = {\n        $secureSettings: [\"c\", \"b\"],\n        a: 10,\n        c: {\n          e: 10.5,\n          f: \"Fox\"\n        }\n      };\n      const res = Service.mergeSchemaSettings(src, prev);\n      expect(res).toEqual({\n        $secureSettings: [\"a\", \"b\", \"c\"],\n        a: 5,\n        b: \"John\",\n        c: {\n          d: true,\n          e: 45.8,\n          f: \"Fox\"\n        }\n      });\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should merge values with $secureSettings (no target settings)","suites":["Test Service class","Test static mergeSchemaSettings"],"updatePoint":{"line":1414,"column":69},"line":1414,"code":"    it(\"should merge values with $secureSettings (no target settings)\", () => {\n      const src = {\n        $secureSettings: [\"a\", \"b\"],\n        a: 5,\n        b: \"John\",\n        c: {\n          d: true,\n          e: 45.8\n        }\n      };\n      const res = Service.mergeSchemaSettings(src, null);\n      expect(res).toEqual({\n        $secureSettings: [\"a\", \"b\"],\n        a: 5,\n        b: \"John\",\n        c: {\n          d: true,\n          e: 45.8\n        }\n      });\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should merge values with $secureSettings (no src settings)","suites":["Test Service class","Test static mergeSchemaSettings"],"updatePoint":{"line":1435,"column":66},"line":1435,"code":"    it(\"should merge values with $secureSettings (no src settings)\", () => {\n      const src = {\n        $secureSettings: [\"a\", \"b\"],\n        a: 5,\n        b: \"John\",\n        c: {\n          d: true,\n          e: 45.8\n        }\n      };\n      const res = Service.mergeSchemaSettings(null, src);\n      expect(res).toEqual({\n        $secureSettings: [\"a\", \"b\"],\n        a: 5,\n        b: \"John\",\n        c: {\n          d: true,\n          e: 45.8\n        }\n      });\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should merge values","suites":["Test Service class","Test static mergeSchemaMetadata"],"updatePoint":{"line":1458,"column":27},"line":1458,"code":"    it(\"should merge values\", () => {\n      const src = {\n        a: 5,\n        b: \"John\",\n        c: {\n          d: true,\n          e: 45.8\n        }\n      };\n      const prev = {\n        a: 10,\n        c: {\n          e: 10.5,\n          f: \"Fox\"\n        }\n      };\n      const res = Service.mergeSchemaMetadata(src, prev);\n      expect(res).toEqual({\n        a: 5,\n        b: \"John\",\n        c: {\n          d: true,\n          e: 45.8,\n          f: \"Fox\"\n        }\n      });\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should merge values","suites":["Test Service class","Test static mergeSchemaUniqArray"],"updatePoint":{"line":1487,"column":27},"line":1487,"code":"    it(\"should merge values\", () => {\n      const src = [1, 2, 3, 4, 5];\n      const prev = [2, 4, 6, 8, 10];\n      const res = Service.mergeSchemaUniqArray(src, prev);\n      expect(res).toEqual([1, 2, 3, 4, 5, 6, 8, 10]);\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should merge objects","suites":["Test Service class","Test static mergeSchemaUniqArray"],"updatePoint":{"line":1493,"column":28},"line":1493,"code":"    it(\"should merge objects\", () => {\n      const src = [{\n        id: 1\n      }, {\n        id: 2\n      }, {\n        id: 3\n      }, {\n        id: 4\n      }, {\n        id: 5\n      }];\n      const prev = [{\n        id: 2\n      }, {\n        id: 4\n      }, {\n        id: 6\n      }, {\n        id: 8\n      }, {\n        id: 10\n      }];\n      const res = Service.mergeSchemaUniqArray(src, prev);\n      expect(res).toEqual([{\n        id: 1\n      }, {\n        id: 2\n      }, {\n        id: 3\n      }, {\n        id: 4\n      }, {\n        id: 5\n      }, {\n        id: 6\n      }, {\n        id: 8\n      }, {\n        id: 10\n      }]);\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should merge values","suites":["Test Service class","Test static mergeSchemaDependencies"],"updatePoint":{"line":1537,"column":27},"line":1537,"code":"    it(\"should merge values\", () => {\n      jest.spyOn(Service, \"mergeSchemaUniqArray\");\n      const src = [1, 2, 3, 4, 5];\n      const prev = [2, 4, 6, 8, 10];\n      const res = Service.mergeSchemaDependencies(src, prev);\n      expect(res).toEqual([1, 2, 3, 4, 5, 6, 8, 10]);\n      expect(Service.mergeSchemaUniqArray).toBeCalledTimes(1);\n      expect(Service.mergeSchemaUniqArray).toBeCalledWith(src, prev);\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should merge values","suites":["Test Service class","Test static mergeSchemaHooks"],"updatePoint":{"line":1548,"column":27},"line":1548,"code":"    it(\"should merge values\", () => {\n      const src = {\n        before: {\n          all: \"src-before-all\"\n        },\n        after: {\n          list: [\"src-after-list1\", \"src-after-list2\"]\n        },\n        error: {\n          all: \"src-error-all\",\n          remove: \"src-error-remove\"\n        }\n      };\n      const prev = {\n        before: {\n          all: \"prev-before-all\",\n          create: \"prev-before-create\"\n        },\n        after: {\n          list: \"prev-after-list\"\n        },\n        error: {\n          all: \"prev-error-all\"\n        }\n      };\n      const res = Service.mergeSchemaHooks(src, prev);\n      expect(res).toEqual({\n        before: {\n          all: [\"prev-before-all\", \"src-before-all\"],\n          create: \"prev-before-create\"\n        },\n        after: {\n          list: [\"src-after-list1\", \"src-after-list2\", \"prev-after-list\"]\n        },\n        error: {\n          all: [\"src-error-all\", \"prev-error-all\"],\n          remove: [\"src-error-remove\"]\n        }\n      });\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should merge actions","suites":["Test Service class","Test static mergeSchemaActions"],"updatePoint":{"line":1590,"column":28},"line":1590,"code":"    it(\"should merge actions\", () => {\n      const src = {\n        create() {},\n\n        find: {\n          params: {\n            count: \"number\"\n          },\n\n          handler() {}\n\n        },\n        update: false\n      };\n      const prev = {\n        find: {\n          cache: true\n        },\n        update: {\n          handler() {}\n\n        },\n        patch: {\n          params: {\n            update: \"object\"\n          },\n\n          handler() {}\n\n        },\n\n        remove() {}\n\n      };\n      const res = Service.mergeSchemaActions(src, prev);\n      expect(res).toEqual({\n        create: {\n          handler: expect.any(Function)\n        },\n        find: {\n          cache: true,\n          params: {\n            count: \"number\"\n          },\n          handler: expect.any(Function)\n        },\n        patch: {\n          params: {\n            update: \"object\"\n          },\n          handler: expect.any(Function)\n        },\n        remove: expect.any(Function)\n      });\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should merge actions with hooks","suites":["Test Service class","Test static mergeSchemaActions"],"updatePoint":{"line":1645,"column":39},"line":1645,"code":"    it(\"should merge actions with hooks\", () => {\n      const src = {\n        create: {\n          hooks: {\n            before: \"src-create-before\",\n            after: \"src-create-after\",\n            error: \"src-create-error\"\n          }\n        },\n        find: {\n          hooks: {\n            before: \"src-create-before\",\n            after: [\"src-create-after1\", \"src-create-after2\"],\n            error: \"src-create-error\"\n          },\n\n          handler() {}\n\n        },\n        update: {\n          handler() {}\n\n        }\n      };\n      const prev = {\n        create: {\n          handler() {}\n\n        },\n        find: {\n          hooks: {\n            before: \"prev-create-before\",\n            after: [\"prev-create-after1\", \"prev-create-after2\"],\n            error: \"prev-create-error\"\n          }\n        },\n        update: {\n          hooks: {\n            before: \"prev-update-before\",\n            after: \"prev-update-after\",\n            error: \"prev-update-error\"\n          }\n        }\n      };\n      const res = Service.mergeSchemaActions(src, prev);\n      expect(res).toEqual({\n        create: {\n          hooks: {\n            before: \"src-create-before\",\n            after: \"src-create-after\",\n            error: \"src-create-error\"\n          },\n          handler: expect.any(Function)\n        },\n        find: {\n          hooks: {\n            before: [\"prev-create-before\", \"src-create-before\"],\n            after: [\"src-create-after1\", \"src-create-after2\", \"prev-create-after1\", \"prev-create-after2\"],\n            error: [\"src-create-error\", \"prev-create-error\"]\n          },\n          handler: expect.any(Function)\n        },\n        update: {\n          hooks: {\n            before: \"prev-update-before\",\n            after: \"prev-update-after\",\n            error: \"prev-update-error\"\n          },\n          handler: expect.any(Function)\n        }\n      });\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should merge values","suites":["Test Service class","Test static mergeSchemaMethods"],"updatePoint":{"line":1719,"column":27},"line":1719,"code":"    it(\"should merge values\", () => {\n      const src = {\n        find: \"src-find\",\n        list: \"src-list\",\n        update: \"src-update\"\n      };\n      const prev = {\n        create: \"prev-create\",\n        list: \"prev-list\",\n        update: \"prev-update\",\n        remove: \"prev-remove\"\n      };\n      const res = Service.mergeSchemaMethods(src, prev);\n      expect(res).toEqual({\n        create: \"prev-create\",\n        find: \"src-find\",\n        list: \"src-list\",\n        update: \"src-update\",\n        remove: \"prev-remove\"\n      });\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should merge actions","suites":["Test Service class","Test static mergeSchemaEvents"],"updatePoint":{"line":1742,"column":28},"line":1742,"code":"    it(\"should merge actions\", () => {\n      const src = {\n        create() {},\n\n        find: {\n          params: {\n            count: \"number\"\n          },\n\n          handler() {}\n\n        },\n        update: {\n          handler() {}\n\n        }\n      };\n      const prev = {\n        find: {\n          group: \"user\"\n        },\n        update: {\n          handler() {}\n\n        },\n        patch: {\n          params: {\n            update: \"object\"\n          },\n\n          handler() {}\n\n        },\n\n        remove() {}\n\n      };\n      const res = Service.mergeSchemaEvents(src, prev);\n      expect(res).toEqual({\n        create: {\n          handler: expect.any(Function)\n        },\n        find: {\n          group: \"user\",\n          params: {\n            count: \"number\"\n          },\n          handler: expect.any(Function)\n        },\n        update: {\n          handler: [expect.any(Function), expect.any(Function)]\n        },\n        patch: {\n          params: {\n            update: \"object\"\n          },\n          handler: expect.any(Function)\n        },\n        remove: expect.any(Function)\n      });\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should merge values","suites":["Test Service class","Test static mergeSchemaLifecycleHandlers"],"updatePoint":{"line":1805,"column":27},"line":1805,"code":"    it(\"should merge values\", () => {\n      const src = {\n        created: \"src-created\",\n        started: \"src-started\",\n        stopped: \"src-stopped\"\n      };\n      const prev = {\n        created: \"prev-created\",\n        started: \"prev-started\",\n        stopped: \"prev-stopped\"\n      };\n      const res = Service.mergeSchemaLifecycleHandlers(\"src-created\", \"prev-created\");\n      expect(res).toEqual([\"prev-created\", \"src-created\"]);\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should merge values","suites":["Test Service class","Test static mergeSchemaUnknown"],"updatePoint":{"line":1821,"column":27},"line":1821,"code":"    it(\"should merge values\", () => {\n      expect(Service.mergeSchemaUnknown(\"John\", \"Bob\")).toBe(\"John\");\n      expect(Service.mergeSchemaUnknown(\"John\", null)).toBe(\"John\");\n      expect(Service.mergeSchemaUnknown(null, \"Bob\")).toBeNull();\n      expect(Service.mergeSchemaUnknown(null, null)).toBeNull();\n      expect(Service.mergeSchemaUnknown(\"John\", undefined)).toBe(\"John\");\n      expect(Service.mergeSchemaUnknown(undefined, \"Bob\")).toBe(\"Bob\");\n      expect(Service.mergeSchemaUnknown(undefined, undefined)).toBeUndefined();\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should create version service names","suites":["Test Service class","Test static getVersionedFullName"],"updatePoint":{"line":1832,"column":43},"line":1832,"code":"    it(\"should create version service names\", () => {\n      expect(Service.getVersionedFullName(\"posts\")).toBe(\"posts\");\n      expect(Service.getVersionedFullName(\"posts\", 5)).toBe(\"v5.posts\");\n      expect(Service.getVersionedFullName(\"posts\", \"testing\")).toBe(\"testing.posts\");\n    });","file":"unit/service.spec.js","skipped":false,"dir":"test"},{"name":"should load local variables","suites":["Test BaseStrategy"],"updatePoint":{"line":11,"column":33},"line":11,"code":"  it(\"should load local variables\", () => {\n    const strategy = new BaseStrategy(broker.registry, broker);\n    expect(strategy.registry).toBe(broker.registry);\n    expect(strategy.broker).toBe(broker);\n    expect(strategy.opts).toEqual({});\n    expect(strategy.select).toBeInstanceOf(Function);\n  });","file":"unit/strategies/base.spec.js","skipped":false,"dir":"test"},{"name":"should load with options","suites":["Test BaseStrategy"],"updatePoint":{"line":18,"column":30},"line":18,"code":"  it(\"should load with options\", () => {\n    const opts = {\n      a: 5\n    };\n    const strategy = new BaseStrategy(broker.registry, broker, opts);\n    expect(strategy.registry).toBe(broker.registry);\n    expect(strategy.broker).toBe(broker);\n    expect(strategy.opts).toBe(opts);\n    expect(strategy.select).toBeInstanceOf(Function);\n  });","file":"unit/strategies/base.spec.js","skipped":false,"dir":"test"},{"name":"test with empty opts","suites":["Test CpuUsageStrategy"],"updatePoint":{"line":11,"column":26},"line":11,"code":"  it(\"test with empty opts\", () => {\n    let strategy = new CpuUsageStrategy(null, null, {});\n    expect(strategy.opts.sampleCount).toBe(3);\n    expect(strategy.opts.lowCpuUsage).toBe(10);\n    const list = [{\n      a: \"hello\",\n      node: {\n        cpu: 50\n      }\n    }, {\n      b: \"world\",\n      node: {\n        cpu: 20\n      }\n    }];\n    expect(strategy.select(list)).toBe(list[1]);\n    expect(strategy.select(list)).toBe(list[1]);\n    expect(strategy.select(list)).toBe(list[1]);\n  });","file":"unit/strategies/cpu-usage.spec.js","skipped":false,"dir":"test"},{"name":"test with options","suites":["Test CpuUsageStrategy"],"updatePoint":{"line":30,"column":23},"line":30,"code":"  it(\"test with options\", () => {\n    let strategy = new CpuUsageStrategy(null, null, {\n      sampleCount: 5,\n      lowCpuUsage: 30\n    });\n    expect(strategy.opts.sampleCount).toBe(5);\n    expect(strategy.opts.lowCpuUsage).toBe(30);\n    let list = [{\n      a: \"hello\",\n      node: {\n        cpu: 25\n      }\n    }, {\n      b: \"world\",\n      node: {\n        cpu: 32\n      }\n    }];\n    expect(strategy.select(list)).toBe(list[0]);\n    expect(strategy.select(list)).toBe(list[0]);\n    expect(strategy.select(list)).toBe(list[0]);\n    list = [{\n      a: \"hello\",\n      node: {\n        cpu: null\n      }\n    }, {\n      b: \"world\",\n      node: {\n        cpu: 32\n      }\n    }];\n    expect(strategy.select(list)).toBe(list[1]);\n    expect(strategy.select(list)).toBe(list[1]);\n    expect(strategy.select(list)).toBe(list[1]);\n  });","file":"unit/strategies/cpu-usage.spec.js","skipped":false,"dir":"test"},{"name":"test without cpu values","suites":["Test CpuUsageStrategy"],"updatePoint":{"line":66,"column":29},"line":66,"code":"  it(\"test without cpu values\", () => {\n    let strategy = new CpuUsageStrategy({\n      opts: {}\n    });\n    const list = [{\n      a: \"hello\",\n      node: {\n        cpu: null\n      }\n    }, {\n      b: \"world\",\n      node: {\n        cpu: null\n      }\n    }];\n    expect(strategy.select(list)).toBeAnyOf(list);\n    expect(strategy.select(list)).toBeAnyOf(list);\n  });","file":"unit/strategies/cpu-usage.spec.js","skipped":false,"dir":"test"},{"name":"test with many nodes (random selection)","suites":["Test CpuUsageStrategy"],"updatePoint":{"line":84,"column":45},"line":84,"code":"  it(\"test with many nodes (random selection)\", () => {\n    let strategy = new CpuUsageStrategy({\n      opts: {}\n    });\n    const list = [{\n      node: {\n        cpu: 34\n      }\n    }, {\n      node: {\n        cpu: 22\n      }\n    }, {\n      node: {\n        cpu: 75\n      }\n    }, {\n      node: {\n        cpu: 8\n      }\n    }, {\n      node: {\n        cpu: 37\n      }\n    }, {\n      node: {\n        cpu: 55\n      }\n    }, {\n      node: {\n        cpu: 14\n      }\n    }];\n    expect(strategy.select(list)).toBeAnyOf(list);\n    expect(strategy.select(list)).toBeAnyOf(list);\n  });","file":"unit/strategies/cpu-usage.spec.js","skipped":false,"dir":"test"},{"name":"should resolve null from undefined","suites":["Test Strategies resolver"],"updatePoint":{"line":8,"column":40},"line":8,"code":"  it(\"should resolve null from undefined\", () => {\n    let Strategy = Strategies.resolve();\n    expect(Strategy).toBe(Strategies.RoundRobin);\n  });","file":"unit/strategies/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve RoundRobinStrategy from obj without type","suites":["Test Strategies resolver"],"updatePoint":{"line":12,"column":61},"line":12,"code":"  it(\"should resolve RoundRobinStrategy from obj without type\", () => {\n    let Strategy = Strategies.resolve({});\n    expect(Strategy).toBe(Strategies.RoundRobin);\n  });","file":"unit/strategies/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve RoundRobinStrategy from obj","suites":["Test Strategies resolver"],"updatePoint":{"line":16,"column":48},"line":16,"code":"  it(\"should resolve RoundRobinStrategy from obj\", () => {\n    let Strategy = Strategies.resolve({\n      type: \"random\"\n    });\n    expect(Strategy).toBe(Strategies.Random);\n    Strategy = Strategies.resolve({\n      type: \"Random\"\n    });\n    expect(Strategy).toBe(Strategies.Random);\n  });","file":"unit/strategies/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve RandomStrategy from string with 'random' and 'Random' type","suites":["Test Strategies resolver"],"updatePoint":{"line":26,"column":79},"line":26,"code":"  it(\"should resolve RandomStrategy from string with 'random' and 'Random' type\", () => {\n    let Strategy = Strategies.resolve(\"random\");\n    expect(Strategy).toBe(Strategies.Random);\n    Strategy = Strategies.resolve(\"Random\");\n    expect(Strategy).toBe(Strategies.Random);\n  });","file":"unit/strategies/index.spec.js","skipped":false,"dir":"test"},{"name":"should throw error if type if not correct","suites":["Test Strategies resolver"],"updatePoint":{"line":32,"column":47},"line":32,"code":"  it(\"should throw error if type if not correct\", () => {\n    expect(() => {\n      Strategies.resolve(\"xyz\");\n    }).toThrowError(BrokerOptionsError);\n    expect(() => {\n      Strategies.resolve({\n        type: \"xyz\"\n      });\n    }).toThrowError(BrokerOptionsError);\n  });","file":"unit/strategies/index.spec.js","skipped":false,"dir":"test"},{"name":"should throw error if type if not correct","suites":["Test Strategies register"],"updatePoint":{"line":46,"column":47},"line":46,"code":"  it(\"should throw error if type if not correct\", () => {\n    expect(() => {\n      Strategies.resolve(\"MyCustom\");\n    }).toThrowError(BrokerOptionsError);\n  });","file":"unit/strategies/index.spec.js","skipped":false,"dir":"test"},{"name":"should register new type","suites":["Test Strategies register"],"updatePoint":{"line":51,"column":30},"line":51,"code":"  it(\"should register new type\", () => {\n    Strategies.register(\"MyCustom\", MyCustom);\n    expect(Strategies.MyCustom).toBe(MyCustom);\n  });","file":"unit/strategies/index.spec.js","skipped":false,"dir":"test"},{"name":"should find the new type","suites":["Test Strategies register"],"updatePoint":{"line":55,"column":30},"line":55,"code":"  it(\"should find the new type\", () => {\n    const strategy = Strategies.resolve(\"MyCustom\");\n    expect(strategy).toBe(MyCustom);\n  });","file":"unit/strategies/index.spec.js","skipped":false,"dir":"test"},{"name":"should be the master","suites":["Test LatencyStrategy constructor"],"updatePoint":{"line":16,"column":26},"line":16,"code":"  it(\"should be the master\", () => {\n    const callbacks = {};\n    const broker = new ServiceBroker({\n      logger: false,\n      nodeID: \"node-1\",\n      transporter: \"fake\"\n    });\n    broker.localBus.listenerCount = jest.fn(() => 0);\n    broker.localBus.on = jest.fn((name, fn) => callbacks[name] = fn);\n    let strategy = new LatencyStrategy(broker.registry, broker);\n    expect(broker.localBus.on).toHaveBeenCalledTimes(7);\n    expect(broker.localBus.on).toHaveBeenCalledWith(\"$broker.started\", expect.any(Function));\n    expect(broker.localBus.on).toHaveBeenCalledWith(\"$node.latencyMaster\", expect.any(Function));\n    expect(broker.localBus.on).toHaveBeenCalledWith(\"$node.latencySlave\", expect.any(Function));\n    expect(broker.localBus.on).toHaveBeenCalledWith(\"$node.pong\", expect.any(Function));\n    expect(broker.localBus.on).toHaveBeenCalledWith(\"$node.connected\", expect.any(Function));\n    expect(broker.localBus.on).toHaveBeenCalledWith(\"$node.disconnected\", expect.any(Function));\n    expect(broker.localBus.on).toHaveBeenCalledWith(\"$node.latencySlave\", expect.any(Function)); // Test callbacks\n\n    /* Can't work due to bindings\n    strategy.processPong = jest.fn();\n    strategy.addNode = jest.fn();\n    strategy.removeHostMap = jest.fn();\n    strategy.discovery = jest.fn();\n    strategy.updateLatency = jest.fn();\n    \tcallbacks[\"$node.pong\"]();\n    expect(strategy.processPong).toHaveBeenCalledTimes(1);*/\n\n    return broker.start().catch(protectReject).then(() => {\n      expect(strategy.brokerStopped).toBe(false);\n      expect(strategy.hostMap.size).toBe(0);\n      expect(strategy.hostAvgLatency.size).toBe(0);\n      return broker.stop();\n    });\n  });","file":"unit/strategies/latency.spec.js","skipped":false,"dir":"test"},{"name":"should be the slave","suites":["Test LatencyStrategy constructor"],"updatePoint":{"line":51,"column":25},"line":51,"code":"  it(\"should be the slave\", () => {\n    const broker = new ServiceBroker({\n      logger: false,\n      nodeID: \"node-1\",\n      transporter: \"fake\"\n    });\n    broker.localBus.listenerCount = jest.fn(() => 1);\n    broker.localBus.on = jest.fn();\n    let strategy = new LatencyStrategy(broker.registry, broker, {});\n    expect(broker.localBus.on).toHaveBeenCalledTimes(2);\n    expect(broker.localBus.on).toHaveBeenCalledWith(\"$node.latencySlave.removeHost\", expect.any(Function));\n    expect(broker.localBus.on).toHaveBeenCalledWith(\"$node.latencySlave\", expect.any(Function));\n    return broker.start().catch(protectReject).then(() => {\n      expect(strategy.hostMap.size).toBe(0);\n      expect(strategy.hostAvgLatency.size).toBe(0);\n      return broker.stop();\n    });\n  });","file":"unit/strategies/latency.spec.js","skipped":false,"dir":"test"},{"name":"test without options & transporter","suites":["Test LatencyStrategy constructor"],"updatePoint":{"line":69,"column":40},"line":69,"code":"  it(\"test without options & transporter\", () => {\n    const broker = new ServiceBroker({\n      logger: false\n    });\n    broker.localBus.on = jest.fn();\n    let strategy = new LatencyStrategy(broker.registry, broker, {});\n    expect(broker.localBus.on).toHaveBeenCalledTimes(0);\n    expect(strategy.opts.pingInterval).toBe(10);\n    expect(strategy.opts.sampleCount).toBe(5);\n    expect(strategy.opts.lowLatency).toBe(10);\n    expect(strategy.opts.collectCount).toBe(5);\n  });","file":"unit/strategies/latency.spec.js","skipped":false,"dir":"test"},{"name":"test with options","suites":["Test LatencyStrategy constructor"],"updatePoint":{"line":81,"column":23},"line":81,"code":"  it(\"test with options\", () => {\n    const broker = new ServiceBroker({\n      logger: false\n    });\n    let strategy = new LatencyStrategy(broker.registry, broker, {\n      sampleCount: 15,\n      lowLatency: 20,\n      collectCount: 10,\n      pingInterval: 15\n    });\n    expect(strategy.opts.pingInterval).toBe(15);\n    expect(strategy.opts.sampleCount).toBe(15);\n    expect(strategy.opts.lowLatency).toBe(20);\n    expect(strategy.opts.collectCount).toBe(10);\n  });","file":"unit/strategies/latency.spec.js","skipped":false,"dir":"test"},{"name":"should call sendPing in transit","suites":["Test LatencyStrategy.discovery method"],"updatePoint":{"line":101,"column":37},"line":101,"code":"  it(\"should call sendPing in transit\", () => {\n    const broker = new ServiceBroker({\n      logger: false,\n      transporter: \"Fake\"\n    });\n    let strategy = new LatencyStrategy(broker.registry, broker, {\n      sampleCount: 15,\n      lowLatency: 20,\n      collectCount: 10,\n      pingInterval: 15\n    });\n    strategy.pingHosts = jest.fn();\n    broker.transit.sendPing = jest.fn(() => Promise.resolve());\n    return strategy.discovery().catch(protectReject).then(() => {\n      expect(broker.transit.sendPing).toHaveBeenCalledTimes(1);\n      expect(broker.transit.sendPing).toHaveBeenCalledWith();\n      expect(strategy.pingHosts).toHaveBeenCalledTimes(0);\n      clock.tick(15500);\n      expect(strategy.pingHosts).toHaveBeenCalledTimes(1);\n    });\n  });","file":"unit/strategies/latency.spec.js","skipped":false,"dir":"test"},{"name":"should call sendPing in transit","suites":["Test LatencyStrategy.pingHosts method"],"updatePoint":{"line":127,"column":37},"line":127,"code":"  it(\"should call sendPing in transit\", () => {\n    const broker = new ServiceBroker({\n      logger: false,\n      transporter: \"Fake\"\n    });\n    let strategy = new LatencyStrategy(broker.registry, broker, {\n      sampleCount: 15,\n      lowLatency: 20,\n      collectCount: 10,\n      pingInterval: 15\n    });\n    strategy.hostMap.set(\"host-a\", {\n      nodeList: [\"node-a1\", \"node-a2\", \"node-a3\"]\n    });\n    strategy.hostMap.set(\"host-b\", {\n      nodeList: [\"node-b1\", \"node-b2\", \"node-b3\"]\n    });\n    broker.transit.sendPing = jest.fn(() => Promise.resolve());\n    return strategy.pingHosts().catch(protectReject).then(() => {\n      expect(broker.transit.sendPing).toHaveBeenCalledTimes(2);\n      expect(broker.transit.sendPing.mock.calls[0][0]).toBeAnyOf([\"node-a1\", \"node-a2\", \"node-a3\"]);\n      expect(broker.transit.sendPing.mock.calls[1][0]).toBeAnyOf([\"node-b1\", \"node-b2\", \"node-b3\"]);\n      strategy.pingHosts = jest.fn(() => Promise.resolve());\n      clock.tick(15500);\n      expect(strategy.pingHosts).toHaveBeenCalledTimes(1);\n    });\n  });","file":"unit/strategies/latency.spec.js","skipped":false,"dir":"test"},{"name":"should calc avg latency and send to slaves","suites":["Test LatencyStrategy.processPong method"],"updatePoint":{"line":160,"column":48},"line":160,"code":"  it(\"should calc avg latency and send to slaves\", () => {\n    broker.localBus.emit = jest.fn();\n    const mockNode = {\n      id: \"node-a1\",\n      hostname: \"host-a\"\n    };\n    strategy.registry.nodes.get = jest.fn(() => mockNode);\n    const historicLatency = [20, 40, 180, 10];\n    strategy.getHostLatency = jest.fn(() => ({\n      historicLatency\n    }));\n    strategy.processPong({\n      nodeID: \"node-a1\",\n      elapsedTime: 30\n    });\n    expect(strategy.registry.nodes.get).toHaveBeenCalledTimes(1);\n    expect(strategy.registry.nodes.get).toHaveBeenCalledWith(\"node-a1\");\n    expect(strategy.getHostLatency).toHaveBeenCalledTimes(1);\n    expect(strategy.getHostLatency).toHaveBeenCalledWith(mockNode);\n    expect(broker.localBus.emit).toHaveBeenCalledTimes(1);\n    expect(broker.localBus.emit).toHaveBeenCalledWith(\"$node.latencySlave\", {\n      avgLatency: 56,\n      hostname: \"host-a\"\n    }); // Test collection shifting\n\n    expect(historicLatency.length).toBe(5);\n    strategy.processPong({\n      nodeID: \"node-a1\",\n      elapsedTime: 25\n    });\n    expect(historicLatency.length).toBe(5);\n  });","file":"unit/strategies/latency.spec.js","skipped":false,"dir":"test"},{"name":"should create new info item","suites":["Test LatencyStrategy.getHostLatency method"],"updatePoint":{"line":198,"column":33},"line":198,"code":"  it(\"should create new info item\", () => {\n    expect(strategy.hostMap.size).toBe(0);\n    const res = strategy.getHostLatency({\n      id: \"node-1\",\n      hostname: \"host-a\"\n    });\n    expect(res).toEqual({\n      historicLatency: [],\n      nodeList: [\"node-1\"]\n    });\n    expect(strategy.hostMap.size).toBe(1);\n  });","file":"unit/strategies/latency.spec.js","skipped":false,"dir":"test"},{"name":"should return info by nodeID","suites":["Test LatencyStrategy.getHostLatency method"],"updatePoint":{"line":210,"column":34},"line":210,"code":"  it(\"should return info by nodeID\", () => {\n    const res = strategy.getHostLatency({\n      id: \"node-2\",\n      hostname: \"host-a\"\n    });\n    expect(res).toEqual({\n      historicLatency: [],\n      nodeList: [\"node-1\"]\n    });\n    expect(strategy.hostMap.size).toBe(1);\n  });","file":"unit/strategies/latency.spec.js","skipped":false,"dir":"test"},{"name":"should append nodeID","suites":["Test LatencyStrategy.getHostLatency method"],"updatePoint":{"line":221,"column":26},"line":221,"code":"  it(\"should append nodeID\", () => {\n    strategy.addNode({\n      node: {\n        id: \"node-2\",\n        hostname: \"host-a\"\n      }\n    });\n    const res = strategy.getHostLatency({\n      id: \"node-2\",\n      hostname: \"host-a\"\n    });\n    expect(res).toEqual({\n      historicLatency: [],\n      nodeList: [\"node-1\", \"node-2\"]\n    });\n    expect(strategy.hostMap.size).toBe(1);\n  });","file":"unit/strategies/latency.spec.js","skipped":false,"dir":"test"},{"name":"should not append nodeID","suites":["Test LatencyStrategy.getHostLatency method"],"updatePoint":{"line":238,"column":30},"line":238,"code":"  it(\"should not append nodeID\", () => {\n    strategy.addNode({\n      node: {\n        id: \"node-2\",\n        hostname: \"host-a\"\n      }\n    });\n    const res = strategy.getHostLatency({\n      id: \"node-2\",\n      hostname: \"host-a\"\n    });\n    expect(res).toEqual({\n      historicLatency: [],\n      nodeList: [\"node-1\", \"node-2\"]\n    });\n    expect(strategy.hostMap.size).toBe(1);\n  });","file":"unit/strategies/latency.spec.js","skipped":false,"dir":"test"},{"name":"should not remove nodeID","suites":["Test LatencyStrategy.removeHostMap method"],"updatePoint":{"line":262,"column":30},"line":262,"code":"  it(\"should not remove nodeID\", () => {\n    strategy.hostMap.set(\"host-a\", {\n      nodeList: [\"node-1\", \"node-2\"]\n    });\n    strategy.removeHostMap({\n      node: {\n        hostname: \"host-b\",\n        id: \"node-3\"\n      }\n    });\n    expect(strategy.hostMap.get(\"host-a\")).toEqual({\n      nodeList: [\"node-1\", \"node-2\"]\n    });\n    expect(broker.localBus.emit).toHaveBeenCalledTimes(0);\n  });","file":"unit/strategies/latency.spec.js","skipped":false,"dir":"test"},{"name":"should remove 'node-1'","suites":["Test LatencyStrategy.removeHostMap method"],"updatePoint":{"line":277,"column":28},"line":277,"code":"  it(\"should remove 'node-1'\", () => {\n    strategy.removeHostMap({\n      node: {\n        hostname: \"host-a\",\n        id: \"node-1\"\n      }\n    });\n    expect(strategy.hostMap.get(\"host-a\")).toEqual({\n      nodeList: [\"node-2\"]\n    });\n    expect(broker.localBus.emit).toHaveBeenCalledTimes(0);\n  });","file":"unit/strategies/latency.spec.js","skipped":false,"dir":"test"},{"name":"should remove 'node-2' & emit event","suites":["Test LatencyStrategy.removeHostMap method"],"updatePoint":{"line":289,"column":41},"line":289,"code":"  it(\"should remove 'node-2' & emit event\", () => {\n    strategy.removeHostMap({\n      node: {\n        hostname: \"host-a\",\n        id: \"node-2\"\n      }\n    });\n    expect(strategy.hostMap.get(\"host-a\")).toBeUndefined();\n    expect(broker.localBus.emit).toHaveBeenCalledTimes(1);\n    expect(broker.localBus.emit).toHaveBeenCalledWith(\"$node.latencySlave.removeHost\", \"host-a\");\n  });","file":"unit/strategies/latency.spec.js","skipped":false,"dir":"test"},{"name":"should set latency data","suites":["Test LatencyStrategy.updateLatency & removeHostLatency method"],"updatePoint":{"line":306,"column":29},"line":306,"code":"  it(\"should set latency data\", () => {\n    expect(strategy.hostAvgLatency.get(\"host-a\")).toBeUndefined();\n    strategy.updateLatency({\n      hostname: \"host-a\",\n      avgLatency: 100\n    });\n    expect(strategy.hostAvgLatency.get(\"host-a\")).toBe(100);\n    strategy.updateLatency({\n      hostname: \"host-b\",\n      avgLatency: 50\n    });\n    expect(strategy.hostAvgLatency.get(\"host-b\")).toBe(50);\n    strategy.updateLatency({\n      hostname: \"host-a\",\n      avgLatency: 20\n    });\n    expect(strategy.hostAvgLatency.get(\"host-a\")).toBe(20);\n  });","file":"unit/strategies/latency.spec.js","skipped":false,"dir":"test"},{"name":"should remove latency data","suites":["Test LatencyStrategy.updateLatency & removeHostLatency method"],"updatePoint":{"line":324,"column":32},"line":324,"code":"  it(\"should remove latency data\", () => {\n    strategy.removeHostLatency(\"host-a\");\n    expect(strategy.hostAvgLatency.get(\"host-a\")).toBeUndefined();\n    expect(strategy.hostAvgLatency.get(\"host-b\")).toBe(50);\n  });","file":"unit/strategies/latency.spec.js","skipped":false,"dir":"test"},{"name":"test without latency data (random)","suites":["Test LatencyStrategy.select method"],"updatePoint":{"line":331,"column":40},"line":331,"code":"  it(\"test without latency data (random)\", () => {\n    const broker = new ServiceBroker({\n      logger: false\n    });\n    let strategy = new LatencyStrategy(broker.registry, broker, {\n      sampleCount: 5,\n      lowLatency: 10,\n      collectCount: 10,\n      pingInterval: 1\n    });\n    const list = [{\n      a: \"hello\",\n      node: {\n        id: \"a\"\n      }\n    }, {\n      b: \"world\",\n      node: {\n        id: \"b\"\n      }\n    }, {\n      b: \"now\",\n      node: {\n        id: \"c\"\n      }\n    }];\n    return broker.start().catch(protectReject).then(() => {\n      expect(strategy.select(list)).toBeAnyOf(list);\n      expect(strategy.select(list)).toBeAnyOf(list);\n      expect(strategy.select(list)).toBeAnyOf(list);\n      return broker.stop;\n    });\n  });","file":"unit/strategies/latency.spec.js","skipped":false,"dir":"test"},{"name":"test with latency data (where node has a low latency)","suites":["Test LatencyStrategy.select method"],"updatePoint":{"line":364,"column":59},"line":364,"code":"  it(\"test with latency data (where node has a low latency)\", () => {\n    const broker = new ServiceBroker({\n      logger: false\n    });\n    let strategy = new LatencyStrategy(broker.registry, broker, {\n      sampleCount: 5,\n      lowLatency: 10,\n      collectCount: 10,\n      pingInterval: 1\n    });\n    strategy.hostAvgLatency.set(\"a\", 20);\n    strategy.hostAvgLatency.set(\"b\", 5);\n    strategy.hostAvgLatency.set(\"c\", 100);\n    const list = [{\n      a: \"hello\",\n      node: {\n        hostname: \"a\"\n      }\n    }, {\n      b: \"world\",\n      node: {\n        hostname: \"b\"\n      }\n    }, {\n      b: \"now\",\n      node: {\n        hostname: \"c\"\n      }\n    }];\n    expect(strategy.select(list)).toBe(list[1]);\n    expect(strategy.select(list)).toBe(list[1]);\n    expect(strategy.select(list)).toBe(list[1]);\n  });","file":"unit/strategies/latency.spec.js","skipped":false,"dir":"test"},{"name":"test with latency data (where all nodes have some latency)","suites":["Test LatencyStrategy.select method"],"updatePoint":{"line":397,"column":64},"line":397,"code":"  it(\"test with latency data (where all nodes have some latency)\", () => {\n    const broker = new ServiceBroker({\n      logger: false\n    });\n    let strategy = new LatencyStrategy(broker.registry, broker, {\n      sampleCount: 5,\n      lowLatency: 10,\n      collectCount: 10,\n      pingInterval: 1\n    });\n    strategy.hostAvgLatency.set(\"a\", 50);\n    strategy.hostAvgLatency.set(\"b\", 20);\n    strategy.hostAvgLatency.set(\"c\", 100);\n    strategy.hostAvgLatency.set(\"d\", 1000);\n    const list = [{\n      a: \"hello\",\n      node: {\n        hostname: \"a\"\n      }\n    }, {\n      b: \"world\",\n      node: {\n        hostname: \"b\"\n      }\n    }, {\n      b: \"now\",\n      node: {\n        hostname: \"c\"\n      }\n    }];\n    expect(strategy.select(list)).toBe(list[1]);\n    expect(strategy.select(list)).toBe(list[1]);\n    expect(strategy.select(list)).toBe(list[1]);\n  });","file":"unit/strategies/latency.spec.js","skipped":false,"dir":"test"},{"name":"test with latency data (where all we have lots of nodes)","suites":["Test LatencyStrategy.select method"],"updatePoint":{"line":431,"column":62},"line":431,"code":"  it(\"test with latency data (where all we have lots of nodes)\", () => {\n    const broker = new ServiceBroker({\n      logger: false\n    });\n    let strategy = new LatencyStrategy(broker.registry, broker, {\n      sampleCount: 15,\n      lowLatency: 10,\n      collectCount: 10,\n      pingInterval: 1\n    });\n    strategy.hostAvgLatency.set(\"a\", 50);\n    strategy.hostAvgLatency.set(\"b\", 20);\n    strategy.hostAvgLatency.set(\"c\", 100);\n    strategy.hostAvgLatency.set(\"d\", 1000);\n    const list = [{\n      a: \"hello\",\n      node: {\n        hostname: \"a\"\n      }\n    }, {\n      b: \"world\",\n      node: {\n        hostname: \"b\"\n      }\n    }, {\n      b: \"12345\",\n      node: {\n        hostname: \"c\"\n      }\n    }, {\n      a: \"olleh\",\n      node: {\n        hostname: \"a\"\n      }\n    }, {\n      b: \"dlorw\",\n      node: {\n        hostname: \"b\"\n      }\n    }, {\n      b: \"54321\",\n      node: {\n        hostname: \"c\"\n      }\n    }, {\n      a: \"ooooo\",\n      node: {\n        hostname: \"a\"\n      }\n    }, {\n      b: \"ppppp\",\n      node: {\n        hostname: \"b\"\n      }\n    }, {\n      b: \"wwwww\",\n      node: {\n        hostname: \"c\"\n      }\n    }, {\n      a: \"aaaaa\",\n      node: {\n        hostname: \"a\"\n      }\n    }, {\n      b: \"bbbbb\",\n      node: {\n        hostname: \"b\"\n      }\n    }, {\n      b: \"ccccc\",\n      node: {\n        hostname: \"c\"\n      }\n    }];\n    expect(strategy.select(list)).toBeAnyOf([list[1], list[4], list[7], list[10]]);\n    expect(strategy.select(list)).toBeAnyOf([list[1], list[4], list[7], list[10]]);\n    expect(strategy.select(list)).toBeAnyOf([list[1], list[4], list[7], list[10]]);\n  });","file":"unit/strategies/latency.spec.js","skipped":false,"dir":"test"},{"name":"test with empty opts","suites":["Test RandomStrategy"],"updatePoint":{"line":11,"column":26},"line":11,"code":"  it(\"test with empty opts\", () => {\n    const strategy = new RandomStrategy();\n    const list = [{\n      a: \"hello\"\n    }, {\n      b: \"world\"\n    }];\n    expect(strategy.select(list)).toBeAnyOf(list);\n    expect(strategy.select(list)).toBeAnyOf(list);\n    expect(strategy.select(list)).toBeAnyOf(list);\n  });","file":"unit/strategies/random.spec.js","skipped":false,"dir":"test"},{"name":"get endpoint in order","suites":["Test RoundRobinStrategy"],"updatePoint":{"line":6,"column":27},"line":6,"code":"  it(\"get endpoint in order\", () => {\n    let strategy = new RoundRobinStrategy();\n    expect(strategy.counter).toBe(0);\n    const list = [{\n      a: \"hello\"\n    }, {\n      b: \"world\"\n    }];\n    let value = strategy.select(list);\n    expect(strategy.counter).toBe(1);\n    expect(value).toBe(list[0]);\n    value = strategy.select(list);\n    expect(strategy.counter).toBe(2);\n    expect(value).toBe(list[1]);\n    value = strategy.select(list);\n    expect(strategy.counter).toBe(1);\n    expect(value).toBe(list[0]);\n    value = strategy.select(list);\n    expect(strategy.counter).toBe(2);\n    expect(value).toBe(list[1]);\n  });","file":"unit/strategies/round-robin.spec.js","skipped":false,"dir":"test"},{"name":"test with empty opts","suites":["Test ShardStrategy","Test constructor"],"updatePoint":{"line":20,"column":28},"line":20,"code":"    it(\"test with empty opts\", () => {\n      let strategy = new ShardStrategy(broker.registry, broker);\n      expect(strategy.opts).toEqual({\n        shardKey: null,\n        vnodes: 10,\n        ringSize: null,\n        cacheSize: 1000\n      });\n      expect(broker.localBus.on).toHaveBeenCalledTimes(1);\n      expect(broker.localBus.on).toHaveBeenCalledWith(\"$node.**\", expect.any(Function));\n      expect(strategy.cache).toBeDefined();\n    });","file":"unit/strategies/shard.spec.js","skipped":false,"dir":"test"},{"name":"test with options","suites":["Test ShardStrategy","Test constructor"],"updatePoint":{"line":32,"column":25},"line":32,"code":"    it(\"test with options\", () => {\n      broker.localBus.on.mockClear();\n      let strategy = new ShardStrategy(broker.registry, broker, {\n        shardKey: \"#branchID\",\n        vnodes: 20,\n        ringSize: 100,\n        cacheSize: 2000\n      });\n      expect(strategy.opts).toEqual({\n        shardKey: \"#branchID\",\n        vnodes: 20,\n        ringSize: 100,\n        cacheSize: 2000\n      });\n      expect(broker.localBus.on).toHaveBeenCalledTimes(1);\n      expect(broker.localBus.on).toHaveBeenCalledWith(\"$node.**\", expect.any(Function));\n      expect(strategy.cache).toBeDefined();\n    });","file":"unit/strategies/shard.spec.js","skipped":false,"dir":"test"},{"name":"should set needRebuild = true if '$node.**' event received","suites":["Test ShardStrategy","Test constructor"],"updatePoint":{"line":50,"column":66},"line":50,"code":"    it(\"should set needRebuild = true if '$node.**' event received\", () => {\n      broker.localBus.on.mockClear();\n      let strategy = new ShardStrategy({\n        opts: {\n          strategyOptions: {}\n        }\n      }, broker);\n      strategy.needRebuild = false;\n      broker.localBus.emit(\"$node.connected\", {\n        id: \"node-999 \"\n      });\n      expect(strategy.needRebuild).toBe(true);\n    });","file":"unit/strategies/shard.spec.js","skipped":false,"dir":"test"},{"name":"should get null if shardKey is not defined","suites":["Test ShardStrategy","Test getKeyFromContext"],"updatePoint":{"line":77,"column":50},"line":77,"code":"    it(\"should get null if shardKey is not defined\", () => {\n      let strategy = new ShardStrategy(broker.registry, broker, {});\n      expect(strategy.getKeyFromContext(ctx)).toBeNull();\n    });","file":"unit/strategies/shard.spec.js","skipped":false,"dir":"test"},{"name":"should get param value","suites":["Test ShardStrategy","Test getKeyFromContext"],"updatePoint":{"line":81,"column":30},"line":81,"code":"    it(\"should get param value\", () => {\n      let strategy = new ShardStrategy(broker.registry, broker, {\n        shardKey: \"a.b\"\n      });\n      expect(strategy.getKeyFromContext(ctx)).toBe(5);\n    });","file":"unit/strategies/shard.spec.js","skipped":false,"dir":"test"},{"name":"should get meta value","suites":["Test ShardStrategy","Test getKeyFromContext"],"updatePoint":{"line":87,"column":29},"line":87,"code":"    it(\"should get meta value\", () => {\n      let strategy = new ShardStrategy(broker.registry, broker, {\n        shardKey: \"#user.name\"\n      });\n      expect(strategy.getKeyFromContext(ctx)).toBe(\"John\");\n    });","file":"unit/strategies/shard.spec.js","skipped":false,"dir":"test"},{"name":"should call custom shardKey function","suites":["Test ShardStrategy","Test getKeyFromContext"],"updatePoint":{"line":93,"column":44},"line":93,"code":"    it(\"should call custom shardKey function\", () => {\n      const shardKey = jest.fn(() => \"12345\");\n      let strategy = new ShardStrategy(broker.registry, broker, {\n        shardKey\n      });\n      expect(strategy.getKeyFromContext(ctx)).toBe(\"12345\");\n      expect(shardKey).toHaveBeenCalledTimes(1);\n      expect(shardKey).toHaveBeenCalledWith(ctx);\n    });","file":"unit/strategies/shard.spec.js","skipped":false,"dir":"test"},{"name":"should calc hash","suites":["Test ShardStrategy","Test getHash"],"updatePoint":{"line":107,"column":24},"line":107,"code":"    it(\"should calc hash\", () => {\n      let strategy = new ShardStrategy(broker.registry, broker, {});\n      expect(strategy.getHash(\"John\")).toBe(1631623841);\n      expect(strategy.getHash(\"Jane\")).toBe(731224371);\n      expect(strategy.getHash(\"Adam\")).toBe(2130539036);\n      expect(strategy.getHash(\"John\")).toBe(1631623841);\n      expect(strategy.getHash(\"Jane\")).toBe(731224371);\n      expect(strategy.getHash(\"Adam\")).toBe(2130539036);\n    });","file":"unit/strategies/shard.spec.js","skipped":false,"dir":"test"},{"name":"should calc hash","suites":["Test ShardStrategy","Test getHash"],"updatePoint":{"line":116,"column":24},"line":116,"code":"    it(\"should calc hash\", () => {\n      let strategy = new ShardStrategy(broker.registry, broker, {\n        ringSize: 1000\n      });\n      expect(strategy.getHash(\"John\")).toBe(841);\n      expect(strategy.getHash(\"Jane\")).toBe(371);\n      expect(strategy.getHash(\"Adam\")).toBe(36);\n      expect(strategy.getHash(\"John\")).toBe(841);\n      expect(strategy.getHash(\"Jane\")).toBe(371);\n      expect(strategy.getHash(\"Adam\")).toBe(36);\n    });","file":"unit/strategies/shard.spec.js","skipped":false,"dir":"test"},{"name":"should calc hash (moleculer-java compatibility check)","suites":["Test ShardStrategy","Test getHash"],"updatePoint":{"line":127,"column":61},"line":127,"code":"    it(\"should calc hash (moleculer-java compatibility check)\", () => {\n      let strategy = new ShardStrategy(broker.registry, broker, {});\n      expect(strategy.getHash(\"0\")).toBe(3486326916);\n      expect(strategy.getHash(\"4a6b07269c41b0\")).toBe(724397302);\n      expect(strategy.getHash(\"94d60e4d4d2ac04a6b0726a757c\")).toBe(1203819753);\n      expect(strategy.getHash(\"df4115740c94904a6b0726af8b294d60e4d604d4\")).toBe(1290134576);\n      expect(strategy.getHash(\"129ac1c9ae2518\")).toBe(3078036978);\n      expect(strategy.getHash(\"1741723c1c26200\")).toBe(2115014930);\n      expect(strategy.getHash(\"1be822aeb135f804a6b07272f569\")).toBe(1791083853);\n      expect(strategy.getHash(\"208ed3212ac1b104a6b07273dfe494d60e4e7c980\")).toBe(194521309);\n      expect(strategy.getHash(\"25358393acc748\")).toBe(1049237500);\n      expect(strategy.getHash(\"29dc34062850110\")).toBe(3344970316);\n      expect(strategy.getHash(\"2e82e478a3ca4204a6b07276d393\")).toBe(1059795840);\n      expect(strategy.getHash(\"332994eb20d55d04a6b07277655d94d60e4eed472\")).toBe(2268826568);\n      expect(strategy.getHash(\"37d0455d9ed85c\")).toBe(3498678610);\n      expect(strategy.getHash(\"3c76f5d01ec4e90\")).toBe(2817756008);\n      expect(strategy.getHash(\"411da6429f104a04a6b072791d2b\")).toBe(2997157689);\n      expect(strategy.getHash(\"45c456b5200a9204a6b07279a40694d60e4f351c4\")).toBe(2571292884);\n      expect(strategy.getHash(\"4a6b0727a30f40\")).toBe(1466883034);\n      expect(strategy.getHash(\"4f11b79a2551920\")).toBe(4045131562);\n      expect(strategy.getHash(\"53b8680ca935e204a6b0727b3898\")).toBe(138243266);\n      expect(strategy.getHash(\"585f187f2e65cc04a6b0727bc0aa94d60e4f7889e\")).toBe(352636368);\n      expect(strategy.getHash(\"5d05c8f1b57e18\")).toBe(2273849769);\n      expect(strategy.getHash(\"61ac79643c54ce0\")).toBe(588847511);\n      expect(strategy.getHash(\"665329d6c4629e04a6b0727d553c\")).toBe(2319755670);\n      expect(strategy.getHash(\"6af9da494efdf304a6b0727deaab94d60e4fbdca0\")).toBe(2018050882);\n      expect(strategy.getHash(\"6fa08abbdadef8\")).toBe(3263977327);\n      expect(strategy.getHash(\"74473b2e6511dc0\")).toBe(398434408);\n      expect(strategy.getHash(\"78edeba0f0941004a6b0727f7317\")).toBe(886540594);\n      expect(strategy.getHash(\"7d949c137e97b804a6b0727ffd9794d60e5000278\")).toBe(2833093651);\n      expect(strategy.getHash(\"823b4c860d6c58\")).toBe(3675093615);\n      expect(strategy.getHash(\"86e1fcf89ca0f50\")).toBe(3313150130);\n      expect(strategy.getHash(\"8b88ad6b2dfd3e04a6b072819497\")).toBe(492206794);\n      expect(strategy.getHash(\"902f5dddbfffdd04a6b072821ca994d60e50447e6\")).toBe(3760893786);\n      expect(strategy.getHash(\"94d60e505449c0\")).toBe(774442496);\n      expect(strategy.getHash(\"997cbec2e6954c0\")).toBe(2776987465);\n      expect(strategy.getHash(\"9e236f357b9a2e04a6b07283b272\")).toBe(1601659566);\n      expect(strategy.getHash(\"a2ca1fa81256da04a6b07284394d94d60e5087c52\")).toBe(3430860961);\n      expect(strategy.getHash(\"a770d01aaa56d4\")).toBe(561474753);\n      expect(strategy.getHash(\"ac17808d40a1570\")).toBe(555389561);\n      expect(strategy.getHash(\"b0be30ffd8f3d204a6b07285c082\")).toBe(3133264599);\n      expect(strategy.getHash(\"b564e17273938404a6b0728649cb94d60e50c9ae0\")).toBe(502772168);\n      expect(strategy.getHash(\"ba0b91e50ee498\")).toBe(1848953068);\n      expect(strategy.getHash(\"beb24257a8bbdf0\")).toBe(2871289633);\n      expect(strategy.getHash(\"c358f2ca45b2b204a6b07287cd5b\")).toBe(1434351094);\n      expect(strategy.getHash(\"c7ffa33ce3b23604a6b07288509194d60e510aada\")).toBe(3379603680);\n      expect(strategy.getHash(\"cca653af8430c0\")).toBe(1158327753);\n      expect(strategy.getHash(\"d14d04222227cb0\")).toBe(3603063043);\n      expect(strategy.getHash(\"d5f3b494c2ce7404a6b07289d7c5\")).toBe(1767770729);\n      expect(strategy.getHash(\"da9a650765cfe004a6b0728a672294d60e514d7fc\")).toBe(455531586);\n      expect(strategy.getHash(\"df41157a0b4190\")).toBe(3123302400);\n      expect(strategy.getHash(\"e3e7c5ecad69610\")).toBe(2096814677);\n      expect(strategy.getHash(\"e88e765f51772604a6b0728be97a\")).toBe(1752104883);\n      expect(strategy.getHash(\"ed3526d1f7797304a6b0728c78d794d60e518fb66\")).toBe(327655376);\n      expect(strategy.getHash(\"f1dbd744a3b0fc\")).toBe(2701341810);\n      expect(strategy.getHash(\"f68287b74a97b60\")).toBe(820593198);\n      expect(strategy.getHash(\"fb293829f33d8404a6b0728e088c\")).toBe(1743913596);\n      expect(strategy.getHash(\"ffcfe89ca476c604a6b0728ebb2494d60e51d8000\")).toBe(2224362458);\n      expect(strategy.getHash(\"10476990f589040\")).toBe(517707929);\n      expect(strategy.getHash(\"1091d49820488800\")).toBe(2448939331);\n      expect(strategy.getHash(\"10dc3f9f4b20f3c04a6b072905bdc\")).toBe(1948853711);\n      expect(strategy.getHash(\"1126aaa6763f8bb04a6b07290eda794d60e521ec50\")).toBe(2088765863);\n      expect(strategy.getHash(\"117115ada16bcb0\")).toBe(1005982381);\n      expect(strategy.getHash(\"11bb80b4d03f3a10\")).toBe(1953516898);\n      expect(strategy.getHash(\"1205ebbbfc3ebd004a6b07293ba75\")).toBe(735126713);\n      expect(strategy.getHash(\"125056c327a940304a6b07294462c94d60e5289610\")).toBe(3764942190);\n      expect(strategy.getHash(\"129ac1ca539a2c0\")).toBe(3265688126);\n      expect(strategy.getHash(\"12e52cd17eeed1c0\")).toBe(2603066263);\n      expect(strategy.getHash(\"132f97d8aa6272404a6b07295f578\")).toBe(3647966497);\n      expect(strategy.getHash(\"137a02dfd5fad2c04a6b072967c5394d60e52d0260\")).toBe(760845854);\n      expect(strategy.getHash(\"13c46de707ac168\")).toBe(1497570554);\n      expect(strategy.getHash(\"140ed8ee3377f290\")).toBe(1906782356);\n      expect(strategy.getHash(\"145943f55f3a16e04a6b07299774c\")).toBe(363667900);\n      expect(strategy.getHash(\"14a3aefc8b0c54304a6b07299f94c94d60e533f9e2\")).toBe(2792937459);\n      expect(strategy.getHash(\"14ee1a03b7568d8\")).toBe(1340417761);\n      expect(strategy.getHash(\"1538850ae33f5850\")).toBe(3030368299);\n      expect(strategy.getHash(\"1582f0120f432b204a6b0729b8f14\")).toBe(1417319658);\n      expect(strategy.getHash(\"15cd5b193b7ef3a04a6b0729c185e94d60e5383a74\")).toBe(403872944);\n      expect(strategy.getHash(\"1617c62067c624c\")).toBe(362880290);\n      expect(strategy.getHash(\"1662312794187ac0\")).toBe(1512282808);\n      expect(strategy.getHash(\"16ac9c2ec075c0004a6b0729db571\")).toBe(1337590107);\n      expect(strategy.getHash(\"16f70735ed07bc104a6b0729e39de94d60e53c7d74\")).toBe(2294218872);\n      expect(strategy.getHash(\"1741723d19ab510\")).toBe(188405640);\n      expect(strategy.getHash(\"178bdd4445eba960\")).toBe(795173332);\n      expect(strategy.getHash(\"17d6484b728bad404a6b0729fc5ee\")).toBe(1272205773);\n      expect(strategy.getHash(\"1820b3529f42b2f04a6b072a0492494d60e5409c02\")).toBe(3845773986);\n      expect(strategy.getHash(\"186b1e59cc10fa0\")).toBe(4023863213);\n      expect(strategy.getHash(\"18b58960f8a2cbe0\")).toBe(3551407294);\n      expect(strategy.getHash(\"18fff46826cb9c604a6b072a20e4f\")).toBe(3894737157);\n      expect(strategy.getHash(\"194a5f6f53c905c04a6b072a29a0694d60e5453b58\")).toBe(1407156978);\n      expect(strategy.getHash(\"1994ca7685549e8\")).toBe(2108634166);\n      expect(strategy.getHash(\"19df357db25f0470\")).toBe(610075097);\n      expect(strategy.getHash(\"1a29a084e0840aa04a6b072a51b81\")).toBe(2132423929);\n      expect(strategy.getHash(\"1a740b8c0db198b04a6b072a59d8094d60e54b44ba\")).toBe(3311734549);\n      expect(strategy.getHash(\"1abe769340e22b0\")).toBe(2392290243);\n      expect(strategy.getHash(\"1b08e19a6f691170\")).toBe(4073617810);\n      expect(strategy.getHash(\"1b534ca19d6967204a6b072a87407\")).toBe(3372201925);\n      expect(strategy.getHash(\"1b9db7a8cb2d8d104a6b072a8ffbe94d60e55206c6\")).toBe(3357340148);\n      expect(strategy.getHash(\"1be822aff8d01e0\")).toBe(85270405);\n      expect(strategy.getHash(\"1c328db726235700\")).toBe(3304207601);\n      expect(strategy.getHash(\"1c7cf8be53b913804a6b072aa724b\")).toBe(828887894);\n      expect(strategy.getHash(\"1cc763c5816d56204a6b072aaef6e94d60e555e626\")).toBe(3600310098);\n    });","file":"unit/strategies/shard.spec.js","skipped":false,"dir":"test"},{"name":"should build rings","suites":["Test ShardStrategy","Test rebuild"],"updatePoint":{"line":236,"column":26},"line":236,"code":"    it(\"should build rings\", () => {\n      let strategy = new ShardStrategy(broker.registry, broker, {});\n      const list = [{\n        id: \"node-100\"\n      }, {\n        id: \"node-200\"\n      }, {\n        id: \"node-300\"\n      }, {\n        id: \"node-400\"\n      }, {\n        id: \"node-500\"\n      }];\n      strategy.rebuild(list);\n      expect(strategy.ring).toMatchSnapshot();\n      prevRing = strategy.ring;\n    });","file":"unit/strategies/shard.spec.js","skipped":false,"dir":"test"},{"name":"should build rings with random list","suites":["Test ShardStrategy","Test rebuild"],"updatePoint":{"line":253,"column":43},"line":253,"code":"    it(\"should build rings with random list\", () => {\n      let strategy = new ShardStrategy(broker.registry, broker, {});\n      const list = [{\n        id: \"node-400\"\n      }, {\n        id: \"node-100\"\n      }, {\n        id: \"node-500\"\n      }, {\n        id: \"node-300\"\n      }, {\n        id: \"node-200\"\n      }];\n      strategy.rebuild(list);\n      expect(strategy.ring).toMatchSnapshot();\n      expect(strategy.ring).toEqual(prevRing);\n    });","file":"unit/strategies/shard.spec.js","skipped":false,"dir":"test"},{"name":"should build rings with custom options","suites":["Test ShardStrategy","Test rebuild"],"updatePoint":{"line":270,"column":46},"line":270,"code":"    it(\"should build rings with custom options\", () => {\n      let strategy = new ShardStrategy(broker.registry, broker, {\n        vnodes: 2,\n        ringSize: 1000\n      });\n      const list = [{\n        id: \"sun\"\n      }, {\n        id: \"mercury\"\n      }, {\n        id: \"venus\"\n      }, {\n        id: \"earth\"\n      }, {\n        id: \"mars\"\n      }, {\n        id: \"jupyter\"\n      }, {\n        id: \"saturn\"\n      }, {\n        id: \"uranus\"\n      }, {\n        id: \"neptunus\"\n      } // Poor little Pluto...\n      ];\n      strategy.needRebuild = true;\n      strategy.rebuild(list);\n      expect(strategy.ring).toMatchSnapshot();\n      expect(strategy.needRebuild).toBe(false);\n    });","file":"unit/strategies/shard.spec.js","skipped":false,"dir":"test"},{"name":"should return a random item if key is null","suites":["Test ShardStrategy","Test select"],"updatePoint":{"line":310,"column":50},"line":310,"code":"    it(\"should return a random item if key is null\", () => {\n      const list = [{\n        id: \"node-100\"\n      }, {\n        id: \"node-200\"\n      }, {\n        id: \"node-300\"\n      }, {\n        id: \"node-400\"\n      }, {\n        id: \"node-500\"\n      }];\n      expect(strategy.select(list, ctx)).toBeAnyOf(list);\n      expect(strategy.getKeyFromContext).toHaveBeenCalledTimes(1);\n      expect(strategy.getKeyFromContext).toHaveBeenCalledWith(ctx);\n    });","file":"unit/strategies/shard.spec.js","skipped":false,"dir":"test"},{"name":"should return a random item if nodeID not found","suites":["Test ShardStrategy","Test select"],"updatePoint":{"line":326,"column":55},"line":326,"code":"    it(\"should return a random item if nodeID not found\", () => {\n      strategy.getKeyFromContext = jest.fn(() => \"key\");\n      const list = [{\n        id: \"node-100\"\n      }, {\n        id: \"node-200\"\n      }, {\n        id: \"node-300\"\n      }, {\n        id: \"node-400\"\n      }, {\n        id: \"node-500\"\n      }];\n      expect(strategy.select(list, ctx)).toBeAnyOf(list);\n      expect(strategy.getKeyFromContext).toHaveBeenCalledTimes(1);\n      expect(strategy.getKeyFromContext).toHaveBeenCalledWith(ctx);\n      expect(strategy.rebuild).toHaveBeenCalledTimes(1);\n      expect(strategy.rebuild).toHaveBeenCalledWith(list);\n      expect(strategy.getNodeIDByKey).toHaveBeenCalledTimes(1);\n      expect(strategy.getNodeIDByKey).toHaveBeenCalledWith(\"key\");\n    });","file":"unit/strategies/shard.spec.js","skipped":false,"dir":"test"},{"name":"should return a specified item","suites":["Test ShardStrategy","Test select"],"updatePoint":{"line":347,"column":38},"line":347,"code":"    it(\"should return a specified item\", () => {\n      strategy.needRebuild = false;\n      strategy.getKeyFromContext.mockClear();\n      strategy.rebuild.mockClear();\n      strategy.getNodeIDByKey.mockClear();\n      const list = [{\n        id: \"node-100\"\n      }, {\n        id: \"node-200\"\n      }, {\n        id: \"node-300\"\n      }, {\n        id: \"node-400\"\n      }, {\n        id: \"node-500\"\n      }];\n      strategy.getNodeIDByKey = jest.fn(() => \"node-300\");\n      expect(strategy.select(list, ctx)).toBe(list[2]);\n      expect(strategy.getKeyFromContext).toHaveBeenCalledTimes(1);\n      expect(strategy.getKeyFromContext).toHaveBeenCalledWith(ctx);\n      expect(strategy.rebuild).toHaveBeenCalledTimes(0);\n      expect(strategy.getNodeIDByKey).toHaveBeenCalledTimes(1);\n      expect(strategy.getNodeIDByKey).toHaveBeenCalledWith(\"key\");\n    });","file":"unit/strategies/shard.spec.js","skipped":false,"dir":"test"},{"name":"should find in rings and save to cache","suites":["Test ShardStrategy","Test getNodeIDByKey"],"updatePoint":{"line":391,"column":46},"line":391,"code":"    it(\"should find in rings and save to cache\", () => {\n      expect(strategy.cache.length).toBe(0);\n      expect(strategy.getNodeIDByKey(345)).toBe(\"node-200\");\n      expect(strategy.cache.length).toBe(1);\n    });","file":"unit/strategies/shard.spec.js","skipped":false,"dir":"test"},{"name":"should give the last element","suites":["Test ShardStrategy","Test getNodeIDByKey"],"updatePoint":{"line":396,"column":36},"line":396,"code":"    it(\"should give the last element\", () => {\n      expect(strategy.getNodeIDByKey(2000)).toBe(\"node-500\");\n    });","file":"unit/strategies/shard.spec.js","skipped":false,"dir":"test"},{"name":"should find in cache","suites":["Test ShardStrategy","Test getNodeIDByKey"],"updatePoint":{"line":399,"column":28},"line":399,"code":"    it(\"should find in cache\", () => {\n      strategy.ring.length = 0;\n      expect(strategy.getNodeIDByKey(345)).toBe(\"node-200\");\n      expect(strategy.cache.length).toBe(2);\n      expect(strategy.getNodeIDByKey(456)).toBe(null);\n    });","file":"unit/strategies/shard.spec.js","skipped":false,"dir":"test"},{"name":"should clear cache when rebuild called","suites":["Test ShardStrategy","Test getNodeIDByKey"],"updatePoint":{"line":405,"column":46},"line":405,"code":"    it(\"should clear cache when rebuild called\", () => {\n      strategy.rebuild(list);\n      expect(strategy.cache.length).toBe(0);\n    });","file":"unit/strategies/shard.spec.js","skipped":false,"dir":"test"},{"name":"should find the correct nodeID by key","suites":["Test ShardStrategy","Test getNodeIDByKey by keys (moleculer-java compatibility check)"],"updatePoint":{"line":439,"column":45},"line":439,"code":"    it(\"should find the correct nodeID by key\", () => {\n      expect(strategy.getNodeIDByKey(\"70f83f5064f4d\")).toBe(\"node4\");\n      expect(strategy.getNodeIDByKey(\"e1f07ea102414e1f07ea104fd0\")).toBe(\"node6\");\n      expect(strategy.getNodeIDByKey(\"152e8bdf1ae353\")).toBe(\"node0\");\n      expect(strategy.getNodeIDByKey(\"1c3e0fd4269a6c1c3e0fd426bc70\")).toBe(\"node8\");\n      expect(strategy.getNodeIDByKey(\"234d93c934316d234d93c9349ec3\")).toBe(\"node0\");\n      expect(strategy.getNodeIDByKey(\"2a5d17be439d5e2a5d17be43d7ae2a5d17be43f4dc\")).toBe(\"node2\");\n      expect(strategy.getNodeIDByKey(\"316c9bb353eef0\")).toBe(\"node5\");\n      expect(strategy.getNodeIDByKey(\"387c1fa8667440387c1fa866c200\")).toBe(\"node3\");\n      expect(strategy.getNodeIDByKey(\"3f8ba39d79c0cb\")).toBe(\"node3\");\n      expect(strategy.getNodeIDByKey(\"469b27928e1156469b27928e6660469b27928f1c9a\")).toBe(\"node1\");\n      expect(strategy.getNodeIDByKey(\"4daaab87a576564daaab87a5e149\")).toBe(\"node7\");\n      expect(strategy.getNodeIDByKey(\"54ba2f7cbd0bf4\")).toBe(\"node7\");\n      expect(strategy.getNodeIDByKey(\"5bc9b371d70ac9\")).toBe(\"node6\");\n      expect(strategy.getNodeIDByKey(\"62d93766f16ac862d93766f1f2d862d93766f236e0\")).toBe(\"node5\");\n      expect(strategy.getNodeIDByKey(\"69e8bb5c0e0d11\")).toBe(\"node6\");\n      expect(strategy.getNodeIDByKey(\"70f83f512ad640\")).toBe(\"node0\");\n      expect(strategy.getNodeIDByKey(\"7807c3471b4ca7\")).toBe(\"node0\");\n      expect(strategy.getNodeIDByKey(\"7f17473c4a91fa7f17473c4b56c87f17473c4bae40\")).toBe(\"node0\");\n      expect(strategy.getNodeIDByKey(\"8626cb317880998626cb3179c3d2\")).toBe(\"node2\");\n      expect(strategy.getNodeIDByKey(\"8d364f26a8e2408d364f26a98c548d364f26aa4eb4\")).toBe(\"node4\");\n      expect(strategy.getNodeIDByKey(\"9445d31bd97a85\")).toBe(\"node0\");\n      expect(strategy.getNodeIDByKey(\"9b555711e7c24a\")).toBe(\"node6\");\n      expect(strategy.getNodeIDByKey(\"a264db0733382f\")).toBe(\"node5\");\n      expect(strategy.getNodeIDByKey(\"a9745efc715838\")).toBe(\"node0\");\n      expect(strategy.getNodeIDByKey(\"b083e2f1dd5c80\")).toBe(\"node5\");\n      expect(strategy.getNodeIDByKey(\"b79366e725e138b79366e726fd7eb79366e7279b6c\")).toBe(\"node3\");\n      expect(strategy.getNodeIDByKey(\"bea2eadc89a4cfbea2eadc8aecd1\")).toBe(\"node7\");\n      expect(strategy.getNodeIDByKey(\"c5b26ed1d43518c5b26ed1d54538c5b26ed1d5ef4c\")).toBe(\"node6\");\n      expect(strategy.getNodeIDByKey(\"ccc1f2c71e6b81ccc1f2c71f3ee3\")).toBe(\"node3\");\n      expect(strategy.getNodeIDByKey(\"d3d176bc67833cd3d176bc68825a\")).toBe(\"node2\");\n      expect(strategy.getNodeIDByKey(\"dae0fab1b4d1c5\")).toBe(\"node0\");\n      expect(strategy.getNodeIDByKey(\"e1f07ea6ffa3c0e1f07ea700dac0\")).toBe(\"node8\");\n      expect(strategy.getNodeIDByKey(\"e900029c4f1ebbe900029c50375ce900029c50ffcf\")).toBe(\"node6\");\n      expect(strategy.getNodeIDByKey(\"f00f86919e3fd6\")).toBe(\"node7\");\n      expect(strategy.getNodeIDByKey(\"f71f0a86ec89cd\")).toBe(\"node3\");\n      expect(strategy.getNodeIDByKey(\"fe2e8e7c3dbb68fe2e8e7c3eed8c\")).toBe(\"node6\");\n      expect(strategy.getNodeIDByKey(\"1053e127193339c1053e1271946e411053e1271954f00\")).toBe(\"node0\");\n      expect(strategy.getNodeIDByKey(\"10c4d9666e7c772\")).toBe(\"node3\");\n      expect(strategy.getNodeIDByKey(\"1135d1a5c3bd5851135d1a5c3d50b41135d1a5c3e0e38\")).toBe(\"node4\");\n      expect(strategy.getNodeIDByKey(\"11a6c9e51948a78\")).toBe(\"node3\");\n      expect(strategy.getNodeIDByKey(\"1217c2246ec82d4\")).toBe(\"node0\");\n      expect(strategy.getNodeIDByKey(\"1288ba63c456230\")).toBe(\"node3\");\n      expect(strategy.getNodeIDByKey(\"12f9b2a31b8068212f9b2a31b9dca712f9b2a31baadc6\")).toBe(\"node5\");\n      expect(strategy.getNodeIDByKey(\"136aaae27154870136aaae27186a3c136aaae27194038\")).toBe(\"node0\");\n      expect(strategy.getNodeIDByKey(\"13dba321c778255\")).toBe(\"node8\");\n      expect(strategy.getNodeIDByKey(\"144c9b611f41f52144c9b611f64e26144c9b611f76590\")).toBe(\"node8\");\n      expect(strategy.getNodeIDByKey(\"14bd93a0761790d14bd93a0764263914bd93a076c6705\")).toBe(\"node6\");\n      expect(strategy.getNodeIDByKey(\"152e8bdfcd94d30\")).toBe(\"node7\");\n      expect(strategy.getNodeIDByKey(\"159f841f244a9f6\")).toBe(\"node4\");\n      expect(strategy.getNodeIDByKey(\"16107c5e7b215d016107c5e7b4387e\")).toBe(\"node6\");\n      expect(strategy.getNodeIDByKey(\"1681749dd18e1c41681749dd1ad16c\")).toBe(\"node8\");\n      expect(strategy.getNodeIDByKey(\"16f26cdd2881dbc\")).toBe(\"node6\");\n      expect(strategy.getNodeIDByKey(\"1763651c7f5a32b1763651c7f7e6db1763651c7f8e867\")).toBe(\"node6\");\n      expect(strategy.getNodeIDByKey(\"17d45d5bd610116\")).toBe(\"node8\");\n      expect(strategy.getNodeIDByKey(\"1845559b2c9c1a61845559b2cbd82e\")).toBe(\"node3\");\n      expect(strategy.getNodeIDByKey(\"18b64dda839c760\")).toBe(\"node3\");\n      expect(strategy.getNodeIDByKey(\"19274619daaa2b719274619daccce8\")).toBe(\"node8\");\n      expect(strategy.getNodeIDByKey(\"19983e59318ff4a\")).toBe(\"node6\");\n      expect(strategy.getNodeIDByKey(\"1a09369895e39651a0936989614e0f\")).toBe(\"node6\");\n      expect(strategy.getNodeIDByKey(\"1a7a2ed7edbc45c\")).toBe(\"node4\");\n      expect(strategy.getNodeIDByKey(\"1aeb271744e63fe1aeb2717450b4d6\")).toBe(\"node6\");\n      expect(strategy.getNodeIDByKey(\"1b5c1f569c5aa321b5c1f569c7b9701b5c1f569c9320a\")).toBe(\"node1\");\n      expect(strategy.getNodeIDByKey(\"1bcd1795f447385\")).toBe(\"node4\");\n      expect(strategy.getNodeIDByKey(\"1c3e0fd54ba5800\")).toBe(\"node2\");\n      expect(strategy.getNodeIDByKey(\"1caf0814a3ae8ef1caf0814a3d60a7\")).toBe(\"node6\");\n      expect(strategy.getNodeIDByKey(\"1d200053fc7d8081d200053fca5978\")).toBe(\"node7\");\n      expect(strategy.getNodeIDByKey(\"1d90f8935427b6a1d90f89354506921d90f8935464c26\")).toBe(\"node7\");\n      expect(strategy.getNodeIDByKey(\"1e01f0d2ac4119c1e01f0d2ac653e01e01f0d2ac89624\")).toBe(\"node7\");\n      expect(strategy.getNodeIDByKey(\"1e72e9120455401\")).toBe(\"node0\");\n      expect(strategy.getNodeIDByKey(\"1ee3e1515f55c781ee3e1515f859d2\")).toBe(\"node4\");\n      expect(strategy.getNodeIDByKey(\"1f54d990b7d2a301f54d990b8493c61f54d990b8d56a7\")).toBe(\"node1\");\n      expect(strategy.getNodeIDByKey(\"1fc5d1d01124910\")).toBe(\"node7\");\n      expect(strategy.getNodeIDByKey(\"2036ca0f695003c2036ca0f697c5b4\")).toBe(\"node1\");\n      expect(strategy.getNodeIDByKey(\"20a7c24ec18db46\")).toBe(\"node3\");\n      expect(strategy.getNodeIDByKey(\"2118ba8e1a1c3da2118ba8e1a49cc2\")).toBe(\"node7\");\n      expect(strategy.getNodeIDByKey(\"2189b2cd7a238bc2189b2cd7a5d4042189b2cd7a74554\")).toBe(\"node7\");\n      expect(strategy.getNodeIDByKey(\"21faab0cd32764f21faab0cd35056921faab0cd367b95\")).toBe(\"node3\");\n      expect(strategy.getNodeIDByKey(\"226ba34c2d7a6d4\")).toBe(\"node7\");\n      expect(strategy.getNodeIDByKey(\"22dc9b8b8874bfd22dc9b8b88a4bc522dc9b8b88d4b8d\")).toBe(\"node8\");\n      expect(strategy.getNodeIDByKey(\"234d93cae1bc1f0234d93cae1e6a40\")).toBe(\"node6\");\n      expect(strategy.getNodeIDByKey(\"23be8c0a3a59ed9\")).toBe(\"node5\");\n      expect(strategy.getNodeIDByKey(\"242f8449934c9f8\")).toBe(\"node0\");\n      expect(strategy.getNodeIDByKey(\"24a07c88ebec8ed24a07c88ec3e811\")).toBe(\"node6\");\n      expect(strategy.getNodeIDByKey(\"251174c845d4ac8251174c84601570\")).toBe(\"node0\");\n      expect(strategy.getNodeIDByKey(\"25826d07a58d00b25826d07a5c7166\")).toBe(\"node2\");\n      expect(strategy.getNodeIDByKey(\"25f36546fef728a\")).toBe(\"node8\");\n      expect(strategy.getNodeIDByKey(\"26645d865824b46\")).toBe(\"node5\");\n      expect(strategy.getNodeIDByKey(\"26d555c5b12da78\")).toBe(\"node4\");\n      expect(strategy.getNodeIDByKey(\"27464e050a463f027464e050a7c4e827464e050a97564\")).toBe(\"node6\");\n      expect(strategy.getNodeIDByKey(\"27b7464463dbd0e27b74644640bac2\")).toBe(\"node2\");\n      expect(strategy.getNodeIDByKey(\"28283e83bd531d2\")).toBe(\"node8\");\n      expect(strategy.getNodeIDByKey(\"289936c316b17c8289936c316e95e8289936c317054f8\")).toBe(\"node2\");\n      expect(strategy.getNodeIDByKey(\"290a2f02705f821\")).toBe(\"node3\");\n      expect(strategy.getNodeIDByKey(\"297b2741c9bb12c297b2741c9ed08a\")).toBe(\"node7\");\n      expect(strategy.getNodeIDByKey(\"29ec1f8123fe64e\")).toBe(\"node4\");\n      expect(strategy.getNodeIDByKey(\"2a5d17c07d98120\")).toBe(\"node5\");\n      expect(strategy.getNodeIDByKey(\"2ace0fffd7243b8\")).toBe(\"node6\");\n      expect(strategy.getNodeIDByKey(\"2b3f083f3145b18\")).toBe(\"node6\");\n      expect(strategy.getNodeIDByKey(\"2bb0007e8af96a82bb0007e8b358d02bb0007e8b5b229\")).toBe(\"node0\");\n      expect(strategy.getNodeIDByKey(\"2c20f8bde5af9902c20f8bde5ec570\")).toBe(\"node0\");\n    });","file":"unit/strategies/shard.spec.js","skipped":false,"dir":"test"},{"name":"should create with default options","suites":["Test Base Reporter class","Test Constructor"],"updatePoint":{"line":11,"column":42},"line":11,"code":"    it(\"should create with default options\", () => {\n      const exporter = new BaseExporter();\n      expect(exporter.opts).toEqual({});\n    });","file":"unit/tracing/exporters/base.spec.js","skipped":false,"dir":"test"},{"name":"should create with custom options","suites":["Test Base Reporter class","Test Constructor"],"updatePoint":{"line":15,"column":41},"line":15,"code":"    it(\"should create with custom options\", () => {\n      const exporter = new BaseExporter({\n        some: \"thing\",\n        a: 5\n      });\n      expect(exporter.opts).toEqual({\n        some: \"thing\",\n        a: 5\n      });\n    });","file":"unit/tracing/exporters/base.spec.js","skipped":false,"dir":"test"},{"name":"should set tracer & logger","suites":["Test Base Reporter class","Test init method"],"updatePoint":{"line":27,"column":34},"line":27,"code":"    it(\"should set tracer & logger\", () => {\n      const fakeTracer = {\n        broker: {\n          Promise\n        },\n        logger: {}\n      };\n      const exporter = new BaseExporter();\n      exporter.init(fakeTracer);\n      expect(exporter.tracer).toBe(fakeTracer);\n      expect(exporter.logger).toBe(fakeTracer.logger);\n    });","file":"unit/tracing/exporters/base.spec.js","skipped":false,"dir":"test"},{"name":"should not flattening a null","suites":["Test Base Reporter class","Test flattenTags method"],"updatePoint":{"line":42,"column":36},"line":42,"code":"    it(\"should not flattening a null\", () => {\n      expect(exporter.flattenTags()).toBeNull();\n    });","file":"unit/tracing/exporters/base.spec.js","skipped":false,"dir":"test"},{"name":"should flattening an object","suites":["Test Base Reporter class","Test flattenTags method"],"updatePoint":{"line":58,"column":35},"line":58,"code":"    it(\"should flattening an object\", () => {\n      expect(exporter.flattenTags(obj)).toEqual({\n        a: 5,\n        b: \"John\",\n        \"c.d\": \"d\",\n        \"c.e.f\": true,\n        \"c.e.g\": 100,\n        \"c.h\": null\n      });\n    });","file":"unit/tracing/exporters/base.spec.js","skipped":false,"dir":"test"},{"name":"should flattening & convert to string an object","suites":["Test Base Reporter class","Test flattenTags method"],"updatePoint":{"line":68,"column":55},"line":68,"code":"    it(\"should flattening & convert to string an object\", () => {\n      expect(exporter.flattenTags(obj, true)).toEqual({\n        a: \"5\",\n        b: \"John\",\n        \"c.d\": \"d\",\n        \"c.e.f\": \"true\",\n        \"c.e.g\": \"100\",\n        \"c.h\": \"null\"\n      });\n    });","file":"unit/tracing/exporters/base.spec.js","skipped":false,"dir":"test"},{"name":"should flattening an object with path","suites":["Test Base Reporter class","Test flattenTags method"],"updatePoint":{"line":78,"column":45},"line":78,"code":"    it(\"should flattening an object with path\", () => {\n      expect(exporter.flattenTags(obj, false, \"myObj\")).toEqual({\n        \"myObj.a\": 5,\n        \"myObj.b\": \"John\",\n        \"myObj.c.d\": \"d\",\n        \"myObj.c.e.f\": true,\n        \"myObj.c.e.g\": 100,\n        \"myObj.c.h\": null\n      });\n    });","file":"unit/tracing/exporters/base.spec.js","skipped":false,"dir":"test"},{"name":"should not convert a null","suites":["Test Base Reporter class","Test errorToObject method"],"updatePoint":{"line":101,"column":33},"line":101,"code":"    it(\"should not convert a null\", () => {\n      expect(exporter.errorToObject()).toBeNull();\n    });","file":"unit/tracing/exporters/base.spec.js","skipped":false,"dir":"test"},{"name":"should convert error","suites":["Test Base Reporter class","Test errorToObject method"],"updatePoint":{"line":107,"column":28},"line":107,"code":"    it(\"should convert error\", () => {\n      expect(exporter.errorToObject(err)).toEqual({\n        message: \"Something happened\",\n        name: \"MoleculerRetryableError\"\n      });\n    });","file":"unit/tracing/exporters/base.spec.js","skipped":false,"dir":"test"},{"name":"should convert error with other fields","suites":["Test Base Reporter class","Test errorToObject method"],"updatePoint":{"line":113,"column":46},"line":113,"code":"    it(\"should convert error with other fields\", () => {\n      fakeTracer.opts.errorFields.push(\"retryable\", \"data\", \"code\");\n      expect(exporter.errorToObject(err)).toEqual({\n        message: \"Something happened\",\n        name: \"MoleculerRetryableError\",\n        code: 512,\n        retryable: true,\n        data: {\n          a: 5\n        }\n      });\n    });","file":"unit/tracing/exporters/base.spec.js","skipped":false,"dir":"test"},{"name":"should create with default options","suites":["Test Console tracing exporter class","Test Constructor"],"updatePoint":{"line":12,"column":42},"line":12,"code":"    it(\"should create with default options\", () => {\n      const exporter = new ConsoleTraceExporter();\n      expect(exporter.opts).toEqual({\n        logger: null,\n        colors: true,\n        width: 100,\n        gaugeWidth: 40\n      });\n      expect(exporter.spans).toEqual({});\n    });","file":"unit/tracing/exporters/console.spec.js","skipped":false,"dir":"test"},{"name":"should create with custom options","suites":["Test Console tracing exporter class","Test Constructor"],"updatePoint":{"line":22,"column":41},"line":22,"code":"    it(\"should create with custom options\", () => {\n      const exporter = new ConsoleTraceExporter({\n        logger: console,\n        width: 120,\n        gaugeWidth: 50\n      });\n      expect(exporter.opts).toEqual({\n        logger: console,\n        colors: true,\n        width: 120,\n        gaugeWidth: 50\n      });\n    });","file":"unit/tracing/exporters/console.spec.js","skipped":false,"dir":"test"},{"name":"should create timer","suites":["Test Console tracing exporter class","Test init method"],"updatePoint":{"line":41,"column":27},"line":41,"code":"    it(\"should create timer\", () => {\n      const exporter = new ConsoleTraceExporter({});\n      exporter.flush = jest.fn();\n      exporter.init(fakeTracer);\n      expect(exporter.tracer).toBe(fakeTracer);\n    });","file":"unit/tracing/exporters/console.spec.js","skipped":false,"dir":"test"},{"name":"should flatten default tags","suites":["Test Console tracing exporter class","Test stop method"],"updatePoint":{"line":53,"column":35},"line":53,"code":"    it(\"should flatten default tags\", async () => {\n      const exporter = new ConsoleTraceExporter({\n        defaultTags: {\n          a: {\n            b: \"c\"\n          }\n        }\n      });\n      exporter.init(fakeTracer);\n      exporter.spans = {\n        a: 5\n      };\n      await exporter.stop();\n      expect(exporter.spans).toEqual({});\n    });","file":"unit/tracing/exporters/console.spec.js","skipped":false,"dir":"test"},{"name":"should push spans to the store","suites":["Test Console tracing exporter class","Test spanStarted method"],"updatePoint":{"line":86,"column":38},"line":86,"code":"    it(\"should push spans to the store\", () => {\n      expect(exporter.spans).toEqual({});\n      exporter.spanStarted(span1);\n      exporter.spanStarted(span2);\n      expect(exporter.spans).toEqual({\n        span1: {\n          children: [],\n          span: span1\n        },\n        span2: {\n          children: [],\n          span: span2\n        }\n      });\n    });","file":"unit/tracing/exporters/console.spec.js","skipped":false,"dir":"test"},{"name":"should set child for parent","suites":["Test Console tracing exporter class","Test spanStarted method"],"updatePoint":{"line":101,"column":35},"line":101,"code":"    it(\"should set child for parent\", () => {\n      exporter.spanStarted(span3);\n      expect(exporter.spans).toEqual({\n        span1: {\n          children: [\"span3\"],\n          span: span1\n        },\n        span2: {\n          children: [],\n          span: span2\n        },\n        span3: {\n          children: [],\n          span: span3\n        }\n      });\n    });","file":"unit/tracing/exporters/console.spec.js","skipped":false,"dir":"test"},{"name":"should call printRequest if no parent span","suites":["Test Console tracing exporter class","Test spanFinished method"],"updatePoint":{"line":133,"column":50},"line":133,"code":"    it(\"should call printRequest if no parent span\", () => {\n      exporter.spanFinished(span1);\n      expect(exporter.printRequest).toHaveBeenCalledTimes(1);\n      expect(exporter.printRequest).toHaveBeenCalledWith(\"span1\");\n      expect(exporter.removeSpanWithChildren).toHaveBeenCalledTimes(1);\n      expect(exporter.removeSpanWithChildren).toHaveBeenCalledWith(\"span1\");\n    });","file":"unit/tracing/exporters/console.spec.js","skipped":false,"dir":"test"},{"name":"should not call printRequest if has parent span","suites":["Test Console tracing exporter class","Test spanFinished method"],"updatePoint":{"line":140,"column":55},"line":140,"code":"    it(\"should not call printRequest if has parent span\", () => {\n      exporter.printRequest.mockClear();\n      exporter.removeSpanWithChildren.mockClear();\n      exporter.spanFinished({\n        id: \"span2\",\n        parentID: \"span1\"\n      });\n      expect(exporter.printRequest).toHaveBeenCalledTimes(0);\n      expect(exporter.removeSpanWithChildren).toHaveBeenCalledTimes(0);\n    });","file":"unit/tracing/exporters/console.spec.js","skipped":false,"dir":"test"},{"name":"should clear printed spans","suites":["Test Console tracing exporter class","Test removeSpanWithChildren method"],"updatePoint":{"line":158,"column":34},"line":158,"code":"    it(\"should clear printed spans\", () => {\n      exporter.spans = {};\n      const span1 = {\n        id: \"span1\",\n        parentID: null\n      };\n      const span2 = {\n        id: \"span2\",\n        parentID: \"span1\"\n      };\n      const span3 = {\n        id: \"span3\",\n        parentID: \"span2\"\n      };\n      const span4 = {\n        id: \"span4\",\n        parentID: \"span3\"\n      };\n      const span5 = {\n        id: \"span5\",\n        parentID: \"span1\"\n      };\n      const span6 = {\n        id: \"span6\",\n        parentID: null\n      };\n      exporter.spanStarted(span1);\n      exporter.spanStarted(span2);\n      exporter.spanStarted(span3);\n      exporter.spanStarted(span4);\n      exporter.spanStarted(span5);\n      exporter.spanStarted(span6);\n      expect(exporter.spans).toMatchSnapshot();\n      exporter.removeSpanWithChildren(\"span1\");\n      expect(exporter.spans).toEqual({\n        span6: {\n          children: [],\n          span: span6\n        }\n      });\n    });","file":"unit/tracing/exporters/console.spec.js","skipped":false,"dir":"test"},{"name":"should print full trace","suites":["Test Console tracing exporter class","Test spans printing"],"updatePoint":{"line":264,"column":31},"line":264,"code":"    it(\"should print full trace\", () => {\n      exporter.spanStarted(span1);\n      exporter.spanStarted(span2);\n      exporter.spanStarted(span22);\n      exporter.spanStarted(span3);\n      exporter.spanFinished(span3);\n      exporter.spanFinished(span22);\n      exporter.spanFinished(span2);\n      exporter.spanFinished(span1);\n      expect(LOG_STORE).toMatchSnapshot();\n    });","file":"unit/tracing/exporters/console.spec.js","skipped":false,"dir":"test"},{"name":"should print full trace with error","suites":["Test Console tracing exporter class","Test spans printing"],"updatePoint":{"line":275,"column":42},"line":275,"code":"    it(\"should print full trace with error\", () => {\n      LOG_STORE.length = 0;\n      span22.name = \"Span #22\";\n      span22.error = {\n        name: \"MoleculerError\",\n        message: \"Something happened\"\n      };\n      exporter.spanStarted(span1);\n      exporter.spanStarted(span2);\n      exporter.spanStarted(span22);\n      exporter.spanStarted(span3);\n      exporter.spanFinished(span3);\n      exporter.spanFinished(span22);\n      exporter.spanFinished(span2);\n      exporter.spanFinished(span1);\n      expect(LOG_STORE).toMatchSnapshot();\n    });","file":"unit/tracing/exporters/console.spec.js","skipped":false,"dir":"test"},{"name":"should print to the default logger","suites":["Test Console tracing exporter class","Test spans printing"],"updatePoint":{"line":292,"column":42},"line":292,"code":"    it(\"should print to the default logger\", () => {\n      LOG_STORE.length = 0;\n      exporter.opts.logger = null;\n      exporter.logger.info = logger;\n      span22.name = \"Span #22\";\n      span22.error = null;\n      exporter.spanStarted(span1);\n      exporter.spanStarted(span2);\n      exporter.spanStarted(span22);\n      exporter.spanStarted(span3);\n      exporter.spanFinished(span3);\n      exporter.spanFinished(span22);\n      exporter.spanFinished(span2);\n      exporter.spanFinished(span1);\n      expect(LOG_STORE).toMatchSnapshot();\n    });","file":"unit/tracing/exporters/console.spec.js","skipped":false,"dir":"test"},{"name":"should create with default options","suites":["Test Datadog tracing exporter class","Test Constructor"],"updatePoint":{"line":51,"column":42},"line":51,"code":"    it(\"should create with default options\", () => {\n      const exporter = new DatadogTraceExporter();\n      expect(exporter.opts).toEqual({\n        agentUrl: process.env.DD_AGENT_URL || \"http://localhost:8126\",\n        env: process.env.DD_ENVIRONMENT || null,\n        samplingPriority: \"AUTO_KEEP\",\n        defaultTags: null,\n        tracerOptions: null\n      });\n      expect(exporter.ddTracer).toBeUndefined();\n    });","file":"unit/tracing/exporters/datadog.spec.js","skipped":false,"dir":"test"},{"name":"should create with custom options","suites":["Test Datadog tracing exporter class","Test Constructor"],"updatePoint":{"line":62,"column":41},"line":62,"code":"    it(\"should create with custom options\", () => {\n      const fakeDdTracer = {};\n      const exporter = new DatadogTraceExporter({\n        tracer: fakeDdTracer,\n        agentUrl: \"http://datadog-agent:8126\",\n        env: \"testing\",\n        samplingPriority: \"USER_KEEP\",\n        tracerOptions: {\n          b: 10\n        },\n        defaultTags: {\n          c: 15\n        }\n      });\n      expect(exporter.opts).toEqual({\n        tracer: fakeDdTracer,\n        agentUrl: \"http://datadog-agent:8126\",\n        env: \"testing\",\n        samplingPriority: \"USER_KEEP\",\n        tracerOptions: {\n          b: 10\n        },\n        defaultTags: {\n          c: 15\n        }\n      });\n      expect(exporter.ddTracer).toBe(fakeDdTracer);\n    });","file":"unit/tracing/exporters/datadog.spec.js","skipped":false,"dir":"test"},{"name":"should call ddTrace.init","suites":["Test Datadog tracing exporter class","Test init method"],"updatePoint":{"line":99,"column":32},"line":99,"code":"    it(\"should call ddTrace.init\", () => {\n      ddTrace.init.mockClear();\n      const exporter = new DatadogTraceExporter({\n        agentUrl: \"https://agent:1234\",\n        tracerOptions: {\n          a: 5\n        }\n      });\n      exporter.init(fakeTracer);\n      expect(exporter.ddTracer).toBe(fakeDdTracer);\n      expect(ddTrace.init).toHaveBeenCalledTimes(1);\n      expect(ddTrace.init).toHaveBeenCalledWith({\n        url: \"https://agent:1234\",\n        a: 5\n      });\n    });","file":"unit/tracing/exporters/datadog.spec.js","skipped":false,"dir":"test"},{"name":"should not call ddTrace.init if tracer defined in options","suites":["Test Datadog tracing exporter class","Test init method"],"updatePoint":{"line":115,"column":65},"line":115,"code":"    it(\"should not call ddTrace.init if tracer defined in options\", () => {\n      ddTrace.init.mockClear();\n      const exporter = new DatadogTraceExporter({\n        tracer: fakeDdTracer\n      });\n      exporter.init(fakeTracer);\n      expect(exporter.ddTracer).toBe(fakeDdTracer);\n      expect(ddTrace.init).toHaveBeenCalledTimes(0);\n    });","file":"unit/tracing/exporters/datadog.spec.js","skipped":false,"dir":"test"},{"name":"should wrap the getCurrentTraceID & getActiveSpanID methods of tracer","suites":["Test Datadog tracing exporter class","Test init method"],"updatePoint":{"line":124,"column":77},"line":124,"code":"    it(\"should wrap the getCurrentTraceID & getActiveSpanID methods of tracer\", () => {\n      ddTrace.init.mockClear();\n      const oldGetCurrentTraceID = fakeTracer.getCurrentTraceID;\n      const oldGetActiveSpanID = fakeTracer.getActiveSpanID;\n      const exporter = new DatadogTraceExporter();\n      exporter.init(fakeTracer);\n      expect(fakeTracer.getCurrentTraceID).not.toBe(oldGetCurrentTraceID);\n      expect(fakeTracer.getActiveSpanID).not.toBe(oldGetActiveSpanID);\n    });","file":"unit/tracing/exporters/datadog.spec.js","skipped":false,"dir":"test"},{"name":"should flatten default tags","suites":["Test Datadog tracing exporter class","Test init method"],"updatePoint":{"line":133,"column":35},"line":133,"code":"    it(\"should flatten default tags\", () => {\n      const exporter = new DatadogTraceExporter({\n        defaultTags: {\n          a: {\n            b: \"c\"\n          }\n        }\n      });\n      jest.spyOn(exporter, \"flattenTags\");\n      exporter.init(fakeTracer);\n      expect(exporter.defaultTags).toEqual({\n        \"a.b\": \"c\"\n      });\n      expect(exporter.flattenTags).toHaveBeenCalledTimes(2);\n      expect(exporter.flattenTags).toHaveBeenNthCalledWith(1, {\n        a: {\n          b: \"c\"\n        }\n      }, true);\n      expect(exporter.flattenTags).toHaveBeenNthCalledWith(2, {\n        b: \"c\"\n      }, true, \"a\");\n    });","file":"unit/tracing/exporters/datadog.spec.js","skipped":false,"dir":"test"},{"name":"should call defaultTags function","suites":["Test Datadog tracing exporter class","Test init method"],"updatePoint":{"line":156,"column":40},"line":156,"code":"    it(\"should call defaultTags function\", () => {\n      const fn = jest.fn(() => ({\n        a: {\n          b: 5\n        }\n      }));\n      const exporter = new DatadogTraceExporter({\n        defaultTags: fn\n      });\n      exporter.init(fakeTracer);\n      expect(exporter.defaultTags).toEqual({\n        \"a.b\": \"5\"\n      });\n      expect(fn).toHaveBeenCalledTimes(1);\n      expect(fn).toHaveBeenNthCalledWith(1, fakeTracer);\n    });","file":"unit/tracing/exporters/datadog.spec.js","skipped":false,"dir":"test"},{"name":"should convert normal span to Datadog span without parentID","suites":["Test Datadog tracing exporter class","Test spanStarted method"],"updatePoint":{"line":189,"column":67},"line":189,"code":"    it(\"should convert normal span to Datadog span without parentID\", () => {\n      const span = {\n        name: \"Test Span\",\n        id: \"abc-12345678901234567890\",\n        type: \"custom\",\n        traceID: \"cde-12345678901234567890\",\n        //parentID: \"def-12345678901234567890\",\n        service: {\n          fullName: \"v1.posts\"\n        },\n        startTime: 1000,\n        finishTime: 1050,\n        duration: 50,\n        tags: {\n          a: 5,\n          b: \"John\",\n          c: true,\n          d: null\n        },\n        meta: {}\n      };\n      exporter.spanStarted(span);\n      expect(exporter.ddTracer.startSpan).toHaveBeenCalledTimes(1);\n      expect(exporter.ddTracer.startSpan).toHaveBeenCalledWith(\"Test Span\", {\n        startTime: 1000,\n        childOf: undefined,\n        tags: {\n          a: 5,\n          b: \"John\",\n          c: true,\n          d: null,\n          def: \"ault\",\n          type: \"custom\",\n          resource: undefined,\n          \"sampling.priority\": \"AUTO_KEEP\",\n          \"span.kind\": \"server\",\n          \"span.type\": \"custom\"\n        }\n      });\n      expect(fakeDdSpan.setTag).toHaveBeenCalledTimes(1);\n      expect(fakeDdSpan.setTag).toHaveBeenCalledWith(\"service.name\", \"v1.posts\");\n      expect(fakeDdSpan.context).toHaveBeenCalledTimes(1); //expect(fakeSpanContext._traceId).toBeInstanceOf(\"Identifier\");\n      //expect(fakeSpanContext._spanId).toBeInstanceOf(DatadogID.Identifier);\n\n      expect(fakeSpanContext._traceId.toString()).toEqual(\"cde1234567890123\");\n      expect(fakeSpanContext._spanId.toString()).toEqual(\"abc1234567890123\");\n      expect(span.meta.datadog).toEqual({\n        span: fakeDdSpan,\n        asyncId: asyncHooks.executionAsyncId(),\n        oldSpan: undefined\n      });\n    });","file":"unit/tracing/exporters/datadog.spec.js","skipped":false,"dir":"test"},{"name":"should convert normal span to Datadog span with parentID, env & logs","suites":["Test Datadog tracing exporter class","Test spanStarted method"],"updatePoint":{"line":241,"column":76},"line":241,"code":"    it(\"should convert normal span to Datadog span with parentID, env & logs\", () => {\n      exporter.ddTracer.startSpan.mockClear();\n      fakeDdSpan.context.mockClear();\n      fakeDdSpan.setTag.mockClear();\n      DatadogSpanContext.mockClear();\n      exporter.convertID = jest.fn(id => id);\n      exporter.opts.env = \"testing\";\n      const fakeOldSpan = {\n        name: \"old-span\"\n      };\n      fakeTracerScope._spans[asyncHooks.executionAsyncId()] = fakeOldSpan;\n      const span = {\n        name: \"Test Span\",\n        type: \"action\",\n        id: \"aaa-12345678901234567890\",\n        traceID: \"bbb-12345678901234567890\",\n        parentID: \"ccc-12345678901234567890\",\n        service: {\n          fullName: \"v1.posts\"\n        },\n        startTime: 1000,\n        finishTime: 1050,\n        duration: 50,\n        tags: {\n          a: 5,\n          b: \"John\",\n          c: true,\n          d: null\n        },\n        logs: [{\n          name: \"log1\",\n          time: 100,\n          fields: {\n            a: 5\n          }\n        }, {\n          name: \"log2\",\n          time: 200,\n          fields: {\n            b: \"John\"\n          }\n        }],\n        meta: {}\n      };\n      exporter.spanStarted(span);\n      expect(exporter.ddTracer.startSpan).toHaveBeenCalledTimes(1);\n      expect(exporter.ddTracer.startSpan).toHaveBeenCalledWith(\"Test Span\", {\n        startTime: 1000,\n        childOf: {\n          parentId: \"ccc-12345678901234567890\",\n          spanId: \"ccc-12345678901234567890\",\n          traceId: \"bbb-12345678901234567890\"\n        },\n        tags: {\n          a: 5,\n          b: \"John\",\n          c: true,\n          d: null,\n          def: \"ault\",\n          type: \"action\",\n          resource: undefined,\n          \"sampling.priority\": \"AUTO_KEEP\",\n          \"span.kind\": \"server\",\n          \"span.type\": \"action\"\n        }\n      });\n      expect(fakeDdSpan.setTag).toHaveBeenCalledTimes(2);\n      expect(fakeDdSpan.setTag).toHaveBeenNthCalledWith(1, \"env\", \"testing\");\n      expect(fakeDdSpan.setTag).toHaveBeenNthCalledWith(2, \"service.name\", \"v1.posts\");\n      expect(fakeDdSpan.context).toHaveBeenCalledTimes(1);\n      expect(DatadogSpanContext).toHaveBeenCalledTimes(1);\n      expect(DatadogSpanContext).toHaveBeenCalledWith({\n        parentId: \"ccc-12345678901234567890\",\n        spanId: \"ccc-12345678901234567890\",\n        traceId: \"bbb-12345678901234567890\"\n      });\n      expect(fakeSpanContext._traceId.toString()).toEqual(\"bbb-12345678901234567890\");\n      expect(fakeSpanContext._spanId.toString()).toEqual(\"aaa-12345678901234567890\");\n      expect(span.meta.datadog).toEqual({\n        span: fakeDdSpan,\n        asyncId: asyncHooks.executionAsyncId(),\n        oldSpan: fakeOldSpan\n      });\n    });","file":"unit/tracing/exporters/datadog.spec.js","skipped":false,"dir":"test"},{"name":"should finish","suites":["Test Datadog tracing exporter class","Test spanFinished method"],"updatePoint":{"line":342,"column":21},"line":342,"code":"    it(\"should finish\", () => {\n      fakeDdSpan.finish.mockClear();\n      exporter.addTags = jest.fn();\n      exporter.addLogs = jest.fn();\n      const span = {\n        finishTime: 1050,\n        logs: [1, 5],\n        meta: {\n          datadog: {\n            span: fakeDdSpan,\n            asyncId: asyncHooks.executionAsyncId(),\n            oldSpan: undefined\n          }\n        }\n      };\n      exporter.spanFinished(span);\n      expect(exporter.addTags).toHaveBeenCalledTimes(0);\n      expect(exporter.addLogs).toHaveBeenCalledTimes(1);\n      expect(exporter.addLogs).toHaveBeenCalledWith(fakeDdSpan, span.logs);\n      expect(fakeDdSpan.finish).toHaveBeenCalledTimes(1);\n      expect(fakeDdSpan.finish).toHaveBeenCalledWith(1050);\n    });","file":"unit/tracing/exporters/datadog.spec.js","skipped":false,"dir":"test"},{"name":"should finish with error","suites":["Test Datadog tracing exporter class","Test spanFinished method"],"updatePoint":{"line":364,"column":32},"line":364,"code":"    it(\"should finish with error\", () => {\n      fakeDdSpan.finish.mockClear();\n\n      fakeTracerScope._destroy.mockClear();\n\n      exporter.addTags = jest.fn();\n      exporter.addLogs = jest.fn();\n      const fakeOldSpan = {\n        name: \"old-span\"\n      };\n      fakeTracerScope._spans[asyncHooks.executionAsyncId()] = null;\n      const err = new MoleculerRetryableError(\"Something happened\", 512, \"SOMETHING\", {\n        a: 5\n      });\n      const span = {\n        finishTime: 1050,\n        logs: [],\n        error: err,\n        meta: {\n          datadog: {\n            span: fakeDdSpan,\n            asyncId: asyncHooks.executionAsyncId(),\n            oldSpan: fakeOldSpan\n          }\n        }\n      };\n      exporter.spanFinished(span);\n      expect(exporter.addTags).toHaveBeenCalledTimes(1);\n      expect(exporter.addTags).toHaveBeenCalledWith(fakeDdSpan, \"error\", {\n        name: \"MoleculerRetryableError\",\n        code: 512,\n        data: {\n          a: 5\n        },\n        message: \"Something happened\",\n        retryable: true\n      });\n      expect(exporter.addLogs).toHaveBeenCalledTimes(1);\n      expect(exporter.addLogs).toHaveBeenCalledWith(fakeDdSpan, span.logs);\n      expect(fakeDdSpan.finish).toHaveBeenCalledTimes(1);\n      expect(fakeDdSpan.finish).toHaveBeenCalledWith(1050);\n      expect(fakeTracerScope._spans[asyncHooks.executionAsyncId()]).toBe(fakeOldSpan);\n      expect(fakeTracerScope._destroy).toHaveBeenCalledTimes(0);\n    });","file":"unit/tracing/exporters/datadog.spec.js","skipped":false,"dir":"test"},{"name":"should call span.log method","suites":["Test Datadog tracing exporter class","Test addLogs method"],"updatePoint":{"line":418,"column":35},"line":418,"code":"    it(\"should call span.log method\", () => {\n      const datadogSpan = {\n        log: jest.fn()\n      };\n      exporter.addLogs(datadogSpan, [{\n        name: \"log1\",\n        time: 100,\n        fields: {\n          a: 5\n        }\n      }, {\n        name: \"log2\",\n        time: 200,\n        fields: {\n          b: \"John\"\n        }\n      }]);\n      expect(datadogSpan.log).toHaveBeenCalledTimes(2);\n      expect(datadogSpan.log).toHaveBeenNthCalledWith(1, {\n        event: \"log1\",\n        payload: {\n          a: 5\n        }\n      }, 100);\n      expect(datadogSpan.log).toHaveBeenNthCalledWith(2, {\n        event: \"log2\",\n        payload: {\n          b: \"John\"\n        }\n      }, 200);\n    });","file":"unit/tracing/exporters/datadog.spec.js","skipped":false,"dir":"test"},{"name":"should call span.setTag method with a numeric value","suites":["Test Datadog tracing exporter class","Test addTags method"],"updatePoint":{"line":462,"column":59},"line":462,"code":"    it(\"should call span.setTag method with a numeric value\", () => {\n      datadogSpan.setTag.mockClear();\n      exporter.addTags(datadogSpan, \"a\", 5);\n      expect(datadogSpan.setTag).toHaveBeenCalledTimes(1);\n      expect(datadogSpan.setTag).toHaveBeenCalledWith(\"a\", 5);\n    });","file":"unit/tracing/exporters/datadog.spec.js","skipped":false,"dir":"test"},{"name":"should call span.setTag method with a string value","suites":["Test Datadog tracing exporter class","Test addTags method"],"updatePoint":{"line":468,"column":58},"line":468,"code":"    it(\"should call span.setTag method with a string value\", () => {\n      datadogSpan.setTag.mockClear();\n      exporter.addTags(datadogSpan, \"b\", \"John\");\n      expect(datadogSpan.setTag).toHaveBeenCalledTimes(1);\n      expect(datadogSpan.setTag).toHaveBeenCalledWith(\"b\", \"John\");\n    });","file":"unit/tracing/exporters/datadog.spec.js","skipped":false,"dir":"test"},{"name":"should call span.setTag method with null","suites":["Test Datadog tracing exporter class","Test addTags method"],"updatePoint":{"line":474,"column":48},"line":474,"code":"    it(\"should call span.setTag method with null\", () => {\n      datadogSpan.setTag.mockClear();\n      exporter.addTags(datadogSpan, \"c\", null);\n      expect(datadogSpan.setTag).toHaveBeenCalledTimes(1);\n      expect(datadogSpan.setTag).toHaveBeenCalledWith(\"c\", null);\n    });","file":"unit/tracing/exporters/datadog.spec.js","skipped":false,"dir":"test"},{"name":"should not call span.setTag method with null","suites":["Test Datadog tracing exporter class","Test addTags method"],"updatePoint":{"line":480,"column":52},"line":480,"code":"    it(\"should not call span.setTag method with null\", () => {\n      datadogSpan.setTag.mockClear();\n      exporter.addTags(datadogSpan, \"c\", undefined);\n      expect(datadogSpan.setTag).toHaveBeenCalledTimes(0);\n    });","file":"unit/tracing/exporters/datadog.spec.js","skipped":false,"dir":"test"},{"name":"should call span.setTag method with object","suites":["Test Datadog tracing exporter class","Test addTags method"],"updatePoint":{"line":485,"column":50},"line":485,"code":"    it(\"should call span.setTag method with object\", () => {\n      datadogSpan.setTag.mockClear();\n      exporter.addTags(datadogSpan, \"user\", {\n        id: 1,\n        name: \"John\",\n        address: {\n          country: \"Australia\",\n          city: \"Sydney\"\n        }\n      });\n      expect(datadogSpan.setTag).toHaveBeenCalledTimes(4);\n      expect(datadogSpan.setTag).toHaveBeenNthCalledWith(1, \"user.id\", 1);\n      expect(datadogSpan.setTag).toHaveBeenNthCalledWith(2, \"user.name\", \"John\");\n      expect(datadogSpan.setTag).toHaveBeenNthCalledWith(3, \"user.address.country\", \"Australia\");\n      expect(datadogSpan.setTag).toHaveBeenNthCalledWith(4, \"user.address.city\", \"Sydney\");\n    });","file":"unit/tracing/exporters/datadog.spec.js","skipped":false,"dir":"test"},{"name":"should truncate ID","suites":["Test Datadog tracing exporter class","Test convertID method"],"updatePoint":{"line":511,"column":26},"line":511,"code":"    it(\"should truncate ID\", () => {\n      expect(exporter.convertID()).toBeNull();\n      expect(exporter.convertID(\"\")).toBeNull();\n      expect(exporter.convertID(\"12345678\").toString()).toEqual(\"12345678\");\n      expect(exporter.convertID(\"123456789-0123456\").toString()).toEqual(\"1234567890123456\");\n      expect(exporter.convertID(\"123456789-0123456789-abcdef\").toString()).toEqual(\"1234567890123456\");\n      expect(exporter.convertID(\"abc-def\").toString()).toEqual(\"abcdef\");\n      expect(exporter.convertID(\"abc-def-abc-def-abc-def\").toString()).toEqual(\"abcdefabcdefabcd\");\n    });","file":"unit/tracing/exporters/datadog.spec.js","skipped":false,"dir":"test"},{"name":"should retun with the original traceID","suites":["Test Datadog tracing exporter class","Test wrapped getCurrentTraceID method"],"updatePoint":{"line":522,"column":46},"line":522,"code":"    it(\"should retun with the original traceID\", () => {\n      let oldGetCurrentTraceID = jest.fn(() => \"old-trace-id\");\n      const fakeTracer = {\n        broker,\n        getCurrentTraceID: oldGetCurrentTraceID,\n        getActiveSpanID: jest.fn()\n      };\n      const exporter = new DatadogTraceExporter({});\n      exporter.init(fakeTracer);\n      const res = exporter.tracer.getCurrentTraceID();\n      expect(res).toBe(\"old-trace-id\");\n      expect(oldGetCurrentTraceID).toHaveBeenCalledTimes(1);\n    });","file":"unit/tracing/exporters/datadog.spec.js","skipped":false,"dir":"test"},{"name":"should retun with the original traceID","suites":["Test Datadog tracing exporter class","Test wrapped getCurrentTraceID method"],"updatePoint":{"line":535,"column":46},"line":535,"code":"    it(\"should retun with the original traceID\", () => {\n      fakeDdSpan.context.mockClear();\n      let oldGetCurrentTraceID = jest.fn();\n      const fakeTracer = {\n        broker,\n        getCurrentTraceID: oldGetCurrentTraceID,\n        getActiveSpanID: jest.fn()\n      };\n      const exporter = new DatadogTraceExporter({});\n      exporter.init(fakeTracer);\n      const res = exporter.tracer.getCurrentTraceID();\n      expect(res).toBe(\"trace-id\");\n      expect(oldGetCurrentTraceID).toHaveBeenCalledTimes(1);\n      expect(fakeTracerScope.active).toHaveBeenCalledTimes(1);\n      expect(fakeDdSpan.context).toHaveBeenCalledTimes(1);\n      expect(fakeSpanContext.toTraceId).toHaveBeenCalledTimes(1);\n    });","file":"unit/tracing/exporters/datadog.spec.js","skipped":false,"dir":"test"},{"name":"should retun with the original spanID","suites":["Test Datadog tracing exporter class","Test wrapped getActiveSpanID method"],"updatePoint":{"line":554,"column":45},"line":554,"code":"    it(\"should retun with the original spanID\", () => {\n      let oldGetActiveSpanID = jest.fn(() => \"old-trace-id\");\n      const fakeTracer = {\n        broker,\n        getActiveSpanID: oldGetActiveSpanID,\n        getCurrentTraceID: jest.fn()\n      };\n      const exporter = new DatadogTraceExporter({});\n      exporter.init(fakeTracer);\n      const res = exporter.tracer.getActiveSpanID();\n      expect(res).toBe(\"old-trace-id\");\n      expect(oldGetActiveSpanID).toHaveBeenCalledTimes(1);\n    });","file":"unit/tracing/exporters/datadog.spec.js","skipped":false,"dir":"test"},{"name":"should retun with the original spanID","suites":["Test Datadog tracing exporter class","Test wrapped getActiveSpanID method"],"updatePoint":{"line":567,"column":45},"line":567,"code":"    it(\"should retun with the original spanID\", () => {\n      fakeDdSpan.context.mockClear();\n      fakeTracerScope.active.mockClear();\n      let oldGetActiveSpanID = jest.fn();\n      const fakeTracer = {\n        broker,\n        getActiveSpanID: oldGetActiveSpanID,\n        getCurrentTraceID: jest.fn()\n      };\n      const exporter = new DatadogTraceExporter({});\n      exporter.init(fakeTracer);\n      const res = exporter.tracer.getActiveSpanID();\n      expect(res).toBe(\"span-id\");\n      expect(oldGetActiveSpanID).toHaveBeenCalledTimes(1);\n      expect(fakeTracerScope.active).toHaveBeenCalledTimes(1);\n      expect(fakeDdSpan.context).toHaveBeenCalledTimes(1);\n      expect(fakeSpanContext.toSpanId).toHaveBeenCalledTimes(1);\n    });","file":"unit/tracing/exporters/datadog.spec.js","skipped":false,"dir":"test"},{"name":"should create with default options","suites":["Test Event Legacy tracing exporter class","Test Constructor"],"updatePoint":{"line":17,"column":42},"line":17,"code":"    it(\"should create with default options\", () => {\n      const exporter = new EventLegacyTraceExporter();\n      expect(exporter.opts).toEqual({});\n    });","file":"unit/tracing/exporters/event-legacy.spec.js","skipped":false,"dir":"test"},{"name":"should set broker timer","suites":["Test Event Legacy tracing exporter class","Test init method"],"updatePoint":{"line":27,"column":31},"line":27,"code":"    it(\"should set broker timer\", () => {\n      const exporter = new EventLegacyTraceExporter({});\n      exporter.flush = jest.fn();\n      exporter.init(fakeTracer);\n      expect(exporter.broker).toBe(broker);\n    });","file":"unit/tracing/exporters/event-legacy.spec.js","skipped":false,"dir":"test"},{"name":"should push spans to the queue","suites":["Test Event Legacy tracing exporter class","Test spanStarted method"],"updatePoint":{"line":40,"column":38},"line":40,"code":"    it(\"should push spans to the queue\", () => {\n      broker.emit.mockClear();\n      const exporter = new EventLegacyTraceExporter({});\n      exporter.generateMetricPayload = jest.fn(() => ({\n        converted: true\n      }));\n      exporter.init(fakeTracer);\n      const span1 = {\n        tags: {}\n      };\n      exporter.spanStarted(span1);\n      expect(exporter.generateMetricPayload).toHaveBeenCalledTimes(1);\n      expect(exporter.generateMetricPayload).toHaveBeenCalledWith(span1);\n      expect(broker.emit).toHaveBeenCalledTimes(1);\n      expect(broker.emit).toHaveBeenCalledWith(\"metrics.trace.span.start\", {\n        converted: true\n      });\n    });","file":"unit/tracing/exporters/event-legacy.spec.js","skipped":false,"dir":"test"},{"name":"should skip tracing events","suites":["Test Event Legacy tracing exporter class","Test spanStarted method"],"updatePoint":{"line":58,"column":34},"line":58,"code":"    it(\"should skip tracing events\", () => {\n      broker.emit.mockClear();\n      const exporter = new EventLegacyTraceExporter({});\n      exporter.generateMetricPayload = jest.fn(() => ({\n        converted: true\n      }));\n      exporter.init(fakeTracer);\n      const span1 = {\n        tags: {\n          eventName: \"metrics.trace.span.start\"\n        }\n      };\n      const span2 = {\n        tags: {\n          eventName: \"metrics.trace.span.finish\"\n        }\n      };\n      exporter.spanStarted(span1);\n      exporter.spanStarted(span2);\n      expect(exporter.generateMetricPayload).toHaveBeenCalledTimes(0);\n      expect(broker.emit).toHaveBeenCalledTimes(0);\n    });","file":"unit/tracing/exporters/event-legacy.spec.js","skipped":false,"dir":"test"},{"name":"should push spans to the queue","suites":["Test Event Legacy tracing exporter class","Test spanFinished method"],"updatePoint":{"line":87,"column":38},"line":87,"code":"    it(\"should push spans to the queue\", () => {\n      broker.emit.mockClear();\n      const exporter = new EventLegacyTraceExporter({});\n      exporter.generateMetricPayload = jest.fn(() => ({\n        converted: true\n      }));\n      exporter.init(fakeTracer);\n      const span1 = {\n        tags: {}\n      };\n      exporter.spanFinished(span1);\n      expect(exporter.generateMetricPayload).toHaveBeenCalledTimes(1);\n      expect(exporter.generateMetricPayload).toHaveBeenCalledWith(span1);\n      expect(broker.emit).toHaveBeenCalledTimes(1);\n      expect(broker.emit).toHaveBeenCalledWith(\"metrics.trace.span.finish\", {\n        converted: true\n      });\n    });","file":"unit/tracing/exporters/event-legacy.spec.js","skipped":false,"dir":"test"},{"name":"should skip tracing events","suites":["Test Event Legacy tracing exporter class","Test spanFinished method"],"updatePoint":{"line":105,"column":34},"line":105,"code":"    it(\"should skip tracing events\", () => {\n      broker.emit.mockClear();\n      const exporter = new EventLegacyTraceExporter({});\n      exporter.generateMetricPayload = jest.fn(() => ({\n        converted: true\n      }));\n      exporter.init(fakeTracer);\n      const span1 = {\n        tags: {\n          eventName: \"metrics.trace.span.start\"\n        }\n      };\n      const span2 = {\n        tags: {\n          eventName: \"metrics.trace.span.finish\"\n        }\n      };\n      exporter.spanFinished(span1);\n      exporter.spanFinished(span2);\n      expect(exporter.generateMetricPayload).toHaveBeenCalledTimes(0);\n      expect(broker.emit).toHaveBeenCalledTimes(0);\n    });","file":"unit/tracing/exporters/event-legacy.spec.js","skipped":false,"dir":"test"},{"name":"should convert normal span to legacy payload","suites":["Test Event Legacy tracing exporter class","Test generateMetricPayload"],"updatePoint":{"line":139,"column":52},"line":139,"code":"    it(\"should convert normal span to legacy payload\", () => {\n      const span = {\n        name: \"Test Span\",\n        id: \"span-id-123\",\n        traceID: \"trace-id-123\",\n        parentID: \"parent-id-123\",\n        service: {\n          name: \"posts\",\n          version: 1,\n          fullName: \"v1.posts\"\n        },\n        startTime: 1000,\n        finishTime: 1050,\n        duration: 50,\n        tags: {\n          a: 5,\n          b: \"John\",\n          callingLevel: 5,\n          remoteCall: true,\n          action: {\n            name: \"posts.find\",\n            rawName: \"find\"\n          },\n          callerNodeID: \"other-node\",\n          fromCache: true\n        },\n        opts: {}\n      };\n      expect(exporter.generateMetricPayload(span)).toMatchSnapshot();\n      expect(exporter.processExtraMetrics).toHaveBeenCalledTimes(0);\n    });","file":"unit/tracing/exporters/event-legacy.spec.js","skipped":false,"dir":"test"},{"name":"should convert errored span to legacy payload","suites":["Test Event Legacy tracing exporter class","Test generateMetricPayload"],"updatePoint":{"line":170,"column":53},"line":170,"code":"    it(\"should convert errored span to legacy payload\", () => {\n      const err = new MoleculerRetryableError(\"Something happened\", 512, \"SOMETHING\", {\n        a: 5\n      });\n      const span = {\n        name: \"Test Span\",\n        id: \"span-id-123\",\n        traceID: \"trace-id-123\",\n        parentID: \"parent-id-123\",\n        service: {\n          name: \"posts\",\n          version: 1,\n          fullName: \"v1.posts\"\n        },\n        startTime: 1000,\n        finishTime: 1050,\n        duration: 50,\n        tags: {\n          a: 5,\n          b: \"John\",\n          callingLevel: 5,\n          remoteCall: true,\n          action: {\n            name: \"posts.find\",\n            rawName: \"find\"\n          },\n          callerNodeID: \"other-node\",\n          fromCache: true\n        },\n        opts: {},\n        error: err\n      };\n      expect(exporter.generateMetricPayload(span)).toMatchSnapshot();\n      expect(exporter.processExtraMetrics).toHaveBeenCalledTimes(0);\n    });","file":"unit/tracing/exporters/event-legacy.spec.js","skipped":false,"dir":"test"},{"name":"should call processExtraMetrics","suites":["Test Event Legacy tracing exporter class","Test generateMetricPayload"],"updatePoint":{"line":205,"column":39},"line":205,"code":"    it(\"should call processExtraMetrics\", () => {\n      exporter.processExtraMetrics = jest.fn();\n      const ctx = {\n        a: 5\n      };\n      const span = {\n        name: \"Test Span\",\n        id: \"span-id-123\",\n        traceID: \"trace-id-123\",\n        parentID: \"parent-id-123\",\n        service: {\n          name: \"posts\",\n          version: 1,\n          fullName: \"v1.posts\"\n        },\n        startTime: 1000,\n        finishTime: 1050,\n        duration: 50,\n        tags: {\n          a: 5,\n          b: \"John\",\n          callingLevel: 5,\n          remoteCall: true,\n          action: {\n            name: \"posts.find\",\n            rawName: \"find\"\n          },\n          callerNodeID: \"other-node\",\n          fromCache: true\n        },\n        opts: {\n          ctx\n        }\n      };\n      const payload = exporter.generateMetricPayload(span);\n      expect(exporter.processExtraMetrics).toHaveBeenCalledTimes(1);\n      expect(exporter.processExtraMetrics).toHaveBeenCalledWith(ctx, payload);\n    });","file":"unit/tracing/exporters/event-legacy.spec.js","skipped":false,"dir":"test"},{"name":"should not call assignExtraMetrics","suites":["Test Event Legacy tracing exporter class","Test processExtraMetrics"],"updatePoint":{"line":252,"column":42},"line":252,"code":"    it(\"should not call assignExtraMetrics\", () => {\n      const ctx = {\n        action: {}\n      };\n      const payload = {};\n      exporter.processExtraMetrics(ctx, payload);\n      expect(exporter.assignExtraMetrics).toHaveBeenCalledTimes(0);\n    });","file":"unit/tracing/exporters/event-legacy.spec.js","skipped":false,"dir":"test"},{"name":"should call assignExtraMetrics","suites":["Test Event Legacy tracing exporter class","Test processExtraMetrics"],"updatePoint":{"line":260,"column":38},"line":260,"code":"    it(\"should call assignExtraMetrics\", () => {\n      const ctx = {\n        action: {\n          metrics: {}\n        }\n      };\n      const payload = {};\n      exporter.processExtraMetrics(ctx, payload);\n      expect(exporter.assignExtraMetrics).toHaveBeenCalledTimes(2);\n      expect(exporter.assignExtraMetrics).toHaveBeenNthCalledWith(1, ctx, \"params\", payload);\n      expect(exporter.assignExtraMetrics).toHaveBeenNthCalledWith(2, ctx, \"meta\", payload);\n    });","file":"unit/tracing/exporters/event-legacy.spec.js","skipped":false,"dir":"test"},{"name":"should add all ctx.params to payload","suites":["Test Event Legacy tracing exporter class","Test assignExtraMetrics"],"updatePoint":{"line":280,"column":44},"line":280,"code":"    it(\"should add all ctx.params to payload\", () => {\n      const ctx = {\n        action: {\n          metrics: {\n            params: true\n          }\n        },\n        params: {\n          a: 5,\n          b: \"John\",\n          c: true\n        }\n      };\n      const payload = {};\n      exporter.assignExtraMetrics(ctx, \"params\", payload);\n      expect(payload).toEqual({\n        params: {\n          a: 5,\n          b: \"John\",\n          c: true\n        }\n      });\n    });","file":"unit/tracing/exporters/event-legacy.spec.js","skipped":false,"dir":"test"},{"name":"should add some ctx.params to payload","suites":["Test Event Legacy tracing exporter class","Test assignExtraMetrics"],"updatePoint":{"line":303,"column":45},"line":303,"code":"    it(\"should add some ctx.params to payload\", () => {\n      const ctx = {\n        action: {\n          metrics: {\n            params: [\"a\", \"c\"]\n          }\n        },\n        params: {\n          a: 5,\n          b: \"John\",\n          c: true\n        }\n      };\n      const payload = {};\n      exporter.assignExtraMetrics(ctx, \"params\", payload);\n      expect(payload).toEqual({\n        params: {\n          a: 5,\n          c: true\n        }\n      });\n    });","file":"unit/tracing/exporters/event-legacy.spec.js","skipped":false,"dir":"test"},{"name":"should call custom function","suites":["Test Event Legacy tracing exporter class","Test assignExtraMetrics"],"updatePoint":{"line":325,"column":35},"line":325,"code":"    it(\"should call custom function\", () => {\n      const ctx = {\n        action: {\n          metrics: {\n            params: obj => ({\n              a: 6,\n              b: \"Jane\",\n              c: obj.c\n            })\n          }\n        },\n        params: {\n          a: 5,\n          b: \"John\",\n          c: true\n        }\n      };\n      const payload = {};\n      exporter.assignExtraMetrics(ctx, \"params\", payload);\n      expect(payload).toEqual({\n        params: {\n          a: 6,\n          b: \"Jane\",\n          c: true\n        }\n      });\n    });","file":"unit/tracing/exporters/event-legacy.spec.js","skipped":false,"dir":"test"},{"name":"should create with default options","suites":["Test Event tracing exporter class","Test Constructor"],"updatePoint":{"line":25,"column":42},"line":25,"code":"    it(\"should create with default options\", () => {\n      exporter = new EventTraceExporter();\n      expect(exporter.opts).toEqual({\n        eventName: \"$tracing.spans\",\n        sendStartSpan: false,\n        sendFinishSpan: true,\n        broadcast: false,\n        groups: null,\n        interval: 5,\n        spanConverter: null,\n        defaultTags: null\n      });\n      expect(exporter.queue).toBeInstanceOf(Array);\n    });","file":"unit/tracing/exporters/event.spec.js","skipped":false,"dir":"test"},{"name":"should create with custom options","suites":["Test Event tracing exporter class","Test Constructor"],"updatePoint":{"line":39,"column":41},"line":39,"code":"    it(\"should create with custom options\", () => {\n      exporter = new EventTraceExporter({\n        eventName: \"my-tracing.spans\",\n        sendStartSpan: true,\n        sendFinishSpan: true,\n        broadcast: true,\n        interval: 10,\n        defaultTags: {\n          a: 5\n        }\n      });\n      expect(exporter.opts).toEqual({\n        eventName: \"my-tracing.spans\",\n        sendStartSpan: true,\n        sendFinishSpan: true,\n        broadcast: true,\n        groups: null,\n        interval: 10,\n        spanConverter: null,\n        defaultTags: {\n          a: 5\n        }\n      });\n    });","file":"unit/tracing/exporters/event.spec.js","skipped":false,"dir":"test"},{"name":"should create timer","suites":["Test Event tracing exporter class","Test init method"],"updatePoint":{"line":72,"column":27},"line":72,"code":"    it(\"should create timer\", () => {\n      exporter = new EventTraceExporter({});\n      exporter.flush = jest.fn();\n      exporter.init(fakeTracer);\n      expect(exporter.broker).toBe(broker);\n      expect(exporter.timer).toBeDefined();\n      expect(exporter.flush).toBeCalledTimes(0);\n      clock.tick(5500);\n      expect(exporter.flush).toBeCalledTimes(1);\n    });","file":"unit/tracing/exporters/event.spec.js","skipped":false,"dir":"test"},{"name":"should not create timer","suites":["Test Event tracing exporter class","Test init method"],"updatePoint":{"line":82,"column":31},"line":82,"code":"    it(\"should not create timer\", () => {\n      exporter = new EventTraceExporter({\n        interval: 0\n      });\n      exporter.init(fakeTracer);\n      expect(exporter.timer).toBeUndefined();\n    });","file":"unit/tracing/exporters/event.spec.js","skipped":false,"dir":"test"},{"name":"should flatten default tags","suites":["Test Event tracing exporter class","Test init method"],"updatePoint":{"line":89,"column":35},"line":89,"code":"    it(\"should flatten default tags\", () => {\n      exporter = new EventTraceExporter({\n        defaultTags: {\n          a: {\n            b: \"c\"\n          }\n        }\n      });\n      exporter.init(fakeTracer);\n      expect(exporter.defaultTags).toEqual({\n        a: {\n          b: \"c\"\n        }\n      });\n    });","file":"unit/tracing/exporters/event.spec.js","skipped":false,"dir":"test"},{"name":"should call defaultTags function","suites":["Test Event tracing exporter class","Test init method"],"updatePoint":{"line":104,"column":40},"line":104,"code":"    it(\"should call defaultTags function\", () => {\n      const fn = jest.fn(() => ({\n        a: {\n          b: 5\n        }\n      }));\n      exporter = new EventTraceExporter({\n        defaultTags: fn\n      });\n      exporter.init(fakeTracer);\n      expect(exporter.defaultTags).toEqual({\n        a: {\n          b: 5\n        }\n      });\n      expect(fn).toHaveBeenCalledTimes(1);\n      expect(fn).toHaveBeenNthCalledWith(1, fakeTracer);\n    });","file":"unit/tracing/exporters/event.spec.js","skipped":false,"dir":"test"},{"name":"should flatten default tags","suites":["Test Event tracing exporter class","Test stop method"],"updatePoint":{"line":128,"column":35},"line":128,"code":"    it(\"should flatten default tags\", async () => {\n      exporter = new EventTraceExporter({\n        defaultTags: {\n          a: {\n            b: \"c\"\n          }\n        }\n      });\n      exporter.init(fakeTracer);\n      expect(exporter.timer).toBeDefined();\n      await exporter.stop();\n      expect(exporter.timer).toBeNull();\n    });","file":"unit/tracing/exporters/event.spec.js","skipped":false,"dir":"test"},{"name":"should push spans to the queue","suites":["Test Event tracing exporter class","Test spanFinished method"],"updatePoint":{"line":147,"column":38},"line":147,"code":"    it(\"should push spans to the queue\", () => {\n      exporter = new EventTraceExporter({});\n      exporter.init(fakeTracer);\n      expect(exporter.queue).toEqual([]);\n      const span1 = {\n        tags: {}\n      };\n      const span2 = {\n        tags: {}\n      };\n      exporter.spanFinished(span1);\n      exporter.spanFinished(span2);\n      expect(exporter.queue).toEqual([span1, span2]);\n    });","file":"unit/tracing/exporters/event.spec.js","skipped":false,"dir":"test"},{"name":"should not push spans to the queue","suites":["Test Event tracing exporter class","Test spanFinished method"],"updatePoint":{"line":161,"column":42},"line":161,"code":"    it(\"should not push spans to the queue\", () => {\n      exporter = new EventTraceExporter({\n        sendFinishSpan: false\n      });\n      exporter.init(fakeTracer);\n      expect(exporter.queue).toEqual([]);\n      const span1 = {};\n      const span2 = {};\n      exporter.spanFinished(span1);\n      exporter.spanFinished(span2);\n      expect(exporter.queue.length).toBe(0);\n    });","file":"unit/tracing/exporters/event.spec.js","skipped":false,"dir":"test"},{"name":"should not generate data if queue is empty","suites":["Test Event tracing exporter class","Test flush method"],"updatePoint":{"line":188,"column":50},"line":188,"code":"    it(\"should not generate data if queue is empty\", () => {\n      exporter.flush();\n      expect(exporter.generateTracingData).toHaveBeenCalledTimes(0);\n    });","file":"unit/tracing/exporters/event.spec.js","skipped":false,"dir":"test"},{"name":"should generate & emit event","suites":["Test Event tracing exporter class","Test flush method"],"updatePoint":{"line":192,"column":36},"line":192,"code":"    it(\"should generate & emit event\", () => {\n      exporter.spanFinished({\n        tags: {}\n      });\n      exporter.flush();\n      expect(exporter.generateTracingData).toHaveBeenCalledTimes(1);\n      expect(exporter.queue.length).toEqual(0);\n      expect(broker.broadcast).toHaveBeenCalledTimes(0);\n      expect(broker.emit).toHaveBeenCalledTimes(1);\n      expect(broker.emit).toHaveBeenCalledWith(\"$tracing.spans\", [{\n        a: 5\n      }], {\n        groups: null\n      });\n    });","file":"unit/tracing/exporters/event.spec.js","skipped":false,"dir":"test"},{"name":"should generate & broadcast event with groups","suites":["Test Event tracing exporter class","Test flush method"],"updatePoint":{"line":207,"column":53},"line":207,"code":"    it(\"should generate & broadcast event with groups\", () => {\n      exporter.generateTracingData.mockClear();\n      broker.emit.mockClear();\n      exporter.opts.broadcast = true;\n      exporter.opts.groups = [\"mail\", \"payment\"];\n      exporter.spanFinished({\n        tags: {}\n      });\n      exporter.flush();\n      expect(exporter.generateTracingData).toHaveBeenCalledTimes(1);\n      expect(exporter.queue.length).toEqual(0);\n      expect(broker.emit).toHaveBeenCalledTimes(0);\n      expect(broker.broadcast).toHaveBeenCalledTimes(1);\n      expect(broker.broadcast).toHaveBeenCalledWith(\"$tracing.spans\", [{\n        a: 5\n      }], {\n        groups: [\"mail\", \"payment\"]\n      });\n    });","file":"unit/tracing/exporters/event.spec.js","skipped":false,"dir":"test"},{"name":"should return with a new array","suites":["Test Event tracing exporter class","Test generateTracingData method"],"updatePoint":{"line":232,"column":38},"line":232,"code":"    it(\"should return with a new array\", () => {\n      exporter = new EventTraceExporter({});\n      exporter.init(fakeTracer);\n      exporter.queue.push({\n        a: 5\n      }, {\n        b: 10\n      });\n      const res = exporter.generateTracingData();\n      expect(res).toEqual([{\n        a: 5\n      }, {\n        b: 10\n      }]);\n      expect(res).not.toBe(exporter.queue);\n    });","file":"unit/tracing/exporters/event.spec.js","skipped":false,"dir":"test"},{"name":"should call spanConverter","suites":["Test Event tracing exporter class","Test generateTracingData method"],"updatePoint":{"line":248,"column":33},"line":248,"code":"    it(\"should call spanConverter\", () => {\n      const spanConverter = jest.fn(span => Object.assign({\n        converted: true\n      }, span));\n      exporter = new EventTraceExporter({\n        spanConverter\n      });\n      exporter.init(fakeTracer);\n      exporter.queue.push({\n        a: 5\n      }, {\n        b: 10\n      });\n      const res = exporter.generateTracingData();\n      expect(spanConverter).toHaveBeenCalledTimes(2);\n      expect(spanConverter).toHaveBeenNthCalledWith(1, {\n        a: 5\n      });\n      expect(spanConverter).toHaveBeenNthCalledWith(2, {\n        b: 10\n      });\n      expect(res).toEqual([{\n        a: 5,\n        converted: true\n      }, {\n        b: 10,\n        converted: true\n      }]);\n      expect(res).not.toBe(exporter.queue);\n    });","file":"unit/tracing/exporters/event.spec.js","skipped":false,"dir":"test"},{"name":"should push into queue only spanFinished","suites":["Test Event tracing exporter class","Test spanStarted & spanFinished method"],"updatePoint":{"line":284,"column":48},"line":284,"code":"    it(\"should push into queue only spanFinished\", () => {\n      exporter = new EventTraceExporter({});\n      exporter.init(fakeTracer);\n      exporter.spanStarted({\n        a: 5,\n        tags: {}\n      });\n      exporter.spanFinished({\n        b: 10,\n        tags: {}\n      });\n      expect(exporter.queue).toEqual([{\n        b: 10,\n        tags: {}\n      }]);\n    });","file":"unit/tracing/exporters/event.spec.js","skipped":false,"dir":"test"},{"name":"should push into queue only spanStarted","suites":["Test Event tracing exporter class","Test spanStarted & spanFinished method"],"updatePoint":{"line":300,"column":47},"line":300,"code":"    it(\"should push into queue only spanStarted\", () => {\n      exporter = new EventTraceExporter({\n        sendStartSpan: true,\n        sendFinishSpan: false\n      });\n      exporter.init(fakeTracer);\n      exporter.spanStarted({\n        a: 5,\n        tags: {}\n      });\n      exporter.spanFinished({\n        b: 10,\n        tags: {}\n      });\n      expect(exporter.queue).toEqual([{\n        a: 5,\n        tags: {}\n      }]);\n    });","file":"unit/tracing/exporters/event.spec.js","skipped":false,"dir":"test"},{"name":"should not push any span","suites":["Test Event tracing exporter class","Test spanStarted & spanFinished method"],"updatePoint":{"line":319,"column":32},"line":319,"code":"    it(\"should not push any span\", () => {\n      exporter = new EventTraceExporter({\n        sendFinishSpan: false\n      });\n      exporter.init(fakeTracer);\n      exporter.spanStarted({\n        a: 5,\n        tags: {}\n      });\n      exporter.spanFinished({\n        b: 10,\n        tags: {}\n      });\n      expect(exporter.queue).toEqual([]);\n    });","file":"unit/tracing/exporters/event.spec.js","skipped":false,"dir":"test"},{"name":"should push all spans & call flush","suites":["Test Event tracing exporter class","Test spanStarted & spanFinished method"],"updatePoint":{"line":334,"column":42},"line":334,"code":"    it(\"should push all spans & call flush\", () => {\n      exporter = new EventTraceExporter({\n        sendStartSpan: true,\n        sendFinishSpan: true,\n        interval: 0\n      });\n      exporter.flush = jest.fn();\n      exporter.init(fakeTracer);\n      exporter.spanStarted({\n        a: 5,\n        tags: {}\n      });\n      exporter.spanFinished({\n        b: 10,\n        tags: {}\n      });\n      expect(exporter.queue).toEqual([{\n        a: 5,\n        tags: {}\n      }, {\n        b: 10,\n        tags: {}\n      }]);\n      expect(exporter.flush).toHaveBeenCalledTimes(2);\n    });","file":"unit/tracing/exporters/event.spec.js","skipped":false,"dir":"test"},{"name":"should skip tracing events","suites":["Test Event tracing exporter class","Test spanStarted & spanFinished method"],"updatePoint":{"line":359,"column":34},"line":359,"code":"    it(\"should skip tracing events\", () => {\n      exporter = new EventTraceExporter({\n        sendStartSpan: true,\n        sendFinishSpan: true\n      });\n      exporter.init(fakeTracer);\n      exporter.spanStarted({\n        tags: {\n          eventName: \"$tracing.spans\"\n        }\n      });\n      exporter.spanFinished({\n        tags: {\n          eventName: \"$tracing.spans\"\n        }\n      });\n      expect(exporter.queue).toEqual([]);\n    });","file":"unit/tracing/exporters/event.spec.js","skipped":false,"dir":"test"},{"name":"should return with a new array","suites":["Test Event tracing exporter class","Test generateTracingData method"],"updatePoint":{"line":383,"column":38},"line":383,"code":"    it(\"should return with a new array\", () => {\n      exporter = new EventTraceExporter({});\n      exporter.init(fakeTracer);\n      exporter.queue.push({\n        a: 5\n      }, {\n        b: 10\n      });\n      const res = exporter.generateTracingData();\n      expect(res).toEqual([{\n        a: 5\n      }, {\n        b: 10\n      }]);\n      expect(res).not.toBe(exporter.queue);\n    });","file":"unit/tracing/exporters/event.spec.js","skipped":false,"dir":"test"},{"name":"should convert Errors","suites":["Test Event tracing exporter class","Test generateTracingData method"],"updatePoint":{"line":399,"column":29},"line":399,"code":"    it(\"should convert Errors\", () => {\n      const error = new MoleculerRetryableError(\"Something happened\", 503, \"SOMETHING_HAPPENED\", {\n        c: \"bug\"\n      });\n      exporter = new EventTraceExporter({});\n      exporter.init(fakeTracer);\n      exporter.errorToObject = jest.fn(err => err.name);\n      exporter.queue.push({\n        a: 5\n      }, {\n        b: 10,\n        error\n      });\n      const res = exporter.generateTracingData();\n      expect(res).toEqual([{\n        a: 5\n      }, {\n        b: 10,\n        error: \"MoleculerRetryableError\"\n      }]);\n      expect(res).not.toBe(exporter.queue);\n      expect(exporter.errorToObject).toBeCalledTimes(1);\n      expect(exporter.errorToObject).toBeCalledWith(error);\n    });","file":"unit/tracing/exporters/event.spec.js","skipped":false,"dir":"test"},{"name":"should call spanConverter","suites":["Test Event tracing exporter class","Test generateTracingData method"],"updatePoint":{"line":423,"column":33},"line":423,"code":"    it(\"should call spanConverter\", () => {\n      const spanConverter = jest.fn(span => Object.assign({\n        converted: true\n      }, span));\n      exporter = new EventTraceExporter({\n        spanConverter\n      });\n      exporter.init(fakeTracer);\n      exporter.queue.push({\n        a: 5\n      }, {\n        b: 10\n      });\n      const res = exporter.generateTracingData();\n      expect(spanConverter).toHaveBeenCalledTimes(2);\n      expect(spanConverter).toHaveBeenNthCalledWith(1, {\n        a: 5\n      });\n      expect(spanConverter).toHaveBeenNthCalledWith(2, {\n        b: 10\n      });\n      expect(res).toEqual([{\n        a: 5,\n        converted: true\n      }, {\n        b: 10,\n        converted: true\n      }]);\n      expect(res).not.toBe(exporter.queue);\n    });","file":"unit/tracing/exporters/event.spec.js","skipped":false,"dir":"test"},{"name":"should throw error","suites":["Test TracingExporters resolver"],"updatePoint":{"line":8,"column":24},"line":8,"code":"  it(\"should throw error\", () => {\n    expect(() => TracingExporters.resolve()).toThrowError(BrokerOptionsError);\n    expect(() => TracingExporters.resolve({})).toThrowError(BrokerOptionsError);\n    expect(() => TracingExporters.resolve(\"xyz\")).toThrowError(BrokerOptionsError);\n    expect(() => TracingExporters.resolve({\n      type: \"xyz\"\n    })).toThrowError(BrokerOptionsError);\n  });","file":"unit/tracing/exporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve console tracing exporter from string","suites":["Test TracingExporters resolver"],"updatePoint":{"line":16,"column":57},"line":16,"code":"  it(\"should resolve console tracing exporter from string\", () => {\n    let reporter = TracingExporters.resolve(\"Console\");\n    expect(reporter).toBeInstanceOf(TracingExporters.Console);\n  });","file":"unit/tracing/exporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve console tracing exporter from obj","suites":["Test TracingExporters resolver"],"updatePoint":{"line":20,"column":54},"line":20,"code":"  it(\"should resolve console tracing exporter from obj\", () => {\n    let options = {\n      interval: 2000\n    };\n    let reporter = TracingExporters.resolve({\n      type: \"Console\",\n      options\n    });\n    expect(reporter).toBeInstanceOf(TracingExporters.Console);\n    expect(reporter.opts).toEqual(expect.objectContaining({\n      interval: 2000\n    }));\n  });","file":"unit/tracing/exporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve Datadog tracing exporter from string","suites":["Test TracingExporters resolver"],"updatePoint":{"line":33,"column":57},"line":33,"code":"  it(\"should resolve Datadog tracing exporter from string\", () => {\n    let reporter = TracingExporters.resolve(\"Datadog\");\n    expect(reporter).toBeInstanceOf(TracingExporters.Datadog);\n  });","file":"unit/tracing/exporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve Datadog tracing exporter from obj","suites":["Test TracingExporters resolver"],"updatePoint":{"line":37,"column":54},"line":37,"code":"  it(\"should resolve Datadog tracing exporter from obj\", () => {\n    let options = {\n      interval: 2000\n    };\n    let reporter = TracingExporters.resolve({\n      type: \"Datadog\",\n      options\n    });\n    expect(reporter).toBeInstanceOf(TracingExporters.Datadog);\n    expect(reporter.opts).toEqual(expect.objectContaining({\n      interval: 2000\n    }));\n  });","file":"unit/tracing/exporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve event tracing exporter from string","suites":["Test TracingExporters resolver"],"updatePoint":{"line":50,"column":55},"line":50,"code":"  it(\"should resolve event tracing exporter from string\", () => {\n    let reporter = TracingExporters.resolve(\"Event\");\n    expect(reporter).toBeInstanceOf(TracingExporters.Event);\n  });","file":"unit/tracing/exporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve event tracing exporter from obj","suites":["Test TracingExporters resolver"],"updatePoint":{"line":54,"column":52},"line":54,"code":"  it(\"should resolve event tracing exporter from obj\", () => {\n    let options = {\n      interval: 2000\n    };\n    let reporter = TracingExporters.resolve({\n      type: \"Event\",\n      options\n    });\n    expect(reporter).toBeInstanceOf(TracingExporters.Event);\n    expect(reporter.opts).toEqual(expect.objectContaining({\n      interval: 2000\n    }));\n  });","file":"unit/tracing/exporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve EventLegacy tracing exporter from string","suites":["Test TracingExporters resolver"],"updatePoint":{"line":67,"column":61},"line":67,"code":"  it(\"should resolve EventLegacy tracing exporter from string\", () => {\n    let reporter = TracingExporters.resolve(\"EventLegacy\");\n    expect(reporter).toBeInstanceOf(TracingExporters.EventLegacy);\n  });","file":"unit/tracing/exporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve EventLegacy tracing exporter from obj","suites":["Test TracingExporters resolver"],"updatePoint":{"line":71,"column":58},"line":71,"code":"  it(\"should resolve EventLegacy tracing exporter from obj\", () => {\n    let options = {\n      interval: 2000\n    };\n    let reporter = TracingExporters.resolve({\n      type: \"EventLegacy\",\n      options\n    });\n    expect(reporter).toBeInstanceOf(TracingExporters.EventLegacy);\n    expect(reporter.opts).toEqual(expect.objectContaining({\n      interval: 2000\n    }));\n  });","file":"unit/tracing/exporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve Jaeger tracing exporter from string","suites":["Test TracingExporters resolver"],"updatePoint":{"line":84,"column":56},"line":84,"code":"  it(\"should resolve Jaeger tracing exporter from string\", () => {\n    let reporter = TracingExporters.resolve(\"Jaeger\");\n    expect(reporter).toBeInstanceOf(TracingExporters.Jaeger);\n  });","file":"unit/tracing/exporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve Jaeger tracing exporter from obj","suites":["Test TracingExporters resolver"],"updatePoint":{"line":88,"column":53},"line":88,"code":"  it(\"should resolve Jaeger tracing exporter from obj\", () => {\n    let options = {\n      interval: 2000\n    };\n    let reporter = TracingExporters.resolve({\n      type: \"Jaeger\",\n      options\n    });\n    expect(reporter).toBeInstanceOf(TracingExporters.Jaeger);\n    expect(reporter.opts).toEqual(expect.objectContaining({\n      interval: 2000\n    }));\n  });","file":"unit/tracing/exporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve Zipkin tracing exporter from string","suites":["Test TracingExporters resolver"],"updatePoint":{"line":101,"column":56},"line":101,"code":"  it(\"should resolve Zipkin tracing exporter from string\", () => {\n    let reporter = TracingExporters.resolve(\"Zipkin\");\n    expect(reporter).toBeInstanceOf(TracingExporters.Zipkin);\n  });","file":"unit/tracing/exporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve Zipkin tracing exporter from obj","suites":["Test TracingExporters resolver"],"updatePoint":{"line":105,"column":53},"line":105,"code":"  it(\"should resolve Zipkin tracing exporter from obj\", () => {\n    let options = {\n      interval: 2000\n    };\n    let reporter = TracingExporters.resolve({\n      type: \"Zipkin\",\n      options\n    });\n    expect(reporter).toBeInstanceOf(TracingExporters.Zipkin);\n    expect(reporter.opts).toEqual(expect.objectContaining({\n      interval: 2000\n    }));\n  });","file":"unit/tracing/exporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should throw error if type if not correct","suites":["Test TracingExporters register"],"updatePoint":{"line":122,"column":47},"line":122,"code":"  it(\"should throw error if type if not correct\", () => {\n    expect(() => {\n      TracingExporters.resolve(\"MyCustom\");\n    }).toThrowError(BrokerOptionsError);\n  });","file":"unit/tracing/exporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should register new type","suites":["Test TracingExporters register"],"updatePoint":{"line":127,"column":30},"line":127,"code":"  it(\"should register new type\", () => {\n    TracingExporters.register(\"MyCustom\", MyCustom);\n    expect(TracingExporters.MyCustom).toBe(MyCustom);\n  });","file":"unit/tracing/exporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should find the new type","suites":["Test TracingExporters register"],"updatePoint":{"line":131,"column":30},"line":131,"code":"  it(\"should find the new type\", () => {\n    const exporter = TracingExporters.resolve(\"MyCustom\");\n    expect(exporter).toBeInstanceOf(MyCustom);\n  });","file":"unit/tracing/exporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should create with default options","suites":["Test Jaeger tracing exporter class","Test Constructor"],"updatePoint":{"line":52,"column":42},"line":52,"code":"    it(\"should create with default options\", () => {\n      const exporter = new JaegerTraceExporter();\n      expect(exporter.opts).toEqual({\n        endpoint: null,\n        host: \"127.0.0.1\",\n        port: 6832,\n        sampler: {\n          type: \"Const\",\n          options: {}\n        },\n        tracerOptions: {},\n        defaultTags: null\n      });\n      expect(exporter.tracers).toEqual({});\n    });","file":"unit/tracing/exporters/jaeger.spec.js","skipped":false,"dir":"test"},{"name":"should create with custom options","suites":["Test Jaeger tracing exporter class","Test Constructor"],"updatePoint":{"line":67,"column":41},"line":67,"code":"    it(\"should create with custom options\", () => {\n      const exporter = new JaegerTraceExporter({\n        endpoint: \"http://jaeger:9411\",\n        sampler: {\n          type: \"Const\",\n          options: {\n            a: 5\n          }\n        },\n        tracerOptions: {\n          b: 10\n        },\n        defaultTags: {\n          c: 15\n        }\n      });\n      expect(exporter.opts).toEqual({\n        endpoint: \"http://jaeger:9411\",\n        host: \"127.0.0.1\",\n        port: 6832,\n        sampler: {\n          type: \"Const\",\n          options: {\n            a: 5\n          }\n        },\n        tracerOptions: {\n          b: 10\n        },\n        defaultTags: {\n          c: 15\n        }\n      });\n    });","file":"unit/tracing/exporters/jaeger.spec.js","skipped":false,"dir":"test"},{"name":"should flatten default tags","suites":["Test Jaeger tracing exporter class","Test init method"],"updatePoint":{"line":107,"column":35},"line":107,"code":"    it(\"should flatten default tags\", () => {\n      const exporter = new JaegerTraceExporter({\n        defaultTags: {\n          a: {\n            b: \"c\"\n          }\n        }\n      });\n      jest.spyOn(exporter, \"flattenTags\");\n      exporter.init(fakeTracer);\n      expect(exporter.defaultTags).toEqual({\n        \"a.b\": \"c\"\n      });\n      expect(exporter.flattenTags).toHaveBeenCalledTimes(2);\n      expect(exporter.flattenTags).toHaveBeenNthCalledWith(1, {\n        a: {\n          b: \"c\"\n        }\n      });\n      expect(exporter.flattenTags).toHaveBeenNthCalledWith(2, {\n        b: \"c\"\n      }, false, \"a\");\n    });","file":"unit/tracing/exporters/jaeger.spec.js","skipped":false,"dir":"test"},{"name":"should call defaultTags function","suites":["Test Jaeger tracing exporter class","Test init method"],"updatePoint":{"line":130,"column":40},"line":130,"code":"    it(\"should call defaultTags function\", () => {\n      const fn = jest.fn(() => ({\n        a: {\n          b: 5\n        }\n      }));\n      const exporter = new JaegerTraceExporter({\n        defaultTags: fn\n      });\n      exporter.init(fakeTracer);\n      expect(exporter.defaultTags).toEqual({\n        \"a.b\": 5\n      });\n      expect(fn).toHaveBeenCalledTimes(1);\n      expect(fn).toHaveBeenNthCalledWith(1, fakeTracer);\n    });","file":"unit/tracing/exporters/jaeger.spec.js","skipped":false,"dir":"test"},{"name":"should flatten default tags","suites":["Test Jaeger tracing exporter class","Test stop method"],"updatePoint":{"line":152,"column":35},"line":152,"code":"    it(\"should flatten default tags\", async () => {\n      const exporter = new JaegerTraceExporter({\n        defaultTags: {\n          a: {\n            b: \"c\"\n          }\n        }\n      });\n      exporter.init(fakeTracer);\n      exporter.tracers = {\n        users: {\n          close: jest.fn()\n        },\n        posts: {\n          close: jest.fn()\n        }\n      };\n      await exporter.stop();\n      expect(exporter.tracers.users.close).toHaveBeenCalledTimes(1);\n      expect(exporter.tracers.posts.close).toHaveBeenCalledTimes(1);\n    });","file":"unit/tracing/exporters/jaeger.spec.js","skipped":false,"dir":"test"},{"name":"should create an UDP sender","suites":["Test Jaeger tracing exporter class","Test getReporter method"],"updatePoint":{"line":179,"column":35},"line":179,"code":"    it(\"should create an UDP sender\", () => {\n      const exporter = new JaegerTraceExporter({\n        host: \"jaeger-host\",\n        port: 4567\n      });\n      exporter.init(fakeTracer);\n      const res = exporter.getReporter();\n      expect(res).toBe(fakeRemoteReporter);\n      expect(UDPSender).toHaveBeenCalledTimes(1);\n      expect(UDPSender).toHaveBeenCalledWith({\n        host: \"jaeger-host\",\n        port: 4567,\n        logger: exporter.logger\n      });\n      expect(HTTPSender).toHaveBeenCalledTimes(0);\n      expect(Jaeger.RemoteReporter).toHaveBeenCalledTimes(1);\n      expect(Jaeger.RemoteReporter).toHaveBeenCalledWith(fakeHTTPSender);\n    });","file":"unit/tracing/exporters/jaeger.spec.js","skipped":false,"dir":"test"},{"name":"should create an HTTP sender","suites":["Test Jaeger tracing exporter class","Test getReporter method"],"updatePoint":{"line":197,"column":36},"line":197,"code":"    it(\"should create an HTTP sender\", () => {\n      UDPSender.mockClear();\n      Jaeger.RemoteReporter.mockClear();\n      const exporter = new JaegerTraceExporter({\n        endpoint: \"http://jaeger-host:9411\"\n      });\n      exporter.init(fakeTracer);\n      const res = exporter.getReporter();\n      expect(res).toBe(fakeRemoteReporter);\n      expect(HTTPSender).toHaveBeenCalledTimes(1);\n      expect(HTTPSender).toHaveBeenCalledWith({\n        endpoint: \"http://jaeger-host:9411\",\n        logger: exporter.logger\n      });\n      expect(UDPSender).toHaveBeenCalledTimes(0);\n      expect(Jaeger.RemoteReporter).toHaveBeenCalledTimes(1);\n      expect(Jaeger.RemoteReporter).toHaveBeenCalledWith(fakeHTTPSender);\n    });","file":"unit/tracing/exporters/jaeger.spec.js","skipped":false,"dir":"test"},{"name":"should create a ConstSampler","suites":["Test Jaeger tracing exporter class","Test getSampler method"],"updatePoint":{"line":223,"column":36},"line":223,"code":"    it(\"should create a ConstSampler\", () => {\n      const res = exporter.getSampler();\n      expect(res).toBe(fakeConstSampler);\n      expect(Jaeger.ConstSampler).toHaveBeenCalledTimes(1);\n      expect(Jaeger.ConstSampler).toHaveBeenCalledWith(1);\n    });","file":"unit/tracing/exporters/jaeger.spec.js","skipped":false,"dir":"test"},{"name":"should create a ConstSampler with custom decision","suites":["Test Jaeger tracing exporter class","Test getSampler method"],"updatePoint":{"line":229,"column":57},"line":229,"code":"    it(\"should create a ConstSampler with custom decision\", () => {\n      Jaeger.ConstSampler.mockClear();\n      exporter.opts.sampler.options.decision = 0.6;\n      const res = exporter.getSampler();\n      expect(res).toBe(fakeConstSampler);\n      expect(Jaeger.ConstSampler).toHaveBeenCalledTimes(1);\n      expect(Jaeger.ConstSampler).toHaveBeenCalledWith(0.6);\n    });","file":"unit/tracing/exporters/jaeger.spec.js","skipped":false,"dir":"test"},{"name":"should create a RateLimitingSampler","suites":["Test Jaeger tracing exporter class","Test getSampler method"],"updatePoint":{"line":237,"column":43},"line":237,"code":"    it(\"should create a RateLimitingSampler\", () => {\n      Jaeger.RateLimitingSampler.mockClear();\n      exporter.opts.sampler = {\n        type: \"RateLimiting\",\n        options: {\n          maxTracesPerSecond: 5,\n          initBalance: 3\n        }\n      };\n      const res = exporter.getSampler();\n      expect(res).toBe(fakeRateLimitingSampler);\n      expect(Jaeger.RateLimitingSampler).toHaveBeenCalledTimes(1);\n      expect(Jaeger.RateLimitingSampler).toHaveBeenCalledWith(5, 3);\n    });","file":"unit/tracing/exporters/jaeger.spec.js","skipped":false,"dir":"test"},{"name":"should create a ProbabilisticSampler","suites":["Test Jaeger tracing exporter class","Test getSampler method"],"updatePoint":{"line":251,"column":44},"line":251,"code":"    it(\"should create a ProbabilisticSampler\", () => {\n      Jaeger.ProbabilisticSampler.mockClear();\n      exporter.opts.sampler = {\n        type: \"Probabilistic\",\n        options: {\n          samplingRate: 0.75\n        }\n      };\n      const res = exporter.getSampler();\n      expect(res).toBe(fakeProbabilisticSampler);\n      expect(Jaeger.ProbabilisticSampler).toHaveBeenCalledTimes(1);\n      expect(Jaeger.ProbabilisticSampler).toHaveBeenCalledWith(0.75);\n    });","file":"unit/tracing/exporters/jaeger.spec.js","skipped":false,"dir":"test"},{"name":"should create a GuaranteedThroughputSampler","suites":["Test Jaeger tracing exporter class","Test getSampler method"],"updatePoint":{"line":264,"column":51},"line":264,"code":"    it(\"should create a GuaranteedThroughputSampler\", () => {\n      GuaranteedThroughputSampler.mockClear();\n      exporter.opts.sampler = {\n        type: \"GuaranteedThroughput\",\n        options: {\n          samplingRate: 0.75,\n          lowerBound: 5\n        }\n      };\n      const res = exporter.getSampler();\n      expect(res).toBe(fakeGuaranteedThroughputSampler);\n      expect(GuaranteedThroughputSampler).toHaveBeenCalledTimes(1);\n      expect(GuaranteedThroughputSampler).toHaveBeenCalledWith(5, 0.75);\n    });","file":"unit/tracing/exporters/jaeger.spec.js","skipped":false,"dir":"test"},{"name":"should create a RemoteControlledSampler","suites":["Test Jaeger tracing exporter class","Test getSampler method"],"updatePoint":{"line":278,"column":47},"line":278,"code":"    it(\"should create a RemoteControlledSampler\", () => {\n      RemoteControlledSampler.mockClear();\n      exporter.opts.sampler = {\n        type: \"RemoteControlled\",\n        options: {\n          a: 5\n        }\n      };\n      const res = exporter.getSampler(\"posts\");\n      expect(res).toBe(fakeRemoteControlledSampler);\n      expect(RemoteControlledSampler).toHaveBeenCalledTimes(1);\n      expect(RemoteControlledSampler).toHaveBeenCalledWith(\"posts\", {\n        a: 5\n      });\n    });","file":"unit/tracing/exporters/jaeger.spec.js","skipped":false,"dir":"test"},{"name":"should return custom function","suites":["Test Jaeger tracing exporter class","Test getSampler method"],"updatePoint":{"line":293,"column":37},"line":293,"code":"    it(\"should return custom function\", () => {\n      Jaeger.ConstSampler.mockClear();\n      const mySampler = jest.fn();\n      exporter.opts.sampler = mySampler;\n      const res = exporter.getSampler();\n      expect(res).toBe(mySampler);\n      expect(Jaeger.ConstSampler).toHaveBeenCalledTimes(0);\n    });","file":"unit/tracing/exporters/jaeger.spec.js","skipped":false,"dir":"test"},{"name":"should create a new tracer","suites":["Test Jaeger tracing exporter class","Test getTracer method"],"updatePoint":{"line":317,"column":34},"line":317,"code":"    it(\"should create a new tracer\", () => {\n      expect(exporter.tracers).toEqual({});\n      const res = exporter.getTracer(\"posts\");\n      expect(res).toBe(fakeJaegerTracer);\n      expect(exporter.tracers).toEqual({\n        posts: fakeJaegerTracer\n      });\n      expect(exporter.getSampler).toHaveBeenCalledTimes(1);\n      expect(exporter.getSampler).toHaveBeenCalledWith(\"posts\");\n      expect(exporter.getReporter).toHaveBeenCalledTimes(1);\n      expect(Jaeger.Tracer).toHaveBeenCalledTimes(1);\n      expect(Jaeger.Tracer).toHaveBeenCalledWith(\"posts\", fakeReporter, fakeSampler, {\n        b: \"John\",\n        logger: exporter.logger\n      });\n    });","file":"unit/tracing/exporters/jaeger.spec.js","skipped":false,"dir":"test"},{"name":"should return an existing tracer","suites":["Test Jaeger tracing exporter class","Test getTracer method"],"updatePoint":{"line":333,"column":40},"line":333,"code":"    it(\"should return an existing tracer\", () => {\n      exporter.getSampler.mockClear();\n      exporter.getReporter.mockClear();\n      Jaeger.Tracer.mockClear();\n      const res = exporter.getTracer(\"posts\");\n      expect(res).toBe(fakeJaegerTracer);\n      expect(exporter.tracers).toEqual({\n        posts: fakeJaegerTracer\n      });\n      expect(exporter.getSampler).toHaveBeenCalledTimes(0);\n      expect(exporter.getReporter).toHaveBeenCalledTimes(0);\n      expect(Jaeger.Tracer).toHaveBeenCalledTimes(0);\n    });","file":"unit/tracing/exporters/jaeger.spec.js","skipped":false,"dir":"test"},{"name":"should push spans to the queue","suites":["Test Jaeger tracing exporter class","Test spanFinished method"],"updatePoint":{"line":355,"column":38},"line":355,"code":"    it(\"should push spans to the queue\", () => {\n      const span1 = {\n        id: \"span-1\"\n      };\n      exporter.spanFinished(span1);\n      expect(exporter.generateJaegerSpan).toHaveBeenCalledTimes(1);\n      expect(exporter.generateJaegerSpan).toHaveBeenCalledWith(span1);\n    });","file":"unit/tracing/exporters/jaeger.spec.js","skipped":false,"dir":"test"},{"name":"should call span.log method","suites":["Test Jaeger tracing exporter class","Test addLogs method"],"updatePoint":{"line":371,"column":35},"line":371,"code":"    it(\"should call span.log method\", () => {\n      const jaegerSpan = {\n        log: jest.fn()\n      };\n      exporter.addLogs(jaegerSpan, [{\n        name: \"log1\",\n        time: 100,\n        fields: {\n          a: 5\n        }\n      }, {\n        name: \"log2\",\n        time: 200,\n        fields: {\n          b: \"John\"\n        }\n      }]);\n      expect(jaegerSpan.log).toHaveBeenCalledTimes(2);\n      expect(jaegerSpan.log).toHaveBeenNthCalledWith(1, {\n        event: \"log1\",\n        payload: {\n          a: 5\n        }\n      }, 100);\n      expect(jaegerSpan.log).toHaveBeenNthCalledWith(2, {\n        event: \"log2\",\n        payload: {\n          b: \"John\"\n        }\n      }, 200);\n    });","file":"unit/tracing/exporters/jaeger.spec.js","skipped":false,"dir":"test"},{"name":"should call span.setTag method with a numeric value","suites":["Test Jaeger tracing exporter class","Test addTags method"],"updatePoint":{"line":413,"column":59},"line":413,"code":"    it(\"should call span.setTag method with a numeric value\", () => {\n      jaegerSpan.setTag.mockClear();\n      exporter.addTags(jaegerSpan, \"a\", 5);\n      expect(jaegerSpan.setTag).toHaveBeenCalledTimes(1);\n      expect(jaegerSpan.setTag).toHaveBeenCalledWith(\"a\", 5);\n    });","file":"unit/tracing/exporters/jaeger.spec.js","skipped":false,"dir":"test"},{"name":"should call span.setTag method with a string value","suites":["Test Jaeger tracing exporter class","Test addTags method"],"updatePoint":{"line":419,"column":58},"line":419,"code":"    it(\"should call span.setTag method with a string value\", () => {\n      jaegerSpan.setTag.mockClear();\n      exporter.addTags(jaegerSpan, \"b\", \"John\");\n      expect(jaegerSpan.setTag).toHaveBeenCalledTimes(1);\n      expect(jaegerSpan.setTag).toHaveBeenCalledWith(\"b\", \"John\");\n    });","file":"unit/tracing/exporters/jaeger.spec.js","skipped":false,"dir":"test"},{"name":"should call span.setTag method with null","suites":["Test Jaeger tracing exporter class","Test addTags method"],"updatePoint":{"line":425,"column":48},"line":425,"code":"    it(\"should call span.setTag method with null\", () => {\n      jaegerSpan.setTag.mockClear();\n      exporter.addTags(jaegerSpan, \"c\", null);\n      expect(jaegerSpan.setTag).toHaveBeenCalledTimes(1);\n      expect(jaegerSpan.setTag).toHaveBeenCalledWith(\"c\", null);\n    });","file":"unit/tracing/exporters/jaeger.spec.js","skipped":false,"dir":"test"},{"name":"should not call span.setTag method with undefined","suites":["Test Jaeger tracing exporter class","Test addTags method"],"updatePoint":{"line":431,"column":57},"line":431,"code":"    it(\"should not call span.setTag method with undefined\", () => {\n      jaegerSpan.setTag.mockClear();\n      exporter.addTags(jaegerSpan, \"c\", undefined);\n      expect(jaegerSpan.setTag).toHaveBeenCalledTimes(0);\n    });","file":"unit/tracing/exporters/jaeger.spec.js","skipped":false,"dir":"test"},{"name":"should call span.setTag method with object","suites":["Test Jaeger tracing exporter class","Test addTags method"],"updatePoint":{"line":436,"column":50},"line":436,"code":"    it(\"should call span.setTag method with object\", () => {\n      jaegerSpan.setTag.mockClear();\n      exporter.addTags(jaegerSpan, \"user\", {\n        id: 1,\n        name: \"John\",\n        address: {\n          country: \"Australia\",\n          city: \"Sydney\"\n        }\n      });\n      expect(jaegerSpan.setTag).toHaveBeenCalledTimes(4);\n      expect(jaegerSpan.setTag).toHaveBeenNthCalledWith(1, \"user.id\", 1);\n      expect(jaegerSpan.setTag).toHaveBeenNthCalledWith(2, \"user.name\", \"John\");\n      expect(jaegerSpan.setTag).toHaveBeenNthCalledWith(3, \"user.address.country\", \"Australia\");\n      expect(jaegerSpan.setTag).toHaveBeenNthCalledWith(4, \"user.address.city\", \"Sydney\");\n    });","file":"unit/tracing/exporters/jaeger.spec.js","skipped":false,"dir":"test"},{"name":"should truncate ID","suites":["Test Jaeger tracing exporter class","Test convertID method"],"updatePoint":{"line":460,"column":26},"line":460,"code":"    it(\"should truncate ID\", () => {\n      expect(exporter.convertID()).toBeNull();\n      expect(exporter.convertID(\"\")).toBeNull();\n      expect(exporter.convertID(\"12345678\")).toEqual(Buffer.from([18, 52, 86, 120]));\n      expect(exporter.convertID(\"123456789-0123456\")).toEqual(Buffer.from([18, 52, 86, 120, 144, 18, 52, 86]));\n      expect(exporter.convertID(\"123456789-0123456789-abcdef\")).toEqual(Buffer.from([18, 52, 86, 120, 144, 18, 52, 86]));\n      expect(exporter.convertID(\"abcdef\")).toEqual(Buffer.from([171, 205, 239]));\n    });","file":"unit/tracing/exporters/jaeger.spec.js","skipped":false,"dir":"test"},{"name":"should convert normal span to Jaeger payload without parentID","suites":["Test Jaeger tracing exporter class","Test generateJaegerSpan"],"updatePoint":{"line":496,"column":69},"line":496,"code":"    it(\"should convert normal span to Jaeger payload without parentID\", () => {\n      const span = {\n        name: \"Test Span\",\n        type: \"action\",\n        id: \"abc-12345678901234567890\",\n        traceID: \"cde-12345678901234567890\",\n        //parentID: \"def-12345678901234567890\",\n        service: {\n          fullName: \"v1.posts\"\n        },\n        startTime: 1000,\n        finishTime: 1050,\n        duration: 50,\n        tags: {\n          a: 5,\n          b: \"John\",\n          c: true,\n          d: null\n        }\n      };\n      const jaegerSpan = exporter.generateJaegerSpan(span);\n      expect(jaegerSpan).toBe(fakeJaegerSpan);\n      expect(exporter.getTracer).toHaveBeenCalledTimes(1);\n      expect(exporter.getTracer).toHaveBeenCalledWith(\"v1.posts\");\n      expect(Jaeger.SpanContext).toHaveBeenCalledTimes(0);\n      expect(fakeJaegerTracer.startSpan).toHaveBeenCalledTimes(1);\n      expect(fakeJaegerTracer.startSpan).toHaveBeenCalledWith(\"Test Span\", {\n        startTime: 1000,\n        childOf: undefined,\n        tags: {\n          a: 5,\n          b: \"John\",\n          c: true,\n          d: null,\n          def: \"ault\",\n          \"span.type\": \"action\"\n        }\n      });\n      expect(fakeJaegerSpan.log).toHaveBeenCalledTimes(0);\n      expect(fakeJaegerSpan.setTag).toHaveBeenCalledTimes(2);\n      expect(fakeJaegerSpan.setTag).toHaveBeenCalledWith(\"service\", \"v1.posts\");\n      expect(fakeJaegerSpan.setTag).toHaveBeenCalledWith(\"span.kind\", \"server\");\n      expect(fakeJaegerSpan.context).toHaveBeenCalledTimes(1);\n      expect(fakeSpanContext.traceId).toEqual(Buffer.from([205, 225, 35, 69, 103, 137, 1, 35]));\n      expect(fakeSpanContext.spanId).toEqual(Buffer.from([171, 193, 35, 69, 103, 137, 1, 35]));\n      expect(fakeJaegerSpan.finish).toHaveBeenCalledTimes(1);\n      expect(fakeJaegerSpan.finish).toHaveBeenCalledWith(1050);\n    });","file":"unit/tracing/exporters/jaeger.spec.js","skipped":false,"dir":"test"},{"name":"should convert normal span to Jaeger payload with parentID & logs","suites":["Test Jaeger tracing exporter class","Test generateJaegerSpan"],"updatePoint":{"line":544,"column":73},"line":544,"code":"    it(\"should convert normal span to Jaeger payload with parentID & logs\", () => {\n      exporter.getTracer.mockClear();\n      Jaeger.SpanContext.mockClear();\n      fakeJaegerTracer.startSpan.mockClear();\n      fakeJaegerSpan.log.mockClear();\n      fakeJaegerSpan.context.mockClear();\n      fakeJaegerSpan.setTag.mockClear();\n      fakeJaegerSpan.finish.mockClear();\n      const span = {\n        name: \"Test Span\",\n        type: \"custom\",\n        id: \"aaa-12345678901234567890\",\n        traceID: \"bbb-12345678901234567890\",\n        parentID: \"ccc-12345678901234567890\",\n        service: {\n          fullName: \"v1.posts\"\n        },\n        startTime: 1000,\n        finishTime: 1050,\n        duration: 50,\n        tags: {\n          a: 5,\n          b: \"John\",\n          c: true,\n          d: null\n        },\n        logs: [{\n          name: \"log1\",\n          time: 100,\n          fields: {\n            a: 5\n          }\n        }, {\n          name: \"log2\",\n          time: 200,\n          fields: {\n            b: \"John\"\n          }\n        }]\n      };\n      const jaegerSpan = exporter.generateJaegerSpan(span);\n      expect(jaegerSpan).toBe(fakeJaegerSpan);\n      expect(exporter.getTracer).toHaveBeenCalledTimes(1);\n      expect(exporter.getTracer).toHaveBeenCalledWith(\"v1.posts\");\n      expect(Jaeger.SpanContext).toHaveBeenCalledTimes(1);\n      expect(Jaeger.SpanContext).toHaveBeenCalledWith(Buffer.from([187, 177, 35, 69, 103, 137, 1, 35]), Buffer.from([204, 193, 35, 69, 103, 137, 1, 35]), null, null, null, null, 1, {}, \"\");\n      expect(fakeJaegerTracer.startSpan).toHaveBeenCalledTimes(1);\n      expect(fakeJaegerTracer.startSpan).toHaveBeenCalledWith(\"Test Span\", {\n        startTime: 1000,\n        childOf: fakeParentSpanContext,\n        tags: {\n          a: 5,\n          b: \"John\",\n          c: true,\n          d: null,\n          def: \"ault\",\n          \"span.type\": \"custom\"\n        }\n      });\n      expect(fakeJaegerSpan.log).toHaveBeenCalledTimes(2);\n      expect(fakeJaegerSpan.log).toHaveBeenCalledWith({\n        event: \"log1\",\n        payload: {\n          a: 5\n        }\n      }, 100);\n      expect(fakeJaegerSpan.log).toHaveBeenCalledWith({\n        event: \"log2\",\n        payload: {\n          b: \"John\"\n        }\n      }, 200);\n      expect(fakeJaegerSpan.setTag).toHaveBeenCalledTimes(2);\n      expect(fakeJaegerSpan.setTag).toHaveBeenCalledWith(\"service\", \"v1.posts\");\n      expect(fakeJaegerSpan.setTag).toHaveBeenCalledWith(\"span.kind\", \"server\");\n      expect(fakeJaegerSpan.context).toHaveBeenCalledTimes(1);\n      expect(fakeSpanContext.traceId).toEqual(Buffer.from([187, 177, 35, 69, 103, 137, 1, 35]));\n      expect(fakeSpanContext.spanId).toEqual(Buffer.from([170, 161, 35, 69, 103, 137, 1, 35]));\n      expect(fakeJaegerSpan.finish).toHaveBeenCalledTimes(1);\n      expect(fakeJaegerSpan.finish).toHaveBeenCalledWith(1050);\n    });","file":"unit/tracing/exporters/jaeger.spec.js","skipped":false,"dir":"test"},{"name":"should convert normal span to Jaeger payload with error","suites":["Test Jaeger tracing exporter class","Test generateJaegerSpan"],"updatePoint":{"line":625,"column":63},"line":625,"code":"    it(\"should convert normal span to Jaeger payload with error\", () => {\n      exporter.getTracer.mockClear();\n      Jaeger.SpanContext.mockClear();\n      fakeJaegerTracer.startSpan.mockClear();\n      fakeJaegerSpan.log.mockClear();\n      fakeJaegerSpan.context.mockClear();\n      fakeJaegerSpan.setTag.mockClear();\n      fakeJaegerSpan.finish.mockClear();\n      const err = new MoleculerRetryableError(\"Something happened\", 512, \"SOMETHING\", {\n        a: 5\n      });\n      const span = {\n        name: \"Test Span\",\n        type: \"action\",\n        id: \"abc-12345678901234567890\",\n        traceID: \"cde-12345678901234567890\",\n        //parentID: \"def-12345678901234567890\",\n        service: {\n          fullName: \"v1.posts\"\n        },\n        startTime: 1000,\n        finishTime: 1050,\n        duration: 50,\n        tags: {\n          a: 5,\n          b: \"John\",\n          c: true,\n          d: null\n        },\n        error: err\n      };\n      const jaegerSpan = exporter.generateJaegerSpan(span);\n      expect(jaegerSpan).toBe(fakeJaegerSpan);\n      expect(exporter.getTracer).toHaveBeenCalledTimes(1);\n      expect(exporter.getTracer).toHaveBeenCalledWith(\"v1.posts\");\n      expect(Jaeger.SpanContext).toHaveBeenCalledTimes(0);\n      expect(fakeJaegerTracer.startSpan).toHaveBeenCalledTimes(1);\n      expect(fakeJaegerTracer.startSpan).toHaveBeenCalledWith(\"Test Span\", {\n        startTime: 1000,\n        childOf: undefined,\n        tags: {\n          a: 5,\n          b: \"John\",\n          c: true,\n          d: null,\n          def: \"ault\",\n          \"span.type\": \"action\"\n        }\n      });\n      expect(fakeJaegerSpan.log).toHaveBeenCalledTimes(0);\n      expect(fakeJaegerSpan.setTag).toHaveBeenCalledTimes(8);\n      expect(fakeJaegerSpan.setTag).toHaveBeenNthCalledWith(1, \"service\", \"v1.posts\");\n      expect(fakeJaegerSpan.setTag).toHaveBeenNthCalledWith(2, \"span.kind\", \"server\");\n      expect(fakeJaegerSpan.setTag).toHaveBeenNthCalledWith(3, \"error\", true);\n      expect(fakeJaegerSpan.setTag).toHaveBeenNthCalledWith(4, \"error.name\", \"MoleculerRetryableError\");\n      expect(fakeJaegerSpan.setTag).toHaveBeenNthCalledWith(5, \"error.message\", \"Something happened\");\n      expect(fakeJaegerSpan.setTag).toHaveBeenNthCalledWith(6, \"error.retryable\", true);\n      expect(fakeJaegerSpan.setTag).toHaveBeenNthCalledWith(7, \"error.data.a\", 5);\n      expect(fakeJaegerSpan.setTag).toHaveBeenNthCalledWith(8, \"error.code\", 512);\n      expect(fakeJaegerSpan.context).toHaveBeenCalledTimes(1);\n      expect(fakeSpanContext.traceId).toEqual(Buffer.from([205, 225, 35, 69, 103, 137, 1, 35]));\n      expect(fakeSpanContext.spanId).toEqual(Buffer.from([171, 193, 35, 69, 103, 137, 1, 35]));\n      expect(fakeJaegerSpan.finish).toHaveBeenCalledTimes(1);\n      expect(fakeJaegerSpan.finish).toHaveBeenCalledWith(1050);\n    });","file":"unit/tracing/exporters/jaeger.spec.js","skipped":false,"dir":"test"},{"name":"should create with default options","suites":["Test NewRelic tracing exporter class","Test Constructor"],"updatePoint":{"line":26,"column":42},"line":26,"code":"    it(\"should create with default options\", () => {\n      const exporter = new NewRelicTraceExporter();\n      expect(exporter.opts).toEqual({\n        baseURL: \"https://trace-api.newrelic.com\",\n        defaultTags: null,\n        insertKey: \"\",\n        interval: 5,\n        payloadOptions: {\n          debug: false,\n          shared: false\n        }\n      });\n      expect(exporter.queue).toBeInstanceOf(Array);\n    });","file":"unit/tracing/exporters/newrelic.spec.js","skipped":false,"dir":"test"},{"name":"should create with custom options","suites":["Test NewRelic tracing exporter class","Test Constructor"],"updatePoint":{"line":40,"column":41},"line":40,"code":"    it(\"should create with custom options\", () => {\n      const exporter = new NewRelicTraceExporter({\n        baseURL: \"https://trace-api.newrelic.com\",\n        interval: 10,\n        insertKey: \"mock-newrelic-insert-key\",\n        payloadOptions: {\n          debug: true\n        },\n        defaultTags: {\n          a: 5\n        }\n      });\n      expect(exporter.opts).toEqual({\n        baseURL: \"https://trace-api.newrelic.com\",\n        interval: 10,\n        insertKey: \"mock-newrelic-insert-key\",\n        payloadOptions: {\n          debug: true,\n          shared: false\n        },\n        defaultTags: {\n          a: 5\n        }\n      });\n    });","file":"unit/tracing/exporters/newrelic.spec.js","skipped":false,"dir":"test"},{"name":"should create timer","suites":["Test NewRelic tracing exporter class","Test init method"],"updatePoint":{"line":74,"column":27},"line":74,"code":"    it(\"should create timer\", () => {\n      const exporter = new NewRelicTraceExporter({});\n      exporter.flush = jest.fn();\n      exporter.init(fakeTracer);\n      expect(exporter.timer).toBeDefined();\n      expect(exporter.flush).toBeCalledTimes(0);\n      clock.tick(5500);\n      expect(exporter.flush).toBeCalledTimes(1);\n      exporter.stop();\n    });","file":"unit/tracing/exporters/newrelic.spec.js","skipped":false,"dir":"test"},{"name":"should not create timer","suites":["Test NewRelic tracing exporter class","Test init method"],"updatePoint":{"line":84,"column":31},"line":84,"code":"    it(\"should not create timer\", () => {\n      const exporter = new NewRelicTraceExporter({\n        interval: 0\n      });\n      exporter.init(fakeTracer);\n      expect(exporter.timer).toBeUndefined();\n      exporter.stop();\n    });","file":"unit/tracing/exporters/newrelic.spec.js","skipped":false,"dir":"test"},{"name":"should flatten default tags","suites":["Test NewRelic tracing exporter class","Test init method"],"updatePoint":{"line":92,"column":35},"line":92,"code":"    it(\"should flatten default tags\", () => {\n      const exporter = new NewRelicTraceExporter({\n        defaultTags: {\n          a: {\n            b: \"c\"\n          }\n        }\n      });\n      jest.spyOn(exporter, \"flattenTags\");\n      exporter.init(fakeTracer);\n      expect(exporter.defaultTags).toEqual({\n        \"a.b\": \"c\"\n      });\n      expect(exporter.flattenTags).toHaveBeenCalledTimes(2);\n      expect(exporter.flattenTags).toHaveBeenNthCalledWith(2, {\n        b: \"c\"\n      }, true, \"a\");\n      expect(exporter.flattenTags).toHaveBeenNthCalledWith(1, {\n        a: {\n          b: \"c\"\n        }\n      }, true);\n      exporter.stop();\n    });","file":"unit/tracing/exporters/newrelic.spec.js","skipped":false,"dir":"test"},{"name":"should call defaultTags function","suites":["Test NewRelic tracing exporter class","Test init method"],"updatePoint":{"line":116,"column":40},"line":116,"code":"    it(\"should call defaultTags function\", () => {\n      const fn = jest.fn(() => ({\n        a: {\n          b: 5\n        }\n      }));\n      const exporter = new NewRelicTraceExporter({\n        defaultTags: fn\n      });\n      exporter.init(fakeTracer);\n      expect(exporter.defaultTags).toEqual({\n        \"a.b\": \"5\"\n      });\n      expect(fn).toHaveBeenCalledTimes(1);\n      expect(fn).toHaveBeenNthCalledWith(1, fakeTracer);\n      exporter.stop();\n    });","file":"unit/tracing/exporters/newrelic.spec.js","skipped":false,"dir":"test"},{"name":"should flatten default tags","suites":["Test NewRelic tracing exporter class","Test stop method"],"updatePoint":{"line":139,"column":35},"line":139,"code":"    it(\"should flatten default tags\", async () => {\n      const exporter = new NewRelicTraceExporter({\n        defaultTags: {\n          a: {\n            b: \"c\"\n          }\n        }\n      });\n      exporter.init(fakeTracer);\n      expect(exporter.timer).toBeDefined();\n      await exporter.stop();\n      expect(exporter.timer).toBeNull();\n    });","file":"unit/tracing/exporters/newrelic.spec.js","skipped":false,"dir":"test"},{"name":"should push spans to the queue","suites":["Test NewRelic tracing exporter class","Test spanFinished method"],"updatePoint":{"line":161,"column":38},"line":161,"code":"    it(\"should push spans to the queue\", () => {\n      expect(exporter.queue).toEqual([]);\n      const span1 = {};\n      const span2 = {};\n      exporter.spanFinished(span1);\n      exporter.spanFinished(span2);\n      expect(exporter.queue).toEqual([span1, span2]);\n    });","file":"unit/tracing/exporters/newrelic.spec.js","skipped":false,"dir":"test"},{"name":"should not generate data if queue is empty","suites":["Test NewRelic tracing exporter class","Test flush method"],"updatePoint":{"line":184,"column":50},"line":184,"code":"    it(\"should not generate data if queue is empty\", () => {\n      exporter.flush();\n      expect(exporter.generateTracingData).toHaveBeenCalledTimes(0);\n    });","file":"unit/tracing/exporters/newrelic.spec.js","skipped":false,"dir":"test"},{"name":"should generate & send data if queue is not empty","suites":["Test NewRelic tracing exporter class","Test flush method"],"updatePoint":{"line":188,"column":57},"line":188,"code":"    it(\"should generate & send data if queue is not empty\", () => {\n      exporter.spanFinished({});\n      exporter.flush();\n      expect(exporter.generateTracingData).toHaveBeenCalledTimes(1);\n      expect(exporter.queue.length).toEqual(0);\n      expect(fetch).toHaveBeenCalledTimes(1);\n      expect(fetch).toHaveBeenCalledWith(\"https://trace-api.newrelic.com/trace/v1\", {\n        method: \"post\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Api-Key\": \"mock-newrelic-insert-key\",\n          \"Data-Format\": \"zipkin\",\n          \"Data-Format-Version\": \"2\"\n        },\n        body: '{\"a\":5}'\n      });\n    });","file":"unit/tracing/exporters/newrelic.spec.js","skipped":false,"dir":"test"},{"name":"should call makePayload","suites":["Test NewRelic tracing exporter class","Test generateTracingData method"],"updatePoint":{"line":215,"column":31},"line":215,"code":"    it(\"should call makePayload\", () => {\n      exporter.spanFinished({\n        a: 5\n      });\n      exporter.spanFinished({\n        b: 10\n      });\n      const res = exporter.generateTracingData();\n      expect(exporter.makePayload).toHaveBeenCalledTimes(2);\n      expect(exporter.makePayload).toHaveBeenNthCalledWith(1, {\n        a: 5\n      });\n      expect(exporter.makePayload).toHaveBeenNthCalledWith(2, {\n        b: 10\n      });\n      expect(res).toEqual([{\n        a: 5\n      }, {\n        b: 10\n      }]);\n    });","file":"unit/tracing/exporters/newrelic.spec.js","skipped":false,"dir":"test"},{"name":"should truncate ID","suites":["Test NewRelic tracing exporter class","Test convertID & convertTime methods"],"updatePoint":{"line":245,"column":26},"line":245,"code":"    it(\"should truncate ID\", () => {\n      expect(exporter.convertID()).toBeNull();\n      expect(exporter.convertID(\"\")).toBeNull();\n      expect(exporter.convertID(\"12345678\")).toBe(\"12345678\");\n      expect(exporter.convertID(\"123456789-0123456\")).toBe(\"1234567890123456\");\n      expect(exporter.convertID(\"123456789-0123456789-0\")).toBe(\"1234567890123456\");\n    });","file":"unit/tracing/exporters/newrelic.spec.js","skipped":false,"dir":"test"},{"name":"should convert time","suites":["Test NewRelic tracing exporter class","Test convertID & convertTime methods"],"updatePoint":{"line":252,"column":27},"line":252,"code":"    it(\"should convert time\", () => {\n      expect(exporter.convertTime()).toBeNull();\n      expect(exporter.convertTime(0)).toBe(0);\n      expect(exporter.convertTime(10)).toBe(10000);\n      expect(exporter.convertTime(12345678)).toBe(12345678000);\n    });","file":"unit/tracing/exporters/newrelic.spec.js","skipped":false,"dir":"test"},{"name":"should convert normal span to newrelic payload","suites":["Test NewRelic tracing exporter class","Test makePayload"],"updatePoint":{"line":277,"column":54},"line":277,"code":"    it(\"should convert normal span to newrelic payload\", () => {\n      const span = {\n        name: \"Test Span\",\n        type: \"custom\",\n        id: \"span-id-12345678901234567890\",\n        traceID: \"trace-id-12345678901234567890\",\n        parentID: \"parent-id-12345678901234567890\",\n        service: {\n          fullName: \"v1.posts\"\n        },\n        startTime: 1000,\n        finishTime: 1050,\n        duration: 50,\n        tags: {\n          a: 5,\n          b: \"John\",\n          c: true,\n          d: null\n        }\n      };\n      expect(exporter.makePayload(span)).toMatchSnapshot();\n    });","file":"unit/tracing/exporters/newrelic.spec.js","skipped":false,"dir":"test"},{"name":"should convert errored span to newrelic payload","suites":["Test NewRelic tracing exporter class","Test makePayload"],"updatePoint":{"line":299,"column":55},"line":299,"code":"    it(\"should convert errored span to newrelic payload\", () => {\n      const err = new MoleculerRetryableError(\"Something happened\", 512, \"SOMETHING\", {\n        a: 5\n      });\n      const span = {\n        name: \"Test Span\",\n        type: \"action\",\n        id: \"span-id-12345678901234567890\",\n        traceID: \"trace-id-12345678901234567890\",\n        parentID: \"parent-id-12345678901234567890\",\n        service: {\n          fullName: \"v1.posts\"\n        },\n        startTime: 1000,\n        finishTime: 1050,\n        duration: 50,\n        tags: {\n          a: 5,\n          b: \"John\",\n          c: true,\n          d: null\n        },\n        error: err\n      };\n      expect(exporter.makePayload(span)).toMatchSnapshot();\n    });","file":"unit/tracing/exporters/newrelic.spec.js","skipped":false,"dir":"test"},{"name":"should create with default options","suites":["Test Zipkin tracing exporter class","Test Constructor"],"updatePoint":{"line":26,"column":42},"line":26,"code":"    it(\"should create with default options\", () => {\n      const exporter = new ZipkinTraceExporter();\n      expect(exporter.opts).toEqual({\n        baseURL: \"http://localhost:9411\",\n        defaultTags: null,\n        interval: 5,\n        payloadOptions: {\n          debug: false,\n          shared: false\n        },\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      expect(exporter.queue).toBeInstanceOf(Array);\n    });","file":"unit/tracing/exporters/zipkin.spec.js","skipped":false,"dir":"test"},{"name":"should create with custom options","suites":["Test Zipkin tracing exporter class","Test Constructor"],"updatePoint":{"line":42,"column":41},"line":42,"code":"    it(\"should create with custom options\", () => {\n      const exporter = new ZipkinTraceExporter({\n        baseURL: \"http://zipkin-server:9411\",\n        interval: 10,\n        payloadOptions: {\n          debug: true\n        },\n        defaultTags: {\n          a: 5\n        },\n        headers: {\n          \"X-B3-Sampled\": 0\n        }\n      });\n      expect(exporter.opts).toEqual({\n        baseURL: \"http://zipkin-server:9411\",\n        interval: 10,\n        payloadOptions: {\n          debug: true,\n          shared: false\n        },\n        defaultTags: {\n          a: 5\n        },\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"X-B3-Sampled\": 0\n        }\n      });\n    });","file":"unit/tracing/exporters/zipkin.spec.js","skipped":false,"dir":"test"},{"name":"should create timer","suites":["Test Zipkin tracing exporter class","Test init method"],"updatePoint":{"line":81,"column":27},"line":81,"code":"    it(\"should create timer\", () => {\n      const exporter = new ZipkinTraceExporter({});\n      exporter.flush = jest.fn();\n      exporter.init(fakeTracer);\n      expect(exporter.timer).toBeDefined();\n      expect(exporter.flush).toBeCalledTimes(0);\n      clock.tick(5500);\n      expect(exporter.flush).toBeCalledTimes(1);\n      exporter.stop();\n    });","file":"unit/tracing/exporters/zipkin.spec.js","skipped":false,"dir":"test"},{"name":"should not create timer","suites":["Test Zipkin tracing exporter class","Test init method"],"updatePoint":{"line":91,"column":31},"line":91,"code":"    it(\"should not create timer\", () => {\n      const exporter = new ZipkinTraceExporter({\n        interval: 0\n      });\n      exporter.init(fakeTracer);\n      expect(exporter.timer).toBeUndefined();\n      exporter.stop();\n    });","file":"unit/tracing/exporters/zipkin.spec.js","skipped":false,"dir":"test"},{"name":"should flatten default tags","suites":["Test Zipkin tracing exporter class","Test init method"],"updatePoint":{"line":99,"column":35},"line":99,"code":"    it(\"should flatten default tags\", () => {\n      const exporter = new ZipkinTraceExporter({\n        defaultTags: {\n          a: {\n            b: \"c\"\n          }\n        }\n      });\n      jest.spyOn(exporter, \"flattenTags\");\n      exporter.init(fakeTracer);\n      expect(exporter.defaultTags).toEqual({\n        \"a.b\": \"c\"\n      });\n      expect(exporter.flattenTags).toHaveBeenCalledTimes(2);\n      expect(exporter.flattenTags).toHaveBeenNthCalledWith(2, {\n        b: \"c\"\n      }, true, \"a\");\n      expect(exporter.flattenTags).toHaveBeenNthCalledWith(1, {\n        a: {\n          b: \"c\"\n        }\n      }, true);\n      exporter.stop();\n    });","file":"unit/tracing/exporters/zipkin.spec.js","skipped":false,"dir":"test"},{"name":"should call defaultTags function","suites":["Test Zipkin tracing exporter class","Test init method"],"updatePoint":{"line":123,"column":40},"line":123,"code":"    it(\"should call defaultTags function\", () => {\n      const fn = jest.fn(() => ({\n        a: {\n          b: 5\n        }\n      }));\n      const exporter = new ZipkinTraceExporter({\n        defaultTags: fn\n      });\n      exporter.init(fakeTracer);\n      expect(exporter.defaultTags).toEqual({\n        \"a.b\": \"5\"\n      });\n      expect(fn).toHaveBeenCalledTimes(1);\n      expect(fn).toHaveBeenNthCalledWith(1, fakeTracer);\n      exporter.stop();\n    });","file":"unit/tracing/exporters/zipkin.spec.js","skipped":false,"dir":"test"},{"name":"should flatten default tags","suites":["Test Zipkin tracing exporter class","Test stop method"],"updatePoint":{"line":146,"column":35},"line":146,"code":"    it(\"should flatten default tags\", async () => {\n      const exporter = new ZipkinTraceExporter({\n        defaultTags: {\n          a: {\n            b: \"c\"\n          }\n        }\n      });\n      exporter.init(fakeTracer);\n      expect(exporter.timer).toBeDefined();\n      await exporter.stop();\n      expect(exporter.timer).toBeNull();\n      exporter.stop();\n    });","file":"unit/tracing/exporters/zipkin.spec.js","skipped":false,"dir":"test"},{"name":"should push spans to the queue","suites":["Test Zipkin tracing exporter class","Test spanFinished method"],"updatePoint":{"line":169,"column":38},"line":169,"code":"    it(\"should push spans to the queue\", () => {\n      expect(exporter.queue).toEqual([]);\n      const span1 = {};\n      const span2 = {};\n      exporter.spanFinished(span1);\n      exporter.spanFinished(span2);\n      expect(exporter.queue).toEqual([span1, span2]);\n    });","file":"unit/tracing/exporters/zipkin.spec.js","skipped":false,"dir":"test"},{"name":"should not generate data if queue is empty","suites":["Test Zipkin tracing exporter class","Test flush method"],"updatePoint":{"line":191,"column":50},"line":191,"code":"    it(\"should not generate data if queue is empty\", () => {\n      exporter.flush();\n      expect(exporter.generateTracingData).toHaveBeenCalledTimes(0);\n    });","file":"unit/tracing/exporters/zipkin.spec.js","skipped":false,"dir":"test"},{"name":"should generate & send data if queue is not empty","suites":["Test Zipkin tracing exporter class","Test flush method"],"updatePoint":{"line":195,"column":57},"line":195,"code":"    it(\"should generate & send data if queue is not empty\", () => {\n      exporter.spanFinished({});\n      exporter.flush();\n      expect(exporter.generateTracingData).toHaveBeenCalledTimes(1);\n      expect(exporter.queue.length).toEqual(0);\n      expect(fetch).toHaveBeenCalledTimes(1);\n      expect(fetch).toHaveBeenCalledWith(\"https://zipkin-server:9411/api/v2/spans\", {\n        method: \"post\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: '{\"a\":5}'\n      });\n    });","file":"unit/tracing/exporters/zipkin.spec.js","skipped":false,"dir":"test"},{"name":"should call makePayload","suites":["Test Zipkin tracing exporter class","Test generateTracingData method"],"updatePoint":{"line":219,"column":31},"line":219,"code":"    it(\"should call makePayload\", () => {\n      exporter.spanFinished({\n        a: 5\n      });\n      exporter.spanFinished({\n        b: 10\n      });\n      const res = exporter.generateTracingData();\n      expect(exporter.makePayload).toHaveBeenCalledTimes(2);\n      expect(exporter.makePayload).toHaveBeenNthCalledWith(1, {\n        a: 5\n      });\n      expect(exporter.makePayload).toHaveBeenNthCalledWith(2, {\n        b: 10\n      });\n      expect(res).toEqual([{\n        a: 5\n      }, {\n        b: 10\n      }]);\n    });","file":"unit/tracing/exporters/zipkin.spec.js","skipped":false,"dir":"test"},{"name":"should truncate ID","suites":["Test Zipkin tracing exporter class","Test convertID & convertTime methods"],"updatePoint":{"line":249,"column":26},"line":249,"code":"    it(\"should truncate ID\", () => {\n      expect(exporter.convertID()).toBeNull();\n      expect(exporter.convertID(\"\")).toBeNull();\n      expect(exporter.convertID(\"12345678\")).toBe(\"12345678\");\n      expect(exporter.convertID(\"123456789-0123456\")).toBe(\"1234567890123456\");\n      expect(exporter.convertID(\"123456789-0123456789-0\")).toBe(\"1234567890123456\");\n    });","file":"unit/tracing/exporters/zipkin.spec.js","skipped":false,"dir":"test"},{"name":"should convert time","suites":["Test Zipkin tracing exporter class","Test convertID & convertTime methods"],"updatePoint":{"line":256,"column":27},"line":256,"code":"    it(\"should convert time\", () => {\n      expect(exporter.convertTime()).toBeNull();\n      expect(exporter.convertTime(0)).toBe(0);\n      expect(exporter.convertTime(10)).toBe(10000);\n      expect(exporter.convertTime(12345678)).toBe(12345678000);\n    });","file":"unit/tracing/exporters/zipkin.spec.js","skipped":false,"dir":"test"},{"name":"should convert normal span to zipkin payload","suites":["Test Zipkin tracing exporter class","Test makePayload"],"updatePoint":{"line":281,"column":52},"line":281,"code":"    it(\"should convert normal span to zipkin payload\", () => {\n      const span = {\n        name: \"Test Span\",\n        type: \"custom\",\n        id: \"span-id-12345678901234567890\",\n        traceID: \"trace-id-12345678901234567890\",\n        parentID: \"parent-id-12345678901234567890\",\n        service: {\n          fullName: \"v1.posts\"\n        },\n        startTime: 1000,\n        finishTime: 1050,\n        duration: 50,\n        tags: {\n          a: 5,\n          b: \"John\",\n          c: true,\n          d: null\n        }\n      };\n      expect(exporter.makePayload(span)).toMatchSnapshot();\n    });","file":"unit/tracing/exporters/zipkin.spec.js","skipped":false,"dir":"test"},{"name":"should convert errored span to zipkin payload","suites":["Test Zipkin tracing exporter class","Test makePayload"],"updatePoint":{"line":303,"column":53},"line":303,"code":"    it(\"should convert errored span to zipkin payload\", () => {\n      const err = new MoleculerRetryableError(\"Something happened\", 512, \"SOMETHING\", {\n        a: 5\n      });\n      const span = {\n        name: \"Test Span\",\n        type: \"action\",\n        id: \"span-id-12345678901234567890\",\n        traceID: \"trace-id-12345678901234567890\",\n        parentID: \"parent-id-12345678901234567890\",\n        service: {\n          fullName: \"v1.posts\"\n        },\n        startTime: 1000,\n        finishTime: 1050,\n        duration: 50,\n        tags: {\n          a: 5,\n          b: \"John\",\n          c: true,\n          d: null\n        },\n        error: err\n      };\n      expect(exporter.makePayload(span)).toMatchSnapshot();\n    });","file":"unit/tracing/exporters/zipkin.spec.js","skipped":false,"dir":"test"},{"name":"should create with default options","suites":["Test Tracing Rate Limiter","Test Constructor"],"updatePoint":{"line":14,"column":42},"line":14,"code":"    it(\"should create with default options\", () => {\n      const rate = new RateLimiter();\n      expect(rate.opts).toEqual({\n        tracesPerSecond: 1\n      });\n      expect(rate.lastTime).toBe(12345678000);\n      expect(rate.balance).toBe(0);\n      expect(rate.maxBalance).toBe(1);\n    });","file":"unit/tracing/rate-limiter.spec.js","skipped":false,"dir":"test"},{"name":"should create with custom options","suites":["Test Tracing Rate Limiter","Test Constructor"],"updatePoint":{"line":23,"column":41},"line":23,"code":"    it(\"should create with custom options\", () => {\n      const rate = new RateLimiter({\n        tracesPerSecond: 5\n      });\n      expect(rate.opts).toEqual({\n        tracesPerSecond: 5\n      });\n      expect(rate.lastTime).toBe(12345678000);\n      expect(rate.balance).toBe(0);\n      expect(rate.maxBalance).toBe(5);\n    });","file":"unit/tracing/rate-limiter.spec.js","skipped":false,"dir":"test"},{"name":"should create with custom options","suites":["Test Tracing Rate Limiter","Test Constructor"],"updatePoint":{"line":34,"column":41},"line":34,"code":"    it(\"should create with custom options\", () => {\n      const rate = new RateLimiter({\n        tracesPerSecond: 0.5\n      });\n      expect(rate.opts).toEqual({\n        tracesPerSecond: 0.5\n      });\n      expect(rate.lastTime).toBe(12345678000);\n      expect(rate.balance).toBe(0);\n      expect(rate.maxBalance).toBe(1);\n    });","file":"unit/tracing/rate-limiter.spec.js","skipped":false,"dir":"test"},{"name":"should return once per seconds","suites":["Test Tracing Rate Limiter","Test check method"],"updatePoint":{"line":52,"column":38},"line":52,"code":"    it(\"should return once per seconds\", () => {\n      const rate = new RateLimiter();\n      expect(rate.check()).toBe(false);\n      expect(rate.check()).toBe(false);\n      clock.tick(300);\n      expect(rate.check()).toBe(false);\n      clock.tick(300);\n      expect(rate.check()).toBe(false);\n      clock.tick(300);\n      expect(rate.check()).toBe(false);\n      clock.tick(300);\n      expect(rate.check()).toBe(true);\n      clock.tick(500);\n      expect(rate.check()).toBe(false);\n      clock.tick(400);\n      expect(rate.check()).toBe(false);\n      clock.tick(100);\n      expect(rate.check()).toBe(true); // Long times\n\n      clock.tick(3000);\n      expect(rate.check()).toBe(true);\n      clock.tick(5000);\n      expect(rate.check()).toBe(true); // Short times after long time\n\n      clock.tick(100);\n      expect(rate.check()).toBe(false);\n      clock.tick(100);\n      expect(rate.check()).toBe(false);\n      clock.tick(100);\n      expect(rate.check()).toBe(false);\n      clock.tick(100);\n      expect(rate.check()).toBe(false);\n      clock.tick(800);\n      expect(rate.check()).toBe(true);\n    });","file":"unit/tracing/rate-limiter.spec.js","skipped":false,"dir":"test"},{"name":"should return once per 5 seconds","suites":["Test Tracing Rate Limiter","Test check method"],"updatePoint":{"line":87,"column":40},"line":87,"code":"    it(\"should return once per 5 seconds\", () => {\n      const rate = new RateLimiter({\n        tracesPerSecond: 0.2\n      });\n      expect(rate.check()).toBe(false);\n      expect(rate.check()).toBe(false);\n      clock.tick(1000);\n      expect(rate.check()).toBe(false);\n      clock.tick(1000);\n      expect(rate.check()).toBe(false);\n      clock.tick(1000);\n      expect(rate.check()).toBe(false);\n      clock.tick(1000);\n      expect(rate.check()).toBe(false);\n      clock.tick(1000);\n      expect(rate.check()).toBe(true);\n      clock.tick(1000);\n      expect(rate.check()).toBe(false);\n      clock.tick(1000);\n      expect(rate.check()).toBe(false);\n      clock.tick(1000);\n      expect(rate.check()).toBe(false);\n      clock.tick(1000);\n      expect(rate.check()).toBe(false);\n      clock.tick(1000);\n      expect(rate.check()).toBe(true);\n    });","file":"unit/tracing/rate-limiter.spec.js","skipped":false,"dir":"test"},{"name":"should return 3 times per seconds","suites":["Test Tracing Rate Limiter","Test check method"],"updatePoint":{"line":114,"column":41},"line":114,"code":"    it(\"should return 3 times per seconds\", () => {\n      const rate = new RateLimiter({\n        tracesPerSecond: 3\n      });\n      expect(rate.check()).toBe(false);\n      expect(rate.check()).toBe(false);\n      clock.tick(100);\n      expect(rate.check()).toBe(false);\n      clock.tick(100);\n      expect(rate.check()).toBe(false);\n      clock.tick(100);\n      expect(rate.check()).toBe(false);\n      clock.tick(100);\n      expect(rate.check()).toBe(true);\n      clock.tick(100);\n      expect(rate.check()).toBe(false);\n      clock.tick(100);\n      expect(rate.check()).toBe(false);\n      clock.tick(100);\n      expect(rate.check()).toBe(true);\n      clock.tick(100);\n      expect(rate.check()).toBe(false);\n      clock.tick(100);\n      expect(rate.check()).toBe(false);\n      clock.tick(100);\n      expect(rate.check()).toBe(true);\n    });","file":"unit/tracing/rate-limiter.spec.js","skipped":false,"dir":"test"},{"name":"should return 2 times per seconds","suites":["Test Tracing Rate Limiter","Test check method"],"updatePoint":{"line":141,"column":41},"line":141,"code":"    it(\"should return 2 times per seconds\", () => {\n      const rate = new RateLimiter({\n        tracesPerSecond: 3\n      });\n      expect(rate.check(2)).toBe(false);\n      clock.tick(100);\n      expect(rate.check(2)).toBe(false);\n      clock.tick(100);\n      expect(rate.check(2)).toBe(false);\n      clock.tick(100);\n      expect(rate.check(2)).toBe(false);\n      clock.tick(100);\n      expect(rate.check(2)).toBe(false);\n      clock.tick(100);\n      expect(rate.check(2)).toBe(false);\n      clock.tick(100);\n      expect(rate.check(2)).toBe(false);\n      clock.tick(100);\n      expect(rate.check(2)).toBe(true);\n      clock.tick(100);\n      expect(rate.check(2)).toBe(false);\n      clock.tick(100);\n      expect(rate.check(2)).toBe(false);\n      clock.tick(100);\n      expect(rate.check(1)).toBe(true);\n    });","file":"unit/tracing/rate-limiter.spec.js","skipped":false,"dir":"test"},{"name":"should create with default options","suites":["Test Tracing Span","Test Constructor"],"updatePoint":{"line":29,"column":42},"line":29,"code":"    it(\"should create with default options\", () => {\n      const span = new Span(tracer, \"test-123\");\n      expect(span.tracer).toBe(tracer);\n      expect(span.logger).toBe(tracer.logger);\n      expect(span.opts).toEqual({});\n      expect(span.meta).toEqual({});\n      expect(span.name).toBe(\"test-123\");\n      expect(span.type).toBe(\"custom\");\n      expect(span.id).toBe(\"12345678-abcdef\");\n      expect(span.traceID).toBe(span.id);\n      expect(span.parentID).toBeUndefined();\n      expect(span.service).toBeUndefined();\n      expect(span.priority).toBe(5);\n      expect(span.sampled).toBe(true);\n      expect(span.startTime).toBeNull();\n      expect(span.finishTime).toBeNull();\n      expect(span.duration).toBeNull();\n      expect(span.error).toBeNull();\n      expect(span.logs).toEqual([]);\n      expect(span.tags).toEqual({});\n      expect(tracer.shouldSample).toBeCalledTimes(1);\n      expect(tracer.shouldSample).toBeCalledWith(span);\n    });","file":"unit/tracing/span.spec.js","skipped":false,"dir":"test"},{"name":"should use options","suites":["Test Tracing Span","Test Constructor"],"updatePoint":{"line":52,"column":26},"line":52,"code":"    it(\"should use options\", () => {\n      tracer.shouldSample.mockClear();\n      const opts = {\n        id: \"my-id\",\n        type: \"web\",\n        parentID: \"parent-id\",\n        service: {\n          name: \"posts\",\n          version: 2,\n          fullName: \"v2.posts\"\n        },\n        priority: 4,\n        sampled: false,\n        defaultTags: {\n          a: 5,\n          b: \"John\"\n        },\n        tags: {\n          b: \"Jane\",\n          c: 1000\n        }\n      };\n      const span = new Span(tracer, \"test-234\", opts);\n      expect(span.tracer).toBe(tracer);\n      expect(span.logger).toBe(tracer.logger);\n      expect(span.opts).toEqual(opts);\n      expect(span.meta).toEqual({});\n      expect(span.name).toBe(\"test-234\");\n      expect(span.type).toBe(\"web\");\n      expect(span.id).toBe(\"my-id\");\n      expect(span.traceID).toBe(span.id);\n      expect(span.parentID).toBe(\"parent-id\");\n      expect(span.service).toEqual(opts.service);\n      expect(span.priority).toBe(4);\n      expect(span.sampled).toBe(false);\n      expect(span.startTime).toBeNull();\n      expect(span.finishTime).toBeNull();\n      expect(span.duration).toBeNull();\n      expect(span.error).toBeNull();\n      expect(span.logs).toEqual([]);\n      expect(span.tags).toEqual({\n        a: 5,\n        b: \"Jane\",\n        c: 1000\n      });\n      expect(tracer.shouldSample).toBeCalledTimes(0);\n    });","file":"unit/tracing/span.spec.js","skipped":false,"dir":"test"},{"name":"should use options and service as string","suites":["Test Tracing Span","Test Constructor"],"updatePoint":{"line":99,"column":48},"line":99,"code":"    it(\"should use options and service as string\", () => {\n      tracer.shouldSample.mockClear();\n      const opts = {\n        id: \"my-id\",\n        type: \"web\",\n        parentID: \"parent-id\",\n        service: \"v2.posts\",\n        priority: 4,\n        sampled: false,\n        defaultTags: {\n          a: 5,\n          b: \"John\"\n        },\n        tags: {\n          b: \"Jane\",\n          c: 1000\n        }\n      };\n      const span = new Span(tracer, \"test-234\", opts);\n      expect(span.tracer).toBe(tracer);\n      expect(span.logger).toBe(tracer.logger);\n      expect(span.opts).toEqual(opts);\n      expect(span.meta).toEqual({});\n      expect(span.name).toBe(\"test-234\");\n      expect(span.type).toBe(\"web\");\n      expect(span.id).toBe(\"my-id\");\n      expect(span.traceID).toBe(span.id);\n      expect(span.parentID).toBe(\"parent-id\");\n      expect(span.service).toEqual({\n        name: \"v2.posts\",\n        fullName: \"v2.posts\"\n      });\n      expect(span.priority).toBe(4);\n      expect(span.sampled).toBe(false);\n      expect(span.startTime).toBeNull();\n      expect(span.finishTime).toBeNull();\n      expect(span.duration).toBeNull();\n      expect(span.error).toBeNull();\n      expect(span.logs).toEqual([]);\n      expect(span.tags).toEqual({\n        a: 5,\n        b: \"Jane\",\n        c: 1000\n      });\n      expect(tracer.shouldSample).toBeCalledTimes(0);\n    });","file":"unit/tracing/span.spec.js","skipped":false,"dir":"test"},{"name":"should set current time as startTime","suites":["Test Tracing Span","Test span starting"],"updatePoint":{"line":153,"column":44},"line":153,"code":"    it(\"should set current time as startTime\", () => {\n      dateNow.mockClear();\n      now.mockClear();\n      const span = new Span(fakeTracer, \"start-1\");\n      span.start();\n      expect(span.startTime).toBe(10203040);\n      expect(dateNow).toBeCalledTimes(1);\n      expect(now).toBeCalledTimes(1);\n      expect(fakeTracer.spanStarted).toBeCalledTimes(1);\n      expect(fakeTracer.spanStarted).toBeCalledWith(span);\n    });","file":"unit/tracing/span.spec.js","skipped":false,"dir":"test"},{"name":"should set the given time as startTime","suites":["Test Tracing Span","Test span starting"],"updatePoint":{"line":164,"column":46},"line":164,"code":"    it(\"should set the given time as startTime\", () => {\n      dateNow.mockClear();\n      now.mockClear();\n      fakeTracer.spanStarted.mockClear();\n      const span = new Span(fakeTracer, \"start-2\");\n      span.start(55555555);\n      expect(span.startTime).toBe(55555555);\n      expect(dateNow).toBeCalledTimes(0);\n      expect(now).toBeCalledTimes(1);\n      expect(fakeTracer.spanStarted).toBeCalledTimes(1);\n      expect(fakeTracer.spanStarted).toBeCalledWith(span);\n    });","file":"unit/tracing/span.spec.js","skipped":false,"dir":"test"},{"name":"should store tags","suites":["Test Tracing Span","Test span addTags"],"updatePoint":{"line":190,"column":25},"line":190,"code":"    it(\"should store tags\", () => {\n      span.addTags({\n        a: 10,\n        b: \"John\",\n        c: {\n          d: true,\n          e: \"string\"\n        }\n      });\n      expect(span.tags).toEqual({\n        a: 10,\n        b: \"John\",\n        c: {\n          d: true,\n          e: \"string\"\n        }\n      });\n    });","file":"unit/tracing/span.spec.js","skipped":false,"dir":"test"},{"name":"should append new tags","suites":["Test Tracing Span","Test span addTags"],"updatePoint":{"line":208,"column":30},"line":208,"code":"    it(\"should append new tags\", () => {\n      span.addTags({\n        a: 25,\n        c: {\n          f: \"ffff\"\n        }\n      });\n      expect(span.tags).toEqual({\n        a: 25,\n        b: \"John\",\n        c: {\n          f: \"ffff\"\n        }\n      });\n    });","file":"unit/tracing/span.spec.js","skipped":false,"dir":"test"},{"name":"should store log item without time","suites":["Test Tracing Span","Test log method"],"updatePoint":{"line":233,"column":42},"line":233,"code":"    it(\"should store log item without time\", () => {\n      now.mockReturnValueOnce(20);\n      span.log(\"first-log\", {\n        a: 10,\n        b: \"John\",\n        c: {\n          d: true,\n          e: \"string\"\n        }\n      });\n      expect(span.logs).toEqual([{\n        name: \"first-log\",\n        time: 10203040,\n        elapsed: 20,\n        fields: {\n          a: 10,\n          b: \"John\",\n          c: {\n            d: true,\n            e: \"string\"\n          }\n        }\n      }]);\n    });","file":"unit/tracing/span.spec.js","skipped":false,"dir":"test"},{"name":"should store log with time","suites":["Test Tracing Span","Test log method"],"updatePoint":{"line":257,"column":34},"line":257,"code":"    it(\"should store log with time\", () => {\n      now.mockReturnValueOnce(20);\n      span.log(\"second-log\", {\n        a: 100\n      }, 10203030);\n      expect(span.logs).toEqual([{\n        name: \"first-log\",\n        time: 10203040,\n        elapsed: 20,\n        fields: {\n          a: 10,\n          b: \"John\",\n          c: {\n            d: true,\n            e: \"string\"\n          }\n        }\n      }, {\n        name: \"second-log\",\n        time: 10203030,\n        elapsed: 10,\n        fields: {\n          a: 100\n        }\n      }]);\n    });","file":"unit/tracing/span.spec.js","skipped":false,"dir":"test"},{"name":"should return true","suites":["Test Tracing Span","Test isActive method"],"updatePoint":{"line":294,"column":26},"line":294,"code":"    it(\"should return true\", () => {\n      expect(span.isActive()).toBe(true);\n    });","file":"unit/tracing/span.spec.js","skipped":false,"dir":"test"},{"name":"should return false","suites":["Test Tracing Span","Test isActive method"],"updatePoint":{"line":297,"column":27},"line":297,"code":"    it(\"should return false\", () => {\n      span.finish();\n      expect(span.isActive()).toBe(false);\n    });","file":"unit/tracing/span.spec.js","skipped":false,"dir":"test"},{"name":"should set error property","suites":["Test Tracing Span","Test setError method"],"updatePoint":{"line":311,"column":33},"line":311,"code":"    it(\"should set error property\", () => {\n      expect(span.error).toBeNull();\n      const err = new Error();\n      span.setError(err);\n      expect(span.error).toBe(err);\n    });","file":"unit/tracing/span.spec.js","skipped":false,"dir":"test"},{"name":"should set current time as finishTime","suites":["Test Tracing Span","Test span finishing"],"updatePoint":{"line":326,"column":45},"line":326,"code":"    it(\"should set current time as finishTime\", () => {\n      now.mockClear();\n      const span = new Span(fakeTracer, \"start-6\");\n      span.start(10203000);\n      now.mockReturnValueOnce(40);\n      span.finish();\n      expect(span.finishTime).toBe(10203040);\n      expect(span.duration).toBe(40);\n      expect(now).toBeCalledTimes(2);\n      expect(fakeTracer.spanFinished).toBeCalledTimes(1);\n      expect(fakeTracer.spanFinished).toBeCalledWith(span);\n    });","file":"unit/tracing/span.spec.js","skipped":false,"dir":"test"},{"name":"should set the given time as finishTime","suites":["Test Tracing Span","Test span finishing"],"updatePoint":{"line":338,"column":47},"line":338,"code":"    it(\"should set the given time as finishTime\", () => {\n      now.mockClear();\n      fakeTracer.spanStarted.mockClear();\n      fakeTracer.spanFinished.mockClear();\n      const span = new Span(fakeTracer, \"start-7\");\n      span.start(10203000);\n      span.finish(10203030);\n      expect(span.finishTime).toBe(10203030);\n      expect(span.duration).toBe(30);\n      expect(now).toBeCalledTimes(1);\n      expect(fakeTracer.spanFinished).toBeCalledTimes(1);\n      expect(fakeTracer.spanFinished).toBeCalledWith(span);\n    });","file":"unit/tracing/span.spec.js","skipped":false,"dir":"test"},{"name":"should call tracer startSpan without opts","suites":["Test Tracing Span","Test span create sub-span"],"updatePoint":{"line":365,"column":49},"line":365,"code":"    it(\"should call tracer startSpan without opts\", () => {\n      const res = span.startSpan(\"child-span\");\n      expect(res).toBe(subSpan);\n      expect(fakeTracer.startSpan).toBeCalledTimes(1);\n      expect(fakeTracer.startSpan).toBeCalledWith(\"child-span\", {\n        traceID: \"12345678-abcdef\",\n        parentID: \"12345678-abcdef\",\n        sampled: true\n      });\n    });","file":"unit/tracing/span.spec.js","skipped":false,"dir":"test"},{"name":"should call tracer startSpan with opts","suites":["Test Tracing Span","Test span create sub-span"],"updatePoint":{"line":375,"column":46},"line":375,"code":"    it(\"should call tracer startSpan with opts\", () => {\n      fakeTracer.startSpan.mockClear();\n      const res = span.startSpan(\"child-span\", {\n        sampled: false,\n        tags: {\n          a: 5\n        }\n      });\n      expect(res).toBe(subSpan);\n      expect(fakeTracer.startSpan).toBeCalledTimes(1);\n      expect(fakeTracer.startSpan).toBeCalledWith(\"child-span\", {\n        traceID: \"12345678-abcdef\",\n        parentID: \"12345678-abcdef\",\n        sampled: false,\n        tags: {\n          a: 5\n        }\n      });\n    });","file":"unit/tracing/span.spec.js","skipped":false,"dir":"test"},{"name":"should create with default options","suites":["Test Tracer","Test Constructor"],"updatePoint":{"line":47,"column":42},"line":47,"code":"    it(\"should create with default options\", () => {\n      const tracer = new Tracer(broker);\n      expect(tracer.broker).toBe(broker);\n      expect(tracer.logger).toBeDefined();\n      expect(tracer.opts).toEqual({\n        enabled: true,\n        exporter: null,\n        sampling: {\n          rate: 1.0,\n          tracesPerSecond: null,\n          minPriority: null\n        },\n        actions: true,\n        //methods: false,\n        events: false,\n        errorFields: [\"name\", \"message\", \"code\", \"type\", \"data\"],\n        stackTrace: false,\n        defaultTags: null,\n        tags: {\n          action: null,\n          event: null\n        }\n      });\n      expect(tracer.rateLimiter).toBeUndefined();\n      expect(tracer.sampleCounter).toBe(0); //expect(tracer.scope).toBeDefined();\n\n      expect(RateLimiter).toHaveBeenCalledTimes(0);\n    });","file":"unit/tracing/tracer.spec.js","skipped":false,"dir":"test"},{"name":"should use options","suites":["Test Tracer","Test Constructor"],"updatePoint":{"line":75,"column":26},"line":75,"code":"    it(\"should use options\", () => {\n      const tracer = new Tracer(broker, {\n        sampling: {\n          rate: 0.5,\n          tracesPerSecond: 0.2\n        },\n        events: true,\n        stackTrace: true,\n        defaultTags: {\n          a: 5\n        }\n      });\n      expect(tracer.broker).toBe(broker);\n      expect(tracer.logger).toBeDefined();\n      expect(tracer.opts).toEqual({\n        enabled: true,\n        exporter: null,\n        sampling: {\n          rate: 0.5,\n          tracesPerSecond: 0.2,\n          minPriority: null\n        },\n        actions: true,\n        //methods: true,\n        events: true,\n        errorFields: [\"name\", \"message\", \"code\", \"type\", \"data\", \"stack\"],\n        stackTrace: true,\n        defaultTags: {\n          a: 5\n        },\n        tags: {\n          action: null,\n          event: null\n        }\n      });\n      expect(tracer.rateLimiter).toBeInstanceOf(RateLimiter);\n      expect(RateLimiter).toHaveBeenCalledTimes(1);\n      expect(RateLimiter).toHaveBeenCalledWith({\n        tracesPerSecond: 0.2\n      });\n      expect(tracer.sampleCounter).toBe(0); //expect(tracer.scope).toBeDefined();\n    });","file":"unit/tracing/tracer.spec.js","skipped":false,"dir":"test"},{"name":"should enable if options is TRUE","suites":["Test Tracer","Test Constructor"],"updatePoint":{"line":117,"column":40},"line":117,"code":"    it(\"should enable if options is TRUE\", () => {\n      const tracer = new Tracer(broker, true);\n      expect(tracer.opts.enabled).toBe(true);\n    });","file":"unit/tracing/tracer.spec.js","skipped":false,"dir":"test"},{"name":"should disable if options is FALSE","suites":["Test Tracer","Test Constructor"],"updatePoint":{"line":121,"column":42},"line":121,"code":"    it(\"should disable if options is FALSE\", () => {\n      const tracer = new Tracer(broker, false);\n      expect(tracer.opts.enabled).toBe(false);\n    });","file":"unit/tracing/tracer.spec.js","skipped":false,"dir":"test"},{"name":"should not initialize exporter if disabled","suites":["Test Tracer","Test init"],"updatePoint":{"line":127,"column":50},"line":127,"code":"    it(\"should not initialize exporter if disabled\", () => {\n      Exporters.resolve.mockClear();\n      fakeExporter.init.mockClear();\n      const tracer = new Tracer(broker, {\n        enabled: false,\n        exporter: \"Exporter1\"\n      });\n      tracer.init();\n      expect(tracer.exporter).toBeUndefined();\n      expect(Exporters.resolve).toBeCalledTimes(0);\n      expect(fakeExporter.init).toBeCalledTimes(0);\n    });","file":"unit/tracing/tracer.spec.js","skipped":false,"dir":"test"},{"name":"should initialize one exporter","suites":["Test Tracer","Test init"],"updatePoint":{"line":139,"column":38},"line":139,"code":"    it(\"should initialize one exporter\", () => {\n      Exporters.resolve.mockClear();\n      fakeExporter.init.mockClear();\n      const tracer = new Tracer(broker, {\n        enabled: true,\n        exporter: \"Exporter1\",\n        defaultTags: {\n          a: 5\n        }\n      });\n      tracer.init();\n      expect(tracer.exporter.length).toBe(1);\n      expect(Exporters.resolve).toBeCalledTimes(1);\n      expect(Exporters.resolve).toHaveBeenNthCalledWith(1, \"Exporter1\");\n      expect(fakeExporter.init).toBeCalledTimes(1);\n      expect(fakeExporter.init).toHaveBeenNthCalledWith(1, tracer);\n      expect(tracer.defaultTags).toEqual({\n        a: 5\n      });\n    });","file":"unit/tracing/tracer.spec.js","skipped":false,"dir":"test"},{"name":"should initialize exporters","suites":["Test Tracer","Test init"],"updatePoint":{"line":159,"column":35},"line":159,"code":"    it(\"should initialize exporters\", () => {\n      Exporters.resolve.mockClear();\n      fakeExporter.init.mockClear();\n      const tracer = new Tracer(broker, {\n        exporter: [\"Exporter1\", null, {\n          type: \"Datadog\",\n          options: {\n            a: 5\n          }\n        }],\n        defaultTags: jest.fn(() => ({\n          a: 5\n        }))\n      });\n      tracer.init();\n      expect(tracer.exporter.length).toBe(2);\n      expect(Exporters.resolve).toBeCalledTimes(2);\n      expect(Exporters.resolve).toHaveBeenNthCalledWith(1, \"Exporter1\");\n      expect(Exporters.resolve).toHaveBeenNthCalledWith(2, {\n        type: \"Datadog\",\n        options: {\n          a: 5\n        }\n      });\n      expect(fakeExporter.init).toBeCalledTimes(2);\n      expect(fakeExporter.init).toHaveBeenNthCalledWith(1, tracer);\n      expect(fakeExporter.init).toHaveBeenNthCalledWith(2, tracer);\n      expect(tracer.defaultTags).toEqual({\n        a: 5\n      });\n      expect(tracer.opts.defaultTags).toHaveBeenCalledTimes(1);\n      expect(tracer.opts.defaultTags).toHaveBeenCalledWith(tracer);\n    });","file":"unit/tracing/tracer.spec.js","skipped":false,"dir":"test"},{"name":"should stop exporter","suites":["Test Tracer","Test stop method"],"updatePoint":{"line":194,"column":28},"line":194,"code":"    it(\"should stop exporter\", async () => {\n      const tracer = new Tracer(broker, {\n        enabled: true,\n        exporter: \"Console\"\n      });\n      tracer.init();\n      tracer.exporter[0].stop = jest.fn(() => Promise.resolve());\n      await tracer.stop();\n      expect(tracer.exporter[0].stop).toHaveBeenCalledTimes(1);\n    });","file":"unit/tracing/tracer.spec.js","skipped":false,"dir":"test"},{"name":"should stop exporters","suites":["Test Tracer","Test stop method"],"updatePoint":{"line":204,"column":29},"line":204,"code":"    it(\"should stop exporters\", async () => {\n      const tracer = new Tracer(broker, {\n        enabled: true,\n        exporter: [\"Console\", \"Zipkin\"]\n      });\n      tracer.init();\n      fakeExporter.stop.mockClear();\n      await tracer.stop();\n      expect(fakeExporter.stop).toHaveBeenCalledTimes(2);\n    });","file":"unit/tracing/tracer.spec.js","skipped":false,"dir":"test"},{"name":"should return false if disabled","suites":["Test Tracer","Test isEnabled"],"updatePoint":{"line":216,"column":39},"line":216,"code":"    it(\"should return false if disabled\", () => {\n      const tracer = new Tracer(broker, {\n        enabled: false\n      });\n      tracer.init();\n      expect(tracer.isEnabled()).toBe(false);\n    });","file":"unit/tracing/tracer.spec.js","skipped":false,"dir":"test"},{"name":"should return true if disabled","suites":["Test Tracer","Test isEnabled"],"updatePoint":{"line":223,"column":38},"line":223,"code":"    it(\"should return true if disabled\", () => {\n      const tracer = new Tracer(broker, {\n        enabled: true\n      });\n      tracer.init();\n      expect(tracer.isEnabled()).toBe(true);\n    });","file":"unit/tracing/tracer.spec.js","skipped":false,"dir":"test"},{"name":"should check the span priority","suites":["Test Tracer","Test shouldSample"],"updatePoint":{"line":264,"column":38},"line":264,"code":"    it(\"should check the span priority\", () => {\n      const tracer = new Tracer(broker, {\n        enabled: true,\n        sampling: {\n          minPriority: 3,\n          rate: 1\n        }\n      });\n      tracer.init();\n      expect(tracer.shouldSample({\n        priority: 1\n      })).toBe(false);\n      expect(tracer.shouldSample({\n        priority: 2\n      })).toBe(false);\n      expect(tracer.shouldSample({\n        priority: 3\n      })).toBe(true);\n      expect(tracer.shouldSample({\n        priority: 4\n      })).toBe(true);\n      expect(tracer.shouldSample({\n        priority: 5\n      })).toBe(true);\n    });","file":"unit/tracing/tracer.spec.js","skipped":false,"dir":"test"},{"name":"should check the rate limiter sampling","suites":["Test Tracer","Test shouldSample"],"updatePoint":{"line":289,"column":46},"line":289,"code":"    it(\"should check the rate limiter sampling\", () => {\n      const tracer = new Tracer(broker, {\n        enabled: true,\n        sampling: {\n          rate: 1,\n          tracesPerSecond: 0.1\n        }\n      });\n      tracer.init();\n      tracer.rateLimiter.check = jest.fn(() => true);\n      expect(tracer.shouldSample({\n        priority: 1\n      })).toBe(true);\n      expect(tracer.rateLimiter.check).toHaveBeenCalledTimes(1);\n      expect(tracer.rateLimiter.check).toHaveBeenCalledWith();\n    });","file":"unit/tracing/tracer.spec.js","skipped":false,"dir":"test"},{"name":"should check the sampling rate (1.0)","suites":["Test Tracer","Test shouldSample"],"updatePoint":{"line":305,"column":44},"line":305,"code":"    it(\"should check the sampling rate (1.0)\", () => {\n      const tracer = new Tracer(broker, {\n        enabled: true,\n        sampling: {\n          rate: 1\n        }\n      });\n      tracer.init();\n      expect(tracer.shouldSample({\n        priority: 1\n      })).toBe(true);\n      expect(tracer.shouldSample({\n        priority: 2\n      })).toBe(true);\n      expect(tracer.shouldSample({\n        priority: 3\n      })).toBe(true);\n      expect(tracer.shouldSample({\n        priority: 4\n      })).toBe(true);\n      expect(tracer.shouldSample({\n        priority: 5\n      })).toBe(true);\n    });","file":"unit/tracing/tracer.spec.js","skipped":false,"dir":"test"},{"name":"should check the sampling rate (0.5)","suites":["Test Tracer","Test shouldSample"],"updatePoint":{"line":329,"column":44},"line":329,"code":"    it(\"should check the sampling rate (0.5)\", () => {\n      const tracer = new Tracer(broker, {\n        enabled: true,\n        sampling: {\n          rate: 0.5\n        }\n      });\n      tracer.init();\n      expect(tracer.shouldSample()).toBe(false);\n      expect(tracer.shouldSample()).toBe(true);\n      expect(tracer.shouldSample()).toBe(false);\n      expect(tracer.shouldSample()).toBe(true);\n      expect(tracer.shouldSample()).toBe(false);\n    });","file":"unit/tracing/tracer.spec.js","skipped":false,"dir":"test"},{"name":"should check the sampling rate (0)","suites":["Test Tracer","Test shouldSample"],"updatePoint":{"line":343,"column":42},"line":343,"code":"    it(\"should check the sampling rate (0)\", () => {\n      const tracer = new Tracer(broker, {\n        enabled: true,\n        sampling: {\n          rate: 0\n        }\n      });\n      tracer.init();\n      expect(tracer.shouldSample()).toBe(false);\n      expect(tracer.shouldSample()).toBe(false);\n      expect(tracer.shouldSample()).toBe(false);\n      expect(tracer.shouldSample()).toBe(false);\n      expect(tracer.shouldSample()).toBe(false);\n    });","file":"unit/tracing/tracer.spec.js","skipped":false,"dir":"test"},{"name":"should create a new span","suites":["Test Tracer","Test startSpan"],"updatePoint":{"line":359,"column":32},"line":359,"code":"    it(\"should create a new span\", () => {\n      const tracer = new Tracer(broker, {\n        enabled: true,\n        defaultTags: {\n          def: \"ault\"\n        }\n      });\n      tracer.init();\n      const span = tracer.startSpan(\"new-span\", {\n        tags: {\n          a: 5\n        }\n      });\n      expect(span).toBe(fakeSpan);\n      expect(Span).toHaveBeenCalledTimes(1);\n      expect(Span).toHaveBeenCalledWith(tracer, \"new-span\", {\n        type: \"custom\",\n        defaultTags: {\n          def: \"ault\"\n        },\n        tags: {\n          a: 5\n        }\n      });\n      expect(fakeSpan.start).toHaveBeenCalledTimes(1);\n    });","file":"unit/tracing/tracer.spec.js","skipped":false,"dir":"test"},{"name":"should create a new span with parent","suites":["Test Tracer","Test startSpan"],"updatePoint":{"line":385,"column":44},"line":385,"code":"    it(\"should create a new span with parent\", () => {\n      Span.mockClear();\n      fakeSpan.start.mockClear();\n      const tracer = new Tracer(broker, {\n        enabled: true,\n        defaultTags: {\n          def: \"ault\"\n        }\n      });\n      tracer.init();\n      const parentSpan = {\n        id: \"parent-123\",\n        traceID: \"trace-123\",\n        sampled: true\n      };\n      const span = tracer.startSpan(\"new-span\", {\n        tags: {\n          a: 5\n        },\n        parentSpan\n      });\n      expect(span).toBe(fakeSpan);\n      expect(Span).toHaveBeenCalledTimes(1);\n      expect(Span).toHaveBeenCalledWith(tracer, \"new-span\", {\n        type: \"custom\",\n        defaultTags: {\n          def: \"ault\"\n        },\n        parentID: \"parent-123\",\n        traceID: \"trace-123\",\n        sampled: true,\n        tags: {\n          a: 5\n        }\n      });\n      expect(fakeSpan.start).toHaveBeenCalledTimes(1);\n    });","file":"unit/tracing/tracer.spec.js","skipped":false,"dir":"test"},{"name":"should do nothing if no exporter","suites":["Test Tracer","Test invokeExporter"],"updatePoint":{"line":424,"column":40},"line":424,"code":"    it(\"should do nothing if no exporter\", () => {\n      Exporters.resolve.mockClear();\n      fakeExporter.init.mockClear();\n      const tracer = new Tracer(broker, {\n        enabled: true\n      });\n      tracer.init();\n      tracer.invokeExporter(\"someMethod\", [5, \"John\"]);\n      expect(fakeExporter.someMethod).toBeCalledTimes(0);\n    });","file":"unit/tracing/tracer.spec.js","skipped":false,"dir":"test"},{"name":"should call a method in exporters","suites":["Test Tracer","Test invokeExporter"],"updatePoint":{"line":434,"column":41},"line":434,"code":"    it(\"should call a method in exporters\", () => {\n      Exporters.resolve.mockClear();\n      fakeExporter.init.mockClear();\n      const tracer = new Tracer(broker, {\n        enabled: true,\n        exporter: [\"Exporter1\", \"Exporter2\"]\n      });\n      tracer.init();\n      tracer.invokeExporter(\"someMethod\", [5, \"John\"]);\n      expect(fakeExporter.someMethod).toBeCalledTimes(2);\n      expect(fakeExporter.someMethod).toHaveBeenNthCalledWith(1, 5, \"John\");\n      expect(fakeExporter.someMethod).toHaveBeenNthCalledWith(2, 5, \"John\");\n    });","file":"unit/tracing/tracer.spec.js","skipped":false,"dir":"test"},{"name":"should call setCurrentSpan & invokeExporter","suites":["Test Tracer","Test spanStarted"],"updatePoint":{"line":456,"column":51},"line":456,"code":"    it(\"should call setCurrentSpan & invokeExporter\", () => {\n      const span = {\n        id: \"span-111\",\n        sampled: true\n      };\n      tracer.spanStarted(span); //expect(tracer.setCurrentSpan).toBeCalledTimes(1);\n      //expect(tracer.setCurrentSpan).toHaveBeenCalledWith(span);\n\n      expect(tracer.invokeExporter).toBeCalledTimes(1);\n      expect(tracer.invokeExporter).toHaveBeenCalledWith(\"spanStarted\", [span]);\n    });","file":"unit/tracing/tracer.spec.js","skipped":false,"dir":"test"},{"name":"should not invokeExporter if not sampled","suites":["Test Tracer","Test spanStarted"],"updatePoint":{"line":467,"column":48},"line":467,"code":"    it(\"should not invokeExporter if not sampled\", () => {\n      //tracer.setCurrentSpan.mockClear();\n      tracer.invokeExporter.mockClear();\n      const span = {\n        id: \"span-111\",\n        sampled: false\n      };\n      tracer.spanStarted(span); //expect(tracer.setCurrentSpan).toBeCalledTimes(1);\n      //expect(tracer.setCurrentSpan).toHaveBeenCalledWith(span);\n\n      expect(tracer.invokeExporter).toBeCalledTimes(0);\n    });","file":"unit/tracing/tracer.spec.js","skipped":false,"dir":"test"},{"name":"should call removeCurrentSpan & invokeExporter","suites":["Test Tracer","Test spanFinished"],"updatePoint":{"line":488,"column":54},"line":488,"code":"    it(\"should call removeCurrentSpan & invokeExporter\", () => {\n      const span = {\n        id: \"span-111\",\n        sampled: true\n      };\n      tracer.spanFinished(span); // expect(tracer.removeCurrentSpan).toBeCalledTimes(1);\n      // expect(tracer.removeCurrentSpan).toHaveBeenCalledWith(span);\n\n      expect(tracer.invokeExporter).toBeCalledTimes(1);\n      expect(tracer.invokeExporter).toHaveBeenCalledWith(\"spanFinished\", [span]);\n    });","file":"unit/tracing/tracer.spec.js","skipped":false,"dir":"test"},{"name":"should not invokeExporter if not sampled","suites":["Test Tracer","Test spanFinished"],"updatePoint":{"line":499,"column":48},"line":499,"code":"    it(\"should not invokeExporter if not sampled\", () => {\n      //tracer.removeCurrentSpan.mockClear();\n      tracer.invokeExporter.mockClear();\n      const span = {\n        id: \"span-111\",\n        sampled: false\n      };\n      tracer.spanFinished(span); // expect(tracer.removeCurrentSpan).toBeCalledTimes(1);\n      // expect(tracer.removeCurrentSpan).toHaveBeenCalledWith(span);\n\n      expect(tracer.invokeExporter).toBeCalledTimes(0);\n    });","file":"unit/tracing/tracer.spec.js","skipped":false,"dir":"test"},{"name":"create instance","suites":["Test Transporter constructor"],"updatePoint":{"line":38,"column":21},"line":38,"code":"  it(\"create instance\", () => {\n    let transit = new Transit(broker, transporter, transitOptions);\n    expect(transit).toBeDefined();\n    expect(transit.opts).toBe(transitOptions);\n    expect(transit.logger).toBeDefined();\n    expect(transit.nodeID).toBe(broker.nodeID);\n    expect(transit.instanceID).toBe(broker.instanceID);\n    expect(transit.tx).toBe(transporter);\n    expect(transit.discoverer).toBe(broker.registry.discoverer);\n    expect(transit.pendingRequests).toBeInstanceOf(Map);\n    expect(transit.pendingReqStreams).toBeInstanceOf(Map);\n    expect(transit.pendingResStreams).toBeInstanceOf(Map);\n    expect(transit.stat).toEqual({\n      packets: {\n        sent: {\n          count: 0,\n          bytes: 0\n        },\n        received: {\n          count: 0,\n          bytes: 0\n        }\n      }\n    });\n    expect(transit.connected).toBe(false);\n    expect(transit.disconnecting).toBe(false);\n    expect(transit.isReady).toBe(false);\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"create instance with options","suites":["Test Transporter constructor"],"updatePoint":{"line":66,"column":34},"line":66,"code":"  it(\"create instance with options\", () => {\n    let opts = {\n      id: 5\n    };\n    let transit = new Transit(broker, transporter, opts);\n    expect(transit.opts).toBe(opts);\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should call transporter.init","suites":["Test Transporter constructor"],"updatePoint":{"line":73,"column":34},"line":73,"code":"  it(\"should call transporter.init\", () => {\n    transporter.init = jest.fn();\n    let transit = new Transit(broker, transporter, transitOptions);\n    expect(transporter.init).toHaveBeenCalledTimes(1);\n    expect(transporter.init).toHaveBeenCalledWith(transit, expect.any(Function), expect.any(Function));\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should call transporter connect","suites":["Test Transit.connect"],"updatePoint":{"line":87,"column":37},"line":87,"code":"  it(\"should call transporter connect\", () => {\n    let p = transit.connect().catch(protectReject).then(() => {\n      expect(transporter.connect).toHaveBeenCalledTimes(1);\n      expect(transit.__connectResolve).toBeDefined();\n    });\n\n    transit.__connectResolve();\n\n    return p;\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should call makeSubscriptions & discoverNodes","suites":["Test Transit.afterConnect"],"updatePoint":{"line":127,"column":51},"line":127,"code":"  it(\"should call makeSubscriptions & discoverNodes\", () => {\n    return transit.afterConnect().catch(protectReject).then(() => {\n      expect(transit.makeSubscriptions).toHaveBeenCalledTimes(1);\n      expect(transit.discoverer.discoverAllNodes).toHaveBeenCalledTimes(1);\n      expect(transit.discoverer.sendLocalNodeInfo).toHaveBeenCalledTimes(0);\n      expect(resolver).toHaveBeenCalledTimes(1);\n      expect(transit.__connectResolve).toBeNull();\n      expect(transit.connected).toBe(true);\n      expect(broker.broadcastLocal).toHaveBeenCalledTimes(1);\n      expect(broker.broadcastLocal).toHaveBeenCalledWith(\"$transporter.connected\", {\n        wasReconnect: false\n      });\n    });\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should call sendNodeInfo & discoverNodes if was reconnected","suites":["Test Transit.afterConnect"],"updatePoint":{"line":141,"column":65},"line":141,"code":"  it(\"should call sendNodeInfo & discoverNodes if was reconnected\", () => {\n    broker.broadcastLocal.mockClear();\n    return transit.afterConnect(true).catch(protectReject).then(() => {\n      expect(transit.makeSubscriptions).toHaveBeenCalledTimes(0);\n      expect(transit.discoverer.sendLocalNodeInfo).toHaveBeenCalledTimes(1);\n      expect(transit.discoverer.discoverAllNodes).toHaveBeenCalledTimes(1);\n      expect(resolver).toHaveBeenCalledTimes(1);\n      expect(transit.__connectResolve).toBeNull();\n      expect(transit.connected).toBe(true);\n      expect(broker.broadcastLocal).toHaveBeenCalledTimes(1);\n      expect(broker.broadcastLocal).toHaveBeenCalledWith(\"$transporter.connected\", {\n        wasReconnect: true\n      });\n    });\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should call transporter disconnect & localNodeDisconnected","suites":["Test Transit.disconnect"],"updatePoint":{"line":168,"column":64},"line":168,"code":"  it(\"should call transporter disconnect & localNodeDisconnected\", () => {\n    transporter.disconnect = jest.fn(() => {\n      expect(transit.disconnecting).toBe(true);\n      return Promise.resolve();\n    });\n    broker.broadcastLocal.mockClear();\n    broker.metrics.set.mockClear();\n    transit.discoverer.localNodeDisconnected.mockClear();\n    expect(transit.connected).toBe(true);\n    expect(transit.isReady).toBe(true);\n    expect(transit.disconnecting).toBe(false);\n    return transit.disconnect().catch(protectReject).then(() => {\n      expect(transporter.disconnect).toHaveBeenCalledTimes(1);\n      expect(broker.broadcastLocal).toHaveBeenCalledTimes(1);\n      expect(broker.broadcastLocal).toHaveBeenCalledWith(\"$transporter.disconnected\", {\n        graceFul: true\n      });\n      expect(broker.metrics.set).toHaveBeenCalledTimes(1);\n      expect(broker.metrics.set).toHaveBeenCalledWith(\"moleculer.transit.connected\", 0);\n      expect(transit.discoverer.localNodeDisconnected).toHaveBeenCalledTimes(1);\n      expect(transit.connected).toBe(false);\n      expect(transit.isReady).toBe(false);\n      expect(transit.disconnecting).toBe(false);\n    });\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should not call sendNodeInfo if not connected","suites":["Test Transit.ready"],"updatePoint":{"line":201,"column":51},"line":201,"code":"  it(\"should not call sendNodeInfo if not connected\", () => {\n    expect(transit.isReady).toBe(false);\n    expect(transit.connected).toBe(false);\n    transit.ready();\n    expect(transit.discoverer.localNodeReady).toHaveBeenCalledTimes(0);\n    expect(transit.isReady).toBe(false);\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should call sendNodeInfo if connected","suites":["Test Transit.ready"],"updatePoint":{"line":208,"column":43},"line":208,"code":"  it(\"should call sendNodeInfo if connected\", () => {\n    transit.connected = true;\n    expect(transit.isReady).toBe(false);\n    transit.ready();\n    expect(transit.discoverer.localNodeReady).toHaveBeenCalledTimes(1);\n    expect(transit.isReady).toBe(true);\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should call publish with correct params","suites":["Test Transit.sendDisconnectPacket"],"updatePoint":{"line":224,"column":45},"line":224,"code":"  it(\"should call publish with correct params\", () => {\n    return transit.sendDisconnectPacket().catch(protectReject).then(() => {\n      expect(transit.publish).toHaveBeenCalledTimes(1);\n      expect(transit.publish).toHaveBeenCalledWith(expect.any(P.Packet));\n      const packet = transit.publish.mock.calls[0][0];\n      expect(packet.type).toBe(P.PACKET_DISCONNECT);\n      expect(packet.payload).toEqual({});\n    });\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should call makeSubscriptions of transporter with all topics","suites":["Test Transit.makeSubscriptions"],"updatePoint":{"line":242,"column":66},"line":242,"code":"  it(\"should call makeSubscriptions of transporter with all topics\", () => {\n    return transit.makeSubscriptions().catch(protectReject).then(() => {\n      expect(transit.tx.makeSubscriptions).toHaveBeenCalledTimes(1);\n      expect(transit.tx.makeSubscriptions).toHaveBeenCalledWith([{\n        cmd: \"EVENT\",\n        nodeID: \"node1\"\n      }, {\n        cmd: \"REQ\",\n        nodeID: \"node1\"\n      }, {\n        cmd: \"RES\",\n        nodeID: \"node1\"\n      }, {\n        cmd: \"DISCOVER\"\n      }, {\n        cmd: \"DISCOVER\",\n        nodeID: \"node1\"\n      }, {\n        cmd: \"INFO\"\n      }, {\n        cmd: \"INFO\",\n        nodeID: \"node1\"\n      }, {\n        cmd: \"DISCONNECT\"\n      }, {\n        cmd: \"HEARTBEAT\"\n      }, {\n        cmd: \"PING\"\n      }, {\n        cmd: \"PING\",\n        nodeID: \"node1\"\n      }, {\n        cmd: \"PONG\",\n        nodeID: \"node1\"\n      }]);\n    });\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should broadcast Error if msg not valid","suites":["Test Transit.messageHandler"],"updatePoint":{"line":297,"column":45},"line":297,"code":"  it(\"should broadcast Error if msg not valid\", async () => {\n    expect(transit.stat.packets.received).toEqual({\n      count: 0,\n      bytes: 0\n    });\n    const res = await transit.messageHandler(\"EVENT\");\n    expect(res).toBe(false);\n    expect(broker.broadcastLocal).toHaveBeenCalledTimes(1);\n    expect(broker.broadcastLocal).toHaveBeenCalledWith(\"$transit.error\", {\n      error: expect.any(Error),\n      module: \"transit\",\n      type: C.FAILED_PROCESSING_PACKET\n    });\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should broadcast Error if no version","suites":["Test Transit.messageHandler"],"updatePoint":{"line":311,"column":42},"line":311,"code":"  it(\"should broadcast Error if no version\", async () => {\n    const res = await transit.messageHandler(\"EVENT\", {\n      payload: {}\n    });\n    expect(res).toBe(false);\n    expect(broker.broadcastLocal).toHaveBeenCalledTimes(1);\n    expect(broker.broadcastLocal).toHaveBeenCalledWith(\"$transit.error\", {\n      error: new E.ProtocolVersionMismatchError(),\n      module: \"transit\",\n      type: C.FAILED_PROCESSING_PACKET\n    });\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should broadcast Error if version mismatch","suites":["Test Transit.messageHandler"],"updatePoint":{"line":323,"column":48},"line":323,"code":"  it(\"should broadcast Error if version mismatch\", async () => {\n    const res = await transit.messageHandler(\"EVENT\", {\n      payload: {\n        ver: \"1\"\n      }\n    });\n    expect(res).toBe(false);\n    expect(broker.broadcastLocal).toHaveBeenCalledTimes(1);\n    expect(broker.broadcastLocal).toHaveBeenCalledWith(\"$transit.error\", {\n      error: new E.ProtocolVersionMismatchError(),\n      module: \"transit\",\n      type: C.FAILED_PROCESSING_PACKET\n    });\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should not throw Error if version mismatch & disableVersionCheck is true","suites":["Test Transit.messageHandler"],"updatePoint":{"line":337,"column":78},"line":337,"code":"  it(\"should not throw Error if version mismatch & disableVersionCheck is true\", async () => {\n    transit.opts.disableVersionCheck = true;\n    const payload = {\n      ver: \"1\",\n      sender: \"remote\",\n      action: \"posts.find\",\n      id: \"123\",\n      params: {\n        limit: 5\n      },\n      meta: {\n        b: 100\n      },\n      parentID: \"555\",\n      caller: null,\n      level: 5,\n      metrics: true,\n      requestID: \"123456\",\n      timeout: 567\n    };\n    const res = await transit.messageHandler(\"REQ\", {\n      payload\n    });\n    expect(res).toBe(true);\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should call broker.fatal if nodeID is same but instanceID is different","suites":["Test Transit.messageHandler"],"updatePoint":{"line":362,"column":76},"line":362,"code":"  it(\"should call broker.fatal if nodeID is same but instanceID is different\", async () => {\n    broker.fatal = jest.fn();\n    await transit.messageHandler(\"INFO\", {\n      payload: {\n        ver: \"4\",\n        sender: \"node1\",\n        instanceID: \"abcdef\"\n      }\n    });\n    expect(broker.fatal).toHaveBeenCalledTimes(1);\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should skip own packets","suites":["Test Transit.messageHandler"],"updatePoint":{"line":373,"column":29},"line":373,"code":"  it(\"should skip own packets\", async () => {\n    broker.fatal = jest.fn();\n    const res = await transit.messageHandler(\"INFO\", {\n      payload: {\n        ver: \"4\",\n        sender: \"node1\",\n        instanceID: broker.instanceID\n      }\n    });\n    expect(res).toBe(false);\n    expect(broker.fatal).toHaveBeenCalledTimes(0);\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should call requestHandler if topic is 'REQ' ","suites":["Test Transit.messageHandler"],"updatePoint":{"line":385,"column":51},"line":385,"code":"  it(\"should call requestHandler if topic is 'REQ' \", async () => {\n    transit.requestHandler = jest.fn();\n    let payload = {\n      ver: \"4\",\n      sender: \"remote\",\n      action: \"posts.find\",\n      id: \"123\",\n      params: {\n        limit: 5\n      },\n      meta: {\n        b: 100\n      },\n      parentID: \"555\",\n      caller: null,\n      level: 5,\n      metrics: true,\n      requestID: \"123456\",\n      timeout: 567\n    };\n    await transit.messageHandler(\"REQ\", {\n      payload\n    });\n    expect(transit.requestHandler).toHaveBeenCalledTimes(1);\n    expect(transit.requestHandler).toHaveBeenCalledWith(payload);\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should call requestHandler if topic is 'REQ' && sender is itself","suites":["Test Transit.messageHandler"],"updatePoint":{"line":411,"column":70},"line":411,"code":"  it(\"should call requestHandler if topic is 'REQ' && sender is itself\", async () => {\n    transit.requestHandler = jest.fn();\n    let payload = {\n      ver: \"4\",\n      sender: broker.nodeID,\n      action: \"posts.find\",\n      id: \"123\",\n      params: {\n        limit: 5\n      },\n      meta: {\n        b: 100\n      },\n      parentID: \"555\",\n      caller: null,\n      level: 5,\n      metrics: true,\n      requestID: \"123456\",\n      timeout: 567\n    };\n    await transit.messageHandler(\"REQ\", {\n      payload\n    });\n    expect(transit.requestHandler).toHaveBeenCalledTimes(1);\n    expect(transit.requestHandler).toHaveBeenCalledWith(payload);\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should call responseHandler if topic is 'RES' ","suites":["Test Transit.messageHandler"],"updatePoint":{"line":437,"column":52},"line":437,"code":"  it(\"should call responseHandler if topic is 'RES' \", async () => {\n    transit.responseHandler = jest.fn();\n    let payload = {\n      ver: \"4\",\n      sender: \"remote\",\n      id: \"12345\"\n    };\n    await transit.messageHandler(\"RES\", {\n      payload\n    });\n    expect(transit.responseHandler).toHaveBeenCalledTimes(1);\n    expect(transit.responseHandler).toHaveBeenCalledWith(payload);\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should call responseHandler if topic is 'RES' && sender is itself","suites":["Test Transit.messageHandler"],"updatePoint":{"line":450,"column":71},"line":450,"code":"  it(\"should call responseHandler if topic is 'RES' && sender is itself\", async () => {\n    transit.responseHandler = jest.fn();\n    let payload = {\n      ver: \"4\",\n      sender: broker.nodeID,\n      id: \"12345\"\n    };\n    await transit.messageHandler(\"RES\", {\n      payload\n    });\n    expect(transit.responseHandler).toHaveBeenCalledTimes(1);\n    expect(transit.responseHandler).toHaveBeenCalledWith(payload);\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should call eventHandler if topic is 'EVENT' ","suites":["Test Transit.messageHandler"],"updatePoint":{"line":463,"column":51},"line":463,"code":"  it(\"should call eventHandler if topic is 'EVENT' \", async () => {\n    transit.eventHandler = jest.fn();\n    let payload = {\n      ver: \"4\",\n      sender: \"remote\",\n      event: \"user.created\",\n      data: \"John Doe\"\n    };\n    await transit.messageHandler(\"EVENT\", {\n      payload\n    });\n    expect(transit.eventHandler).toHaveBeenCalledTimes(1);\n    expect(transit.eventHandler).toHaveBeenCalledWith(payload);\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should call eventHandler if topic is 'EVENT' && sender is itself","suites":["Test Transit.messageHandler"],"updatePoint":{"line":477,"column":70},"line":477,"code":"  it(\"should call eventHandler if topic is 'EVENT' && sender is itself\", async () => {\n    transit.eventHandler = jest.fn();\n    let payload = {\n      ver: \"4\",\n      sender: broker.nodeID,\n      event: \"user.created\",\n      data: \"John Doe\"\n    };\n    await transit.messageHandler(\"EVENT\", {\n      payload\n    });\n    expect(transit.eventHandler).toHaveBeenCalledTimes(1);\n    expect(transit.eventHandler).toHaveBeenCalledWith(payload);\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should call sendNodeInfo if topic is 'DISCOVER' ","suites":["Test Transit.messageHandler"],"updatePoint":{"line":491,"column":54},"line":491,"code":"  it(\"should call sendNodeInfo if topic is 'DISCOVER' \", async () => {\n    broker.registry.nodes.processNodeInfo = jest.fn();\n    transit.discoverer.sendLocalNodeInfo = jest.fn();\n    let payload = {\n      ver: \"4\",\n      sender: \"remote\"\n    };\n    await transit.messageHandler(\"DISCOVER\", {\n      payload\n    });\n    expect(transit.discoverer.sendLocalNodeInfo).toHaveBeenCalledTimes(1);\n    expect(transit.discoverer.sendLocalNodeInfo).toHaveBeenCalledWith(\"remote\");\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should call broker.registry.nodes.processNodeInfo if topic is 'INFO' ","suites":["Test Transit.messageHandler"],"updatePoint":{"line":504,"column":75},"line":504,"code":"  it(\"should call broker.registry.nodes.processNodeInfo if topic is 'INFO' \", async () => {\n    transit.discoverer.processRemoteNodeInfo = jest.fn();\n    let payload = {\n      ver: \"4\",\n      sender: \"remote\",\n      services: []\n    };\n    await transit.messageHandler(\"INFO\", {\n      payload\n    });\n    expect(transit.discoverer.processRemoteNodeInfo).toHaveBeenCalledTimes(1);\n    expect(transit.discoverer.processRemoteNodeInfo).toHaveBeenCalledWith(\"remote\", payload);\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should call broker.registry.disconnected if topic is 'DISCONNECT' ","suites":["Test Transit.messageHandler"],"updatePoint":{"line":517,"column":72},"line":517,"code":"  it(\"should call broker.registry.disconnected if topic is 'DISCONNECT' \", async () => {\n    transit.discoverer.remoteNodeDisconnected = jest.fn();\n    let payload = {\n      ver: \"4\",\n      sender: \"remote\"\n    };\n    await transit.messageHandler(\"DISCONNECT\", {\n      payload\n    });\n    expect(transit.discoverer.remoteNodeDisconnected).toHaveBeenCalledTimes(1);\n    expect(transit.discoverer.remoteNodeDisconnected).toHaveBeenCalledWith(\"remote\", false);\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should call broker.registry.nodeHeartbeat if topic is 'HEARTBEAT' ","suites":["Test Transit.messageHandler"],"updatePoint":{"line":529,"column":72},"line":529,"code":"  it(\"should call broker.registry.nodeHeartbeat if topic is 'HEARTBEAT' \", async () => {\n    transit.discoverer.heartbeatReceived = jest.fn();\n    let payload = {\n      ver: \"4\",\n      sender: \"remote\",\n      cpu: 100\n    };\n    await transit.messageHandler(\"HEARTBEAT\", {\n      payload\n    });\n    expect(transit.discoverer.heartbeatReceived).toHaveBeenCalledTimes(1);\n    expect(transit.discoverer.heartbeatReceived).toHaveBeenCalledWith(\"remote\", payload);\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should call broker.registry.nodes.heartbeat if topic is 'PING' ","suites":["Test Transit.messageHandler"],"updatePoint":{"line":542,"column":69},"line":542,"code":"  it(\"should call broker.registry.nodes.heartbeat if topic is 'PING' \", async () => {\n    transit.sendPong = jest.fn();\n    let payload = {\n      ver: \"4\",\n      sender: \"remote\",\n      time: 1234567\n    };\n    await transit.messageHandler(\"PING\", {\n      payload\n    });\n    expect(transit.sendPong).toHaveBeenCalledTimes(1);\n    expect(transit.sendPong).toHaveBeenCalledWith(payload);\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should call broker.registry.nodes.heartbeat if topic is 'PONG' ","suites":["Test Transit.messageHandler"],"updatePoint":{"line":555,"column":69},"line":555,"code":"  it(\"should call broker.registry.nodes.heartbeat if topic is 'PONG' \", async () => {\n    transit.processPong = jest.fn();\n    let payload = {\n      ver: \"4\",\n      sender: \"remote\",\n      time: 1234567,\n      arrived: 7654321\n    };\n    await transit.messageHandler(\"PONG\", {\n      payload\n    });\n    expect(transit.processPong).toHaveBeenCalledTimes(1);\n    expect(transit.processPong).toHaveBeenCalledWith(payload);\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should skip processing if sender is itself","suites":["Test Transit.messageHandler"],"updatePoint":{"line":569,"column":48},"line":569,"code":"  it(\"should skip processing if sender is itself\", async () => {\n    transit.sendPong = jest.fn();\n    let payload = {\n      ver: \"4\",\n      sender: broker.nodeID,\n      time: 1234567\n    };\n    await transit.messageHandler(\"PING\", {\n      payload\n    });\n    expect(transit.sendPong).toHaveBeenCalledTimes(0);\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should not create packet if broker is not started yet","suites":["Test Transit.eventHandler"],"updatePoint":{"line":590,"column":59},"line":590,"code":"  it(\"should not create packet if broker is not started yet\", async () => {\n    broker.emitLocalServices.mockClear();\n    broker.started = false;\n    await transit.eventHandler({\n      id: \"event-12345\",\n      requestID: \"event-req-12345\",\n      parentID: \"event-parent-67890\",\n      event: \"user.created\",\n      data: {\n        a: 5\n      },\n      groups: [\"users\"],\n      sender: \"node-1\",\n      broadcast: true\n    });\n    expect(broker.emitLocalServices).toHaveBeenCalledTimes(0);\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should create packet","suites":["Test Transit.eventHandler"],"updatePoint":{"line":607,"column":26},"line":607,"code":"  it(\"should create packet\", async () => {\n    broker.emitLocalServices.mockClear();\n    broker.started = true;\n    await transit.eventHandler({\n      id: \"event-12345\",\n      requestID: \"event-req-12345\",\n      parentID: \"event-parent-67890\",\n      event: \"user.created\",\n      data: {\n        a: 5\n      },\n      groups: [\"users\"],\n      sender: \"node-1\",\n      broadcast: true\n    });\n    expect(broker.emitLocalServices).toHaveBeenCalledTimes(1);\n    const ctx = broker.emitLocalServices.mock.calls[0][0];\n    expect(broker.emitLocalServices).toHaveBeenCalledWith(ctx);\n    expect(ctx.toJSON()).toEqual({\n      id: \"event-12345\",\n      ackID: null,\n      cachedResult: false,\n      caller: undefined,\n      eventGroups: [\"users\"],\n      eventName: \"user.created\",\n      eventType: \"broadcast\",\n      level: undefined,\n      meta: {},\n      needAck: null,\n      nodeID: \"node-1\",\n      options: {\n        retries: null,\n        timeout: null\n      },\n      params: {\n        a: 5\n      },\n      parentID: \"event-parent-67890\",\n      requestID: \"event-req-12345\",\n      span: null,\n      tracing: false\n    });\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should send back error if broker is not started yet","suites":["Test Transit.requestHandler"],"updatePoint":{"line":667,"column":57},"line":667,"code":"  it(\"should send back error if broker is not started yet\", () => {\n    broker.started = false;\n    return transit.requestHandler({\n      sender: \"node2\",\n      id,\n      meta: {\n        a: 5\n      },\n      action: \"posts.find\"\n    }).catch(protectReject).then(() => {\n      expect(transit.sendResponse).toHaveBeenCalledTimes(1);\n      expect(transit.sendResponse).toHaveBeenCalledWith(\"node2\", id, {\n        a: 5\n      }, null, expect.any(Error));\n      expect(transit._handleIncomingRequestStream).toHaveBeenCalledTimes(0);\n      broker.started = true;\n    });\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should not call sendResponse if stream chunk is received","suites":["Test Transit.requestHandler"],"updatePoint":{"line":685,"column":62},"line":685,"code":"  it(\"should not call sendResponse if stream chunk is received\", () => {\n    transit.sendResponse.mockClear();\n    transit._handleIncomingRequestStream = jest.fn(() => null);\n    const payload = {\n      sender: \"node2\",\n      id,\n      meta: {\n        a: 5\n      },\n      action: \"posts.find\",\n      stream: true,\n      seq: 4\n    };\n    return transit.requestHandler(payload).catch(protectReject).then(() => {\n      expect(transit.sendResponse).toHaveBeenCalledTimes(0);\n      expect(transit._handleIncomingRequestStream).toHaveBeenCalledTimes(1);\n      expect(transit._handleIncomingRequestStream).toHaveBeenCalledWith(payload);\n    });\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should call sendResponse with data","suites":["Test Transit.requestHandler"],"updatePoint":{"line":704,"column":40},"line":704,"code":"  it(\"should call sendResponse with data\", () => {\n    transit.sendResponse.mockClear();\n\n    transit._handleIncomingRequestStream.mockClear();\n\n    let data = {\n      id: 5,\n      name: \"John\"\n    };\n    ep.action.handler = jest.fn(() => Promise.resolve(data));\n    const payload = {\n      sender: \"node2\",\n      id,\n      meta: {\n        a: 5\n      },\n      action: \"posts.find\",\n      params: {\n        name: \"John\"\n      },\n      parentID: \"00000\",\n      requestID: \"12345-54321\",\n      caller: \"users.list\",\n      level: 3,\n      tracing: true,\n      timeout: 230\n    };\n    return transit.requestHandler(payload).catch(protectReject).then(() => {\n      expect(transit._handleIncomingRequestStream).toHaveBeenCalledTimes(0);\n      expect(transit.broker._getLocalActionEndpoint).toHaveBeenCalledTimes(1);\n      expect(transit.broker._getLocalActionEndpoint).toHaveBeenCalledWith(\"posts.find\");\n      expect(ep.action.handler).toHaveBeenCalledTimes(1);\n      expect(ep.action.handler).toHaveBeenCalledWith(expect.any(Context));\n      const ctx = ep.action.handler.mock.calls[0][0];\n      expect(ctx).toBeInstanceOf(Context);\n      expect(ctx.id).toBe(id);\n      expect(ctx.endpoint).toBe(ep);\n      expect(ctx.action).toBe(ep.action);\n      expect(ctx.params).toEqual({\n        name: \"John\"\n      });\n      expect(ctx.parentID).toBe(\"00000\");\n      expect(ctx.requestID).toBe(\"12345-54321\");\n      expect(ctx.caller).toBe(\"users.list\");\n      expect(ctx.meta).toEqual({\n        a: 5\n      });\n      expect(ctx.level).toBe(3);\n      expect(ctx.tracing).toBe(true);\n      expect(ctx.nodeID).toBe(\"node2\");\n      expect(ctx.options.timeout).toBe(230);\n      expect(transit.sendResponse).toHaveBeenCalledTimes(1);\n      expect(transit.sendResponse).toHaveBeenCalledWith(\"node2\", id, {\n        a: 5\n      }, data, null);\n    });\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should call sendResponse with correct tracing property","suites":["Test Transit.requestHandler"],"updatePoint":{"line":761,"column":60},"line":761,"code":"  it(\"should call sendResponse with correct tracing property\", () => {\n    transit.sendResponse.mockClear();\n\n    transit.broker._getLocalActionEndpoint.mockClear();\n\n    transit._handleIncomingRequestStream.mockClear();\n\n    ep.action.handler.mockClear();\n    let data = {\n      id: 5,\n      name: \"John\"\n    };\n    ep.action.handler = jest.fn(() => Promise.resolve(data));\n    const payload = {\n      sender: \"node2\",\n      id,\n      meta: {\n        a: 5\n      },\n      action: \"posts.find\",\n      params: {\n        name: \"John\"\n      },\n      parentID: \"00000\",\n      requestID: \"12345-54321\",\n      caller: \"users.list\",\n      level: 3,\n      tracing: null,\n      timeout: 230\n    };\n    return transit.requestHandler(payload).catch(protectReject).then(() => {\n      expect(transit._handleIncomingRequestStream).toHaveBeenCalledTimes(0);\n      expect(transit.broker._getLocalActionEndpoint).toHaveBeenCalledTimes(1);\n      expect(transit.broker._getLocalActionEndpoint).toHaveBeenCalledWith(\"posts.find\");\n      expect(ep.action.handler).toHaveBeenCalledTimes(1);\n      expect(ep.action.handler).toHaveBeenCalledWith(expect.any(Context));\n      const ctx = ep.action.handler.mock.calls[0][0];\n      expect(ctx).toBeInstanceOf(Context);\n      expect(ctx.id).toBe(id);\n      expect(ctx.endpoint).toBe(ep);\n      expect(ctx.action).toBe(ep.action);\n      expect(ctx.params).toEqual({\n        name: \"John\"\n      });\n      expect(ctx.parentID).toBe(\"00000\");\n      expect(ctx.requestID).toBe(\"12345-54321\");\n      expect(ctx.caller).toBe(\"users.list\");\n      expect(ctx.meta).toEqual({\n        a: 5\n      });\n      expect(ctx.level).toBe(3);\n      expect(ctx.tracing).toBeNull();\n      expect(ctx.nodeID).toBe(\"node2\");\n      expect(ctx.options.timeout).toBe(230);\n      expect(transit.sendResponse).toHaveBeenCalledTimes(1);\n      expect(transit.sendResponse).toHaveBeenCalledWith(\"node2\", id, {\n        a: 5\n      }, data, null);\n    });\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should call sendResponse with error","suites":["Test Transit.requestHandler"],"updatePoint":{"line":821,"column":41},"line":821,"code":"  it(\"should call sendResponse with error\", () => {\n    transit.sendResponse.mockClear();\n\n    broker._getLocalActionEndpoint.mockClear();\n\n    const pass = {\n      streaming: true\n    };\n    transit._handleIncomingRequestStream = jest.fn(() => pass);\n    let err = new Error(\"Something went wrong\");\n    ep.action.handler = jest.fn(() => Promise.reject(err));\n    const payload = {\n      sender: \"node2\",\n      id,\n      meta: {\n        a: 5\n      },\n      action: \"posts.find\",\n      parentID: \"00000\",\n      requestID: \"12345-54321\",\n      caller: null,\n      level: 3,\n      stream: false,\n      tracing: true,\n      timeout: 230\n    };\n    return transit.requestHandler(payload).catch(protectReject).then(() => {\n      expect(transit._handleIncomingRequestStream).toHaveBeenCalledTimes(1);\n      expect(transit._handleIncomingRequestStream).toHaveBeenCalledWith(payload);\n      expect(transit.broker._getLocalActionEndpoint).toHaveBeenCalledTimes(1);\n      expect(transit.broker._getLocalActionEndpoint).toHaveBeenCalledWith(\"posts.find\");\n      expect(ep.action.handler).toHaveBeenCalledTimes(1);\n      expect(ep.action.handler).toHaveBeenCalledWith(expect.any(Context));\n      const ctx = ep.action.handler.mock.calls[0][0];\n      expect(ctx).toBeInstanceOf(Context);\n      expect(ctx.id).toBe(id);\n      expect(ctx.endpoint).toBe(ep);\n      expect(ctx.action).toBe(ep.action);\n      expect(ctx.params).toEqual({\n        streaming: true\n      });\n      expect(ctx.parentID).toBe(\"00000\");\n      expect(ctx.requestID).toBe(\"12345-54321\");\n      expect(ctx.caller).toBeNull();\n      expect(ctx.meta).toEqual({\n        a: 5\n      });\n      expect(ctx.level).toBe(3);\n      expect(ctx.tracing).toBe(true);\n      expect(ctx.nodeID).toBe(\"node2\");\n      expect(ctx.options.timeout).toBe(230);\n      expect(transit.sendResponse).toHaveBeenCalledTimes(1);\n      expect(transit.sendResponse).toHaveBeenCalledWith(\"node2\", id, {\n        a: 5\n      }, null, err);\n    });\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should return false","suites":["Test Transit._handleIncomingRequestStream","Test with non-stream data"],"updatePoint":{"line":894,"column":27},"line":894,"code":"    it(\"should return false\", () => {\n      const pass = transit._handleIncomingRequestStream(Object.assign({}, payload, {\n        stream: false,\n        seq: 0\n      }));\n\n      expect(pass).toBe(false);\n    });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should return false","suites":["Test Transit._handleIncomingRequestStream","Test with non-stream data"],"updatePoint":{"line":902,"column":27},"line":902,"code":"    it(\"should return false\", () => {\n      const pass = transit._handleIncomingRequestStream(Object.assign({}, payload, {\n        stream: false\n      }));\n\n      expect(pass).toBe(false);\n    });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should return false","suites":["Test Transit._handleIncomingRequestStream","Test with non-stream data"],"updatePoint":{"line":909,"column":27},"line":909,"code":"    it(\"should return false\", () => {\n      const pass = transit._handleIncomingRequestStream(payload);\n\n      expect(pass).toBe(false);\n    });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should create new stream","suites":["Test Transit._handleIncomingRequestStream","Test with sequential chunks"],"updatePoint":{"line":923,"column":32},"line":923,"code":"    it(\"should create new stream\", () => {\n      const pass = transit._handleIncomingRequestStream(Object.assign({}, payload, {\n        stream: true,\n        seq: 0\n      }));\n\n      expect(pass).toBeInstanceOf(Transform);\n      pass.on(\"data\", data => STORE.push(data.toString()));\n      pass.on(\"error\", () => STORE.push(\"-- ERROR --\"));\n      pass.on(\"end\", () => STORE.push(\"-- END --\"));\n    });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should add chunks","suites":["Test Transit._handleIncomingRequestStream","Test with sequential chunks"],"updatePoint":{"line":934,"column":25},"line":934,"code":"    it(\"should add chunks\", () => {\n      expect(transit._handleIncomingRequestStream(Object.assign({}, payload, {\n        stream: true,\n        seq: 1,\n        params: \"CHUNK-1\"\n      }))).toBeNull();\n      expect(transit._handleIncomingRequestStream(Object.assign({}, payload, {\n        stream: true,\n        seq: 2,\n        params: \"CHUNK-2\"\n      }))).toBeNull();\n      expect(transit._handleIncomingRequestStream(Object.assign({}, payload, {\n        stream: true,\n        seq: 3,\n        params: \"CHUNK-3\"\n      }))).toBeNull();\n      expect(STORE).toEqual([\"CHUNK-1\", \"CHUNK-2\", \"CHUNK-3\"]);\n    });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should close the stream","suites":["Test Transit._handleIncomingRequestStream","Test with sequential chunks"],"updatePoint":{"line":952,"column":31},"line":952,"code":"    it(\"should close the stream\", () => {\n      expect(transit._handleIncomingRequestStream(Object.assign({}, payload, {\n        stream: false,\n        seq: 4\n      }))).toBeNull();\n      return broker.Promise.delay(100).then(() => {\n        expect(STORE).toEqual([\"CHUNK-1\", \"CHUNK-2\", \"CHUNK-3\", \"-- END --\"]);\n      });\n    });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should create new stream","suites":["Test Transit._handleIncomingRequestStream","Test with sequential chunks & error"],"updatePoint":{"line":971,"column":32},"line":971,"code":"    it(\"should create new stream\", () => {\n      const pass = transit._handleIncomingRequestStream(Object.assign({}, payload, {\n        stream: true,\n        seq: 0\n      }));\n\n      expect(pass).toBeInstanceOf(Transform);\n      pass.on(\"data\", data => STORE.push(data.toString()));\n      pass.on(\"error\", errorHandler);\n      pass.on(\"end\", () => STORE.push(\"-- END --\"));\n    });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should add chunks","suites":["Test Transit._handleIncomingRequestStream","Test with sequential chunks & error"],"updatePoint":{"line":982,"column":25},"line":982,"code":"    it(\"should add chunks\", () => {\n      expect(transit._handleIncomingRequestStream(Object.assign({}, payload, {\n        stream: true,\n        seq: 1,\n        params: \"CHUNK-1\"\n      }))).toBeNull();\n      expect(transit._handleIncomingRequestStream(Object.assign({}, payload, {\n        stream: true,\n        seq: 2,\n        params: \"CHUNK-2\"\n      }))).toBeNull();\n      expect(STORE).toEqual([\"CHUNK-1\", \"CHUNK-2\"]);\n    });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should got error","suites":["Test Transit._handleIncomingRequestStream","Test with sequential chunks & error"],"updatePoint":{"line":995,"column":24},"line":995,"code":"    it(\"should got error\", () => {\n      expect(transit._handleIncomingRequestStream(Object.assign({}, payload, {\n        stream: false,\n        seq: 3,\n        meta: {\n          $streamError: {\n            name: \"MoleculerError\",\n            message: \"Some stream error\"\n          }\n        }\n      }))).toBeNull();\n      return broker.Promise.delay(100).then(() => {\n        expect(STORE).toEqual([\"CHUNK-1\", \"CHUNK-2\", \"-- ERROR --\", \"-- END --\"]);\n        expect(errorHandler).toHaveBeenCalledTimes(1);\n        expect(errorHandler.mock.calls[0][0]).toBeInstanceOf(E.MoleculerError);\n      });\n    });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should create new stream","suites":["Test Transit._handleIncomingRequestStream","Test with random order inside chunks"],"updatePoint":{"line":1021,"column":32},"line":1021,"code":"    it(\"should create new stream\", () => {\n      const pass = transit._handleIncomingRequestStream(Object.assign({}, payload, {\n        stream: true,\n        seq: 0\n      }));\n\n      expect(pass).toBeInstanceOf(Transform);\n      pass.on(\"data\", data => STORE.push(data.toString()));\n      pass.on(\"error\", () => STORE.push(\"-- ERROR --\"));\n      pass.on(\"end\", () => STORE.push(\"-- END --\"));\n    });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should reorder chunks","suites":["Test Transit._handleIncomingRequestStream","Test with random order inside chunks"],"updatePoint":{"line":1032,"column":29},"line":1032,"code":"    it(\"should reorder chunks\", () => {\n      expect(transit._handleIncomingRequestStream(Object.assign({}, payload, {\n        stream: true,\n        seq: 1,\n        params: \"CHUNK-1\"\n      }))).toBeNull();\n      expect(transit._handleIncomingRequestStream(Object.assign({}, payload, {\n        stream: true,\n        seq: 4,\n        params: \"CHUNK-4\"\n      }))).toBeNull();\n      expect(transit._handleIncomingRequestStream(Object.assign({}, payload, {\n        stream: true,\n        seq: 3,\n        params: \"CHUNK-3\"\n      }))).toBeNull();\n      expect(transit._handleIncomingRequestStream(Object.assign({}, payload, {\n        stream: true,\n        seq: 2,\n        params: \"CHUNK-2\"\n      }))).toBeNull();\n      expect(transit._handleIncomingRequestStream(Object.assign({}, payload, {\n        stream: true,\n        seq: 6,\n        params: \"CHUNK-6\"\n      }))).toBeNull();\n      expect(transit._handleIncomingRequestStream(Object.assign({}, payload, {\n        stream: true,\n        seq: 5,\n        params: \"CHUNK-5\"\n      }))).toBeNull();\n      expect(transit._handleIncomingRequestStream(Object.assign({}, payload, {\n        stream: false,\n        seq: 7\n      }))).toBeNull();\n      return broker.Promise.delay(100).then(() => {\n        expect(STORE).toEqual([\"CHUNK-1\", \"CHUNK-2\", \"CHUNK-3\", \"CHUNK-4\", \"CHUNK-5\", \"CHUNK-6\", \"-- END --\"]);\n      });\n    });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should create new stream","suites":["Test Transit._handleIncomingRequestStream","Test with wrong first & last chunks orders"],"updatePoint":{"line":1080,"column":32},"line":1080,"code":"    it(\"should create new stream\", () => {\n      const pass = transit._handleIncomingRequestStream(Object.assign({}, payload, {\n        stream: true,\n        seq: 1,\n        params: \"CHUNK-1\"\n      }));\n\n      expect(pass).toBeInstanceOf(Transform);\n      pass.on(\"data\", data => STORE.push(data.toString()));\n      pass.on(\"error\", () => STORE.push(\"-- ERROR --\"));\n      pass.on(\"end\", () => STORE.push(\"-- END --\"));\n    });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should reorder chunks","suites":["Test Transit._handleIncomingRequestStream","Test with wrong first & last chunks orders"],"updatePoint":{"line":1092,"column":29},"line":1092,"code":"    it(\"should reorder chunks\", () => {\n      expect(transit._handleIncomingRequestStream(Object.assign({}, payload, {\n        stream: true,\n        seq: 0\n      }))).toBeNull();\n      expect(transit._handleIncomingRequestStream(Object.assign({}, payload, {\n        stream: true,\n        seq: 4,\n        params: \"CHUNK-4\"\n      }))).toBeNull();\n      expect(transit._handleIncomingRequestStream(Object.assign({}, payload, {\n        stream: true,\n        seq: 3,\n        params: \"CHUNK-3\"\n      }))).toBeNull();\n      expect(transit._handleIncomingRequestStream(Object.assign({}, payload, {\n        stream: true,\n        seq: 2,\n        params: \"CHUNK-2\"\n      }))).toBeNull();\n      expect(transit._handleIncomingRequestStream(Object.assign({}, payload, {\n        stream: false,\n        seq: 7\n      }))).toBeNull();\n      expect(transit._handleIncomingRequestStream(Object.assign({}, payload, {\n        stream: true,\n        seq: 6,\n        params: \"CHUNK-6\"\n      }))).toBeNull();\n      expect(transit._handleIncomingRequestStream(Object.assign({}, payload, {\n        stream: true,\n        seq: 5,\n        params: \"CHUNK-5\"\n      }))).toBeNull();\n      return broker.Promise.delay(100).then(() => {\n        expect(STORE).toEqual([\"CHUNK-1\", \"CHUNK-2\", \"CHUNK-3\", \"CHUNK-4\", \"CHUNK-5\", \"CHUNK-6\", \"-- END --\"]);\n      });\n    });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should call errorRegenerator.restore method","suites":["Test Transit._createErrFromPayload"],"updatePoint":{"line":1141,"column":49},"line":1141,"code":"  it(\"should call errorRegenerator.restore method\", () => {\n    const plainError = {\n      name: \"ServiceNotFoundError\",\n      code: 404,\n      type: \"SERVICE_NOT_FOUND\",\n      data: {\n        a: 5\n      },\n      retryable: true,\n      nodeID: \"node-1234\",\n      stack: \"error stack\"\n    };\n    const payload = {};\n    broker.errorRegenerator.restore = jest.fn();\n\n    broker.transit._createErrFromPayload(plainError, payload);\n\n    expect(broker.errorRegenerator.restore).toHaveBeenCalled();\n    expect(broker.errorRegenerator.restore).toHaveBeenCalledWith(plainError, payload);\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should not call resolve or reject if pending req is not exists","suites":["Test Transit.responseHandler"],"updatePoint":{"line":1171,"column":68},"line":1171,"code":"  it(\"should not call resolve or reject if pending req is not exists\", () => {\n    let req = {\n      resolve: jest.fn(),\n      reject: jest.fn()\n    };\n    let payload = {\n      ver: \"4\",\n      sender: \"remote\",\n      id\n    };\n    transit.responseHandler(payload);\n    expect(req.resolve).toHaveBeenCalledTimes(0);\n    expect(req.reject).toHaveBeenCalledTimes(0);\n    expect(transit._handleIncomingResponseStream).toHaveBeenCalledTimes(0);\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should call resolve with data","suites":["Test Transit.responseHandler"],"updatePoint":{"line":1186,"column":35},"line":1186,"code":"  it(\"should call resolve with data\", () => {\n    let data = {\n      id: 5,\n      name: \"John\"\n    };\n    let req = {\n      action: {\n        name: \"posts.find\"\n      },\n      ctx: {\n        nodeID: null\n      },\n      resolve: jest.fn(() => Promise.resolve()),\n      reject: jest.fn(() => Promise.resolve())\n    };\n    transit.pendingRequests.set(id, req);\n    let payload = {\n      ver: \"4\",\n      sender: \"remote\",\n      id,\n      success: true,\n      data,\n      stream: false\n    };\n    transit.responseHandler(payload);\n    expect(req.resolve).toHaveBeenCalledTimes(1);\n    expect(req.resolve).toHaveBeenCalledWith(data);\n    expect(req.reject).toHaveBeenCalledTimes(0);\n    expect(req.ctx.nodeID).toBe(\"remote\");\n    expect(transit.pendingRequests.size).toBe(0);\n    expect(transit._handleIncomingResponseStream).toHaveBeenCalledTimes(1);\n    expect(transit._handleIncomingResponseStream).toHaveBeenCalledWith(payload, req);\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should call reject with error","suites":["Test Transit.responseHandler"],"updatePoint":{"line":1219,"column":35},"line":1219,"code":"  it(\"should call reject with error\", () => {\n    transit._handleIncomingResponseStream.mockClear();\n\n    let err;\n    let req = {\n      action: {\n        name: \"posts.find\"\n      },\n      ctx: {\n        nodeID: null\n      },\n      resolve: jest.fn(),\n      reject: jest.fn(e => err = e)\n    };\n    transit.pendingRequests.set(id, req);\n    let payload = {\n      ver: \"4\",\n      sender: \"remote\",\n      id,\n      success: false,\n      error: {\n        name: \"ValidationError\",\n        code: 422,\n        retryable: true,\n        data: {\n          a: 5\n        },\n        stack: \"STACK-TRACE\"\n      }\n    };\n    transit.responseHandler(payload);\n    expect(transit._handleIncomingResponseStream).toHaveBeenCalledTimes(0);\n    expect(req.reject).toHaveBeenCalledTimes(1);\n    expect(req.reject).toHaveBeenCalledWith(err);\n    expect(req.resolve).toHaveBeenCalledTimes(0);\n    expect(req.ctx.nodeID).toBe(\"remote\");\n    expect(err).toBeInstanceOf(Error);\n    expect(err).toBeInstanceOf(E.ValidationError);\n    expect(err.name).toBe(\"ValidationError\");\n    expect(err.code).toBe(422);\n    expect(err.retryable).toBe(true);\n    expect(err.data).toEqual({\n      a: 5\n    });\n    expect(err.stack).toBe(\"STACK-TRACE\");\n    expect(err.nodeID).toBe(\"remote\");\n    expect(transit.pendingRequests.size).toBe(0);\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should call reject with custom error","suites":["Test Transit.responseHandler"],"updatePoint":{"line":1267,"column":42},"line":1267,"code":"  it(\"should call reject with custom error\", () => {\n    transit._handleIncomingResponseStream.mockClear();\n\n    let err;\n    let req = {\n      action: {\n        name: \"posts.find\"\n      },\n      ctx: {\n        nodeID: null\n      },\n      resolve: jest.fn(),\n      reject: jest.fn(e => err = e)\n    };\n    transit.pendingRequests.set(id, req);\n    let payload = {\n      ver: \"4\",\n      sender: \"remote\",\n      id,\n      success: false,\n      error: {\n        name: \"MyCustomError\",\n        code: 456,\n        retryable: true,\n        data: {\n          a: 5\n        },\n        stack: \"MY-STACK-TRACE\"\n      }\n    };\n    transit.responseHandler(payload);\n    expect(transit._handleIncomingResponseStream).toHaveBeenCalledTimes(0);\n    expect(req.reject).toHaveBeenCalledTimes(1);\n    expect(req.reject).toHaveBeenCalledWith(err);\n    expect(req.resolve).toHaveBeenCalledTimes(0);\n    expect(req.ctx.nodeID).toBe(\"remote\");\n    expect(err).toBeInstanceOf(Error);\n    expect(err.name).toBe(\"MyCustomError\");\n    expect(err.code).toBe(456);\n    expect(err.retryable).toBe(true);\n    expect(err.data).toEqual({\n      a: 5\n    });\n    expect(err.stack).toBe(\"MY-STACK-TRACE\");\n    expect(err.nodeID).toBe(\"remote\");\n    expect(transit.pendingRequests.size).toBe(0);\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should not call resolve if stream chunk is received","suites":["Test Transit.responseHandler"],"updatePoint":{"line":1314,"column":57},"line":1314,"code":"  it(\"should not call resolve if stream chunk is received\", () => {\n    transit._handleIncomingResponseStream = jest.fn(() => true);\n    let req = {\n      action: {\n        name: \"posts.find\"\n      },\n      ctx: {\n        nodeID: null\n      },\n      resolve: jest.fn(() => Promise.resolve()),\n      reject: jest.fn(() => Promise.resolve())\n    };\n    transit.pendingRequests.set(id, req);\n    let payload = {\n      ver: \"4\",\n      sender: \"remote\",\n      id,\n      success: true,\n      stream: true,\n      seq: 5\n    };\n    transit.responseHandler(payload);\n    expect(transit._handleIncomingResponseStream).toHaveBeenCalledTimes(1);\n    expect(transit._handleIncomingResponseStream).toHaveBeenCalledWith(payload, req);\n    expect(req.resolve).toHaveBeenCalledTimes(0);\n    expect(req.reject).toHaveBeenCalledTimes(0);\n    expect(transit.pendingRequests.size).toBe(1);\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should return false","suites":["Test Transit._handleIncomingResponseStream","Test with non-stream data"],"updatePoint":{"line":1368,"column":27},"line":1368,"code":"    it(\"should return false\", () => {\n      const pass = transit._handleIncomingResponseStream(Object.assign({}, payload, {\n        stream: false,\n        seq: 0\n      }), req);\n\n      expect(pass).toBe(false);\n    });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should return false","suites":["Test Transit._handleIncomingResponseStream","Test with non-stream data"],"updatePoint":{"line":1376,"column":27},"line":1376,"code":"    it(\"should return false\", () => {\n      const pass = transit._handleIncomingResponseStream(Object.assign({}, payload, {\n        stream: false\n      }), req);\n\n      expect(pass).toBe(false);\n    });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should return false","suites":["Test Transit._handleIncomingResponseStream","Test with non-stream data"],"updatePoint":{"line":1383,"column":27},"line":1383,"code":"    it(\"should return false\", () => {\n      const pass = transit._handleIncomingResponseStream(payload, req);\n\n      expect(pass).toBe(false);\n    });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should create new stream","suites":["Test Transit._handleIncomingResponseStream","Test with sequential chunks"],"updatePoint":{"line":1408,"column":32},"line":1408,"code":"    it(\"should create new stream\", () => {\n      expect(transit._handleIncomingResponseStream(Object.assign({}, payload, {\n        stream: true,\n        seq: 0\n      }), req)).toBe(true);\n      expect(req.resolve).toHaveBeenCalledTimes(1);\n      const pass = req.resolve.mock.calls[0][0];\n      expect(pass).toBeInstanceOf(Transform);\n      pass.on(\"data\", data => STORE.push(data.toString()));\n      pass.on(\"error\", () => STORE.push(\"-- ERROR --\"));\n      pass.on(\"end\", () => STORE.push(\"-- END --\"));\n    });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should add chunks","suites":["Test Transit._handleIncomingResponseStream","Test with sequential chunks"],"updatePoint":{"line":1420,"column":25},"line":1420,"code":"    it(\"should add chunks\", () => {\n      expect(transit._handleIncomingResponseStream(Object.assign({}, payload, {\n        stream: true,\n        seq: 1,\n        data: \"CHUNK-1\"\n      }), req)).toBe(true);\n      expect(transit._handleIncomingResponseStream(Object.assign({}, payload, {\n        stream: true,\n        seq: 2,\n        data: \"CHUNK-2\"\n      }), req)).toBe(true);\n      expect(transit._handleIncomingResponseStream(Object.assign({}, payload, {\n        stream: true,\n        seq: 3,\n        data: \"CHUNK-3\"\n      }), req)).toBe(true);\n      expect(STORE).toEqual([\"CHUNK-1\", \"CHUNK-2\", \"CHUNK-3\"]);\n    });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should close the stream","suites":["Test Transit._handleIncomingResponseStream","Test with sequential chunks"],"updatePoint":{"line":1438,"column":31},"line":1438,"code":"    it(\"should close the stream\", () => {\n      expect(transit._handleIncomingResponseStream(Object.assign({}, payload, {\n        stream: false,\n        seq: 4\n      }), req)).toBe(true);\n      return broker.Promise.delay(100).then(() => {\n        expect(STORE).toEqual([\"CHUNK-1\", \"CHUNK-2\", \"CHUNK-3\", \"-- END --\"]);\n      });\n    });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should create new stream","suites":["Test Transit._handleIncomingResponseStream","Test with sequential chunks & error"],"updatePoint":{"line":1468,"column":32},"line":1468,"code":"    it(\"should create new stream\", () => {\n      expect(transit._handleIncomingResponseStream(Object.assign({}, payload, {\n        stream: true,\n        seq: 0\n      }), req)).toBe(true);\n      expect(req.resolve).toHaveBeenCalledTimes(1);\n      const pass = req.resolve.mock.calls[0][0];\n      expect(pass).toBeInstanceOf(Transform);\n      pass.on(\"data\", data => STORE.push(data.toString()));\n      pass.on(\"error\", errorHandler);\n      pass.on(\"end\", () => STORE.push(\"-- END --\"));\n    });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should add chunks","suites":["Test Transit._handleIncomingResponseStream","Test with sequential chunks & error"],"updatePoint":{"line":1480,"column":25},"line":1480,"code":"    it(\"should add chunks\", () => {\n      expect(transit._handleIncomingResponseStream(Object.assign({}, payload, {\n        stream: true,\n        seq: 1,\n        data: \"CHUNK-1\"\n      }), req)).toBe(true);\n      expect(transit._handleIncomingResponseStream(Object.assign({}, payload, {\n        stream: true,\n        seq: 2,\n        data: \"CHUNK-2\"\n      }), req)).toBe(true);\n      expect(STORE).toEqual([\"CHUNK-1\", \"CHUNK-2\"]);\n    });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should got error","suites":["Test Transit._handleIncomingResponseStream","Test with sequential chunks & error"],"updatePoint":{"line":1493,"column":24},"line":1493,"code":"    it(\"should got error\", () => {\n      expect(transit._handleIncomingResponseStream(Object.assign({}, payload, {\n        success: false,\n        stream: false,\n        seq: 3,\n        error: {\n          name: \"MoleculerError\",\n          message: \"Some stream error\"\n        }\n      }), req)).toBe(true);\n      return broker.Promise.delay(100).then(() => {\n        expect(STORE).toEqual([\"CHUNK-1\", \"CHUNK-2\", \"-- ERROR --\", \"-- END --\"]);\n        expect(errorHandler).toHaveBeenCalledTimes(1);\n        expect(errorHandler.mock.calls[0][0]).toBeInstanceOf(E.MoleculerError);\n      });\n    });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should create new stream","suites":["Test Transit._handleIncomingResponseStream","Test with random order inside chunks"],"updatePoint":{"line":1530,"column":32},"line":1530,"code":"    it(\"should create new stream\", () => {\n      expect(transit._handleIncomingResponseStream(Object.assign({}, payload, {\n        stream: true,\n        seq: 0\n      }), req)).toBe(true);\n      expect(req.resolve).toHaveBeenCalledTimes(1);\n      const pass = req.resolve.mock.calls[0][0];\n      expect(pass).toBeInstanceOf(Transform);\n      pass.on(\"data\", data => STORE.push(data.toString()));\n      pass.on(\"error\", errorHandler);\n      pass.on(\"end\", () => STORE.push(\"-- END --\"));\n    });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should reorder chunks","suites":["Test Transit._handleIncomingResponseStream","Test with random order inside chunks"],"updatePoint":{"line":1542,"column":29},"line":1542,"code":"    it(\"should reorder chunks\", () => {\n      expect(transit._handleIncomingResponseStream(Object.assign({}, payload, {\n        stream: true,\n        seq: 1,\n        data: \"CHUNK-1\"\n      }), req)).toBe(true);\n      expect(transit._handleIncomingResponseStream(Object.assign({}, payload, {\n        stream: true,\n        seq: 4,\n        data: \"CHUNK-4\"\n      }), req)).toBe(true);\n      expect(transit._handleIncomingResponseStream(Object.assign({}, payload, {\n        stream: true,\n        seq: 3,\n        data: \"CHUNK-3\"\n      }), req)).toBe(true);\n      expect(transit._handleIncomingResponseStream(Object.assign({}, payload, {\n        stream: true,\n        seq: 2,\n        data: \"CHUNK-2\"\n      }), req)).toBe(true);\n      expect(transit._handleIncomingResponseStream(Object.assign({}, payload, {\n        stream: true,\n        seq: 6,\n        data: \"CHUNK-6\"\n      }), req)).toBe(true);\n      expect(transit._handleIncomingResponseStream(Object.assign({}, payload, {\n        stream: true,\n        seq: 5,\n        data: \"CHUNK-5\"\n      }), req)).toBe(true);\n      expect(transit._handleIncomingResponseStream(Object.assign({}, payload, {\n        stream: false,\n        seq: 7\n      }), req)).toBe(true);\n      return broker.Promise.delay(100).then(() => {\n        expect(STORE).toEqual([\"CHUNK-1\", \"CHUNK-2\", \"CHUNK-3\", \"CHUNK-4\", \"CHUNK-5\", \"CHUNK-6\", \"-- END --\"]);\n      });\n    });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should create new stream","suites":["Test Transit._handleIncomingResponseStream","Test with wrong first & last chunks orders"],"updatePoint":{"line":1602,"column":32},"line":1602,"code":"    it(\"should create new stream\", () => {\n      expect(transit._handleIncomingResponseStream(Object.assign({}, payload, {\n        stream: true,\n        seq: 1,\n        data: \"CHUNK-1\"\n      }), req)).toBe(true);\n      expect(req.resolve).toHaveBeenCalledTimes(1);\n      const pass = req.resolve.mock.calls[0][0];\n      expect(pass).toBeInstanceOf(Transform);\n      pass.on(\"data\", data => STORE.push(data.toString()));\n      pass.on(\"error\", errorHandler);\n      pass.on(\"end\", () => STORE.push(\"-- END --\"));\n    });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should reorder chunks","suites":["Test Transit._handleIncomingResponseStream","Test with wrong first & last chunks orders"],"updatePoint":{"line":1615,"column":29},"line":1615,"code":"    it(\"should reorder chunks\", () => {\n      expect(transit._handleIncomingResponseStream(Object.assign({}, payload, {\n        stream: true,\n        seq: 0\n      }), req)).toBe(true);\n      expect(transit._handleIncomingResponseStream(Object.assign({}, payload, {\n        stream: true,\n        seq: 4,\n        data: \"CHUNK-4\"\n      }), req)).toBe(true);\n      expect(transit._handleIncomingResponseStream(Object.assign({}, payload, {\n        stream: true,\n        seq: 3,\n        data: \"CHUNK-3\"\n      }), req)).toBe(true);\n      expect(transit._handleIncomingResponseStream(Object.assign({}, payload, {\n        stream: true,\n        seq: 2,\n        data: \"CHUNK-2\"\n      }), req)).toBe(true);\n      expect(transit._handleIncomingResponseStream(Object.assign({}, payload, {\n        stream: false,\n        seq: 7\n      }), req)).toBe(true);\n      expect(transit._handleIncomingResponseStream(Object.assign({}, payload, {\n        stream: true,\n        seq: 6,\n        data: \"CHUNK-6\"\n      }), req)).toBe(true);\n      expect(transit._handleIncomingResponseStream(Object.assign({}, payload, {\n        stream: true,\n        seq: 5,\n        data: \"CHUNK-5\"\n      }), req)).toBe(true);\n      return broker.Promise.delay(100).then(() => {\n        expect(STORE).toEqual([\"CHUNK-1\", \"CHUNK-2\", \"CHUNK-3\", \"CHUNK-4\", \"CHUNK-5\", \"CHUNK-6\", \"-- END --\"]);\n      });\n    });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should create packet","suites":["Test Transit.request"],"updatePoint":{"line":1680,"column":26},"line":1680,"code":"  it(\"should create packet\", () => {\n    return transit.request(ctx).catch(protectReject).then(() => {\n      expect(transit._sendRequest).toHaveBeenCalledTimes(1);\n      expect(transit._sendRequest).toHaveBeenCalledWith(ctx, expect.any(Function), expect.any(Function));\n    });\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should throw error if queue is full","suites":["Test Transit.request"],"updatePoint":{"line":1686,"column":41},"line":1686,"code":"  it(\"should throw error if queue is full\", () => {\n    transit.pendingRequests = {\n      size: 100\n    };\n    transit.opts.maxQueueSize = 100;\n    return transit.request(ctx).then(protectReject).catch(err => {\n      expect(err).toBeInstanceOf(E.QueueIsFullError);\n      expect(err.data.action).toBe(\"users.find\");\n      expect(err.data.nodeID).toBe(\"node1\");\n      expect(err.data.size).toBe(100);\n      expect(err.data.limit).toBe(100);\n    });\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should create packet","suites":["Test Transit._sendRequest","without Stream"],"updatePoint":{"line":1740,"column":28},"line":1740,"code":"    it(\"should create packet\", () => {\n      return transit._sendRequest(ctx, resolve, reject).catch(protectReject).then(() => {\n        expect(transit.publish).toHaveBeenCalledTimes(1);\n        expect(transit.publish).toHaveBeenCalledWith({\n          type: \"REQ\",\n          target: \"remote\",\n          payload: {\n            action: \"users.find\",\n            id: \"12345\",\n            level: 6,\n            meta: {\n              user: {\n                id: 5,\n                roles: [\"user\"]\n              }\n            },\n            tracing: true,\n            params: {\n              a: 5\n            },\n            parentID: \"0000\",\n            requestID: \"1111\",\n            caller: \"posts.list\",\n            stream: false,\n            timeout: 500\n          }\n        });\n        expect(transit.pendingRequests.get(id)).toEqual({\n          action: {\n            name: \"users.find\"\n          },\n          nodeID: \"remote\",\n          ctx,\n          resolve,\n          reject,\n          stream: false\n        });\n      });\n    });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should broadcast an error","suites":["Test Transit._sendRequest","without Stream"],"updatePoint":{"line":1779,"column":33},"line":1779,"code":"    it(\"should broadcast an error\", async () => {\n      // Mock an error\n      transit.publish = jest.fn(() => Promise.reject(new Error(\"Error during failedSendRequestPacket!\")));\n      await transit._sendRequest(ctx, resolve, reject);\n      expect(broker.broadcastLocal).toHaveBeenCalledTimes(1);\n      expect(broker.broadcastLocal).toHaveBeenCalledWith(\"$transit.error\", {\n        error: new Error(\"Error during failedSendRequestPacket!\"),\n        module: \"transit\",\n        type: C.FAILED_SEND_REQUEST_PACKET\n      });\n    });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should send stream chunks","suites":["Test Transit._sendRequest","with Stream"],"updatePoint":{"line":1805,"column":33},"line":1805,"code":"    it(\"should send stream chunks\", () => {\n      transit.publish.mockClear();\n      let stream = new Stream.Readable({\n        read() {}\n\n      });\n      ctx.params = stream;\n      return transit._sendRequest(ctx, resolve, reject).catch(protectReject).then(() => {\n        expect(transit.publish).toHaveBeenCalledTimes(1);\n        expect(transit.publish).toHaveBeenCalledWith({\n          type: \"REQ\",\n          target: \"remote\",\n          payload: {\n            action: \"users.find\",\n            id: \"12345\",\n            level: 1,\n            meta: {},\n            tracing: null,\n            params: null,\n            parentID: null,\n            requestID: \"req-12345\",\n            caller: null,\n            seq: 0,\n            stream: true,\n            timeout: null\n          }\n        });\n        transit.publish.mockClear();\n        stream.push(\"first chunk\");\n        stream.push(\"second chunk\");\n      }).delay(100).then(() => {\n        expect(transit.publish).toHaveBeenCalledTimes(2);\n        expect(transit.publish).toHaveBeenCalledWith({\n          type: \"REQ\",\n          target: \"remote\",\n          payload: {\n            action: \"users.find\",\n            id: \"12345\",\n            level: 1,\n            meta: {},\n            tracing: null,\n            params: Buffer.from(\"first chunk\"),\n            parentID: null,\n            requestID: \"req-12345\",\n            caller: null,\n            seq: 1,\n            stream: true,\n            timeout: null\n          }\n        });\n        expect(transit.publish).toHaveBeenCalledWith({\n          type: \"REQ\",\n          target: \"remote\",\n          payload: {\n            action: \"users.find\",\n            id: \"12345\",\n            level: 1,\n            meta: {},\n            tracing: null,\n            params: Buffer.from(\"second chunk\"),\n            parentID: null,\n            requestID: \"req-12345\",\n            caller: null,\n            seq: 2,\n            stream: true,\n            timeout: null\n          }\n        });\n        transit.publish.mockClear();\n        stream.emit(\"end\");\n      }).delay(100).then(() => {\n        expect(transit.publish).toHaveBeenCalledWith({\n          type: \"REQ\",\n          target: \"remote\",\n          payload: {\n            action: \"users.find\",\n            id: \"12345\",\n            level: 1,\n            meta: {},\n            tracing: null,\n            params: null,\n            parentID: null,\n            requestID: \"req-12345\",\n            caller: null,\n            seq: 3,\n            stream: false,\n            timeout: null\n          }\n        });\n      });\n    });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should send splitted stream chunks","suites":["Test Transit._sendRequest","with Stream"],"updatePoint":{"line":1896,"column":42},"line":1896,"code":"    it(\"should send splitted stream chunks\", () => {\n      transit.publish.mockClear();\n      transit.opts.maxChunkSize = 100;\n      let randomData = crypto.randomBytes(1024);\n      let stream = new Stream.Readable({\n        read() {}\n\n      });\n      ctx.params = stream;\n      return transit._sendRequest(ctx, resolve, reject).catch(protectReject).then(() => {\n        expect(transit.publish).toHaveBeenCalledTimes(1);\n        expect(transit.publish).toHaveBeenCalledWith({\n          type: \"REQ\",\n          target: \"remote\",\n          payload: {\n            action: \"users.find\",\n            id: \"12345\",\n            level: 1,\n            meta: {},\n            tracing: null,\n            params: null,\n            parentID: null,\n            requestID: \"req-12345\",\n            caller: null,\n            seq: 0,\n            stream: true,\n            timeout: null\n          }\n        });\n        transit.publish.mockClear();\n        stream.push(randomData);\n      }).delay(100).then(() => {\n        expect(transit.publish).toHaveBeenCalledTimes(Math.ceil(randomData.length / transit.opts.maxChunkSize));\n\n        for (let slice = 0; slice < Math.ceil(randomData.length / transit.opts.maxChunkSize); ++slice) {\n          expect(transit.publish).toHaveBeenCalledWith({\n            type: \"REQ\",\n            target: \"remote\",\n            payload: {\n              action: \"users.find\",\n              id: \"12345\",\n              level: 1,\n              meta: {},\n              tracing: null,\n              params: randomData.slice(slice * transit.opts.maxChunkSize, (slice + 1) * transit.opts.maxChunkSize),\n              parentID: null,\n              requestID: \"req-12345\",\n              caller: null,\n              seq: slice + 1,\n              stream: true,\n              timeout: null\n            }\n          });\n        }\n\n        transit.publish.mockClear();\n        stream.emit(\"end\");\n      }).delay(100).then(() => {\n        expect(transit.publish).toHaveBeenCalledWith({\n          type: \"REQ\",\n          target: \"remote\",\n          payload: {\n            action: \"users.find\",\n            id: \"12345\",\n            level: 1,\n            meta: {},\n            tracing: null,\n            params: null,\n            parentID: null,\n            requestID: \"req-12345\",\n            caller: null,\n            seq: Math.ceil(randomData.length / transit.opts.maxChunkSize) + 1,\n            stream: false,\n            timeout: null\n          }\n        });\n      });\n    });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should send splitted stream chunks from finished stream","suites":["Test Transit._sendRequest","with Stream"],"updatePoint":{"line":1974,"column":63},"line":1974,"code":"    it(\"should send splitted stream chunks from finished stream\", () => {\n      transit.publish.mockClear();\n      transit.opts.maxChunkSize = 100;\n      let randomData = crypto.randomBytes(256); // length > maxChunkSize => will be splitted to several chunks\n\n      let stream = new Stream.PassThrough();\n      stream.end(randomData); // end stream before giving stream to transit => transit will receive \"data\" and \"end\" event immediately one after the other\n\n      ctx.params = stream;\n      return transit._sendRequest(ctx, resolve, reject).catch(protectReject).then(() => {\n        expect(transit.publish).toHaveBeenCalledTimes(1);\n        expect(transit.publish).toHaveBeenCalledWith({\n          type: \"REQ\",\n          target: \"remote\",\n          payload: {\n            action: \"users.find\",\n            id: \"12345\",\n            level: 1,\n            meta: {},\n            tracing: null,\n            params: null,\n            parentID: null,\n            requestID: \"req-12345\",\n            caller: null,\n            seq: 0,\n            stream: true,\n            timeout: null\n          }\n        });\n        transit.publish.mockClear();\n      }).delay(100).then(() => {\n        expect(transit.publish).toHaveBeenCalledTimes(Math.ceil(randomData.length / transit.opts.maxChunkSize) + 1);\n\n        for (let slice = 0; slice < Math.ceil(randomData.length / transit.opts.maxChunkSize); ++slice) {\n          expect(transit.publish).toHaveBeenCalledWith({\n            type: \"REQ\",\n            target: \"remote\",\n            payload: {\n              action: \"users.find\",\n              id: \"12345\",\n              level: 1,\n              meta: {},\n              tracing: null,\n              params: randomData.slice(slice * transit.opts.maxChunkSize, (slice + 1) * transit.opts.maxChunkSize),\n              parentID: null,\n              requestID: \"req-12345\",\n              caller: null,\n              seq: slice + 1,\n              stream: true,\n              timeout: null\n            }\n          });\n        }\n\n        expect(transit.publish).toHaveBeenCalledWith({\n          type: \"REQ\",\n          target: \"remote\",\n          payload: {\n            action: \"users.find\",\n            id: \"12345\",\n            level: 1,\n            meta: {},\n            tracing: null,\n            params: null,\n            parentID: null,\n            requestID: \"req-12345\",\n            caller: null,\n            seq: Math.ceil(randomData.length / transit.opts.maxChunkSize) + 1,\n            stream: false,\n            timeout: null\n          }\n        });\n      });\n    });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should send stream error","suites":["Test Transit._sendRequest","with Stream"],"updatePoint":{"line":2048,"column":32},"line":2048,"code":"    it(\"should send stream error\", () => {\n      transit.publish.mockClear();\n      let stream = new Stream.Readable({\n        read() {}\n\n      });\n      ctx.params = stream;\n      return transit._sendRequest(ctx, resolve, reject).catch(protectReject).then(() => {\n        expect(transit.publish).toHaveBeenCalledTimes(1);\n        expect(transit.publish).toHaveBeenCalledWith({\n          type: \"REQ\",\n          target: \"remote\",\n          payload: {\n            action: \"users.find\",\n            id: \"12345\",\n            level: 1,\n            meta: {},\n            tracing: null,\n            params: null,\n            parentID: null,\n            requestID: \"req-12345\",\n            caller: null,\n            seq: 0,\n            stream: true,\n            timeout: null\n          }\n        });\n        transit.publish.mockClear();\n        stream.push(\"first chunk\");\n      }).delay(100).then(() => {\n        expect(transit.publish).toHaveBeenCalledTimes(1);\n        expect(transit.publish).toHaveBeenCalledWith({\n          type: \"REQ\",\n          target: \"remote\",\n          payload: {\n            action: \"users.find\",\n            id: \"12345\",\n            level: 1,\n            meta: {},\n            tracing: null,\n            params: Buffer.from(\"first chunk\"),\n            parentID: null,\n            requestID: \"req-12345\",\n            caller: null,\n            seq: 1,\n            stream: true,\n            timeout: null\n          }\n        });\n        transit.publish.mockClear();\n        transit._createPayloadErrorField = jest.fn(() => ({\n          error: true\n        }));\n        stream.emit(\"error\", new Error(\"Something happened\"));\n      }).delay(100).then(() => {\n        expect(transit.publish).toHaveBeenCalledTimes(1);\n        expect(transit.publish).toHaveBeenCalledWith({\n          type: \"REQ\",\n          target: \"remote\",\n          payload: {\n            action: \"users.find\",\n            id: \"12345\",\n            level: 1,\n            meta: {\n              $streamError: {\n                error: true\n              }\n            },\n            tracing: null,\n            params: null,\n            parentID: null,\n            requestID: \"req-12345\",\n            caller: null,\n            seq: 2,\n            stream: false,\n            timeout: null\n          }\n        });\n        expect(transit._createPayloadErrorField).toHaveBeenCalledTimes(1);\n      });\n    });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should send stream objects","suites":["Test Transit._sendRequest","with Stream"],"updatePoint":{"line":2129,"column":34},"line":2129,"code":"    it(\"should send stream objects\", () => {\n      transit.publish.mockClear();\n      let stream = new Stream.Readable({\n        objectMode: true,\n\n        read() {}\n\n      });\n      ctx.params = stream;\n      return transit._sendRequest(ctx, resolve, reject).catch(protectReject).then(() => {\n        expect(transit.publish).toHaveBeenCalledTimes(1);\n        expect(transit.publish).toHaveBeenCalledWith({\n          type: \"REQ\",\n          target: \"remote\",\n          payload: {\n            action: \"users.find\",\n            id: \"12345\",\n            level: 1,\n            meta: {\n              $streamObjectMode: true\n            },\n            tracing: null,\n            params: null,\n            parentID: null,\n            requestID: \"req-12345\",\n            caller: null,\n            seq: 0,\n            stream: true,\n            timeout: null\n          }\n        });\n        transit.publish.mockClear();\n        stream.push({\n          id: 0\n        });\n        stream.push({\n          id: 1\n        });\n      }).delay(100).then(() => {\n        expect(transit.publish).toHaveBeenCalledTimes(2);\n        expect(transit.publish).toHaveBeenCalledWith({\n          type: \"REQ\",\n          target: \"remote\",\n          payload: {\n            action: \"users.find\",\n            id: \"12345\",\n            level: 1,\n            meta: {\n              $streamObjectMode: true\n            },\n            tracing: null,\n            params: {\n              id: 0\n            },\n            parentID: null,\n            requestID: \"req-12345\",\n            caller: null,\n            seq: 1,\n            stream: true,\n            timeout: null\n          }\n        });\n        expect(transit.publish).toHaveBeenCalledWith({\n          type: \"REQ\",\n          target: \"remote\",\n          payload: {\n            action: \"users.find\",\n            id: \"12345\",\n            level: 1,\n            meta: {\n              $streamObjectMode: true\n            },\n            tracing: null,\n            params: {\n              id: 1\n            },\n            parentID: null,\n            requestID: \"req-12345\",\n            caller: null,\n            seq: 2,\n            stream: true,\n            timeout: null\n          }\n        });\n        transit.publish.mockClear();\n        stream.emit(\"end\");\n      }).delay(100).then(() => {\n        expect(transit.publish).toHaveBeenCalledWith({\n          type: \"REQ\",\n          target: \"remote\",\n          payload: {\n            action: \"users.find\",\n            id: \"12345\",\n            level: 1,\n            meta: {\n              $streamObjectMode: true\n            },\n            tracing: null,\n            params: null,\n            parentID: null,\n            requestID: \"req-12345\",\n            caller: null,\n            seq: 3,\n            stream: false,\n            timeout: null\n          }\n        });\n      });\n    });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should call publish with groups & nodeID","suites":["Test Transit.sendEvent"],"updatePoint":{"line":2273,"column":46},"line":2273,"code":"  it(\"should call publish with groups & nodeID\", () => {\n    transit.publish.mockClear();\n    ctx.eventGroups = [\"users\", \"mail\"];\n    transit.sendEvent(ctx);\n    expect(transit.publish).toHaveBeenCalledTimes(1);\n    const packet = transit.publish.mock.calls[0][0];\n    expect(packet).toBeInstanceOf(P.Packet);\n    expect(packet).toEqual({\n      target: \"node2\",\n      type: \"EVENT\",\n      payload: {\n        id: \"123456\",\n        event: \"user.created\",\n        data: {\n          id: 5,\n          name: \"Jameson\"\n        },\n        groups: [\"users\", \"mail\"],\n        broadcast: true,\n        meta: {\n          a: 8\n        },\n        level: 1,\n        tracing: null,\n        parentID: null,\n        requestID: \"request-id\",\n        caller: null,\n        needAck: null\n      }\n    });\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should call publish with groups & without nodeID","suites":["Test Transit.sendEvent"],"updatePoint":{"line":2304,"column":54},"line":2304,"code":"  it(\"should call publish with groups & without nodeID\", () => {\n    transit.publish.mockClear();\n    ctx.eventGroups = [\"users\", \"mail\"];\n    ctx.endpoint = null;\n    transit.sendEvent(ctx);\n    expect(transit.publish).toHaveBeenCalledTimes(1);\n    const packet = transit.publish.mock.calls[0][0];\n    expect(packet).toBeInstanceOf(P.Packet);\n    expect(packet).toEqual({\n      target: null,\n      type: \"EVENT\",\n      payload: {\n        id: \"123456\",\n        event: \"user.created\",\n        data: {\n          id: 5,\n          name: \"Jameson\"\n        },\n        groups: [\"users\", \"mail\"],\n        broadcast: true,\n        meta: {\n          a: 8\n        },\n        level: 1,\n        tracing: null,\n        parentID: null,\n        requestID: \"request-id\",\n        caller: null,\n        needAck: null\n      }\n    });\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should broadcast an error","suites":["Test Transit.sendEvent"],"updatePoint":{"line":2336,"column":31},"line":2336,"code":"  it(\"should broadcast an error\", async () => {\n    // Mock an error\n    transit.publish = jest.fn(() => Promise.reject(new Error(\"Error during failedSendEventPacket!\")));\n    ctx.eventGroups = [\"users\", \"mail\"];\n    await transit.sendEvent(ctx);\n    expect(broker.broadcastLocal).toHaveBeenCalledTimes(1);\n    expect(broker.broadcastLocal).toHaveBeenCalledWith(\"$transit.error\", {\n      error: new Error(\"Error during failedSendEventPacket!\"),\n      module: \"transit\",\n      type: C.FAILED_SEND_EVENT_PACKET\n    });\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should remove pending request from maps","suites":["Test Transit.removePendingRequest"],"updatePoint":{"line":2360,"column":45},"line":2360,"code":"  it(\"should remove pending request from maps\", () => {\n    transit.removePendingRequest(id);\n    expect(transit.pendingRequests.size).toBe(0);\n    expect(transit.pendingReqStreams.size).toBe(0);\n    expect(transit.pendingResStreams.size).toBe(0);\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should add to pendingRequest list","suites":["Test Transit.removePendingRequestByNodeID"],"updatePoint":{"line":2393,"column":39},"line":2393,"code":"  it(\"should add to pendingRequest list\", () => {\n    expect(transit.pendingRequests.size).toBe(0);\n\n    transit._sendRequest(ctx, resolve, reject);\n\n    expect(transit.pendingRequests.size).toBe(1);\n\n    transit._sendRequest(ctx2, resolve2, reject2);\n\n    expect(transit.pendingRequests.size).toBe(2);\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should not remove if call with other nodeID","suites":["Test Transit.removePendingRequestByNodeID"],"updatePoint":{"line":2404,"column":49},"line":2404,"code":"  it(\"should not remove if call with other nodeID\", () => {\n    transit.removePendingRequestByNodeID(\"node1\");\n    expect(transit.pendingRequests.size).toBe(2);\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should reject pending orders by nodeID","suites":["Test Transit.removePendingRequestByNodeID"],"updatePoint":{"line":2408,"column":44},"line":2408,"code":"  it(\"should reject pending orders by nodeID\", () => {\n    transit.removePendingRequestByNodeID(\"node2\");\n    expect(transit.pendingRequests.size).toBe(1);\n    expect(resolve).toHaveBeenCalledTimes(0);\n    expect(resolve2).toHaveBeenCalledTimes(0);\n    expect(reject).toHaveBeenCalledTimes(1);\n    expect(reject).toHaveBeenCalledWith(expect.any(E.RequestRejectedError));\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should reject pending orders by nodeID #2","suites":["Test Transit.removePendingRequestByNodeID"],"updatePoint":{"line":2416,"column":47},"line":2416,"code":"  it(\"should reject pending orders by nodeID #2\", () => {\n    transit.removePendingRequestByNodeID(\"node3\");\n    expect(transit.pendingRequests.size).toBe(0);\n    expect(resolve2).toHaveBeenCalledTimes(0);\n    expect(reject2).toHaveBeenCalledTimes(1);\n    expect(reject2).toHaveBeenCalledWith(expect.any(E.RequestRejectedError));\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should call errorRegenerator.extractPlainError method","suites":["Test Transit._createPayloadErrorField"],"updatePoint":{"line":2433,"column":59},"line":2433,"code":"  it(\"should call errorRegenerator.extractPlainError method\", () => {\n    const payload = {};\n    const err = new E.MoleculerRetryableError(\"Something went wrong\", 456, \"CUSTOM\", {\n      a: 5\n    });\n    err.stack = \"custom stack\";\n    broker.errorRegenerator.extractPlainError = jest.fn();\n\n    broker.transit._createPayloadErrorField(err, payload);\n\n    expect(broker.errorRegenerator.extractPlainError).toHaveBeenCalled();\n    expect(broker.errorRegenerator.extractPlainError).toHaveBeenCalledWith(err, payload);\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should call publish with the data","suites":["Test Transit.sendResponse","without Stream"],"updatePoint":{"line":2467,"column":41},"line":2467,"code":"    it(\"should call publish with the data\", () => {\n      const data = {\n        id: 1,\n        name: \"John Doe\"\n      };\n      transit.sendResponse(\"node2\", \"12345\", meta, data);\n      expect(transit.publish).toHaveBeenCalledTimes(1);\n      const packet = transit.publish.mock.calls[0][0];\n      expect(packet).toBeInstanceOf(P.Packet);\n      expect(packet.type).toBe(P.PACKET_RESPONSE);\n      expect(packet.target).toBe(\"node2\");\n      expect(packet.payload.id).toBe(\"12345\");\n      expect(packet.payload.meta).toBe(meta);\n      expect(packet.payload.success).toBe(true);\n      expect(packet.payload.data).toBe(data);\n    });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should call publish with the error","suites":["Test Transit.sendResponse","without Stream"],"updatePoint":{"line":2483,"column":42},"line":2483,"code":"    it(\"should call publish with the error\", () => {\n      transit.publish.mockClear();\n      transit.sendResponse(\"node2\", \"12345\", meta, null, new E.ValidationError(\"Not valid params\", \"ERR_INVALID_A_PARAM\", {\n        a: \"Too small\"\n      }));\n      expect(transit.publish).toHaveBeenCalledTimes(1);\n      const packet = transit.publish.mock.calls[0][0];\n      expect(packet).toBeInstanceOf(P.Packet);\n      expect(packet.type).toBe(P.PACKET_RESPONSE);\n      expect(packet.target).toBe(\"node2\");\n      expect(packet.payload.id).toBe(\"12345\");\n      expect(packet.payload.meta).toBe(meta);\n      expect(packet.payload.success).toBe(false);\n      expect(packet.payload.data).toBeNull();\n      expect(packet.payload.error).toBeDefined();\n      expect(packet.payload.error.name).toBe(\"ValidationError\");\n      expect(packet.payload.error.message).toBe(\"Not valid params\");\n      expect(packet.payload.error.code).toBe(422);\n      expect(packet.payload.error.type).toBe(\"ERR_INVALID_A_PARAM\");\n      expect(packet.payload.error.nodeID).toBe(\"node1\");\n      expect(packet.payload.error.data).toEqual({\n        a: \"Too small\"\n      });\n    });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should broadcast an error","suites":["Test Transit.sendResponse","without Stream"],"updatePoint":{"line":2507,"column":33},"line":2507,"code":"    it(\"should broadcast an error\", async () => {\n      // Mock an error\n      transit.publish = jest.fn(() => Promise.reject(new Error(\"Error during failedSendResponsePacket!\")));\n      const data = {\n        id: 1,\n        name: \"John Doe\"\n      };\n      await transit.sendResponse(\"node2\", \"12345\", meta, data);\n      expect(broker.broadcastLocal).toHaveBeenCalledTimes(1);\n      expect(broker.broadcastLocal).toHaveBeenCalledWith(\"$transit.error\", {\n        error: new Error(\"Error during failedSendResponsePacket!\"),\n        module: \"transit\",\n        type: C.FAILED_SEND_RESPONSE_PACKET\n      });\n    });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should send stream chunks","suites":["Test Transit.sendResponse","with Stream"],"updatePoint":{"line":2524,"column":33},"line":2524,"code":"    it(\"should send stream chunks\", () => {\n      transit.publish.mockClear();\n      let stream = new Stream.Readable({\n        read() {}\n\n      });\n      return transit.sendResponse(\"node2\", \"12345\", meta, stream).then(() => {\n        expect(transit.publish).toHaveBeenCalledTimes(1);\n        expect(transit.publish).toHaveBeenLastCalledWith({\n          payload: {\n            data: null,\n            id: \"12345\",\n            meta,\n            seq: 0,\n            stream: true,\n            success: true\n          },\n          target: \"node2\",\n          type: \"RES\"\n        });\n        transit.publish.mockClear();\n        stream.push(\"first chunk\");\n        stream.push(\"second chunk\");\n      }).delay(100).then(() => {\n        expect(transit.publish).toHaveBeenCalledTimes(2);\n        expect(transit.publish).toHaveBeenCalledWith({\n          payload: {\n            data: Buffer.from(\"first chunk\"),\n            id: \"12345\",\n            meta,\n            seq: 1,\n            stream: true,\n            success: true\n          },\n          target: \"node2\",\n          type: \"RES\"\n        });\n        expect(transit.publish).toHaveBeenCalledWith({\n          payload: {\n            data: Buffer.from(\"second chunk\"),\n            id: \"12345\",\n            meta,\n            seq: 2,\n            stream: true,\n            success: true\n          },\n          target: \"node2\",\n          type: \"RES\"\n        });\n        transit.publish.mockClear();\n        stream.emit(\"end\");\n      }).delay(100).then(() => {\n        expect(transit.publish).toHaveBeenCalledWith({\n          payload: {\n            data: null,\n            id: \"12345\",\n            meta,\n            seq: 3,\n            stream: false,\n            success: true\n          },\n          target: \"node2\",\n          type: \"RES\"\n        });\n      });\n    });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should send stream chunks","suites":["Test Transit.sendResponse","with Stream"],"updatePoint":{"line":2590,"column":33},"line":2590,"code":"    it(\"should send stream chunks\", () => {\n      transit.publish.mockClear();\n      let stream = new Stream.Readable({\n        read() {}\n\n      });\n      return transit.sendResponse(\"node2\", \"12345\", meta, stream).then(() => {\n        expect(transit.publish).toHaveBeenCalledTimes(1);\n        expect(transit.publish).toHaveBeenLastCalledWith({\n          payload: {\n            data: null,\n            id: \"12345\",\n            meta,\n            seq: 0,\n            stream: true,\n            success: true\n          },\n          target: \"node2\",\n          type: \"RES\"\n        });\n        transit.publish.mockClear();\n        stream.push(\"first chunk\");\n      }).delay(100).then(() => {\n        expect(transit.publish).toHaveBeenCalledTimes(1);\n        expect(transit.publish).toHaveBeenCalledWith({\n          payload: {\n            data: Buffer.from(\"first chunk\"),\n            id: \"12345\",\n            meta,\n            seq: 1,\n            stream: true,\n            success: true\n          },\n          target: \"node2\",\n          type: \"RES\"\n        });\n        transit.publish.mockClear();\n        transit._createPayloadErrorField = jest.fn(() => ({\n          error: true\n        }));\n        stream.emit(\"error\", new Error(\"Something happened\"));\n      }).delay(100).then(() => {\n        expect(transit.publish).toHaveBeenCalledTimes(1);\n        expect(transit.publish).toHaveBeenCalledWith({\n          payload: {\n            data: null,\n            error: {\n              error: true\n            },\n            id: \"12345\",\n            meta,\n            seq: 2,\n            stream: false,\n            success: false\n          },\n          target: \"node2\",\n          type: \"RES\"\n        });\n      });\n    });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should send splitted stream chunks","suites":["Test Transit.sendResponse","with Stream"],"updatePoint":{"line":2650,"column":42},"line":2650,"code":"    it(\"should send splitted stream chunks\", () => {\n      transit.publish.mockClear();\n      transit.opts.maxChunkSize = 100;\n      let randomData = crypto.randomBytes(1024);\n      let stream = new Stream.Readable({\n        read() {}\n\n      });\n      return transit.sendResponse(\"node2\", \"12345\", meta, stream).then(() => {\n        expect(transit.publish).toHaveBeenCalledTimes(1);\n        expect(transit.publish).toHaveBeenLastCalledWith({\n          payload: {\n            data: null,\n            id: \"12345\",\n            meta,\n            seq: 0,\n            stream: true,\n            success: true\n          },\n          target: \"node2\",\n          type: \"RES\"\n        });\n        transit.publish.mockClear();\n        stream.push(randomData);\n      }).delay(100).then(() => {\n        expect(transit.publish).toHaveBeenCalledTimes(Math.ceil(randomData.length / transit.opts.maxChunkSize));\n\n        for (let slice = 0; slice < Math.ceil(randomData.length / transit.opts.maxChunkSize); ++slice) {\n          expect(transit.publish).toHaveBeenCalledWith({\n            payload: {\n              data: randomData.slice(slice * transit.opts.maxChunkSize, (slice + 1) * transit.opts.maxChunkSize),\n              id: \"12345\",\n              meta,\n              seq: slice + 1,\n              stream: true,\n              success: true\n            },\n            target: \"node2\",\n            type: \"RES\"\n          });\n        }\n\n        transit.publish.mockClear();\n        stream.emit(\"end\");\n      }).delay(100).then(() => {\n        expect(transit.publish).toHaveBeenCalledWith({\n          payload: {\n            data: null,\n            id: \"12345\",\n            meta,\n            seq: Math.ceil(randomData.length / transit.opts.maxChunkSize) + 1,\n            stream: false,\n            success: true\n          },\n          target: \"node2\",\n          type: \"RES\"\n        });\n      });\n    });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should call publish with correct params","suites":["Test Transit.discoverNodes"],"updatePoint":{"line":2725,"column":45},"line":2725,"code":"  it(\"should call publish with correct params\", () => {\n    transit.publish = jest.fn(() => Promise.resolve());\n    transit.discoverNodes();\n    expect(transit.publish).toHaveBeenCalledTimes(1);\n    const packet = transit.publish.mock.calls[0][0];\n    expect(packet).toBeInstanceOf(P.Packet);\n    expect(packet.type).toBe(P.PACKET_DISCOVER);\n    expect(packet.payload).toEqual({});\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should broadcast an error","suites":["Test Transit.discoverNodes"],"updatePoint":{"line":2734,"column":31},"line":2734,"code":"  it(\"should broadcast an error\", async () => {\n    // Mock an error\n    transit.publish = jest.fn(() => Promise.reject(new Error(\"Error during failedNodesDiscovery!\")));\n    await transit.discoverNodes();\n    expect(broker.broadcastLocal).toHaveBeenCalledTimes(1);\n    expect(broker.broadcastLocal).toHaveBeenCalledWith(\"$transit.error\", {\n      error: new Error(\"Error during failedNodesDiscovery!\"),\n      module: \"transit\",\n      type: C.FAILED_NODES_DISCOVERY\n    });\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should call publish with correct params","suites":["Test Transit.discoverNode"],"updatePoint":{"line":2760,"column":45},"line":2760,"code":"  it(\"should call publish with correct params\", () => {\n    transit.publish = jest.fn(() => Promise.resolve());\n    transit.discoverNode(\"node-2\");\n    expect(transit.publish).toHaveBeenCalledTimes(1);\n    const packet = transit.publish.mock.calls[0][0];\n    expect(packet).toBeInstanceOf(P.Packet);\n    expect(packet.type).toBe(P.PACKET_DISCOVER);\n    expect(packet.target).toBe(\"node-2\");\n    expect(packet.payload).toEqual({});\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should broadcast an error","suites":["Test Transit.discoverNode"],"updatePoint":{"line":2770,"column":31},"line":2770,"code":"  it(\"should broadcast an error\", async () => {\n    // Mock an error\n    transit.publish = jest.fn(() => Promise.reject(new Error(\"Error during failedNodeDiscovery!\")));\n    await transit.discoverNode();\n    expect(broker.broadcastLocal).toHaveBeenCalledTimes(1);\n    expect(broker.broadcastLocal).toHaveBeenCalledWith(\"$transit.error\", {\n      error: new Error(\"Error during failedNodeDiscovery!\"),\n      module: \"transit\",\n      type: C.FAILED_NODE_DISCOVERY\n    });\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should not call publish while not connected","suites":["Test Transit.sendNodeInfo"],"updatePoint":{"line":2808,"column":49},"line":2808,"code":"  it(\"should not call publish while not connected\", () => {\n    return transit.sendNodeInfo(localNodeInfo, \"node2\").then(() => {\n      expect(transit.publish).toHaveBeenCalledTimes(0);\n    });\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should not call publish while not ready","suites":["Test Transit.sendNodeInfo"],"updatePoint":{"line":2813,"column":45},"line":2813,"code":"  it(\"should not call publish while not ready\", () => {\n    transit.connected = true;\n    return transit.sendNodeInfo(localNodeInfo, \"node2\").then(() => {\n      expect(transit.publish).toHaveBeenCalledTimes(0);\n    });\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should call publish with correct params if has nodeID","suites":["Test Transit.sendNodeInfo"],"updatePoint":{"line":2819,"column":59},"line":2819,"code":"  it(\"should call publish with correct params if has nodeID\", () => {\n    transit.isReady = true;\n    return transit.sendNodeInfo(localNodeInfo, \"node2\").then(() => {\n      expect(transit.tx.makeBalancedSubscriptions).toHaveBeenCalledTimes(0);\n      expect(transit.publish).toHaveBeenCalledTimes(1);\n      const packet = transit.publish.mock.calls[0][0];\n      expect(packet).toBeInstanceOf(P.Packet);\n      expect(packet.type).toBe(P.PACKET_INFO);\n      expect(packet.target).toBe(\"node2\");\n      expect(packet.payload.services).toEqual([]);\n    });\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should call publish with correct params if has no nodeID & disableBalancer: false","suites":["Test Transit.sendNodeInfo"],"updatePoint":{"line":2831,"column":87},"line":2831,"code":"  it(\"should call publish with correct params if has no nodeID & disableBalancer: false\", () => {\n    // Set disableBalancer option\n    broker.options.disableBalancer = false;\n    transit.publish.mockClear();\n    transit.tx.makeBalancedSubscriptions.mockClear();\n    return transit.sendNodeInfo(localNodeInfo).then(() => {\n      expect(transit.tx.makeBalancedSubscriptions).toHaveBeenCalledTimes(0);\n      expect(transit.publish).toHaveBeenCalledTimes(1);\n      const packet = transit.publish.mock.calls[0][0];\n      expect(packet).toBeInstanceOf(P.Packet);\n      expect(packet.type).toBe(P.PACKET_INFO);\n      expect(packet.target).toBe();\n      expect(packet.payload).toEqual({\n        client: undefined,\n        config: undefined,\n        hostname: undefined,\n        instanceID: broker.instanceID,\n        ipList: undefined,\n        metadata: {\n          region: \"eu-west1\"\n        },\n        seq: undefined,\n        services: []\n      });\n    });\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should broadcast an error","suites":["Test Transit.sendNodeInfo"],"updatePoint":{"line":2857,"column":31},"line":2857,"code":"  it(\"should broadcast an error\", async () => {\n    // Mock an error\n    transit.publish = jest.fn(() => Promise.reject(new Error(\"Error during failedSendInfoPacket!\")));\n    await transit.sendNodeInfo(localNodeInfo, \"node2\");\n    expect(broker.broadcastLocal).toHaveBeenCalledTimes(1);\n    expect(broker.broadcastLocal).toHaveBeenCalledWith(\"$transit.error\", {\n      error: new Error(\"Error during failedSendInfoPacket!\"),\n      module: \"transit\",\n      type: C.FAILED_SEND_INFO_PACKET\n    });\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should call publish with correct params","suites":["Test Transit.sendPing"],"updatePoint":{"line":2885,"column":45},"line":2885,"code":"  it(\"should call publish with correct params\", () => {\n    transit.sendPing(\"node-2\");\n    expect(transit.publish).toHaveBeenCalledTimes(1);\n    const packet = transit.publish.mock.calls[0][0];\n    expect(packet).toBeInstanceOf(P.Packet);\n    expect(packet.type).toBe(P.PACKET_PING);\n    expect(packet.target).toBe(\"node-2\");\n    expect(packet.payload).toEqual({\n      time: expect.any(Number),\n      id: expect.any(String)\n    });\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should broadcast an error","suites":["Test Transit.sendPing"],"updatePoint":{"line":2897,"column":31},"line":2897,"code":"  it(\"should broadcast an error\", async () => {\n    // Mock an error\n    transit.publish = jest.fn(() => Promise.reject(new Error(\"Error during failedSendPingPacket!\")));\n    await transit.sendPing(\"node-2\");\n    expect(broker.broadcastLocal).toHaveBeenCalledTimes(1);\n    expect(broker.broadcastLocal).toHaveBeenCalledWith(\"$transit.error\", {\n      error: new Error(\"Error during failedSendPingPacket!\"),\n      module: \"transit\",\n      type: C.FAILED_SEND_PING_PACKET\n    });\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should call publish with correct params","suites":["Test Transit.sendPong"],"updatePoint":{"line":2925,"column":45},"line":2925,"code":"  it(\"should call publish with correct params\", () => {\n    transit.sendPong({\n      sender: \"node-2\",\n      time: 123456\n    });\n    expect(transit.publish).toHaveBeenCalledTimes(1);\n    const packet = transit.publish.mock.calls[0][0];\n    expect(packet).toBeInstanceOf(P.Packet);\n    expect(packet.type).toBe(P.PACKET_PONG);\n    expect(packet.target).toBe(\"node-2\");\n    expect(packet.payload).toEqual({\n      time: 123456,\n      arrived: expect.any(Number)\n    });\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should broadcast an error","suites":["Test Transit.sendPong"],"updatePoint":{"line":2940,"column":31},"line":2940,"code":"  it(\"should broadcast an error\", async () => {\n    // Mock an error\n    transit.publish = jest.fn(() => Promise.reject(new Error(\"Error during failedSendPongPacket!\")));\n    await transit.sendPong({\n      sender: \"node-2\",\n      time: 123456\n    });\n    expect(broker.broadcastLocal).toHaveBeenCalledTimes(1);\n    expect(broker.broadcastLocal).toHaveBeenCalledWith(\"$transit.error\", {\n      error: new Error(\"Error during failedSendPongPacket!\"),\n      module: \"transit\",\n      type: C.FAILED_SEND_PONG_PACKET\n    });\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should call broadcastLocal with ping result","suites":["Test Transit.processPong"],"updatePoint":{"line":2963,"column":49},"line":2963,"code":"  it(\"should call broadcastLocal with ping result\", () => {\n    let now = Date.now();\n    transit.processPong({\n      sender: \"node-2\",\n      arrived: now,\n      time: now - 500\n    });\n    expect(broker.broadcastLocal).toHaveBeenCalledTimes(1);\n    expect(broker.broadcastLocal).toHaveBeenCalledWith(\"$node.pong\", {\n      elapsedTime: expect.any(Number),\n      nodeID: \"node-2\",\n      timeDiff: expect.any(Number)\n    });\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should call publish with correct params","suites":["Test Transit.sendHeartbeat"],"updatePoint":{"line":2994,"column":45},"line":2994,"code":"  it(\"should call publish with correct params\", () => {\n    transit.sendHeartbeat({\n      cpu: 12\n    });\n    expect(transit.publish).toHaveBeenCalledTimes(1);\n    const packet = transit.publish.mock.calls[0][0];\n    expect(packet).toBeInstanceOf(P.Packet);\n    expect(packet.type).toBe(P.PACKET_HEARTBEAT);\n    expect(packet.payload.cpu).toBe(12);\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should broadcast an error","suites":["Test Transit.sendHeartbeat"],"updatePoint":{"line":3004,"column":31},"line":3004,"code":"  it(\"should broadcast an error\", async () => {\n    // Mock an error\n    transit.publish = jest.fn(() => Promise.reject(new Error(\"Error during failedSendHeartbeatPacket!\")));\n    await transit.sendHeartbeat({\n      cpu: 12\n    });\n    expect(broker.broadcastLocal).toHaveBeenCalledTimes(1);\n    expect(broker.broadcastLocal).toHaveBeenCalledWith(\"$transit.error\", {\n      error: new Error(\"Error during failedSendHeartbeatPacket!\"),\n      module: \"transit\",\n      type: C.FAILED_SEND_HEARTBEAT_PACKET\n    });\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should call transporter.subscribe","suites":["Test Transit.subscribe"],"updatePoint":{"line":3027,"column":39},"line":3027,"code":"  it(\"should call transporter.subscribe\", () => {\n    transit.subscribe(\"REQ\", \"node-2\");\n    expect(transporter.subscribe).toHaveBeenCalledTimes(1);\n    expect(transporter.subscribe).toHaveBeenCalledWith(\"REQ\", \"node-2\");\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should call transporter.prepublish","suites":["Test Transit.publish"],"updatePoint":{"line":3043,"column":40},"line":3043,"code":"  it(\"should call transporter.prepublish\", () => {\n    let packet = new P.Packet(P.PACKET_EVENT);\n    transit.publish(packet);\n    expect(transporter.prepublish).toHaveBeenCalledTimes(1);\n    const p = transporter.prepublish.mock.calls[0][0];\n    expect(p).toBe(packet);\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"should call transporter.prepublish after subscribing","suites":["Test Transit.publish"],"updatePoint":{"line":3050,"column":58},"line":3050,"code":"  it(\"should call transporter.prepublish after subscribing\", () => {\n    transporter.prepublish.mockClear();\n    transit.stat.packets.sent = 0;\n    let resolve;\n    transit.subscribing = new Promise(r => resolve = r);\n    let packet = new P.Packet(P.PACKET_EVENT);\n    let p = transit.publish(packet);\n    expect(transporter.prepublish).toHaveBeenCalledTimes(0);\n    resolve();\n    return p.catch(protectReject).then(() => {\n      expect(transporter.prepublish).toHaveBeenCalledTimes(1);\n      const p = transporter.prepublish.mock.calls[0][0];\n      expect(p).toBe(packet);\n    });\n  });","file":"unit/transit.spec.js","skipped":false,"dir":"test"},{"name":"check constructor with string param","suites":["Test AmqpTransporter constructor"],"updatePoint":{"line":56,"column":41},"line":56,"code":"  it(\"check constructor with string param\", () => {\n    let transporter = new AmqpTransporter(\"amqp://localhost\");\n    expect(transporter).toBeDefined();\n    expect(transporter.opts).toEqual({\n      url: [\"amqp://localhost\"],\n      prefetch: 1,\n      eventTimeToLive: null,\n      heartbeatTimeToLive: null,\n      exchangeOptions: {},\n      messageOptions: {},\n      queueOptions: {},\n      consumeOptions: {},\n      autoDeleteQueues: 120000\n    });\n    expect(transporter.connected).toBe(false);\n    expect(transporter.hasBuiltInBalancer).toBe(true);\n    expect(transporter.channel).toBeNull();\n    expect(transporter.connection).toBeNull();\n    expect(transporter.bindings).toHaveLength(0);\n  });","file":"unit/transporters/amqp.spec.js","skipped":false,"dir":"test"},{"name":"check constructor with options","suites":["Test AmqpTransporter constructor"],"updatePoint":{"line":76,"column":36},"line":76,"code":"  it(\"check constructor with options\", () => {\n    let opts = {\n      url: [\"amqp://localhost\"],\n      prefetch: 3,\n      eventTimeToLive: 10000,\n      heartbeatTimeToLive: 30000,\n      exchangeOptions: {\n        alternateExchange: \"retry\"\n      },\n      messageOptions: {\n        expiration: 120000,\n        persistent: true,\n        mandatory: true\n      },\n      queueOptions: {\n        deadLetterExchange: \"dlx\",\n        maxLength: 100\n      },\n      consumeOptions: {\n        priority: 5\n      },\n      autoDeleteQueues: 31337\n    };\n    let transporter = new AmqpTransporter(opts);\n    expect(transporter.opts).toEqual(opts);\n  });","file":"unit/transporters/amqp.spec.js","skipped":false,"dir":"test"},{"name":"check connect","suites":["Test AmqpTransporter connect & disconnect"],"updatePoint":{"line":117,"column":19},"line":117,"code":"  it(\"check connect\", () => {\n    return transporter.connect().catch(protectReject).then(() => {\n      expect(transporter.connection).toBeDefined();\n      expect(transporter.connection.on).toHaveBeenCalledTimes(4);\n      expect(transporter.connection.on).toHaveBeenCalledWith(\"error\", expect.any(Function));\n      expect(transporter.connection.on).toHaveBeenCalledWith(\"close\", expect.any(Function));\n      expect(transporter.connection.on).toHaveBeenCalledWith(\"blocked\", expect.any(Function));\n      expect(transporter.connection.on).toHaveBeenCalledWith(\"unblocked\", expect.any(Function));\n      expect(transporter.channel).toBeDefined();\n      expect(transporter.channel.on).toHaveBeenCalledTimes(4);\n      expect(transporter.channel.on).toHaveBeenCalledWith(\"error\", expect.any(Function));\n      expect(transporter.channel.on).toHaveBeenCalledWith(\"close\", expect.any(Function));\n      expect(transporter.channel.on).toHaveBeenCalledWith(\"return\", expect.any(Function));\n      expect(transporter.channel.on).toHaveBeenCalledWith(\"drain\", expect.any(Function));\n      expect(transporter.channel.prefetch).toHaveBeenCalledTimes(1);\n      expect(transporter.channel.prefetch).toHaveBeenCalledWith(3);\n    });\n  });","file":"unit/transporters/amqp.spec.js","skipped":false,"dir":"test"},{"name":"check connect - should broadcast a connection error","suites":["Test AmqpTransporter connect & disconnect"],"updatePoint":{"line":135,"column":57},"line":135,"code":"  it(\"check connect - should broadcast a connection error\", () => {\n    broker.broadcastLocal = jest.fn();\n    return transporter.connect().catch(protectReject).then(() => {\n      transporter.connection.connectionOnCallbacks.error(new Error(\"Ups\"));\n      expect(broker.broadcastLocal).toHaveBeenCalledTimes(1);\n      expect(broker.broadcastLocal).toHaveBeenCalledWith(\"$transporter.error\", {\n        error: new Error(\"Ups\"),\n        module: \"transporter\",\n        type: C.FAILED_CONNECTION_ERROR\n      });\n    });\n  });","file":"unit/transporters/amqp.spec.js","skipped":false,"dir":"test"},{"name":"check connect - should broadcast a channel error","suites":["Test AmqpTransporter connect & disconnect"],"updatePoint":{"line":147,"column":54},"line":147,"code":"  it(\"check connect - should broadcast a channel error\", () => {\n    broker.broadcastLocal = jest.fn();\n    return transporter.connect().catch(protectReject).then(() => {\n      transporter.channel.channelOnCallbacks.error(new Error(\"Ups\"));\n      expect(broker.broadcastLocal).toHaveBeenCalledTimes(1);\n      expect(broker.broadcastLocal).toHaveBeenCalledWith(\"$transporter.error\", {\n        error: new Error(\"Ups\"),\n        module: \"transporter\",\n        type: C.FAILED_CHANNEL_ERROR\n      });\n    });\n  });","file":"unit/transporters/amqp.spec.js","skipped":false,"dir":"test"},{"name":"check onConnected after connect","suites":["Test AmqpTransporter connect & disconnect"],"updatePoint":{"line":159,"column":37},"line":159,"code":"  it(\"check onConnected after connect\", () => {\n    // Because onConnected is mocked, makeSubscriptions isn't called for initial connections\n    transit.makeSubscriptions = jest.fn(() => Promise.resolve());\n    transporter.onConnected = jest.fn(() => Promise.resolve());\n    return transporter.connect().catch(protectReject).then(() => {\n      expect(transporter.onConnected).toHaveBeenCalledTimes(1);\n      expect(transit.makeSubscriptions).toHaveBeenCalledTimes(0);\n      expect(transporter.onConnected).toHaveBeenCalledWith(false);\n    });\n  });","file":"unit/transporters/amqp.spec.js","skipped":false,"dir":"test"},{"name":"check onConnected after connect (start -> stop -> start)","suites":["Test AmqpTransporter connect & disconnect"],"updatePoint":{"line":169,"column":62},"line":169,"code":"  it(\"check onConnected after connect (start -> stop -> start)\", () => {\n    // Because onConnected is mocked, makeSubscriptions isn't called for initial connections\n    transit.makeSubscriptions = jest.fn(() => Promise.resolve());\n    transporter.onConnected = jest.fn(() => Promise.resolve());\n    return transporter.connect().then(() => transporter.disconnect()).then(() => transporter.connect()).catch(protectReject).then(() => {\n      expect(transporter.onConnected).toHaveBeenCalledTimes(2);\n      expect(transit.makeSubscriptions).toHaveBeenCalledTimes(0);\n      expect(transporter.onConnected.mock.calls).toEqual([[false], [false]]);\n    });\n  });","file":"unit/transporters/amqp.spec.js","skipped":false,"dir":"test"},{"name":"check onConnected after reconnect","suites":["Test AmqpTransporter connect & disconnect"],"updatePoint":{"line":179,"column":39},"line":179,"code":"  it(\"check onConnected after reconnect\", () => {\n    // Because onConnected is mocked, makeSubscriptions isn't called for initial connections\n    transit.makeSubscriptions = jest.fn(() => Promise.resolve());\n    transporter.onConnected = jest.fn(() => Promise.resolve());\n    return transporter.connect(() => transporter.connect()).then(() => transporter.connection.connectionOnCallbacks.close()).catch(protectReject).then(() => {\n      expect(transporter.onConnected).toHaveBeenCalledTimes(2);\n      expect(transit.makeSubscriptions).toHaveBeenCalledTimes(1);\n      expect(transporter.onConnected.mock.calls).toEqual([[false], [true]]);\n    });\n  });","file":"unit/transporters/amqp.spec.js","skipped":false,"dir":"test"},{"name":"check disconnect","suites":["Test AmqpTransporter connect & disconnect"],"updatePoint":{"line":189,"column":22},"line":189,"code":"  it(\"check disconnect\", () => {\n    transporter.bindings = [[\"queue1\", \"exchange1\", \"\"], [\"queue2\", \"exchange2\", \"\"]];\n    return transporter.connect().catch(protectReject).then(() => {\n      let chanCloseCb = transporter.channel.close;\n      let chanUnbindCb = transporter.channel.unbindQueue;\n      let conCloseCb = transporter.connection.close;\n      let bindings = transporter.bindings;\n      transporter.disconnect().catch(protectReject).then(() => {\n        expect(transporter.channel).toBeNull();\n        expect(transporter.connection).toBeNull();\n        expect(chanCloseCb).toHaveBeenCalledTimes(1);\n        expect(conCloseCb).toHaveBeenCalledTimes(1);\n        expect(chanUnbindCb).toHaveBeenCalledTimes(bindings.length);\n\n        for (let binding of bindings) {\n          expect(chanUnbindCb).toHaveBeenCalledWith(...binding);\n        }\n      });\n    });\n  });","file":"unit/transporters/amqp.spec.js","skipped":false,"dir":"test"},{"name":"should not call channel.ack","suites":["Test AmqpTransporter subscribe"],"updatePoint":{"line":230,"column":33},"line":230,"code":"  it(\"should not call channel.ack\", () => {\n    transporter.channel.ack = jest.fn();\n    transporter.channel.nack = jest.fn();\n\n    let cb = transporter._consumeCB(\"REQ\", false);\n\n    let msg = {\n      content: \"msg\"\n    };\n    cb(msg);\n    expect(transporter.incomingMessage).toHaveBeenCalledTimes(1);\n    expect(transporter.incomingMessage).toHaveBeenCalledWith(\"REQ\", msg.content);\n    expect(transporter.channel.ack).toHaveBeenCalledTimes(0);\n    expect(transporter.channel.nack).toHaveBeenCalledTimes(0);\n  });","file":"unit/transporters/amqp.spec.js","skipped":false,"dir":"test"},{"name":"should call channel.ack (sync)","suites":["Test AmqpTransporter subscribe"],"updatePoint":{"line":245,"column":36},"line":245,"code":"  it(\"should call channel.ack (sync)\", () => {\n    transporter.channel.ack = jest.fn();\n    transporter.channel.nack = jest.fn();\n\n    let cb = transporter._consumeCB(\"REQ\", true);\n\n    let msg = {\n      content: \"msg\"\n    };\n    cb(msg);\n    expect(transporter.incomingMessage).toHaveBeenCalledTimes(1);\n    expect(transporter.incomingMessage).toHaveBeenCalledWith(\"REQ\", msg.content);\n    expect(transporter.channel.ack).toHaveBeenCalledTimes(1);\n    expect(transporter.channel.ack).toHaveBeenCalledWith(msg);\n    expect(transporter.channel.nack).toHaveBeenCalledTimes(0);\n  });","file":"unit/transporters/amqp.spec.js","skipped":false,"dir":"test"},{"name":"check RES subscription","suites":["Test AmqpTransporter subscribe"],"updatePoint":{"line":310,"column":28},"line":310,"code":"  it(\"check RES subscription\", () => {\n    return transporter.subscribe(\"RES\", \"node\").catch(protectReject).then(() => {\n      expect(transporter.channel.assertQueue).toHaveBeenCalledTimes(1);\n      expect(transporter.channel.consume).toHaveBeenCalledTimes(1);\n      expect(transporter.channel.assertQueue).toHaveBeenCalledWith(\"MOL-TEST.RES.node\", {\n        expires: 120000\n      });\n      expect(transporter.channel.consume).toHaveBeenCalledWith(\"MOL-TEST.RES.node\", expect.any(Function), {\n        noAck: true\n      });\n      const consumeCb = transporter.channel.consume.mock.calls[0][1];\n      consumeCb({\n        content: Buffer.from(\"data\")\n      });\n      expect(transporter.incomingMessage).toHaveBeenCalledTimes(1);\n      expect(transporter.channel.ack).toHaveBeenCalledTimes(0);\n    });\n  });","file":"unit/transporters/amqp.spec.js","skipped":false,"dir":"test"},{"name":"check INFO.nodeID subscription","suites":["Test AmqpTransporter subscribe"],"updatePoint":{"line":328,"column":36},"line":328,"code":"  it(\"check INFO.nodeID subscription\", () => {\n    transporter.getTopicName = () => \"MOL-TEST.INFO.node\";\n\n    return transporter.subscribe(\"INFO\", \"node\").catch(protectReject).then(() => {\n      expect(transporter.channel.assertQueue).toHaveBeenCalledTimes(1);\n      expect(transporter.channel.consume).toHaveBeenCalledTimes(1);\n      expect(transporter.channel.assertQueue).toHaveBeenCalledWith(\"MOL-TEST.INFO.node\", {\n        autoDelete: true\n      });\n      expect(transporter.channel.consume).toHaveBeenCalledWith(\"MOL-TEST.INFO.node\", expect.any(Function), {\n        noAck: true\n      });\n      const consumeCb = transporter.channel.consume.mock.calls[0][1];\n      consumeCb({\n        content: Buffer.from(\"data\")\n      });\n      expect(transporter.incomingMessage).toHaveBeenCalledTimes(1);\n      expect(transporter.channel.ack).toHaveBeenCalledTimes(0);\n    });\n  });","file":"unit/transporters/amqp.spec.js","skipped":false,"dir":"test"},{"name":"check REQ.nodeID subscription","suites":["Test AmqpTransporter subscribe"],"updatePoint":{"line":348,"column":35},"line":348,"code":"  it(\"check REQ.nodeID subscription\", () => {\n    transporter.getTopicName = () => \"MOL-TEST.REQ.node\";\n\n    return transporter.subscribe(\"REQ\", \"node\").catch(protectReject).then(() => {\n      expect(transporter.channel.assertQueue).toHaveBeenCalledTimes(1);\n      expect(transporter.channel.consume).toHaveBeenCalledTimes(1);\n      expect(transporter.channel.assertQueue).toHaveBeenCalledWith(\"MOL-TEST.REQ.node\", {\n        expires: 120000\n      });\n      expect(transporter.channel.consume).toHaveBeenCalledWith(\"MOL-TEST.REQ.node\", expect.any(Function), {\n        noAck: false\n      });\n      const consumeCb = transporter.channel.consume.mock.calls[0][1];\n      consumeCb({\n        content: Buffer.from(\"data\")\n      });\n      expect(transporter.incomingMessage).toHaveBeenCalledTimes(1);\n      expect(transporter.channel.ack).toHaveBeenCalledTimes(1);\n    });\n  });","file":"unit/transporters/amqp.spec.js","skipped":false,"dir":"test"},{"name":"check EVENT subscription","suites":["Test AmqpTransporter subscribe"],"updatePoint":{"line":368,"column":30},"line":368,"code":"  it(\"check EVENT subscription\", () => {\n    return transporter.subscribe(\"EVENT\", \"node\").catch(protectReject).then(() => {\n      expect(transporter.channel.assertQueue).toHaveBeenCalledTimes(1);\n      expect(transporter.channel.assertExchange).toHaveBeenCalledTimes(0);\n      expect(transporter.channel.bindQueue).toHaveBeenCalledTimes(0);\n      expect(transporter.channel.consume).toHaveBeenCalledTimes(1);\n      expect(transporter.channel.assertQueue).toHaveBeenCalledWith(\"MOL-TEST.EVENT.node\", {\n        expires: 120000,\n        messageTtl: 3000\n      }); // use ttl option\n\n      expect(transporter.channel.consume).toHaveBeenCalledWith(\"MOL-TEST.EVENT.node\", expect.any(Function), {\n        noAck: true\n      });\n      const consumeCb = transporter.channel.consume.mock.calls[0][1];\n      consumeCb({\n        content: Buffer.from(\"data\")\n      });\n      expect(transporter.incomingMessage).toHaveBeenCalledTimes(1);\n      expect(transporter.channel.ack).toHaveBeenCalledTimes(0);\n    });\n  });","file":"unit/transporters/amqp.spec.js","skipped":false,"dir":"test"},{"name":"check HEARTBEAT subscription","suites":["Test AmqpTransporter subscribe"],"updatePoint":{"line":390,"column":34},"line":390,"code":"  it(\"check HEARTBEAT subscription\", () => {\n    return transporter.subscribe(\"HEARTBEAT\").catch(protectReject).then(() => {\n      expect(transporter.channel.assertQueue).toHaveBeenCalledTimes(1);\n      expect(transporter.channel.assertExchange).toHaveBeenCalledTimes(1);\n      expect(transporter.channel.bindQueue).toHaveBeenCalledTimes(1);\n      expect(transporter.channel.consume).toHaveBeenCalledTimes(1);\n      expect(transporter.channel.assertQueue).toHaveBeenCalledWith(\"MOL-TEST.HEARTBEAT.node\", {\n        autoDelete: true,\n        messageTtl: 4000\n      });\n      expect(transporter.channel.assertExchange).toHaveBeenCalledWith(\"MOL-TEST.HEARTBEAT\", \"fanout\", {});\n      expect(transporter.channel.bindQueue).toHaveBeenCalledWith(\"MOL-TEST.HEARTBEAT.node\", \"MOL-TEST.HEARTBEAT\", \"\");\n      expect(transporter.channel.consume).toHaveBeenCalledWith(\"MOL-TEST.HEARTBEAT.node\", expect.any(Function), {\n        noAck: true\n      });\n      const consumeCb = transporter.channel.consume.mock.calls[0][1];\n      consumeCb({\n        content: Buffer.from(\"data\")\n      });\n      expect(transporter.incomingMessage).toHaveBeenCalledTimes(1);\n      expect(transporter.channel.ack).toHaveBeenCalledTimes(0);\n    });\n  });","file":"unit/transporters/amqp.spec.js","skipped":false,"dir":"test"},{"name":"check  subscription","suites":["Test AmqpTransporter subscribe"],"updatePoint":{"line":414,"column":34},"line":414,"code":"    it(`check ${type} subscription`, () => {\n      return transporter.subscribe(type).catch(protectReject).then(() => {\n        expect(transporter.channel.assertQueue).toHaveBeenCalledTimes(1);\n        expect(transporter.channel.assertExchange).toHaveBeenCalledTimes(1);\n        expect(transporter.channel.bindQueue).toHaveBeenCalledTimes(1);\n        expect(transporter.channel.consume).toHaveBeenCalledTimes(1);\n        expect(transporter.channel.assertQueue).toHaveBeenCalledWith(`MOL-TEST.${type}.node`, {\n          autoDelete: true\n        });\n        expect(transporter.channel.assertExchange).toHaveBeenCalledWith(`MOL-TEST.${type}`, \"fanout\", {});\n        expect(transporter.channel.bindQueue).toHaveBeenCalledWith(`MOL-TEST.${type}.node`, `MOL-TEST.${type}`, \"\");\n        expect(transporter.channel.consume).toHaveBeenCalledWith(`MOL-TEST.${type}.node`, expect.any(Function), {\n          noAck: true\n        });\n        const consumeCb = transporter.channel.consume.mock.calls[0][1];\n        consumeCb({\n          content: Buffer.from(\"data\")\n        });\n        expect(transporter.incomingMessage).toHaveBeenCalledTimes(1);\n        expect(transporter.channel.ack).toHaveBeenCalledTimes(0);\n      });\n    });","file":"unit/transporters/amqp.spec.js","skipped":false,"dir":"test"},{"name":"check subscribeBalancedRequest","suites":["Test AmqpTransporter subscribe"],"updatePoint":{"line":437,"column":36},"line":437,"code":"  it(\"check subscribeBalancedRequest\", () => {\n    return transporter.subscribeBalancedRequest(\"posts.find\").catch(protectReject).then(() => {\n      expect(transporter.channel.assertQueue).toHaveBeenCalledTimes(1);\n      expect(transporter.channel.consume).toHaveBeenCalledTimes(1);\n      expect(transporter.channel.assertQueue).toHaveBeenCalledWith(\"MOL-TEST.REQB.posts.find\", {});\n      expect(transporter.channel.consume).toHaveBeenCalledWith(\"MOL-TEST.REQB.posts.find\", expect.any(Function), {});\n      const consumeCb = transporter.channel.consume.mock.calls[0][1];\n      consumeCb({\n        content: Buffer.from(\"data\")\n      });\n      expect(transporter.incomingMessage).toHaveBeenCalledTimes(1);\n      expect(transporter.channel.ack).toHaveBeenCalledTimes(1);\n    });\n  });","file":"unit/transporters/amqp.spec.js","skipped":false,"dir":"test"},{"name":"check subscribeBalancedEvent","suites":["Test AmqpTransporter subscribe"],"updatePoint":{"line":451,"column":34},"line":451,"code":"  it(\"check subscribeBalancedEvent\", () => {\n    return transporter.subscribeBalancedEvent(\"cache.clear\", \"posts\").catch(protectReject).then(() => {\n      expect(transporter.channel.assertQueue).toHaveBeenCalledTimes(1);\n      expect(transporter.channel.consume).toHaveBeenCalledTimes(1);\n      expect(transporter.channel.assertQueue).toHaveBeenCalledWith(\"MOL-TEST.EVENTB.posts.cache.clear\", {\n        expires: 120000,\n        messageTtl: 3000\n      });\n      expect(transporter.channel.consume).toHaveBeenCalledWith(\"MOL-TEST.EVENTB.posts.cache.clear\", expect.any(Function), {});\n      const consumeCb = transporter.channel.consume.mock.calls[0][1];\n      consumeCb({\n        content: Buffer.from(\"data\")\n      });\n      expect(transporter.incomingMessage).toHaveBeenCalledTimes(1);\n      expect(transporter.channel.ack).toHaveBeenCalledTimes(1);\n    });\n  });","file":"unit/transporters/amqp.spec.js","skipped":false,"dir":"test"},{"name":"check publish with target","suites":["Test AmqpTransporter publish"],"updatePoint":{"line":485,"column":31},"line":485,"code":"  it(\"check publish with target\", () => {\n    const packet = new P.Packet(P.PACKET_INFO, \"node2\", {});\n    return transporter.publish(packet).catch(protectReject).then(() => {\n      expect(transporter.channel.sendToQueue).toHaveBeenCalledTimes(1);\n      expect(transporter.channel.sendToQueue).toHaveBeenCalledWith(\"MOL-TEST.INFO.node2\", Buffer.from(\"json data\"), {});\n    });\n  });","file":"unit/transporters/amqp.spec.js","skipped":false,"dir":"test"},{"name":"check publish without target","suites":["Test AmqpTransporter publish"],"updatePoint":{"line":492,"column":34},"line":492,"code":"  it(\"check publish without target\", () => {\n    const packet = new P.Packet(P.PACKET_INFO, null, {});\n    return transporter.publish(packet).catch(protectReject).then(() => {\n      expect(transporter.channel.publish).toHaveBeenCalledTimes(1);\n      expect(transporter.channel.publish).toHaveBeenCalledWith(\"MOL-TEST.INFO\", \"\", Buffer.from(\"json data\"), {});\n      expect(transporter.serialize).toHaveBeenCalledTimes(1);\n      expect(transporter.serialize).toHaveBeenCalledWith(packet);\n    });\n  });","file":"unit/transporters/amqp.spec.js","skipped":false,"dir":"test"},{"name":"check publishBalancedEvent","suites":["Test AmqpTransporter publish"],"updatePoint":{"line":501,"column":32},"line":501,"code":"  it(\"check publishBalancedEvent\", () => {\n    const packet = new P.Packet(P.PACKET_EVENT, null, {\n      event: \"user.created\",\n      data: {\n        id: 5\n      },\n      groups: [\"mail\"]\n    });\n    return transporter.publishBalancedEvent(packet, \"mail\").catch(protectReject).then(() => {\n      expect(transporter.channel.sendToQueue).toHaveBeenCalledTimes(1);\n      expect(transporter.channel.sendToQueue).toHaveBeenCalledWith(\"MOL-TEST.EVENTB.mail.user.created\", Buffer.from(\"json data\"), {});\n      expect(transporter.serialize).toHaveBeenCalledTimes(1);\n      expect(transporter.serialize).toHaveBeenCalledWith(packet);\n    });\n  });","file":"unit/transporters/amqp.spec.js","skipped":false,"dir":"test"},{"name":"check publishBalancedRequest","suites":["Test AmqpTransporter publish"],"updatePoint":{"line":516,"column":34},"line":516,"code":"  it(\"check publishBalancedRequest\", () => {\n    const packet = new P.Packet(P.PACKET_REQUEST, null, {\n      action: \"posts.find\"\n    });\n    return transporter.publishBalancedRequest(packet).catch(protectReject).then(() => {\n      expect(transporter.channel.sendToQueue).toHaveBeenCalledTimes(1);\n      expect(transporter.channel.sendToQueue).toHaveBeenCalledWith(\"MOL-TEST.REQB.posts.find\", Buffer.from(\"json data\"), {});\n      expect(transporter.serialize).toHaveBeenCalledTimes(1);\n      expect(transporter.serialize).toHaveBeenCalledWith(packet);\n    });\n  });","file":"unit/transporters/amqp.spec.js","skipped":false,"dir":"test"},{"name":"check constructor with string param","suites":["Test AmqpTransporter constructor"],"updatePoint":{"line":32,"column":41},"line":32,"code":"  it(\"check constructor with string param\", () => {\n    let transporter = new Amqp10Transporter(\"amqp10://localhost\"); // console.log(new rhea.Container().createConnection().open());\n\n    expect(transporter).toBeDefined();\n    expect(transporter.opts).toEqual({\n      url: \"amqp10://localhost\",\n      prefetch: 1,\n      eventTimeToLive: null,\n      heartbeatTimeToLive: null,\n      messageOptions: {},\n      queueOptions: {},\n      connectionOptions: {},\n      topicOptions: {},\n      topicPrefix: \"topic://\"\n    });\n    expect(transporter.connected).toBe(false);\n    expect(transporter.hasBuiltInBalancer).toBe(true);\n    expect(transporter.connection).toBeNull();\n    expect(transporter.receivers).toHaveLength(0);\n  });","file":"unit/transporters/amqp10.spec.js","skipped":false,"dir":"test"},{"name":"check constructor with options","suites":["Test AmqpTransporter constructor"],"updatePoint":{"line":52,"column":36},"line":52,"code":"  it(\"check constructor with options\", () => {\n    let opts = {\n      url: \"amqp10://admin:admin@localhost:5672\",\n      prefetch: 3,\n      eventTimeToLive: 10000,\n      heartbeatTimeToLive: 30000,\n      messageOptions: {\n        ttl: 1\n      },\n      queueOptions: {\n        source: {\n          dynamic: true\n        }\n      }\n    };\n    let transporter = new Amqp10Transporter(opts);\n    expect(transporter.opts).toEqual(opts);\n  });","file":"unit/transporters/amqp10.spec.js","skipped":false,"dir":"test"},{"name":"check connect","suites":["Test AmqpTransporter connect & disconnect"],"updatePoint":{"line":85,"column":19},"line":85,"code":"  it(\"check connect\", () => {\n    return transporter.connect().catch(protectReject).then(() => {\n      expect(transporter.connection).toBeDefined();\n      expect(transporter.connected).toEqual(true); // expect(transporter.connection.on).toHaveBeenCalledTimes(4);\n      // expect(transporter.connection.on).toHaveBeenCalledWith(\"error\", expect.any(Function));\n      // expect(transporter.connection.on).toHaveBeenCalledWith(\"close\", expect.any(Function));\n      // expect(transporter.connection.on).toHaveBeenCalledWith(\"blocked\", expect.any(Function));\n      // expect(transporter.connection.on).toHaveBeenCalledWith(\"unblocked\", expect.any(Function));\n    });\n  });","file":"unit/transporters/amqp10.spec.js","skipped":false,"dir":"test"},{"name":"check failed connect","suites":["Test AmqpTransporter connect & disconnect"],"updatePoint":{"line":95,"column":26},"line":95,"code":"  it(\"check failed connect\", () => {\n    rhea.Connection.prototype.open = jest.fn(() => Promise.reject());\n    return transporter.connect().catch(protectReject).then(() => {\n      expect(transporter.connection).toBeNull();\n      expect(transporter.connected).toEqual(false);\n      rhea.Connection.prototype.open = jest.fn(() => Promise.resolve(new rhea.Connection()));\n    });\n  });","file":"unit/transporters/amqp10.spec.js","skipped":false,"dir":"test"},{"name":"check onConnected after connect","suites":["Test AmqpTransporter connect & disconnect"],"updatePoint":{"line":103,"column":37},"line":103,"code":"  it(\"check onConnected after connect\", () => {\n    transporter.onConnected = jest.fn(() => Promise.resolve());\n    return transporter.connect().catch(protectReject).then(() => {\n      expect(transporter.onConnected).toHaveBeenCalledTimes(1);\n      expect(transporter.onConnected).toHaveBeenCalledWith();\n    });\n  });","file":"unit/transporters/amqp10.spec.js","skipped":false,"dir":"test"},{"name":"check disconnect","suites":["Test AmqpTransporter connect & disconnect"],"updatePoint":{"line":110,"column":22},"line":110,"code":"  it(\"check disconnect\", () => {\n    transporter.receivers = [new rhea.Receiver(), new rhea.Receiver()];\n    return transporter.connect().catch(protectReject).then(() => {\n      let conCloseCb = transporter.connection.close;\n      let receivers = transporter.receivers;\n      transporter.disconnect().catch(protectReject).then(() => {\n        expect(transporter.connection).toBeNull();\n        expect(transporter.receivers).toHaveLength(0);\n        expect(conCloseCb).toHaveBeenCalledTimes(1);\n\n        for (let receiver of receivers) {\n          expect(receiver.close).toHaveBeenCalledTimes(1);\n        }\n      });\n    });\n  });","file":"unit/transporters/amqp10.spec.js","skipped":false,"dir":"test"},{"name":"should not call delivery.accept","suites":["Test AmqpTransporter message handler"],"updatePoint":{"line":146,"column":37},"line":146,"code":"  it(\"should not call delivery.accept\", () => {\n    let cb = transporter._consumeCB(\"REQ\", false);\n\n    let msg = {\n      message: {\n        body: \"msg\"\n      },\n      delivery: {\n        accept: jest.fn(),\n        reject: jest.fn()\n      }\n    };\n    cb(msg);\n    expect(transporter.incomingMessage).toHaveBeenCalledTimes(1);\n    expect(transporter.incomingMessage).toHaveBeenCalledWith(\"REQ\", msg.message.body);\n    expect(msg.delivery.accept).toHaveBeenCalledTimes(0);\n    expect(msg.delivery.reject).toHaveBeenCalledTimes(0);\n  });","file":"unit/transporters/amqp10.spec.js","skipped":false,"dir":"test"},{"name":"should call delivery.accept sync","suites":["Test AmqpTransporter message handler"],"updatePoint":{"line":164,"column":38},"line":164,"code":"  it(\"should call delivery.accept sync\", () => {\n    let cb = transporter._consumeCB(\"REQ\", true);\n\n    let msg = {\n      message: {\n        body: \"msg\"\n      },\n      delivery: {\n        accept: jest.fn(),\n        reject: jest.fn()\n      }\n    };\n    cb(msg);\n    expect(transporter.incomingMessage).toHaveBeenCalledTimes(1);\n    expect(transporter.incomingMessage).toHaveBeenCalledWith(\"REQ\", msg.message.body);\n    expect(msg.delivery.accept).toHaveBeenCalledTimes(1);\n    expect(msg.delivery.reject).toHaveBeenCalledTimes(0);\n  });","file":"unit/transporters/amqp10.spec.js","skipped":false,"dir":"test"},{"name":"should call delivery.accept async","suites":["Test AmqpTransporter message handler"],"updatePoint":{"line":182,"column":39},"line":182,"code":"  it(\"should call delivery.accept async\", () => {\n    transporter.incomingMessage = jest.fn(() => Promise.resolve());\n\n    let cb = transporter._consumeCB(\"REQ\", true);\n\n    let msg = {\n      message: {\n        body: \"msg\"\n      },\n      delivery: {\n        accept: jest.fn(),\n        reject: jest.fn()\n      }\n    };\n    cb(msg).then(() => {\n      expect(transporter.incomingMessage).toHaveBeenCalledTimes(1);\n      expect(transporter.incomingMessage).toHaveBeenCalledWith(\"REQ\", msg.message.body);\n      expect(msg.delivery.accept).toHaveBeenCalledTimes(1);\n      expect(msg.delivery.reject).toHaveBeenCalledTimes(0);\n    });\n  });","file":"unit/transporters/amqp10.spec.js","skipped":false,"dir":"test"},{"name":"should call delivery.reject","suites":["Test AmqpTransporter message handler"],"updatePoint":{"line":203,"column":33},"line":203,"code":"  it(\"should call delivery.reject\", () => {\n    transporter.incomingMessage = jest.fn(() => Promise.reject());\n\n    let cb = transporter._consumeCB(\"REQ\", true);\n\n    let msg = {\n      message: {\n        body: \"msg\"\n      },\n      delivery: {\n        accept: jest.fn(),\n        reject: jest.fn()\n      }\n    };\n    return cb(msg).catch(protectReject).then(() => {\n      expect(transporter.incomingMessage).toHaveBeenCalledTimes(1);\n      expect(msg.delivery.reject).toHaveBeenCalledTimes(1);\n      expect(msg.delivery.accept).toHaveBeenCalledTimes(0);\n    });\n  });","file":"unit/transporters/amqp10.spec.js","skipped":false,"dir":"test"},{"name":"check RES subscription","suites":["Test AmqpTransporter subscribe"],"updatePoint":{"line":244,"column":28},"line":244,"code":"  it(\"check RES subscription\", () => {\n    return transporter.subscribe(\"RES\", \"node\").catch(protectReject).then(() => {\n      expect(transporter.connection.createReceiver).toHaveBeenCalledTimes(1);\n      expect(transporter.connection.createReceiver).toHaveBeenCalledWith(expect.objectContaining({\n        source: {\n          address: \"MOL-TEST.RES.node\"\n        }\n      }));\n      expect(transporter.receivers[0].addCredit).toHaveBeenCalledTimes(1);\n      expect(transporter.receivers[0].on).toHaveBeenCalledTimes(10);\n      expect(transporter.receivers[0].on).toHaveBeenCalledWith(\"message\", expect.any(Function));\n      const consumeCb = transporter.receivers[0].on.mock.calls[9][1];\n      const delivery = {\n        accept: jest.fn(),\n        reject: jest.fn()\n      };\n      consumeCb({\n        message: {\n          body: Buffer.from(\"data\")\n        },\n        delivery\n      });\n      expect(transporter.incomingMessage).toHaveBeenCalledTimes(1);\n      expect(delivery.accept).toHaveBeenCalledTimes(0);\n    });\n  });","file":"unit/transporters/amqp10.spec.js","skipped":false,"dir":"test"},{"name":"check INFO.nodeID subscription","suites":["Test AmqpTransporter subscribe"],"updatePoint":{"line":270,"column":36},"line":270,"code":"  it(\"check INFO.nodeID subscription\", () => {\n    return transporter.subscribe(\"INFO\", \"node\").catch(protectReject).then(() => {\n      expect(transporter.connection.createReceiver).toHaveBeenCalledTimes(1);\n      expect(transporter.connection.createReceiver).toHaveBeenCalledWith(expect.objectContaining({\n        source: {\n          address: \"MOL-TEST.INFO.node\"\n        }\n      }));\n      expect(transporter.receivers[0].addCredit).toHaveBeenCalledTimes(1);\n      expect(transporter.receivers[0].on).toHaveBeenCalledTimes(12);\n      expect(transporter.receivers[0].on).toHaveBeenCalledWith(\"message\", expect.any(Function));\n      const consumeCb = transporter.receivers[0].on.mock.calls[11][1];\n      const delivery = {\n        accept: jest.fn(),\n        reject: jest.fn()\n      };\n      consumeCb({\n        message: {\n          body: Buffer.from(\"data\")\n        },\n        delivery\n      });\n      expect(transporter.incomingMessage).toHaveBeenCalledTimes(1);\n      expect(delivery.accept).toHaveBeenCalledTimes(0);\n    });\n  });","file":"unit/transporters/amqp10.spec.js","skipped":false,"dir":"test"},{"name":"check REQ.nodeID subscription","suites":["Test AmqpTransporter subscribe"],"updatePoint":{"line":296,"column":35},"line":296,"code":"  it(\"check REQ.nodeID subscription\", () => {\n    return transporter.subscribe(\"REQ\", \"node\").catch(protectReject).then(() => {\n      expect(transporter.connection.createReceiver).toHaveBeenCalledTimes(1);\n      expect(transporter.connection.createReceiver).toHaveBeenCalledWith(expect.objectContaining({\n        source: {\n          address: \"MOL-TEST.REQ.node\"\n        }\n      }));\n      expect(transporter.receivers[0].addCredit).toHaveBeenCalledTimes(1);\n      expect(transporter.receivers[0].on).toHaveBeenCalledTimes(14);\n      expect(transporter.receivers[0].on).toHaveBeenCalledWith(\"message\", expect.any(Function));\n      const consumeCb = transporter.receivers[0].on.mock.calls[13][1];\n      const delivery = {\n        accept: jest.fn(),\n        reject: jest.fn()\n      };\n      consumeCb({\n        message: {\n          body: Buffer.from(\"data\")\n        },\n        delivery\n      });\n      expect(transporter.incomingMessage).toHaveBeenCalledTimes(1);\n      expect(delivery.accept).toHaveBeenCalledTimes(1);\n    });\n  });","file":"unit/transporters/amqp10.spec.js","skipped":false,"dir":"test"},{"name":"check EVENT subscription","suites":["Test AmqpTransporter subscribe"],"updatePoint":{"line":322,"column":30},"line":322,"code":"  it(\"check EVENT subscription\", () => {\n    return transporter.subscribe(\"EVENT\", \"node\").catch(protectReject).then(() => {\n      expect(transporter.connection.createReceiver).toHaveBeenCalledTimes(1);\n      expect(transporter.connection.createReceiver).toHaveBeenCalledWith(expect.objectContaining({\n        source: {\n          address: \"MOL-TEST.EVENT.node\"\n        }\n      }));\n      expect(transporter.receivers[0].addCredit).toHaveBeenCalledTimes(1);\n      expect(transporter.receivers[0].on).toHaveBeenCalledTimes(16);\n      expect(transporter.receivers[0].on).toHaveBeenCalledWith(\"message\", expect.any(Function));\n      const consumeCb = transporter.receivers[0].on.mock.calls[15][1];\n      const delivery = {\n        accept: jest.fn(),\n        reject: jest.fn()\n      };\n      consumeCb({\n        message: {\n          body: Buffer.from(\"data\")\n        },\n        delivery\n      });\n      expect(transporter.incomingMessage).toHaveBeenCalledTimes(1);\n      expect(delivery.accept).toHaveBeenCalledTimes(0);\n    });\n  });","file":"unit/transporters/amqp10.spec.js","skipped":false,"dir":"test"},{"name":"check  subscription","suites":["Test AmqpTransporter subscribe"],"updatePoint":{"line":349,"column":34},"line":349,"code":"    it(`check ${type} subscription`, () => {\n      return transporter.subscribe(type).catch(protectReject).then(() => {\n        expect(transporter.connection.createReceiver).toHaveBeenCalledTimes(1);\n        expect(transporter.connection.createReceiver).toHaveBeenCalledWith(expect.objectContaining({\n          source: {\n            address: `topic://MOL-TEST.${type}`\n          }\n        }));\n        expect(transporter.receivers[0].on).toHaveBeenCalledTimes(18 + i * 2);\n        expect(transporter.receivers[0].on).toHaveBeenCalledWith(\"message\", expect.any(Function));\n        const consumeCb = transporter.receivers[0].on.mock.calls[17 + i * 2][1];\n        const delivery = {\n          accept: jest.fn(),\n          reject: jest.fn()\n        };\n        consumeCb({\n          message: {\n            body: Buffer.from(\"data\")\n          },\n          delivery\n        });\n        expect(transporter.incomingMessage).toHaveBeenCalledTimes(1);\n        expect(delivery.accept).toHaveBeenCalledTimes(0);\n      });\n    });","file":"unit/transporters/amqp10.spec.js","skipped":false,"dir":"test"},{"name":"check subscribeBalancedRequest","suites":["Test AmqpTransporter subscribe"],"updatePoint":{"line":375,"column":36},"line":375,"code":"  it(\"check subscribeBalancedRequest\", () => {\n    return transporter.subscribeBalancedRequest(\"posts.find\").catch(protectReject).then(() => {\n      expect(transporter.connection.createReceiver).toHaveBeenCalledTimes(1);\n      expect(transporter.connection.createReceiver).toHaveBeenCalledWith(expect.objectContaining({\n        source: {\n          address: \"MOL-TEST.REQB.posts.find\"\n        }\n      }));\n      expect(transporter.receivers[0].on).toHaveBeenCalledTimes(26);\n      expect(transporter.receivers[0].on).toHaveBeenCalledWith(\"message\", expect.any(Function));\n      const consumeCb = transporter.receivers[0].on.mock.calls[25][1];\n      const delivery = {\n        accept: jest.fn(),\n        reject: jest.fn()\n      };\n      consumeCb({\n        message: {\n          body: Buffer.from(\"data\")\n        },\n        delivery\n      });\n      expect(transporter.incomingMessage).toHaveBeenCalledTimes(1);\n      expect(delivery.accept).toHaveBeenCalledTimes(1);\n    });\n  });","file":"unit/transporters/amqp10.spec.js","skipped":false,"dir":"test"},{"name":"check subscribeBalancedEvent","suites":["Test AmqpTransporter subscribe"],"updatePoint":{"line":400,"column":34},"line":400,"code":"  it(\"check subscribeBalancedEvent\", () => {\n    return transporter.subscribeBalancedEvent(\"cache.clear\", \"posts\").catch(protectReject).then(() => {\n      expect(transporter.connection.createReceiver).toHaveBeenCalledTimes(1);\n      expect(transporter.connection.createReceiver).toHaveBeenCalledWith(expect.objectContaining({\n        source: {\n          address: \"MOL-TEST.EVENTB.posts.cache.clear\"\n        }\n      }));\n      expect(transporter.receivers[0].on).toHaveBeenCalledTimes(28);\n      expect(transporter.receivers[0].on).toHaveBeenCalledWith(\"message\", expect.any(Function));\n      const consumeCb = transporter.receivers[0].on.mock.calls[27][1];\n      const delivery = {\n        accept: jest.fn(),\n        reject: jest.fn()\n      };\n      consumeCb({\n        message: {\n          body: Buffer.from(\"data\")\n        },\n        delivery\n      });\n      expect(transporter.incomingMessage).toHaveBeenCalledTimes(1);\n      expect(delivery.accept).toHaveBeenCalledTimes(1);\n    });\n  });","file":"unit/transporters/amqp10.spec.js","skipped":false,"dir":"test"},{"name":"check publish with target","suites":["Test AmqpTransporter publish"],"updatePoint":{"line":441,"column":31},"line":441,"code":"  it(\"check publish with target\", () => {\n    const packet = new P.Packet(P.PACKET_INFO, \"node2\", {});\n    return transporter.publish(packet).catch(protectReject).then(() => {\n      return transporter.connection.createAwaitableSender.mock.results[0].value.then(sender => {\n        expect(transporter.connection.createAwaitableSender).toHaveBeenCalledTimes(1);\n        expect(transporter.connection.createAwaitableSender).toHaveBeenCalledWith(expect.objectContaining({\n          target: {\n            address: \"MOL-TEST.INFO.node2\"\n          }\n        }));\n        expect(sender.send).toHaveBeenCalledTimes(1);\n        expect(sender.send).toHaveBeenCalledWith(expect.objectContaining({\n          body: Buffer.from(\"json data\")\n        }));\n      });\n    });\n  });","file":"unit/transporters/amqp10.spec.js","skipped":false,"dir":"test"},{"name":"check publish without target","suites":["Test AmqpTransporter publish"],"updatePoint":{"line":458,"column":34},"line":458,"code":"  it(\"check publish without target\", () => {\n    const packet = new P.Packet(P.PACKET_INFO, null, {});\n    return transporter.publish(packet).catch(protectReject).then(() => {\n      return transporter.connection.createAwaitableSender.mock.results[0].value.then(sender => {\n        expect(transporter.connection.createAwaitableSender).toHaveBeenCalledTimes(1);\n        expect(transporter.connection.createAwaitableSender).toHaveBeenCalledWith(expect.objectContaining({\n          target: {\n            address: \"topic://MOL-TEST.INFO\"\n          }\n        }));\n        expect(sender.send).toHaveBeenCalledTimes(1);\n        expect(sender.send).toHaveBeenCalledWith(expect.objectContaining({\n          body: Buffer.from(\"json data\")\n        }));\n      });\n    });\n  });","file":"unit/transporters/amqp10.spec.js","skipped":false,"dir":"test"},{"name":"check publishBalancedEvent","suites":["Test AmqpTransporter publish"],"updatePoint":{"line":475,"column":32},"line":475,"code":"  it(\"check publishBalancedEvent\", () => {\n    const packet = new P.Packet(P.PACKET_EVENT, null, {\n      event: \"user.created\",\n      data: {\n        id: 5\n      },\n      groups: [\"mail\"]\n    });\n    return transporter.publishBalancedEvent(packet, \"mail\").catch(protectReject).then(() => {\n      return transporter.connection.createAwaitableSender.mock.results[0].value.then(sender => {\n        expect(transporter.connection.createAwaitableSender).toHaveBeenCalledTimes(1);\n        expect(transporter.connection.createAwaitableSender).toHaveBeenCalledWith(expect.objectContaining({\n          target: {\n            address: \"MOL-TEST.EVENTB.mail.user.created\"\n          }\n        }));\n        expect(sender.send).toHaveBeenCalledTimes(1);\n        expect(sender.send).toHaveBeenCalledWith(expect.objectContaining({\n          body: Buffer.from(\"json data\")\n        }));\n        expect(transporter.serialize).toHaveBeenCalledTimes(1);\n        expect(transporter.serialize).toHaveBeenCalledWith(packet);\n      });\n    });\n  });","file":"unit/transporters/amqp10.spec.js","skipped":false,"dir":"test"},{"name":"check publishBalancedRequest","suites":["Test AmqpTransporter publish"],"updatePoint":{"line":500,"column":34},"line":500,"code":"  it(\"check publishBalancedRequest\", () => {\n    const packet = new P.Packet(P.PACKET_REQUEST, null, {\n      action: \"posts.find\"\n    });\n    return transporter.publishBalancedRequest(packet).catch(protectReject).then(() => {\n      return transporter.connection.createAwaitableSender.mock.results[0].value.then(sender => {\n        expect(transporter.connection.createAwaitableSender).toHaveBeenCalledTimes(1);\n        expect(transporter.connection.createAwaitableSender).toHaveBeenCalledWith(expect.objectContaining({\n          target: {\n            address: \"MOL-TEST.REQB.posts.find\"\n          }\n        }));\n        expect(sender.send).toHaveBeenCalledTimes(1);\n        expect(sender.send).toHaveBeenCalledWith(expect.objectContaining({\n          body: Buffer.from(\"json data\")\n        }));\n        expect(transporter.serialize).toHaveBeenCalledTimes(1);\n        expect(transporter.serialize).toHaveBeenCalledWith(packet);\n      });\n    });\n  });","file":"unit/transporters/amqp10.spec.js","skipped":false,"dir":"test"},{"name":"check constructor","suites":["Test BaseTransporter"],"updatePoint":{"line":18,"column":23},"line":18,"code":"  it(\"check constructor\", () => {\n    let transporter = new BaseTransporter();\n    expect(transporter).toBeDefined();\n    expect(transporter.opts).toBeUndefined();\n    expect(transporter.connected).toBe(false);\n    expect(transporter.hasBuiltInBalancer).toBe(false);\n    expect(transporter.init).toBeDefined();\n    expect(transporter.connect).toBeDefined();\n    expect(transporter.onConnected).toBeDefined();\n    expect(transporter.disconnect).toBeDefined();\n    expect(transporter.subscribe).toBeDefined();\n    expect(transporter.subscribeBalancedRequest).toBeDefined();\n    expect(transporter.subscribeBalancedEvent).toBeDefined();\n    expect(transporter.unsubscribeFromBalancedCommands).toBeDefined();\n    expect(transporter.prepublish).toBeDefined();\n    expect(transporter.publish).toBeDefined();\n    expect(transporter.publishBalancedEvent).toBeDefined();\n    expect(transporter.publishBalancedRequest).toBeDefined();\n    expect(transporter.serialize).toBeDefined();\n    expect(transporter.deserialize).toBeDefined();\n  });","file":"unit/transporters/base.spec.js","skipped":false,"dir":"test"},{"name":"check constructor with options","suites":["Test BaseTransporter"],"updatePoint":{"line":39,"column":36},"line":39,"code":"  it(\"check constructor with options\", () => {\n    let opts = {};\n    let transporter = new BaseTransporter(opts);\n    expect(transporter).toBeDefined();\n    expect(transporter.opts).toBe(opts);\n  });","file":"unit/transporters/base.spec.js","skipped":false,"dir":"test"},{"name":"check init","suites":["Test BaseTransporter"],"updatePoint":{"line":45,"column":16},"line":45,"code":"  it(\"check init\", () => {\n    let broker = new ServiceBroker({\n      logger: false,\n      namespace: \"beta-test\",\n      nodeID: \"server1\"\n    });\n    let transporter = new BaseTransporter();\n    let transit = new Transit(broker, transporter);\n    let handler = jest.fn();\n    let handler2 = jest.fn();\n    transporter.init(transit, handler, handler2);\n    expect(transporter.transit).toBe(transit);\n    expect(transporter.broker).toBe(broker);\n    expect(transporter.nodeID).toBe(\"server1\");\n    expect(transporter.prefix).toBe(\"MOL-beta-test\");\n    expect(transporter.logger).toBeDefined();\n    expect(transporter.messageHandler).toBe(handler);\n    expect(transporter.afterConnect).toBe(handler2);\n  });","file":"unit/transporters/base.spec.js","skipped":false,"dir":"test"},{"name":"check onConnected","suites":["Test BaseTransporter"],"updatePoint":{"line":64,"column":23},"line":64,"code":"  it(\"check onConnected\", () => {\n    let transporter = new BaseTransporter();\n    let afterConnect = jest.fn();\n    expect(transporter.connected).toBe(false);\n    transporter.init(null, null, afterConnect);\n    transporter.onConnected();\n    expect(transporter.connected).toBe(true);\n    expect(afterConnect).toHaveBeenCalledTimes(1);\n    afterConnect.mockClear();\n    transporter.onConnected(true);\n    expect(afterConnect).toHaveBeenCalledTimes(1);\n    expect(afterConnect).toHaveBeenCalledWith(true);\n  });","file":"unit/transporters/base.spec.js","skipped":false,"dir":"test"},{"name":"check incomingMessage","suites":["Test BaseTransporter"],"updatePoint":{"line":77,"column":27},"line":77,"code":"  it(\"check incomingMessage\", () => {\n    let transporter = new BaseTransporter();\n    let p = {};\n    transporter.deserialize = jest.fn(() => p);\n    transporter.messageHandler = jest.fn();\n    transporter.incomingMessage(\"MOL.DISCOVER\", \"msg\");\n    expect(transporter.deserialize).toHaveBeenCalledTimes(1);\n    expect(transporter.deserialize).toHaveBeenCalledWith(\"MOL.DISCOVER\", \"msg\");\n    expect(transporter.messageHandler).toHaveBeenCalledTimes(1);\n    expect(transporter.messageHandler).toHaveBeenCalledWith(\"MOL.DISCOVER\", p);\n  });","file":"unit/transporters/base.spec.js","skipped":false,"dir":"test"},{"name":"check getTopicName","suites":["Test BaseTransporter"],"updatePoint":{"line":88,"column":24},"line":88,"code":"  it(\"check getTopicName\", () => {\n    let broker = new ServiceBroker({\n      logger: false,\n      namespace: \"beta-test\",\n      nodeID: \"server1\"\n    });\n    let transporter = new BaseTransporter();\n    new Transit(broker, transporter);\n    expect(transporter.getTopicName(\"REQ\")).toBe(\"MOL-beta-test.REQ\");\n    expect(transporter.getTopicName(\"REQ\", \"server-2\")).toBe(\"MOL-beta-test.REQ.server-2\");\n  });","file":"unit/transporters/base.spec.js","skipped":false,"dir":"test"},{"name":"should call subscribe with all topics","suites":["Test BaseTransporter"],"updatePoint":{"line":99,"column":43},"line":99,"code":"  it(\"should call subscribe with all topics\", () => {\n    let broker = new ServiceBroker({\n      logger: false,\n      namespace: \"beta-test\",\n      nodeID: \"server1\"\n    });\n    let transporter = new BaseTransporter();\n    new Transit(broker, transporter);\n    transporter.subscribe = jest.fn(() => Promise.resolve());\n    return transporter.makeSubscriptions([{\n      cmd: P.PACKET_DISCOVER\n    }, {\n      cmd: P.PACKET_DISCOVER,\n      nodeID: \"node1\"\n    }]).catch(protectReject).then(() => {\n      expect(transporter.subscribe).toHaveBeenCalledTimes(2);\n      expect(transporter.subscribe).toHaveBeenCalledWith(\"DISCOVER\", undefined);\n      expect(transporter.subscribe).toHaveBeenCalledWith(\"DISCOVER\", \"node1\");\n    });\n  });","file":"unit/transporters/base.spec.js","skipped":false,"dir":"test"},{"name":"check makeBalancedSubscriptions if hasBuiltInBalancer = FALSE","suites":["Test BaseTransporter"],"updatePoint":{"line":119,"column":67},"line":119,"code":"  it(\"check makeBalancedSubscriptions if hasBuiltInBalancer = FALSE\", () => {\n    let broker = new ServiceBroker({\n      logger: false,\n      namespace: \"beta-test\",\n      nodeID: \"server1\"\n    });\n    let transporter = new BaseTransporter();\n    new Transit(broker, transporter);\n    transporter.hasBuiltInBalancer = false;\n    transporter.unsubscribeFromBalancedCommands = jest.fn(() => Promise.resolve());\n    broker.getLocalNodeInfo = jest.fn(() => ({\n      services: [{\n        actions: {\n          \"posts.find\": {},\n          \"posts.get\": {}\n        }\n      }, {\n        name: \"users\",\n        events: {\n          \"user.created\": {},\n          \"user.updated\": {}\n        }\n      }, {// Empty\n      }]\n    }));\n    transporter.subscribeBalancedEvent = jest.fn();\n    transporter.subscribeBalancedRequest = jest.fn();\n    return transporter.makeBalancedSubscriptions().catch(protectReject).then(() => {\n      expect(transporter.unsubscribeFromBalancedCommands).toHaveBeenCalledTimes(0);\n      expect(broker.getLocalNodeInfo).toHaveBeenCalledTimes(0);\n      expect(transporter.subscribeBalancedRequest).toHaveBeenCalledTimes(0);\n      expect(transporter.subscribeBalancedEvent).toHaveBeenCalledTimes(0);\n    });\n  });","file":"unit/transporters/base.spec.js","skipped":false,"dir":"test"},{"name":"check makeBalancedSubscriptions if hasBuiltInBalancer = TRUE","suites":["Test BaseTransporter"],"updatePoint":{"line":153,"column":66},"line":153,"code":"  it(\"check makeBalancedSubscriptions if hasBuiltInBalancer = TRUE\", () => {\n    let broker = new ServiceBroker({\n      logger: false,\n      namespace: \"beta-test\",\n      nodeID: \"server1\"\n    });\n    let transporter = new BaseTransporter();\n    new Transit(broker, transporter);\n    transporter.hasBuiltInBalancer = true;\n    transporter.unsubscribeFromBalancedCommands = jest.fn(() => Promise.resolve());\n    broker.getLocalNodeInfo = jest.fn(() => ({\n      services: [{\n        actions: {\n          \"posts.find\": {},\n          \"posts.get\": {}\n        }\n      }, {\n        name: \"users\",\n        events: {\n          \"user.created\": {},\n          \"user.updated\": {}\n        }\n      }, {// Empty\n      }]\n    }));\n    transporter.subscribeBalancedEvent = jest.fn();\n    transporter.subscribeBalancedRequest = jest.fn();\n    return transporter.makeBalancedSubscriptions().catch(protectReject).then(() => {\n      expect(transporter.unsubscribeFromBalancedCommands).toHaveBeenCalledTimes(1);\n      expect(broker.getLocalNodeInfo).toHaveBeenCalledTimes(1);\n      expect(transporter.subscribeBalancedRequest).toHaveBeenCalledTimes(2);\n      expect(transporter.subscribeBalancedRequest).toHaveBeenCalledWith(\"posts.find\");\n      expect(transporter.subscribeBalancedRequest).toHaveBeenCalledWith(\"posts.get\");\n      expect(transporter.subscribeBalancedEvent).toHaveBeenCalledTimes(2);\n      expect(transporter.subscribeBalancedEvent).toHaveBeenCalledWith(\"user.created\", \"users\");\n      expect(transporter.subscribeBalancedEvent).toHaveBeenCalledWith(\"user.updated\", \"users\");\n    });\n  });","file":"unit/transporters/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_EVENT with target without groups","suites":["Test BaseTransporter","Test prepublish","Connected state"],"updatePoint":{"line":209,"column":60},"line":209,"code":"      it(\"check with PACKET_EVENT with target without groups\", () => {\n        let packet = new P.Packet(P.PACKET_EVENT, \"server-2\", {\n          event: \"user.created\"\n        });\n        return transporter.prepublish(packet).catch(protectReject).then(() => {\n          expect(transporter.publish).toHaveBeenCalledTimes(1);\n          expect(transporter.publishBalancedEvent).toHaveBeenCalledTimes(0);\n          expect(transporter.publishBalancedRequest).toHaveBeenCalledTimes(0);\n        });\n      });","file":"unit/transporters/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_EVENT with target with groups","suites":["Test BaseTransporter","Test prepublish","Connected state"],"updatePoint":{"line":219,"column":57},"line":219,"code":"      it(\"check with PACKET_EVENT with target with groups\", () => {\n        let packet = new P.Packet(P.PACKET_EVENT, \"server-2\", {\n          event: \"user.created\",\n          data: null,\n          groups: [\"users\", \"payments\"]\n        });\n        return transporter.prepublish(packet).catch(protectReject).then(() => {\n          expect(transporter.publish).toHaveBeenCalledTimes(1);\n          expect(transporter.publishBalancedEvent).toHaveBeenCalledTimes(0);\n          expect(transporter.publishBalancedRequest).toHaveBeenCalledTimes(0);\n        });\n      });","file":"unit/transporters/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_EVENT without target","suites":["Test BaseTransporter","Test prepublish","Connected state"],"updatePoint":{"line":231,"column":48},"line":231,"code":"      it(\"check with PACKET_EVENT without target\", () => {\n        let packet = new P.Packet(P.PACKET_EVENT, null, \"user.created\");\n        return transporter.prepublish(packet).catch(protectReject).then(() => {\n          expect(transporter.publish).toHaveBeenCalledTimes(1);\n          expect(transporter.publishBalancedEvent).toHaveBeenCalledTimes(0);\n          expect(transporter.publishBalancedRequest).toHaveBeenCalledTimes(0);\n        });\n      });","file":"unit/transporters/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_EVENT with target with groups","suites":["Test BaseTransporter","Test prepublish","Connected state"],"updatePoint":{"line":239,"column":57},"line":239,"code":"      it(\"check with PACKET_EVENT with target with groups\", () => {\n        let packet = new P.Packet(P.PACKET_EVENT, null, {\n          event: \"user.created\",\n          data: null,\n          groups: [\"users\", \"payments\"]\n        });\n        return transporter.prepublish(packet).catch(protectReject).then(() => {\n          expect(transporter.publish).toHaveBeenCalledTimes(0);\n          expect(transporter.publishBalancedEvent).toHaveBeenCalledTimes(2);\n          expect(transporter.publishBalancedRequest).toHaveBeenCalledTimes(0);\n        });\n      });","file":"unit/transporters/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_REQ without target","suites":["Test BaseTransporter","Test prepublish","Connected state"],"updatePoint":{"line":251,"column":46},"line":251,"code":"      it(\"check with PACKET_REQ without target\", () => {\n        let packet = new P.Packet(P.PACKET_REQUEST, null);\n        return transporter.prepublish(packet).catch(protectReject).then(() => {\n          expect(transporter.publish).toHaveBeenCalledTimes(0);\n          expect(transporter.publishBalancedEvent).toHaveBeenCalledTimes(0);\n          expect(transporter.publishBalancedRequest).toHaveBeenCalledTimes(1);\n        });\n      });","file":"unit/transporters/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_REQ with target","suites":["Test BaseTransporter","Test prepublish","Connected state"],"updatePoint":{"line":259,"column":43},"line":259,"code":"      it(\"check with PACKET_REQ with target\", () => {\n        let packet = new P.Packet(P.PACKET_REQUEST, \"server-2\");\n        return transporter.prepublish(packet).catch(protectReject).then(() => {\n          expect(transporter.publish).toHaveBeenCalledTimes(1);\n          expect(transporter.publishBalancedEvent).toHaveBeenCalledTimes(0);\n          expect(transporter.publishBalancedRequest).toHaveBeenCalledTimes(0);\n        });\n      });","file":"unit/transporters/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_PING","suites":["Test BaseTransporter","Test prepublish","Connected state"],"updatePoint":{"line":267,"column":32},"line":267,"code":"      it(\"check with PACKET_PING\", () => {\n        let packet = new P.Packet(P.PACKET_PING, null);\n        return transporter.prepublish(packet).catch(protectReject).then(() => {\n          expect(transporter.publish).toHaveBeenCalledTimes(1);\n          expect(transporter.publishBalancedEvent).toHaveBeenCalledTimes(0);\n          expect(transporter.publishBalancedRequest).toHaveBeenCalledTimes(0);\n        });\n      });","file":"unit/transporters/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_RESPONSE","suites":["Test BaseTransporter","Test prepublish","Connected state"],"updatePoint":{"line":275,"column":36},"line":275,"code":"      it(\"check with PACKET_RESPONSE\", () => {\n        let packet = new P.Packet(P.PACKET_RESPONSE, \"server-2\");\n        return transporter.prepublish(packet).catch(protectReject).then(() => {\n          expect(transporter.publish).toHaveBeenCalledTimes(1);\n          expect(transporter.publishBalancedEvent).toHaveBeenCalledTimes(0);\n          expect(transporter.publishBalancedRequest).toHaveBeenCalledTimes(0);\n        });\n      });","file":"unit/transporters/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_DISCOVER","suites":["Test BaseTransporter","Test prepublish","Connected state"],"updatePoint":{"line":283,"column":36},"line":283,"code":"      it(\"check with PACKET_DISCOVER\", () => {\n        let packet = new P.Packet(P.PACKET_DISCOVER, null);\n        return transporter.prepublish(packet).catch(protectReject).then(() => {\n          expect(transporter.publish).toHaveBeenCalledTimes(1);\n          expect(transporter.publishBalancedEvent).toHaveBeenCalledTimes(0);\n          expect(transporter.publishBalancedRequest).toHaveBeenCalledTimes(0);\n        });\n      });","file":"unit/transporters/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_INFO","suites":["Test BaseTransporter","Test prepublish","Connected state"],"updatePoint":{"line":291,"column":32},"line":291,"code":"      it(\"check with PACKET_INFO\", () => {\n        let packet = new P.Packet(P.PACKET_INFO, \"server-2\");\n        return transporter.prepublish(packet).catch(protectReject).then(() => {\n          expect(transporter.publish).toHaveBeenCalledTimes(1);\n          expect(transporter.publishBalancedEvent).toHaveBeenCalledTimes(0);\n          expect(transporter.publishBalancedRequest).toHaveBeenCalledTimes(0);\n        });\n      });","file":"unit/transporters/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_DISCONNECT","suites":["Test BaseTransporter","Test prepublish","Connected state"],"updatePoint":{"line":299,"column":38},"line":299,"code":"      it(\"check with PACKET_DISCONNECT\", () => {\n        transporter.publish.mockClear();\n        transporter.publishBalancedRequest.mockClear();\n        let packet = new P.Packet(P.PACKET_DISCONNECT, null);\n        return transporter.prepublish(packet).catch(protectReject).then(() => {\n          expect(transporter.publish).toHaveBeenCalledTimes(1);\n          expect(transporter.publishBalancedEvent).toHaveBeenCalledTimes(0);\n          expect(transporter.publishBalancedRequest).toHaveBeenCalledTimes(0);\n        });\n      });","file":"unit/transporters/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_HEARTBEAT","suites":["Test BaseTransporter","Test prepublish","Connected state"],"updatePoint":{"line":309,"column":37},"line":309,"code":"      it(\"check with PACKET_HEARTBEAT\", () => {\n        transporter.publish.mockClear();\n        transporter.publishBalancedRequest.mockClear();\n        let packet = new P.Packet(P.PACKET_HEARTBEAT, null);\n        return transporter.prepublish(packet).catch(protectReject).then(() => {\n          expect(transporter.publish).toHaveBeenCalledTimes(1);\n          expect(transporter.publishBalancedEvent).toHaveBeenCalledTimes(0);\n          expect(transporter.publishBalancedRequest).toHaveBeenCalledTimes(0);\n        });\n      });","file":"unit/transporters/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_PONG","suites":["Test BaseTransporter","Test prepublish","Connected state"],"updatePoint":{"line":319,"column":32},"line":319,"code":"      it(\"check with PACKET_PONG\", () => {\n        transporter.publish.mockClear();\n        transporter.publishBalancedRequest.mockClear();\n        let packet = new P.Packet(P.PACKET_PONG, null);\n        return transporter.prepublish(packet).catch(protectReject).then(() => {\n          expect(transporter.publish).toHaveBeenCalledTimes(1);\n          expect(transporter.publishBalancedEvent).toHaveBeenCalledTimes(0);\n          expect(transporter.publishBalancedRequest).toHaveBeenCalledTimes(0);\n        });\n      });","file":"unit/transporters/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_EVENT with target without groups","suites":["Test BaseTransporter","Test prepublish","Disconnected state"],"updatePoint":{"line":363,"column":60},"line":363,"code":"      it(\"check with PACKET_EVENT with target without groups\", () => {\n        let packet = new P.Packet(P.PACKET_EVENT, \"server-2\", {\n          event: \"user.created\"\n        });\n        return transporter.prepublish(packet).catch(expectBrokerDisconnectedError).then(expectNoPublishes);\n      });","file":"unit/transporters/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_EVENT with target with groups","suites":["Test BaseTransporter","Test prepublish","Disconnected state"],"updatePoint":{"line":369,"column":57},"line":369,"code":"      it(\"check with PACKET_EVENT with target with groups\", () => {\n        let packet = new P.Packet(P.PACKET_EVENT, \"server-2\", {\n          event: \"user.created\",\n          data: null,\n          groups: [\"users\", \"payments\"]\n        });\n        return transporter.prepublish(packet).catch(expectBrokerDisconnectedError).then(expectNoPublishes);\n      });","file":"unit/transporters/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_EVENT without target","suites":["Test BaseTransporter","Test prepublish","Disconnected state"],"updatePoint":{"line":377,"column":48},"line":377,"code":"      it(\"check with PACKET_EVENT without target\", () => {\n        let packet = new P.Packet(P.PACKET_EVENT, null, \"user.created\");\n        return transporter.prepublish(packet).catch(expectBrokerDisconnectedError).then(expectNoPublishes);\n      });","file":"unit/transporters/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_EVENT with target with groups","suites":["Test BaseTransporter","Test prepublish","Disconnected state"],"updatePoint":{"line":381,"column":57},"line":381,"code":"      it(\"check with PACKET_EVENT with target with groups\", () => {\n        let packet = new P.Packet(P.PACKET_EVENT, null, {\n          event: \"user.created\",\n          data: null,\n          groups: [\"users\", \"payments\"]\n        });\n        return transporter.prepublish(packet).catch(expectBrokerDisconnectedError).then(expectNoPublishes);\n      });","file":"unit/transporters/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_REQ without target","suites":["Test BaseTransporter","Test prepublish","Disconnected state"],"updatePoint":{"line":389,"column":46},"line":389,"code":"      it(\"check with PACKET_REQ without target\", () => {\n        let packet = new P.Packet(P.PACKET_REQUEST, null);\n        return transporter.prepublish(packet).catch(expectBrokerDisconnectedError).then(expectNoPublishes);\n      });","file":"unit/transporters/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_REQ with target","suites":["Test BaseTransporter","Test prepublish","Disconnected state"],"updatePoint":{"line":393,"column":43},"line":393,"code":"      it(\"check with PACKET_REQ with target\", () => {\n        let packet = new P.Packet(P.PACKET_REQUEST, \"server-2\");\n        return transporter.prepublish(packet).catch(expectBrokerDisconnectedError).then(expectNoPublishes);\n      });","file":"unit/transporters/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_PING","suites":["Test BaseTransporter","Test prepublish","Disconnected state"],"updatePoint":{"line":397,"column":32},"line":397,"code":"      it(\"check with PACKET_PING\", () => {\n        let packet = new P.Packet(P.PACKET_PING, null);\n        return transporter.prepublish(packet).catch(expectBrokerDisconnectedError).then(expectNoPublishes);\n      });","file":"unit/transporters/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_RESPONSE","suites":["Test BaseTransporter","Test prepublish","Disconnected state"],"updatePoint":{"line":401,"column":36},"line":401,"code":"      it(\"check with PACKET_RESPONSE\", () => {\n        let packet = new P.Packet(P.PACKET_RESPONSE, \"server-2\");\n        return transporter.prepublish(packet).catch(expectNoError).then(expectNoPublishes);\n      });","file":"unit/transporters/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_DISCOVER","suites":["Test BaseTransporter","Test prepublish","Disconnected state"],"updatePoint":{"line":405,"column":36},"line":405,"code":"      it(\"check with PACKET_DISCOVER\", () => {\n        let packet = new P.Packet(P.PACKET_DISCOVER, null);\n        return transporter.prepublish(packet).catch(expectNoError).then(expectNoPublishes);\n      });","file":"unit/transporters/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_INFO","suites":["Test BaseTransporter","Test prepublish","Disconnected state"],"updatePoint":{"line":409,"column":32},"line":409,"code":"      it(\"check with PACKET_INFO\", () => {\n        let packet = new P.Packet(P.PACKET_INFO, \"server-2\");\n        return transporter.prepublish(packet).catch(expectNoError).then(expectNoPublishes);\n      });","file":"unit/transporters/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_DISCONNECT","suites":["Test BaseTransporter","Test prepublish","Disconnected state"],"updatePoint":{"line":413,"column":38},"line":413,"code":"      it(\"check with PACKET_DISCONNECT\", () => {\n        let packet = new P.Packet(P.PACKET_DISCONNECT, null);\n        return transporter.prepublish(packet).catch(expectNoError).then(expectNoPublishes);\n      });","file":"unit/transporters/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_HEARTBEAT","suites":["Test BaseTransporter","Test prepublish","Disconnected state"],"updatePoint":{"line":417,"column":37},"line":417,"code":"      it(\"check with PACKET_HEARTBEAT\", () => {\n        let packet = new P.Packet(P.PACKET_HEARTBEAT, null);\n        return transporter.prepublish(packet).catch(expectNoError).then(expectNoPublishes);\n      });","file":"unit/transporters/base.spec.js","skipped":false,"dir":"test"},{"name":"check with PACKET_PONG","suites":["Test BaseTransporter","Test prepublish","Disconnected state"],"updatePoint":{"line":421,"column":32},"line":421,"code":"      it(\"check with PACKET_PONG\", () => {\n        let packet = new P.Packet(P.PACKET_PONG, null);\n        return transporter.prepublish(packet).catch(expectNoError).then(expectNoPublishes);\n      });","file":"unit/transporters/base.spec.js","skipped":false,"dir":"test"},{"name":"should set ver & sender in payload","suites":["Test BaseTransporter","Test serialize"],"updatePoint":{"line":436,"column":42},"line":436,"code":"    it(\"should set ver & sender in payload\", () => {\n      let packet = new P.Packet(P.PACKET_EVENT);\n      expect(transporter.serialize(packet)).toBe(\"serialized\");\n      expect(broker.serializer.serialize).toHaveBeenCalledTimes(1);\n      expect(broker.serializer.serialize).toHaveBeenCalledWith({\n        sender: \"server1\",\n        ver: \"4\"\n      }, P.PACKET_EVENT);\n    });","file":"unit/transporters/base.spec.js","skipped":false,"dir":"test"},{"name":"should call deserialize","suites":["Test BaseTransporter","Test deserialize"],"updatePoint":{"line":458,"column":31},"line":458,"code":"    it(\"should call deserialize\", () => {\n      const msg = \"incoming data\";\n      let packet = transporter.deserialize(P.PACKET_INFO, msg);\n      expect(packet).toBeDefined();\n      expect(packet.type).toBe(\"INFO\");\n      expect(packet.payload).toEqual({\n        msg: \"deserialized\",\n        type: \"INFO\"\n      });\n      expect(broker.serializer.deserialize).toHaveBeenCalledTimes(1);\n      expect(broker.serializer.deserialize).toHaveBeenCalledWith(\"incoming data\", P.PACKET_INFO);\n    });","file":"unit/transporters/base.spec.js","skipped":false,"dir":"test"},{"name":"check constructor","suites":["Test FakeTransporter"],"updatePoint":{"line":18,"column":23},"line":18,"code":"  it(\"check constructor\", () => {\n    const transporter = new FakeTransporter();\n    expect(transporter).toBeDefined();\n    expect(transporter.bus).toBeDefined();\n  });","file":"unit/transporters/fake.spec.js","skipped":false,"dir":"test"},{"name":"check connect","suites":["Test FakeTransporter"],"updatePoint":{"line":23,"column":19},"line":23,"code":"  it(\"check connect\", () => {\n    const transporter = new FakeTransporter();\n    transporter.init(transit);\n    let p = transporter.connect();\n    expect(isPromise(p)).toBe(true);\n    expect(transporter.connected).toBe(true);\n    return p;\n  });","file":"unit/transporters/fake.spec.js","skipped":false,"dir":"test"},{"name":"check disconnect","suites":["Test FakeTransporter"],"updatePoint":{"line":31,"column":22},"line":31,"code":"  it(\"check disconnect\", () => {\n    const transporter = new FakeTransporter();\n    transporter.init(transit);\n    transporter.disconnect();\n    expect(transporter.connected).toBe(false);\n  });","file":"unit/transporters/fake.spec.js","skipped":false,"dir":"test"},{"name":"check subscribe","suites":["Test FakeTransporter"],"updatePoint":{"line":37,"column":21},"line":37,"code":"  it(\"check subscribe\", () => {\n    const opts = {};\n    const msgHandler = jest.fn();\n    const transporter = new FakeTransporter(opts);\n    broker.namespace = \"TEST\";\n    transporter.init(transit, msgHandler);\n    let subCb;\n    transporter.bus.on = jest.fn((name, cb) => subCb = cb);\n    transporter.incomingMessage = jest.fn();\n    transporter.subscribe(\"REQ\", \"node\");\n    expect(transporter.bus.on).toHaveBeenCalledTimes(1);\n    expect(transporter.bus.on).toHaveBeenCalledWith(\"MOL-TEST.REQ.node\", expect.any(Function)); // Test subscribe callback\n\n    subCb('{ sender: \"node1\" }');\n    expect(transporter.incomingMessage).toHaveBeenCalledTimes(1);\n    expect(transporter.incomingMessage).toHaveBeenCalledWith(\"REQ\", '{ sender: \"node1\" }');\n  });","file":"unit/transporters/fake.spec.js","skipped":false,"dir":"test"},{"name":"check publish","suites":["Test FakeTransporter"],"updatePoint":{"line":54,"column":19},"line":54,"code":"  it(\"check publish\", () => {\n    const transporter = new FakeTransporter();\n    transporter.init(new Transit(new ServiceBroker({\n      logger: false,\n      nodeID: \"node1\"\n    })));\n    transporter.bus.emit = jest.fn();\n    transporter.serialize = jest.fn(() => \"serialized data\");\n    const packet = new P.Packet(P.PACKET_INFO, \"node2\", {\n      services: {}\n    });\n    transporter.publish(packet);\n    expect(transporter.bus.emit).toHaveBeenCalledTimes(1);\n    expect(transporter.bus.emit).toHaveBeenCalledWith(\"MOL.INFO.node2\", \"serialized data\");\n    expect(transporter.serialize).toHaveBeenCalledTimes(1);\n    expect(transporter.serialize).toHaveBeenCalledWith(packet);\n  });","file":"unit/transporters/fake.spec.js","skipped":false,"dir":"test"},{"name":"should resolve null from undefined","suites":["Test Transporter resolver"],"updatePoint":{"line":8,"column":40},"line":8,"code":"  it(\"should resolve null from undefined\", () => {\n    let trans = Transporters.resolve();\n    expect(trans).toBeNull();\n  });","file":"unit/transporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve NATSTransporter from connection string","suites":["Test Transporter resolver","Resolve NATS transporter"],"updatePoint":{"line":13,"column":61},"line":13,"code":"    it(\"should resolve NATSTransporter from connection string\", () => {\n      let trans = Transporters.resolve(\"nats://localhost:4222\");\n      expect(trans).toBeInstanceOf(Transporters.NATS);\n    });","file":"unit/transporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve NATSTransporter from string","suites":["Test Transporter resolver","Resolve NATS transporter"],"updatePoint":{"line":17,"column":50},"line":17,"code":"    it(\"should resolve NATSTransporter from string\", () => {\n      let trans = Transporters.resolve(\"NATS\");\n      expect(trans).toBeInstanceOf(Transporters.NATS);\n    });","file":"unit/transporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve NATSTransporter from obj without type","suites":["Test Transporter resolver","Resolve NATS transporter"],"updatePoint":{"line":21,"column":60},"line":21,"code":"    it(\"should resolve NATSTransporter from obj without type\", () => {\n      let options = {\n        url: \"nats://localhost:4222\"\n      };\n      let trans = Transporters.resolve({\n        options\n      });\n      expect(trans).toBeInstanceOf(Transporters.NATS);\n      expect(trans.opts).toEqual({\n        maxReconnectAttempts: -1,\n        preserveBuffers: true,\n        url: \"nats://localhost:4222\"\n      });\n    });","file":"unit/transporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve MQTTTransporter from connection string","suites":["Test Transporter resolver","Resolve MQTT transporter"],"updatePoint":{"line":37,"column":61},"line":37,"code":"    it(\"should resolve MQTTTransporter from connection string\", () => {\n      let trans = Transporters.resolve(\"mqtt://localhost\");\n      expect(trans).toBeInstanceOf(Transporters.MQTT);\n    });","file":"unit/transporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve MQTTTransporter from SSL connection string","suites":["Test Transporter resolver","Resolve MQTT transporter"],"updatePoint":{"line":41,"column":65},"line":41,"code":"    it(\"should resolve MQTTTransporter from SSL connection string\", () => {\n      let trans = Transporters.resolve(\"mqtts://localhost\");\n      expect(trans).toBeInstanceOf(Transporters.MQTT);\n    });","file":"unit/transporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve MQTTTransporter from string","suites":["Test Transporter resolver","Resolve MQTT transporter"],"updatePoint":{"line":45,"column":50},"line":45,"code":"    it(\"should resolve MQTTTransporter from string\", () => {\n      let trans = Transporters.resolve(\"mqtt\");\n      expect(trans).toBeInstanceOf(Transporters.MQTT);\n    });","file":"unit/transporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve MQTTransporter from obj","suites":["Test Transporter resolver","Resolve MQTT transporter"],"updatePoint":{"line":49,"column":46},"line":49,"code":"    it(\"should resolve MQTTransporter from obj\", () => {\n      let options = {\n        host: \"localhost\",\n        port: 1833\n      };\n      let trans = Transporters.resolve({\n        type: \"mqtt\",\n        options\n      });\n      expect(trans).toBeInstanceOf(Transporters.MQTT);\n      expect(trans.opts).toEqual({\n        host: \"localhost\",\n        port: 1833\n      });\n    });","file":"unit/transporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve RedisTransporter from connection string","suites":["Test Transporter resolver","Resolve Redis transporter"],"updatePoint":{"line":66,"column":62},"line":66,"code":"    it(\"should resolve RedisTransporter from connection string\", () => {\n      let trans = Transporters.resolve(\"redis://localhost\");\n      expect(trans).toBeInstanceOf(Transporters.Redis);\n    });","file":"unit/transporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve RedisTransporter from SSL connection string","suites":["Test Transporter resolver","Resolve Redis transporter"],"updatePoint":{"line":70,"column":66},"line":70,"code":"    it(\"should resolve RedisTransporter from SSL connection string\", () => {\n      let trans = Transporters.resolve(\"rediss://localhost\");\n      expect(trans).toBeInstanceOf(Transporters.Redis);\n    });","file":"unit/transporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve RedisTransporter from string","suites":["Test Transporter resolver","Resolve Redis transporter"],"updatePoint":{"line":74,"column":51},"line":74,"code":"    it(\"should resolve RedisTransporter from string\", () => {\n      let trans = Transporters.resolve(\"Redis\");\n      expect(trans).toBeInstanceOf(Transporters.Redis);\n    });","file":"unit/transporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve RedisTransporter from obj with Redis type","suites":["Test Transporter resolver","Resolve Redis transporter"],"updatePoint":{"line":78,"column":64},"line":78,"code":"    it(\"should resolve RedisTransporter from obj with Redis type\", () => {\n      let options = {\n        db: 3\n      };\n      let trans = Transporters.resolve({\n        type: \"Redis\",\n        options\n      });\n      expect(trans).toBeInstanceOf(Transporters.Redis);\n      expect(trans.opts).toEqual({\n        db: 3\n      });\n    });","file":"unit/transporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve AMQPTransporter from class name","suites":["Test Transporter resolver","Resolve AMQP transporter"],"updatePoint":{"line":93,"column":54},"line":93,"code":"    it(\"should resolve AMQPTransporter from class name\", () => {\n      let trans = Transporters.resolve(\"amqp\");\n      expect(trans).toBeInstanceOf(Transporters.AMQP);\n    });","file":"unit/transporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve AMQPTransporter from connection string","suites":["Test Transporter resolver","Resolve AMQP transporter"],"updatePoint":{"line":97,"column":61},"line":97,"code":"    it(\"should resolve AMQPTransporter from connection string\", () => {\n      let trans = Transporters.resolve(\"amqps://localhost:5672\");\n      expect(trans).toBeInstanceOf(Transporters.AMQP);\n    });","file":"unit/transporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve AMQPTransporter from SSLconnection string","suites":["Test Transporter resolver","Resolve AMQP transporter"],"updatePoint":{"line":101,"column":64},"line":101,"code":"    it(\"should resolve AMQPTransporter from SSLconnection string\", () => {\n      let trans = Transporters.resolve(\"amqp://localhost:5672\");\n      expect(trans).toBeInstanceOf(Transporters.AMQP);\n    });","file":"unit/transporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve AMQPTransporter from obj","suites":["Test Transporter resolver","Resolve AMQP transporter"],"updatePoint":{"line":105,"column":47},"line":105,"code":"    it(\"should resolve AMQPTransporter from obj\", () => {\n      let options = {\n        url: \"amqp://localhost\"\n      };\n      let trans = Transporters.resolve({\n        type: \"AMQP\",\n        options\n      });\n      expect(trans).toBeInstanceOf(Transporters.AMQP);\n      expect(trans.opts).toEqual({\n        prefetch: 1,\n        heartbeatTimeToLive: null,\n        eventTimeToLive: null,\n        url: [\"amqp://localhost\"],\n        exchangeOptions: {},\n        messageOptions: {},\n        queueOptions: {},\n        consumeOptions: {},\n        autoDeleteQueues: 120000\n      });\n    });","file":"unit/transporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve KafkaTransporter from connection string","suites":["Test Transporter resolver","Resolve Kafka transporter"],"updatePoint":{"line":128,"column":62},"line":128,"code":"    it(\"should resolve KafkaTransporter from connection string\", () => {\n      let trans = Transporters.resolve(\"kafka\");\n      expect(trans).toBeInstanceOf(Transporters.Kafka);\n    });","file":"unit/transporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve KafkaTransporter from connection string","suites":["Test Transporter resolver","Resolve Kafka transporter"],"updatePoint":{"line":132,"column":62},"line":132,"code":"    it(\"should resolve KafkaTransporter from connection string\", () => {\n      let trans = Transporters.resolve(\"kafka://localhost:2181\");\n      expect(trans).toBeInstanceOf(Transporters.Kafka);\n      expect(trans.opts).toEqual({\n        host: \"localhost:2181\",\n        client: {\n          kafkaHost: \"localhost:2181\"\n        },\n        consumer: {},\n        customPartitioner: undefined,\n        producer: {},\n        publish: {\n          attributes: 0,\n          partition: 0\n        }\n      });\n    });","file":"unit/transporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve KafkaTransporter from obj","suites":["Test Transporter resolver","Resolve Kafka transporter"],"updatePoint":{"line":149,"column":48},"line":149,"code":"    it(\"should resolve KafkaTransporter from obj\", () => {\n      let options = {\n        host: \"localhost:2181\",\n        publish: {\n          partition: 2\n        }\n      };\n      let trans = Transporters.resolve({\n        type: \"Kafka\",\n        options\n      });\n      expect(trans).toBeInstanceOf(Transporters.Kafka);\n      expect(trans.opts).toEqual({\n        host: \"localhost:2181\",\n        client: {\n          kafkaHost: \"localhost:2181\"\n        },\n        consumer: {},\n        customPartitioner: undefined,\n        producer: {},\n        publish: {\n          attributes: 0,\n          partition: 2\n        }\n      });\n    });","file":"unit/transporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve NatsStreamingTransporter from connection string","suites":["Test Transporter resolver","Resolve NATS Streaming transporter"],"updatePoint":{"line":177,"column":70},"line":177,"code":"    it(\"should resolve NatsStreamingTransporter from connection string\", () => {\n      let trans = Transporters.resolve(\"stan://localhost:4222\");\n      expect(trans).toBeInstanceOf(Transporters.STAN);\n    });","file":"unit/transporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve NatsStreamingTransporter from string","suites":["Test Transporter resolver","Resolve NATS Streaming transporter"],"updatePoint":{"line":181,"column":59},"line":181,"code":"    it(\"should resolve NatsStreamingTransporter from string\", () => {\n      let trans = Transporters.resolve(\"STAN\");\n      expect(trans).toBeInstanceOf(Transporters.STAN);\n    });","file":"unit/transporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve NatsStreamingTransporter from obj without type","suites":["Test Transporter resolver","Resolve NATS Streaming transporter"],"updatePoint":{"line":185,"column":69},"line":185,"code":"    it(\"should resolve NatsStreamingTransporter from obj without type\", () => {\n      let options = {\n        url: \"stan://localhost:4222\"\n      };\n      let trans = Transporters.resolve({\n        type: \"STAN\",\n        options\n      });\n      expect(trans).toBeInstanceOf(Transporters.STAN);\n      expect(trans.opts).toEqual({\n        clusterID: \"test-cluster\",\n        preserveBuffers: true,\n        url: \"stan://localhost:4222\"\n      });\n    });","file":"unit/transporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve TcpTransporter from connection string","suites":["Test Transporter resolver","Resolve TCP transporter"],"updatePoint":{"line":202,"column":60},"line":202,"code":"    it(\"should resolve TcpTransporter from connection string\", () => {\n      let trans = Transporters.resolve(\"tcp://192.168.0.100:6000\");\n      expect(trans).toBeInstanceOf(Transporters.TCP);\n      expect(trans.opts.urls).toBe(\"tcp://192.168.0.100:6000\");\n    });","file":"unit/transporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve TcpTransporter from string","suites":["Test Transporter resolver","Resolve TCP transporter"],"updatePoint":{"line":207,"column":49},"line":207,"code":"    it(\"should resolve TcpTransporter from string\", () => {\n      let trans = Transporters.resolve(\"TCP\");\n      expect(trans).toBeInstanceOf(Transporters.TCP);\n    });","file":"unit/transporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve TcpTransporter from obj without type","suites":["Test Transporter resolver","Resolve TCP transporter"],"updatePoint":{"line":211,"column":59},"line":211,"code":"    it(\"should resolve TcpTransporter from obj without type\", () => {\n      let options = {\n        port: 1234,\n        udpPeriod: 5,\n        udpBroadcast: true,\n        udpBindAddress: \"192.168.0.100\"\n      };\n      let trans = Transporters.resolve({\n        type: \"TCP\",\n        options\n      });\n      expect(trans).toBeInstanceOf(Transporters.TCP);\n      expect(trans.opts).toEqual({\n        gossipPeriod: 2,\n        maxConnections: 32,\n        maxPacketSize: 1048576,\n        port: 1234,\n        udpBindAddress: \"192.168.0.100\",\n        udpBroadcast: true,\n        udpDiscovery: true,\n        udpMaxDiscovery: 0,\n        udpMulticast: \"239.0.0.0\",\n        udpMulticastTTL: 1,\n        udpPeriod: 5,\n        udpPort: 4445,\n        udpReuseAddr: true,\n        urls: null,\n        useHostname: true\n      });\n    });","file":"unit/transporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should throw error if type if not correct","suites":["Test Transporter resolver","Resolve TCP transporter"],"updatePoint":{"line":241,"column":49},"line":241,"code":"    it(\"should throw error if type if not correct\", () => {\n      expect(() => {\n        Transporters.resolve(\"xyz\");\n      }).toThrowError(BrokerOptionsError);\n      expect(() => {\n        Transporters.resolve({\n          type: \"xyz\"\n        });\n      }).toThrowError(BrokerOptionsError);\n    });","file":"unit/transporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should throw error if type if not correct","suites":["Test Transporters register"],"updatePoint":{"line":256,"column":47},"line":256,"code":"  it(\"should throw error if type if not correct\", () => {\n    expect(() => {\n      Transporters.resolve(\"MyCustom\");\n    }).toThrowError(BrokerOptionsError);\n  });","file":"unit/transporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should register new type","suites":["Test Transporters register"],"updatePoint":{"line":261,"column":30},"line":261,"code":"  it(\"should register new type\", () => {\n    Transporters.register(\"MyCustom\", MyCustom);\n    expect(Transporters.MyCustom).toBe(MyCustom);\n  });","file":"unit/transporters/index.spec.js","skipped":false,"dir":"test"},{"name":"should find the new type","suites":["Test Transporters register"],"updatePoint":{"line":265,"column":30},"line":265,"code":"  it(\"should find the new type\", () => {\n    const transporter = Transporters.resolve(\"MyCustom\");\n    expect(transporter).toBeInstanceOf(MyCustom);\n  });","file":"unit/transporters/index.spec.js","skipped":false,"dir":"test"},{"name":"check constructor","suites":["Test KafkaTransporter constructor"],"updatePoint":{"line":43,"column":23},"line":43,"code":"  it(\"check constructor\", () => {\n    let transporter = new KafkaTransporter();\n    expect(transporter).toBeDefined();\n    expect(transporter.opts).toEqual({\n      host: undefined,\n      client: {\n        noAckBatchOptions: undefined,\n        sslOptions: undefined,\n        zkOptions: undefined\n      },\n      customPartitioner: undefined,\n      producer: {},\n      consumer: {},\n      publish: {\n        attributes: 0,\n        partition: 0\n      }\n    });\n    expect(transporter.connected).toBe(false);\n    expect(transporter.client).toBeNull();\n    expect(transporter.producer).toBeNull();\n    expect(transporter.consumer).toBeNull();\n  });","file":"unit/transporters/kafka.spec.js","skipped":false,"dir":"test"},{"name":"check constructor with string param","suites":["Test KafkaTransporter constructor"],"updatePoint":{"line":66,"column":41},"line":66,"code":"  it(\"check constructor with string param\", () => {\n    let transporter = new KafkaTransporter(\"localhost:9092\");\n    expect(transporter.opts).toEqual({\n      host: \"localhost:9092\",\n      client: {\n        kafkaHost: \"localhost:9092\"\n      },\n      customPartitioner: undefined,\n      producer: {},\n      consumer: {},\n      publish: {\n        attributes: 0,\n        partition: 0\n      }\n    });\n  });","file":"unit/transporters/kafka.spec.js","skipped":false,"dir":"test"},{"name":"check constructor with options","suites":["Test KafkaTransporter constructor"],"updatePoint":{"line":82,"column":36},"line":82,"code":"  it(\"check constructor with options\", () => {\n    let opts = {\n      host: \"localhost:9092\",\n      publish: {\n        partition: 1\n      }\n    };\n    let transporter = new KafkaTransporter(opts);\n    expect(transporter.opts).toEqual({\n      host: \"localhost:9092\",\n      client: {\n        kafkaHost: \"localhost:9092\"\n      },\n      customPartitioner: undefined,\n      producer: {},\n      consumer: {},\n      publish: {\n        attributes: 0,\n        partition: 1\n      }\n    });\n  });","file":"unit/transporters/kafka.spec.js","skipped":false,"dir":"test"},{"name":"check connect","suites":["Test KafkaTransporter connect & disconnect"],"updatePoint":{"line":116,"column":19},"line":116,"code":"  it(\"check connect\", () => {\n    let p = transporter.connect().then(() => {\n      expect(transporter.client).toBeDefined();\n      expect(transporter.producer).toBeDefined();\n      expect(transporter.producer.on).toHaveBeenCalledTimes(2);\n      expect(transporter.producer.on).toHaveBeenCalledWith(\"ready\", expect.any(Function));\n      expect(transporter.producer.on).toHaveBeenCalledWith(\"error\", expect.any(Function));\n    });\n    transporter.producer.callbacks.ready();\n    return p;\n  });","file":"unit/transporters/kafka.spec.js","skipped":false,"dir":"test"},{"name":"check connect - should broadcast error","suites":["Test KafkaTransporter connect & disconnect"],"updatePoint":{"line":127,"column":44},"line":127,"code":"  it(\"check connect - should broadcast error\", () => {\n    broker.broadcastLocal = jest.fn();\n    let p = transporter.connect().catch(() => {\n      expect(transporter.producer).toBeDefined();\n      expect(broker.broadcastLocal).toHaveBeenCalledTimes(1);\n      expect(broker.broadcastLocal).toHaveBeenNthCalledWith(1, \"$transporter.error\", {\n        error: new Error(\"Ups\"),\n        module: \"transporter\",\n        type: C.FAILED_PUBLISHER_ERROR\n      });\n    }); // Trigger an error\n\n    const error = new Error(\"Ups\");\n    transporter.producer.callbacks.error(error);\n    return p;\n  });","file":"unit/transporters/kafka.spec.js","skipped":false,"dir":"test"},{"name":"check onConnected after connect","suites":["Test KafkaTransporter connect & disconnect"],"updatePoint":{"line":143,"column":37},"line":143,"code":"  it(\"check onConnected after connect\", () => {\n    transporter.onConnected = jest.fn(() => Promise.resolve());\n    let p = transporter.connect().then(() => {\n      expect(transporter.onConnected).toHaveBeenCalledTimes(1);\n      expect(transporter.onConnected).toHaveBeenCalledWith();\n    });\n    transporter.producer.callbacks.ready();\n    return p;\n  });","file":"unit/transporters/kafka.spec.js","skipped":false,"dir":"test"},{"name":"check disconnect","suites":["Test KafkaTransporter connect & disconnect"],"updatePoint":{"line":152,"column":22},"line":152,"code":"  it(\"check disconnect\", () => {\n    let p = transporter.connect().then(() => {\n      let close = transporter.client.close;\n      let close2 = jest.fn(cb => cb());\n      transporter.consumer = {\n        close: close2\n      };\n      transporter.disconnect();\n      expect(close).toHaveBeenCalledTimes(1);\n      clientCloseCB();\n      expect(close2).toHaveBeenCalledTimes(1);\n    });\n    transporter.producer.callbacks.ready(); // Trigger the `resolve`\n\n    return p;\n  });","file":"unit/transporters/kafka.spec.js","skipped":false,"dir":"test"},{"name":"check makeSubscriptions","suites":["Test KafkaTransporter makeSubscriptions"],"updatePoint":{"line":186,"column":29},"line":186,"code":"  it(\"check makeSubscriptions\", () => {\n    transporter.producer.createTopics = jest.fn((topics, a, cb) => cb());\n    transporter.makeSubscriptions([{\n      cmd: \"REQ\",\n      nodeID: \"node\"\n    }, {\n      cmd: \"RES\",\n      nodeID: \"node\"\n    }]);\n    expect(transporter.producer.createTopics).toHaveBeenCalledTimes(1);\n    expect(transporter.producer.createTopics).toHaveBeenCalledWith([\"MOL-TEST.REQ.node\", \"MOL-TEST.RES.node\"], true, expect.any(Function));\n    expect(Kafka.ConsumerGroup).toHaveBeenCalledTimes(1);\n    expect(Kafka.ConsumerGroup).toHaveBeenCalledWith({\n      encoding: \"buffer\",\n      fromOffset: \"latest\",\n      groupId: transporter.broker.instanceID,\n      kafkaHost: \"kafka-server:1234\",\n      id: \"default-kafka-consumer\"\n    }, [\"MOL-TEST.REQ.node\", \"MOL-TEST.RES.node\"]);\n    expect(transporter.consumer).toBeDefined();\n    expect(transporter.consumer.on).toHaveBeenCalledTimes(3);\n    expect(transporter.consumer.on).toHaveBeenCalledWith(\"error\", expect.any(Function));\n    expect(transporter.consumer.on).toHaveBeenCalledWith(\"message\", expect.any(Function));\n    expect(transporter.consumer.on).toHaveBeenCalledWith(\"connect\", expect.any(Function));\n    transporter.consumer.callbacks.connect();\n    transporter.consumer.callbacks.message({\n      topic: \"MOL.INFO.node-2\",\n      value: '{ ver: \"3\" }'\n    });\n    expect(transporter.incomingMessage).toHaveBeenCalledTimes(1);\n    expect(transporter.incomingMessage).toHaveBeenCalledWith(\"INFO\", '{ ver: \"3\" }');\n  });","file":"unit/transporters/kafka.spec.js","skipped":false,"dir":"test"},{"name":"check makeSubscriptions - should broadcast a producer error","suites":["Test KafkaTransporter makeSubscriptions"],"updatePoint":{"line":218,"column":65},"line":218,"code":"  it(\"check makeSubscriptions - should broadcast a producer error\", () => {\n    transporter.broker.broadcastLocal = jest.fn();\n    transporter.producer.createTopics = jest.fn((topics, a, cb) => cb(new Error(\"Ups!\")));\n    const p = transporter.makeSubscriptions([{\n      cmd: \"REQ\",\n      nodeID: \"node\"\n    }, {\n      cmd: \"RES\",\n      nodeID: \"node\"\n    }]).then(() => transporter.consumer.callbacks.connect()).catch(() => {\n      expect(transporter.broker.broadcastLocal).toHaveBeenCalledTimes(1);\n      expect(transporter.broker.broadcastLocal).toHaveBeenNthCalledWith(1, \"$transporter.error\", {\n        error: new Error(\"Ups!\"),\n        module: \"transporter\",\n        type: C.FAILED_TOPIC_CREATION\n      });\n    });\n    return p;\n  });","file":"unit/transporters/kafka.spec.js","skipped":false,"dir":"test"},{"name":"check makeSubscriptions - should broadcast a consumer error","suites":["Test KafkaTransporter makeSubscriptions"],"updatePoint":{"line":237,"column":65},"line":237,"code":"  it(\"check makeSubscriptions - should broadcast a consumer error\", async () => {\n    transporter.broker.broadcastLocal = jest.fn();\n    transporter.producer.createTopics = jest.fn((topics, a, cb) => cb());\n    transporter.makeSubscriptions([{\n      cmd: \"REQ\",\n      nodeID: \"node\"\n    }, {\n      cmd: \"RES\",\n      nodeID: \"node\"\n    }]);\n    transporter.consumer.callbacks.error(new Error(\"Ups!\"));\n    expect(transporter.broker.broadcastLocal).toHaveBeenCalledTimes(1);\n    expect(transporter.broker.broadcastLocal).toHaveBeenCalledWith(\"$transporter.error\", {\n      error: new Error(\"Ups!\"),\n      module: \"transporter\",\n      type: C.FAILED_CONSUMER_ERROR\n    });\n  });","file":"unit/transporters/kafka.spec.js","skipped":false,"dir":"test"},{"name":"check publish","suites":["Test KafkaTransporter subscribe & publish"],"updatePoint":{"line":273,"column":19},"line":273,"code":"  it(\"check publish\", () => {\n    transporter.producer.send.mockClear();\n    const packet = new P.Packet(P.PACKET_INFO, \"node2\", {\n      services: {}\n    });\n    transporter.publish(packet);\n    expect(transporter.producer.send).toHaveBeenCalledTimes(1);\n    expect(transporter.producer.send).toHaveBeenCalledWith([{\n      topic: \"MOL-TEST.INFO.node2\",\n      messages: [Buffer.from(\"json data\")],\n      partition: 0,\n      attributes: 0\n    }], expect.any(Function));\n    expect(transporter.serialize).toHaveBeenCalledTimes(1);\n    expect(transporter.serialize).toHaveBeenCalledWith(packet);\n  });","file":"unit/transporters/kafka.spec.js","skipped":false,"dir":"test"},{"name":"check constructor","suites":["Test MqttTransporter constructor"],"updatePoint":{"line":33,"column":23},"line":33,"code":"  it(\"check constructor\", () => {\n    let transporter = new MqttTransporter();\n    expect(transporter).toBeDefined();\n    expect(transporter.opts).toBeUndefined();\n    expect(transporter.connected).toBe(false);\n    expect(transporter.client).toBeNull();\n  });","file":"unit/transporters/mqtt.spec.js","skipped":false,"dir":"test"},{"name":"check constructor with string param","suites":["Test MqttTransporter constructor"],"updatePoint":{"line":40,"column":41},"line":40,"code":"  it(\"check constructor with string param\", () => {\n    let transporter = new MqttTransporter(\"mqtt://localhost\");\n    expect(transporter.opts).toEqual(\"mqtt://localhost\");\n  });","file":"unit/transporters/mqtt.spec.js","skipped":false,"dir":"test"},{"name":"check constructor with options","suites":["Test MqttTransporter constructor"],"updatePoint":{"line":44,"column":36},"line":44,"code":"  it(\"check constructor with options\", () => {\n    let opts = {\n      host: \"localhost\",\n      port: 1234,\n      qos: 1,\n      topicSeparator: \"/\"\n    };\n    let transporter = new MqttTransporter(opts);\n    expect(transporter.opts).toBe(opts);\n  });","file":"unit/transporters/mqtt.spec.js","skipped":false,"dir":"test"},{"name":"check connect","suites":["Test MqttTransporter connect & disconnect"],"updatePoint":{"line":66,"column":19},"line":66,"code":"  it(\"check connect\", () => {\n    let p = transporter.connect().then(() => {\n      expect(transporter.client).toBeDefined();\n      expect(transporter.client.on).toHaveBeenCalledTimes(5);\n      expect(transporter.client.on).toHaveBeenCalledWith(\"connect\", expect.any(Function));\n      expect(transporter.client.on).toHaveBeenCalledWith(\"error\", expect.any(Function));\n      expect(transporter.client.on).toHaveBeenCalledWith(\"reconnect\", expect.any(Function));\n      expect(transporter.client.on).toHaveBeenCalledWith(\"close\", expect.any(Function));\n      expect(transporter.client.on).toHaveBeenCalledWith(\"message\", expect.any(Function));\n    });\n\n    transporter._client.onCallbacks.connect(); // Trigger the `resolve`\n\n\n    return p;\n  });","file":"unit/transporters/mqtt.spec.js","skipped":false,"dir":"test"},{"name":"check connect - should broadcast error","suites":["Test MqttTransporter connect & disconnect"],"updatePoint":{"line":82,"column":44},"line":82,"code":"  it(\"check connect - should broadcast error\", () => {\n    broker.broadcastLocal = jest.fn();\n    let p = transporter.connect().catch(() => {\n      expect(transporter._client).toBeDefined();\n      expect(broker.broadcastLocal).toHaveBeenCalledTimes(1);\n      expect(broker.broadcastLocal).toHaveBeenNthCalledWith(1, \"$transporter.error\", {\n        error: new Error(\"Ups\"),\n        module: \"transporter\",\n        type: C.CLIENT_ERROR\n      });\n    }); // Trigger an error\n\n    const error = new Error(\"Ups\");\n\n    transporter._client.onCallbacks.error(error);\n\n    return p;\n  });","file":"unit/transporters/mqtt.spec.js","skipped":false,"dir":"test"},{"name":"check onConnected after connect","suites":["Test MqttTransporter connect & disconnect"],"updatePoint":{"line":100,"column":37},"line":100,"code":"  it(\"check onConnected after connect\", () => {\n    transporter.onConnected = jest.fn(() => Promise.resolve());\n    let p = transporter.connect().then(() => {\n      expect(transporter.onConnected).toHaveBeenCalledTimes(1);\n      expect(transporter.onConnected).toHaveBeenCalledWith();\n    });\n\n    transporter._client.onCallbacks.connect(); // Trigger the `resolve`\n\n\n    return p;\n  });","file":"unit/transporters/mqtt.spec.js","skipped":false,"dir":"test"},{"name":"check disconnect","suites":["Test MqttTransporter connect & disconnect"],"updatePoint":{"line":112,"column":22},"line":112,"code":"  it(\"check disconnect\", () => {\n    let p = transporter.connect().then(() => {\n      let cb = transporter.client.end;\n      transporter.disconnect();\n      expect(transporter.client).toBeNull();\n      expect(cb).toHaveBeenCalledTimes(1);\n    });\n\n    transporter._client.onCallbacks.connect(); // Trigger the `resolve`\n\n\n    return p;\n  });","file":"unit/transporters/mqtt.spec.js","skipped":false,"dir":"test"},{"name":"check subscribe","suites":["Test MqttTransporter subscribe & publish"],"updatePoint":{"line":146,"column":21},"line":146,"code":"  it(\"check subscribe\", () => {\n    transporter.client.subscribe.mockClear();\n    transporter.subscribe(\"REQ\", \"node\");\n    expect(transporter.client.subscribe).toHaveBeenCalledTimes(1);\n    expect(transporter.client.subscribe).toHaveBeenCalledWith(\"MOL-TEST.REQ.node\", {\n      qos: 0\n    }, expect.any(Function));\n  });","file":"unit/transporters/mqtt.spec.js","skipped":false,"dir":"test"},{"name":"check incoming message handler","suites":["Test MqttTransporter subscribe & publish"],"updatePoint":{"line":154,"column":36},"line":154,"code":"  it(\"check incoming message handler\", () => {\n    // Test subscribe callback\n    transporter.client.onCallbacks.message(\"MOL-TEST.event.name\", \"incoming data\");\n    expect(transporter.incomingMessage).toHaveBeenCalledTimes(1);\n    expect(transporter.incomingMessage).toHaveBeenCalledWith(\"event\", \"incoming data\");\n  });","file":"unit/transporters/mqtt.spec.js","skipped":false,"dir":"test"},{"name":"check publish","suites":["Test MqttTransporter subscribe & publish"],"updatePoint":{"line":160,"column":19},"line":160,"code":"  it(\"check publish\", () => {\n    transporter.client.publish.mockClear();\n    const packet = new P.Packet(P.PACKET_INFO, \"node2\", {\n      services: {}\n    });\n    return transporter.publish(packet).catch(protectReject).then(() => {\n      expect(transporter.client.publish).toHaveBeenCalledTimes(1);\n      expect(transporter.client.publish).toHaveBeenCalledWith(\"MOL-TEST.INFO.node2\", Buffer.from(\"json data\"), {\n        qos: 0\n      }, expect.any(Function));\n      expect(transporter.serialize).toHaveBeenCalledTimes(1);\n      expect(transporter.serialize).toHaveBeenCalledWith(packet);\n    });\n  });","file":"unit/transporters/mqtt.spec.js","skipped":false,"dir":"test"},{"name":"check subscribe","suites":["Test MqttTransporter subscribe & publish with different QoS"],"updatePoint":{"line":197,"column":21},"line":197,"code":"  it(\"check subscribe\", () => {\n    return transporter.subscribe(\"REQ\", \"node\").catch(protectReject).then(() => {\n      expect(transporter.client.subscribe).toHaveBeenCalledTimes(1);\n      expect(transporter.client.subscribe).toHaveBeenCalledWith(\"MOL-TEST.REQ.node\", {\n        qos: 1\n      }, expect.any(Function));\n    });\n  });","file":"unit/transporters/mqtt.spec.js","skipped":false,"dir":"test"},{"name":"check publish","suites":["Test MqttTransporter subscribe & publish with different QoS"],"updatePoint":{"line":205,"column":19},"line":205,"code":"  it(\"check publish\", () => {\n    const packet = new P.Packet(P.PACKET_INFO, \"node2\", {\n      services: {}\n    });\n    return transporter.publish(packet).catch(protectReject).then(() => {\n      expect(transporter.client.publish).toHaveBeenCalledTimes(1);\n      expect(transporter.client.publish).toHaveBeenCalledWith(\"MOL-TEST.INFO.node2\", \"json data\", {\n        qos: 1\n      }, expect.any(Function));\n    });\n  });","file":"unit/transporters/mqtt.spec.js","skipped":false,"dir":"test"},{"name":"check subscribe fail","suites":["Test MqttTransporter subscribe & publish with different QoS"],"updatePoint":{"line":216,"column":26},"line":216,"code":"  it(\"check subscribe fail\", () => {\n    transporter.client.subscribe.mockImplementationOnce((topic, opts, cb) => cb(\"error\"));\n    return expect(transporter.subscribe(\"REQ\", \"node\")).rejects.toBe(\"error\");\n  });","file":"unit/transporters/mqtt.spec.js","skipped":false,"dir":"test"},{"name":"check publish fail","suites":["Test MqttTransporter subscribe & publish with different QoS"],"updatePoint":{"line":220,"column":24},"line":220,"code":"  it(\"check publish fail\", () => {\n    transporter.client.publish.mockImplementationOnce((topic, data, opts, cb) => cb(\"error\"));\n    const packet = new P.Packet(P.PACKET_INFO, \"node2\", {\n      services: {}\n    });\n    return expect(transporter.publish(packet)).rejects.toBe(\"error\");\n  });","file":"unit/transporters/mqtt.spec.js","skipped":false,"dir":"test"},{"name":"check subscribe","suites":["Test MqttTransporter subscribe & publish with different topicSeparator"],"updatePoint":{"line":250,"column":21},"line":250,"code":"  it(\"check subscribe\", () => {\n    transporter.client.subscribe.mockClear();\n    transporter.subscribe(\"REQ\", \"node\");\n    expect(transporter.client.subscribe).toHaveBeenCalledTimes(1);\n    expect(transporter.client.subscribe).toHaveBeenCalledWith(\"MOL-TEST/REQ/node\", {\n      qos: 0\n    }, expect.any(Function));\n  });","file":"unit/transporters/mqtt.spec.js","skipped":false,"dir":"test"},{"name":"check incoming message handler","suites":["Test MqttTransporter subscribe & publish with different topicSeparator"],"updatePoint":{"line":258,"column":36},"line":258,"code":"  it(\"check incoming message handler\", () => {\n    // Test subscribe callback\n    transporter.client.onCallbacks.message(\"MOL-TEST/event/name\", \"incoming data\");\n    expect(transporter.incomingMessage).toHaveBeenCalledTimes(1);\n    expect(transporter.incomingMessage).toHaveBeenCalledWith(\"event\", \"incoming data\");\n  });","file":"unit/transporters/mqtt.spec.js","skipped":false,"dir":"test"},{"name":"check publish","suites":["Test MqttTransporter subscribe & publish with different topicSeparator"],"updatePoint":{"line":264,"column":19},"line":264,"code":"  it(\"check publish\", () => {\n    transporter.client.publish.mockClear();\n    const packet = new P.Packet(P.PACKET_INFO, \"node2\", {\n      services: {}\n    });\n    return transporter.publish(packet).catch(protectReject).then(() => {\n      expect(transporter.client.publish).toHaveBeenCalledTimes(1);\n      expect(transporter.client.publish).toHaveBeenCalledWith(\"MOL-TEST/INFO/node2\", Buffer.from(\"json data\"), {\n        qos: 0\n      }, expect.any(Function));\n      expect(transporter.serialize).toHaveBeenCalledTimes(1);\n      expect(transporter.serialize).toHaveBeenCalledWith(packet);\n    });\n  });","file":"unit/transporters/mqtt.spec.js","skipped":false,"dir":"test"},{"name":"Should return true","suites":["Test isLibLegacy function"],"updatePoint":{"line":25,"column":24},"line":25,"code":"  it(\"Should return true\", () => {\n    // Set package version to legacy\n    natsPackage.version = \"1.x.x\";\n    let broker = new ServiceBroker({\n      logger: false\n    });\n    let transit = new Transit(broker);\n    let transporter = new NatsTransporter();\n    transporter.init(transit);\n    actual = transporter.isLibLegacy();\n    expect(actual).toBe(true);\n  });","file":"unit/transporters/nats.spec.js","skipped":false,"dir":"test"},{"name":"Should return false","suites":["Test isLibLegacy function"],"updatePoint":{"line":37,"column":25},"line":37,"code":"  it(\"Should return false\", () => {\n    // Set package version to new version\n    natsPackage.version = \"2.x.x\";\n    let broker = new ServiceBroker({\n      logger: false\n    });\n    let transit = new Transit(broker);\n    let transporter = new NatsTransporter();\n    transporter.init(transit);\n    actual = transporter.isLibLegacy();\n    expect(actual).toBe(false);\n  });","file":"unit/transporters/nats.spec.js","skipped":false,"dir":"test"},{"name":"check constructor","suites":["Test Nats V1.x","Test NatsTransporter constructor"],"updatePoint":{"line":64,"column":25},"line":64,"code":"    it(\"check constructor\", () => {\n      let transporter = new NatsTransporter();\n      transporter.isLibLegacy = jest.fn(() => true);\n      expect(transporter).toBeDefined();\n      expect(transporter.opts).toEqual({\n        preserveBuffers: true,\n        maxReconnectAttempts: -1\n      });\n      expect(transporter.connected).toBe(false);\n      expect(transporter.hasBuiltInBalancer).toBe(true);\n      expect(transporter.client).toBeNull();\n    });","file":"unit/transporters/nats.spec.js","skipped":false,"dir":"test"},{"name":"check constructor with string param","suites":["Test Nats V1.x","Test NatsTransporter constructor"],"updatePoint":{"line":76,"column":43},"line":76,"code":"    it(\"check constructor with string param\", () => {\n      let transporter = new NatsTransporter(\"nats://localhost\");\n      transporter.isLibLegacy = jest.fn(() => true);\n      expect(transporter.opts).toEqual({\n        preserveBuffers: true,\n        maxReconnectAttempts: -1,\n        url: \"nats://localhost\"\n      });\n    });","file":"unit/transporters/nats.spec.js","skipped":false,"dir":"test"},{"name":"check constructor with options","suites":["Test Nats V1.x","Test NatsTransporter constructor"],"updatePoint":{"line":85,"column":38},"line":85,"code":"    it(\"check constructor with options\", () => {\n      let opts = {\n        host: \"localhost\",\n        port: 1234\n      };\n      let transporter = new NatsTransporter(opts);\n      transporter.isLibLegacy = jest.fn(() => true);\n      expect(transporter.opts).toEqual({\n        host: \"localhost\",\n        port: 1234,\n        preserveBuffers: true,\n        maxReconnectAttempts: -1\n      });\n    });","file":"unit/transporters/nats.spec.js","skipped":false,"dir":"test"},{"name":"check constructor with disabled preserveBuffers & maxReconnectAttempts","suites":["Test Nats V1.x","Test NatsTransporter constructor"],"updatePoint":{"line":99,"column":78},"line":99,"code":"    it(\"check constructor with disabled preserveBuffers & maxReconnectAttempts\", () => {\n      let opts = {\n        preserveBuffers: false,\n        maxReconnectAttempts: 3\n      };\n      let transporter = new NatsTransporter(opts);\n      transporter.isLibLegacy = jest.fn(() => true);\n      expect(transporter.opts).toEqual({\n        preserveBuffers: false,\n        maxReconnectAttempts: 3\n      });\n    });","file":"unit/transporters/nats.spec.js","skipped":false,"dir":"test"},{"name":"check connect","suites":["Test Nats V1.x","Test NatsTransporter connect & disconnect & reconnect"],"updatePoint":{"line":124,"column":21},"line":124,"code":"    it(\"check connect\", () => {\n      let p = transporter.connect().catch(protectReject).then(() => {\n        expect(transporter.client).toBeDefined();\n        expect(transporter.client.on).toHaveBeenCalledTimes(6);\n        expect(transporter.client.on).toHaveBeenCalledWith(\"connect\", expect.any(Function));\n        expect(transporter.client.on).toHaveBeenCalledWith(\"reconnect\", expect.any(Function));\n        expect(transporter.client.on).toHaveBeenCalledWith(\"reconnecting\", expect.any(Function));\n        expect(transporter.client.on).toHaveBeenCalledWith(\"disconnect\", expect.any(Function));\n        expect(transporter.client.on).toHaveBeenCalledWith(\"error\", expect.any(Function));\n        expect(transporter.client.on).toHaveBeenCalledWith(\"close\", expect.any(Function));\n      });\n\n      transporter._client.onCallbacks.connect();\n\n      return p;\n    });","file":"unit/transporters/nats.spec.js","skipped":false,"dir":"test"},{"name":"check connect - should broadcast error","suites":["Test Nats V1.x","Test NatsTransporter connect & disconnect & reconnect"],"updatePoint":{"line":140,"column":46},"line":140,"code":"    it(\"check connect - should broadcast error\", () => {\n      broker.broadcastLocal = jest.fn();\n      let p = transporter.connect().catch(() => {\n        expect(transporter._client).toBeDefined();\n        expect(broker.broadcastLocal).toHaveBeenCalledTimes(1);\n        expect(broker.broadcastLocal).toHaveBeenNthCalledWith(1, \"$transporter.error\", {\n          error: new Error(\"Ups\"),\n          module: \"transporter\",\n          type: C.CLIENT_ERROR\n        });\n      }); // Trigger an error\n\n      const error = new Error(\"Ups\");\n\n      transporter._client.onCallbacks.error(error);\n\n      return p;\n    });","file":"unit/transporters/nats.spec.js","skipped":false,"dir":"test"},{"name":"check onConnected after connect","suites":["Test Nats V1.x","Test NatsTransporter connect & disconnect & reconnect"],"updatePoint":{"line":158,"column":39},"line":158,"code":"    it(\"check onConnected after connect\", () => {\n      transporter.onConnected = jest.fn(() => Promise.resolve());\n      let p = transporter.connect().catch(protectReject).then(() => {\n        expect(transporter.onConnected).toHaveBeenCalledTimes(1);\n        expect(transporter.onConnected).toHaveBeenCalledWith();\n      });\n\n      transporter._client.onCallbacks.connect(); // Trigger the `resolve`\n\n\n      return p;\n    });","file":"unit/transporters/nats.spec.js","skipped":false,"dir":"test"},{"name":"check onConnected after reconnect","suites":["Test Nats V1.x","Test NatsTransporter connect & disconnect & reconnect"],"updatePoint":{"line":170,"column":41},"line":170,"code":"    it(\"check onConnected after reconnect\", () => {\n      transporter.onConnected = jest.fn(() => Promise.resolve());\n      let p = transporter.connect().catch(protectReject).then(() => {\n        transporter.onConnected.mockClear();\n\n        transporter._client.onCallbacks.reconnect(); // Trigger the `resolve`\n\n\n        expect(transporter.onConnected).toHaveBeenCalledTimes(1);\n        expect(transporter.onConnected).toHaveBeenCalledWith(true);\n      });\n\n      transporter._client.onCallbacks.connect(); // Trigger the `resolve`\n\n\n      return p;\n    });","file":"unit/transporters/nats.spec.js","skipped":false,"dir":"test"},{"name":"check disconnect","suites":["Test Nats V1.x","Test NatsTransporter connect & disconnect & reconnect"],"updatePoint":{"line":187,"column":24},"line":187,"code":"    it(\"check disconnect\", () => {\n      const flushCB = jest.fn(cb => cb());\n      let p = transporter.connect().catch(protectReject).then(() => {\n        let cb = transporter.client.close;\n        transporter.client.flush = flushCB;\n        transporter.disconnect();\n        expect(transporter.client).toBeNull();\n        expect(cb).toHaveBeenCalledTimes(1);\n        expect(flushCB).toHaveBeenCalledTimes(1);\n      });\n\n      transporter._client.onCallbacks.connect(); // Trigger the `resolve`\n\n\n      return p;\n    });","file":"unit/transporters/nats.spec.js","skipped":false,"dir":"test"},{"name":"check subscribe","suites":["Test Nats V1.x","Test NatsTransporter subscribe & publish"],"updatePoint":{"line":221,"column":23},"line":221,"code":"    it(\"check subscribe\", () => {\n      let subCb;\n      transporter.client.subscribe = jest.fn((name, cb) => subCb = cb);\n      transporter.incomingMessage = jest.fn();\n      transporter.subscribe(\"REQ\", \"node\");\n      expect(transporter.client.subscribe).toHaveBeenCalledTimes(1);\n      expect(transporter.client.subscribe).toHaveBeenCalledWith(\"MOL-TEST.REQ.node\", expect.any(Function)); // Test subscribe callback\n\n      subCb('{ sender: \"node1\" }');\n      expect(transporter.incomingMessage).toHaveBeenCalledTimes(1);\n      expect(transporter.incomingMessage).toHaveBeenCalledWith(\"REQ\", '{ sender: \"node1\" }');\n    });","file":"unit/transporters/nats.spec.js","skipped":false,"dir":"test"},{"name":"check subscribeBalancedRequest","suites":["Test Nats V1.x","Test NatsTransporter subscribe & publish"],"updatePoint":{"line":233,"column":38},"line":233,"code":"    it(\"check subscribeBalancedRequest\", () => {\n      let subCb;\n      transporter.client.subscribe = jest.fn((name, opts, cb) => {\n        subCb = cb;\n        return 123;\n      });\n      transporter.incomingMessage = jest.fn();\n      transporter.subscribeBalancedRequest(\"posts.find\");\n      expect(transporter.client.subscribe).toHaveBeenCalledTimes(1);\n      expect(transporter.client.subscribe).toHaveBeenCalledWith(\"MOL-TEST.REQB.posts.find\", {\n        queue: \"posts.find\"\n      }, expect.any(Function)); // Test subscribe callback\n\n      subCb('{ sender: \"node1\" }');\n      expect(transporter.incomingMessage).toHaveBeenCalledTimes(1);\n      expect(transporter.incomingMessage).toHaveBeenCalledWith(\"REQ\", '{ sender: \"node1\" }');\n      expect(transporter.subscriptions).toEqual([123]);\n    });","file":"unit/transporters/nats.spec.js","skipped":false,"dir":"test"},{"name":"check subscription & unsubscription","suites":["Test Nats V1.x","Test NatsTransporter subscribe & publish","Test subscribeBalancedEvent"],"updatePoint":{"line":252,"column":45},"line":252,"code":"      it(\"check subscription & unsubscription\", () => {\n        let subCb;\n        transporter.client.subscribe = jest.fn((name, opts, cb) => {\n          subCb = cb;\n          return 125;\n        });\n        transporter.incomingMessage = jest.fn();\n        transporter.subscribeBalancedEvent(\"user.created\", \"mail\");\n        expect(transporter.client.subscribe).toHaveBeenCalledTimes(1);\n        expect(transporter.client.subscribe).toHaveBeenCalledWith(\"MOL-TEST.EVENTB.mail.user.created\", {\n          queue: \"mail\"\n        }, expect.any(Function)); // Test subscribe callback\n\n        subCb('{ sender: \"node1\" }');\n        expect(transporter.incomingMessage).toHaveBeenCalledTimes(1);\n        expect(transporter.incomingMessage).toHaveBeenCalledWith(\"EVENT\", '{ sender: \"node1\" }');\n        expect(transporter.subscriptions).toEqual([125]); // Test unsubscribeFromBalancedCommands\n\n        transporter.client.unsubscribe = jest.fn();\n        transporter.client.flush = jest.fn(cb => cb());\n        return transporter.unsubscribeFromBalancedCommands().catch(protectReject).then(() => {\n          expect(transporter.subscriptions).toEqual([]);\n          expect(transporter.client.unsubscribe).toHaveBeenCalledTimes(1);\n          expect(transporter.client.unsubscribe).toHaveBeenCalledWith(125);\n          expect(transporter.client.flush).toHaveBeenCalledTimes(1);\n        });\n      });","file":"unit/transporters/nats.spec.js","skipped":false,"dir":"test"},{"name":"check with '*' wildchar topic","suites":["Test Nats V1.x","Test NatsTransporter subscribe & publish","Test subscribeBalancedEvent"],"updatePoint":{"line":279,"column":39},"line":279,"code":"      it(\"check with '*' wildchar topic\", () => {\n        transporter.client.subscribe = jest.fn();\n        transporter.subscribeBalancedEvent(\"user.*\", \"users\");\n        expect(transporter.client.subscribe).toHaveBeenCalledTimes(1);\n        expect(transporter.client.subscribe).toHaveBeenCalledWith(\"MOL-TEST.EVENTB.users.user.*\", {\n          queue: \"users\"\n        }, expect.any(Function));\n      });","file":"unit/transporters/nats.spec.js","skipped":false,"dir":"test"},{"name":"check with '**' wildchar topic","suites":["Test Nats V1.x","Test NatsTransporter subscribe & publish","Test subscribeBalancedEvent"],"updatePoint":{"line":287,"column":40},"line":287,"code":"      it(\"check with '**' wildchar topic\", () => {\n        transporter.client.subscribe = jest.fn();\n        transporter.subscribeBalancedEvent(\"user.**\", \"users\");\n        expect(transporter.client.subscribe).toHaveBeenCalledTimes(1);\n        expect(transporter.client.subscribe).toHaveBeenCalledWith(\"MOL-TEST.EVENTB.users.user.>\", {\n          queue: \"users\"\n        }, expect.any(Function));\n      });","file":"unit/transporters/nats.spec.js","skipped":false,"dir":"test"},{"name":"check with '**' wildchar (as not last) topic","suites":["Test Nats V1.x","Test NatsTransporter subscribe & publish","Test subscribeBalancedEvent"],"updatePoint":{"line":295,"column":54},"line":295,"code":"      it(\"check with '**' wildchar (as not last) topic\", () => {\n        transporter.client.subscribe = jest.fn();\n        transporter.subscribeBalancedEvent(\"user.**.changed\", \"users\");\n        expect(transporter.client.subscribe).toHaveBeenCalledTimes(1);\n        expect(transporter.client.subscribe).toHaveBeenCalledWith(\"MOL-TEST.EVENTB.users.user.>\", {\n          queue: \"users\"\n        }, expect.any(Function));\n      });","file":"unit/transporters/nats.spec.js","skipped":false,"dir":"test"},{"name":"check publish with target","suites":["Test Nats V1.x","Test NatsTransporter subscribe & publish","Test subscribeBalancedEvent"],"updatePoint":{"line":304,"column":33},"line":304,"code":"    it(\"check publish with target\", () => {\n      transporter.serialize = jest.fn(() => Buffer.from(\"json data\"));\n      transporter.client.publish = jest.fn((topic, payload, resolve) => resolve());\n      const packet = new P.Packet(P.PACKET_INFO, \"node2\", {});\n      return transporter.publish(packet).catch(protectReject).then(() => {\n        expect(transporter.client.publish).toHaveBeenCalledTimes(1);\n        expect(transporter.client.publish).toHaveBeenCalledWith(\"MOL-TEST.INFO.node2\", Buffer.from(\"json data\"), expect.any(Function));\n        expect(transporter.serialize).toHaveBeenCalledTimes(1);\n        expect(transporter.serialize).toHaveBeenCalledWith(packet);\n      });\n    });","file":"unit/transporters/nats.spec.js","skipped":false,"dir":"test"},{"name":"check publish without target","suites":["Test Nats V1.x","Test NatsTransporter subscribe & publish","Test subscribeBalancedEvent"],"updatePoint":{"line":315,"column":36},"line":315,"code":"    it(\"check publish without target\", () => {\n      transporter.serialize = jest.fn(() => Buffer.from(\"json data\"));\n      transporter.client.publish = jest.fn((topic, payload, resolve) => resolve());\n      const packet = new P.Packet(P.PACKET_INFO, null, {});\n      return transporter.publish(packet).catch(protectReject).then(() => {\n        expect(transporter.client.publish).toHaveBeenCalledTimes(1);\n        expect(transporter.client.publish).toHaveBeenCalledWith(\"MOL-TEST.INFO\", Buffer.from(\"json data\"), expect.any(Function));\n        expect(transporter.serialize).toHaveBeenCalledTimes(1);\n        expect(transporter.serialize).toHaveBeenCalledWith(packet);\n      });\n    });","file":"unit/transporters/nats.spec.js","skipped":false,"dir":"test"},{"name":"check publishBalancedEvent","suites":["Test Nats V1.x","Test NatsTransporter subscribe & publish","Test subscribeBalancedEvent"],"updatePoint":{"line":326,"column":34},"line":326,"code":"    it(\"check publishBalancedEvent\", () => {\n      transporter.serialize = jest.fn(() => Buffer.from(\"json data\"));\n      transporter.client.publish = jest.fn((topic, payload, resolve) => resolve());\n      const packet = new P.Packet(P.PACKET_EVENT, null, {\n        event: \"user.created\",\n        data: {\n          id: 5\n        },\n        groups: [\"mail\"]\n      });\n      return transporter.publishBalancedEvent(packet, \"mail\").catch(protectReject).then(() => {\n        expect(transporter.client.publish).toHaveBeenCalledTimes(1);\n        expect(transporter.client.publish).toHaveBeenCalledWith(\"MOL-TEST.EVENTB.mail.user.created\", Buffer.from(\"json data\"), expect.any(Function));\n        expect(transporter.serialize).toHaveBeenCalledTimes(1);\n        expect(transporter.serialize).toHaveBeenCalledWith(packet);\n      });\n    });","file":"unit/transporters/nats.spec.js","skipped":false,"dir":"test"},{"name":"check publishBalancedRequest","suites":["Test Nats V1.x","Test NatsTransporter subscribe & publish","Test subscribeBalancedEvent"],"updatePoint":{"line":343,"column":36},"line":343,"code":"    it(\"check publishBalancedRequest\", () => {\n      transporter.serialize = jest.fn(() => Buffer.from(\"json data\"));\n      transporter.client.publish = jest.fn((topic, payload, resolve) => resolve());\n      const packet = new P.Packet(P.PACKET_REQUEST, null, {\n        action: \"posts.find\"\n      });\n      return transporter.publishBalancedRequest(packet).catch(protectReject).then(() => {\n        expect(transporter.client.publish).toHaveBeenCalledTimes(1);\n        expect(transporter.client.publish).toHaveBeenCalledWith(\"MOL-TEST.REQB.posts.find\", Buffer.from(\"json data\"), expect.any(Function));\n        expect(transporter.serialize).toHaveBeenCalledTimes(1);\n        expect(transporter.serialize).toHaveBeenCalledWith(packet);\n      });\n    });","file":"unit/transporters/nats.spec.js","skipped":false,"dir":"test"},{"name":"check constructor","suites":["Tests Nats V2.x","Test NatsTransporter constructor"],"updatePoint":{"line":375,"column":25},"line":375,"code":"    it(\"check constructor\", () => {\n      let transporter = new NatsTransporter();\n      transporter.isLibLegacy = jest.fn(() => false);\n      expect(transporter).toBeDefined();\n      expect(transporter.opts).toEqual({\n        preserveBuffers: true,\n        maxReconnectAttempts: -1\n      });\n      expect(transporter.connected).toBe(false);\n      expect(transporter.hasBuiltInBalancer).toBe(true);\n      expect(transporter.client).toBeNull();\n    });","file":"unit/transporters/nats.spec.js","skipped":false,"dir":"test"},{"name":"check constructor with string param","suites":["Tests Nats V2.x","Test NatsTransporter constructor"],"updatePoint":{"line":387,"column":43},"line":387,"code":"    it(\"check constructor with string param\", () => {\n      let transporter = new NatsTransporter(\"nats://localhost\");\n      transporter.isLibLegacy = jest.fn(() => false);\n      expect(transporter.opts).toEqual({\n        preserveBuffers: true,\n        maxReconnectAttempts: -1,\n        url: \"nats://localhost\"\n      });\n    });","file":"unit/transporters/nats.spec.js","skipped":false,"dir":"test"},{"name":"check constructor with string param of multiple servers","suites":["Tests Nats V2.x","Test NatsTransporter constructor"],"updatePoint":{"line":396,"column":63},"line":396,"code":"    it(\"check constructor with string param of multiple servers\", () => {\n      let transporter = new NatsTransporter(\"nats://server1:4222,nats://server2:4222,nats://server3:4222\");\n      transporter.isLibLegacy = jest.fn(() => false);\n      expect(transporter.opts).toEqual({\n        preserveBuffers: true,\n        maxReconnectAttempts: -1,\n        url: \"nats://server1:4222,nats://server2:4222,nats://server3:4222\"\n      });\n    });","file":"unit/transporters/nats.spec.js","skipped":false,"dir":"test"},{"name":"check constructor with options","suites":["Tests Nats V2.x","Test NatsTransporter constructor"],"updatePoint":{"line":405,"column":38},"line":405,"code":"    it(\"check constructor with options\", () => {\n      let opts = {\n        host: \"localhost\",\n        port: 1234\n      };\n      let transporter = new NatsTransporter(opts);\n      transporter.isLibLegacy = jest.fn(() => false);\n      expect(transporter.opts).toEqual({\n        host: \"localhost\",\n        port: 1234,\n        preserveBuffers: true,\n        maxReconnectAttempts: -1\n      });\n    });","file":"unit/transporters/nats.spec.js","skipped":false,"dir":"test"},{"name":"check constructor with disabled preserveBuffers & maxReconnectAttempts","suites":["Tests Nats V2.x","Test NatsTransporter constructor"],"updatePoint":{"line":419,"column":78},"line":419,"code":"    it(\"check constructor with disabled preserveBuffers & maxReconnectAttempts\", () => {\n      let opts = {\n        preserveBuffers: false,\n        maxReconnectAttempts: 3\n      };\n      let transporter = new NatsTransporter(opts);\n      transporter.isLibLegacy = jest.fn(() => false);\n      expect(transporter.opts).toEqual({\n        preserveBuffers: false,\n        maxReconnectAttempts: 3\n      });\n    });","file":"unit/transporters/nats.spec.js","skipped":false,"dir":"test"},{"name":"check connect options servers","suites":["Tests Nats V2.x","Test NatsTransporter connect & disconnect & reconnect"],"updatePoint":{"line":444,"column":37},"line":444,"code":"    it(\"check connect options servers\", () => {\n      let p = transporter.connect().catch(protectReject).then(() => {\n        expect(transporter.client).toBeDefined();\n        expect(transporter.client.status).toHaveBeenCalledTimes(1);\n        expect(transporter.client.closed).toHaveBeenCalledTimes(1);\n        expect(Nats.connect).toHaveBeenLastCalledWith({\n          preserveBuffers: true,\n          maxReconnectAttempts: -1,\n          url: \"nats://myuser:mypass@server1:4222,nats://server2:4222,nats://server3:4222\",\n          servers: [\"server1:4222\", \"server2:4222\", \"server3:4222\"],\n          user: \"myuser\",\n          pass: \"mypass\"\n        });\n      });\n      return p;\n    });","file":"unit/transporters/nats.spec.js","skipped":false,"dir":"test"},{"name":"check connect","suites":["Tests Nats V2.x","Test NatsTransporter connect & disconnect & reconnect"],"updatePoint":{"line":460,"column":21},"line":460,"code":"    it(\"check connect\", () => {\n      let p = transporter.connect().catch(protectReject).then(() => {\n        expect(transporter.client).toBeDefined();\n        expect(transporter.client.status).toHaveBeenCalledTimes(1);\n        expect(transporter.client.closed).toHaveBeenCalledTimes(1);\n      });\n      return p;\n    });","file":"unit/transporters/nats.spec.js","skipped":false,"dir":"test"},{"name":"check onConnected after connect","suites":["Tests Nats V2.x","Test NatsTransporter connect & disconnect & reconnect"],"updatePoint":{"line":468,"column":39},"line":468,"code":"    it(\"check onConnected after connect\", () => {\n      transporter.onConnected = jest.fn(() => Promise.resolve());\n      let p = transporter.connect().catch(protectReject).then(() => {\n        expect(transporter.onConnected).toHaveBeenCalledTimes(1);\n        expect(transporter.onConnected).toHaveBeenCalledWith();\n      }); // transporter._client.onCallbacks.connect(); // Trigger the `resolve`\n\n      return p;\n    }); // it(\"check onConnected after reconnect\", () => {","file":"unit/transporters/nats.spec.js","skipped":false,"dir":"test"},{"name":"check disconnect","suites":["Tests Nats V2.x","Test NatsTransporter connect & disconnect & reconnect"],"updatePoint":{"line":488,"column":24},"line":488,"code":"    it(\"check disconnect\", () => {\n      let p = transporter.connect().catch(protectReject).then(() => {\n        const client = transporter.client;\n        transporter.disconnect().catch(protectReject).then(() => {\n          expect(client.flush).toHaveBeenCalledTimes(1);\n          expect(client.close).toHaveBeenCalledTimes(1);\n          expect(transporter.client).toBeNull();\n        });\n      });\n      return p;\n    });","file":"unit/transporters/nats.spec.js","skipped":false,"dir":"test"},{"name":"check subscribe","suites":["Tests Nats V2.x","Test NatsTransporter subscribe & publish"],"updatePoint":{"line":514,"column":23},"line":514,"code":"    it(\"check subscribe\", () => {\n      let subCb;\n      transporter.client.subscribe = jest.fn((name, {\n        callback: cb\n      }) => subCb = cb);\n      transporter.incomingMessage = jest.fn();\n      transporter.subscribe(\"REQ\", \"node\");\n      expect(transporter.client.subscribe).toHaveBeenCalledTimes(1);\n      expect(transporter.client.subscribe).toHaveBeenCalledWith(\"MOL-TEST.REQ.node\", {\n        callback: expect.any(Function)\n      }); // Test subscribe callback\n\n      subCb(null, {\n        data: '{ sender: \"node1\" }'\n      });\n      expect(transporter.incomingMessage).toHaveBeenCalledTimes(1);\n      expect(transporter.incomingMessage).toHaveBeenCalledWith(\"REQ\", Buffer.from('{ sender: \"node1\" }'));\n    });","file":"unit/transporters/nats.spec.js","skipped":false,"dir":"test"},{"name":"check subscribeBalancedRequest","suites":["Tests Nats V2.x","Test NatsTransporter subscribe & publish"],"updatePoint":{"line":532,"column":38},"line":532,"code":"    it(\"check subscribeBalancedRequest\", () => {\n      let subCb;\n      transporter.client.subscribe = jest.fn((name, {\n        opts,\n        callback: cb\n      }) => {\n        subCb = cb;\n        return 123;\n      });\n      transporter.incomingMessage = jest.fn();\n      transporter.subscribeBalancedRequest(\"posts.find\");\n      expect(transporter.client.subscribe).toHaveBeenCalledTimes(1);\n      expect(transporter.client.subscribe).toHaveBeenCalledWith(\"MOL-TEST.REQB.posts.find\", {\n        queue: \"posts.find\",\n        callback: expect.any(Function)\n      }); // Test subscribe callback\n\n      subCb(null, {\n        data: '{ sender: \"node1\" }'\n      });\n      expect(transporter.incomingMessage).toHaveBeenCalledTimes(1);\n      expect(transporter.incomingMessage).toHaveBeenCalledWith(\"REQ\", Buffer.from('{ sender: \"node1\" }'));\n      expect(transporter.subscriptions).toEqual([123]);\n    });","file":"unit/transporters/nats.spec.js","skipped":false,"dir":"test"},{"name":"check subscription & unsubscription","suites":["Tests Nats V2.x","Test NatsTransporter subscribe & publish","Test subscribeBalancedEvent"],"updatePoint":{"line":557,"column":45},"line":557,"code":"      it(\"check subscription & unsubscription\", () => {\n        let subCb;\n        let subscriptionInstance = {\n          unsubscribe: jest.fn()\n        };\n        transporter.client.subscribe = jest.fn((name, {\n          opts,\n          callback: cb\n        }) => {\n          subCb = cb;\n          return subscriptionInstance;\n        });\n        transporter.incomingMessage = jest.fn();\n        transporter.subscribeBalancedEvent(\"user.created\", \"mail\");\n        expect(transporter.client.subscribe).toHaveBeenCalledTimes(1);\n        expect(transporter.client.subscribe).toHaveBeenCalledWith(\"MOL-TEST.EVENTB.mail.user.created\", {\n          queue: \"mail\",\n          callback: expect.any(Function)\n        }); // Test subscribe callback\n\n        subCb(null, {\n          data: '{ sender: \"node1\" }'\n        });\n        expect(transporter.incomingMessage).toHaveBeenCalledTimes(1);\n        expect(transporter.incomingMessage).toHaveBeenCalledWith(\"EVENT\", Buffer.from('{ sender: \"node1\" }'));\n        expect(transporter.subscriptions).toEqual([subscriptionInstance]);\n        return transporter.unsubscribeFromBalancedCommands().catch(protectReject).then(() => {\n          expect(transporter.subscriptions).toEqual([]);\n          expect(subscriptionInstance.unsubscribe).toHaveBeenCalledTimes(1);\n          expect(transporter.client.flush).toHaveBeenCalledTimes(1);\n        });\n      });","file":"unit/transporters/nats.spec.js","skipped":false,"dir":"test"},{"name":"check with '*' wildchar topic","suites":["Tests Nats V2.x","Test NatsTransporter subscribe & publish","Test subscribeBalancedEvent"],"updatePoint":{"line":589,"column":39},"line":589,"code":"      it(\"check with '*' wildchar topic\", () => {\n        transporter.client.subscribe = jest.fn();\n        transporter.subscribeBalancedEvent(\"user.*\", \"users\");\n        expect(transporter.client.subscribe).toHaveBeenCalledTimes(1);\n        expect(transporter.client.subscribe).toHaveBeenCalledWith(\"MOL-TEST.EVENTB.users.user.*\", {\n          queue: \"users\",\n          callback: expect.any(Function)\n        });\n      });","file":"unit/transporters/nats.spec.js","skipped":false,"dir":"test"},{"name":"check with '**' wildchar topic","suites":["Tests Nats V2.x","Test NatsTransporter subscribe & publish","Test subscribeBalancedEvent"],"updatePoint":{"line":598,"column":40},"line":598,"code":"      it(\"check with '**' wildchar topic\", () => {\n        transporter.client.subscribe = jest.fn();\n        transporter.subscribeBalancedEvent(\"user.**\", \"users\");\n        expect(transporter.client.subscribe).toHaveBeenCalledTimes(1);\n        expect(transporter.client.subscribe).toHaveBeenCalledWith(\"MOL-TEST.EVENTB.users.user.>\", {\n          queue: \"users\",\n          callback: expect.any(Function)\n        });\n      });","file":"unit/transporters/nats.spec.js","skipped":false,"dir":"test"},{"name":"check with '**' wildchar (as not last) topic","suites":["Tests Nats V2.x","Test NatsTransporter subscribe & publish","Test subscribeBalancedEvent"],"updatePoint":{"line":607,"column":54},"line":607,"code":"      it(\"check with '**' wildchar (as not last) topic\", () => {\n        transporter.client.subscribe = jest.fn();\n        transporter.subscribeBalancedEvent(\"user.**.changed\", \"users\");\n        expect(transporter.client.subscribe).toHaveBeenCalledTimes(1);\n        expect(transporter.client.subscribe).toHaveBeenCalledWith(\"MOL-TEST.EVENTB.users.user.>\", {\n          queue: \"users\",\n          callback: expect.any(Function)\n        });\n      });","file":"unit/transporters/nats.spec.js","skipped":false,"dir":"test"},{"name":"check publish with target","suites":["Tests Nats V2.x","Test NatsTransporter subscribe & publish","Test subscribeBalancedEvent"],"updatePoint":{"line":617,"column":33},"line":617,"code":"    it(\"check publish with target\", () => {\n      transporter.serialize = jest.fn(() => Buffer.from(\"json data\")); // transporter.client.publish = jest.fn((topic, payload, resolve) => resolve());\n\n      transporter.client.publish = jest.fn();\n      const packet = new P.Packet(P.PACKET_INFO, \"node2\", {});\n      return transporter.publish(packet).catch(protectReject).then(() => {\n        expect(transporter.client.publish).toHaveBeenCalledTimes(1);\n        expect(transporter.client.publish).toHaveBeenCalledWith(\"MOL-TEST.INFO.node2\", Buffer.from(\"json data\"));\n        expect(transporter.serialize).toHaveBeenCalledTimes(1);\n        expect(transporter.serialize).toHaveBeenCalledWith(packet);\n      });\n    });","file":"unit/transporters/nats.spec.js","skipped":false,"dir":"test"},{"name":"check publish without target","suites":["Tests Nats V2.x","Test NatsTransporter subscribe & publish","Test subscribeBalancedEvent"],"updatePoint":{"line":629,"column":36},"line":629,"code":"    it(\"check publish without target\", () => {\n      transporter.serialize = jest.fn(() => Buffer.from(\"json data\")); // transporter.client.publish = jest.fn((topic, payload, resolve) => resolve());\n\n      transporter.client.publish = jest.fn();\n      const packet = new P.Packet(P.PACKET_INFO, null, {});\n      return transporter.publish(packet).catch(protectReject).then(() => {\n        expect(transporter.client.publish).toHaveBeenCalledTimes(1);\n        expect(transporter.client.publish).toHaveBeenCalledWith(\"MOL-TEST.INFO\", Buffer.from(\"json data\"));\n        expect(transporter.serialize).toHaveBeenCalledTimes(1);\n        expect(transporter.serialize).toHaveBeenCalledWith(packet);\n      });\n    });","file":"unit/transporters/nats.spec.js","skipped":false,"dir":"test"},{"name":"check publishBalancedEvent","suites":["Tests Nats V2.x","Test NatsTransporter subscribe & publish","Test subscribeBalancedEvent"],"updatePoint":{"line":641,"column":34},"line":641,"code":"    it(\"check publishBalancedEvent\", () => {\n      transporter.serialize = jest.fn(() => Buffer.from(\"json data\")); // transporter.client.publish = jest.fn((topic, payload, resolve) => resolve());\n\n      transporter.client.publish = jest.fn();\n      const packet = new P.Packet(P.PACKET_EVENT, null, {\n        event: \"user.created\",\n        data: {\n          id: 5\n        },\n        groups: [\"mail\"]\n      });\n      return transporter.publishBalancedEvent(packet, \"mail\").catch(protectReject).then(() => {\n        expect(transporter.client.publish).toHaveBeenCalledTimes(1);\n        expect(transporter.client.publish).toHaveBeenCalledWith(\"MOL-TEST.EVENTB.mail.user.created\", Buffer.from(\"json data\"));\n        expect(transporter.serialize).toHaveBeenCalledTimes(1);\n        expect(transporter.serialize).toHaveBeenCalledWith(packet);\n      });\n    });","file":"unit/transporters/nats.spec.js","skipped":false,"dir":"test"},{"name":"check publishBalancedRequest","suites":["Tests Nats V2.x","Test NatsTransporter subscribe & publish","Test subscribeBalancedEvent"],"updatePoint":{"line":659,"column":36},"line":659,"code":"    it(\"check publishBalancedRequest\", () => {\n      transporter.serialize = jest.fn(() => Buffer.from(\"json data\")); // transporter.client.publish = jest.fn((topic, payload, resolve) => resolve());\n\n      transporter.client.publish = jest.fn();\n      const packet = new P.Packet(P.PACKET_REQUEST, null, {\n        action: \"posts.find\"\n      });\n      return transporter.publishBalancedRequest(packet).catch(protectReject).then(() => {\n        expect(transporter.client.publish).toHaveBeenCalledTimes(1);\n        expect(transporter.client.publish).toHaveBeenCalledWith(\"MOL-TEST.REQB.posts.find\", Buffer.from(\"json data\"));\n        expect(transporter.serialize).toHaveBeenCalledTimes(1);\n        expect(transporter.serialize).toHaveBeenCalledWith(packet);\n      });\n    });","file":"unit/transporters/nats.spec.js","skipped":false,"dir":"test"},{"name":"check constructor","suites":["Test RedisTransporter constructor"],"updatePoint":{"line":44,"column":23},"line":44,"code":"  it(\"check constructor\", () => {\n    let transporter = new RedisTransporter();\n    expect(transporter).toBeDefined();\n    expect(transporter.opts).toBeUndefined();\n    expect(transporter.connected).toBe(false);\n    expect(transporter.clientPub).toBeNull();\n    expect(transporter.clientSub).toBeNull();\n  });","file":"unit/transporters/redis.spec.js","skipped":false,"dir":"test"},{"name":"check constructor with string param","suites":["Test RedisTransporter constructor"],"updatePoint":{"line":52,"column":41},"line":52,"code":"  it(\"check constructor with string param\", () => {\n    let transporter = new RedisTransporter(\"redis://localhost\");\n    expect(transporter.opts).toEqual(\"redis://localhost\");\n  });","file":"unit/transporters/redis.spec.js","skipped":false,"dir":"test"},{"name":"check constructor with options","suites":["Test RedisTransporter constructor"],"updatePoint":{"line":56,"column":36},"line":56,"code":"  it(\"check constructor with options\", () => {\n    let opts = {\n      host: \"localhost\",\n      port: 1234\n    };\n    let transporter = new RedisTransporter(opts);\n    expect(transporter.opts).toBe(opts);\n  });","file":"unit/transporters/redis.spec.js","skipped":false,"dir":"test"},{"name":"check constructor with cluster options","suites":["Test RedisTransporter constructor"],"updatePoint":{"line":64,"column":44},"line":64,"code":"  it(\"check constructor with cluster options\", () => {\n    let opts = {\n      cluster: {\n        nodes: [{\n          host: \"localhost\",\n          port: 1234\n        }, {\n          host: \"localhost\",\n          port: 12345\n        }]\n      }\n    };\n    let transporter = new RedisTransporter(opts);\n    expect(transporter.opts).toBe(opts);\n  });","file":"unit/transporters/redis.spec.js","skipped":false,"dir":"test"},{"name":"should throw error because there is no cluster nodes specified","suites":["Test RedisTransporter connect & disconnect cluster without nodes"],"updatePoint":{"line":93,"column":68},"line":93,"code":"  it(\"should throw error because there is no cluster nodes specified\", () => {\n    const opts = {\n      cluster: {\n        clusterOptions: {\n          redisOptions: {\n            password: \"12345\"\n          }\n        }\n      }\n    };\n    const transporter = new RedisTransporter(opts);\n    transporter.init(transit, jest.fn());\n    return transporter.connect().then(protectReject).catch(error => {\n      expect(error instanceof BrokerOptionsError).toBe(true);\n      expect(error.message).toBe(\"No nodes defined for cluster\");\n    });\n  });","file":"unit/transporters/redis.spec.js","skipped":false,"dir":"test"},{"name":"check connect","suites":["Test RedisTransporter subscribe & publish cluster mode"],"updatePoint":{"line":146,"column":19},"line":146,"code":"  it(\"check connect\", () => {\n    let p = transporter.connect().then(() => {\n      expect(transporter.clientSub).toBeDefined();\n      expect(transporter.clientSub.on).toHaveBeenCalledTimes(4);\n      expect(transporter.clientSub.on).toHaveBeenCalledWith(\"connect\", expect.any(Function));\n      expect(transporter.clientSub.on).toHaveBeenCalledWith(\"error\", expect.any(Function));\n      expect(transporter.clientSub.on).toHaveBeenCalledWith(\"close\", expect.any(Function));\n      expect(transporter.clientSub.on).toHaveBeenCalledWith(\"messageBuffer\", expect.any(Function));\n      expect(transporter.clientPub).toBeDefined();\n      expect(transporter.clientPub.on).toHaveBeenCalledTimes(3);\n      expect(transporter.clientPub.on).toHaveBeenCalledWith(\"connect\", expect.any(Function));\n      expect(transporter.clientPub.on).toHaveBeenCalledWith(\"error\", expect.any(Function));\n      expect(transporter.clientPub.on).toHaveBeenCalledWith(\"close\", expect.any(Function));\n    });\n\n    transporter._clientSub.onCallbacks.connect();\n\n    transporter._clientPub.onCallbacks.connect();\n\n    return p;\n  });","file":"unit/transporters/redis.spec.js","skipped":false,"dir":"test"},{"name":"check connect - should broadcast error","suites":["Test RedisTransporter subscribe & publish cluster mode"],"updatePoint":{"line":167,"column":44},"line":167,"code":"  it(\"check connect - should broadcast error\", () => {\n    broker.broadcastLocal = jest.fn();\n    let p = transporter.connect().then(() => {\n      expect(transporter.clientSub).toBeDefined();\n      expect(transporter.clientPub).toBeDefined();\n      expect(broker.broadcastLocal).toHaveBeenCalledTimes(2);\n      expect(broker.broadcastLocal).toHaveBeenNthCalledWith(1, \"$transporter.error\", {\n        error: new Error(\"Ups\"),\n        module: \"transporter\",\n        type: C.FAILED_PUBLISHER_ERROR\n      });\n      expect(broker.broadcastLocal).toHaveBeenNthCalledWith(2, \"$transporter.error\", {\n        error: new Error(\"Ups\"),\n        module: \"transporter\",\n        type: C.FAILED_CONSUMER_ERROR\n      });\n    });\n\n    transporter._clientSub.onCallbacks.connect();\n\n    transporter._clientPub.onCallbacks.connect(); // Trigger an error\n\n\n    transporter._clientPub.onCallbacks.error(new Error(\"Ups\"));\n\n    transporter._clientSub.onCallbacks.error(new Error(\"Ups\"));\n\n    return p;\n  });","file":"unit/transporters/redis.spec.js","skipped":false,"dir":"test"},{"name":"check onConnected after connect","suites":["Test RedisTransporter subscribe & publish cluster mode"],"updatePoint":{"line":196,"column":37},"line":196,"code":"  it(\"check onConnected after connect\", () => {\n    transporter.onConnected = jest.fn(() => Promise.resolve());\n    let p = transporter.connect().then(() => {\n      expect(transporter.onConnected).toHaveBeenCalledTimes(1);\n      expect(transporter.onConnected).toHaveBeenCalledWith();\n    });\n\n    transporter._clientSub.onCallbacks.connect();\n\n    transporter._clientPub.onCallbacks.connect();\n\n    return p;\n  });","file":"unit/transporters/redis.spec.js","skipped":false,"dir":"test"},{"name":"check disconnect","suites":["Test RedisTransporter subscribe & publish cluster mode"],"updatePoint":{"line":209,"column":22},"line":209,"code":"  it(\"check disconnect\", () => {\n    let p = transporter.connect().then(() => {\n      let cbSub = transporter.clientSub.disconnect;\n      let cbPub = transporter.clientPub.disconnect;\n      transporter.disconnect();\n      expect(transporter.clientSub).toBeNull();\n      expect(transporter.clientPub).toBeNull();\n      expect(cbSub).toHaveBeenCalledTimes(1);\n      expect(cbPub).toHaveBeenCalledTimes(1);\n    });\n\n    transporter._clientSub.onCallbacks.connect(); // Trigger the `resolve`\n\n\n    transporter._clientPub.onCallbacks.connect(); // Trigger the `resolve`\n\n\n    return p;\n  });","file":"unit/transporters/redis.spec.js","skipped":false,"dir":"test"},{"name":"check subscribe","suites":["Test RedisTransporter subscribe & publish cluster mode"],"updatePoint":{"line":268,"column":21},"line":268,"code":"  it(\"check subscribe\", () => {\n    transporter.clientSub.subscribe.mockClear();\n    transporter.subscribe(\"REQ\", \"node\");\n    expect(transporter.clientSub.subscribe).toHaveBeenCalledTimes(1);\n    expect(transporter.clientSub.subscribe).toHaveBeenCalledWith(\"MOL-TEST.REQ.node\");\n  });","file":"unit/transporters/redis.spec.js","skipped":false,"dir":"test"},{"name":"check incoming message handler","suites":["Test RedisTransporter subscribe & publish cluster mode"],"updatePoint":{"line":274,"column":36},"line":274,"code":"  it(\"check incoming message handler\", () => {\n    // Test subscribe callback\n    const buf = Buffer.from(\"incoming data\");\n    transporter.clientSub.onCallbacks.messageBuffer(\"MOL-TEST.event\", buf);\n    expect(transporter.incomingMessage).toHaveBeenCalledTimes(1);\n    expect(transporter.incomingMessage).toHaveBeenCalledWith(\"event\", buf);\n  });","file":"unit/transporters/redis.spec.js","skipped":false,"dir":"test"},{"name":"check publish","suites":["Test RedisTransporter subscribe & publish cluster mode"],"updatePoint":{"line":281,"column":19},"line":281,"code":"  it(\"check publish\", () => {\n    transporter.clientPub.publish.mockClear();\n    const packet = new P.Packet(P.PACKET_INFO, \"node2\", {\n      services: {}\n    });\n    transporter.publish(packet);\n    expect(transporter.clientPub.publish).toHaveBeenCalledTimes(1);\n    expect(transporter.clientPub.publish).toHaveBeenCalledWith(\"MOL-TEST.INFO.node2\", \"json data\");\n    expect(transporter.serialize).toHaveBeenCalledTimes(1);\n    expect(transporter.serialize).toHaveBeenCalledWith(packet);\n  });","file":"unit/transporters/redis.spec.js","skipped":false,"dir":"test"},{"name":"check constructor","suites":["Test StanTransporter constructor"],"updatePoint":{"line":43,"column":23},"line":43,"code":"  it(\"check constructor\", () => {\n    let transporter = new StanTransporter();\n    expect(transporter).toBeDefined();\n    expect(transporter.opts).toEqual({\n      clusterID: \"test-cluster\",\n      preserveBuffers: true\n    });\n    expect(transporter.connected).toBe(false);\n    expect(transporter.hasBuiltInBalancer).toBe(true);\n    expect(transporter.client).toBeNull();\n  });","file":"unit/transporters/stan.spec.js","skipped":false,"dir":"test"},{"name":"check constructor with string param","suites":["Test StanTransporter constructor"],"updatePoint":{"line":54,"column":41},"line":54,"code":"  it(\"check constructor with string param\", () => {\n    let transporter = new StanTransporter(\"stan://localhost\");\n    expect(transporter.opts).toEqual({\n      clusterID: \"test-cluster\",\n      preserveBuffers: true,\n      url: \"nats://localhost\"\n    });\n  });","file":"unit/transporters/stan.spec.js","skipped":false,"dir":"test"},{"name":"check constructor with options","suites":["Test StanTransporter constructor"],"updatePoint":{"line":62,"column":36},"line":62,"code":"  it(\"check constructor with options\", () => {\n    let opts = {\n      host: \"localhost\",\n      port: 1234\n    };\n    let transporter = new StanTransporter(opts);\n    expect(transporter.opts).toEqual({\n      clusterID: \"test-cluster\",\n      host: \"localhost\",\n      port: 1234,\n      preserveBuffers: true\n    });\n  });","file":"unit/transporters/stan.spec.js","skipped":false,"dir":"test"},{"name":"check constructor with disabled preserveBuffers","suites":["Test StanTransporter constructor"],"updatePoint":{"line":75,"column":53},"line":75,"code":"  it(\"check constructor with disabled preserveBuffers\", () => {\n    let opts = {\n      preserveBuffers: false\n    };\n    let transporter = new StanTransporter(opts);\n    expect(transporter.opts).toEqual({\n      clusterID: \"test-cluster\",\n      preserveBuffers: false\n    });\n  });","file":"unit/transporters/stan.spec.js","skipped":false,"dir":"test"},{"name":"check connect","suites":["Test StanTransporter connect & disconnect & reconnect"],"updatePoint":{"line":97,"column":19},"line":97,"code":"  it(\"check connect\", () => {\n    let p = transporter.connect().catch(protectReject).then(() => {\n      expect(transporter.client).toBeDefined();\n      expect(transporter.client.on).toHaveBeenCalledTimes(6);\n      expect(transporter.client.on).toHaveBeenCalledWith(\"connect\", expect.any(Function));\n      expect(transporter.client.on).toHaveBeenCalledWith(\"reconnect\", expect.any(Function));\n      expect(transporter.client.on).toHaveBeenCalledWith(\"reconnecting\", expect.any(Function));\n      expect(transporter.client.on).toHaveBeenCalledWith(\"disconnect\", expect.any(Function));\n      expect(transporter.client.on).toHaveBeenCalledWith(\"error\", expect.any(Function));\n      expect(transporter.client.on).toHaveBeenCalledWith(\"close\", expect.any(Function));\n    });\n\n    transporter._client.callbacks.connect();\n\n    return p;\n  });","file":"unit/transporters/stan.spec.js","skipped":false,"dir":"test"},{"name":"check connect - should broadcast error","suites":["Test StanTransporter connect & disconnect & reconnect"],"updatePoint":{"line":113,"column":44},"line":113,"code":"  it(\"check connect - should broadcast error\", () => {\n    broker.broadcastLocal = jest.fn();\n    let p = transporter.connect().catch(() => {\n      expect(transporter._client).toBeDefined();\n      expect(broker.broadcastLocal).toHaveBeenCalledTimes(1);\n      expect(broker.broadcastLocal).toHaveBeenNthCalledWith(1, \"$transporter.error\", {\n        error: new Error(\"Ups\"),\n        module: \"transporter\",\n        type: C.CLIENT_ERROR\n      });\n    }); // Trigger an error\n\n    const error = new Error(\"Ups\");\n\n    transporter._client.callbacks.error(error);\n\n    return p;\n  });","file":"unit/transporters/stan.spec.js","skipped":false,"dir":"test"},{"name":"check onConnected after connect","suites":["Test StanTransporter connect & disconnect & reconnect"],"updatePoint":{"line":131,"column":37},"line":131,"code":"  it(\"check onConnected after connect\", () => {\n    transporter.onConnected = jest.fn(() => Promise.resolve());\n    let p = transporter.connect().catch(protectReject).then(() => {\n      expect(transporter.onConnected).toHaveBeenCalledTimes(1);\n      expect(transporter.onConnected).toHaveBeenCalledWith();\n    });\n\n    transporter._client.callbacks.connect(); // Trigger the `resolve`\n\n\n    return p;\n  });","file":"unit/transporters/stan.spec.js","skipped":false,"dir":"test"},{"name":"check onConnected after reconnect","suites":["Test StanTransporter connect & disconnect & reconnect"],"updatePoint":{"line":143,"column":39},"line":143,"code":"  it(\"check onConnected after reconnect\", () => {\n    transporter.onConnected = jest.fn(() => Promise.resolve());\n    let p = transporter.connect().catch(protectReject).then(() => {\n      transporter.onConnected.mockClear();\n\n      transporter._client.callbacks.reconnect(); // Trigger the `resolve`\n\n\n      expect(transporter.onConnected).toHaveBeenCalledTimes(1);\n      expect(transporter.onConnected).toHaveBeenCalledWith(true);\n    });\n\n    transporter._client.callbacks.connect(); // Trigger the `resolve`\n\n\n    return p;\n  });","file":"unit/transporters/stan.spec.js","skipped":false,"dir":"test"},{"name":"check disconnect","suites":["Test StanTransporter connect & disconnect & reconnect"],"updatePoint":{"line":160,"column":22},"line":160,"code":"  it(\"check disconnect\", () => {\n    let p = transporter.connect().catch(protectReject).then(() => {\n      let cb = transporter.client.close;\n      transporter.disconnect();\n      expect(transporter.client).toBeNull();\n      expect(cb).toHaveBeenCalledTimes(1);\n    });\n\n    transporter._client.callbacks.connect(); // Trigger the `resolve`\n\n\n    return p;\n  });","file":"unit/transporters/stan.spec.js","skipped":false,"dir":"test"},{"name":"check subscribe","suites":["Test StanTransporter subscribe & publish"],"updatePoint":{"line":191,"column":21},"line":191,"code":"  it(\"check subscribe\", () => {\n    let subCb;\n    let subscribeOn = jest.fn((msg, cb) => {\n      subCb = cb;\n    });\n    transporter.client.subscribe = jest.fn(() => {\n      return {\n        on: subscribeOn\n      };\n    });\n    transporter.incomingMessage = jest.fn();\n    transporter.subscribe(\"REQ\", \"node\");\n    expect(transporter.client.subscribe).toHaveBeenCalledTimes(1);\n    expect(transporter.client.subscribe).toHaveBeenCalledWith(\"MOL-TEST.REQ.node\", expect.any(Object));\n    expect(transporter.client.subscriptionOptions).toHaveBeenCalledTimes(1);\n    expect(subscribeOn).toHaveBeenCalledTimes(1);\n    expect(subscribeOn).toHaveBeenCalledWith(\"message\", expect.any(Function)); // Test subscribe callback\n\n    subCb({\n      getRawData() {\n        return \"incoming data\";\n      }\n\n    });\n    expect(transporter.incomingMessage).toHaveBeenCalledTimes(1);\n    expect(transporter.incomingMessage).toHaveBeenCalledWith(\"REQ\", \"incoming data\");\n  });","file":"unit/transporters/stan.spec.js","skipped":false,"dir":"test"},{"name":"check subscribeBalancedRequest","suites":["Test StanTransporter subscribe & publish"],"updatePoint":{"line":218,"column":36},"line":218,"code":"  it(\"check subscribeBalancedRequest\", () => {\n    transporter.client.subscriptionOptions.mockClear();\n    transporter.client.setDeliverAllAvailable.mockClear();\n    transporter.client.setDurableName.mockClear();\n    let subCb;\n    let subscribeOn = jest.fn((msg, cb) => {\n      subCb = cb;\n    });\n    transporter.client.subscribe = jest.fn(() => {\n      return {\n        on: subscribeOn\n      };\n    });\n    transporter.incomingMessage = jest.fn();\n    transporter.subscribeBalancedRequest(\"posts.find\");\n    expect(transporter.client.subscribe).toHaveBeenCalledTimes(1);\n    expect(transporter.client.subscribe).toHaveBeenCalledWith(\"MOL-TEST.REQB.posts.find\", \"posts.find\", expect.any(Object));\n    expect(transporter.client.subscriptionOptions).toHaveBeenCalledTimes(1);\n    expect(transporter.client.setDeliverAllAvailable).toHaveBeenCalledTimes(1);\n    expect(transporter.client.setDurableName).toHaveBeenCalledTimes(1);\n    expect(transporter.client.setDurableName).toHaveBeenCalledWith(\"REQB\");\n    expect(subscribeOn).toHaveBeenCalledTimes(1);\n    expect(subscribeOn).toHaveBeenCalledWith(\"message\", expect.any(Function)); // Test subscribe callback\n\n    subCb({\n      getRawData() {\n        return \"incoming data\";\n      }\n\n    });\n    expect(transporter.incomingMessage).toHaveBeenCalledTimes(1);\n    expect(transporter.incomingMessage).toHaveBeenCalledWith(\"REQ\", \"incoming data\");\n  });","file":"unit/transporters/stan.spec.js","skipped":false,"dir":"test"},{"name":"check subscribeBalancedEvent","suites":["Test StanTransporter subscribe & publish"],"updatePoint":{"line":251,"column":34},"line":251,"code":"  it(\"check subscribeBalancedEvent\", () => {\n    transporter.client.subscriptionOptions.mockClear();\n    transporter.client.setDeliverAllAvailable.mockClear();\n    transporter.client.setDurableName.mockClear();\n    let subCb;\n    let subscribeOn = jest.fn((msg, cb) => {\n      subCb = cb;\n    });\n    let unsubscribe = jest.fn();\n    transporter.client.subscribe = jest.fn(() => {\n      return {\n        on: subscribeOn,\n        unsubscribe: unsubscribe\n      };\n    });\n    transporter.incomingMessage = jest.fn();\n    transporter.subscribeBalancedEvent(\"user.created\", \"mail\");\n    expect(transporter.client.subscribe).toHaveBeenCalledTimes(1);\n    expect(transporter.client.subscribe).toHaveBeenCalledWith(\"MOL-TEST.EVENTB.mail.user.created\", \"mail\", expect.any(Object));\n    expect(transporter.client.subscriptionOptions).toHaveBeenCalledTimes(1);\n    expect(transporter.client.setDeliverAllAvailable).toHaveBeenCalledTimes(1);\n    expect(transporter.client.setDurableName).toHaveBeenCalledTimes(1);\n    expect(transporter.client.setDurableName).toHaveBeenCalledWith(\"EVENTB\");\n    expect(subscribeOn).toHaveBeenCalledTimes(1);\n    expect(subscribeOn).toHaveBeenCalledWith(\"message\", expect.any(Function)); // Test subscribe callback\n\n    subCb({\n      getRawData() {\n        return \"incoming data\";\n      }\n\n    });\n    expect(transporter.incomingMessage).toHaveBeenCalledTimes(1);\n    expect(transporter.incomingMessage).toHaveBeenCalledWith(\"EVENT\", \"incoming data\"); // Test unsubscribeFromBalancedCommands\n\n    transporter.client.unsubscribe = jest.fn();\n    return transporter.unsubscribeFromBalancedCommands().catch(protectReject).then(() => {\n      expect(unsubscribe).toHaveBeenCalledTimes(1);\n    });\n  });","file":"unit/transporters/stan.spec.js","skipped":false,"dir":"test"},{"name":"check publish with target","suites":["Test StanTransporter subscribe & publish"],"updatePoint":{"line":291,"column":31},"line":291,"code":"  it(\"check publish with target\", () => {\n    transporter.serialize = jest.fn(() => Buffer.from(\"json data\"));\n    transporter.client.publish = jest.fn((topic, payload, resolve) => resolve());\n    const packet = new P.Packet(P.PACKET_INFO, \"node2\", {});\n    return transporter.publish(packet).catch(protectReject).then(() => {\n      expect(transporter.client.publish).toHaveBeenCalledTimes(1);\n      expect(transporter.client.publish).toHaveBeenCalledWith(\"MOL-TEST.INFO.node2\", Buffer.from(\"json data\"), expect.any(Function));\n    });\n  });","file":"unit/transporters/stan.spec.js","skipped":false,"dir":"test"},{"name":"check publish without target","suites":["Test StanTransporter subscribe & publish"],"updatePoint":{"line":300,"column":34},"line":300,"code":"  it(\"check publish without target\", () => {\n    transporter.serialize = jest.fn(() => Buffer.from(\"json data\"));\n    transporter.client.publish = jest.fn((topic, payload, resolve) => resolve());\n    const packet = new P.Packet(P.PACKET_INFO, null, {});\n    return transporter.publish(packet).catch(protectReject).then(() => {\n      expect(transporter.client.publish).toHaveBeenCalledTimes(1);\n      expect(transporter.client.publish).toHaveBeenCalledWith(\"MOL-TEST.INFO\", Buffer.from(\"json data\"), expect.any(Function));\n    });\n  });","file":"unit/transporters/stan.spec.js","skipped":false,"dir":"test"},{"name":"check publishBalancedEvent","suites":["Test StanTransporter subscribe & publish"],"updatePoint":{"line":309,"column":32},"line":309,"code":"  it(\"check publishBalancedEvent\", () => {\n    transporter.serialize = jest.fn(() => Buffer.from(\"json data\"));\n    transporter.client.publish = jest.fn((topic, payload, resolve) => resolve());\n    const packet = new P.Packet(P.PACKET_EVENT, null, {\n      event: \"user.created\",\n      data: {\n        id: 5\n      },\n      groups: [\"mail\"]\n    });\n    return transporter.publishBalancedEvent(packet, \"mail\").catch(protectReject).then(() => {\n      expect(transporter.client.publish).toHaveBeenCalledTimes(1);\n      expect(transporter.client.publish).toHaveBeenCalledWith(\"MOL-TEST.EVENTB.mail.user.created\", Buffer.from(\"json data\"), expect.any(Function));\n    });\n  });","file":"unit/transporters/stan.spec.js","skipped":false,"dir":"test"},{"name":"check publishBalancedRequest","suites":["Test StanTransporter subscribe & publish"],"updatePoint":{"line":324,"column":34},"line":324,"code":"  it(\"check publishBalancedRequest\", () => {\n    transporter.serialize = jest.fn(() => Buffer.from(\"json data\"));\n    transporter.client.publish = jest.fn((topic, payload, resolve) => resolve());\n    const packet = new P.Packet(P.PACKET_REQUEST, null, {\n      action: \"posts.find\"\n    });\n    return transporter.publishBalancedRequest(packet).catch(protectReject).then(() => {\n      expect(transporter.client.publish).toHaveBeenCalledTimes(1);\n      expect(transporter.client.publish).toHaveBeenCalledWith(\"MOL-TEST.REQB.posts.find\", Buffer.from(\"json data\"), expect.any(Function));\n    });\n  });","file":"unit/transporters/stan.spec.js","skipped":false,"dir":"test"},{"name":"check constructor","suites":["Test TcpTransporter constructor"],"updatePoint":{"line":58,"column":23},"line":58,"code":"  it(\"check constructor\", () => {\n    let transporter = new TcpTransporter();\n    expect(transporter).toBeDefined();\n    expect(transporter.opts).toEqual({\n      udpDiscovery: true,\n      udpReuseAddr: true,\n      udpMaxDiscovery: 0,\n      udpBindAddress: null,\n      udpPort: 4445,\n      udpPeriod: 30,\n      udpMulticast: \"239.0.0.0\",\n      udpMulticastTTL: 1,\n      udpBroadcast: false,\n      port: null,\n      urls: null,\n      useHostname: true,\n      gossipPeriod: 2,\n      maxConnections: 32,\n      maxPacketSize: 1 * 1024 * 1024\n    });\n    expect(transporter.connected).toBe(false);\n    expect(transporter.hasBuiltInBalancer).toBe(false);\n    expect(transporter.reader).toBeNull();\n    expect(transporter.writer).toBeNull();\n    expect(transporter.udpServer).toBeNull();\n    expect(transporter.gossipTimer).toBeNull();\n  }); // it(\"check constructor with string param\", () => {","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"check constructor with options","suites":["Test TcpTransporter constructor"],"updatePoint":{"line":89,"column":36},"line":89,"code":"  it(\"check constructor with options\", () => {\n    let opts = {\n      udpDiscovery: false,\n      udpBindAddress: \"10.0.0.4\",\n      port: 5555,\n      udpBroadcast: true\n    };\n    let transporter = new TcpTransporter(opts);\n    expect(transporter.opts).toEqual({\n      udpDiscovery: false,\n      udpReuseAddr: true,\n      udpMaxDiscovery: 0,\n      udpBindAddress: \"10.0.0.4\",\n      udpPort: 4445,\n      udpPeriod: 30,\n      udpBroadcast: true,\n      udpMulticast: \"239.0.0.0\",\n      udpMulticastTTL: 1,\n      port: 5555,\n      urls: null,\n      useHostname: true,\n      gossipPeriod: 2,\n      maxConnections: 32,\n      maxPacketSize: 1 * 1024 * 1024\n    });\n  });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"check init","suites":["Test TcpTransporter init"],"updatePoint":{"line":122,"column":16},"line":122,"code":"  it(\"check init\", () => {\n    broker.registry.discoverer.disableHeartbeat = jest.fn();\n    transporter.init(broker.transit, jest.fn(), jest.fn());\n    expect(transporter.registry).toBe(broker.registry);\n    expect(transporter.nodes).toBe(broker.registry.nodes);\n    expect(broker.registry.discoverer.disableHeartbeat).toHaveBeenCalledTimes(1);\n  });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"check connect","suites":["Test TcpTransporter connect & disconnect & reconnect"],"updatePoint":{"line":148,"column":19},"line":148,"code":"  it(\"check connect\", () => {\n    transporter.onConnected = jest.fn(() => Promise.resolve());\n    broker.registry.regenerateLocalRawInfo = jest.fn();\n    let p = transporter.connect().catch(protectReject).then(() => {\n      expect(transporter.connected).toBe(true);\n      expect(transporter.startTcpServer).toHaveBeenCalledTimes(1);\n      expect(transporter.startUdpServer).toHaveBeenCalledTimes(1);\n      expect(transporter.startTimers).toHaveBeenCalledTimes(1);\n      expect(broker.registry.nodes.localNode.port).toBe(1234);\n      expect(broker.registry.regenerateLocalRawInfo).toHaveBeenCalledTimes(1);\n      expect(transporter.onConnected).toHaveBeenCalledTimes(1);\n      expect(transporter.loadUrls).toHaveBeenCalledTimes(0);\n    });\n    return p;\n  });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"check connect with loadUrls","suites":["Test TcpTransporter connect & disconnect & reconnect"],"updatePoint":{"line":163,"column":33},"line":163,"code":"  it(\"check connect with loadUrls\", () => {\n    transporter.onConnected = jest.fn(() => Promise.resolve());\n    transporter.opts.urls = [];\n    let p = transporter.connect().catch(protectReject).then(() => {\n      expect(transporter.connected).toBe(true);\n      expect(transporter.startTcpServer).toHaveBeenCalledTimes(1);\n      expect(transporter.startUdpServer).toHaveBeenCalledTimes(1);\n      expect(transporter.startTimers).toHaveBeenCalledTimes(1);\n      expect(broker.registry.nodes.localNode.port).toBe(1234);\n      expect(transporter.onConnected).toHaveBeenCalledTimes(1);\n      expect(transporter.loadUrls).toHaveBeenCalledTimes(1);\n    });\n    return p;\n  });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"check disconnect","suites":["Test TcpTransporter connect & disconnect & reconnect"],"updatePoint":{"line":177,"column":22},"line":177,"code":"  it(\"check disconnect\", () => {\n    transporter.reader = {\n      close: jest.fn()\n    };\n    transporter.writer = {\n      close: jest.fn()\n    };\n    transporter.udpServer = {\n      close: jest.fn()\n    };\n    return transporter.connect().catch(protectReject).then(() => {\n      transporter.disconnect();\n      expect(transporter.connected).toBe(false);\n      expect(transporter.stopTimers).toHaveBeenCalledTimes(1);\n      expect(transporter.reader.close).toHaveBeenCalledTimes(1);\n      expect(transporter.writer.close).toHaveBeenCalledTimes(1);\n      expect(transporter.udpServer.close).toHaveBeenCalledTimes(1);\n    });\n  });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"should return nodes.localNode","suites":["Test TcpTransporter getLocalNodeInfo & getNodeInfo"],"updatePoint":{"line":207,"column":35},"line":207,"code":"  it(\"should return nodes.localNode\", () => {\n    expect(transporter.getLocalNodeInfo()).toBe(transporter.nodes.localNode);\n  });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"should return with selected node","suites":["Test TcpTransporter getLocalNodeInfo & getNodeInfo"],"updatePoint":{"line":210,"column":38},"line":210,"code":"  it(\"should return with selected node\", () => {\n    let node = {};\n    transporter.nodes.get = jest.fn(() => node);\n    expect(transporter.getNodeInfo(\"node-2\")).toBe(node);\n    expect(transporter.nodes.get).toHaveBeenCalledTimes(1);\n    expect(transporter.nodes.get).toHaveBeenCalledWith(\"node-2\");\n  });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"should send packet with target","suites":["Test TcpTransporter subscribe & publish"],"updatePoint":{"line":237,"column":36},"line":237,"code":"  it(\"should send packet with target\", () => {\n    const packet = new P.Packet(P.PACKET_EVENT, \"node2\", {});\n    return transporter.publish(packet).catch(protectReject).then(() => {\n      expect(transporter.writer.send).toHaveBeenCalledTimes(1);\n      expect(transporter.writer.send).toHaveBeenCalledWith(\"node2\", 1, Buffer.from(\"json data\"));\n      expect(transporter.serialize).toHaveBeenCalledTimes(1);\n      expect(transporter.serialize).toHaveBeenCalledWith(packet);\n    });\n  });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"should call disconnect if can't send packet","suites":["Test TcpTransporter subscribe & publish"],"updatePoint":{"line":246,"column":49},"line":246,"code":"  it(\"should call disconnect if can't send packet\", () => {\n    transporter.serialize.mockClear();\n    transporter.writer.send = jest.fn(() => Promise.reject());\n    transporter.nodes.disconnected = jest.fn();\n    const packet = new P.Packet(P.PACKET_EVENT, \"node2\", {});\n    return transporter.publish(packet).then(protectReject).catch(() => {\n      expect(transporter.writer.send).toHaveBeenCalledTimes(1);\n      expect(transporter.writer.send).toHaveBeenCalledWith(\"node2\", 1, Buffer.from(\"json data\"));\n      expect(transporter.nodes.disconnected).toHaveBeenCalledTimes(1);\n      expect(transporter.nodes.disconnected).toHaveBeenCalledWith(\"node2\", true);\n    });\n  });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"should not send without target","suites":["Test TcpTransporter subscribe & publish"],"updatePoint":{"line":258,"column":36},"line":258,"code":"  it(\"should not send without target\", () => {\n    transporter.serialize.mockClear();\n    transporter.writer.send.mockClear();\n    const packet = new P.Packet(P.PACKET_EVENT, null, {});\n    return transporter.publish(packet).catch(protectReject).then(() => {\n      expect(transporter.writer.send).toHaveBeenCalledTimes(0);\n      expect(transporter.serialize).toHaveBeenCalledTimes(0);\n    });\n  });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"should not send declined packets","suites":["Test TcpTransporter subscribe & publish"],"updatePoint":{"line":267,"column":38},"line":267,"code":"  it(\"should not send declined packets\", () => {\n    transporter.serialize.mockClear();\n    transporter.writer.send.mockClear();\n    const packet = new P.Packet(P.PACKET_DISCOVER);\n    return transporter.publish(packet).catch(protectReject).then(() => {\n      expect(transporter.writer.send).toHaveBeenCalledTimes(0);\n      expect(transporter.serialize).toHaveBeenCalledTimes(0);\n    });\n  });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"should create an offline node","suites":["Test TcpTransporter nodes functions"],"updatePoint":{"line":294,"column":35},"line":294,"code":"  it(\"should create an offline node\", () => {\n    expect(transporter.nodes.toArray().length).toBe(1);\n    const node = transporter.addOfflineNode(\"node-123\", \"10.20.30.40\", 12345);\n    expect(node.id).toBe(\"node-123\");\n    expect(node.local).toBe(false);\n    expect(node.hostname).toBe(\"10.20.30.40\");\n    expect(node.ipList).toEqual([\"10.20.30.40\"]);\n    expect(node.port).toBe(12345);\n    expect(node.available).toBe(false);\n    expect(node.seq).toBe(0);\n    expect(node.offlineSince).toBeDefined();\n    expect(transporter.getNode(\"node-123\")).toBe(node);\n  });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"check getNodeAddress method","suites":["Test TcpTransporter nodes functions"],"updatePoint":{"line":307,"column":33},"line":307,"code":"  it(\"check getNodeAddress method\", () => {\n    const node = transporter.addOfflineNode(\"node-123\", \"10.20.30.40\", 12345);\n    node.udpAddress = \"udp-address\";\n    node.hostname = \"server-host\";\n    expect(transporter.getNodeAddress(node)).toBe(\"udp-address\");\n    node.udpAddress = null;\n    expect(transporter.getNodeAddress(node)).toBe(\"server-host\");\n    transporter.opts.useHostname = false;\n    expect(transporter.getNodeAddress(node)).toBe(\"10.20.30.40\");\n    transporter.opts.useHostname = true;\n    node.hostname = null;\n    expect(transporter.getNodeAddress(node)).toBe(\"10.20.30.40\");\n    node.ipList = [];\n    expect(transporter.getNodeAddress(node)).toBeNull();\n  });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"check startTcpServer","suites":["Test TcpTransporter startTcpServer"],"updatePoint":{"line":335,"column":26},"line":335,"code":"  it(\"check startTcpServer\", () => {\n    transporter.startTcpServer();\n    expect(TcpWriter).toHaveBeenCalledTimes(1);\n    expect(TcpWriter).toHaveBeenCalledWith(transporter, transporter.opts);\n    expect(TcpReader).toHaveBeenCalledTimes(1);\n    expect(TcpReader).toHaveBeenCalledWith(transporter, transporter.opts);\n    expect(transporter.writer.on).toHaveBeenCalledTimes(2);\n    expect(transporter.writer.on).toHaveBeenCalledWith(\"error\", expect.any(Function));\n    expect(transporter.writer.on).toHaveBeenCalledWith(\"end\", expect.any(Function));\n    expect(transporter.reader.listen).toHaveBeenCalledTimes(1);\n    expect(transporter.reader.listen).toHaveBeenCalledWith();\n  });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"check writer error handler","suites":["Test TcpTransporter startTcpServer"],"updatePoint":{"line":347,"column":32},"line":347,"code":"  it(\"check writer error handler\", () => {\n    transporter.startTcpServer();\n    transporter.nodes.disconnected = jest.fn();\n\n    transporter.writer.__callbacks.error(null, \"node-2\");\n\n    expect(transporter.nodes.disconnected).toHaveBeenCalledTimes(1);\n    expect(transporter.nodes.disconnected).toHaveBeenCalledWith(\"node-2\", false);\n  });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"check writer end handler","suites":["Test TcpTransporter startTcpServer"],"updatePoint":{"line":356,"column":30},"line":356,"code":"  it(\"check writer end handler\", () => {\n    transporter.startTcpServer();\n    transporter.nodes.disconnected = jest.fn();\n\n    transporter.writer.__callbacks.end(\"node-2\");\n\n    expect(transporter.nodes.disconnected).toHaveBeenCalledTimes(1);\n    expect(transporter.nodes.disconnected).toHaveBeenCalledWith(\"node-2\", false);\n  });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"check startUdpServer","suites":["Test TcpTransporter startUdpServer"],"updatePoint":{"line":378,"column":26},"line":378,"code":"  it(\"check startUdpServer\", () => {\n    transporter.startUdpServer();\n    expect(UdpServer).toHaveBeenCalledTimes(1);\n    expect(UdpServer).toHaveBeenCalledWith(transporter, transporter.opts);\n    expect(transporter.udpServer.on).toHaveBeenCalledTimes(1);\n    expect(transporter.udpServer.on).toHaveBeenCalledWith(\"message\", expect.any(Function));\n    expect(transporter.udpServer.bind).toHaveBeenCalledTimes(1);\n    expect(transporter.udpServer.bind).toHaveBeenCalledWith();\n  });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"check UDP server message handler if new node","suites":["Test TcpTransporter startUdpServer"],"updatePoint":{"line":387,"column":50},"line":387,"code":"  it(\"check UDP server message handler if new node\", () => {\n    transporter.startUdpServer();\n    transporter.nodes.get = jest.fn(() => null);\n    const node = {};\n    transporter.addOfflineNode = jest.fn(() => node);\n\n    transporter.udpServer.__callbacks.message(\"node-2\", \"10.20.30.40\", 12345);\n\n    expect(node.udpAddress).toBe(\"10.20.30.40\");\n    expect(transporter.nodes.get).toHaveBeenCalledTimes(1);\n    expect(transporter.nodes.get).toHaveBeenCalledWith(\"node-2\");\n    expect(transporter.addOfflineNode).toHaveBeenCalledTimes(1);\n    expect(transporter.addOfflineNode).toHaveBeenCalledWith(\"node-2\", \"10.20.30.40\", 12345);\n  });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"check UDP server message handler if offline node","suites":["Test TcpTransporter startUdpServer"],"updatePoint":{"line":401,"column":54},"line":401,"code":"  it(\"check UDP server message handler if offline node\", () => {\n    transporter.startUdpServer();\n    const node = {\n      ipList: [],\n      available: false\n    };\n    transporter.nodes.get = jest.fn(() => node);\n    transporter.addOfflineNode = jest.fn(() => node);\n\n    transporter.udpServer.__callbacks.message(\"node-2\", \"10.20.30.40\", 12345);\n\n    expect(node.hostname).toBe(\"10.20.30.40\");\n    expect(node.ipList).toEqual([\"10.20.30.40\"]);\n    expect(node.port).toBe(12345);\n    expect(node.udpAddress).toBe(\"10.20.30.40\");\n    expect(transporter.nodes.get).toHaveBeenCalledTimes(1);\n    expect(transporter.nodes.get).toHaveBeenCalledWith(\"node-2\");\n    expect(transporter.addOfflineNode).toHaveBeenCalledTimes(0);\n  });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"check UDP server message handler if available node","suites":["Test TcpTransporter startUdpServer"],"updatePoint":{"line":420,"column":56},"line":420,"code":"  it(\"check UDP server message handler if available node\", () => {\n    transporter.startUdpServer();\n    const node = {\n      ipList: [],\n      available: true,\n      hostname: \"old\",\n      port: 1000\n    };\n    transporter.nodes.get = jest.fn(() => node);\n    transporter.addOfflineNode = jest.fn(() => node);\n\n    transporter.udpServer.__callbacks.message(\"node-2\", \"10.20.30.40\", 12345);\n\n    expect(node.hostname).toBe(\"old\");\n    expect(node.ipList).toEqual([]);\n    expect(node.port).toBe(1000);\n    expect(node.udpAddress).toBe(\"10.20.30.40\");\n    expect(transporter.nodes.get).toHaveBeenCalledTimes(1);\n    expect(transporter.nodes.get).toHaveBeenCalledWith(\"node-2\");\n    expect(transporter.addOfflineNode).toHaveBeenCalledTimes(0);\n  });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"check startTimers","suites":["Test TcpTransporter startUdpServer"],"updatePoint":{"line":460,"column":23},"line":460,"code":"  it(\"check startTimers\", () => {\n    expect(transporter.gossipTimer).toBeNull();\n    transporter.startTimers();\n    expect(transporter.gossipTimer).toBeDefined();\n    transporter.stopTimers(); // clean up handle\n  });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"check timer callback","suites":["Test TcpTransporter startUdpServer"],"updatePoint":{"line":466,"column":26},"line":466,"code":"  it(\"check timer callback\", async () => {\n    jest.useFakeTimers();\n    transporter.startTimers();\n    jest.advanceTimersByTime(2500);\n    await promUpdateLocalInfo;\n    expect(transporter.getLocalNodeInfo).toBeCalledTimes(1);\n    expect(fakeNode.updateLocalInfo).toBeCalledTimes(1);\n    expect(fakeNode.updateLocalInfo).toBeCalledWith(broker.getCpuUsage);\n    expect(transporter.sendGossipRequest).toBeCalledTimes(1);\n    transporter.stopTimers(); // clean up handle\n  });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"check stopTimers","suites":["Test TcpTransporter startUdpServer"],"updatePoint":{"line":477,"column":22},"line":477,"code":"  it(\"check stopTimers\", () => {\n    transporter.startTimers();\n    expect(transporter.gossipTimer).toBeDefined();\n    transporter.stopTimers();\n    expect(transporter.gossipTimer).toBeNull();\n  });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"check with null","suites":["Test TcpTransporter loadUrls"],"updatePoint":{"line":500,"column":21},"line":500,"code":"  it(\"check with null\", () => {\n    return createTransporter({\n      urls: null\n    }).catch(protectReject).then(transporter => {\n      expect(transporter.addOfflineNode).toHaveBeenCalledTimes(0);\n      expect(transporter.logger.warn).toHaveBeenCalledTimes(0); // expect(transporter.nodes.disableOfflineNodeRemoving).toBe(false);\n    });\n  });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"check with empty string","suites":["Test TcpTransporter loadUrls"],"updatePoint":{"line":508,"column":29},"line":508,"code":"  it(\"check with empty string\", () => {\n    return createTransporter({\n      urls: \"\"\n    }).catch(protectReject).then(transporter => {\n      expect(transporter.addOfflineNode).toHaveBeenCalledTimes(0);\n      expect(transporter.logger.warn).toHaveBeenCalledTimes(0); // expect(transporter.nodes.disableOfflineNodeRemoving).toBe(false);\n    });\n  });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"check with empty array","suites":["Test TcpTransporter loadUrls"],"updatePoint":{"line":516,"column":28},"line":516,"code":"  it(\"check with empty array\", () => {\n    return createTransporter({\n      urls: []\n    }).catch(protectReject).then(transporter => {\n      expect(transporter.addOfflineNode).toHaveBeenCalledTimes(0);\n      expect(transporter.logger.warn).toHaveBeenCalledTimes(0); // expect(transporter.nodes.disableOfflineNodeRemoving).toBe(false);\n    });\n  });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"check with string","suites":["Test TcpTransporter loadUrls"],"updatePoint":{"line":524,"column":23},"line":524,"code":"  it(\"check with string\", () => {\n    return createTransporter({\n      urls: \"tcp://192.168.0.1:5001/node-1, tcp://192.168.0.2:5002/node-2,192.168.0.3:5003/node-3,tcp://192.168.0.4:5004,tcp://192.168.0.123:5123/node-123,192.168.0.5/node-5\",\n      port: 1234\n    }).catch(protectReject).then(transporter => {\n      expect(transporter.addOfflineNode).toHaveBeenCalledTimes(3);\n      expect(transporter.addOfflineNode).toHaveBeenCalledWith(\"node-1\", \"192.168.0.1\", 5001);\n      expect(transporter.addOfflineNode).toHaveBeenCalledWith(\"node-2\", \"192.168.0.2\", 5002);\n      expect(transporter.addOfflineNode).toHaveBeenCalledWith(\"node-3\", \"192.168.0.3\", 5003);\n      expect(transporter.logger.warn).toHaveBeenCalledTimes(2);\n      expect(transporter.logger.warn).toHaveBeenCalledWith(\"Invalid endpoint URL. Missing nodeID. URL:\", \"192.168.0.4:5004\");\n      expect(transporter.logger.warn).toHaveBeenCalledWith(\"Invalid endpoint URL. Missing port. URL:\", \"192.168.0.5/node-5\");\n      expect(transporter.opts.port).toBe(1234); // expect(transporter.nodes.disableOfflineNodeRemoving).toBe(true);\n    });\n  });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"check with connection string","suites":["Test TcpTransporter loadUrls"],"updatePoint":{"line":539,"column":34},"line":539,"code":"  it(\"check with connection string\", () => {\n    return createTransporter(\"tcp://192.168.0.1:5001/node-1, tcp://192.168.0.2:5002/node-2,192.168.0.3:5003/node-3,tcp://192.168.0.4:5004,tcp://192.168.0.123:5123/node-123,192.168.0.5/node-5\").catch(protectReject).then(transporter => {\n      expect(transporter.addOfflineNode).toHaveBeenCalledTimes(3);\n      expect(transporter.addOfflineNode).toHaveBeenCalledWith(\"node-1\", \"192.168.0.1\", 5001);\n      expect(transporter.addOfflineNode).toHaveBeenCalledWith(\"node-2\", \"192.168.0.2\", 5002);\n      expect(transporter.addOfflineNode).toHaveBeenCalledWith(\"node-3\", \"192.168.0.3\", 5003);\n      expect(transporter.logger.warn).toHaveBeenCalledTimes(2);\n      expect(transporter.logger.warn).toHaveBeenCalledWith(\"Invalid endpoint URL. Missing nodeID. URL:\", \"192.168.0.4:5004\");\n      expect(transporter.logger.warn).toHaveBeenCalledWith(\"Invalid endpoint URL. Missing port. URL:\", \"192.168.0.5/node-5\");\n      expect(transporter.opts.port).toBe(5123); // expect(transporter.nodes.disableOfflineNodeRemoving).toBe(true);\n    });\n  });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"check with array","suites":["Test TcpTransporter loadUrls"],"updatePoint":{"line":551,"column":22},"line":551,"code":"  it(\"check with array\", () => {\n    return createTransporter({\n      urls: [\"tcp://192.168.0.1:5001/node-1\", \"tcp://192.168.0.2:5002/node-2\", \"192.168.0.3:5003/node-3\", \"tcp://192.168.0.4:5004\", \"tcp://192.168.0.123:5123/node-123\", \"192.168.0.5/node-5\"]\n    }).catch(protectReject).then(transporter => {\n      expect(transporter.addOfflineNode).toHaveBeenCalledTimes(3);\n      expect(transporter.addOfflineNode).toHaveBeenCalledWith(\"node-1\", \"192.168.0.1\", 5001);\n      expect(transporter.addOfflineNode).toHaveBeenCalledWith(\"node-2\", \"192.168.0.2\", 5002);\n      expect(transporter.addOfflineNode).toHaveBeenCalledWith(\"node-3\", \"192.168.0.3\", 5003);\n      expect(transporter.logger.warn).toHaveBeenCalledTimes(2);\n      expect(transporter.logger.warn).toHaveBeenCalledWith(\"Invalid endpoint URL. Missing nodeID. URL:\", \"192.168.0.4:5004\");\n      expect(transporter.logger.warn).toHaveBeenCalledWith(\"Invalid endpoint URL. Missing port. URL:\", \"192.168.0.5/node-5\"); // expect(transporter.nodes.disableOfflineNodeRemoving).toBe(true);\n    });\n  });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"check with object","suites":["Test TcpTransporter loadUrls"],"updatePoint":{"line":564,"column":23},"line":564,"code":"  it(\"check with object\", () => {\n    return createTransporter({\n      urls: {\n        \"node-1\": \"tcp://192.168.0.1:5001\",\n        \"node-2\": \"tcp://192.168.0.2:5002\",\n        \"node-3\": \"192.168.0.3:5003\",\n        \"node-4\": \"tcp://192.168.0.4:5004\",\n        \"node-123\": \"tcp://192.168.0.123:5123\",\n        \"node-5\": \"192.168.0.5\"\n      }\n    }).catch(protectReject).then(transporter => {\n      expect(transporter.addOfflineNode).toHaveBeenCalledTimes(4);\n      expect(transporter.addOfflineNode).toHaveBeenCalledWith(\"node-1\", \"192.168.0.1\", 5001);\n      expect(transporter.addOfflineNode).toHaveBeenCalledWith(\"node-2\", \"192.168.0.2\", 5002);\n      expect(transporter.addOfflineNode).toHaveBeenCalledWith(\"node-3\", \"192.168.0.3\", 5003);\n      expect(transporter.addOfflineNode).toHaveBeenCalledWith(\"node-4\", \"192.168.0.4\", 5004);\n      expect(transporter.logger.warn).toHaveBeenCalledTimes(1);\n      expect(transporter.logger.warn).toHaveBeenCalledWith(\"Invalid endpoint URL. Missing port. URL:\", \"192.168.0.5/node-5\"); // expect(transporter.nodes.disableOfflineNodeRemoving).toBe(true);\n    });\n  });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"should parse txt file","suites":["Test TcpTransporter loadUrls","check with file path"],"updatePoint":{"line":585,"column":29},"line":585,"code":"    it(\"should parse txt file\", () => {\n      fs.readFileSync = jest.fn(() => \"tcp://192.168.0.1:5001/node-1\\ntcp://192.168.0.2:5002/node-2\\n\\n192.168.0.3:5003/node-3\\ntcp://192.168.0.4:5004\\ntcp://192.168.0.123:5123/node-123\\n192.168.0.5/node-5\\n\");\n      return createTransporter({\n        urls: \"file://./registry/nodes.txt\"\n      }).catch(protectReject).then(transporter => {\n        expect(fs.readFileSync).toHaveBeenCalledTimes(1);\n        expect(fs.readFileSync).toHaveBeenCalledWith(\"./registry/nodes.txt\");\n        expect(transporter.addOfflineNode).toHaveBeenCalledTimes(3);\n        expect(transporter.addOfflineNode).toHaveBeenCalledWith(\"node-1\", \"192.168.0.1\", 5001);\n        expect(transporter.addOfflineNode).toHaveBeenCalledWith(\"node-2\", \"192.168.0.2\", 5002);\n        expect(transporter.addOfflineNode).toHaveBeenCalledWith(\"node-3\", \"192.168.0.3\", 5003);\n        expect(transporter.logger.warn).toHaveBeenCalledTimes(2);\n        expect(transporter.logger.warn).toHaveBeenCalledWith(\"Invalid endpoint URL. Missing nodeID. URL:\", \"192.168.0.4:5004\");\n        expect(transporter.logger.warn).toHaveBeenCalledWith(\"Invalid endpoint URL. Missing port. URL:\", \"192.168.0.5/node-5\"); // expect(transporter.nodes.disableOfflineNodeRemoving).toBe(true);\n      });\n    });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"should parse json file","suites":["Test TcpTransporter loadUrls","check with file path"],"updatePoint":{"line":601,"column":30},"line":601,"code":"    it(\"should parse json file\", () => {\n      fs.readFileSync = jest.fn(() => {\n        return `\n[\n\t\t\t\t\"tcp://192.168.0.1:5001/node-1\",\n\t\t\t\t\"tcp://192.168.0.2:5002/node-2\",\n\t\t\t\t\"192.168.0.3:5003/node-3\",\n\t\t\t\t\"tcp://192.168.0.4:5004\",\n\t\t\t\t\"tcp://192.168.0.123:5123/node-123\",\n\t\t\t\t\"192.168.0.5/node-5\"\n]\n`;\n      });\n      return createTransporter({\n        urls: \"file://./registry/nodes.json\"\n      }).catch(protectReject).then(transporter => {\n        expect(fs.readFileSync).toHaveBeenCalledTimes(1);\n        expect(fs.readFileSync).toHaveBeenCalledWith(\"./registry/nodes.json\");\n        expect(transporter.addOfflineNode).toHaveBeenCalledTimes(3);\n        expect(transporter.addOfflineNode).toHaveBeenCalledWith(\"node-1\", \"192.168.0.1\", 5001);\n        expect(transporter.addOfflineNode).toHaveBeenCalledWith(\"node-2\", \"192.168.0.2\", 5002);\n        expect(transporter.addOfflineNode).toHaveBeenCalledWith(\"node-3\", \"192.168.0.3\", 5003);\n        expect(transporter.logger.warn).toHaveBeenCalledTimes(2);\n        expect(transporter.logger.warn).toHaveBeenCalledWith(\"Invalid endpoint URL. Missing nodeID. URL:\", \"192.168.0.4:5004\");\n        expect(transporter.logger.warn).toHaveBeenCalledWith(\"Invalid endpoint URL. Missing port. URL:\", \"192.168.0.5/node-5\"); // expect(transporter.nodes.disableOfflineNodeRemoving).toBe(true);\n      });\n    });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"should call processGossipHello","suites":["Test TcpTransporter onIncomingMessage"],"updatePoint":{"line":646,"column":36},"line":646,"code":"  it(\"should call processGossipHello\", () => {\n    let socket = {};\n    transporter.onIncomingMessage(P.PACKET_GOSSIP_HELLO, \"message\", socket);\n    expect(transporter.processGossipHello).toHaveBeenCalledTimes(1);\n    expect(transporter.processGossipHello).toHaveBeenCalledWith(\"message\", socket);\n  });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"should call processGossipRequest","suites":["Test TcpTransporter onIncomingMessage"],"updatePoint":{"line":652,"column":38},"line":652,"code":"  it(\"should call processGossipRequest\", () => {\n    transporter.onIncomingMessage(P.PACKET_GOSSIP_REQ, \"message\");\n    expect(transporter.processGossipRequest).toHaveBeenCalledTimes(1);\n    expect(transporter.processGossipRequest).toHaveBeenCalledWith(\"message\");\n  });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"should call processGossipResponse","suites":["Test TcpTransporter onIncomingMessage"],"updatePoint":{"line":657,"column":39},"line":657,"code":"  it(\"should call processGossipResponse\", () => {\n    transporter.onIncomingMessage(P.PACKET_GOSSIP_RES, \"message\");\n    expect(transporter.processGossipResponse).toHaveBeenCalledTimes(1);\n    expect(transporter.processGossipResponse).toHaveBeenCalledWith(\"message\");\n  });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"should call incomingMessage","suites":["Test TcpTransporter onIncomingMessage"],"updatePoint":{"line":662,"column":33},"line":662,"code":"  it(\"should call incomingMessage\", () => {\n    transporter.onIncomingMessage(P.PACKET_REQUEST, \"message\");\n    expect(transporter.incomingMessage).toHaveBeenCalledTimes(1);\n    expect(transporter.incomingMessage).toHaveBeenCalledWith(P.PACKET_REQUEST, \"message\");\n    transporter.onIncomingMessage(P.PACKET_EVENT, \"message 2\");\n    expect(transporter.incomingMessage).toHaveBeenCalledTimes(2);\n    expect(transporter.incomingMessage).toHaveBeenCalledWith(P.PACKET_EVENT, \"message 2\");\n  });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"should call processGossipHello","suites":["Test Gossip methods","Test onIncomingMessage"],"updatePoint":{"line":684,"column":38},"line":684,"code":"    it(\"should call processGossipHello\", () => {\n      const msg = {};\n      const socket = {};\n      transporter.processGossipHello = jest.fn();\n      transporter.onIncomingMessage(P.PACKET_GOSSIP_HELLO, msg, socket);\n      expect(transporter.processGossipHello).toHaveBeenCalledTimes(1);\n      expect(transporter.processGossipHello).toHaveBeenCalledWith(msg, socket);\n    });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"should call processGossipRequest","suites":["Test Gossip methods","Test onIncomingMessage"],"updatePoint":{"line":692,"column":40},"line":692,"code":"    it(\"should call processGossipRequest\", () => {\n      const msg = {};\n      transporter.processGossipRequest = jest.fn();\n      transporter.onIncomingMessage(P.PACKET_GOSSIP_REQ, msg);\n      expect(transporter.processGossipRequest).toHaveBeenCalledTimes(1);\n      expect(transporter.processGossipRequest).toHaveBeenCalledWith(msg);\n    });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"should call processGossipResponse","suites":["Test Gossip methods","Test onIncomingMessage"],"updatePoint":{"line":699,"column":41},"line":699,"code":"    it(\"should call processGossipResponse\", () => {\n      const msg = {};\n      transporter.processGossipResponse = jest.fn();\n      transporter.onIncomingMessage(P.PACKET_GOSSIP_RES, msg);\n      expect(transporter.processGossipResponse).toHaveBeenCalledTimes(1);\n      expect(transporter.processGossipResponse).toHaveBeenCalledWith(msg);\n    });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"should call incomingMessage","suites":["Test Gossip methods","Test onIncomingMessage"],"updatePoint":{"line":706,"column":35},"line":706,"code":"    it(\"should call incomingMessage\", () => {\n      const msg = {};\n      transporter.incomingMessage = jest.fn();\n      transporter.onIncomingMessage(P.PACKET_REQUEST, msg);\n      expect(transporter.incomingMessage).toHaveBeenCalledTimes(1);\n      expect(transporter.incomingMessage).toHaveBeenCalledWith(P.PACKET_REQUEST, msg);\n      transporter.onIncomingMessage(P.PACKET_EVENT, msg);\n      expect(transporter.incomingMessage).toHaveBeenCalledTimes(2);\n      expect(transporter.incomingMessage).toHaveBeenCalledWith(P.PACKET_EVENT, msg);\n    });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"should throw error if nodeID is unknown","suites":["Test Gossip methods","Test sendHello"],"updatePoint":{"line":718,"column":47},"line":718,"code":"    it(\"should throw error if nodeID is unknown\", () => {\n      transporter.getNode = jest.fn();\n      return transporter.sendHello(\"node-xy\").then(protectReject).catch(err => {\n        expect(err).toBeInstanceOf(E.MoleculerServerError);\n        expect(err.message).toBe(\"Missing node info for 'node-xy'\");\n      });\n    });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"should publish a HELLO packet","suites":["Test Gossip methods","Test sendHello"],"updatePoint":{"line":725,"column":37},"line":725,"code":"    it(\"should publish a HELLO packet\", () => {\n      transporter.getNode = jest.fn(() => ({\n        id: \"node-2\",\n        ipList: [\"192.168.1.2\"]\n      }));\n      transporter.publish = jest.fn(() => Promise.resolve());\n      transporter.getNodeAddress = jest.fn(() => \"node-1-host\");\n      transporter.sendHello(\"node-2\");\n      expect(transporter.publish).toHaveBeenCalledTimes(1);\n      expect(transporter.publish).toHaveBeenCalledWith({\n        type: \"GOSSIP_HELLO\",\n        target: \"node-2\",\n        payload: {\n          host: \"node-1-host\",\n          port: null\n        }\n      });\n    });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"should create as offline node","suites":["Test Gossip methods","Test processGossipHello"],"updatePoint":{"line":745,"column":37},"line":745,"code":"    it(\"should create as offline node\", () => {\n      transporter.addOfflineNode = jest.fn();\n      transporter.nodes.get = jest.fn();\n      transporter.deserialize = jest.fn(() => ({\n        payload: {\n          sender: \"node-2\",\n          host: \"node-2-host\",\n          port: 5555\n        }\n      }));\n      transporter.processGossipHello(\"message\");\n      expect(transporter.deserialize).toHaveBeenCalledTimes(1);\n      expect(transporter.deserialize).toHaveBeenCalledWith(P.PACKET_GOSSIP_HELLO, \"message\");\n      expect(transporter.nodes.get).toHaveBeenCalledTimes(1);\n      expect(transporter.nodes.get).toHaveBeenCalledWith(\"node-2\");\n      expect(transporter.addOfflineNode).toHaveBeenCalledTimes(1);\n      expect(transporter.addOfflineNode).toHaveBeenCalledWith(\"node-2\", \"node-2-host\", 5555);\n    });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"should not create as offline node if already exists","suites":["Test Gossip methods","Test processGossipHello"],"updatePoint":{"line":763,"column":59},"line":763,"code":"    it(\"should not create as offline node if already exists\", () => {\n      transporter.addOfflineNode = jest.fn();\n      transporter.nodes.get = jest.fn(() => ({}));\n      transporter.deserialize = jest.fn(() => ({\n        payload: {\n          sender: \"node-2\",\n          host: \"node-2-host\",\n          port: 5555\n        }\n      }));\n      transporter.processGossipHello(\"message\");\n      expect(transporter.nodes.get).toHaveBeenCalledTimes(1);\n      expect(transporter.nodes.get).toHaveBeenCalledWith(\"node-2\");\n      expect(transporter.addOfflineNode).toHaveBeenCalledTimes(0);\n    });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"should not publish if no endpoint","suites":["Test Gossip methods","Test sendGossipToRandomEndpoint"],"updatePoint":{"line":792,"column":41},"line":792,"code":"    it(\"should not publish if no endpoint\", () => {\n      transporter.publish = jest.fn(() => Promise.resolve());\n      transporter.sendGossipToRandomEndpoint(data, []);\n      expect(transporter.publish).toHaveBeenCalledTimes(0);\n    });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"should select a random endpoint and publish","suites":["Test Gossip methods","Test sendGossipToRandomEndpoint"],"updatePoint":{"line":797,"column":51},"line":797,"code":"    it(\"should select a random endpoint and publish\", () => {\n      Math.random = jest.fn(() => 0.6);\n      transporter.publish = jest.fn(() => Promise.resolve());\n      transporter.sendGossipToRandomEndpoint(data, endpoints);\n      expect(transporter.publish).toHaveBeenCalledTimes(1);\n      expect(transporter.publish).toHaveBeenCalledWith({\n        type: \"GOSSIP_REQ\",\n        target: \"node-3\",\n        payload: {\n          a: 5\n        }\n      });\n    });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"should send nothing, if no other nodes","suites":["Test Gossip methods","Test sendGossipRequest"],"updatePoint":{"line":816,"column":46},"line":816,"code":"    it(\"should send nothing, if no other nodes\", () => {\n      transporter.nodes.toArray = jest.fn(() => [{\n        id: \"node-1\",\n        local: true\n      }]);\n      transporter.sendGossipRequest();\n      expect(transporter.sendGossipToRandomEndpoint).toHaveBeenCalledTimes(0);\n    });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"should send info to online node","suites":["Test Gossip methods","Test sendGossipRequest"],"updatePoint":{"line":824,"column":39},"line":824,"code":"    it(\"should send info to online node\", () => {\n      const nodes = [{\n        id: \"node-1\",\n        local: true,\n        available: true,\n        seq: 5,\n        cpu: 12,\n        cpuSeq: 2\n      }, {\n        id: \"node-2\",\n        local: false,\n        available: true,\n        seq: 3\n      }];\n      transporter.nodes.toArray = jest.fn(() => nodes);\n      transporter.sendGossipRequest();\n      expect(transporter.sendGossipToRandomEndpoint).toHaveBeenCalledTimes(1);\n      expect(transporter.sendGossipToRandomEndpoint).toHaveBeenCalledWith({\n        online: {\n          \"node-1\": [5, 2, 12],\n          \"node-2\": [3, 0, 0]\n        }\n      }, [nodes[1]]);\n    });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"should send info to offline node","suites":["Test Gossip methods","Test sendGossipRequest"],"updatePoint":{"line":848,"column":40},"line":848,"code":"    it(\"should send info to offline node\", () => {\n      const nodes = [{\n        id: \"node-1\",\n        local: true,\n        available: true,\n        seq: 5,\n        cpu: 12,\n        cpuSeq: 2\n      }, {\n        id: \"node-2\",\n        local: false,\n        available: false,\n        seq: 4\n      }];\n      transporter.nodes.toArray = jest.fn(() => nodes);\n      transporter.sendGossipRequest();\n      expect(transporter.sendGossipToRandomEndpoint).toHaveBeenCalledTimes(1);\n      expect(transporter.sendGossipToRandomEndpoint).toHaveBeenCalledWith({\n        online: {\n          \"node-1\": [5, 2, 12]\n        },\n        offline: {\n          \"node-2\": 4\n        }\n      }, [nodes[1]]);\n    });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"should send info to online & offline nodes","suites":["Test Gossip methods","Test sendGossipRequest"],"updatePoint":{"line":874,"column":50},"line":874,"code":"    it(\"should send info to online & offline nodes\", () => {\n      const nodes = [{\n        id: \"node-1\",\n        local: true,\n        available: true,\n        seq: 10,\n        cpu: 11,\n        cpuSeq: 100\n      }, {\n        id: \"node-2\",\n        local: false,\n        available: true,\n        seq: 20,\n        cpu: 22,\n        cpuSeq: 200\n      }, {\n        id: \"node-3\",\n        local: false,\n        available: true,\n        seq: 30,\n        cpu: 33,\n        cpuSeq: 300\n      }, {\n        id: \"node-4\",\n        local: false,\n        available: false,\n        seq: 40,\n        cpu: 44,\n        cpuSeq: 400\n      }, {\n        id: \"node-5\",\n        local: false,\n        available: false,\n        seq: 50,\n        cpu: 55,\n        cpuSeq: 500\n      }];\n      transporter.nodes.toArray = jest.fn(() => nodes);\n      transporter.sendGossipRequest();\n      expect(transporter.sendGossipToRandomEndpoint).toHaveBeenCalledTimes(2);\n      expect(transporter.sendGossipToRandomEndpoint).toHaveBeenCalledWith({\n        online: {\n          \"node-1\": [10, 100, 11],\n          \"node-2\": [20, 200, 22],\n          \"node-3\": [30, 300, 33]\n        },\n        offline: {\n          \"node-4\": 40,\n          \"node-5\": 50\n        }\n      }, [nodes[1], nodes[2]]);\n      expect(transporter.sendGossipToRandomEndpoint).toHaveBeenCalledWith({\n        online: {\n          \"node-1\": [10, 100, 11],\n          \"node-2\": [20, 200, 22],\n          \"node-3\": [30, 300, 33]\n        },\n        offline: {\n          \"node-4\": 40,\n          \"node-5\": 50\n        }\n      }, [nodes[3], nodes[4]]);\n    });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"should update local info and send new node info","suites":["Test Gossip methods","Test processGossipRequest"],"updatePoint":{"line":951,"column":55},"line":951,"code":"    it(\"should update local info and send new node info\", () => {\n      const nodes = [{\n        id: \"node-1\",\n        local: true,\n        available: true,\n        seq: 10,\n        cpu: 11,\n        cpuSeq: 100\n      }, {\n        id: \"node-2\",\n        local: false,\n        available: true,\n        seq: 20,\n        cpu: 22,\n        cpuSeq: 200\n      }, {\n        id: \"node-3\",\n        local: false,\n        available: true,\n        seq: 30,\n        cpu: 33,\n        cpuSeq: 300\n      }, {\n        id: \"node-4\",\n        local: false,\n        available: false,\n        seq: 40,\n        cpu: 44,\n        cpuSeq: 400\n      }, {\n        id: \"node-5\",\n        local: false,\n        available: false,\n        seq: 50,\n        cpu: 55,\n        cpuSeq: 500\n      }, {\n        id: \"node-6\",\n        local: false,\n        available: false,\n        seq: 60,\n        cpu: 66,\n        cpuSeq: 600\n      }];\n      transporter.nodes.toArray = jest.fn(() => nodes);\n      transporter.processGossipRequest({\n        sender: \"node-2\",\n        payload: {\n          online: {\n            \"node-1\": [15, 100, 11],\n            // Local - do nothing\n            \"node-2\": [18, 180, 10],\n            // We got older info, send newer\n            \"node-5\": [48, 500, 55],\n            // We got older info, send it is offline\n            \"node-6\": [66, 606, 6],\n            // We got newer info, but we think it is offline, skip\n            \"node-7\": [70, 700, 77] // We don't know it, skip\n\n          },\n          offline: {\n            \"node-4\": 41,\n            // Newer seq\n            \"node-3\": 33,\n            // Newer seq, Gone to offline, we change it to offline\n            \"node-8\": 88 // We don't know it, skip\n\n          }\n        }\n      });\n      expect(transporter.registry.getNodeInfo).toHaveBeenCalledTimes(1);\n      expect(transporter.registry.getNodeInfo).toHaveBeenCalledWith(\"node-2\");\n      expect(transporter.nodes.disconnected).toHaveBeenCalledTimes(1);\n      expect(transporter.nodes.disconnected).toHaveBeenCalledWith(\"node-3\", false);\n      expect(nodes[2].seq).toBe(33);\n      expect(transporter.publish).toHaveBeenCalledTimes(1);\n      expect(transporter.publish).toHaveBeenCalledWith({\n        type: \"GOSSIP_RES\",\n        target: \"node-2\",\n        payload: {\n          online: {\n            \"node-2\": [{\n              info: \"node-2\"\n            }, 200, 22]\n          },\n          offline: {\n            \"node-5\": 50\n          }\n        }\n      });\n    });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"should update local info and send new node info and inc our seq","suites":["Test Gossip methods","Test processGossipRequest"],"updatePoint":{"line":1042,"column":71},"line":1042,"code":"    it(\"should update local info and send new node info and inc our seq\", () => {\n      const heartbeat = jest.fn();\n      const nodes = [{\n        id: \"node-1\",\n        local: true,\n        available: true,\n        seq: 1,\n        cpu: 11,\n        cpuSeq: 100\n      }, {\n        id: \"node-2\",\n        local: false,\n        available: true,\n        seq: 20,\n        cpu: 22,\n        cpuSeq: 200,\n        heartbeat\n      }, {\n        id: \"node-3\",\n        local: false,\n        available: true,\n        seq: 30,\n        cpu: 33,\n        cpuSeq: 300\n      }, {\n        id: \"node-4\",\n        local: false,\n        available: false,\n        seq: 40,\n        cpu: 44,\n        cpuSeq: 400\n      }, {\n        id: \"node-5\",\n        local: false,\n        available: false,\n        seq: 50,\n        cpu: 55,\n        cpuSeq: 500\n      }, {\n        id: \"node-6\",\n        local: false,\n        available: false,\n        seq: 60,\n        cpu: 66,\n        cpuSeq: 600\n      }, {\n        id: \"node-7\",\n        local: false,\n        available: true,\n        seq: 70,\n        cpu: null,\n        cpuSeq: null\n      }, {\n        id: \"node-8\",\n        local: false,\n        available: true,\n        seq: 80,\n        cpu: 88,\n        cpuSeq: 800\n      }];\n      transporter.nodes.toArray = jest.fn(() => nodes);\n      transporter.nodes.get = jest.fn(() => ({\n        id: \"node-10\"\n      }));\n      transporter.registry.getNodeInfo = jest.fn(id => ({\n        info: id\n      }));\n      transporter.registry.getLocalNodeInfo = jest.fn(() => ({\n        info: \"node-1\"\n      }));\n      transporter.processGossipRequest({\n        sender: \"node-10\",\n        payload: {\n          online: {\n            \"node-2\": [20, 220, 25],\n            // We got newer CPU info, update local\n            \"node-3\": [30, 300, 33],\n            // No changes, skip\n            // No node-7, send back with info\n            \"node-8\": [80, 777, 77] // Whet got older CPU info, send back newer\n\n          },\n          offline: {\n            \"node-1\": 33,\n            // Local - inc seq & send we are online\n            // No \"node-4\", send back\n            // No \"node-5\", send back\n            \"node-6\": 60 // No changes, skip\n\n          }\n        }\n      }); // Local Seq Incremented\n\n      expect(nodes[0].seq).toBe(34);\n      expect(transporter.registry.getNodeInfo).toHaveBeenCalledTimes(1);\n      expect(transporter.registry.getNodeInfo).toHaveBeenCalledWith(\"node-7\");\n      expect(transporter.registry.getLocalNodeInfo).toHaveBeenCalledTimes(1);\n      expect(transporter.registry.getLocalNodeInfo).toHaveBeenCalledWith(true); // Update 'node-2'\n\n      expect(heartbeat).toHaveBeenCalledTimes(1);\n      expect(heartbeat).toHaveBeenCalledWith({\n        cpu: 25,\n        cpuSeq: 220\n      });\n      expect(transporter.nodes.disconnected).toHaveBeenCalledTimes(0);\n      expect(transporter.publish).toHaveBeenCalledTimes(1);\n      expect(transporter.publish).toHaveBeenCalledWith({\n        type: \"GOSSIP_RES\",\n        target: \"node-10\",\n        payload: {\n          online: {\n            \"node-1\": [{\n              info: \"node-1\"\n            }, 100, 11],\n            \"node-7\": [{\n              info: \"node-7\"\n            }, 0, 0],\n            \"node-8\": [800, 88]\n          },\n          offline: {\n            \"node-4\": 40,\n            \"node-5\": 50\n          }\n        }\n      });\n    });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"should update local info and send new node info","suites":["Test Gossip methods","Test processGossipResponse"],"updatePoint":{"line":1176,"column":55},"line":1176,"code":"    it(\"should update local info and send new node info\", () => {\n      const heartbeat = jest.fn();\n      const nodes = [// Online nodes\n      {\n        id: \"node-1\",\n        local: true,\n        available: true,\n        seq: 10,\n        cpu: 11,\n        cpuSeq: 100\n      }, {\n        id: \"node-2\",\n        local: false,\n        available: true,\n        seq: 20,\n        cpu: 22,\n        cpuSeq: 200\n      }, {\n        id: \"node-3\",\n        local: false,\n        available: true,\n        seq: 30,\n        cpu: 33,\n        cpuSeq: 300\n      }, {\n        id: \"node-4\",\n        local: false,\n        available: true,\n        seq: 40,\n        cpu: 44,\n        cpuSeq: 400\n      }, {\n        id: \"node-5\",\n        local: false,\n        available: true,\n        seq: 50,\n        cpu: 55,\n        cpuSeq: 500,\n        heartbeat\n      }, //{ id: \"node-6\", local: false, available: true, seq: 60, cpu: 66, cpuSeq: 600 },\n      // Offline nodes\n      {\n        id: \"node-7\",\n        local: false,\n        available: false,\n        seq: 70,\n        cpu: 77,\n        cpuSeq: 700\n      }, {\n        id: \"node-8\",\n        local: false,\n        available: false,\n        seq: 80,\n        cpu: 88,\n        cpuSeq: 800\n      }, {\n        id: \"node-9\",\n        local: false,\n        available: false,\n        seq: 90,\n        cpu: 99,\n        cpuSeq: 900\n      }, {\n        id: \"node-10\",\n        local: false,\n        available: true,\n        seq: 100,\n        cpu: 100,\n        cpuSeq: 1000\n      }];\n      transporter.nodes.toArray = jest.fn(() => nodes);\n      transporter.nodes.get = jest.fn(id => nodes.find(n => n.id == id));\n      transporter.processGossipResponse({\n        sender: \"node-2\",\n        payload: {\n          online: {\n            \"node-1\": [{\n              seq: 15\n            }, 100, 11],\n            // Local - skip\n            \"node-2\": [{\n              seq: 18\n            }, 180, 10],\n            // We got older info, skip\n            \"node-5\": [550, 5],\n            // We got only new CPU info, update\n            \"node-6\": [{\n              seq: 66\n            }, 660, 6],\n            // We got newer info from unknow node, update\n            \"node-7\": [{\n              seq: 77\n            }] // We got only new info from offline node, update\n\n          },\n          offline: {\n            \"node-8\": 88,\n            // We got newer seq, update\n            \"node-9\": 33,\n            // We got older seq, skip\n            \"node-10\": 101,\n            // We got newer seq from online node, disconnect and save seq\n            \"node-11\": 110 // Unknow node, skip\n\n          }\n        }\n      }); // Update 'node-5' cpu\n\n      expect(heartbeat).toHaveBeenCalledTimes(1);\n      expect(heartbeat).toHaveBeenCalledWith({\n        cpu: 5,\n        cpuSeq: 550\n      }); // Update 'node-6' & 'node-7'\n\n      expect(transporter.nodes.processNodeInfo).toHaveBeenCalledTimes(2);\n      expect(transporter.nodes.processNodeInfo).toHaveBeenCalledWith({\n        sender: \"node-6\",\n        seq: 66\n      });\n      expect(transporter.nodes.processNodeInfo).toHaveBeenCalledWith({\n        sender: \"node-7\",\n        seq: 77\n      }); // Update 'node-8' seq\n\n      expect(nodes[6].seq).toBe(88); // Disconnect 'node-10'\n\n      expect(transporter.nodes.disconnected).toHaveBeenCalledTimes(1);\n      expect(transporter.nodes.disconnected).toHaveBeenCalledWith(\"node-10\", false);\n      expect(nodes[8].seq).toBe(101);\n    });","file":"unit/transporters/tcp.spec.js","skipped":false,"dir":"test"},{"name":"check constructor","suites":["Test Parser constructor"],"updatePoint":{"line":8,"column":23},"line":8,"code":"  it(\"check constructor\", () => {\n    let opts = {};\n    let parser = new Parser(opts, 5000);\n    expect(parser.maxPacketSize).toBe(5000);\n    expect(parser.buf).toBeNull();\n  });","file":"unit/transporters/tcp/parser.spec.js","skipped":false,"dir":"test"},{"name":"should store chunk in buffer if length is smaller than 6 bytes","suites":["Test Parser write"],"updatePoint":{"line":24,"column":68},"line":24,"code":"  it(\"should store chunk in buffer if length is smaller than 6 bytes\", () => {\n    let cb = jest.fn();\n    let buf = Buffer.alloc(5, \"0\");\n\n    parser._write(buf, null, cb);\n\n    expect(cb).toHaveBeenCalledTimes(1);\n    expect(cb).toHaveBeenCalledWith();\n    expect(parser.buf).toBeInstanceOf(Buffer);\n    expect(parser.buf.toString()).toBe(\"00000\");\n  });","file":"unit/transporters/tcp/parser.spec.js","skipped":false,"dir":"test"},{"name":"should concat previous chunk and throw CRC error","suites":["Test Parser write"],"updatePoint":{"line":35,"column":54},"line":35,"code":"  it(\"should concat previous chunk and throw CRC error\", () => {\n    let cb = jest.fn(); // Preload buffer\n\n    parser.buf = Buffer.alloc(5, \"0\");\n    let buf = Buffer.alloc(5, \"1\");\n\n    parser._write(buf, null, cb);\n\n    expect(cb).toHaveBeenCalledTimes(1);\n    expect(cb).toHaveBeenCalledWith(expect.any(Error));\n    let err = cb.mock.calls[0][0];\n    expect(err.message).toBe(\"Invalid packet CRC! 49\");\n    expect(parser.buf).toBeNull();\n  });","file":"unit/transporters/tcp/parser.spec.js","skipped":false,"dir":"test"},{"name":"should throw error if packet is too large","suites":["Test Parser write"],"updatePoint":{"line":49,"column":47},"line":49,"code":"  it(\"should throw error if packet is too large\", () => {\n    let cb = jest.fn();\n    let buf = Buffer.alloc(513, \"0\");\n\n    parser._write(buf, null, cb);\n\n    expect(cb).toHaveBeenCalledTimes(1);\n    expect(cb).toHaveBeenCalledWith(expect.any(Error));\n    let err = cb.mock.calls[0][0];\n    expect(err.message).toBe(\"Incoming packet is larger than the 'maxPacketSize' limit (513 > 512)!\");\n    expect(parser.buf).toBeNull();\n  });","file":"unit/transporters/tcp/parser.spec.js","skipped":false,"dir":"test"},{"name":"should emit data with valid chunk","suites":["Test Parser write"],"updatePoint":{"line":61,"column":39},"line":61,"code":"  it(\"should emit data with valid chunk\", () => {\n    let cb = jest.fn();\n    let buf = Buffer.from([12, 0, 0, 0, 10, 6, 100, 97, 116, 97]);\n\n    parser._write(buf, null, cb);\n\n    expect(cb).toHaveBeenCalledTimes(1);\n    expect(cb).toHaveBeenCalledWith();\n    expect(onData).toHaveBeenCalledTimes(1);\n    expect(onData).toHaveBeenCalledWith(P.PACKET_GOSSIP_REQ, expect.any(Buffer));\n    let data = onData.mock.calls[0][1];\n    expect(data.toString()).toBe(\"data\");\n    expect(parser.buf).toBeNull();\n  });","file":"unit/transporters/tcp/parser.spec.js","skipped":false,"dir":"test"},{"name":"should multiple emit data with valid chunks & store rest chunk","suites":["Test Parser write"],"updatePoint":{"line":75,"column":68},"line":75,"code":"  it(\"should multiple emit data with valid chunks & store rest chunk\", () => {\n    let cb = jest.fn();\n    onData.mockClear();\n    let buf = Buffer.from([13, 0, 0, 0, 11, 6, 100, 97, 116, 97, 49].concat([12, 0, 0, 0, 11, 7, 100, 97, 116, 97, 50], [13, 0, 0, 0, 11, 6, 100, 97]));\n\n    parser._write(buf, null, cb);\n\n    expect(cb).toHaveBeenCalledTimes(1);\n    expect(cb).toHaveBeenCalledWith();\n    expect(onData).toHaveBeenCalledTimes(2);\n    expect(onData).toHaveBeenCalledWith(P.PACKET_GOSSIP_REQ, expect.any(Buffer));\n    let data = onData.mock.calls[0][1];\n    expect(data.toString()).toBe(\"data1\");\n    expect(onData).toHaveBeenCalledWith(P.PACKET_GOSSIP_RES, expect.any(Buffer));\n    data = onData.mock.calls[1][1];\n    expect(data.toString()).toBe(\"data2\");\n    expect(parser.buf).toBeInstanceOf(Buffer);\n    expect(parser.buf).toEqual(Buffer.from([13, 0, 0, 0, 11, 6, 100, 97]));\n  });","file":"unit/transporters/tcp/parser.spec.js","skipped":false,"dir":"test"},{"name":"check constructor","suites":["Test TcpReader constructor"],"updatePoint":{"line":32,"column":23},"line":32,"code":"  it(\"check constructor\", () => {\n    let transporter = {\n      logger: jest.fn(),\n      broker\n    };\n    let opts = {\n      port: 1234\n    };\n    let reader = new TcpReader(transporter, opts);\n    expect(reader).toBeDefined();\n    expect(reader.transporter).toBe(transporter);\n    expect(reader.opts).toBe(opts);\n    expect(reader.sockets).toBeInstanceOf(Array);\n    expect(reader.logger).toBe(transporter.logger);\n  });","file":"unit/transporters/tcp/tcp-reader.spec.js","skipped":false,"dir":"test"},{"name":"should create server & listen","suites":["Test TcpReader.listen"],"updatePoint":{"line":75,"column":35},"line":75,"code":"  it(\"should create server & listen\", () => {\n    reader.onTcpClientConnected = jest.fn();\n    let p = reader.listen().catch(protectReject).then(() => {\n      expect(reader.server).toBe(server);\n      expect(server.on).toHaveBeenCalledTimes(1);\n      expect(server.on).toHaveBeenCalledWith(\"error\", expect.any(Function));\n      expect(server.listen).toHaveBeenCalledTimes(1);\n\n      if (process.versions.node.split(\".\")[0] >= 8) {\n        expect(server.listen).toHaveBeenCalledWith({\n          port: 1234,\n          exclusive: true\n        }, expect.any(Function));\n      } else {\n        expect(server.listen).toHaveBeenCalledWith(1234, expect.any(Function));\n      }\n\n      expect(reader.opts.port).toBe(5000);\n      expect(reader.connected).toBe(true); // Fire new connection event handler\n\n      expect(reader.onTcpClientConnected).toHaveBeenCalledTimes(0);\n      let socket = {};\n      netCreateCB(socket);\n      expect(reader.onTcpClientConnected).toHaveBeenCalledTimes(1);\n      expect(reader.onTcpClientConnected).toHaveBeenCalledWith(socket);\n    });\n    listenCb();\n    return p;\n  });","file":"unit/transporters/tcp/tcp-reader.spec.js","skipped":false,"dir":"test"},{"name":"should reject on server error","suites":["Test TcpReader.listen"],"updatePoint":{"line":104,"column":35},"line":104,"code":"  it(\"should reject on server error\", () => {\n    let p = reader.listen().then(protectReject).catch(err => {\n      expect(err).toBeInstanceOf(Error);\n      expect(err.message).toBe(\"Server error\");\n    });\n    serverErrorCb(new Error(\"Server error\"));\n    return p;\n  });","file":"unit/transporters/tcp/tcp-reader.spec.js","skipped":false,"dir":"test"},{"name":"should create parser and set event handlers","suites":["Test TcpReader.onTcpClientConnected"],"updatePoint":{"line":135,"column":49},"line":135,"code":"  it(\"should create parser and set event handlers\", () => {\n    reader.onTcpClientConnected(socket);\n    expect(socket.on).toHaveBeenCalledTimes(2);\n    expect(socket.on).toHaveBeenCalledWith(\"error\", expect.any(Function));\n    expect(socket.on).toHaveBeenCalledWith(\"close\", expect.any(Function));\n    expect(socket.setNoDelay).toHaveBeenCalledTimes(1);\n    expect(socket.setNoDelay).toHaveBeenCalledWith(true);\n    expect(socket.pipe).toHaveBeenCalledTimes(1);\n    expect(socket.pipe).toHaveBeenCalledWith(socket.parser);\n  });","file":"unit/transporters/tcp/tcp-reader.spec.js","skipped":false,"dir":"test"},{"name":"should call onIncomingMessage when parser has data","suites":["Test TcpReader.onTcpClientConnected"],"updatePoint":{"line":145,"column":56},"line":145,"code":"  it(\"should call onIncomingMessage when parser has data\", () => {\n    transporter.onIncomingMessage = jest.fn();\n    reader.onTcpClientConnected(socket);\n\n    socket.parser.__callbacks.data(\"REQ\", \"message\");\n\n    expect(transporter.onIncomingMessage).toHaveBeenCalledTimes(1);\n    expect(transporter.onIncomingMessage).toHaveBeenCalledWith(\"REQ\", \"message\", socket);\n  });","file":"unit/transporters/tcp/tcp-reader.spec.js","skipped":false,"dir":"test"},{"name":"should call closeSocket on parser error","suites":["Test TcpReader.onTcpClientConnected"],"updatePoint":{"line":154,"column":45},"line":154,"code":"  it(\"should call closeSocket on parser error\", () => {\n    reader.closeSocket = jest.fn();\n    reader.onTcpClientConnected(socket);\n    const parserErr = new Error(\"Parser error\");\n\n    socket.parser.__callbacks.error(parserErr);\n\n    expect(reader.closeSocket).toHaveBeenCalledTimes(1);\n    expect(reader.closeSocket).toHaveBeenCalledWith(socket, parserErr);\n  });","file":"unit/transporters/tcp/tcp-reader.spec.js","skipped":false,"dir":"test"},{"name":"should call closeSocket on socket error","suites":["Test TcpReader.onTcpClientConnected"],"updatePoint":{"line":164,"column":45},"line":164,"code":"  it(\"should call closeSocket on socket error\", () => {\n    reader.closeSocket = jest.fn();\n    reader.onTcpClientConnected(socket);\n    const socketErr = new Error(\"Socket error\");\n\n    socket.__callbacks.error(socketErr);\n\n    expect(reader.closeSocket).toHaveBeenCalledTimes(1);\n    expect(reader.closeSocket).toHaveBeenCalledWith(socket, socketErr);\n  });","file":"unit/transporters/tcp/tcp-reader.spec.js","skipped":false,"dir":"test"},{"name":"should call closeSocket on socket close","suites":["Test TcpReader.onTcpClientConnected"],"updatePoint":{"line":174,"column":45},"line":174,"code":"  it(\"should call closeSocket on socket close\", () => {\n    reader.closeSocket = jest.fn();\n    reader.onTcpClientConnected(socket);\n    reader.closeSocket.mockClear();\n\n    socket.__callbacks.close(true);\n\n    expect(reader.closeSocket).toHaveBeenCalledTimes(1);\n    expect(reader.closeSocket).toHaveBeenCalledWith(socket);\n  });","file":"unit/transporters/tcp/tcp-reader.spec.js","skipped":false,"dir":"test"},{"name":"should close socket & remove from sockets list","suites":["Test TcpReader.close"],"updatePoint":{"line":199,"column":52},"line":199,"code":"  it(\"should close socket & remove from sockets list\", () => {\n    let destroy = jest.fn();\n    reader.sockets.push({\n      id: 1,\n      destroy\n    });\n    reader.sockets.push({\n      id: 2,\n      destroy\n    });\n    reader.sockets.push({\n      id: 3,\n      destroy\n    });\n    reader.closeSocket(reader.sockets[1]);\n    expect(reader.sockets.length).toBe(2);\n    expect(destroy).toHaveBeenCalledTimes(1);\n    expect(reader.sockets.find(s => s.id == 2)).toBeUndefined();\n  });","file":"unit/transporters/tcp/tcp-reader.spec.js","skipped":false,"dir":"test"},{"name":"should close server & all sockets","suites":["Test TcpReader.close"],"updatePoint":{"line":218,"column":39},"line":218,"code":"  it(\"should close server & all sockets\", () => {\n    let server = {\n      listening: true,\n      close: jest.fn()\n    };\n    reader.server = server;\n    let destroy = jest.fn();\n    reader.sockets.length = 0;\n    reader.sockets.push({\n      destroy\n    });\n    reader.sockets.push({\n      destroy\n    });\n    reader.sockets.push({\n      destroy\n    });\n    reader.close();\n    expect(server.close).toHaveBeenCalledTimes(1);\n    expect(reader.sockets.length).toBe(0);\n    expect(destroy).toHaveBeenCalledTimes(3);\n  });","file":"unit/transporters/tcp/tcp-reader.spec.js","skipped":false,"dir":"test"},{"name":"check constructor","suites":["Test TcpWriter constructor"],"updatePoint":{"line":26,"column":23},"line":26,"code":"  it(\"check constructor\", () => {\n    let transporter = {\n      logger: jest.fn(),\n      broker\n    };\n    let opts = {\n      port: 1234\n    };\n    let writer = new TcpWriter(transporter, opts);\n    expect(writer).toBeDefined();\n    expect(writer.transporter).toBe(transporter);\n    expect(writer.opts).toBe(opts);\n    expect(writer.sockets).toBeInstanceOf(Map);\n    expect(writer.logger).toBe(transporter.logger);\n  });","file":"unit/transporters/tcp/tcp-writer.spec.js","skipped":false,"dir":"test"},{"name":"should call connect if no socket","suites":["Test TcpWriter.send"],"updatePoint":{"line":61,"column":38},"line":61,"code":"  it(\"should call connect if no socket\", () => {\n    return writer.send(\"node-2\", P.PACKET_REQUEST, Buffer.from(\"data\")).catch(protectReject).then(() => {\n      expect(writer.connect).toHaveBeenCalledTimes(1);\n      expect(writer.connect).toHaveBeenCalledWith(node.id);\n      expect(socket.lastUsed).toBeDefined();\n    });\n  });","file":"unit/transporters/tcp/tcp-writer.spec.js","skipped":false,"dir":"test"},{"name":"should reject error and call removeSocket if write throw error","suites":["Test TcpWriter.send"],"updatePoint":{"line":68,"column":68},"line":68,"code":"  it(\"should reject error and call removeSocket if write throw error\", () => {\n    writer.removeSocket = jest.fn();\n    socket.write = jest.fn(() => {\n      throw new Error(\"Write error\");\n    });\n    return writer.send(\"node-2\", P.PACKET_REQUEST, Buffer.from(\"data\")).then(protectReject).catch(err => {\n      expect(err).toBeInstanceOf(Error);\n      expect(writer.removeSocket).toHaveBeenCalledTimes(1);\n      expect(writer.removeSocket).toHaveBeenCalledWith(\"node-2\");\n    });\n  });","file":"unit/transporters/tcp/tcp-writer.spec.js","skipped":false,"dir":"test"},{"name":"should not call connect & call write","suites":["Test TcpWriter.send"],"updatePoint":{"line":79,"column":42},"line":79,"code":"  it(\"should not call connect & call write\", () => {\n    socket.write = jest.fn((data, cb) => cb());\n    writer.sockets.set(\"node-2\", socket);\n    writer.connect.mockClear();\n    return writer.send(\"node-2\", C.PACKET_GOSSIP_REQ_ID, Buffer.from(\"data\")).catch(protectReject).then(() => {\n      expect(writer.connect).toHaveBeenCalledTimes(0);\n      expect(socket.write).toHaveBeenCalledTimes(1);\n      expect(socket.write).toHaveBeenCalledWith(Buffer.from([12, 0, 0, 0, 10, 6, 100, 97, 116, 97]), expect.any(Function));\n    });\n  });","file":"unit/transporters/tcp/tcp-writer.spec.js","skipped":false,"dir":"test"},{"name":"should reject error if no node info","suites":["Test TcpWriter.connect"],"updatePoint":{"line":122,"column":41},"line":122,"code":"  it(\"should reject error if no node info\", () => {\n    return writer.connect(\"node-2\").then(protectReject).catch(err => {\n      expect(err).toBeInstanceOf(E.MoleculerError);\n      expect(err.message).toBe(\"Missing node info for 'node-2'!\");\n    });\n  });","file":"unit/transporters/tcp/tcp-writer.spec.js","skipped":false,"dir":"test"},{"name":"should connect & send sendHello","suites":["Test TcpWriter.connect"],"updatePoint":{"line":128,"column":37},"line":128,"code":"  it(\"should connect & send sendHello\", () => {\n    writer.addSocket = jest.fn();\n    transporter.getNode = jest.fn(() => node);\n    transporter.sendHello = jest.fn(() => Promise.resolve());\n    writer.manageConnections = jest.fn();\n    writer.removeSocket = jest.fn();\n    let p = writer.connect(\"node-2\").catch(protectReject).then(s => {\n      expect(socket).toBe(s);\n      expect(socket.nodeID).toBe(\"node-2\");\n      expect(socket.lastUsed).toBeDefined();\n      expect(socket.setNoDelay).toHaveBeenCalledTimes(1);\n      expect(socket.setNoDelay).toHaveBeenCalledWith(true);\n      expect(transporter.getNodeAddress).toHaveBeenCalledTimes(1);\n      expect(transporter.getNodeAddress).toHaveBeenCalledWith(node);\n      expect(writer.addSocket).toHaveBeenCalledTimes(1);\n      expect(writer.addSocket).toHaveBeenCalledWith(\"node-2\", socket, true);\n      expect(transporter.sendHello).toHaveBeenCalledTimes(1);\n      expect(transporter.sendHello).toHaveBeenCalledWith(\"node-2\");\n      expect(writer.manageConnections).toHaveBeenCalledTimes(0);\n      expect(socket.on).toHaveBeenCalledTimes(2);\n      expect(socket.on).toHaveBeenCalledWith(\"error\", expect.any(Function));\n      expect(socket.on).toHaveBeenCalledWith(\"end\", expect.any(Function));\n      expect(socket.unref).toHaveBeenCalledTimes(1); // Fire socket error\n\n      writer.emit = jest.fn();\n      socketCallbacks.error(new Error());\n      expect(writer.removeSocket).toHaveBeenCalledTimes(1);\n      expect(writer.removeSocket).toHaveBeenCalledWith(\"node-2\");\n      expect(writer.emit).toHaveBeenCalledTimes(1);\n      expect(writer.emit).toHaveBeenCalledWith(\"error\", expect.any(Error), \"node-2\"); // Socket end\n\n      writer.emit.mockClear();\n      writer.removeSocket.mockClear();\n      socketCallbacks.end();\n      expect(writer.removeSocket).toHaveBeenCalledTimes(1);\n      expect(writer.removeSocket).toHaveBeenCalledWith(\"node-2\");\n      expect(writer.emit).toHaveBeenCalledTimes(1);\n      expect(writer.emit).toHaveBeenCalledWith(\"end\", \"node-2\");\n    });\n    netConnectCB();\n    return p;\n  });","file":"unit/transporters/tcp/tcp-writer.spec.js","skipped":false,"dir":"test"},{"name":"should call manageConnections","suites":["Test TcpWriter.connect"],"updatePoint":{"line":170,"column":35},"line":170,"code":"  it(\"should call manageConnections\", () => {\n    writer.addSocket = jest.fn();\n    transporter.getNode = jest.fn(() => node);\n    transporter.sendHello = jest.fn(() => Promise.resolve());\n    writer.manageConnections = jest.fn();\n    writer.opts.maxConnections = 3;\n    writer.sockets.set(1, null);\n    writer.sockets.set(2, null);\n    writer.sockets.set(3, null);\n    writer.sockets.set(4, null);\n    writer.sockets.set(5, null);\n    let p = writer.connect(\"node-2\").catch(protectReject).then(() => {\n      expect(writer.manageConnections).toHaveBeenCalledTimes(1);\n    });\n    netConnectCB();\n    return p;\n  });","file":"unit/transporters/tcp/tcp-writer.spec.js","skipped":false,"dir":"test"},{"name":"should reject if sendHello rejected","suites":["Test TcpWriter.connect"],"updatePoint":{"line":187,"column":41},"line":187,"code":"  it(\"should reject if sendHello rejected\", () => {\n    transporter.getNode = jest.fn(() => node);\n    transporter.sendHello = jest.fn(() => Promise.reject(new Error(\"Hello error\")));\n    let p = writer.connect(\"node-2\").then(protectReject).catch(err => {\n      expect(err).toBeInstanceOf(Error);\n      expect(err.message).toBe(\"Hello error\");\n    });\n    netConnectCB();\n    return p;\n  });","file":"unit/transporters/tcp/tcp-writer.spec.js","skipped":false,"dir":"test"},{"name":"should reject if connect throw exception","suites":["Test TcpWriter.connect"],"updatePoint":{"line":197,"column":46},"line":197,"code":"  it(\"should reject if connect throw exception\", () => {\n    transporter.getNode = jest.fn(() => node);\n    net.connect = jest.fn(() => {\n      throw new Error(\"Connection error\");\n    });\n    return writer.connect(\"node-2\").then(protectReject).catch(err => {\n      expect(err).toBeInstanceOf(Error);\n      expect(err.message).toBe(\"Connection error\");\n    });\n  });","file":"unit/transporters/tcp/tcp-writer.spec.js","skipped":false,"dir":"test"},{"name":"should not call removeSocket","suites":["Test TcpWriter.manageConnections"],"updatePoint":{"line":219,"column":34},"line":219,"code":"  it(\"should not call removeSocket\", () => {\n    writer = new TcpWriter(transporter, {\n      maxConnections: 5\n    });\n    writer.sockets.set(\"node-2\", {\n      lastUsed: 4\n    });\n    writer.sockets.set(\"node-3\", {\n      lastUsed: 1\n    });\n    writer.sockets.set(\"node-4\", {\n      lastUsed: 6\n    });\n    writer.removeSocket = jest.fn();\n    writer.manageConnections();\n    expect(writer.sockets.size).toBe(3);\n    expect(writer.removeSocket).toHaveBeenCalledTimes(0);\n  });","file":"unit/transporters/tcp/tcp-writer.spec.js","skipped":false,"dir":"test"},{"name":"should call removeSocket","suites":["Test TcpWriter.manageConnections"],"updatePoint":{"line":237,"column":30},"line":237,"code":"  it(\"should call removeSocket\", () => {\n    writer = new TcpWriter(transporter, {\n      maxConnections: 3\n    });\n    writer.sockets.set(\"node-2\", {\n      lastUsed: 4\n    });\n    writer.sockets.set(\"node-3\", {\n      lastUsed: 1\n    });\n    writer.sockets.set(\"node-4\", {\n      lastUsed: 6\n    });\n    writer.sockets.set(\"node-5\", {\n      lastUsed: 2\n    });\n    writer.sockets.set(\"node-6\", {\n      lastUsed: 5\n    });\n    writer.removeSocket = jest.fn();\n    writer.manageConnections();\n    expect(writer.sockets.size).toBe(5);\n    expect(writer.removeSocket).toHaveBeenCalledTimes(2);\n    expect(writer.removeSocket).toHaveBeenCalledWith(\"node-5\");\n    expect(writer.removeSocket).toHaveBeenCalledWith(\"node-3\");\n  });","file":"unit/transporters/tcp/tcp-writer.spec.js","skipped":false,"dir":"test"},{"name":"should add socket","suites":["Test TcpWriter.addSocket & removeSocket"],"updatePoint":{"line":270,"column":23},"line":270,"code":"  it(\"should add socket\", () => {\n    expect(writer.sockets.size).toBe(0);\n    writer.addSocket(\"node-2\", {\n      id: 1\n    });\n    expect(writer.sockets.size).toBe(1);\n  });","file":"unit/transporters/tcp/tcp-writer.spec.js","skipped":false,"dir":"test"},{"name":"should not add socket","suites":["Test TcpWriter.addSocket & removeSocket"],"updatePoint":{"line":277,"column":27},"line":277,"code":"  it(\"should not add socket\", () => {\n    expect(writer.sockets.size).toBe(1);\n    writer.addSocket(\"node-2\", {\n      id: 2\n    });\n    expect(writer.sockets.size).toBe(1);\n    expect(writer.sockets.get(\"node-2\")).toEqual({\n      id: 1\n    });\n  });","file":"unit/transporters/tcp/tcp-writer.spec.js","skipped":false,"dir":"test"},{"name":"should overwrite socket","suites":["Test TcpWriter.addSocket & removeSocket"],"updatePoint":{"line":287,"column":29},"line":287,"code":"  it(\"should overwrite socket\", () => {\n    writer.sockets.get(\"node-2\").destroyed = true;\n    expect(writer.sockets.size).toBe(1);\n    let s = {\n      id: 3\n    };\n    writer.addSocket(\"node-2\", s);\n    expect(writer.sockets.size).toBe(1);\n    expect(writer.sockets.get(\"node-2\")).toEqual({\n      id: 3\n    });\n  });","file":"unit/transporters/tcp/tcp-writer.spec.js","skipped":false,"dir":"test"},{"name":"should overwrite socket with force","suites":["Test TcpWriter.addSocket & removeSocket"],"updatePoint":{"line":299,"column":40},"line":299,"code":"  it(\"should overwrite socket with force\", () => {\n    writer.sockets.get(\"node-2\").destroyed = false;\n    expect(writer.sockets.size).toBe(1);\n    let s = {\n      id: 4\n    };\n    writer.addSocket(\"node-2\", s, true);\n    expect(writer.sockets.size).toBe(1);\n    expect(writer.sockets.get(\"node-2\")).toEqual({\n      id: 4\n    });\n  });","file":"unit/transporters/tcp/tcp-writer.spec.js","skipped":false,"dir":"test"},{"name":"should remove socket","suites":["Test TcpWriter.addSocket & removeSocket"],"updatePoint":{"line":311,"column":26},"line":311,"code":"  it(\"should remove socket\", () => {\n    let s = {\n      destroyed: true,\n      destroy: jest.fn()\n    };\n    writer.addSocket(\"node-3\", s);\n    expect(writer.sockets.size).toBe(2);\n    writer.removeSocket(\"node-3\");\n    expect(writer.sockets.size).toBe(1);\n    expect(writer.sockets.get(\"node-3\")).toBeUndefined();\n    expect(s.destroy).toHaveBeenCalledTimes(0);\n  });","file":"unit/transporters/tcp/tcp-writer.spec.js","skipped":false,"dir":"test"},{"name":"should destroy & remove socket","suites":["Test TcpWriter.addSocket & removeSocket"],"updatePoint":{"line":323,"column":36},"line":323,"code":"  it(\"should destroy & remove socket\", () => {\n    let s = {\n      destroyed: false,\n      destroy: jest.fn()\n    };\n    writer.addSocket(\"node-3\", s);\n    expect(writer.sockets.size).toBe(2);\n    writer.removeSocket(\"node-3\");\n    expect(writer.sockets.size).toBe(1);\n    expect(writer.sockets.get(\"node-3\")).toBeUndefined();\n    expect(s.destroy).toHaveBeenCalledTimes(1);\n  });","file":"unit/transporters/tcp/tcp-writer.spec.js","skipped":false,"dir":"test"},{"name":"should remove all socket","suites":["Test TcpWriter.close"],"updatePoint":{"line":355,"column":30},"line":355,"code":"  it(\"should remove all socket\", () => {\n    expect(writer.sockets.size).toBe(3);\n    writer.close();\n    expect(writer.sockets.size).toBe(0);\n    expect(end).toHaveBeenCalledTimes(2);\n  });","file":"unit/transporters/tcp/tcp-writer.spec.js","skipped":false,"dir":"test"},{"name":"check constructor","suites":["Test UdpServer constructor"],"updatePoint":{"line":20,"column":23},"line":20,"code":"  it(\"check constructor\", () => {\n    let transporter = {\n      nodeID: \"node-1\",\n      logger: jest.fn(),\n      broker: {\n        namespace: \"test\"\n      }\n    };\n    let opts = {\n      port: 1234\n    };\n    let udp = new UdpServer(transporter, opts);\n    expect(udp).toBeDefined();\n    expect(udp.transporter).toBe(transporter);\n    expect(udp.opts).toBe(opts);\n    expect(udp.servers).toEqual([]);\n    expect(udp.discoverTimer).toBeNull();\n    expect(udp.nodeID).toBe(\"node-1\");\n    expect(udp.namespace).toBe(\"test\");\n  });","file":"unit/transporters/tcp/udp-broadcaster.spec.js","skipped":false,"dir":"test"},{"name":"should bind UDP with broadcast","suites":["Test UdpServer.startServer"],"updatePoint":{"line":63,"column":36},"line":63,"code":"  it(\"should bind UDP with broadcast\", () => {\n    udp = new UdpServer(transporter, {\n      udpReuseAddr: true\n    });\n    udp.getBroadcastAddresses = jest.fn(() => [\"192.168.100.255\", \"192.168.200.255\"]);\n    return udp.startServer(\"127.0.0.1\", 4567).catch(protectReject).then(() => {\n      expect(udp.servers.length).toBe(1);\n      const server = udp.servers[0];\n      expect(dgram.createSocket).toHaveBeenCalledTimes(1);\n      expect(dgram.createSocket).toHaveBeenCalledWith({\n        reuseAddr: true,\n        type: \"udp4\"\n      });\n      expect(server.bind).toHaveBeenCalledTimes(1);\n      expect(server.bind).toHaveBeenCalledWith({\n        exclusive: true,\n        host: \"127.0.0.1\",\n        port: 4567\n      }, expect.any(Function));\n      expect(server.on).toHaveBeenCalledTimes(2);\n      expect(server.on).toHaveBeenCalledWith(\"error\", expect.any(Function));\n      expect(server.on).toHaveBeenCalledWith(\"message\", expect.any(Function));\n      expect(server.setBroadcast).toHaveBeenCalledTimes(1);\n      expect(server.setBroadcast).toHaveBeenCalledWith(true);\n      expect(server.destinations).toEqual([\"192.168.100.255\", \"192.168.200.255\"]);\n      expect(udp.getBroadcastAddresses).toHaveBeenCalledTimes(1);\n    });\n  });","file":"unit/transporters/tcp/udp-broadcaster.spec.js","skipped":false,"dir":"test"},{"name":"should bind UDP with multicast","suites":["Test UdpServer.startServer"],"updatePoint":{"line":91,"column":36},"line":91,"code":"  it(\"should bind UDP with multicast\", () => {\n    dgram.createSocket.mockClear();\n    udp = new UdpServer(transporter, {\n      udpReuseAddr: true\n    });\n    return udp.startServer(\"10.0.0.4\", 4567, \"239.0.0.2\", 2).catch(protectReject).then(() => {\n      expect(udp.servers.length).toBe(1);\n      const server = udp.servers[0];\n      expect(dgram.createSocket).toHaveBeenCalledTimes(1);\n      expect(dgram.createSocket).toHaveBeenCalledWith({\n        reuseAddr: true,\n        type: \"udp4\"\n      });\n      expect(server.bind).toHaveBeenCalledTimes(1);\n      expect(server.bind).toHaveBeenCalledWith({\n        exclusive: true,\n        host: \"10.0.0.4\",\n        port: 4567\n      }, expect.any(Function));\n      expect(server.on).toHaveBeenCalledTimes(2);\n      expect(server.on).toHaveBeenCalledWith(\"error\", expect.any(Function));\n      expect(server.on).toHaveBeenCalledWith(\"message\", expect.any(Function));\n      expect(server.addMembership).toHaveBeenCalledTimes(1);\n      expect(server.addMembership).toHaveBeenCalledWith(\"239.0.0.2\", \"10.0.0.4\");\n      expect(server.setMulticastTTL).toHaveBeenCalledTimes(1);\n      expect(server.setMulticastTTL).toHaveBeenCalledWith(2);\n      expect(server.setMulticastInterface).toHaveBeenCalledTimes(1);\n      expect(server.setMulticastInterface).toHaveBeenCalledWith(\"10.0.0.4\");\n      expect(server.destinations).toEqual([\"239.0.0.2\"]);\n    });\n  });","file":"unit/transporters/tcp/udp-broadcaster.spec.js","skipped":false,"dir":"test"},{"name":"should not reject bind when server throws error","suites":["Test UdpServer.startServer"],"updatePoint":{"line":122,"column":53},"line":122,"code":"  it(\"should not reject bind when server throws error\", () => {\n    let err = new Error(\"Server error\");\n    dgram.createSocket = jest.fn(() => {\n      let callbacks = {};\n      return {\n        bind: jest.fn(() => callbacks.error(err)),\n        on: jest.fn((name, cb) => callbacks[name] = cb),\n        __callbacks: callbacks\n      };\n    });\n    udp = new UdpServer(transporter, {\n      udpMulticast: \"230.0.0.2\",\n      udpPort: 4545,\n      udpMulticastTTL: 2,\n      udpReuseAddr: true\n    });\n    return udp.startServer(\"127.0.0.1\", 4567).catch(protectReject).then(() => {\n      expect(udp.servers.length).toBe(0);\n    });\n  });","file":"unit/transporters/tcp/udp-broadcaster.spec.js","skipped":false,"dir":"test"},{"name":"should not call startServer","suites":["Test UdpServer.bind"],"updatePoint":{"line":155,"column":33},"line":155,"code":"  it(\"should not call startServer\", () => {\n    udp = new UdpServer(transporter, {\n      udpBindAddress: \"192.168.0.100\",\n      udpPort: 4445,\n      udpReuseAddr: true,\n      udpMulticast: null,\n      udpMulticastTTL: 2\n    });\n    udp.startServer = jest.fn();\n    udp.discover = jest.fn();\n    udp.startDiscovering = jest.fn();\n    udp.getInterfaceAddresses = jest.fn(() => [\"192.168.100.100\", \"192.168.200.200\"]);\n    return udp.bind().catch(protectReject).then(() => {\n      expect(udp.startServer).toHaveBeenCalledTimes(0);\n      expect(udp.startDiscovering).toHaveBeenCalledTimes(1);\n    });\n  });","file":"unit/transporters/tcp/udp-broadcaster.spec.js","skipped":false,"dir":"test"},{"name":"should call startServer for broadcast","suites":["Test UdpServer.bind"],"updatePoint":{"line":172,"column":43},"line":172,"code":"  it(\"should call startServer for broadcast\", () => {\n    udp = new UdpServer(transporter, {\n      udpBindAddress: \"192.168.0.100\",\n      udpPort: 4445,\n      udpReuseAddr: true,\n      udpBroadcast: true,\n      udpMulticast: null\n    });\n    udp.startServer = jest.fn(() => udp.servers.push({}));\n    udp.discover = jest.fn();\n    udp.startDiscovering = jest.fn();\n    udp.getInterfaceAddresses = jest.fn(() => [\"192.168.100.100\", \"192.168.200.200\"]);\n    return udp.bind().catch(protectReject).then(() => {\n      expect(udp.startServer).toHaveBeenCalledTimes(1);\n      expect(udp.startServer).toHaveBeenCalledWith(\"192.168.0.100\", 4445);\n      expect(udp.startDiscovering).toHaveBeenCalledTimes(1);\n    });\n  });","file":"unit/transporters/tcp/udp-broadcaster.spec.js","skipped":false,"dir":"test"},{"name":"should call startServer for multicast once","suites":["Test UdpServer.bind"],"updatePoint":{"line":190,"column":48},"line":190,"code":"  it(\"should call startServer for multicast once\", () => {\n    udp = new UdpServer(transporter, {\n      udpBindAddress: \"192.168.0.100\",\n      udpPort: 4445,\n      udpReuseAddr: true,\n      udpBroadcast: false,\n      udpMulticast: \"239.0.0.1\",\n      udpMulticastTTL: 2\n    });\n    udp.startServer = jest.fn(() => udp.servers.push({}));\n    udp.discover = jest.fn();\n    udp.startDiscovering = jest.fn();\n    udp.getInterfaceAddresses = jest.fn(() => [\"192.168.100.100\", \"192.168.200.200\"]);\n    return udp.bind().catch(protectReject).then(() => {\n      expect(udp.startServer).toHaveBeenCalledTimes(1);\n      expect(udp.startServer).toHaveBeenCalledWith(\"192.168.0.100\", 4445, \"239.0.0.1\", 2);\n      expect(udp.startDiscovering).toHaveBeenCalledTimes(1);\n    });\n  });","file":"unit/transporters/tcp/udp-broadcaster.spec.js","skipped":false,"dir":"test"},{"name":"should call startServer for multicast twice","suites":["Test UdpServer.bind"],"updatePoint":{"line":209,"column":49},"line":209,"code":"  it(\"should call startServer for multicast twice\", () => {\n    udp = new UdpServer(transporter, {\n      udpPort: 4445,\n      udpReuseAddr: true,\n      udpBroadcast: false,\n      udpMulticast: \"239.0.0.1\",\n      udpMulticastTTL: 2\n    });\n    udp.startServer = jest.fn(() => udp.servers.push({}));\n    udp.discover = jest.fn();\n    udp.startDiscovering = jest.fn();\n    udp.getInterfaceAddresses = jest.fn(() => [\"192.168.100.100\", \"192.168.200.200\"]);\n    return udp.bind().catch(protectReject).then(() => {\n      expect(udp.startServer).toHaveBeenCalledTimes(2);\n      expect(udp.startServer).toHaveBeenCalledWith(\"192.168.100.100\", 4445, \"239.0.0.1\", 2);\n      expect(udp.startServer).toHaveBeenCalledWith(\"192.168.200.200\", 4445, \"239.0.0.1\", 2);\n      expect(udp.startDiscovering).toHaveBeenCalledTimes(1);\n      expect(udp.discover).toHaveBeenCalledTimes(0);\n      clock.tick(1600);\n      expect(udp.discover).toHaveBeenCalledTimes(1);\n    });\n  });","file":"unit/transporters/tcp/udp-broadcaster.spec.js","skipped":false,"dir":"test"},{"name":"should call startServer for multicast & broadcast","suites":["Test UdpServer.bind"],"updatePoint":{"line":231,"column":55},"line":231,"code":"  it(\"should call startServer for multicast & broadcast\", () => {\n    udp = new UdpServer(transporter, {\n      udpPort: 4445,\n      udpReuseAddr: true,\n      udpBroadcast: true,\n      udpMulticast: \"239.0.0.1\",\n      udpMulticastTTL: 2\n    });\n    udp.startServer = jest.fn(() => udp.servers.push({}));\n    udp.discover = jest.fn();\n    udp.startDiscovering = jest.fn();\n    udp.getInterfaceAddresses = jest.fn(() => [\"192.168.100.100\", \"192.168.200.200\"]);\n    return udp.bind().catch(protectReject).then(() => {\n      expect(udp.startServer).toHaveBeenCalledTimes(3);\n      expect(udp.startServer).toHaveBeenCalledWith(undefined, 4445);\n      expect(udp.startServer).toHaveBeenCalledWith(\"192.168.100.100\", 4445, \"239.0.0.1\", 2);\n      expect(udp.startServer).toHaveBeenCalledWith(\"192.168.200.200\", 4445, \"239.0.0.1\", 2);\n      expect(udp.startDiscovering).toHaveBeenCalledTimes(1);\n      expect(udp.discover).toHaveBeenCalledTimes(0);\n      clock.tick(1600);\n      expect(udp.discover).toHaveBeenCalledTimes(1);\n    });\n  });","file":"unit/transporters/tcp/udp-broadcaster.spec.js","skipped":false,"dir":"test"},{"name":"should not discovering","suites":["Test UdpServer.bind"],"updatePoint":{"line":254,"column":28},"line":254,"code":"  it(\"should not discovering\", () => {\n    dgram.createSocket = jest.fn();\n    udp = new UdpServer(transporter, {\n      udpDiscovery: false\n    });\n    udp.startServer = jest.fn(() => udp.servers.push({}));\n    return udp.bind().catch(protectReject).then(() => {\n      expect(udp.servers.length).toBe(0);\n      expect(udp.startServer).toHaveBeenCalledTimes(0);\n    });\n  });","file":"unit/transporters/tcp/udp-broadcaster.spec.js","skipped":false,"dir":"test"},{"name":"should send broadcast message","suites":["Test UdpServer.discover"],"updatePoint":{"line":291,"column":35},"line":291,"code":"  it(\"should send broadcast message\", () => {\n    udp.servers = [{\n      destinations: [\"192.168.100.255\", \"192.168.200.255\"],\n      send: jest.fn((msg, port, host, cb) => cb())\n    }, {\n      destinations: [\"239.0.0.2\"],\n      send: jest.fn((msg, port, host, cb) => cb())\n    }];\n    udp.discover();\n    expect(udp.servers[0].send).toHaveBeenCalledTimes(2);\n    expect(udp.servers[0].send).toHaveBeenCalledWith(Buffer.from(\"test|node-1|1234\"), 4445, \"192.168.100.255\", expect.any(Function));\n    expect(udp.servers[0].send).toHaveBeenCalledWith(Buffer.from(\"test|node-1|1234\"), 4445, \"192.168.200.255\", expect.any(Function));\n    expect(udp.servers[1].send).toHaveBeenCalledTimes(1);\n    expect(udp.servers[1].send).toHaveBeenCalledWith(Buffer.from(\"test|node-1|1234\"), 4445, \"239.0.0.2\", expect.any(Function));\n  });","file":"unit/transporters/tcp/udp-broadcaster.spec.js","skipped":false,"dir":"test"},{"name":"should emit message if namespace is same","suites":["Test UdpServer.onMessage"],"updatePoint":{"line":334,"column":46},"line":334,"code":"  it(\"should emit message if namespace is same\", () => {\n    udp.emit = jest.fn();\n    let rinfo = {\n      address: \"192.168.0.100\"\n    };\n    udp.onMessage(Buffer.from(\"test|node-1|1234\"), rinfo);\n    expect(udp.emit).toHaveBeenCalledTimes(1);\n    expect(udp.emit).toHaveBeenCalledWith(\"message\", \"node-1\", \"192.168.0.100\", 1234);\n  });","file":"unit/transporters/tcp/udp-broadcaster.spec.js","skipped":false,"dir":"test"},{"name":"should not emit message if namespace mismatch","suites":["Test UdpServer.onMessage"],"updatePoint":{"line":343,"column":51},"line":343,"code":"  it(\"should not emit message if namespace mismatch\", () => {\n    udp.emit = jest.fn();\n    let rinfo = {\n      address: \"192.168.0.100\"\n    };\n    udp.onMessage(Buffer.from(\"prod|node-1|1234\"), rinfo);\n    expect(udp.emit).toHaveBeenCalledTimes(0);\n  });","file":"unit/transporters/tcp/udp-broadcaster.spec.js","skipped":false,"dir":"test"},{"name":"should not emit message if message is malformed (2 parts)","suites":["Test UdpServer.onMessage"],"updatePoint":{"line":351,"column":63},"line":351,"code":"  it(\"should not emit message if message is malformed (2 parts)\", () => {\n    udp.emit = jest.fn();\n    let rinfo = {\n      address: \"192.168.0.100\"\n    };\n    udp.onMessage(Buffer.from(\"test|node-1\"), rinfo);\n    expect(udp.emit).toHaveBeenCalledTimes(0);\n  });","file":"unit/transporters/tcp/udp-broadcaster.spec.js","skipped":false,"dir":"test"},{"name":"should not emit message if message is malformed (4 parts)","suites":["Test UdpServer.onMessage"],"updatePoint":{"line":359,"column":63},"line":359,"code":"  it(\"should not emit message if message is malformed (4 parts)\", () => {\n    udp.emit = jest.fn();\n    let rinfo = {\n      address: \"192.168.0.100\"\n    };\n    udp.onMessage(Buffer.from(\"test|node-1|a|b\"), rinfo);\n    expect(udp.emit).toHaveBeenCalledTimes(0);\n  });","file":"unit/transporters/tcp/udp-broadcaster.spec.js","skipped":false,"dir":"test"},{"name":"should create timer","suites":["Test UdpServer.startDiscovering & stopDiscovering"],"updatePoint":{"line":399,"column":25},"line":399,"code":"  it(\"should create timer\", () => {\n    udp.discoverTimer = null;\n    udp.startDiscovering();\n    expect(udp.discoverTimer).toBeDefined();\n    expect(udp.discover).toHaveBeenCalledTimes(0);\n    udp.discover.mockClear();\n    clock.next();\n    expect(udp.discover).toHaveBeenCalledTimes(1);\n    udp.stopDiscovering();\n    expect(udp.discoverTimer).toBeNull(); // udp.discover.mockClear();\n    // clock.next();\n    // expect(udp.discover).toHaveBeenCalledTimes(0);\n  });","file":"unit/transporters/tcp/udp-broadcaster.spec.js","skipped":false,"dir":"test"},{"name":"should close udp server","suites":["Test UdpServer.close"],"updatePoint":{"line":429,"column":29},"line":429,"code":"  it(\"should close udp server\", () => {\n    let server = {\n      close: jest.fn()\n    };\n    udp.servers = [server, server];\n    udp.stopDiscovering = jest.fn();\n    udp.close();\n    expect(udp.stopDiscovering).toHaveBeenCalledTimes(1);\n    expect(server.close).toHaveBeenCalledTimes(2);\n    expect(udp.servers.length).toBe(0);\n  });","file":"unit/transporters/tcp/udp-broadcaster.spec.js","skipped":false,"dir":"test"},{"name":"check constructor","suites":["Test UdpServer getBroadcastAddresses"],"updatePoint":{"line":483,"column":23},"line":483,"code":"  it(\"check constructor\", () => {\n    let transporter = {\n      nodeID: \"node-1\",\n      logger: jest.fn(),\n      broker: {\n        namespace: \"test\"\n      }\n    };\n    let udp = new UdpServer(transporter);\n    expect(udp.getBroadcastAddresses()).toEqual([\"127.255.255.255\", \"192.168.2.255\", \"192.168.232.255\"]);\n  });","file":"unit/transporters/tcp/udp-broadcaster.spec.js","skipped":false,"dir":"test"},{"name":"check constructor","suites":["Test UdpServer getInterfaceAddresses"],"updatePoint":{"line":537,"column":23},"line":537,"code":"  it(\"check constructor\", () => {\n    let transporter = {\n      nodeID: \"node-1\",\n      logger: jest.fn(),\n      broker: {\n        namespace: \"test\"\n      }\n    };\n    let udp = new UdpServer(transporter);\n    expect(udp.getInterfaceAddresses()).toEqual([\"127.0.0.1\", \"192.168.2.100\", \"192.168.232.1\"]);\n  });","file":"unit/transporters/tcp/udp-broadcaster.spec.js","skipped":false,"dir":"test"},{"name":"should return true for Objects and Arrays and false for anything else","suites":["Test utils.isObject"],"updatePoint":{"line":10,"column":75},"line":10,"code":"  it(\"should return true for Objects and Arrays and false for anything else\", () => {\n    expect(utils.isObject({})).toBe(true);\n    expect(utils.isObject(Object.create(null))).toBe(true);\n    expect(utils.isObject(new Object(null))).toBe(true);\n    expect(utils.isObject(new function () {}())).toBe(true);\n    expect(utils.isObject([])).toBe(true);\n    expect(utils.isObject(Array.from([]))).toBe(true);\n    expect(utils.isObject(new Array(null))).toBe(true);\n    expect(utils.isObject(null)).toBe(false);\n    expect(utils.isObject(function () {})).toBe(false);\n    expect(utils.isObject(() => {})).toBe(false);\n    expect(utils.isObject(async () => {})).toBe(false);\n    expect(utils.isObject(class Dummy {})).toBe(false);\n    expect(utils.isObject(1)).toBe(false);\n    expect(utils.isObject(\"string\")).toBe(false);\n    expect(utils.isObject(new String(\"\"))).toBe(false);\n    expect(utils.isObject(NaN)).toBe(false);\n  });","file":"unit/utils.spec.js","skipped":false,"dir":"test"},{"name":"should return true for POJOs false for anything else","suites":["Test utils.isPlainObject"],"updatePoint":{"line":30,"column":58},"line":30,"code":"  it(\"should return true for POJOs false for anything else\", () => {\n    expect(utils.isPlainObject({})).toBe(true);\n    expect(utils.isPlainObject(Object.create(null))).toBe(true);\n    expect(utils.isPlainObject(new Object(null))).toBe(true);\n    expect(utils.isPlainObject(new function () {}())).toBe(false);\n    expect(utils.isPlainObject([])).toBe(false);\n    expect(utils.isPlainObject(Array.from([]))).toBe(false);\n    expect(utils.isPlainObject(new Array(null))).toBe(false);\n    expect(utils.isPlainObject([])).toBe(false);\n    expect(utils.isPlainObject(null)).toBe(false);\n    expect(utils.isPlainObject(function () {})).toBe(false);\n    expect(utils.isPlainObject(() => {})).toBe(false);\n    expect(utils.isPlainObject(async () => {})).toBe(false);\n    expect(utils.isPlainObject(class Dummy {})).toBe(false);\n    expect(utils.isPlainObject(1)).toBe(false);\n    expect(utils.isPlainObject(\"string\")).toBe(false);\n    expect(utils.isPlainObject(new String(\"\"))).toBe(false);\n    expect(utils.isPlainObject(NaN)).toBe(false);\n  });","file":"unit/utils.spec.js","skipped":false,"dir":"test"},{"name":"should return true for strings and false for anything else","suites":["Test utils.isString"],"updatePoint":{"line":51,"column":64},"line":51,"code":"  it(\"should return true for strings and false for anything else\", () => {\n    expect(utils.isString(\"string\")).toBe(true);\n    expect(utils.isString(new String(\"\"))).toBe(true);\n    expect(utils.isString({})).toBe(false);\n    expect(utils.isString(Object.create(null))).toBe(false);\n    expect(utils.isString(new Object(null))).toBe(false);\n    expect(utils.isString(new function () {}())).toBe(false);\n    expect(utils.isString([])).toBe(false);\n    expect(utils.isString(Array.from([]))).toBe(false);\n    expect(utils.isString(new Array(null))).toBe(false);\n    expect(utils.isString(null)).toBe(false);\n    expect(utils.isString(function () {})).toBe(false);\n    expect(utils.isString(() => {})).toBe(false);\n    expect(utils.isString(async () => {})).toBe(false);\n    expect(utils.isString(class Dummy {})).toBe(false);\n    expect(utils.isString(1)).toBe(false);\n    expect(utils.isString(NaN)).toBe(false);\n  });","file":"unit/utils.spec.js","skipped":false,"dir":"test"},{"name":"should return true for function types","suites":["Test utils.isFunction"],"updatePoint":{"line":71,"column":43},"line":71,"code":"  it(\"should return true for function types\", () => {\n    expect(utils.isFunction(function () {})).toBe(true);\n    expect(utils.isFunction(() => {})).toBe(true);\n    expect(utils.isFunction(async () => {})).toBe(true);\n    expect(utils.isFunction(class Dummy {})).toBe(true);\n    expect(utils.isFunction({})).toBe(false);\n    expect(utils.isFunction([])).toBe(false);\n    expect(utils.isFunction(null)).toBe(false);\n    expect(utils.isFunction(1)).toBe(false);\n    expect(utils.isFunction(\"string\")).toBe(false);\n    expect(utils.isFunction(NaN)).toBe(false);\n  });","file":"unit/utils.spec.js","skipped":false,"dir":"test"},{"name":"should return true for date types","suites":["Test utils.isDate"],"updatePoint":{"line":85,"column":39},"line":85,"code":"  it(\"should return true for date types\", () => {\n    expect(utils.isDate(new Date())).toBe(true);\n    expect(utils.isDate(1614529868608)).toBe(false);\n    expect(utils.isDate(\"Sun Feb 28 2021 17:36:03 GMT+0100 (GMT+01:00)\")).toBe(false);\n    expect(utils.isDate({})).toBe(false);\n    expect(utils.isDate([])).toBe(false);\n    expect(utils.isDate(null)).toBe(false);\n    expect(utils.isDate(1)).toBe(false);\n    expect(utils.isDate(\"string\")).toBe(false);\n    expect(utils.isDate(NaN)).toBe(false);\n  });","file":"unit/utils.spec.js","skipped":false,"dir":"test"},{"name":"should flat the array","suites":["Test utils.flatten"],"updatePoint":{"line":98,"column":27},"line":98,"code":"  it(\"should flat the array\", () => {\n    expect(utils.flatten([])).toEqual([]);\n    expect(utils.flatten([1, 2])).toEqual([1, 2]);\n    expect(utils.flatten([1, [2], [3, [4], 5]])).toEqual([1, 2, 3, [4], 5]);\n  });","file":"unit/utils.spec.js","skipped":false,"dir":"test"},{"name":"should humanize elapsed milliseconds","suites":["Test utils.humanize"],"updatePoint":{"line":105,"column":42},"line":105,"code":"  it(\"should humanize elapsed milliseconds\", () => {\n    expect(utils.humanize()).toBe(\"?\");\n    expect(utils.humanize(1)).toBe(\"1ms\");\n    expect(utils.humanize(10)).toBe(\"10ms\");\n    expect(utils.humanize(100)).toBe(\"100ms\");\n    expect(utils.humanize(1000)).toBe(\"1s\");\n    expect(utils.humanize(10000)).toBe(\"10s\");\n    expect(utils.humanize(100000)).toBe(\"1m\");\n    expect(utils.humanize(1000000)).toBe(\"16m\");\n    expect(utils.humanize(10000000)).toBe(\"2h\");\n    expect(utils.humanize(100000000)).toBe(\"27h\");\n    expect(utils.humanize(0)).toBe(\"now\");\n    expect(utils.humanize(0.1)).toBe(\"100μs\");\n    expect(utils.humanize(0.01)).toBe(\"10μs\");\n    expect(utils.humanize(0.001)).toBe(\"1μs\");\n    expect(utils.humanize(0.0001)).toBe(\"100ns\");\n    expect(utils.humanize(0.00001)).toBe(\"10ns\");\n    expect(utils.humanize(0.000001)).toBe(\"1ns\");\n    expect(utils.humanize(0.0000001)).toBe(\"now\");\n  });","file":"unit/utils.spec.js","skipped":false,"dir":"test"},{"name":"should generate unique token","suites":["Test utils.generateToken"],"updatePoint":{"line":128,"column":34},"line":128,"code":"  it(\"should generate unique token\", () => {\n    let res1 = utils.generateToken();\n    expect(res1.length).toBe(36);\n    expect(res1).toMatch(REGEX_MATCHER);\n    let res2 = utils.generateToken();\n    expect(res2).toMatch(REGEX_MATCHER);\n    expect(res1).not.toEqual(res2);\n  });","file":"unit/utils.spec.js","skipped":false,"dir":"test"},{"name":"should remove item from array","suites":["Test utils.removeFromArray"],"updatePoint":{"line":138,"column":35},"line":138,"code":"  it(\"should remove item from array\", () => {\n    expect(utils.removeFromArray()).toBeUndefined();\n    expect(utils.removeFromArray([])).toEqual([]);\n    expect(utils.removeFromArray([10, 20, 30, 40, 50, 60], 80)).toEqual([10, 20, 30, 40, 50, 60]);\n    expect(utils.removeFromArray([10, 20, 30, 40, 50, 60], 30)).toEqual([10, 20, 40, 50, 60]);\n    const arr = [{\n      a: 1\n    }, {\n      a: 2\n    }, {\n      a: 3\n    }, {\n      a: 4\n    }];\n    expect(utils.removeFromArray(arr, {\n      a: 1\n    })).toEqual([{\n      a: 1\n    }, {\n      a: 2\n    }, {\n      a: 3\n    }, {\n      a: 4\n    }]);\n    expect(utils.removeFromArray(arr, arr[2])).toEqual([{\n      a: 1\n    }, {\n      a: 2\n    }, {\n      a: 4\n    }]);\n  });","file":"unit/utils.spec.js","skipped":false,"dir":"test"},{"name":"should check the param","suites":["Test utils.isPromise"],"updatePoint":{"line":173,"column":28},"line":173,"code":"  it(\"should check the param\", () => {\n    expect(utils.isPromise()).toBe(false);\n    expect(utils.isPromise({})).toBe(false);\n    expect(utils.isPromise(new Promise(() => {}))).toBe(true);\n    expect(utils.isPromise(Promise.resolve())).toBe(true); //expect(utils.isPromise(Promise.reject())).toBe(true); // node gives warning\n  });","file":"unit/utils.spec.js","skipped":false,"dir":"test"},{"name":"should give the computer hostname","suites":["Test utils.getNodeID"],"updatePoint":{"line":183,"column":39},"line":183,"code":"  it(\"should give the computer hostname\", () => {\n    expect(utils.getNodeID()).toBe(os.hostname().toLowerCase() + \"-\" + process.pid);\n  });","file":"unit/utils.spec.js","skipped":false,"dir":"test"},{"name":"should give only IPv4 external interfaces","suites":["Test utils.getIpList"],"updatePoint":{"line":190,"column":47},"line":190,"code":"  it(\"should give only IPv4 external interfaces\", () => {\n    os.networkInterfaces = jest.fn(() => ({\n      \"Loopback Pseudo-Interface 1\": [{\n        address: \"::1\",\n        netmask: \"ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\",\n        family: \"IPv6\",\n        internal: true,\n        cidr: \"::1/128\"\n      }, {\n        address: \"127.0.0.1\",\n        netmask: \"255.0.0.0\",\n        family: \"IPv4\",\n        internal: true,\n        cidr: \"127.0.0.1/8\"\n      }],\n      Local: [{\n        address: \"fe80::29a9:ffeb:4a65:9f82\",\n        netmask: \"ffff:ffff:ffff:ffff::\",\n        family: \"IPv6\",\n        internal: false,\n        cidr: \"fe80::29a9:ffeb:4a65:9f82/64\"\n      }, {\n        address: \"192.168.2.100\",\n        netmask: \"255.255.255.0\",\n        family: \"IPv4\",\n        internal: false,\n        cidr: \"192.168.2.100/24\"\n      }],\n      \"VMware Network Adapter VMnet1\": [{\n        address: \"fe80::3c63:fab8:e6be:8059\",\n        netmask: \"ffff:ffff:ffff:ffff::\",\n        family: \"IPv6\",\n        internal: false,\n        cidr: \"fe80::3c63:fab8:e6be:8059/64\"\n      }, {\n        address: \"192.168.232.1\",\n        netmask: \"255.255.255.0\",\n        family: \"IPv4\",\n        internal: false,\n        cidr: \"192.168.232.1/24\"\n      }]\n    }));\n    expect(utils.getIpList()).toEqual([\"192.168.2.100\", \"192.168.232.1\"]);\n  });","file":"unit/utils.spec.js","skipped":false,"dir":"test"},{"name":"should give all IPv4 internal interfaces","suites":["Test utils.getIpList"],"updatePoint":{"line":234,"column":46},"line":234,"code":"  it(\"should give all IPv4 internal interfaces\", () => {\n    os.networkInterfaces = jest.fn(() => ({\n      \"Loopback Pseudo-Interface 1\": [{\n        address: \"::1\",\n        netmask: \"ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\",\n        family: \"IPv6\",\n        internal: true,\n        cidr: \"::1/128\"\n      }, {\n        address: \"127.0.0.1\",\n        netmask: \"255.0.0.0\",\n        family: \"IPv4\",\n        internal: true,\n        cidr: \"127.0.0.1/8\"\n      }],\n      \"Loopback Pseudo-Interface 2\": [{\n        address: \"::2\",\n        netmask: \"ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\",\n        family: \"IPv6\",\n        internal: true,\n        cidr: \"::2/128\"\n      }, {\n        address: \"127.0.0.2\",\n        netmask: \"255.0.0.0\",\n        family: \"IPv4\",\n        internal: true,\n        cidr: \"127.0.0.2/8\"\n      }]\n    }));\n    expect(utils.getIpList()).toEqual([\"127.0.0.1\", \"127.0.0.2\"]);\n  });","file":"unit/utils.spec.js","skipped":false,"dir":"test"},{"name":"should return a same object","suites":["Test utils.safetyObject"],"updatePoint":{"line":326,"column":33},"line":326,"code":"  it(\"should return a same object\", () => {\n    const obj = {\n      a: 5,\n      b: \"Hello\",\n      c: [0, 1, 2],\n      d: {\n        e: false,\n        f: 1.23\n      }\n    };\n    const res = utils.safetyObject(obj);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual(obj);\n  });","file":"unit/utils.spec.js","skipped":false,"dir":"test"},{"name":"should skip converting into JSON large objects","suites":["Test utils.safetyObject"],"updatePoint":{"line":340,"column":52},"line":340,"code":"  it(\"should skip converting into JSON large objects\", () => {\n    const bigData = Array.from({\n      length: 2048\n    }).map((_, index) => index);\n    const bigBuffer = Buffer.from(bigData);\n    const bigSet = new Set(bigData);\n    const obj = {\n      a: 5,\n      b: \"Hello\",\n      c: [0, 1, 2],\n      d: {\n        e: false,\n        f: 1.23\n      },\n      bigBuffer,\n      bigSet\n    };\n    const res = utils.safetyObject(obj, {\n      maxSafeObjectSize: 1024\n    });\n    expect(res).not.toBe(obj);\n    expect(res).toEqual({\n      a: 5,\n      b: \"Hello\",\n      c: [0, 1, 2],\n      d: {\n        e: false,\n        f: 1.23\n      },\n      bigBuffer: {\n        data: \"[Array 2048]\",\n        type: \"Buffer\"\n      },\n      bigSet: \"[Set 2048]\"\n    });\n  });","file":"unit/utils.spec.js","skipped":false,"dir":"test"},{"name":"should return a same object without circular refs & Function","suites":["Test utils.safetyObject"],"updatePoint":{"line":376,"column":66},"line":376,"code":"  it(\"should return a same object without circular refs & Function\", () => {\n    const obj = {\n      a: 5,\n      b: \"Hello\",\n      c: [0, 1, 2],\n      d: {\n        e: false,\n        f: 1.23\n      },\n      h: ctx => ctx\n    };\n    obj.d.g = obj;\n    const res = utils.safetyObject(obj);\n    expect(res).not.toBe(obj);\n    expect(res).toEqual({\n      a: 5,\n      b: \"Hello\",\n      c: [0, 1, 2],\n      d: {\n        e: false,\n        f: 1.23\n      }\n    });\n    expect(obj.d.g).toBeDefined();\n    expect(obj.h).toBeInstanceOf(Function);\n  });","file":"unit/utils.spec.js","skipped":false,"dir":"test"},{"name":"should set variable","suites":["Test utils.dotSet"],"updatePoint":{"line":404,"column":25},"line":404,"code":"  it(\"should set variable\", () => {\n    const obj = {};\n    const result = utils.dotSet(obj, \"variable\", \"hello world\");\n    expect(result.variable).toBe(\"hello world\");\n  });","file":"unit/utils.spec.js","skipped":false,"dir":"test"},{"name":"should set nested variable","suites":["Test utils.dotSet"],"updatePoint":{"line":409,"column":32},"line":409,"code":"  it(\"should set nested variable\", () => {\n    const obj = {};\n    const result = utils.dotSet(obj, \"nested.variable\", \"hello world\");\n    expect(result.nested.variable).toBe(\"hello world\");\n  });","file":"unit/utils.spec.js","skipped":false,"dir":"test"},{"name":"should not change other variables","suites":["Test utils.dotSet"],"updatePoint":{"line":414,"column":39},"line":414,"code":"  it(\"should not change other variables\", () => {\n    const obj = {\n      a: 1,\n      b: {\n        c: 2\n      }\n    };\n    const result = utils.dotSet(obj, \"nested.variable\", \"hello world\");\n    expect(result.a).toBe(1);\n    expect(result.b.c).toBe(2);\n    expect(result.nested.variable).toBe(\"hello world\");\n  });","file":"unit/utils.spec.js","skipped":false,"dir":"test"},{"name":"should set nested value if the current value is null","suites":["Test utils.dotSet"],"updatePoint":{"line":426,"column":58},"line":426,"code":"  it(\"should set nested value if the current value is null\", () => {\n    const obj = {\n      a: 1,\n      b: null\n    };\n    const result = utils.dotSet(obj, \"b.c\", \"hello world\");\n    expect(result.a).toBe(1);\n    expect(result.b.c).toBe(\"hello world\");\n  });","file":"unit/utils.spec.js","skipped":false,"dir":"test"},{"name":"should replace values","suites":["Test utils.dotSet"],"updatePoint":{"line":435,"column":27},"line":435,"code":"  it(\"should replace values\", () => {\n    const obj = {\n      hello: {\n        world: \"!\"\n      }\n    };\n    const result = utils.dotSet(obj, \"hello.world\", \"?\");\n    expect(result.hello.world).toBe(\"?\");\n  });","file":"unit/utils.spec.js","skipped":false,"dir":"test"},{"name":"should throw when not on leaf","suites":["Test utils.dotSet"],"updatePoint":{"line":444,"column":35},"line":444,"code":"  it(\"should throw when not on leaf\", done => {\n    const obj = {\n      level1: {\n        level2: \"hello\"\n      }\n    };\n\n    try {\n      utils.dotSet(obj, \"level1.level2.level3\", \"?\");\n      done.fail(new Error(\"Should have raised an error\"));\n    } catch (err) {\n      done();\n    }\n  });","file":"unit/utils.spec.js","skipped":false,"dir":"test"},{"name":"should parse byte string to number of bytes","suites":["Test utils.parseByteString"],"updatePoint":{"line":460,"column":49},"line":460,"code":"  it(\"should parse byte string to number of bytes\", () => {\n    expect(utils.parseByteString()).toBe(null);\n    expect(utils.parseByteString(null)).toBe(null);\n    expect(utils.parseByteString(0)).toBe(0);\n    expect(utils.parseByteString(1000)).toBe(1000);\n    expect(utils.parseByteString(10000)).toBe(10000);\n    expect(utils.parseByteString(100000000)).toBe(100000000);\n    expect(utils.parseByteString(\"\")).toBe(null);\n    expect(utils.parseByteString(\"0\")).toBe(0);\n    expect(utils.parseByteString(\"1\")).toBe(1);\n    expect(utils.parseByteString(\"10\")).toBe(10);\n    expect(utils.parseByteString(\"100\")).toBe(100);\n    expect(utils.parseByteString(\"1000\")).toBe(1000);\n    expect(utils.parseByteString(\"a\")).toBe(null);\n    expect(utils.parseByteString(\"b\")).toBe(null);\n    expect(utils.parseByteString(\"B\")).toBe(null);\n    expect(utils.parseByteString(\"1b\")).toBe(1);\n    expect(utils.parseByteString(\"5B\")).toBe(5);\n    expect(utils.parseByteString(\"100b\")).toBe(100);\n    expect(utils.parseByteString(\"1000b\")).toBe(1000);\n    expect(utils.parseByteString(\"0kb\")).toBe(0);\n    expect(utils.parseByteString(\"1kb\")).toBe(1024);\n    expect(utils.parseByteString(\"100kb\")).toBe(102400);\n    expect(utils.parseByteString(\"512kb\")).toBe(524288);\n    expect(utils.parseByteString(\"1mb\")).toBe(1048576);\n    expect(utils.parseByteString(\"5mb\")).toBe(5242880);\n    expect(utils.parseByteString(\"2.56GB\")).toBe(2748779069);\n    expect(utils.parseByteString(\"2.8TB\")).toBe(3078632557772);\n  });","file":"unit/utils.spec.js","skipped":false,"dir":"test"},{"name":"should missing polyfilled methods","suites":["Test utils.polyfillPromise"],"updatePoint":{"line":491,"column":39},"line":491,"code":"  it(\"should missing polyfilled methods\", () => {\n    expect(Promise.method).toBeUndefined();\n    expect(Promise.delay).toBeUndefined();\n    expect(Promise.prototype.delay).toBeUndefined();\n    expect(Promise.prototype.timeout).toBeUndefined();\n    expect(Promise.TimeoutError).toBeUndefined(); //expect(Promise.map).toBeUndefined();\n    //expect(Promise.mapSeries).toBeUndefined();\n  });","file":"unit/utils.spec.js","skipped":false,"dir":"test"},{"name":"should exists polyfilled methods","suites":["Test utils.polyfillPromise"],"updatePoint":{"line":499,"column":38},"line":499,"code":"  it(\"should exists polyfilled methods\", () => {\n    utils.polyfillPromise(global.Promise);\n    expect(Promise.method).toBeDefined();\n    expect(Promise.delay).toBeDefined();\n    expect(Promise.prototype.delay).toBeDefined();\n    expect(Promise.prototype.timeout).toBeDefined();\n    expect(Promise.TimeoutError).toBeDefined(); //expect(Promise.map).toBeDefined();\n    //expect(Promise.mapSeries).toBeDefined();\n  });","file":"unit/utils.spec.js","skipped":false,"dir":"test"},{"name":"should wrap a static value with Promise","suites":["Test utils.polyfillPromise","Test Promise.method"],"updatePoint":{"line":509,"column":47},"line":509,"code":"    it(\"should wrap a static value with Promise\", () => {\n      const origFn = name => `Hello ${name}`;\n\n      const pFn = Promise.method(origFn);\n      return pFn(\"Promise\").catch(protectReject).then(res => {\n        expect(res).toBe(\"Hello Promise\");\n      });\n    });","file":"unit/utils.spec.js","skipped":false,"dir":"test"},{"name":"should wrap a resolved with value","suites":["Test utils.polyfillPromise","Test Promise.method"],"updatePoint":{"line":517,"column":41},"line":517,"code":"    it(\"should wrap a resolved with value\", () => {\n      const origFn = name => Promise.resolve(`Hello ${name}`);\n\n      const pFn = Promise.method(origFn);\n      return pFn(\"Promise\").catch(protectReject).then(res => {\n        expect(res).toBe(\"Hello Promise\");\n      });\n    });","file":"unit/utils.spec.js","skipped":false,"dir":"test"},{"name":"should wrap an Error with Promise","suites":["Test utils.polyfillPromise","Test Promise.method"],"updatePoint":{"line":525,"column":41},"line":525,"code":"    it(\"should wrap an Error with Promise\", () => {\n      const err = new Error(\"Something happened\");\n\n      const origFn = () => {\n        throw err;\n      };\n\n      const pFn = Promise.method(origFn);\n      return pFn(\"Promise\").then(protectReject).catch(res => {\n        expect(res).toBe(err);\n      });\n    });","file":"unit/utils.spec.js","skipped":false,"dir":"test"},{"name":"should wrap a rejected Error","suites":["Test utils.polyfillPromise","Test Promise.method"],"updatePoint":{"line":537,"column":36},"line":537,"code":"    it(\"should wrap a rejected Error\", () => {\n      const err = new Error(\"Something happened\");\n\n      const origFn = () => Promise.reject(err);\n\n      const pFn = Promise.method(origFn);\n      return pFn(\"Promise\").then(protectReject).catch(res => {\n        expect(res).toBe(err);\n      });\n    });","file":"unit/utils.spec.js","skipped":false,"dir":"test"},{"name":"should wait the given time","suites":["Test utils.polyfillPromise","Test Promise.delay"],"updatePoint":{"line":552,"column":34},"line":552,"code":"    it(\"should wait the given time\", () => {\n      let done = false;\n      return new Promise(resolve => {\n        const p = Promise.delay(2500).then(() => done = true);\n        expect(done).toBe(false);\n        clock.tick(1000);\n        expect(done).toBe(false);\n        clock.tick(1000);\n        expect(done).toBe(false);\n        clock.tick(1000);\n        expect(done).toBe(true);\n        p.then(() => resolve());\n      });\n    });","file":"unit/utils.spec.js","skipped":true,"dir":"test"},{"name":"should be resolved","suites":["Test utils.polyfillPromise","Test Promise.timeout"],"updatePoint":{"line":572,"column":26},"line":572,"code":"    it(\"should be resolved\", () => {\n      let p = Promise.delay(200).then(() => \"OK\").timeout(250); //clock.tick(2200);\n      //clock.tick(3000);\n\n      return p.catch(protectReject).then(res => {\n        expect(res).toBe(\"OK\");\n      });\n    });","file":"unit/utils.spec.js","skipped":false,"dir":"test"},{"name":"should be resolved","suites":["Test utils.polyfillPromise","Test Promise.timeout"],"updatePoint":{"line":580,"column":26},"line":580,"code":"    it(\"should be resolved\", () => {\n      let p = Promise.resolve().delay(200).then(() => \"OK\").timeout(250); //clock.tick(2200);\n      //clock.tick(3000);\n\n      return p.catch(protectReject).then(res => {\n        expect(res).toBe(\"OK\");\n      });\n    });","file":"unit/utils.spec.js","skipped":false,"dir":"test"},{"name":"should be timed out","suites":["Test utils.polyfillPromise","Test Promise.timeout"],"updatePoint":{"line":588,"column":27},"line":588,"code":"    it(\"should be timed out\", () => {\n      let p = Promise.resolve().delay(200).then(() => \"OK\").timeout(150); //clock.tick(1700);\n\n      return p.then(protectReject).catch(err => {\n        expect(err).toBeInstanceOf(Promise.TimeoutError);\n      });\n    });","file":"unit/utils.spec.js","skipped":false,"dir":"test"},{"name":"should be timed out","suites":["Test utils.polyfillPromise","Test Promise.timeout"],"updatePoint":{"line":595,"column":27},"line":595,"code":"    it(\"should be timed out\", () => {\n      let p = Promise.resolve().delay(200).then(() => \"OK\").timeout(150); //clock.tick(2500);\n\n      return p.then(protectReject).catch(err => {\n        expect(err).toBeInstanceOf(Promise.TimeoutError);\n      });\n    });","file":"unit/utils.spec.js","skipped":false,"dir":"test"},{"name":"should be resolved","suites":["Test utils.polyfillPromise","Test Promise.mapSeries"],"updatePoint":{"line":604,"column":26},"line":604,"code":"    it(\"should be resolved\", () => {\n      return Promise.mapSeries([\"First\", Promise.resolve(\"Second\"), \"Third\", new Promise(resolve => resolve(\"Fourth\"))], p => p).catch(protectReject).then(res => {\n        expect(res).toEqual([\"First\", \"Second\", \"Third\", \"Fourth\"]);\n      });\n    });","file":"unit/utils.spec.js","skipped":false,"dir":"test"},{"name":"should be resolved the empty array","suites":["Test utils.polyfillPromise","Test Promise.mapSeries"],"updatePoint":{"line":609,"column":42},"line":609,"code":"    it(\"should be resolved the empty array\", () => {\n      return Promise.mapSeries([], p => p).catch(protectReject).then(res => {\n        expect(res).toEqual([]);\n      });\n    });","file":"unit/utils.spec.js","skipped":false,"dir":"test"},{"name":"should be rejected","suites":["Test utils.polyfillPromise","Test Promise.mapSeries"],"updatePoint":{"line":614,"column":26},"line":614,"code":"    it(\"should be rejected\", () => {\n      return Promise.mapSeries([\"First\", Promise.resolve(\"Second\"), \"Third\", new Promise((resolve, reject) => reject(\"Error\"))], p => p).then(protectReject).catch(res => {\n        expect(res).toEqual(\"Error\");\n      });\n    });","file":"unit/utils.spec.js","skipped":false,"dir":"test"},{"name":"should be rejected","suites":["Test utils.polyfillPromise","Test Promise.mapSeries"],"updatePoint":{"line":619,"column":26},"line":619,"code":"    it(\"should be rejected\", () => {\n      const fn = jest.fn((item, i) => {\n        if (i == 2) throw new Error(\"Wrong\");\n        return item;\n      });\n      return Promise.mapSeries([\"First\", Promise.resolve(\"Second\"), \"Third\", new Promise(resolve => resolve(\"Fourth\"))], fn).then(protectReject).catch(res => {\n        expect(res).toBeInstanceOf(Error);\n        expect(res.message).toBe(\"Wrong\");\n        expect(fn).toBeCalledTimes(3);\n      });\n    });","file":"unit/utils.spec.js","skipped":false,"dir":"test"},{"name":"should be resolve","suites":["Test utils.polyfillPromise","Test Promise.promiseAllControl"],"updatePoint":{"line":634,"column":27},"line":634,"code":"      it(\"should be resolve\", () => {\n        return utils.promiseAllControl([\"First\", Promise.resolve(\"Second\"), \"Third\", new Promise((resolve, reject) => reject(\"Error\"))], true).then(res => {\n          expect(res).toEqual([{\n            status: \"fulfilled\",\n            value: \"First\"\n          }, {\n            status: \"fulfilled\",\n            value: \"Second\"\n          }, {\n            status: \"fulfilled\",\n            value: \"Third\"\n          }, {\n            status: \"rejected\",\n            reason: \"Error\"\n          }]);\n        });\n      });","file":"unit/utils.spec.js","skipped":false,"dir":"test"},{"name":"should be rejected","suites":["Test utils.polyfillPromise","Test Promise.promiseAllControl"],"updatePoint":{"line":651,"column":28},"line":651,"code":"      it(\"should be rejected\", () => {\n        return utils.promiseAllControl([\"First\", Promise.resolve(\"Second\"), \"Third\", new Promise((resolve, reject) => reject(\"Error\"))], false).catch(res => {\n          expect(res).toEqual(\"Error\");\n        });\n      });","file":"unit/utils.spec.js","skipped":false,"dir":"test"},{"name":"should detect the arguments of the Function","suites":["Test utils.functionArguments"],"updatePoint":{"line":660,"column":49},"line":660,"code":"  it(\"should detect the arguments of the Function\", () => {\n    expect(utils.functionArguments(() => {})).toEqual([]);\n    expect(utils.functionArguments(function () {})).toEqual([]);\n    expect(utils.functionArguments(alpha => {})).toEqual([\"alpha\"]);\n    expect(utils.functionArguments(function (alpha) {})).toEqual([\"alpha\"]);\n    expect(utils.functionArguments((alpha, beta) => {})).toEqual([\"alpha\", \"beta\"]);\n    expect(utils.functionArguments(function (alpha, beta) {})).toEqual([\"alpha\", \"beta\"]);\n    expect(utils.functionArguments(async (alpha, beta) => {})).toEqual([\"alpha\", \"beta\"]);\n    expect(utils.functionArguments(async function (alpha, beta) {})).toEqual([\"alpha\", \"beta\"]);\n  });","file":"unit/utils.spec.js","skipped":false,"dir":"test"},{"name":"test constructor without opts","suites":["Test BaseValidator constructor"],"updatePoint":{"line":15,"column":35},"line":15,"code":"  it(\"test constructor without opts\", () => {\n    const validator = new BaseValidator();\n    expect(validator).toBeDefined();\n    expect(validator.opts).toEqual({\n      paramName: \"params\"\n    });\n  });","file":"unit/validators/base.spec.js","skipped":false,"dir":"test"},{"name":"test constructor with opts","suites":["Test BaseValidator constructor"],"updatePoint":{"line":22,"column":32},"line":22,"code":"  it(\"test constructor with opts\", () => {\n    const validator = new BaseValidator({\n      paramName: \"myParam\",\n      useNewCustomCheckerFunction: true\n    });\n    expect(validator).toBeDefined();\n    expect(validator.opts).toEqual({\n      paramName: \"myParam\",\n      useNewCustomCheckerFunction: true\n    });\n  });","file":"unit/validators/base.spec.js","skipped":false,"dir":"test"},{"name":"should set broker","suites":["Test BaseValidator 'init' method"],"updatePoint":{"line":35,"column":23},"line":35,"code":"  it(\"should set broker\", () => {\n    const broker = new ServiceBroker({\n      logger: false\n    });\n    const validator = new BaseValidator();\n    validator.init(broker);\n    expect(validator.broker).toBe(broker);\n  });","file":"unit/validators/base.spec.js","skipped":false,"dir":"test"},{"name":"should return a middleware object","suites":["Test BaseValidator 'middleware' method","Test middleware localAction"],"updatePoint":{"line":56,"column":41},"line":56,"code":"    it(\"should return a middleware object\", () => {\n      const mw = v.middleware();\n      expect(mw).toEqual({\n        name: \"Validator\",\n        localAction: expect.any(Function),\n        localEvent: expect.any(Function)\n      });\n    });","file":"unit/validators/base.spec.js","skipped":false,"dir":"test"},{"name":"should wrap the handler","suites":["Test BaseValidator 'middleware' method","Test middleware localAction"],"updatePoint":{"line":64,"column":31},"line":64,"code":"    it(\"should wrap the handler\", () => {\n      const mw = v.middleware(broker);\n      const mockAction = {\n        name: \"posts.find\",\n        params: {\n          id: \"number\",\n          name: \"string\"\n        },\n        handler: jest.fn(() => Promise.resolve())\n      };\n      v.compile = jest.fn(() => checkGood); // Create wrapped handler\n\n      const wrapped = mw.localAction(mockAction.handler, mockAction);\n      expect(typeof wrapped).toBe(\"function\");\n      expect(wrapped).not.toBe(mockAction.handler);\n      expect(v.compile).toHaveBeenCalledTimes(1);\n      expect(v.compile).toHaveBeenCalledWith({\n        id: \"number\",\n        name: \"string\"\n      }); // Create fake context\n\n      const ctx = {\n        params: {\n          id: 5,\n          name: \"John\"\n        },\n        action: {\n          name: \"users.create\"\n        }\n      }; // Call wrapped function\n\n      return wrapped(ctx).then(() => {\n        expect(checkGood).toHaveBeenCalledTimes(1);\n        expect(checkGood).toHaveBeenCalledWith({\n          id: 5,\n          name: \"John\"\n        }, {\n          meta: {\n            params: {\n              id: 5,\n              name: \"John\"\n            },\n            action: {\n              name: \"users.create\"\n            }\n          }\n        });\n        expect(mockAction.handler).toHaveBeenCalledTimes(1);\n      });\n    });","file":"unit/validators/base.spec.js","skipped":false,"dir":"test"},{"name":"should call validator & throw error & not call handler","suites":["Test BaseValidator 'middleware' method","Test middleware localAction"],"updatePoint":{"line":114,"column":62},"line":114,"code":"    it(\"should call validator & throw error & not call handler\", () => {\n      const mw = v.middleware(broker);\n      const mockAction = {\n        name: \"posts.find\",\n        params: {\n          id: \"number\",\n          name: \"string\"\n        },\n        handler: jest.fn(() => Promise.resolve())\n      };\n      v.compile = jest.fn(() => checkBad); // Create wrapped handler\n\n      const wrapped = mw.localAction(mockAction.handler, mockAction);\n      expect(wrapped).not.toBe(mockAction.handler); // Create fake context with wrong params\n\n      const ctx = {\n        params: {\n          id: 5,\n          fullName: \"John\"\n        },\n        action: mockAction\n      }; // Call wrapped function\n\n      return wrapped(ctx).catch(err => {\n        expect(err).toBeInstanceOf(ValidationError);\n        expect(err.data).toEqual([{\n          action: \"posts.find\",\n          field: \"any\",\n          nodeID: undefined,\n          type: \"required\"\n        }]);\n        expect(mockAction.handler).toHaveBeenCalledTimes(0);\n      });\n    });","file":"unit/validators/base.spec.js","skipped":false,"dir":"test"},{"name":"should not wrap handler because the params is NOT exist","suites":["Test BaseValidator 'middleware' method","Test middleware localAction"],"updatePoint":{"line":148,"column":63},"line":148,"code":"    it(\"should not wrap handler because the params is NOT exist\", () => {\n      const mockAction = {\n        name: \"posts.find\",\n        handler: jest.fn()\n      };\n      const wrapped = v.middleware().localAction(mockAction.handler, mockAction);\n      expect(typeof wrapped).toBe(\"function\");\n      expect(wrapped).toBe(mockAction.handler);\n    });","file":"unit/validators/base.spec.js","skipped":false,"dir":"test"},{"name":"should wrap the handler","suites":["Test BaseValidator 'middleware' method","Test middleware localAction with async"],"updatePoint":{"line":168,"column":31},"line":168,"code":"    it(\"should wrap the handler\", () => {\n      const mw = v.middleware(broker);\n      const mockAction = {\n        name: \"posts.find\",\n        params: {\n          $$async: true,\n          id: \"number\",\n          name: \"string\"\n        },\n        handler: jest.fn(() => Promise.resolve())\n      };\n      v.compile = jest.fn(() => checkGood); // Create wrapped handler\n\n      const wrapped = mw.localAction(mockAction.handler, mockAction);\n      expect(typeof wrapped).toBe(\"function\");\n      expect(wrapped).not.toBe(mockAction.handler);\n      expect(v.compile).toHaveBeenCalledTimes(1);\n      expect(v.compile).toHaveBeenCalledWith({\n        $$async: true,\n        id: \"number\",\n        name: \"string\"\n      }); // Create fake context\n\n      const ctx = {\n        params: {\n          id: 5,\n          name: \"John\"\n        },\n        action: {\n          name: \"users.create\"\n        }\n      }; // Call wrapped function\n\n      return wrapped(ctx).then(() => {\n        expect(checkGood).toHaveBeenCalledTimes(1);\n        expect(checkGood).toHaveBeenCalledWith({\n          id: 5,\n          name: \"John\"\n        }, {\n          meta: {\n            params: {\n              id: 5,\n              name: \"John\"\n            },\n            action: {\n              name: \"users.create\"\n            }\n          }\n        });\n        expect(mockAction.handler).toHaveBeenCalledTimes(1);\n      });\n    });","file":"unit/validators/base.spec.js","skipped":false,"dir":"test"},{"name":"should call validator & throw error & not call handler","suites":["Test BaseValidator 'middleware' method","Test middleware localAction with async"],"updatePoint":{"line":220,"column":62},"line":220,"code":"    it(\"should call validator & throw error & not call handler\", () => {\n      const mw = v.middleware(broker);\n      const mockAction = {\n        name: \"posts.find\",\n        params: {\n          id: \"number\",\n          name: \"string\"\n        },\n        handler: jest.fn(() => Promise.resolve())\n      };\n      v.compile = jest.fn(() => checkBad); // Create wrapped handler\n\n      const wrapped = mw.localAction(mockAction.handler, mockAction);\n      expect(wrapped).not.toBe(mockAction.handler); // Create fake context with wrong params\n\n      const ctx = {\n        params: {\n          id: 5,\n          fullName: \"John\"\n        },\n        action: mockAction\n      }; // Call wrapped function\n\n      return wrapped(ctx).catch(err => {\n        expect(err).toBeInstanceOf(ValidationError);\n        expect(err.data).toEqual([{\n          action: \"posts.find\",\n          field: \"any\",\n          nodeID: undefined,\n          type: \"required\"\n        }]);\n        expect(mockAction.handler).toHaveBeenCalledTimes(0);\n      });\n    });","file":"unit/validators/base.spec.js","skipped":false,"dir":"test"},{"name":"should wrap the handler","suites":["Test BaseValidator 'middleware' method","Test middleware localAction with custom paramName"],"updatePoint":{"line":265,"column":31},"line":265,"code":"    it(\"should wrap the handler\", () => {\n      const mw = v.middleware(broker);\n      const mockAction = {\n        name: \"posts.find\",\n        paramValidation: {\n          id: \"number\",\n          name: \"string\"\n        },\n        handler: jest.fn(() => Promise.resolve())\n      };\n      v.compile = jest.fn(() => checkGood); // Create wrapped handler\n\n      const wrapped = mw.localAction(mockAction.handler, mockAction);\n      expect(typeof wrapped).toBe(\"function\");\n      expect(wrapped).not.toBe(mockAction.handler);\n      expect(v.compile).toHaveBeenCalledTimes(1);\n      expect(v.compile).toHaveBeenCalledWith({\n        id: \"number\",\n        name: \"string\"\n      }); // Create fake context\n\n      const ctx = {\n        params: {\n          id: 5,\n          name: \"John\"\n        },\n        action: {\n          name: \"users.create\"\n        }\n      }; // Call wrapped function\n\n      return wrapped(ctx).then(() => {\n        expect(checkGood).toHaveBeenCalledTimes(1);\n        expect(checkGood).toHaveBeenCalledWith({\n          id: 5,\n          name: \"John\"\n        }, {\n          meta: {\n            params: {\n              id: 5,\n              name: \"John\"\n            },\n            action: {\n              name: \"users.create\"\n            }\n          }\n        });\n        expect(mockAction.handler).toHaveBeenCalledTimes(1);\n      });\n    });","file":"unit/validators/base.spec.js","skipped":false,"dir":"test"},{"name":"should not wrap handler because the params is NOT exist","suites":["Test BaseValidator 'middleware' method","Test middleware localAction with custom paramName"],"updatePoint":{"line":315,"column":63},"line":315,"code":"    it(\"should not wrap handler because the params is NOT exist\", () => {\n      const mockAction = {\n        name: \"posts.find\",\n        params: {\n          id: \"number\",\n          name: \"string\"\n        },\n        handler: jest.fn()\n      };\n      const wrapped = v.middleware().localAction(mockAction.handler, mockAction);\n      expect(typeof wrapped).toBe(\"function\");\n      expect(wrapped).toBe(mockAction.handler);\n    });","file":"unit/validators/base.spec.js","skipped":false,"dir":"test"},{"name":"should return a middleware object","suites":["Test BaseValidator 'middleware' method","Test middleware localEvent"],"updatePoint":{"line":337,"column":41},"line":337,"code":"    it(\"should return a middleware object\", () => {\n      const mw = v.middleware();\n      expect(mw).toEqual({\n        name: \"Validator\",\n        localAction: expect.any(Function),\n        localEvent: expect.any(Function)\n      });\n    });","file":"unit/validators/base.spec.js","skipped":false,"dir":"test"},{"name":"should call validator & handler","suites":["Test BaseValidator 'middleware' method","Test middleware localEvent"],"updatePoint":{"line":345,"column":39},"line":345,"code":"    it(\"should call validator & handler\", () => {\n      const mw = v.middleware(broker);\n      const mockEvent = {\n        name: \"posts.find\",\n        params: {\n          id: \"number\",\n          name: \"string\"\n        },\n        handler: jest.fn(() => Promise.resolve())\n      };\n      v.compile = jest.fn(() => checkGood); // Create wrapped handler\n\n      const wrapped = mw.localEvent(mockEvent.handler, mockEvent);\n      expect(typeof wrapped).toBe(\"function\");\n      expect(wrapped).not.toBe(mockEvent.handler);\n      expect(v.compile).toHaveBeenCalledTimes(1);\n      expect(v.compile).toHaveBeenCalledWith({\n        id: \"number\",\n        name: \"string\"\n      }); // Create fake context\n\n      const ctx = {\n        params: {\n          id: 5,\n          name: \"John\"\n        },\n        event: mockEvent\n      }; // Call wrapped function\n\n      return wrapped(ctx).then(() => {\n        expect(checkGood).toHaveBeenCalledTimes(1);\n        expect(checkGood).toHaveBeenCalledWith({\n          id: 5,\n          name: \"John\"\n        }, {\n          meta: {\n            params: {\n              id: 5,\n              name: \"John\"\n            },\n            event: mockEvent\n          }\n        });\n        expect(mockEvent.handler).toHaveBeenCalledTimes(1);\n      });\n    });","file":"unit/validators/base.spec.js","skipped":false,"dir":"test"},{"name":"should call validator & throw error & not call handler","suites":["Test BaseValidator 'middleware' method","Test middleware localEvent"],"updatePoint":{"line":391,"column":62},"line":391,"code":"    it(\"should call validator & throw error & not call handler\", () => {\n      const mw = v.middleware(broker);\n      const mockEvent = {\n        name: \"posts.find\",\n        params: {\n          id: \"number\",\n          name: \"string\"\n        },\n        handler: jest.fn(() => Promise.resolve())\n      };\n      v.compile = jest.fn(() => checkBad); // Create wrapped handler\n\n      const wrapped = mw.localEvent(mockEvent.handler, mockEvent);\n      expect(typeof wrapped).toBe(\"function\");\n      expect(wrapped).not.toBe(mockEvent.handler); // Create fake context with wrong params\n\n      const ctx = {\n        params: {\n          id: 5,\n          fullName: \"John\"\n        },\n        event: mockEvent\n      }; // Call wrapped function\n\n      return wrapped(ctx).catch(err => {\n        expect(err).toBeInstanceOf(ValidationError);\n        expect(mockEvent.handler).toHaveBeenCalledTimes(0);\n      });\n    });","file":"unit/validators/base.spec.js","skipped":false,"dir":"test"},{"name":"should call handler because the params is NOT exist","suites":["Test BaseValidator 'middleware' method","Test middleware localEvent"],"updatePoint":{"line":420,"column":59},"line":420,"code":"    it(\"should call handler because the params is NOT exist\", () => {\n      const mockEvent = {\n        name: \"posts.find\",\n        handler: jest.fn()\n      };\n      const wrapped = v.middleware().localEvent(mockEvent.handler, mockEvent);\n      expect(typeof wrapped).toBe(\"function\");\n      expect(wrapped).toBe(mockEvent.handler);\n    });","file":"unit/validators/base.spec.js","skipped":false,"dir":"test"},{"name":"should call validator & handler","suites":["Test BaseValidator 'middleware' method","Test middleware localEvent"],"updatePoint":{"line":440,"column":39},"line":440,"code":"    it(\"should call validator & handler\", () => {\n      const mw = v.middleware(broker);\n      const mockEvent = {\n        name: \"posts.find\",\n        params: {\n          $$async: true,\n          id: \"number\",\n          name: \"string\"\n        },\n        handler: jest.fn(() => Promise.resolve())\n      };\n      v.compile = jest.fn(() => checkGood); // Create wrapped handler\n\n      const wrapped = mw.localEvent(mockEvent.handler, mockEvent);\n      expect(typeof wrapped).toBe(\"function\");\n      expect(wrapped).not.toBe(mockEvent.handler);\n      expect(v.compile).toHaveBeenCalledTimes(1);\n      expect(v.compile).toHaveBeenCalledWith({\n        $$async: true,\n        id: \"number\",\n        name: \"string\"\n      }); // Create fake context\n\n      const ctx = {\n        params: {\n          id: 5,\n          name: \"John\"\n        },\n        event: mockEvent\n      }; // Call wrapped function\n\n      return wrapped(ctx).then(() => {\n        expect(checkGood).toHaveBeenCalledTimes(1);\n        expect(checkGood).toHaveBeenCalledWith({\n          id: 5,\n          name: \"John\"\n        }, {\n          meta: {\n            params: {\n              id: 5,\n              name: \"John\"\n            },\n            event: mockEvent\n          }\n        });\n        expect(mockEvent.handler).toHaveBeenCalledTimes(1);\n      });\n    });","file":"unit/validators/base.spec.js","skipped":false,"dir":"test"},{"name":"should call validator & throw error & not call handler","suites":["Test BaseValidator 'middleware' method","Test middleware localEvent"],"updatePoint":{"line":488,"column":62},"line":488,"code":"    it(\"should call validator & throw error & not call handler\", () => {\n      const mw = v.middleware(broker);\n      const mockEvent = {\n        name: \"posts.find\",\n        params: {\n          id: \"number\",\n          name: \"string\"\n        },\n        handler: jest.fn(() => Promise.resolve())\n      };\n      v.compile = jest.fn(() => checkBad); // Create wrapped handler\n\n      const wrapped = mw.localEvent(mockEvent.handler, mockEvent);\n      expect(typeof wrapped).toBe(\"function\");\n      expect(wrapped).not.toBe(mockEvent.handler); // Create fake context with wrong params\n\n      const ctx = {\n        params: {\n          id: 5,\n          fullName: \"John\"\n        },\n        event: mockEvent\n      }; // Call wrapped function\n\n      return wrapped(ctx).catch(err => {\n        expect(err).toBeInstanceOf(ValidationError);\n        expect(mockEvent.handler).toHaveBeenCalledTimes(0);\n      });\n    });","file":"unit/validators/base.spec.js","skipped":false,"dir":"test"},{"name":"should call validator & handler","suites":["Test BaseValidator 'middleware' method","Test middleware localEvent with custom paramName"],"updatePoint":{"line":528,"column":39},"line":528,"code":"    it(\"should call validator & handler\", () => {\n      const mw = v.middleware(broker);\n      const mockEvent = {\n        name: \"posts.find\",\n        paramValidation: {\n          id: \"number\",\n          name: \"string\"\n        },\n        handler: jest.fn(() => Promise.resolve())\n      };\n      v.compile = jest.fn(() => checkGood); // Create wrapped handler\n\n      const wrapped = mw.localEvent(mockEvent.handler, mockEvent);\n      expect(typeof wrapped).toBe(\"function\");\n      expect(wrapped).not.toBe(mockEvent.handler);\n      expect(v.compile).toHaveBeenCalledTimes(1);\n      expect(v.compile).toHaveBeenCalledWith({\n        id: \"number\",\n        name: \"string\"\n      }); // Create fake context\n\n      const ctx = {\n        params: {\n          id: 5,\n          name: \"John\"\n        },\n        event: mockEvent\n      }; // Call wrapped function\n\n      return wrapped(ctx).then(() => {\n        expect(checkGood).toHaveBeenCalledTimes(1);\n        expect(checkGood).toHaveBeenCalledWith({\n          id: 5,\n          name: \"John\"\n        }, {\n          meta: {\n            params: {\n              id: 5,\n              name: \"John\"\n            },\n            event: mockEvent\n          }\n        });\n        expect(mockEvent.handler).toHaveBeenCalledTimes(1);\n      });\n    });","file":"unit/validators/base.spec.js","skipped":false,"dir":"test"},{"name":"should call handler because the params is NOT exist","suites":["Test BaseValidator 'middleware' method","Test middleware localEvent with custom paramName"],"updatePoint":{"line":574,"column":59},"line":574,"code":"    it(\"should call handler because the params is NOT exist\", () => {\n      const mockEvent = {\n        name: \"posts.find\",\n        params: {\n          id: \"number\",\n          name: \"string\"\n        },\n        handler: jest.fn()\n      };\n      const wrapped = v.middleware().localEvent(mockEvent.handler, mockEvent);\n      expect(typeof wrapped).toBe(\"function\");\n      expect(wrapped).toBe(mockEvent.handler);\n    });","file":"unit/validators/base.spec.js","skipped":false,"dir":"test"},{"name":"test constructor without opts","suites":["Test FastestValidator constructor"],"updatePoint":{"line":19,"column":35},"line":19,"code":"  it(\"test constructor without opts\", () => {\n    const validator = new FastestValidator();\n    expect(validator).toBeDefined();\n    expect(validator.opts).toEqual({\n      paramName: \"params\"\n    });\n  });","file":"unit/validators/fastest.spec.js","skipped":false,"dir":"test"},{"name":"test constructor with opts","suites":["Test FastestValidator constructor"],"updatePoint":{"line":26,"column":32},"line":26,"code":"  it(\"test constructor with opts\", () => {\n    const validator = new FastestValidator({\n      useNewCustomCheckerFunction: true\n    });\n    expect(validator).toBeDefined();\n    expect(validator.opts).toEqual({\n      paramName: \"params\",\n      useNewCustomCheckerFunction: true\n    });\n  });","file":"unit/validators/fastest.spec.js","skipped":false,"dir":"test"},{"name":"should set broker","suites":["Test FastestValidator 'init' method"],"updatePoint":{"line":38,"column":23},"line":38,"code":"  it(\"should set broker\", () => {\n    const broker = new ServiceBroker({\n      logger: false\n    });\n    const validator = new FastestValidator();\n    validator.init(broker);\n    expect(validator.broker).toBe(broker);\n  });","file":"unit/validators/fastest.spec.js","skipped":false,"dir":"test"},{"name":"should call parent compile","suites":["Test Validator.compile"],"updatePoint":{"line":50,"column":32},"line":50,"code":"  it(\"should call parent compile\", () => {\n    v.compile({});\n    expect(v.validator.compile).toHaveBeenCalledTimes(1);\n  });","file":"unit/validators/fastest.spec.js","skipped":false,"dir":"test"},{"name":"should call parent validate","suites":["Test Validator.validate"],"updatePoint":{"line":58,"column":33},"line":58,"code":"  it(\"should call parent validate\", () => {\n    v.validate({}, {});\n    expect(v.validator.validate).toHaveBeenCalledTimes(1);\n  });","file":"unit/validators/fastest.spec.js","skipped":false,"dir":"test"},{"name":"should throw ValidationError if object is NOT valid","suites":["Test Validator.validate"],"updatePoint":{"line":62,"column":57},"line":62,"code":"  it(\"should throw ValidationError if object is NOT valid\", () => {\n    const v = new FastestValidator();\n    v.validator.validate = jest.fn(() => []);\n    expect(() => {\n      v.validate({}, {});\n    }).toThrow(ValidationError);\n  });","file":"unit/validators/fastest.spec.js","skipped":false,"dir":"test"},{"name":"should return one-to-one","suites":["Test Validator.convertSchemaToMoleculer"],"updatePoint":{"line":72,"column":30},"line":72,"code":"  it(\"should return one-to-one\", () => {\n    const obj = {\n      a: 5\n    };\n    expect(v.convertSchemaToMoleculer(obj)).toBe(obj);\n  });","file":"unit/validators/fastest.spec.js","skipped":false,"dir":"test"},{"name":"should validate with meta","suites":["Test Validator with context"],"updatePoint":{"line":115,"column":31},"line":115,"code":"  it(\"should validate with meta\", () => {\n    return broker.call(\"test.withCustomValidation\", {\n      c: \"asd\"\n    }, {\n      meta: {\n        isTest: true\n      }\n    }).catch(protectReject).then(res => {\n      expect(res).toEqual(123);\n    });\n  });","file":"unit/validators/fastest.spec.js","skipped":false,"dir":"test"},{"name":"should throw ValidationError without meta","suites":["Test Validator with context"],"updatePoint":{"line":126,"column":47},"line":126,"code":"  it(\"should throw ValidationError without meta\", () => {\n    return broker.call(\"test.withCustomValidation\", {\n      c: \"asd\"\n    }).then(protectReject).catch(err => {\n      expect(err).toBeInstanceOf(ValidationError);\n      expect(err.data).toEqual([{\n        action: \"test.withCustomValidation\",\n        actual: undefined,\n        field: \"c\",\n        message: \"The 'meta.isTest' field is required.\",\n        nodeID: broker.nodeID,\n        type: \"isTest\"\n      }]);\n    });\n  });","file":"unit/validators/fastest.spec.js","skipped":false,"dir":"test"},{"name":"should resolve default Fastest discoverer","suites":["Test Validators resolver"],"updatePoint":{"line":8,"column":47},"line":8,"code":"  it(\"should resolve default Fastest discoverer\", () => {\n    const discoverer = Validators.resolve();\n    expect(discoverer).toBeInstanceOf(Validators.Fastest);\n  });","file":"unit/validators/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve Fastest reporter from string","suites":["Test Validators resolver"],"updatePoint":{"line":12,"column":49},"line":12,"code":"  it(\"should resolve Fastest reporter from string\", () => {\n    const discoverer = Validators.resolve(\"Fastest\");\n    expect(discoverer).toBeInstanceOf(Validators.Fastest);\n  });","file":"unit/validators/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve Fastest discoverer from obj","suites":["Test Validators resolver"],"updatePoint":{"line":16,"column":48},"line":16,"code":"  it(\"should resolve Fastest discoverer from obj\", () => {\n    const options = {\n      messages: {\n        a: 5\n      }\n    };\n    const discoverer = Validators.resolve({\n      type: \"Fastest\",\n      options\n    });\n    expect(discoverer).toBeInstanceOf(Validators.Fastest);\n    expect(discoverer.opts).toEqual(expect.objectContaining({\n      messages: {\n        a: 5\n      }\n    }));\n  });","file":"unit/validators/index.spec.js","skipped":false,"dir":"test"},{"name":"should resolve Fastest discoverer from instance","suites":["Test Validators resolver"],"updatePoint":{"line":33,"column":53},"line":33,"code":"  it(\"should resolve Fastest discoverer from instance\", () => {\n    const instance = new Validators.Fastest();\n    const discoverer = Validators.resolve(instance);\n    expect(discoverer).toBe(instance);\n  });","file":"unit/validators/index.spec.js","skipped":false,"dir":"test"},{"name":"should throw error if not found by name","suites":["Test Validators resolver"],"updatePoint":{"line":38,"column":45},"line":38,"code":"  it(\"should throw error if not found by name\", () => {\n    expect(() => Validators.resolve(\"xyz\")).toThrowError(BrokerOptionsError);\n    expect(() => Validators.resolve({\n      type: \"xyz\"\n    })).toThrowError(BrokerOptionsError);\n  });","file":"unit/validators/index.spec.js","skipped":false,"dir":"test"},{"name":"should throw error if type if not correct","suites":["Test Validators register"],"updatePoint":{"line":48,"column":47},"line":48,"code":"  it(\"should throw error if type if not correct\", () => {\n    expect(() => {\n      Validators.resolve(\"MyCustom\");\n    }).toThrowError(BrokerOptionsError);\n  });","file":"unit/validators/index.spec.js","skipped":false,"dir":"test"},{"name":"should register new type","suites":["Test Validators register"],"updatePoint":{"line":53,"column":30},"line":53,"code":"  it(\"should register new type\", () => {\n    Validators.register(\"MyCustom\", MyCustom);\n    expect(Validators.MyCustom).toBe(MyCustom);\n  });","file":"unit/validators/index.spec.js","skipped":false,"dir":"test"},{"name":"should find the new type","suites":["Test Validators register"],"updatePoint":{"line":57,"column":30},"line":57,"code":"  it(\"should find the new type\", () => {\n    const validator = Validators.resolve(\"MyCustom\");\n    expect(validator).toBeInstanceOf(MyCustom);\n  });","file":"unit/validators/index.spec.js","skipped":false,"dir":"test"}]}