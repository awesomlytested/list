{"repo":"elastic/kibana","url":"https://github.com/elastic/kibana","branch":"main","configs":[{"package":"kibana","lang":"js","dir":"test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@elastic/safer-lodash-set","lang":"ts","dir":"packages/elastic-safer-lodash-set/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@kbn/tinymath","lang":"js","dir":"packages/kbn-tinymath/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"x-pack","lang":"js","dir":"x-pack/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"apm-scripts","lang":"js","dir":"x-pack/plugins/apm/scripts/test","framework":"mocha","pattern":"**/*.{js,ts}"},{"package":"fleet","lang":"js","dir":"x-pack/plugins/fleet/cypress","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"osquery","lang":"js","dir":"x-pack/plugins/osquery/cypress","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"security_solution","lang":"js","dir":"x-pack/plugins/security_solution/cypress","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"only calls fn when previous call is complete, ignores when filter returns true","suites":[],"updatePoint":{"line":9,"column":82,"index":502},"line":9,"code":"it('only calls fn when previous call is complete, ignores when filter returns true', async () => {\n  const orderOfEvents = [];\n\n  async function foo(arg) {\n    orderOfEvents.push(`called with ${arg}`);\n    await new Promise(resolve => setTimeout(resolve, arg));\n    orderOfEvents.push(`resolved with ${arg}`);\n  }\n\n  const serialized = preventParallelCalls(foo, arg => arg === 0);\n  await Promise.all([serialized(100), serialized(0), serialized(150), serialized(170), serialized(50)]);\n  expect(orderOfEvents).toMatchInlineSnapshot(`\nArray [\n  \"called with 100\",\n  \"called with 0\",\n  \"resolved with 0\",\n  \"resolved with 100\",\n  \"called with 150\",\n  \"resolved with 150\",\n  \"called with 170\",\n  \"resolved with 170\",\n  \"called with 50\",\n  \"resolved with 50\",\n]\n`);\n});","file":"functional/services/remote/prevent_parallel_calls.test.js","skipped":false,"dir":"test"},{"name":"numbers","suites":["Abs"],"updatePoint":{"line":13,"column":13,"index":447},"line":13,"code":"  it('numbers', () => {\n    expect(abs(-10)).toEqual(10);\n    expect(abs(10)).toEqual(10);\n  });","file":"functions/abs.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Abs"],"updatePoint":{"line":17,"column":12,"index":543},"line":17,"code":"  it('arrays', () => {\n    expect(abs([-1])).toEqual([1]);\n    expect(abs([-10, -20, -30, -40])).toEqual([10, 20, 30, 40]);\n    expect(abs([-13, 30, -90, 200])).toEqual([13, 30, 90, 200]);\n  });","file":"functions/abs.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Add"],"updatePoint":{"line":13,"column":13,"index":447},"line":13,"code":"  it('numbers', () => {\n    expect(add(1)).toEqual(1);\n    expect(add(10, 2, 5, 8)).toEqual(25);\n    expect(add(0.1, 0.2, 0.4, 0.3)).toEqual(0.1 + 0.2 + 0.3 + 0.4);\n  });","file":"functions/add.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays & numbers","suites":["Add"],"updatePoint":{"line":18,"column":22,"index":627},"line":18,"code":"  it('arrays & numbers', () => {\n    expect(add([10, 20, 30, 40], 10, 20, 30)).toEqual([70, 80, 90, 100]);\n    expect(add(10, [10, 20, 30, 40], [1, 2, 3, 4], 22)).toEqual([43, 54, 65, 76]);\n  });","file":"functions/add.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Add"],"updatePoint":{"line":22,"column":12,"index":813},"line":22,"code":"  it('arrays', () => {\n    expect(add([1, 2, 3, 4])).toEqual(10);\n    expect(add([1, 2, 3, 4], [1, 2, 5, 10])).toEqual([2, 4, 8, 14]);\n    expect(add([1, 2, 3, 4], [1, 2, 5, 10], [10, 20, 30, 40])).toEqual([12, 24, 38, 54]);\n    expect(add([11, 48, 60, 72], [1, 2, 3, 4])).toEqual([12, 50, 63, 76]);\n  });","file":"functions/add.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array length mismatch","suites":["Add"],"updatePoint":{"line":28,"column":27,"index":1134},"line":28,"code":"  it('array length mismatch', () => {\n    expect(() => add([1, 2], [3])).toThrow('Array length mismatch');\n  });","file":"functions/add.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Cbrt"],"updatePoint":{"line":13,"column":13,"index":450},"line":13,"code":"  it('numbers', () => {\n    expect(cbrt(27)).toEqual(3);\n    expect(cbrt(-1)).toEqual(-1);\n    expect(cbrt(94)).toEqual(4.546835943776344);\n  });","file":"functions/cbrt.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Cbrt"],"updatePoint":{"line":18,"column":12,"index":595},"line":18,"code":"  it('arrays', () => {\n    expect(cbrt([27, 64, 125])).toEqual([3, 4, 5]);\n    expect(cbrt([1, 8, 1000])).toEqual([1, 2, 10]);\n  });","file":"functions/cbrt.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Ceil"],"updatePoint":{"line":13,"column":13,"index":450},"line":13,"code":"  it('numbers', () => {\n    expect(ceil(-10.5)).toEqual(-10);\n    expect(ceil(-10.1)).toEqual(-10);\n    expect(ceil(10.9)).toEqual(11);\n  });","file":"functions/ceil.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Ceil"],"updatePoint":{"line":18,"column":12,"index":591},"line":18,"code":"  it('arrays', () => {\n    expect(ceil([-10.5, -20.9, -30.1, -40.2])).toEqual([-10, -20, -30, -40]);\n    expect(ceil([2.9, 5.1, 3.5, 4.3])).toEqual([3, 6, 4, 5]);\n  });","file":"functions/ceil.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Clamp"],"updatePoint":{"line":13,"column":13,"index":453},"line":13,"code":"  it('numbers', () => {\n    expect(clamp(10, 5, 8)).toEqual(8);\n    expect(clamp(1, 2, 3)).toEqual(2);\n    expect(clamp(0.5, 0.2, 0.4)).toEqual(0.4);\n    expect(clamp(3.58, 0, 1)).toEqual(1);\n    expect(clamp(-0.48, 0, 1)).toEqual(0);\n    expect(clamp(1.38, -1, 0)).toEqual(0);\n  });","file":"functions/clamp.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays & numbers","suites":["Clamp"],"updatePoint":{"line":21,"column":22,"index":746},"line":21,"code":"  it('arrays & numbers', () => {\n    expect(clamp([10, 20, 30, 40], 15, 25)).toEqual([15, 20, 25, 25]);\n    expect(clamp(10, [15, 2, 4, 20], 25)).toEqual([15, 10, 10, 20]);\n    expect(clamp(5, 10, [20, 30, 40, 50])).toEqual([10, 10, 10, 10]);\n    expect(clamp(35, 10, [20, 30, 40, 50])).toEqual([20, 30, 35, 35]);\n    expect(clamp([1, 9], 3, [4, 5])).toEqual([3, 5]);\n  });","file":"functions/clamp.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Clamp"],"updatePoint":{"line":28,"column":12,"index":1110},"line":28,"code":"  it('arrays', () => {\n    expect(clamp([6, 28, 32, 10], [11, 2, 5, 10], [20, 21, 22, 23])).toEqual([11, 21, 22, 10]);\n  });","file":"functions/clamp.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"errors","suites":["Clamp"],"updatePoint":{"line":31,"column":12,"index":1235},"line":31,"code":"  it('errors', () => {\n    expect(() => clamp(1, 4, 3)).toThrow('Min must be less than max');\n    expect(() => clamp([1, 2], [3], 3)).toThrow('Array length mismatch');\n    expect(() => clamp([1, 2], [3], 3)).toThrow('Array length mismatch');\n    expect(() => clamp(10, 20, null)).toThrow(\"Missing maximum value. You may want to use the 'min' function instead\");\n    expect(() => clamp([10, 20, 30, 40], 15, null)).toThrow(\"Missing maximum value. You may want to use the 'min' function instead\");\n    expect(() => clamp(10, null, 30)).toThrow(\"Missing minimum value. You may want to use the 'max' function instead\");\n    expect(() => clamp([11, 28, 60, 10], null, [1, 48, 3, -17])).toThrow(\"Missing minimum value. You may want to use the 'max' function instead\");\n  });","file":"functions/clamp.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Cosine"],"updatePoint":{"line":13,"column":13,"index":450},"line":13,"code":"  it('numbers', () => {\n    expect(cos(0)).toEqual(1);\n    expect(cos(1.5707963267948966)).toEqual(6.123233995736766e-17);\n  });","file":"functions/cos.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Cosine"],"updatePoint":{"line":17,"column":12,"index":578},"line":17,"code":"  it('arrays', () => {\n    expect(cos([0, 1.5707963267948966])).toEqual([1, 6.123233995736766e-17]);\n  });","file":"functions/cos.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Cube"],"updatePoint":{"line":13,"column":13,"index":450},"line":13,"code":"  it('numbers', () => {\n    expect(cube(3)).toEqual(27);\n    expect(cube(-1)).toEqual(-1);\n  });","file":"functions/cube.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Cube"],"updatePoint":{"line":17,"column":12,"index":546},"line":17,"code":"  it('arrays', () => {\n    expect(cube([3, 4, 5])).toEqual([27, 64, 125]);\n    expect(cube([1, 2, 10])).toEqual([1, 8, 1000]);\n  });","file":"functions/cube.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Degrees to Radians"],"updatePoint":{"line":13,"column":13,"index":472},"line":13,"code":"  it('numbers', () => {\n    expect(degtorad(0)).toEqual(0);\n    expect(degtorad(90)).toEqual(1.5707963267948966);\n  });","file":"functions/degtorad.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Degrees to Radians"],"updatePoint":{"line":17,"column":12,"index":591},"line":17,"code":"  it('arrays', () => {\n    expect(degtorad([0, 90, 180, 360])).toEqual([0, 1.5707963267948966, 3.141592653589793, 6.283185307179586]);\n  });","file":"functions/degtorad.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"number, number","suites":["Divide"],"updatePoint":{"line":13,"column":20,"index":463},"line":13,"code":"  it('number, number', () => {\n    expect(divide(10, 2)).toEqual(5);\n    expect(divide(0.1, 0.02)).toEqual(0.1 / 0.02);\n  });","file":"functions/divide.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array, number","suites":["Divide"],"updatePoint":{"line":17,"column":19,"index":588},"line":17,"code":"  it('array, number', () => {\n    expect(divide([10, 20, 30, 40], 10)).toEqual([1, 2, 3, 4]);\n  });","file":"functions/divide.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"number, array","suites":["Divide"],"updatePoint":{"line":20,"column":19,"index":688},"line":20,"code":"  it('number, array', () => {\n    expect(divide(10, [1, 2, 5, 10])).toEqual([10, 5, 2, 1]);\n  });","file":"functions/divide.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array, array","suites":["Divide"],"updatePoint":{"line":23,"column":18,"index":785},"line":23,"code":"  it('array, array', () => {\n    expect(divide([11, 48, 60, 72], [1, 2, 3, 4])).toEqual([11, 24, 20, 18]);\n  });","file":"functions/divide.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array length mismatch","suites":["Divide"],"updatePoint":{"line":26,"column":27,"index":907},"line":26,"code":"  it('array length mismatch', () => {\n    expect(() => divide([1, 2], [3])).toThrow('Array length mismatch');\n  });","file":"functions/divide.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Exp"],"updatePoint":{"line":13,"column":13,"index":447},"line":13,"code":"  it('numbers', () => {\n    expect(exp(3)).toEqual(Math.exp(3));\n    expect(exp(0)).toEqual(Math.exp(0));\n    expect(exp(5)).toEqual(Math.exp(5));\n  });","file":"functions/exp.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Exp"],"updatePoint":{"line":18,"column":12,"index":599},"line":18,"code":"  it('arrays', () => {\n    expect(exp([3, 4, 5])).toEqual([Math.exp(3), Math.exp(4), Math.exp(5)]);\n    expect(exp([1, 2, 10])).toEqual([Math.exp(1), Math.exp(2), Math.exp(10)]);\n    expect(exp([10])).toEqual([Math.exp(10)]);\n  });","file":"functions/exp.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["First"],"updatePoint":{"line":13,"column":13,"index":453},"line":13,"code":"  it('numbers', () => {\n    expect(first(-10)).toEqual(-10);\n    expect(first(10)).toEqual(10);\n  });","file":"functions/first.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["First"],"updatePoint":{"line":17,"column":12,"index":554},"line":17,"code":"  it('arrays', () => {\n    expect(first([])).toEqual(undefined);\n    expect(first([-1])).toEqual(-1);\n    expect(first([-10, -20, -30, -40])).toEqual(-10);\n    expect(first([-13, 30, -90, 200])).toEqual(-13);\n  });","file":"functions/first.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"skips number validation","suites":["First"],"updatePoint":{"line":23,"column":29,"index":786},"line":23,"code":"  it('skips number validation', () => {\n    expect(first).toHaveProperty('skipNumberValidation', true);\n  });","file":"functions/first.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Fix"],"updatePoint":{"line":13,"column":13,"index":447},"line":13,"code":"  it('numbers', () => {\n    expect(fix(-10.5)).toEqual(-10);\n    expect(fix(-10.1)).toEqual(-10);\n    expect(fix(10.9)).toEqual(10);\n  });","file":"functions/fix.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Fix"],"updatePoint":{"line":18,"column":12,"index":585},"line":18,"code":"  it('arrays', () => {\n    expect(fix([-10.5, -20.9, -30.1, -40.2])).toEqual([-10, -20, -30, -40]);\n    expect(fix([2.9, 5.1, 3.5, 4.3])).toEqual([2, 5, 3, 4]);\n  });","file":"functions/fix.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Floor"],"updatePoint":{"line":13,"column":13,"index":453},"line":13,"code":"  it('numbers', () => {\n    expect(floor(-10.5)).toEqual(-11);\n    expect(floor(-10.1)).toEqual(-11);\n    expect(floor(10.9)).toEqual(10);\n  });","file":"functions/floor.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Floor"],"updatePoint":{"line":18,"column":12,"index":597},"line":18,"code":"  it('arrays', () => {\n    expect(floor([-10.5, -20.9, -30.1, -40.2])).toEqual([-11, -21, -31, -41]);\n    expect(floor([2.9, 5.1, 3.5, 4.3])).toEqual([2, 5, 3, 4]);\n  });","file":"functions/floor.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Last"],"updatePoint":{"line":13,"column":13,"index":450},"line":13,"code":"  it('numbers', () => {\n    expect(last(-10)).toEqual(-10);\n    expect(last(10)).toEqual(10);\n  });","file":"functions/last.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Last"],"updatePoint":{"line":17,"column":12,"index":549},"line":17,"code":"  it('arrays', () => {\n    expect(last([])).toEqual(undefined);\n    expect(last([-1])).toEqual(-1);\n    expect(last([-10, -20, -30, -40])).toEqual(-40);\n    expect(last([-13, 30, -90, 200])).toEqual(200);\n  });","file":"functions/last.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"skips number validation","suites":["Last"],"updatePoint":{"line":23,"column":29,"index":777},"line":23,"code":"  it('skips number validation', () => {\n    expect(last).toHaveProperty('skipNumberValidation', true);\n  });","file":"functions/last.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Log"],"updatePoint":{"line":13,"column":13,"index":447},"line":13,"code":"  it('numbers', () => {\n    expect(log(1)).toEqual(Math.log(1));\n    expect(log(3, 2)).toEqual(Math.log(3) / Math.log(2));\n    expect(log(11, 3)).toEqual(Math.log(11) / Math.log(3));\n    expect(log(42, 5)).toEqual(2.322344707681546);\n  });","file":"functions/log.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Log"],"updatePoint":{"line":19,"column":12,"index":686},"line":19,"code":"  it('arrays', () => {\n    expect(log([3, 4, 5], 3)).toEqual([Math.log(3) / Math.log(3), Math.log(4) / Math.log(3), Math.log(5) / Math.log(3)]);\n    expect(log([1, 2, 10], 10)).toEqual([Math.log(1) / Math.log(10), Math.log(2) / Math.log(10), Math.log(10) / Math.log(10)]);\n  });","file":"functions/log.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"number less than 1","suites":["Log"],"updatePoint":{"line":23,"column":24,"index":977},"line":23,"code":"  it('number less than 1', () => {\n    expect(() => log(-1)).toThrow('Must be greater than 0');\n  });","file":"functions/log.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"base out of range","suites":["Log"],"updatePoint":{"line":26,"column":23,"index":1078},"line":26,"code":"  it('base out of range', () => {\n    expect(() => log(1, -1)).toThrow('Base out of range');\n  });","file":"functions/log.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Log10"],"updatePoint":{"line":13,"column":13,"index":453},"line":13,"code":"  it('numbers', () => {\n    expect(log10(1)).toEqual(Math.log(1) / Math.log(10));\n    expect(log10(3)).toEqual(Math.log(3) / Math.log(10));\n    expect(log10(11)).toEqual(Math.log(11) / Math.log(10));\n    expect(log10(80)).toEqual(1.9030899869919433);\n  });","file":"functions/log10.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Log10"],"updatePoint":{"line":19,"column":12,"index":709},"line":19,"code":"  it('arrays', () => {\n    expect(log10([3, 4, 5], 3)).toEqual([Math.log(3) / Math.log(10), Math.log(4) / Math.log(10), Math.log(5) / Math.log(10)]);\n    expect(log10([1, 2, 10], 10)).toEqual([Math.log(1) / Math.log(10), Math.log(2) / Math.log(10), Math.log(10) / Math.log(10)]);\n  });","file":"functions/log10.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"number less than 1","suites":["Log10"],"updatePoint":{"line":23,"column":24,"index":1007},"line":23,"code":"  it('number less than 1', () => {\n    expect(() => log10(-1)).toThrow('Must be greater than 0');\n  });","file":"functions/log10.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Max"],"updatePoint":{"line":13,"column":13,"index":447},"line":13,"code":"  it('numbers', () => {\n    expect(max(1)).toEqual(1);\n    expect(max(10, 2, 5, 8)).toEqual(10);\n    expect(max(0.1, 0.2, 0.4, 0.3)).toEqual(0.4);\n  });","file":"functions/max.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays & numbers","suites":["Max"],"updatePoint":{"line":18,"column":22,"index":609},"line":18,"code":"  it('arrays & numbers', () => {\n    expect(max([88, 20, 30, 40], 60, [30, 10, 70, 90])).toEqual([88, 60, 70, 90]);\n    expect(max(10, [10, 20, 30, 40], [1, 2, 3, 4], 22)).toEqual([22, 22, 30, 40]);\n  });","file":"functions/max.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Max"],"updatePoint":{"line":22,"column":12,"index":804},"line":22,"code":"  it('arrays', () => {\n    expect(max([1, 2, 3, 4])).toEqual(4);\n    expect(max([6, 2, 3, 10], [11, 2, 5, 10])).toEqual([11, 2, 5, 10]);\n    expect(max([30, 55, 9, 4], [72, 24, 48, 10], [10, 20, 30, 40])).toEqual([72, 55, 48, 40]);\n    expect(max([11, 28, 60, 10], [1, 48, 3, -17])).toEqual([11, 48, 60, 10]);\n  });","file":"functions/max.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array length mismatch","suites":["Max"],"updatePoint":{"line":28,"column":27,"index":1135},"line":28,"code":"  it('array length mismatch', () => {\n    expect(() => max([1, 2], [3])).toThrow('Array length mismatch');\n  });","file":"functions/max.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Mean"],"updatePoint":{"line":13,"column":13,"index":450},"line":13,"code":"  it('numbers', () => {\n    expect(mean(1)).toEqual(1);\n    expect(mean(10, 2, 5, 8)).toEqual(25 / 4);\n    expect(mean(0.1, 0.2, 0.4, 0.3)).toEqual((0.1 + 0.2 + 0.3 + 0.4) / 4);\n  });","file":"functions/mean.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays & numbers","suites":["Mean"],"updatePoint":{"line":18,"column":22,"index":643},"line":18,"code":"  it('arrays & numbers', () => {\n    expect(mean([10, 20, 30, 40], 10, 20, 30)).toEqual([70 / 4, 80 / 4, 90 / 4, 100 / 4]);\n    expect(mean(10, [10, 20, 30, 40], [1, 2, 3, 4], 22)).toEqual([43 / 4, 54 / 4, 65 / 4, 76 / 4]);\n  });","file":"functions/mean.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Mean"],"updatePoint":{"line":22,"column":12,"index":863},"line":22,"code":"  it('arrays', () => {\n    expect(mean([1, 2, 3, 4])).toEqual(10 / 4);\n    expect(mean([1, 2, 3, 4], [1, 2, 5, 10])).toEqual([2 / 2, 4 / 2, 8 / 2, 14 / 2]);\n    expect(mean([1, 2, 3, 4], [1, 2, 5, 10], [10, 20, 30, 40])).toEqual([12 / 3, 24 / 3, 38 / 3, 54 / 3]);\n    expect(mean([11, 48, 60, 72], [1, 2, 3, 4])).toEqual([12 / 2, 50 / 2, 63 / 2, 76 / 2]);\n  });","file":"functions/mean.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array length mismatch","suites":["Mean"],"updatePoint":{"line":28,"column":27,"index":1240},"line":28,"code":"  it('array length mismatch', () => {\n    expect(() => mean([1, 2], [3])).toThrow();\n  });","file":"functions/mean.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Median"],"updatePoint":{"line":13,"column":13,"index":456},"line":13,"code":"  it('numbers', () => {\n    expect(median(1)).toEqual(1);\n    expect(median(10, 2, 5, 8)).toEqual((8 + 5) / 2);\n    expect(median(0.1, 0.2, 0.4, 0.3)).toEqual((0.2 + 0.3) / 2);\n  });","file":"functions/median.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays & numbers","suites":["Median"],"updatePoint":{"line":18,"column":22,"index":648},"line":18,"code":"  it('arrays & numbers', () => {\n    expect(median([10, 20, 30, 40], 10, 20, 30)).toEqual([15, 20, 25, 25]);\n    expect(median(10, [10, 20, 30, 40], [1, 2, 3, 4], 22)).toEqual([10, 15, 16, 16]);\n  });","file":"functions/median.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Median"],"updatePoint":{"line":22,"column":12,"index":839},"line":22,"code":"  it('arrays', () => {\n    expect(median([1, 2, 3, 4], [1, 2, 5, 10])).toEqual([1, 2, 4, 7]);\n    expect(median([1, 2, 3, 4], [1, 2, 5, 10], [10, 20, 30, 40])).toEqual([1, 2, 5, 10]);\n    expect(median([11, 48, 60, 72], [1, 2, 3, 4])).toEqual([12 / 2, 50 / 2, 63 / 2, 76 / 2]);\n  });","file":"functions/median.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array length mismatch","suites":["Median"],"updatePoint":{"line":27,"column":27,"index":1138},"line":27,"code":"  it('array length mismatch', () => {\n    expect(() => median([1, 2], [3])).toThrow();\n  });","file":"functions/median.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Min"],"updatePoint":{"line":13,"column":13,"index":447},"line":13,"code":"  it('numbers', () => {\n    expect(min(1)).toEqual(1);\n    expect(min(10, 2, 5, 8)).toEqual(2);\n    expect(min(0.1, 0.2, 0.4, 0.3)).toEqual(0.1);\n  });","file":"functions/min.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays & numbers","suites":["Min"],"updatePoint":{"line":18,"column":22,"index":608},"line":18,"code":"  it('arrays & numbers', () => {\n    expect(min([88, 20, 30, 100], 60, [30, 10, 70, 90])).toEqual([30, 10, 30, 60]);\n    expect(min([50, 20, 3, 40], 10, [13, 2, 34, 4], 22)).toEqual([10, 2, 3, 4]);\n    expect(min(10, [50, 20, 3, 40], [13, 2, 34, 4], 22)).toEqual([10, 2, 3, 4]);\n  });","file":"functions/min.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Min"],"updatePoint":{"line":23,"column":12,"index":883},"line":23,"code":"  it('arrays', () => {\n    expect(min([1, 2, 3, 4])).toEqual(1);\n    expect(min([6, 2, 30, 10], [11, 2, 5, 15])).toEqual([6, 2, 5, 10]);\n    expect(min([30, 55, 9, 4], [72, 24, 48, 10], [10, 20, 30, 40])).toEqual([10, 20, 9, 4]);\n    expect(min([11, 28, 60, 10], [1, 48, 3, -17])).toEqual([1, 28, 3, -17]);\n  });","file":"functions/min.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array length mismatch","suites":["Min"],"updatePoint":{"line":29,"column":27,"index":1211},"line":29,"code":"  it('array length mismatch', () => {\n    expect(() => min([1, 2], [3])).toThrow('Array length mismatch');\n  });","file":"functions/min.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"number, number","suites":["Mod"],"updatePoint":{"line":13,"column":20,"index":454},"line":13,"code":"  it('number, number', () => {\n    expect(mod(13, 8)).toEqual(5);\n    expect(mod(0.1, 0.02)).toEqual(0.1 % 0.02);\n  });","file":"functions/mod.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array, number","suites":["Mod"],"updatePoint":{"line":17,"column":19,"index":573},"line":17,"code":"  it('array, number', () => {\n    expect(mod([13, 26, 34, 42], 10)).toEqual([3, 6, 4, 2]);\n  });","file":"functions/mod.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"number, array","suites":["Mod"],"updatePoint":{"line":20,"column":19,"index":670},"line":20,"code":"  it('number, array', () => {\n    expect(mod(10, [3, 7, 2, 4])).toEqual([1, 3, 0, 2]);\n  });","file":"functions/mod.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array, array","suites":["Mod"],"updatePoint":{"line":23,"column":18,"index":762},"line":23,"code":"  it('array, array', () => {\n    expect(mod([11, 48, 60, 72], [4, 13, 9, 5])).toEqual([3, 9, 6, 2]);\n  });","file":"functions/mod.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array length mismatch","suites":["Mod"],"updatePoint":{"line":26,"column":27,"index":878},"line":26,"code":"  it('array length mismatch', () => {\n    expect(() => mod([1, 2], [3])).toThrow('Array length mismatch');\n  });","file":"functions/mod.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Mode"],"updatePoint":{"line":13,"column":13,"index":450},"line":13,"code":"  it('numbers', () => {\n    expect(mode(1)).toEqual(1);\n    expect(mode(10, 2, 5, 8)).toEqual([2, 5, 8, 10]);\n    expect(mode(0.1, 0.2, 0.4, 0.3)).toEqual([0.1, 0.2, 0.3, 0.4]);\n    expect(mode(1, 1, 2, 3, 1, 4, 3, 2, 4)).toEqual([1]);\n  });","file":"functions/mode.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays & numbers","suites":["Mode"],"updatePoint":{"line":19,"column":22,"index":701},"line":19,"code":"  it('arrays & numbers', () => {\n    expect(mode([10, 20, 30, 40], 10, 20, 30)).toEqual([[10], [20], [30], [10, 20, 30, 40]]);\n    expect(mode([1, 2, 3, 4], 2, 3, [3, 2, 4, 3])).toEqual([[3], [2], [3], [3]]);\n  });","file":"functions/mode.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Mode"],"updatePoint":{"line":23,"column":12,"index":906},"line":23,"code":"  it('arrays', () => {\n    expect(mode([1, 2, 3, 4], [1, 2, 5, 10])).toEqual([[1], [2], [3, 5], [4, 10]]);\n    expect(mode([1, 2, 3, 4], [1, 2, 1, 2], [2, 3, 2, 3], [4, 3, 2, 3])).toEqual([[1], [2, 3], [2], [3]]);\n  });","file":"functions/mode.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array length mismatch","suites":["Mode"],"updatePoint":{"line":27,"column":27,"index":1141},"line":27,"code":"  it('array length mismatch', () => {\n    expect(() => mode([1, 2], [3])).toThrow();\n  });","file":"functions/mode.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"number, number","suites":["Multiply"],"updatePoint":{"line":13,"column":20,"index":469},"line":13,"code":"  it('number, number', () => {\n    expect(multiply(10, 2)).toEqual(20);\n    expect(multiply(0.1, 0.2)).toEqual(0.1 * 0.2);\n  });","file":"functions/multiply.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array, number","suites":["Multiply"],"updatePoint":{"line":17,"column":19,"index":597},"line":17,"code":"  it('array, number', () => {\n    expect(multiply([10, 20, 30, 40], 10)).toEqual([100, 200, 300, 400]);\n  });","file":"functions/multiply.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"number, array","suites":["Multiply"],"updatePoint":{"line":20,"column":19,"index":707},"line":20,"code":"  it('number, array', () => {\n    expect(multiply(10, [1, 2, 5, 10])).toEqual([10, 20, 50, 100]);\n  });","file":"functions/multiply.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array, array","suites":["Multiply"],"updatePoint":{"line":23,"column":18,"index":810},"line":23,"code":"  it('array, array', () => {\n    expect(multiply([11, 48, 60, 72], [1, 2, 3, 4])).toEqual([11, 96, 180, 288]);\n  });","file":"functions/multiply.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array length mismatch","suites":["Multiply"],"updatePoint":{"line":26,"column":27,"index":936},"line":26,"code":"  it('array length mismatch', () => {\n    expect(() => multiply([1, 2], [3])).toThrow('Array length mismatch');\n  });","file":"functions/multiply.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"constant","suites":["PI"],"updatePoint":{"line":13,"column":14,"index":445},"line":13,"code":"  it('constant', () => {\n    expect(pi()).toEqual(Math.PI);\n  });","file":"functions/pi.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Pow"],"updatePoint":{"line":13,"column":13,"index":447},"line":13,"code":"  it('numbers', () => {\n    expect(pow(3, 2)).toEqual(9);\n    expect(pow(-1, -1)).toEqual(-1);\n    expect(pow(5, 0)).toEqual(1);\n  });","file":"functions/pow.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Pow"],"updatePoint":{"line":18,"column":12,"index":581},"line":18,"code":"  it('arrays', () => {\n    expect(pow([3, 4, 5], 3)).toEqual([Math.pow(3, 3), Math.pow(4, 3), Math.pow(5, 3)]);\n    expect(pow([1, 2, 10], 10)).toEqual([Math.pow(1, 10), Math.pow(2, 10), Math.pow(10, 10)]);\n  });","file":"functions/pow.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"missing exponent","suites":["Pow"],"updatePoint":{"line":22,"column":22,"index":804},"line":22,"code":"  it('missing exponent', () => {\n    expect(() => pow(1)).toThrow('Missing exponent');\n  });","file":"functions/pow.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Radians to Degrees"],"updatePoint":{"line":13,"column":13,"index":472},"line":13,"code":"  it('numbers', () => {\n    expect(radtodeg(0)).toEqual(0);\n    expect(radtodeg(1.5707963267948966)).toEqual(90);\n  });","file":"functions/radtodeg.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Radians to Degrees"],"updatePoint":{"line":17,"column":12,"index":591},"line":17,"code":"  it('arrays', () => {\n    expect(radtodeg([0, 1.5707963267948966, 3.141592653589793, 6.283185307179586])).toEqual([0, 90, 180, 360]);\n  });","file":"functions/radtodeg.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Random"],"updatePoint":{"line":13,"column":13,"index":456},"line":13,"code":"  it('numbers', () => {\n    const random1 = random();\n    expect(random1).toBeGreaterThanOrEqual(0);\n    expect(random1).toBeLessThan(1);\n    expect(random(0)).toEqual(0);\n    const random3 = random(3);\n    expect(random3).toBeGreaterThanOrEqual(0);\n    expect(random3).toBeLessThan(3);\n    const random100 = random(-100, 100);\n    expect(random100).toBeGreaterThanOrEqual(-100);\n    expect(random100).toBeLessThan(100);\n    expect(random(1, 1)).toEqual(1);\n    expect(random(100, 100)).toEqual(100);\n  });","file":"functions/random.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"min greater than max","suites":["Random"],"updatePoint":{"line":27,"column":26,"index":976},"line":27,"code":"  it('min greater than max', () => {\n    expect(() => random(-1)).toThrow('Min is greater than max');\n    expect(() => random(3, 1)).toThrow('Min is greater than max');\n  });","file":"functions/random.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Range"],"updatePoint":{"line":13,"column":13,"index":453},"line":13,"code":"  it('numbers', () => {\n    expect(range(1)).toEqual(0);\n    expect(range(10, 2, 5, 8)).toEqual(8);\n    expect(range(0.1, 0.2, 0.4, 0.3)).toEqual(0.4 - 0.1);\n  });","file":"functions/range.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays & numbers","suites":["Range"],"updatePoint":{"line":18,"column":22,"index":626},"line":18,"code":"  it('arrays & numbers', () => {\n    expect(range([88, 20, 30, 40], 60, [30, 10, 70, 90])).toEqual([58, 50, 40, 50]);\n    expect(range(10, [10, 20, 30, 40], [1, 2, 3, 4], 22)).toEqual([21, 20, 27, 36]);\n  });","file":"functions/range.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Range"],"updatePoint":{"line":22,"column":12,"index":825},"line":22,"code":"  it('arrays', () => {\n    expect(range([1, 2, 3, 4])).toEqual(3);\n    expect(range([6, 2, 3, 10], [11, 2, 5, 10])).toEqual([5, 0, 2, 0]);\n    expect(range([30, 55, 9, 4], [72, 24, 48, 10], [10, 20, 30, 40])).toEqual([62, 35, 39, 36]);\n    expect(range([11, 28, 60, 10], [1, 48, 3, -17])).toEqual([10, 20, 57, 27]);\n  });","file":"functions/range.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array length mismatch","suites":["Range"],"updatePoint":{"line":28,"column":27,"index":1162},"line":28,"code":"  it('array length mismatch', () => {\n    expect(() => range([1, 2], [3])).toThrow();\n  });","file":"functions/range.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Round"],"updatePoint":{"line":13,"column":13,"index":453},"line":13,"code":"  it('numbers', () => {\n    expect(round(-10.51)).toEqual(-11);\n    expect(round(-10.1, 2)).toEqual(-10.1);\n    expect(round(10.93745987, 4)).toEqual(10.9375);\n  });","file":"functions/round.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Round"],"updatePoint":{"line":18,"column":12,"index":618},"line":18,"code":"  it('arrays', () => {\n    expect(round([-10.51, -20.9, -30.1, -40.2])).toEqual([-11, -21, -30, -40]);\n    expect(round([2.9234, 5.1234, 3.5234, 4.49234324], 2)).toEqual([2.92, 5.12, 3.52, 4.49]);\n  });","file":"functions/round.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Sine"],"updatePoint":{"line":13,"column":13,"index":448},"line":13,"code":"  it('numbers', () => {\n    expect(sin(0)).toEqual(0);\n    expect(sin(1.5707963267948966)).toEqual(1);\n  });","file":"functions/sin.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Sine"],"updatePoint":{"line":17,"column":12,"index":556},"line":17,"code":"  it('arrays', () => {\n    expect(sin([0, 1.5707963267948966])).toEqual([0, 1]);\n  });","file":"functions/sin.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array","suites":["Size (also Count)"],"updatePoint":{"line":13,"column":11,"index":461},"line":13,"code":"  it('array', () => {\n    expect(size([])).toEqual(0);\n    expect(size([10, 20, 30, 40])).toEqual(4);\n  });","file":"functions/size.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"not an array","suites":["Size (also Count)"],"updatePoint":{"line":17,"column":18,"index":576},"line":17,"code":"  it('not an array', () => {\n    expect(() => size(null)).toThrow('Must pass an array');\n    expect(() => size(undefined)).toThrow('Must pass an array');\n    expect(() => size('string')).toThrow('Must pass an array');\n    expect(() => size(10)).toThrow('Must pass an array');\n    expect(() => size(true)).toThrow('Must pass an array');\n    expect(() => size({})).toThrow('Must pass an array');\n    expect(() => size(function () {})).toThrow('Must pass an array');\n  });","file":"functions/size.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"skips number validation","suites":["Size (also Count)"],"updatePoint":{"line":26,"column":29,"index":1057},"line":26,"code":"  it('skips number validation', () => {\n    expect(size).toHaveProperty('skipNumberValidation', true);\n  });","file":"functions/size.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Sqrt"],"updatePoint":{"line":13,"column":13,"index":450},"line":13,"code":"  it('numbers', () => {\n    expect(sqrt(9)).toEqual(3);\n    expect(sqrt(0)).toEqual(0);\n    expect(sqrt(30)).toEqual(5.477225575051661);\n  });","file":"functions/sqrt.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Sqrt"],"updatePoint":{"line":18,"column":12,"index":592},"line":18,"code":"  it('arrays', () => {\n    expect(sqrt([49, 64, 81])).toEqual([7, 8, 9]);\n    expect(sqrt([1, 4, 100])).toEqual([1, 2, 10]);\n  });","file":"functions/sqrt.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"Invalid negative number","suites":["Sqrt"],"updatePoint":{"line":22,"column":29,"index":740},"line":22,"code":"  it('Invalid negative number', () => {\n    expect(() => sqrt(-1)).toThrow('Unable find the square root of a negative number');\n  });","file":"functions/sqrt.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Square"],"updatePoint":{"line":13,"column":13,"index":456},"line":13,"code":"  it('numbers', () => {\n    expect(square(3)).toEqual(9);\n    expect(square(-1)).toEqual(1);\n  });","file":"functions/square.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Square"],"updatePoint":{"line":17,"column":12,"index":554},"line":17,"code":"  it('arrays', () => {\n    expect(square([3, 4, 5])).toEqual([9, 16, 25]);\n    expect(square([1, 2, 10])).toEqual([1, 4, 100]);\n  });","file":"functions/square.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"number, number","suites":["Subtract"],"updatePoint":{"line":13,"column":20,"index":469},"line":13,"code":"  it('number, number', () => {\n    expect(subtract(10, 2)).toEqual(8);\n    expect(subtract(0.1, 0.2)).toEqual(0.1 - 0.2);\n  });","file":"functions/subtract.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array, number","suites":["Subtract"],"updatePoint":{"line":17,"column":19,"index":596},"line":17,"code":"  it('array, number', () => {\n    expect(subtract([10, 20, 30, 40], 10)).toEqual([0, 10, 20, 30]);\n  });","file":"functions/subtract.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"number, array","suites":["Subtract"],"updatePoint":{"line":20,"column":19,"index":701},"line":20,"code":"  it('number, array', () => {\n    expect(subtract(10, [1, 2, 5, 10])).toEqual([9, 8, 5, 0]);\n  });","file":"functions/subtract.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array, array","suites":["Subtract"],"updatePoint":{"line":23,"column":18,"index":799},"line":23,"code":"  it('array, array', () => {\n    expect(subtract([11, 48, 60, 72], [1, 2, 3, 4])).toEqual([10, 46, 57, 68]);\n  });","file":"functions/subtract.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array length mismatch","suites":["Subtract"],"updatePoint":{"line":26,"column":27,"index":923},"line":26,"code":"  it('array length mismatch', () => {\n    expect(() => subtract([1, 2], [3])).toThrow('Array length mismatch');\n  });","file":"functions/subtract.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Sum"],"updatePoint":{"line":13,"column":13,"index":447},"line":13,"code":"  it('numbers', () => {\n    expect(sum(10, 2, 5, 8)).toEqual(25);\n    expect(sum(0.1, 0.2, 0.4, 0.3)).toEqual(0.1 + 0.2 + 0.3 + 0.4);\n  });","file":"functions/sum.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays & numbers","suites":["Sum"],"updatePoint":{"line":17,"column":22,"index":596},"line":17,"code":"  it('arrays & numbers', () => {\n    expect(sum([10, 20, 30, 40], 10, 20, 30)).toEqual(160);\n    expect(sum([10, 20, 30, 40], 10, [1, 2, 3], 22)).toEqual(138);\n  });","file":"functions/sum.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Sum"],"updatePoint":{"line":21,"column":12,"index":752},"line":21,"code":"  it('arrays', () => {\n    expect(sum([1, 2, 3, 4], [1, 2, 5, 10])).toEqual(28);\n    expect(sum([1, 2, 3, 4], [1, 2, 5, 10], [10, 20, 30, 40])).toEqual(128);\n    expect(sum([11, 48, 60, 72], [1, 2, 3, 4])).toEqual(201);\n  });","file":"functions/sum.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Tangent"],"updatePoint":{"line":13,"column":13,"index":451},"line":13,"code":"  it('numbers', () => {\n    expect(tan(0)).toEqual(0);\n    expect(tan(1)).toEqual(1.5574077246549023);\n  });","file":"functions/tan.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Tangent"],"updatePoint":{"line":17,"column":12,"index":559},"line":17,"code":"  it('arrays', () => {\n    expect(tan([0, 1])).toEqual([0, 1.5574077246549023]);\n  });","file":"functions/tan.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"2D arrays","suites":["transpose"],"updatePoint":{"line":13,"column":15,"index":471},"line":13,"code":"  it('2D arrays', () => {\n    expect(transpose([[1, 2], [3, 4], [5, 6]], 0)).toEqual([[1, 3, 5], [2, 4, 6]]);\n    expect(transpose([10, 20, [10, 20, 30, 40], 30], 2)).toEqual([[10, 20, 10, 30], [10, 20, 20, 30], [10, 20, 30, 30], [10, 20, 40, 30]]);\n    expect(transpose([4, [1, 9], [3, 5]], 1)).toEqual([[4, 1, 3], [4, 9, 5]]);\n  });","file":"functions/transpose.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array length mismatch","suites":["transpose"],"updatePoint":{"line":18,"column":27,"index":818},"line":18,"code":"  it('array length mismatch', () => {\n    expect(() => transpose([[1], [2, 3]], 0)).toThrow('Array length mismatch');\n  });","file":"functions/transpose.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Unique"],"updatePoint":{"line":13,"column":13,"index":456},"line":13,"code":"  it('numbers', () => {\n    expect(unique(1)).toEqual(1);\n    expect(unique(10000)).toEqual(1);\n  });","file":"functions/unique.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Unique"],"updatePoint":{"line":17,"column":12,"index":557},"line":17,"code":"  it('arrays', () => {\n    expect(unique([])).toEqual(0);\n    expect(unique([-10, -20, -30, -40])).toEqual(4);\n    expect(unique([-13, 30, -90, 200])).toEqual(4);\n    expect(unique([1, 2, 3, 4, 2, 2, 2, 3, 4, 2, 4, 5, 2, 1, 4, 2])).toEqual(5);\n  });","file":"functions/unique.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"skips number validation","suites":["Unique"],"updatePoint":{"line":23,"column":29,"index":824},"line":23,"code":"  it('skips number validation', () => {\n    expect(unique).toHaveProperty('skipNumberValidation', true);\n  });","file":"functions/unique.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"integers","suites":["Parser","Numbers"],"updatePoint":{"line":40,"column":16,"index":921},"line":40,"code":"    it('integers', () => {\n      expect(parse('10')).toEqual(10);\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"floats","suites":["Parser","Numbers"],"updatePoint":{"line":43,"column":14,"index":993},"line":43,"code":"    it('floats', () => {\n      expect(parse('10.5')).toEqual(10.5);\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"negatives","suites":["Parser","Numbers"],"updatePoint":{"line":46,"column":17,"index":1072},"line":46,"code":"    it('negatives', () => {\n      expect(parse('-10')).toEqual(-10);\n      expect(parse('-10.5')).toEqual(-10.5);\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"converts basic symbols into left-to-right pairs","suites":["Parser","Math"],"updatePoint":{"line":52,"column":55,"index":1265},"line":52,"code":"    it('converts basic symbols into left-to-right pairs', () => {\n      expect(parse('a + b + c - d')).toEqual({\n        args: [{\n          name: 'add',\n          type: 'function',\n          args: [{\n            name: 'add',\n            type: 'function',\n            args: [expect.objectContaining({\n              location: {\n                min: 0,\n                max: 2\n              }\n            }), expect.objectContaining({\n              location: {\n                min: 3,\n                max: 6\n              }\n            })]\n          }, expect.objectContaining({\n            location: {\n              min: 7,\n              max: 10\n            }\n          })]\n        }, expect.objectContaining({\n          location: {\n            min: 11,\n            max: 13\n          }\n        })],\n        name: 'subtract',\n        type: 'function',\n        text: 'a + b + c - d',\n        location: {\n          min: 0,\n          max: 13\n        }\n      });\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"strings","suites":["Parser","Variables"],"updatePoint":{"line":94,"column":15,"index":2226},"line":94,"code":"    it('strings', () => {\n      expect(parse('f')).toEqual(variableEqual('f'));\n      expect(parse('foo')).toEqual(variableEqual('foo'));\n      expect(parse('foo1')).toEqual(variableEqual('foo1'));\n      expect(() => parse('1foo1')).toThrow('but \"f\" found');\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"strings with spaces","suites":["Parser","Variables"],"updatePoint":{"line":100,"column":27,"index":2505},"line":100,"code":"    it('strings with spaces', () => {\n      expect(parse(' foo ')).toEqual(variableEqual('foo'));\n      expect(() => parse(' foo bar ')).toThrow('but \"b\" found');\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"allowed characters","suites":["Parser","Variables"],"updatePoint":{"line":104,"column":26,"index":2675},"line":104,"code":"    it('allowed characters', () => {\n      expect(parse('_foo')).toEqual(variableEqual('_foo'));\n      expect(parse('@foo')).toEqual(variableEqual('@foo'));\n      expect(parse('.foo')).toEqual(variableEqual('.foo'));\n      expect(parse('-foo')).toEqual(variableEqual('-foo'));\n      expect(parse('_foo0')).toEqual(variableEqual('_foo0'));\n      expect(parse('@foo0')).toEqual(variableEqual('@foo0'));\n      expect(parse('.foo0')).toEqual(variableEqual('.foo0'));\n      expect(parse('-foo0')).toEqual(variableEqual('-foo0'));\n      expect(() => parse(`foo😀\\t')`)).toThrow('Failed to parse');\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"strings with double quotes","suites":["Parser","quoted variables"],"updatePoint":{"line":117,"column":34,"index":3328},"line":117,"code":"    it('strings with double quotes', () => {\n      expect(parse('\"foo\"')).toEqual(variableEqual('foo'));\n      expect(parse('\"f b\"')).toEqual(variableEqual('f b'));\n      expect(parse('\"foo bar\"')).toEqual(variableEqual('foo bar'));\n      expect(parse('\"foo bar fizz buzz\"')).toEqual(variableEqual('foo bar fizz buzz'));\n      expect(parse('\"foo   bar   baby\"')).toEqual(variableEqual('foo   bar   baby'));\n      expect(parse(`\"f'oo\"`)).toEqual(variableEqual(`f'oo`));\n      expect(parse(`\"foo😀\\t\"`)).toEqual(variableEqual(`foo😀\\t`));\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"strings with single quotes","suites":["Parser","quoted variables"],"updatePoint":{"line":126,"column":34,"index":3873},"line":126,"code":"    it('strings with single quotes', () => {\n      /* eslint-disable prettier/prettier */\n      expect(parse(\"'foo'\")).toEqual(variableEqual('foo'));\n      expect(parse(\"'f b'\")).toEqual(variableEqual('f b'));\n      expect(parse(\"'foo bar'\")).toEqual(variableEqual('foo bar'));\n      expect(parse(\"'foo bar fizz buzz'\")).toEqual(variableEqual('foo bar fizz buzz'));\n      expect(parse(\"'foo   bar   baby'\")).toEqual(variableEqual('foo   bar   baby'));\n      expect(parse(\"' foo bar'\")).toEqual(variableEqual(\" foo bar\"));\n      expect(parse(\"'foo bar '\")).toEqual(variableEqual(\"foo bar \"));\n      expect(parse(\"'0foo'\")).toEqual(variableEqual(\"0foo\"));\n      expect(parse(\"' foo bar'\")).toEqual(variableEqual(\" foo bar\"));\n      expect(parse(\"'foo bar '\")).toEqual(variableEqual(\"foo bar \"));\n      expect(parse(\"'0foo'\")).toEqual(variableEqual(\"0foo\"));\n      expect(parse(`'f\"oo'`)).toEqual(variableEqual(`f\"oo`));\n      expect(parse(`'foo😀\\t'`)).toEqual(variableEqual(`foo😀\\t`));\n      /* eslint-enable prettier/prettier */\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"allowed characters","suites":["Parser","quoted variables"],"updatePoint":{"line":143,"column":26,"index":4903},"line":143,"code":"    it('allowed characters', () => {\n      expect(parse('\"_foo bar\"')).toEqual(variableEqual('_foo bar'));\n      expect(parse('\"@foo bar\"')).toEqual(variableEqual('@foo bar'));\n      expect(parse('\".foo bar\"')).toEqual(variableEqual('.foo bar'));\n      expect(parse('\"-foo bar\"')).toEqual(variableEqual('-foo bar'));\n      expect(parse('\"_foo0 bar1\"')).toEqual(variableEqual('_foo0 bar1'));\n      expect(parse('\"@foo0 bar1\"')).toEqual(variableEqual('@foo0 bar1'));\n      expect(parse('\".foo0 bar1\"')).toEqual(variableEqual('.foo0 bar1'));\n      expect(parse('\"-foo0 bar1\"')).toEqual(variableEqual('-foo0 bar1'));\n      expect(parse('\" foo bar\"')).toEqual(variableEqual(' foo bar'));\n      expect(parse('\"foo bar \"')).toEqual(variableEqual('foo bar '));\n      expect(parse('\"0foo\"')).toEqual(variableEqual('0foo'));\n      expect(parse('\" foo bar\"')).toEqual(variableEqual(' foo bar'));\n      expect(parse('\"foo bar \"')).toEqual(variableEqual('foo bar '));\n      expect(parse('\"0foo\"')).toEqual(variableEqual('0foo'));\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"no arguments","suites":["Parser","Functions"],"updatePoint":{"line":161,"column":20,"index":5960},"line":161,"code":"    it('no arguments', () => {\n      expect(parse('foo()')).toEqual(functionEqual('foo', []));\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arguments","suites":["Parser","Functions"],"updatePoint":{"line":164,"column":17,"index":6060},"line":164,"code":"    it('arguments', () => {\n      expect(parse('foo(5,10)')).toEqual(functionEqual('foo', [5, 10]));\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arguments with strings","suites":["Parser","Functions"],"updatePoint":{"line":167,"column":30,"index":6182},"line":167,"code":"    it('arguments with strings', () => {\n      expect(parse('foo(\"string with spaces\")')).toEqual(functionEqual('foo', [variableEqual('string with spaces')]));\n      expect(parse(\"foo('string with spaces')\")).toEqual(functionEqual('foo', [variableEqual('string with spaces')]));\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"named only","suites":["Parser","Functions"],"updatePoint":{"line":171,"column":18,"index":6457},"line":171,"code":"    it('named only', () => {\n      expect(parse('foo(q=10)')).toEqual(functionEqual('foo', [namedArgumentEqual('q', 10)]));\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"named argument is numeric","suites":["Parser","Functions"],"updatePoint":{"line":174,"column":33,"index":6604},"line":174,"code":"    it('named argument is numeric', () => {\n      expect(parse('foo(q=10.1234e5)')).toEqual(functionEqual('foo', [namedArgumentEqual('q', 10.1234e5)]));\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"named argument is empty string","suites":["Parser","Functions"],"updatePoint":{"line":177,"column":38,"index":6770},"line":177,"code":"    it('named argument is empty string', () => {\n      expect(parse('foo(q=\"\")')).toEqual(functionEqual('foo', [namedArgumentEqual('q', '')]));\n      expect(parse(`foo(q='')`)).toEqual(functionEqual('foo', [namedArgumentEqual('q', '')]));\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"named and positional","suites":["Parser","Functions"],"updatePoint":{"line":181,"column":28,"index":7007},"line":181,"code":"    it('named and positional', () => {\n      expect(parse('foo(ref, q=\"bar\")')).toEqual(functionEqual('foo', [variableEqual('ref'), namedArgumentEqual('q', 'bar')]));\n      expect(parse(`foo(ref, q='ba\"r')`)).toEqual(functionEqual('foo', [variableEqual('ref'), namedArgumentEqual('q', `ba\"r`)]));\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numerically named","suites":["Parser","Functions"],"updatePoint":{"line":185,"column":25,"index":7309},"line":185,"code":"    it('numerically named', () => {\n      expect(() => parse('foo(1=2)')).toThrow('but \"(\" found');\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"multiple named","suites":["Parser","Functions"],"updatePoint":{"line":188,"column":22,"index":7414},"line":188,"code":"    it('multiple named', () => {\n      expect(parse('foo(q_param=\"bar\", offset=\"1d\")')).toEqual(functionEqual('foo', [namedArgumentEqual('q_param', 'bar'), namedArgumentEqual('offset', '1d')]));\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"multiple named and positional","suites":["Parser","Functions"],"updatePoint":{"line":191,"column":37,"index":7632},"line":191,"code":"    it('multiple named and positional', () => {\n      expect(parse('foo(q=\"bar\", ref, offset=\"1d\", 100)')).toEqual(functionEqual('foo', [namedArgumentEqual('q', 'bar'), variableEqual('ref'), namedArgumentEqual('offset', '1d'), 100]));\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"duplicate named","suites":["Parser","Functions"],"updatePoint":{"line":194,"column":23,"index":7861},"line":194,"code":"    it('duplicate named', () => {\n      expect(parse('foo(q=\"bar\", q=\"test\")')).toEqual(functionEqual('foo', [namedArgumentEqual('q', 'bar'), namedArgumentEqual('q', 'test')]));\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"incomplete named","suites":["Parser","Functions"],"updatePoint":{"line":197,"column":24,"index":8048},"line":197,"code":"    it('incomplete named', () => {\n      expect(() => parse('foo(a=)')).toThrow('but \"(\" found');\n      expect(() => parse('foo(=a)')).toThrow('but \"(\" found');\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"invalid named","suites":["Parser","Functions"],"updatePoint":{"line":201,"column":21,"index":8214},"line":201,"code":"    it('invalid named', () => {\n      expect(() => parse('foo(offset-type=\"1d\")')).toThrow('but \"(\" found');\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"named with complex strings","suites":["Parser","Functions"],"updatePoint":{"line":204,"column":34,"index":8344},"line":204,"code":"    it('named with complex strings', () => {\n      expect(parse(`foo(filter='😀 > \"\\ttab\"')`)).toEqual(functionEqual('foo', [namedArgumentEqual('filter', `😀 > \"\\ttab\"`)]));\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"named with escape characters","suites":["Parser","Functions"],"updatePoint":{"line":207,"column":36,"index":8528},"line":207,"code":"    it('named with escape characters', () => {\n      expect(parse(`foo(filter='Women\\\\'s Clothing')`)).toEqual(functionEqual('foo', [namedArgumentEqual('filter', `Women's Clothing`)]));\n      expect(parse(`foo(filter=\"\\\\\"Quoted inner string\\\\\"\")`)).toEqual(functionEqual('foo', [namedArgumentEqual('filter', `\"Quoted inner string\"`)]));\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"Missing expression","suites":["Parser","Functions"],"updatePoint":{"line":212,"column":24,"index":8867},"line":212,"code":"  it('Missing expression', () => {\n    expect(() => parse(undefined)).toThrow('Missing expression');\n    expect(() => parse(null)).toThrow('Missing expression');\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"Failed parse","suites":["Parser","Functions"],"updatePoint":{"line":216,"column":18,"index":9029},"line":216,"code":"  it('Failed parse', () => {\n    expect(() => parse('')).toThrow('Failed to parse expression');\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"Not a string","suites":["Parser","Functions"],"updatePoint":{"line":219,"column":18,"index":9131},"line":219,"code":"  it('Not a string', () => {\n    expect(() => parse(3)).toThrow('Expression must be a string');\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Evaluate"],"updatePoint":{"line":224,"column":13,"index":9261},"line":224,"code":"  it('numbers', () => {\n    expect(evaluate('10')).toEqual(10);\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"variables","suites":["Evaluate"],"updatePoint":{"line":227,"column":15,"index":9333},"line":227,"code":"  it('variables', () => {\n    expect(evaluate('foo', {\n      foo: 10\n    })).toEqual(10);\n    expect(evaluate('bar', {\n      bar: [1, 2]\n    })).toEqual([1, 2]);\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"variables with spaces","suites":["Evaluate"],"updatePoint":{"line":235,"column":27,"index":9513},"line":235,"code":"  it('variables with spaces', () => {\n    expect(evaluate('\"foo bar\"', {\n      'foo bar': 10\n    })).toEqual(10);\n    expect(evaluate('\"key with many spaces in it\"', {\n      'key with many spaces in it': 10\n    })).toEqual(10);\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"variables with dots","suites":["Evaluate"],"updatePoint":{"line":243,"column":25,"index":9745},"line":243,"code":"  it('variables with dots', () => {\n    expect(evaluate('foo.bar', {\n      'foo.bar': 20\n    })).toEqual(20);\n    expect(evaluate('\"is.null\"', {\n      'is.null': null\n    })).toEqual(null);\n    expect(evaluate('\"is.false\"', {\n      'is.null': null,\n      'is.false': false\n    })).toEqual(false);\n    expect(evaluate('\"with space.val\"', {\n      'with space.val': 42\n    })).toEqual(42);\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"variables with dot notation","suites":["Evaluate"],"updatePoint":{"line":258,"column":33,"index":10146},"line":258,"code":"  it('variables with dot notation', () => {\n    expect(evaluate('foo.bar', {\n      foo: {\n        bar: 20\n      }\n    })).toEqual(20);\n    expect(evaluate('foo.bar[0].baz', {\n      foo: {\n        bar: [{\n          baz: 30\n        }, {\n          beer: 40\n        }]\n      }\n    })).toEqual(30);\n    expect(evaluate('\"is.false\"', {\n      is: {\n        null: null,\n        false: false\n      }\n    })).toEqual(false);\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"equations","suites":["Evaluate"],"updatePoint":{"line":280,"column":15,"index":10549},"line":280,"code":"  it('equations', () => {\n    expect(evaluate('3 + 4')).toEqual(7);\n    expect(evaluate('10 - 2')).toEqual(8);\n    expect(evaluate('8 + 6 / 3')).toEqual(10);\n    expect(evaluate('10 * (1 + 2)')).toEqual(30);\n    expect(evaluate('(3 - 4) * 10')).toEqual(-10);\n    expect(evaluate('-1 - -12')).toEqual(11);\n    expect(evaluate('5/20')).toEqual(0.25);\n    expect(evaluate('1 + 1 + 2 + 3 + 12')).toEqual(19);\n    expect(evaluate('100 / 10 / 10')).toEqual(1);\n    expect(evaluate('0 * 1 - 100 / 10 / 10')).toEqual(-1);\n    expect(evaluate('100 / (10 / 10)')).toEqual(100);\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"equations with functions","suites":["Evaluate"],"updatePoint":{"line":293,"column":30,"index":11138},"line":293,"code":"  it('equations with functions', () => {\n    expect(evaluate('3 + multiply(10, 4)')).toEqual(43);\n    expect(evaluate('3 + multiply(10, 4, 5)')).toEqual(203);\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"equations with trigonometry","suites":["Evaluate"],"updatePoint":{"line":297,"column":33,"index":11306},"line":297,"code":"  it('equations with trigonometry', () => {\n    expect(evaluate('pi()')).toEqual(Math.PI);\n    expect(evaluate('sin(degtorad(0))')).toEqual(0);\n    expect(evaluate('sin(degtorad(180))')).toEqual(1.2246467991473532e-16);\n    expect(evaluate('cos(degtorad(0))')).toEqual(1);\n    expect(evaluate('cos(degtorad(180))')).toEqual(-1);\n    expect(evaluate('tan(degtorad(0))')).toEqual(0);\n    expect(evaluate('tan(degtorad(180))')).toEqual(-1.2246467991473532e-16);\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"equations with variables","suites":["Evaluate"],"updatePoint":{"line":306,"column":30,"index":11768},"line":306,"code":"  it('equations with variables', () => {\n    expect(evaluate('3 + foo', {\n      foo: 5\n    })).toEqual(8);\n    expect(evaluate('3 + foo', {\n      foo: [5, 10]\n    })).toEqual([8, 13]);\n    expect(evaluate('3 + foo', {\n      foo: 5\n    })).toEqual(8);\n    expect(evaluate('sum(foo)', {\n      foo: [5, 10, 15]\n    })).toEqual(30);\n    expect(evaluate('90 / sum(foo)', {\n      foo: [5, 10, 15]\n    })).toEqual(3);\n    expect(evaluate('multiply(foo, bar)', {\n      foo: [1, 2, 3],\n      bar: [4, 5, 6]\n    })).toEqual([4, 10, 18]);\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"equations with quoted variables","suites":["Evaluate"],"updatePoint":{"line":327,"column":37,"index":12309},"line":327,"code":"  it('equations with quoted variables', () => {\n    expect(evaluate('\"b\" * 7', {\n      b: 3\n    })).toEqual(21);\n    expect(evaluate('\"space name\" * 2', {\n      'space name': [1, 2, 21]\n    })).toEqual([2, 4, 42]);\n    expect(evaluate('sum(\"space name\")', {\n      'space name': [1, 2, 21]\n    })).toEqual(24);\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"throws on named arguments","suites":["Evaluate"],"updatePoint":{"line":338,"column":31,"index":12619},"line":338,"code":"  it('throws on named arguments', () => {\n    expect(() => evaluate('sum(invalid=a)')).toThrow('Named arguments are not supported');\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"equations with injected functions","suites":["Evaluate"],"updatePoint":{"line":341,"column":39,"index":12766},"line":341,"code":"  it('equations with injected functions', () => {\n    expect(evaluate('plustwo(foo)', {\n      foo: 5\n    }, {\n      plustwo: function (a) {\n        return a + 2;\n      }\n    })).toEqual(7);\n    expect(evaluate('negate(1)', null, {\n      negate: function (a) {\n        return -a;\n      }\n    })).toEqual(-1);\n    expect(evaluate('stringify(2)', null, {\n      stringify: function (a) {\n        return '' + a;\n      }\n    })).toEqual('2');\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"equations with arrays using special operator functions","suites":["Evaluate"],"updatePoint":{"line":360,"column":60,"index":13230},"line":360,"code":"  it('equations with arrays using special operator functions', () => {\n    expect(evaluate('foo + bar', {\n      foo: [1, 2, 3],\n      bar: [4, 5, 6]\n    })).toEqual([5, 7, 9]);\n    expect(evaluate('foo - bar', {\n      foo: [1, 2, 3],\n      bar: [4, 5, 6]\n    })).toEqual([-3, -3, -3]);\n    expect(evaluate('foo * bar', {\n      foo: [1, 2, 3],\n      bar: [4, 5, 6]\n    })).toEqual([4, 10, 18]);\n    expect(evaluate('foo / bar', {\n      foo: [1, 2, 3],\n      bar: [4, 5, 6]\n    })).toEqual([1 / 4, 2 / 5, 3 / 6]);\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"missing expression","suites":["Evaluate"],"updatePoint":{"line":378,"column":24,"index":13712},"line":378,"code":"  it('missing expression', () => {\n    expect(() => evaluate('')).toThrow('Failed to parse expression');\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"missing referenced scope when used in injected function","suites":["Evaluate"],"updatePoint":{"line":381,"column":61,"index":13860},"line":381,"code":"  it('missing referenced scope when used in injected function', () => {\n    expect(() => evaluate('increment(foo)', null, {\n      increment: function (a) {\n        return a + 1;\n      }\n    })).toThrow('Unknown variable: foo');\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"invalid context datatypes","suites":["Evaluate"],"updatePoint":{"line":388,"column":31,"index":14064},"line":388,"code":"  it('invalid context datatypes', () => {\n    expect(evaluate('mean(foo)', {\n      foo: [true, true, false]\n    })).toBeNaN();\n    expect(evaluate('mean(foo + bar)', {\n      foo: [true, true, false],\n      bar: [1, 2, 3]\n    })).toBeNaN();\n    expect(evaluate('mean(foo)', {\n      foo: ['dog', 'cat', 'mouse']\n    })).toBeNaN();\n    expect(evaluate('mean(foo + 2)', {\n      foo: ['dog', 'cat', 'mouse']\n    })).toBeNaN();\n    expect(evaluate('foo + bar', {\n      foo: NaN,\n      bar: [4, 5, 6]\n    })).toBeNaN();\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"checks if alert is active","suites":["with ml jobs"],"updatePoint":{"line":64,"column":35,"index":2565},"line":64,"code":"      it('checks if alert is active', async () => {\n        const {\n          body: createdRule\n        } = await supertest.post(`/api/alerting/rule`).set('kbn-xsrf', 'foo').send({\n          params: {\n            environment: 'production',\n            windowSize: 99,\n            windowUnit: 'y',\n            anomalySeverityType: 'warning'\n          },\n          consumer: 'apm',\n          schedule: {\n            interval: '1m'\n          },\n          tags: ['apm', 'service.name:service-a'],\n          name: 'Latency anomaly | service-a',\n          rule_type_id: AlertType.Anomaly,\n          notify_when: 'onActiveAlert',\n          actions: []\n        });\n        ruleId = createdRule.id;\n        const executionStatus = await waitForRuleStatus({\n          id: ruleId,\n          expectedStatus: 'active',\n          supertest,\n          log\n        });\n        expect(executionStatus.status).to.be('active');\n      });","file":"apm_api_integration/tests/alerts/anomaly_alert.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns a 501","suites":[],"updatePoint":{"line":67,"column":21,"index":1954},"line":67,"code":"    it('returns a 501', async () => {\n      const status = await statusOf(getAnomalyCharts({\n        serviceName: 'a',\n        transactionType: 'request',\n        start: '2021-01-01T00:00:00.000Z',\n        end: '2021-01-01T00:15:00.000Z',\n        environment: 'ENVIRONMENT_ALL'\n      }));\n      expect(status).to.eql(501);\n    });","file":"apm_api_integration/tests/anomalies/anomaly_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns a 403 for a user without access to ML","suites":[],"updatePoint":{"line":117,"column":53,"index":3918},"line":117,"code":"    it('returns a 403 for a user without access to ML', async () => {\n      expect(await statusOf(getAnomalyCharts({\n        serviceName: 'a',\n        transactionType: 'request',\n        start,\n        end,\n        environment: 'ENVIRONMENT_ALL'\n      }, apmApiClient.noMlAccessUser))).to.eql(403);\n    });","file":"apm_api_integration/tests/anomalies/anomaly_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns a 200 for a user _with_ access to ML","suites":["without ml jobs"],"updatePoint":{"line":127,"column":54,"index":4266},"line":127,"code":"      it('returns a 200 for a user _with_ access to ML', async () => {\n        const status = await statusOf(getAnomalyCharts({\n          serviceName: 'a',\n          transactionType: 'request',\n          start,\n          end,\n          environment: 'ENVIRONMENT_ALL'\n        }));\n        expect(status).to.eql(200);\n      });","file":"apm_api_integration/tests/anomalies/anomaly_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns a 200 for a user _with_ access to ML","suites":["with ml jobs"],"updatePoint":{"line":151,"column":54,"index":4945},"line":151,"code":"      it('returns a 200 for a user _with_ access to ML', async () => {\n        const status = await statusOf(getAnomalyCharts({\n          serviceName: 'a',\n          transactionType: 'request',\n          start,\n          end,\n          environment: 'ENVIRONMENT_ALL'\n        }));\n        expect(status).to.eql(200);\n      });","file":"apm_api_integration/tests/anomalies/anomaly_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns model plots for all detectors and job ids for the given transaction type","suites":["with ml jobs","inspecting the body"],"updatePoint":{"line":179,"column":92,"index":6144},"line":179,"code":"        it('returns model plots for all detectors and job ids for the given transaction type', () => {\n          expect(allAnomalyTimeseries.length).to.eql(3);\n          expect(allAnomalyTimeseries.every(spec => spec.bounds.some(bound => bound.y0 ?? 0 > 0)));\n        });","file":"apm_api_integration/tests/anomalies/anomaly_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns model plots with bounds for x range within start and end","suites":["with ml jobs","inspecting the body"],"updatePoint":{"line":183,"column":76,"index":6400},"line":183,"code":"        it('returns model plots with bounds for x range within start and end', () => {\n          expect(allAnomalyTimeseries.length).to.eql(3);\n          expect(allAnomalyTimeseries.every(spec => spec.bounds.every(bound => bound.x >= new Date(start).getTime() && bound.x <= endTimeMs)));\n        });","file":"apm_api_integration/tests/anomalies/anomaly_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns model plots with latest bucket matching the end time","suites":["with ml jobs","inspecting the body"],"updatePoint":{"line":187,"column":72,"index":6696},"line":187,"code":"        it('returns model plots with latest bucket matching the end time', () => {\n          expect(allAnomalyTimeseries.every(spec => last(spec.bounds)?.x === endTimeMs));\n        });","file":"apm_api_integration/tests/anomalies/anomaly_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the correct metadata","suites":["with ml jobs","inspecting the body"],"updatePoint":{"line":190,"column":40,"index":6849},"line":190,"code":"        it('returns the correct metadata', () => {\n          function omitTimeseriesData(series) {\n            return series ? omit(series, 'anomalies', 'bounds') : undefined;\n          }\n\n          expect(omitTimeseriesData(latencySeries)).to.eql({\n            type: ApmMlDetectorType.txLatency,\n            jobId: 'apm-tx-metrics-production',\n            serviceName: 'a',\n            environment: 'production',\n            transactionType: 'request',\n            version: 3\n          });\n          expect(omitTimeseriesData(throughputSeries)).to.eql({\n            type: ApmMlDetectorType.txThroughput,\n            jobId: 'apm-tx-metrics-production',\n            serviceName: 'a',\n            environment: 'production',\n            transactionType: 'request',\n            version: 3\n          });\n          expect(omitTimeseriesData(failureRateSeries)).to.eql({\n            type: ApmMlDetectorType.txFailureRate,\n            jobId: 'apm-tx-metrics-production',\n            serviceName: 'a',\n            environment: 'production',\n            transactionType: 'request',\n            version: 3\n          });\n        });","file":"apm_api_integration/tests/anomalies/anomaly_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns anomalies for during the spike","suites":["with ml jobs","inspecting the body"],"updatePoint":{"line":220,"column":50,"index":7980},"line":220,"code":"        it('returns anomalies for during the spike', () => {\n          const latencyAnomalies = latencySeries?.anomalies.filter(anomaly => anomaly.y ?? 0 > 0);\n          const throughputAnomalies = throughputSeries?.anomalies.filter(anomaly => anomaly.y ?? 0 > 0);\n          const failureRateAnomalies = failureRateSeries?.anomalies.filter(anomaly => anomaly.y ?? 0 > 0);\n          expect(latencyAnomalies?.length).to.be.greaterThan(0);\n          expect(throughputAnomalies?.length).to.be.greaterThan(0);\n          expect(failureRateAnomalies?.length).to.be.greaterThan(0);\n          expect(latencyAnomalies?.every(anomaly => anomaly.x >= spikeStart && (anomaly.actual ?? 0) > NORMAL_DURATION));\n          expect(throughputAnomalies?.every(anomaly => anomaly.x >= spikeStart && (anomaly.actual ?? 0) > NORMAL_RATE));\n          expect(failureRateAnomalies?.every(anomaly => anomaly.x >= spikeStart && (anomaly.actual ?? 0) > 0));\n        });","file":"apm_api_integration/tests/anomalies/anomaly_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles empty state","suites":[],"updatePoint":{"line":52,"column":27,"index":1874},"line":52,"code":"    it('handles empty state', async () => {\n      const {\n        status,\n        body\n      } = await callApi();\n      expect(status).to.be(200);\n      expect(body.currentPeriod.transactionColdstartRate).to.empty();\n      expect(body.currentPeriod.average).to.be(null);\n      expect(body.previousPeriod.transactionColdstartRate).to.empty();\n      expect(body.previousPeriod.average).to.be(null);\n    });","file":"apm_api_integration/tests/cold_start/cold_start_by_transaction_name/cold_start_by_transaction_name.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct HTTP status","suites":["without comparison"],"updatePoint":{"line":84,"column":37,"index":2853},"line":84,"code":"      it('returns correct HTTP status', () => {\n        expect(status).to.be(200);\n      });","file":"apm_api_integration/tests/cold_start/cold_start_by_transaction_name/cold_start_by_transaction_name.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns an array of transaction cold start rates","suites":["without comparison"],"updatePoint":{"line":87,"column":58,"index":2967},"line":87,"code":"      it('returns an array of transaction cold start rates', () => {\n        expect(body).to.have.property('currentPeriod');\n        expect(body.currentPeriod.transactionColdstartRate).to.have.length(15);\n        expect(body.currentPeriod.transactionColdstartRate.every(({\n          y\n        }) => y === 0.25)).to.be(true);\n      });","file":"apm_api_integration/tests/cold_start/cold_start_by_transaction_name/cold_start_by_transaction_name.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct average rate","suites":["without comparison"],"updatePoint":{"line":94,"column":38,"index":3282},"line":94,"code":"      it('returns correct average rate', () => {\n        expect(body.currentPeriod.average).to.be(0.25);\n      });","file":"apm_api_integration/tests/cold_start/cold_start_by_transaction_name/cold_start_by_transaction_name.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"doesn't have data for the previous period","suites":["without comparison"],"updatePoint":{"line":97,"column":51,"index":3410},"line":97,"code":"      it(\"doesn't have data for the previous period\", () => {\n        expect(body).to.have.property('previousPeriod');\n        expect(body.previousPeriod.transactionColdstartRate).to.have.length(0);\n        expect(body.previousPeriod.average).to.be(null);\n      });","file":"apm_api_integration/tests/cold_start/cold_start_by_transaction_name/cold_start_by_transaction_name.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct HTTP status","suites":["with comparison"],"updatePoint":{"line":136,"column":37,"index":4764},"line":136,"code":"      it('returns correct HTTP status', () => {\n        expect(status).to.be(200);\n      });","file":"apm_api_integration/tests/cold_start/cold_start_by_transaction_name/cold_start_by_transaction_name.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns some data","suites":["with comparison"],"updatePoint":{"line":139,"column":27,"index":4847},"line":139,"code":"      it('returns some data', () => {\n        expect(body.currentPeriod.average).not.to.be(null);\n        expect(body.currentPeriod.transactionColdstartRate.length).to.be.greaterThan(0);\n        const hasCurrentPeriodData = body.currentPeriod.transactionColdstartRate.some(({\n          y\n        }) => isFiniteNumber(y));\n        expect(hasCurrentPeriodData).to.equal(true);\n        expect(body.previousPeriod.average).not.to.be(null);\n        expect(body.previousPeriod.transactionColdstartRate.length).to.be.greaterThan(0);\n        const hasPreviousPeriodData = body.previousPeriod.transactionColdstartRate.some(({\n          y\n        }) => isFiniteNumber(y));\n        expect(hasPreviousPeriodData).to.equal(true);\n      });","file":"apm_api_integration/tests/cold_start/cold_start_by_transaction_name/cold_start_by_transaction_name.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same start time for both periods","suites":["with comparison"],"updatePoint":{"line":153,"column":46,"index":5593},"line":153,"code":"      it('has same start time for both periods', () => {\n        expect(first(body.currentPeriod.transactionColdstartRate)?.x).to.equal(first(body.previousPeriod.transactionColdstartRate)?.x);\n      });","file":"apm_api_integration/tests/cold_start/cold_start_by_transaction_name/cold_start_by_transaction_name.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same end time for both periods","suites":["with comparison"],"updatePoint":{"line":156,"column":44,"index":5794},"line":156,"code":"      it('has same end time for both periods', () => {\n        expect(last(body.currentPeriod.transactionColdstartRate)?.x).to.equal(last(body.previousPeriod.transactionColdstartRate)?.x);\n      });","file":"apm_api_integration/tests/cold_start/cold_start_by_transaction_name/cold_start_by_transaction_name.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns an array of transaction cold start rates","suites":["with comparison"],"updatePoint":{"line":159,"column":58,"index":6007},"line":159,"code":"      it('returns an array of transaction cold start rates', () => {\n        expect(body.currentPeriod.transactionColdstartRate).to.have.length(3);\n        expect(body.currentPeriod.transactionColdstartRate.every(({\n          y\n        }) => y === 0.25)).to.be(true);\n        expect(body.previousPeriod.transactionColdstartRate).to.have.length(3);\n        expect(body.previousPeriod.transactionColdstartRate.every(({\n          y\n        }) => y === 0.5)).to.be(true);\n      });","file":"apm_api_integration/tests/cold_start/cold_start_by_transaction_name/cold_start_by_transaction_name.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same average value for both periods","suites":["with comparison"],"updatePoint":{"line":169,"column":49,"index":6476},"line":169,"code":"      it('has same average value for both periods', () => {\n        expect(body.currentPeriod.average).to.be(0.25);\n        expect(body.previousPeriod.average).to.be(0.5);\n      });","file":"apm_api_integration/tests/cold_start/cold_start_by_transaction_name/cold_start_by_transaction_name.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles empty state","suites":[],"updatePoint":{"line":50,"column":27,"index":1783},"line":50,"code":"    it('handles empty state', async () => {\n      const {\n        status,\n        body\n      } = await callApi();\n      expect(status).to.be(200);\n      expect(body.currentPeriod.transactionColdstartRate).to.empty();\n      expect(body.currentPeriod.average).to.be(null);\n      expect(body.previousPeriod.transactionColdstartRate).to.empty();\n      expect(body.previousPeriod.average).to.be(null);\n    });","file":"apm_api_integration/tests/cold_start/cold_start.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct HTTP status","suites":["without comparison"],"updatePoint":{"line":82,"column":37,"index":2742},"line":82,"code":"      it('returns correct HTTP status', () => {\n        expect(status).to.be(200);\n      });","file":"apm_api_integration/tests/cold_start/cold_start.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns an array of transaction cold start rates","suites":["without comparison"],"updatePoint":{"line":85,"column":58,"index":2856},"line":85,"code":"      it('returns an array of transaction cold start rates', () => {\n        expect(body).to.have.property('currentPeriod');\n        expect(body.currentPeriod.transactionColdstartRate).to.have.length(15);\n        expect(body.currentPeriod.transactionColdstartRate.every(({\n          y\n        }) => y === 0.25)).to.be(true);\n      });","file":"apm_api_integration/tests/cold_start/cold_start.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct average rate","suites":["without comparison"],"updatePoint":{"line":92,"column":38,"index":3171},"line":92,"code":"      it('returns correct average rate', () => {\n        expect(body.currentPeriod.average).to.be(0.25);\n      });","file":"apm_api_integration/tests/cold_start/cold_start.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"doesn't have data for the previous period","suites":["without comparison"],"updatePoint":{"line":95,"column":51,"index":3299},"line":95,"code":"      it(\"doesn't have data for the previous period\", () => {\n        expect(body).to.have.property('previousPeriod');\n        expect(body.previousPeriod.transactionColdstartRate).to.have.length(0);\n        expect(body.previousPeriod.average).to.be(null);\n      });","file":"apm_api_integration/tests/cold_start/cold_start.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct HTTP status","suites":["with comparison"],"updatePoint":{"line":134,"column":37,"index":4653},"line":134,"code":"      it('returns correct HTTP status', () => {\n        expect(status).to.be(200);\n      });","file":"apm_api_integration/tests/cold_start/cold_start.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns some data","suites":["with comparison"],"updatePoint":{"line":137,"column":27,"index":4736},"line":137,"code":"      it('returns some data', () => {\n        expect(body.currentPeriod.average).not.to.be(null);\n        expect(body.currentPeriod.transactionColdstartRate.length).to.be.greaterThan(0);\n        const hasCurrentPeriodData = body.currentPeriod.transactionColdstartRate.some(({\n          y\n        }) => isFiniteNumber(y));\n        expect(hasCurrentPeriodData).to.equal(true);\n        expect(body.previousPeriod.average).not.to.be(null);\n        expect(body.previousPeriod.transactionColdstartRate.length).to.be.greaterThan(0);\n        const hasPreviousPeriodData = body.previousPeriod.transactionColdstartRate.some(({\n          y\n        }) => isFiniteNumber(y));\n        expect(hasPreviousPeriodData).to.equal(true);\n      });","file":"apm_api_integration/tests/cold_start/cold_start.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same start time for both periods","suites":["with comparison"],"updatePoint":{"line":151,"column":46,"index":5482},"line":151,"code":"      it('has same start time for both periods', () => {\n        expect(first(body.currentPeriod.transactionColdstartRate)?.x).to.equal(first(body.previousPeriod.transactionColdstartRate)?.x);\n      });","file":"apm_api_integration/tests/cold_start/cold_start.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same end time for both periods","suites":["with comparison"],"updatePoint":{"line":154,"column":44,"index":5683},"line":154,"code":"      it('has same end time for both periods', () => {\n        expect(last(body.currentPeriod.transactionColdstartRate)?.x).to.equal(last(body.previousPeriod.transactionColdstartRate)?.x);\n      });","file":"apm_api_integration/tests/cold_start/cold_start.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns an array of transaction cold start rates","suites":["with comparison"],"updatePoint":{"line":157,"column":58,"index":5896},"line":157,"code":"      it('returns an array of transaction cold start rates', () => {\n        expect(body.currentPeriod.transactionColdstartRate).to.have.length(3);\n        expect(body.currentPeriod.transactionColdstartRate.every(({\n          y\n        }) => y === 0.25)).to.be(true);\n        expect(body.previousPeriod.transactionColdstartRate).to.have.length(3);\n        expect(body.previousPeriod.transactionColdstartRate.every(({\n          y\n        }) => y === 0.5)).to.be(true);\n      });","file":"apm_api_integration/tests/cold_start/cold_start.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same average value for both periods","suites":["with comparison"],"updatePoint":{"line":167,"column":49,"index":6365},"line":167,"code":"      it('has same average value for both periods', () => {\n        expect(body.currentPeriod.average).to.be(0.25);\n        expect(body.previousPeriod.average).to.be(0.5);\n      });","file":"apm_api_integration/tests/cold_start/cold_start.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":31,"column":31,"index":905},"line":31,"code":"    it('handles the empty state', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint,\n        ...getOptions()\n      });\n      expect(response.status).to.be(200);\n      expect(response.body?.fieldCandidates.length).to.be(14);\n    });","file":"apm_api_integration/tests/correlations/field_candidates.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns field candidates","suites":[],"updatePoint":{"line":44,"column":32,"index":1301},"line":44,"code":"    it('returns field candidates', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint,\n        ...getOptions()\n      });\n      expect(response.status).to.eql(200);\n      expect(response.body?.fieldCandidates.length).to.be(69);\n    });","file":"apm_api_integration/tests/correlations/field_candidates.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":32,"column":31,"index":1224},"line":32,"code":"    it('handles the empty state', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint,\n        ...getOptions()\n      });\n      expect(response.status).to.be(200);\n      expect(response.body?.fieldValuePairs.length).to.be(0);\n    });","file":"apm_api_integration/tests/correlations/field_value_pairs.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns field value pairs","suites":[],"updatePoint":{"line":45,"column":33,"index":1621},"line":45,"code":"    it('returns field value pairs', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint,\n        ...getOptions()\n      });\n      expect(response.status).to.eql(200);\n      expect(response.body?.fieldValuePairs.length).to.be(124);\n    });","file":"apm_api_integration/tests/correlations/field_value_pairs.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":32,"column":31,"index":1206},"line":32,"code":"    it('handles the empty state', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint,\n        ...getOptions()\n      });\n      expect(response.status).to.be(200);\n      expect(response.body?.failedTransactionsCorrelations.length).to.be(0);\n    });","file":"apm_api_integration/tests/correlations/p_values.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns p values","suites":[],"updatePoint":{"line":45,"column":24,"index":1600},"line":45,"code":"    it('returns p values', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint,\n        ...getOptions()\n      });\n      expect(response.status).to.eql(200);\n      expect(response.body?.failedTransactionsCorrelations.length).to.be(15);\n    });","file":"apm_api_integration/tests/correlations/p_values.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":74,"column":31,"index":2373},"line":74,"code":"    it('handles the empty state', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint,\n        ...getOptions()\n      });\n      expect(response.status).to.be(200);\n      expect(response.body?.latencyCorrelations.length).to.be(0);\n    });","file":"apm_api_integration/tests/correlations/significant_correlations.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns significant correlations","suites":[],"updatePoint":{"line":87,"column":40,"index":2788},"line":87,"code":"    it('returns significant correlations', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint,\n        ...getOptions()\n      });\n      expect(response.status).to.eql(200);\n      expect(response.body?.latencyCorrelations.length).to.be(7);\n    });","file":"apm_api_integration/tests/correlations/significant_correlations.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles empty state","suites":[],"updatePoint":{"line":36,"column":27,"index":1242},"line":36,"code":"    it('handles empty state', async () => {\n      const {\n        status,\n        body\n      } = await callApi();\n      expect(status).to.be(200);\n      expect(body.metadata).to.empty();\n    });","file":"apm_api_integration/tests/dependencies/metadata.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct metadata for the dependency","suites":[],"updatePoint":{"line":50,"column":51,"index":1627},"line":50,"code":"    it('returns correct metadata for the dependency', async () => {\n      await generateData({\n        synthtraceEsClient,\n        start,\n        end\n      });\n      const {\n        status,\n        body\n      } = await callApi();\n      const {\n        span\n      } = dataConfig;\n      expect(status).to.be(200);\n      expect(body.metadata.spanType).to.equal(span.type);\n      expect(body.metadata.spanSubtype).to.equal(span.subType);\n      await synthtraceEsClient.clean();\n    });","file":"apm_api_integration/tests/dependencies/metadata.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles empty state","suites":[],"updatePoint":{"line":50,"column":27,"index":1584},"line":50,"code":"    it('handles empty state', async () => {\n      const {\n        body,\n        status\n      } = await callApi({\n        dependencyName: 'elasticsearch',\n        spanName: '/_search'\n      });\n      expect(status).to.be(200);\n      expect(body.spans).to.empty();\n    });","file":"apm_api_integration/tests/dependencies/top_spans.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the correct spans for the requested spanName","suites":["without a kuery or environment"],"updatePoint":{"line":102,"column":62,"index":3657},"line":102,"code":"      it('returns the correct spans for the requested spanName', async () => {\n        const response = await callApi({\n          dependencyName: 'elasticsearch',\n          spanName: '/_search'\n        });\n        const {\n          spans\n        } = response.body;\n        const spanNames = uniq(spans.map(span => span.spanName));\n        const javaSpans = spans.filter(span => span.serviceName === 'java');\n        const goSpans = spans.filter(span => span.serviceName === 'go');\n        expect(spanNames).to.eql(['/_search']);\n        expect(javaSpans.length).to.be.greaterThan(0);\n        expect(goSpans.length).to.be.greaterThan(0);\n        expect(javaSpans.length + goSpans.length).to.eql(spans.length);\n        expect(omit(javaSpans[0], 'traceId', 'transactionId')).to.eql({\n          '@timestamp': 1609459200000,\n          agentName: 'java',\n          duration: 100000,\n          serviceName: 'java',\n          spanName: '/_search',\n          transactionName: 'GET /api/my-endpoint',\n          transactionType: 'request',\n          outcome: 'success'\n        });\n        expect(omit(goSpans[0], 'traceId', 'transactionId')).to.eql({\n          '@timestamp': 1609459200000,\n          agentName: 'go',\n          duration: 50000,\n          serviceName: 'go',\n          spanName: '/_search',\n          transactionName: 'GET /api/my-other-endpoint',\n          transactionType: 'request',\n          outcome: 'unknown'\n        });\n      });","file":"apm_api_integration/tests/dependencies/top_spans.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the correct spans for the requested spanName","suites":["with a kuery"],"updatePoint":{"line":140,"column":62,"index":5142},"line":140,"code":"      it('returns the correct spans for the requested spanName', async () => {\n        const response = await callApi({\n          dependencyName: 'elasticsearch',\n          spanName: '/_search',\n          kuery: 'service.name:go'\n        });\n        const {\n          spans\n        } = response.body;\n        const spanNames = uniq(spans.map(span => span.spanName));\n        const javaSpans = spans.filter(span => span.serviceName === 'java');\n        const goSpans = spans.filter(span => span.serviceName === 'go');\n        expect(spanNames).to.eql(['/_search']);\n        expect(javaSpans.length).to.be(0);\n        expect(goSpans.length).to.be.greaterThan(0);\n        expect(goSpans.length).to.eql(spans.length);\n      });","file":"apm_api_integration/tests/dependencies/top_spans.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the correct spans for the requested spanName","suites":["with an environment"],"updatePoint":{"line":159,"column":62,"index":5918},"line":159,"code":"      it('returns the correct spans for the requested spanName', async () => {\n        const response = await callApi({\n          dependencyName: 'elasticsearch',\n          spanName: '/_search',\n          environment: 'development'\n        });\n        const {\n          spans\n        } = response.body;\n        const spanNames = uniq(spans.map(span => span.spanName));\n        const javaSpans = spans.filter(span => span.serviceName === 'java');\n        const goSpans = spans.filter(span => span.serviceName === 'go');\n        expect(spanNames).to.eql(['/_search']);\n        expect(javaSpans.length).to.be(0);\n        expect(goSpans.length).to.be.greaterThan(0);\n        expect(goSpans.length).to.eql(spans.length);\n      });","file":"apm_api_integration/tests/dependencies/top_spans.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"should return the spans without transaction metadata","suites":["when requesting spans without a transaction"],"updatePoint":{"line":178,"column":62,"index":6720},"line":178,"code":"      it('should return the spans without transaction metadata', async () => {\n        const response = await callApi({\n          dependencyName: 'elasticsearch',\n          spanName: 'without transaction'\n        });\n        const {\n          spans\n        } = response.body;\n        const spanNames = uniq(spans.map(span => span.spanName));\n        expect(spanNames).to.eql(['without transaction']);\n        expect(omit(spans[0], 'traceId')).to.eql({\n          '@timestamp': 1609459200000,\n          agentName: 'java',\n          duration: 200000,\n          serviceName: 'java',\n          spanName: 'without transaction',\n          outcome: 'unknown'\n        });\n        expect(spans[0].transactionType).not.to.be.ok();\n        expect(spans[0].transactionId).not.to.be.ok();\n        expect(spans[0].transactionName).not.to.be.ok();\n      });","file":"apm_api_integration/tests/dependencies/top_spans.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns only spans whose duration falls into the requested range","suites":["when requesting spans within a specific sample range"],"updatePoint":{"line":202,"column":74,"index":7659},"line":202,"code":"      it('returns only spans whose duration falls into the requested range', async () => {\n        const response = await callApi({\n          dependencyName: 'elasticsearch',\n          spanName: '/_search',\n          sampleRangeFrom: 50000,\n          sampleRangeTo: 99999\n        });\n        const {\n          spans\n        } = response.body;\n        expect(spans.every(span => span.duration === 50000)).to.be(true);\n      });","file":"apm_api_integration/tests/dependencies/top_spans.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns same avg error rate value for Transaction-based and Metric-based data","suites":["when data is loaded ","compare latency value between service inventory and service maps"],"updatePoint":{"line":88,"column":89,"index":4077},"line":88,"code":"        it('returns same avg error rate value for Transaction-based and Metric-based data', () => {\n          [errorTransactionValues.serviceInventoryErrorRate, errorTransactionValues.serviceMapsNodeDetailsErrorRate, errorRateMetricValues.serviceInventoryErrorRate, errorRateMetricValues.serviceMapsNodeDetailsErrorRate].forEach(value => expect(value).to.be.equal(GO_PROD_ID_ERROR_RATE / 100));\n        });","file":"apm_api_integration/tests/error_rate/service_maps.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":48,"column":31,"index":1743},"line":48,"code":"    it('handles the empty state', async () => {\n      const response = await callApi();\n      expect(response.status).to.be(200);\n      expect(response.body.currentPeriod.length).to.be(0);\n      expect(response.body.previousPeriod.length).to.be(0);\n    });","file":"apm_api_integration/tests/errors/distribution.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"displays combined number of occurrences","suites":["errors distribution","without comparison"],"updatePoint":{"line":79,"column":51,"index":2663},"line":79,"code":"        it('displays combined number of occurrences', () => {\n          const countSum = sumBy(errorsDistribution.currentPeriod, 'y');\n          const numberOfBuckets = 15;\n          expect(countSum).to.equal((appleTransaction.failureRate + bananaTransaction.failureRate) * numberOfBuckets);\n        });","file":"apm_api_integration/tests/errors/distribution.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same start time when comparison is enabled","suites":["errors distribution","without comparison","displays correct start in errors distribution chart"],"updatePoint":{"line":96,"column":60,"index":3473},"line":96,"code":"          it('has same start time when comparison is enabled', () => {\n            expect(first(errorsDistribution.currentPeriod)?.x).to.equal(first(errorsDistributionWithComparison.currentPeriod)?.x);\n          });","file":"apm_api_integration/tests/errors/distribution.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"displays combined number of occurrences","suites":["errors distribution","displays occurrences for type \"apple transaction\" only"],"updatePoint":{"line":111,"column":51,"index":4065},"line":111,"code":"        it('displays combined number of occurrences', () => {\n          const countSum = sumBy(errorsDistribution.currentPeriod, 'y');\n          const numberOfBuckets = 15;\n          expect(countSum).to.equal(appleTransaction.failureRate * numberOfBuckets);\n        });","file":"apm_api_integration/tests/errors/distribution.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns some data","suites":["errors distribution","with comparison","when data is returned"],"updatePoint":{"line":131,"column":31,"index":4836},"line":131,"code":"          it('returns some data', () => {\n            const hasCurrentPeriodData = errorsDistribution.currentPeriod.some(({\n              y\n            }) => isFiniteNumber(y));\n            const hasPreviousPeriodData = errorsDistribution.previousPeriod.some(({\n              y\n            }) => isFiniteNumber(y));\n            expect(hasCurrentPeriodData).to.equal(true);\n            expect(hasPreviousPeriodData).to.equal(true);\n          });","file":"apm_api_integration/tests/errors/distribution.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same start time for both periods","suites":["errors distribution","with comparison","when data is returned"],"updatePoint":{"line":141,"column":50,"index":5300},"line":141,"code":"          it('has same start time for both periods', () => {\n            expect(first(errorsDistribution.currentPeriod)?.x).to.equal(first(errorsDistribution.previousPeriod)?.x);\n          });","file":"apm_api_integration/tests/errors/distribution.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same end time for both periods","suites":["errors distribution","with comparison","when data is returned"],"updatePoint":{"line":144,"column":48,"index":5491},"line":144,"code":"          it('has same end time for both periods', () => {\n            expect(last(errorsDistribution.currentPeriod)?.x).to.equal(last(errorsDistribution.previousPeriod)?.x);\n          });","file":"apm_api_integration/tests/errors/distribution.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns same number of buckets for both periods","suites":["errors distribution","with comparison","when data is returned"],"updatePoint":{"line":147,"column":61,"index":5693},"line":147,"code":"          it('returns same number of buckets for both periods', () => {\n            expect(errorsDistribution.currentPeriod.length).to.equal(errorsDistribution.previousPeriod.length);\n          });","file":"apm_api_integration/tests/errors/distribution.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same start time for both periods","suites":["errors distribution","with comparison","when no data is returned"],"updatePoint":{"line":163,"column":50,"index":6301},"line":163,"code":"          it('has same start time for both periods', () => {\n            expect(first(errorsDistribution.currentPeriod)?.x).to.equal(first(errorsDistribution.previousPeriod)?.x);\n          });","file":"apm_api_integration/tests/errors/distribution.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same end time for both periods","suites":["errors distribution","with comparison","when no data is returned"],"updatePoint":{"line":166,"column":48,"index":6492},"line":166,"code":"          it('has same end time for both periods', () => {\n            expect(last(errorsDistribution.currentPeriod)?.x).to.equal(last(errorsDistribution.previousPeriod)?.x);\n          });","file":"apm_api_integration/tests/errors/distribution.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns same number of buckets for both periods","suites":["errors distribution","with comparison","when no data is returned"],"updatePoint":{"line":169,"column":61,"index":6694},"line":169,"code":"          it('returns same number of buckets for both periods', () => {\n            expect(errorsDistribution.currentPeriod.length).to.equal(errorsDistribution.previousPeriod.length);\n          });","file":"apm_api_integration/tests/errors/distribution.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles empty state","suites":[],"updatePoint":{"line":45,"column":27,"index":1591},"line":45,"code":"    it('handles empty state', async () => {\n      const response = await callApi();\n      expect(response.status).to.be(200);\n      expect(response.body.errorGroups).to.empty();\n    });","file":"apm_api_integration/tests/errors/error_group_list.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct number of errors","suites":["errors group","returns the correct data"],"updatePoint":{"line":95,"column":44,"index":3855},"line":95,"code":"        it('returns correct number of errors', () => {\n          expect(errorGroups.length).to.equal(2);\n          expect(errorGroups.map(error => error.name).sort()).to.eql(['error 1', 'error 2']);\n        });","file":"apm_api_integration/tests/errors/error_group_list.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct occurences","suites":["errors group","returns the correct data"],"updatePoint":{"line":99,"column":38,"index":4060},"line":99,"code":"        it('returns correct occurences', () => {\n          const numberOfBuckets = 15;\n          expect(errorGroups.map(error => error.occurrences).sort()).to.eql([appleTransaction.failureRate * numberOfBuckets, bananaTransaction.failureRate * numberOfBuckets]);\n        });","file":"apm_api_integration/tests/errors/error_group_list.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":47,"column":31,"index":1641},"line":47,"code":"    it('handles the empty state', async () => {\n      const response = await callApi();\n      expect(response.status).to.be(200);\n      expect(response.body.occurrencesCount).to.be(0);\n    });","file":"apm_api_integration/tests/errors/group_id.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"displays correct number of occurrences","suites":["error group id","return correct data"],"updatePoint":{"line":80,"column":50,"index":2565},"line":80,"code":"        it('displays correct number of occurrences', () => {\n          const numberOfBuckets = 15;\n          expect(errorsDistribution.occurrencesCount).to.equal(bananaTransaction.failureRate * numberOfBuckets);\n        });","file":"apm_api_integration/tests/errors/group_id.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":51,"column":31,"index":1852},"line":51,"code":"    it('handles the empty state', async () => {\n      const response = await callApi();\n      expect(response.status).to.be(200);\n      expect(response.body.topErroneousTransactions).to.be.empty();\n    });","file":"apm_api_integration/tests/errors/top_erroneous_transactions/top_erroneous_transactions.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"displays the correct number of occurrences","suites":["returns the correct data","without comparison"],"updatePoint":{"line":92,"column":54,"index":3062},"line":92,"code":"        it('displays the correct number of occurrences', () => {\n          const {\n            topErroneousTransactions\n          } = erroneousTransactions;\n          expect(topErroneousTransactions.length).to.be(2);\n          const firstTransaction = topErroneousTransactions.find(x => x.transactionName === firstTransactionName);\n          expect(firstTransaction).to.not.be(undefined);\n          expect(firstTransaction?.occurrences).to.be(firstTransactionFailureRate * numberOfBuckets);\n          const secondTransaction = topErroneousTransactions.find(x => x.transactionName === secondTransactionName);\n          expect(secondTransaction).to.not.be(undefined);\n          expect(secondTransaction?.occurrences).to.be(secondTransactionFailureRate * numberOfBuckets);\n        });","file":"apm_api_integration/tests/errors/top_erroneous_transactions/top_erroneous_transactions.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"displays the correct number of occurrences in time series","suites":["returns the correct data","without comparison"],"updatePoint":{"line":104,"column":69,"index":3859},"line":104,"code":"        it('displays the correct number of occurrences in time series', () => {\n          const {\n            topErroneousTransactions\n          } = erroneousTransactions;\n          const firstTransaction = topErroneousTransactions.find(x => x.transactionName === firstTransactionName);\n          const firstErrorCount = sumBy(firstTransaction?.currentPeriodTimeseries, 'y');\n          expect(firstErrorCount).to.be(firstTransactionFailureRate * numberOfBuckets);\n          const secondTransaction = topErroneousTransactions.find(x => x.transactionName === secondTransactionName);\n          const secondErrorCount = sumBy(secondTransaction?.currentPeriodTimeseries, 'y');\n          expect(secondErrorCount).to.be(secondTransactionFailureRate * numberOfBuckets);\n        });","file":"apm_api_integration/tests/errors/top_erroneous_transactions/top_erroneous_transactions.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns some data","suites":["returns the correct data","with comparison","when there are data for the time periods"],"updatePoint":{"line":133,"column":31,"index":5240},"line":133,"code":"          it('returns some data', () => {\n            const {\n              topErroneousTransactions\n            } = erroneousTransactions;\n            const hasCurrentPeriodData = topErroneousTransactions[0].currentPeriodTimeseries.some(({\n              y\n            }) => isFiniteNumber(y));\n            const hasPreviousPeriodData = topErroneousTransactions[0].previousPeriodTimeseries.some(({\n              y\n            }) => isFiniteNumber(y));\n            expect(hasCurrentPeriodData).to.be(true);\n            expect(hasPreviousPeriodData).to.be(true);\n          });","file":"apm_api_integration/tests/errors/top_erroneous_transactions/top_erroneous_transactions.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has the same start time for both periods","suites":["returns the correct data","with comparison","when there are data for the time periods"],"updatePoint":{"line":146,"column":54,"index":5838},"line":146,"code":"          it('has the same start time for both periods', () => {\n            const {\n              topErroneousTransactions\n            } = erroneousTransactions;\n            expect(first(topErroneousTransactions[0].currentPeriodTimeseries)?.x).to.be(first(topErroneousTransactions[0].previousPeriodTimeseries)?.x);\n          });","file":"apm_api_integration/tests/errors/top_erroneous_transactions/top_erroneous_transactions.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same end time for both periods","suites":["returns the correct data","with comparison","when there are data for the time periods"],"updatePoint":{"line":152,"column":48,"index":6162},"line":152,"code":"          it('has same end time for both periods', () => {\n            const {\n              topErroneousTransactions\n            } = erroneousTransactions;\n            expect(last(topErroneousTransactions[0].currentPeriodTimeseries)?.x).to.be(last(topErroneousTransactions[0].previousPeriodTimeseries)?.x);\n          });","file":"apm_api_integration/tests/errors/top_erroneous_transactions/top_erroneous_transactions.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns same number of buckets for both periods","suites":["returns the correct data","with comparison","when there are data for the time periods"],"updatePoint":{"line":158,"column":61,"index":6497},"line":158,"code":"          it('returns same number of buckets for both periods', () => {\n            const {\n              topErroneousTransactions\n            } = erroneousTransactions;\n            expect(topErroneousTransactions[0].currentPeriodTimeseries.length).to.be(topErroneousTransactions[0].previousPeriodTimeseries.length);\n          });","file":"apm_api_integration/tests/errors/top_erroneous_transactions/top_erroneous_transactions.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns an empty array","suites":["returns the correct data","with comparison","when there are no data for the time period"],"updatePoint":{"line":166,"column":36,"index":6886},"line":166,"code":"          it('returns an empty array', async () => {\n            const response = await callApi({\n              path: {\n                groupId: '0000000000000000000000Error test'\n              },\n              query: {\n                start: '2021-01-03T00:00:00.000Z',\n                end: '2021-01-03T00:15:00.000Z',\n                offset: '1d'\n              }\n            });\n            const {\n              body: {\n                topErroneousTransactions\n              }\n            } = response;\n            expect(topErroneousTransactions).to.be.empty();\n          });","file":"apm_api_integration/tests/errors/top_erroneous_transactions/top_erroneous_transactions.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles empty state","suites":[],"updatePoint":{"line":49,"column":27,"index":1751},"line":49,"code":"    it('handles empty state', async () => {\n      const response = await callApi();\n      expect(response.status).to.be(200);\n      expect(response.body.errorGroups).to.empty();\n    });","file":"apm_api_integration/tests/errors/top_errors_for_transaction/top_errors_main_stats.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct number of errors and error data","suites":["top errors for transaction","returns the correct data"],"updatePoint":{"line":85,"column":59,"index":2798},"line":85,"code":"        it('returns correct number of errors and error data', () => {\n          const numberOfBuckets = 15;\n          expect(errorGroups.length).to.equal(2);\n          const firstErrorId = `Error 1 transaction ${firstTransactionName}`;\n          const firstError = errorGroups.find(x => x.groupId === firstErrorId);\n          expect(firstError).to.not.be(undefined);\n          expect(firstError?.groupId).to.be(firstErrorId);\n          expect(firstError?.name).to.be(firstErrorId);\n          expect(firstError?.occurrences).to.be(firstTransactionFailureRate * numberOfBuckets);\n          expect(firstError?.lastSeen).to.be(moment(end).startOf('minute').valueOf());\n          const secondErrorId = `Error 2 transaction ${firstTransactionName}`;\n          const secondError = errorGroups.find(x => x.groupId === secondErrorId);\n          expect(secondError).to.not.be(undefined);\n          expect(secondError?.groupId).to.be(secondErrorId);\n          expect(secondError?.name).to.be(secondErrorId);\n          expect(secondError?.occurrences).to.be(firstTransactionFailureRate * numberOfBuckets);\n          expect(secondError?.lastSeen).to.be(moment(end).startOf('minute').valueOf());\n        });","file":"apm_api_integration/tests/errors/top_errors_for_transaction/top_errors_main_stats.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"APIs can't be accessed by logstash_read user","suites":[],"updatePoint":{"line":277,"column":52,"index":8113},"line":277,"code":"    it(`APIs can't be accessed by logstash_read user`, async () => {\n      const username = 'logstash_read';\n      const roleName = 'logstash_read';\n      const password = `${username}-password`;\n\n      try {\n        await security.role.create(roleName, {\n          elasticsearch: elasticsearchPrivileges\n        });\n        await security.user.create(username, {\n          password,\n          roles: [roleName],\n          full_name: 'a kibana user'\n        });\n        await executeRequests({\n          username,\n          password,\n          expectation: 'forbidden'\n        });\n      } finally {\n        await security.role.delete(roleName);\n        await security.user.delete(username);\n      }\n    });","file":"apm_api_integration/tests/feature_controls.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"APIs can be accessed by global_all user","suites":[],"updatePoint":{"line":301,"column":47,"index":8815},"line":301,"code":"    it('APIs can be accessed by global_all user', async () => {\n      const username = 'global_all';\n      const roleName = 'global_all';\n      const password = `${username}-password`;\n\n      try {\n        await security.role.create(roleName, {\n          elasticsearch: elasticsearchPrivileges,\n          kibana: [{\n            base: ['all'],\n            spaces: ['*']\n          }]\n        });\n        await security.user.create(username, {\n          password,\n          roles: [roleName],\n          full_name: 'a kibana user'\n        });\n        await executeRequests({\n          username,\n          password,\n          expectation: 'response'\n        });\n      } finally {\n        await security.role.delete(roleName);\n        await security.user.delete(username);\n      }\n    }); // this could be any role which doesn't have access to the APM feature","file":"apm_api_integration/tests/feature_controls.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"APIs can't be accessed by dashboard_all user","suites":[],"updatePoint":{"line":330,"column":52,"index":9675},"line":330,"code":"    it(`APIs can't be accessed by dashboard_all user`, async () => {\n      const username = 'dashboard_all';\n      const roleName = 'dashboard_all';\n      const password = `${username}-password`;\n\n      try {\n        await security.role.create(roleName, {\n          elasticsearch: elasticsearchPrivileges,\n          kibana: [{\n            feature: {\n              dashboard: ['all']\n            },\n            spaces: ['*']\n          }]\n        });\n        await security.user.create(username, {\n          password,\n          roles: [roleName],\n          full_name: 'a kibana user'\n        });\n        await executeRequests({\n          username,\n          password,\n          expectation: 'forbidden'\n        });\n      } finally {\n        await security.role.delete(roleName);\n        await security.user.delete(username);\n      }\n    });","file":"apm_api_integration/tests/feature_controls.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"user_1 can access APIs in space_1","suites":["spaces"],"updatePoint":{"line":403,"column":43,"index":11786},"line":403,"code":"      it('user_1 can access APIs in space_1', async () => {\n        await executeRequests({\n          username,\n          password,\n          expectation: 'response',\n          spaceId: space1Id\n        });\n      });","file":"apm_api_integration/tests/feature_controls.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"user_1 can't access APIs in space_2","suites":["spaces"],"updatePoint":{"line":411,"column":45,"index":12005},"line":411,"code":"      it(`user_1 can't access APIs in space_2`, async () => {\n        await executeRequests({\n          username,\n          password,\n          expectation: 'forbidden',\n          spaceId: space2Id\n        });\n      });","file":"apm_api_integration/tests/feature_controls.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":19,"column":31,"index":684},"line":19,"code":"    it('handles the empty state', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint: `GET /internal/apm/has_data`\n      });\n      expect(response.status).to.be(200);\n      expect(response.body.hasData).to.be(false);\n    });","file":"apm_api_integration/tests/historical_data/has_data.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns hasData: true","suites":[],"updatePoint":{"line":31,"column":29,"index":1065},"line":31,"code":"    it('returns hasData: true', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint: `GET /internal/apm/has_data`\n      });\n      expect(response.status).to.be(200);\n      expect(response.body.hasData).to.be(true);\n    });","file":"apm_api_integration/tests/historical_data/has_data.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":41,"column":31,"index":1366},"line":41,"code":"    it('handles the empty state', async () => {\n      const response = await callApi('synth-go');\n      expect(response.status).to.be(200);\n      expect(response.body.containerIds.length).to.be(0);\n      expect(response.body.hostNames.length).to.be(0);\n      expect(response.body.podNames.length).to.be(0);\n    });","file":"apm_api_integration/tests/infrastructure/infrastructure_attributes.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns arrays of container ids and pod names","suites":["when data is loaded","when service runs in container"],"updatePoint":{"line":63,"column":57,"index":2106},"line":63,"code":"        it('returns arrays of container ids and pod names', async () => {\n          const response = await callApi('synth-go');\n          expect(response.status).to.be(200);\n          expect(response.body.containerIds.length).to.be(1);\n          expect(response.body.hostNames.length).to.be(1);\n          expect(response.body.podNames.length).to.be(1);\n        });","file":"apm_api_integration/tests/infrastructure/infrastructure_attributes.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns array of host names","suites":["when data is loaded","when service does NOT run in container"],"updatePoint":{"line":72,"column":39,"index":2528},"line":72,"code":"        it('returns array of host names', async () => {\n          const response = await callApi('synth-java');\n          expect(response.status).to.be(200);\n          expect(response.body.containerIds.length).to.be(0);\n          expect(response.body.hostNames.length).to.be(1);\n          expect(response.body.podNames.length).to.be(0);\n        });","file":"apm_api_integration/tests/infrastructure/infrastructure_attributes.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns response without `_inspect`","suites":["when omitting `_inspect` query param"],"updatePoint":{"line":22,"column":45,"index":891},"line":22,"code":"      it('returns response without `_inspect`', async () => {\n        const {\n          status,\n          body\n        } = await apmApiClient.readUser({\n          endpoint: 'GET /internal/apm/environments',\n          params: {\n            query: {\n              start: metadata.start,\n              end: metadata.end\n            }\n          }\n        });\n        expect(status).to.be(200);\n        expect(body._inspect).to.be(undefined);\n      });","file":"apm_api_integration/tests/inspect/inspect.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"for environments","suites":["when passing `_inspect` as query param","elasticsearch calls made with end-user auth are returned"],"updatePoint":{"line":41,"column":28,"index":1476},"line":41,"code":"        it('for environments', async () => {\n          const {\n            status,\n            body\n          } = await apmApiClient.readUser({\n            endpoint: 'GET /internal/apm/environments',\n            params: {\n              query: {\n                start: metadata.start,\n                end: metadata.end,\n                _inspect: true\n              }\n            }\n          });\n          expect(status).to.be(200);\n          expect(body._inspect).not.to.be.empty(); // @ts-expect-error\n\n          expect(Object.keys(body._inspect[0])).to.eql(['id', 'json', 'name', 'response', 'startTime', 'stats', 'status']);\n        });","file":"apm_api_integration/tests/inspect/inspect.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"for custom links","suites":["when passing `_inspect` as query param","elasticsearch calls made with internal user are not return"],"updatePoint":{"line":62,"column":28,"index":2210},"line":62,"code":"        it('for custom links', async () => {\n          const {\n            status,\n            body\n          } = await apmApiClient.readUser({\n            endpoint: 'GET /internal/apm/settings/custom_links',\n            params: {\n              query: {\n                'service.name': 'opbeans-node',\n                'transaction.type': 'request',\n                _inspect: true\n              }\n            }\n          });\n          expect(status).to.be(200);\n          expect(body._inspect).to.eql([]);\n        });","file":"apm_api_integration/tests/inspect/inspect.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"for agent configs","suites":["when passing `_inspect` as query param","elasticsearch calls made with internal user are not return"],"updatePoint":{"line":79,"column":29,"index":2728},"line":79,"code":"        it('for agent configs', async () => {\n          const {\n            status,\n            body\n          } = await apmApiClient.readUser({\n            endpoint: 'GET /api/apm/settings/agent-configuration',\n            params: {\n              query: {\n                _inspect: true\n              }\n            }\n          });\n          expect(status).to.be(200);\n          expect(body._inspect).to.eql([]);\n        });","file":"apm_api_integration/tests/inspect/inspect.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns same avg latency value for Transaction-based and Metric-based data","suites":["when data is loaded ","compare latency value between service inventory and service maps"],"updatePoint":{"line":86,"column":86,"index":3554},"line":86,"code":"        it('returns same avg latency value for Transaction-based and Metric-based data', () => {\n          const expectedLatencyAvgValueMs = GO_DEV_RATE * GO_DEV_DURATION / GO_DEV_RATE * 1000;\n          [latencyTransactionValues.serviceMapsNodeDetailsLatency, latencyTransactionValues.serviceInventoryLatency, latencyMetricValues.serviceMapsNodeDetailsLatency, latencyMetricValues.serviceInventoryLatency].forEach(value => expect(value).to.be.equal(expectedLatencyAvgValueMs));\n        });","file":"apm_api_integration/tests/latency/service_maps.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"contains CPU usage and System memory usage chart data","suites":["for opbeans-node","returns metrics data"],"updatePoint":{"line":41,"column":65,"index":1578},"line":41,"code":"        it('contains CPU usage and System memory usage chart data', async () => {\n          expect(chartsResponse.status).to.be(200);\n          expectSnapshot(chartsResponse.body.charts.map(chart => chart.title)).toMatchInline(`\n                          Array [\n                            \"CPU usage\",\n                            \"System memory usage\",\n                          ]\n                      `);\n        });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series","suites":["for opbeans-node","returns metrics data","CPU usage"],"updatePoint":{"line":57,"column":32,"index":2199},"line":57,"code":"          it('has correct series', () => {\n            expect(cpuUsageChart).to.not.empty();\n            expectSnapshot(cpuUsageChart?.series.map(({\n              title\n            }) => title)).toMatchInline(`\n                              Array [\n                                \"System max\",\n                                \"System average\",\n                                \"Process max\",\n                                \"Process average\",\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series overall values","suites":["for opbeans-node","returns metrics data","CPU usage"],"updatePoint":{"line":70,"column":47,"index":2733},"line":70,"code":"          it('has correct series overall values', () => {\n            expectSnapshot(cpuUsageChart?.series.map(({\n              overallValue\n            }) => overallValue)).toMatchInline(`\n                Array [\n                  0.714,\n                  0.3877,\n                  0.75,\n                  0.2543,\n                ]\n              `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series","suites":["for opbeans-node","returns metrics data","System memory usage (using 'system.memory' fields to calculate the memory usage)"],"updatePoint":{"line":90,"column":32,"index":3420},"line":90,"code":"          it('has correct series', () => {\n            expect(systemMemoryUsageChart).to.not.empty();\n            expectSnapshot(systemMemoryUsageChart?.series.map(({\n              title\n            }) => title)).toMatchInline(`\n                              Array [\n                                \"Max\",\n                                \"Average\",\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series overall values","suites":["for opbeans-node","returns metrics data","System memory usage (using 'system.memory' fields to calculate the memory usage)"],"updatePoint":{"line":101,"column":47,"index":3860},"line":101,"code":"          it('has correct series overall values', () => {\n            expectSnapshot(systemMemoryUsageChart?.series.map(({\n              overallValue\n            }) => overallValue)).toMatchInline(`\n                Array [\n                  0.722093920925555,\n                  0.718173546796348,\n                ]\n              `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct chart data","suites":["for opbeans-java","returns metrics data"],"updatePoint":{"line":134,"column":34,"index":4900},"line":134,"code":"        it('has correct chart data', async () => {\n          expect(chartsResponse.status).to.be(200);\n          expectSnapshot(chartsResponse.body.charts.map(chart => chart.title)).toMatchInline(`\n                          Array [\n                            \"CPU usage\",\n                            \"System memory usage\",\n                            \"Heap Memory\",\n                            \"Non-Heap Memory\",\n                            \"Thread Count\",\n                            \"Garbage collection per minute\",\n                            \"Garbage collection time spent per minute\",\n                          ]\n                      `);\n        });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series","suites":["for opbeans-java","returns metrics data","CPU usage"],"updatePoint":{"line":155,"column":32,"index":5788},"line":155,"code":"          it('has correct series', () => {\n            expect(cpuUsageChart).to.not.empty();\n            expectSnapshot(cpuUsageChart?.series.map(({\n              title\n            }) => title)).toMatchInline(`\n                              Array [\n                                \"System max\",\n                                \"System average\",\n                                \"Process max\",\n                                \"Process average\",\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series overall values","suites":["for opbeans-java","returns metrics data","CPU usage"],"updatePoint":{"line":168,"column":47,"index":6322},"line":168,"code":"          it('has correct series overall values', () => {\n            expectSnapshot(cpuUsageChart?.series.map(({\n              overallValue\n            }) => overallValue)).toMatchInline(`\n                              Array [\n                                0.203,\n                                0.178777777777778,\n                                0.01,\n                                0.009,\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has the correct rate","suites":["for opbeans-java","returns metrics data","CPU usage"],"updatePoint":{"line":180,"column":34,"index":6780},"line":180,"code":"          it('has the correct rate', async () => {\n            const yValues = cpuUsageChart?.series.map(serie => first(serie.data)?.y);\n            expectSnapshot(yValues).toMatchInline(`\n                              Array [\n                                0.193,\n                                0.193,\n                                0.009,\n                                0.009,\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series","suites":["for opbeans-java","returns metrics data","System memory usage (using 'system.process.cgroup' fields to calculate the memory usage)"],"updatePoint":{"line":199,"column":32,"index":7582},"line":199,"code":"          it('has correct series', () => {\n            expect(systemMemoryUsageChart).to.not.empty();\n            expectSnapshot(systemMemoryUsageChart?.series.map(({\n              title\n            }) => title)).toMatchInline(`\n                              Array [\n                                \"Max\",\n                                \"Average\",\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series overall values","suites":["for opbeans-java","returns metrics data","System memory usage (using 'system.process.cgroup' fields to calculate the memory usage)"],"updatePoint":{"line":210,"column":47,"index":8022},"line":210,"code":"          it('has correct series overall values', () => {\n            expectSnapshot(systemMemoryUsageChart?.series.map(({\n              overallValue\n            }) => overallValue)).toMatchInline(`\n                              Array [\n                                0.707924703557837,\n                                0.705395980841182,\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has the correct rate","suites":["for opbeans-java","returns metrics data","System memory usage (using 'system.process.cgroup' fields to calculate the memory usage)"],"updatePoint":{"line":220,"column":34,"index":8424},"line":220,"code":"          it('has the correct rate', async () => {\n            const yValues = systemMemoryUsageChart?.series.map(serie => first(serie.data)?.y);\n            expectSnapshot(yValues).toMatchInline(`\n                              Array [\n                                0.707924703557837,\n                                0.707924703557837,\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series","suites":["for opbeans-java","returns metrics data","Heap Memory"],"updatePoint":{"line":237,"column":32,"index":9090},"line":237,"code":"          it('has correct series', () => {\n            expect(cpuUsageChart).to.not.empty();\n            expectSnapshot(cpuUsageChart?.series.map(({\n              title\n            }) => title)).toMatchInline(`\n                              Array [\n                                \"Avg. used\",\n                                \"Avg. committed\",\n                                \"Avg. limit\",\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series overall values","suites":["for opbeans-java","returns metrics data","Heap Memory"],"updatePoint":{"line":249,"column":47,"index":9571},"line":249,"code":"          it('has correct series overall values', () => {\n            expectSnapshot(cpuUsageChart?.series.map(({\n              overallValue\n            }) => overallValue)).toMatchInline(`\n                              Array [\n                                222501617.777778,\n                                374341632,\n                                1560281088,\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has the correct rate","suites":["for opbeans-java","returns metrics data","Heap Memory"],"updatePoint":{"line":260,"column":34,"index":9999},"line":260,"code":"          it('has the correct rate', async () => {\n            const yValues = cpuUsageChart?.series.map(serie => first(serie.data)?.y);\n            expectSnapshot(yValues).toMatchInline(`\n                              Array [\n                                211472896,\n                                374341632,\n                                1560281088,\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series","suites":["for opbeans-java","returns metrics data","Non-Heap Memory"],"updatePoint":{"line":278,"column":32,"index":10692},"line":278,"code":"          it('has correct series', () => {\n            expect(cpuUsageChart).to.not.empty();\n            expectSnapshot(cpuUsageChart?.series.map(({\n              title\n            }) => title)).toMatchInline(`\n                              Array [\n                                \"Avg. used\",\n                                \"Avg. committed\",\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series overall values","suites":["for opbeans-java","returns metrics data","Non-Heap Memory"],"updatePoint":{"line":289,"column":47,"index":11127},"line":289,"code":"          it('has correct series overall values', () => {\n            expectSnapshot(cpuUsageChart?.series.map(({\n              overallValue\n            }) => overallValue)).toMatchInline(`\n                              Array [\n                                138573397.333333,\n                                147677639.111111,\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has the correct rate","suites":["for opbeans-java","returns metrics data","Non-Heap Memory"],"updatePoint":{"line":299,"column":34,"index":11518},"line":299,"code":"          it('has the correct rate', async () => {\n            const yValues = cpuUsageChart?.series.map(serie => first(serie.data)?.y);\n            expectSnapshot(yValues).toMatchInline(`\n                              Array [\n                                138162752,\n                                147386368,\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series","suites":["for opbeans-java","returns metrics data","Thread Count"],"updatePoint":{"line":316,"column":32,"index":12161},"line":316,"code":"          it('has correct series', () => {\n            expect(cpuUsageChart).to.not.empty();\n            expectSnapshot(cpuUsageChart?.series.map(({\n              title\n            }) => title)).toMatchInline(`\n                              Array [\n                                \"Avg. count\",\n                                \"Max count\",\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series overall values","suites":["for opbeans-java","returns metrics data","Thread Count"],"updatePoint":{"line":327,"column":47,"index":12592},"line":327,"code":"          it('has correct series overall values', () => {\n            expectSnapshot(cpuUsageChart?.series.map(({\n              overallValue\n            }) => overallValue)).toMatchInline(`\n                              Array [\n                                44.4444444444444,\n                                45,\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has the correct rate","suites":["for opbeans-java","returns metrics data","Thread Count"],"updatePoint":{"line":337,"column":34,"index":12969},"line":337,"code":"          it('has the correct rate', async () => {\n            const yValues = cpuUsageChart?.series.map(serie => first(serie.data)?.y);\n            expectSnapshot(yValues).toMatchInline(`\n                              Array [\n                                44,\n                                44,\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series","suites":["for opbeans-java","returns metrics data","Garbage collection per minute"],"updatePoint":{"line":354,"column":32,"index":13610},"line":354,"code":"          it('has correct series', () => {\n            expect(cpuUsageChart).to.not.empty();\n            expectSnapshot(cpuUsageChart?.series.map(({\n              title\n            }) => title)).toMatchInline(`\n                              Array [\n                                \"G1 Old Generation\",\n                                \"G1 Young Generation\",\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series overall values","suites":["for opbeans-java","returns metrics data","Garbage collection per minute"],"updatePoint":{"line":365,"column":47,"index":14058},"line":365,"code":"          it('has correct series overall values', () => {\n            expectSnapshot(cpuUsageChart?.series.map(({\n              overallValue\n            }) => overallValue)).toMatchInline(`\n                Array [\n                  0,\n                  3,\n                ]\n              `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series","suites":["for opbeans-java","returns metrics data","Garbage collection time spent per minute"],"updatePoint":{"line":383,"column":32,"index":14628},"line":383,"code":"          it('has correct series', () => {\n            expect(cpuUsageChart).to.not.empty();\n            expectSnapshot(cpuUsageChart?.series.map(({\n              title\n            }) => title)).toMatchInline(`\n                              Array [\n                                \"G1 Old Generation\",\n                                \"G1 Young Generation\",\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series overall values","suites":["for opbeans-java","returns metrics data","Garbage collection time spent per minute"],"updatePoint":{"line":394,"column":47,"index":15076},"line":394,"code":"          it('has correct series overall values', () => {\n            expectSnapshot(cpuUsageChart?.series.map(({\n              overallValue\n            }) => overallValue)).toMatchInline(`\n                Array [\n                  0,\n                  37500,\n                ]\n              `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"calculates system memory usage using system total field when cgroup limit is equal to 9223372036854771712","suites":["for opbeans-java","returns metrics data","Garbage collection time spent per minute"],"updatePoint":{"line":407,"column":115,"index":15563},"line":407,"code":"      it('calculates system memory usage using system total field when cgroup limit is equal to 9223372036854771712', async () => {\n        const chartsResponse = await apmApiClient.readUser({\n          endpoint: 'GET /internal/apm/services/{serviceName}/metrics/charts',\n          params: {\n            path: {\n              serviceName: 'opbeans-java'\n            },\n            query: {\n              start: '2020-09-08T15:00:30.000Z',\n              end: '2020-09-08T15:05:00.000Z',\n              agentName: 'java',\n              environment: 'ENVIRONMENT_ALL',\n              kuery: ``\n            }\n          }\n        });\n        const systemMemoryUsageChart = chartsResponse.body.charts.find(({\n          key\n        }) => key === 'memory_usage_chart');\n        expect(systemMemoryUsageChart).to.not.empty();\n        expectSnapshot(systemMemoryUsageChart?.series.map(({\n          title\n        }) => title)).toMatchInline(`\n                      Array [\n                        \"Max\",\n                        \"Average\",\n                      ]\n                  `);\n        expectSnapshot(systemMemoryUsageChart?.series.map(({\n          overallValue\n        }) => overallValue)).toMatchInline(`\n                      Array [\n                        0.114523896426499,\n                        0.114002376090415,\n                      ]\n                  `);\n        const yValues = systemMemoryUsageChart?.series.map(serie => first(serie.data)?.y);\n        expectSnapshot(yValues).toMatchInline(`\n                      Array [\n                        0.11383724014064,\n                        0.11383724014064,\n                      ]\n                  `);\n      });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns all metrics chart","suites":["python"],"updatePoint":{"line":107,"column":35,"index":4343},"line":107,"code":"      it('returns all metrics chart', () => {\n        expect(metrics.charts.length).to.be.greaterThan(0);\n        expect(metrics.charts.map(({\n          title\n        }) => title).sort()).to.eql(['Active instances', 'Avg. Duration', 'Cold start', 'Cold start duration', 'Compute usage', 'System memory usage']);\n      });","file":"apm_api_integration/tests/metrics_charts/serverless.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct  value","suites":["python","Avg. Duration"],"updatePoint":{"line":124,"column":48,"index":5060},"line":124,"code":"        }) => it(`returns correct ${title} value`, () => {\n          const avgDurationMetric = metrics.charts.find(chart => {\n            return chart.key === 'avg_duration';\n          });\n          const series = avgDurationMetric?.series.find(item => item.title === title);\n          expect(series?.overallValue).to.eql(expectedValue);\n          const meanValue = meanBy(series?.data.filter(item => item.y !== null), 'y');\n          expect(meanValue).to.eql(expectedValue);\n        }));","file":"apm_api_integration/tests/metrics_charts/serverless.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct overall value","suites":["python","Cold start duration"],"updatePoint":{"line":141,"column":41,"index":5807},"line":141,"code":"        it('returns correct overall value', () => {\n          expect(coldStartDurationMetric?.series[0].overallValue).to.equal(COLD_START_DURATION_PYTHON);\n        });","file":"apm_api_integration/tests/metrics_charts/serverless.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct mean value","suites":["python","Cold start duration"],"updatePoint":{"line":144,"column":38,"index":5972},"line":144,"code":"        it('returns correct mean value', () => {\n          const meanValue = meanBy(coldStartDurationMetric?.series[0]?.data.filter(item => item.y !== null), 'y');\n          expect(meanValue).to.equal(COLD_START_DURATION_PYTHON);\n        });","file":"apm_api_integration/tests/metrics_charts/serverless.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct overall value","suites":["python","Cold start count"],"updatePoint":{"line":156,"column":41,"index":6470},"line":156,"code":"        it('returns correct overall value', () => {\n          expect(coldStartCountMetric?.series[0].overallValue).to.equal(numberOfTransactionsCreated * numberOfPythonInstances);\n        });","file":"apm_api_integration/tests/metrics_charts/serverless.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct sum value","suites":["python","Cold start count"],"updatePoint":{"line":159,"column":37,"index":6658},"line":159,"code":"        it('returns correct sum value', () => {\n          const sumValue = sumBy(coldStartCountMetric?.series[0]?.data.filter(item => item.y !== null), 'y');\n          expect(sumValue).to.equal(numberOfTransactionsCreated * numberOfPythonInstances);\n        });","file":"apm_api_integration/tests/metrics_charts/serverless.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct  value","suites":["python","memory usage"],"updatePoint":{"line":175,"column":48,"index":7270},"line":175,"code":"        }) => it(`returns correct ${title} value`, () => {\n          const memoryUsageMetric = metrics.charts.find(chart => {\n            return chart.key === 'memory_usage_chart';\n          });\n          const series = memoryUsageMetric?.series.find(item => item.title === title);\n          expect(series?.overallValue).to.eql(expectedValue);\n          const meanValue = meanBy(series?.data.filter(item => item.y !== null), 'y');\n          expect(meanValue).to.eql(expectedValue);\n        }));","file":"apm_api_integration/tests/metrics_charts/serverless.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct overall value","suites":["python","Compute usage"],"updatePoint":{"line":194,"column":41,"index":8131},"line":194,"code":"        it('returns correct overall value', () => {\n          expect(computeUsageMetric?.series[0].overallValue).to.equal(expectedValue);\n        });","file":"apm_api_integration/tests/metrics_charts/serverless.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct mean value","suites":["python","Compute usage"],"updatePoint":{"line":197,"column":38,"index":8278},"line":197,"code":"        it('returns correct mean value', () => {\n          const meanValue = meanBy(computeUsageMetric?.series[0]?.data.filter(item => item.y !== 0), 'y');\n          expect(meanValue).to.equal(expectedValue);\n        });","file":"apm_api_integration/tests/metrics_charts/serverless.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct overall value","suites":["python","Active instances"],"updatePoint":{"line":209,"column":41,"index":8757},"line":209,"code":"        it('returns correct overall value', () => {\n          expect(activeInstancesMetric?.series[0].overallValue).to.equal(numberOfPythonInstances);\n        });","file":"apm_api_integration/tests/metrics_charts/serverless.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct sum value","suites":["python","Active instances"],"updatePoint":{"line":212,"column":37,"index":8916},"line":212,"code":"        it('returns correct sum value', () => {\n          const sumValue = sumBy(activeInstancesMetric?.series[0]?.data.filter(item => item.y !== 0), 'y');\n          expect(sumValue).to.equal(numberOfTransactionsCreated * numberOfPythonInstances);\n        });","file":"apm_api_integration/tests/metrics_charts/serverless.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns all metrics chart","suites":["nodejs"],"updatePoint":{"line":228,"column":35,"index":9439},"line":228,"code":"      it('returns all metrics chart', () => {\n        expect(metrics.charts.length).to.be.greaterThan(0);\n        expect(metrics.charts.map(({\n          title\n        }) => title).sort()).to.eql(['Active instances', 'Avg. Duration', 'Cold start', 'Cold start duration', 'Compute usage', 'System memory usage']);\n      });","file":"apm_api_integration/tests/metrics_charts/serverless.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct  value","suites":["nodejs","Avg. Duration"],"updatePoint":{"line":245,"column":48,"index":10156},"line":245,"code":"        }) => it(`returns correct ${title} value`, () => {\n          const avgDurationMetric = metrics.charts.find(chart => {\n            return chart.key === 'avg_duration';\n          });\n          const series = avgDurationMetric?.series.find(item => item.title === title);\n          expect(series?.overallValue).to.eql(expectedValue);\n          const meanValue = meanBy(series?.data.filter(item => item.y !== null), 'y');\n          expect(meanValue).to.eql(expectedValue);\n        }));","file":"apm_api_integration/tests/metrics_charts/serverless.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns 0 overall value","suites":["nodejs","Cold start duration"],"updatePoint":{"line":262,"column":35,"index":10897},"line":262,"code":"        it('returns 0 overall value', () => {\n          expect(coldStartDurationMetric?.series[0].overallValue).to.equal(COLD_START_DURATION_NODE);\n        });","file":"apm_api_integration/tests/metrics_charts/serverless.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns 0 mean value","suites":["nodejs","Cold start duration"],"updatePoint":{"line":265,"column":32,"index":11054},"line":265,"code":"        it('returns 0 mean value', () => {\n          const meanValue = meanBy(coldStartDurationMetric?.series[0]?.data.filter(item => item.y !== null), 'y');\n          expect(meanValue).to.equal(COLD_START_DURATION_NODE);\n        });","file":"apm_api_integration/tests/metrics_charts/serverless.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"does not return cold start count","suites":["nodejs","Cold start count"],"updatePoint":{"line":277,"column":44,"index":11553},"line":277,"code":"        it('does not return cold start count', () => {\n          expect(coldStartCountMetric?.series).to.be.empty();\n        });","file":"apm_api_integration/tests/metrics_charts/serverless.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct  value","suites":["nodejs","memory usage"],"updatePoint":{"line":292,"column":48,"index":12025},"line":292,"code":"        }) => it(`returns correct ${title} value`, () => {\n          const memoryUsageMetric = metrics.charts.find(chart => {\n            return chart.key === 'memory_usage_chart';\n          });\n          const series = memoryUsageMetric?.series.find(item => item.title === title);\n          expect(series?.overallValue).to.eql(expectedValue);\n          const meanValue = meanBy(series?.data.filter(item => item.y !== null), 'y');\n          expect(meanValue).to.eql(expectedValue);\n        }));","file":"apm_api_integration/tests/metrics_charts/serverless.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct overall value","suites":["nodejs","Compute usage"],"updatePoint":{"line":311,"column":41,"index":12886},"line":311,"code":"        it('returns correct overall value', () => {\n          expect(computeUsageMetric?.series[0].overallValue).to.equal(expectedValue);\n        });","file":"apm_api_integration/tests/metrics_charts/serverless.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct mean value","suites":["nodejs","Compute usage"],"updatePoint":{"line":314,"column":38,"index":13033},"line":314,"code":"        it('returns correct mean value', () => {\n          const meanValue = meanBy(computeUsageMetric?.series[0]?.data.filter(item => item.y !== 0), 'y');\n          expect(meanValue).to.equal(expectedValue);\n        });","file":"apm_api_integration/tests/metrics_charts/serverless.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct overall value","suites":["nodejs","Active instances"],"updatePoint":{"line":326,"column":41,"index":13512},"line":326,"code":"        it('returns correct overall value', () => {\n          // there's only one node instance\n          expect(activeInstancesMetric?.series[0].overallValue).to.equal(1);\n        });","file":"apm_api_integration/tests/metrics_charts/serverless.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct sum value","suites":["nodejs","Active instances"],"updatePoint":{"line":330,"column":37,"index":13693},"line":330,"code":"        it('returns correct sum value', () => {\n          const sumValue = sumBy(activeInstancesMetric?.series[0]?.data.filter(item => item.y !== 0), 'y');\n          expect(sumValue).to.equal(numberOfTransactionsCreated);\n        });","file":"apm_api_integration/tests/metrics_charts/serverless.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns false when there is no data","suites":[],"updatePoint":{"line":18,"column":43,"index":668},"line":18,"code":"    it('returns false when there is no data', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint: 'GET /internal/apm/observability_overview/has_data'\n      });\n      expect(response.status).to.be(200);\n      expect(response.body.hasData).to.eql(false);\n    });","file":"apm_api_integration/tests/observability_overview/has_data.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns false when there is only onboarding data","suites":[],"updatePoint":{"line":30,"column":56,"index":1136},"line":30,"code":"    it('returns false when there is only onboarding data', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint: 'GET /internal/apm/observability_overview/has_data'\n      });\n      expect(response.status).to.be(200);\n      expect(response.body.hasData).to.eql(false);\n    });","file":"apm_api_integration/tests/observability_overview/has_data.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns true when there is at least one document on transaction, error or metrics indices","suites":[],"updatePoint":{"line":42,"column":97,"index":1620},"line":42,"code":"    it('returns true when there is at least one document on transaction, error or metrics indices', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint: 'GET /internal/apm/observability_overview/has_data'\n      });\n      expect(response.status).to.be(200);\n      expect(response.body.hasData).to.eql(true);\n    });","file":"apm_api_integration/tests/observability_overview/has_data.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":["when data is not loaded"],"updatePoint":{"line":59,"column":33,"index":2108},"line":59,"code":"      it('handles the empty state', async () => {\n        const response = await apmApiClient.readUser({\n          endpoint: `GET /internal/apm/observability_overview`,\n          params: {\n            query: {\n              start: new Date(start).toISOString(),\n              end: new Date(end).toISOString(),\n              bucketSize,\n              intervalString\n            }\n          }\n        });\n        expect(response.status).to.be(200);\n        expect(response.body.serviceCount).to.be(0);\n        expect(response.body.transactionPerMinute.timeseries.length).to.be(0);\n      });","file":"apm_api_integration/tests/observability_overview/observability_overview.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns same number of service as shown on service inventory API","suites":["Observability overview api ","compare throughput values"],"updatePoint":{"line":115,"column":76,"index":4471},"line":115,"code":"        it('returns same number of service as shown on service inventory API', () => {\n          const {\n            serviceInventoryCount,\n            observabilityOverview\n          } = throughputValues;\n          [serviceInventoryCount, observabilityOverview.serviceCount].forEach(value => expect(value).to.be.equal(2));\n        });","file":"apm_api_integration/tests/observability_overview/observability_overview.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns same throughput value on service inventory and obs throughput count","suites":["Observability overview api ","compare throughput values"],"updatePoint":{"line":122,"column":87,"index":4818},"line":122,"code":"        it('returns same throughput value on service inventory and obs throughput count', () => {\n          const {\n            serviceInventoryThroughputSum,\n            observabilityOverview\n          } = throughputValues;\n          const obsThroughputCount = roundNumber(observabilityOverview.transactionPerMinute.value);\n          [serviceInventoryThroughputSum, obsThroughputCount].forEach(value => expect(value).to.be.equal(roundNumber(GO_PROD_RATE + GO_DEV_RATE + JAVA_PROD_RATE)));\n        });","file":"apm_api_integration/tests/observability_overview/observability_overview.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns same throughput value on service inventory and obs mean throughput timeseries","suites":["Observability overview api ","compare throughput values"],"updatePoint":{"line":130,"column":97,"index":5330},"line":130,"code":"        it('returns same throughput value on service inventory and obs mean throughput timeseries', () => {\n          const {\n            serviceInventoryThroughputSum,\n            observabilityOverview\n          } = throughputValues;\n          const obsThroughputMean = roundNumber(meanBy(observabilityOverview.transactionPerMinute.timeseries, 'y'));\n          [serviceInventoryThroughputSum, obsThroughputMean].forEach(value => expect(value).to.be.equal(roundNumber(GO_PROD_RATE + GO_DEV_RATE + JAVA_PROD_RATE)));\n        });","file":"apm_api_integration/tests/observability_overview/observability_overview.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":42,"column":31,"index":1376},"line":42,"code":"    it('handles the empty state', async () => {\n      const response = await callApi();\n      expect(response.status).to.be(200);\n      expectSnapshot(response.body).toMatchInline(`\n          Object {\n            \"serviceNodes\": Array [],\n          }\n        `);\n    });","file":"apm_api_integration/tests/service_nodes/get_service_nodes.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns service nodes","suites":[],"updatePoint":{"line":70,"column":29,"index":2309},"line":70,"code":"    it('returns service nodes', async () => {\n      const response = await callApi();\n      expect(response.status).to.be(200);\n      expectSnapshot(response.body).toMatchInline(`\n          Object {\n            \"serviceNodes\": Array [\n              Object {\n                \"cpu\": 1,\n                \"heapMemory\": 1000,\n                \"hostName\": \"instance-a\",\n                \"name\": \"instance-a\",\n                \"nonHeapMemory\": 100,\n                \"threadCount\": 25,\n              },\n            ],\n          }\n        `);\n    });","file":"apm_api_integration/tests/service_nodes/get_service_nodes.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles empty state","suites":["when data is not loaded"],"updatePoint":{"line":28,"column":29,"index":1046},"line":28,"code":"      it('handles empty state', async () => {\n        const response = await apmApiClient.readUser({\n          endpoint: 'GET /internal/apm/services/{serviceName}/service_overview_instances/details/{serviceNodeName}',\n          params: {\n            path: {\n              serviceName: 'opbeans-java',\n              serviceNodeName: 'foo'\n            },\n            query: {\n              start,\n              end\n            }\n          }\n        });\n        expect(response.status).to.be(200);\n        expect(response.body).to.eql({});\n      });","file":"apm_api_integration/tests/service_overview/instance_details.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the instance details","suites":["fetch instance details"],"updatePoint":{"line":75,"column":38,"index":2464},"line":75,"code":"      it('returns the instance details', () => {\n        expect(response.body).to.not.eql({});\n      });","file":"apm_api_integration/tests/service_overview/instance_details.spec.ts","skipped":true,"dir":"x-pack/test"},{"name":"return the correct data","suites":["fetch instance details"],"updatePoint":{"line":78,"column":33,"index":2564},"line":78,"code":"      it('return the correct data', () => {\n        expectSnapshot(omit(response.body, '@timestamp')).toMatch();\n      });","file":"apm_api_integration/tests/service_overview/instance_details.spec.ts","skipped":true,"dir":"x-pack/test"},{"name":"handles empty state when instance id not found","suites":["fetch instance details"],"updatePoint":{"line":87,"column":54,"index":2864},"line":87,"code":"    it('handles empty state when instance id not found', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint: 'GET /internal/apm/services/{serviceName}/service_overview_instances/details/{serviceNodeName}',\n        params: {\n          path: {\n            serviceName: 'opbeans-java',\n            serviceNodeName: 'foo'\n          },\n          query: {\n            start,\n            end\n          }\n        }\n      });\n      expect(response.status).to.be(200);\n      expect(response.body).to.eql({});\n    });","file":"apm_api_integration/tests/service_overview/instance_details.spec.ts","skipped":true,"dir":"x-pack/test"},{"name":"handles the empty state","suites":["when data is not loaded"],"updatePoint":{"line":32,"column":33,"index":1352},"line":32,"code":"      it('handles the empty state', async () => {\n        const response = await apmApiClient.readUser({\n          endpoint: 'GET /internal/apm/services/{serviceName}/service_overview_instances/detailed_statistics',\n          params: {\n            path: {\n              serviceName\n            },\n            query: {\n              latencyAggregationType: LatencyAggregationType.avg,\n              start,\n              end,\n              numBuckets: 20,\n              transactionType: 'request',\n              serviceNodeIds: JSON.stringify(await getServiceNodeIds({\n                apmApiClient,\n                start,\n                end\n              })),\n              environment: 'ENVIRONMENT_ALL',\n              kuery: ''\n            }\n          }\n        });\n        expect(response.status).to.be(200);\n        expect(response.body).to.be.eql({\n          currentPeriod: {},\n          previousPeriod: {}\n        });\n      });","file":"apm_api_integration/tests/service_overview/instances_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns a service node item","suites":["fetching data without comparison"],"updatePoint":{"line":97,"column":37,"index":3366},"line":97,"code":"      it('returns a service node item', () => {\n        expect(Object.values(response.body.currentPeriod).length).to.be.greaterThan(0);\n        expect(Object.values(response.body.previousPeriod)).to.eql(0);\n      });","file":"apm_api_integration/tests/service_overview/instances_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns statistics for each service node","suites":["fetching data without comparison"],"updatePoint":{"line":101,"column":50,"index":3596},"line":101,"code":"      it('returns statistics for each service node', async () => {\n        const item = response.body.currentPeriod[serviceNodeIds[0]];\n        expect(item?.cpuUsage?.some(point => isFiniteNumber(point.y))).to.be(true);\n        expect(item?.memoryUsage?.some(point => isFiniteNumber(point.y))).to.be(true);\n        expect(item?.errorRate?.some(point => isFiniteNumber(point.y))).to.be(true);\n        expect(item?.throughput?.some(point => isFiniteNumber(point.y))).to.be(true);\n        expect(item?.latency?.some(point => isFiniteNumber(point.y))).to.be(true);\n      });","file":"apm_api_integration/tests/service_overview/instances_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the right data","suites":["fetching data without comparison"],"updatePoint":{"line":109,"column":32,"index":4149},"line":109,"code":"      it('returns the right data', () => {\n        expectSnapshot(Object.values(response.body.currentPeriod).length).toMatchInline(`1`);\n        expectSnapshot(Object.keys(response.body.currentPeriod)).toMatchInline(`\n            Array [\n              \"31651f3c624b81c55dd4633df0b5b9f9ab06b151121b0404ae796632cd1f87ad\",\n            ]\n          `);\n        expectSnapshot(response.body).toMatch();\n      });","file":"apm_api_integration/tests/service_overview/instances_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns a service node item for current and previous periods","suites":["fetching data with comparison"],"updatePoint":{"line":150,"column":70,"index":5592},"line":150,"code":"      it('returns a service node item for current and previous periods', () => {\n        expect(Object.values(response.body.currentPeriod).length).to.be.greaterThan(0);\n        expect(Object.values(response.body.previousPeriod).length).to.be.greaterThan(0);\n      });","file":"apm_api_integration/tests/service_overview/instances_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns statistics for current and previous periods","suites":["fetching data with comparison"],"updatePoint":{"line":154,"column":61,"index":5851},"line":154,"code":"      it('returns statistics for current and previous periods', () => {\n        const currentPeriodItem = response.body.currentPeriod[serviceNodeIds[0]];\n\n        function hasValidYCoordinate(point) {\n          return isFiniteNumber(point.y);\n        }\n\n        expect(currentPeriodItem?.cpuUsage?.some(hasValidYCoordinate)).to.be(true);\n        expect(currentPeriodItem?.memoryUsage?.some(hasValidYCoordinate)).to.be(true);\n        expect(currentPeriodItem?.errorRate?.some(hasValidYCoordinate)).to.be(true);\n        expect(currentPeriodItem?.throughput?.some(hasValidYCoordinate)).to.be(true);\n        expect(currentPeriodItem?.latency?.some(hasValidYCoordinate)).to.be(true);\n        const previousPeriodItem = response.body.previousPeriod[serviceNodeIds[0]];\n        expect(previousPeriodItem?.cpuUsage?.some(hasValidYCoordinate)).to.be(true);\n        expect(previousPeriodItem?.memoryUsage?.some(hasValidYCoordinate)).to.be(true);\n        expect(previousPeriodItem?.errorRate?.some(hasValidYCoordinate)).to.be(true);\n        expect(previousPeriodItem?.throughput?.some(hasValidYCoordinate)).to.be(true);\n        expect(previousPeriodItem?.latency?.some(hasValidYCoordinate)).to.be(true);\n      });","file":"apm_api_integration/tests/service_overview/instances_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the right data for current and previous periods","suites":["fetching data with comparison"],"updatePoint":{"line":173,"column":65,"index":7058},"line":173,"code":"      it('returns the right data for current and previous periods', () => {\n        expectSnapshot(Object.values(response.body.currentPeriod).length).toMatchInline(`1`);\n        expectSnapshot(Object.values(response.body.previousPeriod).length).toMatchInline(`1`);\n        expectSnapshot(Object.keys(response.body.currentPeriod)).toMatchInline(`\n            Array [\n              \"31651f3c624b81c55dd4633df0b5b9f9ab06b151121b0404ae796632cd1f87ad\",\n            ]\n          `);\n        expectSnapshot(Object.keys(response.body.previousPeriod)).toMatchInline(`\n            Array [\n              \"31651f3c624b81c55dd4633df0b5b9f9ab06b151121b0404ae796632cd1f87ad\",\n            ]\n          `);\n        expectSnapshot(response.body).toMatch();\n      });","file":"apm_api_integration/tests/service_overview/instances_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"matches x-axis on current period and previous period","suites":["fetching data with comparison"],"updatePoint":{"line":188,"column":62,"index":7802},"line":188,"code":"      it('matches x-axis on current period and previous period', () => {\n        const currentLatencyItems = response.body.currentPeriod[serviceNodeIds[0]]?.latency;\n        const previousLatencyItems = response.body.previousPeriod[serviceNodeIds[0]]?.latency;\n        expect(currentLatencyItems?.map(({\n          x\n        }) => x)).to.be.eql(previousLatencyItems?.map(({\n          x\n        }) => x));\n      });","file":"apm_api_integration/tests/service_overview/instances_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":24,"column":31,"index":813},"line":24,"code":"    it('handles the empty state', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint: 'GET /internal/apm/services/{serviceName}/agent',\n        params: {\n          path: {\n            serviceName: 'opbeans-node'\n          },\n          query: {\n            start,\n            end\n          }\n        }\n      });\n      expect(response.status).to.be(200);\n      expect(response.body).to.eql({});\n    });","file":"apm_api_integration/tests/services/agent.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the agent name","suites":[],"updatePoint":{"line":45,"column":30,"index":1366},"line":45,"code":"    it('returns the agent name', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint: 'GET /internal/apm/services/{serviceName}/agent',\n        params: {\n          path: {\n            serviceName: 'opbeans-node'\n          },\n          query: {\n            start,\n            end\n          }\n        }\n      });\n      expect(response.status).to.be(200);\n      expect(response.body).to.eql({\n        agentName: 'nodejs',\n        runtimeName: 'node'\n      });\n    });","file":"apm_api_integration/tests/services/agent.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"fails with a 403 forbidden","suites":["when creating an annotation"],"updatePoint":{"line":52,"column":36,"index":1593},"line":52,"code":"      it('fails with a 403 forbidden', async () => {\n        const response = await request({\n          url: '/api/apm/services/opbeans-java/annotation',\n          method: 'POST',\n          data: {\n            '@timestamp': new Date().toISOString(),\n            message: 'New deployment',\n            tags: ['foo'],\n            service: {\n              version: '1.1',\n              environment: 'production'\n            }\n          }\n        });\n        expect(response.status).to.be(403);\n        expect(response.body.message).to.be('Annotations require at least a gold license or a trial license.');\n      });","file":"apm_api_integration/tests/services/annotations.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"fails with a 400 bad request if data is missing","suites":["when creating an annotation"],"updatePoint":{"line":87,"column":57,"index":2666},"line":87,"code":"      it('fails with a 400 bad request if data is missing', async () => {\n        const response = await request({\n          url: '/api/apm/services/opbeans-java/annotation',\n          method: 'POST'\n        });\n        expect(response.status).to.be(400);\n      });","file":"apm_api_integration/tests/services/annotations.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"fails with a 400 bad request if data is invalid","suites":["when creating an annotation"],"updatePoint":{"line":94,"column":57,"index":2932},"line":94,"code":"      it('fails with a 400 bad request if data is invalid', async () => {\n        const invalidTimestampResponse = await request({\n          url: '/api/apm/services/opbeans-java/annotation',\n          method: 'POST',\n          data: {\n            '@timestamp': 'foo',\n            message: 'foo'\n          }\n        });\n        expect(invalidTimestampResponse.status).to.be(400);\n        const missingServiceVersionResponse = await request({\n          url: '/api/apm/services/opbeans-java/annotation',\n          method: 'POST',\n          data: {\n            '@timestamp': new Date().toISOString(),\n            message: 'New deployment'\n          }\n        });\n        expect(missingServiceVersionResponse.status).to.be(400);\n      });","file":"apm_api_integration/tests/services/annotations.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"completes with a 200 and the created annotation if data is complete and valid","suites":["when creating an annotation"],"updatePoint":{"line":114,"column":87,"index":3696},"line":114,"code":"      it('completes with a 200 and the created annotation if data is complete and valid', async () => {\n        const timestamp = new Date().toISOString();\n        const response = await request({\n          url: '/api/apm/services/opbeans-java/annotation',\n          method: 'POST',\n          data: {\n            '@timestamp': timestamp,\n            message: 'New deployment',\n            tags: ['foo'],\n            service: {\n              version: '1.1',\n              environment: 'production'\n            }\n          }\n        });\n        expect(response.status).to.be(200);\n        expectContainsObj(response.body, {\n          _source: {\n            annotation: {\n              type: 'deployment'\n            },\n            tags: ['apm', 'foo'],\n            message: 'New deployment',\n            '@timestamp': timestamp,\n            service: {\n              name: 'opbeans-java',\n              version: '1.1',\n              environment: 'production'\n            }\n          }\n        });\n      });","file":"apm_api_integration/tests/services/annotations.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"prefills `message` and `tags`","suites":["when creating an annotation"],"updatePoint":{"line":146,"column":39,"index":4652},"line":146,"code":"      it('prefills `message` and `tags`', async () => {\n        const timestamp = new Date().toISOString();\n        const response = await request({\n          url: '/api/apm/services/opbeans-java/annotation',\n          method: 'POST',\n          data: {\n            '@timestamp': timestamp,\n            service: {\n              version: '1.1'\n            }\n          }\n        });\n        expectContainsObj(response.body, {\n          _source: {\n            annotation: {\n              type: 'deployment'\n            },\n            tags: ['apm'],\n            message: '1.1',\n            '@timestamp': timestamp,\n            service: {\n              name: 'opbeans-java',\n              version: '1.1'\n            }\n          }\n        });\n      });","file":"apm_api_integration/tests/services/annotations.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the derived annotations if there are no stored annotations","suites":["when mixing stored and derived annotations"],"updatePoint":{"line":247,"column":76,"index":7480},"line":247,"code":"      it('returns the derived annotations if there are no stored annotations', async () => {\n        const range = {\n          start: new Date(2020, 4, 2, 18).toISOString(),\n          end: new Date(2020, 4, 2, 20).toISOString()\n        };\n        const response = await request({\n          url: `/api/apm/services/${serviceName}/annotation/search?start=${range.start}&end=${range.end}&environment=ENVIRONMENT_ALL`,\n          method: 'GET'\n        });\n        expect(response.status).to.be(200);\n        expect(response.body.annotations.length).to.be(2);\n        expect(response.body.annotations[0].text).to.be('1.1');\n        expect(response.body.annotations[1].text).to.be('1.2');\n      });","file":"apm_api_integration/tests/services/annotations.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the stored annotations only if there are any","suites":["when mixing stored and derived annotations"],"updatePoint":{"line":261,"column":62,"index":8158},"line":261,"code":"      it('returns the stored annotations only if there are any', async () => {\n        const range = {\n          start: new Date(2020, 4, 2, 18).toISOString(),\n          end: new Date(2020, 4, 2, 23).toISOString()\n        };\n        expect((await request({\n          url: `/api/apm/services/${serviceName}/annotation`,\n          method: 'POST',\n          data: {\n            service: {\n              version: '1.3'\n            },\n            '@timestamp': new Date(2020, 4, 2, 21, 30).toISOString()\n          }\n        })).status).to.be(200);\n        const response = await request({\n          url: `/api/apm/services/${serviceName}/annotation/search?start=${range.start}&end=${range.end}&environment=ENVIRONMENT_ALL`,\n          method: 'GET'\n        });\n        expect(response.body.annotations.length).to.be(1);\n        expect(response.body.annotations[0].text).to.be('1.3');\n        const earlierRange = {\n          start: new Date(2020, 4, 2, 18).toISOString(),\n          end: new Date(2020, 4, 2, 20).toISOString()\n        };\n        expect((await request({\n          url: `/api/apm/services/${serviceName}/annotation`,\n          method: 'POST',\n          data: {\n            service: {\n              version: '1.3'\n            },\n            '@timestamp': new Date(2020, 4, 2, 21, 30).toISOString()\n          }\n        })).status).to.be(200);\n        const responseFromEarlierRange = await request({\n          url: `/api/apm/services/${serviceName}/annotation/search?start=${earlierRange.start}&end=${earlierRange.end}&environment=ENVIRONMENT_ALL`,\n          method: 'GET'\n        });\n        expect(responseFromEarlierRange.body.annotations.length).to.be(2);\n        expect(responseFromEarlierRange.body.annotations[0].text).to.be('1.1');\n        expect(responseFromEarlierRange.body.annotations[1].text).to.be('1.2');\n      });","file":"apm_api_integration/tests/services/annotations.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns stored annotations for the given environment","suites":["when mixing stored and derived annotations"],"updatePoint":{"line":304,"column":62,"index":9994},"line":304,"code":"      it('returns stored annotations for the given environment', async () => {\n        expect((await request({\n          url: `/api/apm/services/${serviceName}/annotation`,\n          method: 'POST',\n          data: {\n            service: {\n              version: '1.3'\n            },\n            '@timestamp': new Date(2020, 4, 2, 21, 30).toISOString()\n          }\n        })).status).to.be(200);\n        expect((await request({\n          url: `/api/apm/services/${serviceName}/annotation`,\n          method: 'POST',\n          data: {\n            service: {\n              version: '1.4',\n              environment: 'production'\n            },\n            '@timestamp': new Date(2020, 4, 2, 21, 31).toISOString()\n          }\n        })).status).to.be(200);\n        const range = {\n          start: new Date(2020, 4, 2, 18).toISOString(),\n          end: new Date(2020, 4, 2, 23).toISOString()\n        };\n        const allEnvironmentsResponse = await request({\n          url: `/api/apm/services/${serviceName}/annotation/search?start=${range.start}&end=${range.end}&environment=ENVIRONMENT_ALL`,\n          method: 'GET'\n        });\n        expect(allEnvironmentsResponse.body.annotations.length).to.be(2);\n        const productionEnvironmentResponse = await request({\n          url: `/api/apm/services/${serviceName}/annotation/search?start=${range.start}&end=${range.end}&environment=production`,\n          method: 'GET'\n        });\n        expect(productionEnvironmentResponse.body.annotations.length).to.be(1);\n        expect(productionEnvironmentResponse.body.annotations[0].text).to.be('1.4');\n        const missingEnvironmentsResponse = await request({\n          url: `/api/apm/services/${serviceName}/annotation/search?start=${range.start}&end=${range.end}&environment=ENVIRONMENT_NOT_DEFINED`,\n          method: 'GET'\n        });\n        expect(missingEnvironmentsResponse.body.annotations.length).to.be(1);\n        expect(missingEnvironmentsResponse.body.annotations[0].text).to.be('1.3');\n      });","file":"apm_api_integration/tests/services/annotations.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"annotations are displayed for the service versions in the given time range","suites":["when there are multiple service versions"],"updatePoint":{"line":118,"column":84,"index":3733},"line":118,"code":"      it('annotations are displayed for the service versions in the given time range', async () => {\n        expect(response.annotations.length).to.be(2);\n        expect(response.annotations[0]['@timestamp']).to.be(dates[1].getTime());\n        expect(response.annotations[1]['@timestamp']).to.be(dates[2].getTime());\n        expectSnapshot(response.annotations[0]).toMatchInline(`\n            Object {\n              \"@timestamp\": 1612141200000,\n              \"id\": \"2\",\n              \"text\": \"2\",\n              \"type\": \"version\",\n            }\n          `);\n      });","file":"apm_api_integration/tests/services/derived_annotations.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"annotations are not displayed for the service versions outside of the given time range","suites":["when there are multiple service versions"],"updatePoint":{"line":131,"column":96,"index":4313},"line":131,"code":"      it('annotations are not displayed for the service versions outside of the given time range', () => {\n        expect(response.annotations.some(annotation => {\n          return annotation['@timestamp'] !== dates[0].getTime() && annotation['@timestamp'] !== dates[2].getTime();\n        }));\n      });","file":"apm_api_integration/tests/services/derived_annotations.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles empty state","suites":[],"updatePoint":{"line":54,"column":27,"index":1973},"line":54,"code":"    it('handles empty state', async () => {\n      const response = await callApi();\n      expect(response.status).to.be(200);\n      expect(response.body).to.be.eql({\n        currentPeriod: {},\n        previousPeriod: {}\n      });\n    });","file":"apm_api_integration/tests/services/error_groups/error_groups_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"return detailed statistics for all errors found","suites":["when data is loaded","without data comparison"],"updatePoint":{"line":98,"column":59,"index":3200},"line":98,"code":"        it('return detailed statistics for all errors found', () => {\n          expect(Object.keys(errorGroupsDetailedStatistics.currentPeriod).sort()).to.eql(errorIds);\n        });","file":"apm_api_integration/tests/services/error_groups/error_groups_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct number of occurrencies","suites":["when data is loaded","without data comparison"],"updatePoint":{"line":101,"column":50,"index":3373},"line":101,"code":"        it('returns correct number of occurrencies', () => {\n          const numberOfBuckets = 15;\n          const detailedStatisticsOccurrenciesSum = Object.values(errorGroupsDetailedStatistics.currentPeriod).sort().map(({\n            timeseries\n          }) => {\n            return sumBy(timeseries, 'y');\n          });\n          expect(detailedStatisticsOccurrenciesSum).to.eql([PROD_ID_ERROR_RATE * numberOfBuckets, PROD_LIST_ERROR_RATE * numberOfBuckets]);\n        });","file":"apm_api_integration/tests/services/error_groups/error_groups_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns empty state","suites":["when data is loaded","return empty state when invalid group id"],"updatePoint":{"line":121,"column":31,"index":4185},"line":121,"code":"        it('returns empty state', () => {\n          expect(errorGroupsDetailedStatistics).to.be.eql({\n            currentPeriod: {},\n            previousPeriod: {}\n          });\n        });","file":"apm_api_integration/tests/services/error_groups/error_groups_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns some data","suites":["when data is loaded","with comparison"],"updatePoint":{"line":150,"column":29,"index":5061},"line":150,"code":"        it('returns some data', () => {\n          expect(Object.keys(errorGroupsDetailedStatistics.currentPeriod).length).to.be.greaterThan(0);\n          expect(Object.keys(errorGroupsDetailedStatistics.previousPeriod).length).to.be.greaterThan(0);\n          const hasCurrentPeriodData = Object.values(errorGroupsDetailedStatistics.currentPeriod)[0].timeseries.some(({\n            y\n          }) => isFiniteNumber(y));\n          const hasPreviousPeriodData = Object.values(errorGroupsDetailedStatistics.previousPeriod)[0].timeseries.some(({\n            y\n          }) => isFiniteNumber(y));\n          expect(hasCurrentPeriodData).to.equal(true);\n          expect(hasPreviousPeriodData).to.equal(true);\n        });","file":"apm_api_integration/tests/services/error_groups/error_groups_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same start time for both periods","suites":["when data is loaded","with comparison"],"updatePoint":{"line":162,"column":48,"index":5794},"line":162,"code":"        it('has same start time for both periods', () => {\n          expect(first(Object.values(errorGroupsDetailedStatistics.currentPeriod)[0].timeseries)?.x).to.equal(first(Object.values(errorGroupsDetailedStatistics.previousPeriod)[0].timeseries)?.x);\n        });","file":"apm_api_integration/tests/services/error_groups/error_groups_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same end time for both periods","suites":["when data is loaded","with comparison"],"updatePoint":{"line":165,"column":46,"index":6059},"line":165,"code":"        it('has same end time for both periods', () => {\n          expect(last(Object.values(errorGroupsDetailedStatistics.currentPeriod)[0].timeseries)?.x).to.equal(last(Object.values(errorGroupsDetailedStatistics.previousPeriod)[0].timeseries)?.x);\n        });","file":"apm_api_integration/tests/services/error_groups/error_groups_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns same number of buckets for both periods","suites":["when data is loaded","with comparison"],"updatePoint":{"line":168,"column":59,"index":6335},"line":168,"code":"        it('returns same number of buckets for both periods', () => {\n          expect(Object.values(errorGroupsDetailedStatistics.currentPeriod)[0].timeseries.length).to.equal(Object.values(errorGroupsDetailedStatistics.previousPeriod)[0].timeseries.length);\n        });","file":"apm_api_integration/tests/services/error_groups/error_groups_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles empty state","suites":[],"updatePoint":{"line":46,"column":27,"index":1654},"line":46,"code":"    it('handles empty state', async () => {\n      const response = await callApi();\n      expect(response.status).to.be(200);\n      expect(response.body.errorGroups).to.empty();\n    });","file":"apm_api_integration/tests/services/error_groups/error_groups_main_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct number of occurrences","suites":["when data is loaded","returns the correct data"],"updatePoint":{"line":78,"column":49,"index":2581},"line":78,"code":"        it('returns correct number of occurrences', () => {\n          expect(errorGroupMainStatistics.errorGroups.length).to.equal(2);\n          expect(errorGroupMainStatistics.errorGroups.map(error => error.name).sort()).to.eql([ERROR_NAME_1, ERROR_NAME_2]);\n        });","file":"apm_api_integration/tests/services/error_groups/error_groups_main_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct occurences","suites":["when data is loaded","returns the correct data"],"updatePoint":{"line":82,"column":38,"index":2842},"line":82,"code":"        it('returns correct occurences', () => {\n          const numberOfBuckets = 15;\n          expect(errorGroupMainStatistics.errorGroups.map(error => error.occurrences).sort()).to.eql([PROD_LIST_ERROR_RATE * numberOfBuckets, PROD_ID_ERROR_RATE * numberOfBuckets]);\n        });","file":"apm_api_integration/tests/services/error_groups/error_groups_main_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same last seen value as end date","suites":["when data is loaded","returns the correct data"],"updatePoint":{"line":86,"column":48,"index":3133},"line":86,"code":"        it('has same last seen value as end date', () => {\n          errorGroupMainStatistics.errorGroups.map(error => {\n            expect(error.lastSeen).to.equal(moment(end).startOf('minute').valueOf());\n          });\n        });","file":"apm_api_integration/tests/services/error_groups/error_groups_main_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":42,"column":31,"index":1402},"line":42,"code":"    it('handles the empty state', async () => {\n      const response = await callApi();\n      expect(response.status).to.be(200);\n      expectSnapshot(response.body).toMatchInline(`\n          Object {\n            \"containerId\": \"N/A\",\n            \"host\": \"N/A\",\n          }\n        `);\n    });","file":"apm_api_integration/tests/services/get_service_node_metadata.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns service node metadata","suites":[],"updatePoint":{"line":68,"column":37,"index":2317},"line":68,"code":"    it('returns service node metadata', async () => {\n      const response = await callApi();\n      expect(response.status).to.be(200);\n      expectSnapshot(response.body).toMatchInline(`\n          Object {\n            \"containerId\": \"instance-a\",\n            \"host\": \"instance-a\",\n          }\n        `);\n    });","file":"apm_api_integration/tests/services/get_service_node_metadata.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles empty state","suites":[],"updatePoint":{"line":45,"column":27,"index":1448},"line":45,"code":"    it('handles empty state', async () => {\n      const {\n        status,\n        body\n      } = await callApi();\n      expect(status).to.be(200);\n      expect(body).to.empty();\n    });","file":"apm_api_integration/tests/services/service_details/service_details.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct HTTP status","suites":[],"updatePoint":{"line":71,"column":35,"index":2059},"line":71,"code":"    it('returns correct HTTP status', () => {\n      expect(status).to.be(200);\n    });","file":"apm_api_integration/tests/services/service_details/service_details.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct cloud details","suites":[],"updatePoint":{"line":74,"column":37,"index":2148},"line":74,"code":"    it('returns correct cloud details', () => {\n      const {\n        cloud\n      } = dataConfig;\n      const {\n        provider,\n        availabilityZone,\n        region,\n        machineType,\n        projectName,\n        serviceName: cloudServiceName\n      } = cloud;\n      expect(first(body?.cloud?.availabilityZones)).to.be(availabilityZone);\n      expect(first(body?.cloud?.machineTypes)).to.be(machineType);\n      expect(body?.cloud?.provider).to.be(provider);\n      expect(body?.cloud?.projectName).to.be(projectName);\n      expect(body?.cloud?.serviceName).to.be(cloudServiceName);\n      expect(first(body?.cloud?.regions)).to.be(region);\n    });","file":"apm_api_integration/tests/services/service_details/service_details.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct container details","suites":[],"updatePoint":{"line":93,"column":41,"index":2806},"line":93,"code":"    it('returns correct container details', () => {\n      expect(body?.container?.totalNumberInstances).to.be(1);\n    });","file":"apm_api_integration/tests/services/service_details/service_details.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct serverless details","suites":[],"updatePoint":{"line":96,"column":42,"index":2929},"line":96,"code":"    it('returns correct serverless details', () => {\n      const {\n        cloud,\n        serverless\n      } = dataConfig;\n      const {\n        serviceName: cloudServiceName\n      } = cloud;\n      const {\n        faasTriggerType,\n        firstFunctionName,\n        secondFunctionName\n      } = serverless;\n      expect(body?.serverless?.type).to.be(cloudServiceName);\n      expect(body?.serverless?.functionNames).to.have.length(2);\n      expect(body?.serverless?.functionNames).to.contain(firstFunctionName);\n      expect(body?.serverless?.functionNames).to.contain(secondFunctionName);\n      expect(first(body?.serverless?.faasTriggerTypes)).to.be(faasTriggerType);\n    });","file":"apm_api_integration/tests/services/service_details/service_details.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct service details","suites":[],"updatePoint":{"line":115,"column":39,"index":3603},"line":115,"code":"    it('returns correct service details', () => {\n      const {\n        service\n      } = dataConfig;\n      const {\n        version,\n        runtime,\n        framework,\n        agent\n      } = service;\n      const {\n        name: runTimeName,\n        version: runTimeVersion\n      } = runtime;\n      const {\n        name: agentName,\n        version: agentVersion\n      } = agent;\n      expect(body?.service?.framework).to.be(framework);\n      expect(body?.service?.agent.name).to.be(agentName);\n      expect(body?.service?.agent.version).to.be(agentVersion);\n      expect(body?.service?.runtime?.name).to.be(runTimeName);\n      expect(body?.service?.runtime?.version).to.be(runTimeVersion);\n      expect(first(body?.service?.versions)).to.be(version);\n    });","file":"apm_api_integration/tests/services/service_details/service_details.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles empty infra metrics data for a service node","suites":["fetch service instance"],"updatePoint":{"line":26,"column":61,"index":1024},"line":26,"code":"      it('handles empty infra metrics data for a service node', async () => {\n        const response = await apmApiClient.readUser({\n          endpoint: 'GET /internal/apm/services/{serviceName}/service_overview_instances/details/{serviceNodeName}',\n          params: {\n            path: {\n              serviceName: 'opbeans-node',\n              serviceNodeName: '768120daead4526f5ba3ec583e0b081a19a525843aa5632a5e0b1de3a367f52d'\n            },\n            query: {\n              start,\n              end\n            }\n          }\n        });\n        const body = response.body;\n        const status = response.status;\n        expect(status).to.be(200);\n        expect(body.kubernetes?.pod).to.eql({});\n        expect(body.kubernetes?.deployment).to.eql({});\n        expect(body.kubernetes?.replicaset).to.eql({});\n        expect(body.kubernetes?.container).to.eql({});\n      });","file":"apm_api_integration/tests/services/service_details/service_infra_metrics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles kubernetes metadata for a service node","suites":["fetch service instance"],"updatePoint":{"line":48,"column":56,"index":1900},"line":48,"code":"      it('handles kubernetes metadata for a service node', async () => {\n        const response = await apmApiClient.readUser({\n          endpoint: 'GET /internal/apm/services/{serviceName}/service_overview_instances/details/{serviceNodeName}',\n          params: {\n            path: {\n              serviceName: 'opbeans-java',\n              serviceNodeName: '31651f3c624b81c55dd4633df0b5b9f9ab06b151121b0404ae796632cd1f87ad'\n            },\n            query: {\n              start,\n              end\n            }\n          }\n        });\n        const body = response.body;\n        const status = response.status;\n        expect(status).to.be(200);\n        expect(body.kubernetes?.deployment?.name).to.eql('opbeans-java');\n        expect(body.kubernetes?.pod?.name).to.eql('opbeans-java-5b5f75d696-5brrb');\n        expect(body.kubernetes?.pod?.uid).to.eql('798f59e9-b1b2-11e9-9a96-42010a84004d');\n        expect(body.kubernetes?.namespace).to.eql('default');\n        expect(body.kubernetes?.replicaset?.name).to.eql('opbeans-java-5b5f75d696');\n        expect(body.kubernetes?.container?.name).to.eql('opbeans-java');\n      });","file":"apm_api_integration/tests/services/service_details/service_infra_metrics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles service overview metadata with multiple kubernetes instances","suites":["fetch service overview metadata details"],"updatePoint":{"line":74,"column":78,"index":3122},"line":74,"code":"      it('handles service overview metadata with multiple kubernetes instances', async () => {\n        const response = await apmApiClient.readUser({\n          endpoint: 'GET /internal/apm/services/{serviceName}/metadata/details',\n          params: {\n            path: {\n              serviceName: 'opbeans-java'\n            },\n            query: {\n              start,\n              end\n            }\n          }\n        });\n        const body = response.body;\n        const status = response.status;\n        expect(status).to.be(200);\n        expect(body.kubernetes?.deployments).to.eql(['opbeans-java', 'opbeans-java-2']);\n        expect(body.kubernetes?.namespaces).to.eql(['default']);\n        expect(body.kubernetes?.containerImages).to.eql(['docker.elastic.co/observability-ci/opbeans-java@sha256:dda30dbabe5c43b8bcd62b48a727f04e9d17147443ea3b3ac2edfc44cb0e69fe', 'mysql@sha256:c8f03238ca1783d25af320877f063a36dbfce0daa56a7b4955e6c6e05ab5c70b']);\n        expect(body.kubernetes?.replicasets).to.eql(['opbeans-java-5b5f75d696', 'opbeans-java-5b5f75d697']);\n      });","file":"apm_api_integration/tests/services/service_details/service_infra_metrics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles partial infra metrics data","suites":["fetch service overview metadata details"],"updatePoint":{"line":95,"column":44,"index":4161},"line":95,"code":"      it('handles partial infra metrics data', async () => {\n        const response = await apmApiClient.readUser({\n          endpoint: 'GET /internal/apm/services/{serviceName}/metadata/details',\n          params: {\n            path: {\n              serviceName: 'opbeans-node'\n            },\n            query: {\n              start,\n              end\n            }\n          }\n        });\n        const body = response.body;\n        const status = response.status;\n        expect(status).to.be(200);\n        expect(body.kubernetes?.containerImages).to.eql(['docker.elastic.co/observability-ci/opbeans-node@sha256:f72b0bfdd0ca24e4f9d10ee73cf713a591dbfa40f1fe9404b04e6f2f3e166949', 'k8s.gcr.io/pause:3.1']);\n        expect(body.kubernetes?.deployments).to.eql([]);\n        expect(body.kubernetes?.namespaces).to.eql([]);\n        expect(body.kubernetes?.replicasets).to.eql([]);\n      });","file":"apm_api_integration/tests/services/service_details/service_infra_metrics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles empty infra metrics data","suites":["fetch service overview metadata details"],"updatePoint":{"line":116,"column":42,"index":5048},"line":116,"code":"      it('handles empty infra metrics data', async () => {\n        const response = await apmApiClient.readUser({\n          endpoint: 'GET /internal/apm/services/{serviceName}/metadata/details',\n          params: {\n            path: {\n              serviceName: 'opbeans-ruby'\n            },\n            query: {\n              start,\n              end\n            }\n          }\n        });\n        const body = response.body;\n        const status = response.status;\n        expect(status).to.be(200);\n        expect(body.kubernetes?.containerImages).to.eql([]);\n        expect(body.kubernetes?.namespaces).to.eql([]);\n        expect(body.kubernetes?.namespaces).to.eql([]);\n        expect(body.kubernetes?.replicasets).to.eql([]);\n      });","file":"apm_api_integration/tests/services/service_details/service_infra_metrics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles empty state","suites":[],"updatePoint":{"line":42,"column":27,"index":1383},"line":42,"code":"    it('handles empty state', async () => {\n      const {\n        status,\n        body\n      } = await callApi();\n      expect(status).to.be(200);\n      expect(body).to.empty();\n    });","file":"apm_api_integration/tests/services/service_icons/service_icons.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct HTTP status","suites":[],"updatePoint":{"line":68,"column":35,"index":1992},"line":68,"code":"    it('returns correct HTTP status', () => {\n      expect(status).to.be(200);\n    });","file":"apm_api_integration/tests/services/service_icons/service_icons.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct metadata","suites":[],"updatePoint":{"line":71,"column":32,"index":2076},"line":71,"code":"    it('returns correct metadata', () => {\n      const {\n        agentName,\n        cloud\n      } = dataConfig;\n      const {\n        provider,\n        serviceName: cloudServiceName\n      } = cloud;\n      expect(body.agentName).to.be(agentName);\n      expect(body.cloudProvider).to.be(provider);\n      expect(body.containerType).to.be('Kubernetes');\n      expect(body.serverlessType).to.be(cloudServiceName);\n    });","file":"apm_api_integration/tests/services/service_icons/service_icons.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns services based on the terms enum API and ML data","suites":["with no kuery or environment are set"],"updatePoint":{"line":99,"column":66,"index":3874},"line":99,"code":"      it('returns services based on the terms enum API and ML data', () => {\n        const serviceNames = items.map(item => item.serviceName);\n        expect(serviceNames.sort()).to.eql(['a', 'b', 'c']);\n      });","file":"apm_api_integration/tests/services/sorted_and_filtered_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"does not return any services","suites":["with kuery set"],"updatePoint":{"line":111,"column":38,"index":4260},"line":111,"code":"      it('does not return any services', () => {\n        expect(items.length).to.be(0);\n      });","file":"apm_api_integration/tests/services/sorted_and_filtered_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns services for production only","suites":["with environment set to production"],"updatePoint":{"line":122,"column":46,"index":4588},"line":122,"code":"      it('returns services for production only', () => {\n        const serviceNames = items.map(item => item.serviceName);\n        expect(serviceNames.sort()).to.eql(['a']);\n      });","file":"apm_api_integration/tests/services/sorted_and_filtered_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":51,"column":31,"index":1866},"line":51,"code":"    it('handles the empty state', async () => {\n      const response = await callApi();\n      expect(response.status).to.be(200);\n      expect(response.body.currentPeriod.length).to.be(0);\n      expect(response.body.previousPeriod.length).to.be(0);\n    });","file":"apm_api_integration/tests/services/throughput.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns some transactions data","suites":["Throughput chart api","compare transactions and metrics based throughput"],"updatePoint":{"line":107,"column":42,"index":4328},"line":107,"code":"        it('returns some transactions data', () => {\n          expect(throughputTransactions.currentPeriod.length).to.be.greaterThan(0);\n          const hasData = throughputTransactions.currentPeriod.some(({\n            y\n          }) => isFiniteNumber(y));\n          expect(hasData).to.equal(true);\n        });","file":"apm_api_integration/tests/services/throughput.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns some metrics data","suites":["Throughput chart api","compare transactions and metrics based throughput"],"updatePoint":{"line":114,"column":37,"index":4635},"line":114,"code":"        it('returns some metrics data', () => {\n          expect(throughputMetrics.currentPeriod.length).to.be.greaterThan(0);\n          const hasData = throughputMetrics.currentPeriod.some(({\n            y\n          }) => isFiniteNumber(y));\n          expect(hasData).to.equal(true);\n        });","file":"apm_api_integration/tests/services/throughput.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same mean value for metrics and transactions data","suites":["Throughput chart api","compare transactions and metrics based throughput"],"updatePoint":{"line":121,"column":65,"index":4960},"line":121,"code":"        it('has same mean value for metrics and transactions data', () => {\n          const transactionsMean = meanBy(throughputTransactions.currentPeriod, 'y');\n          const metricsMean = meanBy(throughputMetrics.currentPeriod, 'y');\n          [transactionsMean, metricsMean].forEach(value => expect(roundNumber(value)).to.be.equal(roundNumber(GO_PROD_RATE + GO_DEV_RATE)));\n        });","file":"apm_api_integration/tests/services/throughput.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has a bucket size of 30 seconds for transactions data","suites":["Throughput chart api","compare transactions and metrics based throughput"],"updatePoint":{"line":126,"column":65,"index":5351},"line":126,"code":"        it('has a bucket size of 30 seconds for transactions data', () => {\n          const firstTimerange = throughputTransactions.currentPeriod[0].x;\n          const secondTimerange = throughputTransactions.currentPeriod[1].x;\n          const timeIntervalAsSeconds = (secondTimerange - firstTimerange) / 1000;\n          expect(timeIntervalAsSeconds).to.equal(30);\n        });","file":"apm_api_integration/tests/services/throughput.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has a bucket size of 1 minute for metrics data","suites":["Throughput chart api","compare transactions and metrics based throughput"],"updatePoint":{"line":132,"column":58,"index":5722},"line":132,"code":"        it('has a bucket size of 1 minute for metrics data', () => {\n          const firstTimerange = throughputMetrics.currentPeriod[0].x;\n          const secondTimerange = throughputMetrics.currentPeriod[1].x;\n          const timeIntervalAsMinutes = (secondTimerange - firstTimerange) / 1000 / 60;\n          expect(timeIntervalAsMinutes).to.equal(1);\n        });","file":"apm_api_integration/tests/services/throughput.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns some data","suites":["Throughput chart api","production environment"],"updatePoint":{"line":149,"column":29,"index":6372},"line":149,"code":"        it('returns some data', () => {\n          expect(throughput.currentPeriod.length).to.be.greaterThan(0);\n          const hasData = throughput.currentPeriod.some(({\n            y\n          }) => isFiniteNumber(y));\n          expect(hasData).to.equal(true);\n        });","file":"apm_api_integration/tests/services/throughput.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct average throughput","suites":["Throughput chart api","production environment"],"updatePoint":{"line":156,"column":46,"index":6664},"line":156,"code":"        it('returns correct average throughput', () => {\n          const throughputMean = meanBy(throughput.currentPeriod, 'y');\n          expect(roundNumber(throughputMean)).to.be.equal(roundNumber(GO_PROD_RATE));\n        });","file":"apm_api_integration/tests/services/throughput.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns some data","suites":["Throughput chart api","when synth-java is selected"],"updatePoint":{"line":171,"column":29,"index":7192},"line":171,"code":"        it('returns some data', () => {\n          expect(throughput.currentPeriod.length).to.be.greaterThan(0);\n          const hasData = throughput.currentPeriod.some(({\n            y\n          }) => isFiniteNumber(y));\n          expect(hasData).to.equal(true);\n        });","file":"apm_api_integration/tests/services/throughput.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns throughput related to java agent","suites":["Throughput chart api","when synth-java is selected"],"updatePoint":{"line":178,"column":52,"index":7490},"line":178,"code":"        it('returns throughput related to java agent', () => {\n          const throughputMean = meanBy(throughput.currentPeriod, 'y');\n          expect(roundNumber(throughputMean)).to.be.equal(roundNumber(JAVA_PROD_RATE));\n        });","file":"apm_api_integration/tests/services/throughput.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns some data","suites":["Throughput chart api","time comparisons"],"updatePoint":{"line":195,"column":29,"index":8112},"line":195,"code":"        it('returns some data', () => {\n          expect(throughputResponse.currentPeriod.length).to.be.greaterThan(0);\n          expect(throughputResponse.previousPeriod.length).to.be.greaterThan(0);\n          const hasCurrentPeriodData = throughputResponse.currentPeriod.some(({\n            y\n          }) => isFiniteNumber(y));\n          const hasPreviousPeriodData = throughputResponse.previousPeriod.some(({\n            y\n          }) => isFiniteNumber(y));\n          expect(hasCurrentPeriodData).to.equal(true);\n          expect(hasPreviousPeriodData).to.equal(true);\n        });","file":"apm_api_integration/tests/services/throughput.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same start time for both periods","suites":["Throughput chart api","time comparisons"],"updatePoint":{"line":207,"column":48,"index":8717},"line":207,"code":"        it('has same start time for both periods', () => {\n          expect(first(throughputResponse.currentPeriod)?.x).to.equal(first(throughputResponse.previousPeriod)?.x);\n        });","file":"apm_api_integration/tests/services/throughput.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same end time for both periods","suites":["Throughput chart api","time comparisons"],"updatePoint":{"line":210,"column":46,"index":8902},"line":210,"code":"        it('has same end time for both periods', () => {\n          expect(last(throughputResponse.currentPeriod)?.x).to.equal(last(throughputResponse.previousPeriod)?.x);\n        });","file":"apm_api_integration/tests/services/throughput.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns same number of buckets for both periods","suites":["Throughput chart api","time comparisons"],"updatePoint":{"line":213,"column":59,"index":9098},"line":213,"code":"        it('returns same number of buckets for both periods', () => {\n          expect(throughputResponse.currentPeriod.length).to.be(throughputResponse.previousPeriod.length);\n        });","file":"apm_api_integration/tests/services/throughput.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same mean value for both periods","suites":["Throughput chart api","time comparisons"],"updatePoint":{"line":216,"column":48,"index":9276},"line":216,"code":"        it('has same mean value for both periods', () => {\n          const currentPeriodMean = meanBy(throughputResponse.currentPeriod.filter(item => isFiniteNumber(item.y) && item.y > 0), 'y');\n          const previousPeriodMean = meanBy(throughputResponse.previousPeriod.filter(item => isFiniteNumber(item.y) && item.y > 0), 'y');\n          const currentPeriod = throughputResponse.currentPeriod;\n          const bucketSize = currentPeriod[1].x - currentPeriod[0].x;\n          const durationAsMinutes = bucketSize / 1000 / 60;\n          [currentPeriodMean, previousPeriodMean].every(value => expect(roundNumber(value)).to.be.equal(roundNumber((GO_PROD_RATE + GO_DEV_RATE) / durationAsMinutes)));\n        });","file":"apm_api_integration/tests/services/throughput.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":32,"column":31,"index":1427},"line":32,"code":"    it('handles the empty state', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint: `GET /internal/apm/services`,\n        params: {\n          query: {\n            start,\n            end,\n            environment: ENVIRONMENT_ALL.value,\n            kuery: '',\n            probability: 1\n          }\n        }\n      });\n      expect(response.status).to.be(200);\n      expect(response.body.items.length).to.be(0);\n    });","file":"apm_api_integration/tests/services/top_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns a successful response","suites":["when no additional filters are applied"],"updatePoint":{"line":125,"column":39,"index":4918},"line":125,"code":"      it('returns a successful response', () => {\n        expect(response.status).to.be(200);\n      });","file":"apm_api_integration/tests/services/top_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the correct statistics","suites":["when no additional filters are applied"],"updatePoint":{"line":128,"column":40,"index":5023},"line":128,"code":"      it('returns the correct statistics', () => {\n        const multipleEnvService = response.body.items.find(item => item.serviceName === 'multiple-env-service');\n        const totalRps = config.multiple.prod.rps + config.multiple.dev.rps;\n        expect(multipleEnvService).to.eql({\n          serviceName: 'multiple-env-service',\n          transactionType: 'request',\n          environments: ['production', 'development'],\n          agentName: 'go',\n          latency: 1000 * ((config.multiple.prod.duration * config.multiple.prod.rps + config.multiple.dev.duration * config.multiple.dev.rps) / totalRps),\n          throughput: totalRps * 60,\n          transactionErrorRate: config.multiple.dev.rps / (config.multiple.prod.rps + config.multiple.dev.rps)\n        });\n      });","file":"apm_api_integration/tests/services/top_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns services without transaction data","suites":["when no additional filters are applied"],"updatePoint":{"line":141,"column":51,"index":5813},"line":141,"code":"      it('returns services without transaction data', () => {\n        const serviceNames = response.body.items.map(item => item.serviceName);\n        expect(serviceNames).to.contain('metric-only-service');\n        expect(serviceNames).to.contain('error-only-service');\n      });","file":"apm_api_integration/tests/services/top_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns data only for that environment","suites":["when applying an environment filter"],"updatePoint":{"line":162,"column":48,"index":6507},"line":162,"code":"      it('returns data only for that environment', () => {\n        const multipleEnvService = response.body.items.find(item => item.serviceName === 'multiple-env-service');\n        const totalRps = config.multiple.prod.rps;\n        expect(multipleEnvService).to.eql({\n          serviceName: 'multiple-env-service',\n          transactionType: 'request',\n          environments: ['production'],\n          agentName: 'go',\n          latency: 1000 * (config.multiple.prod.duration * config.multiple.prod.rps / totalRps),\n          throughput: totalRps * 60,\n          transactionErrorRate: 0\n        });\n      });","file":"apm_api_integration/tests/services/top_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns data for that kuery filter only","suites":["when applying a kuery filter"],"updatePoint":{"line":191,"column":49,"index":7590},"line":191,"code":"      it('returns data for that kuery filter only', () => {\n        const multipleEnvService = response.body.items.find(item => item.serviceName === 'multiple-env-service');\n        const totalRps = config.multiple.dev.rps;\n        expect(multipleEnvService).to.eql({\n          serviceName: 'multiple-env-service',\n          transactionType: 'request',\n          environments: ['development'],\n          agentName: 'go',\n          latency: 1000 * (config.multiple.dev.duration * config.multiple.dev.rps / totalRps),\n          throughput: totalRps * 60,\n          transactionErrorRate: 1\n        });\n      });","file":"apm_api_integration/tests/services/top_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns data for the top transaction type that is not a default","suites":["when excluding default transaction types"],"updatePoint":{"line":220,"column":73,"index":8685},"line":220,"code":"      it('returns data for the top transaction type that is not a default', () => {\n        const multipleEnvService = response.body.items.find(item => item.serviceName === 'multiple-env-service');\n        expect(multipleEnvService?.transactionType).to.eql('rpc');\n      });","file":"apm_api_integration/tests/services/top_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"the response is successful","suites":["with the default APM read user","and fetching a list of services"],"updatePoint":{"line":247,"column":38,"index":9633},"line":247,"code":"        it('the response is successful', () => {\n          expect(response.status).to.eql(200);\n        });","file":"apm_api_integration/tests/services/top_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"there is at least one service","suites":["with the default APM read user","and fetching a list of services"],"updatePoint":{"line":250,"column":41,"index":9744},"line":250,"code":"        it('there is at least one service', () => {\n          expect(response.body.items.length).to.be.greaterThan(0);\n        });","file":"apm_api_integration/tests/services/top_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"some items have a health status set","suites":["with the default APM read user","and fetching a list of services"],"updatePoint":{"line":253,"column":47,"index":9881},"line":253,"code":"        it('some items have a health status set', () => {\n          // Under the assumption that the loaded archive has\n          // at least one APM ML job, and the time range is longer\n          // than 15m, at least one items should have a health status\n          // set. Note that we currently have a bug where healthy\n          // services report as unknown (so without any health status):\n          // https://github.com/elastic/kibana/issues/77083\n          const healthStatuses = sortBy(response.body.items, 'serviceName').map(item => item.healthStatus);\n          expect(healthStatuses.filter(Boolean).length).to.be.greaterThan(0);\n          expectSnapshot(healthStatuses).toMatchInline(`\n              Array [\n                undefined,\n                \"healthy\",\n                \"healthy\",\n                \"healthy\",\n                \"healthy\",\n                \"healthy\",\n                \"healthy\",\n                \"healthy\",\n              ]\n            `);\n        });","file":"apm_api_integration/tests/services/top_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"the response is successful","suites":["with a user that does not have access to ML"],"updatePoint":{"line":293,"column":36,"index":11347},"line":293,"code":"      it('the response is successful', () => {\n        expect(response.status).to.eql(200);\n      });","file":"apm_api_integration/tests/services/top_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"there is at least one service","suites":["with a user that does not have access to ML"],"updatePoint":{"line":296,"column":39,"index":11452},"line":296,"code":"      it('there is at least one service', () => {\n        expect(response.body.items.length).to.be.greaterThan(0);\n      });","file":"apm_api_integration/tests/services/top_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"contains no health statuses","suites":["with a user that does not have access to ML"],"updatePoint":{"line":299,"column":37,"index":11575},"line":299,"code":"      it('contains no health statuses', () => {\n        const definedHealthStatuses = response.body.items.map(item => item.healthStatus).filter(Boolean);\n        expect(definedHealthStatuses.length).to.be(0);\n      });","file":"apm_api_integration/tests/services/top_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"does not return health statuses for services that are not found in APM data","suites":["and fetching a list of services with a filter"],"updatePoint":{"line":320,"column":85,"index":12356},"line":320,"code":"      it('does not return health statuses for services that are not found in APM data', () => {\n        expect(response.status).to.be(200);\n        expect(response.body.items.length).to.be(1);\n        expect(response.body.items[0].serviceName).to.be('opbeans-java');\n      });","file":"apm_api_integration/tests/services/top_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles empty state","suites":[],"updatePoint":{"line":24,"column":27,"index":816},"line":24,"code":"    it('handles empty state', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint: 'GET /internal/apm/services/{serviceName}/transaction_types',\n        params: {\n          path: {\n            serviceName: 'opbeans-node'\n          },\n          query: {\n            start,\n            end\n          }\n        }\n      });\n      expect(response.status).to.be(200);\n      expect(response.body.transactionTypes.length).to.be(0);\n    });","file":"apm_api_integration/tests/services/transaction_types.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles empty state","suites":[],"updatePoint":{"line":45,"column":27,"index":1407},"line":45,"code":"    it('handles empty state', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint: 'GET /internal/apm/services/{serviceName}/transaction_types',\n        params: {\n          path: {\n            serviceName: 'opbeans-node'\n          },\n          query: {\n            start,\n            end\n          }\n        }\n      });\n      expect(response.status).to.be(200);\n      expect(response.body.transactionTypes.length).to.be.greaterThan(0);\n      expectSnapshot(response.body).toMatchInline(`\n          Object {\n            \"transactionTypes\": Array [\n              \"request\",\n              \"Worker\",\n            ],\n          }\n        `);\n    });","file":"apm_api_integration/tests/services/transaction_types.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state for environments","suites":[],"updatePoint":{"line":124,"column":48,"index":3607},"line":124,"code":"    it('handles the empty state for environments', async () => {\n      const {\n        body\n      } = await getEnvironments('myservice');\n      expect(body.environments).to.eql([{\n        name: 'ALL_OPTION_VALUE',\n        alreadyConfigured: false\n      }]);\n    });","file":"apm_api_integration/tests/settings/agent_configuration/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state for agent name","suites":[],"updatePoint":{"line":133,"column":46,"index":3871},"line":133,"code":"    it('handles the empty state for agent name', async () => {\n      const {\n        body\n      } = await getAgentName('myservice');\n      expect(body.agentName).to.eql(undefined);\n    });","file":"apm_api_integration/tests/settings/agent_configuration/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"does not allow creating config","suites":["as a read-only user"],"updatePoint":{"line":146,"column":40,"index":4226},"line":146,"code":"      it('does not allow creating config', async () => {\n        await expectStatusCode(() => createConfiguration(newConfig, {\n          user: 'read'\n        }), 403);\n      });","file":"apm_api_integration/tests/settings/agent_configuration/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"does not allow updating the config","suites":["as a read-only user","when a configuration already exists"],"updatePoint":{"line":154,"column":46,"index":4591},"line":154,"code":"        it('does not allow updating the config', async () => {\n          await expectStatusCode(() => updateConfiguration(newConfig, {\n            user: 'read'\n          }), 403);\n        });","file":"apm_api_integration/tests/settings/agent_configuration/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"does not allow deleting the config","suites":["as a read-only user","when a configuration already exists"],"updatePoint":{"line":159,"column":46,"index":4783},"line":159,"code":"        it('does not allow deleting the config', async () => {\n          await expectStatusCode(() => deleteConfiguration(newConfig, {\n            user: 'read'\n          }), 403);\n        });","file":"apm_api_integration/tests/settings/agent_configuration/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"can create and delete config","suites":["when creating one configuration"],"updatePoint":{"line":180,"column":38,"index":5360},"line":180,"code":"      it('can create and delete config', async () => {\n        // assert that config does not exist\n        await expectMissing(() => searchConfigurations(searchParams)); // create config\n\n        await createConfiguration(newConfig); // assert that config now exists\n\n        await expectExists(() => searchConfigurations(searchParams)); // delete config\n\n        await deleteConfiguration(newConfig); // assert that config was deleted\n\n        await expectMissing(() => searchConfigurations(searchParams));\n      });","file":"apm_api_integration/tests/settings/agent_configuration/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"can find the config","suites":["when creating one configuration","when a configuration exists"],"updatePoint":{"line":195,"column":31,"index":6045},"line":195,"code":"        it('can find the config', async () => {\n          const {\n            status,\n            body\n          } = await searchConfigurations(searchParams);\n          expect(status).to.equal(200);\n          expect(body._source.service).to.eql({});\n          expect(body._source.settings).to.eql({\n            transaction_sample_rate: '0.55'\n          });\n        });","file":"apm_api_integration/tests/settings/agent_configuration/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"can list the config","suites":["when creating one configuration","when a configuration exists"],"updatePoint":{"line":206,"column":31,"index":6414},"line":206,"code":"        it('can list the config', async () => {\n          const {\n            status,\n            body\n          } = await getAllConfigurations();\n          expect(status).to.equal(200);\n          expect(omitTimestamp(body.configurations)).to.eql([{\n            service: {},\n            settings: {\n              transaction_sample_rate: '0.55'\n            },\n            applied_by_agent: false,\n            etag: 'eb88a8997666cc4b33745ef355a1bbd7c4782f2d'\n          }]);\n        });","file":"apm_api_integration/tests/settings/agent_configuration/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"can update the config","suites":["when creating one configuration","when a configuration exists"],"updatePoint":{"line":221,"column":33,"index":6901},"line":221,"code":"        it('can update the config', async () => {\n          await updateConfiguration({\n            service: {},\n            settings: {\n              transaction_sample_rate: '0.85'\n            }\n          });\n          const {\n            status,\n            body\n          } = await searchConfigurations(searchParams);\n          expect(status).to.equal(200);\n          expect(body._source.service).to.eql({});\n          expect(body._source.settings).to.eql({\n            transaction_sample_rate: '0.85'\n          });\n        });","file":"apm_api_integration/tests/settings/agent_configuration/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"can list all configs","suites":["when creating multiple configurations"],"updatePoint":{"line":331,"column":30,"index":9676},"line":331,"code":"      it('can list all configs', async () => {\n        const {\n          status,\n          body\n        } = await getAllConfigurations();\n        expect(status).to.equal(200);\n        expect(orderBy(omitTimestamp(body.configurations), ['settings.transaction_sample_rate'])).to.eql([{\n          service: {},\n          settings: {\n            transaction_sample_rate: '0.1'\n          },\n          applied_by_agent: false,\n          etag: '0758cb18817de60cca29e07480d472694239c4c3'\n        }, {\n          service: {\n            name: 'my_service'\n          },\n          settings: {\n            transaction_sample_rate: '0.2'\n          },\n          applied_by_agent: false,\n          etag: 'e04737637056fdf1763bf0ef0d3fcb86e89ae5fc'\n        }, {\n          service: {\n            name: 'my_service',\n            environment: 'development'\n          },\n          settings: {\n            transaction_sample_rate: '0.3'\n          },\n          applied_by_agent: false,\n          etag: 'af4dac62621b6762e6281481d1f7523af1124120'\n        }, {\n          service: {\n            environment: 'production'\n          },\n          settings: {\n            transaction_sample_rate: '0.4'\n          },\n          applied_by_agent: false,\n          etag: '8d1bf8e6b778b60af351117e2cf53fb1ee570068'\n        }, {\n          service: {\n            environment: 'development'\n          },\n          settings: {\n            transaction_sample_rate: '0.5'\n          },\n          applied_by_agent: false,\n          etag: '4ce40da57e3c71daca704121c784b911ec05ae81'\n        }]);\n      });","file":"apm_api_integration/tests/settings/agent_configuration/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":" / ","suites":["when creating multiple configurations"],"updatePoint":{"line":385,"column":78,"index":11333},"line":385,"code":"        it(`${agentRequest.service.name} / ${agentRequest.service.environment}`, async () => {\n          const {\n            status,\n            body\n          } = await searchConfigurations({\n            service: agentRequest.service,\n            etag: 'abc'\n          });\n          expect(status).to.equal(200);\n          expect(body._source.settings).to.eql(agentRequest.expectedSettings);\n        });","file":"apm_api_integration/tests/settings/agent_configuration/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"should have 'applied_by_agent=false' before supplying etag","suites":["when an agent retrieves a configuration"],"updatePoint":{"line":427,"column":68,"index":12547},"line":427,"code":"      it(`should have 'applied_by_agent=false' before supplying etag`, async () => {\n        const res1 = await searchConfigurations({\n          service: {\n            name: 'myservice',\n            environment: 'development'\n          }\n        });\n        etag = res1.body._source.etag;\n        const res2 = await searchConfigurations({\n          service: {\n            name: 'myservice',\n            environment: 'development'\n          },\n          etag\n        });\n        expect(res1.body._source.applied_by_agent).to.be(false);\n        expect(res2.body._source.applied_by_agent).to.be(false);\n      });","file":"apm_api_integration/tests/settings/agent_configuration/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"should have 'applied_by_agent=true' after supplying etag","suites":["when an agent retrieves a configuration"],"updatePoint":{"line":445,"column":66,"index":13155},"line":445,"code":"      it(`should have 'applied_by_agent=true' after supplying etag`, async () => {\n        await searchConfigurations({\n          service: {\n            name: 'myservice',\n            environment: 'development'\n          },\n          etag\n        });\n\n        async function hasBeenAppliedByAgent() {\n          const {\n            body\n          } = await searchConfigurations({\n            service: {\n              name: 'myservice',\n              environment: 'development'\n            }\n          });\n          return !!body._source.applied_by_agent;\n        } // wait until `applied_by_agent` has been updated in elasticsearch\n\n\n        expect(await waitFor(hasBeenAppliedByAgent)).to.be(true);\n      });","file":"apm_api_integration/tests/settings/agent_configuration/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"should have 'applied_by_agent=false' before marking as applied","suites":["when an agent retrieves a configuration"],"updatePoint":{"line":469,"column":72,"index":13870},"line":469,"code":"      it(`should have 'applied_by_agent=false' before marking as applied`, async () => {\n        const res1 = await searchConfigurations({\n          service: {\n            name: 'myservice',\n            environment: 'production'\n          }\n        });\n        expect(res1.body._source.applied_by_agent).to.be(false);\n      });","file":"apm_api_integration/tests/settings/agent_configuration/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"should have 'applied_by_agent=true' when 'mark_as_applied_by_agent' attribute is true","suites":["when an agent retrieves a configuration"],"updatePoint":{"line":478,"column":95,"index":14221},"line":478,"code":"      it(`should have 'applied_by_agent=true' when 'mark_as_applied_by_agent' attribute is true`, async () => {\n        await searchConfigurations({\n          service: {\n            name: 'myservice',\n            environment: 'production'\n          },\n          mark_as_applied_by_agent: true\n        });\n\n        async function hasBeenAppliedByAgent() {\n          const {\n            body\n          } = await searchConfigurations({\n            service: {\n              name: 'myservice',\n              environment: 'production'\n            }\n          });\n          return !!body._source.applied_by_agent;\n        } // wait until `applied_by_agent` has been updated in elasticsearch\n\n\n        expect(await waitFor(hasBeenAppliedByAgent)).to.be(true);\n      });","file":"apm_api_integration/tests/settings/agent_configuration/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"should have 'applied_by_agent=false' when there are no agent config metrics for this etag","suites":["when an agent retrieves a configuration"],"updatePoint":{"line":531,"column":97,"index":15683},"line":531,"code":"    it(`should have 'applied_by_agent=false' when there are no agent config metrics for this etag`, async () => {\n      expect(agentConfiguration?.applied_by_agent).to.be(false);\n    });","file":"apm_api_integration/tests/settings/agent_configuration/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"should have 'applied_by_agent=true' when getting a config from all configurations","suites":["when there are agent config metrics for this etag"],"updatePoint":{"line":546,"column":91,"index":16283},"line":546,"code":"      it(`should have 'applied_by_agent=true' when getting a config from all configurations`, async () => {\n        const {\n          body: {\n            configurations\n          }\n        } = await getAllConfigurations();\n        const updatedConfig = configurations.find(x => x.service.name === name && x.service.environment === environment);\n        expect(updatedConfig?.applied_by_agent).to.be(true);\n      });","file":"apm_api_integration/tests/settings/agent_configuration/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"should have 'applied_by_agent=true' when getting a single config","suites":["when there are agent config metrics for this etag"],"updatePoint":{"line":555,"column":74,"index":16682},"line":555,"code":"      it(`should have 'applied_by_agent=true' when getting a single config`, async () => {\n        const {\n          body: {\n            applied_by_agent: appliedByAgent\n          }\n        } = await findExactConfiguration(name, environment);\n        expect(appliedByAgent).to.be(true);\n      });","file":"apm_api_integration/tests/settings/agent_configuration/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the environments, all unconfigured","suites":["when there are agent config metrics for this etag"],"updatePoint":{"line":569,"column":50,"index":17092},"line":569,"code":"    it('returns the environments, all unconfigured', async () => {\n      const {\n        body\n      } = await getEnvironments('opbeans-node');\n      const {\n        environments\n      } = body;\n      expect(environments.map(item => item.name)).to.contain('ALL_OPTION_VALUE');\n      expect(environments.every(item => item.alreadyConfigured === false)).to.be(true);\n      expectSnapshot(body).toMatchInline(`\n          Object {\n            \"environments\": Array [\n              Object {\n                \"alreadyConfigured\": false,\n                \"name\": \"ALL_OPTION_VALUE\",\n              },\n              Object {\n                \"alreadyConfigured\": false,\n                \"name\": \"testing\",\n              },\n            ],\n          }\n        `);\n    });","file":"apm_api_integration/tests/settings/agent_configuration/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the agent name","suites":["when there are agent config metrics for this etag"],"updatePoint":{"line":593,"column":30,"index":17828},"line":593,"code":"    it('returns the agent name', async () => {\n      const {\n        body\n      } = await getAgentName('opbeans-node');\n      expect(body.agentName).to.eql('nodejs');\n    });","file":"apm_api_integration/tests/settings/agent_configuration/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"should return an error when creating an agent key","suites":["When the user does not have the required cluster privileges"],"updatePoint":{"line":56,"column":59,"index":1796},"line":56,"code":"      it('should return an error when creating an agent key', async () => {\n        const error = await expectToReject(() => createAgentKey(apmApiClient.writeUser));\n        expect(error.res.status).to.be(500);\n        expect(error.res.body.message).contain('is missing the following requested privilege');\n      });","file":"apm_api_integration/tests/settings/agent_keys/agent_keys.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"should return an error when invalidating an agent key","suites":["When the user does not have the required cluster privileges"],"updatePoint":{"line":61,"column":63,"index":2117},"line":61,"code":"      it('should return an error when invalidating an agent key', async () => {\n        const error = await expectToReject(() => invalidateAgentKey(apmApiClient.writeUser, agentKeyName));\n        expect(error.res.status).to.be(500);\n      });","file":"apm_api_integration/tests/settings/agent_keys/agent_keys.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"should return an error when getting a list of agent keys","suites":["When the user does not have the required cluster privileges"],"updatePoint":{"line":65,"column":66,"index":2363},"line":65,"code":"      it('should return an error when getting a list of agent keys', async () => {\n        const error = await expectToReject(() => getAgentKeys(apmApiClient.writeUser));\n        expect(error.res.status).to.be(500);\n      });","file":"apm_api_integration/tests/settings/agent_keys/agent_keys.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"should return an error when creating an agent key with  privilege","suites":["When the user does not have the required application privileges"],"updatePoint":{"line":72,"column":89,"index":2758},"line":72,"code":"        it(`should return an error when creating an agent key with ${privilege} privilege`, async () => {\n          const error = await expectToReject(() => createAgentKey(apmApiClient.manageOwnAgentKeysUser, [privilege]));\n          expect(error.res.status).to.be(500);\n          expect(error.res.body.message).contain('is missing the following requested privilege');\n        });","file":"apm_api_integration/tests/settings/agent_keys/agent_keys.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"should be able to create an agent key","suites":["When the user does not have the required application privileges"],"updatePoint":{"line":89,"column":45,"index":3389},"line":89,"code":"    it('should be able to create an agent key', async () => {\n      const {\n        status,\n        body\n      } = await createAgentKey(apmApiClient.createAndAllAgentKeysUser);\n      expect(status).to.be(200);\n      expect(body).to.have.property('agentKey');\n      expect(body.agentKey).to.have.property('id');\n      expect(body.agentKey).to.have.property('api_key');\n      expect(body.agentKey).to.have.property('encoded');\n      expect(body.agentKey.name).to.be(agentKeyName);\n      const {\n        api_keys: apiKeys\n      } = await esClient.security.getApiKey({});\n      expect(apiKeys.filter(key => !key.invalidated && key.metadata?.application === 'apm')).to.have.length(1);\n    });","file":"apm_api_integration/tests/settings/agent_keys/agent_keys.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"should be able to invalidate an agent key","suites":["When the user does not have the required application privileges"],"updatePoint":{"line":105,"column":49,"index":4081},"line":105,"code":"    it('should be able to invalidate an agent key', async () => {\n      // Create\n      const {\n        body: createAgentKeyBody\n      } = await createAgentKey(apmApiClient.createAndAllAgentKeysUser);\n      const {\n        agentKey: {\n          id\n        }\n      } = createAgentKeyBody; // Invalidate\n\n      const {\n        status,\n        body\n      } = await invalidateAgentKey(apmApiClient.createAndAllAgentKeysUser, id);\n      expect(status).to.be(200);\n      expect(body).to.have.property('invalidatedAgentKeys');\n      expect(body.invalidatedAgentKeys).to.eql([id]); // Get\n\n      const {\n        api_keys: apiKeys\n      } = await esClient.security.getApiKey({});\n      expect(apiKeys.filter(key => !key.invalidated && key.metadata?.application === 'apm')).to.be.empty();\n    });","file":"apm_api_integration/tests/settings/agent_keys/agent_keys.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"should be able to get a list of agent keys","suites":["When the user does not have the required application privileges"],"updatePoint":{"line":129,"column":50,"index":4869},"line":129,"code":"    it('should be able to get a list of agent keys', async () => {\n      // Create\n      const {\n        body: createAgentKeyBody\n      } = await createAgentKey(apmApiClient.createAndAllAgentKeysUser);\n      const {\n        agentKey: {\n          id\n        }\n      } = createAgentKeyBody; // Get\n\n      const {\n        status,\n        body: {\n          agentKeys\n        }\n      } = await getAgentKeys(apmApiClient.createAndAllAgentKeysUser);\n      expect(status).to.be(200);\n      const agentKey = first(agentKeys);\n      expect(agentKey?.id).to.be(id);\n      expect(agentKey?.name).to.be(agentKeyName);\n      expect(agentKey).to.have.property('creation');\n      expect(agentKey?.invalidated).to.be(false);\n      expect(agentKey).to.have.property('username');\n      expect(agentKey).to.have.property('realm');\n      expect(agentKey?.metadata.application).to.be('apm');\n    });","file":"apm_api_integration/tests/settings/agent_keys/agent_keys.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns an error because the user does not have access","suites":["when user does not have read access to ML","when calling the endpoint for listing jobs"],"updatePoint":{"line":31,"column":66,"index":1115},"line":31,"code":"        it('returns an error because the user does not have access', async () => {\n          const {\n            body\n          } = await getJobs();\n          expect(body.statusCode).to.be(403);\n          expect(body.error).to.be('Forbidden');\n        });","file":"apm_api_integration/tests/settings/anomaly_detection/no_access_user.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns an error because the user does not have access","suites":["when user does not have read access to ML","when calling create endpoint"],"updatePoint":{"line":40,"column":66,"index":1436},"line":40,"code":"        it('returns an error because the user does not have access', async () => {\n          const {\n            body\n          } = await createJobs(['production', 'staging']);\n          expect(body.statusCode).to.be(403);\n          expect(body.error).to.be('Forbidden');\n        });","file":"apm_api_integration/tests/settings/anomaly_detection/no_access_user.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns a 200/true","suites":["when there are no v2 jobs"],"updatePoint":{"line":68,"column":28,"index":1757},"line":68,"code":"      it('returns a 200/true', async () => {\n        const {\n          status,\n          body\n        } = await callUpdateEndpoint();\n        expect(status).to.eql(200);\n        expect(body.update).to.eql(true);\n      });","file":"apm_api_integration/tests/settings/anomaly_detection/update_to_v3.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"creates a new job for each environment that has a v2 job","suites":["when there are only v2 jobs"],"updatePoint":{"line":81,"column":66,"index":2173},"line":81,"code":"      it('creates a new job for each environment that has a v2 job', async () => {\n        await callUpdateEndpoint();\n        const {\n          body: {\n            jobs\n          }\n        } = await getJobs();\n        expect(jobs.filter(job => job.version === 3).map(job => job.environment).sort()).to.eql(['development', 'production']);\n      });","file":"apm_api_integration/tests/settings/anomaly_detection/update_to_v3.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"only creates new jobs for environments that did not have a v3 job","suites":["when there are both v2 and v3 jobs"],"updatePoint":{"line":100,"column":75,"index":2855},"line":100,"code":"      it('only creates new jobs for environments that did not have a v3 job', async () => {\n        await callUpdateEndpoint();\n        const {\n          body: {\n            jobs\n          }\n        } = await getJobs();\n        expect(jobs.filter(job => job.version === 3).map(job => job.environment).sort()).to.eql(['development', 'production']);\n      });","file":"apm_api_integration/tests/settings/anomaly_detection/update_to_v3.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns a list of jobs","suites":["when user has write access to ML","when calling the endpoint for listing jobs"],"updatePoint":{"line":51,"column":34,"index":1553},"line":51,"code":"        it('returns a list of jobs', async () => {\n          const {\n            body\n          } = await getJobs();\n          expect(body.jobs.length).to.be(0);\n          expect(body.hasLegacyJobs).to.be(false);\n        });","file":"apm_api_integration/tests/settings/anomaly_detection/write_user.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"creates two jobs","suites":["when user has write access to ML","when calling create endpoint"],"updatePoint":{"line":60,"column":28,"index":1837},"line":60,"code":"        it('creates two jobs', async () => {\n          await createJobs(['production', 'staging']);\n          const {\n            body\n          } = await getJobs();\n          expect(body.hasLegacyJobs).to.be(false);\n          expect(countBy(body.jobs, 'environment')).to.eql({\n            production: 1,\n            staging: 1\n          });\n        });","file":"apm_api_integration/tests/settings/anomaly_detection/write_user.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"skips duplicate job creation","suites":["when user has write access to ML","when calling create endpoint","with existing ML jobs"],"updatePoint":{"line":75,"column":42,"index":2357},"line":75,"code":"          it('skips duplicate job creation', async () => {\n            await createJobs(['production', 'test']);\n            const {\n              body\n            } = await getJobs();\n            expect(countBy(body.jobs, 'environment')).to.eql({\n              production: 1,\n              staging: 1,\n              test: 1\n            });\n          });","file":"apm_api_integration/tests/settings/anomaly_detection/write_user.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"contains two children link on Span A","suites":["Span links count on traces","producer-internal-only trace"],"updatePoint":{"line":57,"column":48,"index":2260},"line":57,"code":"        it('contains two children link on Span A', () => {\n          expect(Object.values(traces.linkedChildrenOfSpanCountBySpanId).length).to.equal(1);\n          expect(traces.linkedChildrenOfSpanCountBySpanId[ids.producerInternalOnly.spanAId]).to.equal(2);\n        });","file":"apm_api_integration/tests/span_links/span_links.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"contains two children link on Span B","suites":["Span links count on traces","producer-external-only trace"],"updatePoint":{"line":70,"column":48,"index":2818},"line":70,"code":"        it('contains two children link on Span B', () => {\n          expect(Object.values(traces.linkedChildrenOfSpanCountBySpanId).length).to.equal(2);\n          expect(traces.linkedChildrenOfSpanCountBySpanId[ids.producerExternalOnly.spanBId]).to.equal(1);\n          expect(traces.linkedChildrenOfSpanCountBySpanId[ids.producerExternalOnly.transactionBId]).to.equal(1);\n        });","file":"apm_api_integration/tests/span_links/span_links.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"contains one children link on transaction C and two on span C","suites":["Span links count on traces","producer-consumer trace"],"updatePoint":{"line":84,"column":73,"index":3505},"line":84,"code":"        it('contains one children link on transaction C and two on span C', () => {\n          expect(Object.values(traces.linkedChildrenOfSpanCountBySpanId).length).to.equal(2);\n          expect(traces.linkedChildrenOfSpanCountBySpanId[ids.producerConsumer.transactionCId]).to.equal(1);\n          expect(traces.linkedChildrenOfSpanCountBySpanId[ids.producerConsumer.spanCId]).to.equal(1);\n        });","file":"apm_api_integration/tests/span_links/span_links.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"contains no children","suites":["Span links count on traces","consumer-multiple trace"],"updatePoint":{"line":98,"column":32,"index":4143},"line":98,"code":"        it('contains no children', () => {\n          expect(Object.values(traces.linkedChildrenOfSpanCountBySpanId).length).to.equal(0);\n          expect(traces.linkedChildrenOfSpanCountBySpanId[ids.producerMultiple.transactionDId]).to.equal(undefined);\n          expect(traces.linkedChildrenOfSpanCountBySpanId[ids.producerMultiple.spanEId]).to.equal(undefined);\n        });","file":"apm_api_integration/tests/span_links/span_links.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns no links for transaction A","suites":["Span links details","producer-internal-only span links details"],"updatePoint":{"line":164,"column":46,"index":6641},"line":164,"code":"        it('returns no links for transaction A', () => {\n          expect(transactionALinksDetails.childrenLinks.spanLinksDetails).to.eql([]);\n          expect(transactionALinksDetails.parentsLinks.spanLinksDetails).to.eql([]);\n        });","file":"apm_api_integration/tests/span_links/span_links.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns no parents on Span A","suites":["Span links details","producer-internal-only span links details"],"updatePoint":{"line":168,"column":40,"index":6875},"line":168,"code":"        it('returns no parents on Span A', () => {\n          expect(spanALinksDetails.parentsLinks.spanLinksDetails).to.eql([]);\n        });","file":"apm_api_integration/tests/span_links/span_links.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns two children on Span A","suites":["Span links details","producer-internal-only span links details"],"updatePoint":{"line":171,"column":42,"index":7018},"line":171,"code":"        it('returns two children on Span A', () => {\n          expect(spanALinksDetails.childrenLinks.spanLinksDetails.length).to.eql(2);\n          const serviceCDetails = spanALinksDetails.childrenLinks.spanLinksDetails.find(childDetails => {\n            return childDetails.traceId === ids.producerConsumer.traceId && childDetails.spanId === ids.producerConsumer.transactionCId;\n          });\n          expect(serviceCDetails?.details).to.eql({\n            serviceName: 'producer-consumer',\n            agentName: 'ruby',\n            transactionId: ids.producerConsumer.transactionCId,\n            spanName: 'Transaction C',\n            duration: 1000000\n          });\n          const serviceDDetails = spanALinksDetails.childrenLinks.spanLinksDetails.find(childDetails => {\n            return childDetails.traceId === ids.producerMultiple.traceId && childDetails.spanId === ids.producerMultiple.transactionDId;\n          });\n          expect(serviceDDetails?.details).to.eql({\n            serviceName: 'consumer-multiple',\n            agentName: 'nodejs',\n            transactionId: ids.producerMultiple.transactionDId,\n            spanName: 'Transaction D',\n            duration: 1000000\n          });\n        });","file":"apm_api_integration/tests/span_links/span_links.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns producer-consumer as children of transaction B","suites":["Span links details","producer-external-only span links details"],"updatePoint":{"line":213,"column":66,"index":9145},"line":213,"code":"        it('returns producer-consumer as children of transaction B', () => {\n          expect(transactionBLinksDetails.childrenLinks.spanLinksDetails.length).to.be(1);\n        });","file":"apm_api_integration/tests/span_links/span_links.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns no parent for transaction B","suites":["Span links details","producer-external-only span links details"],"updatePoint":{"line":216,"column":47,"index":9306},"line":216,"code":"        it('returns no parent for transaction B', () => {\n          expect(transactionBLinksDetails.parentsLinks.spanLinksDetails).to.eql([]);\n        });","file":"apm_api_integration/tests/span_links/span_links.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns external parent on Span B","suites":["Span links details","producer-external-only span links details"],"updatePoint":{"line":219,"column":45,"index":9459},"line":219,"code":"        it('returns external parent on Span B', () => {\n          expect(spanBLinksDetails.parentsLinks.spanLinksDetails.length).to.be(1);\n          expect(spanBLinksDetails.parentsLinks.spanLinksDetails).to.eql([{\n            traceId: 'trace#1',\n            spanId: 'span#1'\n          }]);\n        });","file":"apm_api_integration/tests/span_links/span_links.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns consumer-multiple as child on Span B","suites":["Span links details","producer-external-only span links details"],"updatePoint":{"line":226,"column":56,"index":9773},"line":226,"code":"        it('returns consumer-multiple as child on Span B', () => {\n          expect(spanBLinksDetails.childrenLinks.spanLinksDetails.length).to.be(1);\n          expect(spanBLinksDetails.childrenLinks.spanLinksDetails).to.eql([{\n            traceId: ids.producerMultiple.traceId,\n            spanId: ids.producerMultiple.spanEId,\n            details: {\n              serviceName: 'consumer-multiple',\n              agentName: 'nodejs',\n              transactionId: ids.producerMultiple.transactionDId,\n              spanName: 'Span E',\n              duration: 100000,\n              spanSubtype: 'http',\n              spanType: 'external'\n            }\n          }]);\n        });","file":"apm_api_integration/tests/span_links/span_links.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns producer-internal-only Span A, producer-external-only Transaction B, and External link as parents of Transaction C","suites":["Span links details","producer-consumer span links details"],"updatePoint":{"line":261,"column":134,"index":11393},"line":261,"code":"        it('returns producer-internal-only Span A, producer-external-only Transaction B, and External link as parents of Transaction C', () => {\n          expect(transactionCLinksDetails.parentsLinks.spanLinksDetails.length).to.be(3);\n          expect(transactionCLinksDetails.parentsLinks.spanLinksDetails).to.eql([{\n            traceId: ids.producerInternalOnly.traceId,\n            spanId: ids.producerInternalOnly.spanAId,\n            details: {\n              serviceName: 'producer-internal-only',\n              agentName: 'go',\n              transactionId: ids.producerInternalOnly.transactionAId,\n              spanName: 'Span A',\n              duration: 100000,\n              spanSubtype: 'http',\n              spanType: 'external'\n            }\n          }, {\n            traceId: ids.producerExternalOnly.traceId,\n            spanId: ids.producerExternalOnly.transactionBId,\n            details: {\n              serviceName: 'producer-external-only',\n              agentName: 'java',\n              transactionId: ids.producerExternalOnly.transactionBId,\n              duration: 1000000,\n              spanName: 'Transaction B'\n            }\n          }, {\n            traceId: ids.producerConsumer.externalTraceId,\n            spanId: ids.producerExternalOnly.spanBId\n          }]);\n        });","file":"apm_api_integration/tests/span_links/span_links.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns consumer-multiple Span E as child of Transaction C","suites":["Span links details","producer-consumer span links details"],"updatePoint":{"line":290,"column":70,"index":12634},"line":290,"code":"        it('returns consumer-multiple Span E as child of Transaction C', () => {\n          expect(transactionCLinksDetails.childrenLinks.spanLinksDetails.length).to.be(1);\n          expect(transactionCLinksDetails.childrenLinks.spanLinksDetails).to.eql([{\n            traceId: ids.producerMultiple.traceId,\n            spanId: ids.producerMultiple.spanEId,\n            details: {\n              serviceName: 'consumer-multiple',\n              agentName: 'nodejs',\n              transactionId: ids.producerMultiple.transactionDId,\n              spanName: 'Span E',\n              duration: 100000,\n              spanSubtype: 'http',\n              spanType: 'external'\n            }\n          }]);\n        });","file":"apm_api_integration/tests/span_links/span_links.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns no child on Span C","suites":["Span links details","producer-consumer span links details"],"updatePoint":{"line":306,"column":38,"index":13308},"line":306,"code":"        it('returns no child on Span C', () => {\n          expect(spanCLinksDetails.parentsLinks.spanLinksDetails.length).to.be(0);\n        });","file":"apm_api_integration/tests/span_links/span_links.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns consumer-multiple as Child on producer-consumer","suites":["Span links details","producer-consumer span links details"],"updatePoint":{"line":309,"column":67,"index":13481},"line":309,"code":"        it('returns consumer-multiple as Child on producer-consumer', () => {\n          expect(spanCLinksDetails.childrenLinks.spanLinksDetails.length).to.be(1);\n          expect(spanCLinksDetails.childrenLinks.spanLinksDetails).to.eql([{\n            traceId: ids.producerMultiple.traceId,\n            spanId: ids.producerMultiple.transactionDId,\n            details: {\n              serviceName: 'consumer-multiple',\n              agentName: 'nodejs',\n              transactionId: ids.producerMultiple.transactionDId,\n              spanName: 'Transaction D',\n              duration: 1000000\n            }\n          }]);\n        });","file":"apm_api_integration/tests/span_links/span_links.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns producer-internal-only Span A and producer-consumer Span C as parents of Transaction D","suites":["Span links details","consumer-multiple span links details"],"updatePoint":{"line":342,"column":106,"index":15017},"line":342,"code":"        it('returns producer-internal-only Span A and producer-consumer Span C as parents of Transaction D', () => {\n          expect(transactionDLinksDetails.parentsLinks.spanLinksDetails.length).to.be(2);\n          expect(transactionDLinksDetails.parentsLinks.spanLinksDetails).to.eql([{\n            traceId: ids.producerInternalOnly.traceId,\n            spanId: ids.producerInternalOnly.spanAId,\n            details: {\n              serviceName: 'producer-internal-only',\n              agentName: 'go',\n              transactionId: ids.producerInternalOnly.transactionAId,\n              spanName: 'Span A',\n              duration: 100000,\n              spanSubtype: 'http',\n              spanType: 'external'\n            }\n          }, {\n            traceId: ids.producerConsumer.traceId,\n            spanId: ids.producerConsumer.spanCId,\n            details: {\n              serviceName: 'producer-consumer',\n              agentName: 'ruby',\n              transactionId: ids.producerConsumer.transactionCId,\n              spanName: 'Span C',\n              duration: 100000,\n              spanSubtype: 'http',\n              spanType: 'external'\n            }\n          }]);\n        });","file":"apm_api_integration/tests/span_links/span_links.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns no children on Transaction D","suites":["Span links details","consumer-multiple span links details"],"updatePoint":{"line":370,"column":48,"index":16148},"line":370,"code":"        it('returns no children on Transaction D', () => {\n          expect(transactionDLinksDetails.childrenLinks.spanLinksDetails.length).to.be(0);\n        });","file":"apm_api_integration/tests/span_links/span_links.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns producer-external-only Span B and producer-consumer Transaction C as parents of Span E","suites":["Span links details","consumer-multiple span links details"],"updatePoint":{"line":373,"column":106,"index":16368},"line":373,"code":"        it('returns producer-external-only Span B and producer-consumer Transaction C as parents of Span E', () => {\n          expect(spanELinksDetails.parentsLinks.spanLinksDetails.length).to.be(2);\n          expect(spanELinksDetails.parentsLinks.spanLinksDetails).to.eql([{\n            traceId: ids.producerExternalOnly.traceId,\n            spanId: ids.producerExternalOnly.spanBId,\n            details: {\n              serviceName: 'producer-external-only',\n              agentName: 'java',\n              transactionId: ids.producerExternalOnly.transactionBId,\n              spanName: 'Span B',\n              duration: 100000,\n              spanSubtype: 'http',\n              spanType: 'external'\n            }\n          }, {\n            traceId: ids.producerConsumer.traceId,\n            spanId: ids.producerConsumer.transactionCId,\n            details: {\n              serviceName: 'producer-consumer',\n              agentName: 'ruby',\n              transactionId: ids.producerConsumer.transactionCId,\n              spanName: 'Transaction C',\n              duration: 1000000\n            }\n          }]);\n        });","file":"apm_api_integration/tests/span_links/span_links.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns no children on Span E","suites":["Span links details","consumer-multiple span links details"],"updatePoint":{"line":399,"column":41,"index":17424},"line":399,"code":"        it('returns no children on Span E', () => {\n          expect(spanELinksDetails.childrenLinks.spanLinksDetails.length).to.be(0);\n        });","file":"apm_api_integration/tests/span_links/span_links.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles empty state","suites":[],"updatePoint":{"line":42,"column":27,"index":1573},"line":42,"code":"    it('handles empty state', async () => {\n      const {\n        status,\n        body\n      } = await callApi();\n      expect(status).to.be(200);\n      expect(body.storageTimeSeries).to.empty();\n    });","file":"apm_api_integration/tests/storage_explorer/storage_explorer_timeseries_chart.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct HTTP status","suites":["when data is loaded"],"updatePoint":{"line":79,"column":37,"index":2931},"line":79,"code":"      it('returns correct HTTP status', async () => {\n        expect(status).to.be(200);\n      });","file":"apm_api_integration/tests/storage_explorer/storage_explorer_timeseries_chart.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns timeseries for each service","suites":["when data is loaded"],"updatePoint":{"line":82,"column":45,"index":3038},"line":82,"code":"      it('returns timeseries for each service', () => {\n        expect(body.storageTimeSeries).to.have.length(2);\n        body.storageTimeSeries.forEach(serie => {\n          expect(serie).to.have.property('timeseries');\n          expect(serie.timeseries).to.have.length(15);\n        });\n      });","file":"apm_api_integration/tests/storage_explorer/storage_explorer_timeseries_chart.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has the same size for both services","suites":["when data is loaded"],"updatePoint":{"line":89,"column":45,"index":3335},"line":89,"code":"      it('has the same size for both services', () => {\n        const [first, second] = body.storageTimeSeries;\n        expect(sumBy(first.timeseries, 'y')).to.be(sumBy(second.timeseries, 'y'));\n      });","file":"apm_api_integration/tests/storage_explorer/storage_explorer_timeseries_chart.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns all environments","suites":["with environment","with an empty string parameter"],"updatePoint":{"line":26,"column":36,"index":1036},"line":26,"code":"        it('returns all environments', async () => {\n          const {\n            body\n          } = await apmApiClient.readUser({\n            endpoint: 'GET /internal/apm/suggestions',\n            params: {\n              query: {\n                fieldName: SERVICE_ENVIRONMENT,\n                fieldValue: '',\n                start,\n                end\n              }\n            }\n          });\n          expectSnapshot(body).toMatchInline(`\n          Object {\n            \"terms\": Array [\n              \"production\",\n              \"testing\",\n            ],\n          }\n        `);\n        });","file":"apm_api_integration/tests/suggestions/suggestions.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns items matching the string parameter","suites":["with environment","with a string parameter"],"updatePoint":{"line":51,"column":55,"index":1713},"line":51,"code":"        it('returns items matching the string parameter', async () => {\n          const {\n            body\n          } = await apmApiClient.readUser({\n            endpoint: 'GET /internal/apm/suggestions',\n            params: {\n              query: {\n                fieldName: SERVICE_ENVIRONMENT,\n                fieldValue: 'pr',\n                start,\n                end\n              }\n            }\n          });\n          expectSnapshot(body).toMatchInline(`\n            Object {\n              \"terms\": Array [\n                \"production\",\n              ],\n            }\n          `);\n        });","file":"apm_api_integration/tests/suggestions/suggestions.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns all services","suites":["with service name","with an empty string parameter"],"updatePoint":{"line":77,"column":32,"index":2413},"line":77,"code":"        it('returns all services', async () => {\n          const {\n            body\n          } = await apmApiClient.readUser({\n            endpoint: 'GET /internal/apm/suggestions',\n            params: {\n              query: {\n                fieldName: SERVICE_NAME,\n                fieldValue: '',\n                start,\n                end\n              }\n            }\n          });\n          expectSnapshot(body).toMatchInline(`\n              Object {\n                \"terms\": Array [\n                  \"auditbeat\",\n                  \"opbeans-dotnet\",\n                  \"opbeans-go\",\n                  \"opbeans-java\",\n                  \"opbeans-node\",\n                  \"opbeans-python\",\n                  \"opbeans-ruby\",\n                  \"opbeans-rum\",\n                ],\n              }\n            `);\n        });","file":"apm_api_integration/tests/suggestions/suggestions.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns items matching the string parameter","suites":["with service name","with a string parameter"],"updatePoint":{"line":108,"column":55,"index":3320},"line":108,"code":"        it('returns items matching the string parameter', async () => {\n          const {\n            body\n          } = await apmApiClient.readUser({\n            endpoint: 'GET /internal/apm/suggestions',\n            params: {\n              query: {\n                fieldName: SERVICE_NAME,\n                fieldValue: 'aud',\n                start,\n                end\n              }\n            }\n          });\n          expectSnapshot(body).toMatchInline(`\n              Object {\n                \"terms\": Array [\n                  \"auditbeat\",\n                ],\n              }\n            `);\n        });","file":"apm_api_integration/tests/suggestions/suggestions.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns all transaction types","suites":["with transaction type","with an empty string parameter"],"updatePoint":{"line":134,"column":41,"index":4038},"line":134,"code":"        it('returns all transaction types', async () => {\n          const {\n            body\n          } = await apmApiClient.readUser({\n            endpoint: 'GET /internal/apm/suggestions',\n            params: {\n              query: {\n                fieldName: TRANSACTION_TYPE,\n                fieldValue: '',\n                start,\n                end\n              }\n            }\n          });\n          expectSnapshot(body).toMatchInline(`\n                Object {\n                  \"terms\": Array [\n                    \"Worker\",\n                    \"celery\",\n                    \"page-load\",\n                    \"request\",\n                  ],\n                }\n              `);\n        });","file":"apm_api_integration/tests/suggestions/suggestions.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns items matching the string parameter","suites":["with transaction type","with a string parameter"],"updatePoint":{"line":161,"column":55,"index":4813},"line":161,"code":"        it('returns items matching the string parameter', async () => {\n          const {\n            body\n          } = await apmApiClient.readUser({\n            endpoint: 'GET /internal/apm/suggestions',\n            params: {\n              query: {\n                fieldName: TRANSACTION_TYPE,\n                fieldValue: 'w',\n                start,\n                end\n              }\n            }\n          });\n          expectSnapshot(body).toMatchInline(`\n                Object {\n                  \"terms\": Array [\n                    \"Worker\",\n                  ],\n                }\n              `);\n        });","file":"apm_api_integration/tests/suggestions/suggestions.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns same throughput value for Transaction-based and Metric-based data","suites":["when data is loaded ","compare throughput value between service inventory and service maps"],"updatePoint":{"line":96,"column":85,"index":3723},"line":96,"code":"        it('returns same throughput value for Transaction-based and Metric-based data', () => {\n          [...Object.values(throughputTransactionValues), ...Object.values(throughputMetricValues)].forEach(value => expect(roundNumber(value)).to.be.equal(GO_DEV_RATE));\n        });","file":"apm_api_integration/tests/throughput/service_maps.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns expected throughput value","suites":["when data is loaded ","when calling service maps transactions stats api"],"updatePoint":{"line":106,"column":45,"index":4274},"line":106,"code":"        it('returns expected throughput value', () => {\n          expect(roundNumber(serviceMapsNodeThroughput)).to.be.equal(GO_DEV_RATE);\n        });","file":"apm_api_integration/tests/throughput/service_maps.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles empty state","suites":[],"updatePoint":{"line":27,"column":27,"index":908},"line":27,"code":"    it('handles empty state', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint: `GET /internal/apm/traces`,\n        params: {\n          query: {\n            start,\n            end,\n            kuery: '',\n            environment: 'ENVIRONMENT_ALL',\n            probability: 1\n          }\n        }\n      });\n      expect(response.status).to.be(200);\n      expect(response.body.items.length).to.be(0);\n    });","file":"apm_api_integration/tests/traces/top_traces.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the correct status code","suites":[],"updatePoint":{"line":63,"column":39,"index":1826},"line":63,"code":"    it('returns the correct status code', async () => {\n      expect(response.status).to.be(200);\n    });","file":"apm_api_integration/tests/traces/top_traces.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the correct number of buckets","suites":[],"updatePoint":{"line":66,"column":45,"index":1938},"line":66,"code":"    it('returns the correct number of buckets', async () => {\n      expectSnapshot(response.body.items.length).toMatchInline(`81`);\n    });","file":"apm_api_integration/tests/traces/top_traces.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the correct buckets","suites":[],"updatePoint":{"line":69,"column":35,"index":2068},"line":69,"code":"    it('returns the correct buckets', async () => {\n      const sortedItems = sortBy(response.body.items, 'impact');\n      const firstItem = sortedItems[0];\n      const lastItem = sortedItems[sortedItems.length - 1];\n      const groups = sortedItems.map(item => item.key).slice(0, 5);\n      expectSnapshot(sortedItems).toMatch();\n      expectSnapshot(firstItem).toMatchInline(`\n          Object {\n            \"agentName\": \"java\",\n            \"averageResponseTime\": 1639,\n            \"impact\": 0,\n            \"key\": Object {\n              \"service.name\": \"opbeans-java\",\n              \"transaction.name\": \"DispatcherServlet#doPost\",\n            },\n            \"serviceName\": \"opbeans-java\",\n            \"transactionName\": \"DispatcherServlet#doPost\",\n            \"transactionType\": \"request\",\n            \"transactionsPerMinute\": 0.0333333333333333,\n          }\n        `);\n      expectSnapshot(lastItem).toMatchInline(`\n          Object {\n            \"agentName\": \"dotnet\",\n            \"averageResponseTime\": 5963775,\n            \"impact\": 100,\n            \"key\": Object {\n              \"service.name\": \"opbeans-dotnet\",\n              \"transaction.name\": \"GET Orders/Get\",\n            },\n            \"serviceName\": \"opbeans-dotnet\",\n            \"transactionName\": \"GET Orders/Get\",\n            \"transactionType\": \"request\",\n            \"transactionsPerMinute\": 0.633333333333333,\n          }\n        `);\n      expectSnapshot(groups).toMatchInline(`\n          Array [\n            Object {\n              \"service.name\": \"opbeans-java\",\n              \"transaction.name\": \"DispatcherServlet#doPost\",\n            },\n            Object {\n              \"service.name\": \"opbeans-node\",\n              \"transaction.name\": \"POST /api/orders\",\n            },\n            Object {\n              \"service.name\": \"opbeans-node\",\n              \"transaction.name\": \"GET /api/products/:id\",\n            },\n            Object {\n              \"service.name\": \"opbeans-dotnet\",\n              \"transaction.name\": \"POST Orders/Post\",\n            },\n            Object {\n              \"service.name\": \"opbeans-python\",\n              \"transaction.name\": \"GET opbeans.views.product\",\n            },\n          ]\n        `);\n    });","file":"apm_api_integration/tests/traces/top_traces.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":26,"column":31,"index":887},"line":26,"code":"    it('handles the empty state', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint: 'GET /internal/apm/services/{serviceName}/transaction/charts/breakdown',\n        params: {\n          path: {\n            serviceName: 'opbeans-node'\n          },\n          query: {\n            start,\n            end,\n            transactionType,\n            environment: 'ENVIRONMENT_ALL',\n            kuery: ''\n          }\n        }\n      });\n      expect(response.status).to.be(200);\n      expect(response.body).to.eql({\n        timeseries: []\n      });\n    });","file":"apm_api_integration/tests/transactions/breakdown.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the transaction breakdown for a service","suites":[],"updatePoint":{"line":52,"column":55,"index":1613},"line":52,"code":"    it('returns the transaction breakdown for a service', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint: 'GET /internal/apm/services/{serviceName}/transaction/charts/breakdown',\n        params: {\n          path: {\n            serviceName: 'opbeans-node'\n          },\n          query: {\n            start,\n            end,\n            transactionType,\n            environment: 'ENVIRONMENT_ALL',\n            kuery: ''\n          }\n        }\n      });\n      expect(response.status).to.be(200);\n      expectSnapshot(response.body).toMatch();\n    });","file":"apm_api_integration/tests/transactions/breakdown.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the transaction breakdown for a transaction group","suites":[],"updatePoint":{"line":71,"column":65,"index":2207},"line":71,"code":"    it('returns the transaction breakdown for a transaction group', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint: 'GET /internal/apm/services/{serviceName}/transaction/charts/breakdown',\n        params: {\n          path: {\n            serviceName: 'opbeans-node'\n          },\n          query: {\n            start,\n            end,\n            transactionType,\n            transactionName,\n            environment: 'ENVIRONMENT_ALL',\n            kuery: ''\n          }\n        }\n      });\n      expect(response.status).to.be(200);\n      const {\n        timeseries\n      } = response.body;\n      const numberOfSeries = timeseries.length;\n      expectSnapshot(numberOfSeries).toMatchInline(`1`);\n      const {\n        title,\n        color,\n        type,\n        data,\n        hideLegend,\n        legendValue\n      } = timeseries[0];\n      const nonNullDataPoints = data.filter(({\n        y\n      }) => y !== null);\n      expectSnapshot(nonNullDataPoints.length).toMatchInline(`47`);\n      expectSnapshot(data.slice(0, 5).map(({\n        x,\n        y\n      }) => {\n        return {\n          x: new Date(x ?? NaN).toISOString(),\n          y\n        };\n      })).toMatchInline(`\n        Array [\n          Object {\n            \"x\": \"2021-08-03T06:50:00.000Z\",\n            \"y\": null,\n          },\n          Object {\n            \"x\": \"2021-08-03T06:50:30.000Z\",\n            \"y\": 1,\n          },\n          Object {\n            \"x\": \"2021-08-03T06:51:00.000Z\",\n            \"y\": null,\n          },\n          Object {\n            \"x\": \"2021-08-03T06:51:30.000Z\",\n            \"y\": 1,\n          },\n          Object {\n            \"x\": \"2021-08-03T06:52:00.000Z\",\n            \"y\": 1,\n          },\n        ]\n      `);\n      expectSnapshot(title).toMatchInline(`\"app\"`);\n      expectSnapshot(color).toMatchInline(`\"#54b399\"`);\n      expectSnapshot(type).toMatchInline(`\"areaStacked\"`);\n      expectSnapshot(hideLegend).toMatchInline(`false`);\n      expectSnapshot(legendValue).toMatchInline(`\"100%\"`);\n      expectSnapshot(data).toMatch();\n    });","file":"apm_api_integration/tests/transactions/breakdown.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the transaction breakdown sorted by name","suites":[],"updatePoint":{"line":145,"column":56,"index":4265},"line":145,"code":"    it('returns the transaction breakdown sorted by name', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint: 'GET /internal/apm/services/{serviceName}/transaction/charts/breakdown',\n        params: {\n          path: {\n            serviceName: 'opbeans-node'\n          },\n          query: {\n            start,\n            end,\n            transactionType,\n            environment: 'ENVIRONMENT_ALL',\n            kuery: ''\n          }\n        }\n      });\n      expect(response.status).to.be(200);\n      expectSnapshot(response.body.timeseries.map(serie => serie.title)).toMatchInline(`\n          Array [\n            \"app\",\n            \"http\",\n            \"postgresql\",\n            \"redis\",\n          ]\n        `);\n    });","file":"apm_api_integration/tests/transactions/breakdown.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":34,"column":31,"index":1226},"line":34,"code":"    it('handles the empty state', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint,\n        ...getOptions()\n      });\n      expect(response.status).to.be(200);\n      expect(response.body?.percentileThresholdValue).to.be(undefined);\n      expect(response.body?.overallHistogram?.length).to.be(undefined);\n    });","file":"apm_api_integration/tests/transactions/latency_overall_distribution.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns percentileThresholdValue and overall histogram","suites":[],"updatePoint":{"line":49,"column":62,"index":1851},"line":49,"code":"    it('returns percentileThresholdValue and overall histogram', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint,\n        ...getOptions()\n      });\n      expect(response.status).to.eql(200); // This matches the values returned for the other tab's search strategy approach in `../correlations/*`.\n\n      expect(response.body?.percentileThresholdValue).to.be(1309695.875);\n      expect(response.body?.overallHistogram?.length).to.be(101);\n    });","file":"apm_api_integration/tests/transactions/latency_overall_distribution.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles empty state","suites":[],"updatePoint":{"line":24,"column":27,"index":843},"line":24,"code":"    it('handles empty state', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint: 'GET /internal/apm/services/{serviceName}/transactions/traces/samples',\n        params: {\n          path: {\n            serviceName: 'opbeans-java'\n          },\n          query: {\n            start,\n            end,\n            transactionType: 'request',\n            environment: 'ENVIRONMENT_ALL',\n            transactionName: 'APIRestController#stats',\n            kuery: ''\n          }\n        }\n      });\n      expect(response.status).to.be(200);\n      expect(response.body.traceSamples.length).to.be(0);\n    });","file":"apm_api_integration/tests/transactions/trace_samples.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the correct samples","suites":[],"updatePoint":{"line":49,"column":35,"index":1638},"line":49,"code":"    it('returns the correct samples', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint: 'GET /internal/apm/services/{serviceName}/transactions/traces/samples',\n        params: {\n          path: {\n            serviceName: 'opbeans-java'\n          },\n          query: {\n            start,\n            end,\n            transactionType: 'request',\n            environment: 'ENVIRONMENT_ALL',\n            transactionName: 'APIRestController#stats',\n            kuery: ''\n          }\n        }\n      });\n      const {\n        traceSamples\n      } = response.body;\n      expect(response.status).to.be(200);\n      expectSnapshot(response.body.traceSamples.length).toMatchInline(`15`);\n      expectSnapshot(traceSamples).toMatchInline(`\n          Array [\n            Object {\n              \"score\": 0,\n              \"timestamp\": \"2021-08-03T07:19:11.880Z\",\n              \"traceId\": \"6d85d8f1bc4bbbfdb19cdba59d2fc164\",\n              \"transactionId\": \"d0a16f0f52f25d6b\",\n            },\n            Object {\n              \"score\": 0,\n              \"timestamp\": \"2021-08-03T07:19:10.914Z\",\n              \"traceId\": \"10d882b7118870015815a27c37892375\",\n              \"transactionId\": \"0cf9db0b1e321239\",\n            },\n            Object {\n              \"score\": 0,\n              \"timestamp\": \"2021-08-03T07:17:50.702Z\",\n              \"traceId\": \"45b3d1a86003938687a55e49bf3610b8\",\n              \"transactionId\": \"a707456bda99ee98\",\n            },\n            Object {\n              \"score\": 0,\n              \"timestamp\": \"2021-08-03T07:17:47.588Z\",\n              \"traceId\": \"2ca82e99453c58584c4b8de9a8ba4ec3\",\n              \"transactionId\": \"8fa2ca73976ce1e7\",\n            },\n            Object {\n              \"score\": 0,\n              \"timestamp\": \"2021-08-03T07:17:09.819Z\",\n              \"traceId\": \"a21ea39b41349a4614a86321d965c957\",\n              \"transactionId\": \"338bd7908cbf7f2d\",\n            },\n            Object {\n              \"score\": 0,\n              \"timestamp\": \"2021-08-03T07:15:15.804Z\",\n              \"traceId\": \"ca7a2072e7974ae84b5096706c6b6255\",\n              \"transactionId\": \"92ab7f2ef11685dd\",\n            },\n            Object {\n              \"score\": 0,\n              \"timestamp\": \"2021-08-03T07:15:00.171Z\",\n              \"traceId\": \"d250e2a1bad40f78653d8858db65326b\",\n              \"transactionId\": \"6fcd12599c1b57fa\",\n            },\n            Object {\n              \"score\": 0,\n              \"timestamp\": \"2021-08-03T07:14:34.640Z\",\n              \"traceId\": \"66bd97c457f5675665397ac9201cc050\",\n              \"transactionId\": \"592b60cc9ddabb15\",\n            },\n            Object {\n              \"score\": 0,\n              \"timestamp\": \"2021-08-03T07:11:55.249Z\",\n              \"traceId\": \"d9415d102c0634e1e8fa53ceef07be70\",\n              \"transactionId\": \"fab91c68c9b1c42b\",\n            },\n            Object {\n              \"score\": 0,\n              \"timestamp\": \"2021-08-03T07:03:29.734Z\",\n              \"traceId\": \"0996b09e42ad4dbfaaa6a069326c6e66\",\n              \"transactionId\": \"5721364b179716d0\",\n            },\n            Object {\n              \"score\": 0,\n              \"timestamp\": \"2021-08-03T07:03:05.825Z\",\n              \"traceId\": \"7483bd52150d1c93a858c60bfdd0c138\",\n              \"transactionId\": \"e20e701ff93bdb55\",\n            },\n            Object {\n              \"score\": 0,\n              \"timestamp\": \"2021-08-03T06:58:34.565Z\",\n              \"traceId\": \"4943691f87b7eb97d442d1ef33ca65c7\",\n              \"transactionId\": \"f6f4677d731e57c5\",\n            },\n            Object {\n              \"score\": 0,\n              \"timestamp\": \"2021-08-03T06:55:02.016Z\",\n              \"traceId\": \"9a84d15e5a0e32098d569948474e8e2f\",\n              \"transactionId\": \"b85db78a9824107b\",\n            },\n            Object {\n              \"score\": 0,\n              \"timestamp\": \"2021-08-03T06:54:37.915Z\",\n              \"traceId\": \"e123f0466fa092f345d047399db65aa2\",\n              \"transactionId\": \"c0af16286229d811\",\n            },\n            Object {\n              \"score\": 0,\n              \"timestamp\": \"2021-08-03T06:53:18.507Z\",\n              \"traceId\": \"5267685738bf75b68b16bf3426ba858c\",\n              \"transactionId\": \"5223f43bc3154c5a\",\n            },\n          ]\n        `);\n    });","file":"apm_api_integration/tests/transactions/trace_samples.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"PNG file matches the baseline image","suites":["Captures"],"updatePoint":{"line":27,"column":43,"index":1075},"line":27,"code":"    it('PNG file matches the baseline image', async () => {\n      await PageObjects.common.navigateToApp(appId);\n      await (await testSubjects.find('shareButton')).click();\n      await (await testSubjects.find('captureTestPanel')).click();\n      await (await testSubjects.find('captureTestPNG')).click();\n      await PageObjects.reporting.clickGenerateReportButton();\n      const url = await PageObjects.reporting.getReportURL(60000);\n      const captureData = await PageObjects.reporting.getRawPdfReportData(url);\n      const pngSessionFilePath = await PageObjects.reporting.writeSessionReport('capture_test_baseline_a', 'png', captureData, screenshotDir);\n      expect(await png.compareAgainstBaseline(pngSessionFilePath, fixtures.baselineAPng, screenshotDir, updateBaselines)).to.be.lessThan(0.09);\n    });","file":"examples/reporting_examples/capture_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"imports an 8.2 workpad","suites":["migration smoke test"],"updatePoint":{"line":15,"column":30,"index":564},"line":15,"code":"    it('imports an 8.2 workpad', async function () {\n      /*\n        In 8.1 Canvas introduced by value embeddables, which requires expressions to know about embeddable migrations\n        Starting in 8.3, we were seeing an error during migration where it would appear that an 8.2 workpad was\n        from a future version.  This was because there were missing embeddable migrations on the expression because\n        the Canvas plugin was adding the embeddable expression with all of it's migrations before other embeddables had\n        registered their own migrations.\n         This smoke test is intended to import an 8.2 workpad to ensure that we don't hit a similar scenario in the future\n      */\n      await PageObjects.settings.navigateTo();\n      await PageObjects.settings.clickKibanaSavedObjects();\n      await PageObjects.savedObjects.waitTableIsLoaded();\n      await PageObjects.savedObjects.importFile(path.join(__dirname, 'exports', '8.2.workpad.ndjson'));\n      await PageObjects.savedObjects.checkImportSucceeded();\n      await PageObjects.savedObjects.clickImportDone();\n    });","file":"functional/apps/canvas/migrations_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"migrates a workpad from 8.1","suites":["migration smoke test"],"updatePoint":{"line":31,"column":35,"index":1664},"line":31,"code":"    it('migrates a workpad from 8.1', async function () {\n      /*\n        This is a smoke test to make sure migrations don't fail.\n        This workpad from 8.1 has both by-val and by-ref embeddables\n      */\n      await PageObjects.settings.navigateTo();\n      await PageObjects.settings.clickKibanaSavedObjects();\n      await PageObjects.savedObjects.waitTableIsLoaded();\n      await PageObjects.savedObjects.importFile(path.join(__dirname, 'exports', '8.1.embeddable_test.ndjson'));\n      await PageObjects.savedObjects.checkImportSucceeded();\n      await PageObjects.savedObjects.clickImportDone();\n    });","file":"functional/apps/canvas/migrations_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"loads workpad list","suites":["smoke test"],"updatePoint":{"line":38,"column":26,"index":1432},"line":38,"code":"    it('loads workpad list', async () => {\n      await retry.try(async () => {\n        const workpadRows = await testSubjects.findAll(workpadListSelector);\n        expect(workpadRows).to.have.length(1);\n        expect(await workpadRows[0].getVisibleText()).to.equal('Test Workpad');\n      });\n    });","file":"functional/apps/canvas/smoke_test.js","skipped":false,"dir":"x-pack/test"},{"name":"loads workpage when clicked","suites":["smoke test"],"updatePoint":{"line":45,"column":35,"index":1742},"line":45,"code":"    it('loads workpage when clicked', async () => {\n      // click the first workpad in the list to load it\n      await testSubjects.click(workpadListSelector); // wait for the workpad page to load\n\n      await retry.waitFor('workpad page', () => testSubjects.exists('canvasWorkpadPage')); // check that workpad loaded in url\n\n      await retry.try(async () => {\n        const url = await browser.getCurrentUrl();\n        const path = new URL(url).pathname;\n        expect(path).to.equal(`/app/canvas/workpad/${testWorkpadId}/page/1`);\n      });\n    });","file":"functional/apps/canvas/smoke_test.js","skipped":false,"dir":"x-pack/test"},{"name":"renders elements on workpad","suites":["smoke test"],"updatePoint":{"line":57,"column":35,"index":2296},"line":57,"code":"    it('renders elements on workpad', async () => {\n      await retry.try(async () => {\n        // check for elements on the page\n        const elements = await testSubjects.findAll('canvasWorkpadPage > canvasWorkpadPageElementContent');\n        expect(elements).to.have.length(4); // check that the elements are what we expect\n        // first is a markdown element\n\n        const md = await elements[0].findByCssSelector('.canvasMarkdown');\n        expect(await md.getVisibleText()).to.contain('Welcome to Canvas'); // second element is a datatable that uses essql\n\n        const serverRows = await elements[1].findAllByCssSelector('.canvasDataTable tbody tr');\n        expect(serverRows).to.have.length(10); // third is a datatable that uses csv\n\n        const commonRows = await elements[2].findAllByCssSelector('.canvasDataTable tbody tr');\n        expect(commonRows).to.have.length(2); // fourth is a datatable that uses timelion\n\n        const timelionRows = await elements[3].findAllByCssSelector('.canvasDataTable tbody tr');\n        expect(timelionRows).to.have.length(12);\n      });\n    });","file":"functional/apps/canvas/smoke_test.js","skipped":false,"dir":"x-pack/test"},{"name":"should be able to import dashboard with controls from 8.0.0","suites":["Export import saved objects between versions"],"updatePoint":{"line":45,"column":67,"index":1830},"line":45,"code":"    it('should be able to import dashboard with controls from 8.0.0', async () => {\n      // this will catch cases where there is an error in the migrations.\n      await savedObjects.checkImportSucceeded();\n      await savedObjects.clickImportDone();\n    });","file":"functional/apps/dashboard/group2/migration_smoke_tests/controls_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"should render all panels on the dashboard","suites":["Export import saved objects between versions"],"updatePoint":{"line":50,"column":49,"index":2071},"line":50,"code":"    it('should render all panels on the dashboard', async () => {\n      await dashboardControls.enableControlsLab();\n      await common.navigateToApp('dashboard');\n      await dashboard.loadSavedDashboard('[8.0.0] Controls Dashboard'); // dashboard should load properly\n\n      await dashboard.expectOnDashboard('[8.0.0] Controls Dashboard');\n      await dashboard.waitForRenderComplete(); // There should be 0 error embeddables on the dashboard\n\n      const errorEmbeddables = await testSubjects.findAll('embeddableStackError');\n      expect(errorEmbeddables.length).to.be(0);\n    });","file":"functional/apps/dashboard/group2/migration_smoke_tests/controls_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"loads all controls from the saved dashboard","suites":["Export import saved objects between versions"],"updatePoint":{"line":61,"column":51,"index":2658},"line":61,"code":"    it('loads all controls from the saved dashboard', async () => {\n      expect(await dashboardControls.getControlsCount()).to.be(2);\n      expect(await dashboardControls.getAllControlTitles()).to.eql(['Speaker Name', 'Play Name']);\n      const ids = await dashboardControls.getAllControlIds();\n      await dashboardControls.optionsListOpenPopover(ids[0]);\n      await retry.try(async () => {\n        expect(await dashboardControls.optionsListPopoverGetAvailableOptionsCount()).to.be(10);\n      });\n      await dashboardControls.optionsListEnsurePopoverIsClosed(ids[0]);\n      await dashboardControls.optionsListOpenPopover(ids[1]);\n      await retry.try(async () => {\n        // the second control should only have 5 available options because the previous control has HAMLET ROMEO JULIET and BRUTUS selected\n        expect(await dashboardControls.optionsListPopoverGetAvailableOptionsCount()).to.be(5);\n      });\n      await dashboardControls.optionsListEnsurePopoverIsClosed(ids[1]);\n    });","file":"functional/apps/dashboard/group2/migration_smoke_tests/controls_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"applies default selected options list options to control","suites":["Export import saved objects between versions"],"updatePoint":{"line":77,"column":64,"index":3666},"line":77,"code":"    it('applies default selected options list options to control', async () => {\n      const controlIds = await dashboardControls.getAllControlIds();\n      const selectionString = await dashboardControls.optionsListGetSelectionsString(controlIds[0]);\n      expect(selectionString).to.be('HAMLET, ROMEO, JULIET, BRUTUS');\n    });","file":"functional/apps/dashboard/group2/migration_smoke_tests/controls_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"applies default selected options list options to dashboard","suites":["Export import saved objects between versions"],"updatePoint":{"line":82,"column":66,"index":3997},"line":82,"code":"    it('applies default selected options list options to dashboard', async () => {\n      // because 4 selections are made on the control, the pie chart should only show 4 slices.\n      await elasticChart.setNewChartUiDebugFlag();\n      await queryBar.submitQuery();\n      await pieChart.expectPieSliceCountEsCharts(4);\n    });","file":"functional/apps/dashboard/group2/migration_smoke_tests/controls_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"should be able to import dashboard with various Lens panels from 7.12.1","suites":["Export import saved objects between versions"],"updatePoint":{"line":35,"column":79,"index":1647},"line":35,"code":"    it('should be able to import dashboard with various Lens panels from 7.12.1', async () => {\n      // this will catch cases where there is an error in the migrations.\n      await PageObjects.savedObjects.checkImportSucceeded();\n      await PageObjects.savedObjects.clickImportDone();\n    });","file":"functional/apps/dashboard/group2/migration_smoke_tests/lens_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"should render all panels on the dashboard","suites":["Export import saved objects between versions"],"updatePoint":{"line":40,"column":49,"index":1912},"line":40,"code":"    it('should render all panels on the dashboard', async () => {\n      await PageObjects.common.navigateToApp('dashboard');\n      await PageObjects.dashboard.loadSavedDashboard('[7.12.1] Lens By Value Test Dashboard'); // dashboard should load properly\n\n      await PageObjects.dashboard.expectOnDashboard('[7.12.1] Lens By Value Test Dashboard');\n      await PageObjects.dashboard.waitForRenderComplete(); // There should be 0 error embeddables on the dashboard\n\n      const errorEmbeddables = await testSubjects.findAll('embeddableStackError');\n      expect(errorEmbeddables.length).to.be(0);\n    });","file":"functional/apps/dashboard/group2/migration_smoke_tests/lens_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"should show the edit action for all panels","suites":["Export import saved objects between versions"],"updatePoint":{"line":50,"column":50,"index":2517},"line":50,"code":"    it('should show the edit action for all panels', async () => {\n      await PageObjects.dashboard.switchToEditMode(); //   All panels should be editable. This will catch cases where an error does not create an error embeddable.\n\n      const panelTitles = await PageObjects.dashboard.getPanelTitles();\n\n      for (const title of panelTitles) {\n        await dashboardPanelActions.expectExistsEditPanelAction(title);\n      }\n    });","file":"functional/apps/dashboard/group2/migration_smoke_tests/lens_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"should retain all panel drilldowns from 7.12.1","suites":["Export import saved objects between versions"],"updatePoint":{"line":59,"column":54,"index":2955},"line":59,"code":"    it('should retain all panel drilldowns from 7.12.1', async () => {\n      // Both panels configured with drilldowns in 7.12.1 should still have drilldowns.\n      const totalPanels = await PageObjects.dashboard.getPanelCount();\n      let panelsWithDrilldowns = 0;\n\n      for (let panelIndex = 0; panelIndex < totalPanels; panelIndex++) {\n        if ((await PageObjects.dashboard.getPanelDrilldownCount(panelIndex)) === 1) {\n          panelsWithDrilldowns++;\n        }\n      }\n\n      expect(panelsWithDrilldowns).to.be(2);\n    });","file":"functional/apps/dashboard/group2/migration_smoke_tests/lens_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"should be able to import dashboard with TSVB panels from 7.12.1","suites":["Export import saved objects between versions","From 7.12.1"],"updatePoint":{"line":28,"column":73,"index":1369},"line":28,"code":"      it('should be able to import dashboard with TSVB panels from 7.12.1', async () => {\n        // this will catch cases where there is an error in the migrations.\n        await PageObjects.savedObjects.checkImportSucceeded();\n        await PageObjects.savedObjects.clickImportDone();\n      });","file":"functional/apps/dashboard/group2/migration_smoke_tests/tsvb_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"should render all panels on the dashboard","suites":["Export import saved objects between versions","From 7.12.1"],"updatePoint":{"line":33,"column":51,"index":1644},"line":33,"code":"      it('should render all panels on the dashboard', async () => {\n        await PageObjects.common.navigateToApp('dashboard');\n        await PageObjects.dashboard.loadSavedDashboard('TSVB Index Pattern Smoke Test'); // dashboard should load properly\n\n        await PageObjects.dashboard.expectOnDashboard('TSVB Index Pattern Smoke Test');\n        await PageObjects.dashboard.waitForRenderComplete(); // There should be 0 error embeddables on the dashboard\n\n        const errorEmbeddables = await testSubjects.findAll('embeddableStackError');\n        expect(errorEmbeddables.length).to.be(0);\n      });","file":"functional/apps/dashboard/group2/migration_smoke_tests/tsvb_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"should show the edit action for all panels","suites":["Export import saved objects between versions","From 7.12.1"],"updatePoint":{"line":43,"column":52,"index":2249},"line":43,"code":"      it('should show the edit action for all panels', async () => {\n        await PageObjects.dashboard.switchToEditMode(); //   All panels should be editable. This will catch cases where an error does not create an error embeddable.\n\n        const panelTitles = await PageObjects.dashboard.getPanelTitles();\n\n        for (const title of panelTitles) {\n          await dashboardPanelActions.expectExistsEditPanelAction(title);\n        }\n      });","file":"functional/apps/dashboard/group2/migration_smoke_tests/tsvb_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"should retain all panel drilldowns from 7.12.1","suites":["Export import saved objects between versions","From 7.12.1"],"updatePoint":{"line":52,"column":56,"index":2701},"line":52,"code":"      it('should retain all panel drilldowns from 7.12.1', async () => {\n        // Both panels configured with drilldowns in 7.12.1 should still have drilldowns.\n        const totalPanels = await PageObjects.dashboard.getPanelCount();\n        let panelsWithDrilldowns = 0;\n        let drilldownCount = 0;\n\n        for (let panelIndex = 0; panelIndex < totalPanels; panelIndex++) {\n          const panelDrilldownCount = await PageObjects.dashboard.getPanelDrilldownCount(panelIndex);\n\n          if (panelDrilldownCount >= 1) {\n            panelsWithDrilldowns++;\n          }\n\n          drilldownCount += await PageObjects.dashboard.getPanelDrilldownCount(panelIndex);\n        }\n\n        expect(panelsWithDrilldowns).to.be(2);\n        expect(drilldownCount).to.be(3);\n      });","file":"functional/apps/dashboard/group2/migration_smoke_tests/tsvb_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"should be able to import dashboard with TSVB panels from 7.13.3","suites":["Export import saved objects between versions","from 7.13.3"],"updatePoint":{"line":84,"column":73,"index":4154},"line":84,"code":"      it('should be able to import dashboard with TSVB panels from 7.13.3', async () => {\n        // this will catch cases where there is an error in the migrations.\n        await PageObjects.savedObjects.checkImportSucceeded();\n        await PageObjects.savedObjects.clickImportDone();\n      });","file":"functional/apps/dashboard/group2/migration_smoke_tests/tsvb_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"should render all panels on the dashboard","suites":["Export import saved objects between versions","from 7.13.3"],"updatePoint":{"line":89,"column":51,"index":4429},"line":89,"code":"      it('should render all panels on the dashboard', async () => {\n        await PageObjects.common.navigateToApp('dashboard');\n        await PageObjects.dashboard.loadSavedDashboard('TSVB 7.13.3'); // dashboard should load properly\n\n        await PageObjects.dashboard.expectOnDashboard('TSVB 7.13.3');\n        await PageObjects.dashboard.waitForRenderComplete(); // There should be 0 error embeddables on the dashboard\n\n        const errorEmbeddables = await testSubjects.findAll('embeddableStackError');\n        expect(errorEmbeddables.length).to.be(0);\n      });","file":"functional/apps/dashboard/group2/migration_smoke_tests/tsvb_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"should show the edit action for all panels","suites":["Export import saved objects between versions","from 7.13.3"],"updatePoint":{"line":99,"column":52,"index":4998},"line":99,"code":"      it('should show the edit action for all panels', async () => {\n        await PageObjects.dashboard.switchToEditMode(); //   All panels should be editable. This will catch cases where an error does not create an error embeddable.\n\n        const panelTitles = await PageObjects.dashboard.getPanelTitles();\n\n        for (const title of panelTitles) {\n          await dashboardPanelActions.expectExistsEditPanelAction(title);\n        }\n      });","file":"functional/apps/dashboard/group2/migration_smoke_tests/tsvb_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"should be able to import dashboard with various Visualize panels from 7.12.1","suites":["Export import saved objects between versions"],"updatePoint":{"line":35,"column":84,"index":1657},"line":35,"code":"    it('should be able to import dashboard with various Visualize panels from 7.12.1', async () => {\n      // this will catch cases where there is an error in the migrations.\n      await PageObjects.savedObjects.checkImportSucceeded();\n      await PageObjects.savedObjects.clickImportDone();\n    });","file":"functional/apps/dashboard/group2/migration_smoke_tests/visualize_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"should render all panels on the dashboard","suites":["Export import saved objects between versions"],"updatePoint":{"line":40,"column":49,"index":1922},"line":40,"code":"    it('should render all panels on the dashboard', async () => {\n      await PageObjects.common.navigateToApp('dashboard');\n      await PageObjects.dashboard.loadSavedDashboard('[7.12.1] Visualize Test Dashboard'); // dashboard should load properly\n\n      await PageObjects.dashboard.expectOnDashboard('[7.12.1] Visualize Test Dashboard');\n      await PageObjects.dashboard.waitForRenderComplete(); // There should be 0 error embeddables on the dashboard\n\n      const errorEmbeddables = await testSubjects.findAll('embeddableStackError');\n      expect(errorEmbeddables.length).to.be(0);\n    });","file":"functional/apps/dashboard/group2/migration_smoke_tests/visualize_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"should show the edit action for all panels","suites":["Export import saved objects between versions"],"updatePoint":{"line":50,"column":50,"index":2519},"line":50,"code":"    it('should show the edit action for all panels', async () => {\n      await PageObjects.dashboard.switchToEditMode(); //   All panels should be editable. This will catch cases where an error does not create an error embeddable.\n\n      const panelTitles = await PageObjects.dashboard.getPanelTitles();\n\n      for (const title of panelTitles) {\n        await dashboardPanelActions.expectExistsEditPanelAction(title);\n      }\n    });","file":"functional/apps/dashboard/group2/migration_smoke_tests/visualize_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"should retain all panel drilldowns from 7.12.1","suites":["Export import saved objects between versions"],"updatePoint":{"line":59,"column":54,"index":2957},"line":59,"code":"    it('should retain all panel drilldowns from 7.12.1', async () => {\n      // Both panels configured with drilldowns in 7.12.1 should still have drilldowns.\n      const totalPanels = await PageObjects.dashboard.getPanelCount();\n      let panelsWithDrilldowns = 0;\n\n      for (let panelIndex = 0; panelIndex < totalPanels; panelIndex++) {\n        if ((await PageObjects.dashboard.getPanelDrilldownCount(panelIndex)) === 1) {\n          panelsWithDrilldowns++;\n        }\n      }\n\n      expect(panelsWithDrilldowns).to.be(2);\n    });","file":"functional/apps/dashboard/group2/migration_smoke_tests/visualize_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"create and save a new watch","suites":["watcher_test"],"updatePoint":{"line":63,"column":35,"index":2417},"line":63,"code":"    it('create and save a new watch', async () => {\n      await PageObjects.watcher.createWatch(watchID, watchName);\n      const watch = await PageObjects.watcher.getWatch(watchID);\n      expect(watch.id).to.be(watchID);\n      expect(watch.name).to.be(watchName);\n    });","file":"functional/apps/watcher/watcher_test.js","skipped":false,"dir":"x-pack/test"},{"name":"should not allow a user to save a watch with the same ID","suites":["watcher_test"],"updatePoint":{"line":69,"column":64,"index":2718},"line":69,"code":"    it('should not allow a user to save a watch with the same ID', async () => {\n      await PageObjects.watcher.createWatch(watchID, updatedName);\n      const errorCallout = await testSubjects.find('sectionErrorMessage');\n      const errorCalloutText = await errorCallout.getVisibleText();\n      expect(errorCalloutText).to.be(`There is already a watch with ID '${watchID}'.`);\n    }); //delete the watch","file":"functional/apps/watcher/watcher_test.js","skipped":false,"dir":"x-pack/test"},{"name":"should delete the watch","suites":["watcher_test"],"updatePoint":{"line":76,"column":31,"index":3092},"line":76,"code":"    it('should delete the watch', async () => {\n      // Navigate to the main list page\n      await PageObjects.common.navigateToApp('watcher');\n      const watchList = keyBy(await PageObjects.watcher.getWatches(), 'id');\n      log.debug(watchList);\n      expect(watchList.watchID.name).to.eql([watchName]);\n      await PageObjects.watcher.deleteWatch(watchID);\n      await testSubjects.click('confirmModalConfirmButton');\n      await PageObjects.header.waitUntilLoadingHasFinished();\n      await retry.try(async () => {\n        const emptyPrompt = await testSubjects.find('emptyPrompt');\n        const emptyPromptText = await emptyPrompt.getVisibleText();\n        expect(emptyPromptText).to.contain('You don’t have any watches yet\\n');\n      });\n    });","file":"functional/apps/watcher/watcher_test.js","skipped":false,"dir":"x-pack/test"},{"name":"can navigate to APM app","suites":["APM smoke test"],"updatePoint":{"line":25,"column":31,"index":1014},"line":25,"code":"    it('can navigate to APM app', async () => {\n      await testSubjects.existOrFail('apmMainContainer', {\n        timeout: 10000\n      }); // wait for this last change on the page;\n      // <caption class=\"euiScreenReaderOnly euiTableCaption\">This table contains 1 rows out of 1 rows; Page 1 of 1.</caption>\n      // but \"<caption class=\"euiScreenReaderOnly euiTableCaption\">\" always exists so we have to wait until there's text\n\n      await retry.waitForWithTimeout('The APM table has a caption', 5000, async () => {\n        return (await (await find.byCssSelector('caption')).getAttribute('innerHTML')).includes('This table contains ');\n      });\n      await find.clickByDisplayedLinkText('apm-a-rum-test-e2e-general-usecase');\n      log.debug('### apm smoke test passed');\n      await find.clickByLinkText('general-usecase-initial-p-load');\n      log.debug('### general use case smoke test passed');\n    });","file":"stack_functional_integration/apps/apm/apm_smoke_test.js","skipped":false,"dir":"x-pack/test"},{"name":"should display tabs in the ML app correctly","suites":["ML smoke test should check all the tabs"],"updatePoint":{"line":17,"column":51,"index":626},"line":17,"code":"    it('should display tabs in the ML app correctly', async () => {\n      await ml.testExecution.logTestStep('should load the ML app');\n      await ml.navigation.navigateToMl();\n      await ml.testExecution.logTestStep('should display the enabled \"Overview\" tab');\n      await ml.navigation.assertOverviewTabEnabled(true);\n      await ml.testExecution.logTestStep('should display the enabled \"Anomaly Detection\" tab');\n      await ml.navigation.assertAnomalyDetectionTabEnabled(true);\n      await ml.testExecution.logTestStep('should display the enabled \"Data Frame Analytics\" tab');\n      await ml.navigation.assertDataFrameAnalyticsTabEnabled(true);\n      await ml.testExecution.logTestStep('should display the enabled \"Data Visualizer\" tab');\n      await ml.navigation.assertDataVisualizerTabEnabled(true);\n      await ml.testExecution.logTestStep('should display the enabled \"Settings\" tab');\n      await ml.navigation.assertSettingsTabEnabled(true);\n    });","file":"stack_functional_integration/apps/ml/ml_smoke_test.js","skipped":false,"dir":"x-pack/test"},{"name":"should add result a case and not have add to timeline in result","suites":["Add to Cases","observability"],"updatePoint":{"line":22,"column":71,"index":921},"line":22,"code":"    it('should add result a case and not have add to timeline in result', () => {\n      cy.react('CustomItemAction', {\n        props: {\n          index: 1\n        }\n      }).click();\n      cy.contains('Live query details');\n      cy.contains('Add to Case').click();\n      cy.contains('Select case');\n      cy.contains(/Select$/).click();\n      cy.contains('Test Obs case has been updated');\n      cy.visit('/app/observability/cases');\n      cy.contains('Test Obs case').click();\n      checkResults();\n      cy.contains('attached Osquery results');\n      cy.contains('SELECT * FROM users;');\n      cy.contains('View in Discover').should('exist');\n      cy.contains('View in Lens').should('exist');\n      cy.contains('Add to Case').should('not.exist');\n      cy.contains('Add to timeline investigation').should('not.exist');\n    });","file":"integration/all/cases.spec.ts","skipped":false,"dir":"x-pack/plugins/osquery/cypress"},{"name":"should add result a case and have add to timeline in result","suites":["Add to Cases","security"],"updatePoint":{"line":53,"column":67,"index":2038},"line":53,"code":"    it('should add result a case and have add to timeline in result', () => {\n      cy.react('CustomItemAction', {\n        props: {\n          index: 1\n        }\n      }).click();\n      cy.contains('Live query details');\n      cy.contains('Add to Case').click();\n      cy.contains('Select case');\n      cy.contains(/Select$/).click();\n      cy.contains('Test Security Case has been updated');\n      cy.visit('/app/security/cases');\n      cy.contains('Test Security Case').click();\n      checkResults();\n      cy.contains('attached Osquery results');\n      cy.contains('SELECT * FROM users;');\n      cy.contains('View in Discover').should('exist');\n      cy.contains('View in Lens').should('exist');\n      cy.contains('Add to Case').should('not.exist');\n      cy.contains('Add to timeline investigation').should('exist');\n    });","file":"integration/all/cases.spec.ts","skipped":false,"dir":"x-pack/plugins/osquery/cypress"},{"name":"Creates an exception item","suites":["Add exception from rule details","rule with existing exceptions"],"updatePoint":{"line":86,"column":33,"index":3756},"line":86,"code":"    it('Creates an exception item', () => {\n      // displays existing exception items\n      cy.get(EXCEPTION_ITEM_VIEWER_CONTAINER).should('have.length', 2);\n      cy.get(NO_EXCEPTIONS_EXIST_PROMPT).should('not.exist'); // clicks prompt button to add a new exception item\n\n      addExceptionFromRuleDetails(getException()); // new exception item displays\n\n      cy.get(EXCEPTION_ITEM_VIEWER_CONTAINER).should('have.length', 3);\n    }); // Trying to figure out with EUI why the search won't trigger","file":"e2e/exceptions/rule_details_flow/add_exception.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Can search for items","suites":["Add exception from rule details","rule with existing exceptions"],"updatePoint":{"line":96,"column":28,"index":4251},"line":96,"code":"    it('Can search for items', () => {\n      // displays existing exception items\n      cy.get(EXCEPTION_ITEM_VIEWER_CONTAINER).should('have.length', 2);\n      cy.get(NO_EXCEPTIONS_EXIST_PROMPT).should('not.exist'); // can search for an exception value\n\n      searchForExceptionItem('foo'); // new exception item displays\n\n      cy.get(EXCEPTION_ITEM_VIEWER_CONTAINER).should('have.length', 1); // displays empty search result view if no matches found\n\n      searchForExceptionItem('abc'); // new exception item displays\n\n      cy.get(NO_EXCEPTIONS_SEARCH_RESULTS_PROMPT).should('exist');\n    });","file":"e2e/exceptions/rule_details_flow/add_exception.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Creates an exception item when none exist","suites":["Add exception from rule details","rule without existing exceptions"],"updatePoint":{"line":127,"column":49,"index":5390},"line":127,"code":"    it('Creates an exception item when none exist', () => {\n      // when no exceptions exist, empty component shows with action to add exception\n      cy.get(NO_EXCEPTIONS_EXIST_PROMPT).should('exist'); // clicks prompt button to add first exception that will also select to close\n      // all matching alerts\n\n      addFirstExceptionFromRuleDetails({\n        field: 'agent.name',\n        operator: 'is',\n        values: ['foo']\n      }); // new exception item displays\n\n      cy.get(EXCEPTION_ITEM_VIEWER_CONTAINER).should('have.length', 1); // Alerts table should now be empty from having added exception and closed\n      // matching alert\n\n      goToAlertsTab();\n      cy.get(EMPTY_ALERT_TABLE).should('exist'); // Closed alert should appear in table\n\n      goToClosedAlerts();\n      cy.get(ALERTS_COUNT).should('exist');\n      cy.get(NUMBER_OF_ALERTS).should('have.text', `${NUMBER_OF_AUDITBEAT_EXCEPTIONS_ALERTS}`); // Remove the exception and load an event that would have matched that exception\n      // to show that said exception now starts to show up again\n\n      goToExceptionsTab(); // when removing exception and again, no more exist, empty screen shows again\n\n      removeException();\n      cy.get(NO_EXCEPTIONS_EXIST_PROMPT).should('exist'); // load more docs\n\n      esArchiverLoad('exceptions_2'); // now that there are no more exceptions, the docs should match and populate alerts\n\n      goToAlertsTab();\n      goToOpenedAlerts();\n      waitForTheRuleToBeExecuted();\n      waitForAlertsToPopulate();\n      cy.get(ALERTS_COUNT).should('exist');\n      cy.get(NUMBER_OF_ALERTS).should('have.text', '2 alerts');\n    });","file":"e2e/exceptions/rule_details_flow/add_exception.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Edits an exception item","suites":["Edit exception using data views from rule details"],"updatePoint":{"line":79,"column":29,"index":3317},"line":79,"code":"  it('Edits an exception item', () => {\n    // displays existing exception item\n    cy.get(EXCEPTION_ITEM_VIEWER_CONTAINER).should('have.length', 1);\n    openEditException(); // check that the existing item's field is being populated\n\n    cy.get(EXCEPTION_ITEM_CONTAINER).eq(0).find(FIELD_INPUT).eq(0).should('have.text', ITEM_FIELD); // check that you can select a different field\n\n    editException(FIELD_DIFFERENT_FROM_EXISTING_ITEM_FIELD, 0, 0);\n    cy.get(EXCEPTION_ITEM_VIEWER_CONTAINER).should('have.length', 1); // Alerts table should still show single alert\n\n    goToAlertsTab();\n    cy.get(ALERTS_COUNT).should('exist');\n    cy.get(NUMBER_OF_ALERTS).should('have.text', `${NUMBER_OF_AUDITBEAT_EXCEPTIONS_ALERTS}`); // load more docs\n\n    esArchiverLoad('exceptions_2'); // now that 2 more docs have been added, one should match the edited exception\n\n    goToAlertsTab();\n    goToOpenedAlerts();\n    waitForTheRuleToBeExecuted();\n    waitForAlertsToPopulate(2); // there should be 2 alerts, one is the original alert and the second is for the newly\n    // matching doc\n\n    cy.get(ALERTS_COUNT).should('exist');\n    cy.get(NUMBER_OF_ALERTS).should('have.text', '2 alerts');\n  });","file":"e2e/exceptions/rule_details_flow/edit_exception_data_view.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Edits an exception item","suites":["Edit exception from rule details"],"updatePoint":{"line":78,"column":29,"index":3255},"line":78,"code":"  it('Edits an exception item', () => {\n    // displays existing exception item\n    cy.get(EXCEPTION_ITEM_VIEWER_CONTAINER).should('have.length', 1);\n    openEditException(); // check that the existing item's field is being populated\n\n    cy.get(EXCEPTION_ITEM_CONTAINER).eq(0).find(FIELD_INPUT).eq(0).should('have.text', ITEM_FIELD); // check that you can select a different field\n\n    editException(FIELD_DIFFERENT_FROM_EXISTING_ITEM_FIELD, 0, 0);\n    cy.get(EXCEPTION_ITEM_VIEWER_CONTAINER).should('have.length', 1); // Alerts table should still show single alert\n\n    goToAlertsTab();\n    cy.get(ALERTS_COUNT).should('exist');\n    cy.get(NUMBER_OF_ALERTS).should('have.text', `${NUMBER_OF_AUDITBEAT_EXCEPTIONS_ALERTS}`); // load more docs\n\n    esArchiverLoad('exceptions_2'); // now that 2 more docs have been added, one should match the edited exception\n\n    goToAlertsTab();\n    goToOpenedAlerts();\n    waitForTheRuleToBeExecuted();\n    waitForAlertsToPopulate(2); // there should be 2 alerts, one is the original alert and the second is for the newly\n    // matching doc\n\n    cy.get(ALERTS_COUNT).should('exist');\n    cy.get(NUMBER_OF_ALERTS).should('have.text', '2 alerts');\n  });","file":"e2e/exceptions/rule_details_flow/edit_exception.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"}]}