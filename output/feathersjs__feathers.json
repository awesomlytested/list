{"repo":"feathersjs/feathers","url":"https://github.com/feathersjs/feathers","branch":"dove","configs":[{"package":"@feathersjs/adapter-commons","lang":"ts","dir":"packages/adapter-commons/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@feathersjs/adapter-tests","lang":"ts","dir":"packages/adapter-tests/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@feathersjs/authentication-client","lang":"ts","dir":"packages/authentication-client/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@feathersjs/authentication-local","lang":"ts","dir":"packages/authentication-local/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@feathersjs/authentication-oauth","lang":"ts","dir":"packages/authentication-oauth/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@feathersjs/authentication","lang":"ts","dir":"packages/authentication/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@feathersjs/client","lang":"ts","dir":"packages/client/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@feathersjs/commons","lang":"ts","dir":"packages/commons/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@feathersjs/configuration","lang":"ts","dir":"packages/configuration/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@feathersjs/errors","lang":"ts","dir":"packages/errors/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@feathersjs/express","lang":"ts","dir":"packages/express/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@feathersjs/feathers","lang":"ts","dir":"packages/feathers/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@feathersjs/koa","lang":"ts","dir":"packages/koa/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@feathersjs/memory","lang":"ts","dir":"packages/memory/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@feathersjs/rest-client","lang":"ts","dir":"packages/rest-client/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@feathersjs/schema","lang":"ts","dir":"packages/schema/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@feathersjs/socketio-client","lang":"ts","dir":"packages/socketio-client/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@feathersjs/socketio","lang":"ts","dir":"packages/socketio/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@feathersjs/transport-commons","lang":"ts","dir":"packages/transport-commons/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"select","suites":["@feathersjs/adapter-commons","select"],"updatePoint":{"line":6,"column":14},"line":6,"code":"    it('select', () => {\n      const selector = select({\n        query: { $select: ['name', 'age'] }\n      })\n\n      return Promise.resolve({\n        name: 'David',\n        age: 3,\n        test: 'me'\n      })\n        .then(selector)\n        .then((result) =>\n          assert.deepStrictEqual(result, {\n            name: 'David',\n            age: 3\n          })\n        )\n    })","file":"commons.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"select with arrays","suites":["@feathersjs/adapter-commons","select"],"updatePoint":{"line":25,"column":26},"line":25,"code":"    it('select with arrays', () => {\n      const selector = select({\n        query: { $select: ['name', 'age'] }\n      })\n\n      return Promise.resolve([\n        {\n          name: 'David',\n          age: 3,\n          test: 'me'\n        },\n        {\n          name: 'D',\n          age: 4,\n          test: 'you'\n        }\n      ])\n        .then(selector)\n        .then((result) =>\n          assert.deepStrictEqual(result, [\n            {\n              name: 'David',\n              age: 3\n            },\n            {\n              name: 'D',\n              age: 4\n            }\n          ])\n        )\n    })","file":"commons.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"select with no query","suites":["@feathersjs/adapter-commons","select"],"updatePoint":{"line":57,"column":28},"line":57,"code":"    it('select with no query', () => {\n      const selector = select({})\n      const data = {\n        name: 'David'\n      }\n\n      return Promise.resolve(data)\n        .then(selector)\n        .then((result) => assert.deepStrictEqual(result, data))\n    })","file":"commons.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"select with other fields","suites":["@feathersjs/adapter-commons","select"],"updatePoint":{"line":68,"column":32},"line":68,"code":"    it('select with other fields', () => {\n      const selector = select(\n        {\n          query: { $select: ['name'] }\n        },\n        'id'\n      )\n      const data = {\n        id: 'me',\n        name: 'David',\n        age: 10\n      }\n\n      return Promise.resolve(data)\n        .then(selector)\n        .then((result) =>\n          assert.deepStrictEqual(result, {\n            id: 'me',\n            name: 'David'\n          })\n        )\n    })","file":"commons.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"returns $sort when present in query","suites":["@feathersjs/adapter-commons/filterQuery","$sort"],"updatePoint":{"line":7,"column":43},"line":7,"code":"    it('returns $sort when present in query', () => {\n      const originalQuery = { $sort: { name: 1 } }\n      const { filters, query } = filterQuery(originalQuery)\n\n      assert.strictEqual(filters.$sort.name, 1)\n      assert.deepStrictEqual(query, {})\n      assert.deepStrictEqual(\n        originalQuery,\n        {\n          $sort: { name: 1 }\n        },\n        'does not modify original query'\n      )\n    })","file":"query.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"returns $sort when present in query as an object","suites":["@feathersjs/adapter-commons/filterQuery","$sort"],"updatePoint":{"line":22,"column":56},"line":22,"code":"    it('returns $sort when present in query as an object', () => {\n      const { filters, query } = filterQuery({\n        $sort: { name: { something: 10 } }\n      })\n\n      assert.strictEqual(filters.$sort.name.something, 10)\n      assert.deepStrictEqual(query, {})\n    })","file":"query.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"converts strings in $sort","suites":["@feathersjs/adapter-commons/filterQuery","$sort"],"updatePoint":{"line":31,"column":33},"line":31,"code":"    it('converts strings in $sort', () => {\n      const { filters, query } = filterQuery({ $sort: { test: '-1' } })\n\n      assert.strictEqual(filters.$sort.test, -1)\n      assert.deepStrictEqual(query, {})\n    })","file":"query.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"does not convert $sort arrays","suites":["@feathersjs/adapter-commons/filterQuery","$sort"],"updatePoint":{"line":38,"column":37},"line":38,"code":"    it('does not convert $sort arrays', () => {\n      const $sort = [\n        ['test', '-1'],\n        ['a', '1']\n      ]\n      const { filters, query } = filterQuery({ $sort })\n\n      assert.strictEqual(filters.$sort, $sort)\n      assert.deepStrictEqual(query, {})\n    })","file":"query.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"throws an error when special parameter is not known","suites":["@feathersjs/adapter-commons/filterQuery","$sort"],"updatePoint":{"line":49,"column":59},"line":49,"code":"    it('throws an error when special parameter is not known', () => {\n      try {\n        const query = { $foo: 1 }\n        filterQuery(query)\n        assert.ok(false, 'Should never get here')\n      } catch (error: any) {\n        assert.strictEqual(error.name, 'BadRequest')\n        assert.strictEqual(error.message, 'Invalid filter value $foo')\n      }\n    })","file":"query.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"returns undefined when not present in query","suites":["@feathersjs/adapter-commons/filterQuery","$sort"],"updatePoint":{"line":60,"column":51},"line":60,"code":"    it('returns undefined when not present in query', () => {\n      const query = { foo: 1 }\n      const { filters } = filterQuery(query)\n\n      assert.strictEqual(filters.$sort, undefined)\n    })","file":"query.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"returns $limit when present in query","suites":["@feathersjs/adapter-commons/filterQuery","$limit"],"updatePoint":{"line":75,"column":44},"line":75,"code":"    it('returns $limit when present in query', () => {\n      const { filters, query } = filterQuery(testQuery)\n\n      assert.strictEqual(filters.$limit, 1)\n      assert.deepStrictEqual(query, {})\n    })","file":"query.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"returns undefined when not present in query","suites":["@feathersjs/adapter-commons/filterQuery","$limit"],"updatePoint":{"line":82,"column":51},"line":82,"code":"    it('returns undefined when not present in query', () => {\n      const query = { foo: 1 }\n      const { filters } = filterQuery(query)\n\n      assert.strictEqual(filters.$limit, undefined)\n    })","file":"query.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"removes $limit from query when present","suites":["@feathersjs/adapter-commons/filterQuery","$limit"],"updatePoint":{"line":89,"column":46},"line":89,"code":"    it('removes $limit from query when present', () => {\n      assert.deepStrictEqual(filterQuery(testQuery).query, {})\n    })","file":"query.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"parses $limit strings into integers (#4)","suites":["@feathersjs/adapter-commons/filterQuery","$limit"],"updatePoint":{"line":93,"column":48},"line":93,"code":"    it('parses $limit strings into integers (#4)', () => {\n      const { filters } = filterQuery({ $limit: '2' })\n\n      assert.strictEqual(filters.$limit, 2)\n    })","file":"query.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"allows $limit 0","suites":["@feathersjs/adapter-commons/filterQuery","$limit"],"updatePoint":{"line":99,"column":23},"line":99,"code":"    it('allows $limit 0', () => {\n      const { filters } = filterQuery({ $limit: 0 }, { paginate: { default: 10 } })\n\n      assert.strictEqual(filters.$limit, 0)\n    })","file":"query.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"limits with default pagination","suites":["@feathersjs/adapter-commons/filterQuery","$limit","pagination"],"updatePoint":{"line":106,"column":40},"line":106,"code":"      it('limits with default pagination', () => {\n        const { filters } = filterQuery({}, { paginate: { default: 10 } })\n        const { filters: filtersNeg } = filterQuery({ $limit: -20 }, { paginate: { default: 5, max: 10 } })\n\n        assert.strictEqual(filters.$limit, 10)\n        assert.strictEqual(filtersNeg.$limit, 5)\n      })","file":"query.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"limits with max pagination","suites":["@feathersjs/adapter-commons/filterQuery","$limit","pagination"],"updatePoint":{"line":114,"column":36},"line":114,"code":"      it('limits with max pagination', () => {\n        const { filters } = filterQuery({ $limit: 20 }, { paginate: { default: 5, max: 10 } })\n\n        assert.strictEqual(filters.$limit, 10)\n      })","file":"query.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"limits with default pagination when not a number","suites":["@feathersjs/adapter-commons/filterQuery","$limit","pagination"],"updatePoint":{"line":120,"column":58},"line":120,"code":"      it('limits with default pagination when not a number', () => {\n        const { filters } = filterQuery({ $limit: 'something' }, { paginate: { default: 5, max: 10 } })\n\n        assert.strictEqual(filters.$limit, 5)\n      })","file":"query.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"limits to 0 when no paginate.default and not a number","suites":["@feathersjs/adapter-commons/filterQuery","$limit","pagination"],"updatePoint":{"line":126,"column":63},"line":126,"code":"      it('limits to 0 when no paginate.default and not a number', () => {\n        const { filters } = filterQuery({ $limit: 'something' }, { paginate: { max: 10 } })\n\n        assert.strictEqual(filters.$limit, 0)\n      })","file":"query.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"still uses paginate.max when there is no paginate.default (#2104)","suites":["@feathersjs/adapter-commons/filterQuery","$limit","pagination"],"updatePoint":{"line":132,"column":75},"line":132,"code":"      it('still uses paginate.max when there is no paginate.default (#2104)', () => {\n        const { filters } = filterQuery({ $limit: 100 }, { paginate: { max: 10 } })\n\n        assert.strictEqual(filters.$limit, 10)\n      })","file":"query.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"returns $skip when present in query","suites":["@feathersjs/adapter-commons/filterQuery","$skip"],"updatePoint":{"line":147,"column":43},"line":147,"code":"    it('returns $skip when present in query', () => {\n      const { filters } = filterQuery(testQuery)\n\n      assert.strictEqual(filters.$skip, 1)\n    })","file":"query.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"removes $skip from query when present","suites":["@feathersjs/adapter-commons/filterQuery","$skip"],"updatePoint":{"line":153,"column":45},"line":153,"code":"    it('removes $skip from query when present', () => {\n      assert.deepStrictEqual(filterQuery(testQuery).query, {})\n    })","file":"query.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"returns undefined when not present in query","suites":["@feathersjs/adapter-commons/filterQuery","$skip"],"updatePoint":{"line":157,"column":51},"line":157,"code":"    it('returns undefined when not present in query', () => {\n      const query = { foo: 1 }\n      const { filters } = filterQuery(query)\n\n      assert.strictEqual(filters.$skip, undefined)\n    })","file":"query.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"parses $skip strings into integers (#4)","suites":["@feathersjs/adapter-commons/filterQuery","$skip"],"updatePoint":{"line":164,"column":47},"line":164,"code":"    it('parses $skip strings into integers (#4)', () => {\n      const { filters } = filterQuery({ $skip: '33' })\n\n      assert.strictEqual(filters.$skip, 33)\n    })","file":"query.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"returns $select when present in query","suites":["@feathersjs/adapter-commons/filterQuery","$select"],"updatePoint":{"line":178,"column":45},"line":178,"code":"    it('returns $select when present in query', () => {\n      const { filters } = filterQuery(testQuery)\n\n      assert.strictEqual(filters.$select, 1)\n    })","file":"query.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"removes $select from query when present","suites":["@feathersjs/adapter-commons/filterQuery","$select"],"updatePoint":{"line":184,"column":47},"line":184,"code":"    it('removes $select from query when present', () => {\n      assert.deepStrictEqual(filterQuery(testQuery).query, {})\n    })","file":"query.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"returns undefined when not present in query","suites":["@feathersjs/adapter-commons/filterQuery","$select"],"updatePoint":{"line":188,"column":51},"line":188,"code":"    it('returns undefined when not present in query', () => {\n      const query = { foo: 1 }\n      const { filters } = filterQuery(query)\n\n      assert.strictEqual(filters.$select, undefined)\n    })","file":"query.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"includes Symbols","suites":["@feathersjs/adapter-commons/filterQuery","$select"],"updatePoint":{"line":195,"column":24},"line":195,"code":"    it('includes Symbols', () => {\n      const TEST = Symbol('testing')\n      const original = {\n        [TEST]: 'message',\n        other: true,\n        sub: { [TEST]: 'othermessage' }\n      }\n\n      const { query } = filterQuery(original)\n\n      assert.deepStrictEqual(query, {\n        [TEST]: 'message',\n        other: true,\n        sub: { [TEST]: 'othermessage' }\n      })\n    })","file":"query.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"only converts plain objects","suites":["@feathersjs/adapter-commons/filterQuery","$select"],"updatePoint":{"line":212,"column":35},"line":212,"code":"    it('only converts plain objects', () => {\n      const userId = new ObjectId()\n      const original = {\n        userId\n      }\n\n      const { query } = filterQuery(original)\n\n      assert.deepStrictEqual(query, original)\n    })","file":"query.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"validates queries in arrays","suites":["@feathersjs/adapter-commons/filterQuery","arrays"],"updatePoint":{"line":225,"column":35},"line":225,"code":"    it('validates queries in arrays', () => {\n      assert.throws(\n        () => {\n          filterQuery({\n            $or: [{ $exists: false }]\n          })\n        },\n        {\n          name: 'BadRequest',\n          message: 'Invalid query parameter $exists'\n        }\n      )\n    })","file":"query.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"allows default operators in $or","suites":["@feathersjs/adapter-commons/filterQuery","arrays"],"updatePoint":{"line":239,"column":39},"line":239,"code":"    it('allows default operators in $or', () => {\n      const { filters } = filterQuery({\n        $or: [{ value: { $gte: 10 } }]\n      })\n\n      assert.deepStrictEqual(filters, {\n        $or: [{ value: { $gte: 10 } }]\n      })\n    })","file":"query.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"throw error when not set as additionals","suites":["@feathersjs/adapter-commons/filterQuery","additional filters"],"updatePoint":{"line":251,"column":47},"line":251,"code":"    it('throw error when not set as additionals', () => {\n      try {\n        filterQuery({ $select: 1, $known: 1 })\n        assert.ok(false, 'Should never get here')\n      } catch (error: any) {\n        assert.strictEqual(error.message, 'Invalid filter value $known')\n      }\n    })","file":"query.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"returns default and known additional filters (array)","suites":["@feathersjs/adapter-commons/filterQuery","additional filters"],"updatePoint":{"line":260,"column":60},"line":260,"code":"    it('returns default and known additional filters (array)', () => {\n      const query = { $select: ['a', 'b'], $known: 1, $unknown: 1 }\n      const { filters } = filterQuery(query, {\n        filters: {\n          $known: true,\n          $unknown: true\n        }\n      })\n\n      assert.strictEqual(filters.$unknown, 1)\n      assert.strictEqual(filters.$known, 1)\n      assert.deepStrictEqual(filters.$select, ['a', 'b'])\n    })","file":"query.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"returns default and known additional filters (object)","suites":["@feathersjs/adapter-commons/filterQuery","additional filters"],"updatePoint":{"line":274,"column":61},"line":274,"code":"    it('returns default and known additional filters (object)', () => {\n      const { filters } = filterQuery(\n        {\n          $known: 1,\n          $select: 1\n        },\n        { filters: { $known: (value: any) => value.toString() } }\n      )\n\n      assert.strictEqual(filters.$unknown, undefined)\n      assert.strictEqual(filters.$known, '1')\n      assert.strictEqual(filters.$select, 1)\n    })","file":"query.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"returns query with default and known additional operators","suites":["@feathersjs/adapter-commons/filterQuery","additional operators"],"updatePoint":{"line":290,"column":65},"line":290,"code":"    it('returns query with default and known additional operators', () => {\n      const { query } = filterQuery(\n        {\n          prop: { $ne: 1, $known: 1 }\n        },\n        { operators: ['$known'] }\n      )\n\n      assert.deepStrictEqual(query, { prop: { $ne: 1, $known: 1 } })\n    })","file":"query.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"throws an error with unknown query operator","suites":["@feathersjs/adapter-commons/filterQuery","additional operators"],"updatePoint":{"line":301,"column":51},"line":301,"code":"    it('throws an error with unknown query operator', () => {\n      assert.throws(\n        () =>\n          filterQuery({\n            prop: { $unknown: 'something' }\n          }),\n        {\n          message: 'Invalid query parameter $unknown'\n        }\n      )\n    })","file":"query.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"","suites":["@feathersjs/adapter-commons/service","works when methods exist"],"updatePoint":{"line":18,"column":19},"line":18,"code":"      it(`${method}`, () => {\n        const service = new MethodService({})\n        const args: any[] = []\n\n        if (method !== 'find') {\n          args.push('test')\n        }\n\n        if (method === 'update' || method === 'patch') {\n          args.push({})\n        }\n\n        // @ts-ignore\n        return service[method](...args)\n      })","file":"service.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"does not allow multi patch","suites":["@feathersjs/adapter-commons/service","works when methods exist"],"updatePoint":{"line":35,"column":34},"line":35,"code":"    it('does not allow multi patch', async () => {\n      const service = new MethodService({})\n\n      await assert.rejects(() => service.patch(null, {}), {\n        name: 'MethodNotAllowed',\n        message: 'Can not patch multiple entries'\n      })\n    })","file":"service.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"does not allow multi remove","suites":["@feathersjs/adapter-commons/service","works when methods exist"],"updatePoint":{"line":44,"column":35},"line":44,"code":"    it('does not allow multi remove', async () => {\n      const service = new MethodService({})\n\n      await assert.rejects(() => service.remove(null, {}), {\n        name: 'MethodNotAllowed',\n        message: 'Can not remove multiple entries'\n      })\n    })","file":"service.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"does not allow multi create","suites":["@feathersjs/adapter-commons/service","works when methods exist"],"updatePoint":{"line":53,"column":35},"line":53,"code":"    it('does not allow multi create', async () => {\n      const service = new MethodService({})\n\n      await assert.rejects(() => service.create([], {}), {\n        name: 'MethodNotAllowed',\n        message: 'Can not create multiple entries'\n      })\n    })","file":"service.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"multi can be set to true","suites":["@feathersjs/adapter-commons/service","works when methods exist"],"updatePoint":{"line":62,"column":32},"line":62,"code":"    it('multi can be set to true', async () => {\n      const service = new MethodService({})\n\n      service.options.multi = true\n\n      await service.create([])\n    })","file":"service.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"sanitizeQuery","suites":["@feathersjs/adapter-commons/service","works when methods exist"],"updatePoint":{"line":71,"column":19},"line":71,"code":"  it('sanitizeQuery', async () => {\n    const service = new MethodService({\n      filters: {\n        $something: true\n      },\n      operators: ['$test']\n    })\n\n    assert.deepStrictEqual(\n      await service.sanitizeQuery({\n        query: { $limit: '10', test: 'me' } as any\n      }),\n      { $limit: 10, test: 'me' }\n    )\n\n    assert.deepStrictEqual(\n      await service.sanitizeQuery({\n        adapter: {\n          paginate: { max: 2 }\n        },\n        query: { $limit: '10', test: 'me' } as any\n      }),\n      { $limit: 2, test: 'me' }\n    )\n\n    await assert.rejects(\n      () =>\n        service.sanitizeQuery({\n          query: { name: { $bla: 'me' } }\n        }),\n      {\n        message: 'Invalid query parameter $bla'\n      }\n    )\n\n    assert.deepStrictEqual(\n      await service.sanitizeQuery({\n        adapter: {\n          operators: ['$bla']\n        },\n        query: { name: { $bla: 'Dave' } }\n      }),\n      { name: { $bla: 'Dave' } }\n    )\n\n    const validatedQuery = { name: { $bla: 'me' } }\n\n    Object.defineProperty(validatedQuery, VALIDATED, { value: true })\n\n    assert.deepStrictEqual(\n      await service.sanitizeQuery({\n        query: validatedQuery\n      }),\n      validatedQuery,\n      'validated queries are not sanitized'\n    )\n  })","file":"service.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"getOptions","suites":["@feathersjs/adapter-commons/service","works when methods exist"],"updatePoint":{"line":129,"column":16},"line":129,"code":"  it('getOptions', () => {\n    const service = new MethodService({\n      multi: true,\n      paginate: {\n        default: 1,\n        max: 10\n      }\n    })\n    const opts = service.getOptions({\n      adapter: {\n        multi: ['create'],\n        paginate: {\n          default: 10,\n          max: 100\n        }\n      }\n    })\n\n    assert.deepStrictEqual(opts, {\n      id: 'id',\n      events: [],\n      paginate: { default: 10, max: 100 },\n      multi: ['create'],\n      filters: {},\n      operators: []\n    })\n\n    const notPaginated = service.getOptions({\n      paginate: false\n    })\n\n    assert.deepStrictEqual(notPaginated, {\n      id: 'id',\n      events: [],\n      paginate: false,\n      multi: true,\n      filters: {},\n      operators: []\n    })\n  })","file":"service.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"allowsMulti","suites":["@feathersjs/adapter-commons/service","works when methods exist"],"updatePoint":{"line":170,"column":17},"line":170,"code":"  it('allowsMulti', () => {\n    context('with true', () => {\n      const service = new MethodService({ multi: true })\n\n      it('does return true for multiple methodes', () => {\n        assert.equal(service.allowsMulti('patch'), true)\n      })\n\n      it('does return false for always non-multiple methodes', () => {\n        assert.equal(service.allowsMulti('update'), false)\n      })\n\n      it('does return true for unknown methods', () => {\n        assert.equal(service.allowsMulti('other'), true)\n      })\n    })\n\n    context('with false', () => {\n      const service = new MethodService({ multi: false })\n\n      it('does return false for multiple methodes', () => {\n        assert.equal(service.allowsMulti('remove'), false)\n      })\n\n      it('does return true for always multiple methodes', () => {\n        assert.equal(service.allowsMulti('find'), true)\n      })\n\n      it('does return false for unknown methods', () => {\n        assert.equal(service.allowsMulti('other'), false)\n      })\n    })\n\n    context('with array', () => {\n      const service = new MethodService({ multi: ['create', 'get', 'other'] })\n\n      it('does return true for specified multiple methodes', () => {\n        assert.equal(service.allowsMulti('create'), true)\n      })\n\n      it('does return false for non-specified multiple methodes', () => {\n        assert.equal(service.allowsMulti('patch'), false)\n      })\n\n      it('does return false for specified always multiple methodes', () => {\n        assert.equal(service.allowsMulti('get'), false)\n      })\n\n      it('does return true for specified unknown methodes', () => {\n        assert.equal(service.allowsMulti('other'), true)\n      })\n\n      it('does return false for non-specified unknown methodes', () => {\n        assert.equal(service.allowsMulti('another'), false)\n      })\n    })\n  })","file":"service.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"does return true for multiple methodes","suites":["@feathersjs/adapter-commons/service","with true"],"updatePoint":{"line":174,"column":48},"line":174,"code":"      it('does return true for multiple methodes', () => {\n        assert.equal(service.allowsMulti('patch'), true)\n      })","file":"service.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"does return false for always non-multiple methodes","suites":["@feathersjs/adapter-commons/service","with true"],"updatePoint":{"line":178,"column":60},"line":178,"code":"      it('does return false for always non-multiple methodes', () => {\n        assert.equal(service.allowsMulti('update'), false)\n      })","file":"service.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"does return true for unknown methods","suites":["@feathersjs/adapter-commons/service","with true"],"updatePoint":{"line":182,"column":46},"line":182,"code":"      it('does return true for unknown methods', () => {\n        assert.equal(service.allowsMulti('other'), true)\n      })","file":"service.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"does return false for multiple methodes","suites":["@feathersjs/adapter-commons/service","with false"],"updatePoint":{"line":190,"column":49},"line":190,"code":"      it('does return false for multiple methodes', () => {\n        assert.equal(service.allowsMulti('remove'), false)\n      })","file":"service.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"does return true for always multiple methodes","suites":["@feathersjs/adapter-commons/service","with false"],"updatePoint":{"line":194,"column":55},"line":194,"code":"      it('does return true for always multiple methodes', () => {\n        assert.equal(service.allowsMulti('find'), true)\n      })","file":"service.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"does return false for unknown methods","suites":["@feathersjs/adapter-commons/service","with false"],"updatePoint":{"line":198,"column":47},"line":198,"code":"      it('does return false for unknown methods', () => {\n        assert.equal(service.allowsMulti('other'), false)\n      })","file":"service.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"does return true for specified multiple methodes","suites":["@feathersjs/adapter-commons/service","with array"],"updatePoint":{"line":206,"column":58},"line":206,"code":"      it('does return true for specified multiple methodes', () => {\n        assert.equal(service.allowsMulti('create'), true)\n      })","file":"service.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"does return false for non-specified multiple methodes","suites":["@feathersjs/adapter-commons/service","with array"],"updatePoint":{"line":210,"column":63},"line":210,"code":"      it('does return false for non-specified multiple methodes', () => {\n        assert.equal(service.allowsMulti('patch'), false)\n      })","file":"service.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"does return false for specified always multiple methodes","suites":["@feathersjs/adapter-commons/service","with array"],"updatePoint":{"line":214,"column":66},"line":214,"code":"      it('does return false for specified always multiple methodes', () => {\n        assert.equal(service.allowsMulti('get'), false)\n      })","file":"service.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"does return true for specified unknown methodes","suites":["@feathersjs/adapter-commons/service","with array"],"updatePoint":{"line":218,"column":57},"line":218,"code":"      it('does return true for specified unknown methodes', () => {\n        assert.equal(service.allowsMulti('other'), true)\n      })","file":"service.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"does return false for non-specified unknown methodes","suites":["@feathersjs/adapter-commons/service","with array"],"updatePoint":{"line":222,"column":62},"line":222,"code":"      it('does return false for non-specified unknown methodes', () => {\n        assert.equal(service.allowsMulti('another'), false)\n      })","file":"service.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"simple sorter","suites":["@feathersjs/adapter-commons","sorter"],"updatePoint":{"line":6,"column":21},"line":6,"code":"    it('simple sorter', () => {\n      const array = [\n        {\n          name: 'David'\n        },\n        {\n          name: 'Eric'\n        }\n      ]\n\n      const sort = sorter({\n        name: -1\n      })\n\n      assert.deepStrictEqual(array.sort(sort), [\n        {\n          name: 'Eric'\n        },\n        {\n          name: 'David'\n        }\n      ])\n    })","file":"sort.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"simple sorter with arrays","suites":["@feathersjs/adapter-commons","sorter"],"updatePoint":{"line":30,"column":33},"line":30,"code":"    it('simple sorter with arrays', () => {\n      const array = [\n        {\n          names: ['a', 'b']\n        },\n        {\n          names: ['c', 'd']\n        }\n      ]\n\n      const sort = sorter({\n        names: -1\n      })\n\n      assert.deepStrictEqual(array.sort(sort), [\n        {\n          names: ['c', 'd']\n        },\n        {\n          names: ['a', 'b']\n        }\n      ])\n    })","file":"sort.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"simple sorter with objects","suites":["@feathersjs/adapter-commons","sorter"],"updatePoint":{"line":54,"column":34},"line":54,"code":"    it('simple sorter with objects', () => {\n      const array = [\n        {\n          names: {\n            first: 'Dave',\n            last: 'L'\n          }\n        },\n        {\n          names: {\n            first: 'A',\n            last: 'B'\n          }\n        }\n      ]\n\n      const sort = sorter({\n        names: 1\n      })\n\n      assert.deepStrictEqual(array.sort(sort), [\n        {\n          names: {\n            first: 'A',\n            last: 'B'\n          }\n        },\n        {\n          names: {\n            first: 'Dave',\n            last: 'L'\n          }\n        }\n      ])\n    })","file":"sort.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"two property sorter","suites":["@feathersjs/adapter-commons","sorter"],"updatePoint":{"line":90,"column":27},"line":90,"code":"    it('two property sorter', () => {\n      const array = [\n        {\n          name: 'David',\n          counter: 0\n        },\n        {\n          name: 'Eric',\n          counter: 1\n        },\n        {\n          name: 'David',\n          counter: 1\n        },\n        {\n          name: 'Eric',\n          counter: 0\n        }\n      ]\n\n      const sort = sorter({\n        name: -1,\n        counter: 1\n      })\n\n      assert.deepStrictEqual(array.sort(sort), [\n        { name: 'Eric', counter: 0 },\n        { name: 'Eric', counter: 1 },\n        { name: 'David', counter: 0 },\n        { name: 'David', counter: 1 }\n      ])\n    })","file":"sort.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"two property sorter with names","suites":["@feathersjs/adapter-commons","sorter"],"updatePoint":{"line":123,"column":38},"line":123,"code":"    it('two property sorter with names', () => {\n      const array = [\n        {\n          name: 'David',\n          counter: 0\n        },\n        {\n          name: 'Eric',\n          counter: 1\n        },\n        {\n          name: 'Andrew',\n          counter: 1\n        },\n        {\n          name: 'David',\n          counter: 1\n        },\n        {\n          name: 'Andrew',\n          counter: 0\n        },\n        {\n          name: 'Eric',\n          counter: 0\n        }\n      ]\n\n      const sort = sorter({\n        name: -1,\n        counter: 1\n      })\n\n      assert.deepStrictEqual(array.sort(sort), [\n        { name: 'Eric', counter: 0 },\n        { name: 'Eric', counter: 1 },\n        { name: 'David', counter: 0 },\n        { name: 'David', counter: 1 },\n        { name: 'Andrew', counter: 0 },\n        { name: 'Andrew', counter: 1 }\n      ])\n    })","file":"sort.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"three property sorter with names","suites":["@feathersjs/adapter-commons","sorter"],"updatePoint":{"line":166,"column":40},"line":166,"code":"    it('three property sorter with names', () => {\n      const array = [\n        {\n          name: 'David',\n          counter: 0,\n          age: 2\n        },\n        {\n          name: 'Eric',\n          counter: 1,\n          age: 2\n        },\n        {\n          name: 'David',\n          counter: 1,\n          age: 1\n        },\n        {\n          name: 'Eric',\n          counter: 0,\n          age: 1\n        },\n        {\n          name: 'Andrew',\n          counter: 0,\n          age: 2\n        },\n        {\n          name: 'Andrew',\n          counter: 0,\n          age: 1\n        }\n      ]\n\n      const sort = sorter({\n        name: -1,\n        counter: 1,\n        age: -1\n      })\n\n      assert.deepStrictEqual(array.sort(sort), [\n        { name: 'Eric', counter: 0, age: 1 },\n        { name: 'Eric', counter: 1, age: 2 },\n        { name: 'David', counter: 0, age: 2 },\n        { name: 'David', counter: 1, age: 1 },\n        { name: 'Andrew', counter: 0, age: 2 },\n        { name: 'Andrew', counter: 0, age: 1 }\n      ])\n    })","file":"sort.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"straight test","suites":["@feathersjs/adapter-commons","sorter mongoDB-like sorting on embedded objects"],"updatePoint":{"line":239,"column":21},"line":239,"code":"    it('straight test', () => {\n      const sort = sorter({\n        amount: -1\n      })\n\n      assert.deepStrictEqual(data.sort(sort), [\n        {\n          _id: 2,\n          item: { category: 'cookies', type: 'chocolate chip' },\n          amount: 50\n        },\n        { _id: 4, item: { category: 'cake', type: 'lemon' }, amount: 30 },\n        { _id: 5, item: { category: 'cake', type: 'carrot' }, amount: 20 },\n        {\n          _id: 3,\n          item: { category: 'cookies', type: 'chocolate chip' },\n          amount: 15\n        },\n        { _id: 1, item: { category: 'cake', type: 'chiffon' }, amount: 10 },\n        { _id: 6, item: { category: 'brownies', type: 'blondie' }, amount: 10 }\n      ])\n    })","file":"sort.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"embedded sort 1","suites":["@feathersjs/adapter-commons","sorter mongoDB-like sorting on embedded objects"],"updatePoint":{"line":262,"column":23},"line":262,"code":"    it('embedded sort 1', () => {\n      const sort = sorter({\n        'item.category': 1,\n        'item.type': 1\n      })\n\n      assert.deepStrictEqual(data.sort(sort), [\n        { _id: 6, item: { category: 'brownies', type: 'blondie' }, amount: 10 },\n        { _id: 5, item: { category: 'cake', type: 'carrot' }, amount: 20 },\n        { _id: 1, item: { category: 'cake', type: 'chiffon' }, amount: 10 },\n        { _id: 4, item: { category: 'cake', type: 'lemon' }, amount: 30 },\n        {\n          _id: 2,\n          item: { category: 'cookies', type: 'chocolate chip' },\n          amount: 50\n        },\n        {\n          _id: 3,\n          item: { category: 'cookies', type: 'chocolate chip' },\n          amount: 15\n        }\n      ])\n    })","file":"sort.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"embedded sort 2","suites":["@feathersjs/adapter-commons","sorter mongoDB-like sorting on embedded objects"],"updatePoint":{"line":286,"column":23},"line":286,"code":"    it('embedded sort 2', () => {\n      const sort = sorter({\n        'item.category': 1,\n        'item.type': 1,\n        amount: 1\n      })\n\n      assert.deepStrictEqual(data.sort(sort), [\n        { _id: 6, item: { category: 'brownies', type: 'blondie' }, amount: 10 },\n        { _id: 5, item: { category: 'cake', type: 'carrot' }, amount: 20 },\n        { _id: 1, item: { category: 'cake', type: 'chiffon' }, amount: 10 },\n        { _id: 4, item: { category: 'cake', type: 'lemon' }, amount: 30 },\n        {\n          _id: 3,\n          item: { category: 'cookies', type: 'chocolate chip' },\n          amount: 15\n        },\n        {\n          _id: 2,\n          item: { category: 'cookies', type: 'chocolate chip' },\n          amount: 50\n        }\n      ])\n    })","file":"sort.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"embedded sort 3","suites":["@feathersjs/adapter-commons","sorter mongoDB-like sorting on embedded objects"],"updatePoint":{"line":311,"column":23},"line":311,"code":"    it('embedded sort 3', () => {\n      const sort = sorter({\n        'item.category': 1,\n        'item.type': 1,\n        amount: -1\n      })\n\n      assert.deepStrictEqual(data.sort(sort), [\n        { _id: 6, item: { category: 'brownies', type: 'blondie' }, amount: 10 },\n        { _id: 5, item: { category: 'cake', type: 'carrot' }, amount: 20 },\n        { _id: 1, item: { category: 'cake', type: 'chiffon' }, amount: 10 },\n        { _id: 4, item: { category: 'cake', type: 'lemon' }, amount: 30 },\n        {\n          _id: 2,\n          item: { category: 'cookies', type: 'chocolate chip' },\n          amount: 50\n        },\n        {\n          _id: 3,\n          item: { category: 'cookies', type: 'chocolate chip' },\n          amount: 15\n        }\n      ])\n    })","file":"sort.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"embedded sort 4","suites":["@feathersjs/adapter-commons","sorter mongoDB-like sorting on embedded objects"],"updatePoint":{"line":336,"column":23},"line":336,"code":"    it('embedded sort 4', () => {\n      const sort = sorter({\n        amount: -1,\n        'item.category': 1\n      })\n\n      assert.deepStrictEqual(data.sort(sort), [\n        {\n          _id: 2,\n          item: { category: 'cookies', type: 'chocolate chip' },\n          amount: 50\n        },\n        { _id: 4, item: { category: 'cake', type: 'lemon' }, amount: 30 },\n        { _id: 5, item: { category: 'cake', type: 'carrot' }, amount: 20 },\n        {\n          _id: 3,\n          item: { category: 'cookies', type: 'chocolate chip' },\n          amount: 15\n        },\n        { _id: 6, item: { category: 'brownies', type: 'blondie' }, amount: 10 },\n        { _id: 1, item: { category: 'cake', type: 'chiffon' }, amount: 10 }\n      ])\n    })","file":"sort.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"embedded sort 5","suites":["@feathersjs/adapter-commons","sorter mongoDB-like sorting on embedded objects"],"updatePoint":{"line":360,"column":23},"line":360,"code":"    it('embedded sort 5', () => {\n      const sort = sorter({\n        'item.category': 1,\n        amount: 1\n      })\n\n      assert.deepStrictEqual(data.sort(sort), [\n        { _id: 6, item: { category: 'brownies', type: 'blondie' }, amount: 10 },\n        { _id: 1, item: { category: 'cake', type: 'chiffon' }, amount: 10 },\n        { _id: 5, item: { category: 'cake', type: 'carrot' }, amount: 20 },\n        { _id: 4, item: { category: 'cake', type: 'lemon' }, amount: 30 },\n        {\n          _id: 3,\n          item: { category: 'cookies', type: 'chocolate chip' },\n          amount: 15\n        },\n        {\n          _id: 2,\n          item: { category: 'cookies', type: 'chocolate chip' },\n          amount: 50\n        }\n      ])\n    })","file":"sort.test.ts","skipped":false,"dir":"packages/adapter-commons/test"},{"name":"loads the test suite","suites":["Feathers Memory Service"],"updatePoint":{"line":78,"column":26},"line":78,"code":"  it('loads the test suite', () => {\n    assert.ok(typeof testSuite === 'function')\n  })","file":"index.test.ts","skipped":false,"dir":"packages/adapter-tests/test"},{"name":"exports as CommonJS","suites":["Feathers Memory Service"],"updatePoint":{"line":82,"column":25},"line":82,"code":"  it('exports as CommonJS', () => {\n    assert.equal(typeof require('../lib'), 'function')\n  })","file":"index.test.ts","skipped":false,"dir":"packages/adapter-tests/test"},{"name":"initializes","suites":["@feathersjs/authentication-client"],"updatePoint":{"line":47,"column":17},"line":47,"code":"  it('initializes', () => {\n    assert.ok(app.authentication instanceof AuthenticationClient)\n    assert.strictEqual(app.get('storage'), app.authentication.storage)\n    assert.strictEqual(typeof app.authenticate, 'function')\n    assert.strictEqual(typeof app.logout, 'function')\n  })","file":"index.test.ts","skipped":false,"dir":"packages/authentication-client/test"},{"name":"setAccessToken, getAccessToken, removeAccessToken","suites":["@feathersjs/authentication-client"],"updatePoint":{"line":54,"column":55},"line":54,"code":"  it('setAccessToken, getAccessToken, removeAccessToken', async () => {\n    const auth = app.authentication\n    const token = 'hi'\n\n    await auth.setAccessToken(token)\n\n    const res = await auth.getAccessToken()\n\n    assert.strictEqual(res, token)\n\n    await auth.removeAccessToken()\n    assert.strictEqual(await auth.getAccessToken(), null)\n  })","file":"index.test.ts","skipped":false,"dir":"packages/authentication-client/test"},{"name":"getFromLocation","suites":["@feathersjs/authentication-client"],"updatePoint":{"line":68,"column":21},"line":68,"code":"  it('getFromLocation', async () => {\n    const auth = app.authentication\n    let dummyLocation = { hash: 'access_token=testing' } as Location\n\n    let token = await auth.getFromLocation(dummyLocation)\n\n    assert.strictEqual(token, 'testing')\n    assert.strictEqual(dummyLocation.hash, '')\n\n    dummyLocation.hash = 'a=b&access_token=otherTest&c=d'\n    token = await auth.getFromLocation(dummyLocation)\n\n    assert.strictEqual(token, 'otherTest')\n    assert.strictEqual(dummyLocation.hash, 'a=b&c=d')\n\n    dummyLocation = { search: 'access_token=testing' } as Location\n    token = await auth.getFromLocation(dummyLocation)\n\n    assert.strictEqual(await auth.getFromLocation({} as Location), null)\n\n    try {\n      await auth.getFromLocation({\n        hash: 'error=Error Happened&x=y'\n      } as Location)\n      assert.fail('Should never get here')\n    } catch (error: any) {\n      assert.strictEqual(error.name, 'OauthError')\n      assert.strictEqual(error.message, 'Error Happened')\n    }\n  })","file":"index.test.ts","skipped":false,"dir":"packages/authentication-client/test"},{"name":"authenticate, authentication hook, login event","suites":["@feathersjs/authentication-client"],"updatePoint":{"line":99,"column":52},"line":99,"code":"  it('authenticate, authentication hook, login event', async () => {\n    const data = {\n      strategy: 'testing'\n    }\n\n    const promise = new Promise((resolve) => {\n      app.once('login', resolve)\n    })\n\n    app.authenticate(data)\n\n    const result = await promise\n\n    assert.deepStrictEqual(result, {\n      accessToken,\n      data,\n      user\n    })\n\n    let at = await app.authentication.getAccessToken()\n\n    assert.strictEqual(at, accessToken, 'Set accessToken in storage')\n\n    at = await Promise.resolve(app.get('storage').getItem('feathers-jwt'))\n\n    assert.strictEqual(at, accessToken, 'Set accessToken in storage')\n\n    const found = await app.service('dummy').find()\n    assert.deepStrictEqual(found.accessToken, accessToken)\n    assert.deepStrictEqual(found.user, user)\n  })","file":"index.test.ts","skipped":false,"dir":"packages/authentication-client/test"},{"name":"logout event","suites":["@feathersjs/authentication-client"],"updatePoint":{"line":131,"column":18},"line":131,"code":"  it('logout event', async () => {\n    const promise = new Promise((resolve) => app.once('logout', resolve))\n\n    app.authenticate({ strategy: 'testing' }).then(() => app.logout())\n\n    const result = await promise\n\n    assert.deepStrictEqual(result, { id: null })\n  })","file":"index.test.ts","skipped":false,"dir":"packages/authentication-client/test"},{"name":"does not remove AccessToken on other errors","suites":["@feathersjs/authentication-client"],"updatePoint":{"line":141,"column":49},"line":141,"code":"  it('does not remove AccessToken on other errors', async () => {\n    await app.authenticate({ strategy: 'testing' })\n    await app.authenticate({ strategy: 'testing' })\n\n    const at = await app.authentication.getAccessToken()\n\n    assert.strictEqual(at, accessToken)\n  })","file":"index.test.ts","skipped":false,"dir":"packages/authentication-client/test"},{"name":"resets after any error (#1947)","suites":["@feathersjs/authentication-client"],"updatePoint":{"line":150,"column":36},"line":150,"code":"  it('resets after any error (#1947)', async () => {\n    await assert.rejects(() => app.authenticate({ strategy: 'testing', error: true }), {\n      message: 'Did not work'\n    })\n\n    const found = await app.service('dummy').find()\n\n    assert.deepStrictEqual(found, {})\n  })","file":"index.test.ts","skipped":false,"dir":"packages/authentication-client/test"},{"name":"logout when not logged in without error","suites":["@feathersjs/authentication-client"],"updatePoint":{"line":160,"column":45},"line":160,"code":"  it('logout when not logged in without error', async () => {\n    const result = await app.logout()\n\n    assert.strictEqual(result, null)\n  })","file":"index.test.ts","skipped":false,"dir":"packages/authentication-client/test"},{"name":"fails when no token in storage and resets authentication state","suites":["@feathersjs/authentication-client","reauthenticate"],"updatePoint":{"line":167,"column":70},"line":167,"code":"    it('fails when no token in storage and resets authentication state', async () => {\n      await assert.rejects(() => app.authentication.reAuthenticate(), {\n        message: 'No accessToken found in storage'\n      })\n      assert.ok(!app.get('authentication'), 'Reset authentication')\n    })","file":"index.test.ts","skipped":false,"dir":"packages/authentication-client/test"},{"name":"reauthenticates when token is in storage","suites":["@feathersjs/authentication-client","reauthenticate"],"updatePoint":{"line":174,"column":48},"line":174,"code":"    it('reauthenticates when token is in storage', async () => {\n      const data = {\n        strategy: 'testing'\n      }\n\n      const result = await app.authenticate(data)\n\n      assert.deepStrictEqual(result, {\n        accessToken,\n        data,\n        user\n      })\n      await app.authentication.reAuthenticate()\n      await app.authentication.reset()\n\n      let at = await Promise.resolve(app.get('storage').getItem('feathers-jwt'))\n\n      assert.strictEqual(at, accessToken, 'Set accessToken in storage')\n\n      at = await app.authentication.reAuthenticate()\n\n      assert.deepStrictEqual(at, {\n        accessToken,\n        data: { strategy: 'jwt', accessToken: 'testing' },\n        user\n      })\n\n      await app.logout()\n\n      at = await Promise.resolve(app.get('storage').getItem('feathers-jwt'))\n      assert.ok(!at)\n      assert.ok(!app.get('authentication'))\n    })","file":"index.test.ts","skipped":false,"dir":"packages/authentication-client/test"},{"name":"reAuthenticate works with parallel requests","suites":["@feathersjs/authentication-client","reauthenticate"],"updatePoint":{"line":208,"column":51},"line":208,"code":"    it('reAuthenticate works with parallel requests', async () => {\n      const data = {\n        strategy: 'testing'\n      }\n\n      await app.authenticate(data)\n      await app.reAuthenticate()\n      await app.authentication.reset()\n\n      app.reAuthenticate()\n\n      const found = await app.service('dummy').find()\n\n      assert.deepStrictEqual(found.accessToken, accessToken)\n      assert.deepStrictEqual(found.user, user)\n    })","file":"index.test.ts","skipped":false,"dir":"packages/authentication-client/test"},{"name":"reauthenticates using different strategy","suites":["@feathersjs/authentication-client","reauthenticate"],"updatePoint":{"line":225,"column":48},"line":225,"code":"    it('reauthenticates using different strategy', async () => {\n      app.configure(client({ jwtStrategy: 'any' }))\n\n      const data = {\n        strategy: 'testing'\n      }\n\n      let result = await app.authenticate(data)\n      assert.deepStrictEqual(result, {\n        accessToken,\n        data,\n        user\n      })\n\n      result = await app.authentication.reAuthenticate(false, 'jwt')\n      assert.deepStrictEqual(result, {\n        accessToken,\n        data,\n        user\n      })\n    })","file":"index.test.ts","skipped":false,"dir":"packages/authentication-client/test"},{"name":"allows to authenticate with handshake headers and sends login event","suites":["@feathersjs/authentication-client Socket.io integration"],"updatePoint":{"line":23,"column":73},"line":23,"code":"  it('allows to authenticate with handshake headers and sends login event', async () => {\n    const user = { email: 'authtest@example.com', password: 'alsosecret' }\n\n    await app.service('users').create(user)\n\n    const { accessToken } = await app.service('authentication').create({\n      strategy: 'local',\n      ...user\n    })\n\n    const socket = io('http://localhost:9777', {\n      transports: ['websocket'],\n      transportOptions: {\n        websocket: {\n          extraHeaders: {\n            Authorization: `Bearer ${accessToken}`\n          }\n        }\n      }\n    })\n    const authResult: any = await new Promise((resolve) => app.once('login', (res) => resolve(res)))\n\n    assert.strictEqual(authResult.accessToken, accessToken)\n\n    const dummy: any = await new Promise((resolve, reject) => {\n      socket.emit('find', 'dummy', {}, (error: Error, page: any) => (error ? reject(error) : resolve(page)))\n    })\n\n    assert.strictEqual(dummy.user.email, user.email)\n    assert.strictEqual(dummy.authentication.accessToken, accessToken)\n    assert.strictEqual(dummy.headers.authorization, `Bearer ${accessToken}`)\n  })","file":"integration/socketio.test.ts","skipped":false,"dir":"packages/authentication-client/test"},{"name":"reconnects after socket disconnection","suites":["@feathersjs/authentication-client Socket.io integration"],"updatePoint":{"line":56,"column":43},"line":56,"code":"  it('reconnects after socket disconnection', async () => {\n    const user = { email: 'disconnecttest@example.com', password: 'alsosecret' }\n    const socket = io('http://localhost:9777', {\n      timeout: 500,\n      reconnection: true,\n      reconnectionDelay: 100\n    })\n    const client = feathers().configure(socketioClient(socket)).configure(authClient())\n\n    await app.service('users').create(user)\n    await client.authenticate({\n      strategy: 'local',\n      ...user\n    })\n\n    const onLogin = new Promise<AuthenticationResult>((resolve) => app.once('login', (data) => resolve(data)))\n\n    socket.once('disconnect', () => socket.connect())\n    socket.disconnect()\n\n    const {\n      authentication: { strategy }\n    } = await onLogin\n    const dummy = await client.service('dummy').find()\n\n    assert.strictEqual(strategy, 'jwt')\n    assert.strictEqual(dummy.user.email, user.email)\n  })","file":"integration/socketio.test.ts","skipped":false,"dir":"packages/authentication-client/test"},{"name":"throws error when no field provided","suites":["@feathersjs/authentication-local/hooks/hash-password"],"updatePoint":{"line":17,"column":41},"line":17,"code":"  it('throws error when no field provided', () => {\n    try {\n      // @ts-ignore\n      hashPassword()\n      assert.fail('Should never get here')\n    } catch (error: any) {\n      assert.strictEqual(error.message, 'The hashPassword hook requires a field name option')\n    }\n  })","file":"hooks/hash-password.test.ts","skipped":false,"dir":"packages/authentication-local/test"},{"name":"errors when authentication service does not exist","suites":["@feathersjs/authentication-local/hooks/hash-password"],"updatePoint":{"line":27,"column":55},"line":27,"code":"  it('errors when authentication service does not exist', async () => {\n    delete app.services.authentication\n\n    try {\n      await app.service('users').create({\n        email: 'dave@hashpassword.com',\n        password: 'supersecret'\n      })\n      assert.fail('Should never get here')\n    } catch (error: any) {\n      assert.strictEqual(error.message, 'Could not find an authentication service to hash password')\n    }\n  })","file":"hooks/hash-password.test.ts","skipped":false,"dir":"packages/authentication-local/test"},{"name":"errors when authentication strategy does not exist","suites":["@feathersjs/authentication-local/hooks/hash-password"],"updatePoint":{"line":41,"column":56},"line":41,"code":"  it('errors when authentication strategy does not exist', async () => {\n    delete app.services.authentication.strategies.local\n\n    try {\n      await app.service('users').create({\n        email: 'dave@hashpassword.com',\n        password: 'supersecret'\n      })\n      assert.fail('Should never get here')\n    } catch (error: any) {\n      assert.strictEqual(error.message, \"Could not find 'local' strategy to hash password\")\n    }\n  })","file":"hooks/hash-password.test.ts","skipped":false,"dir":"packages/authentication-local/test"},{"name":"hashes password on field","suites":["@feathersjs/authentication-local/hooks/hash-password"],"updatePoint":{"line":55,"column":30},"line":55,"code":"  it('hashes password on field', async () => {\n    const password = 'supersecret'\n\n    const user = await app.service('users').create({\n      email: 'dave@hashpassword.com',\n      password\n    })\n\n    assert.notStrictEqual(user.password, password)\n  })","file":"hooks/hash-password.test.ts","skipped":false,"dir":"packages/authentication-local/test"},{"name":"hashes password on array data","suites":["@feathersjs/authentication-local/hooks/hash-password"],"updatePoint":{"line":66,"column":35},"line":66,"code":"  it('hashes password on array data', async () => {\n    const password = 'supersecret'\n\n    const users = await app.service('users').create([\n      {\n        email: 'dave@hashpassword.com',\n        password\n      },\n      {\n        email: 'dave2@hashpassword.com',\n        password: 'secret2'\n      }\n    ])\n\n    assert.notStrictEqual(users[0].password, password)\n    assert.notStrictEqual(users[1].password, 'secret2')\n  })","file":"hooks/hash-password.test.ts","skipped":false,"dir":"packages/authentication-local/test"},{"name":"does nothing when field is not present","suites":["@feathersjs/authentication-local/hooks/hash-password"],"updatePoint":{"line":84,"column":44},"line":84,"code":"  it('does nothing when field is not present', async () => {\n    const user = await app.service('users').create({\n      email: 'dave@hashpassword.com'\n    })\n\n    assert.strictEqual(user.password, undefined)\n  })","file":"hooks/hash-password.test.ts","skipped":false,"dir":"packages/authentication-local/test"},{"name":"omits from object","suites":[],"updatePoint":{"line":11,"column":25},"line":11,"code":"    it('omits from object', async () => {\n      const data = {\n        email: 'test@user.com',\n        password: 'supersecret'\n      }\n      const context = {\n        [property]: data\n      } as unknown as HookContext\n\n      await fn(context)\n\n      assert.deepStrictEqual(context, {\n        [property]: data,\n        dispatch: { email: 'test@user.com' }\n      })\n    })","file":"hooks/protect.test.ts","skipped":false,"dir":"packages/authentication-local/test"},{"name":"omits from nested object","suites":[],"updatePoint":{"line":28,"column":32},"line":28,"code":"    it('omits from nested object', async () => {\n      const hook = protect('user.password')\n      const data = {\n        user: {\n          email: 'test@user.com',\n          password: 'supersecret'\n        }\n      }\n      const context = {\n        [property]: data\n      } as unknown as HookContext\n\n      await hook(context)\n\n      assert.deepStrictEqual(context, {\n        [property]: data,\n        dispatch: { user: { email: 'test@user.com' } }\n      })\n    })","file":"hooks/protect.test.ts","skipped":false,"dir":"packages/authentication-local/test"},{"name":"handles `data` property only for find","suites":[],"updatePoint":{"line":48,"column":45},"line":48,"code":"    it('handles `data` property only for find', async () => {\n      const data = {\n        email: 'test@user.com',\n        password: 'supersecret',\n        data: 'yes'\n      }\n      const context = {\n        [property]: data\n      } as unknown as HookContext\n\n      await fn(context)\n\n      assert.deepStrictEqual(context, {\n        [property]: data,\n        dispatch: { email: 'test@user.com', data: 'yes' }\n      })\n    })","file":"hooks/protect.test.ts","skipped":false,"dir":"packages/authentication-local/test"},{"name":"uses .toJSON (#48)","suites":[],"updatePoint":{"line":66,"column":26},"line":66,"code":"    it('uses .toJSON (#48)', async () => {\n      class MyUser {\n        toJSON() {\n          return {\n            email: 'test@user.com',\n            password: 'supersecret'\n          }\n        }\n      }\n\n      const data = new MyUser()\n      const context = {\n        [property]: data\n      } as unknown as HookContext\n\n      await fn(context)\n\n      assert.deepStrictEqual(context, {\n        [property]: data,\n        dispatch: { email: 'test@user.com' }\n      })\n    })","file":"hooks/protect.test.ts","skipped":false,"dir":"packages/authentication-local/test"},{"name":"omits from array but only objects (#2053)","suites":[],"updatePoint":{"line":89,"column":49},"line":89,"code":"    it('omits from array but only objects (#2053)', async () => {\n      const data = [\n        {\n          email: 'test1@user.com',\n          password: 'supersecret'\n        },\n        {\n          email: 'test2@user.com',\n          password: 'othersecret'\n        },\n        ['one', 'two', 'three'],\n        'test'\n      ]\n      const context = {\n        [property]: data\n      } as unknown as HookContext\n\n      await fn(context)\n\n      assert.deepStrictEqual(context, {\n        [property]: data,\n        dispatch: [{ email: 'test1@user.com' }, { email: 'test2@user.com' }, ['one', 'two', 'three'], 'test']\n      })\n    })","file":"hooks/protect.test.ts","skipped":false,"dir":"packages/authentication-local/test"},{"name":"omits from pagination object","suites":[],"updatePoint":{"line":114,"column":36},"line":114,"code":"    it('omits from pagination object', async () => {\n      const data = {\n        total: 2,\n        data: [\n          {\n            email: 'test1@user.com',\n            password: 'supersecret'\n          },\n          {\n            email: 'test2@user.com',\n            password: 'othersecret'\n          }\n        ]\n      }\n      const context = {\n        method: 'find',\n        [property]: data\n      } as unknown as HookContext\n\n      await fn(context)\n\n      assert.deepStrictEqual(context, {\n        method: 'find',\n        [property]: data,\n        dispatch: {\n          total: 2,\n          data: [{ email: 'test1@user.com' }, { email: 'test2@user.com' }]\n        }\n      })\n    })","file":"hooks/protect.test.ts","skipped":false,"dir":"packages/authentication-local/test"},{"name":"updates result if params.provider is set","suites":[],"updatePoint":{"line":145,"column":48},"line":145,"code":"    it('updates result if params.provider is set', async () => {\n      const data = [\n        {\n          email: 'test1@user.com',\n          password: 'supersecret'\n        },\n        {\n          email: 'test2@user.com',\n          password: 'othersecret'\n        }\n      ]\n      const params = { provider: 'test' }\n      const context = {\n        [property]: data,\n        params\n      } as unknown as HookContext\n\n      await fn(context)\n\n      assert.deepStrictEqual(context, {\n        [property]: data,\n        params,\n        result: [{ email: 'test1@user.com' }, { email: 'test2@user.com' }],\n        dispatch: [{ email: 'test1@user.com' }, { email: 'test2@user.com' }]\n      })\n    })","file":"hooks/protect.test.ts","skipped":false,"dir":"packages/authentication-local/test"},{"name":"does nothing when called with no result","suites":["@feathersjs/authentication-local/hooks/protect"],"updatePoint":{"line":175,"column":45},"line":175,"code":"  it('does nothing when called with no result', async () => {\n    const fn = protect()\n\n    assert.deepStrictEqual(await fn({} as any), undefined)\n  })","file":"hooks/protect.test.ts","skipped":false,"dir":"packages/authentication-local/test"},{"name":"throw error when configuration is not set","suites":["@feathersjs/authentication-local/strategy"],"updatePoint":{"line":21,"column":47},"line":21,"code":"  it('throw error when configuration is not set', () => {\n    const auth = app.service('authentication')\n\n    try {\n      auth.register('something', new LocalStrategy())\n      assert.fail('Should never get here')\n    } catch (error: any) {\n      assert.strictEqual(\n        error.message,\n        \"'something' authentication strategy requires a 'usernameField' setting\"\n      )\n    }\n  })","file":"strategy.test.ts","skipped":false,"dir":"packages/authentication-local/test"},{"name":"fails when entity not found","suites":["@feathersjs/authentication-local/strategy"],"updatePoint":{"line":35,"column":33},"line":35,"code":"  it('fails when entity not found', async () => {\n    const authService = app.service('authentication')\n\n    try {\n      await authService.create({\n        strategy: 'local',\n        email: 'not in database',\n        password\n      })\n      assert.fail('Should never get here')\n    } catch (error: any) {\n      assert.strictEqual(error.name, 'NotAuthenticated')\n      assert.strictEqual(error.message, 'Invalid login')\n    }\n  })","file":"strategy.test.ts","skipped":false,"dir":"packages/authentication-local/test"},{"name":"getEntity","suites":["@feathersjs/authentication-local/strategy"],"updatePoint":{"line":51,"column":15},"line":51,"code":"  it('getEntity', async () => {\n    const [strategy] = app.service('authentication').getStrategies('local') as [LocalStrategy]\n    let entity = await strategy.getEntity(user, {})\n\n    assert.deepStrictEqual(entity, user)\n\n    entity = await strategy.getEntity(user, {\n      provider: 'testing'\n    })\n\n    assert.deepStrictEqual(entity, {\n      ...omit(user, 'password'),\n      fromGet: true\n    })\n\n    try {\n      await strategy.getEntity({}, {})\n      assert.fail('Should never get here')\n    } catch (error: any) {\n      assert.strictEqual(error.message, 'Could not get local entity')\n    }\n  })","file":"strategy.test.ts","skipped":false,"dir":"packages/authentication-local/test"},{"name":"strategy fails when strategy is different","suites":["@feathersjs/authentication-local/strategy"],"updatePoint":{"line":74,"column":47},"line":74,"code":"  it('strategy fails when strategy is different', async () => {\n    const [local] = app.service('authentication').getStrategies('local')\n\n    await assert.rejects(\n      () =>\n        local.authenticate(\n          {\n            strategy: 'not-me',\n            password: 'dummy',\n            email\n          },\n          {}\n        ),\n      {\n        name: 'NotAuthenticated',\n        message: 'Invalid login'\n      }\n    )\n  })","file":"strategy.test.ts","skipped":false,"dir":"packages/authentication-local/test"},{"name":"fails when password is wrong","suites":["@feathersjs/authentication-local/strategy"],"updatePoint":{"line":94,"column":34},"line":94,"code":"  it('fails when password is wrong', async () => {\n    const authService = app.service('authentication')\n    try {\n      await authService.create({\n        strategy: 'local',\n        email,\n        password: 'dummy'\n      })\n      assert.fail('Should never get here')\n    } catch (error: any) {\n      assert.strictEqual(error.name, 'NotAuthenticated')\n      assert.strictEqual(error.message, 'Invalid login')\n    }\n  })","file":"strategy.test.ts","skipped":false,"dir":"packages/authentication-local/test"},{"name":"fails when password is not provided","suites":["@feathersjs/authentication-local/strategy"],"updatePoint":{"line":109,"column":41},"line":109,"code":"  it('fails when password is not provided', async () => {\n    const authService = app.service('authentication')\n    try {\n      await authService.create({\n        strategy: 'local',\n        email\n      })\n      assert.fail('Should never get here')\n    } catch (error: any) {\n      assert.strictEqual(error.name, 'NotAuthenticated')\n      assert.strictEqual(error.message, 'Invalid login')\n    }\n  })","file":"strategy.test.ts","skipped":false,"dir":"packages/authentication-local/test"},{"name":"fails when password field is not available","suites":["@feathersjs/authentication-local/strategy"],"updatePoint":{"line":123,"column":48},"line":123,"code":"  it('fails when password field is not available', async () => {\n    const userEmail = 'someuser@localtest.com'\n    const authService = app.service('authentication')\n\n    try {\n      await app.service('users').create({\n        email: userEmail\n      })\n      await authService.create({\n        strategy: 'local',\n        password: 'dummy',\n        email: userEmail\n      })\n      assert.fail('Should never get here')\n    } catch (error: any) {\n      assert.strictEqual(error.name, 'NotAuthenticated')\n      assert.strictEqual(error.message, 'Invalid login')\n    }\n  })","file":"strategy.test.ts","skipped":false,"dir":"packages/authentication-local/test"},{"name":"authenticates an existing user","suites":["@feathersjs/authentication-local/strategy"],"updatePoint":{"line":143,"column":36},"line":143,"code":"  it('authenticates an existing user', async () => {\n    const authService = app.service('authentication')\n    const authResult = await authService.create({\n      strategy: 'local',\n      email,\n      password\n    })\n    const { accessToken } = authResult\n\n    assert.ok(accessToken)\n    assert.strictEqual(authResult.user.email, email)\n\n    const decoded = await authService.verifyAccessToken(accessToken)\n\n    assert.strictEqual(decoded.sub, `${user.id}`)\n  })","file":"strategy.test.ts","skipped":false,"dir":"packages/authentication-local/test"},{"name":"returns safe result when params.provider is set, works without pagination","suites":["@feathersjs/authentication-local/strategy"],"updatePoint":{"line":160,"column":79},"line":160,"code":"  it('returns safe result when params.provider is set, works without pagination', async () => {\n    const authService = app.service('authentication')\n    const authResult = await authService.create(\n      {\n        strategy: 'local',\n        email,\n        password\n      },\n      {\n        provider: 'rest',\n        paginate: false\n      }\n    )\n    const { accessToken } = authResult\n\n    assert.ok(accessToken)\n    assert.strictEqual(authResult.user.email, email)\n    assert.strictEqual(authResult.user.password, undefined)\n    assert.ok(authResult.user.fromGet)\n\n    const decoded = await authService.verifyAccessToken(accessToken)\n\n    assert.strictEqual(decoded.sub, `${user.id}`)\n  })","file":"strategy.test.ts","skipped":false,"dir":"packages/authentication-local/test"},{"name":"passwordHash property resolver","suites":["@feathersjs/authentication-local/strategy"],"updatePoint":{"line":185,"column":36},"line":185,"code":"  it('passwordHash property resolver', async () => {\n    const userResolver = resolve<{ password: string }, HookContext>({\n      properties: {\n        password: passwordHash({\n          strategy: 'local'\n        })\n      }\n    })\n\n    const resolvedData = await userResolver.resolve({ password: 'supersecret' }, { app } as HookContext)\n\n    assert.notStrictEqual(resolvedData.password, 'supersecret')\n  })","file":"strategy.test.ts","skipped":false,"dir":"packages/authentication-local/test"},{"name":"errors when service does not exist","suites":["@feathersjs/authentication-oauth","setup"],"updatePoint":{"line":8,"column":42},"line":8,"code":"    it('errors when service does not exist', () => {\n      const app = feathers()\n\n      assert.throws(\n        () => {\n          app.configure(oauth({ authService: 'something' } as OauthSetupSettings))\n        },\n        {\n          message: 'An authentication service must exist before registering @feathersjs/authentication-oauth'\n        }\n      )\n    })","file":"index.test.ts","skipped":false,"dir":"packages/authentication-oauth/test"},{"name":"does not error when service is configured","suites":["@feathersjs/authentication-oauth","setup"],"updatePoint":{"line":21,"column":49},"line":21,"code":"    it('does not error when service is configured', () => {\n      const app = feathers()\n\n      app.use('/authentication', new AuthenticationService(app))\n\n      app.configure(oauth())\n    })","file":"index.test.ts","skipped":false,"dir":"packages/authentication-oauth/test"},{"name":"runs through the oAuth flow","suites":["@feathersjs/authentication-oauth service"],"updatePoint":{"line":32,"column":33},"line":32,"code":"  it('runs through the oAuth flow', async () => {\n    const host = `http://localhost:${port}`\n    let location = `${host}/oauth/github`\n\n    const oauthResponse = await fetchErrorResponse(location)\n    assert.equal(oauthResponse.status, 303)\n\n    oauthResponse.headers['set-cookie']?.forEach((value) => cookie.setCookie(value, host))\n\n    location = oauthResponse.data.location\n\n    const providerResponse = await fetchErrorResponse(location)\n    assert.equal(providerResponse.status, 302)\n\n    location = providerResponse.headers.location\n\n    const { data } = await req.get(location, {\n      headers: {\n        cookie: await cookie.getCookieString(host)\n      }\n    })\n\n    assert.ok(data.accessToken)\n    assert.equal(data.authentication.strategy, 'github')\n  })","file":"service.test.ts","skipped":false,"dir":"packages/authentication-oauth/test"},{"name":"initializes, has .entityId and configuration","suites":["@feathersjs/authentication-oauth/strategy"],"updatePoint":{"line":20,"column":50},"line":20,"code":"  it('initializes, has .entityId and configuration', () => {\n    assert.ok(strategy)\n    assert.strictEqual(strategy.entityId, 'id')\n    assert.ok(strategy.configuration.entity)\n  })","file":"strategy.test.ts","skipped":false,"dir":"packages/authentication-oauth/test"},{"name":"reads configuration from the oauth key","suites":["@feathersjs/authentication-oauth/strategy"],"updatePoint":{"line":26,"column":44},"line":26,"code":"  it('reads configuration from the oauth key', () => {\n    const testConfigValue = Math.random()\n    app.get('authentication').oauth.github.hello = testConfigValue\n    assert.strictEqual(strategy.configuration.hello, testConfigValue)\n  })","file":"strategy.test.ts","skipped":false,"dir":"packages/authentication-oauth/test"},{"name":"getRedirect","suites":["@feathersjs/authentication-oauth/strategy"],"updatePoint":{"line":32,"column":17},"line":32,"code":"  it('getRedirect', async () => {\n    app.get('authentication').oauth.redirect = '/home'\n\n    let redirect = await strategy.getRedirect({ accessToken: 'testing' })\n    assert.equal(redirect, '/home#access_token=testing')\n\n    redirect = await strategy.getRedirect(\n      { accessToken: 'testing' },\n      {\n        redirect: '/hi-there'\n      }\n    )\n    assert.strictEqual('/home/hi-there#access_token=testing', redirect)\n\n    redirect = await strategy.getRedirect(new Error('something went wrong'))\n    assert.equal(redirect, '/home#error=something%20went%20wrong')\n\n    redirect = await strategy.getRedirect(new Error())\n    assert.equal(redirect, '/home#error=OAuth%20Authentication%20not%20successful')\n\n    app.get('authentication').oauth.redirect = '/home?'\n\n    redirect = await strategy.getRedirect({ accessToken: 'testing' })\n    assert.equal(redirect, '/home?access_token=testing')\n\n    delete app.get('authentication').oauth.redirect\n\n    redirect = await strategy.getRedirect({ accessToken: 'testing' })\n    assert.equal(redirect, null)\n\n    app.get('authentication').oauth.redirect = '/#dashboard'\n\n    redirect = await strategy.getRedirect({ accessToken: 'testing' })\n    assert.equal(redirect, '/#dashboard?access_token=testing')\n  })","file":"strategy.test.ts","skipped":false,"dir":"packages/authentication-oauth/test"},{"name":"getRedirect with referrer and allowed origins (#2430)","suites":["@feathersjs/authentication-oauth/strategy"],"updatePoint":{"line":68,"column":59},"line":68,"code":"  it('getRedirect with referrer and allowed origins (#2430)', async () => {\n    app.get('authentication').oauth.origins = ['https://feathersjs.com', 'https://feathers.cloud']\n\n    let redirect = await strategy.getRedirect(\n      { accessToken: 'testing' },\n      {\n        headers: {\n          referer: 'https://feathersjs.com/somewhere'\n        }\n      }\n    )\n    assert.equal(redirect, 'https://feathersjs.com#access_token=testing')\n\n    redirect = await strategy.getRedirect({ accessToken: 'testing' }, {})\n    assert.equal(redirect, 'https://feathersjs.com#access_token=testing')\n\n    redirect = await strategy.getRedirect(\n      { accessToken: 'testing' },\n      {\n        headers: {\n          referer: 'HTTPS://feathers.CLOUD'\n        }\n      }\n    )\n    assert.equal(redirect, 'https://feathers.cloud#access_token=testing')\n\n    redirect = await strategy.getRedirect(\n      { accessToken: 'testing' },\n      {\n        redirect: '/home',\n        headers: {\n          referer: 'https://feathersjs.com/somewhere'\n        }\n      }\n    )\n    assert.equal(redirect, 'https://feathersjs.com/home#access_token=testing')\n\n    await assert.rejects(\n      () =>\n        strategy.getRedirect(\n          { accessToken: 'testing' },\n          {\n            headers: {\n              referer: 'https://example.com'\n            }\n          }\n        ),\n      {\n        message: 'Referer \"https://example.com\" is not allowed.'\n      }\n    )\n  })","file":"strategy.test.ts","skipped":false,"dir":"packages/authentication-oauth/test"},{"name":"with new user","suites":["@feathersjs/authentication-oauth/strategy","authenticate"],"updatePoint":{"line":122,"column":21},"line":122,"code":"    it('with new user', async () => {\n      const authResult = await strategy.authenticate(\n        {\n          strategy: 'test',\n          profile: {\n            id: 'newEntity'\n          }\n        },\n        {}\n      )\n\n      assert.deepEqual(authResult, {\n        authentication: { strategy: 'github' },\n        user: { githubId: 'newEntity', id: authResult.user.id }\n      })\n    })","file":"strategy.test.ts","skipped":false,"dir":"packages/authentication-oauth/test"},{"name":"with existing user and already linked strategy","suites":["@feathersjs/authentication-oauth/strategy","authenticate"],"updatePoint":{"line":139,"column":54},"line":139,"code":"    it('with existing user and already linked strategy', async () => {\n      const existingUser = await app.service('users').create({\n        githubId: 'existingEntity',\n        name: 'David'\n      })\n      const authResult = await strategy.authenticate(\n        {\n          strategy: 'test',\n          profile: {\n            id: 'existingEntity'\n          }\n        },\n        {}\n      )\n\n      assert.deepEqual(authResult, {\n        authentication: { strategy: 'github' },\n        user: existingUser\n      })\n    })","file":"strategy.test.ts","skipped":false,"dir":"packages/authentication-oauth/test"},{"name":"links user with existing authentication","suites":["@feathersjs/authentication-oauth/strategy","authenticate"],"updatePoint":{"line":160,"column":47},"line":160,"code":"    it('links user with existing authentication', async () => {\n      const user = await app.service('users').create({\n        name: 'David'\n      })\n      const jwt = await authService.createAccessToken(\n        {},\n        {\n          subject: `${user.id}`\n        }\n      )\n\n      const authResult = await strategy.authenticate(\n        {\n          strategy: 'test',\n          profile: {\n            id: 'linkedEntity'\n          }\n        },\n        {\n          authentication: {\n            strategy: 'jwt',\n            accessToken: jwt\n          }\n        }\n      )\n\n      assert.deepEqual(authResult, {\n        authentication: { strategy: 'github' },\n        user: { id: user.id, name: user.name, githubId: 'linkedEntity' }\n      })\n    })","file":"strategy.test.ts","skipped":false,"dir":"packages/authentication-oauth/test"},{"name":"getGrantConfig initialises Grant defaults","suites":["@feathersjs/authentication-oauth/utils"],"updatePoint":{"line":7,"column":47},"line":7,"code":"  it('getGrantConfig initialises Grant defaults', () => {\n    const app = feathers<{ authentication: AuthenticationService }>()\n    const auth = new AuthenticationService(app)\n\n    app.set('host', '127.0.0.1')\n    app.set('port', '8877')\n    app.set('authentication', {\n      secret: 'supersecret',\n      entity: 'user',\n      service: 'users',\n      authStrategies: ['jwt'],\n      oauth: {\n        github: {\n          key: 'some-key',\n          secret: 'a secret secret',\n          authorize_url: '/github/authorize_url',\n          access_url: '/github/access_url',\n          dynamic: true\n        }\n      }\n    })\n    const { defaults } = getGrantConfig(auth)\n\n    assert.deepStrictEqual(defaults, {\n      prefix: '/oauth',\n      origin: 'http://127.0.0.1:8877',\n      transport: 'state',\n      response: ['tokens', 'raw', 'profile']\n    })\n  })","file":"utils.test.ts","skipped":false,"dir":"packages/authentication-oauth/test"},{"name":"getGrantConfig uses Grant defaults when set","suites":["@feathersjs/authentication-oauth/utils"],"updatePoint":{"line":38,"column":49},"line":38,"code":"  it('getGrantConfig uses Grant defaults when set', () => {\n    const app = feathers<{ authentication: AuthenticationService }>()\n    const auth = new AuthenticationService(app)\n\n    app.set('host', '127.0.0.1')\n    app.set('port', '8877')\n    app.set('authentication', {\n      secret: 'supersecret',\n      entity: 'user',\n      service: 'users',\n      authStrategies: ['jwt'],\n      oauth: {\n        defaults: {\n          prefix: '/auth',\n          origin: 'https://localhost:3344'\n        },\n        github: {\n          key: 'some-key',\n          secret: 'a secret secret',\n          authorize_url: '/github/authorize_url',\n          access_url: '/github/access_url',\n          dynamic: true\n        }\n      }\n    })\n    const { defaults, github } = getGrantConfig(auth)\n\n    assert.deepStrictEqual(defaults, {\n      prefix: '/auth',\n      origin: 'https://localhost:3344',\n      transport: 'state',\n      response: ['tokens', 'raw', 'profile']\n    })\n    assert.strictEqual(github?.redirect_uri, 'https://localhost:3344/auth/github/callback')\n  })","file":"utils.test.ts","skipped":false,"dir":"packages/authentication-oauth/test"},{"name":"infers configuration from settings schema","suites":["authentication/core","configuration"],"updatePoint":{"line":37,"column":49},"line":37,"code":"    it('infers configuration from settings schema', async () => {\n      const settingsSchema = schema({\n        $id: 'AuthSettingsSchema',\n        ...authenticationSettingsSchema\n      } as const)\n      type Settings = Infer<typeof settingsSchema>\n      const config: Settings = {\n        entity: 'user',\n        secret: 'supersecret',\n        authStrategies: ['some', 'thing']\n      }\n\n      await settingsSchema.validate(config)\n    })","file":"core.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"throws an error when app is not provided","suites":["authentication/core","configuration"],"updatePoint":{"line":52,"column":48},"line":52,"code":"    it('throws an error when app is not provided', () => {\n      try {\n        // @ts-ignore\n        const otherAuth = new AuthenticationBase()\n        assert.fail('Should never get here')\n        assert.ok(otherAuth)\n      } catch (error: any) {\n        assert.strictEqual(\n          error.message,\n          'An application instance has to be passed to the authentication service'\n        )\n      }\n    })","file":"core.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"sets defaults","suites":["authentication/core","configuration"],"updatePoint":{"line":66,"column":21},"line":66,"code":"    it('sets defaults', () => {\n      // Getting configuration twice returns a copy\n      assert.notStrictEqual(auth.configuration, auth.configuration)\n      assert.strictEqual(auth.configuration.entity, 'user')\n    })","file":"core.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"allows to override jwtOptions, does not merge","suites":["authentication/core","configuration"],"updatePoint":{"line":72,"column":53},"line":72,"code":"    it('allows to override jwtOptions, does not merge', () => {\n      const { jwtOptions } = auth.configuration\n      const auth2options = {\n        jwtOptions: {\n          expiresIn: '1w'\n        }\n      }\n\n      app.set('auth2', auth2options)\n\n      const auth2 = new AuthenticationBase(app, 'auth2')\n\n      assert.ok(jwtOptions)\n      assert.strictEqual(jwtOptions.expiresIn, '1d')\n      assert.strictEqual(jwtOptions.issuer, 'feathers')\n\n      assert.deepStrictEqual(auth2.configuration.jwtOptions, auth2options.jwtOptions)\n    })","file":"core.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"sets configKey and defaultAuthentication","suites":["authentication/core","configuration"],"updatePoint":{"line":91,"column":48},"line":91,"code":"    it('sets configKey and defaultAuthentication', () => {\n      assert.strictEqual(app.get('defaultAuthentication'), 'authentication')\n    })","file":"core.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"uses default configKey","suites":["authentication/core","configuration"],"updatePoint":{"line":95,"column":30},"line":95,"code":"    it('uses default configKey', () => {\n      const otherApp = feathers()\n      const otherAuth = new AuthenticationBase(otherApp)\n\n      assert.ok(otherAuth)\n      assert.strictEqual(otherApp.get('defaultAuthentication'), 'authentication')\n      assert.deepStrictEqual(otherApp.get('authentication'), {})\n    })","file":"core.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"strategyNames","suites":["authentication/core","strategies"],"updatePoint":{"line":106,"column":21},"line":106,"code":"    it('strategyNames', () => {\n      assert.deepStrictEqual(auth.strategyNames, ['first', 'second', 'dummy'])\n    })","file":"core.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"getStrategies","suites":["authentication/core","strategies"],"updatePoint":{"line":110,"column":21},"line":110,"code":"    it('getStrategies', () => {\n      const first = auth.getStrategies('first')\n      const invalid = auth.getStrategies('first', 'invalid', 'second')\n\n      assert.strictEqual(first.length, 1)\n      assert.strictEqual(invalid.length, 2, 'Filtered out invalid strategies')\n    })","file":"core.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"getStrategy","suites":["authentication/core","strategies"],"updatePoint":{"line":118,"column":19},"line":118,"code":"    it('getStrategy', () => {\n      const first = auth.getStrategy('first')\n\n      assert.ok(first)\n    })","file":"core.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"calls setName, setApplication and setAuthentication if available","suites":["authentication/core","strategies"],"updatePoint":{"line":124,"column":72},"line":124,"code":"    it('calls setName, setApplication and setAuthentication if available', () => {\n      const [first] = auth.getStrategies('first') as [Strategy1]\n\n      assert.strictEqual(first.name, 'first')\n      assert.strictEqual(first.app, app)\n      assert.strictEqual(first.authentication, auth)\n    })","file":"core.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"strategy configuration getter","suites":["authentication/core","strategies"],"updatePoint":{"line":132,"column":37},"line":132,"code":"    it('strategy configuration getter', () => {\n      const [first] = auth.getStrategies('first') as [Strategy1]\n\n      assert.deepStrictEqual(first.configuration, { hello: 'test' })\n    })","file":"core.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"strategy configuration getter","suites":["authentication/core","strategies"],"updatePoint":{"line":138,"column":37},"line":138,"code":"    it('strategy configuration getter', () => {\n      const [first] = auth.getStrategies('first') as [Strategy1]\n      const oldService = auth.configuration.service\n\n      delete auth.configuration.service\n\n      assert.strictEqual(first.entityService, null)\n\n      auth.configuration.service = oldService\n    })","file":"core.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"returns first success","suites":["authentication/core","authenticate","with strategy set in params"],"updatePoint":{"line":152,"column":31},"line":152,"code":"      it('returns first success', async () => {\n        const result = await auth.authenticate(\n          {\n            strategy: 'first',\n            username: 'David'\n          },\n          {},\n          'first',\n          'second'\n        )\n\n        assert.deepStrictEqual(result, Strategy1.result)\n      })","file":"core.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"returns error when failed","suites":["authentication/core","authenticate","with strategy set in params"],"updatePoint":{"line":166,"column":35},"line":166,"code":"      it('returns error when failed', async () => {\n        try {\n          await auth.authenticate(\n            {\n              strategy: 'first',\n              username: 'Steve'\n            },\n            {},\n            'first',\n            'second'\n          )\n          assert.fail('Should never get here')\n        } catch (error: any) {\n          assert.strictEqual(error.name, 'NotAuthenticated')\n          assert.strictEqual(error.message, 'Invalid Dave')\n        }\n      })","file":"core.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"returns second success","suites":["authentication/core","authenticate","with strategy set in params"],"updatePoint":{"line":184,"column":32},"line":184,"code":"      it('returns second success', async () => {\n        const authentication = {\n          strategy: 'second',\n          v2: true,\n          password: 'supersecret'\n        }\n\n        const result = await auth.authenticate(authentication, {}, 'first', 'second')\n\n        assert.deepStrictEqual(\n          result,\n          Object.assign({}, Strategy2.result, {\n            authentication,\n            params: { authenticated: true }\n          })\n        )\n      })","file":"core.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"passes params","suites":["authentication/core","authenticate","with strategy set in params"],"updatePoint":{"line":202,"column":23},"line":202,"code":"      it('passes params', async () => {\n        const params = {\n          some: 'thing'\n        }\n        const authentication = {\n          strategy: 'second',\n          v2: true,\n          password: 'supersecret'\n        }\n\n        const result = await auth.authenticate(authentication, params, 'first', 'second')\n\n        assert.deepStrictEqual(\n          result,\n          Object.assign(\n            {\n              params: Object.assign(params, {\n                authenticated: true\n              }),\n              authentication\n            },\n            Strategy2.result\n          )\n        )\n      })","file":"core.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"throws error when allowed and passed strategy does not match","suites":["authentication/core","authenticate","with strategy set in params"],"updatePoint":{"line":228,"column":70},"line":228,"code":"      it('throws error when allowed and passed strategy does not match', async () => {\n        try {\n          await auth.authenticate(\n            {\n              strategy: 'first',\n              username: 'Dummy'\n            },\n            {},\n            'second'\n          )\n          assert.fail('Should never get here')\n        } catch (error: any) {\n          assert.strictEqual(error.name, 'NotAuthenticated')\n          assert.strictEqual(\n            error.message,\n            'Invalid authentication information (strategy not allowed in authStrategies)'\n          )\n        }\n      })","file":"core.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"throws error when strategy is not set","suites":["authentication/core","authenticate","with strategy set in params"],"updatePoint":{"line":248,"column":47},"line":248,"code":"      it('throws error when strategy is not set', async () => {\n        try {\n          await auth.authenticate(\n            {\n              username: 'Dummy'\n            },\n            {},\n            'second'\n          )\n          assert.fail('Should never get here')\n        } catch (error: any) {\n          assert.strictEqual(error.message, 'Invalid authentication information (no `strategy` set)')\n        }\n      })","file":"core.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"returns null when no names are given","suites":["authentication/core","parse"],"updatePoint":{"line":268,"column":44},"line":268,"code":"    it('returns null when no names are given', async () => {\n      const req = {} as MockRequest\n\n      assert.strictEqual(await auth.parse(req, res), null)\n    })","file":"core.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"successfully parses a request (first)","suites":["authentication/core","parse"],"updatePoint":{"line":274,"column":45},"line":274,"code":"    it('successfully parses a request (first)', async () => {\n      const req = { isDave: true } as MockRequest\n\n      const result = await auth.parse(req, res, 'first', 'second')\n\n      assert.deepStrictEqual(result, Strategy1.result)\n    })","file":"core.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"successfully parses a request (second)","suites":["authentication/core","parse"],"updatePoint":{"line":282,"column":46},"line":282,"code":"    it('successfully parses a request (second)', async () => {\n      const req = { isV2: true } as MockRequest\n\n      const result = await auth.parse(req, res, 'first', 'second')\n\n      assert.deepStrictEqual(result, Strategy2.result)\n    })","file":"core.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"null when no success","suites":["authentication/core","parse"],"updatePoint":{"line":290,"column":28},"line":290,"code":"    it('null when no success', async () => {\n      const req = {} as MockRequest\n\n      const result = await auth.parse(req, res, 'first', 'second')\n\n      assert.strictEqual(result, null)\n    })","file":"core.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"with default options","suites":["authentication/core","jwt","createAccessToken"],"updatePoint":{"line":313,"column":30},"line":313,"code":"      it('with default options', async () => {\n        const msg = 'Some payload'\n\n        const accessToken = await auth.createAccessToken({ message: msg })\n        const decoded = jwt.decode(accessToken)\n        const settings = auth.configuration.jwtOptions\n\n        if (decoded === null || typeof decoded === 'string') {\n          throw new Error('Not encoded properly')\n        }\n\n        assert.ok(typeof accessToken === 'string')\n        assert.strictEqual(decoded.message, msg, 'Set payload')\n        assert.ok(UUID.test(decoded.jti), 'Set `jti` to default UUID')\n        assert.strictEqual(decoded.aud, settings.audience)\n        assert.strictEqual(decoded.iss, settings.issuer)\n      })","file":"core.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"with default and overriden options","suites":["authentication/core","jwt","createAccessToken"],"updatePoint":{"line":331,"column":44},"line":331,"code":"      it('with default and overriden options', async () => {\n        const overrides = {\n          issuer: 'someoneelse',\n          audience: 'people',\n          jwtid: 'something'\n        }\n\n        const accessToken = await auth.createAccessToken({ message }, overrides)\n\n        assert.ok(typeof accessToken === 'string')\n\n        const decoded = jwt.decode(accessToken)\n\n        if (decoded === null || typeof decoded === 'string') {\n          throw new Error('Not encoded properly')\n        }\n\n        assert.strictEqual(decoded.message, message, 'Set payload')\n        assert.strictEqual(decoded.jti, 'something')\n        assert.strictEqual(decoded.aud, overrides.audience)\n        assert.strictEqual(decoded.iss, overrides.issuer)\n      })","file":"core.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"errors with invalid options","suites":["authentication/core","jwt","createAccessToken"],"updatePoint":{"line":354,"column":37},"line":354,"code":"      it('errors with invalid options', async () => {\n        const overrides = {\n          algorithm: 'fdjsklfsndkl'\n        }\n\n        try {\n          // @ts-ignore\n          await auth.createAccessToken({}, overrides)\n          assert.fail('Should never get here')\n        } catch (error: any) {\n          assert.strictEqual(error.message, '\"algorithm\" must be a valid string enum value')\n        }\n      })","file":"core.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"returns payload when token is valid","suites":["authentication/core","jwt","verifyAccessToken"],"updatePoint":{"line":383,"column":45},"line":383,"code":"      it('returns payload when token is valid', async () => {\n        const payload = await auth.verifyAccessToken(validToken)\n\n        assert.strictEqual(payload.message, message)\n      })","file":"core.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"errors when custom algorithm property does not match","suites":["authentication/core","jwt","verifyAccessToken"],"updatePoint":{"line":389,"column":62},"line":389,"code":"      it('errors when custom algorithm property does not match', async () => {\n        try {\n          await auth.verifyAccessToken(validToken, {\n            algorithm: ['HS512']\n          })\n          assert.fail('Should never get here')\n        } catch (error: any) {\n          assert.strictEqual(error.message, 'invalid algorithm')\n        }\n      })","file":"core.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"errors when algorithms property does not match","suites":["authentication/core","jwt","verifyAccessToken"],"updatePoint":{"line":400,"column":56},"line":400,"code":"      it('errors when algorithms property does not match', async () => {\n        try {\n          await auth.verifyAccessToken(validToken, {\n            algorithms: ['HS512']\n          })\n          assert.fail('Should never get here')\n        } catch (error: any) {\n          assert.strictEqual(error.message, 'invalid algorithm')\n        }\n      })","file":"core.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"errors when secret is different","suites":["authentication/core","jwt","verifyAccessToken"],"updatePoint":{"line":411,"column":41},"line":411,"code":"      it('errors when secret is different', async () => {\n        try {\n          await auth.verifyAccessToken(validToken, {}, 'fdjskl')\n\n          assert.fail('Should never get here')\n        } catch (error: any) {\n          assert.strictEqual(error.message, 'invalid signature')\n        }\n      })","file":"core.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"errors when other custom options do not match","suites":["authentication/core","jwt","verifyAccessToken"],"updatePoint":{"line":421,"column":55},"line":421,"code":"      it('errors when other custom options do not match', async () => {\n        try {\n          await auth.verifyAccessToken(validToken, { issuer: 'someonelse' })\n\n          assert.fail('Should never get here')\n        } catch (error: any) {\n          assert.strictEqual(error.name, 'NotAuthenticated')\n          assert.ok(/jwt issuer invalid/.test(error.message))\n        }\n      })","file":"core.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"errors when token is expired","suites":["authentication/core","jwt","verifyAccessToken"],"updatePoint":{"line":432,"column":38},"line":432,"code":"      it('errors when token is expired', async () => {\n        try {\n          await auth.verifyAccessToken(expiredToken)\n          assert.fail('Should never get here')\n        } catch (error: any) {\n          assert.strictEqual(error.name, 'NotAuthenticated')\n          assert.strictEqual(error.message, 'jwt expired')\n          assert.strictEqual(error.data.name, 'TokenExpiredError')\n          assert.ok(error.data.expiredAt)\n        }\n      })","file":"core.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"throws an error when no strategies are passed","suites":["authentication/hooks/authenticate"],"updatePoint":{"line":64,"column":51},"line":64,"code":"  it('throws an error when no strategies are passed', () => {\n    try {\n      // @ts-ignore\n      authenticate()\n      assert.fail('Should never get here')\n    } catch (error: any) {\n      assert.strictEqual(error.message, 'The authenticate hook needs at least one allowed strategy')\n    }\n  })","file":"hooks/authenticate.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"throws an error when not a before hook","suites":["authentication/hooks/authenticate"],"updatePoint":{"line":74,"column":44},"line":74,"code":"  it('throws an error when not a before hook', async () => {\n    const users = app.service('users')\n\n    users.hooks({\n      after: {\n        all: [authenticate('first')]\n      }\n    })\n\n    try {\n      await users.find()\n      assert.fail('Should never get here')\n    } catch (error: any) {\n      assert.strictEqual(error.name, 'NotAuthenticated')\n      assert.strictEqual(error.message, 'The authenticate hook must be used as a before hook')\n    }\n  })","file":"hooks/authenticate.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"throws an error if authentication service is gone","suites":["authentication/hooks/authenticate"],"updatePoint":{"line":92,"column":55},"line":92,"code":"  it('throws an error if authentication service is gone', async () => {\n    delete app.services.authentication\n\n    try {\n      await app.service('users').get(1, {\n        authentication: {\n          some: 'thing'\n        }\n      })\n      assert.fail('Should never get here')\n    } catch (error: any) {\n      assert.strictEqual(error.name, 'NotAuthenticated')\n      assert.strictEqual(error.message, 'Could not find a valid authentication service')\n    }\n  })","file":"hooks/authenticate.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"authenticates with first strategy, merges params","suites":["authentication/hooks/authenticate"],"updatePoint":{"line":108,"column":54},"line":108,"code":"  it('authenticates with first strategy, merges params', async () => {\n    const params = {\n      authentication: {\n        strategy: 'first',\n        username: 'David'\n      }\n    }\n\n    const result = await app.service('users').get(1, params)\n\n    assert.deepStrictEqual(result, Object.assign({}, params, Strategy1.result))\n  })","file":"hooks/authenticate.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"authenticates with first strategy, keeps references alive (#1629)","suites":["authentication/hooks/authenticate"],"updatePoint":{"line":121,"column":71},"line":121,"code":"  it('authenticates with first strategy, keeps references alive (#1629)', async () => {\n    const connection = {}\n    const params = {\n      connection,\n      authentication: {\n        strategy: 'first',\n        username: 'David'\n      }\n    }\n\n    app.service('users').hooks({\n      after: {\n        get: (context) => {\n          context.result.params = context.params\n        }\n      }\n    })\n\n    const result = await app.service('users').get(1, params)\n\n    assert.ok(result.params.connection === connection)\n  })","file":"hooks/authenticate.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"authenticates with different authentication service","suites":["authentication/hooks/authenticate"],"updatePoint":{"line":144,"column":57},"line":144,"code":"  it('authenticates with different authentication service', async () => {\n    const params = {\n      authentication: {\n        strategy: 'test',\n        username: 'David'\n      }\n    }\n\n    app.service('users').hooks({\n      before: {\n        find: [\n          authenticate({\n            service: 'auth-v2',\n            strategies: ['test']\n          })\n        ]\n      }\n    })\n\n    const result = await app.service('users').find(params)\n\n    assert.deepStrictEqual(result, [])\n  })","file":"hooks/authenticate.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"authenticates with second strategy","suites":["authentication/hooks/authenticate"],"updatePoint":{"line":168,"column":40},"line":168,"code":"  it('authenticates with second strategy', async () => {\n    const params = {\n      authentication: {\n        strategy: 'second',\n        v2: true,\n        password: 'supersecret'\n      }\n    }\n\n    const result = await app.service('users').get(1, params)\n\n    assert.deepStrictEqual(\n      result,\n      Object.assign(\n        {\n          authentication: params.authentication,\n          params: { authenticated: true }\n        },\n        Strategy2.result\n      )\n    )\n  })","file":"hooks/authenticate.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"passes for internal calls without authentication","suites":["authentication/hooks/authenticate"],"updatePoint":{"line":191,"column":54},"line":191,"code":"  it('passes for internal calls without authentication', async () => {\n    const result = await app.service('users').get(1)\n\n    assert.deepStrictEqual(result, {})\n  })","file":"hooks/authenticate.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"fails for invalid params.authentication","suites":["authentication/hooks/authenticate"],"updatePoint":{"line":197,"column":45},"line":197,"code":"  it('fails for invalid params.authentication', async () => {\n    try {\n      await app.service('users').get(1, {\n        authentication: {\n          strategy: 'first',\n          some: 'thing'\n        }\n      })\n      assert.fail('Should never get here')\n    } catch (error: any) {\n      assert.strictEqual(error.name, 'NotAuthenticated')\n      assert.strictEqual(error.message, 'Invalid Dave')\n    }\n  })","file":"hooks/authenticate.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"fails for external calls without authentication","suites":["authentication/hooks/authenticate"],"updatePoint":{"line":212,"column":53},"line":212,"code":"  it('fails for external calls without authentication', async () => {\n    try {\n      await app.service('users').get(1, {\n        provider: 'rest'\n      })\n      assert.fail('Should never get here')\n    } catch (error: any) {\n      assert.strictEqual(error.name, 'NotAuthenticated')\n      assert.strictEqual(error.message, 'Not authenticated')\n    }\n  })","file":"hooks/authenticate.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"passes with authenticated: true but external call","suites":["authentication/hooks/authenticate"],"updatePoint":{"line":224,"column":55},"line":224,"code":"  it('passes with authenticated: true but external call', async () => {\n    const params = {\n      provider: 'rest',\n      authenticated: true\n    }\n    const result = await app.service('users').get(1, params)\n\n    assert.deepStrictEqual(result, params)\n  })","file":"hooks/authenticate.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"errors when used on the authentication service","suites":["authentication/hooks/authenticate"],"updatePoint":{"line":234,"column":52},"line":234,"code":"  it('errors when used on the authentication service', async () => {\n    const auth = app.service('authentication')\n\n    auth.hooks({\n      before: {\n        create: authenticate('first')\n      }\n    })\n\n    try {\n      await auth.create({\n        strategy: 'first',\n        username: 'David'\n      })\n      assert.fail('Should never get here')\n    } catch (error: any) {\n      assert.strictEqual(\n        error.message,\n        'The authenticate hook does not need to be used on the authentication service'\n      )\n    }\n  })","file":"hooks/authenticate.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"login","suites":["authentication/hooks/events"],"updatePoint":{"line":25,"column":11},"line":25,"code":"  it('login', (done) => {\n    const data = {\n      message: 'test'\n    }\n\n    app.once('login', (result: AuthenticationResult, params: AuthenticationParams, context: HookContext) => {\n      try {\n        assert.deepStrictEqual(result, data)\n        assert.ok(params.testParam)\n        assert.ok(context.method, 'create')\n        done()\n      } catch (error: any) {\n        done(error)\n      }\n    })\n\n    service.create(data, {\n      testParam: true,\n      provider: 'test'\n    } as any)\n  })","file":"hooks/event.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"logout","suites":["authentication/hooks/events"],"updatePoint":{"line":47,"column":12},"line":47,"code":"  it('logout', (done) => {\n    app.once('logout', (result: AuthenticationResult, params: AuthenticationParams, context: HookContext) => {\n      try {\n        assert.deepStrictEqual(result, {\n          id: 'test'\n        })\n        assert.ok(params.testParam)\n        assert.ok(context.method, 'remove')\n        done()\n      } catch (error: any) {\n        done(error)\n      }\n    })\n\n    service.remove('test', {\n      testParam: true,\n      provider: 'test'\n    } as any)\n  })","file":"hooks/event.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"does nothing when provider is not set","suites":["authentication/hooks/events"],"updatePoint":{"line":67,"column":43},"line":67,"code":"  it('does nothing when provider is not set', (done) => {\n    const handler = () => {\n      done(new Error('Should never get here'))\n    }\n\n    app.on('logout', handler)\n    service.once('removed', (result: AuthenticationResult) => {\n      app.removeListener('logout', handler)\n      assert.deepStrictEqual(result, {\n        id: 'test'\n      })\n      done()\n    })\n\n    service.remove('test')\n  })","file":"hooks/event.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"getEntity","suites":["authentication/jwt"],"updatePoint":{"line":96,"column":15},"line":96,"code":"  it('getEntity', async () => {\n    const [strategy] = app.service('authentication').getStrategies('jwt') as JWTStrategy[]\n\n    let entity = await strategy.getEntity(user.id, {\n      query: {\n        name: 'Dave'\n      }\n    })\n\n    assert.deepStrictEqual(entity, user)\n\n    entity = await strategy.getEntity(user.id, {\n      provider: 'rest'\n    })\n\n    assert.deepStrictEqual(entity, {\n      ...user,\n      isExternal: true\n    })\n  })","file":"jwt.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"adds entity and authentication information on create","suites":["authentication/jwt","handleConnection"],"updatePoint":{"line":118,"column":60},"line":118,"code":"    it('adds entity and authentication information on create', async () => {\n      const connection: any = {}\n\n      await app.service('authentication').create(\n        {\n          strategy: 'jwt',\n          accessToken\n        },\n        { connection }\n      )\n\n      assert.deepStrictEqual(connection.user, user)\n      assert.deepStrictEqual(connection.authentication, {\n        strategy: 'jwt',\n        accessToken\n      })\n    })","file":"jwt.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"login event connection has authentication information (#2908)","suites":["authentication/jwt","handleConnection"],"updatePoint":{"line":136,"column":69},"line":136,"code":"    it('login event connection has authentication information (#2908)', async () => {\n      const connection: any = {}\n      const onLogin = new Promise((resolve, reject) =>\n        app.once('login', (data, { connection }) => {\n          try {\n            assert.deepStrictEqual(connection.user, {\n              ...user,\n              isExternal: true\n            })\n            resolve(data)\n          } catch (error) {\n            reject(error)\n          }\n        })\n      )\n\n      await app.service('authentication').create(\n        {\n          strategy: 'jwt',\n          accessToken\n        },\n        { connection, provider: 'test' }\n      )\n\n      await onLogin\n    })","file":"jwt.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"resolves safe dispatch data in authentication result","suites":["authentication/jwt","handleConnection"],"updatePoint":{"line":163,"column":60},"line":163,"code":"    it('resolves safe dispatch data in authentication result', async () => {\n      const authResult = await app.service('authentication').create({\n        strategy: 'jwt',\n        accessToken\n      })\n\n      const dispatch = getDispatch(authResult)\n\n      assert.deepStrictEqual(dispatch.user, { dispatch: true, message: 'Hello world' })\n    })","file":"jwt.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"sends disconnect event when connection token expires and removes all connection information","suites":["authentication/jwt","handleConnection"],"updatePoint":{"line":174,"column":99},"line":174,"code":"    it('sends disconnect event when connection token expires and removes all connection information', async () => {\n      const connection: any = {}\n      const token: string = await app.service('authentication').createAccessToken(\n        {},\n        {\n          subject: `${user.id}`,\n          expiresIn: '1s'\n        }\n      )\n\n      const result = await app.service('authentication').create(\n        {\n          strategy: 'jwt',\n          accessToken: token\n        },\n        { connection }\n      )\n\n      assert.ok(connection.authentication)\n\n      assert.strictEqual(result.accessToken, token)\n\n      const disconnection = await new Promise((resolve) => app.once('disconnect', resolve))\n\n      assert.strictEqual(disconnection, connection)\n\n      assert.ok(!connection.authentication)\n      assert.ok(!connection.user)\n      assert.strictEqual(Object.keys(connection).length, 0)\n    })","file":"jwt.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"deletes authentication information on remove","suites":["authentication/jwt","handleConnection"],"updatePoint":{"line":205,"column":52},"line":205,"code":"    it('deletes authentication information on remove', async () => {\n      const connection: any = {}\n\n      await app.service('authentication').create(\n        {\n          strategy: 'jwt',\n          accessToken\n        },\n        { connection }\n      )\n\n      assert.ok(connection.authentication)\n\n      await app.service('authentication').remove(null, {\n        authentication: connection.authentication,\n        connection\n      })\n\n      assert.ok(!connection.authentication)\n      assert.ok(!connection.user)\n    })","file":"jwt.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"deletes authentication information on disconnect but maintains it in event handler","suites":["authentication/jwt","handleConnection"],"updatePoint":{"line":227,"column":90},"line":227,"code":"    it('deletes authentication information on disconnect but maintains it in event handler', async () => {\n      const connection: any = {}\n\n      await app.service('authentication').create(\n        {\n          strategy: 'jwt',\n          accessToken\n        },\n        { connection }\n      )\n\n      assert.ok(connection.authentication)\n      assert.ok(connection.user)\n\n      const disconnectPromise = new Promise((resolve, reject) =>\n        app.once('disconnect', (connection) => {\n          try {\n            assert.ok(connection.authentication)\n            assert.ok(connection.user)\n            resolve(connection)\n          } catch (error) {\n            reject(error)\n          }\n        })\n      )\n      app.emit('disconnect', connection)\n\n      await disconnectPromise\n      await new Promise((resolve) => process.nextTick(resolve))\n\n      assert.ok(!connection.authentication)\n      assert.ok(!connection.user)\n    })","file":"jwt.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"does not remove if accessToken does not match","suites":["authentication/jwt","handleConnection"],"updatePoint":{"line":261,"column":53},"line":261,"code":"    it('does not remove if accessToken does not match', async () => {\n      const connection: any = {}\n\n      await app.service('authentication').create(\n        {\n          strategy: 'jwt',\n          accessToken\n        },\n        { connection }\n      )\n\n      assert.ok(connection.authentication)\n\n      await app.service('authentication').remove(null, {\n        authentication: {\n          strategy: 'jwt',\n          accessToken: await app.service('authentication').createAccessToken(\n            {},\n            {\n              subject: `${user.id}`\n            }\n          )\n        },\n        connection\n      })\n\n      assert.ok(connection.authentication)\n    })","file":"jwt.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"fails for protected service and external call when not set","suites":["authentication/jwt","with authenticate hook"],"updatePoint":{"line":292,"column":66},"line":292,"code":"    it('fails for protected service and external call when not set', async () => {\n      try {\n        await app.service('protected').get('test', {\n          provider: 'rest'\n        })\n        assert.fail('Should never get here')\n      } catch (error: any) {\n        assert.strictEqual(error.name, 'NotAuthenticated')\n        assert.strictEqual(error.message, 'Not authenticated')\n      }\n    })","file":"jwt.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"fails for protected service and external call when not strategy","suites":["authentication/jwt","with authenticate hook"],"updatePoint":{"line":304,"column":71},"line":304,"code":"    it('fails for protected service and external call when not strategy', async () => {\n      try {\n        await app.service('protected').get('test', {\n          provider: 'rest',\n          authentication: {\n            username: 'Dave'\n          }\n        })\n        assert.fail('Should never get here')\n      } catch (error: any) {\n        assert.strictEqual(error.name, 'NotAuthenticated')\n        assert.strictEqual(error.message, 'Invalid authentication information (no `strategy` set)')\n      }\n    })","file":"jwt.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"fails when entity service was not found","suites":["authentication/jwt","with authenticate hook"],"updatePoint":{"line":319,"column":47},"line":319,"code":"    it('fails when entity service was not found', async () => {\n      delete app.services.users\n\n      await assert.rejects(\n        () =>\n          app.service('protected').get('test', {\n            provider: 'rest',\n            authentication: {\n              strategy: 'jwt',\n              accessToken\n            }\n          }),\n        {\n          message: \"Can not find service 'users'\"\n        }\n      )\n    })","file":"jwt.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"fails when accessToken is not set","suites":["authentication/jwt","with authenticate hook"],"updatePoint":{"line":337,"column":41},"line":337,"code":"    it('fails when accessToken is not set', async () => {\n      try {\n        await app.service('protected').get('test', {\n          provider: 'rest',\n          authentication: {\n            strategy: 'jwt'\n          }\n        })\n        assert.fail('Should never get here')\n      } catch (error: any) {\n        assert.strictEqual(error.name, 'NotAuthenticated')\n        assert.strictEqual(error.message, 'No access token')\n      }\n    })","file":"jwt.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"passes when authentication is set and merges params","suites":["authentication/jwt","with authenticate hook"],"updatePoint":{"line":352,"column":59},"line":352,"code":"    it('passes when authentication is set and merges params', async () => {\n      const params = {\n        provider: 'rest',\n        authentication: {\n          strategy: 'jwt',\n          accessToken\n        }\n      }\n\n      const result = await app.service('protected').get('test', params)\n\n      assert.strictEqual(Object.keys(result.params).length, 4)\n      assert.ok(!result.params.accessToken, 'Did not merge accessToken')\n      assert.deepStrictEqual(result, {\n        id: 'test',\n        params: merge({}, params, {\n          user,\n          authentication: { payload },\n          authenticated: true\n        })\n      })\n    })","file":"jwt.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"works with entity set to null","suites":["authentication/jwt","with authenticate hook"],"updatePoint":{"line":375,"column":37},"line":375,"code":"    it('works with entity set to null', async () => {\n      const params = {\n        provider: 'rest',\n        authentication: {\n          strategy: 'jwt',\n          accessToken\n        }\n      }\n\n      app.get('authentication').entity = null\n\n      const result = await app.service('protected').get('test', params)\n\n      assert.strictEqual(Object.keys(result.params).length, 3)\n      assert.ok(!result.params.accessToken, 'Did not merge accessToken')\n      assert.deepStrictEqual(result, {\n        id: 'test',\n        params: merge({}, params, {\n          authentication: { payload },\n          authenticated: true\n        })\n      })\n    })","file":"jwt.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"authenticates but does not return a new accessToken","suites":["authentication/jwt","on authentication service"],"updatePoint":{"line":401,"column":59},"line":401,"code":"    it('authenticates but does not return a new accessToken', async () => {\n      const authResult = await app.service('authentication').create({\n        strategy: 'jwt',\n        accessToken\n      })\n\n      assert.strictEqual(authResult.accessToken, accessToken)\n      assert.deepStrictEqual(authResult.user, user)\n      assert.deepStrictEqual(authResult.authentication.payload, payload)\n    })","file":"jwt.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"errors when trying to set invalid option","suites":["authentication/jwt","on authentication service"],"updatePoint":{"line":412,"column":48},"line":412,"code":"    it('errors when trying to set invalid option', () => {\n      app.get('authentication').otherJwt = {\n        expiresIn: 'something'\n      }\n\n      try {\n        app.service('authentication').register('otherJwt', new JWTStrategy())\n        assert.fail('Should never get here')\n      } catch (error: any) {\n        assert.strictEqual(\n          error.message,\n          \"Invalid JwtStrategy option 'authentication.otherJwt.expiresIn'. Did you mean to set it in 'authentication.jwtOptions'?\"\n        )\n      }\n    })","file":"jwt.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"errors when `header` option is an object`","suites":["authentication/jwt","on authentication service"],"updatePoint":{"line":428,"column":49},"line":428,"code":"    it('errors when `header` option is an object`', () => {\n      app.get('authentication').otherJwt = {\n        header: { message: 'This is wrong' }\n      }\n\n      assert.throws(() => app.service('authentication').register('otherJwt', new JWTStrategy()), {\n        message: \"The 'header' option for the otherJwt strategy must be a string\"\n      })\n    })","file":"jwt.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"returns null when header not set","suites":["authentication/jwt","parse"],"updatePoint":{"line":442,"column":40},"line":442,"code":"    it('returns null when header not set', async () => {\n      const req = {} as MockRequest\n\n      const result = await app.service('authentication').parse(req, res, 'jwt')\n\n      assert.strictEqual(result, null)\n    })","file":"jwt.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"parses plain Authorization header","suites":["authentication/jwt","parse"],"updatePoint":{"line":450,"column":41},"line":450,"code":"    it('parses plain Authorization header', async () => {\n      const req = {\n        headers: {\n          authorization: accessToken\n        }\n      } as MockRequest\n\n      const result = await app.service('authentication').parse(req, res, 'jwt')\n\n      assert.deepStrictEqual(result, {\n        strategy: 'jwt',\n        accessToken\n      })\n    })","file":"jwt.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"parses Authorization header with Bearer scheme","suites":["authentication/jwt","parse"],"updatePoint":{"line":465,"column":54},"line":465,"code":"    it('parses Authorization header with Bearer scheme', async () => {\n      const req = {\n        headers: {\n          authorization: ` Bearer ${accessToken} `\n        }\n      } as MockRequest\n\n      const result = await app.service('authentication').parse(req, res, 'jwt')\n\n      assert.deepStrictEqual(result, {\n        strategy: 'jwt',\n        accessToken\n      })\n    })","file":"jwt.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"return null when scheme does not match","suites":["authentication/jwt","parse"],"updatePoint":{"line":480,"column":46},"line":480,"code":"    it('return null when scheme does not match', async () => {\n      const req = {\n        headers: {\n          authorization: ' Basic something'\n        }\n      } as MockRequest\n\n      const result = await app.service('authentication').parse(req, res, 'jwt')\n\n      assert.strictEqual(result, null)\n    })","file":"jwt.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"settings returns authentication options","suites":["authentication/service"],"updatePoint":{"line":39,"column":45},"line":39,"code":"  it('settings returns authentication options', () => {\n    assert.deepStrictEqual(\n      app.service('authentication').configuration,\n      Object.assign({}, defaultOptions, app.get('authentication'))\n    )\n  })","file":"service.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"app.defaultAuthentication()","suites":["authentication/service"],"updatePoint":{"line":46,"column":33},"line":46,"code":"  it('app.defaultAuthentication()', () => {\n    assert.strictEqual(app.defaultAuthentication(), app.service('authentication'))\n    assert.throws(() => app.defaultAuthentication('dummy'), {\n      message: \"Can not find service 'dummy'\"\n    })\n  })","file":"service.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"creates a valid accessToken and includes strategy result","suites":["authentication/service","create"],"updatePoint":{"line":54,"column":64},"line":54,"code":"    it('creates a valid accessToken and includes strategy result', async () => {\n      const service = app.service('authentication')\n      const result = await service.create({\n        strategy: 'first',\n        username: 'David'\n      })\n\n      const settings = service.configuration.jwtOptions\n      const decoded = jwt.decode(result.accessToken)\n\n      if (typeof decoded === 'string') {\n        throw new Error('Unexpected decoded JWT type')\n      }\n\n      assert.ok(result.accessToken)\n      assert.deepStrictEqual(omit(result, 'accessToken', 'authentication'), Strategy1.result)\n      assert.deepStrictEqual(result.authentication.payload, decoded)\n      assert.ok(UUID.test(decoded.jti), 'Set `jti` to default UUID')\n      assert.strictEqual(decoded.aud, settings.audience)\n      assert.strictEqual(decoded.iss, settings.issuer)\n    })","file":"service.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"fails when strategy fails","suites":["authentication/service","create"],"updatePoint":{"line":76,"column":33},"line":76,"code":"    it('fails when strategy fails', async () => {\n      try {\n        await app.service('authentication').create({\n          strategy: 'first',\n          username: 'Dave'\n        })\n        assert.fail('Should never get here')\n      } catch (error: any) {\n        assert.strictEqual(error.name, 'NotAuthenticated')\n        assert.strictEqual(error.message, 'Invalid Dave')\n      }\n    })","file":"service.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"creates a valid accessToken with strategy and params.payload","suites":["authentication/service","create"],"updatePoint":{"line":89,"column":68},"line":89,"code":"    it('creates a valid accessToken with strategy and params.payload', async () => {\n      const result = await app.service('authentication').create(\n        {\n          strategy: 'first',\n          username: 'David'\n        },\n        {\n          payload: { message }\n        }\n      )\n\n      const decoded = jwt.decode(result.accessToken)\n\n      if (typeof decoded === 'string') {\n        throw new Error('Unexpected decoded JWT type')\n      }\n\n      assert.strictEqual(decoded.message, message)\n    })","file":"service.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"sets the subject authResult[entity][entityService.id]","suites":["authentication/service","create"],"updatePoint":{"line":109,"column":61},"line":109,"code":"    it('sets the subject authResult[entity][entityService.id]', async () => {\n      const { accessToken } = await app.service('authentication').create({\n        strategy: 'first',\n        username: 'David'\n      })\n\n      const decoded = jwt.decode(accessToken)\n\n      assert.strictEqual(decoded.sub, Strategy1.result.user.id.toString())\n    })","file":"service.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"sets the subject authResult[entity][entityId]","suites":["authentication/service","create"],"updatePoint":{"line":120,"column":53},"line":120,"code":"    it('sets the subject authResult[entity][entityId]', async () => {\n      app.get('authentication').entityId = 'name'\n\n      const { accessToken } = await app.service('authentication').create({\n        strategy: 'first',\n        username: 'David'\n      })\n\n      const decoded = jwt.decode(accessToken)\n\n      assert.strictEqual(decoded.sub, Strategy1.result.user.name.toString())\n    })","file":"service.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"does not override the subject if already set","suites":["authentication/service","create"],"updatePoint":{"line":133,"column":52},"line":133,"code":"    it('does not override the subject if already set', async () => {\n      const subject = 'Davester'\n\n      const { accessToken } = await app.service('authentication').create(\n        {\n          strategy: 'first',\n          username: 'David'\n        },\n        {\n          jwt: { subject }\n        }\n      )\n\n      const decoded = jwt.decode(accessToken)\n\n      assert.strictEqual(decoded.sub, subject)\n    })","file":"service.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"errors when subject can not be found","suites":["authentication/service","create"],"updatePoint":{"line":151,"column":44},"line":151,"code":"    it('errors when subject can not be found', async () => {\n      // @ts-ignore\n      app.service('users').options.id = 'somethingElse'\n\n      try {\n        await app.service('authentication').create({\n          strategy: 'first',\n          username: 'David'\n        })\n        assert.fail('Should never get here')\n      } catch (error: any) {\n        assert.strictEqual(error.name, 'NotAuthenticated')\n        assert.strictEqual(error.message, 'Can not set subject from user.somethingElse')\n      }\n    })","file":"service.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"errors when no allowed strategies are set","suites":["authentication/service","create"],"updatePoint":{"line":167,"column":49},"line":167,"code":"    it('errors when no allowed strategies are set', async () => {\n      const service = app.service('authentication')\n      const configuration = service.configuration\n\n      delete configuration.authStrategies\n\n      app.set('authentication', configuration)\n\n      try {\n        await service.create({\n          strategy: 'first',\n          username: 'Dave'\n        })\n        assert.fail('Should never get here')\n      } catch (error: any) {\n        assert.strictEqual(error.name, 'NotAuthenticated')\n        assert.strictEqual(\n          error.message,\n          'No authentication strategies allowed for creating a JWT (`authStrategies`)'\n        )\n      }\n    })","file":"service.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"can remove with authentication strategy set","suites":["authentication/service","remove"],"updatePoint":{"line":192,"column":51},"line":192,"code":"    it('can remove with authentication strategy set', async () => {\n      const authResult = await app.service('authentication').remove(null, {\n        authentication: {\n          strategy: 'first',\n          username: 'David'\n        }\n      })\n\n      assert.deepStrictEqual(authResult, Strategy1.result)\n    })","file":"service.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"passes when id is set and matches accessToken","suites":["authentication/service","remove"],"updatePoint":{"line":203,"column":53},"line":203,"code":"    it('passes when id is set and matches accessToken', async () => {\n      const authResult = await app.service('authentication').remove('test', {\n        authentication: {\n          strategy: 'first',\n          username: 'David',\n          accessToken: 'test'\n        }\n      })\n\n      assert.deepStrictEqual(authResult, Strategy1.result)\n    })","file":"service.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"fails when id is set and does not match accessToken","suites":["authentication/service","remove"],"updatePoint":{"line":215,"column":59},"line":215,"code":"    it('fails when id is set and does not match accessToken', async () => {\n      await assert.rejects(\n        () =>\n          app.service('authentication').remove('test', {\n            authentication: {\n              strategy: 'first',\n              username: 'David',\n              accessToken: 'testing'\n            }\n          }),\n        {\n          name: 'NotAuthenticated',\n          message: 'Invalid access token'\n        }\n      )\n    })","file":"service.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"errors when trying to remove with nothing","suites":["authentication/service","remove"],"updatePoint":{"line":232,"column":49},"line":232,"code":"    it('errors when trying to remove with nothing', async () => {\n      try {\n        await app.service('authentication').remove(null)\n        assert.fail('Should never get here')\n      } catch (error: any) {\n        assert.strictEqual(error.message, 'Invalid authentication information (no `strategy` set)')\n      }\n    })","file":"service.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"errors when there is no secret","suites":["authentication/service","setup"],"updatePoint":{"line":243,"column":38},"line":243,"code":"    it('errors when there is no secret', async () => {\n      delete app.get('authentication').secret\n\n      await assert.rejects(() => app.setup(), {\n        message: \"A 'secret' must be provided in your authentication configuration\"\n      })\n    })","file":"service.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"throws an error if service name is not set","suites":["authentication/service","setup"],"updatePoint":{"line":251,"column":50},"line":251,"code":"    it('throws an error if service name is not set', async () => {\n      const otherApp = feathers()\n\n      otherApp.use(\n        '/authentication',\n        new AuthenticationService(otherApp, 'authentication', {\n          secret: 'supersecret',\n          authStrategies: ['first']\n        })\n      )\n\n      await assert.rejects(() => otherApp.setup(), {\n        message: \"The 'service' option is not set in the authentication configuration\"\n      })\n    })","file":"service.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"throws an error if entity service does not exist","suites":["authentication/service","setup"],"updatePoint":{"line":267,"column":56},"line":267,"code":"    it('throws an error if entity service does not exist', async () => {\n      const otherApp = feathers()\n\n      otherApp.use(\n        '/authentication',\n        new AuthenticationService(otherApp, 'authentication', {\n          entity: 'user',\n          service: 'users',\n          secret: 'supersecret',\n          authStrategies: ['first']\n        })\n      )\n\n      await assert.rejects(() => otherApp.setup(), {\n        message: \"Can not find service 'users'\"\n      })\n    })","file":"service.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"throws an error if entity service exists but has no `id`","suites":["authentication/service","setup"],"updatePoint":{"line":285,"column":64},"line":285,"code":"    it('throws an error if entity service exists but has no `id`', async () => {\n      const otherApp = feathers()\n\n      otherApp.use(\n        '/authentication',\n        new AuthenticationService(otherApp, 'authentication', {\n          entity: 'user',\n          service: 'users',\n          secret: 'supersecret',\n          strategies: ['first']\n        })\n      )\n\n      otherApp.use('/users', {\n        async get() {\n          return {}\n        }\n      })\n\n      await assert.rejects(() => otherApp.setup(), {\n        message: \"The 'users' service does not have an 'id' property and no 'entityId' option is set.\"\n      })\n    })","file":"service.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"passes when entity service exists and `entityId` property is set","suites":["authentication/service","setup"],"updatePoint":{"line":309,"column":72},"line":309,"code":"    it('passes when entity service exists and `entityId` property is set', () => {\n      app.get('authentication').entityId = 'id'\n      app.use('users', memory())\n\n      app.setup()\n    })","file":"service.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"does nothing when `entity` is explicitly `null`","suites":["authentication/service","setup"],"updatePoint":{"line":316,"column":55},"line":316,"code":"    it('does nothing when `entity` is explicitly `null`', () => {\n      app.get('authentication').entity = null\n\n      app.setup()\n    })","file":"service.test.ts","skipped":false,"dir":"packages/authentication/test"},{"name":"default debug does nothing","suites":["debug"],"updatePoint":{"line":7,"column":32},"line":7,"code":"  it('default debug does nothing', () => {\n    assert.equal(myDebug('hi', 'there'), undefined)\n  })","file":"debug.test.ts","skipped":false,"dir":"packages/commons/test"},{"name":"can set custom debug later","suites":["debug"],"updatePoint":{"line":11,"column":32},"line":11,"code":"  it('can set custom debug later', () => {\n    let call\n\n    const customDebug =\n      (name: string) =>\n      (...args: any[]) => {\n        call = [name].concat(args)\n      }\n\n    setDebug(customDebug)\n\n    assert.equal(myDebug('hi', 'there'), undefined)\n    assert.deepEqual(call, ['hello test', 'hi', 'there'])\n\n    const newDebug = createDebug('other test')\n\n    assert.equal(newDebug('other', 'there'), undefined)\n    assert.deepEqual(call, ['other test', 'other', 'there'])\n\n    setDebug(noopDebug)\n  })","file":"debug.test.ts","skipped":false,"dir":"packages/commons/test"},{"name":"is commonjs compatible","suites":["module"],"updatePoint":{"line":5,"column":28},"line":5,"code":"  it('is commonjs compatible', () => {\n    // eslint-disable-next-line\n    const commons = require('../lib')\n\n    assert.equal(typeof commons, 'object')\n    assert.equal(typeof commons.stripSlashes, 'function')\n    assert.equal(typeof commons._, 'object')\n  })","file":"module.test.ts","skipped":false,"dir":"packages/commons/test"},{"name":"exposes lodash methods under _","suites":["module"],"updatePoint":{"line":14,"column":36},"line":14,"code":"  it('exposes lodash methods under _', () => {\n    assert.equal(typeof _.each, 'function')\n    assert.equal(typeof _.some, 'function')\n    assert.equal(typeof _.every, 'function')\n    assert.equal(typeof _.keys, 'function')\n    assert.equal(typeof _.values, 'function')\n    assert.equal(typeof _.isMatch, 'function')\n    assert.equal(typeof _.isEmpty, 'function')\n    assert.equal(typeof _.isObject, 'function')\n    assert.equal(typeof _.extend, 'function')\n    assert.equal(typeof _.omit, 'function')\n    assert.equal(typeof _.pick, 'function')\n    assert.equal(typeof _.merge, 'function')\n  })","file":"module.test.ts","skipped":false,"dir":"packages/commons/test"},{"name":"stripSlashes","suites":["@feathersjs/commons utils"],"updatePoint":{"line":6,"column":18},"line":6,"code":"  it('stripSlashes', () => {\n    assert.equal(stripSlashes('some/thing'), 'some/thing')\n    assert.equal(stripSlashes('/some/thing'), 'some/thing')\n    assert.equal(stripSlashes('some/thing/'), 'some/thing')\n    assert.equal(stripSlashes('/some/thing/'), 'some/thing')\n    assert.equal(stripSlashes('//some/thing/'), 'some/thing')\n    assert.equal(stripSlashes('//some//thing////'), 'some//thing')\n  })","file":"utils.test.ts","skipped":false,"dir":"packages/commons/test"},{"name":"isPromise","suites":["@feathersjs/commons utils"],"updatePoint":{"line":15,"column":15},"line":15,"code":"  it('isPromise', () => {\n    assert.equal(isPromise(Promise.resolve()), true)\n    assert.ok(\n      isPromise({\n        then() {\n          return true\n        }\n      })\n    )\n    assert.equal(isPromise(null), false)\n  })","file":"utils.test.ts","skipped":false,"dir":"packages/commons/test"},{"name":"createSymbol","suites":["@feathersjs/commons utils"],"updatePoint":{"line":27,"column":18},"line":27,"code":"  it('createSymbol', () => {\n    assert.equal(typeof createSymbol('a test'), 'symbol')\n  })","file":"utils.test.ts","skipped":false,"dir":"packages/commons/test"},{"name":"isObject","suites":["@feathersjs/commons utils","_"],"updatePoint":{"line":32,"column":16},"line":32,"code":"    it('isObject', () => {\n      assert.equal(_.isObject({}), true)\n      assert.equal(_.isObject([]), false)\n      assert.equal(_.isObject(null), false)\n    })","file":"utils.test.ts","skipped":false,"dir":"packages/commons/test"},{"name":"isObjectOrArray","suites":["@feathersjs/commons utils","_"],"updatePoint":{"line":38,"column":23},"line":38,"code":"    it('isObjectOrArray', () => {\n      assert.equal(_.isObjectOrArray({}), true)\n      assert.equal(_.isObjectOrArray([]), true)\n      assert.equal(_.isObjectOrArray(null), false)\n    })","file":"utils.test.ts","skipped":false,"dir":"packages/commons/test"},{"name":"each","suites":["@feathersjs/commons utils","_"],"updatePoint":{"line":44,"column":12},"line":44,"code":"    it('each', () => {\n      _.each({ hi: 'there' }, (value, key) => {\n        assert.equal(key, 'hi')\n        assert.equal(value, 'there')\n      })\n\n      _.each(['hi'], (value, key) => {\n        assert.equal(key, 0)\n        assert.equal(value, 'hi')\n      })\n\n      _.each('moo', () => assert.fail('Should never get here'))\n    })","file":"utils.test.ts","skipped":false,"dir":"packages/commons/test"},{"name":"some","suites":["@feathersjs/commons utils","_"],"updatePoint":{"line":58,"column":12},"line":58,"code":"    it('some', () => {\n      assert.ok(_.some(['a', 'b'], (current) => current === 'a'))\n      assert.ok(!_.some(['a', 'b'], (current) => current === 'c'))\n    })","file":"utils.test.ts","skipped":false,"dir":"packages/commons/test"},{"name":"every","suites":["@feathersjs/commons utils","_"],"updatePoint":{"line":63,"column":13},"line":63,"code":"    it('every', () => {\n      assert.ok(_.every(['a', 'a'], (current) => current === 'a'))\n      assert.ok(!_.every(['a', 'b'], (current) => current === 'a'))\n    })","file":"utils.test.ts","skipped":false,"dir":"packages/commons/test"},{"name":"keys","suites":["@feathersjs/commons utils","_"],"updatePoint":{"line":68,"column":12},"line":68,"code":"    it('keys', () => {\n      const data = { hi: 'there', name: 'David' }\n      assert.deepEqual(_.keys(data), ['hi', 'name'])\n    })","file":"utils.test.ts","skipped":false,"dir":"packages/commons/test"},{"name":"values","suites":["@feathersjs/commons utils","_"],"updatePoint":{"line":73,"column":14},"line":73,"code":"    it('values', () => {\n      const data = { hi: 'there', name: 'David' }\n      assert.deepEqual(_.values(data), ['there', 'David'])\n    })","file":"utils.test.ts","skipped":false,"dir":"packages/commons/test"},{"name":"isMatch","suites":["@feathersjs/commons utils","_"],"updatePoint":{"line":78,"column":15},"line":78,"code":"    it('isMatch', () => {\n      assert.ok(\n        _.isMatch(\n          {\n            test: 'me',\n            hi: 'you',\n            more: true\n          },\n          {\n            test: 'me',\n            hi: 'you'\n          }\n        )\n      )\n\n      assert.ok(\n        !_.isMatch(\n          {\n            test: 'me',\n            hi: 'you',\n            more: true\n          },\n          {\n            test: 'me',\n            hi: 'there'\n          }\n        )\n      )\n    })","file":"utils.test.ts","skipped":false,"dir":"packages/commons/test"},{"name":"isEmpty","suites":["@feathersjs/commons utils","_"],"updatePoint":{"line":108,"column":15},"line":108,"code":"    it('isEmpty', () => {\n      assert.ok(_.isEmpty({}))\n      assert.ok(!_.isEmpty({ name: 'David' }))\n    })","file":"utils.test.ts","skipped":false,"dir":"packages/commons/test"},{"name":"extend","suites":["@feathersjs/commons utils","_"],"updatePoint":{"line":113,"column":14},"line":113,"code":"    it('extend', () => {\n      assert.deepEqual(_.extend({ hi: 'there' }, { name: 'david' }), {\n        hi: 'there',\n        name: 'david'\n      })\n    })","file":"utils.test.ts","skipped":false,"dir":"packages/commons/test"},{"name":"omit","suites":["@feathersjs/commons utils","_"],"updatePoint":{"line":120,"column":12},"line":120,"code":"    it('omit', () => {\n      assert.deepEqual(\n        _.omit(\n          {\n            name: 'David',\n            first: 1,\n            second: 2\n          },\n          'first',\n          'second'\n        ),\n        {\n          name: 'David'\n        }\n      )\n    })","file":"utils.test.ts","skipped":false,"dir":"packages/commons/test"},{"name":"pick","suites":["@feathersjs/commons utils","_"],"updatePoint":{"line":137,"column":12},"line":137,"code":"    it('pick', () => {\n      assert.deepEqual(\n        _.pick(\n          {\n            name: 'David',\n            first: 1,\n            second: 2\n          },\n          'first',\n          'second'\n        ),\n        {\n          first: 1,\n          second: 2\n        }\n      )\n\n      assert.deepEqual(\n        _.pick(\n          {\n            name: 'David',\n            first: 1\n          },\n          'first',\n          'second'\n        ),\n        {\n          first: 1\n        }\n      )\n    })","file":"utils.test.ts","skipped":false,"dir":"packages/commons/test"},{"name":"merge","suites":["@feathersjs/commons utils","_"],"updatePoint":{"line":169,"column":13},"line":169,"code":"    it('merge', () => {\n      assert.deepEqual(_.merge({ hi: 'there' }, { name: 'david' }), {\n        hi: 'there',\n        name: 'david'\n      })\n\n      assert.deepEqual(\n        _.merge(\n          {},\n          {\n            name: 'david',\n            nested: { obj: true }\n          }\n        ),\n        {\n          name: 'david',\n          nested: { obj: true }\n        }\n      )\n\n      assert.deepEqual(_.merge({ name: 'david' }, {}), {\n        name: 'david'\n      })\n\n      assert.deepEqual(\n        _.merge(\n          {\n            hi: 'there',\n            my: {\n              name: { is: 'david' },\n              number: { is: 1 }\n            }\n          },\n          { my: { name: { is: 'eric' } } }\n        ),\n        {\n          hi: 'there',\n          my: {\n            number: { is: 1 },\n            name: { is: 'eric' }\n          }\n        }\n      )\n\n      assert.equal(_.merge('hello', {}), 'hello')\n    })","file":"utils.test.ts","skipped":false,"dir":"packages/commons/test"},{"name":"initialized app with default.json","suites":["@feathersjs/configuration"],"updatePoint":{"line":9,"column":39},"line":9,"code":"  it('initialized app with default.json', () => {\n    assert.equal(app.get('port'), 3030)\n    assert.deepEqual(app.get('array'), ['one', 'two', 'three'])\n    assert.deepEqual(app.get('deep'), { base: false })\n    assert.deepEqual(app.get('nullish'), null)\n  })","file":"index.test.ts","skipped":false,"dir":"packages/configuration/test"},{"name":"works when called directly","suites":["@feathersjs/configuration"],"updatePoint":{"line":16,"column":32},"line":16,"code":"  it('works when called directly', () => {\n    const fn = configuration()\n    const conf = fn() as any\n\n    assert.strictEqual(conf.port, 3030)\n  })","file":"index.test.ts","skipped":false,"dir":"packages/configuration/test"},{"name":"errors on .setup when a schema is passed and the configuration is invalid","suites":["@feathersjs/configuration"],"updatePoint":{"line":23,"column":79},"line":23,"code":"  it('errors on .setup when a schema is passed and the configuration is invalid', async () => {\n    const configurationSchema = schema(\n      {\n        $id: 'ConfigurationSchema',\n        additionalProperties: false,\n        type: 'object',\n        properties: {\n          port: { type: 'number' },\n          deep: {\n            type: 'object',\n            properties: {\n              base: {\n                type: 'boolean'\n              }\n            }\n          },\n          array: {\n            type: 'array',\n            items: { type: 'string' }\n          },\n          nullish: {\n            type: 'string'\n          }\n        }\n      } as const,\n      new Ajv()\n    )\n\n    const schemaApp = feathers().configure(configuration(configurationSchema))\n\n    await assert.rejects(() => schemaApp.setup(), {\n      data: [\n        {\n          instancePath: '/nullish',\n          keyword: 'type',\n          message: 'must be string',\n          params: {\n            type: 'string'\n          },\n          schemaPath: '#/properties/nullish/type'\n        }\n      ]\n    })\n  })","file":"index.test.ts","skipped":false,"dir":"packages/configuration/test"},{"name":"converts objects to feathers errors","suites":["@feathersjs/errors","errors.convert"],"updatePoint":{"line":8,"column":43},"line":8,"code":"    it('converts objects to feathers errors', () => {\n      const error = convert({\n        name: 'BadRequest',\n        message: 'Hi',\n        expando: 'Me'\n      })\n\n      assert.strictEqual(error.message, 'Hi')\n      assert.strictEqual(error.expando, 'Me')\n      assert.ok(error instanceof errors.BadRequest)\n    })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"converts other object to error","suites":["@feathersjs/errors","errors.convert"],"updatePoint":{"line":20,"column":38},"line":20,"code":"    it('converts other object to error', () => {\n      let error = convert({\n        message: 'Something went wrong'\n      })\n\n      assert.ok(error instanceof Error)\n      assert.strictEqual(error.message, 'Something went wrong')\n\n      error = convert('Something went wrong')\n\n      assert.ok(error instanceof Error)\n      assert.strictEqual(error.message, 'Something went wrong')\n    })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"converts nothing","suites":["@feathersjs/errors","errors.convert"],"updatePoint":{"line":34,"column":24},"line":34,"code":"    it('converts nothing', () => assert.strictEqual(convert(null), null))","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"Bad Request","suites":["@feathersjs/errors","error types"],"updatePoint":{"line":38,"column":19},"line":38,"code":"    it('Bad Request', () => {\n      assert.notStrictEqual(typeof errors.BadRequest, 'undefined', 'has BadRequest')\n    })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"Not Authenticated","suites":["@feathersjs/errors","error types"],"updatePoint":{"line":42,"column":25},"line":42,"code":"    it('Not Authenticated', () => {\n      assert.notStrictEqual(typeof errors.NotAuthenticated, 'undefined', 'has NotAuthenticated')\n    })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"Payment Error","suites":["@feathersjs/errors","error types"],"updatePoint":{"line":46,"column":21},"line":46,"code":"    it('Payment Error', () => {\n      assert.notStrictEqual(typeof errors.PaymentError, 'undefined', 'has PaymentError')\n    })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"Forbidden","suites":["@feathersjs/errors","error types"],"updatePoint":{"line":50,"column":17},"line":50,"code":"    it('Forbidden', () => {\n      assert.notStrictEqual(typeof errors.Forbidden, 'undefined', 'has Forbidden')\n    })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"Not Found","suites":["@feathersjs/errors","error types"],"updatePoint":{"line":54,"column":17},"line":54,"code":"    it('Not Found', () => {\n      assert.notStrictEqual(typeof errors.NotFound, 'undefined', 'has NotFound')\n    })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"Method Not Allowed","suites":["@feathersjs/errors","error types"],"updatePoint":{"line":58,"column":26},"line":58,"code":"    it('Method Not Allowed', () => {\n      assert.notStrictEqual(typeof errors.MethodNotAllowed, 'undefined', 'has MethodNotAllowed')\n    })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"Not Acceptable","suites":["@feathersjs/errors","error types"],"updatePoint":{"line":62,"column":22},"line":62,"code":"    it('Not Acceptable', () => {\n      assert.notStrictEqual(typeof errors.NotAcceptable, 'undefined', 'has NotAcceptable')\n    })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"Timeout","suites":["@feathersjs/errors","error types"],"updatePoint":{"line":66,"column":15},"line":66,"code":"    it('Timeout', () => {\n      assert.notStrictEqual(typeof errors.Timeout, 'undefined', 'has Timeout')\n    })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"Conflict","suites":["@feathersjs/errors","error types"],"updatePoint":{"line":70,"column":16},"line":70,"code":"    it('Conflict', () => {\n      assert.notStrictEqual(typeof errors.Conflict, 'undefined', 'has Conflict')\n    })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"Gone","suites":["@feathersjs/errors","error types"],"updatePoint":{"line":74,"column":12},"line":74,"code":"    it('Gone', () => {\n      assert.notStrictEqual(typeof errors.Gone, 'undefined', 'has Gone')\n    })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"Length Required","suites":["@feathersjs/errors","error types"],"updatePoint":{"line":78,"column":23},"line":78,"code":"    it('Length Required', () => {\n      assert.notStrictEqual(typeof errors.LengthRequired, 'undefined', 'has LengthRequired')\n    })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"Unprocessable","suites":["@feathersjs/errors","error types"],"updatePoint":{"line":82,"column":21},"line":82,"code":"    it('Unprocessable', () => {\n      assert.notStrictEqual(typeof errors.Unprocessable, 'undefined', 'has Unprocessable')\n    })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"Too Many Requests","suites":["@feathersjs/errors","error types"],"updatePoint":{"line":86,"column":25},"line":86,"code":"    it('Too Many Requests', () => {\n      assert.notStrictEqual(typeof errors.TooManyRequests, 'undefined', 'has TooManyRequests')\n    })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"General Error","suites":["@feathersjs/errors","error types"],"updatePoint":{"line":90,"column":21},"line":90,"code":"    it('General Error', () => {\n      assert.notStrictEqual(typeof errors.GeneralError, 'undefined', 'has GeneralError')\n    })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"Not Implemented","suites":["@feathersjs/errors","error types"],"updatePoint":{"line":94,"column":23},"line":94,"code":"    it('Not Implemented', () => {\n      assert.notStrictEqual(typeof errors.NotImplemented, 'undefined', 'has NotImplemented')\n    })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"Bad Gateway","suites":["@feathersjs/errors","error types"],"updatePoint":{"line":98,"column":19},"line":98,"code":"    it('Bad Gateway', () => {\n      assert.notStrictEqual(typeof errors.BadGateway, 'undefined', 'has BadGateway')\n    })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"Unavailable","suites":["@feathersjs/errors","error types"],"updatePoint":{"line":102,"column":19},"line":102,"code":"    it('Unavailable', () => {\n      assert.notStrictEqual(typeof errors.Unavailable, 'undefined', 'has Unavailable')\n    })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"400","suites":["@feathersjs/errors","error types"],"updatePoint":{"line":106,"column":11},"line":106,"code":"    it('400', () => {\n      assert.notStrictEqual(typeof errors.errors[400], 'undefined', 'has BadRequest alias')\n    })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"401","suites":["@feathersjs/errors","error types"],"updatePoint":{"line":110,"column":11},"line":110,"code":"    it('401', () => {\n      assert.notStrictEqual(typeof errors.errors[401], 'undefined', 'has NotAuthenticated alias')\n    })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"402","suites":["@feathersjs/errors","error types"],"updatePoint":{"line":114,"column":11},"line":114,"code":"    it('402', () => {\n      assert.notStrictEqual(typeof errors.errors[402], 'undefined', 'has PaymentError alias')\n    })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"403","suites":["@feathersjs/errors","error types"],"updatePoint":{"line":118,"column":11},"line":118,"code":"    it('403', () => {\n      assert.notStrictEqual(typeof errors.errors[403], 'undefined', 'has Forbidden alias')\n    })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"404","suites":["@feathersjs/errors","error types"],"updatePoint":{"line":122,"column":11},"line":122,"code":"    it('404', () => {\n      assert.notStrictEqual(typeof errors.errors[404], 'undefined', 'has NotFound alias')\n    })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"405","suites":["@feathersjs/errors","error types"],"updatePoint":{"line":126,"column":11},"line":126,"code":"    it('405', () => {\n      assert.notStrictEqual(typeof errors.errors[405], 'undefined', 'has MethodNotAllowed alias')\n    })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"406","suites":["@feathersjs/errors","error types"],"updatePoint":{"line":130,"column":11},"line":130,"code":"    it('406', () => {\n      assert.notStrictEqual(typeof errors.errors[406], 'undefined', 'has NotAcceptable alias')\n    })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"408","suites":["@feathersjs/errors","error types"],"updatePoint":{"line":134,"column":11},"line":134,"code":"    it('408', () => {\n      assert.notStrictEqual(typeof errors.errors[408], 'undefined', 'has Timeout alias')\n    })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"409","suites":["@feathersjs/errors","error types"],"updatePoint":{"line":138,"column":11},"line":138,"code":"    it('409', () => {\n      assert.notStrictEqual(typeof errors.errors[409], 'undefined', 'has Conflict alias')\n    })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"410","suites":["@feathersjs/errors","error types"],"updatePoint":{"line":142,"column":11},"line":142,"code":"    it('410', () => {\n      assert.notStrictEqual(typeof errors.errors[410], 'undefined', 'has Gone alias')\n    })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"411","suites":["@feathersjs/errors","error types"],"updatePoint":{"line":146,"column":11},"line":146,"code":"    it('411', () => {\n      assert.notStrictEqual(typeof errors.errors[411], 'undefined', 'has LengthRequired alias')\n    })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"422","suites":["@feathersjs/errors","error types"],"updatePoint":{"line":150,"column":11},"line":150,"code":"    it('422', () => {\n      assert.notStrictEqual(typeof errors.errors[422], 'undefined', 'has Unprocessable alias')\n    })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"429","suites":["@feathersjs/errors","error types"],"updatePoint":{"line":154,"column":11},"line":154,"code":"    it('429', () => {\n      assert.notStrictEqual(typeof errors.errors[429], 'undefined', 'has TooManyRequests alias')\n    })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"500","suites":["@feathersjs/errors","error types"],"updatePoint":{"line":158,"column":11},"line":158,"code":"    it('500', () => {\n      assert.notStrictEqual(typeof errors.errors[500], 'undefined', 'has GeneralError alias')\n    })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"501","suites":["@feathersjs/errors","error types"],"updatePoint":{"line":162,"column":11},"line":162,"code":"    it('501', () => {\n      assert.notStrictEqual(typeof errors.errors[501], 'undefined', 'has NotImplemented alias')\n    })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"502","suites":["@feathersjs/errors","error types"],"updatePoint":{"line":166,"column":11},"line":166,"code":"    it('502', () => {\n      assert.notStrictEqual(typeof errors.errors[502], 'undefined', 'has BadGateway alias')\n    })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"503","suites":["@feathersjs/errors","error types"],"updatePoint":{"line":170,"column":11},"line":170,"code":"    it('503', () => {\n      assert.notStrictEqual(typeof errors.errors[503], 'undefined', 'has Unavailable alias')\n    })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"instantiates every error","suites":["@feathersjs/errors","error types"],"updatePoint":{"line":174,"column":32},"line":174,"code":"    it('instantiates every error', () => {\n      const index: any = errors.errors\n\n      Object.keys(index).forEach((name) => {\n        const E = index[name]\n\n        if (E) {\n          // tslint:disable-next-line\n          new E('Something went wrong')\n        }\n      })\n    })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"instanceof differentiates between error types","suites":["@feathersjs/errors","inheritance"],"updatePoint":{"line":189,"column":53},"line":189,"code":"    it('instanceof differentiates between error types', () => {\n      const error = new errors.MethodNotAllowed()\n      assert.ok(!(error instanceof errors.BadRequest))\n    })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"follows the prototypical inheritance chain","suites":["@feathersjs/errors","inheritance"],"updatePoint":{"line":194,"column":50},"line":194,"code":"    it('follows the prototypical inheritance chain', () => {\n      const error = new errors.MethodNotAllowed()\n      assert.ok(error instanceof Error)\n      assert.ok(error instanceof errors.FeathersError)\n    })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"has the correct constructors","suites":["@feathersjs/errors","inheritance"],"updatePoint":{"line":200,"column":36},"line":200,"code":"    it('has the correct constructors', () => {\n      const error = new errors.NotFound()\n      assert.ok(error.constructor === errors.NotFound)\n      assert.ok(error.constructor.name === 'NotFound')\n    })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"default error","suites":["@feathersjs/errors","successful error creation","without custom message"],"updatePoint":{"line":209,"column":23},"line":209,"code":"      it('default error', () => {\n        const error = new errors.GeneralError()\n        assert.strictEqual(error.code, 500)\n        assert.strictEqual(error.className, 'general-error')\n        assert.strictEqual(error.message, 'Error')\n        assert.strictEqual(error.data, undefined)\n        assert.strictEqual(error.errors, undefined)\n        assert.notStrictEqual(error.stack, undefined)\n        assert.strictEqual(error instanceof errors.GeneralError, true)\n        assert.strictEqual(error instanceof errors.FeathersError, true)\n      })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"can wrap an existing error","suites":["@feathersjs/errors","successful error creation","without custom message"],"updatePoint":{"line":221,"column":36},"line":221,"code":"      it('can wrap an existing error', () => {\n        const error = new errors.BadRequest(new Error())\n        assert.strictEqual(error.code, 400)\n        assert.strictEqual(error.message, 'Error')\n      })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"with multiple errors","suites":["@feathersjs/errors","successful error creation","without custom message"],"updatePoint":{"line":227,"column":30},"line":227,"code":"      it('with multiple errors', () => {\n        const data = {\n          errors: {\n            email: 'Email Taken',\n            password: 'Invalid Password'\n          },\n          foo: 'bar'\n        }\n\n        const error = new errors.BadRequest(data)\n        assert.strictEqual(error.code, 400)\n        assert.strictEqual(error.message, 'Error')\n        assert.deepStrictEqual(error.errors, {\n          email: 'Email Taken',\n          password: 'Invalid Password'\n        })\n        assert.deepStrictEqual(error.data, { foo: 'bar' })\n      })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"with data","suites":["@feathersjs/errors","successful error creation","without custom message"],"updatePoint":{"line":246,"column":19},"line":246,"code":"      it('with data', () => {\n        const data = {\n          email: 'Email Taken',\n          password: 'Invalid Password'\n        }\n\n        const error = new errors.GeneralError(data)\n        assert.strictEqual(error.code, 500)\n        assert.strictEqual(error.message, 'Error')\n        assert.deepStrictEqual(error.data, data)\n      })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"contains our message","suites":["@feathersjs/errors","successful error creation","with custom message"],"updatePoint":{"line":260,"column":30},"line":260,"code":"      it('contains our message', () => {\n        const error = new errors.BadRequest('Invalid Password')\n        assert.strictEqual(error.code, 400)\n        assert.strictEqual(error.message, 'Invalid Password')\n      })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"can wrap an existing error","suites":["@feathersjs/errors","successful error creation","with custom message"],"updatePoint":{"line":266,"column":36},"line":266,"code":"      it('can wrap an existing error', () => {\n        const error = new errors.BadRequest(new Error('Invalid Password'))\n        assert.strictEqual(error.code, 400)\n        assert.strictEqual(error.message, 'Invalid Password')\n      })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"with data","suites":["@feathersjs/errors","successful error creation","with custom message"],"updatePoint":{"line":272,"column":19},"line":272,"code":"      it('with data', () => {\n        const data = {\n          email: 'Email Taken',\n          password: 'Invalid Password'\n        }\n\n        const error = new errors.GeneralError('Custom Error', data)\n        assert.strictEqual(error.code, 500)\n        assert.strictEqual(error.message, 'Custom Error')\n        assert.deepStrictEqual(error.data, data)\n      })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"with multiple errors","suites":["@feathersjs/errors","successful error creation","with custom message"],"updatePoint":{"line":284,"column":30},"line":284,"code":"      it('with multiple errors', () => {\n        const data = {\n          errors: {\n            email: 'Email Taken',\n            password: 'Invalid Password'\n          },\n          foo: 'bar'\n        }\n\n        const error = new errors.BadRequest(data)\n\n        assert.strictEqual(error.code, 400)\n        assert.strictEqual(error.message, 'Error')\n        assert.deepStrictEqual(error.errors, {\n          email: 'Email Taken',\n          password: 'Invalid Password'\n        })\n        assert.deepStrictEqual(error.data, { foo: 'bar' })\n      })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"can return JSON","suites":["@feathersjs/errors","successful error creation","with custom message"],"updatePoint":{"line":305,"column":23},"line":305,"code":"    it('can return JSON', () => {\n      const data = {\n        errors: {\n          email: 'Email Taken',\n          password: 'Invalid Password'\n        },\n        foo: 'bar'\n      }\n\n      const expected =\n        '{\"name\":\"GeneralError\",\"message\":\"Custom Error\",\"code\":500,\"className\":\"general-error\",\"data\":{\"foo\":\"bar\"},\"errors\":{\"email\":\"Email Taken\",\"password\":\"Invalid Password\"}}'\n\n      const error = new errors.GeneralError('Custom Error', data)\n      assert.strictEqual(JSON.stringify(error), expected)\n    })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"can handle immutable data","suites":["@feathersjs/errors","successful error creation","with custom message"],"updatePoint":{"line":321,"column":33},"line":321,"code":"    it('can handle immutable data', () => {\n      const data = {\n        errors: {\n          email: 'Email Taken',\n          password: 'Invalid Password'\n        },\n        foo: 'bar'\n      }\n\n      const error = new errors.GeneralError('Custom Error', Object.freeze(data))\n      assert.strictEqual(error.data.errors, undefined)\n      assert.deepStrictEqual(error.data, { foo: 'bar' })\n    })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"allows arrays as data","suites":["@feathersjs/errors","successful error creation","with custom message"],"updatePoint":{"line":335,"column":29},"line":335,"code":"    it('allows arrays as data', () => {\n      const data = [\n        {\n          hello: 'world'\n        }\n      ]\n\n      const error = new errors.GeneralError('Custom Error', data)\n      assert.strictEqual(error.data.errors, undefined)\n      assert.ok(Array.isArray(error.data))\n      assert.deepStrictEqual(error.data, [{ hello: 'world' }])\n    })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"can be instantiated with `null` (#2789)","suites":["@feathersjs/errors","successful error creation","with custom message"],"updatePoint":{"line":348,"column":47},"line":348,"code":"    it('can be instantiated with `null` (#2789)', () => {\n      const err = new errors.BadRequest(null, {})\n      assert.strictEqual(err.message, 'Error')\n    })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"has proper stack trace (#78)","suites":["@feathersjs/errors","successful error creation","with custom message"],"updatePoint":{"line":353,"column":36},"line":353,"code":"    it('has proper stack trace (#78)', () => {\n      try {\n        throw new errors.NotFound('Not the error you are looking for')\n      } catch (e: any) {\n        const text = 'NotFound: Not the error you are looking for'\n\n        assert.strictEqual(e.stack.indexOf(text), 0)\n\n        assert.ok(e.stack.indexOf('index.test.ts') !== -1)\n\n        const oldCST = Error.captureStackTrace\n\n        delete Error.captureStackTrace\n\n        try {\n          throw new errors.NotFound('Not the error you are looking for')\n        } catch (e: any) {\n          assert.ok(e)\n          Error.captureStackTrace = oldCST\n        }\n      }\n    })","file":"index.test.ts","skipped":false,"dir":"packages/errors/test"},{"name":"successful local authentication","suites":["@feathersjs/express/authentication","service authentication"],"updatePoint":{"line":67,"column":39},"line":67,"code":"    it('successful local authentication', () => {\n      assert.ok(authResult.accessToken)\n      assert.deepStrictEqual(omit(authResult.authentication, 'payload'), {\n        strategy: 'local'\n      })\n      assert.strictEqual(authResult.user.email, email)\n      assert.strictEqual(authResult.user.password, undefined)\n    })","file":"authentication.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"local authentication with wrong password fails","suites":["@feathersjs/express/authentication","service authentication"],"updatePoint":{"line":76,"column":54},"line":76,"code":"    it('local authentication with wrong password fails', async () => {\n      try {\n        await axios.post<any>('/authentication', {\n          strategy: 'local',\n          password: 'wrong',\n          email\n        })\n        assert.fail('Should never get here')\n      } catch (error: any) {\n        const { data } = error.response\n        assert.strictEqual(data.name, 'NotAuthenticated')\n        assert.strictEqual(data.message, 'Invalid login')\n      }\n    })","file":"authentication.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"authenticating with JWT works but returns same accessToken","suites":["@feathersjs/express/authentication","service authentication"],"updatePoint":{"line":91,"column":66},"line":91,"code":"    it('authenticating with JWT works but returns same accessToken', async () => {\n      const { accessToken } = authResult\n      const { data } = await axios.post<any>('/authentication', {\n        strategy: 'jwt',\n        accessToken\n      })\n\n      assert.strictEqual(data.accessToken, accessToken)\n      assert.strictEqual(data.authentication.strategy, 'jwt')\n      assert.strictEqual(data.authentication.payload.sub, user.id.toString())\n      assert.strictEqual(data.user.email, email)\n    })","file":"authentication.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"can make a protected request with Authorization header","suites":["@feathersjs/express/authentication","service authentication"],"updatePoint":{"line":104,"column":62},"line":104,"code":"    it('can make a protected request with Authorization header', async () => {\n      const { accessToken } = authResult\n\n      const {\n        data,\n        data: { params }\n      } = await axios.get<any>('/dummy/dave', {\n        headers: {\n          Authorization: accessToken\n        }\n      })\n\n      assert.strictEqual(data.id, 'dave')\n      assert.deepStrictEqual(params.user, user)\n      assert.strictEqual(params.authentication.accessToken, accessToken)\n    })","file":"authentication.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"errors when there are no authStrategies and parseStrategies","suites":["@feathersjs/express/authentication","service authentication"],"updatePoint":{"line":121,"column":67},"line":121,"code":"    it('errors when there are no authStrategies and parseStrategies', async () => {\n      const { accessToken } = authResult\n      app.get('authentication').authStrategies = []\n      delete app.get('authentication').parseStrategies\n\n      try {\n        await axios.get<any>('/dummy/dave', {\n          headers: {\n            Authorization: accessToken\n          }\n        })\n        assert.fail('Should never get here')\n      } catch (error: any) {\n        assert.strictEqual(error.response.data.name, 'NotAuthenticated')\n        app.get('authentication').authStrategies = ['jwt', 'local']\n      }\n    })","file":"authentication.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"can make a protected request with Authorization header and bearer scheme","suites":["@feathersjs/express/authentication","service authentication"],"updatePoint":{"line":139,"column":80},"line":139,"code":"    it('can make a protected request with Authorization header and bearer scheme', async () => {\n      const { accessToken } = authResult\n\n      const {\n        data,\n        data: { params }\n      } = await axios.get<any>('/dummy/dave', {\n        headers: {\n          Authorization: ` Bearer: ${accessToken}`\n        }\n      })\n\n      assert.strictEqual(data.id, 'dave')\n      assert.deepStrictEqual(params.user, user)\n      assert.strictEqual(params.authentication.accessToken, accessToken)\n    })","file":"authentication.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"errors without valid strategies","suites":["@feathersjs/express/authentication","authenticate middleware"],"updatePoint":{"line":158,"column":39},"line":158,"code":"    it('errors without valid strategies', () => {\n      try {\n        // @ts-ignore\n        authenticate()\n        assert.fail('Should never get here')\n      } catch (error: any) {\n        assert.strictEqual(error.message, 'The authenticate hook needs at least one allowed strategy')\n      }\n    })","file":"authentication.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"protected endpoint fails when JWT is not present","suites":["@feathersjs/express/authentication","authenticate middleware"],"updatePoint":{"line":168,"column":56},"line":168,"code":"    it('protected endpoint fails when JWT is not present', () => {\n      return axios\n        .get<any>('/protected')\n        .then(() => {\n          assert.fail('Should never get here')\n        })\n        .catch((error) => {\n          const { data } = error.response\n\n          assert.strictEqual(data.name, 'NotAuthenticated')\n          assert.strictEqual(data.message, 'Not authenticated')\n        })\n    })","file":"authentication.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"protected endpoint fails with invalid Authorization header","suites":["@feathersjs/express/authentication","authenticate middleware"],"line":182,"code":"    it.skip('protected endpoint fails with invalid Authorization header', async () => {","file":"authentication.test.ts","skipped":true,"dir":"packages/express/test"},{"name":"can request protected endpoint with JWT present","suites":["@feathersjs/express/authentication","authenticate middleware"],"updatePoint":{"line":198,"column":55},"line":198,"code":"    it('can request protected endpoint with JWT present', async () => {\n      const { data } = await axios.get<any>('/protected', {\n        headers: {\n          Authorization: `Bearer ${authResult.accessToken}`\n        }\n      })\n\n      assert.strictEqual(data.email, user.email)\n      assert.strictEqual(data.id, user.id)\n      assert.strictEqual(data.password, user.password)\n    })","file":"authentication.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"can send a custom response","suites":["error-handler","supports catch-all custom handlers","JSON handler"],"updatePoint":{"line":51,"column":36},"line":51,"code":"      it('can send a custom response', async () => {\n        try {\n          await axios(options)\n          assert.fail('Should never get here')\n        } catch (error: any) {\n          assert.deepEqual(error.response.data, {\n            name: 'GeneralError',\n            message: 'Something went wrong',\n            code: 500,\n            className: 'general-error'\n          })\n        }\n      })","file":"error-handler.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"if the value is a string, calls res.sendFile","suites":["error-handler","supports error-code specific custom handlers","HTML handler"],"updatePoint":{"line":84,"column":54},"line":84,"code":"      it('if the value is a string, calls res.sendFile', (done) => {\n        const err = new NotAuthenticated()\n        const middleware = errorHandler({\n          logger: null,\n          html: { 401: 'path/to/401.html' }\n        })\n        const res = makeRes(401, {\n          sendFile(f: any) {\n            assert.equal(f, 'path/to/401.html')\n            done()\n          }\n        })\n        ;(middleware as any)(err, req, res)\n      })","file":"error-handler.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"if the value is a function, calls as middleware ","suites":["error-handler","supports error-code specific custom handlers","HTML handler"],"updatePoint":{"line":99,"column":58},"line":99,"code":"      it('if the value is a function, calls as middleware ', (done) => {\n        const err = new PaymentError()\n        const res = makeRes(402)\n        const middleware = errorHandler({\n          logger: null,\n          html: {\n            402: (_err: any, _req: any, _res: any) => {\n              assert.equal(_err, err)\n              assert.equal(_req, req)\n              assert.equal(_res, res)\n              done()\n            }\n          }\n        })\n        ;(middleware as any)(err, req, res)\n      })","file":"error-handler.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"falls back to default if error code config is available","suites":["error-handler","supports error-code specific custom handlers","HTML handler"],"updatePoint":{"line":116,"column":65},"line":116,"code":"      it('falls back to default if error code config is available', (done) => {\n        const err = new NotAcceptable()\n        const res = makeRes(406)\n        const middleware = errorHandler({\n          logger: null,\n          html: {\n            default: (_err: any, _req: any, _res: any) => {\n              assert.equal(_err, err)\n              assert.equal(_req, req)\n              assert.equal(_res, res)\n              done()\n            }\n          }\n        })\n        ;(middleware as any)(err, req, res)\n      })","file":"error-handler.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"calls res.json by default","suites":["error-handler","supports error-code specific custom handlers","JSON handler"],"updatePoint":{"line":150,"column":35},"line":150,"code":"      it('calls res.json by default', (done) => {\n        const err = new NotAuthenticated()\n        const middleware = errorHandler({\n          logger: null,\n          json: {}\n        })\n        const res = makeRes(401, {\n          json(obj: any) {\n            assert.deepEqual(obj, err.toJSON())\n            done()\n          }\n        })\n        ;(middleware as any)(err, req, res)\n      })","file":"error-handler.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"if the value is a function, calls as middleware ","suites":["error-handler","supports error-code specific custom handlers","JSON handler"],"updatePoint":{"line":165,"column":58},"line":165,"code":"      it('if the value is a function, calls as middleware ', (done) => {\n        const err = new PaymentError()\n        const res = makeRes(402)\n        const middleware = errorHandler({\n          logger: null,\n          json: {\n            402: (_err: any, _req: any, _res: any) => {\n              assert.equal(_err, err)\n              assert.equal(_req, req)\n              assert.equal(_res, res)\n              done()\n            }\n          }\n        })\n        ;(middleware as any)(err, req, res)\n      })","file":"error-handler.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"falls back to default if error code config is available","suites":["error-handler","supports error-code specific custom handlers","JSON handler"],"updatePoint":{"line":182,"column":65},"line":182,"code":"      it('falls back to default if error code config is available', (done) => {\n        const err = new NotAcceptable()\n        const res = makeRes(406)\n        const middleware = errorHandler({\n          logger: null,\n          json: {\n            default: (_err: any, _req: any, _res: any) => {\n              assert.equal(_err, err)\n              assert.equal(_req, req)\n              assert.equal(_res, res)\n              done()\n            }\n          }\n        })\n        ;(middleware as any)(err, req, res)\n      })","file":"error-handler.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"is an instance of GeneralError","suites":["error-handler","use as app error handler","converts an non-feathers error"],"updatePoint":{"line":244,"column":40},"line":244,"code":"      it('is an instance of GeneralError', async () => {\n        try {\n          await axios({\n            url: 'http://localhost:5050/error',\n            responseType: 'json'\n          })\n          assert.fail('Should never get here')\n        } catch (error: any) {\n          assert.equal(error.response.status, 500)\n          assert.deepEqual(error.response.data, {\n            name: 'GeneralError',\n            message: 'Something went wrong',\n            code: 500,\n            className: 'general-error'\n          })\n        }\n      })","file":"error-handler.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"serves a 404.html","suites":["error-handler","use as app error handler","text/html format"],"updatePoint":{"line":264,"column":27},"line":264,"code":"      it('serves a 404.html', (done) => {\n        fs.readFile(join(__dirname, '..', 'public', '404.html'), async function (_err, html) {\n          try {\n            await axios({\n              url: 'http://localhost:5050/path/to/nowhere',\n              headers: {\n                'Content-Type': 'text/html',\n                Accept: 'text/html'\n              }\n            })\n            assert.fail('Should never get here')\n          } catch (error: any) {\n            assert.equal(error.response.status, 404)\n            assert.equal(error.response.data, html.toString())\n            done()\n          }\n        })\n      })","file":"error-handler.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"serves a 500.html","suites":["error-handler","use as app error handler","text/html format"],"updatePoint":{"line":283,"column":27},"line":283,"code":"      it('serves a 500.html', (done) => {\n        fs.readFile(join(__dirname, '..', 'public', 'default.html'), async function (_err, html) {\n          try {\n            await axios({\n              url: 'http://localhost:5050/error',\n              headers: {\n                'Content-Type': 'text/html',\n                Accept: 'text/html'\n              }\n            })\n            assert.fail('Should never get here')\n          } catch (error: any) {\n            assert.equal(error.response.status, 500)\n            assert.equal(error.response.data, html.toString())\n            done()\n          }\n        })\n      })","file":"error-handler.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"500","suites":["error-handler","use as app error handler","application/json format"],"updatePoint":{"line":304,"column":13},"line":304,"code":"      it('500', async () => {\n        try {\n          await axios({\n            url: 'http://localhost:5050/error',\n            headers: {\n              'Content-Type': 'application/json',\n              Accept: 'application/json'\n            }\n          })\n          assert.fail('Should never get here')\n        } catch (error: any) {\n          assert.equal(error.response.status, 500)\n          assert.deepEqual(error.response.data, {\n            name: 'GeneralError',\n            message: 'Something went wrong',\n            code: 500,\n            className: 'general-error'\n          })\n        }\n      })","file":"error-handler.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"404","suites":["error-handler","use as app error handler","application/json format"],"updatePoint":{"line":325,"column":13},"line":325,"code":"      it('404', async () => {\n        try {\n          await axios({\n            url: 'http://localhost:5050/path/to/nowhere',\n            headers: {\n              'Content-Type': 'application/json',\n              Accept: 'application/json'\n            }\n          })\n          assert.fail('Should never get here')\n        } catch (error: any) {\n          assert.equal(error.response.status, 404)\n          assert.deepEqual(error.response.data, {\n            name: 'NotFound',\n            message: 'File not found',\n            code: 404,\n            className: 'not-found'\n          })\n        }\n      })","file":"error-handler.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"400","suites":["error-handler","use as app error handler","application/json format"],"updatePoint":{"line":346,"column":13},"line":346,"code":"      it('400', async () => {\n        try {\n          await axios({\n            url: 'http://localhost:5050/bad-request',\n            headers: {\n              'Content-Type': 'application/json',\n              Accept: 'application/json'\n            }\n          })\n          assert.fail('Should never get here')\n        } catch (error: any) {\n          assert.equal(error.response.status, 400)\n          assert.deepEqual(error.response.data, {\n            name: 'BadRequest',\n            message: 'Invalid Password',\n            code: 400,\n            className: 'bad-request',\n            data: {},\n            errors: [\n              {\n                path: 'password',\n                value: null,\n                message: \"'password' cannot be 'null'\"\n              }\n            ]\n          })\n        }\n      })","file":"error-handler.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"returns JSON by default","suites":["error-handler","use as app error handler","application/json format"],"updatePoint":{"line":376,"column":31},"line":376,"code":"    it('returns JSON by default', async () => {\n      try {\n        await axios('http://localhost:5050/bad-request')\n        assert.fail('Should never get here')\n      } catch (error: any) {\n        assert.equal(error.response.status, 400)\n        assert.deepEqual(error.response.data, {\n          name: 'BadRequest',\n          message: 'Invalid Password',\n          code: 400,\n          className: 'bad-request',\n          data: {},\n          errors: [\n            {\n              path: 'password',\n              value: null,\n              message: \"'password' cannot be 'null'\"\n            }\n          ]\n        })\n      }\n    })","file":"error-handler.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"exports .default, .original .rest, .notFound and .errorHandler","suites":["@feathersjs/express"],"updatePoint":{"line":20,"column":68},"line":20,"code":"  it('exports .default, .original .rest, .notFound and .errorHandler', () => {\n    assert.strictEqual(original, express)\n    assert.strictEqual(typeof rest, 'function')\n    assert.ok(notFound)\n    assert.ok(errorHandler)\n  })","file":"index.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"returns an Express application, keeps Feathers service and configuration typings typings","suites":["@feathersjs/express"],"updatePoint":{"line":27,"column":94},"line":27,"code":"  it('returns an Express application, keeps Feathers service and configuration typings typings', () => {\n    type Config = {\n      hostname: string\n      port: number\n    }\n\n    const app = feathersExpress<Record<string, any>, Config>(feathers())\n\n    app.set('hostname', 'test.com')\n\n    const hostname = app.get('hostname')\n\n    assert.strictEqual(hostname, 'test.com')\n    assert.strictEqual(typeof app, 'function')\n  })","file":"index.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"allows to use an existing Express instance","suites":["@feathersjs/express"],"updatePoint":{"line":43,"column":48},"line":43,"code":"  it('allows to use an existing Express instance', () => {\n    const expressApp = express()\n    const app = feathersExpress(feathers(), expressApp)\n\n    assert.strictEqual(app, expressApp)\n  })","file":"index.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"exports `express.rest`","suites":["@feathersjs/express"],"updatePoint":{"line":50,"column":28},"line":50,"code":"  it('exports `express.rest`', () => {\n    assert.ok(typeof rest === 'function')\n  })","file":"index.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"returns a plain express app when no app is provided","suites":["@feathersjs/express"],"updatePoint":{"line":54,"column":57},"line":54,"code":"  it('returns a plain express app when no app is provided', () => {\n    const app = feathersExpress()\n\n    assert.strictEqual(typeof app.use, 'function')\n    assert.strictEqual(typeof app.service, 'undefined')\n    assert.strictEqual(typeof app.services, 'undefined')\n  })","file":"index.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"errors when app with wrong version is provided","suites":["@feathersjs/express"],"updatePoint":{"line":62,"column":52},"line":62,"code":"  it('errors when app with wrong version is provided', () => {\n    try {\n      // @ts-ignore\n      feathersExpress({})\n    } catch (e: any) {\n      assert.strictEqual(e.message, '@feathersjs/express requires a valid Feathers application instance')\n    }\n\n    try {\n      const app = feathers()\n      app.version = '2.9.9'\n\n      feathersExpress(app)\n    } catch (e: any) {\n      assert.strictEqual(\n        e.message,\n        '@feathersjs/express requires an instance of a Feathers application version 3.x or later (got 2.9.9)'\n      )\n    }\n\n    try {\n      const app = feathers()\n      delete app.version\n\n      feathersExpress(app)\n    } catch (e: any) {\n      assert.strictEqual(\n        e.message,\n        '@feathersjs/express requires an instance of a Feathers application version 3.x or later (got unknown)'\n      )\n    }\n  })","file":"index.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"Can use Express sub-apps","suites":["@feathersjs/express"],"updatePoint":{"line":95,"column":30},"line":95,"code":"  it('Can use Express sub-apps', () => {\n    const typedApp = feathers<Record<string, unknown>>()\n    const app = feathersExpress(typedApp)\n    const child = express()\n\n    app.use('/path', child)\n    assert.strictEqual((child as any).parent, app)\n  })","file":"index.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"Can use express.static","suites":["@feathersjs/express"],"updatePoint":{"line":104,"column":28},"line":104,"code":"  it('Can use express.static', () => {\n    const app = feathersExpress(feathers())\n\n    app.use('/path', serveStatic(__dirname))\n  })","file":"index.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"has Feathers functionality","suites":["@feathersjs/express"],"updatePoint":{"line":110,"column":32},"line":110,"code":"  it('has Feathers functionality', async () => {\n    const app = feathersExpress(feathers())\n\n    app.use('/myservice', service)\n\n    app.hooks({\n      after: {\n        get(hook: HookContext) {\n          hook.result.fromAppHook = true\n        }\n      }\n    })\n\n    app.service('myservice').hooks({\n      after: {\n        get(hook: HookContext) {\n          hook.result.fromHook = true\n        }\n      }\n    })\n\n    const data = await app.service('myservice').get(10)\n\n    assert.deepStrictEqual(data, {\n      id: 10,\n      fromHook: true,\n      fromAppHook: true\n    })\n  })","file":"index.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"can register a service and start an Express server","suites":["@feathersjs/express"],"updatePoint":{"line":140,"column":56},"line":140,"code":"  it('can register a service and start an Express server', async () => {\n    const app = feathersExpress(feathers())\n    const response = {\n      message: 'Hello world'\n    }\n\n    app.use('/myservice', service)\n    app.use((_req: Request, res: Response) => res.json(response))\n\n    const server = await app.listen(8787)\n    const data = await app.service('myservice').get(10)\n\n    assert.deepStrictEqual(data, { id: 10 })\n\n    const res = await axios.get<any>('http://localhost:8787')\n    assert.deepStrictEqual(res.data, response)\n\n    await new Promise((resolve) => server.close(() => resolve(server)))\n  })","file":"index.test.ts","skipped":false,"dir":"packages/express/test"},{"name":".listen calls .setup","suites":["@feathersjs/express"],"updatePoint":{"line":160,"column":26},"line":160,"code":"  it('.listen calls .setup', async () => {\n    const app = feathersExpress(feathers())\n    let called = false\n\n    app.use('/myservice', {\n      async get(id: Id) {\n        return { id }\n      },\n\n      async setup(appParam, path) {\n        assert.strictEqual(appParam, app)\n        assert.strictEqual(path, 'myservice')\n        called = true\n      }\n    })\n\n    const server = await app.listen(8787)\n\n    assert.ok(called)\n    await new Promise((resolve) => server.close(() => resolve(server)))\n  })","file":"index.test.ts","skipped":false,"dir":"packages/express/test"},{"name":".teardown closes http server","suites":["@feathersjs/express"],"updatePoint":{"line":182,"column":34},"line":182,"code":"  it('.teardown closes http server', async () => {\n    const app = feathersExpress(feathers())\n    let called = false\n\n    const server = await app.listen(8787)\n    server.on('close', () => {\n      called = true\n    })\n\n    await app.teardown()\n    assert.ok(called)\n  })","file":"index.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"passes middleware as options","suites":["@feathersjs/express"],"updatePoint":{"line":195,"column":34},"line":195,"code":"  it('passes middleware as options', () => {\n    const feathersApp = feathers()\n    const app = feathersExpress(feathersApp)\n    const oldUse = feathersApp.use\n    const a = (_req: Request, _res: Response, next: NextFunction) => next()\n    const b = (_req: Request, _res: Response, next: NextFunction) => next()\n    const c = (_req: Request, _res: Response, next: NextFunction) => next()\n    const service = {\n      async get(id: Id) {\n        return { id }\n      }\n    }\n\n    feathersApp.use = function (path, serviceArg, options) {\n      assert.strictEqual(path, '/myservice')\n      assert.strictEqual(serviceArg, service)\n      assert.deepStrictEqual(options.express, {\n        before: [a, b],\n        after: [c]\n      })\n      // eslint-disable-next-line prefer-rest-params\n      return (oldUse as any).apply(this, arguments)\n    }\n\n    app.use('/myservice', a, b, service, c)\n  })","file":"index.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"Express wrapped and context.app are the same","suites":["@feathersjs/express"],"updatePoint":{"line":222,"column":50},"line":222,"code":"  it('Express wrapped and context.app are the same', async () => {\n    const app = feathersExpress(feathers())\n\n    app.use('/test', {\n      async get(id: Id) {\n        return { id }\n      }\n    })\n\n    app.service('test').hooks({\n      before: {\n        get: [\n          (context) => {\n            assert.ok(context.app === app)\n          }\n        ]\n      }\n    })\n\n    assert.deepStrictEqual(await app.service('test').get('testing'), {\n      id: 'testing'\n    })\n  })","file":"index.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"Works with HTTPS","suites":["@feathersjs/express"],"updatePoint":{"line":246,"column":22},"line":246,"code":"  it('Works with HTTPS', (done) => {\n    const todoService = {\n      async get(name: Id) {\n        return {\n          id: name,\n          description: `You have to do ${name}!`\n        }\n      }\n    }\n\n    const app = feathersExpress(feathers()).configure(rest())\n\n    app.use('/secureTodos', todoService)\n\n    const httpsServer = https\n      .createServer(\n        {\n          key: fs.readFileSync(path.join(__dirname, '..', '..', 'tests', 'resources', 'privatekey.pem')),\n          cert: fs.readFileSync(path.join(__dirname, '..', '..', 'tests', 'resources', 'certificate.pem')),\n          rejectUnauthorized: false,\n          requestCert: false\n        },\n        app as unknown as RequestListener\n      )\n      .listen(7889)\n\n    app.setup(httpsServer)\n\n    httpsServer.on('listening', function () {\n      const instance = axios.create({\n        httpsAgent: new https.Agent({\n          rejectUnauthorized: false\n        })\n      })\n\n      instance\n        .get<any>('https://localhost:7889/secureTodos/dishes')\n        .then((response) => {\n          assert.ok(response.status === 200, 'Got OK status code')\n          assert.strictEqual(response.data.description, 'You have to do dishes!')\n          httpsServer.close(() => done())\n        })\n        .catch(done)\n    })\n  })","file":"index.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"returns NotFound error","suites":["not-found-handler"],"updatePoint":{"line":9,"column":28},"line":9,"code":"  it('returns NotFound error', (done) => {\n    handler()(\n      {\n        url: 'some/where',\n        headers: {}\n      },\n      {},\n      function (error: any) {\n        assert.ok(error instanceof NotFound)\n        assert.equal(error.message, 'Page not found')\n        assert.deepEqual(error.data, {\n          url: 'some/where'\n        })\n        done()\n      }\n    )\n  })","file":"not-found-handler.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"returns NotFound error with URL when verbose","suites":["not-found-handler"],"updatePoint":{"line":27,"column":50},"line":27,"code":"  it('returns NotFound error with URL when verbose', (done) => {\n    handler({ verbose: true })(\n      {\n        url: 'some/where',\n        headers: {}\n      },\n      {},\n      function (error: any) {\n        assert.ok(error instanceof NotFound)\n        assert.equal(error.message, 'Page not found: some/where')\n        assert.deepEqual(error.data, {\n          url: 'some/where'\n        })\n        done()\n      }\n    )\n  })","file":"not-found-handler.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"throws an error if you did not expressify","suites":["@feathersjs/express/rest provider","base functionality"],"updatePoint":{"line":21,"column":49},"line":21,"code":"    it('throws an error if you did not expressify', () => {\n      const app = feathers()\n\n      try {\n        app.configure(rest() as any)\n        assert.ok(false, 'Should never get here')\n      } catch (e: any) {\n        assert.strictEqual(e.message, '@feathersjs/express/rest needs an Express compatible app.')\n      }\n    })","file":"rest.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"lets you set the handler manually","suites":["@feathersjs/express/rest provider","base functionality"],"updatePoint":{"line":32,"column":41},"line":32,"code":"    it('lets you set the handler manually', async () => {\n      const app = expressify(feathers())\n\n      app\n        .configure(\n          rest(function (_req, res) {\n            res.format({\n              'text/plain'() {\n                res.end(`The todo is: ${res.data.description}`)\n              }\n            })\n          })\n        )\n        .use('/todo', {\n          async get(id: Id) {\n            return {\n              description: `You have to do ${id}`\n            }\n          }\n        })\n\n      const server = await app.listen(4776)\n\n      const res = await axios.get<any>('http://localhost:4776/todo/dishes')\n\n      assert.strictEqual(res.data, 'The todo is: You have to do dishes')\n      server.close()\n    })","file":"rest.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"lets you set no handler","suites":["@feathersjs/express/rest provider","base functionality"],"updatePoint":{"line":61,"column":31},"line":61,"code":"    it('lets you set no handler', async () => {\n      const app = expressify(feathers())\n      const data = { fromHandler: true }\n\n      app\n        .configure(rest(null))\n        .use('/todo', {\n          async get(id: Id) {\n            return {\n              description: `You have to do ${id}`\n            }\n          }\n        })\n        .use((_req: Request, res: Response) => res.json(data))\n\n      const server = await app.listen(5775)\n      const res = await axios.get<any>('http://localhost:5775/todo-handler/dishes')\n\n      assert.deepStrictEqual(res.data, data)\n\n      server.close()\n    })","file":"rest.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"sets the actual hook object in res.hook","suites":["@feathersjs/express/rest provider","CRUD","res.hook"],"updatePoint":{"line":141,"column":49},"line":141,"code":"      it('sets the actual hook object in res.hook', async () => {\n        const params = {\n          route: {},\n          query: { test: 'param' },\n          provider: 'rest'\n        }\n\n        app.use(\n          '/hook',\n          {\n            async get(id) {\n              return {\n                description: `You have to do ${id}`\n              }\n            }\n          },\n          function (_req: Request, res: Response, next: NextFunction) {\n            res.data = convertHook(res.hook)\n\n            next()\n          }\n        )\n\n        app.service('hook').hooks({\n          after(hook: HookContext) {\n            hook.addedProperty = true\n          }\n        })\n\n        const res = await axios.get<any>('http://localhost:4777/hook/dishes?test=param')\n        const paramsWithHeaders = {\n          ...params,\n          headers: res.data.params.headers\n        }\n\n        assert.deepStrictEqual(res.data, {\n          id: 'dishes',\n          params: paramsWithHeaders,\n          arguments: ['dishes', paramsWithHeaders],\n          type: 'around',\n          method: 'get',\n          path: 'hook',\n          http: {},\n          event: null,\n          result: { description: 'You have to do dishes' },\n          addedProperty: true\n        })\n      })","file":"rest.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"can use hook.dispatch","suites":["@feathersjs/express/rest provider","CRUD","res.hook"],"updatePoint":{"line":190,"column":31},"line":190,"code":"      it('can use hook.dispatch', async () => {\n        app.use('/hook-dispatch', {\n          async get() {\n            return {}\n          }\n        })\n\n        app.service('hook-dispatch').hooks({\n          after(hook: HookContext) {\n            hook.dispatch = {\n              id: hook.id,\n              fromDispatch: true\n            }\n          }\n        })\n\n        const res = await axios.get<any>('http://localhost:4777/hook-dispatch/dishes')\n        assert.deepStrictEqual(res.data, {\n          id: 'dishes',\n          fromDispatch: true\n        })\n      })","file":"rest.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"allows to set statusCode in a hook","suites":["@feathersjs/express/rest provider","CRUD","res.hook"],"updatePoint":{"line":213,"column":44},"line":213,"code":"      it('allows to set statusCode in a hook', async () => {\n        app.use('/hook-status', {\n          async get() {\n            return {}\n          }\n        })\n\n        app.service('hook-status').hooks({\n          after(hook: HookContext) {\n            hook.http.status = 206\n          }\n        })\n\n        const res = await axios.get<any>('http://localhost:4777/hook-status/dishes')\n\n        assert.strictEqual(res.status, 206)\n      })","file":"rest.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"allows to set response headers in a hook","suites":["@feathersjs/express/rest provider","CRUD","res.hook"],"updatePoint":{"line":231,"column":50},"line":231,"code":"      it('allows to set response headers in a hook', async () => {\n        app.use('/hook-headers', {\n          async get() {\n            return {}\n          }\n        })\n\n        app.service('hook-headers').hooks({\n          after(hook: HookContext) {\n            hook.http.headers = { foo: 'first', bar: ['second', 'third'] }\n          }\n        })\n\n        const res = await axios.get<any>('http://localhost:4777/hook-headers/dishes')\n\n        assert.strictEqual(res.headers.foo, 'first')\n        assert.strictEqual(res.headers.bar, 'second, third')\n      })","file":"rest.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"sets the hook object in res.hook on error","suites":["@feathersjs/express/rest provider","CRUD","res.hook"],"updatePoint":{"line":250,"column":51},"line":250,"code":"      it('sets the hook object in res.hook on error', async () => {\n        const params = {\n          route: {},\n          query: {},\n          provider: 'rest'\n        }\n\n        app.use('/hook-error', {\n          async get() {\n            throw new Error('I blew up')\n          }\n        })\n        app.use(function (error: Error, _req: Request, res: Response, _next: NextFunction) {\n          res.status(500)\n          res.json({\n            hook: convertHook(res.hook),\n            error: {\n              message: error.message\n            }\n          })\n        })\n\n        try {\n          await axios('http://localhost:4777/hook-error/dishes')\n          assert.fail('Should never get here')\n        } catch (error: any) {\n          const { data } = error.response\n          const paramsWithHeaders = {\n            ...params,\n            headers: data.hook.params.headers\n          }\n          assert.deepStrictEqual(error.response.data, {\n            hook: {\n              id: 'dishes',\n              params: paramsWithHeaders,\n              arguments: ['dishes', paramsWithHeaders],\n              type: 'around',\n              event: null,\n              method: 'get',\n              path: 'hook-error',\n              http: {}\n            },\n            error: { message: 'I blew up' }\n          })\n        }\n      })","file":"rest.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"sets service parameters and provider type","suites":["@feathersjs/express/rest provider","middleware"],"updatePoint":{"line":300,"column":49},"line":300,"code":"    it('sets service parameters and provider type', async () => {\n      const service = {\n        async get(_id: Id, params: Params) {\n          return params\n        }\n      }\n\n      const app = expressify(feathers())\n        .use(function (req: Request, _res: Response, next: NextFunction) {\n          req.feathers.test = 'Happy'\n          next()\n        })\n        .configure(rest(express.formatter))\n        .use('service', service)\n      const server = await app.listen(4778)\n\n      const res = await axios.get<any>('http://localhost:4778/service/bla?some=param&another=thing')\n      const expected = {\n        headers: res.data.headers,\n        test: 'Happy',\n        provider: 'rest',\n        route: {},\n        query: {\n          some: 'param',\n          another: 'thing'\n        }\n      }\n\n      assert.ok(res.status === 200, 'Got OK status code')\n      assert.deepStrictEqual(res.data, expected, 'Got params object back')\n      server.close()\n    })","file":"rest.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"Lets you configure your own middleware before the handler (#40)","suites":["@feathersjs/express/rest provider","middleware"],"updatePoint":{"line":333,"column":71},"line":333,"code":"    it('Lets you configure your own middleware before the handler (#40)', async () => {\n      const data = {\n        description: 'Do dishes!',\n        id: 'dishes'\n      }\n      const app = expressify(feathers())\n\n      app\n        .use(function defaultContentTypeMiddleware(req, _res, next) {\n          req.headers['content-type'] = req.headers['content-type'] || 'application/json'\n          next()\n        })\n        .use(express.json())\n        .configure(rest(express.formatter))\n        .use('/todo', {\n          async create(data: any) {\n            return data\n          }\n        })\n\n      const server = await app.listen(4775)\n      const res = await axios({\n        url: 'http://localhost:4775/todo',\n        method: 'post',\n        data,\n        headers: {\n          'content-type': ''\n        }\n      })\n\n      assert.deepStrictEqual(res.data, data)\n      server.close()\n    })","file":"rest.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"allows middleware before and after a service","suites":["@feathersjs/express/rest provider","middleware"],"updatePoint":{"line":367,"column":52},"line":367,"code":"    it('allows middleware before and after a service', async () => {\n      const app = expressify(feathers())\n\n      app\n        .use(express.json())\n        .configure(rest())\n        .use(\n          '/todo',\n          function (req, _res, next) {\n            req.body.before = ['before first']\n            next()\n          },\n          function (req, _res, next) {\n            req.body.before.push('before second')\n            next()\n          },\n          {\n            async create(data: any) {\n              return data\n            }\n          },\n          function (_req, res, next) {\n            res.data.after = ['after first']\n            next()\n          },\n          function (_req, res, next) {\n            res.data.after.push('after second')\n            next()\n          }\n        )\n\n      const server = await app.listen(4776)\n      const res = await axios.post<any>('http://localhost:4776/todo', {\n        text: 'Do dishes'\n      })\n\n      assert.deepStrictEqual(res.data, {\n        text: 'Do dishes',\n        before: ['before first', 'before second'],\n        after: ['after first', 'after second']\n      })\n\n      server.close()\n    })","file":"rest.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"allows middleware arrays before and after a service","suites":["@feathersjs/express/rest provider","middleware"],"updatePoint":{"line":412,"column":59},"line":412,"code":"    it('allows middleware arrays before and after a service', async () => {\n      const app = expressify(feathers())\n\n      app.use(express.json())\n      app.configure(rest())\n      app.use(\n        '/todo',\n        [\n          function (req: Request, _res: Response, next: NextFunction) {\n            req.body.before = ['before first']\n            next()\n          },\n          function (req: Request, _res: Response, next: NextFunction) {\n            req.body.before.push('before second')\n            next()\n          }\n        ],\n        {\n          async create(data) {\n            return data\n          }\n        },\n        [\n          function (_req: Request, res: Response, next: NextFunction) {\n            res.data.after = ['after first']\n            next()\n          }\n        ],\n        function (_req: Request, res: Response, next: NextFunction) {\n          res.data.after.push('after second')\n          next()\n        }\n      )\n\n      const server = await app.listen(4776)\n      const res = await axios.post<any>('http://localhost:4776/todo', {\n        text: 'Do dishes'\n      })\n\n      assert.deepStrictEqual(res.data, {\n        text: 'Do dishes',\n        before: ['before first', 'before second'],\n        after: ['after first', 'after second']\n      })\n      server.close()\n    })","file":"rest.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"allows an array of middleware without a service","suites":["@feathersjs/express/rest provider","middleware"],"updatePoint":{"line":459,"column":55},"line":459,"code":"    it('allows an array of middleware without a service', async () => {\n      const app = expressify(feathers())\n      const middlewareArray = [\n        function (_req: Request, res: Response, next: NextFunction) {\n          res.data = ['first']\n          next()\n        },\n        function (_req: Request, res: Response, next: NextFunction) {\n          res.data.push('second')\n          next()\n        },\n        function (req: Request, res: Response) {\n          res.data.push(req.body.text)\n          res.status(200).json(res.data)\n        }\n      ]\n      app.use(express.json()).configure(rest()).use('/array-middleware', middlewareArray)\n\n      const server = await app.listen(4776)\n      const res = await axios.post<any>('http://localhost:4776/array-middleware', {\n        text: 'Do dishes'\n      })\n\n      assert.deepStrictEqual(res.data, ['first', 'second', 'Do dishes'])\n      server.close()\n    })","file":"rest.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"formatter does nothing when there is no res.data","suites":["@feathersjs/express/rest provider","middleware"],"updatePoint":{"line":486,"column":56},"line":486,"code":"    it('formatter does nothing when there is no res.data', async () => {\n      const data = { message: 'It worked' }\n      const app = expressify(feathers()).use('/test', express.formatter, (_req: Request, res: Response) =>\n        res.json(data)\n      )\n\n      const server = await app.listen(7988)\n      const res = await axios.get<any>('http://localhost:7988/test')\n\n      assert.deepStrictEqual(res.data, data)\n      server.close()\n    })","file":"rest.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"throws a 405 for undefined service methods (#99)","suites":["@feathersjs/express/rest provider","HTTP status codes"],"updatePoint":{"line":545,"column":56},"line":545,"code":"    it('throws a 405 for undefined service methods (#99)', async () => {\n      const res = await axios.get<any>('http://localhost:4780/todo/dishes')\n\n      assert.ok(res.status === 200, 'Got OK status code for .get')\n      assert.deepStrictEqual(\n        res.data,\n        {\n          description: 'You have to do dishes'\n        },\n        'Got expected object'\n      )\n\n      try {\n        await axios.post<any>('http://localhost:4780/todo')\n        assert.fail('Should never get here')\n      } catch (error: any) {\n        assert.ok(error.response.status === 405, 'Got 405 for .create')\n        assert.deepStrictEqual(\n          error.response.data,\n          {\n            message: 'Method `create` is not supported by this endpoint.'\n          },\n          'Error serialized as expected'\n        )\n      }\n    })","file":"rest.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"throws a 404 for undefined route","suites":["@feathersjs/express/rest provider","HTTP status codes"],"updatePoint":{"line":572,"column":40},"line":572,"code":"    it('throws a 404 for undefined route', async () => {\n      try {\n        await axios.get<any>('http://localhost:4780/todo/foo/bar')\n        assert.fail('Should never get here')\n      } catch (error: any) {\n        assert.ok(error.response.status === 404, 'Got Not Found code')\n      }\n    })","file":"rest.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"empty response sets 204 status codes, does not run other middleware (#391)","suites":["@feathersjs/express/rest provider","HTTP status codes"],"updatePoint":{"line":581,"column":82},"line":581,"code":"    it('empty response sets 204 status codes, does not run other middleware (#391)', async () => {\n      const res = await axios.get<any>('http://localhost:4780/todo')\n\n      assert.ok(res.status === 204, 'Got empty status code')\n    })","file":"rest.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"adds route params as `params.route` and allows id property (#76, #407)","suites":["@feathersjs/express/rest provider","route parameters"],"updatePoint":{"line":614,"column":78},"line":614,"code":"    it('adds route params as `params.route` and allows id property (#76, #407)', async () => {\n      const expected = {\n        id: 'dishes',\n        route: {\n          appId: 'theApp',\n          id: 'myId'\n        }\n      }\n\n      const res = await axios.get<any>(`http://localhost:6880/theApp/myId/todo/${expected.id}`)\n\n      assert.ok(res.status === 200, 'Got OK status code')\n      assert.deepStrictEqual(expected, res.data)\n    })","file":"rest.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"properly serializes error for nested routes (#1096)","suites":["@feathersjs/express/rest provider","route parameters"],"updatePoint":{"line":629,"column":59},"line":629,"code":"    it('properly serializes error for nested routes (#1096)', async () => {\n      try {\n        await axios.get<any>('http://localhost:6880/theApp/myId/todo/test?error=true')\n        assert.fail('Should never het here')\n      } catch (error: any) {\n        const { response } = error\n\n        assert.strictEqual(response.status, 400)\n        assert.deepStrictEqual(response.data, {\n          name: 'BadRequest',\n          message: 'Not good',\n          code: 400,\n          className: 'bad-request'\n        })\n      }\n    })","file":"rest.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"calls .customMethod with X-Service-Method header","suites":["@feathersjs/express/rest provider","Custom methods"],"updatePoint":{"line":665,"column":56},"line":665,"code":"    it('calls .customMethod with X-Service-Method header', async () => {\n      const payload = { text: 'Do dishes' }\n      const res = await axios.post<any>('http://localhost:4781/todo', payload, {\n        headers: {\n          'X-Service-Method': 'customMethod'\n        }\n      })\n\n      assert.deepEqual(res.data, {\n        data: payload,\n        method: 'customMethod',\n        provider: 'rest'\n      })\n    })","file":"rest.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"throws MethodNotImplement for .setup, non option and default methods","suites":["@feathersjs/express/rest provider","Custom methods"],"updatePoint":{"line":680,"column":76},"line":680,"code":"    it('throws MethodNotImplement for .setup, non option and default methods', async () => {\n      const options: AxiosRequestConfig = {\n        method: 'POST',\n        url: 'http://localhost:4781/todo',\n        data: { text: 'Do dishes' }\n      }\n      const testMethod = (name: string) => {\n        return assert.rejects(\n          () =>\n            axios({\n              ...options,\n              headers: {\n                'X-Service-Method': name\n              }\n            }),\n          (error: any) => {\n            assert.deepEqual(error.response.data, {\n              name: 'MethodNotAllowed',\n              message: `Method \\`${name}\\` is not supported by this endpoint.`,\n              code: 405,\n              className: 'method-not-allowed'\n            })\n\n            return true\n          }\n        )\n      }\n\n      await testMethod('setup')\n      await testMethod('internalMethod')\n      await testMethod('nonExisting')\n      await testMethod('create')\n      await testMethod('find')\n    })","file":"rest.test.ts","skipped":false,"dir":"packages/express/test"},{"name":"initializes","suites":["Feathers application"],"updatePoint":{"line":6,"column":17},"line":6,"code":"  it('initializes', () => {\n    const app = feathers()\n\n    assert.ok(app instanceof Feathers)\n  })","file":"application.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"sets the version on main and app instance","suites":["Feathers application"],"updatePoint":{"line":12,"column":47},"line":12,"code":"  it('sets the version on main and app instance', () => {\n    const app = feathers()\n\n    assert.ok(version > '5.0.0')\n    assert.ok(app.version > '5.0.0')\n  })","file":"application.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"is an event emitter","suites":["Feathers application"],"updatePoint":{"line":19,"column":25},"line":19,"code":"  it('is an event emitter', (done) => {\n    const app = feathers()\n    const original = { hello: 'world' }\n\n    app.on('test', (data: any) => {\n      assert.deepStrictEqual(original, data)\n      done()\n    })\n\n    app.emit('test', original)\n  })","file":"application.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"uses .defaultService if available","suites":["Feathers application"],"updatePoint":{"line":31,"column":39},"line":31,"code":"  it('uses .defaultService if available', async () => {\n    const app = feathers()\n\n    assert.throws(() => app.service('/todos/'), {\n      message: \"Can not find service 'todos'\"\n    })\n\n    app.defaultService = function (location: string) {\n      assert.strictEqual(location, 'todos')\n      return {\n        async get(id: string) {\n          return {\n            id,\n            description: `You have to do ${id}!`\n          }\n        }\n      }\n    }\n\n    const data = await app.service('/todos/').get('dishes')\n\n    assert.deepStrictEqual(data, {\n      id: 'dishes',\n      description: 'You have to do dishes!'\n    })\n  })","file":"application.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"additionally passes `app` as .configure parameter (#558)","suites":["Feathers application"],"updatePoint":{"line":58,"column":62},"line":58,"code":"  it('additionally passes `app` as .configure parameter (#558)', (done) => {\n    feathers().configure(function (app) {\n      assert.strictEqual(this, app)\n      done()\n    })\n  })","file":"application.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"calling .use with invalid path throws","suites":["Feathers application","Services"],"updatePoint":{"line":66,"column":45},"line":66,"code":"    it('calling .use with invalid path throws', () => {\n      const app = feathers()\n\n      assert.throws(() => app.use(null, {}), {\n        message: \"'null' is not a valid service path.\"\n      })\n\n      // @ts-ignore\n      assert.throws(() => app.use({}, {}), {\n        message: \"'[object Object]' is not a valid service path.\"\n      })\n    })","file":"application.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"calling .use with a non service object throws","suites":["Feathers application","Services"],"updatePoint":{"line":79,"column":53},"line":79,"code":"    it('calling .use with a non service object throws', () => {\n      const app = feathers()\n\n      // @ts-ignore\n      assert.throws(() => app.use('/bla', function () {}), {\n        message: 'Invalid service object passed for path `bla`'\n      })\n    })","file":"application.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"registers and wraps a new service and can unregister (#2035)","suites":["Feathers application","Services"],"updatePoint":{"line":88,"column":68},"line":88,"code":"    it('registers and wraps a new service and can unregister (#2035)', async () => {\n      const dummyService = {\n        async setup(this: any, _app: any, path: string) {\n          this.path = path\n        },\n\n        async teardown(this: any, _app: any, path: string) {\n          this.path = path\n        },\n\n        async create(data: any) {\n          return data\n        }\n      }\n\n      const app = feathers<{ dummy: typeof dummyService }>().use('dummy', dummyService)\n      const wrappedService = app.service('dummy')\n\n      assert.strictEqual(\n        Object.getPrototypeOf(wrappedService),\n        dummyService,\n        'Object points to original service prototype'\n      )\n\n      const data = await wrappedService.create({\n        message: 'Test message'\n      })\n\n      assert.strictEqual(data.message, 'Test message')\n\n      await app.unuse('dummy')\n\n      assert.strictEqual(Object.keys(app.services).length, 0)\n      assert.throws(() => app.service('dummy'), {\n        message: \"Can not find service 'dummy'\"\n      })\n    })","file":"application.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"can not register custom methods on a protected methods","suites":["Feathers application","Services"],"updatePoint":{"line":126,"column":62},"line":126,"code":"    it('can not register custom methods on a protected methods', async () => {\n      const dummyService = {\n        async create(data: any) {\n          return data\n        },\n        async removeListener(data: any) {\n          return data\n        },\n        async setup() {},\n\n        async teardown() {}\n      }\n\n      assert.throws(\n        () =>\n          feathers().use('/dummy', dummyService, {\n            methods: ['create', 'removeListener']\n          }),\n        {\n          message: \"'removeListener' on service 'dummy' is not allowed as a custom method name\"\n        }\n      )\n      assert.throws(\n        () =>\n          feathers().use('/dummy', dummyService, {\n            methods: ['create', 'setup']\n          }),\n        {\n          message: \"'setup' on service 'dummy' is not allowed as a custom method name\"\n        }\n      )\n      assert.throws(\n        () =>\n          feathers().use('/dummy', dummyService, {\n            methods: ['create', 'teardown']\n          }),\n        {\n          message: \"'teardown' on service 'dummy' is not allowed as a custom method name\"\n        }\n      )\n    })","file":"application.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"can register service with no external methods","suites":["Feathers application","Services"],"updatePoint":{"line":168,"column":53},"line":168,"code":"    it('can register service with no external methods', async () => {\n      const dummyService = {\n        async create(data: any) {\n          return data\n        }\n      }\n\n      feathers().use('dummy', dummyService, {\n        methods: []\n      })\n    })","file":"application.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"can use a root level service","suites":["Feathers application","Services"],"updatePoint":{"line":180,"column":36},"line":180,"code":"    it('can use a root level service', async () => {\n      const app = feathers().use('/', {\n        async get(id: string) {\n          return { id }\n        }\n      })\n\n      const result = await app.service('/').get('test')\n\n      assert.deepStrictEqual(result, { id: 'test' })\n    })","file":"application.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"services can be re-used (#566)","suites":["Feathers application","Services"],"updatePoint":{"line":192,"column":38},"line":192,"code":"    it('services can be re-used (#566)', (done) => {\n      const app1 = feathers()\n      const app2 = feathers()\n\n      app2.use('/dummy', {\n        async create(data: any) {\n          return data\n        }\n      })\n\n      const dummy = app2.service('dummy')\n\n      dummy.hooks({\n        before: {\n          create: [\n            (hook) => {\n              hook.data.fromHook = true\n            }\n          ]\n        }\n      })\n\n      dummy.on('created', (data: any) => {\n        assert.deepStrictEqual(data, {\n          message: 'Hi',\n          fromHook: true\n        })\n        done()\n      })\n\n      app1.use('/testing', app2.service('dummy'))\n\n      app1.service('testing').create({ message: 'Hi' })\n    })","file":"application.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"async hooks run before regular hooks","suites":["Feathers application","Services"],"updatePoint":{"line":227,"column":44},"line":227,"code":"    it('async hooks run before regular hooks', async () => {\n      const app = feathers()\n\n      app.use('/dummy', {\n        async create(data: any) {\n          return data\n        }\n      })\n\n      const dummy = app.service('dummy')\n\n      dummy.hooks({\n        before: {\n          create(ctx) {\n            ctx.data.order.push('before')\n          }\n        }\n      })\n\n      dummy.hooks([\n        async (ctx: any, next: any) => {\n          ctx.data.order = ['async']\n          await next()\n        }\n      ])\n\n      const result = await dummy.create({\n        message: 'hi'\n      })\n\n      assert.deepStrictEqual(result, {\n        message: 'hi',\n        order: ['async', 'before']\n      })\n    })","file":"application.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"services conserve Symbols","suites":["Feathers application","Services"],"updatePoint":{"line":263,"column":33},"line":263,"code":"    it('services conserve Symbols', () => {\n      const TEST = Symbol('test')\n      const dummyService = {\n        [TEST]: true,\n\n        async setup(this: any, _app: any, path: string) {\n          this.path = path\n        },\n\n        async create(data: any) {\n          return data\n        }\n      }\n\n      const app = feathers().use('/dummy', dummyService)\n      const wrappedService = app.service('dummy')\n\n      assert.ok((wrappedService as any)[TEST])\n    })","file":"application.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"methods conserve Symbols","suites":["Feathers application","Services"],"updatePoint":{"line":283,"column":32},"line":283,"code":"    it('methods conserve Symbols', () => {\n      const TEST = Symbol('test')\n      const dummyService = {\n        async setup(this: any, _app: any, path: string) {\n          this.path = path\n        },\n\n        async create(data: any) {\n          return data\n        }\n      }\n\n      ;(dummyService.create as any)[TEST] = true\n\n      const app = feathers().use('/dummy', dummyService)\n      const wrappedService = app.service('dummy')\n\n      assert.ok((wrappedService.create as any)[TEST])\n    })","file":"application.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"should set a value","suites":["Feathers application","Express app options compatibility",".set()"],"updatePoint":{"line":306,"column":28},"line":306,"code":"      it('should set a value', () => {\n        const app = feathers()\n        app.set('foo', 'bar')\n        assert.strictEqual(app.get('foo'), 'bar')\n      })","file":"application.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"should return the app","suites":["Feathers application","Express app options compatibility",".set()"],"updatePoint":{"line":312,"column":31},"line":312,"code":"      it('should return the app', () => {\n        const app = feathers()\n        assert.strictEqual(app.set('foo', 'bar'), app)\n      })","file":"application.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"should return the app when undefined","suites":["Feathers application","Express app options compatibility",".set()"],"updatePoint":{"line":317,"column":46},"line":317,"code":"      it('should return the app when undefined', () => {\n        const app = feathers()\n        assert.strictEqual(app.set('foo', undefined), app)\n      })","file":"application.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"should return undefined when unset","suites":["Feathers application","Express app options compatibility",".get()"],"updatePoint":{"line":324,"column":44},"line":324,"code":"      it('should return undefined when unset', () => {\n        const app = feathers()\n        assert.strictEqual(app.get('foo'), undefined)\n      })","file":"application.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"should otherwise return the value","suites":["Feathers application","Express app options compatibility",".get()"],"updatePoint":{"line":329,"column":43},"line":329,"code":"      it('should otherwise return the value', () => {\n        const app = feathers()\n        app.set('foo', 'bar')\n        assert.strictEqual(app.get('foo'), 'bar')\n      })","file":"application.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"app.setup and app.teardown calls .setup and .teardown on all services","suites":["Feathers application",".setup and .teardown"],"updatePoint":{"line":338,"column":77},"line":338,"code":"    it('app.setup and app.teardown calls .setup and .teardown on all services', async () => {\n      const app = feathers()\n      let setupCount = 0\n      let teardownCount = 0\n\n      app.use('/dummy', {\n        async setup(appRef: any, path: any) {\n          setupCount++\n          assert.strictEqual(appRef, app)\n          assert.strictEqual(path, 'dummy')\n        },\n\n        async teardown(appRef: any, path: any) {\n          teardownCount++\n          assert.strictEqual(appRef, app)\n          assert.strictEqual(path, 'dummy')\n        }\n      })\n\n      app.use('/simple', {\n        get(id: string) {\n          return Promise.resolve({ id })\n        }\n      })\n\n      app.use('/dummy2', {\n        async setup(appRef: any, path: any) {\n          setupCount++\n          assert.strictEqual(appRef, app)\n          assert.strictEqual(path, 'dummy2')\n        },\n\n        async teardown(appRef: any, path: any) {\n          teardownCount++\n          assert.strictEqual(appRef, app)\n          assert.strictEqual(path, 'dummy2')\n        }\n      })\n\n      await app.setup()\n\n      assert.ok((app as any)._isSetup)\n      assert.strictEqual(setupCount, 2)\n\n      await app.teardown()\n\n      assert.ok(!(app as any)._isSetup)\n      assert.strictEqual(teardownCount, 2)\n    })","file":"application.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"registering app.setup but while still pending will be set up","suites":["Feathers application",".setup and .teardown"],"updatePoint":{"line":388,"column":68},"line":388,"code":"    it('registering app.setup but while still pending will be set up', (done) => {\n      const app = feathers()\n\n      app.setup()\n\n      app.use('/dummy', {\n        async setup(appRef: any, path: any) {\n          assert.ok((app as any)._isSetup)\n          assert.strictEqual(appRef, app)\n          assert.strictEqual(path, 'dummy')\n          done()\n        }\n      })\n    })","file":"application.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"app.teardown calls .teardown on all services","suites":["Feathers application",".teardown"],"updatePoint":{"line":405,"column":52},"line":405,"code":"    it('app.teardown calls .teardown on all services', async () => {\n      const app = feathers()\n      let teardownCount = 0\n\n      app.use('/dummy', {\n        async setup() {},\n        async teardown(appRef: any, path: any) {\n          teardownCount++\n          assert.strictEqual(appRef, app)\n          assert.strictEqual(path, 'dummy')\n        }\n      })\n\n      app.use('/simple', {\n        get(id: string) {\n          return Promise.resolve({ id })\n        }\n      })\n\n      app.use('/dummy2', {\n        async setup() {},\n        async teardown(appRef: any, path: any) {\n          teardownCount++\n          assert.strictEqual(appRef, app)\n          assert.strictEqual(path, 'dummy2')\n        }\n      })\n\n      await app.setup()\n      await app.teardown()\n\n      assert.equal((app as any)._isSetup, false)\n      assert.strictEqual(teardownCount, 2)\n    })","file":"application.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"are getting called with a service and default options","suites":["Feathers application","mixins"],"updatePoint":{"line":449,"column":61},"line":449,"code":"    it('are getting called with a service and default options', () => {\n      const app = feathers()\n      let mixinRan = false\n\n      app.mixins.push(function (service: any, location: any, options: any) {\n        assert.ok(service.dummy)\n        assert.strictEqual(location, 'dummy')\n        assert.deepStrictEqual(options, getServiceOptions(service))\n        mixinRan = true\n      })\n\n      app.use('/dummy', new Dummy())\n\n      assert.ok(mixinRan)\n\n      app.setup()\n    })","file":"application.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"are getting called with a service and service options","suites":["Feathers application","mixins"],"updatePoint":{"line":467,"column":61},"line":467,"code":"    it('are getting called with a service and service options', () => {\n      const app = feathers()\n      const opts = { events: ['bla'] }\n\n      let mixinRan = false\n\n      app.mixins.push(function (service: any, location: any, options: any) {\n        assert.ok(service.dummy)\n        assert.strictEqual(location, 'dummy')\n        assert.deepStrictEqual(options, getServiceOptions(service))\n        mixinRan = true\n      })\n\n      app.use('/dummy', new Dummy(), opts)\n\n      assert.ok(mixinRan)\n\n      app.setup()\n    })","file":"application.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"re-registers sub-app services with prefix","suites":["Feathers application","sub apps"],"updatePoint":{"line":489,"column":49},"line":489,"code":"    it('re-registers sub-app services with prefix', (done) => {\n      const app = feathers()\n      const subApp = feathers()\n\n      subApp\n        .use('/service1', {\n          async get(id: string) {\n            return {\n              id,\n              name: 'service1'\n            }\n          }\n        })\n        .use('/service2', {\n          async get(id: string) {\n            return {\n              id,\n              name: 'service2'\n            }\n          },\n\n          async create(data: any) {\n            return data\n          }\n        })\n\n      app.use('/api/', subApp)\n\n      app.service('/api/service2').once('created', (data: any) => {\n        assert.deepStrictEqual(data, {\n          message: 'This is a test'\n        })\n\n        subApp.service('service2').once('created', (data: any) => {\n          assert.deepStrictEqual(data, {\n            message: 'This is another test'\n          })\n\n          done()\n        })\n\n        app.service('api/service2').create({\n          message: 'This is another test'\n        })\n      })\n      ;(async () => {\n        let data = await app.service('/api/service1').get(10)\n        assert.strictEqual(data.name, 'service1')\n\n        data = await app.service('/api/service2').get(1)\n        assert.strictEqual(data.name, 'service2')\n\n        await subApp.service('service2').create({\n          message: 'This is a test'\n        })\n      })()\n    })","file":"application.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"initializes the app with proper types","suites":["Feathers typings"],"updatePoint":{"line":68,"column":43},"line":68,"code":"  it('initializes the app with proper types', async () => {\n    const app: MainApp = feathers<Services, Configuration>()\n    const app2 = feathers<Record<string, unknown>, Configuration>()\n\n    app.set('port', 80)\n    app.use('todos', new TodoService(), {\n      methods: ['find', 'create']\n    })\n    app.use('v2', app2)\n\n    const service = app.service('todos')\n\n    service.on('created', (data) => {\n      assert.ok(data)\n    })\n\n    service.hooks({\n      before: {\n        all: [],\n        create: [\n          async (context) => {\n            const { result, data, service } = context\n\n            assert.ok(service instanceof TodoService)\n            assert.ok(result)\n            assert.ok(data)\n            assert.ok(context.app.service('todos'))\n          }\n        ]\n      }\n    })\n\n    service.hooks({\n      create: [\n        async (context, next) => {\n          assert.ok(context)\n          await next()\n        },\n        async (context, next) => {\n          assert.ok(context)\n          await next()\n        },\n        myHook\n      ]\n    })\n  })","file":"declarations.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"app is an event emitter","suites":["Service events"],"updatePoint":{"line":7,"column":29},"line":7,"code":"  it('app is an event emitter', (done) => {\n    const app = feathers()\n\n    assert.strictEqual(typeof app.on, 'function')\n\n    app.on('test', (data: any) => {\n      assert.deepStrictEqual(data, { message: 'app' })\n      done()\n    })\n    app.emit('test', { message: 'app' })\n  })","file":"events.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"works with service that is already an EventEmitter","suites":["Service events"],"updatePoint":{"line":19,"column":56},"line":19,"code":"  it('works with service that is already an EventEmitter', (done) => {\n    const app = feathers()\n    const service: any = new EventEmitter()\n\n    service.create = async function (data: any) {\n      return data\n    }\n\n    service.on('created', (data: any) => {\n      assert.deepStrictEqual(data, {\n        message: 'testing'\n      })\n      done()\n    })\n\n    app.use('/emitter', service)\n\n    app.service('emitter').create({\n      message: 'testing'\n    })\n  })","file":"events.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":".create and created","suites":["Service events","emits event data on a service"],"updatePoint":{"line":42,"column":27},"line":42,"code":"    it('.create and created', (done) => {\n      const app = feathers().use('/creator', {\n        async create(data: any) {\n          return data\n        }\n      })\n\n      const service = app.service('creator')\n\n      service.on('created', (data: any) => {\n        assert.deepStrictEqual(data, { message: 'Hello' })\n        done()\n      })\n\n      service.create({ message: 'Hello' })\n    })","file":"events.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"allows to skip event emitting","suites":["Service events","emits event data on a service"],"updatePoint":{"line":59,"column":37},"line":59,"code":"    it('allows to skip event emitting', (done) => {\n      const app = feathers().use('/creator', {\n        async create(data: any) {\n          return data\n        }\n      })\n\n      const service = app.service('creator')\n\n      service.hooks({\n        before: {\n          create(context: any) {\n            context.event = null\n\n            return context\n          }\n        }\n      })\n\n      service.on('created', () => {\n        done(new Error('Should never get here'))\n      })\n\n      service.create({ message: 'Hello' }).then(() => done())\n    })","file":"events.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":".update and updated","suites":["Service events","emits event data on a service"],"updatePoint":{"line":85,"column":27},"line":85,"code":"    it('.update and updated', (done) => {\n      const app = feathers().use('/creator', {\n        async update(id: any, data: any) {\n          return Object.assign({ id }, data)\n        }\n      })\n\n      const service = app.service('creator')\n\n      service.on('updated', (data: any) => {\n        assert.deepStrictEqual(data, { id: 10, message: 'Hello' })\n        done()\n      })\n\n      service.update(10, { message: 'Hello' })\n    })","file":"events.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":".patch and patched","suites":["Service events","emits event data on a service"],"updatePoint":{"line":102,"column":26},"line":102,"code":"    it('.patch and patched', (done) => {\n      const app = feathers().use('/creator', {\n        async patch(id: any, data: any) {\n          return Object.assign({ id }, data)\n        }\n      })\n\n      const service = app.service('creator')\n\n      service.on('patched', (data: any) => {\n        assert.deepStrictEqual(data, { id: 12, message: 'Hello' })\n        done()\n      })\n\n      service.patch(12, { message: 'Hello' })\n    })","file":"events.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":".remove and removed","suites":["Service events","emits event data on a service"],"updatePoint":{"line":119,"column":27},"line":119,"code":"    it('.remove and removed', (done) => {\n      const app = feathers().use('/creator', {\n        async remove(id: any) {\n          return { id }\n        }\n      })\n\n      const service = app.service('creator')\n\n      service.on('removed', (data: any) => {\n        assert.deepStrictEqual(data, { id: 22 })\n        done()\n      })\n\n      service.remove(22)\n    })","file":"events.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":".create and created with array","suites":["Service events","emits event data arrays on a service"],"updatePoint":{"line":138,"column":38},"line":138,"code":"    it('.create and created with array', async () => {\n      const app = feathers().use('/creator', {\n        async create(data: any) {\n          if (Array.isArray(data)) {\n            return Promise.all(data.map((current) => (this as any).create(current)))\n          }\n\n          return data\n        }\n      })\n\n      const service = app.service('creator')\n      const createItems = [{ message: 'Hello 0' }, { message: 'Hello 1' }]\n\n      const events = Promise.all(\n        createItems.map((element, index) => {\n          return new Promise<void>((resolve) => {\n            service.on('created', (data: any) => {\n              if (data.message === element.message) {\n                assert.deepStrictEqual(data, { message: `Hello ${index}` })\n                resolve()\n              }\n            })\n          })\n        })\n      )\n\n      await service.create(createItems)\n      await events\n    })","file":"events.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":".update and updated with array","suites":["Service events","emits event data arrays on a service"],"updatePoint":{"line":169,"column":38},"line":169,"code":"    it('.update and updated with array', async () => {\n      const app = feathers().use('/creator', {\n        async update(id: any, data: any) {\n          if (Array.isArray(data)) {\n            return Promise.all(data.map((current, index) => (this as any).update(index, current)))\n          }\n          return Object.assign({ id }, data)\n        }\n      })\n\n      const service = app.service('creator')\n      const updateItems = [{ message: 'Hello 0' }, { message: 'Hello 1' }]\n\n      const events = Promise.all(\n        updateItems.map((element, index) => {\n          return new Promise<void>((resolve) => {\n            service.on('updated', (data: any) => {\n              if (data.message === element.message) {\n                assert.deepStrictEqual(data, {\n                  id: index,\n                  message: `Hello ${index}`\n                })\n                resolve()\n              }\n            })\n          })\n        })\n      )\n\n      await service.update(null, updateItems)\n      await events\n    })","file":"events.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":".patch and patched with array","suites":["Service events","emits event data arrays on a service"],"updatePoint":{"line":202,"column":37},"line":202,"code":"    it('.patch and patched with array', async () => {\n      const app = feathers().use('/creator', {\n        async patch(id: any, data: any) {\n          if (Array.isArray(data)) {\n            return Promise.all(data.map((current, index) => (this as any).patch(index, current)))\n          }\n          return Object.assign({ id }, data)\n        }\n      })\n\n      const service = app.service('creator')\n      const patchItems = [{ message: 'Hello 0' }, { message: 'Hello 1' }]\n\n      const events = Promise.all(\n        patchItems.map((element, index) => {\n          return new Promise<void>((resolve) => {\n            service.on('patched', (data: any) => {\n              if (data.message === element.message) {\n                assert.deepStrictEqual(data, {\n                  id: index,\n                  message: `Hello ${index}`\n                })\n                resolve()\n              }\n            })\n          })\n        })\n      )\n\n      await service.patch(null, patchItems)\n      await events\n    })","file":"events.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":".remove and removed with array","suites":["Service events","emits event data arrays on a service"],"updatePoint":{"line":235,"column":38},"line":235,"code":"    it('.remove and removed with array', async () => {\n      const removeItems = [{ message: 'Hello 0' }, { message: 'Hello 1' }]\n\n      const app = feathers().use('/creator', {\n        async remove(id: any, data: any) {\n          if (id === null) {\n            return Promise.all(removeItems.map((current, index) => (this as any).remove(index, current)))\n          }\n          return Object.assign({ id }, data)\n        }\n      })\n\n      const service = app.service('creator')\n\n      const events = Promise.all(\n        removeItems.map((element, index) => {\n          return new Promise<void>((resolve) => {\n            service.on('removed', (data: any) => {\n              if (data.message === element.message) {\n                assert.deepStrictEqual(data, {\n                  id: index,\n                  message: `Hello ${index}`\n                })\n                resolve()\n              }\n            })\n          })\n        })\n      )\n\n      await service.remove(null)\n      await events\n    })","file":"events.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"also emits the actual hook object","suites":["Service events","event format"],"updatePoint":{"line":271,"column":41},"line":271,"code":"    it('also emits the actual hook object', (done) => {\n      const app = feathers().use('/creator', {\n        async create(data: any) {\n          return data\n        }\n      })\n\n      const service = app.service('creator')\n\n      service.hooks({\n        after(hook: any) {\n          hook.changed = true\n        }\n      })\n\n      service.on('created', (data: any, hook: any) => {\n        try {\n          assert.deepStrictEqual(data, { message: 'Hi' })\n          assert.ok(hook.changed)\n          assert.strictEqual(hook.service, service)\n          assert.strictEqual(hook.method, 'create')\n          assert.strictEqual(hook.type, 'around')\n          done()\n        } catch (error: any) {\n          done(error)\n        }\n      })\n\n      service.create({ message: 'Hi' })\n    })","file":"events.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"events indicated by the service are not sent automatically","suites":["Service events","event format"],"updatePoint":{"line":302,"column":66},"line":302,"code":"    it('events indicated by the service are not sent automatically', (done) => {\n      class Creator {\n        events = ['created']\n        async create(data: any) {\n          return data\n        }\n      }\n      const app = feathers().use('/creator', new Creator())\n      const service = app.service('creator')\n\n      service.on('created', (data: any) => {\n        assert.deepStrictEqual(data, { message: 'custom event' })\n        done()\n      })\n\n      service.create({ message: 'hello' })\n      service.emit('created', { message: 'custom event' })\n    })","file":"events.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":".after hooks can return a promise","suites":["`after` hooks"],"updatePoint":{"line":5,"column":39},"line":5,"code":"  it('.after hooks can return a promise', async () => {\n    const app = feathers().use('/dummy', {\n      async get(id: Id) {\n        return {\n          id,\n          description: `You have to do ${id}`\n        }\n      },\n\n      async find() {\n        return []\n      }\n    })\n    const service = app.service('dummy')\n\n    service.hooks({\n      after: {\n        async get(hook) {\n          hook.result.ran = true\n          return hook\n        },\n\n        async find() {\n          throw new Error('You can not see this')\n        }\n      }\n    })\n\n    const data = await service.get('laundry', {})\n\n    assert.deepStrictEqual(data, {\n      id: 'laundry',\n      description: 'You have to do laundry',\n      ran: true\n    })\n\n    await assert.rejects(() => service.find({}), {\n      message: 'You can not see this'\n    })\n  })","file":"hooks/after.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":".after hooks do not need to return anything","suites":["`after` hooks"],"updatePoint":{"line":46,"column":49},"line":46,"code":"  it('.after hooks do not need to return anything', async () => {\n    const app = feathers().use('/dummy', {\n      async get(id: Id) {\n        return {\n          id,\n          description: `You have to do ${id}`\n        }\n      },\n\n      async find() {\n        return []\n      }\n    })\n    const service = app.service('dummy')\n\n    service.hooks({\n      after: {\n        get(context) {\n          context.result.ran = true\n        },\n\n        find() {\n          throw new Error('You can not see this')\n        }\n      }\n    })\n\n    const data = await service.get('laundry')\n\n    assert.deepStrictEqual(data, {\n      id: 'laundry',\n      description: 'You have to do laundry',\n      ran: true\n    })\n\n    await assert.rejects(() => service.find(), {\n      message: 'You can not see this'\n    })\n  })","file":"hooks/after.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"gets mixed into a service and modifies data","suites":["`after` hooks"],"updatePoint":{"line":86,"column":49},"line":86,"code":"  it('gets mixed into a service and modifies data', async () => {\n    const dummyService = {\n      async create(data: any) {\n        return data\n      }\n    }\n\n    const app = feathers().use('/dummy', dummyService)\n    const service = app.service('dummy')\n\n    service.hooks({\n      after: {\n        create(context) {\n          assert.strictEqual(context.type, 'after')\n\n          context.result.some = 'thing'\n\n          return context\n        }\n      }\n    })\n\n    const data = await service.create({ my: 'data' })\n\n    assert.deepStrictEqual({ my: 'data', some: 'thing' }, data, 'Got modified data')\n  })","file":"hooks/after.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"also makes the app available at hook.app","suites":["`after` hooks"],"updatePoint":{"line":113,"column":46},"line":113,"code":"  it('also makes the app available at hook.app', async () => {\n    const dummyService = {\n      async create(data: any) {\n        return data\n      }\n    }\n\n    const app = feathers().use('/dummy', dummyService)\n    const service = app.service('dummy')\n\n    service.hooks({\n      after: {\n        create(context) {\n          context.result.appPresent = typeof context.app !== 'undefined'\n          assert.strictEqual(context.result.appPresent, true)\n\n          return context\n        }\n      }\n    })\n\n    const data = await service.create({ my: 'data' })\n\n    assert.deepStrictEqual({ my: 'data', appPresent: true }, data, 'The app was present in the hook.')\n  })","file":"hooks/after.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"returns errors","suites":["`after` hooks"],"updatePoint":{"line":139,"column":20},"line":139,"code":"  it('returns errors', async () => {\n    const dummyService = {\n      async update(_id: any, data: any) {\n        return data\n      }\n    }\n\n    const app = feathers().use('/dummy', dummyService)\n    const service = app.service('dummy')\n\n    service.hooks({\n      after: {\n        update() {\n          throw new Error('This did not work')\n        }\n      }\n    })\n\n    await assert.rejects(() => service.update(1, { my: 'data' }), {\n      message: 'This did not work'\n    })\n  })","file":"hooks/after.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"does not run after hook when there is an error","suites":["`after` hooks"],"updatePoint":{"line":162,"column":52},"line":162,"code":"  it('does not run after hook when there is an error', async () => {\n    const dummyService = {\n      async remove() {\n        throw new Error('Error removing item')\n      }\n    }\n\n    const app = feathers().use('/dummy', dummyService)\n    const service = app.service('dummy')\n\n    service.hooks({\n      after: {\n        remove() {\n          assert.ok(false, 'This should never get called')\n        }\n      }\n    })\n\n    await assert.rejects(() => service.remove(1, {}), {\n      message: 'Error removing item'\n    })\n  })","file":"hooks/after.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"adds .after() and chains multiple hooks for the same method","suites":["`after` hooks"],"updatePoint":{"line":185,"column":65},"line":185,"code":"  it('adds .after() and chains multiple hooks for the same method', async () => {\n    const dummyService = {\n      async create(data: any) {\n        return data\n      }\n    }\n\n    const app = feathers().use('/dummy', dummyService)\n    const service = app.service('dummy')\n\n    service.hooks({\n      after: {\n        create(context) {\n          context.result.some = 'thing'\n\n          return context\n        }\n      }\n    })\n\n    service.hooks({\n      after: {\n        create(context) {\n          context.result.other = 'stuff'\n        }\n      }\n    })\n\n    const data = await service.create({ my: 'data' })\n\n    assert.deepStrictEqual(\n      {\n        my: 'data',\n        some: 'thing',\n        other: 'stuff'\n      },\n      data,\n      'Got modified data'\n    )\n  })","file":"hooks/after.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"chains multiple after hooks using array syntax","suites":["`after` hooks"],"updatePoint":{"line":226,"column":52},"line":226,"code":"  it('chains multiple after hooks using array syntax', async () => {\n    const dummyService = {\n      async create(data: any) {\n        return data\n      }\n    }\n\n    const app = feathers().use('/dummy', dummyService)\n    const service = app.service('dummy')\n\n    service.hooks({\n      after: {\n        create: [\n          function (context) {\n            context.result.some = 'thing'\n\n            return context\n          },\n          function (context) {\n            context.result.other = 'stuff'\n\n            return context\n          }\n        ]\n      }\n    })\n\n    const data = await service.create({ my: 'data' })\n\n    assert.deepStrictEqual(\n      {\n        my: 'data',\n        some: 'thing',\n        other: 'stuff'\n      },\n      data,\n      'Got modified data'\n    )\n  })","file":"hooks/after.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":".after hooks run in the correct order (#13)","suites":["`after` hooks"],"updatePoint":{"line":266,"column":49},"line":266,"code":"  it('.after hooks run in the correct order (#13)', async () => {\n    const app = feathers().use('/dummy', {\n      async get(id: any) {\n        return { id }\n      }\n    })\n    const service = app.service('dummy')\n\n    service.hooks({\n      after: {\n        get(context) {\n          context.result.items = ['first']\n\n          return context\n        }\n      }\n    })\n\n    service.hooks({\n      after: {\n        get: [\n          function (context) {\n            context.result.items.push('second')\n\n            return context\n          },\n          function (context) {\n            context.result.items.push('third')\n\n            return context\n          }\n        ]\n      }\n    })\n\n    const data = await service.get(10)\n\n    assert.deepStrictEqual(data.items, ['first', 'second', 'third'])\n  })","file":"hooks/after.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"after all hooks (#11)","suites":["`after` hooks"],"updatePoint":{"line":306,"column":27},"line":306,"code":"  it('after all hooks (#11)', async () => {\n    const app = feathers().use('/dummy', {\n      async get(id: any) {\n        const items: any[] = []\n\n        return { id, items }\n      },\n\n      async find() {\n        return []\n      }\n    })\n\n    const service = app.service('dummy')\n\n    service.hooks({\n      after: {\n        all(context) {\n          context.result.afterAllObject = true\n\n          return context\n        }\n      }\n    })\n\n    service.hooks({\n      after: [\n        function (context) {\n          context.result.afterAllMethodArray = true\n\n          return context\n        }\n      ]\n    })\n\n    let data = await service.find({})\n\n    assert.ok(data.afterAllObject)\n    assert.ok(data.afterAllMethodArray)\n\n    data = await service.get(1, {})\n\n    assert.ok(data.afterAllObject)\n    assert.ok(data.afterAllMethodArray)\n  })","file":"hooks/after.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"after hooks have service as context and keep it in service method (#17)","suites":["`after` hooks"],"updatePoint":{"line":352,"column":77},"line":352,"code":"  it('after hooks have service as context and keep it in service method (#17)', async () => {\n    class Dummy {\n      number = 42\n      async get(id: any) {\n        return {\n          id,\n          number: this.number\n        }\n      }\n    }\n    const app = feathers().use('/dummy', new Dummy())\n\n    const service = app.service('dummy')\n\n    service.hooks({\n      after: {\n        get(this: any, hook) {\n          hook.result.test = this.number + 1\n\n          return hook\n        }\n      }\n    })\n\n    const data = await service.get(10)\n\n    assert.deepStrictEqual(data, {\n      id: 10,\n      number: 42,\n      test: 43\n    })\n  })","file":"hooks/after.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"app has the .hooks method","suites":["app.hooks"],"updatePoint":{"line":53,"column":31},"line":53,"code":"  it('app has the .hooks method', () => {\n    assert.strictEqual(typeof app.hooks, 'function')\n  })","file":"hooks/app.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":".setup and .teardown special hooks","suites":["app.hooks"],"updatePoint":{"line":57,"column":40},"line":57,"code":"  it('.setup and .teardown special hooks', async () => {\n    const app = feathers()\n\n    // Test that setup and teardown can be overwritten\n    const oldSetup = app.setup\n    app.setup = function (arg: any) {\n      return oldSetup.call(this, arg)\n    }\n    const oldTeardown = app.teardown\n    app.teardown = function (arg: any) {\n      return oldTeardown.call(this, arg)\n    }\n\n    const order: string[] = []\n    const hooks: ApplicationHookMap<typeof app> = {\n      setup: [\n        async (context, next) => {\n          assert.strictEqual(context.app, app)\n          order.push('setup 1')\n          await next()\n        },\n        async (_context, next) => {\n          order.push('setup 2')\n          await next()\n          order.push('setup after')\n        }\n      ],\n      teardown: [\n        async (context, next) => {\n          assert.strictEqual(context.app, app)\n          order.push('teardown 1')\n          await next()\n        },\n        async (_context, next) => {\n          order.push('teardown 2')\n          await next()\n        }\n      ]\n    }\n\n    app.hooks(hooks)\n\n    await app.setup()\n    await app.teardown()\n\n    assert.deepStrictEqual(order, ['setup 1', 'setup 2', 'setup after', 'teardown 1', 'teardown 2'])\n  })","file":"hooks/app.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"basic app async hook, works with custom method","suites":["app.hooks","app.hooks([ async ])"],"updatePoint":{"line":106,"column":54},"line":106,"code":"    it('basic app async hook, works with custom method', async () => {\n      const service = app.service('todos')\n\n      app.hooks([\n        async (context, next) => {\n          assert.strictEqual(context.app, app)\n          await next()\n          context.params.ran = true\n        }\n      ])\n\n      let result = await service.get('test')\n\n      assert.deepStrictEqual(result, {\n        id: 'test',\n        params: { ran: true }\n      })\n\n      const data = { test: 'hi' }\n\n      result = await service.create(data)\n\n      assert.deepStrictEqual(result, {\n        data,\n        params: { ran: true }\n      })\n\n      result = await service.customMethod('custom test')\n\n      assert.deepStrictEqual(result, {\n        data: 'custom test',\n        params: { ran: true }\n      })\n    })","file":"hooks/app.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"basic app async method hook","suites":["app.hooks","app.hooks({ method: [ async ] })"],"updatePoint":{"line":143,"column":35},"line":143,"code":"    it('basic app async method hook', async () => {\n      const service = app.service('todos')\n\n      app.hooks({\n        get: [\n          async (context, next) => {\n            assert.strictEqual(context.app, app)\n            await next()\n            context.params.ran = true\n          }\n        ]\n      })\n\n      const result = await service.get('test')\n\n      assert.deepStrictEqual(result, {\n        id: 'test',\n        params: { ran: true }\n      })\n    })","file":"hooks/app.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"basic app before hook, works with custom method","suites":["app.hooks","app.hooks({ before })"],"updatePoint":{"line":166,"column":55},"line":166,"code":"    it('basic app before hook, works with custom method', async () => {\n      const service = app.service('todos')\n\n      app.hooks({\n        before(context) {\n          assert.strictEqual(context.app, app)\n          context.params.ran = true\n        }\n      })\n\n      let result = await service.get('test')\n\n      assert.deepStrictEqual(result, {\n        id: 'test',\n        params: { ran: true }\n      })\n\n      const data = { test: 'hi' }\n\n      result = await service.create(data)\n\n      assert.deepStrictEqual(result, {\n        data,\n        params: { ran: true }\n      })\n\n      result = await service.customMethod('custom with before')\n\n      assert.deepStrictEqual(result, {\n        data: 'custom with before',\n        params: { ran: true }\n      })\n    })","file":"hooks/app.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"app before hooks always run first","suites":["app.hooks","app.hooks({ before })"],"updatePoint":{"line":200,"column":41},"line":200,"code":"    it('app before hooks always run first', async () => {\n      app.service('todos').hooks({\n        before(context) {\n          assert.strictEqual(context.app, app)\n          context.params.order.push('service.before')\n        }\n      })\n\n      app.service('todos').hooks({\n        before(context) {\n          assert.strictEqual(context.app, app)\n          context.params.order.push('service.before 1')\n        }\n      })\n\n      app.hooks({\n        before(context) {\n          assert.strictEqual(context.app, app)\n          context.params.order = []\n          context.params.order.push('app.before')\n        }\n      })\n\n      const result = await app.service('todos').get('test')\n\n      assert.deepStrictEqual(result, {\n        id: 'test',\n        params: {\n          order: ['app.before', 'service.before', 'service.before 1']\n        }\n      })\n    })","file":"hooks/app.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"basic app after hook","suites":["app.hooks","app.hooks({ after })"],"updatePoint":{"line":235,"column":28},"line":235,"code":"    it('basic app after hook', async () => {\n      app.hooks({\n        after(context) {\n          assert.strictEqual(context.app, app)\n          context.result.ran = true\n        }\n      })\n\n      const result = await app.service('todos').get('test')\n\n      assert.deepStrictEqual(result, {\n        id: 'test',\n        params: {},\n        ran: true\n      })\n    })","file":"hooks/app.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"app after hooks always run last","suites":["app.hooks","app.hooks({ after })"],"updatePoint":{"line":252,"column":39},"line":252,"code":"    it('app after hooks always run last', async () => {\n      app.hooks({\n        after(context) {\n          assert.strictEqual(context.app, app)\n          context.result.order.push('app.after')\n        }\n      })\n\n      app.service('todos').hooks({\n        after(context) {\n          assert.strictEqual(context.app, app)\n          context.result.order = []\n          context.result.order.push('service.after')\n        }\n      })\n\n      app.service('todos').hooks({\n        after(context) {\n          assert.strictEqual(context.app, app)\n          context.result.order.push('service.after 1')\n        }\n      })\n\n      const result = await app.service('todos').get('test')\n\n      assert.deepStrictEqual(result, {\n        id: 'test',\n        params: {},\n        order: ['service.after', 'service.after 1', 'app.after']\n      })\n    })","file":"hooks/app.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"basic app error hook","suites":["app.hooks","app.hooks({ error })"],"updatePoint":{"line":286,"column":28},"line":286,"code":"    it('basic app error hook', async () => {\n      app.hooks({\n        error(context) {\n          assert.strictEqual(context.app, app)\n          context.error = new Error('App hook ran')\n        }\n      })\n\n      await assert.rejects(() => app.service('todos').get('error'), {\n        message: 'App hook ran'\n      })\n    })","file":"hooks/app.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"app error hooks always run last","suites":["app.hooks","app.hooks({ error })"],"updatePoint":{"line":299,"column":39},"line":299,"code":"    it('app error hooks always run last', async () => {\n      app.hooks({\n        error(context) {\n          assert.strictEqual(context.app, app)\n          context.error = new Error(`${context.error.message} app.after`)\n        }\n      })\n\n      app.service('todos').hooks({\n        error(context) {\n          assert.strictEqual(context.app, app)\n          context.error = new Error(`${context.error.message} service.after`)\n        }\n      })\n\n      app.service('todos').hooks({\n        error(context) {\n          assert.strictEqual(context.app, app)\n          context.error = new Error(`${context.error.message} service.after 1`)\n        }\n      })\n\n      await assert.rejects(() => app.service('todos').get('error'), {\n        message: 'Something went wrong service.after service.after 1 app.after'\n      })\n    })","file":"hooks/app.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"around hooks can set hook.result which will skip service method","suites":["`around` hooks"],"updatePoint":{"line":5,"column":69},"line":5,"code":"  it('around hooks can set hook.result which will skip service method', async () => {\n    const app = feathers().use('/dummy', {\n      async get() {\n        assert.ok(false, 'This should never run')\n      }\n    })\n    const service = app.service('dummy')\n\n    service.hooks({\n      get: [\n        async (hook, next) => {\n          hook.result = {\n            id: hook.id,\n            message: 'Set from hook'\n          }\n\n          await next()\n        }\n      ]\n    })\n\n    const data = await service.get(10, {})\n\n    assert.deepStrictEqual(data, {\n      id: 10,\n      message: 'Set from hook'\n    })\n  })","file":"hooks/around.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"works with traditional registration format, all syntax and app hooks","suites":["`around` hooks"],"updatePoint":{"line":34,"column":74},"line":34,"code":"  it('works with traditional registration format, all syntax and app hooks', async () => {\n    const app = feathers().use('/dummy', {\n      async get() {\n        assert.ok(false, 'This should never run')\n      }\n    })\n    const service = app.service('dummy')\n\n    app.hooks([\n      async function (this: any, hook, next) {\n        hook.result = {\n          id: hook.id,\n          app: 'Set from app around all'\n        }\n\n        await next()\n      }\n    ])\n\n    service.hooks({\n      around: {\n        all: [\n          async (hook, next) => {\n            hook.result = {\n              ...hook.result,\n              all: 'Set from around all'\n            }\n\n            await next()\n          }\n        ],\n        get: [\n          async (hook, next) => {\n            hook.result = {\n              ...hook.result,\n              get: 'Set from around get'\n            }\n\n            await next()\n          }\n        ]\n      }\n    })\n\n    const data = await service.get(10, {})\n\n    assert.deepStrictEqual(data, {\n      id: 10,\n      app: 'Set from app around all',\n      all: 'Set from around all',\n      get: 'Set from around get'\n    })\n  })","file":"hooks/around.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"gets mixed into a service and modifies data","suites":["`around` hooks"],"updatePoint":{"line":88,"column":49},"line":88,"code":"  it('gets mixed into a service and modifies data', async () => {\n    const dummyService = {\n      async create(data: any, params: any) {\n        assert.deepStrictEqual(\n          data,\n          {\n            some: 'thing',\n            modified: 'data'\n          },\n          'Data modified'\n        )\n\n        assert.deepStrictEqual(\n          params,\n          {\n            modified: 'params'\n          },\n          'Params modified'\n        )\n\n        return data\n      }\n    }\n    const app = feathers().use('/dummy', dummyService)\n    const service = app.service('dummy')\n\n    service.hooks({\n      create: [\n        async (hook, next) => {\n          assert.strictEqual(hook.type, 'around')\n\n          hook.data.modified = 'data'\n\n          Object.assign(hook.params, {\n            modified: 'params'\n          })\n\n          await next()\n        }\n      ]\n    })\n\n    const data = await service.create({ some: 'thing' })\n\n    assert.deepStrictEqual(\n      data,\n      {\n        some: 'thing',\n        modified: 'data'\n      },\n      'Data got modified'\n    )\n  })","file":"hooks/around.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"contains the app object at hook.app","suites":["`around` hooks"],"updatePoint":{"line":142,"column":41},"line":142,"code":"  it('contains the app object at hook.app', async () => {\n    const someServiceConfig = {\n      async create(data: any) {\n        return data\n      }\n    }\n    const app = feathers().use('/some-service', someServiceConfig)\n    const someService = app.service('some-service')\n\n    someService.hooks({\n      create: [\n        async (hook, next) => {\n          hook.data.appPresent = typeof hook.app !== 'undefined'\n          assert.strictEqual(hook.data.appPresent, true)\n          return next()\n        }\n      ]\n    })\n\n    const data = await someService.create({ some: 'thing' })\n\n    assert.deepStrictEqual(\n      data,\n      {\n        some: 'thing',\n        appPresent: true\n      },\n      'App object was present'\n    )\n  })","file":"hooks/around.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"passes errors","suites":["`around` hooks"],"updatePoint":{"line":173,"column":19},"line":173,"code":"  it('passes errors', async () => {\n    const dummyService = {\n      update() {\n        assert.ok(false, 'Never should be called')\n      }\n    }\n    const app = feathers().use('/dummy', dummyService)\n    const service = app.service('dummy')\n\n    service.hooks({\n      update: [\n        async () => {\n          throw new Error('You are not allowed to update')\n        }\n      ]\n    })\n\n    await assert.rejects(() => service.update(1, {}), {\n      message: 'You are not allowed to update'\n    })\n  })","file":"hooks/around.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"does not run after hook when there is an error","suites":["`around` hooks"],"updatePoint":{"line":195,"column":52},"line":195,"code":"  it('does not run after hook when there is an error', async () => {\n    const dummyService = {\n      async remove() {\n        throw new Error('Error removing item')\n      }\n    }\n    const app = feathers().use('/dummy', dummyService)\n    const service = app.service('dummy')\n\n    service.hooks({\n      remove: [\n        async (_context, next) => {\n          await next()\n\n          assert.ok(false, 'This should never get called')\n        }\n      ]\n    })\n\n    await assert.rejects(() => service.remove(1, {}), {\n      message: 'Error removing item'\n    })\n  })","file":"hooks/around.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"adds .hooks() and chains multiple hooks for the same method","suites":["`around` hooks"],"updatePoint":{"line":219,"column":65},"line":219,"code":"  it('adds .hooks() and chains multiple hooks for the same method', async () => {\n    interface DummyParams extends Params {\n      modified: string\n    }\n\n    class DummyService implements ServiceInterface<any, any, DummyParams> {\n      create(data: any, params?: any) {\n        assert.deepStrictEqual(\n          data,\n          {\n            some: 'thing',\n            modified: 'second data'\n          },\n          'Data modified'\n        )\n\n        assert.deepStrictEqual(\n          params,\n          {\n            modified: 'params'\n          },\n          'Params modified'\n        )\n\n        return Promise.resolve(data)\n      }\n    }\n\n    const app = feathers<{ dummy: DummyService }>().use('dummy', new DummyService())\n    const service = app.service('dummy')\n\n    service.hooks({\n      create: [\n        async (hook, next) => {\n          hook.params.modified = 'params'\n\n          await next()\n        },\n        async (hook, next) => {\n          hook.data.modified = 'second data'\n\n          next()\n        }\n      ]\n    })\n\n    await service.create({ some: 'thing' })\n  })","file":"hooks/around.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"around hooks run in the correct order","suites":["`around` hooks"],"updatePoint":{"line":268,"column":43},"line":268,"code":"  it('around hooks run in the correct order', async () => {\n    interface DummyParams extends Params<{ name: string }> {\n      items: string[]\n    }\n\n    class DummyService implements ServiceInterface<any, any, DummyParams> {\n      async get(id: any, params?: DummyParams) {\n        assert.deepStrictEqual(params.items, ['first', 'second', 'third'])\n\n        return {\n          id,\n          items: [] as string[]\n        }\n      }\n    }\n\n    const app = feathers<{ dummy: DummyService }>().use('dummy', new DummyService())\n    const service = app.service('dummy')\n\n    service.hooks({\n      get: [\n        async (hook, next) => {\n          hook.params.items = ['first']\n          await next()\n        }\n      ]\n    })\n\n    service.hooks({\n      get: [\n        async function (hook, next) {\n          hook.params.items.push('second')\n          next()\n        },\n        async function (hook, next) {\n          hook.params.items.push('third')\n          next()\n        }\n      ]\n    })\n\n    await service.get(10)\n  })","file":"hooks/around.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"around all hooks (#11)","suites":["`around` hooks"],"updatePoint":{"line":312,"column":28},"line":312,"code":"  it('around all hooks (#11)', async () => {\n    interface DummyParams extends Params {\n      asyncAllObject: boolean\n      asyncAllMethodArray: boolean\n    }\n\n    type DummyService = ServiceInterface<any, any, DummyParams>\n\n    const app = feathers<{ dummy: DummyService }>().use('dummy', {\n      async get(id: any, params: any) {\n        assert.ok(params.asyncAllObject)\n        assert.ok(params.asyncAllMethodArray)\n\n        return {\n          id,\n          items: []\n        }\n      },\n\n      async find(params: any) {\n        assert.ok(params.asyncAllObject)\n        assert.ok(params.asyncAllMethodArray)\n\n        return []\n      }\n    })\n\n    const service = app.service('dummy')\n\n    service.hooks([\n      async (hook, next) => {\n        hook.params.asyncAllObject = true\n        next()\n      }\n    ])\n\n    service.hooks([\n      async function (hook, next) {\n        hook.params.asyncAllMethodArray = true\n        next()\n      }\n    ])\n\n    await service.find()\n  })","file":"hooks/around.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"around hooks have service as context and keep it in service method (#17)","suites":["`around` hooks"],"updatePoint":{"line":358,"column":78},"line":358,"code":"  it('around hooks have service as context and keep it in service method (#17)', async () => {\n    interface DummyParams extends Params {\n      test: number\n    }\n\n    class Dummy implements ServiceInterface<any, any, DummyParams> {\n      number = 42\n\n      async get(id: any, params?: DummyParams) {\n        return {\n          id,\n          number: (this as any).number,\n          test: params.test\n        }\n      }\n    }\n\n    const app = feathers<{ dummy: Dummy }>().use('dummy', new Dummy())\n\n    const service = app.service('dummy')\n\n    service.hooks({\n      get: [\n        async function (this: any, hook, next) {\n          hook.params.test = this.number + 2\n\n          await next()\n        }\n      ]\n    })\n\n    const data = await service.get(10)\n\n    assert.deepStrictEqual(data, {\n      id: 10,\n      number: 42,\n      test: 44\n    })\n  })","file":"hooks/around.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":".before hooks can return a promise","suites":["`before` hooks"],"updatePoint":{"line":5,"column":40},"line":5,"code":"  it('.before hooks can return a promise', async () => {\n    interface DummyParams extends Params {\n      ran: boolean\n    }\n\n    type DummyService = ServiceInterface<any, any, DummyParams>\n\n    const app = feathers<{ dummy: DummyService }>().use('dummy', {\n      async get(id: any, params: DummyParams) {\n        assert.ok(params.ran, 'Ran through promise hook')\n\n        return {\n          id,\n          description: `You have to do ${id}`\n        }\n      },\n\n      async remove() {\n        assert.ok(false, 'Should never get here')\n      }\n    })\n    const service = app.service('dummy')\n\n    service.hooks({\n      before: {\n        get(context) {\n          return new Promise<void>((resolve) => {\n            context.params.ran = true\n            resolve()\n          })\n        },\n\n        remove() {\n          return new Promise((_resolve, reject) => {\n            reject(new Error('This did not work'))\n          })\n        },\n\n        find: []\n      }\n    })\n\n    await service.get('dishes')\n    await assert.rejects(() => service.remove(10), {\n      message: 'This did not work'\n    })\n  })","file":"hooks/before.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":".before hooks do not need to return anything","suites":["`before` hooks"],"updatePoint":{"line":53,"column":50},"line":53,"code":"  it('.before hooks do not need to return anything', async () => {\n    interface DummyParams extends Params {\n      ran: boolean\n    }\n\n    type DummyService = ServiceInterface<any, any, DummyParams>\n\n    const app = feathers<{ dummy: DummyService }>().use('dummy', {\n      async get(id: any, params: any) {\n        assert.ok(params.ran, 'Ran through promise hook')\n\n        return {\n          id,\n          description: `You have to do ${id}`\n        }\n      },\n\n      async remove() {\n        assert.ok(false, 'Should never get here')\n      }\n    })\n    const service = app.service('dummy')\n\n    service.hooks({\n      before: {\n        get(context) {\n          context.params.ran = true\n        },\n\n        remove() {\n          throw new Error('This did not work')\n        }\n      }\n    })\n\n    await service.get('dishes')\n    await assert.rejects(() => service.remove(10), {\n      message: 'This did not work'\n    })\n  })","file":"hooks/before.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":".before hooks can set context.result which will skip service method","suites":["`before` hooks"],"updatePoint":{"line":94,"column":73},"line":94,"code":"  it('.before hooks can set context.result which will skip service method', async () => {\n    const app = feathers().use('/dummy', {\n      async get() {\n        assert.ok(false, 'This should never run')\n      }\n    })\n    const service = app.service('dummy')\n\n    service.hooks({\n      before: {\n        get(context) {\n          context.result = {\n            id: context.id,\n            message: 'Set from hook'\n          }\n        }\n      }\n    })\n\n    const data = await service.get(10, {})\n\n    assert.deepStrictEqual(data, {\n      id: 10,\n      message: 'Set from hook'\n    })\n  })","file":"hooks/before.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"gets mixed into a service and modifies data","suites":["`before` hooks"],"updatePoint":{"line":121,"column":49},"line":121,"code":"  it('gets mixed into a service and modifies data', async () => {\n    const dummyService = {\n      async create(data: any, params: any) {\n        assert.deepStrictEqual(\n          data,\n          {\n            some: 'thing',\n            modified: 'data'\n          },\n          'Data modified'\n        )\n\n        assert.deepStrictEqual(\n          params,\n          {\n            modified: 'params'\n          },\n          'Params modified'\n        )\n\n        return data\n      }\n    }\n    const app = feathers().use('/dummy', dummyService)\n    const service = app.service('dummy')\n\n    service.hooks({\n      before: {\n        create(context) {\n          assert.strictEqual(context.type, 'before')\n\n          context.data.modified = 'data'\n\n          Object.assign(context.params, {\n            modified: 'params'\n          })\n\n          return context\n        }\n      }\n    })\n\n    const data = await service.create({ some: 'thing' })\n\n    assert.deepStrictEqual(\n      data,\n      {\n        some: 'thing',\n        modified: 'data'\n      },\n      'Data got modified'\n    )\n  })","file":"hooks/before.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"contains the app object at context.app","suites":["`before` hooks"],"updatePoint":{"line":175,"column":44},"line":175,"code":"  it('contains the app object at context.app', async () => {\n    const someServiceConfig = {\n      async create(data: any) {\n        return data\n      }\n    }\n    const app = feathers().use('/some-service', someServiceConfig)\n    const someService = app.service('some-service')\n\n    someService.hooks({\n      before: {\n        create(context) {\n          context.data.appPresent = typeof context.app !== 'undefined'\n          assert.strictEqual(context.data.appPresent, true)\n\n          return context\n        }\n      }\n    })\n\n    const data = await someService.create({ some: 'thing' })\n\n    assert.deepStrictEqual(\n      data,\n      {\n        some: 'thing',\n        appPresent: true\n      },\n      'App object was present'\n    )\n  })","file":"hooks/before.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"passes errors","suites":["`before` hooks"],"updatePoint":{"line":207,"column":19},"line":207,"code":"  it('passes errors', async () => {\n    const dummyService = {\n      update() {\n        assert.ok(false, 'Never should be called')\n      }\n    }\n\n    const app = feathers().use('/dummy', dummyService)\n    const service = app.service('dummy')\n\n    service.hooks({\n      before: {\n        update() {\n          throw new Error('You are not allowed to update')\n        }\n      }\n    })\n\n    await assert.rejects(() => service.update(1, {}), {\n      message: 'You are not allowed to update'\n    })\n  })","file":"hooks/before.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"calling back with no arguments uses the old ones","suites":["`before` hooks"],"updatePoint":{"line":230,"column":54},"line":230,"code":"  it('calling back with no arguments uses the old ones', async () => {\n    interface DummyParams extends Params {\n      my: string\n    }\n\n    type DummyService = ServiceInterface<any, any, DummyParams>\n\n    const dummyService = {\n      async remove(id: any, params: any) {\n        assert.strictEqual(id, 1, 'Got id')\n        assert.deepStrictEqual(params, { my: 'param' })\n\n        return { id }\n      }\n    }\n    const app = feathers<{ dummy: DummyService }>().use('dummy', dummyService)\n    const service = app.service('dummy')\n\n    service.hooks({\n      before: {\n        remove(context) {\n          return context\n        }\n      }\n    })\n\n    await service.remove(1, { my: 'param' })\n  })","file":"hooks/before.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"adds .hooks() and chains multiple hooks for the same method","suites":["`before` hooks"],"updatePoint":{"line":259,"column":65},"line":259,"code":"  it('adds .hooks() and chains multiple hooks for the same method', async () => {\n    interface DummyParams extends Params {\n      modified: string\n    }\n\n    type DummyService = ServiceInterface<any, any, DummyParams>\n\n    const dummyService = {\n      async create(data: any, params: any) {\n        assert.deepStrictEqual(\n          data,\n          {\n            some: 'thing',\n            modified: 'second data'\n          },\n          'Data modified'\n        )\n\n        assert.deepStrictEqual(\n          params,\n          {\n            modified: 'params'\n          },\n          'Params modified'\n        )\n\n        return data\n      }\n    }\n    const app = feathers<{ dummy: DummyService }>().use('dummy', dummyService)\n    const service = app.service('dummy')\n\n    service.hooks({\n      before: {\n        create(context) {\n          context.params.modified = 'params'\n\n          return context\n        }\n      }\n    })\n\n    service.hooks({\n      before: {\n        create(context) {\n          context.data.modified = 'second data'\n\n          return context\n        }\n      }\n    })\n\n    await service.create({ some: 'thing' })\n  })","file":"hooks/before.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"chains multiple before hooks using array syntax","suites":["`before` hooks"],"updatePoint":{"line":314,"column":53},"line":314,"code":"  it('chains multiple before hooks using array syntax', async () => {\n    interface DummyParams extends Params {\n      modified: string\n    }\n\n    type DummyService = ServiceInterface<any, any, DummyParams>\n\n    const dummyService = {\n      async create(data: any, params: any) {\n        assert.deepStrictEqual(\n          data,\n          {\n            some: 'thing',\n            modified: 'second data'\n          },\n          'Data modified'\n        )\n\n        assert.deepStrictEqual(\n          params,\n          {\n            modified: 'params'\n          },\n          'Params modified'\n        )\n\n        return data\n      }\n    }\n\n    const app = feathers<{ dummy: DummyService }>().use('dummy', dummyService)\n    const service = app.service('dummy')\n\n    service.hooks({\n      before: {\n        create: [\n          function (context) {\n            context.params.modified = 'params'\n\n            return context\n          },\n          function (context) {\n            context.data.modified = 'second data'\n\n            return context\n          }\n        ]\n      }\n    })\n\n    await service.create({ some: 'thing' })\n  })","file":"hooks/before.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":".before hooks run in the correct order (#13)","suites":["`before` hooks"],"updatePoint":{"line":367,"column":50},"line":367,"code":"  it('.before hooks run in the correct order (#13)', async () => {\n    interface DummyParams extends Params {\n      items: string[]\n    }\n\n    type DummyService = ServiceInterface<any, any, DummyParams>\n\n    const app = feathers<{ dummy: DummyService }>().use('dummy', {\n      async get(id: any, params: any) {\n        assert.deepStrictEqual(params.items, ['first', 'second', 'third'])\n\n        return {\n          id,\n          items: []\n        }\n      }\n    })\n    const service = app.service('dummy')\n\n    service.hooks({\n      before: {\n        get(context) {\n          context.params.items = ['first']\n\n          return context\n        }\n      }\n    })\n\n    service.hooks({\n      before: {\n        get: [\n          function (context) {\n            context.params.items.push('second')\n\n            return context\n          },\n          function (context) {\n            context.params.items.push('third')\n\n            return context\n          }\n        ]\n      }\n    })\n\n    await service.get(10)\n  })","file":"hooks/before.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"before all hooks (#11)","suites":["`before` hooks"],"updatePoint":{"line":416,"column":28},"line":416,"code":"  it('before all hooks (#11)', async () => {\n    interface DummyParams extends Params {\n      beforeAllObject: boolean\n      beforeAllMethodArray: boolean\n    }\n\n    type DummyService = ServiceInterface<any, any, DummyParams>\n\n    const app = feathers<{ dummy: DummyService }>().use('dummy', {\n      async get(id: any, params: any) {\n        assert.ok(params.beforeAllObject)\n        assert.ok(params.beforeAllMethodArray)\n\n        return {\n          id,\n          items: []\n        }\n      },\n\n      async find(params: any) {\n        assert.ok(params.beforeAllObject)\n        assert.ok(params.beforeAllMethodArray)\n\n        return []\n      }\n    })\n\n    const service = app.service('dummy')\n\n    service.hooks({\n      before: {\n        all(context) {\n          context.params.beforeAllObject = true\n\n          return context\n        }\n      }\n    })\n\n    service.hooks({\n      before: [\n        function (context) {\n          context.params.beforeAllMethodArray = true\n\n          return context\n        }\n      ]\n    })\n\n    await service.find()\n  })","file":"hooks/before.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"before hooks have service as context and keep it in service method (#17)","suites":["`before` hooks"],"updatePoint":{"line":468,"column":78},"line":468,"code":"  it('before hooks have service as context and keep it in service method (#17)', async () => {\n    interface DummyParams extends Params {\n      test: number\n    }\n\n    class Dummy implements ServiceInterface<any, any, DummyParams> {\n      number = 42\n\n      async get(id: any, params?: DummyParams) {\n        return {\n          id,\n          number: this.number,\n          test: params.test\n        }\n      }\n    }\n\n    const app = feathers<{ dummy: Dummy }>().use('dummy', new Dummy())\n    const service = app.service('dummy')\n\n    service.hooks({\n      before: {\n        get(this: any, context) {\n          context.params.test = this.number + 2\n\n          return context\n        }\n      }\n    })\n\n    const data = await service.get(10)\n\n    assert.deepStrictEqual(data, {\n      id: 10,\n      number: 42,\n      test: 44\n    })\n  })","file":"hooks/before.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"basic error hook","suites":["`error` hooks","on direct service method errors"],"updatePoint":{"line":21,"column":24},"line":21,"code":"    it('basic error hook', async () => {\n      service.hooks({\n        error: {\n          get(context) {\n            assert.strictEqual(context.type, 'error')\n            assert.strictEqual(context.id, 'test')\n            assert.strictEqual(context.method, 'get')\n            assert.strictEqual(context.app, app)\n            assert.strictEqual(context.error.message, 'Something went wrong')\n          }\n        }\n      })\n\n      await assert.rejects(() => service.get('test'), {\n        message: 'Something went wrong'\n      })\n    })","file":"hooks/error.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"can change the error","suites":["`error` hooks","on direct service method errors"],"updatePoint":{"line":39,"column":28},"line":39,"code":"    it('can change the error', async () => {\n      service.hooks({\n        error: {\n          get(context) {\n            context.error = new Error(errorMessage)\n          }\n        }\n      })\n\n      await assert.rejects(() => service.get('test'), {\n        message: errorMessage\n      })\n    })","file":"hooks/error.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"throwing an error","suites":["`error` hooks","on direct service method errors"],"updatePoint":{"line":53,"column":25},"line":53,"code":"    it('throwing an error', async () => {\n      service.hooks({\n        error: {\n          get() {\n            throw new Error(errorMessage)\n          }\n        }\n      })\n\n      await assert.rejects(() => service.get('test'), {\n        message: errorMessage\n      })\n    })","file":"hooks/error.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"rejecting a promise","suites":["`error` hooks","on direct service method errors"],"updatePoint":{"line":67,"column":27},"line":67,"code":"    it('rejecting a promise', async () => {\n      service.hooks({\n        error: {\n          async get() {\n            throw new Error(errorMessage)\n          }\n        }\n      })\n\n      await assert.rejects(() => service.get('test'), {\n        message: errorMessage\n      })\n    })","file":"hooks/error.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"can chain multiple hooks","suites":["`error` hooks","on direct service method errors"],"updatePoint":{"line":81,"column":32},"line":81,"code":"    it('can chain multiple hooks', async () => {\n      service.hooks({\n        error: {\n          get: [\n            function (context) {\n              context.error = new Error(errorMessage)\n              context.error.first = true\n            },\n\n            function (context) {\n              context.error.second = true\n\n              return Promise.resolve(context)\n            },\n\n            function (context) {\n              context.error.third = true\n\n              return context\n            }\n          ]\n        }\n      })\n\n      await assert.rejects(() => service.get('test'), {\n        message: errorMessage,\n        first: true,\n        second: true,\n        third: true\n      })\n    })","file":"hooks/error.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"setting `context.result` will return result","suites":["`error` hooks","on direct service method errors"],"updatePoint":{"line":113,"column":51},"line":113,"code":"    it('setting `context.result` will return result', async () => {\n      const data = {\n        message: 'It worked'\n      }\n\n      service.hooks({\n        error: {\n          get(context) {\n            context.result = data\n          }\n        }\n      })\n\n      const result = await service.get(10)\n\n      assert.deepStrictEqual(result, data)\n    })","file":"hooks/error.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"allows to set `context.result = null` in error hooks (#865)","suites":["`error` hooks","on direct service method errors"],"updatePoint":{"line":131,"column":67},"line":131,"code":"    it('allows to set `context.result = null` in error hooks (#865)', async () => {\n      const app = feathers().use('/dummy', {\n        async get() {\n          throw new Error('Damnit')\n        }\n      })\n\n      app.service('dummy').hooks({\n        error: {\n          get(context: any) {\n            context.result = null\n          }\n        }\n      })\n\n      const result = await app.service('dummy').get(1)\n\n      assert.strictEqual(result, null)\n    })","file":"hooks/error.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"uses the current hook object if thrown in a service method","suites":["`error` hooks","on direct service method errors"],"updatePoint":{"line":151,"column":66},"line":151,"code":"    it('uses the current hook object if thrown in a service method', async () => {\n      const app = feathers().use('/dummy', {\n        async get() {\n          throw new Error('Something went wrong')\n        }\n      })\n      const service = app.service('dummy')\n\n      service.hooks({\n        before(context) {\n          context.id = 42\n        },\n        error(context) {\n          assert.strictEqual(context.id, 42)\n        }\n      })\n\n      await assert.rejects(() => service.get(1), {\n        message: 'Something went wrong'\n      })\n    })","file":"hooks/error.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"in before hook","suites":["`error` hooks","error in hooks"],"updatePoint":{"line":193,"column":22},"line":193,"code":"    it('in before hook', async () => {\n      service\n        .hooks({\n          before() {\n            throw new Error(errorMessage)\n          }\n        })\n        .hooks({\n          error(context) {\n            assert.strictEqual(context.original.type, 'before', 'Original hook still set')\n            assert.strictEqual(context.id, 'dishes')\n            assert.strictEqual(context.error.message, errorMessage)\n          }\n        })\n\n      await assert.rejects(() => service.get('dishes'), {\n        message: errorMessage\n      })\n    })","file":"hooks/error.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"in after hook","suites":["`error` hooks","error in hooks"],"updatePoint":{"line":213,"column":21},"line":213,"code":"    it('in after hook', async () => {\n      service.hooks({\n        after() {\n          throw new Error(errorMessage)\n        },\n\n        error(context) {\n          assert.strictEqual(context.original.type, 'after', 'Original hook still set')\n          assert.strictEqual(context.id, 'dishes')\n          assert.deepStrictEqual(context.original.result, {\n            id: 'dishes',\n            text: 'You have to do dishes'\n          })\n          assert.strictEqual(context.error.message, errorMessage)\n        }\n      })\n\n      await assert.rejects(() => service.get('dishes'), {\n        message: errorMessage\n      })\n    })","file":"hooks/error.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"uses the current hook object if thrown in a hook and sets context.original","suites":["`error` hooks","error in hooks"],"updatePoint":{"line":235,"column":82},"line":235,"code":"    it('uses the current hook object if thrown in a hook and sets context.original', async () => {\n      service.hooks({\n        after(context) {\n          context.modified = true\n\n          throw new Error(errorMessage)\n        },\n\n        error(context) {\n          assert.ok(context.modified)\n          assert.strictEqual(context.original.type, 'after')\n        }\n      })\n\n      await assert.rejects(() => service.get('laundry'), {\n        message: errorMessage\n      })\n    })","file":"hooks/error.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"Error in before hook causes inter-service calls to have wrong hook context (#841)","suites":["`error` hooks","error in hooks"],"updatePoint":{"line":255,"column":87},"line":255,"code":"  it('Error in before hook causes inter-service calls to have wrong hook context (#841)', async () => {\n    const app = feathers()\n\n    let service1Params: any\n    let service2Params: any\n\n    app.use('/service1', {\n      async find() {\n        return { message: 'service1 success' }\n      }\n    })\n\n    app.service('service1').hooks({\n      before(context: any) {\n        service1Params = context.params\n        throw new Error('Error in service1 before hook')\n      }\n    })\n\n    app.use('/service2', {\n      async find() {\n        await app.service('/service1').find({})\n\n        return { message: 'service2 success' }\n      }\n    })\n\n    app.service('service2').hooks({\n      before(context: any) {\n        service2Params = context.params\n        context.params.foo = 'bar'\n      },\n      error(context: any) {\n        assert.ok(service1Params !== context.params)\n        assert.ok(service2Params === context.params)\n        assert.strictEqual(context.path, 'service2')\n        assert.strictEqual(context.params.foo, 'bar')\n      }\n    })\n\n    await assert.rejects(() => app.service('/service2').find(), {\n      message: 'Error in service1 before hook'\n    })\n  })","file":"hooks/error.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"mix @feathersjs/hooks and .hooks","suites":["hooks basics"],"updatePoint":{"line":6,"column":38},"line":6,"code":"  it('mix @feathersjs/hooks and .hooks', async () => {\n    interface SimpleParams extends Params {\n      chain: string[]\n    }\n    class SimpleService {\n      async get(id: Id, params: SimpleParams) {\n        return { id, chain: params.chain }\n      }\n    }\n\n    hooks(SimpleService.prototype, [\n      async (ctx: HookContext, next: NextFunction) => {\n        ctx.params.chain.push('@hooks all before')\n        await next()\n        ctx.params.chain.push('@hooks all after')\n      }\n    ])\n\n    hooks(SimpleService, {\n      get: [\n        async (ctx: HookContext, next: NextFunction) => {\n          assert.ok(ctx.app)\n          assert.ok(ctx.service)\n          ctx.params.chain.push('@hooks get before')\n          await next()\n          ctx.params.chain.push('@hooks get after')\n        }\n      ]\n    })\n\n    const app = feathers().use('/dummy', new SimpleService())\n    const service = app.service('dummy')\n\n    app.hooks([\n      async function appHook(ctx: HookContext, next: NextFunction) {\n        assert.ok(ctx.app)\n        assert.ok(ctx.service)\n\n        ctx.params.chain = ['app.hooks before']\n        await next()\n        ctx.params.chain.push('app.hooks after')\n      }\n    ])\n\n    app.hooks({\n      before: [\n        (ctx: HookContext) => {\n          ctx.params.chain.push('app.hooks regular before')\n        }\n      ],\n      after: [\n        (ctx: HookContext) => {\n          ctx.params.chain.push('app.hooks regular after')\n        }\n      ]\n    })\n\n    service.hooks({\n      before: {\n        get: (ctx: HookContext) => {\n          ctx.params.chain.push('service.hooks regular before')\n        }\n      },\n      after: {\n        get: (ctx: HookContext) => {\n          ctx.params.chain.push('service.hooks regular after')\n        }\n      }\n    })\n\n    service.hooks({\n      get: [\n        async (ctx: HookContext, next: NextFunction) => {\n          ctx.params.chain.push('service.hooks get before')\n          await next()\n          ctx.params.chain.push('service.hooks get after')\n        }\n      ]\n    })\n\n    service.hooks({\n      before: {\n        get: (ctx: HookContext) => {\n          ctx.params.chain.push('service.hooks 2 regular before')\n        }\n      },\n      after: {\n        get: (ctx: HookContext) => {\n          ctx.params.chain.push('service.hooks 2 regular after')\n        }\n      }\n    })\n\n    const { chain } = await service.get(1, {})\n\n    assert.deepStrictEqual(chain, [\n      'app.hooks before',\n      'app.hooks regular before',\n      '@hooks all before',\n      '@hooks get before',\n      'service.hooks get before',\n      'service.hooks regular before',\n      'service.hooks 2 regular before',\n      'service.hooks regular after',\n      'service.hooks 2 regular after',\n      'service.hooks get after',\n      '@hooks get after',\n      '@hooks all after',\n      'app.hooks regular after',\n      'app.hooks after'\n    ])\n  })","file":"hooks/hooks.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"works with services that return a promise (feathers-hooks#28)","suites":["hooks basics"],"updatePoint":{"line":138,"column":67},"line":138,"code":"  it('works with services that return a promise (feathers-hooks#28)', async () => {\n    interface DummyParams extends Params {\n      user: string\n    }\n\n    const app = feathers<{ dummy: ServiceInterface<any, any, DummyParams> }>().use('dummy', {\n      async get(id: any, params: any) {\n        return { id, user: params.user }\n      }\n    })\n    const service = app.service('dummy')\n\n    service.hooks({\n      before: {\n        get(context) {\n          context.params.user = 'David'\n        }\n      },\n      after: {\n        get(context) {\n          context.result.after = true\n        }\n      }\n    })\n\n    const data = await service.get(10)\n\n    assert.deepStrictEqual(data, { id: 10, user: 'David', after: true })\n  })","file":"hooks/hooks.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"has context.app, context.service and context.path","suites":["hooks basics"],"updatePoint":{"line":168,"column":55},"line":168,"code":"  it('has context.app, context.service and context.path', async () => {\n    const app = feathers().use('/dummy', {\n      async get(id: any) {\n        return { id }\n      }\n    })\n    const service = app.service('dummy')\n\n    service.hooks({\n      before(context) {\n        assert.strictEqual(this, service)\n        assert.strictEqual(context.service, service)\n        assert.strictEqual(context.app, app)\n        assert.strictEqual(context.path, 'dummy')\n      }\n    })\n\n    await service.get('test')\n  })","file":"hooks/hooks.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"does not error when result is null","suites":["hooks basics"],"updatePoint":{"line":188,"column":40},"line":188,"code":"  it('does not error when result is null', async () => {\n    const app = feathers().use('/dummy', {\n      async get(id: any) {\n        return { id }\n      }\n    })\n    const service = app.service('dummy')\n\n    service.hooks({\n      after: {\n        get: [\n          function (context) {\n            context.result = null\n            return context\n          }\n        ]\n      }\n    })\n\n    const result = await service.get(1)\n\n    assert.strictEqual(result, null)\n  })","file":"hooks/hooks.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"registering an already hooked service works (#154)","suites":["hooks basics"],"updatePoint":{"line":212,"column":56},"line":212,"code":"  it('registering an already hooked service works (#154)', () => {\n    const app = feathers().use('/dummy', {\n      async get(id: any, params: any) {\n        return { id, params }\n      }\n    })\n\n    app.use('/dummy2', app.service('dummy'))\n  })","file":"hooks/hooks.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"on normal method call","suites":["hooks basics","returns the context when passing it as last parameter"],"updatePoint":{"line":223,"column":29},"line":223,"code":"    it('on normal method call', async () => {\n      const app = feathers().use('/dummy', {\n        async get(id: any, params: any) {\n          return { id, params }\n        }\n      })\n      const service = app.service('dummy')\n      const context = createContext(service, 'get')\n      const returnedContext = await app.service('dummy').get(10, {}, context)\n\n      assert.strictEqual(returnedContext.service, app.service('dummy'))\n      assert.strictEqual(returnedContext.type, 'around')\n      assert.strictEqual(returnedContext.path, 'dummy')\n      assert.deepStrictEqual(returnedContext.result, {\n        id: 10,\n        params: {}\n      })\n    })","file":"hooks/hooks.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"on error","suites":["hooks basics","returns the context when passing it as last parameter",10],"line":242,"code":"    it.skip('on error', async () => {","file":"hooks/hooks.test.ts","skipped":true,"dir":"packages/feathers/test"},{"name":"still swallows error if context.result is set","suites":["hooks basics","returns the context when passing it as last parameter",10],"updatePoint":{"line":301,"column":53},"line":301,"code":"    it('still swallows error if context.result is set', async () => {\n      const result = { message: 'this is a test' }\n      const app = feathers().use('/dummy', {\n        async get() {\n          throw new Error('Something went wrong')\n        }\n      })\n\n      app.service('dummy').hooks({\n        error(context: any) {\n          context.result = result\n        }\n      })\n\n      const service = app.service('dummy')\n      const context = createContext(service, 'get')\n      const returnedContext = await service.get(10, {}, context)\n\n      assert.ok(returnedContext.error)\n      assert.deepStrictEqual(returnedContext.result, result)\n    })","file":"hooks/hooks.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"can register hooks on a custom method, still adds hooks to default methods","suites":["hooks basics","returns the context when passing it as last parameter",10],"updatePoint":{"line":324,"column":80},"line":324,"code":"  it('can register hooks on a custom method, still adds hooks to default methods', async () => {\n    class Dummy {\n      async get(id: Id) {\n        return { id }\n      }\n\n      async create(data: any) {\n        return data\n      }\n\n      async custom(data: any) {\n        return data\n      }\n    }\n\n    const app = feathers<{\n      dummy: Dummy\n    }>().use('dummy', new Dummy(), {\n      methods: ['get', 'custom']\n    })\n\n    app.service('dummy').hooks({\n      custom: [\n        async (context, next) => {\n          context.data.fromHook = true\n          await next()\n        }\n      ],\n      create: [async (_context, next) => next()]\n    })\n\n    assert.deepStrictEqual(\n      await app.service('dummy').custom({\n        message: 'testing'\n      }),\n      {\n        message: 'testing',\n        fromHook: true\n      }\n    )\n  })","file":"hooks/hooks.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"normalizes params to object even when it is falsy (#1001)","suites":["hooks basics","returns the context when passing it as last parameter",10],"updatePoint":{"line":366,"column":63},"line":366,"code":"  it('normalizes params to object even when it is falsy (#1001)', async () => {\n    const app = feathers().use('/dummy', {\n      async get(id: Id, params: Params) {\n        return { id, params }\n      }\n    })\n\n    const result = await app.service('dummy').get('test', null)\n\n    assert.deepStrictEqual(result, {\n      id: 'test',\n      params: {}\n    })\n  })","file":"hooks/hooks.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"allows to return new context in basic hooks (#2451)","suites":["hooks basics","returns the context when passing it as last parameter",10],"updatePoint":{"line":381,"column":57},"line":381,"code":"  it('allows to return new context in basic hooks (#2451)', async () => {\n    const app = feathers().use('/dummy', {\n      async get() {\n        return {}\n      }\n    })\n    const service = app.service('dummy')\n\n    service.hooks({\n      before: {\n        get: [\n          (context) => {\n            return {\n              ...context,\n              value: 'something'\n            }\n          },\n          (context) => {\n            assert.strictEqual(context.value, 'something')\n          }\n        ]\n      },\n      after: {\n        get: [\n          (context) => {\n            context.result = {\n              value: context.value\n            }\n          }\n        ]\n      }\n    })\n\n    const data = await service.get(10)\n\n    assert.deepStrictEqual(data, {\n      value: 'something'\n    })\n  })","file":"hooks/hooks.test.ts","skipped":false,"dir":"packages/feathers/test"},{"name":"successful local authentication","suites":["@feathersjs/koa/authentication","service authentication"],"updatePoint":{"line":33,"column":39},"line":33,"code":"    it('successful local authentication', () => {\n      assert.ok(authResult.accessToken)\n      assert.strictEqual(authResult.user.email, email)\n      assert.strictEqual(authResult.user.password, undefined)\n    })","file":"authentication.test.ts","skipped":false,"dir":"packages/koa/test"},{"name":"local authentication with wrong password fails","suites":["@feathersjs/koa/authentication","service authentication"],"updatePoint":{"line":39,"column":54},"line":39,"code":"    it('local authentication with wrong password fails', async () => {\n      try {\n        await axios.post<any>('/authentication', {\n          strategy: 'local',\n          password: 'wrong',\n          email\n        })\n        assert.fail('Should never get here')\n      } catch (error: any) {\n        const { data } = error.response\n        assert.strictEqual(data.name, 'NotAuthenticated')\n        assert.strictEqual(data.message, 'Invalid login')\n      }\n    })","file":"authentication.test.ts","skipped":false,"dir":"packages/koa/test"},{"name":"authenticating with JWT works but returns same accessToken","suites":["@feathersjs/koa/authentication","service authentication"],"updatePoint":{"line":54,"column":66},"line":54,"code":"    it('authenticating with JWT works but returns same accessToken', async () => {\n      const { accessToken } = authResult\n\n      const { data } = await axios.post<any>('/authentication', {\n        strategy: 'jwt',\n        accessToken\n      })\n\n      assert.strictEqual(data.accessToken, accessToken)\n      assert.strictEqual(data.authentication.strategy, 'jwt')\n      assert.strictEqual(data.authentication.payload.sub, user.id.toString())\n      assert.strictEqual(data.user.email, email)\n    })","file":"authentication.test.ts","skipped":false,"dir":"packages/koa/test"},{"name":"can make a protected request with Authorization header","suites":["@feathersjs/koa/authentication","service authentication"],"updatePoint":{"line":68,"column":62},"line":68,"code":"    it('can make a protected request with Authorization header', async () => {\n      const { accessToken } = authResult\n\n      const { data } = await axios.get<any>('/dummy/dave?user[name]=thing&user[message]=hi', {\n        headers: {\n          Authorization: accessToken\n        }\n      })\n\n      assert.strictEqual(data.id, 'dave')\n      assert.deepStrictEqual(data.params.query, {\n        user: {\n          name: 'thing',\n          message: 'hi'\n        }\n      })\n      assert.deepStrictEqual(data.params.user, user)\n      assert.strictEqual(data.params.authentication.accessToken, accessToken)\n    })","file":"authentication.test.ts","skipped":false,"dir":"packages/koa/test"},{"name":"errors when there are no authStrategies and parseStrategies","suites":["@feathersjs/koa/authentication","service authentication"],"updatePoint":{"line":88,"column":67},"line":88,"code":"    it('errors when there are no authStrategies and parseStrategies', async () => {\n      const { accessToken } = authResult\n\n      app.get('authentication').authStrategies = []\n      delete app.get('authentication').parseStrategies\n\n      try {\n        await axios.get<any>('/dummy/dave', {\n          headers: {\n            Authorization: accessToken\n          }\n        })\n        assert.fail('Should never get here')\n      } catch (error: any) {\n        assert.strictEqual(error.response.data.name, 'NotAuthenticated')\n        app.get('authentication').authStrategies = ['jwt', 'local']\n      }\n    })","file":"authentication.test.ts","skipped":false,"dir":"packages/koa/test"},{"name":"can make a protected request with Authorization header and bearer scheme","suites":["@feathersjs/koa/authentication","service authentication"],"updatePoint":{"line":107,"column":80},"line":107,"code":"    it('can make a protected request with Authorization header and bearer scheme', () => {\n      const { accessToken } = authResult\n\n      return axios\n        .get<any>('/dummy/dave', {\n          headers: {\n            Authorization: ` Bearer: ${accessToken}`\n          }\n        })\n        .then((res) => {\n          const {\n            data,\n            data: { params }\n          } = res\n\n          assert.strictEqual(data.id, 'dave')\n          assert.deepStrictEqual(params.user, user)\n          assert.strictEqual(params.authentication.accessToken, accessToken)\n        })\n    })","file":"authentication.test.ts","skipped":false,"dir":"packages/koa/test"},{"name":"throws an error when initialized with invalid application","suites":["@feathersjs/koa"],"updatePoint":{"line":64,"column":63},"line":64,"code":"  it('throws an error when initialized with invalid application', () => {\n    try {\n      koa({} as Application)\n      assert.fail('Should never get here')\n    } catch (error: any) {\n      assert.equal(error.message, '@feathersjs/koa requires a valid Feathers application instance')\n    }\n  })","file":"index.test.ts","skipped":false,"dir":"packages/koa/test"},{"name":"returns Koa instance when no Feathers app is passed","suites":["@feathersjs/koa"],"updatePoint":{"line":73,"column":57},"line":73,"code":"  it('returns Koa instance when no Feathers app is passed', () => {\n    assert.ok(koa() instanceof Koa)\n  })","file":"index.test.ts","skipped":false,"dir":"packages/koa/test"},{"name":"Koa wrapped and context.app are the same","suites":["@feathersjs/koa"],"updatePoint":{"line":77,"column":46},"line":77,"code":"  it('Koa wrapped and context.app are the same', async () => {\n    const app = koa(feathers())\n\n    app.use('/test', {\n      async get(id: Id) {\n        return { id }\n      }\n    })\n\n    app.service('test').hooks({\n      before: {\n        get: [\n          (context) => {\n            assert.ok(context.app === app)\n          }\n        ]\n      }\n    })\n\n    assert.deepStrictEqual(await app.service('test').get('testing'), {\n      id: 'testing'\n    })\n  })","file":"index.test.ts","skipped":false,"dir":"packages/koa/test"},{"name":"starts as a Koa and Feathers application","suites":["@feathersjs/koa"],"updatePoint":{"line":101,"column":46},"line":101,"code":"  it('starts as a Koa and Feathers application', async () => {\n    const { data } = await axios.get<any>('http://localhost:8465/middleware')\n    const todo = await app.service('todo').get('dishes', {\n      query: {}\n    })\n\n    assert.deepEqual(data, {\n      message: 'Hello from middleware',\n      feathers: {\n        provider: 'rest'\n      }\n    })\n    assert.deepEqual(todo, {\n      id: 'dishes',\n      description: 'You have to do dishes!'\n    })\n  })","file":"index.test.ts","skipped":false,"dir":"packages/koa/test"},{"name":"supports custom service middleware","suites":["@feathersjs/koa"],"updatePoint":{"line":119,"column":40},"line":119,"code":"  it('supports custom service middleware', async () => {\n    const { data } = await axios.get<any>('http://localhost:8465/todo/custom-middleware')\n\n    assert.deepStrictEqual(data, {\n      id: 'custom-middleware',\n      description: 'Description from custom middleware'\n    })\n  })","file":"index.test.ts","skipped":false,"dir":"packages/koa/test"},{"name":"works with custom methods that are allowed","suites":["@feathersjs/koa"],"updatePoint":{"line":128,"column":48},"line":128,"code":"  it('works with custom methods that are allowed', async () => {\n    const { data } = await axios.post<any>(\n      'http://localhost:8465/todo',\n      {\n        message: 'Custom hello'\n      },\n      {\n        headers: {\n          'X-Service-Method': 'customMethod'\n        }\n      }\n    )\n\n    assert.deepStrictEqual(data, {\n      data: { message: 'Custom hello' },\n      method: 'customMethod',\n      provider: 'rest'\n    })\n\n    await assert.rejects(\n      () =>\n        axios.post<any>(\n          'http://localhost:8465/todo',\n          {},\n          {\n            headers: {\n              'X-Service-Method': 'internalMethod'\n            }\n          }\n        ),\n      (error: any) => {\n        const { data } = error.response\n\n        assert.strictEqual(data.code, 405)\n        assert.strictEqual(data.message, 'Method `internalMethod` is not supported by this endpoint.')\n\n        return true\n      }\n    )\n  })","file":"index.test.ts","skipped":false,"dir":"packages/koa/test"},{"name":"throws a 404 NotFound JSON error","suites":["@feathersjs/koa"],"updatePoint":{"line":169,"column":38},"line":169,"code":"  it('throws a 404 NotFound JSON error', async () => {\n    await assert.rejects(\n      () =>\n        axios.post<any>(\n          'http://localhost:8465/no/where',\n          {},\n          {\n            headers: {\n              'X-Service-Method': 'internalMethod',\n              Accept: 'application/json'\n            }\n          }\n        ),\n      (error: any) => {\n        const { data } = error.response\n\n        assert.deepStrictEqual(data, {\n          name: 'NotFound',\n          message: 'Path /no/where not found',\n          code: 404,\n          className: 'not-found'\n        })\n\n        return true\n      }\n    )\n  })","file":"index.test.ts","skipped":false,"dir":"packages/koa/test"},{"name":".teardown closes http server","suites":["@feathersjs/koa"],"updatePoint":{"line":197,"column":34},"line":197,"code":"  it('.teardown closes http server', async () => {\n    const app = koa(feathers())\n    let called = false\n\n    const server = await app.listen(8787)\n\n    server.on('close', () => {\n      called = true\n    })\n\n    await app.teardown()\n    assert.ok(called)\n  })","file":"index.test.ts","skipped":false,"dir":"packages/koa/test"},{"name":"update with string id works","suites":["Feathers Memory Service"],"updatePoint":{"line":110,"column":33},"line":110,"code":"  it('update with string id works', async () => {\n    const people = app.service('people')\n    const person = await people.create({\n      name: 'Tester',\n      age: 33\n    })\n\n    const updatedPerson: any = await people.update(person.id.toString(), person)\n\n    assert.strictEqual(typeof updatedPerson.id, 'number')\n\n    await people.remove(person.id.toString())\n  })","file":"index.test.ts","skipped":false,"dir":"packages/memory/test"},{"name":"patch record with prop also in query","suites":["Feathers Memory Service"],"updatePoint":{"line":124,"column":42},"line":124,"code":"  it('patch record with prop also in query', async () => {\n    app.use('animals', new MemoryService<Animal>({ multi: true }))\n    const animals = app.service('animals')\n    await animals.create([\n      {\n        type: 'cat',\n        age: 30\n      },\n      {\n        type: 'dog',\n        age: 10\n      }\n    ])\n\n    const [updated] = await animals.patch(null, { age: 40 }, { query: { age: 30 } })\n\n    assert.strictEqual(updated.age, 40)\n\n    await animals.remove(null, {})\n  })","file":"index.test.ts","skipped":false,"dir":"packages/memory/test"},{"name":"allows to pass custom find and sort matcher","suites":["Feathers Memory Service"],"updatePoint":{"line":145,"column":49},"line":145,"code":"  it('allows to pass custom find and sort matcher', async () => {\n    let sorterCalled = false\n    let matcherCalled = false\n\n    app.use(\n      'matcher',\n      new MemoryService({\n        matcher() {\n          matcherCalled = true\n          return function () {\n            return true\n          }\n        },\n\n        sorter() {\n          sorterCalled = true\n          return function () {\n            return 0\n          }\n        }\n      })\n    )\n\n    await app.service('matcher').find({\n      query: { something: 1, $sort: { something: 1 } }\n    })\n\n    assert.ok(sorterCalled, 'sorter called')\n    assert.ok(matcherCalled, 'matcher called')\n  })","file":"index.test.ts","skipped":false,"dir":"packages/memory/test"},{"name":"does not modify the original data","suites":["Feathers Memory Service"],"updatePoint":{"line":176,"column":39},"line":176,"code":"  it('does not modify the original data', async () => {\n    const people = app.service('people')\n\n    const person = await people.create({\n      name: 'Delete tester',\n      age: 33\n    })\n\n    delete person.age\n\n    const otherPerson = await people.get(person.id)\n\n    assert.strictEqual(otherPerson.age, 33)\n\n    await people.remove(person.id)\n  })","file":"index.test.ts","skipped":false,"dir":"packages/memory/test"},{"name":"does not $select the id","suites":["Feathers Memory Service"],"updatePoint":{"line":193,"column":29},"line":193,"code":"  it('does not $select the id', async () => {\n    const people = app.service('people')\n    const person = await people.create({\n      name: 'Tester'\n    })\n    const results = await people.find({\n      paginate: false,\n      query: {\n        name: 'Tester',\n        $select: ['name']\n      }\n    })\n\n    assert.deepStrictEqual(results[0], { name: 'Tester' }, 'deepEquals the same')\n\n    await people.remove(person.id)\n  })","file":"index.test.ts","skipped":false,"dir":"packages/memory/test"},{"name":"update with null throws error","suites":["Feathers Memory Service"],"updatePoint":{"line":211,"column":35},"line":211,"code":"  it('update with null throws error', async () => {\n    try {\n      await app.service('people').update(null, {})\n      throw new Error('Should never get here')\n    } catch (error: any) {\n      assert.strictEqual(error.message, \"You can not replace multiple instances. Did you mean 'patch'?\")\n    }\n  })","file":"index.test.ts","skipped":false,"dir":"packages/memory/test"},{"name":"supports custom headers","suites":["Axios REST connector"],"updatePoint":{"line":30,"column":29},"line":30,"code":"  it('supports custom headers', async () => {\n    const headers = {\n      Authorization: 'let-me-in'\n    }\n\n    const todo = await service.get(0, { headers })\n\n    assert.deepStrictEqual(todo, {\n      id: 0,\n      authorization: 'let-me-in',\n      text: 'some todo',\n      complete: false,\n      query: {}\n    })\n  })","file":"axios.test.ts","skipped":false,"dir":"packages/rest-client/test"},{"name":"uses params.connection for additional options","suites":["Axios REST connector"],"updatePoint":{"line":46,"column":51},"line":46,"code":"  it('uses params.connection for additional options', async () => {\n    const connection = {\n      headers: {\n        Authorization: 'let-me-in'\n      }\n    }\n\n    const todo = await service.get(0, { connection })\n\n    assert.deepStrictEqual(todo, {\n      id: 0,\n      authorization: 'let-me-in',\n      text: 'some todo',\n      complete: false,\n      query: {}\n    })\n  })","file":"axios.test.ts","skipped":false,"dir":"packages/rest-client/test"},{"name":"can initialize a client instance","suites":["Axios REST connector"],"updatePoint":{"line":64,"column":38},"line":64,"code":"  it('can initialize a client instance', async () => {\n    const init = rest(url).axios(axios)\n    const todoService = init.service('todos')\n\n    assert.ok(todoService instanceof init.Service, 'Returned service is a client')\n\n    const todos = await todoService.find({})\n\n    assert.deepStrictEqual(todos, [\n      {\n        text: 'some todo',\n        complete: false,\n        id: 0\n      }\n    ])\n  })","file":"axios.test.ts","skipped":false,"dir":"packages/rest-client/test"},{"name":"supports nested arrays in queries","suites":["Axios REST connector"],"updatePoint":{"line":81,"column":39},"line":81,"code":"  it('supports nested arrays in queries', async () => {\n    const query = { test: { $in: ['0', '1', '2'] } }\n\n    const data = await service.get(0, { query })\n\n    assert.deepStrictEqual(data.query, query)\n  })","file":"axios.test.ts","skipped":false,"dir":"packages/rest-client/test"},{"name":"remove many","suites":["Axios REST connector"],"updatePoint":{"line":89,"column":17},"line":89,"code":"  it('remove many', async () => {\n    const todo: any = await service.remove(null)\n\n    assert.strictEqual(todo.id, null)\n    assert.strictEqual(todo.text, 'deleted many')\n  })","file":"axios.test.ts","skipped":false,"dir":"packages/rest-client/test"},{"name":"converts feathers errors (#50)","suites":["Axios REST connector"],"updatePoint":{"line":96,"column":36},"line":96,"code":"  it('converts feathers errors (#50)', async () => {\n    try {\n      await service.get(0, { query: { feathersError: true } })\n      assert.fail('Should never get here')\n    } catch (error: any) {\n      assert.ok(error instanceof NotAcceptable)\n      assert.strictEqual(error.message, 'This is a Feathers error')\n      assert.strictEqual(error.code, 406)\n    }\n  })","file":"axios.test.ts","skipped":false,"dir":"packages/rest-client/test"},{"name":"ECONNREFUSED errors are serializable","suites":["Axios REST connector"],"updatePoint":{"line":107,"column":42},"line":107,"code":"  it('ECONNREFUSED errors are serializable', async () => {\n    const url = 'http://localhost:60000'\n    const setup = rest(url).axios(axios)\n    const app = feathers().configure(setup)\n\n    try {\n      await app.service('something').find()\n      assert.fail('Should never get here')\n    } catch (e: any) {\n      const err = JSON.parse(JSON.stringify(e))\n\n      assert.strictEqual(err.name, 'Unavailable')\n      assert.ok(err.message.startsWith('connect ECONNREFUSED'))\n      assert.ok(e.data.config)\n    }\n  })","file":"axios.test.ts","skipped":false,"dir":"packages/rest-client/test"},{"name":"works with custom method .customMethod","suites":["Axios REST connector"],"updatePoint":{"line":124,"column":44},"line":124,"code":"  it('works with custom method .customMethod', async () => {\n    const result = await service.customMethod({ message: 'hi' })\n\n    assert.deepEqual(result, {\n      data: { message: 'hi' },\n      provider: 'rest',\n      type: 'customMethod'\n    })\n  })","file":"axios.test.ts","skipped":false,"dir":"packages/rest-client/test"},{"name":"supports custom headers","suites":["fetch REST connector"],"updatePoint":{"line":40,"column":29},"line":40,"code":"  it('supports custom headers', async () => {\n    const headers = {\n      Authorization: 'let-me-in'\n    }\n\n    const todo = await service.get(0, { headers })\n\n    assert.deepStrictEqual(todo, {\n      id: 0,\n      text: 'some todo',\n      authorization: 'let-me-in',\n      complete: false,\n      query: {}\n    })\n  })","file":"fetch.test.ts","skipped":false,"dir":"packages/rest-client/test"},{"name":"supports params.connection","suites":["fetch REST connector"],"updatePoint":{"line":56,"column":32},"line":56,"code":"  it('supports params.connection', async () => {\n    const connection = {\n      headers: {\n        Authorization: 'let-me-in'\n      }\n    }\n\n    const todo = await service.get(0, { connection })\n\n    assert.deepStrictEqual(todo, {\n      id: 0,\n      text: 'some todo',\n      authorization: 'let-me-in',\n      complete: false,\n      query: {}\n    })\n  })","file":"fetch.test.ts","skipped":false,"dir":"packages/rest-client/test"},{"name":"handles errors properly","suites":["fetch REST connector"],"updatePoint":{"line":74,"column":29},"line":74,"code":"  it('handles errors properly', async () => {\n    try {\n      await service.get(-1, {})\n      assert.fail('Should never get here')\n    } catch (error: any) {\n      assert.strictEqual(error.code, 404)\n    }\n  })","file":"fetch.test.ts","skipped":false,"dir":"packages/rest-client/test"},{"name":"supports nested arrays in queries","suites":["fetch REST connector"],"updatePoint":{"line":83,"column":39},"line":83,"code":"  it('supports nested arrays in queries', async () => {\n    const query = { test: { $in: ['0', '1', '2'] } }\n\n    const data = await service.get(0, { query })\n\n    assert.deepStrictEqual(data.query, query)\n  })","file":"fetch.test.ts","skipped":false,"dir":"packages/rest-client/test"},{"name":"can initialize a client instance","suites":["fetch REST connector"],"updatePoint":{"line":91,"column":38},"line":91,"code":"  it('can initialize a client instance', async () => {\n    const init = rest(url).fetch(fetch)\n    const todoService = init.service('todos')\n\n    assert.ok(todoService instanceof init.Service, 'Returned service is a client')\n\n    const todos = await todoService.find({})\n\n    assert.deepStrictEqual(todos, [\n      {\n        text: 'some todo',\n        complete: false,\n        id: 0\n      }\n    ])\n  })","file":"fetch.test.ts","skipped":false,"dir":"packages/rest-client/test"},{"name":"remove many","suites":["fetch REST connector"],"updatePoint":{"line":108,"column":17},"line":108,"code":"  it('remove many', async () => {\n    const todo: any = await service.remove(null)\n\n    assert.strictEqual(todo.id, null)\n    assert.strictEqual(todo.text, 'deleted many')\n  })","file":"fetch.test.ts","skipped":false,"dir":"packages/rest-client/test"},{"name":"converts feathers errors (#50)","suites":["fetch REST connector"],"updatePoint":{"line":115,"column":36},"line":115,"code":"  it('converts feathers errors (#50)', async () => {\n    try {\n      await service.get(0, { query: { feathersError: true } })\n      assert.fail('Should never get here')\n    } catch (error: any) {\n      assert.ok(error.response)\n      assert.ok(error instanceof NotAcceptable)\n      assert.strictEqual(error.message, 'This is a Feathers error')\n      assert.strictEqual(error.code, 406)\n      assert.deepStrictEqual(error.data, { data: true })\n    }\n  })","file":"fetch.test.ts","skipped":false,"dir":"packages/rest-client/test"},{"name":"returns null for 204 responses","suites":["fetch REST connector"],"updatePoint":{"line":128,"column":36},"line":128,"code":"  it('returns null for 204 responses', async () => {\n    const response = await service.remove(0, {\n      query: { noContent: true }\n    })\n\n    assert.strictEqual(response, null)\n  })","file":"fetch.test.ts","skipped":false,"dir":"packages/rest-client/test"},{"name":"works with custom method .customMethod","suites":["fetch REST connector"],"updatePoint":{"line":136,"column":44},"line":136,"code":"  it('works with custom method .customMethod', async () => {\n    const result = await service.customMethod({ message: 'hi' })\n\n    assert.deepEqual(result, {\n      data: { message: 'hi!' },\n      provider: 'rest',\n      type: 'customMethod'\n    })\n  })","file":"fetch.test.ts","skipped":false,"dir":"packages/rest-client/test"},{"name":"is built correctly","suites":["REST client tests"],"updatePoint":{"line":8,"column":24},"line":8,"code":"  it('is built correctly', () => {\n    const transports = init()\n\n    assert.strictEqual(typeof init, 'function')\n    assert.strictEqual(typeof transports.superagent, 'function')\n    assert.strictEqual(typeof transports.fetch, 'function')\n    assert.strictEqual(typeof transports.axios, 'function')\n  })","file":"index.test.ts","skipped":false,"dir":"packages/rest-client/test"},{"name":"throw errors when no connection is provided","suites":["REST client tests"],"updatePoint":{"line":17,"column":49},"line":17,"code":"  it('throw errors when no connection is provided', () => {\n    const transports = init()\n\n    try {\n      // @ts-ignore\n      transports.fetch()\n    } catch (e: any) {\n      assert.strictEqual(e.message, 'fetch has to be provided to feathers-rest')\n    }\n  })","file":"index.test.ts","skipped":false,"dir":"packages/rest-client/test"},{"name":"app has the rest attribute","suites":["REST client tests"],"updatePoint":{"line":28,"column":32},"line":28,"code":"  it('app has the rest attribute', () => {\n    const app = feathers()\n\n    app.configure(init('http://localhost:8889').fetch(fetch))\n\n    assert.ok((app as any).rest)\n  })","file":"index.test.ts","skipped":false,"dir":"packages/rest-client/test"},{"name":"throws an error when configured twice","suites":["REST client tests"],"updatePoint":{"line":36,"column":43},"line":36,"code":"  it('throws an error when configured twice', () => {\n    const app = feathers()\n\n    app.configure(init('http://localhost:8889').fetch(fetch))\n\n    try {\n      app.configure(init('http://localhost:8889').fetch(fetch))\n      assert.ok(false, 'Should never get here')\n    } catch (e: any) {\n      assert.strictEqual(e.message, 'Only one default client provider can be configured')\n    }\n  })","file":"index.test.ts","skipped":false,"dir":"packages/rest-client/test"},{"name":"errors when id property for get, patch, update or remove is undefined","suites":["REST client tests"],"updatePoint":{"line":49,"column":75},"line":49,"code":"  it('errors when id property for get, patch, update or remove is undefined', async () => {\n    const app = feathers().configure(init('http://localhost:8889').fetch(fetch))\n\n    const service = app.service('todos')\n\n    await assert.rejects(() => service.get(undefined), {\n      message: \"id for 'get' can not be undefined\"\n    })\n\n    await assert.rejects(() => service.remove(undefined), {\n      message: \"id for 'remove' can not be undefined, only 'null' when removing multiple entries\"\n    })\n\n    await assert.rejects(() => service.update(undefined, {}), {\n      message: \"id for 'update' can not be undefined, only 'null' when updating multiple entries\"\n    })\n\n    await assert.rejects(() => service.patch(undefined, {}), {\n      message: \"id for 'patch' can not be undefined, only 'null' when updating multiple entries\"\n    })\n  })","file":"index.test.ts","skipped":false,"dir":"packages/rest-client/test"},{"name":"uses a custom client","suites":["REST client tests"],"updatePoint":{"line":71,"column":26},"line":71,"code":"  it('uses a custom client', async () => {\n    const app = feathers()\n    class MyFetchClient extends FetchClient {\n      find() {\n        return Promise.resolve({\n          connection: this.connection,\n          base: this.base,\n          message: 'Custom fetch client'\n        })\n      }\n    }\n\n    app.configure(init('http://localhost:8889').fetch(fetch, {}, MyFetchClient))\n\n    const data = await app.service('messages').find()\n\n    assert.deepStrictEqual(data, {\n      connection: fetch,\n      base: 'http://localhost:8889/messages',\n      message: 'Custom fetch client'\n    })\n  })","file":"index.test.ts","skipped":false,"dir":"packages/rest-client/test"},{"name":"uses a custom client as second arg","suites":["REST client tests"],"updatePoint":{"line":94,"column":40},"line":94,"code":"  it('uses a custom client as second arg', async () => {\n    const app = feathers()\n    class MyFetchClient extends FetchClient {\n      find() {\n        return Promise.resolve({\n          connection: this.connection,\n          base: this.base,\n          message: 'Custom fetch client'\n        })\n      }\n    }\n\n    app.configure(init('http://localhost:8889').fetch(fetch, MyFetchClient))\n\n    const data = await app.service('messages').find()\n\n    assert.deepStrictEqual(data, {\n      connection: fetch,\n      base: 'http://localhost:8889/messages',\n      message: 'Custom fetch client'\n    })\n  })","file":"index.test.ts","skipped":false,"dir":"packages/rest-client/test"},{"name":"supports custom headers","suites":["Superagent REST connector"],"updatePoint":{"line":29,"column":29},"line":29,"code":"  it('supports custom headers', async () => {\n    const headers = {\n      Authorization: 'let-me-in'\n    }\n\n    const todo = await service.get(0, { headers })\n\n    assert.deepStrictEqual(todo, {\n      id: 0,\n      authorization: 'let-me-in',\n      text: 'some todo',\n      complete: false,\n      query: {}\n    })\n  })","file":"superagent.test.ts","skipped":false,"dir":"packages/rest-client/test"},{"name":"supports params.connection","suites":["Superagent REST connector"],"updatePoint":{"line":45,"column":32},"line":45,"code":"  it('supports params.connection', async () => {\n    const connection = {\n      Authorization: 'let-me-in'\n    }\n\n    const todo = await service.get(0, { connection })\n\n    assert.deepStrictEqual(todo, {\n      id: 0,\n      authorization: 'let-me-in',\n      text: 'some todo',\n      complete: false,\n      query: {}\n    })\n  })","file":"superagent.test.ts","skipped":false,"dir":"packages/rest-client/test"},{"name":"can initialize a client instance","suites":["Superagent REST connector"],"updatePoint":{"line":61,"column":38},"line":61,"code":"  it('can initialize a client instance', async () => {\n    const init = rest(url).superagent(superagent)\n    const todoService = init.service('todos')\n\n    assert.ok(todoService instanceof init.Service, 'Returned service is a client')\n\n    const todos = await todoService.find({})\n\n    assert.deepStrictEqual(todos, [\n      {\n        text: 'some todo',\n        complete: false,\n        id: 0\n      }\n    ])\n  })","file":"superagent.test.ts","skipped":false,"dir":"packages/rest-client/test"},{"name":"supports nested arrays in queries","suites":["Superagent REST connector"],"updatePoint":{"line":78,"column":39},"line":78,"code":"  it('supports nested arrays in queries', async () => {\n    const query = { test: { $in: ['0', '1', '2'] } }\n\n    const data = await service.get(0, { query })\n\n    assert.deepStrictEqual(data.query, query)\n  })","file":"superagent.test.ts","skipped":false,"dir":"packages/rest-client/test"},{"name":"remove many","suites":["Superagent REST connector"],"updatePoint":{"line":86,"column":17},"line":86,"code":"  it('remove many', async () => {\n    const todo: any = await service.remove(null)\n\n    assert.strictEqual(todo.id, null)\n    assert.strictEqual(todo.text, 'deleted many')\n  })","file":"superagent.test.ts","skipped":false,"dir":"packages/rest-client/test"},{"name":"converts feathers errors (#50)","suites":["Superagent REST connector"],"updatePoint":{"line":93,"column":36},"line":93,"code":"  it('converts feathers errors (#50)', async () => {\n    try {\n      await service.get(0, { query: { feathersError: true } })\n      assert.fail('Should never get here')\n    } catch (error: any) {\n      assert.ok(error.response)\n      assert.ok(error instanceof NotAcceptable)\n      assert.strictEqual(error.message, 'This is a Feathers error')\n      assert.strictEqual(error.code, 406)\n    }\n  })","file":"superagent.test.ts","skipped":false,"dir":"packages/rest-client/test"},{"name":"works with custom method .customMethod","suites":["Superagent REST connector"],"updatePoint":{"line":105,"column":44},"line":105,"code":"  it('works with custom method .customMethod', async () => {\n    const result = await service.customMethod({ message: 'hi' })\n\n    assert.deepEqual(result, {\n      data: { message: 'hi' },\n      provider: 'rest',\n      type: 'customMethod'\n    })\n  })","file":"superagent.test.ts","skipped":false,"dir":"packages/rest-client/test"},{"name":"ran resolvers in sequence","suites":["@feathersjs/schema/hooks"],"updatePoint":{"line":41,"column":31},"line":41,"code":"  it('ran resolvers in sequence', async () => {\n    assert.strictEqual(user.name, 'hello (hello@feathersjs.com)')\n  })","file":"hooks.test.ts","skipped":false,"dir":"packages/schema/test"},{"name":"validates data","suites":["@feathersjs/schema/hooks"],"updatePoint":{"line":45,"column":20},"line":45,"code":"  it('validates data', async () => {\n    assert.rejects(() => app.service('users').create({ password: 'failing' } as any), {\n      name: 'BadRequest'\n    })\n  })","file":"hooks.test.ts","skipped":false,"dir":"packages/schema/test"},{"name":"resolves results and handles resolver errors (#2534)","suites":["@feathersjs/schema/hooks"],"updatePoint":{"line":51,"column":58},"line":51,"code":"  it('resolves results and handles resolver errors (#2534)', async () => {\n    const payload = {\n      userId: user.id,\n      text\n    }\n\n    assert.ok(user)\n    assert.strictEqual(user.password, 'hashed', 'Resolved data')\n    assert.deepStrictEqual(message, {\n      id: 0,\n      ...userProps(user),\n      ...payload\n    })\n\n    const messages = await app.service('messages').find({\n      provider: 'external'\n    })\n\n    assert.deepStrictEqual(messages, [\n      {\n        id: 0,\n        ...userProps(user),\n        ...payload\n      }\n    ])\n\n    await assert.rejects(\n      () =>\n        app.service('messages').find({\n          provider: 'external',\n          error: true\n        }),\n      {\n        name: 'BadRequest',\n        message: 'Error resolving data',\n        code: 400,\n        className: 'bad-request',\n        data: {\n          user: {\n            name: 'GeneralError',\n            message: 'This is an error',\n            code: 500,\n            className: 'general-error'\n          }\n        }\n      }\n    )\n  })","file":"hooks.test.ts","skipped":false,"dir":"packages/schema/test"},{"name":"resolves get result with the object on result","suites":["@feathersjs/schema/hooks"],"updatePoint":{"line":100,"column":51},"line":100,"code":"  it('resolves get result with the object on result', async () => {\n    const payload = {\n      userId: user.id,\n      text\n    }\n\n    assert.ok(user)\n    assert.strictEqual(user.password, 'hashed', 'Resolved data')\n    assert.deepStrictEqual(message, {\n      id: 0,\n      ...userProps(user),\n      ...payload\n    })\n\n    const result = await app.service('messages').get(0, {\n      provider: 'external'\n    })\n\n    assert.deepStrictEqual(result, {\n      id: 0,\n      ...userProps(user),\n      ...payload\n    })\n  })","file":"hooks.test.ts","skipped":false,"dir":"packages/schema/test"},{"name":"resolves with $select and virtual properties","suites":["@feathersjs/schema/hooks"],"updatePoint":{"line":125,"column":50},"line":125,"code":"  it('resolves with $select and virtual properties', async () => {\n    const messages = await app.service('messages').find({\n      paginate: false,\n      query: {\n        $select: ['user', 'text']\n      }\n    })\n    assert.strictEqual(Object.keys(messages[0]).length, 2)\n  })","file":"hooks.test.ts","skipped":false,"dir":"packages/schema/test"},{"name":"resolves find results with paginated result object","suites":["@feathersjs/schema/hooks"],"updatePoint":{"line":135,"column":56},"line":135,"code":"  it('resolves find results with paginated result object', async () => {\n    const payload = {\n      userId: user.id,\n      text\n    }\n\n    assert.ok(user)\n    assert.strictEqual(user.password, 'hashed', 'Resolved data')\n    assert.deepStrictEqual(messageOnPaginatedService, {\n      id: 0,\n      ...userProps(user),\n      ...payload\n    })\n\n    const messages = await app.service('paginatedMessages').find({\n      provider: 'external',\n      query: {\n        $limit: 1,\n        $skip: 0\n      }\n    })\n\n    assert.deepStrictEqual(messages, {\n      limit: 1,\n      skip: 0,\n      total: 1,\n      data: [\n        {\n          id: 0,\n          ...userProps(user),\n          ...payload\n        }\n      ]\n    })\n  })","file":"hooks.test.ts","skipped":false,"dir":"packages/schema/test"},{"name":"resolves safe dispatch data recursively and with arrays and pages","suites":["@feathersjs/schema/hooks"],"updatePoint":{"line":171,"column":71},"line":171,"code":"  it('resolves safe dispatch data recursively and with arrays and pages', async () => {\n    const service = app.service('messages')\n    const context = await service.get(0, {}, createContext(service as any, 'get'))\n    const user = {\n      id: 0,\n      email: '[redacted]',\n      name: 'hello (hello@feathersjs.com)'\n    }\n\n    assert.strictEqual(context.result.user.password, 'hashed')\n\n    assert.deepStrictEqual(context.dispatch, {\n      text: 'Hi there',\n      userId: 0,\n      id: 0,\n      ...userProps(user)\n    })\n  })","file":"hooks.test.ts","skipped":false,"dir":"packages/schema/test"},{"name":"resolves data for custom methods","suites":["@feathersjs/schema/hooks"],"updatePoint":{"line":190,"column":38},"line":190,"code":"  it('resolves data for custom methods', async () => {\n    const result = await app.service('messages').customMethod({ message: 'Hello' })\n    const user = {\n      email: 'hello@feathersjs.com',\n      password: 'hashed',\n      id: 0,\n      name: 'hello (hello@feathersjs.com)'\n    }\n\n    assert.deepStrictEqual(result, {\n      message: 'Hello',\n      userId: 0,\n      additionalData: 'additional data',\n      ...userProps(user)\n    })\n  })","file":"hooks.test.ts","skipped":false,"dir":"packages/schema/test"},{"name":"validates and converts the query","suites":["@feathersjs/schema/hooks"],"updatePoint":{"line":207,"column":38},"line":207,"code":"  it('validates and converts the query', async () => {\n    const otherUser = await app.service('users').create({\n      email: 'helloagain@feathersjs.com',\n      password: 'supersecret'\n    })\n\n    await app.service('messages').create({\n      text,\n      userId: otherUser.id\n    })\n\n    const messages = await app.service('messages').find({\n      paginate: false,\n      query: {\n        userId: `${user.id}`\n      }\n    })\n\n    assert.strictEqual(messages.length, 1)\n\n    const userMessages = await app.service('messages').find({\n      paginate: false,\n      user\n    })\n\n    assert.strictEqual(userMessages.length, 1)\n    assert.strictEqual(userMessages[0].userId, user.id)\n\n    const msg = await app.service('messages').get(userMessages[0].id, {\n      query: {\n        $resolve: ['user']\n      }\n    })\n\n    assert.deepStrictEqual(msg, {\n      user\n    })\n\n    assert.rejects(\n      () =>\n        app.service('messages').find({\n          query: {\n            thing: 'me'\n          }\n        }),\n      {\n        name: 'BadRequest',\n        message: 'validation failed',\n        code: 400,\n        className: 'bad-request',\n        data: [\n          {\n            instancePath: '',\n            schemaPath: '#/additionalProperties',\n            keyword: 'additionalProperties',\n            params: { additionalProperty: 'thing' },\n            message: 'must NOT have additional properties'\n          }\n        ]\n      }\n    )\n  })","file":"hooks.test.ts","skipped":false,"dir":"packages/schema/test"},{"name":"queryProperties errors for unsupported query types","suites":["@feathersjs/schema/json-schema"],"updatePoint":{"line":7,"column":56},"line":7,"code":"  it('queryProperties errors for unsupported query types', () => {\n    assert.throws(\n      () =>\n        queryProperties({\n          something: {\n            $ref: 'something'\n          }\n        }),\n      {\n        message: \"Can not create query syntax schema for reference property 'something'\"\n      }\n    )\n  })","file":"json-schema.test.ts","skipped":false,"dir":"packages/schema/test"},{"name":"querySyntax works with no properties","suites":["@feathersjs/schema/json-schema"],"updatePoint":{"line":21,"column":42},"line":21,"code":"  it('querySyntax works with no properties', async () => {\n    const schema = {\n      type: 'object',\n      properties: querySyntax({})\n    }\n\n    new Ajv().compile(schema)\n  })","file":"json-schema.test.ts","skipped":false,"dir":"packages/schema/test"},{"name":"querySyntax with extensions","suites":["@feathersjs/schema/json-schema"],"updatePoint":{"line":30,"column":33},"line":30,"code":"  it('querySyntax with extensions', async () => {\n    const schema = {\n      name: {\n        type: 'string'\n      },\n      age: {\n        type: 'number'\n      }\n    } as const\n\n    const querySchema = {\n      type: 'object',\n      properties: querySyntax(schema, {\n        name: {\n          $ilike: {\n            type: 'string'\n          }\n        },\n        age: {\n          $value: {\n            type: 'null'\n          }\n        }\n      } as const)\n    } as const\n\n    type Query = FromSchema<typeof querySchema>\n\n    const q: Query = {\n      name: {\n        $ilike: 'hello'\n      },\n      age: {\n        $value: null,\n        $gte: 42\n      }\n    }\n\n    const validator = new Ajv({ strict: false }).compile(schema)\n\n    assert.ok(validator(q))\n  })","file":"json-schema.test.ts","skipped":false,"dir":"packages/schema/test"},{"name":"simple resolver","suites":["@feathersjs/schema/resolver"],"updatePoint":{"line":26,"column":21},"line":26,"code":"  it('simple resolver', async () => {\n    const userResolver = resolve<User, typeof context>({\n      password: async (): Promise<undefined> => undefined,\n\n      name: async (_value, user, ctx, status) => {\n        assert.deepStrictEqual(ctx, context)\n        assert.deepStrictEqual(status.path, ['name'])\n        assert.strictEqual(typeof status.stack[0], 'function')\n\n        return `${user.firstName} ${user.lastName}`\n      }\n    })\n\n    const u = await userResolver.resolve(\n      {\n        firstName: 'Dave',\n        lastName: 'L.'\n      },\n      context\n    )\n\n    assert.deepStrictEqual(u, {\n      firstName: 'Dave',\n      lastName: 'L.',\n      name: 'Dave L.'\n    })\n\n    const withProps = await userResolver.resolve(\n      {\n        firstName: 'David',\n        lastName: 'L'\n      },\n      context,\n      {\n        properties: ['name', 'lastName']\n      }\n    )\n\n    assert.deepStrictEqual(withProps, {\n      name: 'David L',\n      lastName: 'L'\n    })\n  })","file":"resolver.test.ts","skipped":false,"dir":"packages/schema/test"},{"name":"simple resolver with virtual","suites":["@feathersjs/schema/resolver"],"updatePoint":{"line":70,"column":34},"line":70,"code":"  it('simple resolver with virtual', async () => {\n    const userResolver = resolve<User, typeof context>({\n      password: async (): Promise<undefined> => undefined,\n\n      name: virtual(async (user, ctx, status) => {\n        assert.deepStrictEqual(ctx, context)\n        assert.deepStrictEqual(status.path, ['name'])\n        assert.strictEqual(typeof status.stack[0], 'function')\n\n        return `${user.firstName} ${user.lastName}`\n      })\n    })\n\n    const u = await userResolver.resolve(\n      {\n        firstName: 'Dave',\n        lastName: 'L.'\n      },\n      context\n    )\n\n    assert.deepStrictEqual(u, {\n      firstName: 'Dave',\n      lastName: 'L.',\n      name: 'Dave L.'\n    })\n  })","file":"resolver.test.ts","skipped":false,"dir":"packages/schema/test"},{"name":"simple resolver with schema and validation","suites":["@feathersjs/schema/resolver"],"updatePoint":{"line":98,"column":48},"line":98,"code":"  it('simple resolver with schema and validation', async () => {\n    const userFeathersSchema = schema(userSchema)\n    const userBeforeResolver = resolve<User, typeof context>({\n      schema: userFeathersSchema,\n      validate: 'before',\n      properties: {\n        name: async (_name, user) => `${user.firstName} ${user.lastName}`\n      }\n    })\n    const userAfterResolver = resolve<User, typeof context>({\n      schema: userFeathersSchema,\n      validate: 'after',\n      properties: {\n        firstName: async (): Promise<undefined> => undefined\n      }\n    })\n\n    await assert.rejects(() => userBeforeResolver.resolve({}, context), {\n      message: 'validation failed'\n    })\n    await assert.rejects(\n      () =>\n        userAfterResolver.resolve(\n          {\n            firstName: 'Test',\n            lastName: 'Me'\n          },\n          context\n        ),\n      {\n        message: 'validation failed'\n      }\n    )\n  })","file":"resolver.test.ts","skipped":false,"dir":"packages/schema/test"},{"name":"simple resolver with converter","suites":["@feathersjs/schema/resolver"],"updatePoint":{"line":133,"column":36},"line":133,"code":"  it('simple resolver with converter', async () => {\n    const userConverterResolver = resolve<User, typeof context>({\n      converter: async (data) => ({\n        firstName: 'Default',\n        lastName: 'Name',\n        ...data\n      }),\n      properties: {\n        name: async (_name, user) => `${user.firstName} ${user.lastName}`\n      }\n    })\n\n    const u = await userConverterResolver.resolve({}, context)\n\n    assert.deepStrictEqual(u, {\n      firstName: 'Default',\n      lastName: 'Name',\n      name: 'Default Name'\n    })\n  })","file":"resolver.test.ts","skipped":false,"dir":"packages/schema/test"},{"name":"resolving with errors","suites":["@feathersjs/schema/resolver"],"updatePoint":{"line":154,"column":27},"line":154,"code":"  it('resolving with errors', async () => {\n    const dummyResolver = resolve<{ name: string; age: number }, Record<string, unknown>>({\n      properties: {\n        name: async (value) => {\n          if (value === 'Dave') {\n            throw new Error(`No ${value}s allowed`)\n          }\n\n          return value\n        },\n        age: async (value) => {\n          if (value && value < 18) {\n            throw new BadRequest('Invalid age')\n          }\n\n          return value\n        }\n      }\n    })\n\n    assert.rejects(\n      () =>\n        dummyResolver.resolve(\n          {\n            name: 'Dave',\n            age: 16\n          },\n          {}\n        ),\n      {\n        name: 'BadRequest',\n        message: 'Error resolving data',\n        code: 400,\n        className: 'bad-request',\n        data: {\n          name: { message: 'No Daves allowed' },\n          age: {\n            name: 'BadRequest',\n            message: 'Invalid age',\n            code: 400,\n            className: 'bad-request'\n          }\n        }\n      }\n    )\n  })","file":"resolver.test.ts","skipped":false,"dir":"packages/schema/test"},{"name":"empty resolver returns original data","suites":["@feathersjs/schema/resolver"],"updatePoint":{"line":201,"column":42},"line":201,"code":"  it('empty resolver returns original data', async () => {\n    const resolver = resolve({\n      properties: {}\n    })\n    const data = { message: 'Hello' }\n    const resolved = await resolver.resolve(data, {})\n\n    assert.strictEqual(data, resolved)\n  })","file":"resolver.test.ts","skipped":false,"dir":"packages/schema/test"},{"name":"empty resolver still allows to select properties","suites":["@feathersjs/schema/resolver"],"updatePoint":{"line":211,"column":54},"line":211,"code":"  it('empty resolver still allows to select properties', async () => {\n    const data = { message: 'Hello', name: 'David' }\n    const resolver = resolve<typeof data, any>({\n      properties: {}\n    })\n    const resolved = await resolver.resolve(data, {}, { properties: ['message'] })\n\n    assert.deepStrictEqual(resolved, { message: 'Hello' })\n  })","file":"resolver.test.ts","skipped":false,"dir":"packages/schema/test"},{"name":"type inference and validation","suites":["@feathersjs/schema/schema"],"updatePoint":{"line":29,"column":35},"line":29,"code":"  it('type inference and validation', async () => {\n    const messageSchema = schema({\n      $id: 'message-test',\n      type: 'object',\n      required: ['text', 'read'],\n      additionalProperties: false,\n      properties: {\n        text: {\n          type: 'string'\n        },\n        read: {\n          type: 'boolean'\n        },\n        upvotes: {\n          type: 'number'\n        }\n      }\n    } as const)\n    type Message = Infer<typeof messageSchema>\n\n    const message = await messageSchema.validate<Message>({\n      text: 'hi',\n      read: 0,\n      upvotes: '10'\n    })\n\n    assert.deepStrictEqual(messageSchema.toJSON(), messageSchema.definition)\n    assert.deepStrictEqual(message, {\n      text: 'hi',\n      read: false,\n      upvotes: 10\n    })\n\n    await assert.rejects(() => messageSchema.validate({ text: 'failing' }), {\n      name: 'BadRequest',\n      data: [\n        {\n          instancePath: '',\n          keyword: 'required',\n          message: \"must have required property 'read'\",\n          params: {\n            missingProperty: 'read'\n          },\n          schemaPath: '#/required'\n        }\n      ]\n    })\n  })","file":"schema.test.ts","skipped":false,"dir":"packages/schema/test"},{"name":"uses custom AJV with format validation","suites":["@feathersjs/schema/schema"],"updatePoint":{"line":78,"column":44},"line":78,"code":"  it('uses custom AJV with format validation', async () => {\n    const formatsSchema = schema(\n      {\n        $id: 'formats-test',\n        type: 'object',\n        required: [],\n        additionalProperties: false,\n        properties: {\n          dobString: {\n            type: 'string',\n            format: 'date'\n          },\n          createdAt: {\n            type: 'string',\n            format: 'date-time'\n          }\n        }\n      } as const,\n      customAjv\n    )\n\n    await formatsSchema.validate({\n      createdAt: '2021-12-22T23:59:59.999Z'\n    })\n\n    try {\n      await formatsSchema.validate({\n        createdAt: '2021-12-22T23:59:59.bbb'\n      })\n    } catch (error: any) {\n      assert.equal(error.data[0].message, 'must match format \"date-time\"')\n    }\n  })","file":"schema.test.ts","skipped":false,"dir":"packages/schema/test"},{"name":"custom AJV can convert dates","suites":["@feathersjs/schema/schema"],"updatePoint":{"line":112,"column":34},"line":112,"code":"  it('custom AJV can convert dates', async () => {\n    const formatsSchema = schema(\n      {\n        $id: 'converts-formats-test',\n        type: 'object',\n        required: [],\n        additionalProperties: false,\n        properties: {\n          dobString: queryProperty({\n            type: 'string',\n            format: 'date',\n            convert: true\n          }),\n          createdAt: {\n            type: 'string',\n            format: 'date-time',\n            convert: true\n          }\n        }\n      } as const,\n      customAjv\n    )\n\n    const validated = await formatsSchema.validate({\n      dobString: { $gt: '2025-04-25' },\n      createdAt: '2021-12-22T23:59:59.999Z'\n    })\n\n    assert.ok((validated.dobString as any).$gt instanceof Date)\n    assert.ok((validated.createdAt as any) instanceof Date)\n  })","file":"schema.test.ts","skipped":false,"dir":"packages/schema/test"},{"name":"schema extension and type inference","suites":["@feathersjs/schema/schema"],"updatePoint":{"line":144,"column":41},"line":144,"code":"  it('schema extension and type inference', async () => {\n    const messageSchema = schema({\n      $id: 'message-ext',\n      type: 'object',\n      required: ['text', 'read'],\n      additionalProperties: false,\n      properties: {\n        text: {\n          type: 'string'\n        },\n        read: {\n          type: 'boolean'\n        }\n      }\n    } as const)\n\n    const messageResultSchema = schema({\n      $id: 'message-ext-vote',\n      type: 'object',\n      required: ['upvotes', ...messageSchema.definition.required],\n      additionalProperties: false,\n      properties: {\n        ...messageSchema.definition.properties,\n        upvotes: {\n          type: 'number'\n        }\n      }\n    } as const)\n\n    type MessageResult = Infer<typeof messageResultSchema>\n\n    const m = await messageResultSchema.validate<MessageResult>({\n      text: 'Hi',\n      read: 'false',\n      upvotes: '23'\n    })\n\n    assert.deepStrictEqual(m, {\n      text: 'Hi',\n      read: false,\n      upvotes: 23\n    })\n  })","file":"schema.test.ts","skipped":false,"dir":"packages/schema/test"},{"name":"with references","suites":["@feathersjs/schema/schema"],"updatePoint":{"line":188,"column":21},"line":188,"code":"  it('with references', async () => {\n    const userSchema = schema(\n      {\n        $id: 'ref-user',\n        type: 'object',\n        required: ['email'],\n        additionalProperties: false,\n        properties: {\n          email: { type: 'string' },\n          age: { type: 'number' }\n        }\n      } as const,\n      customAjv\n    )\n    const messageSchema = schema(\n      {\n        $id: 'ref-message',\n        type: 'object',\n        required: ['text', 'user'],\n        additionalProperties: false,\n        properties: {\n          text: {\n            type: 'string'\n          },\n          user: {\n            $ref: 'ref-user'\n          }\n        }\n      } as const,\n      customAjv\n    )\n\n    type User = Infer<typeof userSchema>\n    type Message = Infer<typeof messageSchema> & {\n      user: User\n    }\n\n    const res = await messageSchema.validate<Message>({\n      text: 'Hello',\n      user: {\n        email: 'hello@feathersjs.com',\n        age: '42'\n      }\n    })\n\n    assert.ok(userSchema)\n    assert.deepStrictEqual(res, {\n      text: 'Hello',\n      user: { email: 'hello@feathersjs.com', age: 42 }\n    })\n  })","file":"schema.test.ts","skipped":false,"dir":"packages/schema/test"},{"name":"works with oneOf properties (#2508)","suites":["@feathersjs/schema/schema"],"updatePoint":{"line":240,"column":41},"line":240,"code":"  it('works with oneOf properties (#2508)', async () => {\n    const oneOfSchema = schema({\n      $id: 'schemaA',\n      oneOf: [\n        {\n          type: 'object',\n          additionalProperties: false,\n          required: ['x'],\n          properties: {\n            x: { type: 'number' }\n          }\n        },\n        {\n          type: 'object',\n          additionalProperties: false,\n          required: ['y'],\n          properties: {\n            y: { type: 'number' }\n          }\n        }\n      ]\n    } as const)\n\n    const res = await oneOfSchema.validate({\n      x: '3'\n    })\n\n    assert.deepStrictEqual(res, { x: 3 })\n  })","file":"schema.test.ts","skipped":false,"dir":"packages/schema/test"},{"name":"can handle compound queryProperty","suites":["@feathersjs/schema/schema"],"updatePoint":{"line":270,"column":39},"line":270,"code":"  it('can handle compound queryProperty', async () => {\n    const formatsSchema = schema(\n      {\n        $id: 'compoundQueryProperty',\n        type: 'object',\n        required: [],\n        additionalProperties: false,\n        properties: {\n          dobString: queryProperty({\n            oneOf: [\n              { type: 'string', format: 'date', convert: true },\n              { type: 'string', format: 'date-time', convert: true },\n              { type: 'object' }\n            ]\n          })\n        }\n      } as const,\n      customAjv\n    )\n\n    const validated = await formatsSchema.validate({\n      dobString: { $gt: '2025-04-25', $lte: new Date('2027-04-25') }\n    })\n\n    assert.ok(validated)\n  })","file":"schema.test.ts","skipped":false,"dir":"packages/schema/test"},{"name":"can still fail queryProperty validation","suites":["@feathersjs/schema/schema"],"updatePoint":{"line":297,"column":45},"line":297,"code":"  it('can still fail queryProperty validation', async () => {\n    const formatsSchema = schema(\n      {\n        $id: 'compoundQueryPropertyFail',\n        type: 'object',\n        required: [],\n        additionalProperties: false,\n        properties: {\n          dobString: queryProperty({ type: 'string' })\n        }\n      } as const,\n      customAjv\n    )\n\n    try {\n      const validated = await formatsSchema.validate({\n        dobString: { $moose: 'test' }\n      })\n      assert(!validated, 'should not have gotten here')\n    } catch (error: any) {\n      assert.ok(error.data?.length > 0)\n    }\n  })","file":"schema.test.ts","skipped":false,"dir":"packages/schema/test"},{"name":"removes default from queryProperty schemas like $gt","suites":["@feathersjs/schema/schema"],"updatePoint":{"line":321,"column":57},"line":321,"code":"  it('removes default from queryProperty schemas like $gt', async () => {\n    const validator = schema(\n      {\n        $id: 'noDefault$gt',\n        type: 'object',\n        required: [],\n        additionalProperties: false,\n        properties: {\n          someDate: queryProperty({ default: '0000-00-00', type: 'string' })\n        }\n      } as const,\n      customAjv\n    )\n\n    assert.equal(\n      validator.definition.properties.someDate.anyOf[1].properties.$gt.type,\n      'string',\n      'type is found under $gt'\n    )\n    assert(!validator.definition.properties.someDate.anyOf[1].properties.$gt.default, 'no default under $gt')\n  })","file":"schema.test.ts","skipped":false,"dir":"packages/schema/test"},{"name":"throws an error with no connection","suites":["@feathersjs/socketio-client"],"updatePoint":{"line":42,"column":40},"line":42,"code":"  it('throws an error with no connection', () => {\n    try {\n      // @ts-ignore\n      feathers().configure(socketio())\n      assert.ok(false)\n    } catch (e: any) {\n      assert.strictEqual(e.message, 'Socket.io connection needs to be provided')\n    }\n  })","file":"index.test.ts","skipped":false,"dir":"packages/socketio-client/test"},{"name":"app has the io attribute","suites":["@feathersjs/socketio-client"],"updatePoint":{"line":52,"column":30},"line":52,"code":"  it('app has the io attribute', () => {\n    assert.ok((app as any).io)\n  })","file":"index.test.ts","skipped":false,"dir":"packages/socketio-client/test"},{"name":"throws an error when configured twice","suites":["@feathersjs/socketio-client"],"updatePoint":{"line":56,"column":43},"line":56,"code":"  it('throws an error when configured twice', () => {\n    try {\n      app.configure(socketio(socket))\n      assert.ok(false, 'Should never get here')\n    } catch (e: any) {\n      assert.strictEqual(e.message, 'Only one default client provider can be configured')\n    }\n  })","file":"index.test.ts","skipped":false,"dir":"packages/socketio-client/test"},{"name":"can initialize a client instance","suites":["@feathersjs/socketio-client"],"updatePoint":{"line":65,"column":38},"line":65,"code":"  it('can initialize a client instance', async () => {\n    const init = socketio(socket)\n    const totoService = init.service('todos')\n\n    assert.ok(totoService instanceof init.Service, 'Returned service is a client')\n\n    const todos = await totoService.find()\n\n    assert.deepEqual(todos, [\n      {\n        text: 'some todo',\n        complete: false,\n        id: 0\n      }\n    ])\n  })","file":"index.test.ts","skipped":false,"dir":"packages/socketio-client/test"},{"name":"return 404 for non-existent service","suites":["@feathersjs/socketio-client"],"updatePoint":{"line":82,"column":41},"line":82,"code":"  it('return 404 for non-existent service', async () => {\n    try {\n      await app.service('not/me').create({})\n      assert.fail('Should never get here')\n    } catch (e: any) {\n      assert.strictEqual(e.message, \"Service 'not/me' not found\")\n    }\n  })","file":"index.test.ts","skipped":false,"dir":"packages/socketio-client/test"},{"name":"is event target compatible","suites":["@feathersjs/socketio-client"],"updatePoint":{"line":91,"column":32},"line":91,"code":"  it('is event target compatible', async () => {\n    app.service('todo').addEventListener('created', (data: any) => assert.ok(data))\n  })","file":"index.test.ts","skipped":false,"dir":"packages/socketio-client/test"},{"name":"calls .customMethod","suites":["@feathersjs/socketio-client"],"updatePoint":{"line":95,"column":25},"line":95,"code":"  it('calls .customMethod', async () => {\n    const service = app.service('todos')\n    const result = await service.customMethod({ message: 'hi' })\n\n    assert.deepStrictEqual(result, {\n      data: { message: 'hi' },\n      provider: 'socketio',\n      type: 'customMethod'\n    })\n  })","file":"index.test.ts","skipped":false,"dir":"packages/socketio-client/test"},{"name":"runs io before setup (#131)","suites":["@feathersjs/socketio"],"updatePoint":{"line":123,"column":33},"line":123,"code":"  it('runs io before setup (#131)', (done) => {\n    let counter = 0\n    const app = feathers().configure(\n      socketio(() => {\n        assert.strictEqual(counter, 0)\n        counter++\n      })\n    )\n\n    app.listen(8887).then((srv) => {\n      srv.on('listening', () => srv.close(done))\n    })\n  })","file":"index.test.ts","skipped":false,"dir":"packages/socketio/test"},{"name":"can set MaxListeners","suites":["@feathersjs/socketio"],"updatePoint":{"line":137,"column":26},"line":137,"code":"  it('can set MaxListeners', (done) => {\n    const app = feathers().configure(socketio((io) => io.sockets.setMaxListeners(100)))\n\n    app.listen(8987).then((srv) => {\n      srv.on('listening', () => {\n        assert.strictEqual(app.io.sockets.getMaxListeners(), 100)\n        srv.close(done)\n      })\n    })\n  })","file":"index.test.ts","skipped":false,"dir":"packages/socketio/test"},{"name":"expressified app works","suites":["@feathersjs/socketio"],"updatePoint":{"line":148,"column":28},"line":148,"code":"  it('expressified app works', async () => {\n    const data = { message: 'Hello world' }\n    const app = express(feathers())\n      .configure(socketio())\n      .use('/test', (_req: Request, res: Response) => res.json(data))\n\n    const srv = await app.listen(8992)\n    const response = await axios({\n      url: 'http://localhost:8992/socket.io/socket.io.js'\n    })\n\n    assert.strictEqual(response.status, 200)\n\n    const res = await axios({\n      url: 'http://localhost:8992/test'\n    })\n\n    assert.deepStrictEqual(res.data, data)\n\n    await new Promise((resolve) => srv.close(() => resolve(srv)))\n  })","file":"index.test.ts","skipped":false,"dir":"packages/socketio/test"},{"name":"can set options (#12)","suites":["@feathersjs/socketio"],"updatePoint":{"line":170,"column":27},"line":170,"code":"  it('can set options (#12)', (done) => {\n    const application = feathers().configure(\n      socketio(\n        {\n          path: '/test/'\n        },\n        (ioInstance) => assert.ok(ioInstance)\n      )\n    )\n\n    application.listen(8987).then((srv) => {\n      srv.on('listening', async () => {\n        const { status } = await axios('http://localhost:8987/test/socket.io.js')\n\n        assert.strictEqual(status, 200)\n        srv.close(done)\n      })\n    })\n  })","file":"index.test.ts","skipped":false,"dir":"packages/socketio/test"},{"name":"passes handshake as service parameters","suites":["@feathersjs/socketio"],"updatePoint":{"line":190,"column":44},"line":190,"code":"  it('passes handshake as service parameters', (done) => {\n    socket.emit('create', 'verify', {}, (error: any, data: any) => {\n      assert.ok(!error)\n      assert.deepStrictEqual(\n        omit(data.params, 'query', 'route', 'connection'),\n        socketParams,\n        'Passed handshake parameters'\n      )\n\n      socket.emit(\n        'update',\n        'verify',\n        1,\n        {},\n        {\n          test: 'param'\n        },\n        (error: any, data: any) => {\n          assert.ok(!error)\n          assert.deepStrictEqual(\n            data.params,\n            extend(\n              {\n                route: {},\n                connection: socketParams,\n                query: {\n                  test: 'param'\n                }\n              },\n              socketParams\n            ),\n            'Passed handshake parameters as query'\n          )\n          done()\n        }\n      )\n    })\n  })","file":"index.test.ts","skipped":false,"dir":"packages/socketio/test"},{"name":"connection and disconnect events (#1243, #1238)","suites":["@feathersjs/socketio"],"updatePoint":{"line":229,"column":53},"line":229,"code":"  it('connection and disconnect events (#1243, #1238)', (done) => {\n    const mySocket = io('http://localhost:7886?channel=dctest')\n\n    app.once('connection', (connection) => {\n      assert.strictEqual(connection.channel, 'dctest')\n      app.once('disconnect', (disconnection) => {\n        assert.strictEqual(disconnection.channel, 'dctest')\n        done()\n      })\n      setTimeout(() => mySocket.close(), 100)\n    })\n\n    assert.ok(mySocket)\n  })","file":"index.test.ts","skipped":false,"dir":"packages/socketio/test"},{"name":"app `disconnect` event disconnects socket (#2754)","suites":["@feathersjs/socketio"],"updatePoint":{"line":244,"column":55},"line":244,"code":"  it('app `disconnect` event disconnects socket (#2754)', (done) => {\n    const mySocket = io('http://localhost:7886?channel=dctest')\n\n    app.once('connection', (connection) => {\n      assert.strictEqual(connection.channel, 'dctest')\n      mySocket.once('disconnect', () => done())\n      app.emit('disconnect', connection)\n    })\n\n    assert.ok(mySocket)\n  })","file":"index.test.ts","skipped":false,"dir":"packages/socketio/test"},{"name":"missing parameters in socket call works (#88)","suites":["@feathersjs/socketio"],"updatePoint":{"line":256,"column":51},"line":256,"code":"  it('missing parameters in socket call works (#88)', (done) => {\n    socket.emit('find', 'verify', (error: any, data: any) => {\n      assert.ok(!error)\n      assert.deepStrictEqual(\n        omit(data.params, 'query', 'route', 'connection'),\n        socketParams,\n        'Handshake parameters passed on proper position'\n      )\n      done()\n    })\n  })","file":"index.test.ts","skipped":false,"dir":"packages/socketio/test"},{"name":"creates a new channel, app.channels has names","suites":["app.channel","base channels"],"updatePoint":{"line":18,"column":53},"line":18,"code":"    it('creates a new channel, app.channels has names', () => {\n      assert.ok(app.channel('test') instanceof Channel)\n      assert.deepStrictEqual(app.channels, ['test'])\n    })","file":"channels/channel.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":".join","suites":["app.channel","base channels"],"updatePoint":{"line":23,"column":13},"line":23,"code":"    it('.join', () => {\n      const test = app.channel('test')\n      const c1 = { id: 1 }\n      const c2 = { id: 2 }\n      const c3 = { id: 3 }\n\n      assert.strictEqual(test.length, 0, 'Initial channel is empty')\n\n      test.join(c1)\n      test.join(c1)\n\n      assert.strictEqual(test.length, 1, 'Joining twice only runs once')\n\n      test.join(c2, c3)\n\n      assert.strictEqual(test.length, 3, 'New connections joined')\n\n      test.join(c1, c2, c3)\n\n      assert.strictEqual(test.length, 3, 'Joining multiple times does nothing')\n    })","file":"channels/channel.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":".leave","suites":["app.channel","base channels"],"updatePoint":{"line":45,"column":14},"line":45,"code":"    it('.leave', () => {\n      const test = app.channel('test')\n      const c1 = { id: 1 }\n      const c2 = { id: 2 }\n\n      assert.strictEqual(test.length, 0)\n\n      test.join(c1, c2)\n\n      assert.strictEqual(test.length, 2)\n\n      test.leave(c2)\n      test.leave(c2)\n\n      assert.strictEqual(test.length, 1)\n      assert.strictEqual(test.connections.indexOf(c2), -1)\n    })","file":"channels/channel.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":".leave conditional","suites":["app.channel","base channels"],"updatePoint":{"line":63,"column":26},"line":63,"code":"    it('.leave conditional', () => {\n      const test = app.channel('test')\n      const c1 = { id: 1, leave: true }\n      const c2 = { id: 2 }\n      const c3 = { id: 3 }\n\n      test.join(c1, c2, c3)\n\n      assert.strictEqual(test.length, 3)\n\n      test.leave((connection: RealTimeConnection) => connection.leave)\n\n      assert.strictEqual(test.length, 2)\n      assert.strictEqual(test.connections.indexOf(c1), -1)\n    })","file":"channels/channel.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":".filter","suites":["app.channel","base channels"],"updatePoint":{"line":79,"column":15},"line":79,"code":"    it('.filter', () => {\n      const test = app.channel('test')\n      const c1 = { id: 1, filter: true }\n      const c2 = { id: 2 }\n      const c3 = { id: 3 }\n\n      test.join(c1, c2, c3)\n\n      const filtered = test.filter((connection) => connection.filter)\n\n      assert.ok(filtered !== test, 'Returns a new channel instance')\n      assert.ok(filtered instanceof Channel)\n      assert.strictEqual(filtered.length, 1)\n    })","file":"channels/channel.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":".send","suites":["app.channel","base channels"],"updatePoint":{"line":94,"column":13},"line":94,"code":"    it('.send', () => {\n      const data = { message: 'Hi' }\n\n      const test = app.channel('test')\n      const withData = test.send(data)\n\n      assert.ok(test !== withData)\n      assert.deepStrictEqual(withData.data, data)\n    })","file":"channels/channel.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"is an EventEmitter","suites":["app.channel","base channels","empty channels"],"updatePoint":{"line":105,"column":28},"line":105,"code":"      it('is an EventEmitter', () => {\n        const channel = app.channel('emitchannel')\n\n        return new Promise<void>((resolve) => {\n          channel.once('message', (data) => {\n            assert.strictEqual(data, 'hello')\n            resolve()\n          })\n\n          channel.emit('message', 'hello')\n        })\n      })","file":"channels/channel.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"empty","suites":["app.channel","base channels","empty channels"],"updatePoint":{"line":118,"column":15},"line":118,"code":"      it('empty', (done) => {\n        const channel = app.channel('test')\n        const c1 = { id: 1 }\n        const c2 = { id: 2 }\n\n        channel.once('empty', done)\n\n        channel.join(c1, c2)\n        channel.leave(c1)\n        channel.leave(c2)\n      })","file":"channels/channel.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"removes an empty channel","suites":["app.channel","base channels","empty channels"],"updatePoint":{"line":130,"column":34},"line":130,"code":"      it('removes an empty channel', () => {\n        const channel = app.channel('test')\n        const appChannels = (app as any)[CHANNELS]\n        const c1 = { id: 1 }\n\n        channel.join(c1)\n\n        assert.ok(appChannels.test)\n        assert.strictEqual(Object.keys(appChannels).length, 1)\n        channel.leave(c1)\n\n        assert.ok((app as any)[CHANNELS].test === undefined)\n        assert.strictEqual(Object.keys(appChannels).length, 0)\n      })","file":"channels/channel.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"removes all event listeners from an empty channel","suites":["app.channel","base channels","empty channels"],"updatePoint":{"line":145,"column":59},"line":145,"code":"      it('removes all event listeners from an empty channel', () => {\n        const channel = app.channel('testing')\n        const connection = { id: 1 }\n\n        channel.on('something', () => {})\n        assert.strictEqual(channel.listenerCount('something'), 1)\n        assert.strictEqual(channel.listenerCount('empty'), 1)\n\n        channel.join(connection).leave(connection)\n\n        assert.ok((app as any)[CHANNELS].testing === undefined)\n\n        assert.strictEqual(channel.listenerCount('something'), 0)\n        assert.strictEqual(channel.listenerCount('empty'), 0)\n      })","file":"channels/channel.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"combines multiple channels","suites":["app.channel","combined channels"],"updatePoint":{"line":164,"column":34},"line":164,"code":"    it('combines multiple channels', () => {\n      const combined = app.channel('test', 'again')\n\n      assert.deepStrictEqual(app.channels, ['test', 'again'])\n      assert.ok(combined instanceof CombinedChannel)\n      assert.strictEqual(combined.length, 0)\n    })","file":"channels/channel.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"de-dupes connections","suites":["app.channel","combined channels"],"updatePoint":{"line":172,"column":28},"line":172,"code":"    it('de-dupes connections', () => {\n      const c1 = { id: 1 }\n      const c2 = { id: 2 }\n\n      app.channel('test').join(c1, c2)\n      app.channel('again').join(c1)\n\n      const combined = app.channel('test', 'again')\n\n      assert.ok(combined instanceof CombinedChannel)\n      assert.strictEqual(combined.length, 2)\n    })","file":"channels/channel.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"does nothing when the channel is undefined (#2207)","suites":["app.channel","combined channels"],"updatePoint":{"line":185,"column":58},"line":185,"code":"    it('does nothing when the channel is undefined (#2207)', () => {\n      const channel = app.channel('test', 'me')\n\n      channel.join(undefined)\n    })","file":"channels/channel.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":".join all child channels","suites":["app.channel","combined channels"],"updatePoint":{"line":191,"column":32},"line":191,"code":"    it('.join all child channels', () => {\n      const c1 = { id: 1 }\n      const c2 = { id: 2 }\n\n      const combined = app.channel('test', 'again')\n\n      combined.join(c1, c2)\n\n      assert.strictEqual(combined.length, 2)\n      assert.strictEqual(app.channel('test').length, 2)\n      assert.strictEqual(app.channel('again').length, 2)\n    })","file":"channels/channel.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":".leave all child channels","suites":["app.channel","combined channels"],"updatePoint":{"line":204,"column":33},"line":204,"code":"    it('.leave all child channels', () => {\n      const c1 = { id: 1 }\n      const c2 = { id: 2 }\n\n      app.channel('test').join(c1, c2)\n      app.channel('again').join(c1)\n\n      const combined = app.channel('test', 'again')\n\n      combined.leave(c1)\n\n      assert.strictEqual(app.channel('test').length, 1)\n      assert.strictEqual(app.channel('again').length, 0)\n    })","file":"channels/channel.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":".leave all child channels conditionally","suites":["app.channel","combined channels"],"updatePoint":{"line":219,"column":47},"line":219,"code":"    it('.leave all child channels conditionally', () => {\n      const c1 = { id: 1 }\n      const c2 = { id: 2, leave: true }\n      const combined = app.channel('test', 'again').join(c1, c2)\n\n      combined.leave((connection: RealTimeConnection) => connection.leave)\n\n      assert.strictEqual(app.channel('test').length, 1)\n      assert.strictEqual(app.channel('again').length, 1)\n    })","file":"channels/channel.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"app.channel(app.channels)","suites":["app.channel","combined channels"],"updatePoint":{"line":230,"column":33},"line":230,"code":"    it('app.channel(app.channels)', () => {\n      const c1 = { id: 1 }\n      const c2 = { id: 2 }\n\n      app.channel('test').join(c1, c2)\n      app.channel('again').join(c1)\n\n      const combined = app.channel(app.channels)\n\n      assert.deepStrictEqual(combined.connections, [c1, c2])\n    })","file":"channels/channel.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"throws an error if service does not send the event","suites":["app.publish"],"updatePoint":{"line":23,"column":56},"line":23,"code":"  it('throws an error if service does not send the event', () => {\n    try {\n      app.use('/test', {\n        create(data: any) {\n          return Promise.resolve(data)\n        }\n      })\n\n      app.service('test').registerPublisher('created', function () {})\n      app.service('test').registerPublisher('bla', function () {})\n      assert.ok(false, 'Should never get here')\n    } catch (e: any) {\n      assert.strictEqual(e.message, \"'bla' is not a valid service event\")\n    }\n  })","file":"channels/dispatch.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"error in publisher is handled gracefully (#1707)","suites":["app.publish","registration and `dispatch` event"],"updatePoint":{"line":48,"column":56},"line":48,"code":"    it('error in publisher is handled gracefully (#1707)', async () => {\n      app.service('test').publish('created', () => {\n        throw new Error('Something went wrong')\n      })\n\n      try {\n        await app.service('test').create({ message: 'something' })\n      } catch (error: any) {\n        assert.fail('Should never get here')\n      }\n    })","file":"channels/dispatch.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"simple event registration and dispatching","suites":["app.publish","registration and `dispatch` event"],"updatePoint":{"line":60,"column":49},"line":60,"code":"    it('simple event registration and dispatching', (done) => {\n      app.channel('testing').join(c1)\n\n      app.service('test').registerPublisher('created', () => app.channel('testing'))\n\n      app.once('publish', (event: string, channel: Channel, hook: HookContext) => {\n        try {\n          assert.strictEqual(event, 'created')\n          assert.strictEqual(hook.path, 'test')\n          assert.deepStrictEqual(hook.result, data)\n          assert.deepStrictEqual(channel.connections, [c1])\n          done()\n        } catch (error: any) {\n          done(error)\n        }\n      })\n\n      app.service('test').create(data).catch(done)\n    })","file":"channels/dispatch.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"app and global level dispatching and precedence","suites":["app.publish","registration and `dispatch` event"],"updatePoint":{"line":80,"column":55},"line":80,"code":"    it('app and global level dispatching and precedence', (done) => {\n      app.channel('testing').join(c1)\n      app.channel('other').join(c2)\n\n      app.registerPublisher('created', () => app.channel('testing'))\n      app.registerPublisher(() => app.channel('other'))\n\n      app.once('publish', (_event: string, channel: Channel) => {\n        assert.ok(channel.connections.indexOf(c1) !== -1)\n        done()\n      })\n\n      app.service('test').create(data).catch(done)\n    })","file":"channels/dispatch.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"promise event dispatching","suites":["app.publish","registration and `dispatch` event"],"updatePoint":{"line":95,"column":33},"line":95,"code":"    it('promise event dispatching', (done) => {\n      app.channel('testing').join(c1)\n      app.channel('othertest').join(c2)\n\n      app\n        .service('test')\n        .registerPublisher(\n          'created',\n          () => new Promise((resolve) => setTimeout(() => resolve(app.channel('testing')), 50))\n        )\n      app\n        .service('test')\n        .registerPublisher(\n          'created',\n          () => new Promise((resolve) => setTimeout(() => resolve(app.channel('testing', 'othertest')), 100))\n        )\n\n      app.once('publish', (_event: string, channel: Channel, hook: HookContext) => {\n        assert.deepStrictEqual(hook.result, data)\n        assert.deepStrictEqual(channel.connections, [c1, c2])\n        done()\n      })\n\n      app.service('test').create(data).catch(done)\n    })","file":"channels/dispatch.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"custom event dispatching","suites":["app.publish","registration and `dispatch` event"],"updatePoint":{"line":121,"column":32},"line":121,"code":"    it('custom event dispatching', (done) => {\n      const eventData = { testing: true }\n\n      app.channel('testing').join(c1)\n      app.channel('othertest').join(c2)\n\n      app.service('test').registerPublisher('foo', () => app.channel('testing'))\n\n      app.once('publish', (event: string, channel: Channel, hook: HookContext) => {\n        assert.strictEqual(event, 'foo')\n        assert.deepStrictEqual(hook, {\n          app,\n          path: 'test',\n          service: app.service('test'),\n          result: eventData\n        })\n        assert.deepStrictEqual(channel.connections, [c1])\n        done()\n      })\n\n      app.service('test').emit('foo', eventData)\n    })","file":"channels/dispatch.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"does not sent `dispatch` event if there are no dispatchers","suites":["app.publish","registration and `dispatch` event"],"updatePoint":{"line":144,"column":66},"line":144,"code":"    it('does not sent `dispatch` event if there are no dispatchers', (done) => {\n      app.once('publish', () => done(new Error('Should never get here')))\n\n      process.once('unhandledRejection', (error) => done(error))\n\n      app\n        .service('test')\n        .create(data)\n        .then(() => done())\n        .catch(done)\n    })","file":"channels/dispatch.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"does not send `dispatch` event if there are no connections","suites":["app.publish","registration and `dispatch` event"],"updatePoint":{"line":156,"column":66},"line":156,"code":"    it('does not send `dispatch` event if there are no connections', (done) => {\n      app.service('test').registerPublisher('created', () => app.channel('dummy'))\n      app.once('publish', () => done(new Error('Should never get here')))\n\n      app\n        .service('test')\n        .create(data)\n        .then(() => done())\n        .catch(done)\n    })","file":"channels/dispatch.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"dispatcher returning an array of channels","suites":["app.publish","registration and `dispatch` event"],"updatePoint":{"line":167,"column":49},"line":167,"code":"    it('dispatcher returning an array of channels', (done) => {\n      app.channel('testing').join(c1)\n      app.channel('othertest').join(c2)\n\n      app\n        .service('test')\n        .registerPublisher('created', () => [app.channel('testing'), app.channel('othertest')])\n\n      app.once('publish', (_event: string, channel: Channel, hook: HookContext) => {\n        assert.deepStrictEqual(hook.result, data)\n        assert.deepStrictEqual(channel.connections, [c1, c2])\n        done()\n      })\n\n      app.service('test').create(data).catch(done)\n    })","file":"channels/dispatch.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"dispatcher can send data","suites":["app.publish","registration and `dispatch` event"],"updatePoint":{"line":184,"column":32},"line":184,"code":"    it('dispatcher can send data', (done) => {\n      const c1data = { channel: 'testing' }\n\n      app.channel('testing').join(c1)\n      app.channel('othertest').join(c2)\n\n      app\n        .service('test')\n        .registerPublisher('created', () => [app.channel('testing').send(c1data), app.channel('othertest')])\n\n      app.once('publish', (_event: string, channel: CombinedChannel, hook: HookContext) => {\n        assert.deepStrictEqual(hook.result, data)\n        assert.deepStrictEqual(channel.dataFor(c1), c1data)\n        assert.ok(channel.dataFor(c2) === null)\n        assert.deepStrictEqual(channel.connections, [c1, c2])\n        done()\n      })\n\n      app.service('test').create(data).catch(done)\n    })","file":"channels/dispatch.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"publisher precedence and preventing publishing","suites":["app.publish","registration and `dispatch` event"],"updatePoint":{"line":205,"column":54},"line":205,"code":"    it('publisher precedence and preventing publishing', (done) => {\n      app.channel('test').join(c1)\n\n      app.registerPublisher(() => app.channel('test'))\n      app.service('test').registerPublisher('created', (): null => null)\n\n      app.once('publish', () => done(new Error('Should never get here')))\n\n      app\n        .service('test')\n        .create(data)\n        .then(() => done())\n        .catch(done)\n    })","file":"channels/dispatch.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"data of first channel has precedence","suites":["app.publish","registration and `dispatch` event"],"updatePoint":{"line":220,"column":44},"line":220,"code":"    it('data of first channel has precedence', (done) => {\n      const sendData = { test: true }\n\n      app.channel('testing').join(c1)\n      app.channel('othertest').join(c1)\n\n      app.service('test').registerPublisher('created', () => {\n        return [app.channel('testing'), app.channel('othertest').send(sendData)]\n      })\n\n      app.once('publish', (_event: string, channel: CombinedChannel) => {\n        assert.strictEqual(channel.dataFor(c1), null)\n        assert.deepStrictEqual(channel.connections, [c1])\n        done()\n      })\n\n      app.service('test').create(data).catch(done)\n    })","file":"channels/dispatch.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"has app.channel","suites":["feathers-channels"],"updatePoint":{"line":7,"column":21},"line":7,"code":"  it('has app.channel', () => {\n    const app = feathers().configure(channels())\n\n    assert.strictEqual(typeof app.channel, 'function')\n    assert.strictEqual(typeof (app as any)[keys.CHANNELS], 'object')\n    assert.strictEqual(app.channels.length, 0)\n  })","file":"channels/index.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"throws an error when called with nothing","suites":["feathers-channels"],"updatePoint":{"line":15,"column":46},"line":15,"code":"  it('throws an error when called with nothing', () => {\n    const app = feathers().configure(channels())\n\n    try {\n      app.channel()\n      assert.ok(false, 'Should never get here')\n    } catch (e: any) {\n      assert.strictEqual(e.message, 'app.channel needs at least one channel name')\n    }\n  })","file":"channels/index.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"configuring twice does nothing","suites":["feathers-channels"],"updatePoint":{"line":26,"column":36},"line":26,"code":"  it('configuring twice does nothing', () => {\n    feathers().configure(channels()).configure(channels())\n  })","file":"channels/index.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"does not add things to the service if `dispatch` exists","suites":["feathers-channels"],"updatePoint":{"line":30,"column":61},"line":30,"code":"  it('does not add things to the service if `dispatch` exists', () => {\n    const app = feathers()\n      .configure(channels())\n      .use('/test', {\n        async setup() {},\n        publish() {\n          return this\n        }\n      } as any)\n\n    const service: any = app.service('test')\n\n    assert.ok(!service[keys.PUBLISHERS])\n  })","file":"channels/index.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"sets `events` property on service","suites":["client"],"updatePoint":{"line":26,"column":39},"line":26,"code":"  it('sets `events` property on service', () => {\n    assert.ok(service.events)\n  })","file":"client.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"throws an error when the emitter does not have the method","suites":["client"],"updatePoint":{"line":30,"column":63},"line":30,"code":"  it('throws an error when the emitter does not have the method', () => {\n    const clientService = new Service({\n      name: 'todos',\n      method: 'emit',\n      connection: {}\n    }) as Service & EventEmitter\n\n    try {\n      clientService.eventNames()\n      assert.ok(false, 'Should never get here')\n    } catch (e: any) {\n      assert.strictEqual(e.message, \"Can not call 'eventNames' on the client service connection\")\n    }\n\n    try {\n      clientService.on('test', () => {})\n      assert.ok(false, 'Should never get here')\n    } catch (e: any) {\n      assert.strictEqual(e.message, \"Can not call 'on' on the client service connection\")\n    }\n  })","file":"client.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"allows chaining event listeners","suites":["client"],"updatePoint":{"line":52,"column":37},"line":52,"code":"  it('allows chaining event listeners', () => {\n    assert.strictEqual(\n      service,\n      service.on('thing', () => {})\n    )\n    assert.strictEqual(\n      service,\n      service.once('other thing', () => {})\n    )\n  })","file":"client.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"initializes and emits namespaced events","suites":["client"],"updatePoint":{"line":63,"column":45},"line":63,"code":"  it('initializes and emits namespaced events', (done) => {\n    connection.once('todos test', (data: any) => {\n      assert.deepStrictEqual(data, testData)\n      done()\n    })\n    service.emit('test', testData)\n  })","file":"client.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"has other emitter methods","suites":["client"],"updatePoint":{"line":71,"column":31},"line":71,"code":"  it('has other emitter methods', () => {\n    assert.ok(service.eventNames())\n  })","file":"client.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"can receive pathed events","suites":["client"],"updatePoint":{"line":75,"column":31},"line":75,"code":"  it('can receive pathed events', (done) => {\n    service.once('thing', (data) => {\n      assert.deepStrictEqual(data, testData)\n      done()\n    })\n\n    connection.emit('todos thing', testData)\n  })","file":"client.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"sends all service and custom methods with acknowledgement","suites":["client"],"updatePoint":{"line":84,"column":63},"line":84,"code":"  it('sends all service and custom methods with acknowledgement', async () => {\n    const idCb = (_path: any, id: any, _params: any, callback: DummyCallback) => callback(null, { id })\n    const idDataCb = (_path: any, _id: any, data: any, _params: any, callback: DummyCallback) =>\n      callback(null, data)\n    const dataCb = (_path: any, data: any, _params: any, callback: DummyCallback) => {\n      data.created = true\n      callback(null, data)\n    }\n\n    connection.once('create', dataCb)\n    service.methods('customMethod')\n\n    let res = await service.create(testData)\n\n    assert.ok(res.created)\n\n    connection.once('get', idCb)\n    res = await service.get(1)\n    assert.deepStrictEqual(res, { id: 1 })\n\n    connection.once('remove', idCb)\n    res = await service.remove(12)\n    assert.deepStrictEqual(res, { id: 12 })\n\n    connection.once('update', idDataCb)\n    res = await service.update(12, testData)\n    assert.deepStrictEqual(res, testData)\n\n    connection.once('patch', idDataCb)\n    res = await service.patch(12, testData)\n    assert.deepStrictEqual(res, testData)\n\n    connection.once('customMethod', dataCb)\n    res = await service.customMethod({ message: 'test' })\n    assert.deepStrictEqual(res, {\n      created: true,\n      message: 'test'\n    })\n\n    connection.once('find', (_path: any, params: any, callback: DummyCallback) => callback(null, { params }))\n\n    res = await service.find({ query: { test: true } })\n    assert.deepStrictEqual(res, {\n      params: { test: true }\n    })\n  })","file":"client.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"converts to feathers-errors (#19)","suites":["client"],"updatePoint":{"line":131,"column":39},"line":131,"code":"  it('converts to feathers-errors (#19)', async () => {\n    connection.once('create', (_path: any, _data: any, _params: any, callback: DummyCallback) =>\n      callback(new NotAuthenticated('Test', { hi: 'me' }).toJSON())\n    )\n\n    await assert.rejects(() => service.create(testData), {\n      name: 'NotAuthenticated',\n      message: 'Test',\n      code: 401,\n      data: { hi: 'me' }\n    })\n  })","file":"client.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"converts other errors (#19)","suites":["client"],"updatePoint":{"line":144,"column":33},"line":144,"code":"  it('converts other errors (#19)', async () => {\n    connection.once('create', (_path: string, _data: any, _params: any, callback: (x: string) => void) => {\n      callback('Something went wrong') // eslint-disable-line\n    })\n\n    await assert.rejects(() => service.create(testData), {\n      message: 'Something went wrong'\n    })\n  })","file":"client.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"has all EventEmitter methods","suites":["client"],"updatePoint":{"line":154,"column":34},"line":154,"code":"  it('has all EventEmitter methods', (done) => {\n    const testing = { hello: 'world' }\n    const callback = (data: any) => {\n      assert.deepStrictEqual(data, testing)\n      assert.strictEqual(service.listenerCount('test'), 1)\n      service.removeListener('test', callback)\n      assert.strictEqual(service.listenerCount('test'), 0)\n      done()\n    }\n\n    service.addListener('test', callback)\n\n    connection.emit('todos test', testing)\n  })","file":"client.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"properly handles on/off methods","suites":["client"],"updatePoint":{"line":169,"column":37},"line":169,"code":"  it('properly handles on/off methods', (done) => {\n    const testing = { hello: 'world' }\n\n    const callback1 = (data: any) => {\n      assert.deepStrictEqual(data, testing)\n      assert.strictEqual(service.listenerCount('test'), 3)\n      service.off('test', callback1)\n      assert.strictEqual(service.listenerCount('test'), 2)\n      service.removeAllListeners('test')\n      assert.strictEqual(service.listenerCount('test'), 0)\n      done()\n    }\n    const callback2 = () => {\n      // noop\n    }\n\n    service.on('test', callback1)\n    service.on('test', callback2)\n    service.on('test', callback2)\n\n    connection.emit('todos test', testing)\n  })","file":"client.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"forwards namespaced call to .off, returns service instance","suites":["client"],"updatePoint":{"line":192,"column":64},"line":192,"code":"  it('forwards namespaced call to .off, returns service instance', () => {\n    // Use it's own connection and service so off method gets detected\n    const conn = new EventEmitter()\n\n    // @ts-ignore\n    conn.off = function (name) {\n      assert.strictEqual(name, 'todos test')\n\n      return this\n    }\n\n    const client = new Service({\n      name: 'todos',\n      method: 'emit',\n      connection: conn\n    })\n\n    assert.strictEqual(client.off('test'), client)\n  })","file":"client.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"getResponse body","suites":["@feathersjs/transport-commons HTTP helpers"],"updatePoint":{"line":6,"column":22},"line":6,"code":"  it('getResponse body', () => {\n    const plainData = { message: 'hi' }\n    const dispatch = { message: 'from dispatch' }\n    const resultContext = {\n      result: plainData\n    }\n    const dispatchContext = {\n      dispatch\n    }\n\n    assert.strictEqual(http.getResponse(resultContext as HookContext).body, plainData)\n    assert.strictEqual(http.getResponse(dispatchContext as HookContext).body, dispatch)\n  })","file":"http.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"getResponse status","suites":["@feathersjs/transport-commons HTTP helpers"],"updatePoint":{"line":20,"column":24},"line":20,"code":"  it('getResponse status', () => {\n    const statusContext = {\n      http: { status: 202 }\n    }\n    const createContext = {\n      method: 'create'\n    }\n    const redirectContext = {\n      http: { location: '/' }\n    }\n\n    assert.strictEqual(http.getResponse(statusContext as HookContext).status, 202)\n    assert.strictEqual(http.getResponse(createContext as HookContext).status, http.statusCodes.created)\n    assert.strictEqual(http.getResponse(redirectContext as HookContext).status, http.statusCodes.seeOther)\n    assert.strictEqual(http.getResponse({} as HookContext).status, http.statusCodes.noContent)\n    assert.strictEqual(http.getResponse({ result: true } as HookContext).status, http.statusCodes.success)\n  })","file":"http.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"getResponse headers","suites":["@feathersjs/transport-commons HTTP helpers"],"updatePoint":{"line":38,"column":25},"line":38,"code":"  it('getResponse headers', () => {\n    const headers = { key: 'value' } as any\n    const headersContext = {\n      http: { headers }\n    }\n    const locationContext = {\n      http: { location: '/' }\n    }\n\n    assert.deepStrictEqual(http.getResponse({} as HookContext).headers, {})\n    assert.deepStrictEqual(http.getResponse({ http: {} } as HookContext).headers, {})\n    assert.strictEqual(http.getResponse(headersContext as HookContext).headers, headers)\n    assert.deepStrictEqual(http.getResponse(locationContext as HookContext).headers, {\n      Location: '/'\n    })\n  })","file":"http.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"getServiceMethod","suites":["@feathersjs/transport-commons HTTP helpers"],"updatePoint":{"line":55,"column":22},"line":55,"code":"  it('getServiceMethod', () => {\n    assert.strictEqual(http.getServiceMethod('GET', 2), 'get')\n    assert.strictEqual(http.getServiceMethod('GET', null), 'find')\n    assert.strictEqual(http.getServiceMethod('PoST', null), 'create')\n    assert.strictEqual(http.getServiceMethod('PoST', null, 'customMethod'), 'customMethod')\n    assert.strictEqual(http.getServiceMethod('delete', null), 'remove')\n    assert.throws(() => http.getServiceMethod('nonsense', null))\n  })","file":"http.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"does nothing when configured twice","suites":["app.routes"],"updatePoint":{"line":19,"column":40},"line":19,"code":"  it('does nothing when configured twice', () => {\n    feathers().configure(routing()).configure(routing())\n  })","file":"routing/index.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"has app.lookup and app.routes","suites":["app.routes"],"updatePoint":{"line":23,"column":35},"line":23,"code":"  it('has app.lookup and app.routes', () => {\n    assert.strictEqual(typeof app.lookup, 'function')\n    assert.ok(app.routes)\n  })","file":"routing/index.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"returns null when nothing is found","suites":["app.routes"],"updatePoint":{"line":28,"column":40},"line":28,"code":"  it('returns null when nothing is found', () => {\n    const result = app.lookup('me/service')\n\n    assert.strictEqual(result, null)\n  })","file":"routing/index.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"returns null for invalid service path","suites":["app.routes"],"updatePoint":{"line":34,"column":43},"line":34,"code":"  it('returns null for invalid service path', () => {\n    assert.strictEqual(app.lookup(null), null)\n    // @ts-ignore\n    assert.strictEqual(app.lookup({}), null)\n  })","file":"routing/index.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"can look up and strips slashes","suites":["app.routes"],"updatePoint":{"line":40,"column":36},"line":40,"code":"  it('can look up and strips slashes', () => {\n    const result = app.lookup('my/service')\n\n    assert.strictEqual(result.service, app.service('/my/service/'))\n  })","file":"routing/index.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"can look up with id","suites":["app.routes"],"updatePoint":{"line":46,"column":25},"line":46,"code":"  it('can look up with id', () => {\n    const result = app.lookup('/my/service/1234')\n\n    assert.strictEqual(result.service, app.service('/my/service'))\n    assert.deepStrictEqual(result.params, {\n      __id: '1234'\n    })\n  })","file":"routing/index.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"can look up with params, id and special characters","suites":["app.routes"],"updatePoint":{"line":55,"column":56},"line":55,"code":"  it('can look up with params, id and special characters', () => {\n    const path = '/test/:first/my/:second'\n\n    app.use(path, {\n      async get(id: string | number) {\n        return { id }\n      }\n    })\n\n    const result = app.lookup('/test/me/my/::special/testing')\n\n    assert.strictEqual(result.service, app.service(path))\n    assert.deepStrictEqual(result.params, {\n      __id: 'testing',\n      first: 'me',\n      second: '::special'\n    })\n  })","file":"routing/index.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"can register routes with preset params","suites":["app.routes"],"updatePoint":{"line":74,"column":44},"line":74,"code":"  it('can register routes with preset params', () => {\n    app.routes.insert('/my/service/:__id/preset', {\n      service: app.service('/my/service'),\n      params: { preset: true }\n    })\n\n    const result = app.lookup('/my/service/1234/preset')\n\n    assert.strictEqual(result.service, app.service('/my/service'))\n    assert.deepStrictEqual(result.params, {\n      preset: true,\n      __id: '1234'\n    })\n  })","file":"routing/index.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"can pass route params during a service registration","suites":["app.routes"],"updatePoint":{"line":89,"column":57},"line":89,"code":"  it('can pass route params during a service registration', () => {\n    app.use(\n      '/other/service',\n      {\n        async get(id: any) {\n          return id\n        }\n      },\n      {\n        routeParams: { used: true }\n      }\n    )\n\n    const result = app.lookup('/other/service/1234')\n\n    assert.strictEqual(result.service, app.service('/other/service'))\n    assert.deepStrictEqual(result.params, {\n      used: true,\n      __id: '1234'\n    })\n  })","file":"routing/index.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"can unregister a service (#2035)","suites":["app.routes"],"updatePoint":{"line":111,"column":38},"line":111,"code":"  it('can unregister a service (#2035)', async () => {\n    const result = app.lookup('my/service')\n\n    assert.strictEqual(result.service, app.service('/my/service/'))\n\n    await app.unuse('/my/service')\n\n    assert.strictEqual(app.lookup('my/service'), null)\n  })","file":"routing/index.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"can lookup and insert a simple path and returns null for invalid path","suites":["router"],"updatePoint":{"line":5,"column":75},"line":5,"code":"  it('can lookup and insert a simple path and returns null for invalid path', () => {\n    const r = new Router<string>()\n\n    r.insert('/hello/there/you', 'test')\n\n    const result = r.lookup('hello/there/you/')\n\n    assert.deepStrictEqual(result, {\n      params: {},\n      data: 'test'\n    })\n\n    assert.strictEqual(r.lookup('not/there'), null)\n    assert.strictEqual(r.lookup('not-me'), null)\n  })","file":"routing/router.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"can insert data at the root","suites":["router"],"updatePoint":{"line":21,"column":33},"line":21,"code":"  it('can insert data at the root', () => {\n    const r = new Router<string>()\n\n    r.insert('', 'hi')\n\n    const result = r.lookup('/')\n\n    assert.deepStrictEqual(result, {\n      params: {},\n      data: 'hi'\n    })\n  })","file":"routing/router.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"can insert with placeholder and has proper specificity","suites":["router"],"updatePoint":{"line":34,"column":60},"line":34,"code":"  it('can insert with placeholder and has proper specificity', () => {\n    const r = new Router<string>()\n\n    r.insert('/hello/:id', 'one')\n    r.insert('/hello/:id/you', 'two')\n    r.insert('/hello/:id/:other', 'three')\n\n    const first = r.lookup('hello/there/')\n\n    assert.throws(() => r.insert('/hello/:id/you', 'two'), {\n      message: 'Path hello/:id/you already exists'\n    })\n\n    assert.deepStrictEqual(first, {\n      params: { id: 'there' },\n      data: 'one'\n    })\n\n    const second = r.lookup('hello/yes/you')\n\n    assert.deepStrictEqual(second, {\n      params: { id: 'yes' },\n      data: 'two'\n    })\n\n    const third = r.lookup('hello/yes/they')\n\n    assert.deepStrictEqual(third, {\n      params: {\n        id: 'yes',\n        other: 'they'\n      },\n      data: 'three'\n    })\n\n    assert.strictEqual(r.lookup('hello/yes/they/here'), null)\n  })","file":"routing/router.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"works with different placeholders in different paths (#2327)","suites":["router"],"updatePoint":{"line":72,"column":66},"line":72,"code":"  it('works with different placeholders in different paths (#2327)', () => {\n    const r = new Router<string>()\n\n    r.insert('/hello/:id', 'one')\n    r.insert('/hello/:test/you', 'two')\n    r.insert('/hello/:test/:two/hi/:three', 'three')\n    r.insert('/hello/:test/:two/hi', 'four')\n\n    assert.deepStrictEqual(r.lookup('/hello/there'), {\n      params: { id: 'there' },\n      data: 'one'\n    })\n    assert.deepStrictEqual(r.lookup('/hello/there/you'), {\n      params: { test: 'there' },\n      data: 'two'\n    })\n    assert.strictEqual(r.lookup('/hello/there/bla'), null)\n    assert.deepStrictEqual(r.lookup('/hello/there/maybe/hi'), {\n      params: { test: 'there', two: 'maybe' },\n      data: 'four'\n    })\n    assert.deepStrictEqual(r.lookup('/hello/there/maybe/hi/test'), {\n      params: { three: 'test', two: 'maybe', test: 'there' },\n      data: 'three'\n    })\n  })","file":"routing/router.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"can remove paths (#2035)","suites":["router"],"updatePoint":{"line":99,"column":30},"line":99,"code":"  it('can remove paths (#2035)', () => {\n    const r = new Router<string>()\n\n    r.insert('/hello/:id', 'one')\n    r.insert('/hello/:test/you', 'two')\n    r.insert('/hello/here/thing', 'else')\n\n    assert.deepStrictEqual(r.lookup('hello/there'), { params: { id: 'there' }, data: 'one' })\n\n    r.remove('/hello/:id')\n\n    assert.deepStrictEqual(r.lookup('hello/here/you'), { params: { test: 'here' }, data: 'two' })\n    assert.deepStrictEqual(r.lookup('hello/here/thing'), { params: {}, data: 'else' })\n    assert.strictEqual(r.lookup('hello/there'), null)\n\n    r.remove('/hello/:test/you')\n    assert.deepStrictEqual(r.lookup('hello/here/you'), null)\n    assert.deepStrictEqual(r.lookup('hello/here/thing'), { params: {}, data: 'else' })\n\n    r.remove('/hello/here/thing')\n    assert.ok(!r.root.hasChildren)\n  })","file":"routing/router.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"`connection` event","suites":["@feathersjs/transport-commons"],"updatePoint":{"line":55,"column":24},"line":55,"code":"  it('`connection` event', (done) => {\n    const socket = new EventEmitter()\n\n    app.once('connection', (data) => {\n      assert.strictEqual(connection, data)\n      done()\n    })\n\n    provider.emit('connection', socket)\n  })","file":"socket/index.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":".get without params","suites":["@feathersjs/transport-commons","method name based socket events"],"updatePoint":{"line":67,"column":27},"line":67,"code":"    it('.get without params', (done) => {\n      const socket = new EventEmitter()\n\n      provider.emit('connection', socket)\n\n      socket.emit('get', 'myservice', 10, (error: any, result: any) => {\n        try {\n          assert.ok(!error)\n          assert.deepStrictEqual(result, {\n            id: 10,\n            params: Object.assign(\n              {\n                query: {},\n                route: {},\n                connection\n              },\n              connection\n            )\n          })\n          done()\n        } catch (e: any) {\n          done(e)\n        }\n      })\n    })","file":"socket/index.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":".get with invalid service name and arguments","suites":["@feathersjs/transport-commons","method name based socket events"],"updatePoint":{"line":93,"column":52},"line":93,"code":"    it('.get with invalid service name and arguments', (done) => {\n      const socket = new EventEmitter()\n\n      provider.emit('connection', socket)\n\n      socket.emit('get', null, (error: any) => {\n        assert.strictEqual(error.name, 'NotFound')\n        assert.strictEqual(error.message, \"Service 'null' not found\")\n        done()\n      })\n    })","file":"socket/index.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":".create with params","suites":["@feathersjs/transport-commons","method name based socket events"],"updatePoint":{"line":105,"column":27},"line":105,"code":"    it('.create with params', (done) => {\n      const socket = new EventEmitter()\n      const data = {\n        test: 'data'\n      }\n\n      provider.emit('connection', socket)\n\n      socket.emit(\n        'create',\n        'myservice',\n        data,\n        {\n          fromQuery: true\n        },\n        (error: any, result: any) => {\n          try {\n            const params = Object.assign(\n              {\n                query: { fromQuery: true },\n                route: {},\n                connection\n              },\n              connection\n            )\n\n            assert.ok(!error)\n            assert.deepStrictEqual(result, Object.assign({ params }, data))\n            done()\n          } catch (e: any) {\n            done(e)\n          }\n        }\n      )\n    })","file":"socket/index.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"custom method with params","suites":["@feathersjs/transport-commons","method name based socket events"],"updatePoint":{"line":141,"column":33},"line":141,"code":"    it('custom method with params', (done) => {\n      const socket = new EventEmitter()\n      const data = {\n        test: 'data'\n      }\n\n      provider.emit('connection', socket)\n\n      socket.emit(\n        'custom',\n        'myservice',\n        data,\n        {\n          fromQuery: true\n        },\n        (error: any, result: any) => {\n          try {\n            const params = Object.assign(\n              {\n                query: { fromQuery: true },\n                route: {},\n                connection\n              },\n              connection\n            )\n\n            assert.ok(!error)\n            assert.deepStrictEqual(result, {\n              ...data,\n              params,\n              message: 'From custom method'\n            })\n            done()\n          } catch (e: any) {\n            done(e)\n          }\n        }\n      )\n    })","file":"socket/index.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"simple error normalization","suites":["socket commons utils",".normalizeError"],"updatePoint":{"line":12,"column":34},"line":12,"code":"    it('simple error normalization', () => {\n      const message = 'Something went wrong'\n      const e = new Error(message)\n\n      assert.deepStrictEqual(normalizeError(e), {\n        message,\n        stack: e.stack.toString()\n      })\n    })","file":"socket/utils.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"calls .toJSON","suites":["socket commons utils",".normalizeError"],"updatePoint":{"line":22,"column":21},"line":22,"code":"    it('calls .toJSON', () => {\n      const json = { message: 'toJSON called' }\n\n      assert.deepStrictEqual(\n        normalizeError({\n          toJSON() {\n            return json\n          }\n        }),\n        json\n      )\n    })","file":"socket/utils.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"removes `hook` property","suites":["socket commons utils",".normalizeError"],"updatePoint":{"line":35,"column":31},"line":35,"code":"    it('removes `hook` property', () => {\n      const e = {\n        hook: true\n      }\n\n      assert.deepStrictEqual(normalizeError(e), {})\n      assert.ok(e.hook, 'Does not mutate the original object')\n    })","file":"socket/utils.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"hides stack in production","suites":["socket commons utils",".normalizeError"],"updatePoint":{"line":44,"column":33},"line":44,"code":"    it('hides stack in production', () => {\n      const oldEnv = process.env.NODE_ENV\n\n      process.env.NODE_ENV = 'production'\n\n      const message = 'Something went wrong'\n      const e = new Error(message)\n      const normalized = normalizeError(e)\n\n      assert.strictEqual(normalized.message, message)\n      assert.ok(!normalized.stack)\n\n      process.env.NODE_ENV = oldEnv\n    })","file":"socket/utils.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"returns a dispatcher function","suites":["socket commons utils",".getDispatcher"],"updatePoint":{"line":61,"column":37},"line":61,"code":"    it('returns a dispatcher function', () =>\n      assert.strictEqual(typeof getDispatcher('test', new WeakMap()), 'function'))","file":"socket/utils.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"works with backwards compatible socketKey","suites":["socket commons utils",".getDispatcher"],"updatePoint":{"line":64,"column":49},"line":64,"code":"    it('works with backwards compatible socketKey', (done) => {\n      const socketKey = Symbol('@feathersjs/test')\n      const dispatcher = getDispatcher('emit', undefined, socketKey)\n      const socket = new EventEmitter()\n      const connection = {\n        [socketKey]: socket\n      }\n      const channel: any = {\n        connections: [connection],\n        dataFor(): null {\n          return null\n        }\n      }\n\n      socket.once('testing', (data) => {\n        assert.strictEqual(data, 'hi')\n        done()\n      })\n\n      dispatcher('testing', channel, { result: 'hi' } as any)\n    })","file":"socket/utils.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"dispatches a basic event","suites":["socket commons utils",".getDispatcher","dispatcher logic"],"updatePoint":{"line":109,"column":34},"line":109,"code":"      it('dispatches a basic event', (done) => {\n        dummySocket.once('testing', (data) => {\n          assert.strictEqual(data, 'hi')\n          done()\n        })\n\n        dispatcher('testing', dummyChannel, dummyHook)\n      })","file":"socket/utils.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"dispatches event on a hooks path event","suites":["socket commons utils",".getDispatcher","dispatcher logic"],"updatePoint":{"line":118,"column":48},"line":118,"code":"      it('dispatches event on a hooks path event', (done) => {\n        dummyHook.path = 'myservice'\n\n        dummySocket.once('myservice testing', (data) => {\n          assert.strictEqual(data, 'hi')\n          done()\n        })\n\n        dispatcher('testing', dummyChannel, dummyHook)\n      })","file":"socket/utils.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"dispatches `hook.dispatch` instead","suites":["socket commons utils",".getDispatcher","dispatcher logic"],"updatePoint":{"line":129,"column":44},"line":129,"code":"      it('dispatches `hook.dispatch` instead', (done) => {\n        const message = 'hi from dispatch'\n\n        dummyHook.dispatch = message\n\n        dummySocket.once('testing', (data) => {\n          assert.strictEqual(data, message)\n          done()\n        })\n\n        dispatcher('testing', dummyChannel, dummyHook)\n      })","file":"socket/utils.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"does nothing if there is no socket","suites":["socket commons utils",".getDispatcher","dispatcher logic"],"updatePoint":{"line":142,"column":44},"line":142,"code":"      it('does nothing if there is no socket', () => {\n        dummyChannel.connections[0].test = null\n\n        dispatcher('testing', dummyChannel, dummyHook)\n      })","file":"socket/utils.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"dispatches arrays properly hook events","suites":["socket commons utils",".getDispatcher","dispatcher logic"],"updatePoint":{"line":148,"column":48},"line":148,"code":"      it('dispatches arrays properly hook events', (done) => {\n        const data1 = { message: 'First message' }\n        const data2 = { message: 'Second message' }\n\n        dummyHook.result = [data1, data2]\n\n        dummySocket.once('testing', (data) => {\n          assert.deepStrictEqual(data, data1)\n          dummySocket.once('testing', (result) => {\n            assert.deepStrictEqual(result, data2)\n            done()\n          })\n        })\n\n        dispatcher('testing', dummyChannel, dummyHook, data1)\n        dispatcher('testing', dummyChannel, dummyHook, data2)\n      })","file":"socket/utils.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"dispatches arrays properly for custom events","suites":["socket commons utils",".getDispatcher","dispatcher logic"],"updatePoint":{"line":166,"column":54},"line":166,"code":"      it('dispatches arrays properly for custom events', (done) => {\n        const result = [{ message: 'First' }, { message: 'Second' }]\n\n        dummyHook.result = result\n\n        dummySocket.once('otherEvent', (data) => {\n          assert.deepStrictEqual(data, result)\n          done()\n        })\n\n        dispatcher('otherEvent', dummyChannel, dummyHook, result)\n      })","file":"socket/utils.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"basic","suites":["socket commons utils",".runMethod","running methods"],"updatePoint":{"line":201,"column":15},"line":201,"code":"      it('basic', (done) => {\n        const callback = (error: any, result: any) => {\n          if (error) {\n            return done(error)\n          }\n\n          assert.deepStrictEqual(result, { id: 10 })\n          done()\n        }\n\n        runMethod(app, {}, 'myservice', 'get', [10, {}, callback])\n      })","file":"socket/utils.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"queries are always plain objects","suites":["socket commons utils",".runMethod","running methods"],"updatePoint":{"line":214,"column":42},"line":214,"code":"      it('queries are always plain objects', (done) => {\n        const callback = (error: any, result: any) => {\n          if (error) {\n            return done(error)\n          }\n\n          assert.deepStrictEqual(result, { id: 10 })\n          done()\n        }\n\n        runMethod(app, {}, 'myservice', 'get', [\n          10,\n          {\n            __proto__: []\n          },\n          callback\n        ])\n      })","file":"socket/utils.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"merges params with connection and passes connection","suites":["socket commons utils",".runMethod","running methods"],"updatePoint":{"line":233,"column":61},"line":233,"code":"      it('merges params with connection and passes connection', (done) => {\n        const connection = {\n          testing: true\n        }\n        const callback = (error: any, result: any) => {\n          if (error) {\n            return done(error)\n          }\n\n          assert.deepStrictEqual(result, {\n            id: 10,\n            params: {\n              connection,\n              query: {},\n              route: {},\n              testing: true\n            }\n          })\n          done()\n        }\n\n        app.use('/otherservice', {\n          get(id, params) {\n            return Promise.resolve({ id, params })\n          }\n        })\n\n        runMethod(app, connection, 'otherservice', 'get', [10, {}, callback])\n      })","file":"socket/utils.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"with params missing","suites":["socket commons utils",".runMethod","running methods"],"updatePoint":{"line":263,"column":29},"line":263,"code":"      it('with params missing', (done) => {\n        const callback = (error: any, result: any) => {\n          if (error) {\n            return done(error)\n          }\n\n          assert.deepStrictEqual(result, { id: 10 })\n          done()\n        }\n\n        runMethod(app, {}, 'myservice', 'get', [10, callback])\n      })","file":"socket/utils.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"with params but missing callback","suites":["socket commons utils",".runMethod","running methods"],"updatePoint":{"line":276,"column":42},"line":276,"code":"      it('with params but missing callback', (done) => {\n        app.use('/otherservice', {\n          get(id: number | string) {\n            assert.strictEqual(id, 'dishes')\n\n            return Promise.resolve({ id }).then((res) => {\n              done()\n              return res\n            })\n          }\n        })\n\n        runMethod(app, {}, 'otherservice', 'get', ['dishes', {}])\n      })","file":"socket/utils.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"with params and callback missing","suites":["socket commons utils",".runMethod","running methods"],"updatePoint":{"line":291,"column":42},"line":291,"code":"      it('with params and callback missing', (done) => {\n        app.use('/otherservice', {\n          get(id: number | string) {\n            assert.strictEqual(id, 'laundry')\n\n            return Promise.resolve({ id }).then((res) => {\n              done()\n              return res\n            })\n          }\n        })\n\n        runMethod(app, {}, 'otherservice', 'get', ['laundry'])\n      })","file":"socket/utils.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"throws NotFound for invalid service","suites":["socket commons utils",".runMethod","running methods"],"updatePoint":{"line":307,"column":43},"line":307,"code":"    it('throws NotFound for invalid service', (done) => {\n      const callback = (error: any) => {\n        try {\n          assert.deepStrictEqual(error, {\n            name: 'NotFound',\n            message: \"Service 'ohmyservice' not found\",\n            code: 404,\n            className: 'not-found'\n          })\n          done()\n        } catch (e: any) {\n          done(e)\n        }\n      }\n\n      runMethod(app, {}, 'ohmyservice', 'get', [10, callback])\n    })","file":"socket/utils.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"throws MethodNotAllowed undefined method","suites":["socket commons utils",".runMethod","running methods"],"updatePoint":{"line":325,"column":48},"line":325,"code":"    it('throws MethodNotAllowed undefined method', (done) => {\n      const callback = (error: any) => {\n        try {\n          assert.deepStrictEqual(error, {\n            name: 'MethodNotAllowed',\n            message: \"Method 'create' not allowed on service 'myservice'\",\n            code: 405,\n            className: 'method-not-allowed'\n          })\n          done()\n        } catch (e: any) {\n          done(e)\n        }\n      }\n\n      runMethod(app, {}, 'myservice', 'create', [{}, callback])\n    })","file":"socket/utils.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"throws MethodNotAllowed for invalid service method","suites":["socket commons utils",".runMethod","running methods"],"updatePoint":{"line":343,"column":58},"line":343,"code":"    it('throws MethodNotAllowed for invalid service method', (done) => {\n      const callback = (error: any) => {\n        try {\n          assert.deepStrictEqual(error, {\n            name: 'MethodNotAllowed',\n            message: \"Method 'blabla' not allowed on service 'myservice'\",\n            code: 405,\n            className: 'method-not-allowed'\n          })\n          done()\n        } catch (e: any) {\n          done(e)\n        }\n      }\n\n      runMethod(app, {}, 'myservice', 'blabla', [{}, callback])\n    })","file":"socket/utils.test.ts","skipped":false,"dir":"packages/transport-commons/test"},{"name":"method error calls back with normalized error","suites":["socket commons utils",".runMethod","running methods"],"updatePoint":{"line":361,"column":53},"line":361,"code":"    it('method error calls back with normalized error', (done) => {\n      const callback = (error: any) => {\n        try {\n          assert.deepStrictEqual(error, {\n            name: 'NotAuthenticated',\n            message: 'None shall pass',\n            code: 401,\n            className: 'not-authenticated'\n          })\n          done()\n        } catch (e: any) {\n          done(e)\n        }\n      }\n\n      runMethod(app, {}, 'myservice', 'get', [42, { error: true }, callback])\n    })","file":"socket/utils.test.ts","skipped":false,"dir":"packages/transport-commons/test"}]}