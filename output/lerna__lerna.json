{"repo":"lerna/lerna","url":"https://github.com/lerna/lerna","branch":"main","configs":[{"package":"@lerna/check-working-tree","lang":"js","dir":"utils/check-working-tree/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@lerna/collect-uncommitted","lang":"js","dir":"utils/collect-uncommitted/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@lerna/collect-updates","lang":"js","dir":"utils/collect-updates/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@lerna/create-symlink","lang":"js","dir":"utils/create-symlink/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@lerna/describe-ref","lang":"js","dir":"utils/describe-ref/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@lerna/get-packed","lang":"js","dir":"utils/get-packed/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@lerna/github-client","lang":"js","dir":"utils/github-client/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@lerna/gitlab-client","lang":"js","dir":"utils/gitlab-client/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@lerna/has-npm-version","lang":"js","dir":"utils/has-npm-version/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@lerna/listable","lang":"js","dir":"utils/listable/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@lerna/log-packed","lang":"js","dir":"utils/log-packed/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@lerna/map-to-registry","lang":"js","dir":"utils/map-to-registry/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@lerna/npm-conf","lang":"js","dir":"utils/npm-conf/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@lerna/npm-dist-tag","lang":"js","dir":"utils/npm-dist-tag/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@lerna/npm-install","lang":"js","dir":"utils/npm-install/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@lerna/npm-publish","lang":"js","dir":"utils/npm-publish/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@lerna/npm-run-script","lang":"js","dir":"utils/npm-run-script/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@lerna/pack-directory","lang":"js","dir":"utils/pack-directory/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@lerna/prerelease-id-from-version","lang":"js","dir":"utils/prerelease-id-from-version/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@lerna/resolve-symlink","lang":"js","dir":"utils/resolve-symlink/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@lerna/rimraf-dir","lang":"js","dir":"utils/rimraf-dir/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@lerna/run-lifecycle","lang":"js","dir":"utils/run-lifecycle/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@lerna/symlink-binary","lang":"js","dir":"utils/symlink-binary/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"resolves on a clean tree with no release tags","suites":["check-working-tree"],"updatePoint":{"line":19,"column":51,"index":384},"line":19,"code":"  it(\"resolves on a clean tree with no release tags\", async () => {\n    describeRef.mockResolvedValueOnce({\n      refCount: \"1\"\n    });\n    const result = await checkWorkingTree({\n      cwd: \"foo\"\n    });\n    expect(result).toEqual({\n      refCount: \"1\"\n    });\n    expect(describeRef).toHaveBeenLastCalledWith({\n      cwd: \"foo\"\n    });\n  });","file":"check-working-tree.test.js","skipped":false,"dir":"utils/check-working-tree/__tests__"},{"name":"rejects when current commit has already been released","suites":["check-working-tree"],"updatePoint":{"line":33,"column":59,"index":736},"line":33,"code":"  it(\"rejects when current commit has already been released\", async () => {\n    describeRef.mockResolvedValueOnce({\n      refCount: \"0\"\n    });\n    await expect(checkWorkingTree()).rejects.toThrow(\"The current commit has already been released\");\n  });","file":"check-working-tree.test.js","skipped":false,"dir":"utils/check-working-tree/__tests__"},{"name":"rejects when working tree has uncommitted changes","suites":["check-working-tree"],"updatePoint":{"line":39,"column":55,"index":984},"line":39,"code":"  it(\"rejects when working tree has uncommitted changes\", async () => {\n    describeRef.mockResolvedValueOnce({\n      isDirty: true\n    });\n    collectUncommitted.mockResolvedValueOnce([\"AD file\"]);\n    await expect(checkWorkingTree()).rejects.toThrow(\"\\nAD file\");\n  });","file":"check-working-tree.test.js","skipped":false,"dir":"utils/check-working-tree/__tests__"},{"name":"passes cwd to collectUncommitted when working tree has uncommitted changes","suites":["check-working-tree"],"updatePoint":{"line":46,"column":80,"index":1281},"line":46,"code":"  it(\"passes cwd to collectUncommitted when working tree has uncommitted changes\", async () => {\n    describeRef.mockResolvedValueOnce({\n      isDirty: true\n    });\n    collectUncommitted.mockResolvedValueOnce([\"MM file\"]);\n    await expect(checkWorkingTree({\n      cwd: \"foo\"\n    })).rejects.toThrow(\"Working tree has uncommitted changes\");\n    expect(collectUncommitted).toHaveBeenLastCalledWith({\n      cwd: \"foo\"\n    });\n  });","file":"check-working-tree.test.js","skipped":false,"dir":"utils/check-working-tree/__tests__"},{"name":"resolves empty array on clean repo","suites":["collectUncommitted()"],"updatePoint":{"line":80,"column":40,"index":2682},"line":80,"code":"  it(\"resolves empty array on clean repo\", async () => {\n    const cwd = await initFixture(\"normal\");\n    const result = await collectUncommitted({\n      cwd\n    });\n    expect(result).toEqual([]);\n  });","file":"collect-uncommitted.test.js","skipped":false,"dir":"utils/collect-uncommitted/__tests__"},{"name":"resolves an array of uncommitted changes","suites":["collectUncommitted()"],"updatePoint":{"line":87,"column":46,"index":2892},"line":87,"code":"  it(\"resolves an array of uncommitted changes\", async () => {\n    const cwd = await initFixture(\"normal\");\n    await setupChanges(cwd);\n    const result = await collectUncommitted({\n      cwd\n    });\n    expect(result).toEqual(colorizedAry);\n  });","file":"collect-uncommitted.test.js","skipped":false,"dir":"utils/collect-uncommitted/__tests__"},{"name":"accepts options.log","suites":["collectUncommitted()"],"updatePoint":{"line":95,"column":25,"index":3120},"line":95,"code":"  it(\"accepts options.log\", async () => {\n    // re-uses previous cwd\n    const log = {\n      silly: jest.fn()\n    };\n    const result = await collectUncommitted({\n      log\n    });\n    expect(log.silly).toHaveBeenCalled();\n    expect(result).toEqual(colorizedAry);\n  });","file":"collect-uncommitted.test.js","skipped":false,"dir":"utils/collect-uncommitted/__tests__"},{"name":"resolves empty array on clean repo","suites":["collectUncommittedSync()"],"updatePoint":{"line":108,"column":40,"index":3456},"line":108,"code":"  it(\"resolves empty array on clean repo\", async () => {\n    const cwd = await initFixture(\"normal\");\n    const result = collectUncommittedSync({\n      cwd\n    });\n    expect(result).toEqual([]);\n  });","file":"collect-uncommitted.test.js","skipped":false,"dir":"utils/collect-uncommitted/__tests__"},{"name":"returns an array of uncommitted changes","suites":["collectUncommittedSync()"],"updatePoint":{"line":115,"column":45,"index":3663},"line":115,"code":"  it(\"returns an array of uncommitted changes\", async () => {\n    const cwd = await initFixture(\"normal\");\n    await setupChanges(cwd);\n    const result = collectUncommittedSync({\n      cwd\n    });\n    expect(result).toEqual(colorizedAry);\n  });","file":"collect-uncommitted.test.js","skipped":false,"dir":"utils/collect-uncommitted/__tests__"},{"name":"accepts options.log","suites":["collectUncommittedSync()"],"updatePoint":{"line":123,"column":25,"index":3889},"line":123,"code":"  it(\"accepts options.log\", async () => {\n    // re-uses previous cwd\n    const log = {\n      silly: jest.fn()\n    };\n    const result = collectUncommittedSync({\n      log\n    });\n    expect(log.silly).toHaveBeenCalled();\n    expect(result).toEqual(colorizedAry);\n  });","file":"collect-uncommitted.test.js","skipped":false,"dir":"utils/collect-uncommitted/__tests__"},{"name":"returns node with changes","suites":["collectUpdates()"],"updatePoint":{"line":71,"column":31,"index":1756},"line":71,"code":"  it(\"returns node with changes\", () => {\n    changedPackages.add(\"package-standalone\");\n    const graph = buildGraph();\n    const pkgs = graph.rawPackageList;\n    const execOpts = {\n      cwd: \"/test\"\n    }; // require(\"console\").dir(graph, { compact: false });\n\n    const updates = collectUpdates(pkgs, graph, execOpts, {});\n    expect(updates).toEqual([expect.objectContaining({\n      name: \"package-standalone\"\n    })]);\n    expect(hasTags).toHaveBeenLastCalledWith(execOpts);\n    expect(describeRefSync).toHaveBeenLastCalledWith(execOpts, undefined);\n    expect(makeDiffPredicate).toHaveBeenLastCalledWith(\"v1.0.0\", execOpts, undefined);\n  });","file":"collect-updates.test.js","skipped":false,"dir":"utils/collect-updates/__tests__"},{"name":"returns changed node and their dependents","suites":["collectUpdates()"],"updatePoint":{"line":87,"column":47,"index":2421},"line":87,"code":"  it(\"returns changed node and their dependents\", () => {\n    changedPackages.add(\"package-dag-1\");\n    const graph = buildGraph();\n    const pkgs = graph.rawPackageList;\n    const execOpts = {\n      cwd: \"/test\"\n    };\n    const updates = collectUpdates(pkgs, graph, execOpts, {});\n    expect(updates).toEqual([expect.objectContaining({\n      name: \"package-dag-1\"\n    }), expect.objectContaining({\n      name: \"package-dag-2a\"\n    }), expect.objectContaining({\n      name: \"package-dag-2b\"\n    }), expect.objectContaining({\n      name: \"package-dag-3\"\n    })]);\n  });","file":"collect-updates.test.js","skipped":false,"dir":"utils/collect-updates/__tests__"},{"name":"constrains results by excluded dependents","suites":["collectUpdates()"],"updatePoint":{"line":105,"column":47,"index":2991},"line":105,"code":"  it(\"constrains results by excluded dependents\", () => {\n    changedPackages.add(\"package-dag-1\");\n    const graph = buildGraph();\n    const pkgs = graph.rawPackageList;\n    const execOpts = {\n      cwd: \"/test\"\n    };\n    const updates = collectUpdates(pkgs, graph, execOpts, {\n      excludeDependents: true\n    });\n    expect(updates).toEqual([expect.objectContaining({\n      name: \"package-dag-1\"\n    }) // collectDependents() is skipped\n    ]);\n  });","file":"collect-updates.test.js","skipped":false,"dir":"utils/collect-updates/__tests__"},{"name":"constrains results by filtered packages","suites":["collectUpdates()"],"updatePoint":{"line":120,"column":45,"index":3445},"line":120,"code":"  it(\"constrains results by filtered packages\", () => {\n    changedPackages.add(\"package-dag-2a\");\n    changedPackages.add(\"package-dag-3\");\n    const graph = buildGraph();\n    const pkgs = graph.rawPackageList.filter(pkg => pkg.name !== \"package-dag-3\");\n    const execOpts = {\n      cwd: \"/test\"\n    };\n    const updates = collectUpdates(pkgs, graph, execOpts, {});\n    expect(updates).toEqual([expect.objectContaining({\n      name: \"package-dag-2a\"\n    }) // despite having changed, package-dag-3 was ignored\n    ]);\n  });","file":"collect-updates.test.js","skipped":false,"dir":"utils/collect-updates/__tests__"},{"name":"overrules dependents with filtered packages","suites":["collectUpdates()"],"updatePoint":{"line":134,"column":49,"index":3975},"line":134,"code":"  it(\"overrules dependents with filtered packages\", () => {\n    changedPackages.add(\"package-dag-1\");\n    const graph = buildGraph();\n    const pkgs = graph.rawPackageList.filter(pkg => pkg.name !== \"package-dag-2a\");\n    const execOpts = {\n      cwd: \"/test\"\n    };\n    const updates = collectUpdates(pkgs, graph, execOpts, {});\n    expect(updates).toEqual([expect.objectContaining({\n      name: \"package-dag-1\"\n    }), // despite having a changed dependency, package-dag-2a was ignored\n    expect.objectContaining({\n      name: \"package-dag-2b\"\n    }), expect.objectContaining({\n      name: \"package-dag-3\"\n    })]);\n  });","file":"collect-updates.test.js","skipped":false,"dir":"utils/collect-updates/__tests__"},{"name":"skips change detection when current revison is already released","suites":["collectUpdates()"],"updatePoint":{"line":151,"column":69,"index":4620},"line":151,"code":"  it(\"skips change detection when current revison is already released\", () => {\n    changedPackages.add(\"package-dag-1\");\n    describeRefSync.mockReturnValueOnce({\n      refCount: \"0\"\n    });\n    const graph = buildGraph();\n    const pkgs = graph.rawPackageList;\n    const execOpts = {\n      cwd: \"/test\"\n    };\n    const updates = collectUpdates(pkgs, graph, execOpts, {});\n    expect(updates).toEqual([]);\n  });","file":"collect-updates.test.js","skipped":false,"dir":"utils/collect-updates/__tests__"},{"name":"returns all nodes when no tag is found","suites":["collectUpdates()"],"updatePoint":{"line":164,"column":44,"index":5009},"line":164,"code":"  it(\"returns all nodes when no tag is found\", () => {\n    hasTags.mockReturnValueOnce(false);\n    const graph = buildGraph();\n    const pkgs = graph.rawPackageList;\n    const execOpts = {\n      cwd: \"/test\"\n    };\n    const updates = collectUpdates(pkgs, graph, execOpts, {});\n    expect(updates).toEqual(ALL_NODES);\n  });","file":"collect-updates.test.js","skipped":false,"dir":"utils/collect-updates/__tests__"},{"name":"returns all nodes with --force-publish","suites":["collectUpdates()"],"updatePoint":{"line":174,"column":44,"index":5333},"line":174,"code":"  it(\"returns all nodes with --force-publish\", () => {\n    const graph = buildGraph();\n    const pkgs = graph.rawPackageList;\n    const execOpts = {\n      cwd: \"/test\"\n    };\n    const updates = collectUpdates(pkgs, graph, execOpts, {\n      forcePublish: true\n    });\n    expect(updates).toEqual(ALL_NODES);\n  });","file":"collect-updates.test.js","skipped":false,"dir":"utils/collect-updates/__tests__"},{"name":"returns all nodes with --force-publish *","suites":["collectUpdates()"],"updatePoint":{"line":185,"column":46,"index":5649},"line":185,"code":"  it(\"returns all nodes with --force-publish *\", () => {\n    const graph = buildGraph();\n    const pkgs = graph.rawPackageList;\n    const execOpts = {\n      cwd: \"/test\"\n    };\n    const updates = collectUpdates(pkgs, graph, execOpts, {\n      forcePublish: \"*\"\n    });\n    expect(updates).toEqual(ALL_NODES);\n  });","file":"collect-updates.test.js","skipped":false,"dir":"utils/collect-updates/__tests__"},{"name":"always includes nodes targeted by --force-publish <pkg>","suites":["collectUpdates()"],"updatePoint":{"line":196,"column":61,"index":5979},"line":196,"code":"  it(\"always includes nodes targeted by --force-publish <pkg>\", () => {\n    changedPackages.add(\"package-dag-3\");\n    const graph = buildGraph();\n    const pkgs = graph.rawPackageList;\n    const execOpts = {\n      cwd: \"/test\"\n    };\n    const updates = collectUpdates(pkgs, graph, execOpts, {\n      forcePublish: \"package-standalone\"\n    });\n    expect(updates).toEqual([expect.objectContaining({\n      name: \"package-dag-3\"\n    }), expect.objectContaining({\n      name: \"package-standalone\"\n    })]);\n  });","file":"collect-updates.test.js","skipped":false,"dir":"utils/collect-updates/__tests__"},{"name":"always includes nodes targeted by --force-publish <pkg>,<pkg>","suites":["collectUpdates()"],"updatePoint":{"line":212,"column":67,"index":6494},"line":212,"code":"  it(\"always includes nodes targeted by --force-publish <pkg>,<pkg>\", () => {\n    changedPackages.add(\"package-dag-3\");\n    const graph = buildGraph();\n    const pkgs = graph.rawPackageList;\n    const execOpts = {\n      cwd: \"/test\"\n    };\n    const updates = collectUpdates(pkgs, graph, execOpts, {\n      forcePublish: \"package-standalone,package-dag-2b\"\n    });\n    expect(updates).toEqual([expect.objectContaining({\n      name: \"package-dag-2b\"\n    }), expect.objectContaining({\n      name: \"package-dag-3\"\n    }), expect.objectContaining({\n      name: \"package-standalone\"\n    })]);\n  });","file":"collect-updates.test.js","skipped":false,"dir":"utils/collect-updates/__tests__"},{"name":"always includes nodes targeted by --force-publish <pkg> --force-publish <pkg>","suites":["collectUpdates()"],"updatePoint":{"line":230,"column":83,"index":7103},"line":230,"code":"  it(\"always includes nodes targeted by --force-publish <pkg> --force-publish <pkg>\", () => {\n    changedPackages.add(\"package-dag-3\");\n    const graph = buildGraph();\n    const pkgs = graph.rawPackageList;\n    const execOpts = {\n      cwd: \"/test\"\n    };\n    const updates = collectUpdates(pkgs, graph, execOpts, {\n      forcePublish: [\"package-standalone\", \"package-dag-2b\"]\n    });\n    expect(updates).toEqual([expect.objectContaining({\n      name: \"package-dag-2b\"\n    }), expect.objectContaining({\n      name: \"package-dag-3\"\n    }), expect.objectContaining({\n      name: \"package-standalone\"\n    })]);\n  });","file":"collect-updates.test.js","skipped":false,"dir":"utils/collect-updates/__tests__"},{"name":"returns all prereleased nodes with --conventional-graduate","suites":["collectUpdates()"],"updatePoint":{"line":248,"column":64,"index":7698},"line":248,"code":"  it(\"returns all prereleased nodes with --conventional-graduate\", () => {\n    const graph = buildGraph(toPrereleaseMapper());\n    const pkgs = graph.rawPackageList;\n    const execOpts = {\n      cwd: \"/test\"\n    };\n    const updates = collectUpdates(pkgs, graph, execOpts, {\n      conventionalCommits: true,\n      conventionalGraduate: true\n    });\n    expect(updates).toEqual(ALL_NODES);\n  });","file":"collect-updates.test.js","skipped":false,"dir":"utils/collect-updates/__tests__"},{"name":"returns all prereleased nodes with --conventional-graduate *","suites":["collectUpdates()"],"updatePoint":{"line":260,"column":66,"index":8095},"line":260,"code":"  it(\"returns all prereleased nodes with --conventional-graduate *\", () => {\n    const graph = buildGraph(toPrereleaseMapper());\n    const pkgs = graph.rawPackageList;\n    const execOpts = {\n      cwd: \"/test\"\n    };\n    const updates = collectUpdates(pkgs, graph, execOpts, {\n      conventionalCommits: true,\n      conventionalGraduate: \"*\"\n    });\n    expect(updates).toEqual(ALL_NODES);\n  });","file":"collect-updates.test.js","skipped":false,"dir":"utils/collect-updates/__tests__"},{"name":"always includes prereleased nodes targeted by --conventional-graduate <pkg>","suites":["collectUpdates()"],"updatePoint":{"line":272,"column":81,"index":8506},"line":272,"code":"  it(\"always includes prereleased nodes targeted by --conventional-graduate <pkg>\", () => {\n    changedPackages.add(\"package-dag-3\");\n    const graph = buildGraph(toPrereleaseMapper([\"package-dag-3\", \"package-standalone\"]));\n    const pkgs = graph.rawPackageList;\n    const execOpts = {\n      cwd: \"/test\"\n    };\n    const updates = collectUpdates(pkgs, graph, execOpts, {\n      conventionalCommits: true,\n      conventionalGraduate: \"package-standalone\"\n    });\n    expect(updates).toEqual([expect.objectContaining({\n      name: \"package-dag-3\"\n    }), expect.objectContaining({\n      name: \"package-standalone\"\n    })]);\n  });","file":"collect-updates.test.js","skipped":false,"dir":"utils/collect-updates/__tests__"},{"name":"always includes prereleased nodes targeted by --conventional-graduate <pkg>,<pkg>","suites":["collectUpdates()"],"updatePoint":{"line":289,"column":87,"index":9141},"line":289,"code":"  it(\"always includes prereleased nodes targeted by --conventional-graduate <pkg>,<pkg>\", () => {\n    changedPackages.add(\"package-dag-3\");\n    const graph = buildGraph(toPrereleaseMapper([\"package-dag-3\", \"package-standalone\", \"package-dag-2b\"]));\n    const pkgs = graph.rawPackageList;\n    const execOpts = {\n      cwd: \"/test\"\n    };\n    const updates = collectUpdates(pkgs, graph, execOpts, {\n      forcePublish: \"package-standalone,package-dag-2b\"\n    });\n    expect(updates).toEqual([expect.objectContaining({\n      name: \"package-dag-2b\"\n    }), expect.objectContaining({\n      name: \"package-dag-3\"\n    }), expect.objectContaining({\n      name: \"package-standalone\"\n    })]);\n  });","file":"collect-updates.test.js","skipped":false,"dir":"utils/collect-updates/__tests__"},{"name":"always includes prereleased nodes targeted by --conventional-graduate <pkg> --conventional-graduate <pkg>","suites":["collectUpdates()"],"updatePoint":{"line":307,"column":111,"index":9855},"line":307,"code":"  it(\"always includes prereleased nodes targeted by --conventional-graduate <pkg> --conventional-graduate <pkg>\", () => {\n    changedPackages.add(\"package-dag-3\");\n    const graph = buildGraph(toPrereleaseMapper([\"package-dag-3\", \"package-standalone\", \"package-dag-2b\"]));\n    const pkgs = graph.rawPackageList;\n    const execOpts = {\n      cwd: \"/test\"\n    };\n    const updates = collectUpdates(pkgs, graph, execOpts, {\n      forcePublish: [\"package-standalone\", \"package-dag-2b\"]\n    });\n    expect(updates).toEqual([expect.objectContaining({\n      name: \"package-dag-2b\"\n    }), expect.objectContaining({\n      name: \"package-dag-3\"\n    }), expect.objectContaining({\n      name: \"package-standalone\"\n    })]);\n  });","file":"collect-updates.test.js","skipped":false,"dir":"utils/collect-updates/__tests__"},{"name":"uses revision range with --canary","suites":["collectUpdates()"],"updatePoint":{"line":325,"column":39,"index":10502},"line":325,"code":"  it(\"uses revision range with --canary\", () => {\n    changedPackages.add(\"package-dag-2a\");\n    const graph = buildGraph();\n    const pkgs = graph.rawPackageList;\n    const execOpts = {\n      cwd: \"/test\"\n    };\n    const updates = collectUpdates(pkgs, graph, execOpts, {\n      canary: true\n    });\n    expect(updates).toEqual([expect.objectContaining({\n      name: \"package-dag-2a\"\n    }), expect.objectContaining({\n      name: \"package-dag-3\"\n    })]);\n    expect(makeDiffPredicate).toHaveBeenLastCalledWith(\"deadbeef^..deadbeef\", execOpts, undefined);\n  });","file":"collect-updates.test.js","skipped":false,"dir":"utils/collect-updates/__tests__"},{"name":"uses revision provided by --since <ref>","suites":["collectUpdates()"],"updatePoint":{"line":342,"column":45,"index":11070},"line":342,"code":"  it(\"uses revision provided by --since <ref>\", () => {\n    const graph = buildGraph();\n    const pkgs = graph.rawPackageList;\n    const execOpts = {\n      cwd: \"/test\"\n    };\n    collectUpdates(pkgs, graph, execOpts, {\n      since: \"beefcafe\"\n    });\n    expect(makeDiffPredicate).toHaveBeenLastCalledWith(\"beefcafe\", execOpts, undefined);\n  });","file":"collect-updates.test.js","skipped":false,"dir":"utils/collect-updates/__tests__"},{"name":"does not exit early on tagged release when --since <ref> is passed","suites":["collectUpdates()"],"updatePoint":{"line":353,"column":72,"index":11444},"line":353,"code":"  it(\"does not exit early on tagged release when --since <ref> is passed\", () => {\n    changedPackages.add(\"package-dag-1\");\n    describeRefSync.mockReturnValueOnce({\n      refCount: \"0\"\n    });\n    const graph = buildGraph();\n    const pkgs = graph.rawPackageList;\n    const execOpts = {\n      cwd: \"/test\"\n    };\n    const updates = collectUpdates(pkgs, graph, execOpts, {\n      since: \"deadbeef\"\n    });\n    expect(updates).toEqual([expect.objectContaining({\n      name: \"package-dag-1\"\n    }), expect.objectContaining({\n      name: \"package-dag-2a\"\n    }), expect.objectContaining({\n      name: \"package-dag-2b\"\n    }), expect.objectContaining({\n      name: \"package-dag-3\"\n    })]);\n  });","file":"collect-updates.test.js","skipped":false,"dir":"utils/collect-updates/__tests__"},{"name":"ignores changes matched by --ignore-changes","suites":["collectUpdates()"],"updatePoint":{"line":376,"column":49,"index":12115},"line":376,"code":"  it(\"ignores changes matched by --ignore-changes\", () => {\n    const graph = buildGraph();\n    const pkgs = graph.rawPackageList;\n    const execOpts = {\n      cwd: \"/test\"\n    };\n    collectUpdates(pkgs, graph, execOpts, {\n      ignoreChanges: [\"**/README.md\"]\n    });\n    expect(makeDiffPredicate).toHaveBeenLastCalledWith(\"v1.0.0\", execOpts, [\"**/README.md\"]);\n  });","file":"collect-updates.test.js","skipped":false,"dir":"utils/collect-updates/__tests__"},{"name":"source node (dag)","suites":[],"updatePoint":{"line":10,"column":23,"index":200},"line":10,"code":"test(\"source node (dag)\", () => {\n  const graph = buildGraph();\n  const candidates = new Set();\n  candidates.add(graph.get(\"package-dag-1\"));\n  const result = collectDependents(candidates);\n  expect(Array.from(result)).toEqual([expect.objectContaining({\n    name: \"package-dag-2a\"\n  }), expect.objectContaining({\n    name: \"package-dag-2b\"\n  }), expect.objectContaining({\n    name: \"package-dag-3\"\n  })]);\n});","file":"lib-collect-dependents.test.js","skipped":false,"dir":"utils/collect-updates/__tests__"},{"name":"internal node (dag)","suites":[],"updatePoint":{"line":23,"column":25,"index":612},"line":23,"code":"test(\"internal node (dag)\", () => {\n  const graph = buildGraph();\n  const candidates = new Set();\n  candidates.add(graph.get(\"package-dag-2a\"));\n  const result = collectDependents(candidates);\n  expect(Array.from(result)).toEqual([expect.objectContaining({\n    name: \"package-dag-3\"\n  })]);\n});","file":"lib-collect-dependents.test.js","skipped":false,"dir":"utils/collect-updates/__tests__"},{"name":"pendant node (dag)","suites":[],"updatePoint":{"line":32,"column":24,"index":906},"line":32,"code":"test(\"pendant node (dag)\", () => {\n  const graph = buildGraph();\n  const candidates = new Set();\n  candidates.add(graph.get(\"package-standalone\"));\n  const result = collectDependents(candidates);\n  expect(Array.from(result)).toEqual([]);\n});","file":"lib-collect-dependents.test.js","skipped":false,"dir":"utils/collect-updates/__tests__"},{"name":"source node (cycle)","suites":[],"updatePoint":{"line":39,"column":25,"index":1149},"line":39,"code":"test(\"source node (cycle)\", () => {\n  const graph = buildGraph();\n  const candidates = new Set();\n  candidates.add(graph.get(\"package-cycle-1\"));\n  const result = collectDependents(candidates);\n  expect(Array.from(result)).toEqual([expect.objectContaining({\n    name: \"package-cycle-2\"\n  }), expect.objectContaining({\n    name: \"package-cycle-extraneous-1\"\n  }), expect.objectContaining({\n    name: \"package-cycle-extraneous-2\"\n  })]);\n});","file":"lib-collect-dependents.test.js","skipped":false,"dir":"utils/collect-updates/__tests__"},{"name":"internal node (cycle)","suites":[],"updatePoint":{"line":52,"column":27,"index":1591},"line":52,"code":"test(\"internal node (cycle)\", () => {\n  const graph = buildGraph();\n  const candidates = new Set();\n  candidates.add(graph.get(\"package-cycle-2\"));\n  const result = collectDependents(candidates);\n  expect(Array.from(result)).toEqual([expect.objectContaining({\n    name: \"package-cycle-1\"\n  }), expect.objectContaining({\n    name: \"package-cycle-extraneous-2\"\n  }) // package-cycle-extraneous-1 was ignored\n  ]);\n});","file":"lib-collect-dependents.test.js","skipped":false,"dir":"utils/collect-updates/__tests__"},{"name":"returns all packages","suites":[],"updatePoint":{"line":12,"column":26,"index":279},"line":12,"code":"test(\"returns all packages\", () => {\n  const graph = buildGraph();\n  const result = collectPackages(graph);\n  expect(toNamesList(result)).toMatchInlineSnapshot(`\nArray [\n  \"package-cycle-1\",\n  \"package-cycle-2\",\n  \"package-cycle-extraneous-1\",\n  \"package-cycle-extraneous-2\",\n  \"package-dag-1\",\n  \"package-dag-2a\",\n  \"package-dag-2b\",\n  \"package-dag-3\",\n  \"package-standalone\",\n]\n`);\n});","file":"lib-collect-packages.test.js","skipped":false,"dir":"utils/collect-updates/__tests__"},{"name":"filters packages through isCandidate, passing node and name","suites":[],"updatePoint":{"line":29,"column":65,"index":706},"line":29,"code":"test(\"filters packages through isCandidate, passing node and name\", () => {\n  const graph = buildGraph();\n  const packagesToInclude = [\"package-cycle-1\"];\n\n  const isCandidate = (node, name) => {\n    return packagesToInclude.includes(node.name) && node.name === name;\n  };\n\n  const result = collectPackages(graph, {\n    isCandidate\n  });\n  expect(toNamesList(result)).toMatchInlineSnapshot(`\nArray [\n  \"package-cycle-1\",\n  \"package-cycle-2\",\n  \"package-cycle-extraneous-1\",\n  \"package-cycle-extraneous-2\",\n]\n`);\n});","file":"lib-collect-packages.test.js","skipped":false,"dir":"utils/collect-updates/__tests__"},{"name":"calls onInclude with included package name","suites":[],"updatePoint":{"line":49,"column":48,"index":1205},"line":49,"code":"test(\"calls onInclude with included package name\", () => {\n  const graph = buildGraph();\n  const packagesToInclude = [\"package-standalone\"];\n\n  const isCandidate = (node, name) => packagesToInclude.includes(name);\n\n  const onInclude = jest.fn();\n  collectPackages(graph, {\n    isCandidate,\n    onInclude\n  });\n  expect(onInclude).toHaveBeenCalledWith(packagesToInclude[0]);\n});","file":"lib-collect-packages.test.js","skipped":false,"dir":"utils/collect-updates/__tests__"},{"name":"no argument","suites":[],"updatePoint":{"line":7,"column":17,"index":131},"line":7,"code":"test(\"no argument\", () => {\n  const result = getPackagesForOption();\n  expect(Array.from(result)).toEqual([]);\n});","file":"lib-get-packages-for-option.test.js","skipped":false,"dir":"utils/collect-updates/__tests__"},{"name":"--config-option","suites":[],"updatePoint":{"line":11,"column":21,"index":250},"line":11,"code":"test(\"--config-option\", () => {\n  const result = getPackagesForOption(true);\n  expect(Array.from(result)).toEqual([\"*\"]);\n});","file":"lib-get-packages-for-option.test.js","skipped":false,"dir":"utils/collect-updates/__tests__"},{"name":"--config-option *","suites":[],"updatePoint":{"line":15,"column":23,"index":378},"line":15,"code":"test(\"--config-option *\", () => {\n  const result = getPackagesForOption(\"*\");\n  expect(Array.from(result)).toEqual([\"*\"]);\n});","file":"lib-get-packages-for-option.test.js","skipped":false,"dir":"utils/collect-updates/__tests__"},{"name":"--config-option foo","suites":[],"updatePoint":{"line":19,"column":25,"index":507},"line":19,"code":"test(\"--config-option foo\", () => {\n  const result = getPackagesForOption(\"foo\");\n  expect(Array.from(result)).toEqual([\"foo\"]);\n});","file":"lib-get-packages-for-option.test.js","skipped":false,"dir":"utils/collect-updates/__tests__"},{"name":"--config-option foo,bar","suites":[],"updatePoint":{"line":23,"column":29,"index":644},"line":23,"code":"test(\"--config-option foo,bar\", () => {\n  const result = getPackagesForOption(\"foo,bar\");\n  expect(Array.from(result)).toEqual([\"foo\", \"bar\"]);\n});","file":"lib-get-packages-for-option.test.js","skipped":false,"dir":"utils/collect-updates/__tests__"},{"name":"--config-option foo --config-option bar","suites":[],"updatePoint":{"line":27,"column":45,"index":808},"line":27,"code":"test(\"--config-option foo --config-option bar\", () => {\n  const result = getPackagesForOption([\"foo\", \"bar\"]);\n  expect(Array.from(result)).toEqual([\"foo\", \"bar\"]);\n});","file":"lib-get-packages-for-option.test.js","skipped":false,"dir":"utils/collect-updates/__tests__"},{"name":"calls `git tag` with options passed in","suites":["hasTags()"],"updatePoint":{"line":14,"column":44,"index":338},"line":14,"code":"  it(\"calls `git tag` with options passed in\", () => {\n    hasTags({\n      cwd: \"test\"\n    });\n    expect(childProcess.execSync).toHaveBeenLastCalledWith(\"git\", [\"tag\"], {\n      cwd: \"test\"\n    });\n  });","file":"lib-has-tags.test.js","skipped":false,"dir":"utils/collect-updates/__tests__"},{"name":"returns true when tags exist","suites":["hasTags()"],"updatePoint":{"line":22,"column":34,"index":532},"line":22,"code":"  it(\"returns true when tags exist\", () => {\n    expect(hasTags()).toBe(true);\n  });","file":"lib-has-tags.test.js","skipped":false,"dir":"utils/collect-updates/__tests__"},{"name":"returns false when tags do not exist","suites":["hasTags()"],"updatePoint":{"line":25,"column":42,"index":625},"line":25,"code":"  it(\"returns false when tags do not exist\", () => {\n    childProcess.execSync.mockImplementation(() => \"\");\n    expect(hasTags()).toBe(false);\n  });","file":"lib-has-tags.test.js","skipped":false,"dir":"utils/collect-updates/__tests__"},{"name":"returns false when git command errors","suites":["hasTags()"],"updatePoint":{"line":29,"column":43,"index":776},"line":29,"code":"  it(\"returns false when git command errors\", () => {\n    childProcess.execSync.mockImplementation(() => {\n      throw new Error(\"boom\");\n    });\n    expect(hasTags()).toBe(false);\n  });","file":"lib-has-tags.test.js","skipped":false,"dir":"utils/collect-updates/__tests__"},{"name":"git diff call","suites":[],"updatePoint":{"line":16,"column":19,"index":341},"line":16,"code":"test(\"git diff call\", () => {\n  setup([\"packages/pkg-1/__tests__/index.test.js\", \"packages/pkg-1/index.js\", \"packages/pkg-1/package.json\", \"packages/pkg-1/README.md\"]);\n  const hasDiff = makeDiffPredicate(\"v1.0.0\", {\n    cwd: \"/test\"\n  });\n  const result = hasDiff({\n    location: \"/test/packages/pkg-1\"\n  });\n  expect(result).toBe(true);\n  expect(childProcess.execSync).toHaveBeenLastCalledWith(\"git\", [\"diff\", \"--name-only\", \"v1.0.0\", \"--\", \"packages/pkg-1\"], {\n    cwd: \"/test\"\n  });\n});","file":"lib-make-diff-predicate.test.js","skipped":false,"dir":"utils/collect-updates/__tests__"},{"name":"empty diff","suites":[],"updatePoint":{"line":29,"column":16,"index":829},"line":29,"code":"test(\"empty diff\", () => {\n  setup(\"\");\n  const hasDiff = makeDiffPredicate(\"v1.0.0\", {\n    cwd: \"/test\"\n  });\n  const result = hasDiff({\n    location: \"/test/packages/pkg-1\"\n  });\n  expect(result).toBe(false);\n});","file":"lib-make-diff-predicate.test.js","skipped":false,"dir":"utils/collect-updates/__tests__"},{"name":"rooted package","suites":[],"updatePoint":{"line":39,"column":20,"index":1048},"line":39,"code":"test(\"rooted package\", () => {\n  setup(\"package.json\");\n  const hasDiff = makeDiffPredicate(\"deadbeef\", {\n    cwd: \"/test\"\n  });\n  const result = hasDiff({\n    location: \"/test\"\n  });\n  expect(result).toBe(true);\n  expect(childProcess.execSync).toHaveBeenLastCalledWith(\"git\", [\"diff\", \"--name-only\", \"deadbeef\"], {\n    cwd: \"/test\"\n  });\n});","file":"lib-make-diff-predicate.test.js","skipped":false,"dir":"utils/collect-updates/__tests__"},{"name":"ignore changes (globstars)","suites":[],"updatePoint":{"line":52,"column":32,"index":1403},"line":52,"code":"test(\"ignore changes (globstars)\", () => {\n  setup([\"packages/pkg-2/examples/.eslintrc.yaml\", \"packages/pkg-2/examples/do-a-thing/index.js\", \"packages/pkg-2/examples/and-another-thing/package.json\"]);\n  const hasDiff = makeDiffPredicate(\"v1.0.0\", {\n    cwd: \"/test\"\n  }, [\"**/examples/**\", \"*.md\"]);\n  const result = hasDiff({\n    location: \"/test/packages/pkg-2\"\n  });\n  expect(result).toBe(false);\n});","file":"lib-make-diff-predicate.test.js","skipped":false,"dir":"utils/collect-updates/__tests__"},{"name":"ignore changes (match base)","suites":[],"updatePoint":{"line":62,"column":33,"index":1808},"line":62,"code":"test(\"ignore changes (match base)\", () => {\n  setup(\"packages/pkg-3/README.md\");\n  const hasDiff = makeDiffPredicate(\"v1.0.0\", {\n    cwd: \"/test\"\n  }, [\"*.md\"]);\n  const result = hasDiff({\n    location: \"/test/packages/pkg-3\"\n  });\n  expect(result).toBe(false);\n});","file":"lib-make-diff-predicate.test.js","skipped":false,"dir":"utils/collect-updates/__tests__"},{"name":"creates relative symlink to a directory","suites":["create-symlink"],"updatePoint":{"line":28,"column":47,"index":686},"line":28,"code":"    it(\"creates relative symlink to a directory\", async () => {\n      const src = path.resolve(\"./packages/package-2\");\n      const dst = path.resolve(\"./packages/package-1/node_modules/package-2\");\n      const type = \"junction\"; // even in posix environments :P\n\n      await createSymlink(src, dst, type);\n      expect(fs.unlink).not.toHaveBeenCalled();\n      expect(fs.symlink).toHaveBeenLastCalledWith(linkRelative(src, dst), dst, type);\n    });","file":"create-symlink.test.js","skipped":false,"dir":"utils/create-symlink/__tests__"},{"name":"creates relative symlink to an executable file","suites":["create-symlink"],"updatePoint":{"line":37,"column":54,"index":1142},"line":37,"code":"    it(\"creates relative symlink to an executable file\", async () => {\n      const src = path.resolve(\"./packages/package-2/cli.js\");\n      const dst = path.resolve(\"./packages/package-1/node_modules/.bin/package-2\");\n      const type = \"exec\";\n      await createSymlink(src, dst, type);\n      expect(fs.unlink).not.toHaveBeenCalled();\n      expect(fs.symlink).toHaveBeenLastCalledWith(linkRelative(src, dst), dst, \"file\");\n    });","file":"create-symlink.test.js","skipped":false,"dir":"utils/create-symlink/__tests__"},{"name":"overwrites an existing symlink","suites":["create-symlink"],"updatePoint":{"line":45,"column":38,"index":1558},"line":45,"code":"    it(\"overwrites an existing symlink\", async () => {\n      const src = path.resolve(\"./packages/package-2\");\n      const dst = path.resolve(\"./packages/package-1/node_modules/package-2\");\n      const type = \"junction\"; // even in posix environments :P\n\n      fs.lstat.mockImplementationOnce(() => Promise.resolve()); // something _does_ exist at destination\n\n      await createSymlink(src, dst, type);\n      expect(fs.unlink).toHaveBeenLastCalledWith(dst);\n      expect(fs.symlink).toHaveBeenLastCalledWith(linkRelative(src, dst), dst, type);\n    });","file":"create-symlink.test.js","skipped":false,"dir":"utils/create-symlink/__tests__"},{"name":"creates command shim to an executable file","suites":["create-symlink"],"updatePoint":{"line":57,"column":50,"index":2134},"line":57,"code":"    it(\"creates command shim to an executable file\", async () => {\n      const src = path.resolve(\"./packages/package-2/cli.js\");\n      const dst = path.resolve(\"./packages/package-1/node_modules/.bin/package-2\");\n      const type = \"exec\";\n      await createSymlink(src, dst, type);\n      expect(fs.lstat).not.toHaveBeenCalled();\n      expect(cmdShim).toHaveBeenLastCalledWith(src, dst);\n    });","file":"create-symlink.test.js","skipped":false,"dir":"utils/create-symlink/__tests__"},{"name":"rejects when cmd-shim errors","suites":["create-symlink"],"updatePoint":{"line":65,"column":36,"index":2517},"line":65,"code":"    it(\"rejects when cmd-shim errors\", async () => {\n      cmdShim.mockImplementationOnce(() => Promise.reject(new Error(\"yikes\")));\n      await expect(createSymlink(\"src\", \"dst\", \"exec\")).rejects.toThrow(\"yikes\");\n    });","file":"create-symlink.test.js","skipped":false,"dir":"utils/create-symlink/__tests__"},{"name":"always uses absolute paths when creating symlinks","suites":["create-symlink"],"updatePoint":{"line":69,"column":57,"index":2761},"line":69,"code":"    it(\"always uses absolute paths when creating symlinks\", async () => {\n      const src = path.resolve(\"./packages/package-2\");\n      const dst = path.resolve(\"./packages/package-1/node_modules/package-2\");\n      const type = \"junction\"; // only _actually_ matters in windows\n\n      fs.lstat.mockImplementationOnce(() => Promise.resolve()); // something _does_ exist at destination\n\n      await createSymlink(src, dst, type);\n      expect(fs.unlink).toHaveBeenLastCalledWith(dst);\n      expect(fs.symlink).toHaveBeenLastCalledWith(src, dst, type);\n    });","file":"create-symlink.test.js","skipped":false,"dir":"utils/create-symlink/__tests__"},{"name":"creates stub symlink to executable that doesn't exist yet","suites":["create-symlink"],"updatePoint":{"line":80,"column":65,"index":3327},"line":80,"code":"    it(\"creates stub symlink to executable that doesn't exist yet\", async () => {\n      const src = path.resolve(\"./packages/package-3/cli.js\");\n      const dst = path.resolve(\"./packages/package-1/node_modules/.bin/package-3\");\n      const type = \"exec\";\n      fs.pathExists.mockResolvedValueOnce(false);\n      await createSymlink(src, dst, type);\n      expect(fs.outputFile).toHaveBeenLastCalledWith(src, \"\");\n      expect(cmdShim).toHaveBeenLastCalledWith(src, dst);\n      expect(fs.remove).toHaveBeenLastCalledWith(src);\n    });","file":"create-symlink.test.js","skipped":false,"dir":"utils/create-symlink/__tests__"},{"name":"does not swallow cmd-shim errors when executable doesn't exist yet","suites":["create-symlink"],"updatePoint":{"line":90,"column":74,"index":3869},"line":90,"code":"    it(\"does not swallow cmd-shim errors when executable doesn't exist yet\", async () => {\n      cmdShim.mockImplementationOnce(() => Promise.reject(new Error(\"oh no\")));\n      fs.pathExists.mockResolvedValueOnce(false);\n      await expect(createSymlink(\"src\", \"dst\", \"exec\")).rejects.toThrow(\"oh no\");\n      expect(fs.remove).toHaveBeenLastCalledWith(\"src\");\n    });","file":"create-symlink.test.js","skipped":false,"dir":"utils/create-symlink/__tests__"},{"name":"resolves parsed metadata","suites":["describeRef()"],"updatePoint":{"line":19,"column":30,"index":450},"line":19,"code":"  it(\"resolves parsed metadata\", async () => {\n    const result = await describeRef();\n    expect(childProcess.exec).toHaveBeenLastCalledWith(\"git\", DEFAULT_ARGS, {});\n    expect(result).toEqual({\n      isDirty: false,\n      lastTagName: \"v1.2.3\",\n      lastVersion: \"v1.2.3\",\n      refCount: \"4\",\n      sha: \"567890a\"\n    });\n  });","file":"describe-ref.test.js","skipped":false,"dir":"utils/describe-ref/__tests__"},{"name":"accepts options.cwd","suites":["describeRef()"],"updatePoint":{"line":30,"column":25,"index":778},"line":30,"code":"  it(\"accepts options.cwd\", async () => {\n    const options = {\n      cwd: \"foo\"\n    };\n    await describeRef(options);\n    expect(childProcess.exec).toHaveBeenLastCalledWith(\"git\", DEFAULT_ARGS, options);\n  });","file":"describe-ref.test.js","skipped":false,"dir":"utils/describe-ref/__tests__"},{"name":"accepts options.match","suites":["describeRef()"],"updatePoint":{"line":37,"column":27,"index":992},"line":37,"code":"  it(\"accepts options.match\", async () => {\n    const options = {\n      match: \"v*.*.*\"\n    };\n    await describeRef(options);\n    expect(childProcess.exec).toHaveBeenLastCalledWith(\"git\", DEFAULT_ARGS.concat([\"--match\", \"v*.*.*\"]), options);\n  });","file":"describe-ref.test.js","skipped":false,"dir":"utils/describe-ref/__tests__"},{"name":"accepts includeMergedTags argument","suites":["describeRef()"],"updatePoint":{"line":44,"column":40,"index":1254},"line":44,"code":"  it(\"accepts includeMergedTags argument\", async () => {\n    const includeMergedTags = true;\n    await describeRef({}, includeMergedTags);\n    const newArgs = [...DEFAULT_ARGS];\n    newArgs.pop();\n    expect(childProcess.exec).toHaveBeenLastCalledWith(\"git\", newArgs, {});\n  });","file":"describe-ref.test.js","skipped":false,"dir":"utils/describe-ref/__tests__"},{"name":"returns parsed metadata","suites":["describeRefSync()"],"updatePoint":{"line":56,"column":29,"index":1659},"line":56,"code":"  it(\"returns parsed metadata\", () => {\n    const result = describeRefSync();\n    expect(childProcess.execSync).toHaveBeenLastCalledWith(\"git\", DEFAULT_ARGS, {});\n    expect(result).toEqual({\n      isDirty: false,\n      lastTagName: \"v1.2.3\",\n      lastVersion: \"v1.2.3\",\n      refCount: \"4\",\n      sha: \"567890a\"\n    });\n  });","file":"describe-ref.test.js","skipped":false,"dir":"utils/describe-ref/__tests__"},{"name":"accepts options.cwd","suites":["describeRefSync()"],"updatePoint":{"line":67,"column":25,"index":1983},"line":67,"code":"  it(\"accepts options.cwd\", () => {\n    const options = {\n      cwd: \"foo\"\n    };\n    describeRefSync(options);\n    expect(childProcess.execSync).toHaveBeenLastCalledWith(\"git\", DEFAULT_ARGS, options);\n  });","file":"describe-ref.test.js","skipped":false,"dir":"utils/describe-ref/__tests__"},{"name":"accepts options.match","suites":["describeRefSync()"],"updatePoint":{"line":74,"column":27,"index":2193},"line":74,"code":"  it(\"accepts options.match\", () => {\n    const options = {\n      match: \"v*.*.*\"\n    };\n    describeRefSync(options);\n    expect(childProcess.execSync).toHaveBeenLastCalledWith(\"git\", DEFAULT_ARGS.concat([\"--match\", \"v*.*.*\"]), options);\n  });","file":"describe-ref.test.js","skipped":false,"dir":"utils/describe-ref/__tests__"},{"name":"accepts includeMergedTags argument","suites":["describeRefSync()"],"updatePoint":{"line":81,"column":40,"index":2451},"line":81,"code":"  it(\"accepts includeMergedTags argument\", async () => {\n    const includeMergedTags = true;\n    describeRefSync({}, includeMergedTags);\n    const newArgs = [...DEFAULT_ARGS];\n    newArgs.pop();\n    expect(childProcess.execSync).toHaveBeenLastCalledWith(\"git\", newArgs, {});\n  });","file":"describe-ref.test.js","skipped":false,"dir":"utils/describe-ref/__tests__"},{"name":"matches independent tags","suites":["parser"],"updatePoint":{"line":90,"column":30,"index":2753},"line":90,"code":"  it(\"matches independent tags\", () => {\n    childProcess.execSync.mockReturnValueOnce(\"pkg-name@1.2.3-4-g567890a\");\n    const result = describeRefSync();\n    expect(result.lastTagName).toBe(\"pkg-name@1.2.3\");\n    expect(result.lastVersion).toBe(\"1.2.3\");\n  });","file":"describe-ref.test.js","skipped":false,"dir":"utils/describe-ref/__tests__"},{"name":"matches independent tags for scoped packages","suites":["parser"],"updatePoint":{"line":96,"column":50,"index":3035},"line":96,"code":"  it(\"matches independent tags for scoped packages\", () => {\n    childProcess.execSync.mockReturnValueOnce(\"@scope/pkg-name@1.2.3-4-g567890a\");\n    const result = describeRefSync();\n    expect(result.lastTagName).toBe(\"@scope/pkg-name@1.2.3\");\n    expect(result.lastVersion).toBe(\"1.2.3\");\n  });","file":"describe-ref.test.js","skipped":false,"dir":"utils/describe-ref/__tests__"},{"name":"matches dirty annotations","suites":["parser"],"updatePoint":{"line":102,"column":31,"index":3312},"line":102,"code":"  it(\"matches dirty annotations\", () => {\n    childProcess.execSync.mockReturnValueOnce(\"pkg-name@1.2.3-4-g567890a-dirty\");\n    const result = describeRefSync();\n    expect(result.isDirty).toBe(true);\n  });","file":"describe-ref.test.js","skipped":false,"dir":"utils/describe-ref/__tests__"},{"name":"handles non-matching strings safely","suites":["parser"],"updatePoint":{"line":107,"column":41,"index":3529},"line":107,"code":"  it(\"handles non-matching strings safely\", () => {\n    childProcess.execSync.mockReturnValueOnce(\"poopy-pants\");\n    const result = describeRefSync();\n    expect(result).toEqual({\n      isDirty: false,\n      lastTagName: undefined,\n      lastVersion: undefined,\n      refCount: undefined,\n      sha: undefined\n    });\n  });","file":"describe-ref.test.js","skipped":false,"dir":"utils/describe-ref/__tests__"},{"name":"detects fallback and returns partial metadata","suites":["parser"],"updatePoint":{"line":118,"column":51,"index":3864},"line":118,"code":"  it(\"detects fallback and returns partial metadata\", () => {\n    childProcess.execSync.mockReturnValueOnce(\"a1b2c3d\");\n    childProcess.execSync.mockReturnValueOnce(\"123\");\n    const options = {\n      cwd: \"bar\"\n    };\n    const result = describeRefSync(options);\n    expect(childProcess.execSync).toHaveBeenLastCalledWith(\"git\", [\"rev-list\", \"--count\", \"a1b2c3d\"], options);\n    expect(result).toEqual({\n      isDirty: false,\n      refCount: \"123\",\n      sha: \"a1b2c3d\"\n    });\n  });","file":"describe-ref.test.js","skipped":false,"dir":"utils/describe-ref/__tests__"},{"name":"detects dirty fallback and returns partial metadata","suites":["parser"],"updatePoint":{"line":132,"column":57,"index":4356},"line":132,"code":"  it(\"detects dirty fallback and returns partial metadata\", () => {\n    childProcess.execSync.mockReturnValueOnce(\"a1b2c3d-dirty\");\n    childProcess.execSync.mockReturnValueOnce(\"456\");\n    const result = describeRefSync();\n    expect(childProcess.execSync).toHaveBeenLastCalledWith(\"git\", [\"rev-list\", \"--count\", \"a1b2c3d\"], {});\n    expect(result).toEqual({\n      isDirty: true,\n      refCount: \"456\",\n      sha: \"a1b2c3d\"\n    });\n  });","file":"describe-ref.test.js","skipped":false,"dir":"utils/describe-ref/__tests__"},{"name":"should return metadata for tag names that are sha-like","suites":["parser"],"updatePoint":{"line":143,"column":60,"index":4798},"line":143,"code":"  it(\"should return metadata for tag names that are sha-like\", () => {\n    childProcess.execSync.mockReturnValueOnce(\"20190104-5-g6fb4e3293\");\n    const result = describeRefSync();\n    expect(result).toEqual({\n      isDirty: false,\n      lastTagName: \"20190104\",\n      lastVersion: \"20190104\",\n      refCount: \"5\",\n      sha: \"6fb4e3293\"\n    });\n  });","file":"describe-ref.test.js","skipped":false,"dir":"utils/describe-ref/__tests__"},{"name":"needs tests","suites":["@lerna/get-packed"],"updatePoint":{"line":8,"column":17,"index":111},"line":8,"code":"  it(\"needs tests\", () => {\n    expect(getPacked).toBeDefined();\n  });","file":"get-packed.test.js","skipped":false,"dir":"utils/get-packed/__tests__"},{"name":"errors if no GH_TOKEN env var","suites":["createGitHubClient"],"updatePoint":{"line":23,"column":35,"index":490},"line":23,"code":"  it(\"errors if no GH_TOKEN env var\", () => {\n    expect(() => {\n      createGitHubClient();\n    }).toThrow(\"A GH_TOKEN environment variable is required.\");\n  });","file":"github-client.test.js","skipped":false,"dir":"utils/github-client/__tests__"},{"name":"doesnt error if GH_TOKEN env var is set","suites":["createGitHubClient"],"updatePoint":{"line":28,"column":45,"index":663},"line":28,"code":"  it(\"doesnt error if GH_TOKEN env var is set\", () => {\n    process.env.GH_TOKEN = \"TOKEN\";\n    expect(() => {\n      createGitHubClient();\n    }).not.toThrow();\n  });","file":"github-client.test.js","skipped":false,"dir":"utils/github-client/__tests__"},{"name":"initializes GHE plugin when GHE_VERSION env var is set","suites":["createGitHubClient"],"updatePoint":{"line":34,"column":60,"index":845},"line":34,"code":"  it(\"initializes GHE plugin when GHE_VERSION env var is set\", () => {\n    process.env.GH_TOKEN = \"TOKEN\";\n    process.env.GHE_VERSION = \"2.18\";\n    createGitHubClient();\n    expect(Octokit.plugin).toHaveBeenCalledWith(expect.anything());\n  });","file":"github-client.test.js","skipped":false,"dir":"utils/github-client/__tests__"},{"name":"sets octokit `baseUrl` when GHE_API_URL is set","suites":["createGitHubClient"],"updatePoint":{"line":40,"column":52,"index":1082},"line":40,"code":"  it(\"sets octokit `baseUrl` when GHE_API_URL is set\", () => {\n    process.env.GH_TOKEN = \"TOKEN\";\n    process.env.GHE_API_URL = \"http://some/host\";\n    createGitHubClient();\n    expect(Octokit).toHaveBeenCalledWith({\n      auth: \"token TOKEN\",\n      baseUrl: \"http://some/host\"\n    });\n  });","file":"github-client.test.js","skipped":false,"dir":"utils/github-client/__tests__"},{"name":"returns a parsed URL","suites":["parseGitRepo"],"updatePoint":{"line":51,"column":26,"index":1386},"line":51,"code":"  it(\"returns a parsed URL\", () => {\n    childProcess.execSync.mockReturnValue(\"git@github.com:org/lerna.git\");\n    const repo = parseGitRepo();\n    expect(childProcess.execSync).toHaveBeenCalledWith(\"git\", [\"config\", \"--get\", \"remote.origin.url\"], undefined);\n    expect(repo).toEqual(expect.objectContaining({\n      name: \"lerna\",\n      owner: \"org\"\n    }));\n  });","file":"github-client.test.js","skipped":false,"dir":"utils/github-client/__tests__"},{"name":"can change the origin","suites":["parseGitRepo"],"updatePoint":{"line":60,"column":27,"index":1754},"line":60,"code":"  it(\"can change the origin\", () => {\n    childProcess.execSync.mockReturnValue(\"git@github.com:org/lerna.git\");\n    parseGitRepo(\"upstream\");\n    expect(childProcess.execSync).toHaveBeenCalledWith(\"git\", [\"config\", \"--get\", \"remote.upstream.url\"], undefined);\n  });","file":"github-client.test.js","skipped":false,"dir":"utils/github-client/__tests__"},{"name":"throws an error if no URL returned","suites":["parseGitRepo"],"updatePoint":{"line":65,"column":40,"index":2034},"line":65,"code":"  it(\"throws an error if no URL returned\", () => {\n    childProcess.execSync.mockReturnValue(\"\");\n    expect(() => parseGitRepo()).toThrow('Git remote URL could not be found using \"origin\".');\n  });","file":"github-client.test.js","skipped":false,"dir":"utils/github-client/__tests__"},{"name":"errors if no GL_TOKEN env var","suites":["createGitLabClient"],"updatePoint":{"line":18,"column":35,"index":341},"line":18,"code":"  it(\"errors if no GL_TOKEN env var\", () => {\n    expect(() => {\n      createGitLabClient();\n    }).toThrow(\"A GL_TOKEN environment variable is required.\");\n  });","file":"gitlab-client.test.js","skipped":false,"dir":"utils/gitlab-client/__tests__"},{"name":"doesnt error if GL_TOKEN env var is set","suites":["createGitLabClient"],"updatePoint":{"line":23,"column":45,"index":514},"line":23,"code":"  it(\"doesnt error if GL_TOKEN env var is set\", () => {\n    process.env.GL_TOKEN = \"TOKEN\";\n    expect(() => {\n      createGitLabClient();\n    }).not.toThrow();\n  });","file":"gitlab-client.test.js","skipped":false,"dir":"utils/gitlab-client/__tests__"},{"name":"sets client `baseUrl` when GL_API_URL is set","suites":["createGitLabClient"],"updatePoint":{"line":29,"column":50,"index":686},"line":29,"code":"  it(\"sets client `baseUrl` when GL_API_URL is set\", () => {\n    process.env.GL_TOKEN = \"TOKEN\";\n    process.env.GL_API_URL = \"http://some/host\";\n    createGitLabClient();\n    expect(GitLabClient).toHaveBeenCalledWith(\"TOKEN\", \"http://some/host\");\n  });","file":"gitlab-client.test.js","skipped":false,"dir":"utils/gitlab-client/__tests__"},{"name":"has a createRelease method like ocktokit","suites":["createGitLabClient"],"updatePoint":{"line":35,"column":46,"index":936},"line":35,"code":"  it(\"has a createRelease method like ocktokit\", () => {\n    expect(createGitLabClient().repos.createRelease).toBeInstanceOf(Function);\n  });","file":"gitlab-client.test.js","skipped":false,"dir":"utils/gitlab-client/__tests__"},{"name":"sets `baseUrl` and `token`","suites":["GitLabClient","constructor"],"updatePoint":{"line":13,"column":34,"index":241},"line":13,"code":"    it(\"sets `baseUrl` and `token`\", () => {\n      const client = new GitLabClient(\"TOKEN\", \"http://some/host\");\n      expect(client.baseUrl).toEqual(\"http://some/host\");\n      expect(client.token).toEqual(\"TOKEN\");\n    });","file":"GitLabClient.test.js","skipped":false,"dir":"utils/gitlab-client/__tests__"},{"name":"returns a GitLab releases API URL","suites":["GitLabClient","releasesUrl"],"updatePoint":{"line":20,"column":41,"index":512},"line":20,"code":"    it(\"returns a GitLab releases API URL\", () => {\n      const client = new GitLabClient(\"TOKEN\", \"http://some/host\");\n      const url = client.releasesUrl(\"the-namespace\", \"the-project\");\n      expect(url).toEqual(\"http://some/host/projects/the-namespace%2Fthe-project/releases\");\n    });","file":"GitLabClient.test.js","skipped":false,"dir":"utils/gitlab-client/__tests__"},{"name":"requests releases api with release","suites":["GitLabClient","createRelease"],"updatePoint":{"line":27,"column":42,"index":846},"line":27,"code":"    it(\"requests releases api with release\", () => {\n      const client = new GitLabClient(\"TOKEN\", \"http://some/host\");\n      fetch.mockResolvedValue({\n        ok: true\n      });\n      const release = {\n        owner: \"the-owner\",\n        repo: \"the-repo\",\n        name: \"the-name\",\n        tag_name: \"the-tag_name\",\n        body: \"the-body\"\n      };\n      client.createRelease(release);\n      expect(fetch).toHaveBeenCalledWith(\"http://some/host/projects/the-owner%2Fthe-repo/releases\", {\n        method: \"post\",\n        body: JSON.stringify({\n          name: \"the-name\",\n          tag_name: \"the-tag_name\",\n          description: \"the-body\"\n        }),\n        headers: {\n          \"PRIVATE-TOKEN\": \"TOKEN\",\n          \"Content-Type\": \"application/json\"\n        }\n      });\n    });","file":"GitLabClient.test.js","skipped":false,"dir":"utils/gitlab-client/__tests__"},{"name":"hasNpmVersion() returns boolean if range is satisfied by npm --version","suites":[],"updatePoint":{"line":12,"column":76,"index":295},"line":12,"code":"test(\"hasNpmVersion() returns boolean if range is satisfied by npm --version\", () => {\n  expect(hasNpmVersion(\">=5\")).toBe(true);\n  expect(hasNpmVersion(\">=6\")).toBe(false);\n  expect(childProcess.execSync).toHaveBeenLastCalledWith(\"npm\", [\"--version\"]);\n});","file":"has-npm-version.test.js","skipped":false,"dir":"utils/has-npm-version/__tests__"},{"name":"all output","suites":["listable.format()","renders"],"updatePoint":{"line":93,"column":20,"index":2145},"line":93,"code":"    test(\"all output\", () => {\n      const {\n        count,\n        text\n      } = formatWithOptions({\n        all: true\n      });\n      expect(count).toBe(3);\n      expect(text).toMatchInlineSnapshot(`\npkg-1\npkg-2\npkg-3 (PRIVATE)\n`);\n    });","file":"listable-format.test.js","skipped":false,"dir":"utils/listable/__tests__"},{"name":"long output","suites":["listable.format()","renders"],"updatePoint":{"line":107,"column":21,"index":2389},"line":107,"code":"    test(\"long output\", () => {\n      const {\n        count,\n        text\n      } = formatWithOptions({\n        long: true\n      });\n      expect(count).toBe(2);\n      expect(text).toMatchInlineSnapshot(`\npkg-1  v1.0.0 pkgs/pkg-1\npkg-2 MISSING pkgs/pkg-2\n`);\n    });","file":"listable-format.test.js","skipped":false,"dir":"utils/listable/__tests__"},{"name":"all long output","suites":["listable.format()","renders"],"updatePoint":{"line":120,"column":25,"index":2660},"line":120,"code":"    test(\"all long output\", () => {\n      const {\n        text\n      } = formatWithOptions({\n        long: true,\n        all: true\n      });\n      expect(text).toMatchInlineSnapshot(`\npkg-1  v1.0.0 pkgs/pkg-1\npkg-2 MISSING pkgs/pkg-2\npkg-3  v3.0.0 pkgs/pkg-3 (PRIVATE)\n`);\n    });","file":"listable-format.test.js","skipped":false,"dir":"utils/listable/__tests__"},{"name":"JSON output","suites":["listable.format()","renders"],"updatePoint":{"line":133,"column":21,"index":2937},"line":133,"code":"    test(\"JSON output\", () => {\n      const {\n        text\n      } = formatWithOptions({\n        json: true\n      });\n      expect(text).toMatchInlineSnapshot(`\n[\n  {\n    \"name\": \"pkg-1\",\n    \"version\": \"1.0.0\",\n    \"private\": false,\n    \"location\": \"__TEST_ROOTDIR__/pkgs/pkg-1\"\n  },\n  {\n    \"name\": \"pkg-2\",\n    \"private\": false,\n    \"location\": \"__TEST_ROOTDIR__/pkgs/pkg-2\"\n  }\n]\n`);\n    });","file":"listable-format.test.js","skipped":false,"dir":"utils/listable/__tests__"},{"name":"all JSON output","suites":["listable.format()","renders"],"updatePoint":{"line":155,"column":25,"index":3337},"line":155,"code":"    test(\"all JSON output\", () => {\n      const {\n        text\n      } = formatWithOptions({\n        json: true,\n        all: true\n      });\n      expect(text).toMatchInlineSnapshot(`\n[\n  {\n    \"name\": \"pkg-1\",\n    \"version\": \"1.0.0\",\n    \"private\": false,\n    \"location\": \"__TEST_ROOTDIR__/pkgs/pkg-1\"\n  },\n  {\n    \"name\": \"pkg-2\",\n    \"private\": false,\n    \"location\": \"__TEST_ROOTDIR__/pkgs/pkg-2\"\n  },\n  {\n    \"name\": \"pkg-3\",\n    \"version\": \"3.0.0\",\n    \"private\": true,\n    \"location\": \"__TEST_ROOTDIR__/pkgs/pkg-3\"\n  }\n]\n`);\n    });","file":"listable-format.test.js","skipped":false,"dir":"utils/listable/__tests__"},{"name":"NDJSON output","suites":["listable.format()","renders"],"updatePoint":{"line":184,"column":23,"index":3875},"line":184,"code":"    test(\"NDJSON output\", () => {\n      const {\n        text\n      } = formatWithOptions({\n        ndjson: true,\n        all: true\n      });\n      expect(text).toMatchInlineSnapshot(`\n{\"name\":\"pkg-1\",\"version\":\"1.0.0\",\"private\":false,\"location\":\"__TEST_ROOTDIR__/pkgs/pkg-1\"}\n{\"name\":\"pkg-2\",\"private\":false,\"location\":\"__TEST_ROOTDIR__/pkgs/pkg-2\"}\n{\"name\":\"pkg-3\",\"version\":\"3.0.0\",\"private\":true,\"location\":\"__TEST_ROOTDIR__/pkgs/pkg-3\"}\n`);\n    });","file":"listable-format.test.js","skipped":false,"dir":"utils/listable/__tests__"},{"name":"graph output","suites":["listable.format()","renders"],"updatePoint":{"line":197,"column":22,"index":4327},"line":197,"code":"    test(\"graph output\", () => {\n      const {\n        text\n      } = formatWithOptions({\n        graph: true\n      });\n      expect(text).toMatchInlineSnapshot(`\n        {\n          \"pkg-1\": [\n            \"pkg-2\"\n          ],\n          \"pkg-2\": []\n        }\n      `);\n    });","file":"listable-format.test.js","skipped":false,"dir":"utils/listable/__tests__"},{"name":"all graph output","suites":["listable.format()","renders"],"updatePoint":{"line":212,"column":26,"index":4608},"line":212,"code":"    test(\"all graph output\", () => {\n      const {\n        text\n      } = formatWithOptions({\n        graph: true,\n        all: true\n      });\n      expect(text).toMatchInlineSnapshot(`\n        {\n          \"pkg-1\": [\n            \"pkg-2\"\n          ],\n          \"pkg-2\": [\n            \"pkg-3\"\n          ],\n          \"pkg-3\": [\n            \"pkg-2\"\n          ]\n        }\n      `);\n    });","file":"listable-format.test.js","skipped":false,"dir":"utils/listable/__tests__"},{"name":"parseable output","suites":["listable.format()","renders"],"updatePoint":{"line":233,"column":26,"index":4993},"line":233,"code":"    test(\"parseable output\", () => {\n      const {\n        text\n      } = formatWithOptions({\n        parseable: true\n      });\n      expect(text).toMatchInlineSnapshot(`\n__TEST_ROOTDIR__/pkgs/pkg-1\n__TEST_ROOTDIR__/pkgs/pkg-2\n`);\n    });","file":"listable-format.test.js","skipped":false,"dir":"utils/listable/__tests__"},{"name":"all parseable output","suites":["listable.format()","renders"],"updatePoint":{"line":244,"column":30,"index":5236},"line":244,"code":"    test(\"all parseable output\", () => {\n      const {\n        text\n      } = formatWithOptions({\n        parseable: true,\n        all: true\n      });\n      expect(text).toMatchInlineSnapshot(`\n__TEST_ROOTDIR__/pkgs/pkg-1\n__TEST_ROOTDIR__/pkgs/pkg-2\n__TEST_ROOTDIR__/pkgs/pkg-3\n`);\n    });","file":"listable-format.test.js","skipped":false,"dir":"utils/listable/__tests__"},{"name":"long parseable output","suites":["listable.format()","renders"],"updatePoint":{"line":257,"column":31,"index":5527},"line":257,"code":"    test(\"long parseable output\", () => {\n      const {\n        text\n      } = formatWithOptions({\n        parseable: true,\n        long: true\n      });\n      expect(text).toMatchInlineSnapshot(`\n__TEST_ROOTDIR__/pkgs/pkg-1:pkg-1:1.0.0\n__TEST_ROOTDIR__/pkgs/pkg-2:pkg-2:MISSING\n`);\n    });","file":"listable-format.test.js","skipped":false,"dir":"utils/listable/__tests__"},{"name":"all long parseable output","suites":["listable.format()","renders"],"updatePoint":{"line":269,"column":35,"index":5821},"line":269,"code":"    test(\"all long parseable output\", () => {\n      const {\n        text\n      } = formatWithOptions({\n        parseable: true,\n        all: true,\n        long: true\n      });\n      expect(text).toMatchInlineSnapshot(`\n__TEST_ROOTDIR__/pkgs/pkg-1:pkg-1:1.0.0\n__TEST_ROOTDIR__/pkgs/pkg-2:pkg-2:MISSING\n__TEST_ROOTDIR__/pkgs/pkg-3:pkg-3:3.0.0:PRIVATE\n`);\n    });","file":"listable-format.test.js","skipped":false,"dir":"utils/listable/__tests__"},{"name":"la => ls -la","suites":["listable.format()","aliases"],"updatePoint":{"line":285,"column":22,"index":6205},"line":285,"code":"    test(\"la => ls -la\", () => {\n      const {\n        text\n      } = formatWithOptions({\n        _: [\"la\"]\n      });\n      expect(text).toMatchInlineSnapshot(`\npkg-1  v1.0.0 pkgs/pkg-1\npkg-2 MISSING pkgs/pkg-2\npkg-3  v3.0.0 pkgs/pkg-3 (PRIVATE)\n`);\n    });","file":"listable-format.test.js","skipped":false,"dir":"utils/listable/__tests__"},{"name":"ll => ls -l","suites":["listable.format()","aliases"],"updatePoint":{"line":297,"column":21,"index":6462},"line":297,"code":"    test(\"ll => ls -l\", () => {\n      const {\n        text\n      } = formatWithOptions({\n        _: [\"ll\"]\n      });\n      expect(text).toMatchInlineSnapshot(`\npkg-1  v1.0.0 pkgs/pkg-1\npkg-2 MISSING pkgs/pkg-2\n`);\n    });","file":"listable-format.test.js","skipped":false,"dir":"utils/listable/__tests__"},{"name":"output","suites":["listable.format()","toposort"],"updatePoint":{"line":310,"column":16,"index":6716},"line":310,"code":"    test(\"output\", () => {\n      const {\n        text\n      } = formatWithOptions({\n        toposort: true\n      });\n      expect(text).toMatchInlineSnapshot(`\npkg-2\npkg-1\n`);\n    });","file":"listable-format.test.js","skipped":false,"dir":"utils/listable/__tests__"},{"name":"cycles","suites":["listable.format()","toposort"],"updatePoint":{"line":321,"column":16,"index":6900},"line":321,"code":"    test(\"cycles\", () => {\n      const {\n        text\n      } = formatWithOptions({\n        toposort: true,\n        all: true\n      });\n      expect(loggingOutput(\"warn\")).toContainEqual(expect.stringContaining(\"pkg-2 -> pkg-3 -> pkg-2\"));\n      expect(text).toMatchInlineSnapshot(`\npkg-2\npkg-3 (PRIVATE)\npkg-1\n`);\n    });","file":"listable-format.test.js","skipped":false,"dir":"utils/listable/__tests__"},{"name":"provides --json","suites":["listable.options()"],"updatePoint":{"line":10,"column":21,"index":228},"line":10,"code":"  it(\"provides --json\", () => {\n    expect(parsed(\"--json\")).toHaveProperty(\"json\", true);\n  });","file":"listable-options.test.js","skipped":false,"dir":"utils/listable/__tests__"},{"name":"provides --ndjson","suites":["listable.options()"],"updatePoint":{"line":13,"column":23,"index":327},"line":13,"code":"  it(\"provides --ndjson\", () => {\n    expect(parsed(\"--ndjson\")).toHaveProperty(\"ndjson\", true);\n  });","file":"listable-options.test.js","skipped":false,"dir":"utils/listable/__tests__"},{"name":"provides --all","suites":["listable.options()"],"updatePoint":{"line":16,"column":20,"index":427},"line":16,"code":"  it(\"provides --all\", () => {\n    expect(parsed(\"--all\")).toHaveProperty(\"all\", true);\n  });","file":"listable-options.test.js","skipped":false,"dir":"utils/listable/__tests__"},{"name":"provides --all alias -a","suites":["listable.options()"],"updatePoint":{"line":19,"column":29,"index":530},"line":19,"code":"  it(\"provides --all alias -a\", () => {\n    expect(parsed(\"-a\")).toHaveProperty(\"all\", true);\n  });","file":"listable-options.test.js","skipped":false,"dir":"utils/listable/__tests__"},{"name":"provides --long","suites":["listable.options()"],"updatePoint":{"line":22,"column":21,"index":622},"line":22,"code":"  it(\"provides --long\", () => {\n    expect(parsed(\"--long\")).toHaveProperty(\"long\", true);\n  });","file":"listable-options.test.js","skipped":false,"dir":"utils/listable/__tests__"},{"name":"provides --long alias -l","suites":["listable.options()"],"updatePoint":{"line":25,"column":30,"index":728},"line":25,"code":"  it(\"provides --long alias -l\", () => {\n    expect(parsed(\"-l\")).toHaveProperty(\"long\", true);\n  });","file":"listable-options.test.js","skipped":false,"dir":"utils/listable/__tests__"},{"name":"provides --parseable","suites":["listable.options()"],"updatePoint":{"line":28,"column":26,"index":826},"line":28,"code":"  it(\"provides --parseable\", () => {\n    expect(parsed(\"--parseable\")).toHaveProperty(\"parseable\", true);\n  });","file":"listable-options.test.js","skipped":false,"dir":"utils/listable/__tests__"},{"name":"provides --parseable alias -p","suites":["listable.options()"],"updatePoint":{"line":31,"column":35,"index":947},"line":31,"code":"  it(\"provides --parseable alias -p\", () => {\n    expect(parsed(\"-p\")).toHaveProperty(\"parseable\", true);\n  });","file":"listable-options.test.js","skipped":false,"dir":"utils/listable/__tests__"},{"name":"provides --toposort","suites":["listable.options()"],"updatePoint":{"line":34,"column":25,"index":1049},"line":34,"code":"  it(\"provides --toposort\", () => {\n    expect(parsed(\"--toposort\")).toHaveProperty(\"toposort\", true);\n  });","file":"listable-options.test.js","skipped":false,"dir":"utils/listable/__tests__"},{"name":"provides --graph","suites":["listable.options()"],"updatePoint":{"line":37,"column":22,"index":1155},"line":37,"code":"  it(\"provides --graph\", () => {\n    expect(parsed(\"--graph\")).toHaveProperty(\"graph\", true);\n  });","file":"listable-options.test.js","skipped":false,"dir":"utils/listable/__tests__"},{"name":"logs tarball contents from json","suites":["@lerna/log-packed"],"updatePoint":{"line":59,"column":37,"index":1432},"line":59,"code":"  it(\"logs tarball contents from json\", () => {\n    fixture.forEach(logPacked);\n    expect(loggingOutput().join(\"\\n\")).toMatchInlineSnapshot(`\n\npackage: package-1@1.1.0\n=== Tarball Contents ===\n396B package.json\n=== Tarball Details ===\nname:          package-1\nversion:       1.1.0\nfilename:      package-1-1.1.0.tgz\npackage size:  223 B\nunpacked size: 396 B\nshasum:        8f339308bfabffcddd89e379ab76c8fbbc5c429a\nintegrity:     sha512-s+D+5+Kovk2mi[...]XqcwFATxxUGVw==\ntotal files:   1\n\n\npackage: package-2@1.1.0\n=== Tarball Contents ===\n99B package.json\n=== Tarball Details ===\nname:          package-2\nversion:       1.1.0\nfilename:      package-2-1.1.0.tgz\npackage size:  172 B\nunpacked size: 99 B\nshasum:        9a868dcbaa1812afb10ae2366909d6bf3a1c6f95\nintegrity:     sha512-k9Ao8IyLZUq2f[...]bMINb3uj3wxkw==\ntotal files:   1\n\n`);\n  });","file":"log-packed.test.js","skipped":false,"dir":"utils/log-packed/__tests__"},{"name":"safely ignores missing fields from incomplete json","suites":["@lerna/log-packed"],"updatePoint":{"line":92,"column":56,"index":2294},"line":92,"code":"  it(\"safely ignores missing fields from incomplete json\", () => {\n    // this is the output of the legacy npm pack (no --json) call\n    logPacked({\n      name: \"package-3\",\n      version: \"3.1.0\",\n      filename: \"package-3-3.1.0.tgz\"\n    });\n    expect(loggingOutput().join(\"\\n\")).toMatchInlineSnapshot(`\n\npackage: package-3@3.1.0\n=== Tarball Details ===\nname:     package-3\nversion:  3.1.0\nfilename: package-3-3.1.0.tgz\n\n`);\n  });","file":"log-packed.test.js","skipped":false,"dir":"utils/log-packed/__tests__"},{"name":"package name","suites":["@lerna/map-to-registry","uri"],"updatePoint":{"line":11,"column":22,"index":333},"line":11,"code":"    test(\"package name\", () => {\n      const config = npmConf();\n      const result = mapToRegistry(\"foo\", config);\n      expect(result).toMatchObject({\n        uri: \"https://registry.npmjs.org/foo\",\n        auth: {\n          scope: \"//registry.npmjs.org/\",\n          alwaysAuth: false\n        }\n      });\n    });","file":"map-to-registry.test.js","skipped":false,"dir":"utils/map-to-registry/__tests__"},{"name":"scoped package name","suites":["@lerna/map-to-registry","uri"],"updatePoint":{"line":22,"column":29,"index":654},"line":22,"code":"    test(\"scoped package name\", () => {\n      const config = npmConf();\n      const result = mapToRegistry(\"@scope/bar\", config);\n      expect(result).toMatchObject({\n        uri: \"https://registry.npmjs.org/@scope%2fbar\"\n      });\n    });","file":"map-to-registry.test.js","skipped":false,"dir":"utils/map-to-registry/__tests__"},{"name":"scoped package name with scoped registry","suites":["@lerna/map-to-registry","uri"],"updatePoint":{"line":29,"column":50,"index":915},"line":29,"code":"    test(\"scoped package name with scoped registry\", () => {\n      const config = npmConf({\n        \"@scope:registry\": \"https://private.npm-enterprise.com:1234/\"\n      });\n      const result = mapToRegistry(\"@scope/bar\", config);\n      expect(result).toMatchObject({\n        uri: \"https://private.npm-enterprise.com:1234/@scope%2fbar\",\n        auth: {\n          scope: \"//private.npm-enterprise.com:1234/\"\n        }\n      });\n    });","file":"map-to-registry.test.js","skipped":false,"dir":"utils/map-to-registry/__tests__"},{"name":"scoped config","suites":["@lerna/map-to-registry","uri"],"updatePoint":{"line":41,"column":23,"index":1322},"line":41,"code":"    test(\"scoped config\", () => {\n      const config = npmConf({\n        scope: \"@scope\",\n        \"@scope:registry\": \"https://private.npm-enterprise.com:1234/\"\n      });\n      const result = mapToRegistry(\"foo\", config);\n      expect(result).toMatchObject({\n        uri: \"https://private.npm-enterprise.com:1234/foo\"\n      });\n    });","file":"map-to-registry.test.js","skipped":false,"dir":"utils/map-to-registry/__tests__"},{"name":"remote package","suites":["@lerna/map-to-registry","uri"],"updatePoint":{"line":51,"column":24,"index":1658},"line":51,"code":"    test(\"remote package\", () => {\n      const config = npmConf();\n      const result = mapToRegistry(\"http://foo.com/bar.tgz\", config);\n      expect(result).toMatchObject({\n        uri: \"http://foo.com/bar.tgz\",\n        auth: {\n          scope: \"//registry.npmjs.org/\"\n        }\n      });\n    });","file":"map-to-registry.test.js","skipped":false,"dir":"utils/map-to-registry/__tests__"},{"name":"always-auth = true","suites":["@lerna/map-to-registry","auth"],"updatePoint":{"line":63,"column":28,"index":1993},"line":63,"code":"    test(\"always-auth = true\", () => {\n      const config = npmConf({\n        \"always-auth\": \"true\"\n      });\n      const result = mapToRegistry(\"foo\", config);\n      const nerfed = mapToRegistry(\"foo\", config.set(\"//registry.npmjs.org/:always-auth\", true));\n      expect(result.auth).toMatchObject({\n        alwaysAuth: true\n      });\n      expect(nerfed.auth).toEqual(result.auth);\n    });","file":"map-to-registry.test.js","skipped":false,"dir":"utils/map-to-registry/__tests__"},{"name":"bearer token","suites":["@lerna/map-to-registry","auth"],"updatePoint":{"line":74,"column":22,"index":2379},"line":74,"code":"    test(\"bearer token\", () => {\n      const config = npmConf({\n        \"//registry.npmjs.org/:_authToken\": \"deadbeef\"\n      });\n      const result = mapToRegistry(\"foo\", config);\n      expect(result.auth).toMatchObject({\n        token: \"deadbeef\"\n      });\n    });","file":"map-to-registry.test.js","skipped":false,"dir":"utils/map-to-registry/__tests__"},{"name":"otp","suites":["@lerna/map-to-registry","auth"],"updatePoint":{"line":83,"column":13,"index":2636},"line":83,"code":"    test(\"otp\", () => {\n      const config = npmConf({\n        \"//registry.npmjs.org/:_authToken\": \"deadbeef\",\n        otp: \"123456\"\n      });\n      const result = mapToRegistry(\"foo\", config);\n      expect(result.auth).toMatchObject({\n        otp: \"123456\"\n      });\n    });","file":"map-to-registry.test.js","skipped":false,"dir":"utils/map-to-registry/__tests__"},{"name":"username + password","suites":["@lerna/map-to-registry","auth"],"updatePoint":{"line":93,"column":29,"index":2928},"line":93,"code":"    test(\"username + password\", () => {\n      const config = npmConf({\n        username: \"dead\",\n        _password: \"beef\"\n      });\n      const result = mapToRegistry(\"foo\", config);\n      const nerfed = mapToRegistry(\"foo\", config.set(\"//registry.npmjs.org/:username\", \"dead\").set(\"//registry.npmjs.org/:_password\", \"YmVlZg==\"));\n      expect(result.auth).toMatchObject({\n        auth: \"ZGVhZDpiZWVm\",\n        username: \"dead\",\n        password: \"beef\"\n      });\n      expect(nerfed.auth).toEqual(result.auth);\n    });","file":"map-to-registry.test.js","skipped":false,"dir":"utils/map-to-registry/__tests__"},{"name":"email","suites":["@lerna/map-to-registry","auth"],"updatePoint":{"line":107,"column":15,"index":3435},"line":107,"code":"    test(\"email\", () => {\n      const config = npmConf({\n        email: \"beef@cow.org\"\n      });\n      const result = mapToRegistry(\"foo\", config);\n      const nerfed = mapToRegistry(\"foo\", config.set(\"//registry.npmjs.org/:email\", \"beef@cow.org\"));\n      expect(result.auth).toMatchObject({\n        email: \"beef@cow.org\"\n      });\n      expect(nerfed.auth).toEqual(result.auth);\n    });","file":"map-to-registry.test.js","skipped":false,"dir":"utils/map-to-registry/__tests__"},{"name":"legacy _auth=<base64>","suites":["@lerna/map-to-registry","auth"],"updatePoint":{"line":118,"column":31,"index":3839},"line":118,"code":"    test(\"legacy _auth=<base64>\", () => {\n      const config = npmConf({\n        _auth: \"ZGVhZDpiZWVm\"\n      });\n      const result = mapToRegistry(\"foo\", config);\n      const ignore = mapToRegistry(\"foo\", config.set(\"username\", \"cafe\"));\n      expect(result.auth).toMatchObject({\n        auth: \"ZGVhZDpiZWVm\",\n        username: \"dead\",\n        password: \"beef\"\n      });\n      expect(ignore.auth).toEqual(result.auth);\n    });","file":"map-to-registry.test.js","skipped":false,"dir":"utils/map-to-registry/__tests__"},{"name":"differing request and registry host","suites":["@lerna/map-to-registry","auth"],"updatePoint":{"line":131,"column":45,"index":4281},"line":131,"code":"    test(\"differing request and registry host\", () => {\n      const config = npmConf({\n        \"//registry.npmjs.org/:_authToken\": \"deadbeef\"\n      });\n      const result = mapToRegistry(\"http://foo.com/bar.tgz\", config);\n      const always = mapToRegistry(\"http://foo.com/bar.tgz\", config.set(\"always-auth\", true));\n      expect(result.auth).toMatchObject({\n        scope: \"//registry.npmjs.org/\",\n        token: undefined\n      });\n      expect(always.auth).toMatchObject({\n        token: \"deadbeef\"\n      });\n    });","file":"map-to-registry.test.js","skipped":false,"dir":"utils/map-to-registry/__tests__"},{"name":"username _without_ password","suites":["@lerna/map-to-registry","auth"],"updatePoint":{"line":145,"column":37,"index":4793},"line":145,"code":"    test(\"username _without_ password\", () => {\n      const config = npmConf({\n        username: \"no-auth-for-you\"\n      });\n      const result = mapToRegistry(\"foo\", config);\n      expect(result.auth).toEqual({\n        scope: \"//registry.npmjs.org/\",\n        email: undefined,\n        alwaysAuth: false,\n        token: undefined,\n        username: undefined,\n        password: undefined,\n        auth: undefined\n      });\n    });","file":"map-to-registry.test.js","skipped":false,"dir":"utils/map-to-registry/__tests__"},{"name":"registry trailing slash","suites":["@lerna/map-to-registry","normalizes"],"updatePoint":{"line":162,"column":33,"index":5259},"line":162,"code":"    test(\"registry trailing slash\", () => {\n      const config = npmConf({\n        registry: \"http://no-trailing-slash.com\"\n      });\n      const result = mapToRegistry(\"foo\", config);\n      expect(result).toMatchObject({\n        uri: \"http://no-trailing-slash.com/foo\"\n      });\n    });","file":"map-to-registry.test.js","skipped":false,"dir":"utils/map-to-registry/__tests__"},{"name":"--scope argument","suites":["@lerna/map-to-registry","normalizes"],"updatePoint":{"line":171,"column":26,"index":5540},"line":171,"code":"    test(\"--scope argument\", () => {\n      const config = npmConf({\n        scope: \"scope\" // scoped registry is missing, however\n\n      });\n      const result = mapToRegistry(\"foo\", config);\n      expect(result).toMatchObject({\n        uri: \"https://registry.npmjs.org/foo\"\n      });\n    });","file":"map-to-registry.test.js","skipped":false,"dir":"utils/map-to-registry/__tests__"},{"name":"exports default factory","suites":["@lerna/npm-conf"],"updatePoint":{"line":6,"column":29,"index":113},"line":6,"code":"  it(\"exports default factory\", () => {\n    expect(npmConf).toBeDefined();\n    expect(typeof npmConf).toBe(\"function\");\n  });","file":"npm-conf.test.js","skipped":false,"dir":"utils/npm-conf/__tests__"},{"name":"exports named defaults","suites":["@lerna/npm-conf"],"updatePoint":{"line":10,"column":28,"index":238},"line":10,"code":"  it(\"exports named defaults\", () => {\n    const {\n      defaults\n    } = npmConf;\n    expect(defaults).toBeDefined();\n    expect(typeof defaults).toBe(\"object\");\n  });","file":"npm-conf.test.js","skipped":false,"dir":"utils/npm-conf/__tests__"},{"name":"exports named Conf","suites":["@lerna/npm-conf"],"updatePoint":{"line":17,"column":24,"index":403},"line":17,"code":"  it(\"exports named Conf\", () => {\n    const {\n      Conf\n    } = npmConf;\n    expect(Conf).toBeDefined();\n    expect(typeof Conf).toBe(\"function\");\n  });","file":"npm-conf.test.js","skipped":false,"dir":"utils/npm-conf/__tests__"},{"name":"exports named toNerfDart","suites":["@lerna/npm-conf"],"updatePoint":{"line":24,"column":30,"index":564},"line":24,"code":"  it(\"exports named toNerfDart\", () => {\n    const {\n      toNerfDart\n    } = npmConf;\n    expect(toNerfDart).toBeDefined();\n    expect(typeof toNerfDart).toBe(\"function\");\n    expect(toNerfDart(\"https://npm.example.com\")).toBe(\"//npm.example.com/\");\n    expect(toNerfDart(\"https://npm.example.com/some-api/npm-virtual/\")).toBe(\"//npm.example.com/some-api/npm-virtual/\");\n  });","file":"npm-conf.test.js","skipped":false,"dir":"utils/npm-conf/__tests__"},{"name":"defaults cli parameter to empty object","suites":["@lerna/npm-conf"],"updatePoint":{"line":33,"column":44,"index":956},"line":33,"code":"  it(\"defaults cli parameter to empty object\", () => {\n    const conf = npmConf();\n    expect(conf.sources.cli.data).toEqual({});\n  });","file":"npm-conf.test.js","skipped":false,"dir":"utils/npm-conf/__tests__"},{"name":"overwrites default with cli key","suites":["@lerna/npm-conf"],"updatePoint":{"line":37,"column":37,"index":1085},"line":37,"code":"  it(\"overwrites default with cli key\", () => {\n    const conf = npmConf({\n      registry: \"https://npm.example.com\"\n    });\n    expect(conf.get(\"registry\")).toBe(\"https://npm.example.com\");\n  });","file":"npm-conf.test.js","skipped":false,"dir":"utils/npm-conf/__tests__"},{"name":"does not overwrite default with undefined cli key","suites":["@lerna/npm-conf"],"updatePoint":{"line":43,"column":55,"index":1300},"line":43,"code":"  it(\"does not overwrite default with undefined cli key\", () => {\n    const conf = npmConf({\n      registry: undefined\n    });\n    expect(conf.get(\"registry\")).toBe(\"https://registry.npmjs.org/\");\n  });","file":"npm-conf.test.js","skipped":false,"dir":"utils/npm-conf/__tests__"},{"name":"adds a dist-tag for a given package@version","suites":["npmDistTag.add()"],"updatePoint":{"line":25,"column":49,"index":618},"line":25,"code":"  it(\"adds a dist-tag for a given package@version\", async () => {\n    const opts = { ...baseOptions\n    };\n    const tags = await npmDistTag.add(\"@scope/some-pkg@1.0.1\", \"added-tag\", opts);\n    expect(tags).toEqual({\n      \"added-tag\": \"1.0.1\"\n    });\n    expect(fetch).toHaveBeenLastCalledWith(\"/-/package/@scope%2fsome-pkg/dist-tags/added-tag\", expect.objectContaining({\n      method: \"PUT\",\n      body: JSON.stringify(\"1.0.1\"),\n      headers: {\n        \"content-type\": \"application/json\"\n      }\n    }));\n  });","file":"npm-dist-tag.test.js","skipped":false,"dir":"utils/npm-dist-tag/__tests__"},{"name":"does not attempt to add duplicate of existing tag","suites":["npmDistTag.add()"],"updatePoint":{"line":40,"column":55,"index":1138},"line":40,"code":"  it(\"does not attempt to add duplicate of existing tag\", async () => {\n    fetch.json.mockImplementationOnce(() => Promise.resolve({\n      latest: \"1.0.0\",\n      \"dupe-tag\": \"1.0.1\"\n    }));\n    const opts = { ...baseOptions\n    };\n    const tags = await npmDistTag.add(\"@scope/some-pkg@1.0.1\", \"dupe-tag\", opts);\n    expect(tags).toEqual({\n      latest: \"1.0.0\",\n      \"dupe-tag\": \"1.0.1\"\n    });\n    expect(fetch).not.toHaveBeenCalled();\n    expect(stubLog.warn).toHaveBeenLastCalledWith(\"dist-tag\", \"@scope/some-pkg@dupe-tag already set to 1.0.1\");\n  });","file":"npm-dist-tag.test.js","skipped":false,"dir":"utils/npm-dist-tag/__tests__"},{"name":"defaults tag argument to opts.defaultTag","suites":["npmDistTag.add()"],"updatePoint":{"line":55,"column":46,"index":1688},"line":55,"code":"  it(\"defaults tag argument to opts.defaultTag\", async () => {\n    fetch.json.mockImplementationOnce(() => Promise.resolve({\n      latest: \"1.0.0\"\n    }));\n    const opts = { ...baseOptions\n    };\n    const tags = await npmDistTag.add(\"@scope/some-pkg@1.0.1\", undefined, opts);\n    expect(tags).toEqual({\n      latest: \"1.0.1\"\n    });\n  });","file":"npm-dist-tag.test.js","skipped":false,"dir":"utils/npm-dist-tag/__tests__"},{"name":"supports npm v6 opts.tag fallback","suites":["npmDistTag.add()"],"updatePoint":{"line":66,"column":39,"index":2022},"line":66,"code":"  it(\"supports npm v6 opts.tag fallback\", async () => {\n    fetch.json.mockImplementationOnce(() => Promise.resolve({\n      legacy: \"1.0.0\"\n    }));\n    const opts = {\n      log: stubLog,\n      tag: \"legacy\"\n    };\n    const tags = await npmDistTag.add(\"@scope/some-pkg@1.0.1\", undefined, opts);\n    expect(tags).toEqual({\n      legacy: \"1.0.1\"\n    });\n  });","file":"npm-dist-tag.test.js","skipped":false,"dir":"utils/npm-dist-tag/__tests__"},{"name":"removes an existing dist-tag for a given package","suites":["npmDistTag.remove()"],"updatePoint":{"line":81,"column":54,"index":2440},"line":81,"code":"  it(\"removes an existing dist-tag for a given package\", async () => {\n    fetch.json.mockImplementationOnce(() => Promise.resolve({\n      latest: \"1.0.0\",\n      \"removed-tag\": \"1.0.1\"\n    }));\n    const opts = { ...baseOptions\n    };\n    const tags = await npmDistTag.remove(\"@scope/some-pkg@1.0.1\", \"removed-tag\", opts);\n    expect(tags).not.toHaveProperty(\"removed-tag\");\n    expect(fetch).toHaveBeenLastCalledWith(\"/-/package/@scope%2fsome-pkg/dist-tags/removed-tag\", expect.objectContaining({\n      method: \"DELETE\"\n    }));\n  });","file":"npm-dist-tag.test.js","skipped":false,"dir":"utils/npm-dist-tag/__tests__"},{"name":"does not attempt removal of nonexistent tag","suites":["npmDistTag.remove()"],"updatePoint":{"line":94,"column":49,"index":2971},"line":94,"code":"  it(\"does not attempt removal of nonexistent tag\", async () => {\n    const opts = { ...baseOptions\n    };\n    const tags = await npmDistTag.remove(\"@scope/some-pkg@1.0.1\", \"missing-tag\", opts);\n    expect(tags).toEqual({});\n    expect(fetch).not.toHaveBeenCalled();\n    expect(stubLog.info).toHaveBeenLastCalledWith(\"dist-tag\", '\"missing-tag\" is not a dist-tag on @scope/some-pkg');\n  });","file":"npm-dist-tag.test.js","skipped":false,"dir":"utils/npm-dist-tag/__tests__"},{"name":"returns dictionary of dist-tags","suites":["npmDistTag.list()"],"updatePoint":{"line":104,"column":37,"index":3391},"line":104,"code":"  it(\"returns dictionary of dist-tags\", async () => {\n    fetch.json.mockImplementationOnce(() => Promise.resolve({\n      latest: \"1.0.0\",\n      \"other-tag\": \"1.0.1\",\n      _etag: \"should-be-removed\"\n    }));\n    const opts = { ...baseOptions\n    };\n    const tags = await npmDistTag.list(\"@scope/some-pkg\", opts);\n    expect(tags).toEqual({\n      latest: \"1.0.0\",\n      \"other-tag\": \"1.0.1\"\n    });\n    expect(fetch.json).toHaveBeenLastCalledWith(\"/-/package/@scope%2fsome-pkg/dist-tags\", expect.objectContaining({\n      preferOnline: true,\n      spec: expect.objectContaining({\n        name: \"@scope/some-pkg\"\n      })\n    }));\n  });","file":"npm-dist-tag.test.js","skipped":false,"dir":"utils/npm-dist-tag/__tests__"},{"name":"handles disastrous results gracefully","suites":["npmDistTag.list()"],"updatePoint":{"line":124,"column":43,"index":4033},"line":124,"code":"  it(\"handles disastrous results gracefully\", async () => {\n    fetch.json.mockImplementationOnce(() => // i mean, wut\n    Promise.resolve(null));\n    const opts = { ...baseOptions\n    };\n    const tags = await npmDistTag.list(\"@scope/some-pkg\", opts);\n    expect(tags).toEqual({});\n  });","file":"npm-dist-tag.test.js","skipped":false,"dir":"utils/npm-dist-tag/__tests__"},{"name":"returns a promise for a non-mangling install","suites":["npm-install","npmInstall()"],"updatePoint":{"line":33,"column":52,"index":688},"line":33,"code":"    it(\"returns a promise for a non-mangling install\", async () => {\n      const pkg = new Package({\n        name: \"test-npm-install\"\n      }, path.normalize(\"/test/npm-install-promise\"), path.normalize(\"/test\"));\n      await npmInstall(pkg, {\n        npmClient: \"yarn\",\n        npmClientArgs: [\"--no-optional\"],\n        mutex: \"file:foo\"\n      });\n      expect(childProcess.exec).toHaveBeenLastCalledWith(\"yarn\", [\"install\", \"--mutex\", \"file:foo\", \"--non-interactive\", \"--no-optional\"], {\n        cwd: pkg.location,\n        env: {\n          LERNA_PACKAGE_NAME: \"test-npm-install\",\n          LERNA_EXEC_PATH: pkg.location,\n          LERNA_ROOT_PATH: pkg.rootPath\n        },\n        pkg,\n        stdio: \"pipe\"\n      });\n    });","file":"npm-install.test.js","skipped":false,"dir":"utils/npm-install/__tests__"},{"name":"allows override of opts.stdio","suites":["npm-install","npmInstall()"],"updatePoint":{"line":53,"column":37,"index":1400},"line":53,"code":"    it(\"allows override of opts.stdio\", async () => {\n      const pkg = new Package({\n        name: \"test-npm-install\"\n      }, path.normalize(\"/test/npm-install-stdio\"));\n      await npmInstall(pkg, {\n        stdio: \"inherit\"\n      });\n      expect(childProcess.exec).toHaveBeenLastCalledWith(\"npm\", [\"install\"], expect.objectContaining({\n        stdio: \"inherit\"\n      }));\n    });","file":"npm-install.test.js","skipped":false,"dir":"utils/npm-install/__tests__"},{"name":"does not swallow errors","suites":["npm-install","npmInstall()"],"updatePoint":{"line":64,"column":31,"index":1778},"line":64,"code":"    it(\"does not swallow errors\", async () => {\n      childProcess.exec.mockRejectedValueOnce(new Error(\"whoopsy-doodle\"));\n      const pkg = new Package({\n        name: \"test-npm-install-error\"\n      }, path.normalize(\"/test/npm-install-error\"));\n      await expect(npmInstall(pkg, {\n        npmClient: \"yarn\"\n      })).rejects.toThrow(\"whoopsy-doodle\");\n      expect(childProcess.exec).toHaveBeenLastCalledWith(\"yarn\", [\"install\", \"--non-interactive\"], {\n        cwd: pkg.location,\n        env: expect.any(Object),\n        pkg,\n        stdio: \"pipe\"\n      });\n    });","file":"npm-install.test.js","skipped":false,"dir":"utils/npm-install/__tests__"},{"name":"installs dependencies in targeted directory","suites":["npm-install","npmInstallDependencies()"],"updatePoint":{"line":81,"column":51,"index":2421},"line":81,"code":"    it(\"installs dependencies in targeted directory\", async () => {\n      const pkg = new Package({\n        name: \"npm-install-deps\",\n        version: \"1.0.0\",\n        scripts: {\n          test: \"i am deleted\"\n        },\n        dependencies: {\n          \"@scoped/caret\": \"^2.0.0\",\n          \"local-dependency\": \"^1.0.0\",\n          exact: \"1.0.0\"\n        },\n        devDependencies: {\n          \"@scoped/exact\": \"2.0.0\",\n          caret: \"^1.0.0\",\n          exact: \"1.0.0\",\n          // will be removed\n          \"local-dev-dependency\": \"^1.0.0\"\n        },\n        optionalDependencies: {\n          \"@scoped/others\": \"1.0.0\",\n          // will be removed\n          caret: \"^1.0.0\",\n          \"local-dependency\": \"^1.0.0\"\n        },\n        bundledDependencies: [\"local-dependency\", \"@scoped/exact\", \"others\"],\n        bundleDependencies: [\"local-dependency\", \"@scoped/exact\", \"others\"]\n      }, path.normalize(\"/test/npm-install-deps\"));\n      const backupManifest = `${pkg.manifestLocation}.lerna_backup`;\n      const dependencies = [\"@scoped/caret@^2.0.0\", \"@scoped/exact@2.0.0\", \"caret@^1.0.0\", \"exact@1.0.0\", \"@scoped/others@1.0.0\", \"others@1.0.0\"];\n      await npmInstallDependencies(pkg, dependencies, {});\n      expect(fs.copy).toHaveBeenLastCalledWith(pkg.manifestLocation, backupManifest);\n      expect(fs.renameSync).toHaveBeenLastCalledWith(backupManifest, pkg.manifestLocation);\n      expect(writePkg).toHaveBeenLastCalledWith(pkg.manifestLocation, {\n        name: \"npm-install-deps\",\n        version: \"1.0.0\",\n        dependencies: {\n          \"@scoped/caret\": \"^2.0.0\",\n          // removed local-dependency\n          exact: \"1.0.0\"\n        },\n        devDependencies: {\n          \"@scoped/exact\": \"2.0.0\",\n          caret: \"^1.0.0\" // removed local-dev-dependency\n\n        },\n        optionalDependencies: {\n          \"@scoped/others\": \"1.0.0\" // removed caret, local-dependency\n\n        },\n        bundledDependencies: [\n        /* removed local-dependency */\n        \"others\"],\n        bundleDependencies: [\n          /* removed  */\n        ]\n      });\n      expect(childProcess.exec).toHaveBeenLastCalledWith(\"npm\", [\"install\"], {\n        cwd: pkg.location,\n        env: expect.any(Object),\n        pkg,\n        stdio: \"pipe\"\n      });\n    });","file":"npm-install.test.js","skipped":false,"dir":"utils/npm-install/__tests__"},{"name":"supports custom registry","suites":["npm-install","npmInstallDependencies()"],"updatePoint":{"line":145,"column":32,"index":4664},"line":145,"code":"    it(\"supports custom registry\", async () => {\n      const pkg = new Package({\n        name: \"npm-install-deps\",\n        version: \"1.0.0\",\n        dependencies: {\n          \"@scoped/tagged\": \"next\",\n          \"local-dependency\": \"file:../local-dependency\"\n        },\n        devDependencies: {\n          tagged: \"next\",\n          \"local-dev-dependency\": \"file:../local-dev-dependency\"\n        }\n      }, path.normalize(\"/test/npm-install-deps\"));\n      const dependencies = [\"@scoped/tagged@next\", \"tagged@next\"];\n      const config = {\n        registry: \"https://custom-registry/npm-install-deps\"\n      };\n      await npmInstallDependencies(pkg, dependencies, config);\n      expect(writePkg).toHaveBeenLastCalledWith(pkg.manifestLocation, {\n        name: \"npm-install-deps\",\n        version: \"1.0.0\",\n        dependencies: {\n          \"@scoped/tagged\": \"next\"\n        },\n        devDependencies: {\n          tagged: \"next\"\n        }\n      });\n      expect(childProcess.exec).toHaveBeenLastCalledWith(\"npm\", [\"install\"], {\n        cwd: pkg.location,\n        env: expect.objectContaining({\n          npm_config_registry: config.registry\n        }),\n        pkg,\n        stdio: \"pipe\"\n      });\n    });","file":"npm-install.test.js","skipped":false,"dir":"utils/npm-install/__tests__"},{"name":"supports npm install --global-style","suites":["npm-install","npmInstallDependencies()"],"updatePoint":{"line":182,"column":43,"index":5878},"line":182,"code":"    it(\"supports npm install --global-style\", async () => {\n      const pkg = new Package({\n        name: \"npm-install-deps\",\n        version: \"1.0.0\",\n        dependencies: {\n          \"local-dependency\": \"^1.0.0\"\n        },\n        devDependencies: {\n          caret: \"^1.0.0\",\n          \"local-dev-dependency\": \"^1.0.0\"\n        }\n      }, path.normalize(\"/test/npm-install-deps\"));\n      const dependencies = [\"@scoped/foo@latest\", \"foo@latest\", \"caret@^1.0.0\"];\n      await npmInstallDependencies(pkg, dependencies, {\n        npmGlobalStyle: true\n      });\n      expect(writePkg).toHaveBeenLastCalledWith(pkg.manifestLocation, {\n        name: \"npm-install-deps\",\n        version: \"1.0.0\",\n        dependencies: {\n          \"@scoped/foo\": \"latest\",\n          foo: \"latest\"\n        },\n        devDependencies: {\n          caret: \"^1.0.0\"\n        }\n      });\n      expect(childProcess.exec).toHaveBeenLastCalledWith(\"npm\", [\"install\", \"--global-style\"], {\n        cwd: pkg.location,\n        env: expect.any(Object),\n        pkg,\n        stdio: \"pipe\"\n      });\n    });","file":"npm-install.test.js","skipped":false,"dir":"utils/npm-install/__tests__"},{"name":"supports custom npmClient","suites":["npm-install","npmInstallDependencies()"],"updatePoint":{"line":216,"column":33,"index":6938},"line":216,"code":"    it(\"supports custom npmClient\", async () => {\n      const pkg = new Package({\n        name: \"npm-install-deps\",\n        version: \"1.0.0\",\n        dependencies: {\n          \"@scoped/something\": \"^2.0.0\",\n          \"local-dependency\": \"^1.0.0\"\n        }\n      }, path.normalize(\"/test/npm-install-deps\"));\n      const dependencies = [\"@scoped/something@^2.0.0\", \"something@^1.0.0\"];\n      await npmInstallDependencies(pkg, dependencies, {\n        npmClient: \"yarn\",\n        mutex: \"network:12345\"\n      });\n      expect(writePkg).toHaveBeenLastCalledWith(pkg.manifestLocation, {\n        name: \"npm-install-deps\",\n        version: \"1.0.0\",\n        dependencies: {\n          \"@scoped/something\": \"^2.0.0\",\n          something: \"^1.0.0\"\n        }\n      });\n      expect(childProcess.exec).toHaveBeenLastCalledWith(\"yarn\", [\"install\", \"--mutex\", \"network:12345\", \"--non-interactive\"], {\n        cwd: pkg.location,\n        env: expect.any(Object),\n        pkg,\n        stdio: \"pipe\"\n      });\n    });","file":"npm-install.test.js","skipped":false,"dir":"utils/npm-install/__tests__"},{"name":"supports custom npmClientArgs","suites":["npm-install","npmInstallDependencies()"],"updatePoint":{"line":245,"column":37,"index":7940},"line":245,"code":"    it(\"supports custom npmClientArgs\", async () => {\n      const pkg = new Package({\n        name: \"npm-install-deps\",\n        version: \"1.0.0\",\n        optionalDependencies: {\n          \"@scoped/something\": \"github:foo/bar\",\n          \"local-optional-dependency\": \"^1.0.0\"\n        },\n        devDependencies: {\n          something: \"github:foo/foo\",\n          \"local-dev-dependency\": \"^1.0.0\"\n        }\n      }, path.normalize(\"/test/npm-install-deps\"));\n      const dependencies = [\"@scoped/something@github:foo/bar\", \"something@github:foo/foo\"];\n      await npmInstallDependencies(pkg, dependencies, {\n        npmClientArgs: [\"--production\", \"--no-optional\"]\n      });\n      expect(writePkg).toHaveBeenLastCalledWith(pkg.manifestLocation, {\n        name: \"npm-install-deps\",\n        version: \"1.0.0\",\n        optionalDependencies: {\n          \"@scoped/something\": \"github:foo/bar\"\n        },\n        devDependencies: {\n          something: \"github:foo/foo\"\n        }\n      });\n      expect(childProcess.exec).toHaveBeenLastCalledWith(\"npm\", [\"install\", \"--production\", \"--no-optional\"], {\n        cwd: pkg.location,\n        env: expect.any(Object),\n        pkg,\n        stdio: \"pipe\"\n      });\n    });","file":"npm-install.test.js","skipped":false,"dir":"utils/npm-install/__tests__"},{"name":"overrides custom npmClient when using global style","suites":["npm-install","npmInstallDependencies()"],"updatePoint":{"line":279,"column":58,"index":9167},"line":279,"code":"    it(\"overrides custom npmClient when using global style\", async () => {\n      const pkg = new Package({\n        name: \"npm-install-deps\",\n        version: \"1.0.0\",\n        dependencies: {\n          \"@scoped/something\": \"github:foo/bar\",\n          \"local-dependency\": \"^1.0.0\"\n        },\n        devDependencies: {\n          something: \"github:foo/foo\",\n          \"local-dev-dependency\": \"^1.0.0\"\n        }\n      }, path.normalize(\"/test/npm-install-deps\"));\n      const dependencies = [\"@scoped/something@github:foo/bar\", \"something@github:foo/foo\"];\n      await npmInstallDependencies(pkg, dependencies, {\n        npmClient: \"yarn\",\n        npmGlobalStyle: true,\n        mutex: \"network:12345\"\n      });\n      expect(writePkg).toHaveBeenLastCalledWith(pkg.manifestLocation, {\n        name: \"npm-install-deps\",\n        version: \"1.0.0\",\n        dependencies: {\n          \"@scoped/something\": \"github:foo/bar\"\n        },\n        devDependencies: {\n          something: \"github:foo/foo\"\n        }\n      });\n      expect(childProcess.exec).toHaveBeenLastCalledWith(\"npm\", [\"install\", \"--global-style\"], {\n        cwd: pkg.location,\n        env: expect.any(Object),\n        pkg,\n        stdio: \"pipe\"\n      });\n    });","file":"npm-install.test.js","skipped":false,"dir":"utils/npm-install/__tests__"},{"name":"calls npm ci instead of npm install when subCommand is ci","suites":["npm-install","npmInstallDependencies()"],"updatePoint":{"line":315,"column":65,"index":10392},"line":315,"code":"    it(\"calls npm ci instead of npm install when subCommand is ci\", async () => {\n      const pkg = new Package({\n        name: \"npm-install-deps\",\n        version: \"1.0.0\",\n        dependencies: {\n          \"@scoped/something\": \"github:foo/bar\",\n          \"local-dependency\": \"^1.0.0\"\n        },\n        devDependencies: {\n          something: \"github:foo/foo\",\n          \"local-dev-dependency\": \"^1.0.0\"\n        }\n      }, path.normalize(\"/test/npm-install-deps\"));\n      const dependencies = [\"@scoped/something@github:foo/bar\", \"something@github:foo/foo\"];\n      await npmInstallDependencies(pkg, dependencies, {\n        subCommand: \"ci\"\n      });\n      expect(writePkg).toHaveBeenLastCalledWith(pkg.manifestLocation, {\n        name: \"npm-install-deps\",\n        version: \"1.0.0\",\n        dependencies: {\n          \"@scoped/something\": \"github:foo/bar\"\n        },\n        devDependencies: {\n          something: \"github:foo/foo\"\n        }\n      });\n      expect(childProcess.exec).toHaveBeenLastCalledWith(\"npm\", [\"ci\"], {\n        cwd: pkg.location,\n        env: expect.any(Object),\n        pkg,\n        stdio: \"pipe\"\n      });\n    });","file":"npm-install.test.js","skipped":false,"dir":"utils/npm-install/__tests__"},{"name":"finishes early when no dependencies exist","suites":["npm-install","npmInstallDependencies()"],"updatePoint":{"line":349,"column":49,"index":11515},"line":349,"code":"    it(\"finishes early when no dependencies exist\", async () => {\n      const pkg = new Package({\n        name: \"npm-install-deps\",\n        version: \"1.0.0\"\n      }, path.normalize(\"/test/npm-install-deps\"));\n      const dependencies = [];\n      await npmInstallDependencies(pkg, dependencies, {});\n      expect(childProcess.exec).not.toHaveBeenCalled();\n    });","file":"npm-install.test.js","skipped":false,"dir":"utils/npm-install/__tests__"},{"name":"defaults temporary dependency versions to '*'","suites":["npm-install","npmInstallDependencies()"],"updatePoint":{"line":358,"column":53,"index":11882},"line":358,"code":"    it(\"defaults temporary dependency versions to '*'\", async () => {\n      const pkg = new Package({\n        name: \"npm-install-deps\",\n        version: \"1.0.0\",\n        dependencies: {\n          \"local-dependency\": \"^1.0.0\"\n        },\n        devDependencies: {\n          \"local-dev-dependency\": \"^1.0.0\"\n        }\n      }, path.normalize(\"/test/npm-install-deps\"));\n      const dependencies = [\"noversion\", \"@scoped/noversion\" // sorted by write-pkg\n      ];\n      await npmInstallDependencies(pkg, dependencies, {});\n      expect(writePkg).toHaveBeenLastCalledWith(pkg.manifestLocation, {\n        name: \"npm-install-deps\",\n        version: \"1.0.0\",\n        dependencies: {\n          \"@scoped/noversion\": \"*\",\n          noversion: \"*\"\n        },\n        devDependencies: {}\n      });\n    });","file":"npm-install.test.js","skipped":false,"dir":"utils/npm-install/__tests__"},{"name":"rejects with copy error","suites":["npm-install","npmInstallDependencies()"],"updatePoint":{"line":382,"column":31,"index":12654},"line":382,"code":"    it(\"rejects with copy error\", async () => {\n      const pkg = new Package({\n        name: \"npm-install-deps-copy-error\",\n        version: \"1.0.0\"\n      }, path.normalize(\"/test/npm-install-deps/copyError\"));\n      const dependencies = [\"I'm just here so we don't exit early\"];\n      fs.copy.mockRejectedValueOnce(new Error(\"Unable to copy file\"));\n      await expect(npmInstallDependencies(pkg, dependencies, {})).rejects.toThrow(\"Unable to copy file\");\n    });","file":"npm-install.test.js","skipped":false,"dir":"utils/npm-install/__tests__"},{"name":"cleans up synchronously after writeFile error","suites":["npm-install","npmInstallDependencies()"],"updatePoint":{"line":391,"column":53,"index":13142},"line":391,"code":"    it(\"cleans up synchronously after writeFile error\", async () => {\n      const pkg = new Package({\n        name: \"npm-install-deps-write-error\",\n        version: \"1.0.0\"\n      }, path.normalize(\"/test/npm-install-deps/writeError\"));\n      const backupManifest = `${pkg.manifestLocation}.lerna_backup`;\n      const dependencies = [\"just-here-so-we-dont-exit-early\"];\n      writePkg.mockRejectedValueOnce(new Error(\"Unable to write file\"));\n      await expect(npmInstallDependencies(pkg, dependencies, {})).rejects.toThrow(\"Unable to write file\");\n      expect(fs.renameSync).toHaveBeenLastCalledWith(backupManifest, pkg.manifestLocation);\n    });","file":"npm-install.test.js","skipped":false,"dir":"utils/npm-install/__tests__"},{"name":"cleans up synchronously after client install error","suites":["npm-install","npmInstallDependencies()"],"updatePoint":{"line":402,"column":58,"index":13796},"line":402,"code":"    it(\"cleans up synchronously after client install error\", async () => {\n      const pkg = new Package({\n        name: \"npm-install-deps-client-error\",\n        version: \"1.0.0\"\n      }, path.normalize(\"/test/npm-install-deps/clientError\"));\n      const backupManifest = `${pkg.manifestLocation}.lerna_backup`;\n      const dependencies = [\"just-here-so-we-dont-exit-early\"];\n      childProcess.exec.mockRejectedValueOnce(new Error(\"Unable to install\"));\n      await expect(npmInstallDependencies(pkg, dependencies, {})).rejects.toThrow(\"Unable to install\");\n      expect(fs.renameSync).toHaveBeenLastCalledWith(backupManifest, pkg.manifestLocation);\n    });","file":"npm-install.test.js","skipped":false,"dir":"utils/npm-install/__tests__"},{"name":"calls external libraries with correct arguments","suites":["npm-publish"],"updatePoint":{"line":53,"column":53,"index":1380},"line":53,"code":"  it(\"calls external libraries with correct arguments\", async () => {\n    const opts = {\n      tag: \"published-tag\"\n    };\n    await npmPublish(pkg, tarFilePath, opts);\n    expect(fs.readFile).toHaveBeenCalledWith(tarFilePath);\n    expect(readJSON).toHaveBeenCalledWith(pkg.manifestLocation, expect.any(Function));\n    expect(publish).toHaveBeenCalledWith(mockManifest, mockTarData, expect.objectContaining({\n      defaultTag: \"published-tag\",\n      projectScope: \"@scope\"\n    }));\n  });","file":"npm-publish.test.js","skipped":false,"dir":"utils/npm-publish/__tests__"},{"name":"defaults opts.tag to 'latest'","suites":["npm-publish"],"updatePoint":{"line":65,"column":35,"index":1850},"line":65,"code":"  it(\"defaults opts.tag to 'latest'\", async () => {\n    await npmPublish(pkg, tarFilePath);\n    expect(publish).toHaveBeenCalledWith(mockManifest, mockTarData, expect.objectContaining({\n      defaultTag: \"latest\"\n    }));\n  });","file":"npm-publish.test.js","skipped":false,"dir":"utils/npm-publish/__tests__"},{"name":"overrides pkg.publishConfig.tag when opts.tag is explicitly configured","suites":["npm-publish"],"updatePoint":{"line":71,"column":76,"index":2119},"line":71,"code":"  it(\"overrides pkg.publishConfig.tag when opts.tag is explicitly configured\", async () => {\n    readJSON.mockImplementationOnce((file, cb) => cb(null, {\n      publishConfig: {\n        tag: \"beta\"\n      }\n    }));\n    const opts = {\n      tag: \"temp-tag\"\n    };\n    await npmPublish(pkg, tarFilePath, opts);\n    expect(publish).toHaveBeenCalledWith(expect.objectContaining({\n      publishConfig: {\n        tag: \"temp-tag\"\n      }\n    }), mockTarData, expect.objectContaining({\n      defaultTag: \"temp-tag\"\n    }));\n  });","file":"npm-publish.test.js","skipped":false,"dir":"utils/npm-publish/__tests__"},{"name":"respects pkg.publishConfig.tag when opts.defaultTag matches default","suites":["npm-publish"],"updatePoint":{"line":89,"column":73,"index":2637},"line":89,"code":"  it(\"respects pkg.publishConfig.tag when opts.defaultTag matches default\", async () => {\n    readJSON.mockImplementationOnce((file, cb) => cb(null, {\n      publishConfig: {\n        tag: \"beta\"\n      }\n    }));\n    await npmPublish(pkg, tarFilePath);\n    expect(publish).toHaveBeenCalledWith(expect.objectContaining({\n      publishConfig: {\n        tag: \"beta\"\n      }\n    }), mockTarData, expect.objectContaining({\n      defaultTag: \"beta\"\n    }));\n  });","file":"npm-publish.test.js","skipped":false,"dir":"utils/npm-publish/__tests__"},{"name":"uses pkg.contents manifest when pkg.publishConfig.directory is defined","suites":["npm-publish"],"updatePoint":{"line":104,"column":76,"index":3096},"line":104,"code":"  it(\"uses pkg.contents manifest when pkg.publishConfig.directory is defined\", async () => {\n    const fancyPkg = new Package({\n      name: \"fancy\",\n      version: \"1.10.100\",\n      publishConfig: {\n        directory: \"dist\"\n      }\n    }, path.join(rootPath, \"npmPublish/fancy\"), rootPath);\n    readJSON.mockImplementationOnce((file, cb) => cb(null, {\n      name: \"fancy-fancy\",\n      version: \"1.10.100\"\n    }));\n    await npmPublish(fancyPkg, tarFilePath);\n    expect(readJSON).toHaveBeenCalledWith(path.join(fancyPkg.location, \"dist/package.json\"), expect.any(Function));\n    expect(publish).toHaveBeenCalledWith(expect.objectContaining({\n      name: \"fancy-fancy\"\n    }), mockTarData, expect.objectContaining({\n      defaultTag: \"latest\"\n    }));\n  });","file":"npm-publish.test.js","skipped":false,"dir":"utils/npm-publish/__tests__"},{"name":"merges pkg.publishConfig.registry into options","suites":["npm-publish"],"updatePoint":{"line":124,"column":52,"index":3830},"line":124,"code":"  it(\"merges pkg.publishConfig.registry into options\", async () => {\n    readJSON.mockImplementationOnce((file, cb) => cb(null, {\n      publishConfig: {\n        registry: \"http://pkg-registry.com\"\n      }\n    }));\n    const opts = {\n      registry: \"https://global-registry.com\"\n    };\n    await npmPublish(pkg, tarFilePath, opts);\n    expect(publish).toHaveBeenCalledWith(expect.objectContaining({\n      publishConfig: {\n        registry: \"http://pkg-registry.com\"\n      }\n    }), mockTarData, expect.objectContaining({\n      registry: \"http://pkg-registry.com\"\n    }));\n  });","file":"npm-publish.test.js","skipped":false,"dir":"utils/npm-publish/__tests__"},{"name":"respects opts.dryRun","suites":["npm-publish"],"updatePoint":{"line":142,"column":26,"index":4382},"line":142,"code":"  it(\"respects opts.dryRun\", async () => {\n    const opts = {\n      dryRun: true\n    };\n    await npmPublish(pkg, tarFilePath, opts);\n    expect(publish).not.toHaveBeenCalled();\n    expect(runLifecycle).toHaveBeenCalledTimes(2);\n  });","file":"npm-publish.test.js","skipped":false,"dir":"utils/npm-publish/__tests__"},{"name":"aliases strict-ssl to strictSSL","suites":["npm-publish"],"line":150,"code":"  it.each([[\"true\"], [true], [\"false\"], [false]])(\"aliases strict-ssl to strictSSL\", async strictSSLValue => {\n    const opts = {\n      \"strict-ssl\": strictSSLValue\n    };\n    await npmPublish(pkg, tarFilePath, opts);\n    expect(publish).toHaveBeenCalledWith(expect.anything(), expect.anything(), expect.objectContaining({\n      strictSSL: strictSSLValue\n    }));\n  });","file":"npm-publish.test.js","skipped":false,"dir":"utils/npm-publish/__tests__"},{"name":"calls publish lifecycles","suites":["npm-publish"],"updatePoint":{"line":159,"column":30,"index":4991},"line":159,"code":"  it(\"calls publish lifecycles\", async () => {\n    const options = expect.objectContaining({\n      projectScope: \"@scope\"\n    });\n    await npmPublish(pkg, tarFilePath);\n    expect(runLifecycle).toHaveBeenCalledWith(pkg, \"publish\", options);\n    expect(runLifecycle).toHaveBeenLastCalledWith(pkg, \"postpublish\", options);\n  });","file":"npm-publish.test.js","skipped":false,"dir":"utils/npm-publish/__tests__"},{"name":"catches libnpm errors","suites":["npm-publish"],"updatePoint":{"line":167,"column":27,"index":5316},"line":167,"code":"  it(\"catches libnpm errors\", async () => {\n    publish.mockImplementationOnce(() => {\n      const err = new Error(\"whoopsy\");\n      err.code = \"E401\";\n      err.body = {\n        error: \"doodle\"\n      };\n      return Promise.reject(err);\n    });\n    const log = {\n      verbose: jest.fn(),\n      silly: jest.fn(),\n      error: jest.fn()\n    };\n    const opts = {\n      log\n    };\n    await expect(npmPublish(pkg, tarFilePath, opts)).rejects.toThrow(expect.objectContaining({\n      message: \"whoopsy\",\n      name: \"ValidationError\"\n    }));\n    expect(log.error).toHaveBeenLastCalledWith(\"E401\", \"doodle\");\n    expect(process.exitCode).toBe(1);\n    publish.mockImplementationOnce(() => {\n      const err = new Error(\"lolwut\");\n      err.code = \"E404\";\n      err.errno = 9001;\n      return Promise.reject(err);\n    });\n    await expect(npmPublish(pkg, tarFilePath, opts)).rejects.toThrow(\"lolwut\");\n    expect(log.error).toHaveBeenLastCalledWith(\"E404\", \"lolwut\");\n    expect(process.exitCode).toBe(9001);\n  });","file":"npm-publish.test.js","skipped":false,"dir":"utils/npm-publish/__tests__"},{"name":"runs an npm script in a directory","suites":["npm-run-script","npmRunScript()"],"updatePoint":{"line":17,"column":41,"index":418},"line":17,"code":"    it(\"runs an npm script in a directory\", async () => {\n      const script = \"foo\";\n      const config = {\n        args: [\"--bar\", \"baz\"],\n        pkg: {\n          location: \"/test/npm/run/script\"\n        },\n        npmClient: \"npm\"\n      };\n      await npmRunScript(script, config);\n      expect(childProcess.exec).toHaveBeenLastCalledWith(\"npm\", [\"run\", script, \"--bar\", \"baz\"], {\n        cwd: config.pkg.location,\n        env: {},\n        pkg: config.pkg,\n        reject: true,\n        windowsHide: false\n      });\n    });","file":"npm-run-script.test.js","skipped":false,"dir":"utils/npm-run-script/__tests__"},{"name":"accepts opts.reject","suites":["npm-run-script","npmRunScript()"],"updatePoint":{"line":35,"column":27,"index":932},"line":35,"code":"    it(\"accepts opts.reject\", async () => {\n      const script = \"foo\";\n      const config = {\n        args: [],\n        pkg: {\n          location: \"/test/npm/run/script\"\n        },\n        npmClient: \"npm\",\n        reject: false\n      };\n      await npmRunScript(script, config);\n      expect(childProcess.exec).toHaveBeenLastCalledWith(\"npm\", [\"run\", script], {\n        cwd: config.pkg.location,\n        env: {},\n        pkg: config.pkg,\n        reject: false,\n        windowsHide: false\n      });\n    });","file":"npm-run-script.test.js","skipped":false,"dir":"utils/npm-run-script/__tests__"},{"name":"supports a different npmClient","suites":["npm-run-script","npmRunScript()"],"updatePoint":{"line":54,"column":38,"index":1451},"line":54,"code":"    it(\"supports a different npmClient\", async () => {\n      const script = \"foo\";\n      const config = {\n        args: [\"--bar\", \"baz\"],\n        pkg: {\n          location: \"/test/npm/run/script\"\n        },\n        npmClient: \"yarn\"\n      };\n      await npmRunScript(script, config);\n      expect(childProcess.exec).toHaveBeenLastCalledWith(\"yarn\", [\"run\", script, \"--bar\", \"baz\"], {\n        cwd: config.pkg.location,\n        env: {},\n        pkg: config.pkg,\n        reject: true,\n        windowsHide: false\n      });\n    });","file":"npm-run-script.test.js","skipped":false,"dir":"utils/npm-run-script/__tests__"},{"name":"runs an npm script in a package with streaming","suites":["npm-run-script","npmRunScriptStreaming()"],"updatePoint":{"line":74,"column":54,"index":2046},"line":74,"code":"    it(\"runs an npm script in a package with streaming\", async () => {\n      const script = \"foo\";\n      const config = {\n        args: [\"--bar\", \"baz\"],\n        pkg: {\n          name: \"qux\",\n          location: \"/test/npm/run/script/stream\"\n        },\n        prefix: true,\n        npmClient: \"npm\"\n      };\n      await npmRunScriptStreaming(script, config);\n      expect(childProcess.spawnStreaming).toHaveBeenLastCalledWith(\"npm\", [\"run\", script, \"--bar\", \"baz\"], {\n        cwd: config.pkg.location,\n        env: {\n          LERNA_PACKAGE_NAME: \"qux\"\n        },\n        pkg: config.pkg,\n        reject: true,\n        windowsHide: false\n      }, config.pkg.name);\n    });","file":"npm-run-script.test.js","skipped":false,"dir":"utils/npm-run-script/__tests__"},{"name":"accepts opts.reject","suites":["npm-run-script","npmRunScriptStreaming()"],"updatePoint":{"line":96,"column":27,"index":2693},"line":96,"code":"    it(\"accepts opts.reject\", async () => {\n      const script = \"foo\";\n      const config = {\n        args: [],\n        pkg: {\n          name: \"qux\",\n          location: \"/test/npm/run/script/stream\"\n        },\n        npmClient: \"npm\",\n        reject: false\n      };\n      await npmRunScriptStreaming(script, config);\n      expect(childProcess.spawnStreaming).toHaveBeenLastCalledWith(\"npm\", [\"run\", script], {\n        cwd: config.pkg.location,\n        env: {\n          LERNA_PACKAGE_NAME: \"qux\"\n        },\n        pkg: config.pkg,\n        reject: false,\n        windowsHide: false\n      }, undefined);\n    });","file":"npm-run-script.test.js","skipped":false,"dir":"utils/npm-run-script/__tests__"},{"name":"resolves tarball metadata objects on success","suites":["pack-directory"],"updatePoint":{"line":92,"column":50,"index":2369},"line":92,"code":"  it(\"resolves tarball metadata objects on success\", async () => {\n    const cwd = await initFixture(\"pack-directory\");\n    const conf = npmConf({\n      prefix: cwd\n    }).snapshot;\n    const pkgs = await getPackages(cwd); // choose first and last package since the middle two are repetitive\n\n    const [head, tail] = await Promise.all([pkgs.shift(), pkgs.pop()].map(pkg => packDirectory(pkg, pkg.location, conf)));\n    const INTEGRITY_PATTERN = /sha512-[\\S]{88}/;\n    const SHASUM_PATTERN = /[0-9a-f]{40}/;\n    expect(head).toMatchInlineSnapshot(`\n      Object {\n        \"bundled\": Array [],\n        \"entryCount\": 2,\n        \"filename\": \"scope-head-1.0.0.tgz\",\n        \"files\": Array [\n          Object {\n            \"mode\": \"MODE\",\n            \"path\": \"dist/index.js\",\n            \"size\": 37,\n          },\n          Object {\n            \"mode\": \"MODE\",\n            \"path\": \"package.json\",\n            \"size\": 159,\n          },\n        ],\n        \"id\": \"@scope/head@1.0.0\",\n        \"integrity\": \"INTEGRITY\",\n        \"name\": \"@scope/head\",\n        \"shasum\": \"SHASUM\",\n        \"size\": \"TAR_SIZE\",\n        \"tarFilePath\": \"__TMP_DIR__/scope-head-1.0.0.tgz\",\n        \"unpackedSize\": 196,\n        \"version\": \"1.0.0\",\n      }\n    `); // integrity is an instance of Integrity\n    // https://github.com/zkat/ssri/blob/a4337cd672f341deee2b52699b6720d82e4d0ddf/index.js#L83\n\n    expect(head.integrity.toString()).toMatch(INTEGRITY_PATTERN);\n    expect(head.shasum).toMatch(SHASUM_PATTERN);\n    expect(tail).toMatchInlineSnapshot(`\n      Object {\n        \"bundled\": Array [],\n        \"entryCount\": 2,\n        \"filename\": \"tail-4.0.0.tgz\",\n        \"files\": Array [\n          Object {\n            \"mode\": \"MODE\",\n            \"path\": \"index.js\",\n            \"size\": 37,\n          },\n          Object {\n            \"mode\": \"MODE\",\n            \"path\": \"package.json\",\n            \"size\": 131,\n          },\n        ],\n        \"id\": \"tail@4.0.0\",\n        \"integrity\": \"INTEGRITY\",\n        \"name\": \"tail\",\n        \"shasum\": \"SHASUM\",\n        \"size\": \"TAR_SIZE\",\n        \"tarFilePath\": \"__TMP_DIR__/tail-4.0.0.tgz\",\n        \"unpackedSize\": 168,\n        \"version\": \"4.0.0\",\n      }\n    `);\n    expect(tail.integrity.toString()).toMatch(INTEGRITY_PATTERN);\n    expect(tail.shasum).toMatch(SHASUM_PATTERN);\n    const next = pkgs.pop();\n    const pubs = await packDirectory(next, next.location, Object.assign({}, conf, {\n      ignorePrepublish: true,\n      lernaCommand: \"publish\"\n    }));\n    expect(pubs).toMatchInlineSnapshot(`\n      Object {\n        \"bundled\": Array [],\n        \"entryCount\": 2,\n        \"filename\": \"pubs-3.0.0.tgz\",\n        \"files\": Array [\n          Object {\n            \"mode\": \"MODE\",\n            \"path\": \"index.js\",\n            \"size\": 21,\n          },\n          Object {\n            \"mode\": \"MODE\",\n            \"path\": \"package.json\",\n            \"size\": 171,\n          },\n        ],\n        \"id\": \"pubs@3.0.0\",\n        \"integrity\": \"INTEGRITY\",\n        \"name\": \"pubs\",\n        \"shasum\": \"SHASUM\",\n        \"size\": \"TAR_SIZE\",\n        \"tarFilePath\": \"__TMP_DIR__/pubs-3.0.0.tgz\",\n        \"unpackedSize\": 192,\n        \"version\": \"3.0.0\",\n      }\n    `);\n    const last = pkgs.pop();\n    const subs = await packDirectory(last, // a real package doesn't _actually_ need this argument\n    undefined, conf);\n    expect(subs).toMatchInlineSnapshot(`\n      Object {\n        \"bundled\": Array [],\n        \"entryCount\": 2,\n        \"filename\": \"subs-2.0.0.tgz\",\n        \"files\": Array [\n          Object {\n            \"mode\": \"MODE\",\n            \"path\": \"prepacked.js\",\n            \"size\": 21,\n          },\n          Object {\n            \"mode\": \"MODE\",\n            \"path\": \"package.json\",\n            \"size\": 115,\n          },\n        ],\n        \"id\": \"subs@2.0.0\",\n        \"integrity\": \"INTEGRITY\",\n        \"name\": \"subs\",\n        \"shasum\": \"SHASUM\",\n        \"size\": \"TAR_SIZE\",\n        \"tarFilePath\": \"__TMP_DIR__/subs-2.0.0.tgz\",\n        \"unpackedSize\": 136,\n        \"version\": \"2.0.0\",\n      }\n    `);\n  });","file":"pack-directory.test.js","skipped":false,"dir":"utils/pack-directory/__tests__"},{"name":"prereleaseIdFromVersion() returns prerelease identifier","suites":[],"updatePoint":{"line":7,"column":61,"index":162},"line":7,"code":"test(\"prereleaseIdFromVersion() returns prerelease identifier\", () => {\n  expect(prereleaseIdFromVersion(\"1.0.0-alpha.0\")).toBe(\"alpha\");\n});","file":"prerelease-id-from-version.test.js","skipped":false,"dir":"utils/prerelease-id-from-version/__tests__"},{"name":"prereleaseIdFromVersion() returns undefined for non-prerelease versions","suites":[],"updatePoint":{"line":10,"column":77,"index":320},"line":10,"code":"test(\"prereleaseIdFromVersion() returns undefined for non-prerelease versions\", () => {\n  expect(prereleaseIdFromVersion(\"1.0.0\")).toBe(undefined);\n});","file":"prerelease-id-from-version.test.js","skipped":false,"dir":"utils/prerelease-id-from-version/__tests__"},{"name":"prereleaseIdFromVersion() returns undefined for invalid version argument","suites":[],"updatePoint":{"line":13,"column":78,"index":473},"line":13,"code":"test(\"prereleaseIdFromVersion() returns undefined for invalid version argument\", () => {\n  expect(prereleaseIdFromVersion()).toBe(undefined);\n  expect(prereleaseIdFromVersion({})).toBe(undefined);\n  expect(prereleaseIdFromVersion(\"foo\")).toBe(undefined);\n});","file":"prerelease-id-from-version.test.js","skipped":false,"dir":"utils/prerelease-id-from-version/__tests__"},{"name":"returns false when filePath is not a symlink","suites":["resolve-symlink"],"updatePoint":{"line":20,"column":52,"index":425},"line":20,"code":"    it(\"returns false when filePath is not a symlink\", () => {\n      const filePath = path.resolve(\"./not/a/symlink\");\n      fs.lstatSync.mockReturnValueOnce({\n        isSymbolicLink: () => false\n      });\n      expect(resolveSymlink(filePath)).toBe(false);\n    });","file":"resolve-symlink.test.js","skipped":false,"dir":"utils/resolve-symlink/__tests__"},{"name":"returns resolved path of an existing symlink","suites":["resolve-symlink"],"updatePoint":{"line":27,"column":52,"index":691},"line":27,"code":"    it(\"returns resolved path of an existing symlink\", () => {\n      const original = path.resolve(\"./packages/package-2\");\n      const filePath = path.resolve(\"./packages/package-1/node_modules/package-2\");\n      fs.lstatSync.mockReturnValueOnce({\n        isSymbolicLink: () => true\n      });\n      fs.readlinkSync.mockReturnValueOnce(linkRelative(original, filePath));\n      expect(resolveSymlink(filePath)).toBe(original);\n    });","file":"resolve-symlink.test.js","skipped":false,"dir":"utils/resolve-symlink/__tests__"},{"name":"returns false when filePath is not a symlink (windows)","suites":["resolve-symlink"],"updatePoint":{"line":37,"column":62,"index":1146},"line":37,"code":"    it(\"returns false when filePath is not a symlink (windows)\", () => {\n      const filePath = path.resolve(\"./not/a/symlink\");\n      fs.lstatSync.mockReturnValueOnce({\n        isSymbolicLink: () => false,\n        isFile: () => false\n      });\n      expect(resolveSymlink(filePath)).toBe(false);\n    });","file":"resolve-symlink.test.js","skipped":false,"dir":"utils/resolve-symlink/__tests__"},{"name":"returns resolved path of an existing symlink (windows)","suites":["resolve-symlink"],"updatePoint":{"line":45,"column":62,"index":1451},"line":45,"code":"    it(\"returns resolved path of an existing symlink (windows)\", () => {\n      const original = path.resolve(\"./packages/package-2\");\n      const filePath = path.resolve(\"./packages/package-1/node_modules/package-2\");\n      fs.lstatSync.mockReturnValueOnce({\n        isSymbolicLink: () => true,\n        isFile: () => false\n      });\n      fs.readlinkSync.mockReturnValueOnce(linkRelative(original, filePath));\n      expect(resolveSymlink(filePath)).toBe(original);\n    });","file":"resolve-symlink.test.js","skipped":false,"dir":"utils/resolve-symlink/__tests__"},{"name":"returns false when filePath is not a shimmed executable","suites":["resolve-symlink"],"updatePoint":{"line":55,"column":63,"index":1925},"line":55,"code":"    it(\"returns false when filePath is not a shimmed executable\", () => {\n      const filePath = path.resolve(\"./packages/package-1/node_modules/.bin/package-2\");\n      fs.lstatSync.mockReturnValueOnce({\n        isSymbolicLink: () => false,\n        isFile: () => true\n      });\n      readCmdShim.sync.mockImplementationOnce(() => {\n        throw new Error(\"ENOTASHIM\");\n      });\n      expect(resolveSymlink(filePath)).toBe(false);\n    });","file":"resolve-symlink.test.js","skipped":false,"dir":"utils/resolve-symlink/__tests__"},{"name":"returns resolved path of a shimmed executable","suites":["resolve-symlink"],"updatePoint":{"line":66,"column":53,"index":2355},"line":66,"code":"    it(\"returns resolved path of a shimmed executable\", () => {\n      const original = path.resolve(\"./packages/package-2/cli.js\");\n      const filePath = path.resolve(\"./packages/package-1/node_modules/.bin/package-2.cmd\");\n      fs.lstatSync.mockReturnValueOnce({\n        isSymbolicLink: () => false,\n        isFile: () => true\n      });\n      readCmdShim.sync.mockReturnValueOnce(linkRelative(original, filePath));\n      expect(resolveSymlink(filePath)).toBe(original);\n    });","file":"resolve-symlink.test.js","skipped":false,"dir":"utils/resolve-symlink/__tests__"},{"name":"calls rimraf CLI with arguments","suites":["rimrafDir()"],"updatePoint":{"line":19,"column":37,"index":356},"line":19,"code":"  it(\"calls rimraf CLI with arguments\", async () => {\n    const dirPath = \"rimraf/test\";\n    pathExists.mockResolvedValueOnce(true);\n    childProcess.spawn.mockResolvedValueOnce();\n    const removedPath = await rimrafDir(dirPath);\n    expect(removedPath).toBe(dirPath);\n    expect(childProcess.spawn).toHaveBeenLastCalledWith(process.execPath, [require.resolve(\"rimraf/bin\"), \"--no-glob\", path.normalize(`${dirPath}/`)]);\n  });","file":"rimraf-dir.test.js","skipped":false,"dir":"utils/rimraf-dir/__tests__"},{"name":"does not attempt to delete a non-existent directory","suites":["rimrafDir()"],"updatePoint":{"line":27,"column":57,"index":804},"line":27,"code":"  it(\"does not attempt to delete a non-existent directory\", async () => {\n    pathExists.mockResolvedValueOnce(false);\n    const removedPath = await rimrafDir(\"rimraf/non-existent\");\n    expect(removedPath).toBe(undefined);\n    expect(childProcess.spawn).not.toHaveBeenCalled();\n  });","file":"rimraf-dir.test.js","skipped":false,"dir":"utils/rimraf-dir/__tests__"},{"name":"skips packages without scripts","suites":["runLifecycle()"],"updatePoint":{"line":27,"column":36,"index":546},"line":27,"code":"  it(\"skips packages without scripts\", async () => {\n    const pkg = {\n      name: \"no-scripts\"\n    };\n    await runLifecycle(pkg, \"foo\", new Map());\n    expect(runScript).not.toHaveBeenCalled();\n  });","file":"run-lifecycle.test.js","skipped":false,"dir":"utils/run-lifecycle/__tests__"},{"name":"skips packages without matching script","suites":["runLifecycle()"],"updatePoint":{"line":34,"column":44,"index":756},"line":34,"code":"  it(\"skips packages without matching script\", async () => {\n    const pkg = {\n      name: \"missing-script\",\n      scripts: {\n        test: \"foo\"\n      }\n    };\n    await runLifecycle(pkg, \"bar\", new Map());\n    expect(runScript).not.toHaveBeenCalled();\n  });","file":"run-lifecycle.test.js","skipped":false,"dir":"utils/run-lifecycle/__tests__"},{"name":"calls npm-lifecycle with prepared arguments","suites":["runLifecycle()"],"updatePoint":{"line":44,"column":49,"index":1021},"line":44,"code":"  it(\"calls npm-lifecycle with prepared arguments\", async () => {\n    const pkg = new Package({\n      name: \"test-name\",\n      version: \"1.0.0-test\",\n      scripts: {\n        preversion: \"test\"\n      },\n      engines: {\n        node: \">= 8.9.0\"\n      }\n    }, \"/test/location\");\n    const stage = \"preversion\";\n    const opts = npmConf({\n      \"custom-cli-flag\": true\n    });\n    await runLifecycle(pkg, stage, opts);\n    expect(runScript).toHaveBeenLastCalledWith(expect.objectContaining({\n      pkg: expect.objectContaining({\n        name: pkg.name,\n        version: pkg.version,\n        engines: {\n          node: \">= 8.9.0\"\n        },\n        _id: `${pkg.name}@${pkg.version}`\n      }),\n      event: stage,\n      path: pkg.location,\n      args: []\n    }));\n  });","file":"run-lifecycle.test.js","skipped":false,"dir":"utils/run-lifecycle/__tests__"},{"name":"passes through the value for script-shell from npm config","suites":["runLifecycle()"],"updatePoint":{"line":74,"column":63,"index":1802},"line":74,"code":"  it(\"passes through the value for script-shell from npm config\", async () => {\n    const pkg = {\n      name: \"dashed-name\",\n      version: \"1.0.0-dashed\",\n      location: \"dashed-location\",\n      scripts: {\n        \"dashed-options\": \"test\"\n      }\n    };\n    const dir = pkg.location;\n    const stage = \"dashed-options\";\n    const opts = {\n      \"script-shell\": \"fish\"\n    };\n    await runLifecycle(pkg, stage, opts);\n    expect(runScript).toHaveBeenLastCalledWith(expect.objectContaining({\n      event: stage,\n      path: dir,\n      args: [],\n      scriptShell: \"fish\"\n    }));\n  });","file":"run-lifecycle.test.js","skipped":false,"dir":"utils/run-lifecycle/__tests__"},{"name":"ignores prepublish when configured","suites":["runLifecycle()"],"updatePoint":{"line":96,"column":40,"index":2365},"line":96,"code":"  it(\"ignores prepublish when configured\", async () => {\n    const pkg = {\n      name: \"ignore-prepublish\",\n      scripts: {\n        prepublish: \"test\"\n      }\n    };\n    const stage = \"prepublish\";\n    const opts = {\n      \"ignore-prepublish\": true\n    };\n    await runLifecycle(pkg, stage, opts);\n    expect(runScript).not.toHaveBeenCalled();\n  });","file":"run-lifecycle.test.js","skipped":false,"dir":"utils/run-lifecycle/__tests__"},{"name":"ignores scripts when configured","suites":["runLifecycle()"],"updatePoint":{"line":110,"column":37,"index":2713},"line":110,"code":"  it(\"ignores scripts when configured\", async () => {\n    const pkg = {\n      name: \"ignore-scripts\",\n      scripts: {\n        ignored: \"test\"\n      }\n    };\n    const stage = \"ignored\";\n    const opts = {\n      \"ignore-scripts\": true\n    };\n    await runLifecycle(pkg, stage, opts);\n    expect(runScript).not.toHaveBeenCalled();\n  });","file":"run-lifecycle.test.js","skipped":false,"dir":"utils/run-lifecycle/__tests__"},{"name":"omits circular opts","suites":["runLifecycle()"],"updatePoint":{"line":124,"column":25,"index":3037},"line":124,"code":"  it(\"omits circular opts\", async () => {\n    const pkg = {\n      name: \"circular-name\",\n      version: \"1.0.0-circular\",\n      location: \"circular-location\",\n      scripts: {\n        prepack: \"test\"\n      }\n    };\n    const stage = \"prepack\";\n    const opts = {};\n    await runLifecycle(pkg, stage, opts);\n    const callOpts = runScript.mock.calls.pop().pop();\n    expect(callOpts).not.toHaveProperty(\"config.log\");\n    expect(callOpts).not.toHaveProperty(\"config.logstream\");\n  });","file":"run-lifecycle.test.js","skipped":false,"dir":"utils/run-lifecycle/__tests__"},{"name":"skips missing scripts block","suites":["createRunner"],"updatePoint":{"line":145,"column":33,"index":3641},"line":145,"code":"  it(\"skips missing scripts block\", async () => {\n    const pkg = {\n      name: \"missing-scripts-block\",\n      version: \"1.0.0\",\n      location: \"test\"\n    };\n    await runPackageLifecycle(pkg, \"prepare\");\n    expect(runScript).not.toHaveBeenCalled();\n  });","file":"run-lifecycle.test.js","skipped":false,"dir":"utils/run-lifecycle/__tests__"},{"name":"skips missing script","suites":["createRunner"],"updatePoint":{"line":154,"column":26,"index":3892},"line":154,"code":"  it(\"skips missing script\", async () => {\n    const pkg = {\n      name: \"missing-script\",\n      version: \"1.0.0\",\n      location: \"test\",\n      scripts: {\n        test: \"echo foo\"\n      }\n    };\n    await runPackageLifecycle(pkg, \"prepare\");\n    expect(runScript).not.toHaveBeenCalled();\n  });","file":"run-lifecycle.test.js","skipped":false,"dir":"utils/run-lifecycle/__tests__"},{"name":"logs script error and re-throws","suites":["createRunner"],"updatePoint":{"line":166,"column":37,"index":4198},"line":166,"code":"  it(\"logs script error and re-throws\", async () => {\n    runScript.mockImplementationOnce(({\n      pkg,\n      event\n    }) => {\n      const err = new Error(\"boom\");\n      err.code = 123;\n      err.script = pkg.scripts[event];\n      return Promise.reject(err);\n    });\n    const pkg = {\n      name: \"has-script-error\",\n      version: \"1.0.0\",\n      location: \"test\",\n      scripts: {\n        prepublishOnly: \"exit 123\"\n      }\n    };\n    await expect(runPackageLifecycle(pkg, \"prepublishOnly\")).rejects.toThrow(expect.objectContaining({\n      exitCode: 123,\n      script: \"exit 123\"\n    }));\n    expect(process.exitCode).toBe(123);\n    const [errorLog] = loggingOutput(\"error\");\n    expect(errorLog).toBe('\"prepublishOnly\" errored in \"has-script-error\", exiting 123');\n  });","file":"run-lifecycle.test.js","skipped":false,"dir":"utils/run-lifecycle/__tests__"},{"name":"defaults error exit code to 1","suites":["createRunner"],"updatePoint":{"line":192,"column":35,"index":4971},"line":192,"code":"  it(\"defaults error exit code to 1\", async () => {\n    runScript.mockImplementationOnce(({\n      pkg,\n      event\n    }) => {\n      const err = new Error(\"kersplode\"); // errno only gets added when a proc closes, not from error\n\n      err.script = pkg.scripts[event];\n      return Promise.reject(err);\n    });\n    const pkg = {\n      name: \"has-execution-error\",\n      version: \"1.0.0\",\n      location: \"test\",\n      scripts: {\n        prepack: \"a-thing-that-ends-poorly\"\n      }\n    };\n    await expect(runPackageLifecycle(pkg, \"prepack\")).rejects.toThrow(expect.objectContaining({\n      exitCode: 1,\n      script: \"a-thing-that-ends-poorly\"\n    }));\n    const [errorLog] = loggingOutput(\"error\");\n    expect(errorLog).toBe('\"prepack\" errored in \"has-execution-error\", exiting 1');\n  });","file":"run-lifecycle.test.js","skipped":false,"dir":"utils/run-lifecycle/__tests__"},{"name":"should work with path references","suites":["symlink-binary"],"updatePoint":{"line":19,"column":38,"index":389},"line":19,"code":"  it(\"should work with path references\", async () => {\n    const testDir = await initFixture(\"links\");\n    const srcPath = path.join(testDir, \"packages/package-2\");\n    const dstPath = path.join(testDir, \"packages/package-3\");\n    await symlinkBinary(srcPath, dstPath);\n    expect(dstPath).toHaveBinaryLinks(\"links-2\");\n  });","file":"symlink-binary.test.js","skipped":false,"dir":"utils/symlink-binary/__tests__"},{"name":"should work with Package instances","suites":["symlink-binary"],"updatePoint":{"line":26,"column":40,"index":717},"line":26,"code":"  it(\"should work with Package instances\", async () => {\n    const testDir = await initFixture(\"links\");\n    const srcPath = path.join(testDir, \"packages/package-2\");\n    const dstPath = path.join(testDir, \"packages/package-3\");\n    await symlinkBinary(Package.lazy(srcPath), Package.lazy(dstPath));\n    expect(dstPath).toHaveBinaryLinks(\"links-2\");\n  });","file":"symlink-binary.test.js","skipped":false,"dir":"utils/symlink-binary/__tests__"},{"name":"should skip missing bin config","suites":["symlink-binary"],"updatePoint":{"line":33,"column":36,"index":1069},"line":33,"code":"  it(\"should skip missing bin config\", async () => {\n    const testDir = await initFixture(\"links\");\n    const srcPath = path.join(testDir, \"packages/package-1\");\n    const dstPath = path.join(testDir, \"packages/package-2\");\n    await symlinkBinary(srcPath, dstPath);\n    expect(dstPath).not.toHaveBinaryLinks();\n  });","file":"symlink-binary.test.js","skipped":false,"dir":"utils/symlink-binary/__tests__"},{"name":"should create shims for all declared binaries","suites":["symlink-binary"],"updatePoint":{"line":40,"column":51,"index":1403},"line":40,"code":"  it(\"should create shims for all declared binaries\", async () => {\n    const testDir = await initFixture(\"links\");\n    const srcPath = path.join(testDir, \"packages/package-3\");\n    const dstPath = path.join(testDir, \"packages/package-4\");\n    await symlinkBinary(srcPath, dstPath);\n    expect(srcPath).toHaveExecutables(\"cli1.js\", \"cli2.js\");\n    expect(dstPath).toHaveBinaryLinks(\"links3cli1\", \"links3cli2\", \"links3cli3\");\n  });","file":"symlink-binary.test.js","skipped":false,"dir":"utils/symlink-binary/__tests__"},{"name":"should preserve previous bin entries","suites":["symlink-binary"],"updatePoint":{"line":48,"column":42,"index":1825},"line":48,"code":"  it(\"should preserve previous bin entries\", async () => {\n    const testDir = await initFixture(\"links\");\n    const pkg2Path = path.join(testDir, \"packages/package-2\");\n    const pkg3Path = path.join(testDir, \"packages/package-3\");\n    const destPath = path.join(testDir, \"packages/package-4\");\n    await symlinkBinary(pkg2Path, destPath);\n    await symlinkBinary(pkg3Path, destPath);\n    expect(destPath).toHaveBinaryLinks(\"links-2\", \"links3cli1\", \"links3cli2\", \"links3cli3\");\n  });","file":"symlink-binary.test.js","skipped":false,"dir":"utils/symlink-binary/__tests__"}]}