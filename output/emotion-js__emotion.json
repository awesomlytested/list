{
    "repo": "emotion-js/emotion",
    "url": "https://github.com/emotion-js/emotion",
    "branch": "main",
    "configs": [
        {
            "package": "emotion-monorepo",
            "lang": "js",
            "dir": "test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@emotion/babel-plugin-jsx-pragmatic",
            "lang": "js",
            "dir": "packages/babel-plugin-jsx-pragmatic/__tests__",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@emotion/babel-plugin",
            "lang": "js",
            "dir": "packages/babel-plugin/__tests__",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@emotion/babel-preset-css-prop",
            "lang": "js",
            "dir": "packages/babel-preset-css-prop/__tests__",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@emotion/cache",
            "lang": "js",
            "dir": "packages/cache/__tests__",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@emotion/css",
            "lang": "js",
            "dir": "packages/css/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@emotion/eslint-plugin",
            "lang": "js",
            "dir": "packages/eslint-plugin/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@emotion/hash",
            "lang": "js",
            "dir": "packages/hash/__tests__",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@emotion/jest",
            "lang": "js",
            "dir": "packages/jest/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@emotion/native",
            "lang": "js",
            "dir": "packages/native/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@emotion/primitives",
            "lang": "js",
            "dir": "packages/primitives/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@emotion/react",
            "lang": "js",
            "dir": "packages/react/__tests__",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@emotion/server",
            "lang": "js",
            "dir": "packages/server/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@emotion/sheet",
            "lang": "js",
            "dir": "packages/sheet/__tests__",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@emotion/styled",
            "lang": "js",
            "dir": "packages/styled/__tests__",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@emotion/weak-memoize",
            "lang": "js",
            "dir": "packages/weak-memoize/__tests__",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        }
    ],
    "tests": [
        {
            "name": "babel-plugin-jsx-pragmatic should throw error when invalid options",
            "suites": [],
            "updatePoint": {
                "line": 11,
                "column": 72,
                "index": 402
            },
            "line": 11,
            "code": "test('babel-plugin-jsx-pragmatic should throw error when invalid options', () => {\n  expect(() => {\n    transformSync('<></>', {\n      filename: __filename,\n      plugins: [[jsxPragmatic, {\n        export: 'jsx'\n      }]]\n    });\n  }).toThrow('@emotion/babel-plugin-jsx-pragmatic: You must specify `module` and `import`');\n});",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-plugin-jsx-pragmatic/__tests__"
        },
        {
            "name": "it works",
            "suites": [],
            "updatePoint": {
                "line": 8,
                "column": 14,
                "index": 256
            },
            "line": 8,
            "code": "test('it works', () => {\n  let css = `color:hotpink;`;\n  let hash = hashString(css);\n  safeQuerySelector('body').innerHTML = `<style data-emotion=\"css ${hash}\">.css-${hash}{${css}}</style>`;\n  let cache = createCache({\n    key: 'css'\n  });\n  expect(cache.inserted).toEqual({\n    [hash]: true\n  });\n  expect(document.documentElement).toMatchSnapshot();\n});",
            "file": "hydration.js",
            "skipped": false,
            "dir": "packages/cache/__tests__"
        },
        {
            "name": "rehydrated styles to head can be flushed",
            "suites": [],
            "updatePoint": {
                "line": 20,
                "column": 46,
                "index": 644
            },
            "line": 20,
            "code": "test('rehydrated styles to head can be flushed', () => {\n  let css = `color:hotpink;`;\n  let hash = hashString(css);\n  safeQuerySelector('head').innerHTML = `<style data-emotion=\"emo ${hash}\">.emo-${hash}{${css}}</style>`; // this moves emotion style tags at initialization time\n\n  jest.resetModules();\n\n  require('@emotion/react');\n\n  let cache = createCache({\n    key: 'emo'\n  });\n  expect(document.documentElement).toMatchSnapshot();\n  cache.sheet.flush();\n  expect(document.documentElement).toMatchSnapshot();\n});",
            "file": "hydration.js",
            "skipped": false,
            "dir": "packages/cache/__tests__"
        },
        {
            "name": "flushing rehydrated styles in the head only affect styles matching the cache key",
            "suites": [],
            "updatePoint": {
                "line": 36,
                "column": 86,
                "index": 1202
            },
            "line": 36,
            "code": "test('flushing rehydrated styles in the head only affect styles matching the cache key', () => {\n  safeQuerySelector('head').innerHTML = ['<style data-emotion=\"emo 1lrxbo5\">.emo-1lrxbo5{color:hotpink;}</style>', '<style data-emotion=\"css qweqwee\">.css-qweqwee{color:red;}</style>'].join(''); // this moves emotion style tags at initialization time\n\n  jest.resetModules();\n\n  require('@emotion/react');\n\n  const cache = createCache({\n    key: 'emo'\n  });\n  expect(document.documentElement).toMatchInlineSnapshot(`\n    <html>\n      <head>\n        <style\n          data-emotion=\"css qweqwee\"\n          data-s=\"\"\n        >\n          .css-qweqwee{color:red;}\n        </style>\n        <style\n          data-emotion=\"emo 1lrxbo5\"\n          data-s=\"\"\n        >\n          .emo-1lrxbo5{color:hotpink;}\n        </style>\n      </head>\n      <body />\n    </html>\n  `);\n  cache.sheet.flush();\n  expect(document.documentElement).toMatchInlineSnapshot(`\n    <html>\n      <head>\n        <style\n          data-emotion=\"css qweqwee\"\n          data-s=\"\"\n        >\n          .css-qweqwee{color:red;}\n        </style>\n      </head>\n      <body />\n    </html>\n  `);\n});",
            "file": "hydration.js",
            "skipped": false,
            "dir": "packages/cache/__tests__"
        },
        {
            "name": "should only hydrate style elements matching the cache key",
            "suites": [],
            "updatePoint": {
                "line": 80,
                "column": 63,
                "index": 2326
            },
            "line": 80,
            "code": "test('should only hydrate style elements matching the cache key', () => {\n  let css = `color:hotpink;`;\n  let hash = hashString(css);\n  safeQuerySelector('body').innerHTML = `<style data-emotion=\"emo ${hash}\">.emo-${hash}{${css}}</style>`;\n  const cache = createCache({\n    key: 'custom-key'\n  });\n  expect(cache.inserted).toEqual({});\n  expect(document.documentElement).toMatchInlineSnapshot(`\n    <html>\n      <head />\n      <body>\n        <style\n          data-emotion=\"emo 1lrxbo5\"\n        >\n          .emo-1lrxbo5{color:hotpink;}\n        </style>\n      </body>\n    </html>\n  `);\n  const cache2 = createCache({\n    key: 'emo'\n  });\n  expect(cache2.inserted).toEqual({\n    [hash]: true\n  });\n  expect(document.documentElement).toMatchInlineSnapshot(`\n    <html>\n      <head>\n        <style\n          data-emotion=\"emo 1lrxbo5\"\n        >\n          .emo-1lrxbo5{color:hotpink;}\n        </style>\n      </head>\n      <body />\n    </html>\n  `);\n});",
            "file": "hydration.js",
            "skipped": false,
            "dir": "packages/cache/__tests__"
        },
        {
            "name": "Existing client-side inserted styles from Emotion 10 should not be moved",
            "suites": [],
            "updatePoint": {
                "line": 119,
                "column": 78,
                "index": 3288
            },
            "line": 119,
            "code": "test('Existing client-side inserted styles from Emotion 10 should not be moved', () => {\n  // the nested nature isn't special, it's just meant to be a general \"make sure they're not moved\"\n  safeQuerySelector('body').innerHTML = `<div><style data-emotion=\"css-global\"></style><div><style data-emotion=\"css\"></style></div></div>`;\n  expect(document.documentElement).toMatchInlineSnapshot(`\n    <html>\n      <head />\n      <body>\n        <div>\n          <style\n            data-emotion=\"css-global\"\n          />\n          <div>\n            <style\n              data-emotion=\"css\"\n            />\n          </div>\n        </div>\n      </body>\n    </html>\n  `);\n  const css = `color:hotpink;`;\n  const hash = hashString(css);\n  let thing = document.createElement('div');\n  thing.innerHTML = `<style data-emotion=\"css ${hash}\">.css-${hash}{${css}}</style>`;\n  safeQuerySelector('body').appendChild(thing);\n  jest.resetModules();\n\n  require('@emotion/react');\n\n  expect(document.documentElement).toMatchInlineSnapshot(`\n    <html>\n      <head>\n        <style\n          data-emotion=\"css 1lrxbo5\"\n          data-s=\"\"\n        >\n          .css-1lrxbo5{color:hotpink;}\n        </style>\n      </head>\n      <body>\n        <div>\n          <style\n            data-emotion=\"css-global\"\n          />\n          <div>\n            <style\n              data-emotion=\"css\"\n            />\n          </div>\n        </div>\n        <div />\n      </body>\n    </html>\n  `);\n});",
            "file": "hydration.js",
            "skipped": false,
            "dir": "packages/cache/__tests__"
        },
        {
            "name": "throws correct error with invalid key",
            "suites": [],
            "updatePoint": {
                "line": 7,
                "column": 43,
                "index": 282
            },
            "line": 7,
            "code": "test('throws correct error with invalid key', () => {\n  expect(() => {\n    createCache({\n      key: '.'\n    });\n  }).toThrowErrorMatchingSnapshot();\n});",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/cache/__tests__"
        },
        {
            "name": "should accept insertionPoint option",
            "suites": [],
            "updatePoint": {
                "line": 14,
                "column": 39,
                "index": 431
            },
            "line": 14,
            "code": "it('should accept insertionPoint option', () => {\n  const head = safeQuerySelector('head');\n  head.innerHTML = `\n    <style id=\"first\"></style>\n    <style id=\"last\"></style>\n  `; // the sheet should be inserted between the first and last style nodes\n\n  const cache = createCache({\n    key: 'test-insertion-point',\n    insertionPoint: safeQuerySelector('#first')\n  });\n  render(jsx(CacheProvider, {\n    value: cache\n  }, jsx(\"div\", {\n    css: {\n      display: 'flex',\n      color: 'blue'\n    }\n  })));\n  expect(document.head).toMatchSnapshot();\n});",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/cache/__tests__"
        },
        {
            "name": "should accept container option",
            "suites": [],
            "updatePoint": {
                "line": 35,
                "column": 34,
                "index": 974
            },
            "line": 35,
            "code": "it('should accept container option', () => {\n  const body = safeQuerySelector('body');\n  body.innerHTML = `\n    <div id=\"container\" />\n  `;\n  const cache = createCache({\n    key: 'test-container',\n    container: safeQuerySelector('#container')\n  });\n  render(jsx(CacheProvider, {\n    value: cache\n  }, jsx(\"div\", {\n    css: {\n      display: 'flex',\n      color: 'blue'\n    }\n  })));\n  expect(document.body).toMatchSnapshot();\n});",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/cache/__tests__"
        },
        {
            "name": "should be converted to use the emotion target className",
            "suites": [
                "component selector"
            ],
            "updatePoint": {
                "line": 7,
                "column": 63,
                "index": 280
            },
            "line": 7,
            "code": "  test('should be converted to use the emotion target className', () => {\n    const FakeComponent = styled.div`\n      color: blue;\n    `;\n    const cls2 = css`\n      ${FakeComponent} {\n        color: red;\n      }\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls2\n    }, /*#__PURE__*/React.createElement(FakeComponent, null))).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "component-selector.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "float property",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 6,
                "column": 22,
                "index": 200
            },
            "line": 6,
            "code": "  test('float property', () => {\n    const cls1 = css`\n      float: left;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "handles more than 10 dynamic properties",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 15,
                "column": 47,
                "index": 464
            },
            "line": 15,
            "code": "  test('handles more than 10 dynamic properties', () => {\n    const cls1 = css`\n      text-decoration: ${'underline'};\n      border-right: solid blue 54px;\n      background: ${'white'};\n      color: ${'black'};\n      display: ${'block'};\n      border-radius: ${'3px'};\n      padding: ${'25px'};\n      width: ${'500px'};\n      z-index: ${100};\n      font-size: ${'18px'};\n      text-align: ${'center'};\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "falsy value in nested selector on object",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 34,
                "column": 48,
                "index": 1032
            },
            "line": 34,
            "code": "  test('falsy value in nested selector on object', () => {\n    const cls1 = css({\n      ':hover': {\n        display: null,\n        color: 'hotpink'\n      }\n    });\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "boolean as value",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 46,
                "column": 24,
                "index": 1330
            },
            "line": 46,
            "code": "  test('boolean as value', () => {\n    const cls1 = css({\n      display: 'flex',\n      color: false,\n      backgroundColor: true\n    });\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "auto px",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 57,
                "column": 15,
                "index": 1616
            },
            "line": 57,
            "code": "  test('auto px', () => {\n    const cls1 = css({\n      display: 'flex',\n      flex: 1,\n      fontSize: 10,\n      '--custom': 5\n    });\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "random interpolation with undefined values",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 69,
                "column": 50,
                "index": 1944
            },
            "line": 69,
            "code": "  test('random interpolation with undefined values', () => {\n    const cls2 = css`\n      ${undefined};\n      justify-content: center;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls2\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "random expression",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 79,
                "column": 25,
                "index": 2218
            },
            "line": 79,
            "code": "  test('random expression', () => {\n    const cls2 = css`\n      font-size: 20px;\n      @media (min-width: 420px) {\n        color: blue;\n        ${css`\n          width: 96px;\n          height: 96px;\n        `};\n        line-height: 40px;\n      }\n      background: green;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls2\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "simple composition",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 97,
                "column": 26,
                "index": 2654
            },
            "line": 97,
            "code": "  test('simple composition', () => {\n    const cls1 = css`\n      display: flex;\n      &:hover {\n        color: hotpink;\n      }\n    `;\n    const cls2 = css`\n      ${cls1};\n      justify-content: center;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls2\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "handles objects",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 113,
                "column": 23,
                "index": 3019
            },
            "line": 113,
            "code": "  test('handles objects', () => {\n    const cls1 = css({\n      float: 'left',\n      display: 'flex',\n      color: `${'blue'}`,\n      fontSize: `${'20px'}`,\n      height: 50,\n      width: 20\n    });\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "handles array of objects",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 127,
                "column": 32,
                "index": 3384
            },
            "line": 127,
            "code": "  test('handles array of objects', () => {\n    const cls1 = css([{\n      height: 50,\n      width: 20\n    }, null]);\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "computed key is only dynamic",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 137,
                "column": 36,
                "index": 3662
            },
            "line": 137,
            "code": "  test('computed key is only dynamic', () => {\n    const cls1 = css({\n      fontSize: 10,\n      [`w${'idth'}`]: 20\n    });\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "composition with objects",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 147,
                "column": 32,
                "index": 3939
            },
            "line": 147,
            "code": "  test('composition with objects', () => {\n    const cls1 = css({\n      display: 'flex',\n      width: 30,\n      height: 'calc(40vw - 50px)',\n      '&:hover': {\n        color: 'blue'\n      },\n      ':after': {\n        content: '\" \"',\n        color: 'red'\n      },\n      '@media(min-width: 420px)': {\n        color: 'green'\n      }\n    });\n    const cls2 = css`\n      ${cls1};\n      justify-content: center;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls2\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "@supports",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 172,
                "column": 17,
                "index": 4495
            },
            "line": 172,
            "code": "  test('@supports', () => {\n    const cls1 = css`\n      @supports (display: grid) {\n        display: grid;\n      }\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "nested at rules",
            "suites": [
                "css"
            ],
            "line": 183,
            "code": "  test.skip('nested at rules', () => {",
            "file": "css.test.js",
            "skipped": true,
            "dir": "packages/css/test"
        },
        {
            "name": "nested array",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 203,
                "column": 20,
                "index": 5275
            },
            "line": 203,
            "code": "  test('nested array', () => {\n    const cls1 = css([[{\n      display: 'inline'\n    }], [{\n      display: 'inline-block'\n    }], [{\n      display: 'block'\n    }, [{\n      display: 'flex'\n    }, [{\n      display: 'table'\n    }, {\n      color: 'darkorchid'\n    }, [{\n      fontSize: 16\n    }, [{\n      '&:after': {\n        backgroundColor: 'aquamarine'\n      }\n    }]]]]]]);\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "explicit false",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 228,
                "column": 22,
                "index": 5808
            },
            "line": 228,
            "code": "  test('explicit false', () => {\n    const cls1 = css(false);\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "array with explicit false",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 235,
                "column": 33,
                "index": 6039
            },
            "line": 235,
            "code": "  test('array with explicit false', () => {\n    const cls1 = css([[{\n      display: 'flex'\n    }], false]);\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "array with explicit true",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 244,
                "column": 32,
                "index": 6304
            },
            "line": 244,
            "code": "  test('array with explicit true', () => {\n    const cls1 = css([[{\n      display: 'flex'\n    }], true]);\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "nested",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 253,
                "column": 14,
                "index": 6550
            },
            "line": 253,
            "code": "  test('nested', () => {\n    const cls1 = css`\n      color: yellow;\n      & .some-class {\n        display: flex;\n        & .some-other-class {\n          background-color: hotpink;\n        }\n        @media (max-width: 600px) {\n          background-color: pink;\n        }\n      }\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"some-class\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"some-other-class\"\n    })))).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "explicit &",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 275,
                "column": 18,
                "index": 7163
            },
            "line": 275,
            "code": "  test('explicit &', () => {\n    flush();\n    const cls1 = css`\n      &.another-class {\n        display: flex;\n      }\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: `${cls1} another-class`\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n    expect(sheet).toMatchSnapshot();\n    flush();\n  });",
            "file": "css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "falsy property value in object",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 289,
                "column": 38,
                "index": 7536
            },
            "line": 289,
            "code": "  test('falsy property value in object', () => {\n    const cls = css({\n      display: 'flex',\n      backgroundColor: undefined\n    });\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "registered styles as nested selector value in object",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 299,
                "column": 60,
                "index": 7850
            },
            "line": 299,
            "code": "  test('registered styles as nested selector value in object', () => {\n    const cls = css({\n      display: 'flex',\n      backgroundColor: 'hotpink'\n    });\n    const cls1 = css({\n      ':hover': cls\n    });\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "composition stuff",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 312,
                "column": 25,
                "index": 8181
            },
            "line": 312,
            "code": "  test('composition stuff', () => {\n    const cls1 = css({\n      justifyContent: 'center'\n    });\n    const cls2 = css([cls1]);\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n    const tree2 = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls2\n    })).toJSON();\n    expect(tree2).toMatchSnapshot();\n  });",
            "file": "css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "null rule",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 326,
                "column": 17,
                "index": 8613
            },
            "line": 326,
            "code": "  test('null rule', () => {\n    const cls1 = css();\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "css variables",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 333,
                "column": 21,
                "index": 8827
            },
            "line": 333,
            "code": "  test('css variables', () => {\n    const cls1 = css`\n      --some-var: 1px;\n      width: var(--some-var);\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "null value",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 343,
                "column": 18,
                "index": 9096
            },
            "line": 343,
            "code": "  test('null value', () => {\n    const cls1 = css(null);\n    expect(renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON()).toMatchSnapshot();\n  });",
            "file": "css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "flushes correctly",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 349,
                "column": 25,
                "index": 9295
            },
            "line": 349,
            "code": "  test('flushes correctly', () => {\n    const cls1 = css`\n      display: flex;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n    flush();\n    const tree2 = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree2).toMatchSnapshot();\n  });",
            "file": "css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "media query specificity",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 363,
                "column": 31,
                "index": 9712
            },
            "line": 363,
            "code": "  test('media query specificity', () => {\n    flush();\n    const cls = css`\n      width: 32px;\n      height: 32px;\n      border-radius: 50%;\n\n      @media (min-width: 420px) {\n        width: 96px;\n        height: 96px;\n      }\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls\n    })).toJSON();\n    expect(sheet).toMatchSnapshot();\n    expect(tree).toMatchSnapshot();\n    flush();\n  });",
            "file": "css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "weakmap",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 382,
                "column": 15,
                "index": 10137
            },
            "line": 382,
            "code": "  test('weakmap', () => {\n    const styles = {\n      display: 'flex'\n    };\n    const cls1 = css(styles);\n    const cls2 = css(styles);\n    const tree1 = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree1).toMatchSnapshot();\n    const tree2 = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls2\n    })).toJSON();\n    expect(tree2).toMatchSnapshot();\n  });",
            "file": "css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "manually use label property",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 397,
                "column": 35,
                "index": 10607
            },
            "line": 397,
            "code": "  test('manually use label property', () => {\n    flush();\n    const cls1 = css`\n      color: hotpink;\n      label: wow;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n    expect(sheet).toMatchSnapshot();\n  });",
            "file": "css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "multiline declaration",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 409,
                "column": 29,
                "index": 10924
            },
            "line": 409,
            "code": "  test('multiline declaration', () => {\n    /* eslint-disable prettier/prettier */\n    const cls1 = css`\n      display: grid;\n      grid:\n        'AppBar' auto\n        'Main' 1fr\n        / 1fr;\n    `;\n    /* eslint-enable prettier/prettier */\n\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "multiline selector",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 425,
                "column": 26,
                "index": 11323
            },
            "line": 425,
            "code": "  test('multiline selector', () => {\n    /* eslint-disable prettier/prettier */\n    const cls1 = css`\n      .my-class:hover .its-child {\n        background: pink;\n      }\n    `;\n    /* eslint-enable prettier/prettier */\n\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "rule after media query",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 439,
                "column": 30,
                "index": 11706
            },
            "line": 439,
            "code": "  test('rule after media query', () => {\n    const cls1 = css`\n      @media (min-width: 600px) {\n        color: green;\n      }\n      &:hover {\n        color: hotpink;\n      }\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "nested at rule",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 453,
                "column": 22,
                "index": 12038
            },
            "line": 453,
            "code": "  test('nested at rule', () => {\n    const cls = css({\n      '@media (min-width: 980px)': {\n        backgroundColor: 'blue',\n        '@supports (width: 100vw)': {\n          backgroundColor: 'red'\n        }\n      }\n    }); // this works correctly but `css` doesn't print it correctly so the snapshot doesn't look correct\n\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "array fallback",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 468,
                "column": 22,
                "index": 12516
            },
            "line": 468,
            "code": "  test('array fallback', () => {\n    const cls = css({\n      color: ['yellow', 'hotpink']\n    });\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "merge 2",
            "suites": [
                "cx"
            ],
            "updatePoint": {
                "line": 6,
                "column": 15,
                "index": 182
            },
            "line": 6,
            "code": "  test('merge 2', () => {\n    const cls1 = css`\n      font-size: 20px;\n      background: green;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cx(cls1, 'modal')\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "cx.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "merge 3",
            "suites": [
                "cx"
            ],
            "updatePoint": {
                "line": 16,
                "column": 15,
                "index": 456
            },
            "line": 16,
            "code": "  test('merge 3', () => {\n    const cls1 = css`\n      font-size: 20px;\n      background: green;\n    `;\n    const cls2 = css`\n      font-size: 20px;\n      background: blue;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cx(cls1, cls2, 'modal')\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "cx.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "merge 4",
            "suites": [
                "cx"
            ],
            "updatePoint": {
                "line": 30,
                "column": 15,
                "index": 812
            },
            "line": 30,
            "code": "  test('merge 4', () => {\n    const cls1 = css`\n      font-size: 20px;\n      background: green;\n    `;\n    const cls2 = css`\n      font-size: 20px;\n      background: blue;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cx(cls1, cls2, 'modal', 'profile')\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "cx.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "all types",
            "suites": [
                "cx"
            ],
            "updatePoint": {
                "line": 44,
                "column": 17,
                "index": 1181
            },
            "line": 44,
            "code": "  test('all types', () => {\n    const cls1 = css`\n      font-size: 20px;\n      background: green;\n    `;\n    const cls2 = css`\n      font-size: 20px;\n      background: blue;\n    `;\n    const cls3 = css`\n      font-size: 20px;\n      background: darkorange;\n    `;\n    const cls4 = css`\n      font-size: 20px;\n      background: darkgreen;\n    `;\n    const foo = true;\n    const bar = false;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cx({\n        [cls1]: foo\n      }, 'modal', {\n        [cls2]: bar\n      }, 'profile', [[cls3, [cls4]]])\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "cx.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "fun fun functions",
            "suites": [
                "cx"
            ],
            "updatePoint": {
                "line": 72,
                "column": 25,
                "index": 1834
            },
            "line": 72,
            "code": "  test('fun fun functions', () => {\n    const cls1 = css`\n      font-size: 20px;\n      background: green;\n    `;\n    const cls2 = css`\n      font-size: 20px;\n      background: blue;\n    `;\n    const cls3 = css`\n      font-size: 20px;\n      background: darkorange;\n    `;\n    const cls4 = css`\n      font-size: 20px;\n      background: darkgreen;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cx([[cls1, false && cls2, 'modal'], [cls3, {\n        [cls4]: true\n      }, 'profile']])\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "cx.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "no extra whitespace",
            "suites": [
                "cx"
            ],
            "updatePoint": {
                "line": 96,
                "column": 27,
                "index": 2429
            },
            "line": 96,
            "code": "  test('no extra whitespace', () => {\n    expect(cx('blockquote', '', 'news')).toMatchSnapshot();\n    expect(cx('', 'group', '', 'news', '')).toMatchSnapshot();\n    expect(cx('author', '')).toMatchSnapshot();\n    expect(cx({\n      someClass: true,\n      '': true\n    })).toMatchSnapshot();\n    expect(cx({\n      someClass: true,\n      '': true,\n      anotherClass: true\n    })).toMatchSnapshot();\n  });",
            "file": "cx.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "basic",
            "suites": [
                "injectGlobal"
            ],
            "updatePoint": {
                "line": 7,
                "column": 13,
                "index": 182
            },
            "line": 7,
            "code": "  test('basic', () => {\n    injectGlobal`\n      html {\n        background: pink;\n      }\n      html.active {\n        background: red;\n      }\n    `;\n    expect(sheet).toMatchSnapshot();\n  });",
            "file": "inject-global.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "interpolated value",
            "suites": [
                "injectGlobal"
            ],
            "updatePoint": {
                "line": 18,
                "column": 26,
                "index": 387
            },
            "line": 18,
            "code": "  test('interpolated value', () => {\n    const color = 'yellow';\n    injectGlobal`\n      body {\n        color: ${color};\n        margin: 0;\n        padding: 0;\n      }\n    `;\n    expect(sheet).toMatchSnapshot();\n  });",
            "file": "inject-global.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "nested interpolated media query",
            "suites": [
                "injectGlobal"
            ],
            "updatePoint": {
                "line": 29,
                "column": 39,
                "index": 618
            },
            "line": 29,
            "code": "  test('nested interpolated media query', () => {\n    injectGlobal`\n      body {\n        ${'@media (max-width: 600px)'} {\n          display: flex;\n        }\n      }\n    `;\n    expect(sheet).toMatchSnapshot();\n  });",
            "file": "inject-global.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "random interpolation",
            "suites": [
                "injectGlobal"
            ],
            "updatePoint": {
                "line": 39,
                "column": 28,
                "index": 822
            },
            "line": 39,
            "code": "  test('random interpolation', () => {\n    const cls = css`\n      display: flex;\n    `;\n    injectGlobal`\n      body {\n        ${cls};\n      }\n    `;\n    expect(sheet).toMatchSnapshot();\n  });",
            "file": "inject-global.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "with @font-face",
            "suites": [
                "injectGlobal"
            ],
            "updatePoint": {
                "line": 50,
                "column": 23,
                "index": 1010
            },
            "line": 50,
            "code": "  test('with @font-face', () => {\n    injectGlobal`\n      @font-face {\n        font-family: 'Patrick Hand SC';\n        font-style: normal;\n        font-weight: 400;\n        src: local('Patrick Hand SC'), local('PatrickHandSC-Regular'),\n          url(https://fonts.gstatic.com/s/patrickhandsc/v4/OYFWCgfCR-7uHIovjUZXsZ71Uis0Qeb9Gqo8IZV7ckE.woff2)\n            format('woff2');\n        unicode-range: U+0100-024f, U+1-1eff, U+20a0-20ab, U+20ad-20cf,\n          U+2c60-2c7f, U+A720-A7FF;\n      }\n    `;\n    expect(sheet).toMatchSnapshot();\n  });",
            "file": "inject-global.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "pseudo in @media",
            "suites": [
                "injectGlobal"
            ],
            "updatePoint": {
                "line": 65,
                "column": 24,
                "index": 1552
            },
            "line": 65,
            "code": "  test('pseudo in @media', () => {\n    injectGlobal`\n      @media (min-width: 300px) {\n        .header:after {\n          content: '';\n        }\n      }\n    `;\n    expect(sheet).toMatchSnapshot();\n  });",
            "file": "inject-global.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "float property",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 6,
                "column": 22,
                "index": 220
            },
            "line": 6,
            "code": "  test('float property', () => {\n    const cls1 = differentCss`\n      float: left;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "instance/css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "handles more than 10 dynamic properties",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 15,
                "column": 47,
                "index": 493
            },
            "line": 15,
            "code": "  test('handles more than 10 dynamic properties', () => {\n    const cls1 = differentCss`\n      text-decoration: ${'underline'};\n      border-right: solid blue 54px;\n      background: ${'white'};\n      color: ${'black'};\n      display: ${'block'};\n      border-radius: ${'3px'};\n      padding: ${'25px'};\n      width: ${'500px'};\n      z-index: ${100};\n      font-size: ${'18px'};\n      text-align: ${'center'};\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "instance/css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "falsy value in nested selector on object",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 34,
                "column": 48,
                "index": 1070
            },
            "line": 34,
            "code": "  test('falsy value in nested selector on object', () => {\n    const cls1 = differentCss({\n      ':hover': {\n        display: null,\n        color: 'hotpink'\n      }\n    });\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "instance/css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "boolean as value",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 46,
                "column": 24,
                "index": 1377
            },
            "line": 46,
            "code": "  test('boolean as value', () => {\n    const cls1 = differentCss({\n      display: 'flex',\n      color: false,\n      backgroundColor: true\n    });\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "instance/css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "auto px",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 57,
                "column": 15,
                "index": 1672
            },
            "line": 57,
            "code": "  test('auto px', () => {\n    const cls1 = differentCss({\n      display: 'flex',\n      flex: 1,\n      fontSize: 10\n    });\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "instance/css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "random interpolation with undefined values",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 68,
                "column": 50,
                "index": 1988
            },
            "line": 68,
            "code": "  test('random interpolation with undefined values', () => {\n    const cls2 = differentCss`\n      ${undefined};\n      justify-content: center;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls2\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "instance/css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "random expression",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 78,
                "column": 25,
                "index": 2271
            },
            "line": 78,
            "code": "  test('random expression', () => {\n    const cls2 = differentCss`\n      font-size: 20px;\n      @media (min-width: 420px) {\n        color: blue;\n        ${differentCss`\n          width: 96px;\n          height: 96px;\n        `};\n        line-height: 40px;\n      }\n      background: green;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls2\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "instance/css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "simple composition",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 96,
                "column": 26,
                "index": 2725
            },
            "line": 96,
            "code": "  test('simple composition', () => {\n    const cls1 = differentCss`\n      display: flex;\n      &:hover {\n        color: hotpink;\n      }\n    `;\n    const cls2 = differentCss`\n      ${cls1};\n      justify-content: center;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls2\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "instance/css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "handles objects",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 112,
                "column": 23,
                "index": 3108
            },
            "line": 112,
            "code": "  test('handles objects', () => {\n    const cls1 = differentCss({\n      float: 'left',\n      display: 'flex',\n      color: `${'blue'}`,\n      fontSize: `${'20px'}`,\n      height: 50,\n      width: 20\n    });\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "instance/css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "handles array of objects",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 126,
                "column": 32,
                "index": 3482
            },
            "line": 126,
            "code": "  test('handles array of objects', () => {\n    const cls1 = differentCss([{\n      height: 50,\n      width: 20\n    }, null]);\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "instance/css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "computed key is only dynamic",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 136,
                "column": 36,
                "index": 3769
            },
            "line": 136,
            "code": "  test('computed key is only dynamic', () => {\n    const cls1 = differentCss({\n      fontSize: 10,\n      [`w${'idth'}`]: 20\n    });\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "instance/css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "composition with objects",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 146,
                "column": 32,
                "index": 4055
            },
            "line": 146,
            "code": "  test('composition with objects', () => {\n    const cls1 = differentCss({\n      display: 'flex',\n      width: 30,\n      height: 'calc(40vw - 50px)',\n      '&:hover': {\n        color: 'blue'\n      },\n      ':after': {\n        content: '\" \"',\n        color: 'red'\n      },\n      '@media(min-width: 420px)': {\n        color: 'green'\n      }\n    });\n    const cls2 = differentCss`\n      ${cls1};\n      justify-content: center;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls2\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "instance/css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "@supports",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 171,
                "column": 17,
                "index": 4629
            },
            "line": 171,
            "code": "  test('@supports', () => {\n    const cls1 = differentCss`\n      @supports (display: grid) {\n        display: grid;\n      }\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "instance/css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "nested at rules",
            "suites": [
                "css"
            ],
            "line": 182,
            "code": "  test.skip('nested at rules', () => {",
            "file": "instance/css.test.js",
            "skipped": true,
            "dir": "packages/css/test"
        },
        {
            "name": "nested array",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 202,
                "column": 20,
                "index": 5427
            },
            "line": 202,
            "code": "  test('nested array', () => {\n    const cls1 = differentCss([[{\n      display: 'inline'\n    }], [{\n      display: 'inline-block'\n    }], [{\n      display: 'block'\n    }, [{\n      display: 'flex'\n    }, [{\n      display: 'table'\n    }, {\n      color: 'darkorchid'\n    }, [{\n      fontSize: 16\n    }, [{\n      '&:after': {\n        backgroundColor: 'aquamarine'\n      }\n    }]]]]]]);\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "instance/css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "explicit false",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 227,
                "column": 22,
                "index": 5969
            },
            "line": 227,
            "code": "  test('explicit false', () => {\n    const cls1 = differentCss(false);\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "instance/css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "array with explicit false",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 234,
                "column": 33,
                "index": 6209
            },
            "line": 234,
            "code": "  test('array with explicit false', () => {\n    const cls1 = differentCss([[{\n      display: 'flex'\n    }], false]);\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "instance/css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "array with explicit true",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 243,
                "column": 32,
                "index": 6483
            },
            "line": 243,
            "code": "  test('array with explicit true', () => {\n    const cls1 = differentCss([[{\n      display: 'flex'\n    }], true]);\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "instance/css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "nested",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 252,
                "column": 14,
                "index": 6738
            },
            "line": 252,
            "code": "  test('nested', () => {\n    const cls1 = differentCss`\n      color: yellow;\n      & .some-class {\n        display: flex;\n        & .some-other-class {\n          background-color: hotpink;\n        }\n        @media (max-width: 600px) {\n          background-color: pink;\n        }\n      }\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"some-class\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"some-other-class\"\n    })))).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "instance/css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "explicit &",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 274,
                "column": 18,
                "index": 7360
            },
            "line": 274,
            "code": "  test('explicit &', () => {\n    flush();\n    const cls1 = differentCss`\n      &.another-class {\n        display: flex;\n      }\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: `${cls1} another-class`\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n    expect(sheet).toMatchSnapshot();\n    flush();\n  });",
            "file": "instance/css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "falsy property value in object",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 288,
                "column": 38,
                "index": 7742
            },
            "line": 288,
            "code": "  test('falsy property value in object', () => {\n    const cls = differentCss({\n      display: 'flex',\n      backgroundColor: undefined\n    });\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "instance/css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "registered styles as nested selector value in object",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 298,
                "column": 60,
                "index": 8065
            },
            "line": 298,
            "code": "  test('registered styles as nested selector value in object', () => {\n    const cls = differentCss({\n      display: 'flex',\n      backgroundColor: 'hotpink'\n    });\n    const cls1 = differentCss({\n      ':hover': cls\n    });\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "instance/css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "composition stuff",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 311,
                "column": 25,
                "index": 8414
            },
            "line": 311,
            "code": "  test('composition stuff', () => {\n    const cls1 = differentCss({\n      justifyContent: 'center'\n    });\n    const cls2 = differentCss([cls1]);\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n    const tree2 = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls2\n    })).toJSON();\n    expect(tree2).toMatchSnapshot();\n  });",
            "file": "instance/css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "null rule",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 325,
                "column": 17,
                "index": 8864
            },
            "line": 325,
            "code": "  test('null rule', () => {\n    const cls1 = differentCss();\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "instance/css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "css variables",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 332,
                "column": 21,
                "index": 9087
            },
            "line": 332,
            "code": "  test('css variables', () => {\n    const cls1 = differentCss`\n      --some-var: 1px;\n      width: var(--some-var);\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "instance/css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "null value",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 342,
                "column": 18,
                "index": 9365
            },
            "line": 342,
            "code": "  test('null value', () => {\n    const cls1 = differentCss(null);\n    const cls2 = differentCss`\n      ${null};\n    `;\n    expect(renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON()).toMatchSnapshot();\n    expect(renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls2\n    })).toJSON()).toMatchSnapshot();\n  });",
            "file": "instance/css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "flushes correctly",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 354,
                "column": 25,
                "index": 9755
            },
            "line": 354,
            "code": "  test('flushes correctly', () => {\n    const cls1 = differentCss`\n      display: flex;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n    flush();\n    const tree2 = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree2).toMatchSnapshot();\n  });",
            "file": "instance/css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "media query specificity",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 368,
                "column": 31,
                "index": 10181
            },
            "line": 368,
            "code": "  test('media query specificity', () => {\n    flush();\n    const cls = differentCss`\n      width: 32px;\n      height: 32px;\n      border-radius: 50%;\n\n      @media (min-width: 420px) {\n        width: 96px;\n        height: 96px;\n      }\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls\n    })).toJSON();\n    expect(sheet).toMatchSnapshot();\n    expect(tree).toMatchSnapshot();\n    flush();\n  });",
            "file": "instance/css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "weakmap",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 387,
                "column": 15,
                "index": 10615
            },
            "line": 387,
            "code": "  test('weakmap', () => {\n    const styles = {\n      display: 'flex'\n    };\n    const cls1 = differentCss(styles);\n    const cls2 = differentCss(styles);\n    const tree1 = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree1).toMatchSnapshot();\n    const tree2 = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls2\n    })).toJSON();\n    expect(tree2).toMatchSnapshot();\n  });",
            "file": "instance/css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "manually use label property",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 402,
                "column": 35,
                "index": 11103
            },
            "line": 402,
            "code": "  test('manually use label property', () => {\n    flush();\n    const cls1 = differentCss`\n      color: hotpink;\n      label: wow;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n    expect(sheet).toMatchSnapshot();\n  });",
            "file": "instance/css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "sets correct nonce value",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 414,
                "column": 32,
                "index": 11432
            },
            "line": 414,
            "code": "  test('sets correct nonce value', () => {\n    flush();\n    differentCss`\n      color: hotpink;\n    `;\n    differentCss`\n      color: yellow;\n    `;\n    expect(sheet.tags).toHaveLength(2);\n    expect(sheet.tags[0].getAttribute('nonce')).toBe('some-nonce');\n    expect(sheet.tags[1].getAttribute('nonce')).toBe('some-nonce');\n  });",
            "file": "instance/css.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "renders styles with ids",
            "suites": [
                "renderStylesToString"
            ],
            "updatePoint": {
                "line": 21,
                "column": 31,
                "index": 737
            },
            "line": 21,
            "code": "  test('renders styles with ids', async () => {\n    await disableBrowserEnvTemporarily(() => {\n      resetAllModules();\n      const {\n        Page1,\n        Page2\n      } = getComponents(emotion, reactEmotion);\n      expect(emotionServer.renderStylesToString(renderToString( /*#__PURE__*/React.createElement(Page1, null)))).toMatchSnapshot();\n      expect(emotionServer.renderStylesToString(renderToString( /*#__PURE__*/React.createElement(Page2, null)))).toMatchSnapshot();\n    });\n  });",
            "file": "instance/inline.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "renders large recursive component",
            "suites": [
                "renderStylesToString"
            ],
            "updatePoint": {
                "line": 32,
                "column": 41,
                "index": 1236
            },
            "line": 32,
            "code": "  test('renders large recursive component', async () => {\n    await disableBrowserEnvTemporarily(() => {\n      resetAllModules();\n      const BigComponent = createBigComponent(emotion);\n      expect(stripDataReactRoot(emotionServer.renderStylesToString(renderToString( /*#__PURE__*/React.createElement(BigComponent, {\n        count: 200\n      }))))).toMatchSnapshot();\n    });\n  });",
            "file": "instance/inline.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "only inserts rules that are not in the critical css",
            "suites": [
                "hydration"
            ],
            "updatePoint": {
                "line": 43,
                "column": 59,
                "index": 1671
            },
            "line": 43,
            "code": "  test('only inserts rules that are not in the critical css', async () => {\n    const appHtml = await disableBrowserEnvTemporarily(() => {\n      resetAllModules();\n      const {\n        Page1\n      } = getComponents(emotion, reactEmotion);\n      return emotionServer.renderStylesToString(renderToString( /*#__PURE__*/React.createElement(Page1, null)));\n    });\n    expect(appHtml).toMatchSnapshot();\n    document.body.innerHTML = `<div id=\"root\">${appHtml}</div>`;\n    resetAllModules();\n    expect(emotion.cache.registered).toEqual({});\n    const {\n      Page1: NewPage1\n    } = getComponents(emotion, reactEmotion);\n    render( /*#__PURE__*/React.createElement(NewPage1, null), {\n      container: safeQuerySelector('#root')\n    });\n    expect(getInjectedRules()).toMatchSnapshot();\n    expect(getCssFromChunks(emotion, document)).toMatchSnapshot();\n  });",
            "file": "instance/inline.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "inserts style tags into container",
            "suites": [
                "general instance tests"
            ],
            "updatePoint": {
                "line": 4,
                "column": 41,
                "index": 203
            },
            "line": 4,
            "code": "  test('inserts style tags into container', () => {\n    css`\n      display: flex;\n    `;\n    sheet.tags.forEach(tag => {\n      expect(tag.getAttribute('data-emotion')).toBe('some-key');\n      expect(tag.getAttribute('nonce')).toBe('some-nonce');\n      expect(tag.parentNode).toBe(container);\n    });\n  });",
            "file": "instance/instance.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "throws with invalid key",
            "suites": [
                "general instance tests"
            ],
            "updatePoint": {
                "line": 14,
                "column": 31,
                "index": 499
            },
            "line": 14,
            "code": "  test('throws with invalid key', () => {\n    expect(() => {\n      createEmotion({\n        key: 'css1'\n      });\n    }).toThrowErrorMatchingSnapshot();\n  });",
            "file": "instance/instance.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "renders styles with ids",
            "suites": [
                "renderStylesToNodeStream"
            ],
            "updatePoint": {
                "line": 22,
                "column": 31,
                "index": 674
            },
            "line": 22,
            "code": "  test('renders styles with ids', async () => {\n    await disableBrowserEnvTemporarily(async () => {\n      resetAllModules();\n      const {\n        Page1,\n        Page2\n      } = util.getComponents(emotion, reactEmotion);\n      expect(await util.renderToStringWithStream( /*#__PURE__*/React.createElement(Page1, null), emotionServer)).toMatchSnapshot();\n      expect(await util.renderToStringWithStream( /*#__PURE__*/React.createElement(Page2, null), emotionServer)).toMatchSnapshot();\n    });\n  });",
            "file": "instance/stream.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "renders large recursive component",
            "suites": [
                "renderStylesToNodeStream"
            ],
            "updatePoint": {
                "line": 33,
                "column": 41,
                "index": 1184
            },
            "line": 33,
            "code": "  test('renders large recursive component', async () => {\n    await disableBrowserEnvTemporarily(async () => {\n      resetAllModules();\n      const BigComponent = util.createBigComponent(emotion);\n      expect(stripDataReactRoot(await util.renderToStringWithStream( /*#__PURE__*/React.createElement(BigComponent, {\n        count: 200\n      }), emotionServer))).toMatchSnapshot();\n    });\n  });",
            "file": "instance/stream.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "only inserts rules that are not in the critical css",
            "suites": [
                "hydration"
            ],
            "updatePoint": {
                "line": 44,
                "column": 59,
                "index": 1630
            },
            "line": 44,
            "code": "  test('only inserts rules that are not in the critical css', async () => {\n    const appHtml = await disableBrowserEnvTemporarily(() => {\n      resetAllModules();\n      const {\n        Page1\n      } = util.getComponents(emotion, reactEmotion);\n      return util.renderToStringWithStream( /*#__PURE__*/React.createElement(Page1, null), emotionServer);\n    });\n    expect(appHtml).toMatchSnapshot();\n    document.body.innerHTML = `<div id=\"root\">${appHtml}</div>`;\n    resetAllModules();\n    expect(emotion.cache.registered).toEqual({});\n    const {\n      Page1: NewPage1\n    } = util.getComponents(emotion, reactEmotion);\n    render( /*#__PURE__*/React.createElement(NewPage1, null), {\n      container: safeQuerySelector('#root')\n    });\n    expect(util.getInjectedRules(document)).toMatchSnapshot();\n    expect(util.getCssFromChunks(emotion, document)).toMatchSnapshot();\n  });",
            "file": "instance/stream.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "renders",
            "suites": [
                "keyframes"
            ],
            "updatePoint": {
                "line": 9,
                "column": 15,
                "index": 242
            },
            "line": 9,
            "code": "  test('renders', () => {\n    const bounce = keyframes`\n      from, 20%, 53%, 80%, to {\n        animation-timing-function: cubic-bezier(0.215, 0.610, 0.355, 1.000);\n        transform: translate3d(0,0,0);\n      }\n    \n      40%, 43% {\n        animation-timing-function: cubic-bezier(0.755, 0.050, 0.855, 0.060);\n        transform: translate3d(0, -30px, 0);\n      }\n    \n      70% {\n        animation-timing-function: cubic-bezier(0.755, 0.050, 0.855, 0.060);\n        transform: translate3d(0, -15px, 0);\n      }\n    \n      90% {\n        transform: translate3d(0,-4px,0);\n      }\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"h1\", {\n      className: css`\n            animation: ${bounce} 2s linear infinite;\n          `\n    }, \"hello world\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "keyframes.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "keyframes with interpolation",
            "suites": [
                "keyframes"
            ],
            "updatePoint": {
                "line": 37,
                "column": 36,
                "index": 1085
            },
            "line": 37,
            "code": "  test('keyframes with interpolation', () => {\n    const endingRotation = '360deg';\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"h1\", {\n      className: css`\n            animation: ${keyframes`\n    from {\n      transform: rotate(0deg);\n    }\n  \n    to {\n      transform: rotate(${endingRotation});\n    }\n  `} 2s linear infinite;\n          `\n    }, \"hello world\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "keyframes.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "input + label styled",
            "suites": [
                "label pattern"
            ],
            "updatePoint": {
                "line": 8,
                "column": 28,
                "index": 270
            },
            "line": 8,
            "code": "  test('input + label styled', () => {\n    const Input = styled.input`\n      & + label::after {\n        color: pink;\n        background: orange;\n      }\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Input, null), /*#__PURE__*/React.createElement(\"label\", null, \"Label\"))).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "label-pattern.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "random expression",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 12,
                "column": 25,
                "index": 331
            },
            "line": 12,
            "code": "  test('random expression', () => {\n    const cls2 = css`\n      font-size: 20px;\n      @media (min-width: 420px) {\n        color: blue;\n        ${css`\n          width: 96px;\n          height: 96px;\n        `};\n        line-height: 40px;\n      }\n      background: green;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls2\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "no-babel/index.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "composition",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 30,
                "column": 19,
                "index": 760
            },
            "line": 30,
            "code": "  test('composition', () => {\n    const cls1 = css`\n      display: flex;\n      &:hover {\n        color: hotpink;\n      }\n    `;\n    const cls2 = css`\n      ${cls1};\n      justify-content: center;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls2\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "no-babel/index.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "handles objects",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 46,
                "column": 23,
                "index": 1125
            },
            "line": 46,
            "code": "  test('handles objects', () => {\n    const cls1 = css({\n      float: 'left',\n      display: 'flex',\n      color: `${'blue'}`,\n      fontSize: `${'20px'}`,\n      height: 50,\n      width: 20\n    });\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "no-babel/index.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "composition with objects",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 60,
                "column": 32,
                "index": 1490
            },
            "line": 60,
            "code": "  test('composition with objects', () => {\n    const cls1 = css({\n      display: 'flex',\n      width: 30,\n      height: 'calc(40vw - 50px)',\n      '&:hover': {\n        color: 'blue'\n      },\n      ':after': {\n        content: '\" \"',\n        color: 'red'\n      },\n      '@media(min-width: 420px)': {\n        color: 'green'\n      }\n    });\n    const cls2 = css`\n      ${cls1};\n      justify-content: center;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls2\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "no-babel/index.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "@supports",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 85,
                "column": 17,
                "index": 2046
            },
            "line": 85,
            "code": "  test('@supports', () => {\n    const cls1 = css`\n      @supports (display: grid) {\n        display: grid;\n      }\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "no-babel/index.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "nested array",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 96,
                "column": 20,
                "index": 2329
            },
            "line": 96,
            "code": "  test('nested array', () => {\n    const cls1 = css([[{\n      display: 'flex'\n    }]]);\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "no-babel/index.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "composition stuff",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 105,
                "column": 25,
                "index": 2580
            },
            "line": 105,
            "code": "  test('composition stuff', () => {\n    const cls1 = css({\n      justifyContent: 'center'\n    });\n    const cls2 = css([cls1]);\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n    const tree2 = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls2\n    })).toJSON();\n    expect(tree2).toMatchSnapshot();\n  });",
            "file": "no-babel/index.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "null rule",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 119,
                "column": 17,
                "index": 3012
            },
            "line": 119,
            "code": "  test('null rule', () => {\n    const cls1 = css();\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "no-babel/index.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "no dynamic",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 126,
                "column": 18,
                "index": 3223
            },
            "line": 126,
            "code": "  test('no dynamic', () => {\n    const H1 = styled('h1')`\n      float: left;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(H1, null, \"hello world\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "no-babel/index.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "object as style",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 133,
                "column": 23,
                "index": 3457
            },
            "line": 133,
            "code": "  test('object as style', () => {\n    const H1 = styled('h1')(props => ({\n      fontSize: props.fontSize\n    }), props => ({\n      flex: props.flex\n    }), {\n      display: 'flex'\n    });\n    const tree = renderer.create( /*#__PURE__*/React.createElement(H1, {\n      fontSize: 20,\n      flex: 1\n    }, \"hello world\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "no-babel/index.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "component as selectors (object syntax)",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 147,
                "column": 46,
                "index": 3850
            },
            "line": 147,
            "code": "  test('component as selectors (object syntax)', () => {\n    const fontSize = '20px';\n    const H1 = styled('h1')({\n      fontSize\n    });\n    const Thing = styled('div')({\n      display: 'flex',\n      [String(H1)]: {\n        color: 'green'\n      }\n    });\n    const spy = jest.fn(); // $FlowFixMe\n\n    console.error = spy;\n    expect(() => renderer.create( /*#__PURE__*/React.createElement(Thing, null, \"hello \", /*#__PURE__*/React.createElement(H1, null, \"This will be green\"), \" world\"))).toThrowErrorMatchingSnapshot();\n    expect(spy.mock.calls.length).toBe(1);\n    expect(spy.mock.calls[0][0].split('\\n')[0]).toMatchSnapshot();\n  });",
            "file": "no-babel/index.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "component selectors without target",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 165,
                "column": 42,
                "index": 4486
            },
            "line": 165,
            "code": "  test('component selectors without target', () => {\n    const SomeComponent = styled('div')`\n      color: blue;\n    `;\n    expect(() => {\n      css`\n        ${SomeComponent} {\n          color: red;\n        }\n      `;\n    }).toThrowErrorMatchingSnapshot();\n  });",
            "file": "no-babel/index.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "glamorous style api & composition",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 177,
                "column": 41,
                "index": 4748
            },
            "line": 177,
            "code": "  test('glamorous style api & composition', () => {\n    const H1 = styled('h1')(props => ({\n      fontSize: props.fontSize\n    }));\n    const H2 = styled(H1)(props => ({\n      flex: props.flex\n    }), {\n      display: 'flex'\n    });\n    const tree = renderer.create( /*#__PURE__*/React.createElement(H2, {\n      fontSize: 20,\n      flex: 1\n    }, \"hello world\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "no-babel/index.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "random expressions undefined return",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 192,
                "column": 43,
                "index": 5165
            },
            "line": 192,
            "code": "  test('random expressions undefined return', () => {\n    const H1 = styled('h1')`\n      ${props => props.prop && css`\n          font-size: 1rem;\n        `};\n      color: green;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(H1, {\n      className: 'legacy__class'\n    }, \"hello world\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "no-babel/index.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "function in expression",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 204,
                "column": 30,
                "index": 5518
            },
            "line": 204,
            "code": "  test('function in expression', () => {\n    const fontSize = 20;\n    const H1 = styled('h1')`\n      font-size: ${fontSize + 'px'};\n    `;\n    const H2 = styled(H1)`\n      font-size: ${({\n      scale\n    }) => fontSize * scale + 'px'};\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(H2, {\n      scale: 2,\n      className: 'legacy__class'\n    }, \"hello world\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "no-babel/index.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "name with class component",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 220,
                "column": 33,
                "index": 5961
            },
            "line": 220,
            "code": "  test('name with class component', () => {\n    class SomeComponent extends React.Component {\n      render() {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: this.props.className\n        });\n      }\n\n    }\n\n    const StyledComponent = styled(SomeComponent)`\n      color: hotpink;\n    `;\n    expect(StyledComponent.displayName).toBe(`Styled(SomeComponent)`);\n  });",
            "file": "no-babel/index.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "styled does not throw on toString without target",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 235,
                "column": 56,
                "index": 6379
            },
            "line": 235,
            "code": "  test('styled does not throw on toString without target', () => {\n    expect(() => {\n      styled('div')().toString();\n    }).not.toThrow();\n  });",
            "file": "no-babel/index.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "styled does not throw an error when certain properties are accessed",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 240,
                "column": 75,
                "index": 6546
            },
            "line": 240,
            "code": "  test('styled does not throw an error when certain properties are accessed', () => {\n    expect(() => {\n      /* eslint-disable no-unused-expressions */\n      // eslint-disable-next-line no-proto\n      styled.__proto__;\n      styled.prototype;\n      styled.name;\n      styled.displayName;\n      /* eslint-enable no-unused-expressions */\n    }).not.toThrow();\n  });",
            "file": "no-babel/index.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "warns about illegal escape sequences inside first quasi of template literal",
            "suites": [],
            "updatePoint": {
                "line": 8,
                "column": 79,
                "index": 236
            },
            "line": 8,
            "code": "it('warns about illegal escape sequences inside first quasi of template literal', () => {\n  css`\n    :before {\n      content: '\\00d7';\n    }\n  `;\n  expect(console.error.mock.calls[0]).toMatchInlineSnapshot(`\n    [\n      \"You have illegal escape sequence in your template literal, most likely inside content's property value.\n    Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \"content: '\\\\00d7';\" should become \"content: '\\\\\\\\00d7';\".\n    You can read more about this here:\n    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences\",\n    ]\n  `);\n});",
            "file": "no-babel/warnings.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "warns about illegal escape sequences inside non-first quasi of template literal",
            "suites": [],
            "updatePoint": {
                "line": 23,
                "column": 83,
                "index": 927
            },
            "line": 23,
            "code": "it('warns about illegal escape sequences inside non-first quasi of template literal', () => {\n  const color = `color: hotpink`;\n  css`\n    background-color: black;\n    ${color};\n    :before {\n      content: '\\00d7';\n    }\n  `;\n  expect(console.error.mock.calls[0]).toMatchInlineSnapshot(`\n    [\n      \"You have illegal escape sequence in your template literal, most likely inside content's property value.\n    Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \"content: '\\\\00d7';\" should become \"content: '\\\\\\\\00d7';\".\n    You can read more about this here:\n    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences\",\n    ]\n  `);\n});",
            "file": "no-babel/warnings.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "complex nested styles",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 5,
                "column": 29,
                "index": 164
            },
            "line": 5,
            "code": "  test('complex nested styles', () => {\n    const mq = ['@media(min-width: 420px)', '@media(min-width: 640px)', '@media(min-width: 960px)'];\n    css({\n      color: 'blue',\n      '&:hover': {\n        '& .name': {\n          color: 'amethyst',\n          '&:focus': {\n            color: 'burlywood',\n            [mq[0]]: {\n              color: 'rebeccapurple'\n            }\n          }\n        },\n        color: 'green'\n      }\n    });\n    expect(sheet).toMatchSnapshot();\n  });",
            "file": "selectivity.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "complex nested media queries",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 24,
                "column": 36,
                "index": 646
            },
            "line": 24,
            "code": "  test('complex nested media queries', () => {\n    css`\n      @media (max-width: 600px) {\n        h1 {\n          font-size: 1.4rem;\n        }\n      }\n\n      @media (max-width: 400px), (max-height: 420px) {\n        h1 {\n          font-size: 1.1rem;\n        }\n      }\n    `;\n    expect(sheet).toMatchSnapshot();\n  });",
            "file": "selectivity.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "handles media query merges",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 40,
                "column": 34,
                "index": 960
            },
            "line": 40,
            "code": "  test('handles media query merges', () => {\n    const mq = ['@media(min-width: 420px)', '@media(min-width: 640px)', '@media(min-width: 960px)'];\n    const buttonCSS = [{\n      color: 'red',\n      [mq[1]]: {\n        color: 'blue'\n      }\n    }, {\n      color: 'purple',\n      [mq[1]]: {\n        color: 'aquamarine'\n      }\n    }];\n    css([{\n      color: 'darkslateblue',\n      [mq[0]]: {\n        color: 'amethyst'\n      },\n      [mq[1]]: {\n        color: 'rebeccapurple'\n      },\n      [mq[2]]: {\n        color: 'burlywood'\n      }\n    }, buttonCSS]);\n    expect(sheet).toMatchSnapshot();\n  });",
            "file": "selectivity.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "media queries with multiple nested selectors",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 67,
                "column": 52,
                "index": 1574
            },
            "line": 67,
            "code": "  test('media queries with multiple nested selectors', () => {\n    css`\n      color: blue;\n\n      @media (max-width: 400px) {\n        color: green;\n        h1 {\n          color: red;\n        }\n        span {\n          color: red;\n        }\n      }\n    `;\n    expect(sheet).toMatchSnapshot();\n  });",
            "file": "selectivity.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "media query with nested selector without declarations on root",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 83,
                "column": 69,
                "index": 1889
            },
            "line": 83,
            "code": "  test('media query with nested selector without declarations on root', () => {\n    css`\n      @media (max-width: 400px) {\n        color: green;\n        span {\n          color: red;\n        }\n      }\n    `;\n    expect(sheet).toMatchSnapshot();\n  });",
            "file": "selectivity.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "media query with nested selector with nested selector on root",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 94,
                "column": 69,
                "index": 2139
            },
            "line": 94,
            "code": "  test('media query with nested selector with nested selector on root', () => {\n    css`\n      span {\n        color: blue;\n      }\n      @media (max-width: 400px) {\n        color: green;\n        span {\n          color: red;\n        }\n      }\n    `;\n    expect(sheet).toMatchSnapshot();\n  }); // this isn't compatible with SCSS but is allowed in Stylis",
            "file": "selectivity.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "should allow for context selector being appended to an element type",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 109,
                "column": 75,
                "index": 2498
            },
            "line": 109,
            "code": "  test('should allow for context selector being appended to an element type', () => {\n    css`\n      a& {\n        background: blue;\n      }\n    `;\n    expect(sheet).toMatchSnapshot();\n  }); // #2488",
            "file": "selectivity.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "should allow for context selector being appended to an element type when pseudoclass appears in the selector group",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 118,
                "column": 122,
                "index": 2745
            },
            "line": 118,
            "code": "  test('should allow for context selector being appended to an element type when pseudoclass appears in the selector group', () => {\n    css`\n      &:hover,\n      a& {\n        background: blue;\n      }\n    `;\n    expect(sheet).toMatchSnapshot();\n  });",
            "file": "selectivity.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "should allow a weird class containing & when pseudoclass appears in the selector group",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 127,
                "column": 94,
                "index": 2969
            },
            "line": 127,
            "code": "  test('should allow a weird class containing & when pseudoclass appears in the selector group', () => {\n    css`\n      &:hover,\n      .t\\\\&t {\n        background: blue;\n      }\n    `;\n    expect(sheet).toMatchSnapshot();\n  });",
            "file": "selectivity.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "single",
            "suites": [
                "orphaned pseudos"
            ],
            "updatePoint": {
                "line": 139,
                "column": 14,
                "index": 3186
            },
            "line": 139,
            "code": "  test('single', () => {\n    css`\n      :focus {\n        color: hotpink;\n      }\n    `;\n    expect(sheet).toMatchSnapshot();\n  });",
            "file": "selectivity.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "multiple in a group",
            "suites": [
                "orphaned pseudos"
            ],
            "updatePoint": {
                "line": 147,
                "column": 27,
                "index": 3330
            },
            "line": 147,
            "code": "  test('multiple in a group', () => {\n    css`\n      :hover div,\n      :focus {\n        color: hotpink;\n      }\n    `;\n    expect(sheet).toMatchSnapshot();\n  });",
            "file": "selectivity.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "multiple in a group in multiple in a group",
            "suites": [
                "orphaned pseudos"
            ],
            "updatePoint": {
                "line": 156,
                "column": 50,
                "index": 3515
            },
            "line": 156,
            "code": "  test('multiple in a group in multiple in a group', () => {\n    css`\n      .foo,\n      .bar div,\n      .qwe {\n        :first-child,\n        div,\n        span,\n        :last-child {\n          color: hotpink;\n        }\n      }\n    `;\n    expect(sheet).toMatchSnapshot();\n  });",
            "file": "selectivity.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "regexp special character",
            "suites": [
                "orphaned pseudos"
            ],
            "updatePoint": {
                "line": 171,
                "column": 32,
                "index": 3773
            },
            "line": 171,
            "code": "  test('regexp special character', () => {\n    css`\n      :nth-child(3) {\n        color: hotpink;\n      }\n    `;\n    expect(sheet).toMatchSnapshot();\n  });",
            "file": "selectivity.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "overlapping",
            "suites": [
                "orphaned pseudos"
            ],
            "updatePoint": {
                "line": 179,
                "column": 19,
                "index": 3916
            },
            "line": 179,
            "code": "  test('overlapping', () => {\n    css`\n      & :first-child {\n        :first-child {\n          color: hotpink;\n        }\n      }\n    `;\n    expect(sheet).toMatchSnapshot();\n  });",
            "file": "selectivity.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "overlapping - reversed",
            "suites": [
                "orphaned pseudos"
            ],
            "updatePoint": {
                "line": 189,
                "column": 30,
                "index": 4106
            },
            "line": 189,
            "code": "  test('overlapping - reversed', () => {\n    css`\n      & :first-child {\n        :first-child & {\n          color: hotpink;\n        }\n      }\n    `;\n    expect(sheet).toMatchSnapshot();\n  });",
            "file": "selectivity.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "in nested atrules",
            "suites": [
                "orphaned pseudos"
            ],
            "updatePoint": {
                "line": 199,
                "column": 25,
                "index": 4293
            },
            "line": 199,
            "code": "  test('in nested atrules', () => {\n    css`\n      @media (max-width: 400px) {\n        @supports (display: grid) {\n          div,\n          :first-child {\n            color: hotpink;\n          }\n        }\n      }\n    `;\n    expect(sheet).toMatchSnapshot();\n  });",
            "file": "selectivity.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "with nested atrule",
            "suites": [
                "orphaned pseudos"
            ],
            "updatePoint": {
                "line": 212,
                "column": 26,
                "index": 4557
            },
            "line": 212,
            "code": "  test('with nested atrule', () => {\n    css({\n      '::before': {\n        content: '\"*\"',\n        background: 'pink',\n        '@media screen and (max-width: 800px)': {\n          background: 'cyan'\n        }\n      }\n    });\n    expect(sheet).toMatchSnapshot();\n  });",
            "file": "selectivity.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "selector list with nested atrule",
            "suites": [
                "orphaned pseudos"
            ],
            "updatePoint": {
                "line": 224,
                "column": 40,
                "index": 4838
            },
            "line": 224,
            "code": "  test('selector list with nested atrule', () => {\n    css({\n      '::backdrop, & + .backdrop': {\n        backgroundColor: 'grey',\n        '@media print': {\n          display: 'none'\n        }\n      }\n    });\n    expect(sheet).toMatchSnapshot();\n  });",
            "file": "selectivity.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "regular rule nested in orphaned pseudo",
            "suites": [
                "orphaned pseudos"
            ],
            "updatePoint": {
                "line": 235,
                "column": 46,
                "index": 5096
            },
            "line": 235,
            "code": "  test('regular rule nested in orphaned pseudo', () => {\n    css({\n      ':hover': {\n        color: 'hotpink',\n        '.foo': {\n          color: 'grey'\n        }\n      }\n    });\n    expect(sheet).toMatchSnapshot();\n  });",
            "file": "selectivity.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "regular rule with nested rule nested in orphaned pseudo",
            "suites": [
                "orphaned pseudos"
            ],
            "updatePoint": {
                "line": 246,
                "column": 63,
                "index": 5335
            },
            "line": 246,
            "code": "  test('regular rule with nested rule nested in orphaned pseudo', () => {\n    css({\n      ':hover': {\n        color: 'hotpink',\n        '.foo': {\n          color: 'grey',\n          '@media print': {\n            display: 'none'\n          }\n        }\n      }\n    });\n    expect(sheet).toMatchSnapshot();\n  });",
            "file": "selectivity.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "orphaned pseudo nested in orphaned pseudo",
            "suites": [
                "orphaned pseudos"
            ],
            "updatePoint": {
                "line": 260,
                "column": 49,
                "index": 5629
            },
            "line": 260,
            "code": "  test('orphaned pseudo nested in orphaned pseudo', () => {\n    css({\n      ':hover': {\n        color: 'hotpink',\n        ':focus': {\n          outlineColor: 'blue'\n        }\n      }\n    });\n    expect(sheet).toMatchSnapshot();\n  });",
            "file": "selectivity.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "speedy",
            "suites": [
                "sheet"
            ],
            "updatePoint": {
                "line": 11,
                "column": 14,
                "index": 231
            },
            "line": 11,
            "code": "  test('speedy', () => {\n    expect(sheet.isSpeedy).toBe(false);\n    sheet.speedy(true);\n    expect(sheet.isSpeedy).toBe(true);\n    sheet.speedy(false);\n    expect(sheet.isSpeedy).toBe(false);\n  });",
            "file": "sheet.dom.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "tags",
            "suites": [
                "sheet"
            ],
            "updatePoint": {
                "line": 18,
                "column": 12,
                "index": 428
            },
            "line": 18,
            "code": "  test('tags', () => {\n    sheet.speedy(true);\n    const rule = '.foo { color: blue; }';\n    sheet.insert(rule);\n    expect(sheet.tags).toMatchSnapshot();\n    expect(sheet.tags.length).toBe(1);\n  });",
            "file": "sheet.dom.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "flush",
            "suites": [
                "sheet"
            ],
            "updatePoint": {
                "line": 25,
                "column": 13,
                "index": 629
            },
            "line": 25,
            "code": "  test('flush', () => {\n    sheet.speedy(true);\n    sheet.insert('.foo { color: blue; }');\n    sheet.flush();\n    expect(sheet.tags.length).toBe(0);\n  });",
            "file": "sheet.dom.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "throws",
            "suites": [
                "sheet"
            ],
            "updatePoint": {
                "line": 31,
                "column": 14,
                "index": 785
            },
            "line": 31,
            "code": "  test('throws', () => {\n    sheet.speedy(true);\n    const spy = jest.fn(); // $FlowFixMe\n\n    console.error = spy;\n    sheet.insert('.asdfasdf4###112121211{');\n    expect(spy.mock.calls.length).toBe(1);\n    expect(spy.mock.calls[0][0]).toMatchInlineSnapshot(`\"There was a problem inserting the following rule: \".asdfasdf4###112121211{\"\"`);\n  });",
            "file": "sheet.dom.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": ".speedy throws when a rule has already been inserted",
            "suites": [
                "sheet"
            ],
            "updatePoint": {
                "line": 40,
                "column": 60,
                "index": 1178
            },
            "line": 40,
            "code": "  test('.speedy throws when a rule has already been inserted', () => {\n    sheet.insert('.foo { color: blue; }');\n    expect(() => {\n      sheet.speedy(true);\n    }).toThrowErrorMatchingSnapshot();\n  });",
            "file": "sheet.dom.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "source-map nested styles",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 9,
                "column": 32,
                "index": 329
            },
            "line": 9,
            "code": "  test('source-map nested styles', () => {\n    const mq = ['@media(min-width: 420px)', '@media(min-width: 640px)', '@media(min-width: 960px)'];\n    css({\n      color: 'blue',\n      '&:hover': {\n        '& .name': {\n          color: 'amethyst',\n          '&:focus': {\n            color: 'burlywood',\n            [mq[0]]: {\n              color: 'rebeccapurple'\n            }\n          }\n        },\n        color: 'green'\n      }\n    });\n    expect(getStyles(sheet)).toMatchSnapshot();\n  });",
            "file": "source-map/source-map.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "source-map nested media queries",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 28,
                "column": 39,
                "index": 825
            },
            "line": 28,
            "code": "  test('source-map nested media queries', () => {\n    css`\n      @media (max-width: 600px) {\n        h1 {\n          font-size: 1.4rem;\n        }\n      }\n\n      @media (max-width: 400px), (max-height: 420px) {\n        h1 {\n          font-size: 1.1rem;\n        }\n      }\n    `;\n    expect(getStyles(sheet)).toMatchSnapshot();\n  });",
            "file": "source-map/source-map.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "css without newline or semicolon",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 44,
                "column": 40,
                "index": 1156
            },
            "line": 44,
            "code": "  test('css without newline or semicolon', () => {\n    // eslint-disable-next-line\n    const cls = css`\n      color: hotpink;\n    `;\n    expect(getStyles(sheet)).toMatchSnapshot();\n  });",
            "file": "source-map/source-map.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "does not warn when valid values are passed for the content property",
            "suites": [],
            "updatePoint": {
                "line": 12,
                "column": 71,
                "index": 912
            },
            "line": 12,
            "code": "it('does not warn when valid values are passed for the content property', () => {\n  const cls = css(validValues.map(value => ({\n    content: value\n  })));\n  expect(console.error).not.toBeCalled();\n  expect(renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n    className: cls\n  })).toJSON()).toMatchSnapshot();\n});",
            "file": "warnings.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "does warn when invalid values are passed for the content property",
            "suites": [],
            "updatePoint": {
                "line": 22,
                "column": 69,
                "index": 1282
            },
            "line": 22,
            "code": "it('does warn when invalid values are passed for the content property', () => {\n  invalidValues.forEach(value => {\n    expect(() => renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: css({\n        content: value\n      })\n    }))).toThrowError(`You seem to be using a value for 'content' without quotes, try replacing it with \\`content: '\"${value}\"'\\``);\n  });\n});",
            "file": "warnings.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "does warn when functions are passed to css calls",
            "suites": [],
            "updatePoint": {
                "line": 31,
                "column": 52,
                "index": 1654
            },
            "line": 31,
            "code": "it('does warn when functions are passed to css calls', () => {\n  css(() => 'color:hotpink;');\n  expect(console.error).toBeCalledWith(\"Functions that are interpolated in css calls will be stringified.\\nIf you want to have a css call based on props, create a function that returns a css call like this\\nlet dynamicStyle = (props) => css`color: ${props.color}`\\nIt can be called directly with props or interpolated in a styled call like this\\nlet SomeComponent = styled('div')`${dynamicStyle}`\");\n});",
            "file": "warnings.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "does warn when @import rule is being inserted after order-insensitive rules",
            "suites": [],
            "updatePoint": {
                "line": 35,
                "column": 79,
                "index": 2179
            },
            "line": 35,
            "code": "it('does warn when @import rule is being inserted after order-insensitive rules', () => {\n  const {\n    injectGlobal\n  } = createCss({\n    key: 'import-after-regular'\n  });\n  injectGlobal`.thing {display:flex;}`;\n  injectGlobal`@import 'custom.css';`;\n  expect(console.error.mock.calls).toMatchInlineSnapshot(`\n    [\n      [\n        \"You're attempting to insert the following rule:\n    @import 'custom.css';\n\n    \\`@import\\` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that \\`@import\\` rules are before all other rules.\",\n      ],\n    ]\n  `);\n});",
            "file": "warnings.test.js",
            "skipped": false,
            "dir": "packages/css/test"
        },
        {
            "name": "accepts a string and returns a string as a hash",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 51,
                "index": 86
            },
            "line": 2,
            "code": "it('accepts a string and returns a string as a hash', () => {\n  expect(hash('something')).toBe('crsxd7');\n});",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/hash/__tests__"
        },
        {
            "name": "matches styles on the top-most node passed in",
            "suites": [
                "toHaveStyleRule"
            ],
            "updatePoint": {
                "line": 22,
                "column": 51,
                "index": 582
            },
            "line": 22,
            "code": "  it('matches styles on the top-most node passed in', () => {\n    const tree = renderer.create(jsx(\"div\", {\n      css: divStyle\n    }, jsx(\"svg\", {\n      css: svgStyle\n    }))).toJSON();\n    expect(tree).toHaveStyleRule('color', 'red');\n    expect(tree).not.toHaveStyleRule('width', '100%');\n    const svgNode = tree.children[0];\n    expect(svgNode).toHaveStyleRule('width', '100%');\n    expect(svgNode).not.toHaveStyleRule('color', 'red');\n  });",
            "file": "matchers.test.js",
            "skipped": false,
            "dir": "packages/jest/test"
        },
        {
            "name": "supports asymmetric matchers",
            "suites": [
                "toHaveStyleRule"
            ],
            "updatePoint": {
                "line": 34,
                "column": 34,
                "index": 1012
            },
            "line": 34,
            "code": "  it('supports asymmetric matchers', () => {\n    const tree = renderer.create(jsx(\"div\", {\n      css: divStyle\n    }, jsx(\"svg\", {\n      css: svgStyle\n    }))).toJSON();\n    expect(tree).toHaveStyleRule('color', expect.anything());\n    expect(tree).not.toHaveStyleRule('padding', expect.anything());\n    const svgNode = tree.children[0];\n    expect(svgNode).toHaveStyleRule('width', expect.stringMatching(/.*%$/));\n  });",
            "file": "matchers.test.js",
            "skipped": false,
            "dir": "packages/jest/test"
        },
        {
            "name": "fails if no styles are found",
            "suites": [
                "toHaveStyleRule"
            ],
            "updatePoint": {
                "line": 45,
                "column": 34,
                "index": 1433
            },
            "line": 45,
            "code": "  it('fails if no styles are found', () => {\n    const tree = renderer.create(jsx(\"div\", null)).toJSON();\n    const result = toHaveStyleRule(tree, 'color', 'red');\n    expect(result.pass).toBe(false);\n    expect(result.message()).toBe('Property not found: color');\n  });",
            "file": "matchers.test.js",
            "skipped": false,
            "dir": "packages/jest/test"
        },
        {
            "name": "supports regex values",
            "suites": [
                "toHaveStyleRule"
            ],
            "updatePoint": {
                "line": 51,
                "column": 27,
                "index": 1697
            },
            "line": 51,
            "code": "  it('supports regex values', () => {\n    const tree = renderer.create(jsx(\"div\", {\n      css: divStyle\n    })).toJSON();\n    expect(tree).toHaveStyleRule('color', /red/);\n  });",
            "file": "matchers.test.js",
            "skipped": false,
            "dir": "packages/jest/test"
        },
        {
            "name": "returns a message explaining the failure",
            "suites": [
                "toHaveStyleRule"
            ],
            "line": 57,
            "code": "  it.skip('returns a message explaining the failure', () => {",
            "file": "matchers.test.js",
            "skipped": true,
            "dir": "packages/jest/test"
        },
        {
            "name": "matches styles on the focus, hover targets",
            "suites": [
                "toHaveStyleRule"
            ],
            "updatePoint": {
                "line": 68,
                "column": 48,
                "index": 2396
            },
            "line": 68,
            "code": "  it('matches styles on the focus, hover targets', () => {\n    const localDivStyle = css`\n      color: white;\n      &:hover {\n        color: yellow;\n      }\n      &:focus {\n        color: black;\n      }\n    `;\n    const tree = renderer.create(jsx(\"div\", {\n      css: localDivStyle\n    }, jsx(\"svg\", {\n      css: svgStyle\n    }))).toJSON();\n    expect(tree).toHaveStyleRule('color', 'yellow', {\n      target: ':hover'\n    });\n    expect(tree).toHaveStyleRule('color', 'black', {\n      target: ':focus'\n    });\n    expect(tree).toHaveStyleRule('color', 'white');\n  });",
            "file": "matchers.test.js",
            "skipped": false,
            "dir": "packages/jest/test"
        },
        {
            "name": "matches styles on the nested component or html element",
            "suites": [
                "toHaveStyleRule"
            ],
            "updatePoint": {
                "line": 91,
                "column": 60,
                "index": 2975
            },
            "line": 91,
            "code": "  it('matches styles on the nested component or html element', () => {\n    const Svg = styled('svg')`\n      width: 100%;\n      fill: blue;\n    `;\n    const Div = styled('div')`\n      color: red;\n      ${Svg} {\n        fill: green;\n      }\n      span {\n        color: yellow;\n      }\n    `;\n    const tree = renderer.create(jsx(Div, null, jsx(Svg, null), jsx(\"span\", null, \"Test\"))).toJSON();\n    expect(tree).toHaveStyleRule('color', 'yellow', {\n      target: 'span'\n    });\n    expect(tree).toHaveStyleRule('color', 'red');\n    expect(tree).toHaveStyleRule('fill', 'green', {\n      target: `${Svg}`\n    });\n  });",
            "file": "matchers.test.js",
            "skipped": false,
            "dir": "packages/jest/test"
        },
        {
            "name": "matches target styles by regex",
            "suites": [
                "toHaveStyleRule"
            ],
            "updatePoint": {
                "line": 114,
                "column": 36,
                "index": 3565
            },
            "line": 114,
            "code": "  it('matches target styles by regex', () => {\n    const localDivStyle = css`\n      a {\n        color: yellow;\n      }\n      a:hover {\n        color: black;\n      }\n    `;\n    const tree = renderer.create(jsx(\"div\", {\n      css: localDivStyle\n    }, jsx(\"svg\", {\n      css: svgStyle\n    }))).toJSON();\n    expect(tree).toHaveStyleRule('color', 'yellow', {\n      target: /a$/\n    });\n  });",
            "file": "matchers.test.js",
            "skipped": false,
            "dir": "packages/jest/test"
        },
        {
            "name": "matches proper style for css",
            "suites": [
                "toHaveStyleRule"
            ],
            "updatePoint": {
                "line": 132,
                "column": 34,
                "index": 3952
            },
            "line": 132,
            "code": "  it('matches proper style for css', () => {\n    const tree = renderer.create(jsx(\"div\", {\n      css: css`\n            color: green;\n            color: hotpink;\n          `\n    })).toJSON();\n    expect(tree).not.toHaveStyleRule('color', 'green');\n    expect(tree).toHaveStyleRule('color', 'hotpink');\n  });",
            "file": "matchers.test.js",
            "skipped": false,
            "dir": "packages/jest/test"
        },
        {
            "name": "matches style of the media",
            "suites": [
                "toHaveStyleRule"
            ],
            "updatePoint": {
                "line": 142,
                "column": 32,
                "index": 4257
            },
            "line": 142,
            "code": "  it('matches style of the media', () => {\n    const Svg = styled('svg')`\n      width: 100%;\n    `;\n    const Div = styled('div')`\n      font-size: 30px;\n      @media (min-width: 420px) {\n        font-size: 50px;\n      }\n      @media (min-width: 920px) and (max-width: 1200px) {\n        font-size: 70px;\n      }\n      @media screen and (max-width: 1200px) {\n        font-size: 80px;\n      }\n      @media not all and (monochrome) {\n        font-size: 90px;\n      }\n    `;\n    const tree = renderer.create(jsx(Div, null, jsx(Svg, null))).toJSON();\n    expect(tree).toHaveStyleRule('font-size', '30px');\n    expect(tree).toHaveStyleRule('font-size', '50px', {\n      media: '(min-width: 420px)'\n    });\n    expect(tree).toHaveStyleRule('font-size', '70px', {\n      media: '(min-width: 920px) and (max-width: 1200px)'\n    });\n    expect(tree).toHaveStyleRule('font-size', '80px', {\n      media: 'screen and (max-width: 1200px)'\n    });\n    expect(tree).toHaveStyleRule('font-size', '90px', {\n      media: 'not all and (monochrome)'\n    });\n  });",
            "file": "matchers.test.js",
            "skipped": false,
            "dir": "packages/jest/test"
        },
        {
            "name": "matches styles with target and media options",
            "suites": [
                "toHaveStyleRule"
            ],
            "updatePoint": {
                "line": 176,
                "column": 50,
                "index": 5316
            },
            "line": 176,
            "code": "  it('matches styles with target and media options', () => {\n    const localDivStyle = css`\n      color: white;\n      @media (min-width: 420px) {\n        color: green;\n        &:hover {\n          color: yellow;\n        }\n      }\n    `;\n    const tree = renderer.create(jsx(\"div\", {\n      css: localDivStyle\n    }, jsx(\"span\", null, \"Test\"))).toJSON();\n    expect(tree).toHaveStyleRule('color', 'yellow', {\n      target: ':hover',\n      media: '(min-width: 420px)'\n    });\n    expect(tree).toHaveStyleRule('color', 'green', {\n      media: '(min-width: 420px)'\n    });\n    expect(tree).toHaveStyleRule('color', 'white');\n  });",
            "file": "matchers.test.js",
            "skipped": false,
            "dir": "packages/jest/test"
        },
        {
            "name": "fails if option media invalid",
            "suites": [
                "toHaveStyleRule"
            ],
            "updatePoint": {
                "line": 198,
                "column": 35,
                "index": 5926
            },
            "line": 198,
            "code": "  it('fails if option media invalid', () => {\n    const Div = styled('div')`\n      font-size: 30px;\n      @media (min-width: 420px) {\n        font-size: 50px;\n      }\n    `;\n    const tree = renderer.create(jsx(Div, null)).toJSON();\n    const result = toHaveStyleRule(tree, 'font-size', '50px', {\n      media: '(min-width-'\n    });\n    expect(result.pass).toBe(false);\n    expect(result.message()).toBe('Property not found: font-size');\n  });",
            "file": "matchers.test.js",
            "skipped": false,
            "dir": "packages/jest/test"
        },
        {
            "name": "matches styles for a component used as selector",
            "suites": [
                "toHaveStyleRule"
            ],
            "updatePoint": {
                "line": 212,
                "column": 53,
                "index": 6387
            },
            "line": 212,
            "code": "  it('matches styles for a component used as selector', () => {\n    const Bar = styled.div``;\n    const Foo = styled.div`\n      color: red;\n\n      ${Bar} {\n        color: hotpink;\n      }\n    `;\n    const tree = renderer.create(jsx(Foo, null, jsx(Bar, null))).toJSON();\n    expect(tree.children[0]).toHaveStyleRule('color', 'hotpink');\n  });",
            "file": "matchers.test.js",
            "skipped": false,
            "dir": "packages/jest/test"
        },
        {
            "name": "takes specificity into account when matching styles (basic)",
            "suites": [
                "toHaveStyleRule"
            ],
            "updatePoint": {
                "line": 224,
                "column": 65,
                "index": 6741
            },
            "line": 224,
            "code": "  it('takes specificity into account when matching styles (basic)', () => {\n    const Bar = styled.div`\n      color: yellow;\n    `;\n    const Foo = styled.div`\n      color: red;\n\n      ${Bar} {\n        color: hotpink;\n      }\n    `;\n    const tree = renderer.create(jsx(Foo, null, jsx(Bar, null))).toJSON();\n    expect(tree.children[0]).toHaveStyleRule('color', 'hotpink');\n  });",
            "file": "matchers.test.js",
            "skipped": false,
            "dir": "packages/jest/test"
        },
        {
            "name": "should throw a friendly error when it receives an array",
            "suites": [
                "toHaveStyleRule"
            ],
            "updatePoint": {
                "line": 238,
                "column": 61,
                "index": 7117
            },
            "line": 238,
            "code": "  it('should throw a friendly error when it receives an array', () => {\n    const tree = renderer.create(jsx(React.Fragment, null, jsx(\"div\", {\n      css: css`\n              color: hotpink;\n            `\n    }), 'Some text')).toJSON();\n    expect(() => expect(tree).toHaveStyleRule('color', 'hotpink')).toThrowErrorMatchingInlineSnapshot(`\"\\`toHaveStyleRule\\` expects to receive a single element but it received an array.\"`);\n  });",
            "file": "matchers.test.js",
            "skipped": false,
            "dir": "packages/jest/test"
        },
        {
            "name": "supports enzyme `mount` method",
            "suites": [
                "toHaveStyleRule"
            ],
            "updatePoint": {
                "line": 247,
                "column": 38,
                "index": 7585
            },
            "line": 247,
            "code": "    it('supports enzyme `mount` method', () => {\n      const Component = () => jsx(\"div\", {\n        css: divStyle\n      }, jsx(\"svg\", {\n        css: svgStyle\n      }));\n\n      const wrapper = enzyme.mount(jsx(Component, null));\n      expect(wrapper).toHaveStyleRule('color', 'red');\n      expect(wrapper).not.toHaveStyleRule('width', '100%');\n      const svgNode = wrapper.find('svg');\n      expect(svgNode).toHaveStyleRule('width', '100%');\n      expect(svgNode).not.toHaveStyleRule('color', 'red');\n    });",
            "file": "matchers.test.js",
            "skipped": false,
            "dir": "packages/jest/test"
        },
        {
            "name": "supports enzyme `render` method",
            "suites": [
                "toHaveStyleRule"
            ],
            "updatePoint": {
                "line": 261,
                "column": 39,
                "index": 8095
            },
            "line": 261,
            "code": "    it('supports enzyme `render` method', () => {\n      const Component = () => jsx(\"div\", {\n        css: divStyle\n      }, jsx(\"svg\", {\n        css: svgStyle\n      }));\n\n      const wrapper = enzyme.render(jsx(Component, null));\n      expect(wrapper).toHaveStyleRule('color', 'red');\n      expect(wrapper).not.toHaveStyleRule('width', '100%');\n      const svgNode = wrapper.find('svg');\n      expect(svgNode).toHaveStyleRule('width', '100%');\n      expect(svgNode).not.toHaveStyleRule('color', 'red');\n    });",
            "file": "matchers.test.js",
            "skipped": false,
            "dir": "packages/jest/test"
        },
        {
            "name": "supports enzyme `shallow` method",
            "suites": [
                "toHaveStyleRule"
            ],
            "updatePoint": {
                "line": 275,
                "column": 40,
                "index": 8607
            },
            "line": 275,
            "code": "    it('supports enzyme `shallow` method', () => {\n      const Component = () => jsx(\"div\", {\n        css: divStyle\n      }, jsx(\"svg\", {\n        css: svgStyle\n      }));\n\n      const wrapper = enzyme.shallow(jsx(Component, null));\n      expect(wrapper).toHaveStyleRule('color', 'red');\n      expect(wrapper).not.toHaveStyleRule('width', '100%');\n      const svgNode = wrapper.childAt(0);\n      expect(svgNode).toHaveStyleRule('width', '100%');\n      expect(svgNode).not.toHaveStyleRule('color', 'red');\n    });",
            "file": "matchers.test.js",
            "skipped": false,
            "dir": "packages/jest/test"
        },
        {
            "name": "supports styled components",
            "suites": [
                "toHaveStyleRule"
            ],
            "updatePoint": {
                "line": 289,
                "column": 34,
                "index": 9113
            },
            "line": 289,
            "code": "    it('supports styled components', () => {\n      const Div = styled('div')`\n        color: red;\n      `;\n      const Svg = styled('svg')`\n        width: 100%;\n      `;\n      ['mount', 'render', 'shallow'].forEach(method => {\n        const wrapper = enzyme[method](jsx(Div, null, jsx(Svg, null)));\n        expect(wrapper).toHaveStyleRule('color', 'red');\n        expect(wrapper).not.toHaveStyleRule('width', '100%');\n        const svgNode = method === 'render' ? wrapper.find('svg') : wrapper.find(Svg);\n        expect(svgNode).toHaveStyleRule('width', '100%');\n        expect(svgNode).not.toHaveStyleRule('color', 'red');\n      });\n    });",
            "file": "matchers.test.js",
            "skipped": false,
            "dir": "packages/jest/test"
        },
        {
            "name": "replaces class names and inserts styles into React test component snapshots",
            "suites": [
                "jest-emotion with dom elements"
            ],
            "updatePoint": {
                "line": 25,
                "column": 81,
                "index": 760
            },
            "line": 25,
            "code": "  it('replaces class names and inserts styles into React test component snapshots', () => {\n    const tree = renderer.create(jsx(\"div\", {\n      css: divStyle\n    }, jsx(\"svg\", {\n      css: svgStyle\n    }))).toJSON();\n    const output = prettyFormat(tree, {\n      plugins: [emotionPlugin, ReactElement, ReactTestComponent, DOMElement]\n    });\n    expect(output).toMatchSnapshot();\n  });",
            "file": "printer.test.js",
            "skipped": false,
            "dir": "packages/jest/test"
        },
        {
            "name": "replaces class names and inserts styles into DOM element snapshots",
            "suites": [
                "jest-emotion with dom elements"
            ],
            "updatePoint": {
                "line": 36,
                "column": 72,
                "index": 1137
            },
            "line": 36,
            "code": "  it('replaces class names and inserts styles into DOM element snapshots', () => {\n    const divRef = /*#__PURE__*/React.createRef();\n    render(jsx(\"div\", {\n      css: divStyle,\n      ref: divRef\n    }, jsx(\"svg\", {\n      css: svgStyle\n    })));\n    const output = prettyFormat(divRef.current, {\n      plugins: [emotionPlugin, ReactElement, ReactTestComponent, DOMElement]\n    });\n    expect(output).toMatchSnapshot();\n  });",
            "file": "printer.test.js",
            "skipped": false,
            "dir": "packages/jest/test"
        },
        {
            "name": "replaces class names and inserts styles into React test component snapshots",
            "suites": [
                "jest-emotion with DOM elements disabled"
            ],
            "updatePoint": {
                "line": 60,
                "column": 81,
                "index": 1799
            },
            "line": 60,
            "code": "  it('replaces class names and inserts styles into React test component snapshots', () => {\n    const tree = renderer.create(jsx(\"div\", {\n      css: divStyle\n    }, jsx(\"svg\", {\n      css: svgStyle\n    }))).toJSON();\n    const output = prettyFormat(tree, {\n      plugins: [emotionPlugin, ReactElement, ReactTestComponent, DOMElement]\n    });\n    expect(output).toMatchSnapshot();\n  });",
            "file": "printer.test.js",
            "skipped": false,
            "dir": "packages/jest/test"
        },
        {
            "name": "does not replace class names or insert styles into DOM element snapshots",
            "suites": [
                "jest-emotion with DOM elements disabled"
            ],
            "updatePoint": {
                "line": 71,
                "column": 78,
                "index": 2182
            },
            "line": 71,
            "code": "  it('does not replace class names or insert styles into DOM element snapshots', () => {\n    const divRef = /*#__PURE__*/React.createRef();\n    render(jsx(\"div\", {\n      css: divStyle,\n      ref: divRef\n    }, jsx(\"svg\", {\n      css: svgStyle\n    })));\n    const output = prettyFormat(divRef.current, {\n      plugins: [emotionPlugin, ReactElement, ReactTestComponent, DOMElement]\n    });\n    expect(output).toMatchSnapshot();\n  });",
            "file": "printer.test.js",
            "skipped": false,
            "dir": "packages/jest/test"
        },
        {
            "name": "allows to opt-out from styles printing",
            "suites": [
                "jest-emotion with DOM elements disabled"
            ],
            "updatePoint": {
                "line": 85,
                "column": 44,
                "index": 2584
            },
            "line": 85,
            "code": "test('allows to opt-out from styles printing', () => {\n  const emotionPlugin = createSerializer({\n    includeStyles: false\n  });\n  const divStyle = css`\n    color: red;\n  `;\n  const svgStyle = css`\n    width: 100%;\n  `;\n  const divRef = /*#__PURE__*/React.createRef();\n  render(jsx(\"div\", {\n    css: divStyle,\n    ref: divRef\n  }, jsx(\"svg\", {\n    css: svgStyle\n  })));\n  const output = prettyFormat(divRef.current, {\n    plugins: [emotionPlugin, ReactElement, ReactTestComponent, DOMElement]\n  });\n  expect(output).toMatchSnapshot();\n});",
            "file": "printer.test.js",
            "skipped": false,
            "dir": "packages/jest/test"
        },
        {
            "name": "does not replace class names that are not from emotion",
            "suites": [
                "jest-emotion with DOM elements disabled"
            ],
            "updatePoint": {
                "line": 107,
                "column": 60,
                "index": 3139
            },
            "line": 107,
            "code": "test('does not replace class names that are not from emotion', () => {\n  let tree = renderer.create(jsx(\"div\", {\n    className: \"net-42 net\",\n    css: css`\n          color: darkorchid;\n        `\n  })).toJSON();\n  const output = prettyFormat(tree, {\n    plugins: [emotionPlugin, ReactElement, ReactTestComponent, DOMElement]\n  });\n  expect(output).toMatchSnapshot();\n});",
            "file": "printer.test.js",
            "skipped": false,
            "dir": "packages/jest/test"
        },
        {
            "name": "replaces class names and inserts styles into React test component snapshots",
            "suites": [
                "jest-emotion with nested selectors"
            ],
            "updatePoint": {
                "line": 127,
                "column": 81,
                "index": 3671
            },
            "line": 127,
            "code": "  it('replaces class names and inserts styles into React test component snapshots', () => {\n    const tree = renderer.create(jsx(\"div\", {\n      css: divStyle\n    })).toJSON();\n    const output = prettyFormat(tree, {\n      plugins: [emotionPlugin, ReactElement, ReactTestComponent, DOMElement]\n    });\n    expect(output).toBe(`.emotion-0 {\n  color: blue;\n}\n\nheader .emotion-0 {\n  color: red;\n}\n\n<div\n  className=\"emotion-0\"\n/>`);\n  });",
            "file": "printer.test.js",
            "skipped": false,
            "dir": "packages/jest/test"
        },
        {
            "name": "prints speedy styles",
            "suites": [
                "jest-emotion with nested selectors"
            ],
            "updatePoint": {
                "line": 147,
                "column": 26,
                "index": 4055
            },
            "line": 147,
            "code": "test('prints speedy styles', () => {\n  const speedyCache = createCache({\n    key: 'speedy-key',\n    speedy: true\n  });\n  const tree = renderer.create(jsx(CacheProvider, {\n    value: speedyCache\n  }, jsx(\"div\", {\n    css: css`\n            color: hotpink;\n          `\n  }))).toJSON();\n  expect(prettyFormat(tree, {\n    plugins: [emotionPlugin, ReactElement, ReactTestComponent, DOMElement]\n  })).toMatchSnapshot();\n});",
            "file": "printer.test.js",
            "skipped": false,
            "dir": "packages/jest/test"
        },
        {
            "name": "with prop containing css element in fragment",
            "suites": [],
            "updatePoint": {
                "line": 406,
                "column": 52,
                "index": 8612
            },
            "line": 406,
            "code": "  test('with prop containing css element in fragment', () => {\n    const FragmentComponent = () => jsx(React.Fragment, null, \"x\", jsx(\"div\", {\n      css: {\n        backgroundColor: 'blue'\n      }\n    }, \"y\"));\n\n    const wrapper = enzyme.mount(jsx(\"div\", null, jsx(FragmentComponent, null)));\n    expect(toJson(wrapper, {\n      mode: 'deep'\n    })).toMatchSnapshot();\n  });",
            "file": "react-enzyme.test.js",
            "skipped": false,
            "dir": "packages/jest/test"
        },
        {
            "name": "toHaveStyleRule on react.element",
            "suites": [],
            "updatePoint": {
                "line": 418,
                "column": 40,
                "index": 8974
            },
            "line": 418,
            "code": "  test('toHaveStyleRule on react.element', () => {\n    const tree = enzyme.mount(jsx(\"ul\", null, jsx(\"li\", {\n      css: {\n        backgroundColor: 'hotpink'\n      }\n    }, \"hello\")));\n    expect(tree.find('li').get(0)).toHaveStyleRule('background-color', 'hotpink');\n  });",
            "file": "react-enzyme.test.js",
            "skipped": false,
            "dir": "packages/jest/test"
        },
        {
            "name": "basic",
            "suites": [
                "Emotion native css"
            ],
            "updatePoint": {
                "line": 8,
                "column": 13,
                "index": 205
            },
            "line": 8,
            "code": "  test('basic', () => {\n    expect(StyleSheet.flatten(css`\n        color: hotpink;\n        ${{\n      backgroundColor: 'green'\n    }};\n      `)).toEqual({\n      color: 'hotpink',\n      backgroundColor: 'green'\n    });\n    expect(StyleSheet.flatten(css({\n      color: 'green'\n    }))).toEqual({\n      color: 'green'\n    });\n    expect(StyleSheet.flatten(css([{\n      color: 'green'\n    }, `background-color:yellow;`]))).toEqual({\n      color: 'green',\n      backgroundColor: 'yellow'\n    });\n    expect(StyleSheet.flatten(css([{\n      color: 'green'\n    }]))).toEqual({\n      color: 'green'\n    });\n  });",
            "file": "native-css.test.js",
            "skipped": false,
            "dir": "packages/native/test"
        },
        {
            "name": "order with string and object",
            "suites": [
                "Emotion native css"
            ],
            "updatePoint": {
                "line": 35,
                "column": 36,
                "index": 831
            },
            "line": 35,
            "code": "  test('order with string and object', () => {\n    // this test checks the keys instead of the objects\n    // because we care about the order of the keys\n    expect( // $FlowFixMe\n    Object.keys(StyleSheet.flatten(css({\n      color: 'green'\n    }, `background-color:yellow;`, {\n      flex: 2\n    })))).toEqual(['color', 'backgroundColor', 'flex']);\n    expect( // $FlowFixMe\n    Object.keys(StyleSheet.flatten(css([[{\n      color: 'green'\n    }, `background-color:yellow;`], {\n      flex: 2\n    }])))).toEqual(['color', 'backgroundColor', 'flex']);\n    expect( // $FlowFixMe\n    Object.keys(StyleSheet.flatten(css([{\n      color: 'green'\n    }, [`background-color:yellow;`, {\n      flex: 2\n    }]])))).toEqual(['color', 'backgroundColor', 'flex']);\n    expect( // $FlowFixMe\n    Object.keys(StyleSheet.flatten(css([{\n      color: 'green'\n    }, [{\n      flex: 8\n    }, `background-color:yellow;`, [`flex-grow: 1;`, {\n      flexDirection: 'row'\n    }]]])))).toEqual(['color', 'flex', 'backgroundColor', 'flexGrow', 'flexDirection']);\n  });",
            "file": "native-css.test.js",
            "skipped": false,
            "dir": "packages/native/test"
        },
        {
            "name": "allows function interpolations when this.mergedProps is defined",
            "suites": [
                "Emotion native css"
            ],
            "updatePoint": {
                "line": 65,
                "column": 69,
                "index": 1904
            },
            "line": 65,
            "code": "  it('allows function interpolations when this.mergedProps is defined', () => {\n    expect(StyleSheet.flatten(css.call({\n      thing: true\n    }, props => ({\n      color: props.thing && 'hotpink'\n    })))).toEqual({\n      color: 'hotpink'\n    });\n  });",
            "file": "native-css.test.js",
            "skipped": false,
            "dir": "packages/native/test"
        },
        {
            "name": "works with nested functions",
            "suites": [
                "Emotion native css"
            ],
            "updatePoint": {
                "line": 74,
                "column": 33,
                "index": 2121
            },
            "line": 74,
            "code": "  it('works with nested functions', () => {\n    expect(StyleSheet.flatten(css.call({\n      thing: true\n    }, props => () => ({\n      color: props.thing && 'hotpink'\n    })))).toEqual({\n      color: 'hotpink'\n    });\n  });",
            "file": "native-css.test.js",
            "skipped": false,
            "dir": "packages/native/test"
        },
        {
            "name": "works with functions in tagged template literals",
            "suites": [
                "Emotion native css"
            ],
            "updatePoint": {
                "line": 83,
                "column": 54,
                "index": 2365
            },
            "line": 83,
            "code": "  it('works with functions in tagged template literals', () => {\n    expect(StyleSheet.flatten(css.call({}, ...returnArguments`\n        color: ${() => 'hotpink'};\n      `))).toEqual({\n      color: 'hotpink'\n    });\n  });",
            "file": "native-css.test.js",
            "skipped": false,
            "dir": "packages/native/test"
        },
        {
            "name": "last arg falsy and string before that",
            "suites": [
                "Emotion native css"
            ],
            "updatePoint": {
                "line": 90,
                "column": 45,
                "index": 2577
            },
            "line": 90,
            "code": "  test('last arg falsy and string before that', () => {\n    expect(StyleSheet.flatten(css('color:hotpink;', false))).toEqual({\n      color: 'hotpink'\n    });\n  });",
            "file": "native-css.test.js",
            "skipped": false,
            "dir": "packages/native/test"
        },
        {
            "name": "falsy value in the middle",
            "suites": [
                "Emotion native css"
            ],
            "updatePoint": {
                "line": 95,
                "column": 33,
                "index": 2729
            },
            "line": 95,
            "code": "  test('falsy value in the middle', () => {\n    expect(StyleSheet.flatten(css`\n        color: ${false};\n        background-color: hotpink;\n      `)).toEqual({\n      backgroundColor: 'hotpink'\n    });\n  });",
            "file": "native-css.test.js",
            "skipped": false,
            "dir": "packages/native/test"
        },
        {
            "name": "composition",
            "suites": [
                "Emotion native css"
            ],
            "updatePoint": {
                "line": 103,
                "column": 19,
                "index": 2921
            },
            "line": 103,
            "code": "  test('composition', () => {\n    let firstStyle = css`\n      color: hotpink;\n    `;\n    expect(StyleSheet.flatten(css`\n        background-color: green;\n        ${firstStyle};\n      `)).toEqual({\n      backgroundColor: 'green',\n      color: 'hotpink'\n    });\n  });",
            "file": "native-css.test.js",
            "skipped": false,
            "dir": "packages/native/test"
        },
        {
            "name": "skip comments",
            "suites": [
                "Emotion native css"
            ],
            "updatePoint": {
                "line": 115,
                "column": 21,
                "index": 3188
            },
            "line": 115,
            "code": "  test('skip comments', () => {\n    let styles = css`\n      color: hotpink;\n      /*\n        padding: 10px;\n      */\n    `;\n    let anotherStyles = css`\n      font-size: 10px;\n      // color: red;\n    `;\n    expect(StyleSheet.flatten(styles)).toEqual({\n      color: 'hotpink'\n    });\n    expect(StyleSheet.flatten(anotherStyles)).toEqual({\n      fontSize: 10\n    });\n  });",
            "file": "native-css.test.js",
            "skipped": false,
            "dir": "packages/native/test"
        },
        {
            "name": "should not throw an error when used valid primitive",
            "suites": [
                "Emotion native styled"
            ],
            "updatePoint": {
                "line": 14,
                "column": 59,
                "index": 477
            },
            "line": 14,
            "code": "  test('should not throw an error when used valid primitive', () => {\n    expect(() => styled.Text({})).not.toThrow();\n  });",
            "file": "native-styled.test.js",
            "skipped": false,
            "dir": "packages/native/test"
        },
        {
            "name": "should throw an error when used invalid primitive",
            "suites": [
                "Emotion native styled"
            ],
            "updatePoint": {
                "line": 17,
                "column": 57,
                "index": 600
            },
            "line": 17,
            "code": "  test('should throw an error when used invalid primitive', () => {\n    expect(() => styled.TEXT({})).toThrow();\n  });",
            "file": "native-styled.test.js",
            "skipped": false,
            "dir": "packages/native/test"
        },
        {
            "name": "should render the primitive when styles applied using object style notation",
            "suites": [
                "Emotion native styled"
            ],
            "updatePoint": {
                "line": 20,
                "column": 83,
                "index": 745
            },
            "line": 20,
            "code": "  test('should render the primitive when styles applied using object style notation', () => {\n    const Text = styled.Text`\n      color: red;\n      font-size: 20px;\n      background-color: ${props => props.back};\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(Text, {\n      style: {\n        fontSize: 40\n      },\n      back: \"red\"\n    }, \"Emotion Primitives\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "native-styled.test.js",
            "skipped": false,
            "dir": "packages/native/test"
        },
        {
            "name": "should work with theming from @emotion/react",
            "suites": [
                "Emotion native styled"
            ],
            "updatePoint": {
                "line": 34,
                "column": 50,
                "index": 1152
            },
            "line": 34,
            "code": "  it('should work with theming from @emotion/react', () => {\n    const Text = styled.Text`\n      color: ${props => props.theme.backgroundColor};\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: theme\n    }, /*#__PURE__*/React.createElement(Text, null, \"Hello World\"))).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "native-styled.test.js",
            "skipped": false,
            "dir": "packages/native/test"
        },
        {
            "name": "should render the primitive on changing the props",
            "suites": [
                "Emotion native styled"
            ],
            "updatePoint": {
                "line": 43,
                "column": 57,
                "index": 1535
            },
            "line": 43,
            "code": "  test('should render the primitive on changing the props', () => {\n    const Text = styled.Text({\n      padding: '20px'\n    }, props => ({\n      color: props.decor\n    }));\n    const tree = renderer.create( /*#__PURE__*/React.createElement(Text, {\n      decor: \"hotpink\"\n    }, \"Emotion Primitives\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "native-styled.test.js",
            "skipped": false,
            "dir": "packages/native/test"
        },
        {
            "name": "should render primitive with style prop",
            "suites": [
                "Emotion native styled"
            ],
            "updatePoint": {
                "line": 54,
                "column": 47,
                "index": 1879
            },
            "line": 54,
            "code": "  test('should render primitive with style prop', () => {\n    const Title = styled.Text`\n      color: hotpink;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(Title, {\n      style: {\n        padding: 10\n      }\n    }, \"Emotion primitives\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "native-styled.test.js",
            "skipped": false,
            "dir": "packages/native/test"
        },
        {
            "name": "should work with StyleSheet.create API",
            "suites": [
                "Emotion native styled"
            ],
            "updatePoint": {
                "line": 65,
                "column": 44,
                "index": 2195
            },
            "line": 65,
            "code": "  it('should work with StyleSheet.create API', () => {\n    const styles = StyleSheet.create({\n      foo: {\n        color: 'red'\n      }\n    });\n    const Text = styled.Text`\n      font-size: 10px;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(Text, {\n      style: styles.foo\n    }, \"Emotion primitives\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "native-styled.test.js",
            "skipped": false,
            "dir": "packages/native/test"
        },
        {
            "name": "primitive should work with `withComponent`",
            "suites": [
                "Emotion native styled"
            ],
            "updatePoint": {
                "line": 79,
                "column": 50,
                "index": 2586
            },
            "line": 79,
            "code": "  test('primitive should work with `withComponent`', () => {\n    const Text = styled.Text`\n      color: ${props => props.decor};\n    `;\n    const Name = Text.withComponent(reactNative.Text);\n    const tree = renderer.create( /*#__PURE__*/React.createElement(Name, {\n      decor: \"hotpink\"\n    }, \"Mike\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "native-styled.test.js",
            "skipped": false,
            "dir": "packages/native/test"
        },
        {
            "name": "should style any other component",
            "suites": [
                "Emotion native styled"
            ],
            "updatePoint": {
                "line": 89,
                "column": 38,
                "index": 2931
            },
            "line": 89,
            "code": "  it('should style any other component', () => {\n    const Text = styled.Text`\n      color: hotpink;\n    `;\n\n    const Title = () => /*#__PURE__*/React.createElement(Text, null, \"Hello World\");\n\n    const StyledTitle = styled(Title)`\n      font-size: 20px;\n      font-style: ${props => props.sty};\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(StyledTitle, {\n      sty: \"italic\"\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "native-styled.test.js",
            "skipped": false,
            "dir": "packages/native/test"
        },
        {
            "name": "should pass props in withComponent",
            "suites": [
                "Emotion native styled"
            ],
            "updatePoint": {
                "line": 105,
                "column": 40,
                "index": 3400
            },
            "line": 105,
            "code": "  it('should pass props in withComponent', () => {\n    const ViewOne = styled.View`\n      background-color: ${props => props.color};\n    `;\n    const treeOne = renderer.create( /*#__PURE__*/React.createElement(ViewOne, {\n      color: \"green\"\n    }));\n    const ViewTwo = ViewOne.withComponent(reactNative.Text);\n    const treeTwo = renderer.create( /*#__PURE__*/React.createElement(ViewTwo, {\n      color: \"hotpink\"\n    }));\n    expect(treeOne).toMatchSnapshot();\n    expect(treeTwo).toMatchSnapshot();\n  });",
            "file": "native-styled.test.js",
            "skipped": false,
            "dir": "packages/native/test"
        },
        {
            "name": "should render <Image />",
            "suites": [
                "Emotion native styled"
            ],
            "updatePoint": {
                "line": 119,
                "column": 29,
                "index": 3898
            },
            "line": 119,
            "code": "  it('should render <Image />', () => {\n    const Image = styled.Image`\n      border-radius: 2px;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(Image, {\n      source: {\n        uri: 'https://camo.githubusercontent.com/209bdea972b9b6ef90220c59ecbe66d35ffefa8a/68747470733a2f2f63646e2e7261776769742e636f6d2f746b6834342f656d6f74696f6e2f6d61737465722f656d6f74696f6e2e706e67',\n        height: 150,\n        width: 150\n      }\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "native-styled.test.js",
            "skipped": false,
            "dir": "packages/native/test"
        },
        {
            "name": "Log error message if units are not specified when using shorthand properties",
            "suites": [
                "Emotion native styled"
            ],
            "updatePoint": {
                "line": 132,
                "column": 82,
                "index": 4459
            },
            "line": 132,
            "code": "  it('Log error message if units are not specified when using shorthand properties', () => {\n    const Text = styled.Text`\n      margin: 20px;\n      padding: 20;\n    `;\n    renderer.create( /*#__PURE__*/React.createElement(Text, null, \"Hello World\"));\n    expect(console.error).toBeCalledWith(\"'padding' shorthand property requires units for example - padding: 20px or padding: 10px 20px 40px 50px\");\n  });",
            "file": "native-styled.test.js",
            "skipped": false,
            "dir": "packages/native/test"
        },
        {
            "name": "should render styles correctly from all nested style factories",
            "suites": [
                "Emotion native styled"
            ],
            "updatePoint": {
                "line": 140,
                "column": 68,
                "index": 4852
            },
            "line": 140,
            "code": "  it('should render styles correctly from all nested style factories', () => {\n    const bgColor = color => css`\n      background-color: ${color};\n    `;\n\n    const Text = styled.Text`\n      color: hotpink;\n      ${({\n      backgroundColor\n    }) => bgColor(backgroundColor)};\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(Text, {\n      backgroundColor: \"blue\"\n    }, \"Hello World\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "native-styled.test.js",
            "skipped": false,
            "dir": "packages/native/test"
        },
        {
            "name": "basic",
            "suites": [],
            "updatePoint": {
                "line": 6,
                "column": 11,
                "index": 141
            },
            "line": 6,
            "code": "test('basic', () => {\n  expect(StyleSheet.flatten(css`\n      color: hotpink;\n      ${{\n    backgroundColor: 'green'\n  }};\n    `)).toEqual({\n    color: 'hotpink',\n    backgroundColor: 'green'\n  });\n  expect(StyleSheet.flatten(css({\n    color: 'green'\n  }))).toEqual({\n    color: 'green'\n  });\n  expect(StyleSheet.flatten(css([{\n    color: 'green'\n  }, `background-color:yellow;`]))).toEqual({\n    color: 'green',\n    backgroundColor: 'yellow'\n  });\n  expect(StyleSheet.flatten(css([{\n    color: 'green'\n  }]))).toEqual({\n    color: 'green'\n  });\n});",
            "file": "css.test.js",
            "skipped": false,
            "dir": "packages/primitives/test"
        },
        {
            "name": "order with string and object",
            "suites": [],
            "updatePoint": {
                "line": 33,
                "column": 34,
                "index": 713
            },
            "line": 33,
            "code": "test('order with string and object', () => {\n  // this test checks the keys instead of the objects\n  // because we care about the order of the keys\n  expect( // $FlowFixMe\n  Object.keys(StyleSheet.flatten(css({\n    color: 'green'\n  }, `background-color:yellow;`, {\n    flex: 2\n  })))).toEqual(['color', 'backgroundColor', 'flex']);\n  expect( // $FlowFixMe\n  Object.keys(StyleSheet.flatten(css([[{\n    color: 'green'\n  }, `background-color:yellow;`], {\n    flex: 2\n  }])))).toEqual(['color', 'backgroundColor', 'flex']);\n  expect( // $FlowFixMe\n  Object.keys(StyleSheet.flatten(css([{\n    color: 'green'\n  }, [`background-color:yellow;`, {\n    flex: 2\n  }]])))).toEqual(['color', 'backgroundColor', 'flex']);\n  expect( // $FlowFixMe\n  Object.keys(StyleSheet.flatten(css([{\n    color: 'green'\n  }, [{\n    flex: 8\n  }, `background-color:yellow;`, [`flex-grow: 1;`, {\n    flexDirection: 'row'\n  }]]])))).toEqual(['color', 'flex', 'backgroundColor', 'flexGrow', 'flexDirection']);\n});",
            "file": "css.test.js",
            "skipped": false,
            "dir": "packages/primitives/test"
        },
        {
            "name": "allows function interpolations when this is defined",
            "suites": [],
            "updatePoint": {
                "line": 63,
                "column": 55,
                "index": 1714
            },
            "line": 63,
            "code": "it('allows function interpolations when this is defined', () => {\n  expect(StyleSheet.flatten(css.call({\n    thing: true\n  }, props => ({\n    color: props.thing && 'hotpink'\n  })))).toEqual({\n    color: 'hotpink'\n  });\n});",
            "file": "css.test.js",
            "skipped": false,
            "dir": "packages/primitives/test"
        },
        {
            "name": "works with nested functions",
            "suites": [],
            "updatePoint": {
                "line": 72,
                "column": 31,
                "index": 1913
            },
            "line": 72,
            "code": "it('works with nested functions', () => {\n  expect(StyleSheet.flatten(css.call({\n    thing: true\n  }, props => () => ({\n    color: props.thing && 'hotpink'\n  })))).toEqual({\n    color: 'hotpink'\n  });\n});",
            "file": "css.test.js",
            "skipped": false,
            "dir": "packages/primitives/test"
        },
        {
            "name": "works with functions in tagged template literals",
            "suites": [],
            "updatePoint": {
                "line": 81,
                "column": 52,
                "index": 2139
            },
            "line": 81,
            "code": "it('works with functions in tagged template literals', () => {\n  expect(StyleSheet.flatten(css.call({}, ...returnArguments`\n        color: ${() => 'hotpink'};\n      `))).toEqual({\n    color: 'hotpink'\n  });\n});",
            "file": "css.test.js",
            "skipped": false,
            "dir": "packages/primitives/test"
        },
        {
            "name": "last arg falsy and string before that",
            "suites": [],
            "updatePoint": {
                "line": 88,
                "column": 43,
                "index": 2341
            },
            "line": 88,
            "code": "test('last arg falsy and string before that', () => {\n  expect(StyleSheet.flatten(css('color:hotpink;', false))).toEqual({\n    color: 'hotpink'\n  });\n});",
            "file": "css.test.js",
            "skipped": false,
            "dir": "packages/primitives/test"
        },
        {
            "name": "falsy value in the middle",
            "suites": [],
            "updatePoint": {
                "line": 93,
                "column": 31,
                "index": 2483
            },
            "line": 93,
            "code": "test('falsy value in the middle', () => {\n  expect(StyleSheet.flatten(css`\n      color: ${false};\n      background-color: hotpink;\n    `)).toEqual({\n    backgroundColor: 'hotpink'\n  });\n});",
            "file": "css.test.js",
            "skipped": false,
            "dir": "packages/primitives/test"
        },
        {
            "name": "composition",
            "suites": [],
            "updatePoint": {
                "line": 101,
                "column": 17,
                "index": 2659
            },
            "line": 101,
            "code": "test('composition', () => {\n  let firstStyle = css`\n    color: hotpink;\n  `;\n  expect(StyleSheet.flatten(css`\n      background-color: green;\n      ${firstStyle};\n    `)).toEqual({\n    backgroundColor: 'green',\n    color: 'hotpink'\n  });\n});",
            "file": "css.test.js",
            "skipped": false,
            "dir": "packages/primitives/test"
        },
        {
            "name": "should not throw an error when used valid primitive",
            "suites": [
                "Emotion primitives"
            ],
            "updatePoint": {
                "line": 13,
                "column": 59,
                "index": 465
            },
            "line": 13,
            "code": "  test('should not throw an error when used valid primitive', () => {\n    expect(() => styled.Text({})).not.toThrow();\n  });",
            "file": "emotion-primitives.test.js",
            "skipped": false,
            "dir": "packages/primitives/test"
        },
        {
            "name": "should throw an error when used invalid primitive",
            "suites": [
                "Emotion primitives"
            ],
            "updatePoint": {
                "line": 16,
                "column": 57,
                "index": 588
            },
            "line": 16,
            "code": "  test('should throw an error when used invalid primitive', () => {\n    // $FlowFixMe: expect error\n    expect(() => styled.TEXT({})).toThrow();\n  });",
            "file": "emotion-primitives.test.js",
            "skipped": false,
            "dir": "packages/primitives/test"
        },
        {
            "name": "should render the primitive when styles applied using object style notation",
            "suites": [
                "Emotion primitives"
            ],
            "updatePoint": {
                "line": 20,
                "column": 83,
                "index": 765
            },
            "line": 20,
            "code": "  test('should render the primitive when styles applied using object style notation', () => {\n    const Text = styled.Text`\n      color: red;\n      font-size: 20px;\n      background-color: ${props => props.back};\n    `;\n    const tree = renderer.create(\n    /*#__PURE__*/\n    // $FlowFixMe\n    React.createElement(Text, {\n      style: {\n        fontSize: 40\n      },\n      back: \"red\"\n    }, \"Emotion Primitives\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "emotion-primitives.test.js",
            "skipped": false,
            "dir": "packages/primitives/test"
        },
        {
            "name": "should work with theming from @emotion/react",
            "suites": [
                "Emotion primitives"
            ],
            "updatePoint": {
                "line": 37,
                "column": 50,
                "index": 1199
            },
            "line": 37,
            "code": "  it('should work with theming from @emotion/react', () => {\n    const Text = styled.Text`\n      color: ${props => props.theme.backgroundColor};\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: theme\n    }, /*#__PURE__*/React.createElement(Text, null, \"Hello World\"))).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "emotion-primitives.test.js",
            "skipped": false,
            "dir": "packages/primitives/test"
        },
        {
            "name": "should unmount with theming",
            "suites": [
                "Emotion primitives"
            ],
            "updatePoint": {
                "line": 46,
                "column": 33,
                "index": 1558
            },
            "line": 46,
            "code": "  it('should unmount with theming', () => {\n    const StyledText = styled.Text`\n      display: ${props => props.theme.display};\n    `;\n    const {\n      container,\n      unmount\n    } = render( /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: theme\n    }, /*#__PURE__*/React.createElement(StyledText, {\n      id: \"something\",\n      style: {\n        backgroundColor: 'yellow'\n      }\n    }, \"Hello World\")));\n    expect(container).toMatchSnapshot();\n    unmount();\n    expect(container.querySelector('#something')).toBe(null);\n  });",
            "file": "emotion-primitives.test.js",
            "skipped": false,
            "dir": "packages/primitives/test"
        },
        {
            "name": "should render the primitive on changing the props",
            "suites": [
                "Emotion primitives"
            ],
            "updatePoint": {
                "line": 65,
                "column": 57,
                "index": 2128
            },
            "line": 65,
            "code": "  test('should render the primitive on changing the props', () => {\n    const Text = styled.Text({\n      padding: '20px'\n    }, props => ({\n      color: props.decor\n    }));\n    const tree = renderer // $FlowFixMe\n    .create( /*#__PURE__*/React.createElement(Text, {\n      decor: \"hotpink\"\n    }, \"Emotion Primitives\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "emotion-primitives.test.js",
            "skipped": false,
            "dir": "packages/primitives/test"
        },
        {
            "name": "should render primitive with style prop",
            "suites": [
                "Emotion primitives"
            ],
            "updatePoint": {
                "line": 77,
                "column": 47,
                "index": 2491
            },
            "line": 77,
            "code": "  test('should render primitive with style prop', () => {\n    const Title = styled.Text`\n      color: hotpink;\n    `;\n    const tree = renderer.create(\n    /*#__PURE__*/\n    // $FlowFixMe\n    React.createElement(Title, {\n      style: {\n        padding: 10\n      }\n    }, \"Emotion primitives\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "emotion-primitives.test.js",
            "skipped": false,
            "dir": "packages/primitives/test"
        },
        {
            "name": "should work with StyleSheet.create API",
            "suites": [
                "Emotion primitives"
            ],
            "updatePoint": {
                "line": 91,
                "column": 44,
                "index": 2834
            },
            "line": 91,
            "code": "  it('should work with StyleSheet.create API', () => {\n    const styles = StyleSheet.create({\n      foo: {\n        color: 'red'\n      }\n    });\n    const Text = styled.Text`\n      font-size: 10px;\n    `;\n    const tree = renderer // $FlowFixMe\n    .create( /*#__PURE__*/React.createElement(Text, {\n      style: styles.foo\n    }, \"Emotion Primitives\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "emotion-primitives.test.js",
            "skipped": false,
            "dir": "packages/primitives/test"
        },
        {
            "name": "primitive should work with `withComponent`",
            "suites": [
                "Emotion primitives"
            ],
            "updatePoint": {
                "line": 106,
                "column": 50,
                "index": 3244
            },
            "line": 106,
            "code": "  test('primitive should work with `withComponent`', () => {\n    const StyledText = styled.Text`\n      color: ${props => props.decor};\n    `; // $FlowFixMe\n\n    const Name = StyledText.withComponent(Text);\n    const tree = renderer.create( /*#__PURE__*/React.createElement(Name, {\n      decor: \"hotpink\"\n    }, \"Mike\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "emotion-primitives.test.js",
            "skipped": false,
            "dir": "packages/primitives/test"
        },
        {
            "name": "should style any other component",
            "suites": [
                "Emotion primitives"
            ],
            "updatePoint": {
                "line": 117,
                "column": 38,
                "index": 3604
            },
            "line": 117,
            "code": "  it('should style any other component', () => {\n    const Text = styled.Text`\n      color: hotpink;\n    `; // $FlowFixMe\n\n    const Title = () => /*#__PURE__*/React.createElement(Text, null, \"Hello World\");\n\n    const StyledTitle = styled(Title)`\n      font-size: 20px;\n      font-style: ${props => props.sty};\n    `; // $FlowFixMe\n\n    const tree = renderer.create( /*#__PURE__*/React.createElement(StyledTitle, {\n      sty: \"italic\"\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "emotion-primitives.test.js",
            "skipped": false,
            "dir": "packages/primitives/test"
        },
        {
            "name": "ref",
            "suites": [
                "Emotion primitives"
            ],
            "updatePoint": {
                "line": 134,
                "column": 9,
                "index": 4071
            },
            "line": 134,
            "code": "  it('ref', () => {\n    const StyledText = styled.Text`\n      color: hotpink;\n    `;\n    let ref = /*#__PURE__*/React.createRef();\n    const {\n      container,\n      unmount\n    } = render( /*#__PURE__*/React.createElement(StyledText, {\n      ref: ref,\n      id: \"something\"\n    }));\n    expect(ref.current).toBe(container.firstElementChild);\n    unmount();\n  });",
            "file": "emotion-primitives.test.js",
            "skipped": false,
            "dir": "packages/primitives/test"
        },
        {
            "name": "should pass props in withComponent",
            "suites": [
                "Emotion primitives"
            ],
            "updatePoint": {
                "line": 149,
                "column": 40,
                "index": 4466
            },
            "line": 149,
            "code": "  it('should pass props in withComponent', () => {\n    const ViewOne = styled.View`\n      background-color: ${props => props.color};\n    `; // $FlowFixMe\n\n    const treeOne = renderer.create( /*#__PURE__*/React.createElement(ViewOne, {\n      color: \"green\"\n    })); // $FlowFixMe\n\n    const ViewTwo = ViewOne.withComponent(Text);\n    const treeTwo = renderer.create( /*#__PURE__*/React.createElement(ViewTwo, {\n      color: \"hotpink\"\n    }));\n    expect(treeOne).toMatchSnapshot();\n    expect(treeTwo).toMatchSnapshot();\n  });",
            "file": "emotion-primitives.test.js",
            "skipped": false,
            "dir": "packages/primitives/test"
        },
        {
            "name": "should render <Image />",
            "suites": [
                "Emotion primitives"
            ],
            "updatePoint": {
                "line": 165,
                "column": 29,
                "index": 4982
            },
            "line": 165,
            "code": "  it('should render <Image />', () => {\n    const Image = styled.Image`\n      border: 2px solid hotpink;\n    `;\n    const tree = renderer.create(\n    /*#__PURE__*/\n    // $FlowFixMe\n    React.createElement(Image, {\n      source: {\n        uri: 'https://camo.githubusercontent.com/209bdea972b9b6ef90220c59ecbe66d35ffefa8a/68747470733a2f2f63646e2e7261776769742e636f6d2f746b6834342f656d6f74696f6e2f6d61737465722f656d6f74696f6e2e706e67',\n        height: 150,\n        width: 150\n      }\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "emotion-primitives.test.js",
            "skipped": false,
            "dir": "packages/primitives/test"
        },
        {
            "name": "custom shouldForwardProp works",
            "suites": [
                "Emotion primitives"
            ],
            "updatePoint": {
                "line": 181,
                "column": 38,
                "index": 5533
            },
            "line": 181,
            "code": "  test('custom shouldForwardProp works', () => {\n    const Text = styled.Text``;\n\n    const Title = props => /*#__PURE__*/React.createElement(Text, props); // $FlowFixMe\n\n\n    const StyledTitle = styled(Title, {\n      shouldForwardProp: prop => prop !== 'color' && prop !== 'theme'\n    })`\n      color: ${props => props.color};\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(StyledTitle, {\n      color: \"hotpink\"\n    }, 'Emotion')).toJSON();\n    expect(tree).toMatchSnapshot();\n  });",
            "file": "emotion-primitives.test.js",
            "skipped": false,
            "dir": "packages/primitives/test"
        },
        {
            "name": "basic",
            "suites": [],
            "updatePoint": {
                "line": 9,
                "column": 11,
                "index": 325
            },
            "line": 9,
            "code": "test('basic', () => {\n  expect(StyleSheet.flatten(css`\n      color: hotpink;\n      ${{\n    backgroundColor: 'green'\n  }};\n    `)).toEqual({\n    color: 'hotpink',\n    backgroundColor: 'green'\n  });\n  expect(StyleSheet.flatten(css({\n    color: 'green'\n  }))).toEqual({\n    color: 'green'\n  });\n  expect(StyleSheet.flatten(css([{\n    color: 'green'\n  }, `background-color:yellow;`]))).toEqual({\n    color: 'green',\n    backgroundColor: 'yellow'\n  });\n  expect(StyleSheet.flatten(css([{\n    color: 'green'\n  }]))).toEqual({\n    color: 'green'\n  });\n});",
            "file": "no-babel/basic.test.js",
            "skipped": false,
            "dir": "packages/primitives/test"
        },
        {
            "name": "falsy value in the middle",
            "suites": [],
            "updatePoint": {
                "line": 36,
                "column": 31,
                "index": 894
            },
            "line": 36,
            "code": "test('falsy value in the middle', () => {\n  expect(StyleSheet.flatten(css`\n      color: ${false};\n      background-color: hotpink;\n    `)).toEqual({\n    backgroundColor: 'hotpink'\n  });\n});",
            "file": "no-babel/basic.test.js",
            "skipped": false,
            "dir": "packages/primitives/test"
        },
        {
            "name": "should render the primitive when styles applied using object style notation",
            "suites": [],
            "updatePoint": {
                "line": 44,
                "column": 81,
                "index": 1134
            },
            "line": 44,
            "code": "test('should render the primitive when styles applied using object style notation', () => {\n  const Text = styled.Text`\n    color: red;\n    font-size: 20px;\n    background-color: ${props => props.back};\n  `;\n  const tree = renderer.create(\n  /*#__PURE__*/\n  // $FlowFixMe\n  React.createElement(Text, {\n    style: {\n      fontSize: 40\n    },\n    back: \"red\"\n  }, \"Emotion Primitives\")).toJSON();\n  expect(tree).toMatchSnapshot();\n}); // this needs to be here since the babel plugin will remove the whitespace",
            "file": "no-babel/basic.test.js",
            "skipped": false,
            "dir": "packages/primitives/test"
        },
        {
            "name": "empty string",
            "suites": [],
            "updatePoint": {
                "line": 62,
                "column": 18,
                "index": 1580
            },
            "line": 62,
            "code": "test('empty string', () => {\n  // prettier-ignore\n  let style = css`    \n      \n  `;\n  expect(StyleSheet.flatten(style)).toEqual({});\n});",
            "file": "no-babel/basic.test.js",
            "skipped": false,
            "dir": "packages/primitives/test"
        },
        {
            "name": "does warn when functions are passed to cx calls ",
            "suites": [],
            "updatePoint": {
                "line": 7,
                "column": 52,
                "index": 184
            },
            "line": 7,
            "code": "it('does warn when functions are passed to cx calls ', () => {\n  css(() => ({}));\n  expect(console.error).toBeCalledWith('Interpolating functions in css calls is not allowed.\\n' + 'If you want to have a css call based on props, create a function that returns a css call like this\\n' + 'let dynamicStyle = (props) => css`color: ${props.color}`\\n' + 'It can be called directly with props or interpolated in a styled call like this\\n' + 'let SomeComponent = styled.View`${dynamicStyle}`');\n});",
            "file": "warnings.test.js",
            "skipped": false,
            "dir": "packages/primitives/test"
        }
    ],
    "error": "Exclusive tests detected. `.only` call found in warnings.js:139\nRemove `.only` to restore test checks"
}