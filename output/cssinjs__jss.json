{"repo":"cssinjs/jss","url":"https://github.com/cssinjs/jss","branch":"master","configs":[{"package":"root","lang":"js","dir":"tests","framework":"mocha","pattern":"**/*.{js,ts}"},{"package":"jss","lang":"ts","dir":"packages/jss/tests","framework":"mocha","pattern":"**/*.{js,ts}"},{"package":"react-jss","lang":"js","dir":"packages/react-jss/tests","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"should render correctly","suites":["Functional: houdini","use unit value"],"updatePoint":{"line":32,"column":31},"line":32,"code":"    it('should render correctly', () => {\n      expect(computeStyle(sheet.classes.a).margin).to.be('42px')\n    })","file":"functional/houdini.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should delete property","suites":["Functional: houdini","use unit value"],"updatePoint":{"line":36,"column":30},"line":36,"code":"    it('should delete property', () => {\n      sheet.getRule('a').prop('margin', null)\n      expect(computeStyle(sheet.classes.a).margin).to.be('0px')\n    })","file":"functional/houdini.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should have correct specificity w/o linking","suites":["Functional: dom priority","enssure index and source order specificity"],"updatePoint":{"line":28,"column":51},"line":28,"code":"    it('should have correct specificity w/o linking', () => {\n      const sheet1 = jss.createStyleSheet({a: {width: '5px'}}, {index: 1}).attach()\n      const sheet2 = jss.createStyleSheet({b: {width: '2px'}}, {index: 0}).attach()\n      expect(computeStyle(`${sheet1.classes.a} ${sheet2.classes.b}`).width).to.be('5px')\n    })","file":"functional/priority.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should have correct specificity w/ linking","suites":["Functional: dom priority","enssure index and source order specificity"],"updatePoint":{"line":34,"column":50},"line":34,"code":"    it('should have correct specificity w/ linking', () => {\n      const sheet1 = jss.createStyleSheet({a: {width: '5px'}}, {index: 1, link: true}).attach()\n      const sheet2 = jss.createStyleSheet({b: {width: '2px'}}, {index: 0, link: true}).attach()\n      expect(computeStyle(`${sheet1.classes.a} ${sheet2.classes.b}`).width).to.be('5px')\n    })","file":"functional/priority.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should append sheets to the end of the document head after other stylesheets","suites":["Functional: dom priority","without insertion point"],"updatePoint":{"line":49,"column":84},"line":49,"code":"    it('should append sheets to the end of the document head after other stylesheets', () => {\n      jss.createStyleSheet({}, {meta: 'sheet1', index: 50}).attach()\n      jss.createStyleSheet({}, {meta: 'sheet2', index: 1}).attach()\n      jss.createStyleSheet({}, {meta: 'sheet3', index: 40}).attach()\n      jss.createStyleSheet({}, {meta: 'sheet4', index: 75}).attach()\n      jss.createStyleSheet({}, {meta: 'sheet5', index: 35}).attach()\n\n      const styleElements = document.head.getElementsByTagName('style')\n\n      expect(styleElements.length).to.be(7)\n\n      expect(styleElements[0].getAttribute('data-test-dummy')).to.be('dummy1')\n      expect(styleElements[1].getAttribute('data-test-dummy')).to.be('dummy2')\n\n      expect(styleElements[2].getAttribute('data-meta')).to.be('sheet2')\n      expect(styleElements[3].getAttribute('data-meta')).to.be('sheet5')\n      expect(styleElements[4].getAttribute('data-meta')).to.be('sheet3')\n      expect(styleElements[5].getAttribute('data-meta')).to.be('sheet1')\n      expect(styleElements[6].getAttribute('data-meta')).to.be('sheet4')\n    })","file":"functional/priority.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should insert sheets before other stylesheets","suites":["Functional: dom priority","with an insertion point"],"updatePoint":{"line":84,"column":53},"line":84,"code":"    it('should insert sheets before other stylesheets', () => {\n      comment = document.createComment('jss')\n\n      document.head.insertBefore(comment, document.head.querySelector('style'))\n\n      jss.createStyleSheet({}, {meta: 'sheet1', index: 50}).attach()\n      jss.createStyleSheet({}, {meta: 'sheet2', index: 1}).attach()\n      jss.createStyleSheet({}, {meta: 'sheet3', index: 40}).attach()\n      jss.createStyleSheet({}, {meta: 'sheet4', index: 75}).attach()\n      jss.createStyleSheet({}, {meta: 'sheet5', index: 35}).attach()\n\n      const styleElements = document.head.getElementsByTagName('style')\n\n      expect(styleElements.length).to.be(7)\n\n      expect(styleElements[0].getAttribute('data-meta')).to.be('sheet2')\n      expect(styleElements[1].getAttribute('data-meta')).to.be('sheet5')\n      expect(styleElements[2].getAttribute('data-meta')).to.be('sheet3')\n      expect(styleElements[3].getAttribute('data-meta')).to.be('sheet1')\n      expect(styleElements[4].getAttribute('data-meta')).to.be('sheet4')\n      expect(styleElements[5].getAttribute('data-test-dummy')).to.be('dummy1')\n      expect(styleElements[6].getAttribute('data-test-dummy')).to.be('dummy2')\n    })","file":"functional/priority.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should insert sheets after other stylesheets","suites":["Functional: dom priority","with an insertion point"],"updatePoint":{"line":108,"column":52},"line":108,"code":"    it('should insert sheets after other stylesheets', () => {\n      comment = document.createComment('jss')\n      document.head.appendChild(comment)\n\n      jss.createStyleSheet({}, {meta: 'sheet1', index: 50}).attach()\n      jss.createStyleSheet({}, {meta: 'sheet2', index: 1}).attach()\n      jss.createStyleSheet({}, {meta: 'sheet3', index: 40}).attach()\n      jss.createStyleSheet({}, {meta: 'sheet4', index: 75}).attach()\n      jss.createStyleSheet({}, {meta: 'sheet5', index: 35}).attach()\n\n      const styleElements = document.head.getElementsByTagName('style')\n\n      expect(styleElements.length).to.be(7)\n\n      expect(styleElements[0].getAttribute('data-test-dummy')).to.be('dummy1')\n      expect(styleElements[1].getAttribute('data-test-dummy')).to.be('dummy2')\n\n      expect(styleElements[2].getAttribute('data-meta')).to.be('sheet2')\n      expect(styleElements[3].getAttribute('data-meta')).to.be('sheet5')\n      expect(styleElements[4].getAttribute('data-meta')).to.be('sheet3')\n      expect(styleElements[5].getAttribute('data-meta')).to.be('sheet1')\n      expect(styleElements[6].getAttribute('data-meta')).to.be('sheet4')\n    })","file":"functional/priority.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should insert sheets between other stylesheets","suites":["Functional: dom priority","with an insertion point"],"updatePoint":{"line":132,"column":54},"line":132,"code":"    it('should insert sheets between other stylesheets', () => {\n      comment = document.createComment('jss')\n      document.head.insertBefore(comment, document.head.querySelectorAll('style')[1])\n\n      jss.createStyleSheet({}, {meta: 'sheet1', index: 50}).attach()\n      jss.createStyleSheet({}, {meta: 'sheet2', index: 1}).attach()\n      jss.createStyleSheet({}, {meta: 'sheet3', index: 40}).attach()\n      jss.createStyleSheet({}, {meta: 'sheet4', index: 75}).attach()\n      jss.createStyleSheet({}, {meta: 'sheet5', index: 35}).attach()\n\n      const styleElements = document.head.getElementsByTagName('style')\n\n      expect(styleElements.length).to.be(7)\n\n      expect(styleElements[0].getAttribute('data-test-dummy')).to.be('dummy1')\n\n      expect(styleElements[1].getAttribute('data-meta')).to.be('sheet2')\n      expect(styleElements[2].getAttribute('data-meta')).to.be('sheet5')\n      expect(styleElements[3].getAttribute('data-meta')).to.be('sheet3')\n      expect(styleElements[4].getAttribute('data-meta')).to.be('sheet1')\n      expect(styleElements[5].getAttribute('data-meta')).to.be('sheet4')\n\n      expect(styleElements[6].getAttribute('data-test-dummy')).to.be('dummy2')\n    })","file":"functional/priority.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should insert sheets in the correct order","suites":["Functional: dom priority","two string insertion points"],"updatePoint":{"line":176,"column":49},"line":176,"code":"    it('should insert sheets in the correct order', () => {\n      jss2.createStyleSheet({}, {meta: 'sheet2'}).attach()\n      jss1.createStyleSheet({}, {meta: 'sheet1'}).attach()\n\n      const styleElements = document.head.getElementsByTagName('style')\n\n      expect(styleElements.length).to.be(2)\n      expect(styleElements[0].getAttribute('data-meta')).to.be('sheet1')\n      expect(styleElements[1].getAttribute('data-meta')).to.be('sheet2')\n    })","file":"functional/priority.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should warn when string insertion point not found","suites":["Functional: dom priority","insertion point specified but not found in the document"],"updatePoint":{"line":199,"column":57},"line":199,"code":"    it('should warn when string insertion point not found', () => {\n      const jss = create({insertionPoint: 'something'})\n      jss.createStyleSheet().attach()\n\n      expect(spy.callCount).to.be(1)\n      expect(spy.calledWithExactly('Warning: [JSS] Insertion point \"something\" not found.')).to.be(\n        true\n      )\n    })","file":"functional/priority.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should warn when element insertion point not found","suites":["Functional: dom priority","insertion point specified but not found in the document"],"updatePoint":{"line":209,"column":58},"line":209,"code":"    it('should warn when element insertion point not found', () => {\n      const jss = create({insertionPoint: document.createElement('div')})\n      jss.createStyleSheet().attach()\n\n      expect(spy.callCount).to.be(1)\n      expect(spy.calledWithExactly('Warning: [JSS] Insertion point is not in the DOM.')).to.be(true)\n    })","file":"functional/priority.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should insert sheets in the correct order","suites":["Functional: dom priority","element insertion point: body"],"updatePoint":{"line":238,"column":49},"line":238,"code":"    it('should insert sheets in the correct order', () => {\n      const styleElements = document.body.getElementsByTagName('style')\n\n      expect(styleElements.length).to.be(3)\n      expect(styleElements[0].getAttribute('data-meta')).to.be('sheet1')\n      expect(styleElements[1].getAttribute('data-meta')).to.be('sheet2')\n      expect(styleElements[2].getAttribute('data-meta')).to.be('sheet3')\n    })","file":"functional/priority.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should insert sheets in the correct order","suites":["Functional: dom priority","element insertion point in an iframe"],"updatePoint":{"line":268,"column":49},"line":268,"code":"    it('should insert sheets in the correct order', () => {\n      const styleElements = iDoc.getElementsByTagName('style')\n\n      expect(styleElements.length).to.be(2)\n      expect(styleElements[0].getAttribute('data-meta')).to.be('sheet1')\n      expect(styleElements[1].getAttribute('data-meta')).to.be('sheet2')\n    })","file":"functional/priority.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should insert sheets in the correct order","suites":["Functional: dom priority","preserve attachment order with no index, but with registry"],"updatePoint":{"line":284,"column":49},"line":284,"code":"    it('should insert sheets in the correct order', () => {\n      jss.createStyleSheet({}, {meta: 'sheet0'}).attach()\n      jss.createStyleSheet({}, {meta: 'sheet1'}).attach()\n\n      const styleElements = document.head.getElementsByTagName('style')\n\n      expect(styleElements.length).to.be(2)\n\n      expect(styleElements[0].getAttribute('data-meta')).to.be('sheet0')\n      expect(styleElements[1].getAttribute('data-meta')).to.be('sheet1')\n    })","file":"functional/priority.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should insert sheets in the correct order","suites":["Functional: dom priority","preserve attachment order with no index and no registry"],"updatePoint":{"line":304,"column":49},"line":304,"code":"    it('should insert sheets in the correct order', () => {\n      jss.createStyleSheet({}, {meta: 'sheet0'}).attach()\n      jss.createStyleSheet({}, {meta: 'sheet1'}).attach()\n\n      const styleElements = document.head.getElementsByTagName('style')\n\n      expect(styleElements.length).to.be(2)\n\n      expect(styleElements[0].getAttribute('data-meta')).to.be('sheet0')\n      expect(styleElements[1].getAttribute('data-meta')).to.be('sheet1')\n    })","file":"functional/priority.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should insert sheets in the correct order","suites":["Functional: dom priority","with zero and negative indices"],"updatePoint":{"line":324,"column":49},"line":324,"code":"    it('should insert sheets in the correct order', () => {\n      jss.createStyleSheet({}, {meta: 'sheet1', index: 0}).attach()\n      jss.createStyleSheet({}, {meta: 'sheet2', index: -5}).attach()\n      jss.createStyleSheet({}, {meta: 'sheet3', index: -999}).attach()\n      jss.createStyleSheet({}, {meta: 'sheet4', index: 3}).attach()\n      jss.createStyleSheet({}, {meta: 'sheet5', index: 312}).attach()\n\n      const styleElements = document.head.getElementsByTagName('style')\n\n      expect(styleElements.length).to.be(5)\n\n      expect(styleElements[0].getAttribute('data-meta')).to.be('sheet3')\n      expect(styleElements[1].getAttribute('data-meta')).to.be('sheet2')\n      expect(styleElements[2].getAttribute('data-meta')).to.be('sheet1')\n      expect(styleElements[3].getAttribute('data-meta')).to.be('sheet4')\n      expect(styleElements[4].getAttribute('data-meta')).to.be('sheet5')\n    })","file":"functional/priority.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should insert sheets with the same index after existing","suites":["Functional: dom priority","with multiple sheets using the same index"],"updatePoint":{"line":350,"column":63},"line":350,"code":"    it('should insert sheets with the same index after existing', () => {\n      jss.createStyleSheet({}, {meta: 'sheet1', index: 50}).attach()\n      jss.createStyleSheet({}, {meta: 'sheet2', index: 40}).attach()\n      jss.createStyleSheet({}, {meta: 'sheet3', index: 40}).attach()\n      jss.createStyleSheet({}, {meta: 'sheet4', index: 20}).attach()\n      jss.createStyleSheet({}, {meta: 'sheet5', index: 40}).attach()\n\n      const styleElements = document.head.getElementsByTagName('style')\n\n      expect(styleElements.length).to.be(5)\n\n      expect(styleElements[0].getAttribute('data-meta')).to.be('sheet4')\n      expect(styleElements[1].getAttribute('data-meta')).to.be('sheet2')\n      expect(styleElements[2].getAttribute('data-meta')).to.be('sheet3')\n      expect(styleElements[3].getAttribute('data-meta')).to.be('sheet5')\n      expect(styleElements[4].getAttribute('data-meta')).to.be('sheet1')\n    })","file":"functional/priority.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should apply float: left","suites":["Functional: rules","rule.applyTo()"],"updatePoint":{"line":9,"column":32},"line":9,"code":"    it('should apply float: left', () => {\n      const div = document.createElement('div')\n      jss\n        .createRule({\n          float: 'left'\n        })\n        .applyTo(div)\n      expect(div.style.float).to.be('left')\n    })","file":"functional/rules.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should render simple sheet","suites":["Functional: sheet","sheet.attach() CSS check from DOM"],"updatePoint":{"line":46,"column":34},"line":46,"code":"    it('should render simple sheet', () => {\n      check({a: {width: '1px', float: 'left'}})\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should render sheet with media query","suites":["Functional: sheet","sheet.attach() CSS check from DOM"],"updatePoint":{"line":50,"column":44},"line":50,"code":"    it('should render sheet with media query', () => {\n      check({\n        a: {color: 'red'},\n        '@media all and (min-width: 1024px)': {\n          a: {color: 'blue'},\n          b: {color: 'white'}\n        },\n        '@media all and (min-width: 100px)': {\n          a: {color: 'green'}\n        }\n      })\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should have attached the sheet","suites":["Functional: sheet","sheet.attach() and sheet.detach()"],"updatePoint":{"line":77,"column":38},"line":77,"code":"    it('should have attached the sheet', () => {\n      expect(sheet.attached).to.be(true)\n      expect(style).to.be.an(Element)\n      expect(style.parentNode).to.be.an(Element)\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should have rendered nothing inside","suites":["Functional: sheet","sheet.attach() and sheet.detach()"],"updatePoint":{"line":83,"column":43},"line":83,"code":"    it('should have rendered nothing inside', () => {\n      expect(style.innerHTML.trim()).to.be(sheet.toString().trim())\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should detach sheet","suites":["Functional: sheet","sheet.attach() and sheet.detach()"],"updatePoint":{"line":87,"column":27},"line":87,"code":"    it('should detach sheet', () => {\n      sheet.detach()\n      expect(sheet.attached).to.be(false)\n      expect(style.parentNode).to.be(null)\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should have a nonce attribute if nonce is found","suites":["Functional: sheet","sheet.attach() with nonce"],"updatePoint":{"line":114,"column":55},"line":114,"code":"    it('should have a nonce attribute if nonce is found', () => {\n      expect(style.getAttribute('nonce')).to.be('test')\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should have right options","suites":["Functional: sheet","Options: {media, meta}"],"updatePoint":{"line":132,"column":33},"line":132,"code":"    it('should have right options', () => {\n      expect(sheet.options.media).to.be('screen')\n      expect(sheet.options.meta).to.be('test')\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should have rendered attributes","suites":["Functional: sheet","Options: {media, meta}"],"updatePoint":{"line":137,"column":39},"line":137,"code":"    it('should have rendered attributes', () => {\n      expect(style.getAttribute('media')).to.be('screen')\n      expect(style.getAttribute('data-meta')).to.be('test')\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should link the DOM node","suites":["Functional: sheet","Option: {link: true}"],"updatePoint":{"line":150,"column":32},"line":150,"code":"    it('should link the DOM node', () => {\n      sheet = jss.createStyleSheet({a: {float: 'left'}}, {link: true}).attach()\n      expect(sheet.getRule('a').renderable).to.be.a(CSSStyleRule)\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should link the DOM node to added rule","suites":["Functional: sheet","Option: {link: true}"],"updatePoint":{"line":155,"column":46},"line":155,"code":"    it('should link the DOM node to added rule', () => {\n      sheet = jss.createStyleSheet(null, {link: true}).attach()\n      sheet.addRule('a', {color: 'red'})\n      expect(sheet.getRule('a').renderable).to.be.a(CSSStyleRule)\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should link a rule with CSS escaped chars within selector","suites":["Functional: sheet","Option: {link: true}"],"updatePoint":{"line":161,"column":65},"line":161,"code":"    it('should link a rule with CSS escaped chars within selector', () => {\n      sheet = jss.createStyleSheet(null, {link: true})\n      const rule = sheet.addRule('a', {color: 'red'}, {selector: ':not(#\\\\20)'})\n      sheet.attach()\n      expect(rule.renderable).to.not.be(undefined)\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should warn if added rule is invalid","suites":["Functional: sheet","Option: {link: true}"],"updatePoint":{"line":168,"column":44},"line":168,"code":"    it('should warn if added rule is invalid', () => {\n      sheet = jss.createStyleSheet(null, {link: true})\n      const rule = sheet.addRule('a', {color: 'red'}, {selector: ':wrong'})\n      sheet.attach()\n      expect(spy.callCount).to.be(1)\n      expect(rule.renderable).to.be(undefined)\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should insert a valid rule after an invalid one","suites":["Functional: sheet","Option: {link: true}"],"updatePoint":{"line":176,"column":55},"line":176,"code":"    it('should insert a valid rule after an invalid one', () => {\n      sheet = jss.createStyleSheet(null, {link: true})\n      sheet.addRule('a', {color: 'red'}, {selector: ':wrong'})\n      const rule = sheet.addRule('b', {color: 'red'})\n      sheet.attach()\n      expect(spy.callCount).to.be(1)\n      expect(rule.renderable).to.not.be(undefined)\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should not render style","suites":["Functional: sheet","Option {Renderer: null}"],"updatePoint":{"line":187,"column":31},"line":187,"code":"    it('should not render style', () => {\n      const localJss = create({Renderer: null})\n      const sheet = localJss.createStyleSheet({a: {float: 'left'}})\n      sheet.attach()\n      expect(getStyle()).to.be(undefined)\n      sheet.detach()\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should render style using provided element","suites":["Functional: sheet","Option {element}"],"updatePoint":{"line":197,"column":50},"line":197,"code":"    it('should render style using provided element', () => {\n      const element = document.createElement('style')\n      element.type = 'text/css'\n      const sheet = jss.createStyleSheet({a: {float: 'left'}}, {element})\n      sheet.attach()\n      expect(getCss(element)).to.be(removeWhitespace(sheet.toString()))\n      sheet.detach()\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should be 0 by default","suites":["Functional: sheet","Option: {index}"],"updatePoint":{"line":208,"column":30},"line":208,"code":"    it('should be 0 by default', () => {\n      const sheet = jss.createStyleSheet({})\n      expect(sheet.options.index).to.be(0)\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should be set by the options argument","suites":["Functional: sheet","Option: {index}"],"updatePoint":{"line":213,"column":45},"line":213,"code":"    it('should be set by the options argument', () => {\n      ;[-50, 0, 50, 9999].forEach((n) => {\n        const sheet2 = jss.createStyleSheet({}, {index: n})\n        expect(sheet2.options.index).to.be(n)\n      })\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should render only 1 rule","suites":["Functional: sheet",".addRule()"],"updatePoint":{"line":236,"column":33},"line":236,"code":"    it('should render only 1 rule', () => {\n      expect(getRules(style).length).to.be(1)\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should render correct CSS","suites":["Functional: sheet",".addRule()"],"updatePoint":{"line":240,"column":33},"line":240,"code":"    it('should render correct CSS', () => {\n      expect(getCss(style)).to.be(removeWhitespace(sheet.toString()))\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should register the rule","suites":["Functional: sheet",".addRule()"],"updatePoint":{"line":244,"column":32},"line":244,"code":"    it('should register the rule', () => {\n      expect(sheet.getRule('a')).to.be(rule)\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should add a rule to a detached sheet","suites":["Functional: sheet",".addRule()"],"updatePoint":{"line":248,"column":45},"line":248,"code":"    it('should add a rule to a detached sheet', () => {\n      sheet.detach()\n      const newRule = sheet.addRule('b', {float: 'right'})\n      sheet.attach()\n      expect(sheet.getRule('b')).to.be(newRule)\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should link sheet in rules options","suites":["Functional: sheet",".addRule()"],"updatePoint":{"line":255,"column":42},"line":255,"code":"    it('should link sheet in rules options', () => {\n      expect(sheet.getRule('a').options.sheet).to.be(sheet)\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should not duplicate cssRules when adding rules to a detached sheet with link: true","suites":["Functional: sheet",".addRule()"],"updatePoint":{"line":259,"column":91},"line":259,"code":"    it('should not duplicate cssRules when adding rules to a detached sheet with link: true', () => {\n      sheet.detach()\n      sheet = jss.createStyleSheet(null, {link: true}).attach()\n      sheet.addRule('a', {float: 'left'})\n      sheet.detach()\n      sheet.addRule('b', {float: 'right'})\n      sheet.attach()\n      style = getStyle()\n      expect(getCss(style)).to.be(removeWhitespace(sheet.toString()))\n      expect(getCss(style)).to.be('.a-id{float:left;}.b-id{float:right;}')\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should render rules in the right order","suites":["Functional: sheet",".addRule() with .addRule() call within a plugin and attached sheet"],"updatePoint":{"line":292,"column":46},"line":292,"code":"    it('should render rules in the right order', () => {\n      expect(getCss(style)).to.be(removeWhitespace(sheet.toString()))\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should render @media","suites":["Functional: sheet",".addRule() with @media and attached sheet"],"updatePoint":{"line":318,"column":28},"line":318,"code":"    it('should render @media', () => {\n      expect(getCss(style)).to.be(removeWhitespace(sheet.toString()))\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should render @media and added rule","suites":["Functional: sheet",".addRule() with @media and attached sheet"],"updatePoint":{"line":322,"column":43},"line":322,"code":"    it('should render @media and added rule', () => {\n      sheet.addRule('b', {\n        color: 'red'\n      })\n      expect(getCss(style)).to.be(removeWhitespace(sheet.toString()))\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should not render","suites":["Functional: sheet",".addRule() with empty styles"],"updatePoint":{"line":344,"column":25},"line":344,"code":"    it('should not render', () => {\n      expect(getCss(style)).to.be('')\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should not warn","suites":["Functional: sheet",".addRule() with empty styles"],"updatePoint":{"line":348,"column":23},"line":348,"code":"    it('should not warn', () => {\n      expect(spy.callCount).to.be(0)\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should render @keyframes","suites":["Functional: sheet",".addRule() with @keyframes and attached sheet"],"updatePoint":{"line":372,"column":32},"line":372,"code":"    it('should render @keyframes', () => {\n      const css = removeVendorPrefixes(getCss(style))\n      expect(css).to.be(removeWhitespace(sheet.toString()))\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should add rules to an attached sheet","suites":["Functional: sheet",".addRules() with an attached sheet"],"updatePoint":{"line":393,"column":45},"line":393,"code":"    it('should add rules to an attached sheet', () => {\n      expect(computeStyle(sheet.classes.a).width).to.be('1px')\n      expect(computeStyle(sheet.classes.b).width).to.be('2px')\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should keep the values after reattaching","suites":["Functional: sheet",".addRules() with an attached sheet"],"updatePoint":{"line":398,"column":48},"line":398,"code":"    it('should keep the values after reattaching', () => {\n      sheet.detach().attach()\n      expect(computeStyle(sheet.classes.a).width).to.be('1px')\n      expect(computeStyle(sheet.classes.b).width).to.be('2px')\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should delete a style rule from the sheet and DOM","suites":["Functional: sheet",".deleteRule()"],"updatePoint":{"line":406,"column":57},"line":406,"code":"    it('should delete a style rule from the sheet and DOM', () => {\n      const sheet = jss.createStyleSheet({a: {width: '1px'}}, {link: true}).attach()\n      const className = sheet.classes.a\n      expect(computeStyle(className).width).to.be('1px')\n      expect(sheet.deleteRule('a')).to.be(true)\n      expect(sheet.getRule('a')).to.be(undefined)\n      expect(computeStyle(className).width).not.to.be('1px')\n      sheet.detach()\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should delete a media rule from the sheet and DOM","suites":["Functional: sheet",".deleteRule()"],"updatePoint":{"line":416,"column":57},"line":416,"code":"    it('should delete a media rule from the sheet and DOM', () => {\n      const sheet = jss\n        .createStyleSheet(\n          {\n            a: {\n              color: 'red'\n            },\n            '@media all': {\n              a: {width: '1px'}\n            }\n          },\n          {link: true}\n        )\n        .attach()\n      const className = sheet.classes.a\n      expect(computeStyle(className).width).to.be('1px')\n      expect(sheet.deleteRule('@media all')).to.be(true)\n      expect(sheet.getRule('@media all')).to.be(undefined)\n      expect(computeStyle(className).width).not.to.be('1px')\n      sheet.detach()\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should have initial color","suites":["Functional: sheet","rule.prop()"],"updatePoint":{"line":470,"column":33},"line":470,"code":"    it('should have initial color', () => {\n      expect(computeStyle(sheet.classes.a).width).to.be('10px')\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should apply a style prop","suites":["Functional: sheet","rule.prop()"],"updatePoint":{"line":474,"column":33},"line":474,"code":"    it('should apply a style prop', () => {\n      sheet.getRule('a').prop('width', '12px')\n      expect(computeStyle(sheet.classes.a).width).to.be('12px')\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should set the new prop on style","suites":["Functional: sheet","rule.prop()"],"updatePoint":{"line":479,"column":40},"line":479,"code":"    it('should set the new prop on style', () => {\n      sheet.getRule('a').prop('color', 'red')\n      expect(sheet.getRule('a').style.color).to.be('red')\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should apply a style prop in @media rule child","suites":["Functional: sheet","rule.prop()"],"updatePoint":{"line":484,"column":54},"line":484,"code":"    it('should apply a style prop in @media rule child', () => {\n      const rule = sheet.getRule('@media all').rules.get('b')\n      rule.prop('width', '12px')\n      expect(computeStyle(sheet.classes.b).width).to.be('12px')\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should apply a style prop in @keyframes rule child","suites":["Functional: sheet","rule.prop()"],"updatePoint":{"line":490,"column":58},"line":490,"code":"    it('should apply a style prop in @keyframes rule child', () => {\n      if (!isKeyframesSupported) return\n      const rule = sheet.getRule('keyframes-a').rules.get('100%')\n      rule.prop('opacity', 0)\n      // We can't compute styles from keyframes.\n      expect(removeVendorPrefixes(getCss(getStyle()))).to.be(removeWhitespace(sheet.toString()))\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should return a new prop from toString()","suites":["Functional: sheet","rule.prop()"],"updatePoint":{"line":498,"column":48},"line":498,"code":"    it('should return a new prop from toString()', () => {\n      sheet.getRule('a').prop('display', 'block')\n      expect(sheet.getRule('a').toString()).to.be(stripIndent`\n        .a-id {\n          width: 10px;\n          max-width: 50px;\n          display: block;\n        }\n      `)\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should remove a prop in @media rule child when null value is passed","suites":["Functional: sheet","rule.prop()"],"updatePoint":{"line":509,"column":75},"line":509,"code":"    it('should remove a prop in @media rule child when null value is passed', () => {\n      const rule = sheet.getRule('@media all').rules.get('b')\n      rule.prop('width', null)\n      expect(computeStyle(sheet.classes.b).width).to.be('50px')\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should remove a prop in @keyframes rule child when null value is passed","suites":["Functional: sheet","rule.prop()"],"updatePoint":{"line":515,"column":79},"line":515,"code":"    it('should remove a prop in @keyframes rule child when null value is passed', () => {\n      if (!isKeyframesSupported) return\n      const rule = sheet.getRule('keyframes-a').rules.get('100%')\n      rule.prop('opacity', null)\n      // We can't compute styles from keyframes.\n      expect(removeVendorPrefixes(getCss(getStyle()))).to.be(removeWhitespace(sheet.toString()))\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should warn when sheet not linked but attached","suites":["Functional: sheet","warn on rule.prop() call"],"updatePoint":{"line":525,"column":54},"line":525,"code":"    it('should warn when sheet not linked but attached', () => {\n      const sheet = jss.createStyleSheet({a: {color: 'green'}}).attach()\n      sheet.getRule('a').prop('color', 'red')\n      expect(spy.callCount).to.be(1)\n      expect(\n        spy.calledWithExactly(\n          'Warning: [JSS] Rule is not linked. Missing sheet option \"link: true\".'\n        )\n      ).to.be(true)\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should not warn when sheet is not linked but also not attached","suites":["Functional: sheet","warn on rule.prop() call"],"updatePoint":{"line":536,"column":70},"line":536,"code":"    it('should not warn when sheet is not linked but also not attached', () => {\n      const sheet = jss.createStyleSheet({a: {color: 'green'}})\n      sheet.getRule('a').prop('color', 'red')\n      expect(spy.callCount).to.be(0)\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should not warn when there is no sheet","suites":["Functional: sheet","warn on rule.prop() call"],"updatePoint":{"line":542,"column":46},"line":542,"code":"    it('should not warn when there is no sheet', () => {\n      jss.createRule({color: 'green'}).prop('color', 'red')\n      expect(spy.callCount).to.be(0)\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should remove a prop when it is missing in a new rule.style","suites":["Functional: sheet","sheet.update()"],"updatePoint":{"line":562,"column":67},"line":562,"code":"    it('should remove a prop when it is missing in a new rule.style', () => {\n      sheet.update({})\n      expect(computeStyle(sheet.classes.a).display).to.be('block')\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should remove a prop when value is null in a new rule.style","suites":["Functional: sheet","sheet.update()"],"updatePoint":{"line":567,"column":67},"line":567,"code":"    it('should remove a prop when value is null in a new rule.style', () => {\n      sheet.update({display: null})\n      expect(computeStyle(sheet.classes.a).display).to.be('block')\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should remove a prop when value is false in a new rule.style","suites":["Functional: sheet","sheet.update()"],"updatePoint":{"line":572,"column":68},"line":572,"code":"    it('should remove a prop when value is false in a new rule.style', () => {\n      sheet.update({display: false})\n      expect(computeStyle(sheet.classes.a).display).to.be('block')\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should return correct value by an array","suites":["Functional: sheet","sheet.update() with !important"],"updatePoint":{"line":592,"column":47},"line":592,"code":"    it('should return correct value by an array', () => {\n      sheet.update({color: ['rgb(0, 255, 0)', '!important']})\n      expect(computeStyle(sheet.classes.a).color).to.be('rgb(0, 255, 0)')\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should return correct value by a string","suites":["Functional: sheet","sheet.update() with !important"],"updatePoint":{"line":597,"column":47},"line":597,"code":"    it('should return correct value by a string', () => {\n      sheet.update({color: 'rgb(0, 255, 0) !important'})\n      expect(computeStyle(sheet.classes.a).color).to.be('rgb(0, 255, 0)')\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should set the selector","suites":["Functional: sheet","rule.selector"],"updatePoint":{"line":616,"column":31},"line":616,"code":"    it('should set the selector', () => {\n      rule.selector = '.test'\n      expect(rule.selector).to.be('.test')\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should apply selector to the DOM","suites":["Functional: sheet","rule.selector"],"updatePoint":{"line":621,"column":40},"line":621,"code":"    it('should apply selector to the DOM', () => {\n      rule.selector = '.test'\n      expect(computeStyle('test').width).to.be('1px')\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should register the class name in sheet.classes","suites":["Functional: sheet","rule.selector"],"updatePoint":{"line":626,"column":55},"line":626,"code":"    it('should register the class name in sheet.classes', () => {\n      expect(sheet.classes.a, 'test')\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should apply selector to the DOM","suites":["Functional: sheet","escaping","escape class names"],"updatePoint":{"line":643,"column":42},"line":643,"code":"      it('should apply selector to the DOM', () => {\n        expect(computeStyle(sheet.classes['test()']).width).to.be('1px')\n      })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should apply selector to the DOM","suites":["Functional: sheet","escaping","allow emojis as a key"],"updatePoint":{"line":659,"column":42},"line":659,"code":"      it('should apply selector to the DOM', () => {\n        expect(computeStyle(sheet.classes['😅']).width).to.be('1px')\n      })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should render only 1 rule","suites":["Functional: sheet",".replaceRule()"],"updatePoint":{"line":682,"column":33},"line":682,"code":"    it('should render only 1 rule', () => {\n      expect(getRules(style).length).to.be(1)\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should render correct CSS","suites":["Functional: sheet",".replaceRule()"],"updatePoint":{"line":686,"column":33},"line":686,"code":"    it('should render correct CSS', () => {\n      expect(getCss(style)).to.be(removeWhitespace(sheet.toString()))\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should register the rule","suites":["Functional: sheet",".replaceRule()"],"updatePoint":{"line":690,"column":32},"line":690,"code":"    it('should register the rule', () => {\n      expect(sheet.getRule('a')).not.to.be(rule)\n      expect(sheet.getRule('a')).to.be(replaceResult)\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should add a rule to a detached sheet","suites":["Functional: sheet",".replaceRule()"],"updatePoint":{"line":695,"column":45},"line":695,"code":"    it('should add a rule to a detached sheet', () => {\n      sheet.detach()\n      sheet.addRule('b', {display: 'block'})\n      const newRule = sheet.replaceRule('b', {display: 'flex'})\n      sheet.attach()\n      expect(sheet.getRule('b')).to.be(newRule)\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should link sheet in rules options","suites":["Functional: sheet",".replaceRule()"],"updatePoint":{"line":703,"column":42},"line":703,"code":"    it('should link sheet in rules options', () => {\n      expect(sheet.getRule('a').options.sheet).to.be(sheet)\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should not duplicate cssRules when replacing a rule in a detached sheet with link: true","suites":["Functional: sheet",".replaceRule()"],"updatePoint":{"line":707,"column":95},"line":707,"code":"    it('should not duplicate cssRules when replacing a rule in a detached sheet with link: true', () => {\n      sheet.detach()\n      sheet = jss.createStyleSheet(null, {link: true}).attach()\n      sheet.addRule('a', {float: 'left'})\n      sheet.detach()\n      sheet.addRule('b', {display: 'block'})\n      sheet.replaceRule('b', {display: 'flex'})\n      sheet.attach()\n      style = getStyle()\n      expect(getCss(style)).to.be(removeWhitespace(sheet.toString()))\n      expect(getCss(style)).to.be('.a-id{float:left;}.b-id{display:flex;}')\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should render @media","suites":["Functional: sheet",".replaceRule() with @media and attached sheet"],"updatePoint":{"line":745,"column":28},"line":745,"code":"    it('should render @media', () => {\n      expect(getCss(style)).to.be(removeWhitespace(sheet.toString()))\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should render @media and replaced rule","suites":["Functional: sheet",".replaceRule() with @media and attached sheet"],"updatePoint":{"line":749,"column":46},"line":749,"code":"    it('should render @media and replaced rule', () => {\n      sheet.replaceRule('a', {\n        color: 'red'\n      })\n      expect(getCss(style)).to.be(removeWhitespace(sheet.toString()))\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should not render","suites":["Functional: sheet",".replaceRule() with empty styles"],"updatePoint":{"line":772,"column":25},"line":772,"code":"    it('should not render', () => {\n      expect(getCss(style)).to.be('')\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should not warn","suites":["Functional: sheet",".replaceRule() with empty styles"],"updatePoint":{"line":776,"column":23},"line":776,"code":"    it('should not warn', () => {\n      expect(spy.callCount).to.be(0)\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should render @keyframes","suites":["Functional: sheet",".replaceRule() with @keyframes and attached sheet"],"updatePoint":{"line":803,"column":32},"line":803,"code":"    it('should render @keyframes', () => {\n      const css = removeVendorPrefixes(getCss(style))\n      expect(css).to.be(removeWhitespace(sheet.toString()))\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should replace rule a","suites":["Functional: sheet","replaceRule in sheet with many rules"],"updatePoint":{"line":823,"column":29},"line":823,"code":"    it('should replace rule a', () => {\n      sheet.replaceRule('a', {width: '1px'})\n      const style = getStyle()\n      expect(getCss(style)).to.be(\n        removeWhitespace(stripIndent`\n        .a-id {\n          width: 1px;\n        }\n        .b-id {\n          color: blue;\n        }\n        .c-id {\n          margin: 10px;\n        }\n        .d-id {\n          display: block;\n        }\n      `)\n      )\n      expect(getCss(style)).to.be(removeWhitespace(sheet.toString()))\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should replace rule b","suites":["Functional: sheet","replaceRule in sheet with many rules"],"updatePoint":{"line":845,"column":29},"line":845,"code":"    it('should replace rule b', () => {\n      sheet.replaceRule('b', {float: 'left'})\n      const style = getStyle()\n      expect(getCss(style)).to.be(\n        removeWhitespace(stripIndent`\n        .a-id {\n          top: 0px;\n        }\n        .b-id {\n          float: left;\n        }\n        .c-id {\n          margin: 10px;\n        }\n        .d-id {\n          display: block;\n        }\n      `)\n      )\n      expect(getCss(style)).to.be(removeWhitespace(sheet.toString()))\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should replace multiple rules","suites":["Functional: sheet","replaceRule in sheet with many rules"],"updatePoint":{"line":867,"column":37},"line":867,"code":"    it('should replace multiple rules', () => {\n      sheet.replaceRule('c', {background: 'green'})\n      sheet.replaceRule('d', {gap: '0px'})\n      const style = getStyle()\n      expect(getCss(style)).to.be(\n        removeWhitespace(stripIndent`\n        .a-id {\n          top: 0px;\n        }\n        .b-id {\n          color: blue;\n        }\n        .c-id {\n          background: green;\n        }\n        .d-id {\n          gap: 0px;\n        }\n      `)\n      )\n      expect(getCss(style)).to.be(removeWhitespace(sheet.toString()))\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should replace rule multiple times","suites":["Functional: sheet","replaceRule in sheet with many rules"],"updatePoint":{"line":890,"column":42},"line":890,"code":"    it('should replace rule multiple times', () => {\n      sheet.replaceRule('c', {background: 'green'})\n      sheet.replaceRule('c', {border: 'solid'})\n      const style = getStyle()\n      expect(getCss(style)).to.be(\n        removeWhitespace(stripIndent`\n        .a-id {\n          top: 0px;\n        }\n        .b-id {\n          color: blue;\n        }\n        .c-id {\n          border: solid;\n        }\n        .d-id {\n          display: block;\n        }\n      `)\n      )\n      expect(getCss(style)).to.be(removeWhitespace(sheet.toString()))\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should add rule if name doesn't match any","suites":["Functional: sheet","replaceRule in sheet with many rules"],"updatePoint":{"line":913,"column":49},"line":913,"code":"    it(\"should add rule if name doesn't match any\", () => {\n      sheet.replaceRule('e', {background: 'green'})\n      const style = getStyle()\n      expect(getCss(style)).to.be(\n        removeWhitespace(stripIndent`\n        .a-id {\n          top: 0px;\n        }\n        .b-id {\n          color: blue;\n        }\n        .c-id {\n          margin: 10px;\n        }\n        .d-id {\n          display: block;\n        }\n        .e-id {\n          background: green;\n        }\n      `)\n      )\n      expect(getCss(style)).to.be(removeWhitespace(sheet.toString()))\n    })","file":"functional/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should get value from .prop()","suites":["Integration: houdini","use unit value"],"updatePoint":{"line":29,"column":37},"line":29,"code":"    it('should get value from .prop()', () => {\n      expect(sheet.getRule('a').prop('margin')).to.be(margin)\n    })","file":"integration/houdini.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should set valid value with .prop()","suites":["Integration: houdini","use unit value"],"updatePoint":{"line":33,"column":43},"line":33,"code":"    it('should set valid value with .prop()', () => {\n      const width = CSS.px(10)\n      const rule = sheet.getRule('a')\n      rule.prop('width', width)\n      expect(rule.prop('width')).to.be(width)\n    })","file":"integration/houdini.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should return valid .toString()","suites":["Integration: houdini","use unit value"],"updatePoint":{"line":40,"column":39},"line":40,"code":"    it('should return valid .toString()', () => {\n      expect(sheet.toString()).to.be(stripIndent`\n        .a-id {\n          margin: 42px;\n        }\n      `)\n    })","file":"integration/houdini.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should not call hooks twice on the same rule to enable cache plugin","suites":["Integration: plugins","common"],"updatePoint":{"line":18,"column":75},"line":18,"code":"    it('should not call hooks twice on the same rule to enable cache plugin', () => {\n      const styles = {a: {color: 'red'}}\n      let receivedRule\n      let processed = 0\n      jss.use({\n        onCreateRule: () => receivedRule,\n        onProcessRule: (rule) => {\n          receivedRule = rule\n          processed++\n        }\n      })\n      // Process rules once.\n      jss.createStyleSheet(styles)\n      jss.createStyleSheet(styles)\n      expect(processed).to.be(1)\n    })","file":"integration/plugins.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should call hooks in the correct order","suites":["Integration: plugins","common"],"updatePoint":{"line":35,"column":46},"line":35,"code":"    it('should call hooks in the correct order', () => {\n      jss.use({\n        onProcessRule: (rule) => {\n          if (rule.key === 'a') {\n            rule.options.sheet.addRule('b', {color: 'green'}, {index: 1})\n          }\n        }\n      })\n\n      const selectors = []\n      jss.use({\n        onProcessRule: (rule) => {\n          selectors.push(rule.selector)\n        }\n      })\n\n      const sheet = jss.createStyleSheet({\n        a: {color: 'red'},\n        c: {color: 'blue'}\n      })\n\n      expect(sheet.indexOf(sheet.getRule('a'))).to.be(0)\n      expect(sheet.indexOf(sheet.getRule('b'))).to.be(1)\n      expect(sheet.indexOf(sheet.getRule('c'))).to.be(2)\n      expect(sheet.toString()).to.be(stripIndent`\n        .a-id {\n          color: red;\n        }\n        .b-id {\n          color: green;\n        }\n        .c-id {\n          color: blue;\n        }\n      `)\n      expect(selectors).to.eql(['.b-id', '.a-id', '.c-id'])\n    })","file":"integration/plugins.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should warn when unknown hook name is used","suites":["Integration: plugins","common"],"updatePoint":{"line":73,"column":50},"line":73,"code":"    it('should warn when unknown hook name is used', () => {\n      const spy = sinon.spy(console, 'warn')\n\n      jss.use({\n        unknownHook: () => null\n      })\n\n      expect(spy.callCount).to.be(1)\n      expect(spy.calledWithExactly('Warning: [JSS] Unknown hook \"unknownHook\".')).to.be(true)\n\n      console.warn.restore()\n    })","file":"integration/plugins.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should run user-defined plugins in .setup() first, internal second","suites":["Integration: plugins","common"],"updatePoint":{"line":86,"column":74},"line":86,"code":"    it('should run user-defined plugins in .setup() first, internal second', () => {\n      jss = create({\n        createGenerateId,\n        plugins: [\n          {\n            onProcessStyle(style) {\n              if ('animationName' in style) {\n                return {'animation-name': style.animationName}\n              }\n              return style\n            }\n          }\n        ]\n      })\n\n      const sheet = jss.createStyleSheet({\n        '@keyframes a': {\n          to: {height: '100%'}\n        },\n        b: {\n          animationName: '$a'\n        }\n      })\n\n      expect(sheet.toString()).to.be(stripIndent`\n        @keyframes keyframes-a-id {\n          to {\n            height: 100%;\n          }\n        }\n        .b-id {\n          animation-name: keyframes-a-id;\n        }\n      `)\n    })","file":"integration/plugins.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should run user-defined plugins in .use() first, internal second","suites":["Integration: plugins","common"],"updatePoint":{"line":122,"column":72},"line":122,"code":"    it('should run user-defined plugins in .use() first, internal second', () => {\n      jss = create({createGenerateId}).use({\n        onProcessStyle(style) {\n          if ('animationName' in style) {\n            return {'animation-name': style.animationName}\n          }\n          return style\n        }\n      })\n\n      const sheet = jss.createStyleSheet({\n        '@keyframes a': {\n          to: {height: '100%'}\n        },\n        b: {\n          animationName: '$a'\n        }\n      })\n\n      expect(sheet.toString()).to.be(stripIndent`\n        @keyframes keyframes-a-id {\n          to {\n            height: 100%;\n          }\n        }\n        .b-id {\n          animation-name: keyframes-a-id;\n        }\n      `)\n    })","file":"integration/plugins.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should be executed just once","suites":["Integration: plugins","onProcessRule"],"updatePoint":{"line":173,"column":36},"line":173,"code":"    it('should be executed just once', () => {\n      expect(executed).to.be(1)\n    })","file":"integration/plugins.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should pass right arguments","suites":["Integration: plugins","onProcessRule"],"updatePoint":{"line":177,"column":35},"line":177,"code":"    it('should pass right arguments', () => {\n      expect(sheet).to.be(receivedSheet)\n      expect(sheet.getRule('a')).to.be(receivedRule)\n    })","file":"integration/plugins.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should be executed just once","suites":["Integration: plugins","onCreateRule"],"updatePoint":{"line":206,"column":36},"line":206,"code":"    it('should be executed just once', () => {\n      expect(executed).to.be(1)\n    })","file":"integration/plugins.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should pass right arguments","suites":["Integration: plugins","onCreateRule"],"updatePoint":{"line":210,"column":35},"line":210,"code":"    it('should pass right arguments', () => {\n      expect(receivedName).to.be('a')\n      expect(receivedDecl).to.eql({float: 'left'})\n      expect(receivedOptions).to.be.an(Object)\n    })","file":"integration/plugins.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should have referenced the raw decl before","suites":["Integration: plugins","onCreateRule"],"updatePoint":{"line":216,"column":50},"line":216,"code":"    it('should have referenced the raw decl before', () => {\n      expect(rawStyle).to.be(style)\n    })","file":"integration/plugins.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should be executed just once","suites":["Integration: plugins","onProcessSheet"],"updatePoint":{"line":237,"column":36},"line":237,"code":"    it('should be executed just once', () => {\n      expect(executed).to.be(1)\n    })","file":"integration/plugins.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should pass right arguments","suites":["Integration: plugins","onProcessSheet"],"updatePoint":{"line":241,"column":35},"line":241,"code":"    it('should pass right arguments', () => {\n      expect(receivedSheet).to.be.a(StyleSheet)\n    })","file":"integration/plugins.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should pass rule correctly","suites":["Integration: plugins",".createRule() with onProcessRule and onCreateRule"],"updatePoint":{"line":260,"column":34},"line":260,"code":"    it('should pass rule correctly', () => {\n      const rule = jss.createRule()\n      expect(rule).to.be(receivedRule)\n      expect(executed).to.be(1)\n    })","file":"integration/plugins.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should run plugins on @media rule","suites":["Integration: plugins",".createRule() with onProcessRule and onCreateRule"],"updatePoint":{"line":266,"column":41},"line":266,"code":"    it('should run plugins on @media rule', () => {\n      const rule = jss.createRule('@media', {\n        button: {float: 'left'}\n      })\n      expect(rule).to.be(receivedRule)\n      expect(executed).to.be(2)\n    })","file":"integration/plugins.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should run plugins on @keyframes rule","suites":["Integration: plugins",".createRule() with onProcessRule and onCreateRule"],"updatePoint":{"line":274,"column":45},"line":274,"code":"    it('should run plugins on @keyframes rule', () => {\n      const rule = jss.createRule('@keyframes a', {\n        from: {top: 0},\n        to: {top: 10}\n      })\n      expect(rule).to.be(receivedRule)\n      expect(executed).to.be(3)\n    })","file":"integration/plugins.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should accept multiple plugins","suites":["Integration: plugins",".createRule() with onProcessRule and onCreateRule"],"updatePoint":{"line":283,"column":38},"line":283,"code":"    it('should accept multiple plugins', () => {\n      let receivedRule1\n      let receivedRule2\n      const plugin1 = {\n        onProcessRule: (rule) => {\n          receivedRule1 = rule\n        }\n      }\n      const plugin2 = {\n        onProcessRule: (rule) => {\n          receivedRule2 = rule\n        }\n      }\n      jss.use(plugin1, plugin2)\n      const rule = jss.createRule()\n      expect(receivedRule1).to.be(rule)\n      expect(receivedRule2).to.be(rule)\n    })","file":"integration/plugins.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should be executed just once","suites":["Integration: plugins","onChangeValue"],"updatePoint":{"line":325,"column":36},"line":325,"code":"    it('should be executed just once', () => {\n      sheet.getRule('a').prop('color', 'green')\n      expect(executed).to.be(1)\n    })","file":"integration/plugins.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should receive correct arguments","suites":["Integration: plugins","onChangeValue"],"updatePoint":{"line":330,"column":40},"line":330,"code":"    it('should receive correct arguments', () => {\n      const rule = sheet.getRule('a')\n      rule.prop('color', 'green')\n      expect(receivedValue).to.be('green')\n      expect(receivedProp).to.be('color')\n      expect(receivedRule).to.be(rule)\n    })","file":"integration/plugins.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should compile to correct CSS string","suites":["Integration: plugins","onChangeValue"],"updatePoint":{"line":338,"column":44},"line":338,"code":"    it('should compile to correct CSS string', () => {\n      expect(sheet.toString()).to.be(stripIndent`\n        .a-id {\n          color: red;\n        }\n      `)\n      sheet.getRule('a').prop('color', 'green')\n      expect(sheet.toString()).to.be(stripIndent`\n        .a-id {\n          color: green;\n        }\n      `)\n    })","file":"integration/plugins.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should pass the new value to the next hook","suites":["Integration: plugins","onChangeValue"],"updatePoint":{"line":352,"column":50},"line":352,"code":"    it('should pass the new value to the next hook', () => {\n      jss.use({onChangeValue: (value) => `${value}-first`})\n      jss.use({onChangeValue: (value) => `${value}-second`})\n      sheet.getRule('a').prop('color', 'green')\n      expect(sheet.toString()).to.be(stripIndent`\n        .a-id {\n          color: green-first-second;\n        }\n      `)\n    })","file":"integration/plugins.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should be executed just once","suites":["Integration: plugins","onProcessStyle"],"updatePoint":{"line":387,"column":36},"line":387,"code":"    it('should be executed just once', () => {\n      expect(executed).to.be(1)\n    })","file":"integration/plugins.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should receive correct arguments","suites":["Integration: plugins","onProcessStyle"],"updatePoint":{"line":391,"column":40},"line":391,"code":"    it('should receive correct arguments', () => {\n      expect(receivedStyle).to.eql({color: 'red'})\n      expect(receivedRule).to.be(sheet.getRule('a'))\n      expect(receivedSheet).to.be(sheet)\n    })","file":"integration/plugins.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should set the returned style","suites":["Integration: plugins","onProcessStyle"],"updatePoint":{"line":397,"column":37},"line":397,"code":"    it('should set the returned style', () => {\n      expect(sheet.getRule('a').style).to.be(newStyle)\n    })","file":"integration/plugins.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should compile to correct CSS string","suites":["Integration: plugins","onProcessStyle"],"updatePoint":{"line":401,"column":44},"line":401,"code":"    it('should compile to correct CSS string', () => {\n      expect(sheet.toString()).to.be(stripIndent`\n        .a-id {\n          color: green;\n        }\n      `)\n    })","file":"integration/plugins.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should not call the hook if rule has no .style","suites":["Integration: plugins","onProcessStyle"],"updatePoint":{"line":409,"column":54},"line":409,"code":"    it('should not call the hook if rule has no .style', () => {\n      let localExecuted = 0\n      jss.use({\n        onProcessStyle: (style, rule, passedSheet) => {\n          receivedStyle = style\n          receivedRule = rule\n          receivedSheet = passedSheet\n          localExecuted++\n          return style\n        }\n      })\n      sheet = jss.createStyleSheet({\n        '@media all': {\n          a: {color: 'red'}\n        }\n      })\n\n      expect(receivedStyle).to.be(newStyle)\n      expect(receivedRule.type).to.be('style')\n      expect(receivedSheet).to.be(sheet)\n      expect(localExecuted).to.be(1)\n    })","file":"integration/plugins.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should pass the style object to the next hook","suites":["Integration: plugins","onProcessStyle"],"updatePoint":{"line":432,"column":53},"line":432,"code":"    it('should pass the style object to the next hook', () => {\n      let passedStyle\n      jss.use({\n        onProcessStyle: (style) => {\n          passedStyle = style\n          return style\n        }\n      })\n      sheet = jss.createStyleSheet({\n        a: {color: 'red'}\n      })\n      expect(sheet.getRule('a').style).to.be(newStyle)\n      expect(passedStyle).to.be(newStyle)\n    })","file":"integration/plugins.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should be executed just once","suites":["Integration: plugins","onUpdate (internal)"],"updatePoint":{"line":471,"column":36},"line":471,"code":"    it('should be executed just once', () => {\n      sheet.update({})\n      expect(executed).to.be(1)\n    })","file":"integration/plugins.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should receive correct arguments","suites":["Integration: plugins","onUpdate (internal)"],"updatePoint":{"line":476,"column":40},"line":476,"code":"    it('should receive correct arguments', () => {\n      const data = {color: 'green'}\n      const rule = sheet.getRule('a')\n      sheet.update(data)\n      expect(receivedData).to.be(data)\n      expect(receivedRule).to.be(rule)\n      expect(receivedSheet).to.be(sheet)\n      expect(rule.prop('color')).to.be('green')\n    })","file":"integration/plugins.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should compile to correct CSS string","suites":["Integration: plugins","onUpdate (internal)"],"updatePoint":{"line":486,"column":44},"line":486,"code":"    it('should compile to correct CSS string', () => {\n      sheet.update({color: 'green'})\n      expect(sheet.toString()).to.be(stripIndent`\n        .a-id {\n          color: green;\n        }\n      `)\n    })","file":"integration/plugins.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should create a rule without args","suites":["Integration: rules",".createRule()"],"updatePoint":{"line":20,"column":41},"line":20,"code":"    it('should create a rule without args', () => {\n      const rule = jss.createRule()\n      expect(rule.type).to.be('style')\n      expect(rule.selector).to.be('.unnamed-id')\n    })","file":"integration/rules.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should accept styles only","suites":["Integration: rules",".createRule()"],"updatePoint":{"line":26,"column":33},"line":26,"code":"    it('should accept styles only', () => {\n      const style = {float: 'left'}\n      const rule = jss.createRule(style)\n      expect(rule.style).to.eql(style)\n      expect(rule.type).to.be('style')\n      expect(rule.selector).to.be('.unnamed-id')\n    })","file":"integration/rules.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should accept styles and options","suites":["Integration: rules",".createRule()"],"updatePoint":{"line":34,"column":40},"line":34,"code":"    it('should accept styles and options', () => {\n      const style = {float: 'left'}\n      const options = {something: true}\n      const rule = jss.createRule(style, options)\n      expect(rule.style).to.eql(style)\n      expect(rule.type).to.be('style')\n      expect(rule.selector).to.be('.unnamed-id')\n      expect(rule.options.jss).to.be(jss)\n      expect(rule.options.something).to.be(true)\n    })","file":"integration/rules.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should accept all params","suites":["Integration: rules",".createRule()"],"updatePoint":{"line":45,"column":32},"line":45,"code":"    it('should accept all params', () => {\n      const style = {float: 'left'}\n      const options = {someOption: true}\n      const rule = jss.createRule('a', style, options)\n      expect(rule.style).to.eql(style)\n      expect(rule.type).to.be('style')\n      expect(rule.selector).to.be('.a-id')\n      expect(rule.options.someOption).to.be(true)\n      expect(rule.options.jss).to.be(jss)\n    })","file":"integration/rules.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should return CSS","suites":["Integration: rules","rule.toString()"],"updatePoint":{"line":58,"column":25},"line":58,"code":"    it('should return CSS', () => {\n      const rule = jss.createRule('a', {float: 'left', width: '1px'})\n      expect(rule.toString()).to.be(stripIndent`\n        .a-id {\n          float: left;\n          width: 1px;\n        }\n      `)\n    })","file":"integration/rules.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should return CSS with comma separated values","suites":["Integration: rules","rule.toString()","array values"],"updatePoint":{"line":69,"column":55},"line":69,"code":"      it('should return CSS with comma separated values', () => {\n        const rule = jss.createRule('a', {\n          border: ['1px solid red', '1px solid blue']\n        })\n        expect(rule.toString()).to.be(stripIndent`\n          .a-id {\n            border: 1px solid red, 1px solid blue;\n          }\n        `)\n      })","file":"integration/rules.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should return CSS with space separated values","suites":["Integration: rules","rule.toString()","array values"],"updatePoint":{"line":80,"column":55},"line":80,"code":"      it('should return CSS with space separated values', () => {\n        const rule = jss.createRule('a', {\n          margin: [['5px', '10px']]\n        })\n        expect(rule.toString()).to.be(stripIndent`\n          .a-id {\n            margin: 5px 10px;\n          }\n        `)\n      })","file":"integration/rules.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should return CSS with fallbacks object","suites":["Integration: rules","rule.toString()","fallbacks"],"updatePoint":{"line":93,"column":49},"line":93,"code":"      it('should return CSS with fallbacks object', () => {\n        const rule = jss.createRule('a', {\n          display: 'run-in',\n          fallbacks: {display: 'inline'}\n        })\n        expect(rule.toString()).to.be(stripIndent`\n          .a-id {\n            display: inline;\n            display: run-in;\n          }\n        `)\n      })","file":"integration/rules.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should return CSS with fallbacks array","suites":["Integration: rules","rule.toString()","fallbacks"],"updatePoint":{"line":106,"column":48},"line":106,"code":"      it('should return CSS with fallbacks array', () => {\n        const rule = jss.createRule('a', {\n          display: 'run-in',\n          fallbacks: [{display: 'inline'}]\n        })\n        expect(rule.toString()).to.be(stripIndent`\n          .a-id {\n            display: inline;\n            display: run-in;\n          }\n        `)\n      })","file":"integration/rules.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should return CSS with comma separated values inside of fallbacks","suites":["Integration: rules","rule.toString()","fallbacks"],"updatePoint":{"line":119,"column":75},"line":119,"code":"      it('should return CSS with comma separated values inside of fallbacks', () => {\n        let rule = jss.createRule('a', {\n          fallbacks: {\n            border: ['1px solid red', '1px solid blue']\n          }\n        })\n        expect(rule.toString()).to.be(stripIndent`\n          .a-id {\n            border: 1px solid red, 1px solid blue;\n          }\n        `)\n\n        rule = jss.createRule('a', {\n          fallbacks: [\n            {\n              border: ['1px solid red', '1px solid blue']\n            }\n          ]\n        })\n        expect(rule.toString()).to.be(stripIndent`\n          .a-id {\n            border: 1px solid red, 1px solid blue;\n          }\n        `)\n      })","file":"integration/rules.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should return CSS from @charset rule","suites":["Integration: rules","rule.toString()","fallbacks"],"updatePoint":{"line":146,"column":44},"line":146,"code":"    it('should return CSS from @charset rule', () => {\n      const rule = jss.createRule('@charset', '\"utf-8\"')\n      expect(rule.type).to.be('simple')\n      expect(rule.key).to.be('@charset')\n      expect(rule.value).to.be('\"utf-8\"')\n      expect(rule.toString()).to.be('@charset \"utf-8\";')\n    })","file":"integration/rules.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should return CSS from @import with single value","suites":["Integration: rules","rule.toString()","@import rule"],"updatePoint":{"line":155,"column":58},"line":155,"code":"      it('should return CSS from @import with single value', () => {\n        let rule = jss.createRule('@import', '\"something\"')\n        expect(rule.type).to.be('simple')\n        expect(rule.key).to.be('@import')\n        expect(rule.value).to.be('\"something\"')\n        expect(rule.toString()).to.be('@import \"something\";')\n        rule = jss.createRule('@import', 'url(\"something\") print')\n        expect(rule.toString()).to.be('@import url(\"something\") print;')\n      })","file":"integration/rules.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should return CSS from @import with array value","suites":["Integration: rules","rule.toString()","@import rule"],"updatePoint":{"line":165,"column":57},"line":165,"code":"      it('should return CSS from @import with array value', () => {\n        const value = ['url(\"something\") print', 'url(\"something\") screen']\n        const rule = jss.createRule('@import', value)\n        expect(rule.type).to.be('simple')\n        expect(rule.key).to.be('@import')\n        expect(rule.value).to.eql(value)\n        expect(rule.toString()).to.be(stripIndent`\n          @import url(\"something\") print;\n          @import url(\"something\") screen;\n        `)\n      })","file":"integration/rules.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should return CSS from @namespace rule","suites":["Integration: rules","rule.toString()","@import rule"],"updatePoint":{"line":178,"column":46},"line":178,"code":"    it('should return CSS from @namespace rule', () => {\n      const rule = jss.createRule('@namespace', 'svg url(http://www.w3.org/2000/svg)')\n      expect(rule.type).to.be('simple')\n      expect(rule.key).to.be('@namespace')\n      expect(rule.value).to.be('svg url(http://www.w3.org/2000/svg)')\n      expect(rule.toString()).to.be('@namespace svg url(http://www.w3.org/2000/svg);')\n    })","file":"integration/rules.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should return CSS from @keyframes rule","suites":["Integration: rules","rule.toString()","@import rule"],"updatePoint":{"line":186,"column":46},"line":186,"code":"    it('should return CSS from @keyframes rule', () => {\n      const rule = jss.createRule('@keyframes a', {\n        from: {top: 0},\n        '30%': {top: 30},\n        '60%, 70%': {top: 80}\n      })\n      expect(rule.type).to.be('keyframes')\n      expect(rule.key).to.be('keyframes-a')\n      expect(rule.toString()).to.be(stripIndent`\n        @keyframes keyframes-a-id {\n          from {\n            top: 0;\n          }\n          30% {\n            top: 30;\n          }\n          60%, 70% {\n            top: 80;\n          }\n        }\n      `)\n    })","file":"integration/rules.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should return CSS","suites":["Integration: rules","rule.toString()","@media rule"],"updatePoint":{"line":210,"column":27},"line":210,"code":"      it('should return CSS', () => {\n        const rule = jss.createRule('@media print', {a: {display: 'none'}})\n        expect(rule.type).to.be('conditional')\n        expect(rule.key).to.be('@media print')\n        expect(rule.toString()).to.be(stripIndent`\n          @media print {\n            .a-id {\n              display: none;\n            }\n          }\n        `)\n      })","file":"integration/rules.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should return CSS","suites":["Integration: rules","rule.toString()","@media rule"],"updatePoint":{"line":223,"column":27},"line":223,"code":"      it('should return CSS', () => {\n        const rule = jss.createRule('@media print', {\n          button: {display: 'none'}\n        })\n        expect(rule.type).to.be('conditional')\n        expect(rule.key).to.be('@media print')\n        expect(rule.toString()).to.be(stripIndent`\n          @media print {\n            .button-id {\n              display: none;\n            }\n          }\n        `)\n      })","file":"integration/rules.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should support @media without space","suites":["Integration: rules","rule.toString()","@media rule"],"updatePoint":{"line":238,"column":45},"line":238,"code":"      it('should support @media without space', () => {\n        const rule = jss.createRule('@media(max-width: 715px)', {\n          a: {color: 'red'}\n        })\n        expect(rule.type).to.be('conditional')\n        expect(rule.key).to.be('@media(max-width: 715px)')\n        expect(rule.toString()).to.be(stripIndent`\n          @media(max-width: 715px) {\n            .a-id {\n              color: red;\n            }\n          }\n        `)\n      })","file":"integration/rules.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should return CSS without empty rule","suites":["Integration: rules","rule.toString()","@media rule"],"updatePoint":{"line":253,"column":46},"line":253,"code":"      it('should return CSS without empty rule', () => {\n        const rule = jss.createRule('@media print', {button: {}})\n        expect(rule.type).to.be('conditional')\n        expect(rule.key).to.be('@media print')\n        expect(rule.toString()).to.be('')\n      })","file":"integration/rules.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should return CSS","suites":["Integration: rules","rule.toString()","@font-face rule"],"updatePoint":{"line":262,"column":27},"line":262,"code":"      it('should return CSS', () => {\n        const rule = jss.createRule('@font-face', {\n          'font-family': 'MyHelvetica',\n          src: 'local(\"Helvetica\")'\n        })\n        expect(rule.type).to.be('font-face')\n        expect(rule.key).to.be('@font-face')\n        expect(rule.toString()).to.be(stripIndent`\n          @font-face {\n            font-family: MyHelvetica;\n            src: local(\"Helvetica\");\n          }\n        `)\n      })","file":"integration/rules.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should handle when @font-face is an array","suites":["Integration: rules","rule.toString()","@font-face rule"],"updatePoint":{"line":277,"column":51},"line":277,"code":"      it('should handle when @font-face is an array', () => {\n        const rule = jss.createRule('@font-face', [\n          {\n            'font-family': 'MyHelvetica',\n            src: 'local(\"Helvetica\")'\n          },\n          {\n            'font-family': 'MyComicSans',\n            src: 'local(\"ComicSans\")'\n          }\n        ])\n        expect(rule.type).to.be('font-face')\n        expect(rule.key).to.be('@font-face')\n        expect(rule.toString()).to.be(stripIndent`\n          @font-face {\n            font-family: MyHelvetica;\n            src: local(\"Helvetica\");\n          }\n          @font-face {\n            font-family: MyComicSans;\n            src: local(\"ComicSans\");\n          }\n        `)\n      })","file":"integration/rules.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should handle multiple @font-face","suites":["Integration: rules","rule.toString()","@font-face rule"],"updatePoint":{"line":302,"column":43},"line":302,"code":"      it('should handle multiple @font-face', () => {\n        const sheet = jss.createStyleSheet()\n        sheet.addRule('@font-face', {\n          'font-family': 'MyHelvetica',\n          src: 'local(\"Helvetica\")'\n        })\n        sheet.addRule('@font-face', {\n          'font-family': 'MyComicSans',\n          src: 'local(\"ComicSans\")'\n        })\n        expect(sheet.toString()).to.be(stripIndent`\n          @font-face {\n            font-family: MyHelvetica;\n            src: local(\"Helvetica\");\n          }\n          @font-face {\n            font-family: MyComicSans;\n            src: local(\"ComicSans\");\n          }\n        `)\n      })","file":"integration/rules.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should warn","suites":["Integration: rules","rule.toString()","unknown at-rule"],"updatePoint":{"line":332,"column":21},"line":332,"code":"      it('should warn', () => {\n        jss.createRule('@unknown', {\n          color: 'red'\n        })\n\n        expect(spy.callCount).to.be(1)\n        expect(spy.args[0].length).to.be(1)\n        expect(spy.args[0][0]).to.be('Warning: [JSS] Unknown rule @unknown')\n      })","file":"integration/rules.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should return CSS from @container rule","suites":["Integration: rules","rule.toString()","unknown at-rule"],"updatePoint":{"line":347,"column":46},"line":347,"code":"    it('should return CSS from @container rule', () => {\n      const rule = jss.createRule('@container ( min-width: 500px )', {\n        button: {\n          display: 'none'\n        }\n      })\n      expect(rule.type).to.be('conditional')\n      expect(rule.key).to.be('@container ( min-width: 500px )')\n      expect(rule.toString()).to.be(stripIndent`\n        @container ( min-width: 500px ) {\n          .button-id {\n            display: none;\n          }\n        }\n      `)\n    })","file":"integration/rules.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should return CSS from @supports rule","suites":["Integration: rules","rule.toString()","unknown at-rule"],"updatePoint":{"line":364,"column":45},"line":364,"code":"    it('should return CSS from @supports rule', () => {\n      const rule = jss.createRule('@supports ( display: flexbox )', {\n        button: {\n          display: 'none'\n        }\n      })\n      expect(rule.type).to.be('conditional')\n      expect(rule.key).to.be('@supports ( display: flexbox )')\n      expect(rule.toString()).to.be(stripIndent`\n        @supports ( display: flexbox ) {\n          .button-id {\n            display: none;\n          }\n        }\n      `)\n    })","file":"integration/rules.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should return CSS from @viewport rule","suites":["Integration: rules","rule.toString()","@viewport rule"],"updatePoint":{"line":382,"column":47},"line":382,"code":"      it('should return CSS from @viewport rule', () => {\n        const rule = jss.createRule('@viewport', {\n          zoom: 1\n        })\n        expect(rule.type).to.be('viewport')\n        expect(rule.key).to.be('@viewport')\n        expect(rule.toString()).to.be(stripIndent`\n          @viewport {\n            zoom: 1;\n          }\n        `)\n      })","file":"integration/rules.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should return CSS from @-ms-viewport rule","suites":["Integration: rules","rule.toString()","@viewport rule"],"updatePoint":{"line":395,"column":51},"line":395,"code":"      it('should return CSS from @-ms-viewport rule', () => {\n        const rule = jss.createRule('@-ms-viewport', {\n          zoom: 1\n        })\n        expect(rule.type).to.be('viewport')\n        expect(rule.key).to.be('@-ms-viewport')\n        expect(rule.toString()).to.be(stripIndent`\n          @-ms-viewport {\n            zoom: 1;\n          }\n        `)\n      })","file":"integration/rules.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should remove whitespaces","suites":["Integration: rules","rule.toString()","@viewport rule"],"updatePoint":{"line":409,"column":33},"line":409,"code":"    it('should remove whitespaces', () => {\n      const rule = jss.createRule('a', {float: 'left', width: '1px'})\n      expect(rule.toString({format: false})).to.be('.a-id{float:left;width:1px;}')\n    })","file":"integration/rules.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should return style","suites":["Integration: rules","rule.toJSON()"],"updatePoint":{"line":416,"column":27},"line":416,"code":"    it('should return style', () => {\n      const style = {color: 'red'}\n      const rule = jss.createRule(style)\n      expect(rule.toJSON()).to.eql(style)\n    })","file":"integration/rules.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should skip nested rules","suites":["Integration: rules","rule.toJSON()"],"updatePoint":{"line":422,"column":32},"line":422,"code":"    it('should skip nested rules', () => {\n      const style = {color: 'red', '&:hover': {color: 'blue'}}\n      const rule = jss.createRule(style)\n      expect(rule.toJSON()).to.eql({color: 'red'})\n    })","file":"integration/rules.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should skip fallbacks","suites":["Integration: rules","rule.toJSON()"],"updatePoint":{"line":428,"column":29},"line":428,"code":"    it('should skip fallbacks', () => {\n      const rule = jss.createRule({\n        display: 'run-in',\n        fallbacks: {display: 'inline'}\n      })\n      expect(rule.toJSON()).to.eql({display: 'run-in'})\n    })","file":"integration/rules.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should have proper comma separated values","suites":["Integration: rules","rule.toJSON()"],"updatePoint":{"line":436,"column":49},"line":436,"code":"    it('should have proper comma separated values', () => {\n      const rule = jss.createRule({\n        border: ['1px solid red', '1px solid blue']\n      })\n      expect(rule.toJSON()).to.eql({border: '1px solid red, 1px solid blue'})\n    })","file":"integration/rules.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should have proper space separated values","suites":["Integration: rules","rule.toJSON()"],"updatePoint":{"line":443,"column":49},"line":443,"code":"    it('should have proper space separated values', () => {\n      const rule = jss.createRule({\n        margin: [['5px', '10px']]\n      })\n      expect(rule.toJSON()).to.eql({margin: '5px 10px'})\n    })","file":"integration/rules.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should get a prop","suites":["Integration: rules","rule.prop()","get and set prop"],"updatePoint":{"line":453,"column":27},"line":453,"code":"      it('should get a prop', () => {\n        const rule = jss.createRule({color: 'red'})\n        expect(rule.prop('color')).to.be('red')\n      })","file":"integration/rules.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should set a prop","suites":["Integration: rules","rule.prop()","get and set prop"],"updatePoint":{"line":458,"column":27},"line":458,"code":"      it('should set a prop', () => {\n        const rule = jss.createRule({color: 'red'})\n        rule.prop('color', 'green')\n        expect(rule.prop('color')).to.be('green')\n      })","file":"integration/rules.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should ignore null when prop wasn't defined before","suites":["Integration: rules","rule.prop()","handle null or undefined value"],"updatePoint":{"line":466,"column":60},"line":466,"code":"      it(\"should ignore null when prop wasn't defined before\", () => {\n        const rule = jss.createRule()\n        rule.prop('abc', null)\n        expect('abc' in rule.style).to.be(false)\n      })","file":"integration/rules.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should ignore undefined when prop wasn't defined before","suites":["Integration: rules","rule.prop()","handle null or undefined value"],"updatePoint":{"line":472,"column":65},"line":472,"code":"      it(\"should ignore undefined when prop wasn't defined before\", () => {\n        const rule = jss.createRule()\n        rule.prop('abc', undefined)\n        expect('abc' in rule.style).to.be(false)\n      })","file":"integration/rules.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should remove prop when null was passed and prop was defined before","suites":["Integration: rules","rule.prop()","handle null or undefined value"],"updatePoint":{"line":478,"column":77},"line":478,"code":"      it('should remove prop when null was passed and prop was defined before', () => {\n        const rule = jss.createRule({color: 'red'})\n        rule.prop('color', null)\n        expect('color' in rule.style).to.be(false)\n      })","file":"integration/rules.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should not use null when prop wasn't defined before","suites":["Integration: rules","rule.prop()","handle null or undefined returned from fn value"],"updatePoint":{"line":486,"column":61},"line":486,"code":"      it(\"should not use null when prop wasn't defined before\", () => {\n        jss.use({onChangeValue: () => null})\n        const rule = jss.createRule()\n        rule.prop('abc', 'red')\n        expect('abc' in rule.style).to.be(false)\n      })","file":"integration/rules.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should not use undefined when prop wasn't defined before","suites":["Integration: rules","rule.prop()","handle null or undefined returned from fn value"],"updatePoint":{"line":493,"column":66},"line":493,"code":"      it(\"should not use undefined when prop wasn't defined before\", () => {\n        jss.use({onChangeValue: () => undefined})\n        const rule = jss.createRule()\n        rule.prop('abc', 'red')\n        expect('abc' in rule.style).to.be(false)\n      })","file":"integration/rules.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should use null to remove the prop when it was defined before","suites":["Integration: rules","rule.prop()","handle null or undefined returned from fn value"],"updatePoint":{"line":500,"column":71},"line":500,"code":"      it('should use null to remove the prop when it was defined before', () => {\n        jss.use({onChangeValue: () => null})\n        const rule = jss.createRule({color: 'red'})\n        rule.prop('color', 'anything')\n        expect('color' in rule.style).to.be(false)\n      })","file":"integration/rules.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should use undefined to remove the prop when it was defined before","suites":["Integration: rules","rule.prop()","handle null or undefined returned from fn value"],"updatePoint":{"line":507,"column":76},"line":507,"code":"      it('should use undefined to remove the prop when it was defined before', () => {\n        jss.use({onChangeValue: () => undefined})\n        const rule = jss.createRule({color: 'red'})\n        rule.prop('color', 'anything')\n        expect('color' in rule.style).to.be(false)\n      })","file":"integration/rules.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should create a sheet without args","suites":["Integration: sheet",".createStyleSheet()"],"updatePoint":{"line":20,"column":42},"line":20,"code":"    it('should create a sheet without args', () => {\n      const sheet = jss.createStyleSheet()\n      expect(sheet.deployed).to.be(false)\n      expect(sheet.attached).to.be(false)\n      expect(sheet.classes).to.eql({})\n      expect(sheet.keyframes).to.eql({})\n      expect(sheet.options).to.be.an(Object)\n      expect(sheet.options.index).to.be(0)\n      expect(sheet.options.sheet).to.be(sheet)\n      expect(sheet.options.parent).to.be(sheet)\n    })","file":"integration/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should create a sheet with one rule","suites":["Integration: sheet",".createStyleSheet()"],"updatePoint":{"line":32,"column":43},"line":32,"code":"    it('should create a sheet with one rule', () => {\n      const sheet = jss.createStyleSheet({a: {float: 'left'}})\n      const rule = sheet.getRule('a')\n      expect(rule).to.be.a(StyleRule)\n      expect(sheet.classes.a).to.be('a-id')\n      expect(rule.selector).to.be('.a-id')\n    })","file":"integration/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should register a conditional child rule in classes","suites":["Integration: sheet",".createStyleSheet()"],"updatePoint":{"line":40,"column":59},"line":40,"code":"    it('should register a conditional child rule in classes', () => {\n      const sheet = jss.createStyleSheet({\n        '@media print': {\n          a: {float: 'left'}\n        }\n      })\n      expect(sheet.classes.a).to.be('a-id')\n    })","file":"integration/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should create rule classNames using the rule name","suites":["Integration: sheet",".createStyleSheet()"],"updatePoint":{"line":49,"column":57},"line":49,"code":"    it('should create rule classNames using the rule name', () => {\n      const styles = {bar: {color: 'red'}}\n      const sheet = jss.createStyleSheet(styles)\n      expect(sheet.classes.bar).to.be('bar-id')\n    })","file":"integration/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should ref original style object in RuleList#raw","suites":["Integration: sheet",".createStyleSheet()"],"updatePoint":{"line":55,"column":56},"line":55,"code":"    it('should ref original style object in RuleList#raw', () => {\n      const styles = {a: {color: 'red'}}\n      const sheet = jss.createStyleSheet(styles)\n      // jss-plugin-cache relies on `a` being a ref to the original object.\n      expect(sheet.getRule('a').options.parent.rules.raw.a).to.be(styles.a)\n    })","file":"integration/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should allow generateId override","suites":["Integration: sheet",".createStyleSheet()"],"updatePoint":{"line":62,"column":40},"line":62,"code":"    it('should allow generateId override', () => {\n      const generateId = () => {}\n      const sheet = jss.createStyleSheet(null, {generateId})\n      expect(sheet.options.generateId).to.be(generateId)\n    })","file":"integration/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should have no selector in stringified rule when id gnerator is called","suites":["Integration: sheet",".createStyleSheet()"],"updatePoint":{"line":68,"column":78},"line":68,"code":"    it('should have no selector in stringified rule when id gnerator is called', () => {\n      let css\n      // Simulate cache based id generator.\n      const generateId = (rule) => {\n        css = rule.toString()\n        return css\n      }\n      jss.createStyleSheet({a: {color: 'red', width: '10px'}}, {generateId})\n      expect(css).to.be(stripIndent`\n        color: red;\n        width: 10px;\n      `)\n    })","file":"integration/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should return the index of a rule","suites":["Integration: sheet","sheet.indexOf()"],"updatePoint":{"line":84,"column":41},"line":84,"code":"    it('should return the index of a rule', () => {\n      const sheet = jss.createStyleSheet({\n        a: {color: 'red'},\n        b: {color: 'blue'}\n      })\n      expect(sheet.indexOf(sheet.getRule('a'))).to.be(0)\n      expect(sheet.indexOf(sheet.getRule('b'))).to.be(1)\n      expect(sheet.indexOf(sheet.getRule('c'))).to.be(-1)\n    })","file":"integration/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should add a rule with \"selector\" option","suites":["Integration: sheet","sheet.addRule()"],"updatePoint":{"line":96,"column":48},"line":96,"code":"    it('should add a rule with \"selector\" option', () => {\n      const sheet = jss.createStyleSheet()\n      const rule = sheet.addRule('a', {color: 'red'}, {selector: '.test'})\n      expect(rule.selector).to.be('.test')\n      expect(sheet.getRule('a')).to.be(rule)\n    })","file":"integration/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should add a rule with \"index\" in options","suites":["Integration: sheet","sheet.addRule()"],"updatePoint":{"line":103,"column":49},"line":103,"code":"    it('should add a rule with \"index\" in options', () => {\n      const sheet = jss.createStyleSheet({\n        a: {color: 'red'},\n        c: {color: 'blue'}\n      })\n      sheet.addRule('b', {color: 'green'}, {index: 1})\n      expect(sheet.indexOf(sheet.getRule('a'))).to.be(0)\n      expect(sheet.indexOf(sheet.getRule('b'))).to.be(1)\n      expect(sheet.indexOf(sheet.getRule('c'))).to.be(2)\n      expect(sheet.toString()).to.equal(stripIndent`\n        .a-id {\n          color: red;\n        }\n        .b-id {\n          color: green;\n        }\n        .c-id {\n          color: blue;\n        }\n      `)\n    })","file":"integration/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should add rules with duplicate names","suites":["Integration: sheet","sheet.addRule()"],"updatePoint":{"line":125,"column":45},"line":125,"code":"    it('should add rules with duplicate names', () => {\n      const sheet = jss.createStyleSheet()\n      sheet.addRule('a', {color: 'red'})\n      sheet.addRule('a', {color: 'green'})\n      expect(sheet.classes).to.eql({\n        a: 'a-id',\n        'a-d0': 'a-d0-id'\n      })\n      expect(sheet.toString()).to.be(stripIndent`\n        .a-id {\n          color: red;\n        }\n        .a-d0-id {\n          color: green;\n        }\n      `)\n    })","file":"integration/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should replace a rule with \"selector\" option","suites":["Integration: sheet","sheet.replaceRule()"],"updatePoint":{"line":145,"column":52},"line":145,"code":"    it('should replace a rule with \"selector\" option', () => {\n      const sheet = jss.createStyleSheet()\n      sheet.addRule('a', {color: 'red'})\n      const rule = sheet.replaceRule('a', {color: 'green'}, {selector: '.test'})\n      expect(rule.selector).to.be('.test')\n      expect(sheet.getRule('a')).to.be(rule)\n    })","file":"integration/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should replace a rule in same index","suites":["Integration: sheet","sheet.replaceRule()"],"updatePoint":{"line":153,"column":43},"line":153,"code":"    it('should replace a rule in same index', () => {\n      const sheet = jss.createStyleSheet({\n        a: {color: 'red'},\n        b: {color: 'green'},\n        c: {color: 'blue'}\n      })\n      sheet.replaceRule('b', {color: 'yellow'})\n      expect(sheet.indexOf(sheet.getRule('a'))).to.be(0)\n      expect(sheet.indexOf(sheet.getRule('b'))).to.be(1)\n      expect(sheet.indexOf(sheet.getRule('c'))).to.be(2)\n      expect(sheet.toString()).to.equal(stripIndent`\n        .a-id {\n          color: red;\n        }\n        .b-id {\n          color: yellow;\n        }\n        .c-id {\n          color: blue;\n        }\n      `)\n    })","file":"integration/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should add rule with undefined name","suites":["Integration: sheet","sheet.replaceRule()"],"updatePoint":{"line":176,"column":43},"line":176,"code":"    it('should add rule with undefined name', () => {\n      const sheet = jss.createStyleSheet({\n        a: {color: 'red'}\n      })\n      sheet.replaceRule('b', {color: 'blue'})\n      expect(sheet.classes).to.eql({\n        a: 'a-id',\n        b: 'b-id'\n      })\n      expect(sheet.toString()).to.be(stripIndent`\n        .a-id {\n          color: red;\n        }\n        .b-id {\n          color: blue;\n        }\n      `)\n      expect(sheet.getRule('b')).not.to.be(undefined)\n    })","file":"integration/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should delete a rule","suites":["Integration: sheet","sheet.deleteRule()"],"updatePoint":{"line":198,"column":28},"line":198,"code":"    it('should delete a rule', () => {\n      const sheet = jss.createStyleSheet({a: {color: 'red'}})\n      expect(sheet.deleteRule('a')).to.be(true)\n      expect(sheet.toString()).to.equal('')\n    })","file":"integration/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should compile all rule types to CSS","suites":["Integration: sheet","sheet.toString()"],"updatePoint":{"line":206,"column":44},"line":206,"code":"    it('should compile all rule types to CSS', () => {\n      const sheet = jss.createStyleSheet({\n        '@charset': '\"utf-8\"',\n        '@import': 'bla',\n        '@namespace': 'bla',\n        a: {\n          float: 'left'\n        },\n        '@font-face': {\n          'font-family': 'MyHelvetica',\n          src: 'local(\"Helvetica\")'\n        },\n        '@keyframes a': {\n          from: {top: 0}\n        },\n        '@media print': {\n          b: {display: 'none'}\n        },\n        '@supports ( display: flexbox )': {\n          c: {\n            display: 'none'\n          }\n        }\n      })\n\n      expect(sheet.toString()).to.be(stripIndent`\n        @charset \"utf-8\";\n        @import bla;\n        @namespace bla;\n        .a-id {\n          float: left;\n        }\n        @font-face {\n          font-family: MyHelvetica;\n          src: local(\"Helvetica\");\n        }\n        @keyframes keyframes-a-id {\n          from {\n            top: 0;\n          }\n        }\n        @media print {\n          .b-id {\n            display: none;\n          }\n        }\n        @supports ( display: flexbox ) {\n          .c-id {\n            display: none;\n          }\n        }\n      `)\n    })","file":"integration/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should compile a single media query","suites":["Integration: sheet","sheet.toString()"],"updatePoint":{"line":260,"column":43},"line":260,"code":"    it('should compile a single media query', () => {\n      const sheet = jss.createStyleSheet({\n        '@media (min-width: 1024px)': {a: {color: 'blue'}}\n      })\n      expect(sheet.toString()).to.be(stripIndent`\n        @media (min-width: 1024px) {\n          .a-id {\n            color: blue;\n          }\n        }\n      `)\n    })","file":"integration/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should compile multiple media queries","suites":["Integration: sheet","sheet.toString()"],"updatePoint":{"line":273,"column":45},"line":273,"code":"    it('should compile multiple media queries', () => {\n      const sheet = jss.createStyleSheet({\n        a: {color: 'red'},\n        '@media (min-width: 1024px)': {a: {color: 'blue'}},\n        '@media (min-width: 1000px)': {a: {color: 'green'}}\n      })\n      expect(sheet.toString()).to.be(stripIndent`\n        .a-id {\n          color: red;\n        }\n        @media (min-width: 1024px) {\n          .a-id {\n            color: blue;\n          }\n        }\n        @media (min-width: 1000px) {\n          .a-id {\n            color: green;\n          }\n        }\n      `)\n    })","file":"integration/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should not throw when rule is undefined","suites":["Integration: sheet","sheet.toString()"],"updatePoint":{"line":296,"column":47},"line":296,"code":"    it('should not throw when rule is undefined', () => {\n      const sheet = jss.createStyleSheet({a: undefined})\n      expect(sheet.toString()).to.be('')\n    })","file":"integration/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should use the class name of a conditional child","suites":["Integration: sheet","sheet.toString()","class names of conditional rules"],"updatePoint":{"line":310,"column":58},"line":310,"code":"      it('should use the class name of a conditional child', () => {\n        const sheet = create().createStyleSheet(\n          {\n            '@media print': {\n              a: {float: 'left'}\n            },\n            a: {color: 'red'}\n          },\n          options\n        )\n        expect(sheet.toString()).to.be(stripIndent`\n          @media print {\n            .${id} {\n              float: left;\n            }\n          }\n          .${id} {\n            color: red;\n          }\n        `)\n      })","file":"integration/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should use the class name of the first conditional child","suites":["Integration: sheet","sheet.toString()","class names of conditional rules"],"updatePoint":{"line":332,"column":66},"line":332,"code":"      it('should use the class name of the first conditional child', () => {\n        const sheet = create().createStyleSheet(\n          {\n            '@media print': {\n              a: {float: 'left'}\n            },\n            '@media screen': {\n              a: {float: 'right'}\n            }\n          },\n          options\n        )\n        expect(sheet.toString()).to.be(stripIndent`\n          @media print {\n            .${id} {\n              float: left;\n            }\n          }\n          @media screen {\n            .${id} {\n              float: right;\n            }\n          }\n        `)\n      })","file":"integration/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should skip empty rules","suites":["Integration: sheet","sheet.toString()","skip empty rules"],"updatePoint":{"line":360,"column":33},"line":360,"code":"      it('should skip empty rules', () => {\n        const sheet = jss.createStyleSheet({\n          a: {color: 'red'},\n          b: {},\n          c: {color: 'green'},\n          d: {}\n        })\n        expect(sheet.toString()).to.be(stripIndent`\n          .a-id {\n            color: red;\n          }\n          .c-id {\n            color: green;\n          }\n        `)\n      })","file":"integration/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should skip empty font-face rule","suites":["Integration: sheet","sheet.toString()","skip empty rules"],"updatePoint":{"line":377,"column":42},"line":377,"code":"      it('should skip empty font-face rule', () => {\n        const sheet = jss.createStyleSheet({\n          a: {color: 'red'},\n          b: {},\n          c: {color: 'green'},\n          '@font-face': {}\n        })\n        expect(sheet.toString()).to.be(stripIndent`\n          .a-id {\n            color: red;\n          }\n          .c-id {\n            color: green;\n          }\n        `)\n      })","file":"integration/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should skip empty conditional rule","suites":["Integration: sheet","sheet.toString()","skip empty rules"],"updatePoint":{"line":394,"column":44},"line":394,"code":"      it('should skip empty conditional rule', () => {\n        const sheet = jss.createStyleSheet({\n          a: {color: 'red'},\n          '@media print': {}\n        })\n        expect(sheet.toString()).to.be(stripIndent`\n          .a-id {\n            color: red;\n          }\n        `)\n      })","file":"integration/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should skip empty values","suites":["Integration: sheet","skip empty values"],"updatePoint":{"line":409,"column":32},"line":409,"code":"    it('should skip empty values', () => {\n      const sheet = jss.createStyleSheet({\n        a: {\n          margin: 0,\n          color: null\n        }\n      })\n      expect(sheet.toString()).to.be(stripIndent`\n        .a-id {\n          margin: 0;\n        }\n      `)\n    })","file":"integration/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should skip rule if empty value was skipped","suites":["Integration: sheet","skip empty values"],"updatePoint":{"line":423,"column":51},"line":423,"code":"    it('should skip rule if empty value was skipped', () => {\n      const sheet = jss.createStyleSheet({\n        a: {\n          color: null\n        }\n      })\n      expect(sheet.toString()).to.be('')\n    })","file":"integration/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should escape class name","suites":["Integration: sheet","escape class names"],"updatePoint":{"line":444,"column":32},"line":444,"code":"    it('should escape class name', () => {\n      expect(sheet.toString()).to.be(stripIndent`\n        .a\\\\(\\\\)-id {\n          color: red;\n        }\n      `)\n    })","file":"integration/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should not escape class ref","suites":["Integration: sheet","escape class names"],"updatePoint":{"line":452,"column":35},"line":452,"code":"    it('should not escape class ref', () => {\n      expect(sheet.classes['a()']).to.be('a()-id')\n    })","file":"integration/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should warn when keyframes name is invalid","suites":["Integration: sheet","scoped keyframes"],"updatePoint":{"line":468,"column":50},"line":468,"code":"    it('should warn when keyframes name is invalid', () => {\n      jss.createStyleSheet({\n        '@keyframes %&': {\n          to: {height: '100%'}\n        }\n      })\n\n      expect(spy.callCount).to.be(1)\n      expect(spy.calledWithExactly('Warning: [JSS] Bad keyframes name @keyframes %&')).to.be(true)\n    })","file":"integration/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should register keyframes","suites":["Integration: sheet","scoped keyframes"],"updatePoint":{"line":479,"column":33},"line":479,"code":"    it('should register keyframes', () => {\n      const sheet = jss.createStyleSheet({\n        '@keyframes a': {\n          to: {height: '100%'}\n        }\n      })\n\n      expect(sheet.keyframes).to.eql({a: 'keyframes-a-id'})\n    })","file":"integration/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should replace a ref","suites":["Integration: sheet","scoped keyframes"],"updatePoint":{"line":489,"column":28},"line":489,"code":"    it('should replace a ref', () => {\n      const sheet = jss.createStyleSheet({\n        '@keyframes a': {\n          to: {height: '100%'}\n        },\n        b: {\n          'animation-name': '$a',\n          animation: '$a 5s'\n        }\n      })\n\n      expect(sheet.toString()).to.be(stripIndent`\n        @keyframes keyframes-a-id {\n          to {\n            height: 100%;\n          }\n        }\n        .b-id {\n          animation-name: keyframes-a-id;\n          animation: keyframes-a-id 5s;\n        }\n      `)\n    })","file":"integration/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should warn when referenced in animation-name keyframes not found","suites":["Integration: sheet","scoped keyframes"],"updatePoint":{"line":513,"column":73},"line":513,"code":"    it('should warn when referenced in animation-name keyframes not found', () => {\n      jss.createStyleSheet({\n        '@keyframes a': {\n          to: {height: '100%'}\n        },\n        b: {\n          'animation-name': '$x'\n        }\n      })\n\n      expect(spy.callCount).to.be(1)\n      expect(\n        spy.calledWithExactly('Warning: [JSS] Referenced keyframes rule \"x\" is not defined.')\n      ).to.be(true)\n    })","file":"integration/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should warn when referenced in animation keyframes not found","suites":["Integration: sheet","scoped keyframes"],"updatePoint":{"line":529,"column":68},"line":529,"code":"    it('should warn when referenced in animation keyframes not found', () => {\n      jss.createStyleSheet({\n        '@keyframes a': {\n          to: {height: '100%'}\n        },\n        b: {\n          animation: 'abc $x abc'\n        }\n      })\n\n      expect(spy.callCount).to.be(1)\n      expect(\n        spy.calledWithExactly('Warning: [JSS] Referenced keyframes rule \"x\" is not defined.')\n      ).to.be(true)\n    })","file":"integration/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should leave global animation name untouched","suites":["Integration: sheet","scoped keyframes"],"updatePoint":{"line":545,"column":52},"line":545,"code":"    it('should leave global animation name untouched', () => {\n      const sheet = jss.createStyleSheet({\n        '@keyframes a': {\n          to: {height: '100%'}\n        },\n        b: {\n          'animation-name': 'x'\n        }\n      })\n\n      expect(spy.callCount).to.be(0)\n\n      expect(sheet.toString()).to.be(stripIndent`\n        @keyframes keyframes-a-id {\n          to {\n            height: 100%;\n          }\n        }\n        .b-id {\n          animation-name: x;\n        }\n      `)\n    })","file":"integration/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should work with multiple referenced keyframes","suites":["Integration: sheet","scoped keyframes"],"updatePoint":{"line":569,"column":54},"line":569,"code":"    it('should work with multiple referenced keyframes', () => {\n      const sheet = jss.createStyleSheet({\n        '@keyframes a': {\n          to: {height: '100%'}\n        },\n        '@keyframes b': {\n          to: {height: '100%'}\n        },\n        b: {\n          'animation-name': '$a $b'\n        }\n      })\n\n      expect(spy.callCount).to.be(0)\n\n      expect(sheet.toString()).to.be(stripIndent`\n        @keyframes keyframes-a-id {\n          to {\n            height: 100%;\n          }\n        }\n        @keyframes keyframes-b-id {\n          to {\n            height: 100%;\n          }\n        }\n        .b-id {\n          animation-name: keyframes-a-id keyframes-b-id;\n        }\n      `)\n    })","file":"integration/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should correctly escape the name","suites":["Integration: sheet","scoped keyframes"],"updatePoint":{"line":601,"column":40},"line":601,"code":"    it('should correctly escape the name', () => {\n      const localJss = create({\n        createGenerateId() {\n          return (rule, sheet) => `${sheet.options.classNamePrefix}-${rule.key}-id`\n        }\n      })\n      const sheet = localJss.createStyleSheet(\n        {\n          '@keyframes a': {\n            to: {height: '100%'}\n          },\n          b: {\n            'animation-name': '$a'\n          }\n        },\n        {classNamePrefix: 'connect(A)'}\n      )\n\n      expect(sheet.toString()).to.be(stripIndent`\n        @keyframes connect\\\\(A\\\\)-keyframes-a-id {\n          to {\n            height: 100%;\n          }\n        }\n        .connect\\\\(A\\\\)-b-id {\n          animation-name: connect\\\\(A\\\\)-keyframes-a-id;\n        }\n      `)\n    })","file":"integration/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should unregister","suites":["Integration: sheet","scoped keyframes"],"updatePoint":{"line":631,"column":25},"line":631,"code":"    it('should unregister', () => {\n      const sheet = jss.createStyleSheet({\n        '@keyframes a': {\n          to: {height: '100%'}\n        },\n        b: {\n          'animation-name': 'x'\n        }\n      })\n      sheet.deleteRule('keyframes-a')\n      expect(sheet.toString()).to.be(stripIndent`\n        .b-id {\n          animation-name: x;\n        }\n      `)\n      expect(sheet.getRule('@keyframes keyframes-a')).to.be(undefined)\n      expect(sheet.keyframes).to.eql({})\n    })","file":"integration/sheet.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should add first sheet","suites":["Integration: sheetsRegistry",".add()"],"updatePoint":{"line":18,"column":30},"line":18,"code":"    it('should add first sheet', () => {\n      sheets.add(jss.createStyleSheet())\n      expect(sheets.registry.length).to.be(1)\n    })","file":"integration/sheetsRegistry.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should add 2 sheets","suites":["Integration: sheetsRegistry",".add()"],"updatePoint":{"line":23,"column":27},"line":23,"code":"    it('should add 2 sheets', () => {\n      sheets.add(jss.createStyleSheet())\n      sheets.add(jss.createStyleSheet())\n      expect(sheets.registry.length).to.be(2)\n    })","file":"integration/sheetsRegistry.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should not add duplicates","suites":["Integration: sheetsRegistry",".add()"],"updatePoint":{"line":29,"column":33},"line":29,"code":"    it('should not add duplicates', () => {\n      const sheet = jss.createStyleSheet()\n      sheets.add(sheet)\n      sheets.add(sheet)\n      expect(sheets.registry.length).to.be(1)\n    })","file":"integration/sheetsRegistry.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should add 2 sheets with specific index","suites":["Integration: sheetsRegistry",".add()"],"updatePoint":{"line":36,"column":47},"line":36,"code":"    it('should add 2 sheets with specific index', () => {\n      const sheet0 = jss.createStyleSheet(null, {index: 1})\n      const sheet1 = jss.createStyleSheet(null, {index: 0})\n      sheets.add(sheet0)\n      sheets.add(sheet1)\n      expect(sheets.registry[0]).to.be(sheet1)\n      expect(sheets.registry[1]).to.be(sheet0)\n    })","file":"integration/sheetsRegistry.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should add a sheet with index between 2 others","suites":["Integration: sheetsRegistry",".add()"],"updatePoint":{"line":45,"column":54},"line":45,"code":"    it('should add a sheet with index between 2 others', () => {\n      const sheet0 = jss.createStyleSheet(null, {index: 0})\n      const sheet1 = jss.createStyleSheet(null, {index: 2})\n      const sheet2 = jss.createStyleSheet(null, {index: 1})\n      sheets.add(sheet0)\n      sheets.add(sheet1)\n      sheets.add(sheet2)\n      expect(sheets.registry[0]).to.be(sheet0)\n      expect(sheets.registry[1]).to.be(sheet2)\n      expect(sheets.registry[2]).to.be(sheet1)\n    })","file":"integration/sheetsRegistry.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should remove single sheet","suites":["Integration: sheetsRegistry",".remove()"],"updatePoint":{"line":59,"column":34},"line":59,"code":"    it('should remove single sheet', () => {\n      const sheet = jss.createStyleSheet()\n      sheets.add(sheet)\n      expect(sheets.registry.length).to.be(1)\n      sheets.remove(sheet)\n      expect(sheets.registry.length).to.be(0)\n    })","file":"integration/sheetsRegistry.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should remove first 2 sheets from 3","suites":["Integration: sheetsRegistry",".remove()"],"updatePoint":{"line":67,"column":43},"line":67,"code":"    it('should remove first 2 sheets from 3', () => {\n      const sheet0 = jss.createStyleSheet()\n      const sheet1 = jss.createStyleSheet()\n      const sheet2 = jss.createStyleSheet()\n      sheets.add(sheet0)\n      sheets.add(sheet1)\n      sheets.add(sheet2)\n      expect(sheets.registry.length).to.be(3)\n      sheets.remove(sheet0)\n      sheets.remove(sheet1)\n      expect(sheets.registry.length).to.be(1)\n      expect(sheets.registry[0]).to.be(sheet2)\n    })","file":"integration/sheetsRegistry.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should stringify all","suites":["Integration: sheetsRegistry",".toString()"],"updatePoint":{"line":83,"column":28},"line":83,"code":"    it('should stringify all', () => {\n      const sheet1 = jss.createStyleSheet({a: {color: 'red'}})\n      const sheet2 = jss.createStyleSheet({a: {color: 'blue'}}).attach()\n      sheets.add(sheet1)\n      sheets.add(sheet2)\n      expect(sheets.toString()).to.be(stripIndent`\n        .a-id {\n          color: red;\n        }\n        .a-id {\n          color: blue;\n        }\n      `)\n    })","file":"integration/sheetsRegistry.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should remove whitespaces","suites":["Integration: sheetsRegistry",".toString()"],"updatePoint":{"line":98,"column":33},"line":98,"code":"    it('should remove whitespaces', () => {\n      const sheet1 = jss.createStyleSheet({a: {color: 'red'}})\n      const sheet2 = jss.createStyleSheet({a: {color: 'blue'}}).attach()\n      sheets.add(sheet1)\n      sheets.add(sheet2)\n      expect(sheets.toString({format: false})).to.be('.a-id{color:red;}.a-id{color:blue;}')\n    })","file":"integration/sheetsRegistry.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should stringify detached sheets","suites":["Integration: sheetsRegistry",".toString()"],"updatePoint":{"line":106,"column":40},"line":106,"code":"    it('should stringify detached sheets', () => {\n      const sheet1 = jss.createStyleSheet({a: {color: 'red'}})\n      const sheet2 = jss.createStyleSheet({a: {color: 'blue'}}).attach()\n      sheets.add(sheet1)\n      sheets.add(sheet2)\n      expect(sheets.toString({attached: false})).to.be(stripIndent`\n        .a-id {\n          color: red;\n        }\n      `)\n    })","file":"integration/sheetsRegistry.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should stringify attached sheets","suites":["Integration: sheetsRegistry",".toString()"],"updatePoint":{"line":118,"column":40},"line":118,"code":"    it('should stringify attached sheets', () => {\n      const sheet1 = jss.createStyleSheet({a: {color: 'red'}}).attach()\n      const sheet2 = jss.createStyleSheet({a: {color: 'blue'}})\n      sheets.add(sheet1)\n      sheets.add(sheet2)\n      expect(sheets.toString({attached: true})).to.be(stripIndent`\n        .a-id {\n          color: red;\n        }\n      `)\n    })","file":"integration/sheetsRegistry.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should return a cloned object","suites":["Unit: jss - cloneStyle"],"updatePoint":{"line":8,"column":35},"line":8,"code":"  it('should return a cloned object', () => {\n    const style = {color: 'red'}\n    const clonedStyle = cloneStyle(style)\n    expect(clonedStyle).not.to.be(style)\n    expect(clonedStyle).to.eql(style)\n  })","file":"unit/cloneStyle.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should clone nested object","suites":["Unit: jss - cloneStyle"],"updatePoint":{"line":15,"column":32},"line":15,"code":"  it('should clone nested object', () => {\n    const style = {\n      color: 'red',\n      '@media': {\n        color: 'green'\n      }\n    }\n    const clonedStyle = cloneStyle(style)\n    expect(clonedStyle).to.eql(style)\n  })","file":"unit/cloneStyle.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should clone array","suites":["Unit: jss - cloneStyle"],"updatePoint":{"line":26,"column":24},"line":26,"code":"  it('should clone array', () => {\n    const style = [\n      {\n        'font-family': 'MyHelvetica',\n        src: 'local(\"Helvetica\")'\n      },\n      {\n        'font-family': 'MyComicSans',\n        src: 'local(\"ComicSans\")'\n      }\n    ]\n    const clonedStyle = cloneStyle(style)\n    expect(clonedStyle).to.eql(style)\n  })","file":"unit/cloneStyle.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should accept number","suites":["Unit: jss - cloneStyle"],"updatePoint":{"line":41,"column":26},"line":41,"code":"  it('should accept number', () => {\n    expect(cloneStyle(1)).to.be(1)\n  })","file":"unit/cloneStyle.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should accept null","suites":["Unit: jss - cloneStyle"],"updatePoint":{"line":45,"column":24},"line":45,"code":"  it('should accept null', () => {\n    expect(cloneStyle(null)).to.be(null)\n  })","file":"unit/cloneStyle.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should accept undefined","suites":["Unit: jss - cloneStyle"],"updatePoint":{"line":49,"column":29},"line":49,"code":"  it('should accept undefined', () => {\n    expect(cloneStyle(undefined)).to.be(undefined)\n  })","file":"unit/cloneStyle.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should accept string for SimpleRule","suites":["Unit: jss - cloneStyle"],"updatePoint":{"line":53,"column":41},"line":53,"code":"  it('should accept string for SimpleRule', () => {\n    expect(cloneStyle('something')).to.be('something')\n  })","file":"unit/cloneStyle.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should return a function","suites":["Unit: jss - createGenerateId"],"updatePoint":{"line":20,"column":30},"line":20,"code":"  it('should return a function', () => {\n    expect(createGenerateId()).to.be.a(Function)\n  })","file":"unit/createGenerateId.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should generate a non-production class name","suites":["Unit: jss - createGenerateId"],"updatePoint":{"line":24,"column":49},"line":24,"code":"  it('should generate a non-production class name', () => {\n    const generate = createGenerateId()\n    expect(generate({key: 'a'})).to.be('a-0-1')\n  })","file":"unit/createGenerateId.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should add prefix a non-production class name","suites":["Unit: jss - createGenerateId"],"updatePoint":{"line":29,"column":51},"line":29,"code":"  it('should add prefix a non-production class name', () => {\n    const generate = createGenerateId()\n    expect(generate({key: 'a'}, sheetMock)).to.be('pa-0-0-1')\n  })","file":"unit/createGenerateId.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should increment jss lib version","suites":["Unit: jss - createGenerateId"],"line":34,"code":"  it.skip('should increment jss lib version', () => {","file":"unit/createGenerateId.js","skipped":true,"dir":"packages/jss/tests"},{"name":"should generate a minified class name","suites":["Unit: jss - createGenerateId"],"updatePoint":{"line":39,"column":43},"line":39,"code":"  it('should generate a minified class name', () => {\n    const generate = createGenerateId({minify: true})\n    expect(generate()).to.be('c01')\n  })","file":"unit/createGenerateId.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should add prefix a minified class name","suites":["Unit: jss - createGenerateId"],"updatePoint":{"line":44,"column":45},"line":44,"code":"  it('should add prefix a minified class name', () => {\n    const generate = createGenerateId({minify: true})\n    expect(generate({key: 'a'}, sheetMock)).to.be('p001')\n  })","file":"unit/createGenerateId.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should escape in development","suites":["Unit: jss - escape","with CSS.escape"],"updatePoint":{"line":6,"column":36},"line":6,"code":"    it('should escape in development', () => {\n      expect(escape('test()')).to.be('test\\\\(\\\\)')\n    })","file":"unit/escape.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should extract dynamic styles","suites":["Unit: jss - getDynamicStyles"],"updatePoint":{"line":8,"column":35},"line":8,"code":"  it('should extract dynamic styles', () => {\n    const color = (data) => data.color\n    const styles = {\n      button: {\n        float: 'left',\n        margin: [5, 10],\n        color,\n        '@media screen': {\n          width: null\n        },\n        '@media print': {\n          width: undefined,\n          color\n        },\n        '& a': {\n          color: 'red',\n          '& b': {\n            color\n          }\n        }\n      },\n      '@media': {\n        button: {\n          width: 2,\n          color\n        }\n      },\n      nested: {\n        '& a': {\n          color: 'red'\n        }\n      }\n    }\n    expect(getDynamicStyles(styles)).to.eql({\n      button: {\n        color,\n        '@media print': {\n          color\n        },\n        '& a': {\n          '& b': {\n            color\n          }\n        }\n      },\n      '@media': {\n        button: {\n          color\n        }\n      }\n    })\n  })","file":"unit/getDynamicStyles.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should return null if there are no function values","suites":["Unit: jss - getDynamicStyles"],"updatePoint":{"line":61,"column":56},"line":61,"code":"  it('should return null if there are no function values', () => {\n    const styles = {\n      button: {\n        float: 'left'\n      },\n      '@media': {\n        button: {\n          width: 2\n        }\n      }\n    }\n    expect(getDynamicStyles(styles)).to.be(null)\n  })","file":"unit/getDynamicStyles.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should be correct","suites":["Unit: jss","Instance"],"updatePoint":{"line":19,"column":25},"line":19,"code":"    it('should be correct', () => {\n      expect(jss).to.be.a(Jss)\n    })","file":"unit/Jss.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should have an id","suites":["Unit: jss","Instance"],"updatePoint":{"line":23,"column":25},"line":23,"code":"    it('should have an id', () => {\n      expect(jss.id).to.be.a('number')\n    })","file":"unit/Jss.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should have .plugins registry instance","suites":["Unit: jss","Instance"],"updatePoint":{"line":27,"column":46},"line":27,"code":"    it('should have .plugins registry instance', () => {\n      expect(jss.plugins).to.be.a(PluginsRegistry)\n    })","file":"unit/Jss.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should provide .version prop","suites":["Unit: jss","Instance"],"updatePoint":{"line":31,"column":36},"line":31,"code":"    it('should provide .version prop', () => {\n      expect(jss.version).to.be.a('string')\n    })","file":"unit/Jss.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should provide .generateId method","suites":["Unit: jss","Instance"],"updatePoint":{"line":35,"column":41},"line":35,"code":"    it('should provide .generateId method', () => {\n      expect(jss.generateId).to.be.a(Function)\n    })","file":"unit/Jss.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should have correct .options","suites":["Unit: jss","Instance"],"updatePoint":{"line":39,"column":36},"line":39,"code":"    it('should have correct .options', () => {\n      expect(jss.options).to.be.an(Object)\n      expect(jss.options.createGenerateId).to.be.a(Function)\n      expect(jss.options.Renderer).to.be(DomRenderer)\n      expect(jss.options.plugins).to.be.an(Array)\n    })","file":"unit/Jss.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should setup generateId","suites":["Unit: jss",".setup()"],"updatePoint":{"line":48,"column":31},"line":48,"code":"    it('should setup generateId', () => {\n      const generateId = () => null\n      const createGenerateId = () => generateId\n      jss.setup({createGenerateId})\n      expect(jss.options.createGenerateId).to.be(createGenerateId)\n      expect(jss.generateId).to.be(generateId)\n    })","file":"unit/Jss.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should setup insertionPoint","suites":["Unit: jss",".setup()"],"updatePoint":{"line":56,"column":35},"line":56,"code":"    it('should setup insertionPoint', () => {\n      jss.setup({insertionPoint: 'test'})\n      expect(jss.options.insertionPoint).to.be('test')\n    })","file":"unit/Jss.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should setup custom Renderer","suites":["Unit: jss",".setup()"],"updatePoint":{"line":61,"column":36},"line":61,"code":"    it('should setup custom Renderer', () => {\n      class Renderer {}\n      jss.setup({Renderer})\n      expect(jss.options.Renderer).to.be(Renderer)\n    })","file":"unit/Jss.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should setup without Renderer","suites":["Unit: jss",".setup()"],"updatePoint":{"line":67,"column":37},"line":67,"code":"    it('should setup without Renderer', () => {\n      jss.setup({Renderer: null})\n      expect(jss.options.Renderer).to.be(null)\n    })","file":"unit/Jss.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should setup plugins","suites":["Unit: jss",".setup()"],"updatePoint":{"line":72,"column":28},"line":72,"code":"    it('should setup plugins', () => {\n      let p1 = false\n      let c2 = false\n      let p2 = false\n\n      const plugin1 = {\n        onProcessRule: () => {\n          p1 = true\n        }\n      }\n      const plugin2 = {\n        onCreateRule: () => {\n          c2 = true\n        },\n        onProcessRule: () => {\n          p2 = true\n        }\n      }\n      jss.setup({\n        plugins: [plugin1, plugin2]\n      })\n\n      jss.createRule()\n      expect(p1).to.be(true)\n      expect(p2).to.be(true)\n      expect(c2).to.be(true)\n    })","file":"unit/Jss.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should apply same plugin only once by ref","suites":["Unit: jss",".setup()"],"updatePoint":{"line":100,"column":49},"line":100,"code":"    it('should apply same plugin only once by ref', () => {\n      let called = 0\n      const plugin = {\n        onCreateRule: () => {\n          called++\n        }\n      }\n      jss.setup({plugins: [plugin, plugin]})\n      jss.createRule()\n      expect(called).to.be(1)\n    })","file":"unit/Jss.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should create a sheet","suites":["Unit: jss",".createStyleSheet()"],"updatePoint":{"line":114,"column":29},"line":114,"code":"    it('should create a sheet', () => {\n      expect(jss.createStyleSheet()).to.be.a(StyleSheet)\n    })","file":"unit/Jss.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should remove a sheet","suites":["Unit: jss",".removeStyleSheet()"],"updatePoint":{"line":120,"column":29},"line":120,"code":"    it('should remove a sheet', () => {\n      let detached\n      const sheet = jss.createStyleSheet()\n      sheet.detach = () => {\n        detached = true\n      }\n      jss.removeStyleSheet(sheet)\n      expect(detached).to.be(true)\n      expect(sheets.registry.indexOf(sheet)).to.be(-1)\n    })","file":"unit/Jss.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should use a plugin","suites":["Unit: jss",".use()"],"updatePoint":{"line":143,"column":27},"line":143,"code":"    it('should use a plugin', () => {\n      expect(used).to.be(plugin)\n    })","file":"unit/Jss.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should export StyleRule as a first entry","suites":["Unit: jss - plugins","First plugin should be style rule for perf opt"],"updatePoint":{"line":10,"column":48},"line":10,"code":"    it('should export StyleRule as a first entry', () => {\n      expect(plugins[0]).to.be(plugin)\n    })","file":"unit/plugins.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should return valid index (1 item)","suites":["Unit: SheetsManager",".add()"],"updatePoint":{"line":15,"column":42},"line":15,"code":"    it('should return valid index (1 item)', () => {\n      manager.add({}, {})\n      expect(manager.size).to.be(1)\n    })","file":"unit/SheetsManager.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should return valid index (2 items)","suites":["Unit: SheetsManager",".add()"],"updatePoint":{"line":20,"column":43},"line":20,"code":"    it('should return valid index (2 items)', () => {\n      manager.add({}, {})\n      manager.add({}, {})\n      expect(manager.size).to.be(2)\n    })","file":"unit/SheetsManager.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should not add a duplcate","suites":["Unit: SheetsManager",".add()"],"updatePoint":{"line":26,"column":33},"line":26,"code":"    it('should not add a duplcate', () => {\n      const key = {}\n      manager.add(key, {})\n      manager.add(key, {})\n      expect(manager.size).to.be(1)\n    })","file":"unit/SheetsManager.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should get","suites":["Unit: SheetsManager",".get()"],"updatePoint":{"line":35,"column":18},"line":35,"code":"    it('should get', () => {\n      const manager = new SheetsManager()\n      const key1 = {}\n      const sheet1 = {}\n      manager.add(key1, sheet1)\n      expect(manager.get(key1)).to.be(sheet1)\n      const key2 = {}\n      const sheet2 = {}\n      manager.add(key2, sheet2)\n      expect(manager.get(key2)).to.be(sheet2)\n    })","file":"unit/SheetsManager.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should call .attach()","suites":["Unit: SheetsManager",".manage()"],"updatePoint":{"line":49,"column":29},"line":49,"code":"    it('should call .attach()', () => {\n      const manager = new SheetsManager()\n      const key = {}\n      let attached = 0\n      const sheet = {\n        attach: () => {\n          attached++\n        }\n      }\n      manager.add(key, sheet)\n      manager.manage(key)\n      expect(attached).to.be(1)\n      manager.manage(key)\n      expect(attached).to.be(1)\n    })","file":"unit/SheetsManager.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should call .detach()","suites":["Unit: SheetsManager",".unmanage()"],"updatePoint":{"line":67,"column":29},"line":67,"code":"    it('should call .detach()', () => {\n      const manager = new SheetsManager()\n      const key = {}\n      let detached = 0\n      const sheet = {\n        attach: () => null,\n        detach: () => {\n          detached++\n        }\n      }\n      manager.add(key, sheet)\n      manager.manage(key)\n      manager.manage(key)\n      expect(detached).to.be(0)\n      manager.unmanage(key)\n      expect(detached).to.be(0)\n      manager.unmanage(key)\n      expect(detached).to.be(1)\n      manager.unmanage(key)\n      expect(detached).to.be(1)\n    })","file":"unit/SheetsManager.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should be 0 from the start","suites":["Unit: SheetsManager",".size"],"updatePoint":{"line":91,"column":34},"line":91,"code":"    it('should be 0 from the start', () => {\n      const manager = new SheetsManager()\n      expect(manager.size).to.be(0)\n    })","file":"unit/SheetsManager.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should be increased after addition","suites":["Unit: SheetsManager",".size"],"updatePoint":{"line":95,"column":42},"line":95,"code":"    it('should be increased after addition', () => {\n      const manager = new SheetsManager()\n      const key = {}\n      const sheet = {}\n      manager.add(key, sheet)\n      expect(manager.size).to.be(1)\n    })","file":"unit/SheetsManager.js","skipped":false,"dir":"packages/jss/tests"},{"name":"should reder basic spacing","suites":["React-JSS: styled-system"],"updatePoint":{"line":24,"column":32,"index":747},"line":24,"code":"  it('should reder basic spacing', () => {\n    const registry = new SheetsRegistry();\n    const Div = styled('div')(space);\n    const renderer = TestRenderer.create( /*#__PURE__*/React.createElement(JssProvider, {\n      registry: registry,\n      generateId: createGenerateId()\n    }, /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: theme\n    }, /*#__PURE__*/React.createElement(Div, {\n      px: 1\n    }))));\n    // TODO we should not need a static rule in such cases.\n    expect(registry.toString()).to.be(stripIndent`\n      .scd-0 {}\n      .scd-d0-1 {\n        padding-left: 4px;\n        padding-right: 4px;\n      }\n    `);\n    const {\n      className,\n      classes\n    } = renderer.root.findByType('div').props;\n    expect(className).to.be('scd-0 scd-d0-1');\n    expect(classes).to.be(undefined);\n  });","file":"styledSystem.js","skipped":false,"dir":"packages/react-jss/tests"},{"name":"should render a number of composed style rules with styled API","suites":["React-JSS: styled-system"],"updatePoint":{"line":50,"column":68,"index":1603},"line":50,"code":"  it('should render a number of composed style rules with styled API', () => {\n    const registry = new SheetsRegistry();\n    const Div = styled('div')(compose(space, color, fontSize, width, fontWeight, lineHeight));\n    const renderer = TestRenderer.create( /*#__PURE__*/React.createElement(JssProvider, {\n      registry: registry,\n      generateId: createGenerateId()\n    }, /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: theme\n    }, /*#__PURE__*/React.createElement(Div, {\n      px: [3, 4],\n      py: [1, 2],\n      color: \"white\",\n      bg: \"blue\",\n      fontSize: [4, 5, 6],\n      fontWeight: \"bold\"\n    }))));\n    // TODO we should not need a static rule in such cases.\n    expect(registry.toString()).to.be(stripIndent`\n      .scd-0 {}\n      .scd-d0-1 {\n        color: white;\n        font-size: 32px;\n        font-weight: bold;\n        padding-top: 4px;\n        padding-left: 16px;\n        padding-right: 16px;\n        padding-bottom: 4px;\n        background-color: #07c;\n      }\n      @media screen and (min-width: 40em) {\n        .scd-d0-1 {\n          font-size: 48px;\n          padding-top: 8px;\n          padding-left: 32px;\n          padding-right: 32px;\n          padding-bottom: 8px;\n        }\n      }\n      @media screen and (min-width: 52em) {\n        .scd-d0-1 {\n          font-size: 64px;\n        }\n      }\n    `);\n    const {\n      className,\n      classes\n    } = renderer.root.findByType('div').props;\n    expect(className).to.be('scd-0 scd-d0-1');\n    expect(classes).to.be(undefined);\n  });","file":"styledSystem.js","skipped":false,"dir":"packages/react-jss/tests"},{"name":"should render a number of composed style rules with withStyles API","suites":["React-JSS: styled-system"],"updatePoint":{"line":101,"column":72,"index":3137},"line":101,"code":"  it('should render a number of composed style rules with withStyles API', () => {\n    const registry = new SheetsRegistry();\n    const styles = {\n      css: compose(space, color, fontSize, width, fontWeight, lineHeight)\n    };\n    const MyComponent = ({\n      classes\n    }) => /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.css\n    });\n    const MyStyledComponent = withStyles(styles, {\n      injectTheme: true\n    })(MyComponent);\n    const renderer = TestRenderer.create( /*#__PURE__*/React.createElement(JssProvider, {\n      registry: registry,\n      generateId: createGenerateId()\n    }, /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: theme\n    }, /*#__PURE__*/React.createElement(MyStyledComponent, {\n      px: [3, 4],\n      py: [1, 2],\n      color: \"white\",\n      bg: \"blue\",\n      fontSize: [4, 5, 6],\n      fontWeight: \"bold\"\n    }))));\n    expect(registry.toString()).to.be(stripIndent`\n      .css-0 {}\n      .css-d0-1 {\n        color: white;\n        font-size: 32px;\n        font-weight: bold;\n        padding-top: 4px;\n        padding-left: 16px;\n        padding-right: 16px;\n        padding-bottom: 4px;\n        background-color: #07c;\n      }\n      @media screen and (min-width: 40em) {\n        .css-d0-1 {\n          font-size: 48px;\n          padding-top: 8px;\n          padding-left: 32px;\n          padding-right: 32px;\n          padding-bottom: 8px;\n        }\n      }\n      @media screen and (min-width: 52em) {\n        .css-d0-1 {\n          font-size: 64px;\n        }\n      }\n    `);\n    const {\n      className,\n      classes\n    } = renderer.root.findByType('div').props;\n    expect(className).to.be('css-0 css-d0-1');\n    expect(classes).to.be(undefined);\n  });","file":"styledSystem.js","skipped":false,"dir":"packages/react-jss/tests"},{"name":"should handle the propTypes/meta for validation from function rules","suites":["React-JSS: styled-system"],"line":161,"code":"  it.skip('should handle the propTypes/meta for validation from function rules', () => {});","file":"styledSystem.js","skipped":true,"dir":"packages/react-jss/tests"},{"name":"should do compose() automatically","suites":["React-JSS: styled-system"],"line":162,"code":"  it.skip('should do compose() automatically', () => {});","file":"styledSystem.js","skipped":true,"dir":"packages/react-jss/tests"},{"name":"should subscribe theme with useTheme, but not with useStyles","suites":["React-JSS: theming useStyles()","injecting the theme"],"updatePoint":{"line":50,"column":68,"index":1521},"line":50,"code":"    it('should subscribe theme with useTheme, but not with useStyles', () => {\n      const StyledComponent = createStyledComponent({});\n      StyledComponent.defaultProps = defaultProps;\n      TestRenderer.create( /*#__PURE__*/React.createElement(ThemeProvider, {\n        theme: themeA\n      }, /*#__PURE__*/React.createElement(StyledComponent, null)));\n      expect(themeFromUseTheme).to.be(themeA);\n      expect(themeFromStylesFn).to.eql({});\n    });","file":"useStylesTheming.js","skipped":false,"dir":"packages/react-jss/tests"},{"name":"should warn when styles function has no arguments","suites":["React-JSS: theming useStyles()","injecting the theme"],"updatePoint":{"line":59,"column":57,"index":1963},"line":59,"code":"    it('should warn when styles function has no arguments', () => {});","file":"useStylesTheming.js","skipped":false,"dir":"packages/react-jss/tests"},{"name":"should subscribe theme with useTheme and with useStyles","suites":["React-JSS: theming useStyles()","injecting the theme"],"updatePoint":{"line":60,"column":63,"index":2040},"line":60,"code":"    it('should subscribe theme with useTheme and with useStyles', () => {\n      const StyledComponent = createStyledComponent(theme => {\n        themeFromStylesFn = theme;\n        return {};\n      });\n      StyledComponent.defaultProps = defaultProps;\n      TestRenderer.create( /*#__PURE__*/React.createElement(ThemeProvider, {\n        theme: themeA\n      }, /*#__PURE__*/React.createElement(StyledComponent, null)));\n      expect(themeFromUseTheme).to.be(themeA);\n      expect(themeFromStylesFn).to.eql(themeA);\n    });","file":"useStylesTheming.js","skipped":false,"dir":"packages/react-jss/tests"},{"name":"should use the theme from props instead of the one from provider","suites":["React-JSS: theming useStyles()","injecting the theme"],"updatePoint":{"line":72,"column":72,"index":2571},"line":72,"code":"    it('should use the theme from props instead of the one from provider', () => {\n      const StyledComponent = createStyledComponent({});\n      StyledComponent.defaultProps = defaultProps;\n      TestRenderer.create( /*#__PURE__*/React.createElement(ThemeProvider, {\n        theme: themeA\n      }, /*#__PURE__*/React.createElement(StyledComponent, {\n        theme: themeB\n      })));\n      expect(themeFromUseTheme).to.equal(themeB);\n    });","file":"useStylesTheming.js","skipped":false,"dir":"packages/react-jss/tests"},{"name":"should have correct meta attribute for themed styles","suites":["React-JSS: theming useStyles()","injecting the theme"],"updatePoint":{"line":83,"column":58,"index":3006},"line":83,"code":"  it('should have correct meta attribute for themed styles', () => {\n    let sheet;\n    const generateId = (rule, s) => {\n      sheet = s;\n      return rule.key;\n    };\n    TestRenderer.create( /*#__PURE__*/React.createElement(JssProvider, {\n      generateId: generateId\n    }, /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeA\n    }, /*#__PURE__*/React.createElement(ThemedStaticComponent, null))));\n    expect(sheet.options.meta.includes('Themed')).to.be(true);\n  });","file":"useStylesTheming.js","skipped":false,"dir":"packages/react-jss/tests"},{"name":"one themed instance wo/ dynamic props = 1 style","suites":["React-JSS: theming useStyles()","injecting the theme"],"updatePoint":{"line":96,"column":53,"index":3491},"line":96,"code":"  it('one themed instance wo/ dynamic props = 1 style', () => {\n    const registry = new SheetsRegistry();\n    TestRenderer.create( /*#__PURE__*/React.createElement(JssProvider, {\n      registry: registry\n    }, /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeA\n    }, /*#__PURE__*/React.createElement(ThemedStaticComponent, null))));\n    expect(registry.registry.length).to.equal(1);\n  });","file":"useStylesTheming.js","skipped":false,"dir":"packages/react-jss/tests"},{"name":"one themed instance w/ dynamic props = 2 styles","suites":["React-JSS: theming useStyles()","injecting the theme"],"updatePoint":{"line":105,"column":53,"index":3902},"line":105,"code":"  it('one themed instance w/ dynamic props = 2 styles', () => {\n    const registry = new SheetsRegistry();\n    TestRenderer.create( /*#__PURE__*/React.createElement(JssProvider, {\n      registry: registry\n    }, /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeA\n    }, /*#__PURE__*/React.createElement(ThemedDynamicComponent, {\n      backgroundColor: \"#fff\"\n    }))));\n    expect(registry.registry.length).to.equal(1);\n  });","file":"useStylesTheming.js","skipped":false,"dir":"packages/react-jss/tests"},{"name":"one themed instance wo/ = 1 style, theme update = 1 style","suites":["React-JSS: theming useStyles()","injecting the theme"],"updatePoint":{"line":116,"column":63,"index":4357},"line":116,"code":"  it('one themed instance wo/ = 1 style, theme update = 1 style', () => {\n    const registry = new SheetsRegistry();\n    const renderer = TestRenderer.create( /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeA\n    }, /*#__PURE__*/React.createElement(JssProvider, {\n      registry: registry\n    }, /*#__PURE__*/React.createElement(ThemedStaticComponent, null))));\n    expect(registry.registry.length).to.equal(1);\n    renderer.update( /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeB\n    }, /*#__PURE__*/React.createElement(JssProvider, {\n      registry: registry\n    }, /*#__PURE__*/React.createElement(ThemedStaticComponent, null))));\n    expect(registry.registry[0].attached).to.be(false);\n    expect(registry.registry.length).to.equal(2);\n  });","file":"useStylesTheming.js","skipped":false,"dir":"packages/react-jss/tests"},{"name":"one themed instance w/ dynamic props = 2 styles, theme update = 2 styles","suites":["React-JSS: theming useStyles()","injecting the theme"],"updatePoint":{"line":132,"column":78,"index":5160},"line":132,"code":"  it('one themed instance w/ dynamic props = 2 styles, theme update = 2 styles', () => {\n    const registry = new SheetsRegistry();\n    const renderer = TestRenderer.create( /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeA\n    }, /*#__PURE__*/React.createElement(JssProvider, {\n      registry: registry\n    }, /*#__PURE__*/React.createElement(ThemedDynamicComponent, {\n      backgroundColor: \"#fff\"\n    }))));\n    expect(registry.registry.length).to.equal(1);\n    renderer.update( /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeB\n    }, /*#__PURE__*/React.createElement(JssProvider, {\n      registry: registry\n    }, /*#__PURE__*/React.createElement(ThemedDynamicComponent, {\n      backgroundColor: \"#fff\"\n    }))));\n    expect(registry.registry[0].attached).to.be(false);\n    expect(registry.registry.length).to.equal(2);\n  });","file":"useStylesTheming.js","skipped":false,"dir":"packages/react-jss/tests"},{"name":"two themed instances wo/ dynamic props w/ same theme = 1 style","suites":["React-JSS: theming useStyles()","injecting the theme"],"updatePoint":{"line":152,"column":68,"index":6021},"line":152,"code":"  it('two themed instances wo/ dynamic props w/ same theme = 1 style', () => {\n    const registry = new SheetsRegistry();\n    TestRenderer.create( /*#__PURE__*/React.createElement(JssProvider, {\n      registry: registry\n    }, /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeA\n    }, /*#__PURE__*/React.createElement(ThemedStaticComponent, null), /*#__PURE__*/React.createElement(ThemedStaticComponent, null))));\n    expect(registry.registry.length).to.equal(1);\n  });","file":"useStylesTheming.js","skipped":false,"dir":"packages/react-jss/tests"},{"name":"two themed instances w/ dynamic props w/ same theme = 3 styles","suites":["React-JSS: theming useStyles()","injecting the theme"],"updatePoint":{"line":161,"column":68,"index":6510},"line":161,"code":"  it('two themed instances w/ dynamic props w/ same theme = 3 styles', () => {\n    const registry = new SheetsRegistry();\n    TestRenderer.create( /*#__PURE__*/React.createElement(JssProvider, {\n      registry: registry\n    }, /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeA\n    }, /*#__PURE__*/React.createElement(ThemedDynamicComponent, {\n      backgroundColor: \"#fff\"\n    }), /*#__PURE__*/React.createElement(ThemedDynamicComponent, {\n      backgroundColor: \"#fff\"\n    }))));\n    expect(registry.registry.length).to.equal(1);\n  });","file":"useStylesTheming.js","skipped":false,"dir":"packages/react-jss/tests"},{"name":"two themed instances w/ dynamic props w/ same theme = 3 styles, theme update = 3 styles","suites":["React-JSS: theming useStyles()","injecting the theme"],"updatePoint":{"line":174,"column":93,"index":7092},"line":174,"code":"  it('two themed instances w/ dynamic props w/ same theme = 3 styles, theme update = 3 styles', () => {\n    const registry = new SheetsRegistry();\n    const renderer = TestRenderer.create( /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeA\n    }, /*#__PURE__*/React.createElement(JssProvider, {\n      registry: registry\n    }, /*#__PURE__*/React.createElement(ThemedDynamicComponent, {\n      backgroundColor: \"#fff\"\n    }), /*#__PURE__*/React.createElement(ThemedDynamicComponent, {\n      backgroundColor: \"#fff\"\n    }))));\n    expect(registry.registry.length).to.equal(1);\n    renderer.update( /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeB\n    }, /*#__PURE__*/React.createElement(JssProvider, {\n      registry: registry\n    }, /*#__PURE__*/React.createElement(ThemedDynamicComponent, {\n      backgroundColor: \"#fff\"\n    }), /*#__PURE__*/React.createElement(ThemedDynamicComponent, {\n      backgroundColor: \"#fff\"\n    }))));\n    expect(registry.registry[0].attached).to.equal(false);\n    expect(registry.registry.length).to.equal(2);\n  });","file":"useStylesTheming.js","skipped":false,"dir":"packages/react-jss/tests"},{"name":"two themed instances wo/ dynamic props w/ same theme = 1 styles, different theme update = 2 styles","suites":["React-JSS: theming useStyles()","injecting the theme"],"updatePoint":{"line":198,"column":104,"index":8186},"line":198,"code":"  it('two themed instances wo/ dynamic props w/ same theme = 1 styles, different theme update = 2 styles', () => {\n    const registry = new SheetsRegistry();\n    const renderer = TestRenderer.create( /*#__PURE__*/React.createElement(JssProvider, {\n      registry: registry\n    }, /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeA\n    }, /*#__PURE__*/React.createElement(ThemedStaticComponent, null)), /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeA\n    }, /*#__PURE__*/React.createElement(ThemedStaticComponent, null))));\n    expect(registry.registry.length).to.equal(1);\n    renderer.update( /*#__PURE__*/React.createElement(JssProvider, {\n      registry: registry\n    }, /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeA\n    }, /*#__PURE__*/React.createElement(ThemedStaticComponent, null)), /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeB\n    }, /*#__PURE__*/React.createElement(ThemedStaticComponent, null))));\n    expect(registry.registry.length).to.equal(2);\n  });","file":"useStylesTheming.js","skipped":false,"dir":"packages/react-jss/tests"},{"name":"two themed instances w/ dynamic props w/ same theme = 3 styles, different theme update = 4 styles","suites":["React-JSS: theming useStyles()","injecting the theme"],"updatePoint":{"line":217,"column":103,"index":9240},"line":217,"code":"  it('two themed instances w/ dynamic props w/ same theme = 3 styles, different theme update = 4 styles', () => {\n    const registry = new SheetsRegistry();\n    const renderer = TestRenderer.create( /*#__PURE__*/React.createElement(JssProvider, {\n      registry: registry\n    }, /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeA\n    }, /*#__PURE__*/React.createElement(ThemedDynamicComponent, {\n      backgroundColor: \"#fff\"\n    })), /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeA\n    }, /*#__PURE__*/React.createElement(ThemedDynamicComponent, {\n      backgroundColor: \"#fff\"\n    }))));\n    expect(registry.registry.length).to.equal(1);\n    renderer.update( /*#__PURE__*/React.createElement(JssProvider, {\n      registry: registry\n    }, /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeA\n    }, /*#__PURE__*/React.createElement(ThemedDynamicComponent, {\n      backgroundColor: \"#fff\"\n    })), /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeB\n    }, /*#__PURE__*/React.createElement(ThemedDynamicComponent, {\n      backgroundColor: \"#fff\"\n    }))));\n    expect(registry.registry.length).to.equal(2);\n  });","file":"useStylesTheming.js","skipped":false,"dir":"packages/react-jss/tests"},{"name":"two themed instances wo/ dynamic props w/ different themes = 2 styles, same theme update = 1 style","suites":["React-JSS: theming useStyles()","injecting the theme"],"updatePoint":{"line":244,"column":104,"index":10431},"line":244,"code":"  it('two themed instances wo/ dynamic props w/ different themes = 2 styles, same theme update = 1 style', () => {\n    const registry = new SheetsRegistry();\n    const renderer = TestRenderer.create( /*#__PURE__*/React.createElement(JssProvider, {\n      registry: registry\n    }, /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeA\n    }, /*#__PURE__*/React.createElement(ThemedStaticComponent, null)), /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeB\n    }, /*#__PURE__*/React.createElement(ThemedStaticComponent, null))));\n    expect(registry.registry.length).to.equal(2);\n    renderer.update( /*#__PURE__*/React.createElement(JssProvider, {\n      registry: registry\n    }, /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeA\n    }, /*#__PURE__*/React.createElement(ThemedStaticComponent, null)), /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeA\n    }, /*#__PURE__*/React.createElement(ThemedStaticComponent, null))));\n    expect(registry.registry[1].attached).to.equal(false);\n    expect(registry.registry.length).to.equal(2);\n  });","file":"useStylesTheming.js","skipped":false,"dir":"packages/react-jss/tests"},{"name":"two themed instances w/ dynamic props w/ different themes = 4 styles, same theme update = 3 styles","suites":["React-JSS: theming useStyles()","injecting the theme"],"updatePoint":{"line":264,"column":104,"index":11545},"line":264,"code":"  it('two themed instances w/ dynamic props w/ different themes = 4 styles, same theme update = 3 styles', () => {\n    const registry = new SheetsRegistry();\n    const renderer = TestRenderer.create( /*#__PURE__*/React.createElement(JssProvider, {\n      registry: registry\n    }, /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeA\n    }, /*#__PURE__*/React.createElement(ThemedDynamicComponent, {\n      backgroundColor: \"#fff\"\n    })), /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeB\n    }, /*#__PURE__*/React.createElement(ThemedDynamicComponent, {\n      backgroundColor: \"#fff\"\n    }))));\n    expect(registry.registry.length).to.equal(2);\n    renderer.update( /*#__PURE__*/React.createElement(JssProvider, {\n      registry: registry\n    }, /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeA\n    }, /*#__PURE__*/React.createElement(ThemedDynamicComponent, {\n      backgroundColor: \"#fff\"\n    })), /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeA\n    }, /*#__PURE__*/React.createElement(ThemedDynamicComponent, {\n      backgroundColor: \"#fff\"\n    }))));\n    expect(registry.registry[1].attached).to.equal(false);\n    expect(registry.registry.length).to.equal(2);\n  });","file":"useStylesTheming.js","skipped":false,"dir":"packages/react-jss/tests"},{"name":"allows nested ThemeProviders with custom namespace","suites":["React-JSS: theming useStyles()","when theming object returned from createTheming is provided to injectSheet options"],"updatePoint":{"line":293,"column":58,"index":12854},"line":293,"code":"    it('allows nested ThemeProviders with custom namespace', () => {\n      const themingA = createTheming( /*#__PURE__*/React.createContext());\n      const themingB = createTheming( /*#__PURE__*/React.createContext());\n      const {\n        ThemeProvider: ThemeProviderA\n      } = themingA;\n      const {\n        ThemeProvider: ThemeProviderB\n      } = themingB;\n      let colorReceivedInStylesA;\n      let colorReceivedInStylesB;\n      let themeReceivedInComponentA;\n      let themeReceivedInComponentB;\n      const stylesA = theme => {\n        colorReceivedInStylesA = theme.color;\n      };\n      const stylesB = theme => {\n        colorReceivedInStylesB = theme.color;\n      };\n      const ComponentA = createStyledComponent(stylesA, {\n        theming: themingA\n      });\n      ComponentA.defaultProps = {\n        getTheme: theme => {\n          themeReceivedInComponentA = theme;\n        }\n      };\n      const ComponentB = createStyledComponent(stylesB, {\n        theming: themingB\n      });\n      ComponentB.defaultProps = {\n        getTheme: theme => {\n          themeReceivedInComponentB = theme;\n        }\n      };\n      TestRenderer.create( /*#__PURE__*/React.createElement(ThemeProviderA, {\n        theme: themeA\n      }, /*#__PURE__*/React.createElement(ThemeProviderB, {\n        theme: themeB\n      }, /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(ComponentA, null), /*#__PURE__*/React.createElement(ComponentB, null)))));\n      expect(themeReceivedInComponentA).to.eql(themeA);\n      expect(themeReceivedInComponentB).to.eql(themeB);\n      expect(colorReceivedInStylesA).to.eql(themeA.color);\n      expect(colorReceivedInStylesB).to.eql(themeB.color);\n    });","file":"useStylesTheming.js","skipped":false,"dir":"packages/react-jss/tests"},{"name":"should not inject theme with static classes","suites":["React-JSS: theming withStyles()","injecting the theme"],"updatePoint":{"line":29,"column":51,"index":895},"line":29,"code":"    it('should not inject theme with static classes', () => {\n      const StyledComponent = injectSheet({})(Comp);\n      const renderer = TestRenderer.create( /*#__PURE__*/React.createElement(ThemeProvider, {\n        theme: themeA\n      }, /*#__PURE__*/React.createElement(StyledComponent, null)));\n      const injectedTheme = renderer.root.findByType(Comp).props.theme;\n      expect(injectedTheme).to.be(undefined);\n    });","file":"withStylesTheming.js","skipped":false,"dir":"packages/react-jss/tests"},{"name":"should not inject theme with themed classes","suites":["React-JSS: theming withStyles()","injecting the theme"],"updatePoint":{"line":37,"column":51,"index":1320},"line":37,"code":"    it('should not inject theme with themed classes', () => {\n      const StyledComponent = injectSheet(() => ({}))(Comp);\n      const renderer = TestRenderer.create( /*#__PURE__*/React.createElement(ThemeProvider, {\n        theme: themeA\n      }, /*#__PURE__*/React.createElement(StyledComponent, null)));\n      const injectedTheme = renderer.root.findByType(Comp).props.theme;\n      expect(injectedTheme).to.be(undefined);\n    });","file":"withStylesTheming.js","skipped":false,"dir":"packages/react-jss/tests"},{"name":"should inject theme with static classes and injectTheme option","suites":["React-JSS: theming withStyles()","injecting the theme"],"updatePoint":{"line":45,"column":70,"index":1772},"line":45,"code":"    it('should inject theme with static classes and injectTheme option', () => {\n      const StyledComponent = injectSheet({}, {\n        injectTheme: true\n      })(Comp);\n      const renderer = TestRenderer.create( /*#__PURE__*/React.createElement(ThemeProvider, {\n        theme: themeA\n      }, /*#__PURE__*/React.createElement(StyledComponent, null)));\n      const injectedTheme = renderer.root.findByType(Comp).props.theme;\n      expect(injectedTheme).to.equal(themeA);\n    });","file":"withStylesTheming.js","skipped":false,"dir":"packages/react-jss/tests"},{"name":"should inject theme with themed classes and injectTheme option","suites":["React-JSS: theming withStyles()","injecting the theme"],"updatePoint":{"line":55,"column":70,"index":2253},"line":55,"code":"    it('should inject theme with themed classes and injectTheme option', () => {\n      const StyledComponent = injectSheet(() => ({}), {\n        injectTheme: true\n      })(Comp);\n      const renderer = TestRenderer.create( /*#__PURE__*/React.createElement(ThemeProvider, {\n        theme: themeA\n      }, /*#__PURE__*/React.createElement(StyledComponent, null)));\n      const injectedTheme = renderer.root.findByType(Comp).props.theme;\n      expect(injectedTheme).to.equal(themeA);\n    });","file":"withStylesTheming.js","skipped":false,"dir":"packages/react-jss/tests"},{"name":"should use the passed theme instead of the actual theme","suites":["React-JSS: theming withStyles()","injecting the theme"],"updatePoint":{"line":65,"column":63,"index":2735},"line":65,"code":"    it('should use the passed theme instead of the actual theme', () => {\n      const StyledComponent = injectSheet(() => ({}), {\n        injectTheme: true\n      })(Comp);\n      const renderer = TestRenderer.create( /*#__PURE__*/React.createElement(ThemeProvider, {\n        theme: themeA\n      }, /*#__PURE__*/React.createElement(StyledComponent, {\n        theme: themeB\n      })));\n      const injectedTheme = renderer.root.findByType(Comp).props.theme;\n      expect(injectedTheme).to.equal(themeB);\n    });","file":"withStylesTheming.js","skipped":false,"dir":"packages/react-jss/tests"},{"name":"should have correct meta attribute for themed styles","suites":["React-JSS: theming withStyles()","injecting the theme"],"updatePoint":{"line":78,"column":58,"index":3245},"line":78,"code":"  it('should have correct meta attribute for themed styles', () => {\n    let sheet;\n    const generateId = (rule, s) => {\n      sheet = s;\n      return rule.key;\n    };\n    TestRenderer.create( /*#__PURE__*/React.createElement(JssProvider, {\n      generateId: generateId\n    }, /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeA\n    }, /*#__PURE__*/React.createElement(ThemedStaticComponent, null))));\n    expect(sheet.options.meta.includes('Themed')).to.be(true);\n  });","file":"withStylesTheming.js","skipped":false,"dir":"packages/react-jss/tests"},{"name":"one themed instance wo/ dynamic props = 1 style","suites":["React-JSS: theming withStyles()","injecting the theme"],"updatePoint":{"line":91,"column":53,"index":3730},"line":91,"code":"  it('one themed instance wo/ dynamic props = 1 style', () => {\n    const registry = new SheetsRegistry();\n    TestRenderer.create( /*#__PURE__*/React.createElement(JssProvider, {\n      registry: registry\n    }, /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeA\n    }, /*#__PURE__*/React.createElement(ThemedStaticComponent, null))));\n    expect(registry.registry.length).to.equal(1);\n  });","file":"withStylesTheming.js","skipped":false,"dir":"packages/react-jss/tests"},{"name":"one themed instance w/ dynamic props = 2 styles","suites":["React-JSS: theming withStyles()","injecting the theme"],"updatePoint":{"line":100,"column":53,"index":4141},"line":100,"code":"  it('one themed instance w/ dynamic props = 2 styles', () => {\n    const registry = new SheetsRegistry();\n    TestRenderer.create( /*#__PURE__*/React.createElement(JssProvider, {\n      registry: registry\n    }, /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeA\n    }, /*#__PURE__*/React.createElement(ThemedDynamicComponent, {\n      backgroundColor: \"#fff\"\n    }))));\n    expect(registry.registry.length).to.equal(1);\n  });","file":"withStylesTheming.js","skipped":false,"dir":"packages/react-jss/tests"},{"name":"one themed instance wo/ = 1 style, theme update = 1 style","suites":["React-JSS: theming withStyles()","injecting the theme"],"updatePoint":{"line":111,"column":63,"index":4596},"line":111,"code":"  it('one themed instance wo/ = 1 style, theme update = 1 style', () => {\n    const registry = new SheetsRegistry();\n    const renderer = TestRenderer.create( /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeA\n    }, /*#__PURE__*/React.createElement(JssProvider, {\n      registry: registry\n    }, /*#__PURE__*/React.createElement(ThemedStaticComponent, null))));\n    expect(registry.registry.length).to.equal(1);\n    renderer.update( /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeB\n    }, /*#__PURE__*/React.createElement(JssProvider, {\n      registry: registry\n    }, /*#__PURE__*/React.createElement(ThemedStaticComponent, null))));\n    expect(registry.registry[0].attached).to.be(false);\n    expect(registry.registry.length).to.equal(2);\n  });","file":"withStylesTheming.js","skipped":false,"dir":"packages/react-jss/tests"},{"name":"one themed instance w/ dynamic props = 2 styles, theme update = 2 styles","suites":["React-JSS: theming withStyles()","injecting the theme"],"updatePoint":{"line":127,"column":78,"index":5399},"line":127,"code":"  it('one themed instance w/ dynamic props = 2 styles, theme update = 2 styles', () => {\n    const registry = new SheetsRegistry();\n    const renderer = TestRenderer.create( /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeA\n    }, /*#__PURE__*/React.createElement(JssProvider, {\n      registry: registry\n    }, /*#__PURE__*/React.createElement(ThemedDynamicComponent, {\n      backgroundColor: \"#fff\"\n    }))));\n    expect(registry.registry.length).to.equal(1);\n    renderer.update( /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeB\n    }, /*#__PURE__*/React.createElement(JssProvider, {\n      registry: registry\n    }, /*#__PURE__*/React.createElement(ThemedDynamicComponent, {\n      backgroundColor: \"#fff\"\n    }))));\n    expect(registry.registry[0].attached).to.be(false);\n    expect(registry.registry.length).to.equal(2);\n  });","file":"withStylesTheming.js","skipped":false,"dir":"packages/react-jss/tests"},{"name":"two themed instances wo/ dynamic props w/ same theme = 1 style","suites":["React-JSS: theming withStyles()","injecting the theme"],"updatePoint":{"line":147,"column":68,"index":6260},"line":147,"code":"  it('two themed instances wo/ dynamic props w/ same theme = 1 style', () => {\n    const registry = new SheetsRegistry();\n    TestRenderer.create( /*#__PURE__*/React.createElement(JssProvider, {\n      registry: registry\n    }, /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeA\n    }, /*#__PURE__*/React.createElement(ThemedStaticComponent, null), /*#__PURE__*/React.createElement(ThemedStaticComponent, null))));\n    expect(registry.registry.length).to.equal(1);\n  });","file":"withStylesTheming.js","skipped":false,"dir":"packages/react-jss/tests"},{"name":"two themed instances w/ dynamic props w/ same theme = 3 styles","suites":["React-JSS: theming withStyles()","injecting the theme"],"updatePoint":{"line":156,"column":68,"index":6749},"line":156,"code":"  it('two themed instances w/ dynamic props w/ same theme = 3 styles', () => {\n    const registry = new SheetsRegistry();\n    TestRenderer.create( /*#__PURE__*/React.createElement(JssProvider, {\n      registry: registry\n    }, /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeA\n    }, /*#__PURE__*/React.createElement(ThemedDynamicComponent, {\n      backgroundColor: \"#fff\"\n    }), /*#__PURE__*/React.createElement(ThemedDynamicComponent, {\n      backgroundColor: \"#fff\"\n    }))));\n    expect(registry.registry.length).to.equal(1);\n  });","file":"withStylesTheming.js","skipped":false,"dir":"packages/react-jss/tests"},{"name":"two themed instances w/ dynamic props w/ same theme = 3 styles, theme update = 3 styles","suites":["React-JSS: theming withStyles()","injecting the theme"],"updatePoint":{"line":169,"column":93,"index":7331},"line":169,"code":"  it('two themed instances w/ dynamic props w/ same theme = 3 styles, theme update = 3 styles', () => {\n    const registry = new SheetsRegistry();\n    const renderer = TestRenderer.create( /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeA\n    }, /*#__PURE__*/React.createElement(JssProvider, {\n      registry: registry\n    }, /*#__PURE__*/React.createElement(ThemedDynamicComponent, {\n      backgroundColor: \"#fff\"\n    }), /*#__PURE__*/React.createElement(ThemedDynamicComponent, {\n      backgroundColor: \"#fff\"\n    }))));\n    expect(registry.registry.length).to.equal(1);\n    renderer.update( /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeB\n    }, /*#__PURE__*/React.createElement(JssProvider, {\n      registry: registry\n    }, /*#__PURE__*/React.createElement(ThemedDynamicComponent, {\n      backgroundColor: \"#fff\"\n    }), /*#__PURE__*/React.createElement(ThemedDynamicComponent, {\n      backgroundColor: \"#fff\"\n    }))));\n    expect(registry.registry[0].attached).to.equal(false);\n    expect(registry.registry.length).to.equal(2);\n  });","file":"withStylesTheming.js","skipped":false,"dir":"packages/react-jss/tests"},{"name":"two themed instances wo/ dynamic props w/ same theme = 1 styles, different theme update = 2 styles","suites":["React-JSS: theming withStyles()","injecting the theme"],"updatePoint":{"line":193,"column":104,"index":8425},"line":193,"code":"  it('two themed instances wo/ dynamic props w/ same theme = 1 styles, different theme update = 2 styles', () => {\n    const registry = new SheetsRegistry();\n    const renderer = TestRenderer.create( /*#__PURE__*/React.createElement(JssProvider, {\n      registry: registry\n    }, /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeA\n    }, /*#__PURE__*/React.createElement(ThemedStaticComponent, null)), /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeA\n    }, /*#__PURE__*/React.createElement(ThemedStaticComponent, null))));\n    expect(registry.registry.length).to.equal(1);\n    renderer.update( /*#__PURE__*/React.createElement(JssProvider, {\n      registry: registry\n    }, /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeA\n    }, /*#__PURE__*/React.createElement(ThemedStaticComponent, null)), /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeB\n    }, /*#__PURE__*/React.createElement(ThemedStaticComponent, null))));\n    expect(registry.registry.length).to.equal(2);\n  });","file":"withStylesTheming.js","skipped":false,"dir":"packages/react-jss/tests"},{"name":"two themed instances w/ dynamic props w/ same theme = 3 styles, different theme update = 4 styles","suites":["React-JSS: theming withStyles()","injecting the theme"],"updatePoint":{"line":212,"column":103,"index":9479},"line":212,"code":"  it('two themed instances w/ dynamic props w/ same theme = 3 styles, different theme update = 4 styles', () => {\n    const registry = new SheetsRegistry();\n    const renderer = TestRenderer.create( /*#__PURE__*/React.createElement(JssProvider, {\n      registry: registry\n    }, /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeA\n    }, /*#__PURE__*/React.createElement(ThemedDynamicComponent, {\n      backgroundColor: \"#fff\"\n    })), /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeA\n    }, /*#__PURE__*/React.createElement(ThemedDynamicComponent, {\n      backgroundColor: \"#fff\"\n    }))));\n    expect(registry.registry.length).to.equal(1);\n    renderer.update( /*#__PURE__*/React.createElement(JssProvider, {\n      registry: registry\n    }, /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeA\n    }, /*#__PURE__*/React.createElement(ThemedDynamicComponent, {\n      backgroundColor: \"#fff\"\n    })), /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeB\n    }, /*#__PURE__*/React.createElement(ThemedDynamicComponent, {\n      backgroundColor: \"#fff\"\n    }))));\n    expect(registry.registry.length).to.equal(2);\n  });","file":"withStylesTheming.js","skipped":false,"dir":"packages/react-jss/tests"},{"name":"two themed instances wo/ dynamic props w/ different themes = 2 styles, same theme update = 1 style","suites":["React-JSS: theming withStyles()","injecting the theme"],"updatePoint":{"line":239,"column":104,"index":10670},"line":239,"code":"  it('two themed instances wo/ dynamic props w/ different themes = 2 styles, same theme update = 1 style', () => {\n    const registry = new SheetsRegistry();\n    const renderer = TestRenderer.create( /*#__PURE__*/React.createElement(JssProvider, {\n      registry: registry\n    }, /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeA\n    }, /*#__PURE__*/React.createElement(ThemedStaticComponent, null)), /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeB\n    }, /*#__PURE__*/React.createElement(ThemedStaticComponent, null))));\n    expect(registry.registry.length).to.equal(2);\n    renderer.update( /*#__PURE__*/React.createElement(JssProvider, {\n      registry: registry\n    }, /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeA\n    }, /*#__PURE__*/React.createElement(ThemedStaticComponent, null)), /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeA\n    }, /*#__PURE__*/React.createElement(ThemedStaticComponent, null))));\n    expect(registry.registry[1].attached).to.equal(false);\n    expect(registry.registry.length).to.equal(2);\n  });","file":"withStylesTheming.js","skipped":false,"dir":"packages/react-jss/tests"},{"name":"two themed instances w/ dynamic props w/ different themes = 4 styles, same theme update = 3 styles","suites":["React-JSS: theming withStyles()","injecting the theme"],"updatePoint":{"line":259,"column":104,"index":11784},"line":259,"code":"  it('two themed instances w/ dynamic props w/ different themes = 4 styles, same theme update = 3 styles', () => {\n    const registry = new SheetsRegistry();\n    const renderer = TestRenderer.create( /*#__PURE__*/React.createElement(JssProvider, {\n      registry: registry\n    }, /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeA\n    }, /*#__PURE__*/React.createElement(ThemedDynamicComponent, {\n      backgroundColor: \"#fff\"\n    })), /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeB\n    }, /*#__PURE__*/React.createElement(ThemedDynamicComponent, {\n      backgroundColor: \"#fff\"\n    }))));\n    expect(registry.registry.length).to.equal(2);\n    renderer.update( /*#__PURE__*/React.createElement(JssProvider, {\n      registry: registry\n    }, /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeA\n    }, /*#__PURE__*/React.createElement(ThemedDynamicComponent, {\n      backgroundColor: \"#fff\"\n    })), /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: themeA\n    }, /*#__PURE__*/React.createElement(ThemedDynamicComponent, {\n      backgroundColor: \"#fff\"\n    }))));\n    expect(registry.registry[1].attached).to.equal(false);\n    expect(registry.registry.length).to.equal(2);\n  });","file":"withStylesTheming.js","skipped":false,"dir":"packages/react-jss/tests"},{"name":"allows nested ThemeProviders with custom namespace","suites":["React-JSS: theming withStyles()","when theming object returned from createTheming is provided to injectSheet options"],"updatePoint":{"line":288,"column":58,"index":13093},"line":288,"code":"    it('allows nested ThemeProviders with custom namespace', () => {\n      const themingA = createTheming( /*#__PURE__*/React.createContext());\n      const themingB = createTheming( /*#__PURE__*/React.createContext());\n      const {\n        ThemeProvider: ThemeProviderA\n      } = themingA;\n      const {\n        ThemeProvider: ThemeProviderB\n      } = themingB;\n      let colorReceivedInStyleA;\n      let colorReceivedInStyleB;\n      let themeReceivedInComponentA;\n      let themeReceivedInComponentB;\n      const styleA = theme => {\n        colorReceivedInStyleA = theme.color;\n      };\n      const styleB = theme => {\n        colorReceivedInStyleB = theme.color;\n      };\n      const InnerComponentA = ({\n        theme\n      }) => {\n        themeReceivedInComponentA = theme;\n        return null;\n      };\n      const InnerComponentB = ({\n        theme\n      }) => {\n        themeReceivedInComponentB = theme;\n        return null;\n      };\n      const ComponentA = injectSheet(styleA, {\n        theming: themingA,\n        injectTheme: true\n      })(InnerComponentA);\n      const ComponentB = injectSheet(styleB, {\n        theming: themingB,\n        injectTheme: true\n      })(InnerComponentB);\n      TestRenderer.create( /*#__PURE__*/React.createElement(ThemeProviderA, {\n        theme: themeA\n      }, /*#__PURE__*/React.createElement(ThemeProviderB, {\n        theme: themeB\n      }, /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(ComponentA, null), /*#__PURE__*/React.createElement(ComponentB, null)))));\n      expect(themeReceivedInComponentA).to.eql(themeA);\n      expect(themeReceivedInComponentB).to.eql(themeB);\n      expect(colorReceivedInStyleA).to.eql(themeA.color);\n      expect(colorReceivedInStyleB).to.eql(themeB.color);\n    });","file":"withStylesTheming.js","skipped":false,"dir":"packages/react-jss/tests"}]}