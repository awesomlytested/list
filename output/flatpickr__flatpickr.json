{
    "repo": "flatpickr/flatpickr",
    "url": "https://github.com/flatpickr/flatpickr",
    "branch": "master",
    "configs": [
        {
            "package": "flatpickr",
            "lang": "ts",
            "dir": "__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        }
    ],
    "tests": [
        {
            "name": "doesn't contain dev code",
            "suites": [
                "build"
            ],
            "updatePoint": {
                "line": 5,
                "column": 30
            },
            "line": 5,
            "code": "  it(\"doesn't contain dev code\", () => {\n    if (existsSync(\"./dist\")) {\n      const dist = readFileSync(\"./dist/flatpickr.js\");\n      expect(dist.toString().indexOf(\"livereload\")).toEqual(-1);\n    }\n  });",
            "file": "build.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should gracefully handle no elements",
            "suites": [
                "flatpickr",
                "init"
            ],
            "updatePoint": {
                "line": 99,
                "column": 44
            },
            "line": 99,
            "code": "    it(\"should gracefully handle no elements\", () => {\n      expect(flatpickr([])).toEqual([]);\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should parse defaultDate",
            "suites": [
                "flatpickr",
                "init"
            ],
            "updatePoint": {
                "line": 103,
                "column": 32
            },
            "line": 103,
            "code": "    it(\"should parse defaultDate\", () => {\n      createInstance({\n        defaultDate: \"2016-12-27T16:16:22.585Z\",\n        enableTime: true,\n      });\n\n      const date = new Date(\"2016-12-27T16:16:22.585Z\");\n      expect(fp.currentYear).toEqual(date.getFullYear());\n      expect(fp.currentMonth).toEqual(date.getMonth());\n      const selected = fp.days.querySelector(\".selected\");\n      expect(selected).toBeTruthy();\n\n      if (selected) expect(selected.textContent).toEqual(date.getDate() + \"\");\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "shouldn't parse out-of-bounds defaultDate",
            "suites": [
                "flatpickr",
                "init"
            ],
            "updatePoint": {
                "line": 118,
                "column": 49
            },
            "line": 118,
            "code": "    it(\"shouldn't parse out-of-bounds defaultDate\", () => {\n      createInstance({\n        minDate: \"2016-12-28T16:16:22.585Z\",\n        defaultDate: \"2016-12-27T16:16:22.585Z\",\n      });\n\n      expect(fp.days.querySelector(\".selected\")).toEqual(null);\n\n      createInstance({\n        defaultDate: \"2016-12-27T16:16:22.585Z\",\n        enableTime: true,\n      });\n\n      fp.set(\"maxDate\", \"2016-12-25\");\n      fp.set(\"minDate\", \"2016-12-24\");\n\n      expect(fp.currentMonth).toEqual(11);\n      expect(fp.days.querySelector(\".selected\")).toEqual(null);\n\n      let enabledDays = fp.days.querySelectorAll(\n        \".flatpickr-day:not(.flatpickr-disabled)\"\n      );\n\n      expect(enabledDays.length).toEqual(2);\n      expect(enabledDays[0].textContent).toEqual(\"24\");\n      expect(enabledDays[1].textContent).toEqual(\"25\");\n\n      createInstance({\n        defaultDate: \"2016-12-27T16:16:22.585Z\",\n        minDate: \"2016-12-27T16:26:22.585Z\",\n        enableTime: true,\n      });\n\n      expect(fp.selectedDates.length).toBe(0);\n      expect(fp.days.querySelector(\".selected\")).toEqual(null);\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "doesn't throw with undefined properties",
            "suites": [
                "flatpickr",
                "init"
            ],
            "updatePoint": {
                "line": 155,
                "column": 47
            },
            "line": 155,
            "code": "    it(\"doesn't throw with undefined properties\", () => {\n      createInstance({\n        onChange: undefined,\n      });\n      fp.set(\"minDate\", \"2016-10-20\");\n      expect(fp.config.minDate).toBeDefined();\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should parse timestamp",
            "suites": [
                "flatpickr",
                "datetimestring parser",
                "date string parser"
            ],
            "updatePoint": {
                "line": 166,
                "column": 32
            },
            "line": 166,
            "code": "      it(\"should parse timestamp\", () => {\n        createInstance({\n          defaultDate: 1477111633771,\n        });\n\n        const date = new Date(\"2016-10-22T04:47:13.771Z\");\n        expect(fp.selectedDates[0]).toBeDefined();\n        expect(fp.selectedDates[0].getFullYear()).toEqual(date.getFullYear());\n        expect(fp.selectedDates[0].getMonth()).toEqual(date.getMonth());\n        expect(fp.selectedDates[0].getDate()).toEqual(date.getDate());\n      });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should parse unix time",
            "suites": [
                "flatpickr",
                "datetimestring parser",
                "date string parser"
            ],
            "updatePoint": {
                "line": 178,
                "column": 32
            },
            "line": 178,
            "code": "      it(\"should parse unix time\", () => {\n        createInstance({\n          defaultDate: \"1477111633.771\", // shouldnt parse as a timestamp\n          dateFormat: \"U\",\n        });\n\n        const date = new Date(\"2016-10-22T04:47:13.771Z\");\n        expect(fp.selectedDates[0]).toBeDefined();\n        expect(fp.selectedDates[0].getFullYear()).toEqual(date.getFullYear());\n        expect(fp.selectedDates[0].getMonth()).toEqual(date.getMonth());\n        expect(fp.selectedDates[0].getDate()).toEqual(date.getDate());\n      });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should parse \"2016-10\"",
            "suites": [
                "flatpickr",
                "datetimestring parser",
                "date string parser"
            ],
            "updatePoint": {
                "line": 191,
                "column": 32
            },
            "line": 191,
            "code": "      it('should parse \"2016-10\"', () => {\n        createInstance({\n          defaultDate: \"2016-10\",\n        });\n\n        expect(fp.selectedDates[0]).toBeDefined();\n        expect(fp.selectedDates[0].getFullYear()).toEqual(2016);\n        expect(fp.selectedDates[0].getMonth()).toEqual(9);\n      });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should parse \"2016-10-20 3:30\"",
            "suites": [
                "flatpickr",
                "datetimestring parser",
                "date string parser"
            ],
            "updatePoint": {
                "line": 201,
                "column": 40
            },
            "line": 201,
            "code": "      it('should parse \"2016-10-20 3:30\"', () => {\n        createInstance({\n          defaultDate: \"2016-10-20 3:30\",\n          enableTime: true,\n        });\n\n        expect(fp.selectedDates[0]).toBeDefined();\n        expect(fp.selectedDates[0].getFullYear()).toEqual(2016);\n        expect(fp.selectedDates[0].getMonth()).toEqual(9);\n        expect(fp.selectedDates[0].getDate()).toEqual(20);\n        expect(fp.selectedDates[0].getHours()).toEqual(3);\n        expect(fp.selectedDates[0].getMinutes()).toEqual(30);\n      });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should parse ISO8601",
            "suites": [
                "flatpickr",
                "datetimestring parser",
                "date string parser"
            ],
            "updatePoint": {
                "line": 215,
                "column": 30
            },
            "line": 215,
            "code": "      it(\"should parse ISO8601\", () => {\n        createInstance({\n          defaultDate: \"2007-03-04T21:08:12\",\n          enableTime: true,\n          enableSeconds: true,\n        });\n\n        expect(fp.selectedDates[0]).toBeDefined();\n        expect(fp.selectedDates[0].getFullYear()).toEqual(2007);\n        expect(fp.selectedDates[0].getMonth()).toEqual(2);\n        expect(fp.selectedDates[0].getDate()).toEqual(4);\n        expect(fp.selectedDates[0].getHours()).toEqual(21);\n        expect(fp.selectedDates[0].getMinutes()).toEqual(8);\n        expect(fp.selectedDates[0].getSeconds()).toEqual(12);\n      });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should parse \"today\"",
            "suites": [
                "flatpickr",
                "datetimestring parser",
                "date string parser"
            ],
            "updatePoint": {
                "line": 231,
                "column": 30
            },
            "line": 231,
            "code": "      it('should parse \"today\"', () => {\n        createInstance({});\n        const today = fp.parseDate(\"today\", undefined, true);\n        expect(today).toBeDefined();\n\n        today && expect(today.getHours()).toBe(0);\n      });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should parse AM/PM",
            "suites": [
                "flatpickr",
                "datetimestring parser",
                "date string parser"
            ],
            "updatePoint": {
                "line": 239,
                "column": 28
            },
            "line": 239,
            "code": "      it(\"should parse AM/PM\", () => {\n        createInstance({\n          dateFormat: \"m/d/Y h:i K\",\n          enableTime: true,\n          defaultDate: \"8/3/2017 12:00 AM\",\n        });\n\n        expect(fp.selectedDates[0]).toBeDefined();\n        expect(fp.selectedDates[0].getFullYear()).toEqual(2017);\n        expect(fp.selectedDates[0].getMonth()).toEqual(7);\n        expect(fp.selectedDates[0].getDate()).toEqual(3);\n        expect(fp.selectedDates[0].getHours()).toEqual(0);\n        expect(fp.selectedDates[0].getMinutes()).toEqual(0);\n      });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should parse JSON datestrings",
            "suites": [
                "flatpickr",
                "datetimestring parser",
                "date string parser"
            ],
            "updatePoint": {
                "line": 254,
                "column": 39
            },
            "line": 254,
            "code": "      it(\"should parse JSON datestrings\", () => {\n        createInstance({});\n\n        const date = fp.parseDate(\"2016-12-27T16:16:22.585Z\", undefined);\n        expect(date).toBeDefined();\n\n        if (!date) return;\n\n        expect(date.getTime()).toBeDefined();\n        expect(date.getTime()).toEqual(Date.parse(\"2016-12-27T16:16:22.585Z\"));\n      });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should parse \"21:11\"",
            "suites": [
                "flatpickr",
                "datetimestring parser",
                "time string parser"
            ],
            "updatePoint": {
                "line": 268,
                "column": 30
            },
            "line": 268,
            "code": "      it('should parse \"21:11\"', () => {\n        createInstance({\n          defaultDate: \"21:11\",\n          allowInput: true,\n          enableTime: true,\n          noCalendar: true,\n        });\n\n        expect(fp.selectedDates[0]).toBeDefined();\n        expect(fp.selectedDates[0].getHours()).toEqual(21);\n        expect(fp.selectedDates[0].getMinutes()).toEqual(11);\n      });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should parse \"21:11:12\"",
            "suites": [
                "flatpickr",
                "datetimestring parser",
                "time string parser"
            ],
            "updatePoint": {
                "line": 281,
                "column": 33
            },
            "line": 281,
            "code": "      it('should parse \"21:11:12\"', () => {\n        createInstance({\n          allowInput: true,\n          enableTime: true,\n          enableSeconds: true,\n          noCalendar: true,\n          defaultDate: \"21:11:12\",\n        });\n\n        expect(fp.selectedDates[0]).toBeDefined();\n        expect(fp.selectedDates[0].getHours()).toEqual(21);\n        expect(fp.selectedDates[0].getMinutes()).toEqual(11);\n        expect(fp.selectedDates[0].getSeconds()).toEqual(12);\n      });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should parse \"11:59 PM\"",
            "suites": [
                "flatpickr",
                "datetimestring parser",
                "time string parser"
            ],
            "updatePoint": {
                "line": 296,
                "column": 33
            },
            "line": 296,
            "code": "      it('should parse \"11:59 PM\"', () => {\n        createInstance({\n          allowInput: true,\n          enableTime: true,\n          noCalendar: true,\n          dateFormat: \"h:i K\",\n          defaultDate: \"11:59 PM\",\n        });\n\n        expect(fp.selectedDates[0]).toBeDefined();\n        expect(fp.selectedDates[0].getHours()).toBe(23);\n        expect(fp.selectedDates[0].getMinutes()).toBe(59);\n        expect(fp.selectedDates[0].getSeconds()).toBe(0);\n\n        expect(fp.amPM).toBeDefined();\n        fp.amPM && expect(fp.amPM.innerHTML).toBe(\"PM\");\n      });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should parse \"3:05:03 PM\"",
            "suites": [
                "flatpickr",
                "datetimestring parser",
                "time string parser"
            ],
            "updatePoint": {
                "line": 314,
                "column": 35
            },
            "line": 314,
            "code": "      it('should parse \"3:05:03 PM\"', () => {\n        createInstance({\n          allowInput: true,\n          enableTime: true,\n          enableSeconds: true,\n          noCalendar: true,\n          dateFormat: \"h:i:S K\",\n          defaultDate: \"3:05:03 PM\",\n        });\n\n        expect(fp.selectedDates[0]).toBeDefined();\n        expect(fp.selectedDates[0].getHours()).toBe(15);\n        expect(fp.selectedDates[0].getMinutes()).toBe(5);\n        expect(fp.selectedDates[0].getSeconds()).toBe(3);\n\n        expect(fp.amPM).toBeDefined();\n        fp.amPM && expect(fp.amPM.innerHTML).toBe(\"PM\");\n      });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should parse defaultHour",
            "suites": [
                "flatpickr",
                "datetimestring parser",
                "time string parser"
            ],
            "updatePoint": {
                "line": 333,
                "column": 34
            },
            "line": 333,
            "code": "      it(\"should parse defaultHour\", () => {\n        createInstance({\n          enableTime: true,\n          noCalendar: true,\n          defaultHour: 0,\n        });\n\n        expect((fp.hourElement as HTMLInputElement).value).toEqual(\"12\");\n\n        createInstance({\n          enableTime: true,\n          noCalendar: true,\n          defaultHour: 12,\n        });\n\n        expect((fp.hourElement as HTMLInputElement).value).toEqual(\"12\");\n\n        createInstance({\n          enableTime: true,\n          noCalendar: true,\n          defaultHour: 23,\n          time_24hr: true,\n        });\n\n        expect((fp.hourElement as HTMLInputElement).value).toEqual(\"23\");\n      });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should format the date with the pattern \"\"",
            "suites": [
                "flatpickr",
                "date formatting",
                "default formatter"
            ],
            "updatePoint": {
                "line": 368,
                "column": 71
            },
            "line": 368,
            "code": "      it(`should format the date with the pattern \"${DEFAULT_FORMAT_1}\"`, () => {\n        const RESULT = \"20.10.16 09:19:59\";\n        createInstance({\n          dateFormat: DEFAULT_FORMAT_1,\n        });\n\n        fp.setDate(\"20.10.16 09:19:59\");\n        expect(fp.input.value).toEqual(RESULT);\n        fp.setDate(\"2015.11.21 19:29:49\");\n        expect(fp.input.value).not.toEqual(RESULT);\n      });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should format dates for year 0001",
            "suites": [
                "flatpickr",
                "date formatting",
                "default formatter"
            ],
            "updatePoint": {
                "line": 380,
                "column": 43
            },
            "line": 380,
            "code": "      it(\"should format dates for year 0001\", () => {\n        const RESULT = \"0001-07-15\";\n        createInstance({\n          dateFormat: DEFAULT_FORMAT_3,\n        });\n\n        fp.setDate(\"0001-07-15\");\n        expect(fp.input.value).toEqual(RESULT);\n      });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should format the date with the pattern \"\"",
            "suites": [
                "flatpickr",
                "date formatting",
                "default formatter"
            ],
            "updatePoint": {
                "line": 390,
                "column": 71
            },
            "line": 390,
            "code": "      it(`should format the date with the pattern \"${DEFAULT_FORMAT_2}\"`, () => {\n        const RESULT = \"Thu 20 October, '16\";\n        createInstance({\n          dateFormat: DEFAULT_FORMAT_2,\n        });\n\n        fp.setDate(\"Thu 20 October, '16\");\n        expect(fp.input.value).toEqual(RESULT);\n        fp.setDate(\"2015-11-21 19:29:49\");\n        expect(fp.input.value).not.toEqual(RESULT);\n      });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should format the date using the custom formatter",
            "suites": [
                "flatpickr",
                "date formatting",
                "custom formatter"
            ],
            "updatePoint": {
                "line": 404,
                "column": 59
            },
            "line": 404,
            "code": "      it(\"should format the date using the custom formatter\", () => {\n        const RESULT = \"MAAAGIC.*^*.2016.*^*.20.*^*.10\";\n        createInstance({\n          dateFormat: \"YEAR-DAYOFMONTH-MONTH\",\n          formatDate(date, formatStr) {\n            let segs = formatStr.split(\"-\");\n            return (\n              \"MAAAGIC.*^*.\" +\n              segs\n                .map((seg) => {\n                  let mapped = null;\n                  switch (seg) {\n                    case \"DAYOFMONTH\":\n                      mapped = date.getDate();\n                      break;\n                    case \"MONTH\":\n                      mapped = date.getMonth() + 1;\n                      break;\n                    case \"YEAR\":\n                      mapped = date.getFullYear();\n                      break;\n                  }\n                  return \"\" + mapped;\n                })\n                .join(\".*^*.\")\n            );\n          },\n        });\n\n        fp.setDate(new Date(2016, 9, 20));\n        expect(fp.input.value).toEqual(RESULT);\n\n        fp.setDate(new Date(2016, 10, 20));\n        expect(fp.input.value).not.toEqual(RESULT);\n      });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "changeMonth()",
            "suites": [
                "flatpickr",
                "API"
            ],
            "updatePoint": {
                "line": 443,
                "column": 21
            },
            "line": 443,
            "code": "    it(\"changeMonth()\", () => {\n      createInstance({\n        defaultDate: \"2016-12-20\",\n      });\n\n      fp.changeMonth(1);\n      expect(fp.currentYear).toEqual(2017);\n\n      fp.changeMonth(-1);\n      expect(fp.currentYear).toEqual(2016);\n\n      fp.changeMonth(2);\n      expect(fp.currentMonth).toEqual(1);\n      expect(fp.currentYear).toEqual(2017);\n\n      fp.changeMonth(14);\n      expect(fp.currentYear).toEqual(2018);\n      expect(fp.currentMonth).toEqual(3);\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "destroy()",
            "suites": [
                "flatpickr",
                "API"
            ],
            "updatePoint": {
                "line": 463,
                "column": 17
            },
            "line": 463,
            "code": "    it(\"destroy()\", () => {\n      let fired = false;\n      const input = fp.input;\n\n      createInstance({\n        altInput: true,\n        onKeyDown: [\n          () => {\n            fired = true;\n          },\n        ],\n      });\n\n      expect(input.type).toEqual(\"hidden\");\n\n      fp.open();\n      fp.altInput &&\n        simulate(\"keydown\", fp.altInput, { keyCode: 37, bubbles: true }); // \"ArrowLeft\"\n      expect(fired).toEqual(true);\n\n      fp.destroy();\n\n      expect(input.type).toEqual(\"text\");\n      expect(fp.altInput).toBeUndefined();\n      expect(fp.config).toBeUndefined();\n\n      fired = false;\n\n      simulate(\"keydown\", input, { keyCode: 37, bubbles: true }); // \"ArrowLeft\"\n      simulate(\"keydown\", document.body, { keyCode: 37, bubbles: true }); // \"ArrowLeft\"\n      expect(fired).toEqual(false);\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "set (option, value)",
            "suites": [
                "flatpickr",
                "API"
            ],
            "updatePoint": {
                "line": 496,
                "column": 27
            },
            "line": 496,
            "code": "    it(\"set (option, value)\", () => {\n      createInstance();\n      fp.set(\"minDate\", \"2016-10-20\");\n\n      expect(fp.currentYearElement.min).toEqual(\"2016\");\n      expect(fp.config.minDate).toBeDefined();\n\n      fp.set(\"minDate\", null);\n      expect(fp.currentYearElement.hasAttribute(\"min\")).toEqual(false);\n\n      fp.set(\"maxDate\", \"2016-10-20\");\n\n      expect(fp.config.maxDate).toBeDefined();\n      expect(fp.currentYearElement.max).toEqual(\"2016\");\n\n      fp.set(\"maxDate\", null);\n      expect(fp.currentYearElement.hasAttribute(\"max\")).toEqual(false);\n\n      fp.set(\"mode\", \"range\");\n      expect(fp.config.mode).toEqual(\"range\");\n\n      const elem = document.createElement(\"div\");\n      fp.set(\"positionElement\", elem);\n      expect(fp._positionElement).toEqual(elem);\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "set() minDate/maxDate updates current view",
            "suites": [
                "flatpickr",
                "API"
            ],
            "updatePoint": {
                "line": 522,
                "column": 50
            },
            "line": 522,
            "code": "    it(\"set() minDate/maxDate updates current view\", () => {\n      createInstance();\n      const now = new Date();\n      const nextMonth = new Date();\n      nextMonth.setMonth(now.getMonth() + 1);\n\n      expect(fp.currentMonth).toEqual(now.getMonth());\n\n      fp.set(\"minDate\", nextMonth);\n      expect(fp.currentMonth).toEqual(nextMonth.getMonth());\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "setDate (date)",
            "suites": [
                "flatpickr",
                "API"
            ],
            "updatePoint": {
                "line": 534,
                "column": 22
            },
            "line": 534,
            "code": "    it(\"setDate (date)\", () => {\n      createInstance({\n        enableTime: true,\n      });\n      fp.setDate(\"2016-10-20 03:00\");\n\n      expect(fp.selectedDates[0]).toBeDefined();\n      expect(fp.selectedDates[0].getFullYear()).toEqual(2016);\n      expect(fp.selectedDates[0].getMonth()).toEqual(9);\n      expect(fp.selectedDates[0].getDate()).toEqual(20);\n      expect(fp.selectedDates[0].getHours()).toEqual(3);\n\n      expect(fp.currentYear).toEqual(2016);\n      expect(fp.currentMonth).toEqual(9);\n\n      if (fp.hourElement && fp.minuteElement && fp.amPM) {\n        expect(fp.hourElement.value).toEqual(\"03\");\n        expect(fp.minuteElement.value).toEqual(\"00\");\n        expect(fp.amPM.textContent).toEqual(\"AM\");\n      }\n\n      fp.setDate(0);\n      expect(fp.selectedDates[0]).toBeDefined();\n      expect(fp.selectedDates[0].getFullYear()).toBeLessThan(1971);\n\n      fp.setDate(\"\");\n      expect(fp.selectedDates[0]).not.toBeDefined();\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "has valid latestSelectedDateObj",
            "suites": [
                "flatpickr",
                "API"
            ],
            "updatePoint": {
                "line": 563,
                "column": 39
            },
            "line": 563,
            "code": "    it(\"has valid latestSelectedDateObj\", () => {\n      createInstance({\n        defaultDate: \"2016-10-01 3:30\",\n        enableTime: true,\n      });\n\n      expect(fp.latestSelectedDateObj).toBeDefined();\n      if (fp.latestSelectedDateObj) {\n        expect(fp.latestSelectedDateObj.getFullYear()).toEqual(2016);\n        expect(fp.latestSelectedDateObj.getMonth()).toEqual(9);\n        expect(fp.latestSelectedDateObj.getDate()).toEqual(1);\n      }\n\n      if (fp.hourElement && fp.minuteElement && fp.amPM) {\n        expect(fp.hourElement.value).toEqual(\"03\");\n        expect(fp.minuteElement.value).toEqual(\"30\");\n        expect(fp.amPM.textContent).toEqual(\"AM\");\n      }\n\n      fp.setDate(\"2016-11-03 16:49\");\n      expect(fp.latestSelectedDateObj).toBeDefined();\n      if (fp.latestSelectedDateObj) {\n        expect(fp.latestSelectedDateObj.getFullYear()).toEqual(2016);\n        expect(fp.latestSelectedDateObj.getMonth()).toEqual(10);\n        expect(fp.latestSelectedDateObj.getDate()).toEqual(3);\n      }\n\n      if (fp.hourElement && fp.minuteElement && fp.amPM) {\n        expect(fp.hourElement.value).toEqual(\"04\");\n        expect(fp.minuteElement.value).toEqual(\"49\");\n        expect(fp.amPM.textContent).toEqual(\"PM\");\n      }\n\n      fp.setDate(\"\");\n      expect(fp.latestSelectedDateObj).toEqual(undefined);\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "parses dates in enable[] and disable[]",
            "suites": [
                "flatpickr",
                "API"
            ],
            "updatePoint": {
                "line": 600,
                "column": 46
            },
            "line": 600,
            "code": "    it(\"parses dates in enable[] and disable[]\", () => {\n      createInstance({\n        disable: [\n          { from: \"2016-11-20\", to: \"2016-12-20\" },\n          \"2016-12-21\",\n          null as any,\n        ],\n        enable: [\n          { from: \"2016-11-20\", to: \"2016-12-20\" },\n          \"2016-12-21\",\n          null as any,\n        ],\n      });\n\n      expect(\n        (fp.config.disable[0] as DateRangeLimit).from instanceof Date\n      ).toBe(true);\n      expect((fp.config.disable[0] as DateRangeLimit).to instanceof Date).toBe(\n        true\n      );\n      expect(fp.config.disable[1] instanceof Date).toBe(true);\n\n      expect(fp.config.disable.indexOf(null as any)).toBe(-1);\n\n      expect(\n        (fp.config.enable?.[0] as DateRangeLimit).from instanceof Date\n      ).toBe(true);\n      expect((fp.config.enable?.[0] as DateRangeLimit).to instanceof Date).toBe(\n        true\n      );\n      expect(fp.config.enable?.[1] instanceof Date).toBe(true);\n\n      expect(fp.config.enable?.indexOf(null as any)).toBe(-1);\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "documentClick",
            "suites": [
                "flatpickr",
                "API"
            ],
            "updatePoint": {
                "line": 635,
                "column": 21
            },
            "line": 635,
            "code": "    it(\"documentClick\", () => {\n      createInstance({\n        mode: \"range\",\n      });\n\n      simulate(\"focus\", fp._input, { which: 1, bubbles: true }, CustomEvent);\n      fp._input.focus();\n\n      expect(fp.isOpen).toBe(true);\n      simulate(\"mousedown\", window.document.body, { which: 1 }, CustomEvent);\n      fp._input.blur();\n\n      expect(fp.isOpen).toBe(false);\n      expect(fp.calendarContainer.classList.contains(\"open\")).toBe(false);\n\n      expect(fp.selectedDates.length).toBe(0);\n      simulate(\"focus\", fp._input);\n      simulate(\n        \"click\",\n        fp.days.childNodes[15],\n        { which: 1, bubbles: true },\n        CustomEvent\n      );\n      expect(fp.selectedDates.length).toBe(1);\n\n      fp.isOpen = true;\n      simulate(\"mousedown\", window.document.body, { which: 1 }, CustomEvent);\n      expect(fp.isOpen).toBe(false);\n      expect(fp.selectedDates.length).toBe(0);\n      expect(fp._input.value).toBe(\"\");\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "onKeyDown",
            "suites": [
                "flatpickr",
                "API"
            ],
            "updatePoint": {
                "line": 667,
                "column": 17
            },
            "line": 667,
            "code": "    it(\"onKeyDown\", () => {\n      createInstance({\n        enableTime: true,\n        altInput: true,\n      });\n\n      fp.jumpToDate(\"2016-2-1\");\n\n      fp.open();\n      (fp.days.childNodes[15] as HTMLSpanElement).focus();\n\n      simulate(\n        \"keydown\",\n        fp.days.childNodes[15],\n        {\n          keyCode: 13, // \"Enter\"\n        },\n        KeyboardEvent\n      );\n\n      expect(fp.selectedDates.length).toBe(1);\n      simulate(\n        \"keydown\",\n        fp.calendarContainer,\n        {\n          keyCode: 27, // \"Escape\"\n        },\n        KeyboardEvent\n      );\n\n      expect(fp.isOpen).toEqual(false);\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "onKeyDown: arrow nav",
            "suites": [
                "flatpickr",
                "API"
            ],
            "updatePoint": {
                "line": 700,
                "column": 28
            },
            "line": 700,
            "code": "    it(\"onKeyDown: arrow nav\", () => {\n      jest.runAllTimers();\n      createInstance({\n        defaultDate: \"2017-01-01\",\n      });\n\n      fp.open();\n      fp.input.focus();\n\n      simulate(\"keydown\", fp.calendarContainer, {\n        // \"ArrowRight\"\n        keyCode: 39,\n        ctrlKey: true,\n      });\n      expect(fp.currentMonth).toBe(1);\n      expect(fp.currentYear).toBe(2017);\n\n      simulate(\"keydown\", fp.calendarContainer, {\n        // \"ArrowLeft\"\n        keyCode: 37,\n        ctrlKey: true,\n      });\n      simulate(\"keydown\", fp.calendarContainer, {\n        // \"ArrowLeft\"\n        keyCode: 37,\n        ctrlKey: true,\n      });\n      expect(fp.currentMonth).toBe(11);\n      expect(fp.currentYear).toBe(2016);\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "enabling dates by function",
            "suites": [
                "flatpickr",
                "API"
            ],
            "updatePoint": {
                "line": 731,
                "column": 34
            },
            "line": 731,
            "code": "    it(\"enabling dates by function\", () => {\n      createInstance({\n        enable: [(d) => d.getDate() === 6, new Date()],\n        disable: [{ from: \"2016-10-20\", to: \"2016-10-25\" }],\n      });\n\n      expect(fp.isEnabled(\"2016-10-06\")).toBe(true);\n      expect(fp.isEnabled(new Date())).toBe(true);\n      expect(fp.isEnabled(\"2016-10-20\")).toBe(false);\n      expect(fp.isEnabled(\"2016-10-22\")).toBe(false);\n      expect(fp.isEnabled(\"2016-10-25\")).toBe(false);\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "resets currentMonth and currentYear",
            "suites": [
                "flatpickr",
                "API",
                "clear()"
            ],
            "updatePoint": {
                "line": 745,
                "column": 45
            },
            "line": 745,
            "code": "      it(\"resets currentMonth and currentYear\", () => {\n        createInstance({\n          defaultDate: \"2016-01-20\",\n        });\n\n        fp.changeMonth(-1);\n\n        expect(fp.currentMonth).toEqual(11);\n        expect(fp.currentYear).toEqual(2015);\n\n        fp.clear();\n\n        expect(fp.currentMonth).toEqual(0);\n        expect(fp.currentYear).toEqual(2016);\n      });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "triggers monthChange on jump",
            "suites": [
                "flatpickr",
                "API",
                "clear()"
            ],
            "updatePoint": {
                "line": 762,
                "column": 36
            },
            "line": 762,
            "code": "    it(\"triggers monthChange on jump\", (done) => {\n      const fp = createInstance({\n        defaultDate: new Date(2019, 3, 17),\n        onMonthChange: () => {\n          expect(fp.currentMonth).toEqual(4);\n          done();\n        },\n      });\n\n      fp.jumpToDate(new Date(2019, 4, 17), true);\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "triggers yearChange on jump",
            "suites": [
                "flatpickr",
                "API",
                "clear()"
            ],
            "updatePoint": {
                "line": 774,
                "column": 35
            },
            "line": 774,
            "code": "    it(\"triggers yearChange on jump\", (done) => {\n      const fp = createInstance({\n        defaultDate: new Date(2019, 3, 17),\n        onYearChange: () => {\n          expect(fp.currentYear).toEqual(2020);\n          done();\n        },\n      });\n\n      fp.jumpToDate(new Date(2020, 4, 17), true);\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "open() and clickOpens interaction",
            "suites": [
                "flatpickr",
                "API",
                "clear()"
            ],
            "updatePoint": {
                "line": 786,
                "column": 41
            },
            "line": 786,
            "code": "    it(\"open() and clickOpens interaction\", () => {\n      const fp = createInstance({\n        clickOpens: false,\n      });\n\n      simulate(\"click\", fp._input);\n      expect(fp.isOpen).toEqual(false);\n\n      fp.open();\n      expect(fp.isOpen).toEqual(true);\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "mode: multiple",
            "suites": [
                "flatpickr",
                "UI"
            ],
            "updatePoint": {
                "line": 800,
                "column": 22
            },
            "line": 800,
            "code": "    it(\"mode: multiple\", () => {\n      createInstance({\n        mode: \"multiple\",\n      });\n\n      fp.jumpToDate(\"2017-1-1\");\n      fp.open();\n\n      simulate(\"keydown\", fp.days.childNodes[0], { keyCode: 13 }); // \"Enter\"\n      expect(fp.selectedDates.length).toBe(1);\n\n      simulate(\"keydown\", fp.days.childNodes[0], { keyCode: 13 }); // \"Enter\"\n      expect(fp.selectedDates.length).toBe(0);\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "switch month to selectedDate",
            "suites": [
                "flatpickr",
                "UI"
            ],
            "updatePoint": {
                "line": 815,
                "column": 36
            },
            "line": 815,
            "code": "    it(\"switch month to selectedDate\", () => {\n      createInstance();\n      fp.jumpToDate(\"2017-1-1\");\n      expect(fp.currentMonth).toBe(0);\n\n      simulate(\"click\", fp.days.childNodes[41], { which: 1 }, MouseEvent);\n      expect(fp.selectedDates.length).toBe(1);\n      expect(fp.currentMonth).toBe(1);\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "static calendar",
            "suites": [
                "flatpickr",
                "UI"
            ],
            "updatePoint": {
                "line": 825,
                "column": 23
            },
            "line": 825,
            "code": "    it(\"static calendar\", () => {\n      createInstance({\n        static: true,\n      });\n\n      expect(fp.calendarContainer.classList.contains(\"static\")).toBe(true);\n      if (!fp.element.parentNode) return;\n      expect(\n        (fp.element.parentNode as Element).classList.contains(\n          \"flatpickr-wrapper\"\n        )\n      ).toBe(true);\n      expect(fp.element.parentNode.childNodes[0]).toEqual(fp.element);\n      expect(fp.element.parentNode.childNodes[1]).toEqual(fp.calendarContainer);\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "range mode - no month jump",
            "suites": [
                "flatpickr",
                "UI"
            ],
            "updatePoint": {
                "line": 841,
                "column": 34
            },
            "line": 841,
            "code": "    it(\"range mode - no month jump\", () => {\n      createInstance({\n        mode: \"range\",\n        maxDate: \"today\",\n        defaultDate: [\"2019-02-01\", \"2019-02-27\"],\n      });\n\n      fp.open();\n      simulate(\"click\", fp.prevMonthNav, { which: 1 }, CustomEvent);\n      expect(fp.currentMonth).toEqual(0);\n\n      simulate(\"click\", fp.days.children[2], { which: 1 }, CustomEvent);\n      expect(fp.currentMonth).toEqual(0);\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "sets the date on direct entry when allowInput is true",
            "suites": [
                "flatpickr",
                "UI"
            ],
            "updatePoint": {
                "line": 856,
                "column": 61
            },
            "line": 856,
            "code": "    it(\"sets the date on direct entry when allowInput is true\", () => {\n      createInstance({ allowInput: true });\n      expect(fp.selectedDates[0]).toBeUndefined();\n\n      fp.input.focus();\n      fp.input.value = \"1999-12-31\";\n      fp.input.blur();\n\n      expect(fp.selectedDates[0]).toBeDefined();\n      expect(fp.selectedDates[0].getFullYear()).toEqual(1999);\n      expect(fp.selectedDates[0].getMonth()).toEqual(11); // 11 === December\n      expect(fp.selectedDates[0].getDate()).toEqual(31);\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "updates the date on direct entry when allowInput is true",
            "suites": [
                "flatpickr",
                "UI"
            ],
            "updatePoint": {
                "line": 870,
                "column": 64
            },
            "line": 870,
            "code": "    it(\"updates the date on direct entry when allowInput is true\", () => {\n      createInstance({\n        allowInput: true,\n        enableTime: true,\n        defaultDate: \"2001-01-01 01:01\",\n      });\n      expect(fp.selectedDates[0]).toBeDefined();\n      expect(fp.selectedDates[0].getFullYear()).toEqual(2001);\n      expect(fp.selectedDates[0].getMonth()).toEqual(0); // 0 === January\n      expect(fp.selectedDates[0].getDate()).toEqual(1);\n      expect(fp.selectedDates[0].getHours()).toEqual(1);\n      expect(fp.selectedDates[0].getMinutes()).toEqual(1);\n\n      fp.input.focus();\n      fp.input.value = \"1969-07-20 20:17\";\n      fp.input.blur();\n\n      expect(fp.selectedDates[0]).toBeDefined();\n      expect(fp.selectedDates[0].getFullYear()).toEqual(1969);\n      expect(fp.selectedDates[0].getMonth()).toEqual(6); // 6 === July\n      expect(fp.selectedDates[0].getDate()).toEqual(20);\n      expect(fp.selectedDates[0].getHours()).toEqual(20);\n      expect(fp.selectedDates[0].getMinutes()).toEqual(17);\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "returns true",
            "suites": [
                "flatpickr",
                "UI",
                "mobile calendar",
                ".isMobile"
            ],
            "updatePoint": {
                "line": 897,
                "column": 24
            },
            "line": 897,
            "code": "        it(\"returns true\", () => {\n          mockAgent = \"Android\";\n          createInstance();\n\n          expect(fp.isMobile).toBe(true);\n        });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "with value",
            "suites": [
                "flatpickr",
                "UI",
                "mobile calendar",
                "init"
            ],
            "updatePoint": {
                "line": 906,
                "column": 22
            },
            "line": 906,
            "code": "        it(\"with value\", () => {\n          mockAgent = \"Android\";\n          createInstance({\n            enableTime: true,\n          });\n\n          const mobileInput = fp.mobileInput as HTMLInputElement;\n          mobileInput.value = \"2016-10-20T02:30\";\n          simulate(\"change\", mobileInput);\n\n          expect(fp.selectedDates.length).toBe(1);\n          expect(fp.latestSelectedDateObj).toBeDefined();\n\n          if (!fp.latestSelectedDateObj) return;\n          expect(fp.latestSelectedDateObj.getFullYear()).toBe(2016);\n          expect(fp.latestSelectedDateObj.getMonth()).toBe(9);\n          expect(fp.latestSelectedDateObj.getDate()).toBe(20);\n          expect(fp.latestSelectedDateObj.getHours()).toBe(2);\n          expect(fp.latestSelectedDateObj.getMinutes()).toBe(30);\n        });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "copy className and adds own",
            "suites": [
                "flatpickr",
                "UI",
                "mobile calendar",
                "init"
            ],
            "updatePoint": {
                "line": 927,
                "column": 39
            },
            "line": 927,
            "code": "        it(\"copy className and adds own\", () => {\n          const el = document.createElement(\"input\");\n          el.className = \"foo bar\";\n\n          mockAgent = \"Android\";\n          createInstance({}, el);\n\n          const mobileInput = fp.mobileInput as HTMLInputElement;\n\n          expect(mobileInput.classList).toContain(\"foo\");\n          expect(mobileInput.classList).toContain(\"bar\");\n          expect(mobileInput.classList).toContain(\"flatpickr-mobile\");\n        });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "copy value if present",
            "suites": [
                "flatpickr",
                "UI",
                "mobile calendar",
                "init",
                "step attribute"
            ],
            "updatePoint": {
                "line": 942,
                "column": 35
            },
            "line": 942,
            "code": "          it(\"copy value if present\", () => {\n            const el = document.createElement(\"input\");\n            el.setAttribute(\"step\", \"3\");\n\n            mockAgent = \"Android\";\n            createInstance({}, el);\n\n            const mobileInput = fp.mobileInput as HTMLInputElement;\n\n            expect(mobileInput.getAttribute(\"step\")).toBe(\"3\");\n          });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "don't set a default value if not present",
            "suites": [
                "flatpickr",
                "UI",
                "mobile calendar",
                "init",
                "step attribute"
            ],
            "updatePoint": {
                "line": 954,
                "column": 54
            },
            "line": 954,
            "code": "          it(\"don't set a default value if not present\", () => {\n            const el = document.createElement(\"input\");\n            el.removeAttribute(\"step\");\n\n            mockAgent = \"Android\";\n            createInstance({}, el);\n\n            const mobileInput = fp.mobileInput as HTMLInputElement;\n\n            expect(mobileInput.getAttribute(\"step\")).toBe(null);\n          });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "with other attributes",
            "suites": [
                "flatpickr",
                "UI",
                "mobile calendar",
                "init",
                "step attribute"
            ],
            "updatePoint": {
                "line": 967,
                "column": 33
            },
            "line": 967,
            "code": "        it(\"with other attributes\", () => {\n          const el = document.createElement(\"input\");\n          el.placeholder = \"foo\";\n          el.disabled = true;\n          el.required = true;\n\n          mockAgent = \"Android\";\n          createInstance({}, el);\n\n          const mobileInput = fp.mobileInput as HTMLInputElement;\n\n          expect(mobileInput.placeholder).toBe(\"foo\");\n          expect(mobileInput.disabled).toBe(true);\n          expect(mobileInput.required).toBe(true);\n        });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "with confirmDatePlugin",
            "suites": [
                "flatpickr",
                "UI",
                "mobile calendar",
                "init",
                "step attribute"
            ],
            "updatePoint": {
                "line": 983,
                "column": 34
            },
            "line": 983,
            "code": "        it(\"with confirmDatePlugin\", () => {\n          mockAgent = \"Android\";\n          createInstance({\n            plugins: [confirmDatePlugin({})],\n          });\n        });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "selectDate() + onChange() through GUI",
            "suites": [
                "flatpickr",
                "UI",
                "mobile calendar",
                "init",
                "step attribute"
            ],
            "updatePoint": {
                "line": 992,
                "column": 45
            },
            "line": 992,
            "code": "    it(\"selectDate() + onChange() through GUI\", () => {\n      function verifySelected(date: Date | undefined) {\n        expect(date).toBeDefined();\n        if (!date) return;\n        expect(date.getFullYear()).toEqual(2016);\n        expect(date.getMonth()).toEqual(9);\n        expect(date.getDate()).toEqual(10);\n      }\n\n      createInstance({\n        enableTime: true,\n        defaultDate: \"2016-10-01 3:30\",\n        onChange: (dates) => {\n          if (dates.length) verifySelected(dates[0]);\n        },\n      });\n\n      fp.open();\n      simulate(\"click\", fp.days.childNodes[15], { which: 1 }, MouseEvent); // oct 10\n\n      verifySelected(fp.selectedDates[0]);\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "year input",
            "suites": [
                "flatpickr",
                "UI",
                "mobile calendar",
                "init",
                "step attribute"
            ],
            "updatePoint": {
                "line": 1015,
                "column": 18
            },
            "line": 1015,
            "code": "    it(\"year input\", () => {\n      createInstance();\n      fp.currentYearElement.value = \"2000\";\n      simulate(\"keyup\", fp.currentYearElement, KeyboardEvent);\n\n      expect(fp.currentYear).toEqual(2000);\n      incrementTime(\"currentYearElement\", 1);\n\n      expect(fp.currentYear).toEqual(2001);\n      expect(fp.currentYearElement.value).toEqual(\"2001\");\n      expect(\n        (fp.days.childNodes[10] as DayElement).dateObj.getFullYear()\n      ).toEqual(2001);\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "time input and increments",
            "suites": [
                "flatpickr",
                "UI",
                "mobile calendar",
                "init",
                "step attribute"
            ],
            "updatePoint": {
                "line": 1030,
                "column": 33
            },
            "line": 1030,
            "code": "    it(\"time input and increments\", () => {\n      createInstance({\n        enableTime: true,\n        defaultDate: \"2017-1-1 10:00\",\n        //minDate: \"2017-1-01 3:35\",\n      });\n\n      expect(fp.hourElement).toBeDefined();\n      expect(fp.minuteElement).toBeDefined();\n      expect(fp.amPM).toBeDefined();\n\n      if (!fp.hourElement || !fp.minuteElement || !fp.amPM) return;\n\n      expect(fp.hourElement.value).toEqual(\"10\");\n      expect(fp.minuteElement.value).toEqual(\"00\");\n      expect(fp.amPM.textContent).toEqual(\"AM\");\n\n      incrementTime(\"hourElement\", 1);\n      expect(fp.hourElement.value).toEqual(\"11\");\n\n      incrementTime(\"minuteElement\", 1);\n      expect(fp.minuteElement.value).toEqual(\"05\");\n\n      simulate(\"click\", fp.amPM, { which: 1 }, MouseEvent);\n      expect(fp.amPM.textContent).toEqual(\"PM\");\n\n      simulate(\"increment\", fp.hourElement, {\n        delta: 1,\n      });\n\n      expect(fp.hourElement.value).toEqual(\"12\");\n\n      fp.hourElement.value = \"9\";\n      simulate(\"input\", fp.hourElement);\n      simulate(\"blur\", fp.hourElement);\n      expect(fp.hourElement.value).toEqual(\"09\");\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "time input respects minDate",
            "suites": [
                "flatpickr",
                "UI",
                "mobile calendar",
                "init",
                "step attribute"
            ],
            "updatePoint": {
                "line": 1068,
                "column": 35
            },
            "line": 1068,
            "code": "    it(\"time input respects minDate\", () => {\n      createInstance({\n        enableTime: true,\n        dateFormat: \"Y-m-d H:i\",\n        defaultDate: \"2017-1-1 4:00\",\n        minDate: \"2017-1-01 3:35\",\n      });\n\n      expect(!!fp.minDateHasTime).toBe(true);\n\n      const [hourElem, minuteElem] = [\n        fp.hourElement as HTMLInputElement,\n        fp.minuteElement as HTMLInputElement,\n      ];\n      incrementTime(\"hourElement\", -1);\n      expect(hourElem.value).toEqual(\"03\");\n      expect(minuteElem.value).toEqual(\"35\");\n\n      incrementTime(\"hourElement\", -1);\n      expect(hourElem.value).toEqual(\"03\"); // unchanged\n\n      incrementTime(\"minuteElement\", -1);\n      expect(minuteElem.value).toEqual(\"35\"); // can't go lower than min\n\n      incrementTime(\"minuteElement\", 1);\n      expect(minuteElem.value).toEqual(\"40\");\n\n      hourElem.value = \"2\";\n      simulate(\"input\", hourElem);\n\n      simulate(\"blur\", hourElem);\n\n      expect(hourElem.value).toEqual(\"03\");\n\n      minuteElem.value = \"00\";\n      simulate(\"input\", minuteElem);\n      simulate(\"blur\", minuteElem);\n      expect(minuteElem.value).toEqual(\"35\");\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "time input respects maxDate",
            "suites": [
                "flatpickr",
                "UI",
                "mobile calendar",
                "init",
                "step attribute"
            ],
            "updatePoint": {
                "line": 1108,
                "column": 35
            },
            "line": 1108,
            "code": "    it(\"time input respects maxDate\", () => {\n      createInstance({\n        enableTime: true,\n        defaultDate: \"2017-1-1 3:00\",\n        maxDate: \"2017-1-01 3:35\",\n      });\n\n      const [hourElem, minuteElem] = [\n        fp.hourElement as HTMLInputElement,\n        fp.minuteElement as HTMLInputElement,\n      ];\n\n      incrementTime(\"hourElement\", -1);\n      expect(hourElem.value).toEqual(\"02\"); // ok\n\n      incrementTime(\"hourElement\", 3);\n      expect(hourElem.value).toEqual(\"03\");\n\n      incrementTime(\"minuteElement\", 8);\n      expect(minuteElem.value).toEqual(\"35\"); // can't go higher than 35\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "time input respects same-day minDate/maxDate",
            "suites": [
                "flatpickr",
                "UI",
                "mobile calendar",
                "init",
                "step attribute"
            ],
            "updatePoint": {
                "line": 1130,
                "column": 52
            },
            "line": 1130,
            "code": "    it(\"time input respects same-day minDate/maxDate\", () => {\n      createInstance({\n        enableTime: true,\n        minDate: \"2017-1-01 2:00 PM\",\n        maxDate: \"2017-1-01 3:35 PM\",\n      });\n\n      const [hourElem, minuteElem] = [\n        fp.hourElement as HTMLInputElement,\n        fp.minuteElement as HTMLInputElement,\n      ];\n\n      fp.setDate(\"2017-1-1 2:30 PM\");\n\n      incrementTime(\"hourElement\", -1);\n\n      simulate(\n        \"wheel\",\n        hourElem,\n        {\n          wheelDelta: -1,\n        },\n        MouseEvent\n      );\n\n      expect(hourElem.value).toEqual(\"02\"); // ok\n\n      incrementTime(\"hourElement\", 4);\n      expect(hourElem.value).toEqual(\"03\");\n\n      incrementTime(\"minuteElement\", 8);\n      simulate(\n        \"wheel\",\n        minuteElem,\n        {\n          wheelDelta: 1,\n        },\n        MouseEvent\n      );\n\n      expect(minuteElem.value).toEqual(\"35\"); // can't go higher than 35\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "time picker: implicit selectedDate",
            "suites": [
                "flatpickr",
                "UI",
                "mobile calendar",
                "init",
                "step attribute"
            ],
            "updatePoint": {
                "line": 1173,
                "column": 42
            },
            "line": 1173,
            "code": "    it(\"time picker: implicit selectedDate\", () => {\n      createInstance({\n        enableTime: true,\n        noCalendar: true,\n      });\n\n      expect(fp.selectedDates.length).toEqual(0);\n      fp.open();\n      incrementTime(\"minuteElement\", 1);\n\n      expect(fp.selectedDates.length).toEqual(1);\n      expect(fp.selectedDates[0].getDate()).toEqual(new Date().getDate());\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "time picker: minDate",
            "suites": [
                "flatpickr",
                "UI",
                "mobile calendar",
                "init",
                "step attribute"
            ],
            "updatePoint": {
                "line": 1187,
                "column": 28
            },
            "line": 1187,
            "code": "    it(\"time picker: minDate\", () => {\n      createInstance({\n        noCalendar: true,\n        enableTime: true,\n        dateFormat: \"H:i\",\n        minDate: \"23:59\",\n      });\n\n      fp.open();\n\n      simulate(\"increment\", fp.minuteElement as Node, {\n        delta: 1,\n      });\n\n      expect(fp.input.value.length).toBeGreaterThan(0);\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "getDefaultHours()",
            "suites": [
                "flatpickr",
                "UI",
                "mobile calendar",
                "init",
                "step attribute"
            ],
            "updatePoint": {
                "line": 1204,
                "column": 25
            },
            "line": 1204,
            "code": "    it(\"getDefaultHours()\", () => {\n      const fp = createInstance({\n        noCalendar: true,\n        enableTime: true,\n        dateFormat: \"H:i\",\n        minDate: \"02:30\",\n        defaultHour: 2,\n        defaultMinute: 45,\n      });\n      const values = getDefaultHours(fp.config);\n      expect(values.hours).toEqual(2);\n      expect(values.minutes).toEqual(45);\n      expect(fp.hourElement!.value).toEqual(\"02\");\n      expect(fp.minuteElement!.value).toEqual(\"45\");\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "time picker: default hours/mins",
            "suites": [
                "flatpickr",
                "UI",
                "mobile calendar",
                "init",
                "step attribute"
            ],
            "updatePoint": {
                "line": 1220,
                "column": 39
            },
            "line": 1220,
            "code": "    it(\"time picker: default hours/mins\", () => {\n      createInstance({\n        noCalendar: true,\n        enableTime: true,\n        dateFormat: \"H:i\",\n        minDate: \"02:30\",\n        defaultHour: 2,\n        defaultMinute: 45,\n      });\n\n      expect(fp.hourElement!.value).toEqual(\"02\");\n      expect(fp.minuteElement!.value).toEqual(\"45\");\n\n      fp.open();\n      simulate(\"increment\", fp.hourElement!, {\n        delta: 1,\n      });\n      expect(fp.input.value).toEqual(\"03:45\");\n\n      createInstance({\n        enableTime: true,\n        minDate: new Date().setHours(2, 30),\n        defaultHour: 12,\n        defaultMinute: 45,\n      });\n\n      simulate(\"click\", fp.todayDateElem as DayElement, { which: 1 });\n      expect((fp.latestSelectedDateObj as Date).getHours()).toEqual(12);\n      expect((fp.latestSelectedDateObj as Date).getMinutes()).toEqual(45);\n\n      createInstance({\n        enableTime: true,\n        minDate: new Date().setHours(6, 30),\n        defaultHour: 3,\n        defaultMinute: 0,\n      });\n\n      simulate(\"click\", fp.todayDateElem as DayElement, { which: 1 });\n      expect((fp.latestSelectedDateObj as Date).getHours()).toEqual(6);\n      expect((fp.latestSelectedDateObj as Date).getMinutes()).toEqual(30);\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "time picker: minDate + bounds",
            "suites": [
                "flatpickr",
                "UI",
                "mobile calendar",
                "init",
                "step attribute"
            ],
            "updatePoint": {
                "line": 1262,
                "column": 37
            },
            "line": 1262,
            "code": "    it(\"time picker: minDate + bounds\", () => {\n      createInstance({\n        noCalendar: true,\n        enableTime: true,\n        dateFormat: \"H:i\",\n        minDate: \"02:30\",\n        defaultDate: \"3:30\",\n      });\n\n      fp.open();\n\n      incrementTime(\"hourElement\", -1);\n      expect(fp.input.value).toEqual(\"02:30\");\n\n      incrementTime(\"hourElement\", -1);\n      expect(fp.input.value).toEqual(\"02:30\");\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "time picker: minTime/maxTime reversed",
            "suites": [
                "flatpickr",
                "UI",
                "mobile calendar",
                "init",
                "step attribute"
            ],
            "updatePoint": {
                "line": 1280,
                "column": 45
            },
            "line": 1280,
            "code": "    it(\"time picker: minTime/maxTime reversed\", () => {\n      createInstance({\n        enableTime: true,\n        minTime: \"05:30\",\n        maxTime: \"03:30\",\n        defaultDate: \"2021-07-01 1:29\",\n      });\n\n      fp.open();\n\n      expect(fp.input.value).toEqual(\"2021-07-01 01:29\");\n\n      incrementTime(\"hourElement\", +1);\n      expect(fp.input.value).toEqual(\"2021-07-01 02:29\");\n\n      incrementTime(\"hourElement\", +1);\n      expect(fp.input.value).toEqual(\"2021-07-01 03:29\");\n\n      incrementTime(\"hourElement\", +1);\n      expect(fp.input.value).toEqual(\"2021-07-01 05:30\");\n\n      incrementTime(\"hourElement\", +1);\n      expect(fp.input.value).toEqual(\"2021-07-01 06:30\");\n\n      incrementTime(\"hourElement\", -1);\n      incrementTime(\"hourElement\", -1);\n      incrementTime(\"hourElement\", -1);\n      expect(fp.input.value).toEqual(\"2021-07-01 05:30\");\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "time picker: minDate/maxDate + preloading",
            "suites": [
                "flatpickr",
                "UI",
                "mobile calendar",
                "init",
                "step attribute"
            ],
            "updatePoint": {
                "line": 1310,
                "column": 49
            },
            "line": 1310,
            "code": "    it(\"time picker: minDate/maxDate + preloading\", () => {\n      createInstance({\n        enableTime: true,\n        noCalendar: true,\n        dateFormat: \"H:i\",\n        minDate: \"02:30\",\n        defaultDate: \"3:30\",\n        defaultHour: 9,\n      });\n\n      const [hours, minutes, amPM] = [\n        fp.hourElement as HTMLInputElement,\n        fp.minuteElement as HTMLInputElement,\n        fp.amPM as HTMLSpanElement,\n      ];\n\n      expect(hours.value).toBe(\"03\");\n      expect(minutes.value).toBe(\"30\");\n      expect(amPM.textContent).toBe(\"AM\");\n\n      incrementTime(\"hourElement\", -1);\n      expect(hours.value).toBe(\"02\");\n\n      fp.set(\"maxDate\", \"04:30\");\n      incrementTime(\"hourElement\", 3);\n      expect(hours.value).toBe(\"04\");\n\n      simulate(\"click\", amPM, { which: 1 }, MouseEvent);\n      expect(amPM.textContent).toBe(\"AM\");\n\n      fp.clear();\n\n      fp.setDate(\"03:30\");\n      expect(hours.value).toBe(\"03\");\n\n      fp.setDate(\"05:30\");\n      // date exceeds maxDate - value is reset to maxDate's\n      expect(hours.value).toBe(\"04\");\n\n      fp.setDate(\"00:30\");\n      // date lower than minDate - value is reset to defaultHour\n      // since defaultHour > maxDate, value is reset to maxDate\n      expect(hours.value).toBe(\"04\");\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should delay time input validation on keydown",
            "suites": [
                "flatpickr",
                "UI",
                "mobile calendar",
                "init",
                "step attribute"
            ],
            "updatePoint": {
                "line": 1355,
                "column": 53
            },
            "line": 1355,
            "code": "    it(\"should delay time input validation on keydown\", () => {\n      createInstance({\n        enableTime: true,\n        defaultDate: new Date().setHours(17, 30, 0, 0),\n        minDate: new Date().setHours(16, 30, 0, 0),\n        time_24hr: true,\n      });\n\n      const hours = fp.hourElement as HTMLInputElement;\n\n      hours.value = \"16\";\n      simulate(\"input\", hours, {}, KeyboardEvent);\n\n      jest.runAllTimers();\n      expect(hours.value).toEqual(\"16\");\n\n      hours.value = \"1\";\n\n      simulate(\"input\", hours);\n      expect(hours.value).toEqual(\"1\");\n      simulate(\"blur\", hours);\n      expect(hours.value).toEqual(\"16\");\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should have working strap mode",
            "suites": [
                "flatpickr",
                "UI",
                "mobile calendar",
                "init",
                "step attribute"
            ],
            "updatePoint": {
                "line": 1379,
                "column": 38
            },
            "line": 1379,
            "code": "    it(\"should have working strap mode\", () => {\n      let wrapper = document.createElement(\"div\");\n      const input = document.createElement(\"input\");\n      input.setAttribute(\"data-input\", \"\");\n\n      wrapper.appendChild(input);\n\n      [\"open\", \"close\", \"toggle\", \"clear\"].forEach((type) => {\n        let e = document.createElement(\"button\");\n        e.setAttribute(`data-${type}`, \"\");\n        wrapper.appendChild(e);\n      });\n\n      const instance = createInstance(\n        {\n          wrap: true,\n        },\n        wrapper\n      );\n\n      expect(instance.input).toEqual(input);\n\n      simulate(\"click\", wrapper.childNodes[1], { which: 1 }, MouseEvent); // open\n      expect(instance.isOpen).toEqual(true);\n\n      simulate(\"click\", wrapper.childNodes[2], { which: 1 }, MouseEvent); // close\n      expect(instance.isOpen).toEqual(false);\n\n      simulate(\"click\", wrapper.childNodes[3], { which: 1 }, MouseEvent); // toggle\n      expect(instance.isOpen).toEqual(true);\n      simulate(\"click\", wrapper.childNodes[3], { which: 1 }, MouseEvent);\n      expect(instance.isOpen).toEqual(false);\n\n      instance.setDate(new Date());\n      expect(instance.selectedDates.length).toEqual(1);\n\n      expect(instance.selectedDateElem).toBeDefined();\n      instance.selectedDateElem &&\n        expect(\n          parseInt(instance.selectedDateElem.textContent as string)\n        ).toEqual(new Date().getDate());\n\n      simulate(\"click\", wrapper.childNodes[4], { which: 1 }, MouseEvent); // clear\n      expect(instance.selectedDates.length).toEqual(0);\n      expect(instance.input.value).toEqual(\"\");\n\n      instance.destroy();\n      wrapper.parentNode && wrapper.parentNode.removeChild(wrapper);\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "Time picker initial entry",
            "suites": [
                "flatpickr",
                "UI",
                "mobile calendar",
                "init",
                "step attribute"
            ],
            "updatePoint": {
                "line": 1429,
                "column": 33
            },
            "line": 1429,
            "code": "    it(\"Time picker initial entry\", () => {\n      const fp = createInstance({\n        enableTime: true,\n        noCalendar: true,\n        dateFormat: \"H:i\",\n        time_24hr: true,\n      });\n      fp._input.click();\n      fp.hourElement!.value = \"16\";\n\n      simulate(\n        \"keydown\",\n        fp.hourElement!,\n        {\n          keyCode: 13, // \"Enter\"\n        },\n        KeyboardEvent\n      );\n\n      expect(fp.hourElement!.value).toEqual(\"16\");\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "valid mouseover behavior in range mode",
            "suites": [
                "flatpickr",
                "UI",
                "mobile calendar",
                "init",
                "step attribute"
            ],
            "updatePoint": {
                "line": 1451,
                "column": 46
            },
            "line": 1451,
            "code": "    it(\"valid mouseover behavior in range mode\", () => {\n      createInstance({\n        mode: \"range\",\n      });\n\n      const day = (i: number) => fp.days.childNodes[i] as DayElement;\n\n      simulate(\"mouseover\", fp.days.childNodes[15]);\n      expect(fp.selectedDates.length).toEqual(0);\n\n      fp.setDate(\"2016-1-17\");\n      expect(fp.selectedDates.length).toEqual(1);\n\n      simulate(\"mouseover\", fp.days.childNodes[32]);\n      expect(day(21).classList.contains(\"startRange\")).toEqual(true);\n\n      for (let i = 0; i < 42; i++)\n        expect(day(i).classList.contains(\"inRange\")).toEqual(i > 21 && i < 32);\n\n      expect(day(32).classList.contains(\"endRange\")).toEqual(true);\n\n      fp.clear();\n      fp.set(\"disable\", [\"2016-1-12\", \"2016-1-20\"]);\n      fp.setDate(\"2016-1-17\");\n\n      simulate(\"mouseover\", day(32));\n      expect(day(32).classList.contains(\"endRange\")).toEqual(false);\n      expect(day(24).classList.contains(\"flatpickr-disabled\")).toEqual(true);\n      expect(day(25).classList.contains(\"notAllowed\")).toEqual(true);\n\n      for (let i = 25; i < 32; i++)\n        expect(day(i).classList.contains(\"inRange\")).toEqual(false);\n\n      for (let i = 17; i < 22; i++) {\n        expect(day(i).classList.contains(\"notAllowed\")).toEqual(false);\n        expect(day(i).classList.contains(\"flatpickr-disabled\")).toEqual(false);\n      }\n\n      simulate(\"click\", fp.days.childNodes[17], { which: 1 }, MouseEvent);\n      expect(fp.selectedDates.length).toEqual(2);\n      expect(fp.input.value).toEqual(\"2016-01-13 to 2016-01-17\");\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "adds disabled class to disabled prev/next month arrows",
            "suites": [
                "flatpickr",
                "UI",
                "mobile calendar",
                "init",
                "step attribute"
            ],
            "updatePoint": {
                "line": 1494,
                "column": 62
            },
            "line": 1494,
            "code": "    it(\"adds disabled class to disabled prev/next month arrows\", () => {\n      const isArrowDisabled = (which: \"prevMonthNav\" | \"nextMonthNav\") =>\n        fp[which].classList.contains(\"flatpickr-disabled\");\n      createInstance({\n        minDate: \"2099-1-1\",\n        maxDate: \"2099-3-4\",\n        inline: true,\n      });\n\n      expect(fp.currentMonth).toBe(0);\n      expect(isArrowDisabled(\"prevMonthNav\")).toBe(true);\n      expect(isArrowDisabled(\"nextMonthNav\")).toBe(false);\n\n      simulate(\"click\", fp.nextMonthNav, { which: 1 }, MouseEvent);\n\n      expect(fp.currentMonth).toBe(1);\n      expect(isArrowDisabled(\"prevMonthNav\")).toBe(false);\n      expect(isArrowDisabled(\"nextMonthNav\")).toBe(false);\n\n      simulate(\"click\", fp.nextMonthNav, { which: 1 }, MouseEvent);\n\n      expect(fp.currentMonth).toBe(2);\n      expect(isArrowDisabled(\"prevMonthNav\")).toBe(false);\n      expect(isArrowDisabled(\"nextMonthNav\")).toBe(true);\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "idempotent on focus in and out",
            "suites": [
                "flatpickr",
                "UI",
                "mobile calendar",
                "init",
                "step attribute"
            ],
            "updatePoint": {
                "line": 1520,
                "column": 38
            },
            "line": 1520,
            "code": "    it(\"idempotent on focus in and out\", () => {\n      createInstance({\n        allowInput: true,\n      });\n\n      fp._input.focus();\n      clickOn(document.body);\n      expect(fp._input.value).toEqual(\"\");\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "time-picker focuses out onto input",
            "suites": [
                "flatpickr",
                "UI",
                "mobile calendar",
                "init",
                "step attribute"
            ],
            "updatePoint": {
                "line": 1530,
                "column": 42
            },
            "line": 1530,
            "code": "    it(\"time-picker focuses out onto input\", () => {\n      createInstance({ mode: \"time\" });\n      fp.open();\n\n      expect(fp.hourElement).toBeDefined();\n      expect(fp.minuteElement).toBeDefined();\n      expect(fp.amPM).toBeDefined();\n\n      if (!fp.hourElement || !fp.minuteElement || !fp.amPM) return;\n\n      fp.minuteElement.focus();\n      expect(document.activeElement).toStrictEqual(fp.minuteElement);\n\n      simulate(\n        \"keydown\",\n        fp.minuteElement,\n        {\n          keyCode: 9, // Tab\n        },\n        KeyboardEvent\n      );\n      expect(document.activeElement).toStrictEqual(fp.amPM);\n\n      simulate(\n        \"keydown\",\n        fp.amPM,\n        {\n          keyCode: 9, // Tab\n          shiftKey: true,\n        },\n        KeyboardEvent\n      );\n      expect(document.activeElement).toStrictEqual(fp.minuteElement);\n\n      simulate(\n        \"keydown\",\n        fp.amPM,\n        {\n          keyCode: 9, // Tab\n        },\n        KeyboardEvent\n      );\n      expect(document.activeElement).toStrictEqual(fp._input);\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "dropdown should correctly load months with minDate",
            "suites": [
                "flatpickr",
                "UI",
                "mobile calendar",
                "init",
                "step attribute"
            ],
            "updatePoint": {
                "line": 1575,
                "column": 58
            },
            "line": 1575,
            "code": "    it(\"dropdown should correctly load months with minDate\", () => {\n      const fp = createInstance({\n        defaultDate: new Date(2019, 5, 11),\n        minDate: new Date(2019, 4, 11),\n      }) as Instance;\n\n      const monthsDropdown = fp.calendarContainer.querySelector(\n        \".flatpickr-monthDropdown-months\"\n      );\n\n      expect(monthsDropdown).toBeTruthy();\n      if (!monthsDropdown) return;\n\n      const months = monthsDropdown.querySelectorAll(\n        \".flatpickr-monthDropdown-month\"\n      );\n\n      expect(months.length).toEqual(8);\n      if (months.length != 8) return;\n\n      expect(months[0].innerHTML).toEqual(\"May\");\n      expect(months[7].innerHTML).toEqual(\"December\");\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "dropdown should correctly load months with maxDate",
            "suites": [
                "flatpickr",
                "UI",
                "mobile calendar",
                "init",
                "step attribute"
            ],
            "updatePoint": {
                "line": 1599,
                "column": 58
            },
            "line": 1599,
            "code": "    it(\"dropdown should correctly load months with maxDate\", () => {\n      const fp = createInstance({\n        defaultDate: new Date(2019, 4, 11),\n        maxDate: new Date(2019, 8, 11),\n      }) as Instance;\n\n      const monthsDropdown = fp.calendarContainer.querySelector(\n        \".flatpickr-monthDropdown-months\"\n      );\n\n      expect(monthsDropdown).toBeTruthy();\n      if (!monthsDropdown) return;\n\n      const months = monthsDropdown.querySelectorAll(\n        \".flatpickr-monthDropdown-month\"\n      );\n\n      expect(months.length).toEqual(9);\n      if (months.length != 9) return;\n\n      expect(months[0].innerHTML).toEqual(\"January\");\n      expect(months[months.length - 1].innerHTML).toEqual(\"September\");\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "dropdown should change month",
            "suites": [
                "flatpickr",
                "UI",
                "mobile calendar",
                "init",
                "step attribute"
            ],
            "updatePoint": {
                "line": 1623,
                "column": 36
            },
            "line": 1623,
            "code": "    it(\"dropdown should change month\", () => {\n      const fp = createInstance({\n        defaultDate: new Date(2019, 1, 1),\n      }) as Instance;\n\n      const monthsDropdown = fp.calendarContainer.querySelector(\n        \".flatpickr-monthDropdown-months\"\n      ) as HTMLSelectElement;\n\n      monthsDropdown.value = \"3\";\n\n      var evt = document.createEvent(\"HTMLEvents\");\n      evt.initEvent(\"change\", false, true);\n      monthsDropdown.dispatchEvent(evt);\n\n      expect(fp.currentMonth).toEqual(3);\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "By locale config option",
            "suites": [
                "flatpickr",
                "Localization"
            ],
            "updatePoint": {
                "line": 1643,
                "column": 31
            },
            "line": 1643,
            "code": "    it(\"By locale config option\", () => {\n      createInstance({\n        locale: Russian,\n      });\n\n      expect(fp.l10n.months.longhand[0]).toEqual(\"Январь\");\n\n      createInstance();\n      expect(fp.l10n.months.longhand[0]).toEqual(\"January\");\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "By overriding default locale",
            "suites": [
                "flatpickr",
                "Localization"
            ],
            "updatePoint": {
                "line": 1654,
                "column": 36
            },
            "line": 1654,
            "code": "    it(\"By overriding default locale\", () => {\n      flatpickr.localize(Russian);\n      expect(flatpickr.l10ns.default.months.longhand[0]).toEqual(\"Январь\");\n\n      createInstance();\n      expect(fp.l10n.months.longhand[0]).toEqual(\"Январь\");\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "correctly formats altInput",
            "suites": [
                "flatpickr",
                "Localization"
            ],
            "updatePoint": {
                "line": 1662,
                "column": 34
            },
            "line": 1662,
            "code": "    it(\"correctly formats altInput\", () => {\n      createInstance({\n        locale: Russian,\n        altInput: true,\n        altFormat: \"F\",\n        dateFormat: \"Z\",\n        defaultDate: \"2016-12-27T16:16:22.585Z\",\n      });\n\n      const altInput = fp.altInput as HTMLInputElement;\n      expect(altInput.value).toEqual(\"Декабрь\");\n\n      fp.destroy();\n\n      createInstance({\n        locale: \"en\",\n        altInput: true,\n        altFormat: \"F\",\n        defaultDate: \"2016-12-27T16:16:22.585Z\",\n      });\n      expect((fp.altInput as HTMLInputElement).value).toEqual(\"December\");\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should fire only once",
            "suites": [
                "flatpickr",
                "events + hooks",
                "onOpen"
            ],
            "updatePoint": {
                "line": 1688,
                "column": 31
            },
            "line": 1688,
            "code": "      it(\"should fire only once\", () => {\n        let timesFired = 0;\n\n        const fp = createInstance({\n          onOpen: () => timesFired++,\n        });\n\n        fp.open();\n        expect(timesFired).toEqual(1);\n      });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "doesn't misfire",
            "suites": [
                "flatpickr",
                "events + hooks",
                "onBlur"
            ],
            "updatePoint": {
                "line": 1700,
                "column": 25
            },
            "line": 1700,
            "code": "      it(\"doesn't misfire\", () => {\n        let timesFired = 0;\n        const fp = createInstance({\n          onChange: () => timesFired++,\n        });\n        fp._input.focus();\n        document.body.focus();\n        expect(timesFired).toEqual(0);\n      });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "can be imported",
            "suites": [
                "flatpickr",
                "server-side rendering"
            ],
            "updatePoint": {
                "line": 1713,
                "column": 23
            },
            "line": 1713,
            "code": "    it(\"can be imported\", () => {\n      expect(typeof flatpickr).toEqual(\"function\");\n    });",
            "file": "src/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should correctly preload defaultDate",
            "suites": [
                "monthSelect"
            ],
            "updatePoint": {
                "line": 19,
                "column": 42
            },
            "line": 19,
            "code": "  it(\"should correctly preload defaultDate\", () => {\n    const fp = createInstance({\n      defaultDate: new Date(\"2019-04-20\"),\n      plugins: [monthSelectPlugin({})],\n    }) as Instance;\n\n    expect(fp.input.value).toEqual(\"April 2019\");\n  });",
            "file": "src/plugins/monthSelect/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should correctly preload defaultDate with locale",
            "suites": [
                "monthSelect"
            ],
            "updatePoint": {
                "line": 28,
                "column": 54
            },
            "line": 28,
            "code": "  it(\"should correctly preload defaultDate with locale\", () => {\n    const fp = createInstance({\n      defaultDate: new Date(\"2019-03-20\"),\n      locale: German,\n      plugins: [monthSelectPlugin({})],\n    }) as Instance;\n\n    expect(fp.input.value).toEqual(\"März 2019\");\n  });",
            "file": "src/plugins/monthSelect/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should correctly preload defaultDate with format",
            "suites": [
                "monthSelect"
            ],
            "updatePoint": {
                "line": 38,
                "column": 54
            },
            "line": 38,
            "code": "  it(\"should correctly preload defaultDate with format\", () => {\n    const fp = createInstance({\n      defaultDate: new Date(\"2019-03-20\"),\n      locale: German,\n      plugins: [monthSelectPlugin({ dateFormat: \"m.y\" })],\n    }) as Instance;\n\n    expect(fp.input.value).toEqual(\"03.19\");\n  });",
            "file": "src/plugins/monthSelect/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should correctly preload defaultDate and altInput with format",
            "suites": [
                "monthSelect"
            ],
            "updatePoint": {
                "line": 48,
                "column": 67
            },
            "line": 48,
            "code": "  it(\"should correctly preload defaultDate and altInput with format\", () => {\n    const fp = createInstance({\n      defaultDate: new Date(\"2019-03-20\"),\n      altInput: true,\n      plugins: [monthSelectPlugin({ dateFormat: \"m.y\", altFormat: \"m y\" })],\n    }) as Instance;\n\n    expect(fp.input.value).toEqual(\"03.19\");\n\n    expect(fp.altInput).toBeDefined();\n    if (!fp.altInput) return;\n\n    expect(fp.altInput.value).toEqual(\"03 19\");\n  });",
            "file": "src/plugins/monthSelect/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should increment/decrement year when clicked (#2275)",
            "suites": [
                "monthSelect",
                "year nav",
                "next/prev year buttons"
            ],
            "updatePoint": {
                "line": 65,
                "column": 62
            },
            "line": 65,
            "code": "      it(\"should increment/decrement year when clicked (#2275)\", () => {\n        const initYear = 2020;\n\n        const fp = createInstance({\n          plugins: [monthSelectPlugin()],\n          defaultDate: new Date(`${initYear}-03-20`),\n        }) as Instance;\n\n        const prevButton = fp.monthNav.querySelector(\".flatpickr-prev-month\")!;\n        prevButton.dispatchEvent(new MouseEvent(\"click\"));\n\n        expect(fp.currentYear).toEqual(initYear - 1);\n\n        const nextButton = fp.monthNav.querySelector(\".flatpickr-next-month\")!;\n        nextButton.dispatchEvent(new MouseEvent(\"click\"));\n\n        expect(fp.currentYear).toEqual(initYear);\n      });",
            "file": "src/plugins/monthSelect/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should update displayed year when clicked (#2277)",
            "suites": [
                "monthSelect",
                "year nav",
                "next/prev year buttons"
            ],
            "updatePoint": {
                "line": 84,
                "column": 59
            },
            "line": 84,
            "code": "      it(\"should update displayed year when clicked (#2277)\", () => {\n        const initYear = new Date().getFullYear();\n\n        const fp = createInstance({\n          plugins: [monthSelectPlugin()],\n        }) as Instance;\n\n        const prevButton = fp.monthNav.querySelector(\".flatpickr-prev-month\")!;\n        prevButton.dispatchEvent(new MouseEvent(\"click\"));\n\n        expect(fp.currentYearElement.value).toEqual(`${initYear - 1}`);\n\n        const nextButton = fp.monthNav.querySelector(\".flatpickr-next-month\")!;\n        nextButton.dispatchEvent(new MouseEvent(\"click\"));\n        nextButton.dispatchEvent(new MouseEvent(\"click\"));\n\n        expect(fp.currentYearElement.value).toEqual(`${initYear + 1}`);\n      });",
            "file": "src/plugins/monthSelect/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should honor minDate / maxDate options (#2279)",
            "suites": [
                "monthSelect",
                "year nav",
                "next/prev year buttons"
            ],
            "updatePoint": {
                "line": 103,
                "column": 56
            },
            "line": 103,
            "code": "      it(\"should honor minDate / maxDate options (#2279)\", () => {\n        const lastYear = new Date().getFullYear() - 1;\n        const nextYear = new Date().getFullYear() + 1;\n\n        const fp = createInstance({\n          plugins: [monthSelectPlugin()],\n          minDate: `${lastYear}-03-20`,\n          maxDate: `${nextYear}-03-20`,\n        }) as Instance;\n\n        const prevButton = fp.monthNav.querySelector(\".flatpickr-prev-month\")!;\n        prevButton.dispatchEvent(new MouseEvent(\"click\"));\n\n        expect(prevButton.classList).toContain(\"flatpickr-disabled\");\n\n        const nextButton = fp.monthNav.querySelector(\".flatpickr-next-month\")!;\n        nextButton.dispatchEvent(new MouseEvent(\"click\"));\n        nextButton.dispatchEvent(new MouseEvent(\"click\"));\n\n        expect(nextButton.classList).toContain(\"flatpickr-disabled\");\n      });",
            "file": "src/plugins/monthSelect/index.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should correctly preload defaultDate",
            "suites": [
                "rangePlugin"
            ],
            "updatePoint": {
                "line": 22,
                "column": 42
            },
            "line": 22,
            "code": "  it(\"should correctly preload defaultDate\", () => {\n    const secondInput = document.createElement(\"input\");\n    const fp = createInstance({\n      plugins: [rangePlugin({ input: secondInput })],\n      defaultDate: [\"2017-10-20\", \"2017-10-25\"],\n      dateFormat: \"Y-m-d\",\n    }) as RangeInstance;\n\n    expect(fp.selectedDates.length).toEqual(2);\n    expect(secondInput.value).toEqual(\"2017-10-25\");\n  });",
            "file": "src/plugins/rangePlugin.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should set readonly attribute when allowInput is false",
            "suites": [
                "rangePlugin"
            ],
            "updatePoint": {
                "line": 34,
                "column": 60
            },
            "line": 34,
            "code": "  it(\"should set readonly attribute when allowInput is false\", () => {\n    const secondInput = document.createElement(\"input\");\n    const fp = createInstance({\n      plugins: [rangePlugin({ input: secondInput })],\n      allowInput: false,\n    }) as RangeInstance;\n\n    expect(fp._input.getAttribute(\"readonly\")).toBe(\"readonly\");\n    expect(secondInput.getAttribute(\"readonly\")).toBe(\"readonly\");\n  });",
            "file": "src/plugins/rangePlugin.spec.ts",
            "skipped": false,
            "dir": "__tests__"
        }
    ],
    "badge": "flatpickr__flatpickr.svg"
}