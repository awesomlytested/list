{"repo":"Kong/insomnia","url":"https://github.com/Kong/insomnia","branch":"develop","configs":[{"package":"insomnia-smoke-test","lang":"ts","dir":"packages/insomnia-smoke-test/tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"insomnia-plugin-base64","lang":"js","dir":"plugins/insomnia-plugin-base64/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"insomnia-plugin-cookie-jar","lang":"js","dir":"plugins/insomnia-plugin-cookie-jar/__tests__","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"insomnia-plugin-file","lang":"js","dir":"plugins/insomnia-plugin-file/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"insomnia-plugin-hash","lang":"js","dir":"plugins/insomnia-plugin-hash/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"insomnia-plugin-now","lang":"js","dir":"plugins/insomnia-plugin-now/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"insomnia-plugin-request","lang":"js","dir":"plugins/insomnia-plugin-request/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"insomnia-plugin-response","lang":"js","dir":"plugins/insomnia-plugin-response/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"insomnia-plugin-uuid","lang":"js","dir":"plugins/insomnia-plugin-uuid/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"Basic interactions","suites":[],"updatePoint":{"line":5,"column":24},"line":5,"code":"test('Basic interactions', async ({ }) => {\n  // TODO(filfreire): add a few scenarios ported from the release checklist\n\n  await expect(true).toBeTruthy();\n});","file":"prerelease/basic-interactions.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"create and send a cookie","suites":[],"updatePoint":{"line":17,"column":32},"line":17,"code":"  test('create and send a cookie', async ({ page }) => {\n\n    // Open cookie editor\n    await page.click('button:has-text(\"Cookies\")');\n\n    // Edit existing cookie\n    await page.click('button:has-text(\"Edit\")');\n    await page.click('pre[role=\"presentation\"]:has-text(\"bar\")');\n    await page.locator('[data-testid=\"CookieValue\"] >> textarea').nth(1).fill('123');\n    await page.locator('text=Done').nth(1).click();\n\n    // Create a new cookie\n    await page.getByRole('button', { name: 'Actions' }).click();\n    await page.getByRole('menuitem', { name: 'Add Cookie' }).click();\n    await page.getByText('Edit').first().click();\n\n    // Try to replace text in Raw view\n    await page.getByRole('tab', { name: 'Raw' }).click();\n    await page.locator('text=Raw Cookie String >> input[type=\"text\"]').fill('foo2=bar2; Expires=Tue, 19 Jan 2038 03:14:07 GMT; Domain=localhost; Path=/');\n\n    await page.locator('text=Done').nth(1).click();\n    await page.click('text=Done');\n\n    // Send http request\n    await page.getByRole('button', { name: 'example http' }).click();\n    await page.click('[data-testid=\"request-pane\"] button:has-text(\"Send\")');\n\n    // Check in the timeline that the cookie was sent\n    await page.getByRole('tab', { name: 'Timeline' }).click();\n    await page.click('text=foo2=bar2; foo=b123ar');\n\n    // Send ws request\n    await page.getByRole('button', { name: 'example websocket' }).click();\n    await page.click('text=ws://localhost:4010');\n    await page.click('[data-testid=\"request-pane\"] >> text=Connect');\n\n    // Check in the timeline that the cookie was sent\n    await page.getByRole('tab', { name: 'Timeline' }).click();\n    await page.click('text=foo2=bar2; foo=b123ar;');\n  });","file":"prerelease/cookie-editor-interactions.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"Can create, rename and delete new project","suites":[],"updatePoint":{"line":9,"column":51},"line":9,"code":"    test('Can create, rename and delete new project', async ({ page }) => {\n      await expect(page.locator('.app')).toContainText('All Files (0)');\n      await expect(page.locator('.app')).not.toContainText('Git Sync');\n      await expect(page.locator('.app')).not.toContainText('Setup Git Sync');\n\n      // Create new project\n      await page.click('[data-testid=\"CreateProjectButton\"]');\n      await page.locator('text=Create').nth(1).click();\n\n      // Check empty project\n      await expect(page.locator('.app')).toContainText('This is an empty project, to get started create your first resource:');\n\n      // Rename Project\n      await page.click('[data-testid=\"ProjectDropDown-My-Project\"] button');\n      await page.getByRole('menuitem', { name: 'Project Settings' }).click();\n      await page.getByPlaceholder('My Project').click();\n      await page.getByPlaceholder('My Project').fill('My Project123');\n\n      // Check that the project name is updated on modal\n      await expect(page.locator('.app')).toContainText('My Project123');\n\n      // Close project settings modal\n      await page.locator('.app').press('Escape');\n      await expect(page.locator('.app')).toContainText('My Project123');\n\n      // Delete project\n      await page.click('[data-testid=\"ProjectDropDown-My-Project123\"] button');\n      await page.getByRole('menuitem', { name: 'Project Settings' }).click();\n      // Click text=NameActions Delete >> button\n      await page.click('text=NameActions Delete >> button');\n      await page.getByRole('button', { name: 'Click to confirm' }).click();\n\n      // After deleting project, return to default Insomnia Dashboard\n      await expect(page.locator('.app')).toContainText('Insomnia');\n      await expect(page.locator('.app')).not.toContainText('My Project123');\n      await expect(page.locator('.app')).toContainText('New Document');\n      await expect(page.locator('.app')).toContainText('All Files (0)');\n      await expect(page.locator('.app')).not.toContainText('Setup Git Sync');\n    });","file":"prerelease/dashboard-interactions.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"Can filter through multiple collections","suites":[],"line":51,"code":"    test.skip('Can filter through multiple collections', async ({ app, page }) => {","file":"prerelease/dashboard-interactions.test.ts","skipped":true,"dir":"packages/insomnia-smoke-test/tests"},{"name":"Can create, rename and delete a document","suites":[],"updatePoint":{"line":89,"column":50},"line":89,"code":"    test('Can create, rename and delete a document', async ({ page }) => {\n      await expect(page.locator('.app')).toContainText('All Files (0)');\n      await expect(page.locator('.app')).not.toContainText('Git Sync');\n      await expect(page.locator('.app')).not.toContainText('Setup Git Sync');\n\n      // Create new document\n      await page.getByRole('button', { name: 'Create' }).click();\n      await page.getByRole('menuitem', { name: 'Design Document' }).click();\n      await page.locator('text=Create').nth(1).click();\n\n      await page.getByTestId('proj_default-project').getByRole('link', { name: 'Insomnia' }).click();\n\n      // Rename document\n      await page.click('text=DocumentNew Documentjust now >> button');\n      await page.getByRole('menuitem', { name: 'Rename' }).click();\n      await page.locator('text=Rename DocumentName Rename >> input[type=\"text\"]').fill('test123');\n      await page.click('#root button:has-text(\"Rename\")');\n      await expect(page.locator('.app')).toContainText('test123');\n\n      // Duplicate document\n      await page.click('text=Documenttest123just now >> button');\n      await page.getByRole('menuitem', { name: 'Duplicate' }).click();\n      await page.locator('input[name=\"name\"]').fill('test123-duplicate');\n      await page.click('[role=\"dialog\"] button:has-text(\"Duplicate\")');\n\n      await page.getByTestId('proj_default-project').getByRole('link', { name: 'Insomnia' }).click();\n\n      const workspaceCards = page.locator('.card-badge');\n      await expect(workspaceCards).toHaveCount(2);\n\n      // Delete document\n      await page.click('text=Documenttest123just now >> button');\n      await page.getByRole('menuitem', { name: 'Delete' }).click();\n      await page.locator('text=Yes').click();\n      await expect(workspaceCards).toHaveCount(1);\n    });","file":"prerelease/dashboard-interactions.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"Can create, rename and delete a collection","suites":[],"updatePoint":{"line":126,"column":52},"line":126,"code":"    test('Can create, rename and delete a collection', async ({ page }) => {\n      await expect(page.locator('.app')).toContainText('All Files (0)');\n      await expect(page.locator('.app')).not.toContainText('Git Sync');\n      await expect(page.locator('.app')).not.toContainText('Setup Git Sync');\n\n      // Create new collection\n      await page.getByRole('button', { name: 'Create' }).click();\n      await page.getByRole('menuitem', { name: 'Request Collection' }).click();\n      await page.locator('text=Create').nth(1).click();\n\n      await page.getByTestId('proj_default-project').getByRole('link', { name: 'Insomnia' }).click();\n\n      // Rename collection\n      await page.click('text=CollectionMy Collectionjust now >> button');\n      await page.getByRole('menuitem', { name: 'Rename' }).click();\n      await page.locator('text=Rename CollectionName Rename >> input[type=\"text\"]').fill('test123');\n      await page.click('#root button:has-text(\"Rename\")');\n      await expect(page.locator('.app')).toContainText('test123');\n\n      // Duplicate collection\n      await page.click('text=Collectiontest123just now >> button');\n      await page.getByRole('menuitem', { name: 'Duplicate' }).click();\n      await page.locator('input[name=\"name\"]').fill('test123-duplicate');\n      await page.click('[role=\"dialog\"] button:has-text(\"Duplicate\")');\n\n      await page.getByTestId('proj_default-project').getByRole('link', { name: 'Insomnia' }).click();\n      const workspaceCards = page.locator('.card-badge');\n      await expect(workspaceCards).toHaveCount(2);\n\n      // Delete collection\n      await page.click('text=Collectiontest123just now >> button');\n      await page.getByRole('menuitem', { name: 'Delete' }).click();\n      await page.locator('text=Yes').click();\n      await expect(workspaceCards).toHaveCount(1);\n    });","file":"prerelease/dashboard-interactions.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"Open Properties of an HTTP Request","suites":[],"updatePoint":{"line":20,"column":44},"line":20,"code":"    test('Open Properties of an HTTP Request', async ({ page }) => {\n      await page.getByRole('button', { name: 'example http' }).click();\n      await page.locator('[data-testid=\"Dropdown-example-http\"]').click();\n      await page.getByRole('menuitem', { name: 'Settings' }).click();\n      await expect(page.locator('.app')).toContainText('Request Settings req');\n      // Close settings modal\n      await page.locator('.app').press('Escape');\n    });","file":"prerelease/debug-sidebar-interactions.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"Open properties of a grpc request","suites":[],"updatePoint":{"line":29,"column":43},"line":29,"code":"    test('Open properties of a grpc request', async ({ page }) => {\n      await page.getByRole('button', { name: 'example grpc' }).click();\n      await page.locator('[data-testid=\"Dropdown-example-grpc\"]').click();\n      await page.getByRole('menuitem', { name: 'Settings' }).click();\n      await expect(page.locator('.app')).toContainText('Request Settings greq');\n      // Close settings modal\n      await page.locator('.app').press('Escape');\n    });","file":"prerelease/debug-sidebar-interactions.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"Open properties of a websocket request","suites":[],"updatePoint":{"line":38,"column":48},"line":38,"code":"    test('Open properties of a websocket request', async ({ page }) => {\n      await page.getByRole('button', { name: 'example websocket' }).click();\n      await page.locator('[data-testid=\"Dropdown-example-websocket\"]').click();\n      await page.getByRole('menuitem', { name: 'Settings' }).click();\n      await expect(page.locator('.app')).toContainText('Request Settings ws-req');\n      // Close settings modal\n      await page.locator('.app').press('Escape');\n    });","file":"prerelease/debug-sidebar-interactions.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"Open properties of a graphql request","suites":[],"updatePoint":{"line":47,"column":46},"line":47,"code":"    test('Open properties of a graphql request', async ({ page }) => {\n      await page.getByRole('button', { name: 'example graphql' }).click();\n      await page.locator('[data-testid=\"Dropdown-example-graphql\"]').click();\n      await page.getByRole('menuitem', { name: 'Settings' }).click();\n      await expect(page.locator('.app')).toContainText('Request Settings req');\n      // Close settings modal\n      await page.locator('.app').press('Escape');\n    });","file":"prerelease/debug-sidebar-interactions.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"Open properties of a folder","suites":[],"updatePoint":{"line":56,"column":37},"line":56,"code":"    test('Open properties of a folder', async ({ page }) => {\n      await page.getByRole('button', { name: 'test folder' }).click();\n      await page.locator('[data-testid=\"Dropdown-test-folder\"] button').click();\n      await page.getByRole('menuitem', { name: 'Settings' }).click();\n      await expect(page.locator('.app')).toContainText('Folder Settings fld');\n    });","file":"prerelease/debug-sidebar-interactions.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"Open properties of the collection","suites":[],"updatePoint":{"line":63,"column":43},"line":63,"code":"    test('Open properties of the collection', async ({ page }) => {\n      await page.getByRole('button', { name: 'simple' }).click();\n      await page.getByRole('menuitem', { name: 'Collection Settings' }).click();\n      await page.getByText('Collection Settings').click();\n    });","file":"prerelease/debug-sidebar-interactions.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"Filter by request name","suites":[],"updatePoint":{"line":69,"column":32},"line":69,"code":"    test('Filter by request name', async ({ page }) => {\n      await page.locator('[placeholder=\"Filter\"]').click();\n      await page.locator('[placeholder=\"Filter\"]').fill('example http');\n      await page.getByRole('button', { name: 'example http' }).click();\n    });","file":"prerelease/debug-sidebar-interactions.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"Filter by a folder name","suites":[],"updatePoint":{"line":75,"column":33},"line":75,"code":"    test('Filter by a folder name', async ({ page }) => {\n      await page.locator('[data-testid=\"SidebarFilter\"] [data-testid=\"DropdownButton\"] button').click();\n      await page.getByRole('menuitem', { name: 'Folders First' }).click();\n      await page.locator('[placeholder=\"Filter\"]').click();\n      await page.locator('[placeholder=\"Filter\"]').fill('test folder');\n      await page.locator('[placeholder=\"Filter\"]').press('Enter');\n      await page.locator('button:has-text(\"test folderOPEN\")').click();\n    });","file":"prerelease/debug-sidebar-interactions.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"Open Generate code","suites":[],"updatePoint":{"line":84,"column":28},"line":84,"code":"    test('Open Generate code', async ({ page }) => {\n      await page.getByRole('button', { name: 'example http' }).click();\n      await page.locator('[data-testid=\"Dropdown-example-http\"] button').click();\n      await page.getByRole('menuitem', { name: 'Generate Code' }).click();\n      await page.locator('[data-testid=\"CodeEditor\"] >> text=curl').click();\n      await page.locator('text=Done').click();\n    });","file":"prerelease/debug-sidebar-interactions.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"Use Copy as Curl for a request","suites":[],"line":92,"code":"    test.skip('Use Copy as Curl for a request', async ({}) => {","file":"prerelease/debug-sidebar-interactions.test.ts","skipped":true,"dir":"packages/insomnia-smoke-test/tests"},{"name":"Pin a Request","suites":[],"updatePoint":{"line":96,"column":23},"line":96,"code":"    test('Pin a Request', async ({ page }) => {\n      await page.getByRole('button', { name: 'example http' }).click();\n      await page.locator('[data-testid=\"Dropdown-example-http\"] button').click();\n      await page.getByRole('menuitem', { name: 'Pin' }).click();\n      // Click pinned request on pinned request list\n      await page.locator('button:has-text(\"GETexample http\")').first().click();\n      // Click pinned request on regular list\n      await page.locator('button:has-text(\"GETexample http\")').nth(1).click();\n    });","file":"prerelease/debug-sidebar-interactions.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"Delete Request","suites":[],"updatePoint":{"line":106,"column":24},"line":106,"code":"    test('Delete Request', async ({ page }) => {\n      await page.getByRole('button', { name: 'example http' }).click();\n      await page.locator('[data-testid=\"Dropdown-example-http\"] button').click();\n      await page.getByRole('menuitem', { name: 'Delete' }).click();\n      await page.getByRole('button', { name: 'Click to confirm' }).click();\n      await expect(page.locator('.app')).not.toContainText('example http');\n    });","file":"prerelease/debug-sidebar-interactions.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"Rename a request","suites":[],"updatePoint":{"line":114,"column":26},"line":114,"code":"    test('Rename a request', async ({ page }) => {\n      await page.getByRole('button', { name: 'example http' }).click();\n      await page.locator('[data-testid=\"Dropdown-example-http\"]').click();\n      await page.getByRole('menuitem', { name: 'Rename' }).click();\n      await page.locator('text=Rename RequestName Rename >> input[type=\"text\"]').fill('example http1');\n      await page.locator('div[role=\"dialog\"] button:has-text(\"Rename\")').click();\n      await page.locator('button:has-text(\"example http1\")').click();\n    });","file":"prerelease/debug-sidebar-interactions.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"Create a new HTTP request","suites":[],"updatePoint":{"line":123,"column":35},"line":123,"code":"    test('Create a new HTTP request', async ({ page }) => {\n      await page.locator('[data-testid=\"SidebarFilter\"] [data-testid=\"SidebarCreateDropdown\"] button').click();\n      await page.getByRole('menuitem', { name: 'Http Request' }).click();\n      await expect(page.locator('.app')).toContainText('New Request');\n    });","file":"prerelease/debug-sidebar-interactions.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"Unit Test interactions","suites":[],"updatePoint":{"line":9,"column":30},"line":9,"code":"  test('Unit Test interactions', async ({ app, page }) => {\n    // Setup\n    await page.getByRole('button', { name: 'Create' }).click();\n    const text = await loadFixture('unit-test.yaml');\n    await app.evaluate(async ({ clipboard }, text) => clipboard.writeText(text), text);\n    await page.getByRole('menuitem', { name: 'Import' }).click();\n    await page.getByText('Clipboard').click();\n    await page.getByRole('button', { name: 'Scan' }).click();\n    await page.getByRole('dialog').getByRole('button', { name: 'Import' }).click();\n    await page.getByText('unit-test.yaml').click();\n    // Switch to Test tab\n    await page.click('a:has-text(\"Test\")');\n\n    // Run tests and check results\n    await page.click('#wrapper >> text=Run Tests');\n    await expect(page.locator('.app')).toContainText('Request A is found');\n    await expect(page.locator('.app')).toContainText('Request B is not found');\n    await expect(page.locator('.app')).toContainText('Tests Passed 2/2');\n\n    // Create a new test suite\n    await page.click('text=New Test Suite');\n    await page.click('text=Create Suite');\n    await page.click('button:has-text(\"New Suite\")');\n\n    // Add a new test\n    await page.locator('text=New Test').nth(1).click();\n    await page.click('div[role=\"dialog\"] button:has-text(\"New Test\")');\n    const label = await page.locator('option', { hasText: 'Request A' }).textContent() || '';\n    await page.locator('select[name=\"request\"]').selectOption({\n      label,\n    });\n\n    await page.click('#wrapper >> text=Run Tests');\n    await expect(page.locator('.app')).toContainText('Tests Passed 1/1');\n\n    // Rename a test\n    // TODO(filipe) - add this in another PR\n\n    // Rename a test suite\n    await page.click('button:has-text(\"Existing Test Suite\")');\n    await page.click('span:has-text(\"Existing Test Suite\")');\n    await page.locator('text=New TestRun Tests >> input[type=\"text\"]').fill('Renamed');\n    await page.locator('text=New TestRun Tests >> input[type=\"text\"]').press('Enter');\n    await page.click('button:has-text(\"Renamed\")');\n\n    // Use autocomplete inside the test code\n    // TODO(filipe) - add this in another PR\n  });","file":"prerelease/design-interactions.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"create a new environment","suites":[],"updatePoint":{"line":17,"column":32},"line":17,"code":"  test('create a new environment', async ({ page }) => {\n    // Create the environment (which will become active on creation)\n    await page.getByText('ExampleA').click();\n    await page.getByRole('menuitem', { name: 'Manage Environments' }).click();\n    await page.getByTestId('CreateEnvironmentDropdown').click();\n    await page.getByRole('menuitem', { name: 'Environment', exact: true }).click();\n    await page.getByRole('option', { name: 'New Environment' }).click();\n    await page.getByRole('button', { name: 'Close' }).click();\n\n    // Send a request check variables defaulted to base env since new env is empty\n    await page.getByRole('button', { name: 'GET New Request' }).click();\n    await page.getByRole('button', { name: 'Send' }).click();\n    await page.getByRole('tab', { name: 'Timeline' }).click();\n    await page.getByText('baseenv0').click();\n    await page.getByText('baseenv1').click();\n  });","file":"prerelease/environment-editor-interactions.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"Rename an existing environment","suites":[],"updatePoint":{"line":35,"column":38},"line":35,"code":"  test('Rename an existing environment', async ({ page }) => {\n    // Rename the environment (which will make it active)\n    await page.getByText('ExampleA').click();\n    await page.getByRole('menuitem', { name: 'Manage Environments' }).click();\n    await page.getByRole('option', { name: 'ExampleB' }).click();\n    await page.getByTitle('Click to edit', { exact: true }).click();\n    await page.getByRole('dialog').locator('input[type=\"text\"]').fill('Gandalf');\n    await page.getByRole('button', { name: 'Close' }).click();\n\n    // Send a request check variables defaulted to base env since new env is empty\n    await page.getByRole('button', { name: 'GET New Request' }).click();\n    await page.getByRole('button', { name: 'Send' }).click();\n    await page.getByRole('tab', { name: 'Timeline' }).click();\n    await page.getByText('subenvB0').click();\n    await page.getByText('subenvB1').click();\n  });","file":"prerelease/environment-editor-interactions.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"Add new variables to an existing environment","suites":[],"updatePoint":{"line":52,"column":52},"line":52,"code":"  test('Add new variables to an existing environment', async ({ page }) => {\n    // Rename the environment\n    await page.getByText('ExampleA').click();\n    await page.getByRole('menuitem', { name: 'Manage Environments' }).click();\n\n    // add a new string environment variable\n    await page.locator('pre').filter({ hasText: '\"exampleNumber\": 1111,' }).click();\n    await page.getByTestId('CodeEditor').getByRole('textbox').press('Enter');\n    await page.getByTestId('CodeEditor').getByRole('textbox').fill('\"testNumber\":9000,');\n    await page.getByTestId('CodeEditor').getByRole('textbox').press('Enter');\n    await page.getByTestId('CodeEditor').getByRole('textbox').fill('\"testString\":\"Gandalf\",');\n    await page.getByTestId('CodeEditor').getByRole('textbox').press('Enter');\n\n    // Open request\n    await page.getByRole('button', { name: 'Close' }).click();\n    await page.getByRole('button', { name: 'GET New Request' }).click();\n\n    // Add number variable to request body\n    await page.locator('pre').filter({ hasText: '_.exampleObject.anotherNumber' }).click();\n    await page.getByTestId('CodeEditor').getByRole('textbox').press('Enter');\n    await page.getByTestId('CodeEditor').getByRole('textbox').press('Control+ ');\n    await page.getByText('_.testNumber').click();\n\n    // Add string variable to request body\n    await page.getByTestId('CodeEditor').getByRole('textbox').press('Enter');\n    await page.getByTestId('CodeEditor').getByRole('textbox').press('Control+ ');\n    await page.getByText('_.testString').click();\n    await page.getByTestId('CodeEditor').getByRole('textbox').press('Enter');\n\n    // TODO(filipe) add an environment variable that returns value of a nunjucks template (e.g. timestamp)\n\n    // Check new variables are in the timeline\n    await page.getByRole('button', { name: 'Send' }).click();\n    await page.getByRole('tab', { name: 'Timeline' }).click();\n\n    // FIXME(filipe) - adding variables to request body can be so fast they don't get picked up when sending request\n\n    // await page.locator('pre').filter({ hasText: '| 9000' }).click();\n\n    // NOTE - Test fails due to actual bug - the variables are not being added to the request body when the request is sent\n    // await page.locator('pre').filter({ hasText: '| Gandalf' }).click();\n\n  });","file":"prerelease/environment-editor-interactions.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"Clone Repo with bad values","suites":[],"updatePoint":{"line":5,"column":32},"line":5,"code":"test('Clone Repo with bad values', async ({ page }) => {\n  await page.getByRole('button', { name: 'Create' }).click();\n  await page.getByRole('menuitem', { name: 'Git Clone' }).click();\n  await page.getByRole('tab', { name: 'Git' }).nth(2).click();\n\n  // Fill in Git Sync details and clone repository\n  await page.getByText('Git URI (https)').fill('https://github.com/kong/dino-park-insomnia');\n  await page.getByText('Author Name').fill('test');\n  await page.getByText('Author Email').fill('test');\n  await page.getByText('Username').fill('test');\n  await page.getByText('Authentication Token').fill('test');\n  await page.getByRole('dialog').getByRole('button', { name: 'Clone' }).click();\n\n  // Basic check repository data is loaded\n  // Design doc\n  await page.getByText('\"Our Dino Park API\"').click();\n  await page.getByRole('link', { name: 'Debug' }).click();\n  // Requests\n  await page.getByRole('button', { name: 'POST Turn on/off the electricity of the fences' }).click();\n  // Environments\n  await page.getByRole('button', { name: 'No Environment' }).click();\n  await page.getByRole('menuitem', { name: 'Use Via Kong GW' }).click();\n  // Tests\n  await page.getByRole('link', { name: 'Test' }).click();\n  await page.getByRole('heading', { name: 'Check status' }).click();\n\n  // Check branch history\n  await page.getByTestId('git-dropdown').locator('button').click();\n  await page.getByRole('menuitem', { name: 'History' }).click();\n  await page.locator('text=Git History').click();\n\n  // Check a recent and old commit show up on history\n  await page.getByRole('cell', { name: 'bump to OpenAPI v3.1' }).click();\n  await page.getByRole('cell', { name: 'Fix environments' }).click();\n  await page.locator('text=Done').click();\n\n  // Create a branch and try to push with bad Git token\n  await page.getByTestId('git-dropdown').locator('button').click();\n  await page.getByRole('menuitem', { name: 'Branches' }).click();\n  await page.getByPlaceholder('testing-branch').fill('test123');\n  await page.getByRole('button', { name: '+ Create' }).click();\n  await page.getByRole('cell', { name: 'test123(current)' }).click();\n  await page.getByRole('button', { name: 'Done' }).click();\n  await page.getByRole('button', { name: 'test123' }).click();\n  await page.getByRole('menuitem', { name: 'Push' }).click();\n  await expect(page.locator('.app')).toContainText('Error Pushing Repository');\n});","file":"prerelease/git-sync-interactions.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"Clone Gitlab Repo with bad values","suites":[],"updatePoint":{"line":53,"column":39},"line":53,"code":"test('Clone Gitlab Repo with bad values', async ({ page }) => {\n  await page.getByRole('button', { name: 'Create' }).click();\n  await page.getByRole('menuitem', { name: 'Git Clone' }).click();\n  await page.getByRole('tab', { name: 'Git' }).nth(2).click();\n\n  // Fill in Git Sync details and clone repository\n  await page.getByText('Git URI (https)').fill('https://gitlab.com/gitlab-examples/gitlab-examples.gitlab.io.git');\n  await page.getByText('Author Name').fill('test');\n  await page.getByText('Author Email').fill('test');\n  await page.getByText('Username').fill('test');\n  await page.getByText('Authentication Token').fill('test');\n  await page.getByRole('dialog').getByRole('button', { name: 'Clone' }).click();\n\n  // Create a branch and try to push with bad Git token\n  await page.getByRole('button', { name: 'master' }).click();\n  await page.getByRole('menuitem', { name: 'Branches' }).click();\n  await page.getByPlaceholder('testing-branch').fill('test123');\n  await page.getByRole('button', { name: '+ Create' }).click();\n  await page.getByRole('cell', { name: 'test123(current)' }).click();\n  await page.getByRole('button', { name: 'Done' }).click();\n  await page.getByRole('button', { name: 'test123' }).click();\n  await page.getByRole('menuitem', { name: 'Push' }).click();\n  await expect(page.locator('.app')).toContainText('Error Pushing Repository');\n});","file":"prerelease/git-sync-interactions.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"can send unidirectional requests","suites":[],"updatePoint":{"line":32,"column":40},"line":32,"code":"  test('can send unidirectional requests', async ({ page }) => {\n    await page.getByRole('button', { name: 'gRPC Unary', exact: true }).click();\n    await page.locator('[data-testid=\"request-pane\"] >> text=Unary').click();\n    await page.click('text=Send');\n\n    // Check for the single Unary response\n    await page.click('text=Response 1');\n    await expect(statusTag).toContainText('0 OK');\n    await expect(responseBody).toContainText('Berkshire Valley Management Area Trail');\n  });","file":"prerelease/grpc-interactions.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"can send bidirectional requests","suites":[],"updatePoint":{"line":43,"column":39},"line":43,"code":"  test('can send bidirectional requests', async ({ page }) => {\n    await page.click('button:has-text(\"gRPCBidirectional Stream\")');\n    await page.locator('text=Bi-directional Streaming').click();\n    await page.click('text=Start');\n\n    // Stream 3 client messages\n    await streamMessage.click();\n    await streamMessage.click();\n    await streamMessage.click();\n\n    // Check for the 3rd stream and response\n    await page.locator('text=Stream 3').click();\n    await page.locator('text=Response 3').click();\n\n    // Finish the stream\n    await page.locator('text=Commit').click();\n    await expect(statusTag).toContainText('0 OK');\n  });","file":"prerelease/grpc-interactions.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"can send client stream requests","suites":[],"updatePoint":{"line":62,"column":39},"line":62,"code":"  test('can send client stream requests', async ({ page }) => {\n    await page.click('button:has-text(\"gRPCClient Stream\")');\n    await page.click('text=Client Streaming');\n    await page.click('text=Start');\n\n    // Stream 3 client messages\n    await streamMessage.click();\n    await streamMessage.click();\n    await streamMessage.click();\n\n    // Finish the stream and check response\n    await page.locator('text=Commit').click();\n    await page.locator('text=Stream 3').click();\n    await page.locator('text=Response 1').click();\n    await expect(statusTag).toContainText('0 OK');\n    await expect(responseBody).toContainText('point_count\": 3');\n  });","file":"prerelease/grpc-interactions.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"can send server stream requests","suites":[],"updatePoint":{"line":80,"column":39},"line":80,"code":"  test('can send server stream requests', async ({ page }) => {\n    await page.click('button:has-text(\"gRPCServer Stream\")');\n    await page.click('text=Server Streaming');\n    await page.click('text=Start');\n\n    // Check response\n    await expect(statusTag).toContainText('0 OK');\n    await page.locator('text=Response 64').click();\n    await expect(responseBody).toContainText('3 Hasta Way');\n  });","file":"prerelease/grpc-interactions.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"Open plugins menu and generate plugin","suites":[],"updatePoint":{"line":6,"column":45},"line":6,"code":"  test('Open plugins menu and generate plugin', async ({ page }) => {\n    // Opening settings\n    await page.locator('[data-testid=\"settings-button\"]').click();\n    // Switching to Plugins tab\n    await page.locator('div[role=\"tab\"]:has-text(\"Plugins\")').click();\n\n    // Generate new plugin\n    await page.locator('text=Generate New Plugin').click();\n    await page.locator('text=Generate').first().click();\n\n    // check if the plugin shows up on the plugin list\n    await expect(page.locator('.app')).toContainText('insomnia-plugin-demo-example');\n  });","file":"prerelease/plugins-interactions.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"Check Declarative Config and Kong Kubernetes config","suites":[],"updatePoint":{"line":20,"column":59},"line":20,"code":"  test('Check Declarative Config and Kong Kubernetes config', async ({ page }) => {\n    await page.getByRole('button', { name: 'New Document' }).click();\n    await page.getByRole('dialog').getByRole('button', { name: 'Create' }).click();\n\n    // Set example OpenAPI spec\n    await page.click('text=start from an example');\n    await expect(page.locator('.app')).toContainText('This is a sample server Petstore server');\n\n    // Open declarative config\n    await page.getByRole('button', { name: 'New Document' }).click();\n    await page.getByRole('menuitem', { name: 'Declarative Config (Legacy)' }).click();\n    // Check for declarative config contents\n    await page.getByText('_format_version').click();\n\n    // Switch to Kong for Kubernetes tab\n    await page.click('div[role=\"tab\"]:has-text(\"Kong for Kubernetes\")');\n\n    // Check for Kong for Kubernetes contents\n    await page.getByText('apiVersion: networking.k8s.io/v1').click();\n  });","file":"prerelease/plugins-interactions.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"Preferences through click","suites":[],"updatePoint":{"line":4,"column":31},"line":4,"code":"test('Preferences through click', async ({ page }) => {\n  await page.locator('[data-testid=\"settings-button\"]').click();\n  await page.locator('text=Insomnia Preferences').first().click();\n});","file":"prerelease/preferences-interactions.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"Preferences through keyboard shortcut","suites":[],"updatePoint":{"line":9,"column":43},"line":9,"code":"test('Preferences through keyboard shortcut', async ({ page }) => {\n  if (process.platform === 'darwin') {\n    await page.locator('.app').press('Meta+,');\n  } else {\n    await page.locator('.app').press('Control+,');\n  }\n  await page.locator('text=Insomnia Preferences').first().click();\n});","file":"prerelease/preferences-interactions.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"Check filter responses by environment preference","suites":[],"updatePoint":{"line":19,"column":54},"line":19,"code":"test('Check filter responses by environment preference', async ({ app, page }) => {\n  await page.getByRole('button', { name: 'Create' }).click();\n  const text = await loadFixture('simple.yaml');\n  await app.evaluate(async ({ clipboard }, text) => clipboard.writeText(text), text);\n  await page.getByRole('menuitem', { name: 'Import' }).click();\n  await page.getByText('Clipboard').click();\n  await page.getByRole('button', { name: 'Scan' }).click();\n  await page.getByRole('dialog').getByRole('button', { name: 'Import' }).click();\n  await page.getByText('Collectionsimplejust now').click();\n\n  // Send a request\n  await page.getByRole('button', { name: 'example http' }).click();\n  await page.click('[data-testid=\"request-pane\"] button:has-text(\"Send\")');\n  await page.click('text=Timeline');\n  await page.locator('text=HTTP/1.1 200 OK').click();\n\n  // Set filter responses by environment\n  await page.locator('[data-testid=\"settings-button\"]').click();\n  await page.locator('text=Insomnia Preferences').first().click();\n  await page.locator('text=Filter responses by environment').click();\n  await page.locator('.app').press('Escape');\n\n  // Re-send the request and check timeline\n  await page.locator('[data-testid=\"request-pane\"] button:has-text(\"Send\")').click();\n  await page.click('text=Timeline');\n  await page.locator('text=HTTP/1.1 200 OK').click();\n});","file":"prerelease/preferences-interactions.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"Request tabs","suites":[],"updatePoint":{"line":11,"column":18},"line":11,"code":"test('Request tabs', async ({ page }) => {\n  await page.getByRole('button', { name: 'Body' }).click();\n  await page.getByRole('menuitem', { name: 'JSON' }).click();\n  await page.getByRole('tab', { name: 'Auth' }).click();\n  await page.getByRole('button', { name: 'Auth' }).click();\n  await page.getByRole('menuitem', { name: 'OAuth 1.0' }).click();\n  await page.getByRole('tab', { name: 'Query' }).click();\n  await page.getByRole('tab', { name: 'Headers' }).click();\n  await page.getByRole('tab', { name: 'Docs' }).click();\n});","file":"prerelease/request-pane-tab.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"Add description to docs","suites":[],"updatePoint":{"line":22,"column":29},"line":22,"code":"test('Add description to docs', async ({ page }) => {\n  await page.getByRole('tab', { name: 'Docs' }).click();\n  await page.locator('text=Add Description').click();\n  await page.locator('[data-testid=\"CodeEditor\"] pre[role=\"presentation\"]:has-text(\"\")').click();\n  await page.locator('textarea').nth(1).fill('new request'); // this works\n  // TODO - fix the locator so we don't rely on `.nth(1)` https://linear.app/insomnia/issue/INS-2255/revisit-codemirror-playwright-selectorfill\n});","file":"prerelease/request-pane-tab.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"WS tabs","suites":[],"updatePoint":{"line":30,"column":13},"line":30,"code":"test('WS tabs', async ({ page }) => {\n  await page.locator('[data-testid=\"SidebarFilter\"] [data-testid=\"SidebarCreateDropdown\"] button').click();\n  await page.getByRole('menuitem', { name: 'WebSocket Request' }).click();\n  await page.getByRole('tab', { name: 'JSON' }).click();\n  await page.getByRole('menuitem', { name: 'JSON' }).click();\n  await page.getByRole('tab', { name: 'Auth' }).click();\n  await page.getByRole('tab', { name: 'Query' }).click();\n  await page.getByRole('tab', { name: 'Headers' }).click();\n  await page.getByRole('tab', { name: 'Docs' }).click();\n});","file":"prerelease/request-pane-tab.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"WS add description","suites":[],"updatePoint":{"line":41,"column":24},"line":41,"code":"test('WS add description', async ({ page }) => {\n  await page.locator('[data-testid=\"SidebarFilter\"] [data-testid=\"SidebarCreateDropdown\"] button').click();\n  await page.getByRole('menuitem', { name: 'WebSocket Request' }).click();\n  await page.getByRole('tab', { name: 'Docs' }).click();\n  await page.getByRole('button', { name: 'Add Description' }).click();\n  await page.locator('[data-testid=\"CodeEditor\"] pre[role=\"presentation\"]:has-text(\"\")').click();\n  await page.locator('textarea').nth(1).fill('new wss');\n  // TODO - fix the locator so we don't rely on `.nth(1)` https://linear.app/insomnia/issue/INS-2255/revisit-codemirror-playwright-selectorfill\n});","file":"prerelease/request-pane-tab.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"can send requests","suites":[],"updatePoint":{"line":6,"column":23},"line":6,"code":"test('can send requests', async ({ app, page }) => {\n  test.slow(process.platform === 'darwin' || process.platform === 'win32', 'Slow app start on these platforms');\n  const statusTag = page.locator('[data-testid=\"response-status-tag\"]:visible');\n  const responseBody = page.locator('[data-testid=\"CodeEditor\"]:visible', {\n    has: page.locator('.CodeMirror-activeline'),\n  });\n\n  await page.getByRole('button', { name: 'Create' }).click();\n\n  const text = await loadFixture('smoke-test-collection.yaml');\n  await app.evaluate(async ({ clipboard }, text) => clipboard.writeText(text), text);\n\n  await page.getByRole('menuitem', { name: 'Import' }).click();\n  await page.getByText('Clipboard').click();\n  await page.getByRole('button', { name: 'Scan' }).click();\n  await page.getByRole('dialog').getByRole('button', { name: 'Import' }).click();\n  await page.getByText('CollectionSmoke testsjust now').click();\n\n  await page.getByRole('button', { name: 'send JSON request' }).click();\n  await page.getByTestId('request-pane').getByRole('button', { name: 'Send' }).click();\n  await expect(statusTag).toContainText('200 OK');\n  await expect(responseBody).toContainText('\"id\": \"1\"');\n  await page.getByRole('button', { name: 'Preview' }).click();\n  await page.getByRole('menuitem', { name: 'Raw Data' }).click();\n  await expect(responseBody).toContainText('{\"id\":\"1\"}');\n\n  await page.getByRole('button', { name: 'connects to event stream and shows ping response' }).click();\n  await page.getByTestId('request-pane').getByRole('button', { name: 'Connect' }).click();\n  await expect(statusTag).toContainText('200 OK');\n  await page.getByRole('tab', { name: 'Timeline' }).click();\n  await expect(responseBody).toContainText('Connected to 127.0.0.1');\n  await page.getByTestId('request-pane').getByRole('button', { name: 'Disconnect' }).click();\n\n  await page.getByRole('button', { name: 'sends dummy.csv request and shows rich response' }).click();\n  await page.getByTestId('request-pane').getByRole('button', { name: 'Send' }).click();\n  await expect(statusTag).toContainText('200 OK');\n  await page.getByRole('button', { name: 'Preview' }).click();\n  await page.getByRole('menuitem', { name: 'Raw Data' }).click();\n  await expect(responseBody).toContainText('a,b,c');\n\n  await page.getByRole('button', { name: 'sends dummy.xml request and shows raw response' }).click();\n  await page.getByTestId('request-pane').getByRole('button', { name: 'Send' }).click();\n  await expect(statusTag).toContainText('200 OK');\n  await expect(responseBody).toContainText('xml version=\"1.0\"');\n  await expect(responseBody).toContainText('<LoginResult>');\n\n  await page.getByRole('button', { name: 'sends dummy.pdf request and shows rich response' }).click();\n  await page.getByTestId('request-pane').getByRole('button', { name: 'Send' }).click();\n  await expect(statusTag).toContainText('200 OK');\n  // TODO(filipe): re-add a check for the preview that is less flaky\n  await page.getByRole('tab', { name: 'Timeline' }).click();\n  await page.locator('pre').filter({ hasText: '< Content-Type: application/pdf' }).click();\n\n  await page.getByRole('button', { name: 'sends request with basic authentication' }).click();\n  await page.getByTestId('request-pane').getByRole('button', { name: 'Send' }).click();\n  await expect(statusTag).toContainText('200 OK');\n  await expect(responseBody).toContainText('basic auth received');\n\n  await page.getByRole('button', { name: 'sends request with cookie and get cookie in response' }).click();\n  await page.getByTestId('request-pane').getByRole('button', { name: 'Send' }).click();\n  await expect(statusTag).toContainText('200 OK');\n  await page.getByRole('tab', { name: 'Timeline' }).click();\n  await expect(responseBody).toContainText('Set-Cookie: insomnia-test-cookie=value123');\n});","file":"smoke/app.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"can cancel requests","suites":[],"updatePoint":{"line":73,"column":25},"line":73,"code":"test('can cancel requests', async ({ app, page }) => {\n  await page.getByRole('button', { name: 'Create' }).click();\n\n  const text = await loadFixture('smoke-test-collection.yaml');\n  await app.evaluate(async ({ clipboard }, text) => clipboard.writeText(text), text);\n\n  await page.getByRole('menuitem', { name: 'Import' }).click();\n  await page.getByText('Clipboard').click();\n  await page.getByRole('button', { name: 'Scan' }).click();\n  await page.getByRole('dialog').getByRole('button', { name: 'Import' }).click();\n  await page.getByText('CollectionSmoke testsjust now').click();\n\n  await page.getByRole('button', { name: 'delayed request' }).click();\n  await page.getByTestId('request-pane').getByRole('button', { name: 'Send' }).click();\n\n  await page.getByRole('button', { name: 'Cancel Request' }).click();\n  await page.click('text=Request was cancelled');\n});","file":"smoke/app.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"Clone from github","suites":[],"updatePoint":{"line":2,"column":23},"line":2,"code":"test('Clone from github', async ({ page }) => {\n  await page.getByRole('button', { name: 'Git Clone' }).click();\n  await page.getByRole('tab', { name: ' Git' }).click();\n  await page.getByPlaceholder('https://github.com/org/repo.git').fill('https://github.com/gatzjames/insomnia-git-example.git');\n  await page.getByPlaceholder('Name').fill('J');\n  await page.getByPlaceholder('Email').fill('J');\n  await page.getByPlaceholder('MyUser').fill('J');\n  await page.getByPlaceholder('88e7ee63b254e4b0bf047559eafe86ba9dd49507').fill('J');\n  await page.getByTestId('git-repository-settings-modal__sync-btn').click();\n  await page.getByRole('button', { name: 'Toggle Preview' }).click();\n});","file":"smoke/git-sync.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"Sign in with GitHub","suites":[],"updatePoint":{"line":13,"column":25},"line":13,"code":"test('Sign in with GitHub', async ({ app, page }) => {\n  await page.getByRole('button', { name: 'New Document' }).click();\n  await page.getByRole('dialog').getByRole('button', { name: 'Create' }).click();\n  await page.getByRole('button', { name: 'Git Sync' }).click();\n  await page.getByRole('button', { name: 'Setup Git Sync' }).click();\n\n  await page.getByRole('tab', { name: 'Github' }).click();\n\n  // Prevent the app from opening the browser to the authorization page\n  // and return the url that would be created by following the GitHub OAuth flow.\n  // https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps#web-application-flow\n  const fakeGitHubOAuthWebFlow = app.evaluate(electron => {\n    return new Promise<{ redirectUrl: string }>(resolve => {\n      const webContents = electron.BrowserWindow.getAllWindows()[0].webContents;\n      // Remove all navigation listeners so that only the one we inject will run\n      webContents.removeAllListeners('will-navigate');\n      webContents.on('will-navigate', (event: Event, url: string) => {\n        event.preventDefault();\n        const parsedUrl = new URL(url);\n        // We use the same state parameter that the app created to assert that we prevent CSRF\n        const stateSearchParam = parsedUrl.searchParams.get('state') || '';\n        const redirectUrl = `insomnia://oauth/github/authenticate?state=${stateSearchParam}&code=12345`;\n        resolve({ redirectUrl });\n      });\n    });\n  });\n\n  const [{ redirectUrl }] = await Promise.all([\n    fakeGitHubOAuthWebFlow,\n    page.getByText('Authenticate with GitHub').click({\n      // When playwright clicks a link it waits for navigation to finish.\n      // In our case we are stubbing the navigation and we don't want to wait for it.\n      noWaitAfter: true,\n    }),\n  ]);\n\n  await page.locator('input[name=\"link\"]').click();\n\n  await page.locator('input[name=\"link\"]').fill(redirectUrl);\n\n  await page.getByRole('button', { name: 'Add' }).click();\n\n  await page\n    .locator('input[name=\"uri\"]')\n    .fill('https://github.com/insomnia/example-repo');\n\n  await page.locator('data-testid=git-repository-settings-modal__sync-btn').click();\n});","file":"smoke/git-sync.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"can render schema and send GraphQL requests","suites":[],"updatePoint":{"line":6,"column":49},"line":6,"code":"test('can render schema and send GraphQL requests', async ({ app, page }) => {\n  test.slow(process.platform === 'darwin' || process.platform === 'win32', 'Slow app start on these platforms');\n\n  await page.getByRole('button', { name: 'Create' }).click();\n\n  // Copy the collection with the graphql query to clipboard\n  const text = await loadFixture('graphql.yaml');\n  await app.evaluate(async ({ clipboard }, text) => clipboard.writeText(text), text);\n\n  // Import from clipboard\n  await page.getByRole('menuitem', { name: 'Import' }).click();\n  await page.getByText('Clipboard').click();\n  await page.getByRole('button', { name: 'Scan' }).click();\n  await page.getByRole('dialog').getByRole('button', { name: 'Import' }).click();\n  await page.getByText('CollectionSmoke GraphQLjust now').click();\n  // Open the graphql request\n  await page.getByRole('button', { name: 'GraphQL request' }).click();\n  // Assert the schema is fetched after switching to GraphQL request\n  await expect(page.locator('.graphql-editor__meta')).toContainText('schema fetched just now');\n\n  // Assert schema documentation stuff\n  await page.getByRole('button', { name: 'schema' }).click();\n  await page.getByRole('menuitem', { name: 'Show Documentation' }).click();\n  await page.click('a:has-text(\"Query\")');\n  await page.locator('a:has-text(\"RingBearer\")').click();\n  const graphqlExplorer = page.locator('.graphql-explorer');\n  await expect(graphqlExplorer).toContainText('Characters who at any time bore a Ring of Power.');\n  await page.click('text=QueryRingBearer >> button');\n\n  // Send and assert GraphQL request\n  await page.click('[data-testid=\"request-pane\"] >> text=Send');\n  const statusTag = page.locator('[data-testid=\"response-status-tag\"]:visible');\n  await expect(statusTag).toContainText('200 OK');\n\n  const responseBody = page.locator('[data-testid=\"response-pane\"] >> [data-testid=\"CodeEditor\"]:visible', {\n    has: page.locator('.CodeMirror-activeline'),\n  });\n  await expect(responseBody).toContainText('\"bearer\": \"Gandalf\"');\n});","file":"smoke/graphql.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"can send GraphQL requests after editing and prettifying query","suites":[],"updatePoint":{"line":46,"column":67},"line":46,"code":"test('can send GraphQL requests after editing and prettifying query', async ({ app, page }) => {\n  test.slow(process.platform === 'darwin' || process.platform === 'win32', 'Slow app start on these platforms');\n\n  await page.getByRole('button', { name: 'Create' }).click();\n\n  const text = await loadFixture('graphql.yaml');\n  await app.evaluate(async ({ clipboard }, text) => clipboard.writeText(text), text);\n  await page.getByRole('menuitem', { name: 'Import' }).click();\n  await page.getByText('Clipboard').click();\n  await page.getByRole('button', { name: 'Scan' }).click();\n  await page.getByRole('dialog').getByRole('button', { name: 'Import' }).click();\n  await page.getByText('CollectionSmoke GraphQLjust now').click();\n  await page.getByRole('button', { name: 'GraphQL request' }).click();\n\n  // Edit and prettify query\n  await page.locator('pre[role=\"presentation\"]:has-text(\"hello,\")').click();\n  await page.locator('.app').press('Enter');\n  await page.locator('text=Prettify GraphQL').click();\n  await page.click('[data-testid=\"request-pane\"] >> text=Send');\n  const statusTag = page.locator('[data-testid=\"response-status-tag\"]:visible');\n  await expect(statusTag).toContainText('200 OK');\n\n  const responseBody = page.locator('[data-testid=\"response-pane\"] >> [data-testid=\"CodeEditor\"]:visible', {\n    has: page.locator('.CodeMirror-activeline'),\n  });\n  await expect(responseBody).toContainText('\"bearer\": \"Gandalf\"');\n});","file":"smoke/graphql.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"can send gRPC requests with reflection","suites":[],"updatePoint":{"line":6,"column":44},"line":6,"code":"test('can send gRPC requests with reflection', async ({ app, page }) => {\n  test.slow(process.platform === 'darwin' || process.platform === 'win32', 'Slow app start on these platforms');\n  const statusTag = page.locator('[data-testid=\"response-status-tag\"]:visible');\n  const responseBody = page.locator('[data-testid=\"response-pane\"] >> [data-testid=\"CodeEditor\"]:visible', {\n    has: page.locator('.CodeMirror-activeline'),\n  });\n\n  await page.getByRole('button', { name: 'Create' }).click();\n\n  const text = await loadFixture('grpc.yaml');\n  await app.evaluate(async ({ clipboard }, text) => clipboard.writeText(text), text);\n\n  await page.getByRole('menuitem', { name: 'Import' }).click();\n  await page.getByText('Clipboard').click();\n  await page.getByRole('button', { name: 'Scan' }).click();\n  await page.getByRole('dialog').getByRole('button', { name: 'Import' }).click();\n  await page.getByText('CollectionPreRelease gRPCjust now').click();\n\n  await page.getByRole('button', { name: 'Route Guide Example' }).click();\n\n  await page.getByRole('button', { name: 'UnaryWithOutProtoFile' }).click();\n  await expect(page.getByRole('button', { name: 'Select Method' })).toBeDisabled();\n  await page.getByTestId('button-server-reflection').click();\n\n  await page.getByRole('button', { name: 'Select Method' }).click();\n  await page.getByRole('menuitem', { name: 'RouteGuide/GetFeature' }).click();\n\n  await page.getByRole('tab', { name: 'Unary' }).click();\n  await page.getByRole('button', { name: 'Send' }).click();\n\n  // Check for the single Unary response\n  await page.getByRole('tab', { name: 'Response 1' }).click();\n  await expect(statusTag).toContainText('0 OK');\n  await expect(responseBody).toContainText('Berkshire Valley Management Area Trail');\n});","file":"smoke/grpc.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"Sign in with Gitlab","suites":[],"updatePoint":{"line":3,"column":25},"line":3,"code":"test('Sign in with Gitlab', async ({ app, page }) => {\n  await page.getByRole('button', { name: 'New Document' }).click();\n  await page.getByRole('dialog').getByRole('button', { name: 'Create' }).click();\n  await page.getByRole('button', { name: 'Git Sync' }).click();\n  await page.getByRole('button', { name: 'Setup Git Sync' }).click();\n  await page.getByRole('tab', { name: 'GitLab' }).click();\n\n  const fakeGitLabOAuthWebFlow = app.evaluate(electron => {\n    return new Promise<{ redirectUrl: string }>(resolve => {\n      const webContents = electron.BrowserWindow.getAllWindows()[0].webContents;\n      // Remove all navigation listeners so that only the one we inject will run\n      webContents.removeAllListeners('will-navigate');\n      webContents.on('will-navigate', (event: Event, url: string) => {\n        event.preventDefault();\n        const parsedUrl = new URL(url);\n        // We use the same state parameter that the app created to assert that we prevent CSRF\n        const stateSearchParam = parsedUrl.searchParams.get('state') || '';\n        const redirectUrl = `insomnia://oauth/gitlab/authenticate?code=12345&state=${stateSearchParam}`;\n        resolve({ redirectUrl });\n      });\n    });\n  });\n\n  const [{ redirectUrl }] = await Promise.all([\n    fakeGitLabOAuthWebFlow,\n    page.getByText('Authenticate with GitLab').click({\n      // When playwright clicks a link it waits for navigation to finish.\n      // In our case we are stubbing the navigation and we don't want to wait for it.\n      noWaitAfter: true,\n    }),\n  ]);\n\n  await page.locator('input[name=\"link\"]').click();\n  await page.locator('input[name=\"link\"]').fill(redirectUrl);\n  await page.getByRole('button', { name: 'Add' }).click();\n\n  test.expect(await page.locator('text=\"Mark Kim\"')).toBeTruthy();\n  test.expect(await page.locator('button[name=\"sign-out\"]')).toBeTruthy();\n});","file":"smoke/oauth-gitlab.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"can make oauth2 requests","suites":[],"updatePoint":{"line":6,"column":30},"line":6,"code":"test('can make oauth2 requests', async ({ app, page }) => {\n  if (process.platform === 'darwin') {\n    test.setTimeout(6 * 60 * 1000);\n  } else {\n    test.slow();\n  }\n\n  const sendButton = page.locator('[data-testid=\"request-pane\"] button:has-text(\"Send\")');\n  const statusTag = page.locator('[data-testid=\"response-status-tag\"]:visible');\n  const responseBody = page.locator('[data-testid=\"CodeEditor\"]:visible', {\n    has: page.locator('.CodeMirror-activeline'),\n  });\n\n  const projectView = page.locator('#wrapper');\n  await projectView.getByRole('button', { name: 'Create' }).click();\n\n  const text = await loadFixture('oauth.yaml');\n  await app.evaluate(async ({ clipboard }, text) => clipboard.writeText(text), text);\n\n  await page.getByRole('menuitem', { name: 'Import' }).click();\n  await page.getByText('Clipboard').click();\n  await page.getByRole('button', { name: 'Scan' }).click();\n  await page.getByRole('dialog').getByRole('button', { name: 'Import' }).click();\n  await page.getByText('CollectionOAuth Testingjust now').click();\n\n  // Authorization code\n  await projectView.getByRole('button', { name: 'Authorization Code' }).click();\n\n  // No PKCE\n  await projectView.getByRole('button', { name: 'No PKCE' }).click();\n  await expect(page.locator('.app')).toContainText('http://127.0.0.1:4010/oidc/me');\n\n  const [authorizationCodePage] = await Promise.all([\n    app.waitForEvent('window'),\n    sendButton.click(),\n  ]);\n\n  await authorizationCodePage.waitForLoadState();\n  await authorizationCodePage.waitForFunction(\"document.cookie !== ''\");\n  await authorizationCodePage.locator('[name=\"login\"]').fill('admin');\n  await authorizationCodePage.locator('[name=\"password\"]').fill('admin');\n  await authorizationCodePage.locator('button:has-text(\"Sign-in\")').click();\n\n  await expect(statusTag).toContainText('200 OK');\n  await expect(responseBody).toContainText('\"sub\": \"admin\"');\n\n  // Navigate to the OAuth2 Tab and refresh the token from there\n  await page.getByRole('tab', { name: 'OAuth 2' }).click();\n\n  const tokenInput = page.locator('[for=\"Access-Token\"] > input');\n  const prevToken = await tokenInput.inputValue();\n  await page.locator('button:has-text(\"Refresh Token\")').click();\n  await expect(tokenInput).not.toHaveValue(prevToken);\n\n  // Clear the session and tokens and fetch a token manually\n  await page.locator('text=Advanced Options').click();\n  await page.locator('button:has-text(\"Clear OAuth 2 session\")').click();\n  await page.locator('button:text-is(\"Clear\")').click();\n\n  const [refreshPage] = await Promise.all([\n    app.waitForEvent('window'),\n    page.locator('button:has-text(\"Fetch Tokens\")').click(),\n  ]);\n\n  await refreshPage.waitForLoadState();\n  // expect an _interaction cookie to be set with the sign in form\n  await refreshPage.waitForFunction(\"document.cookie !== ''\");\n  await refreshPage.locator('[name=\"login\"]').fill('admin');\n  await refreshPage.locator('[name=\"password\"]').fill('admin');\n  await refreshPage.locator('button:has-text(\"Sign-in\")').click();\n\n  await expect(tokenInput).not.toHaveValue('');\n\n  // PKCE SHA256\n  await page.getByRole('button', { name: 'PKCE SHA256' }).click();\n  await expect(page.locator('.app')).toContainText('http://127.0.0.1:4010/oidc/me');\n  await expect(page.locator('#Grant-Type')).toHaveValue('authorization_code');\n  await expect(page.locator('#Code-Challenge-Method')).toHaveValue('S256');\n  await sendButton.click();\n  await expect(statusTag).toContainText('200 OK');\n  await expect(responseBody).toContainText('\"sub\": \"admin\"');\n\n  // PKCE Plain\n  await page.getByRole('button', { name: 'PKCE Plain' }).click();\n  await expect(page.locator('.app')).toContainText('http://127.0.0.1:4010/oidc/me');\n  await expect(page.locator('#Grant-Type')).toHaveValue('authorization_code');\n  await expect(page.locator('#Code-Challenge-Method')).toHaveValue('plain');\n  await sendButton.click();\n  await expect(statusTag).toContainText('200 OK');\n  await expect(responseBody).toContainText('\"sub\": \"admin\"');\n\n  // Reset the OAuth 2 session from Preferences\n  if (process.platform === 'darwin') {\n    await page.keyboard.press('Meta+,');\n  } else {\n    await page.keyboard.press('Control+,');\n  }\n  await page.locator('button:has-text(\"Clear OAuth 2 session\")').click();\n  await page.keyboard.press('Escape');\n\n  // Implicit\n  await page.getByRole('button', { name: 'Implicit' }).click();\n\n  // ID Token\n  await page.getByRole('button', { name: 'ID Token' }).click();\n  await expect(page.locator('.app')).toContainText('http://127.0.0.1:4010/oidc/id-token');\n  await expect(page.locator('#Grant-Type')).toHaveValue('implicit');\n\n  const [implicitPage] = await Promise.all([\n    app.waitForEvent('window'),\n    sendButton.click(),\n  ]);\n  await implicitPage.waitForLoadState();\n  await implicitPage.waitForFunction(\"document.cookie !== ''\");\n  await implicitPage.locator('[name=\"login\"]').fill('admin');\n  await implicitPage.locator('[name=\"password\"]').fill('admin');\n  await implicitPage.locator('button:has-text(\"Sign-in\")').click();\n\n  await expect(statusTag).toContainText('200 OK');\n  await expect(responseBody).toContainText('\"sub\": \"admin\"');\n\n  // ID and Access Token\n  await page.getByRole('button', { name: 'ID and Access Token' }).click();\n  await expect(page.locator('.app')).toContainText('http://127.0.0.1:4010/oidc/me');\n  await expect(page.locator('#Grant-Type')).toHaveValue('implicit');\n  await sendButton.click();\n  await expect(statusTag).toContainText('200 OK');\n  await expect(responseBody).toContainText('\"sub\": \"admin\"');\n\n  // Reset the OAuth 2 session from Preferences\n  if (process.platform === 'darwin') {\n    await page.keyboard.press('Meta+,');\n  } else {\n    await page.keyboard.press('Control+,');\n  }\n  await page.locator('button:has-text(\"Clear OAuth 2 session\")').click();\n  await page.keyboard.press('Escape');\n\n  // Client Credentials\n  await page.getByRole('button', { name: 'Client Credentials' }).click();\n  await expect(page.locator('.app')).toContainText('http://127.0.0.1:4010/oidc/client-credential');\n  await expect(page.locator('#Grant-Type')).toHaveValue('client_credentials');\n  await sendButton.click();\n  await expect(statusTag).toContainText('200 OK');\n  await expect(responseBody).toContainText('\"clientId\": \"client_credentials\"');\n\n  // Reset the OAuth 2 session from Preferences\n  if (process.platform === 'darwin') {\n    await page.keyboard.press('Meta+,');\n  } else {\n    await page.keyboard.press('Control+,');\n  }\n  await page.locator('button:has-text(\"Clear OAuth 2 session\")').click();\n  await page.keyboard.press('Escape');\n\n  // Resource Owner Password Credentials\n  await page.getByRole('button', { name: 'Resource Owner Password Credentials' }).click();\n  await expect(page.locator('.app')).toContainText('http://127.0.0.1:4010/oidc/me');\n  await expect(page.locator('#Grant-Type')).toHaveValue('password');\n  await sendButton.click();\n  await expect(statusTag).toContainText('200 OK');\n  await expect(responseBody).toContainText('\"sub\": \"foo\"');\n});","file":"smoke/oauth.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"can render Spectral OpenAPI lint errors","suites":[],"updatePoint":{"line":5,"column":45},"line":5,"code":"test('can render Spectral OpenAPI lint errors', async ({ page }) => {\n  await page.getByRole('button', { name: 'New Document' }).click();\n  await page.getByRole('dialog').getByRole('button', { name: 'Create' }).click();\n  await page.click('text=Design');\n  await page.click('text=start from an example');\n\n  const codeEditor = page.locator('.pane-one');\n  await expect(codeEditor).toContainText('openapi: 3.0.0');\n\n  // Cause a lint error\n  await page.locator('[data-testid=\"CodeEditor\"] >> text=info').click();\n  await page.locator('textarea').nth(1).press('Tab');\n  // TODO - fix the locator so we don't rely on `.nth(1)` https://linear.app/insomnia/issue/INS-2255/revisit-codemirror-playwright-selectorfill\n\n  await expect(codeEditor).toContainText('oas3-schema Object must have required property \"info\"');\n});","file":"smoke/openapi.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"can make websocket connection","suites":[],"updatePoint":{"line":6,"column":35},"line":6,"code":"test('can make websocket connection', async ({ app, page }) => {\n  test.slow(process.platform === 'darwin' || process.platform === 'win32', 'Slow app start on these platforms');\n  const statusTag = page.locator('[data-testid=\"response-status-tag\"]:visible');\n  const responseBody = page.locator('[data-testid=\"response-pane\"] >> [data-testid=\"CodeEditor\"]:visible', {\n    has: page.locator('.CodeMirror-activeline'),\n  });\n\n  await page.getByRole('button', { name: 'Create' }).click();\n\n  const text = await loadFixture('websockets.yaml');\n  await app.evaluate(async ({ clipboard }, text) => clipboard.writeText(text), text);\n\n  await page.getByRole('menuitem', { name: 'Import' }).click();\n  await page.getByText('Clipboard').click();\n  await page.getByRole('button', { name: 'Scan' }).click();\n  await page.getByRole('dialog').getByRole('button', { name: 'Import' }).click();\n  await page.getByText('CollectionWebSocketsjust now').click();\n\n  await page.getByRole('button', { name: 'localhost:4010' }).click();\n  await expect(page.locator('.app')).toContainText('ws://localhost:4010');\n  await page.click('text=Connect');\n  await expect(statusTag).toContainText('101 Switching Protocols');\n  await page.getByRole('tab', { name: 'Timeline' }).click();\n  await expect(responseBody).toContainText('WebSocket connection established');\n  await page.click('text=Disconnect');\n  await expect(responseBody).toContainText('Closing connection with code 1005');\n\n  // Can connect with Basic Auth\n  await page.getByRole('button', { name: 'basic-auth' }).click();\n  await expect(page.locator('.app')).toContainText('ws://localhost:4010/basic-auth');\n  await page.click('text=Connect');\n  await expect(statusTag).toContainText('101 Switching Protocols');\n  await page.getByRole('tab', { name: 'Timeline' }).click();\n  await expect(responseBody).toContainText('> authorization: Basic dXNlcjpwYXNzd29yZA==');\n\n  // Can connect with Bearer Auth\n  await page.getByRole('button', { name: 'bearer' }).click();\n  await expect(page.locator('.app')).toContainText('ws://localhost:4010/bearer');\n  await page.click('text=Connect');\n  await expect(statusTag).toContainText('101 Switching Protocols');\n  await page.getByRole('tab', { name: 'Timeline' }).click();\n  await expect(responseBody).toContainText('> authorization: Bearer insomnia-cool-token-!!!1112113243111');\n\n  // Can handle redirects\n  await page.getByRole('button', { name: 'redirect' }).click();\n  await expect(page.locator('.app')).toContainText('ws://localhost:4010/redirect');\n  await page.click('text=Connect');\n  await expect(statusTag).toContainText('101 Switching Protocols');\n  await page.getByRole('tab', { name: 'Timeline' }).click();\n  await expect(responseBody).toContainText('WebSocket connection established');\n\n  const webSocketActiveConnections = page.locator('[data-testid=\"WebSocketSpinner__Connected\"]');\n\n  // Basic auth, Bearer auth, and Redirect connections are displayed as open\n  await expect(webSocketActiveConnections).toHaveCount(3);\n\n  // Can disconnect from all connections\n  await page.locator('button[name=\"DisconnectDropdown__DropdownButton\"]').click();\n  await page.getByRole('menuitem', { name: 'Disconnect all requests' }).click();\n  await expect(webSocketActiveConnections).toHaveCount(0);\n});","file":"smoke/websocket.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"}]}