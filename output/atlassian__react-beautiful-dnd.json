{"repo":"atlassian/react-beautiful-dnd","url":"https://github.com/atlassian/react-beautiful-dnd","branch":"master","configs":[{"package":"react-beautiful-dnd","lang":"js","dir":"cypress","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"should reorder a list without a nonce","suites":["content security policy"],"updatePoint":{"line":36,"column":43,"index":1241},"line":36,"code":"  it('should reorder a list without a nonce', () => {\n    commonTest(`http://localhost:${ports.cspServer}`, 'contain');\n  });","file":"integration/content-security-policy.spec.js","skipped":false,"dir":"cypress"},{"name":"should reorder a list with a nonce","suites":["content security policy"],"updatePoint":{"line":39,"column":40,"index":1364},"line":39,"code":"  it('should reorder a list with a nonce', () => {\n    commonTest(`http://localhost:${ports.cspServer}/nonce`, 'contain');\n  });","file":"integration/content-security-policy.spec.js","skipped":false,"dir":"cypress"},{"name":"should reorder a list with a wrong nonce","suites":["content security policy"],"updatePoint":{"line":42,"column":46,"index":1499},"line":42,"code":"  it('should reorder a list with a wrong nonce', () => {\n    commonTest(`http://localhost:${ports.cspServer}/wrong-nonce`, 'not.contain');\n  });","file":"integration/content-security-policy.spec.js","skipped":false,"dir":"cypress"},{"name":"should not steal focus if not already focused when lifting","suites":["focus"],"updatePoint":{"line":5,"column":64,"index":212},"line":5,"code":"  it('should not steal focus if not already focused when lifting', () => {\n    cy.visit('/iframe.html?id=board--dragging-a-clone');\n    // focusing on another handle\n    cy.get(getHandleSelector('1')).focus();\n    cy.focused().should('contain', 'id:1');\n    cy.get(getHandleSelector('2')).as('id:2').trigger('mousedown', {\n      button: 0\n    }).trigger('mousemove', {\n      button: 0,\n      clientX: 200,\n      clientY: 300,\n      force: true\n    });\n\n    // asserting id:2 is now dragging\n    cy.get(getHandleSelector('2')).should('have.attr', 'data-is-dragging', 'true');\n\n    // focus not stolen\n    cy.focused().should('contain', 'id:1');\n    cy.get(getHandleSelector('2')).trigger('mouseup', {\n      force: true\n    })\n    // clone will be unmounting during drop\n    .should('not.exist');\n\n    // getting post clone handle\n    cy.get(getHandleSelector('2')).should('have.attr', 'data-is-dragging', 'false');\n\n    // focus not stolen\n    cy.focused().should('contain', 'id:1');\n  });","file":"integration/focus.spec.js","skipped":false,"dir":"cypress"},{"name":"should maintain focus if dragging a clone","suites":["focus"],"updatePoint":{"line":36,"column":47,"index":1184},"line":36,"code":"  it('should maintain focus if dragging a clone', () => {\n    cy.visit('/iframe.html?id=board--dragging-a-clone');\n    // focusing on another handle\n    cy.get(getHandleSelector('2')).focus();\n    cy.focused().should('contain', 'id:2');\n    cy.get(getHandleSelector('2')).trigger('keydown', {\n      keyCode: keyCodes.space\n    });\n\n    // asserting id:2 is now dragging\n    cy.get(getHandleSelector('2')).should('have.attr', 'data-is-dragging', 'true');\n\n    // focus maintained\n    cy.focused().should('contain', 'id:2');\n    cy.get(getHandleSelector('2')).trigger('keydown', {\n      keyCode: keyCodes.arrowRight,\n      force: true\n    }).trigger('keydown', {\n      keyCode: keyCodes.space,\n      force: true\n    })\n    // clone will be unmounting during drop\n    .should('not.exist');\n\n    // getting post clone handle\n    cy.get(getHandleSelector('2'))\n    // no longer dragging\n    .should('have.attr', 'data-is-dragging', 'false')\n    // is in the second column (normally would loose focus moving between lists)\n    .closest(getDraggableSelector('BMO'));\n\n    // focus maintained\n    cy.focused().should('contain', 'id:2');\n  });","file":"integration/focus.spec.js","skipped":false,"dir":"cypress"},{"name":"should give focus to a combine target","suites":["focus"],"updatePoint":{"line":70,"column":43,"index":2315},"line":70,"code":"  it('should give focus to a combine target', () => {\n    cy.visit('/iframe.html?id=board--with-combining-and-cloning');\n    cy.get(getHandleSelector('2')).focus();\n    cy.focused().should('contain', 'id:2');\n    cy.get(getHandleSelector('2')).trigger('keydown', {\n      keyCode: keyCodes.space\n    });\n\n    // asserting id:2 is now dragging\n    cy.get(getHandleSelector('2')).should('have.attr', 'data-is-dragging', 'true');\n\n    // focus maintained\n    cy.focused().should('contain', 'id:2');\n    cy.get(getHandleSelector('2')).trigger('keydown', {\n      keyCode: keyCodes.arrowRight,\n      force: true\n    })\n    // combining with item:1\n    .trigger('keydown', {\n      keyCode: keyCodes.arrowUp,\n      force: true\n    })\n    // dropping\n    .trigger('keydown', {\n      keyCode: keyCodes.space,\n      force: true\n    })\n    // clone will be unmounting during drop\n    .should('not.exist');\n\n    // focus giving to item:1 the combine target\n    cy.focused().should('contain', 'id:1');\n  });","file":"integration/focus.spec.js","skipped":false,"dir":"cypress"},{"name":"should not give focus to a combine target if source did not have focus at start of drag","suites":["focus"],"updatePoint":{"line":103,"column":93,"index":3358},"line":103,"code":"  it('should not give focus to a combine target if source did not have focus at start of drag', () => {\n    cy.visit('/iframe.html?id=board--with-combining-and-cloning');\n    // focusing on something unrelated to the drag\n    cy.get(getHandleSelector('3')).focus();\n    cy.get(getHandleSelector('2')).trigger('keydown', {\n      keyCode: keyCodes.space\n    });\n\n    // asserting id:2 is now dragging\n    cy.get(getHandleSelector('2')).should('have.attr', 'data-is-dragging', 'true');\n\n    // focus not stolen\n    cy.focused().should('contain', 'id:3');\n    cy.get(getHandleSelector('2')).trigger('keydown', {\n      keyCode: keyCodes.arrowRight,\n      force: true\n    })\n    // combining with item:1\n    .trigger('keydown', {\n      keyCode: keyCodes.arrowUp,\n      force: true\n    })\n    // dropping\n    .trigger('keydown', {\n      keyCode: keyCodes.space,\n      force: true\n    })\n    // clone will be unmounting during drop\n    .should('not.exist');\n\n    // focus not given to the combine target\n    cy.focused().should('contain', 'id:3');\n  });","file":"integration/focus.spec.js","skipped":false,"dir":"cypress"},{"name":"should move between lists","suites":["move between lists"],"updatePoint":{"line":9,"column":31,"index":313},"line":9,"code":"  it('should move between lists', () => {\n    // first list has item with id:2\n    cy.get(getDroppableSelector()).eq(1).as('first-list').should('contain', 'id:2');\n\n    // second list does not have item with id:2\n    cy.get(getDroppableSelector()).eq(2).as('second-list').should('not.contain', 'id:2');\n    cy.get('@first-list').find(getHandleSelector()).first().should('contain', 'id:2').focus().trigger('keydown', {\n      keyCode: keyCodes.space\n    }).trigger('keydown', {\n      keyCode: keyCodes.arrowRight,\n      force: true\n    })\n    // finishing before the movement time is fine - but this looks nice\n    .wait(timings.outOfTheWay * 1000).trigger('keydown', {\n      keyCode: keyCodes.space,\n      force: true\n    });\n\n    // no longer in the first list\n    cy.get('@first-list').should('not.contain', 'id:2');\n\n    // now in the second list\n    cy.get('@second-list').should('contain', 'id:2');\n  });","file":"integration/move-between-lists.spec.js","skipped":false,"dir":"cypress"},{"name":"should reorder lists","suites":["reorder lists"],"updatePoint":{"line":9,"column":26,"index":281},"line":9,"code":"  it('should reorder lists', () => {\n    // order: Jake, BMO\n    cy.get('h4').eq(0).as('first').should('contain', 'Jake');\n    cy.get('h4').eq(1).should('contain', 'BMO');\n\n    // reorder operation\n    cy.get('@first').closest(getHandleSelector()).focus().trigger('keydown', {\n      keyCode: keyCodes.space\n    }).trigger('keydown', {\n      keyCode: keyCodes.arrowRight,\n      force: true\n    })\n    // finishing before the movement time is fine - but this looks nice\n    .wait(timings.outOfTheWay * 1000).trigger('keydown', {\n      keyCode: keyCodes.space,\n      force: true\n    });\n\n    // order now 2, 1\n    // note: not using get aliases as they where returning incorrect results\n    cy.get('h4').eq(0).should('contain', 'BMO');\n\n    // index of the drag handle has changed\n    cy.get('h4').eq(1).should('contain', 'Jake');\n  });","file":"integration/reorder-lists.spec.js","skipped":false,"dir":"cypress"},{"name":"should reorder within a list","suites":["reorder: virtual"],"updatePoint":{"line":9,"column":34,"index":305},"line":9,"code":"  it('should reorder within a list', () => {\n    const movements = 12;\n    cy.get(getHandleSelector()).first().as('item');\n    cy.get('@item').invoke('attr', 'data-testid').as('item-id');\n    cy.get('@item').invoke('attr', 'data-index').as('item-index').should('equal', '0');\n\n    // lift\n    cy.get('@item').focus().trigger('keydown', {\n      keyCode: keyCodes.space\n    })\n    // need to re-query for a clone\n    .get('@item');\n    cy.wrap(Array.from({\n      length: movements\n    })).each(() => {\n      cy.get('@item').trigger('keydown', {\n        keyCode: keyCodes.arrowDown,\n        force: true\n      })\n      // finishing before the movement time is fine - but this looks nice\n      // waiting longer than we should (timings.outOfTheWay * 1000) as electron is being strange\n      .wait(timings.outOfTheWay * 1000 * 2);\n    });\n\n    // drop\n    cy.get('@item').trigger('keydown', {\n      keyCode: keyCodes.space,\n      force: true\n    });\n\n    // This is setting up a chain of commands and this test will not wait\n    // for a 'promise' to resolve. Linting is getting confused by .then\n    // eslint-disable-next-line jest/valid-expect-in-promise\n    cy.get('@item-id').then(id => {\n      cy.get(getHandleSelector(id)).invoke('attr', 'data-index').should('equal', `${movements}`);\n    });\n  });","file":"integration/reorder-virtual.spec.js","skipped":false,"dir":"cypress"},{"name":"should reorder within a list","suites":["reorder"],"updatePoint":{"line":9,"column":34,"index":297},"line":9,"code":"  it('should reorder within a list', () => {\n    // order: 1, 2\n    cy.get(getHandleSelector()).eq(0).as('first').should('contain', 'id:1');\n    cy.get(getHandleSelector()).eq(1).should('contain', 'id:2');\n\n    // reorder operation\n    cy.get('@first').focus().trigger('keydown', {\n      keyCode: keyCodes.space\n    })\n    // need to re-query for a clone\n    .get('@first').trigger('keydown', {\n      keyCode: keyCodes.arrowDown,\n      force: true\n    })\n    // finishing before the movement time is fine - but this looks nice\n    .wait(timings.outOfTheWay * 1000).trigger('keydown', {\n      keyCode: keyCodes.space,\n      force: true\n    });\n\n    // order now 2, 1\n    // note: not using get aliases as they where returning incorrect results\n    cy.get(getHandleSelector()).eq(0).should('contain', 'id:2');\n    cy.get(getHandleSelector()).eq(1).should('contain', 'id:1');\n\n    // element should maintain focus post drag\n    cy.focused().should('contain', 'id:1');\n  });","file":"integration/reorder.spec.js","skipped":false,"dir":"cypress"}]}