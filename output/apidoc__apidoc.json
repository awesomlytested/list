{"repo":"apidoc/apidoc","url":"https://github.com/apidoc/apidoc","branch":"master","configs":[{"package":"apidoc","lang":"js","dir":"test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"should find created files","suites":["apiDoc full example with config path for .json file"],"updatePoint":{"line":40,"column":31,"index":1081},"line":40,"code":"  it('should find created files', done => {\n    const outputFiles = ['assets/main.bundle.js', 'index.html'];\n    outputFiles.forEach(name => {\n      const res = fs.existsSync(path.join(outputPath, name));\n      assert.strictEqual(res, true);\n    });\n    done();\n  });","file":"apidoc_test.js","skipped":false,"dir":"test"},{"name":"should show correct version","suites":["test cli options"],"updatePoint":{"line":8,"column":33,"index":220},"line":8,"code":"  it('should show correct version', function (done) {\n    const cmd = 'node ./bin/apidoc -V';\n    exec(cmd, function (err, stdout, stderr) {\n      if (err) {\n        throw err;\n      }\n      if (stderr) {\n        throw stderr;\n      }\n      assert.strictEqual(stdout.trim('\\n'), pkgjson.version);\n      done();\n    });\n  });","file":"cli_test.js","skipped":false,"dir":"test"},{"name":"case 1: should pass all test cases","suites":["parseSource"],"updatePoint":{"line":149,"column":40,"index":4164},"line":149,"code":"  it('case 1: should pass all test cases', function (done) {\n    testCases.forEach(function (testCase) {\n      const logCatcher = new LogCatcher();\n      apidoc.setLogger(logCatcher);\n      const parsed = apidoc.parseSource(Buffer.from(testCase.source), {\n        filename: 'app.js'\n      });\n      assert.deepEqual(parsed[0], testCase.expected);\n      assert.deepEqual(logCatcher.logs.info, testCase.logs.info || [], 'INFO logs do not match');\n      assert.deepEqual(logCatcher.logs.warn, testCase.logs.warn || [], 'WARN logs do not match');\n      assert.deepEqual(logCatcher.logs.error, testCase.logs.error || [], 'ERROR logs do not match');\n    });\n    done();\n  });","file":"core/parse_source_test.js","skipped":false,"dir":"test"},{"name":"case 1: should pass all regexp test cases","suites":["Parser: apiBody"],"updatePoint":{"line":118,"column":47,"index":3533},"line":118,"code":"  it('case 1: should pass all regexp test cases', function (done) {\n    testCases.forEach(function (testCase) {\n      const parsed = parser.parse(testCase.content);\n      // TODO\n      //(parsed !== null).should.equal(true, 'Title: ' + testCase.title + ', Source: ' + testCase.content);\n      assert.deepEqual(parsed, testCase.expected);\n    });\n    done();\n  });","file":"core/parsers/api_body_test.js","skipped":false,"dir":"test"},{"name":"case 1: should pass all regexp test cases","suites":["Parser: apiDescription"],"updatePoint":{"line":43,"column":47,"index":1567},"line":43,"code":"  it('case 1: should pass all regexp test cases', function (done) {\n    testCases.forEach(function (testCase) {\n      const parsed = parser.parse(testCase.content);\n      // TODO\n      //(parsed !== null).should.equal(true, 'Title: ' + testCase.title + ', Source: ' + testCase.content);\n      assert.deepEqual(parsed, testCase.expected);\n    });\n    done();\n  });","file":"core/parsers/api_description_test.js","skipped":false,"dir":"test"},{"name":"case 1: should pass all regexp test cases","suites":["Parser: apiParam"],"updatePoint":{"line":118,"column":47,"index":3555},"line":118,"code":"  it('case 1: should pass all regexp test cases', function (done) {\n    testCases.forEach(function (testCase) {\n      const parsed = parser.parse(testCase.content);\n      // TODO\n      //(parsed !== null).should.equal(true, 'Title: ' + testCase.title + ', Source: ' + testCase.content);\n      assert.deepEqual(parsed, testCase.expected);\n    });\n    done();\n  });","file":"core/parsers/api_param_test.js","skipped":false,"dir":"test"},{"name":"case 1: should pass all regexp test cases","suites":["Parser: apiQuery"],"updatePoint":{"line":73,"column":47,"index":2019},"line":73,"code":"  it('case 1: should pass all regexp test cases', function (done) {\n    testCases.forEach(function (testCase) {\n      const parsed = parser.parse(testCase.content);\n      // TODO\n      //(parsed !== null).should.equal(true, 'Title: ' + testCase.title + ', Source: ' + testCase.content);\n      assert.deepEqual(parsed, testCase.expected);\n    });\n    done();\n  });","file":"core/parsers/api_query_test.js","skipped":false,"dir":"test"},{"name":"should strip common leading spaces","suites":["Util: unindent"],"updatePoint":{"line":9,"column":40,"index":222},"line":9,"code":"  it('should strip common leading spaces', function (done) {\n    assert.strictEqual(unindent('  a\\n    b\\n   c'), 'a\\n  b\\n c');\n    done();\n  });","file":"core/util_unindent_test.js","skipped":false,"dir":"test"},{"name":"should strip common leading tabs","suites":["Util: unindent"],"updatePoint":{"line":13,"column":38,"index":367},"line":13,"code":"  it('should strip common leading tabs', function (done) {\n    assert.strictEqual(unindent('\\t\\ta\\n\\t\\t\\t\\tb\\n\\t\\t\\tc'), 'a\\n\\t\\tb\\n\\tc');\n    done();\n  });","file":"core/util_unindent_test.js","skipped":false,"dir":"test"},{"name":"should strip all leading whitespace from a single line","suites":["Util: unindent"],"updatePoint":{"line":17,"column":60,"index":546},"line":17,"code":"  it('should strip all leading whitespace from a single line', function (done) {\n    assert.strictEqual(unindent('   \\t   a'), 'a');\n    done();\n  });","file":"core/util_unindent_test.js","skipped":false,"dir":"test"},{"name":"should not modify the empty string","suites":["Util: unindent"],"updatePoint":{"line":21,"column":40,"index":677},"line":21,"code":"  it('should not modify the empty string', function (done) {\n    const s = '';\n    assert.strictEqual(unindent(s), s);\n    done();\n  });","file":"core/util_unindent_test.js","skipped":false,"dir":"test"},{"name":"should not modify if any line starts with non-whitespace","suites":["Util: unindent"],"updatePoint":{"line":26,"column":62,"index":836},"line":26,"code":"  it('should not modify if any line starts with non-whitespace', function (done) {\n    const s = '    a\\n   b\\nc   d\\n   e';\n    assert.strictEqual(unindent(s), s);\n    done();\n  });","file":"core/util_unindent_test.js","skipped":false,"dir":"test"},{"name":"should strip common leading tabs and keep spaces","suites":["Util: unindent"],"updatePoint":{"line":31,"column":54,"index":1011},"line":31,"code":"  it('should strip common leading tabs and keep spaces', function (done) {\n    assert.strictEqual(unindent('\\ta\\n\\t  b\\n\\t c'), 'a\\n  b\\n c');\n    done();\n  });","file":"core/util_unindent_test.js","skipped":false,"dir":"test"},{"name":"should strip common leading tabs and 1 space on each line","suites":["Util: unindent"],"updatePoint":{"line":35,"column":63,"index":1181},"line":35,"code":"  it('should strip common leading tabs and 1 space on each line', function (done) {\n    assert.strictEqual(unindent('\\t  a\\n\\t  b\\n\\t c'), ' a\\n b\\nc');\n    done();\n  });","file":"core/util_unindent_test.js","skipped":false,"dir":"test"},{"name":"should handle parentheses correctly","suites":["Worker: apiGroup"],"updatePoint":{"line":23,"column":41,"index":441},"line":23,"code":"  it('should handle parentheses correctly', function (done) {\n    worker.postProcess(parsedFiles, undefined, preProcess);\n    const rootBlock = parsedFiles[0][0];\n    assert.strictEqual(rootBlock.local.group, 'Category_official');\n    assert.strictEqual(rootBlock.local.groupTitle, 'Category_(official)');\n    done();\n  });","file":"core/worker_api_group_test.js","skipped":false,"dir":"test"},{"name":"case 1: simple test","suites":["Worker: apiUse"],"updatePoint":{"line":162,"column":25,"index":2695},"line":162,"code":"  it('case 1: simple test', function (done) {\n    const preProcess = worker.preProcess(parsedFilesSimpleTest, filenames, packageInfos);\n    worker.postProcess(parsedFilesSimpleTest, filenames, preProcess, packageInfos);\n    const rootBlock = parsedFilesSimpleTest[0][0];\n    assert.strictEqual(rootBlock.local.name, 'root');\n\n    // check if the root block contains the expected value from every other block\n    parsedFilesSimpleTest.forEach(function (parsedFile, parsedFileIndex) {\n      parsedFile.forEach(function (block) {\n        // TODO\n        //rootBlock.local.test.should.containEql(block.expected);\n      });\n    });\n    done();\n  });","file":"core/worker_api_use_test.js","skipped":false,"dir":"test"},{"name":"case 2: recursive test","suites":["Worker: apiUse"],"updatePoint":{"line":177,"column":28,"index":3343},"line":177,"code":"  it('case 2: recursive test', function (done) {\n    const preProcess = worker.preProcess(parsedFilesRecursiveTest, filenames, packageInfos);\n    worker.postProcess(parsedFilesRecursiveTest, filenames, preProcess, packageInfos);\n    const rootBlock = parsedFilesRecursiveTest[0][0];\n    assert.strictEqual(rootBlock.local.name, 'root');\n\n    // check if the root block contains the expected value from every other block\n    parsedFilesRecursiveTest.forEach(function (parsedFile, parsedFileIndex) {\n      parsedFile.forEach(function (block) {\n        // TODO\n        //rootBlock.local.test.should.containEql(block.expected);\n      });\n    });\n    done();\n  });","file":"core/worker_api_use_test.js","skipped":false,"dir":"test"},{"name":"should render static text with custom markdown parser","suites":["test a custom markdown parser"],"updatePoint":{"line":16,"column":59,"index":526},"line":16,"code":"  it('should render static text with custom markdown parser', function (done) {\n    const markdownParser = new Markdown();\n    const text = markdownParser.render('some text');\n    assert.strictEqual(text, 'Custom Markdown Parser: some text');\n    done();\n  });","file":"markdown/custom_markdown_parser_test.js","skipped":false,"dir":"test"},{"name":"should provide default options when no options are given","suites":["test options module"],"updatePoint":{"line":8,"column":62,"index":260},"line":8,"code":"  it('should provide default options when no options are given', function (done) {\n    const processedOptions = optionsProcessor.process({});\n    assert.deepEqual(processedOptions, optionsProcessor.defaultOptions);\n    done();\n  });","file":"options_test.js","skipped":false,"dir":"test"},{"name":"should provide correct options when options are given","suites":["test options module"],"updatePoint":{"line":13,"column":59,"index":490},"line":13,"code":"  it('should provide correct options when options are given', function (done) {\n    const options = {\n      src: [path.join('some', 'path')],\n      dest: path.join('output', 'path'),\n      debug: true\n    };\n    const processedOptions = optionsProcessor.process(options);\n    assert.strictEqual(processedOptions.src, options.src);\n    assert.strictEqual(processedOptions.dest, options.dest + path.sep);\n    assert.strictEqual(processedOptions.debug, options.debug);\n    done();\n  });","file":"options_test.js","skipped":false,"dir":"test"},{"name":"should read input/output paths from config file","suites":["test options module"],"updatePoint":{"line":25,"column":53,"index":968},"line":25,"code":"  it('should read input/output paths from config file', function (done) {\n    const options = {\n      config: 'example/apidoc.json'\n    };\n    // read the apidoc.json file\n    const apidocJson = require('../example/apidoc.json');\n    // convert path to platform variant\n    apidocJson.output = path.resolve(apidocJson.output.replace(/[\\\\\\/]/g, path.sep));\n    const processedOptions = optionsProcessor.process(options);\n    assert.deepEqual(processedOptions.src, apidocJson.input.map(p => path.resolve(p) + path.sep));\n    assert.strictEqual(processedOptions.dest, path.resolve(apidocJson.output) + path.sep);\n    done();\n  });","file":"options_test.js","skipped":false,"dir":"test"},{"name":"should return the given config","suites":["test reader module"],"updatePoint":{"line":12,"column":36,"index":286},"line":12,"code":"  it('should return the given config', function (done) {\n    const options = {\n      config: 'example/apidoc.json'\n    };\n    const app = {\n      options: options,\n      log: logger\n    };\n    const content = require(path.resolve(app.options.config));\n    const reader = new Reader(app);\n    assert.strictEqual(reader.read(), content);\n    done();\n  });","file":"reader_test.js","skipped":false,"dir":"test"},{"name":"should return default config when there is no config to find","suites":["test reader module"],"updatePoint":{"line":25,"column":66,"index":670},"line":25,"code":"  it('should return default config when there is no config to find', function (done) {\n    const app = {\n      options: {\n        src: ['/tmp/emptydir'],\n        dryRun: true\n      },\n      log: logger\n    };\n    const reader = new Reader(app);\n    assert.deepEqual(reader.read(), defaultConfig);\n    done();\n  });","file":"reader_test.js","skipped":false,"dir":"test"},{"name":"should work in dry run mode","suites":["test writer module"],"updatePoint":{"line":19,"column":33,"index":425},"line":19,"code":"  it('should work in dry run mode', async function () {\n    const app = {\n      options: {\n        dryRun: true\n      },\n      log: logger\n    };\n    const writer = new Writer({}, app);\n    return writer.write();\n  });","file":"writer_test.js","skipped":false,"dir":"test"},{"name":"should work in dry run mode with debug option","suites":["test writer module"],"updatePoint":{"line":29,"column":51,"index":662},"line":29,"code":"  it('should work in dry run mode with debug option', async function () {\n    const app = {\n      options: {\n        dryRun: true,\n        debug: true\n      },\n      log: logger\n    };\n    const writer = new Writer({}, app);\n    return writer.write();\n  });","file":"writer_test.js","skipped":false,"dir":"test"},{"name":"getIndexContent() should throw an error if project (apiProject) is undefined","suites":["test writer module"],"updatePoint":{"line":40,"column":82,"index":951},"line":40,"code":"  it('getIndexContent() should throw an error if project (apiProject) is undefined', async function () {\n    const app = {\n      log: logger\n    };\n    const writer = new Writer({}, app);\n    assert.throws(writer.getIndexContent, Error);\n  });","file":"writer_test.js","skipped":false,"dir":"test"}]}