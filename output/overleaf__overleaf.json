{"repo":"overleaf/overleaf","url":"https://github.com/overleaf/overleaf","branch":"main","configs":[{"package":"@overleaf/access-token-encryptor","lang":"js","dir":"libraries/access-token-encryptor/test","framework":"mocha","pattern":"**/*.{js,ts}"},{"package":"@overleaf/logger","lang":"js","dir":"libraries/logger/test","framework":"mocha","pattern":"**/*.{js,ts}"},{"package":"@overleaf/metrics","lang":"js","dir":"libraries/metrics/test","framework":"mocha","pattern":"**/*.{js,ts}"},{"package":"@overleaf/o-error","lang":"js","dir":"libraries/o-error/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@overleaf/object-persistor","lang":"js","dir":"libraries/object-persistor/test","framework":"mocha","pattern":"**/*.{js,ts}"},{"package":"@overleaf/redis-wrapper","lang":"js","dir":"libraries/redis-wrapper/test","framework":"mocha","pattern":"**/*.{js,ts}"},{"package":"chat-sharelatex","lang":"js","dir":"services/chat/test","framework":"mocha","pattern":"**/*.{js,ts}"},{"package":"node-clsi","lang":"js","dir":"services/clsi/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"contacts-sharelatex","lang":"js","dir":"services/contacts/test","framework":"mocha","pattern":"**/*.{js,ts}"},{"package":"docstore-sharelatex","lang":"js","dir":"services/docstore/test","framework":"mocha","pattern":"**/*.{js,ts}"},{"package":"document-updater-sharelatex","lang":"js","dir":"services/document-updater/test","framework":"mocha","pattern":"**/*.{js,ts}"},{"package":"filestore-sharelatex","lang":"js","dir":"services/filestore/test","framework":"mocha","pattern":"**/*.{js,ts}"},{"package":"notifications-sharelatex","lang":"js","dir":"services/notifications/test","framework":"mocha","pattern":"**/*.{js,ts}"},{"package":"real-time-sharelatex","lang":"js","dir":"services/real-time/test","framework":"mocha","pattern":"**/*.{js,ts}"},{"package":"spelling-sharelatex","lang":"js","dir":"services/spelling/test","framework":"mocha","pattern":"**/*.{js,ts}"},{"package":"history-sharelatex","lang":"js","dir":"services/track-changes/test","framework":"mocha","pattern":"**/*.{js,ts}"},{"package":"web-overleaf","lang":"js","dir":"services/web/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"should flag missing label","suites":["AccessTokenEncryptor","invalid settings"],"updatePoint":{"line":34,"column":33,"index":1377},"line":34,"code":"    it('should flag missing label', function () {\n      expect(() => new this.AccessTokenEncryptor({\n        cipherLabel: '',\n        cipherPasswords: {\n          '': ''\n        }\n      })).to.throw(/cipherLabel cannot be empty/);\n    });","file":"unit/js/AccessTokenEncryptorTests.js","skipped":false,"dir":"libraries/access-token-encryptor/test"},{"name":"should flag invalid label with colon","suites":["AccessTokenEncryptor","invalid settings"],"updatePoint":{"line":42,"column":44,"index":1627},"line":42,"code":"    it('should flag invalid label with colon', function () {\n      expect(() => new this.AccessTokenEncryptor({\n        cipherLabel: '2023:1-v2',\n        cipherPasswords: {\n          '2023:1-v2': ''\n        }\n      })).to.throw(/colon/);\n    });","file":"unit/js/AccessTokenEncryptorTests.js","skipped":false,"dir":"libraries/access-token-encryptor/test"},{"name":"should flag missing password","suites":["AccessTokenEncryptor","invalid settings"],"updatePoint":{"line":50,"column":36,"index":1865},"line":50,"code":"    it('should flag missing password', function () {\n      expect(() => new this.AccessTokenEncryptor({\n        cipherPasswords: {\n          '2023.1-v3': ''\n        },\n        cipherVersions: {\n          '2023.1-v3': 'v3'\n        }\n      })).to.throw(/cipherPasswords.+ missing/);\n      expect(() => new this.AccessTokenEncryptor({\n        cipherLabel: '2023.1-v3',\n        cipherPasswords: {\n          '2023.1-v3': undefined\n        }\n      })).to.throw(/cipherPasswords.+ missing/);\n    });","file":"unit/js/AccessTokenEncryptorTests.js","skipped":false,"dir":"libraries/access-token-encryptor/test"},{"name":"should flag short password","suites":["AccessTokenEncryptor","invalid settings"],"updatePoint":{"line":66,"column":34,"index":2356},"line":66,"code":"    it('should flag short password', function () {\n      expect(() => new this.AccessTokenEncryptor({\n        cipherLabel: '2023.1-v3',\n        cipherPasswords: {\n          '2023.1-v3': 'foo'\n        }\n      })).to.throw(/cipherPasswords.+ too short/);\n    });","file":"unit/js/AccessTokenEncryptorTests.js","skipped":false,"dir":"libraries/access-token-encryptor/test"},{"name":"should flag missing version","suites":["AccessTokenEncryptor","invalid settings"],"updatePoint":{"line":74,"column":35,"index":2618},"line":74,"code":"    it('should flag missing version', function () {\n      expect(() => new this.AccessTokenEncryptor({\n        cipherLabel: '2023.1',\n        cipherPasswords: {\n          2023.1: '11111111111111111111111111111111'\n        }\n      })).to.throw(/must contain version suffix/);\n      expect(() => new this.AccessTokenEncryptor({\n        cipherLabel: '2023.1-',\n        cipherPasswords: {\n          '2023.1-': '11111111111111111111111111111111'\n        }\n      })).to.throw(/must contain version suffix/);\n    });","file":"unit/js/AccessTokenEncryptorTests.js","skipped":false,"dir":"libraries/access-token-encryptor/test"},{"name":"should flag invalid version","suites":["AccessTokenEncryptor","invalid settings"],"updatePoint":{"line":88,"column":35,"index":3128},"line":88,"code":"    it('should flag invalid version', function () {\n      expect(() => new this.AccessTokenEncryptor({\n        cipherLabel: '2023.1-v0',\n        cipherPasswords: {\n          '2023.1-v0': '11111111111111111111111111111111'\n        }\n      })).to.throw(/unknown version/);\n    });","file":"unit/js/AccessTokenEncryptorTests.js","skipped":false,"dir":"libraries/access-token-encryptor/test"},{"name":"should flag unknown default scheme","suites":["AccessTokenEncryptor","invalid settings"],"updatePoint":{"line":96,"column":42,"index":3414},"line":96,"code":"    it('should flag unknown default scheme', function () {\n      expect(() => new this.AccessTokenEncryptor({\n        cipherLabel: '2000.1-v3',\n        cipherPasswords: {\n          '2023.1-v3': '11111111111111111111111111111111'\n        }\n      })).to.throw(/unknown default cipherLabel/);\n    });","file":"unit/js/AccessTokenEncryptorTests.js","skipped":false,"dir":"libraries/access-token-encryptor/test"},{"name":"should encrypt the object","suites":["AccessTokenEncryptor","encrypt"],"updatePoint":{"line":106,"column":33,"index":3745},"line":106,"code":"    it('should encrypt the object', function (done) {\n      this.encryptor.encryptJson(this.testObject, (err, encrypted) => {\n        expect(err).to.be.null;\n        encrypted.should.match(/^2023.1-v3:[0-9a-f]{32}:[a-zA-Z0-9=+/]+:[0-9a-f]{32}$/);\n        done();\n      });\n    });","file":"unit/js/AccessTokenEncryptorTests.js","skipped":false,"dir":"libraries/access-token-encryptor/test"},{"name":"should encrypt the object differently the next time","suites":["AccessTokenEncryptor","encrypt"],"updatePoint":{"line":113,"column":59,"index":4052},"line":113,"code":"    it('should encrypt the object differently the next time', function (done) {\n      this.encryptor.encryptJson(this.testObject, (err, encrypted1) => {\n        expect(err).to.be.null;\n        this.encryptor.encryptJson(this.testObject, (err, encrypted2) => {\n          expect(err).to.be.null;\n          encrypted1.should.not.equal(encrypted2);\n          done();\n        });\n      });\n    });","file":"unit/js/AccessTokenEncryptorTests.js","skipped":false,"dir":"libraries/access-token-encryptor/test"},{"name":"should decrypt the string to get the same object","suites":["AccessTokenEncryptor","decrypt"],"updatePoint":{"line":125,"column":56,"index":4484},"line":125,"code":"    it('should decrypt the string to get the same object', function (done) {\n      this.encryptor.encryptJson(this.testObject, (err, encrypted) => {\n        expect(err).to.be.null;\n        this.encryptor.decryptToJson(encrypted, (err, decrypted) => {\n          expect(err).to.be.null;\n          expect(decrypted).to.deep.equal(this.testObject);\n          done();\n        });\n      });\n    });","file":"unit/js/AccessTokenEncryptorTests.js","skipped":false,"dir":"libraries/access-token-encryptor/test"},{"name":"should not be able to decrypt 2015 string","suites":["AccessTokenEncryptor","decrypt"],"updatePoint":{"line":135,"column":49,"index":4870},"line":135,"code":"    it('should not be able to decrypt 2015 string', function (done) {\n      this.encryptor.decryptToJson(this.encrypted2015, (err, decrypted) => {\n        expect(err).to.exist;\n        expect(err.message).to.equal('unknown access-token-encryptor label 2015.1');\n        expect(decrypted).to.not.exist;\n        done();\n      });\n    });","file":"unit/js/AccessTokenEncryptorTests.js","skipped":false,"dir":"libraries/access-token-encryptor/test"},{"name":"should not be able to decrypt a 2016 string","suites":["AccessTokenEncryptor","decrypt"],"updatePoint":{"line":143,"column":51,"index":5208},"line":143,"code":"    it('should not be able to decrypt a 2016 string', function (done) {\n      this.encryptor.decryptToJson(this.encrypted2016, (err, decrypted) => {\n        expect(err).to.exist;\n        expect(err.message).to.equal('unknown access-token-encryptor label 2016.1');\n        expect(decrypted).to.not.exist;\n        done();\n      });\n    });","file":"unit/js/AccessTokenEncryptorTests.js","skipped":false,"dir":"libraries/access-token-encryptor/test"},{"name":"should not be able to decrypt a 2019 string","suites":["AccessTokenEncryptor","decrypt"],"updatePoint":{"line":151,"column":51,"index":5546},"line":151,"code":"    it('should not be able to decrypt a 2019 string', function (done) {\n      this.encryptor.decryptToJson(this.encrypted2019, (err, decrypted) => {\n        expect(err).to.exist;\n        expect(err.message).to.equal('unknown access-token-encryptor label 2019.1');\n        expect(decrypted).to.not.exist;\n        done();\n      });\n    });","file":"unit/js/AccessTokenEncryptorTests.js","skipped":false,"dir":"libraries/access-token-encryptor/test"},{"name":"should decrypt an 2023 string to get the same object","suites":["AccessTokenEncryptor","decrypt"],"updatePoint":{"line":159,"column":60,"index":5893},"line":159,"code":"    it('should decrypt an 2023 string to get the same object', function (done) {\n      this.encryptor.decryptToJson(this.encrypted2023, (err, decrypted) => {\n        expect(err).to.be.null;\n        expect(decrypted).to.deep.equal(this.testObject);\n        done();\n      });\n    });","file":"unit/js/AccessTokenEncryptorTests.js","skipped":false,"dir":"libraries/access-token-encryptor/test"},{"name":"should return an error when decrypting an invalid label","suites":["AccessTokenEncryptor","decrypt"],"updatePoint":{"line":166,"column":63,"index":6178},"line":166,"code":"    it('should return an error when decrypting an invalid label', function (done) {\n      this.encryptor.decryptToJson(this.badLabel, (err, decrypted) => {\n        expect(err).to.be.instanceof(Error);\n        expect(decrypted).to.be.undefined;\n        done();\n      });\n    });","file":"unit/js/AccessTokenEncryptorTests.js","skipped":false,"dir":"libraries/access-token-encryptor/test"},{"name":"should return an error when decrypting an invalid key","suites":["AccessTokenEncryptor","decrypt"],"updatePoint":{"line":173,"column":61,"index":6454},"line":173,"code":"    it('should return an error when decrypting an invalid key', function (done) {\n      this.encryptor.decryptToJson(this.badKey, (err, decrypted) => {\n        expect(err).to.be.instanceof(Error);\n        expect(decrypted).to.be.undefined;\n        done();\n      });\n    });","file":"unit/js/AccessTokenEncryptorTests.js","skipped":false,"dir":"libraries/access-token-encryptor/test"},{"name":"should return an error when decrypting an invalid ciphertext","suites":["AccessTokenEncryptor","decrypt"],"updatePoint":{"line":180,"column":68,"index":6735},"line":180,"code":"    it('should return an error when decrypting an invalid ciphertext', function (done) {\n      this.encryptor.decryptToJson(this.badCipherText, (err, decrypted) => {\n        expect(err).to.be.instanceof(Error);\n        expect(decrypted).to.be.undefined;\n        done();\n      });\n    });","file":"unit/js/AccessTokenEncryptorTests.js","skipped":false,"dir":"libraries/access-token-encryptor/test"},{"name":"checks the file every minute","suites":["LogLevelChecker","FileLogLevelChecker","interval checker"],"updatePoint":{"line":86,"column":38,"index":2588},"line":86,"code":"      it('checks the file every minute', async function () {\n        this.clock.tick(1000);\n        // Yield to the event loop\n        await delay(0);\n        expect(this.logger.level).to.have.been.calledOnceWithExactly(DEFAULT_LEVEL);\n        this.logger.level.reset();\n\n        // Trace until 1.5 minutes in the future\n        const traceUntil = NOW + 90000;\n        this.fs.promises.readFile.resolves(traceUntil.toString());\n        this.clock.tick(61000);\n        await delay(0);\n        expect(this.logger.level).to.have.been.calledOnceWithExactly(TRACE_LEVEL);\n        this.logger.level.reset();\n        this.clock.tick(60000);\n        await delay(0);\n        expect(this.logger.level).to.have.been.calledOnceWithExactly(DEFAULT_LEVEL);\n      });","file":"unit/log-level-checker-tests.js","skipped":false,"dir":"libraries/logger/test"},{"name":"sets the log level to ","suites":["LogLevelChecker","GCEMetadataLogLevelChecker","when the response is a timestamp in the past"],"updatePoint":{"line":158,"column":36,"index":5176},"line":158,"code":"  it(`sets the log level to ${level}`, function () {\n    expect(this.logger.level).to.have.been.calledWith(level);\n  });","file":"unit/log-level-checker-tests.js","skipped":false,"dir":"libraries/logger/test"},{"name":"should default to log level debug","suites":["LoggingManager","initialize","not in production"],"updatePoint":{"line":69,"column":43,"index":2210},"line":69,"code":"      it('should default to log level debug', function () {\n        this.Bunyan.createLogger.firstCall.args[0].streams[0].level.should.equal('debug');\n      });","file":"unit/logging-manager-tests.js","skipped":false,"dir":"libraries/logger/test"},{"name":"should not instantiate a log level checker","suites":["LoggingManager","initialize","not in production"],"updatePoint":{"line":72,"column":52,"index":2380},"line":72,"code":"      it('should not instantiate a log level checker', function () {\n        expect(this.LoggingManager.logLevelChecker).not.to.exist;\n      });","file":"unit/logging-manager-tests.js","skipped":false,"dir":"libraries/logger/test"},{"name":"should default to log level info","suites":["LoggingManager","initialize","in production"],"updatePoint":{"line":84,"column":42,"index":2801},"line":84,"code":"      it('should default to log level info', function () {\n        this.Bunyan.createLogger.firstCall.args[0].streams[0].level.should.equal('info');\n      });","file":"unit/logging-manager-tests.js","skipped":false,"dir":"libraries/logger/test"},{"name":"should set up a file log level checker","suites":["LoggingManager","initialize","in production"],"updatePoint":{"line":87,"column":48,"index":2966},"line":87,"code":"      it('should set up a file log level checker', function () {\n        expect(this.logger.logLevelChecker).to.equal(this.FileLogLevelChecker);\n        expect(this.FileLogLevelChecker.start).to.have.been.called;\n      });","file":"unit/logging-manager-tests.js","skipped":false,"dir":"libraries/logger/test"},{"name":"should use custom log level","suites":["LoggingManager","initialize","when LOG_LEVEL set in env"],"updatePoint":{"line":100,"column":37,"index":3444},"line":100,"code":"      it('should use custom log level', function () {\n        this.Bunyan.createLogger.firstCall.args[0].streams[0].level.should.equal('trace');\n      });","file":"unit/logging-manager-tests.js","skipped":false,"dir":"libraries/logger/test"},{"name":"should log debug","suites":["LoggingManager","bunyan logging"],"updatePoint":{"line":111,"column":24,"index":3747},"line":111,"code":"    it('should log debug', function () {\n      this.logger.debug(this.logArgs);\n      this.bunyanLogger.debug.should.have.been.calledWith(this.logArgs);\n    });","file":"unit/logging-manager-tests.js","skipped":false,"dir":"libraries/logger/test"},{"name":"should log error","suites":["LoggingManager","bunyan logging"],"updatePoint":{"line":115,"column":24,"index":3908},"line":115,"code":"    it('should log error', function () {\n      this.logger.error(this.logArgs);\n      this.bunyanLogger.error.should.have.been.calledWith(this.logArgs);\n    });","file":"unit/logging-manager-tests.js","skipped":false,"dir":"libraries/logger/test"},{"name":"should log fatal","suites":["LoggingManager","bunyan logging"],"updatePoint":{"line":119,"column":24,"index":4069},"line":119,"code":"    it('should log fatal', function () {\n      this.logger.fatal(this.logArgs);\n      this.bunyanLogger.fatal.should.have.been.calledWith(this.logArgs);\n    });","file":"unit/logging-manager-tests.js","skipped":false,"dir":"libraries/logger/test"},{"name":"should log info","suites":["LoggingManager","bunyan logging"],"updatePoint":{"line":123,"column":23,"index":4229},"line":123,"code":"    it('should log info', function () {\n      this.logger.info(this.logArgs);\n      this.bunyanLogger.info.should.have.been.calledWith(this.logArgs);\n    });","file":"unit/logging-manager-tests.js","skipped":false,"dir":"libraries/logger/test"},{"name":"should log warn","suites":["LoggingManager","bunyan logging"],"updatePoint":{"line":127,"column":23,"index":4387},"line":127,"code":"    it('should log warn', function () {\n      this.logger.warn(this.logArgs);\n      this.bunyanLogger.warn.should.have.been.calledWith(this.logArgs);\n    });","file":"unit/logging-manager-tests.js","skipped":false,"dir":"libraries/logger/test"},{"name":"should log err","suites":["LoggingManager","bunyan logging"],"updatePoint":{"line":131,"column":22,"index":4544},"line":131,"code":"    it('should log err', function () {\n      this.logger.err(this.logArgs);\n      this.bunyanLogger.error.should.have.been.calledWith(this.logArgs);\n    });","file":"unit/logging-manager-tests.js","skipped":false,"dir":"libraries/logger/test"},{"name":"should report errors to Sentry","suites":["LoggingManager","logger.error"],"updatePoint":{"line":137,"column":38,"index":4764},"line":137,"code":"    it('should report errors to Sentry', function () {\n      this.logger.error({\n        foo: 'bar'\n      }, 'message');\n      expect(this.SentryManager.captureExceptionRateLimited).to.have.been.called;\n    });","file":"unit/logging-manager-tests.js","skipped":false,"dir":"libraries/logger/test"},{"name":"should include buffered logs in error log and filter out error logs in buffer","suites":["LoggingManager","ringbuffer","when ring buffer size is positive"],"updatePoint":{"line":165,"column":87,"index":5670},"line":165,"code":"      it('should include buffered logs in error log and filter out error logs in buffer', function () {\n        this.bunyanLogger.error.lastCall.args[0].logBuffer.should.deep.equal([{\n          msg: 'log 1'\n        }, {\n          msg: 'log 2'\n        }]);\n      });","file":"unit/logging-manager-tests.js","skipped":false,"dir":"libraries/logger/test"},{"name":"should not include buffered logs in error log","suites":["LoggingManager","ringbuffer","when ring buffer size is zero"],"updatePoint":{"line":182,"column":55,"index":6266},"line":182,"code":"      it('should not include buffered logs in error log', function () {\n        expect(this.bunyanLogger.error.lastCall.args[0].logBuffer).be.undefined;\n      });","file":"unit/logging-manager-tests.js","skipped":false,"dir":"libraries/logger/test"},{"name":"should report a single error to sentry","suites":["SentryManager","captureExceptionRateLimited"],"updatePoint":{"line":26,"column":46,"index":791},"line":26,"code":"    it('should report a single error to sentry', function () {\n      this.sentryManager.captureExceptionRateLimited({\n        foo: 'bar'\n      }, 'message');\n      expect(this.Sentry.captureException).to.have.been.calledOnce;\n    });","file":"unit/sentry-manager-tests.js","skipped":false,"dir":"libraries/logger/test"},{"name":"should report the same error to sentry only once","suites":["SentryManager","captureExceptionRateLimited"],"updatePoint":{"line":32,"column":56,"index":1035},"line":32,"code":"    it('should report the same error to sentry only once', function () {\n      const error1 = new Error('this is the error');\n      this.sentryManager.captureExceptionRateLimited({\n        foo: error1\n      }, 'first message');\n      this.sentryManager.captureExceptionRateLimited({\n        bar: error1\n      }, 'second message');\n      expect(this.Sentry.captureException).to.have.been.calledOnce;\n    });","file":"unit/sentry-manager-tests.js","skipped":false,"dir":"libraries/logger/test"},{"name":"should report two different errors to sentry individually","suites":["SentryManager","captureExceptionRateLimited"],"updatePoint":{"line":42,"column":65,"index":1451},"line":42,"code":"    it('should report two different errors to sentry individually', function () {\n      const error1 = new Error('this is the error');\n      const error2 = new Error('this is the error');\n      this.sentryManager.captureExceptionRateLimited({\n        foo: error1\n      }, 'first message');\n      this.sentryManager.captureExceptionRateLimited({\n        bar: error2\n      }, 'second message');\n      expect(this.Sentry.captureException).to.have.been.calledTwice;\n    });","file":"unit/sentry-manager-tests.js","skipped":false,"dir":"libraries/logger/test"},{"name":"for multiple errors should only report a maximum of 5 errors to sentry","suites":["SentryManager","captureExceptionRateLimited"],"updatePoint":{"line":53,"column":78,"index":1934},"line":53,"code":"    it('for multiple errors should only report a maximum of 5 errors to sentry', function () {\n      for (let i = 0; i < 10; i++) {\n        this.sentryManager.captureExceptionRateLimited({\n          foo: 'bar'\n        }, 'message');\n      }\n      expect(this.Sentry.captureException).to.have.callCount(5);\n    });","file":"unit/sentry-manager-tests.js","skipped":false,"dir":"libraries/logger/test"},{"name":"for multiple errors with a minute delay should report 10 errors to sentry","suites":["SentryManager","captureExceptionRateLimited"],"updatePoint":{"line":61,"column":81,"index":2251},"line":61,"code":"    it('for multiple errors with a minute delay should report 10 errors to sentry', function () {\n      for (let i = 0; i < 10; i++) {\n        this.sentryManager.captureExceptionRateLimited({\n          foo: 'bar'\n        }, 'message');\n      }\n      expect(this.Sentry.captureException).to.have.callCount(5);\n\n      // allow a minute to pass\n      this.clock.tick(61 * 1000);\n      for (let i = 0; i < 10; i++) {\n        this.sentryManager.captureExceptionRateLimited({\n          foo: 'bar'\n        }, 'message');\n      }\n      expect(this.Sentry.captureException).to.have.callCount(10);\n    });","file":"unit/sentry-manager-tests.js","skipped":false,"dir":"libraries/logger/test"},{"name":"should remove the path from fs errors","suites":["SentryManager","captureException"],"updatePoint":{"line":80,"column":45,"index":2862},"line":80,"code":"    it('should remove the path from fs errors', function () {\n      const fsError = new Error(\"Error: ENOENT: no such file or directory, stat '/tmp/3279b8d0-da10-11e8-8255-efd98985942b'\");\n      fsError.path = '/tmp/3279b8d0-da10-11e8-8255-efd98985942b';\n      this.sentryManager.captureException({\n        err: fsError\n      }, 'message', 'error');\n      expect(this.Sentry.captureException).to.have.been.calledWith(sinon.match.has('message', 'Error: ENOENT: no such file or directory, stat'));\n    });","file":"unit/sentry-manager-tests.js","skipped":false,"dir":"libraries/logger/test"},{"name":"should mark the error as reported to sentry","suites":["SentryManager","captureException","reportedToSentry"],"updatePoint":{"line":89,"column":53,"index":3421},"line":89,"code":"      it('should mark the error as reported to sentry', function () {\n        const err = new Error();\n        this.sentryManager.captureException({\n          err\n        }, 'message');\n        expect(this.Sentry.captureException).to.have.been.called;\n        expect(err.reportedToSentry).to.equal(true);\n      });","file":"unit/sentry-manager-tests.js","skipped":false,"dir":"libraries/logger/test"},{"name":"should mark two errors as reported to sentry","suites":["SentryManager","captureException","reportedToSentry"],"updatePoint":{"line":97,"column":54,"index":3737},"line":97,"code":"      it('should mark two errors as reported to sentry', function () {\n        const err1 = new Error();\n        const err2 = new Error();\n        this.sentryManager.captureException({\n          err: err1,\n          err2\n        }, 'message');\n        expect(this.Sentry.captureException).to.have.been.called;\n        expect(err1.reportedToSentry).to.equal(true);\n        expect(err2.reportedToSentry).to.equal(true);\n      });","file":"unit/sentry-manager-tests.js","skipped":false,"dir":"libraries/logger/test"},{"name":"should not mark arbitrary objects as reported to sentry","suites":["SentryManager","captureException","reportedToSentry"],"updatePoint":{"line":108,"column":65,"index":4176},"line":108,"code":"      it('should not mark arbitrary objects as reported to sentry', function () {\n        const err = new Error();\n        const ctx = {\n          foo: 'bar'\n        };\n        this.sentryManager.captureException({\n          err,\n          ctx\n        }, 'message');\n        expect(this.Sentry.captureException).to.have.been.called;\n        expect(ctx.reportedToSentry).not.to.exist;\n      });","file":"unit/sentry-manager-tests.js","skipped":false,"dir":"libraries/logger/test"},{"name":"increments the process_startup counter","suites":["Metrics module","at startup"],"updatePoint":{"line":18,"column":46,"index":457},"line":18,"code":"    it('increments the process_startup counter', async function () {\n      await expectMetricValue('process_startup', 1);\n    });","file":"acceptance/metrics_tests.js","skipped":false,"dir":"libraries/metrics/test"},{"name":"collects default metrics","suites":["Metrics module","at startup"],"updatePoint":{"line":21,"column":32,"index":573},"line":21,"code":"    it('collects default metrics', async function () {\n      const metric = await getMetric('process_cpu_user_seconds_total');\n      expect(metric).to.exist;\n    });","file":"acceptance/metrics_tests.js","skipped":false,"dir":"libraries/metrics/test"},{"name":"increments counts by 1","suites":["Metrics module","inc()"],"updatePoint":{"line":27,"column":30,"index":777},"line":27,"code":"    it('increments counts by 1', async function () {\n      Metrics.inc('duck_count');\n      await expectMetricValue('duck_count', 1);\n      Metrics.inc('duck_count');\n      Metrics.inc('duck_count');\n      await expectMetricValue('duck_count', 3);\n    });","file":"acceptance/metrics_tests.js","skipped":false,"dir":"libraries/metrics/test"},{"name":"escapes special characters in the key","suites":["Metrics module","inc()"],"updatePoint":{"line":34,"column":45,"index":1048},"line":34,"code":"    it('escapes special characters in the key', async function () {\n      Metrics.inc('show.me the $!!');\n      await expectMetricValue('show_me_the____', 1);\n    });","file":"acceptance/metrics_tests.js","skipped":false,"dir":"libraries/metrics/test"},{"name":"increments counts by the given count","suites":["Metrics module","count()"],"updatePoint":{"line":40,"column":44,"index":1256},"line":40,"code":"    it('increments counts by the given count', async function () {\n      Metrics.count('rabbit_count', 5);\n      await expectMetricValue('rabbit_count', 5);\n      Metrics.count('rabbit_count', 6);\n      Metrics.count('rabbit_count', 7);\n      await expectMetricValue('rabbit_count', 18);\n    });","file":"acceptance/metrics_tests.js","skipped":false,"dir":"libraries/metrics/test"},{"name":"collects observations","suites":["Metrics module","summary()"],"updatePoint":{"line":49,"column":29,"index":1581},"line":49,"code":"    it('collects observations', async function () {\n      Metrics.summary('oven_temp', 200);\n      Metrics.summary('oven_temp', 300);\n      Metrics.summary('oven_temp', 450);\n      const sum = await getSummarySum('oven_temp');\n      expect(sum).to.equal(950);\n    });","file":"acceptance/metrics_tests.js","skipped":false,"dir":"libraries/metrics/test"},{"name":"collects timings","suites":["Metrics module","timing()"],"updatePoint":{"line":58,"column":24,"index":1887},"line":58,"code":"    it('collects timings', async function () {\n      Metrics.timing('sprint_100m', 10);\n      Metrics.timing('sprint_100m', 20);\n      Metrics.timing('sprint_100m', 30);\n      const sum = await getSummarySum('timer_sprint_100m');\n      expect(sum).to.equal(60);\n    });","file":"acceptance/metrics_tests.js","skipped":false,"dir":"libraries/metrics/test"},{"name":"collects in buckets","suites":["Metrics module","histogram()"],"updatePoint":{"line":67,"column":27,"index":2206},"line":67,"code":"    it('collects in buckets', async function () {\n      const buckets = [10, 100, 1000];\n      Metrics.histogram('distance', 10, buckets);\n      Metrics.histogram('distance', 20, buckets);\n      Metrics.histogram('distance', 100, buckets);\n      Metrics.histogram('distance', 200, buckets);\n      Metrics.histogram('distance', 1000, buckets);\n      Metrics.histogram('distance', 2000, buckets);\n      const sum = await getSummarySum('histogram_distance');\n      expect(sum).to.equal(3330);\n      await checkHistogramValues('histogram_distance', {\n        10: 1,\n        100: 3,\n        1000: 5,\n        '+Inf': 6\n      });\n    });","file":"acceptance/metrics_tests.js","skipped":false,"dir":"libraries/metrics/test"},{"name":"with buckets","suites":["Metrics module","Timer"],"updatePoint":{"line":96,"column":20,"index":3277},"line":96,"code":"    it('with buckets', async function () {\n      await checkHistogramValues('histogram_height', {\n        10: 3,\n        100: 6,\n        1000: 9,\n        '+Inf': 9\n      });\n    });","file":"acceptance/metrics_tests.js","skipped":false,"dir":"libraries/metrics/test"},{"name":"without buckets","suites":["Metrics module","Timer"],"updatePoint":{"line":104,"column":23,"index":3462},"line":104,"code":"    it('without buckets', async function () {\n      await checkSummaryValues('timer_depth', {\n        0.01: 1,\n        0.05: 1,\n        0.5: 15,\n        0.9: 105,\n        0.95: 105,\n        0.99: 105,\n        0.999: 105\n      });\n    });","file":"acceptance/metrics_tests.js","skipped":false,"dir":"libraries/metrics/test"},{"name":"records values","suites":["Metrics module","gauge()"],"updatePoint":{"line":117,"column":22,"index":3741},"line":117,"code":"    it('records values', async function () {\n      Metrics.gauge('water_level', 1.5);\n      await expectMetricValue('water_level', 1.5);\n      Metrics.gauge('water_level', 4.2);\n      await expectMetricValue('water_level', 4.2);\n    });","file":"acceptance/metrics_tests.js","skipped":false,"dir":"libraries/metrics/test"},{"name":"records values without a host label","suites":["Metrics module","globalGauge()"],"updatePoint":{"line":125,"column":43,"index":4047},"line":125,"code":"    it('records values without a host label', async function () {\n      Metrics.globalGauge('tire_pressure', 99.99);\n      const {\n        value,\n        labels\n      } = await getMetricValue('tire_pressure');\n      expect(value).to.equal(99.99);\n      expect(labels.host).to.equal('global');\n      expect(labels.app).to.equal(APP_NAME);\n    });","file":"acceptance/metrics_tests.js","skipped":false,"dir":"libraries/metrics/test"},{"name":"emits no open_connections","suites":["Metrics module","open_sockets","gaugeOpenSockets()","without pending connections"],"updatePoint":{"line":183,"column":37,"index":6050},"line":183,"code":"        it('emits no open_connections', async function () {\n          await expectNoMetricValue(keyServer1);\n          await expectNoMetricValue(keyServer2);\n        });","file":"acceptance/metrics_tests.js","skipped":false,"dir":"libraries/metrics/test"},{"name":"emits 2 open_connections for server1","suites":["Metrics module","open_sockets","gaugeOpenSockets()","with pending connections for server1"],"updatePoint":{"line":194,"column":48,"index":6451},"line":194,"code":"        it('emits 2 open_connections for server1', async function () {\n          await expectMetricValue(keyServer1, 2);\n        });","file":"acceptance/metrics_tests.js","skipped":false,"dir":"libraries/metrics/test"},{"name":"emits no open_connections for server2","suites":["Metrics module","open_sockets","gaugeOpenSockets()","with pending connections for server1"],"updatePoint":{"line":197,"column":49,"index":6585},"line":197,"code":"        it('emits no open_connections for server2', async function () {\n          await expectNoMetricValue(keyServer2);\n        });","file":"acceptance/metrics_tests.js","skipped":false,"dir":"libraries/metrics/test"},{"name":"emits 2 open_connections for server1","suites":["Metrics module","open_sockets","gaugeOpenSockets()","with pending connections for server1 and server2"],"updatePoint":{"line":207,"column":48,"index":6949},"line":207,"code":"        it('emits 2 open_connections for server1', async function () {\n          await expectMetricValue(keyServer1, 2);\n        });","file":"acceptance/metrics_tests.js","skipped":false,"dir":"libraries/metrics/test"},{"name":"emits 2 open_connections for server2","suites":["Metrics module","open_sockets","gaugeOpenSockets()","with pending connections for server1 and server2"],"updatePoint":{"line":210,"column":48,"index":7082},"line":210,"code":"        it('emits 2 open_connections for server2', async function () {\n          await expectMetricValue(keyServer2, 2);\n        });","file":"acceptance/metrics_tests.js","skipped":false,"dir":"libraries/metrics/test"},{"name":"emits 1 open_connections for server1","suites":["Metrics module","open_sockets","gaugeOpenSockets()","when requests finish for server1"],"updatePoint":{"line":221,"column":48,"index":7452},"line":221,"code":"        it('emits 1 open_connections for server1', async function () {\n          await expectMetricValue(keyServer1, 1);\n        });","file":"acceptance/metrics_tests.js","skipped":false,"dir":"libraries/metrics/test"},{"name":"emits 2 open_connections for server2","suites":["Metrics module","open_sockets","gaugeOpenSockets()","when requests finish for server1"],"updatePoint":{"line":224,"column":48,"index":7585},"line":224,"code":"        it('emits 2 open_connections for server2', async function () {\n          await expectMetricValue(keyServer2, 2);\n        });","file":"acceptance/metrics_tests.js","skipped":false,"dir":"libraries/metrics/test"},{"name":"emits no open_connections","suites":["Metrics module","open_sockets","gaugeOpenSockets()","when all requests complete"],"updatePoint":{"line":234,"column":37,"index":7895},"line":234,"code":"        it('emits no open_connections', async function () {\n          await expectNoMetricValue(keyServer1);\n          await expectNoMetricValue(keyServer2);\n        });","file":"acceptance/metrics_tests.js","skipped":false,"dir":"libraries/metrics/test"},{"name":"should register a destructor with metrics","suites":["event_loop","with a logger provided"],"updatePoint":{"line":33,"column":56,"index":974},"line":33,"code":"    return it('should register a destructor with metrics', function () {\n      return expect(this.metrics.registerDestructor.called).to.equal(true);\n    });","file":"unit/js/event_loop.js","skipped":false,"dir":"libraries/metrics/test"},{"name":"should throw an exception","suites":["event_loop","without a logger provided"],"updatePoint":{"line":38,"column":40,"index":1182},"line":38,"code":"    return it('should throw an exception', function () {\n      return expect(this.event_loop.monitor).to.throw('logger is undefined');\n    });","file":"unit/js/event_loop.js","skipped":false,"dir":"libraries/metrics/test"},{"name":"logs the request at the DEBUG level","suites":["http.monitor","with the default options","after a simple request"],"updatePoint":{"line":49,"column":45,"index":1341},"line":49,"code":"      it('logs the request at the DEBUG level', function () {\n        sinon.assert.calledWith(this.logger.debug, {\n          req: this.req,\n          res: this.res,\n          responseTimeMs: 500\n        }, '%s %s', this.req.method, this.req.url);\n      });","file":"unit/js/http.js","skipped":false,"dir":"libraries/metrics/test"},{"name":"doesn't log the request","suites":["http.monitor","with the default options","when logging is disabled"],"updatePoint":{"line":64,"column":33,"index":1820},"line":64,"code":"      it(\"doesn't log the request\", function () {\n        sinon.assert.notCalled(this.logger.debug);\n      });","file":"unit/js/http.js","skipped":false,"dir":"libraries/metrics/test"},{"name":"logs the request with the custom log fields","suites":["http.monitor","with the default options","with custom log fields"],"updatePoint":{"line":76,"column":53,"index":2173},"line":76,"code":"      it('logs the request with the custom log fields', function () {\n        sinon.assert.calledWith(this.logger.debug, {\n          req: this.req,\n          res: this.res,\n          responseTimeMs: 500,\n          a: 1,\n          b: 2\n        }, '%s %s', this.req.method, this.req.url);\n      });","file":"unit/js/http.js","skipped":false,"dir":"libraries/metrics/test"},{"name":"logs the request at the custom level","suites":["http.monitor","with the default options","when setting the log level"],"updatePoint":{"line":91,"column":46,"index":2651},"line":91,"code":"      it('logs the request at the custom level', function () {\n        sinon.assert.calledWith(this.logger.warn, {\n          req: this.req,\n          res: this.res,\n          responseTimeMs: 500\n        }, '%s %s', this.req.method, this.req.url);\n      });","file":"unit/js/http.js","skipped":false,"dir":"libraries/metrics/test"},{"name":"logs the request at that level","suites":["http.monitor","with a different default log level"],"updatePoint":{"line":105,"column":38,"index":3130},"line":105,"code":"    it('logs the request at that level', function () {\n      sinon.assert.calledWith(this.logger.info, {\n        req: this.req,\n        res: this.res,\n        responseTimeMs: 500\n      }, '%s %s', this.req.method, this.req.url);\n    });","file":"unit/js/http.js","skipped":false,"dir":"libraries/metrics/test"},{"name":"calls the original res.end()","suites":["http.monitor","with a different default log level"],"updatePoint":{"line":121,"column":34,"index":3543},"line":121,"code":"  it('calls the original res.end()', function () {\n    sinon.assert.calledWith(this.originalResponseEnd, this.data);\n  });","file":"unit/js/http.js","skipped":false,"dir":"libraries/metrics/test"},{"name":"records the response time","suites":["http.monitor","with a different default log level"],"updatePoint":{"line":126,"column":31,"index":3692},"line":126,"code":"  it('records the response time', function () {\n    sinon.assert.calledWith(this.Metrics.timing, 'http_request', 500, null, {\n      method: this.req.method,\n      status_code: this.res.status_code,\n      path: 'project_id_cleanup'\n    });\n  });","file":"unit/js/http.js","skipped":false,"dir":"libraries/metrics/test"},{"name":"records the request size","suites":["http.monitor","with a different default log level"],"updatePoint":{"line":133,"column":30,"index":3936},"line":133,"code":"  it('records the request size', function () {\n    sinon.assert.calledWith(this.Metrics.summary, 'http_request_size_bytes', 123, {\n      method: this.req.method,\n      status_code: this.res.status_code,\n      path: 'project_id_cleanup'\n    });\n  });","file":"unit/js/http.js","skipped":false,"dir":"libraries/metrics/test"},{"name":"handles an unconnected client","suites":["mongodb"],"updatePoint":{"line":30,"column":35,"index":614},"line":30,"code":"  it('handles an unconnected client', async function () {\n    const mongoClient = {};\n    Metrics.mongodb.monitor(mongoClient);\n    const metrics = await getMetrics();\n    expect(metrics).to.deep.equal({});\n  });","file":"unit/js/mongodb.js","skipped":false,"dir":"libraries/metrics/test"},{"name":"collects Mongo metrics","suites":["mongodb"],"updatePoint":{"line":36,"column":28,"index":820},"line":36,"code":"  it('collects Mongo metrics', async function () {\n    Metrics.mongodb.monitor(this.mongoClient);\n    const metrics = await getMetrics();\n    expect(metrics).to.deep.equal({\n      'mongo_connection_pool_max:server1': 10,\n      'mongo_connection_pool_size:server1': 8,\n      'mongo_connection_pool_available:server1': 2,\n      'mongo_connection_pool_waiting:server1': 4\n    });\n  });","file":"unit/js/mongodb.js","skipped":false,"dir":"libraries/metrics/test"},{"name":"handles topology changes","suites":["mongodb"],"updatePoint":{"line":46,"column":30,"index":1205},"line":46,"code":"  it('handles topology changes', async function () {\n    Metrics.mongodb.monitor(this.mongoClient);\n    let metrics = await getMetrics();\n    expect(metrics).to.deep.equal({\n      'mongo_connection_pool_max:server1': 10,\n      'mongo_connection_pool_size:server1': 8,\n      'mongo_connection_pool_available:server1': 2,\n      'mongo_connection_pool_waiting:server1': 4\n    });\n\n    // Add a server\n    this.servers.set('server2', this.servers.get('server1'));\n    metrics = await getMetrics();\n    expect(metrics).to.deep.equal({\n      'mongo_connection_pool_max:server1': 10,\n      'mongo_connection_pool_size:server1': 8,\n      'mongo_connection_pool_available:server1': 2,\n      'mongo_connection_pool_waiting:server1': 4,\n      'mongo_connection_pool_max:server2': 10,\n      'mongo_connection_pool_size:server2': 8,\n      'mongo_connection_pool_available:server2': 2,\n      'mongo_connection_pool_waiting:server2': 4\n    });\n\n    // Delete a server\n    this.servers.delete('server1');\n    metrics = await getMetrics();\n    expect(metrics).to.deep.equal({\n      'mongo_connection_pool_max:server2': 10,\n      'mongo_connection_pool_size:server2': 8,\n      'mongo_connection_pool_available:server2': 2,\n      'mongo_connection_pool_waiting:server2': 4\n    });\n\n    // Delete another server\n    this.servers.delete('server2');\n    metrics = await getMetrics();\n    expect(metrics).to.deep.equal({});\n  });","file":"unit/js/mongodb.js","skipped":false,"dir":"libraries/metrics/test"},{"name":"should have the testObject behave correctly before wrapping","suites":["timeAsyncMethod"],"updatePoint":{"line":36,"column":65,"index":1106},"line":36,"code":"  it('should have the testObject behave correctly before wrapping', function (done) {\n    return this.testObject.nextNumber(2, (err, result) => {\n      expect(err).to.not.exist;\n      expect(result).to.equal(3);\n      return done();\n    });\n  });","file":"unit/js/timeAsyncMethodTests.js","skipped":false,"dir":"libraries/metrics/test"},{"name":"should wrap method without error","suites":["timeAsyncMethod"],"updatePoint":{"line":43,"column":38,"index":1326},"line":43,"code":"  it('should wrap method without error', function (done) {\n    this.timeAsyncMethod(this.testObject, 'nextNumber', 'someContext.TestObject');\n    return done();\n  });","file":"unit/js/timeAsyncMethodTests.js","skipped":false,"dir":"libraries/metrics/test"},{"name":"should transparently wrap method invocation in timer","suites":["timeAsyncMethod"],"updatePoint":{"line":47,"column":58,"index":1513},"line":47,"code":"  it('should transparently wrap method invocation in timer', function (done) {\n    this.timeAsyncMethod(this.testObject, 'nextNumber', 'someContext.TestObject');\n    return this.testObject.nextNumber(2, (err, result) => {\n      expect(err).to.not.exist;\n      expect(result).to.equal(3);\n      expect(this.TimerConstructor.callCount).to.equal(1);\n      expect(this.Timer.done.callCount).to.equal(1);\n      return done();\n    });\n  });","file":"unit/js/timeAsyncMethodTests.js","skipped":false,"dir":"libraries/metrics/test"},{"name":"should increment success count","suites":["timeAsyncMethod"],"updatePoint":{"line":57,"column":36,"index":1926},"line":57,"code":"  it('should increment success count', function (done) {\n    this.metrics.inc = sinon.stub();\n    this.timeAsyncMethod(this.testObject, 'nextNumber', 'someContext.TestObject');\n    return this.testObject.nextNumber(2, (err, result) => {\n      if (err) {\n        return done(err);\n      }\n      expect(this.metrics.inc.callCount).to.equal(1);\n      expect(this.metrics.inc.calledWith('someContext_result', 1, {\n        method: 'TestObject_nextNumber',\n        status: 'success'\n      })).to.equal(true);\n      return done();\n    });\n  });","file":"unit/js/timeAsyncMethodTests.js","skipped":false,"dir":"libraries/metrics/test"},{"name":"should propagate the error transparently","suites":["timeAsyncMethod","when base method produces an error"],"updatePoint":{"line":79,"column":48,"index":2759},"line":79,"code":"    it('should propagate the error transparently', function (done) {\n      this.timeAsyncMethod(this.testObject, 'nextNumber', 'someContext.TestObject');\n      return this.testObject.nextNumber(2, (err, result) => {\n        expect(err).to.exist;\n        expect(err).to.be.instanceof(Error);\n        expect(result).to.not.exist;\n        return done();\n      });\n    });","file":"unit/js/timeAsyncMethodTests.js","skipped":false,"dir":"libraries/metrics/test"},{"name":"should increment failure count","suites":["timeAsyncMethod","when base method produces an error"],"updatePoint":{"line":88,"column":45,"index":3125},"line":88,"code":"    return it('should increment failure count', function (done) {\n      this.timeAsyncMethod(this.testObject, 'nextNumber', 'someContext.TestObject');\n      return this.testObject.nextNumber(2, (err, result) => {\n        expect(err).to.exist;\n        expect(this.metrics.inc.callCount).to.equal(1);\n        expect(this.metrics.inc.calledWith('someContext_result', 1, {\n          method: 'TestObject_nextNumber',\n          status: 'failed'\n        })).to.equal(true);\n        return done();\n      });\n    });","file":"unit/js/timeAsyncMethodTests.js","skipped":false,"dir":"libraries/metrics/test"},{"name":"should also call logger.debug","suites":["timeAsyncMethod","when a logger is supplied"],"updatePoint":{"line":108,"column":44,"index":3822},"line":108,"code":"    return it('should also call logger.debug', function (done) {\n      this.timeAsyncMethod(this.testObject, 'nextNumber', 'someContext.TestObject', this.logger);\n      return this.testObject.nextNumber(2, (err, result) => {\n        expect(err).to.not.exist;\n        expect(result).to.equal(3);\n        expect(this.TimerConstructor.callCount).to.equal(1);\n        expect(this.Timer.done.callCount).to.equal(1);\n        expect(this.logger.debug.callCount).to.equal(1);\n        return done();\n      });\n    });","file":"unit/js/timeAsyncMethodTests.js","skipped":false,"dir":"libraries/metrics/test"},{"name":"should raise an error","suites":["timeAsyncMethod","when the wrapper cannot be applied"],"updatePoint":{"line":122,"column":36,"index":4424},"line":122,"code":"    return it('should raise an error', function () {\n      const badWrap = () => {\n        return this.timeAsyncMethod(this.testObject, 'DEFINITELY_NOT_A_REAL_METHOD', 'someContext.TestObject');\n      };\n      return expect(badWrap).to.throw(/^.*expected object property 'DEFINITELY_NOT_A_REAL_METHOD' to be a function.*$/);\n    });","file":"unit/js/timeAsyncMethodTests.js","skipped":false,"dir":"libraries/metrics/test"},{"name":"should not throw an error","suites":["timeAsyncMethod","when the wrapped function is not using a callback"],"updatePoint":{"line":134,"column":33,"index":4991},"line":134,"code":"    it('should not throw an error', function () {\n      this.timeAsyncMethod(this.testObject, 'nextNumber', 'someContext.TestObject');\n      const badCall = () => {\n        return this.testObject.nextNumber(2);\n      };\n      return expect(badCall).to.not.throw(Error);\n    });","file":"unit/js/timeAsyncMethodTests.js","skipped":false,"dir":"libraries/metrics/test"},{"name":"should call the underlying method","suites":["timeAsyncMethod","when the wrapped function is not using a callback"],"updatePoint":{"line":141,"column":48,"index":5284},"line":141,"code":"    return it('should call the underlying method', function () {\n      this.timeAsyncMethod(this.testObject, 'nextNumber', 'someContext.TestObject');\n      const result = this.testObject.nextNumber(12);\n      expect(this.realMethod.callCount).to.equal(1);\n      expect(this.realMethod.calledWith(12)).to.equal(true);\n      return expect(result).to.equal(42);\n    });","file":"unit/js/timeAsyncMethodTests.js","skipped":false,"dir":"libraries/metrics/test"},{"name":"tags errors thrown from an async function","suites":["utils","OError.tag"],"updatePoint":{"line":14,"column":49,"index":322},"line":14,"code":"    it('tags errors thrown from an async function', async function () {\n      const delay = promisify(setTimeout);\n      async function foo() {\n        await delay(10);\n        throw new Error('foo error');\n      }\n      async function bar() {\n        try {\n          await foo();\n        } catch (error) {\n          throw OError.tag(error, 'failed to bar', {\n            bar: 'baz'\n          });\n        }\n      }\n      async function baz() {\n        try {\n          await bar();\n        } catch (error) {\n          throw OError.tag(error, 'failed to baz', {\n            baz: 'bat'\n          });\n        }\n      }\n      try {\n        await baz();\n        expect.fail('should have thrown');\n      } catch (error) {\n        expectError(error, {\n          name: 'Error',\n          klass: Error,\n          message: 'Error: foo error',\n          firstFrameRx: /at foo/\n        });\n        expectFullStackWithoutStackFramesToEqual(error, ['Error: foo error', 'TaggedError: failed to bar', 'TaggedError: failed to baz']);\n        expect(OError.getFullInfo(error)).to.eql({\n          bar: 'baz',\n          baz: 'bat'\n        });\n      }\n    });","file":"o-error-util.test.js","skipped":false,"dir":"libraries/o-error/test"},{"name":"tags errors thrown from a promise rejection","suites":["utils","OError.tag"],"updatePoint":{"line":55,"column":51,"index":1462},"line":55,"code":"    it('tags errors thrown from a promise rejection', async function () {\n      function foo() {\n        return new Promise((resolve, reject) => {\n          setTimeout(() => {\n            reject(new Error('foo error'));\n          }, 10);\n        });\n      }\n      async function bar() {\n        try {\n          await foo();\n        } catch (error) {\n          throw OError.tag(error, 'failed to bar', {\n            bar: 'baz'\n          });\n        }\n      }\n      async function baz() {\n        try {\n          await bar();\n        } catch (error) {\n          throw OError.tag(error, 'failed to baz', {\n            baz: 'bat'\n          });\n        }\n      }\n      try {\n        await baz();\n        expect.fail('should have thrown');\n      } catch (error) {\n        expectError(error, {\n          name: 'Error',\n          klass: Error,\n          message: 'Error: foo error',\n          firstFrameRx: /_onTimeout/\n        });\n        expectFullStackWithoutStackFramesToEqual(error, ['Error: foo error', 'TaggedError: failed to bar', 'TaggedError: failed to baz']);\n        expect(OError.getFullInfo(error)).to.eql({\n          bar: 'baz',\n          baz: 'bat'\n        });\n      }\n    });","file":"o-error-util.test.js","skipped":false,"dir":"libraries/o-error/test"},{"name":"tags errors yielded through callbacks","suites":["utils","OError.tag"],"updatePoint":{"line":98,"column":45,"index":2641},"line":98,"code":"    it('tags errors yielded through callbacks', function (done) {\n      function foo(cb) {\n        setTimeout(() => {\n          cb(new Error('foo error'));\n        }, 10);\n      }\n      function bar(cb) {\n        foo(err => {\n          if (err) {\n            return cb(OError.tag(err, 'failed to bar', {\n              bar: 'baz'\n            }));\n          }\n          cb();\n        });\n      }\n      function baz(cb) {\n        bar(err => {\n          if (err) {\n            return cb(OError.tag(err, 'failed to baz', {\n              baz: 'bat'\n            }));\n          }\n          cb();\n        });\n      }\n      baz(err => {\n        if (err) {\n          expectError(err, {\n            name: 'Error',\n            klass: Error,\n            message: 'Error: foo error',\n            firstFrameRx: /_onTimeout/\n          });\n          expectFullStackWithoutStackFramesToEqual(err, ['Error: foo error', 'TaggedError: failed to bar', 'TaggedError: failed to baz']);\n          expect(OError.getFullInfo(err)).to.eql({\n            bar: 'baz',\n            baz: 'bat'\n          });\n          return done();\n        }\n        expect.fail('should have yielded an error');\n      });\n    });","file":"o-error-util.test.js","skipped":false,"dir":"libraries/o-error/test"},{"name":"is not included in the stack trace if using capture","suites":["utils","OError.tag"],"updatePoint":{"line":142,"column":59,"index":3834},"line":142,"code":"    it('is not included in the stack trace if using capture', function () {\n      if (!Error.captureStackTrace) return this.skip();\n      const err = new Error('test error');\n      OError.tag(err, 'test message');\n      const stack = OError.getFullStack(err);\n      expect(stack).to.match(/TaggedError: test message\\n\\s+at/);\n      expect(stack).to.not.match(/TaggedError: test message\\n\\s+at [\\w.]*tag/);\n    });","file":"o-error-util.test.js","skipped":false,"dir":"libraries/o-error/test"},{"name":"still captures a stack trace, albeit including itself","suites":["utils","OError.tag","without Error.captureStackTrace"],"updatePoint":{"line":159,"column":63,"index":4617},"line":159,"code":"      it('still captures a stack trace, albeit including itself', function () {\n        const err = new Error('test error');\n        OError.tag(err, 'test message');\n        expectFullStackWithoutStackFramesToEqual(err, ['Error: test error', 'TaggedError: test message']);\n        const stack = OError.getFullStack(err);\n        expect(stack).to.match(/TaggedError: test message\\n\\s+at [\\w.]*tag/);\n      });","file":"o-error-util.test.js","skipped":false,"dir":"libraries/o-error/test"},{"name":"should not tag more than that","suites":["utils","OError.tag","with limit on the number of tags"],"updatePoint":{"line":175,"column":39,"index":5268},"line":175,"code":"      it('should not tag more than that', function () {\n        const err = new Error('test error');\n        OError.tag(err, 'test message 1');\n        OError.tag(err, 'test message 2');\n        OError.tag(err, 'test message 3');\n        OError.tag(err, 'test message 4');\n        OError.tag(err, 'test message 5');\n        expectFullStackWithoutStackFramesToEqual(err, ['Error: test error', 'TaggedError: test message 1', 'TaggedError: ... dropped tags', 'TaggedError: test message 4', 'TaggedError: test message 5']);\n      });","file":"o-error-util.test.js","skipped":false,"dir":"libraries/o-error/test"},{"name":"should handle deep recursion","suites":["utils","OError.tag","with limit on the number of tags"],"updatePoint":{"line":184,"column":38,"index":5797},"line":184,"code":"      it('should handle deep recursion', async function () {\n        async function recursiveAdd(n) {\n          try {\n            if (n === 0) throw new Error('deep error');\n            const result = await recursiveAdd(n - 1);\n            return result + 1;\n          } catch (err) {\n            throw OError.tag(err, `at level ${n}`);\n          }\n        }\n        try {\n          await recursiveAdd(10);\n        } catch (err) {\n          expectFullStackWithoutStackFramesToEqual(err, ['Error: deep error', 'TaggedError: at level 0', 'TaggedError: ... dropped tags', 'TaggedError: at level 9', 'TaggedError: at level 10']);\n        }\n      });","file":"o-error-util.test.js","skipped":false,"dir":"libraries/o-error/test"},{"name":"should handle a singleton error","suites":["utils","OError.tag","with limit on the number of tags"],"updatePoint":{"line":200,"column":41,"index":6446},"line":200,"code":"      it('should handle a singleton error', function (done) {\n        const err = new Error('singleton error');\n        function endpoint(callback) {\n          helper(err => callback(err && OError.tag(err, 'in endpoint')));\n        }\n        function helper(callback) {\n          libraryFunction(err => callback(err && OError.tag(err, 'in helper')));\n        }\n        function libraryFunction(callback) {\n          callback(err);\n        }\n        endpoint(() => {\n          endpoint(err => {\n            expect(err).to.exist;\n            expectFullStackWithoutStackFramesToEqual(err, ['Error: singleton error', 'TaggedError: in helper', 'TaggedError: ... dropped tags', 'TaggedError: in helper', 'TaggedError: in endpoint']);\n            done();\n          });\n        });\n      });","file":"o-error-util.test.js","skipped":false,"dir":"libraries/o-error/test"},{"name":"works when given null","suites":["utils","OError.getFullInfo"],"updatePoint":{"line":222,"column":29,"index":7279},"line":222,"code":"    it('works when given null', function () {\n      expect(OError.getFullInfo(null)).to.deep.equal({});\n    });","file":"o-error-util.test.js","skipped":false,"dir":"libraries/o-error/test"},{"name":"works on a normal error","suites":["utils","OError.getFullInfo"],"updatePoint":{"line":225,"column":31,"index":7393},"line":225,"code":"    it('works on a normal error', function () {\n      const err = new Error('foo');\n      expect(OError.getFullInfo(err)).to.deep.equal({});\n    });","file":"o-error-util.test.js","skipped":false,"dir":"libraries/o-error/test"},{"name":"works on an error with tags","suites":["utils","OError.getFullInfo"],"updatePoint":{"line":229,"column":35,"index":7546},"line":229,"code":"    it('works on an error with tags', function () {\n      const err = OError.tag(new Error('foo'), 'bar', {\n        userId: 123\n      });\n      expect(OError.getFullInfo(err)).to.deep.equal({\n        userId: 123\n      });\n    });","file":"o-error-util.test.js","skipped":false,"dir":"libraries/o-error/test"},{"name":"merges info from an error and its tags","suites":["utils","OError.getFullInfo"],"updatePoint":{"line":237,"column":46,"index":7787},"line":237,"code":"    it('merges info from an error and its tags', function () {\n      const err = new OError('foo').withInfo({\n        projectId: 456\n      });\n      OError.tag(err, 'failed to foo', {\n        userId: 123\n      });\n      expect(OError.getFullInfo(err)).to.deep.equal({\n        projectId: 456,\n        userId: 123\n      });\n    });","file":"o-error-util.test.js","skipped":false,"dir":"libraries/o-error/test"},{"name":"merges info from a cause","suites":["utils","OError.getFullInfo"],"updatePoint":{"line":249,"column":32,"index":8103},"line":249,"code":"    it('merges info from a cause', function () {\n      const err1 = new Error('foo');\n      const err2 = new Error('bar');\n      err1.cause = err2;\n      err2.info = {\n        userId: 123\n      };\n      expect(OError.getFullInfo(err1)).to.deep.equal({\n        userId: 123\n      });\n    });","file":"o-error-util.test.js","skipped":false,"dir":"libraries/o-error/test"},{"name":"merges info from a nested cause","suites":["utils","OError.getFullInfo"],"updatePoint":{"line":260,"column":39,"index":8400},"line":260,"code":"    it('merges info from a nested cause', function () {\n      const err1 = new Error('foo');\n      const err2 = new Error('bar');\n      const err3 = new Error('baz');\n      err1.cause = err2;\n      err2.info = {\n        userId: 123\n      };\n      err2.cause = err3;\n      err3.info = {\n        foo: 42\n      };\n      expect(OError.getFullInfo(err1)).to.deep.equal({\n        userId: 123,\n        foo: 42\n      });\n    });","file":"o-error-util.test.js","skipped":false,"dir":"libraries/o-error/test"},{"name":"merges info from cause with duplicate keys","suites":["utils","OError.getFullInfo"],"updatePoint":{"line":277,"column":50,"index":8832},"line":277,"code":"    it('merges info from cause with duplicate keys', function () {\n      const err1 = new Error('foo');\n      const err2 = new Error('bar');\n      err1.info = {\n        userId: 42,\n        foo: 1337\n      };\n      err1.cause = err2;\n      err2.info = {\n        userId: 1\n      };\n      expect(OError.getFullInfo(err1)).to.deep.equal({\n        userId: 42,\n        foo: 1337\n      });\n    });","file":"o-error-util.test.js","skipped":false,"dir":"libraries/o-error/test"},{"name":"merges info from tags with duplicate keys","suites":["utils","OError.getFullInfo"],"updatePoint":{"line":293,"column":49,"index":9222},"line":293,"code":"    it('merges info from tags with duplicate keys', function () {\n      const err1 = OError.tag(new Error('foo'), 'bar', {\n        userId: 123\n      });\n      const err2 = OError.tag(err1, 'bat', {\n        userId: 456\n      });\n      expect(OError.getFullInfo(err2)).to.deep.equal({\n        userId: 456\n      });\n    });","file":"o-error-util.test.js","skipped":false,"dir":"libraries/o-error/test"},{"name":"works on an error with .info set to a string","suites":["utils","OError.getFullInfo"],"updatePoint":{"line":304,"column":52,"index":9546},"line":304,"code":"    it('works on an error with .info set to a string', function () {\n      const err = new Error('foo');\n      err.info = 'test';\n      expect(OError.getFullInfo(err)).to.deep.equal({});\n    });","file":"o-error-util.test.js","skipped":false,"dir":"libraries/o-error/test"},{"name":"works when given null","suites":["utils","OError.getFullStack"],"updatePoint":{"line":311,"column":29,"index":9772},"line":311,"code":"    it('works when given null', function () {\n      expect(OError.getFullStack(null)).to.equal('');\n    });","file":"o-error-util.test.js","skipped":false,"dir":"libraries/o-error/test"},{"name":"works on a normal error","suites":["utils","OError.getFullStack"],"updatePoint":{"line":314,"column":31,"index":9882},"line":314,"code":"    it('works on a normal error', function () {\n      const err = new Error('foo');\n      const fullStack = OError.getFullStack(err);\n      expect(fullStack).to.match(/^Error: foo$/m);\n      expect(fullStack).to.match(/^\\s+at /m);\n    });","file":"o-error-util.test.js","skipped":false,"dir":"libraries/o-error/test"},{"name":"works on an error with a cause","suites":["utils","OError.getFullStack"],"updatePoint":{"line":320,"column":38,"index":10128},"line":320,"code":"    it('works on an error with a cause', function () {\n      const err1 = new Error('foo');\n      const err2 = new Error('bar');\n      err1.cause = err2;\n      const fullStack = OError.getFullStack(err1);\n      expect(fullStack).to.match(/^Error: foo$/m);\n      expect(fullStack).to.match(/^\\s+at /m);\n      expect(fullStack).to.match(/^caused by:\\n\\s+Error: bar$/m);\n    });","file":"o-error-util.test.js","skipped":false,"dir":"libraries/o-error/test"},{"name":"works on both tags and causes","suites":["utils","OError.getFullStack"],"updatePoint":{"line":329,"column":37,"index":10503},"line":329,"code":"    it('works on both tags and causes', async function () {\n      // Here's the actual error.\n      function tryToFoo() {\n        try {\n          throw Error('foo');\n        } catch (error) {\n          throw OError.tag(error, 'failed to foo', {\n            foo: 1\n          });\n        }\n      }\n\n      // Inside another function that wraps it.\n      function tryToBar() {\n        try {\n          tryToFoo();\n        } catch (error) {\n          throw new OError('failed to bar').withCause(error);\n        }\n      }\n\n      // And it is in another try.\n      try {\n        try {\n          tryToBar();\n          expect.fail('should have thrown');\n        } catch (error) {\n          throw OError.tag(error, 'failed to bat', {\n            bat: 1\n          });\n        }\n      } catch (error) {\n        // We catch the wrapping error.\n        expectError(error, {\n          name: 'OError',\n          klass: OError,\n          message: 'OError: failed to bar',\n          firstFrameRx: /tryToBar/\n        });\n\n        // But the stack contains all of the errors and tags.\n        expectFullStackWithoutStackFramesToEqual(error, ['OError: failed to bar', 'TaggedError: failed to bat', 'caused by:', '    Error: foo', '    TaggedError: failed to foo']);\n\n        // The info from the wrapped cause should be picked up for logging.\n        expect(OError.getFullInfo(error)).to.eql({\n          bat: 1,\n          foo: 1\n        });\n\n        // But it should still be recorded.\n        expect(OError.getFullInfo(error.cause)).to.eql({\n          foo: 1\n        });\n      }\n    });","file":"o-error-util.test.js","skipped":false,"dir":"libraries/o-error/test"},{"name":"works when given non Error","suites":["utils","OError.getFullStack"],"updatePoint":{"line":384,"column":34,"index":12066},"line":384,"code":"    it('works when given non Error', function () {\n      expect(OError.getFullStack({\n        message: 'Foo'\n      })).to.equal('Foo');\n    });","file":"o-error-util.test.js","skipped":false,"dir":"libraries/o-error/test"},{"name":"works when given non Error with tags","suites":["utils","OError.getFullStack"],"updatePoint":{"line":389,"column":44,"index":12220},"line":389,"code":"    it('works when given non Error with tags', function () {\n      const error = OError.tag({\n        message: 'Foo: bar'\n      }, 'baz');\n      expectFullStackWithoutStackFramesToEqual(error, ['Foo: bar', 'TaggedError: baz']);\n    });","file":"o-error-util.test.js","skipped":false,"dir":"libraries/o-error/test"},{"name":"can have an info object","suites":["OError"],"updatePoint":{"line":20,"column":29,"index":429},"line":20,"code":"  it('can have an info object', function () {\n    const err1 = new OError('foo', {\n      foo: 1\n    });\n    expect(err1.info).to.eql({\n      foo: 1\n    });\n    const err2 = new OError('foo').withInfo({\n      foo: 2\n    });\n    expect(err2.info).to.eql({\n      foo: 2\n    });\n  });","file":"o-error.test.js","skipped":false,"dir":"libraries/o-error/test"},{"name":"can have a cause","suites":["OError"],"updatePoint":{"line":34,"column":22,"index":703},"line":34,"code":"  it('can have a cause', function () {\n    const err1 = new OError('foo', {\n      foo: 1\n    }, new Error('cause 1'));\n    expect(err1.cause.message).to.equal('cause 1');\n    const err2 = new OError('foo').withCause(new Error('cause 2'));\n    expect(err2.cause.message).to.equal('cause 2');\n  });","file":"o-error.test.js","skipped":false,"dir":"libraries/o-error/test"},{"name":"handles a custom error type with a cause","suites":["OError"],"updatePoint":{"line":42,"column":46,"index":1024},"line":42,"code":"  it('handles a custom error type with a cause', function () {\n    function doSomethingBadInternally() {\n      throw new Error('internal error');\n    }\n    function doSomethingBad() {\n      try {\n        doSomethingBadInternally();\n      } catch (error) {\n        throw new CustomError1().withCause(error);\n      }\n    }\n    try {\n      doSomethingBad();\n      expect.fail('should have thrown');\n    } catch (error) {\n      expectError(error, {\n        name: 'CustomError1',\n        klass: CustomError1,\n        message: 'CustomError1: failed to foo',\n        firstFrameRx: /doSomethingBad/\n      });\n      expect(OError.getFullInfo(error)).to.deep.equal({});\n      expectFullStackWithoutStackFramesToEqual(error, ['CustomError1: failed to foo', 'caused by:', '    Error: internal error']);\n    }\n  });","file":"o-error.test.js","skipped":false,"dir":"libraries/o-error/test"},{"name":"handles a custom error type with nested causes","suites":["OError"],"updatePoint":{"line":67,"column":52,"index":1833},"line":67,"code":"  it('handles a custom error type with nested causes', function () {\n    function doSomethingBadInternally() {\n      throw new Error('internal error');\n    }\n    function doBar() {\n      try {\n        doSomethingBadInternally();\n      } catch (error) {\n        throw new CustomError2('failed to bar!').withCause(error);\n      }\n    }\n    function doFoo() {\n      try {\n        doBar();\n      } catch (error) {\n        throw new CustomError1().withCause(error);\n      }\n    }\n    try {\n      doFoo();\n      expect.fail('should have thrown');\n    } catch (error) {\n      expectError(error, {\n        name: 'CustomError1',\n        klass: CustomError1,\n        message: 'CustomError1: failed to foo',\n        firstFrameRx: /doFoo/\n      });\n      expectFullStackWithoutStackFramesToEqual(error, ['CustomError1: failed to foo', 'caused by:', '    CustomError2: failed to bar!', '    caused by:', '        Error: internal error']);\n      expect(OError.getFullInfo(error)).to.deep.equal({});\n    }\n  });","file":"o-error.test.js","skipped":false,"dir":"libraries/o-error/test"},{"name":"should copy the file","suites":["FSPersistorTests","sendFile"],"updatePoint":{"line":63,"column":32,"index":1937},"line":63,"code":"        it('should copy the file', async function () {\n          await persistor.sendFile(location, files.wombat, '/uploads/info.txt');\n          const contents = await fsPromises.readFile(scenario.fsPath(files.wombat));\n          expect(contents.equals(localFiles['/uploads/info.txt'])).to.be.true;\n        });","file":"unit/FSPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should return an error if the file cannot be stored","suites":["FSPersistorTests","sendFile"],"updatePoint":{"line":68,"column":63,"index":2280},"line":68,"code":"        it('should return an error if the file cannot be stored', async function () {\n          await expect(persistor.sendFile('/not-a-dir', files.wombat, '/uploads/info.txt')).to.be.rejectedWith(Errors.WriteError);\n        });","file":"unit/FSPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should write the stream to disk","suites":["FSPersistorTests","sendStream","when the file doesn't exist"],"updatePoint":{"line":78,"column":45,"index":2738},"line":78,"code":"          it('should write the stream to disk', async function () {\n            await persistor.sendStream(location, files.wombat, stream);\n            const contents = await fsPromises.readFile(scenario.fsPath(files.wombat));\n            expect(contents.equals(localFiles['/uploads/info.txt'])).to.be.true;\n          });","file":"unit/FSPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should delete the temporary file","suites":["FSPersistorTests","sendStream","when the file doesn't exist"],"updatePoint":{"line":83,"column":46,"index":3061},"line":83,"code":"          it('should delete the temporary file', async function () {\n            await persistor.sendStream(location, files.wombat, stream);\n            const entries = await fsPromises.readdir(location);\n            const tempDirs = entries.filter(dir => dir.startsWith('tmp-'));\n            expect(tempDirs).to.be.empty;\n          });","file":"unit/FSPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should not write the target file","suites":["FSPersistorTests","sendStream","when the file doesn't exist","on error"],"updatePoint":{"line":93,"column":48,"index":3628},"line":93,"code":"            it('should not write the target file', async function () {\n              await expect(fsPromises.access(scenario.fsPath(files.wombat))).to.be.rejected;\n            });","file":"unit/FSPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should delete the temporary file","suites":["FSPersistorTests","sendStream","when the file doesn't exist","on error"],"updatePoint":{"line":96,"column":48,"index":3808},"line":96,"code":"            it('should delete the temporary file', async function () {\n              await persistor.sendStream(location, files.wombat, stream);\n              const entries = await fsPromises.readdir(location);\n              const tempDirs = entries.filter(dir => dir.startsWith('tmp-'));\n              expect(tempDirs).to.be.empty;\n            });","file":"unit/FSPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should write the stream to disk","suites":["FSPersistorTests","sendStream","when the file doesn't exist","when the md5 hash matches"],"updatePoint":{"line":104,"column":47,"index":4232},"line":104,"code":"            it('should write the stream to disk', async function () {\n              await persistor.sendStream(location, files.wombat, stream, {\n                sourceMd5: md5(localFiles['/uploads/info.txt'])\n              });\n              const contents = await fsPromises.readFile(scenario.fsPath(files.wombat));\n              expect(contents.equals(localFiles['/uploads/info.txt'])).to.be.true;\n            });","file":"unit/FSPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should not write the target file","suites":["FSPersistorTests","sendStream","when the file doesn't exist","when the md5 hash does not match"],"updatePoint":{"line":118,"column":48,"index":4977},"line":118,"code":"            it('should not write the target file', async function () {\n              await expect(fsPromises.access(scenario.fsPath(files.wombat))).to.be.rejected;\n            });","file":"unit/FSPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should delete the temporary file","suites":["FSPersistorTests","sendStream","when the file doesn't exist","when the md5 hash does not match"],"updatePoint":{"line":121,"column":48,"index":5157},"line":121,"code":"            it('should delete the temporary file', async function () {\n              await persistor.sendStream(location, files.wombat, stream);\n              const entries = await fsPromises.readdir(location);\n              const tempDirs = entries.filter(dir => dir.startsWith('tmp-'));\n              expect(tempDirs).to.be.empty;\n            });","file":"unit/FSPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should write the stream to disk","suites":["FSPersistorTests","sendStream","when the file already exists"],"updatePoint":{"line":135,"column":45,"index":5816},"line":135,"code":"          it('should write the stream to disk', async function () {\n            await persistor.sendStream(location, files.wombat, stream);\n            const contents = await fsPromises.readFile(scenario.fsPath(files.wombat));\n            expect(contents.equals(localFiles['/uploads/other.txt'])).to.be.true;\n          });","file":"unit/FSPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should delete the temporary file","suites":["FSPersistorTests","sendStream","when the file already exists"],"updatePoint":{"line":140,"column":46,"index":6140},"line":140,"code":"          it('should delete the temporary file', async function () {\n            await persistor.sendStream(location, files.wombat, stream);\n            const entries = await fsPromises.readdir(location);\n            const tempDirs = entries.filter(dir => dir.startsWith('tmp-'));\n            expect(tempDirs).to.be.empty;\n          });","file":"unit/FSPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should not update the target file","suites":["FSPersistorTests","sendStream","when the file already exists","on error"],"updatePoint":{"line":150,"column":49,"index":6708},"line":150,"code":"            it('should not update the target file', async function () {\n              const contents = await fsPromises.readFile(scenario.fsPath(files.wombat));\n              expect(contents.equals(localFiles['/uploads/info.txt'])).to.be.true;\n            });","file":"unit/FSPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should delete the temporary file","suites":["FSPersistorTests","sendStream","when the file already exists","on error"],"updatePoint":{"line":154,"column":48,"index":6967},"line":154,"code":"            it('should delete the temporary file', async function () {\n              await persistor.sendStream(location, files.wombat, stream);\n              const entries = await fsPromises.readdir(location);\n              const tempDirs = entries.filter(dir => dir.startsWith('tmp-'));\n              expect(tempDirs).to.be.empty;\n            });","file":"unit/FSPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should write the stream to disk","suites":["FSPersistorTests","sendStream","when the file already exists","when the md5 hash matches"],"updatePoint":{"line":162,"column":47,"index":7391},"line":162,"code":"            it('should write the stream to disk', async function () {\n              await persistor.sendStream(location, files.wombat, stream, {\n                sourceMd5: md5(localFiles['/uploads/other.txt'])\n              });\n              const contents = await fsPromises.readFile(scenario.fsPath(files.wombat));\n              expect(contents.equals(localFiles['/uploads/other.txt'])).to.be.true;\n            });","file":"unit/FSPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should not update the target file","suites":["FSPersistorTests","sendStream","when the file already exists","when the md5 hash does not match"],"updatePoint":{"line":176,"column":49,"index":8139},"line":176,"code":"            it('should not update the target file', async function () {\n              const contents = await fsPromises.readFile(scenario.fsPath(files.wombat));\n              expect(contents.equals(localFiles['/uploads/info.txt'])).to.be.true;\n            });","file":"unit/FSPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should delete the temporary file","suites":["FSPersistorTests","sendStream","when the file already exists","when the md5 hash does not match"],"updatePoint":{"line":180,"column":48,"index":8398},"line":180,"code":"            it('should delete the temporary file', async function () {\n              await persistor.sendStream(location, files.wombat, stream);\n              const entries = await fsPromises.readdir(location);\n              const tempDirs = entries.filter(dir => dir.startsWith('tmp-'));\n              expect(tempDirs).to.be.empty;\n            });","file":"unit/FSPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should return a string with the object contents","suites":["FSPersistorTests","getObjectStream"],"updatePoint":{"line":193,"column":59,"index":8974},"line":193,"code":"        it('should return a string with the object contents', async function () {\n          const stream = await persistor.getObjectStream(location, files.wombat);\n          const contents = await streamToBuffer(stream);\n          expect(contents.equals(localFiles['/uploads/info.txt'])).to.be.true;\n        });","file":"unit/FSPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should support ranges","suites":["FSPersistorTests","getObjectStream"],"updatePoint":{"line":198,"column":33,"index":9260},"line":198,"code":"        it('should support ranges', async function () {\n          const stream = await persistor.getObjectStream(location, files.wombat, {\n            start: 5,\n            end: 16\n          });\n          const contents = await streamToBuffer(stream);\n          // end is inclusive in ranges, but exclusive in slice()\n          expect(contents.equals(localFiles['/uploads/info.txt'].slice(5, 17))).to.be.true;\n        });","file":"unit/FSPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should give a NotFoundError if the file does not exist","suites":["FSPersistorTests","getObjectStream"],"updatePoint":{"line":207,"column":66,"index":9715},"line":207,"code":"        it('should give a NotFoundError if the file does not exist', async function () {\n          await expect(persistor.getObjectStream(location, 'does-not-exist')).to.be.rejectedWith(Errors.NotFoundError);\n        });","file":"unit/FSPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should return the file size","suites":["FSPersistorTests","getObjectSize"],"updatePoint":{"line":215,"column":39,"index":10097},"line":215,"code":"        it('should return the file size', async function () {\n          expect(await persistor.getObjectSize(location, files.wombat)).to.equal(localFiles['/uploads/info.txt'].length);\n        });","file":"unit/FSPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should throw a NotFoundError if the file does not exist","suites":["FSPersistorTests","getObjectSize"],"updatePoint":{"line":218,"column":67,"index":10321},"line":218,"code":"        it('should throw a NotFoundError if the file does not exist', async function () {\n          await expect(persistor.getObjectSize(location, 'does-not-exist')).to.be.rejectedWith(Errors.NotFoundError);\n        });","file":"unit/FSPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"Should copy the file to the new location","suites":["FSPersistorTests","copyObject"],"updatePoint":{"line":226,"column":52,"index":10711},"line":226,"code":"        it('Should copy the file to the new location', async function () {\n          await persistor.copyObject(location, files.wombat, files.potato);\n          const contents = await fsPromises.readFile(scenario.fsPath(files.potato));\n          expect(contents.equals(localFiles['/uploads/info.txt'])).to.be.true;\n        });","file":"unit/FSPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should delete the file","suites":["FSPersistorTests","deleteObject"],"updatePoint":{"line":237,"column":34,"index":11273},"line":237,"code":"        it('should delete the file', async function () {\n          await persistor.deleteObject(location, files.wombat);\n          await expect(fsPromises.access(scenario.fsPath(files.wombat))).to.be.rejected;\n        });","file":"unit/FSPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should ignore files that don't exist","suites":["FSPersistorTests","deleteObject"],"updatePoint":{"line":241,"column":48,"index":11509},"line":241,"code":"        it(\"should ignore files that don't exist\", async function () {\n          await persistor.deleteObject(location, 'does-not-exist');\n        });","file":"unit/FSPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should delete all files under the directory","suites":["FSPersistorTests","deleteDirectory"],"updatePoint":{"line":252,"column":55,"index":11976},"line":252,"code":"        it('should delete all files under the directory', async function () {\n          await persistor.deleteDirectory(location, 'animals');\n          for (const file of [files.wombat, files.giraffe]) {\n            await expect(fsPromises.access(scenario.fsPath(file))).to.be.rejected;\n          }\n        });","file":"unit/FSPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should not delete files under other directoris","suites":["FSPersistorTests","deleteDirectory"],"updatePoint":{"line":258,"column":58,"index":12290},"line":258,"code":"        it('should not delete files under other directoris', async function () {\n          await persistor.deleteDirectory(location, 'animals');\n          await fsPromises.access(scenario.fsPath(files.potato));\n        });","file":"unit/FSPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should ignore directories that don't exist","suites":["FSPersistorTests","deleteDirectory"],"updatePoint":{"line":262,"column":54,"index":12509},"line":262,"code":"        it(\"should ignore directories that don't exist\", async function () {\n          await persistor.deleteDirectory(location, 'does-not-exist');\n          for (const file of Object.values(files)) {\n            await fsPromises.access(scenario.fsPath(file));\n          }\n        });","file":"unit/FSPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should return true for existing files","suites":["FSPersistorTests","checkIfObjectExists"],"updatePoint":{"line":273,"column":49,"index":12983},"line":273,"code":"        it('should return true for existing files', async function () {\n          expect(await persistor.checkIfObjectExists(location, files.wombat)).to.equal(true);\n        });","file":"unit/FSPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should return false for non-existing files","suites":["FSPersistorTests","checkIfObjectExists"],"updatePoint":{"line":276,"column":54,"index":13166},"line":276,"code":"        it('should return false for non-existing files', async function () {\n          expect(await persistor.checkIfObjectExists(location, 'does-not-exist')).to.equal(false);\n        });","file":"unit/FSPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should sum directory files size","suites":["FSPersistorTests","directorySize"],"updatePoint":{"line":286,"column":43,"index":13590},"line":286,"code":"        it('should sum directory files size', async function () {\n          expect(await persistor.directorySize(location, 'animals')).to.equal(2 * localFiles['/uploads/info.txt'].length);\n        });","file":"unit/FSPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should return 0 on non-existing directories","suites":["FSPersistorTests","directorySize"],"updatePoint":{"line":289,"column":55,"index":13803},"line":289,"code":"        it('should return 0 on non-existing directories', async function () {\n          expect(await persistor.directorySize(location, 'does-not-exist')).to.equal(0);\n        });","file":"unit/FSPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"returns a metered stream","suites":["GcsPersistorTests","getObjectStream","when called with valid parameters"],"updatePoint":{"line":133,"column":34,"index":3798},"line":133,"code":"      it('returns a metered stream', function () {\n        expect(stream).to.be.instanceOf(Transform);\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"fetches the right key from the right bucket","suites":["GcsPersistorTests","getObjectStream","when called with valid parameters"],"updatePoint":{"line":136,"column":53,"index":3930},"line":136,"code":"      it('fetches the right key from the right bucket', function () {\n        expect(Storage.prototype.bucket).to.have.been.calledWith(bucket);\n        expect(GcsBucket.file).to.have.been.calledWith(key);\n        expect(GcsFile.createReadStream).to.have.been.called;\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"disables automatic decompression","suites":["GcsPersistorTests","getObjectStream","when called with valid parameters"],"updatePoint":{"line":141,"column":42,"index":4196},"line":141,"code":"      it('disables automatic decompression', function () {\n        expect(GcsFile.createReadStream).to.have.been.calledWith({\n          decompress: false\n        });\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"pipes the stream through the meter","suites":["GcsPersistorTests","getObjectStream","when called with valid parameters"],"updatePoint":{"line":146,"column":44,"index":4374},"line":146,"code":"      it('pipes the stream through the meter', function () {\n        expect(ReadStream.pipe).to.have.been.calledWith(sinon.match.instanceOf(Transform));\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"returns a metered stream","suites":["GcsPersistorTests","getObjectStream","when called with a byte range"],"updatePoint":{"line":158,"column":34,"index":4777},"line":158,"code":"      it('returns a metered stream', function () {\n        expect(stream).to.be.instanceOf(Transform);\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"passes the byte range on to GCS","suites":["GcsPersistorTests","getObjectStream","when called with a byte range"],"updatePoint":{"line":161,"column":41,"index":4897},"line":161,"code":"      it('passes the byte range on to GCS', function () {\n        expect(GcsFile.createReadStream).to.have.been.calledWith({\n          decompress: false,\n          start: 5,\n          end: 10\n        });\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"does not return a stream","suites":["GcsPersistorTests","getObjectStream","when the file doesn't exist"],"updatePoint":{"line":180,"column":34,"index":5490},"line":180,"code":"      it('does not return a stream', function () {\n        expect(stream).not.to.exist;\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"throws a NotFoundError","suites":["GcsPersistorTests","getObjectStream","when the file doesn't exist"],"updatePoint":{"line":183,"column":32,"index":5586},"line":183,"code":"      it('throws a NotFoundError', function () {\n        expect(error).to.be.an.instanceOf(Errors.NotFoundError);\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"wraps the error","suites":["GcsPersistorTests","getObjectStream","when the file doesn't exist"],"updatePoint":{"line":186,"column":25,"index":5703},"line":186,"code":"      it('wraps the error', function () {\n        expect(error.cause).to.exist;\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"stores the bucket and key in the error","suites":["GcsPersistorTests","getObjectStream","when the file doesn't exist"],"updatePoint":{"line":189,"column":48,"index":5816},"line":189,"code":"      it('stores the bucket and key in the error', function () {\n        expect(error.info).to.include({\n          bucketName: bucket,\n          key\n        });\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"does not return a stream","suites":["GcsPersistorTests","getObjectStream","when Gcs encounters an unkown error"],"updatePoint":{"line":207,"column":34,"index":6367},"line":207,"code":"      it('does not return a stream', function () {\n        expect(stream).not.to.exist;\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"throws a ReadError","suites":["GcsPersistorTests","getObjectStream","when Gcs encounters an unkown error"],"updatePoint":{"line":210,"column":28,"index":6459},"line":210,"code":"      it('throws a ReadError', function () {\n        expect(error).to.be.an.instanceOf(Errors.ReadError);\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"wraps the error","suites":["GcsPersistorTests","getObjectStream","when Gcs encounters an unkown error"],"updatePoint":{"line":213,"column":25,"index":6572},"line":213,"code":"      it('wraps the error', function () {\n        expect(error.cause).to.exist;\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"stores the bucket and key in the error","suites":["GcsPersistorTests","getObjectStream","when Gcs encounters an unkown error"],"updatePoint":{"line":216,"column":48,"index":6685},"line":216,"code":"      it('stores the bucket and key in the error', function () {\n        expect(error.info).to.include({\n          bucketName: bucket,\n          key\n        });\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should request a signed URL","suites":["GcsPersistorTests","getRedirectUrl","with signed URLs"],"updatePoint":{"line":230,"column":37,"index":7083},"line":230,"code":"      it('should request a signed URL', function () {\n        expect(GcsFile.getSignedUrl).to.have.been.called;\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should return the url","suites":["GcsPersistorTests","getRedirectUrl","with signed URLs"],"updatePoint":{"line":233,"column":31,"index":7199},"line":233,"code":"      it('should return the url', function () {\n        expect(signedUrl).to.equal(redirectUrl);\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should return a plain URL","suites":["GcsPersistorTests","getRedirectUrl","with unsigned URLs"],"updatePoint":{"line":246,"column":35,"index":7657},"line":246,"code":"      it('should return a plain URL', function () {\n        expect(signedUrl).to.equal(`http://custom.endpoint/download/storage/v1/b/${bucket}/o/${key}?alt=media`);\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should return the object size","suites":["GcsPersistorTests","getObjectSize","when called with valid parameters"],"updatePoint":{"line":257,"column":39,"index":8081},"line":257,"code":"      it('should return the object size', function () {\n        expect(size).to.equal(files[0].metadata.size);\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should pass the bucket and key to GCS","suites":["GcsPersistorTests","getObjectSize","when called with valid parameters"],"updatePoint":{"line":260,"column":47,"index":8210},"line":260,"code":"      it('should pass the bucket and key to GCS', function () {\n        expect(Storage.prototype.bucket).to.have.been.calledWith(bucket);\n        expect(GcsBucket.file).to.have.been.calledWith(key);\n        expect(GcsFile.getMetadata).to.have.been.called;\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should return a NotFoundError","suites":["GcsPersistorTests","getObjectSize","when the object is not found"],"updatePoint":{"line":276,"column":39,"index":8797},"line":276,"code":"      it('should return a NotFoundError', function () {\n        expect(error).to.be.an.instanceOf(Errors.NotFoundError);\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should wrap the error","suites":["GcsPersistorTests","getObjectSize","when the object is not found"],"updatePoint":{"line":279,"column":31,"index":8920},"line":279,"code":"      it('should wrap the error', function () {\n        expect(error.cause).to.equal(GcsNotFoundError);\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should return a ReadError","suites":["GcsPersistorTests","getObjectSize","when GCS returns an error"],"updatePoint":{"line":293,"column":35,"index":9360},"line":293,"code":"      it('should return a ReadError', function () {\n        expect(error).to.be.an.instanceOf(Errors.ReadError);\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should wrap the error","suites":["GcsPersistorTests","getObjectSize","when GCS returns an error"],"updatePoint":{"line":296,"column":31,"index":9479},"line":296,"code":"      it('should wrap the error', function () {\n        expect(error.cause).to.equal(genericError);\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should upload the stream","suites":["GcsPersistorTests","sendStream","with valid parameters"],"updatePoint":{"line":306,"column":34,"index":9809},"line":306,"code":"      it('should upload the stream', function () {\n        expect(Storage.prototype.bucket).to.have.been.calledWith(bucket);\n        expect(GcsBucket.file).to.have.been.calledWith(key);\n        expect(GcsFile.createWriteStream).to.have.been.called;\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should not try to create a resumable upload","suites":["GcsPersistorTests","sendStream","with valid parameters"],"updatePoint":{"line":311,"column":53,"index":10087},"line":311,"code":"      it('should not try to create a resumable upload', function () {\n        expect(GcsFile.createWriteStream).to.have.been.calledWith({\n          resumable: false\n        });\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should meter the stream and pass it to GCS","suites":["GcsPersistorTests","sendStream","with valid parameters"],"updatePoint":{"line":316,"column":52,"index":10273},"line":316,"code":"      it('should meter the stream and pass it to GCS', function () {\n        expect(StreamPromises.pipeline).to.have.been.calledWith(ReadStream, sinon.match.instanceOf(Transform), WriteStream);\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"calculates the md5 hash of the file","suites":["GcsPersistorTests","sendStream","with valid parameters"],"updatePoint":{"line":319,"column":45,"index":10470},"line":319,"code":"      it('calculates the md5 hash of the file', function () {\n        expect(Hash.digest).to.have.been.called;\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should not calculate the md5 hash of the file","suites":["GcsPersistorTests","sendStream","when a hash is supplied"],"updatePoint":{"line":329,"column":55,"index":10844},"line":329,"code":"      it('should not calculate the md5 hash of the file', function () {\n        expect(Hash.digest).not.to.have.been.called;\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"sends the hash in base64","suites":["GcsPersistorTests","sendStream","when a hash is supplied"],"updatePoint":{"line":332,"column":34,"index":10958},"line":332,"code":"      it('sends the hash in base64', function () {\n        expect(GcsFile.createWriteStream).to.have.been.calledWith({\n          validation: 'md5',\n          metadata: {\n            md5Hash: 'qqqqqru7u7uqqqqqu7u7uw=='\n          },\n          resumable: false\n        });\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"does not fetch the md5 hash of the uploaded file","suites":["GcsPersistorTests","sendStream","when a hash is supplied"],"updatePoint":{"line":341,"column":58,"index":11262},"line":341,"code":"      it('does not fetch the md5 hash of the uploaded file', function () {\n        expect(GcsFile.getMetadata).not.to.have.been.called;\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should send the metadata to GCS","suites":["GcsPersistorTests","sendStream","when metadata is supplied"],"updatePoint":{"line":354,"column":41,"index":11705},"line":354,"code":"      it('should send the metadata to GCS', function () {\n        expect(GcsFile.createWriteStream).to.have.been.calledWith({\n          metadata: {\n            contentType,\n            contentEncoding\n          },\n          resumable: false\n        });\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"throws a WriteError","suites":["GcsPersistorTests","sendStream","when the upload fails"],"updatePoint":{"line":374,"column":29,"index":12341},"line":374,"code":"      it('throws a WriteError', function () {\n        expect(error).to.be.an.instanceOf(Errors.WriteError);\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"wraps the error","suites":["GcsPersistorTests","sendStream","when the upload fails"],"updatePoint":{"line":377,"column":25,"index":12455},"line":377,"code":"      it('wraps the error', function () {\n        expect(error.cause).to.equal(genericError);\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should create a read stream for the file","suites":["GcsPersistorTests","sendFile","with valid parameters"],"updatePoint":{"line":387,"column":50,"index":12795},"line":387,"code":"      it('should create a read stream for the file', function () {\n        expect(Fs.createReadStream).to.have.been.calledWith(filename);\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should create a write stream","suites":["GcsPersistorTests","sendFile","with valid parameters"],"updatePoint":{"line":390,"column":38,"index":12931},"line":390,"code":"      it('should create a write stream', function () {\n        expect(Storage.prototype.bucket).to.have.been.calledWith(bucket);\n        expect(GcsBucket.file).to.have.been.calledWith(key);\n        expect(GcsFile.createWriteStream).to.have.been.called;\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should upload the stream via the meter","suites":["GcsPersistorTests","sendFile","with valid parameters"],"updatePoint":{"line":395,"column":48,"index":13204},"line":395,"code":"      it('should upload the stream via the meter', function () {\n        expect(StreamPromises.pipeline).to.have.been.calledWith(ReadStream, sinon.match.instanceOf(Transform), WriteStream);\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should copy the object","suites":["GcsPersistorTests","copyObject","with valid parameters"],"updatePoint":{"line":409,"column":32,"index":13744},"line":409,"code":"      it('should copy the object', function () {\n        expect(Storage.prototype.bucket).to.have.been.calledWith(bucket);\n        expect(GcsBucket.file).to.have.been.calledWith(key);\n        expect(GcsFile.copy).to.have.been.calledWith(destinationFile);\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should throw a NotFoundError","suites":["GcsPersistorTests","copyObject","when the file does not exist"],"updatePoint":{"line":425,"column":38,"index":14343},"line":425,"code":"      it('should throw a NotFoundError', function () {\n        expect(error).to.be.an.instanceOf(Errors.NotFoundError);\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should delete the object","suites":["GcsPersistorTests","deleteObject","with valid parameters"],"updatePoint":{"line":435,"column":34,"index":14678},"line":435,"code":"      it('should delete the object', function () {\n        expect(Storage.prototype.bucket).to.have.been.calledWith(bucket);\n        expect(GcsBucket.file).to.have.been.calledWith(key);\n        expect(GcsFile.delete).to.have.been.called;\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should not throw an error","suites":["GcsPersistorTests","deleteObject","when the file does not exist"],"updatePoint":{"line":451,"column":35,"index":15250},"line":451,"code":"      it('should not throw an error', function () {\n        expect(error).not.to.exist;\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should list the objects in the directory","suites":["GcsPersistorTests","deleteDirectory","with valid parameters"],"updatePoint":{"line":471,"column":50,"index":16109},"line":471,"code":"      it('should list the objects in the directory', function () {\n        expect(Storage.prototype.bucket).to.have.been.calledWith(bucket);\n        expect(GcsBucket.getFiles).to.have.been.calledWith({\n          prefix: directoryPrefix,\n          autoPaginate: false\n        });\n        expect(GcsBucket.getFiles).to.have.been.calledWith('call-1');\n        expect(GcsBucket.getFiles).to.have.been.calledWith('call-2');\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should delete the files","suites":["GcsPersistorTests","deleteDirectory","with valid parameters"],"updatePoint":{"line":480,"column":33,"index":16521},"line":480,"code":"      it('should delete the files', function () {\n        expect(GcsFile.delete.callCount).to.equal(7);\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should generate a WriteError","suites":["GcsPersistorTests","deleteDirectory","when there is an error listing the objects"],"updatePoint":{"line":494,"column":38,"index":16990},"line":494,"code":"      it('should generate a WriteError', function () {\n        expect(error).to.be.an.instanceOf(Errors.WriteError);\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should wrap the error","suites":["GcsPersistorTests","deleteDirectory","when there is an error listing the objects"],"updatePoint":{"line":497,"column":31,"index":17110},"line":497,"code":"      it('should wrap the error', function () {\n        expect(error.cause).to.equal(genericError);\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should list the objects in the directory","suites":["GcsPersistorTests","directorySize","with valid parameters"],"updatePoint":{"line":508,"column":50,"index":17472},"line":508,"code":"      it('should list the objects in the directory', function () {\n        expect(Storage.prototype.bucket).to.have.been.calledWith(bucket);\n        expect(GcsBucket.getFiles).to.have.been.calledWith({\n          prefix: `${key}/`\n        });\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should return the directory size","suites":["GcsPersistorTests","directorySize","with valid parameters"],"updatePoint":{"line":514,"column":42,"index":17716},"line":514,"code":"      it('should return the directory size', function () {\n        expect(size).to.equal(filesSize);\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should list the objects in the directory","suites":["GcsPersistorTests","directorySize","when there are no files"],"updatePoint":{"line":524,"column":50,"index":18065},"line":524,"code":"      it('should list the objects in the directory', function () {\n        expect(Storage.prototype.bucket).to.have.been.calledWith(bucket);\n        expect(GcsBucket.getFiles).to.have.been.calledWith({\n          prefix: `${key}/`\n        });\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should return zero","suites":["GcsPersistorTests","directorySize","when there are no files"],"updatePoint":{"line":530,"column":28,"index":18295},"line":530,"code":"      it('should return zero', function () {\n        expect(size).to.equal(0);\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should generate a ReadError","suites":["GcsPersistorTests","directorySize","when there is an error listing the objects"],"updatePoint":{"line":544,"column":37,"index":18716},"line":544,"code":"      it('should generate a ReadError', function () {\n        expect(error).to.be.an.instanceOf(Errors.ReadError);\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should wrap the error","suites":["GcsPersistorTests","directorySize","when there is an error listing the objects"],"updatePoint":{"line":547,"column":31,"index":18835},"line":547,"code":"      it('should wrap the error', function () {\n        expect(error.cause).to.equal(genericError);\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should ask the file if it exists","suites":["GcsPersistorTests","checkIfObjectExists","when the file exists"],"updatePoint":{"line":558,"column":42,"index":19204},"line":558,"code":"      it('should ask the file if it exists', function () {\n        expect(Storage.prototype.bucket).to.have.been.calledWith(bucket);\n        expect(GcsBucket.file).to.have.been.calledWith(key);\n        expect(GcsFile.exists).to.have.been.called;\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should return that the file exists","suites":["GcsPersistorTests","checkIfObjectExists","when the file exists"],"updatePoint":{"line":563,"column":44,"index":19462},"line":563,"code":"      it('should return that the file exists', function () {\n        expect(exists).to.equal(true);\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should get the object header","suites":["GcsPersistorTests","checkIfObjectExists","when the file does not exist"],"updatePoint":{"line":573,"column":38,"index":19825},"line":573,"code":"      it('should get the object header', function () {\n        expect(Storage.prototype.bucket).to.have.been.calledWith(bucket);\n        expect(GcsBucket.file).to.have.been.calledWith(key);\n        expect(GcsFile.exists).to.have.been.called;\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should return that the file does not exist","suites":["GcsPersistorTests","checkIfObjectExists","when the file does not exist"],"updatePoint":{"line":578,"column":52,"index":20091},"line":578,"code":"      it('should return that the file does not exist', function () {\n        expect(exists).to.equal(false);\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should generate a ReadError","suites":["GcsPersistorTests","checkIfObjectExists","when there is an error"],"updatePoint":{"line":592,"column":37,"index":20515},"line":592,"code":"      it('should generate a ReadError', function () {\n        expect(error).to.be.an.instanceOf(Errors.ReadError);\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should wrap the error","suites":["GcsPersistorTests","checkIfObjectExists","when there is an error"],"updatePoint":{"line":595,"column":31,"index":20634},"line":595,"code":"      it('should wrap the error', function () {\n        expect(error.cause).to.equal(genericError);\n      });","file":"unit/GcsPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should return the file stream","suites":["MigrationPersistorTests","getObjectStream","when the primary persistor has the file"],"updatePoint":{"line":85,"column":39,"index":3091},"line":85,"code":"      it('should return the file stream', function () {\n        expect(response).to.equal(fileStream);\n      });","file":"unit/MigrationPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should fetch the file from the primary persistor, with the correct options","suites":["MigrationPersistorTests","getObjectStream","when the primary persistor has the file"],"updatePoint":{"line":88,"column":84,"index":3249},"line":88,"code":"      it('should fetch the file from the primary persistor, with the correct options', function () {\n        expect(primaryPersistor.getObjectStream).to.have.been.calledWithExactly(bucket, key, options);\n      });","file":"unit/MigrationPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should not query the fallback persistor","suites":["MigrationPersistorTests","getObjectStream","when the primary persistor has the file"],"updatePoint":{"line":91,"column":49,"index":3428},"line":91,"code":"      it('should not query the fallback persistor', function () {\n        expect(fallbackPersistor.getObjectStream).not.to.have.been.called;\n      });","file":"unit/MigrationPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should return the file stream","suites":["MigrationPersistorTests","getObjectStream","when the fallback persistor has the file"],"updatePoint":{"line":103,"column":39,"index":4051},"line":103,"code":"      it('should return the file stream', function () {\n        expect(response).to.be.an.instanceOf(Stream.PassThrough);\n      });","file":"unit/MigrationPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should fetch the file from the primary persistor with the correct options","suites":["MigrationPersistorTests","getObjectStream","when the fallback persistor has the file"],"updatePoint":{"line":106,"column":83,"index":4227},"line":106,"code":"      it('should fetch the file from the primary persistor with the correct options', function () {\n        expect(primaryPersistor.getObjectStream).to.have.been.calledWithExactly(bucket, key, options);\n      });","file":"unit/MigrationPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should fetch the file from the fallback persistor with the fallback bucket with the correct options","suites":["MigrationPersistorTests","getObjectStream","when the fallback persistor has the file"],"updatePoint":{"line":109,"column":109,"index":4466},"line":109,"code":"      it('should fetch the file from the fallback persistor with the fallback bucket with the correct options', function () {\n        expect(fallbackPersistor.getObjectStream).to.have.been.calledWithExactly(fallbackBucket, key, options);\n      });","file":"unit/MigrationPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should create one read stream","suites":["MigrationPersistorTests","getObjectStream","when the fallback persistor has the file"],"updatePoint":{"line":112,"column":39,"index":4644},"line":112,"code":"      it('should create one read stream', function () {\n        expect(fallbackPersistor.getObjectStream).to.have.been.calledOnce;\n      });","file":"unit/MigrationPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should not send the file to the primary","suites":["MigrationPersistorTests","getObjectStream","when the fallback persistor has the file"],"updatePoint":{"line":115,"column":49,"index":4795},"line":115,"code":"      it('should not send the file to the primary', function () {\n        expect(primaryPersistor.sendStream).not.to.have.been.called;\n      });","file":"unit/MigrationPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should create one read stream","suites":["MigrationPersistorTests","getObjectStream","when the file should be copied to the primary"],"updatePoint":{"line":128,"column":39,"index":5465},"line":128,"code":"      it('should create one read stream', function () {\n        expect(fallbackPersistor.getObjectStream).to.have.been.calledOnce;\n      });","file":"unit/MigrationPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should get the md5 hash from the source","suites":["MigrationPersistorTests","getObjectStream","when the file should be copied to the primary"],"updatePoint":{"line":131,"column":49,"index":5616},"line":131,"code":"      it('should get the md5 hash from the source', function () {\n        expect(fallbackPersistor.getObjectMd5Hash).to.have.been.calledWith(fallbackBucket, key);\n      });","file":"unit/MigrationPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should send a stream to the primary","suites":["MigrationPersistorTests","getObjectStream","when the file should be copied to the primary"],"updatePoint":{"line":134,"column":45,"index":5785},"line":134,"code":"      it('should send a stream to the primary', function () {\n        expect(primaryPersistor.sendStream).to.have.been.calledWithExactly(bucket, key, sinon.match.instanceOf(Stream.PassThrough), {\n          sourceMd5: md5\n        });\n      });","file":"unit/MigrationPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should send a stream to the client","suites":["MigrationPersistorTests","getObjectStream","when the file should be copied to the primary"],"updatePoint":{"line":139,"column":44,"index":6027},"line":139,"code":"      it('should send a stream to the client', function () {\n        expect(returnedStream).to.be.an.instanceOf(Stream.PassThrough);\n      });","file":"unit/MigrationPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"rejects with a NotFoundError","suites":["MigrationPersistorTests","getObjectStream","when neither persistor has the file"],"updatePoint":{"line":144,"column":38,"index":6238},"line":144,"code":"      it('rejects with a NotFoundError', async function () {\n        const migrationPersistor = new MigrationPersistor(newPersistor(false), newPersistor(false), Settings);\n        return expect(migrationPersistor.getObjectStream(bucket, key)).to.eventually.be.rejected.and.be.an.instanceOf(Errors.NotFoundError);\n      });","file":"unit/MigrationPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"rejects with the error","suites":["MigrationPersistorTests","getObjectStream","when the primary persistor throws an unexpected error"],"updatePoint":{"line":162,"column":32,"index":7188},"line":162,"code":"      it('rejects with the error', function () {\n        expect(error).to.equal(genericError);\n      });","file":"unit/MigrationPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"does not call the fallback","suites":["MigrationPersistorTests","getObjectStream","when the primary persistor throws an unexpected error"],"updatePoint":{"line":165,"column":36,"index":7297},"line":165,"code":"      it('does not call the fallback', function () {\n        expect(fallbackPersistor.getObjectStream).not.to.have.been.called;\n      });","file":"unit/MigrationPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"rejects with the error","suites":["MigrationPersistorTests","getObjectStream","when the fallback persistor throws an unexpected error"],"updatePoint":{"line":182,"column":32,"index":8067},"line":182,"code":"      it('rejects with the error', function () {\n        expect(error).to.equal(genericError);\n      });","file":"unit/MigrationPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should have called the fallback","suites":["MigrationPersistorTests","getObjectStream","when the fallback persistor throws an unexpected error"],"updatePoint":{"line":185,"column":41,"index":8181},"line":185,"code":"      it('should have called the fallback', function () {\n        expect(fallbackPersistor.getObjectStream).to.have.been.calledWith(fallbackBucket, key);\n      });","file":"unit/MigrationPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should send the file to the primary persistor","suites":["MigrationPersistorTests","sendStream","when it works"],"updatePoint":{"line":201,"column":55,"index":8867},"line":201,"code":"      it('should send the file to the primary persistor', function () {\n        expect(primaryPersistor.sendStream).to.have.been.calledWithExactly(bucket, key, fileStream);\n      });","file":"unit/MigrationPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should not send the file to the fallback persistor","suites":["MigrationPersistorTests","sendStream","when it works"],"updatePoint":{"line":204,"column":60,"index":9055},"line":204,"code":"      it('should not send the file to the fallback persistor', function () {\n        expect(fallbackPersistor.sendStream).not.to.have.been.called;\n      });","file":"unit/MigrationPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"returns the error","suites":["MigrationPersistorTests","sendStream","when the primary persistor throws an error"],"updatePoint":{"line":209,"column":27,"index":9260},"line":209,"code":"      it('returns the error', async function () {\n        primaryPersistor.sendStream.rejects(notFoundError);\n        return expect(migrationPersistor.sendStream(bucket, key, fileStream)).to.eventually.be.rejected.and.be.an.instanceOf(Errors.NotFoundError);\n      });","file":"unit/MigrationPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should delete the file from the primary","suites":["MigrationPersistorTests","deleteObject","when it works"],"updatePoint":{"line":226,"column":49,"index":10050},"line":226,"code":"      it('should delete the file from the primary', function () {\n        expect(primaryPersistor.deleteObject).to.have.been.calledWithExactly(bucket, key);\n      });","file":"unit/MigrationPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should delete the file from the fallback","suites":["MigrationPersistorTests","deleteObject","when it works"],"updatePoint":{"line":229,"column":50,"index":10218},"line":229,"code":"      it('should delete the file from the fallback', function () {\n        expect(fallbackPersistor.deleteObject).to.have.been.calledWithExactly(fallbackBucket, key);\n      });","file":"unit/MigrationPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should return the error","suites":["MigrationPersistorTests","deleteObject","when the primary persistor throws an error"],"updatePoint":{"line":243,"column":33,"index":10717},"line":243,"code":"      it('should return the error', function () {\n        expect(error).to.equal(genericError);\n      });","file":"unit/MigrationPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should delete the file from the primary","suites":["MigrationPersistorTests","deleteObject","when the primary persistor throws an error"],"updatePoint":{"line":246,"column":49,"index":10839},"line":246,"code":"      it('should delete the file from the primary', function () {\n        expect(primaryPersistor.deleteObject).to.have.been.calledWithExactly(bucket, key);\n      });","file":"unit/MigrationPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should delete the file from the fallback","suites":["MigrationPersistorTests","deleteObject","when the primary persistor throws an error"],"updatePoint":{"line":249,"column":50,"index":11007},"line":249,"code":"      it('should delete the file from the fallback', function () {\n        expect(fallbackPersistor.deleteObject).to.have.been.calledWithExactly(fallbackBucket, key);\n      });","file":"unit/MigrationPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should return the error","suites":["MigrationPersistorTests","deleteObject","when the fallback persistor throws an error"],"updatePoint":{"line":263,"column":33,"index":11508},"line":263,"code":"      it('should return the error', function () {\n        expect(error).to.equal(genericError);\n      });","file":"unit/MigrationPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should delete the file from the primary","suites":["MigrationPersistorTests","deleteObject","when the fallback persistor throws an error"],"updatePoint":{"line":266,"column":49,"index":11630},"line":266,"code":"      it('should delete the file from the primary', function () {\n        expect(primaryPersistor.deleteObject).to.have.been.calledWithExactly(bucket, key);\n      });","file":"unit/MigrationPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should delete the file from the fallback","suites":["MigrationPersistorTests","deleteObject","when the fallback persistor throws an error"],"updatePoint":{"line":269,"column":50,"index":11798},"line":269,"code":"      it('should delete the file from the fallback', function () {\n        expect(fallbackPersistor.deleteObject).to.have.been.calledWithExactly(fallbackBucket, key);\n      });","file":"unit/MigrationPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should call copyObject to copy the file","suites":["MigrationPersistorTests","copyObject","when the file exists on the primary"],"updatePoint":{"line":283,"column":49,"index":12471},"line":283,"code":"      it('should call copyObject to copy the file', function () {\n        expect(primaryPersistor.copyObject).to.have.been.calledWithExactly(bucket, key, destKey);\n      });","file":"unit/MigrationPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should not try to read from the fallback","suites":["MigrationPersistorTests","copyObject","when the file exists on the primary"],"updatePoint":{"line":286,"column":50,"index":12646},"line":286,"code":"      it('should not try to read from the fallback', function () {\n        expect(fallbackPersistor.getObjectStream).not.to.have.been.called;\n      });","file":"unit/MigrationPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should call copyObject to copy the file","suites":["MigrationPersistorTests","copyObject","when the file does not exist on the primary"],"updatePoint":{"line":298,"column":49,"index":13257},"line":298,"code":"      it('should call copyObject to copy the file', function () {\n        expect(primaryPersistor.copyObject).to.have.been.calledWithExactly(bucket, key, destKey);\n      });","file":"unit/MigrationPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should fetch the file from the fallback","suites":["MigrationPersistorTests","copyObject","when the file does not exist on the primary"],"updatePoint":{"line":301,"column":49,"index":13431},"line":301,"code":"      it('should fetch the file from the fallback', function () {\n        expect(fallbackPersistor.getObjectStream).not.to.have.been.calledWithExactly(fallbackBucket, key);\n      });","file":"unit/MigrationPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should get the md5 hash from the source","suites":["MigrationPersistorTests","copyObject","when the file does not exist on the primary"],"updatePoint":{"line":304,"column":49,"index":13614},"line":304,"code":"      it('should get the md5 hash from the source', function () {\n        expect(fallbackPersistor.getObjectMd5Hash).to.have.been.calledWith(fallbackBucket, key);\n      });","file":"unit/MigrationPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should send the file to the primary","suites":["MigrationPersistorTests","copyObject","when the file does not exist on the primary"],"updatePoint":{"line":307,"column":45,"index":13783},"line":307,"code":"      it('should send the file to the primary', function () {\n        expect(primaryPersistor.sendStream).to.have.been.calledWithExactly(bucket, destKey, sinon.match.instanceOf(Stream.PassThrough), {\n          sourceMd5: md5\n        });\n      });","file":"unit/MigrationPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should call copyObject to copy the file","suites":["MigrationPersistorTests","copyObject","when the file does not exist on the fallback"],"updatePoint":{"line":325,"column":49,"index":14575},"line":325,"code":"      it('should call copyObject to copy the file', function () {\n        expect(primaryPersistor.copyObject).to.have.been.calledWithExactly(bucket, key, destKey);\n      });","file":"unit/MigrationPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should fetch the file from the fallback","suites":["MigrationPersistorTests","copyObject","when the file does not exist on the fallback"],"updatePoint":{"line":328,"column":49,"index":14749},"line":328,"code":"      it('should fetch the file from the fallback', function () {\n        expect(fallbackPersistor.getObjectStream).not.to.have.been.calledWithExactly(fallbackBucket, key);\n      });","file":"unit/MigrationPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should return a not-found error","suites":["MigrationPersistorTests","copyObject","when the file does not exist on the fallback"],"updatePoint":{"line":331,"column":41,"index":14924},"line":331,"code":"      it('should return a not-found error', function () {\n        expect(error).to.be.an.instanceOf(Errors.NotFoundError);\n      });","file":"unit/MigrationPersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should implement the S3 wrapped method when S3 is configured","suites":["PersistorManager"],"updatePoint":{"line":44,"column":66,"index":1147},"line":44,"code":"  it('should implement the S3 wrapped method when S3 is configured', function () {\n    Settings.backend = 's3';\n    expect(PersistorFactory(Settings)).to.respondTo('wrappedMethod');\n    expect(PersistorFactory(Settings).wrappedMethod()).to.equal('S3Persistor');\n  });","file":"unit/PersistorFactoryTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should implement the S3 wrapped method when 'aws-sdk' is configured","suites":["PersistorManager"],"updatePoint":{"line":49,"column":73,"index":1422},"line":49,"code":"  it(\"should implement the S3 wrapped method when 'aws-sdk' is configured\", function () {\n    Settings.backend = 'aws-sdk';\n    expect(PersistorFactory(Settings)).to.respondTo('wrappedMethod');\n    expect(PersistorFactory(Settings).wrappedMethod()).to.equal('S3Persistor');\n  });","file":"unit/PersistorFactoryTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should implement the FS wrapped method when FS is configured","suites":["PersistorManager"],"updatePoint":{"line":54,"column":66,"index":1695},"line":54,"code":"  it('should implement the FS wrapped method when FS is configured', function () {\n    Settings.backend = 'fs';\n    expect(PersistorFactory(Settings)).to.respondTo('wrappedMethod');\n    expect(PersistorFactory(Settings).wrappedMethod()).to.equal('FSPersistor');\n  });","file":"unit/PersistorFactoryTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should forward useSubdirectories=true to FSPersistor","suites":["PersistorManager"],"updatePoint":{"line":59,"column":58,"index":1955},"line":59,"code":"  it('should forward useSubdirectories=true to FSPersistor', function () {\n    Settings.backend = 'fs';\n    Settings.useSubdirectories = true;\n    expect(PersistorFactory(Settings).settings.useSubdirectories).to.be.true;\n  });","file":"unit/PersistorFactoryTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should forward useSubdirectories=false to FSPersistor","suites":["PersistorManager"],"updatePoint":{"line":64,"column":59,"index":2183},"line":64,"code":"  it('should forward useSubdirectories=false to FSPersistor', function () {\n    Settings.backend = 'fs';\n    Settings.useSubdirectories = false;\n    expect(PersistorFactory(Settings).settings.useSubdirectories).to.be.false;\n  });","file":"unit/PersistorFactoryTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should throw an error when the backend is not configured","suites":["PersistorManager"],"updatePoint":{"line":69,"column":62,"index":2416},"line":69,"code":"  it('should throw an error when the backend is not configured', function () {\n    try {\n      PersistorFactory(Settings);\n    } catch (err) {\n      expect(err.message).to.equal('no backend specified - config incomplete');\n      return;\n    }\n    expect('should have caught an error').not.to.exist;\n  });","file":"unit/PersistorFactoryTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should throw an error when the backend is unknown","suites":["PersistorManager"],"updatePoint":{"line":78,"column":55,"index":2714},"line":78,"code":"  it('should throw an error when the backend is unknown', function () {\n    Settings.backend = 'magic';\n    try {\n      PersistorFactory(Settings);\n    } catch (err) {\n      expect(err.message).to.equal('unknown backend');\n      expect(err.info.backend).to.equal('magic');\n      return;\n    }\n    expect('should have caught an error').not.to.exist;\n  });","file":"unit/PersistorFactoryTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"returns a metered stream","suites":["S3PersistorTests","getObjectStream","when called with valid parameters"],"updatePoint":{"line":147,"column":34,"index":4204},"line":147,"code":"      it('returns a metered stream', function () {\n        expect(stream).to.be.instanceOf(Transform);\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"sets the AWS client up with credentials from settings","suites":["S3PersistorTests","getObjectStream","when called with valid parameters"],"updatePoint":{"line":150,"column":63,"index":4346},"line":150,"code":"      it('sets the AWS client up with credentials from settings', function () {\n        expect(S3).to.have.been.calledWith(defaultS3Credentials);\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"fetches the right key from the right bucket","suites":["S3PersistorTests","getObjectStream","when called with valid parameters"],"updatePoint":{"line":153,"column":53,"index":4492},"line":153,"code":"      it('fetches the right key from the right bucket', function () {\n        expect(S3Client.getObject).to.have.been.calledWith({\n          Bucket: bucket,\n          Key: key\n        });\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"pipes the stream through the meter","suites":["S3PersistorTests","getObjectStream","when called with valid parameters"],"updatePoint":{"line":159,"column":44,"index":4681},"line":159,"code":"      it('pipes the stream through the meter', async function () {\n        expect(S3ReadStream.pipe).to.have.been.calledWith(sinon.match.instanceOf(Transform));\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"returns a metered stream","suites":["S3PersistorTests","getObjectStream","when called with a byte range"],"updatePoint":{"line":171,"column":34,"index":5091},"line":171,"code":"      it('returns a metered stream', function () {\n        expect(stream).to.be.instanceOf(Stream.Transform);\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"passes the byte range on to S3","suites":["S3PersistorTests","getObjectStream","when called with a byte range"],"updatePoint":{"line":174,"column":40,"index":5217},"line":174,"code":"      it('passes the byte range on to S3', function () {\n        expect(S3Client.getObject).to.have.been.calledWith({\n          Bucket: bucket,\n          Key: key,\n          Range: 'bytes=5-10'\n        });\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"returns a metered stream","suites":["S3PersistorTests","getObjectStream","when there are alternative credentials"],"updatePoint":{"line":200,"column":34,"index":6046},"line":200,"code":"      it('returns a metered stream', function () {\n        expect(stream).to.be.instanceOf(Stream.Transform);\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"sets the AWS client up with the alternative credentials","suites":["S3PersistorTests","getObjectStream","when there are alternative credentials"],"updatePoint":{"line":203,"column":65,"index":6197},"line":203,"code":"      it('sets the AWS client up with the alternative credentials', function () {\n        expect(S3).to.have.been.calledWith(alternativeS3Credentials);\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"fetches the right key from the right bucket","suites":["S3PersistorTests","getObjectStream","when there are alternative credentials"],"updatePoint":{"line":206,"column":53,"index":6347},"line":206,"code":"      it('fetches the right key from the right bucket', function () {\n        expect(S3Client.getObject).to.have.been.calledWith({\n          Bucket: bucket,\n          Key: key\n        });\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"uses the default credentials for an unknown bucket","suites":["S3PersistorTests","getObjectStream","when there are alternative credentials"],"updatePoint":{"line":212,"column":60,"index":6552},"line":212,"code":"      it('uses the default credentials for an unknown bucket', async function () {\n        stream = await S3Persistor.getObjectStream('anotherBucket', key);\n        expect(S3).to.have.been.calledTwice;\n        expect(S3.firstCall).to.have.been.calledWith(alternativeS3Credentials);\n        expect(S3.secondCall).to.have.been.calledWith(defaultS3Credentials);\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"throws an error if there are no credentials for the bucket","suites":["S3PersistorTests","getObjectStream","when there are alternative credentials"],"updatePoint":{"line":218,"column":68,"index":6929},"line":218,"code":"      it('throws an error if there are no credentials for the bucket', async function () {\n        delete settings.key;\n        delete settings.secret;\n        await expect(S3Persistor.getObjectStream('anotherBucket', key)).to.eventually.be.rejected.and.be.an.instanceOf(Errors.SettingsError);\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"configures the S3 client appropriately","suites":["S3PersistorTests","getObjectStream","when given S3 options"],"updatePoint":{"line":234,"column":48,"index":7549},"line":234,"code":"      it('configures the S3 client appropriately', function () {\n        expect(S3).to.have.been.calledWithMatch({\n          httpOptions,\n          maxRetries\n        });\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"does not return a stream","suites":["S3PersistorTests","getObjectStream","when the file doesn't exist"],"updatePoint":{"line":252,"column":34,"index":8106},"line":252,"code":"      it('does not return a stream', function () {\n        expect(stream).not.to.exist;\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"throws a NotFoundError","suites":["S3PersistorTests","getObjectStream","when the file doesn't exist"],"updatePoint":{"line":255,"column":32,"index":8202},"line":255,"code":"      it('throws a NotFoundError', function () {\n        expect(error).to.be.an.instanceOf(Errors.NotFoundError);\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"wraps the error","suites":["S3PersistorTests","getObjectStream","when the file doesn't exist"],"updatePoint":{"line":258,"column":25,"index":8319},"line":258,"code":"      it('wraps the error', function () {\n        expect(error.cause).to.exist;\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"stores the bucket and key in the error","suites":["S3PersistorTests","getObjectStream","when the file doesn't exist"],"updatePoint":{"line":261,"column":48,"index":8432},"line":261,"code":"      it('stores the bucket and key in the error', function () {\n        expect(error.info).to.include({\n          bucketName: bucket,\n          key\n        });\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"does not return a stream","suites":["S3PersistorTests","getObjectStream","when access to the file is denied"],"updatePoint":{"line":279,"column":34,"index":8989},"line":279,"code":"      it('does not return a stream', function () {\n        expect(stream).not.to.exist;\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"throws a NotFoundError","suites":["S3PersistorTests","getObjectStream","when access to the file is denied"],"updatePoint":{"line":282,"column":32,"index":9085},"line":282,"code":"      it('throws a NotFoundError', function () {\n        expect(error).to.be.an.instanceOf(Errors.NotFoundError);\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"wraps the error","suites":["S3PersistorTests","getObjectStream","when access to the file is denied"],"updatePoint":{"line":285,"column":25,"index":9202},"line":285,"code":"      it('wraps the error', function () {\n        expect(error.cause).to.exist;\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"stores the bucket and key in the error","suites":["S3PersistorTests","getObjectStream","when access to the file is denied"],"updatePoint":{"line":288,"column":48,"index":9315},"line":288,"code":"      it('stores the bucket and key in the error', function () {\n        expect(error.info).to.include({\n          bucketName: bucket,\n          key\n        });\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"does not return a stream","suites":["S3PersistorTests","getObjectStream","when S3 encounters an unkown error"],"updatePoint":{"line":306,"column":34,"index":9866},"line":306,"code":"      it('does not return a stream', function () {\n        expect(stream).not.to.exist;\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"throws a ReadError","suites":["S3PersistorTests","getObjectStream","when S3 encounters an unkown error"],"updatePoint":{"line":309,"column":28,"index":9958},"line":309,"code":"      it('throws a ReadError', function () {\n        expect(error).to.be.an.instanceOf(Errors.ReadError);\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"wraps the error","suites":["S3PersistorTests","getObjectStream","when S3 encounters an unkown error"],"updatePoint":{"line":312,"column":25,"index":10071},"line":312,"code":"      it('wraps the error', function () {\n        expect(error.cause).to.exist;\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"stores the bucket and key in the error","suites":["S3PersistorTests","getObjectStream","when S3 encounters an unkown error"],"updatePoint":{"line":315,"column":48,"index":10184},"line":315,"code":"      it('stores the bucket and key in the error', function () {\n        expect(error.info).to.include({\n          bucketName: bucket,\n          key\n        });\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should request a signed URL","suites":["S3PersistorTests","getRedirectUrl"],"updatePoint":{"line":328,"column":35,"index":10526},"line":328,"code":"    it('should request a signed URL', function () {\n      expect(S3Client.getSignedUrlPromise).to.have.been.called;\n    });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should return the url","suites":["S3PersistorTests","getRedirectUrl"],"updatePoint":{"line":331,"column":29,"index":10644},"line":331,"code":"    it('should return the url', function () {\n      expect(signedUrl).to.equal(redirectUrl);\n    });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should return the object size","suites":["S3PersistorTests","getObjectSize","when called with valid parameters"],"updatePoint":{"line":341,"column":39,"index":10991},"line":341,"code":"      it('should return the object size', function () {\n        expect(size).to.equal(objectSize);\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should pass the bucket and key to S3","suites":["S3PersistorTests","getObjectSize","when called with valid parameters"],"updatePoint":{"line":344,"column":46,"index":11107},"line":344,"code":"      it('should pass the bucket and key to S3', function () {\n        expect(S3Client.headObject).to.have.been.calledWith({\n          Bucket: bucket,\n          Key: key\n        });\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should return a NotFoundError","suites":["S3PersistorTests","getObjectSize","when the object is not found"],"updatePoint":{"line":363,"column":39,"index":11672},"line":363,"code":"      it('should return a NotFoundError', function () {\n        expect(error).to.be.an.instanceOf(Errors.NotFoundError);\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should wrap the error","suites":["S3PersistorTests","getObjectSize","when the object is not found"],"updatePoint":{"line":366,"column":31,"index":11795},"line":366,"code":"      it('should wrap the error', function () {\n        expect(error.cause).to.equal(S3NotFoundError);\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should return a ReadError","suites":["S3PersistorTests","getObjectSize","when S3 returns an error"],"updatePoint":{"line":382,"column":35,"index":12285},"line":382,"code":"      it('should return a ReadError', function () {\n        expect(error).to.be.an.instanceOf(Errors.ReadError);\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should wrap the error","suites":["S3PersistorTests","getObjectSize","when S3 returns an error"],"updatePoint":{"line":385,"column":31,"index":12404},"line":385,"code":"      it('should wrap the error', function () {\n        expect(error.cause).to.equal(genericError);\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should upload the stream","suites":["S3PersistorTests","sendStream","with valid parameters"],"updatePoint":{"line":395,"column":34,"index":12733},"line":395,"code":"      it('should upload the stream', function () {\n        expect(S3Client.upload).to.have.been.calledWith({\n          Bucket: bucket,\n          Key: key,\n          Body: sinon.match.instanceOf(Stream.Transform)\n        });\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should upload files in a single part","suites":["S3PersistorTests","sendStream","with valid parameters"],"updatePoint":{"line":402,"column":46,"index":12979},"line":402,"code":"      it('should upload files in a single part', function () {\n        expect(S3Client.upload).to.have.been.calledWith(sinon.match.any, {\n          partSize: 100 * 1024 * 1024\n        });\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should meter the stream","suites":["S3PersistorTests","sendStream","with valid parameters"],"updatePoint":{"line":407,"column":33,"index":13164},"line":407,"code":"      it('should meter the stream', function () {\n        expect(ReadStream.pipe).to.have.been.calledWith(sinon.match.instanceOf(Stream.Transform));\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"sends the hash in base64","suites":["S3PersistorTests","sendStream","when a hash is supplied"],"updatePoint":{"line":417,"column":34,"index":13566},"line":417,"code":"      it('sends the hash in base64', function () {\n        expect(S3Client.upload).to.have.been.calledWith({\n          Bucket: bucket,\n          Key: key,\n          Body: sinon.match.instanceOf(Transform),\n          ContentMD5: 'qqqqqru7u7uqqqqqu7u7uw=='\n        });\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"sends the metadata to S3","suites":["S3PersistorTests","sendStream","when metadata is supplied"],"updatePoint":{"line":435,"column":34,"index":14156},"line":435,"code":"      it('sends the metadata to S3', function () {\n        expect(S3Client.upload).to.have.been.calledWith({\n          Bucket: bucket,\n          Key: key,\n          Body: sinon.match.instanceOf(Transform),\n          ContentType: contentType,\n          ContentEncoding: contentEncoding\n        });\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"throws a WriteError","suites":["S3PersistorTests","sendStream","when the upload fails"],"updatePoint":{"line":457,"column":29,"index":14833},"line":457,"code":"      it('throws a WriteError', function () {\n        expect(error).to.be.an.instanceOf(Errors.WriteError);\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should create a read stream for the file","suites":["S3PersistorTests","sendFile","with valid parameters"],"updatePoint":{"line":467,"column":50,"index":15182},"line":467,"code":"      it('should create a read stream for the file', function () {\n        expect(Fs.createReadStream).to.have.been.calledWith(filename);\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should upload the stream","suites":["S3PersistorTests","sendFile","with valid parameters"],"updatePoint":{"line":470,"column":34,"index":15314},"line":470,"code":"      it('should upload the stream', function () {\n        expect(S3Client.upload).to.have.been.calledWith({\n          Bucket: bucket,\n          Key: key,\n          Body: sinon.match.instanceOf(Transform)\n        });\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should return the object hash","suites":["S3PersistorTests","getObjectMd5Hash","when the etag is a valid md5 hash"],"updatePoint":{"line":485,"column":39,"index":15796},"line":485,"code":"      it('should return the object hash', function () {\n        expect(hash).to.equal(md5);\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should get the hash from the object metadata","suites":["S3PersistorTests","getObjectMd5Hash","when the etag is a valid md5 hash"],"updatePoint":{"line":488,"column":54,"index":15913},"line":488,"code":"      it('should get the hash from the object metadata', function () {\n        expect(S3Client.headObject).to.have.been.calledWith({\n          Bucket: bucket,\n          Key: key\n        });\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should not download the object","suites":["S3PersistorTests","getObjectMd5Hash","when the etag is a valid md5 hash"],"updatePoint":{"line":494,"column":40,"index":16099},"line":494,"code":"      it('should not download the object', function () {\n        expect(S3Client.getObject).not.to.have.been.called;\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should re-fetch the file to verify it","suites":["S3PersistorTests","getObjectMd5Hash","when the etag isn't a valid md5 hash"],"updatePoint":{"line":510,"column":47,"index":16649},"line":510,"code":"      it('should re-fetch the file to verify it', function () {\n        expect(S3Client.getObject).to.have.been.calledWith({\n          Bucket: bucket,\n          Key: key\n        });\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should meter the download","suites":["S3PersistorTests","getObjectMd5Hash","when the etag isn't a valid md5 hash"],"updatePoint":{"line":516,"column":35,"index":16829},"line":516,"code":"      it('should meter the download', function () {\n        expect(S3ReadStream.pipe).to.have.been.calledWith(sinon.match.instanceOf(Stream.Transform));\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should calculate the md5 hash from the file","suites":["S3PersistorTests","getObjectMd5Hash","when the etag isn't a valid md5 hash"],"updatePoint":{"line":519,"column":53,"index":17010},"line":519,"code":"      it('should calculate the md5 hash from the file', function () {\n        expect(Hash.read).to.have.been.called;\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should return the md5 hash","suites":["S3PersistorTests","getObjectMd5Hash","when the etag isn't a valid md5 hash"],"updatePoint":{"line":522,"column":36,"index":17120},"line":522,"code":"      it('should return the md5 hash', function () {\n        expect(hash).to.equal(md5);\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should copy the object","suites":["S3PersistorTests","copyObject","with valid parameters"],"updatePoint":{"line":532,"column":32,"index":17428},"line":532,"code":"      it('should copy the object', function () {\n        expect(S3Client.copyObject).to.have.been.calledWith({\n          Bucket: bucket,\n          Key: destKey,\n          CopySource: `${bucket}/${key}`\n        });\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should throw a NotFoundError","suites":["S3PersistorTests","copyObject","when the file does not exist"],"updatePoint":{"line":552,"column":38,"index":18044},"line":552,"code":"      it('should throw a NotFoundError', function () {\n        expect(error).to.be.an.instanceOf(Errors.NotFoundError);\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should delete the object","suites":["S3PersistorTests","deleteObject","with valid parameters"],"updatePoint":{"line":562,"column":34,"index":18378},"line":562,"code":"      it('should delete the object', function () {\n        expect(S3Client.deleteObject).to.have.been.calledWith({\n          Bucket: bucket,\n          Key: key\n        });\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should list the objects in the directory","suites":["S3PersistorTests","deleteDirectory","with valid parameters"],"updatePoint":{"line":575,"column":50,"index":18790},"line":575,"code":"      it('should list the objects in the directory', function () {\n        expect(S3Client.listObjectsV2).to.have.been.calledWith({\n          Bucket: bucket,\n          Prefix: key\n        });\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should delete the objects using their keys","suites":["S3PersistorTests","deleteDirectory","with valid parameters"],"updatePoint":{"line":581,"column":52,"index":18994},"line":581,"code":"      it('should delete the objects using their keys', function () {\n        expect(S3Client.deleteObjects).to.have.been.calledWith({\n          Bucket: bucket,\n          Delete: {\n            Objects: [{\n              Key: 'llama'\n            }, {\n              Key: 'hippo'\n            }],\n            Quiet: true\n          }\n        });\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should list the objects in the directory","suites":["S3PersistorTests","deleteDirectory","when there are no files"],"updatePoint":{"line":604,"column":50,"index":19656},"line":604,"code":"      it('should list the objects in the directory', function () {\n        expect(S3Client.listObjectsV2).to.have.been.calledWith({\n          Bucket: bucket,\n          Prefix: key\n        });\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should not try to delete any objects","suites":["S3PersistorTests","deleteDirectory","when there are no files"],"updatePoint":{"line":610,"column":46,"index":19854},"line":610,"code":"      it('should not try to delete any objects', function () {\n        expect(S3Client.deleteObjects).not.to.have.been.called;\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should list the objects a second time, with a continuation token","suites":["S3PersistorTests","deleteDirectory","when there are more files available"],"updatePoint":{"line":626,"column":74,"index":20471},"line":626,"code":"      it('should list the objects a second time, with a continuation token', function () {\n        expect(S3Client.listObjectsV2).to.be.calledTwice;\n        expect(S3Client.listObjectsV2).to.be.calledWith({\n          Bucket: bucket,\n          Prefix: key\n        });\n        expect(S3Client.listObjectsV2).to.be.calledWith({\n          Bucket: bucket,\n          Prefix: key,\n          ContinuationToken: continuationToken\n        });\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should delete both sets of files","suites":["S3PersistorTests","deleteDirectory","when there are more files available"],"updatePoint":{"line":638,"column":42,"index":20882},"line":638,"code":"      it('should delete both sets of files', function () {\n        expect(S3Client.deleteObjects).to.have.been.calledTwice;\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should generate a ReadError","suites":["S3PersistorTests","deleteDirectory","when there is an error listing the objects"],"updatePoint":{"line":654,"column":37,"index":21407},"line":654,"code":"      it('should generate a ReadError', function () {\n        expect(error).to.be.an.instanceOf(Errors.ReadError);\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should wrap the error","suites":["S3PersistorTests","deleteDirectory","when there is an error listing the objects"],"updatePoint":{"line":657,"column":31,"index":21526},"line":657,"code":"      it('should wrap the error', function () {\n        expect(error.cause).to.equal(genericError);\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should not try to delete any objects","suites":["S3PersistorTests","deleteDirectory","when there is an error listing the objects"],"updatePoint":{"line":660,"column":46,"index":21651},"line":660,"code":"      it('should not try to delete any objects', function () {\n        expect(S3Client.deleteObjects).not.to.have.been.called;\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should generate a WriteError","suites":["S3PersistorTests","deleteDirectory","when there is an error deleting the objects"],"updatePoint":{"line":676,"column":38,"index":22177},"line":676,"code":"      it('should generate a WriteError', function () {\n        expect(error).to.be.an.instanceOf(Errors.WriteError);\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should wrap the error","suites":["S3PersistorTests","deleteDirectory","when there is an error deleting the objects"],"updatePoint":{"line":679,"column":31,"index":22297},"line":679,"code":"      it('should wrap the error', function () {\n        expect(error.cause).to.equal(genericError);\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should list the objects in the directory","suites":["S3PersistorTests","directorySize","with valid parameters"],"updatePoint":{"line":690,"column":50,"index":22658},"line":690,"code":"      it('should list the objects in the directory', function () {\n        expect(S3Client.listObjectsV2).to.have.been.calledWith({\n          Bucket: bucket,\n          Prefix: key\n        });\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should return the directory size","suites":["S3PersistorTests","directorySize","with valid parameters"],"updatePoint":{"line":696,"column":42,"index":22852},"line":696,"code":"      it('should return the directory size', function () {\n        expect(size).to.equal(filesSize);\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should list the objects in the directory","suites":["S3PersistorTests","directorySize","when there are no files"],"updatePoint":{"line":710,"column":50,"index":23306},"line":710,"code":"      it('should list the objects in the directory', function () {\n        expect(S3Client.listObjectsV2).to.have.been.calledWith({\n          Bucket: bucket,\n          Prefix: key\n        });\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should return zero","suites":["S3PersistorTests","directorySize","when there are no files"],"updatePoint":{"line":716,"column":28,"index":23486},"line":716,"code":"      it('should return zero', function () {\n        expect(size).to.equal(0);\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should list the objects a second time, with a continuation token","suites":["S3PersistorTests","directorySize","when there are more files available"],"updatePoint":{"line":733,"column":74,"index":24093},"line":733,"code":"      it('should list the objects a second time, with a continuation token', function () {\n        expect(S3Client.listObjectsV2).to.be.calledTwice;\n        expect(S3Client.listObjectsV2).to.be.calledWith({\n          Bucket: bucket,\n          Prefix: key\n        });\n        expect(S3Client.listObjectsV2).to.be.calledWith({\n          Bucket: bucket,\n          Prefix: key,\n          ContinuationToken: continuationToken\n        });\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should return the size of both sets of files","suites":["S3PersistorTests","directorySize","when there are more files available"],"updatePoint":{"line":745,"column":54,"index":24516},"line":745,"code":"      it('should return the size of both sets of files', function () {\n        expect(size).to.equal(filesSize * 2);\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should generate a ReadError","suites":["S3PersistorTests","directorySize","when there is an error listing the objects"],"updatePoint":{"line":761,"column":37,"index":25020},"line":761,"code":"      it('should generate a ReadError', function () {\n        expect(error).to.be.an.instanceOf(Errors.ReadError);\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should wrap the error","suites":["S3PersistorTests","directorySize","when there is an error listing the objects"],"updatePoint":{"line":764,"column":31,"index":25139},"line":764,"code":"      it('should wrap the error', function () {\n        expect(error.cause).to.equal(genericError);\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should get the object header","suites":["S3PersistorTests","checkIfObjectExists","when the file exists"],"updatePoint":{"line":775,"column":38,"index":25503},"line":775,"code":"      it('should get the object header', function () {\n        expect(S3Client.headObject).to.have.been.calledWith({\n          Bucket: bucket,\n          Key: key\n        });\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should return that the file exists","suites":["S3PersistorTests","checkIfObjectExists","when the file exists"],"updatePoint":{"line":781,"column":44,"index":25693},"line":781,"code":"      it('should return that the file exists', function () {\n        expect(exists).to.equal(true);\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should get the object header","suites":["S3PersistorTests","checkIfObjectExists","when the file does not exist"],"updatePoint":{"line":793,"column":38,"index":26120},"line":793,"code":"      it('should get the object header', function () {\n        expect(S3Client.headObject).to.have.been.calledWith({\n          Bucket: bucket,\n          Key: key\n        });\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should return that the file does not exist","suites":["S3PersistorTests","checkIfObjectExists","when the file does not exist"],"updatePoint":{"line":799,"column":52,"index":26318},"line":799,"code":"      it('should return that the file does not exist', function () {\n        expect(exists).to.equal(false);\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should generate a ReadError","suites":["S3PersistorTests","checkIfObjectExists","when there is an error"],"updatePoint":{"line":815,"column":37,"index":26799},"line":815,"code":"      it('should generate a ReadError', function () {\n        expect(error).to.be.an.instanceOf(Errors.ReadError);\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should wrap the upstream ReadError","suites":["S3PersistorTests","checkIfObjectExists","when there is an error"],"updatePoint":{"line":818,"column":44,"index":26931},"line":818,"code":"      it('should wrap the upstream ReadError', function () {\n        expect(error.cause).to.be.an.instanceOf(Errors.ReadError);\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should eventually wrap the error","suites":["S3PersistorTests","checkIfObjectExists","when there is an error"],"updatePoint":{"line":821,"column":42,"index":27067},"line":821,"code":"      it('should eventually wrap the error', function () {\n        expect(error.cause.cause).to.equal(genericError);\n      });","file":"unit/S3PersistorTests.js","skipped":false,"dir":"libraries/object-persistor/test"},{"name":"should throw an error when creating a client","suites":["index","redis-sentinel"],"updatePoint":{"line":59,"column":52,"index":1761},"line":59,"code":"    it('should throw an error when creating a client', function () {\n      const redisSentinelOptions = {\n        endpoints: ['127.0.0.1:1234', '127.0.0.1:2345', '127.0.0.1:3456']\n      };\n      const createNewClient = () => {\n        this.redis.createClient(redisSentinelOptions);\n      };\n      expect(createNewClient).to.throw('@overleaf/redis-wrapper: redis-sentinel is no longer supported');\n    });","file":"unit/src/test.js","skipped":false,"dir":"libraries/redis-wrapper/test"},{"name":"should work without opts","suites":["index","single node redis"],"updatePoint":{"line":77,"column":32,"index":2367},"line":77,"code":"    it('should work without opts', function () {\n      this.redis.createClient();\n    });","file":"unit/src/test.js","skipped":false,"dir":"libraries/redis-wrapper/test"},{"name":"should use the ioredis driver in single-instance mode if a non array is passed","suites":["index","single node redis"],"updatePoint":{"line":80,"column":86,"index":2511},"line":80,"code":"    it('should use the ioredis driver in single-instance mode if a non array is passed', function () {\n      const client = this.redis.createClient(this.standardOpts);\n      return assert.equal(client.constructor, this.ioredis);\n    });","file":"unit/src/test.js","skipped":false,"dir":"libraries/redis-wrapper/test"},{"name":"should call createClient for the ioredis driver in single-instance mode if a non array is passed","suites":["index","single node redis"],"updatePoint":{"line":84,"column":111,"index":2773},"line":84,"code":"    return it('should call createClient for the ioredis driver in single-instance mode if a non array is passed', function () {\n      this.redis.createClient(this.standardOpts);\n      return this.ioredisConstructor.calledWith(sinon.match(this.standardOpts)).should.equal(true);\n    });","file":"unit/src/test.js","skipped":false,"dir":"libraries/redis-wrapper/test"},{"name":"should pass the options correctly though with no options","suites":["index","cluster"],"updatePoint":{"line":109,"column":64,"index":3447},"line":109,"code":"    it('should pass the options correctly though with no options', function () {\n      const client = this.redis.createClient({\n        cluster: this.cluster\n      });\n      assert(client instanceof this.ioredis.Cluster);\n      return client.config.should.deep.equal(this.cluster);\n    });","file":"unit/src/test.js","skipped":false,"dir":"libraries/redis-wrapper/test"},{"name":"should not pass the key_schema through to the driver","suites":["index","cluster"],"updatePoint":{"line":116,"column":60,"index":3733},"line":116,"code":"    it('should not pass the key_schema through to the driver', function () {\n      const client = this.redis.createClient({\n        cluster: this.cluster,\n        key_schema: 'foobar'\n      });\n      assert(client instanceof this.ioredis.Cluster);\n      client.config.should.deep.equal(this.cluster);\n      return expect(client.options).to.deep.equal({\n        retry_max_delay: 5000\n      });\n    });","file":"unit/src/test.js","skipped":false,"dir":"libraries/redis-wrapper/test"},{"name":"should pass the options correctly though with additional options","suites":["index","cluster"],"updatePoint":{"line":127,"column":79,"index":4153},"line":127,"code":"    return it('should pass the options correctly though with additional options', function () {\n      const client = this.redis.createClient(this.settings);\n      assert(client instanceof this.ioredis.Cluster);\n      client.config.should.deep.equal(this.cluster);\n      // need to use expect here because of _.clone in sandbox\n      return expect(client.options).to.deep.equal({\n        redisOptions: this.extraOptions,\n        retry_max_delay: 5000\n      });\n    });","file":"unit/src/test.js","skipped":false,"dir":"libraries/redis-wrapper/test"},{"name":"should return the old redis format for an array","suites":["index","monkey patch ioredis exec"],"updatePoint":{"line":152,"column":55,"index":5076},"line":152,"code":"    it('should return the old redis format for an array', function () {\n      this.results[0] = [null, 42];\n      this.results[1] = [null, 'foo'];\n      this.multi.exec(this.callback);\n      return this.callback.calledWith(null, [42, 'foo']).should.equal(true);\n    });","file":"unit/src/test.js","skipped":false,"dir":"libraries/redis-wrapper/test"},{"name":"should return the old redis format when there is an error","suites":["index","monkey patch ioredis exec"],"updatePoint":{"line":158,"column":72,"index":5363},"line":158,"code":"    return it('should return the old redis format when there is an error', function () {\n      this.results[0] = [null, 42];\n      this.results[1] = ['error', 'foo'];\n      this.multi.exec(this.callback);\n      return this.callback.calledWith('error').should.equal(true);\n    });","file":"unit/src/test.js","skipped":false,"dir":"libraries/redis-wrapper/test"},{"name":"should then remove the message from the threads","suites":["Deleting a message","in a thread"],"updatePoint":{"line":28,"column":55,"index":1113},"line":28,"code":"    it('should then remove the message from the threads', async function () {\n      const {\n        response,\n        body: threads\n      } = await ChatClient.getThreads(projectId);\n      expect(response.statusCode).to.equal(200);\n      expect(threads[threadId].messages.length).to.equal(1);\n    });","file":"acceptance/js/DeletingAMessageTests.js","skipped":false,"dir":"services/chat/test"},{"name":"should then not list the thread for the project","suites":["Deleting a thread","with a thread that is deleted"],"updatePoint":{"line":24,"column":55,"index":954},"line":24,"code":"    it('should then not list the thread for the project', async function () {\n      const {\n        response,\n        body: threads\n      } = await ChatClient.getThreads(projectId);\n      expect(response.statusCode).to.equal(200);\n      expect(Object.keys(threads).length).to.equal(0);\n    });","file":"acceptance/js/DeletingAThreadTests.js","skipped":false,"dir":"services/chat/test"},{"name":"should remove the messages and threads from the database","suites":["Destroying a project","with a project that has threads and messages"],"updatePoint":{"line":43,"column":64,"index":1764},"line":43,"code":"    it('should remove the messages and threads from the database', async function () {\n      const threadRooms = await db.rooms.find({\n        project_id: ObjectId(projectId)\n      }).toArray();\n      expect(threadRooms.length).to.equal(0);\n      const threadMessage = await getMessage(this.threadMessageId);\n      expect(threadMessage).to.be.null;\n      const globalThreadMessage = await getMessage(this.globalThreadMessageId);\n      expect(globalThreadMessage).to.be.null;\n    });","file":"acceptance/js/DestroyingAProjectTests.js","skipped":false,"dir":"services/chat/test"},{"name":"should then list the updated message in the threads","suites":["Editing a message","in a thread","without user"],"updatePoint":{"line":34,"column":61,"index":1278},"line":34,"code":"      it('should then list the updated message in the threads', async function () {\n        const {\n          response,\n          body: threads\n        } = await ChatClient.getThreads(projectId);\n        expect(response.statusCode).to.equal(200);\n        expect(threads[threadId].messages.length).to.equal(1);\n        expect(threads[threadId].messages[0].content).to.equal(newContent);\n      });","file":"acceptance/js/EditingAMessageTests.js","skipped":false,"dir":"services/chat/test"},{"name":"should then list the updated message in the threads","suites":["Editing a message","in a thread","with the same user"],"updatePoint":{"line":51,"column":61,"index":1966},"line":51,"code":"      it('should then list the updated message in the threads', async function () {\n        const {\n          response,\n          body: threads\n        } = await ChatClient.getThreads(projectId);\n        expect(response.statusCode).to.equal(200);\n        expect(threads[threadId].messages.length).to.equal(1);\n        expect(threads[threadId].messages[0].content).to.equal(newContent);\n      });","file":"acceptance/js/EditingAMessageTests.js","skipped":false,"dir":"services/chat/test"},{"name":"should then list the old message in the threads","suites":["Editing a message","in a thread","with another user"],"updatePoint":{"line":68,"column":57,"index":2653},"line":68,"code":"      it('should then list the old message in the threads', async function () {\n        const {\n          response,\n          body: threads\n        } = await ChatClient.getThreads(projectId);\n        expect(response.statusCode).to.equal(200);\n        expect(threads[threadId].messages.length).to.equal(1);\n        expect(threads[threadId].messages[0].content).to.equal(content);\n      });","file":"acceptance/js/EditingAMessageTests.js","skipped":false,"dir":"services/chat/test"},{"name":"should contain the messages and populated users when getting the messages","suites":["Getting messages","globally"],"updatePoint":{"line":38,"column":81,"index":1514},"line":38,"code":"    it('should contain the messages and populated users when getting the messages', async function () {\n      const {\n        response,\n        body: messages\n      } = await ChatClient.getGlobalMessages(projectId);\n      expect(response.statusCode).to.equal(200);\n      expect(messages.length).to.equal(2);\n      messages.reverse();\n      expect(messages[0].content).to.equal(content1);\n      expect(messages[0].user_id).to.equal(userId1);\n      expect(messages[1].content).to.equal(content2);\n      expect(messages[1].user_id).to.equal(userId2);\n    });","file":"acceptance/js/GettingMessagesTests.js","skipped":false,"dir":"services/chat/test"},{"name":"should contain a dictionary of threads with messages with populated users","suites":["Getting messages","from all the threads"],"updatePoint":{"line":74,"column":81,"index":2976},"line":74,"code":"    it('should contain a dictionary of threads with messages with populated users', async function () {\n      const {\n        response,\n        body: threads\n      } = await ChatClient.getThreads(projectId);\n      expect(response.statusCode).to.equal(200);\n      expect(Object.keys(threads).length).to.equal(2);\n      const thread1 = threads[threadId1];\n      expect(thread1.messages.length).to.equal(2);\n      const thread2 = threads[threadId2];\n      expect(thread2.messages.length).to.equal(2);\n      expect(thread1.messages[0].content).to.equal('one');\n      expect(thread1.messages[0].user_id).to.equal(userId1);\n      expect(thread1.messages[1].content).to.equal('three');\n      expect(thread1.messages[1].user_id).to.equal(userId1);\n      expect(thread2.messages[0].content).to.equal('two');\n      expect(thread2.messages[0].user_id).to.equal(userId2);\n      expect(thread2.messages[1].content).to.equal('four');\n      expect(thread2.messages[1].user_id).to.equal(userId2);\n    });","file":"acceptance/js/GettingMessagesTests.js","skipped":false,"dir":"services/chat/test"},{"name":"should then list the thread as resolved","suites":["Resolving a thread","with a resolved thread"],"updatePoint":{"line":24,"column":47,"index":943},"line":24,"code":"    it('should then list the thread as resolved', async function () {\n      const {\n        response,\n        body: threads\n      } = await ChatClient.getThreads(projectId);\n      expect(response.statusCode).to.equal(200);\n      expect(threads[threadId].resolved).to.equal(true);\n      expect(threads[threadId].resolved_by_user_id).to.equal(userId);\n      const resolvedAt = new Date(threads[threadId].resolved_at);\n      expect(new Date() - resolvedAt).to.be.below(1000);\n    });","file":"acceptance/js/ResolvingAThreadTests.js","skipped":false,"dir":"services/chat/test"},{"name":"should not list the thread as resolved","suites":["Resolving a thread","when a thread is not resolved"],"updatePoint":{"line":45,"column":46,"index":1770},"line":45,"code":"    it('should not list the thread as resolved', async function () {\n      const {\n        response,\n        body: threads\n      } = await ChatClient.getThreads(projectId);\n      expect(response.statusCode).to.equal(200);\n      expect(threads[threadId].resolved).to.be.undefined;\n    });","file":"acceptance/js/ResolvingAThreadTests.js","skipped":false,"dir":"services/chat/test"},{"name":"should not list the thread as resolved","suites":["Resolving a thread","when a thread is resolved then reopened"],"updatePoint":{"line":71,"column":46,"index":2736},"line":71,"code":"    it('should not list the thread as resolved', async function () {\n      const {\n        response,\n        body: threads\n      } = await ChatClient.getThreads(projectId);\n      expect(response.statusCode).to.equal(200);\n      expect(threads[threadId].resolved).to.be.undefined;\n    });","file":"acceptance/js/ResolvingAThreadTests.js","skipped":false,"dir":"services/chat/test"},{"name":"should then list the message in the project messages","suites":["Sending a message","globally"],"updatePoint":{"line":23,"column":60,"index":885},"line":23,"code":"    it('should then list the message in the project messages', async function () {\n      const {\n        response,\n        body: messages\n      } = await ChatClient.getGlobalMessages(projectId);\n      expect(response.statusCode).to.equal(200);\n      expect(messages.length).to.equal(1);\n      expect(messages[0].content).to.equal(content);\n    });","file":"acceptance/js/SendingAMessageTests.js","skipped":false,"dir":"services/chat/test"},{"name":"should then list the message in the threads","suites":["Sending a message","to a thread"],"updatePoint":{"line":48,"column":51,"index":1795},"line":48,"code":"    it('should then list the message in the threads', async function () {\n      const {\n        response,\n        body: threads\n      } = await ChatClient.getThreads(projectId);\n      expect(response.statusCode).to.equal(200);\n      expect(threads[threadId].messages.length).to.equal(1);\n      expect(threads[threadId].messages[0].content).to.equal(content);\n    });","file":"acceptance/js/SendingAMessageTests.js","skipped":false,"dir":"services/chat/test"},{"name":"should not appear in the global messages","suites":["Sending a message","to a thread"],"updatePoint":{"line":57,"column":48,"index":2159},"line":57,"code":"    it('should not appear in the global messages', async function () {\n      const {\n        response,\n        body: messages\n      } = await ChatClient.getGlobalMessages(projectId);\n      expect(response.statusCode).to.equal(200);\n      expect(messages.length).to.equal(0);\n    });","file":"acceptance/js/SendingAMessageTests.js","skipped":false,"dir":"services/chat/test"},{"name":"should return a graceful error","suites":["Sending a message","failure cases","with a malformed userId"],"updatePoint":{"line":71,"column":40,"index":2679},"line":71,"code":"      it('should return a graceful error', async function () {\n        const {\n          response,\n          body\n        } = await ChatClient.sendMessage(projectId, threadId, 'malformed-user', 'content');\n        expect(response.statusCode).to.equal(400);\n        expect(body).to.equal('Invalid userId');\n      });","file":"acceptance/js/SendingAMessageTests.js","skipped":false,"dir":"services/chat/test"},{"name":"should return a graceful error","suites":["Sending a message","failure cases","with a malformed projectId"],"updatePoint":{"line":81,"column":40,"index":3066},"line":81,"code":"      it('should return a graceful error', async function () {\n        const {\n          response,\n          body\n        } = await ChatClient.sendMessage('malformed-project', threadId, userId, 'content');\n        expect(response.statusCode).to.equal(400);\n        expect(body).to.equal('Invalid projectId');\n      });","file":"acceptance/js/SendingAMessageTests.js","skipped":false,"dir":"services/chat/test"},{"name":"should return a graceful error","suites":["Sending a message","failure cases","with a malformed threadId"],"updatePoint":{"line":91,"column":40,"index":3455},"line":91,"code":"      it('should return a graceful error', async function () {\n        const {\n          response,\n          body\n        } = await ChatClient.sendMessage(projectId, 'malformed-thread-id', userId, 'content');\n        expect(response.statusCode).to.equal(400);\n        expect(body).to.equal('Invalid threadId');\n      });","file":"acceptance/js/SendingAMessageTests.js","skipped":false,"dir":"services/chat/test"},{"name":"should return a graceful error","suites":["Sending a message","failure cases","with no content"],"updatePoint":{"line":101,"column":40,"index":3836},"line":101,"code":"      it('should return a graceful error', async function () {\n        const {\n          response,\n          body\n        } = await ChatClient.sendMessage(projectId, threadId, userId, null);\n        expect(response.statusCode).to.equal(400);\n        // Exegesis is responding with validation errors. I can´t find a way to choose the validation error yet.\n        // expect(body).to.equal('No content provided')\n        expect(body.message).to.equal('Validation errors');\n      });","file":"acceptance/js/SendingAMessageTests.js","skipped":false,"dir":"services/chat/test"},{"name":"should return a graceful error","suites":["Sending a message","failure cases","with very long content"],"updatePoint":{"line":113,"column":40,"index":4384},"line":113,"code":"      it('should return a graceful error', async function () {\n        const content = '-'.repeat(10 * 1024 + 1);\n        const {\n          response,\n          body\n        } = await ChatClient.sendMessage(projectId, threadId, userId, content);\n        expect(response.statusCode).to.equal(400);\n        expect(body).to.equal('Content too long (> 10240 bytes)');\n      });","file":"acceptance/js/SendingAMessageTests.js","skipped":false,"dir":"services/chat/test"},{"name":"should return an empty array","suites":["Getting Contacts","with no contacts"],"updatePoint":{"line":22,"column":36,"index":610},"line":22,"code":"    it('should return an empty array', function (done) {\n      request({\n        method: 'GET',\n        url: `${HOST}/user/${this.user_id}/contacts`,\n        json: true\n      }, (error, response, body) => {\n        if (error) {\n          return done(error);\n        }\n        response.statusCode.should.equal(200);\n        body.contact_ids.should.deep.equal([]);\n        done();\n      });\n    });","file":"acceptance/js/GettingContactsTests.js","skipped":false,"dir":"services/contacts/test"},{"name":"should return a sorted list of contacts","suites":["Getting Contacts","with contacts"],"updatePoint":{"line":54,"column":47,"index":1847},"line":54,"code":"    it('should return a sorted list of contacts', function (done) {\n      request({\n        method: 'GET',\n        url: `${HOST}/user/${this.user_id}/contacts`,\n        json: true\n      }, (error, response, body) => {\n        if (error) {\n          return done(error);\n        }\n        response.statusCode.should.equal(200);\n        body.contact_ids.should.deep.equal([this.contact_id_2, this.contact_id_3, this.contact_id_1]);\n        done();\n      });\n    });","file":"acceptance/js/GettingContactsTests.js","skipped":false,"dir":"services/contacts/test"},{"name":"should respect a limit and only return top X contacts","suites":["Getting Contacts","with contacts"],"updatePoint":{"line":68,"column":61,"index":2324},"line":68,"code":"    it('should respect a limit and only return top X contacts', function (done) {\n      request({\n        method: 'GET',\n        url: `${HOST}/user/${this.user_id}/contacts?limit=2`,\n        json: true\n      }, (error, response, body) => {\n        if (error) {\n          return done(error);\n        }\n        response.statusCode.should.equal(200);\n        body.contact_ids.should.deep.equal([this.contact_id_2, this.contact_id_3]);\n        done();\n      });\n    });","file":"acceptance/js/GettingContactsTests.js","skipped":false,"dir":"services/contacts/test"},{"name":"should increment the contact count and timestamp","suites":["ContactManager","touchContact","with a valid user_id"],"updatePoint":{"line":28,"column":58,"index":852},"line":28,"code":"      it('should increment the contact count and timestamp', async function () {\n        await expect(this.ContactManager.touchContact(this.user_id, 'mock_contact')).not.to.be.rejected;\n        expect(this.db.contacts.updateOne).to.be.calledWith({\n          user_id: sinon.match(o => o.toString() === this.user_id)\n        }, {\n          $inc: {\n            'contacts.mock_contact.n': 1\n          },\n          $set: {\n            'contacts.mock_contact.ts': new Date()\n          }\n        }, {\n          upsert: true\n        });\n      });","file":"unit/js/ContactsManagerTests.js","skipped":false,"dir":"services/contacts/test"},{"name":"should be rejected","suites":["ContactManager","touchContact","with an invalid user id"],"updatePoint":{"line":45,"column":28,"index":1423},"line":45,"code":"      it('should be rejected', async function () {\n        await expect(this.ContactManager.touchContact('not-valid-object-id', this.contact_id)).to.be.rejectedWith('Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer');\n      });","file":"unit/js/ContactsManagerTests.js","skipped":false,"dir":"services/contacts/test"},{"name":"should find the user's contacts","suites":["ContactManager","getContacts","with a valid user_id"],"updatePoint":{"line":58,"column":41,"index":1987},"line":58,"code":"      it(\"should find the user's contacts\", async function () {\n        await expect(this.ContactManager.getContacts(this.user_id)).to.eventually.deep.equal(this.user.contacts);\n        expect(this.db.contacts.findOne).to.be.calledWith({\n          user_id: sinon.match(o => o.toString() === this.user_id)\n        });\n      });","file":"unit/js/ContactsManagerTests.js","skipped":false,"dir":"services/contacts/test"},{"name":"should be rejected","suites":["ContactManager","getContacts","with an invalid user id"],"updatePoint":{"line":66,"column":28,"index":2363},"line":66,"code":"      it('should be rejected', async function () {\n        await expect(this.ContactManager.getContacts('not-valid-object-id')).to.be.rejected;\n      });","file":"unit/js/ContactsManagerTests.js","skipped":false,"dir":"services/contacts/test"},{"name":"should update the contact in the user's contact list","suites":["HttpController","addContact","with a valid user_id and contact_id"],"updatePoint":{"line":50,"column":62,"index":1496},"line":50,"code":"      it(\"should update the contact in the user's contact list\", function () {\n        expect(this.ContactManager.touchContact).to.be.calledWith(this.user_id, this.contact_id);\n      });","file":"unit/js/HttpControllerTests.js","skipped":false,"dir":"services/contacts/test"},{"name":"should update the user in the contact's contact list","suites":["HttpController","addContact","with a valid user_id and contact_id"],"updatePoint":{"line":53,"column":62,"index":1683},"line":53,"code":"      it(\"should update the user in the contact's contact list\", function () {\n        expect(this.ContactManager.touchContact).to.be.calledWith(this.contact_id, this.user_id);\n      });","file":"unit/js/HttpControllerTests.js","skipped":false,"dir":"services/contacts/test"},{"name":"should send back a 204 status","suites":["HttpController","addContact","with a valid user_id and contact_id"],"updatePoint":{"line":56,"column":39,"index":1847},"line":56,"code":"      it('should send back a 204 status', function () {\n        expect(this.res.sendStatus).to.be.calledWith(204);\n      });","file":"unit/js/HttpControllerTests.js","skipped":false,"dir":"services/contacts/test"},{"name":"should return 400, Bad Request","suites":["HttpController","addContact","with an invalid contact id"],"updatePoint":{"line":70,"column":40,"index":2295},"line":70,"code":"      it('should return 400, Bad Request', function () {\n        expect(this.res.status).to.be.calledWith(400);\n        expect(this.res.send).to.be.calledWith('contact_id should be a non-blank string');\n      });","file":"unit/js/HttpControllerTests.js","skipped":false,"dir":"services/contacts/test"},{"name":"should look up the contacts in mongo","suites":["HttpController","getContacts","normally"],"updatePoint":{"line":85,"column":46,"index":2832},"line":85,"code":"      it('should look up the contacts in mongo', function () {\n        expect(this.ContactManager.getContacts).to.be.calledWith(this.user_id);\n      });","file":"unit/js/HttpControllerTests.js","skipped":false,"dir":"services/contacts/test"},{"name":"should return a sorted list of contacts by count and timestamp","suites":["HttpController","getContacts","normally"],"updatePoint":{"line":88,"column":72,"index":3011},"line":88,"code":"      it('should return a sorted list of contacts by count and timestamp', function () {\n        expect(this.res.json).to.be.calledWith({\n          contact_ids: ['user-id-2', 'user-id-1', 'user-id-3']\n        });\n      });","file":"unit/js/HttpControllerTests.js","skipped":false,"dir":"services/contacts/test"},{"name":"should return the most commonly used contacts up to the limit","suites":["HttpController","getContacts","with more contacts than the limit"],"updatePoint":{"line":104,"column":71,"index":3558},"line":104,"code":"      it('should return the most commonly used contacts up to the limit', function () {\n        expect(this.res.json).to.be.calledWith({\n          contact_ids: ['user-id-2', 'user-id-1']\n        });\n      });","file":"unit/js/HttpControllerTests.js","skipped":false,"dir":"services/contacts/test"},{"name":"should return an empty list","suites":["HttpController","getContacts","without a contact list"],"updatePoint":{"line":117,"column":37,"index":4034},"line":117,"code":"      it('should return an empty list', function () {\n        expect(this.res.json).to.be.calledWith({\n          contact_ids: []\n        });\n      });","file":"unit/js/HttpControllerTests.js","skipped":false,"dir":"services/contacts/test"},{"name":"should archive all the docs","suites":["Archiving","multiple docs in a project"],"updatePoint":{"line":73,"column":35,"index":2402},"line":73,"code":"    it('should archive all the docs', function (done) {\n      this.res.statusCode.should.equal(204);\n      return done();\n    });","file":"acceptance/js/ArchiveDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should set inS3 and unset lines and ranges in each doc","suites":["Archiving","multiple docs in a project"],"updatePoint":{"line":77,"column":62,"index":2559},"line":77,"code":"    it('should set inS3 and unset lines and ranges in each doc', function (done) {\n      const jobs = Array.from(this.docs).map(doc => (doc => {\n        return callback => {\n          return db.docs.findOne({\n            _id: doc._id\n          }, (error, doc) => {\n            if (error) return callback(error);\n            expect(doc.lines).not.to.exist;\n            expect(doc.ranges).not.to.exist;\n            doc.inS3.should.equal(true);\n            return callback();\n          });\n        };\n      })(doc));\n      return async.series(jobs, done);\n    });","file":"acceptance/js/ArchiveDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should set the docs in s3 correctly","suites":["Archiving","multiple docs in a project"],"updatePoint":{"line":93,"column":43,"index":3101},"line":93,"code":"    it('should set the docs in s3 correctly', function (done) {\n      const jobs = Array.from(this.docs).map(doc => (doc => {\n        return callback => {\n          return DocstoreClient.getS3Doc(this.project_id, doc._id, (error, s3Doc) => {\n            if (error) return callback(error);\n            s3Doc.lines.should.deep.equal(doc.lines);\n            s3Doc.ranges.should.deep.equal(doc.ranges);\n            callback();\n          });\n        };\n      })(doc));\n      return async.series(jobs, done);\n    });","file":"acceptance/js/ArchiveDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return the docs","suites":["Archiving","multiple docs in a project","after unarchiving from a request for the project"],"updatePoint":{"line":116,"column":32,"index":3965},"line":116,"code":"      it('should return the docs', function (done) {\n        for (let i = 0; i < this.fetched_docs.length; i++) {\n          const doc = this.fetched_docs[i];\n          doc.lines.should.deep.equal(this.docs[i].lines);\n        }\n        return done();\n      });","file":"acceptance/js/ArchiveDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should restore the docs to mongo","suites":["Archiving","multiple docs in a project","after unarchiving from a request for the project"],"updatePoint":{"line":123,"column":49,"index":4242},"line":123,"code":"      return it('should restore the docs to mongo', function (done) {\n        const jobs = Array.from(this.docs).map((doc, i) => ((doc, i) => {\n          return callback => {\n            return db.docs.findOne({\n              _id: doc._id\n            }, (error, doc) => {\n              if (error) return callback(error);\n              doc.lines.should.deep.equal(this.docs[i].lines);\n              doc.ranges.should.deep.equal(this.docs[i].ranges);\n              expect(doc.inS3).not.to.exist;\n              return callback();\n            });\n          };\n        })(doc, i));\n        return async.series(jobs, done);\n      });","file":"acceptance/js/ArchiveDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should successully archive the docs","suites":["Archiving","a deleted doc"],"updatePoint":{"line":168,"column":43,"index":5718},"line":168,"code":"    it('should successully archive the docs', function (done) {\n      this.res.statusCode.should.equal(204);\n      return done();\n    });","file":"acceptance/js/ArchiveDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should set inS3 and unset lines and ranges in each doc","suites":["Archiving","a deleted doc"],"updatePoint":{"line":172,"column":62,"index":5875},"line":172,"code":"    it('should set inS3 and unset lines and ranges in each doc', function (done) {\n      return db.docs.findOne({\n        _id: this.doc._id\n      }, (error, doc) => {\n        if (error != null) {\n          throw error;\n        }\n        expect(doc.lines).not.to.exist;\n        expect(doc.ranges).not.to.exist;\n        doc.inS3.should.equal(true);\n        doc.deleted.should.equal(true);\n        return done();\n      });\n    });","file":"acceptance/js/ArchiveDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should set the doc in s3 correctly","suites":["Archiving","a deleted doc"],"updatePoint":{"line":186,"column":42,"index":6283},"line":186,"code":"    it('should set the doc in s3 correctly', function (done) {\n      return DocstoreClient.getS3Doc(this.project_id, this.doc._id, (error, s3Doc) => {\n        if (error != null) {\n          throw error;\n        }\n        s3Doc.lines.should.deep.equal(this.doc.lines);\n        s3Doc.ranges.should.deep.equal(this.doc.ranges);\n        return done();\n      });\n    });","file":"acceptance/js/ArchiveDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should not included the deleted","suites":["Archiving","a deleted doc","after unarchiving from a request for the project"],"updatePoint":{"line":206,"column":41,"index":7009},"line":206,"code":"      it('should not included the deleted', function (done) {\n        this.fetched_docs.length.should.equal(0);\n        return done();\n      });","file":"acceptance/js/ArchiveDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should restore the doc to mongo","suites":["Archiving","a deleted doc","after unarchiving from a request for the project"],"updatePoint":{"line":210,"column":48,"index":7161},"line":210,"code":"      return it('should restore the doc to mongo', function (done) {\n        return db.docs.findOne({\n          _id: this.doc._id\n        }, (error, doc) => {\n          if (error != null) {\n            throw error;\n          }\n          doc.lines.should.deep.equal(this.doc.lines);\n          doc.ranges.should.deep.equal(this.doc.ranges);\n          expect(doc.inS3).not.to.exist;\n          doc.deleted.should.equal(true);\n          return done();\n        });\n      });","file":"acceptance/js/ArchiveDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should not included the deleted","suites":["Archiving","a deleted doc","when keepSoftDeletedDocsArchived is enabled","after unarchiving from a request for the project"],"updatePoint":{"line":244,"column":43,"index":8455},"line":244,"code":"        it('should not included the deleted', function (done) {\n          this.fetched_docs.length.should.equal(0);\n          done();\n        });","file":"acceptance/js/ArchiveDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should not have restored the deleted doc to mongo","suites":["Archiving","a deleted doc","when keepSoftDeletedDocsArchived is enabled","after unarchiving from a request for the project"],"updatePoint":{"line":248,"column":61,"index":8619},"line":248,"code":"        it('should not have restored the deleted doc to mongo', function (done) {\n          db.docs.findOne({\n            _id: this.doc._id\n          }, (error, doc) => {\n            if (error) {\n              return done(error);\n            }\n            expect(doc.lines).to.not.exist;\n            expect(doc.ranges).to.not.exist;\n            expect(doc.inS3).to.equal(true);\n            expect(doc.deleted).to.equal(true);\n            done();\n          });\n        });","file":"acceptance/js/ArchiveDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should successully archive the doc","suites":["Archiving","archiving a single doc"],"updatePoint":{"line":288,"column":42,"index":9775},"line":288,"code":"    it('should successully archive the doc', function (done) {\n      this.res.statusCode.should.equal(204);\n      done();\n    });","file":"acceptance/js/ArchiveDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should set inS3 and unset lines and ranges in the doc","suites":["Archiving","archiving a single doc"],"updatePoint":{"line":292,"column":61,"index":9924},"line":292,"code":"    it('should set inS3 and unset lines and ranges in the doc', function (done) {\n      db.docs.findOne({\n        _id: this.doc._id\n      }, (error, doc) => {\n        if (error) {\n          return done(error);\n        }\n        expect(doc.lines).not.to.exist;\n        expect(doc.ranges).not.to.exist;\n        doc.inS3.should.equal(true);\n        done();\n      });\n    });","file":"acceptance/js/ArchiveDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should set the doc in s3 correctly","suites":["Archiving","archiving a single doc"],"updatePoint":{"line":305,"column":42,"index":10277},"line":305,"code":"    it('should set the doc in s3 correctly', function (done) {\n      DocstoreClient.getS3Doc(this.project_id, this.doc._id, (error, s3Doc) => {\n        if (error) {\n          return done(error);\n        }\n        s3Doc.lines.should.deep.equal(this.doc.lines);\n        s3Doc.ranges.should.deep.equal(this.doc.ranges);\n        done();\n      });\n    });","file":"acceptance/js/ArchiveDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should successully archive the docs","suites":["Archiving","a doc with large lines"],"updatePoint":{"line":341,"column":43,"index":11476},"line":341,"code":"    it('should successully archive the docs', function (done) {\n      this.res.statusCode.should.equal(204);\n      return done();\n    });","file":"acceptance/js/ArchiveDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should set inS3 and unset lines and ranges in each doc","suites":["Archiving","a doc with large lines"],"updatePoint":{"line":345,"column":62,"index":11633},"line":345,"code":"    it('should set inS3 and unset lines and ranges in each doc', function (done) {\n      return db.docs.findOne({\n        _id: this.doc._id\n      }, (error, doc) => {\n        if (error != null) {\n          throw error;\n        }\n        expect(doc.lines).not.to.exist;\n        expect(doc.ranges).not.to.exist;\n        doc.inS3.should.equal(true);\n        return done();\n      });\n    });","file":"acceptance/js/ArchiveDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should set the doc in s3 correctly","suites":["Archiving","a doc with large lines"],"updatePoint":{"line":358,"column":42,"index":12001},"line":358,"code":"    it('should set the doc in s3 correctly', function (done) {\n      return DocstoreClient.getS3Doc(this.project_id, this.doc._id, (error, s3Doc) => {\n        if (error != null) {\n          throw error;\n        }\n        s3Doc.lines.should.deep.equal(this.doc.lines);\n        s3Doc.ranges.should.deep.equal(this.doc.ranges);\n        return done();\n      });\n    });","file":"acceptance/js/ArchiveDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should restore the doc to mongo","suites":["Archiving","a doc with large lines","after unarchiving from a request for the project"],"updatePoint":{"line":378,"column":48,"index":12737},"line":378,"code":"      return it('should restore the doc to mongo', function (done) {\n        return db.docs.findOne({\n          _id: this.doc._id\n        }, (error, doc) => {\n          if (error != null) {\n            throw error;\n          }\n          doc.lines.should.deep.equal(this.doc.lines);\n          doc.ranges.should.deep.equal(this.doc.ranges);\n          expect(doc.inS3).not.to.exist;\n          return done();\n        });\n      });","file":"acceptance/js/ArchiveDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should successully archive the docs","suites":["Archiving","a doc with naughty strings"],"updatePoint":{"line":415,"column":43,"index":31641},"line":415,"code":"    it('should successully archive the docs', function (done) {\n      this.res.statusCode.should.equal(204);\n      return done();\n    });","file":"acceptance/js/ArchiveDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should set inS3 and unset lines and ranges in each doc","suites":["Archiving","a doc with naughty strings"],"updatePoint":{"line":419,"column":62,"index":31798},"line":419,"code":"    it('should set inS3 and unset lines and ranges in each doc', function (done) {\n      return db.docs.findOne({\n        _id: this.doc._id\n      }, (error, doc) => {\n        if (error != null) {\n          throw error;\n        }\n        expect(doc.lines).not.to.exist;\n        expect(doc.ranges).not.to.exist;\n        doc.inS3.should.equal(true);\n        return done();\n      });\n    });","file":"acceptance/js/ArchiveDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should set the doc in s3 correctly","suites":["Archiving","a doc with naughty strings"],"updatePoint":{"line":432,"column":42,"index":32166},"line":432,"code":"    it('should set the doc in s3 correctly', function (done) {\n      return DocstoreClient.getS3Doc(this.project_id, this.doc._id, (error, s3Doc) => {\n        if (error != null) {\n          throw error;\n        }\n        s3Doc.lines.should.deep.equal(this.doc.lines);\n        s3Doc.ranges.should.deep.equal(this.doc.ranges);\n        return done();\n      });\n    });","file":"acceptance/js/ArchiveDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should restore the doc to mongo","suites":["Archiving","a doc with naughty strings","after unarchiving from a request for the project"],"updatePoint":{"line":452,"column":48,"index":32902},"line":452,"code":"      return it('should restore the doc to mongo', function (done) {\n        return db.docs.findOne({\n          _id: this.doc._id\n        }, (error, doc) => {\n          if (error != null) {\n            throw error;\n          }\n          doc.lines.should.deep.equal(this.doc.lines);\n          doc.ranges.should.deep.equal(this.doc.ranges);\n          expect(doc.inS3).not.to.exist;\n          return done();\n        });\n      });","file":"acceptance/js/ArchiveDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should successully archive the docs","suites":["Archiving","a doc with ranges"],"updatePoint":{"line":523,"column":43,"index":34831},"line":523,"code":"    it('should successully archive the docs', function (done) {\n      this.res.statusCode.should.equal(204);\n      return done();\n    });","file":"acceptance/js/ArchiveDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should set inS3 and unset lines and ranges in each doc","suites":["Archiving","a doc with ranges"],"updatePoint":{"line":527,"column":62,"index":34988},"line":527,"code":"    it('should set inS3 and unset lines and ranges in each doc', function (done) {\n      return db.docs.findOne({\n        _id: this.doc._id\n      }, (error, doc) => {\n        if (error != null) {\n          throw error;\n        }\n        expect(doc.lines).not.to.exist;\n        expect(doc.ranges).not.to.exist;\n        doc.inS3.should.equal(true);\n        return done();\n      });\n    });","file":"acceptance/js/ArchiveDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should set the doc in s3 correctly","suites":["Archiving","a doc with ranges"],"updatePoint":{"line":540,"column":42,"index":35356},"line":540,"code":"    it('should set the doc in s3 correctly', function (done) {\n      return DocstoreClient.getS3Doc(this.project_id, this.doc._id, (error, s3Doc) => {\n        if (error != null) {\n          throw error;\n        }\n        s3Doc.lines.should.deep.equal(this.doc.lines);\n        const ranges = JSON.parse(JSON.stringify(this.doc.ranges)); // ObjectId -> String\n        s3Doc.ranges.should.deep.equal(ranges);\n        return done();\n      });\n    });","file":"acceptance/js/ArchiveDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should restore the doc to mongo","suites":["Archiving","a doc with ranges","after unarchiving from a request for the project"],"updatePoint":{"line":561,"column":48,"index":36173},"line":561,"code":"      return it('should restore the doc to mongo', function (done) {\n        return db.docs.findOne({\n          _id: this.doc._id\n        }, (error, doc) => {\n          if (error != null) {\n            throw error;\n          }\n          doc.lines.should.deep.equal(this.doc.lines);\n          doc.ranges.should.deep.equal(this.doc.ranges);\n          expect(doc.inS3).not.to.exist;\n          return done();\n        });\n      });","file":"acceptance/js/ArchiveDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should set inS3 and unset lines and ranges in each doc","suites":["Archiving","a doc that is archived twice"],"updatePoint":{"line":606,"column":62,"index":37602},"line":606,"code":"    it('should set inS3 and unset lines and ranges in each doc', function (done) {\n      return db.docs.findOne({\n        _id: this.doc._id\n      }, (error, doc) => {\n        if (error != null) {\n          throw error;\n        }\n        expect(doc.lines).not.to.exist;\n        expect(doc.ranges).not.to.exist;\n        doc.inS3.should.equal(true);\n        return done();\n      });\n    });","file":"acceptance/js/ArchiveDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should set the doc in s3 correctly","suites":["Archiving","a doc that is archived twice"],"updatePoint":{"line":619,"column":42,"index":37970},"line":619,"code":"    it('should set the doc in s3 correctly', function (done) {\n      return DocstoreClient.getS3Doc(this.project_id, this.doc._id, (error, s3Doc) => {\n        if (error != null) {\n          throw error;\n        }\n        s3Doc.lines.should.deep.equal(this.doc.lines);\n        s3Doc.ranges.should.deep.equal(this.doc.ranges);\n        return done();\n      });\n    });","file":"acceptance/js/ArchiveDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should restore the doc to mongo","suites":["Archiving","a doc that is archived twice","after unarchiving from a request for the project"],"updatePoint":{"line":639,"column":48,"index":38706},"line":639,"code":"      return it('should restore the doc to mongo', function (done) {\n        return db.docs.findOne({\n          _id: this.doc._id\n        }, (error, doc) => {\n          if (error != null) {\n            throw error;\n          }\n          doc.lines.should.deep.equal(this.doc.lines);\n          doc.ranges.should.deep.equal(this.doc.ranges);\n          expect(doc.inS3).not.to.exist;\n          return done();\n        });\n      });","file":"acceptance/js/ArchiveDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should restore the doc to mongo","suites":["Archiving","a doc with the old schema (just an array of lines)"],"updatePoint":{"line":684,"column":39,"index":40051},"line":684,"code":"    it('should restore the doc to mongo', function (done) {\n      return db.docs.findOne({\n        _id: this.doc._id\n      }, (error, doc) => {\n        if (error != null) {\n          throw error;\n        }\n        doc.lines.should.deep.equal(this.doc.lines);\n        expect(doc.inS3).not.to.exist;\n        return done();\n      });\n    });","file":"acceptance/js/ArchiveDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return the doc","suites":["Archiving","a doc with the old schema (just an array of lines)"],"updatePoint":{"line":696,"column":36,"index":40387},"line":696,"code":"    return it('should return the doc', function (done) {\n      this.fetched_docs[0].lines.should.deep.equal(this.doc.lines);\n      return done();\n    });","file":"acceptance/js/ArchiveDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should show as not deleted on /deleted","suites":[],"updatePoint":{"line":28,"column":44,"index":821},"line":28,"code":"  it('should show as not deleted on /deleted', function (done) {\n    DocstoreClient.isDocDeleted(this.project_id, this.doc_id, (error, res, body) => {\n      if (error) return done(error);\n      expect(res.statusCode).to.equal(200);\n      expect(body).to.have.property('deleted').to.equal(false);\n      done();\n    });\n  });","file":"acceptance/js/DeletingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should mark the doc as deleted on /deleted","suites":["when the doc exists"],"updatePoint":{"line":49,"column":50,"index":1502},"line":49,"code":"    it('should mark the doc as deleted on /deleted', function (done) {\n      DocstoreClient.isDocDeleted(this.project_id, this.doc_id, (error, res, body) => {\n        if (error) return done(error);\n        expect(res.statusCode).to.equal(200);\n        expect(body).to.have.property('deleted').to.equal(true);\n        done();\n      });\n    });","file":"acceptance/js/DeletingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should insert a deleted doc into the docs collection","suites":["when the doc exists"],"updatePoint":{"line":57,"column":60,"index":1855},"line":57,"code":"    it('should insert a deleted doc into the docs collection', function (done) {\n      db.docs.find({\n        _id: this.doc_id\n      }).toArray((error, docs) => {\n        if (error) return done(error);\n        docs[0]._id.should.deep.equal(this.doc_id);\n        docs[0].lines.should.deep.equal(this.lines);\n        docs[0].deleted.should.equal(true);\n        done();\n      });\n    });","file":"acceptance/js/DeletingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should not export the doc to s3","suites":["when the doc exists"],"updatePoint":{"line":68,"column":39,"index":2219},"line":68,"code":"    it('should not export the doc to s3', function (done) {\n      setTimeout(() => {\n        DocstoreClient.getS3Doc(this.project_id, this.doc_id, error => {\n          expect(error).to.be.instanceOf(Errors.NotFoundError);\n          done();\n        });\n      }, 1000);\n    });","file":"acceptance/js/DeletingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should set the deleted flag in the doc","suites":["when archiveOnSoftDelete is enabled"],"updatePoint":{"line":101,"column":46,"index":3316},"line":101,"code":"    it('should set the deleted flag in the doc', function (done) {\n      db.docs.findOne({\n        _id: this.doc_id\n      }, (error, doc) => {\n        if (error) {\n          return done(error);\n        }\n        expect(doc.deleted).to.equal(true);\n        done();\n      });\n    });","file":"acceptance/js/DeletingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should set inS3 and unset lines and ranges in the doc","suites":["when archiveOnSoftDelete is enabled"],"updatePoint":{"line":112,"column":61,"index":3613},"line":112,"code":"    it('should set inS3 and unset lines and ranges in the doc', function (done) {\n      db.docs.findOne({\n        _id: this.doc_id\n      }, (error, doc) => {\n        if (error) {\n          return done(error);\n        }\n        expect(doc.lines).to.not.exist;\n        expect(doc.ranges).to.not.exist;\n        expect(doc.inS3).to.equal(true);\n        done();\n      });\n    });","file":"acceptance/js/DeletingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should set the doc in s3 correctly","suites":["when archiveOnSoftDelete is enabled"],"updatePoint":{"line":125,"column":42,"index":3969},"line":125,"code":"    it('should set the doc in s3 correctly', function (done) {\n      DocstoreClient.getS3Doc(this.project_id, this.doc_id, (error, s3doc) => {\n        if (error) {\n          return done(error);\n        }\n        expect(s3doc.lines).to.deep.equal(this.lines);\n        expect(s3doc.ranges).to.deep.equal(this.ranges);\n        done();\n      });\n    });","file":"acceptance/js/DeletingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should show as not existing on /deleted","suites":["when the doc exists in another project"],"updatePoint":{"line":138,"column":47,"index":4436},"line":138,"code":"    it('should show as not existing on /deleted', function (done) {\n      DocstoreClient.isDocDeleted(otherProjectId, this.doc_id, (error, res) => {\n        if (error) return done(error);\n        expect(res.statusCode).to.equal(404);\n        done();\n      });\n    });","file":"acceptance/js/DeletingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return a 404 when trying to delete","suites":["when the doc exists in another project"],"updatePoint":{"line":145,"column":49,"index":4706},"line":145,"code":"    it('should return a 404 when trying to delete', function (done) {\n      deleteDoc(otherProjectId, this.doc_id, (error, res) => {\n        if (error) return done(error);\n        expect(res.statusCode).to.equal(404);\n        done();\n      });\n    });","file":"acceptance/js/DeletingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should show as not existing on /deleted","suites":["when the doc does not exist"],"updatePoint":{"line":154,"column":47,"index":5018},"line":154,"code":"    it('should show as not existing on /deleted', function (done) {\n      const missingDocId = ObjectId();\n      DocstoreClient.isDocDeleted(this.project_id, missingDocId, (error, res) => {\n        if (error) return done(error);\n        expect(res.statusCode).to.equal(404);\n        done();\n      });\n    });","file":"acceptance/js/DeletingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return a 404","suites":["when the doc does not exist"],"updatePoint":{"line":162,"column":27,"index":5307},"line":162,"code":"    it('should return a 404', function (done) {\n      const missingDocId = ObjectId();\n      deleteDoc(this.project_id, missingDocId, (error, res, doc) => {\n        if (error) return done(error);\n        res.statusCode.should.equal(404);\n        done();\n      });\n    });","file":"acceptance/js/DeletingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should insert the doc name into the docs collection","suites":["Delete via PATCH","when providing a custom doc name in the delete request"],"updatePoint":{"line":178,"column":59,"index":5921},"line":178,"code":"    it('should insert the doc name into the docs collection', function (done) {\n      db.docs.find({\n        _id: this.doc_id\n      }).toArray((error, docs) => {\n        if (error) return done(error);\n        expect(docs[0].name).to.equal('wombat.tex');\n        done();\n      });\n    });","file":"acceptance/js/DeletingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should insert the date into the docs collection","suites":["Delete via PATCH","when providing a custom deletedAt date in the delete request"],"updatePoint":{"line":196,"column":55,"index":6596},"line":196,"code":"    it('should insert the date into the docs collection', function (done) {\n      db.docs.find({\n        _id: this.doc_id\n      }).toArray((error, docs) => {\n        if (error) return done(error);\n        expect(docs[0].deletedAt.toISOString()).to.equal(this.deletedAt.toISOString());\n        done();\n      });\n    });","file":"acceptance/js/DeletingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should reject the request","suites":["Delete via PATCH","when providing no doc name in the delete request"],"updatePoint":{"line":213,"column":33,"index":7163},"line":213,"code":"    it('should reject the request', function () {\n      expect(this.res.statusCode).to.equal(400);\n    });","file":"acceptance/js/DeletingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should reject the request","suites":["Delete via PATCH","when providing no date in the delete request"],"updatePoint":{"line":224,"column":33,"index":7536},"line":224,"code":"    it('should reject the request', function () {\n      expect(this.res.statusCode).to.equal(400);\n    });","file":"acceptance/js/DeletingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should show nothing in deleted docs response","suites":["Delete via PATCH","before deleting anything"],"updatePoint":{"line":229,"column":52,"index":7721},"line":229,"code":"    it('should show nothing in deleted docs response', function (done) {\n      DocstoreClient.getAllDeletedDocs(this.project_id, (error, deletedDocs) => {\n        if (error) return done(error);\n        expect(deletedDocs).to.deep.equal([]);\n        done();\n      });\n    });","file":"acceptance/js/DeletingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should show the doc in deleted docs response","suites":["Delete via PATCH","when the doc gets a name on delete"],"updatePoint":{"line":242,"column":52,"index":8233},"line":242,"code":"    it('should show the doc in deleted docs response', function (done) {\n      DocstoreClient.getAllDeletedDocs(this.project_id, (error, deletedDocs) => {\n        if (error) return done(error);\n        expect(deletedDocs).to.deep.equal([{\n          _id: this.doc_id.toString(),\n          name: 'main.tex',\n          deletedAt: this.deletedAt.toISOString()\n        }]);\n        done();\n      });\n    });","file":"acceptance/js/DeletingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should show all the docs as deleted","suites":["Delete via PATCH","when the doc gets a name on delete","after deleting multiple docs"],"updatePoint":{"line":270,"column":45,"index":9524},"line":270,"code":"      it('should show all the docs as deleted', function (done) {\n        DocstoreClient.getAllDeletedDocs(this.project_id, (error, deletedDocs) => {\n          if (error) return done(error);\n          expect(deletedDocs).to.deep.equal([{\n            _id: this.doc_id3.toString(),\n            name: 'three.tex',\n            deletedAt: this.deletedAt3.toISOString()\n          }, {\n            _id: this.doc_id2.toString(),\n            name: 'two.tex',\n            deletedAt: this.deletedAt2.toISOString()\n          }, {\n            _id: this.doc_id.toString(),\n            name: 'main.tex',\n            deletedAt: this.deletedAt.toISOString()\n          }]);\n          done();\n        });\n      });","file":"acceptance/js/DeletingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should omit the first deleted doc","suites":["Delete via PATCH","when the doc gets a name on delete","after deleting multiple docs","with one more than max_deleted_docs permits"],"updatePoint":{"line":298,"column":45,"index":10580},"line":298,"code":"        it('should omit the first deleted doc', function (done) {\n          DocstoreClient.getAllDeletedDocs(this.project_id, (error, deletedDocs) => {\n            if (error) return done(error);\n            expect(deletedDocs).to.deep.equal([{\n              _id: this.doc_id3.toString(),\n              name: 'three.tex',\n              deletedAt: this.deletedAt3.toISOString()\n            }, {\n              _id: this.doc_id2.toString(),\n              name: 'two.tex',\n              deletedAt: this.deletedAt2.toISOString()\n            }\n            // dropped main.tex\n            ]);\n\n            done();\n          });\n        });","file":"acceptance/js/DeletingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should remove the doc from the docs collection","suites":["Destroying a project's documents","when the doc exists"],"updatePoint":{"line":348,"column":54,"index":12049},"line":348,"code":"    it('should remove the doc from the docs collection', function (done) {\n      db.docs.find({\n        _id: this.doc_id\n      }).toArray((err, docs) => {\n        expect(err).not.to.exist;\n        expect(docs).to.deep.equal([]);\n        done();\n      });\n    });","file":"acceptance/js/DeletingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should remove the docOps from the docOps collection","suites":["Destroying a project's documents","when the doc exists"],"updatePoint":{"line":357,"column":59,"index":12317},"line":357,"code":"    it('should remove the docOps from the docOps collection', function (done) {\n      db.docOps.find({\n        doc_id: this.doc_id\n      }).toArray((err, docOps) => {\n        expect(err).not.to.exist;\n        expect(docOps).to.deep.equal([]);\n        done();\n      });\n    });","file":"acceptance/js/DeletingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should remove the doc from the docs collection","suites":["Destroying a project's documents","when the doc is archived"],"updatePoint":{"line":376,"column":54,"index":12878},"line":376,"code":"    it('should remove the doc from the docs collection', function (done) {\n      db.docs.find({\n        _id: this.doc_id\n      }).toArray((err, docs) => {\n        expect(err).not.to.exist;\n        expect(docs).to.deep.equal([]);\n        done();\n      });\n    });","file":"acceptance/js/DeletingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should remove the docOps from the docOps collection","suites":["Destroying a project's documents","when the doc is archived"],"updatePoint":{"line":385,"column":59,"index":13146},"line":385,"code":"    it('should remove the docOps from the docOps collection', function (done) {\n      db.docOps.find({\n        doc_id: this.doc_id\n      }).toArray((err, docOps) => {\n        expect(err).not.to.exist;\n        expect(docOps).to.deep.equal([]);\n        done();\n      });\n    });","file":"acceptance/js/DeletingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should remove the doc contents from s3","suites":["Destroying a project's documents","when the doc is archived"],"updatePoint":{"line":394,"column":46,"index":13410},"line":394,"code":"    it('should remove the doc contents from s3', function (done) {\n      DocstoreClient.getS3Doc(this.project_id, this.doc_id, error => {\n        expect(error).to.be.instanceOf(Errors.NotFoundError);\n        done();\n      });\n    });","file":"acceptance/js/DeletingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"getAllDocs should return all the (non-deleted) docs","suites":["Getting all docs"],"updatePoint":{"line":68,"column":57,"index":2006},"line":68,"code":"  it('getAllDocs should return all the (non-deleted) docs', function (done) {\n    return DocstoreClient.getAllDocs(this.project_id, (error, res, docs) => {\n      if (error != null) {\n        throw error;\n      }\n      docs.length.should.equal(this.docs.length);\n      for (let i = 0; i < docs.length; i++) {\n        const doc = docs[i];\n        doc.lines.should.deep.equal(this.docs[i].lines);\n      }\n      return done();\n    });\n  });","file":"acceptance/js/GettingAllDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"getAllRanges should return all the (non-deleted) doc ranges","suites":["Getting all docs"],"updatePoint":{"line":81,"column":72,"index":2458},"line":81,"code":"  return it('getAllRanges should return all the (non-deleted) doc ranges', function (done) {\n    return DocstoreClient.getAllRanges(this.project_id, (error, res, docs) => {\n      if (error != null) {\n        throw error;\n      }\n      docs.length.should.equal(this.docs.length);\n      for (let i = 0; i < docs.length; i++) {\n        const doc = docs[i];\n        doc.ranges.should.deep.equal(this.docs[i].ranges);\n      }\n      return done();\n    });\n  });","file":"acceptance/js/GettingAllDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should successully archive the doc","suites":["Getting A Doc from Archive","for an archived doc"],"updatePoint":{"line":42,"column":42,"index":1355},"line":42,"code":"    it('should successully archive the doc', function (done) {\n      this.res.statusCode.should.equal(204);\n      done();\n    });","file":"acceptance/js/GettingDocsFromArchiveTest.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return the doc lines and version from persistent storage","suites":["Getting A Doc from Archive","for an archived doc"],"updatePoint":{"line":46,"column":71,"index":1514},"line":46,"code":"    it('should return the doc lines and version from persistent storage', function (done) {\n      return DocstoreClient.peekDoc(this.project_id, this.doc._id, {}, (error, res, doc) => {\n        if (error) return done(error);\n        res.statusCode.should.equal(200);\n        res.headers['x-doc-status'].should.equal('archived');\n        doc.lines.should.deep.equal(this.doc.lines);\n        doc.version.should.equal(this.doc.version);\n        doc.ranges.should.deep.equal(this.doc.ranges);\n        return done();\n      });\n    });","file":"acceptance/js/GettingDocsFromArchiveTest.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return the doc lines and version from persistent storage on subsequent requests","suites":["Getting A Doc from Archive","for an archived doc"],"updatePoint":{"line":57,"column":94,"index":2067},"line":57,"code":"    it('should return the doc lines and version from persistent storage on subsequent requests', function (done) {\n      return DocstoreClient.peekDoc(this.project_id, this.doc._id, {}, (error, res, doc) => {\n        if (error) return done(error);\n        res.statusCode.should.equal(200);\n        res.headers['x-doc-status'].should.equal('archived');\n        doc.lines.should.deep.equal(this.doc.lines);\n        doc.version.should.equal(this.doc.version);\n        doc.ranges.should.deep.equal(this.doc.ranges);\n        return done();\n      });\n    });","file":"acceptance/js/GettingDocsFromArchiveTest.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return the doc lines and version from mongo","suites":["Getting A Doc from Archive","for an archived doc","for an non-archived doc"],"updatePoint":{"line":80,"column":60,"index":3009},"line":80,"code":"      it('should return the doc lines and version from mongo', function (done) {\n        return DocstoreClient.peekDoc(this.project_id, this.doc._id, {}, (error, res, doc) => {\n          if (error) return done(error);\n          res.statusCode.should.equal(200);\n          res.headers['x-doc-status'].should.equal('active');\n          doc.lines.should.deep.equal(this.doc.lines);\n          doc.version.should.equal(this.doc.version);\n          doc.ranges.should.deep.equal(this.doc.ranges);\n          return done();\n        });\n      });","file":"acceptance/js/GettingDocsFromArchiveTest.js","skipped":false,"dir":"services/docstore/test"},{"name":"should get the doc lines and version","suites":["Getting a doc","when the doc exists"],"updatePoint":{"line":47,"column":51,"index":1400},"line":47,"code":"    return it('should get the doc lines and version', function (done) {\n      return DocstoreClient.getDoc(this.project_id, this.doc_id, {}, (error, res, doc) => {\n        if (error) return done(error);\n        doc.lines.should.deep.equal(this.lines);\n        doc.version.should.equal(this.version);\n        doc.ranges.should.deep.equal(this.ranges);\n        return done();\n      });\n    });","file":"acceptance/js/GettingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return a 404","suites":["Getting a doc","when the doc does not exist"],"updatePoint":{"line":58,"column":34,"index":1837},"line":58,"code":"    return it('should return a 404', function (done) {\n      const missingDocId = ObjectId();\n      return DocstoreClient.getDoc(this.project_id, missingDocId, {}, (error, res, doc) => {\n        if (error) return done(error);\n        res.statusCode.should.equal(404);\n        return done();\n      });\n    });","file":"acceptance/js/GettingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return the doc","suites":["Getting a doc","when the doc is a deleted doc"],"updatePoint":{"line":77,"column":29,"index":2576},"line":77,"code":"    it('should return the doc', function (done) {\n      return DocstoreClient.getDoc(this.project_id, this.deleted_doc_id, {\n        include_deleted: true\n      }, (error, res, doc) => {\n        if (error) return done(error);\n        doc.lines.should.deep.equal(this.lines);\n        doc.version.should.equal(this.version);\n        doc.ranges.should.deep.equal(this.ranges);\n        doc.deleted.should.equal(true);\n        return done();\n      });\n    });","file":"acceptance/js/GettingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return a 404 when the query string is not set","suites":["Getting a doc","when the doc is a deleted doc"],"updatePoint":{"line":89,"column":67,"index":3069},"line":89,"code":"    return it('should return a 404 when the query string is not set', function (done) {\n      return DocstoreClient.getDoc(this.project_id, this.deleted_doc_id, {}, (error, res, doc) => {\n        if (error) return done(error);\n        res.statusCode.should.equal(404);\n        return done();\n      });\n    });","file":"acceptance/js/GettingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return modified = false","suites":["Applying updates to a doc","when nothing has been updated"],"updatePoint":{"line":68,"column":38,"index":2021},"line":68,"code":"    it('should return modified = false', function () {\n      return this.body.modified.should.equal(false);\n    });","file":"acceptance/js/UpdatingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should not update the doc in the API","suites":["Applying updates to a doc","when nothing has been updated"],"updatePoint":{"line":71,"column":51,"index":2150},"line":71,"code":"    return it('should not update the doc in the API', function (done) {\n      return DocstoreClient.getDoc(this.project_id, this.doc_id, {}, (error, res, doc) => {\n        if (error) return done(error);\n        doc.lines.should.deep.equal(this.originalLines);\n        doc.version.should.equal(this.version);\n        doc.ranges.should.deep.equal(this.originalRanges);\n        return done();\n      });\n    });","file":"acceptance/js/UpdatingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return modified = true","suites":["Applying updates to a doc","when the lines have changed"],"updatePoint":{"line":89,"column":37,"index":2887},"line":89,"code":"    it('should return modified = true', function () {\n      return this.body.modified.should.equal(true);\n    });","file":"acceptance/js/UpdatingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return the rev","suites":["Applying updates to a doc","when the lines have changed"],"updatePoint":{"line":92,"column":29,"index":2993},"line":92,"code":"    it('should return the rev', function () {\n      return this.body.rev.should.equal(2);\n    });","file":"acceptance/js/UpdatingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should update the doc in the API","suites":["Applying updates to a doc","when the lines have changed"],"updatePoint":{"line":95,"column":47,"index":3109},"line":95,"code":"    return it('should update the doc in the API', function (done) {\n      return DocstoreClient.getDoc(this.project_id, this.doc_id, {}, (error, res, doc) => {\n        if (error) return done(error);\n        doc.lines.should.deep.equal(this.newLines);\n        doc.version.should.equal(this.version);\n        doc.ranges.should.deep.equal(this.originalRanges);\n        return done();\n      });\n    });","file":"acceptance/js/UpdatingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return modified = true","suites":["Applying updates to a doc","when the version has changed"],"updatePoint":{"line":113,"column":37,"index":3851},"line":113,"code":"    it('should return modified = true', function () {\n      return this.body.modified.should.equal(true);\n    });","file":"acceptance/js/UpdatingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return the rev","suites":["Applying updates to a doc","when the version has changed"],"updatePoint":{"line":116,"column":29,"index":3957},"line":116,"code":"    it('should return the rev', function () {\n      return this.body.rev.should.equal(1);\n    });","file":"acceptance/js/UpdatingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should update the doc in the API","suites":["Applying updates to a doc","when the version has changed"],"updatePoint":{"line":119,"column":47,"index":4073},"line":119,"code":"    return it('should update the doc in the API', function (done) {\n      return DocstoreClient.getDoc(this.project_id, this.doc_id, {}, (error, res, doc) => {\n        if (error) return done(error);\n        doc.lines.should.deep.equal(this.originalLines);\n        doc.version.should.equal(this.version + 1);\n        doc.ranges.should.deep.equal(this.originalRanges);\n        return done();\n      });\n    });","file":"acceptance/js/UpdatingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return 409","suites":["Applying updates to a doc","when the version was decremented"],"updatePoint":{"line":138,"column":25,"index":4816},"line":138,"code":"    it('should return 409', function () {\n      this.res.statusCode.should.equal(409);\n    });","file":"acceptance/js/UpdatingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should not update the doc in the API","suites":["Applying updates to a doc","when the version was decremented"],"updatePoint":{"line":141,"column":44,"index":4930},"line":141,"code":"    it('should not update the doc in the API', function (done) {\n      DocstoreClient.getDoc(this.project_id, this.doc_id, {}, (error, res, doc) => {\n        if (error) return done(error);\n        doc.lines.should.deep.equal(this.originalLines);\n        doc.version.should.equal(this.version);\n        doc.ranges.should.deep.equal(this.originalRanges);\n        done();\n      });\n    });","file":"acceptance/js/UpdatingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return modified = true","suites":["Applying updates to a doc","when the ranges have changed"],"updatePoint":{"line":159,"column":37,"index":5654},"line":159,"code":"    it('should return modified = true', function () {\n      return this.body.modified.should.equal(true);\n    });","file":"acceptance/js/UpdatingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return the rev","suites":["Applying updates to a doc","when the ranges have changed"],"updatePoint":{"line":162,"column":29,"index":5760},"line":162,"code":"    it('should return the rev', function () {\n      return this.body.rev.should.equal(2);\n    });","file":"acceptance/js/UpdatingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should update the doc in the API","suites":["Applying updates to a doc","when the ranges have changed"],"updatePoint":{"line":165,"column":47,"index":5876},"line":165,"code":"    return it('should update the doc in the API', function (done) {\n      return DocstoreClient.getDoc(this.project_id, this.doc_id, {}, (error, res, doc) => {\n        if (error) return done(error);\n        doc.lines.should.deep.equal(this.originalLines);\n        doc.version.should.equal(this.version);\n        doc.ranges.should.deep.equal(this.newRanges);\n        return done();\n      });\n    });","file":"acceptance/js/UpdatingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should create the doc","suites":["Applying updates to a doc","when the doc does not exist"],"updatePoint":{"line":185,"column":29,"index":6666},"line":185,"code":"    it('should create the doc', function () {\n      return this.body.rev.should.equal(1);\n    });","file":"acceptance/js/UpdatingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should be retreivable","suites":["Applying updates to a doc","when the doc does not exist"],"updatePoint":{"line":188,"column":36,"index":6771},"line":188,"code":"    return it('should be retreivable', function (done) {\n      return DocstoreClient.getDoc(this.project_id, this.missing_doc_id, {}, (error, res, doc) => {\n        if (error) return done(error);\n        doc.lines.should.deep.equal(this.originalLines);\n        doc.version.should.equal(0);\n        doc.ranges.should.deep.equal(this.originalRanges);\n        return done();\n      });\n    });","file":"acceptance/js/UpdatingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return 400","suites":["Applying updates to a doc","when malformed doc lines are provided","when the lines are not an array"],"updatePoint":{"line":210,"column":27,"index":7626},"line":210,"code":"      it('should return 400', function () {\n        return this.res.statusCode.should.equal(400);\n      });","file":"acceptance/js/UpdatingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should not update the doc in the API","suites":["Applying updates to a doc","when malformed doc lines are provided","when the lines are not an array"],"updatePoint":{"line":213,"column":53,"index":7760},"line":213,"code":"      return it('should not update the doc in the API', function (done) {\n        return DocstoreClient.getDoc(this.project_id, this.doc_id, {}, (error, res, doc) => {\n          if (error) return done(error);\n          doc.lines.should.deep.equal(this.originalLines);\n          return done();\n        });\n      });","file":"acceptance/js/UpdatingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return 400","suites":["Applying updates to a doc","when malformed doc lines are provided","when the lines are not present"],"updatePoint":{"line":230,"column":27,"index":8437},"line":230,"code":"      it('should return 400', function () {\n        return this.res.statusCode.should.equal(400);\n      });","file":"acceptance/js/UpdatingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should not update the doc in the API","suites":["Applying updates to a doc","when malformed doc lines are provided","when the lines are not present"],"updatePoint":{"line":233,"column":53,"index":8571},"line":233,"code":"      return it('should not update the doc in the API', function (done) {\n        return DocstoreClient.getDoc(this.project_id, this.doc_id, {}, (error, res, doc) => {\n          if (error) return done(error);\n          doc.lines.should.deep.equal(this.originalLines);\n          return done();\n        });\n      });","file":"acceptance/js/UpdatingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return 400","suites":["Applying updates to a doc","when no version is provided"],"updatePoint":{"line":251,"column":25,"index":9230},"line":251,"code":"    it('should return 400', function () {\n      return this.res.statusCode.should.equal(400);\n    });","file":"acceptance/js/UpdatingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should not update the doc in the API","suites":["Applying updates to a doc","when no version is provided"],"updatePoint":{"line":254,"column":51,"index":9358},"line":254,"code":"    return it('should not update the doc in the API', function (done) {\n      return DocstoreClient.getDoc(this.project_id, this.doc_id, {}, (error, res, doc) => {\n        if (error) return done(error);\n        doc.lines.should.deep.equal(this.originalLines);\n        doc.version.should.equal(this.version);\n        return done();\n      });\n    });","file":"acceptance/js/UpdatingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return modified = true","suites":["Applying updates to a doc","when the content is large"],"updatePoint":{"line":273,"column":37,"index":10168},"line":273,"code":"    it('should return modified = true', function () {\n      return this.body.modified.should.equal(true);\n    });","file":"acceptance/js/UpdatingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should update the doc in the API","suites":["Applying updates to a doc","when the content is large"],"updatePoint":{"line":276,"column":47,"index":10292},"line":276,"code":"    return it('should update the doc in the API', function (done) {\n      return DocstoreClient.getDoc(this.project_id, this.doc_id, {}, (error, res, doc) => {\n        if (error) return done(error);\n        doc.lines.should.deep.equal(this.largeLines);\n        return done();\n      });\n    });","file":"acceptance/js/UpdatingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return modified = true","suites":["Applying updates to a doc","when there is a large json payload"],"updatePoint":{"line":296,"column":37,"index":11181},"line":296,"code":"    it('should return modified = true', function () {\n      return this.body.modified.should.equal(true);\n    });","file":"acceptance/js/UpdatingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should update the doc in the API","suites":["Applying updates to a doc","when there is a large json payload"],"updatePoint":{"line":299,"column":47,"index":11305},"line":299,"code":"    return it('should update the doc in the API', function (done) {\n      return DocstoreClient.getDoc(this.project_id, this.doc_id, {}, (error, res, doc) => {\n        if (error) return done(error);\n        doc.lines.should.deep.equal(this.largeLines);\n        return done();\n      });\n    });","file":"acceptance/js/UpdatingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return 413","suites":["Applying updates to a doc","when the document body is too large"],"updatePoint":{"line":318,"column":25,"index":12092},"line":318,"code":"    it('should return 413', function () {\n      return this.res.statusCode.should.equal(413);\n    });","file":"acceptance/js/UpdatingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should report body too large","suites":["Applying updates to a doc","when the document body is too large"],"updatePoint":{"line":321,"column":36,"index":12205},"line":321,"code":"    it('should report body too large', function () {\n      return this.res.body.should.equal('document body too large');\n    });","file":"acceptance/js/UpdatingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should not update the doc in the API","suites":["Applying updates to a doc","when the document body is too large"],"updatePoint":{"line":324,"column":51,"index":12349},"line":324,"code":"    return it('should not update the doc in the API', function (done) {\n      return DocstoreClient.getDoc(this.project_id, this.doc_id, {}, (error, res, doc) => {\n        if (error) return done(error);\n        doc.lines.should.deep.equal(this.originalLines);\n        return done();\n      });\n    });","file":"acceptance/js/UpdatingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should not update the doc in the API","suites":["Applying updates to a doc","when the json payload is too large"],"updatePoint":{"line":344,"column":51,"index":13256},"line":344,"code":"    return it('should not update the doc in the API', function (done) {\n      return DocstoreClient.getDoc(this.project_id, this.doc_id, {}, (error, res, doc) => {\n        if (error) return done(error);\n        doc.lines.should.deep.equal(this.originalLines);\n        return done();\n      });\n    });","file":"acceptance/js/UpdatingDocsTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should resolve when passed a valid document","suites":["DocArchiveManager","archiveDoc"],"updatePoint":{"line":143,"column":51,"index":4195},"line":143,"code":"    it('should resolve when passed a valid document', async function () {\n      await expect(DocArchiveManager.promises.archiveDoc(projectId, mongoDocs[0]._id)).to.eventually.be.fulfilled;\n    });","file":"unit/js/DocArchiveManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should throw an error if the doc has no lines","suites":["DocArchiveManager","archiveDoc"],"updatePoint":{"line":146,"column":53,"index":4394},"line":146,"code":"    it('should throw an error if the doc has no lines', async function () {\n      const doc = mongoDocs[0];\n      doc.lines = null;\n      await expect(DocArchiveManager.promises.archiveDoc(projectId, doc._id)).to.eventually.be.rejectedWith('doc has no lines');\n    });","file":"unit/js/DocArchiveManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should add the schema version","suites":["DocArchiveManager","archiveDoc"],"updatePoint":{"line":151,"column":37,"index":4647},"line":151,"code":"    it('should add the schema version', async function () {\n      await DocArchiveManager.promises.archiveDoc(projectId, mongoDocs[1]._id);\n      expect(Streamifier.createReadStream).to.have.been.calledWith(sinon.match(/\"schema_v\":1/));\n    });","file":"unit/js/DocArchiveManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should calculate the hex md5 sum of the content","suites":["DocArchiveManager","archiveDoc"],"updatePoint":{"line":155,"column":55,"index":4910},"line":155,"code":"    it('should calculate the hex md5 sum of the content', async function () {\n      await DocArchiveManager.promises.archiveDoc(projectId, mongoDocs[0]._id);\n      expect(Crypto.createHash).to.have.been.calledWith('md5');\n      expect(HashUpdate).to.have.been.calledWith(archivedDocJson);\n      expect(HashDigest).to.have.been.calledWith('hex');\n    });","file":"unit/js/DocArchiveManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should pass the md5 hash to the object persistor for verification","suites":["DocArchiveManager","archiveDoc"],"updatePoint":{"line":161,"column":73,"index":5282},"line":161,"code":"    it('should pass the md5 hash to the object persistor for verification', async function () {\n      await DocArchiveManager.promises.archiveDoc(projectId, mongoDocs[0]._id);\n      expect(PersistorManager.sendStream).to.have.been.calledWith(sinon.match.any, sinon.match.any, sinon.match.any, {\n        sourceMd5: md5Sum\n      });\n    });","file":"unit/js/DocArchiveManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should pass the correct bucket and key to the persistor","suites":["DocArchiveManager","archiveDoc"],"updatePoint":{"line":167,"column":63,"index":5611},"line":167,"code":"    it('should pass the correct bucket and key to the persistor', async function () {\n      await DocArchiveManager.promises.archiveDoc(projectId, mongoDocs[0]._id);\n      expect(PersistorManager.sendStream).to.have.been.calledWith(Settings.docstore.bucket, `${projectId}/${mongoDocs[0]._id}`);\n    });","file":"unit/js/DocArchiveManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should create a stream from the encoded json and send it","suites":["DocArchiveManager","archiveDoc"],"updatePoint":{"line":171,"column":64,"index":5915},"line":171,"code":"    it('should create a stream from the encoded json and send it', async function () {\n      await DocArchiveManager.promises.archiveDoc(projectId, mongoDocs[0]._id);\n      expect(Streamifier.createReadStream).to.have.been.calledWith(archivedDocJson);\n      expect(PersistorManager.sendStream).to.have.been.calledWith(sinon.match.any, sinon.match.any, readStream);\n    });","file":"unit/js/DocArchiveManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should mark the doc as archived","suites":["DocArchiveManager","archiveDoc"],"updatePoint":{"line":176,"column":39,"index":6263},"line":176,"code":"    it('should mark the doc as archived', async function () {\n      await DocArchiveManager.promises.archiveDoc(projectId, mongoDocs[0]._id);\n      expect(MongoManager.promises.markDocAsArchived).to.have.been.calledWith(projectId, mongoDocs[0]._id, mongoDocs[0].rev);\n    });","file":"unit/js/DocArchiveManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return an error","suites":["DocArchiveManager","archiveDoc","with null bytes in the result"],"updatePoint":{"line":188,"column":32,"index":6819},"line":188,"code":"      it('should return an error', async function () {\n        await expect(DocArchiveManager.promises.archiveDoc(projectId, mongoDocs[0]._id)).to.eventually.be.rejectedWith('null bytes detected');\n      });","file":"unit/js/DocArchiveManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should resolve when passed a valid document","suites":["DocArchiveManager","unarchiveDoc","when the doc is in S3"],"updatePoint":{"line":205,"column":53,"index":7422},"line":205,"code":"      it('should resolve when passed a valid document', async function () {\n        await expect(DocArchiveManager.promises.unarchiveDoc(projectId, docId)).to.eventually.be.fulfilled;\n      });","file":"unit/js/DocArchiveManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should test md5 validity with the raw buffer","suites":["DocArchiveManager","unarchiveDoc","when the doc is in S3"],"updatePoint":{"line":208,"column":54,"index":7617},"line":208,"code":"      it('should test md5 validity with the raw buffer', async function () {\n        await DocArchiveManager.promises.unarchiveDoc(projectId, docId);\n        expect(HashUpdate).to.have.been.calledWith(sinon.match.instanceOf(Buffer));\n      });","file":"unit/js/DocArchiveManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should throw an error if the md5 does not match","suites":["DocArchiveManager","unarchiveDoc","when the doc is in S3"],"updatePoint":{"line":212,"column":57,"index":7864},"line":212,"code":"      it('should throw an error if the md5 does not match', async function () {\n        PersistorManager.getObjectMd5Hash.resolves('badf00d');\n        await expect(DocArchiveManager.promises.unarchiveDoc(projectId, docId)).to.eventually.be.rejected.and.be.instanceof(Errors.Md5MismatchError);\n      });","file":"unit/js/DocArchiveManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should restore the doc in Mongo","suites":["DocArchiveManager","unarchiveDoc","when the doc is in S3"],"updatePoint":{"line":216,"column":41,"index":8151},"line":216,"code":"      it('should restore the doc in Mongo', async function () {\n        await DocArchiveManager.promises.unarchiveDoc(projectId, docId);\n        expect(MongoManager.promises.restoreArchivedDoc).to.have.been.calledWith(projectId, docId, archivedDoc);\n      });","file":"unit/js/DocArchiveManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return the docs lines","suites":["DocArchiveManager","unarchiveDoc","when the doc is in S3","doc contents","when the doc has the old schema"],"updatePoint":{"line":228,"column":42,"index":8774},"line":228,"code":"          it('should return the docs lines', async function () {\n            await DocArchiveManager.promises.unarchiveDoc(projectId, docId);\n            expect(MongoManager.promises.restoreArchivedDoc).to.have.been.calledWith(projectId, docId, {\n              lines,\n              rev\n            });\n          });","file":"unit/js/DocArchiveManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return the doc lines and ranges","suites":["DocArchiveManager","unarchiveDoc","when the doc is in S3","doc contents","with the new schema and ranges"],"updatePoint":{"line":249,"column":52,"index":9556},"line":249,"code":"          it('should return the doc lines and ranges', async function () {\n            await DocArchiveManager.promises.unarchiveDoc(projectId, docId);\n            expect(MongoManager.promises.restoreArchivedDoc).to.have.been.calledWith(projectId, docId, {\n              lines,\n              ranges: {\n                mongo: 'ranges'\n              },\n              rev: 456\n            });\n          });","file":"unit/js/DocArchiveManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return only the doc lines","suites":["DocArchiveManager","unarchiveDoc","when the doc is in S3","doc contents","with the new schema and no ranges"],"updatePoint":{"line":270,"column":46,"index":10341},"line":270,"code":"          it('should return only the doc lines', async function () {\n            await DocArchiveManager.promises.unarchiveDoc(projectId, docId);\n            expect(MongoManager.promises.restoreArchivedDoc).to.have.been.calledWith(projectId, docId, {\n              lines,\n              rev: 456\n            });\n          });","file":"unit/js/DocArchiveManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should use the rev obtained from Mongo","suites":["DocArchiveManager","unarchiveDoc","when the doc is in S3","doc contents","with the new schema and no rev"],"updatePoint":{"line":287,"column":52,"index":11032},"line":287,"code":"          it('should use the rev obtained from Mongo', async function () {\n            await DocArchiveManager.promises.unarchiveDoc(projectId, docId);\n            expect(MongoManager.promises.restoreArchivedDoc).to.have.been.calledWith(projectId, docId, {\n              lines,\n              rev\n            });\n          });","file":"unit/js/DocArchiveManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should throw an error","suites":["DocArchiveManager","unarchiveDoc","when the doc is in S3","doc contents","with an unrecognised schema"],"updatePoint":{"line":304,"column":35,"index":11698},"line":304,"code":"          it('should throw an error', async function () {\n            await expect(DocArchiveManager.promises.unarchiveDoc(projectId, docId)).to.eventually.be.rejectedWith(\"I don't understand the doc format in s3\");\n          });","file":"unit/js/DocArchiveManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should not do anything if the file is already unarchived","suites":["DocArchiveManager","unarchiveDoc","when the doc is in S3","doc contents","with an unrecognised schema"],"updatePoint":{"line":310,"column":64,"index":11987},"line":310,"code":"    it('should not do anything if the file is already unarchived', async function () {\n      MongoManager.promises.findDoc.resolves({\n        inS3: false\n      });\n      await DocArchiveManager.promises.unarchiveDoc(projectId, docId);\n      expect(PersistorManager.getObjectStream).not.to.have.been.called;\n    });","file":"unit/js/DocArchiveManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should throw an error if the file is not found","suites":["DocArchiveManager","unarchiveDoc","when the doc is in S3","doc contents","with an unrecognised schema"],"updatePoint":{"line":317,"column":54,"index":12292},"line":317,"code":"    it('should throw an error if the file is not found', async function () {\n      PersistorManager.getObjectStream = sinon.stub().rejects(new Errors.NotFoundError());\n      await expect(DocArchiveManager.promises.unarchiveDoc(projectId, docId)).to.eventually.be.rejected.and.be.instanceof(Errors.NotFoundError);\n    });","file":"unit/js/DocArchiveManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should delete the project in Mongo","suites":["DocArchiveManager","destroyProject","when archiving is enabled"],"updatePoint":{"line":327,"column":44,"index":12823},"line":327,"code":"      it('should delete the project in Mongo', function () {\n        expect(MongoManager.promises.destroyProject).to.have.been.calledWith(projectId);\n      });","file":"unit/js/DocArchiveManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should delete the project in the persistor","suites":["DocArchiveManager","destroyProject","when archiving is enabled"],"updatePoint":{"line":330,"column":52,"index":12991},"line":330,"code":"      it('should delete the project in the persistor', function () {\n        expect(PersistorManager.deleteDirectory).to.have.been.calledWith(Settings.docstore.bucket, projectId);\n      });","file":"unit/js/DocArchiveManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should delete the project in Mongo","suites":["DocArchiveManager","destroyProject","when archiving is disabled"],"updatePoint":{"line":339,"column":44,"index":13393},"line":339,"code":"      it('should delete the project in Mongo', function () {\n        expect(MongoManager.promises.destroyProject).to.have.been.calledWith(projectId);\n      });","file":"unit/js/DocArchiveManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should not delete the project in the persistor","suites":["DocArchiveManager","destroyProject","when archiving is disabled"],"updatePoint":{"line":342,"column":56,"index":13565},"line":342,"code":"      it('should not delete the project in the persistor', function () {\n        expect(PersistorManager.deleteDirectory).not.to.have.been.called;\n      });","file":"unit/js/DocArchiveManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should resolve with valid arguments","suites":["DocArchiveManager","archiveAllDocs"],"updatePoint":{"line":348,"column":43,"index":13766},"line":348,"code":"    it('should resolve with valid arguments', async function () {\n      await expect(DocArchiveManager.promises.archiveAllDocs(projectId)).to.eventually.be.fulfilled;\n    });","file":"unit/js/DocArchiveManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should archive all project docs which are not in s3","suites":["DocArchiveManager","archiveAllDocs"],"updatePoint":{"line":351,"column":59,"index":13957},"line":351,"code":"    it('should archive all project docs which are not in s3', async function () {\n      await DocArchiveManager.promises.archiveAllDocs(projectId);\n      // not inS3\n      expect(MongoManager.promises.markDocAsArchived).to.have.been.calledWith(projectId, mongoDocs[0]._id);\n      expect(MongoManager.promises.markDocAsArchived).to.have.been.calledWith(projectId, mongoDocs[1]._id);\n      expect(MongoManager.promises.markDocAsArchived).to.have.been.calledWith(projectId, mongoDocs[4]._id);\n\n      // inS3\n      expect(MongoManager.promises.markDocAsArchived).not.to.have.been.calledWith(projectId, mongoDocs[2]._id);\n      expect(MongoManager.promises.markDocAsArchived).not.to.have.been.calledWith(projectId, mongoDocs[3]._id);\n    });","file":"unit/js/DocArchiveManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should resolve with valid arguments","suites":["DocArchiveManager","unArchiveAllDocs"],"updatePoint":{"line":364,"column":43,"index":14729},"line":364,"code":"    it('should resolve with valid arguments', async function () {\n      await expect(DocArchiveManager.promises.unArchiveAllDocs(projectId)).to.eventually.be.fulfilled;\n    });","file":"unit/js/DocArchiveManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should unarchive all inS3 docs","suites":["DocArchiveManager","unArchiveAllDocs"],"updatePoint":{"line":367,"column":38,"index":14901},"line":367,"code":"    it('should unarchive all inS3 docs', async function () {\n      await DocArchiveManager.promises.unArchiveAllDocs(projectId);\n      for (const doc of archivedDocs) {\n        expect(PersistorManager.getObjectStream).to.have.been.calledWith(Settings.docstore.bucket, `${projectId}/${doc._id}`);\n      }\n    });","file":"unit/js/DocArchiveManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should call get doc with a quick filter","suites":["DocManager","getFullDoc"],"updatePoint":{"line":56,"column":47,"index":1732},"line":56,"code":"    it('should call get doc with a quick filter', function (done) {\n      this.DocManager._getDoc.callsArgWith(3, null, this.doc);\n      return this.DocManager.getFullDoc(this.project_id, this.doc_id, (err, doc) => {\n        if (err) return done(err);\n        doc.should.equal(this.doc);\n        this.DocManager._getDoc.calledWith(this.project_id, this.doc_id, {\n          lines: true,\n          rev: true,\n          deleted: true,\n          version: true,\n          ranges: true,\n          inS3: true\n        }).should.equal(true);\n        return done();\n      });\n    });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return error when get doc errors","suites":["DocManager","getFullDoc"],"updatePoint":{"line":72,"column":54,"index":2313},"line":72,"code":"    return it('should return error when get doc errors', function (done) {\n      this.DocManager._getDoc.callsArgWith(3, 'error');\n      return this.DocManager.getFullDoc(this.project_id, this.doc_id, (err, exist) => {\n        err.should.equal('error');\n        return done();\n      });\n    });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should call get doc with a quick filter","suites":["DocManager","getRawDoc"],"updatePoint":{"line":87,"column":47,"index":2787},"line":87,"code":"    it('should call get doc with a quick filter', function (done) {\n      this.DocManager._getDoc.callsArgWith(3, null, this.doc);\n      return this.DocManager.getDocLines(this.project_id, this.doc_id, (err, doc) => {\n        if (err) return done(err);\n        doc.should.equal(this.doc);\n        this.DocManager._getDoc.calledWith(this.project_id, this.doc_id, {\n          lines: true,\n          inS3: true\n        }).should.equal(true);\n        return done();\n      });\n    });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return error when get doc errors","suites":["DocManager","getRawDoc"],"updatePoint":{"line":99,"column":54,"index":3274},"line":99,"code":"    return it('should return error when get doc errors', function (done) {\n      this.DocManager._getDoc.callsArgWith(3, 'error');\n      return this.DocManager.getDocLines(this.project_id, this.doc_id, (err, exist) => {\n        err.should.equal('error');\n        return done();\n      });\n    });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should error if inS3 is not set to true","suites":["DocManager","getDoc","when using a filter"],"updatePoint":{"line":125,"column":49,"index":4142},"line":125,"code":"      it('should error if inS3 is not set to true', function (done) {\n        return this.DocManager._getDoc(this.project_id, this.doc_id, {\n          inS3: false\n        }, err => {\n          expect(err).to.exist;\n          return done();\n        });\n      });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should always get inS3 even when no filter is passed","suites":["DocManager","getDoc","when using a filter"],"updatePoint":{"line":133,"column":62,"index":4417},"line":133,"code":"      it('should always get inS3 even when no filter is passed', function (done) {\n        return this.DocManager._getDoc(this.project_id, this.doc_id, undefined, err => {\n          this.MongoManager.findDoc.called.should.equal(false);\n          expect(err).to.exist;\n          return done();\n        });\n      });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should not error if inS3 is set to true","suites":["DocManager","getDoc","when using a filter"],"updatePoint":{"line":140,"column":56,"index":4726},"line":140,"code":"      return it('should not error if inS3 is set to true', function (done) {\n        return this.DocManager._getDoc(this.project_id, this.doc_id, {\n          inS3: true\n        }, err => {\n          expect(err).to.not.exist;\n          return done();\n        });\n      });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should get the doc from the doc collection","suites":["DocManager","getDoc","when the doc is in the doc collection"],"updatePoint":{"line":157,"column":52,"index":5313},"line":157,"code":"      it('should get the doc from the doc collection', function () {\n        return this.MongoManager.findDoc.calledWith(this.project_id, this.doc_id).should.equal(true);\n      });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should get the doc version from the docOps collection","suites":["DocManager","getDoc","when the doc is in the doc collection"],"updatePoint":{"line":160,"column":63,"index":5505},"line":160,"code":"      it('should get the doc version from the docOps collection', function () {\n        return this.MongoManager.getDocVersion.calledWith(this.doc_id).should.equal(true);\n      });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return the callback with the doc with the version","suites":["DocManager","getDoc","when the doc is in the doc collection"],"updatePoint":{"line":163,"column":73,"index":5696},"line":163,"code":"      return it('should return the callback with the doc with the version', function () {\n        this.callback.called.should.equal(true);\n        const doc = this.callback.args[0][1];\n        doc.lines.should.equal(this.doc.lines);\n        return doc.version.should.equal(this.version);\n      });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should not get the doc version from the docOps collection","suites":["DocManager","getDoc","without the version filter"],"updatePoint":{"line":178,"column":74,"index":6304},"line":178,"code":"      return it('should not get the doc version from the docOps collection', function () {\n        return this.MongoManager.getDocVersion.called.should.equal(false);\n      });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return the error","suites":["DocManager","getDoc","when MongoManager.findDoc errors"],"updatePoint":{"line":190,"column":40,"index":6763},"line":190,"code":"      return it('should return the error', function () {\n        return this.callback.calledWith(this.stubbedError).should.equal(true);\n      });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should call the DocArchive to unarchive the doc","suites":["DocManager","getDoc","when the doc is archived"],"updatePoint":{"line":213,"column":57,"index":7597},"line":213,"code":"      it('should call the DocArchive to unarchive the doc', function () {\n        return this.DocArchiveManager.unarchiveDoc.calledWith(this.project_id, this.doc_id).should.equal(true);\n      });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should look up the doc twice","suites":["DocManager","getDoc","when the doc is archived"],"updatePoint":{"line":216,"column":38,"index":7774},"line":216,"code":"      it('should look up the doc twice', function () {\n        return this.MongoManager.findDoc.calledTwice.should.equal(true);\n      });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return the doc","suites":["DocManager","getDoc","when the doc is archived"],"updatePoint":{"line":219,"column":38,"index":7912},"line":219,"code":"      return it('should return the doc', function () {\n        return this.callback.calledWith(null, this.doc).should.equal(true);\n      });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return a NotFoundError","suites":["DocManager","getDoc","when the doc does not exist in the docs collection"],"updatePoint":{"line":231,"column":46,"index":8411},"line":231,"code":"      return it('should return a NotFoundError', function () {\n        return this.callback.calledWith(sinon.match.has('message', `No such doc: ${this.doc_id} in project ${this.project_id}`)).should.equal(true);\n      });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should get the project from the database","suites":["DocManager","getAllNonDeletedDocs","when the project exists"],"updatePoint":{"line":251,"column":50,"index":9272},"line":251,"code":"      it('should get the project from the database', function () {\n        return this.MongoManager.getProjectsDocs.calledWith(this.project_id, {\n          include_deleted: false\n        }, this.filter).should.equal(true);\n      });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return the docs","suites":["DocManager","getAllNonDeletedDocs","when the project exists"],"updatePoint":{"line":256,"column":39,"index":9494},"line":256,"code":"      return it('should return the docs', function () {\n        return this.callback.calledWith(null, this.docs).should.equal(true);\n      });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return a NotFoundError","suites":["DocManager","getAllNonDeletedDocs","when there are no docs for the project"],"updatePoint":{"line":266,"column":46,"index":10039},"line":266,"code":"      return it('should return a NotFoundError', function () {\n        return this.callback.calledWith(sinon.match.has('message', `No docs for project ${this.project_id}`)).should.equal(true);\n      });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should get the doc","suites":["DocManager","patchDoc","when the doc exists","standard path"],"updatePoint":{"line":288,"column":30,"index":10953},"line":288,"code":"        it('should get the doc', function () {\n          expect(this.MongoManager.findDoc).to.have.been.calledWith(this.project_id, this.doc_id);\n        });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should persist the meta","suites":["DocManager","patchDoc","when the doc exists","standard path"],"updatePoint":{"line":291,"column":35,"index":11116},"line":291,"code":"        it('should persist the meta', function () {\n          expect(this.MongoManager.patchDoc).to.have.been.calledWith(this.project_id, this.doc_id, this.meta);\n        });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return the callback","suites":["DocManager","patchDoc","when the doc exists","standard path"],"updatePoint":{"line":294,"column":38,"index":11294},"line":294,"code":"        it('should return the callback', function () {\n          expect(this.callback).to.have.been.calledWith(null);\n        });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should not flush the doc out of mongo","suites":["DocManager","patchDoc","when the doc exists","background flush disabled and deleting a doc"],"updatePoint":{"line":305,"column":49,"index":11817},"line":305,"code":"        it('should not flush the doc out of mongo', function () {\n          expect(this.DocArchiveManager.archiveDoc).to.not.have.been.called;\n        });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should not flush the doc out of mongo","suites":["DocManager","patchDoc","when the doc exists","background flush enabled and not deleting a doc"],"updatePoint":{"line":316,"column":49,"index":12358},"line":316,"code":"        it('should not flush the doc out of mongo', function () {\n          expect(this.DocArchiveManager.archiveDoc).to.not.have.been.called;\n        });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should not log a warning","suites":["DocManager","patchDoc","when the doc exists","background flush enabled and deleting a doc","when the background flush succeeds"],"updatePoint":{"line":331,"column":38,"index":13079},"line":331,"code":"          it('should not log a warning', function () {\n            expect(this.logger.warn).to.not.have.been.called;\n          });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should flush the doc out of mongo","suites":["DocManager","patchDoc","when the doc exists","background flush enabled and deleting a doc","when the background flush succeeds"],"updatePoint":{"line":334,"column":47,"index":13219},"line":334,"code":"          it('should flush the doc out of mongo', function () {\n            expect(this.DocArchiveManager.archiveDoc).to.have.been.calledWith(this.project_id, this.doc_id);\n          });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should log a warning","suites":["DocManager","patchDoc","when the doc exists","background flush enabled and deleting a doc","when the background flush fails"],"updatePoint":{"line":345,"column":34,"index":13796},"line":345,"code":"          it('should log a warning', function () {\n            expect(this.logger.warn).to.have.been.calledWith(sinon.match({\n              projectId: this.project_id,\n              docId: this.doc_id,\n              err: this.err\n            }), 'archiving a single doc in the background failed');\n          });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should not fail the delete process","suites":["DocManager","patchDoc","when the doc exists","background flush enabled and deleting a doc","when the background flush fails"],"updatePoint":{"line":352,"column":48,"index":14122},"line":352,"code":"          it('should not fail the delete process', function () {\n            expect(this.callback).to.have.been.calledWith(null);\n          });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return a NotFoundError","suites":["DocManager","patchDoc","when the doc does not exist"],"updatePoint":{"line":363,"column":39,"index":14532},"line":363,"code":"      it('should return a NotFoundError', function () {\n        expect(this.callback).to.have.been.calledWith(sinon.match.has('message', `No such project/doc to delete: ${this.project_id}/${this.doc_id}`));\n      });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should get the existing doc","suites":["DocManager","updateDoc","when only the doc lines have changed"],"updatePoint":{"line":416,"column":37,"index":16272},"line":416,"code":"      it('should get the existing doc', function () {\n        return this.DocManager._getDoc.calledWith(this.project_id, this.doc_id, {\n          version: true,\n          rev: true,\n          lines: true,\n          version: true,\n          ranges: true,\n          inS3: true\n        }).should.equal(true);\n      });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should upsert the document to the doc collection","suites":["DocManager","updateDoc","when only the doc lines have changed"],"updatePoint":{"line":426,"column":58,"index":16609},"line":426,"code":"      it('should upsert the document to the doc collection', function () {\n        return this.MongoManager.upsertIntoDocCollection.calledWith(this.project_id, this.doc_id, this.rev, {\n          lines: this.newDocLines\n        }).should.equal(true);\n      });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should not update the version","suites":["DocManager","updateDoc","when only the doc lines have changed"],"updatePoint":{"line":431,"column":39,"index":16850},"line":431,"code":"      it('should not update the version', function () {\n        return this.MongoManager.setDocVersion.called.should.equal(false);\n      });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return the callback with the new rev","suites":["DocManager","updateDoc","when only the doc lines have changed"],"updatePoint":{"line":434,"column":60,"index":17012},"line":434,"code":"      return it('should return the callback with the new rev', function () {\n        return this.callback.calledWith(null, true, this.rev + 1).should.equal(true);\n      });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should upsert the ranges","suites":["DocManager","updateDoc","when the doc ranges have changed"],"updatePoint":{"line":444,"column":34,"index":17546},"line":444,"code":"      it('should upsert the ranges', function () {\n        return this.MongoManager.upsertIntoDocCollection.calledWith(this.project_id, this.doc_id, this.rev, {\n          ranges: this.newRanges\n        }).should.equal(true);\n      });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should not update the version","suites":["DocManager","updateDoc","when the doc ranges have changed"],"updatePoint":{"line":449,"column":39,"index":17786},"line":449,"code":"      it('should not update the version', function () {\n        return this.MongoManager.setDocVersion.called.should.equal(false);\n      });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return the callback with the new rev","suites":["DocManager","updateDoc","when the doc ranges have changed"],"updatePoint":{"line":452,"column":60,"index":17948},"line":452,"code":"      return it('should return the callback with the new rev', function () {\n        return this.callback.calledWith(null, true, this.rev + 1).should.equal(true);\n      });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should not change the lines or ranges","suites":["DocManager","updateDoc","when only the version has changed"],"updatePoint":{"line":461,"column":47,"index":18445},"line":461,"code":"      it('should not change the lines or ranges', function () {\n        return this.MongoManager.upsertIntoDocCollection.called.should.equal(false);\n      });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should update the version","suites":["DocManager","updateDoc","when only the version has changed"],"updatePoint":{"line":464,"column":35,"index":18592},"line":464,"code":"      it('should update the version', function () {\n        return this.MongoManager.setDocVersion.calledWith(this.doc_id, this.version + 1).should.equal(true);\n      });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return the callback with the old rev","suites":["DocManager","updateDoc","when only the version has changed"],"updatePoint":{"line":467,"column":60,"index":18788},"line":467,"code":"      return it('should return the callback with the old rev', function () {\n        return this.callback.calledWith(null, true, this.rev).should.equal(true);\n      });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should not update the ranges or lines","suites":["DocManager","updateDoc","when the doc has not changed at all"],"updatePoint":{"line":476,"column":47,"index":19279},"line":476,"code":"      it('should not update the ranges or lines', function () {\n        return this.MongoManager.upsertIntoDocCollection.called.should.equal(false);\n      });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should not update the version","suites":["DocManager","updateDoc","when the doc has not changed at all"],"updatePoint":{"line":479,"column":39,"index":19430},"line":479,"code":"      it('should not update the version', function () {\n        return this.MongoManager.setDocVersion.called.should.equal(false);\n      });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return the callback with the old rev and modified == false","suites":["DocManager","updateDoc","when the doc has not changed at all"],"updatePoint":{"line":482,"column":82,"index":19614},"line":482,"code":"      return it('should return the callback with the old rev and modified == false', function () {\n        return this.callback.calledWith(null, false, this.rev).should.equal(true);\n      });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return an error","suites":["DocManager","updateDoc","when the version is null"],"updatePoint":{"line":490,"column":39,"index":19999},"line":490,"code":"      return it('should return an error', function () {\n        return this.callback.calledWith(sinon.match.has('message', 'no lines, version or ranges provided')).should.equal(true);\n      });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return an error","suites":["DocManager","updateDoc","when the lines are null"],"updatePoint":{"line":498,"column":39,"index":20424},"line":498,"code":"      return it('should return an error', function () {\n        return this.callback.calledWith(sinon.match.has('message', 'no lines, version or ranges provided')).should.equal(true);\n      });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return an error","suites":["DocManager","updateDoc","when the ranges are null"],"updatePoint":{"line":506,"column":39,"index":20847},"line":506,"code":"      return it('should return an error', function () {\n        return this.callback.calledWith(sinon.match.has('message', 'no lines, version or ranges provided')).should.equal(true);\n      });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should not upsert the document to the doc collection","suites":["DocManager","updateDoc","when there is a generic error getting the doc"],"updatePoint":{"line":516,"column":62,"index":21475},"line":516,"code":"      it('should not upsert the document to the doc collection', function () {\n        return this.MongoManager.upsertIntoDocCollection.called.should.equal(false);\n      });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return the callback with the error","suites":["DocManager","updateDoc","when there is a generic error getting the doc"],"updatePoint":{"line":519,"column":58,"index":21645},"line":519,"code":"      return it('should return the callback with the error', function () {\n        return this.callback.calledWith(this.error).should.equal(true);\n      });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return an error","suites":["DocManager","updateDoc","when the version was decremented"],"updatePoint":{"line":528,"column":32,"index":22096},"line":528,"code":"      it('should return an error', function () {\n        this.callback.should.have.been.calledWith(sinon.match.instanceOf(Errors.DocVersionDecrementedError));\n      });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should not update the doc","suites":["DocManager","updateDoc","when the doc lines have not changed"],"updatePoint":{"line":537,"column":35,"index":22611},"line":537,"code":"      it('should not update the doc', function () {\n        return this.MongoManager.upsertIntoDocCollection.called.should.equal(false);\n      });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return the callback with the existing rev","suites":["DocManager","updateDoc","when the doc lines have not changed"],"updatePoint":{"line":540,"column":65,"index":22788},"line":540,"code":"      return it('should return the callback with the existing rev', function () {\n        return this.callback.calledWith(null, false, this.rev).should.equal(true);\n      });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should upsert the document to the doc collection","suites":["DocManager","updateDoc","when the doc does not exist"],"updatePoint":{"line":549,"column":58,"index":23285},"line":549,"code":"      it('should upsert the document to the doc collection', function () {\n        return this.MongoManager.upsertIntoDocCollection.calledWith(this.project_id, this.doc_id, undefined, {\n          lines: this.newDocLines,\n          ranges: this.originalRanges\n        }).should.equal(true);\n      });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should set the version","suites":["DocManager","updateDoc","when the doc does not exist"],"updatePoint":{"line":555,"column":32,"index":23559},"line":555,"code":"      it('should set the version', function () {\n        return this.MongoManager.setDocVersion.calledWith(this.doc_id, this.version).should.equal(true);\n      });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return the callback with the new rev","suites":["DocManager","updateDoc","when the doc does not exist"],"updatePoint":{"line":558,"column":60,"index":23751},"line":558,"code":"      return it('should return the callback with the new rev', function () {\n        return this.callback.calledWith(null, true, 1).should.equal(true);\n      });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should upsert the doc twice","suites":["DocManager","updateDoc","when another update is racing"],"updatePoint":{"line":571,"column":37,"index":24487},"line":571,"code":"      it('should upsert the doc twice', function () {\n        this.MongoManager.upsertIntoDocCollection.should.have.been.calledWith(this.project_id, this.doc_id, this.rev, {\n          ranges: this.newRanges,\n          lines: this.newDocLines\n        });\n        this.MongoManager.upsertIntoDocCollection.should.have.been.calledTwice;\n      });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should update the version once","suites":["DocManager","updateDoc","when another update is racing"],"updatePoint":{"line":578,"column":40,"index":24834},"line":578,"code":"      it('should update the version once', function () {\n        this.MongoManager.setDocVersion.should.have.been.calledOnce;\n      });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return the callback with the new rev","suites":["DocManager","updateDoc","when another update is racing"],"updatePoint":{"line":581,"column":53,"index":24983},"line":581,"code":"      it('should return the callback with the new rev', function () {\n        this.callback.should.have.been.calledWith(null, true, this.rev + 1);\n      });","file":"unit/js/DocManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should get the document with the version (including deleted)","suites":["HttpController","getDoc","without deleted docs"],"updatePoint":{"line":67,"column":70,"index":1952},"line":67,"code":"      it('should get the document with the version (including deleted)', function () {\n        this.DocManager.getFullDoc.calledWith(this.projectId, this.docId).should.equal(true);\n      });","file":"unit/js/HttpControllerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return the doc as JSON","suites":["HttpController","getDoc","without deleted docs"],"updatePoint":{"line":70,"column":39,"index":2112},"line":70,"code":"      it('should return the doc as JSON', function () {\n        this.res.json.calledWith({\n          _id: this.docId,\n          lines: this.doc.lines,\n          rev: this.doc.rev,\n          version: this.doc.version\n        }).should.equal(true);\n      });","file":"unit/js/HttpControllerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should get the doc from the doc manager","suites":["HttpController","getDoc","which is deleted"],"updatePoint":{"line":87,"column":49,"index":2671},"line":87,"code":"      it('should get the doc from the doc manager', function () {\n        this.HttpController.getDoc(this.req, this.res, this.next);\n        this.DocManager.getFullDoc.calledWith(this.projectId, this.docId).should.equal(true);\n      });","file":"unit/js/HttpControllerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return 404 if the query string delete is not set ","suites":["HttpController","getDoc","which is deleted"],"updatePoint":{"line":91,"column":66,"index":2925},"line":91,"code":"      it('should return 404 if the query string delete is not set ', function () {\n        this.HttpController.getDoc(this.req, this.res, this.next);\n        this.res.sendStatus.calledWith(404).should.equal(true);\n      });","file":"unit/js/HttpControllerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return the doc as JSON if include_deleted is set to true","suites":["HttpController","getDoc","which is deleted"],"updatePoint":{"line":95,"column":73,"index":3156},"line":95,"code":"      it('should return the doc as JSON if include_deleted is set to true', function () {\n        this.req.query.include_deleted = 'true';\n        this.HttpController.getDoc(this.req, this.res, this.next);\n        this.res.json.calledWith({\n          _id: this.docId,\n          lines: this.doc.lines,\n          rev: this.doc.rev,\n          deleted: true,\n          version: this.doc.version\n        }).should.equal(true);\n      });","file":"unit/js/HttpControllerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should get the document without the version","suites":["HttpController","getRawDoc"],"updatePoint":{"line":117,"column":51,"index":3903},"line":117,"code":"    it('should get the document without the version', function () {\n      this.DocManager.getDocLines.calledWith(this.projectId, this.docId).should.equal(true);\n    });","file":"unit/js/HttpControllerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should set the content type header","suites":["HttpController","getRawDoc"],"updatePoint":{"line":120,"column":42,"index":4063},"line":120,"code":"    it('should set the content type header', function () {\n      this.res.setHeader.calledWith('content-type', 'text/plain').should.equal(true);\n    });","file":"unit/js/HttpControllerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should send the raw version of the doc","suites":["HttpController","getRawDoc"],"updatePoint":{"line":123,"column":46,"index":4220},"line":123,"code":"    it('should send the raw version of the doc', function () {\n      assert.deepEqual(this.res.send.args[0][0], `${this.doc.lines[0]}\\n${this.doc.lines[1]}\\n${this.doc.lines[2]}\\n${this.doc.lines[3]}\\n${this.doc.lines[4]}\\n${this.doc.lines[5]}`);\n    });","file":"unit/js/HttpControllerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should get all the (non-deleted) docs","suites":["HttpController","getAllDocs","normally"],"updatePoint":{"line":145,"column":47,"index":5064},"line":145,"code":"      it('should get all the (non-deleted) docs', function () {\n        this.DocManager.getAllNonDeletedDocs.calledWith(this.projectId, {\n          lines: true,\n          rev: true\n        }).should.equal(true);\n      });","file":"unit/js/HttpControllerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return the doc as JSON","suites":["HttpController","getAllDocs","normally"],"updatePoint":{"line":151,"column":39,"index":5278},"line":151,"code":"      it('should return the doc as JSON', function () {\n        this.res.json.calledWith([{\n          _id: this.docs[0]._id.toString(),\n          lines: this.docs[0].lines,\n          rev: this.docs[0].rev\n        }, {\n          _id: this.docs[1]._id.toString(),\n          lines: this.docs[1].lines,\n          rev: this.docs[1].rev\n        }]).should.equal(true);\n      });","file":"unit/js/HttpControllerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return the doc with fallback lines","suites":["HttpController","getAllDocs","with null lines"],"updatePoint":{"line":180,"column":51,"index":6201},"line":180,"code":"      it('should return the doc with fallback lines', function () {\n        this.res.json.calledWith([{\n          _id: this.docs[0]._id.toString(),\n          lines: [],\n          rev: this.docs[0].rev\n        }, {\n          _id: this.docs[1]._id.toString(),\n          lines: this.docs[1].lines,\n          rev: this.docs[1].rev\n        }]).should.equal(true);\n      });","file":"unit/js/HttpControllerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return the non null docs as JSON","suites":["HttpController","getAllDocs","with a null doc"],"updatePoint":{"line":209,"column":49,"index":7132},"line":209,"code":"      it('should return the non null docs as JSON', function () {\n        this.res.json.calledWith([{\n          _id: this.docs[0]._id.toString(),\n          lines: this.docs[0].lines,\n          rev: this.docs[0].rev\n        }, {\n          _id: this.docs[2]._id.toString(),\n          lines: this.docs[2].lines,\n          rev: this.docs[2].rev\n        }]).should.equal(true);\n      });","file":"unit/js/HttpControllerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should log out an error","suites":["HttpController","getAllDocs","with a null doc"],"updatePoint":{"line":220,"column":33,"index":7499},"line":220,"code":"      it('should log out an error', function () {\n        this.logger.error.calledWith({\n          err: sinon.match.has('message', 'null doc'),\n          projectId: this.projectId\n        }, 'encountered null doc').should.equal(true);\n      });","file":"unit/js/HttpControllerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should get all the (non-deleted) doc ranges","suites":["HttpController","getAllRanges","normally"],"updatePoint":{"line":248,"column":53,"index":8370},"line":248,"code":"      it('should get all the (non-deleted) doc ranges', function () {\n        this.DocManager.getAllNonDeletedDocs.calledWith(this.projectId, {\n          ranges: true\n        }).should.equal(true);\n      });","file":"unit/js/HttpControllerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return the doc as JSON","suites":["HttpController","getAllRanges","normally"],"updatePoint":{"line":253,"column":39,"index":8564},"line":253,"code":"      it('should return the doc as JSON', function () {\n        this.res.json.calledWith([{\n          _id: this.docs[0]._id.toString(),\n          ranges: this.docs[0].ranges\n        }, {\n          _id: this.docs[1]._id.toString(),\n          ranges: this.docs[1].ranges\n        }]).should.equal(true);\n      });","file":"unit/js/HttpControllerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should update the document","suites":["HttpController","updateDoc","when the doc lines exist and were updated"],"updatePoint":{"line":283,"column":36,"index":9524},"line":283,"code":"      it('should update the document', function () {\n        this.DocManager.updateDoc.calledWith(this.projectId, this.docId, this.lines, this.version, this.ranges).should.equal(true);\n      });","file":"unit/js/HttpControllerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return a modified status","suites":["HttpController","updateDoc","when the doc lines exist and were updated"],"updatePoint":{"line":286,"column":41,"index":9724},"line":286,"code":"      it('should return a modified status', function () {\n        this.res.json.calledWith({\n          modified: true,\n          rev: this.rev\n        }).should.equal(true);\n      });","file":"unit/js/HttpControllerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return a modified status","suites":["HttpController","updateDoc","when the doc lines exist and were not updated"],"updatePoint":{"line":303,"column":41,"index":10333},"line":303,"code":"      it('should return a modified status', function () {\n        this.res.json.calledWith({\n          modified: false,\n          rev: this.rev\n        }).should.equal(true);\n      });","file":"unit/js/HttpControllerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should not update the document","suites":["HttpController","updateDoc","when the doc lines are not provided"],"updatePoint":{"line":319,"column":40,"index":10853},"line":319,"code":"      it('should not update the document', function () {\n        this.DocManager.updateDoc.called.should.equal(false);\n      });","file":"unit/js/HttpControllerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return a 400 (bad request) response","suites":["HttpController","updateDoc","when the doc lines are not provided"],"updatePoint":{"line":322,"column":52,"index":10994},"line":322,"code":"      it('should return a 400 (bad request) response', function () {\n        this.res.sendStatus.calledWith(400).should.equal(true);\n      });","file":"unit/js/HttpControllerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should not update the document","suites":["HttpController","updateDoc","when the doc version are not provided"],"updatePoint":{"line":335,"column":40,"index":11475},"line":335,"code":"      it('should not update the document', function () {\n        this.DocManager.updateDoc.called.should.equal(false);\n      });","file":"unit/js/HttpControllerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return a 400 (bad request) response","suites":["HttpController","updateDoc","when the doc version are not provided"],"updatePoint":{"line":338,"column":52,"index":11616},"line":338,"code":"      it('should return a 400 (bad request) response', function () {\n        this.res.sendStatus.calledWith(400).should.equal(true);\n      });","file":"unit/js/HttpControllerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should not update the document","suites":["HttpController","updateDoc","when the doc ranges is not provided"],"updatePoint":{"line":351,"column":40,"index":12087},"line":351,"code":"      it('should not update the document', function () {\n        this.DocManager.updateDoc.called.should.equal(false);\n      });","file":"unit/js/HttpControllerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return a 400 (bad request) response","suites":["HttpController","updateDoc","when the doc ranges is not provided"],"updatePoint":{"line":354,"column":52,"index":12228},"line":354,"code":"      it('should return a 400 (bad request) response', function () {\n        this.res.sendStatus.calledWith(400).should.equal(true);\n      });","file":"unit/js/HttpControllerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return a 413 (too large) response","suites":["HttpController","updateDoc","when the doc body is too large"],"updatePoint":{"line":369,"column":50,"index":12764},"line":369,"code":"      it('should return a 413 (too large) response', function () {\n        sinon.assert.calledWith(this.res.status, 413);\n      });","file":"unit/js/HttpControllerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should report that the document body is too large","suites":["HttpController","updateDoc","when the doc body is too large"],"updatePoint":{"line":372,"column":59,"index":12905},"line":372,"code":"      it('should report that the document body is too large', function () {\n        sinon.assert.calledWith(this.res.send, 'document body too large');\n      });","file":"unit/js/HttpControllerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should delete the document","suites":["HttpController","patchDoc"],"updatePoint":{"line":389,"column":34,"index":13411},"line":389,"code":"    it('should delete the document', function () {\n      expect(this.DocManager.patchDoc).to.have.been.calledWith(this.projectId, this.docId);\n    });","file":"unit/js/HttpControllerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return a 204 (No Content)","suites":["HttpController","patchDoc"],"updatePoint":{"line":392,"column":40,"index":13568},"line":392,"code":"    it('should return a 204 (No Content)', function () {\n      expect(this.res.sendStatus).to.have.been.calledWith(204);\n    });","file":"unit/js/HttpControllerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should log a message","suites":["HttpController","patchDoc","with an invalid payload"],"updatePoint":{"line":403,"column":30,"index":13977},"line":403,"code":"      it('should log a message', function () {\n        expect(this.logger.fatal).to.have.been.calledWith({\n          field: 'cannot'\n        }, 'joi validation for pathDoc is broken');\n      });","file":"unit/js/HttpControllerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should not pass the invalid field along","suites":["HttpController","patchDoc","with an invalid payload"],"updatePoint":{"line":408,"column":49,"index":14191},"line":408,"code":"      it('should not pass the invalid field along', function () {\n        expect(this.DocManager.patchDoc).to.have.been.calledWith(this.projectId, this.docId, {});\n      });","file":"unit/js/HttpControllerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should archive the project","suites":["HttpController","archiveAllDocs"],"updatePoint":{"line":421,"column":34,"index":14659},"line":421,"code":"    it('should archive the project', function () {\n      this.DocArchiveManager.archiveAllDocs.calledWith(this.projectId).should.equal(true);\n    });","file":"unit/js/HttpControllerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return a 204 (No Content)","suites":["HttpController","archiveAllDocs"],"updatePoint":{"line":424,"column":40,"index":14815},"line":424,"code":"    it('should return a 204 (No Content)', function () {\n      this.res.sendStatus.calledWith(204).should.equal(true);\n    });","file":"unit/js/HttpControllerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"returns a 200","suites":["HttpController","unArchiveAllDocs","on success"],"updatePoint":{"line":439,"column":23,"index":15299},"line":439,"code":"      it('returns a 200', function () {\n        expect(this.res.sendStatus).to.have.been.calledWith(200);\n      });","file":"unit/js/HttpControllerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"returns a 409","suites":["HttpController","unArchiveAllDocs","when the archived rev doesn't match"],"updatePoint":{"line":449,"column":23,"index":15760},"line":449,"code":"      it('returns a 409', function () {\n        expect(this.res.sendStatus).to.have.been.calledWith(409);\n      });","file":"unit/js/HttpControllerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should destroy the docs","suites":["HttpController","destroyProject"],"updatePoint":{"line":462,"column":31,"index":16193},"line":462,"code":"    it('should destroy the docs', function () {\n      sinon.assert.calledWith(this.DocArchiveManager.destroyProject, this.projectId);\n    });","file":"unit/js/HttpControllerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return 204","suites":["HttpController","destroyProject"],"updatePoint":{"line":465,"column":25,"index":16329},"line":465,"code":"    it('should return 204', function () {\n      sinon.assert.calledWith(this.res.sendStatus, 204);\n    });","file":"unit/js/HttpControllerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should find the doc","suites":["MongoManager","findDoc"],"updatePoint":{"line":58,"column":27,"index":1561},"line":58,"code":"    it('should find the doc', function () {\n      this.db.docs.findOne.calledWith({\n        _id: ObjectId(this.docId),\n        project_id: ObjectId(this.projectId)\n      }, {\n        projection: this.filter\n      }).should.equal(true);\n    });","file":"unit/js/MongoManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should call the callback with the doc","suites":["MongoManager","findDoc"],"updatePoint":{"line":66,"column":45,"index":1823},"line":66,"code":"    it('should call the callback with the doc', function () {\n      this.callback.calledWith(null, this.doc).should.equal(true);\n    });","file":"unit/js/MongoManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should pass the parameter along","suites":["MongoManager","patchDoc"],"updatePoint":{"line":78,"column":39,"index":2216},"line":78,"code":"    it('should pass the parameter along', function () {\n      this.db.docs.updateOne.should.have.been.calledWith({\n        _id: ObjectId(this.docId),\n        project_id: ObjectId(this.projectId)\n      }, {\n        $set: this.meta\n      }, this.callback);\n    });","file":"unit/js/MongoManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should find the non-deleted docs via the project_id","suites":["MongoManager","getProjectsDocs","with included_deleted = false"],"updatePoint":{"line":114,"column":61,"index":3238},"line":114,"code":"      it('should find the non-deleted docs via the project_id', function () {\n        this.db.docs.find.calledWith({\n          project_id: ObjectId(this.projectId),\n          deleted: {\n            $ne: true\n          }\n        }, {\n          projection: this.filter\n        }).should.equal(true);\n      });","file":"unit/js/MongoManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should call the callback with the docs","suites":["MongoManager","getProjectsDocs","with included_deleted = false"],"updatePoint":{"line":124,"column":48,"index":3533},"line":124,"code":"      it('should call the callback with the docs', function () {\n        this.callback.calledWith(null, [this.doc, this.doc3, this.doc4]).should.equal(true);\n      });","file":"unit/js/MongoManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should find all via the project_id","suites":["MongoManager","getProjectsDocs","with included_deleted = true"],"updatePoint":{"line":134,"column":44,"index":3937},"line":134,"code":"      it('should find all via the project_id', function () {\n        this.db.docs.find.calledWith({\n          project_id: ObjectId(this.projectId)\n        }, {\n          projection: this.filter\n        }).should.equal(true);\n      });","file":"unit/js/MongoManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should call the callback with the docs","suites":["MongoManager","getProjectsDocs","with included_deleted = true"],"updatePoint":{"line":141,"column":48,"index":4176},"line":141,"code":"      it('should call the callback with the docs', function () {\n        this.callback.calledWith(null, [this.doc, this.doc3, this.doc4]).should.equal(true);\n      });","file":"unit/js/MongoManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should find the deleted docs via the project_id","suites":["MongoManager","getProjectsDeletedDocs"],"updatePoint":{"line":169,"column":55,"index":5004},"line":169,"code":"    it('should find the deleted docs via the project_id', function () {\n      this.db.docs.find.calledWith({\n        project_id: ObjectId(this.projectId),\n        deleted: true\n      }).should.equal(true);\n    });","file":"unit/js/MongoManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should filter, sort by deletedAt and limit","suites":["MongoManager","getProjectsDeletedDocs"],"updatePoint":{"line":175,"column":50,"index":5213},"line":175,"code":"    it('should filter, sort by deletedAt and limit', function () {\n      this.db.docs.find.calledWith(sinon.match.any, {\n        projection: this.filter,\n        sort: {\n          deletedAt: -1\n        },\n        limit: 42\n      }).should.equal(true);\n    });","file":"unit/js/MongoManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should call the callback with the docs","suites":["MongoManager","getProjectsDeletedDocs"],"updatePoint":{"line":184,"column":46,"index":5469},"line":184,"code":"    it('should call the callback with the docs', function () {\n      this.callback.calledWith(null, [this.doc1, this.doc2, this.doc3]).should.equal(true);\n    });","file":"unit/js/MongoManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should upsert the document","suites":["MongoManager","upsertIntoDocCollection"],"updatePoint":{"line":192,"column":34,"index":5739},"line":192,"code":"    it('should upsert the document', function (done) {\n      this.MongoManager.upsertIntoDocCollection(this.projectId, this.docId, this.oldRev, {\n        lines: this.lines\n      }, err => {\n        assert.equal(err, null);\n        const args = this.db.docs.updateOne.args[0];\n        assert.deepEqual(args[0], {\n          _id: ObjectId(this.docId),\n          project_id: ObjectId(this.projectId),\n          rev: this.oldRev\n        });\n        assert.equal(args[1].$set.lines, this.lines);\n        assert.equal(args[1].$inc.rev, 1);\n        done();\n      });\n    });","file":"unit/js/MongoManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should handle update error","suites":["MongoManager","upsertIntoDocCollection"],"updatePoint":{"line":208,"column":34,"index":6306},"line":208,"code":"    it('should handle update error', function (done) {\n      this.db.docs.updateOne.yields(this.stubbedErr);\n      this.MongoManager.upsertIntoDocCollection(this.projectId, this.docId, this.rev, {\n        lines: this.lines\n      }, err => {\n        err.should.equal(this.stubbedErr);\n        done();\n      });\n    });","file":"unit/js/MongoManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should insert without a previous rev","suites":["MongoManager","upsertIntoDocCollection"],"updatePoint":{"line":217,"column":44,"index":6634},"line":217,"code":"    it('should insert without a previous rev', function (done) {\n      this.MongoManager.upsertIntoDocCollection(this.projectId, this.docId, null, {\n        lines: this.lines,\n        ranges: this.ranges\n      }, err => {\n        expect(this.db.docs.insertOne).to.have.been.calledWith({\n          _id: ObjectId(this.docId),\n          project_id: ObjectId(this.projectId),\n          rev: 1,\n          lines: this.lines,\n          ranges: this.ranges\n        });\n        expect(err).to.not.exist;\n        done();\n      });\n    });","file":"unit/js/MongoManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should handle generic insert error","suites":["MongoManager","upsertIntoDocCollection"],"updatePoint":{"line":233,"column":42,"index":7161},"line":233,"code":"    it('should handle generic insert error', function (done) {\n      this.db.docs.insertOne.yields(this.stubbedErr);\n      this.MongoManager.upsertIntoDocCollection(this.projectId, this.docId, null, {\n        lines: this.lines,\n        ranges: this.ranges\n      }, err => {\n        expect(err).to.equal(this.stubbedErr);\n        done();\n      });\n    });","file":"unit/js/MongoManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should handle duplicate insert error","suites":["MongoManager","upsertIntoDocCollection"],"updatePoint":{"line":243,"column":44,"index":7518},"line":243,"code":"    it('should handle duplicate insert error', function (done) {\n      this.db.docs.insertOne.yields({\n        code: 11000\n      });\n      this.MongoManager.upsertIntoDocCollection(this.projectId, this.docId, null, {\n        lines: this.lines,\n        ranges: this.ranges\n      }, err => {\n        expect(err).to.be.instanceof(Errors.DocRevValueError);\n        done();\n      });\n    });","file":"unit/js/MongoManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should destroy all docs","suites":["MongoManager","destroyProject"],"updatePoint":{"line":271,"column":31,"index":8450},"line":271,"code":"    it('should destroy all docs', function () {\n      sinon.assert.calledWith(this.db.docs.deleteMany, {\n        project_id: this.projectId\n      });\n    });","file":"unit/js/MongoManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should destroy the docOps","suites":["MongoManager","destroyProject"],"updatePoint":{"line":276,"column":33,"index":8610},"line":276,"code":"    it('should destroy the docOps', function () {\n      sinon.assert.calledWith(this.db.docOps.deleteMany, {\n        doc_id: {\n          $in: this.docIds\n        }\n      });\n    });","file":"unit/js/MongoManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should look for the doc in the database","suites":["MongoManager","getDocVersion","when the doc exists"],"updatePoint":{"line":293,"column":49,"index":9163},"line":293,"code":"      it('should look for the doc in the database', function () {\n        this.db.docOps.findOne.calledWith({\n          doc_id: ObjectId(this.docId)\n        }, {\n          projection: {\n            version: 1\n          }\n        }).should.equal(true);\n      });","file":"unit/js/MongoManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should call the callback with the version","suites":["MongoManager","getDocVersion","when the doc exists"],"updatePoint":{"line":302,"column":51,"index":9427},"line":302,"code":"      it('should call the callback with the version', function () {\n        this.callback.calledWith(null, this.version).should.equal(true);\n      });","file":"unit/js/MongoManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should call the callback with 0","suites":["MongoManager","getDocVersion","when the doc doesn't exist"],"updatePoint":{"line":311,"column":41,"index":9817},"line":311,"code":"      it('should call the callback with 0', function () {\n        this.callback.calledWith(null, 0).should.equal(true);\n      });","file":"unit/js/MongoManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should update the doc version","suites":["MongoManager","setDocVersion"],"updatePoint":{"line":322,"column":37,"index":10200},"line":322,"code":"    it('should update the doc version', function () {\n      this.db.docOps.updateOne.calledWith({\n        doc_id: ObjectId(this.docId)\n      }, {\n        $set: {\n          version: this.version\n        }\n      }, {\n        upsert: true\n      }).should.equal(true);\n    });","file":"unit/js/MongoManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should call the callback","suites":["MongoManager","setDocVersion"],"updatePoint":{"line":333,"column":32,"index":10468},"line":333,"code":"    it('should call the callback', function () {\n      this.callback.called.should.equal(true);\n    });","file":"unit/js/MongoManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should call the callback when the rev has not changed","suites":["MongoManager","withRevCheck"],"updatePoint":{"line":346,"column":61,"index":10844},"line":346,"code":"    it('should call the callback when the rev has not changed', function (done) {\n      this.db.docs.findOne = sinon.stub().callsArgWith(2, null, {\n        rev: 1\n      });\n      this.MongoManager.withRevCheck(this.doc, this.testFunction, (err, result) => {\n        result.should.equal('foo');\n        assert.isNull(err);\n        done();\n      });\n    });","file":"unit/js/MongoManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return an error when the rev has changed","suites":["MongoManager","withRevCheck"],"updatePoint":{"line":356,"column":55,"index":11194},"line":356,"code":"    it('should return an error when the rev has changed', function (done) {\n      this.db.docs.findOne = sinon.stub().callsArgWith(2, null, {\n        rev: 2\n      });\n      this.MongoManager.withRevCheck(this.doc, this.testFunction, (err, result) => {\n        err.should.be.instanceof(Errors.DocModifiedError);\n        done();\n      });\n    });","file":"unit/js/MongoManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return a value error if incoming rev is NaN","suites":["MongoManager","withRevCheck"],"updatePoint":{"line":365,"column":58,"index":11542},"line":365,"code":"    it('should return a value error if incoming rev is NaN', function (done) {\n      this.db.docs.findOne = sinon.stub().callsArgWith(2, null, {\n        rev: 2\n      });\n      this.doc = {\n        _id: ObjectId(),\n        name: 'mock-doc',\n        rev: NaN\n      };\n      this.MongoManager.withRevCheck(this.doc, this.testFunction, (err, result) => {\n        err.should.be.instanceof(Errors.DocRevValueError);\n        done();\n      });\n    });","file":"unit/js/MongoManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return a value error if checked doc rev is NaN","suites":["MongoManager","withRevCheck"],"updatePoint":{"line":379,"column":61,"index":11989},"line":379,"code":"    it('should return a value error if checked doc rev is NaN', function (done) {\n      this.db.docs.findOne = sinon.stub().callsArgWith(2, null, {\n        rev: NaN\n      });\n      this.MongoManager.withRevCheck(this.doc, this.testFunction, (err, result) => {\n        err.should.be.instanceof(Errors.DocRevValueError);\n        done();\n      });\n    });","file":"unit/js/MongoManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"updates Mongo","suites":["MongoManager","restoreArchivedDoc","complete doc"],"updatePoint":{"line":403,"column":23,"index":12717},"line":403,"code":"      it('updates Mongo', function () {\n        expect(this.db.docs.updateOne).to.have.been.calledWith({\n          _id: ObjectId(this.docId),\n          project_id: ObjectId(this.projectId),\n          rev: this.archivedDoc.rev\n        }, {\n          $set: {\n            lines: this.archivedDoc.lines,\n            ranges: this.archivedDoc.ranges\n          },\n          $unset: {\n            inS3: true\n          }\n        });\n      });","file":"unit/js/MongoManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"sets ranges to an empty object","suites":["MongoManager","restoreArchivedDoc","without ranges"],"updatePoint":{"line":424,"column":40,"index":13404},"line":424,"code":"      it('sets ranges to an empty object', function () {\n        expect(this.db.docs.updateOne).to.have.been.calledWith({\n          _id: ObjectId(this.docId),\n          project_id: ObjectId(this.projectId),\n          rev: this.archivedDoc.rev\n        }, {\n          $set: {\n            lines: this.archivedDoc.lines,\n            ranges: {}\n          },\n          $unset: {\n            inS3: true\n          }\n        });\n      });","file":"unit/js/MongoManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"throws a DocRevValueError","suites":["MongoManager","restoreArchivedDoc","when the update doesn't succeed"],"updatePoint":{"line":441,"column":35,"index":13899},"line":441,"code":"      it('throws a DocRevValueError', function (done) {\n        this.db.docs.updateOne.yields(null, {\n          matchedCount: 0\n        });\n        this.MongoManager.restoreArchivedDoc(this.projectId, this.docId, this.archivedDoc, err => {\n          expect(err).to.be.instanceof(Errors.DocRevValueError);\n          done();\n        });\n      });","file":"unit/js/MongoManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should convert ObjectIds and dates to proper objects","suites":["RangeManager","jsonRangesToMongo"],"updatePoint":{"line":33,"column":60,"index":951},"line":33,"code":"    it('should convert ObjectIds and dates to proper objects', function () {\n      const changeId = ObjectId().toString();\n      const commentId = ObjectId().toString();\n      const userId = ObjectId().toString();\n      const threadId = ObjectId().toString();\n      const ts = new Date().toJSON();\n      return this.RangeManager.jsonRangesToMongo({\n        changes: [{\n          id: changeId,\n          op: {\n            i: 'foo',\n            p: 3\n          },\n          metadata: {\n            user_id: userId,\n            ts\n          }\n        }],\n        comments: [{\n          id: commentId,\n          op: {\n            c: 'foo',\n            p: 3,\n            t: threadId\n          }\n        }]\n      }).should.deep.equal({\n        changes: [{\n          id: ObjectId(changeId),\n          op: {\n            i: 'foo',\n            p: 3\n          },\n          metadata: {\n            user_id: ObjectId(userId),\n            ts: new Date(ts)\n          }\n        }],\n        comments: [{\n          id: ObjectId(commentId),\n          op: {\n            c: 'foo',\n            p: 3,\n            t: ObjectId(threadId)\n          }\n        }]\n      });\n    });","file":"unit/js/RangeManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should leave malformed ObjectIds as they are","suites":["RangeManager","jsonRangesToMongo"],"updatePoint":{"line":81,"column":52,"index":2095},"line":81,"code":"    it('should leave malformed ObjectIds as they are', function () {\n      const changeId = 'foo';\n      const commentId = 'bar';\n      const userId = 'baz';\n      return this.RangeManager.jsonRangesToMongo({\n        changes: [{\n          id: changeId,\n          metadata: {\n            user_id: userId\n          }\n        }],\n        comments: [{\n          id: commentId\n        }]\n      }).should.deep.equal({\n        changes: [{\n          id: changeId,\n          metadata: {\n            user_id: userId\n          }\n        }],\n        comments: [{\n          id: commentId\n        }]\n      });\n    });","file":"unit/js/RangeManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should be consistent when transformed through json -> mongo -> json","suites":["RangeManager","jsonRangesToMongo"],"updatePoint":{"line":107,"column":82,"index":2729},"line":107,"code":"    return it('should be consistent when transformed through json -> mongo -> json', function () {\n      const changeId = ObjectId().toString();\n      const commentId = ObjectId().toString();\n      const userId = ObjectId().toString();\n      const threadId = ObjectId().toString();\n      const ts = new Date().toJSON();\n      const ranges1 = {\n        changes: [{\n          id: changeId,\n          op: {\n            i: 'foo',\n            p: 3\n          },\n          metadata: {\n            user_id: userId,\n            ts\n          }\n        }],\n        comments: [{\n          id: commentId,\n          op: {\n            c: 'foo',\n            p: 3,\n            t: threadId\n          }\n        }]\n      };\n      const ranges1Copy = JSON.parse(JSON.stringify(ranges1)); // jsonRangesToMongo modifies in place\n      const ranges2 = JSON.parse(JSON.stringify(this.RangeManager.jsonRangesToMongo(ranges1Copy)));\n      return ranges1.should.deep.equal(ranges2);\n    });","file":"unit/js/RangeManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should throw an error","suites":["RangeManager","shouldUpdateRanges","with a blank new range"],"updatePoint":{"line":165,"column":38,"index":4311},"line":165,"code":"      return it('should throw an error', function () {\n        return expect(() => {\n          return this.RangeManager.shouldUpdateRanges(this.ranges, null);\n        }).to.throw(Error);\n      });","file":"unit/js/RangeManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should treat it like {}","suites":["RangeManager","shouldUpdateRanges","with a blank old range"],"updatePoint":{"line":172,"column":40,"index":4571},"line":172,"code":"      return it('should treat it like {}', function () {\n        this.RangeManager.shouldUpdateRanges(null, {}).should.equal(false);\n        return this.RangeManager.shouldUpdateRanges(null, this.ranges).should.equal(true);\n      });","file":"unit/js/RangeManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return false","suites":["RangeManager","shouldUpdateRanges","with no changes"],"updatePoint":{"line":178,"column":36,"index":4855},"line":178,"code":"      return it('should return false', function () {\n        return this.RangeManager.shouldUpdateRanges(this.ranges, this.ranges_copy).should.equal(false);\n      });","file":"unit/js/RangeManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return true when the change id changes","suites":["RangeManager","shouldUpdateRanges","with changes"],"updatePoint":{"line":183,"column":55,"index":5099},"line":183,"code":"      it('should return true when the change id changes', function () {\n        this.ranges_copy.changes[0].id = ObjectId();\n        return this.RangeManager.shouldUpdateRanges(this.ranges, this.ranges_copy).should.equal(true);\n      });","file":"unit/js/RangeManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return true when the change user id changes","suites":["RangeManager","shouldUpdateRanges","with changes"],"updatePoint":{"line":187,"column":60,"index":5342},"line":187,"code":"      it('should return true when the change user id changes', function () {\n        this.ranges_copy.changes[0].metadata.user_id = ObjectId();\n        return this.RangeManager.shouldUpdateRanges(this.ranges, this.ranges_copy).should.equal(true);\n      });","file":"unit/js/RangeManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return true when the change ts changes","suites":["RangeManager","shouldUpdateRanges","with changes"],"updatePoint":{"line":191,"column":55,"index":5594},"line":191,"code":"      it('should return true when the change ts changes', function () {\n        this.ranges_copy.changes[0].metadata.ts = new Date(Date.now() + 1000);\n        return this.RangeManager.shouldUpdateRanges(this.ranges, this.ranges_copy).should.equal(true);\n      });","file":"unit/js/RangeManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return true when the change op changes","suites":["RangeManager","shouldUpdateRanges","with changes"],"updatePoint":{"line":195,"column":55,"index":5858},"line":195,"code":"      it('should return true when the change op changes', function () {\n        this.ranges_copy.changes[0].op.i = 'bar';\n        return this.RangeManager.shouldUpdateRanges(this.ranges, this.ranges_copy).should.equal(true);\n      });","file":"unit/js/RangeManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return true when the comment id changes","suites":["RangeManager","shouldUpdateRanges","with changes"],"updatePoint":{"line":199,"column":56,"index":6094},"line":199,"code":"      it('should return true when the comment id changes', function () {\n        this.ranges_copy.comments[0].id = ObjectId();\n        return this.RangeManager.shouldUpdateRanges(this.ranges, this.ranges_copy).should.equal(true);\n      });","file":"unit/js/RangeManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return true when the comment offset changes","suites":["RangeManager","shouldUpdateRanges","with changes"],"updatePoint":{"line":203,"column":60,"index":6338},"line":203,"code":"      it('should return true when the comment offset changes', function () {\n        this.ranges_copy.comments[0].op.p = 17;\n        return this.RangeManager.shouldUpdateRanges(this.ranges, this.ranges_copy).should.equal(true);\n      });","file":"unit/js/RangeManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should return true when the comment content changes","suites":["RangeManager","shouldUpdateRanges","with changes"],"updatePoint":{"line":207,"column":68,"index":6584},"line":207,"code":"      return it('should return true when the comment content changes', function () {\n        this.ranges_copy.comments[0].op.c = 'bar';\n        return this.RangeManager.shouldUpdateRanges(this.ranges, this.ranges_copy).should.equal(true);\n      });","file":"unit/js/RangeManagerTests.js","skipped":false,"dir":"services/docstore/test"},{"name":"should load the document from the web API","suites":["Applying updates to a doc","when the document is not loaded"],"updatePoint":{"line":62,"column":49,"index":2491},"line":62,"code":"    it('should load the document from the web API', function () {\n      return MockWebApi.getDocument.calledWith(this.project_id, this.doc_id).should.equal(true);\n    });","file":"acceptance/js/ApplyingUpdatesToADocTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should update the doc","suites":["Applying updates to a doc","when the document is not loaded"],"updatePoint":{"line":65,"column":29,"index":2642},"line":65,"code":"    it('should update the doc', function (done) {\n      DocUpdaterClient.getDoc(this.project_id, this.doc_id, (error, res, doc) => {\n        if (error) return done(error);\n        doc.lines.should.deep.equal(this.result);\n        return done();\n      });\n      return null;\n    });","file":"acceptance/js/ApplyingUpdatesToADocTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should push the applied updates to the track changes api","suites":["Applying updates to a doc","when the document is not loaded"],"updatePoint":{"line":73,"column":64,"index":2959},"line":73,"code":"    it('should push the applied updates to the track changes api', function (done) {\n      rclientHistory.lrange(HistoryKeys.uncompressedHistoryOps({\n        doc_id: this.doc_id\n      }), 0, -1, (error, updates) => {\n        if (error != null) {\n          throw error;\n        }\n        JSON.parse(updates[0]).op.should.deep.equal(this.update.op);\n        return rclientHistory.sismember(HistoryKeys.docsWithHistoryOps({\n          project_id: this.project_id\n        }), this.doc_id, (error, result) => {\n          if (error != null) {\n            throw error;\n          }\n          result.should.equal(1);\n          return done();\n        });\n      });\n      return null;\n    });","file":"acceptance/js/ApplyingUpdatesToADocTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should push the applied updates to the project history changes api","suites":["Applying updates to a doc","when the document is not loaded"],"updatePoint":{"line":93,"column":74,"index":3650},"line":93,"code":"    it('should push the applied updates to the project history changes api', function (done) {\n      rclientProjectHistory.lrange(ProjectHistoryKeys.projectHistoryOps({\n        project_id: this.project_id\n      }), 0, -1, (error, updates) => {\n        if (error != null) {\n          throw error;\n        }\n        JSON.parse(updates[0]).op.should.deep.equal(this.update.op);\n        return done();\n      });\n      return null;\n    });","file":"acceptance/js/ApplyingUpdatesToADocTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should set the first op timestamp","suites":["Applying updates to a doc","when the document is not loaded"],"updatePoint":{"line":105,"column":41,"index":4052},"line":105,"code":"    it('should set the first op timestamp', function (done) {\n      rclientProjectHistory.get(ProjectHistoryKeys.projectHistoryFirstOpTimestamp({\n        project_id: this.project_id\n      }), (error, result) => {\n        if (error != null) {\n          throw error;\n        }\n        result = parseInt(result, 10);\n        result.should.be.within(this.startTime, Date.now());\n        this.firstOpTimestamp = result;\n        return done();\n      });\n      return null;\n    });","file":"acceptance/js/ApplyingUpdatesToADocTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not change the first op timestamp","suites":["Applying updates to a doc","when the document is not loaded","when sending another update"],"updatePoint":{"line":132,"column":57,"index":5023},"line":132,"code":"      return it('should not change the first op timestamp', function (done) {\n        rclientProjectHistory.get(ProjectHistoryKeys.projectHistoryFirstOpTimestamp({\n          project_id: this.project_id\n        }), (error, result) => {\n          if (error != null) {\n            throw error;\n          }\n          result = parseInt(result, 10);\n          result.should.equal(this.firstOpTimestamp);\n          return done();\n        });\n        return null;\n      });","file":"acceptance/js/ApplyingUpdatesToADocTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not need to call the web api","suites":["Applying updates to a doc","when the document is loaded"],"updatePoint":{"line":172,"column":43,"index":6335},"line":172,"code":"    it('should not need to call the web api', function () {\n      return MockWebApi.getDocument.called.should.equal(false);\n    });","file":"acceptance/js/ApplyingUpdatesToADocTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should update the doc","suites":["Applying updates to a doc","when the document is loaded"],"updatePoint":{"line":175,"column":29,"index":6453},"line":175,"code":"    it('should update the doc', function (done) {\n      DocUpdaterClient.getDoc(this.project_id, this.doc_id, (error, res, doc) => {\n        if (error) return done(error);\n        doc.lines.should.deep.equal(this.result);\n        return done();\n      });\n      return null;\n    });","file":"acceptance/js/ApplyingUpdatesToADocTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should push the applied updates to the track changes api","suites":["Applying updates to a doc","when the document is loaded"],"updatePoint":{"line":183,"column":64,"index":6770},"line":183,"code":"    it('should push the applied updates to the track changes api', function (done) {\n      rclientHistory.lrange(HistoryKeys.uncompressedHistoryOps({\n        doc_id: this.doc_id\n      }), 0, -1, (error, updates) => {\n        if (error) return done(error);\n        JSON.parse(updates[0]).op.should.deep.equal(this.update.op);\n        return rclientHistory.sismember(HistoryKeys.docsWithHistoryOps({\n          project_id: this.project_id\n        }), this.doc_id, (error, result) => {\n          if (error) return done(error);\n          result.should.equal(1);\n          return done();\n        });\n      });\n      return null;\n    });","file":"acceptance/js/ApplyingUpdatesToADocTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should push the applied updates to the project history changes api","suites":["Applying updates to a doc","when the document is loaded"],"updatePoint":{"line":199,"column":81,"index":7418},"line":199,"code":"    return it('should push the applied updates to the project history changes api', function (done) {\n      rclientProjectHistory.lrange(ProjectHistoryKeys.projectHistoryOps({\n        project_id: this.project_id\n      }), 0, -1, (error, updates) => {\n        if (error) return done(error);\n        JSON.parse(updates[0]).op.should.deep.equal(this.update.op);\n        return done();\n      });\n      return null;\n    });","file":"acceptance/js/ApplyingUpdatesToADocTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should update the doc","suites":["Applying updates to a doc","when the document is loaded and is using project-history only"],"updatePoint":{"line":236,"column":29,"index":8718},"line":236,"code":"    it('should update the doc', function (done) {\n      DocUpdaterClient.getDoc(this.project_id, this.doc_id, (error, res, doc) => {\n        if (error) return done(error);\n        doc.lines.should.deep.equal(this.result);\n        return done();\n      });\n      return null;\n    });","file":"acceptance/js/ApplyingUpdatesToADocTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not push any applied updates to the track changes api","suites":["Applying updates to a doc","when the document is loaded and is using project-history only"],"updatePoint":{"line":244,"column":68,"index":9039},"line":244,"code":"    it('should not push any applied updates to the track changes api', function (done) {\n      rclientHistory.lrange(HistoryKeys.uncompressedHistoryOps({\n        doc_id: this.doc_id\n      }), 0, -1, (error, updates) => {\n        if (error) return done(error);\n        updates.length.should.equal(0);\n        return done();\n      });\n      return null;\n    });","file":"acceptance/js/ApplyingUpdatesToADocTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should push the applied updates to the project history changes api","suites":["Applying updates to a doc","when the document is loaded and is using project-history only"],"updatePoint":{"line":254,"column":81,"index":9412},"line":254,"code":"    return it('should push the applied updates to the project history changes api', function (done) {\n      rclientProjectHistory.lrange(ProjectHistoryKeys.projectHistoryOps({\n        project_id: this.project_id\n      }), 0, -1, (error, updates) => {\n        if (error) return done(error);\n        JSON.parse(updates[0]).op.should.deep.equal(this.update.op);\n        return done();\n      });\n      return null;\n    });","file":"acceptance/js/ApplyingUpdatesToADocTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should be able to continue applying updates when the project has been deleted","suites":["Applying updates to a doc","when the document has been deleted","when the ops come in a single linear order"],"updatePoint":{"line":356,"column":87,"index":11787},"line":356,"code":"      it('should be able to continue applying updates when the project has been deleted', function (done) {\n        let update;\n        const actions = [];\n        for (update of Array.from(this.updates.slice(0, 6))) {\n          ;\n          (update => {\n            return actions.push(callback => DocUpdaterClient.sendUpdate(this.project_id, this.doc_id, update, callback));\n          })(update);\n        }\n        actions.push(callback => DocUpdaterClient.deleteDoc(this.project_id, this.doc_id, callback));\n        for (update of Array.from(this.updates.slice(6))) {\n          ;\n          (update => {\n            return actions.push(callback => DocUpdaterClient.sendUpdate(this.project_id, this.doc_id, update, callback));\n          })(update);\n        }\n        async.series(actions, error => {\n          if (error != null) {\n            throw error;\n          }\n          return DocUpdaterClient.getDoc(this.project_id, this.doc_id, (error, res, doc) => {\n            if (error) return done(error);\n            doc.lines.should.deep.equal(this.my_result);\n            return done();\n          });\n        });\n        return null;\n      });","file":"acceptance/js/ApplyingUpdatesToADocTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should push the applied updates to the track changes api","suites":["Applying updates to a doc","when the document has been deleted","when the ops come in a single linear order"],"updatePoint":{"line":384,"column":66,"index":12912},"line":384,"code":"      it('should push the applied updates to the track changes api', function (done) {\n        rclientHistory.lrange(HistoryKeys.uncompressedHistoryOps({\n          doc_id: this.doc_id\n        }), 0, -1, (error, updates) => {\n          if (error) return done(error);\n          updates = Array.from(updates).map(u => JSON.parse(u));\n          for (let i = 0; i < this.updates.length; i++) {\n            const appliedUpdate = this.updates[i];\n            appliedUpdate.op.should.deep.equal(updates[i].op);\n          }\n          return rclientHistory.sismember(HistoryKeys.docsWithHistoryOps({\n            project_id: this.project_id\n          }), this.doc_id, (error, result) => {\n            if (error) return done(error);\n            result.should.equal(1);\n            return done();\n          });\n        });\n        return null;\n      });","file":"acceptance/js/ApplyingUpdatesToADocTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should store the doc ops in the correct order","suites":["Applying updates to a doc","when the document has been deleted","when the ops come in a single linear order"],"updatePoint":{"line":404,"column":62,"index":13749},"line":404,"code":"      return it('should store the doc ops in the correct order', function (done) {\n        rclientDU.lrange(Keys.docOps({\n          doc_id: this.doc_id\n        }), 0, -1, (error, updates) => {\n          if (error) return done(error);\n          updates = Array.from(updates).map(u => JSON.parse(u));\n          for (let i = 0; i < this.updates.length; i++) {\n            const appliedUpdate = this.updates[i];\n            appliedUpdate.op.should.deep.equal(updates[i].op);\n          }\n          return done();\n        });\n        return null;\n      });","file":"acceptance/js/ApplyingUpdatesToADocTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should be able to continue applying updates when the project has been deleted","suites":["Applying updates to a doc","when the document has been deleted","when older ops come in after the delete"],"updatePoint":{"line":474,"column":94,"index":15591},"line":474,"code":"      return it('should be able to continue applying updates when the project has been deleted', function (done) {\n        let update;\n        const actions = [];\n        for (update of Array.from(this.updates.slice(0, 5))) {\n          ;\n          (update => {\n            return actions.push(callback => DocUpdaterClient.sendUpdate(this.project_id, this.doc_id, update, callback));\n          })(update);\n        }\n        actions.push(callback => DocUpdaterClient.deleteDoc(this.project_id, this.doc_id, callback));\n        for (update of Array.from(this.updates.slice(5))) {\n          ;\n          (update => {\n            return actions.push(callback => DocUpdaterClient.sendUpdate(this.project_id, this.doc_id, update, callback));\n          })(update);\n        }\n        async.series(actions, error => {\n          if (error != null) {\n            throw error;\n          }\n          return DocUpdaterClient.getDoc(this.project_id, this.doc_id, (error, res, doc) => {\n            if (error) return done(error);\n            doc.lines.should.deep.equal(this.my_result);\n            return done();\n          });\n        });\n        return null;\n      });","file":"acceptance/js/ApplyingUpdatesToADocTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not update the doc","suites":["Applying updates to a doc","with a broken update"],"updatePoint":{"line":529,"column":33,"index":17508},"line":529,"code":"    it('should not update the doc', function (done) {\n      DocUpdaterClient.getDoc(this.project_id, this.doc_id, (error, res, doc) => {\n        if (error) return done(error);\n        doc.lines.should.deep.equal(this.lines);\n        return done();\n      });\n      return null;\n    });","file":"acceptance/js/ApplyingUpdatesToADocTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should send a message with an error","suites":["Applying updates to a doc","with a broken update"],"updatePoint":{"line":537,"column":50,"index":17810},"line":537,"code":"    return it('should send a message with an error', function () {\n      this.messageCallback.called.should.equal(true);\n      const [channel, message] = Array.from(this.messageCallback.args[0]);\n      channel.should.equal('applied-ops');\n      return JSON.parse(message).should.deep.include({\n        project_id: this.project_id,\n        doc_id: this.doc_id,\n        error: 'Delete component does not match'\n      });\n    });","file":"acceptance/js/ApplyingUpdatesToADocTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should flush the doc twice","suites":["Applying updates to a doc","with enough updates to flush to the track changes api"],"updatePoint":{"line":591,"column":41,"index":19502},"line":591,"code":"    return it('should flush the doc twice', function () {\n      return MockTrackChangesApi.flushDoc.calledTwice.should.equal(true);\n    });","file":"acceptance/js/ApplyingUpdatesToADocTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should update the doc (using version = 0)","suites":["Applying updates to a doc","when there is no version in Mongo"],"updatePoint":{"line":615,"column":56,"index":20287},"line":615,"code":"    return it('should update the doc (using version = 0)', function (done) {\n      DocUpdaterClient.getDoc(this.project_id, this.doc_id, (error, res, doc) => {\n        if (error) return done(error);\n        doc.lines.should.deep.equal(this.result);\n        return done();\n      });\n      return null;\n    });","file":"acceptance/js/ApplyingUpdatesToADocTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should update the doc","suites":["Applying updates to a doc","when the sending duplicate ops"],"updatePoint":{"line":671,"column":29,"index":22021},"line":671,"code":"    it('should update the doc', function (done) {\n      DocUpdaterClient.getDoc(this.project_id, this.doc_id, (error, res, doc) => {\n        if (error) return done(error);\n        doc.lines.should.deep.equal(this.result);\n        return done();\n      });\n      return null;\n    });","file":"acceptance/js/ApplyingUpdatesToADocTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return a message about duplicate ops","suites":["Applying updates to a doc","when the sending duplicate ops"],"updatePoint":{"line":679,"column":58,"index":22332},"line":679,"code":"    return it('should return a message about duplicate ops', function () {\n      this.messageCallback.calledTwice.should.equal(true);\n      this.messageCallback.args[0][0].should.equal('applied-ops');\n      expect(JSON.parse(this.messageCallback.args[0][1]).op.dup).to.be.undefined;\n      this.messageCallback.args[1][0].should.equal('applied-ops');\n      return expect(JSON.parse(this.messageCallback.args[1][1]).op.dup).to.equal(true);\n    });","file":"acceptance/js/ApplyingUpdatesToADocTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not update or create a doc","suites":["Applying updates to a doc","when sending updates for a non-existing doc id"],"updatePoint":{"line":708,"column":41,"index":23467},"line":708,"code":"    it('should not update or create a doc', function (done) {\n      DocUpdaterClient.getDoc(this.project_id, this.doc_id, (error, res, doc) => {\n        if (error) return done(error);\n        res.statusCode.should.equal(404);\n        return done();\n      });\n      return null;\n    });","file":"acceptance/js/ApplyingUpdatesToADocTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should send a message with an error","suites":["Applying updates to a doc","when sending updates for a non-existing doc id"],"updatePoint":{"line":716,"column":50,"index":23762},"line":716,"code":"    return it('should send a message with an error', function () {\n      this.messageCallback.called.should.equal(true);\n      const [channel, message] = Array.from(this.messageCallback.args[0]);\n      channel.should.equal('applied-ops');\n      return JSON.parse(message).should.deep.include({\n        project_id: this.project_id,\n        doc_id: this.doc_id,\n        error: `doc not not found: /project/${this.project_id}/doc/${this.doc_id}`\n      });\n    });","file":"acceptance/js/ApplyingUpdatesToADocTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should push the applied file renames to the project history api","suites":["Applying updates to a project's structure","renaming a file"],"updatePoint":{"line":36,"column":71,"index":1427},"line":36,"code":"    it('should push the applied file renames to the project history api', function (done) {\n      rclientProjectHistory.lrange(ProjectHistoryKeys.projectHistoryOps({\n        project_id: this.project_id\n      }), 0, -1, (error, updates) => {\n        if (error) {\n          return done(error);\n        }\n        const update = JSON.parse(updates[0]);\n        update.file.should.equal(this.fileUpdate.id);\n        update.pathname.should.equal('/file-path');\n        update.new_pathname.should.equal('/new-file-path');\n        update.meta.user_id.should.equal(this.user_id);\n        update.meta.ts.should.be.a('string');\n        update.version.should.equal(`${this.version}.0`);\n        done();\n      });\n    });","file":"acceptance/js/ApplyingUpdatesToProjectStructureTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should push the applied file renames to the project history api","suites":["Applying updates to a project's structure","deleting a file"],"updatePoint":{"line":71,"column":71,"index":2690},"line":71,"code":"    it('should push the applied file renames to the project history api', function (done) {\n      rclientProjectHistory.lrange(ProjectHistoryKeys.projectHistoryOps({\n        project_id: this.project_id\n      }), 0, -1, (error, updates) => {\n        if (error) {\n          return done(error);\n        }\n        const update = JSON.parse(updates[0]);\n        update.file.should.equal(this.fileUpdate.id);\n        update.pathname.should.equal('/file-path');\n        update.new_pathname.should.equal('');\n        update.meta.user_id.should.equal(this.user_id);\n        update.meta.ts.should.be.a('string');\n        update.version.should.equal(`${this.version}.0`);\n        done();\n      });\n    });","file":"acceptance/js/ApplyingUpdatesToProjectStructureTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should push the applied doc renames to the project history api","suites":["Applying updates to a project's structure","renaming a document","when the document is not loaded"],"updatePoint":{"line":109,"column":72,"index":4060},"line":109,"code":"      it('should push the applied doc renames to the project history api', function (done) {\n        rclientProjectHistory.lrange(ProjectHistoryKeys.projectHistoryOps({\n          project_id: this.project_id\n        }), 0, -1, (error, updates) => {\n          if (error) {\n            return done(error);\n          }\n          const update = JSON.parse(updates[0]);\n          update.doc.should.equal(this.update.id);\n          update.pathname.should.equal('/doc-path');\n          update.new_pathname.should.equal('/new-doc-path');\n          update.meta.user_id.should.equal(this.user_id);\n          update.meta.ts.should.be.a('string');\n          update.version.should.equal(`${this.version}.0`);\n          done();\n        });\n      });","file":"acceptance/js/ApplyingUpdatesToProjectStructureTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should update the doc","suites":["Applying updates to a project's structure","renaming a document","when the document is loaded"],"updatePoint":{"line":147,"column":31,"index":5505},"line":147,"code":"      it('should update the doc', function (done) {\n        DocUpdaterClient.getDoc(this.project_id, this.update.id, (error, res, doc) => {\n          if (error) {\n            return done(error);\n          }\n          doc.pathname.should.equal(this.update.newPathname);\n          done();\n        });\n      });","file":"acceptance/js/ApplyingUpdatesToProjectStructureTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should push the applied doc renames to the project history api","suites":["Applying updates to a project's structure","renaming a document","when the document is loaded"],"updatePoint":{"line":156,"column":72,"index":5855},"line":156,"code":"      it('should push the applied doc renames to the project history api', function (done) {\n        rclientProjectHistory.lrange(ProjectHistoryKeys.projectHistoryOps({\n          project_id: this.project_id\n        }), 0, -1, (error, updates) => {\n          if (error) {\n            return done(error);\n          }\n          const update = JSON.parse(updates[0]);\n          update.doc.should.equal(this.update.id);\n          update.pathname.should.equal('/doc-path');\n          update.new_pathname.should.equal('/new-doc-path');\n          update.meta.user_id.should.equal(this.user_id);\n          update.meta.ts.should.be.a('string');\n          update.version.should.equal(`${this.version}.0`);\n          done();\n        });\n      });","file":"acceptance/js/ApplyingUpdatesToProjectStructureTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should push the applied doc renames to the project history api","suites":["Applying updates to a project's structure","renaming multiple documents and files","when the documents are not loaded"],"updatePoint":{"line":213,"column":72,"index":7885},"line":213,"code":"      it('should push the applied doc renames to the project history api', function (done) {\n        rclientProjectHistory.lrange(ProjectHistoryKeys.projectHistoryOps({\n          project_id: this.project_id\n        }), 0, -1, (error, updates) => {\n          if (error) {\n            return done(error);\n          }\n          let update = JSON.parse(updates[0]);\n          update.doc.should.equal(this.docUpdate0.id);\n          update.pathname.should.equal('/doc-path0');\n          update.new_pathname.should.equal('/new-doc-path0');\n          update.meta.user_id.should.equal(this.user_id);\n          update.meta.ts.should.be.a('string');\n          update.version.should.equal(`${this.version}.0`);\n          update = JSON.parse(updates[1]);\n          update.doc.should.equal(this.docUpdate1.id);\n          update.pathname.should.equal('/doc-path1');\n          update.new_pathname.should.equal('/new-doc-path1');\n          update.meta.user_id.should.equal(this.user_id);\n          update.meta.ts.should.be.a('string');\n          update.version.should.equal(`${this.version}.1`);\n          update = JSON.parse(updates[2]);\n          update.file.should.equal(this.fileUpdate0.id);\n          update.pathname.should.equal('/file-path0');\n          update.new_pathname.should.equal('/new-file-path0');\n          update.meta.user_id.should.equal(this.user_id);\n          update.meta.ts.should.be.a('string');\n          update.version.should.equal(`${this.version}.2`);\n          update = JSON.parse(updates[3]);\n          update.file.should.equal(this.fileUpdate1.id);\n          update.pathname.should.equal('/file-path1');\n          update.new_pathname.should.equal('/new-file-path1');\n          update.meta.user_id.should.equal(this.user_id);\n          update.meta.ts.should.be.a('string');\n          update.version.should.equal(`${this.version}.3`);\n          done();\n        });\n      });","file":"acceptance/js/ApplyingUpdatesToProjectStructureTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should push the applied doc update to the project history api","suites":["Applying updates to a project's structure","deleting a document","when the document is not loaded"],"updatePoint":{"line":273,"column":71,"index":10440},"line":273,"code":"      it('should push the applied doc update to the project history api', function (done) {\n        rclientProjectHistory.lrange(ProjectHistoryKeys.projectHistoryOps({\n          project_id: this.project_id\n        }), 0, -1, (error, updates) => {\n          if (error) {\n            return done(error);\n          }\n          const update = JSON.parse(updates[0]);\n          update.doc.should.equal(this.update.id);\n          update.pathname.should.equal('/doc-path');\n          update.new_pathname.should.equal('');\n          update.meta.user_id.should.equal(this.user_id);\n          update.meta.ts.should.be.a('string');\n          update.version.should.equal(`${this.version}.0`);\n          done();\n        });\n      });","file":"acceptance/js/ApplyingUpdatesToProjectStructureTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not modify the doc","suites":["Applying updates to a project's structure","deleting a document","when the document is loaded"],"updatePoint":{"line":311,"column":35,"index":11876},"line":311,"code":"      it('should not modify the doc', function (done) {\n        DocUpdaterClient.getDoc(this.project_id, this.update.id, (error, res, doc) => {\n          if (error) {\n            return done(error);\n          }\n          doc.pathname.should.equal('/a/b/c.tex'); // default pathname from MockWebApi\n          done();\n        });\n      });","file":"acceptance/js/ApplyingUpdatesToProjectStructureTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should push the applied doc update to the project history api","suites":["Applying updates to a project's structure","deleting a document","when the document is loaded"],"updatePoint":{"line":320,"column":71,"index":12250},"line":320,"code":"      it('should push the applied doc update to the project history api', function (done) {\n        rclientProjectHistory.lrange(ProjectHistoryKeys.projectHistoryOps({\n          project_id: this.project_id\n        }), 0, -1, (error, updates) => {\n          if (error) {\n            return done(error);\n          }\n          const update = JSON.parse(updates[0]);\n          update.doc.should.equal(this.update.id);\n          update.pathname.should.equal('/doc-path');\n          update.new_pathname.should.equal('');\n          update.meta.user_id.should.equal(this.user_id);\n          update.meta.ts.should.be.a('string');\n          update.version.should.equal(`${this.version}.0`);\n          done();\n        });\n      });","file":"acceptance/js/ApplyingUpdatesToProjectStructureTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should push the file addition to the project history api","suites":["Applying updates to a project's structure","adding a file"],"updatePoint":{"line":356,"column":64,"index":13534},"line":356,"code":"    it('should push the file addition to the project history api', function (done) {\n      rclientProjectHistory.lrange(ProjectHistoryKeys.projectHistoryOps({\n        project_id: this.project_id\n      }), 0, -1, (error, updates) => {\n        if (error) {\n          return done(error);\n        }\n        const update = JSON.parse(updates[0]);\n        update.file.should.equal(this.fileUpdate.id);\n        update.pathname.should.equal('/file-path');\n        update.url.should.equal('filestore.example.com');\n        update.meta.user_id.should.equal(this.user_id);\n        update.meta.ts.should.be.a('string');\n        update.version.should.equal(`${this.version}.0`);\n        done();\n      });\n    });","file":"acceptance/js/ApplyingUpdatesToProjectStructureTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should push the doc addition to the project history api","suites":["Applying updates to a project's structure","adding a doc"],"updatePoint":{"line":391,"column":63,"index":14779},"line":391,"code":"    it('should push the doc addition to the project history api', function (done) {\n      rclientProjectHistory.lrange(ProjectHistoryKeys.projectHistoryOps({\n        project_id: this.project_id\n      }), 0, -1, (error, updates) => {\n        if (error) {\n          return done(error);\n        }\n        const update = JSON.parse(updates[0]);\n        update.doc.should.equal(this.docUpdate.id);\n        update.pathname.should.equal('/file-path');\n        update.docLines.should.equal('a\\nb');\n        update.meta.user_id.should.equal(this.user_id);\n        update.meta.ts.should.be.a('string');\n        update.version.should.equal(`${this.version}.0`);\n        done();\n      });\n    });","file":"acceptance/js/ApplyingUpdatesToProjectStructureTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should flush project history","suites":["Applying updates to a project's structure","with enough updates to flush to the history service"],"updatePoint":{"line":445,"column":36,"index":16698},"line":445,"code":"    it('should flush project history', function () {\n      MockProjectHistoryApi.flushProject.calledWith(this.project_id).should.equal(true);\n    });","file":"acceptance/js/ApplyingUpdatesToProjectStructureTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not flush project history","suites":["Applying updates to a project's structure","with too few updates to flush to the history service"],"updatePoint":{"line":485,"column":40,"index":18084},"line":485,"code":"    it('should not flush project history', function () {\n      MockProjectHistoryApi.flushProject.calledWith(this.project_id).should.equal(false);\n    });","file":"acceptance/js/ApplyingUpdatesToProjectStructureTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return a 204 status code","suites":["Deleting a document","when the updated doc exists in the doc updater"],"updatePoint":{"line":69,"column":39,"index":2609},"line":69,"code":"    it('should return a 204 status code', function () {\n      return this.statusCode.should.equal(204);\n    });","file":"acceptance/js/DeletingADocumentTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should send the updated document and version to the web api","suites":["Deleting a document","when the updated doc exists in the doc updater"],"updatePoint":{"line":72,"column":67,"index":2749},"line":72,"code":"    it('should send the updated document and version to the web api', function () {\n      return MockWebApi.setDocument.calledWith(this.project_id, this.doc_id, this.result, this.version + 1).should.equal(true);\n    });","file":"acceptance/js/DeletingADocumentTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should need to reload the doc if read again","suites":["Deleting a document","when the updated doc exists in the doc updater"],"updatePoint":{"line":75,"column":51,"index":2953},"line":75,"code":"    it('should need to reload the doc if read again', function (done) {\n      MockWebApi.getDocument.resetHistory();\n      MockWebApi.getDocument.called.should.equals(false);\n      return DocUpdaterClient.getDoc(this.project_id, this.doc_id, (error, res, doc) => {\n        if (error) return done(error);\n        MockWebApi.getDocument.calledWith(this.project_id, this.doc_id).should.equal(true);\n        return done();\n      });\n    });","file":"acceptance/js/DeletingADocumentTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should flush track changes","suites":["Deleting a document","when the updated doc exists in the doc updater"],"updatePoint":{"line":84,"column":34,"index":3373},"line":84,"code":"    it('should flush track changes', function () {\n      return MockTrackChangesApi.flushDoc.calledWith(this.doc_id).should.equal(true);\n    });","file":"acceptance/js/DeletingADocumentTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should flush project history","suites":["Deleting a document","when the updated doc exists in the doc updater"],"updatePoint":{"line":87,"column":43,"index":3527},"line":87,"code":"    return it('should flush project history', function () {\n      return MockProjectHistoryApi.flushProject.calledWith(this.project_id).should.equal(true);\n    });","file":"acceptance/js/DeletingADocumentTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return a 204 status code","suites":["Deleting a document","when the doc is not in the doc updater"],"updatePoint":{"line":110,"column":39,"index":4448},"line":110,"code":"    it('should return a 204 status code', function () {\n      return this.statusCode.should.equal(204);\n    });","file":"acceptance/js/DeletingADocumentTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not need to send the updated document to the web api","suites":["Deleting a document","when the doc is not in the doc updater"],"updatePoint":{"line":113,"column":67,"index":4588},"line":113,"code":"    it('should not need to send the updated document to the web api', function () {\n      return MockWebApi.setDocument.called.should.equal(false);\n    });","file":"acceptance/js/DeletingADocumentTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should need to reload the doc if read again","suites":["Deleting a document","when the doc is not in the doc updater"],"updatePoint":{"line":116,"column":51,"index":4728},"line":116,"code":"    it('should need to reload the doc if read again', function (done) {\n      MockWebApi.getDocument.called.should.equals(false);\n      return DocUpdaterClient.getDoc(this.project_id, this.doc_id, (error, res, doc) => {\n        if (error) return done(error);\n        MockWebApi.getDocument.calledWith(this.project_id, this.doc_id).should.equal(true);\n        return done();\n      });\n    });","file":"acceptance/js/DeletingADocumentTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should flush track changes","suites":["Deleting a document","when the doc is not in the doc updater"],"updatePoint":{"line":124,"column":34,"index":5103},"line":124,"code":"    it('should flush track changes', function () {\n      return MockTrackChangesApi.flushDoc.calledWith(this.doc_id).should.equal(true);\n    });","file":"acceptance/js/DeletingADocumentTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should flush project history","suites":["Deleting a document","when the doc is not in the doc updater"],"updatePoint":{"line":127,"column":43,"index":5257},"line":127,"code":"    return it('should flush project history', function () {\n      return MockProjectHistoryApi.flushProject.calledWith(this.project_id).should.equal(true);\n    });","file":"acceptance/js/DeletingADocumentTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return a 204 status code","suites":["Deleting a project","with documents which have been updated"],"updatePoint":{"line":88,"column":39,"index":3002},"line":88,"code":"    it('should return a 204 status code', function () {\n      return this.statusCode.should.equal(204);\n    });","file":"acceptance/js/DeletingAProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should send each document to the web api","suites":["Deleting a project","with documents which have been updated"],"updatePoint":{"line":91,"column":48,"index":3123},"line":91,"code":"    it('should send each document to the web api', function () {\n      return Array.from(this.docs).map(doc => MockWebApi.setDocument.calledWith(this.project_id, doc.id, doc.updatedLines).should.equal(true));\n    });","file":"acceptance/js/DeletingAProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should need to reload the docs if read again","suites":["Deleting a project","with documents which have been updated"],"updatePoint":{"line":94,"column":52,"index":3344},"line":94,"code":"    it('should need to reload the docs if read again', function (done) {\n      sinon.spy(MockWebApi, 'getDocument');\n      return async.series(this.docs.map(doc => {\n        return callback => {\n          MockWebApi.getDocument.calledWith(this.project_id, doc.id).should.equal(false);\n          return DocUpdaterClient.getDoc(this.project_id, doc.id, (error, res, returnedDoc) => {\n            if (error) return done(error);\n            MockWebApi.getDocument.calledWith(this.project_id, doc.id).should.equal(true);\n            return callback();\n          });\n        };\n      }), () => {\n        MockWebApi.getDocument.restore();\n        return done();\n      });\n    });","file":"acceptance/js/DeletingAProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should flush each doc in track changes","suites":["Deleting a project","with documents which have been updated"],"updatePoint":{"line":110,"column":46,"index":4011},"line":110,"code":"    it('should flush each doc in track changes', function () {\n      return Array.from(this.docs).map(doc => MockTrackChangesApi.flushDoc.calledWith(doc.id).should.equal(true));\n    });","file":"acceptance/js/DeletingAProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should flush each doc in project history","suites":["Deleting a project","with documents which have been updated"],"updatePoint":{"line":113,"column":55,"index":4206},"line":113,"code":"    return it('should flush each doc in project history', function () {\n      return MockProjectHistoryApi.flushProject.calledWith(this.project_id).should.equal(true);\n    });","file":"acceptance/js/DeletingAProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return a 204 status code","suites":["Deleting a project","with the background=true parameter from realtime and no request to flush the queue"],"updatePoint":{"line":144,"column":39,"index":5390},"line":144,"code":"    it('should return a 204 status code', function () {\n      return this.statusCode.should.equal(204);\n    });","file":"acceptance/js/DeletingAProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not send any documents to the web api","suites":["Deleting a project","with the background=true parameter from realtime and no request to flush the queue"],"updatePoint":{"line":147,"column":52,"index":5515},"line":147,"code":"    it('should not send any documents to the web api', function () {\n      return MockWebApi.setDocument.called.should.equal(false);\n    });","file":"acceptance/js/DeletingAProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not flush any docs in track changes","suites":["Deleting a project","with the background=true parameter from realtime and no request to flush the queue"],"updatePoint":{"line":150,"column":50,"index":5654},"line":150,"code":"    it('should not flush any docs in track changes', function () {\n      return MockTrackChangesApi.flushDoc.called.should.equal(false);\n    });","file":"acceptance/js/DeletingAProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not flush to project history","suites":["Deleting a project","with the background=true parameter from realtime and no request to flush the queue"],"updatePoint":{"line":153,"column":50,"index":5799},"line":153,"code":"    return it('should not flush to project history', function () {\n      return MockProjectHistoryApi.flushProject.called.should.equal(false);\n    });","file":"acceptance/js/DeletingAProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return a 204 status code","suites":["Deleting a project","with the background=true parameter from realtime and a request to flush the queue"],"updatePoint":{"line":185,"column":39,"index":7113},"line":185,"code":"    it('should return a 204 status code', function () {\n      return this.statusCode.should.equal(204);\n    });","file":"acceptance/js/DeletingAProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should send each document to the web api","suites":["Deleting a project","with the background=true parameter from realtime and a request to flush the queue"],"updatePoint":{"line":188,"column":48,"index":7234},"line":188,"code":"    it('should send each document to the web api', function () {\n      return Array.from(this.docs).map(doc => MockWebApi.setDocument.calledWith(this.project_id, doc.id, doc.updatedLines).should.equal(true));\n    });","file":"acceptance/js/DeletingAProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should flush each doc in track changes","suites":["Deleting a project","with the background=true parameter from realtime and a request to flush the queue"],"updatePoint":{"line":191,"column":46,"index":7449},"line":191,"code":"    it('should flush each doc in track changes', function () {\n      return Array.from(this.docs).map(doc => MockTrackChangesApi.flushDoc.calledWith(doc.id).should.equal(true));\n    });","file":"acceptance/js/DeletingAProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should flush to project history","suites":["Deleting a project","with the background=true parameter from realtime and a request to flush the queue"],"updatePoint":{"line":194,"column":46,"index":7635},"line":194,"code":"    return it('should flush to project history', function () {\n      return MockProjectHistoryApi.flushProject.called.should.equal(true);\n    });","file":"acceptance/js/DeletingAProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return a 204 status code","suites":["Flushing a project","with documents which have been updated"],"updatePoint":{"line":82,"column":39,"index":2660},"line":82,"code":"    it('should return a 204 status code', function () {\n      return this.statusCode.should.equal(204);\n    });","file":"acceptance/js/FlushingAProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should send each document to the web api","suites":["Flushing a project","with documents which have been updated"],"updatePoint":{"line":85,"column":48,"index":2781},"line":85,"code":"    it('should send each document to the web api', function () {\n      return Array.from(this.docs).map(doc => MockWebApi.setDocument.calledWith(this.project_id, doc.id, doc.updatedLines).should.equal(true));\n    });","file":"acceptance/js/FlushingAProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should update the lines in the doc updater","suites":["Flushing a project","with documents which have been updated"],"updatePoint":{"line":88,"column":57,"index":3007},"line":88,"code":"    return it('should update the lines in the doc updater', function (done) {\n      return async.series(this.docs.map(doc => {\n        return callback => {\n          return DocUpdaterClient.getDoc(this.project_id, doc.id, (error, res, returnedDoc) => {\n            if (error) return done(error);\n            returnedDoc.lines.should.deep.equal(doc.updatedLines);\n            return callback();\n          });\n        };\n      }), done);\n    });","file":"acceptance/js/FlushingAProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should flush the updated doc lines and version to the web api","suites":["Flushing a doc to Mongo","when the updated doc exists in the doc updater"],"updatePoint":{"line":61,"column":69,"index":2041},"line":61,"code":"    it('should flush the updated doc lines and version to the web api', function () {\n      return MockWebApi.setDocument.calledWith(this.project_id, this.doc_id, this.result, this.version + 1).should.equal(true);\n    });","file":"acceptance/js/FlushingDocsTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should flush the last update author and time to the web api","suites":["Flushing a doc to Mongo","when the updated doc exists in the doc updater"],"updatePoint":{"line":64,"column":74,"index":2268},"line":64,"code":"    return it('should flush the last update author and time to the web api', function () {\n      const lastUpdatedAt = MockWebApi.setDocument.lastCall.args[5];\n      parseInt(lastUpdatedAt).should.be.closeTo(new Date().getTime(), 30000);\n      const lastUpdatedBy = MockWebApi.setDocument.lastCall.args[6];\n      return lastUpdatedBy.should.equal('last-author-fake-id');\n    });","file":"acceptance/js/FlushingDocsTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not flush the doc to the web api","suites":["Flushing a doc to Mongo","when the doc does not exist in the doc updater"],"updatePoint":{"line":84,"column":54,"index":3158},"line":84,"code":"    return it('should not flush the doc to the web api', function () {\n      return MockWebApi.setDocument.called.should.equal(false);\n    });","file":"acceptance/js/FlushingDocsTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should still work","suites":["Flushing a doc to Mongo","when the web api http request takes a long time on first request"],"updatePoint":{"line":109,"column":32,"index":4131},"line":109,"code":"    return it('should still work', function (done) {\n      const start = Date.now();\n      return DocUpdaterClient.flushDoc(this.project_id, this.doc_id, (error, res, doc) => {\n        if (error) return done(error);\n        res.statusCode.should.equal(204);\n        const delta = Date.now() - start;\n        expect(delta).to.be.below(20000);\n        return done();\n      });\n    });","file":"acceptance/js/FlushingDocsTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should load the document from the web API","suites":["Getting a document","when the document is not loaded"],"updatePoint":{"line":41,"column":49,"index":1552},"line":41,"code":"    it('should load the document from the web API', function () {\n      return MockWebApi.getDocument.calledWith(this.project_id, this.doc_id).should.equal(true);\n    });","file":"acceptance/js/GettingADocumentTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return the document lines","suites":["Getting a document","when the document is not loaded"],"updatePoint":{"line":44,"column":40,"index":1714},"line":44,"code":"    it('should return the document lines', function () {\n      return this.returnedDoc.lines.should.deep.equal(this.lines);\n    });","file":"acceptance/js/GettingADocumentTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return the document at its current version","suites":["Getting a document","when the document is not loaded"],"updatePoint":{"line":47,"column":64,"index":1870},"line":47,"code":"    return it('should return the document at its current version', function () {\n      return this.returnedDoc.version.should.equal(this.version);\n    });","file":"acceptance/js/GettingADocumentTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not load the document from the web API","suites":["Getting a document","when the document is already loaded"],"updatePoint":{"line":74,"column":53,"index":2865},"line":74,"code":"    it('should not load the document from the web API', function () {\n      return MockWebApi.getDocument.called.should.equal(false);\n    });","file":"acceptance/js/GettingADocumentTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return the document lines","suites":["Getting a document","when the document is already loaded"],"updatePoint":{"line":77,"column":47,"index":3001},"line":77,"code":"    return it('should return the document lines', function () {\n      return this.returnedDoc.lines.should.deep.equal(this.lines);\n    });","file":"acceptance/js/GettingADocumentTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return the recent ops","suites":["Getting a document","when the request asks for some recent ops","when the ops are loaded"],"updatePoint":{"line":115,"column":45,"index":4316},"line":115,"code":"      return it('should return the recent ops', function () {\n        this.returnedDoc.ops.length.should.equal(10);\n        return Array.from(this.updates.slice(190, -1)).map((update, i) => this.returnedDoc.ops[i].op.should.deep.equal(update.op));\n      });","file":"acceptance/js/GettingADocumentTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return UnprocessableEntity","suites":["Getting a document","when the request asks for some recent ops","when the ops are not all loaded"],"updatePoint":{"line":130,"column":50,"index":4992},"line":130,"code":"      return it('should return UnprocessableEntity', function () {\n        return this.res.statusCode.should.equal(422);\n      });","file":"acceptance/js/GettingADocumentTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return 404","suites":["Getting a document","when the document does not exist"],"updatePoint":{"line":145,"column":32,"index":5540},"line":145,"code":"    return it('should return 404', function () {\n      return this.statusCode.should.equal(404);\n    });","file":"acceptance/js/GettingADocumentTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return 500","suites":["Getting a document","when the web api returns an error"],"updatePoint":{"line":168,"column":32,"index":6373},"line":168,"code":"    return it('should return 500', function () {\n      return this.statusCode.should.equal(500);\n    });","file":"acceptance/js/GettingADocumentTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return quickly(ish)","suites":["Getting a document","when the web api http request takes a long time"],"updatePoint":{"line":187,"column":41,"index":7073},"line":187,"code":"    return it('should return quickly(ish)', function (done) {\n      const start = Date.now();\n      return DocUpdaterClient.getDoc(this.project_id, this.doc_id, (error, res, doc) => {\n        if (error) return done(error);\n        res.statusCode.should.equal(500);\n        const delta = Date.now() - start;\n        expect(delta).to.be.below(20000);\n        return done();\n      });\n    });","file":"acceptance/js/GettingADocumentTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return a 409 Conflict response","suites":["Getting documents for project","when project state hash does not match"],"updatePoint":{"line":46,"column":52,"index":1753},"line":46,"code":"    return it('should return a 409 Conflict response', function () {\n      return this.res.statusCode.should.equal(409);\n    });","file":"acceptance/js/GettingProjectDocsTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return a 200 response","suites":["Getting documents for project","when project state hash matches"],"updatePoint":{"line":77,"column":36,"index":3013},"line":77,"code":"    it('should return a 200 response', function () {\n      return this.res.statusCode.should.equal(200);\n    });","file":"acceptance/js/GettingProjectDocsTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return the documents","suites":["Getting documents for project","when project state hash matches"],"updatePoint":{"line":80,"column":42,"index":3132},"line":80,"code":"    return it('should return the documents', function () {\n      return this.returnedDocs.should.deep.equal([{\n        _id: this.doc_id,\n        lines: this.lines,\n        v: this.version\n      }]);\n    });","file":"acceptance/js/GettingProjectDocsTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return a 409 Conflict response","suites":["Getting documents for project","when the doc has been removed"],"updatePoint":{"line":119,"column":52,"index":4727},"line":119,"code":"    return it('should return a 409 Conflict response', function () {\n      return this.res.statusCode.should.equal(409);\n    });","file":"acceptance/js/GettingProjectDocsTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return a 404 response","suites":["Peeking a document","when the document is not loaded"],"updatePoint":{"line":30,"column":36,"index":1104},"line":30,"code":"    it('should return a 404 response', function () {\n      this.res.statusCode.should.equal(404);\n    });","file":"acceptance/js/PeekingADoc.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not load the document from the web API","suites":["Peeking a document","when the document is not loaded"],"updatePoint":{"line":33,"column":53,"index":1227},"line":33,"code":"    it('should not load the document from the web API', function () {\n      return MockWebApi.getDocument.called.should.equal(false);\n    });","file":"acceptance/js/PeekingADoc.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return a 200 response","suites":["Peeking a document","when the document is already loaded"],"updatePoint":{"line":61,"column":36,"index":2212},"line":61,"code":"    it('should return a 200 response', function () {\n      this.res.statusCode.should.equal(200);\n    });","file":"acceptance/js/PeekingADoc.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return the document lines","suites":["Peeking a document","when the document is already loaded"],"updatePoint":{"line":64,"column":40,"index":2322},"line":64,"code":"    it('should return the document lines', function () {\n      return this.returnedDoc.lines.should.deep.equal(this.lines);\n    });","file":"acceptance/js/PeekingADoc.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return the document version","suites":["Peeking a document","when the document is already loaded"],"updatePoint":{"line":67,"column":42,"index":2456},"line":67,"code":"    it('should return the document version', function () {\n      return this.returnedDoc.version.should.equal(this.version);\n    });","file":"acceptance/js/PeekingADoc.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not load the document from the web API","suites":["Peeking a document","when the document is already loaded"],"updatePoint":{"line":70,"column":53,"index":2600},"line":70,"code":"    it('should not load the document from the web API', function () {\n      return MockWebApi.getDocument.called.should.equal(false);\n    });","file":"acceptance/js/PeekingADoc.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should update the ranges","suites":["Ranges","tracking changes from ops"],"updatePoint":{"line":98,"column":32,"index":2636},"line":98,"code":"    it('should update the ranges', function (done) {\n      return DocUpdaterClient.getDoc(this.project_id, this.doc.id, (error, res, data) => {\n        if (error != null) {\n          throw error;\n        }\n        const {\n          ranges\n        } = data;\n        const change = ranges.changes[0];\n        change.op.should.deep.equal({\n          i: '456',\n          p: 3\n        });\n        change.id.should.equal(this.id_seed + '000001');\n        change.metadata.user_id.should.equal(this.user_id);\n        return done();\n      });\n    });","file":"acceptance/js/RangesTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should update the ranges","suites":["Ranges","tracking changes from ops","Adding comments","standalone"],"updatePoint":{"line":157,"column":43,"index":4561},"line":157,"code":"        return it('should update the ranges', function (done) {\n          return DocUpdaterClient.getDoc(this.project_id, this.doc.id, (error, res, data) => {\n            if (error != null) {\n              throw error;\n            }\n            const {\n              ranges\n            } = data;\n            const comment = ranges.comments[0];\n            comment.op.should.deep.equal({\n              c: 'bar',\n              p: 4,\n              t: this.tid\n            });\n            comment.id.should.equal(this.tid);\n            return done();\n          });\n        });","file":"acceptance/js/RangesTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should update the comments with the OT shifted comment","suites":["Ranges","tracking changes from ops","Adding comments","with conflicting ops needing OT"],"updatePoint":{"line":226,"column":73,"index":6732},"line":226,"code":"        return it('should update the comments with the OT shifted comment', function (done) {\n          return DocUpdaterClient.getDoc(this.project_id, this.doc.id, (error, res, data) => {\n            if (error != null) {\n              throw error;\n            }\n            const {\n              ranges\n            } = data;\n            const comment = ranges.comments[0];\n            comment.op.should.deep.equal({\n              c: 'bar',\n              p: 7,\n              t: this.tid\n            });\n            return done();\n          });\n        });","file":"acceptance/js/RangesTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should have preloaded the existing ranges","suites":["Ranges","Loading ranges from persistence layer"],"updatePoint":{"line":295,"column":49,"index":8585},"line":295,"code":"    it('should have preloaded the existing ranges', function (done) {\n      return DocUpdaterClient.getDoc(this.project_id, this.doc.id, (error, res, data) => {\n        if (error != null) {\n          throw error;\n        }\n        const {\n          changes\n        } = data.ranges;\n        changes[0].op.should.deep.equal({\n          i: '123',\n          p: 1\n        });\n        changes[1].op.should.deep.equal({\n          i: '456',\n          p: 5\n        });\n        return done();\n      });\n    });","file":"acceptance/js/RangesTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should flush the ranges to the persistence layer again","suites":["Ranges","Loading ranges from persistence layer"],"updatePoint":{"line":314,"column":69,"index":9106},"line":314,"code":"    return it('should flush the ranges to the persistence layer again', function (done) {\n      return DocUpdaterClient.flushDoc(this.project_id, this.doc.id, error => {\n        if (error != null) {\n          throw error;\n        }\n        return MockWebApi.getDocument(this.project_id, this.doc.id, (error, doc) => {\n          if (error) return done(error);\n          const {\n            changes\n          } = doc.ranges;\n          changes[0].op.should.deep.equal({\n            i: '123',\n            p: 1\n          });\n          changes[1].op.should.deep.equal({\n            i: '456',\n            p: 5\n          });\n          return done();\n        });\n      });\n    });","file":"acceptance/js/RangesTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should remove the change after accepting","suites":["Ranges","accepting a change"],"updatePoint":{"line":391,"column":55,"index":11393},"line":391,"code":"    return it('should remove the change after accepting', function (done) {\n      return DocUpdaterClient.acceptChange(this.project_id, this.doc.id, this.id_seed + '000001', error => {\n        if (error != null) {\n          throw error;\n        }\n        return DocUpdaterClient.getDoc(this.project_id, this.doc.id, (error, res, data) => {\n          if (error != null) {\n            throw error;\n          }\n          expect(data.ranges.changes).to.be.undefined;\n          return done();\n        });\n      });\n    });","file":"acceptance/js/RangesTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should remove the comment range","suites":["Ranges","deleting a comment range"],"updatePoint":{"line":456,"column":46,"index":13413},"line":456,"code":"    return it('should remove the comment range', function (done) {\n      return DocUpdaterClient.removeComment(this.project_id, this.doc.id, this.tid, (error, res) => {\n        if (error != null) {\n          throw error;\n        }\n        expect(res.statusCode).to.equal(204);\n        return DocUpdaterClient.getDoc(this.project_id, this.doc.id, (error, res, data) => {\n          if (error != null) {\n            throw error;\n          }\n          expect(data.ranges.comments).to.be.undefined;\n          return done();\n        });\n      });\n    });","file":"acceptance/js/RangesTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not update the ranges","suites":["Ranges","tripping range size limit"],"updatePoint":{"line":517,"column":43,"index":15269},"line":517,"code":"    return it('should not update the ranges', function (done) {\n      return DocUpdaterClient.getDoc(this.project_id, this.doc.id, (error, res, data) => {\n        if (error != null) {\n          throw error;\n        }\n        const {\n          ranges\n        } = data;\n        expect(ranges.changes).to.be.undefined;\n        return done();\n      });\n    });","file":"acceptance/js/RangesTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should write a snapshot from before the destructive change","suites":["Ranges","deleting text surrounding a comment"],"updatePoint":{"line":599,"column":73,"index":17529},"line":599,"code":"    return it('should write a snapshot from before the destructive change', function (done) {\n      return DocUpdaterClient.getDoc(this.project_id, this.doc_id, (error, res, data) => {\n        if (error != null) {\n          return done(error);\n        }\n        db.docSnapshots.find({\n          project_id: ObjectId(this.project_id),\n          doc_id: ObjectId(this.doc_id)\n        }).toArray((error, docSnapshots) => {\n          if (error != null) {\n            return done(error);\n          }\n          expect(docSnapshots.length).to.equal(1);\n          expect(docSnapshots[0].version).to.equal(1);\n          expect(docSnapshots[0].lines).to.deep.equal(['bar baz']);\n          expect(docSnapshots[0].ranges.comments[0].op).to.deep.equal({\n            c: 'a',\n            p: 1,\n            tid: this.tid\n          });\n          return done();\n        });\n      });\n    });","file":"acceptance/js/RangesTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return a 200 status code","suites":["Setting a document","when the updated doc exists in the doc updater"],"updatePoint":{"line":78,"column":39,"index":2825},"line":78,"code":"    it('should return a 200 status code', function () {\n      this.statusCode.should.equal(200);\n    });","file":"acceptance/js/SettingADocumentTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should emit two updates (from sendUpdate and setDocLines)","suites":["Setting a document","when the updated doc exists in the doc updater"],"updatePoint":{"line":81,"column":65,"index":2956},"line":81,"code":"    it('should emit two updates (from sendUpdate and setDocLines)', function () {\n      expect(numberOfReceivedUpdates).to.equal(2);\n    });","file":"acceptance/js/SettingADocumentTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should send the updated doc lines and version to the web api","suites":["Setting a document","when the updated doc exists in the doc updater"],"updatePoint":{"line":84,"column":68,"index":3100},"line":84,"code":"    it('should send the updated doc lines and version to the web api', function () {\n      MockWebApi.setDocument.calledWith(this.project_id, this.doc_id, this.newLines).should.equal(true);\n    });","file":"acceptance/js/SettingADocumentTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should update the lines in the doc updater","suites":["Setting a document","when the updated doc exists in the doc updater"],"updatePoint":{"line":87,"column":50,"index":3280},"line":87,"code":"    it('should update the lines in the doc updater', function (done) {\n      DocUpdaterClient.getDoc(this.project_id, this.doc_id, (error, res, doc) => {\n        if (error) {\n          return done(error);\n        }\n        doc.lines.should.deep.equal(this.newLines);\n        done();\n      });\n    });","file":"acceptance/js/SettingADocumentTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should bump the version in the doc updater","suites":["Setting a document","when the updated doc exists in the doc updater"],"updatePoint":{"line":96,"column":50,"index":3581},"line":96,"code":"    it('should bump the version in the doc updater', function (done) {\n      DocUpdaterClient.getDoc(this.project_id, this.doc_id, (error, res, doc) => {\n        if (error) {\n          return done(error);\n        }\n        doc.version.should.equal(this.version + 2);\n        done();\n      });\n    });","file":"acceptance/js/SettingADocumentTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should leave the document in redis","suites":["Setting a document","when the updated doc exists in the doc updater"],"updatePoint":{"line":105,"column":42,"index":3874},"line":105,"code":"    it('should leave the document in redis', function (done) {\n      docUpdaterRedis.get(Keys.docLines({\n        doc_id: this.doc_id\n      }), (error, lines) => {\n        if (error) {\n          throw error;\n        }\n        expect(JSON.parse(lines)).to.deep.equal(this.newLines);\n        done();\n      });\n    });","file":"acceptance/js/SettingADocumentTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return the mongo rev in the json response","suites":["Setting a document","when the updated doc exists in the doc updater"],"updatePoint":{"line":116,"column":56,"index":4203},"line":116,"code":"    it('should return the mongo rev in the json response', function () {\n      this.body.should.deep.equal({\n        rev: '123'\n      });\n    });","file":"acceptance/js/SettingADocumentTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not bump the version in doc updater","suites":["Setting a document","when the updated doc exists in the doc updater","when doc has the same contents"],"updatePoint":{"line":133,"column":52,"index":4797},"line":133,"code":"      it('should not bump the version in doc updater', function (done) {\n        DocUpdaterClient.getDoc(this.project_id, this.doc_id, (error, res, doc) => {\n          if (error) {\n            return done(error);\n          }\n          doc.version.should.equal(this.version + 2);\n          done();\n        });\n      });","file":"acceptance/js/SettingADocumentTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not emit any updates","suites":["Setting a document","when the updated doc exists in the doc updater","when doc has the same contents"],"updatePoint":{"line":142,"column":37,"index":5101},"line":142,"code":"      it('should not emit any updates', function (done) {\n        setTimeout(() => {\n          expect(numberOfReceivedUpdates).to.equal(0);\n          done();\n        }, 100); // delay by 100ms: make sure we do not check too early!\n      });","file":"acceptance/js/SettingADocumentTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return a 200 status code","suites":["Setting a document","when the updated doc does not exist in the doc updater"],"updatePoint":{"line":174,"column":39,"index":6235},"line":174,"code":"    it('should return a 200 status code', function () {\n      this.statusCode.should.equal(200);\n    });","file":"acceptance/js/SettingADocumentTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should emit an update","suites":["Setting a document","when the updated doc does not exist in the doc updater"],"updatePoint":{"line":177,"column":29,"index":6330},"line":177,"code":"    it('should emit an update', function () {\n      expect(numberOfReceivedUpdates).to.equal(1);\n    });","file":"acceptance/js/SettingADocumentTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should send the updated doc lines to the web api","suites":["Setting a document","when the updated doc does not exist in the doc updater"],"updatePoint":{"line":180,"column":56,"index":6462},"line":180,"code":"    it('should send the updated doc lines to the web api', function () {\n      MockWebApi.setDocument.calledWith(this.project_id, this.doc_id, this.newLines).should.equal(true);\n    });","file":"acceptance/js/SettingADocumentTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should flush track changes","suites":["Setting a document","when the updated doc does not exist in the doc updater"],"updatePoint":{"line":183,"column":34,"index":6626},"line":183,"code":"    it('should flush track changes', function () {\n      MockTrackChangesApi.flushDoc.calledWith(this.doc_id).should.equal(true);\n    });","file":"acceptance/js/SettingADocumentTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should flush project history","suites":["Setting a document","when the updated doc does not exist in the doc updater"],"updatePoint":{"line":186,"column":36,"index":6766},"line":186,"code":"    it('should flush project history', function () {\n      MockProjectHistoryApi.flushProject.calledWith(this.project_id).should.equal(true);\n    });","file":"acceptance/js/SettingADocumentTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should remove the document from redis","suites":["Setting a document","when the updated doc does not exist in the doc updater"],"updatePoint":{"line":189,"column":45,"index":6925},"line":189,"code":"    it('should remove the document from redis', function (done) {\n      docUpdaterRedis.get(Keys.docLines({\n        doc_id: this.doc_id\n      }), (error, lines) => {\n        if (error) {\n          throw error;\n        }\n        expect(lines).to.not.exist;\n        done();\n      });\n    });","file":"acceptance/js/SettingADocumentTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return the mongo rev in the json response","suites":["Setting a document","when the updated doc does not exist in the doc updater"],"updatePoint":{"line":200,"column":56,"index":7226},"line":200,"code":"    it('should return the mongo rev in the json response', function () {\n      this.body.should.deep.equal({\n        rev: '123'\n      });\n    });","file":"acceptance/js/SettingADocumentTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return a  status code","suites":["Setting a document","when the updated doc does not exist in the doc updater"],"updatePoint":{"line":241,"column":68,"index":8755},"line":241,"code":"      it(`should return a ${testCase.expectedStatusCode} status code`, function () {\n        this.statusCode.should.equal(testCase.expectedStatusCode);\n      });","file":"acceptance/js/SettingADocumentTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not send the updated doc lines to the web api","suites":["Setting a document","when the updated doc does not exist in the doc updater"],"updatePoint":{"line":244,"column":62,"index":8911},"line":244,"code":"      it('should not send the updated doc lines to the web api', function () {\n        MockWebApi.setDocument.called.should.equal(false);\n      });","file":"acceptance/js/SettingADocumentTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not flush track changes","suites":["Setting a document","when the updated doc does not exist in the doc updater"],"updatePoint":{"line":247,"column":40,"index":9037},"line":247,"code":"      it('should not flush track changes', function () {\n        MockTrackChangesApi.flushDoc.called.should.equal(false);\n      });","file":"acceptance/js/SettingADocumentTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not flush project history","suites":["Setting a document","when the updated doc does not exist in the doc updater"],"updatePoint":{"line":250,"column":42,"index":9171},"line":250,"code":"      it('should not flush project history', function () {\n        MockProjectHistoryApi.flushProject.called.should.equal(false);\n      });","file":"acceptance/js/SettingADocumentTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return a 200 status code","suites":["Setting a document","when the updated doc is large but under the bodyParser and HTTPController size limit"],"updatePoint":{"line":283,"column":39,"index":10475},"line":283,"code":"    it('should return a 200 status code', function () {\n      this.statusCode.should.equal(200);\n    });","file":"acceptance/js/SettingADocumentTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should send the updated doc lines to the web api","suites":["Setting a document","when the updated doc is large but under the bodyParser and HTTPController size limit"],"updatePoint":{"line":286,"column":56,"index":10597},"line":286,"code":"    it('should send the updated doc lines to the web api', function () {\n      MockWebApi.setDocument.calledWith(this.project_id, this.doc_id, this.newLines).should.equal(true);\n    });","file":"acceptance/js/SettingADocumentTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return the mongo rev in the json response","suites":["Setting a document","when the updated doc is large but under the bodyParser and HTTPController size limit"],"updatePoint":{"line":289,"column":56,"index":10783},"line":289,"code":"    it('should return the mongo rev in the json response', function () {\n      this.body.should.deep.equal({\n        rev: '123'\n      });\n    });","file":"acceptance/js/SettingADocumentTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should undo the tracked changes","suites":["Setting a document","with track changes","with the undo flag"],"updatePoint":{"line":344,"column":41,"index":12566},"line":344,"code":"      it('should undo the tracked changes', function (done) {\n        DocUpdaterClient.getDoc(this.project_id, this.doc_id, (error, res, data) => {\n          if (error) {\n            throw error;\n          }\n          const {\n            ranges\n          } = data;\n          expect(ranges.changes).to.be.undefined;\n          done();\n        });\n      });","file":"acceptance/js/SettingADocumentTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not undo the tracked changes","suites":["Setting a document","with track changes","without the undo flag"],"updatePoint":{"line":389,"column":45,"index":14158},"line":389,"code":"      it('should not undo the tracked changes', function (done) {\n        DocUpdaterClient.getDoc(this.project_id, this.doc_id, (error, res, data) => {\n          if (error) {\n            throw error;\n          }\n          const {\n            ranges\n          } = data;\n          expect(ranges.changes.length).to.equal(1);\n          done();\n        });\n      });","file":"acceptance/js/SettingADocumentTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should error when fetching the doc","suites":["SizeChecks","when a doc is above the doc size limit already"],"updatePoint":{"line":33,"column":42,"index":1099},"line":33,"code":"    it('should error when fetching the doc', function (done) {\n      DocUpdaterClient.getDoc(this.project_id, this.doc_id, (error, res) => {\n        if (error) return done(error);\n        expect(res.statusCode).to.equal(500);\n        done();\n      });\n    });","file":"acceptance/js/SizeCheckTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should still error when fetching the doc","suites":["SizeChecks","when a doc is above the doc size limit already","when trying to update"],"updatePoint":{"line":54,"column":50,"index":1782},"line":54,"code":"      it('should still error when fetching the doc', function (done) {\n        DocUpdaterClient.getDoc(this.project_id, this.doc_id, (error, res) => {\n          if (error) return done(error);\n          expect(res.statusCode).to.equal(500);\n          done();\n        });\n      });","file":"acceptance/js/SizeCheckTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should be able to fetch the doc","suites":["SizeChecks","when the stringified JSON is above the doc size limit but the doc character count is not"],"updatePoint":{"line":81,"column":39,"index":3016},"line":81,"code":"    it('should be able to fetch the doc', function (done) {\n      DocUpdaterClient.getDoc(this.project_id, this.doc_id, (error, res, doc) => {\n        if (error) return done(error);\n        expect(doc.lines).to.deep.equal(this.lines);\n        done();\n      });\n    });","file":"acceptance/js/SizeCheckTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not update the doc","suites":["SizeChecks","when the stringified JSON is above the doc size limit but the doc character count is not","when trying to update"],"updatePoint":{"line":102,"column":35,"index":3696},"line":102,"code":"      it('should not update the doc', function (done) {\n        DocUpdaterClient.getDoc(this.project_id, this.doc_id, (error, res, doc) => {\n          if (error) return done(error);\n          expect(doc.lines).to.deep.equal(this.lines);\n          done();\n        });\n      });","file":"acceptance/js/SizeCheckTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should be able to fetch the doc","suites":["SizeChecks","when a doc is just below the doc size limit"],"updatePoint":{"line":119,"column":39,"index":4355},"line":119,"code":"    it('should be able to fetch the doc', function (done) {\n      DocUpdaterClient.getDoc(this.project_id, this.doc_id, (error, res, doc) => {\n        if (error) return done(error);\n        expect(doc.lines).to.deep.equal(this.lines);\n        done();\n      });\n    });","file":"acceptance/js/SizeCheckTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not update the doc","suites":["SizeChecks","when a doc is just below the doc size limit","when trying to update"],"updatePoint":{"line":140,"column":35,"index":5035},"line":140,"code":"      it('should not update the doc', function (done) {\n        DocUpdaterClient.getDoc(this.project_id, this.doc_id, (error, res, doc) => {\n          if (error) return done(error);\n          expect(doc.lines).to.deep.equal(this.lines);\n          done();\n        });\n      });","file":"acceptance/js/SizeCheckTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should insert new text correctly","suites":["DiffCodec","diffAsShareJsOps"],"updatePoint":{"line":24,"column":40,"index":795},"line":24,"code":"    it('should insert new text correctly', function (done) {\n      this.before = ['hello world'];\n      this.after = ['hello beautiful world'];\n      return this.DiffCodec.diffAsShareJsOp(this.before, this.after, (error, ops) => {\n        if (error) return done(error);\n        expect(ops).to.deep.equal([{\n          i: 'beautiful ',\n          p: 6\n        }]);\n        return done();\n      });\n    });","file":"unit/js/DiffCodec/DiffCodecTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should shift later inserts by previous inserts","suites":["DiffCodec","diffAsShareJsOps"],"updatePoint":{"line":36,"column":54,"index":1212},"line":36,"code":"    it('should shift later inserts by previous inserts', function (done) {\n      this.before = ['the boy played with the ball'];\n      this.after = ['the tall boy played with the red ball'];\n      return this.DiffCodec.diffAsShareJsOp(this.before, this.after, (error, ops) => {\n        if (error) return done(error);\n        expect(ops).to.deep.equal([{\n          i: 'tall ',\n          p: 4\n        }, {\n          i: 'red ',\n          p: 29\n        }]);\n        return done();\n      });\n    });","file":"unit/js/DiffCodec/DiffCodecTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should delete text correctly","suites":["DiffCodec","diffAsShareJsOps"],"updatePoint":{"line":51,"column":36,"index":1689},"line":51,"code":"    it('should delete text correctly', function (done) {\n      this.before = ['hello beautiful world'];\n      this.after = ['hello world'];\n      return this.DiffCodec.diffAsShareJsOp(this.before, this.after, (error, ops) => {\n        if (error) return done(error);\n        expect(ops).to.deep.equal([{\n          d: 'beautiful ',\n          p: 6\n        }]);\n        return done();\n      });\n    });","file":"unit/js/DiffCodec/DiffCodecTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should shift later deletes by the first deletes","suites":["DiffCodec","diffAsShareJsOps"],"updatePoint":{"line":63,"column":62,"index":2114},"line":63,"code":"    return it('should shift later deletes by the first deletes', function (done) {\n      this.before = ['the tall boy played with the red ball'];\n      this.after = ['the boy played with the ball'];\n      return this.DiffCodec.diffAsShareJsOp(this.before, this.after, (error, ops) => {\n        if (error) return done(error);\n        expect(ops).to.deep.equal([{\n          d: 'tall ',\n          p: 4\n        }, {\n          d: 'red ',\n          p: 24\n        }]);\n        return done();\n      });\n    });","file":"unit/js/DiffCodec/DiffCodecTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should create a new redis client","suites":["DispatchManager","each worker"],"updatePoint":{"line":61,"column":40,"index":1919},"line":61,"code":"    it('should create a new redis client', function () {\n      return this.redis.createClient.called.should.equal(true);\n    });","file":"unit/js/DispatchManager/DispatchManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call redis with BLPOP","suites":["DispatchManager","each worker","_waitForUpdateThenDispatchWorker","in the normal case"],"updatePoint":{"line":76,"column":40,"index":2668},"line":76,"code":"        it('should call redis with BLPOP', function () {\n          return this.client.blpop.calledWith('pending-updates-list', 0).should.equal(true);\n        });","file":"unit/js/DispatchManager/DispatchManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call processOutstandingUpdatesWithLock","suites":["DispatchManager","each worker","_waitForUpdateThenDispatchWorker","in the normal case"],"updatePoint":{"line":79,"column":57,"index":2847},"line":79,"code":"        it('should call processOutstandingUpdatesWithLock', function () {\n          return this.UpdateManager.processOutstandingUpdatesWithLock.calledWith(this.project_id, this.doc_id).should.equal(true);\n        });","file":"unit/js/DispatchManager/DispatchManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not log any errors","suites":["DispatchManager","each worker","_waitForUpdateThenDispatchWorker","in the normal case"],"updatePoint":{"line":82,"column":37,"index":3044},"line":82,"code":"        it('should not log any errors', function () {\n          this.logger.error.called.should.equal(false);\n          return this.logger.warn.called.should.equal(false);\n        });","file":"unit/js/DispatchManager/DispatchManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback","suites":["DispatchManager","each worker","_waitForUpdateThenDispatchWorker","in the normal case"],"updatePoint":{"line":86,"column":43,"index":3234},"line":86,"code":"        return it('should call the callback', function () {\n          return this.callback.called.should.equal(true);\n        });","file":"unit/js/DispatchManager/DispatchManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should log an error","suites":["DispatchManager","each worker","_waitForUpdateThenDispatchWorker","with an error"],"updatePoint":{"line":95,"column":31,"index":3656},"line":95,"code":"        it('should log an error', function () {\n          return this.logger.error.called.should.equal(true);\n        });","file":"unit/js/DispatchManager/DispatchManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback","suites":["DispatchManager","each worker","_waitForUpdateThenDispatchWorker","with an error"],"updatePoint":{"line":98,"column":43,"index":3790},"line":98,"code":"        return it('should call the callback', function () {\n          return this.callback.called.should.equal(true);\n        });","file":"unit/js/DispatchManager/DispatchManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should log a debug message","suites":["DispatchManager","each worker","_waitForUpdateThenDispatchWorker","with a 'Delete component' error"],"updatePoint":{"line":107,"column":38,"index":4241},"line":107,"code":"        it('should log a debug message', function () {\n          return this.logger.debug.called.should.equal(true);\n        });","file":"unit/js/DispatchManager/DispatchManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback","suites":["DispatchManager","each worker","_waitForUpdateThenDispatchWorker","with a 'Delete component' error"],"updatePoint":{"line":110,"column":43,"index":4375},"line":110,"code":"        return it('should call the callback', function () {\n          return this.callback.called.should.equal(true);\n        });","file":"unit/js/DispatchManager/DispatchManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call redis with BLPOP with the correct key","suites":["DispatchManager","each worker","_waitForUpdateThenDispatchWorker","pending updates list with shard key"],"updatePoint":{"line":125,"column":61,"index":5043},"line":125,"code":"        it('should call redis with BLPOP with the correct key', function () {\n          this.client.blpop.calledWith(`pending-updates-list-${this.queueShardNumber}`, 0).should.equal(true);\n        });","file":"unit/js/DispatchManager/DispatchManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call _waitForUpdateThenDispatchWorker until shutting down","suites":["DispatchManager","each worker","run"],"updatePoint":{"line":131,"column":81,"index":5323},"line":131,"code":"      return it('should call _waitForUpdateThenDispatchWorker until shutting down', function (done) {\n        let callCount = 0;\n        this.worker._waitForUpdateThenDispatchWorker = callback => {\n          if (callback == null) {\n            callback = function () {};\n          }\n          callCount++;\n          if (callCount === 3) {\n            this.settings.shuttingDown = true;\n          }\n          return setTimeout(() => callback(), 10);\n        };\n        sinon.spy(this.worker, '_waitForUpdateThenDispatchWorker');\n        this.worker.run();\n        const checkStatus = () => {\n          if (!this.settings.shuttingDown) {\n            // retry until shutdown\n            setTimeout(checkStatus, 100);\n          } else {\n            this.worker._waitForUpdateThenDispatchWorker.callCount.should.equal(3);\n            return done();\n          }\n        };\n        return checkStatus();\n      });","file":"unit/js/DispatchManager/DispatchManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should flush the doc","suites":["DocumentManager","flushAndDeleteDoc","successfully"],"updatePoint":{"line":59,"column":30,"index":2202},"line":59,"code":"      it('should flush the doc', function () {\n        this.DocumentManager.flushDocIfLoaded.calledWith(this.project_id, this.doc_id).should.equal(true);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should remove the doc from redis","suites":["DocumentManager","flushAndDeleteDoc","successfully"],"updatePoint":{"line":62,"column":42,"index":2378},"line":62,"code":"      it('should remove the doc from redis', function () {\n        this.RedisManager.removeDocFromMemory.calledWith(this.project_id, this.doc_id).should.equal(true);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback without error","suites":["DocumentManager","flushAndDeleteDoc","successfully"],"updatePoint":{"line":65,"column":48,"index":2560},"line":65,"code":"      it('should call the callback without error', function () {\n        this.callback.calledWith(null).should.equal(true);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should time the execution","suites":["DocumentManager","flushAndDeleteDoc","successfully"],"updatePoint":{"line":68,"column":35,"index":2681},"line":68,"code":"      it('should time the execution', function () {\n        this.Metrics.Timer.prototype.done.called.should.equal(true);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should flush to the history api","suites":["DocumentManager","flushAndDeleteDoc","successfully"],"updatePoint":{"line":71,"column":41,"index":2818},"line":71,"code":"      it('should flush to the history api', function () {\n        this.HistoryManager.flushDocChangesAsync.calledWithExactly(this.project_id, this.doc_id).should.equal(true);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not remove the doc from redis","suites":["DocumentManager","flushAndDeleteDoc","when a flush error occurs"],"updatePoint":{"line":80,"column":46,"index":3285},"line":80,"code":"      it('should not remove the doc from redis', function (done) {\n        this.DocumentManager.flushAndDeleteDoc(this.project_id, this.doc_id, {}, error => {\n          error.should.exist;\n          this.RedisManager.removeDocFromMemory.called.should.equal(false);\n          done();\n        });\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should remove the doc from redis","suites":["DocumentManager","flushAndDeleteDoc","when a flush error occurs","when ignoring flush errors"],"updatePoint":{"line":88,"column":44,"index":3647},"line":88,"code":"        it('should remove the doc from redis', function (done) {\n          this.DocumentManager.flushAndDeleteDoc(this.project_id, this.doc_id, {\n            ignoreFlushErrors: true\n          }, error => {\n            if (error) {\n              return done(error);\n            }\n            this.RedisManager.removeDocFromMemory.called.should.equal(true);\n            done();\n          });\n        });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should get the doc from redis","suites":["DocumentManager","flushDocIfLoaded","when the doc is in Redis"],"updatePoint":{"line":110,"column":39,"index":4656},"line":110,"code":"      it('should get the doc from redis', function () {\n        this.RedisManager.getDoc.calledWith(this.project_id, this.doc_id).should.equal(true);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should write the doc lines to the persistence layer","suites":["DocumentManager","flushDocIfLoaded","when the doc is in Redis"],"updatePoint":{"line":113,"column":61,"index":4838},"line":113,"code":"      it('should write the doc lines to the persistence layer', function () {\n        this.PersistenceManager.setDoc.calledWith(this.project_id, this.doc_id, this.lines, this.version, this.ranges, this.lastUpdatedAt, this.lastUpdatedBy).should.equal(true);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback without error","suites":["DocumentManager","flushDocIfLoaded","when the doc is in Redis"],"updatePoint":{"line":116,"column":48,"index":5092},"line":116,"code":"      it('should call the callback without error', function () {\n        this.callback.calledWith(null).should.equal(true);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should time the execution","suites":["DocumentManager","flushDocIfLoaded","when the doc is in Redis"],"updatePoint":{"line":119,"column":35,"index":5213},"line":119,"code":"      it('should time the execution', function () {\n        this.Metrics.Timer.prototype.done.called.should.equal(true);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should get the doc from redis","suites":["DocumentManager","flushDocIfLoaded","when the document is not in Redis"],"updatePoint":{"line":129,"column":39,"index":5706},"line":129,"code":"      it('should get the doc from redis', function () {\n        this.RedisManager.getDoc.calledWith(this.project_id, this.doc_id).should.equal(true);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not write anything to the persistence layer","suites":["DocumentManager","flushDocIfLoaded","when the document is not in Redis"],"updatePoint":{"line":132,"column":60,"index":5887},"line":132,"code":"      it('should not write anything to the persistence layer', function () {\n        this.PersistenceManager.setDoc.called.should.equal(false);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback without error","suites":["DocumentManager","flushDocIfLoaded","when the document is not in Redis"],"updatePoint":{"line":135,"column":48,"index":6029},"line":135,"code":"      it('should call the callback without error', function () {\n        this.callback.calledWith(null).should.equal(true);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should time the execution","suites":["DocumentManager","flushDocIfLoaded","when the document is not in Redis"],"updatePoint":{"line":138,"column":35,"index":6150},"line":138,"code":"      it('should time the execution', function () {\n        this.Metrics.Timer.prototype.done.called.should.equal(true);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should get the doc","suites":["DocumentManager","getDocAndRecentOps","with a previous version specified"],"updatePoint":{"line":150,"column":28,"index":6795},"line":150,"code":"      it('should get the doc', function () {\n        this.DocumentManager.getDoc.calledWith(this.project_id, this.doc_id).should.equal(true);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should get the doc ops","suites":["DocumentManager","getDocAndRecentOps","with a previous version specified"],"updatePoint":{"line":153,"column":32,"index":6951},"line":153,"code":"      it('should get the doc ops', function () {\n        this.RedisManager.getPreviousDocOps.calledWith(this.doc_id, this.fromVersion, this.version).should.equal(true);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback with the doc info","suites":["DocumentManager","getDocAndRecentOps","with a previous version specified"],"updatePoint":{"line":156,"column":52,"index":7150},"line":156,"code":"      it('should call the callback with the doc info', function () {\n        this.callback.calledWith(null, this.lines, this.version, this.ops, this.ranges, this.pathname, this.projectHistoryId).should.equal(true);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should time the execution","suites":["DocumentManager","getDocAndRecentOps","with a previous version specified"],"updatePoint":{"line":159,"column":35,"index":7358},"line":159,"code":"      it('should time the execution', function () {\n        this.Metrics.Timer.prototype.done.called.should.equal(true);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should get the doc","suites":["DocumentManager","getDocAndRecentOps","with no previous version specified"],"updatePoint":{"line":169,"column":28,"index":7937},"line":169,"code":"      it('should get the doc', function () {\n        this.DocumentManager.getDoc.calledWith(this.project_id, this.doc_id).should.equal(true);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not need to get the doc ops","suites":["DocumentManager","getDocAndRecentOps","with no previous version specified"],"updatePoint":{"line":172,"column":44,"index":8105},"line":172,"code":"      it('should not need to get the doc ops', function () {\n        this.RedisManager.getPreviousDocOps.called.should.equal(false);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback with the doc info","suites":["DocumentManager","getDocAndRecentOps","with no previous version specified"],"updatePoint":{"line":175,"column":52,"index":8256},"line":175,"code":"      it('should call the callback with the doc info', function () {\n        this.callback.calledWith(null, this.lines, this.version, [], this.ranges, this.pathname, this.projectHistoryId).should.equal(true);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should time the execution","suites":["DocumentManager","getDocAndRecentOps","with no previous version specified"],"updatePoint":{"line":178,"column":35,"index":8458},"line":178,"code":"      it('should time the execution', function () {\n        this.Metrics.Timer.prototype.done.called.should.equal(true);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should get the doc from Redis","suites":["DocumentManager","getDoc","when the doc exists in Redis"],"updatePoint":{"line":189,"column":39,"index":8992},"line":189,"code":"      it('should get the doc from Redis', function () {\n        this.RedisManager.getDoc.calledWith(this.project_id, this.doc_id).should.equal(true);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback with the doc info","suites":["DocumentManager","getDoc","when the doc exists in Redis"],"updatePoint":{"line":192,"column":52,"index":9165},"line":192,"code":"      it('should call the callback with the doc info', function () {\n        this.callback.calledWith(null, this.lines, this.version, this.ranges, this.pathname, this.projectHistoryId, this.unflushedTime, true).should.equal(true);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should time the execution","suites":["DocumentManager","getDoc","when the doc exists in Redis"],"updatePoint":{"line":195,"column":35,"index":9389},"line":195,"code":"      it('should time the execution', function () {\n        this.Metrics.Timer.prototype.done.called.should.equal(true);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should try to get the doc from Redis","suites":["DocumentManager","getDoc","when the doc does not exist in Redis"],"updatePoint":{"line":207,"column":46,"index":10141},"line":207,"code":"      it('should try to get the doc from Redis', function () {\n        this.RedisManager.getDoc.calledWith(this.project_id, this.doc_id).should.equal(true);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should get the doc from the PersistenceManager","suites":["DocumentManager","getDoc","when the doc does not exist in Redis"],"updatePoint":{"line":210,"column":56,"index":10318},"line":210,"code":"      it('should get the doc from the PersistenceManager', function () {\n        this.PersistenceManager.getDoc.calledWith(this.project_id, this.doc_id).should.equal(true);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should set the doc in Redis","suites":["DocumentManager","getDoc","when the doc does not exist in Redis"],"updatePoint":{"line":213,"column":37,"index":10482},"line":213,"code":"      it('should set the doc in Redis', function () {\n        this.RedisManager.putDocInMemory.calledWith(this.project_id, this.doc_id, this.lines, this.version, this.ranges, this.pathname, this.projectHistoryId).should.equal(true);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should set the history type in Redis","suites":["DocumentManager","getDoc","when the doc does not exist in Redis"],"updatePoint":{"line":216,"column":46,"index":10734},"line":216,"code":"      it('should set the history type in Redis', function () {\n        this.RedisManager.setHistoryType.calledWith(this.doc_id, this.projectHistoryType).should.equal(true);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback with the doc info","suites":["DocumentManager","getDoc","when the doc does not exist in Redis"],"updatePoint":{"line":219,"column":52,"index":10923},"line":219,"code":"      it('should call the callback with the doc info', function () {\n        this.callback.calledWith(null, this.lines, this.version, this.ranges, this.pathname, this.projectHistoryId, null, false).should.equal(true);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should time the execution","suites":["DocumentManager","getDoc","when the doc does not exist in Redis"],"updatePoint":{"line":222,"column":35,"index":11134},"line":222,"code":"      it('should time the execution', function () {\n        this.Metrics.Timer.prototype.done.called.should.equal(true);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not apply the diff as a ShareJS op","suites":["DocumentManager","setDoc","with plain tex lines","when not loaded but with the same content"],"updatePoint":{"line":251,"column":53,"index":12638},"line":251,"code":"        it('should not apply the diff as a ShareJS op', function () {\n          this.UpdateManager.applyUpdate.called.should.equal(false);\n        });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should increment the external update metric","suites":["DocumentManager","setDoc","with plain tex lines","when not loaded but with the same content"],"updatePoint":{"line":254,"column":55,"index":12791},"line":254,"code":"        it('should increment the external update metric', function () {\n          this.Metrics.inc.calledWith('external-update', 1, {\n            status: 'noop',\n            method: 'evict',\n            path: this.source\n          }).should.equal(true);\n        });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should flush and delete the doc from redis","suites":["DocumentManager","setDoc","with plain tex lines","when not loaded but with the same content"],"updatePoint":{"line":261,"column":54,"index":13056},"line":261,"code":"        it('should flush and delete the doc from redis', function () {\n          this.DocumentManager.flushAndDeleteDoc.calledWith(this.project_id, this.doc_id).should.equal(true);\n        });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not apply the diff as a ShareJS op","suites":["DocumentManager","setDoc","with plain tex lines","when already loaded with the same content"],"updatePoint":{"line":270,"column":53,"index":13587},"line":270,"code":"        it('should not apply the diff as a ShareJS op', function () {\n          this.UpdateManager.applyUpdate.called.should.equal(false);\n        });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should increment the external update metric","suites":["DocumentManager","setDoc","with plain tex lines","when already loaded with the same content"],"updatePoint":{"line":273,"column":55,"index":13740},"line":273,"code":"        it('should increment the external update metric', function () {\n          this.Metrics.inc.calledWith('external-update', 1, {\n            status: 'noop',\n            method: 'flush',\n            path: this.source\n          }).should.equal(true);\n        });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should flush the doc to Mongo","suites":["DocumentManager","setDoc","with plain tex lines","when already loaded with the same content"],"updatePoint":{"line":280,"column":41,"index":13992},"line":280,"code":"        it('should flush the doc to Mongo', function () {\n          this.DocumentManager.flushDocIfLoaded.calledWith(this.project_id, this.doc_id).should.equal(true);\n        });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should get the current doc lines","suites":["DocumentManager","setDoc","with plain tex lines","when already loaded"],"updatePoint":{"line":288,"column":44,"index":14416},"line":288,"code":"        it('should get the current doc lines', function () {\n          this.DocumentManager.getDoc.calledWith(this.project_id, this.doc_id).should.equal(true);\n        });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return a diff of the old and new lines","suites":["DocumentManager","setDoc","with plain tex lines","when already loaded"],"updatePoint":{"line":291,"column":57,"index":14601},"line":291,"code":"        it('should return a diff of the old and new lines', function () {\n          this.DiffCodec.diffAsShareJsOp.calledWith(this.beforeLines, this.afterLines).should.equal(true);\n        });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should apply the diff as a ShareJS op","suites":["DocumentManager","setDoc","with plain tex lines","when already loaded"],"updatePoint":{"line":294,"column":49,"index":14786},"line":294,"code":"        it('should apply the diff as a ShareJS op', function () {\n          this.UpdateManager.applyUpdate.calledWith(this.project_id, this.doc_id, {\n            doc: this.doc_id,\n            v: this.version,\n            op: this.ops,\n            meta: {\n              type: 'external',\n              source: this.source,\n              user_id: this.user_id\n            }\n          }).should.equal(true);\n        });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should increment the external update metric","suites":["DocumentManager","setDoc","with plain tex lines","when already loaded"],"updatePoint":{"line":306,"column":55,"index":15209},"line":306,"code":"        it('should increment the external update metric', function () {\n          this.Metrics.inc.calledWith('external-update', 1, {\n            status: 'diff',\n            method: 'flush',\n            path: this.source\n          }).should.equal(true);\n        });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should flush the doc to Mongo","suites":["DocumentManager","setDoc","with plain tex lines","when already loaded"],"updatePoint":{"line":313,"column":41,"index":15461},"line":313,"code":"        it('should flush the doc to Mongo', function () {\n          this.DocumentManager.flushDocIfLoaded.calledWith(this.project_id, this.doc_id).should.equal(true);\n        });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not flush the project history","suites":["DocumentManager","setDoc","with plain tex lines","when already loaded"],"updatePoint":{"line":316,"column":48,"index":15647},"line":316,"code":"        it('should not flush the project history', function () {\n          this.HistoryManager.flushProjectChangesAsync.called.should.equal(false);\n        });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback","suites":["DocumentManager","setDoc","with plain tex lines","when already loaded"],"updatePoint":{"line":319,"column":36,"index":15795},"line":319,"code":"        it('should call the callback', function () {\n          this.callback.calledWith(null).should.equal(true);\n        });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should time the execution","suites":["DocumentManager","setDoc","with plain tex lines","when already loaded"],"updatePoint":{"line":322,"column":37,"index":15922},"line":322,"code":"        it('should time the execution', function () {\n          this.Metrics.Timer.prototype.done.called.should.equal(true);\n        });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should flush and delete the doc from the doc updater","suites":["DocumentManager","setDoc","with plain tex lines","when not already loaded"],"updatePoint":{"line":331,"column":64,"index":16468},"line":331,"code":"        it('should flush and delete the doc from the doc updater', function () {\n          this.DocumentManager.flushAndDeleteDoc.calledWith(this.project_id, this.doc_id, {}).should.equal(true);\n        });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should increment the external update metric","suites":["DocumentManager","setDoc","with plain tex lines","when not already loaded"],"updatePoint":{"line":334,"column":55,"index":16666},"line":334,"code":"        it('should increment the external update metric', function () {\n          this.Metrics.inc.calledWith('external-update', 1, {\n            status: 'diff',\n            method: 'evict',\n            path: this.source\n          }).should.equal(true);\n        });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not flush the project history","suites":["DocumentManager","setDoc","with plain tex lines","when not already loaded"],"updatePoint":{"line":341,"column":48,"index":16925},"line":341,"code":"        it('should not flush the project history', function () {\n          this.HistoryManager.flushProjectChangesAsync.calledWithExactly(this.project_id).should.equal(true);\n        });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return the callback with an error","suites":["DocumentManager","setDoc","with plain tex lines","without new lines"],"updatePoint":{"line":349,"column":52,"index":17345},"line":349,"code":"        it('should return the callback with an error', function () {\n          this.callback.calledWith(new Error('No lines were passed to setDoc'));\n        });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not try to get the doc lines","suites":["DocumentManager","setDoc","with plain tex lines","without new lines"],"updatePoint":{"line":352,"column":47,"index":17502},"line":352,"code":"        it('should not try to get the doc lines', function () {\n          this.DocumentManager.getDoc.called.should.equal(false);\n        });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should set the undo flag on each op","suites":["DocumentManager","setDoc","with plain tex lines","with the undoing flag"],"updatePoint":{"line":369,"column":47,"index":18169},"line":369,"code":"        it('should set the undo flag on each op', function () {\n          this.ops.map(op => op.u.should.equal(true));\n        });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should get the document's current ranges","suites":["DocumentManager","acceptChanges","successfully with a single change"],"updatePoint":{"line":397,"column":50,"index":19263},"line":397,"code":"      it(\"should get the document's current ranges\", function () {\n        this.DocumentManager.getDoc.calledWith(this.project_id, this.doc_id).should.equal(true);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should apply the accept change to the ranges","suites":["DocumentManager","acceptChanges","successfully with a single change"],"updatePoint":{"line":400,"column":54,"index":19441},"line":400,"code":"      it('should apply the accept change to the ranges', function () {\n        this.RangesManager.acceptChanges.calledWith([this.change_id], this.ranges).should.equal(true);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should save the updated ranges","suites":["DocumentManager","acceptChanges","successfully with a single change"],"updatePoint":{"line":403,"column":40,"index":19611},"line":403,"code":"      it('should save the updated ranges', function () {\n        this.RedisManager.updateDocument.calledWith(this.project_id, this.doc_id, this.lines, this.version, [], this.updated_ranges, {}).should.equal(true);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback","suites":["DocumentManager","acceptChanges","successfully with a single change"],"updatePoint":{"line":406,"column":34,"index":19829},"line":406,"code":"      it('should call the callback', function () {\n        this.callback.called.should.equal(true);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should apply the accept change to the ranges","suites":["DocumentManager","acceptChanges","successfully with multiple changes"],"updatePoint":{"line":414,"column":54,"index":20179},"line":414,"code":"      it('should apply the accept change to the ranges', function () {\n        this.RangesManager.acceptChanges.calledWith(this.change_ids, this.ranges).should.equal(true);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not save anything","suites":["DocumentManager","acceptChanges","when the doc is not found"],"updatePoint":{"line":423,"column":34,"index":20637},"line":423,"code":"      it('should not save anything', function () {\n        this.RedisManager.updateDocument.called.should.equal(false);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback with a not found error","suites":["DocumentManager","acceptChanges","when the doc is not found"],"updatePoint":{"line":426,"column":57,"index":20790},"line":426,"code":"      it('should call the callback with a not found error', function () {\n        this.callback.calledWith(sinon.match.instanceOf(Errors.NotFoundError)).should.equal(true);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should get the document's current ranges","suites":["DocumentManager","deleteComment","successfully"],"updatePoint":{"line":450,"column":50,"index":21761},"line":450,"code":"      it(\"should get the document's current ranges\", function () {\n        this.DocumentManager.getDoc.calledWith(this.project_id, this.doc_id).should.equal(true);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should delete the comment from the ranges","suites":["DocumentManager","deleteComment","successfully"],"updatePoint":{"line":453,"column":51,"index":21936},"line":453,"code":"      it('should delete the comment from the ranges', function () {\n        this.RangesManager.deleteComment.calledWith(this.comment_id, this.ranges).should.equal(true);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should save the updated ranges","suites":["DocumentManager","deleteComment","successfully"],"updatePoint":{"line":456,"column":40,"index":22105},"line":456,"code":"      it('should save the updated ranges', function () {\n        this.RedisManager.updateDocument.calledWith(this.project_id, this.doc_id, this.lines, this.version, [], this.updated_ranges, {}).should.equal(true);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback","suites":["DocumentManager","deleteComment","successfully"],"updatePoint":{"line":459,"column":34,"index":22323},"line":459,"code":"      it('should call the callback', function () {\n        this.callback.called.should.equal(true);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not save anything","suites":["DocumentManager","deleteComment","when the doc is not found"],"updatePoint":{"line":468,"column":34,"index":22729},"line":468,"code":"      it('should not save anything', function () {\n        this.RedisManager.updateDocument.called.should.equal(false);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback with a not found error","suites":["DocumentManager","deleteComment","when the doc is not found"],"updatePoint":{"line":471,"column":57,"index":22882},"line":471,"code":"      it('should call the callback with a not found error', function () {\n        this.callback.calledWith(sinon.match.instanceOf(Errors.NotFoundError)).should.equal(true);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should get the doc","suites":["DocumentManager","getDocAndFlushIfOld","when the doc is in Redis","and has changes to be flushed"],"updatePoint":{"line":486,"column":30,"index":23645},"line":486,"code":"        it('should get the doc', function () {\n          this.DocumentManager.getDoc.calledWith(this.project_id, this.doc_id).should.equal(true);\n        });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should flush the doc","suites":["DocumentManager","getDocAndFlushIfOld","when the doc is in Redis","and has changes to be flushed"],"updatePoint":{"line":489,"column":32,"index":23805},"line":489,"code":"        it('should flush the doc', function () {\n          this.DocumentManager.flushDocIfLoaded.calledWith(this.project_id, this.doc_id).should.equal(true);\n        });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback with the lines and versions","suites":["DocumentManager","getDocAndFlushIfOld","when the doc is in Redis","and has changes to be flushed"],"updatePoint":{"line":492,"column":64,"index":24007},"line":492,"code":"        it('should call the callback with the lines and versions', function () {\n          this.callback.calledWith(null, this.lines, this.version).should.equal(true);\n        });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should get the doc","suites":["DocumentManager","getDocAndFlushIfOld","when the doc is in Redis","and has only changes that don't need to be flushed"],"updatePoint":{"line":501,"column":30,"index":24542},"line":501,"code":"        it('should get the doc', function () {\n          this.DocumentManager.getDoc.calledWith(this.project_id, this.doc_id).should.equal(true);\n        });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not flush the doc","suites":["DocumentManager","getDocAndFlushIfOld","when the doc is in Redis","and has only changes that don't need to be flushed"],"updatePoint":{"line":504,"column":36,"index":24706},"line":504,"code":"        it('should not flush the doc', function () {\n          this.DocumentManager.flushDocIfLoaded.called.should.equal(false);\n        });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback with the lines and versions","suites":["DocumentManager","getDocAndFlushIfOld","when the doc is in Redis","and has only changes that don't need to be flushed"],"updatePoint":{"line":507,"column":64,"index":24875},"line":507,"code":"        it('should call the callback with the lines and versions', function () {\n          this.callback.calledWith(null, this.lines, this.version).should.equal(true);\n        });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should get the doc","suites":["DocumentManager","getDocAndFlushIfOld","when the doc is not in Redis"],"updatePoint":{"line":517,"column":28,"index":25358},"line":517,"code":"      it('should get the doc', function () {\n        this.DocumentManager.getDoc.calledWith(this.project_id, this.doc_id).should.equal(true);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not flush the doc","suites":["DocumentManager","getDocAndFlushIfOld","when the doc is not in Redis"],"updatePoint":{"line":520,"column":34,"index":25516},"line":520,"code":"      it('should not flush the doc', function () {\n        this.DocumentManager.flushDocIfLoaded.called.should.equal(false);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback with the lines and versions","suites":["DocumentManager","getDocAndFlushIfOld","when the doc is not in Redis"],"updatePoint":{"line":523,"column":62,"index":25679},"line":523,"code":"      it('should call the callback with the lines and versions', function () {\n        this.callback.calledWith(null, this.lines, this.version).should.equal(true);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should rename the document","suites":["DocumentManager","renameDoc","successfully"],"updatePoint":{"line":537,"column":36,"index":26229},"line":537,"code":"      it('should rename the document', function () {\n        this.RedisManager.renameDoc.calledWith(this.project_id, this.doc_id, this.user_id, this.update, this.projectHistoryId).should.equal(true);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback","suites":["DocumentManager","renameDoc","successfully"],"updatePoint":{"line":540,"column":34,"index":26437},"line":540,"code":"      it('should call the callback', function () {\n        this.callback.called.should.equal(true);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"gets the doc contents from redis","suites":["DocumentManager","resyncDocContents","when doc is loaded in redis"],"updatePoint":{"line":553,"column":42,"index":27140},"line":553,"code":"      it('gets the doc contents from redis', function () {\n        this.RedisManager.getDoc.calledWith(this.project_id, this.doc_id).should.equal(true);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"queues a resync doc content update","suites":["DocumentManager","resyncDocContents","when doc is loaded in redis"],"updatePoint":{"line":556,"column":44,"index":27305},"line":556,"code":"      it('queues a resync doc content update', function () {\n        this.ProjectHistoryRedisManager.queueResyncDocContent.calledWith(this.project_id, this.projectHistoryId, this.doc_id, this.lines, this.version, this.pathnameFromProjectStructureUpdate, this.callback).should.equal(true);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"tries to get the doc contents from redis","suites":["DocumentManager","resyncDocContents","when doc is not loaded in redis"],"updatePoint":{"line":568,"column":50,"index":28215},"line":568,"code":"      it('tries to get the doc contents from redis', function () {\n        this.RedisManager.getDoc.calledWith(this.project_id, this.doc_id).should.equal(true);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"gets the doc contents from web","suites":["DocumentManager","resyncDocContents","when doc is not loaded in redis"],"updatePoint":{"line":571,"column":40,"index":28376},"line":571,"code":"      it('gets the doc contents from web', function () {\n        this.PersistenceManager.getDoc.calledWith(this.project_id, this.doc_id, {\n          peek: true\n        }).should.equal(true);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"queues a resync doc content update","suites":["DocumentManager","resyncDocContents","when doc is not loaded in redis"],"updatePoint":{"line":576,"column":44,"index":28581},"line":576,"code":"      it('queues a resync doc content update', function () {\n        this.ProjectHistoryRedisManager.queueResyncDocContent.calledWith(this.project_id, this.projectHistoryId, this.doc_id, this.lines, this.version, this.pathnameFromProjectStructureUpdate, this.callback).should.equal(true);\n      });","file":"unit/js/DocumentManager/DocumentManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should send a request to the track changes api","suites":["HistoryManager","flushDocChangesAsync","when the project uses track changes"],"updatePoint":{"line":55,"column":63,"index":2035},"line":55,"code":"      return it('should send a request to the track changes api', function () {\n        return this.request.post.calledWith(`${this.Settings.apis.trackchanges.url}/project/${this.project_id}/doc/${this.doc_id}/flush`).should.equal(true);\n      });","file":"unit/js/HistoryManager/HistoryManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should send a request to the track changes api","suites":["HistoryManager","flushDocChangesAsync","when the project uses project history and double flush is not disabled"],"updatePoint":{"line":64,"column":63,"index":2609},"line":64,"code":"      return it('should send a request to the track changes api', function () {\n        return this.request.post.called.should.equal(true);\n      });","file":"unit/js/HistoryManager/HistoryManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not send a request to the track changes api","suites":["HistoryManager","flushDocChangesAsync","when the project uses project history and double flush is disabled"],"updatePoint":{"line":74,"column":67,"index":3141},"line":74,"code":"      return it('should not send a request to the track changes api', function () {\n        return this.request.post.called.should.equal(false);\n      });","file":"unit/js/HistoryManager/HistoryManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should send a request to the project history api","suites":["HistoryManager","flushProjectChangesAsync"],"updatePoint":{"line":86,"column":63,"index":3569},"line":86,"code":"    return it('should send a request to the project history api', function () {\n      return this.request.post.calledWith({\n        url: `${this.Settings.apis.project_history.url}/project/${this.project_id}/flush`,\n        qs: {\n          background: true\n        }\n      }).should.equal(true);\n    });","file":"unit/js/HistoryManager/HistoryManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should send a request to the project history api","suites":["HistoryManager","flushProjectChanges","in the normal case"],"updatePoint":{"line":105,"column":65,"index":4244},"line":105,"code":"      return it('should send a request to the project history api', function () {\n        return this.request.post.calledWith({\n          url: `${this.Settings.apis.project_history.url}/project/${this.project_id}/flush`,\n          qs: {\n            background: true\n          }\n        }).should.equal(true);\n      });","file":"unit/js/HistoryManager/HistoryManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not send a request to the project history api","suites":["HistoryManager","flushProjectChanges","with the skip_history_flush option"],"updatePoint":{"line":121,"column":69,"index":4861},"line":121,"code":"      return it('should not send a request to the project history api', function () {\n        return this.request.post.called.should.equal(false);\n      });","file":"unit/js/HistoryManager/HistoryManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not flush project changes","suites":["HistoryManager","recordAndFlushHistoryOps","with no ops"],"updatePoint":{"line":139,"column":42,"index":5651},"line":139,"code":"      it('should not flush project changes', function () {\n        return this.HistoryManager.flushProjectChangesAsync.called.should.equal(false);\n      });","file":"unit/js/HistoryManager/HistoryManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not record doc has history ops","suites":["HistoryManager","recordAndFlushHistoryOps","with no ops"],"updatePoint":{"line":142,"column":47,"index":5813},"line":142,"code":"      it('should not record doc has history ops', function () {\n        return this.HistoryRedisManager.recordDocHasHistoryOps.called.should.equal(false);\n      });","file":"unit/js/HistoryManager/HistoryManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not flush doc changes","suites":["HistoryManager","recordAndFlushHistoryOps","with no ops"],"updatePoint":{"line":145,"column":38,"index":5969},"line":145,"code":"      it('should not flush doc changes', function () {\n        return this.HistoryManager.flushDocChangesAsync.called.should.equal(false);\n      });","file":"unit/js/HistoryManager/HistoryManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback","suites":["HistoryManager","recordAndFlushHistoryOps","with no ops"],"updatePoint":{"line":148,"column":41,"index":6121},"line":148,"code":"      return it('should call the callback', function () {\n        return this.callback.called.should.equal(true);\n      });","file":"unit/js/HistoryManager/HistoryManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should flush project changes","suites":["HistoryManager","recordAndFlushHistoryOps","with enough ops to flush project changes"],"updatePoint":{"line":159,"column":38,"index":6785},"line":159,"code":"      it('should flush project changes', function () {\n        return this.HistoryManager.flushProjectChangesAsync.calledWith(this.project_id).should.equal(true);\n      });","file":"unit/js/HistoryManager/HistoryManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should record doc has history ops","suites":["HistoryManager","recordAndFlushHistoryOps","with enough ops to flush project changes"],"updatePoint":{"line":162,"column":43,"index":6963},"line":162,"code":"      it('should record doc has history ops', function () {\n        return this.HistoryRedisManager.recordDocHasHistoryOps.calledWith(this.project_id, this.doc_id, this.ops);\n      });","file":"unit/js/HistoryManager/HistoryManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not flush doc changes","suites":["HistoryManager","recordAndFlushHistoryOps","with enough ops to flush project changes"],"updatePoint":{"line":165,"column":38,"index":7143},"line":165,"code":"      it('should not flush doc changes', function () {\n        return this.HistoryManager.flushDocChangesAsync.called.should.equal(false);\n      });","file":"unit/js/HistoryManager/HistoryManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback","suites":["HistoryManager","recordAndFlushHistoryOps","with enough ops to flush project changes"],"updatePoint":{"line":168,"column":41,"index":7295},"line":168,"code":"      return it('should call the callback', function () {\n        return this.callback.called.should.equal(true);\n      });","file":"unit/js/HistoryManager/HistoryManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not flush project changes","suites":["HistoryManager","recordAndFlushHistoryOps","with enough ops to flush doc changes"],"updatePoint":{"line":179,"column":42,"index":7959},"line":179,"code":"      it('should not flush project changes', function () {\n        return this.HistoryManager.flushProjectChangesAsync.called.should.equal(false);\n      });","file":"unit/js/HistoryManager/HistoryManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should record doc has history ops","suites":["HistoryManager","recordAndFlushHistoryOps","with enough ops to flush doc changes"],"updatePoint":{"line":182,"column":43,"index":8117},"line":182,"code":"      it('should record doc has history ops', function () {\n        return this.HistoryRedisManager.recordDocHasHistoryOps.calledWith(this.project_id, this.doc_id, this.ops);\n      });","file":"unit/js/HistoryManager/HistoryManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should flush doc changes","suites":["HistoryManager","recordAndFlushHistoryOps","with enough ops to flush doc changes"],"updatePoint":{"line":185,"column":34,"index":8293},"line":185,"code":"      it('should flush doc changes', function () {\n        return this.HistoryManager.flushDocChangesAsync.calledWith(this.project_id, this.doc_id).should.equal(true);\n      });","file":"unit/js/HistoryManager/HistoryManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback","suites":["HistoryManager","recordAndFlushHistoryOps","with enough ops to flush doc changes"],"updatePoint":{"line":188,"column":41,"index":8478},"line":188,"code":"      return it('should call the callback', function () {\n        return this.callback.called.should.equal(true);\n      });","file":"unit/js/HistoryManager/HistoryManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not flush doc changes","suites":["HistoryManager","recordAndFlushHistoryOps","when recording doc has history ops errors"],"updatePoint":{"line":198,"column":38,"index":9023},"line":198,"code":"      it('should not flush doc changes', function () {\n        return this.HistoryManager.flushDocChangesAsync.called.should.equal(false);\n      });","file":"unit/js/HistoryManager/HistoryManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback with the error","suites":["HistoryManager","recordAndFlushHistoryOps","when recording doc has history ops errors"],"updatePoint":{"line":201,"column":56,"index":9190},"line":201,"code":"      return it('should call the callback with the error', function () {\n        return this.callback.calledWith(this.error).should.equal(true);\n      });","file":"unit/js/HistoryManager/HistoryManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return false if the number of ops is not known","suites":["HistoryManager","recordAndFlushHistoryOps","shouldFlushHistoryOps"],"updatePoint":{"line":206,"column":63,"index":9419},"line":206,"code":"      it('should return false if the number of ops is not known', function () {\n        return this.HistoryManager.shouldFlushHistoryOps(null, ['a', 'b', 'c'].length, 1).should.equal(false);\n      });","file":"unit/js/HistoryManager/HistoryManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return false if the updates didn't take us past the threshold","suites":["HistoryManager","recordAndFlushHistoryOps","shouldFlushHistoryOps"],"updatePoint":{"line":209,"column":78,"index":9635},"line":209,"code":"      it(\"should return false if the updates didn't take us past the threshold\", function () {\n        // Currently there are 14 ops\n        // Previously we were on 11 ops\n        // We didn't pass over a multiple of 5\n        this.HistoryManager.shouldFlushHistoryOps(14, ['a', 'b', 'c'].length, 5).should.equal(false);\n        it('should return true if the updates took to the threshold', function () {});\n        // Currently there are 15 ops\n        // Previously we were on 12 ops\n        // We've reached a new multiple of 5\n        return this.HistoryManager.shouldFlushHistoryOps(15, ['a', 'b', 'c'].length, 5).should.equal(true);\n      });","file":"unit/js/HistoryManager/HistoryManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return true if the updates took to the threshold","suites":["HistoryManager","recordAndFlushHistoryOps","shouldFlushHistoryOps"],"updatePoint":{"line":214,"column":67,"index":9946},"line":214,"code":"        it('should return true if the updates took to the threshold', function () {});","file":"unit/js/HistoryManager/HistoryManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return true if the updates took past the threshold","suites":["HistoryManager","recordAndFlushHistoryOps","shouldFlushHistoryOps"],"updatePoint":{"line":220,"column":74,"index":10281},"line":220,"code":"      return it('should return true if the updates took past the threshold', function () {\n        // Currently there are 19 ops\n        // Previously we were on 16 ops\n        // We didn't pass over a multiple of 5\n        return this.HistoryManager.shouldFlushHistoryOps(17, ['a', 'b', 'c'].length, 5).should.equal(true);\n      });","file":"unit/js/HistoryManager/HistoryManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should queue a project structure reync","suites":["HistoryManager","resyncProjectHistory"],"updatePoint":{"line":244,"column":46,"index":11285},"line":244,"code":"    it('should queue a project structure reync', function () {\n      return this.ProjectHistoryRedisManager.queueResyncProjectStructure.calledWith(this.project_id, this.projectHistoryId, this.docs, this.files).should.equal(true);\n    });","file":"unit/js/HistoryManager/HistoryManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should queue doc content reyncs","suites":["HistoryManager","resyncProjectHistory"],"updatePoint":{"line":247,"column":39,"index":11516},"line":247,"code":"    it('should queue doc content reyncs', function () {\n      return this.DocumentManager.resyncDocContentsWithLock.calledWith(this.project_id, this.docs[0].doc, this.docs[0].path).should.equal(true);\n    });","file":"unit/js/HistoryManager/HistoryManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback","suites":["HistoryManager","resyncProjectHistory"],"updatePoint":{"line":250,"column":39,"index":11725},"line":250,"code":"    return it('should call the callback', function () {\n      return this.callback.called.should.equal(true);\n    });","file":"unit/js/HistoryManager/HistoryManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should add the doc_id to the set of which records the project docs","suites":["HistoryRedisManager","recordDocHasHistoryOps","with ops"],"updatePoint":{"line":75,"column":83,"index":2296},"line":75,"code":"      return it('should add the doc_id to the set of which records the project docs', function () {\n        return this.rclient.sadd.calledWith(`DocsWithHistoryOps:${this.project_id}`, this.doc_id).should.equal(true);\n      });","file":"unit/js/HistoryRedisManager/HistoryRedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not add the doc_id to the set of which records the project docs","suites":["HistoryRedisManager","recordDocHasHistoryOps","with no ops"],"updatePoint":{"line":86,"column":80,"index":2824},"line":86,"code":"      it('should not add the doc_id to the set of which records the project docs', function () {\n        return this.rclient.sadd.called.should.equal(false);\n      });","file":"unit/js/HistoryRedisManager/HistoryRedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback with an error","suites":["HistoryRedisManager","recordDocHasHistoryOps","with no ops"],"updatePoint":{"line":89,"column":55,"index":2967},"line":89,"code":"      return it('should call the callback with an error', function () {\n        return this.callback.calledWith(sinon.match.instanceOf(Error)).should.equal(true);\n      });","file":"unit/js/HistoryRedisManager/HistoryRedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should get the doc","suites":["HttpController","getDoc","when the document exists and no recent ops are requested"],"updatePoint":{"line":63,"column":28,"index":2129},"line":63,"code":"      it('should get the doc', function () {\n        this.DocumentManager.getDocAndRecentOpsWithLock.calledWith(this.project_id, this.doc_id, -1).should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return the doc as JSON","suites":["HttpController","getDoc","when the document exists and no recent ops are requested"],"updatePoint":{"line":66,"column":39,"index":2316},"line":66,"code":"      it('should return the doc as JSON', function () {\n        this.res.json.calledWith({\n          id: this.doc_id,\n          lines: this.lines,\n          version: this.version,\n          ops: [],\n          ranges: this.ranges,\n          pathname: this.pathname\n        }).should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should log the request","suites":["HttpController","getDoc","when the document exists and no recent ops are requested"],"updatePoint":{"line":76,"column":32,"index":2614},"line":76,"code":"      it('should log the request', function () {\n        this.logger.debug.calledWith({\n          docId: this.doc_id,\n          projectId: this.project_id\n        }, 'getting doc via http').should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should time the request","suites":["HttpController","getDoc","when the document exists and no recent ops are requested"],"updatePoint":{"line":82,"column":33,"index":2835},"line":82,"code":"      it('should time the request', function () {\n        this.Metrics.Timer.prototype.done.called.should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should get the doc","suites":["HttpController","getDoc","when recent ops are requested"],"updatePoint":{"line":94,"column":28,"index":3376},"line":94,"code":"      it('should get the doc', function () {\n        this.DocumentManager.getDocAndRecentOpsWithLock.calledWith(this.project_id, this.doc_id, this.fromVersion).should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return the doc as JSON","suites":["HttpController","getDoc","when recent ops are requested"],"updatePoint":{"line":97,"column":39,"index":3577},"line":97,"code":"      it('should return the doc as JSON', function () {\n        this.res.json.calledWith({\n          id: this.doc_id,\n          lines: this.lines,\n          version: this.version,\n          ops: this.ops,\n          ranges: this.ranges,\n          pathname: this.pathname\n        }).should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should log the request","suites":["HttpController","getDoc","when recent ops are requested"],"updatePoint":{"line":107,"column":32,"index":3881},"line":107,"code":"      it('should log the request', function () {\n        this.logger.debug.calledWith({\n          docId: this.doc_id,\n          projectId: this.project_id\n        }, 'getting doc via http').should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should time the request","suites":["HttpController","getDoc","when recent ops are requested"],"updatePoint":{"line":113,"column":33,"index":4102},"line":113,"code":"      it('should time the request', function () {\n        this.Metrics.Timer.prototype.done.called.should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call next with NotFoundError","suites":["HttpController","getDoc","when the document does not exist"],"updatePoint":{"line":122,"column":45,"index":4528},"line":122,"code":"      it('should call next with NotFoundError', function () {\n        this.next.calledWith(sinon.match.instanceOf(Errors.NotFoundError)).should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call next with the error","suites":["HttpController","getDoc","when an errors occurs"],"updatePoint":{"line":131,"column":41,"index":4978},"line":131,"code":"      it('should call next with the error', function () {\n        this.next.calledWith(sinon.match.instanceOf(Error)).should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should set the doc","suites":["HttpController","setDoc","successfully"],"updatePoint":{"line":163,"column":28,"index":5901},"line":163,"code":"      it('should set the doc', function () {\n        this.DocumentManager.setDocWithLock.calledWith(this.project_id, this.doc_id, this.lines, this.source, this.user_id, this.undoing).should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return a json response with the document rev from web","suites":["HttpController","setDoc","successfully"],"updatePoint":{"line":166,"column":70,"index":6156},"line":166,"code":"      it('should return a json response with the document rev from web', function () {\n        this.res.json.calledWithMatch({\n          rev: '123'\n        }).should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should log the request","suites":["HttpController","setDoc","successfully"],"updatePoint":{"line":171,"column":32,"index":6307},"line":171,"code":"      it('should log the request', function () {\n        this.logger.debug.calledWith({\n          docId: this.doc_id,\n          projectId: this.project_id,\n          lines: this.lines,\n          source: this.source,\n          userId: this.user_id,\n          undoing: this.undoing\n        }, 'setting doc via http').should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should time the request","suites":["HttpController","setDoc","successfully"],"updatePoint":{"line":181,"column":33,"index":6653},"line":181,"code":"      it('should time the request', function () {\n        this.Metrics.Timer.prototype.done.called.should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call next with the error","suites":["HttpController","setDoc","when an errors occurs"],"updatePoint":{"line":190,"column":41,"index":7053},"line":190,"code":"      it('should call next with the error', function () {\n        this.next.calledWith(sinon.match.instanceOf(Error)).should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should send back a 406 response","suites":["HttpController","setDoc","when the payload is too large"],"updatePoint":{"line":204,"column":41,"index":7610},"line":204,"code":"      it('should send back a 406 response', function () {\n        this.res.sendStatus.calledWith(406).should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not call setDocWithLock","suites":["HttpController","setDoc","when the payload is too large"],"updatePoint":{"line":207,"column":40,"index":7741},"line":207,"code":"      it('should not call setDocWithLock', function () {\n        this.DocumentManager.setDocWithLock.callCount.should.equal(0);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should flush the project","suites":["HttpController","flushProject","successfully"],"updatePoint":{"line":227,"column":34,"index":8335},"line":227,"code":"      it('should flush the project', function () {\n        this.ProjectManager.flushProjectWithLocks.calledWith(this.project_id).should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return a successful No Content response","suites":["HttpController","flushProject","successfully"],"updatePoint":{"line":230,"column":56,"index":8516},"line":230,"code":"      it('should return a successful No Content response', function () {\n        this.res.sendStatus.calledWith(204).should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should log the request","suites":["HttpController","flushProject","successfully"],"updatePoint":{"line":233,"column":32,"index":8639},"line":233,"code":"      it('should log the request', function () {\n        this.logger.debug.calledWith({\n          projectId: this.project_id\n        }, 'flushing project via http').should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should time the request","suites":["HttpController","flushProject","successfully"],"updatePoint":{"line":238,"column":33,"index":8835},"line":238,"code":"      it('should time the request', function () {\n        this.Metrics.Timer.prototype.done.called.should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call next with the error","suites":["HttpController","flushProject","when an errors occurs"],"updatePoint":{"line":247,"column":41,"index":9247},"line":247,"code":"      it('should call next with the error', function () {\n        this.next.calledWith(sinon.match.instanceOf(Error)).should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should flush the doc","suites":["HttpController","flushDocIfLoaded","successfully"],"updatePoint":{"line":270,"column":30,"index":9958},"line":270,"code":"      it('should flush the doc', function () {\n        this.DocumentManager.flushDocIfLoadedWithLock.calledWith(this.project_id, this.doc_id).should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return a successful No Content response","suites":["HttpController","flushDocIfLoaded","successfully"],"updatePoint":{"line":273,"column":56,"index":10156},"line":273,"code":"      it('should return a successful No Content response', function () {\n        this.res.sendStatus.calledWith(204).should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should log the request","suites":["HttpController","flushDocIfLoaded","successfully"],"updatePoint":{"line":276,"column":32,"index":10279},"line":276,"code":"      it('should log the request', function () {\n        this.logger.debug.calledWith({\n          docId: this.doc_id,\n          projectId: this.project_id\n        }, 'flushing doc via http').should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should time the request","suites":["HttpController","flushDocIfLoaded","successfully"],"updatePoint":{"line":282,"column":33,"index":10501},"line":282,"code":"      it('should time the request', function () {\n        this.Metrics.Timer.prototype.done.called.should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call next with the error","suites":["HttpController","flushDocIfLoaded","when an errors occurs"],"updatePoint":{"line":291,"column":41,"index":10921},"line":291,"code":"      it('should call next with the error', function () {\n        this.next.calledWith(sinon.match.instanceOf(Error)).should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should flush and delete the doc","suites":["HttpController","deleteDoc","successfully"],"updatePoint":{"line":312,"column":41,"index":11561},"line":312,"code":"      it('should flush and delete the doc', function () {\n        this.DocumentManager.flushAndDeleteDocWithLock.calledWith(this.project_id, this.doc_id, {\n          ignoreFlushErrors: false\n        }).should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should flush project history","suites":["HttpController","deleteDoc","successfully"],"updatePoint":{"line":317,"column":38,"index":11790},"line":317,"code":"      it('should flush project history', function () {\n        this.HistoryManager.flushProjectChangesAsync.calledWithExactly(this.project_id).should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return a successful No Content response","suites":["HttpController","deleteDoc","successfully"],"updatePoint":{"line":320,"column":56,"index":11981},"line":320,"code":"      it('should return a successful No Content response', function () {\n        this.res.sendStatus.calledWith(204).should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should log the request","suites":["HttpController","deleteDoc","successfully"],"updatePoint":{"line":323,"column":32,"index":12104},"line":323,"code":"      it('should log the request', function () {\n        this.logger.debug.calledWith({\n          docId: this.doc_id,\n          projectId: this.project_id\n        }, 'deleting doc via http').should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should time the request","suites":["HttpController","deleteDoc","successfully"],"updatePoint":{"line":329,"column":33,"index":12326},"line":329,"code":"      it('should time the request', function () {\n        this.Metrics.Timer.prototype.done.called.should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should delete the doc","suites":["HttpController","deleteDoc","ignoring errors"],"updatePoint":{"line":339,"column":31,"index":12751},"line":339,"code":"      it('should delete the doc', function () {\n        this.DocumentManager.flushAndDeleteDocWithLock.calledWith(this.project_id, this.doc_id, {\n          ignoreFlushErrors: true\n        }).should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return a successful No Content response","suites":["HttpController","deleteDoc","ignoring errors"],"updatePoint":{"line":344,"column":56,"index":12997},"line":344,"code":"      it('should return a successful No Content response', function () {\n        this.res.sendStatus.calledWith(204).should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should flush project history","suites":["HttpController","deleteDoc","when an errors occurs"],"updatePoint":{"line":353,"column":38,"index":13403},"line":353,"code":"      it('should flush project history', function () {\n        this.HistoryManager.flushProjectChangesAsync.calledWithExactly(this.project_id).should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call next with the error","suites":["HttpController","deleteDoc","when an errors occurs"],"updatePoint":{"line":356,"column":41,"index":13579},"line":356,"code":"      it('should call next with the error', function () {\n        this.next.calledWith(sinon.match.instanceOf(Error)).should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should delete the project","suites":["HttpController","deleteProject","successfully"],"updatePoint":{"line":376,"column":35,"index":14194},"line":376,"code":"      it('should delete the project', function () {\n        this.ProjectManager.flushAndDeleteProjectWithLocks.calledWith(this.project_id).should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return a successful No Content response","suites":["HttpController","deleteProject","successfully"],"updatePoint":{"line":379,"column":56,"index":14384},"line":379,"code":"      it('should return a successful No Content response', function () {\n        this.res.sendStatus.calledWith(204).should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should log the request","suites":["HttpController","deleteProject","successfully"],"updatePoint":{"line":382,"column":32,"index":14507},"line":382,"code":"      it('should log the request', function () {\n        this.logger.debug.calledWith({\n          projectId: this.project_id\n        }, 'deleting project via http').should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should time the request","suites":["HttpController","deleteProject","successfully"],"updatePoint":{"line":387,"column":33,"index":14703},"line":387,"code":"      it('should time the request', function () {\n        this.Metrics.Timer.prototype.done.called.should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should queue the flush and delete","suites":["HttpController","deleteProject","with the background=true option from realtime"],"updatePoint":{"line":400,"column":43,"index":15219},"line":400,"code":"      it('should queue the flush and delete', function () {\n        this.ProjectManager.queueFlushAndDeleteProject.calledWith(this.project_id).should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call next with the error","suites":["HttpController","deleteProject","when an errors occurs"],"updatePoint":{"line":409,"column":41,"index":15675},"line":409,"code":"      it('should call next with the error', function () {\n        this.next.calledWith(sinon.match.instanceOf(Error)).should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should accept the change","suites":["HttpController","acceptChanges","successfully with a single change"],"updatePoint":{"line":431,"column":34,"index":16391},"line":431,"code":"      it('should accept the change', function () {\n        this.DocumentManager.acceptChangesWithLock.calledWith(this.project_id, this.doc_id, [this.change_id]).should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return a successful No Content response","suites":["HttpController","acceptChanges","successfully with a single change"],"updatePoint":{"line":434,"column":56,"index":16604},"line":434,"code":"      it('should return a successful No Content response', function () {\n        this.res.sendStatus.calledWith(204).should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should log the request","suites":["HttpController","acceptChanges","successfully with a single change"],"updatePoint":{"line":437,"column":32,"index":16727},"line":437,"code":"      it('should log the request', function () {\n        this.logger.debug.calledWith({\n          projectId: this.project_id,\n          docId: this.doc_id\n        }, 'accepting 1 changes via http').should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should time the request","suites":["HttpController","acceptChanges","successfully with a single change"],"updatePoint":{"line":443,"column":33,"index":16956},"line":443,"code":"      it('should time the request', function () {\n        this.Metrics.Timer.prototype.done.called.should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should accept the changes in the body payload","suites":["HttpController","acceptChanges","succesfully with with multiple changes"],"updatePoint":{"line":456,"column":55,"index":17565},"line":456,"code":"      it('should accept the changes in the body payload', function () {\n        this.DocumentManager.acceptChangesWithLock.calledWith(this.project_id, this.doc_id, this.change_ids).should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should log the request with the correct number of changes","suites":["HttpController","acceptChanges","succesfully with with multiple changes"],"updatePoint":{"line":459,"column":67,"index":17788},"line":459,"code":"      it('should log the request with the correct number of changes', function () {\n        this.logger.debug.calledWith({\n          projectId: this.project_id,\n          docId: this.doc_id\n        }, `accepting ${this.change_ids.length} changes via http`).should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call next with the error","suites":["HttpController","acceptChanges","when an errors occurs"],"updatePoint":{"line":471,"column":41,"index":18326},"line":471,"code":"      it('should call next with the error', function () {\n        this.next.calledWith(sinon.match.instanceOf(Error)).should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should accept the change","suites":["HttpController","deleteComment","successfully"],"updatePoint":{"line":493,"column":34,"index":19022},"line":493,"code":"      it('should accept the change', function () {\n        this.DocumentManager.deleteCommentWithLock.calledWith(this.project_id, this.doc_id, this.comment_id).should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return a successful No Content response","suites":["HttpController","deleteComment","successfully"],"updatePoint":{"line":496,"column":56,"index":19234},"line":496,"code":"      it('should return a successful No Content response', function () {\n        this.res.sendStatus.calledWith(204).should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should log the request","suites":["HttpController","deleteComment","successfully"],"updatePoint":{"line":499,"column":32,"index":19357},"line":499,"code":"      it('should log the request', function () {\n        this.logger.debug.calledWith({\n          projectId: this.project_id,\n          docId: this.doc_id,\n          commentId: this.comment_id\n        }, 'deleting comment via http').should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should time the request","suites":["HttpController","deleteComment","successfully"],"updatePoint":{"line":506,"column":33,"index":19621},"line":506,"code":"      it('should time the request', function () {\n        this.Metrics.Timer.prototype.done.called.should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call next with the error","suites":["HttpController","deleteComment","when an errors occurs"],"updatePoint":{"line":515,"column":41,"index":20035},"line":515,"code":"      it('should call next with the error', function () {\n        this.next.calledWith(sinon.match.instanceOf(Error)).should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should get docs from the project manager","suites":["HttpController","getProjectDocsAndFlushIfOld","successfully"],"updatePoint":{"line":547,"column":50,"index":20944},"line":547,"code":"      it('should get docs from the project manager', function () {\n        this.ProjectManager.getProjectDocsAndFlushIfOld.calledWith(this.project_id, this.state, {}).should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return a successful response","suites":["HttpController","getProjectDocsAndFlushIfOld","successfully"],"updatePoint":{"line":550,"column":45,"index":21136},"line":550,"code":"      it('should return a successful response', function () {\n        this.res.send.calledWith(this.docs).should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should log the request","suites":["HttpController","getProjectDocsAndFlushIfOld","successfully"],"updatePoint":{"line":553,"column":32,"index":21259},"line":553,"code":"      it('should log the request', function () {\n        this.logger.debug.calledWith({\n          projectId: this.project_id,\n          exclude: []\n        }, 'getting docs via http').should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should log the response","suites":["HttpController","getProjectDocsAndFlushIfOld","successfully"],"updatePoint":{"line":559,"column":33,"index":21474},"line":559,"code":"      it('should log the response', function () {\n        this.logger.debug.calledWith({\n          projectId: this.project_id,\n          result: ['1234:23', '4567:45']\n        }, 'got docs via http').should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should time the request","suites":["HttpController","getProjectDocsAndFlushIfOld","successfully"],"updatePoint":{"line":565,"column":33,"index":21704},"line":565,"code":"      it('should time the request', function () {\n        this.Metrics.Timer.prototype.done.called.should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return an HTTP 409 Conflict response","suites":["HttpController","getProjectDocsAndFlushIfOld","when there is a conflict"],"updatePoint":{"line":574,"column":53,"index":22195},"line":574,"code":"      it('should return an HTTP 409 Conflict response', function () {\n        this.res.sendStatus.calledWith(409).should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call next with the error","suites":["HttpController","getProjectDocsAndFlushIfOld","when an error occurs"],"updatePoint":{"line":583,"column":41,"index":22622},"line":583,"code":"      it('should call next with the error', function () {\n        this.next.calledWith(sinon.match.instanceOf(Error)).should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should accept the change","suites":["HttpController","updateProject","successfully"],"updatePoint":{"line":632,"column":34,"index":23983},"line":632,"code":"      it('should accept the change', function () {\n        this.ProjectManager.updateProjectWithLocks.calledWith(this.project_id, this.projectHistoryId, this.userId, this.updates, this.version, this.source).should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return a successful No Content response","suites":["HttpController","updateProject","successfully"],"updatePoint":{"line":635,"column":56,"index":24242},"line":635,"code":"      it('should return a successful No Content response', function () {\n        this.res.sendStatus.calledWith(204).should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should time the request","suites":["HttpController","updateProject","successfully"],"updatePoint":{"line":638,"column":33,"index":24366},"line":638,"code":"      it('should time the request', function () {\n        this.Metrics.Timer.prototype.done.called.should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call next with the error","suites":["HttpController","updateProject","when an errors occurs"],"updatePoint":{"line":647,"column":41,"index":24771},"line":647,"code":"      it('should call next with the error', function () {\n        this.next.calledWith(sinon.match.instanceOf(Error)).should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should accept the change","suites":["HttpController","resyncProjectHistory","successfully"],"updatePoint":{"line":675,"column":34,"index":25656},"line":675,"code":"      it('should accept the change', function () {\n        this.HistoryManager.resyncProjectHistory.calledWith(this.project_id, this.projectHistoryId, this.docs, this.files).should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return a successful No Content response","suites":["HttpController","resyncProjectHistory","successfully"],"updatePoint":{"line":678,"column":56,"index":25882},"line":678,"code":"      it('should return a successful No Content response', function () {\n        this.res.sendStatus.calledWith(204).should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call next with the error","suites":["HttpController","resyncProjectHistory","when an errors occurs"],"updatePoint":{"line":687,"column":41,"index":26296},"line":687,"code":"      it('should call next with the error', function () {\n        this.next.calledWith(sinon.match.instanceOf(Error)).should.equal(true);\n      });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should compute the character count for a document with multiple lines","suites":["Limits","getTotalSizeOfLines"],"updatePoint":{"line":11,"column":77,"index":396},"line":11,"code":"    it('should compute the character count for a document with multiple lines', function () {\n      const count = this.Limits.getTotalSizeOfLines(['123', '4567']);\n      expect(count).to.equal(9);\n    });","file":"unit/js/Limits/LimitsTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should compute the character count for a document with a single line","suites":["Limits","getTotalSizeOfLines"],"updatePoint":{"line":15,"column":76,"index":600},"line":15,"code":"    it('should compute the character count for a document with a single line', function () {\n      const count = this.Limits.getTotalSizeOfLines(['123']);\n      expect(count).to.equal(4);\n    });","file":"unit/js/Limits/LimitsTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should compute the character count for an empty document","suites":["Limits","getTotalSizeOfLines"],"updatePoint":{"line":19,"column":64,"index":784},"line":19,"code":"    it('should compute the character count for an empty document', function () {\n      const count = this.Limits.getTotalSizeOfLines([]);\n      expect(count).to.equal(0);\n    });","file":"unit/js/Limits/LimitsTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return false when the estimated size is below the limit","suites":["Limits","docIsTooLarge","when the estimated size is below the limit"],"updatePoint":{"line":26,"column":72,"index":1092},"line":26,"code":"      it('should return false when the estimated size is below the limit', function () {\n        const result = this.Limits.docIsTooLarge(128, ['hello', 'world'], 1024);\n        expect(result).to.be.false;\n      });","file":"unit/js/Limits/LimitsTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return false when the estimated size is at the limit","suites":["Limits","docIsTooLarge","when the estimated size is at the limit"],"updatePoint":{"line":32,"column":69,"index":1383},"line":32,"code":"      it('should return false when the estimated size is at the limit', function () {\n        const result = this.Limits.docIsTooLarge(1024, ['hello', 'world'], 1024);\n        expect(result).to.be.false;\n      });","file":"unit/js/Limits/LimitsTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return false when the actual character count is below the limit","suites":["Limits","docIsTooLarge","when the estimated size is above the limit"],"updatePoint":{"line":38,"column":80,"index":1689},"line":38,"code":"      it('should return false when the actual character count is below the limit', function () {\n        const result = this.Limits.docIsTooLarge(2048, ['hello', 'world'], 1024);\n        expect(result).to.be.false;\n      });","file":"unit/js/Limits/LimitsTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return false when the actual character count is at the limit","suites":["Limits","docIsTooLarge","when the estimated size is above the limit"],"updatePoint":{"line":42,"column":77,"index":1911},"line":42,"code":"      it('should return false when the actual character count is at the limit', function () {\n        const result = this.Limits.docIsTooLarge(2048, ['x'.repeat(1023)], 1024);\n        expect(result).to.be.false;\n      });","file":"unit/js/Limits/LimitsTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return true when the actual character count is above the limit by 1","suites":["Limits","docIsTooLarge","when the estimated size is above the limit"],"updatePoint":{"line":46,"column":84,"index":2140},"line":46,"code":"      it('should return true when the actual character count is above the limit by 1', function () {\n        const count = this.Limits.docIsTooLarge(2048, ['x'.repeat(1024)], 1024);\n        expect(count).to.be.true;\n      });","file":"unit/js/Limits/LimitsTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return true when the actual character count is above the limit","suites":["Limits","docIsTooLarge","when the estimated size is above the limit"],"updatePoint":{"line":50,"column":79,"index":2361},"line":50,"code":"      it('should return true when the actual character count is above the limit', function () {\n        const count = this.Limits.docIsTooLarge(2048, ['x'.repeat(2000)], 1024);\n        expect(count).to.be.true;\n      });","file":"unit/js/Limits/LimitsTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return false when the actual character count is below the limit ","suites":["Limits","docIsTooLarge","when the document has many lines"],"updatePoint":{"line":56,"column":81,"index":2655},"line":56,"code":"      it('should return false when the actual character count is below the limit ', function () {\n        const count = this.Limits.docIsTooLarge(2048, '1234567890'.repeat(100).split('0'), 1024);\n        expect(count).to.be.false;\n      });","file":"unit/js/Limits/LimitsTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return true when the actual character count is above the limit","suites":["Limits","docIsTooLarge","when the document has many lines"],"updatePoint":{"line":60,"column":79,"index":2894},"line":60,"code":"      it('should return true when the actual character count is above the limit', function () {\n        const count = this.Limits.docIsTooLarge(2048, '1234567890'.repeat(2000).split('0'), 1024);\n        expect(count).to.be.true;\n      });","file":"unit/js/Limits/LimitsTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return true if the key does not exists","suites":["LockManager - checking the lock"],"updatePoint":{"line":51,"column":51,"index":1490},"line":51,"code":"  it('should return true if the key does not exists', function (done) {\n    existsStub.yields(null, '0');\n    return LockManager.checkLock(docId, (err, free) => {\n      if (err) return done(err);\n      free.should.equal(true);\n      return done();\n    });\n  });","file":"unit/js/LockManager/CheckingTheLock.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return false if the key does exists","suites":["LockManager - checking the lock"],"updatePoint":{"line":59,"column":55,"index":1756},"line":59,"code":"  return it('should return false if the key does exists', function (done) {\n    existsStub.yields(null, '1');\n    return LockManager.checkLock(docId, (err, free) => {\n      if (err) return done(err);\n      free.should.equal(false);\n      return done();\n    });\n  });","file":"unit/js/LockManager/CheckingTheLock.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should try to get the lock","suites":["LockManager - getting the lock","when the lock is not set"],"updatePoint":{"line":59,"column":34,"index":1921},"line":59,"code":"    it('should try to get the lock', function () {\n      return this.LockManager.tryLock.calledWith(this.doc_id).should.equal(true);\n    });","file":"unit/js/LockManager/getLockTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should only need to try once","suites":["LockManager - getting the lock","when the lock is not set"],"updatePoint":{"line":62,"column":36,"index":2064},"line":62,"code":"    it('should only need to try once', function () {\n      return this.LockManager.tryLock.callCount.should.equal(1);\n    });","file":"unit/js/LockManager/getLockTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return the callback with the lock value","suites":["LockManager - getting the lock","when the lock is not set"],"updatePoint":{"line":65,"column":61,"index":2215},"line":65,"code":"    return it('should return the callback with the lock value', function () {\n      return this.callback.calledWith(null, this.lockValue).should.equal(true);\n    });","file":"unit/js/LockManager/getLockTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call tryLock multiple times until free","suites":["LockManager - getting the lock","when the lock is initially set"],"updatePoint":{"line":92,"column":53,"index":3171},"line":92,"code":"    it('should call tryLock multiple times until free', function () {\n      return (this.LockManager.tryLock.callCount > 1).should.equal(true);\n    });","file":"unit/js/LockManager/getLockTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return the callback with the lock value","suites":["LockManager - getting the lock","when the lock is initially set"],"updatePoint":{"line":95,"column":61,"index":3331},"line":95,"code":"    return it('should return the callback with the lock value', function () {\n      return this.callback.calledWith(null, this.lockValue).should.equal(true);\n    });","file":"unit/js/LockManager/getLockTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return the callback with an error","suites":["LockManager - getting the lock","when the lock times out"],"updatePoint":{"line":109,"column":55,"index":3900},"line":109,"code":"    return it('should return the callback with an error', function () {\n      return this.callback.calledWith(sinon.match.instanceOf(Error).and(sinon.match.has('doc_id', this.doc_id))).should.equal(true);\n    });","file":"unit/js/LockManager/getLockTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should clear the data from redis","suites":["LockManager - releasing the lock","when the lock is current"],"updatePoint":{"line":71,"column":40,"index":2084},"line":71,"code":"    it('should clear the data from redis', function () {\n      return this.client.eval.calledWith(this.LockManager.unlockScript, 1, `Blocking:${docId}`, this.lockValue).should.equal(true);\n    });","file":"unit/js/LockManager/ReleasingTheLock.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback","suites":["LockManager - releasing the lock","when the lock is current"],"updatePoint":{"line":74,"column":39,"index":2280},"line":74,"code":"    return it('should call the callback', function () {\n      return this.callback.called.should.equal(true);\n    });","file":"unit/js/LockManager/ReleasingTheLock.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return an error if the lock has expired","suites":["LockManager - releasing the lock","when the lock has expired"],"updatePoint":{"line":83,"column":61,"index":2660},"line":83,"code":"    return it('should return an error if the lock has expired', function () {\n      return this.callback.calledWith(sinon.match.instanceOf(Error)).should.equal(true);\n    });","file":"unit/js/LockManager/ReleasingTheLock.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should set the lock key with an expiry if it is not set","suites":["LockManager - trying the lock","when the lock is not set"],"updatePoint":{"line":70,"column":63,"index":2183},"line":70,"code":"    it('should set the lock key with an expiry if it is not set', function () {\n      return this.set.calledWith(`Blocking:${this.doc_id}`, this.lockValue, 'EX', 30, 'NX').should.equal(true);\n    });","file":"unit/js/LockManager/tryLockTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return the callback with true and the lock value","suites":["LockManager - trying the lock","when the lock is not set"],"updatePoint":{"line":73,"column":70,"index":2390},"line":73,"code":"    return it('should return the callback with true and the lock value', function () {\n      return this.callback.calledWith(null, true, this.lockValue).should.equal(true);\n    });","file":"unit/js/LockManager/tryLockTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return the callback with false","suites":["LockManager - trying the lock","when the lock is already set"],"updatePoint":{"line":82,"column":52,"index":2764},"line":82,"code":"    return it('should return the callback with false', function () {\n      return this.callback.calledWith(null, false).should.equal(true);\n    });","file":"unit/js/LockManager/tryLockTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should set the lock key with an expiry if it is not set","suites":["LockManager - trying the lock","when it takes a long time for redis to set the lock","in all cases"],"updatePoint":{"line":104,"column":65,"index":3609},"line":104,"code":"      it('should set the lock key with an expiry if it is not set', function () {\n        return this.set.calledWith(`Blocking:${this.doc_id}`, this.lockValue, 'EX', 30, 'NX').should.equal(true);\n      });","file":"unit/js/LockManager/tryLockTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should try to release the lock","suites":["LockManager - trying the lock","when it takes a long time for redis to set the lock","in all cases"],"updatePoint":{"line":107,"column":47,"index":3797},"line":107,"code":"      return it('should try to release the lock', function () {\n        return this.LockManager.releaseLock.calledWith(this.doc_id, this.lockValue).should.equal(true);\n      });","file":"unit/js/LockManager/tryLockTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return the callback with false","suites":["LockManager - trying the lock","when it takes a long time for redis to set the lock","if the lock is released successfully"],"updatePoint":{"line":116,"column":54,"index":4242},"line":116,"code":"      return it('should return the callback with false', function () {\n        return this.callback.calledWith(null, false).should.equal(true);\n      });","file":"unit/js/LockManager/tryLockTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return the callback with an error","suites":["LockManager - trying the lock","when it takes a long time for redis to set the lock","if the lock has already timed out"],"updatePoint":{"line":125,"column":57,"index":4703},"line":125,"code":"      return it('should return the callback with an error', function () {\n        return this.callback.calledWith(sinon.match.instanceOf(Error)).should.equal(true);\n      });","file":"unit/js/LockManager/tryLockTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the web api","suites":["PersistenceManager","getDoc","with a successful response from the web api"],"updatePoint":{"line":61,"column":33,"index":1970},"line":61,"code":"      it('should call the web api', function () {\n        this.request.calledWith({\n          url: `${this.url}/project/${this.project_id}/doc/${this.doc_id}`,\n          method: 'GET',\n          headers: {\n            accept: 'application/json'\n          },\n          auth: {\n            user: this.user,\n            pass: this.pass,\n            sendImmediately: true\n          },\n          jar: false,\n          timeout: 5000\n        }).should.equal(true);\n      });","file":"unit/js/PersistenceManager/PersistenceManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback with the doc lines, version and ranges","suites":["PersistenceManager","getDoc","with a successful response from the web api"],"updatePoint":{"line":77,"column":73,"index":2478},"line":77,"code":"      it('should call the callback with the doc lines, version and ranges', function () {\n        this.callback.calledWith(null, this.lines, this.version, this.ranges, this.pathname, this.projectHistoryId).should.equal(true);\n      });","file":"unit/js/PersistenceManager/PersistenceManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should time the execution","suites":["PersistenceManager","getDoc","with a successful response from the web api"],"updatePoint":{"line":80,"column":35,"index":2676},"line":80,"code":"      it('should time the execution', function () {\n        this.Metrics.Timer.prototype.done.called.should.equal(true);\n      });","file":"unit/js/PersistenceManager/PersistenceManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should increment the metric","suites":["PersistenceManager","getDoc","with a successful response from the web api"],"updatePoint":{"line":83,"column":37,"index":2809},"line":83,"code":"      it('should increment the metric', function () {\n        this.Metrics.inc.calledWith('getDoc', 1, {\n          status: 200\n        }).should.equal(true);\n      });","file":"unit/js/PersistenceManager/PersistenceManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the web api with a peek param","suites":["PersistenceManager","getDoc","with the peek option"],"updatePoint":{"line":98,"column":51,"index":3318},"line":98,"code":"      it('should call the web api with a peek param', function () {\n        this.request.calledWith({\n          url: `${this.url}/project/${this.project_id}/doc/${this.doc_id}`,\n          qs: {\n            peek: 'true'\n          },\n          method: 'GET',\n          headers: {\n            accept: 'application/json'\n          },\n          auth: {\n            user: this.user,\n            pass: this.pass,\n            sendImmediately: true\n          },\n          jar: false,\n          timeout: 5000\n        }).should.equal(true);\n      });","file":"unit/js/PersistenceManager/PersistenceManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return a generic connection error","suites":["PersistenceManager","getDoc","when request returns an error"],"updatePoint":{"line":125,"column":50,"index":4188},"line":125,"code":"      it('should return a generic connection error', function () {\n        this.callback.calledWith(sinon.match.instanceOf(Error).and(sinon.match.has('message', 'error connecting to web API'))).should.equal(true);\n      });","file":"unit/js/PersistenceManager/PersistenceManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should time the execution","suites":["PersistenceManager","getDoc","when request returns an error"],"updatePoint":{"line":128,"column":35,"index":4397},"line":128,"code":"      it('should time the execution', function () {\n        this.Metrics.Timer.prototype.done.called.should.equal(true);\n      });","file":"unit/js/PersistenceManager/PersistenceManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should increment the metric","suites":["PersistenceManager","getDoc","when request returns an error"],"updatePoint":{"line":131,"column":37,"index":4530},"line":131,"code":"      it('should increment the metric', function () {\n        this.Metrics.inc.calledWith('getDoc', 1, {\n          status: 'EOOPS'\n        }).should.equal(true);\n      });","file":"unit/js/PersistenceManager/PersistenceManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return a NotFoundError","suites":["PersistenceManager","getDoc","when the request returns 404"],"updatePoint":{"line":144,"column":39,"index":4984},"line":144,"code":"      it('should return a NotFoundError', function () {\n        this.callback.calledWith(sinon.match.instanceOf(Errors.NotFoundError)).should.equal(true);\n      });","file":"unit/js/PersistenceManager/PersistenceManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should time the execution","suites":["PersistenceManager","getDoc","when the request returns 404"],"updatePoint":{"line":147,"column":35,"index":5145},"line":147,"code":"      it('should time the execution', function () {\n        this.Metrics.Timer.prototype.done.called.should.equal(true);\n      });","file":"unit/js/PersistenceManager/PersistenceManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should increment the metric","suites":["PersistenceManager","getDoc","when the request returns 404"],"updatePoint":{"line":150,"column":37,"index":5278},"line":150,"code":"      it('should increment the metric', function () {\n        this.Metrics.inc.calledWith('getDoc', 1, {\n          status: 404\n        }).should.equal(true);\n      });","file":"unit/js/PersistenceManager/PersistenceManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return a FileTooLargeError","suites":["PersistenceManager","getDoc","when the request returns 413"],"updatePoint":{"line":163,"column":43,"index":5732},"line":163,"code":"      it('should return a FileTooLargeError', function () {\n        this.callback.calledWith(sinon.match.instanceOf(Errors.FileTooLargeError)).should.equal(true);\n      });","file":"unit/js/PersistenceManager/PersistenceManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should time the execution","suites":["PersistenceManager","getDoc","when the request returns 413"],"updatePoint":{"line":166,"column":35,"index":5897},"line":166,"code":"      it('should time the execution', function () {\n        this.Metrics.Timer.prototype.done.called.should.equal(true);\n      });","file":"unit/js/PersistenceManager/PersistenceManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should increment the metric","suites":["PersistenceManager","getDoc","when the request returns 413"],"updatePoint":{"line":169,"column":37,"index":6030},"line":169,"code":"      it('should increment the metric', function () {\n        this.Metrics.inc.calledWith('getDoc', 1, {\n          status: 413\n        }).should.equal(true);\n      });","file":"unit/js/PersistenceManager/PersistenceManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return an error","suites":["PersistenceManager","getDoc","when the request returns an error status code"],"updatePoint":{"line":182,"column":32,"index":6490},"line":182,"code":"      it('should return an error', function () {\n        this.callback.calledWith(sinon.match.instanceOf(Error)).should.equal(true);\n      });","file":"unit/js/PersistenceManager/PersistenceManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should time the execution","suites":["PersistenceManager","getDoc","when the request returns an error status code"],"updatePoint":{"line":185,"column":35,"index":6636},"line":185,"code":"      it('should time the execution', function () {\n        this.Metrics.Timer.prototype.done.called.should.equal(true);\n      });","file":"unit/js/PersistenceManager/PersistenceManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should increment the metric","suites":["PersistenceManager","getDoc","when the request returns an error status code"],"updatePoint":{"line":188,"column":37,"index":6769},"line":188,"code":"      it('should increment the metric', function () {\n        this.Metrics.inc.calledWith('getDoc', 1, {\n          status: 500\n        }).should.equal(true);\n      });","file":"unit/js/PersistenceManager/PersistenceManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return and error","suites":["PersistenceManager","getDoc","when request returns an doc without lines"],"updatePoint":{"line":202,"column":33,"index":7295},"line":202,"code":"      it('should return and error', function () {\n        this.callback.calledWith(sinon.match.instanceOf(Error)).should.equal(true);\n      });","file":"unit/js/PersistenceManager/PersistenceManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return and error","suites":["PersistenceManager","getDoc","when request returns an doc without a version"],"updatePoint":{"line":214,"column":33,"index":7807},"line":214,"code":"      it('should return and error', function () {\n        this.callback.calledWith(sinon.match.instanceOf(Error)).should.equal(true);\n      });","file":"unit/js/PersistenceManager/PersistenceManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return and error","suites":["PersistenceManager","getDoc","when request returns an doc without a pathname"],"updatePoint":{"line":226,"column":33,"index":8321},"line":226,"code":"      it('should return and error', function () {\n        this.callback.calledWith(sinon.match.instanceOf(Error)).should.equal(true);\n      });","file":"unit/js/PersistenceManager/PersistenceManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the web api","suites":["PersistenceManager","setDoc","with a successful response from the web api"],"updatePoint":{"line":239,"column":33,"index":8876},"line":239,"code":"      it('should call the web api', function () {\n        this.request.calledWith({\n          url: `${this.url}/project/${this.project_id}/doc/${this.doc_id}`,\n          json: {\n            lines: this.lines,\n            version: this.version,\n            ranges: this.ranges,\n            lastUpdatedAt: this.lastUpdatedAt,\n            lastUpdatedBy: this.lastUpdatedBy\n          },\n          method: 'POST',\n          auth: {\n            user: this.user,\n            pass: this.pass,\n            sendImmediately: true\n          },\n          jar: false,\n          timeout: 5000\n        }).should.equal(true);\n      });","file":"unit/js/PersistenceManager/PersistenceManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback without error","suites":["PersistenceManager","setDoc","with a successful response from the web api"],"updatePoint":{"line":259,"column":48,"index":9510},"line":259,"code":"      it('should call the callback without error', function () {\n        this.callback.calledWith(null).should.equal(true);\n      });","file":"unit/js/PersistenceManager/PersistenceManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should time the execution","suites":["PersistenceManager","setDoc","with a successful response from the web api"],"updatePoint":{"line":262,"column":35,"index":9631},"line":262,"code":"      it('should time the execution', function () {\n        this.Metrics.Timer.prototype.done.called.should.equal(true);\n      });","file":"unit/js/PersistenceManager/PersistenceManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should increment the metric","suites":["PersistenceManager","setDoc","with a successful response from the web api"],"updatePoint":{"line":265,"column":37,"index":9764},"line":265,"code":"      it('should increment the metric', function () {\n        this.Metrics.inc.calledWith('setDoc', 1, {\n          status: 200\n        }).should.equal(true);\n      });","file":"unit/js/PersistenceManager/PersistenceManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return a generic connection error","suites":["PersistenceManager","setDoc","when request returns an error"],"updatePoint":{"line":278,"column":50,"index":10355},"line":278,"code":"      it('should return a generic connection error', function () {\n        this.callback.calledWith(sinon.match.instanceOf(Error).and(sinon.match.has('message', 'error connecting to web API'))).should.equal(true);\n      });","file":"unit/js/PersistenceManager/PersistenceManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should time the execution","suites":["PersistenceManager","setDoc","when request returns an error"],"updatePoint":{"line":281,"column":35,"index":10564},"line":281,"code":"      it('should time the execution', function () {\n        this.Metrics.Timer.prototype.done.called.should.equal(true);\n      });","file":"unit/js/PersistenceManager/PersistenceManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should increment the metric","suites":["PersistenceManager","setDoc","when request returns an error"],"updatePoint":{"line":284,"column":37,"index":10697},"line":284,"code":"      it('should increment the metric', function () {\n        this.Metrics.inc.calledWith('setDoc', 1, {\n          status: 'EOOPS'\n        }).should.equal(true);\n      });","file":"unit/js/PersistenceManager/PersistenceManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return a NotFoundError","suites":["PersistenceManager","setDoc","when the request returns 404"],"updatePoint":{"line":297,"column":39,"index":11230},"line":297,"code":"      it('should return a NotFoundError', function () {\n        this.callback.calledWith(sinon.match.instanceOf(Errors.NotFoundError)).should.equal(true);\n      });","file":"unit/js/PersistenceManager/PersistenceManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should time the execution","suites":["PersistenceManager","setDoc","when the request returns 404"],"updatePoint":{"line":300,"column":35,"index":11391},"line":300,"code":"      it('should time the execution', function () {\n        this.Metrics.Timer.prototype.done.called.should.equal(true);\n      });","file":"unit/js/PersistenceManager/PersistenceManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should increment the metric","suites":["PersistenceManager","setDoc","when the request returns 404"],"updatePoint":{"line":303,"column":37,"index":11524},"line":303,"code":"      it('should increment the metric', function () {\n        this.Metrics.inc.calledWith('setDoc', 1, {\n          status: 404\n        }).should.equal(true);\n      });","file":"unit/js/PersistenceManager/PersistenceManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return a FileTooLargeError","suites":["PersistenceManager","setDoc","when the request returns 413"],"updatePoint":{"line":316,"column":43,"index":12057},"line":316,"code":"      it('should return a FileTooLargeError', function () {\n        this.callback.calledWith(sinon.match.instanceOf(Errors.FileTooLargeError)).should.equal(true);\n      });","file":"unit/js/PersistenceManager/PersistenceManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should time the execution","suites":["PersistenceManager","setDoc","when the request returns 413"],"updatePoint":{"line":319,"column":35,"index":12222},"line":319,"code":"      it('should time the execution', function () {\n        this.Metrics.Timer.prototype.done.called.should.equal(true);\n      });","file":"unit/js/PersistenceManager/PersistenceManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should increment the metric","suites":["PersistenceManager","setDoc","when the request returns 413"],"updatePoint":{"line":322,"column":37,"index":12355},"line":322,"code":"      it('should increment the metric', function () {\n        this.Metrics.inc.calledWith('setDoc', 1, {\n          status: 413\n        }).should.equal(true);\n      });","file":"unit/js/PersistenceManager/PersistenceManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return an error","suites":["PersistenceManager","setDoc","when the request returns an error status code"],"updatePoint":{"line":335,"column":32,"index":12894},"line":335,"code":"      it('should return an error', function () {\n        this.callback.calledWith(sinon.match.instanceOf(Error)).should.equal(true);\n      });","file":"unit/js/PersistenceManager/PersistenceManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should time the execution","suites":["PersistenceManager","setDoc","when the request returns an error status code"],"updatePoint":{"line":338,"column":35,"index":13040},"line":338,"code":"      it('should time the execution', function () {\n        this.Metrics.Timer.prototype.done.called.should.equal(true);\n      });","file":"unit/js/PersistenceManager/PersistenceManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should increment the metric","suites":["PersistenceManager","setDoc","when the request returns an error status code"],"updatePoint":{"line":341,"column":37,"index":13173},"line":341,"code":"      it('should increment the metric', function () {\n        this.Metrics.inc.calledWith('setDoc', 1, {\n          status: 500\n        }).should.equal(true);\n      });","file":"unit/js/PersistenceManager/PersistenceManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should queue an update","suites":["ProjectHistoryRedisManager","queueOps"],"updatePoint":{"line":63,"column":30,"index":1996},"line":63,"code":"    it('should queue an update', function () {\n      this.multi.rpush.calledWithExactly(`ProjectHistory:Ops:${this.project_id}`, this.ops[0], this.ops[1]).should.equal(true);\n    });","file":"unit/js/ProjectHistoryRedisManager/ProjectHistoryRedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should set the queue timestamp if not present","suites":["ProjectHistoryRedisManager","queueOps"],"updatePoint":{"line":66,"column":53,"index":2202},"line":66,"code":"    it('should set the queue timestamp if not present', function () {\n      this.multi.setnx.calledWithExactly(`ProjectHistory:FirstOpTimestamp:${this.project_id}`, Date.now()).should.equal(true);\n    });","file":"unit/js/ProjectHistoryRedisManager/ProjectHistoryRedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should queue an update","suites":["ProjectHistoryRedisManager","queueRenameEntity"],"updatePoint":{"line":81,"column":30,"index":2898},"line":81,"code":"    it('should queue an update', function () {\n      const update = {\n        pathname: this.pathname,\n        new_pathname: this.newPathname,\n        meta: {\n          user_id: this.user_id,\n          ts: new Date(),\n          source: this.source\n        },\n        version: this.version,\n        projectHistoryId: this.projectHistoryId,\n        file: this.file_id\n      };\n      this.ProjectHistoryRedisManager.queueOps.calledWithExactly(this.project_id, JSON.stringify(update), this.callback).should.equal(true);\n    });","file":"unit/js/ProjectHistoryRedisManager/ProjectHistoryRedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should queue an update","suites":["ProjectHistoryRedisManager","queueAddEntity"],"updatePoint":{"line":110,"column":30,"index":4020},"line":110,"code":"    it('should queue an update', function () {\n      const update = {\n        pathname: this.pathname,\n        docLines: this.docLines,\n        url: this.url,\n        meta: {\n          user_id: this.user_id,\n          ts: new Date(),\n          source: this.source\n        },\n        version: this.version,\n        projectHistoryId: this.projectHistoryId,\n        doc: this.doc_id\n      };\n      this.ProjectHistoryRedisManager.queueOps.calledWithExactly(this.project_id, JSON.stringify(update), this.callback).should.equal(true);\n    });","file":"unit/js/ProjectHistoryRedisManager/ProjectHistoryRedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should queue an update","suites":["ProjectHistoryRedisManager","queueAddEntity","queueResyncProjectStructure"],"updatePoint":{"line":127,"column":32,"index":4618},"line":127,"code":"      it('should queue an update', function () {});","file":"unit/js/ProjectHistoryRedisManager/ProjectHistoryRedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should check if the doc is too large","suites":["ProjectHistoryRedisManager","queueAddEntity","queueResyncDocContent","with a good doc"],"updatePoint":{"line":153,"column":48,"index":5566},"line":153,"code":"        it('should check if the doc is too large', function () {\n          this.Limits.docIsTooLarge.calledWith(JSON.stringify(this.update).length, this.lines, this.settings.max_doc_length).should.equal(true);\n        });","file":"unit/js/ProjectHistoryRedisManager/ProjectHistoryRedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should queue an update","suites":["ProjectHistoryRedisManager","queueAddEntity","queueResyncDocContent","with a good doc"],"updatePoint":{"line":156,"column":34,"index":5774},"line":156,"code":"        it('should queue an update', function () {\n          this.ProjectHistoryRedisManager.queueOps.calledWithExactly(this.project_id, JSON.stringify(this.update), this.callback).should.equal(true);\n        });","file":"unit/js/ProjectHistoryRedisManager/ProjectHistoryRedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not queue an update if the doc is too large","suites":["ProjectHistoryRedisManager","queueAddEntity","queueResyncDocContent","with a doc that is too large"],"updatePoint":{"line":165,"column":62,"index":6356},"line":165,"code":"        it('should not queue an update if the doc is too large', function () {\n          this.ProjectHistoryRedisManager.queueOps.called.should.equal(false);\n          this.callback.calledWith(sinon.match.instanceOf(Error)).should.equal(true);\n        });","file":"unit/js/ProjectHistoryRedisManager/ProjectHistoryRedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should get the doc ids in the project","suites":["ProjectManager - flushAndDeleteProject","successfully"],"updatePoint":{"line":54,"column":45,"index":2031},"line":54,"code":"    it('should get the doc ids in the project', function () {\n      return this.RedisManager.getDocIdsInProject.calledWith(this.project_id).should.equal(true);\n    });","file":"unit/js/ProjectManager/flushAndDeleteProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should delete each doc in the project","suites":["ProjectManager - flushAndDeleteProject","successfully"],"updatePoint":{"line":57,"column":45,"index":2199},"line":57,"code":"    it('should delete each doc in the project', function () {\n      return Array.from(this.doc_ids).map(docId => this.DocumentManager.flushAndDeleteDocWithLock.calledWith(this.project_id, docId, {}).should.equal(true));\n    });","file":"unit/js/ProjectManager/flushAndDeleteProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should flush project history","suites":["ProjectManager - flushAndDeleteProject","successfully"],"updatePoint":{"line":60,"column":36,"index":2418},"line":60,"code":"    it('should flush project history', function () {\n      return this.HistoryManager.flushProjectChanges.calledWith(this.project_id, {}).should.equal(true);\n    });","file":"unit/js/ProjectManager/flushAndDeleteProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback without error","suites":["ProjectManager - flushAndDeleteProject","successfully"],"updatePoint":{"line":63,"column":46,"index":2594},"line":63,"code":"    it('should call the callback without error', function () {\n      return this.callback.calledWith(null).should.equal(true);\n    });","file":"unit/js/ProjectManager/flushAndDeleteProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should time the execution","suites":["ProjectManager - flushAndDeleteProject","successfully"],"updatePoint":{"line":66,"column":40,"index":2723},"line":66,"code":"    return it('should time the execution', function () {\n      return this.Metrics.Timer.prototype.done.called.should.equal(true);\n    });","file":"unit/js/ProjectManager/flushAndDeleteProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should still flush each doc in the project","suites":["ProjectManager - flushAndDeleteProject","when a doc errors"],"updatePoint":{"line":86,"column":50,"index":3576},"line":86,"code":"    it('should still flush each doc in the project', function () {\n      return Array.from(this.doc_ids).map(docId => this.DocumentManager.flushAndDeleteDocWithLock.calledWith(this.project_id, docId, {}).should.equal(true));\n    });","file":"unit/js/ProjectManager/flushAndDeleteProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should still flush project history","suites":["ProjectManager - flushAndDeleteProject","when a doc errors"],"updatePoint":{"line":89,"column":42,"index":3801},"line":89,"code":"    it('should still flush project history', function () {\n      return this.HistoryManager.flushProjectChanges.calledWith(this.project_id, {}).should.equal(true);\n    });","file":"unit/js/ProjectManager/flushAndDeleteProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should record the error","suites":["ProjectManager - flushAndDeleteProject","when a doc errors"],"updatePoint":{"line":92,"column":31,"index":3962},"line":92,"code":"    it('should record the error', function () {\n      return this.logger.error.calledWith({\n        err: this.error,\n        projectId: this.project_id,\n        docId: 'doc-id-1'\n      }, 'error deleting doc').should.equal(true);\n    });","file":"unit/js/ProjectManager/flushAndDeleteProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback with an error","suites":["ProjectManager - flushAndDeleteProject","when a doc errors"],"updatePoint":{"line":99,"column":46,"index":4215},"line":99,"code":"    it('should call the callback with an error', function () {\n      return this.callback.calledWith(sinon.match.instanceOf(Error)).should.equal(true);\n    });","file":"unit/js/ProjectManager/flushAndDeleteProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should time the execution","suites":["ProjectManager - flushAndDeleteProject","when a doc errors"],"updatePoint":{"line":102,"column":40,"index":4369},"line":102,"code":"    return it('should time the execution', function () {\n      return this.Metrics.Timer.prototype.done.called.should.equal(true);\n    });","file":"unit/js/ProjectManager/flushAndDeleteProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should get the doc ids in the project","suites":["ProjectManager - flushProject","successfully"],"updatePoint":{"line":53,"column":45,"index":1996},"line":53,"code":"    it('should get the doc ids in the project', function () {\n      return this.RedisManager.getDocIdsInProject.calledWith(this.project_id).should.equal(true);\n    });","file":"unit/js/ProjectManager/flushProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should flush each doc in the project","suites":["ProjectManager - flushProject","successfully"],"updatePoint":{"line":56,"column":44,"index":2163},"line":56,"code":"    it('should flush each doc in the project', function () {\n      return Array.from(this.doc_ids).map(docId => this.DocumentManager.flushDocIfLoadedWithLock.calledWith(this.project_id, docId).should.equal(true));\n    });","file":"unit/js/ProjectManager/flushProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback without error","suites":["ProjectManager - flushProject","successfully"],"updatePoint":{"line":59,"column":46,"index":2387},"line":59,"code":"    it('should call the callback without error', function () {\n      return this.callback.calledWith(null).should.equal(true);\n    });","file":"unit/js/ProjectManager/flushProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should time the execution","suites":["ProjectManager - flushProject","successfully"],"updatePoint":{"line":62,"column":40,"index":2516},"line":62,"code":"    return it('should time the execution', function () {\n      return this.Metrics.Timer.prototype.done.called.should.equal(true);\n    });","file":"unit/js/ProjectManager/flushProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should still flush each doc in the project","suites":["ProjectManager - flushProject","when a doc errors"],"updatePoint":{"line":85,"column":50,"index":3425},"line":85,"code":"    it('should still flush each doc in the project', function () {\n      return Array.from(this.doc_ids).map(docId => this.DocumentManager.flushDocIfLoadedWithLock.calledWith(this.project_id, docId).should.equal(true));\n    });","file":"unit/js/ProjectManager/flushProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should record the error","suites":["ProjectManager - flushProject","when a doc errors"],"updatePoint":{"line":88,"column":31,"index":3634},"line":88,"code":"    it('should record the error', function () {\n      return this.logger.error.calledWith({\n        err: this.error,\n        projectId: this.project_id,\n        docId: 'doc-id-1'\n      }, 'error flushing doc').should.equal(true);\n    });","file":"unit/js/ProjectManager/flushProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback with an error","suites":["ProjectManager - flushProject","when a doc errors"],"updatePoint":{"line":95,"column":46,"index":3887},"line":95,"code":"    it('should call the callback with an error', function () {\n      return this.callback.calledWith(sinon.match.instanceOf(Error)).should.equal(true);\n    });","file":"unit/js/ProjectManager/flushProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should time the execution","suites":["ProjectManager - flushProject","when a doc errors"],"updatePoint":{"line":98,"column":40,"index":4041},"line":98,"code":"    return it('should time the execution', function () {\n      return this.Metrics.Timer.prototype.done.called.should.equal(true);\n    });","file":"unit/js/ProjectManager/flushProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should check the project state","suites":["ProjectManager - getProjectDocsAndFlushIfOld","successfully"],"updatePoint":{"line":72,"column":38,"index":3070},"line":72,"code":"    it('should check the project state', function () {\n      return this.RedisManager.checkOrSetProjectState.calledWith(this.project_id, this.projectStateHash).should.equal(true);\n    });","file":"unit/js/ProjectManager/getProjectDocsTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should get the doc ids in the project","suites":["ProjectManager - getProjectDocsAndFlushIfOld","successfully"],"updatePoint":{"line":75,"column":45,"index":3265},"line":75,"code":"    it('should get the doc ids in the project', function () {\n      return this.RedisManager.getDocIdsInProject.calledWith(this.project_id).should.equal(true);\n    });","file":"unit/js/ProjectManager/getProjectDocsTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback without error","suites":["ProjectManager - getProjectDocsAndFlushIfOld","successfully"],"updatePoint":{"line":78,"column":46,"index":3434},"line":78,"code":"    it('should call the callback without error', function () {\n      return this.callback.calledWith(null, this.docs).should.equal(true);\n    });","file":"unit/js/ProjectManager/getProjectDocsTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should time the execution","suites":["ProjectManager - getProjectDocsAndFlushIfOld","successfully"],"updatePoint":{"line":81,"column":40,"index":3574},"line":81,"code":"    return it('should time the execution', function () {\n      return this.Metrics.Timer.prototype.done.called.should.equal(true);\n    });","file":"unit/js/ProjectManager/getProjectDocsTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should check the project state","suites":["ProjectManager - getProjectDocsAndFlushIfOld","when the state does not match"],"updatePoint":{"line":94,"column":38,"index":4177},"line":94,"code":"    it('should check the project state', function () {\n      return this.RedisManager.checkOrSetProjectState.calledWith(this.project_id, this.projectStateHash).should.equal(true);\n    });","file":"unit/js/ProjectManager/getProjectDocsTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback with an error","suites":["ProjectManager - getProjectDocsAndFlushIfOld","when the state does not match"],"updatePoint":{"line":97,"column":46,"index":4373},"line":97,"code":"    it('should call the callback with an error', function () {\n      return this.callback.calledWith(sinon.match.instanceOf(Errors.ProjectStateChangedError)).should.equal(true);\n    });","file":"unit/js/ProjectManager/getProjectDocsTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should time the execution","suites":["ProjectManager - getProjectDocsAndFlushIfOld","when the state does not match"],"updatePoint":{"line":100,"column":40,"index":4553},"line":100,"code":"    return it('should time the execution', function () {\n      return this.Metrics.Timer.prototype.done.called.should.equal(true);\n    });","file":"unit/js/ProjectManager/getProjectDocsTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should record the error","suites":["ProjectManager - getProjectDocsAndFlushIfOld","when a doc errors"],"updatePoint":{"line":117,"column":31,"index":5613},"line":117,"code":"    it('should record the error', function () {\n      return this.logger.error.calledWith({\n        err: this.error,\n        projectId: this.project_id,\n        docId: 'doc-id-2'\n      }, 'error getting project doc lines in getProjectDocsAndFlushIfOld').should.equal(true);\n    });","file":"unit/js/ProjectManager/getProjectDocsTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback with an error","suites":["ProjectManager - getProjectDocsAndFlushIfOld","when a doc errors"],"updatePoint":{"line":124,"column":46,"index":5910},"line":124,"code":"    it('should call the callback with an error', function () {\n      return this.callback.calledWith(sinon.match.instanceOf(Error)).should.equal(true);\n    });","file":"unit/js/ProjectManager/getProjectDocsTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should time the execution","suites":["ProjectManager - getProjectDocsAndFlushIfOld","when a doc errors"],"updatePoint":{"line":127,"column":40,"index":6064},"line":127,"code":"    return it('should time the execution', function () {\n      return this.Metrics.Timer.prototype.done.called.should.equal(true);\n    });","file":"unit/js/ProjectManager/getProjectDocsTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should clear the project state","suites":["ProjectManager - getProjectDocsAndFlushIfOld","clearing the project state with clearProjectState"],"updatePoint":{"line":139,"column":38,"index":6545},"line":139,"code":"    it('should clear the project state', function () {\n      return this.RedisManager.clearProjectState.calledWith(this.project_id).should.equal(true);\n    });","file":"unit/js/ProjectManager/getProjectDocsTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback","suites":["ProjectManager - getProjectDocsAndFlushIfOld","clearing the project state with clearProjectState"],"updatePoint":{"line":142,"column":39,"index":6706},"line":142,"code":"    return it('should call the callback', function () {\n      return this.callback.called.should.equal(true);\n    });","file":"unit/js/ProjectManager/getProjectDocsTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should rename the docs in the updates","suites":["ProjectManager","updateProjectWithLocks","rename operations","successfully"],"updatePoint":{"line":66,"column":49,"index":2282},"line":66,"code":"        it('should rename the docs in the updates', function () {\n          const firstDocUpdateWithVersion = _.extend({}, this.firstDocUpdate, {\n            version: `${this.version}.0`\n          });\n          const secondDocUpdateWithVersion = _.extend({}, this.secondDocUpdate, {\n            version: `${this.version}.1`\n          });\n          this.DocumentManager.renameDocWithLock.calledWith(this.project_id, this.firstDocUpdate.id, this.user_id, firstDocUpdateWithVersion, this.projectHistoryId).should.equal(true);\n          this.DocumentManager.renameDocWithLock.calledWith(this.project_id, this.secondDocUpdate.id, this.user_id, secondDocUpdateWithVersion, this.projectHistoryId).should.equal(true);\n        });","file":"unit/js/ProjectManager/updateProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should rename the files in the updates","suites":["ProjectManager","updateProjectWithLocks","rename operations","successfully"],"updatePoint":{"line":76,"column":50,"index":3005},"line":76,"code":"        it('should rename the files in the updates', function () {\n          const firstFileUpdateWithVersion = _.extend({}, this.firstFileUpdate, {\n            version: `${this.version}.2`\n          });\n          this.ProjectHistoryRedisManager.queueRenameEntity.calledWith(this.project_id, this.projectHistoryId, 'file', this.firstFileUpdate.id, this.user_id, firstFileUpdateWithVersion, this.source).should.equal(true);\n        });","file":"unit/js/ProjectManager/updateProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not flush the history","suites":["ProjectManager","updateProjectWithLocks","rename operations","successfully"],"updatePoint":{"line":82,"column":40,"index":3430},"line":82,"code":"        it('should not flush the history', function () {\n          this.HistoryManager.flushProjectChangesAsync.calledWith(this.project_id).should.equal(false);\n        });","file":"unit/js/ProjectManager/updateProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback","suites":["ProjectManager","updateProjectWithLocks","rename operations","successfully"],"updatePoint":{"line":85,"column":36,"index":3599},"line":85,"code":"        it('should call the callback', function () {\n          this.callback.called.should.equal(true);\n        });","file":"unit/js/ProjectManager/updateProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback with the error","suites":["ProjectManager","updateProjectWithLocks","rename operations","when renaming a doc fails"],"updatePoint":{"line":95,"column":51,"index":4119},"line":95,"code":"        it('should call the callback with the error', function () {\n          this.callback.calledWith(this.error).should.equal(true);\n        });","file":"unit/js/ProjectManager/updateProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback with the error","suites":["ProjectManager","updateProjectWithLocks","rename operations","when renaming a file fails"],"updatePoint":{"line":105,"column":51,"index":4667},"line":105,"code":"        it('should call the callback with the error', function () {\n          this.callback.calledWith(this.error).should.equal(true);\n        });","file":"unit/js/ProjectManager/updateProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should flush the history","suites":["ProjectManager","updateProjectWithLocks","rename operations","with enough ops to flush"],"updatePoint":{"line":114,"column":36,"index":5142},"line":114,"code":"        it('should flush the history', function () {\n          this.HistoryManager.flushProjectChangesAsync.calledWith(this.project_id).should.equal(true);\n        });","file":"unit/js/ProjectManager/updateProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should add the docs in the updates","suites":["ProjectManager","updateProjectWithLocks","add operations","successfully"],"updatePoint":{"line":147,"column":46,"index":6281},"line":147,"code":"        it('should add the docs in the updates', function () {\n          const firstDocUpdateWithVersion = _.extend({}, this.firstDocUpdate, {\n            version: `${this.version}.0`\n          });\n          const secondDocUpdateWithVersion = _.extend({}, this.secondDocUpdate, {\n            version: `${this.version}.1`\n          });\n          this.ProjectHistoryRedisManager.queueAddEntity.getCall(0).calledWith(this.project_id, this.projectHistoryId, 'doc', this.firstDocUpdate.id, this.user_id, firstDocUpdateWithVersion, this.source).should.equal(true);\n          this.ProjectHistoryRedisManager.queueAddEntity.getCall(1).calledWith(this.project_id, this.projectHistoryId, 'doc', this.secondDocUpdate.id, this.user_id, secondDocUpdateWithVersion, this.source).should.equal(true);\n        });","file":"unit/js/ProjectManager/updateProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should add the files in the updates","suites":["ProjectManager","updateProjectWithLocks","add operations","successfully"],"updatePoint":{"line":157,"column":47,"index":7079},"line":157,"code":"        it('should add the files in the updates', function () {\n          const firstFileUpdateWithVersion = _.extend({}, this.firstFileUpdate, {\n            version: `${this.version}.2`\n          });\n          const secondFileUpdateWithVersion = _.extend({}, this.secondFileUpdate, {\n            version: `${this.version}.3`\n          });\n          this.ProjectHistoryRedisManager.queueAddEntity.getCall(2).calledWith(this.project_id, this.projectHistoryId, 'file', this.firstFileUpdate.id, this.user_id, firstFileUpdateWithVersion, this.source).should.equal(true);\n          this.ProjectHistoryRedisManager.queueAddEntity.getCall(3).calledWith(this.project_id, this.projectHistoryId, 'file', this.secondFileUpdate.id, this.user_id, secondFileUpdateWithVersion, this.source).should.equal(true);\n        });","file":"unit/js/ProjectManager/updateProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not flush the history","suites":["ProjectManager","updateProjectWithLocks","add operations","successfully"],"updatePoint":{"line":167,"column":40,"index":7880},"line":167,"code":"        it('should not flush the history', function () {\n          this.HistoryManager.flushProjectChangesAsync.calledWith(this.project_id).should.equal(false);\n        });","file":"unit/js/ProjectManager/updateProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback","suites":["ProjectManager","updateProjectWithLocks","add operations","successfully"],"updatePoint":{"line":170,"column":36,"index":8049},"line":170,"code":"        it('should call the callback', function () {\n          this.callback.called.should.equal(true);\n        });","file":"unit/js/ProjectManager/updateProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback with the error","suites":["ProjectManager","updateProjectWithLocks","add operations","when adding a doc fails"],"updatePoint":{"line":180,"column":51,"index":8575},"line":180,"code":"        it('should call the callback with the error', function () {\n          this.callback.calledWith(this.error).should.equal(true);\n        });","file":"unit/js/ProjectManager/updateProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback with the error","suites":["ProjectManager","updateProjectWithLocks","add operations","when adding a file fails"],"updatePoint":{"line":190,"column":51,"index":9118},"line":190,"code":"        it('should call the callback with the error', function () {\n          this.callback.calledWith(this.error).should.equal(true);\n        });","file":"unit/js/ProjectManager/updateProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should flush the history","suites":["ProjectManager","updateProjectWithLocks","add operations","with enough ops to flush"],"updatePoint":{"line":199,"column":36,"index":9593},"line":199,"code":"        it('should flush the history', function () {\n          this.HistoryManager.flushProjectChangesAsync.calledWith(this.project_id).should.equal(true);\n        });","file":"unit/js/ProjectManager/updateProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call back with an error","suites":["ProjectManager","updateProjectWithLocks","when given an unknown operation type"],"updatePoint":{"line":211,"column":40,"index":10121},"line":211,"code":"      it('should call back with an error', function () {\n        this.callback.calledWith(sinon.match.instanceOf(Error)).should.be.true;\n      });","file":"unit/js/ProjectManager/updateProjectTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return the modified the comments and changes","suites":["RangesManager","applyUpdate","successfully"],"updatePoint":{"line":71,"column":68,"index":1974},"line":71,"code":"      return it('should return the modified the comments and changes', function () {\n        this.callback.called.should.equal(true);\n        const [error, entries, rangesWereCollapsed] = Array.from(this.callback.args[0]);\n        expect(error).to.be.null;\n        expect(rangesWereCollapsed).to.equal(false);\n        entries.comments[0].op.should.deep.equal({\n          c: 'three ',\n          p: 8\n        });\n        return entries.changes[0].op.should.deep.equal({\n          i: 'five',\n          p: 19\n        });\n      });","file":"unit/js/RangesManager/RangesManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return an object with no comments","suites":["RangesManager","applyUpdate","with empty comments"],"updatePoint":{"line":91,"column":57,"index":2763},"line":91,"code":"      return it('should return an object with no comments', function () {\n        // Save space in redis and don't store just {}\n        this.callback.called.should.equal(true);\n        const [error, entries] = Array.from(this.callback.args[0]);\n        expect(error).to.be.null;\n        return expect(entries.comments).to.be.undefined;\n      });","file":"unit/js/RangesManager/RangesManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return an object with no changes","suites":["RangesManager","applyUpdate","with empty changes"],"updatePoint":{"line":104,"column":56,"index":3380},"line":104,"code":"      return it('should return an object with no changes', function () {\n        // Save space in redis and don't store just {}\n        this.callback.called.should.equal(true);\n        const [error, entries] = Array.from(this.callback.args[0]);\n        expect(error).to.be.null;\n        return expect(entries.changes).to.be.undefined;\n      });","file":"unit/js/RangesManager/RangesManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return an error","suites":["RangesManager","applyUpdate","with too many comments"],"updatePoint":{"line":149,"column":39,"index":4675},"line":149,"code":"      return it('should return an error', function () {\n        this.callback.called.should.equal(true);\n        const [error, entries] = Array.from(this.callback.args[0]);\n        expect(error).to.not.be.null;\n        return expect(error.message).to.equal('too many comments or tracked changes');\n      });","file":"unit/js/RangesManager/RangesManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return an error","suites":["RangesManager","applyUpdate","with too many changes"],"updatePoint":{"line":192,"column":39,"index":5944},"line":192,"code":"      return it('should return an error', function () {\n        // Save space in redis and don't store just {}\n        this.callback.called.should.equal(true);\n        const [error, entries] = Array.from(this.callback.args[0]);\n        expect(error).to.not.be.null;\n        return expect(error.message).to.equal('too many comments or tracked changes');\n      });","file":"unit/js/RangesManager/RangesManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return an error","suites":["RangesManager","applyUpdate","inconsistent changes"],"updatePoint":{"line":213,"column":39,"index":6727},"line":213,"code":"      return it('should return an error', function () {\n        // Save space in redis and don't store just {}\n        this.callback.called.should.equal(true);\n        const [error, entries] = Array.from(this.callback.args[0]);\n        expect(error).to.not.be.null;\n        return expect(error.message).to.equal('Change ({\"op\":{\"i\":\"five\",\"p\":15},\"metadata\":{\"user_id\":\"user-id-123\"}}) doesn\\'t match text (\"our \")');\n      });","file":"unit/js/RangesManager/RangesManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return ranges_were_collapsed == true","suites":["RangesManager","applyUpdate","with an update that collapses a range"],"updatePoint":{"line":248,"column":60,"index":7908},"line":248,"code":"      return it('should return ranges_were_collapsed == true', function () {\n        this.callback.called.should.equal(true);\n        const [error, entries, rangesWereCollapsed] = Array.from(this.callback.args[0]);\n        return expect(rangesWereCollapsed).to.equal(true);\n      });","file":"unit/js/RangesManager/RangesManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should increment the range-delta histogram","suites":["RangesManager","applyUpdate","with an update that deletes ranges"],"updatePoint":{"line":289,"column":52,"index":9100},"line":289,"code":"      it('should increment the range-delta histogram', function () {\n        this.Metrics.histogram.called.should.equal(true);\n      });","file":"unit/js/RangesManager/RangesManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return ranges_were_collapsed == true","suites":["RangesManager","applyUpdate","with an update that deletes ranges"],"updatePoint":{"line":292,"column":60,"index":9245},"line":292,"code":"      return it('should return ranges_were_collapsed == true', function () {\n        this.callback.called.should.equal(true);\n        const [error, entries, rangesWereCollapsed] = Array.from(this.callback.args[0]);\n        return expect(rangesWereCollapsed).to.equal(true);\n      });","file":"unit/js/RangesManager/RangesManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should log the call with the correct number of changes","suites":["RangesManager","acceptChanges","successfully with a single change"],"updatePoint":{"line":351,"column":64,"index":10905},"line":351,"code":"      it('should log the call with the correct number of changes', function () {\n        return this.logger.debug.calledWith('accepting 1 changes in ranges').should.equal(true);\n      });","file":"unit/js/RangesManager/RangesManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should delegate the change removal to the ranges tracker","suites":["RangesManager","acceptChanges","successfully with a single change"],"updatePoint":{"line":354,"column":66,"index":11095},"line":354,"code":"      it('should delegate the change removal to the ranges tracker', function () {\n        return this.removeChangeIdsSpy.calledWith(this.change_ids).should.equal(true);\n      });","file":"unit/js/RangesManager/RangesManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should remove the change","suites":["RangesManager","acceptChanges","successfully with a single change"],"updatePoint":{"line":357,"column":34,"index":11243},"line":357,"code":"      it('should remove the change', function () {\n        return expect(this.rangesResponse.changes.find(change => change.id === this.ranges.changes[1].id)).to.be.undefined;\n      });","file":"unit/js/RangesManager/RangesManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return the original number of changes minus 1","suites":["RangesManager","acceptChanges","successfully with a single change"],"updatePoint":{"line":360,"column":62,"index":11456},"line":360,"code":"      it('should return the original number of changes minus 1', function () {\n        return this.rangesResponse.changes.length.should.equal(this.ranges.changes.length - 1);\n      });","file":"unit/js/RangesManager/RangesManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not touch other changes","suites":["RangesManager","acceptChanges","successfully with a single change"],"updatePoint":{"line":363,"column":47,"index":11626},"line":363,"code":"      return it('should not touch other changes', function () {\n        return [0, 2, 3, 4].map(i => expect(this.rangesResponse.changes.find(change => change.id === this.ranges.changes[i].id)).to.deep.equal(this.ranges.changes[i]));\n      });","file":"unit/js/RangesManager/RangesManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should log the call with the correct number of changes","suites":["RangesManager","acceptChanges","successfully with multiple changes"],"updatePoint":{"line":376,"column":64,"index":12331},"line":376,"code":"      it('should log the call with the correct number of changes', function () {\n        return this.logger.debug.calledWith(`accepting ${this.change_ids.length} changes in ranges`).should.equal(true);\n      });","file":"unit/js/RangesManager/RangesManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should delegate the change removal to the ranges tracker","suites":["RangesManager","acceptChanges","successfully with multiple changes"],"updatePoint":{"line":379,"column":66,"index":12545},"line":379,"code":"      it('should delegate the change removal to the ranges tracker', function () {\n        return this.removeChangeIdsSpy.calledWith(this.change_ids).should.equal(true);\n      });","file":"unit/js/RangesManager/RangesManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should remove the changes","suites":["RangesManager","acceptChanges","successfully with multiple changes"],"updatePoint":{"line":382,"column":35,"index":12694},"line":382,"code":"      it('should remove the changes', function () {\n        return [1, 3, 4].map(i => expect(this.rangesResponse.changes.find(change => change.id === this.ranges.changes[1].id)).to.be.undefined);\n      });","file":"unit/js/RangesManager/RangesManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return the original number of changes minus the number of accepted changes","suites":["RangesManager","acceptChanges","successfully with multiple changes"],"updatePoint":{"line":385,"column":91,"index":12956},"line":385,"code":"      it('should return the original number of changes minus the number of accepted changes', function () {\n        return this.rangesResponse.changes.length.should.equal(this.ranges.changes.length - 3);\n      });","file":"unit/js/RangesManager/RangesManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not touch other changes","suites":["RangesManager","acceptChanges","successfully with multiple changes"],"updatePoint":{"line":388,"column":47,"index":13126},"line":388,"code":"      return it('should not touch other changes', function () {\n        return [0, 2].map(i => expect(this.rangesResponse.changes.find(change => change.id === this.ranges.changes[i].id)).to.deep.equal(this.ranges.changes[i]));\n      });","file":"unit/js/RangesManager/RangesManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should execute the task in the background","suites":["RateLimitManager","for a single task"],"updatePoint":{"line":47,"column":49,"index":1499},"line":47,"code":"    it('should execute the task in the background', function () {\n      return this.task.called.should.equal(true);\n    });","file":"unit/js/RateLimitManager/RateLimitManager.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback","suites":["RateLimitManager","for a single task"],"updatePoint":{"line":50,"column":32,"index":1606},"line":50,"code":"    it('should call the callback', function () {\n      return this.callback.called.should.equal(true);\n    });","file":"unit/js/RateLimitManager/RateLimitManager.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should finish with a worker count of one","suites":["RateLimitManager","for a single task"],"updatePoint":{"line":53,"column":55,"index":1740},"line":53,"code":"    return it('should finish with a worker count of one', function () {\n      // because it's in the background\n      return expect(this.RateLimiter.ActiveWorkerCount).to.equal(1);\n    });","file":"unit/js/RateLimitManager/RateLimitManager.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should execute the first three tasks","suites":["RateLimitManager","for multiple tasks"],"updatePoint":{"line":78,"column":44,"index":2539},"line":78,"code":"    it('should execute the first three tasks', function () {\n      return this.task.calledThrice.should.equal(true);\n    });","file":"unit/js/RateLimitManager/RateLimitManager.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should execute the final task","suites":["RateLimitManager","for multiple tasks"],"updatePoint":{"line":81,"column":37,"index":2657},"line":81,"code":"    it('should execute the final task', function () {\n      return this.finalTask.called.should.equal(true);\n    });","file":"unit/js/RateLimitManager/RateLimitManager.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback","suites":["RateLimitManager","for multiple tasks"],"updatePoint":{"line":84,"column":32,"index":2769},"line":84,"code":"    it('should call the callback', function () {\n      return this.callback.called.should.equal(true);\n    });","file":"unit/js/RateLimitManager/RateLimitManager.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should finish with worker count of zero","suites":["RateLimitManager","for multiple tasks"],"updatePoint":{"line":87,"column":54,"index":2902},"line":87,"code":"    return it('should finish with worker count of zero', function () {\n      return expect(this.RateLimiter.ActiveWorkerCount).to.equal(0);\n    });","file":"unit/js/RateLimitManager/RateLimitManager.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should execute the first three tasks","suites":["RateLimitManager","for a mixture of long-running tasks"],"updatePoint":{"line":107,"column":44,"index":3607},"line":107,"code":"    it('should execute the first three tasks', function () {\n      return this.task.calledThrice.should.equal(true);\n    });","file":"unit/js/RateLimitManager/RateLimitManager.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should execute the final task","suites":["RateLimitManager","for a mixture of long-running tasks"],"updatePoint":{"line":110,"column":37,"index":3725},"line":110,"code":"    it('should execute the final task', function () {\n      return this.finalTask.called.should.equal(true);\n    });","file":"unit/js/RateLimitManager/RateLimitManager.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback","suites":["RateLimitManager","for a mixture of long-running tasks"],"updatePoint":{"line":113,"column":32,"index":3837},"line":113,"code":"    it('should call the callback', function () {\n      return this.callback.called.should.equal(true);\n    });","file":"unit/js/RateLimitManager/RateLimitManager.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should finish with worker count of three","suites":["RateLimitManager","for a mixture of long-running tasks"],"updatePoint":{"line":116,"column":55,"index":3971},"line":116,"code":"    return it('should finish with worker count of three', function () {\n      return expect(this.RateLimiter.ActiveWorkerCount).to.equal(3);\n    });","file":"unit/js/RateLimitManager/RateLimitManager.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should get the pending updates","suites":["RealTimeRedisManager","getPendingUpdatesForDoc","successfully"],"updatePoint":{"line":84,"column":40,"index":2628},"line":84,"code":"      it('should get the pending updates', function () {\n        return this.rclient.lrange.calledWith(`PendingUpdates:${this.doc_id}`, 0, 7).should.equal(true);\n      });","file":"unit/js/RealTimeRedisManager/RealTimeRedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should delete the pending updates","suites":["RealTimeRedisManager","getPendingUpdatesForDoc","successfully"],"updatePoint":{"line":87,"column":43,"index":2803},"line":87,"code":"      it('should delete the pending updates', function () {\n        return this.rclient.ltrim.calledWith(`PendingUpdates:${this.doc_id}`, 8, -1).should.equal(true);\n      });","file":"unit/js/RealTimeRedisManager/RealTimeRedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback with the updates","suites":["RealTimeRedisManager","getPendingUpdatesForDoc","successfully"],"updatePoint":{"line":90,"column":58,"index":2993},"line":90,"code":"      return it('should call the callback with the updates', function () {\n        return this.callback.calledWith(null, this.updates).should.equal(true);\n      });","file":"unit/js/RealTimeRedisManager/RealTimeRedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return an error to the callback","suites":["RealTimeRedisManager","getPendingUpdatesForDoc","when the JSON doesn't parse"],"updatePoint":{"line":105,"column":55,"index":3589},"line":105,"code":"      return it('should return an error to the callback', function () {\n        return this.callback.calledWith(sinon.match.has('name', 'SyntaxError')).should.equal(true);\n      });","file":"unit/js/RealTimeRedisManager/RealTimeRedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should look up the length","suites":["RealTimeRedisManager","getUpdatesLength"],"updatePoint":{"line":115,"column":33,"index":4000},"line":115,"code":"    it('should look up the length', function () {\n      return this.rclient.llen.calledWith(`PendingUpdates:${this.doc_id}`).should.equal(true);\n    });","file":"unit/js/RealTimeRedisManager/RealTimeRedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return the length","suites":["RealTimeRedisManager","getUpdatesLength"],"updatePoint":{"line":118,"column":39,"index":4159},"line":118,"code":"    return it('should return the length', function () {\n      return this.callback.calledWith(null, this.length).should.equal(true);\n    });","file":"unit/js/RealTimeRedisManager/RealTimeRedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should send the op with a message id","suites":["RealTimeRedisManager","sendData"],"updatePoint":{"line":129,"column":44,"index":4524},"line":129,"code":"    it('should send the op with a message id', function () {\n      return this.pubsubClient.publish.calledWith('applied-ops', JSON.stringify({\n        op: 'thisop',\n        _id: this.message_id\n      })).should.equal(true);\n    });","file":"unit/js/RealTimeRedisManager/RealTimeRedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should track the payload size","suites":["RealTimeRedisManager","sendData"],"updatePoint":{"line":135,"column":44,"index":4756},"line":135,"code":"    return it('should track the payload size', function () {\n      return this.metrics.summary.calledWith('redis.publish.applied-ops', JSON.stringify({\n        op: 'thisop',\n        _id: this.message_id\n      }).length).should.equal(true);\n    });","file":"unit/js/RealTimeRedisManager/RealTimeRedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should get all the details in one call to redis","suites":["RedisManager","getDoc","successfully"],"updatePoint":{"line":178,"column":57,"index":5528},"line":178,"code":"      it('should get all the details in one call to redis', function () {\n        this.rclient.mget.calledWith(`doclines:${this.docId}`, `DocVersion:${this.docId}`, `DocHash:${this.docId}`, `ProjectId:${this.docId}`, `Ranges:${this.docId}`, `Pathname:${this.docId}`, `ProjectHistoryId:${this.docId}`, `UnflushedTime:${this.docId}`, `lastUpdatedAt:${this.docId}`, `lastUpdatedBy:${this.docId}`).should.equal(true);\n      });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return the document","suites":["RedisManager","getDoc","successfully"],"updatePoint":{"line":181,"column":36,"index":5931},"line":181,"code":"      it('should return the document', function () {\n        this.callback.calledWithExactly(null, this.lines, this.version, this.ranges, this.pathname, this.projectHistoryId, this.unflushed_time, this.lastUpdatedAt, this.lastUpdatedBy).should.equal(true);\n      });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not log any errors","suites":["RedisManager","getDoc","successfully"],"updatePoint":{"line":184,"column":35,"index":6197},"line":184,"code":"      it('should not log any errors', function () {\n        this.logger.error.calledWith().should.equal(false);\n      });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should log a hash error","suites":["RedisManager","getDoc","with a corrupted document"],"updatePoint":{"line":194,"column":33,"index":6681},"line":194,"code":"      it('should log a hash error', function () {\n        this.logger.error.calledWith().should.equal(true);\n      });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return the document","suites":["RedisManager","getDoc","with a corrupted document"],"updatePoint":{"line":197,"column":36,"index":6803},"line":197,"code":"      it('should return the document', function () {\n        this.callback.calledWith(null, this.lines, this.version, this.ranges).should.equal(true);\n      });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return an error","suites":["RedisManager","getDoc","with a slow request to redis"],"updatePoint":{"line":214,"column":32,"index":7511},"line":214,"code":"      it('should return an error', function () {\n        this.callback.calledWith(sinon.match.instanceOf(Error)).should.equal(true);\n      });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return an error","suites":["RedisManager","getDoc","getDoc with an invalid project id"],"updatePoint":{"line":224,"column":32,"index":8074},"line":224,"code":"      it('should return an error', function () {\n        this.callback.calledWith(sinon.match.instanceOf(Errors.NotFoundError)).should.equal(true);\n      });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should get the length of the existing doc ops","suites":["RedisManager","getPreviousDocOpsTests","with a start and an end value"],"updatePoint":{"line":248,"column":55,"index":9099},"line":248,"code":"      it('should get the length of the existing doc ops', function () {\n        this.rclient.llen.calledWith(`DocOps:${this.docId}`).should.equal(true);\n      });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should get the current version of the doc","suites":["RedisManager","getPreviousDocOpsTests","with a start and an end value"],"updatePoint":{"line":251,"column":51,"index":9258},"line":251,"code":"      it('should get the current version of the doc', function () {\n        this.rclient.get.calledWith(`DocVersion:${this.docId}`).should.equal(true);\n      });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should get the appropriate docs ops","suites":["RedisManager","getPreviousDocOpsTests","with a start and an end value"],"updatePoint":{"line":254,"column":45,"index":9414},"line":254,"code":"      it('should get the appropriate docs ops', function () {\n        this.rclient.lrange.calledWith(`DocOps:${this.docId}`, this.start - this.first_version_in_redis, this.end - this.first_version_in_redis).should.equal(true);\n      });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return the docs with the doc ops deserialized","suites":["RedisManager","getPreviousDocOpsTests","with a start and an end value"],"updatePoint":{"line":257,"column":62,"index":9668},"line":257,"code":"      it('should return the docs with the doc ops deserialized', function () {\n        this.callback.calledWith(null, this.ops).should.equal(true);\n      });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should get the appropriate docs ops to the end of list","suites":["RedisManager","getPreviousDocOpsTests","with an end value of -1"],"updatePoint":{"line":279,"column":64,"index":10609},"line":279,"code":"      it('should get the appropriate docs ops to the end of list', function () {\n        this.rclient.lrange.calledWith(`DocOps:${this.docId}`, this.start - this.first_version_in_redis, -1).should.equal(true);\n      });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return the docs with the doc ops deserialized","suites":["RedisManager","getPreviousDocOpsTests","with an end value of -1"],"updatePoint":{"line":282,"column":62,"index":10827},"line":282,"code":"      it('should return the docs with the doc ops deserialized', function () {\n        this.callback.calledWith(null, this.ops).should.equal(true);\n      });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return an error","suites":["RedisManager","getPreviousDocOpsTests","when the requested range is not in Redis"],"updatePoint":{"line":304,"column":32,"index":11753},"line":304,"code":"      it('should return an error', function () {\n        this.callback.calledWith(sinon.match.instanceOf(Errors.OpRangeNotAvailableError)).should.equal(true);\n      });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should log out the problem as a debug message","suites":["RedisManager","getPreviousDocOpsTests","when the requested range is not in Redis"],"updatePoint":{"line":307,"column":55,"index":11945},"line":307,"code":"      it('should log out the problem as a debug message', function () {\n        this.logger.debug.called.should.equal(true);\n      });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return an error","suites":["RedisManager","getPreviousDocOpsTests","with a slow request to redis"],"updatePoint":{"line":336,"column":32,"index":13012},"line":336,"code":"      it('should return an error', function () {\n        this.callback.calledWith(sinon.match.instanceOf(Error)).should.equal(true);\n      });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should get the current doc version to check for consistency","suites":["RedisManager","updateDocument","with a consistent version","with project history enabled"],"updatePoint":{"line":384,"column":71,"index":14955},"line":384,"code":"        it('should get the current doc version to check for consistency', function () {\n          this.RedisManager.getDocVersion.calledWith(this.docId).should.equal(true);\n        });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should set most details in a single MSET call","suites":["RedisManager","updateDocument","with a consistent version","with project history enabled"],"updatePoint":{"line":387,"column":57,"index":15126},"line":387,"code":"        it('should set most details in a single MSET call', function () {\n          this.multi.mset.calledWith({\n            [`doclines:${this.docId}`]: JSON.stringify(this.lines),\n            [`DocVersion:${this.docId}`]: this.version,\n            [`DocHash:${this.docId}`]: this.hash,\n            [`Ranges:${this.docId}`]: JSON.stringify(this.ranges),\n            [`lastUpdatedAt:${this.docId}`]: Date.now(),\n            [`lastUpdatedBy:${this.docId}`]: 'last-author-fake-id'\n          }).should.equal(true);\n        });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should set the unflushed time","suites":["RedisManager","updateDocument","with a consistent version","with project history enabled"],"updatePoint":{"line":397,"column":41,"index":15633},"line":397,"code":"        it('should set the unflushed time', function () {\n          this.multi.set.calledWith(`UnflushedTime:${this.docId}`, Date.now(), 'NX').should.equal(true);\n        });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should push the doc op into the doc ops list","suites":["RedisManager","updateDocument","with a consistent version","with project history enabled"],"updatePoint":{"line":400,"column":56,"index":15823},"line":400,"code":"        it('should push the doc op into the doc ops list', function () {\n          this.multi.rpush.calledWith(`DocOps:${this.docId}`, JSON.stringify(this.ops[0]), JSON.stringify(this.ops[1])).should.equal(true);\n        });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should renew the expiry ttl on the doc ops array","suites":["RedisManager","updateDocument","with a consistent version","with project history enabled"],"updatePoint":{"line":403,"column":60,"index":16052},"line":403,"code":"        it('should renew the expiry ttl on the doc ops array', function () {\n          this.multi.expire.calledWith(`DocOps:${this.docId}`, this.RedisManager.DOC_OPS_TTL).should.equal(true);\n        });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should truncate the list to 100 members","suites":["RedisManager","updateDocument","with a consistent version","with project history enabled"],"updatePoint":{"line":406,"column":51,"index":16246},"line":406,"code":"        it('should truncate the list to 100 members', function () {\n          this.multi.ltrim.calledWith(`DocOps:${this.docId}`, -this.RedisManager.DOC_OPS_MAX_LENGTH, -1).should.equal(true);\n        });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should push the updates into the history ops list","suites":["RedisManager","updateDocument","with a consistent version","with project history enabled"],"updatePoint":{"line":409,"column":61,"index":16461},"line":409,"code":"        it('should push the updates into the history ops list', function () {\n          this.multi.rpush.calledWith(`UncompressedHistoryOps:${this.docId}`, JSON.stringify(this.ops[0]), JSON.stringify(this.ops[1])).should.equal(true);\n        });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should push the updates into the project history ops list","suites":["RedisManager","updateDocument","with a consistent version","with project history enabled"],"updatePoint":{"line":412,"column":69,"index":16715},"line":412,"code":"        it('should push the updates into the project history ops list', function () {\n          this.ProjectHistoryRedisManager.queueOps.calledWith(this.project_id, JSON.stringify(this.ops[0])).should.equal(true);\n        });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback","suites":["RedisManager","updateDocument","with a consistent version","with project history enabled"],"updatePoint":{"line":415,"column":36,"index":16908},"line":415,"code":"        it('should call the callback', function () {\n          this.callback.calledWith(null, this.doc_update_list_length, this.project_update_list_length).should.equal(true);\n        });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not log any errors","suites":["RedisManager","updateDocument","with a consistent version","with project history enabled"],"updatePoint":{"line":418,"column":37,"index":17097},"line":418,"code":"        it('should not log any errors', function () {\n          this.logger.error.calledWith().should.equal(false);\n        });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not push the updates into the project history ops list","suites":["RedisManager","updateDocument","with a consistent version","with project history disabled"],"updatePoint":{"line":428,"column":73,"index":17703},"line":428,"code":"        it('should not push the updates into the project history ops list', function () {\n          this.ProjectHistoryRedisManager.queueOps.called.should.equal(false);\n        });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback","suites":["RedisManager","updateDocument","with a consistent version","with project history disabled"],"updatePoint":{"line":431,"column":36,"index":17847},"line":431,"code":"        it('should call the callback', function () {\n          this.callback.calledWith(null, this.doc_update_list_length).should.equal(true);\n        });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not push the updates to the track-changes ops list","suites":["RedisManager","updateDocument","with a consistent version","with a doc using project history only"],"updatePoint":{"line":440,"column":69,"index":18442},"line":440,"code":"        it('should not push the updates to the track-changes ops list', function () {\n          this.multi.rpush.calledWith(`UncompressedHistoryOps:${this.docId}`).should.equal(false);\n        });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should push the updates into the project history ops list","suites":["RedisManager","updateDocument","with a consistent version","with a doc using project history only"],"updatePoint":{"line":443,"column":69,"index":18639},"line":443,"code":"        it('should push the updates into the project history ops list', function () {\n          this.ProjectHistoryRedisManager.queueOps.calledWith(this.project_id, JSON.stringify(this.ops[0])).should.equal(true);\n        });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback with the project update count only","suites":["RedisManager","updateDocument","with a consistent version","with a doc using project history only"],"updatePoint":{"line":446,"column":71,"index":18867},"line":446,"code":"        it('should call the callback with the project update count only', function () {\n          this.callback.calledWith(null, undefined, this.project_update_list_length).should.equal(true);\n        });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not call multi.exec","suites":["RedisManager","updateDocument","with an inconsistent version"],"updatePoint":{"line":456,"column":36,"index":19418},"line":456,"code":"      it('should not call multi.exec', function () {\n        this.multi.exec.called.should.equal(false);\n      });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback with an error","suites":["RedisManager","updateDocument","with an inconsistent version"],"updatePoint":{"line":459,"column":48,"index":19545},"line":459,"code":"      it('should call the callback with an error', function () {\n        this.callback.calledWith(sinon.match.instanceOf(Error)).should.equal(true);\n      });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not try to enqueue doc updates","suites":["RedisManager","updateDocument","with no updates"],"updatePoint":{"line":468,"column":47,"index":20033},"line":468,"code":"      it('should not try to enqueue doc updates', function () {\n        this.multi.rpush.called.should.equal(false);\n      });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not try to enqueue project updates","suites":["RedisManager","updateDocument","with no updates"],"updatePoint":{"line":471,"column":51,"index":20164},"line":471,"code":"      it('should not try to enqueue project updates', function () {\n        this.ProjectHistoryRedisManager.queueOps.called.should.equal(false);\n      });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should still set the doclines","suites":["RedisManager","updateDocument","with no updates"],"updatePoint":{"line":474,"column":39,"index":20307},"line":474,"code":"      it('should still set the doclines', function () {\n        this.multi.mset.calledWith({\n          [`doclines:${this.docId}`]: JSON.stringify(this.lines),\n          [`DocVersion:${this.docId}`]: this.version,\n          [`DocHash:${this.docId}`]: this.hash,\n          [`Ranges:${this.docId}`]: JSON.stringify(this.ranges),\n          [`lastUpdatedAt:${this.docId}`]: Date.now(),\n          [`lastUpdatedBy:${this.docId}`]: 'last-author-fake-id'\n        }).should.equal(true);\n      });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should set empty ranges","suites":["RedisManager","updateDocument","with empty ranges"],"updatePoint":{"line":490,"column":33,"index":21135},"line":490,"code":"      it('should set empty ranges', function () {\n        this.multi.mset.calledWith({\n          [`doclines:${this.docId}`]: JSON.stringify(this.lines),\n          [`DocVersion:${this.docId}`]: this.version,\n          [`DocHash:${this.docId}`]: this.hash,\n          [`Ranges:${this.docId}`]: null,\n          [`lastUpdatedAt:${this.docId}`]: Date.now(),\n          [`lastUpdatedBy:${this.docId}`]: 'last-author-fake-id'\n        }).should.equal(true);\n      });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should log an error","suites":["RedisManager","updateDocument","with null bytes in the serialized doc lines"],"updatePoint":{"line":510,"column":29,"index":22158},"line":510,"code":"      it('should log an error', function () {\n        this.logger.error.called.should.equal(true);\n      });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback with an error","suites":["RedisManager","updateDocument","with null bytes in the serialized doc lines"],"updatePoint":{"line":513,"column":48,"index":22286},"line":513,"code":"      it('should call the callback with an error', function () {\n        this.callback.calledWith(sinon.match.instanceOf(Error)).should.equal(true);\n      });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should log an error","suites":["RedisManager","updateDocument","with ranges that are too big"],"updatePoint":{"line":523,"column":29,"index":22894},"line":523,"code":"      it('should log an error', function () {\n        this.logger.error.called.should.equal(true);\n      });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback with the error","suites":["RedisManager","updateDocument","with ranges that are too big"],"updatePoint":{"line":526,"column":49,"index":23023},"line":526,"code":"      it('should call the callback with the error', function () {\n        this.callback.calledWith(sinon.match.instanceOf(Error)).should.equal(true);\n      });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should unset last updater","suites":["RedisManager","updateDocument","without user id from meta"],"updatePoint":{"line":535,"column":35,"index":23520},"line":535,"code":"      it('should unset last updater', function () {\n        this.multi.mset.calledWith({\n          [`doclines:${this.docId}`]: JSON.stringify(this.lines),\n          [`DocVersion:${this.docId}`]: this.version,\n          [`DocHash:${this.docId}`]: this.hash,\n          [`Ranges:${this.docId}`]: JSON.stringify(this.ranges),\n          [`lastUpdatedAt:${this.docId}`]: Date.now(),\n          [`lastUpdatedBy:${this.docId}`]: undefined\n        }).should.equal(true);\n      });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should set all the details in a single MSET call","suites":["RedisManager","putDocInMemory","with non-empty ranges"],"updatePoint":{"line":564,"column":58,"index":24756},"line":564,"code":"      it('should set all the details in a single MSET call', function () {\n        this.rclient.mset.calledWith({\n          [`doclines:${this.docId}`]: JSON.stringify(this.lines),\n          [`ProjectId:${this.docId}`]: this.project_id,\n          [`DocVersion:${this.docId}`]: this.version,\n          [`DocHash:${this.docId}`]: this.hash,\n          [`Ranges:${this.docId}`]: JSON.stringify(this.ranges),\n          [`Pathname:${this.docId}`]: this.pathname,\n          [`ProjectHistoryId:${this.docId}`]: this.projectHistoryId\n        }).should.equal(true);\n      });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should add the docId to the project set","suites":["RedisManager","putDocInMemory","with non-empty ranges"],"updatePoint":{"line":575,"column":49,"index":25312},"line":575,"code":"      it('should add the docId to the project set', function () {\n        this.rclient.sadd.calledWith(`DocsIn:${this.project_id}`, this.docId).should.equal(true);\n      });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not log any errors","suites":["RedisManager","putDocInMemory","with non-empty ranges"],"updatePoint":{"line":578,"column":35,"index":25472},"line":578,"code":"      it('should not log any errors', function () {\n        this.logger.error.calledWith().should.equal(false);\n      });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should unset ranges","suites":["RedisManager","putDocInMemory","with empty ranges"],"updatePoint":{"line":586,"column":29,"index":25834},"line":586,"code":"      it('should unset ranges', function () {\n        this.rclient.mset.calledWith({\n          [`doclines:${this.docId}`]: JSON.stringify(this.lines),\n          [`ProjectId:${this.docId}`]: this.project_id,\n          [`DocVersion:${this.docId}`]: this.version,\n          [`DocHash:${this.docId}`]: this.hash,\n          [`Ranges:${this.docId}`]: null,\n          [`Pathname:${this.docId}`]: this.pathname,\n          [`ProjectHistoryId:${this.docId}`]: this.projectHistoryId\n        }).should.equal(true);\n      });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should log an error","suites":["RedisManager","putDocInMemory","with null bytes in the serialized doc lines"],"updatePoint":{"line":606,"column":29,"index":26820},"line":606,"code":"      it('should log an error', function () {\n        this.logger.error.called.should.equal(true);\n      });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback with an error","suites":["RedisManager","putDocInMemory","with null bytes in the serialized doc lines"],"updatePoint":{"line":609,"column":48,"index":26948},"line":609,"code":"      it('should call the callback with an error', function () {\n        this.callback.calledWith(sinon.match.instanceOf(Error)).should.equal(true);\n      });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should log an error","suites":["RedisManager","putDocInMemory","with ranges that are too big"],"updatePoint":{"line":618,"column":29,"index":27460},"line":618,"code":"      it('should log an error', function () {\n        this.logger.error.called.should.equal(true);\n      });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback with the error","suites":["RedisManager","putDocInMemory","with ranges that are too big"],"updatePoint":{"line":621,"column":49,"index":27589},"line":621,"code":"      it('should call the callback with the error', function () {\n        this.callback.calledWith(sinon.match.instanceOf(Error)).should.equal(true);\n      });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should check the length of the current doclines","suites":["RedisManager","removeDocFromMemory"],"updatePoint":{"line":634,"column":55,"index":28085},"line":634,"code":"    it('should check the length of the current doclines', function () {\n      this.multi.strlen.calledWith(`doclines:${this.docId}`).should.equal(true);\n    });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should delete the details in a singe call","suites":["RedisManager","removeDocFromMemory"],"updatePoint":{"line":637,"column":49,"index":28240},"line":637,"code":"    it('should delete the details in a singe call', function () {\n      this.multi.del.calledWith(`doclines:${this.docId}`, `ProjectId:${this.docId}`, `DocVersion:${this.docId}`, `DocHash:${this.docId}`, `Ranges:${this.docId}`, `Pathname:${this.docId}`, `ProjectHistoryId:${this.docId}`, `ProjectHistoryType:${this.docId}`, `UnflushedTime:${this.docId}`, `lastUpdatedAt:${this.docId}`, `lastUpdatedBy:${this.docId}`).should.equal(true);\n    });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should remove the docId from the project set","suites":["RedisManager","removeDocFromMemory"],"updatePoint":{"line":640,"column":52,"index":28688},"line":640,"code":"    it('should remove the docId from the project set', function () {\n      this.multi.srem.calledWith(`DocsIn:${this.project_id}`, this.docId).should.equal(true);\n    });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should delete the project state","suites":["RedisManager","clearProjectState"],"updatePoint":{"line":649,"column":39,"index":29056},"line":649,"code":"    it('should delete the project state', function () {\n      this.rclient.del.calledWith(`ProjectState:${this.project_id}`).should.equal(true);\n    });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"update the cached pathname","suites":["RedisManager","renameDoc","the document is cached in redis"],"updatePoint":{"line":669,"column":36,"index":29948},"line":669,"code":"      it('update the cached pathname', function () {\n        this.rclient.set.calledWith(`Pathname:${this.docId}`, this.newPathname).should.equal(true);\n      });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"does not update the cached pathname","suites":["RedisManager","renameDoc","the document is not cached in redis"],"updatePoint":{"line":679,"column":45,"index":30531},"line":679,"code":"      it('does not update the cached pathname', function () {\n        this.rclient.set.called.should.equal(false);\n      });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return the document version and an undefined history type","suites":["RedisManager","renameDoc","getDocVersion","when the document does not have a project history type set"],"updatePoint":{"line":692,"column":76,"index":31176},"line":692,"code":"        it('should return the document version and an undefined history type', function () {\n          this.callback.calledWithExactly(null, this.version, undefined).should.equal(true);\n        });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return the document version and history type","suites":["RedisManager","renameDoc","getDocVersion","when the document has a project history type set"],"updatePoint":{"line":701,"column":63,"index":31746},"line":701,"code":"        it('should return the document version and history type', function () {\n          this.callback.calledWithExactly(null, this.version, 'project-history').should.equal(true);\n        });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"with an insert before","suites":["ShareJS text type","transform","insert / insert"],"updatePoint":{"line":23,"column":31,"index":862},"line":23,"code":"      it('with an insert before', function () {\n        const dest = [];\n        text._tc(dest, {\n          i: 'foo',\n          p: 9\n        }, {\n          i: 'bar',\n          p: 3\n        });\n        return dest.should.deep.equal([{\n          i: 'foo',\n          p: 12\n        }]);\n      });","file":"unit/js/ShareJS/TextTransformTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"with an insert after","suites":["ShareJS text type","transform","insert / insert"],"updatePoint":{"line":37,"column":30,"index":1154},"line":37,"code":"      it('with an insert after', function () {\n        const dest = [];\n        text._tc(dest, {\n          i: 'foo',\n          p: 3\n        }, {\n          i: 'bar',\n          p: 9\n        });\n        return dest.should.deep.equal([{\n          i: 'foo',\n          p: 3\n        }]);\n      });","file":"unit/js/ShareJS/TextTransformTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"with an insert at the same place with side == 'right'","suites":["ShareJS text type","transform","insert / insert"],"updatePoint":{"line":51,"column":63,"index":1478},"line":51,"code":"      it(\"with an insert at the same place with side == 'right'\", function () {\n        const dest = [];\n        text._tc(dest, {\n          i: 'foo',\n          p: 3\n        }, {\n          i: 'bar',\n          p: 3\n        }, 'right');\n        return dest.should.deep.equal([{\n          i: 'foo',\n          p: 6\n        }]);\n      });","file":"unit/js/ShareJS/TextTransformTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"with an insert at the same place with side == 'left'","suites":["ShareJS text type","transform","insert / insert"],"updatePoint":{"line":65,"column":69,"index":1817},"line":65,"code":"      return it(\"with an insert at the same place with side == 'left'\", function () {\n        const dest = [];\n        text._tc(dest, {\n          i: 'foo',\n          p: 3\n        }, {\n          i: 'bar',\n          p: 3\n        }, 'left');\n        return dest.should.deep.equal([{\n          i: 'foo',\n          p: 3\n        }]);\n      });","file":"unit/js/ShareJS/TextTransformTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"with a delete before","suites":["ShareJS text type","transform","insert / delete"],"updatePoint":{"line":81,"column":30,"index":2170},"line":81,"code":"      it('with a delete before', function () {\n        const dest = [];\n        text._tc(dest, {\n          i: 'foo',\n          p: 9\n        }, {\n          d: 'bar',\n          p: 3\n        });\n        return dest.should.deep.equal([{\n          i: 'foo',\n          p: 6\n        }]);\n      });","file":"unit/js/ShareJS/TextTransformTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"with a delete after","suites":["ShareJS text type","transform","insert / delete"],"updatePoint":{"line":95,"column":29,"index":2460},"line":95,"code":"      it('with a delete after', function () {\n        const dest = [];\n        text._tc(dest, {\n          i: 'foo',\n          p: 3\n        }, {\n          d: 'bar',\n          p: 9\n        });\n        return dest.should.deep.equal([{\n          i: 'foo',\n          p: 3\n        }]);\n      });","file":"unit/js/ShareJS/TextTransformTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"with a delete at the same place with side == 'right'","suites":["ShareJS text type","transform","insert / delete"],"updatePoint":{"line":109,"column":62,"index":2783},"line":109,"code":"      it(\"with a delete at the same place with side == 'right'\", function () {\n        const dest = [];\n        text._tc(dest, {\n          i: 'foo',\n          p: 3\n        }, {\n          d: 'bar',\n          p: 3\n        }, 'right');\n        return dest.should.deep.equal([{\n          i: 'foo',\n          p: 3\n        }]);\n      });","file":"unit/js/ShareJS/TextTransformTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"with a delete at the same place with side == 'left'","suites":["ShareJS text type","transform","insert / delete"],"updatePoint":{"line":123,"column":68,"index":3121},"line":123,"code":"      return it(\"with a delete at the same place with side == 'left'\", function () {\n        const dest = [];\n        text._tc(dest, {\n          i: 'foo',\n          p: 3\n        }, {\n          d: 'bar',\n          p: 3\n        }, 'left');\n        return dest.should.deep.equal([{\n          i: 'foo',\n          p: 3\n        }]);\n      });","file":"unit/js/ShareJS/TextTransformTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"with an insert before","suites":["ShareJS text type","transform","delete / insert"],"updatePoint":{"line":139,"column":31,"index":3475},"line":139,"code":"      it('with an insert before', function () {\n        const dest = [];\n        text._tc(dest, {\n          d: 'foo',\n          p: 9\n        }, {\n          i: 'bar',\n          p: 3\n        });\n        return dest.should.deep.equal([{\n          d: 'foo',\n          p: 12\n        }]);\n      });","file":"unit/js/ShareJS/TextTransformTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"with an insert after","suites":["ShareJS text type","transform","delete / insert"],"updatePoint":{"line":153,"column":30,"index":3767},"line":153,"code":"      it('with an insert after', function () {\n        const dest = [];\n        text._tc(dest, {\n          d: 'foo',\n          p: 3\n        }, {\n          i: 'bar',\n          p: 9\n        });\n        return dest.should.deep.equal([{\n          d: 'foo',\n          p: 3\n        }]);\n      });","file":"unit/js/ShareJS/TextTransformTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"with an insert at the same place with side == 'right'","suites":["ShareJS text type","transform","delete / insert"],"updatePoint":{"line":167,"column":63,"index":4091},"line":167,"code":"      it(\"with an insert at the same place with side == 'right'\", function () {\n        const dest = [];\n        text._tc(dest, {\n          d: 'foo',\n          p: 3\n        }, {\n          i: 'bar',\n          p: 3\n        }, 'right');\n        return dest.should.deep.equal([{\n          d: 'foo',\n          p: 6\n        }]);\n      });","file":"unit/js/ShareJS/TextTransformTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"with an insert at the same place with side == 'left'","suites":["ShareJS text type","transform","delete / insert"],"updatePoint":{"line":181,"column":62,"index":4423},"line":181,"code":"      it(\"with an insert at the same place with side == 'left'\", function () {\n        const dest = [];\n        text._tc(dest, {\n          d: 'foo',\n          p: 3\n        }, {\n          i: 'bar',\n          p: 3\n        }, 'left');\n        return dest.should.deep.equal([{\n          d: 'foo',\n          p: 6\n        }]);\n      });","file":"unit/js/ShareJS/TextTransformTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"with a delete that overlaps the insert location","suites":["ShareJS text type","transform","delete / insert"],"updatePoint":{"line":195,"column":64,"index":4756},"line":195,"code":"      return it('with a delete that overlaps the insert location', function () {\n        const dest = [];\n        text._tc(dest, {\n          d: 'foo',\n          p: 3\n        }, {\n          i: 'bar',\n          p: 4\n        });\n        return dest.should.deep.equal([{\n          d: 'f',\n          p: 3\n        }, {\n          d: 'oo',\n          p: 6\n        }]);\n      });","file":"unit/js/ShareJS/TextTransformTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"with a delete before","suites":["ShareJS text type","transform","delete / delete"],"updatePoint":{"line":214,"column":30,"index":5146},"line":214,"code":"      it('with a delete before', function () {\n        const dest = [];\n        text._tc(dest, {\n          d: 'foo',\n          p: 9\n        }, {\n          d: 'bar',\n          p: 3\n        });\n        return dest.should.deep.equal([{\n          d: 'foo',\n          p: 6\n        }]);\n      });","file":"unit/js/ShareJS/TextTransformTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"with a delete after","suites":["ShareJS text type","transform","delete / delete"],"updatePoint":{"line":228,"column":29,"index":5436},"line":228,"code":"      it('with a delete after', function () {\n        const dest = [];\n        text._tc(dest, {\n          d: 'foo',\n          p: 3\n        }, {\n          d: 'bar',\n          p: 9\n        });\n        return dest.should.deep.equal([{\n          d: 'foo',\n          p: 3\n        }]);\n      });","file":"unit/js/ShareJS/TextTransformTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"with deleting the same content","suites":["ShareJS text type","transform","delete / delete"],"updatePoint":{"line":242,"column":40,"index":5737},"line":242,"code":"      it('with deleting the same content', function () {\n        const dest = [];\n        text._tc(dest, {\n          d: 'foo',\n          p: 3\n        }, {\n          d: 'foo',\n          p: 3\n        }, 'right');\n        return dest.should.deep.equal([]);\n      });","file":"unit/js/ShareJS/TextTransformTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"with the delete overlapping before","suites":["ShareJS text type","transform","delete / delete"],"updatePoint":{"line":253,"column":44,"index":6005},"line":253,"code":"      it('with the delete overlapping before', function () {\n        const dest = [];\n        text._tc(dest, {\n          d: 'foobar',\n          p: 3\n        }, {\n          d: 'abcfoo',\n          p: 0\n        }, 'right');\n        return dest.should.deep.equal([{\n          d: 'bar',\n          p: 0\n        }]);\n      });","file":"unit/js/ShareJS/TextTransformTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"with the delete overlapping after","suites":["ShareJS text type","transform","delete / delete"],"updatePoint":{"line":267,"column":43,"index":6324},"line":267,"code":"      it('with the delete overlapping after', function () {\n        const dest = [];\n        text._tc(dest, {\n          d: 'abcfoo',\n          p: 3\n        }, {\n          d: 'foobar',\n          p: 6\n        });\n        return dest.should.deep.equal([{\n          d: 'abc',\n          p: 3\n        }]);\n      });","file":"unit/js/ShareJS/TextTransformTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"with the delete overlapping the whole delete","suites":["ShareJS text type","transform","delete / delete"],"updatePoint":{"line":281,"column":54,"index":6645},"line":281,"code":"      it('with the delete overlapping the whole delete', function () {\n        const dest = [];\n        text._tc(dest, {\n          d: 'abcfoo123',\n          p: 3\n        }, {\n          d: 'foo',\n          p: 6\n        });\n        return dest.should.deep.equal([{\n          d: 'abc123',\n          p: 3\n        }]);\n      });","file":"unit/js/ShareJS/TextTransformTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"with the delete inside the whole delete","suites":["ShareJS text type","transform","delete / delete"],"updatePoint":{"line":295,"column":56,"index":6971},"line":295,"code":"      return it('with the delete inside the whole delete', function () {\n        const dest = [];\n        text._tc(dest, {\n          d: 'foo',\n          p: 6\n        }, {\n          d: 'abcfoo123',\n          p: 3\n        });\n        return dest.should.deep.equal([]);\n      });","file":"unit/js/ShareJS/TextTransformTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"with an insert before","suites":["ShareJS text type","transform","comment / insert"],"updatePoint":{"line":308,"column":31,"index":7278},"line":308,"code":"      it('with an insert before', function () {\n        const dest = [];\n        text._tc(dest, {\n          c: 'foo',\n          p: 9,\n          t: this.t\n        }, {\n          i: 'bar',\n          p: 3\n        });\n        return dest.should.deep.equal([{\n          c: 'foo',\n          p: 12,\n          t: this.t\n        }]);\n      });","file":"unit/js/ShareJS/TextTransformTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"with an insert after","suites":["ShareJS text type","transform","comment / insert"],"updatePoint":{"line":324,"column":30,"index":7612},"line":324,"code":"      it('with an insert after', function () {\n        const dest = [];\n        text._tc(dest, {\n          c: 'foo',\n          p: 3,\n          t: this.t\n        }, {\n          i: 'bar',\n          p: 9\n        });\n        return dest.should.deep.equal([{\n          c: 'foo',\n          p: 3,\n          t: this.t\n        }]);\n      });","file":"unit/js/ShareJS/TextTransformTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"with an insert at the left edge","suites":["ShareJS text type","transform","comment / insert"],"updatePoint":{"line":340,"column":41,"index":7956},"line":340,"code":"      it('with an insert at the left edge', function () {\n        const dest = [];\n        text._tc(dest, {\n          c: 'foo',\n          p: 3,\n          t: this.t\n        }, {\n          i: 'bar',\n          p: 3\n        });\n        // RangesTracker doesn't inject inserts into comments on edges, so neither should we\n        return dest.should.deep.equal([{\n          c: 'foo',\n          p: 6,\n          t: this.t\n        }]);\n      });","file":"unit/js/ShareJS/TextTransformTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"with an insert at the right edge","suites":["ShareJS text type","transform","comment / insert"],"updatePoint":{"line":357,"column":42,"index":8394},"line":357,"code":"      it('with an insert at the right edge', function () {\n        const dest = [];\n        text._tc(dest, {\n          c: 'foo',\n          p: 3,\n          t: this.t\n        }, {\n          i: 'bar',\n          p: 6\n        });\n        // RangesTracker doesn't inject inserts into comments on edges, so neither should we\n        return dest.should.deep.equal([{\n          c: 'foo',\n          p: 3,\n          t: this.t\n        }]);\n      });","file":"unit/js/ShareJS/TextTransformTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"with an insert in the middle","suites":["ShareJS text type","transform","comment / insert"],"updatePoint":{"line":374,"column":45,"index":8835},"line":374,"code":"      return it('with an insert in the middle', function () {\n        const dest = [];\n        text._tc(dest, {\n          c: 'foo',\n          p: 3,\n          t: this.t\n        }, {\n          i: 'bar',\n          p: 5\n        });\n        return dest.should.deep.equal([{\n          c: 'fobaro',\n          p: 3,\n          t: this.t\n        }]);\n      });","file":"unit/js/ShareJS/TextTransformTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"with a delete before","suites":["ShareJS text type","transform","comment / delete"],"updatePoint":{"line":392,"column":30,"index":9226},"line":392,"code":"      it('with a delete before', function () {\n        const dest = [];\n        text._tc(dest, {\n          c: 'foo',\n          p: 9,\n          t: this.t\n        }, {\n          d: 'bar',\n          p: 3\n        });\n        return dest.should.deep.equal([{\n          c: 'foo',\n          p: 6,\n          t: this.t\n        }]);\n      });","file":"unit/js/ShareJS/TextTransformTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"with a delete after","suites":["ShareJS text type","transform","comment / delete"],"updatePoint":{"line":408,"column":29,"index":9558},"line":408,"code":"      it('with a delete after', function () {\n        const dest = [];\n        text._tc(dest, {\n          c: 'foo',\n          p: 3,\n          t: this.t\n        }, {\n          i: 'bar',\n          p: 9\n        });\n        return dest.should.deep.equal([{\n          c: 'foo',\n          p: 3,\n          t: this.t\n        }]);\n      });","file":"unit/js/ShareJS/TextTransformTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"with a delete overlapping the comment content before","suites":["ShareJS text type","transform","comment / delete"],"updatePoint":{"line":424,"column":62,"index":9923},"line":424,"code":"      it('with a delete overlapping the comment content before', function () {\n        const dest = [];\n        text._tc(dest, {\n          c: 'foobar',\n          p: 6,\n          t: this.t\n        }, {\n          d: '123foo',\n          p: 3\n        });\n        return dest.should.deep.equal([{\n          c: 'bar',\n          p: 3,\n          t: this.t\n        }]);\n      });","file":"unit/js/ShareJS/TextTransformTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"with a delete overlapping the comment content after","suites":["ShareJS text type","transform","comment / delete"],"updatePoint":{"line":440,"column":61,"index":10293},"line":440,"code":"      it('with a delete overlapping the comment content after', function () {\n        const dest = [];\n        text._tc(dest, {\n          c: 'foobar',\n          p: 6,\n          t: this.t\n        }, {\n          d: 'bar123',\n          p: 9\n        });\n        return dest.should.deep.equal([{\n          c: 'foo',\n          p: 6,\n          t: this.t\n        }]);\n      });","file":"unit/js/ShareJS/TextTransformTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"with a delete overlapping the comment content in the middle","suites":["ShareJS text type","transform","comment / delete"],"updatePoint":{"line":456,"column":69,"index":10671},"line":456,"code":"      it('with a delete overlapping the comment content in the middle', function () {\n        const dest = [];\n        text._tc(dest, {\n          c: 'foo123bar',\n          p: 6,\n          t: this.t\n        }, {\n          d: '123',\n          p: 9\n        });\n        return dest.should.deep.equal([{\n          c: 'foobar',\n          p: 6,\n          t: this.t\n        }]);\n      });","file":"unit/js/ShareJS/TextTransformTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"with a delete overlapping the whole comment","suites":["ShareJS text type","transform","comment / delete"],"updatePoint":{"line":472,"column":60,"index":11043},"line":472,"code":"      return it('with a delete overlapping the whole comment', function () {\n        const dest = [];\n        text._tc(dest, {\n          c: 'foo',\n          p: 6,\n          t: this.t\n        }, {\n          d: '123foo456',\n          p: 3\n        });\n        return dest.should.deep.equal([{\n          c: '',\n          p: 3,\n          t: this.t\n        }]);\n      });","file":"unit/js/ShareJS/TextTransformTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not do anything","suites":["ShareJS text type","transform","comment / insert"],"updatePoint":{"line":490,"column":39,"index":11443},"line":490,"code":"      return it('should not do anything', function () {\n        const dest = [];\n        text._tc(dest, {\n          i: 'foo',\n          p: 6\n        }, {\n          c: 'bar',\n          p: 3\n        });\n        return dest.should.deep.equal([{\n          i: 'foo',\n          p: 6\n        }]);\n      });","file":"unit/js/ShareJS/TextTransformTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not do anything","suites":["ShareJS text type","transform","comment / delete"],"updatePoint":{"line":506,"column":39,"index":11798},"line":506,"code":"      return it('should not do anything', function () {\n        const dest = [];\n        text._tc(dest, {\n          d: 'foo',\n          p: 6\n        }, {\n          c: 'bar',\n          p: 3\n        });\n        return dest.should.deep.equal([{\n          d: 'foo',\n          p: 6\n        }]);\n      });","file":"unit/js/ShareJS/TextTransformTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not do anything","suites":["ShareJS text type","transform","comment / comment"],"updatePoint":{"line":522,"column":39,"index":12161},"line":522,"code":"      return it('should not do anything', function () {\n        const dest = [];\n        text._tc(dest, {\n          c: 'foo',\n          p: 6\n        }, {\n          c: 'bar',\n          p: 3\n        });\n        return dest.should.deep.equal([{\n          c: 'foo',\n          p: 6\n        }]);\n      });","file":"unit/js/ShareJS/TextTransformTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should apply an insert","suites":["ShareJS text type","apply"],"updatePoint":{"line":539,"column":30,"index":12500},"line":539,"code":"    it('should apply an insert', function () {\n      return text.apply('foo', [{\n        i: 'bar',\n        p: 2\n      }]).should.equal('fobaro');\n    });","file":"unit/js/ShareJS/TextTransformTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should apply a delete","suites":["ShareJS text type","apply"],"updatePoint":{"line":545,"column":29,"index":12653},"line":545,"code":"    it('should apply a delete', function () {\n      return text.apply('foo123bar', [{\n        d: '123',\n        p: 3\n      }]).should.equal('foobar');\n    });","file":"unit/js/ShareJS/TextTransformTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should do nothing with a comment","suites":["ShareJS text type","apply"],"updatePoint":{"line":551,"column":40,"index":12823},"line":551,"code":"    it('should do nothing with a comment', function () {\n      return text.apply('foo123bar', [{\n        c: '123',\n        p: 3\n      }]).should.equal('foo123bar');\n    });","file":"unit/js/ShareJS/TextTransformTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should throw an error when deleted content does not match","suites":["ShareJS text type","apply"],"updatePoint":{"line":557,"column":65,"index":13021},"line":557,"code":"    it('should throw an error when deleted content does not match', function () {\n      return (() => text.apply('foo123bar', [{\n        d: '456',\n        p: 3\n      }])).should.throw(Error);\n    });","file":"unit/js/ShareJS/TextTransformTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should throw an error when comment content does not match","suites":["ShareJS text type","apply"],"updatePoint":{"line":563,"column":72,"index":13228},"line":563,"code":"    return it('should throw an error when comment content does not match', function () {\n      return (() => text.apply('foo123bar', [{\n        c: '456',\n        p: 3\n      }])).should.throw(Error);\n    });","file":"unit/js/ShareJS/TextTransformTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not matter which op or comment is applied first","suites":["ShareJS text type","applying ops and comments in different orders"],"updatePoint":{"line":571,"column":69,"index":13519},"line":571,"code":"    return it('should not matter which op or comment is applied first', function () {\n      let length, p;\n      let asc, end;\n      let asc1, end1;\n      let asc3, end3;\n      const transform = function (op1, op2, side) {\n        const d = [];\n        text._tc(d, op1, op2, side);\n        return d;\n      };\n      const applySnapshot = (snapshot, op) => text.apply(snapshot, op);\n      const applyRanges = function (rangesTracker, ops) {\n        for (const op of Array.from(ops)) {\n          rangesTracker.applyOp(op, {});\n        }\n        return rangesTracker;\n      };\n      const commentsEqual = function (comments1, comments2) {\n        if (comments1.length !== comments2.length) {\n          return false;\n        }\n        comments1.sort((a, b) => {\n          if (a.offset - b.offset === 0) {\n            return a.length - b.length;\n          } else {\n            return a.offset - b.offset;\n          }\n        });\n        comments2.sort((a, b) => {\n          if (a.offset - b.offset === 0) {\n            return a.length - b.length;\n          } else {\n            return a.offset - b.offset;\n          }\n        });\n        for (let i = 0; i < comments1.length; i++) {\n          const comment1 = comments1[i];\n          const comment2 = comments2[i];\n          if (comment1.offset !== comment2.offset || comment1.length !== comment2.length) {\n            return false;\n          }\n        }\n        return true;\n      };\n      const SNAPSHOT = '123';\n      const OPS = [];\n      // Insert ops\n      for (p = 0, end = SNAPSHOT.length, asc = end >= 0; asc ? p <= end : p >= end; asc ? p++ : p--) {\n        OPS.push({\n          i: 'a',\n          p\n        });\n        OPS.push({\n          i: 'bc',\n          p\n        });\n      }\n      for (p = 0, end1 = SNAPSHOT.length - 1, asc1 = end1 >= 0; asc1 ? p <= end1 : p >= end1; asc1 ? p++ : p--) {\n        let asc2, end2;\n        for (length = 1, end2 = SNAPSHOT.length - p, asc2 = end2 >= 1; asc2 ? length <= end2 : length >= end2; asc2 ? length++ : length--) {\n          OPS.push({\n            d: SNAPSHOT.slice(p, p + length),\n            p\n          });\n        }\n      }\n      for (p = 0, end3 = SNAPSHOT.length - 1, asc3 = end3 >= 0; asc3 ? p <= end3 : p >= end3; asc3 ? p++ : p--) {\n        let asc4, end4;\n        for (length = 1, end4 = SNAPSHOT.length - p, asc4 = end4 >= 1; asc4 ? length <= end4 : length >= end4; asc4 ? length++ : length--) {\n          OPS.push({\n            c: SNAPSHOT.slice(p, p + length),\n            p,\n            t: this.t\n          });\n        }\n      }\n      return (() => {\n        const result = [];\n        for (const op1 of Array.from(OPS)) {\n          result.push((() => {\n            const result1 = [];\n            for (const op2 of Array.from(OPS)) {\n              const op1T = transform(op1, op2, 'left');\n              const op2T = transform(op2, op1, 'right');\n              const rt12 = new RangesTracker();\n              const snapshot12 = applySnapshot(applySnapshot(SNAPSHOT, [op1]), op2T);\n              applyRanges(rt12, [op1]);\n              applyRanges(rt12, op2T);\n              const rt21 = new RangesTracker();\n              const snapshot21 = applySnapshot(applySnapshot(SNAPSHOT, [op2]), op1T);\n              applyRanges(rt21, [op2]);\n              applyRanges(rt21, op1T);\n              if (snapshot12 !== snapshot21) {\n                console.error({\n                  op1,\n                  op2,\n                  op1T,\n                  op2T,\n                  snapshot12,\n                  snapshot21\n                }, 'Ops are not consistent');\n                throw new Error('OT is inconsistent');\n              }\n              if (!commentsEqual(rt12.comments, rt21.comments)) {\n                console.log(rt12.comments);\n                console.log(rt21.comments);\n                console.error({\n                  op1,\n                  op2,\n                  op1T,\n                  op2T,\n                  rt12_comments: rt12.comments,\n                  rt21_comments: rt21.comments\n                }, 'Comments are not consistent');\n                throw new Error('OT is inconsistent');\n              } else {\n                result1.push(undefined);\n              }\n            }\n            return result1;\n          })());\n        }\n        return result;\n      })();\n    });","file":"unit/js/ShareJS/TextTransformTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return the doc lines","suites":["ShareJsDB","getSnapshot","successfully"],"updatePoint":{"line":41,"column":37,"index":1427},"line":41,"code":"      it('should return the doc lines', function () {\n        return this.callback.args[0][1].snapshot.should.equal(this.lines.join('\\n'));\n      });","file":"unit/js/ShareJsDB/ShareJsDBTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return the doc version","suites":["ShareJsDB","getSnapshot","successfully"],"updatePoint":{"line":44,"column":39,"index":1579},"line":44,"code":"      it('should return the doc version', function () {\n        return this.callback.args[0][1].v.should.equal(this.version);\n      });","file":"unit/js/ShareJsDB/ShareJsDBTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return the type as text","suites":["ShareJsDB","getSnapshot","successfully"],"updatePoint":{"line":47,"column":47,"index":1723},"line":47,"code":"      return it('should return the type as text', function () {\n        return this.callback.args[0][1].type.should.equal('text');\n      });","file":"unit/js/ShareJsDB/ShareJsDBTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return the callback with a NotFoundError","suites":["ShareJsDB","getSnapshot","when the key does not match"],"updatePoint":{"line":55,"column":64,"index":2057},"line":55,"code":"      return it('should return the callback with a NotFoundError', function () {\n        return this.callback.calledWith(sinon.match.instanceOf(Errors.NotFoundError)).should.equal(true);\n      });","file":"unit/js/ShareJsDB/ShareJsDBTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return an empty array","suites":["ShareJsDB","getOps","with start == end"],"updatePoint":{"line":66,"column":45,"index":2491},"line":66,"code":"      return it('should return an empty array', function () {\n        return this.callback.calledWith(null, []).should.equal(true);\n      });","file":"unit/js/ShareJsDB/ShareJsDBTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should get the range from redis","suites":["ShareJsDB","getOps","with a non empty range"],"updatePoint":{"line":77,"column":41,"index":2953},"line":77,"code":"      it('should get the range from redis', function () {\n        return this.RedisManager.getPreviousDocOps.calledWith(this.doc_id, this.start, this.end - 1).should.equal(true);\n      });","file":"unit/js/ShareJsDB/ShareJsDBTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return the ops","suites":["ShareJsDB","getOps","with a non empty range"],"updatePoint":{"line":80,"column":38,"index":3139},"line":80,"code":"      return it('should return the ops', function () {\n        return this.callback.calledWith(null, this.ops).should.equal(true);\n      });","file":"unit/js/ShareJsDB/ShareJsDBTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should get until the end of the list","suites":["ShareJsDB","getOps","with no specified end"],"updatePoint":{"line":91,"column":53,"index":3627},"line":91,"code":"      return it('should get until the end of the list', function () {\n        return this.RedisManager.getPreviousDocOps.calledWith(this.doc_id, this.start, -1).should.equal(true);\n      });","file":"unit/js/ShareJsDB/ShareJsDBTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should write into appliedOps","suites":["ShareJsDB","writeOps","writing an op"],"updatePoint":{"line":111,"column":38,"index":4214},"line":111,"code":"      it('should write into appliedOps', function () {\n        return expect(this.db.appliedOps[this.doc_key]).to.deep.equal([this.opData]);\n      });","file":"unit/js/ShareJsDB/ShareJsDBTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback without an error","suites":["ShareJsDB","writeOps","writing an op"],"updatePoint":{"line":114,"column":58,"index":4385},"line":114,"code":"      return it('should call the callback without an error', function () {\n        this.callback.called.should.equal(true);\n        return (this.callback.args[0][0] != null).should.equal(false);\n      });","file":"unit/js/ShareJsDB/ShareJsDBTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should create a new ShareJs model","suites":["ShareJsUpdateManager","applyUpdate","successfully"],"updatePoint":{"line":85,"column":43,"index":2970},"line":85,"code":"      it('should create a new ShareJs model', function () {\n        return this.ShareJsUpdateManager.getNewShareJsModel.calledWith(this.project_id, this.doc_id, this.lines, this.version).should.equal(true);\n      });","file":"unit/js/ShareJsUpdateManager/ShareJsUpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should listen for ops on the model","suites":["ShareJsUpdateManager","applyUpdate","successfully"],"updatePoint":{"line":88,"column":44,"index":3188},"line":88,"code":"      it('should listen for ops on the model', function () {\n        return this.ShareJsUpdateManager._listenForOps.calledWith(this.model).should.equal(true);\n      });","file":"unit/js/ShareJsUpdateManager/ShareJsUpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should send the update to ShareJs","suites":["ShareJsUpdateManager","applyUpdate","successfully"],"updatePoint":{"line":91,"column":43,"index":3356},"line":91,"code":"      it('should send the update to ShareJs', function () {\n        return this.model.applyOp.calledWith(`${this.project_id}:${this.doc_id}`, this.update).should.equal(true);\n      });","file":"unit/js/ShareJsUpdateManager/ShareJsUpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should get the updated doc lines","suites":["ShareJsUpdateManager","applyUpdate","successfully"],"updatePoint":{"line":94,"column":42,"index":3540},"line":94,"code":"      it('should get the updated doc lines', function () {\n        return this.model.getSnapshot.calledWith(`${this.project_id}:${this.doc_id}`).should.equal(true);\n      });","file":"unit/js/ShareJsUpdateManager/ShareJsUpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return the updated doc lines, version and ops","suites":["ShareJsUpdateManager","applyUpdate","successfully"],"updatePoint":{"line":97,"column":69,"index":3742},"line":97,"code":"      return it('should return the updated doc lines, version and ops', function () {\n        return this.callback.calledWith(null, this.updatedDocLines, this.version, this.appliedOps).should.equal(true);\n      });","file":"unit/js/ShareJsUpdateManager/ShareJsUpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback with the error","suites":["ShareJsUpdateManager","applyUpdate","when applyOp fails"],"updatePoint":{"line":110,"column":56,"index":4411},"line":110,"code":"      return it('should call the callback with the error', function () {\n        return this.callback.calledWith(this.error).should.equal(true);\n      });","file":"unit/js/ShareJsUpdateManager/ShareJsUpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback with the error","suites":["ShareJsUpdateManager","applyUpdate","when getSnapshot fails"],"updatePoint":{"line":123,"column":56,"index":5026},"line":123,"code":"      return it('should call the callback with the error', function () {\n        return this.callback.calledWith(this.error).should.equal(true);\n      });","file":"unit/js/ShareJsUpdateManager/ShareJsUpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback with the error","suites":["ShareJsUpdateManager","applyUpdate","with an invalid hash"],"updatePoint":{"line":140,"column":56,"index":5841},"line":140,"code":"      return it('should call the callback with the error', function () {\n        return this.callback.calledWith(sinon.match.instanceOf(Error)).should.equal(true);\n      });","file":"unit/js/ShareJsUpdateManager/ShareJsUpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should listen to the model for updates","suites":["ShareJsUpdateManager","_listenForOps"],"updatePoint":{"line":155,"column":46,"index":6324},"line":155,"code":"    it('should listen to the model for updates', function () {\n      return this.model.on.calledWith('applyOp').should.equal(true);\n    });","file":"unit/js/ShareJsUpdateManager/ShareJsUpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should publish the op to redis","suites":["ShareJsUpdateManager","_listenForOps","the callback"],"updatePoint":{"line":172,"column":47,"index":6854},"line":172,"code":"      return it('should publish the op to redis', function () {\n        return this.RealTimeRedisManager.sendData.calledWith({\n          project_id: this.project_id,\n          doc_id: this.doc_id,\n          op: this.opData\n        }).should.equal(true);\n      });","file":"unit/js/ShareJsUpdateManager/ShareJsUpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should apply the updates","suites":["UpdateManager","processOutstandingUpdates"],"updatePoint":{"line":67,"column":32,"index":2477},"line":67,"code":"    it('should apply the updates', function () {\n      return this.UpdateManager.fetchAndApplyUpdates.calledWith(this.project_id, this.doc_id).should.equal(true);\n    });","file":"unit/js/UpdateManager/UpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback","suites":["UpdateManager","processOutstandingUpdates"],"updatePoint":{"line":70,"column":32,"index":2648},"line":70,"code":"    it('should call the callback', function () {\n      return this.callback.called.should.equal(true);\n    });","file":"unit/js/UpdateManager/UpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should time the execution","suites":["UpdateManager","processOutstandingUpdates"],"updatePoint":{"line":73,"column":40,"index":2767},"line":73,"code":"    return it('should time the execution', function () {\n      return this.Metrics.Timer.prototype.done.called.should.equal(true);\n    });","file":"unit/js/UpdateManager/UpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should acquire the lock","suites":["UpdateManager","processOutstandingUpdatesWithLock","when the lock is free","successfully"],"updatePoint":{"line":89,"column":35,"index":3623},"line":89,"code":"        it('should acquire the lock', function () {\n          return this.LockManager.tryLock.calledWith(this.doc_id).should.equal(true);\n        });","file":"unit/js/UpdateManager/UpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should free the lock","suites":["UpdateManager","processOutstandingUpdatesWithLock","when the lock is free","successfully"],"updatePoint":{"line":92,"column":32,"index":3770},"line":92,"code":"        it('should free the lock', function () {\n          return this.LockManager.releaseLock.calledWith(this.doc_id, this.lockValue).should.equal(true);\n        });","file":"unit/js/UpdateManager/UpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should process the outstanding updates","suites":["UpdateManager","processOutstandingUpdatesWithLock","when the lock is free","successfully"],"updatePoint":{"line":95,"column":50,"index":3955},"line":95,"code":"        it('should process the outstanding updates', function () {\n          return this.UpdateManager.processOutstandingUpdates.calledWith(this.project_id, this.doc_id).should.equal(true);\n        });","file":"unit/js/UpdateManager/UpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should do everything with the lock acquired","suites":["UpdateManager","processOutstandingUpdatesWithLock","when the lock is free","successfully"],"updatePoint":{"line":98,"column":55,"index":4162},"line":98,"code":"        it('should do everything with the lock acquired', function () {\n          this.UpdateManager.processOutstandingUpdates.calledAfter(this.LockManager.tryLock).should.equal(true);\n          return this.UpdateManager.processOutstandingUpdates.calledBefore(this.LockManager.releaseLock).should.equal(true);\n        });","file":"unit/js/UpdateManager/UpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should continue processing new updates that may have come in","suites":["UpdateManager","processOutstandingUpdatesWithLock","when the lock is free","successfully"],"updatePoint":{"line":102,"column":72,"index":4501},"line":102,"code":"        it('should continue processing new updates that may have come in', function () {\n          return this.UpdateManager.continueProcessingUpdatesWithLock.calledWith(this.project_id, this.doc_id).should.equal(true);\n        });","file":"unit/js/UpdateManager/UpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return the callback","suites":["UpdateManager","processOutstandingUpdatesWithLock","when the lock is free","successfully"],"updatePoint":{"line":105,"column":45,"index":4706},"line":105,"code":"        return it('should return the callback', function () {\n          return this.callback.called.should.equal(true);\n        });","file":"unit/js/UpdateManager/UpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should free the lock","suites":["UpdateManager","processOutstandingUpdatesWithLock","when the lock is free","when processOutstandingUpdates returns an error"],"updatePoint":{"line":114,"column":32,"index":5218},"line":114,"code":"        it('should free the lock', function () {\n          return this.LockManager.releaseLock.calledWith(this.doc_id, this.lockValue).should.equal(true);\n        });","file":"unit/js/UpdateManager/UpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return the error in the callback","suites":["UpdateManager","processOutstandingUpdatesWithLock","when the lock is free","when processOutstandingUpdates returns an error"],"updatePoint":{"line":117,"column":58,"index":5411},"line":117,"code":"        return it('should return the error in the callback', function () {\n          return this.callback.calledWith(this.error).should.equal(true);\n        });","file":"unit/js/UpdateManager/UpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return the callback","suites":["UpdateManager","processOutstandingUpdatesWithLock","when the lock is taken"],"updatePoint":{"line":128,"column":36,"index":5942},"line":128,"code":"      it('should return the callback', function () {\n        return this.callback.called.should.equal(true);\n      });","file":"unit/js/UpdateManager/UpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not process the updates","suites":["UpdateManager","processOutstandingUpdatesWithLock","when the lock is taken"],"updatePoint":{"line":131,"column":47,"index":6072},"line":131,"code":"      return it('should not process the updates', function () {\n        return this.UpdateManager.processOutstandingUpdates.called.should.equal(false);\n      });","file":"unit/js/UpdateManager/UpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should process the outstanding updates","suites":["UpdateManager","continueProcessingUpdatesWithLock","when there are outstanding updates"],"updatePoint":{"line":143,"column":48,"index":6712},"line":143,"code":"      it('should process the outstanding updates', function () {\n        return this.UpdateManager.processOutstandingUpdatesWithLock.calledWith(this.project_id, this.doc_id).should.equal(true);\n      });","file":"unit/js/UpdateManager/UpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return the callback","suites":["UpdateManager","continueProcessingUpdatesWithLock","when there are outstanding updates"],"updatePoint":{"line":146,"column":43,"index":6911},"line":146,"code":"      return it('should return the callback', function () {\n        return this.callback.called.should.equal(true);\n      });","file":"unit/js/UpdateManager/UpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not try to process the outstanding updates","suites":["UpdateManager","continueProcessingUpdatesWithLock","when there are no outstanding updates"],"updatePoint":{"line":156,"column":59,"index":7472},"line":156,"code":"      it('should not try to process the outstanding updates', function () {\n        return this.UpdateManager.processOutstandingUpdatesWithLock.called.should.equal(false);\n      });","file":"unit/js/UpdateManager/UpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return the callback","suites":["UpdateManager","continueProcessingUpdatesWithLock","when there are no outstanding updates"],"updatePoint":{"line":159,"column":43,"index":7638},"line":159,"code":"      return it('should return the callback', function () {\n        return this.callback.called.should.equal(true);\n      });","file":"unit/js/UpdateManager/UpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should get the pending updates","suites":["UpdateManager","fetchAndApplyUpdates","with updates"],"updatePoint":{"line":177,"column":40,"index":8385},"line":177,"code":"      it('should get the pending updates', function () {\n        return this.RealTimeRedisManager.getPendingUpdatesForDoc.calledWith(this.doc_id).should.equal(true);\n      });","file":"unit/js/UpdateManager/UpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should apply the updates","suites":["UpdateManager","fetchAndApplyUpdates","with updates"],"updatePoint":{"line":180,"column":34,"index":8555},"line":180,"code":"      it('should apply the updates', function () {\n        return Array.from(this.updates).map(update => this.UpdateManager.applyUpdate.calledWith(this.project_id, this.doc_id, update).should.equal(true));\n      });","file":"unit/js/UpdateManager/UpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback","suites":["UpdateManager","fetchAndApplyUpdates","with updates"],"updatePoint":{"line":183,"column":41,"index":8778},"line":183,"code":"      return it('should call the callback', function () {\n        return this.callback.called.should.equal(true);\n      });","file":"unit/js/UpdateManager/UpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should not call applyUpdate","suites":["UpdateManager","fetchAndApplyUpdates","when there are no updates"],"updatePoint":{"line":195,"column":37,"index":9357},"line":195,"code":"      it('should not call applyUpdate', function () {\n        return this.UpdateManager.applyUpdate.called.should.equal(false);\n      });","file":"unit/js/UpdateManager/UpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback","suites":["UpdateManager","fetchAndApplyUpdates","when there are no updates"],"updatePoint":{"line":198,"column":41,"index":9499},"line":198,"code":"      return it('should call the callback', function () {\n        return this.callback.called.should.equal(true);\n      });","file":"unit/js/UpdateManager/UpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should apply the updates via ShareJS","suites":["UpdateManager","applyUpdate","normally"],"updatePoint":{"line":248,"column":46,"index":11338},"line":248,"code":"      it('should apply the updates via ShareJS', function () {\n        return this.ShareJsUpdateManager.applyUpdate.calledWith(this.project_id, this.doc_id, this.update, this.lines, this.version).should.equal(true);\n      });","file":"unit/js/UpdateManager/UpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should update the ranges","suites":["UpdateManager","applyUpdate","normally"],"updatePoint":{"line":251,"column":34,"index":11552},"line":251,"code":"      it('should update the ranges', function () {\n        return this.RangesManager.applyUpdate.calledWith(this.project_id, this.doc_id, this.ranges, this.appliedOps, this.updatedDocLines).should.equal(true);\n      });","file":"unit/js/UpdateManager/UpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should save the document","suites":["UpdateManager","applyUpdate","normally"],"updatePoint":{"line":254,"column":34,"index":11772},"line":254,"code":"      it('should save the document', function () {\n        return this.RedisManager.updateDocument.calledWith(this.project_id, this.doc_id, this.updatedDocLines, this.version, this.appliedOps, this.updated_ranges, this.updateMeta).should.equal(true);\n      });","file":"unit/js/UpdateManager/UpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should add metadata to the ops","suites":["UpdateManager","applyUpdate","normally"],"updatePoint":{"line":257,"column":40,"index":12039},"line":257,"code":"      it('should add metadata to the ops', function () {\n        return this.UpdateManager._addProjectHistoryMetadataToOps.calledWith(this.appliedOps, this.pathname, this.projectHistoryId, this.lines).should.equal(true);\n      });","file":"unit/js/UpdateManager/UpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should push the applied ops into the history queue","suites":["UpdateManager","applyUpdate","normally"],"updatePoint":{"line":260,"column":60,"index":12290},"line":260,"code":"      it('should push the applied ops into the history queue', function () {\n        return this.HistoryManager.recordAndFlushHistoryOps.calledWith(this.project_id, this.doc_id, this.appliedOps, this.doc_ops_length, this.project_ops_length).should.equal(true);\n      });","file":"unit/js/UpdateManager/UpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback","suites":["UpdateManager","applyUpdate","normally"],"updatePoint":{"line":263,"column":41,"index":12542},"line":263,"code":"      return it('should call the callback', function () {\n        return this.callback.called.should.equal(true);\n      });","file":"unit/js/UpdateManager/UpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should apply the update but with surrogate pairs removed","suites":["UpdateManager","applyUpdate","with UTF-16 surrogate pairs in the update"],"updatePoint":{"line":277,"column":73,"index":13038},"line":277,"code":"      return it('should apply the update but with surrogate pairs removed', function () {\n        this.ShareJsUpdateManager.applyUpdate.calledWith(this.project_id, this.doc_id, this.update).should.equal(true);\n\n        // \\uFFFD is 'replacement character'\n        return this.update.op[0].i.should.equal('\\uFFFD\\uFFFD');\n      });","file":"unit/js/UpdateManager/UpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call RealTimeRedisManager.sendData with the error","suites":["UpdateManager","applyUpdate","with an error"],"updatePoint":{"line":290,"column":66,"index":13697},"line":290,"code":"      it('should call RealTimeRedisManager.sendData with the error', function () {\n        return this.RealTimeRedisManager.sendData.calledWith({\n          project_id: this.project_id,\n          doc_id: this.doc_id,\n          error: this.error.message\n        }).should.equal(true);\n      });","file":"unit/js/UpdateManager/UpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the callback with the error","suites":["UpdateManager","applyUpdate","with an error"],"updatePoint":{"line":297,"column":56,"index":13980},"line":297,"code":"      return it('should call the callback with the error', function () {\n        return this.callback.calledWith(this.error).should.equal(true);\n      });","file":"unit/js/UpdateManager/UpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should increment the doc-snapshot metric","suites":["UpdateManager","applyUpdate","when ranges get collapsed"],"updatePoint":{"line":307,"column":50,"index":14510},"line":307,"code":"      it('should increment the doc-snapshot metric', function () {\n        this.Metrics.inc.calledWith('doc-snapshot').should.equal(true);\n      });","file":"unit/js/UpdateManager/UpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call SnapshotManager.recordSnapshot","suites":["UpdateManager","applyUpdate","when ranges get collapsed"],"updatePoint":{"line":310,"column":59,"index":14668},"line":310,"code":"      return it('should call SnapshotManager.recordSnapshot', function () {\n        return this.SnapshotManager.recordSnapshot.calledWith(this.project_id, this.doc_id, this.version, this.pathname, this.lines, this.ranges).should.equal(true);\n      });","file":"unit/js/UpdateManager/UpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should add projectHistoryId, pathname and doc_length metadata to the ops","suites":["UpdateManager","_addProjectHistoryMetadataToOps"],"updatePoint":{"line":316,"column":87,"index":15022},"line":316,"code":"    return it('should add projectHistoryId, pathname and doc_length metadata to the ops', function () {\n      const lines = ['some', 'test', 'data'];\n      const appliedOps = [{\n        v: 42,\n        op: [{\n          i: 'foo',\n          p: 4\n        }, {\n          i: 'bar',\n          p: 6\n        }]\n      }, {\n        v: 45,\n        op: [{\n          d: 'qux',\n          p: 4\n        }, {\n          i: 'bazbaz',\n          p: 14\n        }]\n      }, {\n        v: 49,\n        op: [{\n          i: 'penguin',\n          p: 18\n        }]\n      }];\n      this.UpdateManager._addProjectHistoryMetadataToOps(appliedOps, this.pathname, this.projectHistoryId, lines);\n      return appliedOps.should.deep.equal([{\n        projectHistoryId: this.projectHistoryId,\n        v: 42,\n        op: [{\n          i: 'foo',\n          p: 4\n        }, {\n          i: 'bar',\n          p: 6\n        }],\n        meta: {\n          pathname: this.pathname,\n          doc_length: 14\n        }\n      }, {\n        projectHistoryId: this.projectHistoryId,\n        v: 45,\n        op: [{\n          d: 'qux',\n          p: 4\n        }, {\n          i: 'bazbaz',\n          p: 14\n        }],\n        meta: {\n          pathname: this.pathname,\n          doc_length: 20\n        } // 14 + 'foo' + 'bar'\n      }, {\n        projectHistoryId: this.projectHistoryId,\n        v: 49,\n        op: [{\n          i: 'penguin',\n          p: 18\n        }],\n        meta: {\n          pathname: this.pathname,\n          doc_length: 23\n        } // 14 - 'qux' + 'bazbaz'\n      }]);\n    });","file":"unit/js/UpdateManager/UpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should lock the doc","suites":["UpdateManager","lockUpdatesAndDo","successfully"],"updatePoint":{"line":403,"column":29,"index":17346},"line":403,"code":"      it('should lock the doc', function () {\n        return this.LockManager.getLock.calledWith(this.doc_id).should.equal(true);\n      });","file":"unit/js/UpdateManager/UpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should process any outstanding updates","suites":["UpdateManager","lockUpdatesAndDo","successfully"],"updatePoint":{"line":406,"column":48,"index":17505},"line":406,"code":"      it('should process any outstanding updates', function () {\n        return this.UpdateManager.processOutstandingUpdates.calledWith(this.project_id, this.doc_id).should.equal(true);\n      });","file":"unit/js/UpdateManager/UpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should call the method","suites":["UpdateManager","lockUpdatesAndDo","successfully"],"updatePoint":{"line":409,"column":32,"index":17685},"line":409,"code":"      it('should call the method', function () {\n        return this.method.calledWith(this.project_id, this.doc_id, this.arg1).should.equal(true);\n      });","file":"unit/js/UpdateManager/UpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return the method response to the callback","suites":["UpdateManager","lockUpdatesAndDo","successfully"],"updatePoint":{"line":412,"column":59,"index":17870},"line":412,"code":"      it('should return the method response to the callback', function () {\n        return this.callback.calledWith(null, this.response_arg1).should.equal(true);\n      });","file":"unit/js/UpdateManager/UpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should release the lock","suites":["UpdateManager","lockUpdatesAndDo","successfully"],"updatePoint":{"line":415,"column":33,"index":18016},"line":415,"code":"      it('should release the lock', function () {\n        return this.LockManager.releaseLock.calledWith(this.doc_id, this.lockValue).should.equal(true);\n      });","file":"unit/js/UpdateManager/UpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should continue processing updates","suites":["UpdateManager","lockUpdatesAndDo","successfully"],"updatePoint":{"line":418,"column":51,"index":18198},"line":418,"code":"      return it('should continue processing updates', function () {\n        return this.UpdateManager.continueProcessingUpdatesWithLock.calledWith(this.project_id, this.doc_id).should.equal(true);\n      });","file":"unit/js/UpdateManager/UpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should free the lock","suites":["UpdateManager","lockUpdatesAndDo","when processOutstandingUpdates returns an error"],"updatePoint":{"line":427,"column":30,"index":18765},"line":427,"code":"      it('should free the lock', function () {\n        return this.LockManager.releaseLock.calledWith(this.doc_id, this.lockValue).should.equal(true);\n      });","file":"unit/js/UpdateManager/UpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return the error in the callback","suites":["UpdateManager","lockUpdatesAndDo","when processOutstandingUpdates returns an error"],"updatePoint":{"line":430,"column":56,"index":18952},"line":430,"code":"      return it('should return the error in the callback', function () {\n        return this.callback.calledWith(this.error).should.equal(true);\n      });","file":"unit/js/UpdateManager/UpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should free the lock","suites":["UpdateManager","lockUpdatesAndDo","when the method returns an error"],"updatePoint":{"line":440,"column":30,"index":19522},"line":440,"code":"      it('should free the lock', function () {\n        return this.LockManager.releaseLock.calledWith(this.doc_id, this.lockValue).should.equal(true);\n      });","file":"unit/js/UpdateManager/UpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should return the error in the callback","suites":["UpdateManager","lockUpdatesAndDo","when the method returns an error"],"updatePoint":{"line":443,"column":56,"index":19709},"line":443,"code":"      return it('should return the error in the callback', function () {\n        return this.callback.calledWith(this.error).should.equal(true);\n      });","file":"unit/js/UpdateManager/UpdateManagerTests.js","skipped":false,"dir":"services/document-updater/test"},{"name":"should send a 200 for the status endpoint","suites":["Filestore"],"updatePoint":{"line":107,"column":51,"index":4035},"line":107,"code":"      it('should send a 200 for the status endpoint', async function () {\n        const response = await fetch(`${filestoreUrl}/status`);\n        expect(response.status).to.equal(200);\n        const body = await response.text();\n        expect(body).to.contain('filestore');\n        expect(body).to.contain('up');\n      });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should send a 200 for the health-check endpoint","suites":["Filestore"],"updatePoint":{"line":114,"column":57,"index":4365},"line":114,"code":"      it('should send a 200 for the health-check endpoint', async function () {\n        const response = await fetch(`${filestoreUrl}/health_check`);\n        expect(response.status).to.equal(200);\n        const body = await response.text();\n        expect(body).to.equal('OK');\n      });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should return 404 for a non-existant id","suites":["Filestore","with a file on the server"],"updatePoint":{"line":142,"column":51,"index":5843},"line":142,"code":"        it('should return 404 for a non-existant id', async function () {\n          const url = fileUrl + '___this_is_clearly_wrong___';\n          const response = await fetch(url);\n          expect(response.status).to.equal(404);\n        });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should return the file size on a HEAD request","suites":["Filestore","with a file on the server"],"updatePoint":{"line":147,"column":57,"index":6092},"line":147,"code":"        it('should return the file size on a HEAD request', async function () {\n          const expectedLength = Buffer.byteLength(constantFileContent);\n          const res = await fetch(fileUrl, {\n            method: 'HEAD'\n          });\n          expect(res.status).to.equal(200);\n          expect(res.headers.get('Content-Length')).to.equal(expectedLength.toString());\n        });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should be able get the file back","suites":["Filestore","with a file on the server"],"updatePoint":{"line":155,"column":44,"index":6463},"line":155,"code":"        it('should be able get the file back', async function () {\n          const res = await fetch(fileUrl);\n          const body = await res.text();\n          expect(body).to.equal(constantFileContent);\n        });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should not leak a socket","suites":["Filestore","with a file on the server"],"updatePoint":{"line":160,"column":36,"index":6673},"line":160,"code":"        it('should not leak a socket', async function () {\n          await fetch(fileUrl);\n          await expectNoSockets();\n        });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should be able to get back the first 9 bytes of the file","suites":["Filestore","with a file on the server"],"updatePoint":{"line":164,"column":68,"index":6843},"line":164,"code":"        it('should be able to get back the first 9 bytes of the file', async function () {\n          const res = await fetch(fileUrl, {\n            headers: {\n              Range: 'bytes=0-8'\n            }\n          });\n          const body = await res.text();\n          expect(body).to.equal('hello wor');\n        });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should be able to get back bytes 4 through 10 of the file","suites":["Filestore","with a file on the server"],"updatePoint":{"line":173,"column":69,"index":7163},"line":173,"code":"        it('should be able to get back bytes 4 through 10 of the file', async function () {\n          const res = await fetch(fileUrl, {\n            headers: {\n              Range: 'bytes=4-10'\n            }\n          });\n          const body = await res.text();\n          expect(body).to.equal('o world');\n        });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should be able to delete the file","suites":["Filestore","with a file on the server"],"updatePoint":{"line":182,"column":45,"index":7458},"line":182,"code":"        it('should be able to delete the file', async function () {\n          const response = await fetch(fileUrl, {\n            method: 'DELETE'\n          });\n          expect(response.status).to.equal(204);\n          const response2 = await fetch(fileUrl);\n          expect(response2.status).to.equal(404);\n        });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should be able to copy files","suites":["Filestore","with a file on the server"],"updatePoint":{"line":190,"column":40,"index":7775},"line":190,"code":"        it('should be able to copy files', async function () {\n          const newProjectID = ObjectId().toString();\n          const newFileId = ObjectId().toString();\n          const newFileUrl = `${filestoreUrl}/project/${newProjectID}/file/${newFileId}`;\n          let response = await fetch(newFileUrl, {\n            method: 'PUT',\n            body: JSON.stringify({\n              source: {\n                project_id: projectId,\n                file_id: fileId\n              }\n            }),\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          });\n          expect(response.status).to.equal(200);\n          response = await fetch(fileUrl, {\n            method: 'DELETE'\n          });\n          expect(response.status).to.equal(204);\n          response = await fetch(newFileUrl);\n          const body = await response.text();\n          expect(body).to.equal(constantFileContent);\n        });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should be able to overwrite the file","suites":["Filestore","with a file on the server"],"updatePoint":{"line":215,"column":48,"index":8724},"line":215,"code":"        it('should be able to overwrite the file', async function () {\n          const newContent = `here is some different content, ${Math.random()}`;\n          const readStream = streamifier.createReadStream(newContent);\n          await fetch(fileUrl, {\n            method: 'POST',\n            body: readStream\n          });\n          const response = await fetch(fileUrl);\n          const body = await response.text();\n          expect(body).to.equal(newContent);\n        });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should record an egress metric for the upload","suites":["Filestore","with a file on the server"],"updatePoint":{"line":227,"column":59,"index":9279},"line":227,"code":"          it('should record an egress metric for the upload', async function () {\n            const metric = await TestHelper.getMetric(filestoreUrl, `${metricPrefix}_egress`);\n            expect(metric - previousEgress).to.equal(constantFileContent.length);\n          });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should record an ingress metric when downloading the file","suites":["Filestore","with a file on the server"],"updatePoint":{"line":231,"column":71,"index":9564},"line":231,"code":"          it('should record an ingress metric when downloading the file', async function () {\n            const response = await fetch(fileUrl);\n            expect(response.ok).to.be.true;\n            const metric = await TestHelper.getMetric(filestoreUrl, `${metricPrefix}_ingress`);\n            expect(metric - previousIngress).to.equal(constantFileContent.length);\n          });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should record an ingress metric for a partial download","suites":["Filestore","with a file on the server"],"updatePoint":{"line":237,"column":68,"index":9943},"line":237,"code":"          it('should record an ingress metric for a partial download', async function () {\n            const response = await fetch(fileUrl, {\n              headers: {\n                Range: 'bytes=0-8'\n              }\n            });\n            expect(response.ok).to.be.true;\n            const metric = await TestHelper.getMetric(filestoreUrl, `${metricPrefix}_ingress`);\n            expect(metric - previousIngress).to.equal(9);\n          });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should get the directory size","suites":["Filestore","with multiple files"],"updatePoint":{"line":273,"column":41,"index":12132},"line":273,"code":"        it('should get the directory size', async function () {\n          const response = await fetch(`${filestoreUrl}/project/${projectId}/size`);\n          const body = await response.text();\n          expect(parseInt(JSON.parse(body)['total bytes'])).to.equal(constantFileContents[0].length + constantFileContents[1].length);\n        });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should store the files","suites":["Filestore","with multiple files"],"updatePoint":{"line":278,"column":34,"index":12467},"line":278,"code":"        it('should store the files', async function () {\n          for (const index in fileUrls) {\n            const response = await fetch(fileUrls[index]);\n            const body = await response.text();\n            expect(body).to.equal(constantFileContents[index]);\n          }\n        });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should be able to delete the project","suites":["Filestore","with multiple files"],"updatePoint":{"line":285,"column":48,"index":12775},"line":285,"code":"        it('should be able to delete the project', async function () {\n          let response = await fetch(projectUrl, {\n            method: 'DELETE'\n          });\n          expect(response.status).to.equal(204);\n          for (const index in fileUrls) {\n            response = await fetch(fileUrls[index]);\n            expect(response.status).to.equal(404);\n          }\n        });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should not delete files in other projects","suites":["Filestore","with multiple files"],"updatePoint":{"line":295,"column":53,"index":13164},"line":295,"code":"        it('should not delete files in other projects', async function () {\n          for (const index in otherFileUrls) {\n            const response = await fetch(otherFileUrls[index]);\n            expect(response.status).to.equal(200);\n          }\n        });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should not delete a partial project id","suites":["Filestore","with multiple files"],"updatePoint":{"line":301,"column":50,"index":13423},"line":301,"code":"        it('should not delete a partial project id', async function () {\n          const response = await fetch(`${filestoreUrl}/project/5`, {\n            method: 'DELETE'\n          });\n          expect(response.status).to.equal(400);\n        });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should be able to get the file back","suites":["Filestore","with a large file"],"updatePoint":{"line":321,"column":47,"index":14251},"line":321,"code":"        it('should be able to get the file back', async function () {\n          const response = await fetch(fileUrl);\n          const body = await response.text();\n          expect(body).to.equal(largeFileContent);\n        });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should not throw an error","suites":["Filestore","with a large file"],"updatePoint":{"line":326,"column":37,"index":14469},"line":326,"code":"        it('should not throw an error', function () {\n          expect(error).not.to.exist;\n        });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should not leak a socket","suites":["Filestore","with a large file"],"updatePoint":{"line":329,"column":36,"index":14572},"line":329,"code":"        it('should not leak a socket', async function () {\n          const response = await fetch(fileUrl);\n          await response.text();\n          await expectNoSockets();\n        });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should not leak a socket if the connection is aborted","suites":["Filestore","with a large file"],"updatePoint":{"line":334,"column":65,"index":14789},"line":334,"code":"        it('should not leak a socket if the connection is aborted', async function () {\n          const controller = new AbortController();\n          const response = await fetch(fileUrl, {\n            signal: controller.signal\n          });\n          expect(response.ok).to.be.true;\n          controller.abort();\n          await expectNoSockets();\n        });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should get the file from the specified bucket","suites":["Filestore","with a file in a specific bucket"],"updatePoint":{"line":371,"column":59,"index":16334},"line":371,"code":"          it('should get the file from the specified bucket', async function () {\n            const response = await fetch(fileUrl);\n            const body = await response.text();\n            expect(body).to.equal(constantFileContent);\n          });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should not throw an error","suites":["Filestore","when deleting a file in GCS"],"updatePoint":{"line":399,"column":39,"index":17351},"line":399,"code":"          it('should not throw an error', function () {\n            expect(error).not.to.exist;\n          });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should copy the file to the deleted-files bucket","suites":["Filestore","when deleting a file in GCS"],"updatePoint":{"line":402,"column":62,"index":17484},"line":402,"code":"          it('should copy the file to the deleted-files bucket', async function () {\n            await TestHelper.expectPersistorToHaveFile(app.persistor, `${Settings.filestore.stores.user_files}-deleted`, `${projectId}/${fileId}-${date.toISOString()}`, content);\n          });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should remove the file from the original bucket","suites":["Filestore","when deleting a file in GCS"],"updatePoint":{"line":405,"column":61,"index":17761},"line":405,"code":"          it('should remove the file from the original bucket', async function () {\n            await TestHelper.expectPersistorNotToHaveFile(app.persistor, Settings.filestore.stores.user_files, `${projectId}/${fileId}`);\n          });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should not find file in the primary","suites":["Filestore","with a fallback","with a file in the fallback bucket"],"updatePoint":{"line":425,"column":51,"index":18889},"line":425,"code":"            it('should not find file in the primary', async function () {\n              await TestHelper.expectPersistorNotToHaveFile(app.persistor.primaryPersistor, bucket, fileKey);\n            });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should find the file in the fallback","suites":["Filestore","with a fallback","with a file in the fallback bucket"],"updatePoint":{"line":428,"column":52,"index":19090},"line":428,"code":"            it('should find the file in the fallback', async function () {\n              await TestHelper.expectPersistorToHaveFile(app.persistor.fallbackPersistor, fallbackBucket, fileKey, constantFileContent);\n            });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should fetch the file","suites":["Filestore","with a fallback","with a file in the fallback bucket","when copyOnMiss is disabled"],"updatePoint":{"line":435,"column":39,"index":19487},"line":435,"code":"              it('should fetch the file', async function () {\n                const res = await fetch(fileUrl);\n                const body = await res.text();\n                expect(body).to.equal(constantFileContent);\n              });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should not copy the file to the primary","suites":["Filestore","with a fallback","with a file in the fallback bucket","when copyOnMiss is disabled"],"updatePoint":{"line":440,"column":57,"index":19742},"line":440,"code":"              it('should not copy the file to the primary', async function () {\n                const response = await fetch(fileUrl);\n                expect(response.ok).to.be.true;\n                await TestHelper.expectPersistorNotToHaveFile(app.persistor.primaryPersistor, bucket, fileKey);\n              });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should fetch the file","suites":["Filestore","with a fallback","with a file in the fallback bucket","when copyOnMiss is enabled"],"updatePoint":{"line":450,"column":39,"index":20233},"line":450,"code":"              it('should fetch the file', async function () {\n                const res = await fetch(fileUrl);\n                const body = await res.text();\n                expect(body).to.equal(constantFileContent);\n              });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"copies the file to the primary","suites":["Filestore","with a fallback","with a file in the fallback bucket","when copyOnMiss is enabled"],"updatePoint":{"line":455,"column":48,"index":20479},"line":455,"code":"              it('copies the file to the primary', async function () {\n                const response = await fetch(fileUrl);\n                expect(response.ok).to.be.true;\n                // wait for the file to copy in the background\n                await msleep(1000);\n                await TestHelper.expectPersistorToHaveFile(app.persistor.primaryPersistor, bucket, fileKey, constantFileContent);\n              });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should leave the old file in the old bucket","suites":["Filestore","with a fallback","with a file in the fallback bucket","when copying a file","when copyOnMiss is false"],"updatePoint":{"line":489,"column":63,"index":22062},"line":489,"code":"                it('should leave the old file in the old bucket', async function () {\n                  await TestHelper.expectPersistorToHaveFile(app.persistor.fallbackPersistor, fallbackBucket, fileKey, constantFileContent);\n                });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should not create a new file in the old bucket","suites":["Filestore","with a fallback","with a file in the fallback bucket","when copying a file","when copyOnMiss is false"],"updatePoint":{"line":492,"column":66,"index":22312},"line":492,"code":"                it('should not create a new file in the old bucket', async function () {\n                  await TestHelper.expectPersistorNotToHaveFile(app.persistor.fallbackPersistor, fallbackBucket, newFileKey);\n                });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should create a new file in the new bucket","suites":["Filestore","with a fallback","with a file in the fallback bucket","when copying a file","when copyOnMiss is false"],"updatePoint":{"line":495,"column":62,"index":22543},"line":495,"code":"                it('should create a new file in the new bucket', async function () {\n                  await TestHelper.expectPersistorToHaveFile(app.persistor.primaryPersistor, bucket, newFileKey, constantFileContent);\n                });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should not copy the old file to the primary with the old key","suites":["Filestore","with a fallback","with a file in the fallback bucket","when copying a file","when copyOnMiss is false"],"updatePoint":{"line":498,"column":80,"index":22801},"line":498,"code":"                it('should not copy the old file to the primary with the old key', async function () {\n                  // wait for the file to copy in the background\n                  await msleep(1000);\n                  await TestHelper.expectPersistorNotToHaveFile(app.persistor.primaryPersistor, bucket, fileKey);\n                });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should leave the old file in the old bucket","suites":["Filestore","with a fallback","with a file in the fallback bucket","when copying a file","when copyOnMiss is true"],"updatePoint":{"line":510,"column":63,"index":23456},"line":510,"code":"                it('should leave the old file in the old bucket', async function () {\n                  await TestHelper.expectPersistorToHaveFile(app.persistor.fallbackPersistor, fallbackBucket, fileKey, constantFileContent);\n                });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should not create a new file in the old bucket","suites":["Filestore","with a fallback","with a file in the fallback bucket","when copying a file","when copyOnMiss is true"],"updatePoint":{"line":513,"column":66,"index":23706},"line":513,"code":"                it('should not create a new file in the old bucket', async function () {\n                  await TestHelper.expectPersistorNotToHaveFile(app.persistor.fallbackPersistor, fallbackBucket, newFileKey);\n                });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should create a new file in the new bucket","suites":["Filestore","with a fallback","with a file in the fallback bucket","when copying a file","when copyOnMiss is true"],"updatePoint":{"line":516,"column":62,"index":23937},"line":516,"code":"                it('should create a new file in the new bucket', async function () {\n                  await TestHelper.expectPersistorToHaveFile(app.persistor.primaryPersistor, bucket, newFileKey, constantFileContent);\n                });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should copy the old file to the primary with the old key","suites":["Filestore","with a fallback","with a file in the fallback bucket","when copying a file","when copyOnMiss is true"],"updatePoint":{"line":519,"column":76,"index":24191},"line":519,"code":"                it('should copy the old file to the primary with the old key', async function () {\n                  // wait for the file to copy in the background\n                  await msleep(1000);\n                  await TestHelper.expectPersistorToHaveFile(app.persistor.primaryPersistor, bucket, fileKey, constantFileContent);\n                });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should store the file on the primary","suites":["Filestore","with a fallback","when sending a file"],"updatePoint":{"line":535,"column":52,"index":24888},"line":535,"code":"            it('should store the file on the primary', async function () {\n              await TestHelper.expectPersistorToHaveFile(app.persistor.primaryPersistor, bucket, fileKey, constantFileContent);\n            });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should not store the file on the fallback","suites":["Filestore","with a fallback","when sending a file"],"updatePoint":{"line":538,"column":57,"index":25112},"line":538,"code":"            it('should not store the file on the fallback', async function () {\n              await TestHelper.expectPersistorNotToHaveFile(app.persistor.fallbackPersistor, fallbackBucket, `${projectId}/${fileId}`);\n            });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should delete the file","suites":["Filestore","with a fallback","when deleting a file","when the file exists on the primary"],"updatePoint":{"line":547,"column":40,"index":25663},"line":547,"code":"              it('should delete the file', async function () {\n                const response1 = await fetch(fileUrl, {\n                  method: 'DELETE'\n                });\n                expect(response1.status).to.equal(204);\n                const response2 = await fetch(fileUrl);\n                expect(response2.status).to.equal(404);\n              });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should delete the file","suites":["Filestore","with a fallback","when deleting a file","when the file exists on the fallback"],"updatePoint":{"line":560,"column":40,"index":26315},"line":560,"code":"              it('should delete the file', async function () {\n                const response1 = await fetch(fileUrl, {\n                  method: 'DELETE'\n                });\n                expect(response1.status).to.equal(204);\n                const response2 = await fetch(fileUrl);\n                expect(response2.status).to.equal(404);\n              });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should delete the files","suites":["Filestore","with a fallback","when deleting a file","when the file exists on both the primary and the fallback"],"updatePoint":{"line":574,"column":41,"index":27117},"line":574,"code":"              it('should delete the files', async function () {\n                const response1 = await fetch(fileUrl, {\n                  method: 'DELETE'\n                });\n                expect(response1.status).to.equal(204);\n                const response2 = await fetch(fileUrl);\n                expect(response2.status).to.equal(404);\n              });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should return return 204","suites":["Filestore","with a fallback","when deleting a file","when the file does not exist"],"updatePoint":{"line":584,"column":42,"index":27563},"line":584,"code":"              it('should return return 204', async function () {\n                // S3 doesn't give us a 404 when the object doesn't exist, so to stay\n                // consistent we merrily return 204 ourselves here as well\n                const response = await fetch(fileUrl, {\n                  method: 'DELETE'\n                });\n                expect(response.status).to.equal(204);\n              });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should be able get the file back","suites":["Filestore","with a pdf file"],"updatePoint":{"line":610,"column":44,"index":28637},"line":610,"code":"        it('should be able get the file back', async function () {\n          const response = await fetch(fileUrl);\n          const body = await response.text();\n          expect(body.substring(0, 8)).to.equal('%PDF-1.5');\n        });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should record an egress metric for the upload","suites":["Filestore","with a pdf file"],"updatePoint":{"line":616,"column":59,"index":28952},"line":616,"code":"          it('should record an egress metric for the upload', async function () {\n            const metric = await TestHelper.getMetric(filestoreUrl, `${metricPrefix}_egress`);\n            expect(metric - previousEgress).to.equal(localFileSize);\n          });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should not time out","suites":["Filestore","with a pdf file","getting the preview image"],"updatePoint":{"line":627,"column":33,"index":29427},"line":627,"code":"          it('should not time out', async function () {\n            const response = await fetch(previewFileUrl);\n            expect(response.status).to.equal(200);\n          });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should respond with image data","suites":["Filestore","with a pdf file","getting the preview image"],"updatePoint":{"line":631,"column":44,"index":29617},"line":631,"code":"          it('should respond with image data', async function () {\n            // note: this test relies of the imagemagick conversion working\n            const response = await fetch(previewFileUrl);\n            const body = await response.text();\n            expect(body.length).to.be.greaterThan(400);\n            expect(body.substr(1, 3)).to.equal('PNG');\n          });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should not time out","suites":["Filestore","with a pdf file","warming the cache"],"updatePoint":{"line":645,"column":33,"index":30230},"line":645,"code":"          it('should not time out', async function () {\n            const response = await fetch(previewFileUrl);\n            expect(response.status).to.equal(200);\n          });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should respond with only an 'OK'","suites":["Filestore","with a pdf file","warming the cache"],"updatePoint":{"line":649,"column":46,"index":30422},"line":649,"code":"          it(\"should respond with only an 'OK'\", async function () {\n            // note: this test relies of the imagemagick conversion working\n            const response = await fetch(previewFileUrl);\n            const body = await response.text();\n            expect(body).to.equal('OK');\n          });","file":"acceptance/js/FilestoreTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should try and get a redirect url first","suites":["FileController","getFile"],"updatePoint":{"line":83,"column":47,"index":2320},"line":83,"code":"    it('should try and get a redirect url first', function () {\n      FileController.getFile(req, res, next);\n      expect(FileHandler.getRedirectUrl).to.have.been.calledWith(bucket, key);\n    });","file":"unit/js/FileControllerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should pipe the stream","suites":["FileController","getFile"],"updatePoint":{"line":87,"column":30,"index":2500},"line":87,"code":"    it('should pipe the stream', function () {\n      FileController.getFile(req, res, next);\n      expect(stream.pipeline).to.have.been.calledWith(fileStream, res);\n    });","file":"unit/js/FileControllerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should send a 200 if the cacheWarm param is true","suites":["FileController","getFile"],"updatePoint":{"line":91,"column":56,"index":2699},"line":91,"code":"    it('should send a 200 if the cacheWarm param is true', function (done) {\n      req.query.cacheWarm = true;\n      res.sendStatus = statusCode => {\n        statusCode.should.equal(200);\n        done();\n      };\n      FileController.getFile(req, res, next);\n    });","file":"unit/js/FileControllerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should send an error if there is a problem","suites":["FileController","getFile"],"updatePoint":{"line":99,"column":50,"index":2960},"line":99,"code":"    it('should send an error if there is a problem', function () {\n      FileHandler.getFile.yields(error);\n      FileController.getFile(req, res, next);\n      expect(next).to.have.been.calledWith(error);\n    });","file":"unit/js/FileControllerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should redirect","suites":["FileController","getFile","with a redirect url"],"updatePoint":{"line":110,"column":25,"index":3397},"line":110,"code":"      it('should redirect', function () {\n        FileController.getFile(req, res, next);\n        expect(res.redirect).to.have.been.calledWith(redirectUrl);\n      });","file":"unit/js/FileControllerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should not get a file stream","suites":["FileController","getFile","with a redirect url"],"updatePoint":{"line":114,"column":38,"index":3577},"line":114,"code":"      it('should not get a file stream', function () {\n        FileController.getFile(req, res, next);\n        expect(FileHandler.getFile).not.to.have.been.called;\n      });","file":"unit/js/FileControllerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should not redirect","suites":["FileController","getFile","with a redirect url","when there is an error getting the redirect url"],"updatePoint":{"line":122,"column":31,"index":3949},"line":122,"code":"        it('should not redirect', function () {\n          FileController.getFile(req, res, next);\n          expect(res.redirect).not.to.have.been.called;\n        });","file":"unit/js/FileControllerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should not return an error","suites":["FileController","getFile","with a redirect url","when there is an error getting the redirect url"],"updatePoint":{"line":126,"column":38,"index":4122},"line":126,"code":"        it('should not return an error', function () {\n          FileController.getFile(req, res, next);\n          expect(next).not.to.have.been.called;\n        });","file":"unit/js/FileControllerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should proxy the file","suites":["FileController","getFile","with a redirect url","when there is an error getting the redirect url"],"updatePoint":{"line":130,"column":33,"index":4282},"line":130,"code":"        it('should proxy the file', function () {\n          FileController.getFile(req, res, next);\n          expect(FileHandler.getFile).to.have.been.calledWith(bucket, key);\n        });","file":"unit/js/FileControllerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should pass range options to FileHandler","suites":["FileController","getFile","with a range header"],"updatePoint":{"line":146,"column":50,"index":4751},"line":146,"code":"      it('should pass range options to FileHandler', function () {\n        req.headers.range = 'bytes=0-8';\n        expectedOptions.start = 0;\n        expectedOptions.end = 8;\n        FileController.getFile(req, res, next);\n        expect(FileHandler.getFile).to.have.been.calledWith(bucket, key, expectedOptions);\n      });","file":"unit/js/FileControllerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should ignore an invalid range header","suites":["FileController","getFile","with a range header"],"updatePoint":{"line":153,"column":47,"index":5073},"line":153,"code":"      it('should ignore an invalid range header', function () {\n        req.headers.range = 'potato';\n        FileController.getFile(req, res, next);\n        expect(FileHandler.getFile).to.have.been.calledWith(bucket, key, expectedOptions);\n      });","file":"unit/js/FileControllerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should ignore any type other than 'bytes'","suites":["FileController","getFile","with a range header"],"updatePoint":{"line":158,"column":51,"index":5328},"line":158,"code":"      it(\"should ignore any type other than 'bytes'\", function () {\n        req.headers.range = 'wombats=0-8';\n        FileController.getFile(req, res, next);\n        expect(FileHandler.getFile).to.have.been.calledWith(bucket, key, expectedOptions);\n      });","file":"unit/js/FileControllerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should return the file size in a Content-Length header","suites":["FileController","getFileHead"],"updatePoint":{"line":166,"column":62,"index":5653},"line":166,"code":"    it('should return the file size in a Content-Length header', function (done) {\n      res.end = () => {\n        expect(res.status).to.have.been.calledWith(200);\n        expect(res.set).to.have.been.calledWith('Content-Length', fileSize);\n        done();\n      };\n      FileController.getFileHead(req, res, next);\n    });","file":"unit/js/FileControllerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should return a 404 is the file is not found","suites":["FileController","getFileHead"],"updatePoint":{"line":174,"column":52,"index":5967},"line":174,"code":"    it('should return a 404 is the file is not found', function (done) {\n      FileHandler.getFileSize.yields(new Errors.NotFoundError({\n        message: 'not found',\n        info: {}\n      }));\n      res.sendStatus = code => {\n        expect(code).to.equal(404);\n        done();\n      };\n      FileController.getFileHead(req, res, next);\n    });","file":"unit/js/FileControllerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should send an error on internal errors","suites":["FileController","getFileHead"],"updatePoint":{"line":185,"column":47,"index":6309},"line":185,"code":"    it('should send an error on internal errors', function () {\n      FileHandler.getFileSize.yields(error);\n      FileController.getFileHead(req, res, next);\n      expect(next).to.have.been.calledWith(error);\n    });","file":"unit/js/FileControllerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should send bucket name key and res to PersistorManager","suites":["FileController","insertFile"],"updatePoint":{"line":192,"column":63,"index":6588},"line":192,"code":"    it('should send bucket name key and res to PersistorManager', function (done) {\n      res.sendStatus = code => {\n        expect(FileHandler.insertFile).to.have.been.calledWith(bucket, key, req);\n        expect(code).to.equal(200);\n        done();\n      };\n      FileController.insertFile(req, res, next);\n    });","file":"unit/js/FileControllerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should send bucket name and both keys to PersistorManager","suites":["FileController","copyFile"],"updatePoint":{"line":213,"column":65,"index":7235},"line":213,"code":"    it('should send bucket name and both keys to PersistorManager', function (done) {\n      res.sendStatus = code => {\n        code.should.equal(200);\n        expect(PersistorManager.copyObject).to.have.been.calledWith(bucket, oldKey, key);\n        done();\n      };\n      FileController.copyFile(req, res, next);\n    });","file":"unit/js/FileControllerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should send a 404 if the original file was not found","suites":["FileController","copyFile"],"updatePoint":{"line":221,"column":60,"index":7551},"line":221,"code":"    it('should send a 404 if the original file was not found', function (done) {\n      PersistorManager.copyObject.rejects(new Errors.NotFoundError({\n        message: 'not found',\n        info: {}\n      }));\n      res.sendStatus = code => {\n        code.should.equal(404);\n        done();\n      };\n      FileController.copyFile(req, res, next);\n    });","file":"unit/js/FileControllerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should send an error if there was an error","suites":["FileController","copyFile"],"updatePoint":{"line":232,"column":50,"index":7894},"line":232,"code":"    it('should send an error if there was an error', function (done) {\n      PersistorManager.copyObject.rejects(error);\n      FileController.copyFile(req, res, err => {\n        expect(err).to.equal(error);\n        done();\n      });\n    });","file":"unit/js/FileControllerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should tell the file handler","suites":["FileController","delete file"],"updatePoint":{"line":241,"column":36,"index":8167},"line":241,"code":"    it('should tell the file handler', function (done) {\n      res.sendStatus = code => {\n        code.should.equal(204);\n        expect(FileHandler.deleteFile).to.have.been.calledWith(bucket, key);\n        done();\n      };\n      FileController.deleteFile(req, res, next);\n    });","file":"unit/js/FileControllerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should send a 500 if there was an error","suites":["FileController","delete file"],"updatePoint":{"line":249,"column":47,"index":8459},"line":249,"code":"    it('should send a 500 if there was an error', function () {\n      FileHandler.deleteFile.yields(error);\n      FileController.deleteFile(req, res, next);\n      expect(next).to.have.been.calledWith(error);\n    });","file":"unit/js/FileControllerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should tell the file handler","suites":["FileController","delete project"],"updatePoint":{"line":256,"column":36,"index":8713},"line":256,"code":"    it('should tell the file handler', function (done) {\n      res.sendStatus = code => {\n        code.should.equal(204);\n        expect(FileHandler.deleteProject).to.have.been.calledWith(bucket, key);\n        done();\n      };\n      FileController.deleteProject(req, res, next);\n    });","file":"unit/js/FileControllerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should send a 500 if there was an error","suites":["FileController","delete project"],"updatePoint":{"line":264,"column":47,"index":9011},"line":264,"code":"    it('should send a 500 if there was an error', function () {\n      FileHandler.deleteProject.yields(error);\n      FileController.deleteProject(req, res, next);\n      expect(next).to.have.been.calledWith(error);\n    });","file":"unit/js/FileControllerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should return total directory size bytes","suites":["FileController","directorySize"],"updatePoint":{"line":271,"column":48,"index":9282},"line":271,"code":"    it('should return total directory size bytes', function (done) {\n      FileController.directorySize(req, {\n        json: result => {\n          expect(result['total bytes']).to.equal(fileSize);\n          done();\n        }\n      });\n    });","file":"unit/js/FileControllerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should send a 500 if there was an error","suites":["FileController","directorySize"],"updatePoint":{"line":279,"column":47,"index":9524},"line":279,"code":"    it('should send a 500 if there was an error', function () {\n      FileHandler.getDirectorySize.yields(error);\n      FileController.directorySize(req, res, next);\n      expect(next).to.have.been.calledWith(error);\n    });","file":"unit/js/FileControllerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should convert the source to the requested format","suites":["FileConverter","convert"],"updatePoint":{"line":44,"column":57,"index":1178},"line":44,"code":"    it('should convert the source to the requested format', async function () {\n      await FileConverter.promises.convert(sourcePath, format);\n      const args = SafeExec.promises.args[0][0];\n      expect(args).to.include(`${sourcePath}[0]`);\n      expect(args).to.include(`${sourcePath}.${format}`);\n    });","file":"unit/js/FileConverterTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should return the dest path","suites":["FileConverter","convert"],"updatePoint":{"line":50,"column":35,"index":1466},"line":50,"code":"    it('should return the dest path', async function () {\n      const destPath = await FileConverter.promises.convert(sourcePath, format);\n      destPath.should.equal(`${sourcePath}.${format}`);\n    });","file":"unit/js/FileConverterTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should wrap the error from convert","suites":["FileConverter","convert"],"updatePoint":{"line":54,"column":42,"index":1676},"line":54,"code":"    it('should wrap the error from convert', async function () {\n      SafeExec.promises.rejects(errorMessage);\n      try {\n        await FileConverter.promises.convert(sourcePath, format);\n        expect('error should have been thrown').not.to.exist;\n      } catch (err) {\n        expect(err.name).to.equal('ConversionError');\n        expect(err.cause.toString()).to.equal(errorMessage);\n      }\n    });","file":"unit/js/FileConverterTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should not accept an non approved format","suites":["FileConverter","convert"],"updatePoint":{"line":64,"column":48,"index":2087},"line":64,"code":"    it('should not accept an non approved format', async function () {\n      try {\n        await FileConverter.promises.convert(sourcePath, 'potato');\n        expect('error should have been thrown').not.to.exist;\n      } catch (err) {\n        expect(err.name).to.equal('ConversionError');\n      }\n    });","file":"unit/js/FileConverterTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should prefix the command with Settings.commands.convertCommandPrefix","suites":["FileConverter","convert"],"updatePoint":{"line":72,"column":77,"index":2421},"line":72,"code":"    it('should prefix the command with Settings.commands.convertCommandPrefix', async function () {\n      Settings.commands.convertCommandPrefix = ['nice'];\n      await FileConverter.promises.convert(sourcePath, format);\n    });","file":"unit/js/FileConverterTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should convert the file when called as a callback","suites":["FileConverter","convert"],"updatePoint":{"line":76,"column":57,"index":2630},"line":76,"code":"    it('should convert the file when called as a callback', function (done) {\n      FileConverter.convert(sourcePath, format, (err, destPath) => {\n        expect(err).not.to.exist;\n        destPath.should.equal(`${sourcePath}.${format}`);\n        const args = SafeExec.promises.args[0][0];\n        expect(args).to.include(`${sourcePath}[0]`);\n        expect(args).to.include(`${sourcePath}.${format}`);\n        done();\n      });\n    });","file":"unit/js/FileConverterTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should call converter resize with args","suites":["FileConverter","thumbnail"],"updatePoint":{"line":88,"column":46,"index":3100},"line":88,"code":"    it('should call converter resize with args', async function () {\n      await FileConverter.promises.thumbnail(sourcePath);\n      const args = SafeExec.promises.args[0][0];\n      expect(args).to.include(`${sourcePath}[0]`);\n    });","file":"unit/js/FileConverterTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should call converter resize with args","suites":["FileConverter","preview"],"updatePoint":{"line":95,"column":46,"index":3377},"line":95,"code":"    it('should call converter resize with args', async function () {\n      await FileConverter.promises.preview(sourcePath);\n      const args = SafeExec.promises.args[0][0];\n      expect(args).to.include(`${sourcePath}[0]`);\n    });","file":"unit/js/FileConverterTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should send file to the filestore","suites":["FileHandler","insertFile"],"updatePoint":{"line":90,"column":41,"index":2798},"line":90,"code":"    it('should send file to the filestore', function (done) {\n      FileHandler.insertFile(bucket, key, stream, err => {\n        expect(err).not.to.exist;\n        expect(PersistorManager.sendStream).to.have.been.calledWith(bucket, key, stream);\n        done();\n      });\n    });","file":"unit/js/FileHandlerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should not make a delete request for the convertedKey folder","suites":["FileHandler","insertFile"],"updatePoint":{"line":97,"column":68,"index":3104},"line":97,"code":"    it('should not make a delete request for the convertedKey folder', function (done) {\n      FileHandler.insertFile(bucket, key, stream, err => {\n        expect(err).not.to.exist;\n        expect(PersistorManager.deleteDirectory).not.to.have.been.called;\n        done();\n      });\n    });","file":"unit/js/FileHandlerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should accept templates-api key format","suites":["FileHandler","insertFile"],"updatePoint":{"line":104,"column":46,"index":3372},"line":104,"code":"    it('should accept templates-api key format', function (done) {\n      KeyBuilder.getConvertedFolderKey.returns('5ecba29f1a294e007d0bccb4/v/0/pdf');\n      FileHandler.insertFile(bucket, key, stream, err => {\n        expect(err).not.to.exist;\n        done();\n      });\n    });","file":"unit/js/FileHandlerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should throw an error when the key is in the wrong format","suites":["FileHandler","insertFile"],"updatePoint":{"line":111,"column":65,"index":3669},"line":111,"code":"    it('should throw an error when the key is in the wrong format', function (done) {\n      KeyBuilder.getConvertedFolderKey.returns('wombat');\n      FileHandler.insertFile(bucket, key, stream, err => {\n        expect(err).to.exist;\n        done();\n      });\n    });","file":"unit/js/FileHandlerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should delete the convertedKey folder","suites":["FileHandler","insertFile","when conversions are enabled"],"updatePoint":{"line":122,"column":47,"index":4061},"line":122,"code":"      it('should delete the convertedKey folder', function (done) {\n        FileHandler.insertFile(bucket, key, stream, err => {\n          expect(err).not.to.exist;\n          expect(PersistorManager.deleteDirectory).to.have.been.calledWith(bucket, convertedFolderKey);\n          done();\n        });\n      });","file":"unit/js/FileHandlerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should tell the filestore manager to delete the file","suites":["FileHandler","deleteFile"],"updatePoint":{"line":132,"column":60,"index":4436},"line":132,"code":"    it('should tell the filestore manager to delete the file', function (done) {\n      FileHandler.deleteFile(bucket, key, err => {\n        expect(err).not.to.exist;\n        expect(PersistorManager.deleteObject).to.have.been.calledWith(bucket, key);\n        done();\n      });\n    });","file":"unit/js/FileHandlerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should not tell the filestore manager to delete the cached folder","suites":["FileHandler","deleteFile"],"updatePoint":{"line":139,"column":73,"index":4733},"line":139,"code":"    it('should not tell the filestore manager to delete the cached folder', function (done) {\n      FileHandler.deleteFile(bucket, key, err => {\n        expect(err).not.to.exist;\n        expect(PersistorManager.deleteDirectory).not.to.have.been.called;\n        done();\n      });\n    });","file":"unit/js/FileHandlerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should accept templates-api key format","suites":["FileHandler","deleteFile"],"updatePoint":{"line":146,"column":46,"index":4993},"line":146,"code":"    it('should accept templates-api key format', function (done) {\n      KeyBuilder.getConvertedFolderKey.returns('5ecba29f1a294e007d0bccb4/v/0/pdf');\n      FileHandler.deleteFile(bucket, key, err => {\n        expect(err).not.to.exist;\n        done();\n      });\n    });","file":"unit/js/FileHandlerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should throw an error when the key is in the wrong format","suites":["FileHandler","deleteFile"],"updatePoint":{"line":153,"column":65,"index":5282},"line":153,"code":"    it('should throw an error when the key is in the wrong format', function (done) {\n      KeyBuilder.getConvertedFolderKey.returns('wombat');\n      FileHandler.deleteFile(bucket, key, err => {\n        expect(err).to.exist;\n        done();\n      });\n    });","file":"unit/js/FileHandlerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should delete the convertedKey folder","suites":["FileHandler","deleteFile","when conversions are enabled"],"updatePoint":{"line":164,"column":47,"index":5666},"line":164,"code":"      it('should delete the convertedKey folder', function (done) {\n        FileHandler.deleteFile(bucket, key, err => {\n          expect(err).not.to.exist;\n          expect(PersistorManager.deleteDirectory).to.have.been.calledWith(bucket, convertedFolderKey);\n          done();\n        });\n      });","file":"unit/js/FileHandlerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should tell the filestore manager to delete the folder","suites":["FileHandler","deleteProject"],"updatePoint":{"line":174,"column":62,"index":6038},"line":174,"code":"    it('should tell the filestore manager to delete the folder', function (done) {\n      FileHandler.deleteProject(bucket, projectKey, err => {\n        expect(err).not.to.exist;\n        expect(PersistorManager.deleteDirectory).to.have.been.calledWith(bucket, projectKey);\n        done();\n      });\n    });","file":"unit/js/FileHandlerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should throw an error when the key is in the wrong format","suites":["FileHandler","deleteProject"],"updatePoint":{"line":181,"column":65,"index":6347},"line":181,"code":"    it('should throw an error when the key is in the wrong format', function (done) {\n      FileHandler.deleteProject(bucket, 'wombat', err => {\n        expect(err).to.exist;\n        done();\n      });\n    });","file":"unit/js/FileHandlerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should return the source stream no format or style are defined","suites":["FileHandler","getFile"],"updatePoint":{"line":189,"column":70,"index":6603},"line":189,"code":"    it('should return the source stream no format or style are defined', function (done) {\n      FileHandler.getFile(bucket, key, null, (err, stream) => {\n        expect(err).not.to.exist;\n        expect(stream).to.equal(sourceStream);\n        done();\n      });\n    });","file":"unit/js/FileHandlerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should pass options through to PersistorManager","suites":["FileHandler","getFile"],"updatePoint":{"line":196,"column":55,"index":6858},"line":196,"code":"    it('should pass options through to PersistorManager', function (done) {\n      const options = {\n        start: 0,\n        end: 8\n      };\n      FileHandler.getFile(bucket, key, options, err => {\n        expect(err).not.to.exist;\n        expect(PersistorManager.getObjectStream).to.have.been.calledWith(bucket, key, options);\n        done();\n      });\n    });","file":"unit/js/FileHandlerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should convert the file","suites":["FileHandler","getFile","when a format is defined","when the file is not cached"],"updatePoint":{"line":221,"column":35,"index":7598},"line":221,"code":"        it('should convert the file', function () {\n          expect(FileConverter.promises.convert).to.have.been.called;\n        });","file":"unit/js/FileHandlerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should compress the converted file","suites":["FileHandler","getFile","when a format is defined","when the file is not cached"],"updatePoint":{"line":224,"column":46,"index":7743},"line":224,"code":"        it('should compress the converted file', function () {\n          expect(ImageOptimiser.promises.compressPng).to.have.been.called;\n        });","file":"unit/js/FileHandlerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should return the the converted stream","suites":["FileHandler","getFile","when a format is defined","when the file is not cached"],"updatePoint":{"line":227,"column":50,"index":7897},"line":227,"code":"        it('should return the the converted stream', function () {\n          expect(result.err).not.to.exist;\n          expect(result.stream).to.equal(readStream);\n          expect(PersistorManager.getObjectStream).to.have.been.calledWith(bucket, key);\n        });","file":"unit/js/FileHandlerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should not convert the file","suites":["FileHandler","getFile","when a format is defined","when the file is cached"],"updatePoint":{"line":246,"column":39,"index":8559},"line":246,"code":"        it('should not convert the file', function () {\n          expect(FileConverter.promises.convert).not.to.have.been.called;\n        });","file":"unit/js/FileHandlerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should not compress the converted file again","suites":["FileHandler","getFile","when a format is defined","when the file is cached"],"updatePoint":{"line":249,"column":56,"index":8718},"line":249,"code":"        it('should not compress the converted file again', function () {\n          expect(ImageOptimiser.promises.compressPng).not.to.have.been.called;\n        });","file":"unit/js/FileHandlerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should return the cached stream","suites":["FileHandler","getFile","when a format is defined","when the file is cached"],"updatePoint":{"line":252,"column":43,"index":8869},"line":252,"code":"        it('should return the cached stream', function () {\n          expect(result.err).not.to.exist;\n          expect(result.stream).to.equal(sourceStream);\n          expect(PersistorManager.getObjectStream).to.have.been.calledWith(bucket, convertedKey);\n        });","file":"unit/js/FileHandlerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"generates a thumbnail when requested","suites":["FileHandler","getFile","when a style is defined"],"updatePoint":{"line":260,"column":46,"index":9213},"line":260,"code":"      it('generates a thumbnail when requested', function (done) {\n        FileHandler.getFile(bucket, key, {\n          style: 'thumbnail'\n        }, err => {\n          expect(err).not.to.exist;\n          expect(FileConverter.promises.thumbnail).to.have.been.called;\n          expect(FileConverter.promises.preview).not.to.have.been.called;\n          done();\n        });\n      });","file":"unit/js/FileHandlerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"generates a preview when requested","suites":["FileHandler","getFile","when a style is defined"],"updatePoint":{"line":270,"column":44,"index":9592},"line":270,"code":"      it('generates a preview when requested', function (done) {\n        FileHandler.getFile(bucket, key, {\n          style: 'preview'\n        }, err => {\n          expect(err).not.to.exist;\n          expect(FileConverter.promises.thumbnail).not.to.have.been.called;\n          expect(FileConverter.promises.preview).to.have.been.called;\n          done();\n        });\n      });","file":"unit/js/FileHandlerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should return a redirect url","suites":["FileHandler","getRedirectUrl"],"updatePoint":{"line":291,"column":36,"index":10179},"line":291,"code":"    it('should return a redirect url', function (done) {\n      FileHandler.getRedirectUrl(bucket, key, (err, url) => {\n        expect(err).not.to.exist;\n        expect(url).to.equal(redirectUrl);\n        done();\n      });\n    });","file":"unit/js/FileHandlerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should call the persistor to get a redirect url","suites":["FileHandler","getRedirectUrl"],"updatePoint":{"line":298,"column":55,"index":10428},"line":298,"code":"    it('should call the persistor to get a redirect url', function (done) {\n      FileHandler.getRedirectUrl(bucket, key, () => {\n        expect(PersistorManager.getRedirectUrl).to.have.been.calledWith(bucket, key);\n        done();\n      });\n    });","file":"unit/js/FileHandlerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should return null if options are supplied","suites":["FileHandler","getRedirectUrl"],"updatePoint":{"line":304,"column":50,"index":10673},"line":304,"code":"    it('should return null if options are supplied', function (done) {\n      FileHandler.getRedirectUrl(bucket, key, {\n        start: 100,\n        end: 200\n      }, (err, url) => {\n        expect(err).not.to.exist;\n        expect(url).to.be.null;\n        done();\n      });\n    });","file":"unit/js/FileHandlerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should return null if the bucket is not one of the defined ones","suites":["FileHandler","getRedirectUrl"],"updatePoint":{"line":314,"column":71,"index":10975},"line":314,"code":"    it('should return null if the bucket is not one of the defined ones', function (done) {\n      FileHandler.getRedirectUrl('a_different_bucket', key, (err, url) => {\n        expect(err).not.to.exist;\n        expect(url).to.be.null;\n        done();\n      });\n    });","file":"unit/js/FileHandlerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should return null if redirects are not enabled","suites":["FileHandler","getRedirectUrl"],"updatePoint":{"line":321,"column":55,"index":11227},"line":321,"code":"    it('should return null if redirects are not enabled', function (done) {\n      Settings.filestore.allowRedirects = false;\n      FileHandler.getRedirectUrl(bucket, key, (err, url) => {\n        expect(err).not.to.exist;\n        expect(url).to.be.null;\n        done();\n      });\n    });","file":"unit/js/FileHandlerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should call the filestore manager to get directory size","suites":["FileHandler","getDirectorySize"],"updatePoint":{"line":331,"column":63,"index":11573},"line":331,"code":"    it('should call the filestore manager to get directory size', function (done) {\n      FileHandler.getDirectorySize(bucket, key, err => {\n        expect(err).not.to.exist;\n        expect(PersistorManager.directorySize).to.have.been.calledWith(bucket, key);\n        done();\n      });\n    });","file":"unit/js/FileHandlerTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should convert the file","suites":["ImageOptimiser","compressPng"],"updatePoint":{"line":34,"column":31,"index":892},"line":34,"code":"    it('should convert the file', function (done) {\n      ImageOptimiser.compressPng(sourcePath, err => {\n        expect(err).not.to.exist;\n        expect(SafeExec.promises).to.have.been.calledWith(['optipng', sourcePath]);\n        done();\n      });\n    });","file":"unit/js/ImageOptimiserTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should return the error","suites":["ImageOptimiser","compressPng"],"updatePoint":{"line":41,"column":31,"index":1150},"line":41,"code":"    it('should return the error', function (done) {\n      SafeExec.promises.rejects('wombat herding failure');\n      ImageOptimiser.compressPng(sourcePath, err => {\n        expect(err.toString()).to.equal('wombat herding failure');\n        done();\n      });\n    });","file":"unit/js/ImageOptimiserTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should not produce an error","suites":["ImageOptimiser","when optimiser is sigkilled"],"updatePoint":{"line":59,"column":35,"index":1760},"line":59,"code":"    it('should not produce an error', function () {\n      expect(error).not.to.exist;\n    });","file":"unit/js/ImageOptimiserTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should log a warning","suites":["ImageOptimiser","when optimiser is sigkilled"],"updatePoint":{"line":62,"column":28,"index":1847},"line":62,"code":"    it('should log a warning', function () {\n      expect(logger.warn).to.have.been.calledOnce;\n    });","file":"unit/js/ImageOptimiserTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should add the format to the key","suites":["KeybuilderTests","cachedKey"],"updatePoint":{"line":14,"column":40,"index":430},"line":14,"code":"    it('should add the format to the key', function () {\n      const opts = {\n        format: 'png'\n      };\n      const newKey = KeyBuilder.addCachingToKey(key, opts);\n      newKey.should.equal(`${key}-converted-cache/format-png`);\n    });","file":"unit/js/KeybuilderTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should add the style to the key","suites":["KeybuilderTests","cachedKey"],"updatePoint":{"line":21,"column":39,"index":670},"line":21,"code":"    it('should add the style to the key', function () {\n      const opts = {\n        style: 'thumbnail'\n      };\n      const newKey = KeyBuilder.addCachingToKey(key, opts);\n      newKey.should.equal(`${key}-converted-cache/style-thumbnail`);\n    });","file":"unit/js/KeybuilderTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should add format first, then style","suites":["KeybuilderTests","cachedKey"],"updatePoint":{"line":28,"column":43,"index":924},"line":28,"code":"    it('should add format first, then style', function () {\n      const opts = {\n        style: 'thumbnail',\n        format: 'png'\n      };\n      const newKey = KeyBuilder.addCachingToKey(key, opts);\n      newKey.should.equal(`${key}-converted-cache/format-png-style-thumbnail`);\n    });","file":"unit/js/KeybuilderTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"writes the stream to the upload folder","suites":["LocalFileWriter","writeStream"],"updatePoint":{"line":50,"column":46,"index":1296},"line":50,"code":"    it('writes the stream to the upload folder', function (done) {\n      LocalFileWriter.writeStream(readStream, filename, (err, path) => {\n        expect(err).not.to.exist;\n        expect(fs.createWriteStream).to.have.been.calledWith(fsPath);\n        expect(stream.pipeline).to.have.been.calledWith(readStream, writeStream);\n        expect(path).to.equal(fsPath);\n        done();\n      });\n    });","file":"unit/js/LocalFileWriterTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should wrap the error","suites":["LocalFileWriter","writeStream","when there is an error"],"updatePoint":{"line":64,"column":31,"index":1866},"line":64,"code":"      it('should wrap the error', function () {\n        LocalFileWriter.writeStream(readStream, filename, err => {\n          expect(err).to.exist;\n          expect(err.cause).to.equal(error);\n        });\n      });","file":"unit/js/LocalFileWriterTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should delete the temporary file","suites":["LocalFileWriter","writeStream","when there is an error"],"updatePoint":{"line":70,"column":42,"index":2091},"line":70,"code":"      it('should delete the temporary file', function () {\n        LocalFileWriter.writeStream(readStream, filename, () => {\n          expect(fs.unlink).to.have.been.calledWith(fsPath);\n        });\n      });","file":"unit/js/LocalFileWriterTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should unlink the file","suites":["LocalFileWriter","deleteFile"],"updatePoint":{"line":78,"column":30,"index":2340},"line":78,"code":"    it('should unlink the file', function (done) {\n      LocalFileWriter.deleteFile(fsPath, err => {\n        expect(err).not.to.exist;\n        expect(fs.unlink).to.have.been.calledWith(fsPath);\n        done();\n      });\n    });","file":"unit/js/LocalFileWriterTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should not call unlink with an empty path","suites":["LocalFileWriter","deleteFile"],"updatePoint":{"line":85,"column":49,"index":2587},"line":85,"code":"    it('should not call unlink with an empty path', function (done) {\n      LocalFileWriter.deleteFile('', err => {\n        expect(err).not.to.exist;\n        expect(fs.unlink).not.to.have.been.called;\n        done();\n      });\n    });","file":"unit/js/LocalFileWriterTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should not throw a error if the file does not exist","suites":["LocalFileWriter","deleteFile"],"updatePoint":{"line":92,"column":59,"index":2832},"line":92,"code":"    it('should not throw a error if the file does not exist', function (done) {\n      const error = new Error('file not found');\n      error.code = 'ENOENT';\n      fs.unlink = sinon.stub().yields(error);\n      LocalFileWriter.deleteFile(fsPath, err => {\n        expect(err).not.to.exist;\n        done();\n      });\n    });","file":"unit/js/LocalFileWriterTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should wrap the error","suites":["LocalFileWriter","deleteFile"],"updatePoint":{"line":101,"column":29,"index":3124},"line":101,"code":"    it('should wrap the error', function (done) {\n      const error = new Error('failed to reticulate splines');\n      fs.unlink = sinon.stub().yields(error);\n      LocalFileWriter.deleteFile(fsPath, err => {\n        expect(err).to.exist;\n        expect(err.cause).to.equal(error);\n        done();\n      });\n    });","file":"unit/js/LocalFileWriterTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should execute a valid command","suites":["SafeExec","safeExec"],"updatePoint":{"line":35,"column":38,"index":830},"line":35,"code":"    it('should execute a valid command', function (done) {\n      safeExec(['/bin/echo', 'hello'], options, (err, stdout, stderr) => {\n        stdout.should.equal('hello\\n');\n        stderr.should.equal('');\n        should.not.exist(err);\n        done();\n      });\n    });","file":"unit/js/SafeExecTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should error when conversions are disabled","suites":["SafeExec","safeExec"],"updatePoint":{"line":43,"column":50,"index":1114},"line":43,"code":"    it('should error when conversions are disabled', function (done) {\n      settings.enableConversions = false;\n      safeExec(['/bin/echo', 'hello'], options, err => {\n        expect(err).to.exist;\n        done();\n      });\n    });","file":"unit/js/SafeExecTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should execute a command with non-zero exit status","suites":["SafeExec","safeExec"],"updatePoint":{"line":50,"column":58,"index":1356},"line":50,"code":"    it('should execute a command with non-zero exit status', function (done) {\n      safeExec(['/usr/bin/env', 'false'], options, err => {\n        expect(err).to.exist;\n        expect(err.name).to.equal('FailedCommandError');\n        expect(err.code).to.equal(1);\n        expect(err.stdout).to.equal('');\n        expect(err.stderr).to.equal('');\n        done();\n      });\n    });","file":"unit/js/SafeExecTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should handle an invalid command","suites":["SafeExec","safeExec"],"updatePoint":{"line":60,"column":40,"index":1718},"line":60,"code":"    it('should handle an invalid command', function (done) {\n      safeExec(['/bin/foobar'], options, err => {\n        err.code.should.equal('ENOENT');\n        done();\n      });\n    });","file":"unit/js/SafeExecTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should handle a command that runs too long","suites":["SafeExec","safeExec"],"updatePoint":{"line":66,"column":50,"index":1914},"line":66,"code":"    it('should handle a command that runs too long', function (done) {\n      safeExec(['/bin/sleep', '10'], {\n        timeout: 500,\n        killSignal: 'SIGTERM'\n      }, err => {\n        expect(err).to.exist;\n        expect(err.name).to.equal('FailedCommandError');\n        expect(err.code).to.equal('SIGTERM');\n        done();\n      });\n    });","file":"unit/js/SafeExecTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should execute a valid command","suites":["SafeExec","as a promise"],"updatePoint":{"line":82,"column":38,"index":2369},"line":82,"code":"    it('should execute a valid command', async function () {\n      const {\n        stdout,\n        stderr\n      } = await safeExec(['/bin/echo', 'hello'], options);\n      stdout.should.equal('hello\\n');\n      stderr.should.equal('');\n    });","file":"unit/js/SafeExecTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should throw a ConversionsDisabledError when appropriate","suites":["SafeExec","as a promise"],"updatePoint":{"line":90,"column":64,"index":2637},"line":90,"code":"    it('should throw a ConversionsDisabledError when appropriate', async function () {\n      settings.enableConversions = false;\n      try {\n        await safeExec(['/bin/echo', 'hello'], options);\n      } catch (err) {\n        expect(err.name).to.equal('ConversionsDisabledError');\n        return;\n      }\n      expect('method did not throw an error').not.to.exist;\n    });","file":"unit/js/SafeExecTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should throw a FailedCommandError when appropriate","suites":["SafeExec","as a promise"],"updatePoint":{"line":100,"column":58,"index":3006},"line":100,"code":"    it('should throw a FailedCommandError when appropriate', async function () {\n      try {\n        await safeExec(['/usr/bin/env', 'false'], options);\n      } catch (err) {\n        expect(err.name).to.equal('FailedCommandError');\n        expect(err.code).to.equal(1);\n        return;\n      }\n      expect('method did not throw an error').not.to.exist;\n    });","file":"unit/js/SafeExecTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should use JSONified env var if present","suites":["Settings","s3"],"updatePoint":{"line":8,"column":47,"index":224},"line":8,"code":"    it('should use JSONified env var if present', function () {\n      const s3Settings = {\n        bucket1: {\n          auth_key: 'bucket1_key',\n          auth_secret: 'bucket1_secret'\n        }\n      };\n      process.env.S3_BUCKET_CREDENTIALS = JSON.stringify(s3Settings);\n      const settings = SandboxedModule.require('@overleaf/settings', {\n        globals: {\n          console,\n          process\n        }\n      });\n      expect(settings.filestore.s3.bucketCreds).to.deep.equal(s3Settings);\n    });","file":"unit/js/SettingsTests.js","skipped":false,"dir":"services/filestore/test"},{"name":"should ask the notifications for the users notifications","suites":["Notifications Controller","getUserNotifications"],"updatePoint":{"line":38,"column":71,"index":1280},"line":38,"code":"    return it('should ask the notifications for the users notifications', function (done) {\n      this.notifications.getUserNotifications = sinon.stub().callsArgWith(1, null, this.stubbedNotification);\n      const req = {\n        params: {\n          user_id: userId\n        }\n      };\n      return this.controller.getUserNotifications(req, {\n        json: result => {\n          result.should.equal(this.stubbedNotification);\n          this.notifications.getUserNotifications.calledWith(userId).should.equal(true);\n          return done();\n        }\n      });\n    });","file":"unit/js/NotificationsControllerTest.js","skipped":false,"dir":"services/notifications/test"},{"name":"should tell the notifications to add the notification for the user","suites":["Notifications Controller","addNotification"],"updatePoint":{"line":55,"column":81,"index":1907},"line":55,"code":"    return it('should tell the notifications to add the notification for the user', function (done) {\n      this.notifications.addNotification = sinon.stub().callsArgWith(2);\n      const req = {\n        params: {\n          user_id: userId\n        },\n        body: this.stubbedNotification\n      };\n      return this.controller.addNotification(req, {\n        sendStatus: code => {\n          this.notifications.addNotification.calledWith(userId, this.stubbedNotification).should.equal(true);\n          code.should.equal(200);\n          return done();\n        }\n      });\n    });","file":"unit/js/NotificationsControllerTest.js","skipped":false,"dir":"services/notifications/test"},{"name":"should tell the notifications to mark the notification Id as read","suites":["Notifications Controller","removeNotificationId"],"updatePoint":{"line":73,"column":80,"index":2538},"line":73,"code":"    return it('should tell the notifications to mark the notification Id as read', function (done) {\n      this.notifications.removeNotificationId = sinon.stub().callsArgWith(2);\n      const req = {\n        params: {\n          user_id: userId,\n          notification_id: notificationId\n        }\n      };\n      return this.controller.removeNotificationId(req, {\n        sendStatus: code => {\n          this.notifications.removeNotificationId.calledWith(userId, notificationId).should.equal(true);\n          code.should.equal(200);\n          return done();\n        }\n      });\n    });","file":"unit/js/NotificationsControllerTest.js","skipped":false,"dir":"services/notifications/test"},{"name":"should tell the notifications to mark the notification Key as read","suites":["Notifications Controller","removeNotificationKey"],"updatePoint":{"line":91,"column":81,"index":3179},"line":91,"code":"    return it('should tell the notifications to mark the notification Key as read', function (done) {\n      this.notifications.removeNotificationKey = sinon.stub().callsArgWith(2);\n      const req = {\n        params: {\n          user_id: userId\n        },\n        body: {\n          key: notificationKey\n        }\n      };\n      return this.controller.removeNotificationKey(req, {\n        sendStatus: code => {\n          this.notifications.removeNotificationKey.calledWith(userId, notificationKey).should.equal(true);\n          code.should.equal(200);\n          return done();\n        }\n      });\n    });","file":"unit/js/NotificationsControllerTest.js","skipped":false,"dir":"services/notifications/test"},{"name":"should tell the notifications to mark the notification Key as read","suites":["Notifications Controller","removeNotificationByKeyOnly"],"updatePoint":{"line":111,"column":81,"index":3852},"line":111,"code":"    return it('should tell the notifications to mark the notification Key as read', function (done) {\n      this.notifications.removeNotificationByKeyOnly = sinon.stub().callsArgWith(1);\n      const req = {\n        params: {\n          key: notificationKey\n        }\n      };\n      return this.controller.removeNotificationByKeyOnly(req, {\n        sendStatus: code => {\n          this.notifications.removeNotificationByKeyOnly.calledWith(notificationKey).should.equal(true);\n          code.should.equal(200);\n          return done();\n        }\n      });\n    });","file":"unit/js/NotificationsControllerTest.js","skipped":false,"dir":"services/notifications/test"},{"name":"should find all notifications and return i","suites":["Notifications Tests","getUserNotifications"],"updatePoint":{"line":64,"column":57,"index":1903},"line":64,"code":"    return it('should find all notifications and return i', function (done) {\n      this.findToArrayStub.callsArgWith(0, null, this.stubbedNotificationArray);\n      return this.notifications.getUserNotifications(userId, (err, notifications) => {\n        if (err) return done(err);\n        notifications.should.equal(this.stubbedNotificationArray);\n        assert.deepEqual(this.findStub.args[0][0], {\n          user_id: ObjectId(userId),\n          templateKey: {\n            $exists: true\n          }\n        });\n        return done();\n      });\n    });","file":"unit/js/NotificationsTests.js","skipped":false,"dir":"services/notifications/test"},{"name":"should insert the notification into the collection","suites":["Notifications Tests","addNotification"],"updatePoint":{"line":100,"column":58,"index":3123},"line":100,"code":"    it('should insert the notification into the collection', function (done) {\n      return this.notifications.addNotification(userId, this.stubbedNotification, err => {\n        expect(err).not.to.exist;\n        sinon.assert.calledWith(this.updateOneStub, this.expectedQuery, {\n          $set: this.expectedDocument\n        }, {\n          upsert: true\n        });\n        return done();\n      });\n    });","file":"unit/js/NotificationsTests.js","skipped":false,"dir":"services/notifications/test"},{"name":"should fail to insert","suites":["Notifications Tests","addNotification","when there is an existing notification"],"updatePoint":{"line":115,"column":31,"index":3662},"line":115,"code":"      it('should fail to insert', function (done) {\n        return this.notifications.addNotification(userId, this.stubbedNotification, err => {\n          expect(err).not.to.exist;\n          sinon.assert.notCalled(this.updateOneStub);\n          return done();\n        });\n      });","file":"unit/js/NotificationsTests.js","skipped":false,"dir":"services/notifications/test"},{"name":"should update the key if forceCreate is true","suites":["Notifications Tests","addNotification","when there is an existing notification"],"updatePoint":{"line":122,"column":61,"index":3974},"line":122,"code":"      return it('should update the key if forceCreate is true', function (done) {\n        this.stubbedNotification.forceCreate = true;\n        return this.notifications.addNotification(userId, this.stubbedNotification, err => {\n          expect(err).not.to.exist;\n          sinon.assert.calledWith(this.updateOneStub, this.expectedQuery, {\n            $set: this.expectedDocument\n          }, {\n            upsert: true\n          });\n          return done();\n        });\n      });","file":"unit/js/NotificationsTests.js","skipped":false,"dir":"services/notifications/test"},{"name":"should add an `expires` Date field to the document","suites":["Notifications Tests","addNotification","when the notification is set to expire"],"updatePoint":{"line":156,"column":67,"index":5226},"line":156,"code":"      return it('should add an `expires` Date field to the document', function (done) {\n        return this.notifications.addNotification(userId, this.stubbedNotification, err => {\n          expect(err).not.to.exist;\n          sinon.assert.calledWith(this.updateOneStub, this.expectedQuery, {\n            $set: this.expectedDocument\n          }, {\n            upsert: true\n          });\n          return done();\n        });\n      });","file":"unit/js/NotificationsTests.js","skipped":false,"dir":"services/notifications/test"},{"name":"should produce an error","suites":["Notifications Tests","addNotification","when the notification has a nonsensical expires field"],"updatePoint":{"line":185,"column":40,"index":6270},"line":185,"code":"      return it('should produce an error', function (done) {\n        return this.notifications.addNotification(userId, this.stubbedNotification, err => {\n          ;\n          (err instanceof Error).should.equal(true);\n          sinon.assert.notCalled(this.updateOneStub);\n          return done();\n        });\n      });","file":"unit/js/NotificationsTests.js","skipped":false,"dir":"services/notifications/test"},{"name":"should mark the notification id as read","suites":["Notifications Tests","removeNotificationId"],"updatePoint":{"line":196,"column":54,"index":6667},"line":196,"code":"    return it('should mark the notification id as read', function (done) {\n      this.updateOneStub.callsArgWith(2, null);\n      return this.notifications.removeNotificationId(userId, notificationId, err => {\n        if (err) return done(err);\n        const searchOps = {\n          user_id: ObjectId(userId),\n          _id: ObjectId(notificationId)\n        };\n        const updateOperation = {\n          $unset: {\n            templateKey: true,\n            messageOpts: true\n          }\n        };\n        assert.deepEqual(this.updateOneStub.args[0][0], searchOps);\n        assert.deepEqual(this.updateOneStub.args[0][1], updateOperation);\n        return done();\n      });\n    });","file":"unit/js/NotificationsTests.js","skipped":false,"dir":"services/notifications/test"},{"name":"should mark the notification key as read","suites":["Notifications Tests","removeNotificationKey"],"updatePoint":{"line":217,"column":55,"index":7405},"line":217,"code":"    return it('should mark the notification key as read', function (done) {\n      this.updateOneStub.callsArgWith(2, null);\n      return this.notifications.removeNotificationKey(userId, notificationKey, err => {\n        if (err) return done(err);\n        const searchOps = {\n          user_id: ObjectId(userId),\n          key: notificationKey\n        };\n        const updateOperation = {\n          $unset: {\n            templateKey: true\n          }\n        };\n        assert.deepEqual(this.updateOneStub.args[0][0], searchOps);\n        assert.deepEqual(this.updateOneStub.args[0][1], updateOperation);\n        return done();\n      });\n    });","file":"unit/js/NotificationsTests.js","skipped":false,"dir":"services/notifications/test"},{"name":"should mark the notification key as read","suites":["Notifications Tests","removeNotificationByKeyOnly"],"updatePoint":{"line":237,"column":55,"index":8111},"line":237,"code":"    return it('should mark the notification key as read', function (done) {\n      this.updateOneStub.callsArgWith(2, null);\n      return this.notifications.removeNotificationByKeyOnly(notificationKey, err => {\n        if (err) return done(err);\n        const searchOps = {\n          key: notificationKey\n        };\n        const updateOperation = {\n          $unset: {\n            templateKey: true\n          }\n        };\n        assert.deepEqual(this.updateOneStub.args[0][0], searchOps);\n        assert.deepEqual(this.updateOneStub.args[0][1], updateOperation);\n        return done();\n      });\n    });","file":"unit/js/NotificationsTests.js","skipped":false,"dir":"services/notifications/test"},{"name":"should completely remove the notification","suites":["Notifications Tests","deleteNotificationByKeyOnly"],"updatePoint":{"line":256,"column":56,"index":8786},"line":256,"code":"    return it('should completely remove the notification', function (done) {\n      this.deleteOneStub.callsArgWith(1, null);\n      return this.notifications.deleteNotificationByKeyOnly(notificationKey, err => {\n        if (err) return done(err);\n        const searchOps = {\n          key: notificationKey\n        };\n        assert.deepEqual(this.deleteOneStub.args[0][0], searchOps);\n        return done();\n      });\n    });","file":"unit/js/NotificationsTests.js","skipped":false,"dir":"services/notifications/test"},{"name":"should push the doc into the pending updates list","suites":["applyOtUpdate","when authorized"],"updatePoint":{"line":89,"column":57,"index":2772},"line":89,"code":"    it('should push the doc into the pending updates list', function (done) {\n      getPendingUpdatesList((error, ...rest) => {\n        if (error) return done(error);\n        const [docId] = Array.from(rest[0]);\n        docId.should.equal(`${this.project_id}:${this.doc_id}`);\n        return done();\n      });\n      return null;\n    });","file":"acceptance/js/ApplyUpdateTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should push the update into redis","suites":["applyOtUpdate","when authorized"],"updatePoint":{"line":98,"column":41,"index":3093},"line":98,"code":"    it('should push the update into redis', function (done) {\n      rclient.lrange(redisSettings.documentupdater.key_schema.pendingUpdates({\n        doc_id: this.doc_id\n      }), 0, -1, (error, ...rest) => {\n        if (error) return done(error);\n        let [update] = Array.from(rest[0]);\n        update = JSON.parse(update);\n        update.op.should.deep.equal(this.update.op);\n        update.meta.should.deep.equal({\n          source: this.client.publicId,\n          user_id: this.user_id\n        });\n        return done();\n      });\n      return null;\n    });","file":"acceptance/js/ApplyUpdateTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not return an error","suites":["applyOtUpdate","when authorized with a huge edit update"],"updatePoint":{"line":168,"column":34,"index":5419},"line":168,"code":"    it('should not return an error', function () {\n      return expect(this.error).to.not.exist;\n    });","file":"acceptance/js/ApplyUpdateTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should send an otUpdateError to the client","suites":["applyOtUpdate","when authorized with a huge edit update"],"updatePoint":{"line":171,"column":50,"index":5540},"line":171,"code":"    it('should send an otUpdateError to the client', function (done) {\n      return setTimeout(() => {\n        expect(this.otUpdateError).to.exist;\n        return done();\n      }, 300);\n    });","file":"acceptance/js/ApplyUpdateTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should disconnect the client","suites":["applyOtUpdate","when authorized with a huge edit update"],"updatePoint":{"line":177,"column":36,"index":5720},"line":177,"code":"    it('should disconnect the client', function (done) {\n      return setTimeout(() => {\n        this.client.socket.connected.should.equal(false);\n        return done();\n      }, 300);\n    });","file":"acceptance/js/ApplyUpdateTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not put the update in redis","suites":["applyOtUpdate","when authorized with a huge edit update"],"updatePoint":{"line":183,"column":49,"index":5926},"line":183,"code":"    return it('should not put the update in redis', function (done) {\n      rclient.llen(redisSettings.documentupdater.key_schema.pendingUpdates({\n        doc_id: this.doc_id\n      }), (error, len) => {\n        if (error) return done(error);\n        len.should.equal(0);\n        return done();\n      });\n      return null;\n    });","file":"acceptance/js/ApplyUpdateTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return an error","suites":["applyOtUpdate","when authorized to read-only with an edit update"],"updatePoint":{"line":234,"column":30,"index":7467},"line":234,"code":"    it('should return an error', function () {\n      return expect(this.error).to.exist;\n    });","file":"acceptance/js/ApplyUpdateTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should disconnect the client","suites":["applyOtUpdate","when authorized to read-only with an edit update"],"updatePoint":{"line":237,"column":36,"index":7570},"line":237,"code":"    it('should disconnect the client', function (done) {\n      return setTimeout(() => {\n        this.client.socket.connected.should.equal(false);\n        return done();\n      }, 300);\n    });","file":"acceptance/js/ApplyUpdateTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not put the update in redis","suites":["applyOtUpdate","when authorized to read-only with an edit update"],"updatePoint":{"line":243,"column":49,"index":7776},"line":243,"code":"    return it('should not put the update in redis', function (done) {\n      rclient.llen(redisSettings.documentupdater.key_schema.pendingUpdates({\n        doc_id: this.doc_id\n      }), (error, len) => {\n        if (error) return done(error);\n        len.should.equal(0);\n        return done();\n      });\n      return null;\n    });","file":"acceptance/js/ApplyUpdateTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should push the doc into the pending updates list","suites":["applyOtUpdate","when authorized to read-only with a comment update"],"updatePoint":{"line":297,"column":57,"index":9384},"line":297,"code":"    it('should push the doc into the pending updates list', function (done) {\n      getPendingUpdatesList((error, ...rest) => {\n        if (error) return done(error);\n        const [docId] = Array.from(rest[0]);\n        docId.should.equal(`${this.project_id}:${this.doc_id}`);\n        return done();\n      });\n      return null;\n    });","file":"acceptance/js/ApplyUpdateTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should push the update into redis","suites":["applyOtUpdate","when authorized to read-only with a comment update"],"updatePoint":{"line":306,"column":41,"index":9705},"line":306,"code":"    it('should push the update into redis', function (done) {\n      rclient.lrange(redisSettings.documentupdater.key_schema.pendingUpdates({\n        doc_id: this.doc_id\n      }), 0, -1, (error, ...rest) => {\n        if (error) return done(error);\n        let [update] = Array.from(rest[0]);\n        update = JSON.parse(update);\n        update.op.should.deep.equal(this.comment_update.op);\n        update.meta.should.deep.equal({\n          source: this.client.publicId,\n          user_id: this.user_id\n        });\n        return done();\n      });\n      return null;\n    });","file":"acceptance/js/ApplyUpdateTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return an error","suites":["applyOtUpdate","when authorized with an edit update to an invalid doc"],"updatePoint":{"line":368,"column":30,"index":11824},"line":368,"code":"    it('should return an error', function () {\n      return expect(this.error).to.exist;\n    });","file":"acceptance/js/ApplyUpdateTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should disconnect the client","suites":["applyOtUpdate","when authorized with an edit update to an invalid doc"],"updatePoint":{"line":371,"column":36,"index":11927},"line":371,"code":"    it('should disconnect the client', function (done) {\n      return setTimeout(() => {\n        this.client.socket.connected.should.equal(false);\n        return done();\n      }, 300);\n    });","file":"acceptance/js/ApplyUpdateTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not put the update in redis","suites":["applyOtUpdate","when authorized with an edit update to an invalid doc"],"updatePoint":{"line":377,"column":49,"index":12133},"line":377,"code":"    return it('should not put the update in redis', function (done) {\n      rclient.llen(redisSettings.documentupdater.key_schema.pendingUpdates({\n        doc_id: this.doc_id\n      }), (error, len) => {\n        if (error) return done(error);\n        len.should.equal(0);\n        return done();\n      });\n      return null;\n    });","file":"acceptance/js/ApplyUpdateTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return an error","suites":["applyOtUpdate","when authorized with an invalid edit update"],"updatePoint":{"line":428,"column":30,"index":13678},"line":428,"code":"    it('should return an error', function () {\n      return expect(this.error).to.exist;\n    });","file":"acceptance/js/ApplyUpdateTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should disconnect the client","suites":["applyOtUpdate","when authorized with an invalid edit update"],"updatePoint":{"line":431,"column":36,"index":13781},"line":431,"code":"    it('should disconnect the client', function (done) {\n      return setTimeout(() => {\n        this.client.socket.connected.should.equal(false);\n        return done();\n      }, 300);\n    });","file":"acceptance/js/ApplyUpdateTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not put the update in redis","suites":["applyOtUpdate","when authorized with an invalid edit update"],"updatePoint":{"line":437,"column":49,"index":13987},"line":437,"code":"    return it('should not put the update in redis', function (done) {\n      rclient.llen(redisSettings.documentupdater.key_schema.pendingUpdates({\n        doc_id: this.doc_id\n      }), (error, len) => {\n        if (error) return done(error);\n        len.should.equal(0);\n        return done();\n      });\n      return null;\n    });","file":"acceptance/js/ApplyUpdateTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should tell other clients about the update","suites":["clientTracking","when a client updates its cursor location"],"updatePoint":{"line":83,"column":50,"index":2705},"line":83,"code":"    it('should tell other clients about the update', function () {\n      return this.updates.should.deep.equal([{\n        row: this.row,\n        column: this.column,\n        doc_id: this.doc_id,\n        id: this.clientA.publicId,\n        user_id: this.user_id,\n        name: 'Joe Bloggs'\n      }]);\n    });","file":"acceptance/js/ClientTrackingTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should record the update in getConnectedUsers","suites":["clientTracking","when a client updates its cursor location"],"updatePoint":{"line":93,"column":60,"index":3022},"line":93,"code":"    return it('should record the update in getConnectedUsers', function (done) {\n      return this.clientB.emit('clientTracking.getConnectedUsers', (error, users) => {\n        if (error) return done(error);\n        for (const user of Array.from(users)) {\n          if (user.client_id === this.clientA.publicId) {\n            expect(user.cursorData).to.deep.equal({\n              row: this.row,\n              column: this.column,\n              doc_id: this.doc_id\n            });\n            return done();\n          }\n        }\n        throw new Error('user was never found');\n      });\n    });","file":"acceptance/js/ClientTrackingTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should tell other clients about the update","suites":["clientTracking","when an anonymous client updates its cursor location"],"updatePoint":{"line":175,"column":57,"index":5683},"line":175,"code":"    return it('should tell other clients about the update', function () {\n      return this.updates.should.deep.equal([{\n        row: this.row,\n        column: this.column,\n        doc_id: this.doc_id,\n        id: this.anonymous.publicId,\n        user_id: 'anonymous-user',\n        name: ''\n      }]);\n    });","file":"acceptance/js/ClientTrackingTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should have disconnected all previous clients","suites":["DrainManagerTests"],"updatePoint":{"line":45,"column":51,"index":1325},"line":45,"code":"  it('should have disconnected all previous clients', function (done) {\n    return RealTimeClient.getConnectedClients((error, data) => {\n      if (error) {\n        return done(error);\n      }\n      expect(data.length).to.equal(0);\n      return done();\n    });\n  });","file":"acceptance/js/DrainManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not timeout","suites":["DrainManagerTests","with two clients in the project","starting to drain"],"updatePoint":{"line":84,"column":28,"index":2611},"line":84,"code":"      it('should not timeout', function () {\n        return expect(true).to.equal(true);\n      });","file":"acceptance/js/DrainManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not have disconnected","suites":["DrainManagerTests","with two clients in the project","starting to drain"],"updatePoint":{"line":87,"column":45,"index":2727},"line":87,"code":"      return it('should not have disconnected', function () {\n        expect(this.clientA.socket.connected).to.equal(true);\n        return expect(this.clientB.socket.connected).to.equal(true);\n      });","file":"acceptance/js/DrainManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not subscribe to the pub/sub channel anymore (race )","suites":["EarlyDisconnect","when the client disconnects before joinProject completes"],"updatePoint":{"line":73,"column":117,"index":2777},"line":73,"code":"    }).map((_, i) => i + 1)).map(attempt => it(`should not subscribe to the pub/sub channel anymore (race ${attempt})`, function (done) {\n      rclient.pubsub('CHANNELS', (err, resp) => {\n        if (err) {\n          return done(err);\n        }\n        expect(resp).to.not.include(`editor-events:${this.project_id}`);\n        return done();\n      });\n      return null;\n    }));","file":"acceptance/js/EarlyDisconnect.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not subscribe to the pub/sub channels anymore (race )","suites":["EarlyDisconnect","when the client disconnects before joinDoc completes"],"updatePoint":{"line":137,"column":118,"index":4879},"line":137,"code":"    }).map((_, i) => i + 1)).map(attempt => it(`should not subscribe to the pub/sub channels anymore (race ${attempt})`, function (done) {\n      rclient.pubsub('CHANNELS', (err, resp) => {\n        if (err) {\n          return done(err);\n        }\n        expect(resp).to.not.include(`editor-events:${this.project_id}`);\n        return rclient.pubsub('CHANNELS', (err, resp) => {\n          if (err) {\n            return done(err);\n          }\n          expect(resp).to.not.include(`applied-ops:${this.doc_id}`);\n          return done();\n        });\n      });\n      return null;\n    }));","file":"acceptance/js/EarlyDisconnect.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not show the client as connected (race )","suites":["EarlyDisconnect","when the client disconnects before clientTracking.updatePosition starts"],"updatePoint":{"line":213,"column":105,"index":7379},"line":213,"code":"    }).map((_, i) => i + 1)).map(attempt => it(`should not show the client as connected (race ${attempt})`, function (done) {\n      rclientRT.smembers(KeysRT.clientsInProject({\n        project_id: this.project_id\n      }), (err, results) => {\n        if (err) {\n          return done(err);\n        }\n        expect(results).to.deep.equal([]);\n        return done();\n      });\n      return null;\n    }));","file":"acceptance/js/EarlyDisconnect.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return 404 for the client view","suites":["HttpControllerTests","without a user"],"updatePoint":{"line":19,"column":52,"index":713},"line":19,"code":"    return it('should return 404 for the client view', function (done) {\n      const clientId = 'not-existing';\n      return request.get({\n        url: `/clients/${clientId}`,\n        json: true\n      }, (error, response, data) => {\n        if (error) {\n          return done(error);\n        }\n        expect(response.statusCode).to.equal(404);\n        return done();\n      });\n    });","file":"acceptance/js/HttpControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should send a client view","suites":["HttpControllerTests","with a user and after joining a project"],"updatePoint":{"line":64,"column":40,"index":2064},"line":64,"code":"    return it('should send a client view', function (done) {\n      return request.get({\n        url: `/clients/${this.client.socket.sessionid}`,\n        json: true\n      }, (error, response, data) => {\n        if (error) {\n          return done(error);\n        }\n        expect(response.statusCode).to.equal(200);\n        expect(data.connected_time).to.exist;\n        delete data.connected_time;\n        // .email is not set in the session\n        delete data.email;\n        expect(data).to.deep.equal({\n          client_id: this.client.socket.sessionid,\n          first_name: 'Joe',\n          last_name: 'Bloggs',\n          project_id: this.project_id,\n          user_id: this.user_id,\n          rooms: [this.project_id, this.doc_id]\n        });\n        return done();\n      });\n    });","file":"acceptance/js/HttpControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should get the doc from the doc updater","suites":["joinDoc","when authorised readAndWrite"],"updatePoint":{"line":68,"column":47,"index":2111},"line":68,"code":"    it('should get the doc from the doc updater', function () {\n      return MockDocUpdaterServer.getDocument.calledWith(this.project_id, this.doc_id, -1).should.equal(true);\n    });","file":"acceptance/js/JoinDocTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return the doc lines, version, ranges and ops","suites":["joinDoc","when authorised readAndWrite"],"updatePoint":{"line":71,"column":60,"index":2307},"line":71,"code":"    it('should return the doc lines, version, ranges and ops', function () {\n      return this.returnedArgs.should.deep.equal([this.lines, this.version, this.ops, this.ranges]);\n    });","file":"acceptance/js/JoinDocTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should have joined the doc room","suites":["joinDoc","when authorised readAndWrite"],"updatePoint":{"line":74,"column":46,"index":2479},"line":74,"code":"    return it('should have joined the doc room', function (done) {\n      return RealTimeClient.getConnectedClient(this.client.socket.sessionid, (error, client) => {\n        if (error) return done(error);\n        expect(Array.from(client.rooms).includes(this.doc_id)).to.equal(true);\n        return done();\n      });\n    });","file":"acceptance/js/JoinDocTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should get the doc from the doc updater","suites":["joinDoc","when authorised readOnly"],"updatePoint":{"line":122,"column":47,"index":3994},"line":122,"code":"    it('should get the doc from the doc updater', function () {\n      return MockDocUpdaterServer.getDocument.calledWith(this.project_id, this.doc_id, -1).should.equal(true);\n    });","file":"acceptance/js/JoinDocTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return the doc lines, version, ranges and ops","suites":["joinDoc","when authorised readOnly"],"updatePoint":{"line":125,"column":60,"index":4190},"line":125,"code":"    it('should return the doc lines, version, ranges and ops', function () {\n      return this.returnedArgs.should.deep.equal([this.lines, this.version, this.ops, this.ranges]);\n    });","file":"acceptance/js/JoinDocTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should have joined the doc room","suites":["joinDoc","when authorised readOnly"],"updatePoint":{"line":128,"column":46,"index":4362},"line":128,"code":"    return it('should have joined the doc room', function (done) {\n      return RealTimeClient.getConnectedClient(this.client.socket.sessionid, (error, client) => {\n        if (error) return done(error);\n        expect(Array.from(client.rooms).includes(this.doc_id)).to.equal(true);\n        return done();\n      });\n    });","file":"acceptance/js/JoinDocTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should get the doc from the doc updater","suites":["joinDoc","when authorised as owner"],"updatePoint":{"line":176,"column":47,"index":5874},"line":176,"code":"    it('should get the doc from the doc updater', function () {\n      return MockDocUpdaterServer.getDocument.calledWith(this.project_id, this.doc_id, -1).should.equal(true);\n    });","file":"acceptance/js/JoinDocTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return the doc lines, version, ranges and ops","suites":["joinDoc","when authorised as owner"],"updatePoint":{"line":179,"column":60,"index":6070},"line":179,"code":"    it('should return the doc lines, version, ranges and ops', function () {\n      return this.returnedArgs.should.deep.equal([this.lines, this.version, this.ops, this.ranges]);\n    });","file":"acceptance/js/JoinDocTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should have joined the doc room","suites":["joinDoc","when authorised as owner"],"updatePoint":{"line":182,"column":46,"index":6242},"line":182,"code":"    return it('should have joined the doc room', function (done) {\n      return RealTimeClient.getConnectedClient(this.client.socket.sessionid, (error, client) => {\n        if (error) return done(error);\n        expect(Array.from(client.rooms).includes(this.doc_id)).to.equal(true);\n        return done();\n      });\n    });","file":"acceptance/js/JoinDocTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not get the doc from the doc updater","suites":["joinDoc","for an invalid doc"],"updatePoint":{"line":234,"column":51,"index":7928},"line":234,"code":"    it('should not get the doc from the doc updater', function () {\n      return MockDocUpdaterServer.getDocument.calledWith(this.project_id, 'invalid-doc-id').should.equal(false);\n    });","file":"acceptance/js/JoinDocTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return an invalid id error","suites":["joinDoc","for an invalid doc"],"updatePoint":{"line":237,"column":41,"index":8107},"line":237,"code":"    it('should return an invalid id error', function () {\n      this.error.message.should.equal('invalid id');\n    });","file":"acceptance/js/JoinDocTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not have joined the doc room","suites":["joinDoc","for an invalid doc"],"updatePoint":{"line":240,"column":50,"index":8235},"line":240,"code":"    return it('should not have joined the doc room', function (done) {\n      return RealTimeClient.getConnectedClient(this.client.socket.sessionid, (error, client) => {\n        if (error) return done(error);\n        expect(Array.from(client.rooms).includes('invalid-doc-id')).to.equal(false);\n        return done();\n      });\n    });","file":"acceptance/js/JoinDocTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should get the doc from the doc updater with the fromVersion","suites":["joinDoc","with a fromVersion"],"updatePoint":{"line":289,"column":68,"index":9822},"line":289,"code":"    it('should get the doc from the doc updater with the fromVersion', function () {\n      return MockDocUpdaterServer.getDocument.calledWith(this.project_id, this.doc_id, this.fromVersion).should.equal(true);\n    });","file":"acceptance/js/JoinDocTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return the doc lines, version, ranges and ops","suites":["joinDoc","with a fromVersion"],"updatePoint":{"line":292,"column":60,"index":10032},"line":292,"code":"    it('should return the doc lines, version, ranges and ops', function () {\n      return this.returnedArgs.should.deep.equal([this.lines, this.version, this.ops, this.ranges]);\n    });","file":"acceptance/js/JoinDocTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should have joined the doc room","suites":["joinDoc","with a fromVersion"],"updatePoint":{"line":295,"column":46,"index":10204},"line":295,"code":"    return it('should have joined the doc room', function (done) {\n      return RealTimeClient.getConnectedClient(this.client.socket.sessionid, (error, client) => {\n        if (error) return done(error);\n        expect(Array.from(client.rooms).includes(this.doc_id)).to.equal(true);\n        return done();\n      });\n    });","file":"acceptance/js/JoinDocTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should get the doc from the doc updater with the default fromVersion","suites":["joinDoc","with options"],"updatePoint":{"line":346,"column":76,"index":11813},"line":346,"code":"    it('should get the doc from the doc updater with the default fromVersion', function () {\n      return MockDocUpdaterServer.getDocument.calledWith(this.project_id, this.doc_id, -1).should.equal(true);\n    });","file":"acceptance/js/JoinDocTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return the doc lines, version, ranges and ops","suites":["joinDoc","with options"],"updatePoint":{"line":349,"column":60,"index":12009},"line":349,"code":"    it('should return the doc lines, version, ranges and ops', function () {\n      return this.returnedArgs.should.deep.equal([this.lines, this.version, this.ops, this.ranges]);\n    });","file":"acceptance/js/JoinDocTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should have joined the doc room","suites":["joinDoc","with options"],"updatePoint":{"line":352,"column":46,"index":12181},"line":352,"code":"    return it('should have joined the doc room', function (done) {\n      return RealTimeClient.getConnectedClient(this.client.socket.sessionid, (error, client) => {\n        if (error) return done(error);\n        expect(Array.from(client.rooms).includes(this.doc_id)).to.equal(true);\n        return done();\n      });\n    });","file":"acceptance/js/JoinDocTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should get the doc from the doc updater with the fromVersion","suites":["joinDoc","with fromVersion and options"],"updatePoint":{"line":404,"column":68,"index":13852},"line":404,"code":"    it('should get the doc from the doc updater with the fromVersion', function () {\n      return MockDocUpdaterServer.getDocument.calledWith(this.project_id, this.doc_id, this.fromVersion).should.equal(true);\n    });","file":"acceptance/js/JoinDocTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return the doc lines, version, ranges and ops","suites":["joinDoc","with fromVersion and options"],"updatePoint":{"line":407,"column":60,"index":14062},"line":407,"code":"    it('should return the doc lines, version, ranges and ops', function () {\n      return this.returnedArgs.should.deep.equal([this.lines, this.version, this.ops, this.ranges]);\n    });","file":"acceptance/js/JoinDocTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should have joined the doc room","suites":["joinDoc","with fromVersion and options"],"updatePoint":{"line":410,"column":46,"index":14234},"line":410,"code":"    return it('should have joined the doc room', function (done) {\n      return RealTimeClient.getConnectedClient(this.client.socket.sessionid, (error, client) => {\n        if (error) return done(error);\n        expect(Array.from(client.rooms).includes(this.doc_id)).to.equal(true);\n        return done();\n      });\n    });","file":"acceptance/js/JoinDocTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should get the project from web","suites":["joinProject","when authorized"],"updatePoint":{"line":47,"column":39,"index":1613},"line":47,"code":"    it('should get the project from web', function () {\n      return MockWebServer.joinProject.calledWith(this.project_id, this.user_id).should.equal(true);\n    });","file":"acceptance/js/JoinProjectTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return the project","suites":["joinProject","when authorized"],"updatePoint":{"line":50,"column":33,"index":1772},"line":50,"code":"    it('should return the project', function () {\n      return this.project.should.deep.equal({\n        name: 'Test Project'\n      });\n    });","file":"acceptance/js/JoinProjectTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return the privilege level","suites":["joinProject","when authorized"],"updatePoint":{"line":55,"column":41,"index":1923},"line":55,"code":"    it('should return the privilege level', function () {\n      return this.privilegeLevel.should.equal('owner');\n    });","file":"acceptance/js/JoinProjectTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return the protocolVersion","suites":["joinProject","when authorized"],"updatePoint":{"line":58,"column":41,"index":2045},"line":58,"code":"    it('should return the protocolVersion', function () {\n      return this.protocolVersion.should.equal(2);\n    });","file":"acceptance/js/JoinProjectTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should have joined the project room","suites":["joinProject","when authorized"],"updatePoint":{"line":61,"column":43,"index":2164},"line":61,"code":"    it('should have joined the project room', function (done) {\n      return RealTimeClient.getConnectedClient(this.client.socket.sessionid, (error, client) => {\n        if (error) return done(error);\n        expect(Array.from(client.rooms).includes(this.project_id)).to.equal(true);\n        return done();\n      });\n    });","file":"acceptance/js/JoinProjectTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should have marked the user as connected","suites":["joinProject","when authorized"],"updatePoint":{"line":68,"column":55,"index":2501},"line":68,"code":"    return it('should have marked the user as connected', function (done) {\n      return this.client.emit('clientTracking.getConnectedUsers', (error, users) => {\n        if (error) return done(error);\n        let connected = false;\n        for (const user of Array.from(users)) {\n          if (user.client_id === this.client.publicId && user.user_id === this.user_id) {\n            connected = true;\n            break;\n          }\n        }\n        expect(connected).to.equal(true);\n        return done();\n      });\n    });","file":"acceptance/js/JoinProjectTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return an error","suites":["joinProject","when not authorized"],"updatePoint":{"line":114,"column":30,"index":3976},"line":114,"code":"    it('should return an error', function () {\n      return this.error.message.should.equal('not authorized');\n    });","file":"acceptance/js/JoinProjectTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not have joined the project room","suites":["joinProject","when not authorized"],"updatePoint":{"line":117,"column":54,"index":4119},"line":117,"code":"    return it('should not have joined the project room', function (done) {\n      return RealTimeClient.getConnectedClient(this.client.socket.sessionid, (error, client) => {\n        if (error) return done(error);\n        expect(Array.from(client.rooms).includes(this.project_id)).to.equal(false);\n        return done();\n      });\n    });","file":"acceptance/js/JoinProjectTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return an error","suites":["joinProject","when not authorized and web replies with a 403"],"updatePoint":{"line":158,"column":30,"index":5483},"line":158,"code":"    it('should return an error', function () {\n      this.error.message.should.equal('not authorized');\n    });","file":"acceptance/js/JoinProjectTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not have joined the project room","suites":["joinProject","when not authorized and web replies with a 403"],"updatePoint":{"line":161,"column":47,"index":5612},"line":161,"code":"    it('should not have joined the project room', function (done) {\n      RealTimeClient.getConnectedClient(this.client.socket.sessionid, (error, client) => {\n        if (error) return done(error);\n        expect(Array.from(client.rooms).includes(this.project_id)).to.equal(false);\n        done();\n      });\n    });","file":"acceptance/js/JoinProjectTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return an error","suites":["joinProject","when deleted and web replies with a 404"],"updatePoint":{"line":202,"column":30,"index":6955},"line":202,"code":"    it('should return an error', function () {\n      this.error.code.should.equal('ProjectNotFound');\n    });","file":"acceptance/js/JoinProjectTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not have joined the project room","suites":["joinProject","when deleted and web replies with a 404"],"updatePoint":{"line":205,"column":47,"index":7082},"line":205,"code":"    it('should not have joined the project room', function (done) {\n      RealTimeClient.getConnectedClient(this.client.socket.sessionid, (error, client) => {\n        if (error) return done(error);\n        expect(Array.from(client.rooms).includes(this.project_id)).to.equal(false);\n        done();\n      });\n    });","file":"acceptance/js/JoinProjectTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return an invalid id error","suites":["joinProject","when invalid"],"updatePoint":{"line":228,"column":41,"index":7869},"line":228,"code":"    it('should return an invalid id error', function () {\n      this.error.message.should.equal('invalid id');\n    });","file":"acceptance/js/JoinProjectTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not call to web","suites":["joinProject","when invalid"],"updatePoint":{"line":231,"column":30,"index":7977},"line":231,"code":"    it('should not call to web', function () {\n      MockWebServer.joinProject.called.should.equal(false);\n    });","file":"acceptance/js/JoinProjectTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return an error","suites":["joinProject","when joining more than one project"],"updatePoint":{"line":287,"column":37,"index":9681},"line":287,"code":"    return it('should return an error', function () {\n      this.error.message.should.equal('cannot join multiple projects');\n    });","file":"acceptance/js/JoinProjectTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return a TooManyRequests error code","suites":["joinProject","when over rate limit"],"updatePoint":{"line":307,"column":57,"index":10325},"line":307,"code":"    return it('should return a TooManyRequests error code', function () {\n      this.error.message.should.equal('rate-limit hit when joining project');\n      return this.error.code.should.equal('TooManyRequests');\n    });","file":"acceptance/js/JoinProjectTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should have left the doc room","suites":["leaveDoc","when joined to a doc","then leaving the doc"],"updatePoint":{"line":86,"column":46,"index":2739},"line":86,"code":"      return it('should have left the doc room', function (done) {\n        return RealTimeClient.getConnectedClient(this.client.socket.sessionid, (error, client) => {\n          if (error) return done(error);\n          expect(Array.from(client.rooms).includes(this.doc_id)).to.equal(false);\n          return done();\n        });\n      });","file":"acceptance/js/LeaveDocTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return an error","suites":["leaveDoc","when joined to a doc","then leaving an invalid doc"],"updatePoint":{"line":101,"column":39,"index":3312},"line":101,"code":"      return it('should return an error', function () {\n        return expect(this.error).to.exist;\n      });","file":"acceptance/js/LeaveDocTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not trigger an error","suites":["leaveDoc","when joined to a doc","when sending a leaveDoc request before the previous joinDoc request has completed"],"updatePoint":{"line":116,"column":37,"index":3879},"line":116,"code":"      it('should not trigger an error', function () {\n        return sinon.assert.neverCalledWith(logger.error, sinon.match.any, \"not subscribed - shouldn't happen\");\n      });","file":"acceptance/js/LeaveDocTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should have left the doc room","suites":["leaveDoc","when joined to a doc","when sending a leaveDoc request before the previous joinDoc request has completed"],"updatePoint":{"line":119,"column":46,"index":4065},"line":119,"code":"      return it('should have left the doc room', function (done) {\n        return RealTimeClient.getConnectedClient(this.client.socket.sessionid, (error, client) => {\n          if (error) return done(error);\n          expect(Array.from(client.rooms).includes(this.doc_id)).to.equal(false);\n          return done();\n        });\n      });","file":"acceptance/js/LeaveDocTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should trigger a low level message only","suites":["leaveDoc","when joined to a doc","when sending a leaveDoc for a room the client has not joined "],"updatePoint":{"line":136,"column":56,"index":4743},"line":136,"code":"      return it('should trigger a low level message only', function () {\n        return sinon.assert.calledWith(logger.debug, sinon.match.any, 'ignoring request from client to leave room it is not in');\n      });","file":"acceptance/js/LeaveDocTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should emit a disconnect message to the room","suites":["leaveProject","with other clients in the project"],"updatePoint":{"line":91,"column":52,"index":3290},"line":91,"code":"    it('should emit a disconnect message to the room', function () {\n      return this.clientBDisconnectMessages.should.deep.equal([this.clientA.publicId]);\n    });","file":"acceptance/js/LeaveProjectTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should no longer list the client in connected users","suites":["leaveProject","with other clients in the project"],"updatePoint":{"line":94,"column":59,"index":3462},"line":94,"code":"    it('should no longer list the client in connected users', function (done) {\n      return this.clientB.emit('clientTracking.getConnectedUsers', (error, users) => {\n        if (error) return done(error);\n        for (const user of Array.from(users)) {\n          if (user.client_id === this.clientA.publicId) {\n            throw 'Expected clientA to not be listed in connected users';\n          }\n        }\n        return done();\n      });\n    });","file":"acceptance/js/LeaveProjectTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not flush the project to the document updater","suites":["leaveProject","with other clients in the project"],"updatePoint":{"line":105,"column":60,"index":3912},"line":105,"code":"    it('should not flush the project to the document updater', function () {\n      return MockDocUpdaterServer.deleteProject.calledWith(this.project_id).should.equal(false);\n    });","file":"acceptance/js/LeaveProjectTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should remain subscribed to the editor-events channels","suites":["leaveProject","with other clients in the project"],"updatePoint":{"line":108,"column":62,"index":4096},"line":108,"code":"    it('should remain subscribed to the editor-events channels', function (done) {\n      rclient.pubsub('CHANNELS', (err, resp) => {\n        if (err) {\n          return done(err);\n        }\n        resp.should.include(`editor-events:${this.project_id}`);\n        return done();\n      });\n      return null;\n    });","file":"acceptance/js/LeaveProjectTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should remain subscribed to the applied-ops channels","suites":["leaveProject","with other clients in the project"],"updatePoint":{"line":118,"column":67,"index":4416},"line":118,"code":"    return it('should remain subscribed to the applied-ops channels', function (done) {\n      rclient.pubsub('CHANNELS', (err, resp) => {\n        if (err) {\n          return done(err);\n        }\n        resp.should.include(`applied-ops:${this.doc_id}`);\n        return done();\n      });\n      return null;\n    });","file":"acceptance/js/LeaveProjectTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should flush the project to the document updater","suites":["leaveProject","with no other clients in the project"],"updatePoint":{"line":179,"column":56,"index":6345},"line":179,"code":"    it('should flush the project to the document updater', function () {\n      return MockDocUpdaterServer.deleteProject.calledWith(this.project_id).should.equal(true);\n    });","file":"acceptance/js/LeaveProjectTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not subscribe to the editor-events channels anymore","suites":["leaveProject","with no other clients in the project"],"updatePoint":{"line":182,"column":66,"index":6532},"line":182,"code":"    it('should not subscribe to the editor-events channels anymore', function (done) {\n      rclient.pubsub('CHANNELS', (err, resp) => {\n        if (err) {\n          return done(err);\n        }\n        resp.should.not.include(`editor-events:${this.project_id}`);\n        return done();\n      });\n      return null;\n    });","file":"acceptance/js/LeaveProjectTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not subscribe to the applied-ops channels anymore","suites":["leaveProject","with no other clients in the project"],"updatePoint":{"line":192,"column":71,"index":6860},"line":192,"code":"    return it('should not subscribe to the applied-ops channels anymore', function (done) {\n      rclient.pubsub('CHANNELS', (err, resp) => {\n        if (err) {\n          return done(err);\n        }\n        resp.should.not.include(`applied-ops:${this.doc_id}`);\n        return done();\n      });\n      return null;\n    });","file":"acceptance/js/LeaveProjectTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not add the user into the privateProject room","suites":["MatrixTests","rooms"],"updatePoint":{"line":324,"column":72,"index":9349},"line":324,"code":"                it('should not add the user into the privateProject room', function (done) {\n                  RealTimeClient.getConnectedClient(client.socket.sessionid, (error, client) => {\n                    if (error) return done(error);\n                    expect(client.rooms).to.not.include(privateProjectId);\n                    done();\n                  });\n                });","file":"acceptance/js/MatrixTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not add the user into the privateDoc room","suites":["MatrixTests","rooms"],"updatePoint":{"line":331,"column":68,"index":9732},"line":331,"code":"                it('should not add the user into the privateDoc room', function (done) {\n                  RealTimeClient.getConnectedClient(client.socket.sessionid, (error, client) => {\n                    if (error) return done(error);\n                    expect(client.rooms).to.not.include(privateDocId);\n                    done();\n                  });\n                });","file":"acceptance/js/MatrixTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should send nothing to client","suites":["MatrixTests","receive updates"],"updatePoint":{"line":364,"column":49,"index":11076},"line":364,"code":"                it('should send nothing to client', function () {\n                  expect(receivedMessages).to.have.length(0);\n                });","file":"acceptance/js/MatrixTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should send nothing to client","suites":["MatrixTests","receive messages from web"],"updatePoint":{"line":385,"column":49,"index":12010},"line":385,"code":"                it('should send nothing to client', function () {\n                  expect(receivedMessages).to.have.length(0);\n                });","file":"acceptance/js/MatrixTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should error out trying to send","suites":["MatrixTests","send updates"],"updatePoint":{"line":429,"column":51,"index":13801},"line":429,"code":"                it('should error out trying to send', function () {\n                  expect(receivedArgs).to.have.length(1);\n                  expect(receivedArgs[0]).to.have.property('message');\n                  // we are using an old version of chai: 1.9.2\n                  // TypeError: expect(...).to.be.oneOf is not a function\n                  expect(['no project_id found on client', 'not authorized'].includes(receivedArgs[0].message)).to.equal(true);\n                });","file":"acceptance/js/MatrixTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should submit the private users message only","suites":["MatrixTests","send updates"],"updatePoint":{"line":436,"column":64,"index":14297},"line":436,"code":"                it('should submit the private users message only', function () {\n                  expect(submittedUpdates).to.have.length(1);\n                  const update = JSON.parse(submittedUpdates[0]);\n                  expect(update.hash).to.equal('private');\n                });","file":"acceptance/js/MatrixTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not subscribe to the applied-ops channels anymore","suites":["PubSubRace","when the client leaves a doc before joinDoc completes"],"updatePoint":{"line":70,"column":71,"index":2446},"line":70,"code":"    return it('should not subscribe to the applied-ops channels anymore', function (done) {\n      rclient.pubsub('CHANNELS', (err, resp) => {\n        if (err) {\n          return done(err);\n        }\n        resp.should.not.include(`applied-ops:${this.doc_id}`);\n        return done();\n      });\n      return null;\n    });","file":"acceptance/js/PubSubRace.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not subscribe to the applied-ops channels anymore","suites":["PubSubRace","when the client emits joinDoc and leaveDoc requests frequently and leaves eventually"],"updatePoint":{"line":136,"column":71,"index":4796},"line":136,"code":"    return it('should not subscribe to the applied-ops channels anymore', function (done) {\n      rclient.pubsub('CHANNELS', (err, resp) => {\n        if (err) {\n          return done(err);\n        }\n        resp.should.not.include(`applied-ops:${this.doc_id}`);\n        return done();\n      });\n      return null;\n    });","file":"acceptance/js/PubSubRace.js","skipped":false,"dir":"services/real-time/test"},{"name":"should subscribe to the applied-ops channels","suites":["PubSubRace","when the client emits joinDoc and leaveDoc requests frequently and remains in the doc"],"updatePoint":{"line":201,"column":59,"index":7073},"line":201,"code":"    return it('should subscribe to the applied-ops channels', function (done) {\n      rclient.pubsub('CHANNELS', (err, resp) => {\n        if (err) {\n          return done(err);\n        }\n        resp.should.include(`applied-ops:${this.doc_id}`);\n        return done();\n      });\n      return null;\n    });","file":"acceptance/js/PubSubRace.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not subscribe to the editor-events channels anymore","suites":["PubSubRace","when the client disconnects before joinDoc completes"],"updatePoint":{"line":273,"column":66,"index":9495},"line":273,"code":"    it('should not subscribe to the editor-events channels anymore', function (done) {\n      rclient.pubsub('CHANNELS', (err, resp) => {\n        if (err) {\n          return done(err);\n        }\n        resp.should.not.include(`editor-events:${this.project_id}`);\n        return done();\n      });\n      return null;\n    });","file":"acceptance/js/PubSubRace.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not subscribe to the applied-ops channels anymore","suites":["PubSubRace","when the client disconnects before joinDoc completes"],"updatePoint":{"line":283,"column":71,"index":9823},"line":283,"code":"    return it('should not subscribe to the applied-ops channels anymore', function (done) {\n      rclient.pubsub('CHANNELS', (err, resp) => {\n        if (err) {\n          return done(err);\n        }\n        resp.should.not.include(`applied-ops:${this.doc_id}`);\n        return done();\n      });\n      return null;\n    });","file":"acceptance/js/PubSubRace.js","skipped":false,"dir":"services/real-time/test"},{"name":"should send the full op to clientB","suites":["receiveUpdate","with an update from clientA"],"updatePoint":{"line":151,"column":42,"index":4823},"line":151,"code":"    it('should send the full op to clientB', function () {\n      return this.clientBUpdates.should.deep.equal([this.update.op]);\n    });","file":"acceptance/js/ReceiveUpdateTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should send an ack to clientA","suites":["receiveUpdate","with an update from clientA"],"updatePoint":{"line":154,"column":37,"index":4955},"line":154,"code":"    it('should send an ack to clientA', function () {\n      return this.clientAUpdates.should.deep.equal([{\n        v: this.version,\n        doc: this.doc_id\n      }]);\n    });","file":"acceptance/js/ReceiveUpdateTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should send nothing to clientC","suites":["receiveUpdate","with an update from clientA"],"updatePoint":{"line":160,"column":45,"index":5140},"line":160,"code":"    return it('should send nothing to clientC', function () {\n      return this.clientCUpdates.should.deep.equal([]);\n    });","file":"acceptance/js/ReceiveUpdateTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should send nothing to clientA","suites":["receiveUpdate","with an update from clientC"],"updatePoint":{"line":184,"column":38,"index":5814},"line":184,"code":"    it('should send nothing to clientA', function () {\n      return this.clientAUpdates.should.deep.equal([]);\n    });","file":"acceptance/js/ReceiveUpdateTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should send nothing to clientB","suites":["receiveUpdate","with an update from clientC"],"updatePoint":{"line":187,"column":38,"index":5933},"line":187,"code":"    it('should send nothing to clientB', function () {\n      return this.clientBUpdates.should.deep.equal([]);\n    });","file":"acceptance/js/ReceiveUpdateTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should send an ack to clientC","suites":["receiveUpdate","with an update from clientC"],"updatePoint":{"line":190,"column":44,"index":6058},"line":190,"code":"    return it('should send an ack to clientC', function () {\n      return this.clientCUpdates.should.deep.equal([{\n        v: this.version,\n        doc: this.doc_id_second\n      }]);\n    });","file":"acceptance/js/ReceiveUpdateTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should send the full op to clientA","suites":["receiveUpdate","with an update from a remote client for project 1"],"updatePoint":{"line":217,"column":42,"index":6801},"line":217,"code":"    it('should send the full op to clientA', function () {\n      return this.clientAUpdates.should.deep.equal([this.update.op]);\n    });","file":"acceptance/js/ReceiveUpdateTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should send the full op to clientB","suites":["receiveUpdate","with an update from a remote client for project 1"],"updatePoint":{"line":220,"column":42,"index":6938},"line":220,"code":"    it('should send the full op to clientB', function () {\n      return this.clientBUpdates.should.deep.equal([this.update.op]);\n    });","file":"acceptance/js/ReceiveUpdateTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should send nothing to clientC","suites":["receiveUpdate","with an update from a remote client for project 1"],"updatePoint":{"line":223,"column":45,"index":7078},"line":223,"code":"    return it('should send nothing to clientC', function () {\n      return this.clientCUpdates.should.deep.equal([]);\n    });","file":"acceptance/js/ReceiveUpdateTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should send the error to the clients in the first project","suites":["receiveUpdate","with an error for the first project"],"updatePoint":{"line":236,"column":65,"index":7553},"line":236,"code":"    it('should send the error to the clients in the first project', function () {\n      this.clientAErrors.should.deep.equal([this.error]);\n      return this.clientBErrors.should.deep.equal([this.error]);\n    });","file":"acceptance/js/ReceiveUpdateTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not send any errors to the client in the second project","suites":["receiveUpdate","with an error for the first project"],"updatePoint":{"line":240,"column":70,"index":7771},"line":240,"code":"    it('should not send any errors to the client in the second project', function () {\n      return this.clientCErrors.should.deep.equal([]);\n    });","file":"acceptance/js/ReceiveUpdateTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should disconnect the clients of the first project","suites":["receiveUpdate","with an error for the first project"],"updatePoint":{"line":243,"column":58,"index":7909},"line":243,"code":"    it('should disconnect the clients of the first project', function () {\n      this.clientA.socket.connected.should.equal(false);\n      return this.clientB.socket.connected.should.equal(false);\n    });","file":"acceptance/js/ReceiveUpdateTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not disconnect the client in the second project","suites":["receiveUpdate","with an error for the first project"],"updatePoint":{"line":247,"column":69,"index":8124},"line":247,"code":"    return it('should not disconnect the client in the second project', function () {\n      return this.clientC.socket.connected.should.equal(true);\n    });","file":"acceptance/js/ReceiveUpdateTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not send any errors to the clients in the first project","suites":["receiveUpdate","with an error for the second project"],"updatePoint":{"line":260,"column":70,"index":8626},"line":260,"code":"    it('should not send any errors to the clients in the first project', function () {\n      this.clientAErrors.should.deep.equal([]);\n      return this.clientBErrors.should.deep.equal([]);\n    });","file":"acceptance/js/ReceiveUpdateTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should send the error to the client in the second project","suites":["receiveUpdate","with an error for the second project"],"updatePoint":{"line":264,"column":65,"index":8819},"line":264,"code":"    it('should send the error to the client in the second project', function () {\n      return this.clientCErrors.should.deep.equal([this.error]);\n    });","file":"acceptance/js/ReceiveUpdateTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not disconnect the clients of the first project","suites":["receiveUpdate","with an error for the second project"],"updatePoint":{"line":267,"column":62,"index":8971},"line":267,"code":"    it('should not disconnect the clients of the first project', function () {\n      this.clientA.socket.connected.should.equal(true);\n      return this.clientB.socket.connected.should.equal(true);\n    });","file":"acceptance/js/ReceiveUpdateTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should disconnect the client in the second project","suites":["receiveUpdate","with an error for the second project"],"updatePoint":{"line":271,"column":65,"index":9180},"line":271,"code":"    return it('should disconnect the client in the second project', function () {\n      return this.clientC.socket.connected.should.equal(false);\n    });","file":"acceptance/js/ReceiveUpdateTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should keep on going","suites":["Router","joinProject","when there is no callback provided"],"updatePoint":{"line":50,"column":37,"index":1774},"line":50,"code":"      return it('should keep on going', function () {\n        return expect('still running').to.exist;\n      });","file":"acceptance/js/RouterTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return an error message","suites":["Router","joinProject","when there are too many arguments"],"updatePoint":{"line":88,"column":47,"index":3091},"line":88,"code":"      return it('should return an error message', function () {\n        return expect(this.error.message).to.equal('unexpected arguments');\n      });","file":"acceptance/js/RouterTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return a lookup error","suites":["SessionSockets","without cookies"],"updatePoint":{"line":29,"column":43,"index":922},"line":29,"code":"    return it('should return a lookup error', function (done) {\n      return this.checkSocket(error => {\n        expect(error).to.exist;\n        expect(error.message).to.equal('invalid session');\n        return done();\n      });\n    });","file":"acceptance/js/SessionSocketsTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return a lookup error","suites":["SessionSockets","with a different cookie"],"updatePoint":{"line":41,"column":43,"index":1309},"line":41,"code":"    return it('should return a lookup error', function (done) {\n      return this.checkSocket(error => {\n        expect(error).to.exist;\n        expect(error.message).to.equal('invalid session');\n        return done();\n      });\n    });","file":"acceptance/js/SessionSocketsTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return a lookup error","suites":["SessionSockets","with an invalid cookie"],"updatePoint":{"line":60,"column":43,"index":1897},"line":60,"code":"    return it('should return a lookup error', function (done) {\n      return this.checkSocket(error => {\n        expect(error).to.exist;\n        expect(error.message).to.equal('invalid session');\n        return done();\n      });\n    });","file":"acceptance/js/SessionSocketsTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return a lookup error","suites":["SessionSockets","with a valid cookie and no matching session"],"updatePoint":{"line":72,"column":43,"index":2318},"line":72,"code":"    return it('should return a lookup error', function (done) {\n      return this.checkSocket(error => {\n        expect(error).to.exist;\n        expect(error.message).to.equal('invalid session');\n        return done();\n      });\n    });","file":"acceptance/js/SessionSocketsTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not return an error","suites":["SessionSockets","with a valid cookie and a matching session"],"updatePoint":{"line":85,"column":41,"index":2736},"line":85,"code":"    return it('should not return an error', function (done) {\n      return this.checkSocket(error => {\n        expect(error).to.not.exist;\n        return done();\n      });\n    });","file":"acceptance/js/SessionSocketsTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not get disconnected","suites":["Session","with an established session"],"updatePoint":{"line":34,"column":35,"index":1012},"line":34,"code":"    it('should not get disconnected', function (done) {\n      let disconnected = false;\n      this.client.on('disconnect', () => disconnected = true);\n      return setTimeout(() => {\n        expect(disconnected).to.equal(false);\n        return done();\n      }, 500);\n    });","file":"acceptance/js/SessionTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should appear in the list of connected clients","suites":["Session","with an established session"],"updatePoint":{"line":42,"column":61,"index":1313},"line":42,"code":"    return it('should appear in the list of connected clients', function (done) {\n      return RealTimeClient.getConnectedClients((error, clients) => {\n        if (error) return done(error);\n        let included = false;\n        for (const client of Array.from(clients)) {\n          if (client.client_id === this.client.socket.sessionid) {\n            included = true;\n            break;\n          }\n        }\n        expect(included).to.equal(true);\n        return done();\n      });\n    });","file":"acceptance/js/SessionTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should allow the readOnly privilegeLevel","suites":["AuthorizationManager","assertClientCanViewProject"],"updatePoint":{"line":29,"column":48,"index":905},"line":29,"code":"    it('should allow the readOnly privilegeLevel', function (done) {\n      this.client.ol_context.privilege_level = 'readOnly';\n      return this.AuthorizationManager.assertClientCanViewProject(this.client, error => {\n        expect(error).to.be.null;\n        return done();\n      });\n    });","file":"unit/js/AuthorizationManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should allow the readAndWrite privilegeLevel","suites":["AuthorizationManager","assertClientCanViewProject"],"updatePoint":{"line":36,"column":52,"index":1202},"line":36,"code":"    it('should allow the readAndWrite privilegeLevel', function (done) {\n      this.client.ol_context.privilege_level = 'readAndWrite';\n      return this.AuthorizationManager.assertClientCanViewProject(this.client, error => {\n        expect(error).to.be.null;\n        return done();\n      });\n    });","file":"unit/js/AuthorizationManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should allow the owner privilegeLevel","suites":["AuthorizationManager","assertClientCanViewProject"],"updatePoint":{"line":43,"column":45,"index":1496},"line":43,"code":"    it('should allow the owner privilegeLevel', function (done) {\n      this.client.ol_context.privilege_level = 'owner';\n      return this.AuthorizationManager.assertClientCanViewProject(this.client, error => {\n        expect(error).to.be.null;\n        return done();\n      });\n    });","file":"unit/js/AuthorizationManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return an error with any other privilegeLevel","suites":["AuthorizationManager","assertClientCanViewProject"],"updatePoint":{"line":50,"column":67,"index":1805},"line":50,"code":"    return it('should return an error with any other privilegeLevel', function (done) {\n      this.client.ol_context.privilege_level = 'unknown';\n      return this.AuthorizationManager.assertClientCanViewProject(this.client, error => {\n        error.message.should.equal('not authorized');\n        return done();\n      });\n    });","file":"unit/js/AuthorizationManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not allow the readOnly privilegeLevel","suites":["AuthorizationManager","assertClientCanEditProject"],"updatePoint":{"line":59,"column":52,"index":2182},"line":59,"code":"    it('should not allow the readOnly privilegeLevel', function (done) {\n      this.client.ol_context.privilege_level = 'readOnly';\n      return this.AuthorizationManager.assertClientCanEditProject(this.client, error => {\n        error.message.should.equal('not authorized');\n        return done();\n      });\n    });","file":"unit/js/AuthorizationManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should allow the readAndWrite privilegeLevel","suites":["AuthorizationManager","assertClientCanEditProject"],"updatePoint":{"line":66,"column":52,"index":2499},"line":66,"code":"    it('should allow the readAndWrite privilegeLevel', function (done) {\n      this.client.ol_context.privilege_level = 'readAndWrite';\n      return this.AuthorizationManager.assertClientCanEditProject(this.client, error => {\n        expect(error).to.be.null;\n        return done();\n      });\n    });","file":"unit/js/AuthorizationManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should allow the owner privilegeLevel","suites":["AuthorizationManager","assertClientCanEditProject"],"updatePoint":{"line":73,"column":45,"index":2793},"line":73,"code":"    it('should allow the owner privilegeLevel', function (done) {\n      this.client.ol_context.privilege_level = 'owner';\n      return this.AuthorizationManager.assertClientCanEditProject(this.client, error => {\n        expect(error).to.be.null;\n        return done();\n      });\n    });","file":"unit/js/AuthorizationManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return an error with any other privilegeLevel","suites":["AuthorizationManager","assertClientCanEditProject"],"updatePoint":{"line":80,"column":67,"index":3102},"line":80,"code":"    return it('should return an error with any other privilegeLevel', function (done) {\n      this.client.ol_context.privilege_level = 'unknown';\n      return this.AuthorizationManager.assertClientCanEditProject(this.client, error => {\n        error.message.should.equal('not authorized');\n        return done();\n      });\n    });","file":"unit/js/AuthorizationManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not allow access","suites":["AuthorizationManager","assertClientCanViewProjectAndDoc","when not authorised at the project level"],"updatePoint":{"line":101,"column":33,"index":3825},"line":101,"code":"      it('should not allow access', function () {\n        return this.AuthorizationManager.assertClientCanViewProjectAndDoc(this.client, this.doc_id, err => err.message.should.equal('not authorized'));\n      });","file":"unit/js/AuthorizationManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not allow access","suites":["AuthorizationManager","assertClientCanViewProjectAndDoc","when not authorised at the project level","even when authorised at the doc level"],"updatePoint":{"line":108,"column":42,"index":4263},"line":108,"code":"        return it('should not allow access', function () {\n          return this.AuthorizationManager.assertClientCanViewProjectAndDoc(this.client, this.doc_id, err => err.message.should.equal('not authorized'));\n        });","file":"unit/js/AuthorizationManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not allow access","suites":["AuthorizationManager","assertClientCanViewProjectAndDoc","when authorised at the project level","and not authorised at the document level"],"updatePoint":{"line":118,"column":42,"index":4762},"line":118,"code":"        return it('should not allow access', function () {\n          return this.AuthorizationManager.assertClientCanViewProjectAndDoc(this.client, this.doc_id, err => err.message.should.equal('not authorized'));\n        });","file":"unit/js/AuthorizationManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should allow access","suites":["AuthorizationManager","assertClientCanViewProjectAndDoc","when authorised at the project level","and authorised at the document level"],"updatePoint":{"line":126,"column":38,"index":5202},"line":126,"code":"        return it('should allow access', function () {\n          this.AuthorizationManager.assertClientCanViewProjectAndDoc(this.client, this.doc_id, this.callback);\n          return this.callback.calledWith(null).should.equal(true);\n        });","file":"unit/js/AuthorizationManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should deny access","suites":["AuthorizationManager","assertClientCanViewProjectAndDoc","when authorised at the project level","when document authorisation is added and then removed"],"updatePoint":{"line":137,"column":37,"index":5801},"line":137,"code":"        return it('should deny access', function () {\n          return this.AuthorizationManager.assertClientCanViewProjectAndDoc(this.client, this.doc_id, err => err.message.should.equal('not authorized'));\n        });","file":"unit/js/AuthorizationManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not allow access","suites":["AuthorizationManager","assertClientCanEditProjectAndDoc","when not authorised at the project level"],"updatePoint":{"line":153,"column":33,"index":6433},"line":153,"code":"      it('should not allow access', function () {\n        return this.AuthorizationManager.assertClientCanEditProjectAndDoc(this.client, this.doc_id, err => err.message.should.equal('not authorized'));\n      });","file":"unit/js/AuthorizationManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not allow access","suites":["AuthorizationManager","assertClientCanEditProjectAndDoc","when not authorised at the project level","even when authorised at the doc level"],"updatePoint":{"line":160,"column":42,"index":6871},"line":160,"code":"        return it('should not allow access', function () {\n          return this.AuthorizationManager.assertClientCanEditProjectAndDoc(this.client, this.doc_id, err => err.message.should.equal('not authorized'));\n        });","file":"unit/js/AuthorizationManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not allow access","suites":["AuthorizationManager","assertClientCanEditProjectAndDoc","when authorised at the project level","and not authorised at the document level"],"updatePoint":{"line":170,"column":42,"index":7374},"line":170,"code":"        return it('should not allow access', function () {\n          return this.AuthorizationManager.assertClientCanEditProjectAndDoc(this.client, this.doc_id, err => err.message.should.equal('not authorized'));\n        });","file":"unit/js/AuthorizationManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should allow access","suites":["AuthorizationManager","assertClientCanEditProjectAndDoc","when authorised at the project level","and authorised at the document level"],"updatePoint":{"line":178,"column":38,"index":7814},"line":178,"code":"        return it('should allow access', function () {\n          this.AuthorizationManager.assertClientCanEditProjectAndDoc(this.client, this.doc_id, this.callback);\n          return this.callback.calledWith(null).should.equal(true);\n        });","file":"unit/js/AuthorizationManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should deny access","suites":["AuthorizationManager","assertClientCanEditProjectAndDoc","when authorised at the project level","when document authorisation is added and then removed"],"updatePoint":{"line":189,"column":37,"index":8413},"line":189,"code":"        return it('should deny access', function () {\n          return this.AuthorizationManager.assertClientCanEditProjectAndDoc(this.client, this.doc_id, err => err.message.should.equal('not authorized'));\n        });","file":"unit/js/AuthorizationManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should subscribe to the redis channel","suites":["ChannelManager","subscribe","when there is no existing subscription for this redis client"],"updatePoint":{"line":39,"column":54,"index":1342},"line":39,"code":"      return it('should subscribe to the redis channel', function () {\n        return this.rclient.subscribe.calledWithExactly('applied-ops:1234567890abcdef').should.equal(true);\n      });","file":"unit/js/ChannelManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should subscribe to the redis channel again","suites":["ChannelManager","subscribe","when there is an existing subscription for this redis client"],"updatePoint":{"line":50,"column":60,"index":1948},"line":50,"code":"      return it('should subscribe to the redis channel again', function () {\n        return this.rclient.subscribe.callCount.should.equal(2);\n      });","file":"unit/js/ChannelManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should have recorded the error","suites":["ChannelManager","subscribe","when subscribe errors"],"updatePoint":{"line":68,"column":40,"index":2973},"line":68,"code":"      it('should have recorded the error', function () {\n        return expect(this.metrics.inc.calledWithExactly('subscribe.failed.applied-ops')).to.equal(true);\n      });","file":"unit/js/ChannelManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should subscribe again","suites":["ChannelManager","subscribe","when subscribe errors"],"updatePoint":{"line":71,"column":32,"index":3138},"line":71,"code":"      it('should subscribe again', function () {\n        return this.rclient.subscribe.callCount.should.equal(2);\n      });","file":"unit/js/ChannelManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should cleanup","suites":["ChannelManager","subscribe","when subscribe errors"],"updatePoint":{"line":74,"column":31,"index":3261},"line":74,"code":"      return it('should cleanup', function () {\n        return this.ChannelManager.getClientMapEntry(this.rclient).has('applied-ops:1234567890abcdef').should.equal(false);\n      });","file":"unit/js/ChannelManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should cleanup the second subscribePromise","suites":["ChannelManager","subscribe","when subscribe errors and the clientChannelMap entry was replaced"],"updatePoint":{"line":94,"column":59,"index":4558},"line":94,"code":"      return it('should cleanup the second subscribePromise', function () {\n        return expect(this.ChannelManager.getClientMapEntry(this.rclient).has('applied-ops:1234567890abcdef')).to.equal(false);\n      });","file":"unit/js/ChannelManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should subscribe to the redis channel on this redis client","suites":["ChannelManager","subscribe","when there is an existing subscription for another redis client but not this one"],"updatePoint":{"line":106,"column":75,"index":5325},"line":106,"code":"      return it('should subscribe to the redis channel on this redis client', function () {\n        return this.rclient.subscribe.calledWithExactly('applied-ops:1234567890abcdef').should.equal(true);\n      });","file":"unit/js/ChannelManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should unsubscribe from the redis channel","suites":["ChannelManager","unsubscribe","when there is no existing subscription for this redis client"],"updatePoint":{"line":118,"column":58,"index":5891},"line":118,"code":"      return it('should unsubscribe from the redis channel', function () {\n        return this.rclient.unsubscribe.called.should.equal(true);\n      });","file":"unit/js/ChannelManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should still unsubscribe from the redis channel on this client","suites":["ChannelManager","unsubscribe","when there is an existing subscription for this another redis client but not this one"],"updatePoint":{"line":130,"column":79,"index":6574},"line":130,"code":"      return it('should still unsubscribe from the redis channel on this client', function () {\n        return this.rclient.unsubscribe.called.should.equal(true);\n      });","file":"unit/js/ChannelManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should have cleaned up","suites":["ChannelManager","unsubscribe","when unsubscribe errors and completes"],"updatePoint":{"line":143,"column":32,"index":7192},"line":143,"code":"      it('should have cleaned up', function () {\n        return this.ChannelManager.getClientMapEntry(this.rclient).has('applied-ops:1234567890abcdef').should.equal(false);\n      });","file":"unit/js/ChannelManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not error out when subscribing again","suites":["ChannelManager","unsubscribe","when unsubscribe errors and completes"],"updatePoint":{"line":146,"column":60,"index":7403},"line":146,"code":"      return it('should not error out when subscribing again', function (done) {\n        const p = this.ChannelManager.subscribe(this.rclient, 'applied-ops', '1234567890abcdef');\n        p.then(() => done()).catch(done);\n        return null;\n      });","file":"unit/js/ChannelManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should have recorded the error","suites":["ChannelManager","unsubscribe","when unsubscribe errors and another client subscribes at the same time"],"updatePoint":{"line":168,"column":40,"index":8576},"line":168,"code":"      it('should have recorded the error', function () {\n        return expect(this.metrics.inc.calledWithExactly('unsubscribe.failed.applied-ops')).to.equal(true);\n      });","file":"unit/js/ChannelManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should have subscribed","suites":["ChannelManager","unsubscribe","when unsubscribe errors and another client subscribes at the same time"],"updatePoint":{"line":171,"column":32,"index":8743},"line":171,"code":"      it('should have subscribed', function () {\n        return this.rclient.subscribe.called.should.equal(true);\n      });","file":"unit/js/ChannelManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should have discarded the finished Promise","suites":["ChannelManager","unsubscribe","when unsubscribe errors and another client subscribes at the same time"],"updatePoint":{"line":174,"column":59,"index":8894},"line":174,"code":"      return it('should have discarded the finished Promise', function () {\n        return this.ChannelManager.getClientMapEntry(this.rclient).has('applied-ops:1234567890abcdef').should.equal(false);\n      });","file":"unit/js/ChannelManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should unsubscribe from the redis channel","suites":["ChannelManager","unsubscribe","when there is an existing subscription for this redis client"],"updatePoint":{"line":186,"column":58,"index":9583},"line":186,"code":"      return it('should unsubscribe from the redis channel', function () {\n        return this.rclient.unsubscribe.calledWithExactly('applied-ops:1234567890abcdef').should.equal(true);\n      });","file":"unit/js/ChannelManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should publish on the base channel","suites":["ChannelManager","publish","when the channel is 'all'"],"updatePoint":{"line":197,"column":51,"index":10068},"line":197,"code":"      return it('should publish on the base channel', function () {\n        return this.rclient.publish.calledWithExactly('applied-ops', 'random-message').should.equal(true);\n      });","file":"unit/js/ChannelManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should publish on the per-id channel","suites":["ChannelManager","publish","when the channel has an specific id","when the individual channel setting is false"],"updatePoint":{"line":208,"column":55,"index":10674},"line":208,"code":"        return it('should publish on the per-id channel', function () {\n          this.rclient.publish.calledWithExactly('applied-ops', 'random-message').should.equal(true);\n          return this.rclient.publish.calledOnce.should.equal(true);\n        });","file":"unit/js/ChannelManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should publish on the per-id channel","suites":["ChannelManager","publish","when the channel has an specific id","when the individual channel setting is true"],"updatePoint":{"line":219,"column":55,"index":11287},"line":219,"code":"        return it('should publish on the per-id channel', function () {\n          this.rclient.publish.calledWithExactly('applied-ops:1234567890abcdef', 'random-message').should.equal(true);\n          return this.rclient.publish.calledOnce.should.equal(true);\n        });","file":"unit/js/ChannelManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should track the payload size","suites":["ChannelManager","publish","metrics"],"updatePoint":{"line":230,"column":46,"index":11797},"line":230,"code":"      return it('should track the payload size', function () {\n        return this.metrics.summary.calledWithExactly('redis.publish.applied-ops', 'random-message'.length).should.equal(true);\n      });","file":"unit/js/ChannelManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should set a key with the date and give it a ttl","suites":["ConnectedUsersManager","updateUserPosition"],"updatePoint":{"line":91,"column":56,"index":2441},"line":91,"code":"    it('should set a key with the date and give it a ttl', function (done) {\n      return this.ConnectedUsersManager.updateUserPosition(this.project_id, this.client_id, this.user, null, err => {\n        if (err) return done(err);\n        this.rClient.hset.calledWith(`connected_user:${this.project_id}:${this.client_id}`, 'last_updated_at', Date.now()).should.equal(true);\n        return done();\n      });\n    });","file":"unit/js/ConnectedUsersManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should set a key with the user_id","suites":["ConnectedUsersManager","updateUserPosition"],"updatePoint":{"line":98,"column":41,"index":2840},"line":98,"code":"    it('should set a key with the user_id', function (done) {\n      return this.ConnectedUsersManager.updateUserPosition(this.project_id, this.client_id, this.user, null, err => {\n        if (err) return done(err);\n        this.rClient.hset.calledWith(`connected_user:${this.project_id}:${this.client_id}`, 'user_id', this.user._id).should.equal(true);\n        return done();\n      });\n    });","file":"unit/js/ConnectedUsersManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should set a key with the first_name","suites":["ConnectedUsersManager","updateUserPosition"],"updatePoint":{"line":105,"column":44,"index":3237},"line":105,"code":"    it('should set a key with the first_name', function (done) {\n      return this.ConnectedUsersManager.updateUserPosition(this.project_id, this.client_id, this.user, null, err => {\n        if (err) return done(err);\n        this.rClient.hset.calledWith(`connected_user:${this.project_id}:${this.client_id}`, 'first_name', this.user.first_name).should.equal(true);\n        return done();\n      });\n    });","file":"unit/js/ConnectedUsersManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should set a key with the last_name","suites":["ConnectedUsersManager","updateUserPosition"],"updatePoint":{"line":112,"column":43,"index":3643},"line":112,"code":"    it('should set a key with the last_name', function (done) {\n      return this.ConnectedUsersManager.updateUserPosition(this.project_id, this.client_id, this.user, null, err => {\n        if (err) return done(err);\n        this.rClient.hset.calledWith(`connected_user:${this.project_id}:${this.client_id}`, 'last_name', this.user.last_name).should.equal(true);\n        return done();\n      });\n    });","file":"unit/js/ConnectedUsersManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should set a key with the email","suites":["ConnectedUsersManager","updateUserPosition"],"updatePoint":{"line":119,"column":39,"index":4043},"line":119,"code":"    it('should set a key with the email', function (done) {\n      return this.ConnectedUsersManager.updateUserPosition(this.project_id, this.client_id, this.user, null, err => {\n        if (err) return done(err);\n        this.rClient.hset.calledWith(`connected_user:${this.project_id}:${this.client_id}`, 'email', this.user.email).should.equal(true);\n        return done();\n      });\n    });","file":"unit/js/ConnectedUsersManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should push the client_id on to the project list","suites":["ConnectedUsersManager","updateUserPosition"],"updatePoint":{"line":126,"column":56,"index":4452},"line":126,"code":"    it('should push the client_id on to the project list', function (done) {\n      return this.ConnectedUsersManager.updateUserPosition(this.project_id, this.client_id, this.user, null, err => {\n        if (err) return done(err);\n        this.rClient.sadd.calledWith(`clients_in_project:${this.project_id}`, this.client_id).should.equal(true);\n        return done();\n      });\n    });","file":"unit/js/ConnectedUsersManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should add a ttl to the project set so it stays clean","suites":["ConnectedUsersManager","updateUserPosition"],"updatePoint":{"line":133,"column":61,"index":4842},"line":133,"code":"    it('should add a ttl to the project set so it stays clean', function (done) {\n      return this.ConnectedUsersManager.updateUserPosition(this.project_id, this.client_id, this.user, null, err => {\n        if (err) return done(err);\n        this.rClient.expire.calledWith(`clients_in_project:${this.project_id}`, 24 * 4 * 60 * 60).should.equal(true);\n        return done();\n      });\n    });","file":"unit/js/ConnectedUsersManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should add a ttl to the connected user so it stays clean","suites":["ConnectedUsersManager","updateUserPosition"],"updatePoint":{"line":140,"column":64,"index":5239},"line":140,"code":"    it('should add a ttl to the connected user so it stays clean', function (done) {\n      return this.ConnectedUsersManager.updateUserPosition(this.project_id, this.client_id, this.user, null, err => {\n        if (err) return done(err);\n        this.rClient.expire.calledWith(`connected_user:${this.project_id}:${this.client_id}`, 60 * 15).should.equal(true);\n        return done();\n      });\n    });","file":"unit/js/ConnectedUsersManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should set the cursor position when provided","suites":["ConnectedUsersManager","updateUserPosition"],"updatePoint":{"line":147,"column":59,"index":5636},"line":147,"code":"    return it('should set the cursor position when provided', function (done) {\n      return this.ConnectedUsersManager.updateUserPosition(this.project_id, this.client_id, this.user, this.cursorData, err => {\n        if (err) return done(err);\n        this.rClient.hset.calledWith(`connected_user:${this.project_id}:${this.client_id}`, 'cursorData', JSON.stringify(this.cursorData)).should.equal(true);\n        return done();\n      });\n    });","file":"unit/js/ConnectedUsersManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should remove the user from the set","suites":["ConnectedUsersManager","markUserAsDisconnected"],"updatePoint":{"line":159,"column":43,"index":6206},"line":159,"code":"    it('should remove the user from the set', function (done) {\n      return this.ConnectedUsersManager.markUserAsDisconnected(this.project_id, this.client_id, err => {\n        if (err) return done(err);\n        this.rClient.srem.calledWith(`clients_in_project:${this.project_id}`, this.client_id).should.equal(true);\n        return done();\n      });\n    });","file":"unit/js/ConnectedUsersManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should delete the connected_user string","suites":["ConnectedUsersManager","markUserAsDisconnected"],"updatePoint":{"line":166,"column":47,"index":6569},"line":166,"code":"    it('should delete the connected_user string', function (done) {\n      return this.ConnectedUsersManager.markUserAsDisconnected(this.project_id, this.client_id, err => {\n        if (err) return done(err);\n        this.rClient.del.calledWith(`connected_user:${this.project_id}:${this.client_id}`).should.equal(true);\n        return done();\n      });\n    });","file":"unit/js/ConnectedUsersManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should add a ttl to the connected user set so it stays clean","suites":["ConnectedUsersManager","markUserAsDisconnected"],"updatePoint":{"line":173,"column":75,"index":6957},"line":173,"code":"    return it('should add a ttl to the connected user set so it stays clean', function (done) {\n      return this.ConnectedUsersManager.markUserAsDisconnected(this.project_id, this.client_id, err => {\n        if (err) return done(err);\n        this.rClient.expire.calledWith(`clients_in_project:${this.project_id}`, 24 * 4 * 60 * 60).should.equal(true);\n        return done();\n      });\n    });","file":"unit/js/ConnectedUsersManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return a connected user if there is a user object","suites":["ConnectedUsersManager","_getConnectedUser"],"updatePoint":{"line":182,"column":64,"index":7393},"line":182,"code":"    it('should return a connected user if there is a user object', function (done) {\n      const cursorData = JSON.stringify({\n        cursorData: {\n          row: 1\n        }\n      });\n      this.rClient.hgetall.callsArgWith(1, null, {\n        connected_at: new Date(),\n        user_id: this.user._id,\n        last_updated_at: `${Date.now()}`,\n        cursorData\n      });\n      return this.ConnectedUsersManager._getConnectedUser(this.project_id, this.client_id, (err, result) => {\n        if (err) return done(err);\n        result.connected.should.equal(true);\n        result.client_id.should.equal(this.client_id);\n        return done();\n      });\n    });","file":"unit/js/ConnectedUsersManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return a not connected user if there is no object","suites":["ConnectedUsersManager","_getConnectedUser"],"updatePoint":{"line":201,"column":64,"index":8053},"line":201,"code":"    it('should return a not connected user if there is no object', function (done) {\n      this.rClient.hgetall.callsArgWith(1, null, null);\n      return this.ConnectedUsersManager._getConnectedUser(this.project_id, this.client_id, (err, result) => {\n        if (err) return done(err);\n        result.connected.should.equal(false);\n        result.client_id.should.equal(this.client_id);\n        return done();\n      });\n    });","file":"unit/js/ConnectedUsersManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return a not connected user if there is an empty object","suites":["ConnectedUsersManager","_getConnectedUser"],"updatePoint":{"line":210,"column":77,"index":8494},"line":210,"code":"    return it('should return a not connected user if there is an empty object', function (done) {\n      this.rClient.hgetall.callsArgWith(1, null, {});\n      return this.ConnectedUsersManager._getConnectedUser(this.project_id, this.client_id, (err, result) => {\n        if (err) return done(err);\n        result.connected.should.equal(false);\n        result.client_id.should.equal(this.client_id);\n        return done();\n      });\n    });","file":"unit/js/ConnectedUsersManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should only return the users in the list which are still in redis and recently updated","suites":["ConnectedUsersManager","getConnectedUsers"],"updatePoint":{"line":247,"column":101,"index":10095},"line":247,"code":"    return it('should only return the users in the list which are still in redis and recently updated', function (done) {\n      return this.ConnectedUsersManager.getConnectedUsers(this.project_id, (err, users) => {\n        if (err) return done(err);\n        users.length.should.equal(2);\n        users[0].should.deep.equal({\n          client_id: this.users[0],\n          client_age: 2,\n          connected: true\n        });\n        users[1].should.deep.equal({\n          client_id: this.users[2],\n          client_age: 3,\n          connected: true\n        });\n        return done();\n      });\n    });","file":"unit/js/ConnectedUsersManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should subscribe to the doc-updater stream","suites":["DocumentUpdaterController","listenForUpdatesFromDocumentUpdater"],"updatePoint":{"line":86,"column":50,"index":2884},"line":86,"code":"    it('should subscribe to the doc-updater stream', function () {\n      this.rclient[0].subscribe.calledWith('applied-ops').should.equal(true);\n    });","file":"unit/js/DocumentUpdaterControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should register a callback to handle updates","suites":["DocumentUpdaterController","listenForUpdatesFromDocumentUpdater"],"updatePoint":{"line":89,"column":52,"index":3039},"line":89,"code":"    it('should register a callback to handle updates', function () {\n      this.rclient[0].on.calledWith('message').should.equal(true);\n    });","file":"unit/js/DocumentUpdaterControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should subscribe to any additional doc-updater stream","suites":["DocumentUpdaterController","listenForUpdatesFromDocumentUpdater"],"updatePoint":{"line":92,"column":61,"index":3192},"line":92,"code":"    it('should subscribe to any additional doc-updater stream', function () {\n      this.rclient[1].subscribe.calledWith('applied-ops').should.equal(true);\n      this.rclient[1].on.calledWith('message').should.equal(true);\n    });","file":"unit/js/DocumentUpdaterControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should log an error","suites":["DocumentUpdaterController","_processMessageFromDocumentUpdater","with bad JSON"],"updatePoint":{"line":103,"column":29,"index":3741},"line":103,"code":"      it('should log an error', function () {\n        return this.logger.error.called.should.equal(true);\n      });","file":"unit/js/DocumentUpdaterControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should apply the update","suites":["DocumentUpdaterController","_processMessageFromDocumentUpdater","with update"],"updatePoint":{"line":119,"column":33,"index":4306},"line":119,"code":"      it('should apply the update', function () {\n        return this.EditorUpdatesController._applyUpdateFromDocumentUpdater.calledWith(this.io, this.doc_id, this.message.op).should.equal(true);\n      });","file":"unit/js/DocumentUpdaterControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should process the error","suites":["DocumentUpdaterController","_processMessageFromDocumentUpdater","with error"],"updatePoint":{"line":132,"column":41,"index":4937},"line":132,"code":"      return it('should process the error', function () {\n        return this.EditorUpdatesController._processErrorFromDocumentUpdater.calledWith(this.io, this.doc_id, this.message.error).should.equal(true);\n      });","file":"unit/js/DocumentUpdaterControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should send a version bump to the source client","suites":["DocumentUpdaterController","_applyUpdateFromDocumentUpdater","normally"],"updatePoint":{"line":161,"column":57,"index":5988},"line":161,"code":"      it('should send a version bump to the source client', function () {\n        this.sourceClient.emit.calledWith('otUpdateApplied', {\n          v: this.version,\n          doc: this.doc_id\n        }).should.equal(true);\n        return this.sourceClient.emit.calledOnce.should.equal(true);\n      });","file":"unit/js/DocumentUpdaterControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should get the clients connected to the document","suites":["DocumentUpdaterController","_applyUpdateFromDocumentUpdater","normally"],"updatePoint":{"line":168,"column":58,"index":6290},"line":168,"code":"      it('should get the clients connected to the document', function () {\n        return this.io.sockets.clients.calledWith(this.doc_id).should.equal(true);\n      });","file":"unit/js/DocumentUpdaterControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should send the full update to the other clients","suites":["DocumentUpdaterController","_applyUpdateFromDocumentUpdater","normally"],"updatePoint":{"line":171,"column":65,"index":6465},"line":171,"code":"      return it('should send the full update to the other clients', function () {\n        return Array.from(this.otherClients).map(client => client.emit.calledWith('otUpdateApplied', this.update).should.equal(true));\n      });","file":"unit/js/DocumentUpdaterControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should send a version bump to the source client as usual","suites":["DocumentUpdaterController","_applyUpdateFromDocumentUpdater","with a duplicate op"],"updatePoint":{"line":180,"column":66,"index":6943},"line":180,"code":"      it('should send a version bump to the source client as usual', function () {\n        return this.sourceClient.emit.calledWith('otUpdateApplied', {\n          v: this.version,\n          doc: this.doc_id\n        }).should.equal(true);\n      });","file":"unit/js/DocumentUpdaterControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not send anything to the other clients (they've already had the op)","suites":["DocumentUpdaterController","_applyUpdateFromDocumentUpdater","with a duplicate op"],"updatePoint":{"line":186,"column":91,"index":7216},"line":186,"code":"      return it(\"should not send anything to the other clients (they've already had the op)\", function () {\n        return Array.from(this.otherClients).map(client => client.emit.calledWith('otUpdateApplied').should.equal(false));\n      });","file":"unit/js/DocumentUpdaterControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should log a warning","suites":["DocumentUpdaterController","_processErrorFromDocumentUpdater"],"updatePoint":{"line":199,"column":28,"index":7781},"line":199,"code":"    it('should log a warning', function () {\n      return this.logger.warn.called.should.equal(true);\n    });","file":"unit/js/DocumentUpdaterControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should disconnect all clients in that document","suites":["DocumentUpdaterController","_processErrorFromDocumentUpdater"],"updatePoint":{"line":202,"column":61,"index":7924},"line":202,"code":"    return it('should disconnect all clients in that document', function () {\n      this.io.sockets.clients.calledWith(this.doc_id).should.equal(true);\n      return Array.from(this.clients).map(client => client.disconnect.called.should.equal(true));\n    });","file":"unit/js/DocumentUpdaterControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should get the document from the document updater","suites":["DocumentUpdaterManager","getDocument","successfully"],"updatePoint":{"line":84,"column":59,"index":2542},"line":84,"code":"      it('should get the document from the document updater', function () {\n        const url = `${this.settings.apis.documentupdater.url}/project/${this.project_id}/doc/${this.doc_id}?fromVersion=${this.fromVersion}`;\n        return this.request.get.calledWith(url).should.equal(true);\n      });","file":"unit/js/DocumentUpdaterManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should call the callback with the lines, version, ranges and ops","suites":["DocumentUpdaterManager","getDocument","successfully"],"updatePoint":{"line":88,"column":81,"index":2861},"line":88,"code":"      return it('should call the callback with the lines, version, ranges and ops', function () {\n        return this.callback.calledWith(null, this.lines, this.version, this.ranges, this.ops).should.equal(true);\n      });","file":"unit/js/DocumentUpdaterManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return an error to the callback","suites":["DocumentUpdaterManager","getDocument","when the document updater API returns an error"],"updatePoint":{"line":97,"column":55,"index":3420},"line":97,"code":"      return it('should return an error to the callback', function () {\n        return this.callback.calledWith(this.error).should.equal(true);\n      });","file":"unit/js/DocumentUpdaterManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return the callback with an error","suites":["DocumentUpdaterManager","getDocument","when the document updater returns a  status code"],"updatePoint":{"line":108,"column":57,"index":3970},"line":108,"code":"      return it('should return the callback with an error', function () {\n        this.callback.called.should.equal(true);\n        this.callback.calledWith(sinon.match({\n          message: 'doc updater could not load requested ops',\n          info: {\n            statusCode\n          }\n        })).should.equal(true);\n        this.logger.error.called.should.equal(false);\n        this.logger.warn.called.should.equal(false);\n      });","file":"unit/js/DocumentUpdaterManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return the callback with an error","suites":["DocumentUpdaterManager","getDocument","when the document updater returns a failure error code"],"updatePoint":{"line":127,"column":57,"index":4772},"line":127,"code":"      return it('should return the callback with an error', function () {\n        this.callback.called.should.equal(true);\n        this.callback.calledWith(sinon.match({\n          message: 'doc updater returned a non-success status code',\n          info: {\n            action: 'getDocument',\n            statusCode: 500\n          }\n        })).should.equal(true);\n        this.logger.error.called.should.equal(false);\n      });","file":"unit/js/DocumentUpdaterManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should delete the project from the document updater","suites":["DocumentUpdaterManager","flushProjectToMongoAndDelete","successfully"],"updatePoint":{"line":151,"column":61,"index":5650},"line":151,"code":"      it('should delete the project from the document updater', function () {\n        const url = `${this.settings.apis.documentupdater.url}/project/${this.project_id}?background=true`;\n        return this.request.del.calledWith(url).should.equal(true);\n      });","file":"unit/js/DocumentUpdaterManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should call the callback with no error","suites":["DocumentUpdaterManager","flushProjectToMongoAndDelete","successfully"],"updatePoint":{"line":155,"column":55,"index":5908},"line":155,"code":"      return it('should call the callback with no error', function () {\n        return this.callback.calledWith(null).should.equal(true);\n      });","file":"unit/js/DocumentUpdaterManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return an error to the callback","suites":["DocumentUpdaterManager","flushProjectToMongoAndDelete","when the document updater API returns an error"],"updatePoint":{"line":164,"column":55,"index":6404},"line":164,"code":"      return it('should return an error to the callback', function () {\n        return this.callback.calledWith(this.error).should.equal(true);\n      });","file":"unit/js/DocumentUpdaterManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return the callback with an error","suites":["DocumentUpdaterManager","flushProjectToMongoAndDelete","when the document updater returns a failure error code"],"updatePoint":{"line":175,"column":57,"index":6912},"line":175,"code":"      return it('should return the callback with an error', function () {\n        this.callback.called.should.equal(true);\n        this.callback.calledWith(sinon.match({\n          message: 'doc updater returned a non-success status code',\n          info: {\n            action: 'flushProjectToMongoAndDelete',\n            statusCode: 500\n          }\n        })).should.equal(true);\n      });","file":"unit/js/DocumentUpdaterManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should push the change","suites":["DocumentUpdaterManager","queueChange","successfully"],"updatePoint":{"line":206,"column":32,"index":7984},"line":206,"code":"      it('should push the change', function () {\n        this.rclient.rpush.calledWith(`PendingUpdates:${this.doc_id}`, JSON.stringify(this.change)).should.equal(true);\n      });","file":"unit/js/DocumentUpdaterManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should notify the doc updater of the change via the pending-updates-list queue","suites":["DocumentUpdaterManager","queueChange","successfully"],"updatePoint":{"line":209,"column":88,"index":8219},"line":209,"code":"      it('should notify the doc updater of the change via the pending-updates-list queue', function () {\n        this.rclient.rpush.calledWith(this.pendingUpdateListKey, `${this.project_id}:${this.doc_id}`).should.equal(true);\n      });","file":"unit/js/DocumentUpdaterManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return an error","suites":["DocumentUpdaterManager","queueChange","with error talking to redis during rpush"],"updatePoint":{"line":218,"column":39,"index":8726},"line":218,"code":"      return it('should return an error', function () {\n        return this.callback.calledWithExactly(sinon.match(Error)).should.equal(true);\n      });","file":"unit/js/DocumentUpdaterManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return an error","suites":["DocumentUpdaterManager","queueChange","with null byte corruption"],"updatePoint":{"line":230,"column":32,"index":9278},"line":230,"code":"      it('should return an error', function () {\n        return this.callback.calledWithExactly(sinon.match(Error)).should.equal(true);\n      });","file":"unit/js/DocumentUpdaterManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not push the change onto the pending-updates-list queue","suites":["DocumentUpdaterManager","queueChange","with null byte corruption"],"updatePoint":{"line":233,"column":79,"index":9471},"line":233,"code":"      return it('should not push the change onto the pending-updates-list queue', function () {\n        return this.rclient.rpush.called.should.equal(false);\n      });","file":"unit/js/DocumentUpdaterManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return an error","suites":["DocumentUpdaterManager","queueChange","when the update is too large"],"updatePoint":{"line":247,"column":32,"index":9952},"line":247,"code":"      it('should return an error', function () {\n        return this.callback.calledWithExactly(sinon.match(Error)).should.equal(true);\n      });","file":"unit/js/DocumentUpdaterManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should add the size to the error","suites":["DocumentUpdaterManager","queueChange","when the update is too large"],"updatePoint":{"line":250,"column":42,"index":10108},"line":250,"code":"      it('should add the size to the error', function () {\n        return this.callback.args[0][0].info.updateSize.should.equal(7782422);\n      });","file":"unit/js/DocumentUpdaterManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not push the change onto the pending-updates-list queue","suites":["DocumentUpdaterManager","queueChange","when the update is too large"],"updatePoint":{"line":253,"column":79,"index":10293},"line":253,"code":"      return it('should not push the change onto the pending-updates-list queue', function () {\n        return this.rclient.rpush.called.should.equal(false);\n      });","file":"unit/js/DocumentUpdaterManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should remove the invalid keys from the change","suites":["DocumentUpdaterManager","queueChange","with invalid keys"],"updatePoint":{"line":269,"column":56,"index":10800},"line":269,"code":"      it('should remove the invalid keys from the change', function () {\n        return this.rclient.rpush.calledWith(`PendingUpdates:${this.doc_id}`, JSON.stringify({\n          op: this.change.op\n        })).should.equal(true);\n      });","file":"unit/js/DocumentUpdaterManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return normal pending updates key","suites":["DocumentUpdaterManager","_getPendingUpdateListKey"],"updatePoint":{"line":281,"column":48,"index":11258},"line":281,"code":"    it('should return normal pending updates key', function () {\n      _.contains(this.keys, 'pending-updates-list').should.equal(true);\n    });","file":"unit/js/DocumentUpdaterManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return pending-updates-list-n keys","suites":["DocumentUpdaterManager","_getPendingUpdateListKey"],"updatePoint":{"line":284,"column":49,"index":11404},"line":284,"code":"    it('should return pending-updates-list-n keys', function () {\n      _.contains(this.keys, 'pending-updates-list-1').should.equal(true);\n      _.contains(this.keys, 'pending-updates-list-3').should.equal(true);\n      _.contains(this.keys, 'pending-updates-list-9').should.equal(true);\n    });","file":"unit/js/DocumentUpdaterManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not include pending-updates-list-0 key","suites":["DocumentUpdaterManager","_getPendingUpdateListKey"],"updatePoint":{"line":289,"column":53,"index":11704},"line":289,"code":"    it('should not include pending-updates-list-0 key', function () {\n      _.contains(this.keys, 'pending-updates-list-0').should.equal(false);\n    });","file":"unit/js/DocumentUpdaterManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not include maximum as pendingUpdateListShardCount value","suites":["DocumentUpdaterManager","_getPendingUpdateListKey"],"updatePoint":{"line":292,"column":71,"index":11875},"line":292,"code":"    it('should not include maximum as pendingUpdateListShardCount value', function () {\n      _.contains(this.keys, 'pending-updates-list-10').should.equal(false);\n    });","file":"unit/js/DocumentUpdaterManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should set a drain rate fast enough","suites":["DrainManager","startDrainTimeWindow"],"updatePoint":{"line":37,"column":50,"index":1173},"line":37,"code":"    return it('should set a drain rate fast enough', function (done) {\n      this.DrainManager.startDrainTimeWindow(this.io, 9);\n      this.DrainManager.startDrain.calledWith(this.io, 10).should.equal(true);\n      return done();\n    });","file":"unit/js/DrainManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should reconnect the first 3 clients","suites":["DrainManager","reconnectNClients","after first pass"],"updatePoint":{"line":58,"column":46,"index":1876},"line":58,"code":"      it('should reconnect the first 3 clients', function () {\n        return [0, 1, 2].map(i => this.clients[i].emit.calledWith('reconnectGracefully').should.equal(true));\n      });","file":"unit/js/DrainManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not reconnect any more clients","suites":["DrainManager","reconnectNClients","after first pass"],"updatePoint":{"line":61,"column":47,"index":2060},"line":61,"code":"      it('should not reconnect any more clients', function () {\n        return [3, 4, 5, 6, 7, 8, 9].map(i => this.clients[i].emit.calledWith('reconnectGracefully').should.equal(false));\n      });","file":"unit/js/DrainManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should reconnect the next 3 clients","suites":["DrainManager","reconnectNClients","after first pass","after second pass"],"updatePoint":{"line":68,"column":47,"index":2425},"line":68,"code":"        it('should reconnect the next 3 clients', function () {\n          return [3, 4, 5].map(i => this.clients[i].emit.calledWith('reconnectGracefully').should.equal(true));\n        });","file":"unit/js/DrainManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not reconnect any more clients","suites":["DrainManager","reconnectNClients","after first pass","after second pass"],"updatePoint":{"line":71,"column":49,"index":2615},"line":71,"code":"        it('should not reconnect any more clients', function () {\n          return [6, 7, 8, 9].map(i => this.clients[i].emit.calledWith('reconnectGracefully').should.equal(false));\n        });","file":"unit/js/DrainManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not reconnect the first 3 clients again","suites":["DrainManager","reconnectNClients","after first pass","after second pass"],"updatePoint":{"line":74,"column":58,"index":2818},"line":74,"code":"        it('should not reconnect the first 3 clients again', function () {\n          return [0, 1, 2].map(i => this.clients[i].emit.calledOnce.should.equal(true));\n        });","file":"unit/js/DrainManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not reconnect the first 6 clients again","suites":["DrainManager","reconnectNClients","after first pass","after second pass","after final pass"],"updatePoint":{"line":81,"column":60,"index":3173},"line":81,"code":"          it('should not reconnect the first 6 clients again', function () {\n            return [0, 1, 2, 3, 4, 5].map(i => this.clients[i].emit.calledOnce.should.equal(true));\n          });","file":"unit/js/DrainManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should log out that it reached the end","suites":["DrainManager","reconnectNClients","after first pass","after second pass","after final pass"],"updatePoint":{"line":84,"column":59,"index":3363},"line":84,"code":"          return it('should log out that it reached the end', function () {\n            return this.logger.info.calledWith('All clients have been told to reconnectGracefully').should.equal(true);\n          });","file":"unit/js/DrainManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should accept events in order","suites":["EventLogger","checkEventOrder","when the events are in order"],"updatePoint":{"line":44,"column":39,"index":1484},"line":44,"code":"      it('should accept events in order', function () {\n        return expect(this.status).to.be.undefined;\n      });","file":"unit/js/EventLoggerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should increment the valid event metric","suites":["EventLogger","checkEventOrder","when the events are in order"],"updatePoint":{"line":47,"column":56,"index":1619},"line":47,"code":"      return it('should increment the valid event metric', function () {\n        return this.metrics.inc.calledWith(`event.${this.channel}.valid`).should.equals(true);\n      });","file":"unit/js/EventLoggerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return \"duplicate\" for the same event","suites":["EventLogger","checkEventOrder","when there is a duplicate events"],"updatePoint":{"line":56,"column":54,"index":2094},"line":56,"code":"      it('should return \"duplicate\" for the same event', function () {\n        return expect(this.status).to.equal('duplicate');\n      });","file":"unit/js/EventLoggerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should increment the duplicate event metric","suites":["EventLogger","checkEventOrder","when there is a duplicate events"],"updatePoint":{"line":59,"column":60,"index":2239},"line":59,"code":"      return it('should increment the duplicate event metric', function () {\n        return this.metrics.inc.calledWith(`event.${this.channel}.duplicate`).should.equals(true);\n      });","file":"unit/js/EventLoggerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return \"out-of-order\" for the event","suites":["EventLogger","checkEventOrder","when there are out of order events"],"updatePoint":{"line":69,"column":52,"index":2801},"line":69,"code":"      it('should return \"out-of-order\" for the event', function () {\n        return expect(this.status).to.equal('out-of-order');\n      });","file":"unit/js/EventLoggerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should increment the out-of-order event metric","suites":["EventLogger","checkEventOrder","when there are out of order events"],"updatePoint":{"line":72,"column":63,"index":2952},"line":72,"code":"      return it('should increment the out-of-order event metric', function () {\n        return this.metrics.inc.calledWith(`event.${this.channel}.out-of-order`).should.equals(true);\n      });","file":"unit/js/EventLoggerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should flush old entries","suites":["EventLogger","checkEventOrder","after MAX_STALE_TIME_IN_MS"],"updatePoint":{"line":77,"column":41,"index":3194},"line":77,"code":"      return it('should flush old entries', function () {\n        let status;\n        this.EventLogger.MAX_EVENTS_BEFORE_CLEAN = 10;\n        this.EventLogger.checkEventOrder(this.channel, this.id_1, this.message_1);\n        for (let i = 1; i <= 8; i++) {\n          status = this.EventLogger.checkEventOrder(this.channel, this.id_1, this.message_1);\n          expect(status).to.equal('duplicate');\n        }\n        // the next event should flush the old entries aboce\n        this.EventLogger.MAX_STALE_TIME_IN_MS = 1000;\n        tk.freeze(new Date(this.start + 5 * 1000));\n        // because we flushed the entries this should not be a duplicate\n        this.EventLogger.checkEventOrder(this.channel, 'other-1', this.message_2);\n        status = this.EventLogger.checkEventOrder(this.channel, this.id_1, this.message_1);\n        return expect(status).to.be.undefined;\n      });","file":"unit/js/EventLoggerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should keep going","suites":["RoomManager","emitOnCompletion","when a subscribe errors"],"updatePoint":{"line":63,"column":34,"index":2236},"line":63,"code":"      return it('should keep going', function () {\n        return expect(this.unhandledError).to.not.exist;\n      });","file":"unit/js/RoomManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should emit a 'project-active' event with the id","suites":["RoomManager","joinProject","when the project room is empty"],"updatePoint":{"line":84,"column":58,"index":3061},"line":84,"code":"      it(\"should emit a 'project-active' event with the id\", function () {\n        return this.RoomEvents.emit.calledWithExactly('project-active', this.project_id).should.equal(true);\n      });","file":"unit/js/RoomManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should listen for the 'project-subscribed-id' event","suites":["RoomManager","joinProject","when the project room is empty"],"updatePoint":{"line":87,"column":61,"index":3258},"line":87,"code":"      it(\"should listen for the 'project-subscribed-id' event\", function () {\n        return this.RoomEvents.once.calledWith(`project-subscribed-${this.project_id}`).should.equal(true);\n      });","file":"unit/js/RoomManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should join the room using the id","suites":["RoomManager","joinProject","when the project room is empty"],"updatePoint":{"line":90,"column":50,"index":3443},"line":90,"code":"      return it('should join the room using the id', function () {\n        return this.client.join.calledWithExactly(this.project_id).should.equal(true);\n      });","file":"unit/js/RoomManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should join the room using the id","suites":["RoomManager","joinProject","when there are other clients in the project room"],"updatePoint":{"line":100,"column":43,"index":3989},"line":100,"code":"      it('should join the room using the id', function () {\n        return this.client.join.called.should.equal(true);\n      });","file":"unit/js/RoomManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not emit any events","suites":["RoomManager","joinProject","when there are other clients in the project room"],"updatePoint":{"line":103,"column":43,"index":4118},"line":103,"code":"      return it('should not emit any events', function () {\n        return this.RoomEvents.emit.called.should.equal(false);\n      });","file":"unit/js/RoomManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should emit a 'doc-active' event with the id","suites":["RoomManager","joinDoc","when the doc room is empty"],"updatePoint":{"line":124,"column":54,"index":4918},"line":124,"code":"      it(\"should emit a 'doc-active' event with the id\", function () {\n        return this.RoomEvents.emit.calledWithExactly('doc-active', this.doc_id).should.equal(true);\n      });","file":"unit/js/RoomManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should listen for the 'doc-subscribed-id' event","suites":["RoomManager","joinDoc","when the doc room is empty"],"updatePoint":{"line":127,"column":57,"index":5103},"line":127,"code":"      it(\"should listen for the 'doc-subscribed-id' event\", function () {\n        return this.RoomEvents.once.calledWith(`doc-subscribed-${this.doc_id}`).should.equal(true);\n      });","file":"unit/js/RoomManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should join the room using the id","suites":["RoomManager","joinDoc","when the doc room is empty"],"updatePoint":{"line":130,"column":50,"index":5280},"line":130,"code":"      return it('should join the room using the id', function () {\n        return this.client.join.calledWithExactly(this.doc_id).should.equal(true);\n      });","file":"unit/js/RoomManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should join the room using the id","suites":["RoomManager","joinDoc","when there are other clients in the doc room"],"updatePoint":{"line":140,"column":43,"index":5806},"line":140,"code":"      it('should join the room using the id', function () {\n        return this.client.join.called.should.equal(true);\n      });","file":"unit/js/RoomManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not emit any events","suites":["RoomManager","joinDoc","when there are other clients in the doc room"],"updatePoint":{"line":143,"column":43,"index":5935},"line":143,"code":"      return it('should not emit any events', function () {\n        return this.RoomEvents.emit.called.should.equal(false);\n      });","file":"unit/js/RoomManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should leave the room using the id","suites":["RoomManager","leaveDoc","when doc room will be empty after this client has left"],"updatePoint":{"line":156,"column":44,"index":6550},"line":156,"code":"      it('should leave the room using the id', function () {\n        return this.client.leave.calledWithExactly(this.doc_id).should.equal(true);\n      });","file":"unit/js/RoomManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should emit a 'doc-empty' event with the id","suites":["RoomManager","leaveDoc","when doc room will be empty after this client has left"],"updatePoint":{"line":159,"column":60,"index":6721},"line":159,"code":"      return it(\"should emit a 'doc-empty' event with the id\", function () {\n        return this.RoomEvents.emit.calledWithExactly('doc-empty', this.doc_id).should.equal(true);\n      });","file":"unit/js/RoomManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should leave the room using the id","suites":["RoomManager","leaveDoc","when there are other clients in the doc room"],"updatePoint":{"line":170,"column":44,"index":7321},"line":170,"code":"      it('should leave the room using the id', function () {\n        return this.client.leave.calledWithExactly(this.doc_id).should.equal(true);\n      });","file":"unit/js/RoomManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not emit any events","suites":["RoomManager","leaveDoc","when there are other clients in the doc room"],"updatePoint":{"line":173,"column":43,"index":7475},"line":173,"code":"      return it('should not emit any events', function () {\n        return this.RoomEvents.emit.called.should.equal(false);\n      });","file":"unit/js/RoomManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not leave the room","suites":["RoomManager","leaveDoc","when the client is not in the doc room"],"updatePoint":{"line":184,"column":35,"index":8030},"line":184,"code":"      it('should not leave the room', function () {\n        return this.client.leave.called.should.equal(false);\n      });","file":"unit/js/RoomManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not emit any events","suites":["RoomManager","leaveDoc","when the client is not in the doc room"],"updatePoint":{"line":187,"column":43,"index":8161},"line":187,"code":"      return it('should not emit any events', function () {\n        return this.RoomEvents.emit.called.should.equal(false);\n      });","file":"unit/js/RoomManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should leave all the docs","suites":["RoomManager","leaveProjectAndDocs","when the client is connected to the project and multiple docs","when this is the only client connected"],"updatePoint":{"line":228,"column":37,"index":10342},"line":228,"code":"        it('should leave all the docs', function () {\n          this.client.leave.calledWithExactly(this.doc_id).should.equal(true);\n          return this.client.leave.calledWithExactly(this.other_doc_id).should.equal(true);\n        });","file":"unit/js/RoomManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should leave the project","suites":["RoomManager","leaveProjectAndDocs","when the client is connected to the project and multiple docs","when this is the only client connected"],"updatePoint":{"line":232,"column":36,"index":10578},"line":232,"code":"        it('should leave the project', function () {\n          return this.client.leave.calledWithExactly(this.project_id).should.equal(true);\n        });","file":"unit/js/RoomManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should emit a 'doc-empty' event with the id for each doc","suites":["RoomManager","leaveProjectAndDocs","when the client is connected to the project and multiple docs","when this is the only client connected"],"updatePoint":{"line":235,"column":68,"index":10765},"line":235,"code":"        it(\"should emit a 'doc-empty' event with the id for each doc\", function () {\n          this.RoomEvents.emit.calledWithExactly('doc-empty', this.doc_id).should.equal(true);\n          return this.RoomEvents.emit.calledWithExactly('doc-empty', this.other_doc_id).should.equal(true);\n        });","file":"unit/js/RoomManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should emit a 'project-empty' event with the id for the project","suites":["RoomManager","leaveProjectAndDocs","when the client is connected to the project and multiple docs","when this is the only client connected"],"updatePoint":{"line":239,"column":82,"index":11079},"line":239,"code":"        return it(\"should emit a 'project-empty' event with the id for the project\", function () {\n          return this.RoomEvents.emit.calledWithExactly('project-empty', this.project_id).should.equal(true);\n        });","file":"unit/js/RoomManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should leave all the docs","suites":["RoomManager","leaveProjectAndDocs","when the client is connected to the project and multiple docs","when other clients are still connected"],"updatePoint":{"line":251,"column":37,"index":12071},"line":251,"code":"        it('should leave all the docs', function () {\n          this.client.leave.calledWithExactly(this.doc_id).should.equal(true);\n          return this.client.leave.calledWithExactly(this.other_doc_id).should.equal(true);\n        });","file":"unit/js/RoomManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should leave the project","suites":["RoomManager","leaveProjectAndDocs","when the client is connected to the project and multiple docs","when other clients are still connected"],"updatePoint":{"line":255,"column":36,"index":12307},"line":255,"code":"        it('should leave the project', function () {\n          return this.client.leave.calledWithExactly(this.project_id).should.equal(true);\n        });","file":"unit/js/RoomManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not emit any events","suites":["RoomManager","leaveProjectAndDocs","when the client is connected to the project and multiple docs","when other clients are still connected"],"updatePoint":{"line":258,"column":45,"index":12471},"line":258,"code":"        return it('should not emit any events', function () {\n          return this.RoomEvents.emit.called.should.equal(false);\n        });","file":"unit/js/RoomManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should parse documents correctly","suites":["SafeJsonParse","parse"],"updatePoint":{"line":28,"column":40,"index":855},"line":28,"code":"    it('should parse documents correctly', function (done) {\n      return this.SafeJsonParse.parse('{\"foo\": \"bar\"}', (error, parsed) => {\n        if (error) return done(error);\n        expect(parsed).to.deep.equal({\n          foo: 'bar'\n        });\n        return done();\n      });\n    });","file":"unit/js/SafeJsonParseTest.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return an error on bad data","suites":["SafeJsonParse","parse"],"updatePoint":{"line":37,"column":42,"index":1147},"line":37,"code":"    it('should return an error on bad data', function (done) {\n      return this.SafeJsonParse.parse('blah', (error, parsed) => {\n        expect(error).to.exist;\n        return done();\n      });\n    });","file":"unit/js/SafeJsonParseTest.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return an error on oversized data","suites":["SafeJsonParse","parse"],"updatePoint":{"line":43,"column":55,"index":1363},"line":43,"code":"    return it('should return an error on oversized data', function (done) {\n      // we have a 2k overhead on top of max size\n      const bigBlob = Array(16 * 1024).join('A');\n      const data = `{\\\"foo\\\": \\\"${bigBlob}\\\"}`;\n      this.Settings.maxUpdateSize = 2 * 1024;\n      return this.SafeJsonParse.parse(data, (error, parsed) => {\n        this.logger.error.called.should.equal(false);\n        expect(error).to.exist;\n        return done();\n      });\n    });","file":"unit/js/SafeJsonParseTest.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return a lookup error","suites":["SessionSockets","without cookies"],"updatePoint":{"line":59,"column":36,"index":1800},"line":59,"code":"    it('should return a lookup error', function (done) {\n      return this.checkSocket(this.socket, error => {\n        expect(error).to.exist;\n        expect(error.message).to.equal('could not look up session by key');\n        return done();\n      });\n    });","file":"unit/js/SessionSocketsTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not query redis","suites":["SessionSockets","without cookies"],"updatePoint":{"line":66,"column":37,"index":2061},"line":66,"code":"    return it('should not query redis', function (done) {\n      return this.checkSocket(this.socket, () => {\n        expect(this.sessionStore.get.called).to.equal(false);\n        return done();\n      });\n    });","file":"unit/js/SessionSocketsTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return a lookup error","suites":["SessionSockets","with a different cookie"],"updatePoint":{"line":83,"column":36,"index":2493},"line":83,"code":"    it('should return a lookup error', function (done) {\n      return this.checkSocket(this.socket, error => {\n        expect(error).to.exist;\n        expect(error.message).to.equal('could not look up session by key');\n        return done();\n      });\n    });","file":"unit/js/SessionSocketsTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not query redis","suites":["SessionSockets","with a different cookie"],"updatePoint":{"line":90,"column":37,"index":2754},"line":90,"code":"    return it('should not query redis', function (done) {\n      return this.checkSocket(this.socket, () => {\n        expect(this.sessionStore.get.called).to.equal(false);\n        return done();\n      });\n    });","file":"unit/js/SessionSocketsTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should query redis","suites":["SessionSockets","with a valid cookie and a failing session lookup"],"updatePoint":{"line":107,"column":26,"index":3210},"line":107,"code":"    it('should query redis', function (done) {\n      return this.checkSocket(this.socket, () => {\n        expect(this.sessionStore.get.called).to.equal(true);\n        return done();\n      });\n    });","file":"unit/js/SessionSocketsTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return a redis error","suites":["SessionSockets","with a valid cookie and a failing session lookup"],"updatePoint":{"line":113,"column":42,"index":3426},"line":113,"code":"    return it('should return a redis error', function (done) {\n      return this.checkSocket(this.socket, error => {\n        expect(error).to.exist;\n        expect(error.message).to.equal('Redis: something went wrong');\n        return done();\n      });\n    });","file":"unit/js/SessionSocketsTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should query redis","suites":["SessionSockets","with a valid cookie and no matching session"],"updatePoint":{"line":131,"column":26,"index":3925},"line":131,"code":"    it('should query redis', function (done) {\n      return this.checkSocket(this.socket, () => {\n        expect(this.sessionStore.get.called).to.equal(true);\n        return done();\n      });\n    });","file":"unit/js/SessionSocketsTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return a lookup error","suites":["SessionSockets","with a valid cookie and no matching session"],"updatePoint":{"line":137,"column":43,"index":4142},"line":137,"code":"    return it('should return a lookup error', function (done) {\n      return this.checkSocket(this.socket, error => {\n        expect(error).to.exist;\n        expect(error.message).to.equal('could not look up session by key');\n        return done();\n      });\n    });","file":"unit/js/SessionSocketsTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should query redis","suites":["SessionSockets","with a valid cookie and a matching session"],"updatePoint":{"line":155,"column":26,"index":4642},"line":155,"code":"    it('should query redis', function (done) {\n      return this.checkSocket(this.socket, () => {\n        expect(this.sessionStore.get.called).to.equal(true);\n        return done();\n      });\n    });","file":"unit/js/SessionSocketsTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not return an error","suites":["SessionSockets","with a valid cookie and a matching session"],"updatePoint":{"line":161,"column":34,"index":4850},"line":161,"code":"    it('should not return an error', function (done) {\n      return this.checkSocket(this.socket, error => {\n        expect(error).to.not.exist;\n        return done();\n      });\n    });","file":"unit/js/SessionSocketsTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return the session","suites":["SessionSockets","with a valid cookie and a matching session"],"updatePoint":{"line":167,"column":40,"index":5042},"line":167,"code":"    return it('should return the session', function (done) {\n      return this.checkSocket(this.socket, (error, s, session) => {\n        if (error) return done(error);\n        expect(session).to.deep.equal({\n          user: {\n            _id: '123'\n          }\n        });\n        return done();\n      });\n    });","file":"unit/js/SessionSocketsTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should query redis","suites":["SessionSockets","with a different valid cookie and matching session"],"updatePoint":{"line":189,"column":26,"index":5607},"line":189,"code":"    it('should query redis', function (done) {\n      return this.checkSocket(this.socket, () => {\n        expect(this.sessionStore.get.called).to.equal(true);\n        return done();\n      });\n    });","file":"unit/js/SessionSocketsTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not return an error","suites":["SessionSockets","with a different valid cookie and matching session"],"updatePoint":{"line":195,"column":34,"index":5815},"line":195,"code":"    it('should not return an error', function (done) {\n      return this.checkSocket(this.socket, error => {\n        expect(error).to.not.exist;\n        return done();\n      });\n    });","file":"unit/js/SessionSocketsTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return the other session","suites":["SessionSockets","with a different valid cookie and matching session"],"updatePoint":{"line":201,"column":46,"index":6013},"line":201,"code":"    return it('should return the other session', function (done) {\n      return this.checkSocket(this.socket, (error, s, session) => {\n        if (error) return done(error);\n        expect(session).to.deep.equal({\n          user: {\n            _id: 'abc'\n          }\n        });\n        return done();\n      });\n    });","file":"unit/js/SessionSocketsTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should send a request to web to join the project","suites":["WebApiManager","joinProject","successfully"],"updatePoint":{"line":56,"column":58,"index":1726},"line":56,"code":"      it('should send a request to web to join the project', function () {\n        return this.request.post.calledWith({\n          url: `${this.settings.apis.web.url}/project/${this.project_id}/join`,\n          qs: {\n            user_id: this.user_id\n          },\n          auth: {\n            user: this.settings.apis.web.user,\n            pass: this.settings.apis.web.pass,\n            sendImmediately: true\n          },\n          json: true,\n          jar: false,\n          headers: {}\n        }).should.equal(true);\n      });","file":"unit/js/WebApiManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return the project, privilegeLevel, and restricted flag","suites":["WebApiManager","joinProject","successfully"],"updatePoint":{"line":72,"column":79,"index":2277},"line":72,"code":"      return it('should return the project, privilegeLevel, and restricted flag', function () {\n        return this.callback.calledWith(null, this.response.project, this.response.privilegeLevel, this.response.isRestrictedUser).should.equal(true);\n      });","file":"unit/js/WebApiManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should call the callback with an error","suites":["WebApiManager","joinProject","when web replies with a 403"],"updatePoint":{"line":83,"column":48,"index":2805},"line":83,"code":"      it('should call the callback with an error', function () {\n        this.callback.calledWith(sinon.match({\n          message: 'not authorized'\n        })).should.equal(true);\n      });","file":"unit/js/WebApiManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should call the callback with an error","suites":["WebApiManager","joinProject","when web replies with a 404"],"updatePoint":{"line":96,"column":48,"index":3297},"line":96,"code":"      it('should call the callback with an error', function () {\n        this.callback.calledWith(sinon.match({\n          message: 'project not found',\n          info: {\n            code: 'ProjectNotFound'\n          }\n        })).should.equal(true);\n      });","file":"unit/js/WebApiManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should call the callback with an error","suites":["WebApiManager","joinProject","with an error from web"],"updatePoint":{"line":112,"column":55,"index":3868},"line":112,"code":"      return it('should call the callback with an error', function () {\n        return this.callback.calledWith(sinon.match({\n          message: 'non-success status code from web',\n          info: {\n            statusCode: 500\n          }\n        })).should.equal(true);\n      });","file":"unit/js/WebApiManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should call the callback with an error","suites":["WebApiManager","joinProject","with no data from web"],"updatePoint":{"line":128,"column":55,"index":4452},"line":128,"code":"      return it('should call the callback with an error', function () {\n        return this.callback.calledWith(sinon.match({\n          message: 'no data returned from joinProject request'\n        })).should.equal(true);\n      });","file":"unit/js/WebApiManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should call the callback with a TooManyRequests error code","suites":["WebApiManager","joinProject","when the project is over its rate limit"],"updatePoint":{"line":141,"column":75,"index":5031},"line":141,"code":"      return it('should call the callback with a TooManyRequests error code', function () {\n        return this.callback.calledWith(sinon.match({\n          message: 'rate-limit hit when joining project',\n          info: {\n            code: 'TooManyRequests'\n          }\n        })).should.equal(true);\n      });","file":"unit/js/WebApiManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return the client ip address when behind a proxy","suites":["WebsocketAddressManager","with a proxy configuration"],"updatePoint":{"line":16,"column":63,"index":615},"line":16,"code":"    it('should return the client ip address when behind a proxy', function () {\n      expect(this.websocketAddressManager.getRemoteIp({\n        headers: {\n          'x-forwarded-proto': 'https',\n          'x-forwarded-for': '123.45.67.89'\n        },\n        address: {\n          address: '127.0.0.1'\n        }\n      })).to.equal('123.45.67.89');\n    });","file":"unit/js/WebsocketAddressManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return the client ip address for a direct connection","suites":["WebsocketAddressManager","with a proxy configuration"],"updatePoint":{"line":27,"column":67,"index":973},"line":27,"code":"    it('should return the client ip address for a direct connection', function () {\n      expect(this.websocketAddressManager.getRemoteIp({\n        headers: {},\n        address: {\n          address: '123.45.67.89'\n        }\n      })).to.equal('123.45.67.89');\n    });","file":"unit/js/WebsocketAddressManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return the client ip address when there are no headers in the handshake","suites":["WebsocketAddressManager","with a proxy configuration"],"updatePoint":{"line":35,"column":86,"index":1260},"line":35,"code":"    it('should return the client ip address when there are no headers in the handshake', function () {\n      expect(this.websocketAddressManager.getRemoteIp({\n        address: {\n          address: '123.45.67.89'\n        }\n      })).to.equal('123.45.67.89');\n    });","file":"unit/js/WebsocketAddressManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return a \"client-handshake-missing\" response when the handshake is missing","suites":["WebsocketAddressManager","with a proxy configuration"],"updatePoint":{"line":42,"column":89,"index":1529},"line":42,"code":"    it('should return a \"client-handshake-missing\" response when the handshake is missing', function () {\n      expect(this.websocketAddressManager.getRemoteIp()).to.equal('client-handshake-missing');\n    });","file":"unit/js/WebsocketAddressManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return the client ip address for a direct connection","suites":["WebsocketAddressManager","without a proxy configuration"],"updatePoint":{"line":50,"column":67,"index":1895},"line":50,"code":"    it('should return the client ip address for a direct connection', function () {\n      expect(this.websocketAddressManager.getRemoteIp({\n        headers: {},\n        address: {\n          address: '123.45.67.89'\n        }\n      })).to.equal('123.45.67.89');\n    });","file":"unit/js/WebsocketAddressManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return undefined if the client ip address is not present","suites":["WebsocketAddressManager","without a proxy configuration"],"updatePoint":{"line":58,"column":71,"index":2167},"line":58,"code":"    it('should return undefined if the client ip address is not present', function () {\n      expect(this.websocketAddressManager.getRemoteIp({\n        headers: {},\n        address: {\n          otherAddressProperty: '123.45.67.89'\n        }\n      })).to.be.undefined;\n    });","file":"unit/js/WebsocketAddressManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return the proxy ip address if there is actually a proxy","suites":["WebsocketAddressManager","without a proxy configuration"],"updatePoint":{"line":66,"column":71,"index":2443},"line":66,"code":"    it('should return the proxy ip address if there is actually a proxy', function () {\n      expect(this.websocketAddressManager.getRemoteIp({\n        headers: {\n          'x-forwarded-proto': 'https',\n          'x-forwarded-for': '123.45.67.89'\n        },\n        address: {\n          address: '127.0.0.1'\n        }\n      })).to.equal('127.0.0.1');\n    });","file":"unit/js/WebsocketAddressManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return a \"client-handshake-missing\" response when the handshake is missing","suites":["WebsocketAddressManager","without a proxy configuration"],"updatePoint":{"line":77,"column":89,"index":2820},"line":77,"code":"    it('should return a \"client-handshake-missing\" response when the handshake is missing', function () {\n      expect(this.websocketAddressManager.getRemoteIp()).to.equal('client-handshake-missing');\n    });","file":"unit/js/WebsocketAddressManagerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should load the project from web","suites":["WebsocketController","joinProject","when authorised"],"updatePoint":{"line":81,"column":42,"index":2844},"line":81,"code":"      it('should load the project from web', function () {\n        return this.WebApiManager.joinProject.calledWith(this.project_id, this.user).should.equal(true);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should join the project room","suites":["WebsocketController","joinProject","when authorised"],"updatePoint":{"line":84,"column":38,"index":3014},"line":84,"code":"      it('should join the project room', function () {\n        return this.RoomManager.joinProject.calledWith(this.client, this.project_id).should.equal(true);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should set the privilege level on the client","suites":["WebsocketController","joinProject","when authorised"],"updatePoint":{"line":87,"column":54,"index":3200},"line":87,"code":"      it('should set the privilege level on the client', function () {\n        return this.client.ol_context.privilege_level.should.equal(this.privilegeLevel);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should set the user's id on the client","suites":["WebsocketController","joinProject","when authorised"],"updatePoint":{"line":90,"column":48,"index":3364},"line":90,"code":"      it(\"should set the user's id on the client\", function () {\n        return this.client.ol_context.user_id.should.equal(this.user._id);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should set the user's email on the client","suites":["WebsocketController","joinProject","when authorised"],"updatePoint":{"line":93,"column":51,"index":3517},"line":93,"code":"      it(\"should set the user's email on the client\", function () {\n        return this.client.ol_context.email.should.equal(this.user.email);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should set the user's first_name on the client","suites":["WebsocketController","joinProject","when authorised"],"updatePoint":{"line":96,"column":56,"index":3675},"line":96,"code":"      it(\"should set the user's first_name on the client\", function () {\n        return this.client.ol_context.first_name.should.equal(this.user.first_name);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should set the user's last_name on the client","suites":["WebsocketController","joinProject","when authorised"],"updatePoint":{"line":99,"column":55,"index":3842},"line":99,"code":"      it(\"should set the user's last_name on the client\", function () {\n        return this.client.ol_context.last_name.should.equal(this.user.last_name);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should set the user's sign up date on the client","suites":["WebsocketController","joinProject","when authorised"],"updatePoint":{"line":102,"column":58,"index":4010},"line":102,"code":"      it(\"should set the user's sign up date on the client\", function () {\n        return this.client.ol_context.signup_date.should.equal(this.user.signUpDate);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should set the user's login_count on the client","suites":["WebsocketController","joinProject","when authorised"],"updatePoint":{"line":105,"column":57,"index":4180},"line":105,"code":"      it(\"should set the user's login_count on the client\", function () {\n        return this.client.ol_context.login_count.should.equal(this.user.loginCount);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should set the connected time on the client","suites":["WebsocketController","joinProject","when authorised"],"updatePoint":{"line":108,"column":53,"index":4346},"line":108,"code":"      it('should set the connected time on the client', function () {\n        return this.client.ol_context.connected_time.should.equal(new Date());\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should set the project_id on the client","suites":["WebsocketController","joinProject","when authorised"],"updatePoint":{"line":111,"column":49,"index":4501},"line":111,"code":"      it('should set the project_id on the client', function () {\n        return this.client.ol_context.project_id.should.equal(this.project_id);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should set the project owner id on the client","suites":["WebsocketController","joinProject","when authorised"],"updatePoint":{"line":114,"column":55,"index":4663},"line":114,"code":"      it('should set the project owner id on the client', function () {\n        return this.client.ol_context.owner_id.should.equal(this.owner_id);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should set the is_restricted_user flag on the client","suites":["WebsocketController","joinProject","when authorised"],"updatePoint":{"line":117,"column":62,"index":4828},"line":117,"code":"      it('should set the is_restricted_user flag on the client', function () {\n        return this.client.ol_context.is_restricted_user.should.equal(this.isRestrictedUser);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should call the callback with the project, privilegeLevel and protocolVersion","suites":["WebsocketController","joinProject","when authorised"],"updatePoint":{"line":120,"column":87,"index":5036},"line":120,"code":"      it('should call the callback with the project, privilegeLevel and protocolVersion', function () {\n        return this.callback.calledWith(null, this.project, this.privilegeLevel, this.WebsocketController.PROTOCOL_VERSION).should.equal(true);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should mark the user as connected in ConnectedUsersManager","suites":["WebsocketController","joinProject","when authorised"],"updatePoint":{"line":123,"column":68,"index":5275},"line":123,"code":"      it('should mark the user as connected in ConnectedUsersManager', function () {\n        return this.ConnectedUsersManager.updateUserPosition.calledWith(this.project_id, this.client.publicId, this.user, null).should.equal(true);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should increment the join-project metric","suites":["WebsocketController","joinProject","when authorised"],"updatePoint":{"line":126,"column":57,"index":5507},"line":126,"code":"      return it('should increment the join-project metric', function () {\n        return this.metrics.inc.calledWith('editor.join-project').should.equal(true);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return an error","suites":["WebsocketController","joinProject","when not authorized"],"updatePoint":{"line":135,"column":32,"index":5949},"line":135,"code":"      it('should return an error', function () {\n        return this.callback.calledWith(sinon.match({\n          message: 'not authorized'\n        })).should.equal(true);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not log an error","suites":["WebsocketController","joinProject","when not authorized"],"updatePoint":{"line":140,"column":40,"index":6138},"line":140,"code":"      return it('should not log an error', function () {\n        return this.logger.error.called.should.equal(false);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return an error","suites":["WebsocketController","joinProject","when the subscribe failed"],"updatePoint":{"line":160,"column":39,"index":7073},"line":160,"code":"      return it('should return an error', function () {\n        this.callback.calledWith(sinon.match({\n          message: 'subscribe failed'\n        })).should.equal(true);\n        return this.callback.args[0][0].message.should.equal('subscribe failed');\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not call WebApiManager.joinProject","suites":["WebsocketController","joinProject","when the client has disconnected"],"updatePoint":{"line":173,"column":51,"index":7679},"line":173,"code":"      it('should not call WebApiManager.joinProject', function () {\n        return expect(this.WebApiManager.joinProject.called).to.equal(false);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should call the callback with no details","suites":["WebsocketController","joinProject","when the client has disconnected"],"updatePoint":{"line":176,"column":50,"index":7834},"line":176,"code":"      it('should call the callback with no details', function () {\n        return expect(this.callback.args[0]).to.deep.equal([]);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should increment the editor.join-project.disconnected metric with a status","suites":["WebsocketController","joinProject","when the client has disconnected"],"updatePoint":{"line":179,"column":91,"index":8016},"line":179,"code":"      return it('should increment the editor.join-project.disconnected metric with a status', function () {\n        return expect(this.metrics.inc.calledWith('editor.join-project.disconnected', 1, {\n          status: 'immediately'\n        })).to.equal(true);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should call the callback with no details","suites":["WebsocketController","joinProject","when the client disconnects while WebApiManager.joinProject is running"],"updatePoint":{"line":193,"column":50,"index":8715},"line":193,"code":"      it('should call the callback with no details', function () {\n        return expect(this.callback.args[0]).to.deep.equal([]);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should increment the editor.join-project.disconnected metric with a status","suites":["WebsocketController","joinProject","when the client disconnects while WebApiManager.joinProject is running"],"updatePoint":{"line":196,"column":91,"index":8897},"line":196,"code":"      return it('should increment the editor.join-project.disconnected metric with a status', function () {\n        return expect(this.metrics.inc.calledWith('editor.join-project.disconnected', 1, {\n          status: 'after-web-api-call'\n        })).to.equal(true);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should bail out when calling leaveProject","suites":["WebsocketController","leaveProject","when the client did not joined a project yet"],"updatePoint":{"line":231,"column":51,"index":10268},"line":231,"code":"      it('should bail out when calling leaveProject', function () {\n        this.WebsocketLoadBalancer.emitToRoom.called.should.equal(false);\n        this.RoomManager.leaveProjectAndDocs.called.should.equal(false);\n        return this.ConnectedUsersManager.markUserAsDisconnected.called.should.equal(false);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not inc any metric","suites":["WebsocketController","leaveProject","when the client did not joined a project yet"],"updatePoint":{"line":236,"column":42,"index":10577},"line":236,"code":"      return it('should not inc any metric', function () {\n        return this.metrics.inc.called.should.equal(false);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should end clientTracking.clientDisconnected to the project room","suites":["WebsocketController","leaveProject","when the project is empty"],"updatePoint":{"line":245,"column":74,"index":10962},"line":245,"code":"      it('should end clientTracking.clientDisconnected to the project room', function () {\n        return this.WebsocketLoadBalancer.emitToRoom.calledWith(this.project_id, 'clientTracking.clientDisconnected', this.client.publicId).should.equal(true);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should mark the user as disconnected","suites":["WebsocketController","leaveProject","when the project is empty"],"updatePoint":{"line":248,"column":46,"index":11195},"line":248,"code":"      it('should mark the user as disconnected', function () {\n        return this.ConnectedUsersManager.markUserAsDisconnected.calledWith(this.project_id, this.client.publicId).should.equal(true);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should flush the project in the document updater","suites":["WebsocketController","leaveProject","when the project is empty"],"updatePoint":{"line":251,"column":58,"index":11415},"line":251,"code":"      it('should flush the project in the document updater', function () {\n        return this.DocumentUpdaterManager.flushProjectToMongoAndDelete.calledWith(this.project_id).should.equal(true);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should increment the leave-project metric","suites":["WebsocketController","leaveProject","when the project is empty"],"updatePoint":{"line":254,"column":51,"index":11613},"line":254,"code":"      it('should increment the leave-project metric', function () {\n        return this.metrics.inc.calledWith('editor.leave-project').should.equal(true);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should track the disconnection in RoomManager","suites":["WebsocketController","leaveProject","when the project is empty"],"updatePoint":{"line":257,"column":62,"index":11789},"line":257,"code":"      return it('should track the disconnection in RoomManager', function () {\n        return this.RoomManager.leaveProjectAndDocs.calledWith(this.client).should.equal(true);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not flush the project in the document updater","suites":["WebsocketController","leaveProject","when the project is not empty"],"updatePoint":{"line":276,"column":69,"index":12507},"line":276,"code":"      return it('should not flush the project in the document updater', function () {\n        return this.DocumentUpdaterManager.flushProjectToMongoAndDelete.called.should.equal(false);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not end clientTracking.clientDisconnected to the project room","suites":["WebsocketController","leaveProject","when client has not authenticated"],"updatePoint":{"line":286,"column":78,"index":13008},"line":286,"code":"      it('should not end clientTracking.clientDisconnected to the project room', function () {\n        return this.WebsocketLoadBalancer.emitToRoom.calledWith(this.project_id, 'clientTracking.clientDisconnected', this.client.publicId).should.equal(false);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not mark the user as disconnected","suites":["WebsocketController","leaveProject","when client has not authenticated"],"updatePoint":{"line":289,"column":50,"index":13246},"line":289,"code":"      it('should not mark the user as disconnected', function () {\n        return this.ConnectedUsersManager.markUserAsDisconnected.calledWith(this.project_id, this.client.publicId).should.equal(false);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not flush the project in the document updater","suites":["WebsocketController","leaveProject","when client has not authenticated"],"updatePoint":{"line":292,"column":62,"index":13471},"line":292,"code":"      it('should not flush the project in the document updater', function () {\n        return this.DocumentUpdaterManager.flushProjectToMongoAndDelete.calledWith(this.project_id).should.equal(false);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not increment the leave-project metric","suites":["WebsocketController","leaveProject","when client has not authenticated"],"updatePoint":{"line":295,"column":62,"index":13681},"line":295,"code":"      return it('should not increment the leave-project metric', function () {\n        return this.metrics.inc.calledWith('editor.leave-project').should.equal(false);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not end clientTracking.clientDisconnected to the project room","suites":["WebsocketController","leaveProject","when client has not joined a project"],"updatePoint":{"line":305,"column":78,"index":14188},"line":305,"code":"      it('should not end clientTracking.clientDisconnected to the project room', function () {\n        return this.WebsocketLoadBalancer.emitToRoom.calledWith(this.project_id, 'clientTracking.clientDisconnected', this.client.publicId).should.equal(false);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not mark the user as disconnected","suites":["WebsocketController","leaveProject","when client has not joined a project"],"updatePoint":{"line":308,"column":50,"index":14426},"line":308,"code":"      it('should not mark the user as disconnected', function () {\n        return this.ConnectedUsersManager.markUserAsDisconnected.calledWith(this.project_id, this.client.publicId).should.equal(false);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not flush the project in the document updater","suites":["WebsocketController","leaveProject","when client has not joined a project"],"updatePoint":{"line":311,"column":62,"index":14651},"line":311,"code":"      it('should not flush the project in the document updater', function () {\n        return this.DocumentUpdaterManager.flushProjectToMongoAndDelete.calledWith(this.project_id).should.equal(false);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not increment the leave-project metric","suites":["WebsocketController","leaveProject","when client has not joined a project"],"updatePoint":{"line":314,"column":62,"index":14861},"line":314,"code":"      return it('should not increment the leave-project metric', function () {\n        return this.metrics.inc.calledWith('editor.leave-project').should.equal(false);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should inc the joinLeaveEpoch","suites":["WebsocketController","joinDoc","works"],"updatePoint":{"line":341,"column":39,"index":16091},"line":341,"code":"      it('should inc the joinLeaveEpoch', function () {\n        expect(this.client.joinLeaveEpoch).to.equal(1);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should check that the client is authorized to view the project","suites":["WebsocketController","joinDoc","works"],"updatePoint":{"line":344,"column":72,"index":16246},"line":344,"code":"      it('should check that the client is authorized to view the project', function () {\n        return this.AuthorizationManager.assertClientCanViewProject.calledWith(this.client).should.equal(true);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should get the document from the DocumentUpdaterManager with fromVersion","suites":["WebsocketController","joinDoc","works"],"updatePoint":{"line":347,"column":82,"index":16467},"line":347,"code":"      it('should get the document from the DocumentUpdaterManager with fromVersion', function () {\n        return this.DocumentUpdaterManager.getDocument.calledWith(this.project_id, this.doc_id, -1).should.equal(true);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should add permissions for the client to access the doc","suites":["WebsocketController","joinDoc","works"],"updatePoint":{"line":350,"column":65,"index":16679},"line":350,"code":"      it('should add permissions for the client to access the doc', function () {\n        return this.AuthorizationManager.addAccessToDoc.calledWith(this.client, this.doc_id).should.equal(true);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should join the client to room for the doc_id","suites":["WebsocketController","joinDoc","works"],"updatePoint":{"line":353,"column":55,"index":16874},"line":353,"code":"      it('should join the client to room for the doc_id', function () {\n        return this.RoomManager.joinDoc.calledWith(this.client, this.doc_id).should.equal(true);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should call the callback with the lines, version, ranges and ops","suites":["WebsocketController","joinDoc","works"],"updatePoint":{"line":356,"column":74,"index":17072},"line":356,"code":"      it('should call the callback with the lines, version, ranges and ops', function () {\n        return this.callback.calledWith(null, this.doc_lines, this.version, this.ops, this.ranges).should.equal(true);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should increment the join-doc metric","suites":["WebsocketController","joinDoc","works"],"updatePoint":{"line":359,"column":53,"index":17271},"line":359,"code":"      return it('should increment the join-doc metric', function () {\n        return this.metrics.inc.calledWith('editor.join-doc').should.equal(true);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should get the document from the DocumentUpdaterManager with fromVersion","suites":["WebsocketController","joinDoc","with a fromVersion"],"updatePoint":{"line":368,"column":89,"index":17720},"line":368,"code":"      return it('should get the document from the DocumentUpdaterManager with fromVersion', function () {\n        return this.DocumentUpdaterManager.getDocument.calledWith(this.project_id, this.doc_id, this.fromVersion).should.equal(true);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should call the callback with the escaped lines","suites":["WebsocketController","joinDoc","with doclines that need escaping"],"updatePoint":{"line":377,"column":64,"index":18210},"line":377,"code":"      return it('should call the callback with the escaped lines', function () {\n        const escapedLines = this.callback.args[0][1];\n        const escapedWord = escapedLines.pop();\n        escapedWord.should.equal('rÃ¤ksmÃ¶rgÃ¥s');\n        // Check that unescaping works\n        return decodeURIComponent(escape(escapedWord)).should.equal('räksmörgås');\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should call the callback with the encoded comment","suites":["WebsocketController","joinDoc","with comments that need encoding"],"updatePoint":{"line":396,"column":66,"index":18929},"line":396,"code":"      return it('should call the callback with the encoded comment', function () {\n        const encodedComments = this.callback.args[0][4];\n        const encodedComment = encodedComments.comments.pop();\n        const encodedCommentText = encodedComment.op.c;\n        return encodedCommentText.should.equal('rÃ¤ksmÃ¶rgÃ¥s');\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should call the callback with the encoded insert change","suites":["WebsocketController","joinDoc","with changes that need encoding"],"updatePoint":{"line":404,"column":65,"index":19333},"line":404,"code":"      it('should call the callback with the encoded insert change', function () {\n        this.ranges.changes = [{\n          op: {\n            i: 'räksmörgås'\n          }\n        }];\n        this.WebsocketController.joinDoc(this.client, this.doc_id, -1, {\n          encodeRanges: true\n        }, this.callback);\n        const encodedChanges = this.callback.args[0][4];\n        const encodedChange = encodedChanges.changes.pop();\n        const encodedChangeText = encodedChange.op.i;\n        return encodedChangeText.should.equal('rÃ¤ksmÃ¶rgÃ¥s');\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should call the callback with the encoded delete change","suites":["WebsocketController","joinDoc","with changes that need encoding"],"updatePoint":{"line":418,"column":72,"index":19897},"line":418,"code":"      return it('should call the callback with the encoded delete change', function () {\n        this.ranges.changes = [{\n          op: {\n            d: 'räksmörgås'\n          }\n        }];\n        this.WebsocketController.joinDoc(this.client, this.doc_id, -1, {\n          encodeRanges: true\n        }, this.callback);\n        const encodedChanges = this.callback.args[0][4];\n        const encodedChange = encodedChanges.changes.pop();\n        const encodedChangeText = encodedChange.op.d;\n        return encodedChangeText.should.equal('rÃ¤ksmÃ¶rgÃ¥s');\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should call the callback with an error","suites":["WebsocketController","joinDoc","when not authorized"],"updatePoint":{"line":438,"column":48,"index":20777},"line":438,"code":"      it('should call the callback with an error', function () {\n        return this.callback.calledWith(sinon.match({\n          message: 'not authorized'\n        })).should.equal(true);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not call the DocumentUpdaterManager","suites":["WebsocketController","joinDoc","when not authorized"],"updatePoint":{"line":443,"column":59,"index":20985},"line":443,"code":"      return it('should not call the DocumentUpdaterManager', function () {\n        return this.DocumentUpdaterManager.getDocument.called.should.equal(false);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should overwrite ranges.comments with an empty list","suites":["WebsocketController","joinDoc","with a restricted client"],"updatePoint":{"line":461,"column":68,"index":21582},"line":461,"code":"      return it('should overwrite ranges.comments with an empty list', function () {\n        const ranges = this.callback.args[0][4];\n        return expect(ranges.comments).to.deep.equal([]);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should call the callback with no details","suites":["WebsocketController","joinDoc","when the client has disconnected"],"updatePoint":{"line":471,"column":50,"index":22027},"line":471,"code":"      it('should call the callback with no details', function () {\n        return expect(this.callback.args[0]).to.deep.equal([]);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should increment the editor.join-doc.disconnected metric with a status","suites":["WebsocketController","joinDoc","when the client has disconnected"],"updatePoint":{"line":474,"column":80,"index":22198},"line":474,"code":"      it('should increment the editor.join-doc.disconnected metric with a status', function () {\n        return expect(this.metrics.inc.calledWith('editor.join-doc.disconnected', 1, {\n          status: 'immediately'\n        })).to.equal(true);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not get the document","suites":["WebsocketController","joinDoc","when the client has disconnected"],"updatePoint":{"line":479,"column":44,"index":22416},"line":479,"code":"      return it('should not get the document', function () {\n        return expect(this.DocumentUpdaterManager.getDocument.called).to.equal(false);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should call the callback with no details","suites":["WebsocketController","joinDoc","when the client disconnects while auth checks are running"],"updatePoint":{"line":495,"column":50,"index":23123},"line":495,"code":"      it('should call the callback with no details', function () {\n        expect(this.callback.called).to.equal(true);\n        expect(this.callback.args[0]).to.deep.equal([]);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should increment the editor.join-doc.disconnected metric with a status","suites":["WebsocketController","joinDoc","when the client disconnects while auth checks are running"],"updatePoint":{"line":499,"column":80,"index":23340},"line":499,"code":"      it('should increment the editor.join-doc.disconnected metric with a status', function () {\n        expect(this.metrics.inc.calledWith('editor.join-doc.disconnected', 1, {\n          status: 'after-client-auth-check'\n        })).to.equal(true);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not get the document","suites":["WebsocketController","joinDoc","when the client disconnects while auth checks are running"],"updatePoint":{"line":504,"column":37,"index":23556},"line":504,"code":"      it('should not get the document', function () {\n        expect(this.DocumentUpdaterManager.getDocument.called).to.equal(false);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should call the callback with an error","suites":["WebsocketController","joinDoc","when the client starts a parallel joinDoc request"],"updatePoint":{"line":522,"column":48,"index":24440},"line":522,"code":"      it('should call the callback with an error', function () {\n        expect(this.callback.called).to.equal(true);\n        expect(this.callback.args[0][0].message).to.equal('joinLeaveEpoch mismatch');\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should get the document once (the parallel request wins)","suites":["WebsocketController","joinDoc","when the client starts a parallel joinDoc request"],"updatePoint":{"line":526,"column":66,"index":24672},"line":526,"code":"      it('should get the document once (the parallel request wins)', function () {\n        expect(this.DocumentUpdaterManager.getDocument.callCount).to.equal(1);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should call the callback with an error","suites":["WebsocketController","joinDoc","when the client starts a parallel leaveDoc request"],"updatePoint":{"line":543,"column":48,"index":25450},"line":543,"code":"      it('should call the callback with an error', function () {\n        expect(this.callback.called).to.equal(true);\n        expect(this.callback.args[0][0].message).to.equal('joinLeaveEpoch mismatch');\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not get the document","suites":["WebsocketController","joinDoc","when the client starts a parallel leaveDoc request"],"updatePoint":{"line":547,"column":37,"index":25653},"line":547,"code":"      it('should not get the document', function () {\n        expect(this.DocumentUpdaterManager.getDocument.called).to.equal(false);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should call the callback with no details","suites":["WebsocketController","joinDoc","when the client disconnects while RoomManager.joinDoc is running"],"updatePoint":{"line":559,"column":50,"index":26199},"line":559,"code":"      it('should call the callback with no details', function () {\n        return expect(this.callback.args[0]).to.deep.equal([]);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should increment the editor.join-doc.disconnected metric with a status","suites":["WebsocketController","joinDoc","when the client disconnects while RoomManager.joinDoc is running"],"updatePoint":{"line":562,"column":80,"index":26370},"line":562,"code":"      it('should increment the editor.join-doc.disconnected metric with a status', function () {\n        return expect(this.metrics.inc.calledWith('editor.join-doc.disconnected', 1, {\n          status: 'after-joining-room'\n        })).to.equal(true);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not get the document","suites":["WebsocketController","joinDoc","when the client disconnects while RoomManager.joinDoc is running"],"updatePoint":{"line":567,"column":44,"index":26595},"line":567,"code":"      return it('should not get the document', function () {\n        return expect(this.DocumentUpdaterManager.getDocument.called).to.equal(false);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should call the callback with no details","suites":["WebsocketController","joinDoc","when the client disconnects while DocumentUpdaterManager.getDocument is running"],"updatePoint":{"line":579,"column":50,"index":27270},"line":579,"code":"      it('should call the callback with no details', function () {\n        return expect(this.callback.args[0]).to.deep.equal([]);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should increment the editor.join-doc.disconnected metric with a status","suites":["WebsocketController","joinDoc","when the client disconnects while DocumentUpdaterManager.getDocument is running"],"updatePoint":{"line":582,"column":87,"index":27448},"line":582,"code":"      return it('should increment the editor.join-doc.disconnected metric with a status', function () {\n        return expect(this.metrics.inc.calledWith('editor.join-doc.disconnected', 1, {\n          status: 'after-doc-updater-call'\n        })).to.equal(true);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should inc the joinLeaveEpoch","suites":["WebsocketController","leaveDoc"],"updatePoint":{"line":596,"column":37,"index":27988},"line":596,"code":"    it('should inc the joinLeaveEpoch', function () {\n      expect(this.client.joinLeaveEpoch).to.equal(1);\n    });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should remove the client from the doc_id room","suites":["WebsocketController","leaveDoc"],"updatePoint":{"line":599,"column":53,"index":28120},"line":599,"code":"    it('should remove the client from the doc_id room', function () {\n      return this.RoomManager.leaveDoc.calledWith(this.client, this.doc_id).should.equal(true);\n    });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should call the callback","suites":["WebsocketController","leaveDoc"],"updatePoint":{"line":602,"column":32,"index":28273},"line":602,"code":"    it('should call the callback', function () {\n      return this.callback.called.should.equal(true);\n    });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should increment the leave-doc metric","suites":["WebsocketController","leaveDoc"],"updatePoint":{"line":605,"column":52,"index":28404},"line":605,"code":"    return it('should increment the leave-doc metric', function () {\n      return this.metrics.inc.calledWith('editor.leave-doc').should.equal(true);\n    });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should check that the client is authorized to view the project","suites":["WebsocketController","getConnectedUsers","when authorized"],"updatePoint":{"line":624,"column":72,"index":29301},"line":624,"code":"      it('should check that the client is authorized to view the project', function () {\n        return this.AuthorizationManager.assertClientCanViewProject.calledWith(this.client).should.equal(true);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should broadcast a request to update the client list","suites":["WebsocketController","getConnectedUsers","when authorized"],"updatePoint":{"line":627,"column":62,"index":29502},"line":627,"code":"      it('should broadcast a request to update the client list', function () {\n        return this.WebsocketLoadBalancer.emitToRoom.calledWith(this.project_id, 'clientTracking.refresh').should.equal(true);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should get the connected users for the project","suites":["WebsocketController","getConnectedUsers","when authorized"],"updatePoint":{"line":630,"column":56,"index":29712},"line":630,"code":"      it('should get the connected users for the project', function () {\n        return this.ConnectedUsersManager.getConnectedUsers.calledWith(this.project_id).should.equal(true);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return the users","suites":["WebsocketController","getConnectedUsers","when authorized"],"updatePoint":{"line":633,"column":33,"index":29880},"line":633,"code":"      it('should return the users', function () {\n        return this.callback.calledWith(null, this.users).should.equal(true);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should increment the get-connected-users metric","suites":["WebsocketController","getConnectedUsers","when authorized"],"updatePoint":{"line":636,"column":64,"index":30049},"line":636,"code":"      return it('should increment the get-connected-users metric', function () {\n        return this.metrics.inc.calledWith('editor.get-connected-users').should.equal(true);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not get the connected users for the project","suites":["WebsocketController","getConnectedUsers","when not authorized"],"updatePoint":{"line":645,"column":60,"index":30548},"line":645,"code":"      it('should not get the connected users for the project', function () {\n        return this.ConnectedUsersManager.getConnectedUsers.called.should.equal(false);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return an error","suites":["WebsocketController","getConnectedUsers","when not authorized"],"updatePoint":{"line":648,"column":39,"index":30702},"line":648,"code":"      return it('should return an error', function () {\n        return this.callback.calledWith(this.err).should.equal(true);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return an empty array of users","suites":["WebsocketController","getConnectedUsers","when restricted user"],"updatePoint":{"line":658,"column":47,"index":31190},"line":658,"code":"      it('should return an empty array of users', function () {\n        return this.callback.calledWith(null, []).should.equal(true);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not get the connected users for the project","suites":["WebsocketController","getConnectedUsers","when restricted user"],"updatePoint":{"line":661,"column":67,"index":31354},"line":661,"code":"      return it('should not get the connected users for the project', function () {\n        return this.ConnectedUsersManager.getConnectedUsers.called.should.equal(false);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should call the callback with no details","suites":["WebsocketController","getConnectedUsers","when the client has disconnected"],"updatePoint":{"line":671,"column":50,"index":31843},"line":671,"code":"      it('should call the callback with no details', function () {\n        return expect(this.callback.args[0]).to.deep.equal([]);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not check permissions","suites":["WebsocketController","getConnectedUsers","when the client has disconnected"],"updatePoint":{"line":674,"column":45,"index":31979},"line":674,"code":"      return it('should not check permissions', function () {\n        return expect(this.AuthorizationManager.assertClientCanViewProject.called).to.equal(false);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should send the update to the project room with the user's name","suites":["WebsocketController","updateClientPosition","with a logged in user"],"updatePoint":{"line":710,"column":73,"index":33422},"line":710,"code":"      it(\"should send the update to the project room with the user's name\", function () {\n        return this.WebsocketLoadBalancer.emitToRoom.calledWith(this.project_id, 'clientTracking.clientUpdated', this.populatedCursorData).should.equal(true);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should send the  cursor data to the connected user manager","suites":["WebsocketController","updateClientPosition","with a logged in user"],"updatePoint":{"line":713,"column":68,"index":33676},"line":713,"code":"      it('should send the  cursor data to the connected user manager', function (done) {\n        this.ConnectedUsersManager.updateUserPosition.calledWith(this.project_id, this.client.publicId, {\n          _id: this.user_id,\n          email: this.email,\n          first_name: this.first_name,\n          last_name: this.last_name\n        }, {\n          row: this.row,\n          column: this.column,\n          doc_id: this.doc_id\n        }).should.equal(true);\n        return done();\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should increment the update-client-position metric at 0.1 frequency","suites":["WebsocketController","updateClientPosition","with a logged in user"],"updatePoint":{"line":726,"column":84,"index":34183},"line":726,"code":"      return it('should increment the update-client-position metric at 0.1 frequency', function () {\n        return this.metrics.inc.calledWith('editor.update-client-position', 0.1).should.equal(true);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should send the update to the project room with the user's name","suites":["WebsocketController","updateClientPosition","with a logged in user who has no last_name set"],"updatePoint":{"line":750,"column":73,"index":35136},"line":750,"code":"      it(\"should send the update to the project room with the user's name\", function () {\n        return this.WebsocketLoadBalancer.emitToRoom.calledWith(this.project_id, 'clientTracking.clientUpdated', this.populatedCursorData).should.equal(true);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should send the  cursor data to the connected user manager","suites":["WebsocketController","updateClientPosition","with a logged in user who has no last_name set"],"updatePoint":{"line":753,"column":68,"index":35390},"line":753,"code":"      it('should send the  cursor data to the connected user manager', function (done) {\n        this.ConnectedUsersManager.updateUserPosition.calledWith(this.project_id, this.client.publicId, {\n          _id: this.user_id,\n          email: this.email,\n          first_name: this.first_name,\n          last_name: undefined\n        }, {\n          row: this.row,\n          column: this.column,\n          doc_id: this.doc_id\n        }).should.equal(true);\n        return done();\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should increment the update-client-position metric at 0.1 frequency","suites":["WebsocketController","updateClientPosition","with a logged in user who has no last_name set"],"updatePoint":{"line":766,"column":84,"index":35892},"line":766,"code":"      return it('should increment the update-client-position metric at 0.1 frequency', function () {\n        return this.metrics.inc.calledWith('editor.update-client-position', 0.1).should.equal(true);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should send the update to the project room with the user's name","suites":["WebsocketController","updateClientPosition","with a logged in user who has no first_name set"],"updatePoint":{"line":790,"column":73,"index":36842},"line":790,"code":"      it(\"should send the update to the project room with the user's name\", function () {\n        return this.WebsocketLoadBalancer.emitToRoom.calledWith(this.project_id, 'clientTracking.clientUpdated', this.populatedCursorData).should.equal(true);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should send the  cursor data to the connected user manager","suites":["WebsocketController","updateClientPosition","with a logged in user who has no first_name set"],"updatePoint":{"line":793,"column":68,"index":37096},"line":793,"code":"      it('should send the  cursor data to the connected user manager', function (done) {\n        this.ConnectedUsersManager.updateUserPosition.calledWith(this.project_id, this.client.publicId, {\n          _id: this.user_id,\n          email: this.email,\n          first_name: undefined,\n          last_name: this.last_name\n        }, {\n          row: this.row,\n          column: this.column,\n          doc_id: this.doc_id\n        }).should.equal(true);\n        return done();\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should increment the update-client-position metric at 0.1 frequency","suites":["WebsocketController","updateClientPosition","with a logged in user who has no first_name set"],"updatePoint":{"line":806,"column":84,"index":37597},"line":806,"code":"      return it('should increment the update-client-position metric at 0.1 frequency', function () {\n        return this.metrics.inc.calledWith('editor.update-client-position', 0.1).should.equal(true);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should send the update to the project name with no name","suites":["WebsocketController","updateClientPosition","with a logged in user who has no names set"],"updatePoint":{"line":821,"column":72,"index":38264},"line":821,"code":"      return it('should send the update to the project name with no name', function () {\n        return this.WebsocketLoadBalancer.emitToRoom.calledWith(this.project_id, 'clientTracking.clientUpdated', {\n          doc_id: this.doc_id,\n          id: this.client.publicId,\n          user_id: this.user_id,\n          name: '',\n          row: this.row,\n          column: this.column,\n          email: this.email\n        }).should.equal(true);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should send the update to the project room with no name","suites":["WebsocketController","updateClientPosition","with an anonymous user"],"updatePoint":{"line":840,"column":65,"index":38990},"line":840,"code":"      it('should send the update to the project room with no name', function () {\n        return this.WebsocketLoadBalancer.emitToRoom.calledWith(this.project_id, 'clientTracking.clientUpdated', {\n          doc_id: this.doc_id,\n          id: this.client.publicId,\n          name: '',\n          row: this.row,\n          column: this.column\n        }).should.equal(true);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not send cursor data to the connected user manager","suites":["WebsocketController","updateClientPosition","with an anonymous user"],"updatePoint":{"line":849,"column":74,"index":39379},"line":849,"code":"      return it('should not send cursor data to the connected user manager', function (done) {\n        this.ConnectedUsersManager.updateUserPosition.called.should.equal(false);\n        return done();\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should call the callback with no details","suites":["WebsocketController","updateClientPosition","when the client has disconnected"],"updatePoint":{"line":863,"column":50,"index":39985},"line":863,"code":"      it('should call the callback with no details', function () {\n        return expect(this.callback.args[0]).to.deep.equal([]);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not check permissions","suites":["WebsocketController","updateClientPosition","when the client has disconnected"],"updatePoint":{"line":866,"column":45,"index":40121},"line":866,"code":"      return it('should not check permissions', function () {\n        return expect(this.AuthorizationManager.assertClientCanViewProjectAndDoc.called).to.equal(false);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should set the source of the update to the client id","suites":["WebsocketController","applyOtUpdate","succesfully"],"updatePoint":{"line":888,"column":62,"index":40969},"line":888,"code":"      it('should set the source of the update to the client id', function () {\n        return this.update.meta.source.should.equal(this.client.publicId);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should set the user_id of the update to the user id","suites":["WebsocketController","applyOtUpdate","succesfully"],"updatePoint":{"line":891,"column":61,"index":41132},"line":891,"code":"      it('should set the user_id of the update to the user id', function () {\n        return this.update.meta.user_id.should.equal(this.user_id);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should queue the update","suites":["WebsocketController","applyOtUpdate","succesfully"],"updatePoint":{"line":894,"column":33,"index":41260},"line":894,"code":"      it('should queue the update', function () {\n        return this.DocumentUpdaterManager.queueChange.calledWith(this.project_id, this.doc_id, this.update).should.equal(true);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should call the callback","suites":["WebsocketController","applyOtUpdate","succesfully"],"updatePoint":{"line":897,"column":34,"index":41450},"line":897,"code":"      it('should call the callback', function () {\n        return this.callback.called.should.equal(true);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should increment the doc updates","suites":["WebsocketController","applyOtUpdate","succesfully"],"updatePoint":{"line":900,"column":49,"index":41582},"line":900,"code":"      return it('should increment the doc updates', function () {\n        return this.metrics.inc.calledWith('editor.doc-update').should.equal(true);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should disconnect the client","suites":["WebsocketController","applyOtUpdate","unsuccessfully"],"updatePoint":{"line":910,"column":38,"index":42109},"line":910,"code":"      it('should disconnect the client', function () {\n        return this.client.disconnect.called.should.equal(true);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not log an error","suites":["WebsocketController","applyOtUpdate","unsuccessfully"],"updatePoint":{"line":913,"column":33,"index":42234},"line":913,"code":"      it('should not log an error', function () {\n        return this.logger.error.called.should.equal(false);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should call the callback with the error","suites":["WebsocketController","applyOtUpdate","unsuccessfully"],"updatePoint":{"line":916,"column":56,"index":42378},"line":916,"code":"      return it('should call the callback with the error', function () {\n        return this.callback.calledWith(this.error).should.equal(true);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not log a warning","suites":["WebsocketController","applyOtUpdate","when not authorized"],"updatePoint":{"line":932,"column":34,"index":43159},"line":932,"code":"      it('should not log a warning', function () {\n        return this.logger.warn.called.should.equal(false);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should call the callback with the error","suites":["WebsocketController","applyOtUpdate","when not authorized"],"updatePoint":{"line":935,"column":56,"index":43302},"line":935,"code":"      return it('should call the callback with the error', function () {\n        return this.callback.calledWith(this.error).should.equal(true);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should call the callback with no error","suites":["WebsocketController","applyOtUpdate","update_too_large"],"updatePoint":{"line":950,"column":48,"index":44049},"line":950,"code":"      it('should call the callback with no error', function () {\n        this.callback.called.should.equal(true);\n        return this.callback.args[0].should.deep.equal([]);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should log a warning with the size and context","suites":["WebsocketController","applyOtUpdate","update_too_large"],"updatePoint":{"line":954,"column":56,"index":44241},"line":954,"code":"      it('should log a warning with the size and context', function () {\n        this.logger.warn.called.should.equal(true);\n        return this.logger.warn.args[0].should.deep.equal([{\n          userId: this.user_id,\n          projectId: this.project_id,\n          docId: this.doc_id,\n          updateSize: 7372835\n        }, 'update is too large']);\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should send an otUpdateError the client","suites":["WebsocketController","applyOtUpdate","update_too_large","after 100ms"],"updatePoint":{"line":967,"column":51,"index":44731},"line":967,"code":"        it('should send an otUpdateError the client', function () {\n          return this.client.emit.calledWith('otUpdateError').should.equal(true);\n        });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should disconnect the client","suites":["WebsocketController","applyOtUpdate","update_too_large","after 100ms"],"updatePoint":{"line":970,"column":47,"index":44889},"line":970,"code":"        return it('should disconnect the client', function () {\n          return this.client.disconnect.called.should.equal(true);\n        });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not send an otUpdateError the client","suites":["WebsocketController","applyOtUpdate","update_too_large","when the client disconnects during the next 100ms"],"updatePoint":{"line":979,"column":55,"index":45271},"line":979,"code":"        it('should not send an otUpdateError the client', function () {\n          return this.client.emit.calledWith('otUpdateError').should.equal(false);\n        });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should not disconnect the client","suites":["WebsocketController","applyOtUpdate","update_too_large","when the client disconnects during the next 100ms"],"updatePoint":{"line":982,"column":44,"index":45427},"line":982,"code":"        it('should not disconnect the client', function () {\n          return this.client.disconnect.called.should.equal(false);\n        });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should increment the editor.doc-update.disconnected metric with a status","suites":["WebsocketController","applyOtUpdate","update_too_large","when the client disconnects during the next 100ms"],"updatePoint":{"line":985,"column":91,"index":45615},"line":985,"code":"        return it('should increment the editor.doc-update.disconnected metric with a status', function () {\n          return expect(this.metrics.inc.calledWith('editor.doc-update.disconnected', 1, {\n            status: 'at-otUpdateError'\n          })).to.equal(true);\n        });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return successfully","suites":["WebsocketController","_assertClientCanApplyUpdate","with a read-write client"],"updatePoint":{"line":1014,"column":43,"index":46484},"line":1014,"code":"      return it('should return successfully', function (done) {\n        this.AuthorizationManager.assertClientCanEditProjectAndDoc.yields(null);\n        return this.WebsocketController._assertClientCanApplyUpdate(this.client, this.doc_id, this.edit_update, error => {\n          expect(error).to.be.null;\n          return done();\n        });\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return an error","suites":["WebsocketController","_assertClientCanApplyUpdate","with a read-only client and an edit op"],"updatePoint":{"line":1023,"column":39,"index":46908},"line":1023,"code":"      return it('should return an error', function (done) {\n        this.AuthorizationManager.assertClientCanEditProjectAndDoc.yields(new Error('not authorized'));\n        this.AuthorizationManager.assertClientCanViewProjectAndDoc.yields(null);\n        return this.WebsocketController._assertClientCanApplyUpdate(this.client, this.doc_id, this.edit_update, error => {\n          expect(error.message).to.equal('not authorized');\n          return done();\n        });\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return successfully","suites":["WebsocketController","_assertClientCanApplyUpdate","with a read-only client and a comment op"],"updatePoint":{"line":1033,"column":43,"index":47466},"line":1033,"code":"      return it('should return successfully', function (done) {\n        this.AuthorizationManager.assertClientCanEditProjectAndDoc.yields(new Error('not authorized'));\n        this.AuthorizationManager.assertClientCanViewProjectAndDoc.yields(null);\n        return this.WebsocketController._assertClientCanApplyUpdate(this.client, this.doc_id, this.comment_update, error => {\n          expect(error).to.be.null;\n          return done();\n        });\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return an error","suites":["WebsocketController","_assertClientCanApplyUpdate","with a totally unauthorized client"],"updatePoint":{"line":1043,"column":39,"index":48000},"line":1043,"code":"      return it('should return an error', function (done) {\n        this.AuthorizationManager.assertClientCanEditProjectAndDoc.yields(new Error('not authorized'));\n        this.AuthorizationManager.assertClientCanViewProjectAndDoc.yields(new Error('not authorized'));\n        return this.WebsocketController._assertClientCanApplyUpdate(this.client, this.doc_id, this.comment_update, error => {\n          expect(error.message).to.equal('not authorized');\n          return done();\n        });\n      });","file":"unit/js/WebsocketControllerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should publish the message to redis","suites":["WebsocketLoadBalancer","emitToRoom"],"updatePoint":{"line":62,"column":50,"index":2076},"line":62,"code":"    return it('should publish the message to redis', function () {\n      return this.ChannelManager.publish.calledWith(this.WebsocketLoadBalancer.rclientPubList[0], 'editor-events', this.room_id, JSON.stringify({\n        room_id: this.room_id,\n        message: this.message,\n        payload: this.payload\n      })).should.equal(true);\n    });","file":"unit/js/WebsocketLoadBalancerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should emit to the room 'all'","suites":["WebsocketLoadBalancer","emitToAll"],"updatePoint":{"line":75,"column":44,"index":2648},"line":75,"code":"    return it(\"should emit to the room 'all'\", function () {\n      return this.WebsocketLoadBalancer.emitToRoom.calledWith('all', this.message, ...Array.from(this.payload)).should.equal(true);\n    });","file":"unit/js/WebsocketLoadBalancerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should subscribe to the editor-events channel","suites":["WebsocketLoadBalancer","listenForEditorEvents"],"updatePoint":{"line":84,"column":53,"index":3085},"line":84,"code":"    it('should subscribe to the editor-events channel', function () {\n      return this.WebsocketLoadBalancer.rclientSubList[0].subscribe.calledWith('editor-events').should.equal(true);\n    });","file":"unit/js/WebsocketLoadBalancerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should process the events with _processEditorEvent","suites":["WebsocketLoadBalancer","listenForEditorEvents"],"updatePoint":{"line":87,"column":65,"index":3291},"line":87,"code":"    return it('should process the events with _processEditorEvent', function () {\n      return this.WebsocketLoadBalancer.rclientSubList[0].on.calledWith('message', sinon.match.func).should.equal(true);\n    });","file":"unit/js/WebsocketLoadBalancerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should log an error","suites":["WebsocketLoadBalancer","_processEditorEvent","with bad JSON"],"updatePoint":{"line":98,"column":36,"index":3839},"line":98,"code":"      return it('should log an error', function () {\n        return this.logger.error.called.should.equal(true);\n      });","file":"unit/js/WebsocketLoadBalancerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should send the message to all (unique) clients in the room","suites":["WebsocketLoadBalancer","_processEditorEvent","with a designated room"],"updatePoint":{"line":128,"column":76,"index":4814},"line":128,"code":"      return it('should send the message to all (unique) clients in the room', function () {\n        this.io.sockets.clients.calledWith(this.room_id).should.equal(true);\n        this.emit1.calledWith(this.message, ...Array.from(this.payload)).should.equal(true);\n        this.emit2.calledWith(this.message, ...Array.from(this.payload)).should.equal(true);\n        return this.emit3.called.should.equal(false);\n      });","file":"unit/js/WebsocketLoadBalancerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should send the message to all (unique) clients in the room","suites":["WebsocketLoadBalancer","_processEditorEvent","with a designated room, and restricted clients, not restricted message"],"updatePoint":{"line":168,"column":76,"index":6311},"line":168,"code":"      return it('should send the message to all (unique) clients in the room', function () {\n        this.io.sockets.clients.calledWith(this.room_id).should.equal(true);\n        this.emit1.calledWith(this.message, ...Array.from(this.payload)).should.equal(true);\n        this.emit2.calledWith(this.message, ...Array.from(this.payload)).should.equal(true);\n        this.emit3.called.should.equal(false); // duplicate client should be ignored\n        return this.emit4.called.should.equal(true);\n      });","file":"unit/js/WebsocketLoadBalancerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should send the message to all (unique) clients in the room, who are not restricted","suites":["WebsocketLoadBalancer","_processEditorEvent","with a designated room, and restricted clients, restricted message"],"updatePoint":{"line":209,"column":100,"index":7943},"line":209,"code":"      return it('should send the message to all (unique) clients in the room, who are not restricted', function () {\n        this.io.sockets.clients.calledWith(this.room_id).should.equal(true);\n        this.emit1.calledWith(this.restrictedMessage, ...Array.from(this.payload)).should.equal(true);\n        this.emit2.calledWith(this.restrictedMessage, ...Array.from(this.payload)).should.equal(true);\n        this.emit3.called.should.equal(false); // duplicate client should be ignored\n        return this.emit4.called.should.equal(false);\n      });","file":"unit/js/WebsocketLoadBalancerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should send the message to all clients","suites":["WebsocketLoadBalancer","_processEditorEvent","when emitting to all"],"updatePoint":{"line":230,"column":55,"index":8914},"line":230,"code":"      return it('should send the message to all clients', function () {\n        return this.emit.calledWith(this.message, ...Array.from(this.payload)).should.equal(true);\n      });","file":"unit/js/WebsocketLoadBalancerTests.js","skipped":false,"dir":"services/real-time/test"},{"name":"should return status 200","suites":["checking words","on successful response"],"updatePoint":{"line":17,"column":32,"index":477},"line":17,"code":"    it('should return status 200', async function () {\n      expect(response.statusCode).to.equal(200);\n    });","file":"acceptance/js/CheckTest.js","skipped":false,"dir":"services/spelling/test"},{"name":"should return the list of misspellings","suites":["checking words","on successful response"],"updatePoint":{"line":20,"column":46,"index":603},"line":20,"code":"    it('should return the list of misspellings', async function () {\n      const body = JSON.parse(response.body);\n      expect(body).to.deep.equal({\n        misspellings: [{\n          index: 0,\n          suggestions: ['anther', 'another']\n        }]\n      });\n    });","file":"acceptance/js/CheckTest.js","skipped":false,"dir":"services/spelling/test"},{"name":"should return the misspellings for all the words","suites":["checking words","when multiple words are submitted"],"updatePoint":{"line":34,"column":56,"index":1062},"line":34,"code":"    it('should return the misspellings for all the words', async function () {\n      const body = JSON.parse(response.body);\n      expect(body.misspellings.length).to.equal(3);\n    });","file":"acceptance/js/CheckTest.js","skipped":false,"dir":"services/spelling/test"},{"name":"should have misspelling suggestions with consecutive indexes","suites":["checking words","when multiple words are submitted"],"updatePoint":{"line":38,"column":68,"index":1259},"line":38,"code":"    it('should have misspelling suggestions with consecutive indexes', async function () {\n      const body = JSON.parse(response.body);\n      const indexes = body.misspellings.map(mspl => mspl.index);\n      expect(indexes).to.deep.equal([0, 1, 2]);\n    });","file":"acceptance/js/CheckTest.js","skipped":false,"dir":"services/spelling/test"},{"name":"should return identical suggestions for the same entry","suites":["checking words","when multiple words are submitted"],"updatePoint":{"line":43,"column":62,"index":1511},"line":43,"code":"    it('should return identical suggestions for the same entry', async function () {\n      const body = JSON.parse(response.body);\n      expect(body.misspellings[0].suggestions).to.deep.equal(body.misspellings[1].suggestions);\n    });","file":"acceptance/js/CheckTest.js","skipped":false,"dir":"services/spelling/test"},{"name":"should return misspellings for the first 10K results only","suites":["checking words","when a very long list of words if submitted"],"updatePoint":{"line":56,"column":65,"index":2015},"line":56,"code":"    it('should return misspellings for the first 10K results only', async function () {\n      const body = JSON.parse(response.body);\n      expect(body.misspellings.length).to.equal(10000);\n    });","file":"acceptance/js/CheckTest.js","skipped":false,"dir":"services/spelling/test"},{"name":"should have misspelling suggestions with consecutive indexes","suites":["checking words","when a very long list of words if submitted"],"updatePoint":{"line":60,"column":68,"index":2216},"line":60,"code":"    it('should have misspelling suggestions with consecutive indexes', async function () {\n      const body = JSON.parse(response.body);\n      const indexList = body.misspellings.map(mspl => mspl.index);\n      expect(indexList.length).to.equal(10000); // avoid testing over an incorrect array\n      for (let i = 0; i < indexList.length - 1; i++) {\n        expect(indexList[i] + 1).to.equal(indexList[i + 1]);\n      }\n    });","file":"acceptance/js/CheckTest.js","skipped":false,"dir":"services/spelling/test"},{"name":"should return misspellings for the first 10K results only","suites":["checking words","when a very long list of words with utf8 responses"],"updatePoint":{"line":78,"column":65,"index":2961},"line":78,"code":"    it('should return misspellings for the first 10K results only', async function () {\n      const body = JSON.parse(response.body);\n      expect(body.misspellings.length).to.equal(10000);\n    });","file":"acceptance/js/CheckTest.js","skipped":false,"dir":"services/spelling/test"},{"name":"should have misspelling suggestions with consecutive indexes","suites":["checking words","when a very long list of words with utf8 responses"],"updatePoint":{"line":82,"column":68,"index":3162},"line":82,"code":"    it('should have misspelling suggestions with consecutive indexes', async function () {\n      const body = JSON.parse(response.body);\n      const indexList = body.misspellings.map(mspl => mspl.index);\n      expect(indexList.length).to.equal(10000); // avoid testing over an incorrect array\n      for (let i = 0; i < indexList.length - 1; i++) {\n        expect(indexList[i] + 1).to.equal(indexList[i + 1]);\n      }\n    });","file":"acceptance/js/CheckTest.js","skipped":false,"dir":"services/spelling/test"},{"name":"should return the misspellings for all the words","suites":["checking words","when multiple words with utf8 are submitted"],"updatePoint":{"line":95,"column":56,"index":3778},"line":95,"code":"    it('should return the misspellings for all the words', async function () {\n      const body = JSON.parse(response.body);\n      expect(body.misspellings.length).to.equal(4);\n    });","file":"acceptance/js/CheckTest.js","skipped":false,"dir":"services/spelling/test"},{"name":"should have misspelling suggestions with consecutive indexes","suites":["checking words","when multiple words with utf8 are submitted"],"updatePoint":{"line":99,"column":68,"index":3975},"line":99,"code":"    it('should have misspelling suggestions with consecutive indexes', async function () {\n      const body = JSON.parse(response.body);\n      const indexes = body.misspellings.map(mspl => mspl.index);\n      expect(indexes).to.deep.equal([0, 1, 2, 3]);\n    });","file":"acceptance/js/CheckTest.js","skipped":false,"dir":"services/spelling/test"},{"name":"should return identical suggestions for the same entry","suites":["checking words","when multiple words with utf8 are submitted"],"updatePoint":{"line":104,"column":62,"index":4230},"line":104,"code":"    it('should return identical suggestions for the same entry', async function () {\n      const body = JSON.parse(response.body);\n      expect(body.misspellings[0].suggestions).to.deep.equal(body.misspellings[3].suggestions);\n    });","file":"acceptance/js/CheckTest.js","skipped":false,"dir":"services/spelling/test"},{"name":"should return 200","suites":["/health_check"],"updatePoint":{"line":4,"column":23,"index":144},"line":4,"code":"  it('should return 200', async function () {\n    const response = await request.get('/health_check');\n    expect(response.statusCode).to.equal(200);\n  });","file":"acceptance/js/HealthCheckTest.js","skipped":false,"dir":"services/spelling/test"},{"name":"should return 200","suites":["/status"],"updatePoint":{"line":4,"column":23,"index":138},"line":4,"code":"  it('should return 200', async function () {\n    const response = await request.get('/health_check');\n    expect(response.statusCode).to.equal(200);\n  });","file":"acceptance/js/StatusTest.js","skipped":false,"dir":"services/spelling/test"},{"name":"should not correct the word","suites":["ASpell","a correctly spelled word"],"updatePoint":{"line":30,"column":42,"index":933},"line":30,"code":"    return it('should not correct the word', function () {\n      return this.result.length.should.equal(0);\n    });","file":"unit/js/ASpellTests.js","skipped":false,"dir":"services/spelling/test"},{"name":"should correct the word","suites":["ASpell","a misspelled word"],"updatePoint":{"line":42,"column":38,"index":1317},"line":42,"code":"    return it('should correct the word', function () {\n      this.result.length.should.equal(1);\n      return this.result[0].suggestions.indexOf('business').should.not.equal(-1);\n    });","file":"unit/js/ASpellTests.js","skipped":false,"dir":"services/spelling/test"},{"name":"should correct the incorrect words","suites":["ASpell","multiple words"],"updatePoint":{"line":55,"column":49,"index":1805},"line":55,"code":"    return it('should correct the incorrect words', function () {\n      this.result[0].index.should.equal(0);\n      this.result[0].suggestions.indexOf('business').should.not.equal(-1);\n      this.result[1].index.should.equal(2);\n      return this.result[1].suggestions.indexOf('necessary').should.not.equal(-1);\n    });","file":"unit/js/ASpellTests.js","skipped":false,"dir":"services/spelling/test"},{"name":"should return an error","suites":["ASpell","without a valid language"],"updatePoint":{"line":70,"column":37,"index":2385},"line":70,"code":"    return it('should return an error', function () {\n      return expect(this.error).to.exist;\n    });","file":"unit/js/ASpellTests.js","skipped":false,"dir":"services/spelling/test"},{"name":"should return a blank array","suites":["ASpell","when there are no suggestions"],"updatePoint":{"line":82,"column":42,"index":2804},"line":82,"code":"    return it('should return a blank array', function () {\n      this.result.length.should.equal(1);\n      return assert.deepEqual(this.result[0].suggestions, []);\n    });","file":"unit/js/ASpellTests.js","skipped":false,"dir":"services/spelling/test"},{"name":"should return in reasonable time","suites":["ASpell","when the request times out"],"updatePoint":{"line":102,"column":47,"index":3562},"line":102,"code":"    return it('should return in reasonable time', function () {\n      const delta = Date.now() - this.start;\n      return delta.should.be.below(1000);\n    });","file":"unit/js/ASpellTests.js","skipped":false,"dir":"services/spelling/test"},{"name":"should call the callback","suites":["ASpellWorker","creating a worker","with normal aspell output"],"updatePoint":{"line":45,"column":34,"index":1302},"line":45,"code":"      it('should call the callback', function () {\n        expect(this.callback.called).to.equal(true);\n        expect(this.callback.calledWith(null, '& hello\\n& world\\nen\\n')).to.equal(true);\n      });","file":"unit/js/ASpellWorkerTests.js","skipped":false,"dir":"services/spelling/test"},{"name":"should call the callback","suites":["ASpellWorker","creating a worker","with the aspell end marker split across chunks"],"updatePoint":{"line":58,"column":34,"index":1895},"line":58,"code":"      it('should call the callback', function () {\n        expect(this.callback.called).to.equal(true);\n        expect(this.callback.calledWith(null, '& hello\\n& world\\nen\\n')).to.equal(true);\n      });","file":"unit/js/ASpellWorkerTests.js","skipped":false,"dir":"services/spelling/test"},{"name":"should call the callback","suites":["ASpellWorker","creating a worker","with the aspell end marker newline split across chunks"],"updatePoint":{"line":71,"column":34,"index":2496},"line":71,"code":"      it('should call the callback', function () {\n        expect(this.callback.called).to.equal(true);\n        expect(this.callback.calledWith(null, '& hello\\n& world\\nen')).to.equal(true);\n      });","file":"unit/js/ASpellWorkerTests.js","skipped":false,"dir":"services/spelling/test"},{"name":"should call the callback","suites":["ASpellWorker","creating a worker","with everything split across chunks"],"updatePoint":{"line":83,"column":34,"index":2996},"line":83,"code":"      it('should call the callback', function () {\n        expect(this.callback.called).to.equal(true);\n        expect(this.callback.calledWith(null, '& hello\\n& world\\nen')).to.equal(true);\n      });","file":"unit/js/ASpellWorkerTests.js","skipped":false,"dir":"services/spelling/test"},{"name":"should return the words that are spelled incorrectly and not learned","suites":["SpellingAPIManager","runRequest","with sensible JSON"],"updatePoint":{"line":49,"column":78,"index":1584},"line":49,"code":"      it('should return the words that are spelled incorrectly and not learned', function () {\n        expect(this.result.misspellings).to.deep.equal(this.misspellingsWithoutLearnedWords);\n      });","file":"unit/js/SpellingAPIManagerTests.js","skipped":false,"dir":"services/spelling/test"},{"name":"should return an error","suites":["SpellingAPIManager","runRequest","with a missing words array"],"updatePoint":{"line":61,"column":32,"index":2019},"line":61,"code":"      it('should return an error', function () {\n        expect(this.error).to.exist;\n        expect(this.error).to.be.instanceof(Error);\n        expect(this.error.message).to.equal('malformed JSON');\n      });","file":"unit/js/SpellingAPIManagerTests.js","skipped":false,"dir":"services/spelling/test"},{"name":"should use en as the default","suites":["SpellingAPIManager","runRequest","without a language"],"updatePoint":{"line":77,"column":38,"index":2561},"line":77,"code":"      it('should use en as the default', function () {\n        this.ASpell.promises.checkWords.calledWith('en').should.equal(true);\n      });","file":"unit/js/SpellingAPIManagerTests.js","skipped":false,"dir":"services/spelling/test"},{"name":"should use the language","suites":["SpellingAPIManager","runRequest","with a language"],"updatePoint":{"line":93,"column":33,"index":3085},"line":93,"code":"      it('should use the language', function () {\n        this.ASpell.promises.checkWords.calledWith(this.language).should.equal(true);\n      });","file":"unit/js/SpellingAPIManagerTests.js","skipped":false,"dir":"services/spelling/test"},{"name":"should insert the compressed op into mongo","suites":["Appending doc ops to the history","when the history does not exist yet"],"updatePoint":{"line":84,"column":50,"index":2360},"line":84,"code":"    it('should insert the compressed op into mongo', function () {\n      return expect(this.updates[0].pack[0].op).to.deep.equal([{\n        p: 3,\n        i: 'foo'\n      }]);\n    });","file":"acceptance/js/AppendingUpdatesTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should insert the correct version number into mongo","suites":["Appending doc ops to the history","when the history does not exist yet"],"updatePoint":{"line":90,"column":59,"index":2551},"line":90,"code":"    it('should insert the correct version number into mongo', function () {\n      return expect(this.updates[0].v).to.equal(5);\n    });","file":"acceptance/js/AppendingUpdatesTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should store the doc id","suites":["Appending doc ops to the history","when the history does not exist yet"],"updatePoint":{"line":93,"column":31,"index":2659},"line":93,"code":"    it('should store the doc id', function () {\n      return expect(this.updates[0].doc_id.toString()).to.equal(this.doc_id);\n    });","file":"acceptance/js/AppendingUpdatesTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should store the project id","suites":["Appending doc ops to the history","when the history does not exist yet"],"updatePoint":{"line":96,"column":35,"index":2797},"line":96,"code":"    it('should store the project id', function () {\n      return expect(this.updates[0].project_id.toString()).to.equal(this.project_id);\n    });","file":"acceptance/js/AppendingUpdatesTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should clear the doc from the DocsWithHistoryOps set","suites":["Appending doc ops to the history","when the history does not exist yet"],"updatePoint":{"line":99,"column":67,"index":2975},"line":99,"code":"    return it('should clear the doc from the DocsWithHistoryOps set', function (done) {\n      rclient.sismember(`DocsWithHistoryOps:${this.project_id}`, this.doc_id, (error, member) => {\n        if (error) return done(error);\n        member.should.equal(0);\n        return done();\n      });\n      return null;\n    });","file":"acceptance/js/AppendingUpdatesTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should combine all the updates into one pack","suites":["Appending doc ops to the history","when the history has already been started","when the updates are recent and from the same user"],"updatePoint":{"line":207,"column":54,"index":5693},"line":207,"code":"      it('should combine all the updates into one pack', function () {\n        return expect(this.updates[0].pack[1].op).to.deep.equal([{\n          p: 6,\n          i: 'bar'\n        }]);\n      });","file":"acceptance/js/AppendingUpdatesTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should insert the correct version number into mongo","suites":["Appending doc ops to the history","when the history has already been started","when the updates are recent and from the same user"],"updatePoint":{"line":213,"column":68,"index":5903},"line":213,"code":"      return it('should insert the correct version number into mongo', function () {\n        return expect(this.updates[0].v_end).to.equal(8);\n      });","file":"acceptance/js/AppendingUpdatesTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should combine the updates into one pack","suites":["Appending doc ops to the history","when the history has already been started","when the updates are far apart"],"updatePoint":{"line":264,"column":57,"index":7258},"line":264,"code":"      return it('should combine the updates into one pack', function () {\n        expect(this.updates[0].pack[0].op).to.deep.equal([{\n          p: 3,\n          i: 'foo'\n        }]);\n        return expect(this.updates[0].pack[1].op).to.deep.equal([{\n          p: 6,\n          i: 'bar'\n        }]);\n      });","file":"acceptance/js/AppendingUpdatesTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should concat the compressed op into mongo","suites":["Appending doc ops to the history","when the updates need processing in batches"],"updatePoint":{"line":319,"column":50,"index":8774},"line":319,"code":"    it('should concat the compressed op into mongo', function () {\n      return expect(this.updates[0].pack.length).to.deep.equal(3);\n    }); // batch size is 100","file":"acceptance/js/AppendingUpdatesTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should insert the correct version number into mongo","suites":["Appending doc ops to the history","when the updates need processing in batches"],"updatePoint":{"line":323,"column":66,"index":8954},"line":323,"code":"    return it('should insert the correct version number into mongo', function () {\n      return expect(this.updates[0].v_end).to.equal(250);\n    });","file":"acceptance/js/AppendingUpdatesTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should insert the compressed ops into mongo","suites":["Appending doc ops to the history","when there are multiple ops in each update"],"updatePoint":{"line":384,"column":51,"index":10451},"line":384,"code":"    it('should insert the compressed ops into mongo', function () {\n      expect(this.updates[0].pack[0].op).to.deep.equal([{\n        p: 3,\n        i: 'foo'\n      }]);\n      return expect(this.updates[0].pack[1].op).to.deep.equal([{\n        p: 6,\n        i: 'bar'\n      }]);\n    });","file":"acceptance/js/AppendingUpdatesTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should insert the correct version numbers into mongo","suites":["Appending doc ops to the history","when there are multiple ops in each update"],"updatePoint":{"line":394,"column":67,"index":10750},"line":394,"code":"    return it('should insert the correct version numbers into mongo', function () {\n      expect(this.updates[0].pack[0].v).to.equal(3);\n      return expect(this.updates[0].pack[1].v).to.equal(4);\n    });","file":"acceptance/js/AppendingUpdatesTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should insert the compressed no-op into mongo","suites":["Appending doc ops to the history","when there is a no-op update"],"updatePoint":{"line":441,"column":53,"index":12064},"line":441,"code":"    it('should insert the compressed no-op into mongo', function () {\n      return expect(this.updates[0].pack[0].op).to.deep.equal([]);\n    });","file":"acceptance/js/AppendingUpdatesTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should insert the compressed next update into mongo","suites":["Appending doc ops to the history","when there is a no-op update"],"updatePoint":{"line":444,"column":59,"index":12215},"line":444,"code":"    it('should insert the compressed next update into mongo', function () {\n      return expect(this.updates[0].pack[1].op).to.deep.equal([{\n        p: 3,\n        i: 'foo'\n      }]);\n    });","file":"acceptance/js/AppendingUpdatesTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should insert the correct version numbers into mongo","suites":["Appending doc ops to the history","when there is a no-op update"],"updatePoint":{"line":450,"column":67,"index":12414},"line":450,"code":"    return it('should insert the correct version numbers into mongo', function () {\n      expect(this.updates[0].pack[0].v).to.equal(3);\n      return expect(this.updates[0].pack[1].v).to.equal(4);\n    });","file":"acceptance/js/AppendingUpdatesTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should ignore the comment op","suites":["Appending doc ops to the history","when there is a comment update"],"updatePoint":{"line":492,"column":36,"index":13585},"line":492,"code":"    it('should ignore the comment op', function () {\n      return expect(this.updates[0].pack[0].op).to.deep.equal([{\n        d: 'bar',\n        p: 6\n      }]);\n    });","file":"acceptance/js/AppendingUpdatesTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should insert the correct version numbers into mongo","suites":["Appending doc ops to the history","when there is a comment update"],"updatePoint":{"line":498,"column":67,"index":13784},"line":498,"code":"    return it('should insert the correct version numbers into mongo', function () {\n      return expect(this.updates[0].pack[0].v).to.equal(3);\n    });","file":"acceptance/js/AppendingUpdatesTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should not add a expiresAt entry in the update in mongo","suites":["Appending doc ops to the history","when the project has versioning enabled"],"updatePoint":{"line":536,"column":70,"index":14894},"line":536,"code":"    return it('should not add a expiresAt entry in the update in mongo', function () {\n      return expect(this.updates[0].expiresAt).to.be.undefined;\n    });","file":"acceptance/js/AppendingUpdatesTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should add a expiresAt entry in the update in mongo","suites":["Appending doc ops to the history","when the project does not have versioning enabled"],"updatePoint":{"line":574,"column":66,"index":16022},"line":574,"code":"    return it('should add a expiresAt entry in the update in mongo', function () {\n      return expect(this.updates[0].expiresAt).to.exist;\n    });","file":"acceptance/js/AppendingUpdatesTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should include all the imported updates, with ids, sorted by timestamp","suites":["Archiving updates","exporting the project"],"updatePoint":{"line":130,"column":80,"index":4158},"line":130,"code":"      it('should include all the imported updates, with ids, sorted by timestamp', function () {\n        // Add a safe guard for an empty array matching an empty export.\n        expect(this.updates).to.have.length(1024 + 22);\n        const expectedExportedUpdates = this.updates.slice().reverse().map(update => {\n          // clone object, updates are created once in before handler\n          const exportedUpdate = Object.assign({}, update);\n          exportedUpdate.meta = Object.assign({}, update.meta);\n          exportedUpdate.doc_id = this.doc_id;\n          exportedUpdate.project_id = this.project_id;\n\n          // This is for merged updates, which does not apply here.\n          exportedUpdate.meta.start_ts = exportedUpdate.meta.end_ts = exportedUpdate.meta.ts;\n          delete exportedUpdate.meta.ts;\n          return exportedUpdate;\n        });\n        expect(this.exportedUpdates).to.deep.equal(expectedExportedUpdates);\n        expect(this.exportedUserIds).to.deep.equal([this.user_id, this.user_id_2]);\n      });","file":"acceptance/js/ArchivingUpdatesTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should have one cached pack","suites":["Archiving updates","archiving a doc's updates"],"updatePoint":{"line":163,"column":35,"index":5532},"line":163,"code":"    it('should have one cached pack', function (done) {\n      return db.docHistory.count({\n        doc_id: ObjectId(this.doc_id),\n        expiresAt: {\n          $exists: true\n        }\n      }, (error, count) => {\n        if (error != null) {\n          throw error;\n        }\n        count.should.equal(1);\n        return done();\n      });\n    });","file":"acceptance/js/ArchivingUpdatesTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should have one remaining pack after cache is expired","suites":["Archiving updates","archiving a doc's updates"],"updatePoint":{"line":177,"column":61,"index":5906},"line":177,"code":"    it('should have one remaining pack after cache is expired', function (done) {\n      return db.docHistory.deleteMany({\n        doc_id: ObjectId(this.doc_id),\n        expiresAt: {\n          $exists: true\n        }\n      }, (err, result) => {\n        if (err) return done(err);\n        return db.docHistory.count({\n          doc_id: ObjectId(this.doc_id)\n        }, (error, count) => {\n          if (error != null) {\n            throw error;\n          }\n          count.should.equal(1);\n          return done();\n        });\n      });\n    });","file":"acceptance/js/ArchivingUpdatesTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should have a docHistoryIndex entry marked as inS3","suites":["Archiving updates","archiving a doc's updates"],"updatePoint":{"line":196,"column":58,"index":6446},"line":196,"code":"    it('should have a docHistoryIndex entry marked as inS3', function (done) {\n      return db.docHistoryIndex.findOne({\n        _id: ObjectId(this.doc_id)\n      }, (error, index) => {\n        if (error != null) {\n          throw error;\n        }\n        index.packs[0].inS3.should.equal(true);\n        return done();\n      });\n    });","file":"acceptance/js/ArchivingUpdatesTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should have a docHistoryIndex entry with the last version","suites":["Archiving updates","archiving a doc's updates"],"updatePoint":{"line":207,"column":65,"index":6789},"line":207,"code":"    it('should have a docHistoryIndex entry with the last version', function (done) {\n      return db.docHistoryIndex.findOne({\n        _id: ObjectId(this.doc_id)\n      }, (error, index) => {\n        if (error != null) {\n          throw error;\n        }\n        index.packs[0].v_end.should.equal(1024);\n        return done();\n      });\n    });","file":"acceptance/js/ArchivingUpdatesTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should store 1024 doc changes in S3 in one pack","suites":["Archiving updates","archiving a doc's updates"],"updatePoint":{"line":218,"column":55,"index":7123},"line":218,"code":"    it('should store 1024 doc changes in S3 in one pack', function (done) {\n      return db.docHistoryIndex.findOne({\n        _id: ObjectId(this.doc_id)\n      }, (error, index) => {\n        if (error != null) {\n          throw error;\n        }\n        const packId = index.packs[0]._id;\n        return TrackChangesClient.getS3Doc(this.project_id, this.doc_id, packId, (error, doc) => {\n          if (error) return done(error);\n          doc.n.should.equal(1024);\n          doc.pack.length.should.equal(1024);\n          return done();\n        });\n      });\n    });","file":"acceptance/js/ArchivingUpdatesTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should restore both packs","suites":["Archiving updates","unarchiving a doc's updates"],"updatePoint":{"line":246,"column":40,"index":7998},"line":246,"code":"    return it('should restore both packs', function (done) {\n      return db.docHistory.count({\n        doc_id: ObjectId(this.doc_id)\n      }, (error, count) => {\n        if (error != null) {\n          throw error;\n        }\n        count.should.equal(2);\n        return done();\n      });\n    });","file":"acceptance/js/ArchivingUpdatesTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should export an empty array","suites":["ExportProject","when there are no updates"],"updatePoint":{"line":24,"column":36,"index":747},"line":24,"code":"    it('should export an empty array', function () {\n      expect(this.exportedUpdates).to.deep.equal([]);\n      expect(this.exportedUserIds).to.deep.equal([]);\n    });","file":"acceptance/js/ExportProjectTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should flush the op into mongo","suites":["Flushing updates","flushing a doc's updates"],"updatePoint":{"line":63,"column":45,"index":1924},"line":63,"code":"    return it('should flush the op into mongo', function (done) {\n      TrackChangesClient.getCompressedUpdates(this.doc_id, (error, updates) => {\n        if (error) return done(error);\n        expect(updates[0].pack[0].op).to.deep.equal([{\n          p: 3,\n          i: 'f'\n        }]);\n        return done();\n      });\n      return null;\n    });","file":"acceptance/js/FlushingUpdatesTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should not mark the updates for deletion","suites":["Flushing updates","flushing a project's updates","with versioning enabled"],"updatePoint":{"line":120,"column":50,"index":3523},"line":120,"code":"      it('should not mark the updates for deletion', function (done) {\n        TrackChangesClient.getCompressedUpdates(this.doc_id, (error, updates) => {\n          if (error) return done(error);\n          expect(updates[0].expiresAt).to.not.exist;\n          return done();\n        });\n        return null;\n      });","file":"acceptance/js/FlushingUpdatesTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should preserve history forever","suites":["Flushing updates","flushing a project's updates","with versioning enabled"],"updatePoint":{"line":128,"column":48,"index":3837},"line":128,"code":"      return it('should preserve history forever', function (done) {\n        TrackChangesClient.getProjectMetaData(this.project_id, (error, project) => {\n          if (error) return done(error);\n          expect(project.preserveHistory).to.equal(true);\n          return done();\n        });\n        return null;\n      });","file":"acceptance/js/FlushingUpdatesTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should mark the updates for deletion","suites":["Flushing updates","flushing a project's updates","without versioning enabled"],"updatePoint":{"line":181,"column":53,"index":5352},"line":181,"code":"      return it('should mark the updates for deletion', function (done) {\n        TrackChangesClient.getCompressedUpdates(this.doc_id, (error, updates) => {\n          if (error) return done(error);\n          expect(updates[0].expiresAt).to.exist;\n          return done();\n        });\n        return null;\n      });","file":"acceptance/js/FlushingUpdatesTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should not mark the updates for deletion","suites":["Flushing updates","flushing a project's updates","without versioning enabled but with preserveHistory set to true"],"updatePoint":{"line":239,"column":57,"index":7137},"line":239,"code":"      return it('should not mark the updates for deletion', function (done) {\n        TrackChangesClient.getCompressedUpdates(this.doc_id, (error, updates) => {\n          if (error) return done(error);\n          expect(updates[0].expiresAt).to.not.exist;\n          return done();\n        });\n        return null;\n      });","file":"acceptance/js/FlushingUpdatesTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should return the diff","suites":["Getting a diff"],"updatePoint":{"line":123,"column":28,"index":3218},"line":123,"code":"  it('should return the diff', function () {\n    return expect(this.diff).to.deep.equal(this.expected_diff);\n  });","file":"acceptance/js/GettingADiffTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should get the doc from the doc updater","suites":["Getting a diff"],"updatePoint":{"line":126,"column":52,"index":3357},"line":126,"code":"  return it('should get the doc from the doc updater', function () {\n    MockDocUpdaterApi.getDoc.calledWith(this.project_id, this.doc_id).should.equal(true);\n    return null;\n  });","file":"acceptance/js/GettingADiffTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should fetch the user details from the web api","suites":["Getting updates","getting updates up to the limit"],"updatePoint":{"line":102,"column":54,"index":2839},"line":102,"code":"    it('should fetch the user details from the web api', function () {\n      return MockWebApi.getUserInfo.calledWith(this.user_id).should.equal(true);\n    });","file":"acceptance/js/GettingUpdatesTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should return at least the min_count number of summarized updates","suites":["Getting updates","getting updates up to the limit"],"updatePoint":{"line":105,"column":80,"index":3025},"line":105,"code":"    return it('should return at least the min_count number of summarized updates', function () {\n      const docs1 = {};\n      docs1[this.doc_id] = {\n        toV: 20,\n        fromV: 19\n      };\n      const docs2 = {};\n      docs2[this.doc_id] = {\n        toV: 18,\n        fromV: 17\n      };\n      const docs3 = {};\n      docs3[this.doc_id] = {\n        toV: 16,\n        fromV: 15\n      };\n      return expect(this.updates.slice(0, 3)).to.deep.equal([{\n        docs: docs1,\n        meta: {\n          start_ts: this.to - 2 * this.minutes,\n          end_ts: this.to,\n          users: [this.user]\n        }\n      }, {\n        docs: docs2,\n        meta: {\n          start_ts: this.to - 1 * this.hours - 2 * this.minutes,\n          end_ts: this.to - 1 * this.hours,\n          users: [this.user]\n        }\n      }, {\n        docs: docs3,\n        meta: {\n          start_ts: this.to - 2 * this.hours - 2 * this.minutes,\n          end_ts: this.to - 2 * this.hours,\n          users: [this.user]\n        }\n      }]);\n    });","file":"acceptance/js/GettingUpdatesTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should return as many updates as it can","suites":["Getting updates","getting updates beyond the end of the database"],"updatePoint":{"line":159,"column":54,"index":4439},"line":159,"code":"    return it('should return as many updates as it can', function () {\n      const docs1 = {};\n      docs1[this.doc_id] = {\n        toV: 4,\n        fromV: 3\n      };\n      const docs2 = {};\n      docs2[this.doc_id] = {\n        toV: 2,\n        fromV: 1\n      };\n      return expect(this.updates).to.deep.equal([{\n        docs: docs1,\n        meta: {\n          start_ts: this.to - 8 * this.hours - 2 * this.minutes,\n          end_ts: this.to - 8 * this.hours,\n          users: [this.user]\n        }\n      }, {\n        docs: docs2,\n        meta: {\n          start_ts: this.to - 9 * this.hours - 2 * this.minutes,\n          end_ts: this.to - 9 * this.hours,\n          users: [this.user, null]\n        }\n      }]);\n    });","file":"acceptance/js/GettingUpdatesTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"the new lock should not be removed by the expired locker","suites":["Locking document","when the lock has expired in redis"],"updatePoint":{"line":47,"column":71,"index":1705},"line":47,"code":"    return it('the new lock should not be removed by the expired locker', function (done) {\n      LockManager.checkLock('doc123', (err, isFree) => {\n        if (err) return done(err);\n        expect(isFree).to.equal(false);\n        return done();\n      });\n      return null;\n    });","file":"acceptance/js/LockManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should set the doc in the doc updater","suites":["Restoring a version"],"updatePoint":{"line":110,"column":50,"index":2862},"line":110,"code":"  return it('should set the doc in the doc updater', function () {\n    MockDocUpdaterApi.setDoc.calledWith(this.project_id, this.doc_id, this.restored_lines, this.user_id, true).should.equal(true);\n    return null;\n  });","file":"acceptance/js/RestoringVersions.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should undo the insert","suites":["DiffGenerator","rewindOp","rewinding an insert"],"updatePoint":{"line":33,"column":39,"index":1059},"line":33,"code":"      return it('should undo the insert', function () {\n        const content = 'hello world';\n        const rewoundContent = this.DiffGenerator.rewindOp(content, {\n          p: 6,\n          i: 'wo'\n        });\n        return rewoundContent.should.equal('hello rld');\n      });","file":"unit/js/DiffGenerator/DiffGeneratorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should undo the delete","suites":["DiffGenerator","rewindOp","rewinding a delete"],"updatePoint":{"line":43,"column":39,"index":1394},"line":43,"code":"      return it('should undo the delete', function () {\n        const content = 'hello rld';\n        const rewoundContent = this.DiffGenerator.rewindOp(content, {\n          p: 6,\n          d: 'wo'\n        });\n        return rewoundContent.should.equal('hello world');\n      });","file":"unit/js/DiffGenerator/DiffGeneratorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should throw an error","suites":["DiffGenerator","rewindOp","with an inconsistent update"],"updatePoint":{"line":53,"column":38,"index":1737},"line":53,"code":"      return it('should throw an error', function () {\n        const content = 'hello world';\n        return expect(() => {\n          return this.DiffGenerator.rewindOp(content, {\n            p: 6,\n            i: 'foo'\n          });\n        }).to.throw(this.DiffGenerator.ConsistencyError);\n      });","file":"unit/js/DiffGenerator/DiffGeneratorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should undo the insert as if it were at the end of the content","suites":["DiffGenerator","rewindOp","with an update which is beyond the length of the content"],"updatePoint":{"line":64,"column":79,"index":2181},"line":64,"code":"      return it('should undo the insert as if it were at the end of the content', function () {\n        const content = 'foobar';\n        const rewoundContent = this.DiffGenerator.rewindOp(content, {\n          p: 4,\n          i: 'bar'\n        });\n        return rewoundContent.should.equal('foo');\n      });","file":"unit/js/DiffGenerator/DiffGeneratorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should rewind ops in reverse","suites":["DiffGenerator","rewindUpdate"],"updatePoint":{"line":75,"column":43,"index":2508},"line":75,"code":"    return it('should rewind ops in reverse', function () {\n      const content = 'aaabbbccc';\n      const update = {\n        op: [{\n          p: 3,\n          i: 'bbb'\n        }, {\n          p: 6,\n          i: 'ccc'\n        }]\n      };\n      const rewoundContent = this.DiffGenerator.rewindUpdate(content, update);\n      return rewoundContent.should.equal('aaa');\n    });","file":"unit/js/DiffGenerator/DiffGeneratorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should rewind updates in reverse","suites":["DiffGenerator","rewindUpdates"],"updatePoint":{"line":91,"column":47,"index":2932},"line":91,"code":"    return it('should rewind updates in reverse', function () {\n      const content = 'aaabbbccc';\n      const updates = [{\n        op: [{\n          p: 3,\n          i: 'bbb'\n        }]\n      }, {\n        op: [{\n          p: 6,\n          i: 'ccc'\n        }]\n      }];\n      const rewoundContent = this.DiffGenerator.rewindUpdates(content, updates);\n      return rewoundContent.should.equal('aaa');\n    });","file":"unit/js/DiffGenerator/DiffGeneratorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should return the diff","suites":["DiffGenerator","buildDiff"],"updatePoint":{"line":125,"column":30,"index":3864},"line":125,"code":"    it('should return the diff', function () {\n      return this.result.should.deep.equal(this.diff);\n    });","file":"unit/js/DiffGenerator/DiffGeneratorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should build the content into an initial diff","suites":["DiffGenerator","buildDiff"],"updatePoint":{"line":128,"column":53,"index":3997},"line":128,"code":"    it('should build the content into an initial diff', function () {\n      return this.DiffGenerator.applyUpdateToDiff.calledWith([{\n        u: this.content\n      }], this.updates[0]).should.equal(true);\n    });","file":"unit/js/DiffGenerator/DiffGeneratorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should apply each update","suites":["DiffGenerator","buildDiff"],"updatePoint":{"line":133,"column":32,"index":4189},"line":133,"code":"    it('should apply each update', function () {\n      return Array.from(this.updates).map(update => this.DiffGenerator.applyUpdateToDiff.calledWith(sinon.match.any, update).should.equal(true));\n    });","file":"unit/js/DiffGenerator/DiffGeneratorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should compress the diff","suites":["DiffGenerator","buildDiff"],"updatePoint":{"line":136,"column":39,"index":4399},"line":136,"code":"    return it('should compress the diff', function () {\n      return this.DiffGenerator.compressDiff.calledWith(this.diff).should.equal(true);\n    });","file":"unit/js/DiffGenerator/DiffGeneratorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should create one update with combined meta data and min/max timestamps","suites":["DiffGenerator","compressDiff","with adjacent inserts with the same user_id"],"updatePoint":{"line":142,"column":88,"index":4720},"line":142,"code":"      return it('should create one update with combined meta data and min/max timestamps', function () {\n        const diff = this.DiffGenerator.compressDiff([{\n          i: 'foo',\n          meta: {\n            start_ts: 10,\n            end_ts: 20,\n            user: {\n              id: this.user_id\n            }\n          }\n        }, {\n          i: 'bar',\n          meta: {\n            start_ts: 5,\n            end_ts: 15,\n            user: {\n              id: this.user_id\n            }\n          }\n        }]);\n        return expect(diff).to.deep.equal([{\n          i: 'foobar',\n          meta: {\n            start_ts: 5,\n            end_ts: 20,\n            user: {\n              id: this.user_id\n            }\n          }\n        }]);\n      });","file":"unit/js/DiffGenerator/DiffGeneratorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should leave the inserts unchanged","suites":["DiffGenerator","compressDiff","with adjacent inserts with different user_ids"],"updatePoint":{"line":175,"column":51,"index":5518},"line":175,"code":"      return it('should leave the inserts unchanged', function () {\n        const input = [{\n          i: 'foo',\n          meta: {\n            start_ts: 10,\n            end_ts: 20,\n            user: {\n              id: this.user_id\n            }\n          }\n        }, {\n          i: 'bar',\n          meta: {\n            start_ts: 5,\n            end_ts: 15,\n            user: {\n              id: this.user_id_2\n            }\n          }\n        }];\n        const output = this.DiffGenerator.compressDiff(input);\n        return expect(output).to.deep.equal(input);\n      });","file":"unit/js/DiffGenerator/DiffGeneratorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should create one update with combined meta data and min/max timestamps","suites":["DiffGenerator","compressDiff","with adjacent deletes with the same user_id"],"updatePoint":{"line":200,"column":88,"index":6211},"line":200,"code":"      return it('should create one update with combined meta data and min/max timestamps', function () {\n        const diff = this.DiffGenerator.compressDiff([{\n          d: 'foo',\n          meta: {\n            start_ts: 10,\n            end_ts: 20,\n            user: {\n              id: this.user_id\n            }\n          }\n        }, {\n          d: 'bar',\n          meta: {\n            start_ts: 5,\n            end_ts: 15,\n            user: {\n              id: this.user_id\n            }\n          }\n        }]);\n        return expect(diff).to.deep.equal([{\n          d: 'foobar',\n          meta: {\n            start_ts: 5,\n            end_ts: 20,\n            user: {\n              id: this.user_id\n            }\n          }\n        }]);\n      });","file":"unit/js/DiffGenerator/DiffGeneratorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should leave the deletes unchanged","suites":["DiffGenerator","compressDiff","with adjacent deletes with different user_ids"],"updatePoint":{"line":233,"column":51,"index":7016},"line":233,"code":"      return it('should leave the deletes unchanged', function () {\n        const input = [{\n          d: 'foo',\n          meta: {\n            start_ts: 10,\n            end_ts: 20,\n            user: {\n              id: this.user_id\n            }\n          }\n        }, {\n          d: 'bar',\n          meta: {\n            start_ts: 5,\n            end_ts: 15,\n            user: {\n              id: this.user_id_2\n            }\n          }\n        }];\n        const output = this.DiffGenerator.compressDiff(input);\n        return expect(output).to.deep.equal(input);\n      });","file":"unit/js/DiffGenerator/DiffGeneratorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should insert into the middle of (u)nchanged text","suites":["DiffGenerator","applyUpdateToDiff","an insert"],"updatePoint":{"line":260,"column":59,"index":7705},"line":260,"code":"      it('should insert into the middle of (u)nchanged text', function () {\n        const diff = this.DiffGenerator.applyUpdateToDiff([{\n          u: 'foobar'\n        }], {\n          op: [{\n            p: 3,\n            i: 'baz'\n          }],\n          meta: this.meta\n        });\n        return expect(diff).to.deep.equal([{\n          u: 'foo'\n        }, {\n          i: 'baz',\n          meta: this.meta\n        }, {\n          u: 'bar'\n        }]);\n      });","file":"unit/js/DiffGenerator/DiffGeneratorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should insert into the start of (u)changed text","suites":["DiffGenerator","applyUpdateToDiff","an insert"],"updatePoint":{"line":279,"column":57,"index":8162},"line":279,"code":"      it('should insert into the start of (u)changed text', function () {\n        const diff = this.DiffGenerator.applyUpdateToDiff([{\n          u: 'foobar'\n        }], {\n          op: [{\n            p: 0,\n            i: 'baz'\n          }],\n          meta: this.meta\n        });\n        return expect(diff).to.deep.equal([{\n          i: 'baz',\n          meta: this.meta\n        }, {\n          u: 'foobar'\n        }]);\n      });","file":"unit/js/DiffGenerator/DiffGeneratorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should insert into the end of (u)changed text","suites":["DiffGenerator","applyUpdateToDiff","an insert"],"updatePoint":{"line":296,"column":55,"index":8588},"line":296,"code":"      it('should insert into the end of (u)changed text', function () {\n        const diff = this.DiffGenerator.applyUpdateToDiff([{\n          u: 'foobar'\n        }], {\n          op: [{\n            p: 6,\n            i: 'baz'\n          }],\n          meta: this.meta\n        });\n        return expect(diff).to.deep.equal([{\n          u: 'foobar'\n        }, {\n          i: 'baz',\n          meta: this.meta\n        }]);\n      });","file":"unit/js/DiffGenerator/DiffGeneratorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should insert into the middle of (i)inserted text","suites":["DiffGenerator","applyUpdateToDiff","an insert"],"updatePoint":{"line":313,"column":59,"index":9018},"line":313,"code":"      it('should insert into the middle of (i)inserted text', function () {\n        const diff = this.DiffGenerator.applyUpdateToDiff([{\n          i: 'foobar',\n          meta: this.meta\n        }], {\n          op: [{\n            p: 3,\n            i: 'baz'\n          }],\n          meta: this.meta\n        });\n        return expect(diff).to.deep.equal([{\n          i: 'foo',\n          meta: this.meta\n        }, {\n          i: 'baz',\n          meta: this.meta\n        }, {\n          i: 'bar',\n          meta: this.meta\n        }]);\n      });","file":"unit/js/DiffGenerator/DiffGeneratorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should not count deletes in the running length total","suites":["DiffGenerator","applyUpdateToDiff","an insert"],"updatePoint":{"line":335,"column":69,"index":9568},"line":335,"code":"      return it('should not count deletes in the running length total', function () {\n        const diff = this.DiffGenerator.applyUpdateToDiff([{\n          d: 'deleted',\n          meta: this.meta\n        }, {\n          u: 'foobar'\n        }], {\n          op: [{\n            p: 3,\n            i: 'baz'\n          }],\n          meta: this.meta\n        });\n        return expect(diff).to.deep.equal([{\n          d: 'deleted',\n          meta: this.meta\n        }, {\n          u: 'foo'\n        }, {\n          i: 'baz',\n          meta: this.meta\n        }, {\n          u: 'bar'\n        }]);\n      });","file":"unit/js/DiffGenerator/DiffGeneratorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should delete from the middle of (u)nchanged text","suites":["DiffGenerator","applyUpdateToDiff","a delete","deleting unchanged text"],"updatePoint":{"line":363,"column":61,"index":10265},"line":363,"code":"        it('should delete from the middle of (u)nchanged text', function () {\n          const diff = this.DiffGenerator.applyUpdateToDiff([{\n            u: 'foobazbar'\n          }], {\n            op: [{\n              p: 3,\n              d: 'baz'\n            }],\n            meta: this.meta\n          });\n          return expect(diff).to.deep.equal([{\n            u: 'foo'\n          }, {\n            d: 'baz',\n            meta: this.meta\n          }, {\n            u: 'bar'\n          }]);\n        });","file":"unit/js/DiffGenerator/DiffGeneratorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should delete from the start of (u)nchanged text","suites":["DiffGenerator","applyUpdateToDiff","a delete","deleting unchanged text"],"updatePoint":{"line":382,"column":60,"index":10764},"line":382,"code":"        it('should delete from the start of (u)nchanged text', function () {\n          const diff = this.DiffGenerator.applyUpdateToDiff([{\n            u: 'foobazbar'\n          }], {\n            op: [{\n              p: 0,\n              d: 'foo'\n            }],\n            meta: this.meta\n          });\n          return expect(diff).to.deep.equal([{\n            d: 'foo',\n            meta: this.meta\n          }, {\n            u: 'bazbar'\n          }]);\n        });","file":"unit/js/DiffGenerator/DiffGeneratorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should delete from the end of (u)nchanged text","suites":["DiffGenerator","applyUpdateToDiff","a delete","deleting unchanged text"],"updatePoint":{"line":399,"column":58,"index":11228},"line":399,"code":"        it('should delete from the end of (u)nchanged text', function () {\n          const diff = this.DiffGenerator.applyUpdateToDiff([{\n            u: 'foobazbar'\n          }], {\n            op: [{\n              p: 6,\n              d: 'bar'\n            }],\n            meta: this.meta\n          });\n          return expect(diff).to.deep.equal([{\n            u: 'foobaz'\n          }, {\n            d: 'bar',\n            meta: this.meta\n          }]);\n        });","file":"unit/js/DiffGenerator/DiffGeneratorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should delete across multiple (u)changed text parts","suites":["DiffGenerator","applyUpdateToDiff","a delete","deleting unchanged text"],"updatePoint":{"line":416,"column":70,"index":11704},"line":416,"code":"        return it('should delete across multiple (u)changed text parts', function () {\n          const diff = this.DiffGenerator.applyUpdateToDiff([{\n            u: 'foo'\n          }, {\n            u: 'baz'\n          }, {\n            u: 'bar'\n          }], {\n            op: [{\n              p: 2,\n              d: 'obazb'\n            }],\n            meta: this.meta\n          });\n          return expect(diff).to.deep.equal([{\n            u: 'fo'\n          }, {\n            d: 'o',\n            meta: this.meta\n          }, {\n            d: 'baz',\n            meta: this.meta\n          }, {\n            d: 'b',\n            meta: this.meta\n          }, {\n            u: 'ar'\n          }]);\n        });","file":"unit/js/DiffGenerator/DiffGeneratorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should delete from the middle of (i)nserted text","suites":["DiffGenerator","applyUpdateToDiff","a delete","deleting inserts"],"updatePoint":{"line":447,"column":60,"index":12454},"line":447,"code":"        it('should delete from the middle of (i)nserted text', function () {\n          const diff = this.DiffGenerator.applyUpdateToDiff([{\n            i: 'foobazbar',\n            meta: this.meta\n          }], {\n            op: [{\n              p: 3,\n              d: 'baz'\n            }],\n            meta: this.meta\n          });\n          return expect(diff).to.deep.equal([{\n            i: 'foo',\n            meta: this.meta\n          }, {\n            i: 'bar',\n            meta: this.meta\n          }]);\n        });","file":"unit/js/DiffGenerator/DiffGeneratorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should delete from the start of (u)nchanged text","suites":["DiffGenerator","applyUpdateToDiff","a delete","deleting inserts"],"updatePoint":{"line":466,"column":60,"index":12975},"line":466,"code":"        it('should delete from the start of (u)nchanged text', function () {\n          const diff = this.DiffGenerator.applyUpdateToDiff([{\n            i: 'foobazbar',\n            meta: this.meta\n          }], {\n            op: [{\n              p: 0,\n              d: 'foo'\n            }],\n            meta: this.meta\n          });\n          return expect(diff).to.deep.equal([{\n            i: 'bazbar',\n            meta: this.meta\n          }]);\n        });","file":"unit/js/DiffGenerator/DiffGeneratorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should delete from the end of (u)nchanged text","suites":["DiffGenerator","applyUpdateToDiff","a delete","deleting inserts"],"updatePoint":{"line":482,"column":58,"index":13432},"line":482,"code":"        it('should delete from the end of (u)nchanged text', function () {\n          const diff = this.DiffGenerator.applyUpdateToDiff([{\n            i: 'foobazbar',\n            meta: this.meta\n          }], {\n            op: [{\n              p: 6,\n              d: 'bar'\n            }],\n            meta: this.meta\n          });\n          return expect(diff).to.deep.equal([{\n            i: 'foobaz',\n            meta: this.meta\n          }]);\n        });","file":"unit/js/DiffGenerator/DiffGeneratorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should delete across multiple (u)changed and (i)nserted text parts","suites":["DiffGenerator","applyUpdateToDiff","a delete","deleting inserts"],"updatePoint":{"line":498,"column":85,"index":13916},"line":498,"code":"        return it('should delete across multiple (u)changed and (i)nserted text parts', function () {\n          const diff = this.DiffGenerator.applyUpdateToDiff([{\n            u: 'foo'\n          }, {\n            i: 'baz',\n            meta: this.meta\n          }, {\n            u: 'bar'\n          }], {\n            op: [{\n              p: 2,\n              d: 'obazb'\n            }],\n            meta: this.meta\n          });\n          return expect(diff).to.deep.equal([{\n            u: 'fo'\n          }, {\n            d: 'o',\n            meta: this.meta\n          }, {\n            d: 'b',\n            meta: this.meta\n          }, {\n            u: 'ar'\n          }]);\n        });","file":"unit/js/DiffGenerator/DiffGeneratorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should delete across multiple (u)changed and (d)deleted text parts","suites":["DiffGenerator","applyUpdateToDiff","a delete","deleting over existing deletes"],"updatePoint":{"line":527,"column":85,"index":14669},"line":527,"code":"        return it('should delete across multiple (u)changed and (d)deleted text parts', function () {\n          const diff = this.DiffGenerator.applyUpdateToDiff([{\n            u: 'foo'\n          }, {\n            d: 'baz',\n            meta: this.meta\n          }, {\n            u: 'bar'\n          }], {\n            op: [{\n              p: 2,\n              d: 'ob'\n            }],\n            meta: this.meta\n          });\n          return expect(diff).to.deep.equal([{\n            u: 'fo'\n          }, {\n            d: 'o',\n            meta: this.meta\n          }, {\n            d: 'baz',\n            meta: this.meta\n          }, {\n            d: 'b',\n            meta: this.meta\n          }, {\n            u: 'ar'\n          }]);\n        });","file":"unit/js/DiffGenerator/DiffGeneratorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should throw an error when deleting from the middle of (u)nchanged text","suites":["DiffGenerator","applyUpdateToDiff","a delete","deleting when the text doesn't match"],"updatePoint":{"line":559,"column":83,"index":15488},"line":559,"code":"        it('should throw an error when deleting from the middle of (u)nchanged text', function () {\n          return expect(() => this.DiffGenerator.applyUpdateToDiff([{\n            u: 'foobazbar'\n          }], {\n            op: [{\n              p: 3,\n              d: 'xxx'\n            }],\n            meta: this.meta\n          })).to.throw(this.DiffGenerator.ConsistencyError);\n        });","file":"unit/js/DiffGenerator/DiffGeneratorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should throw an error when deleting from the start of (u)nchanged text","suites":["DiffGenerator","applyUpdateToDiff","a delete","deleting when the text doesn't match"],"updatePoint":{"line":570,"column":82,"index":15879},"line":570,"code":"        it('should throw an error when deleting from the start of (u)nchanged text', function () {\n          return expect(() => this.DiffGenerator.applyUpdateToDiff([{\n            u: 'foobazbar'\n          }], {\n            op: [{\n              p: 0,\n              d: 'xxx'\n            }],\n            meta: this.meta\n          })).to.throw(this.DiffGenerator.ConsistencyError);\n        });","file":"unit/js/DiffGenerator/DiffGeneratorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should throw an error when deleting from the end of (u)nchanged text","suites":["DiffGenerator","applyUpdateToDiff","a delete","deleting when the text doesn't match"],"updatePoint":{"line":581,"column":87,"index":16275},"line":581,"code":"        return it('should throw an error when deleting from the end of (u)nchanged text', function () {\n          return expect(() => this.DiffGenerator.applyUpdateToDiff([{\n            u: 'foobazbar'\n          }], {\n            op: [{\n              p: 6,\n              d: 'xxx'\n            }],\n            meta: this.meta\n          })).to.throw(this.DiffGenerator.ConsistencyError);\n        });","file":"unit/js/DiffGenerator/DiffGeneratorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should insert the new update before the delete","suites":["DiffGenerator","applyUpdateToDiff","a delete","when the last update in the existing diff is a delete"],"updatePoint":{"line":594,"column":65,"index":16745},"line":594,"code":"        return it('should insert the new update before the delete', function () {\n          const diff = this.DiffGenerator.applyUpdateToDiff([{\n            u: 'foo'\n          }, {\n            d: 'bar',\n            meta: this.meta\n          }], {\n            op: [{\n              p: 3,\n              i: 'baz'\n            }],\n            meta: this.meta\n          });\n          return expect(diff).to.deep.equal([{\n            u: 'foo'\n          }, {\n            i: 'baz',\n            meta: this.meta\n          }, {\n            d: 'bar',\n            meta: this.meta\n          }]);\n        });","file":"unit/js/DiffGenerator/DiffGeneratorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should insert the new update after the delete","suites":["DiffGenerator","applyUpdateToDiff","a delete","when the only update in the existing diff is a delete"],"updatePoint":{"line":619,"column":64,"index":17439},"line":619,"code":"        return it('should insert the new update after the delete', function () {\n          const diff = this.DiffGenerator.applyUpdateToDiff([{\n            d: 'bar',\n            meta: this.meta\n          }], {\n            op: [{\n              p: 0,\n              i: 'baz'\n            }],\n            meta: this.meta\n          });\n          return expect(diff).to.deep.equal([{\n            d: 'bar',\n            meta: this.meta\n          }, {\n            i: 'baz',\n            meta: this.meta\n          }]);\n        });","file":"unit/js/DiffGenerator/DiffGeneratorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should get the latest version of the doc","suites":["DiffManager","getLatestDocAndUpdates","with a fromVersion"],"updatePoint":{"line":45,"column":50,"index":1746},"line":45,"code":"      it('should get the latest version of the doc', function () {\n        return this.DocumentUpdaterManager.getDocument.calledWith(this.project_id, this.doc_id).should.equal(true);\n      });","file":"unit/js/DiffManager/DiffManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should get the latest updates","suites":["DiffManager","getLatestDocAndUpdates","with a fromVersion"],"updatePoint":{"line":48,"column":39,"index":1928},"line":48,"code":"      it('should get the latest updates', function () {\n        return this.UpdatesManager.getDocUpdatesWithUserInfo.calledWith(this.project_id, this.doc_id, {\n          from: this.from\n        }).should.equal(true);\n      });","file":"unit/js/DiffManager/DiffManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback with the content, version and updates","suites":["DiffManager","getLatestDocAndUpdates","with a fromVersion"],"updatePoint":{"line":53,"column":79,"index":2195},"line":53,"code":"      return it('should call the callback with the content, version and updates', function () {\n        return this.callback.calledWith(null, this.content, this.version, this.updates).should.equal(true);\n      });","file":"unit/js/DiffManager/DiffManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should get the latest version of the doc","suites":["DiffManager","getLatestDocAndUpdates","with no fromVersion"],"updatePoint":{"line":61,"column":50,"index":2593},"line":61,"code":"      it('should get the latest version of the doc', function () {\n        return this.DocumentUpdaterManager.getDocument.calledWith(this.project_id, this.doc_id).should.equal(true);\n      });","file":"unit/js/DiffManager/DiffManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should not get the latest updates","suites":["DiffManager","getLatestDocAndUpdates","with no fromVersion"],"updatePoint":{"line":64,"column":43,"index":2779},"line":64,"code":"      it('should not get the latest updates', function () {\n        return this.UpdatesManager.getDocUpdatesWithUserInfo.called.should.equal(false);\n      });","file":"unit/js/DiffManager/DiffManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback with the content, version and blank updates","suites":["DiffManager","getLatestDocAndUpdates","with no fromVersion"],"updatePoint":{"line":67,"column":85,"index":2980},"line":67,"code":"      return it('should call the callback with the content, version and blank updates', function () {\n        return this.callback.calledWith(null, this.content, this.version, []).should.equal(true);\n      });","file":"unit/js/DiffManager/DiffManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should get the latest doc and version with all recent updates","suites":["DiffManager","getDiff","with matching versions"],"updatePoint":{"line":117,"column":71,"index":4586},"line":117,"code":"      it('should get the latest doc and version with all recent updates', function () {\n        return this.DiffManager.getDocumentBeforeVersion.calledWith(this.project_id, this.doc_id, this.fromVersion).should.equal(true);\n      });","file":"unit/js/DiffManager/DiffManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should generate the diff","suites":["DiffManager","getDiff","with matching versions"],"updatePoint":{"line":120,"column":34,"index":4783},"line":120,"code":"      it('should generate the diff', function () {\n        return this.DiffGenerator.buildDiff.calledWith(this.rewound_content, this.diffed_updates.slice().reverse()).should.equal(true);\n      });","file":"unit/js/DiffManager/DiffManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback with the diff","suites":["DiffManager","getDiff","with matching versions"],"updatePoint":{"line":123,"column":55,"index":5001},"line":123,"code":"      return it('should call the callback with the diff', function () {\n        return this.callback.calledWith(null, this.diff).should.equal(true);\n      });","file":"unit/js/DiffManager/DiffManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback with an error","suites":["DiffManager","getDiff","when the updates are inconsistent"],"updatePoint":{"line":134,"column":48,"index":5665},"line":134,"code":"      it('should call the callback with an error', function () {\n        this.callback.calledWith(sinon.match(Error)).should.equal(true);\n        const errorObj = this.callback.args[0][0];\n        expect(errorObj.message).to.include('inconsistent!');\n      });","file":"unit/js/DiffManager/DiffManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call _tryGetDocumentBeforeVersion","suites":["DiffManager","getDocumentBeforeVersion","succesfully"],"updatePoint":{"line":152,"column":50,"index":6505},"line":152,"code":"      it('should call _tryGetDocumentBeforeVersion', function () {\n        return this.DiffManager._tryGetDocumentBeforeVersion.calledWith(this.project_id, this.doc_id, this.version).should.equal(true);\n      });","file":"unit/js/DiffManager/DiffManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback with the response","suites":["DiffManager","getDocumentBeforeVersion","succesfully"],"updatePoint":{"line":155,"column":59,"index":6727},"line":155,"code":"      return it('should call the callback with the response', function () {\n        return this.callback.calledWith(null, this.document, this.rewound_updates).should.equal(true);\n      });","file":"unit/js/DiffManager/DiffManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call _tryGetDocumentBeforeVersion twice","suites":["DiffManager","getDocumentBeforeVersion","with a retry needed"],"updatePoint":{"line":175,"column":56,"index":7601},"line":175,"code":"      it('should call _tryGetDocumentBeforeVersion twice', function () {\n        return this.DiffManager._tryGetDocumentBeforeVersion.calledTwice.should.equal(true);\n      });","file":"unit/js/DiffManager/DiffManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback with the response","suites":["DiffManager","getDocumentBeforeVersion","with a retry needed"],"updatePoint":{"line":178,"column":59,"index":7780},"line":178,"code":"      return it('should call the callback with the response', function () {\n        return this.callback.calledWith(null, this.document, this.rewound_updates).should.equal(true);\n      });","file":"unit/js/DiffManager/DiffManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call _tryGetDocumentBeforeVersion once","suites":["DiffManager","getDocumentBeforeVersion","with a non-retriable error"],"updatePoint":{"line":188,"column":55,"index":8302},"line":188,"code":"      it('should call _tryGetDocumentBeforeVersion once', function () {\n        return this.DiffManager._tryGetDocumentBeforeVersion.calledOnce.should.equal(true);\n      });","file":"unit/js/DiffManager/DiffManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback with the error","suites":["DiffManager","getDocumentBeforeVersion","with a non-retriable error"],"updatePoint":{"line":191,"column":56,"index":8477},"line":191,"code":"      return it('should call the callback with the error', function () {\n        return this.callback.calledWith(this.error).should.equal(true);\n      });","file":"unit/js/DiffManager/DiffManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call _tryGetDocumentBeforeVersion three times (max retries)","suites":["DiffManager","getDocumentBeforeVersion","when retry limit is matched"],"updatePoint":{"line":202,"column":76,"index":9030},"line":202,"code":"      it('should call _tryGetDocumentBeforeVersion three times (max retries)', function () {\n        return this.DiffManager._tryGetDocumentBeforeVersion.calledThrice.should.equal(true);\n      });","file":"unit/js/DiffManager/DiffManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback with the error","suites":["DiffManager","getDocumentBeforeVersion","when retry limit is matched"],"updatePoint":{"line":205,"column":56,"index":9207},"line":205,"code":"      return it('should call the callback with the error', function () {\n        return this.callback.calledWith(this.error).should.equal(true);\n      });","file":"unit/js/DiffManager/DiffManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should get the latest doc and version with all recent updates","suites":["DiffManager","_tryGetDocumentBeforeVersion","with matching versions"],"updatePoint":{"line":258,"column":71,"index":11024},"line":258,"code":"      it('should get the latest doc and version with all recent updates', function () {\n        return this.DiffManager.getLatestDocAndUpdates.calledWith(this.project_id, this.doc_id, this.fromVersion).should.equal(true);\n      });","file":"unit/js/DiffManager/DiffManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should rewind the diff","suites":["DiffManager","_tryGetDocumentBeforeVersion","with matching versions"],"updatePoint":{"line":261,"column":32,"index":11217},"line":261,"code":"      it('should rewind the diff', function () {\n        return sinon.assert.calledOnce(this.rewindUpdatesWithArgs);\n      });","file":"unit/js/DiffManager/DiffManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback with the rewound document and updates","suites":["DiffManager","_tryGetDocumentBeforeVersion","with matching versions"],"updatePoint":{"line":264,"column":79,"index":11391},"line":264,"code":"      return it('should call the callback with the rewound document and updates', function () {\n        return this.callback.calledWith(null, this.rewound_content, this.updates).should.equal(true);\n      });","file":"unit/js/DiffManager/DiffManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback with an error with retry = true set","suites":["DiffManager","_tryGetDocumentBeforeVersion","with mismatching versions"],"updatePoint":{"line":281,"column":77,"index":12113},"line":281,"code":"      return it('should call the callback with an error with retry = true set', function () {\n        this.callback.calledOnce.should.equal(true);\n        const error = this.callback.args[0][0];\n        return expect(error.retry).to.equal(true);\n      });","file":"unit/js/DiffManager/DiffManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback with an error","suites":["DiffManager","_tryGetDocumentBeforeVersion","when the updates are inconsistent"],"updatePoint":{"line":293,"column":55,"index":12821},"line":293,"code":"      return it('should call the callback with an error', function () {\n        return this.callback.calledWith(this.error).should.equal(true);\n      });","file":"unit/js/DiffManager/DiffManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback","suites":["MongoAWS","archivePack"],"updatePoint":{"line":76,"column":39,"index":2297},"line":76,"code":"    return it('should call the callback', function () {\n      return this.callback.called.should.equal(true);\n    });","file":"unit/js/DocArchive/MongoAWS.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call db.docHistory.insert","suites":["MongoAWS","unArchivePack"],"updatePoint":{"line":102,"column":47,"index":3197},"line":102,"code":"    return it('should call db.docHistory.insert', function () {\n      return this.db.docHistory.insertOne.called.should.equal(true);\n    });","file":"unit/js/DocArchive/MongoAWS.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should get the document from the document updater","suites":["DocumentUpdaterManager","getDocument","successfully"],"updatePoint":{"line":49,"column":59,"index":1577},"line":49,"code":"      it('should get the document from the document updater', function () {\n        const url = `${this.settings.apis.documentupdater.url}/project/${this.project_id}/doc/${this.doc_id}`;\n        return this.request.get.calledWith(url).should.equal(true);\n      });","file":"unit/js/DocumentUpdaterManager/DocumentUpdaterManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback with the content and version","suites":["DocumentUpdaterManager","getDocument","successfully"],"updatePoint":{"line":53,"column":70,"index":1853},"line":53,"code":"      return it('should call the callback with the content and version', function () {\n        return this.callback.calledWith(null, this.lines.join('\\n'), this.version).should.equal(true);\n      });","file":"unit/js/DocumentUpdaterManager/DocumentUpdaterManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should return an error to the callback","suites":["DocumentUpdaterManager","getDocument","when the document updater API returns an error"],"updatePoint":{"line":62,"column":55,"index":2382},"line":62,"code":"      return it('should return an error to the callback', function () {\n        return this.callback.calledWith(this.error).should.equal(true);\n      });","file":"unit/js/DocumentUpdaterManager/DocumentUpdaterManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should return the callback with a \"not found\" error","suites":["DocumentUpdaterManager","getDocument","when the document updater returns not found"],"updatePoint":{"line":73,"column":61,"index":2872},"line":73,"code":"      it('should return the callback with a \"not found\" error', function () {\n        return this.callback.calledWith(sinon.match.has('message', 'doc not found')).should.equal(true);\n      });","file":"unit/js/DocumentUpdaterManager/DocumentUpdaterManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should return the callback with an error","suites":["DocumentUpdaterManager","getDocument","when the document updater returns a failure error code"],"updatePoint":{"line":84,"column":57,"index":3409},"line":84,"code":"      return it('should return the callback with an error', function () {\n        return this.callback.calledWith(sinon.match.has('message', 'doc updater returned a non-success status code: 500')).should.equal(true);\n      });","file":"unit/js/DocumentUpdaterManager/DocumentUpdaterManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should set the document in the document updater","suites":["DocumentUpdaterManager","setDocument","successfully"],"updatePoint":{"line":101,"column":57,"index":4130},"line":101,"code":"      it('should set the document in the document updater', function () {\n        const url = `${this.settings.apis.documentupdater.url}/project/${this.project_id}/doc/${this.doc_id}`;\n        return this.request.post.calledWith({\n          url,\n          json: {\n            lines: this.content.split('\\n'),\n            source: 'restore',\n            user_id: this.user_id,\n            undoing: true\n          }\n        }).should.equal(true);\n      });","file":"unit/js/DocumentUpdaterManager/DocumentUpdaterManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback","suites":["DocumentUpdaterManager","setDocument","successfully"],"updatePoint":{"line":113,"column":41,"index":4568},"line":113,"code":"      return it('should call the callback', function () {\n        return this.callback.calledWith(null).should.equal(true);\n      });","file":"unit/js/DocumentUpdaterManager/DocumentUpdaterManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should return an error to the callback","suites":["DocumentUpdaterManager","setDocument","when the document updater API returns an error"],"updatePoint":{"line":122,"column":55,"index":5089},"line":122,"code":"      return it('should return an error to the callback', function () {\n        return this.callback.calledWith(this.error).should.equal(true);\n      });","file":"unit/js/DocumentUpdaterManager/DocumentUpdaterManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should return the callback with an error","suites":["DocumentUpdaterManager","setDocument","when the document updater returns a failure error code"],"updatePoint":{"line":133,"column":57,"index":5622},"line":133,"code":"      return it('should return the callback with an error', function () {\n        return this.callback.calledWith(sinon.match.has('message', 'doc updater returned a non-success status code: 500')).should.equal(true);\n      });","file":"unit/js/DocumentUpdaterManager/DocumentUpdaterManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should process the updates","suites":["HttpController","flushDoc"],"updatePoint":{"line":52,"column":34,"index":1726},"line":52,"code":"    it('should process the updates', function () {\n      return this.UpdatesManager.processUncompressedUpdatesWithLock.calledWith(this.project_id, this.doc_id).should.equal(true);\n    });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should return a success code","suites":["HttpController","flushDoc"],"updatePoint":{"line":55,"column":43,"index":1923},"line":55,"code":"    return it('should return a success code', function () {\n      return this.res.sendStatus.calledWith(204).should.equal(true);\n    });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should process the updates","suites":["HttpController","flushProject"],"updatePoint":{"line":72,"column":34,"index":2459},"line":72,"code":"    it('should process the updates', function () {\n      return this.UpdatesManager.processUncompressedUpdatesForProject.calledWith(this.project_id).should.equal(true);\n    });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should return a success code","suites":["HttpController","flushProject"],"updatePoint":{"line":75,"column":43,"index":2645},"line":75,"code":"    return it('should return a success code', function () {\n      return this.res.sendStatus.calledWith(204).should.equal(true);\n    });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should get the diff","suites":["HttpController","getDiff"],"updatePoint":{"line":102,"column":27,"index":3373},"line":102,"code":"    it('should get the diff', function () {\n      return this.DiffManager.getDiff.calledWith(this.project_id, this.doc_id, parseInt(this.from, 10), parseInt(this.to, 10)).should.equal(true);\n    });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should return the diff","suites":["HttpController","getDiff"],"updatePoint":{"line":105,"column":37,"index":3582},"line":105,"code":"    return it('should return the diff', function () {\n      return this.res.json.calledWith({\n        diff: this.diff\n      }).should.equal(true);\n    });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should get the updates","suites":["HttpController","getUpdates"],"updatePoint":{"line":132,"column":30,"index":4447},"line":132,"code":"    it('should get the updates', function () {\n      return this.UpdatesManager.getSummarizedProjectUpdates.calledWith(this.project_id, {\n        before: this.before,\n        min_count: this.min_count\n      }).should.equal(true);\n    });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should return the formatted updates","suites":["HttpController","getUpdates"],"updatePoint":{"line":138,"column":50,"index":4705},"line":138,"code":"    return it('should return the formatted updates', function () {\n      return this.res.json.calledWith({\n        updates: this.updates,\n        nextBeforeTimestamp: this.nextBeforeTimestamp\n      }).should.equal(true);\n    });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should restore the document","suites":["HttpController","RestoreManager"],"updatePoint":{"line":164,"column":35,"index":5474},"line":164,"code":"    it('should restore the document', function () {\n      return this.RestoreManager.restoreToBeforeVersion.calledWith(this.project_id, this.doc_id, parseInt(this.version, 10), this.user_id).should.equal(true);\n    });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should return a success code","suites":["HttpController","RestoreManager"],"updatePoint":{"line":167,"column":43,"index":5701},"line":167,"code":"    return it('should return a success code', function () {\n      return this.res.sendStatus.calledWith(204).should.equal(true);\n    });","file":"unit/js/HttpController/HttpControllerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should check the lock in redis","suites":["LockManager","checkLock","when the lock is taken"],"updatePoint":{"line":50,"column":40,"index":1512},"line":50,"code":"      it('should check the lock in redis', function () {\n        return this.rclient.exists.calledWith(this.key).should.equal(true);\n      });","file":"unit/js/LockManager/LockManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should return the callback with false","suites":["LockManager","checkLock","when the lock is taken"],"updatePoint":{"line":53,"column":54,"index":1669},"line":53,"code":"      return it('should return the callback with false', function () {\n        return this.callback.calledWith(null, false).should.equal(true);\n      });","file":"unit/js/LockManager/LockManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should return the callback with true","suites":["LockManager","checkLock","when the lock is free"],"updatePoint":{"line":62,"column":53,"index":2069},"line":62,"code":"      return it('should return the callback with true', function () {\n        return this.callback.calledWith(null, true).should.equal(true);\n      });","file":"unit/js/LockManager/LockManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should check the lock in redis","suites":["LockManager","tryLock","when the lock is taken"],"updatePoint":{"line":74,"column":40,"index":2570},"line":74,"code":"      it('should check the lock in redis', function () {\n        return this.rclient.set.calledWith(this.key, 'locked-random-value', 'EX', this.LockManager.LOCK_TTL, 'NX').should.equal(true);\n      });","file":"unit/js/LockManager/LockManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should return the callback with false","suites":["LockManager","tryLock","when the lock is taken"],"updatePoint":{"line":77,"column":54,"index":2786},"line":77,"code":"      return it('should return the callback with false', function () {\n        return this.callback.calledWith(null, false).should.equal(true);\n      });","file":"unit/js/LockManager/LockManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should return the callback with true","suites":["LockManager","tryLock","when the lock is free"],"updatePoint":{"line":86,"column":53,"index":3182},"line":86,"code":"      return it('should return the callback with true', function () {\n        return this.callback.calledWith(null, true).should.equal(true);\n      });","file":"unit/js/LockManager/LockManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should delete the lock in redis","suites":["LockManager","deleteLock"],"updatePoint":{"line":97,"column":41,"index":3574},"line":97,"code":"      it('should delete the lock in redis', function () {\n        return this.rclient.del.calledWith(key).should.equal(true);\n      });","file":"unit/js/LockManager/LockManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback","suites":["LockManager","deleteLock"],"updatePoint":{"line":100,"column":41,"index":3710},"line":100,"code":"      return it('should call the callback', function () {\n        return this.callback.called.should.equal(true);\n      });","file":"unit/js/LockManager/LockManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should try to get the lock","suites":["LockManager","getLock","when the lock is not taken"],"updatePoint":{"line":114,"column":36,"index":4212},"line":114,"code":"      it('should try to get the lock', function () {\n        return this.LockManager.tryLock.calledWith(this.key).should.equal(true);\n      });","file":"unit/js/LockManager/LockManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should only need to try once","suites":["LockManager","getLock","when the lock is not taken"],"updatePoint":{"line":117,"column":38,"index":4358},"line":117,"code":"      it('should only need to try once', function () {\n        return this.LockManager.tryLock.callCount.should.equal(1);\n      });","file":"unit/js/LockManager/LockManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should return the callback","suites":["LockManager","getLock","when the lock is not taken"],"updatePoint":{"line":120,"column":43,"index":4495},"line":120,"code":"      return it('should return the callback', function () {\n        return this.callback.calledWith(null).should.equal(true);\n      });","file":"unit/js/LockManager/LockManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call tryLock multiple times until free","suites":["LockManager","getLock","when the lock is initially set"],"updatePoint":{"line":144,"column":55,"index":5366},"line":144,"code":"      it('should call tryLock multiple times until free', function () {\n        return (this.LockManager.tryLock.callCount > 1).should.equal(true);\n      });","file":"unit/js/LockManager/LockManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should return the callback","suites":["LockManager","getLock","when the lock is initially set"],"updatePoint":{"line":147,"column":43,"index":5512},"line":147,"code":"      return it('should return the callback', function () {\n        return this.callback.calledWith(null).should.equal(true);\n      });","file":"unit/js/LockManager/LockManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should return the callback with an error","suites":["LockManager","getLock","when the lock times out"],"updatePoint":{"line":161,"column":57,"index":6090},"line":161,"code":"      return it('should return the callback with an error', function () {\n        return this.callback.calledWith(sinon.match.instanceOf(Error)).should.equal(true);\n      });","file":"unit/js/LockManager/LockManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should get the lock","suites":["LockManager","runWithLock","with successful run"],"updatePoint":{"line":180,"column":29,"index":6814},"line":180,"code":"      it('should get the lock', function () {\n        return this.LockManager.getLock.calledWith(this.key).should.equal(true);\n      });","file":"unit/js/LockManager/LockManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should run the passed function","suites":["LockManager","runWithLock","with successful run"],"updatePoint":{"line":183,"column":40,"index":6962},"line":183,"code":"      it('should run the passed function', function () {\n        return this.runner.called.should.equal(true);\n      });","file":"unit/js/LockManager/LockManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should release the lock","suites":["LockManager","runWithLock","with successful run"],"updatePoint":{"line":186,"column":33,"index":7076},"line":186,"code":"      it('should release the lock', function () {\n        return this.LockManager.releaseLock.calledWith(this.key).should.equal(true);\n      });","file":"unit/js/LockManager/LockManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback","suites":["LockManager","runWithLock","with successful run"],"updatePoint":{"line":189,"column":41,"index":7229},"line":189,"code":"      return it('should call the callback', function () {\n        return this.callback.called.should.equal(true);\n      });","file":"unit/js/LockManager/LockManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should release the lock","suites":["LockManager","runWithLock","when the runner function returns an error"],"updatePoint":{"line":207,"column":33,"index":7933},"line":207,"code":"      it('should release the lock', function () {\n        return this.LockManager.releaseLock.calledWith(this.key).should.equal(true);\n      });","file":"unit/js/LockManager/LockManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback with the error","suites":["LockManager","runWithLock","when the runner function returns an error"],"updatePoint":{"line":210,"column":56,"index":8101},"line":210,"code":"      return it('should call the callback with the error', function () {\n        return this.callback.calledWith(this.error).should.equal(true);\n      });","file":"unit/js/LockManager/LockManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should clear the data from redis","suites":["LockManager","runWithLock","releaseLock","when the lock is current"],"updatePoint":{"line":220,"column":44,"index":8551},"line":220,"code":"        it('should clear the data from redis', function () {\n          return this.rclient.eval.calledWith(this.LockManager.unlockScript, 1, this.key, this.lockValue).should.equal(true);\n        });","file":"unit/js/LockManager/LockManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback","suites":["LockManager","runWithLock","releaseLock","when the lock is current"],"updatePoint":{"line":223,"column":43,"index":8749},"line":223,"code":"        return it('should call the callback', function () {\n          return this.callback.called.should.equal(true);\n        });","file":"unit/js/LockManager/LockManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should return an error if the lock has expired","suites":["LockManager","runWithLock","releaseLock","when the lock has expired"],"updatePoint":{"line":232,"column":65,"index":9169},"line":232,"code":"        return it('should return an error if the lock has expired', function () {\n          return this.callback.calledWith(sinon.match.has('message', 'tried to release timed out lock')).should.equal(true);\n        });","file":"unit/js/LockManager/LockManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should find the updates for the doc","suites":["MongoManager","getLastCompressedUpdate"],"updatePoint":{"line":56,"column":43,"index":1921},"line":56,"code":"    it('should find the updates for the doc', function () {\n      return this.db.docHistory.find.calledWith({\n        doc_id: ObjectId(this.doc_id)\n      }).should.equal(true);\n    });","file":"unit/js/MongoManager/MongoManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should limit to one result","suites":["MongoManager","getLastCompressedUpdate"],"updatePoint":{"line":61,"column":34,"index":2097},"line":61,"code":"    it('should limit to one result', function () {\n      return this.db.docHistory.limit.calledWith(1).should.equal(true);\n    });","file":"unit/js/MongoManager/MongoManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should sort in descending version order","suites":["MongoManager","getLastCompressedUpdate"],"updatePoint":{"line":64,"column":47,"index":2241},"line":64,"code":"    it('should sort in descending version order', function () {\n      return this.db.docHistory.sort.calledWith({\n        v: -1\n      }).should.equal(true);\n    });","file":"unit/js/MongoManager/MongoManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the call back with the update","suites":["MongoManager","getLastCompressedUpdate"],"updatePoint":{"line":69,"column":56,"index":2415},"line":69,"code":"    return it('should call the call back with the update', function () {\n      return this.callback.calledWith(null, this.update).should.equal(true);\n    });","file":"unit/js/MongoManager/MongoManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should get the last update","suites":["MongoManager","peekLastCompressedUpdate","when there is no last update"],"updatePoint":{"line":80,"column":36,"index":2983},"line":80,"code":"      it('should get the last update', function () {\n        return this.MongoManager.getLastCompressedUpdate.calledWith(this.doc_id).should.equal(true);\n      });","file":"unit/js/MongoManager/MongoManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback with no update","suites":["MongoManager","peekLastCompressedUpdate","when there is no last update"],"updatePoint":{"line":83,"column":56,"index":3167},"line":83,"code":"      return it('should call the callback with no update', function () {\n        return this.callback.calledWith(null, null).should.equal(true);\n      });","file":"unit/js/MongoManager/MongoManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should get the last update","suites":["MongoManager","peekLastCompressedUpdate","when there is an update"],"updatePoint":{"line":95,"column":36,"index":3652},"line":95,"code":"      it('should get the last update', function () {\n        return this.MongoManager.getLastCompressedUpdate.calledWith(this.doc_id).should.equal(true);\n      });","file":"unit/js/MongoManager/MongoManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback with the update","suites":["MongoManager","peekLastCompressedUpdate","when there is an update"],"updatePoint":{"line":98,"column":57,"index":3837},"line":98,"code":"      return it('should call the callback with the update', function () {\n        return this.callback.calledWith(null, this.update).should.equal(true);\n      });","file":"unit/js/MongoManager/MongoManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should get the last update","suites":["MongoManager","peekLastCompressedUpdate","when there is a last update in S3"],"updatePoint":{"line":114,"column":36,"index":4496},"line":114,"code":"      it('should get the last update', function () {\n        return this.MongoManager.getLastCompressedUpdate.calledWith(this.doc_id).should.equal(true);\n      });","file":"unit/js/MongoManager/MongoManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback with a null update and the correct version","suites":["MongoManager","peekLastCompressedUpdate","when there is a last update in S3"],"updatePoint":{"line":117,"column":84,"index":4708},"line":117,"code":"      return it('should call the callback with a null update and the correct version', function () {\n        return this.callback.calledWith(null, null, this.update.v_end).should.equal(true);\n      });","file":"unit/js/MongoManager/MongoManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should insert the project_id into all entries for the doc_id which don't have it set","suites":["MongoManager","backportProjectId"],"updatePoint":{"line":129,"column":92,"index":5190},"line":129,"code":"    it(\"should insert the project_id into all entries for the doc_id which don't have it set\", function () {\n      return this.db.docHistory.updateMany.calledWith({\n        doc_id: ObjectId(this.doc_id),\n        project_id: {\n          $exists: false\n        }\n      }, {\n        $set: {\n          project_id: ObjectId(this.project_id)\n        }\n      }).should.equal(true);\n    });","file":"unit/js/MongoManager/MongoManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback","suites":["MongoManager","backportProjectId"],"updatePoint":{"line":141,"column":39,"index":5520},"line":141,"code":"    return it('should call the callback', function () {\n      return this.callback.called.should.equal(true);\n    });","file":"unit/js/MongoManager/MongoManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should look up the meta data in the db","suites":["MongoManager","getProjectMetaData"],"updatePoint":{"line":155,"column":46,"index":5993},"line":155,"code":"    it('should look up the meta data in the db', function () {\n      return this.db.projectHistoryMetaData.findOne.calledWith({\n        project_id: ObjectId(this.project_id)\n      }).should.equal(true);\n    });","file":"unit/js/MongoManager/MongoManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should return the metadata","suites":["MongoManager","getProjectMetaData"],"updatePoint":{"line":160,"column":41,"index":6199},"line":160,"code":"    return it('should return the metadata', function () {\n      return this.callback.calledWith(null, this.metadata).should.equal(true);\n    });","file":"unit/js/MongoManager/MongoManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should upsert the metadata into the DB","suites":["MongoManager","setProjectMetaData"],"updatePoint":{"line":174,"column":46,"index":6693},"line":174,"code":"    it('should upsert the metadata into the DB', function () {\n      return this.db.projectHistoryMetaData.updateOne.calledWith({\n        project_id: ObjectId(this.project_id)\n      }, {\n        $set: this.metadata\n      }, {\n        upsert: true\n      }).should.equal(true);\n    });","file":"unit/js/MongoManager/MongoManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback","suites":["MongoManager","setProjectMetaData"],"updatePoint":{"line":183,"column":39,"index":6970},"line":183,"code":"    return it('should call the callback', function () {\n      return this.callback.called.should.equal(true);\n    });","file":"unit/js/MongoManager/MongoManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should insert the update into a new pack","suites":["PackManager","insertCompressedUpdates","with no last update","for a small update"],"updatePoint":{"line":97,"column":52,"index":2698},"line":97,"code":"        it('should insert the update into a new pack', function () {\n          return this.PackManager.insertUpdatesIntoNewPack.calledWith(this.project_id, this.doc_id, this.newUpdates, true).should.equal(true);\n        });","file":"unit/js/PackManager/PackManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback","suites":["PackManager","insertCompressedUpdates","with no last update","for a small update"],"updatePoint":{"line":100,"column":43,"index":2913},"line":100,"code":"        return it('should call the callback', function () {\n          return this.callback.called.should.equal(true);\n        });","file":"unit/js/PackManager/PackManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should append the initial updates to the existing pack","suites":["PackManager","insertCompressedUpdates","with no last update","for many small updates"],"updatePoint":{"line":113,"column":66,"index":3472},"line":113,"code":"        it('should append the initial updates to the existing pack', function () {\n          return this.PackManager.insertUpdatesIntoNewPack.calledWith(this.project_id, this.doc_id, this.newUpdates.slice(0, 512), false).should.equal(true);\n        });","file":"unit/js/PackManager/PackManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should insert the first set remaining updates as a new pack","suites":["PackManager","insertCompressedUpdates","with no last update","for many small updates"],"updatePoint":{"line":116,"column":71,"index":3730},"line":116,"code":"        it('should insert the first set remaining updates as a new pack', function () {\n          return this.PackManager.insertUpdatesIntoNewPack.calledWith(this.project_id, this.doc_id, this.newUpdates.slice(512, 1024), false).should.equal(true);\n        });","file":"unit/js/PackManager/PackManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should insert the second set of remaining updates as a new pack","suites":["PackManager","insertCompressedUpdates","with no last update","for many small updates"],"updatePoint":{"line":119,"column":75,"index":3995},"line":119,"code":"        it('should insert the second set of remaining updates as a new pack', function () {\n          return this.PackManager.insertUpdatesIntoNewPack.calledWith(this.project_id, this.doc_id, this.newUpdates.slice(1024, 1536), false).should.equal(true);\n        });","file":"unit/js/PackManager/PackManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should insert the third set of remaining updates as a new pack","suites":["PackManager","insertCompressedUpdates","with no last update","for many small updates"],"updatePoint":{"line":122,"column":74,"index":4260},"line":122,"code":"        it('should insert the third set of remaining updates as a new pack', function () {\n          return this.PackManager.insertUpdatesIntoNewPack.calledWith(this.project_id, this.doc_id, this.newUpdates.slice(1536, 2048), false).should.equal(true);\n        });","file":"unit/js/PackManager/PackManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should insert the final set of remaining updates as a new pack","suites":["PackManager","insertCompressedUpdates","with no last update","for many small updates"],"updatePoint":{"line":125,"column":74,"index":4525},"line":125,"code":"        it('should insert the final set of remaining updates as a new pack', function () {\n          return this.PackManager.insertUpdatesIntoNewPack.calledWith(this.project_id, this.doc_id, this.newUpdates.slice(2048, 2049), false).should.equal(true);\n        });","file":"unit/js/PackManager/PackManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback","suites":["PackManager","insertCompressedUpdates","with no last update","for many small updates"],"updatePoint":{"line":128,"column":43,"index":4759},"line":128,"code":"        return it('should call the callback', function () {\n          return this.callback.called.should.equal(true);\n        });","file":"unit/js/PackManager/PackManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should append the update to the existing pack","suites":["PackManager","insertCompressedUpdates","with an existing pack as the last update","for a small update"],"updatePoint":{"line":140,"column":57,"index":5386},"line":140,"code":"        it('should append the update to the existing pack', function () {\n          return this.PackManager.appendUpdatesToExistingPack.calledWith(this.project_id, this.doc_id, this.lastUpdate, this.newUpdates, false).should.equal(true);\n        });","file":"unit/js/PackManager/PackManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should not insert any new packs","suites":["PackManager","insertCompressedUpdates","with an existing pack as the last update","for a small update"],"updatePoint":{"line":143,"column":43,"index":5622},"line":143,"code":"        it('should not insert any new packs', function () {\n          return this.PackManager.insertUpdatesIntoNewPack.called.should.equal(false);\n        });","file":"unit/js/PackManager/PackManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback","suites":["PackManager","insertCompressedUpdates","with an existing pack as the last update","for a small update"],"updatePoint":{"line":146,"column":43,"index":5781},"line":146,"code":"        return it('should call the callback', function () {\n          return this.callback.called.should.equal(true);\n        });","file":"unit/js/PackManager/PackManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should append the initial updates to the existing pack","suites":["PackManager","insertCompressedUpdates","with an existing pack as the last update","for many small updates"],"updatePoint":{"line":159,"column":66,"index":6344},"line":159,"code":"        it('should append the initial updates to the existing pack', function () {\n          return this.PackManager.appendUpdatesToExistingPack.calledWith(this.project_id, this.doc_id, this.lastUpdate, this.newUpdates.slice(0, 510), false).should.equal(true);\n        });","file":"unit/js/PackManager/PackManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should insert the first set remaining updates as a new pack","suites":["PackManager","insertCompressedUpdates","with an existing pack as the last update","for many small updates"],"updatePoint":{"line":162,"column":71,"index":6622},"line":162,"code":"        it('should insert the first set remaining updates as a new pack', function () {\n          return this.PackManager.insertUpdatesIntoNewPack.calledWith(this.project_id, this.doc_id, this.newUpdates.slice(510, 1022), false).should.equal(true);\n        });","file":"unit/js/PackManager/PackManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should insert the second set of remaining updates as a new pack","suites":["PackManager","insertCompressedUpdates","with an existing pack as the last update","for many small updates"],"updatePoint":{"line":165,"column":75,"index":6887},"line":165,"code":"        it('should insert the second set of remaining updates as a new pack', function () {\n          return this.PackManager.insertUpdatesIntoNewPack.calledWith(this.project_id, this.doc_id, this.newUpdates.slice(1022, 1534), false).should.equal(true);\n        });","file":"unit/js/PackManager/PackManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should insert the third set of remaining updates as a new pack","suites":["PackManager","insertCompressedUpdates","with an existing pack as the last update","for many small updates"],"updatePoint":{"line":168,"column":74,"index":7152},"line":168,"code":"        it('should insert the third set of remaining updates as a new pack', function () {\n          return this.PackManager.insertUpdatesIntoNewPack.calledWith(this.project_id, this.doc_id, this.newUpdates.slice(1534, 2046), false).should.equal(true);\n        });","file":"unit/js/PackManager/PackManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should insert the final set of remaining updates as a new pack","suites":["PackManager","insertCompressedUpdates","with an existing pack as the last update","for many small updates"],"updatePoint":{"line":171,"column":74,"index":7417},"line":171,"code":"        it('should insert the final set of remaining updates as a new pack', function () {\n          return this.PackManager.insertUpdatesIntoNewPack.calledWith(this.project_id, this.doc_id, this.newUpdates.slice(2046, 2049), false).should.equal(true);\n        });","file":"unit/js/PackManager/PackManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback","suites":["PackManager","insertCompressedUpdates","with an existing pack as the last update","for many small updates"],"updatePoint":{"line":174,"column":43,"index":7651},"line":174,"code":"        return it('should call the callback', function () {\n          return this.callback.called.should.equal(true);\n        });","file":"unit/js/PackManager/PackManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should append the initial updates to the existing pack","suites":["PackManager","insertCompressedUpdates","with an existing pack as the last update","for many big updates"],"updatePoint":{"line":188,"column":66,"index":8330},"line":188,"code":"        it('should append the initial updates to the existing pack', function () {\n          return this.PackManager.appendUpdatesToExistingPack.calledWith(this.project_id, this.doc_id, this.lastUpdate, this.newUpdates.slice(0, 1), false).should.equal(true);\n        });","file":"unit/js/PackManager/PackManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should insert the first set remaining updates as a new pack","suites":["PackManager","insertCompressedUpdates","with an existing pack as the last update","for many big updates"],"updatePoint":{"line":191,"column":71,"index":8606},"line":191,"code":"        it('should insert the first set remaining updates as a new pack', function () {\n          return this.PackManager.insertUpdatesIntoNewPack.calledWith(this.project_id, this.doc_id, this.newUpdates.slice(1, 2), false).should.equal(true);\n        });","file":"unit/js/PackManager/PackManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should insert the second set of remaining updates as a new pack","suites":["PackManager","insertCompressedUpdates","with an existing pack as the last update","for many big updates"],"updatePoint":{"line":194,"column":75,"index":8866},"line":194,"code":"        it('should insert the second set of remaining updates as a new pack', function () {\n          return this.PackManager.insertUpdatesIntoNewPack.calledWith(this.project_id, this.doc_id, this.newUpdates.slice(2, 3), false).should.equal(true);\n        });","file":"unit/js/PackManager/PackManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should insert the third set of remaining updates as a new pack","suites":["PackManager","insertCompressedUpdates","with an existing pack as the last update","for many big updates"],"updatePoint":{"line":197,"column":74,"index":9125},"line":197,"code":"        it('should insert the third set of remaining updates as a new pack', function () {\n          return this.PackManager.insertUpdatesIntoNewPack.calledWith(this.project_id, this.doc_id, this.newUpdates.slice(3, 4), false).should.equal(true);\n        });","file":"unit/js/PackManager/PackManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should insert the final set of remaining updates as a new pack","suites":["PackManager","insertCompressedUpdates","with an existing pack as the last update","for many big updates"],"updatePoint":{"line":200,"column":74,"index":9384},"line":200,"code":"        it('should insert the final set of remaining updates as a new pack', function () {\n          return this.PackManager.insertUpdatesIntoNewPack.calledWith(this.project_id, this.doc_id, this.newUpdates.slice(4, 5), false).should.equal(true);\n        });","file":"unit/js/PackManager/PackManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback","suites":["PackManager","insertCompressedUpdates","with an existing pack as the last update","for many big updates"],"updatePoint":{"line":203,"column":43,"index":9612},"line":203,"code":"        return it('should call the callback', function () {\n          return this.callback.called.should.equal(true);\n        });","file":"unit/js/PackManager/PackManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should insert the update into mongo","suites":["PackManager","insertCompressedUpdates","flushCompressedUpdates","when there is no previous update","for a small update  that will expire"],"updatePoint":{"line":214,"column":49,"index":10146},"line":214,"code":"          it('should insert the update into mongo', function () {\n            return this.db.docHistory.insertOne.calledWithMatch({\n              pack: this.newUpdates,\n              project_id: ObjectId(this.project_id),\n              doc_id: ObjectId(this.doc_id),\n              n: this.newUpdates.length,\n              v: this.newUpdates[0].v,\n              v_end: this.newUpdates[this.newUpdates.length - 1].v\n            }).should.equal(true);\n          });","file":"unit/js/PackManager/PackManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should set an expiry time in the future","suites":["PackManager","insertCompressedUpdates","flushCompressedUpdates","when there is no previous update","for a small update  that will expire"],"updatePoint":{"line":224,"column":53,"index":10613},"line":224,"code":"          it('should set an expiry time in the future', function () {\n            return this.db.docHistory.insertOne.calledWithMatch({\n              expiresAt: new Date(Date.now() + 7 * 24 * 3600 * 1000)\n            }).should.equal(true);\n          });","file":"unit/js/PackManager/PackManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback","suites":["PackManager","insertCompressedUpdates","flushCompressedUpdates","when there is no previous update","for a small update  that will expire"],"updatePoint":{"line":229,"column":45,"index":10859},"line":229,"code":"          return it('should call the callback', function () {\n            return this.callback.called.should.equal(true);\n          });","file":"unit/js/PackManager/PackManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should append the update in mongo","suites":["PackManager","insertCompressedUpdates","when there is a recent previous update in mongo that expires","for a small update that will expire"],"updatePoint":{"line":258,"column":45,"index":11781},"line":258,"code":"        it('should append the update in mongo', function () {\n          return this.db.docHistory.updateOne.calledWithMatch({\n            _id: this.lastUpdate._id\n          }, {\n            $push: {\n              pack: {\n                $each: this.newUpdates\n              }\n            },\n            $set: {\n              v_end: this.newUpdates[this.newUpdates.length - 1].v\n            }\n          }).should.equal(true);\n        });","file":"unit/js/PackManager/PackManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should set an expiry time in the future","suites":["PackManager","insertCompressedUpdates","when there is a recent previous update in mongo that expires","for a small update that will expire"],"updatePoint":{"line":272,"column":51,"index":12224},"line":272,"code":"        it('should set an expiry time in the future', function () {\n          return this.db.docHistory.updateOne.calledWithMatch(sinon.match.any, {\n            $set: {\n              expiresAt: new Date(Date.now() + 7 * 24 * 3600 * 1000)\n            }\n          }).should.equal(true);\n        });","file":"unit/js/PackManager/PackManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback","suites":["PackManager","insertCompressedUpdates","when there is a recent previous update in mongo that expires","for a small update that will expire"],"updatePoint":{"line":279,"column":43,"index":12513},"line":279,"code":"        return it('should call the callback', function () {\n          return this.callback.called.should.equal(true);\n        });","file":"unit/js/PackManager/PackManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should insert the update into mongo","suites":["PackManager","insertCompressedUpdates","when there is a recent previous update in mongo that expires","for a small update that will not expire"],"updatePoint":{"line":308,"column":47,"index":13491},"line":308,"code":"        it('should insert the update into mongo', function () {\n          return this.db.docHistory.insertOne.calledWithMatch({\n            pack: this.newUpdates,\n            project_id: ObjectId(this.project_id),\n            doc_id: ObjectId(this.doc_id),\n            n: this.newUpdates.length,\n            v: this.newUpdates[0].v,\n            v_end: this.newUpdates[this.newUpdates.length - 1].v\n          }).should.equal(true);\n        });","file":"unit/js/PackManager/PackManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should not set any expiry time","suites":["PackManager","insertCompressedUpdates","when there is a recent previous update in mongo that expires","for a small update that will not expire"],"updatePoint":{"line":318,"column":42,"index":13929},"line":318,"code":"        it('should not set any expiry time', function () {\n          return this.db.docHistory.insertOne.neverCalledWithMatch(sinon.match.has('expiresAt')).should.equal(true);\n        });","file":"unit/js/PackManager/PackManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback","suites":["PackManager","insertCompressedUpdates","when there is a recent previous update in mongo that expires","for a small update that will not expire"],"updatePoint":{"line":321,"column":43,"index":14118},"line":321,"code":"        return it('should call the callback', function () {\n          return this.callback.called.should.equal(true);\n        });","file":"unit/js/PackManager/PackManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should insert the update into mongo","suites":["PackManager","insertCompressedUpdates","when there is an old previous update in mongo","for a small update that will expire"],"updatePoint":{"line":349,"column":47,"index":15048},"line":349,"code":"        it('should insert the update into mongo', function () {\n          return this.db.docHistory.insertOne.calledWithMatch({\n            pack: this.newUpdates,\n            project_id: ObjectId(this.project_id),\n            doc_id: ObjectId(this.doc_id),\n            n: this.newUpdates.length,\n            v: this.newUpdates[0].v,\n            v_end: this.newUpdates[this.newUpdates.length - 1].v\n          }).should.equal(true);\n        });","file":"unit/js/PackManager/PackManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should set an expiry time in the future","suites":["PackManager","insertCompressedUpdates","when there is an old previous update in mongo","for a small update that will expire"],"updatePoint":{"line":359,"column":51,"index":15495},"line":359,"code":"        it('should set an expiry time in the future', function () {\n          return this.db.docHistory.insertOne.calledWithMatch({\n            expiresAt: new Date(Date.now() + 7 * 24 * 3600 * 1000)\n          }).should.equal(true);\n        });","file":"unit/js/PackManager/PackManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback","suites":["PackManager","insertCompressedUpdates","when there is an old previous update in mongo","for a small update that will expire"],"updatePoint":{"line":364,"column":43,"index":15731},"line":364,"code":"        return it('should call the callback', function () {\n          return this.callback.called.should.equal(true);\n        });","file":"unit/js/PackManager/PackManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback","suites":["PackManager","checkArchiveNotInProgress","when an archive is in progress"],"updatePoint":{"line":402,"column":34,"index":16988},"line":402,"code":"      it('should call the callback', function () {\n        return this.callback.called.should.equal(true);\n      });","file":"unit/js/PackManager/PackManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should return an error","suites":["PackManager","checkArchiveNotInProgress","when an archive is in progress"],"updatePoint":{"line":405,"column":39,"index":17110},"line":405,"code":"      return it('should return an error', function () {\n        return this.callback.calledWith(sinon.match.has('message')).should.equal(true);\n      });","file":"unit/js/PackManager/PackManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback","suites":["PackManager","checkArchiveNotInProgress","when an archive is completed"],"updatePoint":{"line":418,"column":34,"index":17624},"line":418,"code":"      it('should call the callback', function () {\n        return this.callback.called.should.equal(true);\n      });","file":"unit/js/PackManager/PackManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should return an error","suites":["PackManager","checkArchiveNotInProgress","when an archive is completed"],"updatePoint":{"line":421,"column":39,"index":17746},"line":421,"code":"      return it('should return an error', function () {\n        return this.callback.calledWith(sinon.match.has('message')).should.equal(true);\n      });","file":"unit/js/PackManager/PackManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback with no error","suites":["PackManager","checkArchiveNotInProgress","when the archive has not started or completed"],"updatePoint":{"line":432,"column":48,"index":18264},"line":432,"code":"      it('should call the callback with no error', function () {\n        return this.callback.called.should.equal(true);\n      });","file":"unit/js/PackManager/PackManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should return with no error","suites":["PackManager","checkArchiveNotInProgress","when the archive has not started or completed"],"updatePoint":{"line":435,"column":44,"index":18391},"line":435,"code":"      return it('should return with no error', function () {\n        return (typeof this.callback.lastCall.args[0]).should.equal('undefined');\n      });","file":"unit/js/PackManager/PackManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should read the updates from redis","suites":["RedisManager","getOldestDocUpdates"],"updatePoint":{"line":69,"column":42,"index":2137},"line":69,"code":"    it('should read the updates from redis', function () {\n      return this.rclient.lrange.calledWith(`UncompressedHistoryOps:${this.doc_id}`, 0, this.batchSize - 1).should.equal(true);\n    });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback with the unparsed ops","suites":["RedisManager","getOldestDocUpdates"],"updatePoint":{"line":72,"column":54,"index":2344},"line":72,"code":"    it('should call the callback with the unparsed ops', function () {\n      return this.callback.calledWith(null, this.jsonUpdates).should.equal(true);\n    });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback with the parsed ops","suites":["RedisManager","getOldestDocUpdates","expandDocUpdates"],"updatePoint":{"line":79,"column":61,"index":2684},"line":79,"code":"      return it('should call the callback with the parsed ops', function () {\n        return this.callback.calledWith(null, this.rawUpdates).should.equal(true);\n      });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should delete the first update from redis","suites":["RedisManager","getOldestDocUpdates","deleteAppliedDocUpdates"],"updatePoint":{"line":90,"column":51,"index":3218},"line":90,"code":"      it('should delete the first update from redis', function () {\n        return this.rclient.lrem.calledWith(`UncompressedHistoryOps:${this.doc_id}`, 1, this.jsonUpdates[0]).should.equal(true);\n      });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should delete the second update from redis","suites":["RedisManager","getOldestDocUpdates","deleteAppliedDocUpdates"],"updatePoint":{"line":93,"column":52,"index":3426},"line":93,"code":"      it('should delete the second update from redis', function () {\n        return this.rclient.lrem.calledWith(`UncompressedHistoryOps:${this.doc_id}`, 1, this.jsonUpdates[1]).should.equal(true);\n      });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should delete the doc from the set of docs with history ops","suites":["RedisManager","getOldestDocUpdates","deleteAppliedDocUpdates"],"updatePoint":{"line":96,"column":69,"index":3651},"line":96,"code":"      it('should delete the doc from the set of docs with history ops', function () {\n        return this.rclient.srem.calledWith(`DocsWithHistoryOps:${this.project_id}`, this.doc_id).should.equal(true);\n      });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback ","suites":["RedisManager","getOldestDocUpdates","deleteAppliedDocUpdates"],"updatePoint":{"line":99,"column":42,"index":3838},"line":99,"code":"      return it('should call the callback ', function () {\n        return this.callback.called.should.equal(true);\n      });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should read the doc_ids from redis","suites":["RedisManager","getDocIdsWithHistoryOps"],"updatePoint":{"line":110,"column":42,"index":4290},"line":110,"code":"    it('should read the doc_ids from redis', function () {\n      return this.rclient.smembers.calledWith(`DocsWithHistoryOps:${this.project_id}`).should.equal(true);\n    });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback with the doc_ids","suites":["RedisManager","getDocIdsWithHistoryOps"],"updatePoint":{"line":113,"column":56,"index":4478},"line":113,"code":"    return it('should call the callback with the doc_ids', function () {\n      return this.callback.calledWith(null, this.doc_ids).should.equal(true);\n    });","file":"unit/js/RedisManager/RedisManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should get the content before the requested version","suites":["RestoreManager","restoreToBeforeVersion"],"updatePoint":{"line":39,"column":59,"index":1497},"line":39,"code":"    it('should get the content before the requested version', function () {\n      return this.DiffManager.getDocumentBeforeVersion.calledWith(this.project_id, this.doc_id, this.version).should.equal(true);\n    });","file":"unit/js/RestoreManager/RestoreManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should set the document in the document updater","suites":["RestoreManager","restoreToBeforeVersion"],"updatePoint":{"line":42,"column":55,"index":1707},"line":42,"code":"    it('should set the document in the document updater', function () {\n      return this.DocumentUpdaterManager.setDocument.calledWith(this.project_id, this.doc_id, this.content, this.user_id).should.equal(true);\n    });","file":"unit/js/RestoreManager/RestoreManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback","suites":["RestoreManager","restoreToBeforeVersion"],"updatePoint":{"line":45,"column":39,"index":1913},"line":45,"code":"    return it('should call the callback', function () {\n      return this.callback.called.should.equal(true);\n    });","file":"unit/js/RestoreManager/RestoreManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should split grouped updates into individual updates","suites":["UpdateCompressor","convertToSingleOpUpdates"],"updatePoint":{"line":33,"column":60,"index":1207},"line":33,"code":"    it('should split grouped updates into individual updates', function () {\n      return expect(this.UpdateCompressor.convertToSingleOpUpdates([{\n        op: [this.op1 = {\n          p: 0,\n          i: 'Foo'\n        }, this.op2 = {\n          p: 6,\n          i: 'bar'\n        }],\n        meta: {\n          ts: this.ts1,\n          user_id: this.user_id\n        },\n        v: 42\n      }, {\n        op: [this.op3 = {\n          p: 10,\n          i: 'baz'\n        }],\n        meta: {\n          ts: this.ts2,\n          user_id: this.other_user_id\n        },\n        v: 43\n      }])).to.deep.equal([{\n        op: this.op1,\n        meta: {\n          start_ts: this.ts1,\n          end_ts: this.ts1,\n          user_id: this.user_id\n        },\n        v: 42\n      }, {\n        op: this.op2,\n        meta: {\n          start_ts: this.ts1,\n          end_ts: this.ts1,\n          user_id: this.user_id\n        },\n        v: 42\n      }, {\n        op: this.op3,\n        meta: {\n          start_ts: this.ts2,\n          end_ts: this.ts2,\n          user_id: this.other_user_id\n        },\n        v: 43\n      }]);\n    });","file":"unit/js/UpdateCompressor/UpdateCompressorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should return no-op updates when the op list is empty","suites":["UpdateCompressor","convertToSingleOpUpdates"],"updatePoint":{"line":83,"column":61,"index":2306},"line":83,"code":"    it('should return no-op updates when the op list is empty', function () {\n      return expect(this.UpdateCompressor.convertToSingleOpUpdates([{\n        op: [],\n        meta: {\n          ts: this.ts1,\n          user_id: this.user_id\n        },\n        v: 42\n      }])).to.deep.equal([{\n        op: this.UpdateCompressor.NOOP,\n        meta: {\n          start_ts: this.ts1,\n          end_ts: this.ts1,\n          user_id: this.user_id\n        },\n        v: 42\n      }]);\n    });","file":"unit/js/UpdateCompressor/UpdateCompressorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should ignore comment ops","suites":["UpdateCompressor","convertToSingleOpUpdates"],"updatePoint":{"line":101,"column":40,"index":2764},"line":101,"code":"    return it('should ignore comment ops', function () {\n      return expect(this.UpdateCompressor.convertToSingleOpUpdates([{\n        op: [this.op1 = {\n          p: 0,\n          i: 'Foo'\n        }, this.op2 = {\n          p: 9,\n          c: 'baz'\n        }, this.op3 = {\n          p: 6,\n          i: 'bar'\n        }],\n        meta: {\n          ts: this.ts1,\n          user_id: this.user_id\n        },\n        v: 42\n      }])).to.deep.equal([{\n        op: this.op1,\n        meta: {\n          start_ts: this.ts1,\n          end_ts: this.ts1,\n          user_id: this.user_id\n        },\n        v: 42\n      }, {\n        op: this.op3,\n        meta: {\n          start_ts: this.ts1,\n          end_ts: this.ts1,\n          user_id: this.user_id\n        },\n        v: 42\n      }]);\n    });","file":"unit/js/UpdateCompressor/UpdateCompressorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should concat updates with the same version","suites":["UpdateCompressor","concatUpdatesWithSameVersion"],"updatePoint":{"line":138,"column":51,"index":3617},"line":138,"code":"    it('should concat updates with the same version', function () {\n      return expect(this.UpdateCompressor.concatUpdatesWithSameVersion([{\n        op: this.op1 = {\n          p: 0,\n          i: 'Foo'\n        },\n        meta: {\n          start_ts: this.ts1,\n          end_ts: this.ts1,\n          user_id: this.user_id\n        },\n        v: 42\n      }, {\n        op: this.op2 = {\n          p: 6,\n          i: 'bar'\n        },\n        meta: {\n          start_ts: this.ts1,\n          end_ts: this.ts1,\n          user_id: this.user_id\n        },\n        v: 42\n      }, {\n        op: this.op3 = {\n          p: 10,\n          i: 'baz'\n        },\n        meta: {\n          start_ts: this.ts2,\n          end_ts: this.ts2,\n          user_id: this.other_user_id\n        },\n        v: 43\n      }])).to.deep.equal([{\n        op: [this.op1, this.op2],\n        meta: {\n          start_ts: this.ts1,\n          end_ts: this.ts1,\n          user_id: this.user_id\n        },\n        v: 42\n      }, {\n        op: [this.op3],\n        meta: {\n          start_ts: this.ts2,\n          end_ts: this.ts2,\n          user_id: this.other_user_id\n        },\n        v: 43\n      }]);\n    });","file":"unit/js/UpdateCompressor/UpdateCompressorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should turn a noop into an empty op","suites":["UpdateCompressor","concatUpdatesWithSameVersion"],"updatePoint":{"line":190,"column":50,"index":4777},"line":190,"code":"    return it('should turn a noop into an empty op', function () {\n      return expect(this.UpdateCompressor.concatUpdatesWithSameVersion([{\n        op: this.UpdateCompressor.NOOP,\n        meta: {\n          start_ts: this.ts1,\n          end_ts: this.ts1,\n          user_id: this.user_id\n        },\n        v: 42\n      }])).to.deep.equal([{\n        op: [],\n        meta: {\n          start_ts: this.ts1,\n          end_ts: this.ts1,\n          user_id: this.user_id\n        },\n        v: 42\n      }]);\n    });","file":"unit/js/UpdateCompressor/UpdateCompressorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should append one insert to the other","suites":["UpdateCompressor","compress","insert - insert"],"updatePoint":{"line":212,"column":47,"index":5369},"line":212,"code":"      it('should append one insert to the other', function () {\n        return expect(this.UpdateCompressor.compressUpdates([{\n          op: {\n            p: 3,\n            i: 'foo'\n          },\n          meta: {\n            ts: this.ts1,\n            user_id: this.user_id\n          },\n          v: 42\n        }, {\n          op: {\n            p: 6,\n            i: 'bar'\n          },\n          meta: {\n            ts: this.ts2,\n            user_id: this.user_id\n          },\n          v: 43\n        }])).to.deep.equal([{\n          op: {\n            p: 3,\n            i: 'foobar'\n          },\n          meta: {\n            start_ts: this.ts1,\n            end_ts: this.ts2,\n            user_id: this.user_id\n          },\n          v: 43\n        }]);\n      });","file":"unit/js/UpdateCompressor/UpdateCompressorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should insert one insert inside the other","suites":["UpdateCompressor","compress","insert - insert"],"updatePoint":{"line":246,"column":51,"index":6130},"line":246,"code":"      it('should insert one insert inside the other', function () {\n        return expect(this.UpdateCompressor.compressUpdates([{\n          op: {\n            p: 3,\n            i: 'foo'\n          },\n          meta: {\n            ts: this.ts1,\n            user_id: this.user_id\n          },\n          v: 42\n        }, {\n          op: {\n            p: 5,\n            i: 'bar'\n          },\n          meta: {\n            ts: this.ts2,\n            user_id: this.user_id\n          },\n          v: 43\n        }])).to.deep.equal([{\n          op: {\n            p: 3,\n            i: 'fobaro'\n          },\n          meta: {\n            start_ts: this.ts1,\n            end_ts: this.ts2,\n            user_id: this.user_id\n          },\n          v: 43\n        }]);\n      });","file":"unit/js/UpdateCompressor/UpdateCompressorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should not append separated inserts","suites":["UpdateCompressor","compress","insert - insert"],"updatePoint":{"line":280,"column":45,"index":6885},"line":280,"code":"      it('should not append separated inserts', function () {\n        return expect(this.UpdateCompressor.compressUpdates([{\n          op: {\n            p: 3,\n            i: 'foo'\n          },\n          meta: {\n            ts: this.ts1,\n            user_id: this.user_id\n          },\n          v: 42\n        }, {\n          op: {\n            p: 9,\n            i: 'bar'\n          },\n          meta: {\n            ts: this.ts2,\n            user_id: this.user_id\n          },\n          v: 43\n        }])).to.deep.equal([{\n          op: {\n            p: 3,\n            i: 'foo'\n          },\n          meta: {\n            start_ts: this.ts1,\n            end_ts: this.ts1,\n            user_id: this.user_id\n          },\n          v: 42\n        }, {\n          op: {\n            p: 9,\n            i: 'bar'\n          },\n          meta: {\n            start_ts: this.ts2,\n            end_ts: this.ts2,\n            user_id: this.user_id\n          },\n          v: 43\n        }]);\n      });","file":"unit/js/UpdateCompressor/UpdateCompressorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should not append inserts that are too big (second op)","suites":["UpdateCompressor","compress","insert - insert"],"updatePoint":{"line":325,"column":64,"index":7880},"line":325,"code":"      it('should not append inserts that are too big (second op)', function () {\n        return expect(this.UpdateCompressor.compressUpdates([{\n          op: {\n            p: 3,\n            i: 'foo'\n          },\n          meta: {\n            ts: this.ts1,\n            user_id: this.user_id\n          },\n          v: 42\n        }, {\n          op: {\n            p: 6,\n            i: bigstring\n          },\n          meta: {\n            ts: this.ts2,\n            user_id: this.user_id\n          },\n          v: 43\n        }])).to.deep.equal([{\n          op: {\n            p: 3,\n            i: 'foo'\n          },\n          meta: {\n            start_ts: this.ts1,\n            end_ts: this.ts1,\n            user_id: this.user_id\n          },\n          v: 42\n        }, {\n          op: {\n            p: 6,\n            i: bigstring\n          },\n          meta: {\n            start_ts: this.ts2,\n            end_ts: this.ts2,\n            user_id: this.user_id\n          },\n          v: 43\n        }]);\n      });","file":"unit/js/UpdateCompressor/UpdateCompressorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should not append inserts that are too big (first op)","suites":["UpdateCompressor","compress","insert - insert"],"updatePoint":{"line":370,"column":63,"index":8882},"line":370,"code":"      it('should not append inserts that are too big (first op)', function () {\n        return expect(this.UpdateCompressor.compressUpdates([{\n          op: {\n            p: 3,\n            i: bigstring\n          },\n          meta: {\n            ts: this.ts1,\n            user_id: this.user_id\n          },\n          v: 42\n        }, {\n          op: {\n            p: 3 + bigstring.length,\n            i: 'bar'\n          },\n          meta: {\n            ts: this.ts2,\n            user_id: this.user_id\n          },\n          v: 43\n        }])).to.deep.equal([{\n          op: {\n            p: 3,\n            i: bigstring\n          },\n          meta: {\n            start_ts: this.ts1,\n            end_ts: this.ts1,\n            user_id: this.user_id\n          },\n          v: 42\n        }, {\n          op: {\n            p: 3 + bigstring.length,\n            i: 'bar'\n          },\n          meta: {\n            start_ts: this.ts2,\n            end_ts: this.ts2,\n            user_id: this.user_id\n          },\n          v: 43\n        }]);\n      });","file":"unit/js/UpdateCompressor/UpdateCompressorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should not append inserts that are too big (first and second op)","suites":["UpdateCompressor","compress","insert - insert"],"updatePoint":{"line":415,"column":81,"index":9940},"line":415,"code":"      return it('should not append inserts that are too big (first and second op)', function () {\n        return expect(this.UpdateCompressor.compressUpdates([{\n          op: {\n            p: 3,\n            i: mediumstring\n          },\n          meta: {\n            ts: this.ts1,\n            user_id: this.user_id\n          },\n          v: 42\n        }, {\n          op: {\n            p: 3 + mediumstring.length,\n            i: mediumstring\n          },\n          meta: {\n            ts: this.ts2,\n            user_id: this.user_id\n          },\n          v: 43\n        }])).to.deep.equal([{\n          op: {\n            p: 3,\n            i: mediumstring\n          },\n          meta: {\n            start_ts: this.ts1,\n            end_ts: this.ts1,\n            user_id: this.user_id\n          },\n          v: 42\n        }, {\n          op: {\n            p: 3 + mediumstring.length,\n            i: mediumstring\n          },\n          meta: {\n            start_ts: this.ts2,\n            end_ts: this.ts2,\n            user_id: this.user_id\n          },\n          v: 43\n        }]);\n      });","file":"unit/js/UpdateCompressor/UpdateCompressorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should append one delete to the other","suites":["UpdateCompressor","compress","delete - delete"],"updatePoint":{"line":462,"column":47,"index":11044},"line":462,"code":"      it('should append one delete to the other', function () {\n        return expect(this.UpdateCompressor.compressUpdates([{\n          op: {\n            p: 3,\n            d: 'foo'\n          },\n          meta: {\n            ts: this.ts1,\n            user_id: this.user_id\n          },\n          v: 42\n        }, {\n          op: {\n            p: 3,\n            d: 'bar'\n          },\n          meta: {\n            ts: this.ts2,\n            user_id: this.user_id\n          },\n          v: 43\n        }])).to.deep.equal([{\n          op: {\n            p: 3,\n            d: 'foobar'\n          },\n          meta: {\n            start_ts: this.ts1,\n            end_ts: this.ts2,\n            user_id: this.user_id\n          },\n          v: 43\n        }]);\n      });","file":"unit/js/UpdateCompressor/UpdateCompressorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should insert one delete inside the other","suites":["UpdateCompressor","compress","delete - delete"],"updatePoint":{"line":496,"column":51,"index":11805},"line":496,"code":"      it('should insert one delete inside the other', function () {\n        return expect(this.UpdateCompressor.compressUpdates([{\n          op: {\n            p: 3,\n            d: 'foo'\n          },\n          meta: {\n            ts: this.ts1,\n            user_id: this.user_id\n          },\n          v: 42\n        }, {\n          op: {\n            p: 1,\n            d: 'bar'\n          },\n          meta: {\n            ts: this.ts2,\n            user_id: this.user_id\n          },\n          v: 43\n        }])).to.deep.equal([{\n          op: {\n            p: 1,\n            d: 'bafoor'\n          },\n          meta: {\n            start_ts: this.ts1,\n            end_ts: this.ts2,\n            user_id: this.user_id\n          },\n          v: 43\n        }]);\n      });","file":"unit/js/UpdateCompressor/UpdateCompressorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should not append separated deletes","suites":["UpdateCompressor","compress","delete - delete"],"updatePoint":{"line":530,"column":52,"index":12567},"line":530,"code":"      return it('should not append separated deletes', function () {\n        return expect(this.UpdateCompressor.compressUpdates([{\n          op: {\n            p: 3,\n            d: 'foo'\n          },\n          meta: {\n            ts: this.ts1,\n            user_id: this.user_id\n          },\n          v: 42\n        }, {\n          op: {\n            p: 9,\n            d: 'bar'\n          },\n          meta: {\n            ts: this.ts2,\n            user_id: this.user_id\n          },\n          v: 43\n        }])).to.deep.equal([{\n          op: {\n            p: 3,\n            d: 'foo'\n          },\n          meta: {\n            start_ts: this.ts1,\n            end_ts: this.ts1,\n            user_id: this.user_id\n          },\n          v: 42\n        }, {\n          op: {\n            p: 9,\n            d: 'bar'\n          },\n          meta: {\n            start_ts: this.ts2,\n            end_ts: this.ts2,\n            user_id: this.user_id\n          },\n          v: 43\n        }]);\n      });","file":"unit/js/UpdateCompressor/UpdateCompressorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should undo a previous insert","suites":["UpdateCompressor","compress","insert - delete"],"updatePoint":{"line":577,"column":39,"index":13591},"line":577,"code":"      it('should undo a previous insert', function () {\n        return expect(this.UpdateCompressor.compressUpdates([{\n          op: {\n            p: 3,\n            i: 'foo'\n          },\n          meta: {\n            ts: this.ts1,\n            user_id: this.user_id\n          },\n          v: 42\n        }, {\n          op: {\n            p: 5,\n            d: 'o'\n          },\n          meta: {\n            ts: this.ts2,\n            user_id: this.user_id\n          },\n          v: 43\n        }])).to.deep.equal([{\n          op: {\n            p: 3,\n            i: 'fo'\n          },\n          meta: {\n            start_ts: this.ts1,\n            end_ts: this.ts2,\n            user_id: this.user_id\n          },\n          v: 43\n        }]);\n      });","file":"unit/js/UpdateCompressor/UpdateCompressorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should remove part of an insert from the middle","suites":["UpdateCompressor","compress","insert - delete"],"updatePoint":{"line":611,"column":57,"index":14352},"line":611,"code":"      it('should remove part of an insert from the middle', function () {\n        return expect(this.UpdateCompressor.compressUpdates([{\n          op: {\n            p: 3,\n            i: 'fobaro'\n          },\n          meta: {\n            ts: this.ts1,\n            user_id: this.user_id\n          },\n          v: 42\n        }, {\n          op: {\n            p: 5,\n            d: 'bar'\n          },\n          meta: {\n            ts: this.ts2,\n            user_id: this.user_id\n          },\n          v: 43\n        }])).to.deep.equal([{\n          op: {\n            p: 3,\n            i: 'foo'\n          },\n          meta: {\n            start_ts: this.ts1,\n            end_ts: this.ts2,\n            user_id: this.user_id\n          },\n          v: 43\n        }]);\n      });","file":"unit/js/UpdateCompressor/UpdateCompressorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should cancel out two opposite updates","suites":["UpdateCompressor","compress","insert - delete"],"updatePoint":{"line":645,"column":48,"index":15110},"line":645,"code":"      it('should cancel out two opposite updates', function () {\n        return expect(this.UpdateCompressor.compressUpdates([{\n          op: {\n            p: 3,\n            i: 'foo'\n          },\n          meta: {\n            ts: this.ts1,\n            user_id: this.user_id\n          },\n          v: 42\n        }, {\n          op: {\n            p: 3,\n            d: 'foo'\n          },\n          meta: {\n            ts: this.ts2,\n            user_id: this.user_id\n          },\n          v: 43\n        }])).to.deep.equal([{\n          op: {\n            p: 3,\n            i: ''\n          },\n          meta: {\n            start_ts: this.ts1,\n            end_ts: this.ts2,\n            user_id: this.user_id\n          },\n          v: 43\n        }]);\n      });","file":"unit/js/UpdateCompressor/UpdateCompressorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should not combine separated updates","suites":["UpdateCompressor","compress","insert - delete"],"updatePoint":{"line":679,"column":46,"index":15860},"line":679,"code":"      it('should not combine separated updates', function () {\n        return expect(this.UpdateCompressor.compressUpdates([{\n          op: {\n            p: 3,\n            i: 'foo'\n          },\n          meta: {\n            ts: this.ts1,\n            user_id: this.user_id\n          },\n          v: 42\n        }, {\n          op: {\n            p: 9,\n            d: 'bar'\n          },\n          meta: {\n            ts: this.ts2,\n            user_id: this.user_id\n          },\n          v: 43\n        }])).to.deep.equal([{\n          op: {\n            p: 3,\n            i: 'foo'\n          },\n          meta: {\n            start_ts: this.ts1,\n            end_ts: this.ts1,\n            user_id: this.user_id\n          },\n          v: 42\n        }, {\n          op: {\n            p: 9,\n            d: 'bar'\n          },\n          meta: {\n            start_ts: this.ts2,\n            end_ts: this.ts2,\n            user_id: this.user_id\n          },\n          v: 43\n        }]);\n      });","file":"unit/js/UpdateCompressor/UpdateCompressorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should not combine updates with overlap beyond the end","suites":["UpdateCompressor","compress","insert - delete"],"updatePoint":{"line":724,"column":71,"index":16862},"line":724,"code":"      return it('should not combine updates with overlap beyond the end', function () {\n        return expect(this.UpdateCompressor.compressUpdates([{\n          op: {\n            p: 3,\n            i: 'foobar'\n          },\n          meta: {\n            ts: this.ts1,\n            user_id: this.user_id\n          },\n          v: 42\n        }, {\n          op: {\n            p: 6,\n            d: 'bardle'\n          },\n          meta: {\n            ts: this.ts2,\n            user_id: this.user_id\n          },\n          v: 43\n        }])).to.deep.equal([{\n          op: {\n            p: 3,\n            i: 'foobar'\n          },\n          meta: {\n            start_ts: this.ts1,\n            end_ts: this.ts1,\n            user_id: this.user_id\n          },\n          v: 42\n        }, {\n          op: {\n            p: 6,\n            d: 'bardle'\n          },\n          meta: {\n            start_ts: this.ts2,\n            end_ts: this.ts2,\n            user_id: this.user_id\n          },\n          v: 43\n        }]);\n      });","file":"unit/js/UpdateCompressor/UpdateCompressorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should do a diff of the content","suites":["UpdateCompressor","compress","delete - insert"],"updatePoint":{"line":771,"column":41,"index":17900},"line":771,"code":"      it('should do a diff of the content', function () {\n        return expect(this.UpdateCompressor.compressUpdates([{\n          op: {\n            p: 3,\n            d: 'one two three four five six seven eight'\n          },\n          meta: {\n            ts: this.ts1,\n            user_id: this.user_id\n          },\n          v: 42\n        }, {\n          op: {\n            p: 3,\n            i: 'one 2 three four five six seven eight'\n          },\n          meta: {\n            ts: this.ts2,\n            user_id: this.user_id\n          },\n          v: 43\n        }])).to.deep.equal([{\n          op: {\n            p: 7,\n            d: 'two'\n          },\n          meta: {\n            start_ts: this.ts1,\n            end_ts: this.ts2,\n            user_id: this.user_id\n          },\n          v: 43\n        }, {\n          op: {\n            p: 7,\n            i: '2'\n          },\n          meta: {\n            start_ts: this.ts1,\n            end_ts: this.ts2,\n            user_id: this.user_id\n          },\n          v: 43\n        }]);\n      });","file":"unit/js/UpdateCompressor/UpdateCompressorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should return a no-op if the delete and insert are the same","suites":["UpdateCompressor","compress","delete - insert"],"updatePoint":{"line":816,"column":76,"index":18975},"line":816,"code":"      return it('should return a no-op if the delete and insert are the same', function () {\n        return expect(this.UpdateCompressor.compressUpdates([{\n          op: {\n            p: 3,\n            d: 'one two three four five six seven eight'\n          },\n          meta: {\n            ts: this.ts1,\n            user_id: this.user_id\n          },\n          v: 42\n        }, {\n          op: {\n            p: 3,\n            i: 'one two three four five six seven eight'\n          },\n          meta: {\n            ts: this.ts2,\n            user_id: this.user_id\n          },\n          v: 43\n        }])).to.deep.equal([{\n          op: {\n            p: 3,\n            i: ''\n          },\n          meta: {\n            start_ts: this.ts1,\n            end_ts: this.ts2,\n            user_id: this.user_id\n          },\n          v: 43\n        }]);\n      });","file":"unit/js/UpdateCompressor/UpdateCompressorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should leave them untouched","suites":["UpdateCompressor","compress","noop - insert"],"updatePoint":{"line":852,"column":44,"index":19847},"line":852,"code":"      return it('should leave them untouched', function () {\n        return expect(this.UpdateCompressor.compressUpdates([{\n          op: this.UpdateCompressor.NOOP,\n          meta: {\n            ts: this.ts1,\n            user_id: this.user_id\n          },\n          v: 42\n        }, {\n          op: {\n            p: 6,\n            i: 'bar'\n          },\n          meta: {\n            ts: this.ts1,\n            user_id: this.user_id\n          },\n          v: 43\n        }])).to.deep.equal([{\n          op: this.UpdateCompressor.NOOP,\n          meta: {\n            start_ts: this.ts1,\n            end_ts: this.ts1,\n            user_id: this.user_id\n          },\n          v: 42\n        }, {\n          op: {\n            p: 6,\n            i: 'bar'\n          },\n          meta: {\n            start_ts: this.ts1,\n            end_ts: this.ts1,\n            user_id: this.user_id\n          },\n          v: 43\n        }]);\n      });","file":"unit/js/UpdateCompressor/UpdateCompressorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should leave them untouched","suites":["UpdateCompressor","compress","noop - delete"],"updatePoint":{"line":893,"column":44,"index":20829},"line":893,"code":"      return it('should leave them untouched', function () {\n        return expect(this.UpdateCompressor.compressUpdates([{\n          op: this.UpdateCompressor.NOOP,\n          meta: {\n            ts: this.ts1,\n            user_id: this.user_id\n          },\n          v: 42\n        }, {\n          op: {\n            p: 6,\n            d: 'bar'\n          },\n          meta: {\n            ts: this.ts1,\n            user_id: this.user_id\n          },\n          v: 43\n        }])).to.deep.equal([{\n          op: this.UpdateCompressor.NOOP,\n          meta: {\n            start_ts: this.ts1,\n            end_ts: this.ts1,\n            user_id: this.user_id\n          },\n          v: 42\n        }, {\n          op: {\n            p: 6,\n            d: 'bar'\n          },\n          meta: {\n            start_ts: this.ts1,\n            end_ts: this.ts1,\n            user_id: this.user_id\n          },\n          v: 43\n        }]);\n      });","file":"unit/js/UpdateCompressor/UpdateCompressorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should not change the existing last updates","suites":["UpdateCompressor","compressRawUpdates","merging in-place with an array op"],"updatePoint":{"line":936,"column":60,"index":21907},"line":936,"code":"      return it('should not change the existing last updates', function () {\n        return expect(this.UpdateCompressor.compressRawUpdates({\n          op: [{\n            p: 1000,\n            d: 'hello'\n          }, {\n            p: 1000,\n            i: 'HELLO()'\n          }],\n          meta: {\n            start_ts: this.ts1,\n            end_ts: this.ts1,\n            user_id: this.user_id\n          },\n          v: 42\n        }, [{\n          op: [{\n            p: 1006,\n            i: 'WORLD'\n          }],\n          meta: {\n            ts: this.ts2,\n            user_id: this.user_id\n          },\n          v: 43\n        }])).to.deep.equal([{\n          op: [{\n            p: 1000,\n            d: 'hello'\n          }, {\n            p: 1000,\n            i: 'HELLO()'\n          }],\n          meta: {\n            start_ts: this.ts1,\n            end_ts: this.ts1,\n            user_id: this.user_id\n          },\n          v: 42\n        }, {\n          op: [{\n            p: 1006,\n            i: 'WORLD'\n          }],\n          meta: {\n            start_ts: this.ts2,\n            end_ts: this.ts2,\n            user_id: this.user_id\n          },\n          v: 43\n        }]);\n      });","file":"unit/js/UpdateCompressor/UpdateCompressorTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should not need to access the database","suites":["UpdatesManager","compressAndSaveRawUpdates","when there are no raw ops"],"updatePoint":{"line":62,"column":48,"index":2138},"line":62,"code":"      it('should not need to access the database', function () {\n        return this.MongoManager.peekLastCompressedUpdate.called.should.equal(false);\n      });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback","suites":["UpdatesManager","compressAndSaveRawUpdates","when there are no raw ops"],"updatePoint":{"line":65,"column":41,"index":2292},"line":65,"code":"      return it('should call the callback', function () {\n        return this.callback.called.should.equal(true);\n      });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should look at the last compressed op","suites":["UpdatesManager","compressAndSaveRawUpdates","when there is no compressed history to begin with"],"updatePoint":{"line":87,"column":47,"index":3200},"line":87,"code":"      it('should look at the last compressed op', function () {\n        return this.MongoManager.peekLastCompressedUpdate.calledWith(this.doc_id).should.equal(true);\n      });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should save the compressed ops as a pack","suites":["UpdatesManager","compressAndSaveRawUpdates","when there is no compressed history to begin with"],"updatePoint":{"line":90,"column":50,"index":3379},"line":90,"code":"      it('should save the compressed ops as a pack', function () {\n        return this.PackManager.insertCompressedUpdates.calledWith(this.project_id, this.doc_id, null, this.compressedUpdates, this.temporary).should.equal(true);\n      });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback","suites":["UpdatesManager","compressAndSaveRawUpdates","when there is no compressed history to begin with"],"updatePoint":{"line":93,"column":41,"index":3610},"line":93,"code":"      return it('should call the callback', function () {\n        return this.callback.called.should.equal(true);\n      });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should look at the last compressed op","suites":["UpdatesManager","compressAndSaveRawUpdates","when the raw ops need appending to existing history","when the raw ops start where the existing history ends"],"updatePoint":{"line":125,"column":49,"index":4892},"line":125,"code":"        it('should look at the last compressed op', function () {\n          return this.MongoManager.peekLastCompressedUpdate.calledWith(this.doc_id).should.equal(true);\n        });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should compress the raw ops","suites":["UpdatesManager","compressAndSaveRawUpdates","when the raw ops need appending to existing history","when the raw ops start where the existing history ends"],"updatePoint":{"line":128,"column":39,"index":5064},"line":128,"code":"        it('should compress the raw ops', function () {\n          return this.UpdateCompressor.compressRawUpdates.calledWith(null, this.rawUpdates).should.equal(true);\n        });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should save the new compressed ops into a pack","suites":["UpdatesManager","compressAndSaveRawUpdates","when the raw ops need appending to existing history","when the raw ops start where the existing history ends"],"updatePoint":{"line":131,"column":58,"index":5263},"line":131,"code":"        it('should save the new compressed ops into a pack', function () {\n          return this.PackManager.insertCompressedUpdates.calledWith(this.project_id, this.doc_id, this.lastCompressedUpdate, this.compressedUpdates, this.temporary).should.equal(true);\n        });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback","suites":["UpdatesManager","compressAndSaveRawUpdates","when the raw ops need appending to existing history","when the raw ops start where the existing history ends"],"updatePoint":{"line":134,"column":43,"index":5521},"line":134,"code":"        return it('should call the callback', function () {\n          return this.callback.called.should.equal(true);\n        });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should look at the last compressed op","suites":["UpdatesManager","compressAndSaveRawUpdates","when the raw ops need appending to existing history","when the raw ops start where the existing history ends and the history is in a pack"],"updatePoint":{"line":157,"column":49,"index":6439},"line":157,"code":"        it('should look at the last compressed op', function () {\n          return this.MongoManager.peekLastCompressedUpdate.calledWith(this.doc_id).should.equal(true);\n        });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should compress the raw ops","suites":["UpdatesManager","compressAndSaveRawUpdates","when the raw ops need appending to existing history","when the raw ops start where the existing history ends and the history is in a pack"],"updatePoint":{"line":160,"column":39,"index":6611},"line":160,"code":"        it('should compress the raw ops', function () {\n          return this.UpdateCompressor.compressRawUpdates.calledWith(null, this.rawUpdates).should.equal(true);\n        });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should save the new compressed ops into a pack","suites":["UpdatesManager","compressAndSaveRawUpdates","when the raw ops need appending to existing history","when the raw ops start where the existing history ends and the history is in a pack"],"updatePoint":{"line":163,"column":58,"index":6810},"line":163,"code":"        it('should save the new compressed ops into a pack', function () {\n          return this.PackManager.insertCompressedUpdates.calledWith(this.project_id, this.doc_id, this.lastCompressedUpdate, this.compressedUpdates, this.temporary).should.equal(true);\n        });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback","suites":["UpdatesManager","compressAndSaveRawUpdates","when the raw ops need appending to existing history","when the raw ops start where the existing history ends and the history is in a pack"],"updatePoint":{"line":166,"column":43,"index":7068},"line":166,"code":"        return it('should call the callback', function () {\n          return this.callback.called.should.equal(true);\n        });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should only compress the more recent raw ops","suites":["UpdatesManager","compressAndSaveRawUpdates","when the raw ops need appending to existing history","when some raw ops are passed that have already been compressed"],"updatePoint":{"line":187,"column":63,"index":7792},"line":187,"code":"        return it('should only compress the more recent raw ops', function () {\n          return this.UpdateCompressor.compressRawUpdates.calledWith(null, this.rawUpdates.slice(-2)).should.equal(true);\n        });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback with an error","suites":["UpdatesManager","compressAndSaveRawUpdates","when the raw ops need appending to existing history","when the raw ops do not follow from the last compressed op version"],"updatePoint":{"line":199,"column":50,"index":8382},"line":199,"code":"        it('should call the callback with an error', function () {\n          return this.callback.calledWith(sinon.match.has('message', 'Tried to apply raw op at version 13 to last compressed update with version 11 from unknown time')).should.equal(true);\n        });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should not insert any update into mongo","suites":["UpdatesManager","compressAndSaveRawUpdates","when the raw ops need appending to existing history","when the raw ops do not follow from the last compressed op version"],"updatePoint":{"line":202,"column":58,"index":8658},"line":202,"code":"        return it('should not insert any update into mongo', function () {\n          return this.PackManager.insertCompressedUpdates.called.should.equal(false);\n        });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback with an error","suites":["UpdatesManager","compressAndSaveRawUpdates","when the raw ops need appending to existing history","when the raw ops are out of order"],"updatePoint":{"line":217,"column":50,"index":9249},"line":217,"code":"        it('should call the callback with an error', function () {\n          return this.callback.calledWith(sinon.match.has('message')).should.equal(true);\n        });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should not insert any update into mongo","suites":["UpdatesManager","compressAndSaveRawUpdates","when the raw ops need appending to existing history","when the raw ops are out of order"],"updatePoint":{"line":220,"column":58,"index":9426},"line":220,"code":"        return it('should not insert any update into mongo', function () {\n          return this.PackManager.insertCompressedUpdates.called.should.equal(false);\n        });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should try to look at the last compressed op","suites":["UpdatesManager","compressAndSaveRawUpdates","when the raw ops need appending to existing history which is in S3","when the raw ops start where the existing history ends"],"updatePoint":{"line":248,"column":56,"index":10662},"line":248,"code":"        it('should try to look at the last compressed op', function () {\n          return this.MongoManager.peekLastCompressedUpdate.calledWith(this.doc_id).should.equal(true);\n        });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should compress the last compressed op and the raw ops","suites":["UpdatesManager","compressAndSaveRawUpdates","when the raw ops need appending to existing history which is in S3","when the raw ops start where the existing history ends"],"updatePoint":{"line":251,"column":66,"index":10861},"line":251,"code":"        it('should compress the last compressed op and the raw ops', function () {\n          return this.UpdateCompressor.compressRawUpdates.calledWith(this.lastCompressedUpdate, this.rawUpdates).should.equal(true);\n        });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should save the compressed ops","suites":["UpdatesManager","compressAndSaveRawUpdates","when the raw ops need appending to existing history which is in S3","when the raw ops start where the existing history ends"],"updatePoint":{"line":254,"column":42,"index":11065},"line":254,"code":"        it('should save the compressed ops', function () {\n          return this.PackManager.insertCompressedUpdates.calledWith(this.project_id, this.doc_id, null, this.compressedUpdates, this.temporary).should.equal(true);\n        });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback","suites":["UpdatesManager","compressAndSaveRawUpdates","when the raw ops need appending to existing history which is in S3","when the raw ops start where the existing history ends"],"updatePoint":{"line":257,"column":43,"index":11302},"line":257,"code":"        return it('should call the callback', function () {\n          return this.callback.called.should.equal(true);\n        });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should get the oldest updates","suites":["UpdatesManager","processUncompressedUpdates","when there is fewer than one batch to send"],"updatePoint":{"line":277,"column":39,"index":12363},"line":277,"code":"      it('should get the oldest updates', function () {\n        return this.RedisManager.getOldestDocUpdates.calledWith(this.doc_id, this.UpdatesManager.REDIS_READ_BATCH_SIZE).should.equal(true);\n      });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should compress and save the updates","suites":["UpdatesManager","processUncompressedUpdates","when there is fewer than one batch to send"],"updatePoint":{"line":280,"column":46,"index":12576},"line":280,"code":"      it('should compress and save the updates', function () {\n        return this.UpdatesManager.compressAndSaveRawUpdates.calledWith(this.project_id, this.doc_id, this.updates, this.temporary).should.equal(true);\n      });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should delete the batch of uncompressed updates that was just processed","suites":["UpdatesManager","processUncompressedUpdates","when there is fewer than one batch to send"],"updatePoint":{"line":283,"column":81,"index":12836},"line":283,"code":"      it('should delete the batch of uncompressed updates that was just processed', function () {\n        return this.RedisManager.deleteAppliedDocUpdates.calledWith(this.project_id, this.doc_id, this.updates).should.equal(true);\n      });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback","suites":["UpdatesManager","processUncompressedUpdates","when there is fewer than one batch to send"],"updatePoint":{"line":286,"column":41,"index":13036},"line":286,"code":"      return it('should call the callback', function () {\n        return this.callback.called.should.equal(true);\n      });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should get the oldest updates in three batches ","suites":["UpdatesManager","processUncompressedUpdates","when there are multiple batches to send"],"updatePoint":{"line":313,"column":57,"index":14326},"line":313,"code":"      it('should get the oldest updates in three batches ', function () {\n        return this.RedisManager.getOldestDocUpdates.callCount.should.equal(3);\n      });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should compress and save the updates in batches","suites":["UpdatesManager","processUncompressedUpdates","when there are multiple batches to send"],"updatePoint":{"line":316,"column":57,"index":14490},"line":316,"code":"      it('should compress and save the updates in batches', function () {\n        this.UpdatesManager.compressAndSaveRawUpdates.calledWith(this.project_id, this.doc_id, this.updates.slice(0, 2), this.temporary).should.equal(true);\n        this.UpdatesManager.compressAndSaveRawUpdates.calledWith(this.project_id, this.doc_id, this.updates.slice(2, 4), this.temporary).should.equal(true);\n        return this.UpdatesManager.compressAndSaveRawUpdates.calledWith(this.project_id, this.doc_id, this.updates.slice(4, 5), this.temporary).should.equal(true);\n      });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should delete the batches of uncompressed updates","suites":["UpdatesManager","processUncompressedUpdates","when there are multiple batches to send"],"updatePoint":{"line":321,"column":59,"index":15054},"line":321,"code":"      it('should delete the batches of uncompressed updates', function () {\n        return this.RedisManager.deleteAppliedDocUpdates.callCount.should.equal(3);\n      });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback","suites":["UpdatesManager","processUncompressedUpdates","when there are multiple batches to send"],"updatePoint":{"line":324,"column":41,"index":15206},"line":324,"code":"      return it('should call the callback', function () {\n        return this.callback.called.should.equal(true);\n      });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should check if the updates are temporary","suites":["UpdatesManager","processCompressedUpdatesWithLock"],"updatePoint":{"line":337,"column":49,"index":15890},"line":337,"code":"    it('should check if the updates are temporary', function () {\n      return this.UpdateTrimmer.shouldTrimUpdates.calledWith(this.project_id).should.equal(true);\n    });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should backport the project id","suites":["UpdatesManager","processCompressedUpdatesWithLock"],"updatePoint":{"line":340,"column":38,"index":16051},"line":340,"code":"    it('should backport the project id', function () {\n      return this.MongoManager.backportProjectId.calledWith(this.project_id, this.doc_id).should.equal(true);\n    });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should run processUncompressedUpdates with the lock","suites":["UpdatesManager","processCompressedUpdatesWithLock"],"updatePoint":{"line":343,"column":59,"index":16245},"line":343,"code":"    it('should run processUncompressedUpdates with the lock', function () {\n      return this.LockManager.runWithLock.calledWith(`HistoryLock:${this.doc_id}`).should.equal(true);\n    });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback","suites":["UpdatesManager","processCompressedUpdatesWithLock"],"updatePoint":{"line":346,"column":39,"index":16412},"line":346,"code":"    return it('should call the callback', function () {\n      return this.callback.called.should.equal(true);\n    });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should process outstanding updates","suites":["UpdatesManager","getDocUpdates"],"updatePoint":{"line":361,"column":42,"index":17032},"line":361,"code":"    it('should process outstanding updates', function () {\n      return this.UpdatesManager.processUncompressedUpdatesWithLock.calledWith(this.project_id, this.doc_id).should.equal(true);\n    });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should get the updates from the database","suites":["UpdatesManager","getDocUpdates"],"updatePoint":{"line":364,"column":48,"index":17234},"line":364,"code":"    it('should get the updates from the database', function () {\n      return this.PackManager.getOpsByVersionRange.calledWith(this.project_id, this.doc_id, this.options.from, this.options.to).should.equal(true);\n    });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should return the updates","suites":["UpdatesManager","getDocUpdates"],"updatePoint":{"line":367,"column":40,"index":17447},"line":367,"code":"    return it('should return the updates', function () {\n      return this.callback.calledWith(null, this.updates).should.equal(true);\n    });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should get the updates","suites":["UpdatesManager","getDocUpdatesWithUserInfo"],"updatePoint":{"line":383,"column":30,"index":18174},"line":383,"code":"    it('should get the updates', function () {\n      return this.UpdatesManager.getDocUpdates.calledWith(this.project_id, this.doc_id, this.options).should.equal(true);\n    });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should file the updates with the user info","suites":["UpdatesManager","getDocUpdatesWithUserInfo"],"updatePoint":{"line":386,"column":50,"index":18371},"line":386,"code":"    it('should file the updates with the user info', function () {\n      return this.UpdatesManager.fillUserInfo.calledWith(this.updates).should.equal(true);\n    });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should return the updates with the filled details","suites":["UpdatesManager","getDocUpdatesWithUserInfo"],"updatePoint":{"line":389,"column":64,"index":18551},"line":389,"code":"    return it('should return the updates with the filled details', function () {\n      return this.callback.calledWith(null, this.updatesWithUserInfo).should.equal(true);\n    });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should get all the docs with history ops","suites":["UpdatesManager","processUncompressedUpdatesForProject"],"updatePoint":{"line":405,"column":48,"index":19405},"line":405,"code":"    it('should get all the docs with history ops', function () {\n      return this.RedisManager.getDocIdsWithHistoryOps.calledWith(this.project_id).should.equal(true);\n    });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should process the doc ops for the each doc_id","suites":["UpdatesManager","processUncompressedUpdatesForProject"],"updatePoint":{"line":408,"column":54,"index":19587},"line":408,"code":"    it('should process the doc ops for the each doc_id', function () {\n      return Array.from(this.doc_ids).map(docId => this.UpdatesManager._processUncompressedUpdatesForDocWithLock.calledWith(this.project_id, docId, this.temporary).should.equal(true));\n    });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback","suites":["UpdatesManager","processUncompressedUpdatesForProject"],"updatePoint":{"line":411,"column":39,"index":19836},"line":411,"code":"    return it('should call the callback', function () {\n      return this.callback.called.should.equal(true);\n    });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should process any outstanding updates","suites":["UpdatesManager","getSummarizedProjectUpdates"],"updatePoint":{"line":460,"column":46,"index":21303},"line":460,"code":"    it('should process any outstanding updates', function () {\n      return this.UpdatesManager.processUncompressedUpdatesForProject.calledWith(this.project_id).should.equal(true);\n    });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should get the updates","suites":["UpdatesManager","getSummarizedProjectUpdates"],"updatePoint":{"line":463,"column":30,"index":21476},"line":463,"code":"    it('should get the updates', function () {\n      return this.PackManager.makeProjectIterator.calledWith(this.project_id, this.options.before).should.equal(true);\n    });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should fill the updates with the user info","suites":["UpdatesManager","getSummarizedProjectUpdates"],"updatePoint":{"line":466,"column":50,"index":21670},"line":466,"code":"    it('should fill the updates with the user info', function () {\n      return this.UpdatesManager.fillSummarizedUserInfo.calledWith(this.summarizedUpdates).should.equal(true);\n    });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should return the updates with the filled details","suites":["UpdatesManager","getSummarizedProjectUpdates"],"updatePoint":{"line":469,"column":64,"index":21870},"line":469,"code":"    return it('should return the updates with the filled details', function () {\n      return this.callback.calledWith(null, this.updatesWithUserInfo).should.equal(true);\n    });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should only call getUserInfo once for each user_id","suites":["UpdatesManager","fillUserInfo","with valid users"],"updatePoint":{"line":620,"column":60,"index":28626},"line":620,"code":"      it('should only call getUserInfo once for each user_id', function () {\n        this.WebApiManager.getUserInfo.calledTwice.should.equal(true);\n        this.WebApiManager.getUserInfo.calledWith(this.user_id_1).should.equal(true);\n        return this.WebApiManager.getUserInfo.calledWith(this.user_id_2).should.equal(true);\n      });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should return the updates with the user info filled","suites":["UpdatesManager","fillUserInfo","with valid users"],"updatePoint":{"line":625,"column":68,"index":28971},"line":625,"code":"      return it('should return the updates with the user info filled', function () {\n        return expect(this.results).to.deep.equal([{\n          meta: {\n            user: {\n              email: 'user1@sharelatex.com'\n            }\n          },\n          op: 'mock-op-1'\n        }, {\n          meta: {\n            user: {\n              email: 'user1@sharelatex.com'\n            }\n          },\n          op: 'mock-op-2'\n        }, {\n          meta: {\n            user: {\n              email: 'user2@sharelatex.com'\n            }\n          },\n          op: 'mock-op-3'\n        }]);\n      });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should not call getUserInfo","suites":["UpdatesManager","fillUserInfo","with invalid user ids"],"updatePoint":{"line":676,"column":37,"index":30341},"line":676,"code":"      it('should not call getUserInfo', function () {\n        return this.WebApiManager.getUserInfo.called.should.equal(false);\n      });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should return the updates without the user info filled","suites":["UpdatesManager","fillUserInfo","with invalid user ids"],"updatePoint":{"line":679,"column":71,"index":30513},"line":679,"code":"      return it('should return the updates without the user info filled', function () {\n        return expect(this.results).to.deep.equal([{\n          meta: {},\n          op: 'mock-op-1'\n        }, {\n          meta: {},\n          op: 'mock-op-2'\n        }]);\n      });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should concat updates that are close in time","suites":["UpdatesManager","_summarizeUpdates"],"updatePoint":{"line":700,"column":52,"index":31017},"line":700,"code":"    it('should concat updates that are close in time', function () {\n      const result = this.UpdatesManager._summarizeUpdates([{\n        doc_id: 'doc-id-1',\n        meta: {\n          user_id: this.user_1.id,\n          start_ts: this.now + 20,\n          end_ts: this.now + 30\n        },\n        v: 5\n      }, {\n        doc_id: 'doc-id-1',\n        meta: {\n          user_id: this.user_2.id,\n          start_ts: this.now,\n          end_ts: this.now + 10\n        },\n        v: 4\n      }]);\n      return expect(result).to.deep.equal([{\n        docs: {\n          'doc-id-1': {\n            fromV: 4,\n            toV: 5\n          }\n        },\n        meta: {\n          user_ids: [this.user_1.id, this.user_2.id],\n          start_ts: this.now,\n          end_ts: this.now + 30\n        }\n      }]);\n    });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should leave updates that are far apart in time","suites":["UpdatesManager","_summarizeUpdates"],"updatePoint":{"line":732,"column":55,"index":31818},"line":732,"code":"    it('should leave updates that are far apart in time', function () {\n      const oneDay = 1000 * 60 * 60 * 24;\n      const result = this.UpdatesManager._summarizeUpdates([{\n        doc_id: 'doc-id-1',\n        meta: {\n          user_id: this.user_2.id,\n          start_ts: this.now + oneDay,\n          end_ts: this.now + oneDay + 10\n        },\n        v: 5\n      }, {\n        doc_id: 'doc-id-1',\n        meta: {\n          user_id: this.user_1.id,\n          start_ts: this.now,\n          end_ts: this.now + 10\n        },\n        v: 4\n      }]);\n      return expect(result).to.deep.equal([{\n        docs: {\n          'doc-id-1': {\n            fromV: 5,\n            toV: 5\n          }\n        },\n        meta: {\n          user_ids: [this.user_2.id],\n          start_ts: this.now + oneDay,\n          end_ts: this.now + oneDay + 10\n        }\n      }, {\n        docs: {\n          'doc-id-1': {\n            fromV: 4,\n            toV: 4\n          }\n        },\n        meta: {\n          user_ids: [this.user_1.id],\n          start_ts: this.now,\n          end_ts: this.now + 10\n        }\n      }]);\n    });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should concat onto existing summarized updates","suites":["UpdatesManager","_summarizeUpdates"],"updatePoint":{"line":777,"column":54,"index":32916},"line":777,"code":"    it('should concat onto existing summarized updates', function () {\n      const result = this.UpdatesManager._summarizeUpdates([{\n        doc_id: 'doc-id-2',\n        meta: {\n          user_id: this.user_1.id,\n          start_ts: this.now + 20,\n          end_ts: this.now + 30\n        },\n        v: 5\n      }, {\n        doc_id: 'doc-id-2',\n        meta: {\n          user_id: this.user_2.id,\n          start_ts: this.now,\n          end_ts: this.now + 10\n        },\n        v: 4\n      }], [{\n        docs: {\n          'doc-id-1': {\n            fromV: 6,\n            toV: 8\n          }\n        },\n        meta: {\n          user_ids: [this.user_1.id],\n          start_ts: this.now + 40,\n          end_ts: this.now + 50\n        }\n      }]);\n      return expect(result).to.deep.equal([{\n        docs: {\n          'doc-id-1': {\n            toV: 8,\n            fromV: 6\n          },\n          'doc-id-2': {\n            toV: 5,\n            fromV: 4\n          }\n        },\n        meta: {\n          user_ids: [this.user_1.id, this.user_2.id],\n          start_ts: this.now,\n          end_ts: this.now + 50\n        }\n      }]);\n    });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should include null user values","suites":["UpdatesManager","_summarizeUpdates"],"updatePoint":{"line":825,"column":39,"index":34027},"line":825,"code":"    it('should include null user values', function () {\n      const result = this.UpdatesManager._summarizeUpdates([{\n        doc_id: 'doc-id-1',\n        meta: {\n          user_id: this.user_1.id,\n          start_ts: this.now + 20,\n          end_ts: this.now + 30\n        },\n        v: 5\n      }, {\n        doc_id: 'doc-id-1',\n        meta: {\n          user_id: null,\n          start_ts: this.now,\n          end_ts: this.now + 10\n        },\n        v: 4\n      }]);\n      return expect(result).to.deep.equal([{\n        docs: {\n          'doc-id-1': {\n            fromV: 4,\n            toV: 5\n          }\n        },\n        meta: {\n          user_ids: [this.user_1.id, null],\n          start_ts: this.now,\n          end_ts: this.now + 30\n        }\n      }]);\n    });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should include null user values, when the null is earlier in the updates list","suites":["UpdatesManager","_summarizeUpdates"],"updatePoint":{"line":857,"column":85,"index":34838},"line":857,"code":"    it('should include null user values, when the null is earlier in the updates list', function () {\n      const result = this.UpdatesManager._summarizeUpdates([{\n        doc_id: 'doc-id-1',\n        meta: {\n          user_id: null,\n          start_ts: this.now,\n          end_ts: this.now + 10\n        },\n        v: 4\n      }, {\n        doc_id: 'doc-id-1',\n        meta: {\n          user_id: this.user_1.id,\n          start_ts: this.now + 20,\n          end_ts: this.now + 30\n        },\n        v: 5\n      }]);\n      return expect(result).to.deep.equal([{\n        docs: {\n          'doc-id-1': {\n            fromV: 4,\n            toV: 5\n          }\n        },\n        meta: {\n          user_ids: [null, this.user_1.id],\n          start_ts: this.now,\n          end_ts: this.now + 30\n        }\n      }]);\n    });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should roll several null user values into one","suites":["UpdatesManager","_summarizeUpdates"],"updatePoint":{"line":889,"column":53,"index":35617},"line":889,"code":"    it('should roll several null user values into one', function () {\n      const result = this.UpdatesManager._summarizeUpdates([{\n        doc_id: 'doc-id-1',\n        meta: {\n          user_id: this.user_1.id,\n          start_ts: this.now + 20,\n          end_ts: this.now + 30\n        },\n        v: 5\n      }, {\n        doc_id: 'doc-id-1',\n        meta: {\n          user_id: null,\n          start_ts: this.now,\n          end_ts: this.now + 10\n        },\n        v: 4\n      }, {\n        doc_id: 'doc-id-1',\n        meta: {\n          user_id: null,\n          start_ts: this.now + 2,\n          end_ts: this.now + 4\n        },\n        v: 4\n      }]);\n      return expect(result).to.deep.equal([{\n        docs: {\n          'doc-id-1': {\n            fromV: 4,\n            toV: 5\n          }\n        },\n        meta: {\n          user_ids: [this.user_1.id, null],\n          start_ts: this.now,\n          end_ts: this.now + 30\n        }\n      }]);\n    });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should split updates before a big delete","suites":["UpdatesManager","_summarizeUpdates"],"updatePoint":{"line":929,"column":55,"index":36567},"line":929,"code":"    return it('should split updates before a big delete', function () {\n      const result = this.UpdatesManager._summarizeUpdates([{\n        doc_id: 'doc-id-1',\n        op: [{\n          d: 'this is a long long long long long delete',\n          p: 34\n        }],\n        meta: {\n          user_id: this.user_1.id,\n          start_ts: this.now + 20,\n          end_ts: this.now + 30\n        },\n        v: 5\n      }, {\n        doc_id: 'doc-id-1',\n        meta: {\n          user_id: this.user_2.id,\n          start_ts: this.now,\n          end_ts: this.now + 10\n        },\n        v: 4\n      }]);\n      return expect(result).to.deep.equal([{\n        docs: {\n          'doc-id-1': {\n            fromV: 5,\n            toV: 5\n          }\n        },\n        meta: {\n          user_ids: [this.user_1.id],\n          start_ts: this.now + 20,\n          end_ts: this.now + 30\n        }\n      }, {\n        docs: {\n          'doc-id-1': {\n            fromV: 4,\n            toV: 4\n          }\n        },\n        meta: {\n          user_ids: [this.user_2.id],\n          start_ts: this.now,\n          end_ts: this.now + 10\n        }\n      }]);\n    });","file":"unit/js/UpdatesManager/UpdatesManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should look up the meta data","suites":["UpdateTrimmer","shouldTrimUpdates","with preserveHistory set in the project meta data"],"updatePoint":{"line":51,"column":38,"index":1836},"line":51,"code":"      it('should look up the meta data', function () {\n        return this.MongoManager.getProjectMetaData.calledWith(this.project_id).should.equal(true);\n      });","file":"unit/js/UpdateTrimmer/UpdateTrimmerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should not look up the project details","suites":["UpdateTrimmer","shouldTrimUpdates","with preserveHistory set in the project meta data"],"updatePoint":{"line":54,"column":48,"index":2011},"line":54,"code":"      it('should not look up the project details', function () {\n        return this.WebApiManager.getProjectDetails.called.should.equal(false);\n      });","file":"unit/js/UpdateTrimmer/UpdateTrimmerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should return false","suites":["UpdateTrimmer","shouldTrimUpdates","with preserveHistory set in the project meta data"],"updatePoint":{"line":57,"column":36,"index":2154},"line":57,"code":"      return it('should return false', function () {\n        return this.callback.calledWith(null, false).should.equal(true);\n      });","file":"unit/js/UpdateTrimmer/UpdateTrimmerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should look up the meta data","suites":["UpdateTrimmer","shouldTrimUpdates","without preserveHistory set in the project meta data","when the project has the versioning feature"],"updatePoint":{"line":70,"column":40,"index":2739},"line":70,"code":"        it('should look up the meta data', function () {\n          return this.MongoManager.getProjectMetaData.calledWith(this.project_id).should.equal(true);\n        });","file":"unit/js/UpdateTrimmer/UpdateTrimmerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should look up the project details","suites":["UpdateTrimmer","shouldTrimUpdates","without preserveHistory set in the project meta data","when the project has the versioning feature"],"updatePoint":{"line":73,"column":46,"index":2916},"line":73,"code":"        it('should look up the project details', function () {\n          return this.WebApiManager.getProjectDetails.calledWith(this.project_id).should.equal(true);\n        });","file":"unit/js/UpdateTrimmer/UpdateTrimmerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should insert preserveHistory into the metadata","suites":["UpdateTrimmer","shouldTrimUpdates","without preserveHistory set in the project meta data","when the project has the versioning feature"],"updatePoint":{"line":76,"column":59,"index":3106},"line":76,"code":"        it('should insert preserveHistory into the metadata', function () {\n          return this.MongoManager.setProjectMetaData.calledWith(this.project_id, {\n            preserveHistory: true\n          }).should.equal(true);\n        });","file":"unit/js/UpdateTrimmer/UpdateTrimmerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should upgrade any existing history","suites":["UpdateTrimmer","shouldTrimUpdates","without preserveHistory set in the project meta data","when the project has the versioning feature"],"updatePoint":{"line":81,"column":47,"index":3333},"line":81,"code":"        it('should upgrade any existing history', function () {\n          return this.MongoManager.upgradeHistory.calledWith(this.project_id).should.equal(true);\n        });","file":"unit/js/UpdateTrimmer/UpdateTrimmerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should return false","suites":["UpdateTrimmer","shouldTrimUpdates","without preserveHistory set in the project meta data","when the project has the versioning feature"],"updatePoint":{"line":84,"column":38,"index":3498},"line":84,"code":"        return it('should return false', function () {\n          return this.callback.calledWith(null, false).should.equal(true);\n        });","file":"unit/js/UpdateTrimmer/UpdateTrimmerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should return true","suites":["UpdateTrimmer","shouldTrimUpdates","without preserveHistory set in the project meta data","when the project does not have the versioning feature"],"updatePoint":{"line":93,"column":37,"index":3926},"line":93,"code":"        return it('should return true', function () {\n          return this.callback.calledWith(null, true).should.equal(true);\n        });","file":"unit/js/UpdateTrimmer/UpdateTrimmerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should insert preserveHistory into the metadata","suites":["UpdateTrimmer","shouldTrimUpdates","without any meta data","when the project has the versioning feature"],"updatePoint":{"line":107,"column":59,"index":4561},"line":107,"code":"        it('should insert preserveHistory into the metadata', function () {\n          return this.MongoManager.setProjectMetaData.calledWith(this.project_id, {\n            preserveHistory: true\n          }).should.equal(true);\n        });","file":"unit/js/UpdateTrimmer/UpdateTrimmerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should upgrade any existing history","suites":["UpdateTrimmer","shouldTrimUpdates","without any meta data","when the project has the versioning feature"],"updatePoint":{"line":112,"column":47,"index":4788},"line":112,"code":"        it('should upgrade any existing history', function () {\n          return this.MongoManager.upgradeHistory.calledWith(this.project_id).should.equal(true);\n        });","file":"unit/js/UpdateTrimmer/UpdateTrimmerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should return false","suites":["UpdateTrimmer","shouldTrimUpdates","without any meta data","when the project has the versioning feature"],"updatePoint":{"line":115,"column":38,"index":4953},"line":115,"code":"        return it('should return false', function () {\n          return this.callback.calledWith(null, false).should.equal(true);\n        });","file":"unit/js/UpdateTrimmer/UpdateTrimmerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should return true","suites":["UpdateTrimmer","shouldTrimUpdates","without any meta data","when the project does not have the versioning feature"],"updatePoint":{"line":124,"column":37,"index":5381},"line":124,"code":"        return it('should return true', function () {\n          return this.callback.calledWith(null, true).should.equal(true);\n        });","file":"unit/js/UpdateTrimmer/UpdateTrimmerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"returns `false` when any of the packs is undefined","suites":["PackUtils","packsAreDuplicated()"],"updatePoint":{"line":29,"column":58,"index":679},"line":29,"code":"    it('returns `false` when any of the packs is undefined', function () {\n      const pack = {\n        ...examplePack,\n        _id: objectId1\n      };\n      expect(packsAreDuplicated(pack, undefined)).to.be.false;\n      expect(packsAreDuplicated(undefined, pack)).to.be.false;\n      expect(packsAreDuplicated(undefined, undefined)).to.be.false;\n    });","file":"unit/js/Util/PackUtilsTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"returns `true` for identical packs with same `_id`","suites":["PackUtils","packsAreDuplicated()"],"updatePoint":{"line":38,"column":58,"index":1033},"line":38,"code":"    it('returns `true` for identical packs with same `_id`', function () {\n      const pack1 = {\n        ...examplePack,\n        _id: objectId1\n      };\n      const pack2 = {\n        ...examplePack,\n        _id: objectId1\n      };\n      expect(packsAreDuplicated(pack1, pack2)).to.be.true;\n    });","file":"unit/js/Util/PackUtilsTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"returns `true` for identical packs with different `_id`","suites":["PackUtils","packsAreDuplicated()"],"updatePoint":{"line":49,"column":63,"index":1336},"line":49,"code":"    it('returns `true` for identical packs with different `_id`', function () {\n      const pack1 = {\n        ...examplePack,\n        _id: objectId1\n      };\n      const pack2 = {\n        ...examplePack,\n        _id: objectId2\n      };\n      expect(packsAreDuplicated(pack1, pack2)).to.be.true;\n    });","file":"unit/js/Util/PackUtilsTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"returns `false` for packs with different anidated properties","suites":["PackUtils","packsAreDuplicated()"],"updatePoint":{"line":60,"column":68,"index":1644},"line":60,"code":"    it('returns `false` for packs with different anidated properties', function () {\n      const pack1 = {\n        ...examplePack,\n        _id: objectId1\n      };\n      const pack2 = {\n        ...examplePack,\n        _id: 1\n      };\n      pack2.op = [...pack2.op, {\n        p: 2800,\n        i: 'char'\n      }];\n      expect(packsAreDuplicated(pack1, pack2)).to.be.false;\n    });","file":"unit/js/Util/PackUtilsTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should get the user from the web api","suites":["WebApiManager","getUserInfo","successfully"],"updatePoint":{"line":57,"column":46,"index":1730},"line":57,"code":"      it('should get the user from the web api', function () {\n        return this.request.get.calledWithMatch({\n          url: `${this.settings.apis.web.url}/user/${this.user_id}/personal_info`,\n          auth: {\n            user: this.settings.apis.web.user,\n            pass: this.settings.apis.web.pass,\n            sendImmediately: true\n          }\n        }).should.equal(true);\n      });","file":"unit/js/WebApiManager/WebApiManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback with only the email, id and names","suites":["WebApiManager","getUserInfo","successfully"],"updatePoint":{"line":67,"column":75,"index":2154},"line":67,"code":"      return it('should call the callback with only the email, id and names', function () {\n        return this.callback.calledWith(null, {\n          id: this.user_id,\n          email: this.user_info.email,\n          first_name: this.user_info.first_name,\n          last_name: this.user_info.last_name\n        }).should.equal(true);\n      });","file":"unit/js/WebApiManager/WebApiManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should return an error to the callback","suites":["WebApiManager","getUserInfo","when the web API returns an error"],"updatePoint":{"line":81,"column":55,"index":2783},"line":81,"code":"      return it('should return an error to the callback', function () {\n        return this.callback.calledWith(this.error).should.equal(true);\n      });","file":"unit/js/WebApiManager/WebApiManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should return the callback with an error","suites":["WebApiManager","getUserInfo","when the web returns a failure error code"],"updatePoint":{"line":93,"column":57,"index":3266},"line":93,"code":"      return it('should return the callback with an error', function () {\n        return this.callback.calledWith(sinon.match.has('message', 'web returned a non-success status code: 500 (attempts: 42)')).should.equal(true);\n      });","file":"unit/js/WebApiManager/WebApiManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should return a null value","suites":["WebApiManager","getUserInfo","when the user cannot be found"],"updatePoint":{"line":104,"column":43,"index":3791},"line":104,"code":"      return it('should return a null value', function () {\n        return this.callback.calledWith(null, null).should.equal(true);\n      });","file":"unit/js/WebApiManager/WebApiManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should get the project from the web api","suites":["WebApiManager","getProjectDetails","successfully"],"updatePoint":{"line":118,"column":49,"index":4338},"line":118,"code":"      it('should get the project from the web api', function () {\n        return this.request.get.calledWithMatch({\n          url: `${this.settings.apis.web.url}/project/${this.project_id}/details`,\n          auth: {\n            user: this.settings.apis.web.user,\n            pass: this.settings.apis.web.pass,\n            sendImmediately: true\n          }\n        }).should.equal(true);\n      });","file":"unit/js/WebApiManager/WebApiManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should call the callback with the project","suites":["WebApiManager","getProjectDetails","successfully"],"updatePoint":{"line":128,"column":58,"index":4745},"line":128,"code":"      return it('should call the callback with the project', function () {\n        return this.callback.calledWith(null, this.project).should.equal(true);\n      });","file":"unit/js/WebApiManager/WebApiManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should return an error to the callback","suites":["WebApiManager","getProjectDetails","when the web API returns an error"],"updatePoint":{"line":137,"column":55,"index":5222},"line":137,"code":"      return it('should return an error to the callback', function () {\n        return this.callback.calledWith(this.error).should.equal(true);\n      });","file":"unit/js/WebApiManager/WebApiManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"should return the callback with an error","suites":["WebApiManager","getProjectDetails","when the web returns a failure error code"],"updatePoint":{"line":149,"column":57,"index":5721},"line":149,"code":"      return it('should return the callback with an error', function () {\n        return this.callback.calledWith(sinon.match.has('message', 'web returned a non-success status code: 500 (attempts: 42)')).should.equal(true);\n      });","file":"unit/js/WebApiManager/WebApiManagerTests.js","skipped":false,"dir":"services/track-changes/test"},{"name":"renders multiple messages","suites":["<ChatPane />"],"updatePoint":{"line":46,"column":31,"index":1390},"line":46,"code":"  it('renders multiple messages', async function () {\n    fetchMock.get(/messages/, testMessages);\n    renderWithChatContext( /*#__PURE__*/React.createElement(ChatPane, null), {\n      user\n    });\n    await screen.findByText('a message');\n    await screen.findByText('another message');\n  });","file":"frontend/features/chat/components/chat-pane.test.js","skipped":false,"dir":"services/web/test"},{"name":"provides error message with reload button on FetchError","suites":["<ChatPane />"],"updatePoint":{"line":54,"column":61,"index":1713},"line":54,"code":"  it('provides error message with reload button on FetchError', async function () {\n    fetchMock.get(/messages/, 500);\n    renderWithChatContext( /*#__PURE__*/React.createElement(ChatPane, null), {\n      user\n    });\n\n    // should have hit a FetchError and will prompt user to reconnect\n    await screen.findByText('Try again');\n\n    // bring chat back up\n    fetchMock.reset();\n    fetchMock.get(/messages/, []);\n    const reconnectButton = screen.getByRole('button', {\n      name: 'Try again'\n    });\n    expect(reconnectButton).to.exist;\n\n    // should now reconnect with placeholder message\n    fireEvent.click(reconnectButton);\n    await screen.findByText('Send your first message to your collaborators');\n  });","file":"frontend/features/chat/components/chat-pane.test.js","skipped":false,"dir":"services/web/test"},{"name":"a loading spinner is rendered while the messages are loading, then disappears","suites":["<ChatPane />"],"updatePoint":{"line":75,"column":83,"index":2454},"line":75,"code":"  it('a loading spinner is rendered while the messages are loading, then disappears', async function () {\n    fetchMock.get(/messages/, [], {\n      delay: 1000\n    });\n    renderWithChatContext( /*#__PURE__*/React.createElement(ChatPane, null), {\n      user\n    });\n    this.clock.tick(600); // wait for spinner to be displayed\n\n    await screen.findByText('Loading…');\n    this.clock.tick(1000); // wait for response to be received\n\n    await waitForElementToBeRemoved(() => screen.getByText('Loading…'));\n  });","file":"frontend/features/chat/components/chat-pane.test.js","skipped":false,"dir":"services/web/test"},{"name":"is rendered when there are no messages ","suites":["<ChatPane />","\"send your first message\" placeholder"],"updatePoint":{"line":90,"column":47,"index":2997},"line":90,"code":"    it('is rendered when there are no messages ', async function () {\n      fetchMock.get(/messages/, []);\n      renderWithChatContext( /*#__PURE__*/React.createElement(ChatPane, null), {\n        user\n      });\n      await screen.findByText('Send your first message to your collaborators');\n    });","file":"frontend/features/chat/components/chat-pane.test.js","skipped":false,"dir":"services/web/test"},{"name":"is not rendered when messages are displayed","suites":["<ChatPane />","\"send your first message\" placeholder"],"updatePoint":{"line":97,"column":51,"index":3300},"line":97,"code":"    it('is not rendered when messages are displayed', function () {\n      fetchMock.get(/messages/, testMessages);\n      renderWithChatContext( /*#__PURE__*/React.createElement(ChatPane, null), {\n        user\n      });\n      expect(screen.queryByText('Send your first message to your collaborators')).to.not.exist;\n    });","file":"frontend/features/chat/components/chat-pane.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders successfully","suites":["<MessageInput />"],"updatePoint":{"line":11,"column":26,"index":435},"line":11,"code":"  it('renders successfully', function () {\n    render( /*#__PURE__*/React.createElement(MessageInput, {\n      sendMessage: sendMessage,\n      resetUnreadMessages: resetUnreadMessages\n    }));\n    screen.getByLabelText('Send a message to your collaborators');\n  });","file":"frontend/features/chat/components/message-input.test.js","skipped":false,"dir":"services/web/test"},{"name":"sends a message after typing and hitting enter","suites":["<MessageInput />"],"updatePoint":{"line":18,"column":52,"index":726},"line":18,"code":"  it('sends a message after typing and hitting enter', function () {\n    render( /*#__PURE__*/React.createElement(MessageInput, {\n      sendMessage: sendMessage,\n      resetUnreadMessages: resetUnreadMessages\n    }));\n    const input = screen.getByRole('textbox');\n    fireEvent.change(input, {\n      target: {\n        value: 'hello world'\n      }\n    });\n    fireEvent.keyDown(input, {\n      key: 'Enter'\n    });\n    expect(sendMessage).to.be.calledOnce;\n    expect(sendMessage).to.be.calledWith('hello world');\n  });","file":"frontend/features/chat/components/message-input.test.js","skipped":false,"dir":"services/web/test"},{"name":"resets the number of unread messages after clicking on the input","suites":["<MessageInput />"],"updatePoint":{"line":35,"column":70,"index":1263},"line":35,"code":"  it('resets the number of unread messages after clicking on the input', function () {\n    render( /*#__PURE__*/React.createElement(MessageInput, {\n      sendMessage: sendMessage,\n      resetUnreadMessages: resetUnreadMessages\n    }));\n    const input = screen.getByPlaceholderText('Send a message to your collaborators…');\n    fireEvent.click(input);\n    expect(resetUnreadMessages).to.be.calledOnce;\n  });","file":"frontend/features/chat/components/message-input.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders multiple messages","suites":["<MessageList />"],"updatePoint":{"line":31,"column":31,"index":866},"line":31,"code":"  it('renders multiple messages', function () {\n    render( /*#__PURE__*/React.createElement(MessageList, {\n      userId: currentUser.id,\n      messages: createMessages(),\n      resetUnreadMessages: () => {}\n    }));\n    screen.getByText('a message');\n    screen.getByText('another message');\n  });","file":"frontend/features/chat/components/message-list.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders a single timestamp for all messages within 5 minutes","suites":["<MessageList />"],"updatePoint":{"line":40,"column":66,"index":1200},"line":40,"code":"  it('renders a single timestamp for all messages within 5 minutes', function () {\n    const msgs = createMessages();\n    msgs[0].timestamp = new Date(2019, 6, 3, 4, 23).getTime();\n    msgs[1].timestamp = new Date(2019, 6, 3, 4, 27).getTime();\n    render( /*#__PURE__*/React.createElement(MessageList, {\n      userId: currentUser.id,\n      messages: msgs,\n      resetUnreadMessages: () => {}\n    }));\n    screen.getByText('4:23 am Wed, 3rd Jul 19');\n    expect(screen.queryByText('4:27 am Wed, 3rd Jul 19')).to.not.exist;\n  });","file":"frontend/features/chat/components/message-list.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders a timestamp for each messages separated for more than 5 minutes","suites":["<MessageList />"],"updatePoint":{"line":52,"column":77,"index":1739},"line":52,"code":"  it('renders a timestamp for each messages separated for more than 5 minutes', function () {\n    const msgs = createMessages();\n    msgs[0].timestamp = new Date(2019, 6, 3, 4, 23).getTime();\n    msgs[1].timestamp = new Date(2019, 6, 3, 4, 31).getTime();\n    render( /*#__PURE__*/React.createElement(MessageList, {\n      userId: currentUser.id,\n      messages: msgs,\n      resetUnreadMessages: () => {}\n    }));\n    screen.getByText('4:23 am Wed, 3rd Jul 19');\n    screen.getByText('4:31 am Wed, 3rd Jul 19');\n  });","file":"frontend/features/chat/components/message-list.test.js","skipped":false,"dir":"services/web/test"},{"name":"resets the number of unread messages after clicking on the input","suites":["<MessageList />"],"updatePoint":{"line":64,"column":70,"index":2248},"line":64,"code":"  it('resets the number of unread messages after clicking on the input', function () {\n    const resetUnreadMessages = sinon.stub();\n    render( /*#__PURE__*/React.createElement(MessageList, {\n      userId: currentUser.id,\n      messages: createMessages(),\n      resetUnreadMessages: resetUnreadMessages\n    }));\n    fireEvent.click(screen.getByRole('list'));\n    expect(resetUnreadMessages).to.be.calledOnce;\n  });","file":"frontend/features/chat/components/message-list.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders a basic message","suites":["<Message />"],"updatePoint":{"line":19,"column":29,"index":587},"line":19,"code":"  it('renders a basic message', function () {\n    const message = {\n      contents: ['a message'],\n      user: currentUser\n    };\n    render( /*#__PURE__*/React.createElement(Message, {\n      userId: currentUser.id,\n      message: message\n    }));\n    screen.getByText('a message');\n  });","file":"frontend/features/chat/components/message.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders a message with multiple contents","suites":["<Message />"],"updatePoint":{"line":30,"column":46,"index":893},"line":30,"code":"  it('renders a message with multiple contents', function () {\n    const message = {\n      contents: ['a message', 'another message'],\n      user: currentUser\n    };\n    render( /*#__PURE__*/React.createElement(Message, {\n      userId: currentUser.id,\n      message: message\n    }));\n    screen.getByText('a message');\n    screen.getByText('another message');\n  });","file":"frontend/features/chat/components/message.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders HTML links within messages","suites":["<Message />"],"updatePoint":{"line":42,"column":40,"index":1253},"line":42,"code":"  it('renders HTML links within messages', function () {\n    const message = {\n      contents: ['a message with a <a href=\"https://overleaf.com\">link to Overleaf</a>'],\n      user: currentUser\n    };\n    render( /*#__PURE__*/React.createElement(Message, {\n      userId: currentUser.id,\n      message: message\n    }));\n    screen.getByRole('link', {\n      name: 'https://overleaf.com'\n    });\n  });","file":"frontend/features/chat/components/message.test.js","skipped":false,"dir":"services/web/test"},{"name":"does not render the user name nor the email","suites":["<Message />","when the message is from the user themselves"],"updatePoint":{"line":60,"column":51,"index":1819},"line":60,"code":"    it('does not render the user name nor the email', function () {\n      render( /*#__PURE__*/React.createElement(Message, {\n        userId: currentUser.id,\n        message: message\n      }));\n      expect(screen.queryByText(currentUser.first_name)).to.not.exist;\n      expect(screen.queryByText(currentUser.email)).to.not.exist;\n    });","file":"frontend/features/chat/components/message.test.js","skipped":false,"dir":"services/web/test"},{"name":"should render the other user name","suites":["<Message />","when the message is from other user"],"updatePoint":{"line":78,"column":41,"index":2397},"line":78,"code":"    it('should render the other user name', function () {\n      render( /*#__PURE__*/React.createElement(Message, {\n        userId: currentUser.id,\n        message: message\n      }));\n      screen.getByText(otherUser.first_name);\n    });","file":"frontend/features/chat/components/message.test.js","skipped":false,"dir":"services/web/test"},{"name":"should render the other user email when their name is not available","suites":["<Message />","when the message is from other user"],"updatePoint":{"line":85,"column":75,"index":2669},"line":85,"code":"    it('should render the other user email when their name is not available', function () {\n      const msg = {\n        contents: message.contents,\n        user: {\n          id: otherUser.id,\n          email: 'other@example.com'\n        }\n      };\n      render( /*#__PURE__*/React.createElement(Message, {\n        userId: currentUser.id,\n        message: msg\n      }));\n      expect(screen.queryByText(otherUser.first_name)).to.not.exist;\n      screen.getByText(msg.user.email);\n    });","file":"frontend/features/chat/components/message.test.js","skipped":false,"dir":"services/web/test"},{"name":"subscribes when mounted","suites":["ChatContext","socket connection"],"updatePoint":{"line":41,"column":31,"index":1498},"line":41,"code":"    it('subscribes when mounted', function () {\n      const socket = new EventEmitter();\n      renderChatContextHook({\n        socket\n      });\n\n      // Assert that there is 1 listener\n      expect(socket.rawListeners('new-chat-message').length).to.equal(1);\n    });","file":"frontend/features/chat/context/chat-context.test.js","skipped":false,"dir":"services/web/test"},{"name":"unsubscribes when unmounted","suites":["ChatContext","socket connection"],"updatePoint":{"line":50,"column":35,"index":1770},"line":50,"code":"    it('unsubscribes when unmounted', function () {\n      const socket = new EventEmitter();\n      const {\n        unmount\n      } = renderChatContextHook({\n        socket\n      });\n      unmount();\n\n      // Assert that there is 0 listeners\n      expect(socket.rawListeners('new-chat-message').length).to.equal(0);\n    });","file":"frontend/features/chat/context/chat-context.test.js","skipped":false,"dir":"services/web/test"},{"name":"adds received messages to the list","suites":["ChatContext","socket connection"],"updatePoint":{"line":62,"column":42,"index":2101},"line":62,"code":"    it('adds received messages to the list', async function () {\n      // Mock socket: we only need to emit events, not mock actual connections\n      const socket = new EventEmitter();\n      const {\n        result,\n        waitForNextUpdate\n      } = renderChatContextHook({\n        socket\n      });\n\n      // Wait until initial messages have loaded\n      result.current.loadInitialMessages();\n      await waitForNextUpdate();\n\n      // No messages shown at first\n      expect(result.current.messages).to.deep.equal([]);\n\n      // Mock message being received from another user\n      socket.emit('new-chat-message', {\n        id: 'msg_1',\n        content: 'new message',\n        timestamp: Date.now(),\n        user: {\n          id: 'another_fake_user',\n          first_name: 'another_fake_user_first_name',\n          email: 'another_fake@example.com'\n        }\n      });\n      const message = result.current.messages[0];\n      expect(message.id).to.equal('msg_1');\n      expect(message.contents).to.deep.equal(['new message']);\n    });","file":"frontend/features/chat/context/chat-context.test.js","skipped":false,"dir":"services/web/test"},{"name":"doesn't add received messages from the current user if a message was just sent","suites":["ChatContext","socket connection"],"updatePoint":{"line":94,"column":86,"index":3180},"line":94,"code":"    it(\"doesn't add received messages from the current user if a message was just sent\", async function () {\n      const socket = new EventEmitter();\n      const {\n        result,\n        waitForNextUpdate\n      } = renderChatContextHook({\n        socket\n      });\n\n      // Wait until initial messages have loaded\n      result.current.loadInitialMessages();\n      await waitForNextUpdate();\n\n      // Send a message from the current user\n      const sentMsg = 'sent message';\n      result.current.sendMessage(sentMsg);\n      act(() => {\n        // Receive a message from the current user\n        socket.emit('new-chat-message', {\n          id: 'msg_1',\n          content: 'received message',\n          timestamp: Date.now(),\n          user,\n          clientId: uuidValue\n        });\n      });\n      expect(result.current.messages).to.have.length(1);\n      const [message] = result.current.messages;\n      expect(message.contents).to.deep.equal([sentMsg]);\n    });","file":"frontend/features/chat/context/chat-context.test.js","skipped":false,"dir":"services/web/test"},{"name":"adds the new message from the current user if another message was received after sending","suites":["ChatContext","socket connection"],"updatePoint":{"line":124,"column":96,"index":4155},"line":124,"code":"    it('adds the new message from the current user if another message was received after sending', async function () {\n      const socket = new EventEmitter();\n      const {\n        result,\n        waitForNextUpdate\n      } = renderChatContextHook({\n        socket\n      });\n\n      // Wait until initial messages have loaded\n      result.current.loadInitialMessages();\n      await waitForNextUpdate();\n\n      // Send a message from the current user\n      const sentMsg = 'sent message from current user';\n      result.current.sendMessage(sentMsg);\n      const [sentMessageFromCurrentUser] = result.current.messages;\n      expect(sentMessageFromCurrentUser.contents).to.deep.equal([sentMsg]);\n      const otherMsg = 'new message from other user';\n      act(() => {\n        // Receive a message from another user.\n        socket.emit('new-chat-message', {\n          id: 'msg_1',\n          content: otherMsg,\n          timestamp: Date.now(),\n          user: {\n            id: 'another_fake_user',\n            first_name: 'another_fake_user_first_name',\n            email: 'another_fake@example.com'\n          },\n          clientId: '123'\n        });\n      });\n      const [, messageFromOtherUser] = result.current.messages;\n      expect(messageFromOtherUser.contents).to.deep.equal([otherMsg]);\n      act(() => {\n        // Receive a message from the current user\n        socket.emit('new-chat-message', {\n          id: 'msg_2',\n          content: 'received message from current user',\n          timestamp: Date.now(),\n          user,\n          clientId: uuidValue\n        });\n      });\n\n      // Since the current user didn't just send a message, it is now shown\n      expect(result.current.messages).to.deep.equal([sentMessageFromCurrentUser, messageFromOtherUser]);\n    });","file":"frontend/features/chat/context/chat-context.test.js","skipped":false,"dir":"services/web/test"},{"name":"adds messages to the list","suites":["ChatContext","loadInitialMessages"],"updatePoint":{"line":183,"column":33,"index":6126},"line":183,"code":"    it('adds messages to the list', async function () {\n      const {\n        result,\n        waitForNextUpdate\n      } = renderChatContextHook({});\n      result.current.loadInitialMessages();\n      await waitForNextUpdate();\n      expect(result.current.messages[0].contents).to.deep.equal(['a message']);\n    });","file":"frontend/features/chat/context/chat-context.test.js","skipped":false,"dir":"services/web/test"},{"name":"won't load messages a second time","suites":["ChatContext","loadInitialMessages"],"updatePoint":{"line":192,"column":41,"index":6448},"line":192,"code":"    it(\"won't load messages a second time\", async function () {\n      const {\n        result,\n        waitForNextUpdate\n      } = renderChatContextHook({});\n      result.current.loadInitialMessages();\n      await waitForNextUpdate();\n      expect(result.current.initialMessagesLoaded).to.equal(true);\n\n      // Calling a second time won't do anything\n      result.current.loadInitialMessages();\n      expect(fetchMock.calls()).to.have.lengthOf(1);\n    });","file":"frontend/features/chat/context/chat-context.test.js","skipped":false,"dir":"services/web/test"},{"name":"provides an error on failure","suites":["ChatContext","loadInitialMessages"],"updatePoint":{"line":205,"column":36,"index":6899},"line":205,"code":"    it('provides an error on failure', async function () {\n      fetchMock.reset();\n      fetchMock.get('express:/project/:projectId/messages', 500);\n      const {\n        result,\n        waitForNextUpdate\n      } = renderChatContextHook({});\n      result.current.loadInitialMessages();\n      await waitForNextUpdate();\n      expect(result.current.error).to.exist;\n      expect(result.current.status).to.equal('error');\n    });","file":"frontend/features/chat/context/chat-context.test.js","skipped":false,"dir":"services/web/test"},{"name":"adds messages to the list","suites":["ChatContext","loadMoreMessages"],"updatePoint":{"line":219,"column":33,"index":7375},"line":219,"code":"    it('adds messages to the list', async function () {\n      // Mock a GET request for an initial message\n      fetchMock.getOnce('express:/project/:projectId/messages', [{\n        id: 'msg_1',\n        content: 'first message',\n        user,\n        timestamp: new Date('2021-03-04T10:00:00').getTime()\n      }]);\n      const {\n        result,\n        waitForNextUpdate\n      } = renderChatContextHook({});\n      result.current.loadMoreMessages();\n      await waitForNextUpdate();\n      expect(result.current.messages[0].contents).to.deep.equal(['first message']);\n\n      // The before query param is not set\n      expect(getLastFetchMockQueryParam('before')).to.be.null;\n    });","file":"frontend/features/chat/context/chat-context.test.js","skipped":false,"dir":"services/web/test"},{"name":"adds more messages if called a second time","suites":["ChatContext","loadMoreMessages"],"updatePoint":{"line":238,"column":50,"index":8073},"line":238,"code":"    it('adds more messages if called a second time', async function () {\n      // Mock 2 GET requests, with different content\n      fetchMock.getOnce('express:/project/:projectId/messages',\n      // Resolve a full \"page\" of messages (50)\n      createMessages(50, user, new Date('2021-03-04T10:00:00').getTime())).getOnce('express:/project/:projectId/messages', [{\n        id: 'msg_51',\n        content: 'message from second page',\n        user,\n        timestamp: new Date('2021-03-04T11:00:00').getTime()\n      }], {\n        overwriteRoutes: false\n      });\n      const {\n        result,\n        waitForNextUpdate\n      } = renderChatContextHook({});\n      result.current.loadMoreMessages();\n      await waitForNextUpdate();\n\n      // Call a second time\n      result.current.loadMoreMessages();\n      await waitForNextUpdate();\n\n      // The second request is added to the list\n      // Since both messages from the same user, they are collapsed into the\n      // same \"message\"\n      expect(result.current.messages[0].contents).to.include('message from second page');\n\n      // The before query param for the second request matches the timestamp\n      // of the first message\n      const beforeParam = parseInt(getLastFetchMockQueryParam('before'), 10);\n      expect(beforeParam).to.equal(new Date('2021-03-04T10:00:00').getTime());\n    });","file":"frontend/features/chat/context/chat-context.test.js","skipped":false,"dir":"services/web/test"},{"name":"won't load more messages if there are no more messages","suites":["ChatContext","loadMoreMessages"],"updatePoint":{"line":271,"column":62,"index":9428},"line":271,"code":"    it(\"won't load more messages if there are no more messages\", async function () {\n      // Mock a GET request for 49 messages. This is less the the full page size\n      // (50 messages), meaning that there are no further messages to be loaded\n      fetchMock.getOnce('express:/project/:projectId/messages', createMessages(49, user));\n      const {\n        result,\n        waitForNextUpdate\n      } = renderChatContextHook({});\n      result.current.loadMoreMessages();\n      await waitForNextUpdate();\n      expect(result.current.messages[0].contents).to.have.length(49);\n      result.current.loadMoreMessages();\n      expect(result.current.atEnd).to.be.true;\n      expect(fetchMock.calls()).to.have.lengthOf(1);\n    });","file":"frontend/features/chat/context/chat-context.test.js","skipped":false,"dir":"services/web/test"},{"name":"handles socket messages while loading","suites":["ChatContext","loadMoreMessages"],"updatePoint":{"line":286,"column":45,"index":10134},"line":286,"code":"    it('handles socket messages while loading', async function () {\n      // Mock GET messages so that we can control when the promise is resolved\n      let resolveLoadingMessages;\n      fetchMock.get('express:/project/:projectId/messages', new Promise(resolve => {\n        resolveLoadingMessages = resolve;\n      }));\n      const socket = new EventEmitter();\n      const {\n        result,\n        waitForNextUpdate\n      } = renderChatContextHook({\n        socket\n      });\n\n      // Start loading messages\n      result.current.loadMoreMessages();\n\n      // Mock message being received from the socket while the request is in\n      // flight\n      socket.emit('new-chat-message', {\n        id: 'socket_msg',\n        content: 'socket message',\n        timestamp: Date.now(),\n        user: {\n          id: 'another_fake_user',\n          first_name: 'another_fake_user_first_name',\n          email: 'another_fake@example.com'\n        }\n      });\n\n      // Resolve messages being loaded\n      resolveLoadingMessages([{\n        id: 'fetched_msg',\n        content: 'loaded message',\n        user,\n        timestamp: Date.now()\n      }]);\n      await waitForNextUpdate();\n\n      // Although the loaded message was resolved last, it appears first (since\n      // requested messages must have come first)\n      const messageContents = result.current.messages.map(({\n        contents\n      }) => contents[0]);\n      expect(messageContents).to.deep.equal(['loaded message', 'socket message']);\n    });","file":"frontend/features/chat/context/chat-context.test.js","skipped":false,"dir":"services/web/test"},{"name":"provides an error on failures","suites":["ChatContext","loadMoreMessages"],"updatePoint":{"line":332,"column":37,"index":11618},"line":332,"code":"    it('provides an error on failures', async function () {\n      fetchMock.reset();\n      fetchMock.get('express:/project/:projectId/messages', 500);\n      const {\n        result,\n        waitForNextUpdate\n      } = renderChatContextHook({});\n      result.current.loadMoreMessages();\n      await waitForNextUpdate();\n      expect(result.current.error).to.exist;\n      expect(result.current.status).to.equal('error');\n    });","file":"frontend/features/chat/context/chat-context.test.js","skipped":false,"dir":"services/web/test"},{"name":"optimistically adds the message to the list","suites":["ChatContext","sendMessage"],"updatePoint":{"line":351,"column":51,"index":12356},"line":351,"code":"    it('optimistically adds the message to the list', function () {\n      const {\n        result\n      } = renderChatContextHook({});\n      result.current.sendMessage('sent message');\n      expect(result.current.messages[0].contents).to.deep.equal(['sent message']);\n    });","file":"frontend/features/chat/context/chat-context.test.js","skipped":false,"dir":"services/web/test"},{"name":"POSTs the message to the backend","suites":["ChatContext","sendMessage"],"updatePoint":{"line":358,"column":40,"index":12620},"line":358,"code":"    it('POSTs the message to the backend', function () {\n      const {\n        result\n      } = renderChatContextHook({});\n      result.current.sendMessage('sent message');\n      const [, {\n        body\n      }] = fetchMock.lastCall('express:/project/:projectId/messages', 'POST');\n      expect(JSON.parse(body)).to.deep.include({\n        content: 'sent message'\n      });\n    });","file":"frontend/features/chat/context/chat-context.test.js","skipped":false,"dir":"services/web/test"},{"name":"doesn't send if the content is empty","suites":["ChatContext","sendMessage"],"updatePoint":{"line":370,"column":44,"index":13005},"line":370,"code":"    it(\"doesn't send if the content is empty\", function () {\n      const {\n        result\n      } = renderChatContextHook({});\n      result.current.sendMessage('');\n      expect(result.current.messages).to.be.empty;\n      expect(fetchMock.called('express:/project/:projectId/messages', {\n        method: 'post'\n      })).to.be.false;\n    });","file":"frontend/features/chat/context/chat-context.test.js","skipped":false,"dir":"services/web/test"},{"name":"provides an error on failure","suites":["ChatContext","sendMessage"],"updatePoint":{"line":380,"column":36,"index":13339},"line":380,"code":"    it('provides an error on failure', async function () {\n      fetchMock.reset();\n      fetchMock.get('express:/project/:projectId/messages', []).postOnce('express:/project/:projectId/messages', 500);\n      const {\n        result,\n        waitForNextUpdate\n      } = renderChatContextHook({});\n      result.current.sendMessage('sent message');\n      await waitForNextUpdate();\n      expect(result.current.error).to.exist;\n      expect(result.current.status).to.equal('error');\n    });","file":"frontend/features/chat/context/chat-context.test.js","skipped":false,"dir":"services/web/test"},{"name":"increments unreadMessageCount when a new message is received","suites":["ChatContext","unread messages"],"updatePoint":{"line":398,"column":68,"index":14059},"line":398,"code":"    it('increments unreadMessageCount when a new message is received', function () {\n      const socket = new EventEmitter();\n      const {\n        result\n      } = renderChatContextHook({\n        socket\n      });\n\n      // Receive a new message from the socket\n      socket.emit('new-chat-message', {\n        id: 'msg_1',\n        content: 'new message',\n        timestamp: Date.now(),\n        user\n      });\n      expect(result.current.unreadMessageCount).to.equal(1);\n    });","file":"frontend/features/chat/context/chat-context.test.js","skipped":false,"dir":"services/web/test"},{"name":"resets unreadMessageCount when markMessagesAsRead is called","suites":["ChatContext","unread messages"],"updatePoint":{"line":415,"column":67,"index":14536},"line":415,"code":"    it('resets unreadMessageCount when markMessagesAsRead is called', function () {\n      const socket = new EventEmitter();\n      const {\n        result\n      } = renderChatContextHook({\n        socket\n      });\n\n      // Receive a new message from the socket, incrementing unreadMessageCount\n      // by 1\n      socket.emit('new-chat-message', {\n        id: 'msg_1',\n        content: 'new message',\n        timestamp: Date.now(),\n        user\n      });\n      result.current.markMessagesAsRead();\n      expect(result.current.unreadMessageCount).to.equal(0);\n    });","file":"frontend/features/chat/context/chat-context.test.js","skipped":false,"dir":"services/web/test"},{"name":"to an empty list","suites":["prependMessages()"],"updatePoint":{"line":36,"column":22,"index":857},"line":36,"code":"  it('to an empty list', function () {\n    const messages = createTestMessages();\n    expect(prependMessages([], messages)).to.deep.equal([{\n      id: messages[0].id,\n      timestamp: messages[0].timestamp,\n      user: messages[0].user,\n      contents: [messages[0].content, messages[1].content]\n    }]);\n  });","file":"frontend/features/chat/util/message-list-appender.test.js","skipped":false,"dir":"services/web/test"},{"name":"when the prepended messages are close in time, contents should be merged into the same message","suites":["prependMessages()","when the messages to prepend are from the same user"],"updatePoint":{"line":53,"column":102,"index":1549},"line":53,"code":"    it('when the prepended messages are close in time, contents should be merged into the same message', function () {\n      const result = prependMessages(createTestMessageList(), messages);\n      expect(result.length).to.equal(list.length + 1);\n      expect(result[0]).to.deep.equal({\n        id: messages[0].id,\n        timestamp: messages[0].timestamp,\n        user: messages[0].user,\n        contents: [messages[0].content, messages[1].content]\n      });\n    });","file":"frontend/features/chat/util/message-list-appender.test.js","skipped":false,"dir":"services/web/test"},{"name":"when the prepended messages are separated in time, each message is prepended","suites":["prependMessages()","when the messages to prepend are from the same user"],"updatePoint":{"line":63,"column":84,"index":1999},"line":63,"code":"    it('when the prepended messages are separated in time, each message is prepended', function () {\n      messages[0].timestamp = messages[1].timestamp - 6 * 60 * 1000; // 6 minutes before the next message\n      const result = prependMessages(createTestMessageList(), messages);\n      expect(result.length).to.equal(list.length + 2);\n      expect(result[0]).to.deep.equal({\n        id: messages[0].id,\n        timestamp: messages[0].timestamp,\n        user: messages[0].user,\n        contents: [messages[0].content]\n      });\n      expect(result[1]).to.deep.equal({\n        id: messages[1].id,\n        timestamp: messages[1].timestamp,\n        user: messages[1].user,\n        contents: [messages[1].content]\n      });\n    });","file":"frontend/features/chat/util/message-list-appender.test.js","skipped":false,"dir":"services/web/test"},{"name":"should prepend separate messages to the list","suites":["prependMessages()","when the messages to prepend are from different users"],"updatePoint":{"line":87,"column":52,"index":2920},"line":87,"code":"    it('should prepend separate messages to the list', function () {\n      messages[0].user = otherUser;\n      const result = prependMessages(createTestMessageList(), messages);\n      expect(result.length).to.equal(list.length + 2);\n      expect(result[0]).to.deep.equal({\n        id: messages[0].id,\n        timestamp: messages[0].timestamp,\n        user: messages[0].user,\n        contents: [messages[0].content]\n      });\n      expect(result[1]).to.deep.equal({\n        id: messages[1].id,\n        timestamp: messages[1].timestamp,\n        user: messages[1].user,\n        contents: [messages[1].content]\n      });\n    });","file":"frontend/features/chat/util/message-list-appender.test.js","skipped":false,"dir":"services/web/test"},{"name":"should merge the prepended messages into the first existing one when user is same user and are close in time","suites":["prependMessages()","when the messages to prepend are from different users"],"updatePoint":{"line":105,"column":114,"index":3613},"line":105,"code":"  it('should merge the prepended messages into the first existing one when user is same user and are close in time', function () {\n    const list = createTestMessageList();\n    const messages = createTestMessages();\n    messages[0].user = messages[1].user = list[0].user;\n    const result = prependMessages(createTestMessageList(), messages);\n    expect(result.length).to.equal(list.length);\n    expect(result[0]).to.deep.equal({\n      id: messages[0].id,\n      timestamp: messages[0].timestamp,\n      user: messages[0].user,\n      contents: [messages[0].content, messages[1].content, ...list[0].contents]\n    });\n  });","file":"frontend/features/chat/util/message-list-appender.test.js","skipped":false,"dir":"services/web/test"},{"name":"to an empty list","suites":["appendMessage()"],"updatePoint":{"line":128,"column":22,"index":4356},"line":128,"code":"  it('to an empty list', function () {\n    const testMessage = createTestMessage();\n    expect(appendMessage([], testMessage)).to.deep.equal([{\n      id: 'appended_message',\n      timestamp: testMessage.timestamp,\n      user: testMessage.user,\n      contents: [testMessage.content]\n    }]);\n  });","file":"frontend/features/chat/util/message-list-appender.test.js","skipped":false,"dir":"services/web/test"},{"name":"should append the content to the last message","suites":["appendMessage()","messages appended shortly after the last message on the list","when the author is the same as the last message"],"updatePoint":{"line":146,"column":55,"index":5093},"line":146,"code":"      it('should append the content to the last message', function () {\n        const result = appendMessage(list, message);\n        expect(result.length).to.equal(list.length);\n        expect(result[1].contents).to.deep.equal(list[1].contents.concat(message.content));\n      });","file":"frontend/features/chat/util/message-list-appender.test.js","skipped":false,"dir":"services/web/test"},{"name":"should update the last message timestamp","suites":["appendMessage()","messages appended shortly after the last message on the list","when the author is the same as the last message"],"updatePoint":{"line":151,"column":50,"index":5368},"line":151,"code":"      it('should update the last message timestamp', function () {\n        const result = appendMessage(list, message);\n        expect(result[1].timestamp).to.equal(message.timestamp);\n      });","file":"frontend/features/chat/util/message-list-appender.test.js","skipped":false,"dir":"services/web/test"},{"name":"should append the new message to the list","suites":["appendMessage()","messages appended shortly after the last message on the list","when the author is different than the last message"],"updatePoint":{"line":160,"column":51,"index":5728},"line":160,"code":"      it('should append the new message to the list', function () {\n        const result = appendMessage(list, message);\n        expect(result.length).to.equal(list.length + 1);\n        expect(result[2]).to.deep.equal({\n          id: 'appended_message',\n          timestamp: message.timestamp,\n          user: message.user,\n          contents: [message.content]\n        });\n      });","file":"frontend/features/chat/util/message-list-appender.test.js","skipped":false,"dir":"services/web/test"},{"name":"when the author is the same as the last message, should be appended as new message","suites":["appendMessage()","messages appended later after the last message on the list"],"updatePoint":{"line":180,"column":90,"index":6497},"line":180,"code":"    it('when the author is the same as the last message, should be appended as new message', function () {\n      const result = appendMessage(list, message);\n      expect(result.length).to.equal(3);\n      expect(result[2]).to.deep.equal({\n        id: 'appended_message',\n        timestamp: message.timestamp,\n        user: message.user,\n        contents: [message.content]\n      });\n    });","file":"frontend/features/chat/util/message-list-appender.test.js","skipped":false,"dir":"services/web/test"},{"name":"when the author is the different than the last message, should be appended as new message","suites":["appendMessage()","messages appended later after the last message on the list"],"updatePoint":{"line":190,"column":97,"index":6895},"line":190,"code":"    it('when the author is the different than the last message, should be appended as new message', function () {\n      message.user = otherUser;\n      const result = appendMessage(list, message);\n      expect(result.length).to.equal(3);\n      expect(result[2]).to.deep.equal({\n        id: 'appended_message',\n        timestamp: message.timestamp,\n        user: message.user,\n        contents: [message.content]\n      });\n    });","file":"frontend/features/chat/util/message-list-appender.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders the translated modal title","suites":["<EditorCloneProjectModalWrapper />"],"updatePoint":{"line":18,"column":40,"index":672},"line":18,"code":"  it('renders the translated modal title', async function () {\n    const handleHide = sinon.stub();\n    const openProject = sinon.stub();\n    renderWithEditorContext( /*#__PURE__*/React.createElement(EditorCloneProjectModalWrapper, {\n      handleHide: handleHide,\n      openProject: openProject,\n      show: true\n    }), {\n      scope: {\n        project\n      }\n    });\n    await screen.findByText('Copy Project');\n  });","file":"frontend/features/clone-project-modal/components/clone-project-modal.test.js","skipped":false,"dir":"services/web/test"},{"name":"posts the generated project name","suites":["<EditorCloneProjectModalWrapper />"],"updatePoint":{"line":32,"column":38,"index":1091},"line":32,"code":"  it('posts the generated project name', async function () {\n    fetchMock.post('express:/project/:projectId/clone', {\n      status: 200,\n      body: {\n        project_id: 'cloned-project'\n      }\n    }, {\n      delay: 10\n    });\n    const handleHide = sinon.stub();\n    const openProject = sinon.stub();\n    renderWithEditorContext( /*#__PURE__*/React.createElement(EditorCloneProjectModalWrapper, {\n      handleHide: handleHide,\n      openProject: openProject,\n      show: true\n    }), {\n      scope: {\n        project\n      }\n    });\n    const cancelButton = await screen.findByRole('button', {\n      name: 'Cancel'\n    });\n    expect(cancelButton.disabled).to.be.false;\n    const submitButton = await screen.findByRole('button', {\n      name: 'Copy'\n    });\n    expect(submitButton.disabled).to.be.false;\n    const input = await screen.getByLabelText('New Name');\n    fireEvent.change(input, {\n      target: {\n        value: ''\n      }\n    });\n    expect(submitButton.disabled).to.be.true;\n    fireEvent.change(input, {\n      target: {\n        value: 'A Cloned Project'\n      }\n    });\n    expect(submitButton.disabled).to.be.false;\n    fireEvent.click(submitButton);\n    expect(submitButton.disabled).to.be.true;\n    await fetchMock.flush(true);\n    expect(fetchMock.done()).to.be.true;\n    const [url, options] = fetchMock.lastCall('express:/project/:projectId/clone');\n    expect(url).to.equal('/project/project-1/clone');\n    expect(JSON.parse(options.body)).to.deep.equal({\n      projectName: 'A Cloned Project'\n    });\n    expect(openProject).to.be.calledOnce;\n    const errorMessage = screen.queryByText('Sorry, something went wrong');\n    expect(errorMessage).to.be.null;\n    await waitFor(() => {\n      expect(submitButton.disabled).to.be.false;\n      expect(cancelButton.disabled).to.be.false;\n    });\n  });","file":"frontend/features/clone-project-modal/components/clone-project-modal.test.js","skipped":false,"dir":"services/web/test"},{"name":"handles a generic error response","suites":["<EditorCloneProjectModalWrapper />"],"updatePoint":{"line":90,"column":38,"index":2913},"line":90,"code":"  it('handles a generic error response', async function () {\n    const matcher = 'express:/project/:projectId/clone';\n    fetchMock.postOnce(matcher, {\n      status: 500,\n      body: 'There was an error!'\n    });\n    const handleHide = sinon.stub();\n    const openProject = sinon.stub();\n    renderWithEditorContext( /*#__PURE__*/React.createElement(EditorCloneProjectModalWrapper, {\n      handleHide: handleHide,\n      openProject: openProject,\n      show: true\n    }), {\n      scope: {\n        project\n      }\n    });\n    const button = await screen.findByRole('button', {\n      name: 'Copy'\n    });\n    expect(button.disabled).to.be.false;\n    const cancelButton = await screen.findByRole('button', {\n      name: 'Cancel'\n    });\n    expect(cancelButton.disabled).to.be.false;\n    fireEvent.click(button);\n    expect(fetchMock.done(matcher)).to.be.true;\n    expect(openProject).not.to.be.called;\n    await screen.findByText('Sorry, something went wrong');\n    expect(button.disabled).to.be.false;\n    expect(cancelButton.disabled).to.be.false;\n  });","file":"frontend/features/clone-project-modal/components/clone-project-modal.test.js","skipped":false,"dir":"services/web/test"},{"name":"handles a specific error response","suites":["<EditorCloneProjectModalWrapper />"],"updatePoint":{"line":122,"column":39,"index":3967},"line":122,"code":"  it('handles a specific error response', async function () {\n    const matcher = 'express:/project/:projectId/clone';\n    fetchMock.postOnce(matcher, {\n      status: 400,\n      body: 'There was an error!'\n    });\n    const handleHide = sinon.stub();\n    const openProject = sinon.stub();\n    renderWithEditorContext( /*#__PURE__*/React.createElement(EditorCloneProjectModalWrapper, {\n      handleHide: handleHide,\n      openProject: openProject,\n      show: true\n    }), {\n      scope: {\n        project\n      }\n    });\n    const button = await screen.findByRole('button', {\n      name: 'Copy'\n    });\n    expect(button.disabled).to.be.false;\n    const cancelButton = await screen.findByRole('button', {\n      name: 'Cancel'\n    });\n    expect(cancelButton.disabled).to.be.false;\n    fireEvent.click(button);\n    await fetchMock.flush(true);\n    expect(fetchMock.done(matcher)).to.be.true;\n    expect(openProject).not.to.be.called;\n    await screen.findByText('There was an error!');\n    expect(button.disabled).to.be.false;\n    expect(cancelButton.disabled).to.be.false;\n  });","file":"frontend/features/clone-project-modal/components/clone-project-modal.test.js","skipped":false,"dir":"services/web/test"},{"name":"list words","suites":["<DictionaryModalContent />"],"updatePoint":{"line":18,"column":16,"index":750},"line":18,"code":"  it('list words', async function () {\n    setLearnedWords(['foo', 'bar']);\n    renderWithEditorContext( /*#__PURE__*/React.createElement(DictionaryModal, {\n      show: true,\n      handleHide: () => {}\n    }));\n    screen.getByText('foo');\n    screen.getByText('bar');\n  });","file":"frontend/features/dictionary/components/dictionary-modal-content.test.js","skipped":false,"dir":"services/web/test"},{"name":"shows message when empty","suites":["<DictionaryModalContent />"],"updatePoint":{"line":27,"column":30,"index":1039},"line":27,"code":"  it('shows message when empty', async function () {\n    setLearnedWords([]);\n    renderWithEditorContext( /*#__PURE__*/React.createElement(DictionaryModal, {\n      show: true,\n      handleHide: () => {}\n    }));\n    screen.getByText('Your custom dictionary is empty.');\n  });","file":"frontend/features/dictionary/components/dictionary-modal-content.test.js","skipped":false,"dir":"services/web/test"},{"name":"removes words","suites":["<DictionaryModalContent />"],"updatePoint":{"line":35,"column":19,"index":1305},"line":35,"code":"  it('removes words', async function () {\n    fetchMock.post('/spelling/unlearn', 200);\n    setLearnedWords(['Foo', 'bar']);\n    renderWithEditorContext( /*#__PURE__*/React.createElement(DictionaryModal, {\n      show: true,\n      handleHide: () => {}\n    }));\n    screen.getByText('bar');\n    const [firstButton] = screen.getAllByRole('button', {\n      name: 'Remove from dictionary'\n    });\n    fireEvent.click(firstButton);\n    expect(screen.queryByText('bar')).to.not.exist;\n    screen.getByText('Foo');\n  });","file":"frontend/features/dictionary/components/dictionary-modal-content.test.js","skipped":false,"dir":"services/web/test"},{"name":"handles errors","suites":["<DictionaryModalContent />"],"updatePoint":{"line":50,"column":20,"index":1819},"line":50,"code":"  it('handles errors', async function () {\n    fetchMock.post('/spelling/unlearn', 500);\n    setLearnedWords(['foo']);\n    renderWithEditorContext( /*#__PURE__*/React.createElement(DictionaryModal, {\n      show: true,\n      handleHide: () => {}\n    }));\n    const [firstButton] = screen.getAllByRole('button', {\n      name: 'Remove from dictionary'\n    });\n    fireEvent.click(firstButton);\n    await fetchMock.flush();\n    screen.getByText('Sorry, something went wrong');\n    screen.getByText('Your custom dictionary is empty.');\n  });","file":"frontend/features/dictionary/components/dictionary-modal-content.test.js","skipped":false,"dir":"services/web/test"},{"name":"shows correct modal when clicked","suites":["<ActionsCopyProject />"],"updatePoint":{"line":22,"column":38,"index":890},"line":22,"code":"  it('shows correct modal when clicked', async function () {\n    renderWithEditorContext( /*#__PURE__*/React.createElement(ActionsCopyProject, null));\n    fireEvent.click(screen.getByRole('button', {\n      name: 'Copy Project'\n    }));\n    screen.getByPlaceholderText('New Project Name');\n  });","file":"frontend/features/editor-left-menu/components/actions-copy-project.test.js","skipped":false,"dir":"services/web/test"},{"name":"loads the project page when submitted","suites":["<ActionsCopyProject />"],"updatePoint":{"line":29,"column":43,"index":1190},"line":29,"code":"  it('loads the project page when submitted', async function () {\n    fetchMock.post('express:/project/:id/clone', {\n      status: 200,\n      body: {\n        project_id: 'new-project'\n      }\n    });\n    renderWithEditorContext( /*#__PURE__*/React.createElement(ActionsCopyProject, null));\n    fireEvent.click(screen.getByRole('button', {\n      name: 'Copy Project'\n    }));\n    const input = screen.getByPlaceholderText('New Project Name');\n    fireEvent.change(input, {\n      target: {\n        value: 'New Project'\n      }\n    });\n    const button = screen.getByRole('button', {\n      name: 'Copy'\n    });\n    button.click();\n    await waitFor(() => {\n      expect(button.textContent).to.equal('Copying…');\n    });\n    await waitFor(() => {\n      expect(assignStub).to.have.been.calledOnceWith('/project/new-project');\n    });\n  });","file":"frontend/features/editor-left-menu/components/actions-copy-project.test.js","skipped":false,"dir":"services/web/test"},{"name":"shows correct menu for non-anonymous users","suites":["<ActionsMenu />"],"updatePoint":{"line":23,"column":48,"index":833},"line":23,"code":"  it('shows correct menu for non-anonymous users', async function () {\n    window.metaAttributesCache.set('ol-anonymous', false);\n    renderWithEditorContext( /*#__PURE__*/React.createElement(ActionsMenu, null), {\n      projectId: '123abc',\n      scope: {\n        editor: {\n          sharejs_doc: {\n            doc_id: 'test-doc',\n            getSnapshot: () => 'some doc content'\n          }\n        }\n      }\n    });\n    screen.getByText('Actions');\n    screen.getByRole('button', {\n      name: 'Copy Project'\n    });\n    await waitFor(() => {\n      screen.getByRole('button', {\n        name: 'Word Count'\n      });\n    });\n  });","file":"frontend/features/editor-left-menu/components/actions-menu.test.js","skipped":false,"dir":"services/web/test"},{"name":"does not show anything for anonymous users","suites":["<ActionsMenu />"],"updatePoint":{"line":46,"column":48,"index":1465},"line":46,"code":"  it('does not show anything for anonymous users', async function () {\n    window.metaAttributesCache.set('ol-anonymous', true);\n    renderWithEditorContext( /*#__PURE__*/React.createElement(ActionsMenu, null), {\n      projectId: '123abc',\n      scope: {\n        editor: {\n          sharejs_doc: {\n            doc_id: 'test-doc',\n            getSnapshot: () => 'some doc content'\n          }\n        }\n      }\n    });\n    expect(screen.queryByText('Actions')).to.equal(null);\n    expect(screen.queryByRole('button', {\n      name: 'Copy Project'\n    })).to.equal(null);\n    await waitFor(() => {\n      expect(screen.queryByRole('button', {\n        name: 'Word Count'\n      })).to.equal(null);\n    });\n  });","file":"frontend/features/editor-left-menu/components/actions-menu.test.js","skipped":false,"dir":"services/web/test"},{"name":"shows correct modal when clicked after document is compiled","suites":["<ActionsWordCount />"],"updatePoint":{"line":10,"column":65,"index":497},"line":10,"code":"  it('shows correct modal when clicked after document is compiled', async function () {\n    const compileEndpoint = 'express:/project/:projectId/compile';\n    const wordcountEndpoint = 'express:/project/:projectId/wordcount';\n    fetchMock.post(compileEndpoint, {\n      status: 'success',\n      pdfDownloadDomain: 'https://clsi.test-overleaf.com',\n      outputFiles: [{\n        path: 'output.pdf',\n        build: 'build-123',\n        url: '/build/build-123/output.pdf',\n        type: 'pdf'\n      }]\n    });\n    fetchMock.get(wordcountEndpoint, {\n      texcount: {\n        encode: 'ascii',\n        textWords: 0,\n        headers: 0,\n        mathInline: 0,\n        mathDisplay: 0\n      }\n    });\n    renderWithEditorContext( /*#__PURE__*/React.createElement(ActionsWordCount, null), {\n      projectId: '123abc',\n      scope: {\n        editor: {\n          sharejs_doc: {\n            doc_id: 'test-doc',\n            getSnapshot: () => 'some doc content'\n          }\n        }\n      }\n    });\n\n    // when loading, we don't render the \"Word Count\" as button yet\n    expect(screen.queryByRole('button', {\n      name: 'Word Count'\n    })).to.equal(null);\n    await waitFor(() => expect(fetchMock.called(compileEndpoint)).to.be.true);\n    fireEvent.click(screen.getByRole('button', {\n      name: 'Word Count'\n    }));\n    await waitFor(() => expect(fetchMock.called(wordcountEndpoint)).to.be.true);\n  });","file":"frontend/features/editor-left-menu/components/actions-word-count.test.js","skipped":false,"dir":"services/web/test"},{"name":"shows download links with correct url","suites":["<DownloadMenu />"],"updatePoint":{"line":10,"column":43,"index":451},"line":10,"code":"  it('shows download links with correct url', async function () {\n    fetchMock.post('express:/project/:projectId/compile', {\n      clsiServerId: 'foo',\n      compileGroup: 'priority',\n      status: 'success',\n      pdfDownloadDomain: 'https://clsi.test-overleaf.com',\n      outputFiles: [{\n        path: 'output.pdf',\n        build: 'build-123',\n        url: '/build/build-123/output.pdf',\n        type: 'pdf'\n      }]\n    });\n    renderWithEditorContext( /*#__PURE__*/React.createElement(DownloadMenu, null), {\n      projectId: '123abc',\n      scope: {\n        editor: {\n          sharejs_doc: {\n            doc_id: 'test-doc',\n            getSnapshot: () => 'some doc content'\n          }\n        }\n      }\n    });\n    const sourceLink = screen.getByRole('link', {\n      name: 'Source'\n    });\n    expect(sourceLink.getAttribute('href')).to.equal('/project/123abc/download/zip');\n    await waitFor(() => {\n      const pdfLink = screen.getByRole('link', {\n        name: 'PDF'\n      });\n      expect(pdfLink.getAttribute('href')).to.equal('/download/project/123abc/build/build-123/output/output.pdf?compileGroup=priority&clsiserverid=foo&popupDownload=true');\n    });\n  });","file":"frontend/features/editor-left-menu/components/download-menu.test.js","skipped":false,"dir":"services/web/test"},{"name":"open contact us modal when clicked","suites":["<HelpContactUs />"],"updatePoint":{"line":19,"column":40,"index":735},"line":19,"code":"  it('open contact us modal when clicked', function () {\n    renderWithEditorContext( /*#__PURE__*/React.createElement(HelpContactUs, null));\n    expect(screen.queryByRole('dialog')).to.equal(null);\n    fireEvent.click(screen.getByRole('button', {\n      name: 'Contact Us'\n    }));\n    const modal = screen.getAllByRole('dialog')[0];\n    within(modal).getAllByText('Contact Us');\n    within(modal).getByText('Subject');\n  });","file":"frontend/features/editor-left-menu/components/help-contact-us.test.js","skipped":false,"dir":"services/web/test"},{"name":"has correct href attribute","suites":["<HelpDocumentation />"],"updatePoint":{"line":5,"column":32,"index":285},"line":5,"code":"  it('has correct href attribute', function () {\n    render( /*#__PURE__*/React.createElement(HelpDocumentation, null));\n    const link = screen.getByRole('link', {\n      name: 'Documentation'\n    });\n    expect(link.getAttribute('href')).to.equal('/learn');\n  });","file":"frontend/features/editor-left-menu/components/help-documentation.test.js","skipped":false,"dir":"services/web/test"},{"name":"shows correct menu if `showSupport` is `true`","suites":["<HelpMenu />"],"updatePoint":{"line":19,"column":51,"index":709},"line":19,"code":"  it('shows correct menu if `showSupport` is `true`', function () {\n    window.metaAttributesCache.set('ol-showSupport', true);\n    renderWithEditorContext( /*#__PURE__*/React.createElement(HelpMenu, null));\n    screen.getByRole('button', {\n      name: 'Show Hotkeys'\n    });\n    screen.getByRole('button', {\n      name: 'Contact Us'\n    });\n    screen.getByRole('link', {\n      name: 'Documentation'\n    });\n  });","file":"frontend/features/editor-left-menu/components/help-menu.test.js","skipped":false,"dir":"services/web/test"},{"name":"shows correct menu if `showSupport` is `false`","suites":["<HelpMenu />"],"updatePoint":{"line":32,"column":52,"index":1125},"line":32,"code":"  it('shows correct menu if `showSupport` is `false`', function () {\n    window.metaAttributesCache.set('ol-showSupport', false);\n    renderWithEditorContext( /*#__PURE__*/React.createElement(HelpMenu, null));\n    screen.getByRole('button', {\n      name: 'Show Hotkeys'\n    });\n    expect(screen.queryByRole('button', {\n      name: 'Contact Us'\n    })).to.equal(null);\n    expect(screen.queryByRole('link', {\n      name: 'Documentation'\n    })).to.equal(null);\n  });","file":"frontend/features/editor-left-menu/components/help-menu.test.js","skipped":false,"dir":"services/web/test"},{"name":"open hotkeys modal when clicked","suites":["<HelpShowHotkeys />"],"updatePoint":{"line":10,"column":37,"index":467},"line":10,"code":"  it('open hotkeys modal when clicked', function () {\n    renderWithEditorContext( /*#__PURE__*/React.createElement(HelpShowHotkeys, null));\n    expect(screen.queryByRole('dialog')).to.equal(null);\n    fireEvent.click(screen.getByRole('button', {\n      name: 'Show Hotkeys'\n    }));\n    const modal = screen.getAllByRole('dialog')[0];\n    within(modal).getByText('Hotkeys (Legacy source editor)');\n    within(modal).getByText('Common');\n  });","file":"frontend/features/editor-left-menu/components/help-show-hotkeys.test.js","skipped":false,"dir":"services/web/test"},{"name":"displays the number of unread messages","suites":["<ChatToggleButton />"],"updatePoint":{"line":10,"column":44,"index":406},"line":10,"code":"  it('displays the number of unread messages', function () {\n    const props = {\n      ...defaultProps,\n      unreadMessageCount: 113\n    };\n    render( /*#__PURE__*/React.createElement(ChatToggleButton, props));\n    screen.getByText('113');\n  });","file":"frontend/features/editor-navigation-toolbar/components/chat-toggle-button.test.js","skipped":false,"dir":"services/web/test"},{"name":"doesn't display the unread messages badge when the number of unread messages is zero","suites":["<ChatToggleButton />"],"updatePoint":{"line":18,"column":90,"index":700},"line":18,"code":"  it(\"doesn't display the unread messages badge when the number of unread messages is zero\", function () {\n    render( /*#__PURE__*/React.createElement(ChatToggleButton, defaultProps));\n    expect(screen.queryByText('0')).to.not.exist;\n  });","file":"frontend/features/editor-navigation-toolbar/components/chat-toggle-button.test.js","skipped":false,"dir":"services/web/test"},{"name":"should mark current layout option as selected","suites":["<LayoutDropdownButton />"],"updatePoint":{"line":26,"column":51,"index":981},"line":26,"code":"  it('should mark current layout option as selected', function () {\n    // Selected is aria-label, visually we show a checkmark\n    renderWithEditorContext( /*#__PURE__*/React.createElement(LayoutDropdownButton, null), {\n      ui: defaultUi\n    });\n    screen.getByRole('menuitem', {\n      name: 'Editor & PDF'\n    });\n    screen.getByRole('menuitem', {\n      name: 'Selected PDF only (hide editor)'\n    });\n    screen.getByRole('menuitem', {\n      name: 'Editor only (hide PDF)'\n    });\n    screen.getByRole('menuitem', {\n      name: 'PDF in separate tab'\n    });\n  });","file":"frontend/features/editor-navigation-toolbar/components/layout-dropdown-button.test.js","skipped":false,"dir":"services/web/test"},{"name":"should not select any option in history view","suites":["<LayoutDropdownButton />"],"updatePoint":{"line":44,"column":50,"index":1551},"line":44,"code":"  it('should not select any option in history view', function () {\n    // Selected is aria-label, visually we show a checkmark\n    renderWithEditorContext( /*#__PURE__*/React.createElement(LayoutDropdownButton, null), {\n      ui: {\n        ...defaultUi,\n        view: 'history'\n      }\n    });\n    screen.getByRole('menuitem', {\n      name: 'Editor & PDF'\n    });\n    screen.getByRole('menuitem', {\n      name: 'PDF only (hide editor)'\n    });\n    screen.getByRole('menuitem', {\n      name: 'Editor only (hide PDF)'\n    });\n    screen.getByRole('menuitem', {\n      name: 'PDF in separate tab'\n    });\n  });","file":"frontend/features/editor-navigation-toolbar/components/layout-dropdown-button.test.js","skipped":false,"dir":"services/web/test"},{"name":"should treat file and editor views the same way","suites":["<LayoutDropdownButton />"],"updatePoint":{"line":65,"column":53,"index":2161},"line":65,"code":"  it('should treat file and editor views the same way', function () {\n    // Selected is aria-label, visually we show a checkmark\n    renderWithEditorContext( /*#__PURE__*/React.createElement(LayoutDropdownButton, null), {\n      ui: {\n        pdfLayout: 'flat',\n        view: 'file'\n      }\n    });\n    screen.getByRole('menuitem', {\n      name: 'Editor & PDF'\n    });\n    screen.getByRole('menuitem', {\n      name: 'PDF only (hide editor)'\n    });\n    screen.getByRole('menuitem', {\n      name: 'Selected Editor only (hide PDF)'\n    });\n    screen.getByRole('menuitem', {\n      name: 'PDF in separate tab'\n    });\n  });","file":"frontend/features/editor-navigation-toolbar/components/layout-dropdown-button.test.js","skipped":false,"dir":"services/web/test"},{"name":"should show processing","suites":["<LayoutDropdownButton />","on detach"],"updatePoint":{"line":105,"column":30,"index":3389},"line":105,"code":"    it('should show processing', function () {\n      screen.getByText('Layout processing');\n    });","file":"frontend/features/editor-navigation-toolbar/components/layout-dropdown-button.test.js","skipped":false,"dir":"services/web/test"},{"name":"should record event","suites":["<LayoutDropdownButton />","on detach"],"updatePoint":{"line":108,"column":27,"index":3486},"line":108,"code":"    it('should record event', function () {\n      sinon.assert.calledWith(sendMBSpy, 'project-layout-detach');\n    });","file":"frontend/features/editor-navigation-toolbar/components/layout-dropdown-button.test.js","skipped":false,"dir":"services/web/test"},{"name":"should not show processing","suites":["<LayoutDropdownButton />","on layout change / reattach"],"updatePoint":{"line":126,"column":34,"index":4092},"line":126,"code":"    it('should not show processing', function () {\n      const processingText = screen.queryByText('Layout processing');\n      expect(processingText).to.not.exist;\n    });","file":"frontend/features/editor-navigation-toolbar/components/layout-dropdown-button.test.js","skipped":false,"dir":"services/web/test"},{"name":"should record events","suites":["<LayoutDropdownButton />","on layout change / reattach"],"updatePoint":{"line":130,"column":28,"index":4258},"line":130,"code":"    it('should record events', function () {\n      sinon.assert.calledWith(sendMBSpy, 'project-layout-reattach');\n      sinon.assert.calledWith(sendMBSpy, 'project-layout-change', {\n        layout: 'flat',\n        view: 'editor',\n        page: '/detacher'\n      });\n    });","file":"frontend/features/editor-navigation-toolbar/components/layout-dropdown-button.test.js","skipped":false,"dir":"services/web/test"},{"name":"should select new menu item","suites":["<LayoutDropdownButton />","on layout change / reattach"],"updatePoint":{"line":138,"column":35,"index":4539},"line":138,"code":"    it('should select new menu item', function () {\n      screen.getByRole('menuitem', {\n        name: 'Selected Editor only (hide PDF)'\n      });\n    });","file":"frontend/features/editor-navigation-toolbar/components/layout-dropdown-button.test.js","skipped":false,"dir":"services/web/test"},{"name":"displays user initials","suites":["<OnlineUsersWidget />","with less than 4 users"],"updatePoint":{"line":17,"column":30,"index":592},"line":17,"code":"    it('displays user initials', function () {\n      render( /*#__PURE__*/React.createElement(OnlineUsersWidget, defaultProps));\n      screen.getByText('t');\n      screen.getByText('a');\n    });","file":"frontend/features/editor-navigation-toolbar/components/online-users-widget.test.js","skipped":false,"dir":"services/web/test"},{"name":"displays user name in a tooltip","suites":["<OnlineUsersWidget />","with less than 4 users"],"updatePoint":{"line":22,"column":39,"index":796},"line":22,"code":"    it('displays user name in a tooltip', function () {\n      render( /*#__PURE__*/React.createElement(OnlineUsersWidget, defaultProps));\n      const icon = screen.getByText('t');\n      fireEvent.mouseOver(icon);\n      screen.getByRole('tooltip', {\n        name: 'test_user'\n      });\n    });","file":"frontend/features/editor-navigation-toolbar/components/online-users-widget.test.js","skipped":false,"dir":"services/web/test"},{"name":"calls \"goToUser\" when the user initial is clicked","suites":["<OnlineUsersWidget />","with less than 4 users"],"updatePoint":{"line":30,"column":57,"index":1107},"line":30,"code":"    it('calls \"goToUser\" when the user initial is clicked', function () {\n      const props = {\n        ...defaultProps,\n        goToUser: sinon.stub()\n      };\n      render( /*#__PURE__*/React.createElement(OnlineUsersWidget, props));\n      const icon = screen.getByText('t');\n      fireEvent.click(icon);\n      expect(props.goToUser).to.be.calledWith({\n        name: 'test_user',\n        user_id: 'test_user'\n      });\n    });","file":"frontend/features/editor-navigation-toolbar/components/online-users-widget.test.js","skipped":false,"dir":"services/web/test"},{"name":"displays the count of users","suites":["<OnlineUsersWidget />","with 4 users and more"],"updatePoint":{"line":55,"column":35,"index":1795},"line":55,"code":"    it('displays the count of users', function () {\n      render( /*#__PURE__*/React.createElement(OnlineUsersWidget, props));\n      screen.getByText('4');\n    });","file":"frontend/features/editor-navigation-toolbar/components/online-users-widget.test.js","skipped":false,"dir":"services/web/test"},{"name":"displays user names on hover","suites":["<OnlineUsersWidget />","with 4 users and more"],"updatePoint":{"line":59,"column":36,"index":1960},"line":59,"code":"    it('displays user names on hover', function () {\n      render( /*#__PURE__*/React.createElement(OnlineUsersWidget, props));\n      const toggleButton = screen.getByRole('button');\n      fireEvent.click(toggleButton);\n      screen.getByText('test_user');\n      screen.getByText('another_test_user');\n      screen.getByText('user_3');\n      screen.getByText('user_4');\n    });","file":"frontend/features/editor-navigation-toolbar/components/online-users-widget.test.js","skipped":false,"dir":"services/web/test"},{"name":"calls \"goToUser\" when the user name is clicked","suites":["<OnlineUsersWidget />","with 4 users and more"],"updatePoint":{"line":68,"column":54,"index":2356},"line":68,"code":"    it('calls \"goToUser\" when the user name is clicked', function () {\n      const testProps = {\n        ...props,\n        goToUser: sinon.stub()\n      };\n      render( /*#__PURE__*/React.createElement(OnlineUsersWidget, testProps));\n      const toggleButton = screen.getByRole('button');\n      fireEvent.click(toggleButton);\n      const icon = screen.getByText('user_3');\n      fireEvent.click(icon);\n      expect(testProps.goToUser).to.be.calledWith({\n        name: 'user_3',\n        user_id: 'user_3'\n      });\n    });","file":"frontend/features/editor-navigation-toolbar/components/online-users-widget.test.js","skipped":false,"dir":"services/web/test"},{"name":"displays the project name","suites":["<ProjectNameEditableLabel />"],"updatePoint":{"line":10,"column":31,"index":440},"line":10,"code":"  it('displays the project name', function () {\n    render( /*#__PURE__*/React.createElement(ProjectNameEditableLabel, defaultProps));\n    screen.getByText('test-project');\n  });","file":"frontend/features/editor-navigation-toolbar/components/project-name-editable-label.test.js","skipped":false,"dir":"services/web/test"},{"name":"displays an editable input when the edit button is clicked","suites":["<ProjectNameEditableLabel />","when the name is editable"],"updatePoint":{"line":19,"column":66,"index":799},"line":19,"code":"    it('displays an editable input when the edit button is clicked', function () {\n      render( /*#__PURE__*/React.createElement(ProjectNameEditableLabel, editableProps));\n      fireEvent.click(screen.getByRole('button'));\n      screen.getByRole('textbox');\n    });","file":"frontend/features/editor-navigation-toolbar/components/project-name-editable-label.test.js","skipped":false,"dir":"services/web/test"},{"name":"displays an editable input when the project name is double clicked","suites":["<ProjectNameEditableLabel />","when the name is editable"],"updatePoint":{"line":24,"column":74,"index":1074},"line":24,"code":"    it('displays an editable input when the project name is double clicked', function () {\n      render( /*#__PURE__*/React.createElement(ProjectNameEditableLabel, editableProps));\n      fireEvent.doubleClick(screen.getByText('test-project'));\n      screen.getByRole('textbox');\n    });","file":"frontend/features/editor-navigation-toolbar/components/project-name-editable-label.test.js","skipped":false,"dir":"services/web/test"},{"name":"calls \"onChange\" when the project name is updated","suites":["<ProjectNameEditableLabel />","when the name is editable"],"updatePoint":{"line":29,"column":57,"index":1344},"line":29,"code":"    it('calls \"onChange\" when the project name is updated', function () {\n      const props = {\n        ...editableProps,\n        onChange: sinon.stub()\n      };\n      render( /*#__PURE__*/React.createElement(ProjectNameEditableLabel, props));\n      fireEvent.doubleClick(screen.getByText('test-project'));\n      const input = screen.getByRole('textbox');\n      fireEvent.change(input, {\n        target: {\n          value: 'new project name'\n        }\n      });\n      fireEvent.keyDown(input, {\n        key: 'Enter'\n      });\n      expect(props.onChange).to.be.calledWith('new project name');\n    });","file":"frontend/features/editor-navigation-toolbar/components/project-name-editable-label.test.js","skipped":false,"dir":"services/web/test"},{"name":"calls \"onChange\" when the input loses focus","suites":["<ProjectNameEditableLabel />","when the name is editable"],"updatePoint":{"line":47,"column":51,"index":1939},"line":47,"code":"    it('calls \"onChange\" when the input loses focus', function () {\n      const props = {\n        ...editableProps,\n        onChange: sinon.stub()\n      };\n      render( /*#__PURE__*/React.createElement(ProjectNameEditableLabel, props));\n      fireEvent.doubleClick(screen.getByText('test-project'));\n      const input = screen.getByRole('textbox');\n      fireEvent.change(input, {\n        target: {\n          value: 'new project name'\n        }\n      });\n      fireEvent.blur(screen.getByRole('textbox'));\n      expect(props.onChange).to.be.calledWith('new project name');\n    });","file":"frontend/features/editor-navigation-toolbar/components/project-name-editable-label.test.js","skipped":false,"dir":"services/web/test"},{"name":"the edit button is not displayed","suites":["<ProjectNameEditableLabel />","when the name is not editable"],"updatePoint":{"line":69,"column":40,"index":2669},"line":69,"code":"    it('the edit button is not displayed', function () {\n      render( /*#__PURE__*/React.createElement(ProjectNameEditableLabel, nonEditableProps));\n      expect(screen.queryByRole('button')).to.not.exist;\n    });","file":"frontend/features/editor-navigation-toolbar/components/project-name-editable-label.test.js","skipped":false,"dir":"services/web/test"},{"name":"does not display an editable input when the project name is double clicked","suites":["<ProjectNameEditableLabel />","when the name is not editable"],"updatePoint":{"line":73,"column":82,"index":2926},"line":73,"code":"    it('does not display an editable input when the project name is double clicked', function () {\n      render( /*#__PURE__*/React.createElement(ProjectNameEditableLabel, nonEditableProps));\n      fireEvent.doubleClick(screen.getByText('test-project'));\n      expect(screen.queryByRole('textbox')).to.not.exist;\n    });","file":"frontend/features/editor-navigation-toolbar/components/project-name-editable-label.test.js","skipped":false,"dir":"services/web/test"},{"name":"is not displayed by default","suites":["<ToolbarHeader />","cobranding logo"],"updatePoint":{"line":26,"column":35,"index":922},"line":26,"code":"    it('is not displayed by default', function () {\n      renderWithEditorContext( /*#__PURE__*/React.createElement(ToolbarHeader, defaultProps));\n      expect(screen.queryByRole('link', {\n        name: 'variation'\n      })).to.not.exist;\n    });","file":"frontend/features/editor-navigation-toolbar/components/toolbar-header.test.js","skipped":false,"dir":"services/web/test"},{"name":"is displayed when cobranding data is available","suites":["<ToolbarHeader />","cobranding logo"],"updatePoint":{"line":32,"column":54,"index":1188},"line":32,"code":"    it('is displayed when cobranding data is available', function () {\n      const props = {\n        ...defaultProps,\n        cobranding: {\n          brandVariationHomeUrl: 'http://cobranding',\n          brandVariationName: 'variation',\n          logoImgUrl: 'http://cobranding/logo'\n        }\n      };\n      renderWithEditorContext( /*#__PURE__*/React.createElement(ToolbarHeader, props));\n      screen.getByRole('link', {\n        name: 'variation'\n      });\n    });","file":"frontend/features/editor-navigation-toolbar/components/toolbar-header.test.js","skipped":false,"dir":"services/web/test"},{"name":"is displayed by default","suites":["<ToolbarHeader />","track changes toggle button"],"updatePoint":{"line":48,"column":31,"index":1695},"line":48,"code":"    it('is displayed by default', function () {\n      renderWithEditorContext( /*#__PURE__*/React.createElement(ToolbarHeader, defaultProps));\n      screen.getByText('Review');\n    });","file":"frontend/features/editor-navigation-toolbar/components/toolbar-header.test.js","skipped":false,"dir":"services/web/test"},{"name":"is not displayed when \"isRestrictedTokenMember\" prop is set to true","suites":["<ToolbarHeader />","track changes toggle button"],"updatePoint":{"line":52,"column":75,"index":1924},"line":52,"code":"    it('is not displayed when \"isRestrictedTokenMember\" prop is set to true', function () {\n      const props = {\n        ...defaultProps,\n        isRestrictedTokenMember: true\n      };\n      renderWithEditorContext( /*#__PURE__*/React.createElement(ToolbarHeader, props));\n      expect(screen.queryByText('Review')).to.not.exist;\n    });","file":"frontend/features/editor-navigation-toolbar/components/toolbar-header.test.js","skipped":false,"dir":"services/web/test"},{"name":"is not displayed when \"trackChangesVisible\" prop is set to false","suites":["<ToolbarHeader />","track changes toggle button"],"updatePoint":{"line":60,"column":72,"index":2260},"line":60,"code":"    it('is not displayed when \"trackChangesVisible\" prop is set to false', function () {\n      const props = {\n        ...defaultProps,\n        trackChangesVisible: false\n      };\n      renderWithEditorContext( /*#__PURE__*/React.createElement(ToolbarHeader, props));\n      expect(screen.queryByText('Review')).to.not.exist;\n    });","file":"frontend/features/editor-navigation-toolbar/components/toolbar-header.test.js","skipped":false,"dir":"services/web/test"},{"name":"is displayed by default","suites":["<ToolbarHeader />","History toggle button"],"updatePoint":{"line":70,"column":31,"index":2608},"line":70,"code":"    it('is displayed by default', function () {\n      renderWithEditorContext( /*#__PURE__*/React.createElement(ToolbarHeader, defaultProps));\n      screen.getByText('History');\n    });","file":"frontend/features/editor-navigation-toolbar/components/toolbar-header.test.js","skipped":false,"dir":"services/web/test"},{"name":"is not displayed when \"isRestrictedTokenMember\" prop is set to true","suites":["<ToolbarHeader />","History toggle button"],"updatePoint":{"line":74,"column":75,"index":2838},"line":74,"code":"    it('is not displayed when \"isRestrictedTokenMember\" prop is set to true', function () {\n      const props = {\n        ...defaultProps,\n        isRestrictedTokenMember: true\n      };\n      renderWithEditorContext( /*#__PURE__*/React.createElement(ToolbarHeader, props));\n      expect(screen.queryByText('History')).to.not.exist;\n    });","file":"frontend/features/editor-navigation-toolbar/components/toolbar-header.test.js","skipped":false,"dir":"services/web/test"},{"name":"is displayed by default","suites":["<ToolbarHeader />","Chat toggle button"],"updatePoint":{"line":84,"column":31,"index":3187},"line":84,"code":"    it('is displayed by default', function () {\n      renderWithEditorContext( /*#__PURE__*/React.createElement(ToolbarHeader, defaultProps));\n      screen.getByText('Chat');\n    });","file":"frontend/features/editor-navigation-toolbar/components/toolbar-header.test.js","skipped":false,"dir":"services/web/test"},{"name":"is not displayed when \"isRestrictedTokenMember\" prop is set to true","suites":["<ToolbarHeader />","Chat toggle button"],"updatePoint":{"line":88,"column":75,"index":3414},"line":88,"code":"    it('is not displayed when \"isRestrictedTokenMember\" prop is set to true', function () {\n      const props = {\n        ...defaultProps,\n        isRestrictedTokenMember: true\n      };\n      renderWithEditorContext( /*#__PURE__*/React.createElement(ToolbarHeader, props));\n      expect(screen.queryByText('Chat')).to.not.exist;\n    });","file":"frontend/features/editor-navigation-toolbar/components/toolbar-header.test.js","skipped":false,"dir":"services/web/test"},{"name":"is displayed by default","suites":["<ToolbarHeader />","Publish button"],"updatePoint":{"line":98,"column":31,"index":3756},"line":98,"code":"    it('is displayed by default', function () {\n      renderWithEditorContext( /*#__PURE__*/React.createElement(ToolbarHeader, defaultProps));\n      screen.getByText('Submit');\n    });","file":"frontend/features/editor-navigation-toolbar/components/toolbar-header.test.js","skipped":false,"dir":"services/web/test"},{"name":"is not displayed for users with no publish permissions","suites":["<ToolbarHeader />","Publish button"],"updatePoint":{"line":102,"column":62,"index":3972},"line":102,"code":"    it('is not displayed for users with no publish permissions', function () {\n      const props = {\n        ...defaultProps,\n        hasPublishPermissions: false\n      };\n      renderWithEditorContext( /*#__PURE__*/React.createElement(ToolbarHeader, props));\n      expect(screen.queryByText('Submit')).to.not.exist;\n    });","file":"frontend/features/editor-navigation-toolbar/components/toolbar-header.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders an empty input","suites":["<FileTreeCreateNameInput/>"],"updatePoint":{"line":16,"column":28,"index":734},"line":16,"code":"  it('renders an empty input', async function () {\n    renderWithContext( /*#__PURE__*/React.createElement(FileTreeCreateNameProvider, null, /*#__PURE__*/React.createElement(FileTreeCreateNameInput, null)));\n    await screen.getByLabelText('File Name');\n    await screen.getByPlaceholderText('File Name');\n  });","file":"frontend/features/file-tree/components/file-tree-create/file-tree-create-name-input.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders a custom label and placeholder","suites":["<FileTreeCreateNameInput/>"],"updatePoint":{"line":21,"column":44,"index":1062},"line":21,"code":"  it('renders a custom label and placeholder', async function () {\n    renderWithContext( /*#__PURE__*/React.createElement(FileTreeCreateNameProvider, null, /*#__PURE__*/React.createElement(FileTreeCreateNameInput, {\n      label: \"File name in this project\",\n      placeholder: \"Enter a file name\\u2026\"\n    })));\n    await screen.getByLabelText('File name in this project');\n    await screen.getByPlaceholderText('Enter a file name…');\n  });","file":"frontend/features/file-tree/components/file-tree-create/file-tree-create-name-input.test.js","skipped":false,"dir":"services/web/test"},{"name":"uses an initial name","suites":["<FileTreeCreateNameInput/>"],"updatePoint":{"line":29,"column":26,"index":1487},"line":29,"code":"  it('uses an initial name', async function () {\n    renderWithContext( /*#__PURE__*/React.createElement(FileTreeCreateNameProvider, {\n      initialName: \"test.tex\"\n    }, /*#__PURE__*/React.createElement(FileTreeCreateNameInput, null)));\n    const input = await screen.getByLabelText('File Name');\n    expect(input.value).to.equal('test.tex');\n  });","file":"frontend/features/file-tree/components/file-tree-create/file-tree-create-name-input.test.js","skipped":false,"dir":"services/web/test"},{"name":"focuses the name","suites":["<FileTreeCreateNameInput/>"],"updatePoint":{"line":36,"column":22,"index":1834},"line":36,"code":"  it('focuses the name', async function () {\n    renderWithContext( /*#__PURE__*/React.createElement(FileTreeCreateNameProvider, {\n      initialName: \"test.tex\"\n    }, /*#__PURE__*/React.createElement(FileTreeCreateNameInput, {\n      focusName: true\n    })));\n    const input = await screen.getByLabelText('File Name');\n    expect(input.value).to.equal('test.tex');\n    await waitFor(() => expect(window.requestAnimationFrame).to.have.been.calledOnce);\n\n    // https://github.com/jsdom/jsdom/issues/2995\n    // \"window.getSelection doesn't work with selection of <input> element\"\n    // const selection = window.getSelection().toString()\n    // expect(selection).to.equal('test')\n\n    // wait for the selection to update\n    await new Promise(resolve => window.setTimeout(resolve, 100));\n    expect(input.selectionStart).to.equal(0);\n    expect(input.selectionEnd).to.equal(4);\n  });","file":"frontend/features/file-tree/components/file-tree-create/file-tree-create-name-input.test.js","skipped":false,"dir":"services/web/test"},{"name":"handles invalid file names","suites":["<FileTreeModalCreateFile/>"],"updatePoint":{"line":20,"column":32,"index":924},"line":20,"code":"  it('handles invalid file names', async function () {\n    renderWithContext( /*#__PURE__*/React.createElement(OpenWithMode, {\n      mode: \"doc\"\n    }));\n    const submitButton = screen.getByRole('button', {\n      name: 'Create'\n    });\n    const input = screen.getByLabelText('File Name');\n    expect(input.value).to.equal('name.tex');\n    expect(submitButton.disabled).to.be.false;\n    expect(screen.queryAllByRole('alert')).to.be.empty;\n    fireEvent.change(input, {\n      target: {\n        value: ''\n      }\n    });\n    expect(submitButton.disabled).to.be.true;\n    screen.getByRole((role, element) => role === 'alert' && element.textContent.match(/File name is empty/));\n    await fireEvent.change(input, {\n      target: {\n        value: 'test.tex'\n      }\n    });\n    expect(submitButton.disabled).to.be.false;\n    expect(screen.queryAllByRole('alert')).to.be.empty;\n    await fireEvent.change(input, {\n      target: {\n        value: 'oops/i/did/it/again'\n      }\n    });\n    expect(submitButton.disabled).to.be.true;\n    screen.getByRole((role, element) => role === 'alert' && element.textContent.match(/contains invalid characters/));\n  });","file":"frontend/features/file-tree/components/file-tree-create/file-tree-modal-create-file.test.js","skipped":false,"dir":"services/web/test"},{"name":"displays an error when the file limit is reached","suites":["<FileTreeModalCreateFile/>"],"updatePoint":{"line":53,"column":54,"index":2095},"line":53,"code":"  it('displays an error when the file limit is reached', async function () {\n    const rootFolder = [{\n      _id: 'root-folder-id',\n      name: 'rootFolder',\n      docs: Array.from({\n        length: 10\n      }, (_, index) => ({\n        _id: `entity-${index}`\n      })),\n      fileRefs: [],\n      folders: []\n    }];\n    renderWithContext( /*#__PURE__*/React.createElement(OpenWithMode, {\n      mode: \"doc\"\n    }), {\n      contextProps: {\n        rootFolder\n      }\n    });\n    screen.getByRole((role, element) => role === 'alert' && element.textContent.match(/This project has reached the \\d+ file limit/));\n  });","file":"frontend/features/file-tree/components/file-tree-create/file-tree-modal-create-file.test.js","skipped":false,"dir":"services/web/test"},{"name":"displays a warning when the file limit is nearly reached","suites":["<FileTreeModalCreateFile/>"],"updatePoint":{"line":74,"column":62,"index":2717},"line":74,"code":"  it('displays a warning when the file limit is nearly reached', async function () {\n    const rootFolder = [{\n      _id: 'root-folder-id',\n      name: 'rootFolder',\n      docs: Array.from({\n        length: 9\n      }, (_, index) => ({\n        _id: `entity-${index}`\n      })),\n      fileRefs: [],\n      folders: []\n    }];\n    renderWithContext( /*#__PURE__*/React.createElement(OpenWithMode, {\n      mode: \"doc\"\n    }), {\n      contextProps: {\n        rootFolder\n      }\n    });\n    screen.getByText(/This project is approaching the file limit \\(\\d+\\/\\d+\\)/);\n  });","file":"frontend/features/file-tree/components/file-tree-create/file-tree-modal-create-file.test.js","skipped":false,"dir":"services/web/test"},{"name":"counts files in nested folders","suites":["<FileTreeModalCreateFile/>"],"updatePoint":{"line":95,"column":36,"index":3258},"line":95,"code":"  it('counts files in nested folders', async function () {\n    const rootFolder = [{\n      _id: 'root-folder-id',\n      name: 'rootFolder',\n      docs: [{\n        _id: 'doc-1'\n      }],\n      fileRefs: [],\n      folders: [{\n        docs: [{\n          _id: 'doc-2'\n        }],\n        fileRefs: [],\n        folders: [{\n          docs: [{\n            _id: 'doc-3'\n          }, {\n            _id: 'doc-4'\n          }, {\n            _id: 'doc-5'\n          }, {\n            _id: 'doc-6'\n          }, {\n            _id: 'doc-7'\n          }],\n          fileRefs: [],\n          folders: []\n        }]\n      }]\n    }];\n    renderWithContext( /*#__PURE__*/React.createElement(OpenWithMode, {\n      mode: \"doc\"\n    }), {\n      contextProps: {\n        rootFolder\n      }\n    });\n    screen.getByText(/This project is approaching the file limit \\(\\d+\\/\\d+\\)/);\n  });","file":"frontend/features/file-tree/components/file-tree-create/file-tree-modal-create-file.test.js","skipped":false,"dir":"services/web/test"},{"name":"counts folders toward the limit","suites":["<FileTreeModalCreateFile/>"],"updatePoint":{"line":134,"column":37,"index":4113},"line":134,"code":"  it('counts folders toward the limit', async function () {\n    const rootFolder = [{\n      _id: 'root-folder-id',\n      name: 'rootFolder',\n      docs: [{\n        _id: 'doc-1'\n      }],\n      fileRefs: [],\n      folders: [{\n        docs: [],\n        fileRefs: [],\n        folders: []\n      }, {\n        docs: [],\n        fileRefs: [],\n        folders: []\n      }, {\n        docs: [],\n        fileRefs: [],\n        folders: []\n      }, {\n        docs: [],\n        fileRefs: [],\n        folders: []\n      }, {\n        docs: [],\n        fileRefs: [],\n        folders: []\n      }, {\n        docs: [],\n        fileRefs: [],\n        folders: []\n      }, {\n        docs: [],\n        fileRefs: [],\n        folders: []\n      }, {\n        docs: [],\n        fileRefs: [],\n        folders: []\n      }]\n    }];\n    renderWithContext( /*#__PURE__*/React.createElement(OpenWithMode, {\n      mode: \"doc\"\n    }), {\n      contextProps: {\n        rootFolder\n      }\n    });\n    screen.getByText(/This project is approaching the file limit \\(\\d+\\/\\d+\\)/);\n  });","file":"frontend/features/file-tree/components/file-tree-create/file-tree-modal-create-file.test.js","skipped":false,"dir":"services/web/test"},{"name":"creates a new file when the form is submitted","suites":["<FileTreeModalCreateFile/>"],"updatePoint":{"line":185,"column":51,"index":5170},"line":185,"code":"  it('creates a new file when the form is submitted', async function () {\n    fetchMock.post('express:/project/:projectId/doc', () => 204);\n    renderWithContext( /*#__PURE__*/React.createElement(OpenWithMode, {\n      mode: \"doc\"\n    }));\n    const input = screen.getByLabelText('File Name');\n    await fireEvent.change(input, {\n      target: {\n        value: 'test.tex'\n      }\n    });\n    const submitButton = screen.getByRole('button', {\n      name: 'Create'\n    });\n    await fireEvent.click(submitButton);\n    expect(fetchMock.called('express:/project/:projectId/doc', {\n      body: {\n        parent_folder_id: 'root-folder-id',\n        name: 'test.tex'\n      }\n    })).to.be.true;\n  });","file":"frontend/features/file-tree/components/file-tree-create/file-tree-modal-create-file.test.js","skipped":false,"dir":"services/web/test"},{"name":"imports a new file from a project","suites":["<FileTreeModalCreateFile/>"],"updatePoint":{"line":207,"column":39,"index":5851},"line":207,"code":"  it('imports a new file from a project', async function () {\n    fetchMock.get('path:/user/projects', {\n      projects: [{\n        _id: 'test-project',\n        name: 'This Project'\n      }, {\n        _id: 'project-1',\n        name: 'Project One'\n      }, {\n        _id: 'project-2',\n        name: 'Project Two'\n      }]\n    }).get('express:/project/:projectId/entities', {\n      entities: [{\n        path: '/foo.tex'\n      }, {\n        path: '/bar.tex'\n      }]\n    }).post('express:/project/:projectId/compile', {\n      status: 'success',\n      outputFiles: [{\n        build: 'test',\n        path: 'baz.jpg'\n      }, {\n        build: 'test',\n        path: 'ball.jpg'\n      }]\n    }).post('express:/project/:projectId/linked_file', () => 204);\n    renderWithContext( /*#__PURE__*/React.createElement(OpenWithMode, {\n      mode: \"project\"\n    }));\n\n    // initial state, no project selected\n    const projectInput = screen.getByLabelText('Select a Project');\n    expect(projectInput.disabled).to.be.true;\n    await waitFor(() => {\n      expect(projectInput.disabled).to.be.false;\n    });\n\n    // the submit button should be disabled\n    const submitButton = screen.getByRole('button', {\n      name: 'Create'\n    });\n    expect(submitButton.disabled).to.be.true;\n\n    // the source file selector should be disabled\n    const fileInput = screen.getByLabelText('Select a File');\n    expect(fileInput.disabled).to.be.true;\n    // TODO: check for options length, excluding current project\n\n    // select a project\n    await fireEvent.change(projectInput, {\n      target: {\n        value: 'project-2'\n      }\n    }); // TODO: getByRole('option')?\n\n    // wait for the source file selector to be enabled\n    await waitFor(() => {\n      expect(fileInput.disabled).to.be.false;\n    });\n    expect(screen.queryByLabelText('Select a File')).not.to.be.null;\n    expect(screen.queryByLabelText('Select an Output File')).to.be.null;\n    expect(submitButton.disabled).to.be.true;\n\n    // TODO: check for fileInput options length, excluding current project\n\n    // click on the button to toggle between source and output files\n    const sourceTypeButton = screen.getByRole('button', {\n      // NOTE: When changing the label, update the other tests with this label as well.\n      name: 'select from output files'\n    });\n    await fireEvent.click(sourceTypeButton);\n\n    // wait for the output file selector to be enabled\n    const entityInput = screen.getByLabelText('Select an Output File');\n    await waitFor(() => {\n      expect(entityInput.disabled).to.be.false;\n    });\n    expect(screen.queryByLabelText('Select a File')).to.be.null;\n    expect(screen.queryByLabelText('Select an Output File')).not.to.be.null;\n    expect(submitButton.disabled).to.be.true;\n\n    // TODO: check for entityInput options length, excluding current project\n    await fireEvent.change(entityInput, {\n      target: {\n        value: 'ball.jpg'\n      }\n    }); // TODO: getByRole('option')?\n\n    await waitFor(() => {\n      expect(submitButton.disabled).to.be.false;\n    });\n    await fireEvent.click(submitButton);\n    expect(fetchMock.called('express:/project/:projectId/linked_file', {\n      body: {\n        name: 'ball.jpg',\n        provider: 'project_output_file',\n        parent_folder_id: 'root-folder-id',\n        data: {\n          source_project_id: 'project-2',\n          source_output_file_path: 'ball.jpg',\n          build_id: 'test'\n        }\n      }\n    })).to.be.true;\n  });","file":"frontend/features/file-tree/components/file-tree-create/file-tree-modal-create-file.test.js","skipped":false,"dir":"services/web/test"},{"name":"should not show the import from output file mode","suites":["<FileTreeModalCreateFile/>","when the output files feature is not available"],"updatePoint":{"line":322,"column":56,"index":9692},"line":322,"code":"    it('should not show the import from output file mode', async function () {\n      fetchMock.get('path:/user/projects', {\n        projects: [{\n          _id: 'test-project',\n          name: 'This Project'\n        }, {\n          _id: 'project-1',\n          name: 'Project One'\n        }, {\n          _id: 'project-2',\n          name: 'Project Two'\n        }]\n      });\n      renderWithContext( /*#__PURE__*/React.createElement(OpenWithMode, {\n        mode: \"project\"\n      }));\n\n      // should not show the toggle\n      expect(screen.queryByRole('button', {\n        name: 'select from output files'\n      })).to.be.null;\n    });","file":"frontend/features/file-tree/components/file-tree-create/file-tree-modal-create-file.test.js","skipped":false,"dir":"services/web/test"},{"name":"import from a URL when the form is submitted","suites":["<FileTreeModalCreateFile/>","when the output files feature is not available"],"updatePoint":{"line":345,"column":50,"index":10323},"line":345,"code":"  it('import from a URL when the form is submitted', async function () {\n    fetchMock.post('express:/project/:projectId/linked_file', () => 204);\n    renderWithContext( /*#__PURE__*/React.createElement(OpenWithMode, {\n      mode: \"url\"\n    }));\n    const urlInput = screen.getByLabelText('URL to fetch the file from');\n    const nameInput = screen.getByLabelText('File Name In This Project');\n    await fireEvent.change(urlInput, {\n      target: {\n        value: 'https://example.com/example.tex'\n      }\n    });\n\n    // check that the name has updated automatically\n    expect(nameInput.value).to.equal('example.tex');\n    await fireEvent.change(nameInput, {\n      target: {\n        value: 'test.tex'\n      }\n    });\n\n    // check that the name can still be edited manually\n    expect(nameInput.value).to.equal('test.tex');\n    const submitButton = screen.getByRole('button', {\n      name: 'Create'\n    });\n    await fireEvent.click(submitButton);\n    expect(fetchMock.called('express:/project/:projectId/linked_file', {\n      body: {\n        name: 'test.tex',\n        provider: 'url',\n        parent_folder_id: 'root-folder-id',\n        data: {\n          url: 'https://example.com/example.tex'\n        }\n      }\n    })).to.be.true;\n  });","file":"frontend/features/file-tree/components/file-tree-create/file-tree-modal-create-file.test.js","skipped":false,"dir":"services/web/test"},{"name":"uploads a dropped file","suites":["<FileTreeModalCreateFile/>","when the output files feature is not available"],"updatePoint":{"line":383,"column":28,"index":11542},"line":383,"code":"  it('uploads a dropped file', async function () {\n    const xhr = sinon.useFakeXMLHttpRequest();\n    const requests = [];\n    xhr.onCreate = request => {\n      requests.push(request);\n    };\n    renderWithContext( /*#__PURE__*/React.createElement(OpenWithMode, {\n      mode: \"upload\"\n    }));\n\n    // the submit button should not be present\n    expect(screen.queryByRole('button', {\n      name: 'Create'\n    })).to.be.null;\n    const dropzone = screen.getByLabelText('File Uploader');\n    expect(dropzone).not.to.be.null;\n    fireEvent.drop(dropzone, {\n      dataTransfer: {\n        files: [new File(['test'], 'test.tex', {\n          type: 'text/plain'\n        })]\n      }\n    });\n    await waitFor(() => expect(requests).to.have.length(1));\n    const [request] = requests;\n    expect(request.url).to.equal('/project/123abc/upload?folder_id=root-folder-id');\n    expect(request.method).to.equal('POST');\n    xhr.restore();\n  });","file":"frontend/features/file-tree/components/file-tree-create/file-tree-modal-create-file.test.js","skipped":false,"dir":"services/web/test"},{"name":"uploads a pasted file","suites":["<FileTreeModalCreateFile/>","when the output files feature is not available"],"updatePoint":{"line":412,"column":27,"index":12471},"line":412,"code":"  it('uploads a pasted file', async function () {\n    const xhr = sinon.useFakeXMLHttpRequest();\n    const requests = [];\n    xhr.onCreate = request => {\n      requests.push(request);\n    };\n    renderWithContext( /*#__PURE__*/React.createElement(OpenWithMode, {\n      mode: \"upload\"\n    }));\n\n    // the submit button should not be present\n    expect(screen.queryByRole('button', {\n      name: 'Create'\n    })).to.be.null;\n    const dropzone = screen.getByLabelText('File Uploader');\n    expect(dropzone).not.to.be.null;\n    fireEvent.paste(dropzone, {\n      clipboardData: {\n        files: [new File(['test'], 'test.tex', {\n          type: 'text/plain'\n        })]\n      }\n    });\n    await waitFor(() => expect(requests).to.have.length(1));\n    const [request] = requests;\n    expect(request.url).to.equal('/project/123abc/upload?folder_id=root-folder-id');\n    expect(request.method).to.equal('POST');\n    xhr.restore();\n  });","file":"frontend/features/file-tree/components/file-tree-create/file-tree-modal-create-file.test.js","skipped":false,"dir":"services/web/test"},{"name":"displays upload errors","suites":["<FileTreeModalCreateFile/>","when the output files feature is not available"],"updatePoint":{"line":441,"column":28,"index":13403},"line":441,"code":"  it('displays upload errors', async function () {\n    const xhr = sinon.useFakeXMLHttpRequest();\n    const requests = [];\n    xhr.onCreate = request => {\n      requests.push(request);\n    };\n    renderWithContext( /*#__PURE__*/React.createElement(OpenWithMode, {\n      mode: \"upload\"\n    }));\n\n    // the submit button should not be present\n    expect(screen.queryByRole('button', {\n      name: 'Create'\n    })).to.be.null;\n    const dropzone = screen.getByLabelText('File Uploader');\n    expect(dropzone).not.to.be.null;\n    fireEvent.paste(dropzone, {\n      clipboardData: {\n        files: [new File(['test'], 'tes!t.tex', {\n          type: 'text/plain'\n        })]\n      }\n    });\n    await waitFor(() => expect(requests).to.have.length(1));\n    const [request] = requests;\n    expect(request.url).to.equal('/project/123abc/upload?folder_id=root-folder-id');\n    expect(request.method).to.equal('POST');\n    request.respond(422, {\n      'Content-Type': 'application/json'\n    }, '{ \"success\": false, \"error\": \"invalid_filename\" }');\n    await screen.findByText(`Upload failed: check that the file name doesn’t contain special characters, trailing/leading whitespace or more than 150 characters`);\n    xhr.restore();\n  });","file":"frontend/features/file-tree/components/file-tree-create/file-tree-modal-create-file.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders unselected","suites":["<FileTreeDoc/>"],"updatePoint":{"line":6,"column":24,"index":319},"line":6,"code":"  it('renders unselected', function () {\n    const {\n      container\n    } = renderWithContext( /*#__PURE__*/React.createElement(FileTreeDoc, {\n      name: \"foo.tex\",\n      id: \"123abc\",\n      isLinkedFile: false\n    }));\n    screen.getByRole('treeitem', {\n      selected: false\n    });\n    expect(container.querySelector('i.linked-file-highlight')).to.not.exist;\n  });","file":"frontend/features/file-tree/components/file-tree-doc.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders selected","suites":["<FileTreeDoc/>"],"updatePoint":{"line":19,"column":22,"index":687},"line":19,"code":"  it('renders selected', function () {\n    renderWithContext( /*#__PURE__*/React.createElement(FileTreeDoc, {\n      name: \"foo.tex\",\n      id: \"123abc\",\n      isLinkedFile: false\n    }), {\n      contextProps: {\n        rootFolder: [{\n          _id: 'root-folder-id',\n          name: 'rootFolder',\n          docs: [{\n            _id: '123abc'\n          }],\n          fileRefs: [],\n          folders: []\n        }]\n      }\n    });\n    const treeitem = screen.getByRole('treeitem', {\n      selected: false\n    });\n    fireEvent.click(treeitem);\n    screen.getByRole('treeitem', {\n      selected: true\n    });\n  });","file":"frontend/features/file-tree/components/file-tree-doc.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders as linked file","suites":["<FileTreeDoc/>"],"updatePoint":{"line":45,"column":28,"index":1305},"line":45,"code":"  it('renders as linked file', function () {\n    const {\n      container\n    } = renderWithContext( /*#__PURE__*/React.createElement(FileTreeDoc, {\n      name: \"foo.tex\",\n      id: \"123abc\",\n      isLinkedFile: true\n    }));\n    screen.getByRole('treeitem');\n    expect(container.querySelector('i.linked-file-highlight')).to.exist;\n  });","file":"frontend/features/file-tree/components/file-tree-doc.test.js","skipped":false,"dir":"services/web/test"},{"name":"selects","suites":["<FileTreeDoc/>"],"updatePoint":{"line":56,"column":13,"index":1628},"line":56,"code":"  it('selects', function () {\n    renderWithContext( /*#__PURE__*/React.createElement(FileTreeDoc, {\n      name: \"foo.tex\",\n      id: \"123abc\",\n      expanded: true\n    }), {\n      contextProps: {\n        rootFolder: [{\n          _id: 'root-folder-id',\n          name: 'rootFolder',\n          docs: [{\n            _id: '123abc'\n          }],\n          fileRefs: [],\n          folders: []\n        }]\n      }\n    });\n    const treeitem = screen.getByRole('treeitem', {\n      selected: false\n    });\n    fireEvent.click(treeitem);\n    screen.getByRole('treeitem', {\n      selected: true\n    });\n  });","file":"frontend/features/file-tree/components/file-tree-doc.test.js","skipped":false,"dir":"services/web/test"},{"name":"multi-selects","suites":["<FileTreeDoc/>"],"updatePoint":{"line":82,"column":19,"index":2232},"line":82,"code":"  it('multi-selects', function () {\n    renderWithContext( /*#__PURE__*/React.createElement(FileTreeDoc, {\n      name: \"foo.tex\",\n      id: \"123abc\",\n      expanded: true\n    }), {\n      contextProps: {\n        rootFolder: [{\n          _id: 'root-folder-id',\n          name: 'rootFolder',\n          docs: [{\n            _id: '123abc'\n          }],\n          fileRefs: [],\n          folders: []\n        }]\n      }\n    });\n    const treeitem = screen.getByRole('treeitem');\n    fireEvent.click(treeitem, {\n      ctrlKey: true\n    });\n    screen.getByRole('treeitem', {\n      selected: true\n    });\n  });","file":"frontend/features/file-tree/components/file-tree-doc.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders empty","suites":["<FileTreeFolderList/>"],"updatePoint":{"line":6,"column":19,"index":336},"line":6,"code":"  it('renders empty', function () {\n    renderWithContext( /*#__PURE__*/React.createElement(FileTreeFolderList, {\n      folders: [],\n      docs: [],\n      files: []\n    }));\n    screen.queryByRole('tree');\n    expect(screen.queryByRole('treeitem')).to.not.exist;\n  });","file":"frontend/features/file-tree/components/file-tree-folder-list.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders docs, files and folders","suites":["<FileTreeFolderList/>"],"updatePoint":{"line":15,"column":37,"index":623},"line":15,"code":"  it('renders docs, files and folders', function () {\n    const aFolder = {\n      _id: '456def',\n      name: 'A Folder',\n      folders: [],\n      docs: [],\n      fileRefs: []\n    };\n    const aDoc = {\n      _id: '789ghi',\n      name: 'doc.tex',\n      linkedFileData: {}\n    };\n    const aFile = {\n      _id: '987jkl',\n      name: 'file.bib',\n      linkedFileData: {}\n    };\n    renderWithContext( /*#__PURE__*/React.createElement(FileTreeFolderList, {\n      folders: [aFolder],\n      docs: [aDoc],\n      files: [aFile]\n    }));\n    screen.queryByRole('tree');\n    screen.queryByRole('treeitem', {\n      name: 'A Folder'\n    });\n    screen.queryByRole('treeitem', {\n      name: 'doc.tex'\n    });\n    screen.queryByRole('treeitem', {\n      name: 'file.bib'\n    });\n  });","file":"frontend/features/file-tree/components/file-tree-folder-list.test.js","skipped":false,"dir":"services/web/test"},{"name":"without write permissions","suites":["<FileTreeFolderList/>","selection and multi-selection"],"updatePoint":{"line":50,"column":33,"index":1446},"line":50,"code":"    it('without write permissions', function () {\n      const docs = [{\n        _id: '1',\n        name: '1.tex'\n      }, {\n        _id: '2',\n        name: '2.tex'\n      }];\n      renderWithContext( /*#__PURE__*/React.createElement(FileTreeFolderList, {\n        folders: [],\n        docs: docs,\n        files: []\n      }), {\n        contextProps: {\n          permissionsLevel: 'readOnly',\n          rootFolder: [{\n            _id: 'root-folder-id',\n            name: 'rootFolder',\n            docs: [{\n              _id: '1'\n            }, {\n              _id: '2'\n            }],\n            fileRefs: [],\n            folders: []\n          }]\n        }\n      });\n      const treeitem1 = screen.getByRole('treeitem', {\n        name: '1.tex'\n      });\n      const treeitem2 = screen.getByRole('treeitem', {\n        name: '2.tex'\n      });\n\n      // click on item 1: it gets selected\n      fireEvent.click(treeitem1);\n      screen.getByRole('treeitem', {\n        name: '1.tex',\n        selected: true\n      });\n      screen.getByRole('treeitem', {\n        name: '2.tex',\n        selected: false\n      });\n\n      // meta-click on item 2: no changes\n      fireEvent.click(treeitem2, {\n        ctrlKey: true\n      });\n      screen.getByRole('treeitem', {\n        name: '1.tex',\n        selected: true\n      });\n      screen.getByRole('treeitem', {\n        name: '2.tex',\n        selected: false\n      });\n    });","file":"frontend/features/file-tree/components/file-tree-folder-list.test.js","skipped":false,"dir":"services/web/test"},{"name":"with write permissions","suites":["<FileTreeFolderList/>","selection and multi-selection"],"updatePoint":{"line":109,"column":30,"index":2850},"line":109,"code":"    it('with write permissions', function () {\n      const docs = [{\n        _id: '1',\n        name: '1.tex'\n      }, {\n        _id: '2',\n        name: '2.tex'\n      }, {\n        _id: '3',\n        name: '3.tex'\n      }];\n      renderWithContext( /*#__PURE__*/React.createElement(FileTreeFolderList, {\n        folders: [],\n        docs: docs,\n        files: []\n      }), {\n        contextProps: {\n          rootFolder: [{\n            _id: 'root-folder-id',\n            name: 'rootFolder',\n            docs: [{\n              _id: '1'\n            }, {\n              _id: '2'\n            }, {\n              _id: '3'\n            }],\n            fileRefs: [],\n            folders: []\n          }]\n        }\n      });\n      const treeitem1 = screen.getByRole('treeitem', {\n        name: '1.tex'\n      });\n      const treeitem2 = screen.getByRole('treeitem', {\n        name: '2.tex'\n      });\n      const treeitem3 = screen.getByRole('treeitem', {\n        name: '3.tex'\n      });\n\n      // click item 1: it gets selected\n      fireEvent.click(treeitem1);\n      screen.getByRole('treeitem', {\n        name: '1.tex',\n        selected: true\n      });\n      screen.getByRole('treeitem', {\n        name: '2.tex',\n        selected: false\n      });\n      screen.getByRole('treeitem', {\n        name: '3.tex',\n        selected: false\n      });\n\n      // click on item 2: it gets selected and item 1 is not selected anymore\n      fireEvent.click(treeitem2);\n      screen.getByRole('treeitem', {\n        name: '1.tex',\n        selected: false\n      });\n      screen.getByRole('treeitem', {\n        name: '2.tex',\n        selected: true\n      });\n      screen.getByRole('treeitem', {\n        name: '3.tex',\n        selected: false\n      });\n\n      // meta-click on item 3: it gets selected and item 2 as well\n      fireEvent.click(treeitem3, {\n        ctrlKey: true\n      });\n      screen.getByRole('treeitem', {\n        name: '1.tex',\n        selected: false\n      });\n      screen.getByRole('treeitem', {\n        name: '2.tex',\n        selected: true\n      });\n      screen.getByRole('treeitem', {\n        name: '3.tex',\n        selected: true\n      });\n\n      // meta-click on item 1: add to selection\n      fireEvent.click(treeitem1, {\n        ctrlKey: true\n      });\n      screen.getByRole('treeitem', {\n        name: '1.tex',\n        selected: true\n      });\n      screen.getByRole('treeitem', {\n        name: '2.tex',\n        selected: true\n      });\n      screen.getByRole('treeitem', {\n        name: '3.tex',\n        selected: true\n      });\n\n      // meta-click on item 1: remove from selection\n      fireEvent.click(treeitem1, {\n        ctrlKey: true\n      });\n      screen.getByRole('treeitem', {\n        name: '1.tex',\n        selected: false\n      });\n      screen.getByRole('treeitem', {\n        name: '2.tex',\n        selected: true\n      });\n      screen.getByRole('treeitem', {\n        name: '3.tex',\n        selected: true\n      });\n\n      // meta-click on item 3: remove from selection\n      fireEvent.click(treeitem3, {\n        ctrlKey: true\n      });\n      screen.getByRole('treeitem', {\n        name: '1.tex',\n        selected: false\n      });\n      screen.getByRole('treeitem', {\n        name: '2.tex',\n        selected: true\n      });\n      screen.getByRole('treeitem', {\n        name: '3.tex',\n        selected: false\n      });\n\n      // meta-click on item 2: cannot unselect\n      fireEvent.click(treeitem2, {\n        ctrlKey: true\n      });\n      screen.getByRole('treeitem', {\n        name: '1.tex',\n        selected: false\n      });\n      screen.getByRole('treeitem', {\n        name: '2.tex',\n        selected: true\n      });\n      screen.getByRole('treeitem', {\n        name: '3.tex',\n        selected: false\n      });\n\n      // meta-click on item 3: add back to selection\n      fireEvent.click(treeitem3, {\n        ctrlKey: true\n      });\n      screen.getByRole('treeitem', {\n        name: '1.tex',\n        selected: false\n      });\n      screen.getByRole('treeitem', {\n        name: '2.tex',\n        selected: true\n      });\n      screen.getByRole('treeitem', {\n        name: '3.tex',\n        selected: true\n      });\n\n      // click on item 3: unselect other items\n      fireEvent.click(treeitem3);\n      screen.getByRole('treeitem', {\n        name: '1.tex',\n        selected: false\n      });\n      screen.getByRole('treeitem', {\n        name: '2.tex',\n        selected: false\n      });\n      screen.getByRole('treeitem', {\n        name: '3.tex',\n        selected: true\n      });\n    });","file":"frontend/features/file-tree/components/file-tree-folder-list.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders unselected","suites":["<FileTreeFolder/>"],"updatePoint":{"line":9,"column":24,"index":394},"line":9,"code":"  it('renders unselected', function () {\n    renderWithContext( /*#__PURE__*/React.createElement(FileTreeFolder, {\n      name: \"foo\",\n      id: \"123abc\",\n      folders: [],\n      docs: [],\n      files: []\n    }));\n    screen.getByRole('treeitem', {\n      selected: false\n    });\n    expect(screen.queryByRole('tree')).to.not.exist;\n  });","file":"frontend/features/file-tree/components/file-tree-folder.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders selected","suites":["<FileTreeFolder/>"],"updatePoint":{"line":22,"column":22,"index":730},"line":22,"code":"  it('renders selected', function () {\n    renderWithContext( /*#__PURE__*/React.createElement(FileTreeFolder, {\n      name: \"foo\",\n      id: \"123abc\",\n      folders: [],\n      docs: [],\n      files: []\n    }), {\n      contextProps: {\n        rootFolder: [{\n          _id: 'root-folder-id',\n          name: 'rootFolder',\n          docs: [{\n            _id: '123abc'\n          }],\n          fileRefs: [],\n          folders: []\n        }]\n      }\n    });\n    const treeitem = screen.getByRole('treeitem', {\n      selected: false\n    });\n    fireEvent.click(treeitem);\n    screen.getByRole('treeitem', {\n      selected: true\n    });\n    expect(screen.queryByRole('tree')).to.not.exist;\n  });","file":"frontend/features/file-tree/components/file-tree-folder.test.js","skipped":false,"dir":"services/web/test"},{"name":"expands","suites":["<FileTreeFolder/>"],"updatePoint":{"line":51,"column":13,"index":1410},"line":51,"code":"  it('expands', function () {\n    renderWithContext( /*#__PURE__*/React.createElement(FileTreeFolder, {\n      name: \"foo\",\n      id: \"123abc\",\n      folders: [],\n      docs: [],\n      files: []\n    }), {\n      contextProps: {\n        rootFolder: [{\n          _id: 'root-folder-id',\n          name: 'rootFolder',\n          docs: [{\n            _id: '123abc'\n          }],\n          fileRefs: [],\n          folders: []\n        }]\n      }\n    });\n    screen.getByRole('treeitem');\n    const expandButton = screen.getByRole('button', {\n      name: 'Expand'\n    });\n    fireEvent.click(expandButton);\n    screen.getByRole('tree');\n  });","file":"frontend/features/file-tree/components/file-tree-folder.test.js","skipped":false,"dir":"services/web/test"},{"name":"saves the expanded state for the next render","suites":["<FileTreeFolder/>"],"updatePoint":{"line":78,"column":50,"index":2079},"line":78,"code":"  it('saves the expanded state for the next render', function () {\n    const {\n      unmount\n    } = renderWithContext( /*#__PURE__*/React.createElement(FileTreeFolder, {\n      name: \"foo\",\n      id: \"123abc\",\n      folders: [],\n      docs: [],\n      files: []\n    }), {\n      contextProps: {\n        rootFolder: [{\n          _id: 'root-folder-id',\n          name: 'rootFolder',\n          docs: [{\n            _id: '123abc'\n          }],\n          fileRefs: [],\n          folders: []\n        }]\n      }\n    });\n    expect(screen.queryByRole('tree')).to.not.exist;\n    const expandButton = screen.getByRole('button', {\n      name: 'Expand'\n    });\n    fireEvent.click(expandButton);\n    screen.getByRole('tree');\n    unmount();\n    renderWithContext( /*#__PURE__*/React.createElement(FileTreeFolder, {\n      name: \"foo\",\n      id: \"123abc\",\n      folders: [],\n      docs: [],\n      files: []\n    }));\n    screen.getByRole('tree');\n  });","file":"frontend/features/file-tree/components/file-tree-folder.test.js","skipped":false,"dir":"services/web/test"},{"name":"does not display if file is not selected","suites":["<FileTreeitemInner />","menu"],"updatePoint":{"line":13,"column":48,"index":673},"line":13,"code":"    it('does not display if file is not selected', function () {\n      renderWithContext( /*#__PURE__*/React.createElement(FileTreeitemInner, {\n        id: \"123abc\",\n        name: \"bar.tex\",\n        isSelected: false\n      }), {});\n      expect(screen.queryByRole('menu', {\n        visible: false\n      })).to.not.exist;\n    });","file":"frontend/features/file-tree/components/file-tree-item/file-tree-item-inner.test.js","skipped":false,"dir":"services/web/test"},{"name":"does not display without write permissions","suites":["<FileTreeitemInner />","context menu"],"updatePoint":{"line":25,"column":50,"index":1051},"line":25,"code":"    it('does not display without write permissions', function () {\n      const {\n        container\n      } = renderWithContext( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FileTreeitemInner, {\n        id: \"123abc\",\n        name: \"bar.tex\",\n        isSelected: true\n      }), /*#__PURE__*/React.createElement(FileTreeContextMenu, null)), {\n        contextProps: {\n          permissionsLevel: 'readOnly'\n        }\n      });\n      const entityElement = container.querySelector('div.entity');\n      fireEvent.contextMenu(entityElement);\n      expect(screen.queryByRole('menu')).to.not.exist;\n    });","file":"frontend/features/file-tree/components/file-tree-item/file-tree-item-inner.test.js","skipped":false,"dir":"services/web/test"},{"name":"open / close","suites":["<FileTreeitemInner />","context menu"],"updatePoint":{"line":41,"column":20,"index":1661},"line":41,"code":"    it('open / close', function () {\n      const {\n        container\n      } = renderWithContext( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FileTreeitemInner, {\n        id: \"123abc\",\n        name: \"bar.tex\",\n        isSelected: true\n      }), /*#__PURE__*/React.createElement(FileTreeContextMenu, null)));\n      expect(screen.queryByRole('menu')).to.be.null;\n\n      // open the context menu\n      const entityElement = container.querySelector('div.entity');\n      fireEvent.contextMenu(entityElement);\n      screen.getByRole('menu', {\n        visible: true\n      });\n\n      // close the context menu\n      fireEvent.click(entityElement);\n      expect(screen.queryByRole('menu')).to.be.null;\n    });","file":"frontend/features/file-tree/components/file-tree-item/file-tree-item-inner.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders name","suites":["<FileTreeitemInner />","name"],"updatePoint":{"line":64,"column":20,"index":2445},"line":64,"code":"    it('renders name', function () {\n      renderWithContext( /*#__PURE__*/React.createElement(FileTreeitemInner, {\n        id: \"123abc\",\n        name: \"bar.tex\",\n        isSelected: true\n      }));\n      screen.getByRole('button', {\n        name: 'bar.tex'\n      });\n      expect(screen.queryByRole('textbox')).to.not.exist;\n    });","file":"frontend/features/file-tree/components/file-tree-item/file-tree-item-inner.test.js","skipped":false,"dir":"services/web/test"},{"name":"starts rename on menu item click","suites":["<FileTreeitemInner />","name"],"updatePoint":{"line":75,"column":40,"index":2799},"line":75,"code":"    it('starts rename on menu item click', function () {\n      renderWithContext( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FileTreeitemInner, {\n        id: \"123abc\",\n        name: \"bar.tex\",\n        isSelected: true\n      }), /*#__PURE__*/React.createElement(FileTreeContextMenu, null)), {\n        contextProps: {\n          rootDocId: '123abc',\n          rootFolder: [{\n            _id: 'root-folder-id',\n            name: 'rootFolder',\n            docs: [{\n              _id: '123abc',\n              name: 'bar.tex'\n            }],\n            folders: [],\n            fileRefs: []\n          }]\n        }\n      });\n      const toggleButton = screen.getByRole('button', {\n        name: 'Menu'\n      });\n      fireEvent.click(toggleButton);\n      const renameButton = screen.getByRole('menuitem', {\n        name: 'Rename'\n      });\n      fireEvent.click(renameButton);\n      expect(screen.queryByRole('button', {\n        name: 'bar.tex'\n      })).to.not.exist;\n      screen.getByRole('textbox');\n    });","file":"frontend/features/file-tree/components/file-tree-item/file-tree-item-inner.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders name as button","suites":["<FileTreeItemName />"],"updatePoint":{"line":17,"column":28,"index":658},"line":17,"code":"  it('renders name as button', function () {\n    renderWithContext( /*#__PURE__*/React.createElement(FileTreeItemName, {\n      name: \"foo.tex\",\n      isSelected: true,\n      setIsDraggable: setIsDraggable\n    }));\n    screen.getByRole('button', {\n      name: 'foo.tex'\n    });\n    expect(screen.queryByRole('textbox')).to.not.exist;\n  });","file":"frontend/features/file-tree/components/file-tree-item/file-tree-item-name.test.js","skipped":false,"dir":"services/web/test"},{"name":"doesn't start renaming on unselected component","suites":["<FileTreeItemName />"],"updatePoint":{"line":28,"column":52,"index":1021},"line":28,"code":"  it(\"doesn't start renaming on unselected component\", function () {\n    renderWithContext( /*#__PURE__*/React.createElement(FileTreeItemName, {\n      name: \"foo.tex\",\n      isSelected: false,\n      setIsDraggable: setIsDraggable\n    }));\n    const button = screen.queryByRole('button');\n    fireEvent.click(button);\n    fireEvent.click(button);\n    fireEvent.doubleClick(button);\n    expect(screen.queryByRole('textbox')).to.not.exist;\n  });","file":"frontend/features/file-tree/components/file-tree-item/file-tree-item-name.test.js","skipped":false,"dir":"services/web/test"},{"name":"start renaming on double-click","suites":["<FileTreeItemName />"],"updatePoint":{"line":40,"column":36,"index":1448},"line":40,"code":"  it('start renaming on double-click', function () {\n    renderWithContext( /*#__PURE__*/React.createElement(FileTreeItemName, {\n      name: \"foo.tex\",\n      isSelected: true,\n      setIsDraggable: setIsDraggable\n    }));\n    const button = screen.queryByRole('button');\n    fireEvent.click(button);\n    fireEvent.click(button);\n    fireEvent.doubleClick(button);\n    screen.getByRole('textbox');\n    expect(screen.queryByRole('button')).to.not.exist;\n    expect(window.requestAnimationFrame).to.be.calledOnce;\n    expect(setIsDraggable).to.be.calledWith(false);\n  });","file":"frontend/features/file-tree/components/file-tree-item/file-tree-item-name.test.js","skipped":false,"dir":"services/web/test"},{"name":"cannot start renaming in read-only","suites":["<FileTreeItemName />"],"updatePoint":{"line":55,"column":40,"index":2021},"line":55,"code":"  it('cannot start renaming in read-only', function () {\n    renderWithContext( /*#__PURE__*/React.createElement(FileTreeItemName, {\n      name: \"foo.tex\",\n      isSelected: true,\n      setIsDraggable: setIsDraggable\n    }), {\n      contextProps: {\n        permissionsLevel: 'readOnly'\n      }\n    });\n    const button = screen.queryByRole('button');\n    fireEvent.click(button);\n    fireEvent.click(button);\n    fireEvent.doubleClick(button);\n    expect(screen.queryByRole('textbox')).to.not.exist;\n  });","file":"frontend/features/file-tree/components/file-tree-item/file-tree-item-name.test.js","skipped":false,"dir":"services/web/test"},{"name":"on Escape","suites":["<FileTreeItemName />","stop renaming"],"updatePoint":{"line":89,"column":17,"index":3056},"line":89,"code":"    it('on Escape', function () {\n      const input = screen.getByRole('textbox');\n      fireEvent.keyDown(input, {\n        key: 'Escape'\n      });\n      screen.getByRole('button', {\n        name: 'foo.tex'\n      });\n      expect(setIsDraggable).to.be.calledWith(true);\n    });","file":"frontend/features/file-tree/components/file-tree-item/file-tree-item-name.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders","suites":["<FileTreeRoot/>"],"updatePoint":{"line":24,"column":13,"index":828},"line":24,"code":"  it('renders', function () {\n    const rootFolder = [{\n      _id: 'root-folder-id',\n      name: 'rootFolder',\n      docs: [{\n        _id: '456def',\n        name: 'main.tex'\n      }],\n      folders: [],\n      fileRefs: []\n    }];\n    const {\n      container\n    } = renderWithEditorContext( /*#__PURE__*/React.createElement(FileTreeRoot, {\n      refProviders: {},\n      reindexReferences: () => null,\n      setRefProviderEnabled: () => null,\n      setStartedFreeTrial: () => null,\n      onSelect: onSelect,\n      onInit: onInit,\n      isConnected: true\n    }), {\n      rootFolder,\n      projectId: '123abc',\n      rootDocId: '456def',\n      features: {},\n      permissionsLevel: 'owner'\n    });\n    screen.queryByRole('tree');\n    screen.getByRole('treeitem');\n    screen.getByRole('treeitem', {\n      name: 'main.tex',\n      selected: true\n    });\n    expect(container.querySelector('.disconnected-overlay')).to.not.exist;\n  });","file":"frontend/features/file-tree/components/file-tree-root.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders with invalid selected doc in local storage","suites":["<FileTreeRoot/>"],"updatePoint":{"line":60,"column":56,"index":1801},"line":60,"code":"  it('renders with invalid selected doc in local storage', async function () {\n    global.localStorage.setItem('doc.open_id.123abc', JSON.stringify('not-a-valid-id'));\n    const rootFolder = [{\n      _id: 'root-folder-id',\n      name: 'rootFolder',\n      docs: [{\n        _id: '456def',\n        name: 'main.tex'\n      }],\n      folders: [],\n      fileRefs: []\n    }];\n    renderWithEditorContext( /*#__PURE__*/React.createElement(FileTreeRoot, {\n      refProviders: {},\n      reindexReferences: () => null,\n      setRefProviderEnabled: () => null,\n      setStartedFreeTrial: () => null,\n      onSelect: onSelect,\n      onInit: onInit,\n      isConnected: true\n    }), {\n      rootFolder,\n      projectId: '123abc',\n      rootDocId: '456def',\n      features: {},\n      permissionsLevel: 'owner'\n    });\n\n    // as a proxy to check that the invalid entity ha not been select we start\n    // a delete and ensure the modal is displayed (the cancel button can be\n    // selected) This is needed to make sure the test fail.\n    const treeitemFile = screen.getByRole('treeitem', {\n      name: 'main.tex'\n    });\n    fireEvent.click(treeitemFile, {\n      ctrlKey: true\n    });\n    const toggleButton = screen.getByRole('button', {\n      name: 'Menu'\n    });\n    fireEvent.click(toggleButton);\n    const deleteButton = screen.getByRole('menuitem', {\n      name: 'Delete'\n    });\n    fireEvent.click(deleteButton);\n    await waitFor(() => screen.getByRole('button', {\n      name: 'Cancel'\n    }));\n  });","file":"frontend/features/file-tree/components/file-tree-root.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders disconnected overlay","suites":["<FileTreeRoot/>"],"updatePoint":{"line":109,"column":34,"index":3272},"line":109,"code":"  it('renders disconnected overlay', function () {\n    const rootFolder = [{\n      _id: 'root-folder-id',\n      name: 'rootFolder',\n      docs: [{\n        _id: '456def',\n        name: 'main.tex'\n      }],\n      folders: [],\n      fileRefs: []\n    }];\n    const {\n      container\n    } = renderWithEditorContext( /*#__PURE__*/React.createElement(FileTreeRoot, {\n      onSelect: onSelect,\n      onInit: onInit,\n      isConnected: false,\n      refProviders: {},\n      reindexReferences: () => null,\n      setRefProviderEnabled: () => null,\n      setStartedFreeTrial: () => null\n    }), {\n      rootFolder,\n      projectId: '123abc',\n      rootDocId: '456def',\n      features: {},\n      permissionsLevel: 'owner'\n    });\n    expect(container.querySelector('.disconnected-overlay')).to.exist;\n  });","file":"frontend/features/file-tree/components/file-tree-root.test.js","skipped":false,"dir":"services/web/test"},{"name":"fire onSelect","suites":["<FileTreeRoot/>"],"updatePoint":{"line":139,"column":19,"index":4051},"line":139,"code":"  it('fire onSelect', function () {\n    const rootFolder = [{\n      _id: 'root-folder-id',\n      name: 'rootFolder',\n      docs: [{\n        _id: '456def',\n        name: 'main.tex'\n      }, {\n        _id: '789ghi',\n        name: 'other.tex'\n      }],\n      folders: [],\n      fileRefs: []\n    }];\n    renderWithEditorContext( /*#__PURE__*/React.createElement(FileTreeRoot, {\n      refProviders: {},\n      reindexReferences: () => null,\n      setRefProviderEnabled: () => null,\n      setStartedFreeTrial: () => null,\n      onSelect: onSelect,\n      onInit: onInit,\n      isConnected: true\n    }), {\n      rootFolder,\n      projectId: '123abc',\n      rootDocId: '456def',\n      features: {},\n      permissionsLevel: 'readOnly'\n    });\n    sinon.assert.calledOnce(onSelect);\n    sinon.assert.calledWithMatch(onSelect, [sinon.match({\n      entity: {\n        _id: '456def',\n        name: 'main.tex'\n      }\n    })]);\n    onSelect.reset();\n    screen.queryByRole('tree');\n    const treeitem = screen.getByRole('treeitem', {\n      name: 'other.tex'\n    });\n    fireEvent.click(treeitem);\n    sinon.assert.calledOnce(onSelect);\n    sinon.assert.calledWithMatch(onSelect, [sinon.match({\n      entity: {\n        _id: '789ghi',\n        name: 'other.tex'\n      }\n    })]);\n  });","file":"frontend/features/file-tree/components/file-tree-root.test.js","skipped":false,"dir":"services/web/test"},{"name":"listen to editor.openDoc","suites":["<FileTreeRoot/>"],"updatePoint":{"line":189,"column":30,"index":5328},"line":189,"code":"  it('listen to editor.openDoc', function () {\n    const rootFolder = [{\n      _id: 'root-folder-id',\n      name: 'rootFolder',\n      docs: [{\n        _id: '456def',\n        name: 'main.tex'\n      }, {\n        _id: '789ghi',\n        name: 'other.tex'\n      }],\n      folders: [],\n      fileRefs: []\n    }];\n    renderWithEditorContext( /*#__PURE__*/React.createElement(FileTreeRoot, {\n      refProviders: {},\n      reindexReferences: () => null,\n      setRefProviderEnabled: () => null,\n      setStartedFreeTrial: () => null,\n      onSelect: onSelect,\n      onInit: onInit,\n      isConnected: true\n    }), {\n      rootFolder,\n      projectId: '123abc',\n      rootDocId: '456def',\n      features: {},\n      permissionsLevel: 'owner'\n    });\n    screen.getByRole('treeitem', {\n      name: 'main.tex',\n      selected: true\n    });\n\n    // entities not found should be ignored\n    window.dispatchEvent(new CustomEvent('editor.openDoc', {\n      detail: 'not-an-id'\n    }));\n    screen.getByRole('treeitem', {\n      name: 'main.tex',\n      selected: true\n    });\n    window.dispatchEvent(new CustomEvent('editor.openDoc', {\n      detail: '789ghi'\n    }));\n    screen.getByRole('treeitem', {\n      name: 'main.tex',\n      selected: false\n    });\n    screen.getByRole('treeitem', {\n      name: 'other.tex',\n      selected: true\n    });\n  });","file":"frontend/features/file-tree/components/file-tree-root.test.js","skipped":false,"dir":"services/web/test"},{"name":"only shows a menu button when a single item is selected","suites":["<FileTreeRoot/>"],"updatePoint":{"line":243,"column":61,"index":6693},"line":243,"code":"  it('only shows a menu button when a single item is selected', function () {\n    const rootFolder = [{\n      _id: 'root-folder-id',\n      name: 'rootFolder',\n      docs: [{\n        _id: '456def',\n        name: 'main.tex'\n      }, {\n        _id: '789ghi',\n        name: 'other.tex'\n      }],\n      folders: [],\n      fileRefs: []\n    }];\n    renderWithEditorContext( /*#__PURE__*/React.createElement(FileTreeRoot, {\n      refProviders: {},\n      reindexReferences: () => null,\n      setRefProviderEnabled: () => null,\n      setStartedFreeTrial: () => null,\n      onSelect: onSelect,\n      onInit: onInit,\n      isConnected: true\n    }), {\n      rootFolder,\n      projectId: '123abc',\n      rootDocId: '456def',\n      features: {},\n      permissionsLevel: 'owner'\n    });\n    const main = screen.getByRole('treeitem', {\n      name: 'main.tex',\n      selected: true\n    });\n    const other = screen.getByRole('treeitem', {\n      name: 'other.tex',\n      selected: false\n    });\n\n    // single item selected: menu button is visible\n    expect(screen.queryAllByRole('button', {\n      name: 'Menu'\n    })).to.have.length(1);\n\n    // select the other item\n    fireEvent.click(other);\n    screen.getByRole('treeitem', {\n      name: 'main.tex',\n      selected: false\n    });\n    screen.getByRole('treeitem', {\n      name: 'other.tex',\n      selected: true\n    });\n\n    // single item selected: menu button is visible\n    expect(screen.queryAllByRole('button', {\n      name: 'Menu'\n    })).to.have.length(1);\n\n    // multi-select the main item\n    fireEvent.click(main, {\n      ctrlKey: true\n    });\n    screen.getByRole('treeitem', {\n      name: 'main.tex',\n      selected: true\n    });\n    screen.getByRole('treeitem', {\n      name: 'other.tex',\n      selected: true\n    });\n\n    // multiple items selected: no menu button is visible\n    expect(screen.queryAllByRole('button', {\n      name: 'Menu'\n    })).to.have.length(0);\n  });","file":"frontend/features/file-tree/components/file-tree-root.test.js","skipped":false,"dir":"services/web/test"},{"name":"without selected files","suites":["<FileTreeToolbar/>"],"updatePoint":{"line":9,"column":28,"index":390},"line":9,"code":"  it('without selected files', function () {\n    renderWithContext( /*#__PURE__*/React.createElement(FileTreeToolbar, null));\n    screen.getByRole('button', {\n      name: 'New File'\n    });\n    screen.getByRole('button', {\n      name: 'New Folder'\n    });\n    screen.getByRole('button', {\n      name: 'Upload'\n    });\n    expect(screen.queryByRole('button', {\n      name: 'Rename'\n    })).to.not.exist;\n    expect(screen.queryByRole('button', {\n      name: 'Delete'\n    })).to.not.exist;\n  });","file":"frontend/features/file-tree/components/file-tree-toolbar.test.js","skipped":false,"dir":"services/web/test"},{"name":"read-only","suites":["<FileTreeToolbar/>"],"updatePoint":{"line":27,"column":15,"index":871},"line":27,"code":"  it('read-only', function () {\n    renderWithContext( /*#__PURE__*/React.createElement(FileTreeToolbar, null), {\n      contextProps: {\n        permissionsLevel: 'readOnly'\n      }\n    });\n    expect(screen.queryByRole('button')).to.not.exist;\n  });","file":"frontend/features/file-tree/components/file-tree-toolbar.test.js","skipped":false,"dir":"services/web/test"},{"name":"with one selected file","suites":["<FileTreeToolbar/>"],"updatePoint":{"line":35,"column":28,"index":1134},"line":35,"code":"  it('with one selected file', function () {\n    renderWithContext( /*#__PURE__*/React.createElement(FileTreeToolbar, null), {\n      contextProps: {\n        rootDocId: '456def',\n        rootFolder: [{\n          _id: 'root-folder-id',\n          name: 'rootFolder',\n          docs: [{\n            _id: '456def',\n            name: 'main.tex'\n          }],\n          folders: [],\n          fileRefs: []\n        }]\n      }\n    });\n    screen.getByRole('button', {\n      name: 'New File'\n    });\n    screen.getByRole('button', {\n      name: 'New Folder'\n    });\n    screen.getByRole('button', {\n      name: 'Upload'\n    });\n    screen.getByRole('button', {\n      name: 'Rename'\n    });\n    screen.getByRole('button', {\n      name: 'Delete'\n    });\n  });","file":"frontend/features/file-tree/components/file-tree-toolbar.test.js","skipped":false,"dir":"services/web/test"},{"name":"opens on contextMenu event","suites":["FileTree Context Menu Flow"],"updatePoint":{"line":21,"column":32,"index":755},"line":21,"code":"  it('opens on contextMenu event', async function () {\n    const rootFolder = [{\n      _id: 'root-folder-id',\n      name: 'rootFolder',\n      docs: [{\n        _id: '456def',\n        name: 'main.tex'\n      }],\n      folders: [],\n      fileRefs: []\n    }];\n    renderWithEditorContext( /*#__PURE__*/React.createElement(FileTreeRoot, {\n      refProviders: {},\n      reindexReferences: () => null,\n      setRefProviderEnabled: () => null,\n      setStartedFreeTrial: () => null,\n      onSelect: onSelect,\n      onInit: onInit,\n      isConnected: true\n    }), {\n      rootFolder,\n      projectId: '123abc',\n      rootDocId: '456def'\n    });\n    const treeitem = screen.getByRole('button', {\n      name: 'main.tex'\n    });\n    expect(screen.queryByRole('menu')).to.be.null;\n    fireEvent.contextMenu(treeitem);\n    screen.getByRole('menu');\n  });","file":"frontend/features/file-tree/flows/context-menu.test.js","skipped":false,"dir":"services/web/test"},{"name":"doesn't open in read only mode","suites":["FileTree Context Menu Flow"],"updatePoint":{"line":52,"column":36,"index":1599},"line":52,"code":"  it(\"doesn't open in read only mode\", async function () {\n    const rootFolder = [{\n      _id: 'root-folder-id',\n      name: 'rootFolder',\n      docs: [{\n        _id: '456def',\n        name: 'main.tex'\n      }],\n      folders: [],\n      fileRefs: []\n    }];\n    renderWithEditorContext( /*#__PURE__*/React.createElement(FileTreeRoot, {\n      refProviders: {},\n      reindexReferences: () => null,\n      setRefProviderEnabled: () => null,\n      setStartedFreeTrial: () => null,\n      onSelect: onSelect,\n      onInit: onInit,\n      isConnected: true\n    }), {\n      rootFolder,\n      projectId: '123abc',\n      rootDocId: '456def',\n      permissionsLevel: 'readOnly'\n    });\n    const treeitem = screen.getByRole('button', {\n      name: 'main.tex'\n    });\n    fireEvent.contextMenu(treeitem);\n    expect(screen.queryByRole('menu')).to.not.exist;\n  });","file":"frontend/features/file-tree/flows/context-menu.test.js","skipped":false,"dir":"services/web/test"},{"name":"add to root when no files are selected","suites":["FileTree Create Folder Flow"],"updatePoint":{"line":24,"column":44,"index":881},"line":24,"code":"  it('add to root when no files are selected', async function () {\n    const rootFolder = [{\n      _id: 'root-folder-id',\n      name: 'rootFolder',\n      docs: [{\n        _id: '456def',\n        name: 'main.tex'\n      }],\n      folders: [],\n      fileRefs: []\n    }];\n    renderWithEditorContext( /*#__PURE__*/React.createElement(FileTreeRoot, {\n      refProviders: {},\n      reindexReferences: () => null,\n      setRefProviderEnabled: () => null,\n      setStartedFreeTrial: () => null,\n      onSelect: onSelect,\n      onInit: onInit,\n      isConnected: true\n    }), {\n      socket: new MockedSocket(),\n      rootFolder,\n      projectId: '123abc'\n    });\n    const newFolderName = 'Foo Bar In Root';\n    const matcher = /\\/project\\/\\w+\\/folder/;\n    const response = {\n      folders: [],\n      fileRefs: [],\n      docs: [],\n      _id: fakeId(),\n      name: newFolderName\n    };\n    fetchMock.post(matcher, response);\n    await fireCreateFolder(newFolderName);\n    const lastCallBody = JSON.parse(fetchMock.lastCall(matcher)[1].body);\n    expect(lastCallBody.name).to.equal(newFolderName);\n    expect(lastCallBody.parent_folder_id).to.equal('root-folder-id');\n    window._ide.socket.socketClient.emit('reciveNewFolder', 'root-folder-id', {\n      _id: fakeId(),\n      name: newFolderName,\n      docs: [],\n      fileRefs: [],\n      folders: []\n    });\n    await screen.findByRole('treeitem', {\n      name: newFolderName\n    });\n  });","file":"frontend/features/file-tree/flows/create-folder.test.js","skipped":false,"dir":"services/web/test"},{"name":"add to folder from folder","suites":["FileTree Create Folder Flow"],"updatePoint":{"line":73,"column":31,"index":2298},"line":73,"code":"  it('add to folder from folder', async function () {\n    const rootFolder = [{\n      _id: 'root-folder-id',\n      name: 'rootFolder',\n      docs: [],\n      folders: [{\n        _id: '789ghi',\n        name: 'thefolder',\n        docs: [],\n        fileRefs: [],\n        folders: []\n      }],\n      fileRefs: []\n    }];\n    renderWithEditorContext( /*#__PURE__*/React.createElement(FileTreeRoot, {\n      refProviders: {},\n      reindexReferences: () => null,\n      setRefProviderEnabled: () => null,\n      setStartedFreeTrial: () => null,\n      onSelect: onSelect,\n      onInit: onInit,\n      isConnected: true\n    }), {\n      socket: new MockedSocket(),\n      rootFolder,\n      projectId: '123abc',\n      rootDocId: '789ghi'\n    });\n    const expandButton = screen.getByRole('button', {\n      name: 'Expand'\n    });\n    fireEvent.click(expandButton);\n    const newFolderName = 'Foo Bar In thefolder';\n    const matcher = /\\/project\\/\\w+\\/folder/;\n    const response = {\n      folders: [],\n      fileRefs: [],\n      docs: [],\n      _id: fakeId(),\n      name: newFolderName\n    };\n    fetchMock.post(matcher, response);\n    await fireCreateFolder(newFolderName);\n    const lastCallBody = JSON.parse(fetchMock.lastCall(matcher)[1].body);\n    expect(lastCallBody.name).to.equal(newFolderName);\n    expect(lastCallBody.parent_folder_id).to.equal('789ghi');\n    window._ide.socket.socketClient.emit('reciveNewFolder', '789ghi', {\n      _id: fakeId(),\n      name: newFolderName,\n      docs: [],\n      fileRefs: [],\n      folders: []\n    });\n\n    // find the created folder\n    await screen.findByRole('treeitem', {\n      name: newFolderName\n    });\n\n    // collapse the parent folder; created folder should not be rendered anymore\n    fireEvent.click(expandButton);\n    expect(screen.queryByRole('treeitem', {\n      name: newFolderName\n    })).to.not.exist;\n  });","file":"frontend/features/file-tree/flows/create-folder.test.js","skipped":false,"dir":"services/web/test"},{"name":"add to folder from child","suites":["FileTree Create Folder Flow"],"updatePoint":{"line":138,"column":30,"index":4151},"line":138,"code":"  it('add to folder from child', async function () {\n    const rootFolder = [{\n      _id: 'root-folder-id',\n      name: 'rootFolder',\n      docs: [],\n      folders: [{\n        _id: '789ghi',\n        name: 'thefolder',\n        docs: [],\n        fileRefs: [{\n          _id: '456def',\n          name: 'sub.tex'\n        }],\n        folders: []\n      }],\n      fileRefs: []\n    }];\n    renderWithEditorContext( /*#__PURE__*/React.createElement(FileTreeRoot, {\n      refProviders: {},\n      reindexReferences: () => null,\n      setRefProviderEnabled: () => null,\n      setStartedFreeTrial: () => null,\n      onSelect: onSelect,\n      onInit: onInit,\n      isConnected: true\n    }), {\n      socket: new MockedSocket(),\n      rootFolder,\n      projectId: '123abc',\n      rootDocId: '456def'\n    });\n    const newFolderName = 'Foo Bar In thefolder';\n    const matcher = /\\/project\\/\\w+\\/folder/;\n    const response = {\n      folders: [],\n      fileRefs: [],\n      docs: [],\n      _id: fakeId(),\n      name: newFolderName\n    };\n    fetchMock.post(matcher, response);\n    await fireCreateFolder(newFolderName);\n    const lastCallBody = JSON.parse(fetchMock.lastCall(matcher)[1].body);\n    expect(lastCallBody.name).to.equal(newFolderName);\n    expect(lastCallBody.parent_folder_id).to.equal('789ghi');\n    window._ide.socket.socketClient.emit('reciveNewFolder', '789ghi', {\n      _id: fakeId(),\n      name: newFolderName,\n      docs: [],\n      fileRefs: [],\n      folders: []\n    });\n\n    // find the created folder\n    await screen.findByRole('treeitem', {\n      name: newFolderName\n    });\n\n    // collapse the parent folder; created folder should not be rendered anymore\n    fireEvent.click(screen.getByRole('button', {\n      name: 'Collapse'\n    }));\n    expect(screen.queryByRole('treeitem', {\n      name: newFolderName\n    })).to.not.exist;\n  });","file":"frontend/features/file-tree/flows/create-folder.test.js","skipped":false,"dir":"services/web/test"},{"name":"prevents adding duplicate or invalid names","suites":["FileTree Create Folder Flow"],"updatePoint":{"line":204,"column":48,"index":6012},"line":204,"code":"  it('prevents adding duplicate or invalid names', async function () {\n    const rootFolder = [{\n      _id: 'root-folder-id',\n      name: 'rootFolder',\n      docs: [{\n        _id: '456def',\n        name: 'existingFile'\n      }],\n      folders: [],\n      fileRefs: []\n    }];\n    renderWithEditorContext( /*#__PURE__*/React.createElement(FileTreeRoot, {\n      refProviders: {},\n      reindexReferences: () => null,\n      setRefProviderEnabled: () => null,\n      setStartedFreeTrial: () => null,\n      onSelect: onSelect,\n      onInit: onInit,\n      isConnected: true\n    }), {\n      socket: new MockedSocket(),\n      rootFolder,\n      projectId: '123abc',\n      rootDocId: '456def'\n    });\n    let newFolderName = 'existingFile';\n    await fireCreateFolder(newFolderName);\n    expect(fetchMock.called()).to.be.false;\n    await screen.findByRole('alert', {\n      name: 'A file or folder with this name already exists',\n      hidden: true\n    });\n    newFolderName = 'in/valid ';\n    setFolderName(newFolderName);\n    await screen.findByRole('alert', {\n      name: 'File name is empty or contains invalid characters',\n      hidden: true\n    });\n  });","file":"frontend/features/file-tree/flows/create-folder.test.js","skipped":false,"dir":"services/web/test"},{"name":"removes item","suites":["FileTree Delete Entity Flow","single entity"],"updatePoint":{"line":62,"column":20,"index":1943},"line":62,"code":"    it('removes item', async function () {\n      const fetchMatcher = /\\/project\\/\\w+\\/doc\\/\\w+/;\n      fetchMock.delete(fetchMatcher, 204);\n      const modalDeleteButton = await getModalDeleteButton();\n      fireEvent.click(modalDeleteButton);\n      window._ide.socket.socketClient.emit('removeEntity', '456def');\n      await waitFor(() => {\n        expect(screen.queryByRole('treeitem', {\n          name: 'main.tex',\n          hidden: true // treeitem might be hidden behind the modal\n        })).to.not.exist;\n        expect(screen.queryByRole('treeitem', {\n          name: 'main.tex'\n        })).to.not.exist;\n\n        // check that the confirmation modal is closed\n        expect(screen.queryByText(/Are you sure/)).to.not.exist;\n      });\n      const [lastFetchPath] = fetchMock.lastCall(fetchMatcher);\n      expect(lastFetchPath).to.equal('/project/123abc/doc/456def');\n    });","file":"frontend/features/file-tree/flows/delete-entity.test.js","skipped":false,"dir":"services/web/test"},{"name":"continues delete on 404s","suites":["FileTree Delete Entity Flow","single entity"],"updatePoint":{"line":83,"column":32,"index":2840},"line":83,"code":"    it('continues delete on 404s', async function () {\n      fetchMock.delete(/\\/project\\/\\w+\\/doc\\/\\w+/, 404);\n      const modalDeleteButton = await getModalDeleteButton();\n      fireEvent.click(modalDeleteButton);\n      window._ide.socket.socketClient.emit('removeEntity', '456def');\n\n      // check that the confirmation modal is open\n      screen.getByText(/Are you sure/);\n      await waitFor(() => {\n        expect(screen.queryByRole('treeitem', {\n          name: 'main.tex',\n          hidden: true // treeitem might be hidden behind the modal\n        })).to.not.exist;\n        expect(screen.queryByRole('treeitem', {\n          name: 'main.tex'\n        })).to.not.exist;\n\n        // check that the confirmation modal is closed\n        // is not, the 404 probably triggered a bug\n        expect(screen.queryByText(/Are you sure/)).to.not.exist;\n      });\n    });","file":"frontend/features/file-tree/flows/delete-entity.test.js","skipped":false,"dir":"services/web/test"},{"name":"aborts delete on error","suites":["FileTree Delete Entity Flow","single entity"],"updatePoint":{"line":105,"column":30,"index":3706},"line":105,"code":"    it('aborts delete on error', async function () {\n      const fetchMatcher = /\\/project\\/\\w+\\/doc\\/\\w+/;\n      fetchMock.delete(fetchMatcher, 500);\n      const modalDeleteButton = await getModalDeleteButton();\n      fireEvent.click(modalDeleteButton);\n\n      // The modal should still be open, but the file should not be deleted\n      await screen.findByRole('treeitem', {\n        name: 'main.tex',\n        hidden: true\n      });\n    });","file":"frontend/features/file-tree/flows/delete-entity.test.js","skipped":false,"dir":"services/web/test"},{"name":"removes the folder","suites":["FileTree Delete Entity Flow","folders"],"updatePoint":{"line":168,"column":26,"index":5555},"line":168,"code":"    it('removes the folder', function () {\n      expect(screen.queryByRole('treeitem', {\n        name: 'folder'\n      })).to.not.exist;\n    });","file":"frontend/features/file-tree/flows/delete-entity.test.js","skipped":false,"dir":"services/web/test"},{"name":"leaves the main file selected","suites":["FileTree Delete Entity Flow","folders"],"updatePoint":{"line":173,"column":37,"index":5710},"line":173,"code":"    it('leaves the main file selected', function () {\n      screen.getByRole('treeitem', {\n        name: 'main.tex',\n        selected: true\n      });\n    });","file":"frontend/features/file-tree/flows/delete-entity.test.js","skipped":false,"dir":"services/web/test"},{"name":"unselect the child entity","suites":["FileTree Delete Entity Flow","folders"],"updatePoint":{"line":179,"column":33,"index":5864},"line":179,"code":"    it('unselect the child entity', async function () {\n      // as a proxy to check that the child entity has been unselect we start\n      // a delete and ensure the modal is displayed (the cancel button can be\n      // selected) This is needed to make sure the test fail.\n      const toggleButton = screen.getByRole('button', {\n        name: 'Menu'\n      });\n      fireEvent.click(toggleButton);\n      const deleteButton = screen.getByRole('menuitem', {\n        name: 'Delete'\n      });\n      fireEvent.click(deleteButton);\n      await waitFor(() => screen.getByRole('button', {\n        name: 'Cancel'\n      }));\n    });","file":"frontend/features/file-tree/flows/delete-entity.test.js","skipped":false,"dir":"services/web/test"},{"name":"removes all items","suites":["FileTree Delete Entity Flow","multiple entities"],"updatePoint":{"line":254,"column":25,"index":8158},"line":254,"code":"    it('removes all items', async function () {\n      const fetchMatcher = /\\/project\\/\\w+\\/(doc|file)\\/\\w+/;\n      fetchMock.delete(fetchMatcher, 204);\n      const modalDeleteButton = await getModalDeleteButton();\n      fireEvent.click(modalDeleteButton);\n      window._ide.socket.socketClient.emit('removeEntity', '456def');\n      window._ide.socket.socketClient.emit('removeEntity', '789ghi');\n      await waitFor(() => {\n        for (const name of ['main.tex', 'my.bib']) {\n          expect(screen.queryByRole('treeitem', {\n            name,\n            hidden: true // treeitem might be hidden behind the modal\n          })).to.not.exist;\n          expect(screen.queryByRole('treeitem', {\n            name\n          })).to.not.exist;\n\n          // check that the confirmation modal is closed\n          expect(screen.queryByText(/Are you sure/)).to.not.exist;\n        }\n      });\n      const [firstFetchPath, secondFetchPath] = fetchMock.calls().map(([url]) => url);\n      expect(firstFetchPath).to.equal('/project/123abc/doc/456def');\n      expect(secondFetchPath).to.equal('/project/123abc/file/789ghi');\n    });","file":"frontend/features/file-tree/flows/delete-entity.test.js","skipped":false,"dir":"services/web/test"},{"name":"renames doc","suites":["FileTree Rename Entity Flow"],"updatePoint":{"line":62,"column":17,"index":1722},"line":62,"code":"  it('renames doc', function () {\n    const fetchMatcher = /\\/project\\/\\w+\\/doc\\/\\w+\\/rename/;\n    fetchMock.post(fetchMatcher, 204);\n    const input = initItemRename('a.tex');\n    fireEvent.change(input, {\n      target: {\n        value: 'b.tex'\n      }\n    });\n    fireEvent.keyDown(input, {\n      key: 'Enter'\n    });\n    screen.getByRole('treeitem', {\n      name: 'b.tex'\n    });\n    const lastFetchBody = getLastFetchBody(fetchMatcher);\n    expect(lastFetchBody.name).to.equal('b.tex');\n\n    // onSelect should have been called once only: when the doc was selected for\n    // rename\n    sinon.assert.calledOnce(onSelect);\n  });","file":"frontend/features/file-tree/flows/rename-entity.test.js","skipped":false,"dir":"services/web/test"},{"name":"renames folder","suites":["FileTree Rename Entity Flow"],"updatePoint":{"line":84,"column":20,"index":2357},"line":84,"code":"  it('renames folder', function () {\n    const fetchMatcher = /\\/project\\/\\w+\\/folder\\/\\w+\\/rename/;\n    fetchMock.post(fetchMatcher, 204);\n    const input = initItemRename('folder');\n    fireEvent.change(input, {\n      target: {\n        value: 'new folder name'\n      }\n    });\n    fireEvent.keyDown(input, {\n      key: 'Enter'\n    });\n    screen.getByRole('treeitem', {\n      name: 'new folder name'\n    });\n    const lastFetchBody = getLastFetchBody(fetchMatcher);\n    expect(lastFetchBody.name).to.equal('new folder name');\n  });","file":"frontend/features/file-tree/flows/rename-entity.test.js","skipped":false,"dir":"services/web/test"},{"name":"renames file in subfolder","suites":["FileTree Rename Entity Flow"],"updatePoint":{"line":102,"column":31,"index":2902},"line":102,"code":"  it('renames file in subfolder', function () {\n    const fetchMatcher = /\\/project\\/\\w+\\/file\\/\\w+\\/rename/;\n    fetchMock.post(fetchMatcher, 204);\n    const expandButton = screen.queryByRole('button', {\n      name: 'Expand'\n    });\n    if (expandButton) fireEvent.click(expandButton);\n    const input = initItemRename('c.tex');\n    fireEvent.change(input, {\n      target: {\n        value: 'd.tex'\n      }\n    });\n    fireEvent.keyDown(input, {\n      key: 'Enter'\n    });\n    screen.getByRole('treeitem', {\n      name: 'folder'\n    });\n    screen.getByRole('treeitem', {\n      name: 'd.tex'\n    });\n    const lastFetchBody = getLastFetchBody(fetchMatcher);\n    expect(lastFetchBody.name).to.equal('d.tex');\n  });","file":"frontend/features/file-tree/flows/rename-entity.test.js","skipped":false,"dir":"services/web/test"},{"name":"reverts rename on error","suites":["FileTree Rename Entity Flow"],"updatePoint":{"line":127,"column":29,"index":3614},"line":127,"code":"  it('reverts rename on error', async function () {\n    const fetchMatcher = /\\/project\\/\\w+\\/doc\\/\\w+\\/rename/;\n    fetchMock.post(fetchMatcher, 500);\n    const input = initItemRename('a.tex');\n    fireEvent.change(input, {\n      target: {\n        value: 'b.tex'\n      }\n    });\n    fireEvent.keyDown(input, {\n      key: 'Enter'\n    });\n    screen.getByRole('treeitem', {\n      name: 'b.tex'\n    });\n  });","file":"frontend/features/file-tree/flows/rename-entity.test.js","skipped":false,"dir":"services/web/test"},{"name":"shows error modal on invalid filename","suites":["FileTree Rename Entity Flow"],"updatePoint":{"line":143,"column":43,"index":4035},"line":143,"code":"  it('shows error modal on invalid filename', async function () {\n    const input = initItemRename('a.tex');\n    fireEvent.change(input, {\n      target: {\n        value: '///'\n      }\n    });\n    fireEvent.keyDown(input, {\n      key: 'Enter'\n    });\n    await screen.findByRole('alert', {\n      name: 'File name is empty or contains invalid characters',\n      hidden: true\n    });\n  });","file":"frontend/features/file-tree/flows/rename-entity.test.js","skipped":false,"dir":"services/web/test"},{"name":"shows error modal on duplicate filename","suites":["FileTree Rename Entity Flow"],"updatePoint":{"line":158,"column":45,"index":4424},"line":158,"code":"  it('shows error modal on duplicate filename', async function () {\n    const input = initItemRename('a.tex');\n    fireEvent.change(input, {\n      target: {\n        value: 'folder'\n      }\n    });\n    fireEvent.keyDown(input, {\n      key: 'Enter'\n    });\n    await screen.findByRole('alert', {\n      name: 'A file or folder with this name already exists',\n      hidden: true\n    });\n  });","file":"frontend/features/file-tree/flows/rename-entity.test.js","skipped":false,"dir":"services/web/test"},{"name":"shows error modal on duplicate filename in subfolder","suites":["FileTree Rename Entity Flow"],"updatePoint":{"line":173,"column":58,"index":4826},"line":173,"code":"  it('shows error modal on duplicate filename in subfolder', async function () {\n    const expandButton = screen.queryByRole('button', {\n      name: 'Expand'\n    });\n    if (expandButton) fireEvent.click(expandButton);\n    const input = initItemRename('c.tex');\n    fireEvent.change(input, {\n      target: {\n        value: 'e.tex'\n      }\n    });\n    fireEvent.keyDown(input, {\n      key: 'Enter'\n    });\n    await screen.findByRole('alert', {\n      name: 'A file or folder with this name already exists',\n      hidden: true\n    });\n  });","file":"frontend/features/file-tree/flows/rename-entity.test.js","skipped":false,"dir":"services/web/test"},{"name":"shows error modal on blocked filename","suites":["FileTree Rename Entity Flow"],"updatePoint":{"line":192,"column":43,"index":5350},"line":192,"code":"  it('shows error modal on blocked filename', async function () {\n    const input = initItemRename('a.tex');\n    fireEvent.change(input, {\n      target: {\n        value: 'prototype'\n      }\n    });\n    fireEvent.keyDown(input, {\n      key: 'Enter'\n    });\n    await screen.findByRole('alert', {\n      name: 'This file name is blocked.',\n      hidden: true\n    });\n  });","file":"frontend/features/file-tree/flows/rename-entity.test.js","skipped":false,"dir":"services/web/test"},{"name":"renames doc","suites":["FileTree Rename Entity Flow","via socket event"],"updatePoint":{"line":208,"column":19,"index":5741},"line":208,"code":"    it('renames doc', function () {\n      screen.getByRole('treeitem', {\n        name: 'a.tex'\n      });\n      window._ide.socket.socketClient.emit('reciveEntityRename', '456def', 'socket.tex');\n      screen.getByRole('treeitem', {\n        name: 'socket.tex'\n      });\n    });","file":"frontend/features/file-tree/flows/rename-entity.test.js","skipped":false,"dir":"services/web/test"},{"name":"returns correct icon type","suites":["iconTypeFromName"],"updatePoint":{"line":4,"column":31,"index":209},"line":4,"code":"  it('returns correct icon type', function () {\n    expect(iconTypeFromName('main.tex')).to.equal('file');\n    expect(iconTypeFromName('main.png')).to.equal('image');\n    expect(iconTypeFromName('main.csv')).to.equal('table');\n    expect(iconTypeFromName('main.py')).to.equal('file-text');\n    expect(iconTypeFromName('main.bib')).to.equal('book');\n  });","file":"frontend/features/file-tree/util/icon-type-from-name.test.js","skipped":false,"dir":"services/web/test"},{"name":"handles missing extensions","suites":["iconTypeFromName"],"updatePoint":{"line":11,"column":32,"index":565},"line":11,"code":"  it('handles missing extensions', function () {\n    expect(iconTypeFromName('main')).to.equal('file');\n  });","file":"frontend/features/file-tree/util/icon-type-from-name.test.js","skipped":false,"dir":"services/web/test"},{"name":"lowercases extension","suites":["iconTypeFromName"],"updatePoint":{"line":14,"column":26,"index":669},"line":14,"code":"  it('lowercases extension', function () {\n    expect(iconTypeFromName('ZOTERO.BIB')).to.equal('book');\n  });","file":"frontend/features/file-tree/util/icon-type-from-name.test.js","skipped":false,"dir":"services/web/test"},{"name":"Renders the correct text for a file with the url provider","suites":["<FileViewHeader/>","header text"],"updatePoint":{"line":46,"column":65,"index":1532},"line":46,"code":"    it('Renders the correct text for a file with the url provider', function () {\n      renderWithEditorContext( /*#__PURE__*/React.createElement(FileViewHeader, {\n        file: urlFile,\n        storeReferencesKeys: () => {}\n      }));\n      screen.getByText('Imported from', {\n        exact: false\n      });\n      screen.getByText('at 3:24 am Wed, 17th Feb 21', {\n        exact: false\n      });\n    });","file":"frontend/features/file-view/components/file-view-header.test.js","skipped":false,"dir":"services/web/test"},{"name":"Renders the correct text for a file with the project_file provider","suites":["<FileViewHeader/>","header text"],"updatePoint":{"line":58,"column":74,"index":1945},"line":58,"code":"    it('Renders the correct text for a file with the project_file provider', function () {\n      renderWithEditorContext( /*#__PURE__*/React.createElement(FileViewHeader, {\n        file: projectFile,\n        storeReferencesKeys: () => {}\n      }));\n      screen.getByText('Imported from', {\n        exact: false\n      });\n      screen.getByText('Another project', {\n        exact: false\n      });\n      screen.getByText('/source-entity-path.ext, at 3:24 am Wed, 17th Feb 21', {\n        exact: false\n      });\n    });","file":"frontend/features/file-view/components/file-view-header.test.js","skipped":false,"dir":"services/web/test"},{"name":"Renders the correct text for a file with the project_output_file provider","suites":["<FileViewHeader/>","header text"],"updatePoint":{"line":73,"column":81,"index":2469},"line":73,"code":"    it('Renders the correct text for a file with the project_output_file provider', function () {\n      renderWithEditorContext( /*#__PURE__*/React.createElement(FileViewHeader, {\n        file: projectOutputFile,\n        storeReferencesKeys: () => {}\n      }));\n      screen.getByText('Imported from the output of', {\n        exact: false\n      });\n      screen.getByText('Another project', {\n        exact: false\n      });\n      screen.getByText('/source-entity-path.ext, at 3:24 am Wed, 17th Feb 21', {\n        exact: false\n      });\n    });","file":"frontend/features/file-view/components/file-view-header.test.js","skipped":false,"dir":"services/web/test"},{"name":"Changes text when the file is refreshing","suites":["<FileViewHeader/>","The refresh button"],"updatePoint":{"line":90,"column":48,"index":3039},"line":90,"code":"    it('Changes text when the file is refreshing', async function () {\n      fetchMock.post('express:/project/:project_id/linked_file/:file_id/refresh', {\n        new_file_id: '5ff7418157b4e144321df5c4'\n      });\n      renderWithEditorContext( /*#__PURE__*/React.createElement(FileViewHeader, {\n        file: projectFile,\n        storeReferencesKeys: () => {}\n      }));\n      fireEvent.click(screen.getByRole('button', {\n        name: 'Refresh'\n      }));\n      await waitForElementToBeRemoved(() => screen.getByText('Refreshing', {\n        exact: false\n      }));\n      await screen.findByText('Refresh');\n    });","file":"frontend/features/file-view/components/file-view-header.test.js","skipped":false,"dir":"services/web/test"},{"name":"Reindexes references after refreshing a file from a third-party provider","suites":["<FileViewHeader/>","The refresh button"],"updatePoint":{"line":106,"column":80,"index":3687},"line":106,"code":"    it('Reindexes references after refreshing a file from a third-party provider', async function () {\n      fetchMock.post('express:/project/:project_id/linked_file/:file_id/refresh', {\n        new_file_id: '5ff7418157b4e144321df5c4'\n      });\n      const reindexResponse = {\n        projectId: '123abc',\n        keys: ['reference1', 'reference2', 'reference3', 'reference4']\n      };\n      fetchMock.post('express:/project/:project_id/references/indexAll', reindexResponse);\n      const storeReferencesKeys = sinon.stub();\n      renderWithEditorContext( /*#__PURE__*/React.createElement(FileViewHeader, {\n        file: thirdPartyReferenceFile,\n        storeReferencesKeys: storeReferencesKeys\n      }));\n      fireEvent.click(screen.getByRole('button', {\n        name: 'Refresh'\n      }));\n      await waitForElementToBeRemoved(() => screen.getByText('Refreshing', {\n        exact: false\n      }));\n      expect(fetchMock.done()).to.be.true;\n      expect(storeReferencesKeys).to.be.calledWith(reindexResponse.keys);\n    });","file":"frontend/features/file-view/components/file-view-header.test.js","skipped":false,"dir":"services/web/test"},{"name":"exists","suites":["<FileViewHeader/>","The download button"],"updatePoint":{"line":131,"column":14,"index":4701},"line":131,"code":"    it('exists', function () {\n      renderWithEditorContext( /*#__PURE__*/React.createElement(FileViewHeader, {\n        file: urlFile,\n        storeReferencesKeys: () => {}\n      }));\n      screen.getByText('Download', {\n        exact: false\n      });\n    });","file":"frontend/features/file-view/components/file-view-header.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders an image","suites":["<FileViewImage />"],"updatePoint":{"line":13,"column":22,"index":489},"line":13,"code":"  it('renders an image', function () {\n    renderWithEditorContext( /*#__PURE__*/React.createElement(FileViewImage, {\n      fileName: file.name,\n      fileId: file.id,\n      onError: () => {},\n      onLoad: () => {}\n    }));\n    screen.getByRole('img');\n  });","file":"frontend/features/file-view/components/file-view-image.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders a text view","suites":["<FileViewText/>"],"updatePoint":{"line":19,"column":25,"index":694},"line":19,"code":"  it('renders a text view', async function () {\n    fetchMock.head('express:/project/:project_id/file/:file_id', {\n      status: 201,\n      headers: {\n        'Content-Length': 10000\n      }\n    });\n    fetchMock.get('express:/project/:project_id/file/:file_id', 'Text file content');\n    renderWithEditorContext( /*#__PURE__*/React.createElement(FileViewText, {\n      file: file,\n      onError: () => {},\n      onLoad: () => {}\n    }));\n    await screen.findByText('Text file content', {\n      exact: false\n    });\n  });","file":"frontend/features/file-view/components/file-view-text.test.js","skipped":false,"dir":"services/web/test"},{"name":"shows a loading indicator while the file is loading","suites":["<FileView/>","for a text file"],"updatePoint":{"line":29,"column":59,"index":1015},"line":29,"code":"    it('shows a loading indicator while the file is loading', async function () {\n      fetchMock.head('express:/project/:project_id/file/:file_id', {\n        status: 201,\n        headers: {\n          'Content-Length': 10000\n        }\n      });\n      fetchMock.get('express:/project/:project_id/file/:file_id', 'Text file content');\n      renderWithEditorContext( /*#__PURE__*/React.createElement(FileView, {\n        file: textFile,\n        storeReferencesKeys: () => {}\n      }));\n      await waitForElementToBeRemoved(() => screen.getByText('Loading', {\n        exact: false\n      }));\n    });","file":"frontend/features/file-view/components/file-view.test.js","skipped":false,"dir":"services/web/test"},{"name":"shows messaging if the text view could not be loaded","suites":["<FileView/>","for a text file"],"updatePoint":{"line":45,"column":60,"index":1612},"line":45,"code":"    it('shows messaging if the text view could not be loaded', async function () {\n      const unpreviewableTextFile = {\n        ...textFile,\n        name: 'example.not-tex'\n      };\n      renderWithEditorContext( /*#__PURE__*/React.createElement(FileView, {\n        file: unpreviewableTextFile,\n        storeReferencesKeys: () => {}\n      }));\n      await screen.findByText('Sorry, no preview is available', {\n        exact: false\n      });\n    });","file":"frontend/features/file-view/components/file-view.test.js","skipped":false,"dir":"services/web/test"},{"name":"shows a loading indicator while the file is loading","suites":["<FileView/>","for an image file"],"updatePoint":{"line":60,"column":59,"index":2113},"line":60,"code":"    it('shows a loading indicator while the file is loading', async function () {\n      renderWithEditorContext( /*#__PURE__*/React.createElement(FileView, {\n        file: imageFile,\n        storeReferencesKeys: () => {}\n      }));\n      screen.getByText('Loading', {\n        exact: false\n      });\n    });","file":"frontend/features/file-view/components/file-view.test.js","skipped":false,"dir":"services/web/test"},{"name":"shows messaging if the image could not be loaded","suites":["<FileView/>","for an image file"],"updatePoint":{"line":69,"column":56,"index":2417},"line":69,"code":"    it('shows messaging if the image could not be loaded', async function () {\n      renderWithEditorContext( /*#__PURE__*/React.createElement(FileView, {\n        file: imageFile,\n        storeReferencesKeys: () => {}\n      }));\n\n      // Fake the image request failing as the request is handled by the browser\n      fireEvent.error(screen.getByRole('img'));\n      await screen.findByText('Sorry, no preview is available', {\n        exact: false\n      });\n    });","file":"frontend/features/file-view/components/file-view.test.js","skipped":false,"dir":"services/web/test"},{"name":"return the file with `edited` as the last operation","suites":["autoSelectFile","for comparing version with previous"],"updatePoint":{"line":13,"column":59,"index":585},"line":13,"code":"    it('return the file with `edited` as the last operation', function () {\n      const files = [{\n        pathname: 'main.tex'\n      }, {\n        pathname: 'sample.bib'\n      }, {\n        pathname: 'frog.jpg'\n      }, {\n        pathname: 'newfile5.tex'\n      }, {\n        pathname: 'newfolder1/newfolder2/newfile2.tex'\n      }, {\n        pathname: 'newfolder1/newfile10.tex',\n        operation: 'edited'\n      }];\n      const updates = [{\n        fromV: 25,\n        toV: 26,\n        meta: {\n          users: historyUsers,\n          start_ts: 1680888731881,\n          end_ts: 1680888731881\n        },\n        labels: [],\n        pathnames: ['newfolder1/newfile10.tex'],\n        project_ops: []\n      }, {\n        fromV: 23,\n        toV: 25,\n        meta: {\n          users: historyUsers,\n          start_ts: 1680888725098,\n          end_ts: 1680888729123\n        },\n        labels: [],\n        pathnames: [],\n        project_ops: [{\n          rename: {\n            pathname: 'newfolder1/newfile3.tex',\n            newPathname: 'newfolder1/newfile10.tex'\n          },\n          atV: 24\n        }, {\n          rename: {\n            pathname: 'newfile3.tex',\n            newPathname: 'newfolder1/newfile3.tex'\n          },\n          atV: 23\n        }]\n      }, {\n        fromV: 22,\n        toV: 23,\n        meta: {\n          users: historyUsers,\n          start_ts: 1680888721015,\n          end_ts: 1680888721015\n        },\n        labels: [],\n        pathnames: ['newfile3.tex'],\n        project_ops: []\n      }, {\n        fromV: 19,\n        toV: 22,\n        meta: {\n          users: historyUsers,\n          start_ts: 1680888715364,\n          end_ts: 1680888718726\n        },\n        labels: [],\n        pathnames: [],\n        project_ops: [{\n          rename: {\n            pathname: 'newfolder1/newfolder2/newfile3.tex',\n            newPathname: 'newfile3.tex'\n          },\n          atV: 21\n        }, {\n          rename: {\n            pathname: 'newfolder1/newfile2.tex',\n            newPathname: 'newfolder1/newfolder2/newfile2.tex'\n          },\n          atV: 20\n        }, {\n          rename: {\n            pathname: 'newfolder1/newfile5.tex',\n            newPathname: 'newfile5.tex'\n          },\n          atV: 19\n        }]\n      }, {\n        fromV: 16,\n        toV: 19,\n        meta: {\n          users: historyUsers,\n          start_ts: 1680888705042,\n          end_ts: 1680888712662\n        },\n        labels: [],\n        pathnames: ['main.tex', 'newfolder1/newfile2.tex', 'newfolder1/newfile5.tex'],\n        project_ops: []\n      }, {\n        fromV: 0,\n        toV: 16,\n        meta: {\n          users: historyUsers,\n          start_ts: 1680888456499,\n          end_ts: 1680888640774\n        },\n        labels: [],\n        pathnames: [],\n        project_ops: [{\n          add: {\n            pathname: 'newfolder1/newfile2.tex'\n          },\n          atV: 15\n        }, {\n          remove: {\n            pathname: 'newfile2.tex'\n          },\n          atV: 14\n        }, {\n          rename: {\n            pathname: 'newfolder1/frog.jpg',\n            newPathname: 'frog.jpg'\n          },\n          atV: 13\n        }, {\n          rename: {\n            pathname: 'newfolder1/newfile2.tex',\n            newPathname: 'newfile2.tex'\n          },\n          atV: 12\n        }, {\n          rename: {\n            pathname: 'newfile5.tex',\n            newPathname: 'newfolder1/newfile5.tex'\n          },\n          atV: 11\n        }, {\n          rename: {\n            pathname: 'newfile4.tex',\n            newPathname: 'newfile5.tex'\n          },\n          atV: 10\n        }, {\n          add: {\n            pathname: 'newfile4.tex'\n          },\n          atV: 9\n        }, {\n          remove: {\n            pathname: 'newfolder1/newfolder2/newfile1.tex'\n          },\n          atV: 8\n        }, {\n          rename: {\n            pathname: 'frog.jpg',\n            newPathname: 'newfolder1/frog.jpg'\n          },\n          atV: 7\n        }, {\n          add: {\n            pathname: 'newfolder1/newfolder2/newfile3.tex'\n          },\n          atV: 6\n        }, {\n          add: {\n            pathname: 'newfolder1/newfile2.tex'\n          },\n          atV: 5\n        }, {\n          rename: {\n            pathname: 'newfolder1/newfile1.tex',\n            newPathname: 'newfolder1/newfolder2/newfile1.tex'\n          },\n          atV: 4\n        }, {\n          add: {\n            pathname: 'newfolder1/newfile1.tex'\n          },\n          atV: 3\n        }, {\n          add: {\n            pathname: 'frog.jpg'\n          },\n          atV: 2\n        }, {\n          add: {\n            pathname: 'sample.bib'\n          },\n          atV: 1\n        }, {\n          add: {\n            pathname: 'main.tex'\n          },\n          atV: 0\n        }]\n      }];\n      const updateSelection = {\n        update: updates[0],\n        comparing\n      };\n      const pathname = autoSelectFile(files, updateSelection, updates);\n      expect(pathname).to.equal('newfolder1/newfile10.tex');\n    });","file":"frontend/features/history/utils/auto-select-file.test.ts","skipped":false,"dir":"services/web/test"},{"name":"return file with `added` operation on highest `atV` value if no other operation is available on the latest `updates` entry","suites":["autoSelectFile","for comparing version with previous"],"updatePoint":{"line":218,"column":130,"index":5620},"line":218,"code":"    it('return file with `added` operation on highest `atV` value if no other operation is available on the latest `updates` entry', function () {\n      const files = [{\n        pathname: 'main.tex',\n        operation: 'added'\n      }, {\n        pathname: 'sample.bib',\n        operation: 'added'\n      }, {\n        pathname: 'frog.jpg',\n        operation: 'added'\n      }, {\n        pathname: 'newfile1.tex',\n        operation: 'added'\n      }];\n      const updates = [{\n        fromV: 0,\n        toV: 4,\n        meta: {\n          users: historyUsers,\n          start_ts: 1680861468999,\n          end_ts: 1680861491861\n        },\n        labels: [],\n        pathnames: [],\n        project_ops: [{\n          add: {\n            pathname: 'newfile1.tex'\n          },\n          atV: 3\n        }, {\n          add: {\n            pathname: 'frog.jpg'\n          },\n          atV: 2\n        }, {\n          add: {\n            pathname: 'sample.bib'\n          },\n          atV: 1\n        }, {\n          add: {\n            pathname: 'main.tex'\n          },\n          atV: 0\n        }]\n      }];\n      const updateSelection = {\n        update: updates[0],\n        comparing\n      };\n      const pathname = autoSelectFile(files, updateSelection, updates);\n      expect(pathname).to.equal('newfile1.tex');\n    });","file":"frontend/features/history/utils/auto-select-file.test.ts","skipped":false,"dir":"services/web/test"},{"name":"return the last non-`removed` operation with the highest `atV` value","suites":["autoSelectFile","for comparing version with previous"],"updatePoint":{"line":271,"column":76,"index":6866},"line":271,"code":"    it('return the last non-`removed` operation with the highest `atV` value', function () {\n      const files = [{\n        pathname: 'main.tex',\n        operation: 'removed',\n        deletedAtV: 6\n      }, {\n        pathname: 'sample.bib'\n      }, {\n        pathname: 'main2.tex',\n        operation: 'added'\n      }, {\n        pathname: 'main3.tex',\n        operation: 'added'\n      }];\n      const updates = [{\n        fromV: 4,\n        toV: 7,\n        meta: {\n          users: historyUsers,\n          start_ts: 1680874742389,\n          end_ts: 1680874755552\n        },\n        labels: [],\n        pathnames: [],\n        project_ops: [{\n          remove: {\n            pathname: 'main.tex'\n          },\n          atV: 6\n        }, {\n          add: {\n            pathname: 'main3.tex'\n          },\n          atV: 5\n        }, {\n          add: {\n            pathname: 'main2.tex'\n          },\n          atV: 4\n        }]\n      }, {\n        fromV: 0,\n        toV: 4,\n        meta: {\n          users: historyUsers,\n          start_ts: 1680861975947,\n          end_ts: 1680861988442\n        },\n        labels: [],\n        pathnames: [],\n        project_ops: [{\n          remove: {\n            pathname: 'frog.jpg'\n          },\n          atV: 3\n        }, {\n          add: {\n            pathname: 'frog.jpg'\n          },\n          atV: 2\n        }, {\n          add: {\n            pathname: 'sample.bib'\n          },\n          atV: 1\n        }, {\n          add: {\n            pathname: 'main.tex'\n          },\n          atV: 0\n        }]\n      }];\n      const updateSelection = {\n        update: updates[0],\n        comparing\n      };\n      const pathname = autoSelectFile(files, updateSelection, updates);\n      expect(pathname).to.equal('main3.tex');\n    });","file":"frontend/features/history/utils/auto-select-file.test.ts","skipped":false,"dir":"services/web/test"},{"name":"if `removed` is the last operation, and no other operation is available on the latest `updates` entry, with `main.tex` available as a file name somewhere in the file tree, return `main.tex`","suites":["autoSelectFile","for comparing version with previous"],"updatePoint":{"line":350,"column":197,"index":8743},"line":350,"code":"    it('if `removed` is the last operation, and no other operation is available on the latest `updates` entry, with `main.tex` available as a file name somewhere in the file tree, return `main.tex`', function () {\n      const files = [{\n        pathname: 'main.tex'\n      }, {\n        pathname: 'sample.bib'\n      }, {\n        pathname: 'frog.jpg'\n      }, {\n        pathname: 'newfolder/maybewillbedeleted.tex',\n        newPathname: 'newfolder2/maybewillbedeleted.tex',\n        operation: 'removed',\n        deletedAtV: 10\n      }];\n      const updates = [{\n        fromV: 9,\n        toV: 11,\n        meta: {\n          users: historyUsers,\n          start_ts: 1680904414419,\n          end_ts: 1680904417538\n        },\n        labels: [],\n        pathnames: [],\n        project_ops: [{\n          remove: {\n            pathname: 'newfolder2/maybewillbedeleted.tex'\n          },\n          atV: 10\n        }, {\n          rename: {\n            pathname: 'newfolder/maybewillbedeleted.tex',\n            newPathname: 'newfolder2/maybewillbedeleted.tex'\n          },\n          atV: 9\n        }]\n      }, {\n        fromV: 8,\n        toV: 9,\n        meta: {\n          users: historyUsers,\n          start_ts: 1680904410333,\n          end_ts: 1680904410333\n        },\n        labels: [],\n        pathnames: ['newfolder/maybewillbedeleted.tex'],\n        project_ops: []\n      }, {\n        fromV: 7,\n        toV: 8,\n        meta: {\n          users: historyUsers,\n          start_ts: 1680904407448,\n          end_ts: 1680904407448\n        },\n        labels: [],\n        pathnames: [],\n        project_ops: [{\n          rename: {\n            pathname: 'newfolder/tobedeleted.tex',\n            newPathname: 'newfolder/maybewillbedeleted.tex'\n          },\n          atV: 7\n        }]\n      }, {\n        fromV: 6,\n        toV: 7,\n        meta: {\n          users: historyUsers,\n          start_ts: 1680904400839,\n          end_ts: 1680904400839\n        },\n        labels: [],\n        pathnames: ['newfolder/tobedeleted.tex'],\n        project_ops: []\n      }, {\n        fromV: 5,\n        toV: 6,\n        meta: {\n          users: historyUsers,\n          start_ts: 1680904398544,\n          end_ts: 1680904398544\n        },\n        labels: [],\n        pathnames: [],\n        project_ops: [{\n          rename: {\n            pathname: 'tobedeleted.tex',\n            newPathname: 'newfolder/tobedeleted.tex'\n          },\n          atV: 5\n        }]\n      }, {\n        fromV: 4,\n        toV: 5,\n        meta: {\n          users: historyUsers,\n          start_ts: 1680904389891,\n          end_ts: 1680904389891\n        },\n        labels: [],\n        pathnames: ['tobedeleted.tex'],\n        project_ops: []\n      }, {\n        fromV: 0,\n        toV: 4,\n        meta: {\n          users: historyUsers,\n          start_ts: 1680904363778,\n          end_ts: 1680904385308\n        },\n        labels: [],\n        pathnames: [],\n        project_ops: [{\n          add: {\n            pathname: 'tobedeleted.tex'\n          },\n          atV: 3\n        }, {\n          add: {\n            pathname: 'frog.jpg'\n          },\n          atV: 2\n        }, {\n          add: {\n            pathname: 'sample.bib'\n          },\n          atV: 1\n        }, {\n          add: {\n            pathname: 'main.tex'\n          },\n          atV: 0\n        }]\n      }];\n      const updateSelection = {\n        update: updates[0],\n        comparing\n      };\n      const pathname = autoSelectFile(files, updateSelection, updates);\n      expect(pathname).to.equal('main.tex');\n    });","file":"frontend/features/history/utils/auto-select-file.test.ts","skipped":false,"dir":"services/web/test"},{"name":"if `removed` is the last operation, and no other operation is available on the latest `updates` entry, with `main.tex` is not available as a file name somewhere in the file tree, return any tex file based on ascending alphabetical order","suites":["autoSelectFile","for comparing version with previous"],"updatePoint":{"line":491,"column":244,"index":12306},"line":491,"code":"    it('if `removed` is the last operation, and no other operation is available on the latest `updates` entry, with `main.tex` is not available as a file name somewhere in the file tree, return any tex file based on ascending alphabetical order', function () {\n      const files = [{\n        pathname: 'certainly_not_main.tex'\n      }, {\n        pathname: 'newfile.tex'\n      }, {\n        pathname: 'file2.tex'\n      }];\n      const updates = [{\n        fromV: 7,\n        toV: 8,\n        meta: {\n          users: historyUsers,\n          start_ts: 1680905536168,\n          end_ts: 1680905536168\n        },\n        labels: [],\n        pathnames: [],\n        project_ops: [{\n          remove: {\n            pathname: 'newfolder/tobedeleted.txt'\n          },\n          atV: 7\n        }]\n      }, {\n        fromV: 6,\n        toV: 7,\n        meta: {\n          users: historyUsers,\n          start_ts: 1680905531816,\n          end_ts: 1680905531816\n        },\n        labels: [],\n        pathnames: ['newfolder/tobedeleted.txt'],\n        project_ops: []\n      }, {\n        fromV: 0,\n        toV: 6,\n        meta: {\n          users: historyUsers,\n          start_ts: 1680905492130,\n          end_ts: 1680905529186\n        },\n        labels: [],\n        pathnames: [],\n        project_ops: [{\n          rename: {\n            pathname: 'tobedeleted.txt',\n            newPathname: 'newfolder/tobedeleted.txt'\n          },\n          atV: 5\n        }, {\n          add: {\n            pathname: 'file2.tex'\n          },\n          atV: 4\n        }, {\n          add: {\n            pathname: 'newfile.tex'\n          },\n          atV: 3\n        }, {\n          add: {\n            pathname: 'tobedeleted.txt'\n          },\n          atV: 2\n        }, {\n          rename: {\n            pathname: 'main.tex',\n            newPathname: 'certainly_not_main.tex'\n          },\n          atV: 1\n        }, {\n          add: {\n            pathname: 'main.tex'\n          },\n          atV: 0\n        }]\n      }];\n      const updateSelection = {\n        update: updates[0],\n        comparing\n      };\n      const pathname = autoSelectFile(files, updateSelection, updates);\n      expect(pathname).to.equal('certainly_not_main.tex');\n    });","file":"frontend/features/history/utils/auto-select-file.test.ts","skipped":false,"dir":"services/web/test"},{"name":"renders the correct text","suites":["<HotkeysModalBottomText />"],"updatePoint":{"line":5,"column":30,"index":297},"line":5,"code":"  it('renders the correct text', function () {\n    render( /*#__PURE__*/React.createElement(HotkeysModalBottomText, null));\n    screen.getByText(/A more comprehensive list of keyboard shortcuts can be found in/);\n    const link = screen.getByRole('link', {\n      name: /this Overleaf project template/\n    });\n    expect(link.getAttribute('href')).to.equal(`/articles/overleaf-keyboard-shortcuts/qykqfvmxdnjf`);\n  });","file":"frontend/features/hotkeys-modal/components/hotkeys-modal-bottom-text.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders the translated modal title on cm6","suites":["<HotkeysModal />"],"updatePoint":{"line":12,"column":47,"index":744},"line":12,"code":"  it('renders the translated modal title on cm6', async function () {\n    const {\n      baseElement\n    } = render( /*#__PURE__*/React.createElement(HotkeysModal, _extends({}, modalProps, {\n      newSourceEditor: true\n    })));\n    expect(baseElement.querySelector('.modal-title').textContent).to.equal('Hotkeys (Source editor)');\n  });","file":"frontend/features/hotkeys-modal/components/hotkeys-modal.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders the translated modal title on ace","suites":["<HotkeysModal />"],"updatePoint":{"line":20,"column":47,"index":1081},"line":20,"code":"  it('renders the translated modal title on ace', async function () {\n    const {\n      baseElement\n    } = render( /*#__PURE__*/React.createElement(HotkeysModal, _extends({}, modalProps, {\n      newSourceEditor: false\n    })));\n    expect(baseElement.querySelector('.modal-title').textContent).to.equal('Hotkeys (Legacy source editor)');\n  });","file":"frontend/features/hotkeys-modal/components/hotkeys-modal.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders translated heading with embedded code","suites":["<HotkeysModal />"],"updatePoint":{"line":28,"column":51,"index":1430},"line":28,"code":"  it('renders translated heading with embedded code', function () {\n    const {\n      baseElement\n    } = render( /*#__PURE__*/React.createElement(HotkeysModal, modalProps));\n    const results = baseElement.querySelectorAll('h3 code');\n    expect(results).to.have.length(1);\n  });","file":"frontend/features/hotkeys-modal/components/hotkeys-modal.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders the hotkey descriptions","suites":["<HotkeysModal />"],"updatePoint":{"line":35,"column":37,"index":1697},"line":35,"code":"  it('renders the hotkey descriptions', function () {\n    const {\n      baseElement\n    } = render( /*#__PURE__*/React.createElement(HotkeysModal, modalProps));\n    const hotkeys = baseElement.querySelectorAll('[data-test-selector=\"hotkey\"]');\n    expect(hotkeys).to.have.length(19);\n  });","file":"frontend/features/hotkeys-modal/components/hotkeys-modal.test.js","skipped":false,"dir":"services/web/test"},{"name":"adds extra hotkey descriptions when Track Changes is enabled","suites":["<HotkeysModal />"],"updatePoint":{"line":42,"column":66,"index":2016},"line":42,"code":"  it('adds extra hotkey descriptions when Track Changes is enabled', function () {\n    const {\n      baseElement\n    } = render( /*#__PURE__*/React.createElement(HotkeysModal, _extends({}, modalProps, {\n      trackChangesVisible: true\n    })));\n    const hotkeys = baseElement.querySelectorAll('[data-test-selector=\"hotkey\"]');\n    expect(hotkeys).to.have.length(22);\n  });","file":"frontend/features/hotkeys-modal/components/hotkeys-modal.test.js","skipped":false,"dir":"services/web/test"},{"name":"uses Ctrl for non-macOS","suites":["<HotkeysModal />"],"updatePoint":{"line":51,"column":29,"index":2353},"line":51,"code":"  it('uses Ctrl for non-macOS', function () {\n    render( /*#__PURE__*/React.createElement(HotkeysModal, modalProps));\n    expect(screen.getAllByText(/Ctrl/)).to.have.length(16);\n    expect(screen.queryByText(/Cmd/)).to.not.exist;\n  });","file":"frontend/features/hotkeys-modal/components/hotkeys-modal.test.js","skipped":false,"dir":"services/web/test"},{"name":"uses Cmd for macOS","suites":["<HotkeysModal />"],"updatePoint":{"line":56,"column":24,"index":2585},"line":56,"code":"  it('uses Cmd for macOS', function () {\n    render( /*#__PURE__*/React.createElement(HotkeysModal, _extends({}, modalProps, {\n      isMac: true\n    })));\n    expect(screen.getAllByText(/Cmd/)).to.have.length(12);\n    expect(screen.getAllByText(/Ctrl/)).to.have.length(4);\n  });","file":"frontend/features/hotkeys-modal/components/hotkeys-modal.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders basic item","suites":["<OutlineItem />"],"updatePoint":{"line":10,"column":24,"index":388},"line":10,"code":"  it('renders basic item', function () {\n    const outlineItem = {\n      title: 'Test Title',\n      line: 1\n    };\n    render( /*#__PURE__*/React.createElement(OutlineItem, {\n      outlineItem: outlineItem,\n      jumpToLine: jumpToLine\n    }));\n    screen.getByRole('treeitem', {\n      current: false\n    });\n    screen.getByRole('button', {\n      name: outlineItem.title\n    });\n    expect(screen.queryByRole('button', {\n      name: 'Collapse'\n    })).to.not.exist;\n  });","file":"frontend/features/outline/components/outline-item.test.js","skipped":false,"dir":"services/web/test"},{"name":"collapses and expands","suites":["<OutlineItem />"],"updatePoint":{"line":29,"column":27,"index":864},"line":29,"code":"  it('collapses and expands', function () {\n    const outlineItem = {\n      title: 'Parent',\n      line: 1,\n      children: [{\n        title: 'Child',\n        line: 2\n      }]\n    };\n    render( /*#__PURE__*/React.createElement(OutlineItem, {\n      outlineItem: outlineItem,\n      jumpToLine: jumpToLine\n    }));\n    const collapseButton = screen.getByRole('button', {\n      name: 'Collapse'\n    });\n\n    // test that children are rendered\n    screen.getByRole('button', {\n      name: 'Child'\n    });\n    fireEvent.click(collapseButton);\n    screen.getByRole('button', {\n      name: 'Expand'\n    });\n    expect(screen.queryByRole('button', {\n      name: 'Child'\n    })).to.not.exist;\n  });","file":"frontend/features/outline/components/outline-item.test.js","skipped":false,"dir":"services/web/test"},{"name":"highlights","suites":["<OutlineItem />"],"updatePoint":{"line":58,"column":16,"index":1543},"line":58,"code":"  it('highlights', function () {\n    const outlineItem = {\n      title: 'Parent',\n      line: 1\n    };\n    render( /*#__PURE__*/React.createElement(OutlineItem, {\n      outlineItem: outlineItem,\n      jumpToLine: jumpToLine,\n      highlightedLine: 1,\n      matchesHighlightedLine: true\n    }));\n    screen.getByRole('treeitem', {\n      current: true\n    });\n  });","file":"frontend/features/outline/components/outline-item.test.js","skipped":false,"dir":"services/web/test"},{"name":"highlights when has collapsed highlighted child","suites":["<OutlineItem />"],"updatePoint":{"line":73,"column":53,"index":1944},"line":73,"code":"  it('highlights when has collapsed highlighted child', function () {\n    const outlineItem = {\n      title: 'Parent',\n      line: 1,\n      children: [{\n        title: 'Child',\n        line: 2\n      }]\n    };\n    render( /*#__PURE__*/React.createElement(OutlineItem, {\n      outlineItem: outlineItem,\n      jumpToLine: jumpToLine,\n      highlightedLine: 2,\n      containsHighlightedLine: true\n    }));\n    screen.getByRole('treeitem', {\n      name: 'Parent',\n      current: false\n    });\n    screen.getByRole('treeitem', {\n      name: 'Child',\n      current: true\n    });\n    fireEvent.click(screen.getByRole('button', {\n      name: 'Collapse'\n    }));\n    screen.getByRole('treeitem', {\n      name: 'Parent',\n      current: true\n    });\n  });","file":"frontend/features/outline/components/outline-item.test.js","skipped":false,"dir":"services/web/test"},{"name":"click and double-click jump to location","suites":["<OutlineItem />"],"updatePoint":{"line":104,"column":45,"index":2680},"line":104,"code":"  it('click and double-click jump to location', async function () {\n    const outlineItem = {\n      title: 'Parent',\n      line: 1\n    };\n    render( /*#__PURE__*/React.createElement(OutlineItem, {\n      outlineItem: outlineItem,\n      jumpToLine: jumpToLine\n    }));\n    const titleButton = screen.getByRole('button', {\n      name: outlineItem.title\n    });\n    fireEvent.click(titleButton, {\n      detail: 1\n    });\n    await waitFor(() => {\n      expect(jumpToLine).to.be.calledOnce;\n      expect(jumpToLine).to.be.calledWith(1, false);\n    });\n    jumpToLine.reset();\n    fireEvent.click(titleButton, {\n      detail: 2\n    });\n    await waitFor(() => {\n      expect(jumpToLine).to.be.calledOnce;\n      expect(jumpToLine).to.be.calledWith(1, true);\n    });\n  });","file":"frontend/features/outline/components/outline-item.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders items","suites":["<OutlineList />"],"updatePoint":{"line":5,"column":19,"index":245},"line":5,"code":"  it('renders items', function () {\n    const outline = [{\n      title: 'Section 1',\n      line: 1,\n      level: 10\n    }, {\n      title: 'Section 2',\n      line: 2,\n      level: 10\n    }];\n    render( /*#__PURE__*/React.createElement(OutlineList, {\n      outline: outline,\n      isRoot: true,\n      jumpToLine: jumpToLine\n    }));\n    screen.getByRole('treeitem', {\n      name: 'Section 1'\n    });\n    screen.getByRole('treeitem', {\n      name: 'Section 2'\n    });\n  });","file":"frontend/features/outline/components/outline-list.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders as root","suites":["<OutlineList />"],"updatePoint":{"line":27,"column":21,"index":719},"line":27,"code":"  it('renders as root', function () {\n    const outline = [{\n      title: 'Section',\n      line: 1,\n      level: 10\n    }];\n    render( /*#__PURE__*/React.createElement(OutlineList, {\n      outline: outline,\n      isRoot: true,\n      jumpToLine: jumpToLine\n    }));\n    screen.getByRole('tree');\n  });","file":"frontend/features/outline/components/outline-list.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders as non-root","suites":["<OutlineList />"],"updatePoint":{"line":40,"column":25,"index":1025},"line":40,"code":"  it('renders as non-root', function () {\n    const outline = [{\n      title: 'Section',\n      line: 1,\n      level: 10\n    }];\n    render( /*#__PURE__*/React.createElement(OutlineList, {\n      outline: outline,\n      jumpToLine: jumpToLine\n    }));\n    screen.getByRole('group');\n  });","file":"frontend/features/outline/components/outline-list.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders expanded outline","suites":["<OutlinePane />"],"updatePoint":{"line":39,"column":30,"index":1197},"line":39,"code":"  it('renders expanded outline', function () {\n    const outline = [{\n      title: 'Section',\n      line: 1,\n      level: 10\n    }];\n    render( /*#__PURE__*/React.createElement(OutlinePane, {\n      isTexFile: true,\n      outline: outline,\n      jumpToLine: jumpToLine,\n      onToggle: onToggle,\n      eventTracking: eventTracking,\n      show: true\n    }));\n    screen.getByRole('tree');\n  });","file":"frontend/features/outline/components/outline-pane.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders disabled outline","suites":["<OutlinePane />"],"updatePoint":{"line":55,"column":30,"index":1591},"line":55,"code":"  it('renders disabled outline', function () {\n    const outline = [];\n    render( /*#__PURE__*/React.createElement(OutlinePane, {\n      isTexFile: false,\n      outline: outline,\n      jumpToLine: jumpToLine,\n      onToggle: onToggle,\n      eventTracking: eventTracking,\n      show: true\n    }));\n    expect(screen.queryByRole('tree')).to.be.null;\n  });","file":"frontend/features/outline/components/outline-pane.test.js","skipped":false,"dir":"services/web/test"},{"name":"expand outline and use local storage","suites":["<OutlinePane />"],"updatePoint":{"line":67,"column":42,"index":1957},"line":67,"code":"  it('expand outline and use local storage', function () {\n    global.localStorage.getItem.callsFake(key => {\n      if (key.startsWith('file_outline.expanded.')) {\n        return false;\n      }\n      return null;\n    });\n    const outline = [{\n      title: 'Section',\n      line: 1,\n      level: 10\n    }];\n    render( /*#__PURE__*/React.createElement(OutlinePane, {\n      isTexFile: true,\n      outline: outline,\n      jumpToLine: jumpToLine,\n      onToggle: onToggle,\n      eventTracking: eventTracking,\n      show: true\n    }));\n    expect(screen.queryByRole('tree')).to.be.null;\n    const collapseButton = screen.getByRole('button', {\n      name: 'Show File outline'\n    });\n    fireEvent.click(collapseButton);\n    screen.getByRole('tree');\n    expect(global.localStorage.setItem).to.be.calledOnce;\n    expect(global.localStorage.setItem).to.be.calledWithMatch(/123abc/, 'true');\n    expect(onToggle).to.be.calledTwice;\n  });","file":"frontend/features/outline/components/outline-pane.test.js","skipped":false,"dir":"services/web/test"},{"name":"shows warning on partial result","suites":["<OutlinePane />"],"updatePoint":{"line":97,"column":37,"index":2883},"line":97,"code":"  it('shows warning on partial result', function () {\n    render( /*#__PURE__*/React.createElement(OutlinePane, {\n      isTexFile: true,\n      outline: [],\n      jumpToLine: jumpToLine,\n      onToggle: onToggle,\n      eventTracking: eventTracking,\n      show: true,\n      isPartial: true\n    }));\n    expect(screen.queryByRole('status')).to.exist;\n  });","file":"frontend/features/outline/components/outline-pane.test.js","skipped":false,"dir":"services/web/test"},{"name":"shows no warning on non-partial result","suites":["<OutlinePane />"],"updatePoint":{"line":109,"column":44,"index":3244},"line":109,"code":"  it('shows no warning on non-partial result', function () {\n    render( /*#__PURE__*/React.createElement(OutlinePane, {\n      isTexFile: true,\n      outline: [],\n      jumpToLine: jumpToLine,\n      onToggle: onToggle,\n      eventTracking: eventTracking,\n      show: true,\n      isPartial: false\n    }));\n    expect(screen.queryByRole('status')).to.not.exist;\n  });","file":"frontend/features/outline/components/outline-pane.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders outline","suites":["<OutlineRoot />"],"updatePoint":{"line":6,"column":21,"index":278},"line":6,"code":"  it('renders outline', function () {\n    const outline = [{\n      title: 'Section',\n      line: 1,\n      level: 10\n    }];\n    render( /*#__PURE__*/React.createElement(OutlineRoot, {\n      outline: outline,\n      jumpToLine: jumpToLine\n    }));\n    screen.getByRole('tree');\n    expect(screen.queryByRole('link')).to.be.null;\n  });","file":"frontend/features/outline/components/outline-root.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders placeholder","suites":["<OutlineRoot />"],"updatePoint":{"line":19,"column":25,"index":615},"line":19,"code":"  it('renders placeholder', function () {\n    const outline = [];\n    render( /*#__PURE__*/React.createElement(OutlineRoot, {\n      outline: outline,\n      jumpToLine: jumpToLine\n    }));\n    expect(screen.queryByRole('tree')).to.be.null;\n    screen.getByRole('link');\n  });","file":"frontend/features/outline/components/outline-root.test.js","skipped":false,"dir":"services/web/test"},{"name":"matches all levels","suites":["OutlineParser","matchOutline"],"updatePoint":{"line":5,"column":26,"index":240},"line":5,"code":"    it('matches all levels', function () {\n      const content = `\n      \\\\book{Book}\n      \\\\part{Part}\n      \\\\addpart{Part 2}\n      \\\\chapter{Chapter}\n      \\\\addchap{Chapter 2}\n      \\\\section{Section 1}\n      \\\\addsec{Section 1b}\n      \\\\subsection{Subsection}\n      \\\\subsubsection{Subsubsection}\n      \\\\section{Section 2}\n      \\\\subsubsection{Subsubsection without subsection}\n      \\\\paragraph{a paragraph} Here is some text.\n      \\\\subparagraph{a subparagraph} Here is some more text.\n    `;\n      const outline = matchOutline(content);\n      expect(outline).to.deep.equal([{\n        line: 2,\n        title: 'Book',\n        level: 10\n      }, {\n        line: 3,\n        title: 'Part',\n        level: 20\n      }, {\n        line: 4,\n        title: 'Part 2',\n        level: 20\n      }, {\n        line: 5,\n        title: 'Chapter',\n        level: 30\n      }, {\n        line: 6,\n        title: 'Chapter 2',\n        level: 30\n      }, {\n        line: 7,\n        title: 'Section 1',\n        level: 40\n      }, {\n        line: 8,\n        title: 'Section 1b',\n        level: 40\n      }, {\n        line: 9,\n        title: 'Subsection',\n        level: 50\n      }, {\n        line: 10,\n        title: 'Subsubsection',\n        level: 60\n      }, {\n        line: 11,\n        title: 'Section 2',\n        level: 40\n      }, {\n        line: 12,\n        title: 'Subsubsection without subsection',\n        level: 60\n      }, {\n        line: 13,\n        title: 'a paragraph',\n        level: 70\n      }, {\n        line: 14,\n        title: 'a subparagraph',\n        level: 80\n      }]);\n    });","file":"frontend/features/outline/outline-parser.test.js","skipped":false,"dir":"services/web/test"},{"name":"matches display titles","suites":["OutlineParser","matchOutline"],"updatePoint":{"line":76,"column":30,"index":1828},"line":76,"code":"    it('matches display titles', function () {\n      const content = `\n      \\\\section{\\\\label{foo} Label before}\n      \\\\section{Label after \\\\label{foo}}\n      \\\\section{Label \\\\label{foo} between}\n      \\\\section{TT \\\\texttt{Bar}}\n      \\\\section{plain title}\n      `;\n      const outline = matchOutline(content);\n      expect(outline).to.deep.equal([{\n        line: 2,\n        title: ' Label before',\n        level: 40\n      }, {\n        line: 3,\n        title: 'Label after ',\n        level: 40\n      }, {\n        line: 4,\n        title: 'Label  between',\n        level: 40\n      }, {\n        line: 5,\n        title: 'TT Bar',\n        level: 40\n      }, {\n        line: 6,\n        title: 'plain title',\n        level: 40\n      }]);\n    });","file":"frontend/features/outline/outline-parser.test.js","skipped":false,"dir":"services/web/test"},{"name":"removes spurious commands after title definition","suites":["OutlineParser","matchOutline"],"updatePoint":{"line":107,"column":56,"index":2599},"line":107,"code":"    it('removes spurious commands after title definition', function () {\n      const content = `\n      \\\\section{Plain title} more text \\\\href{link}{link}\n      \\\\section{\\\\label{foo} Label before} more text \\\\href{link}{link}\n      `;\n      const outline = matchOutline(content);\n      expect(outline).to.deep.equal([{\n        line: 2,\n        title: 'Plain title',\n        level: 40\n      }, {\n        line: 3,\n        title: ' Label before',\n        level: 40\n      }]);\n    });","file":"frontend/features/outline/outline-parser.test.js","skipped":false,"dir":"services/web/test"},{"name":"matches empty sections","suites":["OutlineParser","matchOutline"],"updatePoint":{"line":123,"column":30,"index":3055},"line":123,"code":"    it('matches empty sections', function () {\n      const outline = matchOutline('\\\\section{}');\n      expect(outline).to.deep.equal([{\n        line: 1,\n        title: '',\n        level: 40\n      }]);\n    });","file":"frontend/features/outline/outline-parser.test.js","skipped":false,"dir":"services/web/test"},{"name":"matches indented sections","suites":["OutlineParser","matchOutline"],"updatePoint":{"line":131,"column":33,"index":3268},"line":131,"code":"    it('matches indented sections', function () {\n      const outline = matchOutline('\\t\\\\section{Indented}');\n      expect(outline).to.deep.equal([{\n        line: 1,\n        title: 'Indented',\n        level: 40\n      }]);\n    });","file":"frontend/features/outline/outline-parser.test.js","skipped":false,"dir":"services/web/test"},{"name":"matches unnumbered sections","suites":["OutlineParser","matchOutline"],"updatePoint":{"line":139,"column":35,"index":3501},"line":139,"code":"    it('matches unnumbered sections', function () {\n      const outline = matchOutline('\\\\section*{Unnumbered}');\n      expect(outline).to.deep.equal([{\n        line: 1,\n        title: 'Unnumbered',\n        level: 40\n      }]);\n    });","file":"frontend/features/outline/outline-parser.test.js","skipped":false,"dir":"services/web/test"},{"name":"matches short titles","suites":["OutlineParser","matchOutline"],"updatePoint":{"line":147,"column":28,"index":3730},"line":147,"code":"    it('matches short titles', function () {\n      const outline = matchOutline('\\\\chapter[Short Title For TOC]{Very Long Title for Text}');\n      expect(outline).to.deep.equal([{\n        line: 1,\n        title: 'Short Title For TOC',\n        level: 30\n      }]);\n    });","file":"frontend/features/outline/outline-parser.test.js","skipped":false,"dir":"services/web/test"},{"name":"handles spacing","suites":["OutlineParser","matchOutline"],"updatePoint":{"line":155,"column":23,"index":3997},"line":155,"code":"    it('handles spacing', function () {\n      const content = `\n      \\\\section {Weird Spacing}\n      \\\\section * {Weird Spacing Unnumbered}\n      \\\\section [Weird Spacing for TOC] {Weird Spacing}\n    `;\n      const outline = matchOutline(content);\n      expect(outline).to.deep.equal([{\n        line: 2,\n        title: 'Weird Spacing',\n        level: 40\n      }, {\n        line: 3,\n        title: 'Weird Spacing Unnumbered',\n        level: 40\n      }, {\n        line: 4,\n        title: 'Weird Spacing for TOC',\n        level: 40\n      }]);\n    });","file":"frontend/features/outline/outline-parser.test.js","skipped":false,"dir":"services/web/test"},{"name":"doesn't match commented lines","suites":["OutlineParser","matchOutline"],"updatePoint":{"line":176,"column":37,"index":4560},"line":176,"code":"    it(\"doesn't match commented lines\", function () {\n      const content = `\n      % \\\\section{I should not appear in the outline}\n    `;\n      const outline = matchOutline(content);\n      expect(outline).to.deep.equal([]);\n    });","file":"frontend/features/outline/outline-parser.test.js","skipped":false,"dir":"services/web/test"},{"name":"doesn't match inline sections","suites":["OutlineParser","matchOutline"],"updatePoint":{"line":183,"column":37,"index":4793},"line":183,"code":"    it(\"doesn't match inline sections\", function () {\n      const content = `\n      I like to write \\\\section{inline} on one line.\n    `;\n      const outline = matchOutline(content);\n      expect(outline).to.deep.equal([]);\n    });","file":"frontend/features/outline/outline-parser.test.js","skipped":false,"dir":"services/web/test"},{"name":"matches all levels","suites":["OutlineParser","nestOutline"],"updatePoint":{"line":192,"column":26,"index":5060},"line":192,"code":"    it('matches all levels', function () {\n      const flatOutline = [{\n        line: 10,\n        title: 'Book',\n        level: 10\n      }, {\n        line: 20,\n        title: 'Part A',\n        level: 20\n      }, {\n        line: 30,\n        title: 'Section A 1',\n        level: 40\n      }, {\n        line: 40,\n        title: 'Subsection A 1 1',\n        level: 50\n      }, {\n        line: 50,\n        title: 'Subsection A 1 2',\n        level: 50\n      }, {\n        line: 60,\n        title: 'Section A 2',\n        level: 40\n      }, {\n        line: 70,\n        title: 'Section A 3',\n        level: 40\n      }, {\n        line: 80,\n        title: 'Subsection A 3 1',\n        level: 50\n      }, {\n        line: 90,\n        title: 'Chapter',\n        level: 30\n      }, {\n        line: 100,\n        title: 'Part B',\n        level: 20\n      }, {\n        line: 110,\n        title: 'Section 2',\n        level: 40\n      }, {\n        line: 120,\n        title: 'Subsubsection without subsection',\n        level: 60\n      }];\n      const nestedOutline = nestOutline(flatOutline);\n      expect(nestedOutline).to.deep.equal([{\n        line: 10,\n        title: 'Book',\n        level: 10,\n        children: [{\n          line: 20,\n          title: 'Part A',\n          level: 20,\n          children: [{\n            line: 30,\n            title: 'Section A 1',\n            level: 40,\n            children: [{\n              line: 40,\n              title: 'Subsection A 1 1',\n              level: 50\n            }, {\n              line: 50,\n              title: 'Subsection A 1 2',\n              level: 50\n            }]\n          }, {\n            line: 60,\n            title: 'Section A 2',\n            level: 40\n          }, {\n            line: 70,\n            title: 'Section A 3',\n            level: 40,\n            children: [{\n              line: 80,\n              title: 'Subsection A 3 1',\n              level: 50\n            }]\n          }, {\n            line: 90,\n            title: 'Chapter',\n            level: 30\n          }]\n        }, {\n          line: 100,\n          title: 'Part B',\n          level: 20,\n          children: [{\n            line: 110,\n            title: 'Section 2',\n            level: 40,\n            children: [{\n              line: 120,\n              title: 'Subsubsection without subsection',\n              level: 60\n            }]\n          }]\n        }]\n      }]);\n    });","file":"frontend/features/outline/outline-parser.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders the modal","suites":["<ShareProjectModal/>"],"updatePoint":{"line":87,"column":23,"index":2703},"line":87,"code":"  it('renders the modal', async function () {\n    renderWithEditorContext( /*#__PURE__*/React.createElement(ShareProjectModal, modalProps), {\n      scope: {\n        project\n      }\n    });\n    await screen.findByText('Share Project');\n  });","file":"frontend/features/share-project-modal/components/share-project-modal.test.js","skipped":false,"dir":"services/web/test"},{"name":"calls handleHide when a Close button is pressed","suites":["<ShareProjectModal/>"],"updatePoint":{"line":95,"column":53,"index":2974},"line":95,"code":"  it('calls handleHide when a Close button is pressed', async function () {\n    const handleHide = sinon.stub();\n    renderWithEditorContext( /*#__PURE__*/React.createElement(ShareProjectModal, _extends({}, modalProps, {\n      handleHide: handleHide\n    })), {\n      scope: {\n        project\n      }\n    });\n    const [headerCloseButton, footerCloseButton] = await screen.findAllByRole('button', {\n      name: 'Close'\n    });\n    fireEvent.click(headerCloseButton);\n    fireEvent.click(footerCloseButton);\n    expect(handleHide.callCount).to.equal(2);\n  });","file":"frontend/features/share-project-modal/components/share-project-modal.test.js","skipped":false,"dir":"services/web/test"},{"name":"handles access level \"private\"","suites":["<ShareProjectModal/>"],"updatePoint":{"line":111,"column":36,"index":3515},"line":111,"code":"  it('handles access level \"private\"', async function () {\n    renderWithEditorContext( /*#__PURE__*/React.createElement(ShareProjectModal, modalProps), {\n      scope: {\n        project: {\n          ...project,\n          publicAccesLevel: 'private'\n        }\n      }\n    });\n    await screen.findByText('Link sharing is off, only invited users can view this project.');\n    await screen.findByRole('button', {\n      name: 'Turn on link sharing'\n    });\n    expect(screen.queryByText('Anyone with this link can view this project')).to.be.null;\n    expect(screen.queryByText('Anyone with this link can edit this project')).to.be.null;\n  });","file":"frontend/features/share-project-modal/components/share-project-modal.test.js","skipped":false,"dir":"services/web/test"},{"name":"handles access level \"tokenBased\"","suites":["<ShareProjectModal/>"],"updatePoint":{"line":127,"column":39,"index":4157},"line":127,"code":"  it('handles access level \"tokenBased\"', async function () {\n    renderWithEditorContext( /*#__PURE__*/React.createElement(ShareProjectModal, modalProps), {\n      scope: {\n        project: {\n          ...project,\n          publicAccesLevel: 'tokenBased'\n        }\n      }\n    });\n    await screen.findByText('Link sharing is on');\n    await screen.findByRole('button', {\n      name: 'Turn off link sharing'\n    });\n    expect(screen.queryByText('Anyone with this link can view this project')).not.to.be.null;\n    expect(screen.queryByText('Anyone with this link can edit this project')).not.to.be.null;\n  });","file":"frontend/features/share-project-modal/components/share-project-modal.test.js","skipped":false,"dir":"services/web/test"},{"name":"handles legacy access level \"readAndWrite\"","suites":["<ShareProjectModal/>"],"updatePoint":{"line":143,"column":48,"index":4776},"line":143,"code":"  it('handles legacy access level \"readAndWrite\"', async function () {\n    renderWithEditorContext( /*#__PURE__*/React.createElement(ShareProjectModal, modalProps), {\n      scope: {\n        project: {\n          ...project,\n          publicAccesLevel: 'readAndWrite'\n        }\n      }\n    });\n    await screen.findByText('This project is public and can be edited by anyone with the URL.');\n    await screen.findByRole('button', {\n      name: 'Make Private'\n    });\n  });","file":"frontend/features/share-project-modal/components/share-project-modal.test.js","skipped":false,"dir":"services/web/test"},{"name":"handles legacy access level \"readOnly\"","suites":["<ShareProjectModal/>"],"updatePoint":{"line":157,"column":44,"index":5242},"line":157,"code":"  it('handles legacy access level \"readOnly\"', async function () {\n    renderWithEditorContext( /*#__PURE__*/React.createElement(ShareProjectModal, modalProps), {\n      scope: {\n        project: {\n          ...project,\n          publicAccesLevel: 'readOnly'\n        }\n      }\n    });\n    await screen.findByText('This project is public and can be viewed but not edited by anyone with the URL');\n    await screen.findByRole('button', {\n      name: 'Make Private'\n    });\n  });","file":"frontend/features/share-project-modal/components/share-project-modal.test.js","skipped":false,"dir":"services/web/test"},{"name":"hides actions from non-project-owners","suites":["<ShareProjectModal/>"],"updatePoint":{"line":171,"column":43,"index":5717},"line":171,"code":"  it('hides actions from non-project-owners', async function () {\n    const invites = [{\n      _id: 'invited-author',\n      email: 'invited-author@example.com',\n      privileges: 'readAndWrite'\n    }];\n\n    // render as project owner: actions should be present\n    render( /*#__PURE__*/React.createElement(EditorProviders, {\n      scope: {\n        project: {\n          ...project,\n          invites,\n          publicAccesLevel: 'tokenBased'\n        }\n      }\n    }, /*#__PURE__*/React.createElement(ShareProjectModal, modalProps)));\n    await screen.findByRole('button', {\n      name: 'Turn off link sharing'\n    });\n    await screen.findByRole('button', {\n      name: 'Resend'\n    });\n\n    // render as non-project-owner, link sharing on: actions should be missing and message should be present\n    render( /*#__PURE__*/React.createElement(EditorProviders, {\n      scope: {\n        project: {\n          ...project,\n          invites,\n          publicAccesLevel: 'tokenBased'\n        }\n      },\n      user: {\n        id: 'non-project-owner',\n        email: 'non-project-owner@example.com'\n      }\n    }, /*#__PURE__*/React.createElement(ShareProjectModal, modalProps)));\n    await screen.findByText('To change access permissions, please ask the project owner');\n    expect(screen.queryByRole('button', {\n      name: 'Turn off link sharing'\n    })).to.be.null;\n    expect(screen.queryByRole('button', {\n      name: 'Turn on link sharing'\n    })).to.be.null;\n    expect(screen.queryByRole('button', {\n      name: 'Resend'\n    })).to.be.null;\n\n    // render as non-project-owner, link sharing off: actions should be missing and message should be present\n    render( /*#__PURE__*/React.createElement(EditorProviders, {\n      scope: {\n        project: {\n          ...project,\n          invites,\n          publicAccesLevel: 'private'\n        }\n      },\n      user: {\n        id: 'non-project-owner',\n        email: 'non-project-owner@example.com'\n      }\n    }, /*#__PURE__*/React.createElement(ShareProjectModal, modalProps)));\n    await screen.findByText('To add more collaborators or turn on link sharing, please ask the project owner');\n    expect(screen.queryByRole('button', {\n      name: 'Turn off link sharing'\n    })).to.be.null;\n    expect(screen.queryByRole('button', {\n      name: 'Turn on link sharing'\n    })).to.be.null;\n    expect(screen.queryByRole('button', {\n      name: 'Resend'\n    })).to.be.null;\n  });","file":"frontend/features/share-project-modal/components/share-project-modal.test.js","skipped":false,"dir":"services/web/test"},{"name":"only shows read-only token link to restricted token members","suites":["<ShareProjectModal/>"],"updatePoint":{"line":245,"column":65,"index":8158},"line":245,"code":"  it('only shows read-only token link to restricted token members', async function () {\n    window.metaAttributesCache.set('ol-isRestrictedTokenMember', true);\n    renderWithEditorContext( /*#__PURE__*/React.createElement(ShareProjectModal, modalProps), {\n      isRestrictedTokenMember: true,\n      scope: {\n        project: {\n          ...project,\n          publicAccesLevel: 'tokenBased'\n        }\n      }\n    });\n\n    // no buttons\n    expect(screen.queryByRole('button', {\n      name: 'Turn on link sharing'\n    })).to.be.null;\n    expect(screen.queryByRole('button', {\n      name: 'Turn off link sharing'\n    })).to.be.null;\n\n    // only read-only token link\n    await screen.findByText('Anyone with this link can view this project');\n    expect(screen.queryByText('Anyone with this link can edit this project')).to.be.null;\n  });","file":"frontend/features/share-project-modal/components/share-project-modal.test.js","skipped":false,"dir":"services/web/test"},{"name":"displays project members and invites","suites":["<ShareProjectModal/>"],"updatePoint":{"line":269,"column":42,"index":8971},"line":269,"code":"  it('displays project members and invites', async function () {\n    const members = [{\n      _id: 'member-author',\n      email: 'member-author@example.com',\n      privileges: 'readAndWrite'\n    }, {\n      _id: 'member-viewer',\n      email: 'member-viewer@example.com',\n      privileges: 'readOnly'\n    }];\n    const invites = [{\n      _id: 'invited-author',\n      email: 'invited-author@example.com',\n      privileges: 'readAndWrite'\n    }, {\n      _id: 'invited-viewer',\n      email: 'invited-viewer@example.com',\n      privileges: 'readOnly'\n    }];\n    renderWithEditorContext( /*#__PURE__*/React.createElement(ShareProjectModal, modalProps), {\n      scope: {\n        project: {\n          ...project,\n          members,\n          invites,\n          publicAccesLevel: 'tokenBased'\n        }\n      }\n    });\n    const projectOwnerEmail = USER_EMAIL;\n    expect(screen.queryAllByText(projectOwnerEmail)).to.have.length(1);\n    expect(screen.queryAllByText('member-author@example.com')).to.have.length(1);\n    expect(screen.queryAllByText('member-viewer@example.com')).to.have.length(1);\n    expect(screen.queryAllByText('invited-author@example.com')).to.have.length(1);\n    expect(screen.queryAllByText('invited-viewer@example.com')).to.have.length(1);\n    expect(screen.queryAllByText('Invite not yet accepted.')).to.have.length(invites.length);\n    expect(screen.queryAllByRole('button', {\n      name: 'Resend'\n    })).to.have.length(invites.length);\n  });","file":"frontend/features/share-project-modal/components/share-project-modal.test.js","skipped":false,"dir":"services/web/test"},{"name":"resends an invite","suites":["<ShareProjectModal/>"],"updatePoint":{"line":309,"column":23,"index":10412},"line":309,"code":"  it('resends an invite', async function () {\n    fetchMock.postOnce('express:/project/:projectId/invite/:inviteId/resend', 204);\n    const invites = [{\n      _id: 'invited-author',\n      email: 'invited-author@example.com',\n      privileges: 'readAndWrite'\n    }];\n    renderWithEditorContext( /*#__PURE__*/React.createElement(ShareProjectModal, modalProps), {\n      scope: {\n        project: {\n          ...project,\n          invites,\n          publicAccesLevel: 'tokenBased'\n        }\n      }\n    });\n    const [, closeButton] = screen.getAllByRole('button', {\n      name: 'Close'\n    });\n    const resendButton = screen.getByRole('button', {\n      name: 'Resend'\n    });\n    fireEvent.click(resendButton);\n    await waitFor(() => expect(closeButton.disabled).to.be.true);\n    expect(fetchMock.done()).to.be.true;\n    expect(closeButton.disabled).to.be.false;\n  });","file":"frontend/features/share-project-modal/components/share-project-modal.test.js","skipped":false,"dir":"services/web/test"},{"name":"revokes an invite","suites":["<ShareProjectModal/>"],"updatePoint":{"line":336,"column":23,"index":11281},"line":336,"code":"  it('revokes an invite', async function () {\n    fetchMock.deleteOnce('express:/project/:projectId/invite/:inviteId', 204);\n    const invites = [{\n      _id: 'invited-author',\n      email: 'invited-author@example.com',\n      privileges: 'readAndWrite'\n    }];\n    renderWithEditorContext( /*#__PURE__*/React.createElement(ShareProjectModal, modalProps), {\n      scope: {\n        project: {\n          ...project,\n          invites,\n          publicAccesLevel: 'tokenBased'\n        }\n      }\n    });\n    const [, closeButton] = screen.getAllByRole('button', {\n      name: 'Close'\n    });\n    const revokeButton = screen.getByRole('button', {\n      name: 'Revoke'\n    });\n    fireEvent.click(revokeButton);\n    await waitFor(() => expect(closeButton.disabled).to.be.true);\n    expect(fetchMock.done()).to.be.true;\n    expect(closeButton.disabled).to.be.false;\n  });","file":"frontend/features/share-project-modal/components/share-project-modal.test.js","skipped":false,"dir":"services/web/test"},{"name":"changes member privileges to read + write","suites":["<ShareProjectModal/>"],"updatePoint":{"line":363,"column":47,"index":12169},"line":363,"code":"  it('changes member privileges to read + write', async function () {\n    fetchMock.putOnce('express:/project/:projectId/users/:userId', 204);\n    const members = [{\n      _id: 'member-viewer',\n      email: 'member-viewer@example.com',\n      privileges: 'readOnly'\n    }];\n    renderWithEditorContext( /*#__PURE__*/React.createElement(ShareProjectModal, modalProps), {\n      scope: {\n        project: {\n          ...project,\n          members,\n          publicAccesLevel: 'tokenBased'\n        }\n      }\n    });\n    const [, closeButton] = await screen.getAllByRole('button', {\n      name: 'Close'\n    });\n    expect(screen.queryAllByText('member-viewer@example.com')).to.have.length(1);\n    const select = screen.getByDisplayValue('Read Only');\n    await fireEvent.change(select, {\n      target: {\n        value: 'readAndWrite'\n      }\n    });\n    const changeButton = screen.getByRole('button', {\n      name: 'Change'\n    });\n    fireEvent.click(changeButton);\n    await waitFor(() => expect(closeButton.disabled).to.be.true);\n    const {\n      body\n    } = fetchMock.lastOptions();\n    expect(JSON.parse(body)).to.deep.equal({\n      privilegeLevel: 'readAndWrite'\n    });\n    expect(fetchMock.done()).to.be.true;\n    expect(closeButton.disabled).to.be.false;\n  });","file":"frontend/features/share-project-modal/components/share-project-modal.test.js","skipped":false,"dir":"services/web/test"},{"name":"removes a member from the project","suites":["<ShareProjectModal/>"],"updatePoint":{"line":403,"column":39,"index":13428},"line":403,"code":"  it('removes a member from the project', async function () {\n    fetchMock.deleteOnce('express:/project/:projectId/users/:userId', 204);\n    const members = [{\n      _id: 'member-viewer',\n      email: 'member-viewer@example.com',\n      privileges: 'readOnly'\n    }];\n    renderWithEditorContext( /*#__PURE__*/React.createElement(ShareProjectModal, modalProps), {\n      scope: {\n        project: {\n          ...project,\n          members,\n          publicAccesLevel: 'tokenBased'\n        }\n      }\n    });\n    expect(screen.queryAllByText('member-viewer@example.com')).to.have.length(1);\n    const removeButton = screen.getByRole('button', {\n      name: 'Remove collaborator'\n    });\n    fireEvent.click(removeButton);\n    const url = fetchMock.lastUrl();\n    expect(url).to.equal('/project/test-project/users/member-viewer');\n    expect(fetchMock.done()).to.be.true;\n    await waitForElementToBeRemoved(() => screen.queryByText('member-viewer@example.com'));\n  });","file":"frontend/features/share-project-modal/components/share-project-modal.test.js","skipped":false,"dir":"services/web/test"},{"name":"changes member privileges to owner with confirmation","suites":["<ShareProjectModal/>"],"updatePoint":{"line":429,"column":58,"index":14413},"line":429,"code":"  it('changes member privileges to owner with confirmation', async function () {\n    fetchMock.postOnce('express:/project/:projectId/transfer-ownership', 204);\n    const members = [{\n      _id: 'member-viewer',\n      email: 'member-viewer@example.com',\n      privileges: 'readOnly'\n    }];\n    renderWithEditorContext( /*#__PURE__*/React.createElement(ShareProjectModal, modalProps), {\n      scope: {\n        project: {\n          ...project,\n          members,\n          publicAccesLevel: 'tokenBased'\n        }\n      }\n    });\n    expect(screen.queryAllByText('member-viewer@example.com')).to.have.length(1);\n    const select = screen.getByDisplayValue('Read Only');\n    fireEvent.change(select, {\n      target: {\n        value: 'owner'\n      }\n    });\n    const changeButton = screen.getByRole('button', {\n      name: 'Change'\n    });\n    await fireEvent.click(changeButton);\n    screen.getByText((_, node) => {\n      return node.textContent === 'Are you sure you want to make member-viewer@example.com the owner of Test Project?';\n    });\n    const confirmButton = screen.getByRole('button', {\n      name: 'Change owner'\n    });\n    fireEvent.click(confirmButton);\n    await waitFor(() => expect(confirmButton.disabled).to.be.true);\n    const {\n      body\n    } = fetchMock.lastOptions();\n    expect(JSON.parse(body)).to.deep.equal({\n      user_id: 'member-viewer'\n    });\n    expect(fetchMock.done()).to.be.true;\n  });","file":"frontend/features/share-project-modal/components/share-project-modal.test.js","skipped":false,"dir":"services/web/test"},{"name":"sends invites to input email addresses","suites":["<ShareProjectModal/>"],"updatePoint":{"line":472,"column":44,"index":15822},"line":472,"code":"  it('sends invites to input email addresses', async function () {\n    renderWithEditorContext( /*#__PURE__*/React.createElement(ShareProjectModal, modalProps), {\n      scope: {\n        project: {\n          ...project,\n          publicAccesLevel: 'tokenBased'\n        }\n      }\n    });\n    const [inputElement] = await screen.findAllByLabelText('Share with your collaborators');\n\n    // loading contacts\n    await waitFor(() => {\n      expect(fetchMock.called('express:/user/contacts')).to.be.true;\n    });\n\n    // displaying a list of matching contacts\n    inputElement.focus();\n    fireEvent.change(inputElement, {\n      target: {\n        value: 'ptolemy'\n      }\n    });\n    await screen.findByText(/ptolemy@example.com/);\n\n    // sending invitations\n\n    fetchMock.post('express:/project/:projectId/invite', (url, req) => {\n      const data = JSON.parse(req.body);\n      if (data.email === 'a@b.c') {\n        return {\n          status: 400,\n          body: {\n            errorReason: 'invalid_email'\n          }\n        };\n      }\n      return {\n        status: 200,\n        body: {\n          invite: {\n            ...data,\n            _id: data.email\n          }\n        }\n      };\n    });\n    fireEvent.paste(inputElement, {\n      clipboardData: {\n        getData: () => 'test@example.com, foo@example.com, bar@example.com, a@b.c'\n      }\n    });\n    const privilegesElement = screen.getByDisplayValue('Can Edit');\n    fireEvent.change(privilegesElement, {\n      target: {\n        value: 'readOnly'\n      }\n    });\n    const submitButton = screen.getByRole('button', {\n      name: 'Share'\n    });\n    submitButton.click();\n    let calls;\n    await waitFor(() => {\n      calls = fetchMock.calls('express:/project/:projectId/invite');\n      expect(calls).to.have.length(4);\n    }, {\n      timeout: 5000\n    } // allow time for delay between each request\n    );\n\n    expect(calls[0][1].body).to.equal(JSON.stringify({\n      email: 'test@example.com',\n      privileges: 'readOnly'\n    }));\n    expect(calls[1][1].body).to.equal(JSON.stringify({\n      email: 'foo@example.com',\n      privileges: 'readOnly'\n    }));\n    expect(calls[2][1].body).to.equal(JSON.stringify({\n      email: 'bar@example.com',\n      privileges: 'readOnly'\n    }));\n    expect(calls[3][1].body).to.equal(JSON.stringify({\n      email: 'a@b.c',\n      privileges: 'readOnly'\n    }));\n\n    // error from the last invite\n    screen.getByText('An email address is invalid');\n  });","file":"frontend/features/share-project-modal/components/share-project-modal.test.js","skipped":false,"dir":"services/web/test"},{"name":"displays a message when the collaborator limit is reached","suites":["<ShareProjectModal/>"],"updatePoint":{"line":563,"column":63,"index":18292},"line":563,"code":"  it('displays a message when the collaborator limit is reached', async function () {\n    fetchMock.post('/event/paywall-prompt', {}, {\n      body: {\n        'paywall-type': 'project-sharing'\n      }\n    });\n    renderWithEditorContext( /*#__PURE__*/React.createElement(ShareProjectModal, modalProps), {\n      scope: {\n        project: {\n          ...project,\n          publicAccesLevel: 'tokenBased',\n          features: {\n            collaborators: 0,\n            compileGroup: 'standard'\n          }\n        }\n      }\n    });\n    expect(screen.queryByLabelText('Share with your collaborators')).to.be.null;\n    screen.getByText(/You need to upgrade your account to add more collaborators/);\n  });","file":"frontend/features/share-project-modal/components/share-project-modal.test.js","skipped":false,"dir":"services/web/test"},{"name":"handles server error responses","suites":["<ShareProjectModal/>"],"updatePoint":{"line":584,"column":36,"index":18965},"line":584,"code":"  it('handles server error responses', async function () {\n    renderWithEditorContext( /*#__PURE__*/React.createElement(ShareProjectModal, modalProps), {\n      scope: {\n        project: {\n          ...project,\n          publicAccesLevel: 'tokenBased'\n        }\n      }\n    });\n\n    // loading contacts\n    await waitFor(() => {\n      expect(fetchMock.called('express:/user/contacts')).to.be.true;\n    });\n    const [inputElement] = await screen.findAllByLabelText('Share with your collaborators');\n    const submitButton = screen.getByRole('button', {\n      name: 'Share'\n    });\n    const respondWithError = async function (errorReason) {\n      fireEvent.focus(inputElement);\n      fireEvent.change(inputElement, {\n        target: {\n          value: 'invited-author-1@example.com'\n        }\n      });\n      fireEvent.blur(inputElement);\n      fetchMock.postOnce('express:/project/:projectId/invite', {\n        status: 400,\n        body: {\n          errorReason\n        }\n      }, {\n        overwriteRoutes: true\n      });\n      expect(submitButton.disabled).to.be.false;\n      submitButton.click();\n      await fetchMock.flush(true);\n      expect(fetchMock.done()).to.be.true;\n    };\n    await respondWithError('cannot_invite_non_user');\n    await screen.findByText(`Can’t send invite. Recipient must already have an Overleaf account`);\n    await respondWithError('cannot_verify_user_not_robot');\n    await screen.findByText(`Sorry, we could not verify that you are not a robot. Please check that Google reCAPTCHA is not being blocked by an ad blocker or firewall.`);\n    await respondWithError('cannot_invite_self');\n    await screen.findByText(`Can’t send invite to yourself`);\n    await respondWithError('invalid_email');\n    await screen.findByText(`An email address is invalid`);\n    await respondWithError('too_many_requests');\n    await screen.findByText(`Too many requests were received in a short space of time. Please wait for a few moments and try again.`);\n  });","file":"frontend/features/share-project-modal/components/share-project-modal.test.js","skipped":false,"dir":"services/web/test"},{"name":"handles switching between access levels","suites":["<ShareProjectModal/>"],"updatePoint":{"line":634,"column":45,"index":20951},"line":634,"code":"  it('handles switching between access levels', async function () {\n    fetchMock.post('express:/project/:projectId/settings/admin', 204);\n    const watchCallbacks = {};\n    const scopeWithProject = project => {\n      return {\n        $watch: (path, callback) => {\n          watchCallbacks[path] = callback;\n          return () => {};\n        },\n        project\n      };\n    };\n    renderWithEditorContext( /*#__PURE__*/React.createElement(ShareProjectModal, modalProps), {\n      scope: scopeWithProject({\n        ...project,\n        publicAccesLevel: 'private'\n      })\n    });\n    await screen.findByText('Link sharing is off, only invited users can view this project.');\n    const enableButton = await screen.findByRole('button', {\n      name: 'Turn on link sharing'\n    });\n    fireEvent.click(enableButton);\n    await waitFor(() => expect(enableButton.disabled).to.be.true);\n    const {\n      body: tokenBody\n    } = fetchMock.lastOptions();\n    expect(JSON.parse(tokenBody)).to.deep.equal({\n      publicAccessLevel: 'tokenBased'\n    });\n\n    // NOTE: updating the scoped project data manually,\n    // as the project data is usually updated via the websocket connection\n    watchCallbacks.project({\n      ...project,\n      publicAccesLevel: 'tokenBased'\n    });\n    await screen.findByText('Link sharing is on');\n    const disableButton = await screen.findByRole('button', {\n      name: 'Turn off link sharing'\n    });\n    fireEvent.click(disableButton);\n    await waitFor(() => expect(disableButton.disabled).to.be.true);\n    const {\n      body: privateBody\n    } = fetchMock.lastOptions();\n    expect(JSON.parse(privateBody)).to.deep.equal({\n      publicAccessLevel: 'private'\n    });\n\n    // NOTE: updating the scoped project data manually,\n    // as the project data is usually updated via the websocket connection\n    watchCallbacks.project({\n      ...project,\n      publicAccesLevel: 'private'\n    });\n    await screen.findByText('Link sharing is off, only invited users can view this project.');\n  });","file":"frontend/features/share-project-modal/components/share-project-modal.test.js","skipped":false,"dir":"services/web/test"},{"name":"avoids selecting unmatched contact","suites":["<ShareProjectModal/>"],"updatePoint":{"line":692,"column":40,"index":22960},"line":692,"code":"  it('avoids selecting unmatched contact', async function () {\n    renderWithEditorContext( /*#__PURE__*/React.createElement(ShareProjectModal, modalProps), {\n      scope: {\n        project\n      }\n    });\n    const [inputElement] = await screen.findAllByLabelText('Share with your collaborators');\n\n    // Wait for contacts to load\n    await waitFor(() => {\n      expect(fetchMock.called('express:/user/contacts')).to.be.true;\n    });\n\n    // Enter a prefix that matches a contact\n    inputElement.focus();\n    fireEvent.change(inputElement, {\n      target: {\n        value: 'ptolemy'\n      }\n    });\n\n    // The matching contact should now be present and selected\n    await screen.findByRole('option', {\n      name: `Claudius Ptolemy <ptolemy@example.com>`,\n      selected: true\n    });\n\n    // Keep entering text so the contact no longer matches\n    fireEvent.change(inputElement, {\n      target: {\n        value: 'ptolemy.new@example.com'\n      }\n    });\n\n    // The matching contact should no longer be present\n    expect(screen.queryByRole('option', {\n      name: `Claudius Ptolemy <ptolemy@example.com>`\n    })).to.be.null;\n\n    // No items should be added yet\n    expect(screen.queryByRole('button', {\n      name: 'Remove'\n    })).to.be.null;\n\n    // Pressing Tab should add the entered item\n    fireEvent.keyDown(inputElement, {\n      key: 'Tab',\n      code: 'Tab'\n    });\n    await waitFor(() => {\n      expect(screen.getAllByRole('button', {\n        name: 'Remove'\n      })).to.have.length(1);\n    });\n\n    // Blurring the input should not add another contact\n    fireEvent.blur(inputElement);\n    await waitFor(() => {\n      expect(screen.getAllByRole('button', {\n        name: 'Remove'\n      })).to.have.length(1);\n    });\n  });","file":"frontend/features/share-project-modal/components/share-project-modal.test.js","skipped":false,"dir":"services/web/test"},{"name":"wraps the selection in a command","suites":["toggleRanges","when text outside of a command is selected"],"updatePoint":{"line":8,"column":40,"index":426},"line":8,"code":"    it('wraps the selection in a command', function () {\n      const cm = new CodemirrorTestSession(['this <is my> range']);\n      cm.applyCommand(BOLD_COMMAND);\n      expect(cm).line(1).to.equal('this \\\\textbf{<is my>} range');\n    });","file":"frontend/features/source-editor/commands/ranges.test.ts","skipped":false,"dir":"services/web/test"},{"name":"inserts a wrapping command and keep cursor inside the argument","suites":["toggleRanges","when text outside of a command is selected","when it is an empty selection"],"updatePoint":{"line":14,"column":72,"index":755},"line":14,"code":"      it('inserts a wrapping command and keep cursor inside the argument', function () {\n        const cm = new CodemirrorTestSession(['this is | my range']);\n        cm.applyCommand(BOLD_COMMAND);\n        expect(cm).line(1).to.equal('this is \\\\textbf{|} my range');\n      });","file":"frontend/features/source-editor/commands/ranges.test.ts","skipped":false,"dir":"services/web/test"},{"name":"inserts a wrapping command and keep cursor inside the argument","suites":["toggleRanges","when text outside of a command is selected","when it is an empty selection before a command"],"updatePoint":{"line":21,"column":72,"index":1117},"line":21,"code":"      it('inserts a wrapping command and keep cursor inside the argument', function () {\n        const cm = new CodemirrorTestSession(['this is |\\\\textbf{my range}']);\n        cm.applyCommand(BOLD_COMMAND);\n        expect(cm).line(1).to.equal('this is \\\\textbf{|}\\\\textbf{my range}');\n      });","file":"frontend/features/source-editor/commands/ranges.test.ts","skipped":false,"dir":"services/web/test"},{"name":"removes the wrapping command","suites":["toggleRanges","when text inside a command is selected","if the whole command is selected"],"updatePoint":{"line":30,"column":38,"index":1522},"line":30,"code":"      it('removes the wrapping command', function () {\n        const cm = new CodemirrorTestSession(['this \\\\textbf{<is my>} range']);\n        cm.applyCommand(BOLD_COMMAND);\n        expect(cm).line(1).to.equal('this <is my> range');\n      });","file":"frontend/features/source-editor/commands/ranges.test.ts","skipped":false,"dir":"services/web/test"},{"name":"removes the command","suites":["toggleRanges","when text inside a command is selected","if the command is empty"],"updatePoint":{"line":37,"column":29,"index":1818},"line":37,"code":"      it('removes the command', function () {\n        const cm = new CodemirrorTestSession(['\\\\textbf{|}']);\n        cm.applyCommand(BOLD_COMMAND);\n        expect(cm).line(1).to.equal('|');\n      });","file":"frontend/features/source-editor/commands/ranges.test.ts","skipped":false,"dir":"services/web/test"},{"name":"shifts the start of the command","suites":["toggleRanges","when text inside a command is selected","if the selection is at the beginning of a wrapping command"],"updatePoint":{"line":44,"column":41,"index":2127},"line":44,"code":"      it('shifts the start of the command', function () {\n        const cm = new CodemirrorTestSession(['\\\\textbf{<this is> my} range']);\n        cm.applyCommand(BOLD_COMMAND);\n        expect(cm).line(1).to.equal('this is\\\\textbf{ my} range');\n      });","file":"frontend/features/source-editor/commands/ranges.test.ts","skipped":false,"dir":"services/web/test"},{"name":"shifts the end of the command","suites":["toggleRanges","when text inside a command is selected","if the selection is at the end of a wrapping command"],"updatePoint":{"line":51,"column":39,"index":2470},"line":51,"code":"      it('shifts the end of the command', function () {\n        const cm = new CodemirrorTestSession(['\\\\textbf{this <is my>} range']);\n        cm.applyCommand(BOLD_COMMAND);\n        expect(cm).line(1).to.equal('\\\\textbf{this }<is my> range');\n      });","file":"frontend/features/source-editor/commands/ranges.test.ts","skipped":false,"dir":"services/web/test"},{"name":"splits command in two with non-empty selection","suites":["toggleRanges","when text inside a command is selected","if the selection is in the middle of a wrapping command"],"updatePoint":{"line":58,"column":56,"index":2835},"line":58,"code":"      it('splits command in two with non-empty selection', function () {\n        const cm = new CodemirrorTestSession(['\\\\textbf{this <is my> range}']);\n        cm.applyCommand(BOLD_COMMAND);\n        expect(cm).line(1).to.equal('\\\\textbf{this }<is my>\\\\textbf{ range}');\n      });","file":"frontend/features/source-editor/commands/ranges.test.ts","skipped":false,"dir":"services/web/test"},{"name":"splits command in two with empty selection","suites":["toggleRanges","when text inside a command is selected","if the selection is in the middle of a wrapping command"],"updatePoint":{"line":63,"column":52,"index":3112},"line":63,"code":"      it('splits command in two with empty selection', function () {\n        const cm = new CodemirrorTestSession(['\\\\textbf{this is | my range}']);\n        cm.applyCommand(BOLD_COMMAND);\n        expect(cm).line(1).to.equal('\\\\textbf{this is }|\\\\textbf{ my range}');\n      });","file":"frontend/features/source-editor/commands/ranges.test.ts","skipped":false,"dir":"services/web/test"},{"name":"joins the two commands into one","suites":["toggleRanges","when selection spans between two wrapping commands"],"updatePoint":{"line":71,"column":39,"index":3469},"line":71,"code":"    it('joins the two commands into one', function () {\n      const cm = new CodemirrorTestSession(['\\\\textbf{this <is} my \\\\textbf{ran>ge}']);\n      cm.applyCommand(BOLD_COMMAND);\n      expect(cm).line(1).to.equal('\\\\textbf{this <is my ran>ge}');\n    });","file":"frontend/features/source-editor/commands/ranges.test.ts","skipped":false,"dir":"services/web/test"},{"name":"extends to the left","suites":["toggleRanges","when selection spans across a wrapping command"],"updatePoint":{"line":78,"column":27,"index":3794},"line":78,"code":"    it('extends to the left', function () {\n      const cm = new CodemirrorTestSession(['<this \\\\textbf{is my> range}']);\n      cm.applyCommand(BOLD_COMMAND);\n      expect(cm).line(1).to.equal('\\\\textbf{<this is my> range}');\n    });","file":"frontend/features/source-editor/commands/ranges.test.ts","skipped":false,"dir":"services/web/test"},{"name":"extends to the right","suites":["toggleRanges","when selection spans across a wrapping command"],"updatePoint":{"line":83,"column":28,"index":4029},"line":83,"code":"    it('extends to the right', function () {\n      const cm = new CodemirrorTestSession(['\\\\textbf{this is <my} range>']);\n      cm.applyCommand(BOLD_COMMAND);\n      expect(cm).line(1).to.equal('\\\\textbf{this is <my range>}');\n    });","file":"frontend/features/source-editor/commands/ranges.test.ts","skipped":false,"dir":"services/web/test"},{"name":"still unbolds","suites":["toggleRanges","when selection includes more than content","when selection contains command"],"updatePoint":{"line":91,"column":23,"index":4397},"line":91,"code":"      it('still unbolds', function () {\n        const cm = new CodemirrorTestSession(['<\\\\textbf{this is my range>}']);\n        cm.applyCommand(BOLD_COMMAND);\n        expect(cm).line(1).to.equal('<this is my range>');\n      });","file":"frontend/features/source-editor/commands/ranges.test.ts","skipped":false,"dir":"services/web/test"},{"name":"still unbolds","suites":["toggleRanges","when selection includes more than content","when selection contains opening bracket"],"updatePoint":{"line":98,"column":23,"index":4703},"line":98,"code":"      it('still unbolds', function () {\n        const cm = new CodemirrorTestSession(['\\\\textbf<{this is my range>}']);\n        cm.applyCommand(BOLD_COMMAND);\n        expect(cm).line(1).to.equal('<this is my range>');\n      });","file":"frontend/features/source-editor/commands/ranges.test.ts","skipped":false,"dir":"services/web/test"},{"name":"still unbolds","suites":["toggleRanges","when selection includes more than content","when selection contains closing bracket"],"updatePoint":{"line":105,"column":23,"index":5009},"line":105,"code":"      it('still unbolds', function () {\n        const cm = new CodemirrorTestSession(['\\\\textbf{<this is my range}>']);\n        cm.applyCommand(BOLD_COMMAND);\n        expect(cm).line(1).to.equal('<this is my range>');\n      });","file":"frontend/features/source-editor/commands/ranges.test.ts","skipped":false,"dir":"services/web/test"},{"name":"still unbolds","suites":["toggleRanges","when selection includes more than content","when selection contains both brackets"],"updatePoint":{"line":112,"column":23,"index":5313},"line":112,"code":"      it('still unbolds', function () {\n        const cm = new CodemirrorTestSession(['\\\\textbf<{this is my range}>']);\n        cm.applyCommand(BOLD_COMMAND);\n        expect(cm).line(1).to.equal('<this is my range>');\n      });","file":"frontend/features/source-editor/commands/ranges.test.ts","skipped":false,"dir":"services/web/test"},{"name":"still unbolds","suites":["toggleRanges","when selection includes more than content","when selection contains entire command"],"updatePoint":{"line":119,"column":23,"index":5618},"line":119,"code":"      it('still unbolds', function () {\n        const cm = new CodemirrorTestSession(['<\\\\textbf{this is my range}>']);\n        cm.applyCommand(BOLD_COMMAND);\n        expect(cm).line(1).to.equal('<this is my range>');\n      });","file":"frontend/features/source-editor/commands/ranges.test.ts","skipped":false,"dir":"services/web/test"},{"name":"it functions on the outer command","suites":["toggleRanges","when selection includes more than content","when toggling outer command"],"updatePoint":{"line":126,"column":43,"index":5932},"line":126,"code":"      it('it functions on the outer command', function () {\n        const cm = new CodemirrorTestSession(['\\\\textbf{\\\\textit{<this is my range>}}']);\n        cm.applyCommand(BOLD_COMMAND);\n        expect(cm).line(1).to.equal('<\\\\textit{this is my range}>');\n      });","file":"frontend/features/source-editor/commands/ranges.test.ts","skipped":false,"dir":"services/web/test"},{"name":"prevents breaking commands","suites":["toggleRanges","when selection includes more than content","when toggling outer command"],"updatePoint":{"line":131,"column":36,"index":6193},"line":131,"code":"      it('prevents breaking commands', function () {\n        const cm = new CodemirrorTestSession(['\\\\textbf{\\\\textit{this <is} my} range>']);\n        cm.applyCommand(BOLD_COMMAND);\n        expect(cm).line(1).to.equal('\\\\textbf{\\\\textit{this <is} my} range>');\n      });","file":"frontend/features/source-editor/commands/ranges.test.ts","skipped":false,"dir":"services/web/test"},{"name":"still formats list items","suites":["toggleRanges","when selection includes more than content","when range is after a command"],"updatePoint":{"line":138,"column":34,"index":6530},"line":138,"code":"      it('still formats list items', function () {\n        const cm = new CodemirrorTestSession(['\\\\begin{itemize}', '    \\\\item <My item>', '\\\\end{itemize}']);\n        cm.applyCommand(BOLD_COMMAND);\n        expect(cm).line(2).to.equal('    \\\\item \\\\textbf{<My item>}');\n      });","file":"frontend/features/source-editor/commands/ranges.test.ts","skipped":false,"dir":"services/web/test"},{"name":"still formats after command","suites":["toggleRanges","when selection includes more than content","when range is after a command"],"updatePoint":{"line":143,"column":37,"index":6814},"line":143,"code":"      it('still formats after command', function () {\n        const cm = new CodemirrorTestSession(['\\\\noindent <My paragraph>']);\n        cm.applyCommand(BOLD_COMMAND);\n        expect(cm).line(1).to.equal('\\\\noindent \\\\textbf{<My paragraph>}');\n      });","file":"frontend/features/source-editor/commands/ranges.test.ts","skipped":false,"dir":"services/web/test"},{"name":"shows warning when grammarly is available","suites":["<GrammarlyWarning />"],"updatePoint":{"line":23,"column":47,"index":960},"line":23,"code":"  it('shows warning when grammarly is available', async function () {\n    grammarlyStub.returns(true);\n    renderWithEditorContext( /*#__PURE__*/React.createElement(GrammarlyWarning, {\n      delay: 100\n    }), {\n      scope: {\n        editor: {\n          newSourceEditor: true\n        }\n      }\n    });\n    await screen.findByText('A browser extension, for example Grammarly, may be slowing down Overleaf.');\n    await screen.findByRole('button', {\n      name: 'Close'\n    });\n    await screen.findByRole('link', {\n      name: 'Find out how to avoid this'\n    });\n  });","file":"frontend/features/source-editor/components/grammarly-warning.test.js","skipped":false,"dir":"services/web/test"},{"name":"does not show warning when grammarly is not available","suites":["<GrammarlyWarning />"],"updatePoint":{"line":42,"column":59,"index":1542},"line":42,"code":"  it('does not show warning when grammarly is not available', async function () {\n    grammarlyStub.returns(false);\n    renderWithEditorContext( /*#__PURE__*/React.createElement(GrammarlyWarning, {\n      delay: 100\n    }), {\n      scope: {\n        editor: {\n          newSourceEditor: true\n        }\n      }\n    });\n    await waitFor(() => {\n      expect(screen.queryByText('A browser extension, for example Grammarly, may be slowing down Overleaf.')).to.not.exist;\n    });\n  });","file":"frontend/features/source-editor/components/grammarly-warning.test.js","skipped":false,"dir":"services/web/test"},{"name":"does not show warning when user has dismissed the warning","suites":["<GrammarlyWarning />"],"updatePoint":{"line":57,"column":63,"index":2026},"line":57,"code":"  it('does not show warning when user has dismissed the warning', async function () {\n    grammarlyStub.returns(true);\n    localStorage.setItem('editor.has_dismissed_grammarly_warning', true);\n    renderWithEditorContext( /*#__PURE__*/React.createElement(GrammarlyWarning, {\n      delay: 100\n    }), {\n      scope: {\n        editor: {\n          newSourceEditor: true\n        }\n      }\n    });\n    await waitFor(() => {\n      expect(screen.queryByText('A browser extension, for example Grammarly, may be slowing down Overleaf.')).to.not.exist;\n    });\n  });","file":"frontend/features/source-editor/components/grammarly-warning.test.js","skipped":false,"dir":"services/web/test"},{"name":"does not show warning when user have ace as their preference","suites":["<GrammarlyWarning />"],"updatePoint":{"line":73,"column":66,"index":2586},"line":73,"code":"  it('does not show warning when user have ace as their preference', async function () {\n    grammarlyStub.returns(true);\n    renderWithEditorContext( /*#__PURE__*/React.createElement(GrammarlyWarning, {\n      delay: 100\n    }), {\n      scope: {\n        editor: {\n          newSourceEditor: false\n        }\n      }\n    });\n    await waitFor(() => {\n      expect(screen.queryByText('A browser extension, for example Grammarly, may be slowing down Overleaf.')).to.not.exist;\n    });\n  });","file":"frontend/features/source-editor/components/grammarly-warning.test.js","skipped":false,"dir":"services/web/test"},{"name":"does not show warning when user have rich text as their preference","suites":["<GrammarlyWarning />"],"updatePoint":{"line":88,"column":72,"index":3079},"line":88,"code":"  it('does not show warning when user have rich text as their preference', async function () {\n    grammarlyStub.returns(true);\n    renderWithEditorContext( /*#__PURE__*/React.createElement(GrammarlyWarning, {\n      delay: 100\n    }), {\n      scope: {\n        editor: {\n          newSourceEditor: true,\n          showRichText: true\n        }\n      }\n    });\n    await waitFor(() => {\n      expect(screen.queryByText('A browser extension, for example Grammarly, may be slowing down Overleaf.')).to.not.exist;\n    });\n  });","file":"frontend/features/source-editor/components/grammarly-warning.test.js","skipped":false,"dir":"services/web/test"},{"name":"hides warning if close button is pressed","suites":["<GrammarlyWarning />"],"updatePoint":{"line":104,"column":46,"index":3575},"line":104,"code":"  it('hides warning if close button is pressed', async function () {\n    grammarlyStub.returns(true);\n    renderWithEditorContext( /*#__PURE__*/React.createElement(GrammarlyWarning, {\n      delay: 100\n    }), {\n      scope: {\n        editor: {\n          newSourceEditor: true\n        }\n      }\n    });\n    const warningText = 'A browser extension, for example Grammarly, may be slowing down Overleaf.';\n    await screen.findByText(warningText);\n    const hasDismissedGrammarlyWarning = localStorage.getItem('editor.has_dismissed_grammarly_warning');\n    expect(hasDismissedGrammarlyWarning).to.equal(null);\n    const closeButton = screen.getByRole('button', {\n      name: 'Close'\n    });\n    fireEvent.click(closeButton);\n    expect(screen.queryByText(warningText)).to.not.exist;\n    await waitFor(() => {\n      const hasDismissedGrammarlyWarning = localStorage.getItem('editor.has_dismissed_grammarly_warning');\n      expect(hasDismissedGrammarlyWarning).to.equal(true);\n    });\n  });","file":"frontend/features/source-editor/components/grammarly-warning.test.js","skipped":false,"dir":"services/web/test"},{"name":"shows button in full screen layout","suites":["<SwitchToPDFButton />"],"updatePoint":{"line":12,"column":40,"index":517},"line":12,"code":"  it('shows button in full screen layout', function () {\n    renderWithEditorContext( /*#__PURE__*/React.createElement(SwitchToPDFButton, null), {\n      ui: {\n        view: 'editor',\n        pdfLayout: 'flat'\n      }\n    });\n    screen.getByRole('button', {\n      name: 'Switch to PDF'\n    });\n  });","file":"frontend/features/source-editor/components/switch-to-pdf-button.test.js","skipped":false,"dir":"services/web/test"},{"name":"does not show button in split screen layout","suites":["<SwitchToPDFButton />"],"updatePoint":{"line":23,"column":49,"index":826},"line":23,"code":"  it('does not show button in split screen layout', function () {\n    renderWithEditorContext( /*#__PURE__*/React.createElement(SwitchToPDFButton, null), {\n      ui: {\n        view: 'editor',\n        pdfLayout: 'sideBySide'\n      }\n    });\n    expect(screen.queryByRole('button', {\n      name: 'Full screen'\n    })).to.not.exist;\n  });","file":"frontend/features/source-editor/components/switch-to-pdf-button.test.js","skipped":false,"dir":"services/web/test"},{"name":"does not show button when detached","suites":["<SwitchToPDFButton />"],"updatePoint":{"line":34,"column":40,"index":1153},"line":34,"code":"  it('does not show button when detached', function () {\n    window.metaAttributesCache.set('ol-detachRole', 'detacher');\n    renderWithEditorContext( /*#__PURE__*/React.createElement(SwitchToPDFButton, null), {\n      ui: {\n        view: 'editor',\n        pdfLayout: 'flat'\n      }\n    });\n    expect(screen.queryByRole('button', {\n      name: 'Full screen'\n    })).to.not.exist;\n  });","file":"frontend/features/source-editor/components/switch-to-pdf-button.test.js","skipped":false,"dir":"services/web/test"},{"name":"stores cursor position when the view is destroyed","suites":["CodeMirror cursor position extension"],"updatePoint":{"line":28,"column":55,"index":816},"line":28,"code":"  it('stores cursor position when the view is destroyed', async function () {\n    const currentDoc = mockDoc();\n    sinon.stub(window.Storage.prototype, 'getItem').callsFake(key => {\n      switch (key) {\n        case 'doc.position.test-doc':\n          return JSON.stringify({\n            cursorPosition: {\n              row: 1,\n              column: 1\n            },\n            firstVisibleLine: 5\n          });\n        default:\n          return null;\n      }\n    });\n    const setItem = sinon.spy(window.Storage.prototype, 'setItem');\n    const view = new EditorView({\n      state: EditorState.create({\n        doc,\n        extensions: [cursorPosition({\n          currentDoc\n        })]\n      })\n    });\n    view.dispatch({\n      selection: EditorSelection.cursor(50)\n    });\n    view.destroy();\n    await waitFor(() => {\n      expect(setItem).to.have.been.calledWith('doc.position.test-doc', JSON.stringify({\n        cursorPosition: {\n          row: 3,\n          column: 6\n        },\n        firstVisibleLine: 5\n      }));\n    });\n  });","file":"frontend/features/source-editor/extensions/cursor-position.test.ts","skipped":false,"dir":"services/web/test"},{"name":"restores cursor position","suites":["CodeMirror cursor position extension"],"updatePoint":{"line":67,"column":30,"index":1831},"line":67,"code":"  it('restores cursor position', async function () {\n    const currentDoc = mockDoc();\n    const getItem = sinon.stub(window.Storage.prototype, 'getItem').callsFake(key => {\n      switch (key) {\n        case 'doc.position.test-doc':\n          return JSON.stringify({\n            cursorPosition: {\n              row: 3,\n              column: 5\n            },\n            firstVisibleLine: 0\n          });\n        default:\n          return null;\n      }\n    });\n    const view = new EditorView({\n      state: EditorState.create({\n        doc,\n        extensions: [cursorPosition({\n          currentDoc\n        })]\n      })\n    });\n    view.dispatch(restoreCursorPosition(view.state.doc, 'test-doc'));\n    expect(getItem).to.have.been.calledWith('doc.position.test-doc');\n    await waitFor(() => {\n      const [range] = view.state.selection.ranges;\n      expect(range.head).to.eq(49);\n      expect(range.anchor).to.eq(49);\n      expect(range.empty).to.eq(true);\n    });\n  });","file":"frontend/features/source-editor/extensions/cursor-position.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should have no decorations","suites":["line-wrapping-indentation","buildDecorations","basic document"],"updatePoint":{"line":61,"column":36,"index":2659},"line":61,"code":"      it('should have no decorations', function () {\n        const view = _buildView(basicDoc);\n        const decorations = buildDecorations(view, 24);\n        expect(decorations).to.exist;\n        expect(decorations.size).to.equal(0);\n      });","file":"frontend/features/source-editor/extensions/line-wrapping-indentation.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should have no decorations","suites":["line-wrapping-indentation","buildDecorations","document with long lines, no indentation"],"updatePoint":{"line":69,"column":36,"index":2984},"line":69,"code":"      it('should have no decorations', function () {\n        const view = _buildView(docLongLineNoIndentation);\n        const decorations = buildDecorations(view, 24);\n        expect(decorations).to.exist;\n        expect(decorations.size).to.equal(0);\n      });","file":"frontend/features/source-editor/extensions/line-wrapping-indentation.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should have a decoration","suites":["line-wrapping-indentation","buildDecorations","document with long lines, with indentation"],"updatePoint":{"line":77,"column":34,"index":3325},"line":77,"code":"      it('should have a decoration', function () {\n        const view = _buildView(docLongLineWithIndentation);\n        const decorations = buildDecorations(view, 24);\n        expect(decorations).to.exist;\n        expect(decorations.size).to.equal(1);\n        const decorationItem = _toArray(decorations)[0];\n        expect(decorationItem.from).to.equal(23);\n        expect(decorationItem.to).to.equal(23);\n      });","file":"frontend/features/source-editor/extensions/line-wrapping-indentation.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should have a decoration","suites":["line-wrapping-indentation","buildDecorations","document with long lines, with lots of indentation"],"updatePoint":{"line":88,"column":34,"index":3831},"line":88,"code":"      it('should have a decoration', function () {\n        const view = _buildView(docLongLineWithLotsOfIndentation);\n        const decorations = buildDecorations(view, 24);\n        expect(decorations).to.exist;\n        expect(decorations.size).to.equal(4);\n        const decorationsArray = _toArray(decorations);\n        const expectedPositions = [23, 265, 507, 758];\n        decorationsArray.forEach((item, index) => {\n          expect(item.from).to.equal(expectedPositions[index]);\n          expect(item.to).to.equal(expectedPositions[index]);\n        });\n      });","file":"frontend/features/source-editor/extensions/line-wrapping-indentation.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should allow us to manipulate the CodeMirror document","suites":["CodeMirror EditorFacade"],"updatePoint":{"line":14,"column":59,"index":500},"line":14,"code":"  it('should allow us to manipulate the CodeMirror document', function () {\n    const editor = new EditorFacade(view);\n    const text = 'basic test, nothing more';\n    editor.cmInsert(0, text);\n    expect(editor.getValue()).to.equal(text);\n    editor.cmDelete(0, 'b');\n    expect(editor.getValue()).to.equal(text.slice(1));\n  });","file":"frontend/features/source-editor/extensions/realtime.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should allow us to attach change listeners","suites":["CodeMirror EditorFacade"],"updatePoint":{"line":22,"column":48,"index":819},"line":22,"code":"  it('should allow us to attach change listeners', function () {\n    const editor = new EditorFacade(view);\n    const listenerA = sinon.stub();\n    const listenerB = sinon.stub();\n    editor.on('change', listenerA);\n    editor.on('change', listenerB);\n    expect(listenerA).to.not.have.been.called;\n    expect(listenerB).to.not.have.been.called;\n    const magicNumber = Math.random();\n    editor.emit('change', magicNumber);\n    expect(listenerA).to.have.been.calledWith(magicNumber);\n    expect(listenerB).to.have.been.calledWith(magicNumber);\n  });","file":"frontend/features/source-editor/extensions/realtime.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should attach to ShareJs document","suites":["CodeMirror EditorFacade"],"updatePoint":{"line":35,"column":39,"index":1361},"line":35,"code":"  it('should attach to ShareJs document', function () {\n    const editor = new EditorFacade(view);\n    const text = 'something nice';\n    const shareDoc = {\n      on: sinon.stub(),\n      getText: sinon.stub().returns(text),\n      removeListener: sinon.stub(),\n      detach_cm6: undefined\n    };\n    editor.cmInsert(0, text);\n\n    // @ts-ignore\n    editor.attachShareJs(shareDoc);\n    expect(shareDoc.on.callCount).to.equal(2);\n    expect(shareDoc.on).to.have.been.calledWith('insert');\n    expect(shareDoc.on).to.have.been.calledWith('delete');\n    expect(shareDoc.detach_cm6).to.be.a('function');\n  });","file":"frontend/features/source-editor/extensions/realtime.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should not produce any folds","suites":["CodeMirror LaTeX-folding","With empty document"],"updatePoint":{"line":46,"column":36,"index":1357},"line":46,"code":"    it('should not produce any folds', function () {\n      const folds = _getFolds(view);\n      expect(folds).to.be.empty;\n    });","file":"frontend/features/source-editor/languages/latex/latex-folding.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should not produce any folds","suites":["CodeMirror LaTeX-folding","Sectioning command folding","with no foldable sections"],"updatePoint":{"line":58,"column":38,"index":1744},"line":58,"code":"      it('should not produce any folds', function () {\n        const folds = _getFolds(view);\n        expect(folds).to.be.empty;\n      });","file":"frontend/features/source-editor/languages/latex/latex-folding.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should produce one fold","suites":["CodeMirror LaTeX-folding","Sectioning command folding","with one foldable section"],"updatePoint":{"line":69,"column":33,"index":2104},"line":69,"code":"      it('should produce one fold', function () {\n        const folds = _getFolds(view);\n        expect(folds.length).to.equal(1);\n      });","file":"frontend/features/source-editor/languages/latex/latex-folding.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should fold from the section line to last line","suites":["CodeMirror LaTeX-folding","Sectioning command folding","with one foldable section"],"updatePoint":{"line":73,"column":56,"index":2268},"line":73,"code":"      it('should fold from the section line to last line', function () {\n        const folds = _getFolds(view);\n        const fold = folds[0];\n        expect(view.state.doc.lineAt(fold.from).number).to.equal(2);\n        expect(view.state.doc.lineAt(fold.to).number).to.equal(view.state.doc.lines);\n      });","file":"frontend/features/source-editor/languages/latex/latex-folding.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should produce two folds","suites":["CodeMirror LaTeX-folding","Sectioning command folding","with two foldable sections"],"updatePoint":{"line":86,"column":34,"index":2804},"line":86,"code":"      it('should produce two folds', function () {\n        const folds = _getFolds(view);\n        expect(folds.length).to.equal(2);\n        expect(view.state.doc.lineAt(folds[0].from).number).to.equal(2);\n        expect(view.state.doc.lineAt(folds[0].to).number).to.equal(4);\n        expect(view.state.doc.lineAt(folds[1].from).number).to.equal(5);\n        expect(view.state.doc.lineAt(folds[1].to).number).to.equal(view.state.doc.lines);\n      });","file":"frontend/features/source-editor/languages/latex/latex-folding.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should produce many folds","suites":["CodeMirror LaTeX-folding","Sectioning command folding","with realistic nesting"],"updatePoint":{"line":101,"column":35,"index":3686},"line":101,"code":"      it('should produce many folds', function () {\n        const folds = _getFolds(view);\n        expect(folds.length).to.equal(8);\n        const foldDescriptions = folds.map(fold => {\n          const fromLine = view.state.doc.lineAt(fold.from).number;\n          const toLine = view.state.doc.lineAt(fold.to).number;\n          return {\n            fromLine,\n            toLine\n          };\n        });\n        expect(foldDescriptions).to.deep.equal([{\n          fromLine: 2,\n          toLine: 11\n        }, {\n          fromLine: 4,\n          toLine: 7\n        }, {\n          fromLine: 6,\n          toLine: 7\n        }, {\n          fromLine: 8,\n          toLine: 11\n        }, {\n          fromLine: 10,\n          toLine: 11\n        }, {\n          fromLine: 12,\n          toLine: 17\n        }, {\n          fromLine: 14,\n          toLine: 15\n        }, {\n          fromLine: 16,\n          toLine: 17\n        }]);\n      });","file":"frontend/features/source-editor/languages/latex/latex-folding.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should fold the environment","suites":["CodeMirror LaTeX-folding","Environment folding","with single environment"],"updatePoint":{"line":147,"column":37,"index":4886},"line":147,"code":"      it('should fold the environment', function () {\n        const folds = _getFolds(view);\n        expect(folds.length).to.equal(1);\n        expect(folds).to.deep.equal([{\n          from: 11,\n          to: 20\n        }]);\n      });","file":"frontend/features/source-editor/languages/latex/latex-folding.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should fold the environment","suites":["CodeMirror LaTeX-folding","Environment folding","with nested environment"],"updatePoint":{"line":162,"column":37,"index":5373},"line":162,"code":"      it('should fold the environment', function () {\n        const folds = _getFolds(view);\n        expect(folds.length).to.equal(2);\n        expect(folds).to.deep.equal([{\n          from: 11,\n          to: 42\n        }, {\n          from: 23,\n          to: 32\n        }]);\n      });","file":"frontend/features/source-editor/languages/latex/latex-folding.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should fold the region marked by comments","suites":["CodeMirror LaTeX-folding","Comment folding","with a single set of comments"],"updatePoint":{"line":182,"column":51,"index":5957},"line":182,"code":"      it('should fold the region marked by comments', function () {\n        const folds = _getFolds(view);\n        expect(folds.length).to.equal(1);\n        expect(folds).to.deep.equal([{\n          from: 9,\n          to: 27\n        }]);\n      });","file":"frontend/features/source-editor/languages/latex/latex-folding.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should fold both regions marked by comments","suites":["CodeMirror LaTeX-folding","Comment folding","with several sets of comments"],"updatePoint":{"line":197,"column":53,"index":6477},"line":197,"code":"      it('should fold both regions marked by comments', function () {\n        const folds = _getFolds(view);\n        expect(folds.length).to.equal(2);\n        expect(folds).to.deep.equal([{\n          from: 9,\n          to: 27\n        }, {\n          from: 33,\n          to: 50\n        }]);\n      });","file":"frontend/features/source-editor/languages/latex/latex-folding.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should fold all the regions marked by comments, with nesting","suites":["CodeMirror LaTeX-folding","Comment folding","with nested sets of comments"],"updatePoint":{"line":215,"column":70,"index":7075},"line":215,"code":"      it('should fold all the regions marked by comments, with nesting', function () {\n        const folds = _getFolds(view);\n        expect(folds.length).to.equal(3);\n        expect(folds).to.deep.equal([{\n          from: 9,\n          to: 50\n        }, {\n          from: 17,\n          to: 42\n        }, {\n          from: 25,\n          to: 34\n        }]);\n      });","file":"frontend/features/source-editor/languages/latex/latex-folding.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should fold","suites":["CodeMirror LaTeX-folding","Comment folding","with fold comment spanning entire document"],"updatePoint":{"line":236,"column":21,"index":7616},"line":236,"code":"      it('should fold', function () {\n        const folds = _getFolds(view);\n        expect(folds.length).to.equal(1);\n        expect(folds).to.deep.equal([{\n          from: 3,\n          to: 12\n        }]);\n      });","file":"frontend/features/source-editor/languages/latex/latex-folding.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should fold","suites":["CodeMirror LaTeX-folding","Comment folding","with fold comment at start of document"],"updatePoint":{"line":251,"column":21,"index":8061},"line":251,"code":"      it('should fold', function () {\n        const folds = _getFolds(view);\n        expect(folds.length).to.equal(1);\n        expect(folds).to.deep.equal([{\n          from: 3,\n          to: 12\n        }]);\n      });","file":"frontend/features/source-editor/languages/latex/latex-folding.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should fold","suites":["CodeMirror LaTeX-folding","Comment folding","with fold comment at end of document"],"updatePoint":{"line":266,"column":21,"index":8504},"line":266,"code":"      it('should fold', function () {\n        const folds = _getFolds(view);\n        expect(folds.length).to.equal(1);\n        expect(folds).to.deep.equal([{\n          from: 8,\n          to: 17\n        }]);\n      });","file":"frontend/features/source-editor/languages/latex/latex-folding.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept a simple environment match without errors","suites":["LatexLinter"],"updatePoint":{"line":10,"column":61,"index":641},"line":10,"code":"  it('should accept a simple environment match without errors', function () {\n    const {\n      errors\n    } = Parse('\\\\begin{foo}\\n' + '\\\\end{foo}\\n');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept an invalid \\it* command","suites":["LatexLinter"],"updatePoint":{"line":16,"column":44,"index":819},"line":16,"code":"  it('should accept an invalid \\\\it* command', function () {\n    const {\n      errors\n    } = Parse('\\\\it*hello\\n' + '\\\\bye\\n');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept newcomlumntype","suites":["LatexLinter"],"updatePoint":{"line":22,"column":34,"index":980},"line":22,"code":"  it('should accept newcomlumntype', function () {\n    const {\n      errors\n    } = Parse('hello\\n' + '\\\\newcolumntype{M}[1]{>{\\\\begin{varwidth}[t]{#1}}l<{\\\\end{varwidth}}}\\n' + 'bye');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept newenvironment","suites":["LatexLinter"],"updatePoint":{"line":28,"column":34,"index":1208},"line":28,"code":"  it('should accept newenvironment', function () {\n    const {\n      errors\n    } = Parse('\\\\newenvironment{Algorithm}[2][tbh]%\\n' + '{\\\\begin{myalgo}[#1]\\n' + '\\\\centering\\n' + '\\\\part{title}\\\\begin{minipage}{#2}\\n' + '\\\\begin{algorithm}[H]}%\\n' + '{\\\\end{algorithm}\\n' + '\\\\end{minipage}\\n' + '\\\\end{myalgo}}');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept newenvironment II","suites":["LatexLinter"],"updatePoint":{"line":34,"column":37,"index":1567},"line":34,"code":"  it('should accept newenvironment II', function () {\n    const {\n      errors\n    } = Parse('\\\\newenvironment{claimproof}[1][\\\\myproofname]{\\\\begin{proof}[#1]\\\\renewcommand*{\\\\qedsymbol}{\\\\(\\\\diamondsuit\\\\)}}{\\\\end{proof}}');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept superscript inside math mode","suites":["LatexLinter"],"updatePoint":{"line":40,"column":48,"index":1847},"line":40,"code":"  it('should accept superscript inside math mode', function () {\n    const {\n      errors\n    } = Parse('this is $a^b$ test');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept subscript inside math mode","suites":["LatexLinter"],"updatePoint":{"line":46,"column":46,"index":2014},"line":46,"code":"  it('should accept subscript inside math mode', function () {\n    const {\n      errors\n    } = Parse('this is $a_b$ test');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should return an error for superscript outside math mode","suites":["LatexLinter"],"updatePoint":{"line":52,"column":62,"index":2197},"line":52,"code":"  it('should return an error for superscript outside math mode', function () {\n    const {\n      errors\n    } = Parse('this is a^b test');\n    assert.equal(errors.length, 1);\n    assert.equal(errors[0].text, '^ must be inside math mode');\n    assert.equal(errors[0].type, 'error');\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should return an error subscript outside math mode","suites":["LatexLinter"],"updatePoint":{"line":60,"column":56,"index":2479},"line":60,"code":"  it('should return an error subscript outside math mode', function () {\n    const {\n      errors\n    } = Parse('this is a_b test');\n    assert.equal(errors.length, 1);\n    assert.equal(errors[0].text, '_ must be inside math mode');\n    assert.equal(errors[0].type, 'error');\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept math mode inside \\hbox outside math mode","suites":["LatexLinter"],"updatePoint":{"line":68,"column":61,"index":2766},"line":68,"code":"  it('should accept math mode inside \\\\hbox outside math mode', function () {\n    const {\n      errors\n    } = Parse('this is \\\\hbox{for every $bar$}');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept math mode inside \\hbox inside math mode","suites":["LatexLinter"],"updatePoint":{"line":74,"column":60,"index":2960},"line":74,"code":"  it('should accept math mode inside \\\\hbox inside math mode', function () {\n    const {\n      errors\n    } = Parse('this is $foo = \\\\hbox{for every $bar$}$ test');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept math mode inside \\text inside math mode","suites":["LatexLinter"],"updatePoint":{"line":80,"column":60,"index":3167},"line":80,"code":"  it('should accept math mode inside \\\\text inside math mode', function () {\n    const {\n      errors\n    } = Parse('this is $foo = \\\\text{for every $bar$}$ test');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept verbatim","suites":["LatexLinter"],"updatePoint":{"line":86,"column":28,"index":3342},"line":86,"code":"  it('should accept verbatim', function () {\n    const {\n      errors\n    } = Parse('this is text\\n' + '\\\\begin{verbatim}\\n' + 'this is verbatim\\n' + '\\\\end{verbatim}\\n' + 'this is more text\\n');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept verbatim with environment inside","suites":["LatexLinter"],"updatePoint":{"line":92,"column":52,"index":3604},"line":92,"code":"  it('should accept verbatim with environment inside', function () {\n    const {\n      errors\n    } = Parse('this is text\\n' + '\\\\begin{verbatim}\\n' + 'this is verbatim\\n' + '\\\\begin{foo}\\n' + 'this is verbatim too\\n' + '\\\\end{foo}\\n' + '\\\\end{verbatim}\\n' + 'this is more text\\n');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept verbatim with \\begin{verbatim} inside","suites":["LatexLinter"],"updatePoint":{"line":98,"column":58,"index":3935},"line":98,"code":"  it('should accept verbatim with \\\\begin{verbatim} inside', function () {\n    const {\n      errors\n    } = Parse('this is text\\n' + '\\\\begin{verbatim}\\n' + 'this is verbatim\\n' + '\\\\begin{verbatim}\\n' + 'this is verbatim too\\n' + '\\\\end{verbatim}\\n' + 'this is more text\\n');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept equation","suites":["LatexLinter"],"updatePoint":{"line":104,"column":28,"index":4224},"line":104,"code":"  it('should accept equation', function () {\n    const {\n      errors\n    } = Parse('this is text\\n' + '\\\\begin{equation}\\n' + '\\\\alpha^2 + b^2 = c^2\\n' + '\\\\end{equation}\\n' + 'this is more text\\n');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept $$","suites":["LatexLinter"],"updatePoint":{"line":110,"column":22,"index":4461},"line":110,"code":"  it('should accept $$', function () {\n    const {\n      errors\n    } = Parse('this is text\\n' + '$$\\n' + '\\\\alpha^2 + b^2 = c^2\\n' + '$$\\n' + 'this is more text\\n');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept $","suites":["LatexLinter"],"updatePoint":{"line":116,"column":21,"index":4669},"line":116,"code":"  it('should accept $', function () {\n    const {\n      errors\n    } = Parse('this is text $\\\\alpha^2 + b^2 = c^2$' + ' this is more text\\n');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept \\[","suites":["LatexLinter"],"updatePoint":{"line":122,"column":23,"index":4856},"line":122,"code":"  it('should accept \\\\[', function () {\n    const {\n      errors\n    } = Parse('this is text\\n' + '\\\\[\\n' + '\\\\alpha^2 + b^2 = c^2\\n' + '\\\\]\\n' + 'this is more text\\n');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept \\(","suites":["LatexLinter"],"updatePoint":{"line":128,"column":23,"index":5068},"line":128,"code":"  it('should accept \\\\(', function () {\n    const {\n      errors\n    } = Parse('this is text \\\\(\\\\alpha^2 + b^2 = c^2\\\\)' + ' this is more text\\n');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept \\begin{foo}","suites":["LatexLinter"],"updatePoint":{"line":134,"column":32,"index":5268},"line":134,"code":"  it('should accept \\\\begin{foo}', function () {\n    const {\n      errors\n    } = Parse('this is text\\n' + '\\\\begin{foo}\\n' + 'this is foo\\n' + '\\\\end{foo}\\n' + 'this is more text\\n');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept \\begin{foo_bar}","suites":["LatexLinter"],"updatePoint":{"line":140,"column":36,"index":5499},"line":140,"code":"  it('should accept \\\\begin{foo_bar}', function () {\n    const {\n      errors\n    } = Parse('this is text\\n' + '\\\\begin{foo_bar}\\n' + 'this is foo bar\\n' + '\\\\end{foo_bar}\\n' + 'this is more text\\n');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept \\begin{foo} \\begin{bar}","suites":["LatexLinter"],"updatePoint":{"line":146,"column":45,"index":5751},"line":146,"code":"  it('should accept \\\\begin{foo} \\\\begin{bar}', function () {\n    const {\n      errors\n    } = Parse('this is text\\n' + '\\\\begin{foo}\\n' + '\\\\begin{bar}\\n' + '\\\\begin{baz}\\n' + 'this is foo bar baz\\n' + '\\\\end{baz}\\n' + '\\\\end{bar}\\n' + '\\\\end{foo}\\n' + 'this is more text\\n');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept \\verb|...|","suites":["LatexLinter"],"updatePoint":{"line":152,"column":31,"index":6057},"line":152,"code":"  it('should accept \\\\verb|...|', function () {\n    const {\n      errors\n    } = Parse('this is text \\\\verb|hello| and more\\n');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept \\verb|...| with special chars","suites":["LatexLinter"],"updatePoint":{"line":158,"column":50,"index":6247},"line":158,"code":"  it('should accept \\\\verb|...| with special chars', function () {\n    const {\n      errors\n    } = Parse('this is text \\\\verb|{}()^_@$xhello| and more\\n');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept \\url|...|","suites":["LatexLinter"],"updatePoint":{"line":164,"column":30,"index":6426},"line":164,"code":"  it('should accept \\\\url|...|', function () {\n    const {\n      errors\n    } = Parse('this is text \\\\url|http://www.sharelatex.com/| and more\\n');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept \\url{...}","suites":["LatexLinter"],"updatePoint":{"line":170,"column":30,"index":6616},"line":170,"code":"  it('should accept \\\\url{...}', function () {\n    const {\n      errors\n    } = Parse('this is text \\\\url{http://www.sharelatex.com/} and more\\n');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept \\url{...} with % chars","suites":["LatexLinter"],"updatePoint":{"line":176,"column":43,"index":6819},"line":176,"code":"  it('should accept \\\\url{...} with % chars', function () {\n    const {\n      errors\n    } = Parse('this is text \\\\url{http://www.sharelatex.com/hello%20world} and more\\n');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept \\left( and \\right)","suites":["LatexLinter"],"updatePoint":{"line":182,"column":40,"index":7032},"line":182,"code":"  it('should accept \\\\left( and \\\\right)', function () {\n    const {\n      errors\n    } = Parse('math $\\\\left( x + y \\\\right) = y + x$ and more\\n');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept \\left( and \\right.","suites":["LatexLinter"],"updatePoint":{"line":188,"column":40,"index":7223},"line":188,"code":"  it('should accept \\\\left( and \\\\right.', function () {\n    const {\n      errors\n    } = Parse('math $\\\\left( x + y \\\\right. = y + x$ and more\\n');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept \\left. and \\right)","suites":["LatexLinter"],"updatePoint":{"line":194,"column":40,"index":7414},"line":194,"code":"  it('should accept \\\\left. and \\\\right)', function () {\n    const {\n      errors\n    } = Parse('math $\\\\left. x + y \\\\right) = y + x$ and more\\n');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept complex math nesting","suites":["LatexLinter"],"updatePoint":{"line":200,"column":40,"index":7605},"line":200,"code":"  it('should accept complex math nesting', function () {\n    const {\n      errors\n    } = Parse('math $\\\\left( {x + {y + z} + x} \\\\right\\\\} = \\\\left[y + x\\\\right.$ and more\\n');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept math toggling $a$$b$","suites":["LatexLinter"],"updatePoint":{"line":206,"column":40,"index":7825},"line":206,"code":"  it('should accept math toggling $a$$b$', function () {\n    const {\n      errors\n    } = Parse('math $a$$b$ and more\\n');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept math toggling $$display$$$inline$","suites":["LatexLinter"],"updatePoint":{"line":212,"column":53,"index":8003},"line":212,"code":"  it('should accept math toggling $$display$$$inline$', function () {\n    const {\n      errors\n    } = Parse('math $$display$$$inline$ and more\\n');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept math definition commands","suites":["LatexLinter"],"updatePoint":{"line":218,"column":44,"index":8185},"line":218,"code":"  it('should accept math definition commands', function () {\n    const {\n      errors\n    } = Parse('\\\\let\\\\originalleft\\\\left\\n' + '\\\\let\\\\originalright\\\\right\\n' + '\\\\renewcommand{\\\\left}{\\\\mathopen{}\\\\mathclose\\\\bgroup\\\\originalleft}\\n' + '\\\\renewcommand{\\\\right}{\\\\aftergroup\\\\egroup\\\\originalright}\\n');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept math reflectbox commands","suites":["LatexLinter"],"updatePoint":{"line":224,"column":44,"index":8536},"line":224,"code":"  it('should accept math reflectbox commands', function () {\n    const {\n      errors\n    } = Parse('$\\\\reflectbox{$alpha$}$\\n');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept math scalebox commands","suites":["LatexLinter"],"updatePoint":{"line":230,"column":42,"index":8706},"line":230,"code":"  it('should accept math scalebox commands', function () {\n    const {\n      errors\n    } = Parse('$\\\\scalebox{2}{$alpha$}$\\n');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept math rotatebox commands","suites":["LatexLinter"],"updatePoint":{"line":236,"column":43,"index":8878},"line":236,"code":"  it('should accept math rotatebox commands', function () {\n    const {\n      errors\n    } = Parse('$\\\\rotatebox{60}{$alpha$}$\\n');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept math resizebox commands","suites":["LatexLinter"],"updatePoint":{"line":242,"column":43,"index":9052},"line":242,"code":"  it('should accept math resizebox commands', function () {\n    const {\n      errors\n    } = Parse('$\\\\resizebox{2}{3}{$alpha$}$\\n');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept all math box commands","suites":["LatexLinter"],"updatePoint":{"line":248,"column":41,"index":9226},"line":248,"code":"  it('should accept all math box commands', function () {\n    const {\n      errors\n    } = Parse('\\\\[ \\\\left(\\n' + '\\\\shiftright{2ex}{\\\\raisebox{-2ex}{\\\\scalebox{2}{$\\\\ast$}}}\\n' + '\\\\reflectbox{$ddots$}\\n' + '\\\\right). \\\\]\\n');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept math tag commands","suites":["LatexLinter"],"updatePoint":{"line":254,"column":37,"index":9493},"line":254,"code":"  it('should accept math tag commands', function () {\n    const {\n      errors\n    } = Parse('$\\\\tag{$alpha$}$\\n');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept math \\def commands","suites":["LatexLinter"],"updatePoint":{"line":260,"column":39,"index":9653},"line":260,"code":"  it('should accept math \\\\def commands', function () {\n    const {\n      errors\n    } = Parse('\\\\def\\\\peb[#1]{{\\\\left\\\\lfloor #1\\\\right\\\\rfloor}}');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept math \\def commands II","suites":["LatexLinter"],"updatePoint":{"line":266,"column":42,"index":9848},"line":266,"code":"  it('should accept math \\\\def commands II', function () {\n    const {\n      errors\n    } = Parse('\\\\def\\\\foo#1{\\\\gamma^#1}');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept DeclareMathOperator","suites":["LatexLinter"],"updatePoint":{"line":272,"column":39,"index":10014},"line":272,"code":"  it('should accept DeclareMathOperator', function () {\n    const {\n      errors\n    } = Parse('\\\\DeclareMathOperator{\\\\var}{\\\\Delta^2\\\\!}');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept DeclarePairedDelimiter","suites":["LatexLinter"],"updatePoint":{"line":278,"column":42,"index":10201},"line":278,"code":"  it('should accept DeclarePairedDelimiter', function () {\n    const {\n      errors\n    } = Parse('\\\\DeclarePairedDelimiter{\\\\spro}{\\\\left(}{\\\\right)^{\\\\ast}}');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept nested user-defined math commands","suites":["LatexLinter"],"updatePoint":{"line":284,"column":53,"index":10416},"line":284,"code":"  it('should accept nested user-defined math commands', function () {\n    const {\n      errors\n    } = Parse('$\\\\foo{$\\\\alpha \\\\bar{x^y}{\\\\cite{hello}}$}{\\\\gamma}{$\\\\beta\\\\baz{\\\\alpha}$}{\\\\cite{foo}}$');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept nested user-defined math commands II","suites":["LatexLinter"],"updatePoint":{"line":290,"column":56,"index":10665},"line":290,"code":"  it('should accept nested user-defined math commands II', function () {\n    const {\n      errors\n    } = Parse('\\\\foo{$\\\\alpha \\\\bar{x^y}{\\\\cite{hello}}$}{\\\\gamma}{$\\\\beta\\\\baz{\\\\alpha}$}{\\\\cite{foo}}');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept newenvironment with multiple parameters","suites":["LatexLinter"],"updatePoint":{"line":296,"column":59,"index":10915},"line":296,"code":"  it('should accept newenvironment with multiple parameters', function () {\n    const {\n      errors\n    } = Parse('\\\\newenvironment{case}[1][\\\\textsc{Case}]\\n' + '{\\\\begin{trivlist}\\\\item[\\\\hskip \\\\labelsep {\\\\textsc{#1}}]}{\\\\end{trivlist}}');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept newenvironment with no parameters","suites":["LatexLinter"],"updatePoint":{"line":302,"column":53,"index":11196},"line":302,"code":"  it('should accept newenvironment with no parameters', function () {\n    const {\n      errors\n    } = Parse('\\\\newenvironment{case}{\\\\begin{trivlist}\\\\item[\\\\hskip \\\\labelsep {\\\\textsc{#1}}]}{\\\\end{trivlist}}');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept tikzfeynman","suites":["LatexLinter"],"updatePoint":{"line":308,"column":31,"index":11429},"line":308,"code":"  it('should accept tikzfeynman', function () {\n    const {\n      errors\n    } = Parse('\\\\begin{equation*}\\n' + '\\\\feynmandiagram[layered layout, medium, horizontal=a to b] {\\n' + ' a [particle=\\\\(H\\\\)] -- [scalar] b [dot] -- [photon] f1 [particle=\\\\(W^{\\\\pm}\\\\)],\\n' + ' b -- [boson, edge label=\\\\(W^{\\\\mp}\\\\)] c [dot],\\n' + ' c -- [fermion] f2 [particle=\\\\(f\\\\)],\\n' + \" c -- [anti fermion] f3 [particle=\\\\(\\\\bar{f}'\\\\)],\\n\" + ' };this is a change\\n' + '\\\\end{equation*}');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should return errors from malformed \\end","suites":["LatexLinter"],"updatePoint":{"line":314,"column":47,"index":11963},"line":314,"code":"  it('should return errors from malformed \\\\end', function () {\n    const {\n      errors\n    } = Parse('this is text\\n' + '\\\\begin{foo}\\n' + '\\\\begin{bar}\\n' + 'this is foo bar baz\\n' + '\\\\end{bar\\n' + '\\\\end{foo}\\n' + 'this is more text\\n');\n    assert.equal(errors.length, 4);\n    assert.equal(errors[0].text, 'unclosed \\\\begin{bar} found at \\\\end{foo}');\n    assert.equal(errors[1].text, 'invalid environment command \\\\end{bar');\n    assert.equal(errors[2].text, 'unclosed open group { found at \\\\end{foo}');\n    assert.equal(errors[3].text, 'unexpected \\\\end{foo} after \\\\begin{bar}');\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept \\newcommand*","suites":["LatexLinter"],"updatePoint":{"line":324,"column":33,"index":12545},"line":324,"code":"  it('should accept \\\\newcommand*', function () {\n    const {\n      errors\n    } = Parse('\\\\newcommand*{\\\\foo}{\\\\bar}');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should accept incomplete \\newcommand*","suites":["LatexLinter"],"updatePoint":{"line":330,"column":44,"index":12719},"line":330,"code":"  it('should accept incomplete \\\\newcommand*', function () {\n    const {\n      errors\n    } = Parse('\\\\newcommand*{\\\\beq' + '}');\n    assert.equal(errors.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should return math mode contexts","suites":["LatexLinter"],"updatePoint":{"line":380,"column":38,"index":13701},"line":380,"code":"  it('should return math mode contexts', function () {\n    const {\n      contexts\n    } = Parse('\\\\begin{document}\\n' + '$$\\n' + '\\\\begin{array}\\n' + '\\\\left( \\\\foo{bar} \\\\right] & 2\\n' + '\\\\end{array}\\n' + '$$\\n' + '\\\\end{document}');\n    assert.equal(contexts.length, 1);\n    assert.equal(contexts[0].type, 'math');\n    assert.equal(contexts[0].range.start.row, 1);\n    assert.equal(contexts[0].range.start.column, 0);\n    assert.equal(contexts[0].range.end.row, 5);\n    assert.equal(contexts[0].range.end.column, 2);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should remove error when cursor is inside incomplete command","suites":["LatexLinter"],"updatePoint":{"line":391,"column":66,"index":14255},"line":391,"code":"  it('should remove error when cursor is inside incomplete command', function () {\n    const {\n      errors\n    } = Parse('\\\\begin{}');\n    const diagnostics = errorsToDiagnostics(errors, 7, 9);\n    assert.equal(errors.length, 1);\n    assert.equal(diagnostics.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should show an error when cursor is outside incomplete command","suites":["LatexLinter"],"updatePoint":{"line":399,"column":68,"index":14535},"line":399,"code":"  it('should show an error when cursor is outside incomplete command', function () {\n    const {\n      errors\n    } = Parse('\\\\begin{}');\n    const diagnostics = errorsToDiagnostics(errors, 6, 9);\n    assert.equal(errors.length, 1);\n    assert.equal(diagnostics.length, 1);\n    assert.equal(diagnostics[0].from, 0);\n    assert.equal(diagnostics[0].to, 6);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should adjust an error range when the cursor is inside that range","suites":["LatexLinter"],"updatePoint":{"line":409,"column":71,"index":14900},"line":409,"code":"  it('should adjust an error range when the cursor is inside that range', function () {\n    const {\n      errors\n    } = Parse('\\\\begin{}');\n    const diagnostics = errorsToDiagnostics(errors, 4, 7);\n    assert.equal(errors.length, 1);\n    assert.equal(errors[0].startPos, 0);\n    assert.equal(errors[0].endPos, 7);\n    assert.equal(diagnostics.length, 1);\n    assert.equal(diagnostics[0].from, 0);\n    assert.equal(diagnostics[0].to, 4);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should reject an error when part of the error range is outside of the document boundaries","suites":["LatexLinter"],"updatePoint":{"line":421,"column":95,"index":15369},"line":421,"code":"  it('should reject an error when part of the error range is outside of the document boundaries', function () {\n    const {\n      errors\n    } = Parse('\\\\begin{}');\n    const diagnostics = errorsToDiagnostics(errors, 8, 6);\n    assert.equal(errors.length, 1);\n    assert.equal(diagnostics.length, 0);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should merge two overlapping identical diagnostics","suites":["LatexLinter"],"updatePoint":{"line":429,"column":56,"index":15637},"line":429,"code":"  it('should merge two overlapping identical diagnostics', function () {\n    const diagnostics = [{\n      from: 0,\n      to: 2,\n      message: 'Message 1',\n      severity: 'error'\n    }, {\n      from: 1,\n      to: 3,\n      message: 'Message 1',\n      severity: 'error'\n    }];\n    const mergedDiagnostics = mergeCompatibleOverlappingDiagnostics(diagnostics);\n    assert.deepEqual(mergedDiagnostics, [{\n      from: 0,\n      to: 3,\n      message: 'Message 1',\n      severity: 'error'\n    }]);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should merge two touching identical diagnostics","suites":["LatexLinter"],"updatePoint":{"line":449,"column":53,"index":16131},"line":449,"code":"  it('should merge two touching identical diagnostics', function () {\n    const diagnostics = [{\n      from: 0,\n      to: 2,\n      message: 'Message 1',\n      severity: 'error'\n    }, {\n      from: 2,\n      to: 3,\n      message: 'Message 1',\n      severity: 'error'\n    }];\n    const mergedDiagnostics = mergeCompatibleOverlappingDiagnostics(diagnostics);\n    assert.deepEqual(mergedDiagnostics, [{\n      from: 0,\n      to: 3,\n      message: 'Message 1',\n      severity: 'error'\n    }]);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should not merge two overlapping diagnostics with different messages","suites":["LatexLinter"],"updatePoint":{"line":469,"column":74,"index":16646},"line":469,"code":"  it('should not merge two overlapping diagnostics with different messages', function () {\n    const diagnostics = [{\n      from: 0,\n      to: 2,\n      message: 'Message 1',\n      severity: 'error'\n    }, {\n      from: 1,\n      to: 3,\n      message: 'Message 2',\n      severity: 'error'\n    }];\n    const mergedDiagnostics = mergeCompatibleOverlappingDiagnostics(diagnostics);\n    assert.deepEqual(diagnostics, mergedDiagnostics);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should not merge two overlapping diagnostics with different severities","suites":["LatexLinter"],"updatePoint":{"line":484,"column":76,"index":17085},"line":484,"code":"  it('should not merge two overlapping diagnostics with different severities', function () {\n    const diagnostics = [{\n      from: 0,\n      to: 2,\n      message: 'Message 1',\n      severity: 'error'\n    }, {\n      from: 1,\n      to: 3,\n      message: 'Message 1',\n      severity: 'warning'\n    }];\n    const mergedDiagnostics = mergeCompatibleOverlappingDiagnostics(diagnostics);\n    assert.deepEqual(diagnostics, mergedDiagnostics);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should merge three overlapping identical diagnostics","suites":["LatexLinter"],"updatePoint":{"line":499,"column":58,"index":17508},"line":499,"code":"  it('should merge three overlapping identical diagnostics', function () {\n    const diagnostics = [{\n      from: 0,\n      to: 2,\n      message: 'Message 1',\n      severity: 'error'\n    }, {\n      from: 1,\n      to: 4,\n      message: 'Message 1',\n      severity: 'error'\n    }, {\n      from: 3,\n      to: 5,\n      message: 'Message 1',\n      severity: 'error'\n    }];\n    const mergedDiagnostics = mergeCompatibleOverlappingDiagnostics(diagnostics);\n    assert.deepEqual(mergedDiagnostics, [{\n      from: 0,\n      to: 5,\n      message: 'Message 1',\n      severity: 'error'\n    }]);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should merge two separate sets of overlapping identical diagnostics","suites":["LatexLinter"],"updatePoint":{"line":524,"column":73,"index":18111},"line":524,"code":"  it('should merge two separate sets of overlapping identical diagnostics', function () {\n    const diagnostics = [{\n      from: 0,\n      to: 2,\n      message: 'Message 1',\n      severity: 'error'\n    }, {\n      from: 2,\n      to: 3,\n      message: 'Message 1',\n      severity: 'error'\n    }, {\n      from: 2,\n      to: 5,\n      message: 'Message 2',\n      severity: 'error'\n    }, {\n      from: 4,\n      to: 6,\n      message: 'Message 3',\n      severity: 'error'\n    }, {\n      from: 5,\n      to: 7,\n      message: 'Message 3',\n      severity: 'error'\n    }];\n    const mergedDiagnostics = mergeCompatibleOverlappingDiagnostics(diagnostics);\n    assert.deepEqual(mergedDiagnostics, [{\n      from: 0,\n      to: 3,\n      message: 'Message 1',\n      severity: 'error'\n    }, {\n      from: 2,\n      to: 5,\n      message: 'Message 2',\n      severity: 'error'\n    }, {\n      from: 4,\n      to: 7,\n      message: 'Message 3',\n      severity: 'error'\n    }]);\n  });","file":"frontend/features/source-editor/languages/latex/latex-linter.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should have empty outline","suites":["CodeMirror LaTeX-FileOutline","with no update","an empty document"],"updatePoint":{"line":56,"column":35,"index":2138},"line":56,"code":"      it('should have empty outline', function () {\n        const outline = getOutline(view);\n        expect(outline).to.be.empty;\n      });","file":"frontend/features/source-editor/languages/latex/latex-outline.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should have outline with different levels","suites":["CodeMirror LaTeX-FileOutline","with no update","a document with nested sections"],"updatePoint":{"line":67,"column":51,"index":2560},"line":67,"code":"      it('should have outline with different levels', function () {\n        const outline = getOutline(view);\n        expect(outline).to.be.deep.equal([{\n          from: 7,\n          to: 26,\n          level: SECTION_LEVEL,\n          title: 'sec title',\n          line: 2\n        }, {\n          from: 35,\n          to: 60,\n          level: SUB_SECTION_LEVEL,\n          title: 'subsec title',\n          line: 4\n        }]);\n      });","file":"frontend/features/source-editor/languages/latex/latex-outline.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should have outline with same levels for siblings","suites":["CodeMirror LaTeX-FileOutline","with no update","a document with sibling sections"],"updatePoint":{"line":90,"column":59,"index":3264},"line":90,"code":"      it('should have outline with same levels for siblings', function () {\n        const outline = getOutline(view);\n        expect(outline).to.be.deep.equal([{\n          from: 7,\n          to: 28,\n          level: SECTION_LEVEL,\n          title: 'sec title 1',\n          line: 2\n        }, {\n          from: 37,\n          to: 58,\n          level: SECTION_LEVEL,\n          title: 'sec title 2',\n          line: 4\n        }]);\n      });","file":"frontend/features/source-editor/languages/latex/latex-outline.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should update title in outline","suites":["CodeMirror LaTeX-FileOutline","with change to title","for appending to title"],"updatePoint":{"line":126,"column":40,"index":4213},"line":126,"code":"      it('should update title in outline', function () {\n        const updatedOutline = getOutline(view);\n        expect(updatedOutline).to.deep.equal([{\n          from: 0,\n          to: 17,\n          title: 'title 1',\n          line: 1,\n          level: SECTION_LEVEL\n        }]);\n      });","file":"frontend/features/source-editor/languages/latex/latex-outline.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should update title in outline","suites":["CodeMirror LaTeX-FileOutline","with change to title","for removing from title"],"updatePoint":{"line":141,"column":40,"index":4641},"line":141,"code":"      it('should update title in outline', function () {\n        const updatedOutline = getOutline(view);\n        expect(updatedOutline).to.deep.equal([{\n          from: 0,\n          to: 15,\n          title: 'title',\n          line: 1,\n          level: SECTION_LEVEL\n        }]);\n      });","file":"frontend/features/source-editor/languages/latex/latex-outline.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should update position for moved section","suites":["CodeMirror LaTeX-FileOutline","for moving section"],"updatePoint":{"line":174,"column":48,"index":5519},"line":174,"code":"    it('should update position for moved section', function () {\n      const updatedOutline = getOutline(view);\n      expect(updatedOutline).to.deep.equal([{\n        from: 0,\n        to: 15,\n        title: 'title',\n        line: 1,\n        level: SECTION_LEVEL\n      }, {\n        from: 17,\n        to: 38,\n        title: 'subtitle',\n        line: 3,\n        level: SUB_SECTION_LEVEL\n      }]);\n    });","file":"frontend/features/source-editor/languages/latex/latex-outline.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should remove the section from the outline","suites":["CodeMirror LaTeX-FileOutline","for removing a section"],"updatePoint":{"line":206,"column":50,"index":6347},"line":206,"code":"    it('should remove the section from the outline', function () {\n      const updatedOutline = getOutline(view);\n      expect(updatedOutline).to.be.empty;\n    });","file":"frontend/features/source-editor/languages/latex/latex-outline.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should be nested properly","suites":["CodeMirror LaTeX-FileOutline","for changing parent section"],"updatePoint":{"line":235,"column":33,"index":7183},"line":235,"code":"    it('should be nested properly', function () {\n      const updatedOutline = getOutline(view);\n      expect(updatedOutline).to.deep.equal([{\n        from: 0,\n        to: 17,\n        title: 'section',\n        line: 1,\n        level: SECTION_LEVEL\n      }, {\n        from: 18,\n        to: 41,\n        title: 'subsection',\n        line: 2,\n        level: SUB_SECTION_LEVEL\n      }, {\n        from: 42,\n        to: 71,\n        title: 'subsubsection',\n        line: 3,\n        level: SUB_SUB_SECTION_LEVEL\n      }]);\n    });","file":"frontend/features/source-editor/languages/latex/latex-outline.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should not include them in the outline","suites":["CodeMirror LaTeX-FileOutline","for a sectioning command inside a newcommand or renewcommand"],"updatePoint":{"line":264,"column":46,"index":8063},"line":264,"code":"    it('should not include them in the outline', function () {\n      const outline = getOutline(view);\n      expect(outline?.length).to.equal(1);\n      expect(outline).to.deep.equal([{\n        from: 0,\n        to: 17,\n        title: 'section',\n        line: 1,\n        level: SECTION_LEVEL\n      }]);\n    });","file":"frontend/features/source-editor/languages/latex/latex-outline.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should include them in the file outline","suites":["CodeMirror LaTeX-FileOutline","for all section types"],"updatePoint":{"line":282,"column":47,"index":8735},"line":282,"code":"    it('should include them in the file outline', function () {\n      const outline = getOutline(view);\n      expect(outline).to.deep.equal([{\n        from: 0,\n        to: 11,\n        title: 'book',\n        line: 1,\n        level: BOOK_LEVEL\n      }, {\n        from: 12,\n        to: 23,\n        title: 'part',\n        line: 2,\n        level: PART_LEVEL\n      }, {\n        from: 24,\n        to: 41,\n        title: 'chapter',\n        line: 3,\n        level: CHAPTER_LEVEL\n      }, {\n        from: 42,\n        to: 59,\n        title: 'section',\n        line: 4,\n        level: SECTION_LEVEL\n      }, {\n        from: 60,\n        to: 83,\n        title: 'subsection',\n        line: 5,\n        level: SUB_SECTION_LEVEL\n      }, {\n        from: 84,\n        to: 113,\n        title: 'subsubsection',\n        line: 6,\n        level: SUB_SUB_SECTION_LEVEL\n      }, {\n        from: 114,\n        to: 135,\n        title: 'paragraph',\n        line: 7,\n        level: PARAGRAPH_LEVEL\n      }, {\n        from: 136,\n        to: 163,\n        title: 'subparagraph',\n        line: 8,\n        level: SUB_PARAGRAPH_LEVEL\n      }]);\n    });","file":"frontend/features/source-editor/languages/latex/latex-outline.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should use the optional argument as title","suites":["CodeMirror LaTeX-FileOutline","sectioning commands with optional arguments"],"updatePoint":{"line":341,"column":49,"index":10075},"line":341,"code":"    it('should use the optional argument as title', function () {\n      const outline = getOutline(view);\n      expect(outline).to.deep.equal([{\n        from: 0,\n        to: 30,\n        title: 'short title',\n        line: 1,\n        level: SECTION_LEVEL\n      }]);\n    });","file":"frontend/features/source-editor/languages/latex/latex-outline.test.ts","skipped":false,"dir":"services/web/test"},{"name":"still shows an outline","suites":["CodeMirror LaTeX-FileOutline","for ill-formed \\def command"],"updatePoint":{"line":358,"column":30,"index":10557},"line":358,"code":"    it('still shows an outline', function () {\n      const outline = getOutline(view);\n      expect(outline).to.deep.equal([{\n        from: 8,\n        to: 22,\n        title: 'test',\n        line: 2,\n        level: SECTION_LEVEL\n      }, {\n        from: 23,\n        to: 41,\n        title: 'test2',\n        line: 3,\n        level: SUB_SECTION_LEVEL\n      }]);\n    });","file":"frontend/features/source-editor/languages/latex/latex-outline.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should show up in the file outline","suites":["CodeMirror LaTeX-FileOutline","for beamer frames","with titles"],"updatePoint":{"line":382,"column":44,"index":11200},"line":382,"code":"      it('should show up in the file outline', function () {\n        const outline = getOutline(view);\n        expect(outline).to.deep.equal([{\n          from: 0,\n          to: 28,\n          title: 'frame title',\n          line: 1,\n          level: FRAME_LEVEL\n        }]);\n      });","file":"frontend/features/source-editor/languages/latex/latex-outline.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should not show up in the file outline","suites":["CodeMirror LaTeX-FileOutline","for beamer frames","without titles"],"updatePoint":{"line":399,"column":48,"index":11695},"line":399,"code":"      it('should not show up in the file outline', function () {\n        const outline = getOutline(view);\n        expect(outline).to.be.empty;\n      });","file":"frontend/features/source-editor/languages/latex/latex-outline.test.ts","skipped":false,"dir":"services/web/test"},{"name":"returns false when no trial end date","suites":["canExtendTrial"],"updatePoint":{"line":6,"column":42,"index":270},"line":6,"code":"  it('returns false when no trial end date', function () {\n    expect(canExtendTrial('collab')).to.be.false;\n  });","file":"frontend/features/subscription/util/can-extend-trial.test.ts","skipped":false,"dir":"services/web/test"},{"name":"returns false when a plan code without \"collaborator\" ","suites":["canExtendTrial"],"updatePoint":{"line":9,"column":60,"index":403},"line":9,"code":"  it('returns false when a plan code without \"collaborator\" ', function () {\n    expect(canExtendTrial('test', false, d.toString())).to.be.false;\n  });","file":"frontend/features/subscription/util/can-extend-trial.test.ts","skipped":false,"dir":"services/web/test"},{"name":"returns false when on a plan with trial date in future but has \"collaborator\" and \"ann\" in plan code","suites":["canExtendTrial"],"updatePoint":{"line":12,"column":106,"index":601},"line":12,"code":"  it('returns false when on a plan with trial date in future but has \"collaborator\" and \"ann\" in plan code', function () {\n    expect(canExtendTrial('collaborator-annual', false, d.toString())).to.be.false;\n  });","file":"frontend/features/subscription/util/can-extend-trial.test.ts","skipped":false,"dir":"services/web/test"},{"name":"returns false when on a plan with trial date in future and plan code has \"collaborator\" and no \"ann\" but is a group plan","suites":["canExtendTrial"],"updatePoint":{"line":15,"column":126,"index":834},"line":15,"code":"  it('returns false when on a plan with trial date in future and plan code has \"collaborator\" and no \"ann\" but is a group plan', function () {\n    expect(canExtendTrial('collaborator', true, d.toString())).to.be.false;\n  });","file":"frontend/features/subscription/util/can-extend-trial.test.ts","skipped":false,"dir":"services/web/test"},{"name":"returns true when on a plan with \"collaborator\" and without \"ann\" and trial date in future","suites":["canExtendTrial"],"updatePoint":{"line":18,"column":96,"index":1029},"line":18,"code":"  it('returns true when on a plan with \"collaborator\" and without \"ann\" and trial date in future', function () {\n    expect(canExtendTrial('collaborator', false, d.toString())).to.be.true;\n  });","file":"frontend/features/subscription/util/can-extend-trial.test.ts","skipped":false,"dir":"services/web/test"},{"name":"returns false when no date sent","suites":["freeTrialExpiresUnderSevenDays"],"updatePoint":{"line":4,"column":37,"index":262},"line":4,"code":"  it('returns false when no date sent', function () {\n    expect(freeTrialExpiresUnderSevenDays()).to.be.false;\n  });","file":"frontend/features/subscription/util/free-trial-expires-under-seven-days.test.ts","skipped":false,"dir":"services/web/test"},{"name":"returns false when date is null","suites":["freeTrialExpiresUnderSevenDays"],"updatePoint":{"line":7,"column":37,"index":380},"line":7,"code":"  it('returns false when date is null', function () {\n    expect(freeTrialExpiresUnderSevenDays(null)).to.be.false;\n  });","file":"frontend/features/subscription/util/free-trial-expires-under-seven-days.test.ts","skipped":false,"dir":"services/web/test"},{"name":"returns false when date is in the past","suites":["freeTrialExpiresUnderSevenDays"],"updatePoint":{"line":10,"column":44,"index":509},"line":10,"code":"  it('returns false when date is in the past', function () {\n    expect(freeTrialExpiresUnderSevenDays('2000-02-16T17:59:07.000Z')).to.be.false;\n  });","file":"frontend/features/subscription/util/free-trial-expires-under-seven-days.test.ts","skipped":false,"dir":"services/web/test"},{"name":"returns true when date is in 6 days","suites":["freeTrialExpiresUnderSevenDays"],"updatePoint":{"line":13,"column":41,"index":657},"line":13,"code":"  it('returns true when date is in 6 days', function () {\n    const d = new Date();\n    d.setDate(d.getDate() + 6);\n    expect(freeTrialExpiresUnderSevenDays(d.toString())).to.be.true;\n  });","file":"frontend/features/subscription/util/free-trial-expires-under-seven-days.test.ts","skipped":false,"dir":"services/web/test"},{"name":"returns false when date is in 8 days","suites":["freeTrialExpiresUnderSevenDays"],"updatePoint":{"line":18,"column":42,"index":849},"line":18,"code":"  it('returns false when date is in 8 days', function () {\n    const d = new Date();\n    d.setDate(d.getDate() + 8);\n    expect(freeTrialExpiresUnderSevenDays(d.toString())).to.be.false;\n  });","file":"frontend/features/subscription/util/free-trial-expires-under-seven-days.test.ts","skipped":false,"dir":"services/web/test"},{"name":"returns false when no date sent","suites":["isInFreeTrial"],"updatePoint":{"line":5,"column":37,"index":251},"line":5,"code":"  it('returns false when no date sent', function () {\n    expect(isInFreeTrial()).to.be.false;\n  });","file":"frontend/features/subscription/util/is-in-free-trial.test.ts","skipped":false,"dir":"services/web/test"},{"name":"returns false when date is null","suites":["isInFreeTrial"],"updatePoint":{"line":8,"column":37,"index":352},"line":8,"code":"  it('returns false when date is null', function () {\n    expect(isInFreeTrial(null)).to.be.false;\n  });","file":"frontend/features/subscription/util/is-in-free-trial.test.ts","skipped":false,"dir":"services/web/test"},{"name":"returns false when date is in the past","suites":["isInFreeTrial"],"updatePoint":{"line":11,"column":44,"index":464},"line":11,"code":"  it('returns false when date is in the past', function () {\n    expect(isInFreeTrial('2000-02-16T17:59:07.000Z')).to.be.false;\n  });","file":"frontend/features/subscription/util/is-in-free-trial.test.ts","skipped":false,"dir":"services/web/test"},{"name":"returns true when date is in the future","suites":["isInFreeTrial"],"updatePoint":{"line":14,"column":45,"index":599},"line":14,"code":"  it('returns true when date is in the future', function () {\n    const today = new Date();\n    const sevenDaysFromToday = new Date().setDate(today.getDate() + 7);\n    const sevenDaysFromTodayFormatted = dateformat(sevenDaysFromToday, 'dS mmmm yyyy');\n    expect(isInFreeTrial(sevenDaysFromTodayFormatted)).to.be.true;\n  });","file":"frontend/features/subscription/util/is-in-free-trial.test.ts","skipped":false,"dir":"services/web/test"},{"name":"returns false when a plan code without \"collaborator\" ","suites":["isMonthlyCollaboratorPlan"],"updatePoint":{"line":4,"column":60,"index":268},"line":4,"code":"  it('returns false when a plan code without \"collaborator\" ', function () {\n    expect(isMonthlyCollaboratorPlan('test', false)).to.be.false;\n  });","file":"frontend/features/subscription/util/is-monthly-collaborator-plan.test.ts","skipped":false,"dir":"services/web/test"},{"name":"returns false when on a plan with \"collaborator\" and \"ann\"","suites":["isMonthlyCollaboratorPlan"],"updatePoint":{"line":7,"column":64,"index":421},"line":7,"code":"  it('returns false when on a plan with \"collaborator\" and \"ann\"', function () {\n    expect(isMonthlyCollaboratorPlan('collaborator-annual', false)).to.be.false;\n  });","file":"frontend/features/subscription/util/is-monthly-collaborator-plan.test.ts","skipped":false,"dir":"services/web/test"},{"name":"returns false when on a plan with \"collaborator\" and without \"ann\" but is a group plan","suites":["isMonthlyCollaboratorPlan"],"updatePoint":{"line":10,"column":92,"index":617},"line":10,"code":"  it('returns false when on a plan with \"collaborator\" and without \"ann\" but is a group plan', function () {\n    expect(isMonthlyCollaboratorPlan('collaborator', true)).to.be.false;\n  });","file":"frontend/features/subscription/util/is-monthly-collaborator-plan.test.ts","skipped":false,"dir":"services/web/test"},{"name":"returns true when on a plan with non-group \"collaborator\" monthly plan","suites":["isMonthlyCollaboratorPlan"],"updatePoint":{"line":13,"column":76,"index":789},"line":13,"code":"  it('returns true when on a plan with non-group \"collaborator\" monthly plan', function () {\n    expect(isMonthlyCollaboratorPlan('collaborator', false)).to.be.true;\n  });","file":"frontend/features/subscription/util/is-monthly-collaborator-plan.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should handle no tax rate","suites":["formatPriceForDisplayData"],"updatePoint":{"line":10,"column":31,"index":383},"line":10,"code":"  it('should handle no tax rate', function () {\n    const data = formatPriceForDisplayData('1000', 0, 'USD');\n    expect(data).to.deep.equal({\n      totalForDisplay: '$1000',\n      totalAsNumber: 1000,\n      subtotal: '$1000.00',\n      tax: '$0.00',\n      includesTax: false\n    });\n    window.metaAttributesCache = new Map();\n  });","file":"frontend/features/subscription/util/recurly-pricing.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should handle a tax rate","suites":["formatPriceForDisplayData"],"updatePoint":{"line":21,"column":30,"index":715},"line":21,"code":"  it('should handle a tax rate', function () {\n    const data = formatPriceForDisplayData('380', 0.2, 'EUR');\n    expect(data).to.deep.equal({\n      totalForDisplay: '€456',\n      totalAsNumber: 456,\n      subtotal: '€380.00',\n      tax: '€76.00',\n      includesTax: true\n    });\n  });","file":"frontend/features/subscription/util/recurly-pricing.test.ts","skipped":false,"dir":"services/web/test"},{"name":"should handle total with cents","suites":["formatPriceForDisplayData"],"updatePoint":{"line":31,"column":36,"index":1007},"line":31,"code":"  it('should handle total with cents', function () {\n    const data = formatPriceForDisplayData('8', 0.2, 'EUR');\n    expect(data).to.deep.equal({\n      totalForDisplay: '€9.60',\n      totalAsNumber: 9.6,\n      subtotal: '€8.00',\n      tax: '€1.60',\n      includesTax: true\n    });\n  });","file":"frontend/features/subscription/util/recurly-pricing.test.ts","skipped":false,"dir":"services/web/test"},{"name":"returns false when no trial end date","suites":["showDowngradeOption"],"updatePoint":{"line":8,"column":42,"index":457},"line":8,"code":"  it('returns false when no trial end date', function () {\n    expect(showDowngradeOption('collab')).to.be.false;\n  });","file":"frontend/features/subscription/util/show-downgrade-option.test.ts","skipped":false,"dir":"services/web/test"},{"name":"returns false when a plan code without \"collaborator\" ","suites":["showDowngradeOption"],"updatePoint":{"line":11,"column":60,"index":595},"line":11,"code":"  it('returns false when a plan code without \"collaborator\" ', function () {\n    expect(showDowngradeOption('test', false, sevenDaysFromTodayFormatted)).to.be.false;\n  });","file":"frontend/features/subscription/util/show-downgrade-option.test.ts","skipped":false,"dir":"services/web/test"},{"name":"returns false when on a plan with trial date in future but has \"collaborator\" and \"ann\" in plan code","suites":["showDowngradeOption"],"updatePoint":{"line":14,"column":106,"index":813},"line":14,"code":"  it('returns false when on a plan with trial date in future but has \"collaborator\" and \"ann\" in plan code', function () {\n    expect(showDowngradeOption('collaborator-annual', false, sevenDaysFromTodayFormatted)).to.be.false;\n  });","file":"frontend/features/subscription/util/show-downgrade-option.test.ts","skipped":false,"dir":"services/web/test"},{"name":"returns false when on a plan with trial date in future and plan code has \"collaborator\" and no \"ann\" but is a group plan","suites":["showDowngradeOption"],"updatePoint":{"line":17,"column":126,"index":1066},"line":17,"code":"  it('returns false when on a plan with trial date in future and plan code has \"collaborator\" and no \"ann\" but is a group plan', function () {\n    expect(showDowngradeOption('collaborator', true, sevenDaysFromTodayFormatted)).to.be.false;\n  });","file":"frontend/features/subscription/util/show-downgrade-option.test.ts","skipped":false,"dir":"services/web/test"},{"name":"returns false when on a plan with \"collaborator\" and without \"ann\" and trial date in future","suites":["showDowngradeOption"],"updatePoint":{"line":20,"column":97,"index":1282},"line":20,"code":"  it('returns false when on a plan with \"collaborator\" and without \"ann\" and trial date in future', function () {\n    expect(showDowngradeOption('collaborator', false, sevenDaysFromTodayFormatted)).to.be.false;\n  });","file":"frontend/features/subscription/util/show-downgrade-option.test.ts","skipped":false,"dir":"services/web/test"},{"name":"returns true when on a plan with \"collaborator\" and without \"ann\" and no trial date","suites":["showDowngradeOption"],"updatePoint":{"line":23,"column":89,"index":1491},"line":23,"code":"  it('returns true when on a plan with \"collaborator\" and without \"ann\" and no trial date', function () {\n    expect(showDowngradeOption('collaborator', false)).to.be.true;\n  });","file":"frontend/features/subscription/util/show-downgrade-option.test.ts","skipped":false,"dir":"services/web/test"},{"name":"returns true when on a plan with \"collaborator\" and without \"ann\" and trial date is in the past","suites":["showDowngradeOption"],"updatePoint":{"line":26,"column":101,"index":1682},"line":26,"code":"  it('returns true when on a plan with \"collaborator\" and without \"ann\" and trial date is in the past', function () {\n    expect(showDowngradeOption('collaborator', false, '2000-02-16T17:59:07.000Z')).to.be.true;\n  });","file":"frontend/features/subscription/util/show-downgrade-option.test.ts","skipped":false,"dir":"services/web/test"},{"name":"renders the translated modal title","suites":["<WordCountModal />"],"updatePoint":{"line":15,"column":40,"index":567},"line":15,"code":"  it('renders the translated modal title', async function () {\n    fetchMock.get('express:/project/:projectId/wordcount', () => {\n      return {\n        status: 200,\n        body: {\n          texcount: {\n            messages: 'This is a test'\n          }\n        }\n      };\n    });\n    const handleHide = sinon.stub();\n    renderWithEditorContext( /*#__PURE__*/React.createElement(WordCountModal, {\n      show: true,\n      handleHide: handleHide\n    }), contextProps);\n    await screen.findByText('Word Count');\n  });","file":"frontend/features/word-count-modal/components/word-count-modal.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders a loading message when loading","suites":["<WordCountModal />"],"updatePoint":{"line":33,"column":44,"index":1089},"line":33,"code":"  it('renders a loading message when loading', async function () {\n    fetchMock.get('express:/project/:projectId/wordcount', () => {\n      return {\n        status: 200,\n        body: {\n          texcount: {\n            messages: 'This is a test'\n          }\n        }\n      };\n    });\n    const handleHide = sinon.stub();\n    renderWithEditorContext( /*#__PURE__*/React.createElement(WordCountModal, {\n      show: true,\n      handleHide: handleHide\n    }), contextProps);\n    await screen.findByText('Loading…');\n    await screen.findByText('This is a test');\n  });","file":"frontend/features/word-count-modal/components/word-count-modal.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders an error message and hides loading message on error","suites":["<WordCountModal />"],"updatePoint":{"line":52,"column":65,"index":1677},"line":52,"code":"  it('renders an error message and hides loading message on error', async function () {\n    fetchMock.get('express:/project/:projectId/wordcount', 500);\n    const handleHide = sinon.stub();\n    renderWithEditorContext( /*#__PURE__*/React.createElement(WordCountModal, {\n      show: true,\n      handleHide: handleHide\n    }), contextProps);\n    await screen.findByText('Sorry, something went wrong');\n    expect(screen.queryByText(/Loading/)).to.not.exist;\n  });","file":"frontend/features/word-count-modal/components/word-count-modal.test.js","skipped":false,"dir":"services/web/test"},{"name":"displays messages","suites":["<WordCountModal />"],"updatePoint":{"line":62,"column":23,"index":2097},"line":62,"code":"  it('displays messages', async function () {\n    fetchMock.get('express:/project/:projectId/wordcount', () => {\n      return {\n        status: 200,\n        body: {\n          texcount: {\n            messages: 'This is a test'\n          }\n        }\n      };\n    });\n    const handleHide = sinon.stub();\n    renderWithEditorContext( /*#__PURE__*/React.createElement(WordCountModal, {\n      show: true,\n      handleHide: handleHide\n    }), contextProps);\n    await screen.findByText('This is a test');\n  });","file":"frontend/features/word-count-modal/components/word-count-modal.test.js","skipped":false,"dir":"services/web/test"},{"name":"displays counts data","suites":["<WordCountModal />"],"updatePoint":{"line":80,"column":26,"index":2605},"line":80,"code":"  it('displays counts data', async function () {\n    fetchMock.get('express:/project/:projectId/wordcount', () => {\n      return {\n        status: 200,\n        body: {\n          texcount: {\n            textWords: 100,\n            mathDisplay: 200,\n            mathInline: 300,\n            headers: 400\n          }\n        }\n      };\n    });\n    const handleHide = sinon.stub();\n    renderWithEditorContext( /*#__PURE__*/React.createElement(WordCountModal, {\n      show: true,\n      handleHide: handleHide\n    }), contextProps);\n    await screen.findByText((content, element) => element.textContent.trim().match(/^Total Words\\s*:\\s*100$/));\n    await screen.findByText((content, element) => element.textContent.trim().match(/^Math Display\\s*:\\s*200$/));\n    await screen.findByText((content, element) => element.textContent.trim().match(/^Math Inline\\s*:\\s*300$/));\n    await screen.findByText((content, element) => element.textContent.trim().match(/^Headers\\s*:\\s*400$/));\n  });","file":"frontend/features/word-count-modal/components/word-count-modal.test.js","skipped":false,"dir":"services/web/test"},{"name":"handles GET requests","suites":["fetchJSON"],"updatePoint":{"line":16,"column":26,"index":515},"line":16,"code":"  it('handles GET requests', function () {\n    fetchMock.once({\n      method: 'GET',\n      url: '/test',\n      headers\n    }, {\n      status: 200,\n      body: {\n        result: 'success'\n      }\n    });\n    return expect(getJSON('/test')).to.eventually.deep.equal({\n      result: 'success'\n    });\n  });","file":"frontend/infrastructure/fetch-json.test.js","skipped":false,"dir":"services/web/test"},{"name":"handles 4xx responses","suites":["fetchJSON"],"updatePoint":{"line":31,"column":27,"index":820},"line":31,"code":"  it('handles 4xx responses', function () {\n    fetchMock.get('/test', {\n      status: 400,\n      body: {\n        message: 'The request was invalid'\n      }\n    });\n    return expect(getJSON('/test')).to.eventually.be.rejectedWith('Bad Request').and.be.an.instanceOf(FetchError).to.nested.include({\n      message: 'Bad Request',\n      'data.message': 'The request was invalid',\n      'response.status': 400,\n      'info.statusCode': 400\n    });\n  });","file":"frontend/infrastructure/fetch-json.test.js","skipped":false,"dir":"services/web/test"},{"name":"handles 5xx responses","suites":["fetchJSON"],"updatePoint":{"line":45,"column":27,"index":1271},"line":45,"code":"  it('handles 5xx responses', async function () {\n    fetchMock.get('/test', {\n      status: 500\n    });\n    return expect(getJSON('/test')).to.eventually.be.rejectedWith('Internal Server Error').and.be.an.instanceOf(FetchError).to.nested.include({\n      'response.status': 500,\n      'info.statusCode': 500\n    });\n  });","file":"frontend/infrastructure/fetch-json.test.js","skipped":false,"dir":"services/web/test"},{"name":"handles JSON error responses","suites":["fetchJSON"],"updatePoint":{"line":54,"column":34,"index":1600},"line":54,"code":"  it('handles JSON error responses', async function () {\n    fetchMock.get('/test', {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: {\n        message: 'lorem ipsum'\n      }\n    });\n    return expect(getJSON('/test')).to.eventually.be.rejectedWith('Internal Server Error').and.be.an.instanceOf(FetchError).to.nested.include({\n      'data.message': 'lorem ipsum'\n    });\n  });","file":"frontend/infrastructure/fetch-json.test.js","skipped":false,"dir":"services/web/test"},{"name":"handles text error responses","suites":["fetchJSON"],"updatePoint":{"line":68,"column":34,"index":2029},"line":68,"code":"  it('handles text error responses', async function () {\n    fetchMock.get('/test', {\n      status: 500,\n      headers: {\n        'Content-Type': 'text/plain'\n      },\n      body: 'lorem ipsum'\n    });\n    return expect(getJSON('/test')).to.eventually.be.rejectedWith('Internal Server Error').and.be.an.instanceOf(FetchError).to.nested.include({\n      'data.message': 'lorem ipsum'\n    });\n  });","file":"frontend/infrastructure/fetch-json.test.js","skipped":false,"dir":"services/web/test"},{"name":"handles text error responses sent as HTML","suites":["fetchJSON"],"updatePoint":{"line":80,"column":47,"index":2438},"line":80,"code":"  it('handles text error responses sent as HTML', async function () {\n    fetchMock.get('/test', {\n      status: 500,\n      headers: {\n        'Content-Type': 'text/html'\n      },\n      body: 'lorem ipsum'\n    });\n    return expect(getJSON('/test')).to.eventually.be.rejectedWith('Internal Server Error').and.be.an.instanceOf(FetchError).to.nested.include({\n      'data.message': 'lorem ipsum'\n    });\n  });","file":"frontend/infrastructure/fetch-json.test.js","skipped":false,"dir":"services/web/test"},{"name":"handles (ignores) HTML error responses sent as HTML","suites":["fetchJSON"],"updatePoint":{"line":92,"column":57,"index":2856},"line":92,"code":"  it('handles (ignores) HTML error responses sent as HTML', async function () {\n    fetchMock.get('/test', {\n      status: 500,\n      headers: {\n        'Content-Type': 'text/html'\n      },\n      body: '<!doctype html><html lang=\"en\"><body><p>lorem ipsum</p></body></html>'\n    });\n    const promise = getJSON('/test');\n    expect(promise).to.eventually.be.rejectedWith('Internal Server Error').and.be.an.instanceOf(FetchError);\n    try {\n      await promise;\n    } catch (error) {\n      expect(error.data).to.eql({});\n    }\n  });","file":"frontend/infrastructure/fetch-json.test.js","skipped":false,"dir":"services/web/test"},{"name":"handles 5xx responses without a status message","suites":["fetchJSON"],"updatePoint":{"line":108,"column":52,"index":3382},"line":108,"code":"  it('handles 5xx responses without a status message', async function () {\n    // It's hard to make a Response object with statusText=null,\n    // so we need to do some monkey-work to make it happen\n    const response = new Response('weird scary error', {\n      ok: false,\n      status: 599\n    });\n    Object.defineProperty(response, 'statusText', {\n      get: () => null,\n      set: () => {}\n    });\n    fetchMock.get('/test', response);\n    return expect(getJSON('/test')).to.eventually.be.rejectedWith('Unexpected Error: 599').and.be.an.instanceOf(FetchError).to.nested.include({\n      'response.status': 599,\n      'info.statusCode': 599,\n      message: 'Unexpected Error: 599'\n    });\n  });","file":"frontend/infrastructure/fetch-json.test.js","skipped":false,"dir":"services/web/test"},{"name":"handles POST requests","suites":["fetchJSON"],"updatePoint":{"line":126,"column":27,"index":4054},"line":126,"code":"  it('handles POST requests', function () {\n    const body = {\n      example: true\n    };\n    fetchMock.once({\n      method: 'POST',\n      url: '/test',\n      headers,\n      body\n    }, {\n      status: 200,\n      body: {\n        result: 'success'\n      }\n    });\n    return expect(postJSON('/test', {\n      body\n    })).to.eventually.deep.equal({\n      result: 'success'\n    });\n  });","file":"frontend/infrastructure/fetch-json.test.js","skipped":false,"dir":"services/web/test"},{"name":"handles PUT requests","suites":["fetchJSON"],"updatePoint":{"line":147,"column":26,"index":4438},"line":147,"code":"  it('handles PUT requests', function () {\n    const body = {\n      example: true\n    };\n    fetchMock.once({\n      method: 'PUT',\n      url: '/test',\n      headers,\n      body\n    }, {\n      status: 200,\n      body: {\n        result: 'success'\n      }\n    });\n    return expect(putJSON('/test', {\n      body\n    })).to.eventually.deep.equal({\n      result: 'success'\n    });\n  });","file":"frontend/infrastructure/fetch-json.test.js","skipped":false,"dir":"services/web/test"},{"name":"handles DELETE requests","suites":["fetchJSON"],"updatePoint":{"line":168,"column":29,"index":4823},"line":168,"code":"  it('handles DELETE requests', function () {\n    fetchMock.once({\n      method: 'DELETE',\n      url: '/test',\n      headers\n    }, {\n      status: 204\n    });\n    return expect(deleteJSON('/test')).to.eventually.deep.equal({});\n  });","file":"frontend/infrastructure/fetch-json.test.js","skipped":false,"dir":"services/web/test"},{"name":"returns the error facing message for FetchError instances","suites":["fetchJSON","getUserFacingMessage()"],"updatePoint":{"line":179,"column":65,"index":5145},"line":179,"code":"    it('returns the error facing message for FetchError instances', function () {\n      const error = new FetchError('403 error', 'http:/example.com', {}, {\n        status: 403\n      });\n      expect(getUserFacingMessage(error)).to.equal('Session error. Please check you have cookies enabled. If the problem persists, try clearing your cache and cookies.');\n    });","file":"frontend/infrastructure/fetch-json.test.js","skipped":false,"dir":"services/web/test"},{"name":"returns `message` for Error instances different than FetchError","suites":["fetchJSON","getUserFacingMessage()"],"updatePoint":{"line":185,"column":71,"index":5517},"line":185,"code":"    it('returns `message` for Error instances different than FetchError', function () {\n      const error = new Error('403 error');\n      expect(getUserFacingMessage(error)).to.equal('403 error');\n    });","file":"frontend/infrastructure/fetch-json.test.js","skipped":false,"dir":"services/web/test"},{"name":"returns `undefined` for non-Error instances","suites":["fetchJSON","getUserFacingMessage()"],"updatePoint":{"line":189,"column":51,"index":5702},"line":189,"code":"    it('returns `undefined` for non-Error instances', function () {\n      expect(getUserFacingMessage(undefined)).to.be.undefined;\n      expect(getUserFacingMessage(null)).to.be.undefined;\n      expect(getUserFacingMessage('error')).to.be.undefined;\n    });","file":"frontend/infrastructure/fetch-json.test.js","skipped":false,"dir":"services/web/test"},{"name":"getItem","suites":["localStorage"],"updatePoint":{"line":31,"column":13,"index":866},"line":31,"code":"  it('getItem', function () {\n    expect(customLocalStorage.getItem('foo')).to.be.null;\n    global.localStorage.getItem.returns('false');\n    expect(customLocalStorage.getItem('foo')).to.equal(false);\n    global.localStorage.getItem.returns('{\"foo\":\"bar\"}');\n    expect(customLocalStorage.getItem('foo')).to.deep.equal({\n      foo: 'bar'\n    });\n    global.localStorage.getItem.throws(new Error('Nope'));\n    expect(customLocalStorage.getItem('foo')).to.be.null;\n    expect(global.console.error).to.be.calledOnce;\n  });","file":"frontend/infrastructure/local-storage.test.js","skipped":false,"dir":"services/web/test"},{"name":"setItem","suites":["localStorage"],"updatePoint":{"line":43,"column":13,"index":1386},"line":43,"code":"  it('setItem', function () {\n    customLocalStorage.setItem('foo', 'bar');\n    expect(global.localStorage.setItem).to.be.calledOnceWith('foo', '\"bar\"');\n    global.localStorage.setItem.reset();\n    customLocalStorage.setItem('foo', true);\n    expect(global.localStorage.setItem).to.be.calledOnceWith('foo', 'true');\n    global.localStorage.setItem.reset();\n    customLocalStorage.setItem('foo', {\n      bar: 1\n    });\n    expect(global.localStorage.setItem).to.be.calledOnceWith('foo', '{\"bar\":1}');\n    global.localStorage.setItem.reset();\n    global.localStorage.setItem.throws(new Error('Nope'));\n    expect(customLocalStorage.setItem('foo', 'bar')).to.be.null;\n    expect(global.console.error).to.be.calledOnce;\n  });","file":"frontend/infrastructure/local-storage.test.js","skipped":false,"dir":"services/web/test"},{"name":"clear","suites":["localStorage"],"updatePoint":{"line":59,"column":11,"index":2107},"line":59,"code":"  it('clear', function () {\n    customLocalStorage.clear();\n    expect(global.localStorage.clear).to.be.calledOnce;\n    global.localStorage.clear.throws(new Error('Nope'));\n    expect(customLocalStorage.clear()).to.be.null;\n    expect(global.console.error).to.be.calledOnce;\n  });","file":"frontend/infrastructure/local-storage.test.js","skipped":false,"dir":"services/web/test"},{"name":"removeItem","suites":["localStorage"],"updatePoint":{"line":66,"column":16,"index":2393},"line":66,"code":"  it('removeItem', function () {\n    customLocalStorage.removeItem('foo');\n    expect(global.localStorage.removeItem).to.be.calledOnceWith('foo');\n    global.localStorage.removeItem.reset();\n    global.localStorage.removeItem.throws(new Error('Nope'));\n    expect(customLocalStorage.removeItem('foo')).to.be.null;\n    expect(global.console.error).to.be.calledOnce;\n  });","file":"frontend/infrastructure/local-storage.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders basic fa classes","suites":["<Icon />"],"updatePoint":{"line":5,"column":30,"index":221},"line":5,"code":"  it('renders basic fa classes', function () {\n    const {\n      container\n    } = render( /*#__PURE__*/React.createElement(Icon, {\n      type: \"angle-down\"\n    }));\n    const element = container.querySelector('i.fa.fa-angle-down');\n    expect(element).to.exist;\n  });","file":"frontend/shared/components/icon.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders with aria-hidden","suites":["<Icon />"],"updatePoint":{"line":14,"column":30,"index":490},"line":14,"code":"  it('renders with aria-hidden', function () {\n    const {\n      container\n    } = render( /*#__PURE__*/React.createElement(Icon, {\n      type: \"angle-down\"\n    }));\n    const element = container.querySelector('i[aria-hidden=\"true\"]');\n    expect(element).to.exist;\n  });","file":"frontend/shared/components/icon.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders accessible label","suites":["<Icon />"],"updatePoint":{"line":23,"column":30,"index":762},"line":23,"code":"  it('renders accessible label', function () {\n    render( /*#__PURE__*/React.createElement(Icon, {\n      type: \"angle-down\",\n      accessibilityLabel: \"Accessible Foo\"\n    }));\n    screen.getByText('Accessible Foo');\n  });","file":"frontend/shared/components/icon.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders with spin","suites":["<Icon />"],"updatePoint":{"line":30,"column":23,"index":979},"line":30,"code":"  it('renders with spin', function () {\n    const {\n      container\n    } = render( /*#__PURE__*/React.createElement(Icon, {\n      type: \"angle-down\",\n      spin: true\n    }));\n    const element = container.querySelector('i.fa.fa-angle-down.fa-spin');\n    expect(element).to.exist;\n  });","file":"frontend/shared/components/icon.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders with fw","suites":["<Icon />"],"updatePoint":{"line":40,"column":21,"index":1265},"line":40,"code":"  it('renders with fw', function () {\n    const {\n      container\n    } = render( /*#__PURE__*/React.createElement(Icon, {\n      type: \"angle-down\",\n      fw: true\n    }));\n    const element = container.querySelector('i.fa.fa-angle-down.fa-fw');\n    expect(element).to.exist;\n  });","file":"frontend/shared/components/icon.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders with modifier","suites":["<Icon />"],"updatePoint":{"line":50,"column":27,"index":1553},"line":50,"code":"  it('renders with modifier', function () {\n    const {\n      container\n    } = render( /*#__PURE__*/React.createElement(Icon, {\n      type: \"angle-down\",\n      modifier: \"2x\"\n    }));\n    const element = container.querySelector('i.fa.fa-angle-down.fa-2x');\n    expect(element).to.exist;\n  });","file":"frontend/shared/components/icon.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders with custom clases","suites":["<Icon />"],"updatePoint":{"line":60,"column":32,"index":1852},"line":60,"code":"  it('renders with custom clases', function () {\n    const {\n      container\n    } = render( /*#__PURE__*/React.createElement(Icon, {\n      type: \"angle-down\",\n      className: \"custom-icon-class\"\n    }));\n    const element = container.querySelector('i.fa.fa-angle-down.custom-icon-class');\n    expect(element).to.exist;\n  });","file":"frontend/shared/components/icon.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders with current page handled","suites":["<Pagination />"],"updatePoint":{"line":5,"column":39,"index":248},"line":5,"code":"  it('renders with current page handled', async function () {\n    render( /*#__PURE__*/React.createElement(Pagination, {\n      currentPage: 6,\n      totalPages: 10,\n      handlePageClick: () => {}\n    }));\n    await screen.findByLabelText('Page 6, Current Page');\n  });","file":"frontend/shared/components/pagination.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders with nearby page buttons and prev/next button","suites":["<Pagination />"],"updatePoint":{"line":13,"column":59,"index":538},"line":13,"code":"  it('renders with nearby page buttons and prev/next button', async function () {\n    render( /*#__PURE__*/React.createElement(Pagination, {\n      currentPage: 2,\n      totalPages: 4,\n      handlePageClick: () => {}\n    }));\n    await screen.findByLabelText('Page 2, Current Page');\n    await screen.findByLabelText('Go to page 1');\n    await screen.findByLabelText('Go to page 3');\n    await screen.findByLabelText('Go to page 4');\n    await screen.findByLabelText('Go to Previous Page');\n    await screen.findByLabelText('Go to Next Page');\n  });","file":"frontend/shared/components/pagination.test.js","skipped":false,"dir":"services/web/test"},{"name":"does not render the prev button when expected","suites":["<Pagination />"],"updatePoint":{"line":26,"column":51,"index":1079},"line":26,"code":"  it('does not render the prev button when expected', async function () {\n    render( /*#__PURE__*/React.createElement(Pagination, {\n      currentPage: 1,\n      totalPages: 2,\n      handlePageClick: () => {}\n    }));\n    await screen.findByLabelText('Page 1, Current Page');\n    await screen.findByLabelText('Go to Next Page');\n    expect(screen.queryByLabelText('Go to Prev Page')).to.be.null;\n  });","file":"frontend/shared/components/pagination.test.js","skipped":false,"dir":"services/web/test"},{"name":"does not render the next button when expected","suites":["<Pagination />"],"updatePoint":{"line":36,"column":51,"index":1480},"line":36,"code":"  it('does not render the next button when expected', async function () {\n    render( /*#__PURE__*/React.createElement(Pagination, {\n      currentPage: 2,\n      totalPages: 2,\n      handlePageClick: () => {}\n    }));\n    await screen.findByLabelText('Page 2, Current Page');\n    await screen.findByLabelText('Go to Previous Page');\n    expect(screen.queryByLabelText('Go to Next Page')).to.be.null;\n  });","file":"frontend/shared/components/pagination.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders 1 ellipses when there are more pages than buttons and on first page","suites":["<Pagination />"],"updatePoint":{"line":46,"column":81,"index":1915},"line":46,"code":"  it('renders 1 ellipses when there are more pages than buttons and on first page', async function () {\n    render( /*#__PURE__*/React.createElement(Pagination, {\n      currentPage: 1,\n      totalPages: 10,\n      handlePageClick: () => {}\n    }));\n    const ellipses = await screen.findAllByText('…');\n    expect(ellipses.length).to.equal(1);\n  });","file":"frontend/shared/components/pagination.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders 1 ellipses when on last page and there are more previous pages than buttons","suites":["<Pagination />"],"updatePoint":{"line":55,"column":89,"index":2272},"line":55,"code":"  it('renders 1 ellipses when on last page and there are more previous pages than buttons', async function () {\n    render( /*#__PURE__*/React.createElement(Pagination, {\n      currentPage: 10,\n      totalPages: 10,\n      handlePageClick: () => {}\n    }));\n    const ellipses = await screen.findAllByText('…');\n    expect(ellipses.length).to.equal(1);\n  });","file":"frontend/shared/components/pagination.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders 2 ellipses when there are more pages than buttons","suites":["<Pagination />"],"updatePoint":{"line":64,"column":63,"index":2604},"line":64,"code":"  it('renders 2 ellipses when there are more pages than buttons', async function () {\n    render( /*#__PURE__*/React.createElement(Pagination, {\n      currentPage: 5,\n      totalPages: 10,\n      handlePageClick: () => {}\n    }));\n    const ellipses = await screen.findAllByText('…');\n    expect(ellipses.length).to.equal(2);\n  });","file":"frontend/shared/components/pagination.test.js","skipped":false,"dir":"services/web/test"},{"name":"only renders the number of page buttons set by maxOtherPageButtons","suites":["<Pagination />"],"updatePoint":{"line":73,"column":72,"index":2944},"line":73,"code":"  it('only renders the number of page buttons set by maxOtherPageButtons', async function () {\n    render( /*#__PURE__*/React.createElement(Pagination, {\n      currentPage: 1,\n      totalPages: 100,\n      handlePageClick: () => {}\n    }));\n    const items = document.querySelectorAll('button');\n    expect(items.length).to.equal(6); // 5 page buttons + next button\n  });","file":"frontend/shared/components/pagination.test.js","skipped":false,"dir":"services/web/test"},{"name":"renders processing UI when isProcessing is true","suites":["<Processing />"],"updatePoint":{"line":5,"column":53,"index":254},"line":5,"code":"  it('renders processing UI when isProcessing is true', function () {\n    const {\n      container\n    } = render( /*#__PURE__*/React.createElement(Processing, {\n      isProcessing: true\n    }));\n    const element = container.querySelector('i.fa.fa-refresh');\n    expect(element).to.exist;\n  });","file":"frontend/shared/components/processing.test.js","skipped":false,"dir":"services/web/test"},{"name":"does not render processing UI when isProcessing is false","suites":["<Processing />"],"updatePoint":{"line":14,"column":62,"index":558},"line":14,"code":"  it('does not render processing UI when isProcessing is false', function () {\n    const {\n      container\n    } = render( /*#__PURE__*/React.createElement(Processing, {\n      isProcessing: false\n    }));\n    const element = container.querySelector('i.fa.fa-refresh');\n    expect(element).to.not.exist;\n  });","file":"frontend/shared/components/processing.test.js","skipped":false,"dir":"services/web/test"},{"name":"calls then when the request succeeds","suites":["useAbortController"],"updatePoint":{"line":40,"column":42,"index":1030},"line":40,"code":"  it('calls then when the request succeeds', async function () {\n    fetchMock.get('/test', {\n      status: 204\n    }, {\n      delay: 100\n    });\n    render( /*#__PURE__*/React.createElement(AbortableRequest, {\n      url: \"/test\"\n    }));\n    expect(status.loading).to.be.true;\n    await waitFor(() => expect(status.loading).to.be.false);\n    expect(status.success).to.be.true;\n    expect(status.error).to.be.null;\n  });","file":"frontend/shared/hooks/use-abort-controller.test.js","skipped":false,"dir":"services/web/test"},{"name":"calls catch when the request fails","suites":["useAbortController"],"updatePoint":{"line":54,"column":40,"index":1449},"line":54,"code":"  it('calls catch when the request fails', async function () {\n    fetchMock.get('/test', {\n      status: 500\n    }, {\n      delay: 100\n    });\n    render( /*#__PURE__*/React.createElement(AbortableRequest, {\n      url: \"/test\"\n    }));\n    expect(status.loading).to.be.true;\n    await waitFor(() => expect(status.loading).to.be.false);\n    expect(status.success).to.be.null;\n    expect(status.error).not.to.be.null;\n  });","file":"frontend/shared/hooks/use-abort-controller.test.js","skipped":false,"dir":"services/web/test"},{"name":"cancels a request when unmounted","suites":["useAbortController"],"updatePoint":{"line":68,"column":38,"index":1870},"line":68,"code":"  it('cancels a request when unmounted', async function () {\n    fetchMock.get('/test', {\n      status: 204\n    }, {\n      delay: 100\n    });\n    const {\n      unmount\n    } = render( /*#__PURE__*/React.createElement(AbortableRequest, {\n      url: \"/test\"\n    }));\n    expect(status.loading).to.be.true;\n    unmount();\n    await fetchMock.flush(true);\n    expect(fetchMock.done()).to.be.true;\n\n    // wait for Promises to be resolved\n    await new Promise(resolve => setTimeout(resolve, 0));\n    expect(status.success).to.be.null;\n    expect(status.error).to.be.null;\n    expect(status.loading).to.be.true;\n  });","file":"frontend/shared/hooks/use-abort-controller.test.js","skipped":false,"dir":"services/web/test"},{"name":"adds, removes and calls all handlers without duplicate","suites":["useCallbackHandlers"],"updatePoint":{"line":5,"column":60,"index":287},"line":5,"code":"  it('adds, removes and calls all handlers without duplicate', async function () {\n    const handler1 = sinon.stub();\n    const handler2 = sinon.stub();\n    const handler3 = sinon.stub();\n    const {\n      result\n    } = renderHook(() => useCallbackHandlers());\n    result.current.addHandler(handler1);\n    result.current.deleteHandler(handler1);\n    result.current.addHandler(handler1);\n    result.current.addHandler(handler2);\n    result.current.deleteHandler(handler2);\n    result.current.addHandler(handler3);\n    result.current.addHandler(handler3);\n    result.current.callHandlers('foo');\n    result.current.callHandlers(1337);\n    sinon.assert.calledTwice(handler1);\n    sinon.assert.calledWith(handler1, 'foo');\n    sinon.assert.calledWith(handler1, 1337);\n    sinon.assert.notCalled(handler2);\n    sinon.assert.calledTwice(handler3);\n  });","file":"frontend/shared/hooks/use-callback-handlers.test.js","skipped":false,"dir":"services/web/test"},{"name":"supports a custom CSS class","suites":["useExpandCollapse","custom CSS classes"],"updatePoint":{"line":38,"column":35,"index":2027},"line":38,"code":"    it('supports a custom CSS class', function () {\n      const testArgs = {\n        classes: {\n          container: 'my-custom-class'\n        }\n      };\n      const {\n        container\n      } = render( /*#__PURE__*/React.createElement(ExpandCollapseTestUI, {\n        expandCollapseArgs: testArgs\n      }));\n      const elWithCustomCSSClass = container.querySelector('div');\n      expect(elWithCustomCSSClass).to.exist;\n    });","file":"frontend/shared/hooks/use-expand-collapse.test.js","skipped":false,"dir":"services/web/test"},{"name":"supports an extra custom CSS class for the collapsed state","suites":["useExpandCollapse","custom CSS classes"],"updatePoint":{"line":52,"column":66,"index":2487},"line":52,"code":"    it('supports an extra custom CSS class for the collapsed state', function () {\n      const testArgs = {\n        classes: {\n          containerCollapsed: 'my-custom-collapsed-class'\n        }\n      };\n      const {\n        container\n      } = render( /*#__PURE__*/React.createElement(ExpandCollapseTestUI, {\n        expandCollapseArgs: testArgs\n      }));\n      const elWithCustomCollapsedCSSClass = container.querySelector('.my-custom-collapsed-class');\n      expect(elWithCustomCollapsedCSSClass).to.exist;\n    });","file":"frontend/shared/hooks/use-expand-collapse.test.js","skipped":false,"dir":"services/web/test"},{"name":"ignores the collapsed CSS class when expanded","suites":["useExpandCollapse","custom CSS classes"],"updatePoint":{"line":66,"column":53,"index":2994},"line":66,"code":"    it('ignores the collapsed CSS class when expanded', function () {\n      const testArgs = {\n        initiallyExpanded: true,\n        classes: {\n          containerCollapsed: 'my-custom-collapsed-class'\n        }\n      };\n      const {\n        container\n      } = render( /*#__PURE__*/React.createElement(ExpandCollapseTestUI, {\n        expandCollapseArgs: testArgs\n      }));\n      const elWithCustomCollapsedCSSClass = container.querySelector('.my-custom-collapsed-class');\n      expect(elWithCustomCollapsedCSSClass).to.not.exist;\n    });","file":"frontend/shared/hooks/use-expand-collapse.test.js","skipped":false,"dir":"services/web/test"},{"name":"defaults to height","suites":["useExpandCollapse","height and width support via dimension argument"],"updatePoint":{"line":83,"column":26,"index":3593},"line":83,"code":"    it('defaults to height', function () {\n      const {\n        container\n      } = render( /*#__PURE__*/React.createElement(ExpandCollapseTestUI, null));\n      const expandCollapseEl = container.firstChild;\n      expect(expandCollapseEl.style.height).to.not.be.empty;\n      expect(expandCollapseEl.style.width).to.be.empty;\n    });","file":"frontend/shared/hooks/use-expand-collapse.test.js","skipped":false,"dir":"services/web/test"},{"name":"supports width","suites":["useExpandCollapse","height and width support via dimension argument"],"updatePoint":{"line":91,"column":22,"index":3923},"line":91,"code":"    it('supports width', function () {\n      const testArgs = {\n        dimension: 'width'\n      };\n      const {\n        container\n      } = render( /*#__PURE__*/React.createElement(ExpandCollapseTestUI, {\n        expandCollapseArgs: testArgs\n      }));\n      const expandCollapseEl = container.firstChild;\n      expect(expandCollapseEl.style.height).to.be.empty;\n      expect(expandCollapseEl.style.width).to.not.be.empty;\n    });","file":"frontend/shared/hooks/use-expand-collapse.test.js","skipped":false,"dir":"services/web/test"},{"name":"defaults to 0px","suites":["useExpandCollapse","collapsed size support via collapsedSize argument"],"updatePoint":{"line":106,"column":23,"index":4441},"line":106,"code":"    it('defaults to 0px', function () {\n      const {\n        container\n      } = render( /*#__PURE__*/React.createElement(ExpandCollapseTestUI, null));\n      const expandCollapseEl = container.firstChild;\n      expect(expandCollapseEl.style.height).to.equal('0px');\n    });","file":"frontend/shared/hooks/use-expand-collapse.test.js","skipped":false,"dir":"services/web/test"},{"name":"supports a custom collapsed size","suites":["useExpandCollapse","collapsed size support via collapsedSize argument"],"updatePoint":{"line":113,"column":40,"index":4733},"line":113,"code":"    it('supports a custom collapsed size', function () {\n      const testArgs = {\n        collapsedSize: 200\n      };\n      const {\n        container\n      } = render( /*#__PURE__*/React.createElement(ExpandCollapseTestUI, {\n        expandCollapseArgs: testArgs\n      }));\n      const expandCollapseEl = container.firstChild;\n      expect(expandCollapseEl.style.height).to.equal('200px');\n    });","file":"frontend/shared/hooks/use-expand-collapse.test.js","skipped":false,"dir":"services/web/test"},{"name":"supports a custom collapsed size for width","suites":["useExpandCollapse","collapsed size support via collapsedSize argument"],"updatePoint":{"line":125,"column":50,"index":5140},"line":125,"code":"    it('supports a custom collapsed size for width', function () {\n      const testArgs = {\n        collapsedSize: 200,\n        dimension: 'width'\n      };\n      const {\n        container\n      } = render( /*#__PURE__*/React.createElement(ExpandCollapseTestUI, {\n        expandCollapseArgs: testArgs\n      }));\n      const expandCollapseEl = container.firstChild;\n      expect(expandCollapseEl.style.height).to.be.empty;\n      expect(expandCollapseEl.style.width).to.equal('200px');\n    });","file":"frontend/shared/hooks/use-expand-collapse.test.js","skipped":false,"dir":"services/web/test"},{"name":"returns the OWN_HUE for the current user","suites":["colors","getHueForUserId"],"updatePoint":{"line":6,"column":48,"index":286},"line":6,"code":"    it('returns the OWN_HUE for the current user', function () {\n      expect(getHueForUserId(currentUser, currentUser)).to.equal(200);\n    });","file":"frontend/shared/utils/colors.test.js","skipped":false,"dir":"services/web/test"},{"name":"returns the ANONYMOUS_HUE for an anonymous user","suites":["colors","getHueForUserId"],"updatePoint":{"line":9,"column":55,"index":437},"line":9,"code":"    it('returns the ANONYMOUS_HUE for an anonymous user', function () {\n      expect(getHueForUserId()).to.equal(100);\n      expect(getHueForUserId('anonymous-user')).to.equal(100);\n    });","file":"frontend/shared/utils/colors.test.js","skipped":false,"dir":"services/web/test"},{"name":"generates a hue based on user id","suites":["colors","getHueForUserId"],"updatePoint":{"line":13,"column":40,"index":612},"line":13,"code":"    it('generates a hue based on user id', function () {\n      expect(getHueForUserId('59ad79f46337430b3d37cb9e', currentUser)).to.equal(146);\n    });","file":"frontend/shared/utils/colors.test.js","skipped":false,"dir":"services/web/test"},{"name":"shifts the hue away from the OWN_HUE if it is within a threshold","suites":["colors","getHueForUserId"],"updatePoint":{"line":16,"column":72,"index":795},"line":16,"code":"    it('shifts the hue away from the OWN_HUE if it is within a threshold', function () {\n      // Ordinarily, this user id would generate a hue of 183. However, this is\n      // visually \"too close\" to the OWN_HUE, meaning that it could be\n      // misinterpreted. Therefore we shift it away\n      expect(getHueForUserId('20ad79f46337430b3d37cb9f', currentUser)).to.equal(323);\n    });","file":"frontend/shared/utils/colors.test.js","skipped":false,"dir":"services/web/test"},{"name":"should return the correct localized price","suites":["group-plan-pricing","createLocalizedGroupPlanPrice","CHF currency"],"updatePoint":{"line":38,"column":51,"index":1055},"line":38,"code":"      it('should return the correct localized price', function () {\n        const localizedGroupPlanPrice = createLocalizedGroupPlanPrice({\n          plan: 'professional',\n          currency: 'CHF',\n          licenseSize: '2',\n          usage: 'enterprise'\n        });\n        expect(localizedGroupPlanPrice).to.deep.equal({\n          localizedPrice: 'Fr 100',\n          localizedPerUserPrice: 'Fr 50'\n        });\n      });","file":"frontend/shared/utils/group-plan-pricing.test.js","skipped":false,"dir":"services/web/test"},{"name":"should return the correct localized price","suites":["group-plan-pricing","createLocalizedGroupPlanPrice","DKK currency"],"updatePoint":{"line":52,"column":51,"index":1530},"line":52,"code":"      it('should return the correct localized price', function () {\n        const localizedGroupPlanPrice = createLocalizedGroupPlanPrice({\n          plan: 'professional',\n          currency: 'DKK',\n          licenseSize: '2',\n          usage: 'enterprise'\n        });\n        expect(localizedGroupPlanPrice).to.deep.equal({\n          localizedPrice: '200 kr',\n          localizedPerUserPrice: '100 kr'\n        });\n      });","file":"frontend/shared/utils/group-plan-pricing.test.js","skipped":false,"dir":"services/web/test"},{"name":"should return the correct localized price","suites":["group-plan-pricing","createLocalizedGroupPlanPrice","other supported currencies"],"updatePoint":{"line":66,"column":51,"index":2020},"line":66,"code":"      it('should return the correct localized price', function () {\n        const localizedGroupPlanPrice = createLocalizedGroupPlanPrice({\n          plan: 'professional',\n          currency: 'USD',\n          licenseSize: '2',\n          usage: 'enterprise'\n        });\n        expect(localizedGroupPlanPrice).to.deep.equal({\n          localizedPrice: '$300',\n          localizedPerUserPrice: '$150'\n        });\n      });","file":"frontend/shared/utils/group-plan-pricing.test.js","skipped":false,"dir":"services/web/test"},{"name":"removes trailing slash","suites":["url-helper","buildUrlWithDetachRole","without mode"],"updatePoint":{"line":14,"column":32,"index":488},"line":14,"code":"      it('removes trailing slash', function () {\n        locationStub.value('https://www.ovelreaf.com/project/1abc/');\n        expect(buildUrlWithDetachRole().href).to.equal('https://www.ovelreaf.com/project/1abc');\n      });","file":"frontend/shared/utils/url-helper.test.js","skipped":false,"dir":"services/web/test"},{"name":"clears the mode from the current URL","suites":["url-helper","buildUrlWithDetachRole","without mode"],"updatePoint":{"line":18,"column":46,"index":728},"line":18,"code":"      it('clears the mode from the current URL', function () {\n        locationStub.value('https://www.ovelreaf.com/project/2abc/detached');\n        expect(buildUrlWithDetachRole().href).to.equal('https://www.ovelreaf.com/project/2abc');\n        locationStub.value('https://www.ovelreaf.com/project/2abc/detacher/');\n        expect(buildUrlWithDetachRole().href).to.equal('https://www.ovelreaf.com/project/2abc');\n      });","file":"frontend/shared/utils/url-helper.test.js","skipped":false,"dir":"services/web/test"},{"name":"handles with trailing slash","suites":["url-helper","buildUrlWithDetachRole","with mode"],"updatePoint":{"line":26,"column":37,"index":1191},"line":26,"code":"      it('handles with trailing slash', function () {\n        locationStub.value('https://www.ovelreaf.com/project/3abc/');\n        expect(buildUrlWithDetachRole('detacher').href).to.equal('https://www.ovelreaf.com/project/3abc/detacher');\n      });","file":"frontend/shared/utils/url-helper.test.js","skipped":false,"dir":"services/web/test"},{"name":"handles without trailing slash","suites":["url-helper","buildUrlWithDetachRole","with mode"],"updatePoint":{"line":30,"column":40,"index":1444},"line":30,"code":"      it('handles without trailing slash', function () {\n        locationStub.value('https://www.ovelreaf.com/project/4abc');\n        expect(buildUrlWithDetachRole('detached').href).to.equal('https://www.ovelreaf.com/project/4abc/detached');\n      });","file":"frontend/shared/utils/url-helper.test.js","skipped":false,"dir":"services/web/test"}]}