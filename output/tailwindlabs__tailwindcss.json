{
    "repo": "tailwindlabs/tailwindcss",
    "url": "https://github.com/tailwindlabs/tailwindcss",
    "branch": "master",
    "configs": [
        {
            "package": "parcel",
            "lang": "js",
            "dir": "integrations/parcel/tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "postcss-cli",
            "lang": "js",
            "dir": "integrations/postcss-cli/tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "rollup.js",
            "lang": "js",
            "dir": "integrations/rollup/tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "tailwindcss-cli",
            "lang": "js",
            "dir": "integrations/tailwindcss-cli/tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "vite",
            "lang": "js",
            "dir": "integrations/vite/tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "webpack-4",
            "lang": "js",
            "dir": "integrations/webpack-4/tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "webpack-5",
            "lang": "js",
            "dir": "integrations/webpack-5/tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "tailwindcss",
            "lang": "js",
            "dir": "tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "tailwindcss-standalone",
            "lang": "js",
            "dir": "standalone-cli/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        }
    ],
    "tests": [
        {
            "name": "should be possible to generate tailwind output",
            "suites": [
                "static build"
            ],
            "updatePoint": {
                "line": 18,
                "column": 52,
                "index": 364
            },
            "line": 18,
            "code": "  it('should be possible to generate tailwind output', async () => {\n    await writeInputFile('index.html', html`\n        <link rel=\"stylesheet\" href=\"./index.css\" />\n        <div class=\"font-bold\"></div>\n      `);\n    await $('parcel build ./src/index.html --no-cache', {\n      env: {\n        NODE_ENV: 'production'\n      }\n    });\n    expect(await readOutputFile(/index\\.\\w+\\.css$/)).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n  });",
            "file": "integration.test.js",
            "skipped": false,
            "dir": "integrations/parcel/tests"
        },
        {
            "name": "classes are generated when the html file changes",
            "suites": [
                "watcher"
            ],
            "updatePoint": {
                "line": 36,
                "column": 56,
                "index": 879
            },
            "line": 36,
            "code": "  test('classes are generated when the html file changes', async () => {\n    await writeInputFile('index.html', html`\n        <link rel=\"stylesheet\" href=\"./index.css\" />\n        <div class=\"font-bold\"></div>\n      `);\n    let runningProcess = $('parcel watch ./src/index.html --no-cache');\n    await waitForOutputFileCreation(/index\\.\\w+\\.css$/);\n    expect(await readOutputFile(/index\\.\\w+\\.css$/)).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await waitForOutputFileChange(/index\\.\\w+\\.css$/, async () => {\n      await appendToInputFile('index.html', html`<div class=\"font-normal\"></div>`);\n    });\n    expect(await readOutputFile(/index\\.\\w+\\.css$/)).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    await waitForOutputFileChange(/index\\.\\w+\\.css$/, async () => {\n      await appendToInputFile('index.html', html`<div class=\"bg-red-500\"></div>`);\n    });\n    expect(await readOutputFile(/index\\.\\w+\\.css$/)).toIncludeCss(css`\n        .bg-red-500 {\n          --tw-bg-opacity: 1;\n          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n        }\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    return runningProcess.stop();\n  });",
            "file": "integration.test.js",
            "skipped": false,
            "dir": "integrations/parcel/tests"
        },
        {
            "name": "classes are generated when globbed files change",
            "suites": [
                "watcher"
            ],
            "line": 76,
            "code": "  test.skip('classes are generated when globbed files change', async () => {",
            "file": "integration.test.js",
            "skipped": true,
            "dir": "integrations/parcel/tests"
        },
        {
            "name": "classes are generated when the tailwind.config.js file changes",
            "suites": [
                "watcher"
            ],
            "updatePoint": {
                "line": 114,
                "column": 70,
                "index": 3695
            },
            "line": 114,
            "code": "  test('classes are generated when the tailwind.config.js file changes', async () => {\n    await writeInputFile('index.html', html`\n        <link rel=\"stylesheet\" href=\"./index.css\" />\n        <div class=\"font-bold md:font-medium\"></div>\n      `);\n    let runningProcess = $('parcel watch ./src/index.html --no-cache');\n    await waitForOutputFileCreation(/index\\.\\w+\\.css$/);\n    expect(await readOutputFile(/index\\.\\w+\\.css$/)).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n        @media (min-width: 768px) {\n          .md\\:font-medium {\n            font-weight: 500;\n          }\n        }\n      `);\n    await waitForOutputFileChange(/index\\.\\w+\\.css$/, async () => {\n      await writeInputFile('../tailwind.config.js', javascript`\n          module.exports = {\n            content: ['./src/index.html'],\n            theme: {\n              extend: {\n                screens: {\n                  md: '800px'\n                },\n                fontWeight: {\n                  bold: 'bold'\n                }\n              },\n            },\n            corePlugins: {\n              preflight: false,\n            },\n            plugins: [],\n          }\n      `);\n    });\n    expect(await readOutputFile(/index\\.\\w+\\.css$/)).toIncludeCss(css`\n        .font-bold {\n          font-weight: bold;\n        }\n        @media (min-width: 800px) {\n          .md\\:font-medium {\n            font-weight: 500;\n          }\n        }\n      `);\n    return runningProcess.stop();\n  });",
            "file": "integration.test.js",
            "skipped": false,
            "dir": "integrations/parcel/tests"
        },
        {
            "name": "classes are generated when the index.css file changes",
            "suites": [
                "watcher"
            ],
            "updatePoint": {
                "line": 164,
                "column": 61,
                "index": 5183
            },
            "line": 164,
            "code": "  test('classes are generated when the index.css file changes', async () => {\n    await writeInputFile('index.html', html`\n        <link rel=\"stylesheet\" href=\"./index.css\" />\n        <div class=\"btn font-bold\"></div>\n      `);\n    let runningProcess = $('parcel watch ./src/index.html --no-cache');\n    await waitForOutputFileCreation(/index\\.\\w+\\.css$/);\n    expect(await readOutputFile(/index\\.\\w+\\.css$/)).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await waitForOutputFileChange(/index\\.\\w+\\.css$/, async () => {\n      await writeInputFile('index.css', css`\n          @tailwind base;\n          @tailwind components;\n          @tailwind utilities;\n\n          @layer components {\n            .btn {\n              @apply rounded px-2 py-1;\n            }\n          }\n        `);\n    });\n    expect(await readOutputFile(/index\\.\\w+\\.css$/)).toIncludeCss(css`\n        /* prettier-ignore */\n        .btn {\n          border-radius: .25rem;\n          padding: .25rem .5rem;\n        }\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await waitForOutputFileChange(/index\\.\\w+\\.css$/, async () => {\n      await writeInputFile('index.css', css`\n          @tailwind base;\n          @tailwind components;\n          @tailwind utilities;\n\n          @layer components {\n            .btn {\n              @apply rounded bg-red-500 px-2 py-1;\n            }\n          }\n        `);\n    });\n    expect(await readOutputFile(/index\\.\\w+\\.css$/)).toIncludeCss(css`\n        /* prettier-ignore */\n        .btn {\n          --tw-bg-opacity: 1;\n          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n          border-radius: .25rem;\n          padding: .25rem .5rem;\n        }\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    return runningProcess.stop();\n  });",
            "file": "integration.test.js",
            "skipped": false,
            "dir": "integrations/parcel/tests"
        },
        {
            "name": "should be possible to generate tailwind output",
            "suites": [
                "static build"
            ],
            "updatePoint": {
                "line": 19,
                "column": 52,
                "index": 375
            },
            "line": 19,
            "code": "  it('should be possible to generate tailwind output', async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n    await $('postcss ./src/index.css -o ./dist/main.css', {\n      env: {\n        NODE_ENV: 'production'\n      }\n    });\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n  });",
            "file": "integration.test.js",
            "skipped": false,
            "dir": "integrations/postcss-cli/tests"
        },
        {
            "name": "classes are generated when the html file changes",
            "suites": [
                "watcher"
            ],
            "updatePoint": {
                "line": 34,
                "column": 56,
                "index": 815
            },
            "line": 34,
            "code": "  test('classes are generated when the html file changes', async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n    let runningProcess = $('postcss ./src/index.css -o ./dist/main.css -w --verbose');\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await appendToInputFile('index.html', html`<div class=\"font-normal\"></div>`);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    await appendToInputFile('index.html', html`<div class=\"bg-red-500\"></div>`);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .bg-red-500 {\n          --tw-bg-opacity: 1;\n          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n        }\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    return runningProcess.stop();\n  });",
            "file": "integration.test.js",
            "skipped": false,
            "dir": "integrations/postcss-cli/tests"
        },
        {
            "name": "classes are generated when globbed files change",
            "suites": [
                "watcher"
            ],
            "updatePoint": {
                "line": 69,
                "column": 55,
                "index": 2027
            },
            "line": 69,
            "code": "  test('classes are generated when globbed files change', async () => {\n    await writeInputFile('glob/index.html', html`<div class=\"font-bold\"></div>`);\n    let runningProcess = $('postcss ./src/index.css -o ./dist/main.css -w --verbose');\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await appendToInputFile('glob/index.html', html`<div class=\"font-normal\"></div>`);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    await appendToInputFile('glob/index.html', html`<div class=\"bg-red-500\"></div>`);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .bg-red-500 {\n          --tw-bg-opacity: 1;\n          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n        }\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    return runningProcess.stop();\n  });",
            "file": "integration.test.js",
            "skipped": false,
            "dir": "integrations/postcss-cli/tests"
        },
        {
            "name": "classes are generated when the tailwind.config.js file changes",
            "suites": [
                "watcher"
            ],
            "updatePoint": {
                "line": 104,
                "column": 70,
                "index": 3269
            },
            "line": 104,
            "code": "  test('classes are generated when the tailwind.config.js file changes', async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold md:font-medium\"></div>`);\n    let runningProcess = $('postcss ./src/index.css -o ./dist/main.css -w --verbose');\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n        @media (min-width: 768px) {\n          .md\\:font-medium {\n            font-weight: 500;\n          }\n        }\n      `);\n    await writeInputFile('../tailwind.config.js', javascript`\n          module.exports = {\n            content: ['./src/index.html'],\n            theme: {\n              extend: {\n                screens: {\n                  md: '800px'\n                },\n                fontWeight: {\n                  bold: 'bold'\n                }\n              },\n            },\n            corePlugins: {\n              preflight: false,\n            },\n            plugins: [],\n          }\n      `);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: bold;\n        }\n        @media (min-width: 800px) {\n          .md\\:font-medium {\n            font-weight: 500;\n          }\n        }\n      `);\n    return runningProcess.stop();\n  });",
            "file": "integration.test.js",
            "skipped": false,
            "dir": "integrations/postcss-cli/tests"
        },
        {
            "name": "classes are generated when the index.css file changes",
            "suites": [
                "watcher"
            ],
            "updatePoint": {
                "line": 150,
                "column": 61,
                "index": 4636
            },
            "line": 150,
            "code": "  test('classes are generated when the index.css file changes', async () => {\n    await writeInputFile('index.html', html`<div class=\"btn font-bold\"></div>`);\n    let runningProcess = $('postcss ./src/index.css -o ./dist/main.css -w --verbose');\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await writeInputFile('index.css', css`\n        @tailwind base;\n        @tailwind components;\n        @tailwind utilities;\n\n        @layer components {\n          .btn {\n            @apply rounded px-2 py-1;\n          }\n        }\n      `);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .btn {\n          border-radius: 0.25rem;\n          padding-left: 0.5rem;\n          padding-right: 0.5rem;\n          padding-top: 0.25rem;\n          padding-bottom: 0.25rem;\n        }\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await writeInputFile('index.css', css`\n        @tailwind base;\n        @tailwind components;\n        @tailwind utilities;\n\n        @layer components {\n          .btn {\n            @apply rounded bg-red-500 px-2 py-1;\n          }\n        }\n      `);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .btn {\n          border-radius: 0.25rem;\n          --tw-bg-opacity: 1;\n          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n          padding-left: 0.5rem;\n          padding-right: 0.5rem;\n          padding-top: 0.25rem;\n          padding-bottom: 0.25rem;\n        }\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    return runningProcess.stop();\n  });",
            "file": "integration.test.js",
            "skipped": false,
            "dir": "integrations/postcss-cli/tests"
        },
        {
            "name": "should be possible to generate tailwind output",
            "suites": [
                "static build"
            ],
            "updatePoint": {
                "line": 19,
                "column": 52,
                "index": 374
            },
            "line": 19,
            "code": "  it('should be possible to generate tailwind output', async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n    await $('rollup -c', {\n      env: {\n        NODE_ENV: 'production'\n      }\n    });\n    expect(await readOutputFile('index.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n  });",
            "file": "integration.test.js",
            "skipped": false,
            "dir": "integrations/rollup/tests"
        },
        {
            "name": "classes are generated when the html file changes",
            "suites": [
                "watcher"
            ],
            "updatePoint": {
                "line": 34,
                "column": 56,
                "index": 782
            },
            "line": 34,
            "code": "  test(`classes are generated when the html file changes`, async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n    let runningProcess = $('rollup -c --watch');\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('index.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await appendToInputFile('index.html', html`<div class=\"font-normal\"></div>`);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('index.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    await appendToInputFile('index.html', html`<div class=\"bg-red-500\"></div>`);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('index.css')).toIncludeCss(css`\n        .bg-red-500 {\n          --tw-bg-opacity: 1;\n          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n        }\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    return runningProcess.stop();\n  });",
            "file": "integration.test.js",
            "skipped": false,
            "dir": "integrations/rollup/tests"
        },
        {
            "name": "classes are generated when globbed files change",
            "suites": [
                "watcher"
            ],
            "updatePoint": {
                "line": 69,
                "column": 55,
                "index": 1959
            },
            "line": 69,
            "code": "  test(`classes are generated when globbed files change`, async () => {\n    await writeInputFile('glob/index.html', html`<div class=\"font-bold\"></div>`);\n    let runningProcess = $('rollup -c --watch');\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('index.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await appendToInputFile('glob/index.html', html`<div class=\"font-normal\"></div>`);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('index.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    await appendToInputFile('glob/index.html', html`<div class=\"bg-red-500\"></div>`);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('index.css')).toIncludeCss(css`\n        .bg-red-500 {\n          --tw-bg-opacity: 1;\n          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n        }\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    return runningProcess.stop();\n  });",
            "file": "integration.test.js",
            "skipped": false,
            "dir": "integrations/rollup/tests"
        },
        {
            "name": "classes are generated when the tailwind.config.js file changes",
            "suites": [
                "watcher"
            ],
            "updatePoint": {
                "line": 104,
                "column": 70,
                "index": 3166
            },
            "line": 104,
            "code": "  test(`classes are generated when the tailwind.config.js file changes`, async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold md:font-medium\"></div>`);\n    let runningProcess = $('rollup -c --watch');\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('index.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n        @media (min-width: 768px) {\n          .md\\:font-medium {\n            font-weight: 500;\n          }\n        }\n      `);\n    await writeInputFile('../tailwind.config.js', javascript`\n          module.exports = {\n            content: ['./src/index.html'],\n            theme: {\n              extend: {\n                screens: {\n                  md: '800px'\n                },\n                fontWeight: {\n                  bold: 'bold'\n                }\n              },\n            },\n            corePlugins: {\n              preflight: false,\n            },\n            plugins: [],\n          }\n      `);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('index.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: bold;\n        }\n        @media (min-width: 800px) {\n          .md\\:font-medium {\n            font-weight: 500;\n          }\n        }\n      `);\n    return runningProcess.stop();\n  });",
            "file": "integration.test.js",
            "skipped": false,
            "dir": "integrations/rollup/tests"
        },
        {
            "name": "classes are generated when the index.css file changes",
            "suites": [
                "watcher"
            ],
            "updatePoint": {
                "line": 150,
                "column": 61,
                "index": 4497
            },
            "line": 150,
            "code": "  test(`classes are generated when the index.css file changes`, async () => {\n    await writeInputFile('index.html', html`<div class=\"btn font-bold\"></div>`);\n    let runningProcess = $('rollup -c --watch');\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('index.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await writeInputFile('index.css', css`\n        @tailwind base;\n        @tailwind components;\n        @tailwind utilities;\n\n        @layer components {\n          .btn {\n            @apply rounded px-2 py-1;\n          }\n        }\n      `);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('index.css')).toIncludeCss(css`\n        .btn {\n          border-radius: 0.25rem;\n          padding-left: 0.5rem;\n          padding-right: 0.5rem;\n          padding-top: 0.25rem;\n          padding-bottom: 0.25rem;\n        }\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await writeInputFile('index.css', css`\n        @tailwind base;\n        @tailwind components;\n        @tailwind utilities;\n\n        @layer components {\n          .btn {\n            @apply rounded bg-red-500 px-2 py-1;\n          }\n        }\n      `);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('index.css')).toIncludeCss(css`\n        .btn {\n          border-radius: 0.25rem;\n          --tw-bg-opacity: 1;\n          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n          padding-left: 0.5rem;\n          padding-right: 0.5rem;\n          padding-top: 0.25rem;\n          padding-bottom: 0.25rem;\n        }\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    return runningProcess.stop();\n  });",
            "file": "integration.test.js",
            "skipped": false,
            "dir": "integrations/rollup/tests"
        },
        {
            "name": "--output",
            "suites": [
                "Build command"
            ],
            "updatePoint": {
                "line": 28,
                "column": 16,
                "index": 771
            },
            "line": 28,
            "code": "  test('--output', async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold shadow\"></div>`);\n    await $(`${EXECUTABLE} --output ./dist/main.css`);\n    let contents = await readOutputFile('main.css');\n\n    // `-i` is omitted, therefore the default `@tailwind base; @tailwind\n    // components; @tailwind utilities` is used. However `preflight` is\n    // disabled. I still want to verify that the `base` got included.\n    expect(contents).toContain('--tw-ring-offset-shadow: 0 0 #0000');\n    expect(contents).toContain('--tw-ring-shadow: 0 0 #0000');\n    expect(contents).toContain('--tw-shadow: 0 0 #0000');\n\n    // Verify `utilities` output is correct\n    expect(contents).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n  });",
            "file": "cli.test.js",
            "skipped": false,
            "dir": "integrations/tailwindcss-cli/tests"
        },
        {
            "name": "--input, --output",
            "suites": [
                "Build command"
            ],
            "updatePoint": {
                "line": 47,
                "column": 25,
                "index": 1571
            },
            "line": 47,
            "code": "  test('--input, --output', async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n    await $(`${EXECUTABLE} --input ./src/index.css --output ./dist/main.css`);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n  });",
            "file": "cli.test.js",
            "skipped": false,
            "dir": "integrations/tailwindcss-cli/tests"
        },
        {
            "name": "--minify",
            "suites": [
                "Build command"
            ],
            "updatePoint": {
                "line": 56,
                "column": 16,
                "index": 1898
            },
            "line": 56,
            "code": "  test('--minify', async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n    await $(`${EXECUTABLE} --output ./dist/main.css --minify`);\n    let withMinify = await readOutputFile('main.css');\n\n    // Verify that we got the expected output. Note: `.toIncludeCss` formats\n    // `actual` & `expected`\n    expect(withMinify).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await $(`${EXECUTABLE} --output ./dist/main.css`);\n    let withoutMinify = await readOutputFile('main.css');\n\n    // Let's verify that the actual minified output is smaller than the not\n    // minified version.\n    expect(withoutMinify.length).toBeGreaterThan(withMinify.length);\n  });",
            "file": "cli.test.js",
            "skipped": false,
            "dir": "integrations/tailwindcss-cli/tests"
        },
        {
            "name": "--no-autoprefixer",
            "suites": [
                "Build command"
            ],
            "updatePoint": {
                "line": 75,
                "column": 25,
                "index": 2643
            },
            "line": 75,
            "code": "  test('--no-autoprefixer', async () => {\n    await writeInputFile('index.html', html`<div class=\"select-none\"></div>`);\n    await $(`${EXECUTABLE} --output ./dist/main.css`);\n    let withAutoprefixer = await readOutputFile('main.css');\n    expect(withAutoprefixer).toIncludeCss(css`\n      .select-none {\n        -webkit-user-select: none;\n        user-select: none;\n      }\n    `);\n    await $(`${EXECUTABLE} --output ./dist/main.css --no-autoprefixer`);\n    let withoutAutoprefixer = await readOutputFile('main.css');\n    expect(withoutAutoprefixer).toIncludeCss(css`\n      .select-none {\n        user-select: none;\n      }\n    `);\n  });",
            "file": "cli.test.js",
            "skipped": false,
            "dir": "integrations/tailwindcss-cli/tests"
        },
        {
            "name": "--config (non-existing config file)",
            "suites": [
                "Build command"
            ],
            "updatePoint": {
                "line": 93,
                "column": 43,
                "index": 3301
            },
            "line": 93,
            "code": "  test('--config (non-existing config file)', async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n    let {\n      stderr\n    } = await $(`${EXECUTABLE} --output ./dist/main.css --config ./non-existing.config.js`).catch(err => err);\n    let toolRoot = resolveToolRoot();\n    expect(stderr).toEqual(`Specified config file ${path.resolve(toolRoot, 'non-existing.config.js')} does not exist.\\n`);\n  });",
            "file": "cli.test.js",
            "skipped": false,
            "dir": "integrations/tailwindcss-cli/tests"
        },
        {
            "name": "--config (existing config file)",
            "suites": [
                "Build command"
            ],
            "updatePoint": {
                "line": 101,
                "column": 39,
                "index": 3735
            },
            "line": 101,
            "code": "  test('--config (existing config file)', async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n    let customConfig = `module.exports = ${JSON.stringify({\n      content: ['./src/index.html'],\n      theme: {\n        extend: {\n          fontWeight: {\n            bold: 'BOLD'\n          }\n        }\n      },\n      corePlugins: {\n        preflight: false\n      },\n      plugins: []\n    }, null, 2)}`;\n    await writeInputFile('../custom.config.js', customConfig);\n    await $(`${EXECUTABLE} --output ./dist/main.css --config ./custom.config.js`);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: BOLD;\n        }\n      `);\n  });",
            "file": "cli.test.js",
            "skipped": false,
            "dir": "integrations/tailwindcss-cli/tests"
        },
        {
            "name": "--content",
            "suites": [
                "Build command"
            ],
            "updatePoint": {
                "line": 125,
                "column": 17,
                "index": 4433
            },
            "line": 125,
            "code": "  test('--content', async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n    await $(`${EXECUTABLE} --content ./src/index.html --output ./dist/main.css`);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n  });",
            "file": "cli.test.js",
            "skipped": false,
            "dir": "integrations/tailwindcss-cli/tests"
        },
        {
            "name": "--postcss (postcss.config.js)",
            "suites": [
                "Build command"
            ],
            "updatePoint": {
                "line": 134,
                "column": 37,
                "index": 4784
            },
            "line": 134,
            "code": "  test('--postcss (postcss.config.js)', async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n    let customConfig = javascript`\n      let path = require('path')\n      let postcss = require('postcss')\n\n      module.exports = {\n        plugins: [\n          function before(root, result) {\n            // Inject a custom component with @apply rules to prove that we run\n            // this _before_ the actual tailwind plugin.\n            let btn = postcss.parse('.btn { @apply bg-red-500 px-2 py-1 }')\n            root.append(btn.nodes)\n          },\n          function tailwindcss() {\n            return require(path.resolve('..', '..'))\n          },\n          function after(root, result) {\n            // Add '-after' to all the selectors\n            root.walkRules(rule => {\n              if (!rule.selector.startsWith('.')) return\n              rule.selector = rule.selector + '-after'\n            })\n          },\n        ],\n      }\n    `;\n    await writeInputFile('../postcss.config.js', customConfig);\n    await $(`${EXECUTABLE} --output ./dist/main.css --postcss`);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold-after {\n          font-weight: 700;\n        }\n\n        .btn-after {\n          --tw-bg-opacity: 1;\n          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n          padding-left: 0.5rem;\n          padding-right: 0.5rem;\n          padding-top: 0.25rem;\n          padding-bottom: 0.25rem;\n        }\n      `);\n  });",
            "file": "cli.test.js",
            "skipped": false,
            "dir": "integrations/tailwindcss-cli/tests"
        },
        {
            "name": "--postcss (custom.postcss.config.js)",
            "suites": [
                "Build command"
            ],
            "updatePoint": {
                "line": 178,
                "column": 44,
                "index": 6305
            },
            "line": 178,
            "code": "  test('--postcss (custom.postcss.config.js)', async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n    let customConfig = javascript`\n      let path = require('path')\n      let postcss = require('postcss')\n\n      module.exports = {\n        plugins: [\n          function before(root, result) {\n            // Inject a custom component with @apply rules to prove that we run\n            // this _before_ the actual tailwind plugin.\n            let btn = postcss.parse('.btn { @apply bg-red-500 px-2 py-1 }')\n            root.append(btn.nodes)\n          },\n          function tailwindcss() {\n            return require(path.resolve('..', '..'))\n          },\n          function after(root, result) {\n            // Add '-after' to all the selectors\n            root.walkRules(rule => {\n              if (!rule.selector.startsWith('.')) return\n              rule.selector = rule.selector + '-after'\n            })\n          },\n        ],\n      }\n    `;\n    await writeInputFile('../custom.postcss.config.js', customConfig);\n    await $(`${EXECUTABLE} --output ./dist/main.css --postcss ./custom.postcss.config.js`);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold-after {\n          font-weight: 700;\n        }\n\n        .btn-after {\n          --tw-bg-opacity: 1;\n          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n          padding-left: 0.5rem;\n          padding-right: 0.5rem;\n          padding-top: 0.25rem;\n          padding-bottom: 0.25rem;\n        }\n      `);\n  });",
            "file": "cli.test.js",
            "skipped": false,
            "dir": "integrations/tailwindcss-cli/tests"
        },
        {
            "name": "--postcss supports process options",
            "suites": [
                "Build command"
            ],
            "updatePoint": {
                "line": 222,
                "column": 42,
                "index": 7858
            },
            "line": 222,
            "code": "  test('--postcss supports process options', async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n    let customConfig = javascript`\n      let path = require('path')\n      let postcss = require('postcss')\n\n      module.exports = {\n        map: { inline: true },\n        plugins: [\n          function tailwindcss() {\n            return require(path.resolve('..', '..'))\n          },\n        ],\n      }\n    `;\n    await writeInputFile('../postcss.config.js', customConfig);\n    await $(`${EXECUTABLE} --output ./dist/main.css --postcss`);\n    let contents = await readOutputFile('main.css');\n    expect(contents).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    expect(contents).toContain(`/*# sourceMappingURL`);\n  });",
            "file": "cli.test.js",
            "skipped": false,
            "dir": "integrations/tailwindcss-cli/tests"
        },
        {
            "name": "--postcss supports process options with custom config",
            "suites": [
                "Build command"
            ],
            "updatePoint": {
                "line": 247,
                "column": 61,
                "index": 8675
            },
            "line": 247,
            "code": "  test('--postcss supports process options with custom config', async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n    let customConfig = javascript`\n      let path = require('path')\n      let postcss = require('postcss')\n\n      module.exports = {\n        map: { inline: true },\n        plugins: [\n          function tailwindcss() {\n            return require(path.resolve('..', '..'))\n          },\n        ],\n      }\n    `;\n    await writeInputFile('../custom.postcss.config.js', customConfig);\n    await $(`${EXECUTABLE} --output ./dist/main.css --postcss ./custom.postcss.config.js`);\n    let contents = await readOutputFile('main.css');\n    expect(contents).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    expect(contents).toContain(`/*# sourceMappingURL`);\n  });",
            "file": "cli.test.js",
            "skipped": false,
            "dir": "integrations/tailwindcss-cli/tests"
        },
        {
            "name": "postcss-import is supported by default",
            "suites": [
                "Build command"
            ],
            "updatePoint": {
                "line": 272,
                "column": 46,
                "index": 9511
            },
            "line": 272,
            "code": "  test('postcss-import is supported by default', async () => {\n    cleanupFile('src/test.css');\n    await writeInputFile('index.html', html`<div class=\"md:something-cool\"></div>`);\n    await writeInputFile('test.css', css`\n        @import 'tailwindcss/base';\n        @import 'tailwindcss/components';\n        @import 'tailwindcss/utilities';\n        @import './imported.css';\n      `);\n    await $(`${EXECUTABLE} --input ./src/test.css --content ./src/index.html --output ./dist/main.css`);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        @media (min-width: 768px) {\n          .md\\:something-cool {\n            color: red;\n          }\n        }\n      `);\n  });",
            "file": "cli.test.js",
            "skipped": false,
            "dir": "integrations/tailwindcss-cli/tests"
        },
        {
            "name": "postcss-import is supported by default in watch mode",
            "suites": [
                "Build command"
            ],
            "updatePoint": {
                "line": 290,
                "column": 60,
                "index": 10209
            },
            "line": 290,
            "code": "  test('postcss-import is supported by default in watch mode', async () => {\n    cleanupFile('src/test.css');\n    await writeInputFile('index.html', html`<div class=\"md:something-cool\"></div>`);\n    await writeInputFile('test.css', css`\n        @import 'tailwindcss/base';\n        @import 'tailwindcss/components';\n        @import 'tailwindcss/utilities';\n        @import './imported.css';\n      `);\n    let runningProcess = $(`${EXECUTABLE} --watch --input ./src/test.css --content ./src/index.html --output ./dist/main.css`);\n    await waitForOutputFileCreation('main.css');\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        @media (min-width: 768px) {\n          .md\\:something-cool {\n            color: red;\n          }\n        }\n      `);\n    return runningProcess.stop();\n  });",
            "file": "cli.test.js",
            "skipped": false,
            "dir": "integrations/tailwindcss-cli/tests"
        },
        {
            "name": "postcss-import is included when using a custom postcss configuration",
            "suites": [
                "Build command"
            ],
            "updatePoint": {
                "line": 310,
                "column": 76,
                "index": 11029
            },
            "line": 310,
            "code": "  test('postcss-import is included when using a custom postcss configuration', async () => {\n    cleanupFile('src/test.css');\n    await writeInputFile('index.html', html`<div class=\"md:something-cool\"></div>`);\n    await writeInputFile('test.css', css`\n        @import 'tailwindcss/base';\n        @import 'tailwindcss/components';\n        @import 'tailwindcss/utilities';\n        @import './imported.css';\n      `);\n    await $(`${EXECUTABLE} --input ./src/test.css --content ./src/index.html --output ./dist/main.css --postcss`);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        @import './imported.css';\n      `);\n  });",
            "file": "cli.test.js",
            "skipped": false,
            "dir": "integrations/tailwindcss-cli/tests"
        },
        {
            "name": "--help",
            "suites": [
                "Build command"
            ],
            "updatePoint": {
                "line": 324,
                "column": 14,
                "index": 11611
            },
            "line": 324,
            "code": "  test('--help', async () => {\n    let {\n      combined\n    } = await $(`${EXECUTABLE} --help`);\n    expect(dedent(combined)).toEqual(dedent(`\n        tailwindcss v${version}\n\n        Usage:\n           tailwindcss build [options]\n\n        Options:\n           -i, --input              Input file\n           -o, --output             Output file\n           -w, --watch              Watch for changes and rebuild as needed\n           -p, --poll               Use polling instead of filesystem events when watching\n               --content            Content paths to use for removing unused classes\n               --postcss            Load custom PostCSS configuration\n           -m, --minify             Minify the output\n           -c, --config             Path to a custom config file\n               --no-autoprefixer    Disable autoprefixer\n           -h, --help               Display usage information\n      `));\n  });",
            "file": "cli.test.js",
            "skipped": false,
            "dir": "integrations/tailwindcss-cli/tests"
        },
        {
            "name": "--full",
            "suites": [
                "Init command"
            ],
            "updatePoint": {
                "line": 349,
                "column": 14,
                "index": 12568
            },
            "line": 349,
            "code": "  test('--full', async () => {\n    cleanupFile('full.config.js');\n    let {\n      combined\n    } = await $(`${EXECUTABLE} init full.config.js --full`);\n    expect(combined).toMatchInlineSnapshot(`\n      \"\n      Created Tailwind CSS config file: full.config.js\n      \"\n    `);\n\n    // Not a clean way to test this. We could require the file and verify that\n    // multiple keys in `theme` exists. However it loads `tailwindcss/colors`\n    // which doesn't exists in this context.\n    expect((await readOutputFile('../full.config.js')).split('\\n').length).toBeGreaterThan(50);\n  });",
            "file": "cli.test.js",
            "skipped": false,
            "dir": "integrations/tailwindcss-cli/tests"
        },
        {
            "name": "--postcss",
            "suites": [
                "Init command"
            ],
            "updatePoint": {
                "line": 365,
                "column": 17,
                "index": 13152
            },
            "line": 365,
            "code": "  test('--postcss', async () => {\n    expect(await fileExists('postcss.config.js')).toBe(true);\n    await removeFile('postcss.config.js');\n    expect(await fileExists('postcss.config.js')).toBe(false);\n    let {\n      combined\n    } = await $(`${EXECUTABLE} init --postcss`);\n    expect(await fileExists('postcss.config.js')).toBe(true);\n    expect(combined).toMatchInlineSnapshot(`\n      \"\n      tailwind.config.js already exists.\n      Created PostCSS config file: postcss.config.js\n      \"\n    `);\n  });",
            "file": "cli.test.js",
            "skipped": false,
            "dir": "integrations/tailwindcss-cli/tests"
        },
        {
            "name": "--help",
            "suites": [
                "Init command"
            ],
            "updatePoint": {
                "line": 380,
                "column": 14,
                "index": 13656
            },
            "line": 380,
            "code": "  test('--help', async () => {\n    let {\n      combined\n    } = await $(`${EXECUTABLE} init --help`);\n    expect(dedent(combined)).toEqual(dedent(`\n        tailwindcss v${version}\n\n        Usage:\n           tailwindcss init [options]\n\n        Options:\n           -f, --full               Initialize a full \\`tailwind.config.js\\` file\n           -p, --postcss            Initialize a \\`postcss.config.js\\` file\n           -h, --help               Display usage information\n      `));\n  });",
            "file": "cli.test.js",
            "skipped": false,
            "dir": "integrations/tailwindcss-cli/tests"
        },
        {
            "name": "--help in ESM package",
            "suites": [
                "Init command"
            ],
            "updatePoint": {
                "line": 396,
                "column": 29,
                "index": 14160
            },
            "line": 396,
            "code": "  test('--help in ESM package', async () => {\n    let pkg = await readOutputFile('../package.json');\n    await writeInputFile('../package.json', JSON.stringify({\n      ...JSON.parse(pkg),\n      type: 'module'\n    }));\n    let {\n      combined\n    } = await $(`${EXECUTABLE} init --help`);\n    expect(dedent(combined)).toEqual(dedent(`\n        tailwindcss v${version}\n\n        Usage:\n           tailwindcss init [options]\n\n        Options:\n           -f, --full               Initialize a full \\`tailwind.config.cjs\\` file\n           -p, --postcss            Initialize a \\`postcss.config.cjs\\` file\n           -h, --help               Display usage information\n      `));\n    await writeInputFile('../package.json', pkg);\n  });",
            "file": "cli.test.js",
            "skipped": false,
            "dir": "integrations/tailwindcss-cli/tests"
        },
        {
            "name": "cjs config created when in ESM package",
            "suites": [
                "Init command"
            ],
            "updatePoint": {
                "line": 418,
                "column": 46,
                "index": 14905
            },
            "line": 418,
            "code": "  test('cjs config created when in ESM package', async () => {\n    cleanupFile('tailwind.config.cjs');\n    let pkg = await readOutputFile('../package.json');\n    await writeInputFile('../package.json', JSON.stringify({\n      ...JSON.parse(pkg),\n      type: 'module'\n    }));\n    let {\n      combined\n    } = await $(`${EXECUTABLE} init`);\n    expect(combined).toMatchInlineSnapshot(`\n      \"\n      Created Tailwind CSS config file: tailwind.config.cjs\n      \"\n    `);\n    expect(await fileExists('./tailwind.config.cjs')).toBe(true);\n\n    // Not a clean way to test this.\n    expect(await readOutputFile('../tailwind.config.cjs')).toContain('module.exports =');\n    await writeInputFile('../package.json', pkg);\n  });",
            "file": "cli.test.js",
            "skipped": false,
            "dir": "integrations/tailwindcss-cli/tests"
        },
        {
            "name": "should be possible to generate tailwind output",
            "suites": [
                "static build"
            ],
            "updatePoint": {
                "line": 20,
                "column": 52,
                "index": 398
            },
            "line": 20,
            "code": "  it('should be possible to generate tailwind output', async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n    await $('node ../../lib/cli.js -i ./src/index.css -o ./dist/main.css', {\n      env: {\n        NODE_ENV: 'production'\n      }\n    });\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n  });",
            "file": "integration.test.js",
            "skipped": false,
            "dir": "integrations/tailwindcss-cli/tests"
        },
        {
            "name": "should be possible to pipe in data",
            "suites": [
                "static build"
            ],
            "updatePoint": {
                "line": 33,
                "column": 40,
                "index": 807
            },
            "line": 33,
            "code": "  it('should be possible to pipe in data', async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n    await $('cat ./src/index.css | node ../../lib/cli.js -i - -o ./dist/main.css', {\n      shell: true,\n      env: {\n        NODE_ENV: 'production'\n      }\n    });\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n  });",
            "file": "integration.test.js",
            "skipped": false,
            "dir": "integrations/tailwindcss-cli/tests"
        },
        {
            "name": "should safelist a list of classes to always include",
            "suites": [
                "static build"
            ],
            "updatePoint": {
                "line": 47,
                "column": 57,
                "index": 1260
            },
            "line": 47,
            "code": "  it('should safelist a list of classes to always include', async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n    await writeInputFile('../tailwind.config.js', javascript`\n        module.exports = {\n          content: {\n            files: ['./src/index.html'],\n          },\n          safelist: ['bg-red-500','bg-red-600'],\n          theme: {\n            extend: {\n            },\n          },\n          corePlugins: {\n            preflight: false,\n          },\n          plugins: [],\n        }\n      `);\n    await $('node ../../lib/cli.js -i ./src/index.css -o ./dist/main.css', {\n      env: {\n        NODE_ENV: 'production'\n      }\n    });\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .bg-red-500 {\n          --tw-bg-opacity: 1;\n          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n        }\n\n        .bg-red-600 {\n          --tw-bg-opacity: 1;\n          background-color: rgb(220 38 38 / var(--tw-bg-opacity));\n        }\n\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n  });",
            "file": "integration.test.js",
            "skipped": false,
            "dir": "integrations/tailwindcss-cli/tests"
        },
        {
            "name": "can read from a config file from an @config directive",
            "suites": [
                "static build"
            ],
            "updatePoint": {
                "line": 86,
                "column": 59,
                "index": 2341
            },
            "line": 86,
            "code": "  it('can read from a config file from an @config directive', async () => {\n    await writeInputFile('index.html', html`<div class=\"bg-yellow\"></div>`);\n    await writeInputFile('index.css', css`\n        @config \"./tailwind.config.js\";\n        @tailwind base;\n        @tailwind components;\n        @tailwind utilities;\n      `);\n    await writeInputFile('tailwind.config.js', javascript`\n        module.exports = {\n          content: {\n            relative: true,\n            files: ['./index.html'],\n          },\n          theme: {\n            extend: {\n              colors: {\n                yellow: '#ff0',\n              }\n            },\n          },\n          corePlugins: {\n            preflight: false,\n          },\n        }\n      `);\n    await $('node ../../lib/cli.js -i ./src/index.css -o ./dist/main.css', {\n      env: {\n        NODE_ENV: 'production'\n      }\n    });\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .bg-yellow {\n          --tw-bg-opacity: 1;\n          background-color: rgb(255 255 0 / var(--tw-bg-opacity));\n        }\n      `);\n  });",
            "file": "integration.test.js",
            "skipped": false,
            "dir": "integrations/tailwindcss-cli/tests"
        },
        {
            "name": "can read from a config file from an @config directive inside an @import from postcss-import",
            "suites": [
                "static build"
            ],
            "updatePoint": {
                "line": 124,
                "column": 97,
                "index": 3466
            },
            "line": 124,
            "code": "  it('can read from a config file from an @config directive inside an @import from postcss-import', async () => {\n    await fs.promises.mkdir('./src/config', {\n      recursive: true\n    });\n    await writeInputFile('index.html', html`<div class=\"bg-yellow\"></div>`);\n    await writeInputFile('config/myconfig.css', css`\n        @config \"../tailwind.config.js\";\n      `);\n    await writeInputFile('index.css', css`\n        @import './config/myconfig';\n        @import 'tailwindcss/base';\n        @import 'tailwindcss/components';\n        @import 'tailwindcss/utilities';\n      `);\n    await writeInputFile('tailwind.config.js', javascript`\n        module.exports = {\n          content: {\n            relative: true,\n            files: ['./index.html'],\n          },\n          theme: {\n            extend: {\n              colors: {\n                yellow: '#ff0',\n              }\n            },\n          },\n          corePlugins: {\n            preflight: false,\n          },\n        }\n      `);\n    await $('node ../../lib/cli.js -i ./src/index.css -o ./dist/main.css', {\n      env: {\n        NODE_ENV: 'production'\n      }\n    });\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .bg-yellow {\n          --tw-bg-opacity: 1;\n          background-color: rgb(255 255 0 / var(--tw-bg-opacity));\n        }\n      `);\n  });",
            "file": "integration.test.js",
            "skipped": false,
            "dir": "integrations/tailwindcss-cli/tests"
        },
        {
            "name": "classes are generated when the html file changes",
            "suites": [
                "watcher"
            ],
            "updatePoint": {
                "line": 170,
                "column": 56,
                "index": 4795
            },
            "line": 170,
            "code": "  test('classes are generated when the html file changes', async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n    let runningProcess = $('node ../../lib/cli.js -i ./src/index.css -o ./dist/main.css -w');\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await appendToInputFile('index.html', html`<div class=\"font-normal\"></div>`);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    await appendToInputFile('index.html', html`<div class=\"bg-red-500\"></div>`);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .bg-red-500 {\n          --tw-bg-opacity: 1;\n          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n        }\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    return runningProcess.stop();\n  });",
            "file": "integration.test.js",
            "skipped": false,
            "dir": "integrations/tailwindcss-cli/tests"
        },
        {
            "name": "classes are generated when globbed files change",
            "suites": [
                "watcher"
            ],
            "updatePoint": {
                "line": 205,
                "column": 55,
                "index": 6014
            },
            "line": 205,
            "code": "  test('classes are generated when globbed files change', async () => {\n    await writeInputFile('glob/index.html', html`<div class=\"font-bold\"></div>`);\n    let runningProcess = $('node ../../lib/cli.js -i ./src/index.css -o ./dist/main.css -w');\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await appendToInputFile('glob/index.html', html`<div class=\"font-normal\"></div>`);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    await appendToInputFile('glob/index.html', html`<div class=\"bg-red-500\"></div>`);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .bg-red-500 {\n          --tw-bg-opacity: 1;\n          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n        }\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    return runningProcess.stop();\n  });",
            "file": "integration.test.js",
            "skipped": false,
            "dir": "integrations/tailwindcss-cli/tests"
        },
        {
            "name": "@layers are replaced and cleaned when the html file changes",
            "suites": [
                "watcher"
            ],
            "updatePoint": {
                "line": 240,
                "column": 67,
                "index": 7260
            },
            "line": 240,
            "code": "  test('@layers are replaced and cleaned when the html file changes', async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n    await writeInputFile('index.css', css`\n        @tailwind base;\n        @tailwind components;\n        @tailwind utilities;\n\n        @layer base {\n          html {\n            scroll-behavior: smooth;\n          }\n        }\n      `);\n    let runningProcess = $('node ../../lib/cli.js -i ./src/index.css -o ./dist/main.css -w');\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await appendToInputFile('index.html', html`<div class=\"font-normal\"></div>`);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).not.toIncludeCss(css`\n      @layer base {\n        html {\n          scroll-behavior: smooth;\n        }\n      }\n    `);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    return runningProcess.stop();\n  });",
            "file": "integration.test.js",
            "skipped": false,
            "dir": "integrations/tailwindcss-cli/tests"
        },
        {
            "name": "classes are generated when the tailwind.config.js file changes",
            "suites": [
                "watcher"
            ],
            "updatePoint": {
                "line": 279,
                "column": 70,
                "index": 8447
            },
            "line": 279,
            "code": "  test('classes are generated when the tailwind.config.js file changes', async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold md:font-medium\"></div>`);\n    let runningProcess = $('node ../../lib/cli.js -i ./src/index.css -o ./dist/main.css -w');\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n        @media (min-width: 768px) {\n          .md\\:font-medium {\n            font-weight: 500;\n          }\n        }\n      `);\n    await writeInputFile('../tailwind.config.js', javascript`\n          module.exports = {\n            content: ['./src/index.html'],\n            theme: {\n              extend: {\n                screens: {\n                  md: '800px'\n                },\n                fontWeight: {\n                  bold: 'bold'\n                }\n              },\n            },\n            corePlugins: {\n              preflight: false,\n            },\n            plugins: [],\n          }\n      `);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: bold;\n        }\n        @media (min-width: 800px) {\n          .md\\:font-medium {\n            font-weight: 500;\n          }\n        }\n      `);\n    return runningProcess.stop();\n  });",
            "file": "integration.test.js",
            "skipped": false,
            "dir": "integrations/tailwindcss-cli/tests"
        },
        {
            "name": "classes are generated when the index.css file changes",
            "suites": [
                "watcher"
            ],
            "updatePoint": {
                "line": 325,
                "column": 61,
                "index": 9821
            },
            "line": 325,
            "code": "  test('classes are generated when the index.css file changes', async () => {\n    await writeInputFile('index.html', html`<div class=\"btn font-bold\"></div>`);\n    let runningProcess = $('node ../../lib/cli.js -i ./src/index.css -o ./dist/main.css -w');\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await writeInputFile('index.css', css`\n        @tailwind base;\n        @tailwind components;\n        @tailwind utilities;\n\n        @layer components {\n          .btn {\n            @apply rounded px-2 py-1;\n          }\n        }\n      `);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .btn {\n          border-radius: 0.25rem;\n          padding-left: 0.5rem;\n          padding-right: 0.5rem;\n          padding-top: 0.25rem;\n          padding-bottom: 0.25rem;\n        }\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await writeInputFile('index.css', css`\n        @tailwind base;\n        @tailwind components;\n        @tailwind utilities;\n\n        @layer components {\n          .btn {\n            @apply rounded bg-red-500 px-2 py-1;\n          }\n        }\n      `);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .btn {\n          border-radius: 0.25rem;\n          --tw-bg-opacity: 1;\n          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n          padding-left: 0.5rem;\n          padding-right: 0.5rem;\n          padding-top: 0.25rem;\n          padding-bottom: 0.25rem;\n        }\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    return runningProcess.stop();\n  });",
            "file": "integration.test.js",
            "skipped": false,
            "dir": "integrations/tailwindcss-cli/tests"
        },
        {
            "name": "listens for changes to the @config directive",
            "suites": [
                "watcher"
            ],
            "updatePoint": {
                "line": 386,
                "column": 52,
                "index": 11601
            },
            "line": 386,
            "code": "  test('listens for changes to the @config directive', async () => {\n    await writeInputFile('index.html', html`<div class=\"bg-yellow\"></div>`);\n    await writeInputFile('index.css', css`\n        @config \"./tailwind.config.js\";\n        @tailwind base;\n        @tailwind components;\n        @tailwind utilities;\n      `);\n    await writeInputFile('tailwind.config.js', javascript`\n        module.exports = {\n          content: {\n            relative: true,\n            files: ['./index.html'],\n          },\n          theme: {\n            extend: {\n              colors: {\n                yellow: '#ff0',\n              }\n            },\n          },\n          corePlugins: {\n            preflight: false,\n          },\n        }\n      `);\n    await writeInputFile('tailwind.2.config.js', javascript`\n        module.exports = {\n          content: {\n            relative: true,\n            files: ['./index.html'],\n          },\n          theme: {\n            extend: {\n              colors: {\n                yellow: '#ff7',\n              }\n            },\n          },\n          corePlugins: {\n            preflight: false,\n          },\n        }\n      `);\n    let runningProcess = $('node ../../lib/cli.js -i ./src/index.css -o ./dist/main.css -w');\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .bg-yellow {\n          --tw-bg-opacity: 1;\n          background-color: rgb(255 255 0 / var(--tw-bg-opacity));\n        }\n      `);\n    await writeInputFile('index.css', css`\n        @config \"./tailwind.2.config.js\";\n        @tailwind base;\n        @tailwind components;\n        @tailwind utilities;\n      `);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .bg-yellow {\n          --tw-bg-opacity: 1;\n          background-color: rgb(255 255 119 / var(--tw-bg-opacity));\n        }\n      `);\n    await writeInputFile('tailwind.2.config.js', javascript`\n        module.exports = {\n          content: {\n            relative: true,\n            files: ['./index.html'],\n          },\n          theme: {\n            extend: {\n              colors: {\n                yellow: '#fff',\n              }\n            },\n          },\n          corePlugins: {\n            preflight: false,\n          },\n        }\n      `);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .bg-yellow {\n          --tw-bg-opacity: 1;\n          background-color: rgb(255 255 255 / var(--tw-bg-opacity));\n        }\n      `);\n    return runningProcess.stop();\n  });",
            "file": "integration.test.js",
            "skipped": false,
            "dir": "integrations/tailwindcss-cli/tests"
        },
        {
            "name": "should be possible to generate tailwind output",
            "suites": [
                "static build"
            ],
            "updatePoint": {
                "line": 26,
                "column": 52,
                "index": 527
            },
            "line": 26,
            "code": "  it('should be possible to generate tailwind output', async () => {\n    await writeInputFile('index.html', html`\n        <link rel=\"stylesheet\" href=\"./index.css\" />\n        <div class=\"font-bold\"></div>\n      `);\n    await $('vite build', {\n      env: {\n        NODE_ENV: 'production',\n        NO_COLOR: '1'\n      }\n    });\n    expect(await readOutputFile(/index.\\w+\\.css$/)).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n  });",
            "file": "integration.test.js",
            "skipped": false,
            "dir": "integrations/vite/tests"
        },
        {
            "name": "classes are generated when the html file changes",
            "suites": [
                "watcher"
            ],
            "updatePoint": {
                "line": 45,
                "column": 56,
                "index": 1034
            },
            "line": 45,
            "code": "  test('classes are generated when the html file changes', async () => {\n    await writeInputFile('index.html', html`\n        <link rel=\"stylesheet\" href=\"./index.css\" />\n        <div class=\"font-bold\"></div>\n      `);\n    let runningProcess = $(`vite --port ${PORT}`, {\n      env: {\n        NO_COLOR: '1'\n      }\n    });\n    await runningProcess.onStdout(message => message.includes('ready in'));\n    expect(await fetchCSS()).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await appendToInputFile('index.html', html`<div class=\"font-normal\"></div>`);\n    await runningProcess.onStdout(message => message.includes('page reload'));\n    expect(await fetchCSS()).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    await appendToInputFile('index.html', html`<div class=\"bg-red-500\"></div>`);\n    await runningProcess.onStdout(message => message.includes('page reload'));\n    expect(await fetchCSS()).toIncludeCss(css`\n        .bg-red-500 {\n          --tw-bg-opacity: 1;\n          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n        }\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    return runningProcess.stop();\n  });",
            "file": "integration.test.js",
            "skipped": false,
            "dir": "integrations/vite/tests"
        },
        {
            "name": "classes are generated when globbed files change",
            "suites": [
                "watcher"
            ],
            "updatePoint": {
                "line": 87,
                "column": 55,
                "index": 2391
            },
            "line": 87,
            "code": "  test('classes are generated when globbed files change', async () => {\n    await writeInputFile('index.html', html` <link rel=\"stylesheet\" href=\"./index.css\" /> `);\n    await writeInputFile('glob/index.html', html` <div class=\"font-bold\"></div> `);\n    let runningProcess = $(`vite --port ${PORT}`, {\n      env: {\n        NO_COLOR: '1'\n      }\n    });\n    await runningProcess.onStdout(message => message.includes('ready in'));\n    expect(await fetchCSS()).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await appendToInputFile('glob/index.html', html`<div class=\"font-normal\"></div>`);\n    await runningProcess.onStdout(message => message.includes('page reload'));\n    expect(await fetchCSS()).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    await appendToInputFile('glob/index.html', html`<div class=\"bg-red-500\"></div>`);\n    await runningProcess.onStdout(message => message.includes('page reload'));\n    expect(await fetchCSS()).toIncludeCss(css`\n        .bg-red-500 {\n          --tw-bg-opacity: 1;\n          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n        }\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    return runningProcess.stop();\n  });",
            "file": "integration.test.js",
            "skipped": false,
            "dir": "integrations/vite/tests"
        },
        {
            "name": "classes are generated when the tailwind.config.js file changes",
            "suites": [
                "watcher"
            ],
            "updatePoint": {
                "line": 127,
                "column": 70,
                "index": 3805
            },
            "line": 127,
            "code": "  test('classes are generated when the tailwind.config.js file changes', async () => {\n    await writeInputFile('index.html', html`\n        <link rel=\"stylesheet\" href=\"./index.css\" />\n        <div class=\"font-bold md:font-medium\"></div>\n      `);\n    let runningProcess = $(`vite --port ${PORT}`, {\n      env: {\n        NO_COLOR: '1'\n      }\n    });\n    await runningProcess.onStdout(message => message.includes('ready in'));\n    expect(await fetchCSS()).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n        @media (min-width: 768px) {\n          .md\\:font-medium {\n            font-weight: 500;\n          }\n        }\n      `);\n    await writeInputFile('tailwind.config.js', javascript`\n        module.exports = {\n          content: ['./index.html'],\n          theme: {\n            extend: {\n              screens: {\n                md: '800px'\n              },\n              fontWeight: {\n                bold: 'bold'\n              }\n            },\n          },\n          corePlugins: {\n            preflight: false,\n          },\n          plugins: [],\n        }\n      `);\n    await runningProcess.onStdout(message => message.includes('[vite]'));\n    expect(await fetchCSS()).toIncludeCss(css`\n        .font-bold {\n          font-weight: bold;\n        }\n        @media (min-width: 800px) {\n          .md\\:font-medium {\n            font-weight: 500;\n          }\n        }\n      `);\n    return runningProcess.stop();\n  });",
            "file": "integration.test.js",
            "skipped": false,
            "dir": "integrations/vite/tests"
        },
        {
            "name": "classes are generated when the index.css file changes",
            "suites": [
                "watcher"
            ],
            "updatePoint": {
                "line": 180,
                "column": 61,
                "index": 5250
            },
            "line": 180,
            "code": "  test('classes are generated when the index.css file changes', async () => {\n    await writeInputFile('index.html', html`\n        <link rel=\"stylesheet\" href=\"./index.css\" />\n        <div class=\"btn font-bold\"></div>\n      `);\n    let runningProcess = $(`vite --port ${PORT}`, {\n      env: {\n        NO_COLOR: '1'\n      }\n    });\n    await runningProcess.onStdout(message => message.includes('ready in'));\n    expect(await fetchCSS()).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await writeInputFile('index.css', css`\n        @tailwind base;\n        @tailwind components;\n        @tailwind utilities;\n\n        @layer components {\n          .btn {\n            @apply rounded px-2 py-1;\n          }\n        }\n      `);\n    await runningProcess.onStdout(message => message.includes('hmr update /index.css'));\n    expect(await fetchCSS()).toIncludeCss(css`\n        .btn {\n          border-radius: 0.25rem;\n          padding-left: 0.5rem;\n          padding-right: 0.5rem;\n          padding-top: 0.25rem;\n          padding-bottom: 0.25rem;\n        }\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await writeInputFile('index.css', css`\n        @tailwind base;\n        @tailwind components;\n        @tailwind utilities;\n\n        @layer components {\n          .btn {\n            @apply rounded bg-red-500 px-2 py-1;\n          }\n        }\n      `);\n    await runningProcess.onStdout(message => message.includes('hmr update /index.css'));\n    expect(await fetchCSS()).toIncludeCss(css`\n        .btn {\n          border-radius: 0.25rem;\n          --tw-bg-opacity: 1;\n          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n          padding-left: 0.5rem;\n          padding-right: 0.5rem;\n          padding-top: 0.25rem;\n          padding-bottom: 0.25rem;\n        }\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    return runningProcess.stop();\n  });",
            "file": "integration.test.js",
            "skipped": false,
            "dir": "integrations/vite/tests"
        },
        {
            "name": "should be possible to generate tailwind output",
            "suites": [
                "static build"
            ],
            "updatePoint": {
                "line": 18,
                "column": 52,
                "index": 364
            },
            "line": 18,
            "code": "  it('should be possible to generate tailwind output', async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n    await $('webpack --mode=production');\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n  });",
            "file": "integration.test.js",
            "skipped": false,
            "dir": "integrations/webpack-4/tests"
        },
        {
            "name": "classes are generated when the html file changes",
            "suites": [
                "watcher"
            ],
            "updatePoint": {
                "line": 29,
                "column": 56,
                "index": 726
            },
            "line": 29,
            "code": "  test(`classes are generated when the html file changes`, async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n    let runningProcess = $('webpack --mode=development --watch');\n    await waitForOutputFileCreation('main.css');\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await waitForOutputFileChange('main.css', async () => {\n      await appendToInputFile('index.html', html`<div class=\"font-normal\"></div>`);\n    });\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    await waitForOutputFileChange('main.css', async () => {\n      await appendToInputFile('index.html', html`<div class=\"bg-red-500\"></div>`);\n    });\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .bg-red-500 {\n          --tw-bg-opacity: 1;\n          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n        }\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    return runningProcess.stop();\n  });",
            "file": "integration.test.js",
            "skipped": false,
            "dir": "integrations/webpack-4/tests"
        },
        {
            "name": "classes are generated when globbed files change",
            "suites": [
                "watcher"
            ],
            "updatePoint": {
                "line": 66,
                "column": 55,
                "index": 1980
            },
            "line": 66,
            "code": "  test(`classes are generated when globbed files change`, async () => {\n    await writeInputFile('glob/index.html', html`<div class=\"font-bold\"></div>`);\n    let runningProcess = $('webpack --mode=development --watch');\n    await waitForOutputFileCreation('main.css');\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await waitForOutputFileChange('main.css', async () => {\n      await appendToInputFile('glob/index.html', html`<div class=\"font-normal\"></div>`);\n    });\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    await waitForOutputFileChange('main.css', async () => {\n      await appendToInputFile('glob/index.html', html`<div class=\"bg-red-500\"></div>`);\n    });\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .bg-red-500 {\n          --tw-bg-opacity: 1;\n          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n        }\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    return runningProcess.stop();\n  });",
            "file": "integration.test.js",
            "skipped": false,
            "dir": "integrations/webpack-4/tests"
        },
        {
            "name": "classes are generated when the tailwind.config.js file changes",
            "suites": [
                "watcher"
            ],
            "updatePoint": {
                "line": 103,
                "column": 70,
                "index": 3264
            },
            "line": 103,
            "code": "  test(`classes are generated when the tailwind.config.js file changes`, async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold md:font-medium\"></div>`);\n    let runningProcess = $('webpack --mode=development --watch');\n    await waitForOutputFileCreation('main.css');\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n        @media (min-width: 768px) {\n          .md\\:font-medium {\n            font-weight: 500;\n          }\n        }\n      `);\n    await waitForOutputFileChange('main.css', async () => {\n      await writeInputFile('../tailwind.config.js', javascript`\n          module.exports = {\n            content: ['./src/index.html'],\n            theme: {\n              extend: {\n                screens: {\n                  md: '800px'\n                },\n                fontWeight: {\n                  bold: 'bold'\n                }\n              },\n            },\n            corePlugins: {\n              preflight: false,\n            },\n            plugins: [],\n          }\n      `);\n    });\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: bold;\n        }\n        @media (min-width: 800px) {\n          .md\\:font-medium {\n            font-weight: 500;\n          }\n        }\n      `);\n    return runningProcess.stop();\n  });",
            "file": "integration.test.js",
            "skipped": false,
            "dir": "integrations/webpack-4/tests"
        },
        {
            "name": "classes are generated when the index.css file changes",
            "suites": [
                "watcher"
            ],
            "updatePoint": {
                "line": 150,
                "column": 61,
                "index": 4645
            },
            "line": 150,
            "code": "  test(`classes are generated when the index.css file changes`, async () => {\n    await writeInputFile('index.html', html`<div class=\"btn font-bold\"></div>`);\n    let runningProcess = $('webpack --mode=development --watch');\n    await waitForOutputFileCreation('main.css');\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await waitForOutputFileChange('main.css', async () => {\n      await writeInputFile('index.css', css`\n          @tailwind base;\n          @tailwind components;\n          @tailwind utilities;\n\n          @layer components {\n            .btn {\n              @apply rounded px-2 py-1;\n            }\n          }\n        `);\n    });\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .btn {\n          border-radius: 0.25rem;\n          padding-left: 0.5rem;\n          padding-right: 0.5rem;\n          padding-top: 0.25rem;\n          padding-bottom: 0.25rem;\n        }\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await waitForOutputFileChange('main.css', async () => {\n      await writeInputFile('index.css', css`\n          @tailwind base;\n          @tailwind components;\n          @tailwind utilities;\n\n          @layer components {\n            .btn {\n              @apply rounded bg-red-500 px-2 py-1;\n            }\n          }\n        `);\n    });\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .btn {\n          border-radius: 0.25rem;\n          --tw-bg-opacity: 1;\n          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n          padding-left: 0.5rem;\n          padding-right: 0.5rem;\n          padding-top: 0.25rem;\n          padding-bottom: 0.25rem;\n        }\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    return runningProcess.stop();\n  });",
            "file": "integration.test.js",
            "skipped": false,
            "dir": "integrations/webpack-4/tests"
        },
        {
            "name": "should be possible to generate tailwind output",
            "suites": [
                "static build"
            ],
            "updatePoint": {
                "line": 18,
                "column": 52,
                "index": 364
            },
            "line": 18,
            "code": "  it('should be possible to generate tailwind output', async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n    await $('webpack --mode=production');\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n  });",
            "file": "integration.test.js",
            "skipped": false,
            "dir": "integrations/webpack-5/tests"
        },
        {
            "name": "classes are generated when the html file changes",
            "suites": [
                "watcher"
            ],
            "updatePoint": {
                "line": 29,
                "column": 56,
                "index": 726
            },
            "line": 29,
            "code": "  test(`classes are generated when the html file changes`, async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n    let runningProcess = $('webpack --mode=development --watch');\n    await waitForOutputFileCreation('main.css');\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await waitForOutputFileChange('main.css', async () => {\n      await appendToInputFile('index.html', html`<div class=\"font-normal\"></div>`);\n    });\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    await waitForOutputFileChange('main.css', async () => {\n      await appendToInputFile('index.html', html`<div class=\"bg-red-500\"></div>`);\n    });\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .bg-red-500 {\n          --tw-bg-opacity: 1;\n          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n        }\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    return runningProcess.stop();\n  });",
            "file": "integration.test.js",
            "skipped": false,
            "dir": "integrations/webpack-5/tests"
        },
        {
            "name": "classes are generated when globbed files change",
            "suites": [
                "watcher"
            ],
            "updatePoint": {
                "line": 66,
                "column": 55,
                "index": 1980
            },
            "line": 66,
            "code": "  test(`classes are generated when globbed files change`, async () => {\n    await writeInputFile('glob/index.html', html`<div class=\"font-bold\"></div>`);\n    let runningProcess = $('webpack --mode=development --watch');\n    await waitForOutputFileCreation('main.css');\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await waitForOutputFileChange('main.css', async () => {\n      await appendToInputFile('glob/index.html', html`<div class=\"font-normal\"></div>`);\n    });\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    await waitForOutputFileChange('main.css', async () => {\n      await appendToInputFile('index.html', html`<div class=\"bg-red-500\"></div>`);\n    });\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .bg-red-500 {\n          --tw-bg-opacity: 1;\n          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n        }\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    return runningProcess.stop();\n  });",
            "file": "integration.test.js",
            "skipped": false,
            "dir": "integrations/webpack-5/tests"
        },
        {
            "name": "classes are generated when the tailwind.config.js file changes",
            "suites": [
                "watcher"
            ],
            "updatePoint": {
                "line": 103,
                "column": 70,
                "index": 3259
            },
            "line": 103,
            "code": "  test(`classes are generated when the tailwind.config.js file changes`, async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold md:font-medium\"></div>`);\n    let runningProcess = $('webpack --mode=development --watch');\n    await waitForOutputFileCreation('main.css');\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n        @media (min-width: 768px) {\n          .md\\:font-medium {\n            font-weight: 500;\n          }\n        }\n      `);\n    await waitForOutputFileChange('main.css', async () => {\n      await writeInputFile('../tailwind.config.js', javascript`\n          module.exports = {\n            content: ['./src/index.html'],\n            theme: {\n              extend: {\n                screens: {\n                  md: '800px'\n                },\n                fontWeight: {\n                  bold: 'bold'\n                }\n              },\n            },\n            corePlugins: {\n              preflight: false,\n            },\n            plugins: [],\n          }\n      `);\n    });\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: bold;\n        }\n        @media (min-width: 800px) {\n          .md\\:font-medium {\n            font-weight: 500;\n          }\n        }\n      `);\n    return runningProcess.stop();\n  });",
            "file": "integration.test.js",
            "skipped": false,
            "dir": "integrations/webpack-5/tests"
        },
        {
            "name": "classes are generated when the index.css file changes",
            "suites": [
                "watcher"
            ],
            "updatePoint": {
                "line": 150,
                "column": 61,
                "index": 4640
            },
            "line": 150,
            "code": "  test(`classes are generated when the index.css file changes`, async () => {\n    await writeInputFile('index.html', html`<div class=\"btn font-bold\"></div>`);\n    let runningProcess = $('webpack --mode=development --watch');\n    await waitForOutputFileCreation('main.css');\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await waitForOutputFileChange('main.css', async () => {\n      await writeInputFile('index.css', css`\n          @tailwind base;\n          @tailwind components;\n          @tailwind utilities;\n\n          @layer components {\n            .btn {\n              @apply rounded px-2 py-1;\n            }\n          }\n        `);\n    });\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .btn {\n          border-radius: 0.25rem;\n          padding-left: 0.5rem;\n          padding-right: 0.5rem;\n          padding-top: 0.25rem;\n          padding-bottom: 0.25rem;\n        }\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await waitForOutputFileChange('main.css', async () => {\n      await writeInputFile('index.css', css`\n          @tailwind base;\n          @tailwind components;\n          @tailwind utilities;\n\n          @layer components {\n            .btn {\n              @apply rounded bg-red-500 px-2 py-1;\n            }\n          }\n        `);\n    });\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .btn {\n          border-radius: 0.25rem;\n          --tw-bg-opacity: 1;\n          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n          padding-left: 0.5rem;\n          padding-right: 0.5rem;\n          padding-top: 0.25rem;\n          padding-bottom: 0.25rem;\n        }\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    return runningProcess.stop();\n  });",
            "file": "integration.test.js",
            "skipped": false,
            "dir": "integrations/webpack-5/tests"
        },
        {
            "name": "should safelist a list of classes to always include",
            "suites": [
                "watcher"
            ],
            "updatePoint": {
                "line": 213,
                "column": 57,
                "index": 6496
            },
            "line": 213,
            "code": "  it('should safelist a list of classes to always include', async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n    await writeInputFile('../tailwind.config.js', javascript`\n        module.exports = {\n          content: {\n            files: ['./src/index.html'],\n          },\n          safelist: ['bg-red-500','bg-red-600'],\n          theme: {\n            extend: {\n            },\n          },\n          corePlugins: {\n            preflight: false,\n          },\n          plugins: [],\n        }\n      `);\n    let runningProcess = $('webpack --mode=development --watch');\n    await waitForOutputFileCreation('main.css');\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .bg-red-500 {\n          --tw-bg-opacity: 1;\n          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n        }\n\n        .bg-red-600 {\n          --tw-bg-opacity: 1;\n          background-color: rgb(220 38 38 / var(--tw-bg-opacity));\n        }\n\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    return runningProcess.stop();\n  });",
            "file": "integration.test.js",
            "skipped": false,
            "dir": "integrations/webpack-5/tests"
        }
    ],
    "error": "Exclusive tests detected. `.only` call found in mutable.test.js:15\nRemove `.only` to restore test checks"
}