{
    "repo": "babel/babel",
    "url": "https://github.com/babel/babel",
    "branch": "main",
    "configs": [
        {
            "package": "babel",
            "lang": "js",
            "dir": "test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/cli",
            "lang": "js",
            "dir": "packages/babel-cli/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/code-frame",
            "lang": "js",
            "dir": "packages/babel-code-frame/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/core",
            "lang": "js",
            "dir": "packages/babel-core/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/generator",
            "lang": "js",
            "dir": "packages/babel-generator/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/helper-annotate-as-pure",
            "lang": "js",
            "dir": "packages/babel-helper-annotate-as-pure/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/helper-compilation-targets",
            "lang": "js",
            "dir": "packages/babel-helper-compilation-targets/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@babel/helper-create-class-features-plugin",
            "lang": "js",
            "dir": "packages/babel-helper-create-class-features-plugin/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/helper-create-regexp-features-plugin",
            "lang": "js",
            "dir": "packages/babel-helper-create-regexp-features-plugin/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/helper-module-imports",
            "lang": "js",
            "dir": "packages/babel-helper-module-imports/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/helper-optimise-call-expression",
            "lang": "js",
            "dir": "packages/babel-helper-optimise-call-expression/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/helper-transform-fixture-test-runner",
            "lang": "js",
            "dir": "packages/babel-helper-transform-fixture-test-runner/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/helper-validator-identifier",
            "lang": "js",
            "dir": "packages/babel-helper-validator-identifier/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@babel/helper-validator-option",
            "lang": "js",
            "dir": "packages/babel-helper-validator-option/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@babel/helpers",
            "lang": "js",
            "dir": "packages/babel-helpers/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/highlight",
            "lang": "js",
            "dir": "packages/babel-highlight/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/node",
            "lang": "js",
            "dir": "packages/babel-node/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/parser",
            "lang": "js",
            "dir": "packages/babel-parser/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression",
            "lang": "js",
            "dir": "packages/babel-plugin-bugfix-safari-id-destructuring-collision-in-function-expression/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining",
            "lang": "js",
            "dir": "packages/babel-plugin-bugfix-v8-spread-parameters-in-optional-chaining/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-external-helpers",
            "lang": "js",
            "dir": "packages/babel-plugin-external-helpers/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-proposal-async-do-expressions",
            "lang": "js",
            "dir": "packages/babel-plugin-proposal-async-do-expressions/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-proposal-async-generator-functions",
            "lang": "js",
            "dir": "packages/babel-plugin-proposal-async-generator-functions/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-proposal-class-properties",
            "lang": "js",
            "dir": "packages/babel-plugin-proposal-class-properties/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-proposal-class-static-block",
            "lang": "js",
            "dir": "packages/babel-plugin-proposal-class-static-block/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@babel/plugin-proposal-decorators",
            "lang": "js",
            "dir": "packages/babel-plugin-proposal-decorators/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-proposal-do-expressions",
            "lang": "js",
            "dir": "packages/babel-plugin-proposal-do-expressions/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-proposal-dynamic-import",
            "lang": "js",
            "dir": "packages/babel-plugin-proposal-dynamic-import/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-proposal-export-default-from",
            "lang": "js",
            "dir": "packages/babel-plugin-proposal-export-default-from/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-proposal-export-namespace-from",
            "lang": "js",
            "dir": "packages/babel-plugin-proposal-export-namespace-from/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-proposal-function-bind",
            "lang": "js",
            "dir": "packages/babel-plugin-proposal-function-bind/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-proposal-function-sent",
            "lang": "js",
            "dir": "packages/babel-plugin-proposal-function-sent/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-proposal-json-strings",
            "lang": "js",
            "dir": "packages/babel-plugin-proposal-json-strings/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-proposal-logical-assignment-operators",
            "lang": "js",
            "dir": "packages/babel-plugin-proposal-logical-assignment-operators/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-proposal-nullish-coalescing-operator",
            "lang": "js",
            "dir": "packages/babel-plugin-proposal-nullish-coalescing-operator/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-proposal-numeric-separator",
            "lang": "js",
            "dir": "packages/babel-plugin-proposal-numeric-separator/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-proposal-object-rest-spread",
            "lang": "js",
            "dir": "packages/babel-plugin-proposal-object-rest-spread/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-proposal-optional-catch-binding",
            "lang": "js",
            "dir": "packages/babel-plugin-proposal-optional-catch-binding/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-proposal-optional-chaining",
            "lang": "js",
            "dir": "packages/babel-plugin-proposal-optional-chaining/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-proposal-partial-application",
            "lang": "js",
            "dir": "packages/babel-plugin-proposal-partial-application/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-proposal-pipeline-operator",
            "lang": "js",
            "dir": "packages/babel-plugin-proposal-pipeline-operator/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-proposal-private-methods",
            "lang": "js",
            "dir": "packages/babel-plugin-proposal-private-methods/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-proposal-private-property-in-object",
            "lang": "js",
            "dir": "packages/babel-plugin-proposal-private-property-in-object/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-proposal-record-and-tuple",
            "lang": "js",
            "dir": "packages/babel-plugin-proposal-record-and-tuple/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-proposal-throw-expressions",
            "lang": "js",
            "dir": "packages/babel-plugin-proposal-throw-expressions/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-proposal-unicode-property-regex",
            "lang": "js",
            "dir": "packages/babel-plugin-proposal-unicode-property-regex/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-syntax-decorators",
            "lang": "js",
            "dir": "packages/babel-plugin-syntax-decorators/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-syntax-typescript",
            "lang": "js",
            "dir": "packages/babel-plugin-syntax-typescript/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-transform-arrow-functions",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-arrow-functions/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-transform-async-to-generator",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-async-to-generator/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-transform-block-scoped-functions",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-block-scoped-functions/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-transform-block-scoping",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-block-scoping/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-transform-classes",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-classes/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-transform-computed-properties",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-computed-properties/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-transform-destructuring",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-destructuring/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-transform-dotall-regex",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-dotall-regex/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-transform-duplicate-keys",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-duplicate-keys/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-transform-exponentiation-operator",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-exponentiation-operator/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-transform-flow-comments",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-flow-comments/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-transform-flow-strip-types",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-flow-strip-types/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-transform-for-of",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-for-of/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-transform-function-name",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-function-name/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-transform-instanceof",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-instanceof/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-transform-jscript",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-jscript/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-transform-member-expression-literals",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-member-expression-literals/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-transform-modules-amd",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-modules-amd/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-transform-modules-commonjs",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-modules-commonjs/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-transform-modules-systemjs",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-modules-systemjs/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-transform-modules-umd",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-modules-umd/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-transform-named-capturing-groups-regex",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-named-capturing-groups-regex/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-transform-new-target",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-new-target/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-transform-object-super",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-object-super/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-transform-parameters",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-parameters/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-transform-property-literals",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-property-literals/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-transform-property-mutators",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-property-mutators/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-transform-proto-to-assign",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-proto-to-assign/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-transform-react-constant-elements",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-react-constant-elements/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-transform-react-display-name",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-react-display-name/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-transform-react-inline-elements",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-react-inline-elements/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-transform-react-jsx-compat",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-react-jsx-compat/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-transform-react-jsx-development",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-react-jsx-development/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-transform-react-jsx-self",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-react-jsx-self/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-transform-react-jsx-source",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-react-jsx-source/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-transform-react-jsx",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-react-jsx/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-transform-react-pure-annotations",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-react-pure-annotations/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-transform-regenerator",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-regenerator/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-transform-reserved-words",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-reserved-words/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-transform-runtime",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-runtime/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-transform-shorthand-properties",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-shorthand-properties/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-transform-spread",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-spread/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-transform-sticky-regex",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-sticky-regex/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-transform-strict-mode",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-strict-mode/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-transform-template-literals",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-template-literals/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-transform-typeof-symbol",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-typeof-symbol/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@babel/plugin-transform-typescript",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-typescript/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-transform-unicode-escapes",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-unicode-escapes/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/plugin-transform-unicode-regex",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-unicode-regex/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/preset-env",
            "lang": "js",
            "dir": "packages/babel-preset-env/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@babel/preset-flow",
            "lang": "js",
            "dir": "packages/babel-preset-flow/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@babel/preset-react",
            "lang": "js",
            "dir": "packages/babel-preset-react/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/preset-typescript",
            "lang": "js",
            "dir": "packages/babel-preset-typescript/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/register",
            "lang": "js",
            "dir": "packages/babel-register/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/runtime-corejs3",
            "lang": "js",
            "dir": "packages/babel-runtime-corejs3/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@babel/standalone",
            "lang": "js",
            "dir": "packages/babel-standalone/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@babel/template",
            "lang": "js",
            "dir": "packages/babel-template/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/traverse",
            "lang": "js",
            "dir": "packages/babel-traverse/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@babel/types",
            "lang": "js",
            "dir": "packages/babel-types/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "lang": "js",
            "dir": "scripts/integration-tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        }
    ],
    "tests": [
        {
            "name": "should warn the user if chmod fails",
            "suites": [
                "util.js",
                "chmod"
            ],
            "updatePoint": {
                "line": 263,
                "column": 43,
                "index": 9023
            },
            "line": 263,
            "code": "    it(\"should warn the user if chmod fails\", () => {\n      const spyConsoleWarn = jest.spyOn(console, \"warn\").mockImplementation(() => {});\n\n      // The first argument should be a string.\n      // The real reason chmod will fail is due to wrong permissions,\n      // but this is enough to cause a failure.\n      chmod(100, \"file.js\");\n      expect(spyConsoleWarn).toHaveBeenCalledTimes(1);\n      expect(spyConsoleWarn).toHaveBeenCalledWith(\"Cannot change permissions of file.js\");\n      spyConsoleWarn.mockRestore();\n    });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-cli/test"
        },
        {
            "name": "basic usage",
            "suites": [
                "@babel/code-frame"
            ],
            "updatePoint": {
                "line": 27,
                "column": 19,
                "index": 929
            },
            "line": 27,
            "code": "  test(\"basic usage\", function () {\n    const rawLines = [\"class Foo {\", \"  constructor()\", \"};\"].join(\"\\n\");\n    expect(codeFrame(rawLines, 2, 16)).toEqual([\"  1 | class Foo {\", \"> 2 |   constructor()\", \"    |                ^\", \"  3 | };\"].join(\"\\n\"));\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-code-frame/test"
        },
        {
            "name": "optional column number",
            "suites": [
                "@babel/code-frame"
            ],
            "updatePoint": {
                "line": 31,
                "column": 30,
                "index": 1201
            },
            "line": 31,
            "code": "  test(\"optional column number\", function () {\n    const rawLines = [\"class Foo {\", \"  constructor()\", \"};\"].join(\"\\n\");\n    expect(codeFrame(rawLines, 2, null)).toEqual([\"  1 | class Foo {\", \"> 2 |   constructor()\", \"  3 | };\"].join(\"\\n\"));\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-code-frame/test"
        },
        {
            "name": "maximum context lines and padding",
            "suites": [
                "@babel/code-frame"
            ],
            "updatePoint": {
                "line": 35,
                "column": 41,
                "index": 1460
            },
            "line": 35,
            "code": "  test(\"maximum context lines and padding\", function () {\n    const rawLines = [\"/**\", \" * Sums two numbers.\", \" *\", \" * @param a Number\", \" * @param b Number\", \" * @returns Number\", \" */\", \"\", \"function sum(a, b) {\", \"  return a + b\", \"}\"].join(\"\\n\");\n    expect(codeFrame(rawLines, 7, 2)).toEqual([\"   5 |  * @param b Number\", \"   6 |  * @returns Number\", \">  7 |  */\", \"     |  ^\", \"   8 |\", \"   9 | function sum(a, b) {\", \"  10 |   return a + b\"].join(\"\\n\"));\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-code-frame/test"
        },
        {
            "name": "no unnecessary padding due to one-off errors",
            "suites": [
                "@babel/code-frame"
            ],
            "updatePoint": {
                "line": 39,
                "column": 52,
                "index": 1941
            },
            "line": 39,
            "code": "  test(\"no unnecessary padding due to one-off errors\", function () {\n    const rawLines = [\"/**\", \" * Sums two numbers.\", \" *\", \" * @param a Number\", \" * @param b Number\", \" * @returns Number\", \" */\", \"\", \"function sum(a, b) {\", \"  return a + b\", \"}\"].join(\"\\n\");\n    expect(codeFrame(rawLines, 6, 2)).toEqual([\"  4 |  * @param a Number\", \"  5 |  * @param b Number\", \"> 6 |  * @returns Number\", \"    |  ^\", \"  7 |  */\", \"  8 |\", \"  9 | function sum(a, b) {\"].join(\"\\n\"));\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-code-frame/test"
        },
        {
            "name": "tabs",
            "suites": [
                "@babel/code-frame"
            ],
            "updatePoint": {
                "line": 43,
                "column": 12,
                "index": 2379
            },
            "line": 43,
            "code": "  test(\"tabs\", function () {\n    const rawLines = [\"\\tclass Foo {\", \"\\t  \\t\\t    constructor\\t(\\t)\", \"\\t};\"].join(\"\\n\");\n    expect(codeFrame(rawLines, 2, 25)).toEqual([\"  1 | \\tclass Foo {\", \"> 2 | \\t  \\t\\t    constructor\\t(\\t)\", \"    | \\t  \\t\\t               \\t \\t ^\", \"  3 | \\t};\"].join(\"\\n\"));\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-code-frame/test"
        },
        {
            "name": "opts.highlightCode",
            "suites": [
                "@babel/code-frame",
                "when colors are supported"
            ],
            "updatePoint": {
                "line": 49,
                "column": 28,
                "index": 2775
            },
            "line": 49,
            "code": "    test(\"opts.highlightCode\", function () {\n      const rawLines = \"console.log('babel')\";\n      const result = codeFrame(rawLines, 1, 9, {\n        highlightCode: true\n      });\n      const stripped = stripAnsi(result);\n      expect(result.length).toBeGreaterThan(stripped.length);\n      expect(stripped).toEqual([\"> 1 | console.log('babel')\", \"    |         ^\"].join(\"\\n\"));\n    });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-code-frame/test"
        },
        {
            "name": "opts.highlightCode with multiple columns and lines",
            "suites": [
                "@babel/code-frame",
                "when colors are supported"
            ],
            "updatePoint": {
                "line": 58,
                "column": 60,
                "index": 3192
            },
            "line": 58,
            "code": "    test(\"opts.highlightCode with multiple columns and lines\", function () {\n      // prettier-ignore\n      const rawLines = [\"function a(b, c) {\", \"  return b + c;\", \"}\"].join(\"\\n\");\n      const result = codeFrameColumns(rawLines, {\n        start: {\n          line: 1,\n          column: 1\n        },\n        end: {\n          line: 3,\n          column: 1\n        }\n      }, {\n        highlightCode: true,\n        message: \"Message about things\"\n      });\n      const stripped = stripAnsi(result);\n      expect(result.length).toBeGreaterThan(stripped.length);\n      expect(stripped).toEqual(\n      // prettier-ignore\n      [\"> 1 | function a(b, c) {\", \"    | ^^^^^^^^^^^^^^^^^^\", \"> 2 |   return b + c;\", \"    | ^^^^^^^^^^^^^^^\", \"> 3 | }\", \"    | ^ Message about things\"].join('\\n'));\n    });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-code-frame/test"
        },
        {
            "name": "opts.forceColor",
            "suites": [
                "@babel/code-frame",
                "when colors are supported"
            ],
            "updatePoint": {
                "line": 80,
                "column": 25,
                "index": 3950
            },
            "line": 80,
            "code": "    test(\"opts.forceColor\", function () {\n      const marker = chalk.red.bold;\n      const gutter = chalk.grey;\n      const rawLines = [\"\", \"\", \"\", \"\"].join(\"\\n\");\n      expect(codeFrame(rawLines, 3, null, {\n        linesAbove: 1,\n        linesBelow: 1,\n        forceColor: true\n      })).toEqual(chalk.reset([\" \" + gutter(\" 2 |\"), marker(\">\") + gutter(\" 3 |\"), \" \" + gutter(\" 4 |\")].join(\"\\n\")));\n    });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-code-frame/test"
        },
        {
            "name": "jsx",
            "suites": [
                "@babel/code-frame",
                "when colors are supported"
            ],
            "updatePoint": {
                "line": 90,
                "column": 13,
                "index": 4344
            },
            "line": 90,
            "code": "    test(\"jsx\", function () {\n      const gutter = chalk.grey;\n      const yellow = chalk.yellow;\n      const rawLines = [\"<div />\"].join(\"\\n\");\n      expect(JSON.stringify(codeFrame(rawLines, 0, null, {\n        linesAbove: 1,\n        linesBelow: 1,\n        forceColor: true\n      }))).toEqual(JSON.stringify(chalk.reset(\" \" + gutter(\" 1 |\") + \" \" + yellow(\"<\") + yellow(\"div\") + \" \" + yellow(\"/\") + yellow(\">\"))));\n    });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-code-frame/test"
        },
        {
            "name": "opts.linesAbove",
            "suites": [
                "@babel/code-frame",
                "when colors are supported"
            ],
            "updatePoint": {
                "line": 101,
                "column": 23,
                "index": 4784
            },
            "line": 101,
            "code": "  test(\"opts.linesAbove\", function () {\n    const rawLines = [\"/**\", \" * Sums two numbers.\", \" *\", \" * @param a Number\", \" * @param b Number\", \" * @returns Number\", \" */\", \"\", \"function sum(a, b) {\", \"  return a + b\", \"}\"].join(\"\\n\");\n    expect(codeFrame(rawLines, 7, 2, {\n      linesAbove: 1\n    })).toEqual([\"   6 |  * @returns Number\", \">  7 |  */\", \"     |  ^\", \"   8 |\", \"   9 | function sum(a, b) {\", \"  10 |   return a + b\"].join(\"\\n\"));\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-code-frame/test"
        },
        {
            "name": "opts.linesBelow",
            "suites": [
                "@babel/code-frame",
                "when colors are supported"
            ],
            "updatePoint": {
                "line": 107,
                "column": 23,
                "index": 5236
            },
            "line": 107,
            "code": "  test(\"opts.linesBelow\", function () {\n    const rawLines = [\"/**\", \" * Sums two numbers.\", \" *\", \" * @param a Number\", \" * @param b Number\", \" * @returns Number\", \" */\", \"\", \"function sum(a, b) {\", \"  return a + b\", \"}\"].join(\"\\n\");\n    expect(codeFrame(rawLines, 7, 2, {\n      linesBelow: 1\n    })).toEqual([\"  5 |  * @param b Number\", \"  6 |  * @returns Number\", \"> 7 |  */\", \"    |  ^\", \"  8 |\"].join(\"\\n\"));\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-code-frame/test"
        },
        {
            "name": "opts.linesAbove and opts.linesBelow",
            "suites": [
                "@babel/code-frame",
                "when colors are supported"
            ],
            "updatePoint": {
                "line": 113,
                "column": 43,
                "index": 5676
            },
            "line": 113,
            "code": "  test(\"opts.linesAbove and opts.linesBelow\", function () {\n    const rawLines = [\"/**\", \" * Sums two numbers.\", \" *\", \" * @param a Number\", \" * @param b Number\", \" * @returns Number\", \" */\", \"\", \"function sum(a, b) {\", \"  return a + b\", \"}\"].join(\"\\n\");\n    expect(codeFrame(rawLines, 7, 2, {\n      linesAbove: 1,\n      linesBelow: 1\n    })).toEqual([\"  6 |  * @returns Number\", \"> 7 |  */\", \"    |  ^\", \"  8 |\"].join(\"\\n\"));\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-code-frame/test"
        },
        {
            "name": "opts.linesAbove no lines above",
            "suites": [
                "@babel/code-frame",
                "when colors are supported"
            ],
            "updatePoint": {
                "line": 120,
                "column": 38,
                "index": 6104
            },
            "line": 120,
            "code": "  test(\"opts.linesAbove no lines above\", function () {\n    const rawLines = [\"class Foo {\", \"  constructor() {\", \"    console.log(arguments);\", \"  }\", \"};\"].join(\"\\n\");\n    expect(codeFrameColumns(rawLines, {\n      start: {\n        line: 2\n      }\n    }, {\n      linesAbove: 0\n    })).toEqual([\"> 2 |   constructor() {\", \"  3 |     console.log(arguments);\", \"  4 |   }\", \"  5 | };\"].join(\"\\n\"));\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-code-frame/test"
        },
        {
            "name": "opts.linesBelow no lines below",
            "suites": [
                "@babel/code-frame",
                "when colors are supported"
            ],
            "updatePoint": {
                "line": 130,
                "column": 38,
                "index": 6506
            },
            "line": 130,
            "code": "  test(\"opts.linesBelow no lines below\", function () {\n    const rawLines = [\"class Foo {\", \"  constructor() {\", \"    console.log(arguments);\", \"  }\", \"};\"].join(\"\\n\");\n    expect(codeFrameColumns(rawLines, {\n      start: {\n        line: 2\n      }\n    }, {\n      linesBelow: 0\n    })).toEqual([\"  1 | class Foo {\", \"> 2 |   constructor() {\"].join(\"\\n\"));\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-code-frame/test"
        },
        {
            "name": "opts.linesBelow single line",
            "suites": [
                "@babel/code-frame",
                "when colors are supported"
            ],
            "updatePoint": {
                "line": 140,
                "column": 35,
                "index": 6864
            },
            "line": 140,
            "code": "  test(\"opts.linesBelow single line\", function () {\n    const rawLines = [\"class Foo {\", \"  constructor() {\", \"    console.log(arguments);\", \"  }\", \"};\"].join(\"\\n\");\n    expect(codeFrameColumns(rawLines, {\n      start: {\n        line: 2\n      }\n    }, {\n      linesAbove: 0,\n      linesBelow: 0\n    })).toEqual([\"> 2 |   constructor() {\"].join(\"\\n\"));\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-code-frame/test"
        },
        {
            "name": "basic usage, new API",
            "suites": [
                "@babel/code-frame",
                "when colors are supported"
            ],
            "updatePoint": {
                "line": 151,
                "column": 28,
                "index": 7215
            },
            "line": 151,
            "code": "  test(\"basic usage, new API\", function () {\n    const rawLines = [\"class Foo {\", \"  constructor()\", \"};\"].join(\"\\n\");\n    expect(codeFrameColumns(rawLines, {\n      start: {\n        line: 2,\n        column: 16\n      }\n    })).toEqual([\"  1 | class Foo {\", \"> 2 |   constructor()\", \"    |                ^\", \"  3 | };\"].join(\"\\n\"));\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-code-frame/test"
        },
        {
            "name": "mark multiple columns",
            "suites": [
                "@babel/code-frame",
                "when colors are supported"
            ],
            "updatePoint": {
                "line": 160,
                "column": 29,
                "index": 7554
            },
            "line": 160,
            "code": "  test(\"mark multiple columns\", function () {\n    const rawLines = [\"class Foo {\", \"  constructor()\", \"};\"].join(\"\\n\");\n    expect(codeFrameColumns(rawLines, {\n      start: {\n        line: 2,\n        column: 3\n      },\n      end: {\n        line: 2,\n        column: 16\n      }\n    })).toEqual([\"  1 | class Foo {\", \"> 2 |   constructor()\", \"    |   ^^^^^^^^^^^^^\", \"  3 | };\"].join(\"\\n\"));\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-code-frame/test"
        },
        {
            "name": "mark multiple columns across lines",
            "suites": [
                "@babel/code-frame",
                "when colors are supported"
            ],
            "updatePoint": {
                "line": 173,
                "column": 42,
                "index": 7962
            },
            "line": 173,
            "code": "  test(\"mark multiple columns across lines\", function () {\n    const rawLines = [\"class Foo {\", \"  constructor() {\", \"  }\", \"};\"].join(\"\\n\");\n    expect(codeFrameColumns(rawLines, {\n      start: {\n        line: 2,\n        column: 17\n      },\n      end: {\n        line: 3,\n        column: 3\n      }\n    })).toEqual([\"  1 | class Foo {\", \"> 2 |   constructor() {\", \"    |                 ^\", \"> 3 |   }\", \"    | ^^^\", \"  4 | };\"].join(\"\\n\"));\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-code-frame/test"
        },
        {
            "name": "mark multiple columns across multiple lines",
            "suites": [
                "@babel/code-frame",
                "when colors are supported"
            ],
            "updatePoint": {
                "line": 186,
                "column": 51,
                "index": 8418
            },
            "line": 186,
            "code": "  test(\"mark multiple columns across multiple lines\", function () {\n    const rawLines = [\"class Foo {\", \"  constructor() {\", \"    console.log(arguments);\", \"  }\", \"};\"].join(\"\\n\");\n    expect(codeFrameColumns(rawLines, {\n      start: {\n        line: 2,\n        column: 17\n      },\n      end: {\n        line: 4,\n        column: 3\n      }\n    })).toEqual([\"  1 | class Foo {\", \"> 2 |   constructor() {\", \"    |                 ^\", \"> 3 |     console.log(arguments);\", \"    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\", \"> 4 |   }\", \"    | ^^^\", \"  5 | };\"].join(\"\\n\"));\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-code-frame/test"
        },
        {
            "name": "mark across multiple lines without columns",
            "suites": [
                "@babel/code-frame",
                "when colors are supported"
            ],
            "updatePoint": {
                "line": 199,
                "column": 50,
                "index": 8978
            },
            "line": 199,
            "code": "  test(\"mark across multiple lines without columns\", function () {\n    const rawLines = [\"class Foo {\", \"  constructor() {\", \"    console.log(arguments);\", \"  }\", \"};\"].join(\"\\n\");\n    expect(codeFrameColumns(rawLines, {\n      start: {\n        line: 2\n      },\n      end: {\n        line: 4\n      }\n    })).toEqual([\"  1 | class Foo {\", \"> 2 |   constructor() {\", \"> 3 |     console.log(arguments);\", \"> 4 |   }\", \"  5 | };\"].join(\"\\n\"));\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-code-frame/test"
        },
        {
            "name": "opts.message",
            "suites": [
                "@babel/code-frame",
                "when colors are supported"
            ],
            "updatePoint": {
                "line": 210,
                "column": 20,
                "index": 9392
            },
            "line": 210,
            "code": "  test(\"opts.message\", function () {\n    const rawLines = [\"class Foo {\", \"  constructor()\", \"};\"].join(\"\\n\");\n    expect(codeFrameColumns(rawLines, {\n      start: {\n        line: 2,\n        column: 16\n      }\n    }, {\n      message: \"Missing {\"\n    })).toEqual([\"  1 | class Foo {\", \"> 2 |   constructor()\", \"    |                ^ Missing {\", \"  3 | };\"].join(\"\\n\"));\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-code-frame/test"
        },
        {
            "name": "opts.message without column",
            "suites": [
                "@babel/code-frame",
                "when colors are supported"
            ],
            "updatePoint": {
                "line": 221,
                "column": 35,
                "index": 9783
            },
            "line": 221,
            "code": "  test(\"opts.message without column\", function () {\n    const rawLines = [\"class Foo {\", \"  constructor()\", \"};\"].join(\"\\n\");\n    expect(codeFrameColumns(rawLines, {\n      start: {\n        line: 2\n      }\n    }, {\n      message: \"Missing {\"\n    })).toEqual([\"  Missing {\", \"  1 | class Foo {\", \"> 2 |   constructor()\", \"  3 | };\"].join(\"\\n\"));\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-code-frame/test"
        },
        {
            "name": "opts.message with multiple lines",
            "suites": [
                "@babel/code-frame",
                "when colors are supported"
            ],
            "updatePoint": {
                "line": 231,
                "column": 40,
                "index": 10138
            },
            "line": 231,
            "code": "  test(\"opts.message with multiple lines\", function () {\n    const rawLines = [\"class Foo {\", \"  constructor() {\", \"    console.log(arguments);\", \"  }\", \"};\"].join(\"\\n\");\n    expect(codeFrameColumns(rawLines, {\n      start: {\n        line: 2,\n        column: 17\n      },\n      end: {\n        line: 4,\n        column: 3\n      }\n    }, {\n      message: \"something about the constructor body\"\n    })).toEqual([\"  1 | class Foo {\", \"> 2 |   constructor() {\", \"    |                 ^\", \"> 3 |     console.log(arguments);\", \"    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\", \"> 4 |   }\", \"    | ^^^ something about the constructor body\", \"  5 | };\"].join(\"\\n\"));\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-code-frame/test"
        },
        {
            "name": "opts.message with multiple lines without columns",
            "suites": [
                "@babel/code-frame",
                "when colors are supported"
            ],
            "updatePoint": {
                "line": 246,
                "column": 56,
                "index": 10804
            },
            "line": 246,
            "code": "  test(\"opts.message with multiple lines without columns\", function () {\n    const rawLines = [\"class Foo {\", \"  constructor() {\", \"    console.log(arguments);\", \"  }\", \"};\"].join(\"\\n\");\n    expect(codeFrameColumns(rawLines, {\n      start: {\n        line: 2\n      },\n      end: {\n        line: 4\n      }\n    }, {\n      message: \"something about the constructor body\"\n    })).toEqual([\"  something about the constructor body\", \"  1 | class Foo {\", \"> 2 |   constructor() {\", \"> 3 |     console.log(arguments);\", \"> 4 |   }\", \"  5 | };\"].join(\"\\n\"));\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-code-frame/test"
        },
        {
            "name": "options",
            "suites": [
                "parser and generator options"
            ],
            "updatePoint": {
                "line": 111,
                "column": 13,
                "index": 2606
            },
            "line": 111,
            "code": "  it(\"options\", function () {\n    const string = \"original;\";\n    expect(newTransform(string).ast).toEqual(transformSync(string, {\n      ast: true\n    }).ast);\n    expect(newTransform(string).code).toBe(string);\n  });",
            "file": "api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "experimental syntax",
            "suites": [
                "parser and generator options"
            ],
            "updatePoint": {
                "line": 118,
                "column": 25,
                "index": 2836
            },
            "line": 118,
            "code": "  it(\"experimental syntax\", function () {\n    const experimental = \"var a: number = 1;\";\n    expect(newTransform(experimental).ast).toEqual(transformSync(experimental, {\n      ast: true,\n      parserOpts: {\n        plugins: [\"flow\"]\n      }\n    }).ast);\n    expect(newTransform(experimental).code).toBe(experimental);\n    function newTransformWithPlugins(string) {\n      return transformSync(string, {\n        ast: true,\n        plugins: [pluginSyntaxFlow],\n        parserOpts: {\n          parser: recast.parse\n        },\n        generatorOpts: {\n          generator: recast.print\n        }\n      });\n    }\n    expect(newTransformWithPlugins(experimental).ast).toEqual(transformSync(experimental, {\n      ast: true,\n      parserOpts: {\n        plugins: [\"flow\"]\n      }\n    }).ast);\n    expect(newTransformWithPlugins(experimental).code).toBe(experimental);\n  });",
            "file": "api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "other options",
            "suites": [
                "parser and generator options"
            ],
            "updatePoint": {
                "line": 147,
                "column": 19,
                "index": 3694
            },
            "line": 147,
            "code": "  it(\"other options\", function () {\n    const experimental = \"if (true) {\\n  import a from 'a';\\n}\";\n    expect(newTransform(experimental).ast).not.toBe(transformSync(experimental, {\n      ast: true,\n      parserOpts: {\n        allowImportExportEverywhere: true\n      }\n    }).ast);\n    expect(newTransform(experimental).code).toBe(experimental);\n  });",
            "file": "api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "exposes the resolvePlugin method",
            "suites": [
                "api"
            ],
            "updatePoint": {
                "line": 159,
                "column": 38,
                "index": 4100
            },
            "line": 159,
            "code": "  it(\"exposes the resolvePlugin method\", function () {\n    expect(() => babel.resolvePlugin(\"nonexistent-plugin\")).toThrow(/Cannot (?:find|resolve) module 'babel-plugin-nonexistent-plugin'/);\n  });",
            "file": "api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "exposes the resolvePreset method",
            "suites": [
                "api"
            ],
            "updatePoint": {
                "line": 162,
                "column": 38,
                "index": 4298
            },
            "line": 162,
            "code": "  it(\"exposes the resolvePreset method\", function () {\n    expect(() => babel.resolvePreset(\"nonexistent-preset\")).toThrow(/Cannot (?:find|resolve) module 'babel-preset-nonexistent-preset'/);\n  });",
            "file": "api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "exposes types",
            "suites": [
                "api"
            ],
            "updatePoint": {
                "line": 165,
                "column": 19,
                "index": 4477
            },
            "line": 165,
            "code": "  it(\"exposes types\", function () {\n    expect(babel.types).toBeDefined();\n  });",
            "file": "api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "exposes the parser's token types",
            "suites": [
                "api"
            ],
            "updatePoint": {
                "line": 168,
                "column": 38,
                "index": 4577
            },
            "line": 168,
            "code": "  it(\"exposes the parser's token types\", function () {\n    expect(babel.tokTypes).toBeDefined();\n  });",
            "file": "api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "transformFile",
            "suites": [
                "api"
            ],
            "updatePoint": {
                "line": 180,
                "column": 19,
                "index": 5346
            },
            "line": 180,
            "code": "  it(\"transformFile\", function () {\n    const options = {\n      babelrc: false\n    };\n    Object.freeze(options);\n    return new Promise((resolve, reject) => {\n      transformFile(cwd + \"/fixtures/api/file.js\", options, function (err, res) {\n        if (err) return reject(err);\n        expect(res.code).toBe(\"foo();\");\n        // keep user options untouched\n        expect(options).toEqual({\n          babelrc: false\n        });\n        resolve();\n      });\n    });\n  });",
            "file": "api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "transformFileAsync",
            "suites": [
                "api"
            ],
            "updatePoint": {
                "line": 197,
                "column": 24,
                "index": 5824
            },
            "line": 197,
            "code": "  it(\"transformFileAsync\", async function () {\n    const options = {\n      babelrc: false\n    };\n    Object.freeze(options);\n    const res = await transformFileAsync(cwd + \"/fixtures/api/file.js\", options);\n    expect(res.code).toBe(\"foo();\");\n    // keep user options untouched\n    expect(options).toEqual({\n      babelrc: false\n    });\n  });",
            "file": "api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "transformFile throws on undefined callback",
            "suites": [
                "api"
            ],
            "updatePoint": {
                "line": 209,
                "column": 48,
                "index": 6192
            },
            "line": 209,
            "code": "  it(\"transformFile throws on undefined callback\", () => {\n    const options = {\n      babelrc: false\n    };\n    expect(() => transformFile(cwd + \"/fixtures/api/file.js\", options)).toThrowErrorMatchingInlineSnapshot(`\"Asynchronous function called without callback\"`);\n  });",
            "file": "api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "transformFileSync",
            "suites": [
                "api"
            ],
            "updatePoint": {
                "line": 215,
                "column": 23,
                "index": 6441
            },
            "line": 215,
            "code": "  it(\"transformFileSync\", function () {\n    const options = {\n      babelrc: false\n    };\n    Object.freeze(options);\n    expect(transformFileSync(cwd + \"/fixtures/api/file.js\", options).code).toBe(\"foo();\");\n    expect(options).toEqual({\n      babelrc: false\n    });\n  });",
            "file": "api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "transformFromAst should generate same code with different cloneInputAst",
            "suites": [
                "api"
            ],
            "updatePoint": {
                "line": 230,
                "column": 77,
                "index": 7204
            },
            "line": 230,
            "code": "  it(\"transformFromAst should generate same code with different cloneInputAst\", function () {\n    const program = `//test1\n    /*test2*/var/*test3*/ a = 1/*test4*/;//test5\n    //test6\n    var b;\n    `;\n    const node = parseSync(program);\n    const {\n      code\n    } = transformFromAstSync(node, program, {\n      plugins: [function () {\n        return {\n          visitor: {\n            Identifier: function (path) {\n              path.node.name = \"replaced\";\n            }\n          }\n        };\n      }]\n    });\n    const {\n      code: code2\n    } = transformFromAstSync(node, program, {\n      cloneInputAst: false,\n      plugins: [function () {\n        return {\n          visitor: {\n            Identifier: function (path) {\n              path.node.name = \"replaced\";\n            }\n          }\n        };\n      }]\n    });\n    expect(code).toBe(code2);\n  });",
            "file": "api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "transformFromAstSync should not cause infinite recursion with circular objects",
            "suites": [
                "api"
            ],
            "updatePoint": {
                "line": 266,
                "column": 84,
                "index": 8073
            },
            "line": 266,
            "code": "  it(\"transformFromAstSync should not cause infinite recursion with circular objects\", () => {\n    const program = \"const identifier = 1\";\n    const node = parseSync(program);\n    node.program.body[0].extra = {\n      parent: node.program\n    };\n    expect(transformFromAstSync(node, program, {}).code).toBe(\"const identifier = 1;\");\n  });",
            "file": "api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "transformFromAst should not mutate the AST",
            "suites": [
                "api"
            ],
            "updatePoint": {
                "line": 274,
                "column": 48,
                "index": 8376
            },
            "line": 274,
            "code": "  it(\"transformFromAst should not mutate the AST\", function () {\n    const program = \"const identifier = 1\";\n    const node = parseSync(program);\n    const {\n      code\n    } = transformFromAstSync(node, program, {\n      plugins: [function () {\n        return {\n          visitor: {\n            Identifier: function (path) {\n              path.node.name = \"replaced\";\n            }\n          }\n        };\n      }]\n    });\n    expect(code).toBe(\"const replaced = 1;\");\n    expect(node.program.body[0].declarations[0].id.name).toBe(\"identifier\", \"original ast should not have been mutated\");\n  });",
            "file": "api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "transformFromAstSync should mutate the AST when cloneInputAst is false",
            "suites": [
                "api"
            ],
            "updatePoint": {
                "line": 293,
                "column": 76,
                "index": 9000
            },
            "line": 293,
            "code": "  it(\"transformFromAstSync should mutate the AST when cloneInputAst is false\", function () {\n    const program = \"const identifier = 1\";\n    const node = parseSync(program);\n    const {\n      code\n    } = transformFromAstSync(node, program, {\n      cloneInputAst: false,\n      plugins: [function () {\n        return {\n          visitor: {\n            Identifier: function (path) {\n              path.node.name = \"replaced\";\n            }\n          }\n        };\n      }]\n    });\n    expect(code).toBe(\"const replaced = 1;\");\n    expect(node.program.body[0].declarations[0].id.name).toBe(\"replaced\", \"original ast should have been mutated\");\n  });",
            "file": "api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "options throw on falsy true",
            "suites": [
                "api"
            ],
            "updatePoint": {
                "line": 313,
                "column": 33,
                "index": 9603
            },
            "line": 313,
            "code": "  it(\"options throw on falsy true\", function () {\n    return expect(function () {\n      transformSync(\"\", {\n        plugins: [pluginSyntaxJSX, false]\n      });\n    }).toThrow(/.plugins\\[1\\] must be a string, object, function/);\n  });",
            "file": "api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "options merge backwards",
            "suites": [
                "api"
            ],
            "updatePoint": {
                "line": 320,
                "column": 29,
                "index": 9833
            },
            "line": 320,
            "code": "  it(\"options merge backwards\", async function () {\n    const result = await transformAsync(\"\", {\n      cwd,\n      presets: [\"@babel/preset-env\"],\n      plugins: [\"@babel/plugin-syntax-jsx\"]\n    });\n    expect(result.options.plugins[0].manipulateOptions.toString()).toEqual(expect.stringContaining(\"jsx\"));\n  });",
            "file": "api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "option wrapPluginVisitorMethod",
            "suites": [
                "api"
            ],
            "updatePoint": {
                "line": 328,
                "column": 36,
                "index": 10153
            },
            "line": 328,
            "code": "  it(\"option wrapPluginVisitorMethod\", function () {\n    let calledRaw = 0;\n    let calledIntercept = 0;\n    transformSync(\"function foo() { bar(foobar); }\", {\n      wrapPluginVisitorMethod: function (pluginAlias, visitorType, callback) {\n        if (pluginAlias !== \"foobar\") {\n          return callback;\n        }\n        expect(visitorType).toBe(\"enter\");\n        return function () {\n          calledIntercept++;\n          return callback.apply(this, arguments);\n        };\n      },\n      plugins: [new Plugin({\n        name: \"foobar\",\n        visitor: {\n          \"Program|Identifier\": function () {\n            calledRaw++;\n          }\n        }\n      })]\n    });\n    expect(calledRaw).toBe(4);\n    expect(calledIntercept).toBe(4);\n  });",
            "file": "api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "pass per preset",
            "suites": [
                "api"
            ],
            "updatePoint": {
                "line": 354,
                "column": 21,
                "index": 10882
            },
            "line": 354,
            "code": "  it(\"pass per preset\", function () {\n    let aliasBaseType = null;\n    function execTest(passPerPreset) {\n      return transformSync(\"type Foo = number; let x = (y): Foo => y;\", {\n        sourceType: \"script\",\n        passPerPreset: passPerPreset,\n        presets: [\n        // First preset with our plugin, \"before\"\n        function () {\n          return {\n            plugins: [new Plugin({\n              visitor: {\n                Function: function (path) {\n                  const alias = path.scope.getProgramParent().path.get(\"body\")[0].node;\n                  if (!babel.types.isTypeAlias(alias)) return;\n\n                  // In case of `passPerPreset` being `false`, the\n                  // alias node is already removed by Flow plugin.\n                  if (!alias) {\n                    return;\n                  }\n\n                  // In case of `passPerPreset` being `true`, the\n                  // alias node should still exist.\n                  aliasBaseType = alias.right.type; // NumberTypeAnnotation\n                }\n              }\n            })]\n          };\n        },\n        // env preset\n        [presetEnv, {\n          targets: {\n            browsers: \"ie 6\"\n          }\n        }],\n        // Third preset for Flow.\n        () => ({\n          plugins: [pluginSyntaxFlow, pluginFlowStripTypes]\n        })]\n      });\n    }\n\n    // 1. passPerPreset: true\n\n    let result = execTest(true);\n    expect(aliasBaseType).toBe(\"NumberTypeAnnotation\");\n    expect(result.code).toBe(\"var x = function x(y) {\\n  return y;\\n};\");\n\n    // 2. passPerPreset: false\n\n    aliasBaseType = null;\n    result = execTest(false);\n    expect(aliasBaseType).toBeNull();\n    expect(result.code).toBe(\"var x = function x(y) {\\n  return y;\\n};\");\n  });",
            "file": "api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "complex plugin and preset ordering",
            "suites": [
                "api"
            ],
            "updatePoint": {
                "line": 410,
                "column": 40,
                "index": 12658
            },
            "line": 410,
            "code": "  it(\"complex plugin and preset ordering\", function () {\n    function pushPlugin(str) {\n      return {\n        visitor: {\n          Program(path) {\n            path.pushContainer(\"body\", babel.types.expressionStatement(babel.types.identifier(str)));\n          }\n        }\n      };\n    }\n    function pushPreset(str) {\n      return {\n        plugins: [pushPlugin(str)]\n      };\n    }\n    const oldEnv = process.env.BABEL_ENV;\n    process.env.BABEL_ENV = \"development\";\n    const result = transformSync(\"\", {\n      cwd: path.join(cwd, \"fixtures\", \"config\", \"complex-plugin-config\"),\n      filename: path.join(cwd, \"fixtures\", \"config\", \"complex-plugin-config\", \"file.js\"),\n      presets: [pushPreset(\"argone\"), pushPreset(\"argtwo\")],\n      env: {\n        development: {\n          passPerPreset: true,\n          presets: [pushPreset(\"argthree\"), pushPreset(\"argfour\")]\n        }\n      }\n    });\n    if (oldEnv === undefined) {\n      delete process.env.BABEL_ENV;\n    } else {\n      process.env.BABEL_ENV = oldEnv;\n    }\n    expect(result.code).toBe([\"thirteen;\", \"fourteen;\", \"seventeen;\", \"eighteen;\", \"one;\", \"two;\", \"eleven;\", \"twelve;\", \"argtwo;\", \"argone;\", \"five;\", \"six;\", \"twentyone;\", \"twentytwo;\", \"three;\", \"four;\", \"nineteen;\", \"twenty;\", \"fifteen;\", \"sixteen;\", \"seven;\", \"eight;\", \"nine;\", \"ten;\", \"argthree;\", \"argfour;\"].join(\"\\n\"));\n  });",
            "file": "api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "interpreter directive backward-compat",
            "suites": [
                "api"
            ],
            "updatePoint": {
                "line": 445,
                "column": 43,
                "index": 14014
            },
            "line": 445,
            "code": "  it(\"interpreter directive backward-compat\", function () {\n    function doTransform(code, preHandler) {\n      return transformSync(code, {\n        plugins: [{\n          pre: preHandler\n        }]\n      }).code;\n    }\n\n    // Writes value properly.\n    expect(doTransform(\"\", file => {\n      file.shebang = \"env node\";\n    })).toBe(`#!env node`);\n    expect(doTransform(\"#!env node\", file => {\n      file.shebang = \"env node2\";\n    })).toBe(`#!env node2`);\n    expect(doTransform(\"\", file => {\n      file.shebang = \"\";\n    })).toBe(``);\n    expect(doTransform(\"#!env node\", file => {\n      file.shebang = \"\";\n    })).toBe(``);\n\n    // Reads value properly.\n    doTransform(\"\", file => {\n      expect(file.shebang).toBe(\"\");\n    });\n    doTransform(\"#!env node\", file => {\n      expect(file.shebang).toBe(\"env node\");\n    });\n\n    // Reads and writes properly.\n    expect(doTransform(\"#!env node\", file => {\n      expect(file.shebang).toBe(\"env node\");\n      file.shebang = \"env node2\";\n      expect(file.shebang).toBe(\"env node2\");\n      file.shebang = \"env node3\";\n    })).toBe(`#!env node3`);\n  });",
            "file": "api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "source map merging",
            "suites": [
                "api"
            ],
            "updatePoint": {
                "line": 484,
                "column": 24,
                "index": 15096
            },
            "line": 484,
            "code": "  it(\"source map merging\", function () {\n    const result = transformSync([/* eslint-disable max-len */\n    'function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }', \"\", \"let Foo = function Foo() {\", \"  _classCallCheck(this, Foo);\", \"};\", \"\", \"//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0ZG91dCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztJQUFNLEdBQUcsWUFBSCxHQUFHO3dCQUFILEdBQUciLCJmaWxlIjoidW5kZWZpbmVkIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgRm9vIHt9XG4iXX0=\"\n    /* eslint-enable max-len */].join(\"\\n\"), {\n      sourceMap: true\n    });\n    expect([\"function _classCallCheck(instance, Constructor) {\", \"  if (!(instance instanceof Constructor)) {\", '    throw new TypeError(\"Cannot call a class as a function\");', \"  }\", \"}\", \"let Foo = function Foo() {\", \"  _classCallCheck(this, Foo);\", \"};\"].join(\"\\n\")).toBe(result.code);\n    const consumer = new TraceMap(result.map);\n    expect(originalPositionFor(consumer, {\n      line: 6,\n      column: 4\n    })).toEqual({\n      name: \"Foo\",\n      source: \"stdout\",\n      line: 1,\n      column: 6\n    });\n  });",
            "file": "api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "default source map filename",
            "suites": [
                "api"
            ],
            "updatePoint": {
                "line": 502,
                "column": 33,
                "index": 16289
            },
            "line": 502,
            "code": "  it(\"default source map filename\", function () {\n    return transformAsync(\"var a = 10;\", {\n      cwd: \"/some/absolute\",\n      filename: \"/some/absolute/file/path.js\",\n      sourceMaps: true\n    }).then(function (result) {\n      expect(result.map.sources).toEqual([\"path.js\"]);\n    });\n  });",
            "file": "api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "code option false",
            "suites": [
                "api"
            ],
            "updatePoint": {
                "line": 511,
                "column": 23,
                "index": 16572
            },
            "line": 511,
            "code": "  it(\"code option false\", function () {\n    return transformAsync(\"foo('bar');\", {\n      code: false\n    }).then(function (result) {\n      expect(result.code).toBeFalsy();\n    });\n  });",
            "file": "api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "ast option false",
            "suites": [
                "api"
            ],
            "updatePoint": {
                "line": 518,
                "column": 22,
                "index": 16757
            },
            "line": 518,
            "code": "  it(\"ast option false\", function () {\n    return transformAsync(\"foo('bar');\", {\n      ast: false\n    }).then(function (result) {\n      expect(result.ast).toBeFalsy();\n    });\n  });",
            "file": "api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "ast option true",
            "suites": [
                "api"
            ],
            "updatePoint": {
                "line": 525,
                "column": 21,
                "index": 16939
            },
            "line": 525,
            "code": "  it(\"ast option true\", function () {\n    return transformAsync(\"foo('bar');\", {\n      ast: true\n    }).then(function (result) {\n      expect(result.ast).toBeTruthy();\n    });\n  });",
            "file": "api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "ast option default",
            "suites": [
                "api"
            ],
            "updatePoint": {
                "line": 532,
                "column": 24,
                "index": 17124
            },
            "line": 532,
            "code": "  it(\"ast option default\", function () {\n    return transformAsync(\"foo('bar');\").then(function (result) {\n      expect(result.ast).toBeFalsy();\n    });\n  });",
            "file": "api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "auxiliaryComment option",
            "suites": [
                "api"
            ],
            "updatePoint": {
                "line": 537,
                "column": 29,
                "index": 17288
            },
            "line": 537,
            "code": "  it(\"auxiliaryComment option\", function () {\n    return transformAsync(\"class Foo {}\", {\n      auxiliaryCommentBefore: \"before\",\n      auxiliaryCommentAfter: \"after\",\n      plugins: [function (babel) {\n        const t = babel.types;\n        return {\n          visitor: {\n            Program: function (path) {\n              path.unshiftContainer(\"body\", t.expressionStatement(t.identifier(\"start\")));\n              path.pushContainer(\"body\", t.expressionStatement(t.identifier(\"end\")));\n            }\n          }\n        };\n      }]\n    }).then(function (result) {\n      expect(result.code).toBe(\"/*before*/\\nstart;\\n/*after*/\\nclass Foo {}\\n/*before*/\\nend;\\n/*after*/\");\n    });\n  });",
            "file": "api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "ignore option",
            "suites": [
                "api"
            ],
            "updatePoint": {
                "line": 556,
                "column": 19,
                "index": 17966
            },
            "line": 556,
            "code": "  it(\"ignore option\", function () {\n    return Promise.all([transformAsync(\"\", {\n      ignore: [\"/foo\"],\n      filename: \"/foo/node_modules/bar\"\n    }).then(assertIgnored), transformAsync(\"\", {\n      ignore: [\"/foo/node_modules\"],\n      filename: \"/foo/node_modules/bar\"\n    }).then(assertIgnored), transformAsync(\"\", {\n      ignore: [\"/foo/node_modules/*\"],\n      filename: \"/foo/node_modules/bar\"\n    }).then(assertIgnored), transformAsync(\"\", {\n      ignore: [\"/foo/**/*\"],\n      filename: \"/foo/node_modules/bar\"\n    }).then(assertIgnored), transformAsync(\"\", {\n      ignore: [\"/foo/node_modules/*.bar\"],\n      filename: \"/foo/node_modules/foo.bar\"\n    }).then(assertIgnored), transformAsync(\"\", {\n      ignore: [\"/foo/node_modules/*.foo\"],\n      filename: \"/foo/node_modules/foo.bar\"\n    }).then(assertNotIgnored), transformAsync(\"\", {\n      ignore: [\"/bar/**/*\"],\n      filename: \"/foo/node_modules/foo.bar\"\n    }).then(assertNotIgnored)]);\n  });",
            "file": "api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "only option",
            "suites": [
                "api"
            ],
            "updatePoint": {
                "line": 580,
                "column": 17,
                "index": 18917
            },
            "line": 580,
            "code": "  it(\"only option\", function () {\n    return Promise.all([transformAsync(\"\", {\n      only: [\"/foo\"],\n      filename: \"/foo/node_modules/bar\"\n    }).then(assertNotIgnored), transformAsync(\"\", {\n      only: [\"/foo/*\"],\n      filename: \"/foo/node_modules/bar\"\n    }).then(assertNotIgnored), transformAsync(\"\", {\n      only: [\"/foo/node_modules\"],\n      filename: \"/foo/node_modules/bar\"\n    }).then(assertNotIgnored), transformAsync(\"\", {\n      only: [\"/foo/node_modules/*.bar\"],\n      filename: \"/foo/node_modules/foo.bar\"\n    }).then(assertNotIgnored), transformAsync(\"\", {\n      only: [\"/foo/node_modules\"],\n      filename: \"/foo/node_module/bar\"\n    }).then(assertIgnored), transformAsync(\"\", {\n      only: [\"/foo/node_modules\"],\n      filename: \"/bar/node_modules/foo\"\n    }).then(assertIgnored), transformAsync(\"\", {\n      only: [\"/foo/node_modules/*.bar\"],\n      filename: \"/foo/node_modules/bar.foo\"\n    }).then(assertIgnored)]);\n  });",
            "file": "api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "default",
            "suites": [
                "api",
                "env option"
            ],
            "updatePoint": {
                "line": 617,
                "column": 15,
                "index": 20337
            },
            "line": 617,
            "code": "    it(\"default\", function () {\n      const result = transformSync(\"foo;\", {\n        env: {\n          development: {\n            comments: false\n          }\n        }\n      });\n      expect(result.options.comments).toBe(false);\n    });",
            "file": "api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "BABEL_ENV",
            "suites": [
                "api",
                "env option"
            ],
            "updatePoint": {
                "line": 627,
                "column": 17,
                "index": 20575
            },
            "line": 627,
            "code": "    it(\"BABEL_ENV\", function () {\n      process.env.BABEL_ENV = \"foo\";\n      const result = transformSync(\"foo;\", {\n        env: {\n          foo: {\n            comments: false\n          }\n        }\n      });\n      expect(result.options.comments).toBe(false);\n    });",
            "file": "api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "NODE_ENV",
            "suites": [
                "api",
                "env option"
            ],
            "updatePoint": {
                "line": 638,
                "column": 16,
                "index": 20841
            },
            "line": 638,
            "code": "    it(\"NODE_ENV\", function () {\n      process.env.NODE_ENV = \"foo\";\n      const result = transformSync(\"foo;\", {\n        env: {\n          foo: {\n            comments: false\n          }\n        }\n      });\n      expect(result.options.comments).toBe(false);\n    });",
            "file": "api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "builds external helpers in global output type",
            "suites": [
                "api",
                "buildExternalHelpers",
                "smoke tests"
            ],
            "updatePoint": {
                "line": 652,
                "column": 55,
                "index": 21242
            },
            "line": 652,
            "code": "      it(\"builds external helpers in global output type\", function () {\n        babel.buildExternalHelpers(null, \"global\");\n      });",
            "file": "api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "builds external helpers in module output type",
            "suites": [
                "api",
                "buildExternalHelpers",
                "smoke tests"
            ],
            "updatePoint": {
                "line": 655,
                "column": 55,
                "index": 21376
            },
            "line": 655,
            "code": "      it(\"builds external helpers in module output type\", function () {\n        babel.buildExternalHelpers(null, \"module\");\n      });",
            "file": "api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "builds external helpers in umd output type",
            "suites": [
                "api",
                "buildExternalHelpers",
                "smoke tests"
            ],
            "updatePoint": {
                "line": 658,
                "column": 52,
                "index": 21507
            },
            "line": 658,
            "code": "      it(\"builds external helpers in umd output type\", function () {\n        babel.buildExternalHelpers(null, \"umd\");\n      });",
            "file": "api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "builds external helpers in var output type",
            "suites": [
                "api",
                "buildExternalHelpers",
                "smoke tests"
            ],
            "updatePoint": {
                "line": 661,
                "column": 52,
                "index": 21635
            },
            "line": 661,
            "code": "      it(\"builds external helpers in var output type\", function () {\n        babel.buildExternalHelpers(null, \"var\");\n      });",
            "file": "api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "all",
            "suites": [
                "api",
                "buildExternalHelpers",
                "smoke tests"
            ],
            "updatePoint": {
                "line": 665,
                "column": 11,
                "index": 21730
            },
            "line": 665,
            "code": "    it(\"all\", function () {\n      const script = babel.buildExternalHelpers();\n      expect(script).toEqual(expect.stringContaining(\"classCallCheck\"));\n      expect(script).toEqual(expect.stringContaining(\"inherits\"));\n    });",
            "file": "api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "allowlist",
            "suites": [
                "api",
                "buildExternalHelpers",
                "smoke tests"
            ],
            "updatePoint": {
                "line": 670,
                "column": 17,
                "index": 21963
            },
            "line": 670,
            "code": "    it(\"allowlist\", function () {\n      const script = babel.buildExternalHelpers([\"inherits\"]);\n      expect(script).not.toEqual(expect.stringContaining(\"classCallCheck\"));\n      expect(script).toEqual(expect.stringContaining(\"inherits\"));\n    });",
            "file": "api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "empty allowlist",
            "suites": [
                "api",
                "buildExternalHelpers",
                "smoke tests"
            ],
            "updatePoint": {
                "line": 675,
                "column": 23,
                "index": 22218
            },
            "line": 675,
            "code": "    it(\"empty allowlist\", function () {\n      const script = babel.buildExternalHelpers([]);\n      expect(script).not.toEqual(expect.stringContaining(\"classCallCheck\"));\n      expect(script).not.toEqual(expect.stringContaining(\"inherits\"));\n    });",
            "file": "api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "underscored",
            "suites": [
                "api",
                "buildExternalHelpers",
                "smoke tests"
            ],
            "updatePoint": {
                "line": 680,
                "column": 19,
                "index": 22463
            },
            "line": 680,
            "code": "    it(\"underscored\", function () {\n      const script = babel.buildExternalHelpers([\"typeof\"]);\n      expect(script).toEqual(expect.stringContaining(\"typeof\"));\n    });",
            "file": "api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "only syntax plugin available",
            "suites": [
                "api",
                "handle parsing errors"
            ],
            "updatePoint": {
                "line": 689,
                "column": 36,
                "index": 22756
            },
            "line": 689,
            "code": "    it(\"only syntax plugin available\", function () {\n      return new Promise(resolve => {\n        transformFile(cwd + \"/fixtures/api/parsing-errors/only-syntax/file.js\", options, function (err) {\n          expect(err.message).toMatch(\"Support for the experimental syntax 'pipelineOperator' isn't currently enabled (1:3):\");\n          expect(err.message).toMatch(\"Add @babel/plugin-proposal-pipeline-operator (https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-pipeline-operator) to the \" + \"'plugins' section of your Babel config to enable transformation.\");\n          resolve();\n        });\n      });\n    });",
            "file": "api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "both syntax and transform plugin available",
            "suites": [
                "api",
                "handle parsing errors"
            ],
            "updatePoint": {
                "line": 698,
                "column": 50,
                "index": 23402
            },
            "line": 698,
            "code": "    it(\"both syntax and transform plugin available\", function () {\n      return new Promise(resolve => {\n        transformFile(cwd + \"/fixtures/api/parsing-errors/syntax-and-transform/file.js\", options, function (err) {\n          expect(err.message).toMatch(\"Support for the experimental syntax 'doExpressions' isn't currently enabled (1:2):\");\n          expect(err.message).toMatch(\"Add @babel/plugin-proposal-do-expressions (https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-do-expressions) to the \" + \"'plugins' section of your Babel config to enable transformation.\");\n          resolve();\n        });\n      });\n    });",
            "file": "api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should always throw",
            "suites": [
                "api",
                "missing helpers"
            ],
            "updatePoint": {
                "line": 709,
                "column": 27,
                "index": 24075
            },
            "line": 709,
            "code": "    it(\"should always throw\", function () {\n      expect(() => babel.transformSync(``, {\n        configFile: false,\n        plugins: [function () {\n          return {\n            visitor: {\n              Program(path) {\n                try {\n                  path.pushContainer(\"body\", this.addHelper(\"fooBar\"));\n                } catch {}\n                path.pushContainer(\"body\", this.addHelper(\"fooBar\"));\n              }\n            }\n          };\n        }]\n      })).toThrowErrorMatchingInlineSnapshot(`\"unknown file: Unknown helper fooBar\"`);\n    });",
            "file": "api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "throws if invalid name",
            "suites": [
                "assumptions"
            ],
            "updatePoint": {
                "line": 18,
                "column": 28,
                "index": 505
            },
            "line": 18,
            "code": "  it(\"throws if invalid name\", () => {\n    expect(() => withAssumptions({\n      foo: true\n    })).toThrow(`.assumptions[\"foo\"] is not a supported assumption.`);\n    expect(() => withAssumptions({\n      setPublicClassFields: true\n    })).not.toThrow();\n  });",
            "file": "assumptions.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "throws if not boolean",
            "suites": [
                "assumptions"
            ],
            "updatePoint": {
                "line": 26,
                "column": 27,
                "index": 762
            },
            "line": 26,
            "code": "  it(\"throws if not boolean\", () => {\n    expect(() => withAssumptions({\n      setPublicClassFields: \"yes\"\n    })).toThrow(`.assumptions[\"setPublicClassFields\"] must be a boolean.`);\n    expect(() => withAssumptions({\n      setPublicClassFields: true\n    })).not.toThrow();\n    expect(() => withAssumptions({\n      setPublicClassFields: false\n    })).not.toThrow();\n  });",
            "file": "assumptions.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "can be enabled by presets",
            "suites": [
                "assumptions"
            ],
            "updatePoint": {
                "line": 37,
                "column": 31,
                "index": 1138
            },
            "line": 37,
            "code": "  it(\"can be enabled by presets\", () => {\n    expect(loadOptions({\n      assumptions: {\n        setPublicClassFields: true\n      },\n      presets: [() => ({\n        assumptions: {\n          mutableTemplateObject: true\n        }\n      })]\n    }).assumptions).toEqual({\n      setPublicClassFields: true,\n      mutableTemplateObject: true\n    });\n  });",
            "file": "assumptions.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "cannot be disabled by presets",
            "suites": [
                "assumptions"
            ],
            "updatePoint": {
                "line": 52,
                "column": 35,
                "index": 1492
            },
            "line": 52,
            "code": "  it(\"cannot be disabled by presets\", () => {\n    expect(() => loadOptions({\n      presets: [() => ({\n        assumptions: {\n          mutableTemplateObject: false\n        }\n      })]\n    })).toThrow(` .assumptions[\"mutableTemplateObject\"] cannot be set to 'false' inside presets.`);\n  });",
            "file": "assumptions.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "can be queried from plugins",
            "suites": [
                "assumptions"
            ],
            "updatePoint": {
                "line": 61,
                "column": 33,
                "index": 1780
            },
            "line": 61,
            "code": "  it(\"can be queried from plugins\", () => {\n    let setPublicClassFields;\n    let unknownAssumption;\n    transformSync(\"\", {\n      configFile: false,\n      browserslistConfigFile: false,\n      assumptions: {\n        setPublicClassFields: true\n      },\n      plugins: [api => {\n        setPublicClassFields = api.assumption(\"setPublicClassFields\");\n\n        // Unknown assumptions don't throw, so that plugins can keep compat\n        // with older @babel/core versions when they introduce support for\n        // a new assumption.\n        unknownAssumption = api.assumption(\"unknownAssumption\");\n        return {};\n      }]\n    });\n    expect(setPublicClassFields).toBe(true);\n    expect(unknownAssumption).toBe(undefined);\n  });",
            "file": "assumptions.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "cannot be queried from presets",
            "suites": [
                "assumptions"
            ],
            "updatePoint": {
                "line": 83,
                "column": 36,
                "index": 2511
            },
            "line": 83,
            "code": "  it(\"cannot be queried from presets\", () => {\n    let assumptionFn;\n    transformSync(\"\", {\n      configFile: false,\n      browserslistConfigFile: false,\n      presets: [api => {\n        assumptionFn = api.assumption;\n        return {};\n      }]\n    });\n    expect(assumptionFn).toBeUndefined();\n  });",
            "file": "assumptions.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "plugin defined outside preset",
            "suites": [
                "assumptions",
                "assumptions set in presets are visible from plugins - #13316"
            ],
            "updatePoint": {
                "line": 111,
                "column": 37,
                "index": 3282
            },
            "line": 111,
            "code": "    it(\"plugin defined outside preset\", () => {\n      const ref = {};\n      loadOptions({\n        configFile: false,\n        presets: [presetEnumerableModuleMeta],\n        plugins: [[pluginExtractEnumerableModuleMeta, ref]]\n      });\n      expect(ref.enumerableModuleMeta).toBe(true);\n    });",
            "file": "assumptions.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "plugin defined inside preset",
            "suites": [
                "assumptions",
                "assumptions set in presets are visible from plugins - #13316"
            ],
            "updatePoint": {
                "line": 120,
                "column": 36,
                "index": 3574
            },
            "line": 120,
            "code": "    it(\"plugin defined inside preset\", () => {\n      const ref = {};\n      loadOptions({\n        configFile: false,\n        presets: [() => ({\n          assumptions: {\n            enumerableModuleMeta: true\n          },\n          plugins: [[pluginExtractEnumerableModuleMeta, ref]]\n        })]\n      });\n      expect(ref.enumerableModuleMeta).toBe(true);\n    });",
            "file": "assumptions.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "integration",
            "suites": [
                "assumptions",
                "assumptions set in presets are visible from plugins - #13316"
            ],
            "updatePoint": {
                "line": 133,
                "column": 19,
                "index": 3920
            },
            "line": 133,
            "code": "    it(\"integration\", () => {\n      const {\n        code\n      } = transformSync(`export const foo = 1;`, {\n        configFile: false,\n        presets: [presetEnumerableModuleMeta],\n        plugins: [pluginCommonJS]\n      });\n      expect(code).toMatchInlineSnapshot(`\n        \"\\\\\"use strict\\\\\";\n\n        exports.__esModule = true;\n        exports.foo = void 0;\n        const foo = 1;\n        exports.foo = foo;\"\n      `);\n    });",
            "file": "assumptions.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "is not invalidated when assumptions don't change",
            "suites": [
                "assumptions",
                "plugin cache"
            ],
            "updatePoint": {
                "line": 162,
                "column": 56,
                "index": 4720
            },
            "line": 162,
            "code": "    it(\"is not invalidated when assumptions don't change\", () => {\n      const plugin = makePlugin();\n      run(plugin, {\n        setPublicClassFields: true,\n        mutableTemplateObject: false\n      });\n      run(plugin, {\n        setPublicClassFields: true,\n        mutableTemplateObject: false\n      });\n      expect(plugin).toHaveBeenCalledTimes(1);\n    });",
            "file": "assumptions.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "is not invalidated when unused assumptions change",
            "suites": [
                "assumptions",
                "plugin cache"
            ],
            "updatePoint": {
                "line": 174,
                "column": 57,
                "index": 5084
            },
            "line": 174,
            "code": "    it(\"is not invalidated when unused assumptions change\", () => {\n      const plugin = makePlugin();\n      run(plugin, {\n        setPublicClassFields: true,\n        mutableTemplateObject: false\n      });\n      run(plugin, {\n        setPublicClassFields: true,\n        mutableTemplateObject: true\n      });\n      expect(plugin).toHaveBeenCalledTimes(1);\n    });",
            "file": "assumptions.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "is invalidated when used assumptions change",
            "suites": [
                "assumptions",
                "plugin cache"
            ],
            "updatePoint": {
                "line": 186,
                "column": 51,
                "index": 5441
            },
            "line": 186,
            "code": "    it(\"is invalidated when used assumptions change\", () => {\n      const plugin = makePlugin();\n      run(plugin, {\n        setPublicClassFields: true,\n        mutableTemplateObject: false\n      });\n      run(plugin, {\n        setPublicClassFields: false,\n        mutableTemplateObject: true\n      });\n      expect(plugin).toHaveBeenCalledTimes(2);\n    });",
            "file": "assumptions.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "is invalidated when used assumptions are added",
            "suites": [
                "assumptions",
                "plugin cache"
            ],
            "updatePoint": {
                "line": 198,
                "column": 54,
                "index": 5802
            },
            "line": 198,
            "code": "    it(\"is invalidated when used assumptions are added\", () => {\n      const plugin = makePlugin();\n      run(plugin, {\n        mutableTemplateObject: false\n      });\n      run(plugin, {\n        mutableTemplateObject: false,\n        setPublicClassFields: true\n      });\n      expect(plugin).toHaveBeenCalledTimes(2);\n    });",
            "file": "assumptions.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "is invalidated when used assumptions are removed",
            "suites": [
                "assumptions",
                "plugin cache"
            ],
            "updatePoint": {
                "line": 209,
                "column": 56,
                "index": 6129
            },
            "line": 209,
            "code": "    it(\"is invalidated when used assumptions are removed\", () => {\n      const plugin = makePlugin();\n      run(plugin, {\n        setPublicClassFields: true,\n        mutableTemplateObject: false\n      });\n      run(plugin, {\n        mutableTemplateObject: true\n      });\n      expect(plugin).toHaveBeenCalledTimes(2);\n    });",
            "file": "assumptions.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "called synchronously",
            "suites": [
                "asynchronicity",
                "config file",
                "promise"
            ],
            "updatePoint": {
                "line": 32,
                "column": 30,
                "index": 1813
            },
            "line": 32,
            "code": "      it(\"called synchronously\", () => {\n        process.chdir(\"config-file-promise\");\n        expect(() => babel.transformSync(\"\")).toThrowErrorMatchingInlineSnapshot(`\"You appear to be using an async configuration, which your current version of Babel does` + ` not support. We may add support for this in the future, but if you're on the most recent` + ` version of @babel/core and still seeing this error, then you'll need to synchronously` + ` return your config.\"`);\n      });",
            "file": "async.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "called asynchronously",
            "suites": [
                "asynchronicity",
                "config file",
                "promise"
            ],
            "updatePoint": {
                "line": 36,
                "column": 31,
                "index": 2296
            },
            "line": 36,
            "code": "      it(\"called asynchronously\", async () => {\n        process.chdir(\"config-file-promise\");\n        await expect(babel.transformAsync(\"\")).rejects.toThrowErrorMatchingInlineSnapshot(`\"You appear to be using an async configuration, which your current version of Babel does` + ` not support. We may add support for this in the future, but if you're on the most recent` + ` version of @babel/core and still seeing this error, then you'll need to synchronously` + ` return your config.\"`);\n      });",
            "file": "async.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "called synchronously",
            "suites": [
                "asynchronicity",
                "plugin",
                "inherits"
            ],
            "updatePoint": {
                "line": 98,
                "column": 30,
                "index": 6705
            },
            "line": 98,
            "code": "      it(\"called synchronously\", async () => {\n        process.chdir(\"plugin-mjs-native\");\n        await expect(spawnTransformSync()).rejects.toThrow(`[BABEL]: You appear to be using a native ECMAScript module plugin, which is` + ` only supported when running Babel asynchronously.`);\n      });",
            "file": "async.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "called asynchronously",
            "suites": [
                "asynchronicity",
                "plugin",
                "inherits"
            ],
            "updatePoint": {
                "line": 102,
                "column": 31,
                "index": 7001
            },
            "line": 102,
            "code": "      it(\"called asynchronously\", async () => {\n        process.chdir(\"plugin-mjs-native\");\n        await expect(spawnTransformAsync()).resolves.toMatchObject({\n          code: `\"success\"`\n        });\n      });",
            "file": "async.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "called synchronously",
            "suites": [
                "asynchronicity",
                "preset",
                "plugins"
            ],
            "updatePoint": {
                "line": 134,
                "column": 30,
                "index": 8789
            },
            "line": 134,
            "code": "      it(\"called synchronously\", async () => {\n        process.chdir(\"preset-mjs-native\");\n        await expect(spawnTransformSync()).rejects.toThrow(`[BABEL]: You appear to be using a native ECMAScript module preset, which is` + ` only supported when running Babel asynchronously.`);\n      });",
            "file": "async.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "called asynchronously",
            "suites": [
                "asynchronicity",
                "preset",
                "plugins"
            ],
            "updatePoint": {
                "line": 138,
                "column": 31,
                "index": 9085
            },
            "line": 138,
            "code": "      it(\"called asynchronously\", async () => {\n        process.chdir(\"preset-mjs-native\");\n        await expect(spawnTransformAsync()).resolves.toMatchObject({\n          code: `\"success\"`\n        });\n      });",
            "file": "async.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "must use the 'default' export",
            "suites": [
                "asynchronicity",
                "preset",
                "plugins"
            ],
            "updatePoint": {
                "line": 144,
                "column": 39,
                "index": 9304
            },
            "line": 144,
            "code": "      it(\"must use the 'default' export\", async () => {\n        process.chdir(\"preset-mjs-named-exports-native\");\n        await expect(spawnTransformAsync()).rejects.toThrow(`Unexpected falsy value: undefined`);\n      });",
            "file": "async.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should allow permacaching with .forever()",
            "suites": [
                "caching API"
            ],
            "updatePoint": {
                "line": 5,
                "column": 47,
                "index": 249
            },
            "line": 5,
            "code": "  it(\"should allow permacaching with .forever()\", () => {\n    let count = 0;\n    const fn = makeStrongCacheSync((arg, cache) => {\n      cache.forever();\n      return {\n        arg,\n        count: count++\n      };\n    });\n    expect(fn(\"one\")).toEqual({\n      arg: \"one\",\n      count: 0\n    });\n    expect(fn(\"one\")).toBe(fn(\"one\"));\n    expect(fn(\"two\")).toEqual({\n      arg: \"two\",\n      count: 1\n    });\n    expect(fn(\"two\")).toBe(fn(\"two\"));\n    expect(fn(\"one\")).not.toEqual(fn(\"two\"));\n  });",
            "file": "caching-api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should allow disabling caching with .never()",
            "suites": [
                "caching API"
            ],
            "updatePoint": {
                "line": 26,
                "column": 50,
                "index": 749
            },
            "line": 26,
            "code": "  it(\"should allow disabling caching with .never()\", () => {\n    let count = 0;\n    const fn = makeStrongCacheSync((arg, cache) => {\n      cache.never();\n      return {\n        arg,\n        count: count++\n      };\n    });\n    expect(fn(\"one\")).toEqual({\n      arg: \"one\",\n      count: 0\n    });\n    expect(fn(\"one\")).toEqual({\n      arg: \"one\",\n      count: 1\n    });\n    expect(fn(\"one\")).not.toEqual(fn(\"one\"));\n    expect(fn(\"two\")).toEqual({\n      arg: \"two\",\n      count: 4\n    });\n    expect(fn(\"two\")).toEqual({\n      arg: \"two\",\n      count: 5\n    });\n    expect(fn(\"two\")).not.toEqual(fn(\"two\"));\n    expect(fn(\"one\")).not.toEqual(fn(\"two\"));\n  });",
            "file": "caching-api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should allow caching based on a value with .using(fn)",
            "suites": [
                "caching API"
            ],
            "updatePoint": {
                "line": 55,
                "column": 59,
                "index": 1416
            },
            "line": 55,
            "code": "  it(\"should allow caching based on a value with .using(fn)\", () => {\n    let count = 0;\n    let other = \"default\";\n    const fn = makeStrongCacheSync((arg, cache) => {\n      const val = cache.using(() => other);\n      return {\n        arg,\n        val,\n        count: count++\n      };\n    });\n    expect(fn(\"one\")).toEqual({\n      arg: \"one\",\n      val: \"default\",\n      count: 0\n    });\n    expect(fn(\"one\")).toBe(fn(\"one\"));\n    expect(fn(\"two\")).toEqual({\n      arg: \"two\",\n      val: \"default\",\n      count: 1\n    });\n    expect(fn(\"two\")).toBe(fn(\"two\"));\n    other = \"new\";\n    expect(fn(\"one\")).toEqual({\n      arg: \"one\",\n      val: \"new\",\n      count: 2\n    });\n    expect(fn(\"one\")).toBe(fn(\"one\"));\n    expect(fn(\"two\")).toEqual({\n      arg: \"two\",\n      val: \"new\",\n      count: 3\n    });\n    expect(fn(\"two\")).toBe(fn(\"two\"));\n    other = \"default\";\n    expect(fn(\"one\")).toEqual({\n      arg: \"one\",\n      val: \"default\",\n      count: 0\n    });\n    expect(fn(\"one\")).toBe(fn(\"one\"));\n    expect(fn(\"two\")).toEqual({\n      arg: \"two\",\n      val: \"default\",\n      count: 1\n    });\n    expect(fn(\"two\")).toBe(fn(\"two\"));\n    other = \"new\";\n    expect(fn(\"one\")).toEqual({\n      arg: \"one\",\n      val: \"new\",\n      count: 2\n    });\n    expect(fn(\"one\")).toBe(fn(\"one\"));\n    expect(fn(\"two\")).toEqual({\n      arg: \"two\",\n      val: \"new\",\n      count: 3\n    });\n    expect(fn(\"two\")).toBe(fn(\"two\"));\n  });",
            "file": "caching-api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should allow invalidation based on a value with .invalidate(fn)",
            "suites": [
                "caching API"
            ],
            "updatePoint": {
                "line": 118,
                "column": 69,
                "index": 2843
            },
            "line": 118,
            "code": "  it(\"should allow invalidation based on a value with .invalidate(fn)\", () => {\n    let count = 0;\n    let other = \"default\";\n    const fn = makeStrongCacheSync((arg, cache) => {\n      const val = cache.invalidate(() => other);\n      return {\n        arg,\n        val,\n        count: count++\n      };\n    });\n    expect(fn(\"one\")).toEqual({\n      arg: \"one\",\n      val: \"default\",\n      count: 0\n    });\n    expect(fn(\"one\")).toBe(fn(\"one\"));\n    expect(fn(\"two\")).toEqual({\n      arg: \"two\",\n      val: \"default\",\n      count: 1\n    });\n    expect(fn(\"two\")).toBe(fn(\"two\"));\n    other = \"new\";\n    expect(fn(\"one\")).toEqual({\n      arg: \"one\",\n      val: \"new\",\n      count: 2\n    });\n    expect(fn(\"one\")).toBe(fn(\"one\"));\n    expect(fn(\"two\")).toEqual({\n      arg: \"two\",\n      val: \"new\",\n      count: 3\n    });\n    expect(fn(\"two\")).toBe(fn(\"two\"));\n    other = \"default\";\n    expect(fn(\"one\")).toEqual({\n      arg: \"one\",\n      val: \"default\",\n      count: 4\n    });\n    expect(fn(\"one\")).toBe(fn(\"one\"));\n    expect(fn(\"two\")).toEqual({\n      arg: \"two\",\n      val: \"default\",\n      count: 5\n    });\n    expect(fn(\"two\")).toBe(fn(\"two\"));\n    other = \"new\";\n    expect(fn(\"one\")).toEqual({\n      arg: \"one\",\n      val: \"new\",\n      count: 6\n    });\n    expect(fn(\"one\")).toBe(fn(\"one\"));\n    expect(fn(\"two\")).toEqual({\n      arg: \"two\",\n      val: \"new\",\n      count: 7\n    });\n    expect(fn(\"two\")).toBe(fn(\"two\"));\n  });",
            "file": "caching-api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should allow invalidation with .using and .invalidate",
            "suites": [
                "caching API"
            ],
            "updatePoint": {
                "line": 181,
                "column": 59,
                "index": 4265
            },
            "line": 181,
            "code": "  it(\"should allow invalidation with .using and .invalidate\", () => {\n    let count = 0;\n    let other = \"default\";\n    let another = \"another\";\n    const fn = makeStrongCacheSync((arg, cache) => {\n      const val = cache.using(() => other);\n      const val2 = cache.invalidate(() => another);\n      return {\n        arg,\n        val,\n        val2,\n        count: count++\n      };\n    });\n    expect(fn(\"one\")).toEqual({\n      arg: \"one\",\n      val: \"default\",\n      val2: \"another\",\n      count: 0\n    });\n    expect(fn(\"one\")).toBe(fn(\"one\"));\n    expect(fn(\"two\")).toEqual({\n      arg: \"two\",\n      val: \"default\",\n      val2: \"another\",\n      count: 1\n    });\n    expect(fn(\"two\")).toBe(fn(\"two\"));\n    other = \"new\";\n    expect(fn(\"one\")).toEqual({\n      arg: \"one\",\n      val: \"new\",\n      val2: \"another\",\n      count: 2\n    });\n    expect(fn(\"one\")).toBe(fn(\"one\"));\n    expect(fn(\"two\")).toEqual({\n      arg: \"two\",\n      val: \"new\",\n      val2: \"another\",\n      count: 3\n    });\n    expect(fn(\"two\")).toBe(fn(\"two\"));\n    other = \"default\";\n    expect(fn(\"one\")).toEqual({\n      arg: \"one\",\n      val: \"default\",\n      val2: \"another\",\n      count: 4\n    });\n    expect(fn(\"one\")).toBe(fn(\"one\"));\n    expect(fn(\"two\")).toEqual({\n      arg: \"two\",\n      val: \"default\",\n      val2: \"another\",\n      count: 5\n    });\n    expect(fn(\"two\")).toBe(fn(\"two\"));\n    other = \"new\";\n    expect(fn(\"one\")).toEqual({\n      arg: \"one\",\n      val: \"new\",\n      val2: \"another\",\n      count: 6\n    });\n    expect(fn(\"one\")).toBe(fn(\"one\"));\n    expect(fn(\"two\")).toEqual({\n      arg: \"two\",\n      val: \"new\",\n      val2: \"another\",\n      count: 7\n    });\n    expect(fn(\"two\")).toBe(fn(\"two\"));\n    another = \"second\";\n    expect(fn(\"one\")).toEqual({\n      arg: \"one\",\n      val: \"new\",\n      val2: \"second\",\n      count: 8\n    });\n    expect(fn(\"one\")).toBe(fn(\"one\"));\n    expect(fn(\"two\")).toEqual({\n      arg: \"two\",\n      val: \"new\",\n      val2: \"second\",\n      count: 9\n    });\n    expect(fn(\"two\")).toBe(fn(\"two\"));\n  });",
            "file": "caching-api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should auto-permacache by default",
            "suites": [
                "caching API"
            ],
            "updatePoint": {
                "line": 270,
                "column": 39,
                "index": 6269
            },
            "line": 270,
            "code": "  it(\"should auto-permacache by default\", () => {\n    let count = 0;\n    const fn = makeStrongCacheSync(arg => ({\n      arg,\n      count: count++\n    }));\n    expect(fn(\"one\")).toEqual({\n      arg: \"one\",\n      count: 0\n    });\n    expect(fn(\"one\")).toBe(fn(\"one\"));\n    expect(fn(\"two\")).toEqual({\n      arg: \"two\",\n      count: 1\n    });\n    expect(fn(\"two\")).toBe(fn(\"two\"));\n    expect(fn(\"one\")).not.toEqual(fn(\"two\"));\n  });",
            "file": "caching-api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should throw if you set permacaching and use .using",
            "suites": [
                "caching API"
            ],
            "updatePoint": {
                "line": 288,
                "column": 57,
                "index": 6718
            },
            "line": 288,
            "code": "  it(\"should throw if you set permacaching and use .using\", () => {\n    const fn = makeStrongCacheSync((arg, cache) => {\n      cache.forever();\n      cache.using(() => null);\n    });\n    expect(() => fn()).toThrow(/Caching has already been configured/);\n  });",
            "file": "caching-api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should throw if you set permacaching and use .invalidate",
            "suites": [
                "caching API"
            ],
            "updatePoint": {
                "line": 295,
                "column": 62,
                "index": 6983
            },
            "line": 295,
            "code": "  it(\"should throw if you set permacaching and use .invalidate\", () => {\n    const fn = makeStrongCacheSync((arg, cache) => {\n      cache.forever();\n      cache.invalidate(() => null);\n    });\n    expect(() => fn()).toThrow(/Caching has already been configured/);\n  });",
            "file": "caching-api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should throw if you set permacaching and use .never",
            "suites": [
                "caching API"
            ],
            "updatePoint": {
                "line": 302,
                "column": 57,
                "index": 7248
            },
            "line": 302,
            "code": "  it(\"should throw if you set permacaching and use .never\", () => {\n    const fn = makeStrongCacheSync((arg, cache) => {\n      cache.forever();\n      cache.never();\n    });\n    expect(() => fn()).toThrow(/Caching has already been configured/);\n  });",
            "file": "caching-api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should throw if you set no caching and use .using",
            "suites": [
                "caching API"
            ],
            "updatePoint": {
                "line": 309,
                "column": 55,
                "index": 7496
            },
            "line": 309,
            "code": "  it(\"should throw if you set no caching and use .using\", () => {\n    const fn = makeStrongCacheSync((arg, cache) => {\n      cache.never();\n      cache.using(() => null);\n    });\n    expect(() => fn()).toThrow(/Caching has already been configured/);\n  });",
            "file": "caching-api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should throw if you set no caching and use .invalidate",
            "suites": [
                "caching API"
            ],
            "updatePoint": {
                "line": 316,
                "column": 60,
                "index": 7757
            },
            "line": 316,
            "code": "  it(\"should throw if you set no caching and use .invalidate\", () => {\n    const fn = makeStrongCacheSync((arg, cache) => {\n      cache.never();\n      cache.invalidate(() => null);\n    });\n    expect(() => fn()).toThrow(/Caching has already been configured/);\n  });",
            "file": "caching-api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should throw if you set no caching and use .never",
            "suites": [
                "caching API"
            ],
            "updatePoint": {
                "line": 323,
                "column": 55,
                "index": 8018
            },
            "line": 323,
            "code": "  it(\"should throw if you set no caching and use .never\", () => {\n    const fn = makeStrongCacheSync((arg, cache) => {\n      cache.never();\n      cache.using(() => null);\n    });\n    expect(() => fn()).toThrow(/Caching has already been configured/);\n  });",
            "file": "caching-api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should throw if you configure .forever after exiting",
            "suites": [
                "caching API"
            ],
            "updatePoint": {
                "line": 330,
                "column": 58,
                "index": 8277
            },
            "line": 330,
            "code": "  it(\"should throw if you configure .forever after exiting\", () => {\n    const fn = makeStrongCacheSync((arg, cache) => cache);\n    expect(() => fn().forever()).toThrow(/Cannot change caching after evaluation/);\n  });",
            "file": "caching-api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should throw if you configure .never after exiting",
            "suites": [
                "caching API"
            ],
            "updatePoint": {
                "line": 334,
                "column": 56,
                "index": 8493
            },
            "line": 334,
            "code": "  it(\"should throw if you configure .never after exiting\", () => {\n    const fn = makeStrongCacheSync((arg, cache) => cache);\n    expect(() => fn().never()).toThrow(/Cannot change caching after evaluation/);\n  });",
            "file": "caching-api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should throw if you configure .using after exiting",
            "suites": [
                "caching API"
            ],
            "updatePoint": {
                "line": 338,
                "column": 56,
                "index": 8707
            },
            "line": 338,
            "code": "  it(\"should throw if you configure .using after exiting\", () => {\n    const fn = makeStrongCacheSync((arg, cache) => cache);\n    expect(() => fn().using(() => null)).toThrow(/Cannot change caching after evaluation/);\n  });",
            "file": "caching-api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should throw if you configure .invalidate after exiting",
            "suites": [
                "caching API"
            ],
            "updatePoint": {
                "line": 342,
                "column": 61,
                "index": 8936
            },
            "line": 342,
            "code": "  it(\"should throw if you configure .invalidate after exiting\", () => {\n    const fn = makeStrongCacheSync((arg, cache) => cache);\n    expect(() => fn().invalidate(() => null)).toThrow(/Cannot change caching after evaluation/);\n  });",
            "file": "caching-api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should allow permacaching with cache(true)",
            "suites": [
                "caching API",
                "simple"
            ],
            "updatePoint": {
                "line": 347,
                "column": 50,
                "index": 9188
            },
            "line": 347,
            "code": "    it(\"should allow permacaching with cache(true)\", () => {\n      let count = 0;\n      const fn = makeStrongCacheSync((arg, cache) => {\n        cache = cache.simple();\n        cache(true);\n        return {\n          arg,\n          count: count++\n        };\n      });\n      expect(fn(\"one\")).toEqual({\n        arg: \"one\",\n        count: 0\n      });\n      expect(fn(\"one\")).toBe(fn(\"one\"));\n      expect(fn(\"two\")).toEqual({\n        arg: \"two\",\n        count: 1\n      });\n      expect(fn(\"two\")).toBe(fn(\"two\"));\n      expect(fn(\"one\")).not.toEqual(fn(\"two\"));\n    });",
            "file": "caching-api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should allow disabling caching with cache(false)",
            "suites": [
                "caching API",
                "simple"
            ],
            "updatePoint": {
                "line": 369,
                "column": 56,
                "index": 9762
            },
            "line": 369,
            "code": "    it(\"should allow disabling caching with cache(false)\", () => {\n      let count = 0;\n      const fn = makeStrongCacheSync((arg, cache) => {\n        cache = cache.simple();\n        cache(false);\n        return {\n          arg,\n          count: count++\n        };\n      });\n      expect(fn(\"one\")).toEqual({\n        arg: \"one\",\n        count: 0\n      });\n      expect(fn(\"one\")).toEqual({\n        arg: \"one\",\n        count: 1\n      });\n      expect(fn(\"one\")).not.toEqual(fn(\"one\"));\n      expect(fn(\"two\")).toEqual({\n        arg: \"two\",\n        count: 4\n      });\n      expect(fn(\"two\")).toEqual({\n        arg: \"two\",\n        count: 5\n      });\n      expect(fn(\"two\")).not.toEqual(fn(\"two\"));\n      expect(fn(\"one\")).not.toEqual(fn(\"two\"));\n    });",
            "file": "caching-api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should allow caching based on a value with cache(fn)",
            "suites": [
                "caching API",
                "simple"
            ],
            "updatePoint": {
                "line": 399,
                "column": 60,
                "index": 10517
            },
            "line": 399,
            "code": "    it(\"should allow caching based on a value with cache(fn)\", () => {\n      let count = 0;\n      let other = \"default\";\n      const fn = makeStrongCacheSync((arg, cache) => {\n        cache = cache.simple();\n        const val = cache(() => other);\n        return {\n          arg,\n          val,\n          count: count++\n        };\n      });\n      expect(fn(\"one\")).toEqual({\n        arg: \"one\",\n        val: \"default\",\n        count: 0\n      });\n      expect(fn(\"one\")).toBe(fn(\"one\"));\n      expect(fn(\"two\")).toEqual({\n        arg: \"two\",\n        val: \"default\",\n        count: 1\n      });\n      expect(fn(\"two\")).toBe(fn(\"two\"));\n      other = \"new\";\n      expect(fn(\"one\")).toEqual({\n        arg: \"one\",\n        val: \"new\",\n        count: 2\n      });\n      expect(fn(\"one\")).toBe(fn(\"one\"));\n      expect(fn(\"two\")).toEqual({\n        arg: \"two\",\n        val: \"new\",\n        count: 3\n      });\n      expect(fn(\"two\")).toBe(fn(\"two\"));\n      other = \"default\";\n      expect(fn(\"one\")).toEqual({\n        arg: \"one\",\n        val: \"default\",\n        count: 0\n      });\n      expect(fn(\"one\")).toBe(fn(\"one\"));\n      expect(fn(\"two\")).toEqual({\n        arg: \"two\",\n        val: \"default\",\n        count: 1\n      });\n      expect(fn(\"two\")).toBe(fn(\"two\"));\n      other = \"new\";\n      expect(fn(\"one\")).toEqual({\n        arg: \"one\",\n        val: \"new\",\n        count: 2\n      });\n      expect(fn(\"one\")).toBe(fn(\"one\"));\n      expect(fn(\"two\")).toEqual({\n        arg: \"two\",\n        val: \"new\",\n        count: 3\n      });\n      expect(fn(\"two\")).toBe(fn(\"two\"));\n    });",
            "file": "caching-api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should throw if the cache is configured asynchronously",
            "suites": [
                "caching API",
                "async"
            ],
            "updatePoint": {
                "line": 469,
                "column": 62,
                "index": 12222
            },
            "line": 469,
            "code": "    it(\"should throw if the cache is configured asynchronously\", async () => {\n      const fn = gensync(makeStrongCache(function* (arg, cache) {\n        yield* wait(1000);\n        cache.never();\n        return {\n          arg\n        };\n      })).async;\n      await expect(fn(\"bar\")).rejects.toThrowErrorMatchingInlineSnapshot(`\"Cannot change caching after evaluation has completed.\"`);\n    });",
            "file": "caching-api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should allow asynchronous cache invalidation functions",
            "suites": [
                "caching API",
                "async"
            ],
            "updatePoint": {
                "line": 479,
                "column": 62,
                "index": 12617
            },
            "line": 479,
            "code": "    it(\"should allow asynchronous cache invalidation functions\", async () => {\n      const fn = gensync(makeStrongCache(function* (arg, cache) {\n        yield* waitFor(cache.using(async () => {\n          await wait.async(50);\n          return \"x\";\n        }));\n        return {\n          arg\n        };\n      })).async;\n      const [res1, res2] = await Promise.all([fn(\"foo\"), fn(\"foo\")]);\n      expect(res1).toBe(res2);\n    });",
            "file": "caching-api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should allow synchronous yield before cache configuration",
            "suites": [
                "caching API",
                "async"
            ],
            "updatePoint": {
                "line": 492,
                "column": 65,
                "index": 13049
            },
            "line": 492,
            "code": "    it(\"should allow synchronous yield before cache configuration\", async () => {\n      const fn = gensync(makeStrongCache(function* (arg, cache) {\n        yield* gensync({\n          sync: () => 2,\n          errback: cb => cb(null, 2)\n        })();\n        cache.forever();\n        return {\n          arg\n        };\n      })).async;\n      const [res1, res2] = await Promise.all([fn(\"foo\"), fn(\"foo\")]);\n      expect(res1).toBe(res2);\n    });",
            "file": "caching-api.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should process matching string values",
            "suites": [
                "buildConfigChain",
                "test",
                "single"
            ],
            "updatePoint": {
                "line": 81,
                "column": 47,
                "index": 2417
            },
            "line": 81,
            "code": "      it(\"should process matching string values\", () => {\n        const opts = loadOptions({\n          cwd: fixture(\"nonexistent-fake\"),\n          filename: fixture(\"nonexistent-fake\", \"src.js\"),\n          babelrc: false,\n          test: fixture(\"nonexistent-fake\"),\n          comments: true\n        });\n        expect(opts.comments).toBe(true);\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should process matching RegExp values",
            "suites": [
                "buildConfigChain",
                "test",
                "single"
            ],
            "updatePoint": {
                "line": 91,
                "column": 47,
                "index": 2773
            },
            "line": 91,
            "code": "      it(\"should process matching RegExp values\", () => {\n        const opts = loadOptions({\n          cwd: fixture(\"nonexistent-fake\"),\n          filename: fixture(\"nonexistent-fake\", \"src.js\"),\n          babelrc: false,\n          test: new RegExp(escapeRegExp(fixture(\"nonexistent-fake\"))),\n          comments: true\n        });\n        expect(opts.comments).toBe(true);\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should process matching function values",
            "suites": [
                "buildConfigChain",
                "test",
                "single"
            ],
            "updatePoint": {
                "line": 101,
                "column": 49,
                "index": 3157
            },
            "line": 101,
            "code": "      it(\"should process matching function values\", () => {\n        const opts = loadOptions({\n          cwd: fixture(\"nonexistent-fake\"),\n          filename: fixture(\"nonexistent-fake\", \"src.js\"),\n          babelrc: false,\n          test: p => p.indexOf(fixture(\"nonexistent-fake\")) === 0,\n          comments: true\n        });\n        expect(opts.comments).toBe(true);\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should process non-matching string values",
            "suites": [
                "buildConfigChain",
                "test",
                "single"
            ],
            "updatePoint": {
                "line": 111,
                "column": 51,
                "index": 3539
            },
            "line": 111,
            "code": "      it(\"should process non-matching string values\", () => {\n        const opts = loadOptions({\n          cwd: fixture(\"nonexistent-fake\"),\n          filename: fixture(\"nonexistent-fake\", \"src.js\"),\n          babelrc: false,\n          test: fixture(\"nonexistent-fake-unknown\"),\n          comments: true\n        });\n        expect(opts.comments).toBeUndefined();\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should process non-matching RegExp values",
            "suites": [
                "buildConfigChain",
                "test",
                "single"
            ],
            "updatePoint": {
                "line": 121,
                "column": 51,
                "index": 3912
            },
            "line": 121,
            "code": "      it(\"should process non-matching RegExp values\", () => {\n        const opts = loadOptions({\n          cwd: fixture(\"nonexistent-fake\"),\n          filename: fixture(\"nonexistent-fake\", \"src.js\"),\n          babelrc: false,\n          test: new RegExp(escapeRegExp(fixture(\"nonexistent-unknown\"))),\n          comments: true\n        });\n        expect(opts.comments).toBeUndefined();\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should process non-matching function values",
            "suites": [
                "buildConfigChain",
                "test",
                "single"
            ],
            "updatePoint": {
                "line": 131,
                "column": 53,
                "index": 4308
            },
            "line": 131,
            "code": "      it(\"should process non-matching function values\", () => {\n        const opts = loadOptions({\n          cwd: fixture(\"nonexistent-fake\"),\n          filename: fixture(\"nonexistent-fake\", \"src.js\"),\n          babelrc: false,\n          test: p => p.indexOf(fixture(\"nonexistent-unknown\")) === 0,\n          comments: true\n        });\n        expect(opts.comments).toBeUndefined();\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should process matching string values",
            "suites": [
                "buildConfigChain",
                "test",
                "array"
            ],
            "updatePoint": {
                "line": 143,
                "column": 47,
                "index": 4732
            },
            "line": 143,
            "code": "      it(\"should process matching string values\", () => {\n        const opts = loadOptions({\n          cwd: fixture(\"nonexistent-fake\"),\n          filename: fixture(\"nonexistent-fake\", \"src.js\"),\n          babelrc: false,\n          test: [fixture(\"nonexistent-fake\")],\n          comments: true\n        });\n        expect(opts.comments).toBe(true);\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should process matching RegExp values",
            "suites": [
                "buildConfigChain",
                "test",
                "array"
            ],
            "updatePoint": {
                "line": 153,
                "column": 47,
                "index": 5090
            },
            "line": 153,
            "code": "      it(\"should process matching RegExp values\", () => {\n        const opts = loadOptions({\n          cwd: fixture(\"nonexistent-fake\"),\n          filename: fixture(\"nonexistent-fake\", \"src.js\"),\n          babelrc: false,\n          test: [new RegExp(escapeRegExp(fixture(\"nonexistent-fake\")))],\n          comments: true\n        });\n        expect(opts.comments).toBe(true);\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should process matching function values",
            "suites": [
                "buildConfigChain",
                "test",
                "array"
            ],
            "updatePoint": {
                "line": 163,
                "column": 49,
                "index": 5476
            },
            "line": 163,
            "code": "      it(\"should process matching function values\", () => {\n        const opts = loadOptions({\n          cwd: fixture(\"nonexistent-fake\"),\n          filename: fixture(\"nonexistent-fake\", \"src.js\"),\n          babelrc: false,\n          test: [p => p.indexOf(fixture(\"nonexistent-fake\")) === 0],\n          comments: true\n        });\n        expect(opts.comments).toBe(true);\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should process non-matching string values",
            "suites": [
                "buildConfigChain",
                "test",
                "array"
            ],
            "updatePoint": {
                "line": 173,
                "column": 51,
                "index": 5860
            },
            "line": 173,
            "code": "      it(\"should process non-matching string values\", () => {\n        const opts = loadOptions({\n          cwd: fixture(\"nonexistent-fake\"),\n          filename: fixture(\"nonexistent-fake\", \"src.js\"),\n          babelrc: false,\n          test: [fixture(\"nonexistent-fake-unknown\")],\n          comments: true\n        });\n        expect(opts.comments).toBeUndefined();\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should process non-matching RegExp values",
            "suites": [
                "buildConfigChain",
                "test",
                "array"
            ],
            "updatePoint": {
                "line": 183,
                "column": 51,
                "index": 6235
            },
            "line": 183,
            "code": "      it(\"should process non-matching RegExp values\", () => {\n        const opts = loadOptions({\n          cwd: fixture(\"nonexistent-fake\"),\n          filename: fixture(\"nonexistent-fake\", \"src.js\"),\n          babelrc: false,\n          test: [new RegExp(escapeRegExp(fixture(\"nonexistent-unknown\")))],\n          comments: true\n        });\n        expect(opts.comments).toBeUndefined();\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should process non-matching function values",
            "suites": [
                "buildConfigChain",
                "test",
                "array"
            ],
            "updatePoint": {
                "line": 193,
                "column": 53,
                "index": 6633
            },
            "line": 193,
            "code": "      it(\"should process non-matching function values\", () => {\n        const opts = loadOptions({\n          cwd: fixture(\"nonexistent-fake\"),\n          filename: fixture(\"nonexistent-fake\", \"src.js\"),\n          babelrc: false,\n          test: [p => p.indexOf(fixture(\"nonexistent-unknown\")) === 0],\n          comments: true\n        });\n        expect(opts.comments).toBeUndefined();\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "requires filename if string",
            "suites": [
                "buildConfigChain",
                "test",
                "filename requirement",
                "in config"
            ],
            "updatePoint": {
                "line": 211,
                "column": 39,
                "index": 7229
            },
            "line": 211,
            "code": "        it(\"requires filename if string\", () => {\n          expect(() => loadOptions({\n            ...BASE_OPTS,\n            test: fixture(\"nonexistent-fake\")\n          })).toThrow(/no filename was passed/);\n        });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "requires filename if RegExp",
            "suites": [
                "buildConfigChain",
                "test",
                "filename requirement",
                "in config"
            ],
            "updatePoint": {
                "line": 217,
                "column": 39,
                "index": 7449
            },
            "line": 217,
            "code": "        it(\"requires filename if RegExp\", () => {\n          expect(() => loadOptions({\n            ...BASE_OPTS,\n            test: /file/\n          })).toThrow(/no filename was passed/);\n        });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "does not require filename if function",
            "suites": [
                "buildConfigChain",
                "test",
                "filename requirement",
                "in config"
            ],
            "updatePoint": {
                "line": 223,
                "column": 49,
                "index": 7658
            },
            "line": 223,
            "code": "        it(\"does not require filename if function\", () => {\n          const mock = jest.fn().mockReturnValue(true);\n          expect(() => loadOptions({\n            ...BASE_OPTS,\n            test: mock\n          })).not.toThrow();\n          expect(mock).toHaveBeenCalledWith(undefined, expect.anything());\n          expect(() => loadOptions({\n            ...BASE_OPTS,\n            filename: \"some-filename\",\n            test: mock\n          })).not.toThrow();\n          expect(mock.mock.calls[1][0].endsWith(\"some-filename\")).toBe(true);\n        });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "requires filename if string",
            "suites": [
                "buildConfigChain",
                "test",
                "filename requirement",
                "in preset"
            ],
            "updatePoint": {
                "line": 239,
                "column": 39,
                "index": 8244
            },
            "line": 239,
            "code": "        it(\"requires filename if string\", () => {\n          expect(() => loadOptions({\n            ...BASE_OPTS,\n            presets: [() => ({\n              test: fixture(\"nonexistent-fake\")\n            })]\n          })).toThrow(/requires a filename/);\n        });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "requires filename if RegExp",
            "suites": [
                "buildConfigChain",
                "test",
                "filename requirement",
                "in preset"
            ],
            "updatePoint": {
                "line": 247,
                "column": 39,
                "index": 8510
            },
            "line": 247,
            "code": "        it(\"requires filename if RegExp\", () => {\n          expect(() => loadOptions({\n            ...BASE_OPTS,\n            presets: [() => ({\n              test: /file/\n            })]\n          })).toThrow(/requires a filename/);\n        });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "does not require filename if function",
            "suites": [
                "buildConfigChain",
                "test",
                "filename requirement",
                "in preset"
            ],
            "updatePoint": {
                "line": 255,
                "column": 49,
                "index": 8765
            },
            "line": 255,
            "code": "        it(\"does not require filename if function\", () => {\n          const mock = jest.fn().mockReturnValue(true);\n          expect(() => loadOptions({\n            ...BASE_OPTS,\n            presets: [() => ({\n              test: mock\n            })]\n          })).not.toThrow();\n          expect(mock).toHaveBeenCalledWith(undefined, expect.anything());\n          expect(() => loadOptions({\n            ...BASE_OPTS,\n            filename: \"some-filename\",\n            presets: [() => ({\n              test: mock\n            })]\n          })).not.toThrow();\n          expect(mock.mock.calls[1][0].endsWith(\"some-filename\")).toBe(true);\n        });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should process matching string values",
            "suites": [
                "buildConfigChain",
                "include",
                "single"
            ],
            "updatePoint": {
                "line": 278,
                "column": 47,
                "index": 9496
            },
            "line": 278,
            "code": "      it(\"should process matching string values\", () => {\n        const opts = loadOptions({\n          cwd: fixture(\"nonexistent-fake\"),\n          filename: fixture(\"nonexistent-fake\", \"src.js\"),\n          babelrc: false,\n          include: fixture(\"nonexistent-fake\"),\n          comments: true\n        });\n        expect(opts.comments).toBe(true);\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should process matching RegExp values",
            "suites": [
                "buildConfigChain",
                "include",
                "single"
            ],
            "updatePoint": {
                "line": 288,
                "column": 47,
                "index": 9855
            },
            "line": 288,
            "code": "      it(\"should process matching RegExp values\", () => {\n        const opts = loadOptions({\n          cwd: fixture(\"nonexistent-fake\"),\n          filename: fixture(\"nonexistent-fake\", \"src.js\"),\n          babelrc: false,\n          include: new RegExp(escapeRegExp(fixture(\"nonexistent-fake\"))),\n          comments: true\n        });\n        expect(opts.comments).toBe(true);\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should process matching function values",
            "suites": [
                "buildConfigChain",
                "include",
                "single"
            ],
            "updatePoint": {
                "line": 298,
                "column": 49,
                "index": 10242
            },
            "line": 298,
            "code": "      it(\"should process matching function values\", () => {\n        const opts = loadOptions({\n          cwd: fixture(\"nonexistent-fake\"),\n          filename: fixture(\"nonexistent-fake\", \"src.js\"),\n          babelrc: false,\n          include: p => p.indexOf(fixture(\"nonexistent-fake\")) === 0,\n          comments: true\n        });\n        expect(opts.comments).toBe(true);\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should process non-matching string values",
            "suites": [
                "buildConfigChain",
                "include",
                "single"
            ],
            "updatePoint": {
                "line": 308,
                "column": 51,
                "index": 10627
            },
            "line": 308,
            "code": "      it(\"should process non-matching string values\", () => {\n        const opts = loadOptions({\n          cwd: fixture(\"nonexistent-fake\"),\n          filename: fixture(\"nonexistent-fake\", \"src.js\"),\n          babelrc: false,\n          include: fixture(\"nonexistent-fake-unknown\"),\n          comments: true\n        });\n        expect(opts.comments).toBeUndefined();\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should process non-matching RegExp values",
            "suites": [
                "buildConfigChain",
                "include",
                "single"
            ],
            "updatePoint": {
                "line": 318,
                "column": 51,
                "index": 11003
            },
            "line": 318,
            "code": "      it(\"should process non-matching RegExp values\", () => {\n        const opts = loadOptions({\n          cwd: fixture(\"nonexistent-fake\"),\n          filename: fixture(\"nonexistent-fake\", \"src.js\"),\n          babelrc: false,\n          include: new RegExp(escapeRegExp(fixture(\"nonexistent-unknown\"))),\n          comments: true\n        });\n        expect(opts.comments).toBeUndefined();\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should process non-matching function values",
            "suites": [
                "buildConfigChain",
                "include",
                "single"
            ],
            "updatePoint": {
                "line": 328,
                "column": 53,
                "index": 11402
            },
            "line": 328,
            "code": "      it(\"should process non-matching function values\", () => {\n        const opts = loadOptions({\n          cwd: fixture(\"nonexistent-fake\"),\n          filename: fixture(\"nonexistent-fake\", \"src.js\"),\n          babelrc: false,\n          include: p => p.indexOf(fixture(\"nonexistent-unknown\")) === 0,\n          comments: true\n        });\n        expect(opts.comments).toBeUndefined();\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should process matching string values",
            "suites": [
                "buildConfigChain",
                "include",
                "array"
            ],
            "updatePoint": {
                "line": 340,
                "column": 47,
                "index": 11829
            },
            "line": 340,
            "code": "      it(\"should process matching string values\", () => {\n        const opts = loadOptions({\n          cwd: fixture(\"nonexistent-fake\"),\n          filename: fixture(\"nonexistent-fake\", \"src.js\"),\n          babelrc: false,\n          include: [fixture(\"nonexistent-fake\")],\n          comments: true\n        });\n        expect(opts.comments).toBe(true);\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should process matching RegExp values",
            "suites": [
                "buildConfigChain",
                "include",
                "array"
            ],
            "updatePoint": {
                "line": 350,
                "column": 47,
                "index": 12190
            },
            "line": 350,
            "code": "      it(\"should process matching RegExp values\", () => {\n        const opts = loadOptions({\n          cwd: fixture(\"nonexistent-fake\"),\n          filename: fixture(\"nonexistent-fake\", \"src.js\"),\n          babelrc: false,\n          include: [new RegExp(escapeRegExp(fixture(\"nonexistent-fake\")))],\n          comments: true\n        });\n        expect(opts.comments).toBe(true);\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should process matching function values",
            "suites": [
                "buildConfigChain",
                "include",
                "array"
            ],
            "updatePoint": {
                "line": 360,
                "column": 49,
                "index": 12579
            },
            "line": 360,
            "code": "      it(\"should process matching function values\", () => {\n        const opts = loadOptions({\n          cwd: fixture(\"nonexistent-fake\"),\n          filename: fixture(\"nonexistent-fake\", \"src.js\"),\n          babelrc: false,\n          include: [p => p.indexOf(fixture(\"nonexistent-fake\")) === 0],\n          comments: true\n        });\n        expect(opts.comments).toBe(true);\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should process non-matching string values",
            "suites": [
                "buildConfigChain",
                "include",
                "array"
            ],
            "updatePoint": {
                "line": 370,
                "column": 51,
                "index": 12966
            },
            "line": 370,
            "code": "      it(\"should process non-matching string values\", () => {\n        const opts = loadOptions({\n          cwd: fixture(\"nonexistent-fake\"),\n          filename: fixture(\"nonexistent-fake\", \"src.js\"),\n          babelrc: false,\n          include: [fixture(\"nonexistent-fake-unknown\")],\n          comments: true\n        });\n        expect(opts.comments).toBeUndefined();\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should process non-matching RegExp values",
            "suites": [
                "buildConfigChain",
                "include",
                "array"
            ],
            "updatePoint": {
                "line": 380,
                "column": 51,
                "index": 13344
            },
            "line": 380,
            "code": "      it(\"should process non-matching RegExp values\", () => {\n        const opts = loadOptions({\n          cwd: fixture(\"nonexistent-fake\"),\n          filename: fixture(\"nonexistent-fake\", \"src.js\"),\n          babelrc: false,\n          include: [new RegExp(escapeRegExp(fixture(\"nonexistent-unknown\")))],\n          comments: true\n        });\n        expect(opts.comments).toBeUndefined();\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should process non-matching function values",
            "suites": [
                "buildConfigChain",
                "include",
                "array"
            ],
            "updatePoint": {
                "line": 390,
                "column": 53,
                "index": 13745
            },
            "line": 390,
            "code": "      it(\"should process non-matching function values\", () => {\n        const opts = loadOptions({\n          cwd: fixture(\"nonexistent-fake\"),\n          filename: fixture(\"nonexistent-fake\", \"src.js\"),\n          babelrc: false,\n          include: [p => p.indexOf(fixture(\"nonexistent-unknown\")) === 0],\n          comments: true\n        });\n        expect(opts.comments).toBeUndefined();\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should process matching string values",
            "suites": [
                "buildConfigChain",
                "exclude",
                "single"
            ],
            "updatePoint": {
                "line": 404,
                "column": 47,
                "index": 14211
            },
            "line": 404,
            "code": "      it(\"should process matching string values\", () => {\n        const opts = loadOptions({\n          cwd: fixture(\"nonexistent-fake\"),\n          filename: fixture(\"nonexistent-fake\", \"src.js\"),\n          babelrc: false,\n          exclude: fixture(\"nonexistent-fake\"),\n          comments: true\n        });\n        expect(opts.comments).toBeUndefined();\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should process matching RegExp values",
            "suites": [
                "buildConfigChain",
                "exclude",
                "single"
            ],
            "updatePoint": {
                "line": 414,
                "column": 47,
                "index": 14575
            },
            "line": 414,
            "code": "      it(\"should process matching RegExp values\", () => {\n        const opts = loadOptions({\n          cwd: fixture(\"nonexistent-fake\"),\n          filename: fixture(\"nonexistent-fake\", \"src.js\"),\n          babelrc: false,\n          exclude: new RegExp(escapeRegExp(fixture(\"nonexistent-fake\"))),\n          comments: true\n        });\n        expect(opts.comments).toBeUndefined();\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should process matching function values",
            "suites": [
                "buildConfigChain",
                "exclude",
                "single"
            ],
            "updatePoint": {
                "line": 424,
                "column": 49,
                "index": 14967
            },
            "line": 424,
            "code": "      it(\"should process matching function values\", () => {\n        const opts = loadOptions({\n          cwd: fixture(\"nonexistent-fake\"),\n          filename: fixture(\"nonexistent-fake\", \"src.js\"),\n          babelrc: false,\n          exclude: p => p.indexOf(fixture(\"nonexistent-fake\")) === 0,\n          comments: true\n        });\n        expect(opts.comments).toBeUndefined();\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should process non-matching string values",
            "suites": [
                "buildConfigChain",
                "exclude",
                "single"
            ],
            "updatePoint": {
                "line": 434,
                "column": 51,
                "index": 15357
            },
            "line": 434,
            "code": "      it(\"should process non-matching string values\", () => {\n        const opts = loadOptions({\n          cwd: fixture(\"nonexistent-fake\"),\n          filename: fixture(\"nonexistent-fake\", \"src.js\"),\n          babelrc: false,\n          exclude: fixture(\"nonexistent-fake-unknown\"),\n          comments: true\n        });\n        expect(opts.comments).toBe(true);\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should process non-matching RegExp values",
            "suites": [
                "buildConfigChain",
                "exclude",
                "single"
            ],
            "updatePoint": {
                "line": 444,
                "column": 51,
                "index": 15728
            },
            "line": 444,
            "code": "      it(\"should process non-matching RegExp values\", () => {\n        const opts = loadOptions({\n          cwd: fixture(\"nonexistent-fake\"),\n          filename: fixture(\"nonexistent-fake\", \"src.js\"),\n          babelrc: false,\n          exclude: new RegExp(escapeRegExp(fixture(\"nonexistent-unknown\"))),\n          comments: true\n        });\n        expect(opts.comments).toBe(true);\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should process non-matching function values",
            "suites": [
                "buildConfigChain",
                "exclude",
                "single"
            ],
            "updatePoint": {
                "line": 454,
                "column": 53,
                "index": 16122
            },
            "line": 454,
            "code": "      it(\"should process non-matching function values\", () => {\n        const opts = loadOptions({\n          cwd: fixture(\"nonexistent-fake\"),\n          filename: fixture(\"nonexistent-fake\", \"src.js\"),\n          babelrc: false,\n          exclude: p => p.indexOf(fixture(\"nonexistent-unknown\")) === 0,\n          comments: true\n        });\n        expect(opts.comments).toBe(true);\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should process matching string values",
            "suites": [
                "buildConfigChain",
                "exclude",
                "array"
            ],
            "updatePoint": {
                "line": 466,
                "column": 47,
                "index": 16544
            },
            "line": 466,
            "code": "      it(\"should process matching string values\", () => {\n        const opts = loadOptions({\n          cwd: fixture(\"nonexistent-fake\"),\n          filename: fixture(\"nonexistent-fake\", \"src.js\"),\n          babelrc: false,\n          exclude: [fixture(\"nonexistent-fake\")],\n          comments: true\n        });\n        expect(opts.comments).toBeUndefined();\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should process matching RegExp values",
            "suites": [
                "buildConfigChain",
                "exclude",
                "array"
            ],
            "updatePoint": {
                "line": 476,
                "column": 47,
                "index": 16910
            },
            "line": 476,
            "code": "      it(\"should process matching RegExp values\", () => {\n        const opts = loadOptions({\n          cwd: fixture(\"nonexistent-fake\"),\n          filename: fixture(\"nonexistent-fake\", \"src.js\"),\n          babelrc: false,\n          exclude: [new RegExp(escapeRegExp(fixture(\"nonexistent-fake\")))],\n          comments: true\n        });\n        expect(opts.comments).toBeUndefined();\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should process matching function values",
            "suites": [
                "buildConfigChain",
                "exclude",
                "array"
            ],
            "updatePoint": {
                "line": 486,
                "column": 49,
                "index": 17304
            },
            "line": 486,
            "code": "      it(\"should process matching function values\", () => {\n        const opts = loadOptions({\n          cwd: fixture(\"nonexistent-fake\"),\n          filename: fixture(\"nonexistent-fake\", \"src.js\"),\n          babelrc: false,\n          exclude: [p => p.indexOf(fixture(\"nonexistent-fake\")) === 0],\n          comments: true\n        });\n        expect(opts.comments).toBeUndefined();\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should process non-matching string values",
            "suites": [
                "buildConfigChain",
                "exclude",
                "array"
            ],
            "updatePoint": {
                "line": 496,
                "column": 51,
                "index": 17696
            },
            "line": 496,
            "code": "      it(\"should process non-matching string values\", () => {\n        const opts = loadOptions({\n          cwd: fixture(\"nonexistent-fake\"),\n          filename: fixture(\"nonexistent-fake\", \"src.js\"),\n          babelrc: false,\n          exclude: [fixture(\"nonexistent-fake-unknown\")],\n          comments: true\n        });\n        expect(opts.comments).toBe(true);\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should process non-matching RegExp values",
            "suites": [
                "buildConfigChain",
                "exclude",
                "array"
            ],
            "updatePoint": {
                "line": 506,
                "column": 51,
                "index": 18069
            },
            "line": 506,
            "code": "      it(\"should process non-matching RegExp values\", () => {\n        const opts = loadOptions({\n          cwd: fixture(\"nonexistent-fake\"),\n          filename: fixture(\"nonexistent-fake\", \"src.js\"),\n          babelrc: false,\n          exclude: [new RegExp(escapeRegExp(fixture(\"nonexistent-unknown\")))],\n          comments: true\n        });\n        expect(opts.comments).toBe(true);\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should process non-matching function values",
            "suites": [
                "buildConfigChain",
                "exclude",
                "array"
            ],
            "updatePoint": {
                "line": 516,
                "column": 53,
                "index": 18465
            },
            "line": 516,
            "code": "      it(\"should process non-matching function values\", () => {\n        const opts = loadOptions({\n          cwd: fixture(\"nonexistent-fake\"),\n          filename: fixture(\"nonexistent-fake\", \"src.js\"),\n          babelrc: false,\n          exclude: [p => p.indexOf(fixture(\"nonexistent-unknown\")) === 0],\n          comments: true\n        });\n        expect(opts.comments).toBe(true);\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should ignore files that match",
            "suites": [
                "buildConfigChain",
                "ignore"
            ],
            "updatePoint": {
                "line": 529,
                "column": 38,
                "index": 18885
            },
            "line": 529,
            "code": "    it(\"should ignore files that match\", () => {\n      const opts = loadOptions({\n        cwd: fixture(\"nonexistent-fake\"),\n        filename: fixture(\"nonexistent-fake\", \"src.js\"),\n        babelrc: false,\n        ignore: [fixture(\"nonexistent-fake\", \"src.js\"),\n        // We had a regression where multiple ignore patterns broke things, so\n        // we keep some extra random items in here.\n        fixture(\"nonexistent-fake\", \"other.js\"), fixture(\"nonexistent-fake\", \"misc.js\")]\n      });\n      expect(opts).toBeNull();\n    });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should not ignore files that don't match",
            "suites": [
                "buildConfigChain",
                "ignore"
            ],
            "updatePoint": {
                "line": 541,
                "column": 48,
                "index": 19425
            },
            "line": 541,
            "code": "    it(\"should not ignore files that don't match\", () => {\n      const opts = loadOptions({\n        cwd: fixture(\"nonexistent-fake\"),\n        filename: fixture(\"nonexistent-fake\", \"src.js\"),\n        babelrc: false,\n        ignore: [fixture(\"nonexistent-fake\", \"other.js\"), fixture(\"nonexistent-fake\", \"misc.js\")]\n      });\n      expect(opts).not.toBeNull();\n    });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should ignore files that don't match",
            "suites": [
                "buildConfigChain",
                "only"
            ],
            "updatePoint": {
                "line": 552,
                "column": 44,
                "index": 19820
            },
            "line": 552,
            "code": "    it(\"should ignore files that don't match\", () => {\n      const opts = loadOptions({\n        cwd: fixture(\"nonexistent-fake\"),\n        filename: fixture(\"nonexistent-fake\", \"src.js\"),\n        babelrc: false,\n        only: [fixture(\"nonexistent-fake\", \"other.js\"), fixture(\"nonexistent-fake\", \"misc.js\")]\n      });\n      expect(opts).toBeNull();\n    });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should not ignore files that match",
            "suites": [
                "buildConfigChain",
                "only"
            ],
            "updatePoint": {
                "line": 561,
                "column": 42,
                "index": 20174
            },
            "line": 561,
            "code": "    it(\"should not ignore files that match\", () => {\n      const opts = loadOptions({\n        cwd: fixture(\"nonexistent-fake\"),\n        filename: fixture(\"nonexistent-fake\", \"src.js\"),\n        babelrc: false,\n        only: [fixture(\"nonexistent-fake\", \"src.js\"), fixture(\"nonexistent-fake\", \"misc.js\")]\n      });\n      expect(opts).not.toBeNull();\n    });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should ignore files that match ignore and don't match only",
            "suites": [
                "buildConfigChain",
                "ignore/only"
            ],
            "updatePoint": {
                "line": 572,
                "column": 66,
                "index": 20594
            },
            "line": 572,
            "code": "    it(\"should ignore files that match ignore and don't match only\", () => {\n      const opts = loadOptions({\n        cwd: fixture(\"nonexistent-fake\"),\n        filename: fixture(\"nonexistent-fake\", \"src.js\"),\n        babelrc: false,\n        ignore: [fixture(\"nonexistent-fake\", \"src.js\")],\n        only: []\n      });\n      expect(opts).toBeNull();\n    });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should ignore files that match ignore and also only",
            "suites": [
                "buildConfigChain",
                "ignore/only"
            ],
            "updatePoint": {
                "line": 582,
                "column": 59,
                "index": 20943
            },
            "line": 582,
            "code": "    it(\"should ignore files that match ignore and also only\", () => {\n      const opts = loadOptions({\n        cwd: fixture(\"nonexistent-fake\"),\n        filename: fixture(\"nonexistent-fake\", \"src.js\"),\n        babelrc: false,\n        ignore: [fixture(\"nonexistent-fake\", \"src.js\")],\n        only: [fixture(\"nonexistent-fake\", \"src.js\")]\n      });\n      expect(opts).toBeNull();\n    });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should not ignore files that match only and not ignore",
            "suites": [
                "buildConfigChain",
                "ignore/only"
            ],
            "updatePoint": {
                "line": 592,
                "column": 62,
                "index": 21332
            },
            "line": 592,
            "code": "    it(\"should not ignore files that match only and not ignore\", () => {\n      const opts = loadOptions({\n        cwd: fixture(\"nonexistent-fake\"),\n        filename: fixture(\"nonexistent-fake\", \"src.js\"),\n        babelrc: false,\n        only: [fixture(\"nonexistent-fake\", \"src.js\")]\n      });\n      expect(opts).not.toBeNull();\n    });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should not ignore files when no ignore/only are specified",
            "suites": [
                "buildConfigChain",
                "ignore/only"
            ],
            "updatePoint": {
                "line": 601,
                "column": 65,
                "index": 21671
            },
            "line": 601,
            "code": "    it(\"should not ignore files when no ignore/only are specified\", () => {\n      const opts = loadOptions({\n        cwd: fixture(\"nonexistent-fake\"),\n        filename: fixture(\"nonexistent-fake\", \"src.js\"),\n        babelrc: false\n      });\n      expect(opts).not.toBeNull();\n    });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should allow negation of only",
            "suites": [
                "buildConfigChain",
                "ignore/only"
            ],
            "updatePoint": {
                "line": 609,
                "column": 37,
                "index": 21927
            },
            "line": 609,
            "code": "    it(\"should allow negation of only\", () => {\n      const opts1 = loadOptions({\n        cwd: fixture(\"nonexistent-fake\"),\n        filename: fixture(\"nonexistent-fake\", \"src.js\"),\n        babelrc: false,\n        only: [\"!\" + fixture(\"nonexistent-fake\"), fixture(\"nonexistent-fake\", \"other.js\")]\n      });\n      expect(opts1).toBeNull();\n      const opts2 = loadOptions({\n        cwd: fixture(\"nonexistent-fake\"),\n        filename: fixture(\"nonexistent-fake\", \"src.js\"),\n        babelrc: false,\n        only: [\"!\" + fixture(\"nonexistent-fake\"), fixture(\"nonexistent-fake\", \"src.js\")]\n      });\n      expect(opts2).not.toBeNull();\n      const opts3 = loadOptions({\n        cwd: fixture(\"nonexistent-fake\"),\n        filename: fixture(\"nonexistent-fake\", \"folder\", \"src.js\"),\n        babelrc: false,\n        only: [\"!\" + fixture(\"nonexistent-fake\"), fixture(\"nonexistent-fake\", \"folder\")]\n      });\n      expect(opts3).not.toBeNull();\n    });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should allow negation of ignore",
            "suites": [
                "buildConfigChain",
                "ignore/only"
            ],
            "updatePoint": {
                "line": 632,
                "column": 39,
                "index": 22869
            },
            "line": 632,
            "code": "    it(\"should allow negation of ignore\", () => {\n      const opts1 = loadOptions({\n        cwd: fixture(\"nonexistent-fake\"),\n        filename: fixture(\"nonexistent-fake\", \"src.js\"),\n        babelrc: false,\n        ignore: [\"!\" + fixture(\"nonexistent-fake\", \"other.js\"), fixture(\"nonexistent-fake\")]\n      });\n      expect(opts1).toBeNull();\n\n      // Tests disabled pending https://github.com/babel/babel/issues/6907\n      // const opts2 = loadOptions({\n      //   cwd: fixture(\"nonexistent-fake\"),\n      //   filename: fixture(\"nonexistent-fake\", \"src.js\"),\n      //   babelrc: false,\n      //   ignore: [\n      //     \"!\" + fixture(\"nonexistent-fake\", \"src.js\"),\n      //     fixture(\"nonexistent-fake\"),\n      //   ],\n      // });\n      // expect(opts2).not.toBeNull();\n      //\n      // const opts3 = loadOptions({\n      //   cwd: fixture(\"nonexistent-fake\"),\n      //   filename: fixture(\"nonexistent-fake\", \"folder\", \"src.js\"),\n      //   babelrc: false,\n      //   ignore: [\n      //     \"!\" + fixture(\"nonexistent-fake\", \"folder\"),\n      //     fixture(\"nonexistent-fake\"),\n      //   ],\n      // });\n      // expect(opts3).not.toBeNull();\n    });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should not cache the input options by identity",
            "suites": [
                "buildConfigChain",
                "caching",
                "programmatic options"
            ],
            "updatePoint": {
                "line": 670,
                "column": 56,
                "index": 24211
            },
            "line": 670,
            "code": "      it(\"should not cache the input options by identity\", () => {\n        const inputOpts = {\n          plugins: plugins1\n        };\n        const opts1 = loadOptions(inputOpts);\n        inputOpts.plugins = plugins2;\n        const opts2 = loadOptions(inputOpts);\n        expect(opts1.plugins).toHaveLength(1);\n        expect(opts2.plugins).toHaveLength(1);\n        expect(opts1.plugins[0]).not.toBe(opts2.plugins[1]);\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should cache the env plugins by identity",
            "suites": [
                "buildConfigChain",
                "caching",
                "programmatic options"
            ],
            "updatePoint": {
                "line": 681,
                "column": 50,
                "index": 24634
            },
            "line": 681,
            "code": "      it(\"should cache the env plugins by identity\", () => {\n        const plugins = [() => ({})];\n        const opts1 = loadOptions({\n          envName: \"foo\",\n          env: {\n            foo: {\n              plugins\n            }\n          }\n        });\n        const opts2 = loadOptions({\n          envName: \"foo\",\n          env: {\n            foo: {\n              plugins\n            }\n          }\n        });\n        expect(opts1.plugins).toHaveLength(1);\n        expect(opts2.plugins).toHaveLength(1);\n        expect(opts1.plugins[0]).toBe(opts2.plugins[0]);\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should cache the env presets by identity",
            "suites": [
                "buildConfigChain",
                "caching",
                "programmatic options"
            ],
            "updatePoint": {
                "line": 703,
                "column": 50,
                "index": 25210
            },
            "line": 703,
            "code": "      it(\"should cache the env presets by identity\", () => {\n        const presets = [() => ({\n          plugins: [() => ({})]\n        })];\n        const opts1 = loadOptions({\n          envName: \"foo\",\n          env: {\n            foo: {\n              presets\n            }\n          }\n        });\n        const opts2 = loadOptions({\n          envName: \"foo\",\n          env: {\n            foo: {\n              presets\n            }\n          }\n        });\n        expect(opts1.plugins).toHaveLength(1);\n        expect(opts2.plugins).toHaveLength(1);\n        expect(opts1.plugins[0]).toBe(opts2.plugins[0]);\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should cache the plugin options by identity",
            "suites": [
                "buildConfigChain",
                "caching",
                "programmatic options"
            ],
            "updatePoint": {
                "line": 727,
                "column": 53,
                "index": 25830
            },
            "line": 727,
            "code": "      it(\"should cache the plugin options by identity\", () => {\n        const plugins = [() => ({})];\n        const opts1 = loadOptions({\n          plugins\n        });\n        const opts2 = loadOptions({\n          plugins\n        });\n        expect(opts1.plugins).toHaveLength(1);\n        expect(opts2.plugins).toHaveLength(1);\n        expect(opts1.plugins[0]).toBe(opts2.plugins[0]);\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should cache the presets options by identity",
            "suites": [
                "buildConfigChain",
                "caching",
                "programmatic options"
            ],
            "updatePoint": {
                "line": 739,
                "column": 54,
                "index": 26226
            },
            "line": 739,
            "code": "      it(\"should cache the presets options by identity\", () => {\n        const presets = [() => ({\n          plugins: [() => ({})]\n        })];\n        const opts1 = loadOptions({\n          presets\n        });\n        const opts2 = loadOptions({\n          presets\n        });\n        expect(opts1.plugins).toHaveLength(1);\n        expect(opts2.plugins).toHaveLength(1);\n        expect(opts1.plugins[0]).toBe(opts2.plugins[0]);\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should not cache the presets options with passPerPreset",
            "suites": [
                "buildConfigChain",
                "caching",
                "programmatic options"
            ],
            "updatePoint": {
                "line": 753,
                "column": 65,
                "index": 26674
            },
            "line": 753,
            "code": "      it(\"should not cache the presets options with passPerPreset\", () => {\n        const presets = [() => ({\n          plugins: [() => ({})]\n        })];\n        const opts1 = loadOptions({\n          presets\n        });\n        const opts2 = loadOptions({\n          presets,\n          passPerPreset: true\n        });\n        const opts3 = loadOptions({\n          presets,\n          passPerPreset: false\n        });\n        expect(opts1.plugins).toHaveLength(1);\n        expect(opts2.plugins).toHaveLength(0);\n        expect(opts3.plugins).toHaveLength(1);\n        expect(opts1.plugins[0]).toBe(opts3.plugins[0]);\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should cache package.json files by mtime",
            "suites": [
                "buildConfigChain",
                "caching",
                "config file options"
            ],
            "updatePoint": {
                "line": 779,
                "column": 50,
                "index": 27505
            },
            "line": 779,
            "code": "      it(\"should cache package.json files by mtime\", () => {\n        const filename = fixture(\"complex-plugin-config\", \"config-identity\", \"pkg\", \"src.js\");\n        const pkgJSON = fixture(\"complex-plugin-config\", \"config-identity\", \"pkg\", \"package.json\");\n        const opts1 = loadOptions({\n          filename,\n          cwd: path.dirname(filename)\n        });\n        const opts2 = loadOptions({\n          filename,\n          cwd: path.dirname(filename)\n        });\n        touch(pkgJSON);\n        const opts3 = loadOptions({\n          filename,\n          cwd: path.dirname(filename)\n        });\n        const opts4 = loadOptions({\n          filename,\n          cwd: path.dirname(filename)\n        });\n        expect(opts1.plugins).toHaveLength(1);\n        expect(opts2.plugins).toHaveLength(1);\n        expect(opts1.plugins[0]).toBe(opts2.plugins[0]);\n        expect(opts1.plugins).toHaveLength(1);\n        expect(opts2.plugins).toHaveLength(1);\n        expect(opts3.plugins[0]).toBe(opts4.plugins[0]);\n\n        // Identity changed after touch().\n        expect(opts1.plugins[0]).not.toBe(opts3.plugins[0]);\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should cache .babelrc files by mtime",
            "suites": [
                "buildConfigChain",
                "caching",
                "config file options"
            ],
            "updatePoint": {
                "line": 809,
                "column": 46,
                "index": 28622
            },
            "line": 809,
            "code": "      it(\"should cache .babelrc files by mtime\", () => {\n        const filename = fixture(\"complex-plugin-config\", \"config-identity\", \"babelrc\", \"src.js\");\n        const babelrcFile = fixture(\"complex-plugin-config\", \"config-identity\", \"babelrc\", \".babelrc\");\n        const opts1 = loadOptions({\n          filename,\n          cwd: path.dirname(filename)\n        });\n        const opts2 = loadOptions({\n          filename,\n          cwd: path.dirname(filename)\n        });\n        touch(babelrcFile);\n        const opts3 = loadOptions({\n          filename,\n          cwd: path.dirname(filename)\n        });\n        const opts4 = loadOptions({\n          filename,\n          cwd: path.dirname(filename)\n        });\n        expect(opts1.plugins).toHaveLength(1);\n        expect(opts2.plugins).toHaveLength(1);\n        expect(opts1.plugins[0]).toBe(opts2.plugins[0]);\n        expect(opts3.plugins).toHaveLength(1);\n        expect(opts4.plugins).toHaveLength(1);\n        expect(opts3.plugins[0]).toBe(opts4.plugins[0]);\n\n        // Identity changed after touch().\n        expect(opts1.plugins[0]).not.toBe(opts3.plugins[0]);\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should cache .babelrc.js files programmable behavior",
            "suites": [
                "buildConfigChain",
                "caching",
                "config file options"
            ],
            "updatePoint": {
                "line": 839,
                "column": 62,
                "index": 29767
            },
            "line": 839,
            "code": "      it(\"should cache .babelrc.js files programmable behavior\", () => {\n        const filename = fixture(\"complex-plugin-config\", \"config-identity\", \"babelrc-js\", \"src.js\");\n        const opts1 = loadOptions({\n          filename,\n          cwd: path.dirname(filename)\n        });\n        const opts2 = loadOptions({\n          filename,\n          cwd: path.dirname(filename)\n        });\n        const opts3 = loadOptions({\n          filename,\n          envName: \"new-env\",\n          cwd: path.dirname(filename)\n        });\n        const opts4 = loadOptions({\n          filename,\n          envName: \"new-env\",\n          cwd: path.dirname(filename)\n        });\n        expect(opts1.plugins).toHaveLength(1);\n        expect(opts2.plugins).toHaveLength(1);\n        expect(opts1.plugins[0]).toBe(opts2.plugins[0]);\n        expect(opts3.plugins).toHaveLength(1);\n        expect(opts4.plugins).toHaveLength(1);\n        expect(opts3.plugins[0]).toBe(opts4.plugins[0]);\n\n        // Identity changed with different .env\n        expect(opts1.plugins[0]).not.toBe(opts3.plugins[0]);\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should apply matching overrides over base configs",
            "suites": [
                "buildConfigChain",
                "overrides merging"
            ],
            "updatePoint": {
                "line": 872,
                "column": 57,
                "index": 30897
            },
            "line": 872,
            "code": "    it(\"should apply matching overrides over base configs\", () => {\n      const opts = loadOptions({\n        cwd: fixture(\"nonexistent-fake\"),\n        filename: fixture(\"nonexistent-fake\", \"src.js\"),\n        babelrc: false,\n        comments: true,\n        overrides: [{\n          test: fixture(\"nonexistent-fake\"),\n          comments: false\n        }]\n      });\n      expect(opts.comments).toBe(false);\n    });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should not apply non-matching overrides over base configs",
            "suites": [
                "buildConfigChain",
                "overrides merging"
            ],
            "updatePoint": {
                "line": 885,
                "column": 65,
                "index": 31316
            },
            "line": 885,
            "code": "    it(\"should not apply non-matching overrides over base configs\", () => {\n      const opts = loadOptions({\n        cwd: fixture(\"nonexistent-fake\"),\n        filename: fixture(\"nonexistent-fake\", \"src.js\"),\n        babelrc: false,\n        comments: true,\n        overrides: [{\n          test: fixture(\"nonexistent-unknown\"),\n          comments: false\n        }]\n      });\n      expect(opts.comments).toBe(true);\n    });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should remove the overrides and filtering fields from the options",
            "suites": [
                "buildConfigChain",
                "overrides merging"
            ],
            "updatePoint": {
                "line": 898,
                "column": 73,
                "index": 31745
            },
            "line": 898,
            "code": "    it(\"should remove the overrides and filtering fields from the options\", () => {\n      const opts = loadOptions({\n        cwd: fixture(\"nonexistent-fake\"),\n        filename: fixture(\"nonexistent-fake\", \"src.js\"),\n        babelrc: false,\n        overrides: [],\n        test: /^/,\n        include: /^/,\n        exclude: []\n      });\n      expect(opts.overrides).toBeUndefined();\n      expect(opts.test).toBeUndefined();\n      expect(opts.include).toBeUndefined();\n      expect(opts.exclude).toBeUndefined();\n    });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should load %s synchronously",
            "suites": [
                "buildConfigChain",
                "config files",
                "root"
            ],
            "line": 944,
            "code": "      test.each([\"babel.config.json\", \"babel.config.js\", \"babel.config.cjs\"])(\"should load %s synchronously\", async name => {\n        const {\n          cwd,\n          tmp,\n          config\n        } = await getTemp(`babel-test-load-config-sync-${name}`);\n        const filename = tmp(\"src.js\");\n        await config(name);\n        expect(loadOptions({\n          filename,\n          cwd\n        })).toEqual({\n          ...getDefaults(),\n          filename,\n          cwd,\n          root: cwd,\n          comments: true\n        });\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should not load babel.config.mjs synchronously",
            "suites": [
                "buildConfigChain",
                "config files",
                "root"
            ],
            "updatePoint": {
                "line": 963,
                "column": 58,
                "index": 33609
            },
            "line": 963,
            "code": "      test(\"should not load babel.config.mjs synchronously\", async () => {\n        const {\n          cwd,\n          tmp,\n          config\n        } = await getTemp(\"babel-test-load-config-sync-babel.config.mjs\");\n        const filename = tmp(\"src.js\");\n        await config(\"babel.config.mjs\");\n        expect(() => loadOptions({\n          filename,\n          cwd\n        })).toThrow(/is only supported when running Babel asynchronously/);\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should load %s asynchronously",
            "suites": [
                "buildConfigChain",
                "config files",
                "root"
            ],
            "line": 976,
            "code": "      test.each([\"babel.config.json\", \"babel.config.js\", \"babel.config.cjs\", \"babel.config.mjs\"])(\"should load %s asynchronously\", async name => {\n        const esm = isMJS(name);\n        if (esm && skipUnsupportedESM(`should load ${name} asynchronously`)) {\n          return;\n        }\n        const {\n          cwd,\n          tmp,\n          config\n        } = await getTemp(`babel-test-load-config-async-${name}`);\n        const filename = tmp(\"src.js\");\n        await config(name);\n        await expect(loadOptionsAsync({\n          filename,\n          cwd\n        }, esm)).resolves.toEqual({\n          ...getDefaults(),\n          filename,\n          cwd,\n          root: cwd,\n          comments: true\n        });\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should throw if both %s and %s are used",
            "suites": [
                "buildConfigChain",
                "config files",
                "root"
            ],
            "line": 999,
            "code": "      test.each(pairs([\"babel.config.json\", \"babel.config.js\", \"babel.config.cjs\", \"babel.config.mjs\"]))(\"should throw if both %s and %s are used\", async (name1, name2) => {\n        const esm = isMJS(name1) || isMJS(name2);\n        if (esm && skipUnsupportedESM(`should throw if both ${name1} and ${name2} are used`)) {\n          return;\n        }\n        const {\n          cwd,\n          tmp,\n          config\n        } = await getTemp(`babel-test-dup-config-${name1}-${name2}`);\n        await Promise.all([config(name1), config(name2)]);\n        await expect(loadOptionsAsync({\n          filename: tmp(\"src.js\"),\n          cwd\n        }, esm)).rejects.toThrow(/Multiple configuration files found/);\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should load %s synchronously",
            "suites": [
                "buildConfigChain",
                "config files",
                "relative"
            ],
            "line": 1017,
            "code": "      test.each([\"package.json\", \".babelrc\", \".babelrc.js\", \".babelrc.cjs\", \".babelrc.json\"])(\"should load %s synchronously\", async name => {\n        const {\n          cwd,\n          tmp,\n          config\n        } = await getTemp(`babel-test-load-config-${name}`);\n        const filename = tmp(\"src.js\");\n        await config(name);\n        expect(loadOptions({\n          filename,\n          cwd\n        })).toEqual({\n          ...getDefaults(),\n          filename,\n          cwd,\n          root: cwd,\n          comments: true\n        });\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should not load .babelrc.mjs synchronously",
            "suites": [
                "buildConfigChain",
                "config files",
                "relative"
            ],
            "updatePoint": {
                "line": 1036,
                "column": 54,
                "index": 36083
            },
            "line": 1036,
            "code": "      test(\"should not load .babelrc.mjs synchronously\", async () => {\n        const {\n          cwd,\n          tmp,\n          config\n        } = await getTemp(\"babel-test-load-config-sync-.babelrc.mjs\");\n        const filename = tmp(\"src.js\");\n        await config(\".babelrc.mjs\");\n        expect(() => loadOptions({\n          filename,\n          cwd\n        })).toThrow(/is only supported when running Babel asynchronously/);\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should load %s asynchronously",
            "suites": [
                "buildConfigChain",
                "config files",
                "relative"
            ],
            "line": 1049,
            "code": "      test.each([\"package.json\", \".babelrc\", \".babelrc.js\", \".babelrc.cjs\", \".babelrc.mjs\"].filter(Boolean))(\"should load %s asynchronously\", async name => {\n        const esm = isMJS(name);\n        if (esm && skipUnsupportedESM(`should load ${name} asynchronously`)) {\n          return;\n        }\n        const {\n          cwd,\n          tmp,\n          config\n        } = await getTemp(`babel-test-load-config-${name}`);\n        const filename = tmp(\"src.js\");\n        await config(name);\n        await expect(loadOptionsAsync({\n          filename,\n          cwd\n        }, esm)).resolves.toEqual({\n          ...getDefaults(),\n          filename,\n          cwd,\n          root: cwd,\n          comments: true\n        });\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should load .babelignore",
            "suites": [
                "buildConfigChain",
                "config files",
                "relative"
            ],
            "updatePoint": {
                "line": 1072,
                "column": 34,
                "index": 37232
            },
            "line": 1072,
            "code": "      it(\"should load .babelignore\", () => {\n        const filename = fixture(\"config-files\", \"babelignore\", \"src.js\");\n        expect(loadOptions({\n          filename,\n          cwd: path.dirname(filename)\n        })).toBeNull();\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should throw if both %s and %s are used",
            "suites": [
                "buildConfigChain",
                "config files",
                "relative"
            ],
            "line": 1079,
            "code": "      test.each(pairs([\"package.json\", \".babelrc\", \".babelrc.js\", \".babelrc.cjs\", \".babelrc.mjs\", \".babelrc.json\"]))(\"should throw if both %s and %s are used\", async (name1, name2) => {\n        const esm = isMJS(name1) || isMJS(name2);\n        if (esm && skipUnsupportedESM(`should throw if both ${name1} and ${name2} are used`)) {\n          return;\n        }\n        const {\n          cwd,\n          tmp,\n          config\n        } = await getTemp(`babel-test-dup-config-${name1}-${name2}`);\n        await Promise.all([config(name1), config(name2)]);\n        await expect(loadOptionsAsync({\n          filename: tmp(\"src.js\"),\n          cwd\n        }, esm)).rejects.toThrow(/Multiple configuration files found/);\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should ignore package.json without a 'babel' property",
            "suites": [
                "buildConfigChain",
                "config files",
                "relative"
            ],
            "updatePoint": {
                "line": 1095,
                "column": 63,
                "index": 38225
            },
            "line": 1095,
            "code": "      it(\"should ignore package.json without a 'babel' property\", () => {\n        const filename = fixture(\"config-files\", \"pkg-ignored\", \"src.js\");\n        expect(loadOptions({\n          filename,\n          cwd: path.dirname(filename)\n        })).toEqual({\n          ...getDefaults(),\n          filename: filename,\n          cwd: path.dirname(filename),\n          root: path.dirname(filename),\n          comments: true\n        });\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should show helpful errors for $config",
            "suites": [
                "buildConfigChain",
                "config files",
                "relative"
            ],
            "line": 1108,
            "code": "      test.each`\n        config             | dir                     | error\n        ${\".babelrc\"}      | ${\"babelrc-error\"}      | ${/Error while parsing config - /}\n        ${\".babelrc.json\"} | ${\"babelrc-json-error\"} | ${/Error while parsing config - /}\n        ${\".babelrc.js\"}   | ${\"babelrc-js-error\"}   | ${/Babelrc threw an error/}\n        ${\".babelrc.cjs\"}  | ${\"babelrc-cjs-error\"}  | ${/Babelrc threw an error/}\n        ${\".babelrc.mjs\"}  | ${\"babelrc-mjs-error\"}  | ${/Babelrc threw an error/}\n        ${\"package.json\"}  | ${\"pkg-error\"}          | ${/Error while parsing JSON - /}\n      `(\"should show helpful errors for $config\", async ({\n        config,\n        dir,\n        error\n      }) => {\n        const esm = isMJS(config);\n        if (esm && skipUnsupportedESM(`should show helpful errors for ${config}`)) {\n          return;\n        }\n        const filename = fixture(\"config-files\", dir, \"src.js\");\n        await expect(loadOptionsAsync({\n          filename,\n          cwd: path.dirname(filename)\n        }, esm)).rejects.toThrow(error);\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "loadPartialConfig should return a list of files that were extended",
            "suites": [
                "buildConfigChain",
                "config files",
                "relative"
            ],
            "updatePoint": {
                "line": 1131,
                "column": 76,
                "index": 39753
            },
            "line": 1131,
            "code": "      it(\"loadPartialConfig should return a list of files that were extended\", () => {\n        const filename = fixture(\"config-files\", \"babelrc-extended\", \"src.js\");\n        expect(babel.loadPartialConfig({\n          filename,\n          cwd: path.dirname(filename)\n        })).toEqual({\n          babelignore: fixture(\"config-files\", \".babelignore\"),\n          babelrc: fixture(\"config-files\", \"babelrc-extended\", \".babelrc\"),\n          config: undefined,\n          fileHandling: \"transpile\",\n          options: {\n            ...getDefaults(),\n            filename: filename,\n            cwd: path.dirname(filename),\n            root: path.dirname(filename),\n            comments: true\n          },\n          files: new Set([fixture(\"config-files\", \".babelignore\"), fixture(\"config-files\", \"babelrc-extended\", \".babelrc-extended\"), fixture(\"config-files\", \"babelrc-extended\", \".babelrc\")])\n        });\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "loadPartialConfig should return null when ignored",
            "suites": [
                "buildConfigChain",
                "config files",
                "relative"
            ],
            "updatePoint": {
                "line": 1151,
                "column": 59,
                "index": 40649
            },
            "line": 1151,
            "code": "      it(\"loadPartialConfig should return null when ignored\", () => {\n        const filename = fixture(\"config-files\", \"babelignore\", \"src.js\");\n        expect(babel.loadPartialConfig({\n          filename,\n          cwd: path.dirname(filename)\n        })).toBeNull();\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "loadPartialConfig should return a list of files when ignored with showIgnoredFiles option",
            "suites": [
                "buildConfigChain",
                "config files",
                "relative"
            ],
            "updatePoint": {
                "line": 1158,
                "column": 99,
                "index": 40967
            },
            "line": 1158,
            "code": "      it(\"loadPartialConfig should return a list of files when ignored with showIgnoredFiles option\", () => {\n        const filename = fixture(\"config-files\", \"babelignore\", \"src.js\");\n        expect(babel.loadPartialConfig({\n          filename,\n          cwd: path.dirname(filename),\n          showIgnoredFiles: true\n        })).toEqual({\n          babelignore: fixture(\"config-files\", \"babelignore\", \".babelignore\"),\n          babelrc: undefined,\n          config: undefined,\n          fileHandling: \"ignored\",\n          options: {\n            ...getDefaults(),\n            filename: filename,\n            cwd: path.dirname(filename),\n            root: path.dirname(filename)\n          },\n          files: new Set([fixture(\"config-files\", \"babelignore\", \".babelignore\")])\n        });\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "loadPartialConfig can be called with no arguments",
            "suites": [
                "buildConfigChain",
                "config files",
                "relative"
            ],
            "updatePoint": {
                "line": 1178,
                "column": 59,
                "index": 41723
            },
            "line": 1178,
            "code": "      it(\"loadPartialConfig can be called with no arguments\", () => {\n        const cwd = process.cwd();\n        try {\n          process.chdir(fixture(\"config-files\", \"babelrc-extended\"));\n          expect(() => babel.loadPartialConfig()).not.toThrow();\n        } finally {\n          process.chdir(cwd);\n        }\n      });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should throw when `test` presents but `filename` is not passed",
            "suites": [
                "buildConfigChain",
                "config files",
                "relative"
            ],
            "updatePoint": {
                "line": 1188,
                "column": 70,
                "index": 42066
            },
            "line": 1188,
            "code": "    it(\"should throw when `test` presents but `filename` is not passed\", () => {\n      expect(() => loadOptions({\n        test: /\\.ts$/,\n        plugins: []\n      })).toThrow(/Configuration contains string\\/RegExp pattern/);\n    });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should throw when `preset` requires `filename` but it was not passed",
            "suites": [
                "buildConfigChain",
                "config files",
                "relative"
            ],
            "updatePoint": {
                "line": 1194,
                "column": 76,
                "index": 42305
            },
            "line": 1194,
            "code": "    it(\"should throw when `preset` requires `filename` but it was not passed\", () => {\n      expect(() => {\n        loadOptions({\n          presets: [\"./fixtures/config-loading/preset4\"]\n        });\n      }).toThrow(/Preset \\/\\* your preset \\*\\/ requires a filename/);\n    });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should throw when `preset.overrides` requires `filename` but it was not passed",
            "suites": [
                "buildConfigChain",
                "config files",
                "relative"
            ],
            "updatePoint": {
                "line": 1201,
                "column": 86,
                "index": 42592
            },
            "line": 1201,
            "code": "    it(\"should throw when `preset.overrides` requires `filename` but it was not passed\", () => {\n      expect(() => {\n        loadOptions({\n          presets: [\"./fixtures/config-loading/preset5\"]\n        });\n      }).toThrow(/Preset \\/\\* your preset \\*\\/ requires a filename/);\n    });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should not throw error on $schema property in json config files",
            "suites": [
                "buildConfigChain",
                "config files",
                "relative"
            ],
            "updatePoint": {
                "line": 1208,
                "column": 71,
                "index": 42864
            },
            "line": 1208,
            "code": "    it(\"should not throw error on $schema property in json config files\", () => {\n      const filename = fixture(\"config-files\", \"babel-config-json-$schema-property\", \"babel.config.json\");\n      expect(() => {\n        babel.loadPartialConfig({\n          filename,\n          cwd: path.dirname(filename)\n        });\n      }).not.toThrow();\n    });",
            "file": "config-chain.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should preserve disabled plugins in the partial config",
            "suites": [
                "@babel/core config loading",
                "loadPartialConfigSync"
            ],
            "updatePoint": {
                "line": 60,
                "column": 62,
                "index": 2190
            },
            "line": 60,
            "code": "    it(\"should preserve disabled plugins in the partial config\", () => {\n      const plugin = function () {\n        return {};\n      };\n      const opts = loadPartialConfigSync({\n        ...makeOpts(true),\n        babelrc: false,\n        configFile: false,\n        plugins: [[plugin, false]]\n      });\n      expect(opts.options.plugins.length).toBe(1);\n      const item = opts.options.plugins[0];\n      expect(item.value).toBe(plugin);\n      expect(item.options).toBe(false);\n    });",
            "file": "config-loading.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should preserve disabled presets in the partial config",
            "suites": [
                "@babel/core config loading",
                "loadPartialConfigSync"
            ],
            "updatePoint": {
                "line": 75,
                "column": 62,
                "index": 2674
            },
            "line": 75,
            "code": "    it(\"should preserve disabled presets in the partial config\", () => {\n      const preset = function () {\n        return {};\n      };\n      const opts = loadPartialConfigSync({\n        ...makeOpts(true),\n        babelrc: false,\n        configFile: false,\n        presets: [[preset, false]]\n      });\n      expect(opts.options.presets.length).toBe(1);\n      const item = opts.options.presets[0];\n      expect(item.value).toBe(preset);\n      expect(item.options).toBe(false);\n    });",
            "file": "config-loading.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should always set 'rootMode' to 'root'",
            "suites": [
                "@babel/core config loading",
                "loadPartialConfigSync"
            ],
            "updatePoint": {
                "line": 90,
                "column": 46,
                "index": 3142
            },
            "line": 90,
            "code": "    it(\"should always set 'rootMode' to 'root'\", async () => {\n      const cwd = path.join(path.dirname(fileURLToPath(import.meta.url)), \"fixtures\", \"config-loading\", \"root\", \"nested\");\n      const {\n        options\n      } = await loadPartialConfigSync({\n        cwd,\n        filename: path.join(cwd, \"file.js\"),\n        rootMode: \"upward\"\n      });\n      expect(options.root).toBe(path.join(cwd, \"..\"));\n      expect(options.rootMode).toBe(\"root\");\n    });",
            "file": "config-loading.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should load and cache the config with plugins and presets",
            "suites": [
                "@babel/core config loading",
                "loadOptionsSync"
            ],
            "updatePoint": {
                "line": 104,
                "column": 65,
                "index": 3664
            },
            "line": 104,
            "code": "    it(\"should load and cache the config with plugins and presets\", () => {\n      const opts = makeOpts();\n      const options1 = loadOptionsSync(opts);\n      expect(options1.plugins.map(p => p.key)).toEqual([\"plugin1\", \"plugin2\", \"plugin6\", \"plugin5\", \"plugin4\", \"plugin3\"]);\n      const options2 = loadOptionsSync(opts);\n      expect(options2.plugins.length).toBe(options1.plugins.length);\n      for (let i = 0; i < options2.plugins.length; i++) {\n        expect(options2.plugins[i]).toBe(options1.plugins[i]);\n      }\n    });",
            "file": "config-loading.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should load and cache the config for unique opts objects",
            "suites": [
                "@babel/core config loading",
                "loadOptionsSync"
            ],
            "updatePoint": {
                "line": 114,
                "column": 64,
                "index": 4192
            },
            "line": 114,
            "code": "    it(\"should load and cache the config for unique opts objects\", () => {\n      const options1 = loadOptionsSync(makeOpts(true));\n      expect(options1.plugins.map(p => p.key)).toEqual([\"plugin1\", \"plugin2\", \"plugin4\", \"plugin3\"]);\n      const options2 = loadOptionsSync(makeOpts(true));\n      expect(options2.plugins.length).toBe(options1.plugins.length);\n      for (let i = 0; i < options2.plugins.length; i++) {\n        expect(options2.plugins[i]).toBe(options1.plugins[i]);\n      }\n    });",
            "file": "config-loading.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should invalidate config file plugins",
            "suites": [
                "@babel/core config loading",
                "loadOptionsSync"
            ],
            "updatePoint": {
                "line": 123,
                "column": 45,
                "index": 4668
            },
            "line": 123,
            "code": "    it(\"should invalidate config file plugins\", () => {\n      const opts = makeOpts();\n      const options1 = loadOptionsSync(opts);\n      process.env.INVALIDATE_PLUGIN1 = true;\n      const options2 = loadOptionsSync(opts);\n      expect(options2.plugins.length).toBe(options1.plugins.length);\n      expect(options2.plugins[0]).not.toBe(options1.plugins[0]);\n      for (let i = 1; i < options1.plugins.length; i++) {\n        expect(options2.plugins[i]).toBe(options1.plugins[i]);\n      }\n      process.env.INVALIDATE_PLUGIN3 = true;\n      const options3 = loadOptionsSync(opts);\n      expect(options3.plugins.length).toBe(options1.plugins.length);\n      expect(options3.plugins.length).toBe(6);\n      expect(options3.plugins[0]).not.toBe(options1.plugins[0]);\n      expect(options3.plugins[5]).not.toBe(options1.plugins[5]);\n      for (let i = 1; i < 5; i++) {\n        expect(options3.plugins[i]).toBe(options1.plugins[i]);\n      }\n    });",
            "file": "config-loading.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should invalidate config file presets and their children",
            "suites": [
                "@babel/core config loading",
                "loadOptionsSync"
            ],
            "updatePoint": {
                "line": 143,
                "column": 64,
                "index": 5626
            },
            "line": 143,
            "code": "    it(\"should invalidate config file presets and their children\", () => {\n      const opts = makeOpts();\n      const options1 = loadOptionsSync(opts);\n      process.env.INVALIDATE_PRESET1 = true;\n      const options2 = loadOptionsSync(opts);\n      expect(options2.plugins.length).toBe(options1.plugins.length);\n      expect(options2.plugins.length).toBe(6);\n      expect(options2.plugins[5]).not.toBe(options1.plugins[5]);\n      for (let i = 0; i < 5; i++) {\n        expect(options2.plugins[i]).toBe(options1.plugins[i]);\n      }\n      process.env.INVALIDATE_PRESET2 = true;\n      const options3 = loadOptionsSync(opts);\n      expect(options3.plugins.length).toBe(options1.plugins.length);\n      expect(options3.plugins.length).toBe(6);\n      expect(options3.plugins[4]).not.toBe(options1.plugins[4]);\n      expect(options3.plugins[5]).not.toBe(options1.plugins[5]);\n      for (let i = 0; i < 4; i++) {\n        expect(options3.plugins[i]).toBe(options1.plugins[i]);\n      }\n    });",
            "file": "config-loading.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should invalidate the config file and its plugins/presets",
            "suites": [
                "@babel/core config loading",
                "loadOptionsSync"
            ],
            "updatePoint": {
                "line": 164,
                "column": 65,
                "index": 6610
            },
            "line": 164,
            "code": "    it(\"should invalidate the config file and its plugins/presets\", () => {\n      const opts = makeOpts();\n      const options1 = loadOptionsSync(opts);\n      process.env.INVALIDATE_BABELRC = true;\n      const options2 = loadOptionsSync(opts);\n      expect(options2.plugins.length).toBe(options1.plugins.length);\n      expect(options2.plugins.length).toBe(6);\n      expect(options2.plugins[0]).not.toBe(options1.plugins[0]);\n      expect(options2.plugins[1]).not.toBe(options1.plugins[1]);\n      expect(options2.plugins[4]).not.toBe(options1.plugins[4]);\n      expect(options2.plugins[5]).not.toBe(options1.plugins[5]);\n      expect(options2.plugins[2]).toBe(options1.plugins[2]);\n      expect(options2.plugins[3]).toBe(options1.plugins[3]);\n    });",
            "file": "config-loading.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should load and cache the config with plugins and presets when executed in parallel",
            "suites": [
                "@babel/core config loading",
                "loadOptionsAsync"
            ],
            "updatePoint": {
                "line": 180,
                "column": 91,
                "index": 7431
            },
            "line": 180,
            "code": "    it(\"should load and cache the config with plugins and presets when executed in parallel\", async () => {\n      const opts = makeOpts();\n      const [options1, options2] = await Promise.all([loadOptionsAsync(opts), loadOptionsAsync(opts)]);\n      expect(options1.plugins.map(p => p.key)).toEqual([\"plugin1\", \"plugin2\", \"plugin6\", \"plugin5\", \"plugin4\", \"plugin3\"]);\n      expect(options2.plugins.length).toBe(options1.plugins.length);\n      for (let i = 0; i < options2.plugins.length; i++) {\n        expect(options2.plugins[i]).toBe(options1.plugins[i]);\n      }\n    });",
            "file": "config-loading.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should not invalidate the plugins when given a fresh object",
            "suites": [
                "@babel/core config loading",
                "programmatic plugins/presets"
            ],
            "updatePoint": {
                "line": 191,
                "column": 67,
                "index": 8037
            },
            "line": 191,
            "code": "    it(\"should not invalidate the plugins when given a fresh object\", () => {\n      const opts = makeOpts();\n      const options1 = loadOptionsSync(opts);\n      const options2 = loadOptionsSync(Object.assign({}, opts));\n      expect(options2.plugins.length).toBe(options1.plugins.length);\n      for (let i = 0; i < options2.plugins.length; i++) {\n        expect(options2.plugins[i]).toBe(options1.plugins[i]);\n      }\n    });",
            "file": "config-loading.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should not invalidate the plugins when given a fresh arrays",
            "suites": [
                "@babel/core config loading",
                "programmatic plugins/presets"
            ],
            "updatePoint": {
                "line": 200,
                "column": 67,
                "index": 8463
            },
            "line": 200,
            "code": "    it(\"should not invalidate the plugins when given a fresh arrays\", () => {\n      const opts = makeOpts();\n      const options1 = loadOptionsSync(opts);\n      const options2 = loadOptionsSync({\n        ...opts,\n        plugins: opts.plugins.slice()\n      });\n      expect(options2.plugins.length).toBe(options1.plugins.length);\n      for (let i = 0; i < options2.plugins.length; i++) {\n        expect(options2.plugins[i]).toBe(options1.plugins[i]);\n      }\n    });",
            "file": "config-loading.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should not invalidate the presets when given a fresh arrays",
            "suites": [
                "@babel/core config loading",
                "programmatic plugins/presets"
            ],
            "updatePoint": {
                "line": 212,
                "column": 67,
                "index": 8930
            },
            "line": 212,
            "code": "    it(\"should not invalidate the presets when given a fresh arrays\", () => {\n      const opts = makeOpts();\n      const options1 = loadOptionsSync(opts);\n      const options2 = loadOptionsSync({\n        ...opts,\n        presets: opts.presets.slice()\n      });\n      expect(options2.plugins.length).toBe(options1.plugins.length);\n      for (let i = 0; i < options2.plugins.length; i++) {\n        expect(options2.plugins[i]).toBe(options1.plugins[i]);\n      }\n    });",
            "file": "config-loading.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should invalidate the plugins when given a fresh options",
            "suites": [
                "@babel/core config loading",
                "programmatic plugins/presets"
            ],
            "updatePoint": {
                "line": 224,
                "column": 64,
                "index": 9394
            },
            "line": 224,
            "code": "    it(\"should invalidate the plugins when given a fresh options\", () => {\n      const opts = makeOpts();\n      const options1 = loadOptionsSync(opts);\n      const options2 = loadOptionsSync({\n        ...opts,\n        plugins: opts.plugins.map(([plg, opt]) => [plg, {\n          ...opt\n        }])\n      });\n      expect(options2.plugins.length).toBe(options1.plugins.length);\n      expect(options2.plugins.length).toBe(6);\n      expect(options2.plugins[2]).not.toBe(options1.plugins[2]);\n      expect(options2.plugins[0]).toBe(options1.plugins[0]);\n      expect(options2.plugins[1]).toBe(options1.plugins[1]);\n      expect(options2.plugins[3]).toBe(options1.plugins[3]);\n      expect(options2.plugins[4]).toBe(options1.plugins[4]);\n      expect(options2.plugins[5]).toBe(options1.plugins[5]);\n    });",
            "file": "config-loading.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should invalidate the presets when given a fresh options",
            "suites": [
                "@babel/core config loading",
                "programmatic plugins/presets"
            ],
            "updatePoint": {
                "line": 242,
                "column": 64,
                "index": 10195
            },
            "line": 242,
            "code": "    it(\"should invalidate the presets when given a fresh options\", () => {\n      const opts = makeOpts();\n      const options1 = loadOptionsSync(opts);\n      const options2 = loadOptionsSync({\n        ...opts,\n        presets: opts.presets.map(([plg, opt]) => [plg, {\n          ...opt\n        }])\n      });\n      expect(options2.plugins.length).toBe(options1.plugins.length);\n      expect(options2.plugins.length).toBe(6);\n      expect(options2.plugins[3]).not.toBe(options1.plugins[3]);\n      expect(options2.plugins[0]).toBe(options1.plugins[0]);\n      expect(options2.plugins[1]).toBe(options1.plugins[1]);\n      expect(options2.plugins[2]).toBe(options1.plugins[2]);\n      expect(options2.plugins[4]).toBe(options1.plugins[4]);\n      expect(options2.plugins[5]).toBe(options1.plugins[5]);\n    });",
            "file": "config-loading.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should invalidate the programmatic plugins",
            "suites": [
                "@babel/core config loading",
                "programmatic plugins/presets"
            ],
            "updatePoint": {
                "line": 260,
                "column": 50,
                "index": 10982
            },
            "line": 260,
            "code": "    it(\"should invalidate the programmatic plugins\", () => {\n      const opts = makeOpts();\n      const options1 = loadOptionsSync(opts);\n      process.env.INVALIDATE_PLUGIN6 = true;\n      const options2 = loadOptionsSync(opts);\n      expect(options2.plugins.length).toBe(options1.plugins.length);\n      expect(options2.plugins.length).toBe(6);\n      expect(options2.plugins[2]).not.toBe(options1.plugins[2]);\n      expect(options2.plugins[0]).toBe(options1.plugins[0]);\n      expect(options2.plugins[1]).toBe(options1.plugins[1]);\n      expect(options2.plugins[3]).toBe(options1.plugins[3]);\n      expect(options2.plugins[4]).toBe(options1.plugins[4]);\n      expect(options2.plugins[5]).toBe(options1.plugins[5]);\n    });",
            "file": "config-loading.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should invalidate the programmatic presets and their children",
            "suites": [
                "@babel/core config loading",
                "programmatic plugins/presets"
            ],
            "updatePoint": {
                "line": 274,
                "column": 69,
                "index": 11724
            },
            "line": 274,
            "code": "    it(\"should invalidate the programmatic presets and their children\", () => {\n      const opts = makeOpts();\n      const options1 = loadOptionsSync(opts);\n      process.env.INVALIDATE_PRESET3 = true;\n      const options2 = loadOptionsSync(opts);\n      expect(options2.plugins.length).toBe(options1.plugins.length);\n      expect(options2.plugins.length).toBe(6);\n      expect(options2.plugins[3]).not.toBe(options1.plugins[3]);\n      expect(options2.plugins[0]).toBe(options1.plugins[0]);\n      expect(options2.plugins[1]).toBe(options1.plugins[1]);\n      expect(options2.plugins[2]).toBe(options1.plugins[2]);\n      expect(options2.plugins[4]).toBe(options1.plugins[4]);\n      expect(options2.plugins[5]).toBe(options1.plugins[5]);\n    });",
            "file": "config-loading.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should thrown when plugin is not valid",
            "suites": [
                "@babel/core config loading",
                "programmatic plugins/presets"
            ],
            "updatePoint": {
                "line": 288,
                "column": 46,
                "index": 12443
            },
            "line": 288,
            "code": "    it(\"should thrown when plugin is not valid\", () => {\n      const fooPlugin = {\n        inherits: \"inherits-should-not-be-string\"\n      };\n      const opts = {\n        cwd: path.dirname(FILEPATH),\n        filename: FILEPATH,\n        plugins: [fooPlugin]\n      };\n      expect(() => loadOptionsSync(opts)).toThrow(/\\.inherits must be a function, or undefined/);\n    });",
            "file": "config-loading.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should throw when plugin contains `enter` handler",
            "suites": [
                "@babel/core config loading",
                "programmatic plugins/presets"
            ],
            "updatePoint": {
                "line": 299,
                "column": 57,
                "index": 12826
            },
            "line": 299,
            "code": "    it(\"should throw when plugin contains `enter` handler\", () => {\n      const fooPlugin = {\n        visitor: {\n          enter() {}\n        }\n      };\n      const opts = {\n        cwd: path.dirname(FILEPATH),\n        filename: FILEPATH,\n        plugins: [fooPlugin]\n      };\n      expect(() => loadOptionsSync(opts)).toThrow(/\\.visitor cannot contain catch-all \"enter\" or \"exit\" handlers\\. Please target individual nodes\\./);\n    });",
            "file": "config-loading.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should pass caller data through",
            "suites": [
                "@babel/core config loading",
                "caller metadata"
            ],
            "updatePoint": {
                "line": 314,
                "column": 39,
                "index": 13288
            },
            "line": 314,
            "code": "    it(\"should pass caller data through\", () => {\n      const options1 = loadOptionsSync({\n        ...makeOpts(),\n        caller: {\n          name: \"babel-test\",\n          someFlag: true\n        }\n      });\n      expect(options1.caller.name).toBe(\"babel-test\");\n      expect(options1.caller.someFlag).toBe(true);\n    });",
            "file": "config-loading.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should pass unknown caller data through",
            "suites": [
                "@babel/core config loading",
                "caller metadata"
            ],
            "updatePoint": {
                "line": 325,
                "column": 47,
                "index": 13617
            },
            "line": 325,
            "code": "    it(\"should pass unknown caller data through\", () => {\n      const options1 = loadOptionsSync({\n        ...makeOpts(),\n        caller: undefined\n      });\n      expect(options1.caller).toBeUndefined();\n    });",
            "file": "config-loading.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should pass caller data to test functions",
            "suites": [
                "@babel/core config loading",
                "caller metadata"
            ],
            "updatePoint": {
                "line": 332,
                "column": 49,
                "index": 13832
            },
            "line": 332,
            "code": "    it(\"should pass caller data to test functions\", () => {\n      const options1 = loadOptionsSync({\n        ...makeOpts(),\n        caller: {\n          name: \"babel-test\",\n          someFlag: true\n        },\n        overrides: [{\n          test: (filename, {\n            caller\n          }) => caller.name === \"babel-test\",\n          comments: false\n        }, {\n          test: (filename, {\n            caller\n          }) => caller.name !== \"babel-test\",\n          ast: false\n        }]\n      });\n      expect(options1.comments).toBe(false);\n      expect(options1.ast).not.toBe(false);\n    });",
            "file": "config-loading.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "dummy",
            "suites": [],
            "updatePoint": {
                "line": 21,
                "column": 11,
                "index": 966
            },
            "line": 21,
            "code": "  it(\"dummy\", () => {\n    expect(1).toBe(1);\n  });",
            "file": "config-ts.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should work with simple .cts",
            "suites": [],
            "updatePoint": {
                "line": 26,
                "column": 34,
                "index": 1122
            },
            "line": 26,
            "code": "  it(\"should work with simple .cts\", () => {\n    const config = loadPartialConfigSync({\n      configFile: path.join(__dirname, \"fixtures/config-ts/simple-cts/babel.config.cts\")\n    });\n    expect(config.options.targets).toMatchInlineSnapshot(`\n      Object {\n        \"node\": \"12.0.0\",\n      }\n    `);\n    expect(config.options.sourceRoot).toMatchInlineSnapshot(`\"/a/b\"`);\n  });",
            "file": "config-ts.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should throw with invalid .ts register",
            "suites": [],
            "updatePoint": {
                "line": 37,
                "column": 44,
                "index": 1510
            },
            "line": 37,
            "code": "  it(\"should throw with invalid .ts register\", () => {\n    require.extensions[\".ts\"] = () => {\n      throw new Error(\"Not support .ts.\");\n    };\n    try {\n      expect(() => {\n        loadPartialConfigSync({\n          configFile: path.join(__dirname, \"fixtures/config-ts/invalid-cts-register/babel.config.cts\")\n        });\n      }).toThrow(/Unexpected identifier.*/);\n    } finally {\n      delete require.extensions[\".ts\"];\n    }\n  });",
            "file": "config-ts.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should work with ts-node",
            "suites": [],
            "updatePoint": {
                "line": 51,
                "column": 30,
                "index": 1932
            },
            "line": 51,
            "code": "  it(\"should work with ts-node\", async () => {\n    const service = require(\"ts-node\").register({\n      experimentalResolver: true,\n      compilerOptions: {\n        module: \"CommonJS\"\n      }\n    });\n    service.enabled(true);\n    try {\n      require(path.join(__dirname, \"fixtures/config-ts/simple-cts-with-ts-node/babel.config.cts\"));\n      const config = loadPartialConfigSync({\n        configFile: path.join(__dirname, \"fixtures/config-ts/simple-cts-with-ts-node/babel.config.cts\")\n      });\n      expect(config.options.targets).toMatchInlineSnapshot(`\n        Object {\n          \"node\": \"12.0.0\",\n        }\n      `);\n      expect(config.options.sourceRoot).toMatchInlineSnapshot(`\"/a/b\"`);\n    } finally {\n      service.enabled(false);\n    }\n  });",
            "file": "config-ts.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "error inside config function",
            "suites": [
                "@babel/core errors"
            ],
            "updatePoint": {
                "line": 51,
                "column": 34,
                "index": 2582
            },
            "line": 51,
            "code": "  it(\"error inside config function\", function () {\n    expectError(() => {\n      babel.parseSync(\"foo;\", {\n        root: fixture(\"error-config-function\")\n      });\n    }).toMatchInlineSnapshot(`\n      \"Error: Error inside config!\n          at myConfig (<CWD>/packages/babel-core/test/fixtures/errors/error-config-function/babel.config.js:_:_)\n          at Module.parseSync (<CWD>/packages/babel-core/lib/parse.js:_:_)\n          at <CWD>/packages/babel-core/test/errors-stacks.js:_:_\n          at expectError (<CWD>/packages/babel-core/test/errors-stacks.js:_:_)\n          at <CWD>/packages/babel-core/test/errors-stacks.js:_:_\n          at ... internal jest frames ...\"\n    `);\n  });",
            "file": "errors-stacks.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "error inside config function with more frames",
            "suites": [
                "@babel/core errors"
            ],
            "updatePoint": {
                "line": 66,
                "column": 51,
                "index": 3283
            },
            "line": 66,
            "code": "  it(\"error inside config function with more frames\", function () {\n    expectError(() => {\n      babel.parseSync(\"foo;\", {\n        root: fixture(\"error-config-function-more-frames\")\n      });\n    }).toMatchInlineSnapshot(`\n      \"Error: Error inside config!\n          at f (<CWD>/packages/babel-core/test/fixtures/errors/error-config-function-more-frames/babel.config.js:_:_)\n          at g (<CWD>/packages/babel-core/test/fixtures/errors/error-config-function-more-frames/babel.config.js:_:_)\n          at myConfig (<CWD>/packages/babel-core/test/fixtures/errors/error-config-function-more-frames/babel.config.js:_:_)\n          at Module.parseSync (<CWD>/packages/babel-core/lib/parse.js:_:_)\n          at <CWD>/packages/babel-core/test/errors-stacks.js:_:_\n          at expectError (<CWD>/packages/babel-core/test/errors-stacks.js:_:_)\n          at <CWD>/packages/babel-core/test/errors-stacks.js:_:_\n          at ... internal jest frames ...\"\n    `);\n  });",
            "file": "errors-stacks.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "error inside config file",
            "suites": [
                "@babel/core errors"
            ],
            "updatePoint": {
                "line": 83,
                "column": 30,
                "index": 4223
            },
            "line": 83,
            "code": "  it(\"error inside config file\", function () {\n    expectError(() => {\n      babel.parseSync(\"foo;\", {\n        root: fixture(\"error-config-file\")\n      });\n    }).toMatchInlineSnapshot(`\n      \"Error: Error inside config!\n          at <CWD>/packages/babel-core/test/fixtures/errors/error-config-file/babel.config.js:_:_\n          at require (... internal node frames ...)\n          at Module.parseSync (<CWD>/packages/babel-core/lib/parse.js:_:_)\n          at <CWD>/packages/babel-core/test/errors-stacks.js:_:_\n          at expectError (<CWD>/packages/babel-core/test/errors-stacks.js:_:_)\n          at <CWD>/packages/babel-core/test/errors-stacks.js:_:_\n          at ... internal jest frames ...\"\n    `);\n  });",
            "file": "errors-stacks.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "error inside config file with more frames",
            "suites": [
                "@babel/core errors"
            ],
            "updatePoint": {
                "line": 99,
                "column": 47,
                "index": 4953
            },
            "line": 99,
            "code": "  it(\"error inside config file with more frames\", function () {\n    expectError(() => {\n      babel.parseSync(\"foo;\", {\n        root: fixture(\"error-config-file-more-frames\")\n      });\n    }).toMatchInlineSnapshot(`\n      \"Error: Error inside config!\n          at f (<CWD>/packages/babel-core/test/fixtures/errors/error-config-file-more-frames/babel.config.js:_:_)\n          at g (<CWD>/packages/babel-core/test/fixtures/errors/error-config-file-more-frames/babel.config.js:_:_)\n          at <CWD>/packages/babel-core/test/fixtures/errors/error-config-file-more-frames/babel.config.js:_:_\n          at require (... internal node frames ...)\n          at Module.parseSync (<CWD>/packages/babel-core/lib/parse.js:_:_)\n          at <CWD>/packages/babel-core/test/errors-stacks.js:_:_\n          at expectError (<CWD>/packages/babel-core/test/errors-stacks.js:_:_)\n          at <CWD>/packages/babel-core/test/errors-stacks.js:_:_\n          at ... internal jest frames ...\"\n    `);\n  });",
            "file": "errors-stacks.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "invalid JSON config file",
            "suites": [
                "@babel/core errors"
            ],
            "updatePoint": {
                "line": 117,
                "column": 30,
                "index": 5918
            },
            "line": 117,
            "code": "  it(\"invalid JSON config file\", function () {\n    expectError(() => {\n      babel.parseSync(\"foo;\", {\n        root: fixture(\"invalid-json\")\n      });\n    }).toMatchInlineSnapshot(`\n      \"Error: Error while parsing config - JSON5: invalid character '}' at 3:1\n          at <CWD>/packages/babel-core/test/fixtures/errors/invalid-json/babel.config.json\n          at Module.parseSync (<CWD>/packages/babel-core/lib/parse.js:_:_)\n          at <CWD>/packages/babel-core/test/errors-stacks.js:_:_\n          at expectError (<CWD>/packages/babel-core/test/errors-stacks.js:_:_)\n          at <CWD>/packages/babel-core/test/errors-stacks.js:_:_\n          at ... internal jest frames ...\"\n    `);\n  });",
            "file": "errors-stacks.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "use 'exclude' without filename",
            "suites": [
                "@babel/core errors"
            ],
            "updatePoint": {
                "line": 132,
                "column": 36,
                "index": 6617
            },
            "line": 132,
            "code": "  it(\"use 'exclude' without filename\", function () {\n    expectError(() => {\n      babel.parseSync(\"foo;\", {\n        root: fixture(\"use-exclude\")\n      });\n    }).toMatchInlineSnapshot(`\n      \"Error: Configuration contains string/RegExp pattern, but no filename was passed to Babel\n          at <CWD>/packages/babel-core/test/fixtures/errors/use-exclude/babel.config.js\n          at Module.parseSync (<CWD>/packages/babel-core/lib/parse.js:_:_)\n          at <CWD>/packages/babel-core/test/errors-stacks.js:_:_\n          at expectError (<CWD>/packages/babel-core/test/errors-stacks.js:_:_)\n          at <CWD>/packages/babel-core/test/errors-stacks.js:_:_\n          at ... internal jest frames ...\"\n    `);\n  });",
            "file": "errors-stacks.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "use 'exclude' without filename in programmatic options",
            "suites": [
                "@babel/core errors"
            ],
            "updatePoint": {
                "line": 147,
                "column": 60,
                "index": 7353
            },
            "line": 147,
            "code": "  it(\"use 'exclude' without filename in programmatic options\", function () {\n    expectError(() => {\n      babel.parseSync(\"foo;\", {\n        configFile: false,\n        exclude: /node_modules/\n      });\n    }).toMatchInlineSnapshot(`\n      \"Error: Configuration contains string/RegExp pattern, but no filename was passed to Babel\n          at Module.parseSync (<CWD>/packages/babel-core/lib/parse.js:_:_)\n          at <CWD>/packages/babel-core/test/errors-stacks.js:_:_\n          at expectError (<CWD>/packages/babel-core/test/errors-stacks.js:_:_)\n          at <CWD>/packages/babel-core/test/errors-stacks.js:_:_\n          at ... internal jest frames ...\"\n    `);\n  });",
            "file": "errors-stacks.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "use 'exclude' without filename in preset",
            "suites": [
                "@babel/core errors"
            ],
            "updatePoint": {
                "line": 162,
                "column": 46,
                "index": 8009
            },
            "line": 162,
            "code": "  it(\"use 'exclude' without filename in preset\", function () {\n    expectError(() => {\n      babel.parseSync(\"foo;\", {\n        root: fixture(\"use-exclude-in-preset\")\n      });\n    }).toMatchInlineSnapshot(`\n      \"Error: [BABEL] unknown file: Preset /* your preset */ requires a filename to be set when babel is called directly,\n      \\`\\`\\`\n      babel.transformSync(code, { filename: 'file.ts', presets: [/* your preset */] });\n      \\`\\`\\`\n      See https://babeljs.io/docs/en/options#filename for more information.\n          at Module.parseSync (<CWD>/packages/babel-core/lib/parse.js:_:_)\n          at <CWD>/packages/babel-core/test/errors-stacks.js:_:_\n          at expectError (<CWD>/packages/babel-core/test/errors-stacks.js:_:_)\n          at <CWD>/packages/babel-core/test/errors-stacks.js:_:_\n          at ... internal jest frames ...\"\n    `);\n  });",
            "file": "errors-stacks.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "invalid option",
            "suites": [
                "@babel/core errors"
            ],
            "updatePoint": {
                "line": 180,
                "column": 20,
                "index": 8843
            },
            "line": 180,
            "code": "  it(\"invalid option\", function () {\n    expectError(() => {\n      babel.parseSync(\"foo;\", {\n        root: fixture(\"invalid-option\")\n      });\n    }).toMatchInlineSnapshot(`\n      \"Error: .sourceType must be \\\\\"module\\\\\", \\\\\"script\\\\\", \\\\\"unambiguous\\\\\", or undefined\n          at <CWD>/packages/babel-core/test/fixtures/errors/invalid-option/babel.config.json\n          at Module.parseSync (<CWD>/packages/babel-core/lib/parse.js:_:_)\n          at <CWD>/packages/babel-core/test/errors-stacks.js:_:_\n          at expectError (<CWD>/packages/babel-core/test/errors-stacks.js:_:_)\n          at <CWD>/packages/babel-core/test/errors-stacks.js:_:_\n          at ... internal jest frames ...\"\n    `);\n  });",
            "file": "errors-stacks.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "invalid option in programmatic options",
            "suites": [
                "@babel/core errors"
            ],
            "updatePoint": {
                "line": 195,
                "column": 44,
                "index": 9569
            },
            "line": 195,
            "code": "  it(\"invalid option in programmatic options\", function () {\n    expectError(() => babel.parseSync(\"foo;\", {\n      root: fixture(\"valid\"),\n      sourceType: \"foo\"\n    })).toMatchInlineSnapshot(`\n      \"Error: .sourceType must be \\\\\"module\\\\\", \\\\\"script\\\\\", \\\\\"unambiguous\\\\\", or undefined\n          at Module.parseSync (<CWD>/packages/babel-core/lib/parse.js:_:_)\n          at <CWD>/packages/babel-core/test/errors-stacks.js:_:_\n          at expectError (<CWD>/packages/babel-core/test/errors-stacks.js:_:_)\n          at <CWD>/packages/babel-core/test/errors-stacks.js:_:_\n          at ... internal jest frames ...\"\n    `);\n  });",
            "file": "errors-stacks.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "internal errors have the full stack trace",
            "suites": [
                "@babel/core errors"
            ],
            "updatePoint": {
                "line": 208,
                "column": 47,
                "index": 10202
            },
            "line": 208,
            "code": "  it(\"internal errors have the full stack trace\", function () {\n    expectError(() => {\n      const {\n        map\n      } = Array.prototype;\n      try {\n        Array.prototype.map = () => {\n          throw new Error(\"Internal error! This is a fake bug :)\");\n        };\n        babel.parseSync(\"foo;\", {\n          root: fixture(\"valid\")\n        });\n      } finally {\n        Array.prototype.map = map;\n      }\n    }).toMatchInlineSnapshot(`\n      \"Error: Internal error! This is a fake bug :)\n          at Array.map (<CWD>/packages/babel-core/test/errors-stacks.js:_:_)\n          at loadOneConfig (<CWD>/packages/babel-core/lib/config/files/configuration.js:_:_)\n          at loadOneConfig.next (<anonymous>)\n          at buildRootChain (<CWD>/packages/babel-core/lib/config/config-chain.js:_:_)\n          at buildRootChain.next (<anonymous>)\n          at loadPrivatePartialConfig (<CWD>/packages/babel-core/lib/config/partial.js:_:_)\n          at loadPrivatePartialConfig.next (<anonymous>)\n          at loadFullConfig (<CWD>/packages/babel-core/lib/config/full.js:_:_)\n          at loadFullConfig.next (<anonymous>)\n          at parse (<CWD>/packages/babel-core/lib/parse.js:_:_)\n          at parse.next (<anonymous>)\n          at evaluateSync (<CWD>/node_modules/gensync/index.js:_:_)\n          at sync (<CWD>/node_modules/gensync/index.js:_:_)\n          at stopHiding - secret - don't use this - v1 (<CWD>/packages/babel-core/lib/errors/rewrite-stack-trace.js:_:_)\n          at Module.parseSync (<CWD>/packages/babel-core/lib/parse.js:_:_)\n          at <CWD>/packages/babel-core/test/errors-stacks.js:_:_\n          at expectError (<CWD>/packages/babel-core/test/errors-stacks.js:_:_)\n          at <CWD>/packages/babel-core/test/errors-stacks.js:_:_\n          at ... internal jest frames ...\"\n    `);\n  });",
            "file": "errors-stacks.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "lazy plugin required",
            "suites": [],
            "updatePoint": {
                "line": 19,
                "column": 26,
                "index": 636
            },
            "line": 19,
            "code": "  it(\"lazy plugin required\", async () => {\n    expect(await run(\"lazy-plugin-required.cjs\")).toMatchInlineSnapshot(`\n      Object {\n        \"stderr\": \"\",\n        \"stdout\": \"\\\\\"Replaced!\\\\\";\n      \",\n      }\n    `);\n  });",
            "file": "esm-cjs-integration.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "lazy plugin as config string",
            "suites": [],
            "updatePoint": {
                "line": 28,
                "column": 34,
                "index": 865
            },
            "line": 28,
            "code": "  it(\"lazy plugin as config string\", async () => {\n    expect(await run(\"lazy-plugin-as-string.cjs\")).toMatchInlineSnapshot(`\n      Object {\n        \"stderr\": \"\",\n        \"stdout\": \"\\\\\"Replaced!\\\\\";\n      \",\n      }\n    `);\n  });",
            "file": "esm-cjs-integration.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "eager plugin required",
            "suites": [],
            "updatePoint": {
                "line": 37,
                "column": 27,
                "index": 1088
            },
            "line": 37,
            "code": "  it(\"eager plugin required\", async () => {\n    await expect(run(\"eager-plugin-required.cjs\")).rejects.toThrow(\"The `types` export of @babel/core is only accessible from\" + \" the CommonJS version after that the ESM version is loaded.\");\n  });",
            "file": "esm-cjs-integration.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "eager plugin required after dynamic esm import",
            "suites": [],
            "updatePoint": {
                "line": 40,
                "column": 52,
                "index": 1356
            },
            "line": 40,
            "code": "  it(\"eager plugin required after dynamic esm import\", async () => {\n    expect(await run(\"eager-plugin-required-after-dynamic-esm-import.cjs\")).toMatchInlineSnapshot(`\n        Object {\n          \"stderr\": \"\",\n          \"stdout\": \"\\\\\"Replaced!\\\\\";\n        \",\n        }\n      `);\n  });",
            "file": "esm-cjs-integration.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "eager plugin required after static esm import",
            "suites": [],
            "updatePoint": {
                "line": 49,
                "column": 51,
                "index": 1640
            },
            "line": 49,
            "code": "  it(\"eager plugin required after static esm import\", async () => {\n    expect(await run(\"eager-plugin-required-after-static-esm-import.mjs\")).toMatchInlineSnapshot(`\n        Object {\n          \"stderr\": \"\",\n          \"stdout\": \"\\\\\"Replaced!\\\\\";\n        \",\n        }\n      `);\n  });",
            "file": "esm-cjs-integration.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "eager plugin as config string",
            "suites": [],
            "updatePoint": {
                "line": 58,
                "column": 35,
                "index": 1907
            },
            "line": 58,
            "code": "  it(\"eager plugin as config string\", async () => {\n    expect(await run(\"eager-plugin-as-string.cjs\")).toMatchInlineSnapshot(`\n      Object {\n        \"stderr\": \"\",\n        \"stdout\": \"\\\\\"Replaced!\\\\\";\n      \",\n      }\n    `);\n  });",
            "file": "esm-cjs-integration.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "transformSync",
            "suites": [],
            "updatePoint": {
                "line": 67,
                "column": 19,
                "index": 2123
            },
            "line": 67,
            "code": "  it(\"transformSync\", async () => {\n    await expect(run(\"transform-sync.cjs\")).rejects.toThrow(\"The `transformSync` export of @babel/core is only callable from\" + \" the CommonJS version after that the ESM version is loaded.\");\n  });",
            "file": "esm-cjs-integration.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "transformSync after dynamic esm import",
            "suites": [],
            "updatePoint": {
                "line": 70,
                "column": 44,
                "index": 2382
            },
            "line": 70,
            "code": "  it(\"transformSync after dynamic esm import\", async () => {\n    expect(await run(\"transform-sync-after-dynamic-esm-import.cjs\")).toMatchInlineSnapshot(`\n        Object {\n          \"stderr\": \"\",\n          \"stdout\": \"REPLACE_ME;\n        \",\n        }\n      `);\n  });",
            "file": "esm-cjs-integration.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "transformSync after static esm import",
            "suites": [],
            "updatePoint": {
                "line": 79,
                "column": 43,
                "index": 2646
            },
            "line": 79,
            "code": "  it(\"transformSync after static esm import\", async () => {\n    expect(await run(\"transform-sync-after-static-esm-import.mjs\")).toMatchInlineSnapshot(`\n        Object {\n          \"stderr\": \"\",\n          \"stdout\": \"REPLACE_ME;\n        \",\n        }\n      `);\n  });",
            "file": "esm-cjs-integration.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "can be set by plugins",
            "suites": [
                "externalDependencies"
            ],
            "updatePoint": {
                "line": 31,
                "column": 27,
                "index": 744
            },
            "line": 31,
            "code": "  it(\"can be set by plugins\", () => {\n    const {\n      externalDependencies\n    } = transform(\"\", {\n      plugins: [makePlugin(\"./foo\")]\n    });\n    expect(externalDependencies).toEqual(new Set([\"./foo\"]));\n  });",
            "file": "external-dependencies.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "returns a fresh set",
            "suites": [
                "externalDependencies"
            ],
            "updatePoint": {
                "line": 39,
                "column": 25,
                "index": 956
            },
            "line": 39,
            "code": "  it(\"returns a fresh set\", () => {\n    const options = {\n      plugins: [makePlugin(\"./foo\")]\n    };\n    const res1 = transform(\"\", options);\n    const res2 = transform(\"\", options);\n    expect(res1.externalDependencies).toEqual(res2.externalDependencies);\n    expect(res1.externalDependencies).not.toBe(res2.externalDependencies);\n  });",
            "file": "external-dependencies.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "can be set multiple times by the same plugin",
            "suites": [
                "externalDependencies"
            ],
            "updatePoint": {
                "line": 48,
                "column": 50,
                "index": 1320
            },
            "line": 48,
            "code": "  it(\"can be set multiple times by the same plugin\", () => {\n    const {\n      externalDependencies\n    } = transform(\"\", {\n      plugins: [function (api) {\n        api.cache.never();\n        api.addExternalDependency(\"./foo\");\n        api.addExternalDependency(\"./bar\");\n        return {\n          visitor: {}\n        };\n      }]\n    });\n    expect(externalDependencies).toEqual(new Set([\"./foo\", \"./bar\"]));\n  });",
            "file": "external-dependencies.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "can be set by presets",
            "suites": [
                "externalDependencies"
            ],
            "updatePoint": {
                "line": 63,
                "column": 27,
                "index": 1713
            },
            "line": 63,
            "code": "  it(\"can be set by presets\", () => {\n    const {\n      externalDependencies\n    } = transform(\"\", {\n      presets: [makePreset(\"./foo\")]\n    });\n    expect(externalDependencies).toEqual(new Set([\"./foo\"]));\n  });",
            "file": "external-dependencies.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "can be set multiple times by the same preset",
            "suites": [
                "externalDependencies"
            ],
            "updatePoint": {
                "line": 71,
                "column": 50,
                "index": 1950
            },
            "line": 71,
            "code": "  it(\"can be set multiple times by the same preset\", () => {\n    const {\n      externalDependencies\n    } = transform(\"\", {\n      presets: [function (api) {\n        api.cache.never();\n        api.addExternalDependency(\"./foo\");\n        api.addExternalDependency(\"./bar\");\n        return {\n          plugins: []\n        };\n      }]\n    });\n    expect(externalDependencies).toEqual(new Set([\"./foo\", \"./bar\"]));\n  });",
            "file": "external-dependencies.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "can be set by multiple plugins and presets",
            "suites": [
                "externalDependencies"
            ],
            "updatePoint": {
                "line": 86,
                "column": 48,
                "index": 2364
            },
            "line": 86,
            "code": "  it(\"can be set by multiple plugins and presets\", () => {\n    const {\n      externalDependencies\n    } = transform(\"\", {\n      plugins: [makePlugin(\"./plugin1\"), makePlugin(\"./plugin2\")],\n      presets: [makePreset(\"./preset\", [makePlugin(\"./preset-plugin1\"), makePlugin(\"./preset-plugin2\")])]\n    });\n    expect(externalDependencies).toEqual(new Set([\"./plugin1\", \"./plugin2\", \"./preset\", \"./preset-plugin1\", \"./preset-plugin2\"]));\n  });",
            "file": "external-dependencies.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "returned when set by cached plugins",
            "suites": [
                "externalDependencies",
                "cached plugins"
            ],
            "updatePoint": {
                "line": 96,
                "column": 43,
                "index": 2836
            },
            "line": 96,
            "code": "    it(\"returned when set by cached plugins\", () => {\n      const plugin = jest.fn(makePlugin(\"./foo\"));\n      const result1 = transform(\"\", {\n        plugins: [plugin]\n      });\n      const result2 = transform(\"\", {\n        plugins: [plugin]\n      });\n      expect(plugin).toHaveBeenCalledTimes(1);\n      expect(new Set(result1.externalDependencies)).toEqual(new Set([\"./foo\"]));\n      expect(new Set(result2.externalDependencies)).toEqual(new Set([\"./foo\"]));\n    });",
            "file": "external-dependencies.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "cached external dependencies are merged with new ones",
            "suites": [
                "externalDependencies",
                "cached plugins"
            ],
            "updatePoint": {
                "line": 108,
                "column": 61,
                "index": 3324
            },
            "line": 108,
            "code": "    it(\"cached external dependencies are merged with new ones\", () => {\n      const plugin1 = jest.fn(makePlugin(\"./foo\"));\n      const plugin2 = jest.fn((api, {\n        file\n      }) => {\n        api.addExternalDependency(file);\n        api.cache.never();\n        return {\n          visitor: {}\n        };\n      });\n      const result1 = transform(\"\", {\n        plugins: [plugin1, [plugin2, {\n          file: \"./file1\"\n        }]]\n      });\n      const result2 = transform(\"\", {\n        plugins: [plugin1, [plugin2, {\n          file: \"./file2\"\n        }]]\n      });\n      expect(plugin1).toHaveBeenCalledTimes(1);\n      expect(plugin2).toHaveBeenCalledTimes(2);\n      expect(new Set(result1.externalDependencies)).toEqual(new Set([\"./foo\", \"./file1\"]));\n      expect(new Set(result2.externalDependencies)).toEqual(new Set([\"./foo\", \"./file2\"]));\n    });",
            "file": "external-dependencies.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "cache must be configured",
            "suites": [
                "externalDependencies",
                "cache validation"
            ],
            "updatePoint": {
                "line": 136,
                "column": 32,
                "index": 4195
            },
            "line": 136,
            "code": "    it(\"cache must be configured\", () => {\n      function plugin(api) {\n        api.addExternalDependency(\"./foo\");\n        return {\n          visitor: {}\n        };\n      }\n      expect(() => transform(\"\", {\n        plugins: [plugin]\n      })).toThrow(/A plugin\\/preset has external untracked dependencies/);\n    });",
            "file": "external-dependencies.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "cache.forever() is disallowed",
            "suites": [
                "externalDependencies",
                "cache validation"
            ],
            "updatePoint": {
                "line": 147,
                "column": 37,
                "index": 4518
            },
            "line": 147,
            "code": "    it(\"cache.forever() is disallowed\", () => {\n      function plugin(api) {\n        api.cache.forever();\n        api.addExternalDependency(\"./foo\");\n        return {\n          visitor: {}\n        };\n      }\n      expect(() => transform(\"\", {\n        plugins: [plugin]\n      })).toThrow(/A plugin\\/preset has external untracked dependencies/);\n    });",
            "file": "external-dependencies.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "cache.never() is a valid configuration",
            "suites": [
                "externalDependencies",
                "cache validation"
            ],
            "updatePoint": {
                "line": 159,
                "column": 46,
                "index": 4879
            },
            "line": 159,
            "code": "    it(\"cache.never() is a valid configuration\", () => {\n      function plugin(api) {\n        api.cache.never();\n        api.addExternalDependency(\"./foo\");\n        return {\n          visitor: {}\n        };\n      }\n      expect(() => transform(\"\", {\n        plugins: [plugin]\n      })).not.toThrow();\n    });",
            "file": "external-dependencies.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "cache.using() is a valid configuration",
            "suites": [
                "externalDependencies",
                "cache validation"
            ],
            "updatePoint": {
                "line": 171,
                "column": 46,
                "index": 5188
            },
            "line": 171,
            "code": "    it(\"cache.using() is a valid configuration\", () => {\n      function plugin(api) {\n        api.cache.using(() => \"\");\n        api.addExternalDependency(\"./foo\");\n        return {\n          visitor: {}\n        };\n      }\n      expect(() => transform(\"\", {\n        plugins: [plugin]\n      })).not.toThrow();\n    });",
            "file": "external-dependencies.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "cache.invalidate() is a valid configuration",
            "suites": [
                "externalDependencies",
                "cache validation"
            ],
            "updatePoint": {
                "line": 183,
                "column": 51,
                "index": 5510
            },
            "line": 183,
            "code": "    it(\"cache.invalidate() is a valid configuration\", () => {\n      function plugin(api) {\n        api.cache.invalidate(() => \"\");\n        api.addExternalDependency(\"./foo\");\n        return {\n          visitor: {}\n        };\n      }\n      expect(() => transform(\"\", {\n        plugins: [plugin]\n      })).not.toThrow();\n    });",
            "file": "external-dependencies.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "cache must be configured in the same plugin that uses addExternalDependency",
            "suites": [
                "externalDependencies",
                "cache validation"
            ],
            "updatePoint": {
                "line": 195,
                "column": 83,
                "index": 5869
            },
            "line": 195,
            "code": "    it(\"cache must be configured in the same plugin that uses addExternalDependency\", () => {\n      function plugin1(api) {\n        api.cache.never();\n        return {\n          visitor: {}\n        };\n      }\n      function plugin2(api) {\n        api.addExternalDependency(\"./foo\");\n        return {\n          visitor: {}\n        };\n      }\n      expect(() => transform(\"\", {\n        plugins: [plugin1, plugin2]\n      })).toThrow(/A plugin\\/preset has external untracked dependencies/);\n    });",
            "file": "external-dependencies.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "cache does not need to be configured in other plugins",
            "suites": [
                "externalDependencies",
                "cache validation"
            ],
            "updatePoint": {
                "line": 212,
                "column": 61,
                "index": 6342
            },
            "line": 212,
            "code": "    it(\"cache does not need to be configured in other plugins\", () => {\n      function plugin1() {\n        return {\n          visitor: {}\n        };\n      }\n      function plugin2(api) {\n        api.cache.never();\n        api.addExternalDependency(\"./foo\");\n        return {\n          visitor: {}\n        };\n      }\n      expect(() => transform(\"\", {\n        plugins: [plugin1, plugin2]\n      })).not.toThrow();\n    });",
            "file": "external-dependencies.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "no external dependencies",
            "suites": [
                "externalDependencies",
                "regressions",
                "#14233"
            ],
            "updatePoint": {
                "line": 232,
                "column": 34,
                "index": 6806
            },
            "line": 232,
            "code": "      it(\"no external dependencies\", () => {\n        const code = `let a = 1`;\n        function pluginA(api) {\n          api.cache.never();\n          return {\n            name: \"plugin-a\"\n          };\n        }\n        function pluginB() {\n          return {\n            name: \"plugin-b\",\n            inherits: pluginA\n          };\n        }\n        expect(() => {\n          transform(code, {\n            plugins: [pluginB]\n          });\n          transform(code, {\n            plugins: [pluginB]\n          });\n        }).not.toThrow();\n      });",
            "file": "external-dependencies.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "with external dependencies",
            "suites": [
                "externalDependencies",
                "regressions",
                "#14233"
            ],
            "updatePoint": {
                "line": 255,
                "column": 36,
                "index": 7355
            },
            "line": 255,
            "code": "      it(\"with external dependencies\", () => {\n        const code = `let a = 1`;\n        let pluginAdep = \"./a-foo\";\n        function pluginA(api) {\n          api.cache.never();\n          api.addExternalDependency(pluginAdep);\n          return {\n            name: \"plugin-a\"\n          };\n        }\n        const pluginB = jest.fn(function pluginB(api) {\n          api.cache.using(() => 0);\n          api.addExternalDependency(\"./b-foo\");\n          return {\n            name: \"plugin-b\",\n            inherits: pluginA\n          };\n        });\n        const result1 = transform(code, {\n          plugins: [pluginB]\n        });\n        pluginAdep = \"./a-bar\";\n        const result2 = transform(code, {\n          plugins: [pluginB]\n        });\n        expect(pluginB).toHaveBeenCalledTimes(1);\n        expect(new Set(result1.externalDependencies)).toEqual(new Set([\"./a-foo\", \"./b-foo\"]));\n        expect(new Set(result2.externalDependencies)).toEqual(new Set([\"./a-bar\", \"./b-foo\"]));\n      });",
            "file": "external-dependencies.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "returns a plain js object",
            "suites": [
                "merge-map"
            ],
            "updatePoint": {
                "line": 4,
                "column": 31,
                "index": 200
            },
            "line": 4,
            "code": "  it(\"returns a plain js object\", () => {\n    const inputMap = {\n      file: \"file.js\",\n      mappings: [],\n      names: [],\n      sources: [\"file.ts\"],\n      version: 3\n    };\n    const outputMap = {\n      file: \"file.transpiled.js\",\n      mappings: [],\n      names: [],\n      sources: [\"file.js\"],\n      version: 3\n    };\n    const map = mergeSourceMap(inputMap, outputMap, \"file.transpiled.js\");\n    expect(typeof map).toBe(\"object\");\n    expect(Object.prototype.toString.call(map)).toBe(\"[object Object]\");\n    expect(Object.getPrototypeOf(map)).toBe(Object.prototype);\n  });",
            "file": "merge-map.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should throw when an option is provided as a preset",
            "suites": [
                "option-manager",
                "config plugin/preset flattening and overriding"
            ],
            "updatePoint": {
                "line": 47,
                "column": 59,
                "index": 1327
            },
            "line": 47,
            "code": "    it(\"should throw when an option is provided as a preset\", () => {\n      expect(() => {\n        loadOptions({\n          presets: [\"./fixtures/option-manager/babel-preset-bar\", {\n            useBuiltIns: \"entry\"\n          }]\n        });\n      }).toThrowErrorMatchingSnapshot();\n    });",
            "file": "option-manager.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should throw when an option is provided as a plugin",
            "suites": [
                "option-manager",
                "config plugin/preset flattening and overriding"
            ],
            "updatePoint": {
                "line": 56,
                "column": 59,
                "index": 1615
            },
            "line": 56,
            "code": "    it(\"should throw when an option is provided as a plugin\", () => {\n      expect(() => {\n        loadOptions({\n          plugins: [\"./fixtures/option-manager/babel-plugin-foo\", {\n            useSpread: true\n          }]\n        });\n      }).toThrowErrorMatchingSnapshot();\n    });",
            "file": "option-manager.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should throw when an option is following a preset",
            "suites": [
                "option-manager",
                "config plugin/preset flattening and overriding"
            ],
            "updatePoint": {
                "line": 65,
                "column": 57,
                "index": 1896
            },
            "line": 65,
            "code": "    it(\"should throw when an option is following a preset\", () => {\n      expect(() => {\n        loadOptions({\n          presets: [\"./fixtures/option-manager/babel-plugin-foo\", \"./fixtures/option-manager/babel-preset-bar\", {\n            useSpread: true\n          }]\n        });\n      }).toThrowErrorMatchingSnapshot();\n    });",
            "file": "option-manager.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should not throw when a preset string followed by valid preset object",
            "suites": [
                "option-manager",
                "config plugin/preset flattening and overriding"
            ],
            "updatePoint": {
                "line": 74,
                "column": 77,
                "index": 2243
            },
            "line": 74,
            "code": "    it(\"should not throw when a preset string followed by valid preset object\", async () => {\n      const {\n        plugin\n      } = makePlugin();\n      expect(await loadOptionsAsync({\n        presets: [\"@babel/env\", {\n          plugins: [[plugin, undefined, \"my-plugin\"]]\n        }]\n      })).toBeTruthy();\n    });",
            "file": "option-manager.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should throw if a plugin name is repeated, with information about the repeated plugin",
            "suites": [
                "option-manager",
                "config plugin/preset flattening and overriding"
            ],
            "updatePoint": {
                "line": 84,
                "column": 93,
                "index": 2575
            },
            "line": 84,
            "code": "    it(\"should throw if a plugin name is repeated, with information about the repeated plugin\", () => {\n      const {\n        calls,\n        plugin\n      } = makePlugin();\n      expect(() => {\n        loadOptions({\n          plugins: [[plugin, undefined, \"my-plugin\"], [plugin, undefined, \"my-plugin\"]]\n        });\n      }).toThrow(/Duplicate plugin\\/preset detected.*Duplicates detected are.*my-plugin.*my-plugin/ms);\n      expect(calls).toEqual([]);\n    });",
            "file": "option-manager.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "throws for null options",
            "suites": [
                "option-manager",
                "config plugin/preset flattening and overriding"
            ],
            "updatePoint": {
                "line": 96,
                "column": 31,
                "index": 2973
            },
            "line": 96,
            "code": "    it(\"throws for null options\", () => {\n      const {\n        calls,\n        plugin\n      } = makePlugin();\n      expect(() => {\n        loadOptions({\n          plugins: [[plugin, null]]\n        });\n      }).toThrow(\".plugins[0][1] must be an object, false, or undefined\");\n      expect(calls).toEqual([]);\n    });",
            "file": "option-manager.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should not throw if a repeated plugin has a different name",
            "suites": [
                "option-manager",
                "config plugin/preset flattening and overriding"
            ],
            "updatePoint": {
                "line": 108,
                "column": 66,
                "index": 3325
            },
            "line": 108,
            "code": "    it(\"should not throw if a repeated plugin has a different name\", () => {\n      const {\n        calls,\n        plugin\n      } = makePlugin();\n      loadOptions({\n        plugins: [[plugin, {\n          arg: 1\n        }], [plugin, {\n          arg: 2\n        }, \"some-name\"]]\n      });\n      expect(calls).toEqual([{\n        arg: 1\n      }, {\n        arg: 2\n      }]);\n    });",
            "file": "option-manager.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should merge .env[] plugins with parent presets",
            "suites": [
                "option-manager",
                "config plugin/preset flattening and overriding"
            ],
            "updatePoint": {
                "line": 126,
                "column": 55,
                "index": 3691
            },
            "line": 126,
            "code": "    it(\"should merge .env[] plugins with parent presets\", () => {\n      const {\n        calls: calls1,\n        plugin: plugin1\n      } = makePlugin();\n      const {\n        calls: calls2,\n        plugin: plugin2\n      } = makePlugin();\n      loadOptions({\n        envName: \"test\",\n        plugins: [[plugin1, {\n          arg: 1\n        }]],\n        env: {\n          test: {\n            plugins: [[plugin1, {\n              arg: 3\n            }], [plugin2, {\n              arg: 2\n            }]]\n          }\n        }\n      });\n      expect(calls1).toEqual([{\n        arg: 3\n      }]);\n      expect(calls2).toEqual([{\n        arg: 2\n      }]);\n    });",
            "file": "option-manager.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should throw if a preset is repeated",
            "suites": [
                "option-manager",
                "config plugin/preset flattening and overriding"
            ],
            "updatePoint": {
                "line": 157,
                "column": 44,
                "index": 4330
            },
            "line": 157,
            "code": "    it(\"should throw if a preset is repeated\", () => {\n      const {\n        calls,\n        plugin: preset\n      } = makePlugin();\n      expect(() => {\n        loadOptions({\n          presets: [preset, preset]\n        });\n      }).toThrow(/Duplicate plugin\\/preset detected/);\n      expect(calls).toEqual([]);\n    });",
            "file": "option-manager.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should not throw if a repeated preset has a different name",
            "suites": [
                "option-manager",
                "config plugin/preset flattening and overriding"
            ],
            "updatePoint": {
                "line": 169,
                "column": 66,
                "index": 4670
            },
            "line": 169,
            "code": "    it(\"should not throw if a repeated preset has a different name\", () => {\n      const {\n        calls,\n        plugin: preset\n      } = makePlugin();\n      loadOptions({\n        presets: [[preset, {\n          arg: 1\n        }], [preset, {\n          arg: 2\n        }, \"some-name\"]]\n      });\n      expect(calls).toEqual([{\n        arg: 1\n      }, {\n        arg: 2\n      }]);\n    });",
            "file": "option-manager.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should merge .env[] presets with parent presets",
            "suites": [
                "option-manager",
                "config plugin/preset flattening and overriding"
            ],
            "updatePoint": {
                "line": 187,
                "column": 55,
                "index": 5044
            },
            "line": 187,
            "code": "    it(\"should merge .env[] presets with parent presets\", () => {\n      const {\n        calls: calls1,\n        plugin: preset1\n      } = makePlugin();\n      const {\n        calls: calls2,\n        plugin: preset2\n      } = makePlugin();\n      loadOptions({\n        envName: \"test\",\n        presets: [[preset1, {\n          arg: 1\n        }]],\n        env: {\n          test: {\n            presets: [[preset1, {\n              arg: 3\n            }], [preset2, {\n              arg: 2\n            }]]\n          }\n        }\n      });\n      expect(calls1).toEqual([{\n        arg: 3\n      }]);\n      expect(calls2).toEqual([{\n        arg: 2\n      }]);\n    });",
            "file": "option-manager.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should not merge .env[] presets with parent presets when passPerPreset",
            "suites": [
                "option-manager",
                "config plugin/preset flattening and overriding"
            ],
            "updatePoint": {
                "line": 218,
                "column": 78,
                "index": 5717
            },
            "line": 218,
            "code": "    it(\"should not merge .env[] presets with parent presets when passPerPreset\", () => {\n      const {\n        calls: calls1,\n        plugin: preset1\n      } = makePlugin();\n      const {\n        calls: calls2,\n        plugin: preset2\n      } = makePlugin();\n      loadOptions({\n        envName: \"test\",\n        passPerPreset: true,\n        presets: [[preset1, {\n          arg: 1\n        }]],\n        env: {\n          test: {\n            presets: [[preset1, {\n              arg: 3\n            }], [preset2, {\n              arg: 2\n            }]]\n          }\n        }\n      });\n      expect(calls1).toEqual([{\n        arg: 1\n      }, {\n        arg: 3\n      }]);\n      expect(calls2).toEqual([{\n        arg: 2\n      }]);\n    });",
            "file": "option-manager.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "throws for removed babel 5 options",
            "suites": [
                "option-manager",
                "mergeOptions"
            ],
            "updatePoint": {
                "line": 254,
                "column": 42,
                "index": 6450
            },
            "line": 254,
            "code": "    it(\"throws for removed babel 5 options\", () => {\n      return expect(() => {\n        loadOptions({\n          randomOption: true\n        });\n      }).toThrow(/Unknown option: .randomOption/);\n    });",
            "file": "option-manager.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "throws for removed babel 5 options",
            "suites": [
                "option-manager",
                "mergeOptions"
            ],
            "updatePoint": {
                "line": 261,
                "column": 42,
                "index": 6653
            },
            "line": 261,
            "code": "    it(\"throws for removed babel 5 options\", () => {\n      return expect(() => {\n        loadOptions({\n          auxiliaryComment: true,\n          blacklist: true\n        });\n      }).toThrow(\n      // eslint-disable-next-line max-len\n      /Using removed Babel 5 option: .auxiliaryComment - Use `auxiliaryCommentBefore` or `auxiliaryCommentAfter`/);\n    });",
            "file": "option-manager.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "throws for resolved but erroring preset",
            "suites": [
                "option-manager",
                "mergeOptions"
            ],
            "updatePoint": {
                "line": 271,
                "column": 47,
                "index": 7017
            },
            "line": 271,
            "code": "    it(\"throws for resolved but erroring preset\", () => {\n      return expect(() => {\n        loadOptions({\n          presets: [path.join(cwd, \"fixtures/option-manager/not-a-preset\")]\n        });\n      }).toThrow(/While processing: .*option-manager(?:\\/|\\\\\\\\)not-a-preset\\.js/);\n    });",
            "file": "option-manager.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "%p should work",
            "suites": [
                "option-manager",
                "presets"
            ],
            "line": 280,
            "code": "    it.each([\"es5_function\", \"es5_object\", \"es2015_default_function\", \"es2015_default_object\"])(\"%p should work\", async name => {\n      const options = await loadOptionsAsync({\n        presets: [path.join(cwd, \"fixtures/option-manager/presets\", name)]\n      });\n      expect(Array.isArray(options.plugins)).toBe(true);\n      expect(options.plugins).toHaveLength(1);\n      expect(options.presets).toHaveLength(0);\n    });",
            "file": "option-manager.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "%p should throw",
            "suites": [
                "option-manager",
                "presets"
            ],
            "line": 293,
            "code": "    it.each([\"es2015_invalid\", \"es5_invalid\"])(\"%p should throw\", async name => {\n      await expect(loadOptionsAsync({\n        presets: [path.join(cwd, \"fixtures/option-manager/presets\", name)]\n      })).rejects.toThrow(/Unsupported format: string/);\n    });",
            "file": "option-manager.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should parse using configuration from .babelrc when a filename is provided",
            "suites": [
                "parseSync"
            ],
            "updatePoint": {
                "line": 11,
                "column": 80,
                "index": 459
            },
            "line": 11,
            "code": "  it(\"should parse using configuration from .babelrc when a filename is provided\", function () {\n    const input = fs.readFileSync(fixture(\"input.js\"), \"utf8\");\n    const output = require(fixture(\"output\"));\n    const result = parseSync(input, {\n      filename: fixture(\"input.js\"),\n      cwd: fixture()\n    });\n    expect(JSON.parse(JSON.stringify(result))).toEqual(output);\n  });",
            "file": "parse.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should parse using passed in configuration",
            "suites": [
                "parseSync"
            ],
            "updatePoint": {
                "line": 20,
                "column": 48,
                "index": 809
            },
            "line": 20,
            "code": "  it(\"should parse using passed in configuration\", function () {\n    const input = fs.readFileSync(fixture(\"input.js\"), \"utf8\");\n    const output = require(fixture(\"output.json\"));\n    const result = parseSync(input, {\n      parserOpts: {\n        plugins: [[\"decorators\", {\n          decoratorsBeforeExport: false\n        }]]\n      },\n      cwd: fixture()\n    });\n    expect(JSON.parse(JSON.stringify(result))).toEqual(output);\n  });",
            "file": "parse.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "replaceWithSourceString",
            "suites": [
                "traversal path"
            ],
            "updatePoint": {
                "line": 8,
                "column": 29,
                "index": 330
            },
            "line": 8,
            "code": "  it(\"replaceWithSourceString\", function () {\n    const expectCode = \"function foo() {}\";\n    const actualCode = transformSync(expectCode, {\n      cwd,\n      plugins: [new Plugin({\n        visitor: {\n          FunctionDeclaration: function (path) {\n            path.replaceWithSourceString(\"console.whatever()\");\n          }\n        }\n      })]\n    }).code;\n    expect(actualCode).toBe(\"console.whatever();\");\n  });",
            "file": "path.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "replaceWith (arrow expression body to block statement body)",
            "suites": [
                "traversal path"
            ],
            "updatePoint": {
                "line": 22,
                "column": 65,
                "index": 782
            },
            "line": 22,
            "code": "  it(\"replaceWith (arrow expression body to block statement body)\", function () {\n    const expectCode = \"var fn = () => true;\";\n    const actualCode = transformSync(expectCode, {\n      cwd,\n      plugins: [new Plugin({\n        visitor: {\n          ArrowFunctionExpression: function (path) {\n            path.get(\"body\").replaceWith({\n              type: \"BlockStatement\",\n              body: [{\n                type: \"ReturnStatement\",\n                argument: {\n                  type: \"BooleanLiteral\",\n                  value: true\n                }\n              }]\n            });\n          }\n        }\n      })]\n    }).code;\n    expect(actualCode).toBe(\"var fn = () => {\\n  return true;\\n};\");\n  });",
            "file": "path.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "replaceWith (arrow block statement body to expression body)",
            "suites": [
                "traversal path"
            ],
            "updatePoint": {
                "line": 45,
                "column": 65,
                "index": 1490
            },
            "line": 45,
            "code": "  it(\"replaceWith (arrow block statement body to expression body)\", function () {\n    const expectCode = \"var fn = () => { return true; }\";\n    const actualCode = transformSync(expectCode, {\n      cwd,\n      plugins: [new Plugin({\n        visitor: {\n          ArrowFunctionExpression: function (path) {\n            path.get(\"body\").replaceWith({\n              type: \"BooleanLiteral\",\n              value: true\n            });\n          }\n        }\n      })]\n    }).code;\n    expect(actualCode).toBe(\"var fn = () => true;\");\n  });",
            "file": "path.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "replaceWith (for-in left expression to variable declaration)",
            "suites": [
                "traversal path"
            ],
            "updatePoint": {
                "line": 62,
                "column": 66,
                "index": 2021
            },
            "line": 62,
            "code": "  it(\"replaceWith (for-in left expression to variable declaration)\", function () {\n    const expectCode = \"for (KEY in right);\";\n    const actualCode = transformSync(expectCode, {\n      cwd,\n      plugins: [new Plugin({\n        visitor: {\n          ForInStatement: function (path) {\n            path.get(\"left\").replaceWith({\n              type: \"VariableDeclaration\",\n              kind: \"var\",\n              declarations: [{\n                type: \"VariableDeclarator\",\n                id: {\n                  type: \"Identifier\",\n                  name: \"KEY\"\n                }\n              }]\n            });\n          }\n        }\n      })]\n    }).code;\n    expect(actualCode).toBe(\"for (var KEY in right);\");\n  });",
            "file": "path.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "replaceWith (for-in left variable declaration to expression)",
            "suites": [
                "traversal path"
            ],
            "updatePoint": {
                "line": 86,
                "column": 66,
                "index": 2740
            },
            "line": 86,
            "code": "  it(\"replaceWith (for-in left variable declaration to expression)\", function () {\n    const expectCode = \"for (var KEY in right);\";\n    const actualCode = transformSync(expectCode, {\n      cwd,\n      plugins: [new Plugin({\n        visitor: {\n          ForInStatement: function (path) {\n            path.get(\"left\").replaceWith({\n              type: \"Identifier\",\n              name: \"KEY\"\n            });\n          }\n        }\n      })]\n    }).code;\n    expect(actualCode).toBe(\"for (KEY in right);\");\n  });",
            "file": "path.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "replaceWith (for-loop left expression to variable declaration)",
            "suites": [
                "traversal path"
            ],
            "updatePoint": {
                "line": 103,
                "column": 68,
                "index": 3251
            },
            "line": 103,
            "code": "  it(\"replaceWith (for-loop left expression to variable declaration)\", function () {\n    const expectCode = \"for (KEY;;);\";\n    const actualCode = transformSync(expectCode, {\n      cwd,\n      plugins: [new Plugin({\n        visitor: {\n          ForStatement: function (path) {\n            path.get(\"init\").replaceWith({\n              type: \"VariableDeclaration\",\n              kind: \"var\",\n              declarations: [{\n                type: \"VariableDeclarator\",\n                id: {\n                  type: \"Identifier\",\n                  name: \"KEY\"\n                }\n              }]\n            });\n          }\n        }\n      })]\n    }).code;\n    expect(actualCode).toBe(\"for (var KEY;;);\");\n  });",
            "file": "path.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "replaceWith (for-loop left variable declaration to expression)",
            "suites": [
                "traversal path"
            ],
            "updatePoint": {
                "line": 127,
                "column": 68,
                "index": 3956
            },
            "line": 127,
            "code": "  it(\"replaceWith (for-loop left variable declaration to expression)\", function () {\n    const expectCode = \"for (var KEY;;);\";\n    const actualCode = transformSync(expectCode, {\n      cwd,\n      plugins: [new Plugin({\n        visitor: {\n          ForStatement: function (path) {\n            path.get(\"init\").replaceWith({\n              type: \"Identifier\",\n              name: \"KEY\"\n            });\n          }\n        }\n      })]\n    }).code;\n    expect(actualCode).toBe(\"for (KEY;;);\");\n  });",
            "file": "path.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should find module: presets",
            "suites": [
                "addon resolution"
            ],
            "updatePoint": {
                "line": 14,
                "column": 33,
                "index": 429
            },
            "line": 14,
            "code": "  it(\"should find module: presets\", function () {\n    process.chdir(\"module-paths\");\n    babel.transformSync(\"\", {\n      filename: \"filename.js\",\n      babelrc: false,\n      presets: [\"module:preset\"]\n    });\n  });",
            "file": "resolution.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should find module: plugins",
            "suites": [
                "addon resolution"
            ],
            "updatePoint": {
                "line": 22,
                "column": 33,
                "index": 644
            },
            "line": 22,
            "code": "  it(\"should find module: plugins\", function () {\n    process.chdir(\"module-paths\");\n    babel.transformSync(\"\", {\n      filename: \"filename.js\",\n      babelrc: false,\n      plugins: [\"module:plugin\"]\n    });\n  });",
            "file": "resolution.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should find standard presets",
            "suites": [
                "addon resolution"
            ],
            "updatePoint": {
                "line": 30,
                "column": 34,
                "index": 860
            },
            "line": 30,
            "code": "  it(\"should find standard presets\", function () {\n    process.chdir(\"standard-paths\");\n    babel.transformSync(\"\", {\n      filename: \"filename.js\",\n      babelrc: false,\n      presets: [\"mod\"]\n    });\n  });",
            "file": "resolution.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should find standard plugins",
            "suites": [
                "addon resolution"
            ],
            "updatePoint": {
                "line": 38,
                "column": 34,
                "index": 1068
            },
            "line": 38,
            "code": "  it(\"should find standard plugins\", function () {\n    process.chdir(\"standard-paths\");\n    babel.transformSync(\"\", {\n      filename: \"filename.js\",\n      babelrc: false,\n      plugins: [\"mod\"]\n    });\n  });",
            "file": "resolution.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should find standard presets with an existing prefix",
            "suites": [
                "addon resolution"
            ],
            "updatePoint": {
                "line": 46,
                "column": 58,
                "index": 1300
            },
            "line": 46,
            "code": "  it(\"should find standard presets with an existing prefix\", function () {\n    process.chdir(\"standard-paths\");\n    babel.transformSync(\"\", {\n      filename: \"filename.js\",\n      babelrc: false,\n      presets: [\"babel-preset-mod\"]\n    });\n  });",
            "file": "resolution.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should find standard plugins with an existing prefix",
            "suites": [
                "addon resolution"
            ],
            "updatePoint": {
                "line": 54,
                "column": 58,
                "index": 1545
            },
            "line": 54,
            "code": "  it(\"should find standard plugins with an existing prefix\", function () {\n    process.chdir(\"standard-paths\");\n    babel.transformSync(\"\", {\n      filename: \"filename.js\",\n      babelrc: false,\n      plugins: [\"babel-plugin-mod\"]\n    });\n  });",
            "file": "resolution.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should find @babel scoped presets",
            "suites": [
                "addon resolution"
            ],
            "updatePoint": {
                "line": 62,
                "column": 39,
                "index": 1771
            },
            "line": 62,
            "code": "  it(\"should find @babel scoped presets\", function () {\n    process.chdir(\"babel-org-paths\");\n    babel.transformSync(\"\", {\n      filename: \"filename.js\",\n      babelrc: false,\n      presets: [\"@babel/foo\"]\n    });\n  });",
            "file": "resolution.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should find @babel scoped plugins",
            "suites": [
                "addon resolution"
            ],
            "updatePoint": {
                "line": 70,
                "column": 39,
                "index": 1992
            },
            "line": 70,
            "code": "  it(\"should find @babel scoped plugins\", function () {\n    process.chdir(\"babel-org-paths\");\n    babel.transformSync(\"\", {\n      filename: \"filename.js\",\n      babelrc: false,\n      plugins: [\"@babel/foo\"]\n    });\n  });",
            "file": "resolution.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should find @babel scoped presets with an existing prefix",
            "suites": [
                "addon resolution"
            ],
            "updatePoint": {
                "line": 78,
                "column": 63,
                "index": 2237
            },
            "line": 78,
            "code": "  it(\"should find @babel scoped presets with an existing prefix\", function () {\n    process.chdir(\"babel-org-paths\");\n    babel.transformSync(\"\", {\n      filename: \"filename.js\",\n      babelrc: false,\n      presets: [\"@babel/preset-foo\"]\n    });\n  });",
            "file": "resolution.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should find @babel scoped plugins",
            "suites": [
                "addon resolution"
            ],
            "updatePoint": {
                "line": 86,
                "column": 39,
                "index": 2465
            },
            "line": 86,
            "code": "  it(\"should find @babel scoped plugins\", function () {\n    process.chdir(\"babel-org-paths\");\n    babel.transformSync(\"\", {\n      filename: \"filename.js\",\n      babelrc: false,\n      plugins: [\"@babel/plugin-foo\"]\n    });\n  });",
            "file": "resolution.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should find @foo scoped presets",
            "suites": [
                "addon resolution"
            ],
            "updatePoint": {
                "line": 94,
                "column": 37,
                "index": 2691
            },
            "line": 94,
            "code": "  it(\"should find @foo scoped presets\", function () {\n    process.chdir(\"foo-org-paths\");\n    babel.transformSync(\"\", {\n      filename: \"filename.js\",\n      babelrc: false,\n      presets: [\"@foo/mod\"]\n    });\n  });",
            "file": "resolution.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should find @foo scoped plugins",
            "suites": [
                "addon resolution"
            ],
            "updatePoint": {
                "line": 102,
                "column": 37,
                "index": 2906
            },
            "line": 102,
            "code": "  it(\"should find @foo scoped plugins\", function () {\n    process.chdir(\"foo-org-paths\");\n    babel.transformSync(\"\", {\n      filename: \"filename.js\",\n      babelrc: false,\n      plugins: [\"@foo/mod\"]\n    });\n  });",
            "file": "resolution.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should find @foo scoped presets with an inner babel-preset",
            "suites": [
                "addon resolution"
            ],
            "updatePoint": {
                "line": 110,
                "column": 64,
                "index": 3148
            },
            "line": 110,
            "code": "  it(\"should find @foo scoped presets with an inner babel-preset\", function () {\n    process.chdir(\"foo-org-paths\");\n    babel.transformSync(\"\", {\n      filename: \"filename.js\",\n      babelrc: false,\n      presets: [\"@foo/thing.babel-preset-convert\"]\n    });\n  });",
            "file": "resolution.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should find @foo scoped plugins with an inner babel-plugin",
            "suites": [
                "addon resolution"
            ],
            "updatePoint": {
                "line": 118,
                "column": 64,
                "index": 3413
            },
            "line": 118,
            "code": "  it(\"should find @foo scoped plugins with an inner babel-plugin\", function () {\n    process.chdir(\"foo-org-paths\");\n    babel.transformSync(\"\", {\n      filename: \"filename.js\",\n      babelrc: false,\n      plugins: [\"@foo/thing.babel-plugin-convert\"]\n    });\n  });",
            "file": "resolution.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should find @foo scoped presets with an babel-preset suffix",
            "suites": [
                "addon resolution"
            ],
            "updatePoint": {
                "line": 126,
                "column": 65,
                "index": 3679
            },
            "line": 126,
            "code": "  it(\"should find @foo scoped presets with an babel-preset suffix\", function () {\n    process.chdir(\"foo-org-paths\");\n    babel.transformSync(\"\", {\n      filename: \"filename.js\",\n      babelrc: false,\n      presets: [\"@foo/thing-babel-preset\"]\n    });\n  });",
            "file": "resolution.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should find @foo scoped plugins with an babel-plugin suffix",
            "suites": [
                "addon resolution"
            ],
            "updatePoint": {
                "line": 134,
                "column": 65,
                "index": 3937
            },
            "line": 134,
            "code": "  it(\"should find @foo scoped plugins with an babel-plugin suffix\", function () {\n    process.chdir(\"foo-org-paths\");\n    babel.transformSync(\"\", {\n      filename: \"filename.js\",\n      babelrc: false,\n      plugins: [\"@foo/thing-babel-plugin\"]\n    });\n  });",
            "file": "resolution.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should find @foo scoped presets with an existing prefix",
            "suites": [
                "addon resolution"
            ],
            "updatePoint": {
                "line": 142,
                "column": 61,
                "index": 4191
            },
            "line": 142,
            "code": "  it(\"should find @foo scoped presets with an existing prefix\", function () {\n    process.chdir(\"foo-org-paths\");\n    babel.transformSync(\"\", {\n      filename: \"filename.js\",\n      babelrc: false,\n      presets: [\"@foo/babel-preset-mod\"]\n    });\n  });",
            "file": "resolution.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should find @foo scoped plugins with an existing prefix",
            "suites": [
                "addon resolution"
            ],
            "updatePoint": {
                "line": 150,
                "column": 61,
                "index": 4443
            },
            "line": 150,
            "code": "  it(\"should find @foo scoped plugins with an existing prefix\", function () {\n    process.chdir(\"foo-org-paths\");\n    babel.transformSync(\"\", {\n      filename: \"filename.js\",\n      babelrc: false,\n      plugins: [\"@foo/babel-plugin-mod\"]\n    });\n  });",
            "file": "resolution.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should find @foo/babel-plugin when specified",
            "suites": [
                "addon resolution"
            ],
            "updatePoint": {
                "line": 158,
                "column": 50,
                "index": 4684
            },
            "line": 158,
            "code": "  it(\"should find @foo/babel-plugin when specified\", function () {\n    process.chdir(\"foo-org-paths\");\n    babel.transformSync(\"\", {\n      filename: \"filename.js\",\n      babelrc: false,\n      plugins: [\"@foo/babel-plugin\"]\n    });\n  });",
            "file": "resolution.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should find @foo/babel-preset when specified",
            "suites": [
                "addon resolution"
            ],
            "updatePoint": {
                "line": 166,
                "column": 50,
                "index": 4921
            },
            "line": 166,
            "code": "  it(\"should find @foo/babel-preset when specified\", function () {\n    process.chdir(\"foo-org-paths\");\n    babel.transformSync(\"\", {\n      filename: \"filename.js\",\n      babelrc: false,\n      presets: [\"@foo/babel-preset\"]\n    });\n  });",
            "file": "resolution.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should find @foo/babel-plugin/index when specified",
            "suites": [
                "addon resolution"
            ],
            "updatePoint": {
                "line": 174,
                "column": 56,
                "index": 5164
            },
            "line": 174,
            "code": "  it(\"should find @foo/babel-plugin/index when specified\", function () {\n    process.chdir(\"foo-org-paths\");\n    babel.transformSync(\"\", {\n      filename: \"filename.js\",\n      babelrc: false,\n      plugins: [\"@foo/babel-plugin/index\"]\n    });\n  });",
            "file": "resolution.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should find @foo/babel-preset/index when specified",
            "suites": [
                "addon resolution"
            ],
            "updatePoint": {
                "line": 182,
                "column": 56,
                "index": 5413
            },
            "line": 182,
            "code": "  it(\"should find @foo/babel-preset/index when specified\", function () {\n    process.chdir(\"foo-org-paths\");\n    babel.transformSync(\"\", {\n      filename: \"filename.js\",\n      babelrc: false,\n      presets: [\"@foo/babel-preset/index\"]\n    });\n  });",
            "file": "resolution.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should find @foo/babel-plugin when just scope given",
            "suites": [
                "addon resolution"
            ],
            "updatePoint": {
                "line": 190,
                "column": 57,
                "index": 5663
            },
            "line": 190,
            "code": "  it(\"should find @foo/babel-plugin when just scope given\", function () {\n    process.chdir(\"foo-org-paths\");\n    babel.transformSync(\"\", {\n      filename: \"filename.js\",\n      babelrc: false,\n      plugins: [\"@foo\"]\n    });\n  });",
            "file": "resolution.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should find @foo/babel-preset when just scope given",
            "suites": [
                "addon resolution"
            ],
            "updatePoint": {
                "line": 198,
                "column": 57,
                "index": 5894
            },
            "line": 198,
            "code": "  it(\"should find @foo/babel-preset when just scope given\", function () {\n    process.chdir(\"foo-org-paths\");\n    babel.transformSync(\"\", {\n      filename: \"filename.js\",\n      babelrc: false,\n      presets: [\"@foo\"]\n    });\n  });",
            "file": "resolution.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should find relative path presets",
            "suites": [
                "addon resolution"
            ],
            "updatePoint": {
                "line": 206,
                "column": 39,
                "index": 6107
            },
            "line": 206,
            "code": "  it(\"should find relative path presets\", function () {\n    process.chdir(\"relative-paths\");\n    babel.transformSync(\"\", {\n      filename: \"filename.js\",\n      babelrc: false,\n      presets: [\"./dir/preset.js\"]\n    });\n  });",
            "file": "resolution.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should find relative path plugins",
            "suites": [
                "addon resolution"
            ],
            "updatePoint": {
                "line": 214,
                "column": 39,
                "index": 6332
            },
            "line": 214,
            "code": "  it(\"should find relative path plugins\", function () {\n    process.chdir(\"relative-paths\");\n    babel.transformSync(\"\", {\n      filename: \"filename.js\",\n      babelrc: false,\n      plugins: [\"./dir/plugin.js\"]\n    });\n  });",
            "file": "resolution.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should find module file presets",
            "suites": [
                "addon resolution"
            ],
            "updatePoint": {
                "line": 222,
                "column": 37,
                "index": 6555
            },
            "line": 222,
            "code": "  it(\"should find module file presets\", function () {\n    process.chdir(\"nested-module-paths\");\n    babel.transformSync(\"\", {\n      filename: \"filename.js\",\n      babelrc: false,\n      presets: [\"mod/preset\"]\n    });\n  });",
            "file": "resolution.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should find module file plugins",
            "suites": [
                "addon resolution"
            ],
            "updatePoint": {
                "line": 230,
                "column": 37,
                "index": 6778
            },
            "line": 230,
            "code": "  it(\"should find module file plugins\", function () {\n    process.chdir(\"nested-module-paths\");\n    babel.transformSync(\"\", {\n      filename: \"filename.js\",\n      babelrc: false,\n      plugins: [\"mod/plugin\"]\n    });\n  });",
            "file": "resolution.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should find @foo scoped module file presets",
            "suites": [
                "addon resolution"
            ],
            "updatePoint": {
                "line": 238,
                "column": 49,
                "index": 7013
            },
            "line": 238,
            "code": "  it(\"should find @foo scoped module file presets\", function () {\n    process.chdir(\"scoped-nested-module-paths\");\n    babel.transformSync(\"\", {\n      filename: \"filename.js\",\n      babelrc: false,\n      presets: [\"@foo/mod/preset\"]\n    });\n  });",
            "file": "resolution.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should find @foo scoped module file plugins",
            "suites": [
                "addon resolution"
            ],
            "updatePoint": {
                "line": 246,
                "column": 49,
                "index": 7260
            },
            "line": 246,
            "code": "  it(\"should find @foo scoped module file plugins\", function () {\n    process.chdir(\"scoped-nested-module-paths\");\n    babel.transformSync(\"\", {\n      filename: \"filename.js\",\n      babelrc: false,\n      plugins: [\"@foo/mod/plugin\"]\n    });\n  });",
            "file": "resolution.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should find @babel scoped module file presets",
            "suites": [
                "addon resolution"
            ],
            "updatePoint": {
                "line": 254,
                "column": 51,
                "index": 7509
            },
            "line": 254,
            "code": "  it(\"should find @babel scoped module file presets\", function () {\n    process.chdir(\"babel-scoped-nested-module-paths\");\n    babel.transformSync(\"\", {\n      filename: \"filename.js\",\n      babelrc: false,\n      presets: [\"@babel/mod/preset\"]\n    });\n  });",
            "file": "resolution.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should find @babel scoped module file plugins",
            "suites": [
                "addon resolution"
            ],
            "updatePoint": {
                "line": 262,
                "column": 51,
                "index": 7766
            },
            "line": 262,
            "code": "  it(\"should find @babel scoped module file plugins\", function () {\n    process.chdir(\"babel-scoped-nested-module-paths\");\n    babel.transformSync(\"\", {\n      filename: \"filename.js\",\n      babelrc: false,\n      plugins: [\"@babel/mod/plugin\"]\n    });\n  });",
            "file": "resolution.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should throw about module: usage for presets",
            "suites": [
                "addon resolution"
            ],
            "updatePoint": {
                "line": 272,
                "column": 50,
                "index": 8070
            },
            "line": 272,
            "code": "  it(\"should throw about module: usage for presets\", function () {\n    process.chdir(\"throw-module-paths\");\n    expect(() => {\n      babel.transformSync(\"\", {\n        filename: \"filename.js\",\n        babelrc: false,\n        presets: [\"foo\"]\n      });\n    }).toThrow(\n    // Todo(Babel 8): remove node checks in this file. We cannot test the desired behaviour\n    // because Jest 24 has an issue on setting the MODULE_NOT_FOUND error when the native\n    // `require.resolve` is provided.\n    // see https://github.com/babel/babel/pull/12439/files#r535996000\n    parseInt(process.versions.node, 10) <= 10 ? /Cannot (?:find|resolve) module 'babel-preset-foo'/ : /Cannot (?:find|resolve) module 'babel-preset-foo'.*\\n- If you want to resolve \"foo\", use \"module:foo\"/s);\n  });",
            "file": "resolution.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should throw about module: usage for plugins",
            "suites": [
                "addon resolution"
            ],
            "updatePoint": {
                "line": 287,
                "column": 50,
                "index": 8842
            },
            "line": 287,
            "code": "  it(\"should throw about module: usage for plugins\", function () {\n    process.chdir(\"throw-module-paths\");\n    expect(() => {\n      babel.transformSync(\"\", {\n        filename: \"filename.js\",\n        babelrc: false,\n        plugins: [\"foo\"]\n      });\n    }).toThrow(parseInt(process.versions.node, 10) <= 10 ? /Cannot (?:find|resolve) module 'babel-plugin-foo'/ : /Cannot (?:find|resolve) module 'babel-plugin-foo'.*\\n- If you want to resolve \"foo\", use \"module:foo\"/s);\n  });",
            "file": "resolution.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should throw about @babel usage for presets",
            "suites": [
                "addon resolution"
            ],
            "updatePoint": {
                "line": 297,
                "column": 49,
                "index": 9318
            },
            "line": 297,
            "code": "  it(\"should throw about @babel usage for presets\", function () {\n    process.chdir(\"throw-babel-paths\");\n    expect(() => {\n      babel.transformSync(\"\", {\n        filename: \"filename.js\",\n        babelrc: false,\n        presets: [\"foo\"]\n      });\n    }).toThrow(parseInt(process.versions.node, 10) <= 10 ? /Cannot (?:find|resolve) module 'babel-preset-foo'/ : /Cannot (?:find|resolve) module 'babel-preset-foo'.*\\n- Did you mean \"@babel\\/foo\"\\?/s);\n  });",
            "file": "resolution.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should throw about @babel usage for plugins",
            "suites": [
                "addon resolution"
            ],
            "updatePoint": {
                "line": 307,
                "column": 49,
                "index": 9775
            },
            "line": 307,
            "code": "  it(\"should throw about @babel usage for plugins\", function () {\n    process.chdir(\"throw-babel-paths\");\n    expect(() => {\n      babel.transformSync(\"\", {\n        filename: \"filename.js\",\n        babelrc: false,\n        plugins: [\"foo\"]\n      });\n    }).toThrow(parseInt(process.versions.node, 10) <= 10 ? /Cannot (?:find|resolve) module 'babel-plugin-foo'/ : /Cannot (?:find|resolve) module 'babel-plugin-foo'.*\\n- Did you mean \"@babel\\/foo\"\\?/s);\n  });",
            "file": "resolution.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should throw about passing a preset as a plugin",
            "suites": [
                "addon resolution"
            ],
            "updatePoint": {
                "line": 317,
                "column": 53,
                "index": 10236
            },
            "line": 317,
            "code": "  it(\"should throw about passing a preset as a plugin\", function () {\n    process.chdir(\"throw-opposite-paths\");\n    expect(() => {\n      babel.transformSync(\"\", {\n        filename: \"filename.js\",\n        babelrc: false,\n        presets: [\"testplugin\"]\n      });\n    }).toThrow(parseInt(process.versions.node, 10) <= 10 ? /Cannot (?:find|resolve) module 'babel-preset-testplugin'/ : /Cannot (?:find|resolve) module 'babel-preset-testplugin'.*\\n- Did you accidentally pass a plugin as a preset\\?/s);\n  });",
            "file": "resolution.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should throw about passing a plugin as a preset",
            "suites": [
                "addon resolution"
            ],
            "updatePoint": {
                "line": 327,
                "column": 53,
                "index": 10741
            },
            "line": 327,
            "code": "  it(\"should throw about passing a plugin as a preset\", function () {\n    process.chdir(\"throw-opposite-paths\");\n    expect(() => {\n      babel.transformSync(\"\", {\n        filename: \"filename.js\",\n        babelrc: false,\n        plugins: [\"testpreset\"]\n      });\n    }).toThrow(parseInt(process.versions.node, 10) <= 10 ? /Cannot (?:find|resolve) module 'babel-plugin-testpreset'/ : /Cannot (?:find|resolve) module 'babel-plugin-testpreset'.*\\n- Did you accidentally pass a preset as a plugin\\?/s);\n  });",
            "file": "resolution.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should throw about missing presets",
            "suites": [
                "addon resolution"
            ],
            "updatePoint": {
                "line": 337,
                "column": 40,
                "index": 11233
            },
            "line": 337,
            "code": "  it(\"should throw about missing presets\", function () {\n    process.chdir(\"throw-missing-paths\");\n    expect(() => {\n      babel.transformSync(\"\", {\n        filename: \"filename.js\",\n        babelrc: false,\n        presets: [\"foo\"]\n      });\n    }).toThrow(/Cannot (?:find|resolve) module 'babel-preset-foo'/);\n  });",
            "file": "resolution.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "should throw about missing plugins",
            "suites": [
                "addon resolution"
            ],
            "updatePoint": {
                "line": 347,
                "column": 40,
                "index": 11550
            },
            "line": 347,
            "code": "  it(\"should throw about missing plugins\", function () {\n    process.chdir(\"throw-missing-paths\");\n    expect(() => {\n      babel.transformSync(\"\", {\n        filename: \"filename.js\",\n        babelrc: false,\n        plugins: [\"foo\"]\n      });\n    }).toThrow(/Cannot (?:find|resolve) module 'babel-plugin-foo'/);\n  });",
            "file": "resolution.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "throws if invalid type",
            "suites": [
                "targets"
            ],
            "updatePoint": {
                "line": 17,
                "column": 28,
                "index": 411
            },
            "line": 17,
            "code": "  it(\"throws if invalid type\", () => {\n    expect(() => withTargets(2)).toThrow(\".targets must be a string, an array of strings or an object\");\n    expect(() => withTargets([2])).toThrow(\".targets must be a string, an array of strings or an object\");\n    expect(() => withTargets([{}])).toThrow(\".targets must be a string, an array of strings or an object\");\n    expect(() => withTargets([])).not.toThrow();\n    expect(() => withTargets({})).not.toThrow();\n  });",
            "file": "targets.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "throws if invalid target",
            "suites": [
                "targets"
            ],
            "updatePoint": {
                "line": 24,
                "column": 30,
                "index": 876
            },
            "line": 24,
            "code": "  it(\"throws if invalid target\", () => {\n    expect(() => withTargets({\n      uglify: \"2.3\"\n    })).toThrow(/\\.targets\\[\"uglify\"\\] is not a valid target/);\n    expect(() => withTargets({\n      foo: \"bar\"\n    })).toThrow(/\\.targets\\[\"foo\"\\] is not a valid target/);\n    expect(() => withTargets({\n      firefox: 71\n    })).not.toThrow();\n  });",
            "file": "targets.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "throws if invalid version",
            "suites": [
                "targets"
            ],
            "updatePoint": {
                "line": 35,
                "column": 31,
                "index": 1220
            },
            "line": 35,
            "code": "  it(\"throws if invalid version\", () => {\n    expect(() => withTargets({\n      node: 10.1 /* or 10.10? */\n    })).toThrow(`.targets[\"node\"] must be a string or an integer number`);\n    expect(() => withTargets({\n      node: true\n    })).toThrow(`.targets[\"node\"] must be a string or an integer number`);\n    expect(() => withTargets({\n      node: \"10.1\"\n    })).not.toThrow();\n    expect(() => withTargets({\n      node: \"current\"\n    })).not.toThrow();\n  });",
            "file": "targets.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "esmodules",
            "suites": [
                "targets"
            ],
            "updatePoint": {
                "line": 49,
                "column": 15,
                "index": 1663
            },
            "line": 49,
            "code": "  it(\"esmodules\", () => {\n    expect(() => withTargets({\n      esmodules: \"7\"\n    })).toThrow(`.targets[\"esmodules\"] must be a boolean, or undefined`);\n    expect(() => withTargets({\n      esmodules: false\n    })).not.toThrow();\n    expect(() => withTargets({\n      esmodules: true\n    })).not.toThrow();\n  });",
            "file": "targets.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "browsers",
            "suites": [
                "targets"
            ],
            "updatePoint": {
                "line": 60,
                "column": 14,
                "index": 1973
            },
            "line": 60,
            "code": "  it(\"browsers\", () => {\n    expect(() => withTargets({\n      browsers: 2\n    })).toThrow(`.targets[\"browsers\"] must be undefined, a string or an array of strings`);\n    expect(() => withTargets({\n      browsers: [2]\n    })).toThrow(`.targets[\"browsers\"] must be undefined, a string or an array of strings`);\n    expect(() => withTargets({\n      browsers: {}\n    })).toThrow(`.targets[\"browsers\"] must be undefined, a string or an array of strings`);\n    expect(() => withTargets({\n      browsers: []\n    })).not.toThrow();\n  });",
            "file": "targets.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "loads .browserslistrc by default",
            "suites": [
                "browserslist"
            ],
            "updatePoint": {
                "line": 76,
                "column": 38,
                "index": 2564
            },
            "line": 76,
            "code": "  it(\"loads .browserslistrc by default\", () => {\n    expect(loadOptions({\n      cwd: join(cwd, \"fixtures\", \"targets\")\n    }).targets).toEqual({\n      chrome: \"80.0.0\"\n    });\n  });",
            "file": "targets.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "loads .browserslistrc relative to the root",
            "suites": [
                "browserslist"
            ],
            "updatePoint": {
                "line": 83,
                "column": 48,
                "index": 2755
            },
            "line": 83,
            "code": "  it(\"loads .browserslistrc relative to the root\", () => {\n    expect(loadOptions({\n      cwd: join(cwd, \"fixtures\", \"targets\"),\n      filename: \"./node_modules/dep/test.js\"\n    }).targets).toEqual({\n      chrome: \"80.0.0\"\n    });\n  });",
            "file": "targets.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "can disable config loading",
            "suites": [
                "browserslist",
                "browserslistConfigFile"
            ],
            "updatePoint": {
                "line": 92,
                "column": 34,
                "index": 3023
            },
            "line": 92,
            "code": "    it(\"can disable config loading\", () => {\n      expect(loadOptions({\n        cwd: join(cwd, \"fixtures\", \"targets\"),\n        browserslistConfigFile: false\n      }).targets).toEqual({});\n    });",
            "file": "targets.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "can specify a custom file",
            "suites": [
                "browserslist",
                "browserslistConfigFile"
            ],
            "updatePoint": {
                "line": 98,
                "column": 33,
                "index": 3218
            },
            "line": 98,
            "code": "    it(\"can specify a custom file\", () => {\n      expect(loadOptions({\n        cwd: join(cwd, \"fixtures\", \"targets\"),\n        browserslistConfigFile: \"./.browserslistrc-firefox\"\n      }).targets).toEqual({\n        firefox: \"74.0.0\"\n      });\n    });",
            "file": "targets.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "is relative to the cwd even if specifying 'root'",
            "suites": [
                "browserslist",
                "browserslistConfigFile"
            ],
            "updatePoint": {
                "line": 106,
                "column": 56,
                "index": 3491
            },
            "line": 106,
            "code": "    it(\"is relative to the cwd even if specifying 'root'\", () => {\n      expect(loadOptions({\n        cwd: join(cwd, \"fixtures\", \"targets\"),\n        root: \"..\",\n        filename: \"./nested/test.js\",\n        browserslistConfigFile: \"./.browserslistrc-firefox\"\n      }).targets).toEqual({\n        firefox: \"74.0.0\"\n      });\n    });",
            "file": "targets.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "is relative to the config files that defines it",
            "suites": [
                "browserslist",
                "browserslistConfigFile"
            ],
            "updatePoint": {
                "line": 116,
                "column": 55,
                "index": 3821
            },
            "line": 116,
            "code": "    it(\"is relative to the config files that defines it\", () => {\n      expect(loadOptions({\n        cwd: join(cwd, \"fixtures\", \"targets\"),\n        filename: \"./node_modules/dep/test.js\",\n        babelrcRoots: [\"./node_modules/dep/\"]\n      }).targets).toEqual({\n        edge: \"14.0.0\"\n      });\n    });",
            "file": "targets.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "is forwarded to browserslist",
            "suites": [
                "browserslist",
                "browserslistEnv"
            ],
            "updatePoint": {
                "line": 127,
                "column": 36,
                "index": 4149
            },
            "line": 127,
            "code": "    it(\"is forwarded to browserslist\", () => {\n      expect(loadOptions({\n        cwd: join(cwd, \"fixtures\", \"targets\"),\n        browserslistEnv: \"browserslist-loading-test\"\n      }).targets).toEqual({\n        chrome: \"70.0.0\"\n      });\n    });",
            "file": "targets.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "esmodules and browsers are intersected",
            "suites": [
                "browserslist",
                "browserslistEnv"
            ],
            "updatePoint": {
                "line": 136,
                "column": 44,
                "index": 4408
            },
            "line": 136,
            "code": "  it(\"esmodules and browsers are intersected\", () => {\n    expect(withTargets({\n      esmodules: true,\n      browsers: \"chrome >= 80, firefox >= 30\"\n    }).targets).toEqual({\n      chrome: \"80.0.0\",\n      firefox: \"60.0.0\"\n    });\n  });",
            "file": "targets.js",
            "skipped": false,
            "dir": "packages/babel-core/test"
        },
        {
            "name": "auxiliaryCommentBefore",
            "suites": [
                "parameter parentheses"
            ],
            "updatePoint": {
                "line": 22,
                "column": 28,
                "index": 628
            },
            "line": 22,
            "code": "  it(\"auxiliaryCommentBefore\", () => {\n    const ast = parse(source);\n    forEachParam(ast, p => p.loc = null);\n    const output = generate(ast, {\n      auxiliaryCommentBefore: \"BEFORE\"\n    }).code;\n    expect(output).toMatchInlineSnapshot(`\n      \"() => {};\n      /*BEFORE*/\n      a => {};\n      (\n      /*BEFORE*/\n      a,\n      /*BEFORE*/\n      b) => {};\n      async () => {};\n      async /*BEFORE*/a => {};\n      async (\n      /*BEFORE*/\n      a,\n      /*BEFORE*/\n      b) => {};\"\n    `);\n  });",
            "file": "arrow-functions.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "auxiliaryCommentAfter",
            "suites": [
                "parameter parentheses"
            ],
            "updatePoint": {
                "line": 46,
                "column": 27,
                "index": 1126
            },
            "line": 46,
            "code": "  it(\"auxiliaryCommentAfter\", () => {\n    const ast = parse(source);\n    forEachParam(ast, p => p.loc = null);\n    const output = generate(ast, {\n      auxiliaryCommentAfter: \"AFTER\"\n    }).code;\n    expect(output).toMatchInlineSnapshot(`\n      \"() => {};\n      a /*AFTER*/=> {};\n      (a\n      /*AFTER*/\n      , b\n      /*AFTER*/\n      ) => {};\n      async () => {};\n      async a /*AFTER*/=> {};\n      async (a\n      /*AFTER*/\n      , b\n      /*AFTER*/\n      ) => {};\"\n    `);\n  });",
            "file": "arrow-functions.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "empty leadingComments array",
            "suites": [
                "parameter parentheses"
            ],
            "updatePoint": {
                "line": 69,
                "column": 33,
                "index": 1617
            },
            "line": 69,
            "code": "  it(\"empty leadingComments array\", () => {\n    const ast = parse(source);\n    forEachParam(ast, p => p.leadingComments = []);\n    const output = generate(ast).code;\n    expect(output).toMatchInlineSnapshot(`\n      \"() => {};\n      a => {};\n      (a, b) => {};\n      async () => {};\n      async a => {};\n      async (a, b) => {};\"\n    `);\n  });",
            "file": "arrow-functions.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "empty trailingComments array",
            "suites": [
                "parameter parentheses"
            ],
            "updatePoint": {
                "line": 82,
                "column": 34,
                "index": 1963
            },
            "line": 82,
            "code": "  it(\"empty trailingComments array\", () => {\n    const ast = parse(source);\n    forEachParam(ast, p => p.trailingComments = []);\n    const output = generate(ast).code;\n    expect(output).toMatchInlineSnapshot(`\n      \"() => {};\n      a => {};\n      (a, b) => {};\n      async () => {};\n      async a => {};\n      async (a, b) => {};\"\n    `);\n  });",
            "file": "arrow-functions.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "multiple sources",
            "suites": [
                "generation"
            ],
            "updatePoint": {
                "line": 11,
                "column": 22,
                "index": 448
            },
            "line": 11,
            "code": "  it(\"multiple sources\", function () {\n    const sources = {\n      \"a.js\": \"function hi (msg) { console.log(msg); }\\n\",\n      \"b.js\": \"hi('hello');\\n\"\n    };\n    const parsed = Object.keys(sources).reduce(function (_parsed, filename) {\n      _parsed[filename] = parse(sources[filename], {\n        sourceFilename: filename\n      });\n      return _parsed;\n    }, {});\n    const combinedAst = {\n      type: \"File\",\n      program: {\n        type: \"Program\",\n        sourceType: \"module\",\n        body: [].concat(parsed[\"a.js\"].program.body, parsed[\"b.js\"].program.body)\n      }\n    };\n    const generated = generate(combinedAst, {\n      sourceMaps: true\n    }, sources);\n    expect(generated.map).toMatchInlineSnapshot(`\n      Object {\n        \"file\": undefined,\n        \"mappings\": \"AAAA,SAASA,EAAEA,CAAEC,GAAG,EAAE;EAAEC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;AAAE;ACAtCD,EAAE,CAAC,OAAO,CAAC\",\n        \"names\": Array [\n          \"hi\",\n          \"msg\",\n          \"console\",\n          \"log\",\n        ],\n        \"sourceRoot\": undefined,\n        \"sources\": Array [\n          \"a.js\",\n          \"b.js\",\n        ],\n        \"sourcesContent\": Array [\n          \"function hi (msg) { console.log(msg); }\n      \",\n          \"hi('hello');\n      \",\n        ],\n        \"version\": 3,\n      }\n    `);\n    expect(generated.rawMappings).toMatchInlineSnapshot(`\n      Array [\n        Object {\n          \"generated\": Object {\n            \"column\": 0,\n            \"line\": 1,\n          },\n          \"name\": undefined,\n          \"original\": Object {\n            \"column\": 0,\n            \"line\": 1,\n          },\n          \"source\": \"a.js\",\n        },\n        Object {\n          \"generated\": Object {\n            \"column\": 9,\n            \"line\": 1,\n          },\n          \"name\": \"hi\",\n          \"original\": Object {\n            \"column\": 9,\n            \"line\": 1,\n          },\n          \"source\": \"a.js\",\n        },\n        Object {\n          \"generated\": Object {\n            \"column\": 11,\n            \"line\": 1,\n          },\n          \"name\": \"hi\",\n          \"original\": Object {\n            \"column\": 11,\n            \"line\": 1,\n          },\n          \"source\": \"a.js\",\n        },\n        Object {\n          \"generated\": Object {\n            \"column\": 12,\n            \"line\": 1,\n          },\n          \"name\": \"msg\",\n          \"original\": Object {\n            \"column\": 13,\n            \"line\": 1,\n          },\n          \"source\": \"a.js\",\n        },\n        Object {\n          \"generated\": Object {\n            \"column\": 15,\n            \"line\": 1,\n          },\n          \"name\": undefined,\n          \"original\": Object {\n            \"column\": 16,\n            \"line\": 1,\n          },\n          \"source\": \"a.js\",\n        },\n        Object {\n          \"generated\": Object {\n            \"column\": 17,\n            \"line\": 1,\n          },\n          \"name\": undefined,\n          \"original\": Object {\n            \"column\": 18,\n            \"line\": 1,\n          },\n          \"source\": \"a.js\",\n        },\n        Object {\n          \"generated\": Object {\n            \"column\": 2,\n            \"line\": 2,\n          },\n          \"name\": \"console\",\n          \"original\": Object {\n            \"column\": 20,\n            \"line\": 1,\n          },\n          \"source\": \"a.js\",\n        },\n        Object {\n          \"generated\": Object {\n            \"column\": 9,\n            \"line\": 2,\n          },\n          \"name\": undefined,\n          \"original\": Object {\n            \"column\": 27,\n            \"line\": 1,\n          },\n          \"source\": \"a.js\",\n        },\n        Object {\n          \"generated\": Object {\n            \"column\": 10,\n            \"line\": 2,\n          },\n          \"name\": \"log\",\n          \"original\": Object {\n            \"column\": 28,\n            \"line\": 1,\n          },\n          \"source\": \"a.js\",\n        },\n        Object {\n          \"generated\": Object {\n            \"column\": 13,\n            \"line\": 2,\n          },\n          \"name\": undefined,\n          \"original\": Object {\n            \"column\": 31,\n            \"line\": 1,\n          },\n          \"source\": \"a.js\",\n        },\n        Object {\n          \"generated\": Object {\n            \"column\": 14,\n            \"line\": 2,\n          },\n          \"name\": \"msg\",\n          \"original\": Object {\n            \"column\": 32,\n            \"line\": 1,\n          },\n          \"source\": \"a.js\",\n        },\n        Object {\n          \"generated\": Object {\n            \"column\": 17,\n            \"line\": 2,\n          },\n          \"name\": undefined,\n          \"original\": Object {\n            \"column\": 35,\n            \"line\": 1,\n          },\n          \"source\": \"a.js\",\n        },\n        Object {\n          \"generated\": Object {\n            \"column\": 18,\n            \"line\": 2,\n          },\n          \"name\": undefined,\n          \"original\": Object {\n            \"column\": 36,\n            \"line\": 1,\n          },\n          \"source\": \"a.js\",\n        },\n        Object {\n          \"generated\": Object {\n            \"column\": 0,\n            \"line\": 3,\n          },\n          \"name\": undefined,\n          \"original\": Object {\n            \"column\": 38,\n            \"line\": 1,\n          },\n          \"source\": \"a.js\",\n        },\n        Object {\n          \"generated\": Object {\n            \"column\": 0,\n            \"line\": 4,\n          },\n          \"name\": \"hi\",\n          \"original\": Object {\n            \"column\": 0,\n            \"line\": 1,\n          },\n          \"source\": \"b.js\",\n        },\n        Object {\n          \"generated\": Object {\n            \"column\": 2,\n            \"line\": 4,\n          },\n          \"name\": undefined,\n          \"original\": Object {\n            \"column\": 2,\n            \"line\": 1,\n          },\n          \"source\": \"b.js\",\n        },\n        Object {\n          \"generated\": Object {\n            \"column\": 3,\n            \"line\": 4,\n          },\n          \"name\": undefined,\n          \"original\": Object {\n            \"column\": 3,\n            \"line\": 1,\n          },\n          \"source\": \"b.js\",\n        },\n        Object {\n          \"generated\": Object {\n            \"column\": 10,\n            \"line\": 4,\n          },\n          \"name\": undefined,\n          \"original\": Object {\n            \"column\": 10,\n            \"line\": 1,\n          },\n          \"source\": \"b.js\",\n        },\n        Object {\n          \"generated\": Object {\n            \"column\": 11,\n            \"line\": 4,\n          },\n          \"name\": undefined,\n          \"original\": Object {\n            \"column\": 11,\n            \"line\": 1,\n          },\n          \"source\": \"b.js\",\n        },\n      ]\n    `);\n    expect(generated.code).toBe(\"function hi(msg) {\\n  console.log(msg);\\n}\\nhi('hello');\");\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "identifierName",
            "suites": [
                "generation"
            ],
            "updatePoint": {
                "line": 291,
                "column": 20,
                "index": 7036
            },
            "line": 291,
            "code": "  it(\"identifierName\", function () {\n    const code = \"function foo() { bar; }\\n\";\n    const ast = parse(code, {\n      filename: \"inline\"\n    }).program;\n    const fn = ast.body[0];\n    const id = fn.id;\n    id.name += \"2\";\n    id.loc.identifierName = \"foo\";\n    const id2 = fn.body.body[0].expression;\n    id2.name += \"2\";\n    id2.loc.identifierName = \"bar\";\n    const generated = generate(ast, {\n      filename: \"inline\",\n      sourceFileName: \"inline\",\n      sourceMaps: true\n    }, code);\n    expect(generated).toMatchInlineSnapshot(`\n      Object {\n        \"__mergedMap\": Object {\n          \"file\": undefined,\n          \"mappings\": \"AAAA,SAASA,IAAGA,CAAA,EAAG;EAAEC,IAAG;AAAE\",\n          \"names\": Array [\n            \"foo\",\n            \"bar\",\n          ],\n          \"sourceRoot\": undefined,\n          \"sources\": Array [\n            \"inline\",\n          ],\n          \"sourcesContent\": Array [\n            \"function foo() { bar; }\n      \",\n          ],\n          \"version\": 3,\n        },\n        \"code\": \"function foo2() {\n        bar2;\n      }\",\n        \"decodedMap\": Object {\n          \"file\": undefined,\n          \"mappings\": Array [\n            Array [\n              Array [\n                0,\n                0,\n                0,\n                0,\n              ],\n              Array [\n                9,\n                0,\n                0,\n                9,\n                0,\n              ],\n              Array [\n                13,\n                0,\n                0,\n                12,\n                0,\n              ],\n              Array [\n                14,\n                0,\n                0,\n                12,\n              ],\n              Array [\n                16,\n                0,\n                0,\n                15,\n              ],\n            ],\n            Array [\n              Array [\n                2,\n                0,\n                0,\n                17,\n                1,\n              ],\n              Array [\n                6,\n                0,\n                0,\n                20,\n              ],\n            ],\n            Array [\n              Array [\n                0,\n                0,\n                0,\n                22,\n              ],\n            ],\n          ],\n          \"names\": Array [\n            \"foo\",\n            \"bar\",\n          ],\n          \"sourceRoot\": undefined,\n          \"sources\": Array [\n            \"inline\",\n          ],\n          \"sourcesContent\": Array [\n            \"function foo() { bar; }\n      \",\n          ],\n          \"version\": 3,\n        },\n        \"map\": Object {\n          \"file\": undefined,\n          \"mappings\": \"AAAA,SAASA,IAAGA,CAAA,EAAG;EAAEC,IAAG;AAAE\",\n          \"names\": Array [\n            \"foo\",\n            \"bar\",\n          ],\n          \"sourceRoot\": undefined,\n          \"sources\": Array [\n            \"inline\",\n          ],\n          \"sourcesContent\": Array [\n            \"function foo() { bar; }\n      \",\n          ],\n          \"version\": 3,\n        },\n        \"rawMappings\": Array [\n          Object {\n            \"generated\": Object {\n              \"column\": 0,\n              \"line\": 1,\n            },\n            \"name\": undefined,\n            \"original\": Object {\n              \"column\": 0,\n              \"line\": 1,\n            },\n            \"source\": \"inline\",\n          },\n          Object {\n            \"generated\": Object {\n              \"column\": 9,\n              \"line\": 1,\n            },\n            \"name\": \"foo\",\n            \"original\": Object {\n              \"column\": 9,\n              \"line\": 1,\n            },\n            \"source\": \"inline\",\n          },\n          Object {\n            \"generated\": Object {\n              \"column\": 13,\n              \"line\": 1,\n            },\n            \"name\": \"foo\",\n            \"original\": Object {\n              \"column\": 12,\n              \"line\": 1,\n            },\n            \"source\": \"inline\",\n          },\n          Object {\n            \"generated\": Object {\n              \"column\": 14,\n              \"line\": 1,\n            },\n            \"name\": undefined,\n            \"original\": Object {\n              \"column\": 12,\n              \"line\": 1,\n            },\n            \"source\": \"inline\",\n          },\n          Object {\n            \"generated\": Object {\n              \"column\": 16,\n              \"line\": 1,\n            },\n            \"name\": undefined,\n            \"original\": Object {\n              \"column\": 15,\n              \"line\": 1,\n            },\n            \"source\": \"inline\",\n          },\n          Object {\n            \"generated\": Object {\n              \"column\": 2,\n              \"line\": 2,\n            },\n            \"name\": \"bar\",\n            \"original\": Object {\n              \"column\": 17,\n              \"line\": 1,\n            },\n            \"source\": \"inline\",\n          },\n          Object {\n            \"generated\": Object {\n              \"column\": 6,\n              \"line\": 2,\n            },\n            \"name\": undefined,\n            \"original\": Object {\n              \"column\": 20,\n              \"line\": 1,\n            },\n            \"source\": \"inline\",\n          },\n          Object {\n            \"generated\": Object {\n              \"column\": 0,\n              \"line\": 3,\n            },\n            \"name\": undefined,\n            \"original\": Object {\n              \"column\": 22,\n              \"line\": 1,\n            },\n            \"source\": \"inline\",\n          },\n        ],\n      }\n    `);\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "newline in template literal",
            "suites": [
                "generation"
            ],
            "updatePoint": {
                "line": 523,
                "column": 33,
                "index": 12456
            },
            "line": 523,
            "code": "  it(\"newline in template literal\", () => {\n    const code = \"`before\\n\\nafter`;\";\n    const ast = parse(code, {\n      filename: \"inline\"\n    }).program;\n    const generated = generate(ast, {\n      filename: \"inline\",\n      sourceFileName: \"inline\",\n      sourceMaps: true\n    }, code);\n    const consumer = new TraceMap(generated.map);\n    const loc = originalPositionFor(consumer, {\n      line: 2,\n      column: 1\n    });\n    expect(loc).toMatchObject({\n      column: 0,\n      line: 2\n    });\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "newline in string literal",
            "suites": [
                "generation"
            ],
            "updatePoint": {
                "line": 543,
                "column": 31,
                "index": 12955
            },
            "line": 543,
            "code": "  it(\"newline in string literal\", () => {\n    const code = \"'before\\\\\\n\\\\\\nafter';\";\n    const ast = parse(code, {\n      filename: \"inline\"\n    }).program;\n    const generated = generate(ast, {\n      filename: \"inline\",\n      sourceFileName: \"inline\",\n      sourceMaps: true\n    }, code);\n    const consumer = new TraceMap(generated.map);\n    const loc = originalPositionFor(consumer, {\n      line: 2,\n      column: 1\n    });\n    expect(loc).toMatchObject({\n      column: 0,\n      line: 2\n    });\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "lazy source map generation",
            "suites": [
                "generation"
            ],
            "updatePoint": {
                "line": 563,
                "column": 32,
                "index": 13459
            },
            "line": 563,
            "code": "  it(\"lazy source map generation\", function () {\n    const code = \"function hi (msg) { console.log(msg); }\\n\";\n    const ast = parse(code, {\n      filename: \"a.js\"\n    }).program;\n    const generated = generate(ast, {\n      sourceFileName: \"a.js\",\n      sourceMaps: true\n    });\n    expect(Array.isArray(generated.rawMappings)).toBe(true);\n    expect(Object.getOwnPropertyDescriptor(generated, \"map\")).not.toHaveProperty(\"value\");\n    expect(generated).toHaveProperty(\"map\");\n    expect(typeof generated.map).toBe(\"object\");\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "wraps around infer inside an array type",
            "suites": [
                "generation"
            ],
            "updatePoint": {
                "line": 577,
                "column": 45,
                "index": 14003
            },
            "line": 577,
            "code": "  it(\"wraps around infer inside an array type\", () => {\n    const type = t.tsArrayType(t.tsInferType(t.tsTypeParameter(null, null, !process.env.BABEL_8_BREAKING ? \"T\" : t.identifier(\"T\"))));\n    const output = generate(type).code;\n    expect(output).toBe(\"(infer T)[]\");\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "should not deduplicate comments with same start index",
            "suites": [
                "generation"
            ],
            "updatePoint": {
                "line": 582,
                "column": 59,
                "index": 14294
            },
            "line": 582,
            "code": "  it(\"should not deduplicate comments with same start index\", () => {\n    const code1 = \"/*#__PURE__*/ a();\";\n    const code2 = \"/*#__PURE__*/ b();\";\n    const ast1 = parse(code1).program;\n    const ast2 = parse(code2).program;\n    const ast = t.program([...ast1.body, ...ast2.body]);\n    expect(generate(ast).code).toBe(\"/*#__PURE__*/a();\\n/*#__PURE__*/b();\");\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "comments with null or undefined loc",
            "suites": [
                "generation"
            ],
            "updatePoint": {
                "line": 590,
                "column": 41,
                "index": 14644
            },
            "line": 590,
            "code": "  it(\"comments with null or undefined loc\", () => {\n    const code = \"/*#__PURE__*/ /*#__PURE__*/\";\n    const ast = parse(code);\n    ast.comments[0].loc = null;\n    ast.comments[1].loc = undefined;\n    expect(generate(ast).code).toBe(\"/*#__PURE__*/\\n/*#__PURE__*/\");\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "comments without loc",
            "suites": [
                "generation"
            ],
            "updatePoint": {
                "line": 597,
                "column": 26,
                "index": 14902
            },
            "line": 597,
            "code": "  it(\"comments without loc\", () => {\n    const ast = parse(`\n        import {\n            Attribute,\n            AttributeSDKType\n        }\n        from \"../../base/v1beta1/attribute\";\n        import {\n            Rpc\n        }\n        from \"../../../helpers\";\n        import * as _m0 from \"protobufjs/minimal\";\n        import {\n            MsgSignProviderAttributes,\n            MsgSignProviderAttributesSDKType,\n            MsgSignProviderAttributesResponse,\n            MsgSignProviderAttributesResponseSDKType,\n            MsgDeleteProviderAttributes,\n            MsgDeleteProviderAttributesSDKType,\n            MsgDeleteProviderAttributesResponse,\n            MsgDeleteProviderAttributesResponseSDKType\n        }\n        from \"./audit\";\n        /** Msg defines the provider Msg service */\n        export interface Msg {\n            /** SignProviderAttributes defines a method that signs provider attributes */\n            signProviderAttributes(request: MsgSignProviderAttributes): Promise < MsgSignProviderAttributesResponse > ;\n            /** DeleteProviderAttributes defines a method that deletes provider attributes */\n            deleteProviderAttributes(request: MsgDeleteProviderAttributes): Promise < MsgDeleteProviderAttributesResponse > ;\n        }\n        export class MsgClientImpl implements Msg {\n            private readonly rpc: Rpc;\n            constructor(rpc: Rpc) {\n                this.rpc = rpc;\n            }\n            /* SignProviderAttributes defines a method that signs provider attributes */\n            signProviderAttributes = async(request: MsgSignProviderAttributes): Promise < MsgSignProviderAttributesResponse >  => {\n                const data = MsgSignProviderAttributes.encode(request).finish();\n                const promise = this.rpc.request(\"akash.audit.v1beta1.Msg\", \"SignProviderAttributes\", data);\n                return promise.then(data => MsgSignProviderAttributesResponse.decode(new _m0.Reader(data)));\n            };\n            /* DeleteProviderAttributes defines a method that deletes provider attributes */\n            deleteProviderAttributes = async(request: MsgDeleteProviderAttributes): Promise < MsgDeleteProviderAttributesResponse >  => {\n                const data = MsgDeleteProviderAttributes.encode(request).finish();\n                const promise = this.rpc.request(\"akash.audit.v1beta1.Msg\", \"DeleteProviderAttributes\", data);\n                return promise.then(data => MsgDeleteProviderAttributesResponse.decode(new _m0.Reader(data)));\n            };\n        }\n    `, {\n      sourceType: \"module\",\n      plugins: [\"typescript\"]\n    });\n    for (const comment of ast.comments) {\n      comment.loc = undefined;\n    }\n    expect(generate(ast).code).toMatchInlineSnapshot(`\n      \"import { Attribute, AttributeSDKType } from \\\\\"../../base/v1beta1/attribute\\\\\";\n      import { Rpc } from \\\\\"../../../helpers\\\\\";\n      import * as _m0 from \\\\\"protobufjs/minimal\\\\\";\n      import { MsgSignProviderAttributes, MsgSignProviderAttributesSDKType, MsgSignProviderAttributesResponse, MsgSignProviderAttributesResponseSDKType, MsgDeleteProviderAttributes, MsgDeleteProviderAttributesSDKType, MsgDeleteProviderAttributesResponse, MsgDeleteProviderAttributesResponseSDKType } from \\\\\"./audit\\\\\";\n      /** Msg defines the provider Msg service */\n      export interface Msg {\n        /** SignProviderAttributes defines a method that signs provider attributes */\n        signProviderAttributes(request: MsgSignProviderAttributes): Promise<MsgSignProviderAttributesResponse>;\n        /** DeleteProviderAttributes defines a method that deletes provider attributes */\n        deleteProviderAttributes(request: MsgDeleteProviderAttributes): Promise<MsgDeleteProviderAttributesResponse>;\n      }\n      export class MsgClientImpl implements Msg {\n        private readonly rpc: Rpc;\n        constructor(rpc: Rpc) {\n          this.rpc = rpc;\n        }\n        /* SignProviderAttributes defines a method that signs provider attributes */\n        signProviderAttributes = async (request: MsgSignProviderAttributes): Promise<MsgSignProviderAttributesResponse> => {\n          const data = MsgSignProviderAttributes.encode(request).finish();\n          const promise = this.rpc.request(\\\\\"akash.audit.v1beta1.Msg\\\\\", \\\\\"SignProviderAttributes\\\\\", data);\n          return promise.then(data => MsgSignProviderAttributesResponse.decode(new _m0.Reader(data)));\n        };\n        /* DeleteProviderAttributes defines a method that deletes provider attributes */\n        deleteProviderAttributes = async (request: MsgDeleteProviderAttributes): Promise<MsgDeleteProviderAttributesResponse> => {\n          const data = MsgDeleteProviderAttributes.encode(request).finish();\n          const promise = this.rpc.request(\\\\\"akash.audit.v1beta1.Msg\\\\\", \\\\\"DeleteProviderAttributes\\\\\", data);\n          return promise.then(data => MsgDeleteProviderAttributesResponse.decode(new _m0.Reader(data)));\n        };\n      }\"\n    `);\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "comments without loc2",
            "suites": [
                "generation"
            ],
            "updatePoint": {
                "line": 684,
                "column": 27,
                "index": 19861
            },
            "line": 684,
            "code": "  it(\"comments without loc2\", () => {\n    const ast = parse(`\n        (function (_templateFactory) {\n            \"use strict\";\n\n            const template = (0, _templateFactory.createTemplateFactory)(\n            /*{{somevalue}}*/\n            {\n                \"id\": null,\n                \"block\": \"[[[1,[34,0]]],[],false,[\\\\\"somevalue\\\\\"]]\",\n                \"moduleName\": \"(unknown template module)\",\n                \"isStrictMode\": false\n            });\n        });\n\n        const template = (0, _templateFactory.createTemplateFactory)(\n        /*\n          {{somevalue}}\n        */\n        {\n            \"id\": null,\n            \"block\": \"[[[1,[34,0]]],[],false,[\\\\\"somevalue\\\\\"]]\",\n            \"moduleName\": \"(unknown template module)\",\n            \"isStrictMode\": false\n        });\n      `, {\n      sourceType: \"module\"\n    });\n    for (const comment of ast.comments) {\n      comment.loc = undefined;\n    }\n    expect(generate(ast).code).toMatchInlineSnapshot(`\n      \"(function (_templateFactory) {\n        \\\\\"use strict\\\\\";\n\n        const template = (0, _templateFactory.createTemplateFactory)(\n        /*{{somevalue}}*/\n        {\n          \\\\\"id\\\\\": null,\n          \\\\\"block\\\\\": \\\\\"[[[1,[34,0]]],[],false,[\\\\\\\\\\\\\"somevalue\\\\\\\\\\\\\"]]\\\\\",\n          \\\\\"moduleName\\\\\": \\\\\"(unknown template module)\\\\\",\n          \\\\\"isStrictMode\\\\\": false\n        });\n      });\n      const template = (0, _templateFactory.createTemplateFactory)(\n      /*\n                {{somevalue}}\n              */\n      {\n        \\\\\"id\\\\\": null,\n        \\\\\"block\\\\\": \\\\\"[[[1,[34,0]]],[],false,[\\\\\\\\\\\\\"somevalue\\\\\\\\\\\\\"]]\\\\\",\n        \\\\\"moduleName\\\\\": \\\\\"(unknown template module)\\\\\",\n        \\\\\"isStrictMode\\\\\": false\n      });\"\n    `);\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "comments without loc3",
            "suites": [
                "generation"
            ],
            "updatePoint": {
                "line": 740,
                "column": 27,
                "index": 21576
            },
            "line": 740,
            "code": "  it(\"comments without loc3\", () => {\n    const ast = parse(`\n        /** This describes how the endpoint is implemented when the lease is deployed */\n        export enum Endpoint_Kind {\n          /** SHARED_HTTP - Describes an endpoint that becomes a Kubernetes Ingress */\n          SHARED_HTTP = 0,\n          /** RANDOM_PORT - Describes an endpoint that becomes a Kubernetes NodePort */\n          RANDOM_PORT = 1,\n          UNRECOGNIZED = -1,\n        }\n      `, {\n      sourceType: \"module\",\n      plugins: [\"typescript\"]\n    });\n    for (const comment of ast.comments) {\n      comment.loc = undefined;\n    }\n    expect(generate(ast).code).toMatchInlineSnapshot(`\n      \"/** This describes how the endpoint is implemented when the lease is deployed */\n      export enum Endpoint_Kind {\n        /** SHARED_HTTP - Describes an endpoint that becomes a Kubernetes Ingress */\n        SHARED_HTTP = 0,\n        /** RANDOM_PORT - Describes an endpoint that becomes a Kubernetes NodePort */\n        RANDOM_PORT = 1,\n        UNRECOGNIZED = -1,\n      }\"\n    `);\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "comments without node.loc",
            "suites": [
                "generation"
            ],
            "updatePoint": {
                "line": 768,
                "column": 31,
                "index": 22639
            },
            "line": 768,
            "code": "  it(\"comments without node.loc\", () => {\n    const ast = parse(`\n        (function (_templateFactory) {\n            \"use strict\";\n\n            const template = (0, _templateFactory.createTemplateFactory)(\n            /*{{somevalue}}*/\n            {\n                \"id\": null,\n                \"block\": \"[[[1,[34,0]]],[],false,[\\\\\"somevalue\\\\\"]]\",\n                \"moduleName\": \"(unknown template module)\",\n                \"isStrictMode\": false\n            });\n        });\n\n        const template = (0, _templateFactory.createTemplateFactory)(\n        /*\n          {{somevalue}}\n        */\n        {\n            \"id\": null,\n            \"block\": \"[[[1,[34,0]]],[],false,[\\\\\"somevalue\\\\\"]]\",\n            \"moduleName\": \"(unknown template module)\",\n            \"isStrictMode\": false\n        });\n      `, {\n      sourceType: \"module\"\n    });\n    const ast2 = t.cloneNode(ast, true, true);\n    for (let i = 0; i < ast.comments.length; i++) {\n      ast2.comments[i].loc = ast.comments[i].loc;\n    }\n    expect(generate(ast2).code).toMatchInlineSnapshot(`\n      \"(function (_templateFactory) {\n        \\\\\"use strict\\\\\";\n\n        const template = (0, _templateFactory.createTemplateFactory)(\n        /*{{somevalue}}*/\n        {\n          \\\\\"id\\\\\": null,\n          \\\\\"block\\\\\": \\\\\"[[[1,[34,0]]],[],false,[\\\\\\\\\\\\\"somevalue\\\\\\\\\\\\\"]]\\\\\",\n          \\\\\"moduleName\\\\\": \\\\\"(unknown template module)\\\\\",\n          \\\\\"isStrictMode\\\\\": false\n        });\n      });\n      const template = (0, _templateFactory.createTemplateFactory)(\n      /*\n        {{somevalue}}\n      */\n      {\n        \\\\\"id\\\\\": null,\n        \\\\\"block\\\\\": \\\\\"[[[1,[34,0]]],[],false,[\\\\\\\\\\\\\"somevalue\\\\\\\\\\\\\"]]\\\\\",\n        \\\\\"moduleName\\\\\": \\\\\"(unknown template module)\\\\\",\n        \\\\\"isStrictMode\\\\\": false\n      });\"\n    `);\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "inputSourceMap without sourcesContent",
            "suites": [
                "generation"
            ],
            "updatePoint": {
                "line": 825,
                "column": 43,
                "index": 24431
            },
            "line": 825,
            "code": "  it(\"inputSourceMap without sourcesContent\", () => {\n    const ast = parse(\"var t = x => x * x;\");\n    expect(generate(ast, {\n      sourceMaps: true,\n      inputSourceMap: {\n        version: 3,\n        names: [\"t\", \"x\"],\n        sources: [\"source-maps/arrow-function/input.js\"],\n        mappings: \"AAAA,IAAIA,CAAC,GAAG,SAAJA,CAACA,CAAGC,CAAC;EAAA,OAAIA,CAAC,GAAGA,CAAC;AAAA\"\n      }\n    }).map).toMatchInlineSnapshot(`\n      Object {\n        \"file\": undefined,\n        \"mappings\": \"AAAA,IAAIA,CAAC,GAAGC,CAAA,IAAAA,CAAA,GAAJA,CAAC\",\n        \"names\": Array [\n          \"t\",\n          \"x\",\n        ],\n        \"sourceRoot\": undefined,\n        \"sources\": Array [\n          \"source-maps/arrow-function/input.js\",\n        ],\n        \"sourcesContent\": Array [\n          undefined,\n        ],\n        \"version\": 3,\n      }\n    `);\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "should add parenthesis when NullishCoalescing is used along with ||",
            "suites": [
                "programmatic generation"
            ],
            "updatePoint": {
                "line": 856,
                "column": 73,
                "index": 25345
            },
            "line": 856,
            "code": "  it(\"should add parenthesis when NullishCoalescing is used along with ||\", function () {\n    // https://github.com/babel/babel/issues/10260\n    const nullishCoalesc = t.logicalExpression(\"??\", t.logicalExpression(\"||\", t.identifier(\"a\"), t.identifier(\"b\")), t.identifier(\"c\"));\n    const output = generate(nullishCoalesc).code;\n    expect(output).toBe(`(a || b) ?? c`);\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "should add parenthesis when NullishCoalesing is used with &&",
            "suites": [
                "programmatic generation"
            ],
            "updatePoint": {
                "line": 862,
                "column": 66,
                "index": 25715
            },
            "line": 862,
            "code": "  it(\"should add parenthesis when NullishCoalesing is used with &&\", function () {\n    const nullishCoalesc = t.logicalExpression(\"??\", t.identifier(\"a\"), t.logicalExpression(\"&&\", t.identifier(\"b\"), t.logicalExpression(\"&&\", t.identifier(\"c\"), t.identifier(\"d\"))));\n    const output = generate(nullishCoalesc).code;\n    expect(output).toBe(`a ?? (b && c && d)`);\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "numeric member expression",
            "suites": [
                "programmatic generation"
            ],
            "updatePoint": {
                "line": 867,
                "column": 31,
                "index": 26050
            },
            "line": 867,
            "code": "  it(\"numeric member expression\", function () {\n    // Should not generate `0.foo`\n    const mem = t.memberExpression(t.numericLiteral(60702), t.identifier(\"foo\"));\n    new Function(generate(mem).code);\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "nested if statements needs block",
            "suites": [
                "programmatic generation"
            ],
            "updatePoint": {
                "line": 872,
                "column": 38,
                "index": 26266
            },
            "line": 872,
            "code": "  it(\"nested if statements needs block\", function () {\n    const ifStatement = t.ifStatement(t.stringLiteral(\"top cond\"), t.whileStatement(t.stringLiteral(\"while cond\"), t.ifStatement(t.stringLiteral(\"nested\"), t.expressionStatement(t.numericLiteral(1)))), t.expressionStatement(t.stringLiteral(\"alt\")));\n    const ast = parse(generate(ifStatement).code);\n    expect(ast.program.body[0].consequent.type).toBe(\"BlockStatement\");\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "prints directives in block with empty body",
            "suites": [
                "programmatic generation"
            ],
            "updatePoint": {
                "line": 877,
                "column": 48,
                "index": 26710
            },
            "line": 877,
            "code": "  it(\"prints directives in block with empty body\", function () {\n    const blockStatement = t.blockStatement([], [t.directive(t.directiveLiteral(\"use strict\"))]);\n    const output = generate(blockStatement).code;\n    expect(output).toBe(`{\n  \"use strict\";\n}`);\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "flow object indentation",
            "suites": [
                "programmatic generation"
            ],
            "updatePoint": {
                "line": 884,
                "column": 29,
                "index": 26958
            },
            "line": 884,
            "code": "  it(\"flow object indentation\", function () {\n    const objectStatement = t.objectTypeAnnotation([t.objectTypeProperty(t.identifier(\"bar\"), t.stringTypeAnnotation())]);\n    const output = generate(objectStatement).code;\n    expect(output).toBe(`{\n  bar: string\n}`);\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "flow object exact",
            "suites": [
                "programmatic generation"
            ],
            "updatePoint": {
                "line": 891,
                "column": 23,
                "index": 27224
            },
            "line": 891,
            "code": "  it(\"flow object exact\", function () {\n    const objectStatement = t.objectTypeAnnotation([t.objectTypeProperty(t.identifier(\"bar\"), t.stringTypeAnnotation())], undefined, undefined, undefined, true);\n    const output = generate(objectStatement).code;\n    expect(output).toBe(`{|\n  bar: string\n|}`);\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "flow object indentation with empty leading ObjectTypeProperty",
            "suites": [
                "programmatic generation"
            ],
            "updatePoint": {
                "line": 898,
                "column": 67,
                "index": 27575
            },
            "line": 898,
            "code": "  it(\"flow object indentation with empty leading ObjectTypeProperty\", function () {\n    const objectStatement = t.objectTypeAnnotation([], [t.objectTypeIndexer(t.identifier(\"key\"), t.anyTypeAnnotation(), t.numberTypeAnnotation())]);\n    const output = generate(objectStatement).code;\n    expect(output).toBe(`{\n  [key: any]: number\n}`);\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "flow interface with nullish extends",
            "suites": [
                "programmatic generation"
            ],
            "updatePoint": {
                "line": 905,
                "column": 41,
                "index": 27892
            },
            "line": 905,
            "code": "  it(\"flow interface with nullish extends\", () => {\n    const interfaceDeclaration = t.interfaceDeclaration(t.identifier(\"A\"), undefined, undefined, t.objectTypeAnnotation([]));\n    const output = generate(interfaceDeclaration).code;\n    expect(output).toBe(\"interface A {}\");\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "flow function type annotation with no parent",
            "suites": [
                "programmatic generation"
            ],
            "updatePoint": {
                "line": 910,
                "column": 50,
                "index": 28184
            },
            "line": 910,
            "code": "  it(\"flow function type annotation with no parent\", () => {\n    const functionTypeAnnotation = t.functionTypeAnnotation(null, [], null, t.voidTypeAnnotation());\n    const output = generate(functionTypeAnnotation).code;\n    expect(output).toBe(\"() => void\");\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "preserves escapes",
            "suites": [
                "programmatic generation",
                "directives"
            ],
            "updatePoint": {
                "line": 916,
                "column": 25,
                "index": 28463
            },
            "line": 916,
            "code": "    it(\"preserves escapes\", function () {\n      const directive = t.directive(t.directiveLiteral(String.raw`us\\x65 strict`));\n      const output = generate(directive).code;\n      expect(output).toBe(String.raw`\"us\\x65 strict\";`);\n    });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "preserves escapes in minified output",
            "suites": [
                "programmatic generation",
                "directives"
            ],
            "updatePoint": {
                "line": 921,
                "column": 44,
                "index": 28720
            },
            "line": 921,
            "code": "    it(\"preserves escapes in minified output\", function () {\n      // https://github.com/babel/babel/issues/4767\n\n      const directive = t.directive(t.directiveLiteral(String.raw`foo\\n\\t\\r`));\n      const output = generate(directive, {\n        minified: true\n      }).code;\n      expect(output).toBe(String.raw`\"foo\\n\\t\\r\";`);\n    });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "unescaped single quote",
            "suites": [
                "programmatic generation",
                "directives"
            ],
            "updatePoint": {
                "line": 930,
                "column": 30,
                "index": 29042
            },
            "line": 930,
            "code": "    it(\"unescaped single quote\", function () {\n      const directive = t.directive(t.directiveLiteral(String.raw`'\\'\\\"`));\n      const output = generate(directive).code;\n      expect(output).toBe(String.raw`\"'\\'\\\"\";`);\n    });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "unescaped double quote",
            "suites": [
                "programmatic generation",
                "directives"
            ],
            "updatePoint": {
                "line": 935,
                "column": 30,
                "index": 29269
            },
            "line": 935,
            "code": "    it(\"unescaped double quote\", function () {\n      const directive = t.directive(t.directiveLiteral(String.raw`\"\\'\\\"`));\n      const output = generate(directive).code;\n      expect(output).toBe(String.raw`'\"\\'\\\"';`);\n    });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "unescaped single and double quotes together throw",
            "suites": [
                "programmatic generation",
                "directives"
            ],
            "updatePoint": {
                "line": 940,
                "column": 57,
                "index": 29523
            },
            "line": 940,
            "code": "    it(\"unescaped single and double quotes together throw\", function () {\n      const directive = t.directive(t.directiveLiteral(String.raw`'\"`));\n      expect(() => {\n        generate(directive);\n      }).toThrow();\n    });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "preserves single quotes if not minified",
            "suites": [
                "programmatic generation",
                "directives"
            ],
            "updatePoint": {
                "line": 946,
                "column": 47,
                "index": 29738
            },
            "line": 946,
            "code": "    it(\"preserves single quotes if not minified\", function () {\n      const directive = parse(\"'use strict';\").program.directives[0];\n      const output = generate(directive).code;\n      expect(output).toBe(\"'use strict';\");\n    });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "converts single quotes to double quotes if minified",
            "suites": [
                "programmatic generation",
                "directives"
            ],
            "updatePoint": {
                "line": 951,
                "column": 59,
                "index": 29983
            },
            "line": 951,
            "code": "    it(\"converts single quotes to double quotes if minified\", function () {\n      const directive = parse(\"'use strict';\").program.directives[0];\n      const output = generate(directive, {\n        minified: true\n      }).code;\n      expect(output).toBe('\"use strict\";');\n    });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "wraps around union for array",
            "suites": [
                "programmatic generation",
                "typescript generate parentheses if necessary"
            ],
            "updatePoint": {
                "line": 960,
                "column": 36,
                "index": 30318
            },
            "line": 960,
            "code": "    it(\"wraps around union for array\", () => {\n      const typeStatement = t.tsArrayType(t.tsUnionType([t.tsIntersectionType([t.tsNumberKeyword(), t.tsBooleanKeyword()]), t.tsNullKeyword()]));\n      const output = generate(typeStatement).code;\n      expect(output).toBe(\"((number & boolean) | null)[]\");\n    });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "wraps around intersection for array",
            "suites": [
                "programmatic generation",
                "typescript generate parentheses if necessary"
            ],
            "updatePoint": {
                "line": 965,
                "column": 43,
                "index": 30637
            },
            "line": 965,
            "code": "    it(\"wraps around intersection for array\", () => {\n      const typeStatement = t.tsArrayType(t.tsIntersectionType([t.tsNumberKeyword(), t.tsBooleanKeyword()]));\n      const output = generate(typeStatement).code;\n      expect(output).toBe(\"(number & boolean)[]\");\n    });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "wraps around rest",
            "suites": [
                "programmatic generation",
                "typescript generate parentheses if necessary"
            ],
            "updatePoint": {
                "line": 970,
                "column": 25,
                "index": 30893
            },
            "line": 970,
            "code": "    it(\"wraps around rest\", () => {\n      const typeStatement = t.tsRestType(t.tsIntersectionType([t.tsNumberKeyword(), t.tsBooleanKeyword()]));\n      const output = generate(typeStatement).code;\n      expect(output).toBe(\"...(number & boolean)\");\n    });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "wraps around optional type",
            "suites": [
                "programmatic generation",
                "typescript generate parentheses if necessary"
            ],
            "updatePoint": {
                "line": 975,
                "column": 34,
                "index": 31158
            },
            "line": 975,
            "code": "    it(\"wraps around optional type\", () => {\n      const typeStatement = t.tsOptionalType(t.tsIntersectionType([t.tsNumberKeyword(), t.tsBooleanKeyword()]));\n      const output = generate(typeStatement).code;\n      expect(output).toBe(\"(number & boolean)?\");\n    });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "not wrapped in parentheses when standalone",
            "suites": [
                "programmatic generation",
                "object expressions"
            ],
            "updatePoint": {
                "line": 982,
                "column": 50,
                "index": 31488
            },
            "line": 982,
            "code": "    it(\"not wrapped in parentheses when standalone\", () => {\n      const objectExpression = t.objectExpression([]);\n      const output = generate(objectExpression).code;\n      expect(output).toBe(\"{}\");\n    });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "wrapped in parentheses in expression statement",
            "suites": [
                "programmatic generation",
                "object expressions"
            ],
            "updatePoint": {
                "line": 987,
                "column": 54,
                "index": 31703
            },
            "line": 987,
            "code": "    it(\"wrapped in parentheses in expression statement\", () => {\n      const expressionStatement = t.expressionStatement(t.objectExpression([]));\n      const output = generate(expressionStatement).code;\n      expect(output).toBe(\"({});\");\n    });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "wrapped in parentheses in arrow function",
            "suites": [
                "programmatic generation",
                "object expressions"
            ],
            "updatePoint": {
                "line": 992,
                "column": 48,
                "index": 31944
            },
            "line": 992,
            "code": "    it(\"wrapped in parentheses in arrow function\", () => {\n      const arrowFunctionExpression = t.arrowFunctionExpression([], t.objectExpression([]));\n      const output = generate(arrowFunctionExpression).code;\n      expect(output).toBe(\"() => ({})\");\n    });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "not wrapped in parentheses in conditional",
            "suites": [
                "programmatic generation",
                "object expressions"
            ],
            "updatePoint": {
                "line": 997,
                "column": 49,
                "index": 32207
            },
            "line": 997,
            "code": "    it(\"not wrapped in parentheses in conditional\", () => {\n      const conditionalExpression = t.conditionalExpression(t.objectExpression([]), t.booleanLiteral(true), t.booleanLiteral(false));\n      const output = generate(conditionalExpression).code;\n      expect(output).toBe(\"{} ? true : false\");\n    });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "wrapped in parentheses in conditional in expression statement",
            "suites": [
                "programmatic generation",
                "object expressions"
            ],
            "updatePoint": {
                "line": 1002,
                "column": 69,
                "index": 32536
            },
            "line": 1002,
            "code": "    it(\"wrapped in parentheses in conditional in expression statement\", () => {\n      const expressionStatement = t.expressionStatement(t.conditionalExpression(t.objectExpression([]), t.booleanLiteral(true), t.booleanLiteral(false)));\n      const output = generate(expressionStatement).code;\n      expect(output).toBe(\"({}) ? true : false;\");\n    });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "wrapped in parentheses in conditional in arrow function",
            "suites": [
                "programmatic generation",
                "object expressions"
            ],
            "updatePoint": {
                "line": 1007,
                "column": 63,
                "index": 32881
            },
            "line": 1007,
            "code": "    it(\"wrapped in parentheses in conditional in arrow function\", () => {\n      const arrowFunctionExpression = t.arrowFunctionExpression([], t.conditionalExpression(t.objectExpression([]), t.booleanLiteral(true), t.booleanLiteral(false)));\n      const output = generate(arrowFunctionExpression).code;\n      expect(output).toBe(\"() => ({}) ? true : false\");\n    });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "not wrapped in parentheses in binary expression",
            "suites": [
                "programmatic generation",
                "object expressions"
            ],
            "updatePoint": {
                "line": 1012,
                "column": 55,
                "index": 33239
            },
            "line": 1012,
            "code": "    it(\"not wrapped in parentheses in binary expression\", () => {\n      const binaryExpression = t.binaryExpression(\"+\", t.objectExpression([]), t.numericLiteral(1));\n      const output = generate(binaryExpression).code;\n      expect(output).toBe(\"{} + 1\");\n    });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "wrapped in parentheses in binary expression in expression statement",
            "suites": [
                "programmatic generation",
                "object expressions"
            ],
            "updatePoint": {
                "line": 1017,
                "column": 75,
                "index": 33525
            },
            "line": 1017,
            "code": "    it(\"wrapped in parentheses in binary expression in expression statement\", () => {\n      const expressionStatement = t.expressionStatement(t.binaryExpression(\"+\", t.objectExpression([]), t.numericLiteral(1)));\n      const output = generate(expressionStatement).code;\n      expect(output).toBe(\"({}) + 1;\");\n    });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "wrapped in parentheses in binary expression in arrow function",
            "suites": [
                "programmatic generation",
                "object expressions"
            ],
            "updatePoint": {
                "line": 1022,
                "column": 69,
                "index": 33837
            },
            "line": 1022,
            "code": "    it(\"wrapped in parentheses in binary expression in arrow function\", () => {\n      const arrowFunctionExpression = t.arrowFunctionExpression([], t.binaryExpression(\"+\", t.objectExpression([]), t.numericLiteral(1)));\n      const output = generate(arrowFunctionExpression).code;\n      expect(output).toBe(\"() => ({}) + 1\");\n    });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "not wrapped in parentheses in sequence expression",
            "suites": [
                "programmatic generation",
                "object expressions"
            ],
            "updatePoint": {
                "line": 1027,
                "column": 57,
                "index": 34158
            },
            "line": 1027,
            "code": "    it(\"not wrapped in parentheses in sequence expression\", () => {\n      const sequenceExpression = t.sequenceExpression([t.objectExpression([]), t.numericLiteral(1)]);\n      const output = generate(sequenceExpression).code;\n      expect(output).toBe(\"{}, 1\");\n    });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "wrapped in parentheses in sequence expression in expression statement",
            "suites": [
                "programmatic generation",
                "object expressions"
            ],
            "updatePoint": {
                "line": 1032,
                "column": 77,
                "index": 34448
            },
            "line": 1032,
            "code": "    it(\"wrapped in parentheses in sequence expression in expression statement\", () => {\n      const expressionStatement = t.expressionStatement(t.sequenceExpression([t.objectExpression([]), t.numericLiteral(1)]));\n      const output = generate(expressionStatement).code;\n      expect(output).toBe(\"({}), 1;\");\n    });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "wrapped in parentheses in sequence expression in arrow function",
            "suites": [
                "programmatic generation",
                "object expressions"
            ],
            "updatePoint": {
                "line": 1037,
                "column": 71,
                "index": 34760
            },
            "line": 1037,
            "code": "    it(\"wrapped in parentheses in sequence expression in arrow function\", () => {\n      const arrowFunctionExpression = t.arrowFunctionExpression([], t.sequenceExpression([t.objectExpression([]), t.numericLiteral(1)]));\n      const output = generate(arrowFunctionExpression).code;\n      expect(output).toBe(\"() => (({}), 1)\");\n    });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "not wrapped in parentheses when standalone",
            "suites": [
                "programmatic generation",
                "function expressions"
            ],
            "updatePoint": {
                "line": 1044,
                "column": 50,
                "index": 35123
            },
            "line": 1044,
            "code": "    it(\"not wrapped in parentheses when standalone\", () => {\n      const functionExpression = t.functionExpression(null, [], t.blockStatement([]));\n      const output = generate(functionExpression).code;\n      expect(output).toBe(\"function () {}\");\n    });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "wrapped in parentheses in expression statement",
            "suites": [
                "programmatic generation",
                "function expressions"
            ],
            "updatePoint": {
                "line": 1049,
                "column": 54,
                "index": 35384
            },
            "line": 1049,
            "code": "    it(\"wrapped in parentheses in expression statement\", () => {\n      const expressionStatement = t.expressionStatement(t.functionExpression(null, [], t.blockStatement([])));\n      const output = generate(expressionStatement).code;\n      expect(output).toBe(\"(function () {});\");\n    });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "wrapped in parentheses in export default declaration",
            "suites": [
                "programmatic generation",
                "function expressions"
            ],
            "updatePoint": {
                "line": 1054,
                "column": 60,
                "index": 35679
            },
            "line": 1054,
            "code": "    it(\"wrapped in parentheses in export default declaration\", () => {\n      const exportDefaultDeclaration = t.exportDefaultDeclaration(t.functionExpression(null, [], t.blockStatement([])));\n      const output = generate(exportDefaultDeclaration).code;\n      expect(output).toBe(\"export default (function () {});\");\n    });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "not wrapped in parentheses when standalone",
            "suites": [
                "programmatic generation",
                "class expressions"
            ],
            "updatePoint": {
                "line": 1061,
                "column": 50,
                "index": 36040
            },
            "line": 1061,
            "code": "    it(\"not wrapped in parentheses when standalone\", () => {\n      const classExpression = t.classExpression(null, null, t.classBody([]));\n      const output = generate(classExpression).code;\n      expect(output).toBe(\"class {}\");\n    });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "wrapped in parentheses in expression statement",
            "suites": [
                "programmatic generation",
                "class expressions"
            ],
            "updatePoint": {
                "line": 1066,
                "column": 54,
                "index": 36283
            },
            "line": 1066,
            "code": "    it(\"wrapped in parentheses in expression statement\", () => {\n      const expressionStatement = t.expressionStatement(t.classExpression(null, null, t.classBody([])));\n      const output = generate(expressionStatement).code;\n      expect(output).toBe(\"(class {});\");\n    });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "wrapped in parentheses in export default declaration",
            "suites": [
                "programmatic generation",
                "class expressions"
            ],
            "updatePoint": {
                "line": 1071,
                "column": 60,
                "index": 36566
            },
            "line": 1071,
            "code": "    it(\"wrapped in parentheses in export default declaration\", () => {\n      const exportDefaultDeclaration = t.exportDefaultDeclaration(t.classExpression(null, null, t.classBody([])));\n      const output = generate(exportDefaultDeclaration).code;\n      expect(output).toBe(\"export default (class {});\");\n    });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "true",
            "suites": [
                "programmatic generation",
                "jsescOption.minimal"
            ],
            "updatePoint": {
                "line": 1079,
                "column": 12,
                "index": 36944
            },
            "line": 1079,
            "code": "    it(\"true\", () => {\n      const output = generate(string, {\n        jsescOption: {\n          minimal: true\n        }\n      }).code;\n      expect(output).toBe(`\"表格_副本\"`);\n    });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "false",
            "suites": [
                "programmatic generation",
                "jsescOption.minimal"
            ],
            "updatePoint": {
                "line": 1087,
                "column": 13,
                "index": 37126
            },
            "line": 1087,
            "code": "    it(\"false\", () => {\n      const output = generate(string, {\n        jsescOption: {\n          minimal: false\n        }\n      }).code;\n      expect(output).toBe(`\"\\\\u8868\\\\u683C_\\\\u526F\\\\u672C\"`);\n    });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "default",
            "suites": [
                "programmatic generation",
                "jsescOption.minimal"
            ],
            "updatePoint": {
                "line": 1096,
                "column": 17,
                "index": 37377
            },
            "line": 1096,
            "code": "      it(\"default\", () => {\n        const output = generate(string).code;\n        expect(output).toBe(`\"表格_副本\"`);\n      });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "default in Babel 7",
            "suites": [
                "programmatic generation",
                "jsescOption.minimal"
            ],
            "updatePoint": {
                "line": 1101,
                "column": 28,
                "index": 37525
            },
            "line": 1101,
            "code": "      it(\"default in Babel 7\", () => {\n        const output = generate(string).code;\n        expect(output).toBe(`\"\\\\u8868\\\\u683C_\\\\u526F\\\\u672C\"`);\n      });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "empty extends array",
            "suites": [
                "programmatic generation",
                "typescript interface declaration"
            ],
            "updatePoint": {
                "line": 1108,
                "column": 27,
                "index": 37750
            },
            "line": 1108,
            "code": "    it(\"empty extends array\", () => {\n      const tsInterfaceDeclaration = t.tsInterfaceDeclaration(t.identifier(\"A\"), undefined, [], t.tsInterfaceBody([]));\n      const output = generate(tsInterfaceDeclaration).code;\n      expect(output).toBe(\"interface A {}\");\n    });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "detects open bracket from non-optional OptionalMemberExpression",
            "suites": [
                "programmatic generation",
                "identifier let"
            ],
            "updatePoint": {
                "line": 1115,
                "column": 71,
                "index": 38108
            },
            "line": 1115,
            "code": "    it(\"detects open bracket from non-optional OptionalMemberExpression\", () => {\n      const ast = parse(`for (let?.[x];;);`, {\n        sourceType: \"script\",\n        strictMode: \"false\"\n      });\n      ast.program.body[0].init.optional = false;\n      const output = generate(ast).code;\n      expect(output).toBe(\"for ((let)[x];;);\");\n    });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "atomic node",
            "suites": [
                "programmatic generation",
                "should print inner comments even if there are no suitable inner locations"
            ],
            "updatePoint": {
                "line": 1126,
                "column": 19,
                "index": 38501
            },
            "line": 1126,
            "code": "    it(\"atomic node\", () => {\n      const id = t.identifier(\"foo\");\n      id.innerComments = [{\n        type: \"CommentBlock\",\n        value: \"foo\"\n      }];\n      expect(generate(id).code).toMatchInlineSnapshot(`\"foo /*foo*/\"`);\n    });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "node without inner locations",
            "suites": [
                "programmatic generation",
                "should print inner comments even if there are no suitable inner locations"
            ],
            "updatePoint": {
                "line": 1134,
                "column": 36,
                "index": 38755
            },
            "line": 1134,
            "code": "    it(\"node without inner locations\", () => {\n      const expr = t.binaryExpression(\"+\", t.numericLiteral(1), t.numericLiteral(2));\n      expr.innerComments = [{\n        type: \"CommentBlock\",\n        value: \"foo\"\n      }];\n      expect(generate(expr).code).toMatchInlineSnapshot(`\"1 + 2 /*foo*/\"`);\n    });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "comment skipped in arrow function because of newlines",
            "suites": [
                "programmatic generation",
                "should print inner comments even if there are no suitable inner locations"
            ],
            "updatePoint": {
                "line": 1142,
                "column": 61,
                "index": 39088
            },
            "line": 1142,
            "code": "    it(\"comment skipped in arrow function because of newlines\", () => {\n      const arrow = t.arrowFunctionExpression([t.identifier(\"x\"), t.identifier(\"y\")], t.identifier(\"z\"));\n      arrow.innerComments = [{\n        type: \"CommentBlock\",\n        value: \"foo\"\n      }, {\n        type: \"CommentBlock\",\n        value: \"new\\nline\"\n      }];\n      expect(generate(arrow).code).toMatchInlineSnapshot(`\n        \"(x, y) /*foo*/ => z\n        /*new\n        line*/\"\n      `);\n    });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "comment in arrow function with return type",
            "suites": [
                "programmatic generation",
                "should print inner comments even if there are no suitable inner locations"
            ],
            "updatePoint": {
                "line": 1157,
                "column": 50,
                "index": 39551
            },
            "line": 1157,
            "code": "    it(\"comment in arrow function with return type\", () => {\n      const arrow = t.arrowFunctionExpression([t.identifier(\"x\"), t.identifier(\"y\")], t.identifier(\"z\"));\n      arrow.returnType = t.tsTypeAnnotation(t.tsAnyKeyword());\n      arrow.returnType.trailingComments = [{\n        type: \"CommentBlock\",\n        value: \"foo\"\n      },\n      // This comment is dropped. There is no way to safely print it\n      // as a trailingComment of the return type.\n      {\n        type: \"CommentBlock\",\n        value: \"new\\nline\"\n      }];\n      expect(generate(arrow).code).toMatchInlineSnapshot(`\"(x, y): any /*foo*/ => z\"`);\n    });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "generate",
            "suites": [
                "CodeGenerator"
            ],
            "updatePoint": {
                "line": 1175,
                "column": 14,
                "index": 40190
            },
            "line": 1175,
            "code": "  it(\"generate\", function () {\n    const codeGen = new CodeGenerator(t.numericLiteral(123));\n    const code = codeGen.generate().code;\n    expect(parse(code).program.body[0].expression.value).toBe(123);\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "completeness",
            "suites": [
                "Printer"
            ],
            "updatePoint": {
                "line": 5,
                "column": 18,
                "index": 170
            },
            "line": 5,
            "code": "  it(\"completeness\", function () {\n    Object.keys(t.VISITOR_KEYS).forEach(function (type) {\n      expect(Printer.prototype[type]).toBeTruthy();\n    });\n    Object.keys(Printer.prototype).forEach(function (type) {\n      if (!/[A-Z]/.test(type[0])) return;\n      expect(t.VISITOR_KEYS[type]).toBeTruthy();\n    });\n  });",
            "file": "printer.skip-bundled.js",
            "skipped": false,
            "dir": "packages/babel-generator/test"
        },
        {
            "name": "will add leading comment",
            "suites": [
                "@babel/helper-annotate-as-pure"
            ],
            "updatePoint": {
                "line": 4,
                "column": 30,
                "index": 196
            },
            "line": 4,
            "code": "  it(\"will add leading comment\", () => {\n    const node = {};\n    annotateAsPure(node);\n    expect(node.leadingComments).toEqual([{\n      type: \"CommentBlock\",\n      value: \"#__PURE__\"\n    }]);\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-annotate-as-pure/test"
        },
        {
            "name": "will not add an extra leading comment",
            "suites": [
                "@babel/helper-annotate-as-pure"
            ],
            "updatePoint": {
                "line": 12,
                "column": 43,
                "index": 409
            },
            "line": 12,
            "code": "  it(\"will not add an extra leading comment\", () => {\n    const node = {\n      leadingComments: [{\n        type: \"CommentBlock\",\n        value: \"#__PURE__\"\n      }]\n    };\n    annotateAsPure(node);\n    expect(node.leadingComments).toEqual([{\n      type: \"CommentBlock\",\n      value: \"#__PURE__\"\n    }]);\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-annotate-as-pure/test"
        },
        {
            "name": "pass env to configs used with extends",
            "suites": [],
            "updatePoint": {
                "line": 13,
                "column": 41,
                "index": 488
            },
            "line": 13,
            "code": "it(\"pass env to configs used with extends\", async () => {\n  const actual = getTargets({\n    browsers: [`extends ${resolve(currentDir, \"fixtures\", \"@babel\", \"browserslist-config-fixture.cjs\")}`, \"chrome >= 71\"]\n  }, {\n    configPath: currentDir,\n    browserslistEnv: \"custom\"\n  });\n  expect(actual).toEqual({\n    chrome: \"71.0.0\",\n    firefox: \"75.0.0\"\n  });\n});",
            "file": "browserslist-extends/browserslist-extends.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-compilation-targets/test"
        },
        {
            "name": "allows custom browserslist env",
            "suites": [],
            "updatePoint": {
                "line": 5,
                "column": 34,
                "index": 198
            },
            "line": 5,
            "code": "it(\"allows custom browserslist env\", () => {\n  const actual = getTargets({}, {\n    configPath: path.dirname(fileURLToPath(import.meta.url)),\n    browserslistEnv: \"custom\"\n  });\n  expect(actual).toEqual({\n    ie: \"11.0.0\"\n  });\n});",
            "file": "custom-browserslist-env/custom-browserslist-env.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-compilation-targets/test"
        },
        {
            "name": "loads packageJson.browserslist",
            "suites": [],
            "updatePoint": {
                "line": 12,
                "column": 34,
                "index": 359
            },
            "line": 12,
            "code": "it(\"loads packageJson.browserslist\", () => {\n  const actual = getTargets({}, {});\n  expect(actual).toEqual({\n    chrome: \"4.0.0\"\n  });\n});",
            "file": "load-browserslist-package-json/load-browserslist-package-json.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-compilation-targets/test"
        },
        {
            "name": "loads browserslistrc",
            "suites": [],
            "updatePoint": {
                "line": 12,
                "column": 24,
                "index": 349
            },
            "line": 12,
            "code": "it(\"loads browserslistrc\", () => {\n  const actual = getTargets({}, {});\n  expect(actual).toEqual({\n    chrome: \"4.0.0\"\n  });\n});",
            "file": "load-browserslistrc/load-browserslistrc.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-compilation-targets/test"
        },
        {
            "name": "loads browserslistrc and respects browserslistEnv",
            "suites": [],
            "updatePoint": {
                "line": 18,
                "column": 53,
                "index": 507
            },
            "line": 18,
            "code": "it(\"loads browserslistrc and respects browserslistEnv\", () => {\n  const actual = getTargets({}, {\n    browserslistEnv: \"development\"\n  });\n  expect(actual).toEqual({\n    chrome: \"88.0.0\"\n  });\n});",
            "file": "load-browserslistrc/load-browserslistrc.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-compilation-targets/test"
        },
        {
            "name": "parses",
            "suites": [
                "getTargets"
            ],
            "updatePoint": {
                "line": 7,
                "column": 12,
                "index": 258
            },
            "line": 7,
            "code": "  it(\"parses\", () => {\n    expect(getTargets({\n      chrome: 49,\n      firefox: \"55\",\n      ie: \"9\",\n      node: \"6.10\",\n      electron: \"1.6\"\n    })).toEqual({\n      chrome: \"49.0.0\",\n      electron: \"1.6.0\",\n      firefox: \"55.0.0\",\n      ie: \"9.0.0\",\n      node: \"6.10.0\"\n    });\n  });",
            "file": "targets-parser.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-compilation-targets/test"
        },
        {
            "name": "does not mutate the input",
            "suites": [
                "getTargets"
            ],
            "updatePoint": {
                "line": 22,
                "column": 31,
                "index": 566
            },
            "line": 22,
            "code": "  it(\"does not mutate the input\", () => {\n    const input = Object.freeze({\n      browsers: \"defaults\",\n      esmodules: true\n    });\n    const expected = getTargets({\n      browsers: browserslist.defaults,\n      esmodules: true\n    });\n    const actual = getTargets(input);\n    expect(actual).toEqual(expected);\n    expect(input.browsers).toEqual(\"defaults\");\n    expect(input.esmodules).toEqual(true);\n  });",
            "file": "targets-parser.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-compilation-targets/test"
        },
        {
            "name": "allows 'defaults' query",
            "suites": [
                "getTargets"
            ],
            "updatePoint": {
                "line": 36,
                "column": 29,
                "index": 974
            },
            "line": 36,
            "code": "  it(\"allows 'defaults' query\", () => {\n    const browserslistDefaults = browserslist.defaults;\n    const expected = getTargets({\n      browsers: browserslistDefaults\n    });\n    const actual = getTargets({\n      browsers: \"defaults\"\n    });\n    expect(actual).toEqual(expected);\n  });",
            "file": "targets-parser.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-compilation-targets/test"
        },
        {
            "name": "does not clobber browserslists defaults",
            "suites": [
                "getTargets"
            ],
            "updatePoint": {
                "line": 46,
                "column": 45,
                "index": 1276
            },
            "line": 46,
            "code": "  it(\"does not clobber browserslists defaults\", () => {\n    const browserslistDefaults = browserslist.defaults;\n    getTargets({\n      browsers: \"chrome 56, ie 11, firefox 51, safari 9\"\n    });\n    expect(browserslist.defaults).toEqual(browserslistDefaults);\n  });",
            "file": "targets-parser.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-compilation-targets/test"
        },
        {
            "name": "supports region browserslists query",
            "suites": [
                "getTargets"
            ],
            "updatePoint": {
                "line": 53,
                "column": 41,
                "index": 1537
            },
            "line": 53,
            "code": "  it(\"supports region browserslists query\", () => {\n    const actual = getTargets({\n      browsers: \"> 0.5% in GB\"\n    });\n    // chrome 4 is the first release of chrome,\n    // it should never be included in this query\n    expect(parseFloat(actual.chrome)).toBeGreaterThan(4);\n  });",
            "file": "targets-parser.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-compilation-targets/test"
        },
        {
            "name": "throws on invalid target name",
            "suites": [
                "getTargets",
                "validation"
            ],
            "updatePoint": {
                "line": 62,
                "column": 37,
                "index": 1850
            },
            "line": 62,
            "code": "    it(\"throws on invalid target name\", () => {\n      const invalidTargetName = () => {\n        getTargets({\n          unknown: \"unknown\"\n        });\n      };\n      expect(invalidTargetName).toThrow();\n    });",
            "file": "targets-parser.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-compilation-targets/test"
        },
        {
            "name": "throws on invalid browsers target",
            "suites": [
                "getTargets",
                "validation"
            ],
            "updatePoint": {
                "line": 70,
                "column": 41,
                "index": 2064
            },
            "line": 70,
            "code": "    it(\"throws on invalid browsers target\", () => {\n      const invalidBrowsersTarget = () => {\n        getTargets({\n          browsers: 59\n        });\n      };\n      expect(invalidBrowsersTarget).toThrow();\n    });",
            "file": "targets-parser.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-compilation-targets/test"
        },
        {
            "name": "throws on invalid target version",
            "suites": [
                "getTargets",
                "validation"
            ],
            "updatePoint": {
                "line": 78,
                "column": 40,
                "index": 2279
            },
            "line": 78,
            "code": "    it(\"throws on invalid target version\", () => {\n      const invalidTargetVersion = () => {\n        getTargets({\n          chrome: \"unknown\"\n        });\n      };\n      expect(invalidTargetVersion).toThrow();\n    });",
            "file": "targets-parser.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-compilation-targets/test"
        },
        {
            "name": "merges browser key targets",
            "suites": [
                "getTargets",
                "browser"
            ],
            "updatePoint": {
                "line": 88,
                "column": 34,
                "index": 2527
            },
            "line": 88,
            "code": "    it(\"merges browser key targets\", () => {\n      expect(getTargets({\n        browsers: \"chrome 56, ie 11, firefox 51, safari 9\",\n        chrome: \"49\",\n        firefox: \"55\",\n        ie: \"9\"\n      })).toEqual({\n        chrome: \"49.0.0\",\n        firefox: \"55.0.0\",\n        ie: \"9.0.0\",\n        safari: \"9.0.0\"\n      });\n    });",
            "file": "targets-parser.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-compilation-targets/test"
        },
        {
            "name": "works with TP versions",
            "suites": [
                "getTargets",
                "browser"
            ],
            "updatePoint": {
                "line": 101,
                "column": 30,
                "index": 2851
            },
            "line": 101,
            "code": "    it(\"works with TP versions\", () => {\n      expect(getTargets({\n        browsers: \"safari tp\"\n      })).toEqual({\n        safari: \"tp\"\n      });\n    });",
            "file": "targets-parser.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-compilation-targets/test"
        },
        {
            "name": "works with node versions",
            "suites": [
                "getTargets",
                "browser"
            ],
            "updatePoint": {
                "line": 108,
                "column": 32,
                "index": 3009
            },
            "line": 108,
            "code": "    it(\"works with node versions\", () => {\n      expect(getTargets({\n        browsers: \"node 8.5\"\n      })).toEqual({\n        node: \"8.5.0\"\n      });\n    });",
            "file": "targets-parser.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-compilation-targets/test"
        },
        {
            "name": "works with current node version and string type browsers",
            "suites": [
                "getTargets",
                "browser"
            ],
            "updatePoint": {
                "line": 115,
                "column": 64,
                "index": 3199
            },
            "line": 115,
            "code": "    it(\"works with current node version and string type browsers\", () => {\n      expect(getTargets({\n        browsers: \"current node, chrome 55, opera 42\"\n      })).toEqual({\n        node: process.versions.node,\n        chrome: \"55.0.0\",\n        opera: \"42.0.0\"\n      });\n    });",
            "file": "targets-parser.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-compilation-targets/test"
        },
        {
            "name": "does throws on unsupported versions",
            "suites": [
                "getTargets",
                "browser"
            ],
            "updatePoint": {
                "line": 124,
                "column": 43,
                "index": 3458
            },
            "line": 124,
            "code": "    it(\"does throws on unsupported versions\", () => {\n      expect(() => {\n        getTargets({\n          browsers: \"node 15.0.0, chrome 1000\"\n        });\n      }).toThrow();\n    });",
            "file": "targets-parser.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-compilation-targets/test"
        },
        {
            "name": "works with current node version and array type browsers",
            "suites": [
                "getTargets",
                "browser"
            ],
            "updatePoint": {
                "line": 131,
                "column": 63,
                "index": 3661
            },
            "line": 131,
            "code": "    it(\"works with current node version and array type browsers\", () => {\n      expect(getTargets({\n        browsers: [\"ie 11\", \"current node\", \"chrome 55\"]\n      })).toEqual({\n        node: process.versions.node,\n        chrome: \"55.0.0\",\n        ie: \"11.0.0\"\n      });\n    });",
            "file": "targets-parser.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-compilation-targets/test"
        },
        {
            "name": "prefers released version over TP",
            "suites": [
                "getTargets",
                "browser"
            ],
            "updatePoint": {
                "line": 140,
                "column": 40,
                "index": 3917
            },
            "line": 140,
            "code": "    it(\"prefers released version over TP\", () => {\n      expect(getTargets({\n        browsers: \"safari tp, safari 11\"\n      })).toEqual({\n        safari: \"11.0.0\"\n      });\n    });",
            "file": "targets-parser.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-compilation-targets/test"
        },
        {
            "name": "returns TP version in lower case",
            "suites": [
                "getTargets",
                "browser"
            ],
            "updatePoint": {
                "line": 147,
                "column": 40,
                "index": 4098
            },
            "line": 147,
            "code": "    it(\"returns TP version in lower case\", () => {\n      expect(getTargets({\n        safari: \"TP\"\n      })).toEqual({\n        safari: \"tp\"\n      });\n    });",
            "file": "targets-parser.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-compilation-targets/test"
        },
        {
            "name": "works with android",
            "suites": [
                "getTargets",
                "browser"
            ],
            "updatePoint": {
                "line": 154,
                "column": 26,
                "index": 4241
            },
            "line": 154,
            "code": "    it(\"works with android\", () => {\n      expect(getTargets({\n        browsers: \"Android 4\"\n      })).toEqual({\n        android: \"4.0.0\"\n      });\n    });",
            "file": "targets-parser.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-compilation-targets/test"
        },
        {
            "name": "works with inequalities",
            "suites": [
                "getTargets",
                "browser"
            ],
            "updatePoint": {
                "line": 161,
                "column": 31,
                "index": 4402
            },
            "line": 161,
            "code": "    it(\"works with inequalities\", () => {\n      expect(getTargets({\n        browsers: \"Android >= 4\"\n      })).toEqual({\n        android: \"4.0.0\"\n      });\n    });",
            "file": "targets-parser.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-compilation-targets/test"
        },
        {
            "name": "returns browsers supporting modules",
            "suites": [
                "getTargets",
                "esmodules"
            ],
            "updatePoint": {
                "line": 170,
                "column": 43,
                "index": 4616
            },
            "line": 170,
            "code": "    it(\"returns browsers supporting modules\", () => {\n      expect(getTargets({\n        esmodules: true\n      })).toMatchSnapshot();\n    });",
            "file": "targets-parser.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-compilation-targets/test"
        },
        {
            "name": "returns browsers supporting modules, ignoring browsers key",
            "suites": [
                "getTargets",
                "esmodules"
            ],
            "updatePoint": {
                "line": 175,
                "column": 66,
                "index": 4780
            },
            "line": 175,
            "code": "    it(\"returns browsers supporting modules, ignoring browsers key\", () => {\n      expect(getTargets({\n        esmodules: true,\n        browsers: \"ie 8\"\n      })).toMatchSnapshot();\n    });",
            "file": "targets-parser.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-compilation-targets/test"
        },
        {
            "name": "returns browser supporting modules and keyed browser overrides",
            "suites": [
                "getTargets",
                "esmodules"
            ],
            "updatePoint": {
                "line": 181,
                "column": 70,
                "index": 4974
            },
            "line": 181,
            "code": "    it(\"returns browser supporting modules and keyed browser overrides\", () => {\n      expect(getTargets({\n        esmodules: true,\n        ie: 11\n      })).toMatchSnapshot();\n    });",
            "file": "targets-parser.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-compilation-targets/test"
        },
        {
            "name": "returns browser supporting modules and keyed browser overrides, ignoring browsers field",
            "suites": [
                "getTargets",
                "esmodules"
            ],
            "updatePoint": {
                "line": 187,
                "column": 95,
                "index": 5183
            },
            "line": 187,
            "code": "    it(\"returns browser supporting modules and keyed browser overrides, ignoring browsers field\", () => {\n      expect(getTargets({\n        esmodules: true,\n        browsers: \"ie 10\",\n        ie: 11\n      })).toMatchSnapshot();\n    });",
            "file": "targets-parser.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-compilation-targets/test"
        },
        {
            "name": "can be intersected with the browsers option",
            "suites": [
                "getTargets",
                "esmodules"
            ],
            "updatePoint": {
                "line": 194,
                "column": 51,
                "index": 5375
            },
            "line": 194,
            "code": "    it(\"can be intersected with the browsers option\", () => {\n      expect(getTargets({\n        esmodules: \"intersect\",\n        browsers: [\"chrome >= 70\", \"firefox >= 30\"]\n      })).toMatchSnapshot();\n    });",
            "file": "targets-parser.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-compilation-targets/test"
        },
        {
            "name": "can be intersected with ios browsers option",
            "suites": [
                "getTargets",
                "esmodules"
            ],
            "updatePoint": {
                "line": 200,
                "column": 51,
                "index": 5584
            },
            "line": 200,
            "code": "    it(\"can be intersected with ios browsers option\", () => {\n      expect(getTargets({\n        esmodules: \"intersect\",\n        browsers: [\"ios >= 12\"]\n      })).toMatchSnapshot();\n    });",
            "file": "targets-parser.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-compilation-targets/test"
        },
        {
            "name": "can be intersected with a .browserslistrc file",
            "suites": [
                "getTargets",
                "esmodules"
            ],
            "updatePoint": {
                "line": 206,
                "column": 54,
                "index": 5776
            },
            "line": 206,
            "code": "    it(\"can be intersected with a .browserslistrc file\", () => {\n      expect(getTargets({\n        esmodules: \"intersect\"\n      }, {\n        configPath: join(dirname(fileURLToPath(import.meta.url)), \"fixtures\", \"foo.js\")\n      })).toMatchSnapshot();\n    });",
            "file": "targets-parser.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-compilation-targets/test"
        },
        {
            "name": "explicit browser versions have the precedence over 'esmodules'",
            "suites": [
                "getTargets",
                "esmodules"
            ],
            "updatePoint": {
                "line": 213,
                "column": 70,
                "index": 6050
            },
            "line": 213,
            "code": "    it(\"explicit browser versions have the precedence over 'esmodules'\", () => {\n      expect(getTargets({\n        browsers: \"chrome 5, firefox 5\",\n        esmodules: \"intersect\",\n        chrome: 20,\n        firefox: 70\n      })).toMatchSnapshot();\n    });",
            "file": "targets-parser.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-compilation-targets/test"
        },
        {
            "name": "The final 'browsers' handled variable will have no effect if it is an empty array",
            "suites": [
                "getTargets",
                "esmodules"
            ],
            "updatePoint": {
                "line": 238,
                "column": 89,
                "index": 6932
            },
            "line": 238,
            "code": "    it(\"The final 'browsers' handled variable will have no effect if it is an empty array\", () => {\n      expect(getTargets({\n        esmodules: \"intersect\",\n        browsers: []\n      })).toEqual(getTargets({\n        esmodules: \"intersect\"\n      }, {\n        ignoreBrowserslistConfig: true\n      }));\n    });",
            "file": "targets-parser.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-compilation-targets/test"
        },
        {
            "name": "'resolveTargets' will be called rightly if 'browsers' is an array with some value",
            "suites": [
                "getTargets",
                "esmodules"
            ],
            "updatePoint": {
                "line": 248,
                "column": 89,
                "index": 7242
            },
            "line": 248,
            "code": "    it(\"'resolveTargets' will be called rightly if 'browsers' is an array with some value\", () => {\n      // 'test' is an unknown browser query, so methods of 'browserslist' library will throw an error\n      expect(() => getTargets({\n        esmodules: \"intersect\",\n        browsers: [\"test\"]\n      })).toThrow();\n    });",
            "file": "targets-parser.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-compilation-targets/test"
        },
        {
            "name": "'intersect' behaves like 'true' if no browsers are specified and the browserslist config is ignored",
            "suites": [
                "getTargets",
                "esmodules"
            ],
            "updatePoint": {
                "line": 260,
                "column": 107,
                "index": 7803
            },
            "line": 260,
            "code": "    it(\"'intersect' behaves like 'true' if no browsers are specified and the browserslist config is ignored\", () => {\n      expect(getTargets({\n        esmodules: \"intersect\"\n      }, {\n        ignoreBrowserslistConfig: true\n      })).toEqual(getTargets({\n        esmodules: true\n      }, {\n        ignoreBrowserslistConfig: true\n      }));\n    });",
            "file": "targets-parser.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-compilation-targets/test"
        },
        {
            "name": "should return the current node version with option 'current'",
            "suites": [
                "getTargets",
                "node"
            ],
            "updatePoint": {
                "line": 273,
                "column": 68,
                "index": 8146
            },
            "line": 273,
            "code": "    it(\"should return the current node version with option 'current'\", () => {\n      expect(getTargets({\n        node: true\n      })).toEqual({\n        node: process.versions.node\n      });\n    });",
            "file": "targets-parser.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-compilation-targets/test"
        },
        {
            "name": "should be its own target",
            "suites": [
                "getTargets",
                "electron"
            ],
            "updatePoint": {
                "line": 282,
                "column": 32,
                "index": 8345
            },
            "line": 282,
            "code": "    it(\"should be its own target\", () => {\n      expect(getTargets({\n        chrome: \"46\",\n        electron: \"0.34\"\n      })).toEqual({\n        chrome: \"46.0.0\",\n        electron: \"0.34.0\"\n      });\n    });",
            "file": "targets-parser.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-compilation-targets/test"
        },
        {
            "name": "throws when version is not a semver",
            "suites": [
                "getTargets",
                "exception"
            ],
            "updatePoint": {
                "line": 293,
                "column": 43,
                "index": 8601
            },
            "line": 293,
            "code": "    it(\"throws when version is not a semver\", () => {\n      expect(() => getTargets({\n        chrome: \"seventy-two\"\n      })).toThrowErrorMatchingSnapshot();\n    });",
            "file": "targets-parser.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-compilation-targets/test"
        },
        {
            "name": "should import",
            "suites": [
                "@babel/helper-module-imports",
                "namespace import",
                "loading an ES6 module",
                "using Node's interop"
            ],
            "updatePoint": {
                "line": 51,
                "column": 25,
                "index": 1745
            },
            "line": 51,
            "code": "        it(\"should import\", () => {\n          testModule({\n            importingInterop,\n            importedType\n          }, addNamespace(), `\n              import * as _source from \"source\";\n              _source;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import with a name hint",
            "suites": [
                "@babel/helper-module-imports",
                "namespace import",
                "loading an ES6 module",
                "using Node's interop"
            ],
            "updatePoint": {
                "line": 60,
                "column": 42,
                "index": 2007
            },
            "line": 60,
            "code": "        it(\"should import with a name hint\", () => {\n          testModule({\n            importingInterop,\n            importedType\n          }, addNamespace({\n            nameHint: \"hintedName\"\n          }), `\n              import * as _hintedName from \"source\";\n              _hintedName;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import",
            "suites": [
                "@babel/helper-module-imports",
                "namespace import",
                "loading an ES6 module",
                "using Babel's interop"
            ],
            "updatePoint": {
                "line": 74,
                "column": 25,
                "index": 2408
            },
            "line": 74,
            "code": "        it(\"should import\", () => {\n          testModule({\n            importingInterop,\n            importedType\n          }, addNamespace(), `\n              import * as _source from \"source\";\n              _source;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import",
            "suites": [
                "@babel/helper-module-imports",
                "namespace import",
                "loading an ES6 module",
                "using a CommonJS loader"
            ],
            "updatePoint": {
                "line": 85,
                "column": 25,
                "index": 2713
            },
            "line": 85,
            "code": "        it(\"should import\", () => {\n          expect(() => {\n            testScript({\n              importedType\n            }, addNamespace());\n          }).toThrow(\"Cannot import an ES6 module from CommonJS\");\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import",
            "suites": [
                "@babel/helper-module-imports",
                "namespace import",
                "loading CommonJS with 'uncompiled'",
                "using Node's interop"
            ],
            "updatePoint": {
                "line": 98,
                "column": 25,
                "index": 3146
            },
            "line": 98,
            "code": "        it(\"should import\", () => {\n          testModule({\n            importingInterop,\n            importedInterop\n          }, addNamespace(), `\n              import _source from \"source\";\n              _source;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import",
            "suites": [
                "@babel/helper-module-imports",
                "namespace import",
                "loading CommonJS with 'uncompiled'",
                "using Babel's interop"
            ],
            "updatePoint": {
                "line": 110,
                "column": 25,
                "index": 3489
            },
            "line": 110,
            "code": "        it(\"should import\", () => {\n          testModule({\n            importingInterop,\n            importedInterop\n          }, addNamespace(), `\n              import _source from \"source\";\n              _source;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import",
            "suites": [
                "@babel/helper-module-imports",
                "namespace import",
                "loading CommonJS with 'uncompiled'",
                "using a CommonJS loader"
            ],
            "updatePoint": {
                "line": 121,
                "column": 25,
                "index": 3792
            },
            "line": 121,
            "code": "        it(\"should import\", () => {\n          testScript({\n            importedInterop\n          }, addNamespace(), `\n              var _source = require(\"source\");\n              _source;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import",
            "suites": [
                "@babel/helper-module-imports",
                "namespace import",
                "loading CommonJS with 'compiled'",
                "using Node's interop"
            ],
            "updatePoint": {
                "line": 135,
                "column": 25,
                "index": 4213
            },
            "line": 135,
            "code": "        it(\"should import\", () => {\n          testModule({\n            importingInterop,\n            importedInterop\n          }, addNamespace(), `\n              import _source from \"source\";\n              _source;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import",
            "suites": [
                "@babel/helper-module-imports",
                "namespace import",
                "loading CommonJS with 'compiled'",
                "using Babel's interop"
            ],
            "updatePoint": {
                "line": 147,
                "column": 25,
                "index": 4556
            },
            "line": 147,
            "code": "        it(\"should import\", () => {\n          testModule({\n            importingInterop,\n            importedInterop\n          }, addNamespace(), `\n              import * as _source from \"source\";\n              _source;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import",
            "suites": [
                "@babel/helper-module-imports",
                "namespace import",
                "loading CommonJS with 'compiled'",
                "using a CommonJS loader"
            ],
            "updatePoint": {
                "line": 158,
                "column": 25,
                "index": 4864
            },
            "line": 158,
            "code": "        it(\"should import\", () => {\n          testScript({\n            importedInterop\n          }, addNamespace(), `\n              var _source = require(\"source\");\n              _source;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import",
            "suites": [
                "@babel/helper-module-imports",
                "namespace import",
                "loading CommonJS with 'babel'",
                "using Node's interop"
            ],
            "updatePoint": {
                "line": 172,
                "column": 25,
                "index": 5279
            },
            "line": 172,
            "code": "        it(\"should import\", () => {\n          testModule({\n            importingInterop,\n            importedInterop\n          }, addNamespace(), `\n              import _source$es6Default from \"source\";\n              var _source = babelHelpers.interopRequireWildcard(_source$es6Default);\n              _source;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import",
            "suites": [
                "@babel/helper-module-imports",
                "namespace import",
                "loading CommonJS with 'babel'",
                "using Babel's interop"
            ],
            "updatePoint": {
                "line": 185,
                "column": 25,
                "index": 5718
            },
            "line": 185,
            "code": "        it(\"should import\", () => {\n          testModule({\n            importingInterop,\n            importedInterop\n          }, addNamespace(), `\n              import * as _source from \"source\";\n              _source;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import",
            "suites": [
                "@babel/helper-module-imports",
                "namespace import",
                "loading CommonJS with 'babel'",
                "using a CommonJS loader"
            ],
            "updatePoint": {
                "line": 196,
                "column": 25,
                "index": 6026
            },
            "line": 196,
            "code": "        it(\"should import\", () => {\n          testScript({\n            importedInterop\n          }, addNamespace(), `\n              var _source = babelHelpers.interopRequireWildcard(require(\"source\"));\n              _source;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import",
            "suites": [
                "@babel/helper-module-imports",
                "default imports",
                "loading an ES6 module",
                "using Node's interop"
            ],
            "updatePoint": {
                "line": 213,
                "column": 25,
                "index": 6575
            },
            "line": 213,
            "code": "        it(\"should import\", () => {\n          testModule({\n            importingInterop,\n            importedType\n          }, addDefault(), `\n              import _default from \"source\";\n              _default;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import with a name hint",
            "suites": [
                "@babel/helper-module-imports",
                "default imports",
                "loading an ES6 module",
                "using Node's interop"
            ],
            "updatePoint": {
                "line": 222,
                "column": 42,
                "index": 6832
            },
            "line": 222,
            "code": "        it(\"should import with a name hint\", () => {\n          testModule({\n            importingInterop,\n            importedType\n          }, addDefault({\n            nameHint: \"hintedName\"\n          }), `\n              import _hintedName from \"source\";\n              _hintedName;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import",
            "suites": [
                "@babel/helper-module-imports",
                "default imports",
                "loading an ES6 module",
                "using Babel's interop"
            ],
            "updatePoint": {
                "line": 236,
                "column": 25,
                "index": 7226
            },
            "line": 236,
            "code": "        it(\"should import\", () => {\n          testModule({\n            importingInterop,\n            importedType\n          }, addDefault(), `\n              import _default from \"source\";\n              _default;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import with a name hint",
            "suites": [
                "@babel/helper-module-imports",
                "default imports",
                "loading an ES6 module",
                "using Babel's interop"
            ],
            "updatePoint": {
                "line": 245,
                "column": 42,
                "index": 7483
            },
            "line": 245,
            "code": "        it(\"should import with a name hint\", () => {\n          testModule({\n            importingInterop,\n            importedType\n          }, addDefault({\n            nameHint: \"hintedName\"\n          }), `\n              import _hintedName from \"source\";\n              _hintedName;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import",
            "suites": [
                "@babel/helper-module-imports",
                "default imports",
                "loading an ES6 module",
                "using a CommonJS loader"
            ],
            "updatePoint": {
                "line": 258,
                "column": 25,
                "index": 7837
            },
            "line": 258,
            "code": "        it(\"should import\", () => {\n          expect(() => {\n            testScript({\n              importedType\n            }, addDefault());\n          }).toThrow(\"Cannot import an ES6 module from CommonJS\");\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import",
            "suites": [
                "@babel/helper-module-imports",
                "default imports",
                "loading CommonJS with 'uncompiled'",
                "using Node's interop"
            ],
            "updatePoint": {
                "line": 271,
                "column": 25,
                "index": 8268
            },
            "line": 271,
            "code": "        it(\"should import\", () => {\n          testModule({\n            importingInterop,\n            importedInterop\n          }, addDefault(), `\n              import _default from \"source\";\n              _default;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import with a name hint",
            "suites": [
                "@babel/helper-module-imports",
                "default imports",
                "loading CommonJS with 'uncompiled'",
                "using Node's interop"
            ],
            "updatePoint": {
                "line": 280,
                "column": 42,
                "index": 8528
            },
            "line": 280,
            "code": "        it(\"should import with a name hint\", () => {\n          testModule({\n            importingInterop,\n            importedInterop\n          }, addDefault({\n            nameHint: \"hintedName\"\n          }), `\n              import _hintedName from \"source\";\n              _hintedName;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import",
            "suites": [
                "@babel/helper-module-imports",
                "default imports",
                "loading CommonJS with 'uncompiled'",
                "using Babel's interop"
            ],
            "updatePoint": {
                "line": 294,
                "column": 25,
                "index": 8925
            },
            "line": 294,
            "code": "        it(\"should import\", () => {\n          testModule({\n            importingInterop,\n            importedInterop\n          }, addDefault(), `\n              import _default from \"source\";\n              _default;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import with a name hint",
            "suites": [
                "@babel/helper-module-imports",
                "default imports",
                "loading CommonJS with 'uncompiled'",
                "using Babel's interop"
            ],
            "updatePoint": {
                "line": 303,
                "column": 42,
                "index": 9185
            },
            "line": 303,
            "code": "        it(\"should import with a name hint\", () => {\n          testModule({\n            importingInterop,\n            importedInterop\n          }, addDefault({\n            nameHint: \"hintedName\"\n          }), `\n              import _hintedName from \"source\";\n              _hintedName;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import",
            "suites": [
                "@babel/helper-module-imports",
                "default imports",
                "loading CommonJS with 'uncompiled'",
                "using a CommonJS loader"
            ],
            "updatePoint": {
                "line": 316,
                "column": 25,
                "index": 9542
            },
            "line": 316,
            "code": "        it(\"should import\", () => {\n          testScript({\n            importedInterop\n          }, addDefault(), `\n              var _default = require(\"source\");\n              _default;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import with a name hint",
            "suites": [
                "@babel/helper-module-imports",
                "default imports",
                "loading CommonJS with 'uncompiled'",
                "using a CommonJS loader"
            ],
            "updatePoint": {
                "line": 324,
                "column": 42,
                "index": 9775
            },
            "line": 324,
            "code": "        it(\"should import with a name hint\", () => {\n          testScript({\n            importedInterop\n          }, addDefault({\n            nameHint: \"hintedName\"\n          }), `\n              var _hintedName = require(\"source\");\n              _hintedName;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should fail to import with force-enabled liveness",
            "suites": [
                "@babel/helper-module-imports",
                "default imports",
                "loading CommonJS with 'uncompiled'",
                "using a CommonJS loader"
            ],
            "updatePoint": {
                "line": 334,
                "column": 61,
                "index": 10081
            },
            "line": 334,
            "code": "        it(\"should fail to import with force-enabled liveness\", () => {\n          expect(() => {\n            testScript({\n              importedInterop,\n              ensureLiveReference: true\n            }, addDefault());\n          }).toThrow(\"No live reference for commonjs default\");\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import",
            "suites": [
                "@babel/helper-module-imports",
                "default imports",
                "loading CommonJS with 'compiled'",
                "using Node's interop"
            ],
            "updatePoint": {
                "line": 348,
                "column": 25,
                "index": 10549
            },
            "line": 348,
            "code": "        it(\"should import\", () => {\n          testModule({\n            importingInterop,\n            importedInterop\n          }, addDefault(), `\n              import _source from \"source\";\n              _source.default;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import with a force-disabled context",
            "suites": [
                "@babel/helper-module-imports",
                "default imports",
                "loading CommonJS with 'compiled'",
                "using Node's interop"
            ],
            "updatePoint": {
                "line": 357,
                "column": 55,
                "index": 10828
            },
            "line": 357,
            "code": "        it(\"should import with a force-disabled context\", () => {\n          testModule({\n            importingInterop,\n            importedInterop,\n            ensureNoContext: true\n          }, addDefault(), `\n              import _source from \"source\";\n              0, _source.default;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import",
            "suites": [
                "@babel/helper-module-imports",
                "default imports",
                "loading CommonJS with 'compiled'",
                "using Babel's interop"
            ],
            "updatePoint": {
                "line": 370,
                "column": 25,
                "index": 11215
            },
            "line": 370,
            "code": "        it(\"should import\", () => {\n          testModule({\n            importingInterop,\n            importedInterop\n          }, addDefault(), `\n              import _default from \"source\";\n              _default;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import with a name hint",
            "suites": [
                "@babel/helper-module-imports",
                "default imports",
                "loading CommonJS with 'compiled'",
                "using Babel's interop"
            ],
            "updatePoint": {
                "line": 379,
                "column": 42,
                "index": 11475
            },
            "line": 379,
            "code": "        it(\"should import with a name hint\", () => {\n          testModule({\n            importingInterop,\n            importedInterop\n          }, addDefault({\n            nameHint: \"hintedName\"\n          }), `\n              import _hintedName from \"source\";\n              _hintedName;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import",
            "suites": [
                "@babel/helper-module-imports",
                "default imports",
                "loading CommonJS with 'compiled'",
                "using a CommonJS loader"
            ],
            "updatePoint": {
                "line": 392,
                "column": 25,
                "index": 11832
            },
            "line": 392,
            "code": "        it(\"should import\", () => {\n          testScript({\n            importedInterop\n          }, addDefault(), `\n              var _default = require(\"source\").default;\n              _default;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import with a name hint",
            "suites": [
                "@babel/helper-module-imports",
                "default imports",
                "loading CommonJS with 'compiled'",
                "using a CommonJS loader"
            ],
            "updatePoint": {
                "line": 400,
                "column": 42,
                "index": 12073
            },
            "line": 400,
            "code": "        it(\"should import with a name hint\", () => {\n          testScript({\n            importedInterop\n          }, addDefault({\n            nameHint: \"hintedName\"\n          }), `\n              var _hintedName = require(\"source\").default;\n              _hintedName;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import with force-enabled liveness",
            "suites": [
                "@babel/helper-module-imports",
                "default imports",
                "loading CommonJS with 'compiled'",
                "using a CommonJS loader"
            ],
            "updatePoint": {
                "line": 410,
                "column": 53,
                "index": 12379
            },
            "line": 410,
            "code": "        it(\"should import with force-enabled liveness\", () => {\n          testScript({\n            importedInterop,\n            ensureLiveReference: true\n          }, addDefault(), `\n              var _source = require(\"source\");\n              _source.default;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import",
            "suites": [
                "@babel/helper-module-imports",
                "default imports",
                "loading CommonJS with 'babel'",
                "using Node's interop"
            ],
            "updatePoint": {
                "line": 425,
                "column": 25,
                "index": 12839
            },
            "line": 425,
            "code": "        it(\"should import\", () => {\n          testModule({\n            importingInterop,\n            importedInterop\n          }, addDefault(), `\n              import _source$es6Default from \"source\";\n              var _source = babelHelpers.interopRequireDefault(_source$es6Default).default;\n              _source;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import with a name hint",
            "suites": [
                "@babel/helper-module-imports",
                "default imports",
                "loading CommonJS with 'babel'",
                "using Node's interop"
            ],
            "updatePoint": {
                "line": 435,
                "column": 42,
                "index": 13200
            },
            "line": 435,
            "code": "        it(\"should import with a name hint\", () => {\n          testModule({\n            importingInterop,\n            importedInterop\n          }, addDefault({\n            nameHint: \"hintedName\"\n          }), `\n              import _source$es6Default from \"source\";\n              var _hintedName = babelHelpers.interopRequireDefault(_source$es6Default).default;\n              _hintedName;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import with force-enabled liveness",
            "suites": [
                "@babel/helper-module-imports",
                "default imports",
                "loading CommonJS with 'babel'",
                "using Node's interop"
            ],
            "updatePoint": {
                "line": 447,
                "column": 53,
                "index": 13628
            },
            "line": 447,
            "code": "        it(\"should import with force-enabled liveness\", () => {\n          testModule({\n            importingInterop,\n            importedInterop,\n            ensureLiveReference: true\n          }, addDefault(), `\n              import _source$es6Default from \"source\";\n              var _source = babelHelpers.interopRequireDefault(_source$es6Default);\n              _source.default;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import",
            "suites": [
                "@babel/helper-module-imports",
                "default imports",
                "loading CommonJS with 'babel'",
                "using Babel's interop"
            ],
            "updatePoint": {
                "line": 461,
                "column": 25,
                "index": 14111
            },
            "line": 461,
            "code": "        it(\"should import\", () => {\n          testModule({\n            importingInterop,\n            importedInterop\n          }, addDefault(), `\n              import _default from \"source\";\n              _default;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import with a name hint",
            "suites": [
                "@babel/helper-module-imports",
                "default imports",
                "loading CommonJS with 'babel'",
                "using Babel's interop"
            ],
            "updatePoint": {
                "line": 470,
                "column": 42,
                "index": 14371
            },
            "line": 470,
            "code": "        it(\"should import with a name hint\", () => {\n          testModule({\n            importingInterop,\n            importedInterop\n          }, addDefault({\n            nameHint: \"hintedName\"\n          }), `\n              import _hintedName from \"source\";\n              _hintedName;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import",
            "suites": [
                "@babel/helper-module-imports",
                "default imports",
                "loading CommonJS with 'babel'",
                "using a CommonJS loader"
            ],
            "updatePoint": {
                "line": 483,
                "column": 25,
                "index": 14728
            },
            "line": 483,
            "code": "        it(\"should import\", () => {\n          testScript({\n            importedInterop\n          }, addDefault(), `\n              var _default = babelHelpers.interopRequireDefault(require(\"source\")).default;\n              _default;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import with a name hint",
            "suites": [
                "@babel/helper-module-imports",
                "default imports",
                "loading CommonJS with 'babel'",
                "using a CommonJS loader"
            ],
            "updatePoint": {
                "line": 491,
                "column": 42,
                "index": 15005
            },
            "line": 491,
            "code": "        it(\"should import with a name hint\", () => {\n          testScript({\n            importedInterop\n          }, addDefault({\n            nameHint: \"hintedName\"\n          }), `\n              var _hintedName = babelHelpers.interopRequireDefault(require(\"source\")).default;\n              _hintedName;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import with force-enabled liveness",
            "suites": [
                "@babel/helper-module-imports",
                "default imports",
                "loading CommonJS with 'babel'",
                "using a CommonJS loader"
            ],
            "updatePoint": {
                "line": 501,
                "column": 53,
                "index": 15347
            },
            "line": 501,
            "code": "        it(\"should import with force-enabled liveness\", () => {\n          testScript({\n            importedInterop,\n            ensureLiveReference: true\n          }, addDefault(), `\n              var _source = babelHelpers.interopRequireDefault(require(\"source\"));\n              _source.default;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import",
            "suites": [
                "@babel/helper-module-imports",
                "named imports",
                "loading an ES6 module",
                "using Node's interop"
            ],
            "updatePoint": {
                "line": 519,
                "column": 25,
                "index": 15942
            },
            "line": 519,
            "code": "        it(\"should import\", () => {\n          testModule({\n            importingInterop,\n            importedType\n          }, addNamed(), `\n              import { read as _read } from \"source\";\n              _read;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import with a name hint",
            "suites": [
                "@babel/helper-module-imports",
                "named imports",
                "loading an ES6 module",
                "using Node's interop"
            ],
            "updatePoint": {
                "line": 528,
                "column": 42,
                "index": 16203
            },
            "line": 528,
            "code": "        it(\"should import with a name hint\", () => {\n          testModule({\n            importingInterop,\n            importedType\n          }, addNamed({\n            nameHint: \"hintedName\"\n          }), `\n              import { read as _hintedName } from \"source\";\n              _hintedName;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import",
            "suites": [
                "@babel/helper-module-imports",
                "named imports",
                "loading an ES6 module",
                "using Babel's interop"
            ],
            "updatePoint": {
                "line": 542,
                "column": 25,
                "index": 16607
            },
            "line": 542,
            "code": "        it(\"should import\", () => {\n          testModule({\n            importingInterop,\n            importedType\n          }, addNamed(), `\n              import { read as _read } from \"source\";\n              _read;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import with a name hint",
            "suites": [
                "@babel/helper-module-imports",
                "named imports",
                "loading an ES6 module",
                "using Babel's interop"
            ],
            "updatePoint": {
                "line": 551,
                "column": 42,
                "index": 16868
            },
            "line": 551,
            "code": "        it(\"should import with a name hint\", () => {\n          testModule({\n            importingInterop,\n            importedType\n          }, addNamed({\n            nameHint: \"hintedName\"\n          }), `\n              import { read as _hintedName } from \"source\";\n              _hintedName;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import",
            "suites": [
                "@babel/helper-module-imports",
                "named imports",
                "loading an ES6 module",
                "using a CommonJS loader"
            ],
            "updatePoint": {
                "line": 564,
                "column": 25,
                "index": 17232
            },
            "line": 564,
            "code": "        it(\"should import\", () => {\n          expect(() => {\n            testScript({\n              importedType\n            }, addNamed());\n          }).toThrow(\"Cannot import an ES6 module from CommonJS\");\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import",
            "suites": [
                "@babel/helper-module-imports",
                "named imports",
                "loading CommonJS with 'uncompiled'",
                "using Node's interop"
            ],
            "updatePoint": {
                "line": 577,
                "column": 25,
                "index": 17661
            },
            "line": 577,
            "code": "        it(\"should import\", () => {\n          testModule({\n            importingInterop,\n            importedInterop\n          }, addNamed(), `\n              import _source from \"source\";\n              _source.read;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import with a force-disabled context",
            "suites": [
                "@babel/helper-module-imports",
                "named imports",
                "loading CommonJS with 'uncompiled'",
                "using Node's interop"
            ],
            "updatePoint": {
                "line": 586,
                "column": 55,
                "index": 17935
            },
            "line": 586,
            "code": "        it(\"should import with a force-disabled context\", () => {\n          testModule({\n            importingInterop,\n            importedInterop,\n            ensureNoContext: true\n          }, addNamed(), `\n              import _source from \"source\";\n              0, _source.read;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import",
            "suites": [
                "@babel/helper-module-imports",
                "named imports",
                "loading CommonJS with 'uncompiled'",
                "using Babel's interop"
            ],
            "updatePoint": {
                "line": 599,
                "column": 25,
                "index": 18317
            },
            "line": 599,
            "code": "        it(\"should import\", () => {\n          testModule({\n            importingInterop,\n            importedInterop\n          }, addNamed(), `\n              import { read as _read } from \"source\";\n              _read;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import with a name hint",
            "suites": [
                "@babel/helper-module-imports",
                "named imports",
                "loading CommonJS with 'uncompiled'",
                "using Babel's interop"
            ],
            "updatePoint": {
                "line": 608,
                "column": 42,
                "index": 18581
            },
            "line": 608,
            "code": "        it(\"should import with a name hint\", () => {\n          testModule({\n            importingInterop,\n            importedInterop\n          }, addNamed({\n            nameHint: \"hintedName\"\n          }), `\n              import { read as _hintedName } from \"source\";\n              _hintedName;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import",
            "suites": [
                "@babel/helper-module-imports",
                "named imports",
                "loading CommonJS with 'uncompiled'",
                "using a CommonJS loader"
            ],
            "updatePoint": {
                "line": 621,
                "column": 25,
                "index": 18948
            },
            "line": 621,
            "code": "        it(\"should import\", () => {\n          testScript({\n            importedInterop\n          }, addNamed(), `\n              var _read = require(\"source\").read;\n              _read;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import with a name hint",
            "suites": [
                "@babel/helper-module-imports",
                "named imports",
                "loading CommonJS with 'uncompiled'",
                "using a CommonJS loader"
            ],
            "updatePoint": {
                "line": 629,
                "column": 42,
                "index": 19178
            },
            "line": 629,
            "code": "        it(\"should import with a name hint\", () => {\n          testScript({\n            importedInterop\n          }, addNamed({\n            nameHint: \"hintedName\"\n          }), `\n              var _hintedName = require(\"source\").read;\n              _hintedName;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import with force-enabled liveness",
            "suites": [
                "@babel/helper-module-imports",
                "named imports",
                "loading CommonJS with 'uncompiled'",
                "using a CommonJS loader"
            ],
            "updatePoint": {
                "line": 639,
                "column": 53,
                "index": 19479
            },
            "line": 639,
            "code": "        it(\"should import with force-enabled liveness\", () => {\n          testScript({\n            importedInterop,\n            ensureLiveReference: true\n          }, addNamed(), `\n              var _source = require(\"source\");\n              _source.read;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import",
            "suites": [
                "@babel/helper-module-imports",
                "named imports",
                "loading CommonJS with 'compiled'",
                "using Node's interop"
            ],
            "updatePoint": {
                "line": 654,
                "column": 25,
                "index": 19940
            },
            "line": 654,
            "code": "        it(\"should import\", () => {\n          testModule({\n            importingInterop,\n            importedInterop\n          }, addNamed(), `\n              import _source from \"source\";\n              _source.read;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import with a force-disabled context",
            "suites": [
                "@babel/helper-module-imports",
                "named imports",
                "loading CommonJS with 'compiled'",
                "using Node's interop"
            ],
            "updatePoint": {
                "line": 663,
                "column": 55,
                "index": 20214
            },
            "line": 663,
            "code": "        it(\"should import with a force-disabled context\", () => {\n          testModule({\n            importingInterop,\n            importedInterop,\n            ensureNoContext: true\n          }, addNamed(), `\n              import _source from \"source\";\n              0, _source.read;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import",
            "suites": [
                "@babel/helper-module-imports",
                "named imports",
                "loading CommonJS with 'compiled'",
                "using Babel's interop"
            ],
            "updatePoint": {
                "line": 676,
                "column": 25,
                "index": 20596
            },
            "line": 676,
            "code": "        it(\"should import\", () => {\n          testModule({\n            importingInterop,\n            importedInterop\n          }, addNamed(), `\n              import { read as _read } from \"source\";\n              _read;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import with a name hint",
            "suites": [
                "@babel/helper-module-imports",
                "named imports",
                "loading CommonJS with 'compiled'",
                "using Babel's interop"
            ],
            "updatePoint": {
                "line": 685,
                "column": 42,
                "index": 20860
            },
            "line": 685,
            "code": "        it(\"should import with a name hint\", () => {\n          testModule({\n            importingInterop,\n            importedInterop\n          }, addNamed({\n            nameHint: \"hintedName\"\n          }), `\n              import { read as _hintedName } from \"source\";\n              _hintedName;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import",
            "suites": [
                "@babel/helper-module-imports",
                "named imports",
                "loading CommonJS with 'compiled'",
                "using a CommonJS loader"
            ],
            "updatePoint": {
                "line": 698,
                "column": 25,
                "index": 21227
            },
            "line": 698,
            "code": "        it(\"should import\", () => {\n          testScript({\n            importedInterop\n          }, addNamed(), `\n              var _read = require(\"source\").read;\n              _read;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import with a name hint",
            "suites": [
                "@babel/helper-module-imports",
                "named imports",
                "loading CommonJS with 'compiled'",
                "using a CommonJS loader"
            ],
            "updatePoint": {
                "line": 706,
                "column": 42,
                "index": 21457
            },
            "line": 706,
            "code": "        it(\"should import with a name hint\", () => {\n          testScript({\n            importedInterop\n          }, addNamed({\n            nameHint: \"hintedName\"\n          }), `\n              var _hintedName = require(\"source\").read;\n              _hintedName;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import with force-enabled liveness",
            "suites": [
                "@babel/helper-module-imports",
                "named imports",
                "loading CommonJS with 'compiled'",
                "using a CommonJS loader"
            ],
            "updatePoint": {
                "line": 716,
                "column": 53,
                "index": 21758
            },
            "line": 716,
            "code": "        it(\"should import with force-enabled liveness\", () => {\n          testScript({\n            importedInterop,\n            ensureLiveReference: true\n          }, addNamed(), `\n              var _source = require(\"source\");\n              _source.read;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import",
            "suites": [
                "@babel/helper-module-imports",
                "named imports",
                "loading CommonJS with 'babel'",
                "using Node's interop"
            ],
            "updatePoint": {
                "line": 731,
                "column": 25,
                "index": 22213
            },
            "line": 731,
            "code": "        it(\"should import\", () => {\n          testModule({\n            importingInterop,\n            importedInterop\n          }, addNamed(), `\n              import _source$es6Default from \"source\";\n              _source$es6Default.read;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import",
            "suites": [
                "@babel/helper-module-imports",
                "named imports",
                "loading CommonJS with 'babel'",
                "using Babel's interop"
            ],
            "updatePoint": {
                "line": 743,
                "column": 25,
                "index": 22579
            },
            "line": 743,
            "code": "        it(\"should import\", () => {\n          testModule({\n            importingInterop,\n            importedInterop\n          }, addNamed(), `\n              import { read as _read } from \"source\";\n              _read;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import with a name hint",
            "suites": [
                "@babel/helper-module-imports",
                "named imports",
                "loading CommonJS with 'babel'",
                "using Babel's interop"
            ],
            "updatePoint": {
                "line": 752,
                "column": 42,
                "index": 22843
            },
            "line": 752,
            "code": "        it(\"should import with a name hint\", () => {\n          testModule({\n            importingInterop,\n            importedInterop\n          }, addNamed({\n            nameHint: \"hintedName\"\n          }), `\n              import { read as _hintedName } from \"source\";\n              _hintedName;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import",
            "suites": [
                "@babel/helper-module-imports",
                "named imports",
                "loading CommonJS with 'babel'",
                "using a CommonJS loader"
            ],
            "updatePoint": {
                "line": 765,
                "column": 25,
                "index": 23210
            },
            "line": 765,
            "code": "        it(\"should import\", () => {\n          testScript({\n            importedInterop\n          }, addNamed(), `\n              var _read = require(\"source\").read;\n              _read;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import with a name hint",
            "suites": [
                "@babel/helper-module-imports",
                "named imports",
                "loading CommonJS with 'babel'",
                "using a CommonJS loader"
            ],
            "updatePoint": {
                "line": 773,
                "column": 42,
                "index": 23440
            },
            "line": 773,
            "code": "        it(\"should import with a name hint\", () => {\n          testScript({\n            importedInterop\n          }, addNamed({\n            nameHint: \"hintedName\"\n          }), `\n              var _hintedName = require(\"source\").read;\n              _hintedName;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import with force-enabled liveness",
            "suites": [
                "@babel/helper-module-imports",
                "named imports",
                "loading CommonJS with 'babel'",
                "using a CommonJS loader"
            ],
            "updatePoint": {
                "line": 783,
                "column": 53,
                "index": 23741
            },
            "line": 783,
            "code": "        it(\"should import with force-enabled liveness\", () => {\n          testScript({\n            importedInterop,\n            ensureLiveReference: true\n          }, addNamed(), `\n              var _source = require(\"source\");\n              _source.read;\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import",
            "suites": [
                "@babel/helper-module-imports",
                "side-effectful imports",
                "loading an ES6 module",
                "using Node's interop"
            ],
            "updatePoint": {
                "line": 801,
                "column": 25,
                "index": 24306
            },
            "line": 801,
            "code": "        it(\"should import\", () => {\n          testModule({\n            importingInterop,\n            importedType\n          }, addSideEffect(), `\n              import \"source\";\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import",
            "suites": [
                "@babel/helper-module-imports",
                "side-effectful imports",
                "loading an ES6 module",
                "using Babel's interop"
            ],
            "updatePoint": {
                "line": 812,
                "column": 25,
                "index": 24611
            },
            "line": 812,
            "code": "        it(\"should import\", () => {\n          testModule({\n            importingInterop,\n            importedType\n          }, addSideEffect(), `\n              import \"source\";\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import",
            "suites": [
                "@babel/helper-module-imports",
                "side-effectful imports",
                "loading an ES6 module",
                "using a CommonJS loader"
            ],
            "updatePoint": {
                "line": 822,
                "column": 25,
                "index": 24876
            },
            "line": 822,
            "code": "        it(\"should import\", () => {\n          expect(() => {\n            testScript({\n              importedType\n            }, addSideEffect());\n          }).toThrow(\"Cannot import an ES6 module from CommonJS\");\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import",
            "suites": [
                "@babel/helper-module-imports",
                "side-effectful imports",
                "loading CommonJS with 'uncompiled'",
                "using Node's interop"
            ],
            "updatePoint": {
                "line": 835,
                "column": 25,
                "index": 25310
            },
            "line": 835,
            "code": "        it(\"should import\", () => {\n          testModule({\n            importingInterop,\n            importedInterop\n          }, addSideEffect(), `\n              import \"source\";\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import",
            "suites": [
                "@babel/helper-module-imports",
                "side-effectful imports",
                "loading CommonJS with 'uncompiled'",
                "using Babel's interop"
            ],
            "updatePoint": {
                "line": 846,
                "column": 25,
                "index": 25618
            },
            "line": 846,
            "code": "        it(\"should import\", () => {\n          testModule({\n            importingInterop,\n            importedInterop\n          }, addSideEffect(), `\n              import \"source\";\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import",
            "suites": [
                "@babel/helper-module-imports",
                "side-effectful imports",
                "loading CommonJS with 'uncompiled'",
                "using a CommonJS loader"
            ],
            "updatePoint": {
                "line": 856,
                "column": 25,
                "index": 25886
            },
            "line": 856,
            "code": "        it(\"should import\", () => {\n          testScript({\n            importedInterop\n          }, addSideEffect(), `\n              require(\"source\");\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import",
            "suites": [
                "@babel/helper-module-imports",
                "side-effectful imports",
                "loading CommonJS with 'compiled'",
                "using Node's interop"
            ],
            "updatePoint": {
                "line": 869,
                "column": 25,
                "index": 26271
            },
            "line": 869,
            "code": "        it(\"should import\", () => {\n          testModule({\n            importingInterop,\n            importedInterop\n          }, addSideEffect(), `\n              import \"source\";\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import",
            "suites": [
                "@babel/helper-module-imports",
                "side-effectful imports",
                "loading CommonJS with 'compiled'",
                "using Babel's interop"
            ],
            "updatePoint": {
                "line": 880,
                "column": 25,
                "index": 26579
            },
            "line": 880,
            "code": "        it(\"should import\", () => {\n          testModule({\n            importingInterop,\n            importedInterop\n          }, addSideEffect(), `\n              import \"source\";\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import",
            "suites": [
                "@babel/helper-module-imports",
                "side-effectful imports",
                "loading CommonJS with 'compiled'",
                "using a CommonJS loader"
            ],
            "updatePoint": {
                "line": 890,
                "column": 25,
                "index": 26847
            },
            "line": 890,
            "code": "        it(\"should import\", () => {\n          testScript({\n            importedInterop\n          }, addSideEffect(), `\n              require(\"source\");\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import",
            "suites": [
                "@babel/helper-module-imports",
                "side-effectful imports",
                "loading CommonJS with 'babel'",
                "using Node's interop"
            ],
            "updatePoint": {
                "line": 903,
                "column": 25,
                "index": 27226
            },
            "line": 903,
            "code": "        it(\"should import\", () => {\n          testModule({\n            importingInterop,\n            importedInterop\n          }, addSideEffect(), `\n              import \"source\";\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import",
            "suites": [
                "@babel/helper-module-imports",
                "side-effectful imports",
                "loading CommonJS with 'babel'",
                "using Babel's interop"
            ],
            "updatePoint": {
                "line": 914,
                "column": 25,
                "index": 27534
            },
            "line": 914,
            "code": "        it(\"should import\", () => {\n          testModule({\n            importingInterop,\n            importedInterop\n          }, addSideEffect(), `\n              import \"source\";\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "should import",
            "suites": [
                "@babel/helper-module-imports",
                "side-effectful imports",
                "loading CommonJS with 'babel'",
                "using a CommonJS loader"
            ],
            "updatePoint": {
                "line": 924,
                "column": 25,
                "index": 27802
            },
            "line": 924,
            "code": "        it(\"should import\", () => {\n          testScript({\n            importedInterop\n          }, addSideEffect(), `\n              require(\"source\");\n            `);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "works in ES modules",
            "suites": [
                "@babel/helper-module-imports",
                "importPosition: after"
            ],
            "updatePoint": {
                "line": 935,
                "column": 27,
                "index": 28052
            },
            "line": 935,
            "code": "    it(\"works in ES modules\", () => {\n      testModule({\n        importPosition: \"after\"\n      }, m => m.addNamed(\"read\", \"source\"), `\n          import f from \"foo\";\n          f();\n          import b from \"bar\";\n          b();\n        `, `\n          import f from \"foo\";\n          f();\n          import b from \"bar\";\n          import { read as _read } from \"source\";\n          b();\n          _read;\n        `);\n    });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "is disallowed in CJS modules",
            "suites": [
                "@babel/helper-module-imports",
                "importPosition: after"
            ],
            "updatePoint": {
                "line": 952,
                "column": 36,
                "index": 28480
            },
            "line": 952,
            "code": "    it(\"is disallowed in CJS modules\", () => {\n      expect(() => testScript({\n        importPosition: \"after\"\n      }, m => m.addNamed(\"read\", \"source\"))).toThrow(`\"importPosition\": \"after\" is only supported in modules`);\n    });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-module-imports/test"
        },
        {
            "name": "optimizeCallExpression should work when thisNode is implied from callee",
            "suites": [
                "@babel/helper-optimise-call-expression"
            ],
            "updatePoint": {
                "line": 13,
                "column": 79,
                "index": 816
            },
            "line": 13,
            "code": "  test(\"optimizeCallExpression should work when thisNode is implied from callee\", () => {\n    expect(transformInput(\"a.b(...arguments)\")).toMatchInlineSnapshot(`\"a.b.apply(a, arguments)\"`);\n    expect(transformInput(\"a[b](...arguments)\")).toMatchInlineSnapshot(`\"a[b].apply(a, arguments)\"`);\n    expect(transformInput(\"a.b?.(...arguments)\")).toMatchInlineSnapshot(`\"a.b?.apply(a, arguments)\"`);\n    expect(transformInput(\"a[b]?.(...arguments)\")).toMatchInlineSnapshot(`\"a[b]?.apply(a, arguments)\"`);\n    expect(transformInput(\"a.b(...args)\")).toMatchInlineSnapshot(`\"a.b.call(a, ...args)\"`);\n    expect(transformInput(\"a[b](...args)\")).toMatchInlineSnapshot(`\"a[b].call(a, ...args)\"`);\n    expect(transformInput(\"a.b?.(...args)\")).toMatchInlineSnapshot(`\"a.b?.call(a, ...args)\"`);\n    expect(transformInput(\"a[b]?.(...args)\")).toMatchInlineSnapshot(`\"a[b]?.call(a, ...args)\"`);\n    expect(transformInput(\"a.b(arg1, arg2)\")).toMatchInlineSnapshot(`\"a.b.call(a, arg1, arg2)\"`);\n    expect(transformInput(\"a[b](arg1, arg2)\")).toMatchInlineSnapshot(`\"a[b].call(a, arg1, arg2)\"`);\n    expect(transformInput(\"a.b?.(arg1, arg2)\")).toMatchInlineSnapshot(`\"a.b?.call(a, arg1, arg2)\"`);\n    expect(transformInput(\"a[b]?.(arg1, arg2)\")).toMatchInlineSnapshot(`\"a[b]?.call(a, arg1, arg2)\"`);\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-optimise-call-expression/test"
        },
        {
            "name": "optimizeCallExpression should work when thisNode is provided",
            "suites": [
                "@babel/helper-optimise-call-expression"
            ],
            "updatePoint": {
                "line": 27,
                "column": 68,
                "index": 2091
            },
            "line": 27,
            "code": "  test(\"optimizeCallExpression should work when thisNode is provided\", () => {\n    expect(transformInput(\"a.b(...arguments)\", \"c\")).toMatchInlineSnapshot(`\"a.b.apply(c, arguments)\"`);\n    expect(transformInput(\"a[b](...arguments)\", \"c\")).toMatchInlineSnapshot(`\"a[b].apply(c, arguments)\"`);\n    expect(transformInput(\"a.b?.(...arguments)\", \"c\")).toMatchInlineSnapshot(`\"a.b?.apply(c, arguments)\"`);\n    expect(transformInput(\"a[b]?.(...arguments)\", \"c\")).toMatchInlineSnapshot(`\"a[b]?.apply(c, arguments)\"`);\n    expect(transformInput(\"a.b(...args)\", \"c\")).toMatchInlineSnapshot(`\"a.b.call(c, ...args)\"`);\n    expect(transformInput(\"a[b](...args)\", \"c\")).toMatchInlineSnapshot(`\"a[b].call(c, ...args)\"`);\n    expect(transformInput(\"a.b?.(...args)\", \"c\")).toMatchInlineSnapshot(`\"a.b?.call(c, ...args)\"`);\n    expect(transformInput(\"a[b]?.(...args)\", \"c\")).toMatchInlineSnapshot(`\"a[b]?.call(c, ...args)\"`);\n    expect(transformInput(\"a.b(arg1, arg2)\", \"c\")).toMatchInlineSnapshot(`\"a.b.call(c, arg1, arg2)\"`);\n    expect(transformInput(\"a[b](arg1, arg2)\", \"c\")).toMatchInlineSnapshot(`\"a[b].call(c, arg1, arg2)\"`);\n    expect(transformInput(\"a.b?.(arg1, arg2)\", \"c\")).toMatchInlineSnapshot(`\"a.b?.call(c, arg1, arg2)\"`);\n    expect(transformInput(\"a[b]?.(arg1, arg2)\", \"c\")).toMatchInlineSnapshot(`\"a[b]?.call(c, arg1, arg2)\"`);\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-optimise-call-expression/test"
        },
        {
            "name": "should not execute code in Node's global context",
            "suites": [
                "helper-transform-fixture-test-runner"
            ],
            "updatePoint": {
                "line": 5,
                "column": 54,
                "index": 260
            },
            "line": 5,
            "code": "  it(\"should not execute code in Node's global context\", function () {\n    try {\n      global.foo = \"outer\";\n      runCodeInTestContext(`\n          expect(global.foo).toBeUndefined();\n          global.foo = \"inner\";\n        `, {\n        filename: `${filename}.fake1`\n      });\n      expect(global.foo).toBe(\"outer\");\n      runCodeInTestContext(`\n          expect(global.foo).toBe(\"inner\");\n        `, {\n        filename: `${filename}.fake2`\n      });\n    } finally {\n      delete global.foo;\n      runCodeInTestContext(`\n          delete global.foo;\n        `, {\n        filename: `${filename}.fake3`\n      });\n    }\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-transform-fixture-test-runner/test"
        },
        {
            "name": "should print correct trace position when error is thrown in the first line",
            "suites": [
                "helper-transform-fixture-test-runner"
            ],
            "updatePoint": {
                "line": 29,
                "column": 80,
                "index": 909
            },
            "line": 29,
            "code": "  it(\"should print correct trace position when error is thrown in the first line\", () => {\n    const opts = {\n      filename: `${filename}.fake4`\n    };\n    runCodeInTestContext(`try { throw new Error() } catch (e) {\n          opts.stack = e.stack\n        }\n      `, opts);\n    expect(opts.stack).toContain(opts.filename + \":1:13\");\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-helper-transform-fixture-test-runner/test"
        },
        {
            "name": "returns false if provided string is empty",
            "suites": [
                "isIdentifierName"
            ],
            "updatePoint": {
                "line": 3,
                "column": 47,
                "index": 143
            },
            "line": 3,
            "code": "  it(\"returns false if provided string is empty\", function () {\n    expect(isIdentifierName(\"\")).toBe(false);\n  });",
            "file": "identifier.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-validator-identifier/test"
        },
        {
            "name": "returns true if provided string %p is an IdentifierName",
            "suites": [
                "isIdentifierName"
            ],
            "line": 6,
            "code": "  it.each([\"hello\", \"$\", \"ゆゆ式\", \"$20\", \"hello20\", \"_\", \"if\", \"_\\u200c\", \"_\\u200d\"])(\"returns true if provided string %p is an IdentifierName\", function (word) {\n    expect(isIdentifierName(word)).toBe(true);\n  });",
            "file": "identifier.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-validator-identifier/test"
        },
        {
            "name": "returns false if provided string %p is not an IdentifierName",
            "suites": [
                "isIdentifierName"
            ],
            "line": 9,
            "code": "  it.each([\"+hello\", \"0$\", \"-ゆゆ式\", \"#_\", \"_#\", \"\\ud800\\ud800\"])(\"returns false if provided string %p is not an IdentifierName\", function (word) {\n    expect(isIdentifierName(word)).toBe(false);\n  });",
            "file": "identifier.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-validator-identifier/test"
        },
        {
            "name": "supports astral symbols",
            "suites": [
                "isIdentifierName"
            ],
            "updatePoint": {
                "line": 12,
                "column": 29,
                "index": 655
            },
            "line": 12,
            "code": "  it(\"supports astral symbols\", function () {\n    expect(isIdentifierName(\"x\\uDB40\\uDDD5\")).toBe(true);\n  });",
            "file": "identifier.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-validator-identifier/test"
        },
        {
            "name": "supports Unicode 15",
            "suites": [
                "isIdentifierName"
            ],
            "updatePoint": {
                "line": 15,
                "column": 25,
                "index": 761
            },
            "line": 15,
            "code": "  it(\"supports Unicode 15\", () => {\n    expect(isIdentifierName(\"\\u{1e030}\")).toBe(true);\n  });",
            "file": "identifier.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-validator-identifier/test"
        },
        {
            "name": "supports Unicode 14",
            "suites": [
                "isIdentifierName"
            ],
            "updatePoint": {
                "line": 18,
                "column": 25,
                "index": 857
            },
            "line": 18,
            "code": "  it(\"supports Unicode 14\", () => {\n    expect(isIdentifierName(\"\\u{10f70}\")).toBe(true);\n  });",
            "file": "identifier.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-validator-identifier/test"
        },
        {
            "name": "supports Unicode 13",
            "suites": [
                "isIdentifierName"
            ],
            "updatePoint": {
                "line": 21,
                "column": 25,
                "index": 953
            },
            "line": 21,
            "code": "  it(\"supports Unicode 13\", () => {\n    expect(isIdentifierName(\"\\u{30000}\")).toBe(true);\n  });",
            "file": "identifier.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-validator-identifier/test"
        },
        {
            "name": "supports Unicode 12",
            "suites": [
                "isIdentifierName"
            ],
            "updatePoint": {
                "line": 24,
                "column": 25,
                "index": 1049
            },
            "line": 24,
            "code": "  it(\"supports Unicode 12\", () => {\n    expect(isIdentifierName(\"\\u{10fe0}\")).toBe(true);\n  });",
            "file": "identifier.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-validator-identifier/test"
        },
        {
            "name": "supports Unicode 11",
            "suites": [
                "isIdentifierName"
            ],
            "updatePoint": {
                "line": 27,
                "column": 25,
                "index": 1145
            },
            "line": 27,
            "code": "  it(\"supports Unicode 11\", () => {\n    expect(isIdentifierName(\"\\u{10f00}\")).toBe(true);\n  });",
            "file": "identifier.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-validator-identifier/test"
        },
        {
            "name": "findSuggestion(%p, %p) returns %p",
            "suites": [
                "findSuggestion"
            ],
            "line": 3,
            "code": "  test.each([[\"cat\", [\"cow\", \"dog\", \"pig\"], \"cow\"], [\"uglifyjs\", [], undefined]])(\"findSuggestion(%p, %p) returns %p\", (str, arr, expected) => {\n    expect(findSuggestion(str, arr)).toBe(expected);\n  });",
            "file": "find-suggestion.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-validator-option/test"
        },
        {
            "name": "should throw when option key is not found",
            "suites": [
                "OptionValidator",
                "validateTopLevelOptions"
            ],
            "updatePoint": {
                "line": 8,
                "column": 49,
                "index": 274
            },
            "line": 8,
            "code": "    it(\"should throw when option key is not found\", () => {\n      expect(() => v.validateTopLevelOptions({\n        unknown: \"options\"\n      }, {\n        foo: \"foo\"\n      }, \"test\")).toThrow();\n    });",
            "file": "validator.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-validator-option/test"
        },
        {
            "name": "should throw when option key is an own property but not found",
            "suites": [
                "OptionValidator",
                "validateTopLevelOptions"
            ],
            "updatePoint": {
                "line": 15,
                "column": 69,
                "index": 495
            },
            "line": 15,
            "code": "    it(\"should throw when option key is an own property but not found\", () => {\n      expect(() => v.validateTopLevelOptions({\n        hasOwnProperty: \"foo\"\n      }, {\n        foo: \"foo\",\n        bar: \"bar\",\n        aLongPropertyKeyToSeeLevenPerformance: \"a\"\n      }, \"test\")).toThrow();\n    });",
            "file": "validator.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-validator-option/test"
        },
        {
            "name": "`undefined` option returns false",
            "suites": [
                "OptionValidator",
                "validateBooleanOption"
            ],
            "updatePoint": {
                "line": 30,
                "column": 40,
                "index": 903
            },
            "line": 30,
            "code": "    it(\"`undefined` option returns false\", () => {\n      expect(v.validateBooleanOption(\"test\", undefined, false)).toBe(false);\n    });",
            "file": "validator.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-validator-option/test"
        },
        {
            "name": "`false` option returns false",
            "suites": [
                "OptionValidator",
                "validateBooleanOption"
            ],
            "updatePoint": {
                "line": 33,
                "column": 36,
                "index": 1035
            },
            "line": 33,
            "code": "    it(\"`false` option returns false\", () => {\n      expect(v.validateBooleanOption(\"test\", false, false)).toBe(false);\n    });",
            "file": "validator.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-validator-option/test"
        },
        {
            "name": "`true` option returns true",
            "suites": [
                "OptionValidator",
                "validateBooleanOption"
            ],
            "updatePoint": {
                "line": 36,
                "column": 34,
                "index": 1161
            },
            "line": 36,
            "code": "    it(\"`true` option returns true\", () => {\n      expect(v.validateBooleanOption(\"test\", true, false)).toBe(true);\n    });",
            "file": "validator.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-validator-option/test"
        },
        {
            "name": "array option is invalid",
            "suites": [
                "OptionValidator",
                "validateBooleanOption"
            ],
            "updatePoint": {
                "line": 39,
                "column": 31,
                "index": 1282
            },
            "line": 39,
            "code": "    it(\"array option is invalid\", () => {\n      expect(() => {\n        v.validateBooleanOption(\"test\", [], false);\n      }).toThrow();\n    });",
            "file": "validator.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-validator-option/test"
        },
        {
            "name": "`undefined` option default",
            "suites": [
                "OptionValidator",
                "validateStringOption"
            ],
            "updatePoint": {
                "line": 50,
                "column": 34,
                "index": 1568
            },
            "line": 50,
            "code": "    it(\"`undefined` option default\", () => {\n      expect(v.validateStringOption(\"test\", undefined, \"default\")).toBe(\"default\");\n    });",
            "file": "validator.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-validator-option/test"
        },
        {
            "name": "`value` option returns value",
            "suites": [
                "OptionValidator",
                "validateStringOption"
            ],
            "updatePoint": {
                "line": 53,
                "column": 36,
                "index": 1707
            },
            "line": 53,
            "code": "    it(\"`value` option returns value\", () => {\n      expect(v.validateStringOption(\"test\", \"value\", \"default\")).toBe(\"value\");\n    });",
            "file": "validator.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-validator-option/test"
        },
        {
            "name": "no default returns undefined",
            "suites": [
                "OptionValidator",
                "validateStringOption"
            ],
            "updatePoint": {
                "line": 56,
                "column": 36,
                "index": 1842
            },
            "line": 56,
            "code": "    it(\"no default returns undefined\", () => {\n      expect(v.validateStringOption(\"test\", undefined)).toBe(undefined);\n    });",
            "file": "validator.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-validator-option/test"
        },
        {
            "name": "array option is invalid",
            "suites": [
                "OptionValidator",
                "validateStringOption"
            ],
            "updatePoint": {
                "line": 59,
                "column": 31,
                "index": 1965
            },
            "line": 59,
            "code": "    it(\"array option is invalid\", () => {\n      expect(() => {\n        v.validateStringOption(\"test\", [], \"default\");\n      }).toThrow();\n    });",
            "file": "validator.spec.js",
            "skipped": false,
            "dir": "packages/babel-helper-validator-option/test"
        },
        {
            "name": "highlights code",
            "suites": [
                "@babel/highlight",
                "highlight",
                "when colors are supported"
            ],
            "updatePoint": {
                "line": 29,
                "column": 25,
                "index": 1022
            },
            "line": 29,
            "code": "      it(\"highlights code\", function () {\n        const code = \"console.log('hi')\";\n        const result = highlight(code);\n        const stripped = stripAnsi(result);\n        expect(result.length).toBeGreaterThan(stripped.length);\n        expect(stripped).toBe(code);\n      });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-highlight/test"
        },
        {
            "name": "does not attempt to highlight code",
            "suites": [
                "@babel/highlight",
                "highlight",
                "when colors are not supported"
            ],
            "updatePoint": {
                "line": 39,
                "column": 44,
                "index": 1419
            },
            "line": 39,
            "code": "      it(\"does not attempt to highlight code\", function () {\n        const code = \"console.log('hi')\";\n        const result = highlight(code);\n        const stripped = stripAnsi(result);\n        expect(result.length).toBe(stripped.length);\n        expect(result).toBe(code);\n      });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-highlight/test"
        },
        {
            "name": "highlights the code anyway",
            "suites": [
                "@babel/highlight",
                "highlight",
                "when colors are not supported",
                "and the forceColor option is passed"
            ],
            "updatePoint": {
                "line": 47,
                "column": 38,
                "index": 1766
            },
            "line": 47,
            "code": "        it(\"highlights the code anyway\", function () {\n          const code = \"console.log('hi')\";\n          const result = highlight(code, {\n            forceColor: true\n          });\n          const stripped = stripAnsi(result);\n          expect(result.length).toBeGreaterThan(stripped.length);\n          expect(stripped).toBe(code);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-highlight/test"
        },
        {
            "name": "returns true",
            "suites": [
                "@babel/highlight",
                "shouldHighlight",
                "when colors are supported"
            ],
            "updatePoint": {
                "line": 62,
                "column": 22,
                "index": 2252
            },
            "line": 62,
            "code": "      it(\"returns true\", function () {\n        expect(shouldHighlight({})).toBeTruthy();\n      });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-highlight/test"
        },
        {
            "name": "returns false",
            "suites": [
                "@babel/highlight",
                "shouldHighlight",
                "when colors are not supported"
            ],
            "updatePoint": {
                "line": 68,
                "column": 23,
                "index": 2451
            },
            "line": 68,
            "code": "      it(\"returns false\", function () {\n        expect(shouldHighlight({})).toBeFalsy();\n      });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-highlight/test"
        },
        {
            "name": "returns true",
            "suites": [
                "@babel/highlight",
                "shouldHighlight",
                "when colors are not supported",
                "and the forceColor option is passed"
            ],
            "updatePoint": {
                "line": 72,
                "column": 24,
                "index": 2619
            },
            "line": 72,
            "code": "        it(\"returns true\", function () {\n          expect(shouldHighlight({\n            forceColor: true\n          })).toBeTruthy();\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-highlight/test"
        },
        {
            "name": "returns a Chalk instance",
            "suites": [
                "@babel/highlight",
                "getChalk",
                "when colors are supported",
                "when forceColor is not passed"
            ],
            "updatePoint": {
                "line": 84,
                "column": 36,
                "index": 2985
            },
            "line": 84,
            "code": "        it(\"returns a Chalk instance\", function () {\n          expect(getChalk({}).constructor).toBe(chalk.constructor);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-highlight/test"
        },
        {
            "name": "returns a Chalk instance",
            "suites": [
                "@babel/highlight",
                "getChalk",
                "when colors are supported",
                "when forceColor is passed"
            ],
            "updatePoint": {
                "line": 89,
                "column": 36,
                "index": 3186
            },
            "line": 89,
            "code": "        it(\"returns a Chalk instance\", function () {\n          expect(getChalk({\n            forceColor: true\n          }).constructor).toBe(chalk.constructor);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-highlight/test"
        },
        {
            "name": "returns a Chalk instance",
            "suites": [
                "@babel/highlight",
                "getChalk",
                "when colors are not supported",
                "when forceColor is not passed"
            ],
            "updatePoint": {
                "line": 99,
                "column": 36,
                "index": 3530
            },
            "line": 99,
            "code": "        it(\"returns a Chalk instance\", function () {\n          expect(getChalk({}).constructor).toBe(chalk.constructor);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-highlight/test"
        },
        {
            "name": "returns a Chalk instance",
            "suites": [
                "@babel/highlight",
                "getChalk",
                "when colors are not supported",
                "when forceColor is passed"
            ],
            "updatePoint": {
                "line": 104,
                "column": 36,
                "index": 3731
            },
            "line": 104,
            "code": "        it(\"returns a Chalk instance\", function () {\n          expect(getChalk({\n            forceColor: true\n          }).constructor).toBe(chalk.constructor);\n        });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-highlight/test"
        },
        {
            "name": "raises an error with BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED and reasonCode",
            "suites": [
                "error codes"
            ],
            "updatePoint": {
                "line": 3,
                "column": 81,
                "index": 161
            },
            "line": 3,
            "code": "  it(\"raises an error with BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED and reasonCode\", function () {\n    const code = `import \"foo\"`;\n    const {\n      errors\n    } = parse(code, {\n      errorRecovery: true,\n      sourceType: \"script\"\n    });\n    const error = errors[0];\n    expect(error.code).toBe(\"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\");\n    expect(error.reasonCode).toBe(\"ImportOutsideModule\");\n  });",
            "file": "error-codes.js",
            "skipped": false,
            "dir": "packages/babel-parser/test"
        },
        {
            "name": "raises an error with BABEL_PARSER_SYNTAX_ERROR and reasonCode",
            "suites": [
                "error codes"
            ],
            "updatePoint": {
                "line": 15,
                "column": 67,
                "index": 552
            },
            "line": 15,
            "code": "  it(\"raises an error with BABEL_PARSER_SYNTAX_ERROR and reasonCode\", function () {\n    const code = `a b`;\n    const {\n      errors\n    } = parse(code, {\n      errorRecovery: true\n    });\n    const error = errors[0];\n    expect(error.code).toBe(\"BABEL_PARSER_SYNTAX_ERROR\");\n    expect(error.reasonCode).toBe(\"MissingSemicolon\");\n  });",
            "file": "error-codes.js",
            "skipped": false,
            "dir": "packages/babel-parser/test"
        },
        {
            "name": "consistent reasonCode between Flow and TypeScript in Babel 8",
            "suites": [
                "error codes"
            ],
            "updatePoint": {
                "line": 26,
                "column": 66,
                "index": 888
            },
            "line": 26,
            "code": "  it(\"consistent reasonCode between Flow and TypeScript in Babel 8\", () => {\n    const code = `function f([]?) {}`;\n    const {\n      errors: [tsError]\n    } = parse(code, {\n      errorRecovery: true,\n      plugins: [\"typescript\"]\n    });\n    const {\n      errors: [flowError]\n    } = parse(code, {\n      errorRecovery: true,\n      plugins: [\"flow\"]\n    });\n    expect(flowError.reasonCode).toBe(process.env.BABEL_8_BREAKING ? tsError.reasonCode : \"OptionalBindingPattern\");\n    expect(flowError.message).toBe(tsError.message);\n  });",
            "file": "error-codes.js",
            "skipped": false,
            "dir": "packages/babel-parser/test"
        },
        {
            "name": "div",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 83,
                "index": 84
            },
            "line": null,
            "code": "",
            "file": "fixtures/jsx/regression/2/input.js",
            "skipped": false,
            "dir": "packages/babel-parser/test"
        },
        {
            "name": "default parses as strict mode",
            "suites": [
                "options",
                "strictMode",
                "sourceType module"
            ],
            "updatePoint": {
                "line": 32,
                "column": 39,
                "index": 885
            },
            "line": 32,
            "code": "      it(\"default parses as strict mode\", () => {\n        expectToFail({\n          sourceType: \"module\"\n        });\n      });",
            "file": "options.js",
            "skipped": false,
            "dir": "packages/babel-parser/test"
        },
        {
            "name": "false parses as sloppy mode",
            "suites": [
                "options",
                "strictMode",
                "sourceType module"
            ],
            "updatePoint": {
                "line": 37,
                "column": 37,
                "index": 1009
            },
            "line": 37,
            "code": "      it(\"false parses as sloppy mode\", () => {\n        expectToSucceed({\n          sourceType: \"module\",\n          strictMode: false\n        });\n      });",
            "file": "options.js",
            "skipped": false,
            "dir": "packages/babel-parser/test"
        },
        {
            "name": "true parses as strict mode",
            "suites": [
                "options",
                "strictMode",
                "sourceType module"
            ],
            "updatePoint": {
                "line": 43,
                "column": 36,
                "index": 1164
            },
            "line": 43,
            "code": "      it(\"true parses as strict mode\", () => {\n        expectToFail({\n          sourceType: \"module\",\n          strictMode: true\n        });\n      });",
            "file": "options.js",
            "skipped": false,
            "dir": "packages/babel-parser/test"
        },
        {
            "name": "default parses as sloppy mode",
            "suites": [
                "options",
                "strictMode",
                "sourceType script"
            ],
            "updatePoint": {
                "line": 51,
                "column": 39,
                "index": 1368
            },
            "line": 51,
            "code": "      it(\"default parses as sloppy mode\", () => {\n        expectToSucceed({\n          sourceType: \"script\"\n        });\n      });",
            "file": "options.js",
            "skipped": false,
            "dir": "packages/babel-parser/test"
        },
        {
            "name": "false parses as sloppy mode",
            "suites": [
                "options",
                "strictMode",
                "sourceType script"
            ],
            "updatePoint": {
                "line": 56,
                "column": 37,
                "index": 1495
            },
            "line": 56,
            "code": "      it(\"false parses as sloppy mode\", () => {\n        expectToSucceed({\n          sourceType: \"script\",\n          strictMode: false\n        });\n      });",
            "file": "options.js",
            "skipped": false,
            "dir": "packages/babel-parser/test"
        },
        {
            "name": "true parses as strict mode",
            "suites": [
                "options",
                "strictMode",
                "sourceType script"
            ],
            "updatePoint": {
                "line": 62,
                "column": 36,
                "index": 1650
            },
            "line": 62,
            "code": "      it(\"true parses as strict mode\", () => {\n        expectToFail({\n          sourceType: \"script\",\n          strictMode: true\n        });\n      });",
            "file": "options.js",
            "skipped": false,
            "dir": "packages/babel-parser/test"
        },
        {
            "name": "when they aren't specified",
            "suites": [
                "plugin options",
                "the first options are used"
            ],
            "updatePoint": {
                "line": 13,
                "column": 34,
                "index": 394
            },
            "line": 13,
            "code": "    it(\"when they aren't specified\", function () {\n      const WITHOUT_FLAG = \"flow\";\n      const WITH_FLAG = [\"flow\", {\n        all: true\n      }];\n      const CODE = \"new Foo<x>(y)\";\n      const AST_WITHOUT_FLAG = {\n        type: \"BinaryExpression\",\n        operator: \">\",\n        left: {\n          type: \"BinaryExpression\",\n          operator: \"<\",\n          left: {\n            type: \"NewExpression\"\n          },\n          right: {\n            type: \"Identifier\"\n          }\n        },\n        right: {\n          type: \"Identifier\",\n          extra: {\n            parenthesized: true\n          }\n        }\n      };\n      const AST_WITH_FLAG = {\n        type: \"NewExpression\",\n        callee: {\n          type: \"Identifier\"\n        },\n        arguments: [{\n          type: \"Identifier\"\n        }],\n        typeArguments: {\n          type: \"TypeParameterInstantiation\",\n          params: [{\n            type: \"GenericTypeAnnotation\",\n            id: {\n              type: \"Identifier\"\n            }\n          }]\n        }\n      };\n      expect(getParser(CODE, [WITHOUT_FLAG, WITH_FLAG])().program.body[0].expression).toMatchObject(AST_WITHOUT_FLAG);\n      expect(getParser(CODE, [WITHOUT_FLAG])().program.body[0].expression).toMatchObject(AST_WITHOUT_FLAG);\n      expect(getParser(CODE, [WITH_FLAG])().program.body[0].expression).toMatchObject(AST_WITH_FLAG);\n    });",
            "file": "plugin-options.js",
            "skipped": false,
            "dir": "packages/babel-parser/test"
        },
        {
            "name": "when they are specified",
            "suites": [
                "plugin options",
                "the first options are used"
            ],
            "updatePoint": {
                "line": 61,
                "column": 31,
                "index": 1761
            },
            "line": 61,
            "code": "    it(\"when they are specified\", function () {\n      const NAME = \"decorators\";\n      const OPT_1 = [NAME, {\n        decoratorsBeforeExport: true\n      }];\n      const OPT_2 = [NAME, {\n        decoratorsBeforeExport: false\n      }];\n      const SYNTAX_1 = \"@dec export class C {}\";\n      const SYNTAX_2 = \"export @dec class C {}\";\n      expect(getParser(SYNTAX_1, [OPT_1, OPT_2])).not.toThrow();\n      expect(getParser(SYNTAX_2, [OPT_2, OPT_1])).not.toThrow();\n      expect(getParser(SYNTAX_1, [OPT_2, OPT_1])).toThrow();\n      expect(getParser(SYNTAX_2, [OPT_1, OPT_2])).toThrow();\n    });",
            "file": "plugin-options.js",
            "skipped": false,
            "dir": "packages/babel-parser/test"
        },
        {
            "name": "should check if the binOp for relational === in",
            "suites": [
                "token types"
            ],
            "updatePoint": {
                "line": 3,
                "column": 53,
                "index": 165
            },
            "line": 3,
            "code": "  it(\"should check if the binOp for relational === in\", () => {\n    expect(tokenOperatorPrecedence(tt.relational)).toEqual(tokenOperatorPrecedence(tt._in));\n  });",
            "file": "unit/tokenizer/types.skip-bundled.js",
            "skipped": false,
            "dir": "packages/babel-parser/test"
        },
        {
            "name": "should check if the binOp for relational === instanceOf",
            "suites": [
                "token types"
            ],
            "updatePoint": {
                "line": 6,
                "column": 61,
                "index": 336
            },
            "line": 6,
            "code": "  it(\"should check if the binOp for relational === instanceOf\", () => {\n    expect(tokenOperatorPrecedence(tt.relational)).toEqual(tokenOperatorPrecedence(tt._instanceof));\n  });",
            "file": "unit/tokenizer/types.skip-bundled.js",
            "skipped": false,
            "dir": "packages/babel-parser/test"
        },
        {
            "name": "should check if the binOp for in === instanceOf",
            "suites": [
                "token types"
            ],
            "updatePoint": {
                "line": 9,
                "column": 53,
                "index": 507
            },
            "line": 9,
            "code": "  it(\"should check if the binOp for in === instanceOf\", () => {\n    expect(tokenOperatorPrecedence(tt._in)).toEqual(tokenOperatorPrecedence(tt._instanceof));\n  });",
            "file": "unit/tokenizer/types.skip-bundled.js",
            "skipped": false,
            "dir": "packages/babel-parser/test"
        },
        {
            "name": "break is a keyword",
            "suites": [
                "identifier",
                "isKeyword"
            ],
            "updatePoint": {
                "line": 4,
                "column": 26,
                "index": 178
            },
            "line": 4,
            "code": "    it(\"break is a keyword\", () => {\n      expect(isKeyword(\"break\")).toBe(true);\n    });",
            "file": "unit/util/identifier.skip-bundled.js",
            "skipped": false,
            "dir": "packages/babel-parser/test"
        },
        {
            "name": "const is a keyword",
            "suites": [
                "identifier",
                "isKeyword"
            ],
            "updatePoint": {
                "line": 7,
                "column": 26,
                "index": 268
            },
            "line": 7,
            "code": "    it(\"const is a keyword\", () => {\n      expect(isKeyword(\"const\")).toBe(true);\n    });",
            "file": "unit/util/identifier.skip-bundled.js",
            "skipped": false,
            "dir": "packages/babel-parser/test"
        },
        {
            "name": "super is a keyword",
            "suites": [
                "identifier",
                "isKeyword"
            ],
            "updatePoint": {
                "line": 10,
                "column": 26,
                "index": 358
            },
            "line": 10,
            "code": "    it(\"super is a keyword\", () => {\n      expect(isKeyword(\"super\")).toBe(true);\n    });",
            "file": "unit/util/identifier.skip-bundled.js",
            "skipped": false,
            "dir": "packages/babel-parser/test"
        },
        {
            "name": "let is not a keyword",
            "suites": [
                "identifier",
                "isKeyword"
            ],
            "updatePoint": {
                "line": 13,
                "column": 28,
                "index": 450
            },
            "line": 13,
            "code": "    it(\"let is not a keyword\", () => {\n      expect(isKeyword(\"let\")).toBe(false);\n    });",
            "file": "unit/util/identifier.skip-bundled.js",
            "skipped": false,
            "dir": "packages/babel-parser/test"
        },
        {
            "name": "abc is not a keyword",
            "suites": [
                "identifier",
                "isKeyword"
            ],
            "updatePoint": {
                "line": 16,
                "column": 28,
                "index": 541
            },
            "line": 16,
            "code": "    it(\"abc is not a keyword\", () => {\n      expect(isKeyword(\"abc\")).toBe(false);\n    });",
            "file": "unit/util/identifier.skip-bundled.js",
            "skipped": false,
            "dir": "packages/babel-parser/test"
        },
        {
            "name": "in is true",
            "suites": [
                "identifier",
                "keywordRelationalOperator"
            ],
            "updatePoint": {
                "line": 21,
                "column": 18,
                "index": 676
            },
            "line": 21,
            "code": "    it(\"in is true\", () => {\n      expect(keywordRelationalOperator.test(\"in\")).toBe(true);\n    });",
            "file": "unit/util/identifier.skip-bundled.js",
            "skipped": false,
            "dir": "packages/babel-parser/test"
        },
        {
            "name": "instanceof is true",
            "suites": [
                "identifier",
                "keywordRelationalOperator"
            ],
            "updatePoint": {
                "line": 24,
                "column": 26,
                "index": 784
            },
            "line": 24,
            "code": "    it(\"instanceof is true\", () => {\n      expect(keywordRelationalOperator.test(\"instanceof\")).toBe(true);\n    });",
            "file": "unit/util/identifier.skip-bundled.js",
            "skipped": false,
            "dir": "packages/babel-parser/test"
        },
        {
            "name": "stanceof is false",
            "suites": [
                "identifier",
                "keywordRelationalOperator"
            ],
            "updatePoint": {
                "line": 27,
                "column": 25,
                "index": 899
            },
            "line": 27,
            "code": "    it(\"stanceof is false\", () => {\n      expect(keywordRelationalOperator.test(\"stanceof\")).toBe(false);\n    });",
            "file": "unit/util/identifier.skip-bundled.js",
            "skipped": false,
            "dir": "packages/babel-parser/test"
        },
        {
            "name": "instance is false",
            "suites": [
                "identifier",
                "keywordRelationalOperator"
            ],
            "updatePoint": {
                "line": 30,
                "column": 25,
                "index": 1013
            },
            "line": 30,
            "code": "    it(\"instance is false\", () => {\n      expect(keywordRelationalOperator.test(\"instance\")).toBe(false);\n    });",
            "file": "unit/util/identifier.skip-bundled.js",
            "skipped": false,
            "dir": "packages/babel-parser/test"
        },
        {
            "name": "abc is false",
            "suites": [
                "identifier",
                "keywordRelationalOperator"
            ],
            "updatePoint": {
                "line": 33,
                "column": 20,
                "index": 1122
            },
            "line": 33,
            "code": "    it(\"abc is false\", () => {\n      expect(keywordRelationalOperator.test(\"abc\")).toBe(false);\n    });",
            "file": "unit/util/identifier.skip-bundled.js",
            "skipped": false,
            "dir": "packages/babel-parser/test"
        },
        {
            "name": "%p",
            "suites": [
                "shouldTransform",
                "the following cases should be transformed"
            ],
            "line": 21,
            "code": "    test.each(positiveCases)(\"%p\", input => {\n      expect(shouldTransform(getPath(input))).toBe(\"a\");\n    });",
            "file": "util.skip-bundled.js",
            "skipped": false,
            "dir": "packages/babel-plugin-bugfix-safari-id-destructuring-collision-in-function-expression/test"
        },
        {
            "name": "%p",
            "suites": [
                "shouldTransform",
                "the following cases should not be transformed"
            ],
            "line": 26,
            "code": "    test.each(negativeCases)(\"%p\", input => {\n      expect(shouldTransform(getPath(input))).toBe(false);\n    });",
            "file": "util.skip-bundled.js",
            "skipped": false,
            "dir": "packages/babel-plugin-bugfix-safari-id-destructuring-collision-in-function-expression/test"
        },
        {
            "name": "shouldTransform(a?.b in %p) should return true",
            "suites": [
                "shouldTransform",
                "default parser options"
            ],
            "line": 32,
            "code": "    test.each(positiveCases)(\"shouldTransform(a?.b in %p) should return true\", input => {\n      expect(shouldTransform(getPath(input))).toBe(true);\n    });",
            "file": "util.skip-bundled.js",
            "skipped": false,
            "dir": "packages/babel-plugin-bugfix-v8-spread-parameters-in-optional-chaining/test"
        },
        {
            "name": "shouldTransform(a?.b in %p) should return false",
            "suites": [
                "shouldTransform",
                "default parser options"
            ],
            "line": 35,
            "code": "    test.each(negativeCases)(\"shouldTransform(a?.b in %p) should return false\", input => {\n      expect(shouldTransform(getPath(input))).toBe(false);\n    });",
            "file": "util.skip-bundled.js",
            "skipped": false,
            "dir": "packages/babel-plugin-bugfix-v8-spread-parameters-in-optional-chaining/test"
        },
        {
            "name": "shouldTransform(a?.b in %p with { createParenthesizedExpressions: true }) should return true",
            "suites": [
                "shouldTransform",
                "createParenthesizedExpressions"
            ],
            "line": 40,
            "code": "    test.each(positiveCases)(\"shouldTransform(a?.b in %p with { createParenthesizedExpressions: true }) should return true\", input => {\n      const parserOpts = {\n        createParenthesizedExpressions: true\n      };\n      expect(shouldTransform(getPath(input, parserOpts))).toBe(true);\n    });",
            "file": "util.skip-bundled.js",
            "skipped": false,
            "dir": "packages/babel-plugin-bugfix-v8-spread-parameters-in-optional-chaining/test"
        },
        {
            "name": "shouldTransform(a?.b in %p with { createParenthesizedExpressions: true }) should return false",
            "suites": [
                "shouldTransform",
                "createParenthesizedExpressions"
            ],
            "line": 46,
            "code": "    test.each(negativeCases)(\"shouldTransform(a?.b in %p with { createParenthesizedExpressions: true }) should return false\", input => {\n      const parserOpts = {\n        createParenthesizedExpressions: true\n      };\n      expect(shouldTransform(getPath(input, parserOpts))).toBe(false);\n    });",
            "file": "util.skip-bundled.js",
            "skipped": false,
            "dir": "packages/babel-plugin-bugfix-v8-spread-parameters-in-optional-chaining/test"
        },
        {
            "name": "shouldTransform(a?.b in %p with { plugins: [typescript] }) should return true",
            "suites": [
                "shouldTransform",
                "plugins: [typescript]"
            ],
            "line": 54,
            "code": "    test.each(positiveCases.concat(typescriptPositiveCases))(\"shouldTransform(a?.b in %p with { plugins: [typescript] }) should return true\", input => {\n      const parserOpts = {\n        plugins: [\"typescript\"]\n      };\n      expect(shouldTransform(getPath(input, parserOpts))).toBe(true);\n    });",
            "file": "util.skip-bundled.js",
            "skipped": false,
            "dir": "packages/babel-plugin-bugfix-v8-spread-parameters-in-optional-chaining/test"
        },
        {
            "name": "shouldTransform(a?.b in %p with { plugins: [typescript] }) should return false",
            "suites": [
                "shouldTransform",
                "plugins: [typescript]"
            ],
            "line": 60,
            "code": "    test.each(negativeCases.concat(typescriptNegativeCases))(\"shouldTransform(a?.b in %p with { plugins: [typescript] }) should return false\", input => {\n      const parserOpts = {\n        plugins: [\"typescript\"]\n      };\n      expect(shouldTransform(getPath(input, parserOpts))).toBe(false);\n    });",
            "file": "util.skip-bundled.js",
            "skipped": false,
            "dir": "packages/babel-plugin-bugfix-v8-spread-parameters-in-optional-chaining/test"
        },
        {
            "name": "foo",
            "suites": [],
            "updatePoint": {
                "line": 11,
                "column": 9,
                "index": 176
            },
            "line": 11,
            "code": "test('foo');",
            "file": "fixtures/assumption-setPublicClassFields/instance-computed/exec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-proposal-class-properties/test"
        },
        {
            "name": "foo",
            "suites": [],
            "updatePoint": {
                "line": 11,
                "column": 9,
                "index": 176
            },
            "line": 11,
            "code": "test('foo');",
            "file": "fixtures/assumption-setPublicClassFields/instance-computed/input.js",
            "skipped": false,
            "dir": "packages/babel-plugin-proposal-class-properties/test"
        },
        {
            "name": "foo",
            "suites": [],
            "updatePoint": {
                "line": 14,
                "column": 9,
                "index": 208
            },
            "line": 14,
            "code": "test('foo');",
            "file": "fixtures/assumption-setPublicClassFields/instance-computed/output.js",
            "skipped": false,
            "dir": "packages/babel-plugin-proposal-class-properties/test"
        },
        {
            "name": "foo",
            "suites": [],
            "updatePoint": {
                "line": 11,
                "column": 9,
                "index": 176
            },
            "line": 11,
            "code": "test('foo');",
            "file": "fixtures/public-loose/instance-computed/exec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-proposal-class-properties/test"
        },
        {
            "name": "foo",
            "suites": [],
            "updatePoint": {
                "line": 11,
                "column": 9,
                "index": 176
            },
            "line": 11,
            "code": "test('foo');",
            "file": "fixtures/public-loose/instance-computed/input.js",
            "skipped": false,
            "dir": "packages/babel-plugin-proposal-class-properties/test"
        },
        {
            "name": "foo",
            "suites": [],
            "updatePoint": {
                "line": 15,
                "column": 9,
                "index": 294
            },
            "line": 15,
            "code": "test('foo');",
            "file": "fixtures/public-loose/instance-computed/output.js",
            "skipped": false,
            "dir": "packages/babel-plugin-proposal-class-properties/test"
        },
        {
            "name": "foo",
            "suites": [],
            "updatePoint": {
                "line": 11,
                "column": 9,
                "index": 176
            },
            "line": 11,
            "code": "test('foo');",
            "file": "fixtures/public/instance-computed/exec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-proposal-class-properties/test"
        },
        {
            "name": "foo",
            "suites": [],
            "updatePoint": {
                "line": 11,
                "column": 9,
                "index": 176
            },
            "line": 11,
            "code": "test('foo');",
            "file": "fixtures/public/instance-computed/input.js",
            "skipped": false,
            "dir": "packages/babel-plugin-proposal-class-properties/test"
        },
        {
            "name": "foo",
            "suites": [],
            "updatePoint": {
                "line": 15,
                "column": 9,
                "index": 322
            },
            "line": 15,
            "code": "test('foo');",
            "file": "fixtures/public/instance-computed/output.js",
            "skipped": false,
            "dir": "packages/babel-plugin-proposal-class-properties/test"
        },
        {
            "name": "should work when @babel/plugin-proposal-class-static-block is after class features plugin",
            "suites": [
                "plugin ordering"
            ],
            "updatePoint": {
                "line": 5,
                "column": 95,
                "index": 305
            },
            "line": 5,
            "code": "  it(\"should work when @babel/plugin-proposal-class-static-block is after class features plugin\", () => {\n    const source = `class Foo {\n      static {\n        this.foo = Foo.bar;\n      }\n      static bar = 42;\n    }\n    `;\n    expect(babel.transformSync(source, {\n      filename: \"example.js\",\n      highlightCode: false,\n      configFile: false,\n      babelrc: false,\n      plugins: [proposalClassProperties, proposalClassStaticBlock]\n    }).code).toMatchInlineSnapshot(`\n      \"function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n      function _toPropertyKey(arg) { var key = _toPrimitive(arg, \\\\\"string\\\\\"); return typeof key === \\\\\"symbol\\\\\" ? key : String(key); }\n      function _toPrimitive(input, hint) { if (typeof input !== \\\\\"object\\\\\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \\\\\"default\\\\\"); if (typeof res !== \\\\\"object\\\\\") return res; throw new TypeError(\\\\\"@@toPrimitive must return a primitive value.\\\\\"); } return (hint === \\\\\"string\\\\\" ? String : Number)(input); }\n      class Foo {}\n      Foo.foo = Foo.bar;\n      _defineProperty(Foo, \\\\\"bar\\\\\", 42);\"\n    `);\n  });",
            "file": "plugin-ordering.test.js",
            "skipped": false,
            "dir": "packages/babel-plugin-proposal-class-static-block/test"
        },
        {
            "name": "es7.objectRestSpread",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 24,
                "index": 25
            },
            "line": 1,
            "code": "it(\"es7.objectRestSpread\", () => {\n  let original = {\n    a: 1,\n    b: 2\n  };\n  let {\n    ...copy\n  } = original;\n});",
            "file": "fixtures/object-rest/duplicate-decl-bug/input.js",
            "skipped": false,
            "dir": "packages/babel-plugin-proposal-object-rest-spread/test"
        },
        {
            "name": "es7.objectRestSpread",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 24,
                "index": 25
            },
            "line": 1,
            "code": "it(\"es7.objectRestSpread\", () => {\n  let original = {\n    a: 1,\n    b: 2\n  };\n  let copy = babelHelpers.extends({}, (babelHelpers.objectDestructuringEmpty(original), original));\n});",
            "file": "fixtures/object-rest/duplicate-decl-bug/output.js",
            "skipped": false,
            "dir": "packages/babel-plugin-proposal-object-rest-spread/test"
        },
        {
            "name": "%s",
            "suites": [
                "shouldStoreRHSInTemporaryVariable"
            ],
            "line": 10,
            "code": "  it.each([[\"const { x: { ...y } } = z();\", true], [\"let { x4: { ...y4 } } = z();\", true], [\"let { x5: { w5, ...y5 } } = z();\", true], [\"let { x6: { w6: { a6, ...y6 } } } = z();\", true], [\"let { x7: { e7, r7 }, q7: { w7: { a7, ...y7 } } } = z();\", true], [\"let { x8, ...y8 } = z();\", true], [\"let { x9: { w9: { a9, ...y9 } }, x10: { a10, ...y10 },  } = z();\", true], [\"let { x11: [{ w11, ...z11 }] } = z();\", true], [\"let { x12: [{ a12, b12 }, { c12, ...d12 }] } = z();\", true], [\"let { x13: [, { c13, ...d13 }] } = z();\", true], [\"const { x14: [...{ q14, ...y14 }] } = z();\", true], [\"const { x15: [...{ ...y16 }] } = z();\", true], [\"const [...[ ...y17 ]] = z();\", true], [\"const [...{ ...y18 }] = z();\", true], [\"const [...{ a19, ...y19 }] = z();\", true], [\"const { x20: { ...y20 } = { } } = z();\", true], [\"const { x22: { q22, ...y22  } = {} } = z();\", true], [\"const [[ ...y23 ] = []] = z();\", true], [\"const [{ ...y24 } = []] = z();\", true], [\"const { x25: [ ...y25 ] = []} = z();\", true], [\"const { x26: [ q26, ...y26 ] = []} = z();\", true], [\"const {x28: [,,{...y28}]} = z();\", true], [\"const {x29: [,,{q29, ...y29}]} = z();\", true], [\"const [,,{y30, ...x30}] = z();\", true], [\"const [,,{...x31}] = z();\", true], [\"const { x32: { }, w32: { ...y32 } } = z();\", true], [\"const [,,{}, {...q32}] = z();\", true], [\"const { ...y33 } = z();\", true], [\"const { x16: [] } = z();\", false], [\"const {} = {};\", false], [\"const [,,x27] = z();\", false]])(\"%s\", (code, expectedResult) => {\n    const ast = getFistObjectPattern(code);\n    const result = shouldStoreRHSInTemporaryVariable(ast);\n    expect(result).toEqual(expectedResult);\n  });",
            "file": "hasMoreThanOneBinding.skip-bundled.js",
            "skipped": false,
            "dir": "packages/babel-plugin-proposal-object-rest-spread/test"
        },
        {
            "name": "willPathCastToBoolean(a?.b in %p) should return true",
            "suites": [
                "willPathCastToBoolean",
                "default parser options"
            ],
            "line": 25,
            "code": "    test.each(positiveCases)(\"willPathCastToBoolean(a?.b in %p) should return true\", input => {\n      expect(willPathCastToBoolean(getPath(input))).toBe(true);\n    });",
            "file": "util.skip-bundled.js",
            "skipped": false,
            "dir": "packages/babel-plugin-proposal-optional-chaining/test"
        },
        {
            "name": "willPathCastToBoolean(a?.b in %p) should return false",
            "suites": [
                "willPathCastToBoolean",
                "default parser options"
            ],
            "line": 28,
            "code": "    test.each(negativeCases)(\"willPathCastToBoolean(a?.b in %p) should return false\", input => {\n      expect(willPathCastToBoolean(getPath(input))).toBe(false);\n    });",
            "file": "util.skip-bundled.js",
            "skipped": false,
            "dir": "packages/babel-plugin-proposal-optional-chaining/test"
        },
        {
            "name": "willPathCastToBoolean(a?.b in %p with { createParenthesizedExpressions: true }) should return true",
            "suites": [
                "willPathCastToBoolean",
                "createParenthesizedExpressions"
            ],
            "line": 33,
            "code": "    test.each(positiveCases)(\"willPathCastToBoolean(a?.b in %p with { createParenthesizedExpressions: true }) should return true\", input => {\n      const parserOpts = {\n        createParenthesizedExpressions: true\n      };\n      expect(willPathCastToBoolean(getPath(input, parserOpts))).toBe(true);\n    });",
            "file": "util.skip-bundled.js",
            "skipped": false,
            "dir": "packages/babel-plugin-proposal-optional-chaining/test"
        },
        {
            "name": "willPathCastToBoolean(a?.b in %p with { createParenthesizedExpressions: true }) should return false",
            "suites": [
                "willPathCastToBoolean",
                "createParenthesizedExpressions"
            ],
            "line": 39,
            "code": "    test.each(negativeCases)(\"willPathCastToBoolean(a?.b in %p with { createParenthesizedExpressions: true }) should return false\", input => {\n      const parserOpts = {\n        createParenthesizedExpressions: true\n      };\n      expect(willPathCastToBoolean(getPath(input, parserOpts))).toBe(false);\n    });",
            "file": "util.skip-bundled.js",
            "skipped": false,
            "dir": "packages/babel-plugin-proposal-optional-chaining/test"
        },
        {
            "name": "must be boolean",
            "suites": [],
            "updatePoint": {
                "line": 13,
                "column": 23,
                "index": 469
            },
            "line": 13,
            "code": "  test(\"must be boolean\", function () {\n    expect(makeParser(\"\", {\n      legacy: \"legacy\"\n    })).toThrow();\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-plugin-syntax-decorators/test"
        },
        {
            "name": "'legacy': false",
            "suites": [],
            "updatePoint": {
                "line": 18,
                "column": 23,
                "index": 585
            },
            "line": 18,
            "code": "  test(\"'legacy': false\", function () {\n    expect(makeParser(\"({ @dec fn() {} })\", {\n      legacy: false\n    })).toThrow();\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-plugin-syntax-decorators/test"
        },
        {
            "name": "'legacy': true",
            "suites": [],
            "updatePoint": {
                "line": 23,
                "column": 22,
                "index": 715
            },
            "line": 23,
            "code": "  test(\"'legacy': true\", function () {\n    expect(makeParser(\"({ @dec fn() {} })\", {\n      legacy: true\n    })).not.toThrow();\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-plugin-syntax-decorators/test"
        },
        {
            "name": "defaults to 'false'",
            "suites": [],
            "updatePoint": {
                "line": 28,
                "column": 27,
                "index": 853
            },
            "line": 28,
            "code": "  test(\"defaults to 'false'\", function () {\n    expect(makeParser(\"({ @dec fn() {} })\", {})).toThrow();\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-plugin-syntax-decorators/test"
        },
        {
            "name": "must be boolean",
            "suites": [],
            "updatePoint": {
                "line": 33,
                "column": 23,
                "index": 1027
            },
            "line": 33,
            "code": "  test(\"must be boolean\", function () {\n    expect(makeParser(\"\", {\n      version: \"2021-12\",\n      decoratorsBeforeExport: \"before\"\n    })).toThrow();\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-plugin-syntax-decorators/test"
        },
        {
            "name": "is required with 2018-09 decorators",
            "suites": [],
            "updatePoint": {
                "line": 39,
                "column": 43,
                "index": 1205
            },
            "line": 39,
            "code": "  test(\"is required with 2018-09 decorators\", function () {\n    expect(makeParser(\"\", {\n      legacy: false\n    })).toThrow(/decoratorsBeforeExport/);\n    expect(makeParser(\"\", {\n      version: \"2018-09\"\n    })).toThrow(/decoratorsBeforeExport/);\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-plugin-syntax-decorators/test"
        },
        {
            "name": "is incompatible with legacy",
            "suites": [],
            "updatePoint": {
                "line": 47,
                "column": 35,
                "index": 1450
            },
            "line": 47,
            "code": "  test(\"is incompatible with legacy\", function () {\n    expect(makeParser(\"\", {\n      decoratorsBeforeExport: false,\n      version: \"legacy\"\n    })).toThrow();\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-plugin-syntax-decorators/test"
        },
        {
            "name": "is incompatible with legacy when using the 'legacy' option",
            "suites": [],
            "updatePoint": {
                "line": 53,
                "column": 66,
                "index": 1647
            },
            "line": 53,
            "code": "  test(\"is incompatible with legacy when using the 'legacy' option\", () => {\n    expect(makeParser(\"\", {\n      decoratorsBeforeExport: false,\n      legacy: true\n    })).toThrow();\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-plugin-syntax-decorators/test"
        },
        {
            "name": "is optional with 2021-12 decorators",
            "suites": [],
            "updatePoint": {
                "line": 59,
                "column": 43,
                "index": 1810
            },
            "line": 59,
            "code": "  test(\"is optional with 2021-12 decorators\", function () {\n    expect(makeParser(\"\", {\n      version: \"2021-12\"\n    })).not.toThrow();\n    expect(makeParser(\"\", {\n      version: \"2021-12\",\n      decoratorsBeforeExport: true\n    })).not.toThrow();\n    expect(makeParser(\"\", {\n      version: \"2021-12\",\n      decoratorsBeforeExport: false\n    })).not.toThrow();\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-plugin-syntax-decorators/test"
        },
        {
            "name": "is incompatible with 2022-03 decorators",
            "suites": [],
            "updatePoint": {
                "line": 72,
                "column": 47,
                "index": 2181
            },
            "line": 72,
            "code": "  test(\"is incompatible with 2022-03 decorators\", function () {\n    expect(makeParser(\"\", {\n      decoratorsBeforeExport: false,\n      version: \"2022-03\"\n    })).toThrow();\n    expect(makeParser(\"\", {\n      decoratorsBeforeExport: true,\n      version: \"2022-03\"\n    })).toThrow();\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-plugin-syntax-decorators/test"
        },
        {
            "name": "is incompatible with 2023-01 decorators",
            "suites": [],
            "updatePoint": {
                "line": 82,
                "column": 47,
                "index": 2468
            },
            "line": 82,
            "code": "  test(\"is incompatible with 2023-01 decorators\", function () {\n    expect(makeParser(\"\", {\n      decoratorsBeforeExport: false,\n      version: \"2023-01\"\n    })).toThrow();\n    expect(makeParser(\"\", {\n      decoratorsBeforeExport: true,\n      version: \"2023-01\"\n    })).toThrow();\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-plugin-syntax-decorators/test"
        },
        {
            "name": " - decorators  export should throw",
            "suites": [],
            "updatePoint": {
                "line": 103,
                "column": 67,
                "index": 3115
            },
            "line": 103,
            "code": "      test(`${before} - decorators ${codeTitle} export should throw`, function () {\n        expect(makeParser(code, {\n          version: \"2021-12\",\n          decoratorsBeforeExport: before\n        })).toThrow();\n      });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-plugin-syntax-decorators/test"
        },
        {
            "name": " - decorators  export should not throw",
            "suites": [],
            "updatePoint": {
                "line": 110,
                "column": 71,
                "index": 3354
            },
            "line": 110,
            "code": "      test(`${before} - decorators ${codeTitle} export should not throw`, function () {\n        expect(makeParser(code, {\n          version: \"2021-12\",\n          decoratorsBeforeExport: before\n        })).not.toThrow();\n      });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-plugin-syntax-decorators/test"
        },
        {
            "name": "is incompatible with the 'legacy' option",
            "suites": [
                "'version' option"
            ],
            "updatePoint": {
                "line": 120,
                "column": 48,
                "index": 3618
            },
            "line": 120,
            "code": "  test(\"is incompatible with the 'legacy' option\", function () {\n    expect(makeParser(\"\", {\n      version: \"2018-09\",\n      legacy: true\n    })).toThrow();\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-plugin-syntax-decorators/test"
        },
        {
            "name": "throws on invalid values",
            "suites": [
                "'version' option"
            ],
            "updatePoint": {
                "line": 126,
                "column": 32,
                "index": 3765
            },
            "line": 126,
            "code": "  test(\"throws on invalid values\", function () {\n    expect(makeParser(\"\", {\n      version: \"2015-02\"\n    })).toThrow();\n    expect(makeParser(\"\", {\n      version: \"2015-02\",\n      decoratorsBeforeExport: true\n    })).toThrow();\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-plugin-syntax-decorators/test"
        },
        {
            "name": "'2022-03' disallows @(...)()",
            "suites": [
                "'version' option"
            ],
            "updatePoint": {
                "line": 135,
                "column": 36,
                "index": 4004
            },
            "line": 135,
            "code": "  test(\"'2022-03' disallows @(...)()\", function () {\n    expect(makeParser(\"@(foo)() class A {}\", {\n      version: \"2022-03\"\n    })).toThrow();\n    expect(makeParser(\"@(foo()) class A {}\", {\n      version: \"2022-03\"\n    })).not.toThrow();\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-plugin-syntax-decorators/test"
        },
        {
            "name": "'2023-01' disallows @(...)()",
            "suites": [
                "'version' option"
            ],
            "updatePoint": {
                "line": 143,
                "column": 36,
                "index": 4249
            },
            "line": 143,
            "code": "  test(\"'2023-01' disallows @(...)()\", function () {\n    expect(makeParser(\"@(foo)() class A {}\", {\n      version: \"2023-01\"\n    })).toThrow();\n    expect(makeParser(\"@(foo()) class A {}\", {\n      version: \"2023-01\"\n    })).not.toThrow();\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-plugin-syntax-decorators/test"
        },
        {
            "name": "'2023-01' allows decorators both before and after export",
            "suites": [
                "'version' option"
            ],
            "updatePoint": {
                "line": 151,
                "column": 64,
                "index": 4522
            },
            "line": 151,
            "code": "  test(\"'2023-01' allows decorators both before and after export\", function () {\n    expect(makeParser(\"@dec export class A {}\", {\n      version: \"2023-01\"\n    })).not.toThrow();\n    expect(makeParser(\"export @dec class A {}\", {\n      version: \"2023-01\"\n    })).not.toThrow();\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "packages/babel-plugin-syntax-decorators/test"
        }
    ],
    "error": "Cannot read properties of undefined (reading 'file')"
}