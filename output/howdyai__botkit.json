{"repo":"howdyai/botkit","url":"https://github.com/howdyai/botkit","branch":"main","configs":[{"package":"botbuilder-adapter-facebook","lang":"js","dir":"packages/botbuilder-adapter-facebook/tests","framework":"mocha","pattern":"**/*.{js,ts}"},{"package":"botbuilder-adapter-hangouts","lang":"js","dir":"packages/botbuilder-adapter-hangouts/tests","framework":"mocha","pattern":"**/*.{js,ts}"},{"package":"botbuilder-adapter-slack","lang":"js","dir":"packages/botbuilder-adapter-slack/tests","framework":"mocha","pattern":"**/*.{js,ts}"},{"package":"botbuilder-adapter-twilio-sms","lang":"js","dir":"packages/botbuilder-adapter-twilio-sms/tests","framework":"mocha","pattern":"**/*.{js,ts}"},{"package":"botbuilder-adapter-web","lang":"js","dir":"packages/botbuilder-adapter-web/tests","framework":"mocha","pattern":"**/*.{js,ts}"},{"package":"botbuilder-adapter-webex","lang":"js","dir":"packages/botbuilder-adapter-webex/tests","framework":"mocha","pattern":"**/*.{js,ts}"},{"package":"botkit","lang":"js","dir":"packages/botkit/tests","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"should not construct without required parameters","suites":["FacebookAdapter"],"updatePoint":{"line":27,"column":54,"index":563},"line":27,"code":"  it('should not construct without required parameters', function () {\n    assert.throws(function () {\n      let adapter = new FacebookAdapter({});\n    }, 'Foo');\n  });","file":"FacebookAdapter.tests.js","skipped":false,"dir":"packages/botbuilder-adapter-facebook/tests"},{"name":"should create a FacebookAdapter object","suites":["FacebookAdapter"],"updatePoint":{"line":32,"column":44,"index":722},"line":32,"code":"  it('should create a FacebookAdapter object', function () {\n    assert(adapter instanceof FacebookAdapter, 'Adapter is wrong type');\n  });","file":"FacebookAdapter.tests.js","skipped":false,"dir":"packages/botbuilder-adapter-facebook/tests"},{"name":"should process an incoming request into an activity...","suites":["FacebookAdapter"],"updatePoint":{"line":35,"column":60,"index":878},"line":35,"code":"  it('should process an incoming request into an activity...', function (done) {\n    adapter.verifySignature = fakeVerifySignature;\n    let res = new Res();\n    adapter.processActivity(new Req({\n      entry: [{\n        messaging: [{\n          sender: {\n            id: 1\n          },\n          recipient: {\n            id: 2\n          },\n          message: {\n            text: 'Hello!',\n            sticker_id: 1\n          }\n        }]\n      }]\n    }), res, async context => {\n      assert(context.activity.type === 'message', 'activity is not a message');\n      assert(context.activity.text === 'Hello!', 'activity is missing text');\n      assert(context.activity.from.id === 1, 'from id is wrong');\n      assert(context.activity.recipient.id === 2, 'from id is wrong');\n      assert(context.activity.channelData.sticker_id === 1, 'platform field is not in channelData');\n      done();\n    });\n  });","file":"FacebookAdapter.tests.js","skipped":false,"dir":"packages/botbuilder-adapter-facebook/tests"},{"name":"should process an postback incoming request into an activity...","suites":["FacebookAdapter"],"updatePoint":{"line":62,"column":69,"index":1788},"line":62,"code":"  it('should process an postback incoming request into an activity...', function (done) {\n    adapter.verifySignature = fakeVerifySignature;\n    let res = new Res();\n    adapter.processActivity(new Req({\n      entry: [{\n        messaging: [{\n          sender: {\n            id: 1\n          },\n          recipient: {\n            id: 2\n          },\n          postback: {\n            payload: 'Hello!'\n          }\n        }]\n      }]\n    }), res, async context => {\n      assert(context.activity.type === 'message', 'activity is not a message');\n      assert(context.activity.text === 'Hello!', 'activity is missing text');\n      done();\n    });\n  });","file":"FacebookAdapter.tests.js","skipped":false,"dir":"packages/botbuilder-adapter-facebook/tests"},{"name":"should process a message echo incoming request into an event...","suites":["FacebookAdapter"],"updatePoint":{"line":85,"column":69,"index":2437},"line":85,"code":"  it('should process a message echo incoming request into an event...', function (done) {\n    adapter.verifySignature = fakeVerifySignature;\n    let res = new Res();\n    adapter.processActivity(new Req({\n      entry: [{\n        messaging: [{\n          sender: {\n            id: 1\n          },\n          recipient: {\n            id: 2\n          },\n          message: {\n            is_echo: true,\n            text: 'Hello!'\n          }\n        }]\n      }]\n    }), res, async context => {\n      assert(context.activity.type === 'event', 'activity is not a event');\n      done();\n    });\n  });","file":"FacebookAdapter.tests.js","skipped":false,"dir":"packages/botbuilder-adapter-facebook/tests"},{"name":"should process a non-message incoming request into an event...","suites":["FacebookAdapter"],"updatePoint":{"line":108,"column":68,"index":3026},"line":108,"code":"  it('should process a non-message incoming request into an event...', function (done) {\n    adapter.verifySignature = fakeVerifySignature;\n    let res = new Res();\n    adapter.processActivity(new Req({\n      entry: [{\n        messaging: [{\n          sender: {\n            id: 1\n          },\n          recipient: {\n            id: 2\n          },\n          read: {\n            mid: 1\n          }\n        }]\n      }]\n    }), res, async context => {\n      assert(context.activity.type === 'event', 'activity is not a event');\n      done();\n    });\n  });","file":"FacebookAdapter.tests.js","skipped":false,"dir":"packages/botbuilder-adapter-facebook/tests"},{"name":"should process spawn using the right token.","suites":["FacebookAdapter"],"updatePoint":{"line":130,"column":49,"index":3558},"line":130,"code":"  it('should process spawn using the right token.', function (done) {\n    adapter.verifySignature = fakeVerifySignature;\n    let res = new Res();\n    adapter.processActivity(new Req({\n      entry: [{\n        messaging: [{\n          sender: {\n            id: 1\n          },\n          recipient: {\n            id: 2\n          },\n          message: {\n            text: 'hi'\n          }\n        }]\n      }]\n    }), res, async context => {\n      let api = await adapter.getAPI(context.activity);\n      assert(api, 'api was returned based on activity');\n      done();\n    });\n  });","file":"FacebookAdapter.tests.js","skipped":false,"dir":"packages/botbuilder-adapter-facebook/tests"},{"name":"outbound message to facebook is properly formed.","suites":["FacebookAdapter"],"updatePoint":{"line":153,"column":54,"index":4139},"line":153,"code":"  it('outbound message to facebook is properly formed.', function (done) {\n    adapter.verifySignature = fakeVerifySignature;\n\n    adapter.getAPI = async token => {\n      return new FakeAPI(function (endpoint, method, params) {\n        assert(params.recipient.id === 1, 'outbound message has wrong recipient');\n        assert(params.message.text === 'hello', 'outbound message has wrong text');\n        assert(params.message.sticker_id, 'sticker id is missing');\n        assert(params.message.quick_replies.length === 3, 'quick replies are missing');\n        done();\n      });\n    };\n\n    let res = new Res();\n    adapter.processActivity(new Req({\n      entry: [{\n        messaging: [{\n          sender: {\n            id: 1\n          },\n          recipient: {\n            id: 2\n          },\n          message: {\n            text: 'hi'\n          }\n        }]\n      }]\n    }), res, async context => {\n      let reply = await context.sendActivity({\n        text: 'hello',\n        channelData: {\n          sticker_id: 5,\n          quick_replies: [{\n            title: 'foo',\n            payload: 'foo'\n          }, {\n            title: 'bar',\n            payload: 'bar'\n          }, {\n            title: 'baz',\n            payload: 'baz'\n          }]\n        }\n      });\n    });\n  }); // TODO: test continueConversation resulting in properly formatted messages","file":"FacebookAdapter.tests.js","skipped":false,"dir":"packages/botbuilder-adapter-facebook/tests"},{"name":"should process a non-message incoming request into an event...","suites":["FacebookEventTypeMiddleware"],"updatePoint":{"line":15,"column":68,"index":306},"line":15,"code":"  it('should process a non-message incoming request into an event...', function (done) {\n    const adapter = new FacebookAdapter({\n      access_token: '123',\n      app_secret: '123',\n      verify_token: '123'\n    });\n    adapter.use(new FacebookEventTypeMiddleware());\n    adapter.verifySignature = fakeVerifySignature;\n    let res = new Res();\n    adapter.processActivity(new Req({\n      entry: [{\n        messaging: [{\n          sender: {\n            id: 1\n          },\n          recipient: {\n            id: 2\n          },\n          read: {\n            mid: 1\n          }\n        }]\n      }]\n    }), res, async context => {\n      assert(context.activity.type === 'event', 'activity is not a event');\n      assert(context.activity.channelData.botkitEventType === 'message_read', 'botkitEventType not set properly');\n      done();\n    });\n  });","file":"FacebookEventMiddleware.tests.js","skipped":false,"dir":"packages/botbuilder-adapter-facebook/tests"},{"name":"should not construct without required parameters","suites":["HangoutsAdapter"],"updatePoint":{"line":14,"column":54,"index":313},"line":14,"code":"  it('should not construct without required parameters', function () {\n    assert.throws(function () {\n      let adapter = new HangoutsAdapter({});\n    }, 'Foo');\n  }); // it('should create a HangoutsAdapter object', function () {","file":"HangoutsAdapter.tests.js","skipped":false,"dir":"packages/botbuilder-adapter-hangouts/tests"},{"name":"should not construct without required parameters","suites":["SlackAdapter"],"updatePoint":{"line":20,"column":54,"index":509},"line":20,"code":"  it('should not construct without required parameters', function () {\n    assert.throws(function () {\n      let adapter = new SlackAdapter({});\n    }, 'Foo');\n  });","file":"SlackAdapter.tests.js","skipped":false,"dir":"packages/botbuilder-adapter-slack/tests"},{"name":"should create a SlackAdapter object","suites":["SlackAdapter"],"updatePoint":{"line":25,"column":41,"index":662},"line":25,"code":"  it('should create a SlackAdapter object', function () {\n    assert(adapter instanceof SlackAdapter, 'Adapter is wrong type');\n  });","file":"SlackAdapter.tests.js","skipped":false,"dir":"packages/botbuilder-adapter-slack/tests"},{"name":"should not construct without required parameters","suites":["TwilioAdapter"],"updatePoint":{"line":16,"column":54,"index":359},"line":16,"code":"  it('should not construct without required parameters', function () {\n    assert.throws(function () {\n      let adapter = new TwilioAdapter({});\n    }, 'Foo');\n  });","file":"TwilioAdapter.tests.js","skipped":false,"dir":"packages/botbuilder-adapter-twilio-sms/tests"},{"name":"should create a TwilioAdapter object","suites":["TwilioAdapter"],"updatePoint":{"line":21,"column":42,"index":514},"line":21,"code":"  it('should create a TwilioAdapter object', function () {\n    assert(adapter instanceof TwilioAdapter, 'Adapter is wrong type');\n  });","file":"TwilioAdapter.tests.js","skipped":false,"dir":"packages/botbuilder-adapter-twilio-sms/tests"},{"name":"should contruct without any parameters (none are required)","suites":["WebAdapter"],"updatePoint":{"line":12,"column":64,"index":261},"line":12,"code":"  it('should contruct without any parameters (none are required)', function () {\n    assert.doesNotThrow(function () {\n      let adapter = new WebAdapter({});\n    }, 'Foo');\n  });","file":"WebAdapter.tests.js","skipped":false,"dir":"packages/botbuilder-adapter-web/tests"},{"name":"should create a WebAdapter object","suites":["WebAdapter"],"updatePoint":{"line":17,"column":39,"index":416},"line":17,"code":"  it('should create a WebAdapter object', function () {\n    assert(adapter instanceof WebAdapter, 'Adapter is wrong type');\n  });","file":"WebAdapter.tests.js","skipped":false,"dir":"packages/botbuilder-adapter-web/tests"},{"name":"should not construct without required parameters","suites":["WebexAdapter"],"updatePoint":{"line":16,"column":54,"index":360},"line":16,"code":"  it('should not construct without required parameters', function () {\n    assert.throws(function () {\n      let adapter = new WebexAdapter({});\n    }, 'Foo');\n  });","file":"WebexAdapter.tests.js","skipped":false,"dir":"packages/botbuilder-adapter-webex/tests"},{"name":"should create a WebexAdapter object","suites":["WebexAdapter"],"updatePoint":{"line":21,"column":41,"index":513},"line":21,"code":"  it('should create a WebexAdapter object', function () {\n    assert(adapter instanceof WebexAdapter, 'Adapter is wrong type');\n  });","file":"WebexAdapter.tests.js","skipped":false,"dir":"packages/botbuilder-adapter-webex/tests"},{"name":"should create a Botkit controller","suites":["Botkit"],"updatePoint":{"line":14,"column":39,"index":260},"line":14,"code":"  it('should create a Botkit controller', function () {\n    assert(new Botkit({\n      disable_console: true,\n      disable_webserver: true\n    }) instanceof Botkit, 'Botkit is wrong type');\n  });","file":"Core.tests.js","skipped":false,"dir":"packages/botkit/tests"},{"name":"should spawn appropriate bot worker with a single adapter","suites":["Botkit"],"updatePoint":{"line":20,"column":63,"index":480},"line":20,"code":"  it('should spawn appropriate bot worker with a single adapter', async function () {\n    const controller = new Botkit({\n      disable_webserver: true,\n      adapter: new TwilioAdapter({\n        enable_incomplete: true\n      })\n    });\n    const bot = await controller.spawn({});\n    assert(bot instanceof TwilioBotWorker, 'Bot worker is wrong type');\n  });","file":"Core.tests.js","skipped":false,"dir":"packages/botkit/tests"},{"name":"should spawn appropriate bot worker with a multiple adapter","suites":["Botkit"],"updatePoint":{"line":30,"column":65,"index":841},"line":30,"code":"  it('should spawn appropriate bot worker with a multiple adapter', async function () {\n    const controller = new Botkit({\n      disable_webserver: true\n    });\n    const anotherAdapter = new TwilioAdapter({\n      enable_incomplete: true\n    });\n    const bot = await controller.spawn({});\n    assert(bot instanceof TeamsBotWorker, 'Default Bot worker is wrong type');\n    const tbot = await controller.spawn({}, anotherAdapter);\n    assert(tbot instanceof TwilioBotWorker, 'Secondary Bot worker is wrong type');\n  });","file":"Core.tests.js","skipped":false,"dir":"packages/botkit/tests"},{"name":"bot can access user identity through custom bot worker","suites":["Test something with custom worker"],"updatePoint":{"line":58,"column":60,"index":1347},"line":58,"code":"  it('bot can access user identity through custom bot worker', async () => {\n    testAdapter = new FakeAdapter({});\n    botkit = new Botkit({\n      disable_webserver: true,\n      disable_console: true,\n      adapter: testAdapter\n    });\n    botkit.addDialog(createDialog(botkit));\n    client = new CustomTestClient('test', botkit, ['try_custom_worker']); // Test the dialog through the client\n\n    let message = await client.sendActivity('');\n    assert(message.text === 'How you like me now?');\n    message = await client.sendActivity('nice!');\n    assert(message.text === 'You are: Roger', 'Custom adapter spawning invalid bot');\n  });","file":"CustomAdapter.tests.js","skipped":false,"dir":"packages/botkit/tests"},{"name":"should follow a dialog","suites":["Botkit dialog"],"updatePoint":{"line":21,"column":28,"index":368},"line":21,"code":"  it('should follow a dialog', async function () {\n    const introDialog = new BotkitConversation('introduction', bot);\n    introDialog.ask({\n      type: 'message',\n      text: 'You can say Ok',\n      quick_replies: [{\n        title: 'Ok',\n        payload: 'Ok'\n      }]\n    }, [], 'continue');\n    introDialog.say('you said {{vars.continue}}');\n    introDialog.ask({\n      type: 'message',\n      text: 'say repeat'\n    }, [{\n      pattern: 'repeat',\n      handler: async (val, convo, bot, message) => {\n        await convo.repeat();\n      }\n    }, {\n      default: true,\n      handler: async () => {// noop\n      }\n    }], 'choice');\n    introDialog.say('you said {{vars.choice}}');\n    bot.addDialog(introDialog); // set up a test client\n\n    const client = new BotkitTestClient('test', bot, 'introduction'); // Get details for the reply\n\n    const quickreply_reply = await client.sendActivity();\n    assert(quickreply_reply.text === 'You can say Ok', 'wrong first message');\n    assert(quickreply_reply.channelData.quick_replies[0].title === 'Ok', 'wrong quick reply');\n    const next_reply = await client.sendActivity('Ok');\n    assert(next_reply.text === 'you said Ok', 'wrong reply');\n    const reply3 = await client.getNextReply();\n    assert(reply3.text === 'say repeat', 'wrong reply 3');\n    const reply4 = await client.sendActivity('repeat');\n    assert(reply4.text === 'say repeat', 'wrong reply 4');\n    const reply5 = await client.sendActivity('repeat');\n    assert(reply5.text === 'say repeat', 'wrong reply 5');\n    const reply6 = await client.sendActivity('2');\n    assert(reply6.text === 'you said 2', 'wrong reply 6');\n  });","file":"Dialog.tests.js","skipped":false,"dir":"packages/botkit/tests"},{"name":"should work with convo.repeat","suites":["Botkit dialog"],"updatePoint":{"line":64,"column":35,"index":2019},"line":64,"code":"  it('should work with convo.repeat', async function () {\n    const botConvo = new BotkitConversation('testConvo', bot);\n    botConvo.ask({\n      text: ['what is your name?']\n    }, [{\n      default: true,\n      handler: async (answer, convo, bot) => {\n        await bot.say(`hi ${answer}`);\n      }\n    }], 'name'); // botConvo.say('ok');\n\n    botConvo.ask({\n      text: ['what is your last name{{vars.count}}']\n    }, [{\n      pattern: 'smith',\n      handler: async (answer, convo, bot) => {\n        await bot.say('I like the name smith');\n      }\n    }, {\n      default: true,\n      handler: async (answer, convo, bot) => {\n        await bot.say('name not recognized, say another name');\n        let count = convo.vars.count;\n\n        if (!count) {\n          count = 1;\n        } else {\n          count++;\n        }\n\n        convo.setVar('count', count) / (await convo.repeat());\n      }\n    }], 'last-name');\n    bot.addDialog(botConvo); // set up a test client\n\n    const client = new BotkitTestClient('test', bot, 'testConvo'); // Get details for the reply\n\n    const quickreply_reply = await client.sendActivity();\n    assert(quickreply_reply.text === 'what is your name?', 'did not get name prompt');\n    const next_reply = await client.sendActivity('chester');\n    assert(next_reply.text === 'hi chester', 'did not echo name'); // const ok = await client.getNextReply();\n    // assert(ok.text === 'ok','did not hear ok');\n\n    const reply3 = await client.getNextReply();\n    assert(reply3.text === 'what is your last name', 'did not get last name prompt');\n    const reply4 = await client.sendActivity('phillips');\n    assert(reply4.text === 'name not recognized, say another name', 'did not get invalid error 1');\n    const reply5 = await client.getNextReply();\n    assert(reply5.text === 'what is your last name1', 'did not get reprompt');\n    const reply6 = await client.sendActivity('brown');\n    assert(reply6.text === 'name not recognized, say another name', 'did not get invalid error 2');\n    const reply8 = await client.getNextReply();\n    assert(reply8.text === 'what is your last name2', 'did not get reprompt');\n    const reply9 = await client.sendActivity('smith');\n    assert(reply9.text === 'I like the name smith', 'did not get final confirm');\n  });","file":"Dialog.tests.js","skipped":false,"dir":"packages/botkit/tests"},{"name":"should work with convo.repeat in an onchange","suites":["Botkit dialog"],"updatePoint":{"line":120,"column":50,"index":4310},"line":120,"code":"  it('should work with convo.repeat in an onchange', async function () {\n    const botConvo = new BotkitConversation('testConvo', bot);\n    botConvo.ask({\n      text: ['what is your name?']\n    }, [], 'name');\n    botConvo.onChange('name', async (response, convo) => {\n      if (response != 'smith') {\n        await convo.repeat();\n      }\n    });\n    botConvo.say('done');\n    bot.addDialog(botConvo); // set up a test client\n\n    const client = new BotkitTestClient('test', bot, 'testConvo');\n    let msg = await client.sendActivity('');\n    assert(msg.text == 'what is your name?', 'initial prompt wrong');\n    msg = await client.sendActivity('phillips');\n    assert(msg.text == 'what is your name?', 'reprompt wrong');\n    msg = await client.sendActivity('brown');\n    assert(msg.text == 'what is your name?', 'reprompt 2 wrong');\n    msg = await client.sendActivity('smith');\n    assert(msg.text == 'done', 'did not wrap up');\n  });","file":"Dialog.tests.js","skipped":false,"dir":"packages/botkit/tests"},{"name":"should work with call to addchildDialog","suites":["Botkit dialog"],"updatePoint":{"line":143,"column":45,"index":5243},"line":143,"code":"  it('should work with call to addchildDialog', async function () {\n    const botConvo = new BotkitConversation('testConvo', bot);\n    botConvo.ask('What is your name?', async (response, convo, bot) => {}, 'name');\n    botConvo.addChildDialog('testConvo2', 'stuff');\n    botConvo.say('got it.');\n    bot.addDialog(botConvo);\n    const botConvo2 = new BotkitConversation('testConvo2', bot);\n    botConvo2.ask('What is your favorite color?', async (response, convo, bot) => {// noop\n    }, 'color');\n    botConvo2.say('ok');\n    bot.addDialog(botConvo2); // set up a test client\n\n    const client = new BotkitTestClient('test', bot, ['testConvo', 'testConvo2']);\n    const prompt = await client.sendActivity('..');\n    assert(prompt.text === 'What is your name?', 'wrong prompt 1');\n    const prompt2 = await client.sendActivity('ben');\n    assert(prompt2.text === 'What is your favorite color?', 'wrong prompt 2');\n    const reply = await client.sendActivity('black');\n    assert(reply.text == 'ok', 'wrong reply');\n    const reply2 = await client.getNextReply();\n    assert(reply2.text == 'got it.', 'wrong reply 2 in addChildDialog test');\n  });","file":"Dialog.tests.js","skipped":false,"dir":"packages/botkit/tests"},{"name":"should work with call to addGotoDialog","suites":["Botkit dialog"],"updatePoint":{"line":165,"column":44,"index":6389},"line":165,"code":"  it('should work with call to addGotoDialog', async function () {\n    const botConvo = new BotkitConversation('testConvo', bot);\n    botConvo.ask('What is your name?', async (response, convo, bot) => {}, 'name');\n    botConvo.addGotoDialog('testConvo2');\n    botConvo.say('got it.');\n    bot.addDialog(botConvo);\n    const botConvo2 = new BotkitConversation('testConvo2', bot);\n    botConvo2.ask('What is your favorite color?', async (response, convo, bot) => {// noop\n    }, 'color');\n    botConvo2.say('ok');\n    bot.addDialog(botConvo2); // set up a test client\n\n    const client = new BotkitTestClient('test', bot, ['testConvo', 'testConvo2']);\n    const prompt = await client.sendActivity('..');\n    assert(prompt.text === 'What is your name?', 'wrong prompt 1');\n    const prompt2 = await client.sendActivity('ben');\n    assert(prompt2.text === 'What is your favorite color?', 'wrong prompt 2');\n    const reply = await client.sendActivity('black');\n    assert(reply.text == 'ok', 'wrong reply');\n    const reply2 = await client.getNextReply();\n    assert(reply2 == null, 'wrong reply 2 in addGotoDialog test');\n  });","file":"Dialog.tests.js","skipped":false,"dir":"packages/botkit/tests"},{"name":"should work with call to beginDialog in handler","suites":["Botkit dialog"],"updatePoint":{"line":187,"column":53,"index":7523},"line":187,"code":"  it('should work with call to beginDialog in handler', async function () {\n    const botConvo = new BotkitConversation('testConvo', bot);\n    botConvo.ask('What is your name?', async (response, convo, bot) => {\n      await bot.beginDialog('testConvo2');\n    }, 'name');\n    botConvo.say('got it.');\n    bot.addDialog(botConvo);\n    const botConvo2 = new BotkitConversation('testConvo2', bot);\n    botConvo2.ask('What is your favorite color?', async (response, convo, bot) => {// noop\n    }, 'color');\n    botConvo2.say('ok you said {{vars.color}}');\n    bot.addDialog(botConvo2); // set up a test client\n\n    const client = new BotkitTestClient('test', bot, ['testConvo', 'testConvo2']);\n    const prompt = await client.sendActivity('..');\n    assert(prompt.text === 'What is your name?', 'wrong prompt 1');\n    const prompt2 = await client.sendActivity('ben');\n    assert(prompt2.text === 'What is your favorite color?', 'wrong prompt 2');\n    const reply = await client.sendActivity('black');\n    assert(reply.text === 'ok you said black', 'wrong reply');\n    const reply2 = await client.getNextReply();\n    assert(reply2.text === 'got it.', 'wrong reply 2 in beginDialog test');\n  });","file":"Dialog.tests.js","skipped":false,"dir":"packages/botkit/tests"},{"name":"should navigate threads","suites":["Botkit dialog"],"updatePoint":{"line":210,"column":29,"index":8688},"line":210,"code":"  it('should navigate threads', async function () {\n    // test all the ways threads are triggered\n    // convo.gotoThread inside an ask\n    // convo.gotoThread inside an onChange\n    // addAction\n    // message with action field\n    // convo.gotoThread inside a beforeThread\n    const botConvo = new BotkitConversation('testConvo', bot);\n    let beforeThreadFired = false;\n    let beforeThread2Fired = false;\n    let beforeThread3Fired = false;\n    let beforeThread4Fired = false;\n    let beforeThread5Fired = false;\n    let beforeThread6Fired = false;\n    botConvo.say('1');\n    botConvo.addAction('thread-2');\n    botConvo.addMessage('2', 'thread-2');\n    botConvo.addQuestion('what?', async (response, convo, bot) => {\n      await convo.gotoThread('thread-3');\n    }, 'what', 'thread-2');\n    botConvo.addMessage('3', 'thread-3');\n    botConvo.addMessage('4', 'thread-4');\n    botConvo.addQuestion('what?', [], 'what2', 'thread-4');\n    botConvo.onChange('what2', async (response, convo, bot) => {\n      await convo.gotoThread('thread-5');\n    });\n    botConvo.addMessage('5', 'thread-5');\n    botConvo.addMessage({\n      text: 'next',\n      action: 'thread-6'\n    }, 'thread-5');\n    botConvo.addMessage('6', 'thread-6');\n    botConvo.before('default', async (convo, bot) => {\n      beforeThreadFired = true;\n    });\n    botConvo.before('thread-2', async (convo, bot) => {\n      beforeThread2Fired = true;\n    });\n    botConvo.before('thread-3', async (convo, bot) => {\n      beforeThread3Fired = true;\n      convo.gotoThread('thread-4');\n    });\n    botConvo.before('thread-4', async (convo, bot) => {\n      beforeThread4Fired = true;\n    });\n    botConvo.before('thread-5', async (convo, bot) => {\n      beforeThread5Fired = true;\n    });\n    botConvo.before('thread-6', async (convo, bot) => {\n      beforeThread6Fired = true;\n    });\n    bot.addDialog(botConvo); // set up a test client\n\n    const client = new BotkitTestClient('test', bot, 'testConvo');\n    let prompt = await client.sendActivity('..');\n    assert(beforeThreadFired === true, 'beforeThread did not fire');\n    assert(prompt.text === '1', 'message 1 wrong');\n    prompt = await client.getNextReply();\n    assert(prompt.text === '2', 'message 2 wrong');\n    assert(beforeThread2Fired === true, 'before2Thread did not fire');\n    prompt = await client.getNextReply();\n    assert(prompt.text === 'what?', 'message 3 wrong');\n    prompt = await client.sendActivity('..');\n    assert(prompt.text === '4', 'message 4 wrong');\n    assert(beforeThread3Fired === true, 'before3Thread did not fire');\n    assert(beforeThread4Fired === true, 'before4Thread did not fire');\n    prompt = await client.getNextReply();\n    assert(prompt.text === 'what?', 'message 5 wrong');\n    prompt = await client.sendActivity('..');\n    assert(prompt.text === '5', 'message 6 wrong');\n    assert(beforeThread5Fired === true, 'before5Thread did not fire');\n    prompt = await client.getNextReply();\n    assert(prompt.text === 'next', 'message 7 wrong');\n    prompt = await client.getNextReply();\n    assert(prompt.text === '6', 'message 8 wrong');\n    assert(beforeThread6Fired === true, 'before6Thread did not fire');\n  });","file":"Dialog.tests.js","skipped":false,"dir":"packages/botkit/tests"},{"name":"should capture values correctly","suites":["Botkit dialog"],"updatePoint":{"line":287,"column":37,"index":11869},"line":287,"code":"  it('should capture values correctly', async function () {\n    // capture with a simple ask\n    // capture with a child dialog\n    let correct = false;\n    let correct1 = false;\n    let correct2 = false;\n    let correct3 = false;\n    let correct4 = false;\n    const botConvo = new BotkitConversation('testConvo', bot);\n    const botConvo2 = new BotkitConversation('testConvo2', bot);\n    botConvo.ask('name', [], 'name');\n    botConvo.ask('color', [], 'color');\n    botConvo2.ask('location', [], 'location');\n    botConvo2.ask('preference', [], 'preference');\n    botConvo.addChildDialog('testConvo2', 'profile');\n    botConvo.onChange('name', async response => {\n      correct1 = response === 'name';\n    });\n    botConvo.onChange('color', async response => {\n      correct2 = response === 'color';\n    });\n    botConvo2.onChange('location', async response => {\n      correct3 = response === 'location';\n    });\n    botConvo2.onChange('preference', async response => {\n      correct4 = response === 'preference';\n    });\n    botConvo.after(async (results, bot) => {\n      correct = results.name == 'name' && results.color == 'color' && results.profile.location == 'location' && results.profile.preference == 'preference';\n    });\n    bot.addDialog(botConvo);\n    bot.addDialog(botConvo2); // set up a test client\n\n    const client = new BotkitTestClient('test', bot, ['testConvo', 'testConvo2']);\n    let msg = await client.sendActivity('..');\n    assert(msg.text == 'name', 'first prompt wrong');\n    msg = await client.sendActivity('name');\n    assert(msg.text == 'color', 'second prompt wrong');\n    msg = await client.sendActivity('color');\n    assert(msg.text == 'location', 'third prompt wrong');\n    msg = await client.sendActivity('location');\n    assert(msg.text == 'preference', 'fourth prompt wrong');\n    msg = await client.sendActivity('preference');\n    assert(correct, 'Value were NOT captured correctly');\n    assert(correct1, 'value 1 was correct during onchange');\n    assert(correct2, 'value 2 was correct during onchange');\n    assert(correct3, 'value 3 was correct during onchange');\n    assert(correct4, 'value 4 was correct during onchange');\n  });","file":"Dialog.tests.js","skipped":false,"dir":"packages/botkit/tests"},{"name":"should handle a series of child dialogs","suites":["Botkit dialog"],"updatePoint":{"line":336,"column":45,"index":14051},"line":336,"code":"  it('should handle a series of child dialogs', async function () {\n    let correct = false;\n    const conversationChildDialogs = new BotkitConversation('child_dialogs', bot);\n    const conversationA = new BotkitConversation('A', bot);\n    const conversationB = new BotkitConversation('B', bot);\n    const conversationC = new BotkitConversation('C', bot);\n    const conversationD = new BotkitConversation('D', bot);\n    bot.addDialog(conversationChildDialogs);\n    bot.addDialog(conversationA);\n    bot.addDialog(conversationB);\n    bot.addDialog(conversationC);\n    bot.addDialog(conversationD);\n    conversationChildDialogs.addChildDialog('A');\n    conversationChildDialogs.addChildDialog('B');\n    conversationChildDialogs.addChildDialog('C');\n    conversationChildDialogs.addChildDialog('D');\n    conversationChildDialogs.after(async results => {\n      correct = results.A.A == 'A' && results.B.B == 'B' && results.C.C == 'C' && results.D.D == 'D';\n    });\n    conversationA.ask({\n      text: ['A reply to me']\n    }, [{\n      handler: async (response, convo, bot) => {}\n    }], 'A');\n    conversationB.ask({\n      text: ['B reply to me']\n    }, [{\n      handler: async (response, convo, bot) => {}\n    }], 'B');\n    conversationC.ask({\n      text: ['C reply to me']\n    }, [{\n      handler: async (response, convo, bot) => {}\n    }], 'C');\n    conversationD.ask({\n      text: ['D reply to me']\n    }, [{\n      handler: async (response, convo, bot) => {}\n    }], 'D');\n    const client = new BotkitTestClient('test', bot, ['child_dialogs', 'A', 'B', 'C', 'D']);\n    let reply = await client.sendActivity('..');\n    assert(reply.text == 'A reply to me', 'A wrong');\n    reply = await client.sendActivity('A');\n    assert(reply.text == 'B reply to me', 'B wrong');\n    reply = await client.sendActivity('B');\n    assert(reply.text == 'C reply to me', 'C wrong');\n    reply = await client.sendActivity('C');\n    assert(reply.text == 'D reply to me', 'D wrong');\n    reply = await client.sendActivity('D');\n    assert(reply == null, 'not null');\n    reply = await client.getNextReply();\n    assert(reply == null, 'not null');\n    assert(correct, 'results did not match expected format');\n  });","file":"Dialog.tests.js","skipped":false,"dir":"packages/botkit/tests"},{"name":"should allow cancel","suites":["Botkit dialog"],"updatePoint":{"line":390,"column":25,"index":16225},"line":390,"code":"  it('should allow cancel', async function () {\n    let after_fired = false;\n    const botConvo = new BotkitConversation('testConvo', bot);\n    botConvo.say('errr');\n    botConvo.say('boo');\n    botConvo.ask('huh?', async (response, convo, bot) => {\n      await bot.cancelAllDialogs();\n    }, 'wha');\n    botConvo.say('foo');\n    botConvo.after(async (results, bot) => {\n      after_fired = true;\n    });\n    bot.addDialog(botConvo); // set up a test client\n\n    const client = new BotkitTestClient('test', bot, 'testConvo');\n    let msg = await client.sendActivity('..');\n    assert(msg.text == 'errr', 'no errr');\n    msg = await client.getNextReply();\n    assert(msg.text == 'boo', 'no boo');\n    msg = await client.getNextReply();\n    assert(msg.text == 'huh?', 'wrong prompt');\n    msg = await client.sendActivity('..');\n    assert(msg == null, 'did not cancel');\n    msg = await client.getNextReply();\n    assert(msg == null, 'did not cancel 2');\n    assert(after_fired === false, 'after fired after cancel');\n  });","file":"Dialog.tests.js","skipped":false,"dir":"packages/botkit/tests"},{"name":"should allow cancel inside child dialog","suites":["Botkit dialog"],"updatePoint":{"line":417,"column":45,"index":17267},"line":417,"code":"  it('should allow cancel inside child dialog', async function () {\n    let after_fired = false;\n    let after_fired2 = false;\n    const botConvo = new BotkitConversation('testConvo', bot);\n    const botConvo2 = new BotkitConversation('testConvo2', bot);\n    botConvo.say('hi');\n    botConvo.addChildDialog('testConvo2');\n    botConvo.say('foo');\n    botConvo2.ask('huh?', async (r, convo, bot) => {\n      await bot.cancelAllDialogs();\n    });\n    botConvo2.say('blarg');\n    botConvo.after(async (results, bot) => {\n      after_fired = true;\n    });\n    botConvo2.after(async (results, bot) => {\n      after_fired2 = true;\n    });\n    bot.addDialog(botConvo);\n    bot.addDialog(botConvo2); // set up a test client\n\n    const client = new BotkitTestClient('test', bot, ['testConvo', 'testConvo2']);\n    let msg = await client.sendActivity('..');\n    assert(msg.text === 'hi', 'wrong msg 1');\n    msg = await client.getNextReply();\n    assert(msg.text == 'huh?', 'wrong msg 2');\n    msg = await client.sendActivity('..');\n    assert(msg == null, 'did not cancel');\n    assert(after_fired === false, 'after dialog fired');\n    assert(after_fired2 === false, 'after dialog of child fired');\n  });","file":"Dialog.tests.js","skipped":false,"dir":"packages/botkit/tests"},{"name":"should stop when convo.stop is called","suites":["Botkit dialog"],"updatePoint":{"line":448,"column":43,"index":18459},"line":448,"code":"  it('should stop when convo.stop is called', async function () {\n    let after_fired = false;\n    const botConvo = new BotkitConversation('testConvo', bot);\n    botConvo.say('errr');\n    botConvo.say('boo');\n    botConvo.ask('huh?', async (response, convo, bot) => {\n      convo.stop();\n    }, 'wha');\n    botConvo.say('foo');\n    botConvo.after(async (results, bot) => {\n      after_fired = true;\n    });\n    bot.addDialog(botConvo); // set up a test client\n\n    const client = new BotkitTestClient('test', bot, 'testConvo');\n    let msg = await client.sendActivity('..');\n    assert(msg.text == 'errr', 'no errr');\n    msg = await client.getNextReply();\n    assert(msg.text == 'boo', 'no boo');\n    msg = await client.getNextReply();\n    assert(msg.text == 'huh?', 'wrong prompt');\n    msg = await client.sendActivity('..');\n    assert(msg == null, 'did not stop');\n    msg = await client.getNextReply();\n    assert(msg == null, 'did not stop 2');\n    assert(after_fired === true, 'after fired after stop');\n  });","file":"Dialog.tests.js","skipped":false,"dir":"packages/botkit/tests"},{"name":"should call handlers for addQuestion and ask with entire message payload","suites":["Botkit dialog"],"updatePoint":{"line":475,"column":78,"index":19511},"line":475,"code":"  it('should call handlers for addQuestion and ask with entire message payload', async () => {\n    const conversation = new BotkitConversation('nameConvo', bot);\n    let correct1 = false;\n    let correct2 = false;\n    let correct3 = false;\n    let correct4 = false;\n    let correct5 = false;\n    conversation.ask('First name?', async (response, convo, bot, message) => {\n      correct1 = message.type === ActivityTypes.Message && message.text === 'Tony' && response === message.text;\n      convo.gotoThread('last_name');\n    }, 'firstName');\n    conversation.addQuestion('Last name?', async (response, convo, bot, message) => {\n      correct2 = message.type === ActivityTypes.Message && message.text === 'Stark' && response === message.text;\n      convo.gotoThread('address');\n    }, 'lastName', 'last_name');\n    conversation.addQuestion('Address?', async (response, convo, bot, message) => {\n      correct3 = message.type === ActivityTypes.Message && message.text === '10880 Malibu Point, 90265, Malibu, California' && response === message.text;\n      convo.gotoThread('color');\n    }, 'address', 'address');\n    conversation.addQuestion('Favourite Color?', [{\n      default: true,\n      handler: async (response, convo, bot, message) => {\n        correct4 = message.type === ActivityTypes.Message && response === message.text;\n        await convo.repeat();\n      }\n    }, {\n      pattern: 'Red',\n      handler: async (response, convo, bot, message) => {\n        correct5 = message.type === ActivityTypes.Message && message.text === 'Red' && response === message.text;\n        await convo.stop();\n      }\n    }], 'color', 'color');\n    bot.addDialog(conversation); // set up a test client\n\n    const client = new BotkitTestClient('test', bot, ['nameConvo']);\n    let msg = await client.sendActivity('..');\n    assert(msg.text === 'First name?', 'first prompt wrong');\n    msg = await client.sendActivity('Tony');\n    assert(msg.text === 'Last name?', 'second prompt wrong');\n    msg = await client.sendActivity('Stark');\n    assert(msg.text === 'Address?', 'third prompt wrong');\n    msg = await client.sendActivity('10880 Malibu Point, 90265, Malibu, California');\n    assert(msg.text === 'Favourite Color?', 'fourth prompt wrong');\n    msg = await client.sendActivity('Black');\n    assert(msg.text === 'Favourite Color?', 'repeat prompt wrong');\n    msg = await client.sendActivity('Red');\n    assert(correct1, 'message text not correct for prompt1');\n    assert(correct2, 'message text not correct for prompt2');\n    assert(correct3, 'message text not correct for prompt3');\n    assert(correct4, 'message text not correct for prompt4');\n    assert(correct5, 'message text not correct for prompt5');\n  });","file":"Dialog.tests.js","skipped":false,"dir":"packages/botkit/tests"},{"name":"should generate appropriate state key","suites":["BotkitConversationState"],"updatePoint":{"line":14,"column":43,"index":346},"line":14,"code":"  it('should generate appropriate state key', function () {\n    const key = state.getStorageKey({\n      activity: {\n        channelId: 'test',\n        from: {\n          id: 'foo'\n        },\n        conversation: {\n          id: 'bar'\n        }\n      }\n    });\n    assert(key === 'test/conversations/bar-foo/', 'failed key gen');\n  });","file":"State.tests.js","skipped":false,"dir":"packages/botkit/tests"},{"name":"should generate appropriate state key excluding properties field","suites":["BotkitConversationState"],"updatePoint":{"line":28,"column":70,"index":708},"line":28,"code":"  it('should generate appropriate state key excluding properties field', function () {\n    const key = state.getStorageKey({\n      activity: {\n        channelId: 'test',\n        from: {\n          id: 'foo'\n        },\n        conversation: {\n          properties: {\n            baz: true\n          },\n          id: 'bar'\n        }\n      }\n    });\n    assert(key === 'test/conversations/bar-foo/', 'failed key gen');\n  });","file":"State.tests.js","skipped":false,"dir":"packages/botkit/tests"},{"name":"should generate appropriate state key including platform field","suites":["BotkitConversationState"],"updatePoint":{"line":45,"column":68,"index":1127},"line":45,"code":"  it('should generate appropriate state key including platform field', function () {\n    const key = state.getStorageKey({\n      activity: {\n        channelId: 'test',\n        from: {\n          id: 'foo'\n        },\n        conversation: {\n          threadId: '5',\n          channel: '9',\n          id: 'bar'\n        }\n      }\n    });\n    assert(key === 'test/conversations/9-bar-5-foo/', 'failed key gen');\n  });","file":"State.tests.js","skipped":false,"dir":"packages/botkit/tests"}]}