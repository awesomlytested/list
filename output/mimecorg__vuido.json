{
    "repo": "mimecorg/vuido",
    "url": "https://github.com/mimecorg/vuido",
    "branch": "master",
    "configs": [
        {
            "package": "vuido",
            "lang": "js",
            "dir": "test",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        }
    ],
    "tests": [
        {
            "name": "static example",
            "suites": [
                "compiler"
            ],
            "updatePoint": {
                "line": 8,
                "column": 20
            },
            "line": 8,
            "code": "  it('static example', () => {\n    const result = compile('<Window width=\"800\" height=\"600\" title=\"foo\"><Text>bar</Text></Window>');\n    expect(result.render).to.equal(`with(this){return _m(0)}`);\n    expect(result.staticRenderFns[0]).to.equal(`with(this){return _c('Window',{attrs:{\"width\":\"800\",\"height\":\"600\",\"title\":\"foo\"}},[_c('Text',[_v(\"bar\")])])}`);\n  });",
            "file": "spec/compiler.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "ignore whitespace",
            "suites": [
                "compiler"
            ],
            "updatePoint": {
                "line": 13,
                "column": 23
            },
            "line": 13,
            "code": "  it('ignore whitespace', () => {\n    const result = compile('<Window><Box><Button/> <Button/></Box></Window>');\n    expect(result.render).to.equal(`with(this){return _m(0)}`);\n    expect(result.staticRenderFns[0]).to.equal(`with(this){return _c('Window',[_c('Box',[_c('Button'),_c('Button')])])}`);\n  });",
            "file": "spec/compiler.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "interpolated data",
            "suites": [
                "compiler"
            ],
            "updatePoint": {
                "line": 18,
                "column": 23
            },
            "line": 18,
            "code": "  it('interpolated data', () => {\n    const result = compile('<Window v-bind:width=\"width\" v-bind:height=\"width\" v-bind:title=\"title\"><Text>{{ label }}</Text></Window>');\n    expect(result.render).to.equal(`with(this){return _c('Window',{attrs:{\"width\":width,\"height\":width,\"title\":title}},[_c('Text',[_v(_s(label))])])}`);\n  });",
            "file": "spec/compiler.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "v-on directive",
            "suites": [
                "compiler"
            ],
            "updatePoint": {
                "line": 22,
                "column": 20
            },
            "line": 22,
            "code": "  it('v-on directive', () => {\n    const result = compile('<Window v-on:close=\"close\"><Button v-on:click=\"click\">foo</Button></Window>');\n    expect(result.render).to.equal(`with(this){return _c('Window',{on:{\"close\":close}},[_c('Button',{on:{\"click\":click}},[_v(\"foo\")])])}`);\n  });",
            "file": "spec/compiler.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "v-model directive",
            "suites": [
                "compiler"
            ],
            "updatePoint": {
                "line": 26,
                "column": 23
            },
            "line": 26,
            "code": "  it('v-model directive', () => {\n    const result1 = compile('<Window><TextInput v-model=\"data\"/></Window>');\n    expect(result1.render).to.equal(`with(this){return _c('Window',[_c('TextInput',{attrs:{\"value\":(data)},on:{\"input\":function($event){data=$event}}})])}`);\n    const result2 = compile('<Window><Checkbox v-model=\"data\"/></Window>');\n    expect(result2.render).to.equal(`with(this){return _c('Window',[_c('Checkbox',{attrs:{\"checked\":(data)},on:{\"toggle\":function($event){data=$event}}})])}`);\n    const result3 = compile('<Window><DropdownList v-model=\"data\"/></Window>');\n    expect(result3.render).to.equal(`with(this){return _c('Window',[_c('DropdownList',{attrs:{\"selected\":(data)},on:{\"change\":function($event){data=$event}}})])}`);\n    const result4 = compile('<Window><CustomComponent v-model=\"data\"/></Window>');\n    expect(result4.render).to.equal(`with(this){return _c('Window',[_c('CustomComponent',{model:{value:(data),callback:function ($$v) {data=$$v},expression:\"data\"}})],1)}`);\n  });",
            "file": "spec/compiler.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "constructor",
            "suites": [
                "Area"
            ],
            "updatePoint": {
                "line": 16,
                "column": 17
            },
            "line": 16,
            "code": "  it('constructor', () => {\n    const area = new Area('Area');\n    expect(area.parentNode).to.be.null;\n    expect(area.prevSibling).to.be.null;\n    expect(area.nextSibling).to.be.null;\n    expect(area.tagName).to.equal('Area');\n    expect(area.childNodes).to.be.an('array').that.is.empty;\n    expect(area.attributes).to.deep.equal({\n      visible: true,\n      enabled: true,\n      stretchy: false,\n      label: '',\n      scrollable: false,\n      width: 0,\n      height: 0\n    });\n    expect(area.handlers).to.be.an('object').that.is.empty;\n    expect(area.widget).to.be.null;\n  });",
            "file": "spec/elements/area.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "default",
            "suites": [
                "Area",
                "_mountWidget"
            ],
            "updatePoint": {
                "line": 36,
                "column": 15
            },
            "line": 36,
            "code": "    it('default', () => {\n      const area = new Area('Area');\n      sinon.spy(libui, 'UiArea');\n\n      area._mountWidget();\n\n      expect(area.widget).to.be.an.instanceof(libui.UiArea);\n      expect(libui.UiArea).to.have.been.calledWithNew.and.calledWithExactly(sinon.match.func, sinon.match.func, sinon.match.func, sinon.match.func, sinon.match.func);\n    });",
            "file": "spec/elements/area.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "with attributes",
            "suites": [
                "Area",
                "_mountWidget"
            ],
            "updatePoint": {
                "line": 45,
                "column": 23
            },
            "line": 45,
            "code": "    it('with attributes', () => {\n      const area = new Area('Area');\n      area.setAttribute('scrollable', true);\n      area.setAttribute('width', 800);\n      area.setAttribute('height', 600);\n      sinon.spy(libui, 'UiArea');\n\n      area._mountWidget();\n\n      expect(libui.UiArea).to.have.been.calledWithNew.and.calledWithExactly(sinon.match.func, sinon.match.func, sinon.match.func, sinon.match.func, sinon.match.func, 800, 600);\n    });",
            "file": "spec/elements/area.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "with draw event listener",
            "suites": [
                "Area",
                "_mountWidget"
            ],
            "updatePoint": {
                "line": 56,
                "column": 32
            },
            "line": 56,
            "code": "    it('with draw event listener', () => {\n      const area = new Area('Area');\n      const handler = sinon.stub();\n      area.addEventListener('draw', handler);\n      sinon.spy(libui, 'UiArea');\n\n      area._mountWidget();\n\n      expect(libui.UiArea).to.have.been.calledWith(sinon.match(callback => {\n        const params = {};\n        callback(area, params);\n        expect(handler).to.have.been.calledWith(params);\n        return true;\n      }));\n    });",
            "file": "spec/elements/area.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "with mouse event listener",
            "suites": [
                "Area",
                "_mountWidget"
            ],
            "updatePoint": {
                "line": 71,
                "column": 33
            },
            "line": 71,
            "code": "    it('with mouse event listener', () => {\n      const area = new Area('Area');\n      const downHandler = sinon.stub();\n      const upHandler = sinon.stub();\n      const moveHandler = sinon.stub();\n      area.addEventListener('mousedown', downHandler);\n      area.addEventListener('mouseup', upHandler);\n      area.addEventListener('mousemove', moveHandler);\n      sinon.spy(libui, 'UiArea');\n\n      area._mountWidget();\n\n      expect(libui.UiArea).to.have.been.calledWith(sinon.match.func, sinon.match(callback => {\n        const downEvent = {\n          getUp() {\n            return 0;\n          },\n\n          getDown() {\n            return 1;\n          }\n\n        };\n        callback(area, downEvent);\n        expect(downHandler).to.have.been.calledWith(downEvent);\n        const upEvent = {\n          getUp() {\n            return 1;\n          },\n\n          getDown() {\n            return 0;\n          }\n\n        };\n        callback(area, upEvent);\n        expect(upHandler).to.have.been.calledWith(upEvent);\n        const moveEvent = {\n          getUp() {\n            return 0;\n          },\n\n          getDown() {\n            return 0;\n          }\n\n        };\n        callback(area, moveEvent);\n        expect(moveHandler).to.have.been.calledWith(moveEvent);\n        return true;\n      }));\n    });",
            "file": "spec/elements/area.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "with mouse crossed event listener",
            "suites": [
                "Area",
                "_mountWidget"
            ],
            "updatePoint": {
                "line": 123,
                "column": 41
            },
            "line": 123,
            "code": "    it('with mouse crossed event listener', () => {\n      const area = new Area('Area');\n      const enterHandler = sinon.stub();\n      const leaveHandler = sinon.stub();\n      area.addEventListener('mouseenter', enterHandler);\n      area.addEventListener('mouseleave', leaveHandler);\n      sinon.spy(libui, 'UiArea');\n\n      area._mountWidget();\n\n      expect(libui.UiArea).to.have.been.calledWith(sinon.match.func, sinon.match.func, sinon.match(callback => {\n        callback(area, false);\n        expect(enterHandler).to.have.been.called;\n        callback(area, true);\n        expect(leaveHandler).to.have.been.called;\n        return true;\n      }));\n    });",
            "file": "spec/elements/area.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "with drag broken event listener",
            "suites": [
                "Area",
                "_mountWidget"
            ],
            "updatePoint": {
                "line": 141,
                "column": 39
            },
            "line": 141,
            "code": "    it('with drag broken event listener', () => {\n      const area = new Area('Area');\n      const handler = sinon.stub();\n      area.addEventListener('dragbroken', handler);\n      sinon.spy(libui, 'UiArea');\n\n      area._mountWidget();\n\n      expect(libui.UiArea).to.have.been.calledWith(sinon.match.func, sinon.match.func, sinon.match.func, sinon.match(callback => {\n        callback(area);\n        expect(handler).to.have.been.called;\n        return true;\n      }));\n    });",
            "file": "spec/elements/area.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "with key event listener",
            "suites": [
                "Area",
                "_mountWidget"
            ],
            "updatePoint": {
                "line": 155,
                "column": 31
            },
            "line": 155,
            "code": "    it('with key event listener', () => {\n      const area = new Area('Area');\n      const downHandler = sinon.stub();\n      const upHandler = sinon.stub();\n      area.addEventListener('keydown', downHandler);\n      area.addEventListener('keyup', upHandler);\n      sinon.spy(libui, 'UiArea');\n\n      area._mountWidget();\n\n      expect(libui.UiArea).to.have.been.calledWith(sinon.match.func, sinon.match.func, sinon.match.func, sinon.match.func, sinon.match(callback => {\n        const downEvent = {\n          getUp() {\n            return false;\n          }\n\n        };\n        callback(area, downEvent);\n        expect(downHandler).to.have.been.calledWith(downEvent);\n        const upEvent = {\n          getUp() {\n            return true;\n          }\n\n        };\n        callback(area, upEvent);\n        expect(upHandler).to.have.been.calledWith(upEvent);\n        return true;\n      }));\n    });",
            "file": "spec/elements/area.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "with child AreaPath",
            "suites": [
                "Area",
                "_mountWidget"
            ],
            "updatePoint": {
                "line": 185,
                "column": 27
            },
            "line": 185,
            "code": "    it('with child AreaPath', () => {\n      const area = new Area('Area');\n      const areaPath = new AreaPath('AreaPath');\n      const path = {};\n      const fill = {};\n      const stroke = {};\n      area.appendChild(areaPath);\n      areaPath.setAttribute('path', path);\n      areaPath.setAttribute('fill', fill);\n      areaPath.setAttribute('stroke', stroke);\n      sinon.spy(libui, 'UiArea');\n\n      area._mountWidget();\n\n      expect(libui.UiArea).to.have.been.calledWith(sinon.match(callback => {\n        const context = {\n          fill: sinon.stub(),\n          stroke: sinon.stub()\n        };\n        const params = {\n          getContext() {\n            return context;\n          }\n\n        };\n        callback(area, params);\n        expect(context.fill).to.have.been.calledWith(path, fill);\n        expect(context.stroke).to.have.been.calledWith(path, stroke, sinon.match(line => {\n          expect(line.thickness).to.equal(1);\n          return true;\n        }));\n        return true;\n      }));\n    });",
            "file": "spec/elements/area.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "with child AreaText",
            "suites": [
                "Area",
                "_mountWidget"
            ],
            "updatePoint": {
                "line": 219,
                "column": 27
            },
            "line": 219,
            "code": "    it('with child AreaText', () => {\n      const area = new Area('Area');\n      const areaText = new AreaText('AreaText');\n      const layout = {};\n      area.appendChild(areaText);\n      areaText.setAttribute('x', 100);\n      areaText.setAttribute('y', 50);\n      areaText.setAttribute('layout', layout);\n      sinon.spy(libui, 'UiArea');\n\n      area._mountWidget();\n\n      expect(libui.UiArea).to.have.been.calledWith(sinon.match(callback => {\n        const context = {\n          text: sinon.stub()\n        };\n        const params = {\n          getContext() {\n            return context;\n          }\n\n        };\n        callback(area, params);\n        expect(context.text).to.have.been.calledWith(100, 50, layout);\n        return true;\n      }));\n    });",
            "file": "spec/elements/area.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "with child AreaGroup",
            "suites": [
                "Area",
                "_mountWidget"
            ],
            "updatePoint": {
                "line": 246,
                "column": 28
            },
            "line": 246,
            "code": "    it('with child AreaGroup', () => {\n      const area = new Area('Area');\n      const areaGroup = new AreaGroup('AreaGroup');\n      const areaPath1 = new AreaPath('AreaPath');\n      const areaPath2 = new AreaPath('AreaPath');\n      const transform = {};\n      const path1 = {};\n      const fill1 = {};\n      const stroke1 = {};\n      const line1 = {};\n      const path2 = {};\n      const fill2 = {};\n      const stroke2 = {};\n      const line2 = {};\n      area.appendChild(areaGroup);\n      areaGroup.setAttribute('transform', transform);\n      areaGroup.setAttribute('fill', fill1);\n      areaGroup.setAttribute('stroke', stroke1);\n      areaGroup.setAttribute('line', line1);\n      areaGroup.appendChild(areaPath1);\n      areaPath1.setAttribute('path', path1);\n      areaGroup.appendChild(areaPath2);\n      areaPath2.setAttribute('path', path2);\n      areaPath2.setAttribute('fill', fill2);\n      areaPath2.setAttribute('stroke', stroke2);\n      areaPath2.setAttribute('line', line2);\n      sinon.spy(libui, 'UiArea');\n\n      area._mountWidget();\n\n      expect(libui.UiArea).to.have.been.calledWith(sinon.match(callback => {\n        const context = {\n          fill: sinon.stub(),\n          stroke: sinon.stub(),\n          save: sinon.stub(),\n          transform: sinon.stub(),\n          restore: sinon.stub()\n        };\n        const params = {\n          getContext() {\n            return context;\n          }\n\n        };\n        callback(area, params);\n        expect(context.save).to.have.been.called;\n        expect(context.transform).to.have.been.calledImmediatelyAfter(context.save).and.calledWith(transform);\n        expect(context.fill).to.have.been.calledAfter(context.transform).and.calledBefore(context.restore).and.calledWith(path1, fill1).and.calledWith(path2, fill2);\n        expect(context.stroke).to.have.been.calledAfter(context.transform).and.calledBefore(context.restore).and.calledWith(path1, stroke1, line1).and.calledWith(path2, stroke2, line2);\n        expect(context.restore).to.have.been.called;\n        return true;\n      }));\n    });",
            "file": "spec/elements/area.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "with child widget fails",
            "suites": [
                "Area",
                "_mountWidget"
            ],
            "updatePoint": {
                "line": 299,
                "column": 31
            },
            "line": 299,
            "code": "    it('with child widget fails', () => {\n      const area = new Area('Area');\n      const button = new Button('Button');\n      area.appendChild(button);\n      expect(() => area._mountWidget()).to.throw();\n    });",
            "file": "spec/elements/area.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "setAttribute",
            "suites": [
                "Area",
                "modify after _mountWidget"
            ],
            "updatePoint": {
                "line": 307,
                "column": 20
            },
            "line": 307,
            "code": "    it('setAttribute', () => {\n      const area = new Area('Area');\n      area.setAttribute('scrollable', true);\n      area.setAttribute('width', 800);\n      area.setAttribute('height', 600);\n\n      area._mountWidget();\n\n      sinon.spy(libui.UiArea.prototype, 'setSize');\n      area.setAttribute('width', 1600);\n      area.setAttribute('height', 1200);\n      expect(libui.UiArea.prototype.setSize).to.have.been.calledWith(1600, 1200);\n    });",
            "file": "spec/elements/area.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "addEventListener",
            "suites": [
                "Area",
                "modify after _mountWidget"
            ],
            "updatePoint": {
                "line": 320,
                "column": 24
            },
            "line": 320,
            "code": "    it('addEventListener', () => {\n      const area = new Area('Area');\n      const handler = sinon.stub();\n      sinon.spy(libui, 'UiArea');\n\n      area._mountWidget();\n\n      let drawCallback = null;\n      expect(libui.UiArea).to.have.been.calledWith(sinon.match(callback => {\n        drawCallback = callback;\n        return true;\n      }));\n      area.addEventListener('draw', handler);\n      const params = {};\n      drawCallback(area, params);\n      expect(handler).to.have.been.calledWith(params);\n    });",
            "file": "spec/elements/area.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "removeEventListener",
            "suites": [
                "Area",
                "modify after _mountWidget"
            ],
            "updatePoint": {
                "line": 337,
                "column": 27
            },
            "line": 337,
            "code": "    it('removeEventListener', () => {\n      const area = new Area('Area');\n      const handler = sinon.stub();\n      area.addEventListener('draw', handler);\n      sinon.spy(libui, 'UiArea');\n\n      area._mountWidget();\n\n      let drawCallback = null;\n      expect(libui.UiArea).to.have.been.calledWith(sinon.match(callback => {\n        drawCallback = callback;\n        return true;\n      }));\n      area.removeEventListener('draw');\n      const params = {};\n      drawCallback(area, params);\n      expect(handler).to.have.not.been.called;\n    });",
            "file": "spec/elements/area.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "appendChild",
            "suites": [
                "Area",
                "modify after _mountWidget"
            ],
            "updatePoint": {
                "line": 355,
                "column": 19
            },
            "line": 355,
            "code": "    it('appendChild', () => {\n      const area = new Area('Area');\n      const areaPath = new AreaPath('AreaPath');\n\n      area._mountWidget();\n\n      sinon.spy(libui.UiArea.prototype, 'queueRedrawAll');\n      area.appendChild(areaPath);\n      expect(libui.UiArea.prototype.queueRedrawAll).to.have.been.calledOn(area.widget);\n    });",
            "file": "spec/elements/area.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "insertChild",
            "suites": [
                "Area",
                "modify after _mountWidget"
            ],
            "updatePoint": {
                "line": 365,
                "column": 19
            },
            "line": 365,
            "code": "    it('insertChild', () => {\n      const area = new Area('Area');\n      const areaPath1 = new AreaPath('AreaPath');\n      const areaPath2 = new AreaPath('AreaPath');\n      area.appendChild(areaPath1);\n\n      area._mountWidget();\n\n      sinon.spy(libui.UiArea.prototype, 'queueRedrawAll');\n      area.insertBefore(areaPath2, areaPath1);\n      expect(libui.UiArea.prototype.queueRedrawAll).to.have.been.calledOn(area.widget);\n    });",
            "file": "spec/elements/area.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "removeChild",
            "suites": [
                "Area",
                "modify after _mountWidget"
            ],
            "updatePoint": {
                "line": 377,
                "column": 19
            },
            "line": 377,
            "code": "    it('removeChild', () => {\n      const area = new Area('Area');\n      const areaPath = new AreaPath('AreaPath');\n      area.appendChild(areaPath);\n\n      area._mountWidget();\n\n      sinon.spy(libui.UiArea.prototype, 'queueRedrawAll');\n      area.removeChild(areaPath);\n      expect(libui.UiArea.prototype.queueRedrawAll).to.have.been.calledOn(area.widget);\n    });",
            "file": "spec/elements/area.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "setAttribute on AreaPath",
            "suites": [
                "Area",
                "modify after _mountWidget"
            ],
            "updatePoint": {
                "line": 388,
                "column": 32
            },
            "line": 388,
            "code": "    it('setAttribute on AreaPath', () => {\n      const area = new Area('Area');\n      const areaPath = new AreaPath('AreaPath');\n      area.appendChild(areaPath);\n\n      area._mountWidget();\n\n      sinon.spy(libui.UiArea.prototype, 'queueRedrawAll');\n      areaPath.setAttribute('path', {});\n      expect(libui.UiArea.prototype.queueRedrawAll).to.have.been.calledOn(area.widget);\n    });",
            "file": "spec/elements/area.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "setAttribute on AreaText",
            "suites": [
                "Area",
                "modify after _mountWidget"
            ],
            "updatePoint": {
                "line": 399,
                "column": 32
            },
            "line": 399,
            "code": "    it('setAttribute on AreaText', () => {\n      const area = new Area('Area');\n      const areaText = new AreaText('AreaText');\n      area.appendChild(areaText);\n\n      area._mountWidget();\n\n      sinon.spy(libui.UiArea.prototype, 'queueRedrawAll');\n      areaText.setAttribute('layout', {});\n      expect(libui.UiArea.prototype.queueRedrawAll).to.have.been.calledOn(area.widget);\n    });",
            "file": "spec/elements/area.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "setAttribute on AreaGroup",
            "suites": [
                "Area",
                "modify after _mountWidget"
            ],
            "updatePoint": {
                "line": 410,
                "column": 33
            },
            "line": 410,
            "code": "    it('setAttribute on AreaGroup', () => {\n      const area = new Area('Area');\n      const areaGroup = new AreaGroup('AreaGroup');\n      area.appendChild(areaGroup);\n\n      area._mountWidget();\n\n      sinon.spy(libui.UiArea.prototype, 'queueRedrawAll');\n      areaGroup.setAttribute('fill', {});\n      expect(libui.UiArea.prototype.queueRedrawAll).to.have.been.calledOn(area.widget);\n    });",
            "file": "spec/elements/area.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "appendChild on AreaGroup",
            "suites": [
                "Area",
                "modify after _mountWidget"
            ],
            "updatePoint": {
                "line": 421,
                "column": 32
            },
            "line": 421,
            "code": "    it('appendChild on AreaGroup', () => {\n      const area = new Area('Area');\n      const areaGroup = new AreaGroup('AreaGroup');\n      const areaPath = new AreaPath('AreaPath');\n      area.appendChild(areaGroup);\n\n      area._mountWidget();\n\n      sinon.spy(libui.UiArea.prototype, 'queueRedrawAll');\n      areaGroup.appendChild(areaPath);\n      expect(libui.UiArea.prototype.queueRedrawAll).to.have.been.calledOn(area.widget);\n    });",
            "file": "spec/elements/area.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "insertChild on AreaGroup",
            "suites": [
                "Area",
                "modify after _mountWidget"
            ],
            "updatePoint": {
                "line": 433,
                "column": 32
            },
            "line": 433,
            "code": "    it('insertChild on AreaGroup', () => {\n      const area = new Area('Area');\n      const areaGroup = new AreaGroup('AreaGroup');\n      const areaPath1 = new AreaPath('AreaPath');\n      const areaPath2 = new AreaPath('AreaPath');\n      area.appendChild(areaGroup);\n      areaGroup.appendChild(areaPath1);\n\n      area._mountWidget();\n\n      sinon.spy(libui.UiArea.prototype, 'queueRedrawAll');\n      areaGroup.insertBefore(areaPath2, areaPath1);\n      expect(libui.UiArea.prototype.queueRedrawAll).to.have.been.calledOn(area.widget);\n    });",
            "file": "spec/elements/area.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "removeChild on AreaGroup",
            "suites": [
                "Area",
                "modify after _mountWidget"
            ],
            "updatePoint": {
                "line": 447,
                "column": 32
            },
            "line": 447,
            "code": "    it('removeChild on AreaGroup', () => {\n      const area = new Area('Area');\n      const areaGroup = new AreaGroup('AreaGroup');\n      const areaPath = new AreaPath('AreaPath');\n      area.appendChild(areaGroup);\n      areaGroup.appendChild(areaPath);\n\n      area._mountWidget();\n\n      sinon.spy(libui.UiArea.prototype, 'queueRedrawAll');\n      areaGroup.removeChild(areaPath);\n      expect(libui.UiArea.prototype.queueRedrawAll).to.have.been.calledOn(area.widget);\n    });",
            "file": "spec/elements/area.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "appendChild widget on AreaGroup fails",
            "suites": [
                "Area",
                "modify after _mountWidget"
            ],
            "updatePoint": {
                "line": 460,
                "column": 45
            },
            "line": 460,
            "code": "    it('appendChild widget on AreaGroup fails', () => {\n      const area = new Area('Area');\n      const areaGroup = new AreaGroup('AreaGroup');\n      const button = new Button('Button');\n      area.appendChild(areaGroup);\n\n      area._mountWidget();\n\n      expect(() => areaGroup.appendChild(button)).to.throw();\n    });",
            "file": "spec/elements/area.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "constructor",
            "suites": [
                "Box"
            ],
            "updatePoint": {
                "line": 15,
                "column": 17
            },
            "line": 15,
            "code": "  it('constructor', () => {\n    const box = new Box('Box');\n    expect(box.parentNode).to.be.null;\n    expect(box.prevSibling).to.be.null;\n    expect(box.nextSibling).to.be.null;\n    expect(box.tagName).to.equal('Box');\n    expect(box.childNodes).to.be.an('array').that.is.empty;\n    expect(box.attributes).to.deep.equal({\n      visible: true,\n      enabled: true,\n      stretchy: false,\n      label: '',\n      horizontal: false,\n      padded: false\n    });\n    expect(box.handlers).to.be.an('object').that.is.empty;\n    expect(box.widget).to.be.null;\n  });",
            "file": "spec/elements/box.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "default",
            "suites": [
                "Box",
                "_mountWidget"
            ],
            "updatePoint": {
                "line": 34,
                "column": 15
            },
            "line": 34,
            "code": "    it('default', () => {\n      const box = new Box('Box');\n\n      box._mountWidget();\n\n      expect(box.widget).to.be.an.instanceof(libui.UiVerticalBox);\n      expect(box.widget.visible).to.be.true;\n      expect(box.widget.enabled).to.be.true;\n      expect(box.widget.padded).to.be.false;\n      expect(box.widget.children).to.be.an('array').that.is.empty;\n    });",
            "file": "spec/elements/box.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "horizontal",
            "suites": [
                "Box",
                "_mountWidget"
            ],
            "updatePoint": {
                "line": 45,
                "column": 18
            },
            "line": 45,
            "code": "    it('horizontal', () => {\n      const box = new Box('Box');\n      box.setAttribute('horizontal', true);\n\n      box._mountWidget();\n\n      expect(box.widget).to.be.an.instanceof(libui.UiHorizontalBox);\n    });",
            "file": "spec/elements/box.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "with attributes",
            "suites": [
                "Box",
                "_mountWidget"
            ],
            "updatePoint": {
                "line": 53,
                "column": 23
            },
            "line": 53,
            "code": "    it('with attributes', () => {\n      const box = new Box('Box');\n      box.setAttribute('visible', false);\n      box.setAttribute('enabled', false);\n      box.setAttribute('padded', true);\n\n      box._mountWidget();\n\n      expect(box.widget.visible).to.be.false;\n      expect(box.widget.enabled).to.be.false;\n      expect(box.widget.padded).to.be.true;\n    });",
            "file": "spec/elements/box.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "with child text node fails",
            "suites": [
                "Box",
                "_mountWidget"
            ],
            "updatePoint": {
                "line": 65,
                "column": 34
            },
            "line": 65,
            "code": "    it('with child text node fails', () => {\n      const box = new Box('Box');\n      const text = new TextNode('foo');\n      box.appendChild(text);\n      expect(() => button._mountWidget()).to.throw();\n    });",
            "file": "spec/elements/box.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "with child widgets",
            "suites": [
                "Box",
                "_mountWidget"
            ],
            "updatePoint": {
                "line": 71,
                "column": 26
            },
            "line": 71,
            "code": "    it('with child widgets', () => {\n      const box = new Box('Box');\n      const button1 = new Button('Button');\n      const comment = new Comment('foo');\n      const button2 = new Button('Button');\n      box.appendChild(button1);\n      box.appendChild(comment);\n      box.appendChild(button2);\n      sinon.spy(libui.UiBox.prototype, 'append');\n\n      box._mountWidget();\n\n      expect(button1.widget).to.be.instanceof(libui.UiButton);\n      expect(button2.widget).to.be.instanceof(libui.UiButton);\n      expect(libui.UiBox.prototype.append).to.have.been.calledOn(box.widget).and.calledWith(button1.widget, false).and.calledWith(button2.widget, false);\n      expect(box.widget.children).to.deep.equal([button1.widget, button2.widget]);\n    });",
            "file": "spec/elements/box.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "with stretchy child widget",
            "suites": [
                "Box",
                "_mountWidget"
            ],
            "updatePoint": {
                "line": 88,
                "column": 34
            },
            "line": 88,
            "code": "    it('with stretchy child widget', () => {\n      const box = new Box('Box');\n      const button = new Button('Button');\n      button.setAttribute('stretchy', true);\n      box.appendChild(button);\n      sinon.spy(libui.UiBox.prototype, 'append');\n\n      box._mountWidget();\n\n      expect(libui.UiBox.prototype.append).to.have.been.calledOn(box.widget).and.calledWith(button.widget, true);\n    });",
            "file": "spec/elements/box.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "appendChild element",
            "suites": [
                "Box",
                "manipulate children after _mountWidget"
            ],
            "updatePoint": {
                "line": 101,
                "column": 27
            },
            "line": 101,
            "code": "    it('appendChild element', () => {\n      const box = new Box('Box');\n      const button = new Button('Button');\n\n      box._mountWidget();\n\n      sinon.spy(libui.UiBox.prototype, 'append');\n      box.appendChild(button);\n      expect(button.widget).to.be.instanceof(libui.UiButton);\n      expect(libui.UiBox.prototype.append).to.have.been.calledOn(box.widget).and.calledWith(button.widget, false);\n      expect(box.widget.children).to.deep.equal([button.widget]);\n    });",
            "file": "spec/elements/box.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "appendChild text node fails",
            "suites": [
                "Box",
                "manipulate children after _mountWidget"
            ],
            "updatePoint": {
                "line": 113,
                "column": 35
            },
            "line": 113,
            "code": "    it('appendChild text node fails', () => {\n      const box = new Box('Box');\n      const text = new TextNode('foo');\n\n      box._mountWidget();\n\n      expect(() => box.appendChild(text)).to.throw();\n    });",
            "file": "spec/elements/box.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "appendChild comment",
            "suites": [
                "Box",
                "manipulate children after _mountWidget"
            ],
            "updatePoint": {
                "line": 121,
                "column": 27
            },
            "line": 121,
            "code": "    it('appendChild comment', () => {\n      const box = new Box('Box');\n      const comment = new Comment('foo');\n\n      box._mountWidget();\n\n      box.appendChild(comment);\n      expect(box.widget.children).to.be.an('array').that.is.empty;\n    });",
            "file": "spec/elements/box.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "insertBefore at the start",
            "suites": [
                "Box",
                "manipulate children after _mountWidget"
            ],
            "updatePoint": {
                "line": 141,
                "column": 33
            },
            "line": 141,
            "code": "    it('insertBefore at the start', () => {\n      const box = new Box('Box');\n      const button1 = new Button('Button');\n      const button2 = new Button('Button');\n      const button3 = new Button('Button');\n      box.appendChild(button1);\n      box.appendChild(button2);\n\n      box._mountWidget();\n\n      box.insertBefore(button3, button1);\n      expectChildren(box, [button3, button1, button2]);\n    });",
            "file": "spec/elements/box.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "insertBefore at the end",
            "suites": [
                "Box",
                "manipulate children after _mountWidget"
            ],
            "updatePoint": {
                "line": 154,
                "column": 31
            },
            "line": 154,
            "code": "    it('insertBefore at the end', () => {\n      const box = new Box('Box');\n      const button1 = new Button('Button');\n      const button2 = new Button('Button');\n      const button3 = new Button('Button');\n      box.appendChild(button1);\n      box.appendChild(button2);\n\n      box._mountWidget();\n\n      box.insertBefore(button3, null);\n      expectChildren(box, [button1, button2, button3]);\n    });",
            "file": "spec/elements/box.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "insertBefore in the middle",
            "suites": [
                "Box",
                "manipulate children after _mountWidget"
            ],
            "updatePoint": {
                "line": 167,
                "column": 34
            },
            "line": 167,
            "code": "    it('insertBefore in the middle', () => {\n      const box = new Box('Box');\n      const button1 = new Button('Button');\n      const button2 = new Button('Button');\n      const button3 = new Button('Button');\n      box.appendChild(button1);\n      box.appendChild(button2);\n\n      box._mountWidget();\n\n      box.insertBefore(button3, button2);\n      expectChildren(box, [button1, button3, button2]);\n    });",
            "file": "spec/elements/box.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "insertBefore move to the start",
            "suites": [
                "Box",
                "manipulate children after _mountWidget"
            ],
            "updatePoint": {
                "line": 180,
                "column": 38
            },
            "line": 180,
            "code": "    it('insertBefore move to the start', () => {\n      const box = new Box('Box');\n      const button1 = new Button('Button');\n      const button2 = new Button('Button');\n      const button3 = new Button('Button');\n      box.appendChild(button1);\n      box.appendChild(button2);\n      box.appendChild(button3);\n\n      box._mountWidget();\n\n      box.insertBefore(button2, button1);\n      expectChildren(box, [button2, button1, button3]);\n    });",
            "file": "spec/elements/box.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "insertBefore move to the end",
            "suites": [
                "Box",
                "manipulate children after _mountWidget"
            ],
            "updatePoint": {
                "line": 194,
                "column": 36
            },
            "line": 194,
            "code": "    it('insertBefore move to the end', () => {\n      const box = new Box('Box');\n      const button1 = new Button('Button');\n      const button2 = new Button('Button');\n      const button3 = new Button('Button');\n      box.appendChild(button1);\n      box.appendChild(button2);\n      box.appendChild(button3);\n\n      box._mountWidget();\n\n      box.insertBefore(button2, null);\n      expectChildren(box, [button1, button3, button2]);\n    });",
            "file": "spec/elements/box.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "insertBefore move left",
            "suites": [
                "Box",
                "manipulate children after _mountWidget"
            ],
            "updatePoint": {
                "line": 208,
                "column": 30
            },
            "line": 208,
            "code": "    it('insertBefore move left', () => {\n      const box = new Box('Box');\n      const button1 = new Button('Button');\n      const button2 = new Button('Button');\n      const button3 = new Button('Button');\n      const button4 = new Button('Button');\n      box.appendChild(button1);\n      box.appendChild(button2);\n      box.appendChild(button3);\n      box.appendChild(button4);\n\n      box._mountWidget();\n\n      box.insertBefore(button3, button2);\n      expectChildren(box, [button1, button3, button2, button4]);\n    });",
            "file": "spec/elements/box.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "insertBefore move right",
            "suites": [
                "Box",
                "manipulate children after _mountWidget"
            ],
            "updatePoint": {
                "line": 224,
                "column": 31
            },
            "line": 224,
            "code": "    it('insertBefore move right', () => {\n      const box = new Box('Box');\n      const button1 = new Button('Button');\n      const button2 = new Button('Button');\n      const button3 = new Button('Button');\n      const button4 = new Button('Button');\n      box.appendChild(button1);\n      box.appendChild(button2);\n      box.appendChild(button3);\n      box.appendChild(button4);\n\n      box._mountWidget();\n\n      box.insertBefore(button2, button4);\n      expectChildren(box, [button1, button3, button2, button4]);\n    });",
            "file": "spec/elements/box.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "insertBefore move with comments",
            "suites": [
                "Box",
                "manipulate children after _mountWidget"
            ],
            "updatePoint": {
                "line": 240,
                "column": 39
            },
            "line": 240,
            "code": "    it('insertBefore move with comments', () => {\n      const box = new Box('Box');\n      const button1 = new Button('Button');\n      const button2 = new Button('Button');\n      const button3 = new Button('Button');\n      const comment1 = new Comment('foo');\n      const comment2 = new Comment('bar');\n      box.appendChild(button1);\n      box.appendChild(comment1);\n      box.appendChild(button2);\n      box.appendChild(comment2);\n      box.appendChild(button3);\n\n      box._mountWidget();\n\n      box.insertBefore(button3, comment1);\n      box.insertBefore(button1, comment2);\n      expectChildren(box, [button3, button2, button1]);\n    });",
            "file": "spec/elements/box.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "removeChild from the start",
            "suites": [
                "Box",
                "manipulate children after _mountWidget"
            ],
            "updatePoint": {
                "line": 259,
                "column": 34
            },
            "line": 259,
            "code": "    it('removeChild from the start', () => {\n      const box = new Box('Box');\n      const button1 = new Button('Button');\n      const button2 = new Button('Button');\n      const button3 = new Button('Button');\n      box.appendChild(button1);\n      box.appendChild(button2);\n      box.appendChild(button3);\n\n      box._mountWidget();\n\n      box.removeChild(button1);\n      expectChildren(box, [button2, button3]);\n    });",
            "file": "spec/elements/box.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "removeChild from the end",
            "suites": [
                "Box",
                "manipulate children after _mountWidget"
            ],
            "updatePoint": {
                "line": 273,
                "column": 32
            },
            "line": 273,
            "code": "    it('removeChild from the end', () => {\n      const box = new Box('Box');\n      const button1 = new Button('Button');\n      const button2 = new Button('Button');\n      const button3 = new Button('Button');\n      box.appendChild(button1);\n      box.appendChild(button2);\n      box.appendChild(button3);\n\n      box._mountWidget();\n\n      box.removeChild(button3);\n      expectChildren(box, [button1, button2]);\n    });",
            "file": "spec/elements/box.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "removeChild from the middle",
            "suites": [
                "Box",
                "manipulate children after _mountWidget"
            ],
            "updatePoint": {
                "line": 287,
                "column": 35
            },
            "line": 287,
            "code": "    it('removeChild from the middle', () => {\n      const box = new Box('Box');\n      const button1 = new Button('Button');\n      const button2 = new Button('Button');\n      const button3 = new Button('Button');\n      box.appendChild(button1);\n      box.appendChild(button2);\n      box.appendChild(button3);\n\n      box._mountWidget();\n\n      box.removeChild(button2);\n      expectChildren(box, [button1, button3]);\n    });",
            "file": "spec/elements/box.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "removeChild destroys removed widgets",
            "suites": [
                "Box",
                "manipulate children after _mountWidget"
            ],
            "updatePoint": {
                "line": 301,
                "column": 44
            },
            "line": 301,
            "code": "    it('removeChild destroys removed widgets', () => {\n      const box = new Box('Box');\n      const box2 = new Box('Box');\n      const button1 = new Button('Button');\n      const button2 = new Button('Button');\n      box.appendChild(box2);\n      box2.appendChild(button1);\n      box2.appendChild(button2);\n\n      box._mountWidget();\n\n      sinon.spy(libui.UiControl.prototype, 'destroy');\n      const widget = box2.widget;\n      box.removeChild(box2);\n      expect(box.childNodes).to.be.an('array').that.is.empty;\n      expect(box2.widget).to.be.null;\n      expect(button1.widget).to.be.null;\n      expect(button2.widget).to.be.null;\n      expect(libui.UiControl.prototype.destroy).to.have.been.calledOn(widget);\n    });",
            "file": "spec/elements/box.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "constructor",
            "suites": [
                "Button"
            ],
            "updatePoint": {
                "line": 13,
                "column": 17
            },
            "line": 13,
            "code": "  it('constructor', () => {\n    const button = new Button('Button');\n    expect(button.parentNode).to.be.null;\n    expect(button.prevSibling).to.be.null;\n    expect(button.nextSibling).to.be.null;\n    expect(button.tagName).to.equal('Button');\n    expect(button.childNodes).to.be.an('array').that.is.empty;\n    expect(button.attributes).to.deep.equal({\n      visible: true,\n      enabled: true,\n      stretchy: false,\n      label: ''\n    });\n    expect(button.handlers).to.be.an('object').that.is.empty;\n    expect(button.widget).to.be.null;\n  });",
            "file": "spec/elements/button.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "default",
            "suites": [
                "Button",
                "_mountWidget"
            ],
            "updatePoint": {
                "line": 30,
                "column": 15
            },
            "line": 30,
            "code": "    it('default', () => {\n      const button = new Button('Button');\n\n      button._mountWidget();\n\n      expect(button.widget).to.be.an.instanceof(libui.UiButton);\n      expect(button.widget.visible).to.be.true;\n      expect(button.widget.enabled).to.be.true;\n      expect(button.widget.text).to.be.empty;\n    });",
            "file": "spec/elements/button.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "with attributes",
            "suites": [
                "Button",
                "_mountWidget"
            ],
            "updatePoint": {
                "line": 40,
                "column": 23
            },
            "line": 40,
            "code": "    it('with attributes', () => {\n      const button = new Button('Button');\n      button.setAttribute('visible', false);\n      button.setAttribute('enabled', false);\n\n      button._mountWidget();\n\n      expect(button.widget.visible).to.be.false;\n      expect(button.widget.enabled).to.be.false;\n    });",
            "file": "spec/elements/button.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "with event listener",
            "suites": [
                "Button",
                "_mountWidget"
            ],
            "updatePoint": {
                "line": 50,
                "column": 27
            },
            "line": 50,
            "code": "    it('with event listener', () => {\n      const button = new Button('Button');\n      const handler = sinon.stub();\n      sinon.spy(libui.UiButton.prototype, 'onClicked');\n      button.addEventListener('click', handler);\n\n      button._mountWidget();\n\n      expect(libui.UiButton.prototype.onClicked).to.have.been.calledOn(button.widget).and.calledWith(handler);\n    });",
            "file": "spec/elements/button.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "with child text node",
            "suites": [
                "Button",
                "_mountWidget"
            ],
            "updatePoint": {
                "line": 60,
                "column": 28
            },
            "line": 60,
            "code": "    it('with child text node', () => {\n      const button = new Button('Button');\n      const text = new TextNode('foo');\n      button.appendChild(text);\n\n      button._mountWidget();\n\n      expect(button.widget.text).to.equal('foo');\n    });",
            "file": "spec/elements/button.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "with child element fails",
            "suites": [
                "Button",
                "_mountWidget"
            ],
            "updatePoint": {
                "line": 69,
                "column": 32
            },
            "line": 69,
            "code": "    it('with child element fails', () => {\n      const button = new Button('Button');\n      const child = new Button('Button');\n      button.appendChild(child);\n      expect(() => button._mountWidget()).to.throw();\n    });",
            "file": "spec/elements/button.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "setAttribute",
            "suites": [
                "Button",
                "modify after _mountWidget"
            ],
            "updatePoint": {
                "line": 77,
                "column": 20
            },
            "line": 77,
            "code": "    it('setAttribute', () => {\n      const button = new Button('Button');\n\n      button._mountWidget();\n\n      button.setAttribute('visible', false);\n      button.setAttribute('enabled', false);\n      expect(button.widget.visible).to.be.false;\n      expect(button.widget.enabled).to.be.false;\n    });",
            "file": "spec/elements/button.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "addEventListener",
            "suites": [
                "Button",
                "modify after _mountWidget"
            ],
            "updatePoint": {
                "line": 87,
                "column": 24
            },
            "line": 87,
            "code": "    it('addEventListener', () => {\n      const button = new Button('Button');\n      const handler = sinon.stub();\n      sinon.spy(libui.UiButton.prototype, 'onClicked');\n\n      button._mountWidget();\n\n      button.addEventListener('click', handler);\n      expect(libui.UiButton.prototype.onClicked).to.have.been.calledOn(button.widget).and.calledWith(handler);\n    });",
            "file": "spec/elements/button.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "removeEventListener",
            "suites": [
                "Button",
                "modify after _mountWidget"
            ],
            "updatePoint": {
                "line": 97,
                "column": 27
            },
            "line": 97,
            "code": "    it('removeEventListener', () => {\n      const button = new Button('Button');\n      const handler = sinon.stub();\n      button.addEventListener('click', handler);\n\n      button._mountWidget();\n\n      sinon.spy(libui.UiButton.prototype, 'onClicked');\n      button.removeEventListener('click');\n      expect(libui.UiButton.prototype.onClicked).to.have.been.calledOn(button.widget).and.calledWith(null);\n    });",
            "file": "spec/elements/button.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "appendChild text node",
            "suites": [
                "Button",
                "modify after _mountWidget"
            ],
            "updatePoint": {
                "line": 108,
                "column": 29
            },
            "line": 108,
            "code": "    it('appendChild text node', () => {\n      const button = new Button('Button');\n      const text = new TextNode('foo');\n\n      button._mountWidget();\n\n      button.appendChild(text);\n      expect(button.widget.text).to.equal('foo');\n    });",
            "file": "spec/elements/button.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "setText on child text node",
            "suites": [
                "Button",
                "modify after _mountWidget"
            ],
            "updatePoint": {
                "line": 117,
                "column": 34
            },
            "line": 117,
            "code": "    it('setText on child text node', () => {\n      const button = new Button('Button');\n      const text = new TextNode('foo');\n      button.appendChild(text);\n\n      button._mountWidget();\n\n      text.setText('bar');\n      expect(button.widget.text).to.equal('bar');\n    });",
            "file": "spec/elements/button.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "default",
            "suites": [
                "Checkbox"
            ],
            "updatePoint": {
                "line": 13,
                "column": 13
            },
            "line": 13,
            "code": "  it('default', () => {\n    const checkbox = new Checkbox('Checkbox');\n\n    checkbox._mountWidget();\n\n    expect(checkbox.widget).to.be.an.instanceof(libui.UiCheckbox);\n    expect(checkbox.widget.visible).to.be.true;\n    expect(checkbox.widget.enabled).to.be.true;\n    expect(checkbox.widget.text).to.be.empty;\n    expect(checkbox.widget.checked).to.be.false;\n  });",
            "file": "spec/elements/checkbox.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "with text, value and event listener",
            "suites": [
                "Checkbox"
            ],
            "updatePoint": {
                "line": 24,
                "column": 41
            },
            "line": 24,
            "code": "  it('with text, value and event listener', () => {\n    const checkbox = new Checkbox('Checkbox');\n    const text = new TextNode('foo');\n    const handler = sinon.stub();\n    checkbox.setAttribute('checked', true);\n    checkbox.addEventListener('toggle', handler);\n    checkbox.appendChild(text);\n    sinon.spy(libui.UiCheckbox.prototype, 'onToggled');\n\n    checkbox._mountWidget();\n\n    expect(checkbox.widget.text).to.equal('foo');\n    expect(checkbox.widget.checked).to.be.true;\n    expect(libui.UiCheckbox.prototype.onToggled).to.have.been.calledOn(checkbox.widget).and.calledWith(sinon.match(callback => {\n      callback();\n      expect(handler).to.have.been.calledWith(true);\n      return true;\n    }));\n  });",
            "file": "spec/elements/checkbox.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "default",
            "suites": [
                "ColorButton"
            ],
            "updatePoint": {
                "line": 12,
                "column": 13
            },
            "line": 12,
            "code": "  it('default', () => {\n    const button = new ColorButton('ColorButton');\n\n    button._mountWidget();\n\n    expect(button.widget).to.be.an.instanceof(libui.UiColorButton);\n    expect(button.widget.visible).to.be.true;\n    expect(button.widget.enabled).to.be.true;\n    expect(button.widget.color).to.deep.equal(new libui.Color(0, 0, 0, 1));\n  });",
            "file": "spec/elements/colorbutton.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "with value and event listener",
            "suites": [
                "ColorButton"
            ],
            "updatePoint": {
                "line": 22,
                "column": 35
            },
            "line": 22,
            "code": "  it('with value and event listener', () => {\n    const button = new ColorButton('ColorButton');\n    const handler = sinon.stub();\n    const color = new libui.Color(1, 0, 1, 1);\n    button.setAttribute('value', color);\n    button.addEventListener('change', handler);\n    sinon.spy(libui.UiColorButton.prototype, 'onChanged');\n\n    button._mountWidget();\n\n    expect(button.widget.color).to.equal(color);\n    expect(libui.UiColorButton.prototype.onChanged).to.have.been.calledOn(button.widget).and.calledWith(sinon.match(callback => {\n      callback();\n      expect(handler).to.have.been.calledWith(color);\n      return true;\n    }));\n  });",
            "file": "spec/elements/colorbutton.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "default",
            "suites": [
                "Combobox"
            ],
            "updatePoint": {
                "line": 12,
                "column": 13
            },
            "line": 12,
            "code": "  it('default', () => {\n    const combobox = new Combobox('Combobox');\n\n    combobox._mountWidget();\n\n    expect(combobox.widget).to.be.an.instanceof(libui.UiEditableCombobox);\n    expect(combobox.widget.visible).to.be.true;\n    expect(combobox.widget.enabled).to.be.true;\n    expect(combobox.widget.items).to.be.an('array').that.is.empty;\n    expect(combobox.widget.text).to.be.empty;\n  });",
            "file": "spec/elements/combobox.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "with items and event listener",
            "suites": [
                "Combobox"
            ],
            "updatePoint": {
                "line": 23,
                "column": 35
            },
            "line": 23,
            "code": "  it('with items and event listener', () => {\n    const combobox = new Combobox('Combobox');\n    const handler = sinon.stub();\n    const items = ['item1', 'item2', 'item3'];\n    combobox.setAttribute('items', items);\n    combobox.setAttribute('value', 'foo');\n    combobox.addEventListener('input', handler);\n    sinon.spy(libui.UiEditableCombobox.prototype, 'onChanged');\n\n    combobox._mountWidget();\n\n    expect(combobox.widget.items).to.deep.equal(items);\n    expect(combobox.widget.text).to.equal('foo');\n    expect(libui.UiEditableCombobox.prototype.onChanged).to.have.been.calledOn(combobox.widget).and.calledWith(sinon.match(callback => {\n      callback();\n      expect(handler).to.have.been.calledWith('foo');\n      return true;\n    }));\n  });",
            "file": "spec/elements/combobox.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "default",
            "suites": [
                "DropdownList"
            ],
            "updatePoint": {
                "line": 12,
                "column": 13
            },
            "line": 12,
            "code": "  it('default', () => {\n    const dropdown = new DropdownList('DropdownList');\n\n    dropdown._mountWidget();\n\n    expect(dropdown.widget).to.be.an.instanceof(libui.UiCombobox);\n    expect(dropdown.widget.visible).to.be.true;\n    expect(dropdown.widget.enabled).to.be.true;\n    expect(dropdown.widget.items).to.be.an('array').that.is.empty;\n    expect(dropdown.widget.selected).to.equal(0);\n  });",
            "file": "spec/elements/dropdownlist.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "with items and event listener",
            "suites": [
                "DropdownList"
            ],
            "updatePoint": {
                "line": 23,
                "column": 35
            },
            "line": 23,
            "code": "  it('with items and event listener', () => {\n    const dropdown = new DropdownList('DropdownList');\n    const handler = sinon.stub();\n    const items = ['item1', 'item2', 'item3'];\n    dropdown.setAttribute('items', items);\n    dropdown.setAttribute('selected', 1);\n    dropdown.addEventListener('change', handler);\n    sinon.spy(libui.UiCombobox.prototype, 'onSelected');\n\n    dropdown._mountWidget();\n\n    expect(dropdown.widget.items).to.deep.equal(items);\n    expect(dropdown.widget.selected).to.equal(1);\n    expect(libui.UiCombobox.prototype.onSelected).to.have.been.calledOn(dropdown.widget).and.calledWith(sinon.match(callback => {\n      callback();\n      expect(handler).to.have.been.calledWith(1);\n      return true;\n    }));\n  });",
            "file": "spec/elements/dropdownlist.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "constructor",
            "suites": [
                "Element"
            ],
            "updatePoint": {
                "line": 12,
                "column": 17
            },
            "line": 12,
            "code": "  it('constructor', () => {\n    const element = new Element('foo');\n    expect(element.parentNode).to.be.null;\n    expect(element.prevSibling).to.be.null;\n    expect(element.nextSibling).to.be.null;\n    expect(element.tagName).to.equal('foo');\n    expect(element.childNodes).to.be.an('array').that.is.empty;\n    expect(element.attributes).to.be.an('object').that.is.empty;\n    expect(element.handlers).to.be.an('object').that.is.empty;\n  });",
            "file": "spec/elements/element.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "setAttribute",
            "suites": [
                "Element"
            ],
            "updatePoint": {
                "line": 22,
                "column": 18
            },
            "line": 22,
            "code": "  it('setAttribute', () => {\n    const element = new Element('foo');\n    element.setAttribute('bar', 'value');\n    expect(element.attributes.bar).to.equal('value');\n  });",
            "file": "spec/elements/element.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "addEventListener",
            "suites": [
                "Element"
            ],
            "updatePoint": {
                "line": 27,
                "column": 22
            },
            "line": 27,
            "code": "  it('addEventListener', () => {\n    const element = new Element('foo');\n    const handler = sinon.stub();\n    element.addEventListener('bar', handler);\n    expect(element.handlers.bar).to.equal(handler);\n  });",
            "file": "spec/elements/element.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "removeEventListener",
            "suites": [
                "Element"
            ],
            "updatePoint": {
                "line": 33,
                "column": 25
            },
            "line": 33,
            "code": "  it('removeEventListener', () => {\n    const element = new Element('foo');\n    const handler = sinon.stub();\n    element.addEventListener('bar', handler);\n    element.removeEventListener('bar');\n    expect(element.handlers.bar).to.be.undefined;\n  });",
            "file": "spec/elements/element.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "appendChild element",
            "suites": [
                "Element",
                "manipulate children"
            ],
            "updatePoint": {
                "line": 41,
                "column": 27
            },
            "line": 41,
            "code": "    it('appendChild element', () => {\n      const parent = new Element('parent');\n      const child = new Element('child');\n      parent.appendChild(child);\n      expect(parent.childNodes).to.deep.equal([child]);\n      expect(child.parentNode).to.equal(parent);\n      expect(child.prevSibling).to.be.null;\n      expect(child.nextSibling).to.be.null;\n    });",
            "file": "spec/elements/element.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "appendChild text node",
            "suites": [
                "Element",
                "manipulate children"
            ],
            "updatePoint": {
                "line": 50,
                "column": 29
            },
            "line": 50,
            "code": "    it('appendChild text node', () => {\n      const parent = new Element('parent');\n      const child = new TextNode('child');\n      parent.appendChild(child);\n      expect(parent.childNodes).to.deep.equal([child]);\n      expect(child.parentNode).to.equal(parent);\n      expect(child.prevSibling).to.be.null;\n      expect(child.nextSibling).to.be.null;\n    });",
            "file": "spec/elements/element.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "appendChild comment",
            "suites": [
                "Element",
                "manipulate children"
            ],
            "updatePoint": {
                "line": 59,
                "column": 27
            },
            "line": 59,
            "code": "    it('appendChild comment', () => {\n      const parent = new Element('parent');\n      const child = new Comment('child');\n      parent.appendChild(child);\n      expect(parent.childNodes).to.deep.equal([child]);\n      expect(child.parentNode).to.equal(parent);\n      expect(child.prevSibling).to.be.null;\n      expect(child.nextSibling).to.be.null;\n    });",
            "file": "spec/elements/element.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "appendChild with two text nodes fails",
            "suites": [
                "Element",
                "manipulate children"
            ],
            "updatePoint": {
                "line": 68,
                "column": 45
            },
            "line": 68,
            "code": "    it('appendChild with two text nodes fails', () => {\n      const parent = new Element('parent');\n      const child1 = new TextNode('child1');\n      const child2 = new TextNode('child2');\n      parent.appendChild(child1);\n      expect(() => parent.appendChild(child2)).to.throw();\n    });",
            "file": "spec/elements/element.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "appendChild multiple children",
            "suites": [
                "Element",
                "manipulate children"
            ],
            "updatePoint": {
                "line": 86,
                "column": 37
            },
            "line": 86,
            "code": "    it('appendChild multiple children', () => {\n      const parent = new Element('parent');\n      const child1 = new Element('child1');\n      const child2 = new Comment('child2');\n      const child3 = new Element('child3');\n      parent.appendChild(child1);\n      parent.appendChild(child2);\n      parent.appendChild(child3);\n      expectChildren(parent, [child1, child2, child3]);\n    });",
            "file": "spec/elements/element.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "insertBefore at the start",
            "suites": [
                "Element",
                "manipulate children"
            ],
            "updatePoint": {
                "line": 96,
                "column": 33
            },
            "line": 96,
            "code": "    it('insertBefore at the start', () => {\n      const parent = new Element('parent');\n      const child1 = new Element('child1');\n      const child2 = new Comment('child2');\n      const child3 = new Element('child3');\n      parent.appendChild(child1);\n      parent.appendChild(child2);\n      parent.insertBefore(child3, child1);\n      expectChildren(parent, [child3, child1, child2]);\n    });",
            "file": "spec/elements/element.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "insertBefore at the end",
            "suites": [
                "Element",
                "manipulate children"
            ],
            "updatePoint": {
                "line": 106,
                "column": 31
            },
            "line": 106,
            "code": "    it('insertBefore at the end', () => {\n      const parent = new Element('parent');\n      const child1 = new Element('child1');\n      const child2 = new Comment('child2');\n      const child3 = new Element('child3');\n      parent.appendChild(child1);\n      parent.appendChild(child2);\n      parent.insertBefore(child3, null);\n      expectChildren(parent, [child1, child2, child3]);\n    });",
            "file": "spec/elements/element.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "insertBefore in the middle",
            "suites": [
                "Element",
                "manipulate children"
            ],
            "updatePoint": {
                "line": 116,
                "column": 34
            },
            "line": 116,
            "code": "    it('insertBefore in the middle', () => {\n      const parent = new Element('parent');\n      const child1 = new Element('child1');\n      const child2 = new Comment('child2');\n      const child3 = new Element('child3');\n      parent.appendChild(child1);\n      parent.appendChild(child2);\n      parent.insertBefore(child3, child2);\n      expectChildren(parent, [child1, child3, child2]);\n    });",
            "file": "spec/elements/element.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "insertBefore move to the start",
            "suites": [
                "Element",
                "manipulate children"
            ],
            "updatePoint": {
                "line": 126,
                "column": 38
            },
            "line": 126,
            "code": "    it('insertBefore move to the start', () => {\n      const parent = new Element('parent');\n      const child1 = new Element('child1');\n      const child2 = new Comment('child2');\n      const child3 = new Element('child3');\n      parent.appendChild(child1);\n      parent.appendChild(child2);\n      parent.appendChild(child3);\n      parent.insertBefore(child2, child1);\n      expectChildren(parent, [child2, child1, child3]);\n    });",
            "file": "spec/elements/element.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "insertBefore move to the end",
            "suites": [
                "Element",
                "manipulate children"
            ],
            "updatePoint": {
                "line": 137,
                "column": 36
            },
            "line": 137,
            "code": "    it('insertBefore move to the end', () => {\n      const parent = new Element('parent');\n      const child1 = new Element('child1');\n      const child2 = new Comment('child2');\n      const child3 = new Element('child3');\n      parent.appendChild(child1);\n      parent.appendChild(child2);\n      parent.appendChild(child3);\n      parent.insertBefore(child2, null);\n      expectChildren(parent, [child1, child3, child2]);\n    });",
            "file": "spec/elements/element.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "insertBefore move left",
            "suites": [
                "Element",
                "manipulate children"
            ],
            "updatePoint": {
                "line": 148,
                "column": 30
            },
            "line": 148,
            "code": "    it('insertBefore move left', () => {\n      const parent = new Element('parent');\n      const child1 = new Element('child1');\n      const child2 = new Comment('child2');\n      const child3 = new Element('child3');\n      const child4 = new Element('child4');\n      parent.appendChild(child1);\n      parent.appendChild(child2);\n      parent.appendChild(child3);\n      parent.appendChild(child4);\n      parent.insertBefore(child3, child2);\n      expectChildren(parent, [child1, child3, child2, child4]);\n    });",
            "file": "spec/elements/element.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "insertBefore move right",
            "suites": [
                "Element",
                "manipulate children"
            ],
            "updatePoint": {
                "line": 161,
                "column": 31
            },
            "line": 161,
            "code": "    it('insertBefore move right', () => {\n      const parent = new Element('parent');\n      const child1 = new Element('child1');\n      const child2 = new Comment('child2');\n      const child3 = new Element('child3');\n      const child4 = new Element('child4');\n      parent.appendChild(child1);\n      parent.appendChild(child2);\n      parent.appendChild(child3);\n      parent.appendChild(child4);\n      parent.insertBefore(child2, child4);\n      expectChildren(parent, [child1, child3, child2, child4]);\n    });",
            "file": "spec/elements/element.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "removeChild from the start",
            "suites": [
                "Element",
                "manipulate children"
            ],
            "updatePoint": {
                "line": 174,
                "column": 34
            },
            "line": 174,
            "code": "    it('removeChild from the start', () => {\n      const parent = new Element('parent');\n      const child1 = new Element('child1');\n      const child2 = new Comment('child2');\n      const child3 = new Element('child3');\n      parent.appendChild(child1);\n      parent.appendChild(child2);\n      parent.appendChild(child3);\n      parent.removeChild(child1);\n      expectChildren(parent, [child2, child3]);\n    });",
            "file": "spec/elements/element.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "removeChild from the end",
            "suites": [
                "Element",
                "manipulate children"
            ],
            "updatePoint": {
                "line": 185,
                "column": 32
            },
            "line": 185,
            "code": "    it('removeChild from the end', () => {\n      const parent = new Element('parent');\n      const child1 = new Element('child1');\n      const child2 = new Comment('child2');\n      const child3 = new Element('child3');\n      parent.appendChild(child1);\n      parent.appendChild(child2);\n      parent.appendChild(child3);\n      parent.removeChild(child3);\n      expectChildren(parent, [child1, child2]);\n    });",
            "file": "spec/elements/element.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "removeChild from the middle",
            "suites": [
                "Element",
                "manipulate children"
            ],
            "updatePoint": {
                "line": 196,
                "column": 35
            },
            "line": 196,
            "code": "    it('removeChild from the middle', () => {\n      const parent = new Element('parent');\n      const child1 = new Element('child1');\n      const child2 = new Comment('child2');\n      const child3 = new Element('child3');\n      parent.appendChild(child1);\n      parent.appendChild(child2);\n      parent.appendChild(child3);\n      parent.removeChild(child2);\n      expectChildren(parent, [child1, child3]);\n    });",
            "file": "spec/elements/element.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "default",
            "suites": [
                "Form"
            ],
            "updatePoint": {
                "line": 13,
                "column": 13
            },
            "line": 13,
            "code": "  it('default', () => {\n    const form = new Form('Form');\n\n    form._mountWidget();\n\n    expect(form.widget).to.be.an.instanceof(libui.UiForm);\n    expect(form.widget.visible).to.be.true;\n    expect(form.widget.enabled).to.be.true;\n    expect(form.widget.padded).to.be.false;\n  });",
            "file": "spec/elements/form.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "with attribute and children",
            "suites": [
                "Form"
            ],
            "updatePoint": {
                "line": 23,
                "column": 33
            },
            "line": 23,
            "code": "  it('with attribute and children', () => {\n    const form = new Form('Form');\n    const child1 = new TextInput('TextInput');\n    const child2 = new TextInput('TextInput');\n    form.setAttribute('padded', true);\n    form.appendChild(child1);\n    form.appendChild(child2);\n    child1.setAttribute('label', 'foo');\n    child2.setAttribute('label', 'bar');\n    child2.setAttribute('stretchy', true);\n    sinon.spy(libui.UiForm.prototype, 'append');\n\n    form._mountWidget();\n\n    expect(form.widget.padded).to.be.true;\n    expect(libui.UiForm.prototype.append).to.have.been.calledOn(form.widget).and.calledWith('foo', child1.widget, false).and.calledWith('bar', child2.widget, true);\n    expect(form.widget.children).to.deep.equal([child1.widget, child2.widget]);\n  });",
            "file": "spec/elements/form.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "appendChild",
            "suites": [
                "Form"
            ],
            "updatePoint": {
                "line": 41,
                "column": 17
            },
            "line": 41,
            "code": "  it('appendChild', () => {\n    const form = new Form('Form');\n    const child = new TextInput('TextInput');\n\n    form._mountWidget();\n\n    sinon.spy(libui.UiForm.prototype, 'append');\n    child.setAttribute('label', 'foo');\n    form.appendChild(child);\n    expect(libui.UiForm.prototype.append).to.have.been.calledOn(form.widget).and.calledWith('foo', child.widget, false);\n    expect(form.widget.children).to.deep.equal([child.widget]);\n  });",
            "file": "spec/elements/form.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "insertBefore",
            "suites": [
                "Form"
            ],
            "updatePoint": {
                "line": 53,
                "column": 18
            },
            "line": 53,
            "code": "  it('insertBefore', () => {\n    const form = new Form('Form');\n    const child1 = new TextInput('TextInput');\n    const child2 = new TextInput('TextInput');\n    child1.setAttribute('label', 'foo');\n    form.appendChild(child1);\n\n    form._mountWidget();\n\n    child2.setAttribute('label', 'foo');\n    form.insertBefore(child2, child1);\n    expect(form.widget.children).to.deep.equal([child2.widget, child1.widget]);\n  });",
            "file": "spec/elements/form.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "removeChild",
            "suites": [
                "Form"
            ],
            "updatePoint": {
                "line": 66,
                "column": 17
            },
            "line": 66,
            "code": "  it('removeChild', () => {\n    const form = new Form('Form');\n    const child1 = new TextInput('TextInput');\n    const child2 = new TextInput('TextInput');\n    child1.setAttribute('label', 'foo');\n    child2.setAttribute('label', 'bar');\n    form.appendChild(child1);\n    form.appendChild(child2);\n\n    form._mountWidget();\n\n    form.removeChild(child1);\n    expect(form.widget.children).to.deep.equal([child2.widget]);\n  });",
            "file": "spec/elements/form.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "default",
            "suites": [
                "Group"
            ],
            "updatePoint": {
                "line": 13,
                "column": 13
            },
            "line": 13,
            "code": "  it('default', () => {\n    const group = new Group('Group');\n\n    group._mountWidget();\n\n    expect(group.widget).to.be.an.instanceof(libui.UiGroup);\n    expect(group.widget.visible).to.be.true;\n    expect(group.widget.enabled).to.be.true;\n    expect(group.widget.title).to.be.empty;\n    expect(group.widget.margined).to.be.false;\n  });",
            "file": "spec/elements/group.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "with attributes and child",
            "suites": [
                "Group"
            ],
            "updatePoint": {
                "line": 24,
                "column": 31
            },
            "line": 24,
            "code": "  it('with attributes and child', () => {\n    const group = new Group('Group');\n    const child = new TextInput('TextInput');\n    group.setAttribute('title', 'foo');\n    group.setAttribute('margined', true);\n    group.appendChild(child);\n    sinon.spy(libui.UiGroup.prototype, 'setChild');\n\n    group._mountWidget();\n\n    expect(group.widget.title).to.equal('foo');\n    expect(group.widget.margined).to.be.true;\n    expect(libui.UiGroup.prototype.setChild).to.have.been.calledOn(group.widget).and.calledWith(child.widget);\n  });",
            "file": "spec/elements/group.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "with two children fails",
            "suites": [
                "Group"
            ],
            "updatePoint": {
                "line": 38,
                "column": 29
            },
            "line": 38,
            "code": "  it('with two children fails', () => {\n    const group = new Group('Group');\n    const child1 = new TextInput('TextInput');\n    const child2 = new TextInput('TextInput');\n    group.appendChild(child1);\n    expect(() => group.appendChild(child2)).to.throw();\n  });",
            "file": "spec/elements/group.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "default",
            "suites": [
                "ProgressBar"
            ],
            "updatePoint": {
                "line": 10,
                "column": 13
            },
            "line": 10,
            "code": "  it('default', () => {\n    const progress = new ProgressBar('ProgressBar');\n\n    progress._mountWidget();\n\n    expect(progress.widget).to.be.an.instanceof(libui.UiProgressBar);\n    expect(progress.widget.visible).to.be.true;\n    expect(progress.widget.enabled).to.be.true;\n    expect(progress.widget.value).to.equal(0);\n  });",
            "file": "spec/elements/progressbar.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "with value",
            "suites": [
                "ProgressBar"
            ],
            "updatePoint": {
                "line": 20,
                "column": 16
            },
            "line": 20,
            "code": "  it('with value', () => {\n    const progress = new ProgressBar('ProgressBar');\n    progress.setAttribute('value', 50);\n\n    progress._mountWidget();\n\n    expect(progress.widget.value).to.equal(50);\n  });",
            "file": "spec/elements/progressbar.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "without items fails",
            "suites": [
                "RadioButtons"
            ],
            "updatePoint": {
                "line": 12,
                "column": 25
            },
            "line": 12,
            "code": "  it('without items fails', () => {\n    const radio = new RadioButtons('RadioButtons');\n    expect(() => radio._mountWidget()).to.throw();\n  });",
            "file": "spec/elements/radiobuttons.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "with items and event listener",
            "suites": [
                "RadioButtons"
            ],
            "updatePoint": {
                "line": 16,
                "column": 35
            },
            "line": 16,
            "code": "  it('with items and event listener', () => {\n    const radio = new RadioButtons('RadioButtons');\n    const handler = sinon.stub();\n    const items = ['item1', 'item2', 'item3'];\n    radio.setAttribute('items', items);\n    radio.setAttribute('selected', 1);\n    radio.addEventListener('change', handler);\n    sinon.spy(libui.UiRadioButtons.prototype, 'onSelected');\n\n    radio._mountWidget();\n\n    expect(radio.widget.items).to.deep.equal(items);\n    expect(radio.widget.selected).to.equal(1);\n    expect(libui.UiRadioButtons.prototype.onSelected).to.have.been.calledOn(radio.widget).and.calledWith(sinon.match(callback => {\n      callback();\n      expect(handler).to.have.been.calledWith(1);\n      return true;\n    }));\n  });",
            "file": "spec/elements/radiobuttons.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "default",
            "suites": [
                "Separator"
            ],
            "updatePoint": {
                "line": 10,
                "column": 13
            },
            "line": 10,
            "code": "  it('default', () => {\n    const separator = new Separator('Separator');\n\n    separator._mountWidget();\n\n    expect(separator.widget).to.be.an.instanceof(libui.UiVerticalSeparator);\n    expect(separator.widget.visible).to.be.true;\n    expect(separator.widget.enabled).to.be.true;\n  });",
            "file": "spec/elements/separator.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "horizontal",
            "suites": [
                "Separator"
            ],
            "updatePoint": {
                "line": 19,
                "column": 16
            },
            "line": 19,
            "code": "  it('horizontal', () => {\n    const separator = new Separator('Separator');\n    separator.setAttribute('horizontal', true);\n\n    separator._mountWidget();\n\n    expect(separator.widget).to.be.an.instanceof(libui.UiHorizontalSeparator);\n  });",
            "file": "spec/elements/separator.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "default",
            "suites": [
                "Slider"
            ],
            "updatePoint": {
                "line": 12,
                "column": 13
            },
            "line": 12,
            "code": "  it('default', () => {\n    const slider = new Slider('Slider');\n\n    slider._mountWidget();\n\n    expect(slider.widget).to.be.an.instanceof(libui.UiSlider);\n    expect(slider.widget.visible).to.be.true;\n    expect(slider.widget.enabled).to.be.true;\n    expect(slider.widget.value).to.equal(0);\n    expect(slider.widget.min).to.equal(0);\n    expect(slider.widget.max).to.equal(100);\n  });",
            "file": "spec/elements/slider.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "with attributes and event listener",
            "suites": [
                "Slider"
            ],
            "updatePoint": {
                "line": 24,
                "column": 40
            },
            "line": 24,
            "code": "  it('with attributes and event listener', () => {\n    const slider = new Slider('Slider');\n    const handler = sinon.stub();\n    slider.setAttribute('value', 5);\n    slider.setAttribute('min', -10);\n    slider.setAttribute('max', 10);\n    slider.addEventListener('change', handler);\n    sinon.spy(libui.UiSlider.prototype, 'onChanged');\n\n    slider._mountWidget();\n\n    expect(slider.widget.value).to.equal(5);\n    expect(slider.widget.min).to.equal(-10);\n    expect(slider.widget.max).to.equal(10);\n    expect(libui.UiSlider.prototype.onChanged).to.have.been.calledOn(slider.widget).and.calledWith(sinon.match(callback => {\n      callback();\n      expect(handler).to.have.been.calledWith(5);\n      return true;\n    }));\n  });",
            "file": "spec/elements/slider.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "default",
            "suites": [
                "Spinbox"
            ],
            "updatePoint": {
                "line": 12,
                "column": 13
            },
            "line": 12,
            "code": "  it('default', () => {\n    const spinbox = new Spinbox('Spinbox');\n\n    spinbox._mountWidget();\n\n    expect(spinbox.widget).to.be.an.instanceof(libui.UiSpinbox);\n    expect(spinbox.widget.visible).to.be.true;\n    expect(spinbox.widget.enabled).to.be.true;\n    expect(spinbox.widget.value).to.equal(0);\n    expect(spinbox.widget.min).to.equal(0);\n    expect(spinbox.widget.max).to.equal(100);\n  });",
            "file": "spec/elements/spinbox.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "with attributes and event listener",
            "suites": [
                "Spinbox"
            ],
            "updatePoint": {
                "line": 24,
                "column": 40
            },
            "line": 24,
            "code": "  it('with attributes and event listener', () => {\n    const spinbox = new Spinbox('Spinbox');\n    const handler = sinon.stub();\n    spinbox.setAttribute('value', 5);\n    spinbox.setAttribute('min', -10);\n    spinbox.setAttribute('max', 10);\n    spinbox.addEventListener('change', handler);\n    sinon.spy(libui.UiSpinbox.prototype, 'onChanged');\n\n    spinbox._mountWidget();\n\n    expect(spinbox.widget.value).to.equal(5);\n    expect(spinbox.widget.min).to.equal(-10);\n    expect(spinbox.widget.max).to.equal(10);\n    expect(libui.UiSpinbox.prototype.onChanged).to.have.been.calledOn(spinbox.widget).and.calledWith(sinon.match(callback => {\n      callback();\n      expect(handler).to.have.been.calledWith(5);\n      return true;\n    }));\n  });",
            "file": "spec/elements/spinbox.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "default",
            "suites": [
                "Tab"
            ],
            "updatePoint": {
                "line": 13,
                "column": 13
            },
            "line": 13,
            "code": "  it('default', () => {\n    const tab = new Tab('Tab');\n\n    tab._mountWidget();\n\n    expect(tab.widget).to.be.an.instanceof(libui.UiTab);\n    expect(tab.widget.visible).to.be.true;\n    expect(tab.widget.enabled).to.be.true;\n  });",
            "file": "spec/elements/tab.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "with children",
            "suites": [
                "Tab"
            ],
            "updatePoint": {
                "line": 22,
                "column": 19
            },
            "line": 22,
            "code": "  it('with children', () => {\n    const tab = new Tab('Tab');\n    const child1 = new TextInput('TextInput');\n    const child2 = new TextInput('TextInput');\n    tab.appendChild(child1);\n    tab.appendChild(child2);\n    child1.setAttribute('label', 'foo');\n    child2.setAttribute('label', 'bar');\n    sinon.spy(libui.UiTab.prototype, 'append');\n\n    tab._mountWidget();\n\n    expect(libui.UiTab.prototype.append).to.have.been.calledOn(tab.widget).and.calledWith('foo', child1.widget).and.calledWith('bar', child2.widget);\n    expect(tab.widget.children).to.deep.equal([child1.widget, child2.widget]);\n  });",
            "file": "spec/elements/tab.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "with margin",
            "suites": [
                "Tab"
            ],
            "updatePoint": {
                "line": 37,
                "column": 17
            },
            "line": 37,
            "code": "  it('with margin', () => {\n    const tab = new Tab('Tab');\n    const child1 = new TextInput('TextInput');\n    const child2 = new TextInput('TextInput');\n    tab.setAttribute('margined', true);\n    tab.appendChild(child1);\n    tab.appendChild(child2);\n    child1.setAttribute('label', 'foo');\n    child2.setAttribute('label', 'bar');\n    sinon.spy(libui.UiTab.prototype, 'setMargined');\n\n    tab._mountWidget();\n\n    expect(libui.UiTab.prototype.setMargined).to.have.been.calledOn(tab.widget).and.calledWith(0, true).and.calledWith(1, true);\n  });",
            "file": "spec/elements/tab.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "appendChild",
            "suites": [
                "Tab"
            ],
            "updatePoint": {
                "line": 52,
                "column": 17
            },
            "line": 52,
            "code": "  it('appendChild', () => {\n    const tab = new Tab('Tab');\n    const child = new TextInput('TextInput');\n\n    tab._mountWidget();\n\n    sinon.spy(libui.UiTab.prototype, 'append');\n    child.setAttribute('label', 'foo');\n    tab.appendChild(child);\n    expect(libui.UiTab.prototype.append).to.have.been.calledOn(tab.widget).and.calledWith('foo', child.widget);\n    expect(tab.widget.children).to.deep.equal([child.widget]);\n  });",
            "file": "spec/elements/tab.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "insertBefore",
            "suites": [
                "Tab"
            ],
            "updatePoint": {
                "line": 64,
                "column": 18
            },
            "line": 64,
            "code": "  it('insertBefore', () => {\n    const tab = new Tab('Tab');\n    const child1 = new TextInput('TextInput');\n    const child2 = new TextInput('TextInput');\n    child1.setAttribute('label', 'foo');\n    tab.appendChild(child1);\n\n    tab._mountWidget();\n\n    child2.setAttribute('label', 'foo');\n    tab.insertBefore(child2, child1);\n    expect(tab.widget.children).to.deep.equal([child2.widget, child1.widget]);\n  });",
            "file": "spec/elements/tab.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "removeChild",
            "suites": [
                "Tab"
            ],
            "updatePoint": {
                "line": 77,
                "column": 17
            },
            "line": 77,
            "code": "  it('removeChild', () => {\n    const tab = new Tab('Tab');\n    const child1 = new TextInput('TextInput');\n    const child2 = new TextInput('TextInput');\n    child1.setAttribute('label', 'foo');\n    child2.setAttribute('label', 'bar');\n    tab.appendChild(child1);\n    tab.appendChild(child2);\n\n    tab._mountWidget();\n\n    tab.removeChild(child1);\n    expect(tab.widget.children).to.deep.equal([child2.widget]);\n  });",
            "file": "spec/elements/tab.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "constructor",
            "suites": [
                "Text"
            ],
            "updatePoint": {
                "line": 12,
                "column": 17
            },
            "line": 12,
            "code": "  it('constructor', () => {\n    const text = new Text('Text');\n    expect(text.parentNode).to.be.null;\n    expect(text.prevSibling).to.be.null;\n    expect(text.nextSibling).to.be.null;\n    expect(text.tagName).to.equal('Text');\n    expect(text.childNodes).to.be.an('array').that.is.empty;\n    expect(text.attributes).to.deep.equal({\n      visible: true,\n      enabled: true,\n      stretchy: false,\n      label: ''\n    });\n    expect(text.handlers).to.be.an('object').that.is.empty;\n    expect(text.widget).to.be.null;\n  });",
            "file": "spec/elements/text.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "_mountWidget",
            "suites": [
                "Text"
            ],
            "updatePoint": {
                "line": 28,
                "column": 18
            },
            "line": 28,
            "code": "  it('_mountWidget', () => {\n    const text = new Text('Text');\n\n    text._mountWidget();\n\n    expect(text.widget).to.be.an.instanceof(libui.UiLabel);\n    expect(text.widget.visible).to.be.true;\n    expect(text.widget.enabled).to.be.true;\n    expect(text.widget.text).to.be.empty;\n  });",
            "file": "spec/elements/text.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "_mountWidget with child text node",
            "suites": [
                "Text"
            ],
            "updatePoint": {
                "line": 38,
                "column": 39
            },
            "line": 38,
            "code": "  it('_mountWidget with child text node', () => {\n    const text = new Text('Text');\n    const textNode = new TextNode('foo');\n    text.appendChild(textNode);\n\n    text._mountWidget();\n\n    expect(text.widget.text).to.equal('foo');\n  });",
            "file": "spec/elements/text.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "_mountWidget with child element fails",
            "suites": [
                "Text"
            ],
            "updatePoint": {
                "line": 47,
                "column": 43
            },
            "line": 47,
            "code": "  it('_mountWidget with child element fails', () => {\n    const text = new Text('Text');\n    const child = new Button('Button');\n    text.appendChild(child);\n    expect(() => text._mountWidget()).to.throw();\n  });",
            "file": "spec/elements/text.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "setText on child text node",
            "suites": [
                "Text"
            ],
            "updatePoint": {
                "line": 53,
                "column": 32
            },
            "line": 53,
            "code": "  it('setText on child text node', () => {\n    const text = new Text('Text');\n    const textNode = new TextNode('foo');\n    text.appendChild(textNode);\n\n    text._mountWidget();\n\n    textNode.setText('bar');\n    expect(text.widget.text).to.equal('bar');\n  });",
            "file": "spec/elements/text.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "default",
            "suites": [
                "TextArea"
            ],
            "updatePoint": {
                "line": 12,
                "column": 13
            },
            "line": 12,
            "code": "  it('default', () => {\n    const text = new TextArea('TextArea');\n\n    text._mountWidget();\n\n    expect(text.widget).to.be.an.instanceof(libui.UiMultilineEntry);\n    expect(text.widget.visible).to.be.true;\n    expect(text.widget.enabled).to.be.true;\n    expect(text.widget.text).to.be.empty;\n    expect(text.widget.readOnly).to.be.false;\n  });",
            "file": "spec/elements/textarea.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "with attributes and event listener",
            "suites": [
                "TextArea"
            ],
            "updatePoint": {
                "line": 23,
                "column": 40
            },
            "line": 23,
            "code": "  it('with attributes and event listener', () => {\n    const text = new TextArea('TextArea');\n    const handler = sinon.stub();\n    text.setAttribute('value', 'foo');\n    text.setAttribute('readonly', true);\n    text.addEventListener('input', handler);\n    sinon.spy(libui.UiMultilineEntry.prototype, 'onChanged');\n\n    text._mountWidget();\n\n    expect(text.widget.text).to.equal('foo');\n    expect(text.widget.readOnly).to.be.true;\n    expect(libui.UiMultilineEntry.prototype.onChanged).to.have.been.calledOn(text.widget).and.calledWith(sinon.match(callback => {\n      callback();\n      expect(handler).to.have.been.calledWith('foo');\n      return true;\n    }));\n  });",
            "file": "spec/elements/textarea.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "constructor",
            "suites": [
                "TextInput"
            ],
            "updatePoint": {
                "line": 12,
                "column": 17
            },
            "line": 12,
            "code": "  it('constructor', () => {\n    const input = new TextInput('TextInput');\n    expect(input.parentNode).to.be.null;\n    expect(input.prevSibling).to.be.null;\n    expect(input.nextSibling).to.be.null;\n    expect(input.tagName).to.equal('TextInput');\n    expect(input.childNodes).to.be.an('array').that.is.empty;\n    expect(input.attributes).to.deep.equal({\n      visible: true,\n      enabled: true,\n      stretchy: false,\n      label: '',\n      type: 'text',\n      value: '',\n      readonly: false\n    });\n    expect(input.handlers).to.be.an('object').that.is.empty;\n    expect(input.widget).to.be.null;\n  });",
            "file": "spec/elements/textinput.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "default",
            "suites": [
                "TextInput",
                "_mountWidget"
            ],
            "updatePoint": {
                "line": 32,
                "column": 15
            },
            "line": 32,
            "code": "    it('default', () => {\n      const input = new TextInput('TextInput');\n\n      input._mountWidget();\n\n      expect(input.widget).to.be.an.instanceof(libui.UiEntry);\n      expect(input.widget.visible).to.be.true;\n      expect(input.widget.enabled).to.be.true;\n      expect(input.widget.text).to.be.empty;\n      expect(input.widget.readOnly).to.be.false;\n    });",
            "file": "spec/elements/textinput.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "with attributes",
            "suites": [
                "TextInput",
                "_mountWidget"
            ],
            "updatePoint": {
                "line": 43,
                "column": 23
            },
            "line": 43,
            "code": "    it('with attributes', () => {\n      const input = new TextInput('TextInput');\n      input.setAttribute('readonly', true);\n      input.setAttribute('value', 'foo');\n\n      input._mountWidget();\n\n      expect(input.widget.text).to.equal('foo');\n      expect(input.widget.readOnly).to.be.true;\n    });",
            "file": "spec/elements/textinput.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "password type",
            "suites": [
                "TextInput",
                "_mountWidget"
            ],
            "updatePoint": {
                "line": 53,
                "column": 21
            },
            "line": 53,
            "code": "    it('password type', () => {\n      const input = new TextInput('TextInput');\n      input.setAttribute('type', 'password');\n\n      input._mountWidget();\n\n      expect(input.widget).to.be.an.instanceof(libui.UiPasswordEntry);\n    });",
            "file": "spec/elements/textinput.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "search type",
            "suites": [
                "TextInput",
                "_mountWidget"
            ],
            "updatePoint": {
                "line": 61,
                "column": 19
            },
            "line": 61,
            "code": "    it('search type', () => {\n      const input = new TextInput('TextInput');\n      input.setAttribute('type', 'search');\n\n      input._mountWidget();\n\n      expect(input.widget).to.be.an.instanceof(libui.UiSearchEntry);\n    });",
            "file": "spec/elements/textinput.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "with event listener",
            "suites": [
                "TextInput",
                "_mountWidget"
            ],
            "updatePoint": {
                "line": 69,
                "column": 27
            },
            "line": 69,
            "code": "    it('with event listener', () => {\n      const input = new TextInput('TextInput');\n      const handler = sinon.stub();\n      input.setAttribute('value', 'foo');\n      input.addEventListener('input', handler);\n      sinon.spy(libui.UiEntry.prototype, 'onChanged');\n\n      input._mountWidget();\n\n      expect(libui.UiEntry.prototype.onChanged).to.have.been.calledOn(input.widget).and.calledWith(sinon.match(callback => {\n        callback();\n        expect(handler).to.have.been.calledWith('foo');\n        return true;\n      }));\n    });",
            "file": "spec/elements/textinput.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "constructor",
            "suites": [
                "Window"
            ],
            "updatePoint": {
                "line": 15,
                "column": 17
            },
            "line": 15,
            "code": "  it('constructor', () => {\n    const window = new Window('Window');\n    expect(window.parentNode).to.be.null;\n    expect(window.prevSibling).to.be.null;\n    expect(window.nextSibling).to.be.null;\n    expect(window.tagName).to.equal('Window');\n    expect(window.childNodes).to.be.an('array').that.is.empty;\n    expect(window.attributes).to.deep.equal({\n      title: 'Vuido',\n      width: 400,\n      height: 300,\n      menu: false,\n      margined: false,\n      fullscreen: false,\n      borderless: false\n    });\n    expect(window.handlers).to.be.an('object').that.is.empty;\n  });",
            "file": "spec/elements/window.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "appendChild with two child widgets fails",
            "suites": [
                "Window"
            ],
            "updatePoint": {
                "line": 33,
                "column": 46
            },
            "line": 33,
            "code": "  it('appendChild with two child widgets fails', () => {\n    const window = new Window('Window');\n    const button1 = new Button('Button');\n    const button2 = new Button('Button');\n    window.appendChild(button1);\n    expect(() => window.appendChild(button2)).to.throw();\n  });",
            "file": "spec/elements/window.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "appendChild text node fails",
            "suites": [
                "Window"
            ],
            "updatePoint": {
                "line": 40,
                "column": 33
            },
            "line": 40,
            "code": "  it('appendChild text node fails', () => {\n    const window = new Window('Window');\n    const text = new TextNode('foo');\n    expect(() => window.appendChild(text)).to.throw();\n  });",
            "file": "spec/elements/window.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "default",
            "suites": [
                "Window",
                "_mountWindow"
            ],
            "updatePoint": {
                "line": 46,
                "column": 15
            },
            "line": 46,
            "code": "    it('default', () => {\n      sinon.spy(libui.UiWindow.prototype, 'show');\n      const window = new Window('Window');\n\n      window._mountWindow();\n\n      expect(window.window).to.be.an.instanceof(libui.UiWindow);\n      expect(window.window.title).to.equal('Vuido');\n      expect(window.window.contentSize).to.deep.equal(new libui.Size(400, 300));\n      expect(window.window.menu).to.be.false;\n      expect(window.window.margined).to.be.false;\n      expect(window.window.fullscreen).to.be.false;\n      expect(window.window.borderless).to.be.false;\n      expect(libui.UiWindow.prototype.show).to.have.been.calledOn(window.window);\n    });",
            "file": "spec/elements/window.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "with attributes",
            "suites": [
                "Window",
                "_mountWindow"
            ],
            "updatePoint": {
                "line": 61,
                "column": 23
            },
            "line": 61,
            "code": "    it('with attributes', () => {\n      const window = new Window('Window');\n      window.setAttribute('title', 'foo');\n      window.setAttribute('width', 800);\n      window.setAttribute('height', 600);\n      window.setAttribute('menu', true);\n      window.setAttribute('margined', true);\n      window.setAttribute('fullscreen', true);\n      window.setAttribute('borderless', true);\n\n      window._mountWindow();\n\n      expect(window.window.title).to.equal('foo');\n      expect(window.window.contentSize).to.deep.equal(new libui.Size(800, 600));\n      expect(window.window.menu).to.be.true;\n      expect(window.window.margined).to.be.true;\n      expect(window.window.fullscreen).to.be.true;\n      expect(window.window.borderless).to.be.true;\n    });",
            "file": "spec/elements/window.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "with show event listener",
            "suites": [
                "Window",
                "_mountWindow"
            ],
            "updatePoint": {
                "line": 80,
                "column": 32
            },
            "line": 80,
            "code": "    it('with show event listener', () => {\n      const window = new Window('Window');\n      const handler = sinon.stub();\n      const handler2 = sinon.stub();\n      const handler3 = sinon.stub();\n      window.addEventListener('show', handler);\n\n      window._mountWindow();\n\n      expect(handler).to.have.been.called;\n    });",
            "file": "spec/elements/window.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "with close event listener",
            "suites": [
                "Window",
                "_mountWindow"
            ],
            "updatePoint": {
                "line": 91,
                "column": 33
            },
            "line": 91,
            "code": "    it('with close event listener', () => {\n      const window = new Window('Window');\n      const handler = sinon.stub();\n      window.addEventListener('close', handler);\n      sinon.spy(libui.UiWindow.prototype, 'onClosing');\n\n      window._mountWindow();\n\n      expect(libui.UiWindow.prototype.onClosing).to.have.been.calledOn(window.window).and.calledWith(handler);\n    });",
            "file": "spec/elements/window.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "with resize event listener",
            "suites": [
                "Window",
                "_mountWindow"
            ],
            "updatePoint": {
                "line": 101,
                "column": 34
            },
            "line": 101,
            "code": "    it('with resize event listener', () => {\n      const window = new Window('Window');\n      const handler = sinon.stub();\n      window.addEventListener('resize', handler);\n      sinon.spy(libui.UiWindow.prototype, 'onContentSizeChanged');\n\n      window._mountWindow();\n\n      expect(libui.UiWindow.prototype.onContentSizeChanged).to.have.been.calledOn(window.window).and.calledWith(sinon.match(callback => {\n        const size = new libui.Size(800, 600);\n        window.window.contentSize = size;\n        callback();\n        expect(handler).to.have.been.calledWith(size);\n        return true;\n      }));\n    });",
            "file": "spec/elements/window.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "with child widgets",
            "suites": [
                "Window",
                "_mountWindow"
            ],
            "updatePoint": {
                "line": 117,
                "column": 26
            },
            "line": 117,
            "code": "    it('with child widgets', () => {\n      const window = new Window('Window');\n      const box = new Box('Box');\n      const button1 = new Button('Button');\n      const button2 = new Button('Button');\n      window.appendChild(box);\n      box.appendChild(button1);\n      box.appendChild(button2);\n      sinon.spy(libui.UiWindow.prototype, 'setChild');\n\n      window._mountWindow();\n\n      expect(box.widget).to.be.instanceof(libui.UiBox);\n      expect(button1.widget).to.be.instanceof(libui.UiButton);\n      expect(button2.widget).to.be.instanceof(libui.UiButton);\n      expect(libui.UiWindow.prototype.setChild).to.have.been.calledOn(window.window).and.calledWith(box.widget);\n    });",
            "file": "spec/elements/window.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "setAttribute",
            "suites": [
                "Window",
                "modify after _mountWindow"
            ],
            "updatePoint": {
                "line": 136,
                "column": 20
            },
            "line": 136,
            "code": "    it('setAttribute', () => {\n      const window = new Window('Window');\n\n      window._mountWindow();\n\n      window.setAttribute('title', 'foo');\n      window.setAttribute('width', 800);\n      window.setAttribute('height', 600);\n      window.setAttribute('fullscreen', true);\n      window.setAttribute('borderless', true);\n      expect(window.window.title).to.equal('foo');\n      expect(window.window.contentSize).to.deep.equal(new libui.Size(800, 600));\n      expect(window.window.fullscreen).to.be.true;\n      expect(window.window.borderless).to.be.true;\n    });",
            "file": "spec/elements/window.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "addEventListener",
            "suites": [
                "Window",
                "modify after _mountWindow"
            ],
            "updatePoint": {
                "line": 151,
                "column": 24
            },
            "line": 151,
            "code": "    it('addEventListener', () => {\n      const window = new Window('Window');\n      const handler = sinon.stub();\n\n      window._mountWindow();\n\n      sinon.spy(libui.UiWindow.prototype, 'onClosing');\n      window.addEventListener('close', handler);\n      expect(libui.UiWindow.prototype.onClosing).to.have.been.calledOn(window.window).and.calledWith(handler);\n    });",
            "file": "spec/elements/window.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "removeEventListener",
            "suites": [
                "Window",
                "modify after _mountWindow"
            ],
            "updatePoint": {
                "line": 161,
                "column": 27
            },
            "line": 161,
            "code": "    it('removeEventListener', () => {\n      const window = new Window('Window');\n      const handler = sinon.stub();\n      window.addEventListener('close', handler);\n\n      window._mountWindow();\n\n      sinon.spy(libui.UiWindow.prototype, 'onClosing');\n      window.removeEventListener('close');\n      expect(libui.UiWindow.prototype.onClosing).to.have.been.calledOn(window.window).and.calledWith(null);\n    });",
            "file": "spec/elements/window.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "appendChild fails",
            "suites": [
                "Window",
                "modify after _mountWindow"
            ],
            "updatePoint": {
                "line": 172,
                "column": 25
            },
            "line": 172,
            "code": "    it('appendChild fails', () => {\n      const window = new Window('Window');\n      const box = new Box('Box');\n\n      window._mountWindow();\n\n      expect(() => window.appendChild(box)).to.throw();\n    });",
            "file": "spec/elements/window.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "_destroyWindow",
            "suites": [
                "Window",
                "modify after _mountWindow"
            ],
            "updatePoint": {
                "line": 181,
                "column": 20
            },
            "line": 181,
            "code": "  it('_destroyWindow', () => {\n    const window = new Window('Window');\n    const box = new Box('Box');\n    const button1 = new Button('Button');\n    const button2 = new Button('Button');\n    window.appendChild(box);\n    box.appendChild(button1);\n    box.appendChild(button2);\n\n    window._mountWindow();\n\n    const uiWindow = window.window;\n    sinon.spy(libui.UiWindow.prototype, 'close');\n\n    window._destroyWindow();\n\n    expect(window.window).to.be.null;\n    expect(box.widget).to.be.null;\n    expect(button1.widget).to.be.null;\n    expect(button2.widget).to.be.null;\n    expect(libui.UiWindow.prototype.close).to.have.been.calledOn(uiWindow);\n  });",
            "file": "spec/elements/window.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "constructor",
            "suites": [
                "Comment"
            ],
            "updatePoint": {
                "line": 8,
                "column": 17
            },
            "line": 8,
            "code": "  it('constructor', () => {\n    const node = new Comment('foo');\n    expect(node.parentNode).to.be.null;\n    expect(node.prevSibling).to.be.null;\n    expect(node.nextSibling).to.be.null;\n    expect(node.tagName).to.be.empty;\n    expect(node.text).to.equal('foo');\n  });",
            "file": "spec/nodes/comment.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "setText",
            "suites": [
                "Comment"
            ],
            "updatePoint": {
                "line": 16,
                "column": 13
            },
            "line": 16,
            "code": "  it('setText', () => {\n    const node = new Comment('foo');\n    node.setText('bar');\n    expect(node.text).to.equal('bar');\n  });",
            "file": "spec/nodes/comment.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "constructor",
            "suites": [
                "TextNode"
            ],
            "updatePoint": {
                "line": 11,
                "column": 17
            },
            "line": 11,
            "code": "  it('constructor', () => {\n    const node = new TextNode('foo');\n    expect(node.parentNode).to.be.null;\n    expect(node.prevSibling).to.be.null;\n    expect(node.nextSibling).to.be.null;\n    expect(node.tagName).to.be.empty;\n    expect(node.text).to.equal('foo');\n  });",
            "file": "spec/nodes/textnode.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "setText",
            "suites": [
                "TextNode"
            ],
            "updatePoint": {
                "line": 19,
                "column": 13
            },
            "line": 19,
            "code": "  it('setText', () => {\n    const node = new TextNode('foo');\n    node.setText('bar');\n    expect(node.text).to.equal('bar');\n  });",
            "file": "spec/nodes/textnode.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "setText with parent element",
            "suites": [
                "TextNode"
            ],
            "updatePoint": {
                "line": 24,
                "column": 33
            },
            "line": 24,
            "code": "  it('setText with parent element', () => {\n    const node = new TextNode('foo');\n    const parent = new Element('parent');\n    parent.appendChild(node);\n    sinon.stub(parent, '_setContentText');\n    node.setText('bar');\n    expect(parent._setContentText).to.have.been.calledWith('bar');\n  });",
            "file": "spec/nodes/textnode.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "mount a window component",
            "suites": [
                "runtime",
                "components"
            ],
            "updatePoint": {
                "line": 11,
                "column": 32
            },
            "line": 11,
            "code": "    it('mount a window component', () => {\n      const vm = new Vue({\n        render(h) {\n          return h('Window', {\n            attrs: {\n              title: 'foo'\n            }\n          });\n        }\n\n      });\n      sinon.spy(libui.UiWindow.prototype, 'show');\n      vm.$mount();\n      expect(vm.$el).to.be.an('object');\n      expect(vm.$el.window).to.be.an.instanceof(libui.UiWindow);\n      expect(vm.$el.window.title).to.equal('foo');\n      expect(libui.UiWindow.prototype.show).to.have.been.calledOn(vm.$el.window);\n    });",
            "file": "spec/runtime.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "mount a non-window component fails",
            "suites": [
                "runtime",
                "components"
            ],
            "updatePoint": {
                "line": 29,
                "column": 42
            },
            "line": 29,
            "code": "    it('mount a non-window component fails', () => {\n      const vm = new Vue({\n        render(h) {\n          return h('Box');\n        }\n\n      });\n      expect(() => vm.$mount()).to.throw();\n    });",
            "file": "spec/runtime.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "component with child widgets",
            "suites": [
                "runtime",
                "components"
            ],
            "updatePoint": {
                "line": 38,
                "column": 36
            },
            "line": 38,
            "code": "    it('component with child widgets', () => {\n      const vm = new Vue({\n        render(h) {\n          return h('Window', {\n            attrs: {\n              title: 'foo'\n            }\n          }, [h('Box', {\n            ref: 'box'\n          }, [h('Text', {\n            ref: 'text'\n          }, 'bar')])]);\n        }\n\n      });\n      vm.$mount();\n      expect(vm.$refs.box).to.be.an('object');\n      expect(vm.$refs.box.widget).to.be.an.instanceof(libui.UiVerticalBox);\n      expect(vm.$refs.text).to.be.an('object');\n      expect(vm.$refs.text.widget).to.be.an.instanceof(libui.UiLabel);\n      expect(vm.$refs.text.widget.text).to.equal('bar');\n    });",
            "file": "spec/runtime.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "component with interpolated data",
            "suites": [
                "runtime",
                "components"
            ],
            "updatePoint": {
                "line": 60,
                "column": 40
            },
            "line": 60,
            "code": "    it('component with interpolated data', done => {\n      const vm = new Vue({\n        data: {\n          title: '',\n          label: ''\n        },\n\n        render(h) {\n          return h('Window', {\n            attrs: {\n              title: this.title\n            }\n          }, [h('Text', {\n            ref: 'text'\n          }, this.label)]);\n        }\n\n      });\n      vm.$mount();\n      vm.title = 'foo';\n      vm.label = 'bar';\n      vm.$nextTick(() => {\n        expect(vm.$el.window.title).to.equal('foo');\n        expect(vm.$refs.text.widget.text).to.equal('bar');\n        done();\n      });\n    });",
            "file": "spec/runtime.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "component with boolean attributes",
            "suites": [
                "runtime",
                "components"
            ],
            "updatePoint": {
                "line": 87,
                "column": 41
            },
            "line": 87,
            "code": "    it('component with boolean attributes', () => {\n      const vm = new Vue({\n        render(h) {\n          return h('Window', {\n            attrs: {\n              title: 'foo',\n              margined: '',\n              borderless: ''\n            }\n          }, [h('Box', {\n            ref: 'box',\n            attrs: {\n              horizontal: '',\n              padded: ''\n            }\n          }, [h('Text', {\n            ref: 'text',\n            attrs: {\n              stretchy: ''\n            }\n          }, 'bar')])]);\n        }\n\n      });\n      vm.$mount();\n      expect(vm.$el.window.margined).to.be.true;\n      expect(vm.$el.window.borderless).to.be.true;\n      expect(vm.$refs.box.widget).to.be.an.instanceof(libui.UiHorizontalBox);\n      expect(vm.$refs.box.widget.padded).to.be.true;\n      expect(vm.$refs.text.attributes.stretchy).to.be.true;\n    });",
            "file": "spec/runtime.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "component with an event handler",
            "suites": [
                "runtime",
                "components"
            ],
            "updatePoint": {
                "line": 118,
                "column": 39
            },
            "line": 118,
            "code": "    it('component with an event handler', () => {\n      const vm = new Vue({\n        render(h) {\n          return h('Window', {\n            attrs: {\n              title: 'foo'\n            }\n          }, [h('Button', {\n            ref: 'button',\n            on: {\n              click: this.click\n            }\n          }, 'bar')]);\n        },\n\n        methods: {\n          click() {}\n\n        }\n      });\n      sinon.spy(libui.UiButton.prototype, 'onClicked');\n      sinon.spy(vm, 'click');\n      vm.$mount();\n      expect(libui.UiButton.prototype.onClicked).to.have.been.calledOn(vm.$refs.button.widget).and.calledWith(sinon.match(handler => {\n        handler();\n        expect(vm.click).to.have.been.called;\n        return true;\n      }));\n    });",
            "file": "spec/runtime.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "conditional rendering",
            "suites": [
                "runtime",
                "components"
            ],
            "updatePoint": {
                "line": 147,
                "column": 29
            },
            "line": 147,
            "code": "    it('conditional rendering', done => {\n      const vm = new Vue({\n        data: {\n          input: false\n        },\n\n        render(h) {\n          return h('Window', {\n            attrs: {\n              title: 'foo'\n            }\n          }, [h('Box', {\n            ref: 'box'\n          }, [this.input ? h('TextInput', {\n            ref: 'input'\n          }) : h('Text', {\n            ref: 'text'\n          }, 'foo')])]);\n        }\n\n      });\n      vm.$mount();\n      expect(vm.$refs.input).to.be.undefined;\n      expect(vm.$refs.text).to.be.an('object');\n      expect(vm.$refs.text.widget).to.be.an.instanceof(libui.UiLabel);\n      expect(vm.$refs.box.widget.children).to.deep.equal([vm.$refs.text.widget]);\n      vm.input = true;\n      vm.$nextTick(() => {\n        expect(vm.$refs.text).to.be.undefined;\n        expect(vm.$refs.input).to.be.an('object');\n        expect(vm.$refs.input.widget).to.be.an.instanceof(libui.UiEntry);\n        expect(vm.$refs.box.widget.children).to.deep.equal([vm.$refs.input.widget]);\n        done();\n      });\n    });",
            "file": "spec/runtime.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "custom component",
            "suites": [
                "runtime",
                "components"
            ],
            "updatePoint": {
                "line": 182,
                "column": 24
            },
            "line": 182,
            "code": "    it('custom component', () => {\n      const CustomText = Vue.extend({\n        props: {\n          label: String\n        },\n\n        render(h) {\n          return h('Text', {\n            ref: 'text'\n          }, this.label);\n        }\n\n      });\n      const vm = new Vue({\n        components: {\n          CustomText\n        },\n\n        render(h) {\n          return h('Window', {\n            attrs: {\n              title: 'foo'\n            }\n          }, [h('CustomText', {\n            ref: 'child',\n            props: {\n              label: 'foo'\n            }\n          })]);\n        }\n\n      });\n      vm.$mount();\n      expect(vm.$refs.child.$refs.text).to.be.an('object');\n      expect(vm.$refs.child.$refs.text.widget).to.be.an.instanceof(libui.UiLabel);\n      expect(vm.$refs.child.$refs.text.widget.text).to.equal('foo');\n    });",
            "file": "spec/runtime.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "destroy a window component",
            "suites": [
                "runtime",
                "components"
            ],
            "updatePoint": {
                "line": 219,
                "column": 34
            },
            "line": 219,
            "code": "    it('destroy a window component', () => {\n      const vm = new Vue({\n        render(h) {\n          return h('Window', {\n            attrs: {\n              title: 'foo'\n            }\n          });\n        }\n\n      });\n      vm.$mount();\n      sinon.spy(libui.UiWindow.prototype, 'close');\n      const window = vm.$el.window;\n      vm.$destroy();\n      expect(vm.$el.window).to.be.null;\n      expect(libui.UiWindow.prototype.close).to.have.been.calledOn(window);\n    });",
            "file": "spec/runtime.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "$libui property",
            "suites": [
                "runtime",
                "API"
            ],
            "updatePoint": {
                "line": 239,
                "column": 23
            },
            "line": 239,
            "code": "    it('$libui property', () => {\n      const vm = new Vue();\n      expect(vm.$libui).to.equal(libui);\n    });",
            "file": "spec/runtime.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "$start method",
            "suites": [
                "runtime",
                "API"
            ],
            "updatePoint": {
                "line": 243,
                "column": 21
            },
            "line": 243,
            "code": "    it('$start method', () => {\n      const vm = new Vue({\n        render(h) {\n          return h('Window', {\n            attrs: {\n              title: 'foo'\n            }\n          });\n        }\n\n      });\n      sinon.spy(Vue.prototype, '$mount');\n      sinon.spy(libui, 'startLoop');\n      vm.$start();\n      expect(Vue.prototype.$mount).to.have.been.calledOn(vm);\n      expect(libui.startLoop).to.have.been.called;\n    });",
            "file": "spec/runtime.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "$start method on mounted window",
            "suites": [
                "runtime",
                "API"
            ],
            "updatePoint": {
                "line": 260,
                "column": 39
            },
            "line": 260,
            "code": "    it('$start method on mounted window', () => {\n      const vm = new Vue({\n        render(h) {\n          return h('Window', {\n            attrs: {\n              title: 'foo'\n            }\n          });\n        }\n\n      });\n      vm.$mount();\n      sinon.spy(Vue.prototype, '$mount');\n      sinon.spy(libui, 'startLoop');\n      vm.$start();\n      expect(Vue.prototype.$mount).to.have.not.been.calledOn(vm);\n      expect(libui.startLoop).to.have.been.called;\n    });",
            "file": "spec/runtime.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "$exit method",
            "suites": [
                "runtime",
                "API"
            ],
            "updatePoint": {
                "line": 278,
                "column": 20
            },
            "line": 278,
            "code": "    it('$exit method', () => {\n      const vm = new Vue({\n        render(h) {\n          return h('Window', {\n            attrs: {\n              title: 'foo'\n            }\n          });\n        }\n\n      });\n      vm.$start();\n      sinon.spy(Vue.prototype, '$destroy');\n      sinon.spy(libui, 'stopLoop');\n      vm.$exit();\n      expect(Vue.prototype.$destroy).to.have.been.calledOn(vm);\n      expect(libui.stopLoop).to.have.been.called;\n    });",
            "file": "spec/runtime.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "$exit method on destroyed window",
            "suites": [
                "runtime",
                "API"
            ],
            "updatePoint": {
                "line": 296,
                "column": 40
            },
            "line": 296,
            "code": "    it('$exit method on destroyed window', () => {\n      const vm = new Vue({\n        render(h) {\n          return h('Window', {\n            attrs: {\n              title: 'foo'\n            }\n          });\n        }\n\n      });\n      vm.$start();\n      vm.$destroy();\n      sinon.spy(Vue.prototype, '$destroy');\n      sinon.spy(libui, 'stopLoop');\n      vm.$exit();\n      expect(Vue.prototype.$destroy).to.have.not.been.calledOn(vm);\n      expect(libui.stopLoop).to.have.been.called;\n    });",
            "file": "spec/runtime.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "$exit method with multiple windows",
            "suites": [
                "runtime",
                "API"
            ],
            "updatePoint": {
                "line": 315,
                "column": 42
            },
            "line": 315,
            "code": "    it('$exit method with multiple windows', () => {\n      const options = {\n        render(h) {\n          return h('Window', {\n            attrs: {\n              title: 'foo'\n            }\n          });\n        }\n\n      };\n      const vm1 = new Vue(options);\n      const vm2 = new Vue(options);\n      vm1.$mount();\n      vm2.$mount();\n      vm1.$start();\n      sinon.spy(Vue.prototype, '$destroy');\n      sinon.spy(libui, 'stopLoop');\n      vm1.$exit();\n      expect(Vue.prototype.$destroy).to.have.been.calledOn(vm1).and.calledOn(vm2);\n      expect(libui.stopLoop).to.have.been.calledOnce;\n    });",
            "file": "spec/runtime.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "msgBox",
            "suites": [
                "runtime",
                "$dialogs"
            ],
            "updatePoint": {
                "line": 353,
                "column": 14
            },
            "line": 353,
            "code": "    it('msgBox', () => {\n      sinon.spy(libui.UiDialogs, 'msgBox');\n      vm.$dialogs.msgBox('foo', 'bar');\n      expect(libui.UiDialogs.msgBox).to.have.been.calledWith(vm.$el.window, 'foo', 'bar');\n    });",
            "file": "spec/runtime.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "msgBoxError",
            "suites": [
                "runtime",
                "$dialogs"
            ],
            "updatePoint": {
                "line": 358,
                "column": 19
            },
            "line": 358,
            "code": "    it('msgBoxError', () => {\n      sinon.spy(libui.UiDialogs, 'msgBoxError');\n      vm.$dialogs.msgBoxError('foo', 'bar');\n      expect(libui.UiDialogs.msgBoxError).to.have.been.calledWith(vm.$el.window, 'foo', 'bar');\n    });",
            "file": "spec/runtime.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "openFile",
            "suites": [
                "runtime",
                "$dialogs"
            ],
            "updatePoint": {
                "line": 363,
                "column": 16
            },
            "line": 363,
            "code": "    it('openFile', () => {\n      sinon.stub(libui.UiDialogs, 'openFile').returns('foo');\n      const result = vm.$dialogs.openFile();\n      expect(libui.UiDialogs.openFile).to.have.been.calledWith(vm.$el.window);\n      expect(result).to.equal('foo');\n    });",
            "file": "spec/runtime.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "saveFile",
            "suites": [
                "runtime",
                "$dialogs"
            ],
            "updatePoint": {
                "line": 369,
                "column": 16
            },
            "line": 369,
            "code": "    it('saveFile', () => {\n      sinon.stub(libui.UiDialogs, 'saveFile').returns('foo');\n      const result = vm.$dialogs.saveFile();\n      expect(libui.UiDialogs.saveFile).to.have.been.calledWith(vm.$el.window);\n      expect(result).to.equal('foo');\n    });",
            "file": "spec/runtime.spec.js",
            "skipped": false,
            "dir": "test"
        }
    ],
    "badge": "mimecorg__vuido.svg"
}