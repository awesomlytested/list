{
    "repo": "caprover/caprover",
    "url": "https://github.com/caprover/caprover",
    "branch": "master",
    "configs": [
        {
            "package": "caprover",
            "lang": "ts",
            "dir": "tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        }
    ],
    "tests": [
        {
            "name": "apache_test",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 17
            },
            "line": 3,
            "code": "test('apache_test', () => {\n    // Test for valid password.\n    {\n        const encrypted = ApacheMd5.createApacheHash(\n            'su/P3R%se#ret!',\n            '$apr1$cF.rAvCe$YlzjmK4qu/ia6hC8CNfnm/'\n        )\n        expect(encrypted).toBe('$apr1$cF.rAvCe$YlzjmK4qu/ia6hC8CNfnm/')\n    }\n\n    // Test for valid short password.\n    {\n        const encrypted = ApacheMd5.createApacheHash(\n            '123456',\n            '$1$VV5.4y5.$JbhytGQBPmDHBbrSjF2i7.'\n        )\n        expect(encrypted).toBe('$1$VV5.4y5.$JbhytGQBPmDHBbrSjF2i7.')\n    }\n\n    // Test for invalid password.\n    {\n        const encrypted =\n            ApacheMd5.createApacheHash(\n                'invalidPass',\n                '$apr1$cF.rAvCe$YlzjmK4qu/ia6hC8CNfnm/'\n            ) == '$apr1$cF.rAvCe$YlzjmK4qu/ia6hC8CNfnm/'\n        expect(encrypted).toBeFalsy()\n    }\n\n    // Test for invalid short password.\n    {\n        const encrypted =\n            ApacheMd5.createApacheHash(\n                'passw0rdpa55wore',\n                '$1$VV5.4y5.$9981ZZhKTHmeXFKQur4cV0'\n            ) == '$1$VV5.4y5.$9981ZZhKTHmeXFKQur4cV0'\n        expect(encrypted).toBeFalsy()\n    }\n})",
            "file": "ApacheMd5.test.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Testing Authenticator 1",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 29
            },
            "line": 3,
            "code": "test('Testing Authenticator 1', () => {\n    const passwordStored =\n        '5EXJbB3Ys4fSg8M7m8FFt8duVvej9oD93SfgXjNNn6EbXG9KU63CZhZbRZ79amRw'\n    // const passwordEntered =\n    //     '5EXJbB3Ys4fSg8M7m8FFt8duVvej9oD93SfgXjNNnaaaaaaaaaaaaaaaaaaaaaaaaaa6EbXG9KU63CZhZbRZ79amRw'\n    const HASH = '2848d8c9-4719-4ad1-bc12-c405a78913c5captain'\n\n    let hashed = bcrypt.hashSync(HASH + passwordStored, bcrypt.genSaltSync(10))\n\n    hashed = '$2a$10$9pEXSGfCSiz/ZC49ucqHuOCiuCy2dK17uqQtXn8BQfx2jt8cYFA9K'\n\n    expect(\n        bcrypt.compareSync(\n            HASH +\n                '5EXJbB3Ys4fSg8M7m8FFt8duVvej9oD93SfgXjNNnaaaaaaaaaaaaaaaaaaaaaaaaaa6EbXG9KU63CZhZbRZ79amRw',\n            hashed\n        )\n    ).toBe(true)\n})",
            "file": "Authenticator.test.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "No backup file",
            "suites": [],
            "updatePoint": {
                "line": 32,
                "column": 20
            },
            "line": 32,
            "code": "test('No backup file', () => {\n    const bk = new BackupManager()\n    return Promise.resolve()\n        .then(function () {\n            return bk.checkAndPrepareRestoration()\n        })\n        .then(function (data) {\n            expect(data).toBeFalsy()\n        })\n})",
            "file": "backup.test.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Test backup file",
            "suites": [],
            "updatePoint": {
                "line": 43,
                "column": 22
            },
            "line": 43,
            "code": "test('Test backup file', () => {\n    const bk = new BackupManager()\n    return Promise.resolve()\n        .then(function () {\n            return copy(`${__dirname}/backup.tar`, BACKUP_FILE_PATH_ABSOLUTE)\n        })\n        .then(function () {\n            return bk.checkAndPrepareRestoration()\n        })\n        .then(function () {\n            return readJson(\n                CaptainConstants.restoreDirectoryPath +\n                    '/restore-instructions.json'\n            )\n        })\n        .then(function (ret: RestoringInfo) {\n            const expectedValue = {\n                nodesMapping: [\n                    {\n                        newIp: 'CURRENT_NODE_DONT_CHANGE',\n                        oldIp: '123.123.123.123',\n                        privateKeyPath: '',\n                        user: '',\n                    },\n                ],\n                oldNodesForReference: [\n                    {\n                        nodeData: {\n                            nodeId: '123456789',\n                            type: 'manager',\n                            isLeader: true,\n                            hostname: 'test',\n                            architecture: 'x86_64',\n                            operatingSystem: 'linux',\n                            nanoCpu: 8000000000,\n                            memoryBytes: 8241434624,\n                            dockerEngineVersion: '18.09.2',\n                            ip: '123.123.123.123',\n                            state: 'ready',\n                            status: 'active',\n                        },\n                        appsLockOnThisNode: ['pers1'],\n                    },\n                ],\n            }\n            expect(isDeepStrictEqual(ret, expectedValue)).toBe(true)\n            ret.nodesMapping[0].oldIp += ' '\n            expect(isDeepStrictEqual(ret, expectedValue)).toBe(false)\n        })\n})",
            "file": "backup.test.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Large Circular Queue",
            "suites": [],
            "updatePoint": {
                "line": 12,
                "column": 26
            },
            "line": 12,
            "code": "test('Large Circular Queue', () => {\n    for (let index = 5; index < 20; index++) {\n        expect(createTest(4, index).peek()) //\n            .toBe('val:' + (index - 3))\n    }\n})",
            "file": "CircularQueue.test.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Basic Circular Queue",
            "suites": [],
            "updatePoint": {
                "line": 19,
                "column": 26
            },
            "line": 19,
            "code": "test('Basic Circular Queue', () => {\n    expect(createTest(2, 10).peek()) //\n        .toBe('val:9')\n\n})",
            "file": "CircularQueue.test.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Basic Circular Queue",
            "suites": [],
            "updatePoint": {
                "line": 25,
                "column": 26
            },
            "line": 25,
            "code": "test('Basic Circular Queue', () => {\n    expect(createTest(2, 1).peek()) //\n        .toBe(undefined)\n})",
            "file": "CircularQueue.test.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Basic Circular Queue",
            "suites": [],
            "updatePoint": {
                "line": 30,
                "column": 26
            },
            "line": 30,
            "code": "test('Basic Circular Queue', () => {\n    expect(createTest(2, 2).peek()) //\n        .toBe('val:1')\n})",
            "file": "CircularQueue.test.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Basic Circular Queue",
            "suites": [],
            "updatePoint": {
                "line": 35,
                "column": 26
            },
            "line": 35,
            "code": "test('Basic Circular Queue', () => {\n    expect(createTest(2, 3).peek()) //\n        .toBe('val:2')\n})",
            "file": "CircularQueue.test.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "dockerodeUtils",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 20
            },
            "line": 4,
            "code": "test('dockerodeUtils', () => {\n    {\n        const parsed = dockerodeUtils.parseRepositoryTag('lib/repo:tag.v1.0')\n        expect(parsed.tag).toBe('tag.v1.0')\n        expect(parsed.repository).toBe('lib/repo')\n    }\n\n    {\n        const parsed = dockerodeUtils.parseRepositoryTag(\n            'domain.com:3000/lib/repo:tag.v1.0'\n        )\n        expect(parsed.tag).toBe('tag.v1.0')\n        expect(parsed.repository).toBe('domain.com:3000/lib/repo')\n    }\n\n    {\n        const parsed = dockerodeUtils.parseRepositoryTag(\n            'domain.com:3000/repo:tag.v1.0'\n        )\n        expect(parsed.tag).toBe('tag.v1.0')\n        expect(parsed.repository).toBe('domain.com:3000/repo')\n    }\n})",
            "file": "dockerutil.test.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Testing Encryptor 1",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 25
            },
            "line": 3,
            "code": "test('Testing Encryptor 1', () => {\n    const encryptor = new CaptainEncryptor(\n        '8h9hasfasaaaaaaaaaaaaaa75h7553245235423452345235235235254h75h38'\n    )\n    const valueToBeEncrypter = 'qq'\n    expect(encryptor.decrypt(encryptor.encrypt(valueToBeEncrypter))).toBe(\n        valueToBeEncrypter\n    )\n})",
            "file": "encryptor.test.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Testing Encryptor 2",
            "suites": [],
            "updatePoint": {
                "line": 13,
                "column": 25
            },
            "line": 13,
            "code": "test('Testing Encryptor 2', () => {\n    const encryptor = new CaptainEncryptor(\n        '8h9hasfasaaaaaaaaaaaaaa75h7553245235423452345235235235254h75h38'\n    )\n    const valueToBeEncrypter = 'q290852f98nb80nv8m8m bn83vn@ 8098m%#@%$5$@#52q'\n    expect(encryptor.decrypt(encryptor.encrypt(valueToBeEncrypter))).toBe(\n        valueToBeEncrypter\n    )\n})",
            "file": "encryptor.test.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Testing Encryptor - Key too short",
            "suites": [],
            "updatePoint": {
                "line": 23,
                "column": 39
            },
            "line": 23,
            "code": "test('Testing Encryptor - Key too short', () => {\n    let value = 1\n    try {\n        const encryptor = new CaptainEncryptor('short')\n        if (encryptor) {\n            value = 0\n        }\n    } catch (e) {}\n    expect(value).toBe(1)\n})",
            "file": "encryptor.test.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Testing  - sanitizeRepoPathHttps",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 38
            },
            "line": 3,
            "code": "test('Testing  - sanitizeRepoPathHttps', () => {\n    expect(\n        GitHelper.sanitizeRepoPathHttps(\n            '  https://github.com/username/repository.git/ '\n        )\n    ).toBe('github.com/username/repository.git')\n})",
            "file": "GitHelper.test.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Testing  - sanitizeRepoPathHttps from SSH",
            "suites": [],
            "updatePoint": {
                "line": 11,
                "column": 47
            },
            "line": 11,
            "code": "test('Testing  - sanitizeRepoPathHttps from SSH', () => {\n    expect(\n        GitHelper.sanitizeRepoPathHttps(\n            ' git@github.com/username/repository.git/  '\n        )\n    ).toBe('github.com/username/repository.git')\n})",
            "file": "GitHelper.test.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Testing  - sanitizeRepoPathSsh",
            "suites": [],
            "updatePoint": {
                "line": 19,
                "column": 36
            },
            "line": 19,
            "code": "test('Testing  - sanitizeRepoPathSsh', () => {\n    expect(\n        GitHelper.sanitizeRepoPathSsh(\n            ' git@github.com:username/repository.git/  '\n        ).repoPath\n    ).toBe('ssh://git@github.com:22/username/repository.git')\n})",
            "file": "GitHelper.test.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Testing  - sanitizeRepoPathSsh - port",
            "suites": [],
            "updatePoint": {
                "line": 27,
                "column": 43
            },
            "line": 27,
            "code": "test('Testing  - sanitizeRepoPathSsh - port', () => {\n    expect(\n        GitHelper.sanitizeRepoPathSsh(\n            ' git@github.com:username/repository.git/  '\n        ).port\n    ).toBe(22)\n})",
            "file": "GitHelper.test.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Testing  - sanitizeRepoPathSsh - custom port",
            "suites": [],
            "updatePoint": {
                "line": 35,
                "column": 50
            },
            "line": 35,
            "code": "test('Testing  - sanitizeRepoPathSsh - custom port', () => {\n    expect(\n        GitHelper.sanitizeRepoPathSsh(\n            ' git@github.com:1234/username/repository.git/  '\n        ).port\n    ).toBe(1234)\n})",
            "file": "GitHelper.test.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Testing  - sanitizeRepoPathSsh from HTTPS",
            "suites": [],
            "updatePoint": {
                "line": 43,
                "column": 47
            },
            "line": 43,
            "code": "test('Testing  - sanitizeRepoPathSsh from HTTPS', () => {\n    expect(\n        GitHelper.sanitizeRepoPathSsh(\n            '  https://github.com/username/repository.git/ '\n        ).repoPath\n    ).toBe('ssh://git@github.com:22/username/repository.git')\n})",
            "file": "GitHelper.test.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Testing  - sanitizeRepoPathSsh - not git suffix",
            "suites": [],
            "updatePoint": {
                "line": 51,
                "column": 53
            },
            "line": 51,
            "code": "test('Testing  - sanitizeRepoPathSsh - not git suffix', () => {\n    expect(\n        GitHelper.sanitizeRepoPathSsh('  github.com/owner/repository ').repoPath\n    ).toBe('ssh://git@github.com:22/owner/repository.git')\n})",
            "file": "GitHelper.test.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Testing  - sanitizeRepoPathSsh - alt domain",
            "suites": [],
            "updatePoint": {
                "line": 57,
                "column": 49
            },
            "line": 57,
            "code": "test('Testing  - sanitizeRepoPathSsh - alt domain', () => {\n    expect(\n        GitHelper.sanitizeRepoPathSsh(\n            '  git@git.alt-domain.com/owner/repository.git/ '\n        ).repoPath\n    ).toBe('ssh://git@git.alt-domain.com:22/owner/repository.git')\n})",
            "file": "GitHelper.test.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Testing  - sanitizeRepoPathSsh - alt user",
            "suites": [],
            "updatePoint": {
                "line": 65,
                "column": 47
            },
            "line": 65,
            "code": "test('Testing  - sanitizeRepoPathSsh - alt user', () => {\n    expect(\n        GitHelper.sanitizeRepoPathSsh(\n            '  foobar@github.com/owner/repository.git/ '\n        ).repoPath\n    ).toBe('ssh://foobar@github.com:22/owner/repository.git')\n})",
            "file": "GitHelper.test.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Testing  - sanitizeRepoPathSsh - default user",
            "suites": [],
            "updatePoint": {
                "line": 73,
                "column": 51
            },
            "line": 73,
            "code": "test('Testing  - sanitizeRepoPathSsh - default user', () => {\n    expect(\n        GitHelper.sanitizeRepoPathSsh('  github.com/owner/repository.git/ ')\n            .repoPath\n    ).toBe('ssh://git@github.com:22/owner/repository.git')\n})",
            "file": "GitHelper.test.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Testing  - sanitizeRepoPathSsh - no owner",
            "suites": [],
            "updatePoint": {
                "line": 80,
                "column": 47
            },
            "line": 80,
            "code": "test('Testing  - sanitizeRepoPathSsh - no owner', () => {\n    expect(\n        GitHelper.sanitizeRepoPathSsh('  git@github.com:repository.git/ ')\n            .repoPath\n    ).toBe('ssh://git@github.com:22/repository.git')\n})",
            "file": "GitHelper.test.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Testing  - sanitizeRepoPathSsh - invalid url",
            "suites": [],
            "updatePoint": {
                "line": 87,
                "column": 50
            },
            "line": 87,
            "code": "test('Testing  - sanitizeRepoPathSsh - invalid url', () => {\n    expect(() =>\n        GitHelper.sanitizeRepoPathSsh(\n            '  git:password@github.com/owner/repository.git/ '\n        )\n    ).toThrow(Error)\n})",
            "file": "GitHelper.test.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Testing  - getDomainFromSanitizedSshRepoPath - pure",
            "suites": [],
            "updatePoint": {
                "line": 95,
                "column": 57
            },
            "line": 95,
            "code": "test('Testing  - getDomainFromSanitizedSshRepoPath - pure', () => {\n    expect(\n        GitHelper.getDomainFromSanitizedSshRepoPath(\n            'ssh://git@github.com:132/username/repository.git'\n        )\n    ).toBe('github.com')\n})",
            "file": "GitHelper.test.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Testing  - getDomainFromSanitizedSshRepoPath",
            "suites": [],
            "updatePoint": {
                "line": 103,
                "column": 50
            },
            "line": 103,
            "code": "test('Testing  - getDomainFromSanitizedSshRepoPath', () => {\n    expect(\n        GitHelper.getDomainFromSanitizedSshRepoPath(\n            GitHelper.sanitizeRepoPathSsh(\n                ' git@github.com:username/repository.git/  '\n            ).repoPath\n        )\n    ).toBe('github.com')\n})",
            "file": "GitHelper.test.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Testing  - getDomainFromSanitizedSshRepoPath from HTTPS",
            "suites": [],
            "updatePoint": {
                "line": 113,
                "column": 61
            },
            "line": 113,
            "code": "test('Testing  - getDomainFromSanitizedSshRepoPath from HTTPS', () => {\n    expect(\n        GitHelper.getDomainFromSanitizedSshRepoPath(\n            GitHelper.sanitizeRepoPathSsh(\n                '  https://github.com/username/repository.git/ '\n            ).repoPath\n        )\n    ).toBe('github.com')\n})",
            "file": "GitHelper.test.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Testing  - getDomainFromSanitizedSshRepoPath - alt domain",
            "suites": [],
            "updatePoint": {
                "line": 123,
                "column": 63
            },
            "line": 123,
            "code": "test('Testing  - getDomainFromSanitizedSshRepoPath - alt domain', () => {\n    expect(\n        GitHelper.getDomainFromSanitizedSshRepoPath(\n            ' ssh://user@some.other-domain.com/owner/repository.git/ '\n        )\n    ).toBe('some.other-domain.com')\n})",
            "file": "GitHelper.test.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Testing dropFirstElements - larger",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 40
            },
            "line": 3,
            "code": "test('Testing dropFirstElements - larger', () => {\n    const originalArray = []\n    for (let index = 0; index < 20; index++) {\n        originalArray.push('A' + index)\n    }\n\n    expect(Utils.dropFirstElements(originalArray, 2).join(',')) //\n        .toBe('A18,A19')\n})",
            "file": "utils.test.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Testing dropFirstElements - same",
            "suites": [],
            "updatePoint": {
                "line": 13,
                "column": 38
            },
            "line": 13,
            "code": "test('Testing dropFirstElements - same', () => {\n    const originalArray = []\n    for (let index = 0; index < 2; index++) {\n        originalArray.push('A' + index)\n    }\n\n    expect(Utils.dropFirstElements(originalArray, 2).join(',')) //\n        .toBe('A0,A1')\n})",
            "file": "utils.test.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Testing dropFirstElements - smaller",
            "suites": [],
            "updatePoint": {
                "line": 23,
                "column": 41
            },
            "line": 23,
            "code": "test('Testing dropFirstElements - smaller', () => {\n    const originalArray = []\n    for (let index = 0; index < 2; index++) {\n        originalArray.push('A' + index)\n    }\n\n    expect(Utils.dropFirstElements(originalArray, 3).join(',')) //\n        .toBe('A0,A1')\n})",
            "file": "utils.test.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Testing dropFirstElements - smaller (1)",
            "suites": [],
            "updatePoint": {
                "line": 33,
                "column": 45
            },
            "line": 33,
            "code": "test('Testing dropFirstElements - smaller (1)', () => {\n    const originalArray = []\n    for (let index = 0; index < 1; index++) {\n        originalArray.push('A' + index)\n    }\n\n    expect(Utils.dropFirstElements(originalArray, 3).join(',')) //\n        .toBe('A0')\n})",
            "file": "utils.test.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Testing dropFirstElements - smaller (0)",
            "suites": [],
            "updatePoint": {
                "line": 43,
                "column": 45
            },
            "line": 43,
            "code": "test('Testing dropFirstElements - smaller (0)', () => {\n    const originalArray = []\n    for (let index = 0; index < 0; index++) {\n        originalArray.push('A' + index)\n    }\n\n    expect(Utils.dropFirstElements(originalArray, 3).join(',')) //\n        .toBe('')\n})",
            "file": "utils.test.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Testing filter in place - remove 1st",
            "suites": [],
            "updatePoint": {
                "line": 69,
                "column": 42
            },
            "line": 69,
            "code": "test('Testing filter in place - remove 1st', () => {\n    const originalArray = createTestArray()\n\n    Utils.filterInPlace(originalArray, (v) => v.val1 !== 'e-1-1')\n    expect(originalArray.length).toBe(1)\n    expect(originalArray[0].val1).toBe('e-1-2')\n    expect(originalArray[0].val2).toBe('e-2-2')\n})",
            "file": "utils.test.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Testing filter in place - remove 2nd",
            "suites": [],
            "updatePoint": {
                "line": 78,
                "column": 42
            },
            "line": 78,
            "code": "test('Testing filter in place - remove 2nd', () => {\n    const originalArray = createTestArray()\n\n    Utils.filterInPlace(originalArray, (v) => v.val1 !== 'e-1-2')\n    expect(originalArray.length).toBe(1)\n    expect(originalArray[0].val1).toBe('e-1-1')\n    expect(originalArray[0].val2).toBe('e-2-1')\n})",
            "file": "utils.test.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Testing code to check custom domain",
            "suites": [],
            "updatePoint": {
                "line": 87,
                "column": 41
            },
            "line": 87,
            "code": "test('Testing code to check custom domain', () => {\n    const rootDomain = 'google123.ca'\n    const appName = 'app1'\n\n    expect(() => Utils.checkCustomDomain('', appName, rootDomain)).toThrow(\n        'Domain name is not accepted. Please use alphanumerical domains such as myapp.google123.ca'\n    )\n\n    expect(() =>\n        Utils.checkCustomDomain('x'.repeat(81), appName, rootDomain)\n    ).toThrow(\n        'Domain name is not accepted. Please use alphanumerical domains less than 80 characters in length.'\n    )\n\n    expect(() =>\n        Utils.checkCustomDomain('..google321.ca', appName, rootDomain)\n    ).toThrow(\n        'Domain name is not accepted. You cannot have two consecutive periods \"..\" inside a domain name. Please use alphanumerical domains such as myapp.google123.ca'\n    )\n\n    expect(() =>\n        Utils.checkCustomDomain(`app2.${rootDomain}`, appName, rootDomain)\n    ).toThrow(\n        'Domain name is not accepted. Custom domain cannot be subdomain of root domain.'\n    )\n\n    expect(() =>\n        Utils.checkCustomDomain(\n            `api.${appName}.${rootDomain}`,\n            appName,\n            rootDomain\n        )\n    ).not.toThrow(\n        'Domain name is not accepted. Custom domain cannot be subdomain of root domain.'\n    )\n\n    expect(() =>\n        Utils.checkCustomDomain(`caprover123.ca`, appName, rootDomain)\n    ).not.toThrow()\n})",
            "file": "utils.test.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Testing JSON/YAML",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 23
            },
            "line": 3,
            "code": "test('Testing JSON/YAML', () => {\n    const badYaml = `\nversion: \"3.3\"\ns\n\n`\n    const badJSON = `\n{ something:\n`\n\n    const goodJSON = `\n{\n    \"version\": \"3.3\",\n    \"services\": {\n       \"$$cap_appname\": {\n          \"image\": \"adminer:$$cap_adminer_version\",\n          \"restart\": \"always\",\n          \"environment\": {\n             \"ADMINER_PLUGINS\": \"$$cap_adminer_plugins\",\n             \"ADMINER_DESIGN\": \"$$cap_adminer_design\"\n          },\n          \"caproverExtra\": {\n             \"containerHttpPort\": \"8080\"\n          }\n       }\n    },\n    \"captainVersion\": 4,\n    \"caproverOneClickApp\": {\n       \"variables\": [\n          {\n             \"id\": \"$$cap_adminer_version\"\n          }\n       ]\n    }\n }\n`\n\n    const goodYAML = `\nversion: \"3.3\"\nservices:\n  $$cap_appname:\n    image: 'adminer:$$cap_adminer_version'\n    restart: always\n    environment:\n      ADMINER_PLUGINS: $$cap_adminer_plugins\n      ADMINER_DESIGN: $$cap_adminer_design\n    caproverExtra:\n      containerHttpPort: '8080'\n### ================================\n### CAPROVER ONE CLICK APP SPECIFICS\n### ================================\ncaptainVersion: 4\ncaproverOneClickApp:\n  variables:\n    - id: $$cap_adminer_version\n`\n\n    expect(Utils.convertYamlOrJsonToObject(badYaml)).toBeUndefined()\n    expect(Utils.convertYamlOrJsonToObject(badJSON)).toBeUndefined()\n\n    expect(Utils.convertYamlOrJsonToObject(goodJSON)).toStrictEqual(\n        JSON.parse(goodJSON)\n    )\n    expect(Utils.convertYamlOrJsonToObject(goodYAML)).toStrictEqual(\n        JSON.parse(goodJSON)\n    )\n})",
            "file": "utilsJsonYaml.test.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Testing merge objects",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 27
            },
            "line": 3,
            "code": "test('Testing merge objects', () => {\n    expect(Utils.mergeObjects({ k1: 'v1' }, {})) //\n        .toStrictEqual({ k1: 'v1' })\n\n    expect(Utils.mergeObjects({ k1: 'v1' }, { k2: 'v2' })) //\n        .toStrictEqual({ k1: 'v1', k2: 'v2' })\n\n    expect(Utils.mergeObjects({ k1: 'v1', k2: 'v1' }, { k2: 'v2' })) //\n        .toStrictEqual({ k1: 'v1', k2: 'v2' })\n\n    expect(\n        Utils.mergeObjects(\n            {\n                k1: 'v1',\n                k2: {\n                    k21: 'v21',\n                    k22: 'v22',\n                    k23: ['v23a', 'v23b'],\n                    k24: ['v24a', 'v24b'],\n                },\n            },\n            { k2: { k22: 'v22New', k23: ['v23c'] } }\n        )\n    ) //\n        .toStrictEqual({\n            k1: 'v1',\n            k2: {\n                k21: 'v21',\n                k22: 'v22New',\n                k23: ['v23c'],\n                k24: ['v24a', 'v24b'],\n            },\n        })\n\n    expect(\n        Utils.mergeObjects({ k1: 'v1', k2: ['t1', 't2'] }, { k2: ['t3', 't4'] })\n    ) //\n        .toStrictEqual({ k1: 'v1', k2: ['t3', 't4'] })\n})",
            "file": "utilsMerge.test.ts",
            "skipped": false,
            "dir": "tests"
        }
    ],
    "badge": "caprover__caprover.svg"
}