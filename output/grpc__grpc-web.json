{"repo":"grpc/grpc-web","url":"https://github.com/grpc/grpc-web","branch":"master","configs":[{"package":"grpc-web","lang":"js","dir":"packages/grpc-web/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"should eval","suites":["grpc-web generated code eval test (commonjs+dts)"],"updatePoint":{"line":48,"column":17},"line":48,"code":"  it('should eval', function () {\n    execSync(genCodeCmd);\n    execSync(`npx gulp --gulpfile ./test/gulpfile.js gen-code-eval-test`);\n  });","file":"eval_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"should eval","suites":["grpc-web generated code eval test (typescript)"],"updatePoint":{"line":70,"column":17},"line":70,"code":"  it('should eval', function () {\n    execSync(genCodeCmd); // --skipLibCheck is needed because some of our node_modules/ targets es6\n    // but our test doesn't pass with `--target es6`\n    // TODO: Find out how we can enable --target es6!\n\n    execSync(`tsc --strict --skipLibCheck ${genTsCodePath}`);\n  });","file":"eval_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"should have MethodDescriptor exported","suites":["grpc-web export test"],"updatePoint":{"line":6,"column":43},"line":6,"code":"  it('should have MethodDescriptor exported', function () {\n    assert.equal(typeof grpc.web.MethodDescriptor, 'function');\n  });","file":"export_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"should have GrpcWebClientBase#rpcCall() exported","suites":["grpc-web export test"],"updatePoint":{"line":9,"column":54},"line":9,"code":"  it('should have GrpcWebClientBase#rpcCall() exported', function () {\n    assert.equal(typeof grpc.web.GrpcWebClientBase.prototype.rpcCall, 'function');\n  });","file":"export_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"should have GrpcWebClientBase#serverStreaming() exported","suites":["grpc-web export test"],"updatePoint":{"line":12,"column":62},"line":12,"code":"  it('should have GrpcWebClientBase#serverStreaming() exported', function () {\n    assert.equal(typeof grpc.web.GrpcWebClientBase.prototype.serverStreaming, 'function');\n  });","file":"export_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"should have RpcError properties exported","suites":["grpc-web export test"],"updatePoint":{"line":15,"column":46},"line":15,"code":"  it('should have RpcError properties exported', function () {\n    const rpcError = new grpc.web.RpcError(\n    /* code= */\n    0, 'message');\n    assert.equal(typeof rpcError.code, 'number');\n    assert.equal(typeof rpcError.message, 'string');\n    assert.equal(typeof rpcError.metadata, 'object');\n  });","file":"export_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"should have StatusCode exported","suites":["grpc-web export test"],"updatePoint":{"line":23,"column":37},"line":23,"code":"  it('should have StatusCode exported', function () {\n    assert.deepEqual(grpc.web.StatusCode, {\n      ABORTED: 10,\n      ALREADY_EXISTS: 6,\n      CANCELLED: 1,\n      DATA_LOSS: 15,\n      DEADLINE_EXCEEDED: 4,\n      FAILED_PRECONDITION: 9,\n      INTERNAL: 13,\n      INVALID_ARGUMENT: 3,\n      NOT_FOUND: 5,\n      OK: 0,\n      OUT_OF_RANGE: 11,\n      PERMISSION_DENIED: 7,\n      RESOURCE_EXHAUSTED: 8,\n      UNAUTHENTICATED: 16,\n      UNAVAILABLE: 14,\n      UNIMPLEMENTED: 12,\n      UNKNOWN: 2\n    });\n  });","file":"export_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"should exist","suites":["protoc generated code"],"updatePoint":{"line":64,"column":18},"line":64,"code":"  it('should exist', function () {\n    execSync(genCodeCmd);\n    assert.equal(true, fs.existsSync(genCodePath));\n  });","file":"generated_code_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"should import","suites":["protoc generated code"],"updatePoint":{"line":68,"column":19},"line":68,"code":"  it('should import', function () {\n    execSync(genCodeCmd);\n\n    const {\n      EchoRequest\n    } = require(genCodePath);\n\n    var req = new EchoRequest();\n    req.setMessage('abc');\n    assert.equal('abc', req.getMessage());\n  });","file":"generated_code_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"should receive unary response","suites":["grpc-web generated code: promise-based client"],"updatePoint":{"line":95,"column":35},"line":95,"code":"  it('should receive unary response', function (done) {\n    const {\n      EchoServicePromiseClient\n    } = require(genCodePath);\n\n    const {\n      EchoRequest\n    } = require(protoGenCodePath);\n\n    var echoService = new EchoServicePromiseClient('MyHostname', null, null);\n    var request = new EchoRequest();\n    request.setMessage('aaa');\n\n    MockXMLHttpRequest.onSend = function (xhr) {\n      // a single data frame with message 'aaa'\n      assert.equal(\"AAAAAAUKA2FhYQ==\", xhr.body);\n      xhr.respond(200, {\n        'Content-Type': 'application/grpc-web-text'\n      }, // a single data frame with message 'aaa'\n      'AAAAAAUKA2FhYQ==');\n    };\n\n    echoService.echo(request, {}).then(response => {\n      assert.equal('aaa', response.getMessage());\n      done();\n    });\n  });","file":"generated_code_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"should receive error","suites":["grpc-web generated code: promise-based client"],"updatePoint":{"line":122,"column":26},"line":122,"code":"  it('should receive error', function (done) {\n    const {\n      EchoServicePromiseClient\n    } = require(genCodePath);\n\n    const {\n      EchoRequest\n    } = require(protoGenCodePath);\n\n    var echoService = new EchoServicePromiseClient('MyHostname', null, null);\n    var request = new EchoRequest();\n    request.setMessage('aaa');\n\n    MockXMLHttpRequest.onSend = function (xhr) {\n      xhr.respond(400, {\n        'Content-Type': 'application/grpc-web-text'\n      });\n    };\n\n    echoService.echo(request, {}).then(response => {\n      assert.fail('should not receive response');\n    }).catch(error => {\n      assert.equal(3, error.code);\n      done();\n    });\n  });","file":"generated_code_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"should exist","suites":["grpc-web generated code (commonjs+grpcwebtext)"],"updatePoint":{"line":184,"column":18},"line":184,"code":"  it('should exist', function () {\n    execSync(genCodeCmd);\n    assert.equal(true, fs.existsSync(genCodePath));\n  });","file":"generated_code_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"should import","suites":["grpc-web generated code (commonjs+grpcwebtext)"],"updatePoint":{"line":188,"column":19},"line":188,"code":"  it('should import', function () {\n    execSync(genCodeCmd);\n\n    const {\n      EchoServiceClient\n    } = require(genCodePath);\n\n    var echoService = new EchoServiceClient('Bla', null, null);\n    assert.equal('function', typeof echoService.echo);\n  });","file":"generated_code_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"should send unary request","suites":["grpc-web generated code (commonjs+grpcwebtext)"],"updatePoint":{"line":198,"column":31},"line":198,"code":"  it('should send unary request', function (done) {\n    execSync(genCodeCmd);\n\n    const {\n      EchoServiceClient\n    } = require(genCodePath);\n\n    const {\n      EchoRequest\n    } = require(protoGenCodePath);\n\n    var echoService = new EchoServiceClient('MyHostname', null, null);\n    var request = new EchoRequest();\n    request.setMessage('aaa');\n\n    MockXMLHttpRequest.onSend = function (xhr) {\n      assert.equal('POST', xhr.method); // a single 'aaa' string, encoded\n\n      assert.equal('AAAAAAUKA2FhYQ==', xhr.body);\n      assert.equal('MyHostname/grpc.gateway.testing.EchoService/Echo', xhr.url);\n      assert.equal('accept: application/grpc-web-text\\r\\n' + 'content-type: application/grpc-web-text\\r\\n' + 'custom-header-1: value1\\r\\n' + 'x-grpc-web: 1\\r\\n' + 'x-user-agent: grpc-web-javascript/0.1\\r\\n', xhr.requestHeaders.getAll());\n      done();\n    };\n\n    echoService.echo(request, {\n      'custom-header-1': 'value1'\n    });\n  });","file":"generated_code_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"should receive unary response","suites":["grpc-web generated code (commonjs+grpcwebtext)"],"updatePoint":{"line":226,"column":35},"line":226,"code":"  it('should receive unary response', function (done) {\n    execSync(genCodeCmd);\n\n    const {\n      EchoServiceClient\n    } = require(genCodePath);\n\n    const {\n      EchoRequest\n    } = require(protoGenCodePath);\n\n    var echoService = new EchoServiceClient('MyHostname', null, null);\n    var request = new EchoRequest();\n    request.setMessage('aaa');\n\n    MockXMLHttpRequest.onSend = function (xhr) {\n      xhr.respond(200, {\n        'Content-Type': 'application/grpc-web-text'\n      }, // a single data frame with 'aaa' message, encoded\n      'AAAAAAUKA2FhYQ==');\n    };\n\n    var call = echoService.echo(request, {\n      'custom-header-1': 'value1'\n    }, function (err, response) {\n      assert.equal('aaa', response.getMessage());\n      done();\n    });\n    call.on('data', response => {\n      assert.fail('should not receive response this way');\n    });\n  });","file":"generated_code_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"should receive streaming response","suites":["grpc-web generated code (commonjs+grpcwebtext)"],"updatePoint":{"line":258,"column":39},"line":258,"code":"  it('should receive streaming response', function (done) {\n    done = multiDone(done, 4); // done() should be called 4 times\n\n    execSync(genCodeCmd);\n\n    const {\n      EchoServiceClient\n    } = require(genCodePath);\n\n    const {\n      ServerStreamingEchoRequest\n    } = require(protoGenCodePath);\n\n    var echoService = new EchoServiceClient('MyHostname', null, null);\n    var request = new ServerStreamingEchoRequest();\n    request.setMessage('aaa');\n    request.setMessageCount(3);\n\n    MockXMLHttpRequest.onSend = function (xhr) {\n      // a proto message of 1: \"aaa\", 2: 3, base64-encoded\n      assert.equal(\"AAAAAAcKA2FhYRAD\", xhr.body);\n      xhr.respond(200, {\n        'Content-Type': 'application/grpc-web-text'\n      }, // 3 'aaa' messages in 3 data frames, encoded\n      'AAAAAAUKA2FhYQAAAAAFCgNhYWEAAAAABQoDYWFh');\n    };\n\n    var stream = echoService.serverStreamingEcho(request, {});\n    stream.on('data', function (response) {\n      assert.equal('aaa', response.getMessage());\n      done();\n    });\n    stream.on('end', function () {\n      done();\n    });\n  });","file":"generated_code_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"should receive trailing metadata","suites":["grpc-web generated code (commonjs+grpcwebtext)"],"updatePoint":{"line":294,"column":38},"line":294,"code":"  it('should receive trailing metadata', function (done) {\n    done = multiDone(done, 2);\n    execSync(genCodeCmd);\n\n    const {\n      EchoServiceClient\n    } = require(genCodePath);\n\n    const {\n      EchoRequest\n    } = require(protoGenCodePath);\n\n    var echoService = new EchoServiceClient('MyHostname', null, null);\n    var request = new EchoRequest();\n    request.setMessage('aaa');\n\n    MockXMLHttpRequest.onSend = function (xhr) {\n      xhr.respond(200, {\n        'Content-Type': 'application/grpc-web-text'\n      }, // a single data frame with an 'aaa' message, followed by,\n      // a trailer frame with content 'grpc-status: 0\\d\\ax-custom-1: ababab'\n      'AAAAAAUKA2FhYYAAAAAkZ3JwYy1zdGF0dXM6IDANCngtY3VzdG9tLTE6IGFiYWJhYg0K');\n    };\n\n    var call = echoService.echo(request, {\n      'custom-header-1': 'value1'\n    }, function (err, response) {\n      if (err) {\n        assert.fail('should not receive error');\n      }\n\n      assert(response);\n      assert.equal('aaa', response.getMessage());\n      done();\n    });\n    call.on('status', function (status) {\n      assert.equal(0, status.code);\n      assert.equal('object', typeof status.metadata);\n      assert.equal(false, 'grpc-status' in status.metadata);\n      assert.equal(true, 'x-custom-1' in status.metadata);\n      assert.equal('ababab', status.metadata['x-custom-1']);\n      done();\n    });\n  });","file":"generated_code_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"should receive error","suites":["grpc-web generated code (commonjs+grpcwebtext)"],"updatePoint":{"line":338,"column":26},"line":338,"code":"  it('should receive error', function (done) {\n    execSync(genCodeCmd);\n\n    const {\n      EchoServiceClient\n    } = require(genCodePath);\n\n    const {\n      EchoRequest\n    } = require(protoGenCodePath);\n\n    var echoService = new EchoServiceClient('MyHostname', null, null);\n    var request = new EchoRequest();\n    request.setMessage('aaa');\n\n    MockXMLHttpRequest.onSend = function (xhr) {\n      xhr.respond(200, {\n        'Content-Type': 'application/grpc-web-text'\n      }, // a trailer frame with content 'grpc-status:10'\n      'gAAAABBncnBjLXN0YXR1czoxMA0K');\n    };\n\n    var call = echoService.echo(request, {\n      'custom-header-1': 'value1'\n    }, function (err, response) {\n      if (response) {\n        assert.fail('should not have received response');\n      }\n\n      assert(err);\n      assert.equal(10, err.code);\n      done();\n    });\n    call.on('error', error => {\n      assert.fail('error callback should not be called for unary calls');\n    });\n  });","file":"generated_code_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"should error out on incomplete response","suites":["grpc-web generated code (commonjs+grpcwebtext)"],"updatePoint":{"line":375,"column":45},"line":375,"code":"  it('should error out on incomplete response', function (done) {\n    execSync(genCodeCmd);\n\n    const {\n      EchoServiceClient\n    } = require(genCodePath);\n\n    const {\n      EchoRequest\n    } = require(protoGenCodePath);\n\n    var echoService = new EchoServiceClient('MyHostname', null, null);\n    var request = new EchoRequest();\n\n    MockXMLHttpRequest.onSend = function (xhr) {\n      xhr.respond(200, {\n        'Content-Type': 'application/grpc-web-text'\n      }, // An incomplete response. The frame length indicates\n      // 26 bytes, but the rest of the frame only contains\n      // 18 bytes.\n      'AAAAABoKCwgBEgdGaWN0aW9uCgsIAhI');\n    };\n\n    var call = echoService.echo(request, {}, function (err, response) {\n      if (response) {\n        assert.fail('should not receive response');\n      }\n\n      assert.equal(2, err.code);\n      assert.equal(true, err.message.toLowerCase().includes('incomplete response'));\n      done();\n    });\n    call.on('data', response => {\n      assert.fail('should not receive response this way');\n    });\n    call.on('error', error => {\n      assert.fail('should not receive error this way');\n    });\n  });","file":"generated_code_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"should error out on invalid proto response","suites":["grpc-web generated code (commonjs+grpcwebtext)"],"updatePoint":{"line":414,"column":48},"line":414,"code":"  it('should error out on invalid proto response', function (done) {\n    execSync(genCodeCmd);\n\n    const {\n      EchoServiceClient\n    } = require(genCodePath);\n\n    const {\n      EchoRequest\n    } = require(protoGenCodePath);\n\n    var echoService = new EchoServiceClient('MyHostname', null, null);\n    var request = new EchoRequest();\n\n    MockXMLHttpRequest.onSend = function (xhr) {\n      xhr.respond(200, {\n        'Content-Type': 'application/grpc-web-text'\n      }, // A valid grpc-web frame, but contains an invalid\n      // protobuf payload.\n      'AAAAAAUKCgoKCg==');\n    };\n\n    var call = echoService.echo(request, {}, function (err, response) {\n      if (response) {\n        assert.fail('should not receive response');\n      }\n\n      assert.equal(13\n      /* StatusCode.INTERNAL */\n      , err.code);\n      assert.equal(true, err.message.toLowerCase().includes('deserializing'));\n      assert.equal(true, err.message.toLowerCase().includes('error'));\n      done();\n    });\n    call.on('data', response => {\n      assert.fail('should not receive response this way');\n    });\n    call.on('error', error => {\n      assert.fail('should not receive error this way');\n    });\n  });","file":"generated_code_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"should error out on invalid response body","suites":["grpc-web generated code (commonjs+grpcwebtext)"],"updatePoint":{"line":455,"column":47},"line":455,"code":"  it('should error out on invalid response body', function (done) {\n    execSync(genCodeCmd);\n\n    const {\n      EchoServiceClient\n    } = require(genCodePath);\n\n    const {\n      EchoRequest\n    } = require(protoGenCodePath);\n\n    var echoService = new EchoServiceClient('MyHostname', null, null);\n    var request = new EchoRequest();\n\n    MockXMLHttpRequest.onSend = function (xhr) {\n      xhr.respond(200, {\n        'Content-Type': 'application/grpc-web-text'\n      }, // An invalid response body. Should trip up in the\n      // stream parser.\n      'ZZZZZ');\n    };\n\n    var call = echoService.echo(request, {}, function (err, response) {\n      if (response) {\n        assert.fail('should not receive response');\n      }\n\n      assert.equal(2, err.code);\n      assert.equal(true, err.message.toLowerCase().includes('error in parsing response body'));\n      done();\n    });\n    call.on('data', response => {\n      assert.fail('should not receive response this way');\n    });\n    call.on('error', error => {\n      assert.fail('should not receive error this way');\n    });\n  });","file":"generated_code_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"should not receive response on non-ok status","suites":["grpc-web generated code (commonjs+grpcwebtext)"],"updatePoint":{"line":493,"column":50},"line":493,"code":"  it('should not receive response on non-ok status', function (done) {\n    done = multiDone(done, 2);\n    execSync(genCodeCmd);\n\n    const {\n      EchoServiceClient\n    } = require(genCodePath);\n\n    const {\n      EchoRequest\n    } = require(protoGenCodePath);\n\n    var echoService = new EchoServiceClient('MyHostname', null, null);\n    var request = new EchoRequest();\n    request.setMessage('aaa');\n\n    MockXMLHttpRequest.onSend = function (xhr) {\n      xhr.respond(200, {\n        'Content-Type': 'application/grpc-web-text'\n      }, // a single data frame with an 'aaa' message, followed by,\n      // a trailer frame with content 'grpc-status: 2\\d\\ax-custom-1: ababab'\n      'AAAAAAUKA2FhYYAAAAAkZ3JwYy1zdGF0dXM6IDINCngtY3VzdG9tLTE6IGFiYWJhYg0K');\n    };\n\n    var call = echoService.echo(request, {\n      'custom-header-1': 'value1'\n    }, function (err, response) {\n      if (response) {\n        assert.fail('should not have received response with non-OK status');\n      } else {\n        assert.equal(2, err.code);\n      }\n\n      done();\n    });\n    call.on('status', function (status) {\n      assert.equal(2, status.code);\n      assert.equal('object', typeof status.metadata);\n      assert.equal(false, 'grpc-status' in status.metadata);\n      assert.equal(true, 'x-custom-1' in status.metadata);\n      assert.equal('ababab', status.metadata['x-custom-1']);\n      done();\n    });\n    call.on('error', error => {\n      assert.fail('error callback should not be called for unary calls');\n    });\n  });","file":"generated_code_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"should exist","suites":["grpc-web generated code (closure+grpcwebtext)"],"updatePoint":{"line":573,"column":18},"line":573,"code":"  it('should exist', function () {\n    execSync(genCodeCmd);\n    execSync(closureCmd);\n    assert.equal(true, fs.existsSync(compiledCodePath));\n  });","file":"generated_code_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"should import","suites":["grpc-web generated code (closure+grpcwebtext)"],"updatePoint":{"line":578,"column":19},"line":578,"code":"  it('should import', function () {\n    var compiled = require(compiledCodePath);\n\n    echoAppClient = new compiled.EchoAppClient();\n    assert.equal('function', typeof echoAppClient.echo);\n  });","file":"generated_code_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"should send unary request","suites":["grpc-web generated code (closure+grpcwebtext)"],"updatePoint":{"line":584,"column":31},"line":584,"code":"  it('should send unary request', function (done) {\n    var compiled = require(compiledCodePath);\n\n    echoAppClient = new compiled.EchoAppClient();\n\n    MockXMLHttpRequest.onSend = function (xhr) {\n      assert.equal(\"AAAAAAUKA2FiYw==\", xhr.body);\n      done();\n    };\n\n    echoAppClient.echo('abc', () => {});\n  });","file":"generated_code_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"should receive unary response","suites":["grpc-web generated code (closure+grpcwebtext)"],"updatePoint":{"line":596,"column":35},"line":596,"code":"  it('should receive unary response', function (done) {\n    var compiled = require(compiledCodePath);\n\n    echoAppClient = new compiled.EchoAppClient();\n\n    MockXMLHttpRequest.onSend = function (xhr) {\n      assert.equal(\"AAAAAAUKA2FiYw==\", xhr.body);\n      xhr.respond(200, {\n        'Content-Type': 'application/grpc-web-text'\n      }, \"AAAAAAUKA2FiYw==\");\n    };\n\n    echoAppClient.echo('abc', function (err, response) {\n      assert.equal(\"abc\", response.getMessage());\n      done();\n    });\n  });","file":"generated_code_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"should receive initial metadata callback","suites":["grpc-web generated code: callbacks tests"],"updatePoint":{"line":646,"column":46},"line":646,"code":"  it('should receive initial metadata callback', function (done) {\n    done = multiDone(done, 2);\n\n    MockXMLHttpRequest.onSend = function (xhr) {\n      xhr.respond(200, {\n        'Content-Type': 'application/grpc-web-text',\n        'initial-header-1': 'value1'\n      }, // a single data frame with message 'aaa'\n      'AAAAAAUKA2FhYQ==');\n    };\n\n    var call = echoService.echo(request, {}, function (err, response) {\n      if (err) {\n        assert.fail('should not have received error');\n      } else {\n        assert.equal('aaa', response.getMessage());\n      }\n\n      done();\n    });\n    call.on('metadata', metadata => {\n      assert('initial-header-1' in metadata);\n      assert.equal('value1', metadata['initial-header-1']);\n      done();\n    });\n  });","file":"generated_code_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"should receive error, on http error","suites":["grpc-web generated code: callbacks tests"],"updatePoint":{"line":672,"column":41},"line":672,"code":"  it('should receive error, on http error', function (done) {\n    done = multiDone(done, 2);\n\n    MockXMLHttpRequest.onSend = function (xhr) {\n      xhr.respond(400, {\n        'Content-Type': 'application/grpc-web-text'\n      });\n    };\n\n    var call = echoService.echo(request, {}, function (err, response) {\n      if (response) {\n        assert.fail('should not have received response with non-OK status');\n      } else {\n        assert.equal(3, err.code); // http error 400 mapped to grpc error 3\n      }\n\n      done();\n    });\n    call.on('status', status => {\n      assert.equal(3, status.code);\n      done();\n    });\n    call.on('error', error => {\n      assert.fail('error callback should not be called for unary calls');\n    });\n  });","file":"generated_code_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"should receive error, on grpc error","suites":["grpc-web generated code: callbacks tests"],"updatePoint":{"line":698,"column":41},"line":698,"code":"  it('should receive error, on grpc error', function (done) {\n    done = multiDone(done, 2);\n\n    MockXMLHttpRequest.onSend = function (xhr) {\n      xhr.respond(200, {\n        'Content-Type': 'application/grpc-web-text'\n      }, // a single data frame with an 'aaa' message, followed by,\n      // a trailer frame with content 'grpc-status: 2\\d\\ax-custom-1: ababab'\n      'AAAAAAUKA2FhYYAAAAAkZ3JwYy1zdGF0dXM6IDINCngtY3VzdG9tLTE6IGFiYWJhYg0K');\n    };\n\n    var call = echoService.echo(request, {}, function (err, response) {\n      if (response) {\n        assert.fail('should not have received response with non-OK status');\n      } else {\n        assert.equal(2, err.code);\n        assert.equal(true, 'x-custom-1' in err.metadata);\n        assert.equal('ababab', err.metadata['x-custom-1']);\n      }\n\n      done();\n    }); // also should receive trailing status callback\n\n    call.on('status', status => {\n      // grpc-status should not be part of trailing metadata\n      assert.equal(false, 'grpc-status' in status.metadata);\n      assert.equal(true, 'x-custom-1' in status.metadata);\n      assert.equal('ababab', status.metadata['x-custom-1']);\n      done();\n    });\n    call.on('error', error => {\n      assert.fail('error callback should not be called for unary calls');\n    });\n  });","file":"generated_code_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"should receive error, on response header error","suites":["grpc-web generated code: callbacks tests"],"updatePoint":{"line":732,"column":52},"line":732,"code":"  it('should receive error, on response header error', function (done) {\n    done = multiDone(done, 2);\n\n    MockXMLHttpRequest.onSend = function (xhr) {\n      xhr.respond(200, {\n        'Content-Type': 'application/grpc-web-text',\n        'grpc-status': 2,\n        'grpc-message': 'some error'\n      });\n    };\n\n    var call = echoService.echo(request, {}, function (err, response) {\n      if (response) {\n        assert.fail('should not have received response with non-OK status');\n      } else {\n        assert.equal(2, err.code);\n        assert.equal('some error', err.message);\n      }\n\n      done();\n    });\n    call.on('status', status => {\n      assert.equal(2, status.code);\n      done();\n    });\n    call.on('error', error => {\n      assert.fail('error callback should not be called for unary calls');\n    });\n  });","file":"generated_code_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"should receive status callback","suites":["grpc-web generated code: callbacks tests"],"updatePoint":{"line":761,"column":36},"line":761,"code":"  it('should receive status callback', function (done) {\n    done = multiDone(done, 2);\n\n    MockXMLHttpRequest.onSend = function (xhr) {\n      xhr.respond(200, {\n        'Content-Type': 'application/grpc-web-text'\n      }, // a single data frame with an 'aaa' message, followed by,\n      // a trailer frame with content 'grpc-status: 0\\d\\ax-custom-1: ababab'\n      'AAAAAAUKA2FhYYAAAAAkZ3JwYy1zdGF0dXM6IDANCngtY3VzdG9tLTE6IGFiYWJhYg0K');\n    };\n\n    var call = echoService.echo(request, {}, function (err, response) {\n      if (err) {\n        assert.fail('should not receive error');\n      }\n\n      assert(response);\n      assert.equal('aaa', response.getMessage());\n      done();\n    });\n    call.on('status', status => {\n      assert.equal(0, status.code); // grpc-status should not be part of trailing metadata\n\n      assert.equal(false, 'grpc-status' in status.metadata);\n      assert.equal(true, 'x-custom-1' in status.metadata);\n      assert.equal('ababab', status.metadata['x-custom-1']);\n      done();\n    });\n    call.on('error', error => {\n      assert.fail('error callback should not be called for unary calls');\n    });\n  });","file":"generated_code_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"should trigger multiple callbacks on same event","suites":["grpc-web generated code: callbacks tests"],"updatePoint":{"line":793,"column":53},"line":793,"code":"  it('should trigger multiple callbacks on same event', function (done) {\n    done = multiDone(done, 2);\n\n    MockXMLHttpRequest.onSend = function (xhr) {\n      xhr.respond(400, {\n        'Content-Type': 'application/grpc-web-text'\n      });\n    };\n\n    var call = echoService.serverStreamingEcho(request, {});\n    call.on('data', response => {\n      assert.fail('should not have received a data callback');\n    });\n    call.on('error', error => {\n      assert.equal(3, error.code); // http error 400 mapped to grpc error 3\n\n      done();\n    });\n    call.on('error', error => {\n      assert.equal(3, error.code); // http error 400 mapped to grpc error 3\n\n      done();\n    });\n  });","file":"generated_code_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"should be able to remove callback","suites":["grpc-web generated code: callbacks tests"],"updatePoint":{"line":817,"column":39},"line":817,"code":"  it('should be able to remove callback', function (done) {\n    MockXMLHttpRequest.onSend = function (xhr) {\n      xhr.respond(400, {\n        'Content-Type': 'application/grpc-web-text'\n      });\n    };\n\n    var call = echoService.serverStreamingEcho(request, {});\n\n    const callbackA = error => {\n      assert.equal(3, error.code); // http error 400 mapped to grpc error 3\n\n      done();\n    };\n\n    const callbackB = error => {\n      assert.fail('should not be called');\n    };\n\n    call.on('error', callbackA);\n    call.on('error', callbackB);\n    call.removeListener('error', callbackB);\n  });","file":"generated_code_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"should receive initial metadata callback (streaming)","suites":["grpc-web generated code: callbacks tests"],"updatePoint":{"line":840,"column":58},"line":840,"code":"  it('should receive initial metadata callback (streaming)', function (done) {\n    done = multiDone(done, 2);\n\n    MockXMLHttpRequest.onSend = function (xhr) {\n      xhr.respond(200, {\n        'Content-Type': 'application/grpc-web-text',\n        'initial-header-1': 'value1'\n      }, // a single data frame with message 'aaa'\n      'AAAAAAUKA2FhYQ==');\n    };\n\n    var call = echoService.serverStreamingEcho(request, {});\n    call.on('data', response => {\n      assert.equal('aaa', response.getMessage());\n      done();\n    });\n    call.on('metadata', metadata => {\n      assert('initial-header-1' in metadata);\n      assert.equal('value1', metadata['initial-header-1']);\n      done();\n    });\n  });","file":"generated_code_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"should receive error, on http error (streaming)","suites":["grpc-web generated code: callbacks tests"],"updatePoint":{"line":862,"column":53},"line":862,"code":"  it('should receive error, on http error (streaming)', function (done) {\n    done = multiDone(done, 2);\n\n    MockXMLHttpRequest.onSend = function (xhr) {\n      xhr.respond(400, {\n        'Content-Type': 'application/grpc-web-text'\n      });\n    };\n\n    var call = echoService.serverStreamingEcho(request, {});\n    call.on('data', response => {\n      assert.fail('should not receive data response');\n    });\n    call.on('status', status => {\n      assert.equal(3, status.code);\n      done();\n    });\n    call.on('error', error => {\n      assert.equal(3, error.code);\n      done();\n    });\n  });","file":"generated_code_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"should receive error, on grpc error (streaming)","suites":["grpc-web generated code: callbacks tests"],"updatePoint":{"line":884,"column":53},"line":884,"code":"  it('should receive error, on grpc error (streaming)', function (done) {\n    done = multiDone(done, 3);\n\n    MockXMLHttpRequest.onSend = function (xhr) {\n      xhr.respond(200, {\n        'Content-Type': 'application/grpc-web-text'\n      }, // a single data frame with an 'aaa' message, followed by,\n      // a trailer frame with content 'grpc-status: 2\\d\\ax-custom-1: ababab'\n      'AAAAAAUKA2FhYYAAAAAkZ3JwYy1zdGF0dXM6IDINCngtY3VzdG9tLTE6IGFiYWJhYg0K');\n    };\n\n    var call = echoService.serverStreamingEcho(request, {});\n    call.on('data', response => {\n      // because this is a streaming call, we should still receive data\n      // callbacks if the error comes in with the trailer frame\n      assert.equal('aaa', response.getMessage());\n      done();\n    });\n    call.on('error', error => {\n      assert.equal(2, error.code);\n      assert.equal(true, 'x-custom-1' in error.metadata);\n      assert.equal('ababab', error.metadata['x-custom-1']);\n      done();\n    });\n    call.on('status', status => {\n      assert.equal(2, status.code); // grpc-status should not be part of trailing metadata\n\n      assert.equal(false, 'grpc-status' in status.metadata);\n      assert.equal(true, 'x-custom-1' in status.metadata);\n      assert.equal('ababab', status.metadata['x-custom-1']);\n      done();\n    });\n  });","file":"generated_code_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"should receive error, on response header error (streaming)","suites":["grpc-web generated code: callbacks tests"],"updatePoint":{"line":917,"column":64},"line":917,"code":"  it('should receive error, on response header error (streaming)', function (done) {\n    done = multiDone(done, 2);\n\n    MockXMLHttpRequest.onSend = function (xhr) {\n      xhr.respond(200, {\n        'Content-Type': 'application/grpc-web-text',\n        'grpc-status': 2,\n        'grpc-message': 'some error'\n      });\n    };\n\n    var call = echoService.serverStreamingEcho(request, {});\n    call.on('error', error => {\n      assert.equal(2, error.code);\n      assert.equal('some error', error.message);\n      done();\n    });\n    call.on('status', status => {\n      assert.equal(2, status.code);\n      assert.equal('some error', status.details);\n      done();\n    });\n  });","file":"generated_code_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"should receive status callback (streaming)","suites":["grpc-web generated code: callbacks tests"],"updatePoint":{"line":940,"column":48},"line":940,"code":"  it('should receive status callback (streaming)', function (done) {\n    done = multiDone(done, 2);\n\n    MockXMLHttpRequest.onSend = function (xhr) {\n      xhr.respond(200, {\n        'Content-Type': 'application/grpc-web-text'\n      }, // a single data frame with an 'aaa' message, followed by,\n      // a trailer frame with content 'grpc-status: 0\\d\\ax-custom-1: ababab'\n      'AAAAAAUKA2FhYYAAAAAkZ3JwYy1zdGF0dXM6IDANCngtY3VzdG9tLTE6IGFiYWJhYg0K');\n    };\n\n    var call = echoService.serverStreamingEcho(request, {});\n    call.on('data', response => {\n      assert(response);\n      assert.equal('aaa', response.getMessage());\n      done();\n    });\n    call.on('status', status => {\n      assert.equal(0, status.code); // grpc-status should not be part of trailing metadata\n\n      assert.equal(false, 'grpc-status' in status.metadata);\n      assert.equal(true, 'x-custom-1' in status.metadata);\n      assert.equal('ababab', status.metadata['x-custom-1']);\n      done();\n    });\n    call.on('error', error => {\n      assert.fail('error callback should not be called for unary calls');\n    });\n  });","file":"generated_code_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"should exist","suites":["grpc-web plugin test, with subdirectories"],"updatePoint":{"line":58,"column":18},"line":58,"code":"  it('should exist', function () {\n    execSync(genCodeCmd);\n    assert.equal(true, fs.existsSync(genCodePath1));\n    assert.equal(true, fs.existsSync(genCodePath2));\n    assert.equal(true, fs.existsSync(genCodePath3));\n  });","file":"plugin_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"should import","suites":["grpc-web plugin test, with subdirectories"],"updatePoint":{"line":64,"column":19},"line":64,"code":"  it('should import', function () {\n    execSync(genCodeCmd);\n\n    const {\n      OtherThing\n    } = require(genCodePath2);\n\n    var otherThing = new OtherThing();\n    otherThing.setValue('abc');\n    assert.equal('abc', otherThing.getValue());\n\n    const {\n      MyServiceClient\n    } = require(genCodePath3);\n\n    var myClient = new MyServiceClient(\"MyHostname\", null, null);\n    assert.equal('function', typeof myClient.doThis);\n  });","file":"plugin_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"should send unary request","suites":["grpc-web plugin test, with subdirectories"],"updatePoint":{"line":82,"column":31},"line":82,"code":"  it('should send unary request', function (done) {\n    execSync(genCodeCmd);\n\n    const {\n      OtherThing\n    } = require(genCodePath2);\n\n    var otherThing = new OtherThing();\n    otherThing.setValue('abc');\n\n    const {\n      MyServiceClient\n    } = require(genCodePath3);\n\n    var myClient = new MyServiceClient(\"MyHostname\", null, null);\n\n    MockXMLHttpRequest.onSend = function (xhr) {\n      assert.equal(\"AAAAAAUKA2FiYw==\", xhr.body);\n      assert.equal(\"MyHostname/myproject.myapi.v1.MyService/DoThis\", xhr.url);\n      done();\n    };\n\n    myClient.doThis(otherThing);\n  });","file":"plugin_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"should exist","suites":["grpc-web plugin test, with multiple input files"],"updatePoint":{"line":127,"column":18},"line":127,"code":"  it('should exist', function () {\n    execSync(genCodeCmd);\n    assert.equal(true, fs.existsSync(genCodePath1));\n    assert.equal(true, fs.existsSync(genCodePath2));\n    assert.equal(true, fs.existsSync(genCodePath3));\n    assert.equal(true, fs.existsSync(genCodePath4));\n  });","file":"plugin_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"should import","suites":["grpc-web plugin test, with multiple input files"],"updatePoint":{"line":134,"column":19},"line":134,"code":"  it('should import', function () {\n    execSync(genCodeCmd);\n\n    const {\n      OtherThing\n    } = require(genCodePath2);\n\n    var otherThing = new OtherThing();\n    otherThing.setValue('abc');\n    assert.equal('abc', otherThing.getValue());\n\n    const {\n      MyServiceClient\n    } = require(genCodePath3);\n\n    var myClient = new MyServiceClient(\"MyHostname\", null, null);\n    assert.equal('function', typeof myClient.doThis);\n\n    const {\n      MyServiceBClient\n    } = require(genCodePath4);\n\n    var myClientB = new MyServiceBClient(\"MyHostname\", null, null);\n    assert.equal('function', typeof myClientB.doThat);\n  });","file":"plugin_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"should import","suites":["grpc-web plugin test, proto with no package"],"updatePoint":{"line":181,"column":19},"line":181,"code":"  it('should import', function () {\n    const {\n      HelloRequest\n    } = require(genCodePath1);\n\n    var request = new HelloRequest();\n    request.setName('abc');\n    assert.equal('abc', request.getName());\n  });","file":"plugin_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"callback-based generated client: should exist","suites":["grpc-web plugin test, proto with no package"],"updatePoint":{"line":190,"column":51},"line":190,"code":"  it('callback-based generated client: should exist', function () {\n    const {\n      GreeterClient\n    } = require(genCodePath2);\n\n    var myClient = new GreeterClient(\"MyHostname\", null, null);\n    assert.equal('function', typeof myClient.sayHello);\n  });","file":"plugin_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"promise-based generated client: should exist","suites":["grpc-web plugin test, proto with no package"],"updatePoint":{"line":198,"column":50},"line":198,"code":"  it('promise-based generated client: should exist', function () {\n    const {\n      HelloRequest\n    } = require(genCodePath1);\n\n    const {\n      GreeterPromiseClient\n    } = require(genCodePath2);\n\n    var myClient = new GreeterPromiseClient(\"MyHostname\", null, null);\n    assert.equal('function', typeof myClient.sayHello);\n    var p = myClient.sayHello(new HelloRequest(), {});\n    assert.equal('function', typeof p.then);\n  });","file":"plugin_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"generated code should exist","suites":["tsc test01: nested messages"],"updatePoint":{"line":85,"column":33},"line":85,"code":"  it('generated code should exist', function () {\n    assertFileExists('./tsc-tests/generated/test01_pb.js');\n    assertFileExists('./tsc-tests/generated/test01_pb.d.ts');\n  });","file":"tsc_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"tsc should run and export","suites":["tsc test01: nested messages"],"updatePoint":{"line":89,"column":31},"line":89,"code":"  it('tsc should run and export', function () {\n    runTscCmd(`tsc client01.ts generated/test01_pb.d.ts generated/test01_pb.js \\\n      ${tscCompilerOptions} --outDir ./dist`); // check for the tsc output\n\n    assertFileExists('./tsc-tests/dist/client01.js');\n    assertFileExists('./tsc-tests/dist/generated/test01_pb.js'); // load the compiled js files and do some tests\n\n    const {\n      msgOuter\n    } = require(relativePath('./tsc-tests/dist/client01.js'));\n\n    assert.equal(123, msgOuter.getSomepropList()[0].getValue());\n  });","file":"tsc_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"generated code should exist","suites":["tsc test02: simple rpc, messages in separate proto"],"updatePoint":{"line":116,"column":33},"line":116,"code":"  it('generated code should exist', function () {\n    assertFileExists('./tsc-tests/generated/Test02ServiceClientPb.ts');\n    assertFileExists('./tsc-tests/generated/test02_pb.js');\n    assertFileExists('./tsc-tests/generated/test02_pb.d.ts');\n    assertFileExists('./tsc-tests/generated/test03_pb.js');\n    assertFileExists('./tsc-tests/generated/test03_pb.d.ts');\n  });","file":"tsc_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"tsc should run and export","suites":["tsc test02: simple rpc, messages in separate proto"],"updatePoint":{"line":123,"column":31},"line":123,"code":"  it('tsc should run and export', function (done) {\n    runTscCmd(`tsc client02.ts generated/Test02ServiceClientPb.ts \\\n      generated/test02_pb.d.ts generated/test02_pb.js \\\n      generated/test03_pb.d.ts generated/test03_pb.js \\\n      ${tscCompilerOptions} --outDir ./dist`); // check for the tsc output\n\n    assertFileExists('./tsc-tests/dist/client02.js');\n    assertFileExists('./tsc-tests/dist/generated/Test02ServiceClientPb.js');\n    assertFileExists('./tsc-tests/dist/generated/test02_pb.js');\n    assertFileExists('./tsc-tests/dist/generated/test03_pb.js'); // load the compiled js files and do some tests\n\n    MockXMLHttpRequest.onSend = function (xhr) {\n      assert.equal('http://mydummy.com/MyService/addOne', xhr.url);\n      assert.equal('AAAAAAA=', xhr.body);\n      done();\n    };\n\n    require(relativePath('./tsc-tests/dist/client02.js'));\n  });","file":"tsc_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"generated code should exist","suites":["tsc test03: streamInterceptor"],"updatePoint":{"line":157,"column":33},"line":157,"code":"  it('generated code should exist', function () {\n    assertFileExists('./tsc-tests/generated/echo_pb.js');\n    assertFileExists('./tsc-tests/generated/echo_pb.d.ts');\n    assertFileExists('./tsc-tests/generated/echo_grpc_web_pb.js');\n    assertFileExists('./tsc-tests/generated/echo_grpc_web_pb.d.ts');\n  });","file":"tsc_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"tsc should run and export","suites":["tsc test03: streamInterceptor"],"updatePoint":{"line":163,"column":31},"line":163,"code":"  it('tsc should run and export', function (done) {\n    done = multiDone(done, 3);\n    const tscCmd = `tsc client03.ts \\\n      generated/echo_pb.d.ts generated/echo_pb.js \\\n      generated/echo_grpc_web_pb.d.ts generated/echo_grpc_web_pb.js \\\n      ${tscCompilerOptions} --outDir ./dist`;\n    runTscCmd(tscCmd); // check for the tsc output\n\n    assertFileExists('./tsc-tests/dist/client03.js');\n    assertFileExists('./tsc-tests/dist/generated/echo_pb.js');\n\n    const {\n      echoService,\n      EchoRequest\n    } = require(relativePath('./tsc-tests/dist/client03.js'));\n\n    assert.equal('function', typeof echoService.echo);\n    assert.equal('function', typeof echoService.serverStreamingEcho);\n    const req = new EchoRequest();\n    req.setMessage('aaa');\n\n    MockXMLHttpRequest.onSend = function (xhr) {\n      // The interceptor will attach \"[-out-]\" in front of our proto message.\n      // See the interceptor code in client03.ts.\n      // So by the time the proto is being sent by the underlying transport, it\n      // should contain the string \"[-out-]aaa\".\n      assert.equal('AAAAAAwKClstb3V0LV1hYWE=', xhr.body);\n      xhr.respond(200, {\n        'Content-Type': 'application/grpc-web-text',\n        'p': 'q'\n      }, // add a piece of initial metadata\n      // echo it back, plus a trailing metadata \"x: y\"\n      'AAAAAAwKClstb3V0LV1hYWGAAAAABng6IHkNCg==');\n    }; // this is the callback-based client\n\n\n    var call = echoService.echo(req, {}, (err, response) => {\n      assert.ifError(err); // Now, the interceptor will be invoked again on receiving the response\n      // from the server. It attaches an additional \"[-in-]\" string in front of\n      // the server response.\n\n      assert.equal('[-in-][-out-]aaa', response.getMessage());\n      done();\n    });\n    call.on('metadata', initialMetadata => {\n      assert('p' in initialMetadata);\n      assert(!('x' in initialMetadata));\n      assert.equal('q', initialMetadata['p']);\n      done();\n    });\n    call.on('status', status => {\n      assert('metadata' in status);\n      var trailingMetadata = status.metadata;\n      assert('x' in trailingMetadata);\n      assert(!('p' in trailingMetadata));\n      assert.equal('y', trailingMetadata['x']);\n      done();\n    });\n  });","file":"tsc_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"generated code should exist","suites":["tsc test04: unaryInterceptor"],"updatePoint":{"line":237,"column":33},"line":237,"code":"  it('generated code should exist', function () {\n    assertFileExists('./tsc-tests/generated/echo_pb.js');\n    assertFileExists('./tsc-tests/generated/echo_pb.d.ts');\n    assertFileExists('./tsc-tests/generated/echo_grpc_web_pb.js');\n    assertFileExists('./tsc-tests/generated/echo_grpc_web_pb.d.ts');\n  });","file":"tsc_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"tsc should run and export","suites":["tsc test04: unaryInterceptor"],"updatePoint":{"line":243,"column":31},"line":243,"code":"  it('tsc should run and export', function (done) {\n    const tscCmd = `tsc client04.ts \\\n      generated/echo_pb.d.ts generated/echo_pb.js \\\n      generated/echo_grpc_web_pb.d.ts generated/echo_grpc_web_pb.js \\\n      ${tscCompilerOptions} --outDir ./dist`;\n    runTscCmd(tscCmd); // check for the tsc output\n\n    assertFileExists('./tsc-tests/dist/client04.js');\n    assertFileExists('./tsc-tests/dist/generated/echo_pb.js');\n\n    const {\n      echoService,\n      EchoRequest\n    } = require(relativePath('./tsc-tests/dist/client04.js'));\n\n    assert.equal('function', typeof echoService.echo);\n    assert.equal('function', typeof echoService.serverStreamingEcho);\n    const req = new EchoRequest();\n    req.setMessage('aaa');\n\n    MockXMLHttpRequest.onSend = function (xhr) {\n      // The interceptor will attach \"[-out-]\" in front of our proto message.\n      // See the interceptor code in client04.ts.\n      // So by the time the proto is being sent by the underlying transport, it\n      // should contain the string \"[-out-]aaa\".\n      assert.equal('AAAAAAwKClstb3V0LV1hYWE=', xhr.body);\n      xhr.respond(200, {\n        'Content-Type': 'application/grpc-web-text',\n        'p': 'q'\n      }, // add a piece of initial metadata\n      // echo it back, plus a trailing metadata \"x: y\"\n      'AAAAAAwKClstb3V0LV1hYWGAAAAABng6IHkNCg==');\n    }; // this is the promise-based client\n\n\n    echoService.echo(req, {}).then(response => {\n      // Now, the interceptor will be invoked again on receiving the response\n      // from the server. See the initerceptor logic in client04.ts. It\n      // flattens both the initialMetadata and the trailingMetadata, and then\n      // attaches an additional \"[-in-]\" string in front of the server\n      // response.\n      assert.equal('<-InitialMetadata->p: q<-TrailingMetadata->x: y' + '[-in-][-out-]aaa', response.getMessage());\n      done();\n    });\n  });","file":"tsc_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"generated code should exist","suites":["tsc test05: callback-based client"],"updatePoint":{"line":303,"column":33},"line":303,"code":"  it('generated code should exist', function () {\n    assertFileExists('./tsc-tests/generated/echo_pb.js');\n    assertFileExists('./tsc-tests/generated/echo_pb.d.ts');\n    assertFileExists('./tsc-tests/generated/echo_grpc_web_pb.js');\n    assertFileExists('./tsc-tests/generated/echo_grpc_web_pb.d.ts');\n  });","file":"tsc_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"tsc should run and export","suites":["tsc test05: callback-based client"],"updatePoint":{"line":309,"column":31},"line":309,"code":"  it('tsc should run and export', function () {\n    const tscCmd = `tsc client05.ts \\\n      generated/echo_pb.d.ts generated/echo_pb.js \\\n      generated/echo_grpc_web_pb.d.ts generated/echo_grpc_web_pb.js \\\n      ${tscCompilerOptions} --outDir ./dist`; // this test only makes sure the TS client code compiles successfully\n\n    runTscCmd(tscCmd); // check for the tsc output\n\n    assertFileExists('./tsc-tests/dist/client05.js');\n    assertFileExists('./tsc-tests/dist/generated/echo_pb.js');\n  });","file":"tsc_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"generated code should exist","suites":["tsc test06: promise-based client"],"updatePoint":{"line":335,"column":33},"line":335,"code":"  it('generated code should exist', function () {\n    assertFileExists('./tsc-tests/generated/echo_pb.js');\n    assertFileExists('./tsc-tests/generated/echo_pb.d.ts');\n    assertFileExists('./tsc-tests/generated/echo_grpc_web_pb.js');\n    assertFileExists('./tsc-tests/generated/echo_grpc_web_pb.d.ts');\n  });","file":"tsc_test.js","skipped":false,"dir":"packages/grpc-web/test"},{"name":"tsc should run and export","suites":["tsc test06: promise-based client"],"updatePoint":{"line":341,"column":31},"line":341,"code":"  it('tsc should run and export', function () {\n    const tscCmd = `tsc client06.ts \\\n      generated/echo_pb.d.ts generated/echo_pb.js \\\n      generated/echo_grpc_web_pb.d.ts generated/echo_grpc_web_pb.js \\\n      ${tscCompilerOptions} --outDir ./dist`; // this test only makes sure the TS client code compiles successfully\n\n    runTscCmd(tscCmd); // check for the tsc output\n\n    assertFileExists('./tsc-tests/dist/client06.js');\n    assertFileExists('./tsc-tests/dist/generated/echo_pb.js');\n  });","file":"tsc_test.js","skipped":false,"dir":"packages/grpc-web/test"}]}