{"repo":"marktext/marktext","url":"https://github.com/marktext/marktext","branch":"develop","configs":[{"package":"marktext","lang":"js","dir":"test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"Basic - Invalid text","suites":["Test extractWord"],"updatePoint":{"line":25,"column":26,"index":1113},"line":25,"code":"  it('Basic - Invalid text', () => {\n    test(null, 0, null);\n  });","file":"unit/specs/extract-word.spec.js","skipped":false,"dir":"test"},{"name":"Basic - Empty text","suites":["Test extractWord"],"updatePoint":{"line":28,"column":24,"index":1179},"line":28,"code":"  it('Basic - Empty text', () => {\n    test('', 0, null);\n  });","file":"unit/specs/extract-word.spec.js","skipped":false,"dir":"test"},{"name":"Basic - Invalid offset 1","suites":["Test extractWord"],"updatePoint":{"line":31,"column":30,"index":1249},"line":31,"code":"  it('Basic - Invalid offset 1', () => {\n    test(basicCheck, -182, buildResult(0, 5, 'Lorem'));\n  });","file":"unit/specs/extract-word.spec.js","skipped":false,"dir":"test"},{"name":"Basic - Invalid offset 2","suites":["Test extractWord"],"updatePoint":{"line":34,"column":30,"index":1352},"line":34,"code":"  it('Basic - Invalid offset 2', () => {\n    test(basicCheck, undefined, null);\n  });","file":"unit/specs/extract-word.spec.js","skipped":false,"dir":"test"},{"name":"Basic - Invalid offset 3","suites":["Test extractWord"],"updatePoint":{"line":37,"column":30,"index":1438},"line":37,"code":"  it('Basic - Invalid offset 3', () => {\n    test(basicCheck, 478343, buildResult(12, 17, 'dolor'));\n  });","file":"unit/specs/extract-word.spec.js","skipped":false,"dir":"test"},{"name":"Get first word","suites":["Test extractWord"],"updatePoint":{"line":40,"column":20,"index":1535},"line":40,"code":"  it('Get first word', () => {\n    test(basicText, 0, buildResult(0, 5, 'Lorem'));\n  });","file":"unit/specs/extract-word.spec.js","skipped":false,"dir":"test"},{"name":"Get second word","suites":["Test extractWord"],"updatePoint":{"line":43,"column":21,"index":1625},"line":43,"code":"  it('Get second word', () => {\n    test(basicText, 8, buildResult(6, 11, 'ipsum'));\n  });","file":"unit/specs/extract-word.spec.js","skipped":false,"dir":"test"},{"name":"Get last word","suites":["Test extractWord"],"updatePoint":{"line":46,"column":19,"index":1714},"line":46,"code":"  it('Get last word', () => {\n    test(basicText, 268, buildResult(266, 270, 'orci'));\n  });","file":"unit/specs/extract-word.spec.js","skipped":false,"dir":"test"},{"name":"Last character is not a valid word","suites":["Test extractWord"],"updatePoint":{"line":49,"column":40,"index":1828},"line":49,"code":"  it('Last character is not a valid word', () => {\n    test(basicText, 271, null);\n  });","file":"unit/specs/extract-word.spec.js","skipped":false,"dir":"test"},{"name":"Get custom index (1)","suites":["Test extractWord"],"updatePoint":{"line":52,"column":26,"index":1903},"line":52,"code":"  it('Get custom index (1)', () => {\n    test(basicText, 79, buildResult(79, 81, 'in'));\n  });","file":"unit/specs/extract-word.spec.js","skipped":false,"dir":"test"},{"name":"Get custom index (2)","suites":["Test extractWord"],"updatePoint":{"line":55,"column":26,"index":1998},"line":55,"code":"  it('Get custom index (2)', () => {\n    console.log(basicText[104], basicText[105], basicText[106]);\n    test(basicText, 106, buildResult(105, 112, 'euismod'));\n  });","file":"unit/specs/extract-word.spec.js","skipped":false,"dir":"test"},{"name":"Markdown - Get first word","suites":["Test extractWord"],"updatePoint":{"line":59,"column":31,"index":2171},"line":59,"code":"  it('Markdown - Get first word', () => {\n    test(basicMdText, 2, buildResult(2, 7, 'Lorem'));\n  });","file":"unit/specs/extract-word.spec.js","skipped":false,"dir":"test"},{"name":"Markdown - Get second word","suites":["Test extractWord"],"updatePoint":{"line":62,"column":32,"index":2274},"line":62,"code":"  it('Markdown - Get second word', () => {\n    test(basicMdText, 14, buildResult(10, 15, 'ipsum'));\n  });","file":"unit/specs/extract-word.spec.js","skipped":false,"dir":"test"},{"name":"Markdown - Get custom index (1)","suites":["Test extractWord"],"updatePoint":{"line":65,"column":37,"index":2385},"line":65,"code":"  it('Markdown - Get custom index (1)', () => {\n    test(basicMdText, 20, buildResult(18, 23, 'dolor'));\n  });","file":"unit/specs/extract-word.spec.js","skipped":false,"dir":"test"},{"name":"Markdown - Get custom index (2)","suites":["Test extractWord"],"updatePoint":{"line":68,"column":37,"index":2496},"line":68,"code":"  it('Markdown - Get custom index (2)', () => {\n    test(basicMdText, 37, buildResult(35, 39, 'amet'));\n  });","file":"unit/specs/extract-word.spec.js","skipped":false,"dir":"test"},{"name":"Markdown - Not valid word","suites":["Test extractWord"],"updatePoint":{"line":71,"column":31,"index":2600},"line":71,"code":"  it('Markdown - Not valid word', () => {\n    test(basicMdText, 50, null);\n  });","file":"unit/specs/extract-word.spec.js","skipped":false,"dir":"test"},{"name":"Markdown - Not valid word","suites":["Test extractWord"],"updatePoint":{"line":74,"column":31,"index":2681},"line":74,"code":"  it('Markdown - Not valid word', () => {\n    test(basicMdText, 55, null);\n  });","file":"unit/specs/extract-word.spec.js","skipped":false,"dir":"test"},{"name":"Markdown - Valid non-ASCII word","suites":["Test extractWord"],"updatePoint":{"line":77,"column":37,"index":2768},"line":77,"code":"  it('Markdown - Valid non-ASCII word', () => {\n    test(basicMdText, 61, buildResult(60, 63, '虥諰諨'));\n  });","file":"unit/specs/extract-word.spec.js","skipped":false,"dir":"test"},{"name":"Non-ASCII - Get first word","suites":["Test extractWord"],"updatePoint":{"line":80,"column":32,"index":2872},"line":80,"code":"  it('Non-ASCII - Get first word', () => {\n    test(nonAscii, 0, buildResult(0, 2, '虥諰'));\n  });","file":"unit/specs/extract-word.spec.js","skipped":false,"dir":"test"},{"name":"Non-ASCII - Get second word","suites":["Test extractWord"],"updatePoint":{"line":83,"column":33,"index":2970},"line":83,"code":"  it('Non-ASCII - Get second word', () => {\n    test(nonAscii, 4, buildResult(3, 6, '鯦鯢鯡'));\n  });","file":"unit/specs/extract-word.spec.js","skipped":false,"dir":"test"},{"name":"Non-ASCII - Get last word","suites":["Test extractWord"],"updatePoint":{"line":86,"column":31,"index":3067},"line":86,"code":"  it('Non-ASCII - Get last word', () => {\n    test(nonAscii, 56, buildResult(55, 57, '騩鰒'));\n  });","file":"unit/specs/extract-word.spec.js","skipped":false,"dir":"test"},{"name":"Non-ASCII - Last character is not a valid word","suites":["Test extractWord"],"updatePoint":{"line":89,"column":52,"index":3187},"line":89,"code":"  it('Non-ASCII - Last character is not a valid word', () => {\n    test(nonAscii, 58, null);\n  });","file":"unit/specs/extract-word.spec.js","skipped":false,"dir":"test"},{"name":"Non-ASCII - Get custom index","suites":["Test extractWord"],"updatePoint":{"line":92,"column":34,"index":3268},"line":92,"code":"  it('Non-ASCII - Get custom index', () => {\n    test(nonAscii, 19, buildResult(18, 21, '鱐鱍鱕'));\n  });","file":"unit/specs/extract-word.spec.js","skipped":false,"dir":"test"},{"name":"Basic Text Formatting","suites":["Muya parser"],"updatePoint":{"line":35,"column":27,"index":1321},"line":35,"code":"  it('Basic Text Formatting', () => {\n    verifyMarkdown(templates.BasicTextFormattingTemplate(), defaultOptions);\n  });","file":"unit/specs/markdown-basic.spec.js","skipped":false,"dir":"test"},{"name":"Blockquotes","suites":["Muya parser"],"updatePoint":{"line":38,"column":17,"index":1432},"line":38,"code":"  it('Blockquotes', () => {\n    verifyMarkdown(templates.BlockquotesTemplate(), defaultOptions);\n  });","file":"unit/specs/markdown-basic.spec.js","skipped":false,"dir":"test"},{"name":"Code Blocks","suites":["Muya parser"],"updatePoint":{"line":41,"column":17,"index":1535},"line":41,"code":"  it('Code Blocks', () => {\n    verifyMarkdown(templates.CodeBlocksTemplate(), defaultOptions);\n  });","file":"unit/specs/markdown-basic.spec.js","skipped":false,"dir":"test"},{"name":"Escapes","suites":["Muya parser"],"updatePoint":{"line":44,"column":13,"index":1633},"line":44,"code":"  it('Escapes', () => {\n    verifyMarkdown(templates.EscapesTemplate(), defaultOptions);\n  });","file":"unit/specs/markdown-basic.spec.js","skipped":false,"dir":"test"},{"name":"Headings","suites":["Muya parser"],"updatePoint":{"line":47,"column":14,"index":1729},"line":47,"code":"  it('Headings', () => {\n    verifyMarkdown(templates.HeadingsTemplate(), defaultOptions);\n  });","file":"unit/specs/markdown-basic.spec.js","skipped":false,"dir":"test"},{"name":"Images","suites":["Muya parser"],"updatePoint":{"line":50,"column":12,"index":1824},"line":50,"code":"  it('Images', () => {\n    verifyMarkdown(templates.ImagesTemplate(), defaultOptions);\n  });","file":"unit/specs/markdown-basic.spec.js","skipped":false,"dir":"test"},{"name":"Links","suites":["Muya parser"],"updatePoint":{"line":53,"column":11,"index":1916},"line":53,"code":"  it('Links', () => {\n    verifyMarkdown(templates.LinksTemplate(), defaultOptions);\n  });","file":"unit/specs/markdown-basic.spec.js","skipped":false,"dir":"test"},{"name":"Lists","suites":["Muya parser"],"updatePoint":{"line":56,"column":11,"index":2007},"line":56,"code":"  it('Lists', () => {\n    verifyMarkdown(templates.ListsTemplate(), defaultOptions);\n  });","file":"unit/specs/markdown-basic.spec.js","skipped":false,"dir":"test"},{"name":"GFM - Basic Text Formatting","suites":["Muya parser"],"updatePoint":{"line":59,"column":33,"index":2120},"line":59,"code":"  it('GFM - Basic Text Formatting', () => {\n    verifyMarkdown(templates.GfmBasicTextFormattingTemplate(), defaultOptions);\n  });","file":"unit/specs/markdown-basic.spec.js","skipped":false,"dir":"test"},{"name":"GFM - Lists","suites":["Muya parser"],"updatePoint":{"line":62,"column":17,"index":2234},"line":62,"code":"  it('GFM - Lists', () => {\n    verifyMarkdown(templates.GfmListsTemplate(), defaultOptions);\n  });","file":"unit/specs/markdown-basic.spec.js","skipped":false,"dir":"test"},{"name":"GFM - Tables","suites":["Muya parser"],"updatePoint":{"line":65,"column":18,"index":2335},"line":65,"code":"  it('GFM - Tables', () => {\n    verifyMarkdown(templates.GfmTablesTemplate(), defaultOptions);\n  });","file":"unit/specs/markdown-basic.spec.js","skipped":false,"dir":"test"},{"name":"Basic Text Formatting","suites":["Muya parser (CRLF)"],"updatePoint":{"line":70,"column":27,"index":2489},"line":70,"code":"  it('Basic Text Formatting', () => {\n    verifyMarkdown(templates.BasicTextFormattingTemplate(), defaultOptionsCrlf);\n  });","file":"unit/specs/markdown-basic.spec.js","skipped":false,"dir":"test"},{"name":"Blockquotes","suites":["Muya parser (CRLF)"],"updatePoint":{"line":73,"column":17,"index":2604},"line":73,"code":"  it('Blockquotes', () => {\n    verifyMarkdown(templates.BlockquotesTemplate(), defaultOptionsCrlf);\n  });","file":"unit/specs/markdown-basic.spec.js","skipped":false,"dir":"test"},{"name":"Code Blocks","suites":["Muya parser (CRLF)"],"updatePoint":{"line":76,"column":17,"index":2711},"line":76,"code":"  it('Code Blocks', () => {\n    verifyMarkdown(templates.CodeBlocksTemplate(), defaultOptionsCrlf);\n  });","file":"unit/specs/markdown-basic.spec.js","skipped":false,"dir":"test"},{"name":"Escapes","suites":["Muya parser (CRLF)"],"updatePoint":{"line":79,"column":13,"index":2813},"line":79,"code":"  it('Escapes', () => {\n    verifyMarkdown(templates.EscapesTemplate(), defaultOptionsCrlf);\n  });","file":"unit/specs/markdown-basic.spec.js","skipped":false,"dir":"test"},{"name":"Headings","suites":["Muya parser (CRLF)"],"updatePoint":{"line":82,"column":14,"index":2913},"line":82,"code":"  it('Headings', () => {\n    verifyMarkdown(templates.HeadingsTemplate(), defaultOptionsCrlf);\n  });","file":"unit/specs/markdown-basic.spec.js","skipped":false,"dir":"test"},{"name":"Images","suites":["Muya parser (CRLF)"],"updatePoint":{"line":85,"column":12,"index":3012},"line":85,"code":"  it('Images', () => {\n    verifyMarkdown(templates.ImagesTemplate(), defaultOptionsCrlf);\n  });","file":"unit/specs/markdown-basic.spec.js","skipped":false,"dir":"test"},{"name":"Links","suites":["Muya parser (CRLF)"],"updatePoint":{"line":88,"column":11,"index":3108},"line":88,"code":"  it('Links', () => {\n    verifyMarkdown(templates.LinksTemplate(), defaultOptionsCrlf);\n  });","file":"unit/specs/markdown-basic.spec.js","skipped":false,"dir":"test"},{"name":"Lists","suites":["Muya parser (CRLF)"],"updatePoint":{"line":91,"column":11,"index":3203},"line":91,"code":"  it('Lists', () => {\n    verifyMarkdown(templates.ListsTemplate(), defaultOptionsCrlf);\n  });","file":"unit/specs/markdown-basic.spec.js","skipped":false,"dir":"test"},{"name":"GFM - Basic Text Formatting","suites":["Muya parser (CRLF)"],"updatePoint":{"line":94,"column":33,"index":3320},"line":94,"code":"  it('GFM - Basic Text Formatting', () => {\n    verifyMarkdown(templates.GfmBasicTextFormattingTemplate(), defaultOptionsCrlf);\n  });","file":"unit/specs/markdown-basic.spec.js","skipped":false,"dir":"test"},{"name":"GFM - Lists","suites":["Muya parser (CRLF)"],"updatePoint":{"line":97,"column":17,"index":3438},"line":97,"code":"  it('GFM - Lists', () => {\n    verifyMarkdown(templates.GfmListsTemplate(), defaultOptionsCrlf);\n  });","file":"unit/specs/markdown-basic.spec.js","skipped":false,"dir":"test"},{"name":"GFM - Tables","suites":["Muya parser (CRLF)"],"updatePoint":{"line":100,"column":18,"index":3543},"line":100,"code":"  it('GFM - Tables', () => {\n    verifyMarkdown(templates.GfmTablesTemplate(), defaultOptionsCrlf);\n  });","file":"unit/specs/markdown-basic.spec.js","skipped":false,"dir":"test"},{"name":"Footnote according pandoc specification","suites":["Markdown Footnotes"],"updatePoint":{"line":33,"column":45,"index":677},"line":33,"code":"  it('Footnote according pandoc specification', () => {\n    const expected = [{\n      type: 'paragraph',\n      text: 'foo[^1]'\n    }, {\n      type: 'space'\n    }, {\n      type: 'footnote_start',\n      identifier: '1'\n    }, {\n      type: 'paragraph',\n      text: 'foo'\n    }, {\n      type: 'footnote_end'\n    }];\n    const markdown = `foo[^1]\n\n[^1]: foo`;\n    const tokens = parseMarkdown(markdown);\n    expect(convertTokens(tokens)).to.deep.equal(expected);\n  });","file":"unit/specs/markdown-footnotes.spec.js","skipped":false,"dir":"test"},{"name":"Footnote according pandoc specification with more text","suites":["Markdown Footnotes"],"updatePoint":{"line":54,"column":60,"index":1157},"line":54,"code":"  it('Footnote according pandoc specification with more text', () => {\n    const expected = [{\n      type: 'paragraph',\n      text: 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy[^1] eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.'\n    }, {\n      type: 'space'\n    }, {\n      type: 'footnote_start',\n      identifier: '1'\n    }, {\n      type: 'paragraph',\n      text: 'At vero eos et accusam et justo duo dolores et ea rebum!'\n    }, {\n      type: 'footnote_end'\n    }];\n    const markdown = `Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy[^1] eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.\n\n[^1]: At vero eos et accusam et justo duo dolores et ea rebum!`;\n    const tokens = parseMarkdown(markdown);\n    expect(convertTokens(tokens)).to.deep.equal(expected);\n  });","file":"unit/specs/markdown-footnotes.spec.js","skipped":false,"dir":"test"},{"name":"Footnote with text as tag","suites":["Markdown Footnotes"],"updatePoint":{"line":75,"column":31,"index":2018},"line":75,"code":"  it('Footnote with text as tag', () => {\n    const expected = [{\n      type: 'paragraph',\n      text: 'Lorem ipsum dolor sit amet, consetetur[^foo1] sadipscing elitr.'\n    }, {\n      type: 'space'\n    }, {\n      type: 'footnote_start',\n      identifier: 'foo1'\n    }, {\n      type: 'paragraph',\n      text: 'At vero eos et accusam et justo duo dolores et ea rebum!'\n    }, {\n      type: 'footnote_end'\n    }];\n    const markdown = `Lorem ipsum dolor sit amet, consetetur[^foo1] sadipscing elitr.\n\n[^foo1]: At vero eos et accusam et justo duo dolores et ea rebum!`;\n    const tokens = parseMarkdown(markdown);\n    expect(convertTokens(tokens)).to.deep.equal(expected);\n  });","file":"unit/specs/markdown-footnotes.spec.js","skipped":false,"dir":"test"},{"name":"Footnote without space between footnote tag and text","suites":["Markdown Footnotes"],"updatePoint":{"line":96,"column":58,"index":2720},"line":96,"code":"  it('Footnote without space between footnote tag and text', () => {\n    const expected = [{\n      type: 'paragraph',\n      text: 'Lorem ipsum dolor sit amet, consetetur[^foo1] sadipscing elitr.'\n    }, {\n      type: 'space'\n    }, {\n      type: 'footnote_start',\n      identifier: 'foo1'\n    }, {\n      type: 'paragraph',\n      text: 'At vero eos et accusam et justo duo dolores et ea rebum!'\n    }, {\n      type: 'footnote_end'\n    }];\n    const markdown = `Lorem ipsum dolor sit amet, consetetur[^foo1] sadipscing elitr.\n\n[^foo1]:At vero eos et accusam et justo duo dolores et ea rebum!`;\n    const tokens = parseMarkdown(markdown);\n    expect(convertTokens(tokens)).to.deep.equal(expected);\n  });","file":"unit/specs/markdown-footnotes.spec.js","skipped":false,"dir":"test"},{"name":"Footnote with non-ASCII text","suites":["Markdown Footnotes"],"updatePoint":{"line":117,"column":34,"index":3397},"line":117,"code":"  it('Footnote with non-ASCII text', () => {\n    const expected = [{\n      type: 'paragraph',\n      text: '掲応自情表使[^掲応自情表]供業辞金打論将'\n    }, {\n      type: 'space'\n    }, {\n      type: 'footnote_start',\n      identifier: '掲応自情表'\n    }, {\n      type: 'paragraph',\n      text: '別率重帰更科申会前後度計'\n    }, {\n      type: 'footnote_end'\n    }];\n    const markdown = `掲応自情表使[^掲応自情表]供業辞金打論将\n\n[^掲応自情表]: 別率重帰更科申会前後度計`;\n    const tokens = parseMarkdown(markdown);\n    expect(convertTokens(tokens)).to.deep.equal(expected);\n  });","file":"unit/specs/markdown-footnotes.spec.js","skipped":false,"dir":"test"},{"name":"Footnote with non-ASCII text as tag","suites":["Markdown Footnotes"],"updatePoint":{"line":138,"column":41,"index":3912},"line":138,"code":"  it('Footnote with non-ASCII text as tag', () => {\n    const expected = [{\n      type: 'paragraph',\n      text: 'Lorem ipsum dolor sit amet, consetetur[^掲応自情表] sadipscing elitr.'\n    }, {\n      type: 'space'\n    }, {\n      type: 'footnote_start',\n      identifier: '掲応自情表'\n    }, {\n      type: 'paragraph',\n      text: 'At vero eos et accusam et justo duo dolores et ea rebum!'\n    }, {\n      type: 'footnote_end'\n    }];\n    const markdown = `Lorem ipsum dolor sit amet, consetetur[^掲応自情表] sadipscing elitr.\n\n[^掲応自情表]: At vero eos et accusam et justo duo dolores et ea rebum!`;\n    const tokens = parseMarkdown(markdown);\n    expect(convertTokens(tokens)).to.deep.equal(expected);\n  });","file":"unit/specs/markdown-footnotes.spec.js","skipped":false,"dir":"test"},{"name":"Footnote with text in next paragraph","suites":["Markdown Footnotes"],"updatePoint":{"line":159,"column":42,"index":4602},"line":159,"code":"  it('Footnote with text in next paragraph', () => {\n    const expected = [{\n      type: 'paragraph',\n      text: 'Lorem ipsum dolor sit amet, consetetur[^foo1] sadipscing elitr.'\n    }, {\n      type: 'space'\n    }, {\n      type: 'footnote_start',\n      identifier: 'foo1'\n    }, {\n      type: 'paragraph',\n      text: 'At vero eos et accusam et justo duo dolores et ea rebum!'\n    }, {\n      type: 'footnote_end'\n    }];\n    const markdown = `Lorem ipsum dolor sit amet, consetetur[^foo1] sadipscing elitr.\n\n[^foo1]:\n\n    At vero eos et accusam et justo duo dolores et ea rebum!`;\n    const tokens = parseMarkdown(markdown);\n    expect(convertTokens(tokens)).to.deep.equal(expected);\n  });","file":"unit/specs/markdown-footnotes.spec.js","skipped":false,"dir":"test"},{"name":"Footnote with text in next line","suites":["Markdown Footnotes"],"updatePoint":{"line":182,"column":37,"index":5288},"line":182,"code":"  it('Footnote with text in next line', () => {\n    const expected = [{\n      type: 'paragraph',\n      text: 'Lorem ipsum dolor sit amet, consetetur[^foo1] sadipscing elitr.'\n    }, {\n      type: 'space'\n    }, {\n      type: 'footnote_start',\n      identifier: 'foo1'\n    }, {\n      type: 'paragraph',\n      text: 'At vero eos et accusam et justo duo dolores et ea rebum!'\n    }, {\n      type: 'footnote_end'\n    }];\n    const markdown = `Lorem ipsum dolor sit amet, consetetur[^foo1] sadipscing elitr.\n\n[^foo1]:\n    At vero eos et accusam et justo duo dolores et ea rebum!`;\n    const tokens = parseMarkdown(markdown);\n    expect(convertTokens(tokens)).to.deep.equal(expected);\n  });","file":"unit/specs/markdown-footnotes.spec.js","skipped":false,"dir":"test"},{"name":"Footnote with inline text and text in next paragraph","suites":["Markdown Footnotes"],"updatePoint":{"line":204,"column":58,"index":5994},"line":204,"code":"  it('Footnote with inline text and text in next paragraph', () => {\n    const expected = [{\n      type: 'paragraph',\n      text: 'Lorem ipsum dolor sit amet, consetetur[^foo1] sadipscing elitr.'\n    }, {\n      type: 'space'\n    }, {\n      type: 'footnote_start',\n      identifier: 'foo1'\n    }, {\n      type: 'paragraph',\n      text: 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr.'\n    }, {\n      type: 'space'\n    }, {\n      type: 'paragraph',\n      text: 'At vero eos et accusam et justo duo dolores et ea rebum!'\n    }, {\n      type: 'footnote_end'\n    }];\n    const markdown = `Lorem ipsum dolor sit amet, consetetur[^foo1] sadipscing elitr.\n\n[^foo1]: Lorem ipsum dolor sit amet, consetetur sadipscing elitr.\n\n    At vero eos et accusam et justo duo dolores et ea rebum!`;\n    const tokens = parseMarkdown(markdown);\n    expect(convertTokens(tokens)).to.deep.equal(expected);\n  });","file":"unit/specs/markdown-footnotes.spec.js","skipped":false,"dir":"test"},{"name":"Footnote with multiline text in next paragraphs","suites":["Markdown Footnotes"],"updatePoint":{"line":232,"column":53,"index":6887},"line":232,"code":"  it('Footnote with multiline text in next paragraphs', () => {\n    const expected = [{\n      type: 'paragraph',\n      text: 'Lorem ipsum dolor sit amet, consetetur[^foo1] sadipscing elitr.'\n    }, {\n      type: 'space'\n    }, {\n      type: 'footnote_start',\n      identifier: 'foo1'\n    }, {\n      type: 'paragraph',\n      text: 'At vero eos et accusam et justo duo dolores et ea rebum!'\n    }, {\n      type: 'space'\n    }, {\n      type: 'paragraph',\n      text: 'Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.'\n    }, {\n      type: 'footnote_end'\n    }];\n    const markdown = `Lorem ipsum dolor sit amet, consetetur[^foo1] sadipscing elitr.\n\n[^foo1]:\n\n    At vero eos et accusam et justo duo dolores et ea rebum!\n\n    Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.`;\n    const tokens = parseMarkdown(markdown);\n    expect(convertTokens(tokens)).to.deep.equal(expected);\n  });","file":"unit/specs/markdown-footnotes.spec.js","skipped":false,"dir":"test"},{"name":"Footnote with multiline text in next line and paragraph","suites":["Markdown Footnotes"],"updatePoint":{"line":262,"column":61,"index":7845},"line":262,"code":"  it('Footnote with multiline text in next line and paragraph', () => {\n    const expected = [{\n      type: 'paragraph',\n      text: 'Lorem ipsum dolor sit amet, consetetur[^foo1] sadipscing elitr.'\n    }, {\n      type: 'space'\n    }, {\n      type: 'footnote_start',\n      identifier: 'foo1'\n    }, {\n      type: 'paragraph',\n      text: 'At vero eos et accusam et justo duo dolores et ea rebum!'\n    }, {\n      type: 'space'\n    }, {\n      type: 'paragraph',\n      text: 'Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.'\n    }, {\n      type: 'footnote_end'\n    }];\n    const markdown = `Lorem ipsum dolor sit amet, consetetur[^foo1] sadipscing elitr.\n\n[^foo1]:\n    At vero eos et accusam et justo duo dolores et ea rebum!\n\n    Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.`;\n    const tokens = parseMarkdown(markdown);\n    expect(convertTokens(tokens)).to.deep.equal(expected);\n  });","file":"unit/specs/markdown-footnotes.spec.js","skipped":false,"dir":"test"},{"name":"Footnote with multiline text and list elements","suites":["Markdown Footnotes"],"updatePoint":{"line":291,"column":52,"index":8793},"line":291,"code":"  it('Footnote with multiline text and list elements', () => {\n    const expected = [{\n      type: 'paragraph',\n      text: 'Lorem ipsum dolor sit amet, consetetur[^foo1] sadipscing elitr.'\n    }, {\n      type: 'space'\n    }, {\n      type: 'footnote_start',\n      identifier: 'foo1'\n    }, {\n      type: 'paragraph',\n      text: 'At vero eos et accusam et justo duo dolores et ea rebum!'\n    }, {\n      type: 'space'\n    }, {\n      type: 'list_start',\n      ordered: false,\n      listType: 'bullet',\n      start: ''\n    }, {\n      checked: undefined,\n      listItemType: 'bullet',\n      bulletMarkerOrDelimiter: '-',\n      type: 'list_item_start'\n    }, {\n      type: 'text',\n      text: 'list element 1'\n    }, {\n      type: 'list_item_end'\n    }, {\n      checked: undefined,\n      listItemType: 'bullet',\n      bulletMarkerOrDelimiter: '-',\n      type: 'list_item_start'\n    }, {\n      type: 'text',\n      text: 'list element 2'\n    }, {\n      type: 'list_item_end'\n    }, {\n      checked: undefined,\n      listItemType: 'bullet',\n      bulletMarkerOrDelimiter: '-',\n      type: 'list_item_start'\n    }, {\n      type: 'text',\n      text: 'list element 2'\n    }, {\n      type: 'space'\n    }, {\n      type: 'list_item_end'\n    }, {\n      type: 'list_end'\n    }, {\n      type: 'paragraph',\n      text: 'Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.'\n    }, {\n      type: 'footnote_end'\n    }];\n    const markdown = `Lorem ipsum dolor sit amet, consetetur[^foo1] sadipscing elitr.\n\n[^foo1]:\n\n    At vero eos et accusam et justo duo dolores et ea rebum!\n\n    - list element 1\n    - list element 2\n    - list element 2\n\n    Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.`;\n    const tokens = parseMarkdown(markdown);\n    expect(convertTokens(tokens)).to.deep.equal(expected);\n  });","file":"unit/specs/markdown-footnotes.spec.js","skipped":false,"dir":"test"},{"name":"Footnote with multiline text and code block","suites":["Markdown Footnotes"],"updatePoint":{"line":364,"column":49,"index":10641},"line":364,"code":"  it('Footnote with multiline text and code block', () => {\n    const expected = [{\n      type: 'paragraph',\n      text: 'Lorem ipsum dolor sit amet, consetetur[^foo1] sadipscing elitr.'\n    }, {\n      type: 'space'\n    }, {\n      type: 'footnote_start',\n      identifier: 'foo1'\n    }, {\n      type: 'paragraph',\n      text: 'At vero eos et accusam et justo duo dolores et ea rebum!'\n    }, {\n      type: 'space'\n    }, {\n      type: 'code',\n      codeBlockStyle: 'fenced',\n      lang: '',\n      text: 'code block text'\n    }, {\n      type: 'paragraph',\n      text: 'Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.'\n    }, {\n      type: 'footnote_end'\n    }];\n    const markdown = `Lorem ipsum dolor sit amet, consetetur[^foo1] sadipscing elitr.\n\n[^foo1]:\n\n    At vero eos et accusam et justo duo dolores et ea rebum!\n\n    \\`\\`\\`\n    code block text\n    \\`\\`\\`\n\n    Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.`;\n    const tokens = parseMarkdown(markdown);\n    expect(convertTokens(tokens)).to.deep.equal(expected);\n  });","file":"unit/specs/markdown-footnotes.spec.js","skipped":false,"dir":"test"},{"name":"Footnote with prefix is not a footnote","suites":["Markdown Footnotes"],"updatePoint":{"line":403,"column":44,"index":11732},"line":403,"code":"  it('Footnote with prefix is not a footnote', () => {\n    const expected = [{\n      type: 'paragraph',\n      text: 'Lorem ipsum dolor sit amet, consetetur[^foo1] sadipscing elitr.'\n    }, {\n      type: 'space'\n    }, {\n      type: 'paragraph',\n      text: 'a[^foo1]: At vero eos et accusam et justo duo dolores et ea rebum!'\n    }];\n    const markdown = `Lorem ipsum dolor sit amet, consetetur[^foo1] sadipscing elitr.\n\na[^foo1]: At vero eos et accusam et justo duo dolores et ea rebum!`;\n    const tokens = parseMarkdown(markdown);\n    expect(convertTokens(tokens)).to.deep.equal(expected);\n  });","file":"unit/specs/markdown-footnotes.spec.js","skipped":false,"dir":"test"},{"name":"Footnote inside paragraph is not a footnote","suites":["Markdown Footnotes"],"updatePoint":{"line":419,"column":49,"index":12336},"line":419,"code":"  it('Footnote inside paragraph is not a footnote', () => {\n    const expected = [{\n      type: 'paragraph',\n      text: 'Lorem ipsum dolor sit amet, consetetur[^foo1] sadipscing elitr.'\n    }, {\n      type: 'space'\n    }, {\n      type: 'paragraph',\n      text: 'At vero eos et accusam [^foo1]: et justo duo dolores et ea rebum!'\n    }];\n    const markdown = `Lorem ipsum dolor sit amet, consetetur[^foo1] sadipscing elitr.\n\nAt vero eos et accusam [^foo1]: et justo duo dolores et ea rebum!`;\n    const tokens = parseMarkdown(markdown);\n    expect(convertTokens(tokens)).to.deep.equal(expected);\n  });","file":"unit/specs/markdown-footnotes.spec.js","skipped":false,"dir":"test"},{"name":"Footnote is paragraph if escaped (front)","suites":["Markdown Footnotes"],"updatePoint":{"line":435,"column":46,"index":12935},"line":435,"code":"  it('Footnote is paragraph if escaped (front)', () => {\n    const expected = [{\n      type: 'paragraph',\n      text: 'foo[^1]'\n    }, {\n      type: 'space'\n    }, {\n      type: 'paragraph',\n      text: '\\\\[^1]: foo'\n    }];\n    const markdown = `foo[^1]\n\n\\\\[^1]: foo`;\n    const tokens = parseMarkdown(markdown);\n    expect(convertTokens(tokens)).to.deep.equal(expected);\n  });","file":"unit/specs/markdown-footnotes.spec.js","skipped":false,"dir":"test"},{"name":"Footnote is paragraph if escaped (back)","suites":["Markdown Footnotes"],"updatePoint":{"line":451,"column":45,"index":13313},"line":451,"code":"  it('Footnote is paragraph if escaped (back)', () => {\n    const expected = [{\n      type: 'paragraph',\n      text: 'foo[^1]'\n    }, {\n      type: 'space'\n    }, {\n      type: 'paragraph',\n      text: '[^1\\\\]: foo'\n    }];\n    const markdown = `foo[^1]\n\n[^1\\\\]: foo`;\n    const tokens = parseMarkdown(markdown);\n    expect(convertTokens(tokens)).to.deep.equal(expected);\n  });","file":"unit/specs/markdown-footnotes.spec.js","skipped":false,"dir":"test"},{"name":"Invalid footenote token","suites":["Markdown Footnotes"],"updatePoint":{"line":467,"column":29,"index":13675},"line":467,"code":"  it('Invalid footenote token', () => {\n    const expected = [{\n      type: 'paragraph',\n      text: 'foo[^1]'\n    }, {\n      type: 'space'\n    }, {\n      type: 'paragraph',\n      text: '[ ^1]: foo'\n    }];\n    const markdown = `foo[^1]\n\n[ ^1]: foo`;\n    const tokens = parseMarkdown(markdown);\n    expect(convertTokens(tokens)).to.deep.equal(expected);\n  });","file":"unit/specs/markdown-footnotes.spec.js","skipped":false,"dir":"test"},{"name":"Empty footnotes with newline should be a footnote without content","suites":["Markdown Footnotes (*)"],"updatePoint":{"line":502,"column":71,"index":14747},"line":502,"code":"  it('Empty footnotes with newline should be a footnote without content', () => {\n    const expected = [{\n      type: 'paragraph',\n      text: 'foo[^foo1]'\n    }, {\n      type: 'space'\n    }, {\n      type: 'footnote_start',\n      identifier: 'foo1'\n    }, {\n      type: 'footnote_end'\n    }];\n    const markdown = `foo[^foo1]\n\n[^foo1]:\n`;\n    const tokens = parseMarkdown(markdown);\n    expect(convertTokens(tokens)).to.deep.equal(expected);\n  }); // According to pandoc the following test is correct but it seems wrong. Why do we","file":"unit/specs/markdown-footnotes.spec.js","skipped":false,"dir":"test"},{"name":"Strange footnote content","suites":["Markdown Footnotes (*)"],"updatePoint":{"line":523,"column":30,"index":15281},"line":523,"code":"  it('Strange footnote content', () => {\n    const expected = [{\n      type: 'paragraph',\n      text: 'foo[^foo1]'\n    }, {\n      type: 'space'\n    }, {\n      type: 'space'\n    }, {\n      type: 'paragraph',\n      text: 'bbbbbb'\n    }, {\n      type: 'footnote_start',\n      identifier: 'foo1'\n    }, {\n      type: 'paragraph',\n      text: 'aaaaaa'\n    }, {\n      type: 'footnote_end'\n    }];\n    const markdown = `foo[^foo1]\n\n[^foo1]:\n\naaaaaa\n\nbbbbbb\n`;\n    const tokens = parseMarkdown(markdown);\n    expect(convertTokens(tokens)).to.deep.equal(expected);\n  }); // NOTE: Currently all footnotes are moved to the bottom of the document.","file":"unit/specs/markdown-footnotes.spec.js","skipped":false,"dir":"test"},{"name":"Footnote should end on normal paragraph","suites":["Markdown Footnotes (*)"],"updatePoint":{"line":555,"column":45,"index":15933},"line":555,"code":"  it('Footnote should end on normal paragraph', () => {\n    const expected = [{\n      type: 'paragraph',\n      text: 'Lorem ipsum dolor sit amet, consetetur[^foo1] sadipscing elitr.'\n    }, {\n      type: 'space'\n    }, {\n      type: 'space'\n    }, // TODO: Double space seems to be wrong due to reordering?\n    {\n      type: 'paragraph',\n      text: 'Sed diam nonumy eirmod tempor.'\n    }, {\n      type: 'footnote_start',\n      identifier: 'foo1'\n    }, {\n      type: 'paragraph',\n      text: 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr.'\n    }, {\n      type: 'space'\n    }, {\n      type: 'paragraph',\n      text: 'At vero eos et accusam et justo duo dolores et ea rebum!'\n    }, {\n      type: 'footnote_end'\n    }];\n    const markdown = `Lorem ipsum dolor sit amet, consetetur[^foo1] sadipscing elitr.\n\n[^foo1]: Lorem ipsum dolor sit amet, consetetur sadipscing elitr.\n\n    At vero eos et accusam et justo duo dolores et ea rebum!\n\nSed diam nonumy eirmod tempor.`;\n    const tokens = parseMarkdown(markdown);\n    expect(convertTokens(tokens)).to.deep.equal(expected);\n  }); // NOTE: Currently all footnotes are moved to the bottom of the document.","file":"unit/specs/markdown-footnotes.spec.js","skipped":false,"dir":"test"},{"name":"Footnote should end on wrong indentation","suites":["Markdown Footnotes (*)"],"updatePoint":{"line":592,"column":46,"index":17097},"line":592,"code":"  it('Footnote should end on wrong indentation', () => {\n    const expected = [{\n      type: 'paragraph',\n      text: 'Lorem ipsum dolor sit amet, consetetur[^foo1] sadipscing elitr.'\n    }, {\n      type: 'space'\n    }, {\n      type: 'space'\n    }, {\n      type: 'paragraph',\n      text: '  Sed diam nonumy eirmod tempor.'\n    }, {\n      type: 'footnote_start',\n      identifier: 'foo1'\n    }, {\n      type: 'paragraph',\n      text: 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr.'\n    }, {\n      type: 'space'\n    }, {\n      type: 'paragraph',\n      text: 'At vero eos et accusam et justo duo dolores et ea rebum!'\n    }, {\n      type: 'footnote_end'\n    }];\n    const markdown = `Lorem ipsum dolor sit amet, consetetur[^foo1] sadipscing elitr.\n\n[^foo1]: Lorem ipsum dolor sit amet, consetetur sadipscing elitr.\n\n    At vero eos et accusam et justo duo dolores et ea rebum!\n\n  Sed diam nonumy eirmod tempor.`;\n    const tokens = parseMarkdown(markdown);\n    expect(convertTokens(tokens)).to.deep.equal(expected);\n  }); // NOTE: Missing footnotes should be ignored according specification, but MarkText have to","file":"unit/specs/markdown-footnotes.spec.js","skipped":false,"dir":"test"},{"name":"Footnotes should be always reported","suites":["Markdown Footnotes (*)"],"updatePoint":{"line":629,"column":41,"index":18307},"line":629,"code":"  it('Footnotes should be always reported', () => {\n    const expected = [{\n      type: 'paragraph',\n      text: 'Lorem ipsum dolor sit amet, consetetur[^1] sadipscing elitr.'\n    }, {\n      type: 'space'\n    }, {\n      type: 'footnote_start',\n      identifier: '2'\n    }, {\n      type: 'paragraph',\n      text: 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr.'\n    }, {\n      type: 'footnote_end'\n    }];\n    const markdown = `Lorem ipsum dolor sit amet, consetetur[^1] sadipscing elitr.\n\n[^2]: Lorem ipsum dolor sit amet, consetetur sadipscing elitr.`;\n    const tokens = parseMarkdown(markdown);\n    expect(convertTokens(tokens)).to.deep.equal(expected);\n  });","file":"unit/specs/markdown-footnotes.spec.js","skipped":false,"dir":"test"},{"name":"Indent by 1 space","suites":["Muya list identation"],"updatePoint":{"line":56,"column":23,"index":1328},"line":56,"code":"  it('Indent by 1 space', () => {\n    const md = `start\n\n- foo\n- foo\n  - foo\n  - foo\n    - foo\n    - foo\n      - foo\n  - foo\n- foo\n\nsep\n\n1. foo\n2. foo\n   1. foo\n   2. foo\n      1. foo\n   3. foo\n3. foo\n   20. foo\n       141. foo\n            1. foo\n`;\n    verifyMarkdown(md, 1);\n  });","file":"unit/specs/markdown-list-indentation.spec.js","skipped":false,"dir":"test"},{"name":"Indent by 2 spaces","suites":["Muya list identation"],"updatePoint":{"line":84,"column":24,"index":1612},"line":84,"code":"  it('Indent by 2 spaces', () => {\n    const md = `start\n\n- foo\n- foo\n   - foo\n   - foo\n      - foo\n      - foo\n         - foo\n   - foo\n- foo\n\nsep\n\n1. foo\n2. foo\n    1. foo\n    2. foo\n        1. foo\n    3. foo\n3. foo\n    20. foo\n         141. foo\n               1. foo\n`;\n    verifyMarkdown(md, 2);\n  });","file":"unit/specs/markdown-list-indentation.spec.js","skipped":false,"dir":"test"},{"name":"Indent by 3 spaces","suites":["Muya list identation"],"updatePoint":{"line":112,"column":24,"index":1917},"line":112,"code":"  it('Indent by 3 spaces', () => {\n    const md = `start\n\n- foo\n- foo\n    - foo\n    - foo\n        - foo\n        - foo\n            - foo\n    - foo\n- foo\n\nsep\n\n1. foo\n2. foo\n     1. foo\n     2. foo\n          1. foo\n     3. foo\n3. foo\n     20. foo\n           141. foo\n                  1. foo\n`;\n    verifyMarkdown(md, 3);\n  });","file":"unit/specs/markdown-list-indentation.spec.js","skipped":false,"dir":"test"},{"name":"Indent by 4 spaces","suites":["Muya list identation"],"updatePoint":{"line":140,"column":24,"index":2243},"line":140,"code":"  it('Indent by 4 spaces', () => {\n    const md = `start\n\n- foo\n- foo\n     - foo\n     - foo\n          - foo\n          - foo\n               - foo\n     - foo\n- foo\n\nsep\n\n1. foo\n2. foo\n      1. foo\n      2. foo\n            1. foo\n      3. foo\n3. foo\n      20. foo\n             141. foo\n                     1. foo\n`;\n    verifyMarkdown(md, 4);\n  });","file":"unit/specs/markdown-list-indentation.spec.js","skipped":false,"dir":"test"},{"name":"Indent using Daring Fireball Markdown Spec","suites":["Muya list identation"],"updatePoint":{"line":194,"column":48,"index":2930},"line":194,"code":"  it('Indent using Daring Fireball Markdown Spec', () => {\n    const md = `start\n\n- foo\n- foo\n    - foo\n    - foo\n        - foo\n        - foo\n            - foo\n    - foo\n- foo\n\nsep\n\n1. foo\n2. foo\n    1. foo\n    2. foo\n        1. foo\n    3. foo\n3. foo\n    20. foo\n        99. foo\n            1. foo\n`;\n    verifyMarkdown(md, 'dfm', md);\n  });","file":"unit/specs/markdown-list-indentation.spec.js","skipped":false,"dir":"test"},{"name":"Match F2","suites":["Test equal with non characte key"],"updatePoint":{"line":7,"column":14,"index":715},"line":7,"code":"  it('Match F2', () => {\n    expect(isEqualAccelerator('F2', 'F2')).to.equal(true);\n  });","file":"unit/specs/match-electron-accelerator.spec.js","skipped":false,"dir":"test"},{"name":"Match F10","suites":["Test equal with non characte key"],"updatePoint":{"line":10,"column":15,"index":806},"line":10,"code":"  it('Match F10', () => {\n    expect(isEqualAccelerator('F10', 'F10')).to.equal(true);\n  });","file":"unit/specs/match-electron-accelerator.spec.js","skipped":false,"dir":"test"},{"name":"Match PageUp","suites":["Test equal with non characte key"],"updatePoint":{"line":13,"column":18,"index":902},"line":13,"code":"  it('Match PageUp', () => {\n    expect(isEqualAccelerator('PageUp', 'PageUp')).to.equal(true);\n  });","file":"unit/specs/match-electron-accelerator.spec.js","skipped":false,"dir":"test"},{"name":"Match Tab","suites":["Test equal with non characte key"],"updatePoint":{"line":16,"column":15,"index":1001},"line":16,"code":"  it('Match Tab', () => {\n    expect(isEqualAccelerator('Tab', 'Tab')).to.equal(true);\n  });","file":"unit/specs/match-electron-accelerator.spec.js","skipped":false,"dir":"test"},{"name":"Mismatch F2 and F3","suites":["Test equal with non characte key"],"updatePoint":{"line":19,"column":24,"index":1103},"line":19,"code":"  it('Mismatch F2 and F3', () => {\n    expect(isEqualAccelerator('F2', 'F3')).to.equal(false);\n  });","file":"unit/specs/match-electron-accelerator.spec.js","skipped":false,"dir":"test"},{"name":"Mismatch Left and Down","suites":["Test equal with non characte key"],"updatePoint":{"line":22,"column":28,"index":1208},"line":22,"code":"  it('Mismatch Left and Down', () => {\n    expect(isEqualAccelerator('Left', 'Down')).to.equal(false);\n  });","file":"unit/specs/match-electron-accelerator.spec.js","skipped":false,"dir":"test"},{"name":"Mismatch F1 and 1","suites":["Test equal with non characte key"],"updatePoint":{"line":25,"column":23,"index":1312},"line":25,"code":"  it('Mismatch F1 and 1', () => {\n    expect(isEqualAccelerator('F1', '1')).to.equal(false);\n  });","file":"unit/specs/match-electron-accelerator.spec.js","skipped":false,"dir":"test"},{"name":"Mismatch F2 and Ctrl+F2","suites":["Test equal with non characte key"],"updatePoint":{"line":28,"column":29,"index":1417},"line":28,"code":"  it('Mismatch F2 and Ctrl+F2', () => {\n    expect(isEqualAccelerator('F2', 'Ctrl+F2')).to.equal(false);\n  });","file":"unit/specs/match-electron-accelerator.spec.js","skipped":false,"dir":"test"},{"name":"Match Ctrl+A","suites":["Test equal with basis keys"],"updatePoint":{"line":33,"column":18,"index":1568},"line":33,"code":"  it('Match Ctrl+A', () => {\n    expect(isEqualAccelerator('Ctrl+A', 'A+Ctrl')).to.equal(true);\n  });","file":"unit/specs/match-electron-accelerator.spec.js","skipped":false,"dir":"test"},{"name":"Match case insensitive with multiple modifiers","suites":["Test equal with basis keys"],"updatePoint":{"line":36,"column":52,"index":1704},"line":36,"code":"  it('Match case insensitive with multiple modifiers', () => {\n    expect(isEqualAccelerator('Ctrl+Alt+A', 'ctrl+alt+a')).to.equal(true);\n  });","file":"unit/specs/match-electron-accelerator.spec.js","skipped":false,"dir":"test"},{"name":"Match case insensitive with multiple modifiers and upper-case letter","suites":["Test equal with basis keys"],"updatePoint":{"line":39,"column":74,"index":1870},"line":39,"code":"  it('Match case insensitive with multiple modifiers and upper-case letter', () => {\n    expect(isEqualAccelerator('Ctrl+Shift+A', 'ctrl+shift+A')).to.equal(true);\n  });","file":"unit/specs/match-electron-accelerator.spec.js","skipped":false,"dir":"test"},{"name":"Match mixed case with multiple modifiers","suites":["Test equal with basis keys"],"updatePoint":{"line":42,"column":46,"index":2012},"line":42,"code":"  it('Match mixed case with multiple modifiers', () => {\n    expect(isEqualAccelerator('Ctrl+a+shift', 'ctrl+Shift+a')).to.equal(true);\n  });","file":"unit/specs/match-electron-accelerator.spec.js","skipped":false,"dir":"test"},{"name":"Mismatch Ctrl+A","suites":["Test not equal with basis keys"],"updatePoint":{"line":47,"column":21,"index":2184},"line":47,"code":"  it('Mismatch Ctrl+A', () => {\n    expect(isEqualAccelerator('Ctrl+A', 'A+Ctrl+Alt')).to.equal(false);\n  });","file":"unit/specs/match-electron-accelerator.spec.js","skipped":false,"dir":"test"},{"name":"Mismatch case insensitive with multiple modifiers","suites":["Test not equal with basis keys"],"updatePoint":{"line":50,"column":55,"index":2328},"line":50,"code":"  it('Mismatch case insensitive with multiple modifiers', () => {\n    expect(isEqualAccelerator('Ctrl+A', 'ctrl+alt+a')).to.equal(false);\n  });","file":"unit/specs/match-electron-accelerator.spec.js","skipped":false,"dir":"test"},{"name":"Mismatch letters only","suites":["Test not equal with basis keys"],"updatePoint":{"line":53,"column":27,"index":2444},"line":53,"code":"  it('Mismatch letters only', () => {\n    expect(isEqualAccelerator('a', 'b')).to.equal(false);\n  });","file":"unit/specs/match-electron-accelerator.spec.js","skipped":false,"dir":"test"},{"name":"Mismatch same modifiers but different key","suites":["Test not equal with basis keys"],"updatePoint":{"line":56,"column":47,"index":2566},"line":56,"code":"  it('Mismatch same modifiers but different key', () => {\n    expect(isEqualAccelerator('Ctrl+a+shift', 'ctrl+Shift+b')).to.equal(false);\n  });","file":"unit/specs/match-electron-accelerator.spec.js","skipped":false,"dir":"test"},{"name":"Ctrl+","suites":["Test invalid accelerator"],"updatePoint":{"line":61,"column":11,"index":2723},"line":61,"code":"  it('Ctrl+', () => {\n    expect(isEqualAccelerator('Ctrl+', 'Ctrl+Plus')).to.equal(false);\n  });","file":"unit/specs/match-electron-accelerator.spec.js","skipped":false,"dir":"test"},{"name":"Ctrl++","suites":["Test invalid accelerator"],"updatePoint":{"line":64,"column":12,"index":2822},"line":64,"code":"  it('Ctrl++', () => {\n    expect(isEqualAccelerator('Ctrl++', 'Ctrl+Plus')).to.equal(false);\n  });","file":"unit/specs/match-electron-accelerator.spec.js","skipped":false,"dir":"test"},{"name":"Emtpy accelerator 1","suites":["Test invalid accelerator"],"updatePoint":{"line":67,"column":25,"index":2935},"line":67,"code":"  it('Emtpy accelerator 1', () => {\n    expect(isEqualAccelerator('', 'Ctrl+A')).to.equal(false);\n  });","file":"unit/specs/match-electron-accelerator.spec.js","skipped":false,"dir":"test"},{"name":"Emtpy accelerator 2","suites":["Test invalid accelerator"],"updatePoint":{"line":70,"column":25,"index":3039},"line":70,"code":"  it('Emtpy accelerator 2', () => {\n    expect(isEqualAccelerator('ctrl+Shift+b', '')).to.equal(false);\n  });","file":"unit/specs/match-electron-accelerator.spec.js","skipped":false,"dir":"test"},{"name":"Should match +","suites":["Match combination for modifier and key"],"updatePoint":{"line":76,"column":34,"index":3270},"line":76,"code":"    it(`Should match ${mod}+${key}`, () => {\n      expect(isEqualAccelerator(`${mod}+${key}`, `${key}+${mod}`)).to.equal(true);\n    });","file":"unit/specs/match-electron-accelerator.spec.js","skipped":false,"dir":"test"},{"name":"Should match ","suites":["Match non-character keys"],"updatePoint":{"line":82,"column":81,"index":3509},"line":82,"code":"  nonCharacterKeys.forEach(nonCharacterKey => it(`Should match ${nonCharacterKey}`, () => {\n    expect(isEqualAccelerator(`${nonCharacterKey}`, `${nonCharacterKey}`)).to.equal(true);\n  }));","file":"unit/specs/match-electron-accelerator.spec.js","skipped":false,"dir":"test"}]}