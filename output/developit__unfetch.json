{"repo":"developit/unfetch","url":"https://github.com/developit/unfetch","branch":"master","configs":[{"package":"unfetch","lang":"js","dir":"test","framework":"jest","pattern":"**/*.{js,ts}"}],"tests":[{"name":"should be a function","suites":["unfetch"],"updatePoint":{"line":4,"column":26,"index":121},"line":4,"code":"  it('should be a function', () => {\n    expect(fetch).toEqual(expect.any(Function));\n  });","file":"index.js","skipped":false,"dir":"test"},{"name":"should be compiled correctly","suites":["unfetch"],"updatePoint":{"line":7,"column":34,"index":221},"line":7,"code":"  it('should be compiled correctly', () => {\n    expect(fetchDist).toEqual(expect.any(Function));\n    expect(fetchDist).toHaveLength(2);\n  });","file":"index.js","skipped":false,"dir":"test"},{"name":"sanity test","suites":["unfetch","fetch()"],"updatePoint":{"line":29,"column":19,"index":851},"line":29,"code":"    it('sanity test', () => {\n      let p = fetch('/foo', {\n        headers: {\n          a: 'b'\n        }\n      }).then(r => {\n        expect(r).toMatchObject({\n          text: expect.any(Function),\n          json: expect.any(Function),\n          blob: expect.any(Function),\n          clone: expect.any(Function),\n          headers: expect.any(Object)\n        });\n        expect(r.clone()).not.toBe(r);\n        expect(r.clone().url).toEqual('/foo?redirect');\n        expect(r.headers.get).toEqual(expect.any(Function));\n        expect(r.headers.get('x-foo')).toEqual('bar,baz');\n        return r.json();\n      }).then(data => {\n        expect(data).toEqual({\n          a: 'b'\n        });\n        expect(xhr.setRequestHeader).toHaveBeenCalledTimes(1);\n        expect(xhr.setRequestHeader).toHaveBeenCalledWith('a', 'b');\n        expect(xhr.open).toHaveBeenCalledTimes(1);\n        expect(xhr.open).toHaveBeenCalledWith('get', '/foo', true);\n        expect(xhr.send).toHaveBeenCalledTimes(1);\n        expect(xhr.send).toHaveBeenCalledWith(null);\n      });\n      expect(xhr.onload).toEqual(expect.any(Function));\n      expect(xhr.onerror).toEqual(expect.any(Function));\n      xhr.onload();\n      return p;\n    });","file":"index.js","skipped":false,"dir":"test"},{"name":"handles empty header values","suites":["unfetch","fetch()"],"updatePoint":{"line":63,"column":35,"index":2077},"line":63,"code":"    it('handles empty header values', () => {\n      xhr.getAllResponseHeaders = jest.fn().mockReturnValue('Server: \\nX-Foo:baz');\n      let p = fetch('/foo').then(r => {\n        expect(r.headers.get('server')).toEqual('');\n        expect(r.headers.get('X-foo')).toEqual('baz');\n      });\n      xhr.onload();\n      return p;\n    });","file":"index.js","skipped":false,"dir":"test"},{"name":"should resolve to fetch when window.fetch exists","suites":["isomorphic-unfetch","\"browser\" entry"],"updatePoint":{"line":5,"column":56,"index":176},"line":5,"code":"    it('should resolve to fetch when window.fetch exists', () => {\n      function fetch() {\n        return this;\n      }\n\n      function unfetch() {}\n\n      let sandbox = {\n        process: undefined,\n        window: {\n          fetch\n        },\n        fetch,\n        exports: {},\n        require: () => unfetch\n      };\n      sandbox.global = sandbox.self = sandbox.window;\n      sandbox.module = {\n        exports: sandbox.exports\n      };\n\n      let filename = require.resolve('../packages/isomorphic-unfetch/browser');\n\n      vm.runInNewContext(fs.readFileSync(filename), sandbox, filename);\n      expect(sandbox.module.exports).toBe(fetch);\n    });","file":"isomorphic.js","skipped":false,"dir":"test"},{"name":"should resolve to unfetch when window.fetch does not exist","suites":["isomorphic-unfetch","\"browser\" entry"],"updatePoint":{"line":31,"column":66,"index":841},"line":31,"code":"    it('should resolve to unfetch when window.fetch does not exist', () => {\n      function unfetch() {}\n\n      let sandbox = {\n        process: undefined,\n        window: {},\n        exports: {},\n        require: () => unfetch\n      };\n      sandbox.global = sandbox.self = sandbox.window;\n      sandbox.module = {\n        exports: sandbox.exports\n      };\n\n      let filename = require.resolve('../packages/isomorphic-unfetch/browser');\n\n      vm.runInNewContext(fs.readFileSync(filename), sandbox, filename);\n      expect(sandbox.module.exports).toBe(unfetch);\n    });","file":"isomorphic.js","skipped":false,"dir":"test"},{"name":"should resolve to fetch when window.fetch exists","suites":["isomorphic-unfetch","\"main\" entry"],"updatePoint":{"line":52,"column":56,"index":1444},"line":52,"code":"    it('should resolve to fetch when window.fetch exists', () => {\n      function fetch() {\n        return this;\n      }\n\n      function unfetch() {}\n\n      let sandbox = {\n        process: undefined,\n        window: {\n          fetch\n        },\n        fetch,\n        exports: {},\n        require: () => unfetch\n      };\n      sandbox.global = sandbox.self = sandbox.window;\n      sandbox.module = {\n        exports: sandbox.exports\n      };\n\n      let filename = require.resolve('../packages/isomorphic-unfetch');\n\n      vm.runInNewContext(fs.readFileSync(filename), sandbox, filename);\n      expect(sandbox.module.exports).toBe(fetch);\n    });","file":"isomorphic.js","skipped":false,"dir":"test"},{"name":"should resolve to unfetch when window.fetch does not exist","suites":["isomorphic-unfetch","\"main\" entry"],"updatePoint":{"line":78,"column":66,"index":2101},"line":78,"code":"    it('should resolve to unfetch when window.fetch does not exist', () => {\n      function unfetch() {}\n\n      let sandbox = {\n        process: undefined,\n        window: {},\n        exports: {},\n        require: () => unfetch\n      };\n      sandbox.global = sandbox.self = sandbox.window;\n      sandbox.module = {\n        exports: sandbox.exports\n      };\n\n      let filename = require.resolve('../packages/isomorphic-unfetch');\n\n      vm.runInNewContext(fs.readFileSync(filename), sandbox, filename);\n      expect(sandbox.module.exports).toBe(unfetch);\n    });","file":"isomorphic.js","skipped":false,"dir":"test"},{"name":"should resolve to fetch when window.fetch exists","suites":["isomorphic-unfetch","\"main\" entry in NodeJS"],"updatePoint":{"line":99,"column":56,"index":2706},"line":99,"code":"    it('should resolve to fetch when window.fetch exists', () => {\n      function fetch() {\n        return this;\n      }\n\n      function unfetch() {}\n\n      let sandbox = {\n        process: {},\n        global: {\n          fetch\n        },\n        exports: {},\n        require: () => unfetch\n      };\n      sandbox.module = {\n        exports: sandbox.exports\n      };\n\n      let filename = require.resolve('../packages/isomorphic-unfetch');\n\n      vm.runInNewContext(fs.readFileSync(filename), sandbox, filename);\n      expect(sandbox.module.exports).toBe(fetch);\n    });","file":"isomorphic.js","skipped":false,"dir":"test"},{"name":"should resolve to unfetch when window.fetch does not exist","suites":["isomorphic-unfetch","\"main\" entry in NodeJS"],"updatePoint":{"line":123,"column":66,"index":3287},"line":123,"code":"    it('should resolve to unfetch when window.fetch does not exist', () => {\n      let modules = {\n        unfetch() {},\n\n        'node-fetch': function nodeFetch() {\n          return 'I AM NODE-FETCH';\n        }\n      };\n      let sandbox = {\n        process: {},\n        global: {},\n        exports: {},\n        require: module => modules[module]\n      };\n      sandbox.global.process = sandbox.process;\n      sandbox.module = {\n        exports: sandbox.exports\n      };\n\n      let filename = require.resolve('../packages/isomorphic-unfetch');\n\n      vm.runInNewContext(fs.readFileSync(filename), sandbox, filename);\n      expect(sandbox.module.exports('/')).toBe(modules['node-fetch']('/'));\n    });","file":"isomorphic.js","skipped":false,"dir":"test"},{"name":"should resolve to fetch when window.fetch exists","suites":["unfetch/polyfill"],"updatePoint":{"line":4,"column":54,"index":134},"line":4,"code":"  it('should resolve to fetch when window.fetch exists', () => {\n    function fetch() {}\n\n    let window = {\n      fetch,\n      require\n    };\n    window.window = window.global = window.self = window;\n\n    let filename = require.resolve('../polyfill/index.js');\n\n    vm.runInNewContext(fs.readFileSync(filename), window, 'polyfill-test.js');\n    expect(window.fetch).toBe(fetch);\n  });","file":"polyfill.js","skipped":false,"dir":"test"},{"name":"should resolve to unfetch when window.fetch does not exist","suites":["unfetch/polyfill"],"updatePoint":{"line":18,"column":64,"index":530},"line":18,"code":"  it('should resolve to unfetch when window.fetch does not exist', () => {\n    let window = {\n      require\n    };\n    window.window = window.global = window.self = window;\n\n    let filename = require.resolve('../polyfill/index.js');\n\n    vm.runInNewContext(fs.readFileSync(filename), window, 'polyfill-test.js');\n    expect(window.fetch).toEqual(expect.any(Function));\n    expect(window.fetch).toHaveLength(2);\n  });","file":"polyfill.js","skipped":false,"dir":"test"}]}