{"repo":"kazupon/vue-i18n","url":"https://github.com/kazupon/vue-i18n","branch":"v8.x","configs":[{"package":"vue-i18n","lang":"js","dir":"test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"should translate an english","suites":["basic","i18n#t","en locale"],"updatePoint":{"line":18,"column":37,"index":478},"line":18,"code":"      it('should translate an english', () => {\n        assert.strictEqual(i18n.t('message.hello'), messages.en.message.hello);\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should support empty string","suites":["basic","i18n#t","empty string"],"updatePoint":{"line":23,"column":37,"index":661},"line":23,"code":"      it('should support empty string', () => {\n        assert.strictEqual(i18n.t('message.empty'), messages.en.message.empty);\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should translate simple link","suites":["basic","i18n#t","linked translation"],"updatePoint":{"line":28,"column":38,"index":851},"line":28,"code":"      it('should translate simple link', () => {\n        assert.strictEqual(i18n.t('message.link'), messages.en.message.hello);\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should translate link at the end of locale","suites":["basic","i18n#t","linked translation"],"updatePoint":{"line":31,"column":52,"index":1003},"line":31,"code":"      it('should translate link at the end of locale', () => {\n        assert.strictEqual(i18n.t('message.linkEnd'), 'This is a linked translation to the world');\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should translate link within a locale","suites":["basic","i18n#t","linked translation"],"updatePoint":{"line":34,"column":47,"index":1171},"line":34,"code":"      it('should translate link within a locale', () => {\n        assert.strictEqual(i18n.t('message.linkWithin'), 'Isn\\'t the world we live in great?');\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should translate multiple links within a locale","suites":["basic","i18n#t","linked translation"],"updatePoint":{"line":37,"column":57,"index":1345},"line":37,"code":"      it('should translate multiple links within a locale', () => {\n        assert.strictEqual(i18n.t('message.linkMultiple'), 'Hello hoge!, isn\\'t the world great?');\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should translate link with braces ","suites":["basic","i18n#t","linked translation"],"updatePoint":{"line":40,"column":44,"index":1510},"line":40,"code":"      it('should translate link with braces ', () => {\n        assert.strictEqual(i18n.t('message.linkBrackets'), 'Hello hoge. Isn\\'t the world great?');\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should translate link with lower-case formatting","suites":["basic","i18n#t","linked translation"],"updatePoint":{"line":43,"column":58,"index":1688},"line":43,"code":"      it('should translate link with lower-case formatting', () => {\n        assert.strictEqual(i18n.t('message.linkCaseLower'), 'Please provide home address');\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should translate link with upper-case formatting","suites":["basic","i18n#t","linked translation"],"updatePoint":{"line":46,"column":58,"index":1859},"line":46,"code":"      it('should translate link with upper-case formatting', () => {\n        assert.strictEqual(i18n.t('message.linkCaseUpper'), 'HOME ADDRESS');\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should translate link with the first letter as upper-case","suites":["basic","i18n#t","linked translation"],"updatePoint":{"line":49,"column":67,"index":2024},"line":49,"code":"      it('should translate link with the first letter as upper-case', () => {\n        assert.strictEqual(i18n.t('message.linkCaseCapitalize'), 'Home Address');\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should translate link without formatting if modifier is not known.","suites":["basic","i18n#t","linked translation"],"updatePoint":{"line":52,"column":76,"index":2203},"line":52,"code":"      it('should translate link without formatting if modifier is not known.', () => {\n        assert.strictEqual(i18n.t('message.linkCaseUnknown'), 'home Address');\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should render link with custom formatting.","suites":["basic","i18n#t","linked translation"],"updatePoint":{"line":55,"column":52,"index":2355},"line":55,"code":"      it('should render link with custom formatting.', () => {\n        assert.strictEqual(i18n.t('message.linkCaseCustom'), 'hxmx Addrxss');\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should translate a japanese","suites":["basic","i18n#t","ja locale"],"updatePoint":{"line":60,"column":37,"index":2533},"line":60,"code":"      it('should translate a japanese', () => {\n        assert.strictEqual(i18n.t('message.hello', 'ja'), messages.ja.message.hello);\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return empty string","suites":["basic","i18n#t","key argument","not specify"],"updatePoint":{"line":66,"column":38,"index":2761},"line":66,"code":"        it('should return empty string', () => {\n          assert.strictEqual(i18n.t(), '');\n        });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return empty string","suites":["basic","i18n#t","key argument","empty string"],"updatePoint":{"line":71,"column":38,"index":2915},"line":71,"code":"        it('should return empty string', () => {\n          assert.strictEqual(i18n.t(''), '');\n        });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return key string","suites":["basic","i18n#t","key argument","not regist key"],"updatePoint":{"line":76,"column":36,"index":3071},"line":76,"code":"        it('should return key string', () => {\n          assert.strictEqual(i18n.t('foo.bar'), 'foo.bar');\n        });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should translate fragment","suites":["basic","i18n#t","key argument","sentence fragment"],"updatePoint":{"line":81,"column":37,"index":3245},"line":81,"code":"        it('should translate fragment', () => {\n          assert.strictEqual(i18n.t('hello world'), 'Hello World');\n        });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return replaced string if available","suites":["basic","i18n#t","key argument","sentence fragment"],"updatePoint":{"line":84,"column":54,"index":3390},"line":84,"code":"        it('should return replaced string if available', () => {\n          assert.strictEqual(i18n.t('Hello {0}', ['kazupon']), 'Hello kazupon');\n        });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return key if unavailable","suites":["basic","i18n#t","key argument","sentence fragment"],"updatePoint":{"line":87,"column":44,"index":3538},"line":87,"code":"        it('should return key if unavailable', () => {\n          assert.strictEqual(i18n.t('Hello'), 'Hello');\n        });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should be translated","suites":["basic","i18n#t","key argument","object keypath"],"updatePoint":{"line":92,"column":32,"index":3700},"line":92,"code":"        it('should be translated', () => {\n          assert.strictEqual(i18n.t('message.format'), messages.en.message.format);\n        });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should be translated if keypath contains spaces","suites":["basic","i18n#t","key argument","object keypath"],"updatePoint":{"line":95,"column":59,"index":3866},"line":95,"code":"        it('should be translated if keypath contains spaces', () => {\n          assert.strictEqual(i18n.t('message.Hello {0}', ['kazupon']), 'Hello kazupon');\n        });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should be translated","suites":["basic","i18n#t","key argument","array keypath","basic"],"updatePoint":{"line":101,"column":34,"index":4096},"line":101,"code":"          it('should be translated', () => {\n            assert.strictEqual(i18n.t('errors[0]'), messages.en.errors[0]);\n          });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should be translated","suites":["basic","i18n#t","key argument","array keypath","object attribute"],"updatePoint":{"line":106,"column":34,"index":4288},"line":106,"code":"          it('should be translated', () => {\n            assert.strictEqual(i18n.t('errors[1].internal1'), messages.en.errors[1].internal1);\n          });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should be translated","suites":["basic","i18n#t","key argument","array keypath","object"],"updatePoint":{"line":111,"column":34,"index":4490},"line":111,"code":"          it('should be translated', () => {\n            assert.strictEqual(i18n.t('errors[1]'), messages.en.errors[1]);\n          });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should be translated","suites":["basic","i18n#t","key argument","array keypath","array"],"updatePoint":{"line":116,"column":34,"index":4671},"line":116,"code":"          it('should be translated', () => {\n            assert.strictEqual(i18n.t('errors[2][0]'), messages.en.errors[2][0]);\n          });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return replaced string","suites":["basic","i18n#t","format arguments","named"],"updatePoint":{"line":124,"column":41,"index":4922},"line":124,"code":"        it('should return replaced string', () => {\n          assert.strictEqual(i18n.t('message.format.named', {\n            name: 'kazupon'\n          }), 'Hello kazupon, how are you?');\n        });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return replaced string","suites":["basic","i18n#t","format arguments","list"],"updatePoint":{"line":131,"column":41,"index":5163},"line":131,"code":"        it('should return replaced string', () => {\n          assert.strictEqual(i18n.t('message.format.list', ['kazupon']), 'Hello kazupon, how are you?');\n        });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return replaced string","suites":["basic","i18n#t","format arguments of fallback","if activated","named"],"updatePoint":{"line":139,"column":43,"index":5478},"line":139,"code":"          it('should return replaced string', () => {\n            i18n = new VueI18n({\n              locale: 'en',\n              fallbackLocale: 'en',\n              formatFallbackMessages: true\n            });\n            assert.strictEqual(i18n.t('Hello {name}, how are you?', {\n              name: 'kazupon'\n            }), 'Hello kazupon, how are you?');\n          });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return replaced string","suites":["basic","i18n#t","format arguments of fallback","if activated","list"],"updatePoint":{"line":151,"column":43,"index":5895},"line":151,"code":"          it('should return replaced string', () => {\n            i18n = new VueI18n({\n              locale: 'en',\n              fallbackLocale: 'en',\n              formatFallbackMessages: true\n            });\n            assert.strictEqual(i18n.t('Hello {0}, how are you?', ['kazupon']), 'Hello kazupon, how are you?');\n          });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should not return replaced string","suites":["basic","i18n#t","format arguments of fallback","if not activated","named"],"updatePoint":{"line":163,"column":47,"index":6333},"line":163,"code":"          it('should not return replaced string', () => {\n            assert.strictEqual(i18n.t('Hello {name}, how are you?', {\n              name: 'kazupon'\n            }), 'Hello {name}, how are you?');\n          });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should not return replaced string","suites":["basic","i18n#t","format arguments of fallback","if not activated","list"],"updatePoint":{"line":170,"column":47,"index":6597},"line":170,"code":"          it('should not return replaced string', () => {\n            assert.strictEqual(i18n.t('Hello {0}, how are you?', ['kazupon']), 'Hello {0}, how are you?');\n          });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return empty string","suites":["basic","i18n#t","locale argument"],"updatePoint":{"line":177,"column":36,"index":6835},"line":177,"code":"      it('should return empty string', () => {\n        assert.strictEqual(i18n.t('message.hello', 'ja'), messages.ja.message.hello);\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return replaced string","suites":["basic","i18n#t","format & locale arguments"],"updatePoint":{"line":182,"column":39,"index":7039},"line":182,"code":"      it('should return replaced string', () => {\n        assert.strictEqual(i18n.t('message.format.list', 'ja', ['kazupon']), 'こんにちは kazupon, ごきげんいかが？');\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return fallback string","suites":["basic","i18n#t","fallback"],"updatePoint":{"line":187,"column":39,"index":7245},"line":187,"code":"      it('should return fallback string', () => {\n        assert.strictEqual(i18n.t('message.fallback', 'ja'), messages.en.message.fallback);\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should be choice singluar","suites":["basic","i18n#tc","default choice"],"updatePoint":{"line":194,"column":35,"index":7476},"line":194,"code":"      it('should be choice singluar', () => {\n        assert.strictEqual(i18n.tc('plurals.apple'), 'one apple');\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should allow a zero choice, a one choice and a plural choice","suites":["basic","i18n#tc","split plural with zero choice"],"updatePoint":{"line":199,"column":70,"index":7696},"line":199,"code":"      it('should allow a zero choice, a one choice and a plural choice', () => {\n        const count = 10;\n        assert.strictEqual(i18n.tc('plurals.apple', 0), 'no apples');\n        assert.strictEqual(i18n.tc('plurals.apple', 1), 'one apple');\n        assert.strictEqual(i18n.tc('plurals.apple', count, {\n          count\n        }), '10 apples');\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should expose \"count\" implicitly to locale message","suites":["basic","i18n#tc","implicit choice exposing","en locale"],"updatePoint":{"line":210,"column":62,"index":8141},"line":210,"code":"        it('should expose \"count\" implicitly to locale message', () => {\n          assert.strictEqual(i18n.tc('plurals.apple', 10), '10 apples');\n        });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should not expose if given explicitly","suites":["basic","i18n#tc","implicit choice exposing","en locale"],"updatePoint":{"line":213,"column":49,"index":8286},"line":213,"code":"        it('should not expose if given explicitly', () => {\n          const explicitArgs = {\n            'count': 'Many'\n          };\n          assert.strictEqual(i18n.tc('plurals.apple', 10, explicitArgs), 'Many apples');\n        });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should expose \"count\" and \"n\" implicitly to locale message","suites":["basic","i18n#tc","implicit choice exposing","ja locale"],"updatePoint":{"line":221,"column":70,"index":8588},"line":221,"code":"        it('should expose \"count\" and \"n\" implicitly to locale message', () => {\n          assert.strictEqual(i18n.tc('plurals.implicitPluralCount', 10, 'ja'), 'count:10, n:10');\n        });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should not expose if given explicitly","suites":["basic","i18n#tc","implicit choice exposing","ja locale"],"updatePoint":{"line":224,"column":49,"index":8758},"line":224,"code":"        it('should not expose if given explicitly', () => {\n          const explicitArgs = {\n            'count': 'たくさん',\n            'n': '大量'\n          };\n          assert.strictEqual(i18n.tc('plurals.implicitPluralCount', 10, 'ja', explicitArgs), 'count:たくさん, n:大量');\n        });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should translate an english","suites":["basic","i18n#tc","en locale"],"updatePoint":{"line":234,"column":37,"index":9081},"line":234,"code":"      it('should translate an english', () => {\n        assert.strictEqual(i18n.tc('plurals.car', 1), 'car');\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should fetch pluralized string","suites":["basic","i18n#tc","multi plural check"],"updatePoint":{"line":239,"column":40,"index":9255},"line":239,"code":"      it('should fetch pluralized string', () => {\n        assert.strictEqual(i18n.tc('plurals.car', 2), 'cars');\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should translate a japanese","suites":["basic","i18n#tc","ja locale"],"updatePoint":{"line":244,"column":37,"index":9418},"line":244,"code":"      it('should translate a japanese', () => {\n        assert.strictEqual(i18n.tc('plurals.car', 1, 'ja'), 'ザ・ワールド');\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return empty string","suites":["basic","i18n#tc","key argument","not specify"],"updatePoint":{"line":250,"column":38,"index":9631},"line":250,"code":"        it('should return empty string', () => {\n          assert.strictEqual(i18n.tc(), '');\n        });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return empty string","suites":["basic","i18n#tc","key argument","empty string"],"updatePoint":{"line":255,"column":38,"index":9786},"line":255,"code":"        it('should return empty string', () => {\n          assert.strictEqual(i18n.tc(''), '');\n        });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return key string","suites":["basic","i18n#tc","key argument","not regist key"],"updatePoint":{"line":260,"column":36,"index":9943},"line":260,"code":"        it('should return key string', () => {\n          assert.strictEqual(i18n.tc('foo.bar'), 'foo.bar');\n        });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should translate fragment","suites":["basic","i18n#tc","key argument","sentence fragment"],"updatePoint":{"line":265,"column":37,"index":10118},"line":265,"code":"        it('should translate fragment', () => {\n          assert.strictEqual(i18n.tc('hello world'), 'Hello World');\n        });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return replaced string if available","suites":["basic","i18n#tc","key argument","sentence fragment"],"updatePoint":{"line":268,"column":54,"index":10264},"line":268,"code":"        it('should return replaced string if available', () => {\n          assert.strictEqual(i18n.tc('Hello {0}', 1, ['kazupon']), 'Hello kazupon');\n        });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return key if unavailable","suites":["basic","i18n#tc","key argument","sentence fragment"],"updatePoint":{"line":271,"column":44,"index":10416},"line":271,"code":"        it('should return key if unavailable', () => {\n          assert.strictEqual(i18n.tc('Hello'), 'Hello');\n        });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return replaced string","suites":["basic","i18n#tc","format arguments","named"],"updatePoint":{"line":278,"column":41,"index":10628},"line":278,"code":"        it('should return replaced string', () => {\n          assert.strictEqual(i18n.tc('plurals.format.named', 1, {\n            name: 'kazupon'\n          }), 'Hello kazupon, how are you?');\n        });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return replaced string","suites":["basic","i18n#tc","format arguments","list"],"updatePoint":{"line":285,"column":41,"index":10873},"line":285,"code":"        it('should return replaced string', () => {\n          assert.strictEqual(i18n.tc('plurals.format.list', 1, ['kazupon']), 'Hello kazupon, how are you?');\n        });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return empty string","suites":["basic","i18n#tc","locale argument"],"updatePoint":{"line":291,"column":36,"index":11099},"line":291,"code":"      it('should return empty string', () => {\n        assert.strictEqual(i18n.tc('plurals.car', 1, 'ja'), 'ザ・ワールド');\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return replaced string","suites":["basic","i18n#tc","format & locale arguments"],"updatePoint":{"line":296,"column":39,"index":11288},"line":296,"code":"      it('should return replaced string', () => {\n        assert.strictEqual(i18n.tc('plurals.format.list', 1, 'ja', ['kazupon']), 'こんにちは kazupon, ごきげんいかが？');\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return fallback string","suites":["basic","i18n#tc","fallback"],"updatePoint":{"line":301,"column":39,"index":11498},"line":301,"code":"      it('should return fallback string', () => {\n        assert.strictEqual(i18n.tc('plurals.fallback', 1, 'ja'), 'これはフォールバック');\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return true","suites":["basic","i18n#te","existing key"],"updatePoint":{"line":308,"column":28,"index":11708},"line":308,"code":"      it('should return true', () => {\n        assert(i18n.te('message.hello') === true);\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return true with locale","suites":["basic","i18n#te","existing key"],"updatePoint":{"line":311,"column":40,"index":11820},"line":311,"code":"      it('should return true with locale', () => {\n        assert(i18n.te('message.hello', 'ja') === true);\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return false","suites":["basic","i18n#te","not existing key"],"updatePoint":{"line":316,"column":29,"index":11976},"line":316,"code":"      it('should return false', () => {\n        assert(i18n.te('message.hallo') === false);\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return false with locale","suites":["basic","i18n#te","not existing key"],"updatePoint":{"line":319,"column":41,"index":12090},"line":319,"code":"      it('should return false with locale', () => {\n        assert(i18n.te('message.hello', 'xx') === false);\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should translate an english","suites":["basic","$t","en locale"],"updatePoint":{"line":326,"column":37,"index":12279},"line":326,"code":"      it('should translate an english', () => {\n        const vm = new Vue({\n          i18n\n        });\n        assert.strictEqual(vm.$t('message.hello'), messages.en.message.hello);\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should translate a japanese","suites":["basic","$t","ja locale"],"updatePoint":{"line":334,"column":37,"index":12514},"line":334,"code":"      it('should translate a japanese', () => {\n        const vm = new Vue({\n          i18n\n        });\n        assert.strictEqual(vm.$t('message.hello', 'ja'), messages.ja.message.hello);\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return empty string","suites":["basic","$t","key argument","not specify"],"updatePoint":{"line":343,"column":38,"index":12797},"line":343,"code":"        it('should return empty string', () => {\n          const vm = new Vue({\n            i18n\n          });\n          assert.strictEqual(vm.$t(), '');\n        });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return empty string","suites":["basic","$t","key argument","empty string"],"updatePoint":{"line":351,"column":38,"index":13012},"line":351,"code":"        it('should return empty string', () => {\n          const vm = new Vue({\n            i18n\n          });\n          assert.strictEqual(vm.$t(''), '');\n        });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return key string","suites":["basic","$t","key argument","not regist key"],"updatePoint":{"line":359,"column":36,"index":13229},"line":359,"code":"        it('should return key string', () => {\n          const vm = new Vue({\n            i18n\n          });\n          assert.strictEqual(vm.$t('foo.bar'), 'foo.bar');\n        });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should translate fragment","suites":["basic","$t","key argument","sentence fragment"],"updatePoint":{"line":367,"column":37,"index":13464},"line":367,"code":"        it('should translate fragment', () => {\n          const vm = new Vue({\n            i18n\n          });\n          assert.strictEqual(vm.$t('hello world'), 'Hello World');\n        });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return replaced string if available","suites":["basic","$t","key argument","sentence fragment"],"updatePoint":{"line":373,"column":54,"index":13670},"line":373,"code":"        it('should return replaced string if available', () => {\n          const vm = new Vue({\n            i18n\n          });\n          assert.strictEqual(vm.$t('Hello {0}', ['kazupon']), 'Hello kazupon');\n        });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return key if unavailable","suites":["basic","$t","key argument","sentence fragment"],"updatePoint":{"line":379,"column":44,"index":13879},"line":379,"code":"        it('should return key if unavailable', () => {\n          const vm = new Vue({\n            i18n\n          });\n          assert.strictEqual(vm.$t('Hello'), 'Hello');\n        });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return replaced string","suites":["basic","$t","format arguments","named"],"updatePoint":{"line":389,"column":41,"index":14151},"line":389,"code":"        it('should return replaced string', () => {\n          const vm = new Vue({\n            i18n\n          });\n          assert.strictEqual(vm.$t('message.format.named', {\n            name: 'kazupon'\n          }), 'Hello kazupon, how are you?');\n        });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return replaced string","suites":["basic","$t","format arguments","list"],"updatePoint":{"line":399,"column":41,"index":14453},"line":399,"code":"        it('should return replaced string', () => {\n          const vm = new Vue({\n            i18n\n          });\n          assert.strictEqual(vm.$t('message.format.list', ['kazupon']), 'Hello kazupon, how are you?');\n        });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return empty string","suites":["basic","$t","locale argument"],"updatePoint":{"line":408,"column":36,"index":14736},"line":408,"code":"      it('should return empty string', () => {\n        const vm = new Vue({\n          i18n\n        });\n        assert.strictEqual(vm.$t('message.hello', 'ja'), messages.ja.message.hello);\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return replaced string","suites":["basic","$t","format & locale arguments"],"updatePoint":{"line":416,"column":39,"index":14995},"line":416,"code":"      it('should return replaced string', () => {\n        const vm = new Vue({\n          i18n\n        });\n        assert.strictEqual(vm.$t('message.format.list', 'ja', ['kazupon']), 'こんにちは kazupon, ごきげんいかが？');\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return fallback string","suites":["basic","$t","fallback"],"updatePoint":{"line":424,"column":39,"index":15256},"line":424,"code":"      it('should return fallback string', () => {\n        const vm = new Vue({\n          i18n\n        });\n        assert.strictEqual(vm.$t('message.fallback', 'ja'), messages.en.message.fallback);\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should translate plural english","suites":["basic","$tc","en locale"],"updatePoint":{"line":434,"column":41,"index":15539},"line":434,"code":"      it('should translate plural english', () => {\n        const vm = new Vue({\n          i18n\n        });\n        assert.strictEqual(vm.$tc('plurals.car', 1), 'car');\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should fetch pluralized string","suites":["basic","$tc","multi plural check"],"updatePoint":{"line":442,"column":40,"index":15768},"line":442,"code":"      it('should fetch pluralized string', () => {\n        const vm = new Vue({\n          i18n\n        });\n        assert.strictEqual(vm.$tc('plurals.car', 2), 'cars');\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return empty string","suites":["basic","$tc","key argument","not specify"],"updatePoint":{"line":451,"column":38,"index":16028},"line":451,"code":"        it('should return empty string', () => {\n          const vm = new Vue({\n            i18n\n          });\n          assert.strictEqual(vm.$tc(), '');\n        });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return empty string","suites":["basic","$tc","key argument","empty string"],"updatePoint":{"line":459,"column":38,"index":16244},"line":459,"code":"        it('should return empty string', () => {\n          const vm = new Vue({\n            i18n\n          });\n          assert.strictEqual(vm.$tc(''), '');\n        });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return key string","suites":["basic","$tc","key argument","not regist key"],"updatePoint":{"line":467,"column":36,"index":16462},"line":467,"code":"        it('should return key string', () => {\n          const vm = new Vue({\n            i18n\n          });\n          assert.strictEqual(vm.$tc('foo.bar'), 'foo.bar');\n        });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should translate fragment","suites":["basic","$tc","key argument","sentence fragment"],"updatePoint":{"line":475,"column":37,"index":16698},"line":475,"code":"        it('should translate fragment', () => {\n          const vm = new Vue({\n            i18n\n          });\n          assert.strictEqual(vm.$tc('hello world'), 'Hello World');\n        });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return replaced string if available","suites":["basic","$tc","key argument","sentence fragment"],"updatePoint":{"line":481,"column":54,"index":16905},"line":481,"code":"        it('should return replaced string if available', () => {\n          const vm = new Vue({\n            i18n\n          });\n          assert.strictEqual(vm.$tc('Hello {0}', 1, ['kazupon']), 'Hello kazupon');\n        });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return key if unavailable","suites":["basic","$tc","key argument","sentence fragment"],"updatePoint":{"line":487,"column":44,"index":17118},"line":487,"code":"        it('should return key if unavailable', () => {\n          const vm = new Vue({\n            i18n\n          });\n          assert.strictEqual(vm.$tc('Hello'), 'Hello');\n        });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return replaced string","suites":["basic","$tc","format arguments","named"],"updatePoint":{"line":497,"column":41,"index":17391},"line":497,"code":"        it('should return replaced string', () => {\n          const vm = new Vue({\n            i18n\n          });\n          assert.strictEqual(vm.$tc('plurals.format.named', 1, {\n            name: 'kazupon'\n          }), 'Hello kazupon, how are you?');\n        });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return replaced string","suites":["basic","$tc","format arguments","list"],"updatePoint":{"line":507,"column":41,"index":17697},"line":507,"code":"        it('should return replaced string', () => {\n          const vm = new Vue({\n            i18n\n          });\n          assert.strictEqual(vm.$tc('plurals.format.list', 1, ['kazupon']), 'Hello kazupon, how are you?');\n        });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return empty string","suites":["basic","$tc","locale argument"],"updatePoint":{"line":516,"column":36,"index":17984},"line":516,"code":"      it('should return empty string', () => {\n        const vm = new Vue({\n          i18n\n        });\n        assert.strictEqual(vm.$tc('plurals.car', 1, 'ja'), 'ザ・ワールド');\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return replaced string","suites":["basic","$tc","format & locale arguments"],"updatePoint":{"line":524,"column":39,"index":18228},"line":524,"code":"      it('should return replaced string', () => {\n        const vm = new Vue({\n          i18n\n        });\n        assert.strictEqual(vm.$tc('plurals.format.list', 1, 'ja', ['kazupon']), 'こんにちは kazupon, ごきげんいかが？');\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return fallback string","suites":["basic","$tc","fallback"],"updatePoint":{"line":532,"column":39,"index":18493},"line":532,"code":"      it('should return fallback string', () => {\n        const vm = new Vue({\n          i18n\n        });\n        assert.strictEqual(vm.$tc('plurals.fallback', 2, 'ja'), 'ザ・ワールド');\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return true","suites":["basic","$te","existing key"],"updatePoint":{"line":542,"column":28,"index":18750},"line":542,"code":"      it('should return true', () => {\n        const vm = new Vue({\n          i18n\n        });\n        assert(vm.$te('message.hello') === true);\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return true with locale","suites":["basic","$te","existing key"],"updatePoint":{"line":548,"column":40,"index":18917},"line":548,"code":"      it('should return true with locale', () => {\n        const vm = new Vue({\n          i18n\n        });\n        assert(vm.$te('message.hello', 'ja') === true);\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return false","suites":["basic","$te","not existing key"],"updatePoint":{"line":556,"column":29,"index":19128},"line":556,"code":"      it('should return false', () => {\n        const vm = new Vue({\n          i18n\n        });\n        assert(vm.$te('message.hallo') === false);\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return false with locale","suites":["basic","$te","not existing key"],"updatePoint":{"line":562,"column":41,"index":19297},"line":562,"code":"      it('should return false with locale', () => {\n        const vm = new Vue({\n          i18n\n        });\n        assert(vm.$te('message.hello', 'xx') === false);\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should be reactivity translate","suites":["basic","i18n#locale"],"updatePoint":{"line":576,"column":38,"index":19639},"line":576,"code":"    it('should be reactivity translate', done => {\n      const vm = new Vue({\n        el,\n        i18n,\n\n        render(h) {\n          return h('p', {}, [this.$t('message.hello')]);\n        }\n\n      });\n      Vue.nextTick().then(() => {\n        assert.strictEqual(vm.$el.textContent, messages.en.message.hello);\n        i18n.locale = 'ja'; // set japanese\n      }).then(() => {\n        assert.strictEqual(vm.$el.textContent, messages.ja.message.hello);\n      }).then(done);\n    });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should be reactivity translate","suites":["basic","i18n#fallbackLocale"],"updatePoint":{"line":600,"column":38,"index":20291},"line":600,"code":"    it('should be reactivity translate', done => {\n      const vm = new Vue({\n        el,\n        i18n,\n\n        render(h) {\n          return h('p', {}, [this.$t('message.fallback1')]);\n        }\n\n      });\n      Vue.nextTick().then(() => {\n        assert.strictEqual(vm.$el.textContent, 'message.fallback1');\n        i18n.fallbackLocale = 'ja'; // set fallback locale\n      }).then(() => {\n        assert.strictEqual(vm.$el.textContent, messages.ja.message.fallback1);\n      }).then(done);\n    });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should return locales defined in messages in lexical order","suites":["basic","i18n#availableLocales"],"updatePoint":{"line":619,"column":66,"index":20868},"line":619,"code":"    it('should return locales defined in messages in lexical order', () => {\n      assert.deepStrictEqual(i18n.availableLocales, ['en', 'ja']);\n    });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should be formatted","suites":["basic","arguments nothing"],"updatePoint":{"line":635,"column":29,"index":21351},"line":635,"code":"      it('should be formatted', () => {\n        assert.strictEqual(i18n.d(dt), '12/20/2012');\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should be formatted","suites":["basic","number value"],"updatePoint":{"line":640,"column":29,"index":21500},"line":640,"code":"      it('should be formatted', () => {\n        assert.strictEqual(i18n.d(dt.getTime()), '12/20/2012');\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should be formatted","suites":["basic","key argument"],"updatePoint":{"line":646,"column":41,"index":21754},"line":646,"code":"      isChrome && it('should be formatted', () => {\n        assert.strictEqual(i18n.d(dt, 'short'), '12/19/2012, 10:00 PM');\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should be formatted","suites":["basic","locale argument","with second argument"],"updatePoint":{"line":653,"column":43,"index":22071},"line":653,"code":"        isChrome && it('should be formatted', () => {\n          assert.strictEqual(i18n.d(dt, 'short', 'ja-JP'), '2012/12/20 12:00');\n        });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should be formatted","suites":["basic","locale argument","with object argument"],"updatePoint":{"line":659,"column":43,"index":22359},"line":659,"code":"        isChrome && it('should be formatted', () => {\n          assert.strictEqual(i18n.d(dt, {\n            key: 'short',\n            locale: 'ja-JP'\n          }), '2012/12/20 12:00');\n        });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should be formatted","suites":["basic","fallback"],"updatePoint":{"line":669,"column":41,"index":22688},"line":669,"code":"      isChrome && it('should be formatted', () => {\n        assert.strictEqual(i18n.d(dt, 'long'), '2012/12/20 12:00:00');\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should be formatted","suites":["basic","arguments nothing"],"updatePoint":{"line":686,"column":29,"index":23147},"line":686,"code":"      it('should be formatted', () => {\n        assert.strictEqual(i18n.n(money), '10,100');\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should be formatted","suites":["basic","key argument"],"updatePoint":{"line":691,"column":29,"index":23295},"line":691,"code":"      it('should be formatted', () => {\n        assert.strictEqual(i18n.n(money, 'currency'), '$10,100.00');\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should be formatted","suites":["basic","locale argument","with second argument"],"updatePoint":{"line":697,"column":31,"index":23511},"line":697,"code":"        it('should be formatted', () => {\n          assert.strictEqual(i18n.n(money, 'currency', 'ja-JP'), '￥10,100');\n        });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should be formatted","suites":["basic","locale argument","with object argument"],"updatePoint":{"line":702,"column":31,"index":23699},"line":702,"code":"        it('should be formatted', () => {\n          assert.strictEqual(i18n.n(money, {\n            key: 'currency',\n            locale: 'ja-JP'\n          }), '￥10,100');\n        });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should be formatted","suites":["basic","explicit options argument","without key"],"updatePoint":{"line":712,"column":31,"index":23987},"line":712,"code":"        it('should be formatted', () => {\n          assert.strictEqual(i18n.n(money, {\n            style: 'currency',\n            currency: 'JPY'\n          }), '¥10,100');\n        });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should respect other number options","suites":["basic","explicit options argument","without key"],"updatePoint":{"line":718,"column":47,"index":24187},"line":718,"code":"        it('should respect other number options', () => {\n          const options = {\n            style: 'currency',\n            currency: 'EUR',\n            currencyDisplay: 'symbol'\n          };\n          assert.strictEqual(i18n.n(money, options), '€10,100.00');\n        });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should be formatted","suites":["basic","explicit options argument","with key"],"updatePoint":{"line":728,"column":31,"index":24493},"line":728,"code":"        it('should be formatted', () => {\n          assert.strictEqual(i18n.n(money, {\n            key: 'currency',\n            currency: 'JPY'\n          }), '¥10,100');\n        });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should respect other number options","suites":["basic","explicit options argument","with key"],"updatePoint":{"line":734,"column":47,"index":24691},"line":734,"code":"        it('should respect other number options', () => {\n          const options = {\n            key: 'currency',\n            currency: 'EUR',\n            currencyDisplay: 'symbol'\n          };\n          assert.strictEqual(i18n.n(money, options), '€10,100.00');\n        });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should be formatted","suites":["basic","fallback"],"updatePoint":{"line":745,"column":29,"index":24999},"line":745,"code":"      it('should be formatted', () => {\n        assert.strictEqual(i18n.n(0.9, 'percent'), '90%');\n      });","file":"unit/basic.test.js","skipped":false,"dir":"test"},{"name":"should be translated","suites":["component translation"],"updatePoint":{"line":131,"column":26,"index":3103},"line":131,"code":"  it('should be translated', done => {\n    const root = vm.$refs.who;\n    const child1 = vm.$refs.child1.$refs.who;\n    const child1Fallback = vm.$refs.child1.$refs.fallback;\n    const child1DateTime = vm.$refs.child1.$refs.datetime;\n    const child1Number = vm.$refs.child1.$refs.number;\n    const child1Shared = vm.$refs.child1.$refs.shared;\n    const child2 = vm.$refs.child2.$refs.who;\n    const subChild1 = vm.$refs.child1.$refs['sub-child1'].$refs.who;\n    const subChild2 = vm.$refs.child2.$refs['sub-child2'].$refs.who;\n    assert.strictEqual(root.textContent, 'ルート');\n    assert.strictEqual(child1.textContent, 'child1');\n    assert.strictEqual(child1Fallback.textContent, 'フォールバック'); // NOTE: avoid webkit(phatomjs/safari) & Intl polyfill wired localization...\n\n    isChrome && assert.strictEqual(child1DateTime.textContent, '12/19/2012, 10:00 PM');\n    isChrome && assert.strictEqual(child1Number.textContent, '$101.00');\n    assert.strictEqual(child1Shared.textContent, 'bar');\n    assert.strictEqual(child2.textContent, 'ルート');\n    assert.strictEqual(subChild1.textContent, 'ルート');\n    assert.strictEqual(subChild2.textContent, 'サブの子2'); // change locale\n\n    i18n.locale = 'en-US';\n    vm.$refs.child1.$i18n.locale = 'ja-JP';\n    Vue.nextTick().then(() => {\n      assert.strictEqual(root.textContent, 'root');\n      assert.strictEqual(child1.textContent, '子1');\n      assert.strictEqual(child1Fallback.textContent, 'fallback'); // NOTE: avoid webkit(phatomjs/safari) & Intl polyfill wired localization...\n\n      isChrome && assert.strictEqual(child1DateTime.textContent, '2012/12/20 12:00');\n      isChrome && assert.strictEqual(child1Number.textContent, '￥101');\n      assert.strictEqual(child2.textContent, 'root');\n      assert.strictEqual(subChild1.textContent, 'root');\n      assert.strictEqual(subChild2.textContent, 'sub-child2');\n      vm.$destroy();\n    }).then(done);\n  });","file":"unit/component.test.js","skipped":false,"dir":"test"},{"name":"fallbackRootWithEmptyString default to be true","suites":["component translation"],"updatePoint":{"line":167,"column":52,"index":5027},"line":167,"code":"  it('fallbackRootWithEmptyString default to be true', done => {\n    const el = document.createElement('div');\n    let vm = new Vue({\n      i18n,\n      components: {\n        child: {\n          // translation with component\n          i18n: {\n            locale: 'en-US',\n            sync: false,\n            messages: {\n              'en-US': {\n                who: 'child'\n              },\n              'ja-JP': {\n                who: '子'\n              }\n            }\n          },\n          components: {\n            'sub-child': {\n              // translation with root\n              i18n: {\n                locale: 'ja-JP',\n                sync: false,\n                messages: {\n                  'en-US': {\n                    who: 'sub-child'\n                  },\n                  'ja-JP': {\n                    who: ''\n                  }\n                },\n                sharedMessages: {\n                  // shared messages for child1 component\n                  'en-US': {\n                    foo: {\n                      bar: 'bar'\n                    }\n                  },\n                  'ja-JP': {\n                    foo: {\n                      bar: 'バー'\n                    }\n                  }\n                }\n              },\n\n              render(h) {\n                return h('div', {}, [h('p', {\n                  ref: 'who'\n                }, [this.$t('who')])]);\n              }\n\n            }\n          },\n\n          render(h) {\n            return h('div', {}, [h('p', {\n              ref: 'who'\n            }, [this.$t('who')]), h('sub-child', {\n              ref: 'sub-child'\n            })]);\n          }\n\n        }\n      },\n\n      render(h) {\n        return h('div', {}, [h('p', {\n          ref: 'who'\n        }, [this.$t('who')]), h('child', {\n          ref: 'child'\n        })]);\n      }\n\n    }).$mount(el);\n    Vue.nextTick().then(() => {\n      assert.strictEqual(vm.$refs.child.$refs['sub-child'].$refs.who.textContent, 'ルート');\n    }).then(done);\n  });","file":"unit/component.test.js","skipped":false,"dir":"test"},{"name":"fallbackRootWithEmptyString should work when set to false","suites":["component translation"],"updatePoint":{"line":248,"column":63,"index":7036},"line":248,"code":"  it('fallbackRootWithEmptyString should work when set to false', done => {\n    const el = document.createElement('div');\n    let vm = new Vue({\n      i18n,\n      components: {\n        child: {\n          // translation with component\n          i18n: {\n            locale: 'en-US',\n            sync: false,\n            messages: {\n              'en-US': {\n                who: 'child'\n              },\n              'ja-JP': {\n                who: '子'\n              }\n            }\n          },\n          components: {\n            'sub-child': {\n              // translation with root\n              i18n: {\n                locale: 'ja-JP',\n                sync: false,\n                fallbackRootWithEmptyString: false,\n                messages: {\n                  'en-US': {\n                    who: 'sub-child'\n                  },\n                  'ja-JP': {\n                    who: ''\n                  }\n                },\n                sharedMessages: {\n                  // shared messages for child1 component\n                  'en-US': {\n                    foo: {\n                      bar: 'bar'\n                    }\n                  },\n                  'ja-JP': {\n                    foo: {\n                      bar: 'バー'\n                    }\n                  }\n                }\n              },\n\n              render(h) {\n                return h('div', {}, [h('p', {\n                  ref: 'who'\n                }, [this.$t('who')])]);\n              }\n\n            }\n          },\n\n          render(h) {\n            return h('div', {}, [h('p', {\n              ref: 'who'\n            }, [this.$t('who')]), h('sub-child', {\n              ref: 'sub-child'\n            })]);\n          }\n\n        }\n      },\n\n      render(h) {\n        return h('div', {}, [h('p', {\n          ref: 'who'\n        }, [this.$t('who')]), h('child', {\n          ref: 'child'\n        })]);\n      }\n\n    }).$mount(el);\n    Vue.nextTick().then(() => {\n      assert.strictEqual(vm.$refs.child.$refs['sub-child'].$refs.who.textContent, '');\n    }).then(done);\n  });","file":"unit/component.test.js","skipped":false,"dir":"test"},{"name":"should be translated","suites":["custom blocks","json string"],"updatePoint":{"line":17,"column":28,"index":307},"line":17,"code":"    it('should be translated', done => {\n      const el = document.createElement('div');\n      const vm = new Vue({\n        i18n,\n        components: {\n          child: {\n            __i18n: [JSON.stringify({\n              en: {\n                who: 'child'\n              },\n              ja: {\n                who: '子'\n              }\n            })],\n\n            render(h) {\n              return h('div', {}, [h('p', {\n                ref: 'who'\n              }, [this.$t('who')])]);\n            }\n\n          }\n        },\n\n        render(h) {\n          return h('div', {}, [h('child', {\n            ref: 'child'\n          })]);\n        }\n\n      }).$mount(el);\n      Vue.nextTick().then(() => {\n        assert.strictEqual(vm.$refs.child.$refs.who.textContent, '子');\n        i18n.locale = 'en';\n      }).then(() => {\n        assert.strictEqual(vm.$refs.child.$refs.who.textContent, 'child');\n      }).then(done);\n    });","file":"unit/custom_blocks.test.js","skipped":false,"dir":"test"},{"name":"should be fallbacked translation","suites":["custom blocks","invalid json string"],"updatePoint":{"line":57,"column":40,"index":1289},"line":57,"code":"    it('should be fallbacked translation', done => {\n      const spy = sinon.spy(console, 'warn');\n      const el = document.createElement('div');\n      const vm = new Vue({\n        i18n,\n        components: {\n          child: {\n            __i18n: 'foo',\n\n            render(h) {\n              return h('div', {}, [h('p', {\n                ref: 'who'\n              }, [this.$t('who')])]);\n            }\n\n          }\n        },\n\n        render(h) {\n          return h('div', {}, [h('child', {\n            ref: 'child'\n          })]);\n        }\n\n      }).$mount(el);\n      Vue.nextTick().then(() => {\n        assert.strictEqual(vm.$refs.child.$refs.who.textContent, 'ルート');\n        i18n.locale = 'en';\n      }).then(() => {\n        assert.strictEqual(vm.$refs.child.$refs.who.textContent, 'root');\n        spy.restore();\n      }).then(done);\n    });","file":"unit/custom_blocks.test.js","skipped":false,"dir":"test"},{"name":"should be translated","suites":["custom blocks","sharedMessages option"],"updatePoint":{"line":92,"column":28,"index":2176},"line":92,"code":"    it('should be translated', done => {\n      const el = document.createElement('div');\n      const vm = new Vue({\n        i18n,\n        components: {\n          child: {\n            __i18n: [JSON.stringify({\n              en: {\n                who: 'child'\n              },\n              ja: {\n                who: '子'\n              }\n            })],\n            i18n: {\n              sharedMessages: {\n                en: {\n                  foo: 'foo'\n                },\n                ja: {\n                  foo: 'フー'\n                }\n              }\n            },\n\n            render(h) {\n              return h('div', {}, [h('p', {\n                ref: 'foo'\n              }, [this.$t('foo')])]);\n            }\n\n          }\n        },\n\n        render(h) {\n          return h('div', {}, [h('child', {\n            ref: 'child'\n          })]);\n        }\n\n      }).$mount(el);\n      Vue.nextTick().then(() => {\n        assert.strictEqual(vm.$refs.child.$refs.foo.textContent, 'フー');\n        i18n.locale = 'en';\n      }).then(() => {\n        assert.strictEqual(vm.$refs.child.$refs.foo.textContent, 'foo');\n      }).then(done);\n    });","file":"unit/custom_blocks.test.js","skipped":false,"dir":"test"},{"name":"should be translated","suites":["custom blocks","bridge mode"],"updatePoint":{"line":142,"column":28,"index":3358},"line":142,"code":"    it('should be translated', done => {\n      const el = document.createElement('div');\n      const vm = new Vue({\n        i18n,\n        components: {\n          child: {\n            __i18nBridge: [JSON.stringify({\n              en: {\n                who: 'child'\n              },\n              ja: {\n                who: '子'\n              }\n            })],\n\n            render(h) {\n              return h('div', {}, [h('p', {\n                ref: 'who'\n              }, [this.$t('who')])]);\n            }\n\n          }\n        },\n\n        render(h) {\n          return h('div', {}, [h('child', {\n            ref: 'child'\n          })]);\n        }\n\n      }).$mount(el);\n      Vue.nextTick().then(() => {\n        assert.strictEqual(vm.$refs.child.$refs.who.textContent, '子');\n        i18n.locale = 'en';\n      }).then(() => {\n        assert.strictEqual(vm.$refs.child.$refs.who.textContent, 'child');\n      }).then(done);\n    });","file":"unit/custom_blocks.test.js","skipped":false,"dir":"test"},{"name":"should be worked","suites":["dateTimeFormats"],"updatePoint":{"line":5,"column":24,"index":224},"line":5,"code":"    it('should be worked', done => {\n      const i18n = new VueI18n({\n        locale: 'en-US',\n        dateTimeFormats\n      });\n      Vue.nextTick().then(() => {\n        assert.deepEqual(dateTimeFormats, i18n.dateTimeFormats);\n      }).then(done);\n    });","file":"unit/datetime.test.js","skipped":false,"dir":"test"},{"name":"should be worked","suites":["getDateTimeFormat / setDateTimeFormat"],"updatePoint":{"line":16,"column":24,"index":547},"line":16,"code":"    it('should be worked', done => {\n      const i18n = new VueI18n({\n        locale: 'en-US',\n        dateTimeFormats\n      });\n      const el = document.createElement('div');\n      document.body.appendChild(el);\n      const dt = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\n      const vm = new Vue({\n        i18n,\n\n        render(h) {\n          return h('p', {\n            ref: 'text'\n          }, [this.$d(dt, 'short')]);\n        }\n\n      }).$mount(el);\n      const {\n        text\n      } = vm.$refs;\n      const zhFormat = {\n        short: {\n          year: 'numeric',\n          month: '2-digit',\n          day: '2-digit',\n          hour: '2-digit',\n          minute: '2-digit'\n        }\n      };\n      Vue.nextTick().then(() => {\n        // NOTE: avoid webkit(phatomjs/safari) & Intl polyfill wired localization...\n        isChrome && assert.strictEqual(text.textContent, '12/19/2012, 10:00 PM');\n        i18n.setDateTimeFormat('zh-CN', zhFormat);\n        assert.deepEqual(i18n.getDateTimeFormat('zh-CN'), zhFormat);\n        i18n.locale = 'zh-CN';\n      }).then(() => {\n        // NOTE: avoid webkit(phatomjs/safari) & Intl polyfill wired localization...\n        isChrome && assert.strictEqual(text.textContent, '2012/12/20 下午12:00');\n      }).then(done);\n    });","file":"unit/datetime.test.js","skipped":false,"dir":"test"},{"name":"should be merged","suites":["mergeDateTimeFormat"],"updatePoint":{"line":59,"column":24,"index":1863},"line":59,"code":"    it('should be merged', () => {\n      const i18n = new VueI18n({\n        locale: 'ja-JP',\n        dateTimeFormats\n      });\n      const foo = {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit'\n      };\n      i18n.mergeDateTimeFormat('en-US', {\n        foo\n      });\n      assert.deepEqual(foo, i18n.getDateTimeFormat('en-US').foo);\n    });","file":"unit/datetime.test.js","skipped":false,"dir":"test"},{"name":"should be fallbacked","suites":["fallback"],"updatePoint":{"line":78,"column":28,"index":2324},"line":78,"code":"    it('should be fallbacked', done => {\n      const i18n = new VueI18n({\n        locale: 'en-uk',\n        fallbackLocale: ['de', 'en-us'],\n        dateTimeFormats: {\n          de: {\n            short: {\n              day: '2-digit',\n              month: '2-digit',\n              year: '2-digit'\n            }\n          }\n        }\n      });\n      const el = document.createElement('div');\n      document.body.appendChild(el);\n      const dt = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\n      const vm = new Vue({\n        i18n,\n\n        render(h) {\n          return h('p', {\n            ref: 'text'\n          }, [this.$d(dt, 'short')]);\n        }\n\n      }).$mount(el);\n      const {\n        text\n      } = vm.$refs;\n      Vue.nextTick().then(() => {\n        assert.strictEqual(text.textContent, '20.12.12');\n      }).then(done);\n    });","file":"unit/datetime.test.js","skipped":false,"dir":"test"},{"name":"should be translated","suites":["custom directive","v-t","string literal"],"updatePoint":{"line":18,"column":30,"index":403},"line":18,"code":"      it('should be translated', done => {\n        const vm = createVM({\n          i18n,\n\n          render(h) {\n            // <p ref=\"text\" v-t=\"'message.hello'\"></p>\n            return h('p', {\n              ref: 'text',\n              directives: [{\n                name: 't',\n                rawName: 'v-t',\n                value: 'message.hello',\n                expression: \"'message.hello'\"\n              }]\n            });\n          }\n\n        });\n        Vue.nextTick().then(() => {\n          assert.strictEqual(vm.$refs.text.textContent, messages.en.message.hello);\n          assert.strictEqual(vm.$refs.text._vt, messages.en.message.hello);\n          vm.$forceUpdate();\n        }).then(() => {\n          assert.strictEqual(vm.$refs.text.textContent, messages.en.message.hello);\n          assert.strictEqual(vm.$refs.text._vt, messages.en.message.hello);\n        }).then(done);\n      });","file":"unit/directive.test.js","skipped":false,"dir":"test"},{"name":"should be translated","suites":["custom directive","v-t","object"],"updatePoint":{"line":47,"column":30,"index":1339},"line":47,"code":"      it('should be translated', done => {\n        const vm = createVM({\n          i18n,\n          data: {\n            msgPath: 'message.format.named'\n          },\n\n          render(h) {\n            // <p ref=\"text\" v-t=\"{ path: msgPath, locale: 'ja', args: { name: 'kazupon' } }\"></p>\n            return h('p', {\n              ref: 'text',\n              directives: [{\n                name: 't',\n                rawName: 'v-t',\n                value: {\n                  path: this.msgPath,\n                  locale: 'ja',\n                  args: {\n                    name: 'kazupon'\n                  }\n                },\n                expression: \"{ path: msgPath, locale: 'ja', args: { name: 'kazupon' } }\"\n              }]\n            });\n          }\n\n        });\n        const expected = 'こんにちは kazupon, ごきげんいかが？';\n        Vue.nextTick().then(() => {\n          assert.strictEqual(vm.$refs.text.textContent, expected);\n          assert.strictEqual(vm.$refs.text._vt, expected);\n          vm.$forceUpdate();\n        }).then(() => {\n          assert.strictEqual(vm.$refs.text.textContent, expected);\n          assert.strictEqual(vm.$refs.text._vt, expected);\n        }).then(done);\n      });","file":"unit/directive.test.js","skipped":false,"dir":"test"},{"name":"should be translated","suites":["custom directive","v-t","locale reactivity"],"updatePoint":{"line":86,"column":30,"index":2587},"line":86,"code":"      it('should be translated', done => {\n        let expected = '';\n        const vm = createVM({\n          i18n,\n          data: {\n            msgPath: 'message.format.named'\n          },\n\n          render(h) {\n            // <p ref=\"text\" v-t=\"{ path: msgPath, args: { name: 'kazupon' } }\"></p>\n            return h('p', {\n              ref: 'text',\n              directives: [{\n                name: 't',\n                rawName: 'v-t',\n                value: {\n                  path: this.msgPath,\n                  args: {\n                    name: 'kazupon'\n                  }\n                },\n                expression: \"{ path: msgPath, args: { name: 'kazupon' } }\"\n              }]\n            });\n          }\n\n        });\n        Vue.nextTick().then(() => {\n          expected = 'Hello kazupon, how are you?';\n          assert.strictEqual(vm.$refs.text.textContent, expected);\n          assert.strictEqual(vm.$refs.text._vt, expected);\n          assert.strictEqual(vm.$refs.text._locale, 'en');\n          vm.$i18n.locale = 'ja'; // change locale\n\n          vm.$forceUpdate();\n        }).then(() => {\n          expected = 'こんにちは kazupon, ごきげんいかが？';\n          assert.strictEqual(vm.$refs.text.textContent, expected);\n          assert.strictEqual(vm.$refs.text._vt, expected);\n          assert.strictEqual(vm.$refs.text._locale, 'ja');\n        }).then(done);\n      });","file":"unit/directive.test.js","skipped":false,"dir":"test"},{"name":"should be warned","suites":["custom directive","v-t","not support warning"],"updatePoint":{"line":130,"column":26,"index":4018},"line":130,"code":"      it('should be warned', done => {\n        const spy = sinon.spy(console, 'warn');\n        createVM({\n          i18n,\n\n          render(h) {\n            // <p ref=\"text\" v-t=\"[1]\"></p>\n            return h('p', {\n              ref: 'text',\n              directives: [{\n                name: 't',\n                rawName: 'v-t',\n                value: [1],\n                expression: '[1]'\n              }]\n            });\n          }\n\n        });\n        Vue.nextTick().then(() => {\n          assert(spy.notCalled === false);\n          assert(spy.callCount === 1);\n          spy.restore();\n        }).then(done);\n      });","file":"unit/directive.test.js","skipped":false,"dir":"test"},{"name":"should be warned","suites":["custom directive","v-t","path required warning"],"updatePoint":{"line":157,"column":26,"index":4700},"line":157,"code":"      it('should be warned', done => {\n        const spy = sinon.spy(console, 'warn');\n        createVM({\n          i18n,\n\n          render(h) {\n            // <p ref=\"text\" v-t=\"{ locale: 'ja', args: { name: 'kazupon' } }\"></p>\n            return h('p', {\n              ref: 'text',\n              directives: [{\n                name: 't',\n                rawName: 'v-t',\n                value: {\n                  locale: 'ja',\n                  args: {\n                    name: 'kazupon'\n                  }\n                },\n                expression: \"{ locale: 'ja', args: { name: 'kazupon' } }\"\n              }]\n            });\n          }\n\n        });\n        Vue.nextTick().then(() => {\n          assert(spy.notCalled === false);\n          assert(spy.callCount === 1);\n          spy.restore();\n        }).then(done);\n      });","file":"unit/directive.test.js","skipped":false,"dir":"test"},{"name":"should be warned","suites":["custom directive","v-t","VueI18n instance warning"],"updatePoint":{"line":189,"column":26,"index":5595},"line":189,"code":"      it('should be warned', done => {\n        const spy = sinon.spy(console, 'warn');\n        createVM({\n          render(h) {\n            return h('p', {\n              ref: 'text',\n              directives: [{\n                name: 't',\n                rawName: 'v-t',\n                value: 'message.hello',\n                expression: \"'message.hello'\"\n              }]\n            });\n          }\n\n        });\n        Vue.nextTick().then(() => {\n          assert(spy.notCalled === false);\n          assert(spy.callCount === 1);\n          spy.restore();\n        }).then(done);\n      });","file":"unit/directive.test.js","skipped":false,"dir":"test"},{"name":"should be singular","suites":["custom directive","v-t","pluralize"],"updatePoint":{"line":213,"column":28,"index":6230},"line":213,"code":"      it('should be singular', done => {\n        const vm = createVM({\n          i18n,\n\n          render(h) {\n            // <p ref=\"text\" v-t=\"{path: 'plurals.car', choice: 1}\"></p>\n            return h('p', {\n              ref: 'text',\n              directives: [{\n                name: 't',\n                rawName: 'v-t',\n                value: {\n                  path: 'plurals.car',\n                  choice: 1\n                },\n                expression: {\n                  path: 'plurals.car',\n                  choice: 1\n                }\n              }]\n            });\n          }\n\n        });\n        Vue.nextTick().then(() => {\n          assert.strictEqual(vm.$refs.text.textContent, 'car');\n          assert.strictEqual(vm.$refs.text._vt, 'car');\n          vm.$forceUpdate();\n        }).then(() => {\n          assert.strictEqual(vm.$refs.text.textContent, 'car');\n          assert.strictEqual(vm.$refs.text._vt, 'car');\n        }).then(done);\n      });","file":"unit/directive.test.js","skipped":false,"dir":"test"},{"name":"should be plural","suites":["custom directive","v-t","pluralize"],"updatePoint":{"line":246,"column":26,"index":7200},"line":246,"code":"      it('should be plural', done => {\n        const vm = createVM({\n          i18n,\n\n          render(h) {\n            // <p ref=\"text\" v-t=\"{path: 'plurals.car', choice: 2}\"></p>\n            return h('p', {\n              ref: 'text',\n              directives: [{\n                name: 't',\n                rawName: 'v-t',\n                value: {\n                  path: 'plurals.car',\n                  choice: 2\n                },\n                expression: {\n                  path: 'plurals.car',\n                  choice: 2\n                }\n              }]\n            });\n          }\n\n        });\n        Vue.nextTick().then(() => {\n          assert.strictEqual(vm.$refs.text.textContent, 'cars');\n          assert.strictEqual(vm.$refs.text._vt, 'cars');\n          vm.$forceUpdate();\n        }).then(() => {\n          assert.strictEqual(vm.$refs.text.textContent, 'cars');\n          assert.strictEqual(vm.$refs.text._vt, 'cars');\n        }).then(done);\n      });","file":"unit/directive.test.js","skipped":false,"dir":"test"},{"name":"should allow a zero choice","suites":["custom directive","v-t","pluralize"],"updatePoint":{"line":279,"column":36,"index":8184},"line":279,"code":"      it('should allow a zero choice', done => {\n        const vm = createVM({\n          i18n,\n\n          render(h) {\n            // <p ref=\"text\" v-t=\"{path: 'plurals.apple', choice: 0}\"></p>\n            return h('p', {\n              ref: 'text',\n              directives: [{\n                name: 't',\n                rawName: 'v-t',\n                value: {\n                  path: 'plurals.apple',\n                  choice: 0\n                },\n                expression: {\n                  path: 'plurals.apple',\n                  choice: 0\n                }\n              }]\n            });\n          }\n\n        });\n        Vue.nextTick().then(() => {\n          assert.strictEqual(vm.$refs.text.textContent, 'no apples');\n          assert.strictEqual(vm.$refs.text._vt, 'no apples');\n          vm.$forceUpdate();\n        }).then(() => {\n          assert.strictEqual(vm.$refs.text.textContent, 'no apples');\n          assert.strictEqual(vm.$refs.text._vt, 'no apples');\n        }).then(done);\n      });","file":"unit/directive.test.js","skipped":false,"dir":"test"},{"name":"should clear element content on destroy by default","suites":["custom directive","v-t","preserve content"],"updatePoint":{"line":314,"column":60,"index":9267},"line":314,"code":"      it('should clear element content on destroy by default', done => {\n        const vm = createVM({\n          i18n,\n          data: () => ({\n            visible: true\n          }),\n\n          render(h) {\n            // <p ref=\"text\" v-t=\"'message.hello'\"></p>\n            const directives = this.visible ? [{\n              name: 't',\n              rawName: 'v-t',\n              value: 'message.hello',\n              expression: \"'message.hello'\"\n            }] : [];\n            return h('p', {\n              ref: 'text',\n              directives\n            });\n          }\n\n        });\n        Vue.nextTick().then(() => {\n          assert.strictEqual(vm.$refs.text.textContent, messages.en.message.hello);\n          vm.visible = false;\n          vm.$forceUpdate();\n        }).then(() => {\n          assert.strictEqual(vm.$refs.text.textContent, '');\n        }).then(done);\n      });","file":"unit/directive.test.js","skipped":false,"dir":"test"},{"name":"should not clear element content with \"preserve\" modifier","suites":["custom directive","v-t","preserve content"],"updatePoint":{"line":344,"column":67,"index":10162},"line":344,"code":"      it('should not clear element content with \"preserve\" modifier', done => {\n        const vm = createVM({\n          i18n,\n          data: () => ({\n            visible: true\n          }),\n\n          render(h) {\n            // <p ref=\"text\" v-t.preserve=\"'message.hello'\"></p>\n            const directives = this.visible ? [{\n              name: 't',\n              rawName: 'v-t',\n              value: 'message.hello',\n              expression: \"'message.hello'\",\n              modifiers: {\n                preserve: true\n              }\n            }] : [];\n            return h('p', {\n              ref: 'text',\n              directives\n            });\n          }\n\n        });\n        Vue.nextTick().then(() => {\n          assert.strictEqual(vm.$refs.text.textContent, messages.en.message.hello);\n          vm.visible = false;\n          vm.$forceUpdate();\n        }).then(() => {\n          assert.strictEqual(vm.$refs.text.textContent, messages.en.message.hello);\n        }).then(done);\n      });","file":"unit/directive.test.js","skipped":false,"dir":"test"},{"name":"should not clear element content when \"preserveDirectiveContent\" i18nOption is set to true","suites":["custom directive","v-t","preserve content"],"updatePoint":{"line":377,"column":100,"index":11197},"line":377,"code":"      it('should not clear element content when \"preserveDirectiveContent\" i18nOption is set to true', done => {\n        const vm = createVM({\n          i18n: new VueI18n({\n            locale: 'en',\n            messages,\n            preserveDirectiveContent: true\n          }),\n          data: () => ({\n            visible: true\n          }),\n\n          render(h) {\n            // <p ref=\"text\" v-t=\"'message.hello'\"></p>\n            const directives = this.visible ? [{\n              name: 't',\n              rawName: 'v-t',\n              value: 'message.hello',\n              expression: \"'message.hello'\"\n            }] : [];\n            return h('p', {\n              ref: 'text',\n              directives\n            });\n          }\n\n        });\n        Vue.nextTick().then(() => {\n          assert.strictEqual(vm.$refs.text.textContent, messages.en.message.hello);\n          vm.visible = false;\n          vm.$forceUpdate();\n        }).then(() => {\n          assert.strictEqual(vm.$refs.text.textContent, messages.en.message.hello);\n        }).then(done);\n      });","file":"unit/directive.test.js","skipped":false,"dir":"test"},{"name":"Replacement parameters are escaped when escapeParameterHtml: true.","suites":["escapeParameterHtml"],"updatePoint":{"line":8,"column":72,"index":194},"line":8,"code":"  it('Replacement parameters are escaped when escapeParameterHtml: true.', () => {\n    const i18n = new VueI18n({\n      locale: 'en',\n      messages,\n      escapeParameterHtml: true\n    }); // We should not escape the ampersand (&).\n\n    assert(i18n.t('nameformat', {\n      key: '<&\"\\'>'\n    }) === '&lt;&&quot;&apos;&gt;');\n    assert(i18n.t('listformat', ['<&\"\\'>']) === '&lt;&&quot;&apos;&gt;');\n    assert(i18n.tc('nameformat', 1, {\n      key: '<&\"\\'>'\n    }).toString() === '&lt;&&quot;&apos;&gt;');\n    assert(i18n.tc('listformat', 1, ['<&\"\\'>']).toString() === '&lt;&&quot;&apos;&gt;');\n  });","file":"unit/escape_parameter_html.test.js","skipped":false,"dir":"test"},{"name":"Replacement parameters are not escaped when escapeParameterHtml: undefined.","suites":["escapeParameterHtml"],"updatePoint":{"line":24,"column":81,"index":803},"line":24,"code":"  it('Replacement parameters are not escaped when escapeParameterHtml: undefined.', () => {\n    const i18n = new VueI18n({\n      locale: 'en',\n      messages\n    });\n    assert(i18n.t('nameformat', {\n      key: '<\"\\'>'\n    }) === '<\"\\'>');\n    assert(i18n.t('listformat', ['<\"\\'>']) === '<\"\\'>');\n  });","file":"unit/escape_parameter_html.test.js","skipped":false,"dir":"test"},{"name":"should be fallbacked","suites":["issue #868"],"updatePoint":{"line":138,"column":26,"index":3745},"line":138,"code":"  it('should be fallbacked', () => {\n    const i18n = new VueI18n({\n      locale: 'de-CH',\n      fallbackLocale: {\n        'de-CH': ['fr', 'it'],\n        'zh-Hant': ['zh-Hans'],\n        'es-CL': ['es-AR'],\n        'es': ['en-GB'],\n        'pt': ['es-AR'],\n        default: ['en-US', 1, {}, null, false, undefined, 'en']\n      },\n      messages\n    });\n    assert.deepEqual(i18n.t('message.hello'), 'the world');\n  });","file":"unit/fallback.test.js","skipped":false,"dir":"test"},{"name":"should allows for specifying a custom formatter","suites":["custom formatter","via i18n instance API calling"],"updatePoint":{"line":4,"column":55,"index":185},"line":4,"code":"    it('should allows for specifying a custom formatter', done => {\n      class CustomFormatter {\n        interpolate(message, values) {\n          assert.deepEqual({\n            name: 'joe'\n          }, values);\n          done();\n        }\n\n      }\n\n      const formatter = new CustomFormatter();\n      const i18n = new VueI18n({\n        locale: 'en',\n        messages,\n        formatter\n      });\n      i18n.t('message.hello', 'ja', {\n        name: 'joe'\n      });\n    });","file":"unit/format_custom.test.js","skipped":false,"dir":"test"},{"name":"should interpolate messages without values","suites":["custom formatter","via i18n instance API calling"],"updatePoint":{"line":25,"column":50,"index":654},"line":25,"code":"    it('should interpolate messages without values', done => {\n      class CustomFormatter {\n        interpolate(message, values) {\n          assert(values === null);\n          done();\n        }\n\n      }\n\n      const formatter = new CustomFormatter();\n      const i18n = new VueI18n({\n        locale: 'en',\n        messages,\n        formatter\n      });\n      i18n.t('message.hello');\n    });","file":"unit/format_custom.test.js","skipped":false,"dir":"test"},{"name":"should allows for specifying a custom formatter","suites":["custom formatter","via vue instance calling"],"updatePoint":{"line":44,"column":55,"index":1104},"line":44,"code":"    it('should allows for specifying a custom formatter', done => {\n      const formatter = {\n        interpolate: (message, values) => {\n          assert.deepEqual([1, 2, 3], values);\n          done();\n        }\n      };\n      const vm = new Vue({\n        i18n: new VueI18n({\n          locale: 'en',\n          messages,\n          formatter\n        })\n      });\n      vm.$t('message.hello', [1, 2, 3]);\n    });","file":"unit/format_custom.test.js","skipped":false,"dir":"test"},{"name":"should be inherited by components","suites":["custom formatter","via vue instance calling (mounted)"],"updatePoint":{"line":67,"column":41,"index":1665},"line":67,"code":"    it('should be inherited by components', done => {\n      new Vue({\n        i18n: new VueI18n({\n          locale: 'en',\n          formatter: {\n            interpolate: (message, values) => {\n              assert.deepEqual({\n                name: 'user'\n              }, values);\n              done();\n              return ['pass'];\n            }\n          }\n        }),\n        components: {\n          'child-1': {\n            render(h) {\n              return h('div', {}, [h('p', {}, [this.$t('message', {\n                name: 'user'\n              })])]);\n            },\n\n            i18n: {\n              messages: {\n                en: {\n                  message: 'hello {name}'\n                }\n              }\n            }\n          }\n        },\n\n        render(h) {\n          return h('div', {}, [h('child-1')]);\n        }\n\n      }).$mount(el);\n    });","file":"unit/format_custom.test.js","skipped":false,"dir":"test"},{"name":"should be worked","suites":["custom formatter","i18n format getter/settter"],"updatePoint":{"line":107,"column":24,"index":2568},"line":107,"code":"    it('should be worked', done => {\n      const i18n = new VueI18n({\n        locale: 'en',\n        messages\n      });\n      assert(i18n.formatter.constructor.name === 'BaseFormatter');\n      const formatter = {\n        interpolate: (message, values) => {\n          assert.deepEqual([1, 2, 3], values);\n          done();\n        }\n      };\n      i18n.formatter = formatter;\n      i18n.t('message.hello', [1, 2, 3]);\n    });","file":"unit/format_custom.test.js","skipped":false,"dir":"test"},{"name":"should be parsed","suites":["parse","list"],"updatePoint":{"line":4,"column":24,"index":129},"line":4,"code":"    it('should be parsed', () => {\n      const tokens = parse('name: {0}, email: {1}');\n      assert(tokens.length === 4);\n      assert.strictEqual(tokens[0].type, 'text');\n      assert.strictEqual(tokens[0].value, 'name: ');\n      assert.strictEqual(tokens[1].type, 'list');\n      assert.strictEqual(tokens[1].value, '0');\n      assert.strictEqual(tokens[2].type, 'text');\n      assert.strictEqual(tokens[2].value, ', email: ');\n      assert.strictEqual(tokens[3].type, 'list');\n      assert.strictEqual(tokens[3].value, '1');\n    });","file":"unit/format.test.js","skipped":false,"dir":"test"},{"name":"should be parsed","suites":["parse","named"],"updatePoint":{"line":18,"column":24,"index":699},"line":18,"code":"    it('should be parsed', () => {\n      const tokens = parse('name: {name}, email: {email}');\n      assert(tokens.length === 4);\n      assert.strictEqual(tokens[0].type, 'text');\n      assert.strictEqual(tokens[0].value, 'name: ');\n      assert.strictEqual(tokens[1].type, 'named');\n      assert.strictEqual(tokens[1].value, 'name');\n      assert.strictEqual(tokens[2].type, 'text');\n      assert.strictEqual(tokens[2].value, ', email: ');\n      assert.strictEqual(tokens[3].type, 'named');\n      assert.strictEqual(tokens[3].value, 'email');\n    });","file":"unit/format.test.js","skipped":false,"dir":"test"},{"name":"should be parsed","suites":["parse","rails i18n format syntax"],"updatePoint":{"line":32,"column":24,"index":1304},"line":32,"code":"    it('should be parsed', () => {\n      const tokens = parse('name: %{name}, email: %{email}');\n      assert(tokens.length === 4);\n      assert.strictEqual(tokens[0].type, 'text');\n      assert.strictEqual(tokens[0].value, 'name: ');\n      assert.strictEqual(tokens[1].type, 'named');\n      assert.strictEqual(tokens[1].value, 'name');\n      assert.strictEqual(tokens[2].type, 'text');\n      assert.strictEqual(tokens[2].value, ', email: ');\n      assert.strictEqual(tokens[3].type, 'named');\n      assert.strictEqual(tokens[3].value, 'email');\n    });","file":"unit/format.test.js","skipped":false,"dir":"test"},{"name":"should be parsed","suites":["parse","not support format"],"updatePoint":{"line":46,"column":24,"index":1905},"line":46,"code":"    it('should be parsed', () => {\n      const tokens = parse('name: { name1}, email: {%email}');\n      assert(tokens.length === 4);\n      assert.strictEqual(tokens[0].type, 'text');\n      assert.strictEqual(tokens[0].value, 'name: ');\n      assert.strictEqual(tokens[1].type, 'unknown');\n      assert.strictEqual(tokens[1].value, ' name1');\n      assert.strictEqual(tokens[2].type, 'text');\n      assert.strictEqual(tokens[2].value, ', email: ');\n      assert.strictEqual(tokens[3].type, 'unknown');\n      assert.strictEqual(tokens[3].value, '%email');\n    });","file":"unit/format.test.js","skipped":false,"dir":"test"},{"name":"should be compiled","suites":["compile","list token"],"updatePoint":{"line":62,"column":26,"index":2540},"line":62,"code":"    it('should be compiled', () => {\n      const tokens = parse('name: {0}, age: {1}');\n      const compiled = compile(tokens, ['kazupon', '0x20']);\n      assert(compiled.length === 4);\n      assert.strictEqual(compiled[0], 'name: ');\n      assert.strictEqual(compiled[1], 'kazupon');\n      assert.strictEqual(compiled[2], ', age: ');\n      assert.strictEqual(compiled[3], '0x20');\n    });","file":"unit/format.test.js","skipped":false,"dir":"test"},{"name":"should be compiled","suites":["compile","named token"],"updatePoint":{"line":73,"column":26,"index":2970},"line":73,"code":"    it('should be compiled', () => {\n      const tokens = parse('name: {name}, age: {age}');\n      const compiled = compile(tokens, {\n        name: 'kazupon',\n        age: '0x20'\n      });\n      assert(compiled.length === 4);\n      assert.strictEqual(compiled[0], 'name: ');\n      assert.strictEqual(compiled[1], 'kazupon');\n      assert.strictEqual(compiled[2], ', age: ');\n      assert.strictEqual(compiled[3], '0x20');\n    });","file":"unit/format.test.js","skipped":false,"dir":"test"},{"name":"should be compiled as unknown if not closed","suites":["compile","named token"],"updatePoint":{"line":85,"column":51,"index":3425},"line":85,"code":"    it('should be compiled as unknown if not closed', () => {\n      const tokens = parse('name: {name');\n      const compiled = compile(tokens, {\n        name: 'kazupon'\n      });\n      assert(compiled.length === 1);\n      assert.strictEqual(compiled[0], 'name: ');\n    });","file":"unit/format.test.js","skipped":false,"dir":"test"},{"name":"should be compiled","suites":["compile","unknown token"],"updatePoint":{"line":95,"column":26,"index":3716},"line":95,"code":"    it('should be compiled', () => {\n      const spy = sinon.spy(console, 'warn');\n      const tokens = parse('name: { name1}, email: {%email}');\n      const compiled = compile(tokens, ['kazupon', '0x20']);\n      assert(compiled.length === 2);\n      assert.strictEqual(compiled[0], 'name: ');\n      assert.strictEqual(compiled[1], ', email: ');\n      assert(spy.notCalled === false);\n      assert(spy.callCount === 2);\n      spy.restore();\n    });","file":"unit/format.test.js","skipped":false,"dir":"test"},{"name":"should be compiled with empty","suites":["compile","values unknown mode"],"updatePoint":{"line":108,"column":37,"index":4223},"line":108,"code":"    it('should be compiled with empty', () => {\n      const compiled = compile([], 1);\n      assert.deepEqual(compiled, []);\n    });","file":"unit/format.test.js","skipped":false,"dir":"test"},{"name":"should be compiled","suites":["compile","list token with named value"],"updatePoint":{"line":114,"column":26,"index":4401},"line":114,"code":"    it('should be compiled', () => {\n      const tokens = parse('name: {0}, age: {1}'); // list tokens\n\n      const compiled = compile(tokens, {\n        '0': 'kazupon',\n        '1': '0x20'\n      }); // named values\n\n      assert(compiled.length === 4);\n      assert.strictEqual(compiled[0], 'name: ');\n      assert.strictEqual(compiled[1], 'kazupon');\n      assert.strictEqual(compiled[2], ', age: ');\n      assert.strictEqual(compiled[3], '0x20');\n    });","file":"unit/format.test.js","skipped":false,"dir":"test"},{"name":"should be warned","suites":["compile","unmatch values mode"],"updatePoint":{"line":130,"column":24,"index":4904},"line":130,"code":"    it('should be warned', () => {\n      const spy = sinon.spy(console, 'warn');\n      const tokens = parse('name: {name}, age: {age}'); // named tokens\n\n      compile(tokens, ['kazupon', '0x20']); // list values\n\n      assert(spy.notCalled === false);\n      assert(spy.callCount === 2);\n      spy.restore();\n    });","file":"unit/format.test.js","skipped":false,"dir":"test"},{"name":"defaults to span","suites":["component interpolation","tag"],"updatePoint":{"line":57,"column":24,"index":1036},"line":57,"code":"    it('defaults to span', done => {\n      const el = document.createElement('div');\n      const vm = new Vue({\n        i18n,\n\n        render(h) {\n          return h('i18n', {\n            props: {\n              path: 'text'\n            }\n          }, [this._v('1')]);\n        }\n\n      }).$mount(el);\n      Vue.nextTick().then(() => {\n        assert.strictEqual(vm.$el.outerHTML, '<span>one: 1</span>');\n      }).then(done);\n    });","file":"unit/interpolation.test.js","skipped":false,"dir":"test"},{"name":"of type object (Component) should be correctly applied","suites":["component interpolation","tag"],"updatePoint":{"line":75,"column":62,"index":1506},"line":75,"code":"    it('of type object (Component) should be correctly applied', done => {\n      const MockElement = {\n        render(h) {\n          return h('strong', Object.values(this.$slots));\n        }\n\n      };\n      const el = document.createElement('div');\n      const vm = new Vue({\n        i18n,\n\n        render(h) {\n          return h('i18n', {\n            props: {\n              path: 'text',\n              tag: MockElement\n            }\n          }, [this._v('1')]);\n        }\n\n      }).$mount(el);\n      Vue.nextTick().then(() => {\n        assert.strictEqual(vm.$el.outerHTML, '<strong>one: 1</strong>');\n      }).then(done).catch(done);\n    });","file":"unit/interpolation.test.js","skipped":false,"dir":"test"},{"name":"of type object (Functional Component) should be correctly applied","suites":["component interpolation","tag"],"updatePoint":{"line":100,"column":73,"index":2161},"line":100,"code":"    it('of type object (Functional Component) should be correctly applied', done => {\n      const MockElement = {\n        functional: true,\n\n        render(h, {\n          data,\n          children\n        }) {\n          return h('em', data, children);\n        }\n\n      };\n      const el = document.createElement('div');\n      const vm = new Vue({\n        i18n,\n\n        render(h) {\n          return h('i18n', {\n            props: {\n              path: 'text',\n              tag: MockElement\n            }\n          }, [this._v('1')]);\n        }\n\n      }).$mount(el);\n      Vue.nextTick().then(() => {\n        assert.strictEqual(vm.$el.outerHTML, '<em>one: 1</em>');\n      }).then(done).catch(done);\n    });","file":"unit/interpolation.test.js","skipped":false,"dir":"test"},{"name":"of type string should be correctly applied","suites":["component interpolation","tag"],"updatePoint":{"line":130,"column":50,"index":2844},"line":130,"code":"    it('of type string should be correctly applied', done => {\n      const el = document.createElement('div');\n      const vm = new Vue({\n        i18n,\n\n        render(h) {\n          return h('i18n', {\n            props: {\n              path: 'text',\n              tag: 'b'\n            }\n          }, [this._v('1')]);\n        }\n\n      }).$mount(el);\n      Vue.nextTick().then(() => {\n        assert.strictEqual(vm.$el.outerHTML, '<b>one: 1</b>');\n      }).then(done);\n    });","file":"unit/interpolation.test.js","skipped":false,"dir":"test"},{"name":"of value true defaults to span","suites":["component interpolation","tag"],"updatePoint":{"line":149,"column":38,"index":3308},"line":149,"code":"    it('of value true defaults to span', done => {\n      const el = document.createElement('div');\n      const vm = new Vue({\n        i18n,\n\n        render(h) {\n          return h('i18n', {\n            props: {\n              path: 'text',\n              tag: true\n            }\n          }, [this._v('1')]);\n        }\n\n      }).$mount(el);\n      Vue.nextTick().then(() => {\n        assert.strictEqual(vm.$el.outerHTML, '<span>one: 1</span>');\n      }).then(done);\n    });","file":"unit/interpolation.test.js","skipped":false,"dir":"test"},{"name":"of value false does not apply a root container","suites":["component interpolation","tag"],"updatePoint":{"line":168,"column":54,"index":3795},"line":168,"code":"    it('of value false does not apply a root container', done => {\n      const el = document.createElement('div');\n      const vm = new Vue({\n        i18n,\n\n        render(h) {\n          return h('i18n', {\n            props: {\n              path: 'text',\n              tag: false\n            }\n          }, [this._v('1')]);\n        }\n\n      }).$mount(el);\n      Vue.nextTick().then(() => {\n        assert.strictEqual(vm.$el.nodeType, Node.TEXT_NODE);\n        assert.strictEqual(vm.$el.data, 'one: 1');\n      }).then(done);\n    });","file":"unit/interpolation.test.js","skipped":false,"dir":"test"},{"name":"should be interpolated","suites":["component interpolation","children","text nodes"],"updatePoint":{"line":191,"column":32,"index":4376},"line":191,"code":"      it('should be interpolated', done => {\n        const el = document.createElement('div');\n        const vm = new Vue({\n          i18n,\n\n          render(h) {\n            return h('i18n', {\n              props: {\n                path: 'text'\n              }\n            }, [this._v('1')]);\n          }\n\n        }).$mount(el);\n        Vue.nextTick().then(() => {\n          assert.strictEqual(vm.$el.textContent, 'one: 1');\n        }).then(done);\n      });","file":"unit/interpolation.test.js","skipped":false,"dir":"test"},{"name":"should be interpolated","suites":["component interpolation","children","primitive nodes"],"updatePoint":{"line":211,"column":32,"index":4883},"line":211,"code":"      it('should be interpolated', done => {\n        const el = document.createElement('div');\n        const vm = new Vue({\n          i18n,\n\n          render(h) {\n            return h('i18n', {\n              props: {\n                path: 'primitive'\n              }\n            }, [h('p', ['1']), h('p', ['2'])]);\n          }\n\n        }).$mount(el);\n        Vue.nextTick().then(() => {\n          assert.strictEqual(vm.$el.innerHTML, 'one: <p>1</p>, two: <p>2</p>');\n        }).then(done);\n      });","file":"unit/interpolation.test.js","skipped":false,"dir":"test"},{"name":"should NOT be interpolated","suites":["component interpolation","children","empty text node between components"],"updatePoint":{"line":231,"column":36,"index":5454},"line":231,"code":"      it('should NOT be interpolated', done => {\n        const el = document.createElement('div');\n        const vm = new Vue({\n          i18n,\n\n          render(h) {\n            return h('i18n', {\n              props: {\n                path: 'primitive'\n              }\n            }, [h('p', ['1']), this._v(''), h('p', ['2'])]);\n          }\n\n        }).$mount(el);\n        Vue.nextTick().then(() => {\n          assert.strictEqual(vm.$el.innerHTML, 'one: <p>1</p>, two: <p>2</p>');\n        }).then(done);\n      });","file":"unit/interpolation.test.js","skipped":false,"dir":"test"},{"name":"should be interpolated","suites":["component interpolation","children","components"],"updatePoint":{"line":251,"column":32,"index":6010},"line":251,"code":"      it('should be interpolated', done => {\n        const el = document.createElement('div');\n        const vm = new Vue({\n          i18n,\n          components,\n\n          render(h) {\n            return h('i18n', {\n              props: {\n                path: 'component'\n              }\n            }, [h('p', ['1']), h('comp', {\n              props: {\n                msg: 'foo'\n              }\n            })]);\n          }\n\n        }).$mount(el);\n        Vue.nextTick().then(() => {\n          assert.strictEqual(vm.$el.innerHTML, 'element: <p>1</p>, component: <p>foo</p>');\n        }).then(done);\n      });","file":"unit/interpolation.test.js","skipped":false,"dir":"test"},{"name":"should be interpolated","suites":["component interpolation","children","places prop"],"updatePoint":{"line":276,"column":32,"index":6667},"line":276,"code":"      it('should be interpolated', done => {\n        const el = document.createElement('div');\n        const vm = new Vue({\n          i18n,\n\n          render(h) {\n            return h('i18n', {\n              props: {\n                path: 'text',\n                places: [1]\n              }\n            });\n          }\n\n        }).$mount(el);\n        Vue.nextTick().then(() => {\n          assert.strictEqual(vm.$el.textContent, 'one: 1');\n        }).then(done);\n      });","file":"unit/interpolation.test.js","skipped":false,"dir":"test"},{"name":"should be interpolated","suites":["component interpolation","children","place prop on all children"],"updatePoint":{"line":297,"column":32,"index":7198},"line":297,"code":"      it('should be interpolated', done => {\n        const el = document.createElement('div');\n        const vm = new Vue({\n          i18n,\n          components,\n\n          render(h) {\n            return h('i18n', {\n              props: {\n                path: 'component'\n              }\n            }, [h('p', {\n              props: {\n                place: 0\n              }\n            }, ['1']), h('comp', {\n              props: {\n                place: 1,\n                msg: 'foo'\n              }\n            })]);\n          }\n\n        }).$mount(el);\n        Vue.nextTick().then(() => {\n          assert.strictEqual(vm.$el.innerHTML, 'element: <p>1</p>, component: <p>foo</p>');\n        }).then(done);\n      });","file":"unit/interpolation.test.js","skipped":false,"dir":"test"},{"name":"should be interpolated","suites":["component interpolation","children","place prop on some children"],"updatePoint":{"line":327,"column":32,"index":7978},"line":327,"code":"      it('should be interpolated', done => {\n        const el = document.createElement('div');\n        const vm = new Vue({\n          i18n,\n          components,\n\n          render(h) {\n            return h('i18n', {\n              props: {\n                path: 'component'\n              }\n            }, [h('p', {\n              props: {\n                place: 1\n              }\n            }, ['1']), h('comp', {\n              props: {\n                msg: 'foo'\n              }\n            })]);\n          }\n\n        }).$mount(el);\n        Vue.nextTick().then(() => {\n          assert.strictEqual(vm.$el.innerHTML, 'element: <p>1</p>, component: <p>foo</p>');\n        }).then(done);\n      });","file":"unit/interpolation.test.js","skipped":false,"dir":"test"},{"name":"should be interpolated","suites":["component interpolation","children","places and place mixed"],"updatePoint":{"line":356,"column":32,"index":8727},"line":356,"code":"      it('should be interpolated', done => {\n        const el = document.createElement('div');\n        const vm = new Vue({\n          i18n,\n          components,\n\n          render(h) {\n            return h('i18n', {\n              props: {\n                path: 'mixed',\n                places: {\n                  'x': 'foo'\n                }\n              }\n            }, [h('comp', {\n              props: {\n                msg: 'bar'\n              },\n              attrs: {\n                place: 'y'\n              }\n            })]);\n          }\n\n        }).$mount(el);\n        Vue.nextTick().then(() => {\n          assert.strictEqual(vm.$el.innerHTML, 'text: foo, component: <p place=\"y\">bar</p>');\n        }).then(done);\n      });","file":"unit/interpolation.test.js","skipped":false,"dir":"test"},{"name":"should be warned","suites":["component interpolation","children","places set, place not set on all children"],"updatePoint":{"line":387,"column":26,"index":9532},"line":387,"code":"      it('should be warned', done => {\n        const spy = sinon.spy(console, 'warn');\n        const el = document.createElement('div');\n        const vm = new Vue({\n          i18n,\n          components,\n\n          render(h) {\n            return h('i18n', {\n              props: {\n                path: 'mixed',\n                places: {\n                  'x': 'foo'\n                }\n              }\n            }, [h('comp', {\n              props: {\n                msg: 'bar'\n              }\n            })]);\n          }\n\n        }).$mount(el);\n        Vue.nextTick().then(() => {\n          assert.strictEqual(vm.$el.innerHTML, 'text: foo, component: ');\n          assert(spy.notCalled === false);\n          assert(spy.callCount === 1);\n          spy.restore();\n        }).then(done);\n      });","file":"unit/interpolation.test.js","skipped":false,"dir":"test"},{"name":"should be interpolated","suites":["component interpolation","children","fallback"],"updatePoint":{"line":419,"column":32,"index":10378},"line":419,"code":"      it('should be interpolated', done => {\n        const el = document.createElement('div');\n        const vm = new Vue({\n          i18n,\n          components,\n\n          render(h) {\n            return h('fallback');\n          }\n\n        }).$mount(el);\n        Vue.nextTick().then(() => {\n          assert.strictEqual(vm.$el.innerHTML, 'fallback from <p>child</p>');\n        }).then(done);\n      });","file":"unit/interpolation.test.js","skipped":false,"dir":"test"},{"name":"should be interpolated","suites":["component interpolation","children","nested components"],"updatePoint":{"line":436,"column":32,"index":10830},"line":436,"code":"      it('should be interpolated', done => {\n        const el = document.createElement('div');\n        const vm = new Vue({\n          i18n,\n          components,\n\n          render(h) {\n            return h('i18n', {\n              props: {\n                path: 'component'\n              }\n            }, [h('p', ['1']), h('div', {}, [h('i18n', {\n              class: 'nested',\n              props: {\n                tag: 'div',\n                path: 'component'\n              }\n            }, [h('p', ['2']), h('comp', {\n              props: {\n                msg: 'nested'\n              }\n            })])])]);\n          }\n\n        }).$mount(el);\n        Vue.nextTick().then(() => {\n          assert.strictEqual(vm.$el.innerHTML, 'element: <p>1</p>, component: <div><div class=\"nested\">element: <p>2</p>, component: <p>nested</p></div></div>');\n        }).then(done);\n      });","file":"unit/interpolation.test.js","skipped":false,"dir":"test"},{"name":"should be interpolated","suites":["component interpolation","linked"],"updatePoint":{"line":468,"column":30,"index":11750},"line":468,"code":"    it('should be interpolated', done => {\n      const el = document.createElement('div');\n      const vm = new Vue({\n        i18n,\n\n        render(h) {\n          return h('i18n', {\n            props: {\n              path: 'link'\n            }\n          }, [h('p', ['1']), h('p', ['2'])]);\n        }\n\n      }).$mount(el);\n      Vue.nextTick().then(() => {\n        assert.strictEqual(vm.$el.innerHTML, 'one: <p>1</p>, two: <p>2</p>');\n      }).then(done);\n    });","file":"unit/interpolation.test.js","skipped":false,"dir":"test"},{"name":"should be interpolated","suites":["component interpolation","locale"],"updatePoint":{"line":488,"column":30,"index":12248},"line":488,"code":"    it('should be interpolated', done => {\n      const el = document.createElement('div');\n      const vm = new Vue({\n        i18n,\n\n        render(h) {\n          return h('i18n', {\n            props: {\n              path: 'text',\n              locale: 'ja'\n            }\n          }, [this._v('1')]);\n        }\n\n      }).$mount(el);\n      Vue.nextTick().then(() => {\n        assert.strictEqual(vm.$el.textContent, '一: 1');\n      }).then(done);\n    });","file":"unit/interpolation.test.js","skipped":false,"dir":"test"},{"name":"should be interpolated","suites":["component interpolation","included translation locale message"],"updatePoint":{"line":509,"column":30,"index":12765},"line":509,"code":"    it('should be interpolated', done => {\n      const el = document.createElement('div');\n      const vm = new Vue({\n        i18n,\n\n        render(h) {\n          return h('i18n', {\n            props: {\n              path: 'term'\n            }\n          }, [h('a', {\n            domProps: {\n              href: '/term',\n              textContent: this.$t('tos')\n            }\n          })]);\n        }\n\n      }).$mount(el);\n      Vue.nextTick().then(() => {\n        assert.strictEqual(vm.$el.innerHTML, 'I accept xxx <a href=\\\"/term\\\">Term of service</a>.');\n      }).then(done);\n    });","file":"unit/interpolation.test.js","skipped":false,"dir":"test"},{"name":"should be interpolated","suites":["component interpolation","slot","with default slot"],"updatePoint":{"line":535,"column":32,"index":13430},"line":535,"code":"      it('should be interpolated', done => {\n        const el = document.createElement('div');\n        const vm = new Vue({\n          i18n,\n\n          render(h) {\n            return h('i18n', {\n              props: {\n                path: 'text'\n              },\n              slot: ''\n            }, [this._v('1')]);\n          }\n\n        }).$mount(el);\n        Vue.nextTick().then(() => {\n          assert.strictEqual(vm.$el.textContent, 'one: 1');\n        }).then(done);\n      });","file":"unit/interpolation.test.js","skipped":false,"dir":"test"},{"name":"should be interpolated","suites":["component interpolation","slot","with named slots "],"updatePoint":{"line":556,"column":32,"index":13963},"line":556,"code":"      it('should be interpolated', done => {\n        const el = document.createElement('div');\n        const vm = new Vue({\n          i18n,\n\n          render(h) {\n            return h('i18n', {\n              props: {\n                path: 'named'\n              }\n            }, [h('template', {\n              slot: 'header'\n            }, [h('p', 'header')]), h('template', {\n              slot: 'footer'\n            }, [h('p', 'footer')])]);\n          }\n\n        }).$mount(el);\n        Vue.nextTick().then(() => {\n          assert.strictEqual(vm.$el.innerHTML, 'header: <p>header</p>, footer: <p>footer</p>');\n        }).then(done);\n      });","file":"unit/interpolation.test.js","skipped":false,"dir":"test"},{"name":"should be interpolated","suites":["component interpolation","slot","primitive nodes"],"updatePoint":{"line":580,"column":32,"index":14655},"line":580,"code":"      it('should be interpolated', done => {\n        const el = document.createElement('div');\n        const vm = new Vue({\n          i18n,\n\n          render(h) {\n            return h('i18n', {\n              props: {\n                path: 'primitive'\n              }\n            }, [h('template', {\n              slot: '0'\n            }, ['1']), h('template', {\n              slot: '1'\n            }, ['2'])]);\n          }\n\n        }).$mount(el);\n        Vue.nextTick().then(() => {\n          assert.strictEqual(vm.$el.innerHTML, 'one: 1, two: 2');\n        }).then(done);\n      });","file":"unit/interpolation.test.js","skipped":false,"dir":"test"},{"name":"should be interpolated","suites":["component interpolation","slot","linked"],"updatePoint":{"line":604,"column":32,"index":15276},"line":604,"code":"      it('should be interpolated', done => {\n        const el = document.createElement('div');\n        const vm = new Vue({\n          i18n,\n\n          render(h) {\n            return h('i18n', {\n              props: {\n                path: 'link'\n              }\n            }, [h('template', {\n              slot: '0'\n            }, ['1']), h('template', {\n              slot: '1'\n            }, ['2'])]);\n          }\n\n        }).$mount(el);\n        Vue.nextTick().then(() => {\n          assert.strictEqual(vm.$el.innerHTML, 'one: 1, two: 2');\n        }).then(done);\n      });","file":"unit/interpolation.test.js","skipped":false,"dir":"test"},{"name":"should be interpolated","suites":["component interpolation","slot","included translation locale message"],"updatePoint":{"line":628,"column":32,"index":15921},"line":628,"code":"      it('should be interpolated', done => {\n        const el = document.createElement('div');\n        const vm = new Vue({\n          i18n,\n\n          render(h) {\n            return h('i18n', {\n              props: {\n                path: 'term'\n              }\n            }, [h('template', {\n              slot: '0'\n            }, [h('a', {\n              domProps: {\n                href: '/term',\n                textContent: this.$t('tos')\n              }\n            })])]);\n          }\n\n        }).$mount(el);\n        Vue.nextTick().then(() => {\n          assert.strictEqual(vm.$el.innerHTML, 'I accept xxx <a href=\\\"/term\\\">Term of service</a>.');\n        }).then(done);\n      });","file":"unit/interpolation.test.js","skipped":false,"dir":"test"},{"name":"should be interpolated","suites":["component interpolation","slot","formatFallbackMessages"],"updatePoint":{"line":663,"column":32,"index":16839},"line":663,"code":"      it('should be interpolated', done => {\n        const el = document.createElement('div');\n        const vm = new Vue({\n          i18n,\n\n          render(h) {\n            return h('i18n', {\n              props: {\n                path: 'I am {0}'\n              }\n            }, [h('template', {\n              slot: '0'\n            }, [h('a', {\n              domProps: {\n                href: '/term',\n                textContent: this.$t('tos')\n              }\n            })])]);\n          }\n\n        }).$mount(el);\n        Vue.nextTick().then(() => {\n          assert.strictEqual(vm.$el.innerHTML, 'I am <a href=\\\"/term\\\">Term of service</a>');\n        }).then(done);\n      });","file":"unit/interpolation.test.js","skipped":false,"dir":"test"},{"name":"use ja message","suites":["component interpolation","slot","formatFallbackMessages"],"updatePoint":{"line":688,"column":24,"index":17514},"line":688,"code":"      it('use ja message', done => {\n        i18n.locale = 'ja';\n        const el = document.createElement('div');\n        const vm = new Vue({\n          i18n,\n\n          render(h) {\n            return h('i18n', {\n              props: {\n                path: 'I am {0}'\n              }\n            }, [h('template', {\n              slot: '0'\n            }, [h('a', {\n              domProps: {\n                href: '/term',\n                textContent: this.$t('tos')\n              }\n            })])]);\n          }\n\n        }).$mount(el);\n        Vue.nextTick().then(() => {\n          assert.strictEqual(vm.$el.innerHTML, '一: <a href=\\\"/term\\\">Term of service</a>');\n        }).then(done);\n      });","file":"unit/interpolation.test.js","skipped":false,"dir":"test"},{"name":"fallbackRoot has higher priority than formatFallbackMessages","suites":["component interpolation","slot","formatFallbackMessages"],"updatePoint":{"line":714,"column":70,"index":18261},"line":714,"code":"      it('fallbackRoot has higher priority than formatFallbackMessages', done => {\n        i18n = new VueI18n({\n          locale: 'ja',\n          messages,\n          fallbackLocale: 'en',\n          formatFallbackMessages: true,\n          fallbackRoot: true\n        });\n        const el = document.createElement('div');\n        const vm = new Vue({\n          i18n,\n\n          render(h) {\n            return h('i18n', {\n              props: {\n                path: 'I am {0}'\n              }\n            }, [h('template', {\n              slot: '0'\n            }, [h('a', {\n              domProps: {\n                href: '/term',\n                textContent: this.$t('tos')\n              }\n            })])]);\n          }\n\n        }).$mount(el);\n        Vue.nextTick().then(() => {\n          assert.strictEqual(vm.$el.innerHTML, '一: <a href=\\\"/term\\\">Term of service</a>');\n        }).then(done);\n      });","file":"unit/interpolation.test.js","skipped":false,"dir":"test"},{"name":"should be warned","suites":["component interpolation","warnning in render"],"updatePoint":{"line":749,"column":24,"index":19175},"line":749,"code":"    it('should be warned', () => {\n      const spy = sinon.spy(console, 'warn');\n      Component.render(() => {}, {\n        children: [],\n        parent: {}\n      });\n      assert(spy.notCalled === false);\n      assert(spy.callCount === 1);\n      spy.restore();\n    });","file":"unit/interpolation.test.js","skipped":false,"dir":"test"},{"name":"should be translated","suites":["issues","#24"],"updatePoint":{"line":21,"column":28,"index":473},"line":21,"code":"    it('should be translated', () => {\n      assert.strictEqual(vm.$t('continue-with-new-account'), messages[vm.$i18n.locale]['continue-with-new-account']);\n    });","file":"unit/issues.test.js","skipped":false,"dir":"test"},{"name":"should be translated","suites":["issues","#35"],"updatePoint":{"line":26,"column":28,"index":670},"line":26,"code":"    it('should be translated', () => {\n      assert.strictEqual(vm.$t('underscore', {\n        helloMsg: 'hello'\n      }), 'hello world');\n    });","file":"unit/issues.test.js","skipped":false,"dir":"test"},{"name":"should not be occurred error","suites":["issues","#42, #43"],"updatePoint":{"line":33,"column":36,"index":861},"line":33,"code":"    it('should not be occurred error', () => {\n      assert.strictEqual(vm.$t('message[\\'hello\\']'), messages[vm.$i18n.locale]['message']['hello']);\n    });","file":"unit/issues.test.js","skipped":false,"dir":"test"},{"name":"should be translated","suites":["issues","#51"],"updatePoint":{"line":38,"column":28,"index":1042},"line":38,"code":"    it('should be translated', () => {\n      assert.strictEqual(vm.$t('message.hyphen-locale'), 'hello hyphen');\n    });","file":"unit/issues.test.js","skipped":false,"dir":"test"},{"name":"should be translated","suites":["issues","#91, #51"],"updatePoint":{"line":43,"column":28,"index":1200},"line":43,"code":"    it('should be translated', () => {\n      const arrayMessages = messages[vm.$i18n.locale].issues.arrayBugs;\n\n      for (let i = 0; i < arrayMessages.length; i++) {\n        const item = vm.$t('issues.arrayBugs')[i];\n        assert.strictEqual(item, arrayMessages[i]);\n      }\n    });","file":"unit/issues.test.js","skipped":false,"dir":"test"},{"name":"should be translated","suites":["issues","#97"],"updatePoint":{"line":53,"column":28,"index":1518},"line":53,"code":"    it('should be translated', () => {\n      assert.strictEqual(vm.$t('message.1234'), messages[vm.$i18n.locale]['message']['1234']);\n      assert.strictEqual(vm.$t('message.1mixedKey'), messages[vm.$i18n.locale]['message']['1mixedKey']);\n    });","file":"unit/issues.test.js","skipped":false,"dir":"test"},{"name":"should be translated","suites":["issues","#169"],"updatePoint":{"line":59,"column":28,"index":1798},"line":59,"code":"    it('should be translated', done => {\n      const Component = Vue.extend({\n        __i18n: [JSON.stringify({\n          en: {\n            custom: 'custom block!'\n          }\n        })],\n\n        render(h) {\n          return h('p', {\n            ref: 'custom'\n          }, [this.$t('custom')]);\n        }\n\n      });\n      const vm = new Component({\n        i18n\n      }).$mount();\n      Vue.nextTick().then(() => {\n        assert.strictEqual(vm.$refs.custom.textContent, 'custom block!');\n      }).then(done);\n    });","file":"unit/issues.test.js","skipped":false,"dir":"test"},{"name":"should be translated","suites":["issues","#170"],"updatePoint":{"line":83,"column":28,"index":2351},"line":83,"code":"    it('should be translated', () => {\n      assert.strictEqual(vm.$i18n.t('message.linkHyphen'), messages.en['hyphen-hello']);\n      assert.strictEqual(vm.$i18n.t('message.linkUnderscore'), messages.en.underscore_hello);\n    });","file":"unit/issues.test.js","skipped":false,"dir":"test"},{"name":"should be translated","suites":["issues","#171"],"updatePoint":{"line":89,"column":28,"index":2614},"line":89,"code":"    it('should be translated', done => {\n      vm = new Vue({\n        i18n,\n\n        render(h) {\n          return h('i18n', {\n            props: {\n              path: 'message.linkList'\n            }\n          }, [h('strong', [this.$t('underscore_hello')]), h('strong', [this.$t('message.link')])]);\n        }\n\n      }).$mount();\n      Vue.nextTick().then(() => {\n        assert.strictEqual(vm.$el.innerHTML, 'the world: <strong>underscore the wolrd</strong> <strong>the world</strong>');\n      }).then(done);\n    });","file":"unit/issues.test.js","skipped":false,"dir":"test"},{"name":"should be translated","suites":["issues","#172"],"updatePoint":{"line":108,"column":28,"index":3165},"line":108,"code":"    it('should be translated', done => {\n      vm = new Vue({\n        i18n: new VueI18n({\n          locale: 'en',\n          messages: {\n            en: {\n              'company-name': 'billy-bob\\'s fine steaks.'\n            }\n          }\n        }),\n        components: {\n          comp: {\n            __i18n: [JSON.stringify({\n              en: {\n                title: '@:company-name - yeee hawwww!!!'\n              }\n            })],\n\n            render(h) {\n              return h('p', {\n                ref: 'title'\n              }, [this.$t('title')]);\n            }\n\n          }\n        },\n\n        render(h) {\n          return h('div', [h('comp', {\n            ref: 'comp'\n          })]);\n        }\n\n      }).$mount();\n      Vue.nextTick().then(() => {\n        assert.strictEqual(vm.$refs.comp.$refs.title.textContent, 'billy-bob\\'s fine steaks. - yeee hawwww!!!');\n      }).then(done);\n    });","file":"unit/issues.test.js","skipped":false,"dir":"test"},{"name":"should be translated","suites":["issues","#173"],"updatePoint":{"line":148,"column":28,"index":4102},"line":148,"code":"    it('should be translated', done => {\n      const Component = Vue.extend({\n        __i18n: [JSON.stringify({\n          en: {\n            custom: 'custom block!'\n          }\n        })],\n\n        render(h) {\n          return h('p', {\n            ref: 'custom'\n          }, [this.$t('custom')]);\n        }\n\n      });\n      const vm = new Component({\n        i18n: new VueI18n({\n          locale: 'en'\n        })\n      }).$mount();\n      Vue.nextTick().then(() => {\n        assert.strictEqual(vm.$refs.custom.textContent, 'custom block!');\n      }).then(done);\n    });","file":"unit/issues.test.js","skipped":false,"dir":"test"},{"name":"should be fallback","suites":["issues","#174"],"updatePoint":{"line":174,"column":26,"index":4702},"line":174,"code":"    it('should be fallback', done => {\n      vm = new Vue({\n        i18n: new VueI18n({\n          locale: 'en',\n          fallbackLocale: 'ja',\n          messages: {\n            en: {},\n            ja: {\n              msg: 'メッセージ'\n            }\n          }\n        }),\n        components: {\n          comp: {\n            i18n: {\n              messages: {\n                en: {},\n                ja: {\n                  hello: 'こんにちは'\n                }\n              }\n            },\n\n            render(h) {\n              return h('div', [h('p', {\n                ref: 'el1'\n              }, [this.$t('hello')]), h('p', {\n                ref: 'el2'\n              }, [this.$t('msg')])]);\n            }\n\n          }\n        },\n\n        render(h) {\n          return h('div', [h('comp', {\n            ref: 'comp'\n          })]);\n        }\n\n      }).$mount();\n      const el1 = vm.$refs.comp.$refs.el1;\n      const el2 = vm.$refs.comp.$refs.el2;\n      Vue.nextTick().then(() => {\n        assert.strictEqual(el1.textContent, 'こんにちは');\n        assert.strictEqual(el2.textContent, 'メッセージ');\n      }).then(done);\n    });","file":"unit/issues.test.js","skipped":false,"dir":"test"},{"name":"should be translated","suites":["issues","#176"],"updatePoint":{"line":224,"column":28,"index":5849},"line":224,"code":"    it('should be translated', done => {\n      vm = new Vue({\n        i18n: new VueI18n({\n          locale: 'xx',\n          fallbackLocale: 'en',\n          messages: {\n            en: {\n              'alpha': '[EN] alpha {gustav} value',\n              'bravo': '[EN] bravo {gustav} value',\n              'charlie': '[EN] charlie {0} value',\n              'delta': '[EN] delta {0} value'\n            },\n            xx: {\n              'bravo': '[XX] bravo {gustav} value',\n              'delta': '[XX] delta {0} value'\n            }\n          }\n        }),\n\n        render(h) {\n          return h('div', [h('p', {\n            ref: 'el1'\n          }, [this.$t('alpha', {\n            gustav: 'injected'\n          })]), h('p', {\n            ref: 'el2'\n          }, [this.$t('bravo', {\n            gustav: 'injected'\n          })]), h('p', {\n            ref: 'el3'\n          }, [this.$t('charlie', ['injected'])]), h('p', {\n            ref: 'el4'\n          }, [this.$t('delta', ['injected'])])]);\n        }\n\n      }).$mount();\n      Vue.nextTick().then(() => {\n        assert.strictEqual(vm.$refs.el1.textContent, '[EN] alpha injected value');\n        assert.strictEqual(vm.$refs.el2.textContent, '[XX] bravo injected value');\n        assert.strictEqual(vm.$refs.el3.textContent, '[EN] charlie injected value');\n        assert.strictEqual(vm.$refs.el4.textContent, '[XX] delta injected value');\n      }).then(done);\n    });","file":"unit/issues.test.js","skipped":false,"dir":"test"},{"name":"should be parsed","suites":["issues","#191"],"updatePoint":{"line":269,"column":24,"index":7297},"line":269,"code":"    it('should be parsed', () => {\n      const tokens = parse('{deposit}% PREPAYMENT');\n      assert(tokens.length === 2);\n      assert.strictEqual(tokens[0].type, 'named');\n      assert.strictEqual(tokens[0].value, 'deposit');\n      assert.strictEqual(tokens[1].type, 'text');\n      assert.strictEqual(tokens[1].value, '% PREPAYMENT');\n    });","file":"unit/issues.test.js","skipped":false,"dir":"test"},{"name":"should be translated","suites":["issues","#200"],"updatePoint":{"line":279,"column":28,"index":7679},"line":279,"code":"    it('should be translated', () => {\n      const el = document.createElement('div');\n      const Constructor = Vue.extend({\n        i18n\n      });\n      const vm = new Constructor({\n        render(h) {\n          return h('p', {\n            ref: 'text'\n          }, [this.$t('message.hello')]);\n        }\n\n      }).$mount(el);\n      assert.strictEqual(vm.$refs.text.textContent, messages.en.message.hello);\n    });","file":"unit/issues.test.js","skipped":false,"dir":"test"},{"name":"should be translated","suites":["issues","#203"],"updatePoint":{"line":296,"column":28,"index":8128},"line":296,"code":"    it('should be translated', done => {\n      const App = {\n        render(h) {\n          return h('p', {\n            ref: 'app'\n          }, [this.$t('hello')]);\n        }\n\n      };\n      vm = new Vue({\n        render(h) {\n          return h({\n            components: {\n              App\n            },\n\n            render(h) {\n              return h('app');\n            },\n\n            i18n: new VueI18n({\n              locale: 'en',\n              messages: {\n                en: {\n                  'hello': 'hello 203'\n                },\n                ja: {\n                  'hello': 'こんにちは 203'\n                }\n              }\n            })\n          });\n        }\n\n      }).$mount();\n      Vue.nextTick().then(() => {\n        assert.strictEqual(vm.$el.innerHTML, 'hello 203');\n      }).then(done);\n    });","file":"unit/issues.test.js","skipped":false,"dir":"test"},{"name":"should be warned if circular reference in linked locale message","suites":["issues","#247"],"updatePoint":{"line":337,"column":71,"index":9023},"line":337,"code":"    it('should be warned if circular reference in linked locale message', () => {\n      const spy = sinon.spy(console, 'warn');\n      assert.strictEqual(vm.$i18n.t('message.circular1'), 'Foo Bar Buz @:message.circular1');\n      assert(spy.notCalled === false);\n      assert(spy.callCount === 1);\n      spy.restore();\n    });","file":"unit/issues.test.js","skipped":false,"dir":"test"},{"name":"should not be warned if same non-circular link used repeatedly","suites":["issues","#247"],"updatePoint":{"line":344,"column":70,"index":9347},"line":344,"code":"    it('should not be warned if same non-circular link used repeatedly', () => {\n      const spy = sinon.spy(console, 'warn');\n      assert.strictEqual(vm.$i18n.t('message.linkTwice'), 'the world: the world');\n      assert(spy.notCalled === true);\n      assert(spy.callCount === 0);\n      spy.restore();\n    });","file":"unit/issues.test.js","skipped":false,"dir":"test"},{"name":"should be existed","suites":["issues","#349"],"updatePoint":{"line":353,"column":25,"index":9647},"line":353,"code":"    it('should be existed', done => {\n      assert(vm.$te('foo.bar.buz') === true);\n      done();\n    });","file":"unit/issues.test.js","skipped":false,"dir":"test"},{"name":"should be destroyed","suites":["issues","#377"],"updatePoint":{"line":359,"column":27,"index":9788},"line":359,"code":"    it('should be destroyed', done => {\n      const el = document.createElement('div');\n      const template = `<div id=\"app\">\n        <p>TIMEOUT : {{ timeout }}</p>\n        <div ref=\"el1\" v-if=\"!timeout\">\n          <span v-t=\"'SHOULD_NOT_DISPLAY_WHEN_TIMEOUT_EQUAL_TRUE'\"></span>\n        </div>\n        <div ref=\"el2\" v-if=\"timeout\">\n          <span class=\"\">{{ $t('CANNOT_REPRODUCE_WITHOUT_THIS') }}</span>\n        </div>\n      </div>`;\n      const {\n        render,\n        staticRenderFns\n      } = compiler.compileToFunctions(template);\n      const vm = new Vue({\n        i18n: new VueI18n({\n          locale: 'id'\n        }),\n\n        data() {\n          return {\n            timeout: false\n          };\n        },\n\n        methods: {\n          startLoading: function () {\n            this.timeout = true;\n            setTimeout(() => {\n              this.timeout = false;\n            }, 100);\n          }\n        },\n        render,\n        staticRenderFns\n      }).$mount(el);\n      Vue.nextTick().then(() => {\n        assert.strictEqual(vm.$refs.el1.outerHTML, '<div><span>SHOULD_NOT_DISPLAY_WHEN_TIMEOUT_EQUAL_TRUE</span></div>');\n        vm.startLoading();\n        delay(50).then(() => {\n          assert.strictEqual(vm.$refs.el2.outerHTML, '<div><span>CANNOT_REPRODUCE_WITHOUT_THIS</span></div>');\n          delay(60).then(() => {\n            assert.strictEqual(vm.$refs.el1.outerHTML, '<div><span>SHOULD_NOT_DISPLAY_WHEN_TIMEOUT_EQUAL_TRUE</span></div>');\n            done();\n          });\n        });\n      });\n    });","file":"unit/issues.test.js","skipped":false,"dir":"test"},{"name":"should return true","suites":["issues","#398"],"updatePoint":{"line":410,"column":26,"index":11351},"line":410,"code":"    it('should return true', () => {\n      assert.strictEqual(vm.$te('0123a'), true);\n      assert.strictEqual(vm.$te('01234'), true);\n      assert.strictEqual(vm.$te('message.1234'), true);\n    });","file":"unit/issues.test.js","skipped":false,"dir":"test"},{"name":"should be translated","suites":["issues","#430"],"updatePoint":{"line":417,"column":28,"index":11585},"line":417,"code":"    it('should be translated', () => {\n      assert.strictEqual(vm.$t('日本語'), messages[vm.$i18n.locale]['日本語']);\n      assert.strictEqual(vm.$t('message.sálvame'), messages[vm.$i18n.locale]['message']['sálvame']);\n    });","file":"unit/issues.test.js","skipped":false,"dir":"test"},{"name":"shoulbe be translated with v-t","suites":["issues","#450"],"updatePoint":{"line":423,"column":38,"index":11850},"line":423,"code":"    it('shoulbe be translated with v-t', done => {\n      const vm = new Vue({\n        i18n: new VueI18n({\n          locale: 'en',\n          messages: {\n            en: {\n              hello: 'hi there!'\n            }\n          }\n        }),\n\n        render(h) {\n          // <p ref=\"text\" v-t=\"'hello'\"></p>\n          return h('p', {\n            ref: 'text',\n            directives: [{\n              name: 't',\n              rawName: 'v-t',\n              value: 'hello',\n              expression: \"'hello'\"\n            }]\n          });\n        }\n\n      }).$mount(document.createElement('div'));\n      Vue.nextTick().then(() => {\n        assert.strictEqual(vm.$refs.text.textContent, 'hi there!');\n      }).then(() => {\n        vm.$i18n.setLocaleMessage('en', {\n          hello: 'hello there!'\n        });\n        vm.$forceUpdate();\n      }).then(() => {\n        assert.strictEqual(vm.$refs.text.textContent, 'hello there!');\n      }).then(done);\n    });","file":"unit/issues.test.js","skipped":false,"dir":"test"},{"name":"should be handled root vm instance","suites":["issues","#453"],"updatePoint":{"line":461,"column":42,"index":12841},"line":461,"code":"    it('should be handled root vm instance', done => {\n      const vm = new Vue({\n        i18n: new VueI18n({\n          locale: 'en',\n          missing: (locale, key, instance) => {\n            assert.strictEqual('ja', locale);\n            assert.strictEqual('foo.bar', key);\n            assert(vm === instance);\n            done();\n          }\n        }),\n        components: {\n          child: {\n            i18n: {\n              locale: 'ja'\n            },\n\n            render(h) {\n              return h('p', ['hello child']);\n            }\n\n          }\n        },\n\n        render(h) {\n          return h('div', [h('child', {\n            ref: 'child'\n          })]);\n        }\n\n      }).$mount();\n      vm.$nextTick(() => {\n        vm.$refs.child.$i18n.t('foo.bar', 'ja');\n      });\n    });","file":"unit/issues.test.js","skipped":false,"dir":"test"},{"name":"should be merged locale message","suites":["issues","#458"],"updatePoint":{"line":498,"column":39,"index":13666},"line":498,"code":"    it('should be merged locale message', done => {\n      const vm = new Vue({\n        i18n: new VueI18n({\n          locale: 'en',\n          messages: {\n            hello: 'hello world!'\n          }\n        }),\n\n        render(h) {\n          return h('div', [h('p', {\n            ref: 'text1'\n          }, [this.$t('key1')]), h('p', {\n            ref: 'text2'\n          }, [this.$t('shared.key1')]), h('p', {\n            ref: 'text3'\n          }, [this.$t('key2')]), h('p', {\n            ref: 'text4'\n          }, [this.$t('shared.key2')])]);\n        }\n\n      }).$mount();\n      Vue.nextTick().then(() => {\n        vm.$i18n.mergeLocaleMessage('en', {\n          key1: 'Hello Module 1',\n          shared: {\n            key1: 'Hello Module 1 shared key 1'\n          }\n        });\n        vm.$i18n.mergeLocaleMessage('en', {\n          key2: 'Hello Module 2',\n          shared: {\n            key2: 'Hello Module 2 shared key 2'\n          }\n        });\n      }).then(() => {\n        assert.strictEqual(vm.$refs.text1.textContent, 'Hello Module 1');\n        assert.strictEqual(vm.$refs.text2.textContent, 'Hello Module 1 shared key 1');\n        assert.strictEqual(vm.$refs.text3.textContent, 'Hello Module 2');\n        assert.strictEqual(vm.$refs.text4.textContent, 'Hello Module 2 shared key 2');\n      }).then(done);\n    });","file":"unit/issues.test.js","skipped":false,"dir":"test"},{"name":"should fallback to default pluralization","suites":["issues","#78, #464"],"updatePoint":{"line":542,"column":48,"index":15033},"line":542,"code":"    it('should fallback to default pluralization', () => {\n      // / Test default pluralization rule (english)\n      const i18n = new VueI18n({\n        locale: 'en',\n        messages: {\n          'en': {\n            test: 'no tests | 1 test | {n} tests'\n          }\n        }\n      });\n      assert.strictEqual(i18n.tc('test', 1), '1 test');\n      assert.strictEqual(i18n.tc('test', 0), 'no tests');\n      assert.strictEqual(i18n.tc('test', 10), '10 tests');\n    });","file":"unit/issues.test.js","skipped":false,"dir":"test"},{"name":"should use custom pluralization if available","suites":["issues","#78, #464"],"updatePoint":{"line":556,"column":52,"index":15505},"line":556,"code":"    it('should use custom pluralization if available', () => {\n      // Test custom pluralization rule (slavic languages)\n      function slavicPluralization(choice, choicesLength) {\n        if (choice === 0) {\n          return 0;\n        }\n\n        const teen = choice > 10 && choice < 20;\n        const endsWithOne = choice % 10 === 1;\n\n        if (choicesLength < 4) {\n          return !teen && endsWithOne ? 1 : 2;\n        }\n\n        if (!teen && endsWithOne) {\n          return 1;\n        }\n\n        if (!teen && choice % 10 >= 2 && choice % 10 <= 4) {\n          return 2;\n        }\n\n        return choicesLength < 4 ? 2 : 3;\n      }\n\n      let i18n = new VueI18n({\n        locale: 'en',\n        messages: {\n          'en': {\n            test: 'no tests | 1 test | {n} tests'\n          },\n          'ru': {\n            test: 'нет тестов | 1 тест | {n} теста | {n} тестов'\n          }\n        },\n        pluralizationRules: {\n          'ru': slavicPluralization\n        }\n      });\n      assert.strictEqual(i18n.tc('test', 1), '1 test');\n      assert.strictEqual(i18n.tc('test', 0), 'no tests');\n      assert.strictEqual(i18n.tc('test', 10), '10 tests');\n      i18n.locale = 'ru';\n      assert.strictEqual(i18n.tc('test', 1), '1 тест');\n      assert.strictEqual(i18n.tc('test', 3), '3 теста');\n      assert.strictEqual(i18n.tc('test', 0), 'нет тестов');\n      assert.strictEqual(i18n.tc('test', 10), '10 тестов');\n      i18n = new VueI18n({\n        locale: 'ru',\n        messages: {\n          ru: {\n            car: '0 машин | {n} машина | {n} машины | {n} машин'\n          }\n        },\n        pluralizationRules: {\n          ru: slavicPluralization\n        }\n      });\n      vm = new Vue({\n        i18n\n      });\n      assert.strictEqual(vm.$tc('car', 0), '0 машин');\n      assert.strictEqual(vm.$tc('car', 1), '1 машина');\n      assert.strictEqual(vm.$tc('car', 2), '2 машины');\n      assert.strictEqual(vm.$tc('car', 4), '4 машины');\n      assert.strictEqual(vm.$tc('car', 12), '12 машин');\n      assert.strictEqual(vm.$tc('car', 21), '21 машина');\n    });","file":"unit/issues.test.js","skipped":false,"dir":"test"},{"name":"ensures backward-compatibility with #451","suites":["issues","#78, #464"],"updatePoint":{"line":624,"column":48,"index":17565},"line":624,"code":"    it('ensures backward-compatibility with #451', () => {\n      const defaultImpl = VueI18n.prototype.getChoiceIndex;\n\n      VueI18n.prototype.getChoiceIndex = function (choice, choicesLength) {\n        if (this.locale !== 'ru') {\n          return defaultImpl.apply(this, arguments);\n        }\n\n        if (choice === 0) {\n          return 0;\n        }\n\n        const teen = choice > 10 && choice < 20;\n        const endsWithOne = choice % 10 === 1;\n\n        if (choicesLength < 4) {\n          return !teen && endsWithOne ? 1 : 2;\n        }\n\n        if (!teen && endsWithOne) {\n          return 1;\n        }\n\n        if (!teen && choice % 10 >= 2 && choice % 10 <= 4) {\n          return 2;\n        }\n\n        return choicesLength < 4 ? 2 : 3;\n      };\n\n      i18n = new VueI18n({\n        locale: 'ru',\n        messages: {\n          ru: {\n            car: '0 машин | {n} машина | {n} машины | {n} машин'\n          }\n        }\n      });\n      vm = new Vue({\n        i18n\n      });\n      assert.strictEqual(vm.$tc('car', 0), '0 машин');\n      assert.strictEqual(vm.$tc('car', 1), '1 машина');\n      assert.strictEqual(vm.$tc('car', 2), '2 машины');\n      assert.strictEqual(vm.$tc('car', 4), '4 машины');\n      assert.strictEqual(vm.$tc('car', 12), '12 машин');\n      assert.strictEqual(vm.$tc('car', 21), '21 машина'); // Set the default implementation back\n\n      VueI18n.prototype.getChoiceIndex = defaultImpl;\n    });","file":"unit/issues.test.js","skipped":false,"dir":"test"},{"name":"should be existed","suites":["issues","#468"],"updatePoint":{"line":676,"column":25,"index":18995},"line":676,"code":"    it('should be existed', done => {\n      assert(vm.$te('hello world') === true);\n      done();\n    });","file":"unit/issues.test.js","skipped":false,"dir":"test"},{"name":"passes path to the formatter","suites":["issues","#484"],"updatePoint":{"line":682,"column":36,"index":19145},"line":682,"code":"    it('passes path to the formatter', () => {\n      const testPath = 'test.deep.message';\n      i18n = new VueI18n({\n        locale: 'en',\n        messages: {\n          en: {\n            test: {\n              deep: {\n                message: 'Hello!'\n              }\n            }\n          }\n        },\n        formatter: {\n          interpolate(message, values, path) {\n            assert.strictEqual(path, testPath);\n            return null; // pass the case to the default formatter\n          }\n\n        }\n      });\n      assert.strictEqual(i18n.t(testPath), 'Hello!');\n    });","file":"unit/issues.test.js","skipped":false,"dir":"test"},{"name":"should be translated","suites":["issues","#478"],"updatePoint":{"line":707,"column":28,"index":19753},"line":707,"code":"    it('should be translated', () => {\n      const res = vm.$t('message.linkHelloName', {\n        name: 'World {text}'\n      });\n      assert.strictEqual(res, 'Hello World {text}');\n    });","file":"unit/issues.test.js","skipped":false,"dir":"test"},{"name":"should be translated","suites":["issues","#478"],"updatePoint":{"line":713,"column":28,"index":19943},"line":713,"code":"    it('should be translated', () => {\n      const res = vm.$t('message.linkHelloName', {\n        name: 'World {text}',\n        text: 'something'\n      });\n      assert.strictEqual(res, 'Hello World {text}');\n    });","file":"unit/issues.test.js","skipped":false,"dir":"test"},{"name":"should be translated","suites":["issues","#478"],"updatePoint":{"line":720,"column":28,"index":20160},"line":720,"code":"    it('should be translated', () => {\n      const res = vm.$t('message.linkLinkHelloName', {\n        name: 'World {text}',\n        text: 'something'\n      });\n      assert.strictEqual(res, 'Hello World {text}');\n    });","file":"unit/issues.test.js","skipped":false,"dir":"test"},{"name":"$te should return true for empty string","suites":["issues","#515"],"updatePoint":{"line":729,"column":47,"index":20433},"line":729,"code":"    it('$te should return true for empty string', () => {\n      assert.strictEqual(vm.$te('message.empty'), true);\n    });","file":"unit/issues.test.js","skipped":false,"dir":"test"},{"name":"$t should not throw when invoked on a destroyed component","suites":["issues","#879"],"updatePoint":{"line":734,"column":65,"index":20607},"line":734,"code":"    it('$t should not throw when invoked on a destroyed component', async () => {\n      const vm = new Vue({\n        i18n: new VueI18n({\n          locale: 'en'\n        }),\n        methods: {\n          test: async function () {\n            // Long running async method that terminates after the component is destroyed.\n            await new Promise(resolve => setTimeout(resolve, 50));\n            this.$t('anything');\n          }\n        }\n      });\n      const promise = vm.test(); // invocation before being destroyed\n\n      vm.$destroy();\n      await promise; // should not throw\n    });","file":"unit/issues.test.js","skipped":false,"dir":"test"},{"name":"should not call \"componentInstanceCreatedListener\" on not creating local instance","suites":["issues","#892)"],"updatePoint":{"line":754,"column":89,"index":21256},"line":754,"code":"    it('should not call \"componentInstanceCreatedListener\" on not creating local instance', () => {\n      const componentInstanceCreatedListener = sinon.spy();\n      new Vue({\n        i18n: new VueI18n({\n          locale: 'en',\n          componentInstanceCreatedListener\n        }),\n        components: {\n          child: {\n            render(h) {\n              return h('p', ['hello child']);\n            }\n\n          }\n        },\n\n        render(h) {\n          return h('div', [h('child', {\n            ref: 'child'\n          })]);\n        }\n\n      }).$mount();\n      assert(componentInstanceCreatedListener.called === false);\n    });","file":"unit/issues.test.js","skipped":false,"dir":"test"},{"name":"should call \"componentInstanceCreatedListener\" on creating local instance","suites":["issues","#892)"],"updatePoint":{"line":779,"column":81,"index":21885},"line":779,"code":"    it('should call \"componentInstanceCreatedListener\" on creating local instance', () => {\n      const componentInstanceCreatedListener = sinon.spy();\n      const i18n = new VueI18n({\n        locale: 'en',\n        componentInstanceCreatedListener\n      });\n      new Vue({\n        i18n,\n        components: {\n          child: {\n            i18n: {\n              locale: 'ja'\n            },\n\n            render(h) {\n              return h('p', ['hello child']);\n            }\n\n          }\n        },\n\n        render(h) {\n          return h('div', [h('child', {\n            ref: 'child'\n          })]);\n        }\n\n      }).$mount();\n      assert(componentInstanceCreatedListener.calledOnce === true);\n      console.info(componentInstanceCreatedListener.args);\n      assert(componentInstanceCreatedListener.args[0][0] instanceof VueI18n); // new instance\n\n      assert.strictEqual(componentInstanceCreatedListener.args[0][1], i18n);\n    });","file":"unit/issues.test.js","skipped":false,"dir":"test"},{"name":"should merge __i18n and i18n","suites":["issues","#996"],"updatePoint":{"line":815,"column":36,"index":22812},"line":815,"code":"    it('should merge __i18n and i18n', done => {\n      const Component = Vue.extend({\n        __i18n: [JSON.stringify({\n          en: {\n            custom: 'custom block!'\n          }\n        })],\n\n        render(h) {\n          return h('p');\n        }\n\n      });\n      const vm = new Component({\n        i18n: new VueI18n({\n          locale: 'en',\n          messages: {\n            en: {\n              another: 'another block!'\n            }\n          }\n        })\n      }).$mount();\n      Vue.nextTick().then(() => {\n        assert.strictEqual(vm.$t('another'), 'another block!');\n        assert.strictEqual(vm.$t('custom'), 'custom block!');\n      }).then(done).catch(console.error);\n    });","file":"unit/issues.test.js","skipped":false,"dir":"test"},{"name":"should be translated","suites":["issues","#1380"],"updatePoint":{"line":845,"column":28,"index":23533},"line":845,"code":"    it('should be translated', done => {\n      vm = new Vue({\n        i18n: new VueI18n({\n          locale: 'en',\n          messages: {\n            en: {\n              'link-with-slash': '@:key/with/slash',\n              'key/with/slash': 'should be translated'\n            }\n          }\n        }),\n\n        render(h) {\n          return h('div', [h('p', {\n            ref: 'text'\n          }, [this.$t('link-with-slash')])]);\n        }\n\n      }).$mount();\n      Vue.nextTick().then(() => {\n        assert.strictEqual(vm.$refs.text.textContent, 'should be translated');\n      }).then(done);\n    });","file":"unit/issues.test.js","skipped":false,"dir":"test"},{"name":"should be worked","suites":["message function","simple"],"updatePoint":{"line":3,"column":24,"index":91},"line":3,"code":"    it('should be worked', () => {\n      i18n = new VueI18n({\n        locale: 'ja',\n        fallbackLocale: 'en',\n        messages: {\n          en: {\n            hello: ctx => 'hello'\n          },\n          ja: {\n            hello: ctx => 'こんにちは！'\n          }\n        }\n      });\n      assert.strictEqual(i18n.t('hello'), 'こんにちは！');\n    });","file":"unit/message_function.test.js","skipped":false,"dir":"test"},{"name":"should be worked","suites":["message function","list argument"],"updatePoint":{"line":20,"column":24,"index":474},"line":20,"code":"    it('should be worked', () => {\n      i18n = new VueI18n({\n        locale: 'ja',\n        fallbackLocale: 'en',\n        messages: {\n          en: {\n            hello: ctx => `hello, ${ctx.list(0)}!`\n          },\n          ja: {\n            hello: ctx => `こんにちは、${ctx.list(0)}！`\n          }\n        }\n      });\n      assert.strictEqual(i18n.t('hello', ['kazupon']), 'こんにちは、kazupon！');\n    });","file":"unit/message_function.test.js","skipped":false,"dir":"test"},{"name":"should be worked","suites":["message function","named argument"],"updatePoint":{"line":37,"column":24,"index":911},"line":37,"code":"    it('should be worked', () => {\n      i18n = new VueI18n({\n        locale: 'ja',\n        fallbackLocale: 'en',\n        messages: {\n          en: {\n            hello: ctx => `hello, ${ctx.named('name')}!`\n          },\n          ja: {\n            hello: ctx => `こんにちは、${ctx.named('name')}！`\n          }\n        }\n      });\n      assert.strictEqual(i18n.t('hello', {\n        name: 'kazupon'\n      }), 'こんにちは、kazupon！');\n    });","file":"unit/message_function.test.js","skipped":false,"dir":"test"},{"name":"receives formatter, values, path, messages, locale","suites":["message function","named argument"],"updatePoint":{"line":55,"column":56,"index":1377},"line":55,"code":"  it('receives formatter, values, path, messages, locale', () => {\n    i18n = new VueI18n({\n      locale: 'ja',\n      fallbackLocale: 'en',\n      messages: {\n        en: {\n          hello: ctx => ctx.formatter.interpolate(`hey {x} {y}`, ctx.values, ctx.path).join('')\n        },\n        ja: {\n          hello: ctx => ctx.formatter.interpolate(`hey {x} {y}`, ctx.values, ctx.path).join('') + ` ${ctx.messages[ctx.locale].world}`,\n          world: 'w0r1d'\n        }\n      }\n    });\n    assert.strictEqual(i18n.t('hello', {\n      x: 'foo',\n      y: 'bar'\n    }), 'hey foo bar w0r1d');\n  });","file":"unit/message_function.test.js","skipped":false,"dir":"test"},{"name":"receives linked function for resolving linked messages","suites":["message function","named argument"],"updatePoint":{"line":74,"column":60,"index":1969},"line":74,"code":"  it('receives linked function for resolving linked messages', () => {\n    i18n = new VueI18n({\n      locale: 'en',\n      messages: {\n        en: {\n          hello: ctx => `hello ${ctx.linked('foo')}`,\n          foo: 'world'\n        }\n      }\n    });\n    assert.strictEqual(i18n.t('hello'), 'hello world');\n  });","file":"unit/message_function.test.js","skipped":false,"dir":"test"},{"name":"should be workd","suites":["message","messages"],"updatePoint":{"line":29,"column":23,"index":785},"line":29,"code":"    it('should be workd', () => {\n      assert.deepEqual(messages, i18n.messages);\n    });","file":"unit/message.test.js","skipped":false,"dir":"test"},{"name":"should be worked","suites":["message","getLocaleMessage / setLocaleMessage"],"updatePoint":{"line":34,"column":24,"index":941},"line":34,"code":"    it('should be worked', done => {\n      const vm = new Vue({\n        i18n,\n\n        render(h) {\n          return h('p', {\n            ref: 'text'\n          }, [this.$t('message.hello')]);\n        }\n\n      }).$mount(el);\n      const {\n        text\n      } = vm.$refs;\n      Vue.nextTick().then(() => {\n        assert.strictEqual(text.textContent, messages.en.message.hello); // hot reload (set reactivity messages)\n\n        messages.en.message.hello = expectEnLocale;\n        i18n.setLocaleMessage('en', messages.en);\n      }).then(() => {\n        assert.strictEqual(text.textContent, expectEnLocale); // upade locale\n\n        i18n.setLocaleMessage('ja', expectJaLocaleMessage);\n        i18n.locale = 'ja';\n      }).then(() => {\n        assert.strictEqual(text.textContent, expectJaLocaleMessage.message.hello);\n      }).then(done);\n    });","file":"unit/message.test.js","skipped":false,"dir":"test"},{"name":"should be merged","suites":["message","mergeLocaleMessage"],"updatePoint":{"line":64,"column":24,"index":1831},"line":64,"code":"    it('should be merged', () => {\n      i18n = new VueI18n({\n        locale: 'en',\n        messages: {\n          en: {\n            foo: 'bar'\n          },\n          ja: {\n            foo: 'バー'\n          }\n        }\n      });\n      i18n.mergeLocaleMessage('en', {\n        bar: 'foo'\n      });\n      assert.deepEqual({\n        foo: 'bar',\n        bar: 'foo'\n      }, i18n.getLocaleMessage('en'));\n    });","file":"unit/message.test.js","skipped":false,"dir":"test"},{"name":"Should be merged and notified if the target is empty","suites":["message","mergeLocaleMessage"],"updatePoint":{"line":85,"column":58,"index":2275},"line":85,"code":"  it('Should be merged and notified if the target is empty', done => {\n    const i18n = new VueI18n({\n      locale: 'ru',\n      messages: {\n        ru: {}\n      }\n    });\n\n    const uw = i18n._vm.$watch('messages.ru.foo', (newVal, oldVal, o) => {\n      assert.equal(newVal, 'бар');\n      uw();\n      done();\n    });\n\n    i18n.mergeLocaleMessage('ru', {\n      foo: 'бар'\n    });\n    assert.deepEqual({\n      foo: 'бар'\n    }, i18n.getLocaleMessage('ru'));\n  });","file":"unit/message.test.js","skipped":false,"dir":"test"},{"name":"should be handled translate missing","suites":["missing","via i18n instance API"],"updatePoint":{"line":3,"column":43,"index":116},"line":3,"code":"    it('should be handled translate missing', done => {\n      const i18n = new VueI18n({\n        locale: 'en',\n        missing: (locale, key, vm) => {\n          assert.strictEqual('en', locale);\n          assert.strictEqual('foo.bar.buz', key);\n          assert(vm === null);\n          done();\n        }\n      });\n      i18n.t('foo.bar.buz');\n    });","file":"unit/missing.test.js","skipped":false,"dir":"test"},{"name":"should be handled translate missing","suites":["missing","via vue instance"],"updatePoint":{"line":17,"column":43,"index":512},"line":17,"code":"    it('should be handled translate missing', done => {\n      const vm = new Vue({\n        i18n: new VueI18n({\n          locale: 'en',\n          missing: (locale, key, instance) => {\n            assert.strictEqual('en', locale);\n            assert.strictEqual('foo.bar.buz', key);\n            assert(vm === instance);\n            done();\n          }\n        })\n      });\n      vm.$t('foo.bar.buz');\n    });","file":"unit/missing.test.js","skipped":false,"dir":"test"},{"name":"should be worked","suites":["missing","i18n missing getter/setter"],"updatePoint":{"line":33,"column":24,"index":955},"line":33,"code":"    it('should be worked', done => {\n      const missing = (locale, key) => {\n        assert(false);\n      };\n\n      const i18n = new VueI18n({\n        locale: 'en',\n        missing\n      });\n      assert.strictEqual(missing, i18n.missing);\n\n      i18n.missing = (locale, key, vm) => {\n        done();\n      };\n\n      i18n.t('foo.bar.buz');\n    });","file":"unit/missing.test.js","skipped":false,"dir":"test"},{"name":"should receive the values for interpolation","suites":["missing","i18n missing values"],"updatePoint":{"line":52,"column":51,"index":1379},"line":52,"code":"    it('should receive the values for interpolation', done => {\n      const testValues = {\n        foo: 'bar',\n        num: 1234\n      };\n\n      const missing = (locale, key, vm, values) => {\n        assert.strictEqual('en', locale);\n        assert.strictEqual('cannot.find', key); // `values` is normalized to be an array.\n\n        assert.strictEqual('bar', values[0].foo);\n        assert.strictEqual(1234, values[0].num);\n        done();\n      };\n\n      const i18n = new VueI18n({\n        locale: 'en',\n        missing\n      });\n      i18n.t('cannot.find', testValues);\n    });","file":"unit/missing.test.js","skipped":false,"dir":"test"},{"name":"should be returned missing handler","suites":["missing","missing handler return"],"updatePoint":{"line":75,"column":42,"index":2001},"line":75,"code":"    it('should be returned missing handler', done => {\n      const i18n = new VueI18n({\n        locale: 'en',\n        missing: (locale, key, vm) => {\n          return key;\n        }\n      });\n      assert.strictEqual(i18n.t('foo.bar.buz'), 'foo.bar.buz');\n      done();\n    });","file":"unit/missing.test.js","skipped":false,"dir":"test"},{"name":"should be warned","suites":["mixin","beforeCreate","invalid i18n option"],"updatePoint":{"line":5,"column":26,"index":175},"line":5,"code":"      it('should be warned', () => {\n        const spy = sinon.spy(console, 'warn'); // called from Vue core\n\n        new Vue({\n          i18n: 1\n        });\n        assert(spy.notCalled === false);\n        assert(spy.callCount === 1);\n        spy.restore();\n      });","file":"unit/mixin.test.js","skipped":false,"dir":"test"},{"name":"should be succeeded","suites":["mixin","beforeDestroy","not assign VueI18n instance"],"updatePoint":{"line":19,"column":29,"index":549},"line":19,"code":"      it('should be succeeded', () => {\n        assert(defineMixin().beforeDestroy() === undefined);\n      });","file":"unit/mixin.test.js","skipped":false,"dir":"test"},{"name":"should be formatted","suites":["basic"],"updatePoint":{"line":15,"column":27,"index":398},"line":15,"code":"    it('should be formatted', done => {\n      const vm = new Vue({\n        i18n,\n        el: document.createElement('div'),\n\n        render(h) {\n          return h('i18n-n', {\n            props: {\n              value\n            }\n          });\n        }\n\n      });\n      Vue.nextTick().then(() => {\n        assert.strictEqual(vm.$el.textContent, '10,100');\n      }).then(done);\n    });","file":"unit/number_component.test.js","skipped":false,"dir":"test"},{"name":"should be formatted","suites":["format","as string property"],"updatePoint":{"line":36,"column":29,"index":865},"line":36,"code":"      it('should be formatted', done => {\n        const vm = new Vue({\n          i18n,\n          el: document.createElement('div'),\n\n          render(h) {\n            return h('i18n-n', {\n              props: {\n                value,\n                format: 'currency'\n              }\n            });\n          }\n\n        });\n        Vue.nextTick().then(() => {\n          assert.strictEqual(vm.$el.textContent, '$10,100.00');\n        }).then(done);\n      });","file":"unit/number_component.test.js","skipped":false,"dir":"test"},{"name":"should be formatted","suites":["format","as object property"],"updatePoint":{"line":57,"column":29,"index":1375},"line":57,"code":"      it('should be formatted', done => {\n        const vm = new Vue({\n          i18n,\n          el: document.createElement('div'),\n\n          render(h) {\n            return h('i18n-n', {\n              props: {\n                value,\n                format: {\n                  key: 'currency'\n                }\n              }\n            });\n          }\n\n        });\n        Vue.nextTick().then(() => {\n          assert.strictEqual(vm.$el.textContent, '$10,100.00');\n        }).then(done);\n      });","file":"unit/number_component.test.js","skipped":false,"dir":"test"},{"name":"should be formatted","suites":["locale"],"updatePoint":{"line":81,"column":27,"index":1918},"line":81,"code":"    it('should be formatted', done => {\n      const vm = new Vue({\n        i18n,\n        el: document.createElement('div'),\n\n        render(h) {\n          return h('i18n-n', {\n            props: {\n              value,\n              format: 'currency',\n              locale: 'ja-JP'\n            }\n          });\n        }\n\n      });\n      Vue.nextTick().then(() => {\n        assert.strictEqual(vm.$el.textContent, '￥10,100');\n      }).then(done);\n    });","file":"unit/number_component.test.js","skipped":false,"dir":"test"},{"name":"should default to span","suites":["tag"],"updatePoint":{"line":103,"column":30,"index":2406},"line":103,"code":"    it('should default to span', done => {\n      const vm = new Vue({\n        i18n,\n        el: document.createElement('div'),\n\n        render(h) {\n          return h('i18n-n', {\n            props: {\n              value\n            }\n          });\n        }\n\n      });\n      Vue.nextTick().then(() => {\n        assert.strictEqual(vm.$el.outerHTML, '<span>10,100</span>');\n      }).then(done);\n    });","file":"unit/number_component.test.js","skipped":false,"dir":"test"},{"name":"should be formatted","suites":["tag"],"updatePoint":{"line":121,"column":27,"index":2804},"line":121,"code":"    it('should be formatted', done => {\n      const vm = new Vue({\n        i18n,\n        el: document.createElement('div'),\n\n        render(h) {\n          return h('i18n-n', {\n            props: {\n              value,\n              tag: 'p'\n            }\n          });\n        }\n\n      });\n      Vue.nextTick().then(() => {\n        assert.strictEqual(vm.$el.outerHTML, '<p>10,100</p>');\n      }).then(done);\n    });","file":"unit/number_component.test.js","skipped":false,"dir":"test"},{"name":"of value true defaults to span","suites":["tag"],"updatePoint":{"line":140,"column":38,"index":3231},"line":140,"code":"    it('of value true defaults to span', done => {\n      const vm = new Vue({\n        i18n,\n        el: document.createElement('div'),\n\n        render(h) {\n          return h('i18n-n', {\n            props: {\n              value,\n              tag: true\n            }\n          });\n        }\n\n      });\n      Vue.nextTick().then(() => {\n        assert.strictEqual(vm.$el.outerHTML, '<span>10,100</span>');\n      }).then(done);\n    });","file":"unit/number_component.test.js","skipped":false,"dir":"test"},{"name":"of value false does not apply a root container","suites":["tag"],"updatePoint":{"line":159,"column":54,"index":3681},"line":159,"code":"    it('of value false does not apply a root container', done => {\n      const vm = new Vue({\n        i18n,\n        el: document.createElement('div'),\n\n        render(h) {\n          return h('i18n-n', {\n            props: {\n              value,\n              tag: false\n            }\n          });\n        }\n\n      });\n      Vue.nextTick().then(() => {\n        console.log('\\n\\n\\n\\n\\n\\n\\n', vm.$el, '\\n\\n', vm.$el.nodeType);\n        assert.strictEqual(vm.$el.nodeType, Node.TEXT_NODE);\n        assert.strictEqual(vm.$el.data, '10,100');\n      }).then(done);\n    });","file":"unit/number_component.test.js","skipped":false,"dir":"test"},{"name":"should be formatted","suites":["explicit options","without key"],"updatePoint":{"line":183,"column":29,"index":4303},"line":183,"code":"      it('should be formatted', done => {\n        const vm = new Vue({\n          i18n,\n          el: document.createElement('div'),\n\n          render(h) {\n            return h('i18n-n', {\n              props: {\n                value,\n                format: {\n                  style: 'currency',\n                  currency: 'JPY'\n                }\n              }\n            });\n          }\n\n        });\n        Vue.nextTick().then(() => {\n          assert.strictEqual(vm.$el.textContent, '¥10,100');\n        }).then(done);\n      });","file":"unit/number_component.test.js","skipped":false,"dir":"test"},{"name":"should respect other number options","suites":["explicit options","without key"],"updatePoint":{"line":205,"column":45,"index":4855},"line":205,"code":"      it('should respect other number options', done => {\n        const vm = new Vue({\n          i18n,\n          el: document.createElement('div'),\n\n          render(h) {\n            return h('i18n-n', {\n              props: {\n                value,\n                format: {\n                  style: 'currency',\n                  currency: 'EUR',\n                  currencyDisplay: 'code'\n                }\n              }\n            });\n          }\n\n        });\n        Vue.nextTick().then(() => {\n          assert.strictEqual(vm.$el.textContent, 'EUR 10,100.00');\n        }).then(done);\n      });","file":"unit/number_component.test.js","skipped":false,"dir":"test"},{"name":"should be formatted","suites":["explicit options","with key"],"updatePoint":{"line":230,"column":29,"index":5481},"line":230,"code":"      it('should be formatted', done => {\n        const vm = new Vue({\n          i18n,\n          el: document.createElement('div'),\n\n          render(h) {\n            return h('i18n-n', {\n              props: {\n                value,\n                format: {\n                  key: 'currency',\n                  currency: 'JPY'\n                }\n              }\n            });\n          }\n\n        });\n        Vue.nextTick().then(() => {\n          assert.strictEqual(vm.$el.textContent, '¥10,100');\n        }).then(done);\n      });","file":"unit/number_component.test.js","skipped":false,"dir":"test"},{"name":"should respect other number options","suites":["explicit options","with key"],"updatePoint":{"line":252,"column":45,"index":6031},"line":252,"code":"      it('should respect other number options', done => {\n        const vm = new Vue({\n          i18n,\n          el: document.createElement('div'),\n\n          render(h) {\n            return h('i18n-n', {\n              props: {\n                value,\n                format: {\n                  key: 'currency',\n                  currency: 'EUR',\n                  currencyDisplay: 'code'\n                }\n              }\n            });\n          }\n\n        });\n        Vue.nextTick().then(() => {\n          assert.strictEqual(vm.$el.textContent, 'EUR 10,100.00');\n        }).then(done);\n      });","file":"unit/number_component.test.js","skipped":false,"dir":"test"},{"name":"should be formatted","suites":["partial formatting"],"updatePoint":{"line":278,"column":27,"index":6667},"line":278,"code":"    it('should be formatted', done => {\n      const vm = new Vue({\n        i18n,\n        el: document.createElement('div'),\n\n        render(h) {\n          return h('i18n-n', {\n            props: {\n              value\n            },\n            scopedSlots: {\n              integer: props => h('span', props.integer),\n              group: props => h('p', props.group)\n            }\n          });\n        }\n\n      });\n      Vue.nextTick().then(() => {\n        assert.strictEqual(vm.$el.innerHTML, '<span>10</span><p>,</p><span>100</span>');\n      }).then(done);\n    });","file":"unit/number_component.test.js","skipped":false,"dir":"test"},{"name":"should pass part index as scoped prop","suites":["partial formatting"],"updatePoint":{"line":300,"column":45,"index":7253},"line":300,"code":"    it('should pass part index as scoped prop', done => {\n      const vm = new Vue({\n        i18n,\n        el: document.createElement('div'),\n\n        render(h) {\n          return h('i18n-n', {\n            props: {\n              value: 1000000,\n              format: 'currency'\n            },\n            scopedSlots: {\n              currency: props => h('span', new Array(3).fill(props.currency).join('')),\n              group: props => h('p', {\n                staticClass: props.index\n              }, props.group)\n            }\n          });\n        }\n\n      });\n      Vue.nextTick().then(() => {\n        assert.strictEqual(vm.$el.innerHTML, '<span>$$$</span>1<p class=\"2\">,</p>000<p class=\"4\">,</p>000.00');\n      }).then(done);\n    });","file":"unit/number_component.test.js","skipped":false,"dir":"test"},{"name":"should pass parts as scoped prop","suites":["partial formatting"],"updatePoint":{"line":325,"column":40,"index":7990},"line":325,"code":"    it('should pass parts as scoped prop', done => {\n      const vm = new Vue({\n        i18n,\n        el: document.createElement('div'),\n\n        render(h) {\n          return h('i18n-n', {\n            props: {\n              value: -12\n            },\n            scopedSlots: {\n              integer: props => h('span', {\n                staticClass: props.parts.find(part => part.type === 'minusSign') ? 'red' : ''\n              }, props.integer)\n            }\n          });\n        }\n\n      });\n      Vue.nextTick().then(() => {\n        assert.strictEqual(vm.$el.innerHTML, '-<span class=\"red\">12</span>');\n      }).then(done);\n    });","file":"unit/number_component.test.js","skipped":false,"dir":"test"},{"name":"should ignore non-present scoped slot","suites":["partial formatting"],"updatePoint":{"line":348,"column":45,"index":8632},"line":348,"code":"    it('should ignore non-present scoped slot', done => {\n      const vm = new Vue({\n        i18n,\n        el: document.createElement('div'),\n\n        render(h) {\n          return h('i18n-n', {\n            props: {\n              value\n            },\n            scopedSlots: {\n              currency: props => h('span', props.currency)\n            }\n          });\n        }\n\n      });\n      Vue.nextTick().then(() => {\n        assert.strictEqual(vm.$el.innerHTML, '10,100');\n      }).then(done);\n    });","file":"unit/number_component.test.js","skipped":false,"dir":"test"},{"name":"should ignore default scoped slot","suites":["partial formatting"],"updatePoint":{"line":369,"column":41,"index":9132},"line":369,"code":"    it('should ignore default scoped slot', done => {\n      const vm = new Vue({\n        i18n,\n        el: document.createElement('div'),\n\n        render(h) {\n          return h('i18n-n', {\n            props: {\n              value\n            },\n            scopedSlots: {\n              default: props => h('span', props.integer)\n            }\n          });\n        }\n\n      });\n      Vue.nextTick().then(() => {\n        assert.strictEqual(vm.$el.innerHTML, '10,100');\n      }).then(done);\n    });","file":"unit/number_component.test.js","skipped":false,"dir":"test"},{"name":"should be formatted","suites":["fallback"],"updatePoint":{"line":392,"column":27,"index":9653},"line":392,"code":"    it('should be formatted', done => {\n      const vm = new Vue({\n        i18n,\n        el: document.createElement('div'),\n\n        render(h) {\n          return h('i18n-n', {\n            props: {\n              value: 0.9,\n              format: 'percent'\n            }\n          });\n        }\n\n      });\n      Vue.nextTick().then(() => {\n        assert.strictEqual(vm.$el.textContent, '90%');\n      }).then(done);\n    });","file":"unit/number_component.test.js","skipped":false,"dir":"test"},{"name":"should be changed","suites":["change number format runtime"],"updatePoint":{"line":413,"column":25,"index":10130},"line":413,"code":"    it('should be changed', done => {\n      const i18n = new VueI18n({\n        locale: 'en-US',\n        numberFormats\n      });\n      const el = document.createElement('div');\n      document.body.appendChild(el);\n      const money = 101;\n      const vm = new Vue({\n        i18n,\n\n        render(h) {\n          return h('p', {\n            ref: 'text'\n          }, [this.$n(money, 'currency')]);\n        }\n\n      }).$mount(el);\n      const {\n        text\n      } = vm.$refs;\n      const otherEnFormat = {\n        currency: {\n          style: 'currency',\n          currency: 'CZK',\n          currencyDisplay: 'name'\n        }\n      };\n      Vue.nextTick().then(() => {\n        assert.strictEqual(text.textContent, '$101.00');\n        i18n.setNumberFormat('en-US', otherEnFormat);\n      }).then(() => {\n        assert.strictEqual(text.textContent, '101.00 Czech korunas');\n      }).then(done);\n    });","file":"unit/number_component.test.js","skipped":false,"dir":"test"},{"name":"should be warned","suites":["warnning in render"],"updatePoint":{"line":450,"column":24,"index":11074},"line":450,"code":"    it('should be warned', () => {\n      const spy = sinon.spy(console, 'warn');\n      new Vue({\n        el: document.createElement('div'),\n\n        render(h) {\n          return h('i18n-n', {\n            props: {\n              value\n            }\n          });\n        }\n\n      });\n      assert(spy.notCalled === false);\n      assert(spy.callCount === 1);\n      spy.restore();\n    });","file":"unit/number_component.test.js","skipped":false,"dir":"test"},{"name":"should be worked","suites":["numberFormats"],"updatePoint":{"line":16,"column":24,"index":371},"line":16,"code":"    it('should be worked', done => {\n      const i18n = new VueI18n({\n        locale: 'en-US',\n        numberFormats\n      });\n      Vue.nextTick().then(() => {\n        assert.deepEqual(numberFormats, i18n.numberFormats);\n      }).then(done);\n    });","file":"unit/number.test.js","skipped":false,"dir":"test"},{"name":"should be worked","suites":["getNumberFormat / setNumberFormat"],"updatePoint":{"line":27,"column":24,"index":684},"line":27,"code":"    it('should be worked', done => {\n      const i18n = new VueI18n({\n        locale: 'en-US',\n        numberFormats\n      });\n      const el = document.createElement('div');\n      document.body.appendChild(el);\n      const money = 101;\n      const vm = new Vue({\n        i18n,\n\n        render(h) {\n          return h('p', {\n            ref: 'text'\n          }, [this.$n(money, 'currency')]);\n        }\n\n      }).$mount(el);\n      const {\n        text\n      } = vm.$refs;\n      const zhFormat = {\n        currency: {\n          style: 'currency',\n          currency: 'CNY',\n          currencyDisplay: 'name'\n        }\n      };\n      Vue.nextTick().then(() => {\n        assert.strictEqual(text.textContent, '$101.00');\n        i18n.setNumberFormat('zh-CN', zhFormat);\n        assert.deepEqual(i18n.getNumberFormat('zh-CN'), zhFormat);\n        i18n.locale = 'zh-CN';\n      }).then(() => {\n        // NOTE: avoid webkit (safari/phantomjs) & Intl polyfill wired localization...\n        if (isChrome) {\n          const actual = [49, 48, 49, 46, 48, 48, 20154, 27665, 24065]; // 101.00人民币\n\n          const target = convertToCharCodes(text.textContent);\n          assert.deepEqual(target, actual);\n        }\n      }).then(done);\n    });","file":"unit/number.test.js","skipped":false,"dir":"test"},{"name":"should be merged","suites":["mergeNumberFormat"],"updatePoint":{"line":72,"column":24,"index":1959},"line":72,"code":"    it('should be merged', () => {\n      const i18n = new VueI18n({\n        locale: 'ja-JP',\n        numberFormats\n      });\n      const percent = {\n        style: 'percent'\n      };\n      i18n.mergeNumberFormat('en-US', {\n        percent\n      });\n      assert.deepEqual(percent, i18n.getNumberFormat('en-US').percent);\n    });","file":"unit/number.test.js","skipped":false,"dir":"test"},{"name":"should be fallback","suites":["fallback"],"updatePoint":{"line":87,"column":26,"index":2327},"line":87,"code":"    it('should be fallback', done => {\n      const i18n = new VueI18n({\n        locale: 'en-uk',\n        fallbackLocale: ['de', 'en-us'],\n        numberFormats: {\n          de: {\n            currency: {\n              currency: 'EUR',\n              style: 'currency',\n              minimumFractionDigits: 2,\n              maximumFractionDigits: 2\n            }\n          }\n        }\n      });\n      const el = document.createElement('div');\n      document.body.appendChild(el);\n      const money = 101;\n      const vm = new Vue({\n        i18n,\n\n        render(h) {\n          return h('p', {\n            ref: 'text'\n          }, [this.$n(money, 'currency')]);\n        }\n\n      }).$mount(el);\n      const {\n        text\n      } = vm.$refs;\n      Vue.nextTick().then(() => {\n        assert.strictEqual(text.textContent, '101,00 €');\n      }).then(done);\n    });","file":"unit/number.test.js","skipped":false,"dir":"test"},{"name":"should get path value","suites":["path","primitive"],"updatePoint":{"line":5,"column":29,"index":157},"line":5,"code":"    it('should get path value', () => {\n      assert.strictEqual(path.getPathValue({\n        a: {\n          b: 1\n        }\n      }, 'a.b'), 1);\n    });","file":"unit/path.test.js","skipped":false,"dir":"test"},{"name":"should get value if it contains space 0x20","suites":["path","whitespace"],"updatePoint":{"line":14,"column":50,"index":369},"line":14,"code":"    it('should get value if it contains space 0x20', () => {\n      const val = path.getPathValue({\n        'a c': 1\n      }, 'a c');\n      assert.strictEqual(val, 1);\n    });","file":"unit/path.test.js","skipped":false,"dir":"test"},{"name":"should return null if it contains whitespace chars except space 0x20","suites":["path","whitespace"],"updatePoint":{"line":20,"column":76,"index":570},"line":20,"code":"    it('should return null if it contains whitespace chars except space 0x20', () => {\n      const val = path.getPathValue({\n        'a\\tc': 1\n      }, 'a\\tc');\n      assert.strictEqual(val, null);\n    });","file":"unit/path.test.js","skipped":false,"dir":"test"},{"name":"should get path value","suites":["path","object"],"updatePoint":{"line":28,"column":29,"index":764},"line":28,"code":"    it('should get path value', () => {\n      const val = path.getPathValue({\n        a: {\n          b: 1\n        }\n      }, 'a');\n      assert.strictEqual(val.b, 1);\n    });","file":"unit/path.test.js","skipped":false,"dir":"test"},{"name":"should accept space 0x20 as keypath","suites":["path","object"],"updatePoint":{"line":36,"column":43,"index":953},"line":36,"code":"    it('should accept space 0x20 as keypath', () => {\n      const val = path.getPathValue({\n        a: {\n          'b c d': 1\n        }\n      }, 'a.b c d');\n      assert.strictEqual(val, 1);\n    });","file":"unit/path.test.js","skipped":false,"dir":"test"},{"name":"should get path value","suites":["path","number key in object"],"updatePoint":{"line":46,"column":29,"index":1187},"line":46,"code":"    it('should get path value', () => {\n      assert.strictEqual(path.getPathValue({\n        errors: {\n          '1': 'error number 1'\n        }\n      }, 'errors[1]'), 'error number 1');\n    });","file":"unit/path.test.js","skipped":false,"dir":"test"},{"name":"should get value","suites":["path","array index path"],"updatePoint":{"line":55,"column":24,"index":1422},"line":55,"code":"    it('should get value', () => {\n      assert.strictEqual(path.getPathValue({\n        errors: ['error number 0']\n      }, 'errors[0]'), 'error number 0');\n    });","file":"unit/path.test.js","skipped":false,"dir":"test"},{"name":"should get path value","suites":["path","array path"],"updatePoint":{"line":62,"column":29,"index":1631},"line":62,"code":"    it('should get path value', () => {\n      assert.strictEqual(path.getPathValue({\n        errors: ['error number 0']\n      }, 'errors')[0], 'error number 0');\n    });","file":"unit/path.test.js","skipped":false,"dir":"test"},{"name":"should not get null","suites":["path","not found"],"updatePoint":{"line":69,"column":27,"index":1837},"line":69,"code":"    it('should not get null', () => {\n      assert.strictEqual(path.getPathValue({}, 'a.b'), null);\n    });","file":"unit/path.test.js","skipped":false,"dir":"test"},{"name":"should not get null","suites":["path","obj: primitive"],"updatePoint":{"line":74,"column":27,"index":1988},"line":74,"code":"    it('should not get null', () => {\n      assert.strictEqual(path.getPathValue(10, 'a.b'), null);\n    });","file":"unit/path.test.js","skipped":false,"dir":"test"},{"name":"should not get null","suites":["path","obj: null"],"updatePoint":{"line":79,"column":27,"index":2134},"line":79,"code":"    it('should not get null', () => {\n      assert.strictEqual(path.getPathValue(null, 'a.b'), null);\n    });","file":"unit/path.test.js","skipped":false,"dir":"test"},{"name":"should not get null","suites":["path","Blanket: term"],"updatePoint":{"line":84,"column":27,"index":2286},"line":84,"code":"    it('should not get null', () => {\n      assert.strictEqual(path.getPathValue({}, 'a.b.c[]'), null);\n    });","file":"unit/path.test.js","skipped":false,"dir":"test"},{"name":"should not get null","suites":["path","Blanket: middle"],"updatePoint":{"line":89,"column":27,"index":2442},"line":89,"code":"    it('should not get null', () => {\n      assert.strictEqual(path.getPathValue({}, 'a.b.c[]d'), null);\n    });","file":"unit/path.test.js","skipped":false,"dir":"test"},{"name":"should return null if parent is null","suites":["path","obj: null child"],"updatePoint":{"line":94,"column":44,"index":2616},"line":94,"code":"    it('should return null if parent is null', () => {\n      assert.strictEqual(path.getPathValue({\n        a: null\n      }, 'a.b'), null);\n    });","file":"unit/path.test.js","skipped":false,"dir":"test"},{"name":"should be hooked","suites":["postTranslation option","t"],"updatePoint":{"line":16,"column":24,"index":371},"line":16,"code":"    it('should be hooked', () => {\n      assert.strictEqual(i18n.t('hello'), 'hello world!');\n    });","file":"unit/post_translation.test.js","skipped":false,"dir":"test"},{"name":"should be hooked","suites":["postTranslation option","$t"],"updatePoint":{"line":21,"column":24,"index":504},"line":21,"code":"    it('should be hooked', () => {\n      const vm = new Vue({\n        i18n\n      });\n      assert.strictEqual(vm.$t('hello'), 'hello world!');\n    });","file":"unit/post_translation.test.js","skipped":false,"dir":"test"},{"name":"should be hooked","suites":["postTranslation option","tc"],"updatePoint":{"line":29,"column":24,"index":686},"line":29,"code":"    it('should be hooked', () => {\n      assert.strictEqual(i18n.tc('apple', 0), 'no apples');\n    });","file":"unit/post_translation.test.js","skipped":false,"dir":"test"},{"name":"should be hooked","suites":["postTranslation option","$tc"],"updatePoint":{"line":34,"column":24,"index":821},"line":34,"code":"    it('should be hooked', () => {\n      const vm = new Vue({\n        i18n\n      });\n      assert.strictEqual(vm.$tc('apple', 0), 'no apples');\n    });","file":"unit/post_translation.test.js","skipped":false,"dir":"test"},{"name":"should be undefined","suites":["postTranslation option","postTranslation option","default"],"updatePoint":{"line":43,"column":29,"index":1061},"line":43,"code":"      it('should be undefined', () => {\n        i18n = new VueI18n({\n          locale: 'en'\n        });\n        assert.strictEqual(i18n.postTranslation, null);\n      });","file":"unit/post_translation.test.js","skipped":false,"dir":"test"},{"name":"should be hooked","suites":["postTranslation option","postTranslation option","set hook"],"updatePoint":{"line":51,"column":26,"index":1269},"line":51,"code":"      it('should be hooked', () => {\n        i18n = new VueI18n({\n          locale: 'en',\n          messages: {\n            en: {\n              hello: ' hello world! '\n            }\n          }\n        });\n        const vm = new Vue({\n          i18n\n        });\n        assert.strictEqual(vm.$t('hello'), ' hello world! '); // set!\n\n        i18n.postTranslation = str => str.trim();\n\n        assert.strictEqual(vm.$t('hello'), 'hello world!');\n      });","file":"unit/post_translation.test.js","skipped":false,"dir":"test"},{"name":"should be suppressed translate warnings","suites":["silent","silentTranslationWarn","boolean"],"updatePoint":{"line":13,"column":49,"index":370},"line":13,"code":"      it('should be suppressed translate warnings', () => {\n        const warningRegex = /Cannot translate the value of keypath 'foo.bar.buz'. Use the value of keypath as default./;\n        const vm = new Vue({\n          i18n: new VueI18n({\n            locale: 'en',\n            silentTranslationWarn: true,\n            messages: {\n              en: {\n                who: 'root'\n              },\n              ja: {\n                who: 'ルート'\n              }\n            }\n          })\n        });\n        vm.$t('foo.bar.buz');\n        assert(spy.getCalls().some(call => call.args[0].match(warningRegex)) === false); // change\n\n        vm.$i18n.silentTranslationWarn = false;\n        vm.$t('foo.bar.buz');\n        assert(spy.getCalls().some(call => call.args[0].match(warningRegex)) === true);\n      });","file":"unit/silent.test.js","skipped":false,"dir":"test"},{"name":"should be suppressed translate warnings","suites":["silent","silentTranslationWarn","Regex"],"updatePoint":{"line":38,"column":49,"index":1213},"line":38,"code":"      it('should be suppressed translate warnings', () => {\n        const warningRegex = /Cannot translate the value of keypath .*\\. Use the value of keypath as default./;\n        const vm = new Vue({\n          i18n: new VueI18n({\n            locale: 'en',\n            silentTranslationWarn: true,\n            messages: {\n              en: {\n                who: 'root'\n              },\n              ja: {\n                who: 'ルート'\n              }\n            }\n          })\n        });\n        vm.$t('foo.bar.buz');\n        vm.$t('who.bar');\n        vm.$t('who.bar.buz');\n        assert(spy.getCalls().some(call => call.args[0].match(warningRegex)) === false); // change to boolean\n\n        vm.$i18n.silentTranslationWarn = /^foo\\..*|who\\.bar$/;\n        vm.$t('foo.bar.buz');\n        vm.$t('who.bar');\n        vm.$t('who.bar.buz');\n        assert(spy.getCalls().some(call => call.args[0].match(warningRegex)) === true);\n      });","file":"unit/silent.test.js","skipped":false,"dir":"test"},{"name":"should suppress `Fall back to ${fallback} locale` warnings","suites":["silent","silentFallbackWarn","boolean"],"updatePoint":{"line":85,"column":68,"index":2579},"line":85,"code":"      it('should suppress `Fall back to ${fallback} locale` warnings', () => {\n        const vm = new Vue({\n          i18n\n        });\n        const warningRegex = /Fall back to .* 'en' locale./;\n        vm.$t('winner');\n        assert(spy.getCalls().some(call => call.args[0].match(warningRegex)) === false);\n        vm.$i18n.silentFallbackWarn = false;\n        vm.$t('winner');\n        assert(spy.getCalls().some(call => call.args[0].match(warningRegex)) === true);\n      });","file":"unit/silent.test.js","skipped":false,"dir":"test"},{"name":"should suppress `Fall back to root locale` warnings.","suites":["silent","silentFallbackWarn","boolean"],"updatePoint":{"line":96,"column":62,"index":3051},"line":96,"code":"      it('should suppress `Fall back to root locale` warnings.', () => {\n        const el = document.createElement('div');\n        const root = new Vue({\n          i18n,\n          components: {\n            subComponent: {\n              i18n: {\n                messages: {\n                  hu: {\n                    name: 'Név'\n                  }\n                }\n              },\n\n              render(h) {\n                return h('p');\n              }\n\n            }\n          },\n\n          render(h) {\n            return h('sub-component');\n          }\n\n        }).$mount(el);\n        const vm = root.$children[0];\n        const warningRegex = /Fall back to .* root locale./;\n        vm.$t('chickenDinner');\n        assert(spy.getCalls().some(call => call.args[0].match(warningRegex)) === false);\n        vm.$i18n.silentFallbackWarn = false;\n        vm.$t('chickenDinner');\n        assert(spy.getCalls().some(call => call.args[0].match(warningRegex)) === true);\n      });","file":"unit/silent.test.js","skipped":false,"dir":"test"},{"name":"should suppress `not a string` warnings for fallback to fallbackLocale.","suites":["silent","silentFallbackWarn","boolean","if first try is null or undefined,"],"updatePoint":{"line":131,"column":83,"index":4111},"line":131,"code":"        it('should suppress `not a string` warnings for fallback to fallbackLocale.', () => {\n          const vm = new Vue({\n            i18n\n          });\n          const warningRegex = /Value of .* is not a string./;\n          vm.$t('winner');\n          assert(spy.getCalls().some(call => call.args[0].match(warningRegex)) === false);\n          vm.$i18n.silentFallbackWarn = false;\n          vm.$t('winner');\n          assert(spy.getCalls().some(call => call.args[0].match(warningRegex)) === true);\n        });","file":"unit/silent.test.js","skipped":false,"dir":"test"},{"name":"should supress `not a string` warnings for fallback to root.","suites":["silent","silentFallbackWarn","boolean","if first try is null or undefined,"],"updatePoint":{"line":142,"column":72,"index":4613},"line":142,"code":"        it('should supress `not a string` warnings for fallback to root.', () => {\n          const el = document.createElement('div');\n          const root = new Vue({\n            i18n,\n            components: {\n              subComponent: {\n                i18n: {\n                  messages: {\n                    hu: {\n                      name: 'Név'\n                    }\n                  }\n                },\n\n                render(h) {\n                  return h('p');\n                }\n\n              }\n            },\n\n            render(h) {\n              return h('sub-component');\n            }\n\n          }).$mount(el);\n          const vm = root.$children[0];\n          const warningRegex = /Value of .* is not a string./;\n          vm.$t('chickenDinner');\n          assert(spy.getCalls().some(call => call.args[0].match(warningRegex)) === false);\n          vm.$i18n.silentFallbackWarn = false;\n          vm.$t('chickenDinner');\n          assert(spy.getCalls().some(call => call.args[0].match(warningRegex)) === true);\n        });","file":"unit/silent.test.js","skipped":false,"dir":"test"},{"name":"should suppress `not a string` warnings for fallback to fallbackLocale.","suites":["silent","silentFallbackWarn","boolean","if first try is not null, undefined, array, plain object or string,"],"updatePoint":{"line":178,"column":83,"index":5774},"line":178,"code":"        it('should suppress `not a string` warnings for fallback to fallbackLocale.', () => {\n          const vm = new Vue({\n            i18n: new VueI18n({\n              locale: 'hu',\n              fallbackLocale: 'en',\n              silentFallbackWarn: true,\n              messages: {\n                en: {\n                  winner: 'winner'\n                },\n                hu: {\n                  winner: true\n                } // translation value is boolean\n\n              }\n            })\n          });\n          const warningRegex = /Value of .* is not a string./;\n          vm.$t('winner');\n          assert(spy.getCalls().some(call => call.args[0].match(warningRegex)) === false);\n          vm.$i18n.silentFallbackWarn = false;\n          vm.$t('winner');\n          assert(spy.getCalls().some(call => call.args[0].match(warningRegex)) === true);\n        });","file":"unit/silent.test.js","skipped":false,"dir":"test"},{"name":"should supress `not a string` warnings for fallback to root.","suites":["silent","silentFallbackWarn","boolean","if first try is not null, undefined, array, plain object or string,"],"updatePoint":{"line":202,"column":72,"index":6632},"line":202,"code":"        it('should supress `not a string` warnings for fallback to root.', () => {\n          const el = document.createElement('div');\n          const root = new Vue({\n            i18n,\n            components: {\n              subComponent: {\n                i18n: {\n                  messages: {\n                    hu: {\n                      chickenDinner: 11\n                    }\n                  }\n                },\n\n                // translation value is number\n                render(h) {\n                  return h('p');\n                }\n\n              }\n            },\n\n            render(h) {\n              return h('sub-component');\n            }\n\n          }).$mount(el);\n          const vm = root.$children[0];\n          const warningRegex = /Value of .* is not a string./;\n          vm.$t('chickenDinner');\n          assert(spy.getCalls().some(call => call.args[0].match(warningRegex)) === false);\n          vm.$i18n.silentFallbackWarn = false;\n          vm.$t('chickenDinner');\n          assert(spy.getCalls().some(call => call.args[0].match(warningRegex)) === true);\n        });","file":"unit/silent.test.js","skipped":false,"dir":"test"},{"name":"should not suppress `not a string` warnings when no further fallback is possible.","suites":["silent","silentFallbackWarn","boolean","if first try is not null, undefined, array, plain object or string,"],"updatePoint":{"line":238,"column":91,"index":7760},"line":238,"code":"      it('should not suppress `not a string` warnings when no further fallback is possible.', () => {\n        const vm = new Vue({\n          i18n\n        });\n        const warningRegex = /Value of .* is not a string./;\n        vm.$t('loser');\n        assert(spy.getCalls().some(call => call.args[0].match(warningRegex)) === true);\n      });","file":"unit/silent.test.js","skipped":false,"dir":"test"},{"name":"should be suppressed translate warnings","suites":["silent","silentFallbackWarn","Regexp"],"updatePoint":{"line":248,"column":49,"index":8098},"line":248,"code":"      it('should be suppressed translate warnings', () => {\n        const el = document.createElement('div');\n        const root = new Vue({\n          i18n,\n          components: {\n            subComponent: {\n              i18n: {\n                messages: {\n                  hu: {\n                    name: 'Név'\n                  }\n                }\n              },\n\n              render(h) {\n                return h('p');\n              }\n\n            }\n          },\n\n          render(h) {\n            return h('sub-component');\n          }\n\n        }).$mount(el);\n        const vm = root.$children[0];\n        const warningRegex = /Fall back to .*\\./;\n        vm.$t('chickenDinner');\n        assert(spy.getCalls().some(call => call.args[0].match(warningRegex)) === false); // change to boolean\n\n        vm.$i18n.silentFallbackWarn = /chic.*/;\n        vm.$t('chickenDinner');\n        assert(spy.getCalls().some(call => call.args[0].match(warningRegex)) === false);\n      });","file":"unit/silent.test.js","skipped":false,"dir":"test"},{"name":"should be suppressed translate warnings","suites":["silent","silentFallbackWarn","datetime/number format"],"updatePoint":{"line":285,"column":49,"index":9133},"line":285,"code":"      it('should be suppressed translate warnings', () => {\n        const el = document.createElement('div');\n        const root = new Vue({\n          i18n: new VueI18n({\n            locale: 'en-US',\n            fallbackLocale: 'ja-JP',\n            silentFallbackWarn: true,\n            dateTimeFormats,\n            numberFormats\n          }),\n          components: {\n            subComponent: {\n              i18n: {\n                dateTimeFormats: {},\n                numberFormats: {}\n              },\n\n              render(h) {\n                return h('p');\n              }\n\n            }\n          },\n\n          render(h) {\n            return h('sub-component');\n          }\n\n        }).$mount(el);\n        const vm = root.$children[0];\n        const warningDateTimeRegex = /Fall back to .* datetime formats\\./;\n        const warningNumberRegex = /Fall back to .* number formats\\./;\n        vm.$d(Date.now(), 'long');\n        vm.$n(10, 'numeric');\n        assert(spy.getCalls().some(call => call.args[0].match(warningDateTimeRegex)) === false);\n        assert(spy.getCalls().some(call => call.args[0].match(warningNumberRegex)) === false); // change\n\n        vm.$i18n.silentFallbackWarn = false;\n        vm.$d(Date.now(), 'long');\n        vm.$n(10, 'numeric');\n        assert(spy.getCalls().some(call => call.args[0].match(warningDateTimeRegex)) === true);\n        assert(spy.getCalls().some(call => call.args[0].match(warningNumberRegex)) === true);\n      });","file":"unit/silent.test.js","skipped":false,"dir":"test"},{"name":"should be worked","suites":["warnHtmlInMessage","constructor option"],"updatePoint":{"line":13,"column":24,"index":321},"line":13,"code":"    it('should be worked', () => {\n      const messages = {\n        en: {\n          message: {\n            foo: {\n              buz: '<p>buz</p>',\n              hello: 'hello'\n            },\n            bar: [1, {\n              buz: '<p>buz</p>'\n            }],\n            buz: 22\n          }\n        },\n        ja: {\n          message: '<p>こんにちは</p>'\n        }\n      }; // `off`\n\n      new VueI18n({\n        warnHtmlInMessage: 'off',\n        messages\n      });\n      assert(spyWarn.callCount === 0);\n      assert(spyError.callCount === 0); // `warn`\n\n      new VueI18n({\n        warnHtmlInMessage: 'warn',\n        messages\n      });\n      assert(spyWarn.callCount === 3);\n      assert(spyError.callCount === 0); // `error`\n\n      new VueI18n({\n        warnHtmlInMessage: 'error',\n        messages\n      });\n      assert(spyWarn.callCount === 3);\n      assert(spyError.callCount === 3);\n    });","file":"unit/warn_html_in_message.test.js","skipped":false,"dir":"test"},{"name":"should be worked","suites":["warnHtmlInMessage","property"],"updatePoint":{"line":55,"column":24,"index":1254},"line":55,"code":"    it('should be worked', () => {\n      const messages = {\n        en: {\n          message: {\n            foo: {\n              buz: '<p>buz</p>'\n            },\n            bar: [1, '<p>bar</p>'],\n            buz: 22\n          }\n        },\n        ja: {\n          message: '<p>こんにちは</p>'\n        }\n      };\n      const i18n = new VueI18n({\n        warnHtmlInMessage: 'off',\n        messages\n      }); // `warn`\n\n      i18n.warnHtmlInMessage = 'warn';\n      assert(spyWarn.callCount === 3);\n      assert(spyError.callCount === 0); // `error`\n\n      i18n.warnHtmlInMessage = 'error';\n      assert(spyWarn.callCount === 3);\n      assert(spyError.callCount === 3); // `off`\n\n      i18n.warnHtmlInMessage = 'off';\n      assert(spyWarn.callCount === 3);\n      assert(spyError.callCount === 3);\n    });","file":"unit/warn_html_in_message.test.js","skipped":false,"dir":"test"},{"name":"should be worked","suites":["warnHtmlInMessage","setLocaleMessage"],"updatePoint":{"line":89,"column":24,"index":2095},"line":89,"code":"    it('should be worked', () => {\n      const i18n = new VueI18n({\n        warnHtmlInMessage: 'warn',\n        messages: {\n          en: {},\n          ja: {}\n        }\n      });\n      i18n.setLocaleMessage('en', {\n        hello: '<p>hello</p>'\n      });\n      assert(spyWarn.callCount === 1);\n      assert(spyError.callCount === 0);\n      i18n.warnHtmlInMessage = 'error';\n      i18n.setLocaleMessage('ja', {\n        hello: '<p>こんにちは</p>'\n      });\n      assert(spyWarn.callCount === 1);\n      assert(spyError.callCount === 2);\n      i18n.warnHtmlInMessage = 'off';\n      assert(spyWarn.callCount === 1);\n      assert(spyError.callCount === 2);\n    });","file":"unit/warn_html_in_message.test.js","skipped":false,"dir":"test"},{"name":"should be worked","suites":["warnHtmlInMessage","mergeLocaleMessage"],"updatePoint":{"line":114,"column":24,"index":2795},"line":114,"code":"    it('should be worked', () => {\n      const i18n = new VueI18n({\n        warnHtmlInMessage: 'warn',\n        messages: {\n          en: {},\n          ja: {}\n        }\n      });\n      i18n.mergeLocaleMessage('en', {\n        hello: '<p>hello</p>'\n      });\n      assert(spyWarn.callCount === 1);\n      assert(spyError.callCount === 0);\n      i18n.warnHtmlInMessage = 'error';\n      i18n.mergeLocaleMessage('ja', {\n        hello: '<p>こんにちは</p>'\n      });\n      assert(spyWarn.callCount === 1);\n      assert(spyError.callCount === 2);\n      i18n.warnHtmlInMessage = 'off';\n      assert(spyWarn.callCount === 1);\n      assert(spyError.callCount === 2);\n    });","file":"unit/warn_html_in_message.test.js","skipped":false,"dir":"test"}]}