{"repo":"redwoodjs/redwood","url":"https://github.com/redwoodjs/redwood","branch":"main","configs":[{"package":"@redwoodjs/api-server","lang":"ts","dir":"packages/api-server/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@redwoodjs/auth","lang":"js","dir":"packages/auth/src/__tests__","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"create-redwood-app","lang":"js","dir":"packages/create-redwood-app/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@redwoodjs/forms","lang":"js","dir":"packages/forms/src/__tests__","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@redwoodjs/graphql-server","lang":"ts","dir":"packages/graphql-server/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@redwoodjs/internal","lang":"ts","dir":"packages/internal/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@redwoodjs/prerender","lang":"ts","dir":"packages/prerender/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@redwoodjs/router","lang":"ts","dir":"packages/router/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"Formats Trace level","suites":["LogFormatter","Formats log levels as emoji"],"updatePoint":{"line":7,"column":27},"line":7,"code":"    it('Formats Trace level', () => {\n      expect(logFormatter({ level: 10 })).toMatch('🧵')\n    })","file":"logFormatter.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"Formats Debug level","suites":["LogFormatter","Formats log levels as emoji"],"updatePoint":{"line":11,"column":27},"line":11,"code":"    it('Formats Debug level', () => {\n      expect(logFormatter({ level: 20 })).toMatch('🐛')\n    })","file":"logFormatter.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"Formats Info level","suites":["LogFormatter","Formats log levels as emoji"],"updatePoint":{"line":15,"column":26},"line":15,"code":"    it('Formats Info level', () => {\n      expect(logFormatter({ level: 30 })).toMatch('🌲')\n    })","file":"logFormatter.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"Formats Warn level","suites":["LogFormatter","Formats log levels as emoji"],"updatePoint":{"line":19,"column":26},"line":19,"code":"    it('Formats Warn level', () => {\n      expect(logFormatter({ level: 40 })).toMatch('🚦')\n    })","file":"logFormatter.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"Formats Error level","suites":["LogFormatter","Formats log levels as emoji"],"updatePoint":{"line":23,"column":27},"line":23,"code":"    it('Formats Error level', () => {\n      expect(logFormatter({ level: 50 })).toMatch('🚨')\n    })","file":"logFormatter.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"Formats newline-delimited json data with a message","suites":["LogFormatter","Formats log messages"],"updatePoint":{"line":29,"column":58},"line":29,"code":"    it('Formats newline-delimited json data with a message', () => {\n      expect(\n        logFormatter({ level: 10, message: 'Message in a bottle' })\n      ).toMatch('Message in a bottle')\n    })","file":"logFormatter.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"Formats newline-delimited json data with a msg","suites":["LogFormatter","Formats log messages"],"updatePoint":{"line":35,"column":54},"line":35,"code":"    it('Formats newline-delimited json data with a msg', () => {\n      expect(logFormatter({ level: 10, msg: 'Message in a bottle' })).toMatch(\n        'Message in a bottle'\n      )\n    })","file":"logFormatter.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"Formats a text message","suites":["LogFormatter","Formats log messages"],"updatePoint":{"line":41,"column":30},"line":41,"code":"    it('Formats a text message', () => {\n      expect(logFormatter('Handles text data')).toMatch('Handles text data')\n    })","file":"logFormatter.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"Formats Get Method and Status Code","suites":["LogFormatter","Formats log messages"],"updatePoint":{"line":45,"column":42},"line":45,"code":"    it('Formats Get Method and Status Code', () => {\n      const logData = { level: 10, method: 'GET', statusCode: 200 }\n      expect(logFormatter(logData)).toMatch('GET')\n      expect(logFormatter(logData)).toMatch('200')\n    })","file":"logFormatter.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"Formats Post Method and Status Code","suites":["LogFormatter","Formats log messages"],"updatePoint":{"line":51,"column":43},"line":51,"code":"    it('Formats Post Method and Status Code', () => {\n      const logData = { level: 10, method: 'POST', statusCode: 200 }\n      expect(logFormatter(logData)).toMatch('POST')\n      expect(logFormatter(logData)).toMatch('200')\n    })","file":"logFormatter.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"Should not format Status Code without a Method","suites":["LogFormatter","Formats log messages"],"updatePoint":{"line":57,"column":54},"line":57,"code":"    it('Should not format Status Code without a Method', () => {\n      expect(logFormatter({ level: 10, statusCode: 200 })).not.toMatch('200')\n    })","file":"logFormatter.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"Handles query","suites":["LogFormatter","Formats GraphQL injected log data from useRedwoodLogger plugin"],"updatePoint":{"line":63,"column":21},"line":63,"code":"    it('Handles query', () => {\n      expect(\n        logFormatter({\n          level: 10,\n          query: {\n            id: 1,\n          },\n        })\n      ).toMatch('\"id\": 1')\n    })","file":"logFormatter.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"Handles operation name","suites":["LogFormatter","Formats GraphQL injected log data from useRedwoodLogger plugin"],"updatePoint":{"line":74,"column":30},"line":74,"code":"    it('Handles operation name', () => {\n      expect(\n        logFormatter({ level: 10, operationName: 'GET_BLOG_POST_BY_ID' })\n      ).toMatch('GET_BLOG_POST_BY_ID')\n    })","file":"logFormatter.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"Handles GraphQL data","suites":["LogFormatter","Formats GraphQL injected log data from useRedwoodLogger plugin"],"updatePoint":{"line":80,"column":28},"line":80,"code":"    it('Handles GraphQL data', () => {\n      expect(\n        logFormatter({\n          level: 10,\n          data: { post: { id: 1, title: 'My Blog Post' } },\n        })\n      ).toMatch('My Blog Post')\n    })","file":"logFormatter.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"Handles browser user agent","suites":["LogFormatter","Formats GraphQL injected log data from useRedwoodLogger plugin"],"updatePoint":{"line":89,"column":34},"line":89,"code":"    it('Handles browser user agent', () => {\n      const userAgent =\n        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15'\n      expect(\n        logFormatter({\n          level: 10,\n          userAgent,\n        })\n      ).toMatch(/Mozilla.*AppleWebKit.*Safari/)\n    })","file":"logFormatter.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"Should include the custom log attribute text","suites":["LogFormatter","Custom log data"],"updatePoint":{"line":102,"column":52},"line":102,"code":"    it('Should include the custom log attribute text', () => {\n      expect(\n        logFormatter({\n          level: 10,\n          custom: 'I should see this custom message text',\n        })\n      ).toMatch('I should see this')\n    })","file":"logFormatter.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"Should include the custom log attribute info a custom emoji and label","suites":["LogFormatter","Custom log data"],"updatePoint":{"line":111,"column":77},"line":111,"code":"    it('Should include the custom log attribute info a custom emoji and label', () => {\n      expect(\n        logFormatter({\n          level: 10,\n          custom: 'I should see this custom emoji and label',\n        })\n      ).toMatch('🗒 Custom')\n    })","file":"logFormatter.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"Should include the custom log attribute info with nested text message","suites":["LogFormatter","Custom log data"],"updatePoint":{"line":120,"column":77},"line":120,"code":"    it('Should include the custom log attribute info with nested text message', () => {\n      expect(\n        logFormatter({\n          level: 10,\n          custom: {\n            string: 'I should see this custom message in the log',\n          },\n        })\n      ).toMatch('I should see this custom message in the log')\n    })","file":"logFormatter.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"Should include the custom log attribute info with a number attribute","suites":["LogFormatter","Custom log data"],"updatePoint":{"line":131,"column":76},"line":131,"code":"    it('Should include the custom log attribute info with a number attribute', () => {\n      expect(\n        logFormatter({\n          level: 10,\n          custom: {\n            string: 'I should see this custom message and number in the log',\n            number: 100,\n          },\n        })\n      ).toMatch('100')\n    })","file":"logFormatter.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"Should include the custom log attribute info with a nested object attribute","suites":["LogFormatter","Custom log data"],"updatePoint":{"line":143,"column":83},"line":143,"code":"    it('Should include the custom log attribute info with a nested object attribute', () => {\n      expect(\n        logFormatter({\n          level: 10,\n          custom: {\n            string: 'I should see this custom object in the log',\n            obj: { foo: 'bar' },\n          },\n        })\n      ).toMatch('\"foo\": \"bar\"')\n    })","file":"logFormatter.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"Should include the custom log attribute info with a nested object attribute","suites":["LogFormatter","Custom log data"],"updatePoint":{"line":155,"column":83},"line":155,"code":"    it('Should include the custom log attribute info with a nested object attribute', () => {\n      expect(\n        logFormatter({\n          level: 10,\n          custom: {\n            string: 'I should see this custom object in the log',\n            obj: { foo: 'bar' },\n          },\n        })\n      ).toMatch('\"foo\": \"bar\"')\n    })","file":"logFormatter.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"Should filter out overly verbose custom log attributes","suites":["LogFormatter","Custom log data"],"updatePoint":{"line":167,"column":62},"line":167,"code":"    it('Should filter out overly verbose custom log attributes', () => {\n      expect(\n        logFormatter({\n          level: 10,\n          custom: {\n            time: 1,\n            pid: 1,\n            hostname: 'should not appear',\n            reqId: 'should not appear',\n            req: {\n              method: 'should not appear',\n              url: 'should not appear',\n              hostname: 'should not appear',\n              remoteAddress: 'should not appear',\n              remotePort: 1,\n            },\n          },\n        })\n      ).not.toMatch('should not appear')\n    })","file":"logFormatter.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"Should format error stack traces","suites":["LogFormatter","Custom log data"],"updatePoint":{"line":189,"column":38},"line":189,"code":"  it('Should format error stack traces', () => {\n    expect(\n      logFormatter({\n        level: 50,\n        err: {\n          message: 'This error has a stack traces',\n          stack:\n            'A stack trace \\n will have \\n several lines \\n at some line number \\n at some code',\n        },\n      })\n    ).toMatch(/at some line number/)\n  })","file":"logFormatter.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"Should format error and include the error type","suites":["LogFormatter","Custom log data"],"updatePoint":{"line":202,"column":52},"line":202,"code":"  it('Should format error and include the error type', () => {\n    expect(\n      logFormatter({\n        level: 50,\n        err: {\n          type: 'GraphQL Error',\n          message: 'This error has a stack traces',\n          stack:\n            'A stack trace \\n will have \\n several lines \\n at some line number \\n at some code',\n        },\n      })\n    ).toMatch(/GraphQL Error Info/)\n  })","file":"logFormatter.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"Should format and include additional options without custom tag","suites":["LogFormatter","When there are additional options"],"updatePoint":{"line":217,"column":71},"line":217,"code":"    it('Should format and include additional options without custom tag', () => {\n      expect(\n        logFormatter({\n          level: 10,\n          apiVersion: '4.2.1',\n          environment: 'staging',\n        })\n      ).toMatch('\"apiVersion\": \"4.2.1\"')\n\n      expect(\n        logFormatter({\n          level: 10,\n          apiVersion: '4.2.1',\n          environment: 'staging',\n        })\n      ).toMatch('\"environment\": \"staging\"')\n    })","file":"logFormatter.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"Should format and include additional nested options without custom tag","suites":["LogFormatter","When there are additional options"],"updatePoint":{"line":235,"column":78},"line":235,"code":"    it('Should format and include additional nested options without custom tag', () => {\n      expect(\n        logFormatter({\n          level: 10,\n          deploy: {\n            environment: 'staging',\n            version: '4.2.1',\n          },\n        })\n      ).toMatch('\"deploy\"')\n\n      expect(\n        logFormatter({\n          level: 10,\n          deploy: {\n            environment: 'staging',\n            version: '4.2.1',\n          },\n        })\n      ).toMatch('\"environment\": \"staging\"')\n\n      logFormatter({\n        level: 10,\n        deploy: {\n          environment: 'staging',\n          version: '4.2.1',\n        },\n      }) // ?\n\n      expect(\n        logFormatter({\n          level: 10,\n          deploy: {\n            environment: 'staging',\n            version: '4.2.1',\n          },\n        })\n      ).toMatch('\"version\": \"4.2.1\"')\n    })","file":"logFormatter.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"Should not have any undefined ns, name, or message","suites":["LogFormatter","When there are additional options"],"updatePoint":{"line":276,"column":56},"line":276,"code":"  it('Should not have any undefined ns, name, or message', () => {\n    expect(\n      logFormatter({\n        level: 10,\n      })\n    ).not.toContain('undefined')\n  })","file":"logFormatter.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"requestHandler replies with simple body","suites":["Tests AWS Lambda to Fastify request transformation and handling"],"updatePoint":{"line":31,"column":47},"line":31,"code":"  test('requestHandler replies with simple body', async () => {\n    jest.spyOn(mockedReply, 'send')\n    jest.spyOn(mockedReply, 'status')\n\n    const handler = async (req, mockedReply) => {\n      mockedReply = { body: { foo: 'bar' } }\n      return mockedReply\n    }\n\n    await requestHandler(request, mockedReply, handler)\n\n    expect(mockedReply.send).toHaveBeenCalledWith({ foo: 'bar' })\n    expect(mockedReply.status).toHaveBeenCalledWith(200)\n  })","file":"requestHandlers/awsLambdaFastify.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"requestHandler replies with a base64Encoded body","suites":["Tests AWS Lambda to Fastify request transformation and handling"],"updatePoint":{"line":46,"column":56},"line":46,"code":"  test('requestHandler replies with a base64Encoded body', async () => {\n    jest.spyOn(mockedReply, 'send')\n    jest.spyOn(mockedReply, 'status')\n\n    const handler = async (req, mockedReply) => {\n      mockedReply = {\n        body: 'this_is_a_test_of_base64Encoding',\n        isBase64Encoded: true,\n      }\n      return mockedReply\n    }\n\n    await requestHandler(request, mockedReply, handler)\n\n    expect(mockedReply.send).toHaveBeenCalledWith(\n      Buffer.from('this_is_a_test_of_base64Encoding', 'base64')\n    )\n    expect(mockedReply.status).toHaveBeenCalledWith(200)\n  })","file":"requestHandlers/awsLambdaFastify.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"requestHandler returns an error status if handler throws an error","suites":["Tests AWS Lambda to Fastify request transformation and handling","error handling"],"updatePoint":{"line":78,"column":75},"line":78,"code":"    test('requestHandler returns an error status if handler throws an error', async () => {\n      jest.spyOn(mockedReply, 'status')\n\n      const handler = async () => {\n        throw new Error('error')\n      }\n\n      await requestHandler(request, mockedReply, handler)\n\n      expect(mockedReply.status).toHaveBeenCalledWith(500)\n    })","file":"requestHandlers/awsLambdaFastify.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"requestHandler replies with headers","suites":["Tests AWS Lambda to Fastify request transformation and handling","error handling"],"updatePoint":{"line":91,"column":43},"line":91,"code":"  test('requestHandler replies with headers', async () => {\n    const headersRequest = {\n      method: 'GET',\n      body: '',\n      headers: {},\n      query: '/',\n      params: {},\n      url: '/',\n      urlData: () => ({ path: '/' }),\n      log: console as unknown,\n    } as unknown as FastifyRequest\n\n    jest.spyOn(mockedReply, 'headers')\n    jest.spyOn(mockedReply, 'header')\n\n    const handler = async (req, mockedReply) => {\n      mockedReply = {\n        body: { foo: 'bar' },\n        headers: {\n          'content-type': 'application/json',\n          authorization: 'Bearer token 123',\n        },\n      }\n      return mockedReply\n    }\n\n    await requestHandler(headersRequest, mockedReply, handler)\n\n    expect(mockedReply.headers).not.toHaveBeenCalled()\n    expect(mockedReply.header).toHaveBeenCalledWith(\n      'content-type',\n      'application/json'\n    )\n    expect(mockedReply.header).toHaveBeenCalledWith(\n      'authorization',\n      'Bearer token 123'\n    )\n  })","file":"requestHandlers/awsLambdaFastify.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"requestHandler replies with multi-value headers","suites":["Tests AWS Lambda to Fastify request transformation and handling","error handling"],"updatePoint":{"line":130,"column":55},"line":130,"code":"  test('requestHandler replies with multi-value headers', async () => {\n    const headersRequest = {\n      method: 'GET',\n      body: '',\n      headers: {},\n      query: '/',\n      params: {},\n      url: '/',\n      urlData: () => ({ path: '/' }),\n      log: console as unknown,\n    } as unknown as FastifyRequest\n\n    jest.spyOn(mockedReply, 'headers')\n    jest.spyOn(mockedReply, 'header')\n\n    const handler = async (_req, mockedReply) => {\n      mockedReply = {\n        body: {},\n        headers: {},\n        multiValueHeaders: {\n          'content-type': ['application/json', 'text/html'],\n        },\n      }\n      return mockedReply\n    }\n\n    await requestHandler(headersRequest, mockedReply, handler)\n\n    expect(mockedReply.headers).not.toHaveBeenCalled()\n    expect(mockedReply.header).toHaveBeenCalledWith(\n      'content-type',\n      'application/json; text/html'\n    )\n  })","file":"requestHandlers/awsLambdaFastify.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"with a string","suites":["Tests AWS Lambda to Fastify utility functions","Tests parseBody"],"updatePoint":{"line":5,"column":23},"line":5,"code":"    test('with a string', () => {\n      const parsed = parseBody('foo')\n      expect(parsed).toEqual({ body: 'foo', isBase64Encoded: false })\n    })","file":"requestHandlers/utils.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"with a buffer","suites":["Tests AWS Lambda to Fastify utility functions","Tests parseBody"],"updatePoint":{"line":10,"column":23},"line":10,"code":"    test('with a buffer', () => {\n      const buf = Buffer.from('foo', 'base64')\n      const parsed = parseBody(buf)\n      expect(parsed).toEqual({ body: 'foo=', isBase64Encoded: true })\n    })","file":"requestHandlers/utils.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"with same header","suites":["Tests AWS Lambda to Fastify utility functions","Tests mergeMultiValueHeaders"],"updatePoint":{"line":18,"column":26},"line":18,"code":"    test('with same header', () => {\n      const headers = { 'content-type': 'application/json' }\n      const multiValueHeaders = {\n        'content-type': ['application/json', 'text/html'],\n      }\n      const merged = mergeMultiValueHeaders(headers, multiValueHeaders)\n      expect(merged).toEqual({\n        'content-type': ['application/json; text/html'],\n      })\n    })","file":"requestHandlers/utils.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"with multi-value header that is title-cased","suites":["Tests AWS Lambda to Fastify utility functions","Tests mergeMultiValueHeaders"],"updatePoint":{"line":29,"column":53},"line":29,"code":"    test('with multi-value header that is title-cased', () => {\n      const headers = { 'content-type': 'application/json' }\n      const multiValueHeaders = {\n        'Content-Type': ['application/json', 'text/html'],\n      }\n      const merged = mergeMultiValueHeaders(headers, multiValueHeaders)\n      expect(merged).toEqual({\n        'content-type': ['application/json; text/html'],\n      })\n    })","file":"requestHandlers/utils.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"when no headers, but has multi-value headers","suites":["Tests AWS Lambda to Fastify utility functions","Tests mergeMultiValueHeaders"],"updatePoint":{"line":40,"column":54},"line":40,"code":"    test('when no headers, but has multi-value headers', () => {\n      const headers = {}\n      const multiValueHeaders = {\n        'content-type': ['application/json', 'text/html'],\n      }\n      const merged = mergeMultiValueHeaders(headers, multiValueHeaders)\n      expect(merged).toEqual({\n        'content-type': ['application/json; text/html'],\n      })\n    })","file":"requestHandlers/utils.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"set-cookie","suites":["Tests AWS Lambda to Fastify utility functions","Tests mergeMultiValueHeaders"],"updatePoint":{"line":51,"column":20},"line":51,"code":"    test('set-cookie', () => {\n      const headers = {}\n      const multiValueHeaders = {\n        'Set-Cookie': ['rob=TS4Life', 'danny=kittens'],\n      }\n      const merged = mergeMultiValueHeaders(headers, multiValueHeaders)\n      expect(merged).toEqual({\n        'set-cookie': ['rob=TS4Life', 'danny=kittens'],\n      })\n    })","file":"requestHandlers/utils.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"set-cookie in both headers and multiValueHeaders","suites":["Tests AWS Lambda to Fastify utility functions","Tests mergeMultiValueHeaders"],"updatePoint":{"line":62,"column":58},"line":62,"code":"    test('set-cookie in both headers and multiValueHeaders', () => {\n      const headers = { 'set-cookie': 'peter=snaplet' }\n      const multiValueHeaders = {\n        'set-cookie': ['peter=snaplet', 'tom=hammer'],\n      }\n      const merged = mergeMultiValueHeaders(headers, multiValueHeaders)\n      expect(merged).toEqual({\n        'set-cookie': ['peter=snaplet', 'tom=hammer'],\n      })\n    })","file":"requestHandlers/utils.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"Checks that the fastify http-proxy plugin is configured correctly","suites":["Configures the ApiProxy"],"updatePoint":{"line":42,"column":73},"line":42,"code":"  test('Checks that the fastify http-proxy plugin is configured correctly', async () => {\n    const mockedFastifyInstance = {\n      register: jest.fn(),\n      get: jest.fn(),\n      all: jest.fn(),\n      addContentTypeParser: jest.fn(),\n      log: console,\n    }\n\n    await withApiProxy(mockedFastifyInstance as unknown as FastifyInstance, {\n      apiUrl: 'http://localhost',\n      apiHost: 'my-api-host',\n    })\n\n    const mockedFastifyInstanceOptions =\n      mockedFastifyInstance.register.mock.calls[0][1]\n\n    expect(mockedFastifyInstanceOptions).toEqual({\n      disableCache: true,\n      prefix: 'http://localhost',\n      upstream: 'my-api-host',\n    })\n  })","file":"withApiProxy.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"Verify that configureFastify is called with the expected side and options","suites":["Checks that configureFastify is called for the api side"],"updatePoint":{"line":79,"column":79},"line":79,"code":"  it('Verify that configureFastify is called with the expected side and options', async () => {\n    const { configureFastify } = loadFastifyConfig()\n    await withFunctions(mockedFastifyInstance, {\n      apiRootPath: '/kittens',\n      port: 5555,\n    })\n\n    expect(configureFastify).toHaveBeenCalledTimes(1)\n\n    expect(configureFastify).toHaveBeenCalledWith(expect.anything(), {\n      side: 'api',\n      apiRootPath: '/kittens',\n      port: 5555,\n    })\n  })","file":"withFunctions.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"Check that configureFastify registers a plugin","suites":["Checks that configureFastify is called for the api side"],"updatePoint":{"line":95,"column":52},"line":95,"code":"  it('Check that configureFastify registers a plugin', async () => {\n    await withFunctions(mockedFastifyInstance, {\n      apiRootPath: '/kittens',\n      port: 5555,\n    })\n\n    expect(mockedFastifyInstance.register).toHaveBeenCalledWith(\n      'I was registered by the custom configureFastify function'\n    )\n  })","file":"withFunctions.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"Check that configureFastify registers a route","suites":["Checks that configureFastify is called for the api side"],"updatePoint":{"line":107,"column":51},"line":107,"code":"  it('Check that configureFastify registers a route', async () => {\n    await withFunctions(mockedFastifyInstance, {\n      apiRootPath: '/boots',\n      port: 5554,\n    })\n\n    expect(mockedFastifyInstance.get).toHaveBeenCalledWith(\n      `/rest/v1/users/get/:userId`,\n      expect.any(Function)\n    )\n  })","file":"withFunctions.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"Check that withFunctions returns the same Fastify instance, and not a new one","suites":["Checks that configureFastify is called for the api side"],"updatePoint":{"line":119,"column":83},"line":119,"code":"  it('Check that withFunctions returns the same Fastify instance, and not a new one', async () => {\n    await withFunctions(mockedFastifyInstance, {\n      apiRootPath: '/bazinga',\n      port: 5556,\n    })\n\n    expect(mockedFastifyInstance.version).toBe('bazinga')\n  })","file":"withFunctions.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"Does not throw when configureFastify is missing from server config","suites":["Checks that configureFastify is called for the api side"],"updatePoint":{"line":128,"column":72},"line":128,"code":"  it('Does not throw when configureFastify is missing from server config', () => {\n    ;(loadFastifyConfig as jest.Mock).mockReturnValue({\n      config: {},\n      configureFastify: null,\n    })\n\n    expect(\n      withFunctions(mockedFastifyInstance, {\n        apiRootPath: '/bazinga',\n        port: 5556,\n      })\n    ).resolves.not.toThrowError()\n  })","file":"withFunctions.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"Attach handlers for prerendered files","suites":[],"updatePoint":{"line":37,"column":43},"line":37,"code":"test('Attach handlers for prerendered files', async () => {\n  const mockedFastifyInstance = {\n    register: jest.fn(),\n    get: jest.fn(),\n    setNotFoundHandler: jest.fn(),\n    log: console,\n  } as unknown as FastifyInstance\n\n  await withWebServer(mockedFastifyInstance, { port: 3000 })\n\n  expect(mockedFastifyInstance.get).toHaveBeenCalledWith(\n    '/about',\n    expect.anything()\n  )\n  expect(mockedFastifyInstance.get).toHaveBeenCalledWith(\n    '/mocked',\n    expect.anything()\n  )\n  expect(mockedFastifyInstance.get).toHaveBeenCalledWith(\n    '/posts/new',\n    expect.anything()\n  )\n\n  // Ignore index.html\n  expect(mockedFastifyInstance.get).not.toHaveBeenCalledWith(\n    '/index',\n    expect.anything()\n  )\n})","file":"withWebServer.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"Adds SPA fallback","suites":[],"updatePoint":{"line":67,"column":23},"line":67,"code":"test('Adds SPA fallback', async () => {\n  const mockedFastifyInstance = {\n    register: jest.fn(),\n    get: jest.fn(),\n    setNotFoundHandler: jest.fn(),\n    log: console,\n  } as unknown as FastifyInstance\n\n  await withWebServer(mockedFastifyInstance, { port: 3000 })\n\n  expect(mockedFastifyInstance.setNotFoundHandler).toHaveBeenCalled()\n})","file":"withWebServer.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"Check that configureFastify is called with the expected side and options","suites":["Checks that configureFastify is called for the web side"],"updatePoint":{"line":106,"column":78},"line":106,"code":"  it('Check that configureFastify is called with the expected side and options', async () => {\n    await withWebServer(mockedFastifyInstance, { port: 3001 })\n\n    const { configureFastify } = loadFastifyConfig()\n\n    expect(configureFastify).toHaveBeenCalledTimes(1)\n\n    // We don't care about the first argument\n    expect(configureFastify).toHaveBeenCalledWith(expect.anything(), {\n      side: 'web',\n      port: 3001,\n    })\n  })","file":"withWebServer.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"Check that configureFastify will register in Fastify a plugin","suites":["Checks that configureFastify is called for the web side"],"updatePoint":{"line":120,"column":67},"line":120,"code":"  it('Check that configureFastify will register in Fastify a plugin', async () => {\n    await withWebServer(mockedFastifyInstance, { port: 3001 })\n    expect(mockedFastifyInstance.register).toHaveBeenCalledWith(\n      'Fake bazinga plugin'\n    )\n  })","file":"withWebServer.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"Check that withWebServer returns the same Fastify instance, and not a new one","suites":["Checks that configureFastify is called for the web side"],"updatePoint":{"line":127,"column":83},"line":127,"code":"  it('Check that withWebServer returns the same Fastify instance, and not a new one', async () => {\n    await withWebServer(mockedFastifyInstance, { port: 3001 })\n    expect(mockedFastifyInstance.version).toBe('bazinga')\n  })","file":"withWebServer.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"When configureFastify is missing from server config, it does not throw","suites":["Checks that configureFastify is called for the web side"],"updatePoint":{"line":132,"column":76},"line":132,"code":"  it('When configureFastify is missing from server config, it does not throw', () => {\n    ;(loadFastifyConfig as jest.Mock).mockReturnValue({\n      config: {},\n      configureFastify: null,\n    })\n\n    expect(\n      withWebServer(mockedFastifyInstance, { port: 3001 })\n    ).resolves.not.toThrowError()\n  })","file":"withWebServer.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"Returns the origin correctly when configured in handler","suites":["CORS"],"updatePoint":{"line":86,"column":61},"line":86,"code":"  it('Returns the origin correctly when configured in handler', async () => {\n    const handler = createGraphQLHandler({\n      loggerConfig: { logger: createLogger({}), options: {} },\n      sdls: {},\n      directives: {},\n      services: {},\n      cors: {\n        origin: 'https://web.redwoodjs.com',\n      },\n      onException: () => {},\n    })\n\n    const mockedEvent = mockLambdaEvent({\n      headers: {\n        origin: 'https://redwoodjs.com',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ query: '{ me { id, name } }' }),\n      httpMethod: 'POST',\n    })\n\n    const response = await handler(mockedEvent, {} as Context)\n\n    expect(response.statusCode).toBe(200)\n\n    expect(response.headers['access-control-allow-origin']).toEqual(\n      'https://web.redwoodjs.com'\n    )\n  })","file":"cors.test.ts","skipped":false,"dir":"packages/graphql-server/src/__tests__"},{"name":"Returns requestOrigin if cors origin set to true","suites":["CORS"],"updatePoint":{"line":116,"column":54},"line":116,"code":"  it('Returns requestOrigin if cors origin set to true', async () => {\n    const handler = createGraphQLHandler({\n      loggerConfig: { logger: createLogger({}), options: {} },\n      sdls: {},\n      directives: {},\n      services: {},\n      cors: {\n        origin: true,\n      },\n      onException: () => {},\n    })\n\n    const mockedEvent = mockLambdaEvent({\n      headers: {\n        origin: 'https://someothersite.newjsframework.com',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ query: '{ me { id, name } }' }),\n      httpMethod: 'POST',\n    })\n\n    const response = await handler(mockedEvent, {} as Context)\n\n    expect(response.statusCode).toBe(200)\n\n    expect(response.headers['access-control-allow-origin']).toEqual(\n      'https://someothersite.newjsframework.com'\n    )\n  })","file":"cors.test.ts","skipped":false,"dir":"packages/graphql-server/src/__tests__"},{"name":"Returns the origin for OPTIONS requests","suites":["CORS"],"updatePoint":{"line":146,"column":45},"line":146,"code":"  it('Returns the origin for OPTIONS requests', async () => {\n    const handler = createGraphQLHandler({\n      loggerConfig: { logger: createLogger({}), options: {} },\n      sdls: {},\n      directives: {},\n      services: {},\n      cors: {\n        origin: 'https://mycrossdomainsite.co.uk',\n      },\n      onException: () => {},\n    })\n\n    const mockedEvent = mockLambdaEvent({\n      headers: {\n        origin: 'https://someothersite.newjsframework.com',\n        'Content-Type': 'application/json',\n      },\n      httpMethod: 'OPTIONS',\n    })\n\n    const response = await handler(mockedEvent, {} as Context)\n\n    expect(response.statusCode).toBe(204)\n\n    expect(response.headers['access-control-allow-origin']).toEqual(\n      'https://mycrossdomainsite.co.uk'\n    )\n  })","file":"cors.test.ts","skipped":false,"dir":"packages/graphql-server/src/__tests__"},{"name":"Does not return cross origin headers if option not specified","suites":["CORS"],"updatePoint":{"line":175,"column":66},"line":175,"code":"  it('Does not return cross origin headers if option not specified', async () => {\n    const handler = createGraphQLHandler({\n      loggerConfig: { logger: createLogger({}), options: {} },\n      sdls: {},\n      directives: {},\n      services: {},\n      onException: () => {},\n    })\n\n    const mockedEvent = mockLambdaEvent({\n      headers: {\n        origin: 'https://someothersite.newjsframework.com',\n        'Content-Type': 'application/json',\n      },\n      httpMethod: 'OPTIONS',\n    })\n\n    const response = await handler(mockedEvent, {} as Context)\n\n    expect(response.statusCode).toBe(204)\n    const resHeaderKeys = Object.keys(response.headers)\n\n    expect(resHeaderKeys).not.toContain('access-control-allow-origin')\n    expect(resHeaderKeys).not.toContain('access-control-allow-credentials')\n  })","file":"cors.test.ts","skipped":false,"dir":"packages/graphql-server/src/__tests__"},{"name":"Returns the requestOrigin when more than one origin supplied in config","suites":["CORS"],"updatePoint":{"line":201,"column":76},"line":201,"code":"  it('Returns the requestOrigin when more than one origin supplied in config', async () => {\n    const handler = createGraphQLHandler({\n      loggerConfig: { logger: createLogger({}), options: {} },\n      sdls: {},\n      directives: {},\n      services: {},\n      cors: {\n        origin: ['https://site1.one', 'https://site2.two'],\n      },\n      onException: () => {},\n    })\n\n    const mockedEvent: APIGatewayProxyEvent = mockLambdaEvent({\n      headers: {\n        origin: 'https://site2.two',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ query: '{ me { id, name } }' }),\n      httpMethod: 'POST',\n    })\n\n    const response = await handler(mockedEvent, {} as Context)\n\n    expect(response.statusCode).toBe(200)\n\n    // Note: no multiValueHeaders in request, so we expect response to be in headers too\n    expect(response.headers['access-control-allow-origin']).toEqual(\n      'https://site2.two'\n    )\n  })","file":"cors.test.ts","skipped":false,"dir":"packages/graphql-server/src/__tests__"},{"name":"Returns CORS headers with multiValueHeaders in request, as MVH in response","suites":["CORS"],"updatePoint":{"line":232,"column":80},"line":232,"code":"  it('Returns CORS headers with multiValueHeaders in request, as MVH in response', async () => {\n    const handler = createGraphQLHandler({\n      loggerConfig: { logger: createLogger({}), options: {} },\n      sdls: {},\n      directives: {},\n      services: {},\n      cors: {\n        origin: ['https://site1.one', 'https://site2.two'],\n      },\n      onException: () => {},\n    })\n\n    const mockedEvent: APIGatewayProxyEvent = mockLambdaEvent({\n      headers: {\n        origin: 'https://site2.two',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ query: '{ me { id, name } }' }),\n      multiValueHeaders: {\n        origin: ['https://site2.two'],\n        'Content-Type': ['application/json'],\n      },\n      httpMethod: 'POST',\n    })\n\n    const response = await handler(mockedEvent, {} as Context)\n\n    expect(response.statusCode).toBe(200)\n\n    expect(response.headers['access-control-allow-origin']).toEqual(\n      'https://site2.two'\n    )\n  })","file":"cors.test.ts","skipped":false,"dir":"packages/graphql-server/src/__tests__"},{"name":"Should map directives globs to defined structure correctly","suites":[],"updatePoint":{"line":21,"column":64},"line":21,"code":"test('Should map directives globs to defined structure correctly', async () => {\n  // Mocking what our import-dir plugin would do\n  const directiveFiles = {\n    foo_directive: {\n      schema: fooSchema,\n      foo: createTransformerDirective(fooSchema, () => 'I am foo'),\n    },\n    nested_bazinga_directive: {\n      bazinga: createValidatorDirective(bazingaSchema, async () => {\n        throw new Error('Only soft kittens allowed')\n      }),\n      schema: bazingaSchema,\n    },\n    heavily_nested_bar_directive: {\n      bar: createTransformerDirective(barSchema, () => 'I am bar'),\n      schema: barSchema,\n    },\n  }\n\n  const [fooDirective, bazingaDirective, barDirective] =\n    makeDirectivesForPlugin(directiveFiles)\n\n  expect(fooDirective.name).toBe('foo')\n  expect(fooDirective.onResolvedValue({} as DirectiveParams)).toBe('I am foo')\n  expect(fooDirective.schema.kind).toBe('Document')\n\n  expect(bazingaDirective.name).toBe('bazinga')\n  expect(bazingaDirective.onResolvedValue).rejects.toThrowError(\n    'Only soft kittens allowed'\n  )\n  expect(bazingaDirective.schema.kind).toBe('Document')\n\n  expect(barDirective.name).toBe('bar')\n  expect(await barDirective.onResolvedValue({} as DirectiveParams)).toBe(\n    'I am bar'\n  )\n  expect(barDirective.schema.kind).toBe('Document')\n})","file":"makeDirectives.test.ts","skipped":false,"dir":"packages/graphql-server/src/__tests__"},{"name":"Tells you if you forgot to wrap the implementation function","suites":["Errors out with a helpful message, if the directive is not constructed correctly"],"updatePoint":{"line":61,"column":65},"line":61,"code":"  it('Tells you if you forgot to wrap the implementation function', () => {\n    const incorrectDirectiveFiles = {\n      foo_directive: {\n        schema: fooSchema,\n        foo: () => 'Oopy I forgot to wrap',\n      },\n    }\n\n    expect(() => makeDirectivesForPlugin(incorrectDirectiveFiles)).toThrowError(\n      'Please use `createValidatorDirective` or `createTransformerDirective` functions to define your directive'\n    )\n  })","file":"makeDirectives.test.ts","skipped":false,"dir":"packages/graphql-server/src/__tests__"},{"name":"Tells you if you forgot the implementation function","suites":["Errors out with a helpful message, if the directive is not constructed correctly"],"updatePoint":{"line":74,"column":57},"line":74,"code":"  it('Tells you if you forgot the implementation function', () => {\n    expect(() => createValidatorDirective(fooSchema, undefined)).toThrowError(\n      'Directive validation function not implemented for @foo'\n    )\n\n    expect(() => createTransformerDirective(fooSchema, undefined)).toThrowError(\n      'Directive transformer function not implemented for @foo'\n    )\n  })","file":"makeDirectives.test.ts","skipped":false,"dir":"packages/graphql-server/src/__tests__"},{"name":"Tells you if you messed up the schema","suites":["Errors out with a helpful message, if the directive is not constructed correctly"],"updatePoint":{"line":84,"column":43},"line":84,"code":"  it('Tells you if you messed up the schema', () => {\n    // The messages come from the graphql libs, so no need to check the messages\n    expect(() =>\n      createValidatorDirective(gql`directive @misdirective`, undefined)\n    ).toThrow()\n\n    expect(() =>\n      createTransformerDirective(gql`misdirective`, undefined)\n    ).toThrow()\n  })","file":"makeDirectives.test.ts","skipped":false,"dir":"packages/graphql-server/src/__tests__"},{"name":"Resolver functions are mapped correctly.","suites":["makeMergedSchema","Query Type"],"updatePoint":{"line":149,"column":48},"line":149,"code":"    it('Resolver functions are mapped correctly.', () => {\n      expect(\n        queryFields.inResolver.resolve &&\n          queryFields.inResolver.resolve(\n            null,\n            {},\n            null,\n            {} as GraphQLResolveInfo\n          )\n      ).toEqual(\"I'm defined in the resolver.\")\n    })","file":"makeMergedSchema.test.ts","skipped":false,"dir":"packages/graphql-server/src/__tests__"},{"name":"Resolver functions take preference over service functions.","suites":["makeMergedSchema","Query Type"],"updatePoint":{"line":161,"column":66},"line":161,"code":"    it('Resolver functions take preference over service functions.', () => {\n      expect(\n        queryFields.inResolverAndServices.resolve &&\n          queryFields.inResolverAndServices.resolve(\n            null,\n            {},\n            null,\n            {} as GraphQLResolveInfo\n          )\n      ).toEqual(\"I'm defined in the resolver.\")\n    })","file":"makeMergedSchema.test.ts","skipped":false,"dir":"packages/graphql-server/src/__tests__"},{"name":"Service functions are mapped correctly.","suites":["makeMergedSchema","Query Type"],"updatePoint":{"line":173,"column":47},"line":173,"code":"    it('Service functions are mapped correctly.', async () => {\n      expect(\n        queryFields.inServices.resolve &&\n          (await queryFields.inServices.resolve(\n            null,\n            {},\n            null,\n            {} as GraphQLResolveInfo\n          ))\n      ).toEqual(\"I'm defined in the service.\")\n    })","file":"makeMergedSchema.test.ts","skipped":false,"dir":"packages/graphql-server/src/__tests__"},{"name":"Resolver functions are mapped correctly","suites":["makeMergedSchema","MyOwnType"],"updatePoint":{"line":190,"column":47},"line":190,"code":"    it('Resolver functions are mapped correctly', () => {\n      expect(\n        myOwnTypeFields.inTypeResolverAndServices.resolve &&\n          myOwnTypeFields.inTypeResolverAndServices.resolve(\n            null,\n            {},\n            null,\n            {} as GraphQLResolveInfo\n          )\n      ).toEqual(\"MyOwnType: I'm defined in the resolver.\")\n    })","file":"makeMergedSchema.test.ts","skipped":false,"dir":"packages/graphql-server/src/__tests__"},{"name":"Resolver functions take preference over service functions.","suites":["makeMergedSchema","MyOwnType"],"updatePoint":{"line":202,"column":66},"line":202,"code":"    it('Resolver functions take preference over service functions.', () => {\n      expect(\n        myOwnTypeFields.inTypeResolver.resolve &&\n          myOwnTypeFields.inTypeResolver.resolve(\n            null,\n            {},\n            null,\n            {} as GraphQLResolveInfo\n          )\n      ).toEqual(\"MyOwnType: I'm defined in the resolver.\")\n    })","file":"makeMergedSchema.test.ts","skipped":false,"dir":"packages/graphql-server/src/__tests__"},{"name":"Service functions are mapped correctly.","suites":["makeMergedSchema","MyOwnType"],"updatePoint":{"line":214,"column":47},"line":214,"code":"    it('Service functions are mapped correctly.', async () => {\n      expect(\n        myOwnTypeFields.inTypeServices.resolve &&\n          (await myOwnTypeFields.inTypeServices.resolve(\n            null,\n            {},\n            null,\n            {} as GraphQLResolveInfo\n          ))\n      ).toEqual(\"MyOwnType: I'm defined in the services.\")\n    })","file":"makeMergedSchema.test.ts","skipped":false,"dir":"packages/graphql-server/src/__tests__"},{"name":"supports querying a union and having __resolveType correctly created to decide what member it is","suites":["makeMergedSchema","MyUnionType"],"updatePoint":{"line":228,"column":104},"line":228,"code":"    it('supports querying a union and having __resolveType correctly created to decide what member it is', async () => {\n      const query = `query {\n        searchType {\n          ... on MySecondType {\n            name\n          }\n        }\n      }`\n      const res = await graphql({ schema, source: query })\n      expect(res.errors).toBeUndefined()\n      expect((res.data as any).searchType.name).toBe('MySecondType')\n    })","file":"makeMergedSchema.test.ts","skipped":false,"dir":"packages/graphql-server/src/__tests__"},{"name":"throws an error if union types have same fields and resolver cannot resolve the correct type","suites":["makeMergedSchema","MyUnionTypeSameFields"],"updatePoint":{"line":243,"column":100},"line":243,"code":"    it('throws an error if union types have same fields and resolver cannot resolve the correct type', async () => {\n      const query = `query {\n        searchTypeSameFields {\n          ... on MySecondType {\n            name\n          }\n        }\n      }`\n      const res = await graphql({ schema, source: query })\n      expect(res.errors).toEqual([\n        new GraphQLError(\n          'Unable to resolve correct type for union. Try adding unique fields to each type or __typename to each resolver'\n        ),\n      ])\n      expect((res.data as any).searchTypeSameFields).toBeNull()\n    })","file":"makeMergedSchema.test.ts","skipped":false,"dir":"packages/graphql-server/src/__tests__"},{"name":"supports querying a union and having __resolveType correctly created to decide what member it is","suites":["makeMergedSchema","MyUnionTypeWithTypename"],"updatePoint":{"line":262,"column":104},"line":262,"code":"    it('supports querying a union and having __resolveType correctly created to decide what member it is', async () => {\n      const query = `query {\n        searchTypeSameFieldsWithTypename {\n          ... on MySecondType {\n            name\n          }\n        }\n      }`\n      const res = await graphql({ schema, source: query })\n      expect(res.errors).toBeUndefined()\n      expect((res.data as any).searchTypeSameFieldsWithTypename.name).toBe(\n        'MySecondType'\n      )\n    })","file":"makeMergedSchema.test.ts","skipped":false,"dir":"packages/graphql-server/src/__tests__"},{"name":"Confirms that directives have been made from a set of files and added to schema.","suites":["makeMergedSchema","Directives"],"updatePoint":{"line":279,"column":88},"line":279,"code":"    it('Confirms that directives have been made from a set of files and added to schema.', () => {\n      expect(schema.getDirective('foo')).toBeTruthy()\n      expect(schema.getDirective('bazinga')).toBeTruthy()\n      expect(schema.getDirective('bar')).toBeTruthy()\n    })","file":"makeMergedSchema.test.ts","skipped":false,"dir":"packages/graphql-server/src/__tests__"},{"name":"Checks that an unknown directive does not get added to the schema.","suites":["makeMergedSchema","Directives"],"updatePoint":{"line":285,"column":74},"line":285,"code":"    it('Checks that an unknown directive does not get added to the schema.', () => {\n      expect(schema.getDirective('misdirective')).toBeFalsy()\n    })","file":"makeMergedSchema.test.ts","skipped":false,"dir":"packages/graphql-server/src/__tests__"},{"name":"Should map a subscribe correctly","suites":["Should map subscription globs to defined structure correctly"],"updatePoint":{"line":21,"column":38},"line":21,"code":"  it('Should map a subscribe correctly', async () => {\n    // Mocking what our import-dir plugin would do\n    const subscriptionFiles = {\n      countdown_subscription: {\n        schema: countdownSchema,\n        countdown: {\n          async *subscribe(_, { from, interval }) {\n            for (let i = from; i >= 0; i--) {\n              await new Promise((resolve) =>\n                setTimeout(resolve, interval ?? 1000)\n              )\n              yield { countdown: i }\n            }\n          },\n        },\n      },\n    }\n\n    const [countdownSubscription] = makeSubscriptions(subscriptionFiles)\n\n    expect(countdownSubscription.schema.kind).toBe('Document')\n    expect(countdownSubscription.name).toBe('countdown')\n    expect(countdownSubscription.resolvers.subscribe).toBeDefined()\n    expect(countdownSubscription.resolvers.resolve).not.toBeDefined()\n  })","file":"makeSubscriptions.test.ts","skipped":false,"dir":"packages/graphql-server/src/__tests__"},{"name":"Should map a subscribe and resolve correctly","suites":["Should map subscription globs to defined structure correctly"],"updatePoint":{"line":47,"column":50},"line":47,"code":"  it('Should map a subscribe and resolve correctly', async () => {\n    // Mocking what our import-dir plugin would do\n    const subscriptionFiles = {\n      newMessage_subscription: {\n        schema: newMessageSchema,\n        newMessage: {\n          subscribe: (_, { roomId }) => {\n            return roomId\n          },\n          resolve: (payload) => {\n            return payload\n          },\n        },\n      },\n    }\n\n    const [newMessageSubscription] = makeSubscriptions(subscriptionFiles)\n\n    expect(newMessageSubscription.schema.kind).toBe('Document')\n    expect(newMessageSubscription.name).toBe('newMessage')\n    expect(newMessageSubscription.resolvers.subscribe).toBeDefined()\n    expect(newMessageSubscription.resolvers.resolve).toBeDefined()\n  })","file":"makeSubscriptions.test.ts","skipped":false,"dir":"packages/graphql-server/src/__tests__"},{"name":"Handles single endpoint, headers and method","suites":["mapRwCorsOptionsToYoga"],"updatePoint":{"line":16,"column":49},"line":16,"code":"  it('Handles single endpoint, headers and method', () => {\n    const output = mapRwCorsOptionsToYoga({\n      origin: 'http://localhost:8910',\n      allowedHeaders: 'X-Bazinga',\n      methods: 'PATCH',\n      credentials: true,\n    })\n\n    expect(output).toEqual({\n      credentials: true,\n      allowedHeaders: ['X-Bazinga'],\n      methods: ['PATCH'],\n      origin: ['http://localhost:8910'],\n    })\n  })","file":"mapRwCorsToYoga.test.ts","skipped":false,"dir":"packages/graphql-server/src/__tests__"},{"name":"Handles options as an array","suites":["mapRwCorsOptionsToYoga"],"updatePoint":{"line":32,"column":33},"line":32,"code":"  it('Handles options as an array', () => {\n    const output = mapRwCorsOptionsToYoga({\n      origin: ['http://localhost:8910'],\n      credentials: false,\n      allowedHeaders: ['X-Bazinga', 'X-Kittens', 'Authorization'],\n      methods: ['PATCH', 'PUT', 'POST'],\n    })\n\n    expect(output).toEqual({\n      origin: ['http://localhost:8910'],\n      methods: ['PATCH', 'PUT', 'POST'],\n      allowedHeaders: ['X-Bazinga', 'X-Kittens', 'Authorization'],\n    })\n  })","file":"mapRwCorsToYoga.test.ts","skipped":false,"dir":"packages/graphql-server/src/__tests__"},{"name":"Handles multiple endpoints","suites":["mapRwCorsOptionsToYoga"],"updatePoint":{"line":47,"column":32},"line":47,"code":"  it('Handles multiple endpoints', () => {\n    const output = mapRwCorsOptionsToYoga({\n      origin: ['https://bazinga.com', 'https://softkitty.mew'],\n      credentials: true,\n      allowedHeaders: ['X-Bazinga', 'X-Kittens', 'Authorization'],\n      methods: ['PATCH', 'PUT', 'POST'],\n    })\n\n    expect(output).toEqual({\n      credentials: true,\n      origin: ['https://bazinga.com', 'https://softkitty.mew'],\n      methods: ['PATCH', 'PUT', 'POST'],\n      allowedHeaders: ['X-Bazinga', 'X-Kittens', 'Authorization'],\n    })\n  })","file":"mapRwCorsToYoga.test.ts","skipped":false,"dir":"packages/graphql-server/src/__tests__"},{"name":"Returns the request origin, if cors origin is set to true","suites":["mapRwCorsOptionsToYoga"],"updatePoint":{"line":63,"column":63},"line":63,"code":"  it('Returns the request origin, if cors origin is set to true', () => {\n    const output = mapRwCorsOptionsToYoga(\n      {\n        origin: true,\n        credentials: true,\n        allowedHeaders: ['Auth-Provider', 'X-Kittens', 'Authorization'],\n        methods: ['DELETE'],\n      },\n      'https://myapiside.redwood.com' // <-- this is the Request.headers.origin\n    )\n\n    expect(output).toEqual({\n      credentials: true,\n      origin: ['https://myapiside.redwood.com'],\n      methods: ['DELETE'],\n      allowedHeaders: ['Auth-Provider', 'X-Kittens', 'Authorization'],\n    })\n  })","file":"mapRwCorsToYoga.test.ts","skipped":false,"dir":"packages/graphql-server/src/__tests__"},{"name":"Returns the *, if cors origin is set to true AND no request origin supplied","suites":["mapRwCorsOptionsToYoga"],"updatePoint":{"line":82,"column":81},"line":82,"code":"  it('Returns the *, if cors origin is set to true AND no request origin supplied', () => {\n    const output = mapRwCorsOptionsToYoga(\n      {\n        origin: true,\n        credentials: true,\n        allowedHeaders: ['Auth-Provider', 'X-Kittens', 'Authorization'],\n        methods: ['DELETE'],\n      },\n      undefined\n    )\n\n    expect(output).toEqual({\n      credentials: true,\n      origin: ['*'],\n      methods: ['DELETE'],\n      allowedHeaders: ['Auth-Provider', 'X-Kittens', 'Authorization'],\n    })\n  })","file":"mapRwCorsToYoga.test.ts","skipped":false,"dir":"packages/graphql-server/src/__tests__"},{"name":"extracts named exports","suites":[],"updatePoint":{"line":33,"column":28},"line":33,"code":"test('extracts named exports', () => {\n  // Fixture is in web folder, because it has a JSX export\n  const fakeCode = fileToAst(getFixturePath('/web/src/exports.ts'))\n  const n = getNamedExports(fakeCode)\n  expect(n).toMatchInlineSnapshot(`\n    [\n      {\n        \"name\": \"exportA\",\n        \"type\": \"re-export\",\n      },\n      {\n        \"name\": \"exportB\",\n        \"type\": \"re-export\",\n      },\n      {\n        \"name\": \"myVariableExport\",\n        \"type\": \"variable\",\n      },\n      {\n        \"name\": \"myArrowFunctionExport\",\n        \"type\": \"variable\",\n      },\n      {\n        \"name\": \"myFunctionExport\",\n        \"type\": \"function\",\n      },\n      {\n        \"name\": \"MyClassExport\",\n        \"type\": \"class\",\n      },\n    ]\n  `)\n})","file":"ast.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"tests default exports","suites":[],"updatePoint":{"line":67,"column":27},"line":67,"code":"test('tests default exports', () => {\n  expect(\n    hasDefaultExport(fileToAst(getFixturePath('/defaultExports/multiLine.js')))\n  ).toEqual(true)\n\n  expect(\n    hasDefaultExport(fileToAst(getFixturePath('defaultExports/singleLine.js')))\n  ).toEqual(true)\n\n  expect(\n    hasDefaultExport(fileToAst(getFixturePath('defaultExports/none.js')))\n  ).toEqual(false)\n})","file":"ast.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Returns the exported query from a cell (ignoring others)","suites":[],"updatePoint":{"line":81,"column":62},"line":81,"code":"test('Returns the exported query from a cell (ignoring others)', () => {\n  const cellFileAst = fileToAst(getFixturePath('web/src/cell.ts'))\n\n  const cellQuery = getCellGqlQuery(cellFileAst)\n  expect(cellQuery).toMatchInlineSnapshot(`\n    \"\n      query BazingaQuery($id: String!) {\n        member: member(id: $id) {\n          id\n        }\n      }\n    \"\n  `)\n})","file":"ast.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Returns the all quries from a file using getGqlQueries","suites":[],"updatePoint":{"line":96,"column":60},"line":96,"code":"test('Returns the all quries from a file using getGqlQueries', () => {\n  const cellFileAst = fileToAst(getFixturePath('web/src/cell.ts'))\n\n  const cellQuery = getGqlQueries(cellFileAst)\n  expect(cellQuery).toMatchInlineSnapshot(`\n    [\n      \"\n      query BazingaQuery($id: String!) {\n        member: member(id: $id) {\n          id\n        }\n      }\n    \",\n      \"\n    query FindSoftKitten($id: String!) {\n        softKitten: softKitten(id: $id) {\n          id\n        }\n      }\n    \",\n      \"query JustForFun {\n      itsFriday {}\n    }\",\n    ]\n  `)\n})","file":"ast.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Handles typecast syntax without erroring","suites":[],"updatePoint":{"line":123,"column":46},"line":123,"code":"test('Handles typecast syntax without erroring', () => {\n  expect(() => fileToAst(getFixturePath('api/typecast.ts'))).not.toThrow()\n})","file":"ast.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"api files are prebuilt","suites":[],"updatePoint":{"line":47,"column":28},"line":47,"code":"test('api files are prebuilt', () => {\n  // Builds non-nested functions\n  expect(relativePaths).toContain(\n    '.redwood/prebuild/api/src/functions/graphql.js'\n  )\n\n  // Builds graphql folder\n  expect(relativePaths).toContain(\n    '.redwood/prebuild/api/src/graphql/todos.sdl.js'\n  )\n\n  // Builds nested function\n  expect(relativePaths).toContain(\n    '.redwood/prebuild/api/src/functions/nested/nested.js'\n  )\n})","file":"build_api.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"api prebuild finds babel.config.js","suites":[],"updatePoint":{"line":64,"column":40},"line":64,"code":"test('api prebuild finds babel.config.js', () => {\n  let p = getApiSideBabelConfigPath()\n  p = cleanPaths(p)\n  expect(p).toEqual('api/babel.config.js')\n})","file":"build_api.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"api prebuild uses babel config only from the api side root","suites":[],"updatePoint":{"line":70,"column":64},"line":70,"code":"test('api prebuild uses babel config only from the api side root', () => {\n  const p = prebuiltFiles.filter((p) => p.endsWith('dog.js')).pop()\n  const code = fs.readFileSync(p, 'utf-8')\n  expect(code).toContain(`import dog from \"dog-bless\";`)\n\n  // Should ignore root babel config\n  expect(code).not.toContain(`import kitty from \"kitty-purr\"`)\n})","file":"build_api.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"api prebuild transforms gql with `babel-plugin-graphql-tag`","suites":[],"line":80,"code":"test.skip('api prebuild transforms gql with `babel-plugin-graphql-tag`', () => {","file":"build_api.test.ts","skipped":true,"dir":"packages/internal/src/__tests__"},{"name":"polyfills Math.hypot","suites":["api prebuild polyfills unsupported functionality","ES features","Node.js 13"],"updatePoint":{"line":108,"column":30},"line":108,"code":"      it('polyfills Math.hypot', () => {\n        expect(code).toContain(\n          `import _Math$hypot from \"@babel/runtime-corejs3/core-js/math/hypot\"`\n        )\n      })","file":"build_api.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"polyfills String.matchAll","suites":["api prebuild polyfills unsupported functionality","ES features","Node.js 14"],"updatePoint":{"line":116,"column":35},"line":116,"code":"      it('polyfills String.matchAll', () => {\n        expect(code).toContain(\n          `import _matchAllInstanceProperty from \"@babel/runtime-corejs3/core-js/instance/match-all\"`\n        )\n      })","file":"build_api.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"polyfills AggregateError","suites":["api prebuild polyfills unsupported functionality","ES features","Node.js 15"],"updatePoint":{"line":124,"column":34},"line":124,"code":"      it('polyfills AggregateError', () => {\n        expect(code).toContain(\n          `import _AggregateError from \"@babel/runtime-corejs3/core-js/aggregate-error\"`\n        )\n      })","file":"build_api.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"polyfills Promise.any","suites":["api prebuild polyfills unsupported functionality","ES features","Node.js 15"],"updatePoint":{"line":164,"column":31},"line":164,"code":"      it('polyfills Promise.any', () => {\n        expect(code).toContain(\n          `import _Promise from \"@babel/runtime-corejs3/core-js/promise\"`\n        )\n        const _Promise = require('@babel/runtime-corejs3/core-js/promise')\n        expect(_Promise).toHaveProperty('any')\n      })","file":"build_api.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"polyfills String.replaceAll","suites":["api prebuild polyfills unsupported functionality","ES features","Node.js 15"],"updatePoint":{"line":172,"column":37},"line":172,"code":"      it('polyfills String.replaceAll', () => {\n        expect(code).toContain(\n          `import _replaceAllInstanceProperty from \"@babel/runtime-corejs3/core-js/instance/replace-all\"`\n        )\n      })","file":"build_api.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"doesn't polyfill TypedArray.set","suites":["api prebuild polyfills unsupported functionality","ES features","Node.js 17"],"updatePoint":{"line":181,"column":41},"line":181,"code":"      it(\"doesn't polyfill TypedArray.set\", () => {\n        expect(code).toContain(\n          [\n            `const buffer = new ArrayBuffer(8);`,\n            `const uint8 = new Uint8Array(buffer);`,\n            `uint8.set([1, 2, 3], 3);`,\n          ].join('\\n')\n        )\n      })","file":"build_api.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"polyfills Reflect methods","suites":["api prebuild polyfills unsupported functionality","ES Next features","Pre-stage 0 proposals"],"updatePoint":{"line":197,"column":35},"line":197,"code":"      it('polyfills Reflect methods', () => {\n        expect(code).toContain(\n          `import _Reflect$defineMetadata from \"@babel/runtime-corejs3/core-js/reflect/define-metadata\"`\n        )\n        expect(code).toContain(\n          `import _Reflect$deleteMetadata from \"@babel/runtime-corejs3/core-js/reflect/delete-metadata\"`\n        )\n        expect(code).toContain(\n          `import _Reflect$getMetadata from \"@babel/runtime-corejs3/core-js/reflect/get-metadata\"`\n        )\n        expect(code).toContain(\n          `import _Reflect$getMetadataKeys from \"@babel/runtime-corejs3/core-js/reflect/get-metadata-keys\"`\n        )\n        expect(code).toContain(\n          `import _Reflect$getOwnMetadata from \"@babel/runtime-corejs3/core-js/reflect/get-own-metadata\"`\n        )\n        expect(code).toContain(\n          `import _Reflect$getOwnMetadataKeys from \"@babel/runtime-corejs3/core-js/reflect/get-own-metadata-keys\"`\n        )\n        expect(code).toContain(\n          `import _Reflect$hasMetadata from \"@babel/runtime-corejs3/core-js/reflect/has-metadata\"`\n        )\n        expect(code).toContain(\n          `import _Reflect$hasOwnMetadata from \"@babel/runtime-corejs3/core-js/reflect/has-own-metadata\"`\n        )\n        expect(code).toContain(\n          `import _Reflect$metadata from \"@babel/runtime-corejs3/core-js/reflect/metadata\"`\n        )\n      })","file":"build_api.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"doesn't polyfill Getting last item from Array","suites":["api prebuild polyfills unsupported functionality","ES Next features","Stage 1 proposals"],"updatePoint":{"line":235,"column":55},"line":235,"code":"      it(\"doesn't polyfill Getting last item from Array\", () => {\n        expect(code).toContain(\n          [\n            `[1, 2, 3].lastIndex;`,\n            `[1, 2, 3].lastItem;`,\n            `const array = [1, 2, 3];`,\n            `array.lastItem = 4;`,\n            `new Array(1, 2, 3).lastIndex;`,\n            `new Array(1, 2, 3).lastItem;`,\n          ].join('\\n')\n        )\n      })","file":"build_api.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"polyfills compositeKey and compositeSymbol","suites":["api prebuild polyfills unsupported functionality","ES Next features","Stage 1 proposals"],"updatePoint":{"line":250,"column":52},"line":250,"code":"      it('polyfills compositeKey and compositeSymbol', () => {\n        expect(code).toContain(\n          `import _compositeKey from \"@babel/runtime-corejs3/core-js/composite-key\"`\n        )\n        expect(code).toContain(\n          `import _compositeSymbol from \"@babel/runtime-corejs3/core-js/composite-symbol\"`\n        )\n      })","file":"build_api.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"polyfills New collections methods","suites":["api prebuild polyfills unsupported functionality","ES Next features","Stage 1 proposals"],"updatePoint":{"line":261,"column":43},"line":261,"code":"      it('polyfills New collections methods', () => {\n        expect(code).toContain(\n          `import _Map from \"@babel/runtime-corejs3/core-js/map\"`\n        )\n        // See the comments on Promise.any above for more of an explanation\n        // of why we're testing for properties.\n        const _Map = require('@babel/runtime-corejs3/core-js/map')\n        expect(_Map).toHaveProperty('deleteAll')\n        expect(_Map).toHaveProperty('every')\n        expect(_Map).toHaveProperty('filter')\n        expect(_Map).toHaveProperty('find')\n        expect(_Map).toHaveProperty('findKey')\n        expect(_Map).toHaveProperty('from')\n        expect(_Map).toHaveProperty('groupBy')\n        expect(_Map).toHaveProperty('includes')\n        expect(_Map).toHaveProperty('keyBy')\n        expect(_Map).toHaveProperty('keyOf')\n        expect(_Map).toHaveProperty('mapKeys')\n        expect(_Map).toHaveProperty('mapValues')\n        expect(_Map).toHaveProperty('merge')\n        expect(_Map).toHaveProperty('of')\n        expect(_Map).toHaveProperty('reduce')\n        expect(_Map).toHaveProperty('some')\n        expect(_Map).toHaveProperty('update')\n\n        expect(code).toContain(\n          `import _Set from \"@babel/runtime-corejs3/core-js/set\"`\n        )\n        const _Set = require('@babel/runtime-corejs3/core-js/set')\n        expect(_Set).toHaveProperty('addAll')\n        expect(_Set).toHaveProperty('deleteAll')\n        expect(_Set).toHaveProperty('difference')\n        expect(_Set).toHaveProperty('every')\n        expect(_Set).toHaveProperty('filter')\n        expect(_Set).toHaveProperty('find')\n        expect(_Set).toHaveProperty('from')\n        expect(_Set).toHaveProperty('intersection')\n        expect(_Set).toHaveProperty('isDisjointFrom')\n        expect(_Set).toHaveProperty('isSubsetOf')\n        expect(_Set).toHaveProperty('isSupersetOf')\n        expect(_Set).toHaveProperty('join')\n        expect(_Set).toHaveProperty('map')\n        expect(_Set).toHaveProperty('of')\n        expect(_Set).toHaveProperty('reduce')\n        expect(_Set).toHaveProperty('some')\n        expect(_Set).toHaveProperty('symmetricDifference')\n        expect(_Set).toHaveProperty('union')\n\n        expect(code).toContain(\n          `import _WeakMap from \"@babel/runtime-corejs3/core-js/weak-map\"`\n        )\n        const _WeakMap = require('@babel/runtime-corejs3/core-js/weak-map')\n        expect(_WeakMap).toHaveProperty('deleteAll')\n        expect(_WeakMap).toHaveProperty('from')\n        expect(_WeakMap).toHaveProperty('of')\n\n        expect(code).toContain(\n          `import _WeakSet from \"@babel/runtime-corejs3/core-js/weak-set\"`\n        )\n        const _WeakSet = require('@babel/runtime-corejs3/core-js/weak-set')\n        expect(_WeakSet).toHaveProperty('addAll')\n        expect(_WeakSet).toHaveProperty('deleteAll')\n        expect(_WeakSet).toHaveProperty('from')\n        expect(_WeakSet).toHaveProperty('of')\n      })","file":"build_api.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"polyfills Math extensions","suites":["api prebuild polyfills unsupported functionality","ES Next features","Stage 1 proposals"],"updatePoint":{"line":329,"column":35},"line":329,"code":"      it('polyfills Math extensions', () => {\n        expect(code).toContain(\n          `import _Math$clamp from \"@babel/runtime-corejs3/core-js/math/clamp\"`\n        )\n        expect(code).toContain(\n          `import _Math$DEG_PER_RAD from \"@babel/runtime-corejs3/core-js/math/deg-per-rad\"`\n        )\n        expect(code).toContain(\n          `import _Math$degrees from \"@babel/runtime-corejs3/core-js/math/degrees\"`\n        )\n        expect(code).toContain(\n          `import _Math$fscale from \"@babel/runtime-corejs3/core-js/math/fscale\"`\n        )\n        expect(code).toContain(\n          `import _Math$RAD_PER_DEG from \"@babel/runtime-corejs3/core-js/math/rad-per-deg\"`\n        )\n        expect(code).toContain(\n          `import _Math$radians from \"@babel/runtime-corejs3/core-js/math/radians\"`\n        )\n        expect(code).toContain(\n          `import _Math$scale from \"@babel/runtime-corejs3/core-js/math/scale\"`\n        )\n      })","file":"build_api.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"polyfills Math.signbit","suites":["api prebuild polyfills unsupported functionality","ES Next features","Stage 1 proposals"],"updatePoint":{"line":355,"column":32},"line":355,"code":"      it('polyfills Math.signbit', () => {\n        expect(code).toContain(\n          `import _Math$signbit from \"@babel/runtime-corejs3/core-js/math/signbit\"`\n        )\n      })","file":"build_api.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"polyfills Number.fromString","suites":["api prebuild polyfills unsupported functionality","ES Next features","Stage 1 proposals"],"updatePoint":{"line":363,"column":37},"line":363,"code":"      it('polyfills Number.fromString', () => {\n        expect(code).toContain(\n          `import _Number$fromString from \"@babel/runtime-corejs3/core-js/number/from-string\"`\n        )\n      })","file":"build_api.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"polyfills Observable","suites":["api prebuild polyfills unsupported functionality","ES Next features","Stage 1 proposals"],"updatePoint":{"line":371,"column":30},"line":371,"code":"      it('polyfills Observable', () => {\n        expect(code).toContain(\n          `import _Observable from \"@babel/runtime-corejs3/core-js/observable\"`\n        )\n        expect(code).toContain(\n          `import _Symbol$observable from \"@babel/runtime-corejs3/core-js/symbol/observable\"`\n        )\n      })","file":"build_api.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"polyfills String.prototype.codePoints","suites":["api prebuild polyfills unsupported functionality","ES Next features","Stage 1 proposals"],"updatePoint":{"line":382,"column":47},"line":382,"code":"      it('polyfills String.prototype.codePoints', () => {\n        expect(code).toContain(\n          `import _codePointsInstanceProperty from \"@babel/runtime-corejs3/core-js/instance/code-points\"`\n        )\n      })","file":"build_api.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"polyfills Symbol.matcher","suites":["api prebuild polyfills unsupported functionality","ES Next features","Stage 1 proposals"],"updatePoint":{"line":391,"column":34},"line":391,"code":"      it('polyfills Symbol.matcher', () => {\n        expect(code).toContain(\n          `import _Symbol$patternMatch from \"@babel/runtime-corejs3/core-js/symbol/pattern-match\"`\n        )\n      })","file":"build_api.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"polyfills Symbol.{ asyncDispose, dispose } for using statement","suites":["api prebuild polyfills unsupported functionality","ES Next features","Stage 2 proposals"],"updatePoint":{"line":401,"column":72},"line":401,"code":"      it('polyfills Symbol.{ asyncDispose, dispose } for using statement', () => {\n        expect(code).toContain(\n          `import _Symbol$dispose from \"@babel/runtime-corejs3/core-js/symbol/dispose\"`\n        )\n      })","file":"build_api.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"polyfills efficient 64 bit arithmetic","suites":["api prebuild polyfills unsupported functionality","Withdrawn proposals (will be removed in core-js 4)"],"updatePoint":{"line":412,"column":45},"line":412,"code":"    it('polyfills efficient 64 bit arithmetic', () => {\n      expect(code).toContain(\n        `import _Math$iaddh from \"@babel/runtime-corejs3/core-js/math/iaddh\"`\n      )\n      expect(code).toContain(\n        `import _Math$imulh from \"@babel/runtime-corejs3/core-js/math/imulh\"`\n      )\n      expect(code).toContain(\n        `import _Math$isubh from \"@babel/runtime-corejs3/core-js/math/isubh\"`\n      )\n      expect(code).toContain(\n        `import _Math$umulh from \"@babel/runtime-corejs3/core-js/math/umulh\"`\n      )\n    })","file":"build_api.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"polyfills Promise.try","suites":["api prebuild polyfills unsupported functionality","Withdrawn proposals (will be removed in core-js 4)"],"updatePoint":{"line":429,"column":29},"line":429,"code":"    it('polyfills Promise.try', () => {\n      const _Promise = require('@babel/runtime-corejs3/core-js/promise')\n      expect(_Promise).toHaveProperty('try')\n    })","file":"build_api.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"polyfills String#at","suites":["api prebuild polyfills unsupported functionality","Withdrawn proposals (will be removed in core-js 4)"],"updatePoint":{"line":436,"column":27},"line":436,"code":"    it('polyfills String#at', () => {\n      expect(code).toContain(\n        `import _atInstanceProperty from \"@babel/runtime-corejs3/core-js/instance/at\"`\n      )\n    })","file":"build_api.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"polyfills Seeded pseudo-random numbers","suites":["api prebuild polyfills unsupported functionality","Unstable (will be removed in core-js 4)"],"updatePoint":{"line":446,"column":46},"line":446,"code":"    it('polyfills Seeded pseudo-random numbers', () => {\n      expect(code).toContain(\n        `import _Math$seededPRNG from \"@babel/runtime-corejs3/core-js/math/seeded-prng\"`\n      )\n    })","file":"build_api.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Pretranspile uses corejs3 aliasing","suites":["api prebuild polyfills unsupported functionality","Unstable (will be removed in core-js 4)"],"updatePoint":{"line":454,"column":40},"line":454,"code":"test('Pretranspile uses corejs3 aliasing', () => {\n  // See https://babeljs.io/docs/en/babel-plugin-transform-runtime#core-js-aliasing\n  // This is because we configure the transform runtime plugin corejs\n\n  const p = prebuiltFiles.filter((p) => p.endsWith('transform.js')).pop()\n  const code = fs.readFileSync(p, 'utf-8')\n\n  // Polyfill for Symbol\n  expect(code).toContain(\n    `import _Symbol from \"@babel/runtime-corejs3/core-js/symbol\"`\n  )\n\n  // Polyfill for Promise\n  expect(code).toContain(\n    `import _Promise from \"@babel/runtime-corejs3/core-js/promise\"`\n  )\n\n  // Polyfill for .includes\n  expect(code).toContain(\n    'import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js/instance/includes\"'\n  )\n\n  // Polyfill for .iterator\n  expect(code).toContain(\n    `import _getIterator from \"@babel/runtime-corejs3/core-js/get-iterator\"`\n  )\n})","file":"build_api.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"jest mock statements also handle","suites":["api prebuild polyfills unsupported functionality","Unstable (will be removed in core-js 4)"],"updatePoint":{"line":482,"column":38},"line":482,"code":"test('jest mock statements also handle', () => {\n  const pathToTest = path.join(getPaths().api.services, 'todos/todos.test.js')\n\n  const code = fs.readFileSync(pathToTest, 'utf-8')\n\n  const defaultOptions = getApiSideDefaultBabelConfig()\n\n  // Step 1: prebuild service/todos.test.js\n  const outputForJest = babel.transform(code, {\n    ...defaultOptions,\n    filename: pathToTest,\n    cwd: getPaths().api.base,\n    // We override the plugins, to match packages/testing/config/jest/api/index.js\n    plugins: getApiSideBabelPlugins({ forJest: true }),\n  }).code\n\n  // Step 2: check that output has correct import statement path\n  expect(outputForJest).toContain('import dog from \"../../lib/dog\"')\n  // Step 3: check that output has correct jest.mock path\n  expect(outputForJest).toContain('jest.mock(\"../../lib/dog\"')\n})","file":"build_api.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"core-js polyfill list","suites":["api prebuild polyfills unsupported functionality","Unstable (will be removed in core-js 4)"],"updatePoint":{"line":504,"column":27},"line":504,"code":"test('core-js polyfill list', () => {\n  const { list } = compat({\n    targets: { node: TARGETS_NODE },\n    version: BABEL_PLUGIN_TRANSFORM_RUNTIME_OPTIONS.corejs.version,\n  })\n\n  /**\n   * Redwood targets Node.js 12, but that doesn't factor into what gets polyfilled\n   * because Redwood uses the plugin-transform-runtime polyfill strategy.\n   *\n   * Also, plugin-transform-runtime is pinned to core-js v3.0.0,\n   * so the list of available polyfill is a little outdated.\n   * Some \"ES Next\" polyfills have landed in v12+ Node.js versions.\n   */\n  expect(list).toMatchInlineSnapshot(`\n    [\n      \"es.regexp.flags\",\n      \"esnext.array.last-index\",\n      \"esnext.array.last-item\",\n      \"esnext.composite-key\",\n      \"esnext.composite-symbol\",\n      \"esnext.map.delete-all\",\n      \"esnext.map.every\",\n      \"esnext.map.filter\",\n      \"esnext.map.find\",\n      \"esnext.map.find-key\",\n      \"esnext.map.from\",\n      \"esnext.map.group-by\",\n      \"esnext.map.includes\",\n      \"esnext.map.key-by\",\n      \"esnext.map.key-of\",\n      \"esnext.map.map-keys\",\n      \"esnext.map.map-values\",\n      \"esnext.map.merge\",\n      \"esnext.map.of\",\n      \"esnext.map.reduce\",\n      \"esnext.map.some\",\n      \"esnext.map.update\",\n      \"esnext.math.clamp\",\n      \"esnext.math.deg-per-rad\",\n      \"esnext.math.degrees\",\n      \"esnext.math.fscale\",\n      \"esnext.math.iaddh\",\n      \"esnext.math.imulh\",\n      \"esnext.math.isubh\",\n      \"esnext.math.rad-per-deg\",\n      \"esnext.math.radians\",\n      \"esnext.math.scale\",\n      \"esnext.math.seeded-prng\",\n      \"esnext.math.signbit\",\n      \"esnext.math.umulh\",\n      \"esnext.number.from-string\",\n      \"esnext.observable\",\n      \"esnext.promise.try\",\n      \"esnext.reflect.define-metadata\",\n      \"esnext.reflect.delete-metadata\",\n      \"esnext.reflect.get-metadata\",\n      \"esnext.reflect.get-metadata-keys\",\n      \"esnext.reflect.get-own-metadata\",\n      \"esnext.reflect.get-own-metadata-keys\",\n      \"esnext.reflect.has-metadata\",\n      \"esnext.reflect.has-own-metadata\",\n      \"esnext.reflect.metadata\",\n      \"esnext.set.add-all\",\n      \"esnext.set.delete-all\",\n      \"esnext.set.difference\",\n      \"esnext.set.every\",\n      \"esnext.set.filter\",\n      \"esnext.set.find\",\n      \"esnext.set.from\",\n      \"esnext.set.intersection\",\n      \"esnext.set.is-disjoint-from\",\n      \"esnext.set.is-subset-of\",\n      \"esnext.set.is-superset-of\",\n      \"esnext.set.join\",\n      \"esnext.set.map\",\n      \"esnext.set.of\",\n      \"esnext.set.reduce\",\n      \"esnext.set.some\",\n      \"esnext.set.symmetric-difference\",\n      \"esnext.set.union\",\n      \"esnext.string.at\",\n      \"esnext.string.code-points\",\n      \"esnext.symbol.dispose\",\n      \"esnext.symbol.observable\",\n      \"esnext.symbol.pattern-match\",\n      \"esnext.weak-map.delete-all\",\n      \"esnext.weak-map.from\",\n      \"esnext.weak-map.of\",\n      \"esnext.weak-set.add-all\",\n      \"esnext.weak-set.delete-all\",\n      \"esnext.weak-set.from\",\n      \"esnext.weak-set.of\",\n    ]\n  `)\n})","file":"build_api.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"web files are prebuilt (no prerender)","suites":[],"updatePoint":{"line":26,"column":43},"line":26,"code":"test('web files are prebuilt (no prerender)', async () => {\n  const webFiles = findWebFiles()\n  const prebuiltFiles = prebuildWebFiles(webFiles)\n\n  const relativePaths = prebuiltFiles\n    .filter((x) => typeof x !== 'undefined')\n    .map(cleanPaths)\n  // Builds non-nested functions\n  expect(relativePaths).toMatchInlineSnapshot(`\n    [\n      \".redwood/prebuild/web/src/App.js\",\n      \".redwood/prebuild/web/src/Routes.js\",\n      \".redwood/prebuild/web/src/components/AddTodo/AddTodo.js\",\n      \".redwood/prebuild/web/src/components/AddTodoControl/AddTodoControl.js\",\n      \".redwood/prebuild/web/src/components/Check/Check.js\",\n      \".redwood/prebuild/web/src/components/NumTodosCell/NumTodosCell.js\",\n      \".redwood/prebuild/web/src/components/NumTodosTwoCell/NumTodosTwoCell.js\",\n      \".redwood/prebuild/web/src/components/TableCell/TableCell.js\",\n      \".redwood/prebuild/web/src/components/TodoItem/TodoItem.js\",\n      \".redwood/prebuild/web/src/components/TodoListCell/TodoListCell.tsx\",\n      \".redwood/prebuild/web/src/layouts/SetLayout/SetLayout.js\",\n      \".redwood/prebuild/web/src/pages/BarPage/BarPage.tsx\",\n      \".redwood/prebuild/web/src/pages/FatalErrorPage/FatalErrorPage.js\",\n      \".redwood/prebuild/web/src/pages/FooPage/FooPage.tsx\",\n      \".redwood/prebuild/web/src/pages/HomePage/HomePage.tsx\",\n      \".redwood/prebuild/web/src/pages/NotFoundPage/NotFoundPage.js\",\n      \".redwood/prebuild/web/src/pages/PrivatePage/PrivatePage.tsx\",\n      \".redwood/prebuild/web/src/pages/TypeScriptPage/TypeScriptPage.tsx\",\n      \".redwood/prebuild/web/src/pages/admin/EditUserPage/EditUserPage.jsx\",\n    ]\n  `)\n})","file":"build_web.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Check routes are imported with require when staticImports flag is enabled","suites":[],"updatePoint":{"line":59,"column":79},"line":59,"code":"test('Check routes are imported with require when staticImports flag is enabled', () => {\n  const routesFile = getPaths().web.routes\n\n  const prerendered = prebuildWebFile(routesFile, {\n    prerender: true,\n    forJest: true,\n  })?.code\n\n  /* Check that imports have the form\n   `const HomePage = {\n     name: \"HomePage\",\n     loader: () => require(\"` 👈 Uses a require statement\n     */\n  expect(prerendered).toContain(`const HomePage = {`)\n  expect(prerendered).toContain(`const BarPage = {`)\n\n  /*\n    👇 Foo page is an explicitly imported page in the source\n    const FooPage = {\n      name: \"FooPage\",\n      loader: () => require(\n    */\n  expect(prerendered).toContain(`const FooPage = {`)\n  expect(prerendered).not.toContain(\n    `var _FooPage = _interopRequireDefault(require(`\n  )\n})","file":"build_web.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Check routes are imported with \"import\" when staticImports flag is NOT passed","suites":[],"updatePoint":{"line":87,"column":83},"line":87,"code":"test('Check routes are imported with \"import\" when staticImports flag is NOT passed', () => {\n  const routesFile = getPaths().web.routes\n\n  const withoutStaticImports = prebuildWebFile(routesFile, {\n    forJest: true,\n  })?.code\n\n  /* Check that imports have the form\n   `const HomePage = {\n     name: \"HomePage\",\n     loader: () => import(\"` 👈 Uses an (async) import statement\n     */\n\n  expect(withoutStaticImports).toContain(`const HomePage = {`)\n  expect(withoutStaticImports).toContain(`const BarPage = {`)\n\n  /*\n    👇 Foo page is an explicitly imported page, so it should\n    var _FooPage = _interopRequireDefault(require(\\\\\"./pages/FooPage/FooPage\\\\\"))\n    (inverse of the static imports one)\n    .\n    .\n    .\n    page: _FooPage[\\\\\"default\\\\\"],\n  */\n  expect(withoutStaticImports).not.toContain(`const FooPage = {`)\n  expect(withoutStaticImports).toContain(\n    `var _FooPage = _interopRequireDefault(require(`\n  )\n})","file":"build_web.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"throws an error when not in a project","suites":["getConfigPath"],"updatePoint":{"line":6,"column":43},"line":6,"code":"  it('throws an error when not in a project', () => {\n    expect(getConfigPath).toThrowErrorMatchingInlineSnapshot(\n      `\"Could not find a \"redwood.toml\" file, are you sure you're in a Redwood project?\"`\n    )\n  })","file":"configPath.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"finds the correct config path when at base directory","suites":["getConfigPath","using RWJS_CWD environment variable"],"updatePoint":{"line":27,"column":60},"line":27,"code":"    it('finds the correct config path when at base directory', () => {\n      process.env.RWJS_CWD = FIXTURE_BASEDIR\n      expect(getConfigPath()).toBe(path.join(FIXTURE_BASEDIR, 'redwood.toml'))\n    })","file":"configPath.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"finds the correct config path when inside a project directory","suites":["getConfigPath","using RWJS_CWD environment variable"],"updatePoint":{"line":32,"column":69},"line":32,"code":"    it('finds the correct config path when inside a project directory', () => {\n      process.env.RWJS_CWD = path.join(\n        FIXTURE_BASEDIR,\n        'web',\n        'src',\n        'pages',\n        'AboutPage'\n      )\n      expect(getConfigPath()).toBe(path.join(FIXTURE_BASEDIR, 'redwood.toml'))\n    })","file":"configPath.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"finds the correct config path when at base directory","suites":["getConfigPath","using cwd"],"updatePoint":{"line":63,"column":60},"line":63,"code":"    it('finds the correct config path when at base directory', () => {\n      const spy = jest.spyOn(process, 'cwd')\n      spy.mockReturnValue(FIXTURE_BASEDIR)\n      expect(getConfigPath()).toBe(path.join(FIXTURE_BASEDIR, 'redwood.toml'))\n    })","file":"configPath.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"finds the correct config path when inside a project directory","suites":["getConfigPath","using cwd"],"updatePoint":{"line":69,"column":69},"line":69,"code":"    it('finds the correct config path when inside a project directory', () => {\n      const spy = jest.spyOn(process, 'cwd')\n      spy.mockReturnValue(\n        path.join(FIXTURE_BASEDIR, 'web', 'src', 'pages', 'AboutPage')\n      )\n      expect(getConfigPath()).toBe(path.join(FIXTURE_BASEDIR, 'redwood.toml'))\n    })","file":"configPath.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"finds all the cells","suites":[],"updatePoint":{"line":31,"column":25},"line":31,"code":"test('finds all the cells', () => {\n  const paths = findCells()\n  const p = paths.map(cleanPaths)\n\n  expect(p).toMatchInlineSnapshot(`\n    [\n      \"web/src/components/NumTodosCell/NumTodosCell.js\",\n      \"web/src/components/NumTodosTwoCell/NumTodosTwoCell.js\",\n      \"web/src/components/TodoListCell/TodoListCell.tsx\",\n    ]\n  `)\n})","file":"files.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"finds directory named modules","suites":[],"updatePoint":{"line":44,"column":35},"line":44,"code":"test('finds directory named modules', () => {\n  const paths = findDirectoryNamedModules()\n  const p = paths.map(cleanPaths)\n\n  expect(p).toMatchInlineSnapshot(`\n    [\n      \"api/src/directives/requireAuth/requireAuth.js\",\n      \"api/src/directives/skipAuth/skipAuth.js\",\n      \"api/src/functions/healthz/healthz.js\",\n      \"api/src/functions/nested/nested.ts\",\n      \"api/src/services/todos/todos.js\",\n      \"web/src/components/AddTodo/AddTodo.js\",\n      \"web/src/components/AddTodoControl/AddTodoControl.js\",\n      \"web/src/components/Check/Check.js\",\n      \"web/src/components/TableCell/TableCell.js\",\n      \"web/src/components/TodoItem/TodoItem.js\",\n      \"web/src/layouts/SetLayout/SetLayout.js\",\n      \"web/src/pages/BarPage/BarPage.tsx\",\n      \"web/src/pages/FatalErrorPage/FatalErrorPage.js\",\n      \"web/src/pages/FooPage/FooPage.tsx\",\n      \"web/src/pages/HomePage/HomePage.tsx\",\n      \"web/src/pages/NotFoundPage/NotFoundPage.js\",\n      \"web/src/pages/PrivatePage/PrivatePage.tsx\",\n      \"web/src/pages/TypeScriptPage/TypeScriptPage.tsx\",\n      \"web/src/pages/admin/EditUserPage/EditUserPage.jsx\",\n    ]\n  `)\n})","file":"files.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"finds all the page files","suites":[],"updatePoint":{"line":73,"column":30},"line":73,"code":"test('finds all the page files', () => {\n  const paths = findPages()\n  const p = paths.map(cleanPaths)\n\n  expect(p).toMatchInlineSnapshot(`\n    [\n      \"web/src/pages/BarPage/BarPage.tsx\",\n      \"web/src/pages/FatalErrorPage/FatalErrorPage.js\",\n      \"web/src/pages/FooPage/FooPage.tsx\",\n      \"web/src/pages/HomePage/HomePage.tsx\",\n      \"web/src/pages/NotFoundPage/NotFoundPage.js\",\n      \"web/src/pages/PrivatePage/PrivatePage.tsx\",\n      \"web/src/pages/TypeScriptPage/TypeScriptPage.tsx\",\n      \"web/src/pages/admin/EditUserPage/EditUserPage.jsx\",\n    ]\n  `)\n})","file":"files.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"find the graphql schema files","suites":[],"updatePoint":{"line":91,"column":35},"line":91,"code":"test('find the graphql schema files', () => {\n  const paths = findGraphQLSchemas()\n  const p = paths.map(cleanPaths)\n\n  expect(p[0]).toMatchInlineSnapshot(`\"api/src/graphql/currentUser.sdl.ts\"`)\n  expect(p[1]).toMatchInlineSnapshot(`\"api/src/graphql/todos.sdl.js\"`)\n})","file":"files.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"find api functions","suites":[],"updatePoint":{"line":99,"column":24},"line":99,"code":"test('find api functions', () => {\n  const paths = findApiServerFunctions()\n  const p = paths.map(cleanPaths)\n\n  expect(p).toMatchInlineSnapshot(`\n    [\n      \"api/src/functions/graphql.js\",\n      \"api/src/functions/healthz/healthz.js\",\n      \"api/src/functions/nested/nested.ts\",\n      \"api/src/functions/x/index.js\",\n    ]\n  `)\n})","file":"files.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"isFileInsideFolder works correctly (esp on windows)","suites":[],"updatePoint":{"line":113,"column":57},"line":113,"code":"test('isFileInsideFolder works correctly (esp on windows)', () => {\n  expect(\n    isFileInsideFolder(\n      path.join(FIXTURE_PATH, 'web/src/components/TableCell/TableCell.js'),\n      getPaths().web.base\n    )\n  ).toBe(true)\n\n  expect(\n    isFileInsideFolder(\n      path.join(FIXTURE_PATH, 'web/src/pages/NotFoundPage/NotFoundPage.js'),\n      getPaths().web.pages\n    )\n  ).toBe(true)\n\n  expect(\n    isFileInsideFolder(\n      path.join(FIXTURE_PATH, 'web/src/pages/NotFoundPage/NotFoundPage.js'),\n      getPaths().api.base\n    )\n  ).toBe(false)\n\n  expect(\n    isFileInsideFolder(\n      path.join(FIXTURE_PATH, 'api/src/functions/healthz/healthz.js'),\n      getPaths().api.functions\n    )\n  ).toBe(true)\n})","file":"files.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"isCellFile detects cells correctly","suites":[],"updatePoint":{"line":143,"column":40},"line":143,"code":"test('isCellFile detects cells correctly', () => {\n  const invalidCell = isCellFile(\n    path.join(FIXTURE_PATH, 'web/src/components/TableCell/TableCell.js')\n  )\n\n  const validCell = isCellFile(\n    path.join(FIXTURE_PATH, 'web/src/components/TodoListCell/TodoListCell.tsx')\n  )\n\n  const notACell = isCellFile(\n    path.join(FIXTURE_PATH, 'api/src/services/todos/DoesNotExist.js')\n  )\n\n  expect(invalidCell).toBe(false)\n  expect(validCell).toBe(true)\n  expect(notACell).toBe(false)\n})","file":"files.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"should always pass","suites":[],"updatePoint":{"line":9,"column":24},"line":9,"code":"test('should always pass', () => {\n  expect(dog.mockedModule).toBe(true)\n})","file":"fixtures/graphqlCodeGen/realtime/api/src/services/todos/todos.test.js","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"renders successfully","suites":["HomePage"],"updatePoint":{"line":9,"column":26},"line":9,"code":"  it('renders successfully', () => {\n    expect(() => {\n      render(<HomePage />)\n    }).not.toThrow()\n  })","file":"fixtures/nestedPages/web/src/pages/HomePage/HomePage.test.js","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"parses a document AST","suites":[],"updatePoint":{"line":7,"column":27},"line":7,"code":"test('parses a document AST', () => {\n  const QUERY = gql`\n    query POSTS {\n      posts {\n        id\n        title\n        body\n        createdAt\n      }\n      numberOfPosts\n    }\n  `\n\n  expect(parseDocumentAST(QUERY)).toMatchInlineSnapshot(`\n    [\n      {\n        \"fields\": [\n          {\n            \"posts\": [\n              \"id\",\n              \"title\",\n              \"body\",\n              \"createdAt\",\n            ],\n          },\n          \"numberOfPosts\",\n        ],\n        \"name\": \"POSTS\",\n        \"operation\": \"query\",\n      },\n    ]\n  `)\n})","file":"gql.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"handles inline fragments","suites":[],"updatePoint":{"line":41,"column":30},"line":41,"code":"test('handles inline fragments', () => {\n  const QUERY = gql`\n    query MyCellQuery {\n      something {\n        ... on SomeType {\n          __typename\n        }\n        ... on SomeOtherType {\n          __typename\n        }\n      }\n    }\n  `\n\n  expect(parseDocumentAST(QUERY)).toMatchInlineSnapshot(`\n    [\n      {\n        \"fields\": [\n          {\n            \"something\": [\n              \"__typename\",\n              \"__typename\",\n            ],\n          },\n        ],\n        \"name\": \"MyCellQuery\",\n        \"operation\": \"query\",\n      },\n    ]\n  `)\n})","file":"gql.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"handles fragments","suites":[],"updatePoint":{"line":73,"column":23},"line":73,"code":"test('handles fragments', () => {\n  const QUERY = gql`\n    fragment ABC on B {\n      a\n    }\n    query MyCellQuery {\n      something {\n        ...ABC\n      }\n    }\n  `\n\n  expect(parseDocumentAST(QUERY)).toMatchInlineSnapshot(`\n    [\n      {\n        \"fields\": [\n          {\n            \"something\": [],\n          },\n        ],\n        \"name\": \"MyCellQuery\",\n        \"operation\": \"query\",\n      },\n    ]\n  `)\n})","file":"gql.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"listQueryTypeFieldsInProject","suites":[],"updatePoint":{"line":100,"column":34},"line":100,"code":"test('listQueryTypeFieldsInProject', async () => {\n  const FIXTURE_PATH = path.resolve(\n    __dirname,\n    '../../../../__fixtures__/example-todo-main'\n  )\n  // Set fixture path so it reads the sdls from example-todo-main\n  process.env.RWJS_CWD = FIXTURE_PATH\n\n  // Reimport, because rwjs/internal already calculates the paths\n  const result = await listQueryTypeFieldsInProject()\n\n  expect(result).toContain('redwood')\n  expect(result).toContain('currentUser')\n  expect(result).toContain('todos')\n  expect(result).toContain('todosCount')\n\n  // Restore RWJS config\n  delete process.env.RWJS_CWD\n})","file":"gql.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Generate gql typedefs web","suites":[],"updatePoint":{"line":38,"column":31},"line":38,"code":"test('Generate gql typedefs web', async () => {\n  await generateGraphQLSchema()\n\n  jest\n    .spyOn(fs, 'writeFileSync')\n    .mockImplementation(\n      (file: fs.PathOrFileDescriptor, data: string | ArrayBufferView) => {\n        expect(file).toMatch(path.join('web', 'types', 'graphql.d.ts'))\n        expect(data).toMatchSnapshot()\n      }\n    )\n\n  const { typeDefFiles } = await generateTypeDefGraphQLWeb()\n\n  expect(typeDefFiles).toHaveLength(1)\n  expect(typeDefFiles[0]).toMatch(path.join('web', 'types', 'graphql.d.ts'))\n})","file":"graphqlCodeGen.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Generate gql typedefs api","suites":[],"updatePoint":{"line":56,"column":31},"line":56,"code":"test('Generate gql typedefs api', async () => {\n  await generateGraphQLSchema()\n\n  let codegenOutput: {\n    file: fs.PathOrFileDescriptor\n    data: string | ArrayBufferView\n  } = { file: '', data: '' }\n\n  jest\n    .spyOn(fs, 'writeFileSync')\n    .mockImplementation(\n      (file: fs.PathOrFileDescriptor, data: string | ArrayBufferView) => {\n        codegenOutput = { file, data }\n      }\n    )\n\n  const { typeDefFiles } = await generateTypeDefGraphQLApi()\n\n  expect(typeDefFiles).toHaveLength(1)\n  expect(typeDefFiles[0]).toMatch(path.join('api', 'types', 'graphql.d.ts'))\n\n  const { file, data } = codegenOutput\n\n  expect(file).toMatch(path.join('api', 'types', 'graphql.d.ts'))\n  // Catchall to prevent unexpected changes to the generated file\n  expect(data).toMatchSnapshot()\n\n  // Check that JSON types are imported from prisma\n  expect(data).toContain('JSON: Prisma.JsonValue;')\n  expect(data).toContain('JSONObject: Prisma.JsonObject;')\n\n  // Check that prisma model imports are added to the top of the file\n  expect(data).toContain(\n    \"import { PrismaModelOne as PrismaPrismaModelOne, PrismaModelTwo as PrismaPrismaModelTwo, Post as PrismaPost, Todo as PrismaTodo } from '@prisma/client'\"\n  )\n\n  // Check printMappedModelsPlugin works correctly\n  expect(data).toContain(\n    `type MaybeOrArrayOfMaybe<T> = T | Maybe<T> | Maybe<T>[]`\n  )\n\n  // Should only contain the SDL models that are also in Prisma\n  expect(data).toContain(`type AllMappedModels = MaybeOrArrayOfMaybe<Todo>`)\n})","file":"graphqlCodeGen.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"respects user provided codegen config","suites":[],"updatePoint":{"line":101,"column":43},"line":101,"code":"test('respects user provided codegen config', async () => {\n  const customCodegenConfigPath = path.join(FIXTURE_PATH, 'codegen.yml')\n\n  // Add codegen.yml to fixture folder\n  fs.writeFileSync(\n    customCodegenConfigPath,\n    `config:\n  omitOperationSuffix: false\n  namingConvention:\n    typeNames: change-case-all#upperCase`\n  )\n\n  // Wrapping in `try` to make sure codegen.yml is always deleted, even if the\n  // test fails\n  try {\n    await generateGraphQLSchema()\n    const {\n      typeDefFiles: [outputPath],\n    } = await generateTypeDefGraphQLWeb()\n\n    const gqlTypesOutput = fs.readFileSync(outputPath, 'utf-8')\n\n    // Should be upper cased type\n    expect(gqlTypesOutput).toContain('ADDTODO_CREATETODOMUTATION')\n\n    // because we override omitOperationSuffix to false, it should append QUERY\n    // for __fixtures__/example-todo-main/../NumTodosCell.js\n    expect(gqlTypesOutput).toContain('NUMTODOSCELL_GETCOUNTQUERY')\n  } finally {\n    // Delete added codegen.yml\n    fs.rmSync(customCodegenConfigPath)\n  }\n})","file":"graphqlCodeGen.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Doesn't throw or print any errors with empty project","suites":[],"updatePoint":{"line":135,"column":58},"line":135,"code":"test(\"Doesn't throw or print any errors with empty project\", async () => {\n  const fixturePath = path.resolve(\n    __dirname,\n    '../../../../__fixtures__/empty-project'\n  )\n  process.env.RWJS_CWD = fixturePath\n  const oldConsoleError = console.error\n  console.error = jest.fn()\n\n  try {\n    await generateGraphQLSchema()\n    await generateTypeDefGraphQLWeb()\n    await generateTypeDefGraphQLApi()\n  } catch (e) {\n    console.error(e)\n    // Fail if any of the three above calls throws an error\n    expect(false).toBeTruthy()\n  }\n\n  try {\n    expect(console.error).not.toHaveBeenCalled()\n  } finally {\n    console.error = oldConsoleError\n    delete process.env.RWJS_CWD\n  }\n})","file":"graphqlCodeGen.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"invalidQueryType","suites":["Doesn't swallow legit errors"],"updatePoint":{"line":163,"column":24},"line":163,"code":"  test('invalidQueryType', async () => {\n    const fixturePath = path.resolve(\n      __dirname,\n      './fixtures/graphqlCodeGen/invalidQueryType'\n    )\n    process.env.RWJS_CWD = fixturePath\n\n    const { errors } = await generateTypeDefGraphQLWeb()\n    expect((errors[0].error as Error).toString()).toMatch(\n      /field.*softKitten.*Query/\n    )\n\n    delete process.env.RWJS_CWD\n  })","file":"graphqlCodeGen.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"missingType","suites":["Doesn't swallow legit errors"],"updatePoint":{"line":178,"column":19},"line":178,"code":"  test('missingType', async () => {\n    const fixturePath = path.resolve(\n      __dirname,\n      './fixtures/graphqlCodeGen/missingType'\n    )\n    process.env.RWJS_CWD = fixturePath\n\n    const { errors } = await generateTypeDefGraphQLWeb()\n    expect((errors[0].error as Error).toString()).toMatch(/Unknown type.*Todo/)\n\n    delete process.env.RWJS_CWD\n  })","file":"graphqlCodeGen.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"nonExistingField","suites":["Doesn't swallow legit errors"],"updatePoint":{"line":191,"column":24},"line":191,"code":"  test('nonExistingField', async () => {\n    const fixturePath = path.resolve(\n      __dirname,\n      './fixtures/graphqlCodeGen/nonExistingField'\n    )\n    process.env.RWJS_CWD = fixturePath\n\n    const { errors } = await generateTypeDefGraphQLWeb()\n    expect((errors[0].error as Error).toString()).toMatch(/field.*done.*Todo/)\n\n    delete process.env.RWJS_CWD\n  })","file":"graphqlCodeGen.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Generates GraphQL schema","suites":[],"updatePoint":{"line":26,"column":30},"line":26,"code":"test('Generates GraphQL schema', async () => {\n  const expectedPath = path.join(FIXTURE_PATH, '.redwood', 'schema.graphql')\n\n  jest\n    .spyOn(fs, 'writeFileSync')\n    .mockImplementation(\n      (file: fs.PathOrFileDescriptor, data: string | ArrayBufferView) => {\n        expect(file).toMatch(expectedPath)\n        expect(data).toMatchSnapshot()\n      }\n    )\n\n  const { schemaPath } = await generateGraphQLSchema()\n\n  expect(schemaPath).toMatch(expectedPath)\n})","file":"graphqlSchema.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Includes live query directive if serverful and realtime ","suites":[],"updatePoint":{"line":43,"column":62},"line":43,"code":"test('Includes live query directive if serverful and realtime ', async () => {\n  const fixturePath = path.resolve(\n    __dirname,\n    './fixtures/graphqlCodeGen/realtime'\n  )\n  process.env.RWJS_CWD = fixturePath\n\n  const expectedPath = path.join(fixturePath, '.redwood', 'schema.graphql')\n\n  jest\n    .spyOn(fs, 'writeFileSync')\n    .mockImplementation(\n      (file: fs.PathOrFileDescriptor, data: string | ArrayBufferView) => {\n        expect(file).toMatch(expectedPath)\n        expect(data).toMatchSnapshot()\n      }\n    )\n\n  await generateGraphQLSchema()\n})","file":"graphqlSchema.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Returns error message when schema loading fails","suites":[],"updatePoint":{"line":64,"column":53},"line":64,"code":"test('Returns error message when schema loading fails', async () => {\n  const fixturePath = path.resolve(\n    __dirname,\n    './fixtures/graphqlCodeGen/bookshelf'\n  )\n  process.env.RWJS_CWD = fixturePath\n\n  try {\n    const { errors } = await generateGraphQLSchema()\n\n    const [schemaLoadingError] = errors\n\n    console.log({\n      errors,\n    })\n\n    expect(schemaLoadingError.message).toEqual(\n      [\n        'Schema loading failed. Unknown type: \"Shelf\".',\n        '',\n        `  ${chalk.bgYellow(` ${chalk.black.bold('Heads up')} `)}`,\n        '',\n        chalk.yellow(\n          `  It looks like you have a Shelf model in your Prisma schema.`\n        ),\n        chalk.yellow(\n          `  If it's part of a relation, you may have to generate SDL or scaffolding for Shelf too.`\n        ),\n        chalk.yellow(\n          `  So, if you haven't done that yet, ignore this error message and run the SDL or scaffold generator for Shelf now.`\n        ),\n        '',\n        chalk.yellow(\n          `  See the ${terminalLink(\n            'Troubleshooting Generators',\n            'https://redwoodjs.com/docs/schema-relations#troubleshooting-generators'\n          )} section in our docs for more help.`\n        ),\n      ].join('\\n')\n    )\n  } finally {\n    delete process.env.RWJS_CWD\n  }\n})","file":"graphqlSchema.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"simple jsx tree","suites":[],"updatePoint":{"line":10,"column":21},"line":10,"code":"test('simple jsx tree', () => {\n  const simpleAst = fileToAst(getFixturePath('web/src/router/simple.tsx'))\n  const elements = getJsxElements(simpleAst, 'Router')\n  expect(elements).toMatchInlineSnapshot(`\n    [\n      {\n        \"children\": [\n          {\n            \"children\": [\n              {\n                \"children\": [],\n                \"name\": \"Route\",\n                \"props\": {\n                  \"name\": \"home\",\n                  \"page\": \"HomePage\",\n                  \"path\": \"/home\",\n                },\n              },\n              {\n                \"children\": [],\n                \"name\": \"Route\",\n                \"props\": {\n                  \"name\": \"login\",\n                  \"page\": \"LoginPage\",\n                  \"path\": \"/login\",\n                },\n              },\n              {\n                \"children\": [],\n                \"name\": \"Route\",\n                \"props\": {\n                  \"name\": \"404\",\n                  \"page\": \"ArrowFunctionExpression is not supported\",\n                  \"path\": \"/404\",\n                },\n              },\n            ],\n            \"name\": \"Set\",\n            \"props\": {\n              \"private\": true,\n            },\n          },\n        ],\n        \"name\": \"Router\",\n        \"props\": {},\n      },\n    ]\n  `)\n})","file":"jsx.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Imports layouts correctly","suites":["User specified imports, with static imports"],"updatePoint":{"line":36,"column":31},"line":36,"code":"  it('Imports layouts correctly', () => {\n    // Note avoid checking the full require path because windows paths have unusual slashes\n    expect(outputWithStaticImports).toContain(\n      `var _AdminLayout = _interopRequireDefault(require(\"`\n    )\n    expect(outputWithStaticImports).toContain(\n      `var _MainLayout = _interopRequireDefault(require(\"`\n    )\n\n    expect(outputNoStaticImports).toContain(\n      `var _AdminLayout = _interopRequireDefault(require(\"`\n    )\n    expect(outputNoStaticImports).toContain(\n      `var _MainLayout = _interopRequireDefault(require(\"`\n    )\n  })","file":"nestedPages.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Adds loaders for non-nested pages","suites":["User specified imports, with static imports","pages without explicit import","static prerender imports"],"updatePoint":{"line":55,"column":43},"line":55,"code":"      it('Adds loaders for non-nested pages', () => {\n        expect(outputWithStaticImports).toContain(\n          `const LoginPage = {\n  name: \"LoginPage\",\n  prerenderLoader: name => require(\"./pages/LoginPage/LoginPage\"),\n  LazyComponent: (0, _react.lazy)(() => import( /* webpackChunkName: \"LoginPage\" */\"./pages/LoginPage/LoginPage\"))\n}`\n        )\n\n        expect(outputWithStaticImports).toContain(\n          `const HomePage = {\n  name: \"HomePage\",\n  prerenderLoader: name => require(\"./pages/HomePage/HomePage\"),\n  LazyComponent: (0, _react.lazy)(() => import( /* webpackChunkName: \"HomePage\" */\"./pages/HomePage/HomePage\"))\n};`\n        )\n      })","file":"nestedPages.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Adds loaders for non-nested pages with __webpack_require__ and require.resolveWeak in prerenderLoader to not bundle the pages","suites":["User specified imports, with static imports","pages without explicit import","dynamic build imports"],"updatePoint":{"line":75,"column":135},"line":75,"code":"      it('Adds loaders for non-nested pages with __webpack_require__ and require.resolveWeak in prerenderLoader to not bundle the pages', () => {\n        expect(outputNoStaticImports).toContain(\n          `const LoginPage = {\n  name: \"LoginPage\",\n  prerenderLoader: name => __webpack_require__(require.resolveWeak(\"./pages/LoginPage/LoginPage\")),\n  LazyComponent: (0, _react.lazy)(() => import( /* webpackChunkName: \"LoginPage\" */\"./pages/LoginPage/LoginPage\"))\n}`\n        )\n\n        expect(outputNoStaticImports).toContain(\n          `const HomePage = {\n  name: \"HomePage\",\n  prerenderLoader: name => __webpack_require__(require.resolveWeak(\"./pages/HomePage/HomePage\")),\n  LazyComponent: (0, _react.lazy)(() => import( /* webpackChunkName: \"HomePage\" */\"./pages/HomePage/HomePage\"))\n}`\n        )\n      })","file":"nestedPages.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Uses the user specified name for nested page","suites":["User specified imports, with static imports","pages with explicit import","static prerender imports"],"updatePoint":{"line":97,"column":54},"line":97,"code":"      it('Uses the user specified name for nested page', () => {\n        // Import statement: import NewJobPage from 'src/pages/Jobs/NewJobPage'\n        expect(outputWithStaticImports).toContain(\n          `const NewJobPage = {\n  name: \"NewJobPage\",\n  prerenderLoader: name => require(\"./pages/Jobs/NewJobPage/NewJobPage\"),\n  LazyComponent: (0, _react.lazy)(() => import( /* webpackChunkName: \"NewJobPage\" */\"./pages/Jobs/NewJobPage/NewJobPage\"))\n}`\n        )\n      })","file":"nestedPages.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Uses the user specified custom default export import name for nested page","suites":["User specified imports, with static imports","pages with explicit import","static prerender imports"],"updatePoint":{"line":108,"column":83},"line":108,"code":"      it('Uses the user specified custom default export import name for nested page', () => {\n        // Import statement: import BazingaJobProfilePageWithFunnyName from 'src/pages/Jobs/JobProfilePage'\n        expect(outputWithStaticImports).toContain(\n          `const BazingaJobProfilePageWithFunnyName = {\n  name: \"BazingaJobProfilePageWithFunnyName\",\n  prerenderLoader: name => require(\"./pages/Jobs/JobProfilePage/JobProfilePage\"),\n  LazyComponent: (0, _react.lazy)(() => import( /* webpackChunkName: \"BazingaJobProfilePageWithFunnyName\" */\"./pages/Jobs/JobProfilePage/JobProfilePage\"))\n}`\n        )\n      })","file":"nestedPages.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Removes explicit imports when prerendering","suites":["User specified imports, with static imports","pages with explicit import","static prerender imports"],"updatePoint":{"line":119,"column":52},"line":119,"code":"      it('Removes explicit imports when prerendering', () => {\n        expect(outputWithStaticImports).not.toContain(\n          `var _NewJobPage = _interopRequireDefault`\n        )\n\n        expect(outputWithStaticImports).not.toContain(\n          `var _JobProfilePage = _interopRequireDefault`\n        )\n      })","file":"nestedPages.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Keeps using the user specified name when generating React component","suites":["User specified imports, with static imports","pages with explicit import","static prerender imports"],"updatePoint":{"line":129,"column":77},"line":129,"code":"      it('Keeps using the user specified name when generating React component', () => {\n        // Generate react component still uses the user specified name\n        expect(outputWithStaticImports)\n          .toContain(`.createElement(_router.Route, {\n    path: \"/job-profiles/{id:Int}\",\n    page: BazingaJobProfilePageWithFunnyName,\n    name: \"jobProfile\"\n  })`)\n      })","file":"nestedPages.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Directly uses the import when page is explicitly imported","suites":["User specified imports, with static imports","pages with explicit import","dynamic build imports"],"updatePoint":{"line":141,"column":67},"line":141,"code":"      it('Directly uses the import when page is explicitly imported', () => {\n        // Explicit import uses the specified import\n        // Has statement: import BazingaJobProfilePageWithFunnyName from 'src/pages/Jobs/JobProfilePage'\n        // The name of the import is not important without static imports\n        expect(outputNoStaticImports).toContain(`.createElement(_router.Route, {\n    path: \"/job-profiles/{id:Int}\",\n    page: _JobProfilePage[\"default\"],\n    name: \"jobProfile\"\n  })`)\n      })","file":"nestedPages.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Uses the LazyComponent for a page that isn't imported","suites":["User specified imports, with static imports","pages with explicit import","dynamic build imports"],"updatePoint":{"line":152,"column":63},"line":152,"code":"      it(\"Uses the LazyComponent for a page that isn't imported\", () => {\n        expect(outputNoStaticImports).toContain(`const HomePage = {\n  name: \"HomePage\",\n  prerenderLoader: name => __webpack_require__(require.resolveWeak(\"./pages/HomePage/HomePage\")),\n  LazyComponent: (0, _react.lazy)(() => import( /* webpackChunkName: \"HomePage\" */\"./pages/HomePage/HomePage\"))\n}`)\n        expect(outputNoStaticImports).toContain(`.createElement(_router.Route, {\n    path: \"/\",\n    page: HomePage,\n    name: \"home\"\n  })`)\n      })","file":"nestedPages.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Should NOT add a LazyComponent for pages that have been explicitly loaded","suites":["User specified imports, with static imports","pages with explicit import","dynamic build imports"],"updatePoint":{"line":165,"column":83},"line":165,"code":"      it('Should NOT add a LazyComponent for pages that have been explicitly loaded', () => {\n        expect(outputNoStaticImports).not.toContain(`const JobsJobPage = {\n  name: \"JobsJobPage\"`)\n\n        expect(outputNoStaticImports).not.toContain(`const JobsNewJobPage = {\n  name: \"JobsNewJobPage\"`)\n\n        expect(outputNoStaticImports).toContain(`.createElement(_router.Route, {\n    path: \"/jobs\",\n    page: _JobsPage[\"default\"],\n    name: \"jobs\"\n  })`)\n      })","file":"nestedPages.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Handles when imports from a page include non-default imports too","suites":["User specified imports, with static imports","pages with explicit import","dynamic build imports"],"updatePoint":{"line":181,"column":70},"line":181,"code":"  it('Handles when imports from a page include non-default imports too', () => {\n    // Because we import import EditJobPage, 👉 { NonDefaultExport } from 'src/pages/Jobs/EditJobPage'\n\n    expect(outputWithStaticImports).toContain('var _EditJobPage = require(\"')\n\n    expect(outputWithStaticImports).toContain(`const EditJobPage = {\n  name: \"EditJobPage\",\n  prerenderLoader: name => require(\"./pages/Jobs/EditJobPage/EditJobPage\"),\n  LazyComponent: (0, _react.lazy)(() => import( /* webpackChunkName: \"EditJobPage\" */\"./pages/Jobs/EditJobPage/EditJobPage\"))\n}`)\n\n    expect(outputNoStaticImports).toContain(\n      'var _EditJobPage = _interopRequireWildcard('\n    )\n\n    expect(outputNoStaticImports).toContain(`.createElement(_router.Route, {\n    path: \"/jobs/{id:Int}/edit\",\n    page: _EditJobPage[\"default\"],\n    name: \"editJob\"`)\n\n    // Should not generate a loader, because page was explicitly imported\n    expect(outputNoStaticImports).not.toMatch(\n      /import\\(.*\"\\.\\/pages\\/Jobs\\/EditJobPage\\/EditJobPage\"\\)/\n    )\n  })","file":"nestedPages.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Gets config for a TS Project","suites":["Retrieves TSConfig settings"],"updatePoint":{"line":10,"column":34},"line":10,"code":"  it('Gets config for a TS Project', () => {\n    const TS_FIXTURE_PATH = getFixtureDir('test-project')\n\n    process.env.RWJS_CWD = TS_FIXTURE_PATH\n\n    const tsConfiguration = getTsConfigs()\n\n    expect(tsConfiguration.web).not.toBe(null)\n    expect(tsConfiguration.api).not.toBe(null)\n\n    // Check some of the values\n    expect(tsConfiguration.web.compilerOptions.noEmit).toBe(true)\n    expect(tsConfiguration.api.compilerOptions.rootDirs).toEqual([\n      './src',\n      '../.redwood/types/mirror/api/src',\n    ])\n  })","file":"project.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Returns null for JS projects","suites":["Retrieves TSConfig settings"],"updatePoint":{"line":28,"column":34},"line":28,"code":"  it('Returns null for JS projects', () => {\n    const JS_FIXTURE_PATH = getFixtureDir('example-todo-main-with-errors')\n\n    process.env.RWJS_CWD = JS_FIXTURE_PATH\n\n    const tsConfiguration = getTsConfigs()\n\n    expect(tsConfiguration.web).toBe(null)\n    expect(tsConfiguration.api).toBe(null)\n  })","file":"project.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Uses optional function args on JS projects","suites":["ResovlerFn types"],"updatePoint":{"line":36,"column":48},"line":36,"code":"  it('Uses optional function args on JS projects', () => {\n    // Note args and obj are optional\n    expect(getResolverFnType()).toMatchInlineSnapshot(`\n      \"(\n            args?: TArgs,\n            obj?: { root: TParent; context: TContext; info: GraphQLResolveInfo }\n          ) => TResult | Promise<TResult>\"\n    `)\n  })","file":"resolverFn.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Uses optional function args when strict mode is off","suites":["ResovlerFn types"],"updatePoint":{"line":46,"column":57},"line":46,"code":"  it('Uses optional function args when strict mode is off', () => {\n    mockedTSConfigs = {\n      api: {\n        compilerOptions: {\n          strict: false,\n        },\n      },\n      web: null,\n    }\n\n    // Note args and obj are optional\n    expect(getResolverFnType()).toMatchInlineSnapshot(`\n      \"(\n            args?: TArgs,\n            obj?: { root: TParent; context: TContext; info: GraphQLResolveInfo }\n          ) => TResult | Promise<TResult>\"\n    `)\n  })","file":"resolverFn.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"ResolverFn uses non-optional function args in strict mode","suites":["ResovlerFn types"],"updatePoint":{"line":65,"column":63},"line":65,"code":"  it('ResolverFn uses non-optional function args in strict mode', async () => {\n    // Prertend project is strict mode\n    mockedTSConfigs = {\n      api: {\n        compilerOptions: {\n          strict: true,\n        },\n      },\n      web: null,\n    }\n\n    // Note args and obj are NOT optional\n    expect(getResolverFnType()).toMatchInlineSnapshot(`\n      \"(\n            args: TArgs,\n            obj?: { root: TParent; context: TContext; info: GraphQLResolveInfo }\n          ) => TResult | Promise<TResult>\"\n    `)\n  })","file":"resolverFn.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Detects no duplicate routes","suites":["notfound and redirect routes"],"updatePoint":{"line":43,"column":33},"line":43,"code":"  it('Detects no duplicate routes', () => {\n    expect(getDuplicateRoutes()).toStrictEqual([])\n  })","file":"routes-mocked.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Produces the correct warning message","suites":["notfound and redirect routes"],"updatePoint":{"line":47,"column":42},"line":47,"code":"  it('Produces the correct warning message', () => {\n    expect(warningForDuplicateRoutes()).toBe('')\n  })","file":"routes-mocked.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Detects no duplicate routes","suites":["Routes within the empty project"],"updatePoint":{"line":33,"column":33},"line":33,"code":"  it('Detects no duplicate routes', () => {\n    expect(getDuplicateRoutes()).toStrictEqual([])\n  })","file":"routes.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Produces the correct warning message","suites":["Routes within the empty project"],"updatePoint":{"line":37,"column":42},"line":37,"code":"  it('Produces the correct warning message', () => {\n    expect(warningForDuplicateRoutes()).toBe('')\n  })","file":"routes.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Detects no duplicate routes","suites":["Routes within the example todo project"],"updatePoint":{"line":50,"column":33},"line":50,"code":"  it('Detects no duplicate routes', () => {\n    expect(getDuplicateRoutes()).toStrictEqual([])\n  })","file":"routes.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Produces the correct warning message","suites":["Routes within the example todo project"],"updatePoint":{"line":54,"column":42},"line":54,"code":"  it('Produces the correct warning message', () => {\n    expect(warningForDuplicateRoutes()).toBe('')\n  })","file":"routes.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Detects duplicate root routes","suites":["Routes within the example todo with errors project"],"updatePoint":{"line":67,"column":35},"line":67,"code":"  it('Detects duplicate root routes', () => {\n    expect(getDuplicateRoutes()).toStrictEqual([\n      { name: 'home', page: 'HomePage', path: '/' },\n      { name: 'home', page: 'HomePage', path: '/' },\n    ])\n  })","file":"routes.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Produces the correct warning message","suites":["Routes within the example todo with errors project"],"updatePoint":{"line":74,"column":42},"line":74,"code":"  it('Produces the correct warning message', () => {\n    expect(warningForDuplicateRoutes()).toMatch(\n      /Warning: 2 duplicate routes have been detected, only the route\\(s\\) closest to the top of the file will be used.+\\n.+Name: \\\"home\\\", Path: \\\"\\/\\\", Page: \\\"HomePage\\\"\\n.+Name: \\\"home\\\", Path: \\\"\\/\\\", Page: \\\"HomePage\\\"/\n    )\n  })","file":"routes.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Detects no duplicate routes","suites":["Routes within the test project"],"updatePoint":{"line":89,"column":33},"line":89,"code":"  it('Detects no duplicate routes', () => {\n    expect(getDuplicateRoutes()).toStrictEqual([])\n  })","file":"routes.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Produces the correct warning message","suites":["Routes within the test project"],"updatePoint":{"line":93,"column":42},"line":93,"code":"  it('Produces the correct warning message', () => {\n    expect(warningForDuplicateRoutes()).toBe('')\n  })","file":"routes.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"generate the correct mirror types for cells","suites":[],"updatePoint":{"line":36,"column":49},"line":36,"code":"test('generate the correct mirror types for cells', () => {\n  const paths = generateMirrorCells()\n  const p = paths.map(cleanPaths)\n\n  expect(p).toMatchInlineSnapshot(`\n    [\n      \".redwood/types/mirror/web/src/components/NumTodosCell/index.d.ts\",\n      \".redwood/types/mirror/web/src/components/NumTodosTwoCell/index.d.ts\",\n      \".redwood/types/mirror/web/src/components/TodoListCell/index.d.ts\",\n    ]\n  `)\n\n  expect(fs.readFileSync(paths[0], 'utf-8')).toMatchInlineSnapshot(`\n    \"// This file was generated by RedwoodJS\n    import * as Cell from './NumTodosCell'\n    import type { CellProps } from '@redwoodjs/web'\n    import type { NumTodosCell_GetCount, NumTodosCell_GetCountVariables } from 'types/graphql'\n\n    type SuccessType = typeof Cell.Success\n\n    export * from './NumTodosCell'\n\n    type CellInputs = CellProps<SuccessType, NumTodosCell_GetCount, typeof Cell, NumTodosCell_GetCountVariables>\n\n    export default function (props: CellInputs): ReturnType<SuccessType>\n    \"\n  `)\n})","file":"typeDefinitions.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"generate the correct mirror types for directory named modules","suites":[],"updatePoint":{"line":65,"column":67},"line":65,"code":"test('generate the correct mirror types for directory named modules', () => {\n  const paths = generateMirrorDirectoryNamedModules()\n  const p = paths.map(cleanPaths)\n\n  expect(p).toMatchInlineSnapshot(`\n    [\n      \".redwood/types/mirror/api/src/directives/requireAuth/index.d.ts\",\n      \".redwood/types/mirror/api/src/directives/skipAuth/index.d.ts\",\n      \".redwood/types/mirror/api/src/functions/healthz/index.d.ts\",\n      \".redwood/types/mirror/api/src/functions/nested/index.d.ts\",\n      \".redwood/types/mirror/api/src/services/todos/index.d.ts\",\n      \".redwood/types/mirror/web/src/components/AddTodo/index.d.ts\",\n      \".redwood/types/mirror/web/src/components/AddTodoControl/index.d.ts\",\n      \".redwood/types/mirror/web/src/components/Check/index.d.ts\",\n      \".redwood/types/mirror/web/src/components/TableCell/index.d.ts\",\n      \".redwood/types/mirror/web/src/components/TodoItem/index.d.ts\",\n      \".redwood/types/mirror/web/src/layouts/SetLayout/index.d.ts\",\n      \".redwood/types/mirror/web/src/pages/BarPage/index.d.ts\",\n      \".redwood/types/mirror/web/src/pages/FatalErrorPage/index.d.ts\",\n      \".redwood/types/mirror/web/src/pages/FooPage/index.d.ts\",\n      \".redwood/types/mirror/web/src/pages/HomePage/index.d.ts\",\n      \".redwood/types/mirror/web/src/pages/NotFoundPage/index.d.ts\",\n      \".redwood/types/mirror/web/src/pages/PrivatePage/index.d.ts\",\n      \".redwood/types/mirror/web/src/pages/TypeScriptPage/index.d.ts\",\n      \".redwood/types/mirror/web/src/pages/admin/EditUserPage/index.d.ts\",\n    ]\n  `)\n\n  expect(fs.readFileSync(paths[0], 'utf-8')).toMatchInlineSnapshot(`\n    \"// This file was generated by RedwoodJS\n    import { default as DEFAULT } from './requireAuth'\n    export default DEFAULT\n    export * from './requireAuth'\n    \"\n  `)\n})","file":"typeDefinitions.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"generates global page imports","suites":[],"updatePoint":{"line":102,"column":35},"line":102,"code":"test('generates global page imports', () => {\n  const paths = generateTypeDefRouterPages()\n  const p = paths.map(cleanPaths)\n  expect(p[0]).toEqual('.redwood/types/includes/web-routesPages.d.ts')\n\n  const c = fs.readFileSync(paths[0], 'utf-8')\n\n  expect(c).toContain(`\ndeclare global {\n  const BarPage: typeof BarPageType\n  const FatalErrorPage: typeof FatalErrorPageType\n  const FooPage: typeof FooPageType\n  const HomePage: typeof HomePageType\n  const NotFoundPage: typeof NotFoundPageType\n  const PrivatePage: typeof PrivatePageType\n  const TypeScriptPage: typeof TypeScriptPageType\n  const adminEditUserPage: typeof adminEditUserPageType\n}`)\n})","file":"typeDefinitions.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"generate current user ","suites":[],"updatePoint":{"line":122,"column":28},"line":122,"code":"test('generate current user ', () => {\n  const paths = generateTypeDefCurrentUser()\n  const p = paths.map(cleanPaths)\n  expect(p[0]).toEqual('.redwood/types/includes/all-currentUser.d.ts')\n  // The type definition output is static, so there's nothing to test.\n})","file":"typeDefinitions.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"generates the router routes","suites":[],"updatePoint":{"line":129,"column":33},"line":129,"code":"test('generates the router routes', () => {\n  const paths = generateTypeDefRouterRoutes()\n  const p = paths.map(cleanPaths)\n  expect(p[0]).toEqual('.redwood/types/includes/web-routerRoutes.d.ts')\n\n  const c = fs.readFileSync(paths[0], 'utf-8')\n  expect(c).toContain(`\n    home: (params?: RouteParams<\"/\"> & QueryParams) => \"/\"\n    typescriptPage: (params?: RouteParams<\"/typescript\"> & QueryParams) => \"/typescript\"\n    someOtherPage: (params?: RouteParams<\"/somewhereElse\"> & QueryParams) => \"/somewhereElse\"\n    fooPage: (params?: RouteParams<\"/foo\"> & QueryParams) => \"/foo\"\n    barPage: (params?: RouteParams<\"/bar\"> & QueryParams) => \"/bar\"\n    privatePage: (params?: RouteParams<\"/private-page\"> & QueryParams) => \"/private-page\"\n`)\n})","file":"typeDefinitions.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"generate glob imports","suites":[],"updatePoint":{"line":145,"column":27},"line":145,"code":"test('generate glob imports', () => {\n  const paths = generateTypeDefGlobImports()\n  const p = paths.map(cleanPaths)\n  expect(p[0]).toEqual('.redwood/types/includes/api-globImports.d.ts')\n})","file":"typeDefinitions.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"generate api global context","suites":[],"updatePoint":{"line":151,"column":33},"line":151,"code":"test('generate api global context', () => {\n  const paths = generateTypeDefGlobalContext()\n  const p = paths.map(cleanPaths)\n  expect(p[0]).toEqual('.redwood/types/includes/api-globalContext.d.ts')\n})","file":"typeDefinitions.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"generate scenario type defs","suites":[],"updatePoint":{"line":157,"column":33},"line":157,"code":"test('generate scenario type defs', () => {\n  const paths = generateTypeDefScenarios()\n  const p = paths.map(cleanPaths)\n  expect(p[0]).toEqual('.redwood/types/includes/api-scenarios.d.ts')\n})","file":"typeDefinitions.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"mirror path for directory named modules","suites":[],"updatePoint":{"line":163,"column":45},"line":163,"code":"test('mirror path for directory named modules', () => {\n  const d = findDirectoryNamedModules()\n  const p = mirrorPathForDirectoryNamedModules(d[0])\n\n  expect(cleanPaths(p[0])).toMatchInlineSnapshot(\n    `\".redwood/types/mirror/api/src/directives/requireAuth\"`\n  )\n})","file":"typeDefinitions.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"mirror path for dir cells","suites":[],"updatePoint":{"line":172,"column":31},"line":172,"code":"test('mirror path for dir cells', () => {\n  const c = findCells()\n  const p = mirrorPathForCell(c[0])\n\n  expect(cleanPaths(p[0])).toMatchInlineSnapshot(\n    `\".redwood/types/mirror/web/src/components/NumTodosCell\"`\n  )\n})","file":"typeDefinitions.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Validates correctly on all platforms","suites":[],"updatePoint":{"line":17,"column":42},"line":17,"code":"test('Validates correctly on all platforms', async () => {\n  await expect(loadAndValidateSdls()).resolves.not.toThrowError()\n})","file":"validateSchema.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"with proper roles set on directives","suites":["SDL uses auth directives","SDL is valid"],"updatePoint":{"line":58,"column":45},"line":58,"code":"    test('with proper roles set on directives', async () => {\n      await expect(\n        validateSdlFile('todosWithAuthRoles')\n      ).resolves.not.toThrowError()\n    })","file":"validateSchemaForAuthDirectives.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"with uppercase single string roles declared on a Mutation","suites":["SDL uses auth directives","SDL is valid"],"updatePoint":{"line":64,"column":67},"line":64,"code":"    test('with uppercase single string roles declared on a Mutation', async () => {\n      await expect(\n        validateSdlFile('todosMutations')\n      ).resolves.not.toThrowError()\n    })","file":"validateSchemaForAuthDirectives.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"with a built-in @deprecated directive","suites":["SDL uses auth directives","SDL is valid"],"updatePoint":{"line":70,"column":47},"line":70,"code":"    test('with a built-in @deprecated directive', async () => {\n      await expect(\n        validateSdlFile('todosWithBuiltInDirectives')\n      ).resolves.not.toThrowError()\n    })","file":"validateSchemaForAuthDirectives.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"because missing directives","suites":["SDL uses auth directives","SDL is invalid"],"updatePoint":{"line":78,"column":36},"line":78,"code":"    test('because missing directives', async () => {\n      await expect(validateSdlFile('todos')).rejects.toThrowError(\n        DIRECTIVE_REQUIRED_ERROR_MESSAGE\n      )\n    })","file":"validateSchemaForAuthDirectives.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"due to auth role errors","suites":["SDL uses auth directives","SDL is invalid"],"updatePoint":{"line":84,"column":33},"line":84,"code":"    test('due to auth role errors', async () => {\n      await expect(\n        validateSdlFile('todosWithAuthInvalidRolesErrors')\n      ).rejects.toThrowError(DIRECTIVE_INVALID_ROLE_TYPES_ERROR_MESSAGE)\n    })","file":"validateSchemaForAuthDirectives.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"due to auth role errors when the role is missing/null","suites":["SDL uses auth directives","SDL is invalid"],"updatePoint":{"line":90,"column":63},"line":90,"code":"    test('due to auth role errors when the role is missing/null', async () => {\n      await expect(\n        validateSdlFile('todosWithAuthMissingRoleError')\n      ).rejects.toThrowError(DIRECTIVE_INVALID_ROLE_TYPES_ERROR_MESSAGE)\n    })","file":"validateSchemaForAuthDirectives.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"due to auth role being numeric instead of string","suites":["SDL uses auth directives","SDL is invalid"],"updatePoint":{"line":96,"column":58},"line":96,"code":"    test('due to auth role being numeric instead of string', async () => {\n      await expect(\n        validateSdlFile('todosWithAuthMissingRoleError')\n      ).rejects.toThrowError(DIRECTIVE_INVALID_ROLE_TYPES_ERROR_MESSAGE)\n    })","file":"validateSchemaForAuthDirectives.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"due to requireAuthDirective missing roles attribute but argument value is a string","suites":["SDL uses auth directives","SDL is invalid","and SDL missing the roles attribute"],"updatePoint":{"line":103,"column":94},"line":103,"code":"      test('due to requireAuthDirective missing roles attribute but argument value is a string', async () => {\n        await expect(\n          validateSdlFile('todosWithMissingAuthRolesAttributeError')\n        ).rejects.toThrowError(\n          'Syntax Error: Expected Name, found String \"ADMIN\"'\n        )\n      })","file":"validateSchemaForAuthDirectives.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"due to requireAuthDirective missing roles attribute when argument value is numeric","suites":["SDL uses auth directives","SDL is invalid","and SDL missing the roles attribute"],"updatePoint":{"line":111,"column":94},"line":111,"code":"      test('due to requireAuthDirective missing roles attribute when argument value is numeric', async () => {\n        await expect(\n          validateSdlFile('todosWithMissingAuthRolesAttributeNumericError')\n        ).rejects.toThrowError('Syntax Error: Expected Name, found Int \"42\".')\n      })","file":"validateSchemaForAuthDirectives.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"is invalid due to missing directives","suites":["SDL is missing directives"],"updatePoint":{"line":22,"column":44},"line":22,"code":"  test('is invalid due to missing directives', async () => {\n    await expect(loadAndValidateSdls()).rejects.toThrowError(\n      DIRECTIVE_REQUIRED_ERROR_MESSAGE\n    )\n  })","file":"validateSchemaWithErrors.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"does not throw an error due to invalid roles","suites":["SDL is missing directives"],"updatePoint":{"line":28,"column":52},"line":28,"code":"  test('does not throw an error due to invalid roles', async () => {\n    await expect(loadAndValidateSdls()).rejects.not.toThrowError(\n      DIRECTIVE_INVALID_ROLE_TYPES_ERROR_MESSAGE\n    )\n  })","file":"validateSchemaWithErrors.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Should correctly detect routes with prerender prop","suites":["Detecting routes"],"updatePoint":{"line":39,"column":56},"line":39,"code":"  it('Should correctly detect routes with prerender prop', () => {\n    mockedRoutes = [\n      { name: 'home', path: '/', prerender: true },\n      { name: 'private', path: '/private', prerender: false },\n      { name: 'about', path: '/about', prerender: true },\n    ]\n    const output = detectPrerenderRoutes()\n    expect(output.length).toBe(2)\n    expectPresence(output, { name: 'home', path: '/' })\n    expectPresence(output, { name: 'about', path: '/about' })\n\n    expect(output).not.toContainEqual(\n      expect.objectContaining({ name: 'private', path: '/private' })\n    )\n  })","file":"detectRoutes.test.ts","skipped":false,"dir":"packages/prerender/src/__tests__"},{"name":"Should render notFoundPage as 404.html","suites":["Detecting routes"],"updatePoint":{"line":55,"column":44},"line":55,"code":"  it('Should render notFoundPage as 404.html', () => {\n    mockedRoutes = [\n      {\n        name: undefined,\n        path: undefined,\n        prerender: true,\n        isNotFound: true,\n      },\n    ]\n\n    const output = detectPrerenderRoutes()\n    expect(output.length).toBe(1)\n    expect(output[0].name).toBe('404')\n    expect(output[0].path).toBe('/404')\n  })","file":"detectRoutes.test.ts","skipped":false,"dir":"packages/prerender/src/__tests__"},{"name":"Should also allow routes with params","suites":["Detecting routes"],"updatePoint":{"line":71,"column":42},"line":71,"code":"  it('Should also allow routes with params', () => {\n    mockedRoutes = [\n      {\n        name: 'taskDetail',\n        path: '/task/${id}',\n        hasParameters: true,\n        prerender: true,\n      },\n    ]\n\n    const output = detectPrerenderRoutes()\n    expect(output.length).toBe(1)\n  })","file":"detectRoutes.test.ts","skipped":false,"dir":"packages/prerender/src/__tests__"},{"name":"Should return required keys","suites":["Detecting routes"],"updatePoint":{"line":85,"column":33},"line":85,"code":"  it('Should return required keys', () => {\n    mockedRoutes = [\n      {\n        name: 'tasks',\n        path: '/tasks',\n        hasParameters: false,\n        prerender: true,\n        page: {\n          filePath: '/mocked_path/tasks',\n        },\n      },\n      {\n        name: 'kittens',\n        path: '/kittens',\n        hasParameters: false,\n        prerender: true,\n        page: {\n          filePath: '/mocked_path/Kittens.tsx',\n        },\n      },\n    ]\n\n    const output = detectPrerenderRoutes()\n\n    expectPresence(output, {\n      name: 'tasks',\n      path: '/tasks',\n      filePath: '/mocked_path/tasks',\n    })\n\n    expectPresence(output, {\n      name: 'kittens',\n      path: '/kittens',\n      filePath: '/mocked_path/Kittens.tsx',\n    })\n  })","file":"detectRoutes.test.ts","skipped":false,"dir":"packages/prerender/src/__tests__"},{"name":"extracts name and type info","suites":["paramsForRoute"],"line":11,"code":"  it.each([\n    ['/post/{slug}', [['slug', 'String', '{slug}']]],\n    ['/post/{slug...}', [['slug', 'Glob', '{slug...}']]],\n    ['/id/{id:Int}', [['id', 'Int', '{id:Int}']]],\n  ])('extracts name and type info', (route, info) => {\n    expect(paramsForRoute(route)).toEqual(info)\n  })","file":"util.test.ts","skipped":false,"dir":"packages/router/src/__tests__"},{"name":"does not match route \"%s\" with path \"%s\"","suites":["matchPath"],"line":21,"code":"  it.each([\n    ['/post/{id:Int}', '/post/notAnInt'],\n    ['/post/{id:Int}', '/post/2.0'],\n    ['/post/{id:Int}', '/post/.1'],\n    ['/post/{id:Int}', '/post/0.1'],\n    ['/post/{id:Int}', '/post/123abcd'],\n    ['/post/{id:Int}', '/post/abcd123'],\n    ['/blog/{year}/{month:Int}/{day}', '/blog/2019/december/07'],\n    ['/blog/{year}/{month}/{day}', '/blog/2019/07'],\n    ['/posts/{id}/edit', '/posts//edit'],\n    ['/about', '/'],\n  ])('does not match route \"%s\" with path \"%s\"', (route, pathname) => {\n    expect(matchPath(route, pathname)).toEqual({ match: false })\n  })","file":"util.test.ts","skipped":false,"dir":"packages/router/src/__tests__"},{"name":"matches valid paths and extracts params correctly","suites":["matchPath"],"updatePoint":{"line":36,"column":55},"line":36,"code":"  it('matches valid paths and extracts params correctly', () => {\n    expect(matchPath('/blog/{year}/{month}/{day}', '/blog/2019/12/07')).toEqual(\n      { match: true, params: { day: '07', month: '12', year: '2019' } }\n    )\n  })","file":"util.test.ts","skipped":false,"dir":"packages/router/src/__tests__"},{"name":"transforms a param for Int","suites":["matchPath"],"updatePoint":{"line":42,"column":32},"line":42,"code":"  it('transforms a param for Int', () => {\n    expect(matchPath('/post/{id}', '/post/1337')).toEqual({\n      match: true,\n      params: { id: '1337' },\n    })\n\n    expect(matchPath('/post/{id:Int}', '/post/1337')).toEqual({\n      match: true,\n      params: { id: 1337 },\n    })\n\n    expect(matchPath('/post/id-{id:Int}', '/post/id-37')).toEqual({\n      match: true,\n      params: { id: 37 },\n    })\n\n    expect(matchPath('/post/{id:Int}-id', '/post/78-id')).toEqual({\n      match: true,\n      params: { id: 78 },\n    })\n\n    expect(matchPath('/post/id-{id:Int}-id', '/post/id-789-id')).toEqual({\n      match: true,\n      params: { id: 789 },\n    })\n\n    expect(matchPath('/{id:Int}/bazinga', '/89/bazinga')).toEqual({\n      match: true,\n      params: { id: 89 },\n    })\n  })","file":"util.test.ts","skipped":false,"dir":"packages/router/src/__tests__"},{"name":"transforms a param for Boolean","suites":["matchPath"],"updatePoint":{"line":74,"column":36},"line":74,"code":"  it('transforms a param for Boolean', () => {\n    expect(matchPath('/signedUp/{status:Boolean}', '/signedUp/true')).toEqual({\n      match: true,\n      params: {\n        status: true,\n      },\n    })\n\n    expect(matchPath('/signedUp/{status:Boolean}', '/signedUp/false')).toEqual({\n      match: true,\n      params: {\n        status: false,\n      },\n    })\n\n    expect(\n      matchPath('/signedUp/x-{status:Boolean}', '/signedUp/x-false')\n    ).toEqual({\n      match: true,\n      params: {\n        status: false,\n      },\n    })\n\n    expect(\n      matchPath('/signedUp/{status:Boolean}y', '/signedUp/falsey')\n    ).toEqual({\n      match: true,\n      params: {\n        status: false,\n      },\n    })\n\n    expect(\n      matchPath('/signedUp/e{status:Boolean}y', '/signedUp/efalsey')\n    ).toEqual({\n      match: true,\n      params: {\n        status: false,\n      },\n    })\n\n    expect(\n      matchPath('/signedUp/{status:Boolean}', '/signedUp/somethingElse')\n    ).toEqual({\n      match: false,\n    })\n  })","file":"util.test.ts","skipped":false,"dir":"packages/router/src/__tests__"},{"name":"transforms a param for Floats","suites":["matchPath"],"updatePoint":{"line":123,"column":35},"line":123,"code":"  it('transforms a param for Floats', () => {\n    expect(\n      matchPath('/version/{floatyMcFloat:Float}', '/version/1.58')\n    ).toEqual({\n      match: true,\n      params: {\n        floatyMcFloat: 1.58,\n      },\n    })\n\n    expect(matchPath('/version/{floatyMcFloat:Float}', '/version/626')).toEqual(\n      {\n        match: true,\n        params: {\n          floatyMcFloat: 626,\n        },\n      }\n    )\n\n    expect(\n      matchPath('/version/{floatyMcFloat:Float}', '/version/+0.92')\n    ).toEqual({\n      match: true,\n      params: {\n        floatyMcFloat: 0.92,\n      },\n    })\n\n    expect(\n      matchPath('/version/{floatyMcFloat:Float}', '/version/-5.5')\n    ).toEqual({\n      match: true,\n      params: {\n        floatyMcFloat: -5.5,\n      },\n    })\n\n    expect(matchPath('/version/{floatyMcFloat:Float}', '/version/4e8')).toEqual(\n      {\n        match: true,\n        params: {\n          floatyMcFloat: 4e8,\n        },\n      }\n    )\n\n    expect(\n      matchPath('/version/{floatyMcFloat:Float}', '/version/noMatchMe')\n    ).toEqual({\n      match: false,\n    })\n  })","file":"util.test.ts","skipped":false,"dir":"packages/router/src/__tests__"},{"name":"transforms a param for Globs","suites":["matchPath"],"updatePoint":{"line":176,"column":34},"line":176,"code":"  it('transforms a param for Globs', () => {\n    //single\n    expect(matchPath('/version/{path...}', '/version/path/to/file')).toEqual({\n      match: true,\n      params: {\n        path: 'path/to/file',\n      },\n    })\n\n    //  multiple\n    expect(matchPath('/a/{a...}/b/{b...}/c', '/a/1/2/b/3/4/c')).toEqual({\n      match: true,\n      params: {\n        a: '1/2',\n        b: '3/4',\n      },\n    })\n\n    // adjacent\n    expect(matchPath('/a/{a...}{b...}/c', '/a/1/2/3/4/c')).toEqual({\n      match: true,\n      params: {\n        a: '1/2/3/4',\n        b: '',\n      },\n    })\n\n    // adjacent with a slash\n    expect(matchPath('/a/{a...}/{b...}/c', '/a/1/2/3/4/c')).toEqual({\n      match: true,\n      params: {\n        a: '1/2/3',\n        b: '4',\n      },\n    })\n\n    // prefixed\n    expect(matchPath('/a-{a...}', '/a-1/2')).toEqual({\n      match: true,\n      params: {\n        a: '1/2',\n      },\n    })\n\n    // suffixed\n    expect(matchPath('/{a...}-a/kittens', '/1/2-a/kittens')).toEqual({\n      match: true,\n      params: {\n        a: '1/2',\n      },\n    })\n  })","file":"util.test.ts","skipped":false,"dir":"packages/router/src/__tests__"},{"name":"handles multiple typed params","suites":["matchPath"],"updatePoint":{"line":229,"column":35},"line":229,"code":"  it('handles multiple typed params', () => {\n    expect(\n      matchPath(\n        '/dashboard/document/{id:Int}/{version:Float}/edit/{edit:Boolean}/{path...}/terminate',\n        '/dashboard/document/44/1.8/edit/false/path/to/file/terminate'\n      )\n    ).toEqual({\n      match: true,\n      params: { id: 44, version: 1.8, edit: false, path: 'path/to/file' },\n    })\n  })","file":"util.test.ts","skipped":false,"dir":"packages/router/src/__tests__"},{"name":"rejects \"%s\" path that does not begin with a slash","suites":["validatePath"],"line":243,"code":"  it.each([\n    { path: 'invalid/route', routeName: 'isInvalid' },\n    { path: '{id}/invalid/route', routeName: 'isInvalid' },\n    { path: ' /invalid/route', routeName: 'isInvalid' },\n  ])(\n    'rejects \"%s\" path that does not begin with a slash',\n    ({ path, routeName }) => {\n      expect(() => validatePath(path, routeName)).toThrowError(\n        `Route path for ${routeName} does not begin with a slash: \"${path}\"`\n      )\n    }\n  )","file":"util.test.ts","skipped":false,"dir":"packages/router/src/__tests__"},{"name":"rejects paths with spaces: \"%s\"","suites":["validatePath"],"line":256,"code":"  it.each([\n    { path: '/path/to/user profile', routeName: 'hasSpaces' },\n    { path: '/path/ to/userprofile', routeName: 'hasSpaces' },\n    { path: '/path/to /userprofile', routeName: 'hasSpaces' },\n    { path: '/path/to/users/{id: Int}', routeName: 'hasSpaces' },\n    { path: '/path/to/users/{id :Int}', routeName: 'hasSpaces' },\n    { path: '/path/to/users/{id : Int}', routeName: 'hasSpaces' },\n    { path: '/path/to/users/{ id:Int}', routeName: 'hasSpaces' },\n    { path: '/path/to/users/{id:Int }', routeName: 'hasSpaces' },\n    { path: '/path/to/users/{ id:Int }', routeName: 'hasSpaces' },\n    { path: '/path/to/users/{ id : Int }', routeName: 'hasSpaces' },\n  ])('rejects paths with spaces: \"%s\"', ({ path, routeName }) => {\n    expect(() => validatePath(path, routeName)).toThrowError(\n      `Route path for ${routeName} contains spaces: \"${path}\"`\n    )\n  })","file":"util.test.ts","skipped":false,"dir":"packages/router/src/__tests__"},{"name":"rejects path \"%s\" with duplicate params","suites":["validatePath"],"line":273,"code":"  it.each([\n    { path: '/users/{id}/photos/{id}', routeName: 'hasDuplicateParams' },\n    { path: '/users/{id}/photos/{id:Int}', routeName: 'hasDuplicateParams' },\n    { path: '/users/{id:Int}/photos/{id}', routeName: 'hasDuplicateParams' },\n    {\n      path: '/users/{id:Int}/photos/{id:Int}',\n      routeName: 'hasDuplicateParams',\n    },\n  ])('rejects path \"%s\" with duplicate params', ({ path, routeName }) => {\n    expect(() => validatePath(path, routeName)).toThrowError(\n      `Route path contains duplicate parameter: \"${path}\"`\n    )\n  })","file":"util.test.ts","skipped":false,"dir":"packages/router/src/__tests__"},{"name":"validates correct path \"%s\"","suites":["validatePath"],"line":287,"code":"  it.each([\n    {\n      path: '/users/{id:Int}/photos/{photo_id:Int}',\n      routeName: 'validCorrectPath',\n    },\n    { path: '/users/{id}/photos/{photo_id}', routeName: 'validCorrectPath' },\n    {\n      path: '/users/{id}/photos/{photo_id}?format=jpg&w=400&h=400',\n      routeName: 'validCorrectPath',\n    },\n    { path: '/', routeName: 'validCorrectPath' },\n    { path: '/404', routeName: 'validCorrectPath' },\n    { path: '/about', routeName: 'validCorrectPath' },\n    { path: '/about/redwood', routeName: 'validCorrectPath' },\n  ])('validates correct path \"%s\"', ({ path, routeName }) => {\n    expect(() => validatePath(path, routeName)).not.toThrow()\n  })","file":"util.test.ts","skipped":false,"dir":"packages/router/src/__tests__"},{"name":"rejects paths with ref or key as path parameters: \"%s\"","suites":["validatePath"],"line":305,"code":"  it.each([\n    { path: '/path/{ref}', routeName: 'ref' },\n    { path: '/path/{ref}/bazinga', routeName: 'ref' },\n    { path: '/path/{ref:Int}', routeName: 'ref' },\n    { path: '/path/{ref:Int}/bazinga', routeName: 'ref' },\n    { path: '/path/{key}', routeName: 'key' },\n    { path: '/path/{key}/bazinga', routeName: 'key' },\n    { path: '/path/{key:Int}', routeName: 'key' },\n    { path: '/path/{key:Int}/bazinga', routeName: 'key' },\n  ])(\n    'rejects paths with ref or key as path parameters: \"%s\"',\n    ({ path, routeName }) => {\n      expect(() => validatePath(path, routeName)).toThrowError(\n        [\n          `Route for ${routeName} contains ref or key as a path parameter: \"${path}\"`,\n          \"`ref` and `key` shouldn't be used as path parameters because they're special React props.\",\n          'You can fix this by renaming the path parameter.',\n        ].join('\\n')\n      )\n    }\n  )","file":"util.test.ts","skipped":false,"dir":"packages/router/src/__tests__"},{"name":"doesn't reject paths with variations on ref or key as path parameters: \"%s\"","suites":["validatePath"],"line":327,"code":"  it.each([\n    { path: '/path/{reff}', routeName: 'validRefKeyVariations' },\n    { path: '/path/{reff:Int}', routeName: 'validRefKeyVariations' },\n    { path: '/path/{reff}/bazinga', routeName: 'validRefKeyVariations' },\n    { path: '/path/{keys}', routeName: 'validRefKeyVariations' },\n    { path: '/path/{keys:Int}', routeName: 'validRefKeyVariations' },\n    { path: '/path/key', routeName: 'validRefKeyVariations' },\n    { path: '/path/key/bazinga', routeName: 'validRefKeyVariations' },\n  ])(\n    `doesn't reject paths with variations on ref or key as path parameters: \"%s\"`,\n    ({ path, routeName }) => {\n      expect(() => validatePath(path, routeName)).not.toThrowError()\n    }\n  )","file":"util.test.ts","skipped":false,"dir":"packages/router/src/__tests__"},{"name":"deals silently with an empty search string","suites":["parseSearch"],"updatePoint":{"line":344,"column":48},"line":344,"code":"  it('deals silently with an empty search string', () => {\n    expect(parseSearch('')).toEqual({})\n  })","file":"util.test.ts","skipped":false,"dir":"packages/router/src/__tests__"},{"name":"correctly parses a search string","suites":["parseSearch"],"updatePoint":{"line":348,"column":38},"line":348,"code":"  it('correctly parses a search string', () => {\n    expect(\n      parseSearch('?search=all+dogs+go+to+heaven&category=movies')\n    ).toEqual({ category: 'movies', search: 'all dogs go to heaven' })\n  })","file":"util.test.ts","skipped":false,"dir":"packages/router/src/__tests__"},{"name":"returns a flat array from query string","suites":["flattenSearchParams"],"updatePoint":{"line":356,"column":44},"line":356,"code":"  it('returns a flat array from query string', () => {\n    expect(\n      flattenSearchParams('?search=all+dogs+go+to+heaven&category=movies')\n    ).toEqual([{ search: 'all dogs go to heaven' }, { category: 'movies' }])\n  })","file":"util.test.ts","skipped":false,"dir":"packages/router/src/__tests__"},{"name":"returns an empty array","suites":["flattenSearchParams"],"updatePoint":{"line":362,"column":28},"line":362,"code":"  it('returns an empty array', () => {\n    expect(flattenSearchParams('')).toEqual([])\n  })","file":"util.test.ts","skipped":false,"dir":"packages/router/src/__tests__"},{"name":"throws an error on missing params","suites":["replaceParams"],"updatePoint":{"line":368,"column":39},"line":368,"code":"  it('throws an error on missing params', () => {\n    expect(() => replaceParams('/tags/{tag}', {})).toThrowError(\n      \"Missing parameter 'tag' for route '/tags/{tag}' when generating a navigation URL.\"\n    )\n  })","file":"util.test.ts","skipped":false,"dir":"packages/router/src/__tests__"},{"name":"replaces named parameter with value from the args object","suites":["replaceParams"],"updatePoint":{"line":374,"column":62},"line":374,"code":"  it('replaces named parameter with value from the args object', () => {\n    expect(replaceParams('/tags/{tag}', { tag: 'code' })).toEqual('/tags/code')\n  })","file":"util.test.ts","skipped":false,"dir":"packages/router/src/__tests__"},{"name":"replaces multiple named parameters with values from the args object","suites":["replaceParams"],"updatePoint":{"line":378,"column":73},"line":378,"code":"  it('replaces multiple named parameters with values from the args object', () => {\n    expect(\n      replaceParams('/posts/{year}/{month}/{day}', {\n        year: '2021',\n        month: '09',\n        day: '19',\n      })\n    ).toEqual('/posts/2021/09/19')\n  })","file":"util.test.ts","skipped":false,"dir":"packages/router/src/__tests__"},{"name":"appends extra parameters as search parameters","suites":["replaceParams"],"updatePoint":{"line":388,"column":51},"line":388,"code":"  it('appends extra parameters as search parameters', () => {\n    expect(replaceParams('/extra', { foo: 'foo' })).toEqual('/extra?foo=foo')\n    expect(replaceParams('/tags/{tag}', { tag: 'code', foo: 'foo' })).toEqual(\n      '/tags/code?foo=foo'\n    )\n  })","file":"util.test.ts","skipped":false,"dir":"packages/router/src/__tests__"},{"name":"handles falsy parameter values","suites":["replaceParams"],"updatePoint":{"line":395,"column":36},"line":395,"code":"  it('handles falsy parameter values', () => {\n    expect(replaceParams('/category/{categoryId}', { categoryId: 0 })).toEqual(\n      '/category/0'\n    )\n\n    expect(replaceParams('/boolean/{bool}', { bool: false })).toEqual(\n      '/boolean/false'\n    )\n\n    expect(() =>\n      replaceParams('/undef/{undef}', { undef: undefined })\n    ).toThrowError(\n      \"Missing parameter 'undef' for route '/undef/{undef}' when generating a navigation URL.\"\n    )\n  })","file":"util.test.ts","skipped":false,"dir":"packages/router/src/__tests__"},{"name":"handles typed params","suites":["replaceParams"],"updatePoint":{"line":411,"column":26},"line":411,"code":"  it('handles typed params', () => {\n    expect(replaceParams('/post/{id:Int}', { id: 7 })).toEqual('/post/7')\n    expect(replaceParams('/post/{id:Float}', { id: 7 })).toEqual('/post/7')\n    expect(replaceParams('/post/{id:Bool}', { id: true })).toEqual('/post/true')\n    expect(replaceParams('/post/{id:Bool}', { id: false })).toEqual(\n      '/post/false'\n    )\n    expect(replaceParams('/post/{id:String}', { id: 7 })).toEqual('/post/7')\n  })","file":"util.test.ts","skipped":false,"dir":"packages/router/src/__tests__"},{"name":"handles globs","suites":["replaceParams"],"updatePoint":{"line":421,"column":19},"line":421,"code":"  it('handles globs', () => {\n    expect(replaceParams('/path/{path...}', { path: 'foo/bar' })).toEqual(\n      '/path/foo/bar'\n    )\n\n    expect(replaceParams('/a/{b...}/c/{d...}/e', { b: 1, d: 2 })).toEqual(\n      '/a/1/c/2/e'\n    )\n  })","file":"util.test.ts","skipped":false,"dir":"packages/router/src/__tests__"}]}